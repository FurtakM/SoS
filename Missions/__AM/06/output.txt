// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 166 0 0
// PrepareDeltaBase ;
  86: CALL 2408 0 0
// LoadVehicles ;
  90: CALL 1448 0 0
// PrepareHeroes ;
  94: CALL 287 0 0
// PrepareRandoms ;
  98: CALL 1749 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// end ;
 165: END
// export function CreateNature ; var i ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
// uc_side := 0 ;
 170: LD_ADDR_OWVAR 20
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// uc_nation := 0 ;
 178: LD_ADDR_OWVAR 21
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// for i = 1 to 4 do
 186: LD_ADDR_VAR 0 2
 190: PUSH
 191: DOUBLE
 192: LD_INT 1
 194: DEC
 195: ST_TO_ADDR
 196: LD_INT 4
 198: PUSH
 199: FOR_TO
 200: IFFALSE 280
// begin hc_gallery :=  ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING 
 209: ST_TO_ADDR
// hc_name :=  ;
 210: LD_ADDR_OWVAR 26
 214: PUSH
 215: LD_STRING 
 217: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 218: LD_ADDR_OWVAR 29
 222: PUSH
 223: LD_INT 10
 225: PPUSH
 226: LD_INT 11
 228: PPUSH
 229: CALL_OW 12
 233: PUSH
 234: LD_INT 10
 236: PPUSH
 237: LD_INT 12
 239: PPUSH
 240: CALL_OW 12
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// hc_class := class_apeman ;
 249: LD_ADDR_OWVAR 28
 253: PUSH
 254: LD_INT 12
 256: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 257: CALL_OW 44
 261: PPUSH
 262: LD_INT 22
 264: PPUSH
 265: LD_INT 18
 267: PPUSH
 268: LD_INT 20
 270: PPUSH
 271: LD_INT 0
 273: PPUSH
 274: CALL_OW 50
// end ;
 278: GO 199
 280: POP
 281: POP
// end ; end_of_file
 282: LD_VAR 0 1
 286: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
 291: PPUSH
 292: PPUSH
 293: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 294: LD_ADDR_VAR 0 3
 298: PUSH
 299: LD_INT 22
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 21
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: ARRAY
 347: PPUSH
 348: LD_STRING delta
 350: PPUSH
 351: CALL_OW 500
// uc_side = 1 ;
 355: LD_ADDR_OWVAR 20
 359: PUSH
 360: LD_INT 1
 362: ST_TO_ADDR
// uc_nation = 1 ;
 363: LD_ADDR_OWVAR 21
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_STRING JMM
 378: PPUSH
 379: LD_INT 1
 381: PPUSH
 382: LD_EXP 23
 386: PPUSH
 387: CALL 23783 0 3
 391: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 392: LD_ADDR_EXP 16
 396: PUSH
 397: LD_STRING Harisson
 399: PPUSH
 400: LD_INT 0
 402: PPUSH
 403: LD_STRING 
 405: PPUSH
 406: CALL 23783 0 3
 410: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 411: LD_EXP 1
 415: PPUSH
 416: LD_VAR 0 3
 420: PUSH
 421: LD_INT 1
 423: ARRAY
 424: PPUSH
 425: CALL_OW 250
 429: PPUSH
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 1
 437: ARRAY
 438: PPUSH
 439: CALL_OW 251
 443: PPUSH
 444: LD_INT 5
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 454: LD_EXP 1
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 466: LD_ADDR_EXP 2
 470: PUSH
 471: LD_STRING Gladstone
 473: PPUSH
 474: LD_INT 1
 476: PPUSH
 477: LD_EXP 23
 481: PPUSH
 482: CALL 23783 0 3
 486: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 487: LD_EXP 2
 491: PPUSH
 492: LD_VAR 0 3
 496: PUSH
 497: LD_INT 1
 499: ARRAY
 500: PPUSH
 501: CALL_OW 250
 505: PPUSH
 506: LD_VAR 0 3
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: CALL_OW 251
 519: PPUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 0
 525: PPUSH
 526: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 530: LD_EXP 2
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 336
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 3
 546: PUSH
 547: LD_STRING Denis
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: LD_EXP 23
 557: PPUSH
 558: CALL 23783 0 3
 562: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 563: LD_EXP 3
 567: PPUSH
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PPUSH
 577: CALL_OW 250
 581: PPUSH
 582: LD_VAR 0 3
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: PPUSH
 591: CALL_OW 251
 595: PPUSH
 596: LD_INT 5
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 606: LD_EXP 3
 610: PPUSH
 611: LD_INT 4
 613: PPUSH
 614: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 618: LD_STRING FrankInDelta
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 30
 628: PUSH
 629: LD_INT 1
 631: EQUAL
 632: IFFALSE 710
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 5
 638: PUSH
 639: LD_STRING Frank
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: LD_EXP 23
 649: PPUSH
 650: CALL 23783 0 3
 654: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 655: LD_EXP 5
 659: PPUSH
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 1
 667: ARRAY
 668: PPUSH
 669: CALL_OW 250
 673: PPUSH
 674: LD_VAR 0 3
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: CALL_OW 251
 687: PPUSH
 688: LD_INT 5
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 698: LD_EXP 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 710: LD_STRING LisaInDelta
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 30
 720: PUSH
 721: LD_INT 1
 723: EQUAL
 724: IFFALSE 802
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 726: LD_ADDR_EXP 4
 730: PUSH
 731: LD_STRING Lisa
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_EXP 23
 741: PPUSH
 742: CALL 23783 0 3
 746: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 747: LD_EXP 4
 751: PPUSH
 752: LD_VAR 0 3
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 250
 765: PPUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 251
 779: PPUSH
 780: LD_INT 5
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 790: LD_EXP 4
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 802: LD_STRING BobbyInDelta
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 30
 812: PUSH
 813: LD_INT 1
 815: EQUAL
 816: IFFALSE 894
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 6
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_EXP 23
 833: PPUSH
 834: CALL 23783 0 3
 838: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 839: LD_EXP 6
 843: PPUSH
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: CALL_OW 250
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: CALL_OW 251
 871: PPUSH
 872: LD_INT 5
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 882: LD_EXP 6
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 894: LD_STRING CyrusInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: PUSH
 905: LD_INT 1
 907: EQUAL
 908: IFFALSE 986
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 7
 914: PUSH
 915: LD_STRING Cyrus
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 23
 925: PPUSH
 926: CALL 23783 0 3
 930: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 931: LD_EXP 7
 935: PPUSH
 936: LD_VAR 0 3
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: PPUSH
 945: CALL_OW 250
 949: PPUSH
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: CALL_OW 251
 963: PPUSH
 964: LD_INT 5
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 974: LD_EXP 7
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 986: LD_STRING DonaldsonInDelta
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1078
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1002: LD_ADDR_EXP 9
1006: PUSH
1007: LD_STRING Donaldson
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_EXP 23
1017: PPUSH
1018: CALL 23783 0 3
1022: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1066: LD_EXP 9
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1078: LD_STRING BrownInDelta
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1170
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1094: LD_ADDR_EXP 8
1098: PUSH
1099: LD_STRING Brown
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: LD_EXP 23
1109: PPUSH
1110: CALL 23783 0 3
1114: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1115: LD_EXP 8
1119: PPUSH
1120: LD_VAR 0 3
1124: PUSH
1125: LD_INT 1
1127: ARRAY
1128: PPUSH
1129: CALL_OW 250
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_INT 1
1141: ARRAY
1142: PPUSH
1143: CALL_OW 251
1147: PPUSH
1148: LD_INT 5
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1158: LD_EXP 8
1162: PPUSH
1163: LD_INT 2
1165: PPUSH
1166: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1170: LD_ADDR_EXP 10
1174: PUSH
1175: LD_STRING othersInDelta
1177: PPUSH
1178: CALL_OW 31
1182: ST_TO_ADDR
// for i in others do
1183: LD_ADDR_VAR 0 2
1187: PUSH
1188: LD_EXP 10
1192: PUSH
1193: FOR_IN
1194: IFFALSE 1241
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1196: LD_VAR 0 2
1200: PPUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: PPUSH
1210: CALL_OW 250
1214: PPUSH
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 251
1228: PPUSH
1229: LD_INT 35
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 50
1239: GO 1193
1241: POP
1242: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1243: LD_ADDR_EXP 12
1247: PUSH
1248: LD_STRING apeInDelta
1250: PPUSH
1251: CALL_OW 31
1255: ST_TO_ADDR
// uc_nation = 0 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 0
1263: ST_TO_ADDR
// if apemans > 5 then
1264: LD_EXP 12
1268: PUSH
1269: LD_INT 5
1271: GREATER
1272: IFFALSE 1367
// begin for i := 1 to 5 do
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: DOUBLE
1280: LD_INT 1
1282: DEC
1283: ST_TO_ADDR
1284: LD_INT 5
1286: PUSH
1287: FOR_TO
1288: IFFALSE 1363
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1290: LD_EXP 12
1294: PUSH
1295: LD_VAR 0 2
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 250
1314: PPUSH
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 251
1328: PPUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1339: LD_ADDR_EXP 13
1343: PUSH
1344: LD_EXP 13
1348: PUSH
1349: LD_EXP 12
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: ADD
1360: ST_TO_ADDR
// end ;
1361: GO 1287
1363: POP
1364: POP
// end else
1365: GO 1443
// begin for i in apemans do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: LD_EXP 12
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1441
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_VAR 0 3
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 250
1398: PPUSH
1399: LD_VAR 0 3
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 50
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1423: LD_ADDR_EXP 13
1427: PUSH
1428: LD_EXP 13
1432: PUSH
1433: LD_VAR 0 2
1437: ADD
1438: ST_TO_ADDR
// end ;
1439: GO 1377
1441: POP
1442: POP
// end ; end ;
1443: LD_VAR 0 1
1447: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
1454: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 21
1472: PUSH
1473: LD_INT 3
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 30
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_STRING vehiclesInDelta
1515: PPUSH
1516: EMPTY
1517: PPUSH
1518: CALL_OW 30
1522: ST_TO_ADDR
// for i = 1 to vehicles do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: DOUBLE
1529: LD_INT 1
1531: DEC
1532: ST_TO_ADDR
1533: LD_VAR 0 5
1537: PUSH
1538: FOR_TO
1539: IFFALSE 1742
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: PUSH
1551: LD_INT 4
1553: PLUS
1554: ARRAY
1555: PUSH
1556: LD_INT 11
1558: EQUAL
1559: PUSH
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 2
1569: ARRAY
1570: PUSH
1571: LD_INT 3
1573: EQUAL
1574: OR
1575: IFFALSE 1726
// begin uc_nation = vehicles [ i ] ;
1577: LD_ADDR_OWVAR 21
1581: PUSH
1582: LD_VAR 0 5
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1593: LD_ADDR_OWVAR 37
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1613: LD_ADDR_OWVAR 39
1617: PUSH
1618: LD_VAR 0 5
1622: PUSH
1623: LD_VAR 0 2
1627: PUSH
1628: LD_INT 2
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1633: LD_ADDR_OWVAR 38
1637: PUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: PUSH
1648: LD_INT 3
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1653: LD_ADDR_OWVAR 40
1657: PUSH
1658: LD_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: PUSH
1668: LD_INT 4
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// veh = CreateVehicle ;
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: CALL_OW 45
1682: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1683: LD_VAR 0 3
1687: PPUSH
1688: LD_VAR 0 4
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: CALL_OW 250
1701: PPUSH
1702: LD_VAR 0 4
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: PPUSH
1711: CALL_OW 251
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 50
// end ; i = i + 4 ;
1726: LD_ADDR_VAR 0 2
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 4
1738: PLUS
1739: ST_TO_ADDR
// end ;
1740: GO 1538
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
1755: PPUSH
// uc_side = 1 ;
1756: LD_ADDR_OWVAR 20
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// uc_nation = 1 ;
1764: LD_ADDR_OWVAR 21
1768: PUSH
1769: LD_INT 1
1771: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1772: LD_ADDR_VAR 0 4
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 21
1789: PUSH
1790: LD_INT 3
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1817: LD_INT 22
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 25
1829: PUSH
1830: LD_INT 4
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: PPUSH
1855: CALL_OW 69
1859: PUSH
1860: LD_EXP 1
1864: PUSH
1865: LD_EXP 7
1869: PUSH
1870: LD_EXP 6
1874: PUSH
1875: LD_EXP 5
1879: PUSH
1880: LD_EXP 2
1884: PUSH
1885: LD_EXP 3
1889: PUSH
1890: LD_EXP 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: DIFF
1904: IFFALSE 2005
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1906: LD_ADDR_EXP 15
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 25
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 69
1953: PUSH
1954: LD_EXP 1
1958: PUSH
1959: LD_EXP 7
1963: PUSH
1964: LD_EXP 6
1968: PUSH
1969: LD_EXP 5
1973: PUSH
1974: LD_EXP 2
1978: PUSH
1979: LD_EXP 3
1983: PUSH
1984: LD_EXP 8
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: DIFF
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: ST_TO_ADDR
2003: GO 2152
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: PPUSH
2037: CALL_OW 69
2041: PUSH
2042: LD_EXP 1
2046: PUSH
2047: LD_EXP 7
2051: PUSH
2052: LD_EXP 6
2056: PUSH
2057: LD_EXP 5
2061: PUSH
2062: LD_EXP 2
2066: PUSH
2067: LD_EXP 3
2071: PUSH
2072: LD_EXP 8
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: DIFF
2086: ST_TO_ADDR
// if filter then
2087: LD_VAR 0 5
2091: IFFALSE 2152
// for i in filter do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_VAR 0 5
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2150
// if GetSkill ( i , 4 ) >= 4 then
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 259
2118: PUSH
2119: LD_INT 4
2121: GREATEREQUAL
2122: IFFALSE 2148
// begin deltaDoctor := i ;
2124: LD_ADDR_EXP 15
2128: PUSH
2129: LD_VAR 0 2
2133: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2134: LD_EXP 15
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// break ;
2146: GO 2150
// end ;
2148: GO 2103
2150: POP
2151: POP
// end ; for i = 1 to 7 do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 7
2164: PUSH
2165: FOR_TO
2166: IFFALSE 2303
// begin hc_gallery =  ;
2168: LD_ADDR_OWVAR 33
2172: PUSH
2173: LD_STRING 
2175: ST_TO_ADDR
// hc_name =  ;
2176: LD_ADDR_OWVAR 26
2180: PUSH
2181: LD_STRING 
2183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2184: LD_INT 0
2186: PPUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 1
2207: PPUSH
2208: LD_INT 4
2210: PPUSH
2211: CALL_OW 12
2215: ARRAY
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 12
2227: PPUSH
2228: CALL_OW 380
// un = CreateHuman ;
2232: LD_ADDR_VAR 0 3
2236: PUSH
2237: CALL_OW 44
2241: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2242: LD_ADDR_EXP 11
2246: PUSH
2247: LD_EXP 11
2251: PUSH
2252: LD_VAR 0 3
2256: ADD
2257: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 250
2276: PPUSH
2277: LD_VAR 0 4
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 251
2290: PPUSH
2291: LD_INT 15
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// end ;
2301: GO 2165
2303: POP
2304: POP
// if deltaDoctor then
2305: LD_EXP 15
2309: IFFALSE 2313
// exit ;
2311: GO 2403
// hc_gallery = Dawkins ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING Dawkins
2320: ST_TO_ADDR
// hc_face_number := 1 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Dr. Adam Charles Dawkins
2336: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 380
// deltaDoctor = CreateHuman ;
2350: LD_ADDR_EXP 15
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2360: LD_EXP 15
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 250
2378: PPUSH
2379: LD_VAR 0 4
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: CALL_OW 251
2392: PPUSH
2393: LD_INT 5
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 50
// end ; end_of_file
2403: LD_VAR 0 1
2407: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_STRING buildingsInDelta
2424: PPUSH
2425: EMPTY
2426: PPUSH
2427: CALL_OW 30
2431: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 40
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: CALL_OW 441
// uc_side = 1 ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// uc_nation = 1 ;
2453: LD_ADDR_OWVAR 21
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i = 1 to buildings do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_VAR 0 5
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2775
// begin bc_type = buildings [ i ] [ 1 ] ;
2479: LD_ADDR_OWVAR 42
2483: PUSH
2484: LD_VAR 0 5
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2499: LD_ADDR_OWVAR 43
2503: PUSH
2504: LD_VAR 0 5
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: ST_TO_ADDR
// if bc_type = b_lab then
2519: LD_OWVAR 42
2523: PUSH
2524: LD_INT 6
2526: EQUAL
2527: IFFALSE 2545
// begin bc_kind1 = b_lab_basic ;
2529: LD_ADDR_OWVAR 44
2533: PUSH
2534: LD_INT 9
2536: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2537: LD_ADDR_OWVAR 45
2541: PUSH
2542: LD_INT 9
2544: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2545: LD_OWVAR 42
2549: PUSH
2550: LD_INT 7
2552: EQUAL
2553: PUSH
2554: LD_OWVAR 42
2558: PUSH
2559: LD_INT 8
2561: EQUAL
2562: OR
2563: IFFALSE 2679
// begin if buildings [ i ] [ 6 ] then
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 2
2574: ARRAY
2575: PUSH
2576: LD_INT 6
2578: ARRAY
2579: IFFALSE 2601
// bc_kind1 = buildings [ i ] [ 6 ] ;
2581: LD_ADDR_OWVAR 44
2585: PUSH
2586: LD_VAR 0 5
2590: PUSH
2591: LD_VAR 0 2
2595: ARRAY
2596: PUSH
2597: LD_INT 6
2599: ARRAY
2600: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2601: LD_VAR 0 5
2605: PUSH
2606: LD_VAR 0 2
2610: ARRAY
2611: PUSH
2612: LD_INT 7
2614: ARRAY
2615: IFFALSE 2637
// bc_kind2 = buildings [ i ] [ 7 ] ;
2617: LD_ADDR_OWVAR 45
2621: PUSH
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 2
2631: ARRAY
2632: PUSH
2633: LD_INT 7
2635: ARRAY
2636: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 2
2646: ARRAY
2647: PUSH
2648: LD_INT 6
2650: ARRAY
2651: NOT
2652: PUSH
2653: LD_VAR 0 5
2657: PUSH
2658: LD_VAR 0 2
2662: ARRAY
2663: PUSH
2664: LD_INT 7
2666: ARRAY
2667: NOT
2668: AND
2669: IFFALSE 2679
// bc_type := b_lab ;
2671: LD_ADDR_OWVAR 42
2675: PUSH
2676: LD_INT 6
2678: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 5
2688: PUSH
2689: LD_VAR 0 2
2693: ARRAY
2694: PUSH
2695: LD_INT 3
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 5
2703: PUSH
2704: LD_VAR 0 2
2708: ARRAY
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 5
2718: PUSH
2719: LD_VAR 0 2
2723: ARRAY
2724: PUSH
2725: LD_INT 5
2727: ARRAY
2728: PPUSH
2729: CALL_OW 47
2733: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2734: LD_VAR 0 4
2738: PPUSH
2739: CALL_OW 266
2743: PUSH
2744: LD_INT 32
2746: EQUAL
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2476
2775: POP
2776: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2874: LD_VAR 0 6
2878: PUSH
2879: LD_INT 0
2881: GREATER
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_INT 0
2890: GREATER
2891: AND
2892: IFFALSE 2902
// baseCorrect = 1 ;
2894: LD_ADDR_EXP 18
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
// if baseCorrect = 0 then
2902: LD_EXP 18
2906: PUSH
2907: LD_INT 0
2909: EQUAL
2910: IFFALSE 3283
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 69
2945: PUSH
2946: FOR_IN
2947: IFFALSE 2960
// RemoveUnit ( i ) ;
2949: LD_VAR 0 2
2953: PPUSH
2954: CALL_OW 64
2958: GO 2946
2960: POP
2961: POP
// uc_nation = 1 ;
2962: LD_ADDR_OWVAR 21
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// uc_side = 1 ;
2970: LD_ADDR_OWVAR 20
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// bc_level = 5 ;
2978: LD_ADDR_OWVAR 43
2982: PUSH
2983: LD_INT 5
2985: ST_TO_ADDR
// bc_type = b_depot ;
2986: LD_ADDR_OWVAR 42
2990: PUSH
2991: LD_INT 0
2993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2994: LD_INT 50
2996: PPUSH
2997: LD_INT 22
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: CALL_OW 47
// bc_type = b_bunker ;
3007: LD_ADDR_OWVAR 42
3011: PUSH
3012: LD_INT 32
3014: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3015: LD_ADDR_VAR 0 4
3019: PUSH
3020: LD_INT 68
3022: PPUSH
3023: LD_INT 24
3025: PPUSH
3026: LD_INT 4
3028: PPUSH
3029: CALL_OW 47
3033: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 11
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 12
3059: ARRAY
3060: PPUSH
3061: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_INT 71
3072: PPUSH
3073: LD_INT 34
3075: PPUSH
3076: LD_INT 4
3078: PPUSH
3079: CALL_OW 47
3083: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3084: LD_VAR 0 4
3088: PPUSH
3089: LD_INT 4
3091: PUSH
3092: LD_INT 11
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 1
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 12
3109: ARRAY
3110: PPUSH
3111: CALL_OW 431
// bc_type = 31 ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3123: LD_INT 51
3125: PPUSH
3126: LD_INT 7
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL_OW 47
// bc_type = b_oil_mine ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 29
3143: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3144: LD_INT 68
3146: PPUSH
3147: LD_INT 40
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 47
// bc_type = b_workshop ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_INT 2
3164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3165: LD_INT 38
3167: PPUSH
3168: LD_INT 20
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: CALL_OW 47
// bc_type = b_armoury ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 4
3185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3186: LD_INT 38
3188: PPUSH
3189: LD_INT 20
3191: PPUSH
3192: LD_INT 2
3194: PPUSH
3195: CALL_OW 47
// bc_type = b_solar_power ;
3199: LD_ADDR_OWVAR 42
3203: PUSH
3204: LD_INT 27
3206: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3207: LD_INT 46
3209: PPUSH
3210: LD_INT 12
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3220: LD_INT 48
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3233: LD_INT 49
3235: PPUSH
3236: LD_INT 11
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: CALL_OW 47
// bc_type = b_lab_half ;
3246: LD_ADDR_OWVAR 42
3250: PUSH
3251: LD_INT 7
3253: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3254: LD_ADDR_OWVAR 44
3258: PUSH
3259: LD_INT 15
3261: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3262: LD_ADDR_OWVAR 45
3266: PUSH
3267: LD_INT 9
3269: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3270: LD_INT 42
3272: PPUSH
3273: LD_INT 15
3275: PPUSH
3276: LD_INT 2
3278: PPUSH
3279: CALL_OW 47
// end ; end ; end_of_file
3283: LD_VAR 0 1
3287: RET
// every 1 do var i , j , tmp ;
3288: GO 3290
3290: DISABLE
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
// begin InGameOn ;
3296: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3300: LD_EXP 20
3304: PUSH
3305: LD_INT 1
3307: ARRAY
3308: PPUSH
3309: CALL_OW 87
// if IsOK ( Denis ) then
3313: LD_EXP 3
3317: PPUSH
3318: CALL_OW 302
3322: IFFALSE 3350
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3324: LD_INT 6
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: LD_INT 2
3332: PPUSH
3333: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3337: LD_INT 20
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3380: LD_EXP 15
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3394: LD_EXP 1
3398: PPUSH
3399: LD_EXP 15
3403: PPUSH
3404: CALL_OW 296
3408: PUSH
3409: LD_INT 5
3411: LESS
3412: IFFALSE 3373
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_EXP 1
3423: PPUSH
3424: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3428: LD_EXP 1
3432: PPUSH
3433: LD_STRING D1-JMM-1
3435: PPUSH
3436: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3440: LD_EXP 15
3444: PPUSH
3445: LD_STRING D1-Sci-1
3447: PPUSH
3448: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3452: LD_EXP 1
3456: PUSH
3457: LD_EXP 15
3461: PUSH
3462: LD_EXP 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: PPUSH
3472: LD_EXP 20
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 120
// end ;
3485: PPOPN 3
3487: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3488: LD_EXP 1
3492: PPUSH
3493: CALL_OW 310
3497: PUSH
3498: LD_EXP 20
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: EQUAL
3507: PUSH
3508: LD_EXP 15
3512: PPUSH
3513: CALL_OW 310
3517: PUSH
3518: LD_EXP 20
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: EQUAL
3527: AND
3528: IFFALSE 4074
3530: GO 3532
3532: DISABLE
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3538: LD_EXP 20
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D1-JMM-2
3558: PPUSH
3559: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D1-Sci-2
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D1-JMM-3
3582: PPUSH
3583: CALL_OW 88
// if IsOK ( Denis ) then
3587: LD_EXP 3
3591: PPUSH
3592: CALL_OW 302
3596: IFFALSE 3612
// Say ( DeltaDoctor , D1-Sci-3 ) else
3598: LD_EXP 15
3602: PPUSH
3603: LD_STRING D1-Sci-3
3605: PPUSH
3606: CALL_OW 88
3610: GO 3624
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3612: LD_EXP 15
3616: PPUSH
3617: LD_STRING D1-Sci-3a
3619: PPUSH
3620: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING D1-JMM-4
3631: PPUSH
3632: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_INT 22
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 25
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: LD_INT 54
3666: PUSH
3667: EMPTY
3668: LIST
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 69
3683: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3684: LD_ADDR_VAR 0 1
3688: PUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3755
// for j in tmp do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3751
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 250
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 251
3744: PPUSH
3745: CALL_OW 191
3749: GO 3717
3751: POP
3752: POP
3753: GO 3704
3755: POP
3756: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3757: LD_EXP 15
3761: PPUSH
3762: LD_STRING D1-Sci-4
3764: PPUSH
3765: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3769: LD_EXP 1
3773: PPUSH
3774: LD_STRING D1-JMM-5
3776: PPUSH
3777: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3781: LD_EXP 15
3785: PPUSH
3786: LD_STRING D1-Sci-5
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-6
3800: PPUSH
3801: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3805: LD_EXP 16
3809: PPUSH
3810: LD_STRING D1-Har-6
3812: PPUSH
3813: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3817: LD_EXP 1
3821: PPUSH
3822: LD_STRING D1-JMM-7
3824: PPUSH
3825: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3829: LD_EXP 16
3833: PPUSH
3834: LD_STRING D1-Har-7
3836: PPUSH
3837: CALL_OW 94
// if IsOK ( Denis ) then
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 302
3850: IFFALSE 3864
// Say ( JMM , D1-JMM-8 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D1-JMM-8
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D1-JMM-8a
3871: PPUSH
3872: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3876: LD_EXP 16
3880: PPUSH
3881: LD_STRING D1-Har-8
3883: PPUSH
3884: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D1-JMM-9
3895: PPUSH
3896: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3900: LD_EXP 16
3904: PPUSH
3905: LD_STRING D1-Har-9
3907: PPUSH
3908: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3912: LD_EXP 1
3916: PPUSH
3917: LD_STRING D1-JMM-10
3919: PPUSH
3920: CALL_OW 88
// if IsOK ( Denis ) then
3924: LD_EXP 3
3928: PPUSH
3929: CALL_OW 302
3933: IFFALSE 3947
// Say ( JMM , D1-JMM-10a ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING D1-JMM-10a
3942: PPUSH
3943: CALL_OW 88
// SelectDeltaCharacters ;
3947: CALL 4433 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3951: LD_EXP 20
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 274
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 150
3970: PPUSH
3971: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3975: LD_INT 22
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 30
3987: PUSH
3988: LD_INT 29
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PPUSH
3999: CALL_OW 69
4003: PUSH
4004: LD_INT 0
4006: GREATER
4007: IFFALSE 4033
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4009: LD_EXP 20
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: CALL_OW 274
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: LD_INT 300
4028: PPUSH
4029: CALL_OW 277
// InGameOff ;
4033: CALL_OW 9
// Query ( Q1 ) ;
4037: LD_STRING Q1
4039: PPUSH
4040: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4044: LD_INT 3
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL_OW 424
// if IsInUnit ( JMM ) then
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 310
4063: IFFALSE 4074
// ComExitBuilding ( JMM ) ;
4065: LD_EXP 1
4069: PPUSH
4070: CALL_OW 122
// end ;
4074: PPOPN 3
4076: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 22
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 21
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 71
4108: PUSH
4109: LD_INT 0
4111: EQUAL
4112: IFFALSE 4430
4114: GO 4116
4116: DISABLE
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// begin SaveDeltaCharacters ;
4121: CALL 4787 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PPUSH
4155: CALL_OW 70
4159: IFFALSE 4416
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4161: LD_ADDR_VAR 0 1
4165: PUSH
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 58
4184: PUSH
4185: EMPTY
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 70
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4414
// begin cargoType = GetCargoType ( i ) ;
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 288
4218: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4219: LD_VAR 0 1
4223: PPUSH
4224: CALL_OW 264
4228: PUSH
4229: LD_INT 12
4231: EQUAL
4232: IFFALSE 4329
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4234: LD_ADDR_EXP 14
4238: PUSH
4239: LD_EXP 14
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 248
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 265
4263: PUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 262
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL_OW 263
4283: PUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 264
4293: PUSH
4294: LD_VAR 0 2
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: LD_VAR 0 2
4308: PPUSH
4309: CALL_OW 289
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: ADD
4326: ST_TO_ADDR
4327: GO 4400
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4329: LD_ADDR_EXP 14
4333: PUSH
4334: LD_EXP 14
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: CALL_OW 248
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: CALL_OW 265
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 262
4368: PUSH
4369: LD_VAR 0 1
4373: PPUSH
4374: CALL_OW 263
4378: PUSH
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 264
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PUSH
4396: EMPTY
4397: LIST
4398: ADD
4399: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4400: LD_EXP 14
4404: PPUSH
4405: LD_STRING 06_VehiclesIn06_1
4407: PPUSH
4408: CALL_OW 39
// end ;
4412: GO 4201
4414: POP
4415: POP
// end ; SaveCargos ;
4416: CALL 5543 0 0
// ChangeMap ( 6 , %_cont ) ;
4420: LD_INT 6
4422: PPUSH
4423: LD_STRING %_cont
4425: PPUSH
4426: CALL_OW 340
// end ; end_of_file
4430: PPOPN 2
4432: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// selectedPeople := [ ] ;
4438: LD_ADDR_EXP 17
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_EXP 1
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: DIFF
4550: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4551: LD_ADDR_EXP 17
4555: PUSH
4556: LD_STRING text
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT -5
4567: PUSH
4568: LD_EXP 1
4572: PUSH
4573: LD_INT -6
4575: PUSH
4576: LD_INT -2
4578: PUSH
4579: LD_INT -3
4581: PUSH
4582: LD_INT -5
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_VAR 0 3
4597: ADD
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -4
4604: PUSH
4605: LD_EXP 3
4609: PUSH
4610: LD_EXP 15
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ADD
4621: PPUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 42
4651: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4652: LD_EXP 17
4656: PPUSH
4657: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4661: LD_INT 22
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: CALL_OW 235
// for i in selectedPeople do
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: LD_EXP 17
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4724
// SetSide ( i , 1 ) ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 235
4722: GO 4707
4724: POP
4725: POP
// for i in yourApemans do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_EXP 13
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4753
// SetSide ( i , 1 ) ;
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_INT 1
4746: PPUSH
4747: CALL_OW 235
4751: GO 4736
4753: POP
4754: POP
// SetSide ( JMM , 1 ) ;
4755: LD_EXP 1
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4767: LD_EXP 13
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: LD_INT 5
4777: PPUSH
4778: CALL_OW 237
// end ;
4782: LD_VAR 0 1
4786: RET
// export function SaveDeltaCharacters ; begin
4787: LD_INT 0
4789: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4790: LD_EXP 1
4794: PPUSH
4795: LD_EXP 22
4799: PUSH
4800: LD_STRING JMM
4802: STR
4803: PPUSH
4804: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DeltaDoctor
4815: PPUSH
4816: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4820: LD_EXP 3
4824: PPUSH
4825: LD_EXP 22
4829: PUSH
4830: LD_STRING Denis
4832: STR
4833: PPUSH
4834: CALL_OW 38
// if Lisa in selectedPeople then
4838: LD_EXP 4
4842: PUSH
4843: LD_EXP 17
4847: IN
4848: IFFALSE 4880
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4850: LD_EXP 4
4854: PPUSH
4855: LD_EXP 22
4859: PUSH
4860: LD_STRING Lisa
4862: STR
4863: PPUSH
4864: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4868: LD_INT 1
4870: PPUSH
4871: LD_STRING LisaIn06
4873: PPUSH
4874: CALL_OW 39
// end else
4878: GO 4901
// if IsOk ( Lisa ) then
4880: LD_EXP 4
4884: PPUSH
4885: CALL_OW 302
4889: IFFALSE 4901
// SaveVariable ( 1 , LisaStayInDelta ) ;
4891: LD_INT 1
4893: PPUSH
4894: LD_STRING LisaStayInDelta
4896: PPUSH
4897: CALL_OW 39
// if Bobby in selectedPeople then
4901: LD_EXP 6
4905: PUSH
4906: LD_EXP 17
4910: IN
4911: IFFALSE 4943
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4913: LD_EXP 6
4917: PPUSH
4918: LD_EXP 22
4922: PUSH
4923: LD_STRING Bobby
4925: STR
4926: PPUSH
4927: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4931: LD_INT 1
4933: PPUSH
4934: LD_STRING BobbyIn06
4936: PPUSH
4937: CALL_OW 39
// end else
4941: GO 4964
// if IsOk ( Bobby ) then
4943: LD_EXP 6
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4964
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4954: LD_INT 1
4956: PPUSH
4957: LD_STRING BobbyStayInDelta
4959: PPUSH
4960: CALL_OW 39
// if Cyrus in selectedPeople then
4964: LD_EXP 7
4968: PUSH
4969: LD_EXP 17
4973: IN
4974: IFFALSE 5006
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4976: LD_EXP 7
4980: PPUSH
4981: LD_EXP 22
4985: PUSH
4986: LD_STRING Cyrus
4988: STR
4989: PPUSH
4990: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4994: LD_INT 1
4996: PPUSH
4997: LD_STRING CyrusIn06
4999: PPUSH
5000: CALL_OW 39
// end else
5004: GO 5027
// if IsOk ( Cyrus ) then
5006: LD_EXP 7
5010: PPUSH
5011: CALL_OW 302
5015: IFFALSE 5027
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5017: LD_INT 1
5019: PPUSH
5020: LD_STRING CyrusStayInDelta
5022: PPUSH
5023: CALL_OW 39
// if Frank in selectedPeople then
5027: LD_EXP 5
5031: PUSH
5032: LD_EXP 17
5036: IN
5037: IFFALSE 5069
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5039: LD_EXP 5
5043: PPUSH
5044: LD_EXP 22
5048: PUSH
5049: LD_STRING Frank
5051: STR
5052: PPUSH
5053: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_STRING FrankIn06
5062: PPUSH
5063: CALL_OW 39
// end else
5067: GO 5090
// if IsOk ( Frank ) then
5069: LD_EXP 5
5073: PPUSH
5074: CALL_OW 302
5078: IFFALSE 5090
// SaveVariable ( 1 , FrankStayInDelta ) ;
5080: LD_INT 1
5082: PPUSH
5083: LD_STRING FrankStayInDelta
5085: PPUSH
5086: CALL_OW 39
// if Brown in selectedPeople then
5090: LD_EXP 8
5094: PUSH
5095: LD_EXP 17
5099: IN
5100: IFFALSE 5132
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5102: LD_EXP 8
5106: PPUSH
5107: LD_EXP 22
5111: PUSH
5112: LD_STRING Brown
5114: STR
5115: PPUSH
5116: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5120: LD_INT 1
5122: PPUSH
5123: LD_STRING BrownIn06
5125: PPUSH
5126: CALL_OW 39
// end else
5130: GO 5153
// if IsOk ( Brown ) then
5132: LD_EXP 8
5136: PPUSH
5137: CALL_OW 302
5141: IFFALSE 5153
// SaveVariable ( 1 , BrownStayInDelta ) ;
5143: LD_INT 1
5145: PPUSH
5146: LD_STRING BrownStayInDelta
5148: PPUSH
5149: CALL_OW 39
// if Donaldson in selectedPeople then
5153: LD_EXP 9
5157: PUSH
5158: LD_EXP 17
5162: IN
5163: IFFALSE 5195
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5165: LD_EXP 9
5169: PPUSH
5170: LD_EXP 22
5174: PUSH
5175: LD_STRING Donaldson
5177: STR
5178: PPUSH
5179: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5183: LD_INT 1
5185: PPUSH
5186: LD_STRING DonaldsonIn06
5188: PPUSH
5189: CALL_OW 39
// end else
5193: GO 5216
// if IsOk ( Donaldson ) then
5195: LD_EXP 9
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5216
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5206: LD_INT 1
5208: PPUSH
5209: LD_STRING DonaldsonStayInDelta
5211: PPUSH
5212: CALL_OW 39
// if Gladstone in selectedPeople then
5216: LD_EXP 2
5220: PUSH
5221: LD_EXP 17
5225: IN
5226: IFFALSE 5258
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5228: LD_EXP 2
5232: PPUSH
5233: LD_EXP 22
5237: PUSH
5238: LD_STRING Gladstone
5240: STR
5241: PPUSH
5242: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5246: LD_INT 1
5248: PPUSH
5249: LD_STRING GladstoneIn06
5251: PPUSH
5252: CALL_OW 39
// end else
5256: GO 5279
// if IsOk ( Gladstone ) then
5258: LD_EXP 2
5262: PPUSH
5263: CALL_OW 302
5267: IFFALSE 5279
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_STRING GladstoneStayInDelta
5274: PPUSH
5275: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5279: LD_ADDR_EXP 17
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 23
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: LD_INT 21
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5324: LD_EXP 13
5328: PPUSH
5329: LD_STRING ApeIn06
5331: PPUSH
5332: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5336: LD_EXP 17
5340: PUSH
5341: LD_EXP 1
5345: PUSH
5346: LD_EXP 4
5350: PUSH
5351: LD_EXP 6
5355: PUSH
5356: LD_EXP 7
5360: PUSH
5361: LD_EXP 5
5365: PUSH
5366: LD_EXP 8
5370: PUSH
5371: LD_EXP 9
5375: PUSH
5376: LD_EXP 2
5380: PUSH
5381: LD_EXP 3
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: DIFF
5397: PPUSH
5398: LD_STRING OthersIn06
5400: PPUSH
5401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5405: LD_INT 22
5407: PUSH
5408: LD_INT 4
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 25
5420: PUSH
5421: LD_INT 1
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 3
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 25
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: PUSH
5474: LD_EXP 15
5478: PUSH
5479: LD_EXP 4
5483: PUSH
5484: LD_EXP 6
5488: PUSH
5489: LD_EXP 7
5493: PUSH
5494: LD_EXP 5
5498: PUSH
5499: LD_EXP 8
5503: PUSH
5504: LD_EXP 9
5508: PUSH
5509: LD_EXP 2
5513: PUSH
5514: LD_EXP 3
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: DIFF
5530: PPUSH
5531: LD_STRING OthersStayInDelta
5533: PPUSH
5534: CALL_OW 38
// end ;
5538: LD_VAR 0 1
5542: RET
// export function SaveCargos ; var i ; begin
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5547: LD_ADDR_VAR 0 2
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 34
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 70
5583: PUSH
5584: FOR_IN
5585: IFFALSE 5613
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5587: LD_ADDR_EXP 21
5591: PUSH
5592: LD_EXP 21
5596: PUSH
5597: LD_VAR 0 2
5601: PPUSH
5602: CALL 5632 0 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: ADD
5610: ST_TO_ADDR
5611: GO 5584
5613: POP
5614: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5615: LD_EXP 21
5619: PPUSH
5620: LD_STRING 06_ResourcesInCargo06_1
5622: PPUSH
5623: CALL_OW 39
// end ;
5627: LD_VAR 0 1
5631: RET
// export function GetMultiCargo ( cargo_bay ) ; begin
5632: LD_INT 0
5634: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5635: LD_ADDR_VAR 0 2
5639: PUSH
5640: LD_VAR 0 1
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 289
5652: PUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: CALL_OW 289
5665: PUSH
5666: LD_VAR 0 1
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 289
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: ST_TO_ADDR
// end ; end_of_file
5684: LD_VAR 0 2
5688: RET
// on Command ( comandid ) do var i ;
5689: LD_INT 0
5691: PPUSH
// begin if comandid = 65 then
5692: LD_VAR 0 1
5696: PUSH
5697: LD_INT 65
5699: EQUAL
5700: IFFALSE 5741
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5702: LD_ADDR_VAR 0 2
5706: PUSH
5707: LD_INT 22
5709: PUSH
5710: LD_INT 1
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: PPUSH
5720: CALL_OW 69
5724: PUSH
5725: FOR_IN
5726: IFFALSE 5739
// ComStop ( i ) ;
5728: LD_VAR 0 2
5732: PPUSH
5733: CALL_OW 141
5737: GO 5725
5739: POP
5740: POP
// end ;
5741: PPOPN 2
5743: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5744: LD_INT 0
5746: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5747: LD_ADDR_VAR 0 3
5751: PUSH
5752: LD_INT 22
5754: PUSH
5755: LD_INT 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 21
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 30
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: PPUSH
5787: CALL_OW 69
5791: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5792: LD_VAR 0 1
5796: PPUSH
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 1
5804: ARRAY
5805: PPUSH
5806: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5810: LD_VAR 0 1
5814: PPUSH
5815: LD_INT 4
5817: PPUSH
5818: CALL_OW 235
// end ; end_of_file
5822: PPOPN 3
5824: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5825: LD_INT 0
5827: PPUSH
// if p2 = 100 then
5828: LD_VAR 0 2
5832: PUSH
5833: LD_INT 100
5835: EQUAL
5836: IFFALSE 6839
// begin if not StreamModeActive then
5838: LD_EXP 24
5842: NOT
5843: IFFALSE 5853
// StreamModeActive := true ;
5845: LD_ADDR_EXP 24
5849: PUSH
5850: LD_INT 1
5852: ST_TO_ADDR
// if p3 = 0 then
5853: LD_VAR 0 3
5857: PUSH
5858: LD_INT 0
5860: EQUAL
5861: IFFALSE 5867
// InitStreamMode ;
5863: CALL 6999 0 0
// if p3 = 1 then
5867: LD_VAR 0 3
5871: PUSH
5872: LD_INT 1
5874: EQUAL
5875: IFFALSE 5885
// sRocket := true ;
5877: LD_ADDR_EXP 29
5881: PUSH
5882: LD_INT 1
5884: ST_TO_ADDR
// if p3 = 2 then
5885: LD_VAR 0 3
5889: PUSH
5890: LD_INT 2
5892: EQUAL
5893: IFFALSE 5903
// sSpeed := true ;
5895: LD_ADDR_EXP 28
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// if p3 = 3 then
5903: LD_VAR 0 3
5907: PUSH
5908: LD_INT 3
5910: EQUAL
5911: IFFALSE 5921
// sEngine := true ;
5913: LD_ADDR_EXP 30
5917: PUSH
5918: LD_INT 1
5920: ST_TO_ADDR
// if p3 = 4 then
5921: LD_VAR 0 3
5925: PUSH
5926: LD_INT 4
5928: EQUAL
5929: IFFALSE 5939
// sSpec := true ;
5931: LD_ADDR_EXP 27
5935: PUSH
5936: LD_INT 1
5938: ST_TO_ADDR
// if p3 = 5 then
5939: LD_VAR 0 3
5943: PUSH
5944: LD_INT 5
5946: EQUAL
5947: IFFALSE 5957
// sLevel := true ;
5949: LD_ADDR_EXP 31
5953: PUSH
5954: LD_INT 1
5956: ST_TO_ADDR
// if p3 = 6 then
5957: LD_VAR 0 3
5961: PUSH
5962: LD_INT 6
5964: EQUAL
5965: IFFALSE 5975
// sArmoury := true ;
5967: LD_ADDR_EXP 32
5971: PUSH
5972: LD_INT 1
5974: ST_TO_ADDR
// if p3 = 7 then
5975: LD_VAR 0 3
5979: PUSH
5980: LD_INT 7
5982: EQUAL
5983: IFFALSE 5993
// sRadar := true ;
5985: LD_ADDR_EXP 33
5989: PUSH
5990: LD_INT 1
5992: ST_TO_ADDR
// if p3 = 8 then
5993: LD_VAR 0 3
5997: PUSH
5998: LD_INT 8
6000: EQUAL
6001: IFFALSE 6011
// sBunker := true ;
6003: LD_ADDR_EXP 34
6007: PUSH
6008: LD_INT 1
6010: ST_TO_ADDR
// if p3 = 9 then
6011: LD_VAR 0 3
6015: PUSH
6016: LD_INT 9
6018: EQUAL
6019: IFFALSE 6029
// sHack := true ;
6021: LD_ADDR_EXP 35
6025: PUSH
6026: LD_INT 1
6028: ST_TO_ADDR
// if p3 = 10 then
6029: LD_VAR 0 3
6033: PUSH
6034: LD_INT 10
6036: EQUAL
6037: IFFALSE 6047
// sFire := true ;
6039: LD_ADDR_EXP 36
6043: PUSH
6044: LD_INT 1
6046: ST_TO_ADDR
// if p3 = 11 then
6047: LD_VAR 0 3
6051: PUSH
6052: LD_INT 11
6054: EQUAL
6055: IFFALSE 6065
// sRefresh := true ;
6057: LD_ADDR_EXP 37
6061: PUSH
6062: LD_INT 1
6064: ST_TO_ADDR
// if p3 = 12 then
6065: LD_VAR 0 3
6069: PUSH
6070: LD_INT 12
6072: EQUAL
6073: IFFALSE 6083
// sExp := true ;
6075: LD_ADDR_EXP 38
6079: PUSH
6080: LD_INT 1
6082: ST_TO_ADDR
// if p3 = 13 then
6083: LD_VAR 0 3
6087: PUSH
6088: LD_INT 13
6090: EQUAL
6091: IFFALSE 6101
// sDepot := true ;
6093: LD_ADDR_EXP 39
6097: PUSH
6098: LD_INT 1
6100: ST_TO_ADDR
// if p3 = 14 then
6101: LD_VAR 0 3
6105: PUSH
6106: LD_INT 14
6108: EQUAL
6109: IFFALSE 6119
// sFlag := true ;
6111: LD_ADDR_EXP 40
6115: PUSH
6116: LD_INT 1
6118: ST_TO_ADDR
// if p3 = 15 then
6119: LD_VAR 0 3
6123: PUSH
6124: LD_INT 15
6126: EQUAL
6127: IFFALSE 6137
// sKamikadze := true ;
6129: LD_ADDR_EXP 48
6133: PUSH
6134: LD_INT 1
6136: ST_TO_ADDR
// if p3 = 16 then
6137: LD_VAR 0 3
6141: PUSH
6142: LD_INT 16
6144: EQUAL
6145: IFFALSE 6155
// sTroll := true ;
6147: LD_ADDR_EXP 49
6151: PUSH
6152: LD_INT 1
6154: ST_TO_ADDR
// if p3 = 17 then
6155: LD_VAR 0 3
6159: PUSH
6160: LD_INT 17
6162: EQUAL
6163: IFFALSE 6173
// sSlow := true ;
6165: LD_ADDR_EXP 50
6169: PUSH
6170: LD_INT 1
6172: ST_TO_ADDR
// if p3 = 18 then
6173: LD_VAR 0 3
6177: PUSH
6178: LD_INT 18
6180: EQUAL
6181: IFFALSE 6191
// sLack := true ;
6183: LD_ADDR_EXP 51
6187: PUSH
6188: LD_INT 1
6190: ST_TO_ADDR
// if p3 = 19 then
6191: LD_VAR 0 3
6195: PUSH
6196: LD_INT 19
6198: EQUAL
6199: IFFALSE 6209
// sTank := true ;
6201: LD_ADDR_EXP 53
6205: PUSH
6206: LD_INT 1
6208: ST_TO_ADDR
// if p3 = 20 then
6209: LD_VAR 0 3
6213: PUSH
6214: LD_INT 20
6216: EQUAL
6217: IFFALSE 6227
// sRemote := true ;
6219: LD_ADDR_EXP 54
6223: PUSH
6224: LD_INT 1
6226: ST_TO_ADDR
// if p3 = 21 then
6227: LD_VAR 0 3
6231: PUSH
6232: LD_INT 21
6234: EQUAL
6235: IFFALSE 6245
// sPowell := true ;
6237: LD_ADDR_EXP 55
6241: PUSH
6242: LD_INT 1
6244: ST_TO_ADDR
// if p3 = 22 then
6245: LD_VAR 0 3
6249: PUSH
6250: LD_INT 22
6252: EQUAL
6253: IFFALSE 6263
// sTeleport := true ;
6255: LD_ADDR_EXP 58
6259: PUSH
6260: LD_INT 1
6262: ST_TO_ADDR
// if p3 = 23 then
6263: LD_VAR 0 3
6267: PUSH
6268: LD_INT 23
6270: EQUAL
6271: IFFALSE 6281
// sOilTower := true ;
6273: LD_ADDR_EXP 60
6277: PUSH
6278: LD_INT 1
6280: ST_TO_ADDR
// if p3 = 24 then
6281: LD_VAR 0 3
6285: PUSH
6286: LD_INT 24
6288: EQUAL
6289: IFFALSE 6299
// sShovel := true ;
6291: LD_ADDR_EXP 61
6295: PUSH
6296: LD_INT 1
6298: ST_TO_ADDR
// if p3 = 25 then
6299: LD_VAR 0 3
6303: PUSH
6304: LD_INT 25
6306: EQUAL
6307: IFFALSE 6317
// sSheik := true ;
6309: LD_ADDR_EXP 62
6313: PUSH
6314: LD_INT 1
6316: ST_TO_ADDR
// if p3 = 26 then
6317: LD_VAR 0 3
6321: PUSH
6322: LD_INT 26
6324: EQUAL
6325: IFFALSE 6335
// sEarthquake := true ;
6327: LD_ADDR_EXP 64
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// if p3 = 27 then
6335: LD_VAR 0 3
6339: PUSH
6340: LD_INT 27
6342: EQUAL
6343: IFFALSE 6353
// sAI := true ;
6345: LD_ADDR_EXP 65
6349: PUSH
6350: LD_INT 1
6352: ST_TO_ADDR
// if p3 = 28 then
6353: LD_VAR 0 3
6357: PUSH
6358: LD_INT 28
6360: EQUAL
6361: IFFALSE 6371
// sCargo := true ;
6363: LD_ADDR_EXP 68
6367: PUSH
6368: LD_INT 1
6370: ST_TO_ADDR
// if p3 = 29 then
6371: LD_VAR 0 3
6375: PUSH
6376: LD_INT 29
6378: EQUAL
6379: IFFALSE 6389
// sDLaser := true ;
6381: LD_ADDR_EXP 69
6385: PUSH
6386: LD_INT 1
6388: ST_TO_ADDR
// if p3 = 30 then
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 30
6396: EQUAL
6397: IFFALSE 6407
// sExchange := true ;
6399: LD_ADDR_EXP 70
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// if p3 = 31 then
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 31
6414: EQUAL
6415: IFFALSE 6425
// sFac := true ;
6417: LD_ADDR_EXP 71
6421: PUSH
6422: LD_INT 1
6424: ST_TO_ADDR
// if p3 = 32 then
6425: LD_VAR 0 3
6429: PUSH
6430: LD_INT 32
6432: EQUAL
6433: IFFALSE 6443
// sPower := true ;
6435: LD_ADDR_EXP 72
6439: PUSH
6440: LD_INT 1
6442: ST_TO_ADDR
// if p3 = 33 then
6443: LD_VAR 0 3
6447: PUSH
6448: LD_INT 33
6450: EQUAL
6451: IFFALSE 6461
// sRandom := true ;
6453: LD_ADDR_EXP 73
6457: PUSH
6458: LD_INT 1
6460: ST_TO_ADDR
// if p3 = 34 then
6461: LD_VAR 0 3
6465: PUSH
6466: LD_INT 34
6468: EQUAL
6469: IFFALSE 6479
// sShield := true ;
6471: LD_ADDR_EXP 74
6475: PUSH
6476: LD_INT 1
6478: ST_TO_ADDR
// if p3 = 35 then
6479: LD_VAR 0 3
6483: PUSH
6484: LD_INT 35
6486: EQUAL
6487: IFFALSE 6497
// sTime := true ;
6489: LD_ADDR_EXP 75
6493: PUSH
6494: LD_INT 1
6496: ST_TO_ADDR
// if p3 = 36 then
6497: LD_VAR 0 3
6501: PUSH
6502: LD_INT 36
6504: EQUAL
6505: IFFALSE 6515
// sTools := true ;
6507: LD_ADDR_EXP 76
6511: PUSH
6512: LD_INT 1
6514: ST_TO_ADDR
// if p3 = 101 then
6515: LD_VAR 0 3
6519: PUSH
6520: LD_INT 101
6522: EQUAL
6523: IFFALSE 6533
// sSold := true ;
6525: LD_ADDR_EXP 41
6529: PUSH
6530: LD_INT 1
6532: ST_TO_ADDR
// if p3 = 102 then
6533: LD_VAR 0 3
6537: PUSH
6538: LD_INT 102
6540: EQUAL
6541: IFFALSE 6551
// sDiff := true ;
6543: LD_ADDR_EXP 42
6547: PUSH
6548: LD_INT 1
6550: ST_TO_ADDR
// if p3 = 103 then
6551: LD_VAR 0 3
6555: PUSH
6556: LD_INT 103
6558: EQUAL
6559: IFFALSE 6569
// sFog := true ;
6561: LD_ADDR_EXP 45
6565: PUSH
6566: LD_INT 1
6568: ST_TO_ADDR
// if p3 = 104 then
6569: LD_VAR 0 3
6573: PUSH
6574: LD_INT 104
6576: EQUAL
6577: IFFALSE 6587
// sReset := true ;
6579: LD_ADDR_EXP 46
6583: PUSH
6584: LD_INT 1
6586: ST_TO_ADDR
// if p3 = 105 then
6587: LD_VAR 0 3
6591: PUSH
6592: LD_INT 105
6594: EQUAL
6595: IFFALSE 6605
// sSun := true ;
6597: LD_ADDR_EXP 47
6601: PUSH
6602: LD_INT 1
6604: ST_TO_ADDR
// if p3 = 106 then
6605: LD_VAR 0 3
6609: PUSH
6610: LD_INT 106
6612: EQUAL
6613: IFFALSE 6623
// sTiger := true ;
6615: LD_ADDR_EXP 43
6619: PUSH
6620: LD_INT 1
6622: ST_TO_ADDR
// if p3 = 107 then
6623: LD_VAR 0 3
6627: PUSH
6628: LD_INT 107
6630: EQUAL
6631: IFFALSE 6641
// sBomb := true ;
6633: LD_ADDR_EXP 44
6637: PUSH
6638: LD_INT 1
6640: ST_TO_ADDR
// if p3 = 108 then
6641: LD_VAR 0 3
6645: PUSH
6646: LD_INT 108
6648: EQUAL
6649: IFFALSE 6659
// sWound := true ;
6651: LD_ADDR_EXP 52
6655: PUSH
6656: LD_INT 1
6658: ST_TO_ADDR
// if p3 = 109 then
6659: LD_VAR 0 3
6663: PUSH
6664: LD_INT 109
6666: EQUAL
6667: IFFALSE 6677
// sBetray := true ;
6669: LD_ADDR_EXP 56
6673: PUSH
6674: LD_INT 1
6676: ST_TO_ADDR
// if p3 = 110 then
6677: LD_VAR 0 3
6681: PUSH
6682: LD_INT 110
6684: EQUAL
6685: IFFALSE 6695
// sContamin := true ;
6687: LD_ADDR_EXP 57
6691: PUSH
6692: LD_INT 1
6694: ST_TO_ADDR
// if p3 = 111 then
6695: LD_VAR 0 3
6699: PUSH
6700: LD_INT 111
6702: EQUAL
6703: IFFALSE 6713
// sOil := true ;
6705: LD_ADDR_EXP 59
6709: PUSH
6710: LD_INT 1
6712: ST_TO_ADDR
// if p3 = 112 then
6713: LD_VAR 0 3
6717: PUSH
6718: LD_INT 112
6720: EQUAL
6721: IFFALSE 6731
// sStu := true ;
6723: LD_ADDR_EXP 63
6727: PUSH
6728: LD_INT 1
6730: ST_TO_ADDR
// if p3 = 113 then
6731: LD_VAR 0 3
6735: PUSH
6736: LD_INT 113
6738: EQUAL
6739: IFFALSE 6749
// sBazooka := true ;
6741: LD_ADDR_EXP 66
6745: PUSH
6746: LD_INT 1
6748: ST_TO_ADDR
// if p3 = 114 then
6749: LD_VAR 0 3
6753: PUSH
6754: LD_INT 114
6756: EQUAL
6757: IFFALSE 6767
// sMortar := true ;
6759: LD_ADDR_EXP 67
6763: PUSH
6764: LD_INT 1
6766: ST_TO_ADDR
// if p3 = 115 then
6767: LD_VAR 0 3
6771: PUSH
6772: LD_INT 115
6774: EQUAL
6775: IFFALSE 6785
// sRanger := true ;
6777: LD_ADDR_EXP 77
6781: PUSH
6782: LD_INT 1
6784: ST_TO_ADDR
// if p3 = 116 then
6785: LD_VAR 0 3
6789: PUSH
6790: LD_INT 116
6792: EQUAL
6793: IFFALSE 6803
// sComputer := true ;
6795: LD_ADDR_EXP 78
6799: PUSH
6800: LD_INT 1
6802: ST_TO_ADDR
// if p3 = 117 then
6803: LD_VAR 0 3
6807: PUSH
6808: LD_INT 117
6810: EQUAL
6811: IFFALSE 6821
// s30 := true ;
6813: LD_ADDR_EXP 79
6817: PUSH
6818: LD_INT 1
6820: ST_TO_ADDR
// if p3 = 118 then
6821: LD_VAR 0 3
6825: PUSH
6826: LD_INT 118
6828: EQUAL
6829: IFFALSE 6839
// s60 := true ;
6831: LD_ADDR_EXP 80
6835: PUSH
6836: LD_INT 1
6838: ST_TO_ADDR
// end ; if p2 = 101 then
6839: LD_VAR 0 2
6843: PUSH
6844: LD_INT 101
6846: EQUAL
6847: IFFALSE 6975
// begin case p3 of 1 :
6849: LD_VAR 0 3
6853: PUSH
6854: LD_INT 1
6856: DOUBLE
6857: EQUAL
6858: IFTRUE 6862
6860: GO 6869
6862: POP
// hHackUnlimitedResources ; 2 :
6863: CALL 18571 0 0
6867: GO 6975
6869: LD_INT 2
6871: DOUBLE
6872: EQUAL
6873: IFTRUE 6877
6875: GO 6884
6877: POP
// hHackSetLevel10 ; 3 :
6878: CALL 18704 0 0
6882: GO 6975
6884: LD_INT 3
6886: DOUBLE
6887: EQUAL
6888: IFTRUE 6892
6890: GO 6899
6892: POP
// hHackSetLevel10YourUnits ; 4 :
6893: CALL 18789 0 0
6897: GO 6975
6899: LD_INT 4
6901: DOUBLE
6902: EQUAL
6903: IFTRUE 6907
6905: GO 6914
6907: POP
// hHackInvincible ; 5 :
6908: CALL 19237 0 0
6912: GO 6975
6914: LD_INT 5
6916: DOUBLE
6917: EQUAL
6918: IFTRUE 6922
6920: GO 6929
6922: POP
// hHackInvisible ; 6 :
6923: CALL 19348 0 0
6927: GO 6975
6929: LD_INT 6
6931: DOUBLE
6932: EQUAL
6933: IFTRUE 6937
6935: GO 6944
6937: POP
// hHackChangeYourSide ; 7 :
6938: CALL 19405 0 0
6942: GO 6975
6944: LD_INT 7
6946: DOUBLE
6947: EQUAL
6948: IFTRUE 6952
6950: GO 6959
6952: POP
// hHackChangeUnitSide ; 8 :
6953: CALL 19447 0 0
6957: GO 6975
6959: LD_INT 8
6961: DOUBLE
6962: EQUAL
6963: IFTRUE 6967
6965: GO 6974
6967: POP
// hHackFog ; end ;
6968: CALL 19548 0 0
6972: GO 6975
6974: POP
// end ; end ;
6975: LD_VAR 0 7
6979: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6980: GO 6982
6982: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6983: LD_STRING initStreamRollete();
6985: PPUSH
6986: CALL_OW 559
// InitStreamMode ;
6990: CALL 6999 0 0
// DefineStreamItems ( ) ;
6994: CALL 7463 0 0
// end ;
6998: END
// function InitStreamMode ; begin
6999: LD_INT 0
7001: PPUSH
// streamModeActive := false ;
7002: LD_ADDR_EXP 24
7006: PUSH
7007: LD_INT 0
7009: ST_TO_ADDR
// normalCounter := 36 ;
7010: LD_ADDR_EXP 25
7014: PUSH
7015: LD_INT 36
7017: ST_TO_ADDR
// hardcoreCounter := 16 ;
7018: LD_ADDR_EXP 26
7022: PUSH
7023: LD_INT 16
7025: ST_TO_ADDR
// sRocket := false ;
7026: LD_ADDR_EXP 29
7030: PUSH
7031: LD_INT 0
7033: ST_TO_ADDR
// sSpeed := false ;
7034: LD_ADDR_EXP 28
7038: PUSH
7039: LD_INT 0
7041: ST_TO_ADDR
// sEngine := false ;
7042: LD_ADDR_EXP 30
7046: PUSH
7047: LD_INT 0
7049: ST_TO_ADDR
// sSpec := false ;
7050: LD_ADDR_EXP 27
7054: PUSH
7055: LD_INT 0
7057: ST_TO_ADDR
// sLevel := false ;
7058: LD_ADDR_EXP 31
7062: PUSH
7063: LD_INT 0
7065: ST_TO_ADDR
// sArmoury := false ;
7066: LD_ADDR_EXP 32
7070: PUSH
7071: LD_INT 0
7073: ST_TO_ADDR
// sRadar := false ;
7074: LD_ADDR_EXP 33
7078: PUSH
7079: LD_INT 0
7081: ST_TO_ADDR
// sBunker := false ;
7082: LD_ADDR_EXP 34
7086: PUSH
7087: LD_INT 0
7089: ST_TO_ADDR
// sHack := false ;
7090: LD_ADDR_EXP 35
7094: PUSH
7095: LD_INT 0
7097: ST_TO_ADDR
// sFire := false ;
7098: LD_ADDR_EXP 36
7102: PUSH
7103: LD_INT 0
7105: ST_TO_ADDR
// sRefresh := false ;
7106: LD_ADDR_EXP 37
7110: PUSH
7111: LD_INT 0
7113: ST_TO_ADDR
// sExp := false ;
7114: LD_ADDR_EXP 38
7118: PUSH
7119: LD_INT 0
7121: ST_TO_ADDR
// sDepot := false ;
7122: LD_ADDR_EXP 39
7126: PUSH
7127: LD_INT 0
7129: ST_TO_ADDR
// sFlag := false ;
7130: LD_ADDR_EXP 40
7134: PUSH
7135: LD_INT 0
7137: ST_TO_ADDR
// sKamikadze := false ;
7138: LD_ADDR_EXP 48
7142: PUSH
7143: LD_INT 0
7145: ST_TO_ADDR
// sTroll := false ;
7146: LD_ADDR_EXP 49
7150: PUSH
7151: LD_INT 0
7153: ST_TO_ADDR
// sSlow := false ;
7154: LD_ADDR_EXP 50
7158: PUSH
7159: LD_INT 0
7161: ST_TO_ADDR
// sLack := false ;
7162: LD_ADDR_EXP 51
7166: PUSH
7167: LD_INT 0
7169: ST_TO_ADDR
// sTank := false ;
7170: LD_ADDR_EXP 53
7174: PUSH
7175: LD_INT 0
7177: ST_TO_ADDR
// sRemote := false ;
7178: LD_ADDR_EXP 54
7182: PUSH
7183: LD_INT 0
7185: ST_TO_ADDR
// sPowell := false ;
7186: LD_ADDR_EXP 55
7190: PUSH
7191: LD_INT 0
7193: ST_TO_ADDR
// sTeleport := false ;
7194: LD_ADDR_EXP 58
7198: PUSH
7199: LD_INT 0
7201: ST_TO_ADDR
// sOilTower := false ;
7202: LD_ADDR_EXP 60
7206: PUSH
7207: LD_INT 0
7209: ST_TO_ADDR
// sShovel := false ;
7210: LD_ADDR_EXP 61
7214: PUSH
7215: LD_INT 0
7217: ST_TO_ADDR
// sSheik := false ;
7218: LD_ADDR_EXP 62
7222: PUSH
7223: LD_INT 0
7225: ST_TO_ADDR
// sEarthquake := false ;
7226: LD_ADDR_EXP 64
7230: PUSH
7231: LD_INT 0
7233: ST_TO_ADDR
// sAI := false ;
7234: LD_ADDR_EXP 65
7238: PUSH
7239: LD_INT 0
7241: ST_TO_ADDR
// sCargo := false ;
7242: LD_ADDR_EXP 68
7246: PUSH
7247: LD_INT 0
7249: ST_TO_ADDR
// sDLaser := false ;
7250: LD_ADDR_EXP 69
7254: PUSH
7255: LD_INT 0
7257: ST_TO_ADDR
// sExchange := false ;
7258: LD_ADDR_EXP 70
7262: PUSH
7263: LD_INT 0
7265: ST_TO_ADDR
// sFac := false ;
7266: LD_ADDR_EXP 71
7270: PUSH
7271: LD_INT 0
7273: ST_TO_ADDR
// sPower := false ;
7274: LD_ADDR_EXP 72
7278: PUSH
7279: LD_INT 0
7281: ST_TO_ADDR
// sRandom := false ;
7282: LD_ADDR_EXP 73
7286: PUSH
7287: LD_INT 0
7289: ST_TO_ADDR
// sShield := false ;
7290: LD_ADDR_EXP 74
7294: PUSH
7295: LD_INT 0
7297: ST_TO_ADDR
// sTime := false ;
7298: LD_ADDR_EXP 75
7302: PUSH
7303: LD_INT 0
7305: ST_TO_ADDR
// sTools := false ;
7306: LD_ADDR_EXP 76
7310: PUSH
7311: LD_INT 0
7313: ST_TO_ADDR
// sSold := false ;
7314: LD_ADDR_EXP 41
7318: PUSH
7319: LD_INT 0
7321: ST_TO_ADDR
// sDiff := false ;
7322: LD_ADDR_EXP 42
7326: PUSH
7327: LD_INT 0
7329: ST_TO_ADDR
// sFog := false ;
7330: LD_ADDR_EXP 45
7334: PUSH
7335: LD_INT 0
7337: ST_TO_ADDR
// sReset := false ;
7338: LD_ADDR_EXP 46
7342: PUSH
7343: LD_INT 0
7345: ST_TO_ADDR
// sSun := false ;
7346: LD_ADDR_EXP 47
7350: PUSH
7351: LD_INT 0
7353: ST_TO_ADDR
// sTiger := false ;
7354: LD_ADDR_EXP 43
7358: PUSH
7359: LD_INT 0
7361: ST_TO_ADDR
// sBomb := false ;
7362: LD_ADDR_EXP 44
7366: PUSH
7367: LD_INT 0
7369: ST_TO_ADDR
// sWound := false ;
7370: LD_ADDR_EXP 52
7374: PUSH
7375: LD_INT 0
7377: ST_TO_ADDR
// sBetray := false ;
7378: LD_ADDR_EXP 56
7382: PUSH
7383: LD_INT 0
7385: ST_TO_ADDR
// sContamin := false ;
7386: LD_ADDR_EXP 57
7390: PUSH
7391: LD_INT 0
7393: ST_TO_ADDR
// sOil := false ;
7394: LD_ADDR_EXP 59
7398: PUSH
7399: LD_INT 0
7401: ST_TO_ADDR
// sStu := false ;
7402: LD_ADDR_EXP 63
7406: PUSH
7407: LD_INT 0
7409: ST_TO_ADDR
// sBazooka := false ;
7410: LD_ADDR_EXP 66
7414: PUSH
7415: LD_INT 0
7417: ST_TO_ADDR
// sMortar := false ;
7418: LD_ADDR_EXP 67
7422: PUSH
7423: LD_INT 0
7425: ST_TO_ADDR
// sRanger := false ;
7426: LD_ADDR_EXP 77
7430: PUSH
7431: LD_INT 0
7433: ST_TO_ADDR
// sComputer := false ;
7434: LD_ADDR_EXP 78
7438: PUSH
7439: LD_INT 0
7441: ST_TO_ADDR
// s30 := false ;
7442: LD_ADDR_EXP 79
7446: PUSH
7447: LD_INT 0
7449: ST_TO_ADDR
// s60 := false ;
7450: LD_ADDR_EXP 80
7454: PUSH
7455: LD_INT 0
7457: ST_TO_ADDR
// end ;
7458: LD_VAR 0 1
7462: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7463: LD_INT 0
7465: PPUSH
7466: PPUSH
7467: PPUSH
7468: PPUSH
7469: PPUSH
// result := [ ] ;
7470: LD_ADDR_VAR 0 1
7474: PUSH
7475: EMPTY
7476: ST_TO_ADDR
// if campaign_id = 1 then
7477: LD_OWVAR 69
7481: PUSH
7482: LD_INT 1
7484: EQUAL
7485: IFFALSE 10651
// begin case mission_number of 1 :
7487: LD_OWVAR 70
7491: PUSH
7492: LD_INT 1
7494: DOUBLE
7495: EQUAL
7496: IFTRUE 7500
7498: GO 7576
7500: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7501: LD_ADDR_VAR 0 1
7505: PUSH
7506: LD_INT 2
7508: PUSH
7509: LD_INT 4
7511: PUSH
7512: LD_INT 11
7514: PUSH
7515: LD_INT 12
7517: PUSH
7518: LD_INT 15
7520: PUSH
7521: LD_INT 16
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 23
7529: PUSH
7530: LD_INT 26
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 101
7546: PUSH
7547: LD_INT 102
7549: PUSH
7550: LD_INT 106
7552: PUSH
7553: LD_INT 116
7555: PUSH
7556: LD_INT 117
7558: PUSH
7559: LD_INT 118
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: ST_TO_ADDR
7574: GO 10649
7576: LD_INT 2
7578: DOUBLE
7579: EQUAL
7580: IFTRUE 7584
7582: GO 7668
7584: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 4
7595: PUSH
7596: LD_INT 11
7598: PUSH
7599: LD_INT 12
7601: PUSH
7602: LD_INT 15
7604: PUSH
7605: LD_INT 16
7607: PUSH
7608: LD_INT 22
7610: PUSH
7611: LD_INT 23
7613: PUSH
7614: LD_INT 26
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 101
7630: PUSH
7631: LD_INT 102
7633: PUSH
7634: LD_INT 105
7636: PUSH
7637: LD_INT 106
7639: PUSH
7640: LD_INT 108
7642: PUSH
7643: LD_INT 116
7645: PUSH
7646: LD_INT 117
7648: PUSH
7649: LD_INT 118
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: ST_TO_ADDR
7666: GO 10649
7668: LD_INT 3
7670: DOUBLE
7671: EQUAL
7672: IFTRUE 7676
7674: GO 7764
7676: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7677: LD_ADDR_VAR 0 1
7681: PUSH
7682: LD_INT 2
7684: PUSH
7685: LD_INT 4
7687: PUSH
7688: LD_INT 5
7690: PUSH
7691: LD_INT 11
7693: PUSH
7694: LD_INT 12
7696: PUSH
7697: LD_INT 15
7699: PUSH
7700: LD_INT 16
7702: PUSH
7703: LD_INT 22
7705: PUSH
7706: LD_INT 26
7708: PUSH
7709: LD_INT 36
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 101
7726: PUSH
7727: LD_INT 102
7729: PUSH
7730: LD_INT 105
7732: PUSH
7733: LD_INT 106
7735: PUSH
7736: LD_INT 108
7738: PUSH
7739: LD_INT 116
7741: PUSH
7742: LD_INT 117
7744: PUSH
7745: LD_INT 118
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: ST_TO_ADDR
7762: GO 10649
7764: LD_INT 4
7766: DOUBLE
7767: EQUAL
7768: IFTRUE 7772
7770: GO 7868
7772: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7773: LD_ADDR_VAR 0 1
7777: PUSH
7778: LD_INT 2
7780: PUSH
7781: LD_INT 4
7783: PUSH
7784: LD_INT 5
7786: PUSH
7787: LD_INT 8
7789: PUSH
7790: LD_INT 11
7792: PUSH
7793: LD_INT 12
7795: PUSH
7796: LD_INT 15
7798: PUSH
7799: LD_INT 16
7801: PUSH
7802: LD_INT 22
7804: PUSH
7805: LD_INT 23
7807: PUSH
7808: LD_INT 26
7810: PUSH
7811: LD_INT 36
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 101
7830: PUSH
7831: LD_INT 102
7833: PUSH
7834: LD_INT 105
7836: PUSH
7837: LD_INT 106
7839: PUSH
7840: LD_INT 108
7842: PUSH
7843: LD_INT 116
7845: PUSH
7846: LD_INT 117
7848: PUSH
7849: LD_INT 118
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: ST_TO_ADDR
7866: GO 10649
7868: LD_INT 5
7870: DOUBLE
7871: EQUAL
7872: IFTRUE 7876
7874: GO 7988
7876: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7877: LD_ADDR_VAR 0 1
7881: PUSH
7882: LD_INT 2
7884: PUSH
7885: LD_INT 4
7887: PUSH
7888: LD_INT 5
7890: PUSH
7891: LD_INT 6
7893: PUSH
7894: LD_INT 8
7896: PUSH
7897: LD_INT 11
7899: PUSH
7900: LD_INT 12
7902: PUSH
7903: LD_INT 15
7905: PUSH
7906: LD_INT 16
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 23
7914: PUSH
7915: LD_INT 25
7917: PUSH
7918: LD_INT 26
7920: PUSH
7921: LD_INT 36
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: PUSH
7940: LD_INT 101
7942: PUSH
7943: LD_INT 102
7945: PUSH
7946: LD_INT 105
7948: PUSH
7949: LD_INT 106
7951: PUSH
7952: LD_INT 108
7954: PUSH
7955: LD_INT 109
7957: PUSH
7958: LD_INT 112
7960: PUSH
7961: LD_INT 116
7963: PUSH
7964: LD_INT 117
7966: PUSH
7967: LD_INT 118
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: ST_TO_ADDR
7986: GO 10649
7988: LD_INT 6
7990: DOUBLE
7991: EQUAL
7992: IFTRUE 7996
7994: GO 8128
7996: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7997: LD_ADDR_VAR 0 1
8001: PUSH
8002: LD_INT 2
8004: PUSH
8005: LD_INT 4
8007: PUSH
8008: LD_INT 5
8010: PUSH
8011: LD_INT 6
8013: PUSH
8014: LD_INT 8
8016: PUSH
8017: LD_INT 11
8019: PUSH
8020: LD_INT 12
8022: PUSH
8023: LD_INT 15
8025: PUSH
8026: LD_INT 16
8028: PUSH
8029: LD_INT 20
8031: PUSH
8032: LD_INT 21
8034: PUSH
8035: LD_INT 22
8037: PUSH
8038: LD_INT 23
8040: PUSH
8041: LD_INT 25
8043: PUSH
8044: LD_INT 26
8046: PUSH
8047: LD_INT 30
8049: PUSH
8050: LD_INT 31
8052: PUSH
8053: LD_INT 32
8055: PUSH
8056: LD_INT 36
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 101
8082: PUSH
8083: LD_INT 102
8085: PUSH
8086: LD_INT 105
8088: PUSH
8089: LD_INT 106
8091: PUSH
8092: LD_INT 108
8094: PUSH
8095: LD_INT 109
8097: PUSH
8098: LD_INT 112
8100: PUSH
8101: LD_INT 116
8103: PUSH
8104: LD_INT 117
8106: PUSH
8107: LD_INT 118
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: ST_TO_ADDR
8126: GO 10649
8128: LD_INT 7
8130: DOUBLE
8131: EQUAL
8132: IFTRUE 8136
8134: GO 8248
8136: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8137: LD_ADDR_VAR 0 1
8141: PUSH
8142: LD_INT 2
8144: PUSH
8145: LD_INT 4
8147: PUSH
8148: LD_INT 5
8150: PUSH
8151: LD_INT 7
8153: PUSH
8154: LD_INT 11
8156: PUSH
8157: LD_INT 12
8159: PUSH
8160: LD_INT 15
8162: PUSH
8163: LD_INT 16
8165: PUSH
8166: LD_INT 20
8168: PUSH
8169: LD_INT 21
8171: PUSH
8172: LD_INT 22
8174: PUSH
8175: LD_INT 23
8177: PUSH
8178: LD_INT 25
8180: PUSH
8181: LD_INT 26
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: PUSH
8200: LD_INT 101
8202: PUSH
8203: LD_INT 102
8205: PUSH
8206: LD_INT 103
8208: PUSH
8209: LD_INT 105
8211: PUSH
8212: LD_INT 106
8214: PUSH
8215: LD_INT 108
8217: PUSH
8218: LD_INT 112
8220: PUSH
8221: LD_INT 116
8223: PUSH
8224: LD_INT 117
8226: PUSH
8227: LD_INT 118
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: ST_TO_ADDR
8246: GO 10649
8248: LD_INT 8
8250: DOUBLE
8251: EQUAL
8252: IFTRUE 8256
8254: GO 8396
8256: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8257: LD_ADDR_VAR 0 1
8261: PUSH
8262: LD_INT 2
8264: PUSH
8265: LD_INT 4
8267: PUSH
8268: LD_INT 5
8270: PUSH
8271: LD_INT 6
8273: PUSH
8274: LD_INT 7
8276: PUSH
8277: LD_INT 8
8279: PUSH
8280: LD_INT 11
8282: PUSH
8283: LD_INT 12
8285: PUSH
8286: LD_INT 15
8288: PUSH
8289: LD_INT 16
8291: PUSH
8292: LD_INT 20
8294: PUSH
8295: LD_INT 21
8297: PUSH
8298: LD_INT 22
8300: PUSH
8301: LD_INT 23
8303: PUSH
8304: LD_INT 25
8306: PUSH
8307: LD_INT 26
8309: PUSH
8310: LD_INT 30
8312: PUSH
8313: LD_INT 31
8315: PUSH
8316: LD_INT 32
8318: PUSH
8319: LD_INT 36
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: PUSH
8344: LD_INT 101
8346: PUSH
8347: LD_INT 102
8349: PUSH
8350: LD_INT 103
8352: PUSH
8353: LD_INT 105
8355: PUSH
8356: LD_INT 106
8358: PUSH
8359: LD_INT 108
8361: PUSH
8362: LD_INT 109
8364: PUSH
8365: LD_INT 112
8367: PUSH
8368: LD_INT 116
8370: PUSH
8371: LD_INT 117
8373: PUSH
8374: LD_INT 118
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: ST_TO_ADDR
8394: GO 10649
8396: LD_INT 9
8398: DOUBLE
8399: EQUAL
8400: IFTRUE 8404
8402: GO 8552
8404: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8405: LD_ADDR_VAR 0 1
8409: PUSH
8410: LD_INT 2
8412: PUSH
8413: LD_INT 4
8415: PUSH
8416: LD_INT 5
8418: PUSH
8419: LD_INT 6
8421: PUSH
8422: LD_INT 7
8424: PUSH
8425: LD_INT 8
8427: PUSH
8428: LD_INT 11
8430: PUSH
8431: LD_INT 12
8433: PUSH
8434: LD_INT 15
8436: PUSH
8437: LD_INT 16
8439: PUSH
8440: LD_INT 20
8442: PUSH
8443: LD_INT 21
8445: PUSH
8446: LD_INT 22
8448: PUSH
8449: LD_INT 23
8451: PUSH
8452: LD_INT 25
8454: PUSH
8455: LD_INT 26
8457: PUSH
8458: LD_INT 28
8460: PUSH
8461: LD_INT 30
8463: PUSH
8464: LD_INT 31
8466: PUSH
8467: LD_INT 32
8469: PUSH
8470: LD_INT 36
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 101
8498: PUSH
8499: LD_INT 102
8501: PUSH
8502: LD_INT 103
8504: PUSH
8505: LD_INT 105
8507: PUSH
8508: LD_INT 106
8510: PUSH
8511: LD_INT 108
8513: PUSH
8514: LD_INT 109
8516: PUSH
8517: LD_INT 112
8519: PUSH
8520: LD_INT 114
8522: PUSH
8523: LD_INT 116
8525: PUSH
8526: LD_INT 117
8528: PUSH
8529: LD_INT 118
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: ST_TO_ADDR
8550: GO 10649
8552: LD_INT 10
8554: DOUBLE
8555: EQUAL
8556: IFTRUE 8560
8558: GO 8756
8560: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8561: LD_ADDR_VAR 0 1
8565: PUSH
8566: LD_INT 2
8568: PUSH
8569: LD_INT 4
8571: PUSH
8572: LD_INT 5
8574: PUSH
8575: LD_INT 6
8577: PUSH
8578: LD_INT 7
8580: PUSH
8581: LD_INT 8
8583: PUSH
8584: LD_INT 9
8586: PUSH
8587: LD_INT 10
8589: PUSH
8590: LD_INT 11
8592: PUSH
8593: LD_INT 12
8595: PUSH
8596: LD_INT 13
8598: PUSH
8599: LD_INT 14
8601: PUSH
8602: LD_INT 15
8604: PUSH
8605: LD_INT 16
8607: PUSH
8608: LD_INT 17
8610: PUSH
8611: LD_INT 18
8613: PUSH
8614: LD_INT 19
8616: PUSH
8617: LD_INT 20
8619: PUSH
8620: LD_INT 21
8622: PUSH
8623: LD_INT 22
8625: PUSH
8626: LD_INT 23
8628: PUSH
8629: LD_INT 24
8631: PUSH
8632: LD_INT 25
8634: PUSH
8635: LD_INT 26
8637: PUSH
8638: LD_INT 28
8640: PUSH
8641: LD_INT 30
8643: PUSH
8644: LD_INT 31
8646: PUSH
8647: LD_INT 32
8649: PUSH
8650: LD_INT 36
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 101
8686: PUSH
8687: LD_INT 102
8689: PUSH
8690: LD_INT 103
8692: PUSH
8693: LD_INT 104
8695: PUSH
8696: LD_INT 105
8698: PUSH
8699: LD_INT 106
8701: PUSH
8702: LD_INT 107
8704: PUSH
8705: LD_INT 108
8707: PUSH
8708: LD_INT 109
8710: PUSH
8711: LD_INT 110
8713: PUSH
8714: LD_INT 111
8716: PUSH
8717: LD_INT 112
8719: PUSH
8720: LD_INT 114
8722: PUSH
8723: LD_INT 116
8725: PUSH
8726: LD_INT 117
8728: PUSH
8729: LD_INT 118
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: ST_TO_ADDR
8754: GO 10649
8756: LD_INT 11
8758: DOUBLE
8759: EQUAL
8760: IFTRUE 8764
8762: GO 8968
8764: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8765: LD_ADDR_VAR 0 1
8769: PUSH
8770: LD_INT 2
8772: PUSH
8773: LD_INT 3
8775: PUSH
8776: LD_INT 4
8778: PUSH
8779: LD_INT 5
8781: PUSH
8782: LD_INT 6
8784: PUSH
8785: LD_INT 7
8787: PUSH
8788: LD_INT 8
8790: PUSH
8791: LD_INT 9
8793: PUSH
8794: LD_INT 10
8796: PUSH
8797: LD_INT 11
8799: PUSH
8800: LD_INT 12
8802: PUSH
8803: LD_INT 13
8805: PUSH
8806: LD_INT 14
8808: PUSH
8809: LD_INT 15
8811: PUSH
8812: LD_INT 16
8814: PUSH
8815: LD_INT 17
8817: PUSH
8818: LD_INT 18
8820: PUSH
8821: LD_INT 19
8823: PUSH
8824: LD_INT 20
8826: PUSH
8827: LD_INT 21
8829: PUSH
8830: LD_INT 22
8832: PUSH
8833: LD_INT 23
8835: PUSH
8836: LD_INT 24
8838: PUSH
8839: LD_INT 25
8841: PUSH
8842: LD_INT 26
8844: PUSH
8845: LD_INT 28
8847: PUSH
8848: LD_INT 30
8850: PUSH
8851: LD_INT 31
8853: PUSH
8854: LD_INT 32
8856: PUSH
8857: LD_INT 34
8859: PUSH
8860: LD_INT 36
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: LD_INT 101
8898: PUSH
8899: LD_INT 102
8901: PUSH
8902: LD_INT 103
8904: PUSH
8905: LD_INT 104
8907: PUSH
8908: LD_INT 105
8910: PUSH
8911: LD_INT 106
8913: PUSH
8914: LD_INT 107
8916: PUSH
8917: LD_INT 108
8919: PUSH
8920: LD_INT 109
8922: PUSH
8923: LD_INT 110
8925: PUSH
8926: LD_INT 111
8928: PUSH
8929: LD_INT 112
8931: PUSH
8932: LD_INT 114
8934: PUSH
8935: LD_INT 116
8937: PUSH
8938: LD_INT 117
8940: PUSH
8941: LD_INT 118
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: ST_TO_ADDR
8966: GO 10649
8968: LD_INT 12
8970: DOUBLE
8971: EQUAL
8972: IFTRUE 8976
8974: GO 9196
8976: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8977: LD_ADDR_VAR 0 1
8981: PUSH
8982: LD_INT 1
8984: PUSH
8985: LD_INT 2
8987: PUSH
8988: LD_INT 3
8990: PUSH
8991: LD_INT 4
8993: PUSH
8994: LD_INT 5
8996: PUSH
8997: LD_INT 6
8999: PUSH
9000: LD_INT 7
9002: PUSH
9003: LD_INT 8
9005: PUSH
9006: LD_INT 9
9008: PUSH
9009: LD_INT 10
9011: PUSH
9012: LD_INT 11
9014: PUSH
9015: LD_INT 12
9017: PUSH
9018: LD_INT 13
9020: PUSH
9021: LD_INT 14
9023: PUSH
9024: LD_INT 15
9026: PUSH
9027: LD_INT 16
9029: PUSH
9030: LD_INT 17
9032: PUSH
9033: LD_INT 18
9035: PUSH
9036: LD_INT 19
9038: PUSH
9039: LD_INT 20
9041: PUSH
9042: LD_INT 21
9044: PUSH
9045: LD_INT 22
9047: PUSH
9048: LD_INT 23
9050: PUSH
9051: LD_INT 24
9053: PUSH
9054: LD_INT 25
9056: PUSH
9057: LD_INT 26
9059: PUSH
9060: LD_INT 27
9062: PUSH
9063: LD_INT 28
9065: PUSH
9066: LD_INT 30
9068: PUSH
9069: LD_INT 31
9071: PUSH
9072: LD_INT 32
9074: PUSH
9075: LD_INT 33
9077: PUSH
9078: LD_INT 34
9080: PUSH
9081: LD_INT 36
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 101
9122: PUSH
9123: LD_INT 102
9125: PUSH
9126: LD_INT 103
9128: PUSH
9129: LD_INT 104
9131: PUSH
9132: LD_INT 105
9134: PUSH
9135: LD_INT 106
9137: PUSH
9138: LD_INT 107
9140: PUSH
9141: LD_INT 108
9143: PUSH
9144: LD_INT 109
9146: PUSH
9147: LD_INT 110
9149: PUSH
9150: LD_INT 111
9152: PUSH
9153: LD_INT 112
9155: PUSH
9156: LD_INT 113
9158: PUSH
9159: LD_INT 114
9161: PUSH
9162: LD_INT 116
9164: PUSH
9165: LD_INT 117
9167: PUSH
9168: LD_INT 118
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: ST_TO_ADDR
9194: GO 10649
9196: LD_INT 13
9198: DOUBLE
9199: EQUAL
9200: IFTRUE 9204
9202: GO 9412
9204: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9205: LD_ADDR_VAR 0 1
9209: PUSH
9210: LD_INT 1
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: LD_INT 3
9218: PUSH
9219: LD_INT 4
9221: PUSH
9222: LD_INT 5
9224: PUSH
9225: LD_INT 8
9227: PUSH
9228: LD_INT 9
9230: PUSH
9231: LD_INT 10
9233: PUSH
9234: LD_INT 11
9236: PUSH
9237: LD_INT 12
9239: PUSH
9240: LD_INT 14
9242: PUSH
9243: LD_INT 15
9245: PUSH
9246: LD_INT 16
9248: PUSH
9249: LD_INT 17
9251: PUSH
9252: LD_INT 18
9254: PUSH
9255: LD_INT 19
9257: PUSH
9258: LD_INT 20
9260: PUSH
9261: LD_INT 21
9263: PUSH
9264: LD_INT 22
9266: PUSH
9267: LD_INT 23
9269: PUSH
9270: LD_INT 24
9272: PUSH
9273: LD_INT 25
9275: PUSH
9276: LD_INT 26
9278: PUSH
9279: LD_INT 27
9281: PUSH
9282: LD_INT 28
9284: PUSH
9285: LD_INT 30
9287: PUSH
9288: LD_INT 31
9290: PUSH
9291: LD_INT 32
9293: PUSH
9294: LD_INT 33
9296: PUSH
9297: LD_INT 34
9299: PUSH
9300: LD_INT 36
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 101
9338: PUSH
9339: LD_INT 102
9341: PUSH
9342: LD_INT 103
9344: PUSH
9345: LD_INT 104
9347: PUSH
9348: LD_INT 105
9350: PUSH
9351: LD_INT 106
9353: PUSH
9354: LD_INT 107
9356: PUSH
9357: LD_INT 108
9359: PUSH
9360: LD_INT 109
9362: PUSH
9363: LD_INT 110
9365: PUSH
9366: LD_INT 111
9368: PUSH
9369: LD_INT 112
9371: PUSH
9372: LD_INT 113
9374: PUSH
9375: LD_INT 114
9377: PUSH
9378: LD_INT 116
9380: PUSH
9381: LD_INT 117
9383: PUSH
9384: LD_INT 118
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: ST_TO_ADDR
9410: GO 10649
9412: LD_INT 14
9414: DOUBLE
9415: EQUAL
9416: IFTRUE 9420
9418: GO 9644
9420: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9421: LD_ADDR_VAR 0 1
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: LD_INT 2
9431: PUSH
9432: LD_INT 3
9434: PUSH
9435: LD_INT 4
9437: PUSH
9438: LD_INT 5
9440: PUSH
9441: LD_INT 6
9443: PUSH
9444: LD_INT 7
9446: PUSH
9447: LD_INT 8
9449: PUSH
9450: LD_INT 9
9452: PUSH
9453: LD_INT 10
9455: PUSH
9456: LD_INT 11
9458: PUSH
9459: LD_INT 12
9461: PUSH
9462: LD_INT 13
9464: PUSH
9465: LD_INT 14
9467: PUSH
9468: LD_INT 15
9470: PUSH
9471: LD_INT 16
9473: PUSH
9474: LD_INT 17
9476: PUSH
9477: LD_INT 18
9479: PUSH
9480: LD_INT 19
9482: PUSH
9483: LD_INT 20
9485: PUSH
9486: LD_INT 21
9488: PUSH
9489: LD_INT 22
9491: PUSH
9492: LD_INT 23
9494: PUSH
9495: LD_INT 24
9497: PUSH
9498: LD_INT 25
9500: PUSH
9501: LD_INT 26
9503: PUSH
9504: LD_INT 27
9506: PUSH
9507: LD_INT 28
9509: PUSH
9510: LD_INT 29
9512: PUSH
9513: LD_INT 30
9515: PUSH
9516: LD_INT 31
9518: PUSH
9519: LD_INT 32
9521: PUSH
9522: LD_INT 33
9524: PUSH
9525: LD_INT 34
9527: PUSH
9528: LD_INT 36
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: PUSH
9568: LD_INT 101
9570: PUSH
9571: LD_INT 102
9573: PUSH
9574: LD_INT 103
9576: PUSH
9577: LD_INT 104
9579: PUSH
9580: LD_INT 105
9582: PUSH
9583: LD_INT 106
9585: PUSH
9586: LD_INT 107
9588: PUSH
9589: LD_INT 108
9591: PUSH
9592: LD_INT 109
9594: PUSH
9595: LD_INT 110
9597: PUSH
9598: LD_INT 111
9600: PUSH
9601: LD_INT 112
9603: PUSH
9604: LD_INT 113
9606: PUSH
9607: LD_INT 114
9609: PUSH
9610: LD_INT 116
9612: PUSH
9613: LD_INT 117
9615: PUSH
9616: LD_INT 118
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: ST_TO_ADDR
9642: GO 10649
9644: LD_INT 15
9646: DOUBLE
9647: EQUAL
9648: IFTRUE 9652
9650: GO 9876
9652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9653: LD_ADDR_VAR 0 1
9657: PUSH
9658: LD_INT 1
9660: PUSH
9661: LD_INT 2
9663: PUSH
9664: LD_INT 3
9666: PUSH
9667: LD_INT 4
9669: PUSH
9670: LD_INT 5
9672: PUSH
9673: LD_INT 6
9675: PUSH
9676: LD_INT 7
9678: PUSH
9679: LD_INT 8
9681: PUSH
9682: LD_INT 9
9684: PUSH
9685: LD_INT 10
9687: PUSH
9688: LD_INT 11
9690: PUSH
9691: LD_INT 12
9693: PUSH
9694: LD_INT 13
9696: PUSH
9697: LD_INT 14
9699: PUSH
9700: LD_INT 15
9702: PUSH
9703: LD_INT 16
9705: PUSH
9706: LD_INT 17
9708: PUSH
9709: LD_INT 18
9711: PUSH
9712: LD_INT 19
9714: PUSH
9715: LD_INT 20
9717: PUSH
9718: LD_INT 21
9720: PUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 23
9726: PUSH
9727: LD_INT 24
9729: PUSH
9730: LD_INT 25
9732: PUSH
9733: LD_INT 26
9735: PUSH
9736: LD_INT 27
9738: PUSH
9739: LD_INT 28
9741: PUSH
9742: LD_INT 29
9744: PUSH
9745: LD_INT 30
9747: PUSH
9748: LD_INT 31
9750: PUSH
9751: LD_INT 32
9753: PUSH
9754: LD_INT 33
9756: PUSH
9757: LD_INT 34
9759: PUSH
9760: LD_INT 36
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: PUSH
9800: LD_INT 101
9802: PUSH
9803: LD_INT 102
9805: PUSH
9806: LD_INT 103
9808: PUSH
9809: LD_INT 104
9811: PUSH
9812: LD_INT 105
9814: PUSH
9815: LD_INT 106
9817: PUSH
9818: LD_INT 107
9820: PUSH
9821: LD_INT 108
9823: PUSH
9824: LD_INT 109
9826: PUSH
9827: LD_INT 110
9829: PUSH
9830: LD_INT 111
9832: PUSH
9833: LD_INT 112
9835: PUSH
9836: LD_INT 113
9838: PUSH
9839: LD_INT 114
9841: PUSH
9842: LD_INT 116
9844: PUSH
9845: LD_INT 117
9847: PUSH
9848: LD_INT 118
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: ST_TO_ADDR
9874: GO 10649
9876: LD_INT 16
9878: DOUBLE
9879: EQUAL
9880: IFTRUE 9884
9882: GO 10020
9884: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9885: LD_ADDR_VAR 0 1
9889: PUSH
9890: LD_INT 2
9892: PUSH
9893: LD_INT 4
9895: PUSH
9896: LD_INT 5
9898: PUSH
9899: LD_INT 7
9901: PUSH
9902: LD_INT 11
9904: PUSH
9905: LD_INT 12
9907: PUSH
9908: LD_INT 15
9910: PUSH
9911: LD_INT 16
9913: PUSH
9914: LD_INT 20
9916: PUSH
9917: LD_INT 21
9919: PUSH
9920: LD_INT 22
9922: PUSH
9923: LD_INT 23
9925: PUSH
9926: LD_INT 25
9928: PUSH
9929: LD_INT 26
9931: PUSH
9932: LD_INT 30
9934: PUSH
9935: LD_INT 31
9937: PUSH
9938: LD_INT 32
9940: PUSH
9941: LD_INT 33
9943: PUSH
9944: LD_INT 34
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 101
9970: PUSH
9971: LD_INT 102
9973: PUSH
9974: LD_INT 103
9976: PUSH
9977: LD_INT 106
9979: PUSH
9980: LD_INT 108
9982: PUSH
9983: LD_INT 112
9985: PUSH
9986: LD_INT 113
9988: PUSH
9989: LD_INT 114
9991: PUSH
9992: LD_INT 116
9994: PUSH
9995: LD_INT 117
9997: PUSH
9998: LD_INT 118
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: ST_TO_ADDR
10018: GO 10649
10020: LD_INT 17
10022: DOUBLE
10023: EQUAL
10024: IFTRUE 10028
10026: GO 10252
10028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10029: LD_ADDR_VAR 0 1
10033: PUSH
10034: LD_INT 1
10036: PUSH
10037: LD_INT 2
10039: PUSH
10040: LD_INT 3
10042: PUSH
10043: LD_INT 4
10045: PUSH
10046: LD_INT 5
10048: PUSH
10049: LD_INT 6
10051: PUSH
10052: LD_INT 7
10054: PUSH
10055: LD_INT 8
10057: PUSH
10058: LD_INT 9
10060: PUSH
10061: LD_INT 10
10063: PUSH
10064: LD_INT 11
10066: PUSH
10067: LD_INT 12
10069: PUSH
10070: LD_INT 13
10072: PUSH
10073: LD_INT 14
10075: PUSH
10076: LD_INT 15
10078: PUSH
10079: LD_INT 16
10081: PUSH
10082: LD_INT 17
10084: PUSH
10085: LD_INT 18
10087: PUSH
10088: LD_INT 19
10090: PUSH
10091: LD_INT 20
10093: PUSH
10094: LD_INT 21
10096: PUSH
10097: LD_INT 22
10099: PUSH
10100: LD_INT 23
10102: PUSH
10103: LD_INT 24
10105: PUSH
10106: LD_INT 25
10108: PUSH
10109: LD_INT 26
10111: PUSH
10112: LD_INT 27
10114: PUSH
10115: LD_INT 28
10117: PUSH
10118: LD_INT 29
10120: PUSH
10121: LD_INT 30
10123: PUSH
10124: LD_INT 31
10126: PUSH
10127: LD_INT 32
10129: PUSH
10130: LD_INT 33
10132: PUSH
10133: LD_INT 34
10135: PUSH
10136: LD_INT 36
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 101
10178: PUSH
10179: LD_INT 102
10181: PUSH
10182: LD_INT 103
10184: PUSH
10185: LD_INT 104
10187: PUSH
10188: LD_INT 105
10190: PUSH
10191: LD_INT 106
10193: PUSH
10194: LD_INT 107
10196: PUSH
10197: LD_INT 108
10199: PUSH
10200: LD_INT 109
10202: PUSH
10203: LD_INT 110
10205: PUSH
10206: LD_INT 111
10208: PUSH
10209: LD_INT 112
10211: PUSH
10212: LD_INT 113
10214: PUSH
10215: LD_INT 114
10217: PUSH
10218: LD_INT 116
10220: PUSH
10221: LD_INT 117
10223: PUSH
10224: LD_INT 118
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: ST_TO_ADDR
10250: GO 10649
10252: LD_INT 18
10254: DOUBLE
10255: EQUAL
10256: IFTRUE 10260
10258: GO 10408
10260: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10261: LD_ADDR_VAR 0 1
10265: PUSH
10266: LD_INT 2
10268: PUSH
10269: LD_INT 4
10271: PUSH
10272: LD_INT 5
10274: PUSH
10275: LD_INT 7
10277: PUSH
10278: LD_INT 11
10280: PUSH
10281: LD_INT 12
10283: PUSH
10284: LD_INT 15
10286: PUSH
10287: LD_INT 16
10289: PUSH
10290: LD_INT 20
10292: PUSH
10293: LD_INT 21
10295: PUSH
10296: LD_INT 22
10298: PUSH
10299: LD_INT 23
10301: PUSH
10302: LD_INT 25
10304: PUSH
10305: LD_INT 26
10307: PUSH
10308: LD_INT 30
10310: PUSH
10311: LD_INT 31
10313: PUSH
10314: LD_INT 32
10316: PUSH
10317: LD_INT 33
10319: PUSH
10320: LD_INT 34
10322: PUSH
10323: LD_INT 35
10325: PUSH
10326: LD_INT 36
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: PUSH
10352: LD_INT 101
10354: PUSH
10355: LD_INT 102
10357: PUSH
10358: LD_INT 103
10360: PUSH
10361: LD_INT 106
10363: PUSH
10364: LD_INT 108
10366: PUSH
10367: LD_INT 112
10369: PUSH
10370: LD_INT 113
10372: PUSH
10373: LD_INT 114
10375: PUSH
10376: LD_INT 115
10378: PUSH
10379: LD_INT 116
10381: PUSH
10382: LD_INT 117
10384: PUSH
10385: LD_INT 118
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: ST_TO_ADDR
10406: GO 10649
10408: LD_INT 19
10410: DOUBLE
10411: EQUAL
10412: IFTRUE 10416
10414: GO 10648
10416: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10417: LD_ADDR_VAR 0 1
10421: PUSH
10422: LD_INT 1
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: LD_INT 3
10430: PUSH
10431: LD_INT 4
10433: PUSH
10434: LD_INT 5
10436: PUSH
10437: LD_INT 6
10439: PUSH
10440: LD_INT 7
10442: PUSH
10443: LD_INT 8
10445: PUSH
10446: LD_INT 9
10448: PUSH
10449: LD_INT 10
10451: PUSH
10452: LD_INT 11
10454: PUSH
10455: LD_INT 12
10457: PUSH
10458: LD_INT 13
10460: PUSH
10461: LD_INT 14
10463: PUSH
10464: LD_INT 15
10466: PUSH
10467: LD_INT 16
10469: PUSH
10470: LD_INT 17
10472: PUSH
10473: LD_INT 18
10475: PUSH
10476: LD_INT 19
10478: PUSH
10479: LD_INT 20
10481: PUSH
10482: LD_INT 21
10484: PUSH
10485: LD_INT 22
10487: PUSH
10488: LD_INT 23
10490: PUSH
10491: LD_INT 24
10493: PUSH
10494: LD_INT 25
10496: PUSH
10497: LD_INT 26
10499: PUSH
10500: LD_INT 27
10502: PUSH
10503: LD_INT 28
10505: PUSH
10506: LD_INT 29
10508: PUSH
10509: LD_INT 30
10511: PUSH
10512: LD_INT 31
10514: PUSH
10515: LD_INT 32
10517: PUSH
10518: LD_INT 33
10520: PUSH
10521: LD_INT 34
10523: PUSH
10524: LD_INT 35
10526: PUSH
10527: LD_INT 36
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 101
10570: PUSH
10571: LD_INT 102
10573: PUSH
10574: LD_INT 103
10576: PUSH
10577: LD_INT 104
10579: PUSH
10580: LD_INT 105
10582: PUSH
10583: LD_INT 106
10585: PUSH
10586: LD_INT 107
10588: PUSH
10589: LD_INT 108
10591: PUSH
10592: LD_INT 109
10594: PUSH
10595: LD_INT 110
10597: PUSH
10598: LD_INT 111
10600: PUSH
10601: LD_INT 112
10603: PUSH
10604: LD_INT 113
10606: PUSH
10607: LD_INT 114
10609: PUSH
10610: LD_INT 115
10612: PUSH
10613: LD_INT 116
10615: PUSH
10616: LD_INT 117
10618: PUSH
10619: LD_INT 118
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: ST_TO_ADDR
10646: GO 10649
10648: POP
// end else
10649: GO 10880
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10651: LD_ADDR_VAR 0 1
10655: PUSH
10656: LD_INT 1
10658: PUSH
10659: LD_INT 2
10661: PUSH
10662: LD_INT 3
10664: PUSH
10665: LD_INT 4
10667: PUSH
10668: LD_INT 5
10670: PUSH
10671: LD_INT 6
10673: PUSH
10674: LD_INT 7
10676: PUSH
10677: LD_INT 8
10679: PUSH
10680: LD_INT 9
10682: PUSH
10683: LD_INT 10
10685: PUSH
10686: LD_INT 11
10688: PUSH
10689: LD_INT 12
10691: PUSH
10692: LD_INT 13
10694: PUSH
10695: LD_INT 14
10697: PUSH
10698: LD_INT 15
10700: PUSH
10701: LD_INT 16
10703: PUSH
10704: LD_INT 17
10706: PUSH
10707: LD_INT 18
10709: PUSH
10710: LD_INT 19
10712: PUSH
10713: LD_INT 20
10715: PUSH
10716: LD_INT 21
10718: PUSH
10719: LD_INT 22
10721: PUSH
10722: LD_INT 23
10724: PUSH
10725: LD_INT 24
10727: PUSH
10728: LD_INT 25
10730: PUSH
10731: LD_INT 26
10733: PUSH
10734: LD_INT 27
10736: PUSH
10737: LD_INT 28
10739: PUSH
10740: LD_INT 29
10742: PUSH
10743: LD_INT 30
10745: PUSH
10746: LD_INT 31
10748: PUSH
10749: LD_INT 32
10751: PUSH
10752: LD_INT 33
10754: PUSH
10755: LD_INT 34
10757: PUSH
10758: LD_INT 35
10760: PUSH
10761: LD_INT 36
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 101
10804: PUSH
10805: LD_INT 102
10807: PUSH
10808: LD_INT 103
10810: PUSH
10811: LD_INT 104
10813: PUSH
10814: LD_INT 105
10816: PUSH
10817: LD_INT 106
10819: PUSH
10820: LD_INT 107
10822: PUSH
10823: LD_INT 108
10825: PUSH
10826: LD_INT 109
10828: PUSH
10829: LD_INT 110
10831: PUSH
10832: LD_INT 111
10834: PUSH
10835: LD_INT 112
10837: PUSH
10838: LD_INT 113
10840: PUSH
10841: LD_INT 114
10843: PUSH
10844: LD_INT 115
10846: PUSH
10847: LD_INT 116
10849: PUSH
10850: LD_INT 117
10852: PUSH
10853: LD_INT 118
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: ST_TO_ADDR
// if result then
10880: LD_VAR 0 1
10884: IFFALSE 11173
// begin normal :=  ;
10886: LD_ADDR_VAR 0 3
10890: PUSH
10891: LD_STRING 
10893: ST_TO_ADDR
// hardcore :=  ;
10894: LD_ADDR_VAR 0 4
10898: PUSH
10899: LD_STRING 
10901: ST_TO_ADDR
// for i = 1 to normalCounter do
10902: LD_ADDR_VAR 0 5
10906: PUSH
10907: DOUBLE
10908: LD_INT 1
10910: DEC
10911: ST_TO_ADDR
10912: LD_EXP 25
10916: PUSH
10917: FOR_TO
10918: IFFALSE 11019
// begin tmp := 0 ;
10920: LD_ADDR_VAR 0 2
10924: PUSH
10925: LD_STRING 0
10927: ST_TO_ADDR
// if result [ 1 ] then
10928: LD_VAR 0 1
10932: PUSH
10933: LD_INT 1
10935: ARRAY
10936: IFFALSE 11001
// if result [ 1 ] [ 1 ] = i then
10938: LD_VAR 0 1
10942: PUSH
10943: LD_INT 1
10945: ARRAY
10946: PUSH
10947: LD_INT 1
10949: ARRAY
10950: PUSH
10951: LD_VAR 0 5
10955: EQUAL
10956: IFFALSE 11001
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10958: LD_ADDR_VAR 0 1
10962: PUSH
10963: LD_VAR 0 1
10967: PPUSH
10968: LD_INT 1
10970: PPUSH
10971: LD_VAR 0 1
10975: PUSH
10976: LD_INT 1
10978: ARRAY
10979: PPUSH
10980: LD_INT 1
10982: PPUSH
10983: CALL_OW 3
10987: PPUSH
10988: CALL_OW 1
10992: ST_TO_ADDR
// tmp := 1 ;
10993: LD_ADDR_VAR 0 2
10997: PUSH
10998: LD_STRING 1
11000: ST_TO_ADDR
// end ; normal := normal & tmp ;
11001: LD_ADDR_VAR 0 3
11005: PUSH
11006: LD_VAR 0 3
11010: PUSH
11011: LD_VAR 0 2
11015: STR
11016: ST_TO_ADDR
// end ;
11017: GO 10917
11019: POP
11020: POP
// for i = 1 to hardcoreCounter do
11021: LD_ADDR_VAR 0 5
11025: PUSH
11026: DOUBLE
11027: LD_INT 1
11029: DEC
11030: ST_TO_ADDR
11031: LD_EXP 26
11035: PUSH
11036: FOR_TO
11037: IFFALSE 11142
// begin tmp := 0 ;
11039: LD_ADDR_VAR 0 2
11043: PUSH
11044: LD_STRING 0
11046: ST_TO_ADDR
// if result [ 2 ] then
11047: LD_VAR 0 1
11051: PUSH
11052: LD_INT 2
11054: ARRAY
11055: IFFALSE 11124
// if result [ 2 ] [ 1 ] = 100 + i then
11057: LD_VAR 0 1
11061: PUSH
11062: LD_INT 2
11064: ARRAY
11065: PUSH
11066: LD_INT 1
11068: ARRAY
11069: PUSH
11070: LD_INT 100
11072: PUSH
11073: LD_VAR 0 5
11077: PLUS
11078: EQUAL
11079: IFFALSE 11124
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11081: LD_ADDR_VAR 0 1
11085: PUSH
11086: LD_VAR 0 1
11090: PPUSH
11091: LD_INT 2
11093: PPUSH
11094: LD_VAR 0 1
11098: PUSH
11099: LD_INT 2
11101: ARRAY
11102: PPUSH
11103: LD_INT 1
11105: PPUSH
11106: CALL_OW 3
11110: PPUSH
11111: CALL_OW 1
11115: ST_TO_ADDR
// tmp := 1 ;
11116: LD_ADDR_VAR 0 2
11120: PUSH
11121: LD_STRING 1
11123: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11124: LD_ADDR_VAR 0 4
11128: PUSH
11129: LD_VAR 0 4
11133: PUSH
11134: LD_VAR 0 2
11138: STR
11139: ST_TO_ADDR
// end ;
11140: GO 11036
11142: POP
11143: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11144: LD_STRING getStreamItemsFromMission("
11146: PUSH
11147: LD_VAR 0 3
11151: STR
11152: PUSH
11153: LD_STRING ","
11155: STR
11156: PUSH
11157: LD_VAR 0 4
11161: STR
11162: PUSH
11163: LD_STRING ")
11165: STR
11166: PPUSH
11167: CALL_OW 559
// end else
11171: GO 11180
// ToLua ( getStreamItemsFromMission("","") ) ;
11173: LD_STRING getStreamItemsFromMission("","")
11175: PPUSH
11176: CALL_OW 559
// end ;
11180: LD_VAR 0 1
11184: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11185: LD_EXP 24
11189: PUSH
11190: LD_EXP 29
11194: AND
11195: IFFALSE 11319
11197: GO 11199
11199: DISABLE
11200: LD_INT 0
11202: PPUSH
11203: PPUSH
// begin enable ;
11204: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11205: LD_ADDR_VAR 0 2
11209: PUSH
11210: LD_INT 22
11212: PUSH
11213: LD_OWVAR 2
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 2
11224: PUSH
11225: LD_INT 34
11227: PUSH
11228: LD_INT 7
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 34
11237: PUSH
11238: LD_INT 45
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 34
11247: PUSH
11248: LD_INT 28
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: LD_INT 34
11257: PUSH
11258: LD_INT 47
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: ST_TO_ADDR
// if not tmp then
11281: LD_VAR 0 2
11285: NOT
11286: IFFALSE 11290
// exit ;
11288: GO 11319
// for i in tmp do
11290: LD_ADDR_VAR 0 1
11294: PUSH
11295: LD_VAR 0 2
11299: PUSH
11300: FOR_IN
11301: IFFALSE 11317
// begin SetLives ( i , 0 ) ;
11303: LD_VAR 0 1
11307: PPUSH
11308: LD_INT 0
11310: PPUSH
11311: CALL_OW 234
// end ;
11315: GO 11300
11317: POP
11318: POP
// end ;
11319: PPOPN 2
11321: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11322: LD_EXP 24
11326: PUSH
11327: LD_EXP 30
11331: AND
11332: IFFALSE 11416
11334: GO 11336
11336: DISABLE
11337: LD_INT 0
11339: PPUSH
11340: PPUSH
// begin enable ;
11341: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11342: LD_ADDR_VAR 0 2
11346: PUSH
11347: LD_INT 22
11349: PUSH
11350: LD_OWVAR 2
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 32
11361: PUSH
11362: LD_INT 3
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PPUSH
11373: CALL_OW 69
11377: ST_TO_ADDR
// if not tmp then
11378: LD_VAR 0 2
11382: NOT
11383: IFFALSE 11387
// exit ;
11385: GO 11416
// for i in tmp do
11387: LD_ADDR_VAR 0 1
11391: PUSH
11392: LD_VAR 0 2
11396: PUSH
11397: FOR_IN
11398: IFFALSE 11414
// begin SetLives ( i , 0 ) ;
11400: LD_VAR 0 1
11404: PPUSH
11405: LD_INT 0
11407: PPUSH
11408: CALL_OW 234
// end ;
11412: GO 11397
11414: POP
11415: POP
// end ;
11416: PPOPN 2
11418: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11419: LD_EXP 24
11423: PUSH
11424: LD_EXP 27
11428: AND
11429: IFFALSE 11522
11431: GO 11433
11433: DISABLE
11434: LD_INT 0
11436: PPUSH
// begin enable ;
11437: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11438: LD_ADDR_VAR 0 1
11442: PUSH
11443: LD_INT 22
11445: PUSH
11446: LD_OWVAR 2
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 2
11457: PUSH
11458: LD_INT 25
11460: PUSH
11461: LD_INT 5
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PUSH
11468: LD_INT 25
11470: PUSH
11471: LD_INT 9
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 25
11480: PUSH
11481: LD_INT 8
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PPUSH
11498: CALL_OW 69
11502: PUSH
11503: FOR_IN
11504: IFFALSE 11520
// begin SetClass ( i , 1 ) ;
11506: LD_VAR 0 1
11510: PPUSH
11511: LD_INT 1
11513: PPUSH
11514: CALL_OW 336
// end ;
11518: GO 11503
11520: POP
11521: POP
// end ;
11522: PPOPN 1
11524: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11525: LD_EXP 24
11529: PUSH
11530: LD_EXP 28
11534: AND
11535: PUSH
11536: LD_OWVAR 65
11540: PUSH
11541: LD_INT 7
11543: LESS
11544: AND
11545: IFFALSE 11559
11547: GO 11549
11549: DISABLE
// begin enable ;
11550: ENABLE
// game_speed := 7 ;
11551: LD_ADDR_OWVAR 65
11555: PUSH
11556: LD_INT 7
11558: ST_TO_ADDR
// end ;
11559: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11560: LD_EXP 24
11564: PUSH
11565: LD_EXP 31
11569: AND
11570: IFFALSE 11772
11572: GO 11574
11574: DISABLE
11575: LD_INT 0
11577: PPUSH
11578: PPUSH
11579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11580: LD_ADDR_VAR 0 3
11584: PUSH
11585: LD_INT 81
11587: PUSH
11588: LD_OWVAR 2
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 21
11599: PUSH
11600: LD_INT 1
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PPUSH
11611: CALL_OW 69
11615: ST_TO_ADDR
// if not tmp then
11616: LD_VAR 0 3
11620: NOT
11621: IFFALSE 11625
// exit ;
11623: GO 11772
// if tmp > 5 then
11625: LD_VAR 0 3
11629: PUSH
11630: LD_INT 5
11632: GREATER
11633: IFFALSE 11645
// k := 5 else
11635: LD_ADDR_VAR 0 2
11639: PUSH
11640: LD_INT 5
11642: ST_TO_ADDR
11643: GO 11655
// k := tmp ;
11645: LD_ADDR_VAR 0 2
11649: PUSH
11650: LD_VAR 0 3
11654: ST_TO_ADDR
// for i := 1 to k do
11655: LD_ADDR_VAR 0 1
11659: PUSH
11660: DOUBLE
11661: LD_INT 1
11663: DEC
11664: ST_TO_ADDR
11665: LD_VAR 0 2
11669: PUSH
11670: FOR_TO
11671: IFFALSE 11770
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11673: LD_VAR 0 3
11677: PUSH
11678: LD_VAR 0 1
11682: ARRAY
11683: PPUSH
11684: LD_VAR 0 1
11688: PUSH
11689: LD_INT 4
11691: MOD
11692: PUSH
11693: LD_INT 1
11695: PLUS
11696: PPUSH
11697: CALL_OW 259
11701: PUSH
11702: LD_INT 10
11704: LESS
11705: IFFALSE 11768
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11707: LD_VAR 0 3
11711: PUSH
11712: LD_VAR 0 1
11716: ARRAY
11717: PPUSH
11718: LD_VAR 0 1
11722: PUSH
11723: LD_INT 4
11725: MOD
11726: PUSH
11727: LD_INT 1
11729: PLUS
11730: PPUSH
11731: LD_VAR 0 3
11735: PUSH
11736: LD_VAR 0 1
11740: ARRAY
11741: PPUSH
11742: LD_VAR 0 1
11746: PUSH
11747: LD_INT 4
11749: MOD
11750: PUSH
11751: LD_INT 1
11753: PLUS
11754: PPUSH
11755: CALL_OW 259
11759: PUSH
11760: LD_INT 1
11762: PLUS
11763: PPUSH
11764: CALL_OW 237
11768: GO 11670
11770: POP
11771: POP
// end ;
11772: PPOPN 3
11774: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11775: LD_EXP 24
11779: PUSH
11780: LD_EXP 32
11784: AND
11785: IFFALSE 11805
11787: GO 11789
11789: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11790: LD_INT 4
11792: PPUSH
11793: LD_OWVAR 2
11797: PPUSH
11798: LD_INT 0
11800: PPUSH
11801: CALL_OW 324
11805: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11806: LD_EXP 24
11810: PUSH
11811: LD_EXP 61
11815: AND
11816: IFFALSE 11836
11818: GO 11820
11820: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11821: LD_INT 19
11823: PPUSH
11824: LD_OWVAR 2
11828: PPUSH
11829: LD_INT 0
11831: PPUSH
11832: CALL_OW 324
11836: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11837: LD_EXP 24
11841: PUSH
11842: LD_EXP 33
11846: AND
11847: IFFALSE 11949
11849: GO 11851
11851: DISABLE
11852: LD_INT 0
11854: PPUSH
11855: PPUSH
// begin enable ;
11856: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11857: LD_ADDR_VAR 0 2
11861: PUSH
11862: LD_INT 22
11864: PUSH
11865: LD_OWVAR 2
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 2
11876: PUSH
11877: LD_INT 34
11879: PUSH
11880: LD_INT 11
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: LD_INT 34
11889: PUSH
11890: LD_INT 30
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 69
11910: ST_TO_ADDR
// if not tmp then
11911: LD_VAR 0 2
11915: NOT
11916: IFFALSE 11920
// exit ;
11918: GO 11949
// for i in tmp do
11920: LD_ADDR_VAR 0 1
11924: PUSH
11925: LD_VAR 0 2
11929: PUSH
11930: FOR_IN
11931: IFFALSE 11947
// begin SetLives ( i , 0 ) ;
11933: LD_VAR 0 1
11937: PPUSH
11938: LD_INT 0
11940: PPUSH
11941: CALL_OW 234
// end ;
11945: GO 11930
11947: POP
11948: POP
// end ;
11949: PPOPN 2
11951: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11952: LD_EXP 24
11956: PUSH
11957: LD_EXP 34
11961: AND
11962: IFFALSE 11982
11964: GO 11966
11966: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11967: LD_INT 32
11969: PPUSH
11970: LD_OWVAR 2
11974: PPUSH
11975: LD_INT 0
11977: PPUSH
11978: CALL_OW 324
11982: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11983: LD_EXP 24
11987: PUSH
11988: LD_EXP 35
11992: AND
11993: IFFALSE 12174
11995: GO 11997
11997: DISABLE
11998: LD_INT 0
12000: PPUSH
12001: PPUSH
12002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12003: LD_ADDR_VAR 0 2
12007: PUSH
12008: LD_INT 22
12010: PUSH
12011: LD_OWVAR 2
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 33
12022: PUSH
12023: LD_INT 3
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PPUSH
12034: CALL_OW 69
12038: ST_TO_ADDR
// if not tmp then
12039: LD_VAR 0 2
12043: NOT
12044: IFFALSE 12048
// exit ;
12046: GO 12174
// side := 0 ;
12048: LD_ADDR_VAR 0 3
12052: PUSH
12053: LD_INT 0
12055: ST_TO_ADDR
// for i := 1 to 8 do
12056: LD_ADDR_VAR 0 1
12060: PUSH
12061: DOUBLE
12062: LD_INT 1
12064: DEC
12065: ST_TO_ADDR
12066: LD_INT 8
12068: PUSH
12069: FOR_TO
12070: IFFALSE 12118
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12072: LD_OWVAR 2
12076: PUSH
12077: LD_VAR 0 1
12081: NONEQUAL
12082: PUSH
12083: LD_OWVAR 2
12087: PPUSH
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 81
12097: PUSH
12098: LD_INT 2
12100: EQUAL
12101: AND
12102: IFFALSE 12116
// begin side := i ;
12104: LD_ADDR_VAR 0 3
12108: PUSH
12109: LD_VAR 0 1
12113: ST_TO_ADDR
// break ;
12114: GO 12118
// end ;
12116: GO 12069
12118: POP
12119: POP
// if not side then
12120: LD_VAR 0 3
12124: NOT
12125: IFFALSE 12129
// exit ;
12127: GO 12174
// for i := 1 to tmp do
12129: LD_ADDR_VAR 0 1
12133: PUSH
12134: DOUBLE
12135: LD_INT 1
12137: DEC
12138: ST_TO_ADDR
12139: LD_VAR 0 2
12143: PUSH
12144: FOR_TO
12145: IFFALSE 12172
// if Prob ( 60 ) then
12147: LD_INT 60
12149: PPUSH
12150: CALL_OW 13
12154: IFFALSE 12170
// SetSide ( i , side ) ;
12156: LD_VAR 0 1
12160: PPUSH
12161: LD_VAR 0 3
12165: PPUSH
12166: CALL_OW 235
12170: GO 12144
12172: POP
12173: POP
// end ;
12174: PPOPN 3
12176: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12177: LD_EXP 24
12181: PUSH
12182: LD_EXP 37
12186: AND
12187: IFFALSE 12306
12189: GO 12191
12191: DISABLE
12192: LD_INT 0
12194: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12195: LD_ADDR_VAR 0 1
12199: PUSH
12200: LD_INT 22
12202: PUSH
12203: LD_OWVAR 2
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 21
12214: PUSH
12215: LD_INT 1
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 3
12224: PUSH
12225: LD_INT 23
12227: PUSH
12228: LD_INT 0
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: PUSH
12249: FOR_IN
12250: IFFALSE 12304
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12252: LD_VAR 0 1
12256: PPUSH
12257: CALL_OW 257
12261: PUSH
12262: LD_INT 1
12264: PUSH
12265: LD_INT 2
12267: PUSH
12268: LD_INT 3
12270: PUSH
12271: LD_INT 4
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: IN
12280: IFFALSE 12302
// SetClass ( un , rand ( 1 , 4 ) ) ;
12282: LD_VAR 0 1
12286: PPUSH
12287: LD_INT 1
12289: PPUSH
12290: LD_INT 4
12292: PPUSH
12293: CALL_OW 12
12297: PPUSH
12298: CALL_OW 336
12302: GO 12249
12304: POP
12305: POP
// end ;
12306: PPOPN 1
12308: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12309: LD_EXP 24
12313: PUSH
12314: LD_EXP 36
12318: AND
12319: IFFALSE 12398
12321: GO 12323
12323: DISABLE
12324: LD_INT 0
12326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12327: LD_ADDR_VAR 0 1
12331: PUSH
12332: LD_INT 22
12334: PUSH
12335: LD_OWVAR 2
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 21
12346: PUSH
12347: LD_INT 3
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: ST_TO_ADDR
// if not tmp then
12363: LD_VAR 0 1
12367: NOT
12368: IFFALSE 12372
// exit ;
12370: GO 12398
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12372: LD_VAR 0 1
12376: PUSH
12377: LD_INT 1
12379: PPUSH
12380: LD_VAR 0 1
12384: PPUSH
12385: CALL_OW 12
12389: ARRAY
12390: PPUSH
12391: LD_INT 100
12393: PPUSH
12394: CALL_OW 234
// end ;
12398: PPOPN 1
12400: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12401: LD_EXP 24
12405: PUSH
12406: LD_EXP 38
12410: AND
12411: IFFALSE 12509
12413: GO 12415
12415: DISABLE
12416: LD_INT 0
12418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12419: LD_ADDR_VAR 0 1
12423: PUSH
12424: LD_INT 22
12426: PUSH
12427: LD_OWVAR 2
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 21
12438: PUSH
12439: LD_INT 1
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PPUSH
12450: CALL_OW 69
12454: ST_TO_ADDR
// if not tmp then
12455: LD_VAR 0 1
12459: NOT
12460: IFFALSE 12464
// exit ;
12462: GO 12509
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12464: LD_VAR 0 1
12468: PUSH
12469: LD_INT 1
12471: PPUSH
12472: LD_VAR 0 1
12476: PPUSH
12477: CALL_OW 12
12481: ARRAY
12482: PPUSH
12483: LD_INT 1
12485: PPUSH
12486: LD_INT 4
12488: PPUSH
12489: CALL_OW 12
12493: PPUSH
12494: LD_INT 3000
12496: PPUSH
12497: LD_INT 9000
12499: PPUSH
12500: CALL_OW 12
12504: PPUSH
12505: CALL_OW 492
// end ;
12509: PPOPN 1
12511: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12512: LD_EXP 24
12516: PUSH
12517: LD_EXP 39
12521: AND
12522: IFFALSE 12542
12524: GO 12526
12526: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12527: LD_INT 1
12529: PPUSH
12530: LD_OWVAR 2
12534: PPUSH
12535: LD_INT 0
12537: PPUSH
12538: CALL_OW 324
12542: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12543: LD_EXP 24
12547: PUSH
12548: LD_EXP 40
12552: AND
12553: IFFALSE 12636
12555: GO 12557
12557: DISABLE
12558: LD_INT 0
12560: PPUSH
12561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12562: LD_ADDR_VAR 0 2
12566: PUSH
12567: LD_INT 22
12569: PUSH
12570: LD_OWVAR 2
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 21
12581: PUSH
12582: LD_INT 3
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PPUSH
12593: CALL_OW 69
12597: ST_TO_ADDR
// if not tmp then
12598: LD_VAR 0 2
12602: NOT
12603: IFFALSE 12607
// exit ;
12605: GO 12636
// for i in tmp do
12607: LD_ADDR_VAR 0 1
12611: PUSH
12612: LD_VAR 0 2
12616: PUSH
12617: FOR_IN
12618: IFFALSE 12634
// SetBLevel ( i , 10 ) ;
12620: LD_VAR 0 1
12624: PPUSH
12625: LD_INT 10
12627: PPUSH
12628: CALL_OW 241
12632: GO 12617
12634: POP
12635: POP
// end ;
12636: PPOPN 2
12638: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12639: LD_EXP 24
12643: PUSH
12644: LD_EXP 41
12648: AND
12649: IFFALSE 12760
12651: GO 12653
12653: DISABLE
12654: LD_INT 0
12656: PPUSH
12657: PPUSH
12658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12659: LD_ADDR_VAR 0 3
12663: PUSH
12664: LD_INT 22
12666: PUSH
12667: LD_OWVAR 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 25
12678: PUSH
12679: LD_INT 1
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: ST_TO_ADDR
// if not tmp then
12695: LD_VAR 0 3
12699: NOT
12700: IFFALSE 12704
// exit ;
12702: GO 12760
// un := tmp [ rand ( 1 , tmp ) ] ;
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: LD_VAR 0 3
12713: PUSH
12714: LD_INT 1
12716: PPUSH
12717: LD_VAR 0 3
12721: PPUSH
12722: CALL_OW 12
12726: ARRAY
12727: ST_TO_ADDR
// if Crawls ( un ) then
12728: LD_VAR 0 2
12732: PPUSH
12733: CALL_OW 318
12737: IFFALSE 12748
// ComWalk ( un ) ;
12739: LD_VAR 0 2
12743: PPUSH
12744: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12748: LD_VAR 0 2
12752: PPUSH
12753: LD_INT 5
12755: PPUSH
12756: CALL_OW 336
// end ;
12760: PPOPN 3
12762: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12763: LD_EXP 24
12767: PUSH
12768: LD_EXP 42
12772: AND
12773: PUSH
12774: LD_OWVAR 67
12778: PUSH
12779: LD_INT 4
12781: LESS
12782: AND
12783: IFFALSE 12802
12785: GO 12787
12787: DISABLE
// begin Difficulty := Difficulty + 1 ;
12788: LD_ADDR_OWVAR 67
12792: PUSH
12793: LD_OWVAR 67
12797: PUSH
12798: LD_INT 1
12800: PLUS
12801: ST_TO_ADDR
// end ;
12802: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12803: LD_EXP 24
12807: PUSH
12808: LD_EXP 43
12812: AND
12813: IFFALSE 12916
12815: GO 12817
12817: DISABLE
12818: LD_INT 0
12820: PPUSH
// begin for i := 1 to 5 do
12821: LD_ADDR_VAR 0 1
12825: PUSH
12826: DOUBLE
12827: LD_INT 1
12829: DEC
12830: ST_TO_ADDR
12831: LD_INT 5
12833: PUSH
12834: FOR_TO
12835: IFFALSE 12914
// begin uc_nation := nation_nature ;
12837: LD_ADDR_OWVAR 21
12841: PUSH
12842: LD_INT 0
12844: ST_TO_ADDR
// uc_side := 0 ;
12845: LD_ADDR_OWVAR 20
12849: PUSH
12850: LD_INT 0
12852: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12853: LD_ADDR_OWVAR 29
12857: PUSH
12858: LD_INT 12
12860: PUSH
12861: LD_INT 12
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: ST_TO_ADDR
// hc_agressivity := 20 ;
12868: LD_ADDR_OWVAR 35
12872: PUSH
12873: LD_INT 20
12875: ST_TO_ADDR
// hc_class := class_tiger ;
12876: LD_ADDR_OWVAR 28
12880: PUSH
12881: LD_INT 14
12883: ST_TO_ADDR
// hc_gallery :=  ;
12884: LD_ADDR_OWVAR 33
12888: PUSH
12889: LD_STRING 
12891: ST_TO_ADDR
// hc_name :=  ;
12892: LD_ADDR_OWVAR 26
12896: PUSH
12897: LD_STRING 
12899: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12900: CALL_OW 44
12904: PPUSH
12905: LD_INT 0
12907: PPUSH
12908: CALL_OW 51
// end ;
12912: GO 12834
12914: POP
12915: POP
// end ;
12916: PPOPN 1
12918: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12919: LD_EXP 24
12923: PUSH
12924: LD_EXP 44
12928: AND
12929: IFFALSE 12938
12931: GO 12933
12933: DISABLE
// StreamSibBomb ;
12934: CALL 12939 0 0
12938: END
// export function StreamSibBomb ; var i , x , y ; begin
12939: LD_INT 0
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
// result := false ;
12945: LD_ADDR_VAR 0 1
12949: PUSH
12950: LD_INT 0
12952: ST_TO_ADDR
// for i := 1 to 16 do
12953: LD_ADDR_VAR 0 2
12957: PUSH
12958: DOUBLE
12959: LD_INT 1
12961: DEC
12962: ST_TO_ADDR
12963: LD_INT 16
12965: PUSH
12966: FOR_TO
12967: IFFALSE 13166
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12969: LD_ADDR_VAR 0 3
12973: PUSH
12974: LD_INT 10
12976: PUSH
12977: LD_INT 20
12979: PUSH
12980: LD_INT 30
12982: PUSH
12983: LD_INT 40
12985: PUSH
12986: LD_INT 50
12988: PUSH
12989: LD_INT 60
12991: PUSH
12992: LD_INT 70
12994: PUSH
12995: LD_INT 80
12997: PUSH
12998: LD_INT 90
13000: PUSH
13001: LD_INT 100
13003: PUSH
13004: LD_INT 110
13006: PUSH
13007: LD_INT 120
13009: PUSH
13010: LD_INT 130
13012: PUSH
13013: LD_INT 140
13015: PUSH
13016: LD_INT 150
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 1
13038: PPUSH
13039: LD_INT 15
13041: PPUSH
13042: CALL_OW 12
13046: ARRAY
13047: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13048: LD_ADDR_VAR 0 4
13052: PUSH
13053: LD_INT 10
13055: PUSH
13056: LD_INT 20
13058: PUSH
13059: LD_INT 30
13061: PUSH
13062: LD_INT 40
13064: PUSH
13065: LD_INT 50
13067: PUSH
13068: LD_INT 60
13070: PUSH
13071: LD_INT 70
13073: PUSH
13074: LD_INT 80
13076: PUSH
13077: LD_INT 90
13079: PUSH
13080: LD_INT 100
13082: PUSH
13083: LD_INT 110
13085: PUSH
13086: LD_INT 120
13088: PUSH
13089: LD_INT 130
13091: PUSH
13092: LD_INT 140
13094: PUSH
13095: LD_INT 150
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 1
13117: PPUSH
13118: LD_INT 15
13120: PPUSH
13121: CALL_OW 12
13125: ARRAY
13126: ST_TO_ADDR
// if ValidHex ( x , y ) then
13127: LD_VAR 0 3
13131: PPUSH
13132: LD_VAR 0 4
13136: PPUSH
13137: CALL_OW 488
13141: IFFALSE 13164
// begin result := [ x , y ] ;
13143: LD_ADDR_VAR 0 1
13147: PUSH
13148: LD_VAR 0 3
13152: PUSH
13153: LD_VAR 0 4
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: ST_TO_ADDR
// break ;
13162: GO 13166
// end ; end ;
13164: GO 12966
13166: POP
13167: POP
// if result then
13168: LD_VAR 0 1
13172: IFFALSE 13232
// begin ToLua ( playSibBomb() ) ;
13174: LD_STRING playSibBomb()
13176: PPUSH
13177: CALL_OW 559
// wait ( 0 0$14 ) ;
13181: LD_INT 490
13183: PPUSH
13184: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13188: LD_VAR 0 1
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: LD_VAR 0 1
13201: PUSH
13202: LD_INT 2
13204: ARRAY
13205: PPUSH
13206: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13210: LD_VAR 0 1
13214: PUSH
13215: LD_INT 1
13217: ARRAY
13218: PPUSH
13219: LD_VAR 0 1
13223: PUSH
13224: LD_INT 2
13226: ARRAY
13227: PPUSH
13228: CALL_OW 429
// end ; end ;
13232: LD_VAR 0 1
13236: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13237: LD_EXP 24
13241: PUSH
13242: LD_EXP 46
13246: AND
13247: IFFALSE 13259
13249: GO 13251
13251: DISABLE
// YouLost (  ) ;
13252: LD_STRING 
13254: PPUSH
13255: CALL_OW 104
13259: END
// every 0 0$1 trigger StreamModeActive and sFog do
13260: LD_EXP 24
13264: PUSH
13265: LD_EXP 45
13269: AND
13270: IFFALSE 13284
13272: GO 13274
13274: DISABLE
// FogOff ( your_side ) ;
13275: LD_OWVAR 2
13279: PPUSH
13280: CALL_OW 344
13284: END
// every 0 0$1 trigger StreamModeActive and sSun do
13285: LD_EXP 24
13289: PUSH
13290: LD_EXP 47
13294: AND
13295: IFFALSE 13323
13297: GO 13299
13299: DISABLE
// begin solar_recharge_percent := 0 ;
13300: LD_ADDR_OWVAR 79
13304: PUSH
13305: LD_INT 0
13307: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13308: LD_INT 10500
13310: PPUSH
13311: CALL_OW 67
// solar_recharge_percent := 100 ;
13315: LD_ADDR_OWVAR 79
13319: PUSH
13320: LD_INT 100
13322: ST_TO_ADDR
// end ;
13323: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13324: LD_EXP 24
13328: PUSH
13329: LD_EXP 48
13333: AND
13334: IFFALSE 13573
13336: GO 13338
13338: DISABLE
13339: LD_INT 0
13341: PPUSH
13342: PPUSH
13343: PPUSH
// begin tmp := [ ] ;
13344: LD_ADDR_VAR 0 3
13348: PUSH
13349: EMPTY
13350: ST_TO_ADDR
// for i := 1 to 6 do
13351: LD_ADDR_VAR 0 1
13355: PUSH
13356: DOUBLE
13357: LD_INT 1
13359: DEC
13360: ST_TO_ADDR
13361: LD_INT 6
13363: PUSH
13364: FOR_TO
13365: IFFALSE 13470
// begin uc_nation := nation_nature ;
13367: LD_ADDR_OWVAR 21
13371: PUSH
13372: LD_INT 0
13374: ST_TO_ADDR
// uc_side := 0 ;
13375: LD_ADDR_OWVAR 20
13379: PUSH
13380: LD_INT 0
13382: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13383: LD_ADDR_OWVAR 29
13387: PUSH
13388: LD_INT 12
13390: PUSH
13391: LD_INT 12
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: ST_TO_ADDR
// hc_agressivity := 20 ;
13398: LD_ADDR_OWVAR 35
13402: PUSH
13403: LD_INT 20
13405: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13406: LD_ADDR_OWVAR 28
13410: PUSH
13411: LD_INT 17
13413: ST_TO_ADDR
// hc_gallery :=  ;
13414: LD_ADDR_OWVAR 33
13418: PUSH
13419: LD_STRING 
13421: ST_TO_ADDR
// hc_name :=  ;
13422: LD_ADDR_OWVAR 26
13426: PUSH
13427: LD_STRING 
13429: ST_TO_ADDR
// un := CreateHuman ;
13430: LD_ADDR_VAR 0 2
13434: PUSH
13435: CALL_OW 44
13439: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13440: LD_VAR 0 2
13444: PPUSH
13445: LD_INT 1
13447: PPUSH
13448: CALL_OW 51
// tmp := tmp ^ un ;
13452: LD_ADDR_VAR 0 3
13456: PUSH
13457: LD_VAR 0 3
13461: PUSH
13462: LD_VAR 0 2
13466: ADD
13467: ST_TO_ADDR
// end ;
13468: GO 13364
13470: POP
13471: POP
// repeat wait ( 0 0$1 ) ;
13472: LD_INT 35
13474: PPUSH
13475: CALL_OW 67
// for un in tmp do
13479: LD_ADDR_VAR 0 2
13483: PUSH
13484: LD_VAR 0 3
13488: PUSH
13489: FOR_IN
13490: IFFALSE 13564
// begin if IsDead ( un ) then
13492: LD_VAR 0 2
13496: PPUSH
13497: CALL_OW 301
13501: IFFALSE 13521
// begin tmp := tmp diff un ;
13503: LD_ADDR_VAR 0 3
13507: PUSH
13508: LD_VAR 0 3
13512: PUSH
13513: LD_VAR 0 2
13517: DIFF
13518: ST_TO_ADDR
// continue ;
13519: GO 13489
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13521: LD_VAR 0 2
13525: PPUSH
13526: LD_INT 3
13528: PUSH
13529: LD_INT 22
13531: PUSH
13532: LD_INT 0
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PPUSH
13543: CALL_OW 69
13547: PPUSH
13548: LD_VAR 0 2
13552: PPUSH
13553: CALL_OW 74
13557: PPUSH
13558: CALL_OW 115
// end ;
13562: GO 13489
13564: POP
13565: POP
// until not tmp ;
13566: LD_VAR 0 3
13570: NOT
13571: IFFALSE 13472
// end ;
13573: PPOPN 3
13575: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13576: LD_EXP 24
13580: PUSH
13581: LD_EXP 49
13585: AND
13586: IFFALSE 13640
13588: GO 13590
13590: DISABLE
// begin ToLua ( displayTroll(); ) ;
13591: LD_STRING displayTroll();
13593: PPUSH
13594: CALL_OW 559
// wait ( 3 3$00 ) ;
13598: LD_INT 6300
13600: PPUSH
13601: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13605: LD_STRING hideTroll();
13607: PPUSH
13608: CALL_OW 559
// wait ( 1 1$00 ) ;
13612: LD_INT 2100
13614: PPUSH
13615: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13619: LD_STRING displayTroll();
13621: PPUSH
13622: CALL_OW 559
// wait ( 1 1$00 ) ;
13626: LD_INT 2100
13628: PPUSH
13629: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13633: LD_STRING hideTroll();
13635: PPUSH
13636: CALL_OW 559
// end ;
13640: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13641: LD_EXP 24
13645: PUSH
13646: LD_EXP 50
13650: AND
13651: IFFALSE 13714
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
// begin p := 0 ;
13659: LD_ADDR_VAR 0 1
13663: PUSH
13664: LD_INT 0
13666: ST_TO_ADDR
// repeat game_speed := 1 ;
13667: LD_ADDR_OWVAR 65
13671: PUSH
13672: LD_INT 1
13674: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13675: LD_INT 35
13677: PPUSH
13678: CALL_OW 67
// p := p + 1 ;
13682: LD_ADDR_VAR 0 1
13686: PUSH
13687: LD_VAR 0 1
13691: PUSH
13692: LD_INT 1
13694: PLUS
13695: ST_TO_ADDR
// until p >= 60 ;
13696: LD_VAR 0 1
13700: PUSH
13701: LD_INT 60
13703: GREATEREQUAL
13704: IFFALSE 13667
// game_speed := 4 ;
13706: LD_ADDR_OWVAR 65
13710: PUSH
13711: LD_INT 4
13713: ST_TO_ADDR
// end ;
13714: PPOPN 1
13716: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13717: LD_EXP 24
13721: PUSH
13722: LD_EXP 51
13726: AND
13727: IFFALSE 13873
13729: GO 13731
13731: DISABLE
13732: LD_INT 0
13734: PPUSH
13735: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13736: LD_ADDR_VAR 0 1
13740: PUSH
13741: LD_INT 22
13743: PUSH
13744: LD_OWVAR 2
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 2
13755: PUSH
13756: LD_INT 30
13758: PUSH
13759: LD_INT 0
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 30
13768: PUSH
13769: LD_INT 1
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: LIST
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PPUSH
13785: CALL_OW 69
13789: ST_TO_ADDR
// if not depot then
13790: LD_VAR 0 1
13794: NOT
13795: IFFALSE 13799
// exit ;
13797: GO 13873
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13799: LD_ADDR_VAR 0 2
13803: PUSH
13804: LD_VAR 0 1
13808: PUSH
13809: LD_INT 1
13811: PPUSH
13812: LD_VAR 0 1
13816: PPUSH
13817: CALL_OW 12
13821: ARRAY
13822: PPUSH
13823: CALL_OW 274
13827: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13828: LD_VAR 0 2
13832: PPUSH
13833: LD_INT 1
13835: PPUSH
13836: LD_INT 0
13838: PPUSH
13839: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13843: LD_VAR 0 2
13847: PPUSH
13848: LD_INT 2
13850: PPUSH
13851: LD_INT 0
13853: PPUSH
13854: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13858: LD_VAR 0 2
13862: PPUSH
13863: LD_INT 3
13865: PPUSH
13866: LD_INT 0
13868: PPUSH
13869: CALL_OW 277
// end ;
13873: PPOPN 2
13875: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13876: LD_EXP 24
13880: PUSH
13881: LD_EXP 52
13885: AND
13886: IFFALSE 13983
13888: GO 13890
13890: DISABLE
13891: LD_INT 0
13893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13894: LD_ADDR_VAR 0 1
13898: PUSH
13899: LD_INT 22
13901: PUSH
13902: LD_OWVAR 2
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 21
13913: PUSH
13914: LD_INT 1
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 3
13923: PUSH
13924: LD_INT 23
13926: PUSH
13927: LD_INT 0
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: LIST
13942: PPUSH
13943: CALL_OW 69
13947: ST_TO_ADDR
// if not tmp then
13948: LD_VAR 0 1
13952: NOT
13953: IFFALSE 13957
// exit ;
13955: GO 13983
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13957: LD_VAR 0 1
13961: PUSH
13962: LD_INT 1
13964: PPUSH
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 12
13974: ARRAY
13975: PPUSH
13976: LD_INT 200
13978: PPUSH
13979: CALL_OW 234
// end ;
13983: PPOPN 1
13985: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13986: LD_EXP 24
13990: PUSH
13991: LD_EXP 53
13995: AND
13996: IFFALSE 14075
13998: GO 14000
14000: DISABLE
14001: LD_INT 0
14003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14004: LD_ADDR_VAR 0 1
14008: PUSH
14009: LD_INT 22
14011: PUSH
14012: LD_OWVAR 2
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 21
14023: PUSH
14024: LD_INT 2
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PPUSH
14035: CALL_OW 69
14039: ST_TO_ADDR
// if not tmp then
14040: LD_VAR 0 1
14044: NOT
14045: IFFALSE 14049
// exit ;
14047: GO 14075
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14049: LD_VAR 0 1
14053: PUSH
14054: LD_INT 1
14056: PPUSH
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 12
14066: ARRAY
14067: PPUSH
14068: LD_INT 60
14070: PPUSH
14071: CALL_OW 234
// end ;
14075: PPOPN 1
14077: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14078: LD_EXP 24
14082: PUSH
14083: LD_EXP 54
14087: AND
14088: IFFALSE 14187
14090: GO 14092
14092: DISABLE
14093: LD_INT 0
14095: PPUSH
14096: PPUSH
// begin enable ;
14097: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14098: LD_ADDR_VAR 0 1
14102: PUSH
14103: LD_INT 22
14105: PUSH
14106: LD_OWVAR 2
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 61
14117: PUSH
14118: EMPTY
14119: LIST
14120: PUSH
14121: LD_INT 33
14123: PUSH
14124: LD_INT 2
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: PPUSH
14136: CALL_OW 69
14140: ST_TO_ADDR
// if not tmp then
14141: LD_VAR 0 1
14145: NOT
14146: IFFALSE 14150
// exit ;
14148: GO 14187
// for i in tmp do
14150: LD_ADDR_VAR 0 2
14154: PUSH
14155: LD_VAR 0 1
14159: PUSH
14160: FOR_IN
14161: IFFALSE 14185
// if IsControledBy ( i ) then
14163: LD_VAR 0 2
14167: PPUSH
14168: CALL_OW 312
14172: IFFALSE 14183
// ComUnlink ( i ) ;
14174: LD_VAR 0 2
14178: PPUSH
14179: CALL_OW 136
14183: GO 14160
14185: POP
14186: POP
// end ;
14187: PPOPN 2
14189: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14190: LD_EXP 24
14194: PUSH
14195: LD_EXP 55
14199: AND
14200: IFFALSE 14340
14202: GO 14204
14204: DISABLE
14205: LD_INT 0
14207: PPUSH
14208: PPUSH
// begin ToLua ( displayPowell(); ) ;
14209: LD_STRING displayPowell();
14211: PPUSH
14212: CALL_OW 559
// uc_side := 0 ;
14216: LD_ADDR_OWVAR 20
14220: PUSH
14221: LD_INT 0
14223: ST_TO_ADDR
// uc_nation := 2 ;
14224: LD_ADDR_OWVAR 21
14228: PUSH
14229: LD_INT 2
14231: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14232: LD_ADDR_OWVAR 37
14236: PUSH
14237: LD_INT 14
14239: ST_TO_ADDR
// vc_engine := engine_siberite ;
14240: LD_ADDR_OWVAR 39
14244: PUSH
14245: LD_INT 3
14247: ST_TO_ADDR
// vc_control := control_apeman ;
14248: LD_ADDR_OWVAR 38
14252: PUSH
14253: LD_INT 5
14255: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14256: LD_ADDR_OWVAR 40
14260: PUSH
14261: LD_INT 29
14263: ST_TO_ADDR
// un := CreateVehicle ;
14264: LD_ADDR_VAR 0 2
14268: PUSH
14269: CALL_OW 45
14273: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14274: LD_VAR 0 2
14278: PPUSH
14279: LD_INT 1
14281: PPUSH
14282: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14286: LD_INT 35
14288: PPUSH
14289: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14293: LD_VAR 0 2
14297: PPUSH
14298: LD_INT 22
14300: PUSH
14301: LD_OWVAR 2
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PPUSH
14310: CALL_OW 69
14314: PPUSH
14315: LD_VAR 0 2
14319: PPUSH
14320: CALL_OW 74
14324: PPUSH
14325: CALL_OW 115
// until IsDead ( un ) ;
14329: LD_VAR 0 2
14333: PPUSH
14334: CALL_OW 301
14338: IFFALSE 14286
// end ;
14340: PPOPN 2
14342: END
// every 0 0$1 trigger StreamModeActive and sStu do
14343: LD_EXP 24
14347: PUSH
14348: LD_EXP 63
14352: AND
14353: IFFALSE 14369
14355: GO 14357
14357: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14358: LD_STRING displayStucuk();
14360: PPUSH
14361: CALL_OW 559
// ResetFog ;
14365: CALL_OW 335
// end ;
14369: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14370: LD_EXP 24
14374: PUSH
14375: LD_EXP 56
14379: AND
14380: IFFALSE 14521
14382: GO 14384
14384: DISABLE
14385: LD_INT 0
14387: PPUSH
14388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_INT 22
14396: PUSH
14397: LD_OWVAR 2
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PPUSH
14420: CALL_OW 69
14424: ST_TO_ADDR
// if not tmp then
14425: LD_VAR 0 2
14429: NOT
14430: IFFALSE 14434
// exit ;
14432: GO 14521
// un := tmp [ rand ( 1 , tmp ) ] ;
14434: LD_ADDR_VAR 0 1
14438: PUSH
14439: LD_VAR 0 2
14443: PUSH
14444: LD_INT 1
14446: PPUSH
14447: LD_VAR 0 2
14451: PPUSH
14452: CALL_OW 12
14456: ARRAY
14457: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14458: LD_VAR 0 1
14462: PPUSH
14463: LD_INT 0
14465: PPUSH
14466: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14470: LD_VAR 0 1
14474: PPUSH
14475: LD_OWVAR 3
14479: PUSH
14480: LD_VAR 0 1
14484: DIFF
14485: PPUSH
14486: LD_VAR 0 1
14490: PPUSH
14491: CALL_OW 74
14495: PPUSH
14496: CALL_OW 115
// wait ( 0 0$20 ) ;
14500: LD_INT 700
14502: PPUSH
14503: CALL_OW 67
// SetSide ( un , your_side ) ;
14507: LD_VAR 0 1
14511: PPUSH
14512: LD_OWVAR 2
14516: PPUSH
14517: CALL_OW 235
// end ;
14521: PPOPN 2
14523: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14524: LD_EXP 24
14528: PUSH
14529: LD_EXP 57
14533: AND
14534: IFFALSE 14640
14536: GO 14538
14538: DISABLE
14539: LD_INT 0
14541: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14542: LD_ADDR_VAR 0 1
14546: PUSH
14547: LD_INT 22
14549: PUSH
14550: LD_OWVAR 2
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: LD_INT 2
14561: PUSH
14562: LD_INT 30
14564: PUSH
14565: LD_INT 0
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PUSH
14572: LD_INT 30
14574: PUSH
14575: LD_INT 1
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: LIST
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PPUSH
14591: CALL_OW 69
14595: ST_TO_ADDR
// if not depot then
14596: LD_VAR 0 1
14600: NOT
14601: IFFALSE 14605
// exit ;
14603: GO 14640
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14605: LD_VAR 0 1
14609: PUSH
14610: LD_INT 1
14612: ARRAY
14613: PPUSH
14614: CALL_OW 250
14618: PPUSH
14619: LD_VAR 0 1
14623: PUSH
14624: LD_INT 1
14626: ARRAY
14627: PPUSH
14628: CALL_OW 251
14632: PPUSH
14633: LD_INT 70
14635: PPUSH
14636: CALL_OW 495
// end ;
14640: PPOPN 1
14642: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14643: LD_EXP 24
14647: PUSH
14648: LD_EXP 58
14652: AND
14653: IFFALSE 14864
14655: GO 14657
14657: DISABLE
14658: LD_INT 0
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14665: LD_ADDR_VAR 0 5
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_OWVAR 2
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 21
14684: PUSH
14685: LD_INT 1
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PPUSH
14696: CALL_OW 69
14700: ST_TO_ADDR
// if not tmp then
14701: LD_VAR 0 5
14705: NOT
14706: IFFALSE 14710
// exit ;
14708: GO 14864
// for i in tmp do
14710: LD_ADDR_VAR 0 1
14714: PUSH
14715: LD_VAR 0 5
14719: PUSH
14720: FOR_IN
14721: IFFALSE 14862
// begin d := rand ( 0 , 5 ) ;
14723: LD_ADDR_VAR 0 4
14727: PUSH
14728: LD_INT 0
14730: PPUSH
14731: LD_INT 5
14733: PPUSH
14734: CALL_OW 12
14738: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14739: LD_ADDR_VAR 0 2
14743: PUSH
14744: LD_VAR 0 1
14748: PPUSH
14749: CALL_OW 250
14753: PPUSH
14754: LD_VAR 0 4
14758: PPUSH
14759: LD_INT 3
14761: PPUSH
14762: LD_INT 12
14764: PPUSH
14765: CALL_OW 12
14769: PPUSH
14770: CALL_OW 272
14774: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14775: LD_ADDR_VAR 0 3
14779: PUSH
14780: LD_VAR 0 1
14784: PPUSH
14785: CALL_OW 251
14789: PPUSH
14790: LD_VAR 0 4
14794: PPUSH
14795: LD_INT 3
14797: PPUSH
14798: LD_INT 12
14800: PPUSH
14801: CALL_OW 12
14805: PPUSH
14806: CALL_OW 273
14810: ST_TO_ADDR
// if ValidHex ( x , y ) then
14811: LD_VAR 0 2
14815: PPUSH
14816: LD_VAR 0 3
14820: PPUSH
14821: CALL_OW 488
14825: IFFALSE 14860
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14827: LD_VAR 0 1
14831: PPUSH
14832: LD_VAR 0 2
14836: PPUSH
14837: LD_VAR 0 3
14841: PPUSH
14842: LD_INT 3
14844: PPUSH
14845: LD_INT 6
14847: PPUSH
14848: CALL_OW 12
14852: PPUSH
14853: LD_INT 1
14855: PPUSH
14856: CALL_OW 483
// end ;
14860: GO 14720
14862: POP
14863: POP
// end ;
14864: PPOPN 5
14866: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14867: LD_EXP 24
14871: PUSH
14872: LD_EXP 59
14876: AND
14877: IFFALSE 14971
14879: GO 14881
14881: DISABLE
14882: LD_INT 0
14884: PPUSH
14885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14886: LD_ADDR_VAR 0 2
14890: PUSH
14891: LD_INT 22
14893: PUSH
14894: LD_OWVAR 2
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 32
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: LD_INT 21
14915: PUSH
14916: LD_INT 2
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: LIST
14927: PPUSH
14928: CALL_OW 69
14932: ST_TO_ADDR
// if not tmp then
14933: LD_VAR 0 2
14937: NOT
14938: IFFALSE 14942
// exit ;
14940: GO 14971
// for i in tmp do
14942: LD_ADDR_VAR 0 1
14946: PUSH
14947: LD_VAR 0 2
14951: PUSH
14952: FOR_IN
14953: IFFALSE 14969
// SetFuel ( i , 0 ) ;
14955: LD_VAR 0 1
14959: PPUSH
14960: LD_INT 0
14962: PPUSH
14963: CALL_OW 240
14967: GO 14952
14969: POP
14970: POP
// end ;
14971: PPOPN 2
14973: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14974: LD_EXP 24
14978: PUSH
14979: LD_EXP 60
14983: AND
14984: IFFALSE 15050
14986: GO 14988
14988: DISABLE
14989: LD_INT 0
14991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14992: LD_ADDR_VAR 0 1
14996: PUSH
14997: LD_INT 22
14999: PUSH
15000: LD_OWVAR 2
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 30
15011: PUSH
15012: LD_INT 29
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PPUSH
15023: CALL_OW 69
15027: ST_TO_ADDR
// if not tmp then
15028: LD_VAR 0 1
15032: NOT
15033: IFFALSE 15037
// exit ;
15035: GO 15050
// DestroyUnit ( tmp [ 1 ] ) ;
15037: LD_VAR 0 1
15041: PUSH
15042: LD_INT 1
15044: ARRAY
15045: PPUSH
15046: CALL_OW 65
// end ;
15050: PPOPN 1
15052: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15053: LD_EXP 24
15057: PUSH
15058: LD_EXP 62
15062: AND
15063: IFFALSE 15192
15065: GO 15067
15067: DISABLE
15068: LD_INT 0
15070: PPUSH
// begin uc_side := 0 ;
15071: LD_ADDR_OWVAR 20
15075: PUSH
15076: LD_INT 0
15078: ST_TO_ADDR
// uc_nation := nation_arabian ;
15079: LD_ADDR_OWVAR 21
15083: PUSH
15084: LD_INT 2
15086: ST_TO_ADDR
// hc_gallery :=  ;
15087: LD_ADDR_OWVAR 33
15091: PUSH
15092: LD_STRING 
15094: ST_TO_ADDR
// hc_name :=  ;
15095: LD_ADDR_OWVAR 26
15099: PUSH
15100: LD_STRING 
15102: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15103: LD_INT 1
15105: PPUSH
15106: LD_INT 11
15108: PPUSH
15109: LD_INT 10
15111: PPUSH
15112: CALL_OW 380
// un := CreateHuman ;
15116: LD_ADDR_VAR 0 1
15120: PUSH
15121: CALL_OW 44
15125: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15126: LD_VAR 0 1
15130: PPUSH
15131: LD_INT 1
15133: PPUSH
15134: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15138: LD_INT 35
15140: PPUSH
15141: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15145: LD_VAR 0 1
15149: PPUSH
15150: LD_INT 22
15152: PUSH
15153: LD_OWVAR 2
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PPUSH
15162: CALL_OW 69
15166: PPUSH
15167: LD_VAR 0 1
15171: PPUSH
15172: CALL_OW 74
15176: PPUSH
15177: CALL_OW 115
// until IsDead ( un ) ;
15181: LD_VAR 0 1
15185: PPUSH
15186: CALL_OW 301
15190: IFFALSE 15138
// end ;
15192: PPOPN 1
15194: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15195: LD_EXP 24
15199: PUSH
15200: LD_EXP 64
15204: AND
15205: IFFALSE 15217
15207: GO 15209
15209: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15210: LD_STRING earthquake(getX(game), 0, 32)
15212: PPUSH
15213: CALL_OW 559
15217: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15218: LD_EXP 24
15222: PUSH
15223: LD_EXP 65
15227: AND
15228: IFFALSE 15319
15230: GO 15232
15232: DISABLE
15233: LD_INT 0
15235: PPUSH
// begin enable ;
15236: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15237: LD_ADDR_VAR 0 1
15241: PUSH
15242: LD_INT 22
15244: PUSH
15245: LD_OWVAR 2
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: LD_INT 21
15256: PUSH
15257: LD_INT 2
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 33
15266: PUSH
15267: LD_INT 3
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: PPUSH
15279: CALL_OW 69
15283: ST_TO_ADDR
// if not tmp then
15284: LD_VAR 0 1
15288: NOT
15289: IFFALSE 15293
// exit ;
15291: GO 15319
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15293: LD_VAR 0 1
15297: PUSH
15298: LD_INT 1
15300: PPUSH
15301: LD_VAR 0 1
15305: PPUSH
15306: CALL_OW 12
15310: ARRAY
15311: PPUSH
15312: LD_INT 1
15314: PPUSH
15315: CALL_OW 234
// end ;
15319: PPOPN 1
15321: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15322: LD_EXP 24
15326: PUSH
15327: LD_EXP 66
15331: AND
15332: IFFALSE 15473
15334: GO 15336
15336: DISABLE
15337: LD_INT 0
15339: PPUSH
15340: PPUSH
15341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15342: LD_ADDR_VAR 0 3
15346: PUSH
15347: LD_INT 22
15349: PUSH
15350: LD_OWVAR 2
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 25
15361: PUSH
15362: LD_INT 1
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PPUSH
15373: CALL_OW 69
15377: ST_TO_ADDR
// if not tmp then
15378: LD_VAR 0 3
15382: NOT
15383: IFFALSE 15387
// exit ;
15385: GO 15473
// un := tmp [ rand ( 1 , tmp ) ] ;
15387: LD_ADDR_VAR 0 2
15391: PUSH
15392: LD_VAR 0 3
15396: PUSH
15397: LD_INT 1
15399: PPUSH
15400: LD_VAR 0 3
15404: PPUSH
15405: CALL_OW 12
15409: ARRAY
15410: ST_TO_ADDR
// if Crawls ( un ) then
15411: LD_VAR 0 2
15415: PPUSH
15416: CALL_OW 318
15420: IFFALSE 15431
// ComWalk ( un ) ;
15422: LD_VAR 0 2
15426: PPUSH
15427: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15431: LD_VAR 0 2
15435: PPUSH
15436: LD_INT 9
15438: PPUSH
15439: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15443: LD_INT 28
15445: PPUSH
15446: LD_OWVAR 2
15450: PPUSH
15451: LD_INT 2
15453: PPUSH
15454: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15458: LD_INT 29
15460: PPUSH
15461: LD_OWVAR 2
15465: PPUSH
15466: LD_INT 2
15468: PPUSH
15469: CALL_OW 322
// end ;
15473: PPOPN 3
15475: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15476: LD_EXP 24
15480: PUSH
15481: LD_EXP 67
15485: AND
15486: IFFALSE 15597
15488: GO 15490
15490: DISABLE
15491: LD_INT 0
15493: PPUSH
15494: PPUSH
15495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15496: LD_ADDR_VAR 0 3
15500: PUSH
15501: LD_INT 22
15503: PUSH
15504: LD_OWVAR 2
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: LD_INT 25
15515: PUSH
15516: LD_INT 1
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PPUSH
15527: CALL_OW 69
15531: ST_TO_ADDR
// if not tmp then
15532: LD_VAR 0 3
15536: NOT
15537: IFFALSE 15541
// exit ;
15539: GO 15597
// un := tmp [ rand ( 1 , tmp ) ] ;
15541: LD_ADDR_VAR 0 2
15545: PUSH
15546: LD_VAR 0 3
15550: PUSH
15551: LD_INT 1
15553: PPUSH
15554: LD_VAR 0 3
15558: PPUSH
15559: CALL_OW 12
15563: ARRAY
15564: ST_TO_ADDR
// if Crawls ( un ) then
15565: LD_VAR 0 2
15569: PPUSH
15570: CALL_OW 318
15574: IFFALSE 15585
// ComWalk ( un ) ;
15576: LD_VAR 0 2
15580: PPUSH
15581: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15585: LD_VAR 0 2
15589: PPUSH
15590: LD_INT 8
15592: PPUSH
15593: CALL_OW 336
// end ;
15597: PPOPN 3
15599: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15600: LD_EXP 24
15604: PUSH
15605: LD_EXP 68
15609: AND
15610: IFFALSE 15754
15612: GO 15614
15614: DISABLE
15615: LD_INT 0
15617: PPUSH
15618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15619: LD_ADDR_VAR 0 2
15623: PUSH
15624: LD_INT 22
15626: PUSH
15627: LD_OWVAR 2
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 21
15638: PUSH
15639: LD_INT 2
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 2
15648: PUSH
15649: LD_INT 34
15651: PUSH
15652: LD_INT 12
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 34
15661: PUSH
15662: LD_INT 51
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 34
15671: PUSH
15672: LD_INT 32
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 69
15694: ST_TO_ADDR
// if not tmp then
15695: LD_VAR 0 2
15699: NOT
15700: IFFALSE 15704
// exit ;
15702: GO 15754
// for i in tmp do
15704: LD_ADDR_VAR 0 1
15708: PUSH
15709: LD_VAR 0 2
15713: PUSH
15714: FOR_IN
15715: IFFALSE 15752
// if GetCargo ( i , mat_artifact ) = 0 then
15717: LD_VAR 0 1
15721: PPUSH
15722: LD_INT 4
15724: PPUSH
15725: CALL_OW 289
15729: PUSH
15730: LD_INT 0
15732: EQUAL
15733: IFFALSE 15750
// SetCargo ( i , mat_siberit , 100 ) ;
15735: LD_VAR 0 1
15739: PPUSH
15740: LD_INT 3
15742: PPUSH
15743: LD_INT 100
15745: PPUSH
15746: CALL_OW 290
15750: GO 15714
15752: POP
15753: POP
// end ;
15754: PPOPN 2
15756: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15757: LD_EXP 24
15761: PUSH
15762: LD_EXP 69
15766: AND
15767: IFFALSE 15950
15769: GO 15771
15771: DISABLE
15772: LD_INT 0
15774: PPUSH
15775: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15776: LD_ADDR_VAR 0 2
15780: PUSH
15781: LD_INT 22
15783: PUSH
15784: LD_OWVAR 2
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PPUSH
15793: CALL_OW 69
15797: ST_TO_ADDR
// if not tmp then
15798: LD_VAR 0 2
15802: NOT
15803: IFFALSE 15807
// exit ;
15805: GO 15950
// for i := 1 to 2 do
15807: LD_ADDR_VAR 0 1
15811: PUSH
15812: DOUBLE
15813: LD_INT 1
15815: DEC
15816: ST_TO_ADDR
15817: LD_INT 2
15819: PUSH
15820: FOR_TO
15821: IFFALSE 15948
// begin uc_side := your_side ;
15823: LD_ADDR_OWVAR 20
15827: PUSH
15828: LD_OWVAR 2
15832: ST_TO_ADDR
// uc_nation := nation_american ;
15833: LD_ADDR_OWVAR 21
15837: PUSH
15838: LD_INT 1
15840: ST_TO_ADDR
// vc_chassis := us_morphling ;
15841: LD_ADDR_OWVAR 37
15845: PUSH
15846: LD_INT 5
15848: ST_TO_ADDR
// vc_engine := engine_siberite ;
15849: LD_ADDR_OWVAR 39
15853: PUSH
15854: LD_INT 3
15856: ST_TO_ADDR
// vc_control := control_computer ;
15857: LD_ADDR_OWVAR 38
15861: PUSH
15862: LD_INT 3
15864: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15865: LD_ADDR_OWVAR 40
15869: PUSH
15870: LD_INT 10
15872: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15873: LD_VAR 0 2
15877: PUSH
15878: LD_INT 1
15880: ARRAY
15881: PPUSH
15882: CALL_OW 310
15886: NOT
15887: IFFALSE 15934
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15889: CALL_OW 45
15893: PPUSH
15894: LD_VAR 0 2
15898: PUSH
15899: LD_INT 1
15901: ARRAY
15902: PPUSH
15903: CALL_OW 250
15907: PPUSH
15908: LD_VAR 0 2
15912: PUSH
15913: LD_INT 1
15915: ARRAY
15916: PPUSH
15917: CALL_OW 251
15921: PPUSH
15922: LD_INT 12
15924: PPUSH
15925: LD_INT 1
15927: PPUSH
15928: CALL_OW 50
15932: GO 15946
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15934: CALL_OW 45
15938: PPUSH
15939: LD_INT 1
15941: PPUSH
15942: CALL_OW 51
// end ;
15946: GO 15820
15948: POP
15949: POP
// end ;
15950: PPOPN 2
15952: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15953: LD_EXP 24
15957: PUSH
15958: LD_EXP 70
15962: AND
15963: IFFALSE 16185
15965: GO 15967
15967: DISABLE
15968: LD_INT 0
15970: PPUSH
15971: PPUSH
15972: PPUSH
15973: PPUSH
15974: PPUSH
15975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15976: LD_ADDR_VAR 0 6
15980: PUSH
15981: LD_INT 22
15983: PUSH
15984: LD_OWVAR 2
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 21
15995: PUSH
15996: LD_INT 1
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 3
16005: PUSH
16006: LD_INT 23
16008: PUSH
16009: LD_INT 0
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: LIST
16024: PPUSH
16025: CALL_OW 69
16029: ST_TO_ADDR
// if not tmp then
16030: LD_VAR 0 6
16034: NOT
16035: IFFALSE 16039
// exit ;
16037: GO 16185
// s1 := rand ( 1 , 4 ) ;
16039: LD_ADDR_VAR 0 2
16043: PUSH
16044: LD_INT 1
16046: PPUSH
16047: LD_INT 4
16049: PPUSH
16050: CALL_OW 12
16054: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16055: LD_ADDR_VAR 0 4
16059: PUSH
16060: LD_VAR 0 6
16064: PUSH
16065: LD_INT 1
16067: ARRAY
16068: PPUSH
16069: LD_VAR 0 2
16073: PPUSH
16074: CALL_OW 259
16078: ST_TO_ADDR
// if s1 = 1 then
16079: LD_VAR 0 2
16083: PUSH
16084: LD_INT 1
16086: EQUAL
16087: IFFALSE 16107
// s2 := rand ( 2 , 4 ) else
16089: LD_ADDR_VAR 0 3
16093: PUSH
16094: LD_INT 2
16096: PPUSH
16097: LD_INT 4
16099: PPUSH
16100: CALL_OW 12
16104: ST_TO_ADDR
16105: GO 16115
// s2 := 1 ;
16107: LD_ADDR_VAR 0 3
16111: PUSH
16112: LD_INT 1
16114: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16115: LD_ADDR_VAR 0 5
16119: PUSH
16120: LD_VAR 0 6
16124: PUSH
16125: LD_INT 1
16127: ARRAY
16128: PPUSH
16129: LD_VAR 0 3
16133: PPUSH
16134: CALL_OW 259
16138: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16139: LD_VAR 0 6
16143: PUSH
16144: LD_INT 1
16146: ARRAY
16147: PPUSH
16148: LD_VAR 0 2
16152: PPUSH
16153: LD_VAR 0 5
16157: PPUSH
16158: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16162: LD_VAR 0 6
16166: PUSH
16167: LD_INT 1
16169: ARRAY
16170: PPUSH
16171: LD_VAR 0 3
16175: PPUSH
16176: LD_VAR 0 4
16180: PPUSH
16181: CALL_OW 237
// end ;
16185: PPOPN 6
16187: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16188: LD_EXP 24
16192: PUSH
16193: LD_EXP 71
16197: AND
16198: IFFALSE 16277
16200: GO 16202
16202: DISABLE
16203: LD_INT 0
16205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16206: LD_ADDR_VAR 0 1
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_OWVAR 2
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 30
16225: PUSH
16226: LD_INT 3
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PPUSH
16237: CALL_OW 69
16241: ST_TO_ADDR
// if not tmp then
16242: LD_VAR 0 1
16246: NOT
16247: IFFALSE 16251
// exit ;
16249: GO 16277
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16251: LD_VAR 0 1
16255: PUSH
16256: LD_INT 1
16258: PPUSH
16259: LD_VAR 0 1
16263: PPUSH
16264: CALL_OW 12
16268: ARRAY
16269: PPUSH
16270: LD_INT 1
16272: PPUSH
16273: CALL_OW 234
// end ;
16277: PPOPN 1
16279: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16280: LD_EXP 24
16284: PUSH
16285: LD_EXP 72
16289: AND
16290: IFFALSE 16402
16292: GO 16294
16294: DISABLE
16295: LD_INT 0
16297: PPUSH
16298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16299: LD_ADDR_VAR 0 2
16303: PUSH
16304: LD_INT 22
16306: PUSH
16307: LD_OWVAR 2
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 2
16318: PUSH
16319: LD_INT 30
16321: PUSH
16322: LD_INT 27
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 30
16331: PUSH
16332: LD_INT 26
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 30
16341: PUSH
16342: LD_INT 28
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PPUSH
16359: CALL_OW 69
16363: ST_TO_ADDR
// if not tmp then
16364: LD_VAR 0 2
16368: NOT
16369: IFFALSE 16373
// exit ;
16371: GO 16402
// for i in tmp do
16373: LD_ADDR_VAR 0 1
16377: PUSH
16378: LD_VAR 0 2
16382: PUSH
16383: FOR_IN
16384: IFFALSE 16400
// SetLives ( i , 1 ) ;
16386: LD_VAR 0 1
16390: PPUSH
16391: LD_INT 1
16393: PPUSH
16394: CALL_OW 234
16398: GO 16383
16400: POP
16401: POP
// end ;
16402: PPOPN 2
16404: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16405: LD_EXP 24
16409: PUSH
16410: LD_EXP 73
16414: AND
16415: IFFALSE 16702
16417: GO 16419
16419: DISABLE
16420: LD_INT 0
16422: PPUSH
16423: PPUSH
16424: PPUSH
// begin i := rand ( 1 , 7 ) ;
16425: LD_ADDR_VAR 0 1
16429: PUSH
16430: LD_INT 1
16432: PPUSH
16433: LD_INT 7
16435: PPUSH
16436: CALL_OW 12
16440: ST_TO_ADDR
// case i of 1 :
16441: LD_VAR 0 1
16445: PUSH
16446: LD_INT 1
16448: DOUBLE
16449: EQUAL
16450: IFTRUE 16454
16452: GO 16464
16454: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16455: LD_STRING earthquake(getX(game), 0, 32)
16457: PPUSH
16458: CALL_OW 559
16462: GO 16702
16464: LD_INT 2
16466: DOUBLE
16467: EQUAL
16468: IFTRUE 16472
16470: GO 16486
16472: POP
// begin ToLua ( displayStucuk(); ) ;
16473: LD_STRING displayStucuk();
16475: PPUSH
16476: CALL_OW 559
// ResetFog ;
16480: CALL_OW 335
// end ; 3 :
16484: GO 16702
16486: LD_INT 3
16488: DOUBLE
16489: EQUAL
16490: IFTRUE 16494
16492: GO 16598
16494: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16495: LD_ADDR_VAR 0 2
16499: PUSH
16500: LD_INT 22
16502: PUSH
16503: LD_OWVAR 2
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 25
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PPUSH
16526: CALL_OW 69
16530: ST_TO_ADDR
// if not tmp then
16531: LD_VAR 0 2
16535: NOT
16536: IFFALSE 16540
// exit ;
16538: GO 16702
// un := tmp [ rand ( 1 , tmp ) ] ;
16540: LD_ADDR_VAR 0 3
16544: PUSH
16545: LD_VAR 0 2
16549: PUSH
16550: LD_INT 1
16552: PPUSH
16553: LD_VAR 0 2
16557: PPUSH
16558: CALL_OW 12
16562: ARRAY
16563: ST_TO_ADDR
// if Crawls ( un ) then
16564: LD_VAR 0 3
16568: PPUSH
16569: CALL_OW 318
16573: IFFALSE 16584
// ComWalk ( un ) ;
16575: LD_VAR 0 3
16579: PPUSH
16580: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16584: LD_VAR 0 3
16588: PPUSH
16589: LD_INT 8
16591: PPUSH
16592: CALL_OW 336
// end ; 4 :
16596: GO 16702
16598: LD_INT 4
16600: DOUBLE
16601: EQUAL
16602: IFTRUE 16606
16604: GO 16680
16606: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16607: LD_ADDR_VAR 0 2
16611: PUSH
16612: LD_INT 22
16614: PUSH
16615: LD_OWVAR 2
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 30
16626: PUSH
16627: LD_INT 29
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PPUSH
16638: CALL_OW 69
16642: ST_TO_ADDR
// if not tmp then
16643: LD_VAR 0 2
16647: NOT
16648: IFFALSE 16652
// exit ;
16650: GO 16702
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16652: LD_VAR 0 2
16656: PUSH
16657: LD_INT 1
16659: ARRAY
16660: PPUSH
16661: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16665: LD_VAR 0 2
16669: PUSH
16670: LD_INT 1
16672: ARRAY
16673: PPUSH
16674: CALL_OW 65
// end ; 5 .. 7 :
16678: GO 16702
16680: LD_INT 5
16682: DOUBLE
16683: GREATEREQUAL
16684: IFFALSE 16692
16686: LD_INT 7
16688: DOUBLE
16689: LESSEQUAL
16690: IFTRUE 16694
16692: GO 16701
16694: POP
// StreamSibBomb ; end ;
16695: CALL 12939 0 0
16699: GO 16702
16701: POP
// end ;
16702: PPOPN 3
16704: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16705: LD_EXP 24
16709: PUSH
16710: LD_EXP 74
16714: AND
16715: IFFALSE 16871
16717: GO 16719
16719: DISABLE
16720: LD_INT 0
16722: PPUSH
16723: PPUSH
16724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16725: LD_ADDR_VAR 0 2
16729: PUSH
16730: LD_INT 81
16732: PUSH
16733: LD_OWVAR 2
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 2
16744: PUSH
16745: LD_INT 21
16747: PUSH
16748: LD_INT 1
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 21
16757: PUSH
16758: LD_INT 2
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PPUSH
16774: CALL_OW 69
16778: ST_TO_ADDR
// if not tmp then
16779: LD_VAR 0 2
16783: NOT
16784: IFFALSE 16788
// exit ;
16786: GO 16871
// p := 0 ;
16788: LD_ADDR_VAR 0 3
16792: PUSH
16793: LD_INT 0
16795: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16796: LD_INT 35
16798: PPUSH
16799: CALL_OW 67
// p := p + 1 ;
16803: LD_ADDR_VAR 0 3
16807: PUSH
16808: LD_VAR 0 3
16812: PUSH
16813: LD_INT 1
16815: PLUS
16816: ST_TO_ADDR
// for i in tmp do
16817: LD_ADDR_VAR 0 1
16821: PUSH
16822: LD_VAR 0 2
16826: PUSH
16827: FOR_IN
16828: IFFALSE 16859
// if GetLives ( i ) < 1000 then
16830: LD_VAR 0 1
16834: PPUSH
16835: CALL_OW 256
16839: PUSH
16840: LD_INT 1000
16842: LESS
16843: IFFALSE 16857
// SetLives ( i , 1000 ) ;
16845: LD_VAR 0 1
16849: PPUSH
16850: LD_INT 1000
16852: PPUSH
16853: CALL_OW 234
16857: GO 16827
16859: POP
16860: POP
// until p > 20 ;
16861: LD_VAR 0 3
16865: PUSH
16866: LD_INT 20
16868: GREATER
16869: IFFALSE 16796
// end ;
16871: PPOPN 3
16873: END
// every 0 0$1 trigger StreamModeActive and sTime do
16874: LD_EXP 24
16878: PUSH
16879: LD_EXP 75
16883: AND
16884: IFFALSE 16919
16886: GO 16888
16888: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16889: LD_INT 28
16891: PPUSH
16892: LD_OWVAR 2
16896: PPUSH
16897: LD_INT 2
16899: PPUSH
16900: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16904: LD_INT 30
16906: PPUSH
16907: LD_OWVAR 2
16911: PPUSH
16912: LD_INT 2
16914: PPUSH
16915: CALL_OW 322
// end ;
16919: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16920: LD_EXP 24
16924: PUSH
16925: LD_EXP 76
16929: AND
16930: IFFALSE 17051
16932: GO 16934
16934: DISABLE
16935: LD_INT 0
16937: PPUSH
16938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16939: LD_ADDR_VAR 0 2
16943: PUSH
16944: LD_INT 22
16946: PUSH
16947: LD_OWVAR 2
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 21
16958: PUSH
16959: LD_INT 1
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 3
16968: PUSH
16969: LD_INT 23
16971: PUSH
16972: LD_INT 0
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: PPUSH
16988: CALL_OW 69
16992: ST_TO_ADDR
// if not tmp then
16993: LD_VAR 0 2
16997: NOT
16998: IFFALSE 17002
// exit ;
17000: GO 17051
// for i in tmp do
17002: LD_ADDR_VAR 0 1
17006: PUSH
17007: LD_VAR 0 2
17011: PUSH
17012: FOR_IN
17013: IFFALSE 17049
// begin if Crawls ( i ) then
17015: LD_VAR 0 1
17019: PPUSH
17020: CALL_OW 318
17024: IFFALSE 17035
// ComWalk ( i ) ;
17026: LD_VAR 0 1
17030: PPUSH
17031: CALL_OW 138
// SetClass ( i , 2 ) ;
17035: LD_VAR 0 1
17039: PPUSH
17040: LD_INT 2
17042: PPUSH
17043: CALL_OW 336
// end ;
17047: GO 17012
17049: POP
17050: POP
// end ;
17051: PPOPN 2
17053: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17054: LD_EXP 24
17058: PUSH
17059: LD_EXP 77
17063: AND
17064: IFFALSE 17352
17066: GO 17068
17068: DISABLE
17069: LD_INT 0
17071: PPUSH
17072: PPUSH
17073: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17074: LD_OWVAR 2
17078: PPUSH
17079: LD_INT 9
17081: PPUSH
17082: LD_INT 1
17084: PPUSH
17085: LD_INT 1
17087: PPUSH
17088: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17092: LD_INT 9
17094: PPUSH
17095: LD_OWVAR 2
17099: PPUSH
17100: CALL_OW 343
// uc_side := 9 ;
17104: LD_ADDR_OWVAR 20
17108: PUSH
17109: LD_INT 9
17111: ST_TO_ADDR
// uc_nation := 2 ;
17112: LD_ADDR_OWVAR 21
17116: PUSH
17117: LD_INT 2
17119: ST_TO_ADDR
// hc_name := Dark Warrior ;
17120: LD_ADDR_OWVAR 26
17124: PUSH
17125: LD_STRING Dark Warrior
17127: ST_TO_ADDR
// hc_gallery :=  ;
17128: LD_ADDR_OWVAR 33
17132: PUSH
17133: LD_STRING 
17135: ST_TO_ADDR
// hc_noskilllimit := true ;
17136: LD_ADDR_OWVAR 76
17140: PUSH
17141: LD_INT 1
17143: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17144: LD_ADDR_OWVAR 31
17148: PUSH
17149: LD_INT 30
17151: PUSH
17152: LD_INT 30
17154: PUSH
17155: LD_INT 30
17157: PUSH
17158: LD_INT 30
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: ST_TO_ADDR
// un := CreateHuman ;
17167: LD_ADDR_VAR 0 3
17171: PUSH
17172: CALL_OW 44
17176: ST_TO_ADDR
// hc_noskilllimit := false ;
17177: LD_ADDR_OWVAR 76
17181: PUSH
17182: LD_INT 0
17184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17185: LD_VAR 0 3
17189: PPUSH
17190: LD_INT 1
17192: PPUSH
17193: CALL_OW 51
// ToLua ( playRanger() ) ;
17197: LD_STRING playRanger()
17199: PPUSH
17200: CALL_OW 559
// p := 0 ;
17204: LD_ADDR_VAR 0 2
17208: PUSH
17209: LD_INT 0
17211: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17212: LD_INT 35
17214: PPUSH
17215: CALL_OW 67
// p := p + 1 ;
17219: LD_ADDR_VAR 0 2
17223: PUSH
17224: LD_VAR 0 2
17228: PUSH
17229: LD_INT 1
17231: PLUS
17232: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17233: LD_VAR 0 3
17237: PPUSH
17238: CALL_OW 256
17242: PUSH
17243: LD_INT 1000
17245: LESS
17246: IFFALSE 17260
// SetLives ( un , 1000 ) ;
17248: LD_VAR 0 3
17252: PPUSH
17253: LD_INT 1000
17255: PPUSH
17256: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17260: LD_VAR 0 3
17264: PPUSH
17265: LD_INT 81
17267: PUSH
17268: LD_OWVAR 2
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 91
17279: PUSH
17280: LD_VAR 0 3
17284: PUSH
17285: LD_INT 30
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PPUSH
17297: CALL_OW 69
17301: PPUSH
17302: LD_VAR 0 3
17306: PPUSH
17307: CALL_OW 74
17311: PPUSH
17312: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17316: LD_VAR 0 2
17320: PUSH
17321: LD_INT 80
17323: GREATER
17324: PUSH
17325: LD_VAR 0 3
17329: PPUSH
17330: CALL_OW 301
17334: OR
17335: IFFALSE 17212
// if un then
17337: LD_VAR 0 3
17341: IFFALSE 17352
// RemoveUnit ( un ) ;
17343: LD_VAR 0 3
17347: PPUSH
17348: CALL_OW 64
// end ;
17352: PPOPN 3
17354: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17355: LD_EXP 78
17359: IFFALSE 17475
17361: GO 17363
17363: DISABLE
17364: LD_INT 0
17366: PPUSH
17367: PPUSH
17368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17369: LD_ADDR_VAR 0 2
17373: PUSH
17374: LD_INT 81
17376: PUSH
17377: LD_OWVAR 2
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 21
17388: PUSH
17389: LD_INT 1
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PPUSH
17400: CALL_OW 69
17404: ST_TO_ADDR
// if not tmp then
17405: LD_VAR 0 2
17409: NOT
17410: IFFALSE 17414
// exit ;
17412: GO 17475
// ToLua ( playComputer() ) ;
17414: LD_STRING playComputer()
17416: PPUSH
17417: CALL_OW 559
// for i in tmp do
17421: LD_ADDR_VAR 0 1
17425: PUSH
17426: LD_VAR 0 2
17430: PUSH
17431: FOR_IN
17432: IFFALSE 17473
// for j := 1 to 4 do
17434: LD_ADDR_VAR 0 3
17438: PUSH
17439: DOUBLE
17440: LD_INT 1
17442: DEC
17443: ST_TO_ADDR
17444: LD_INT 4
17446: PUSH
17447: FOR_TO
17448: IFFALSE 17469
// SetSkill ( i , j , 10 ) ;
17450: LD_VAR 0 1
17454: PPUSH
17455: LD_VAR 0 3
17459: PPUSH
17460: LD_INT 10
17462: PPUSH
17463: CALL_OW 237
17467: GO 17447
17469: POP
17470: POP
17471: GO 17431
17473: POP
17474: POP
// end ;
17475: PPOPN 3
17477: END
// every 0 0$1 trigger s30 do var i , tmp ;
17478: LD_EXP 79
17482: IFFALSE 17551
17484: GO 17486
17486: DISABLE
17487: LD_INT 0
17489: PPUSH
17490: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17491: LD_ADDR_VAR 0 2
17495: PUSH
17496: LD_INT 22
17498: PUSH
17499: LD_OWVAR 2
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PPUSH
17508: CALL_OW 69
17512: ST_TO_ADDR
// if not tmp then
17513: LD_VAR 0 2
17517: NOT
17518: IFFALSE 17522
// exit ;
17520: GO 17551
// for i in tmp do
17522: LD_ADDR_VAR 0 1
17526: PUSH
17527: LD_VAR 0 2
17531: PUSH
17532: FOR_IN
17533: IFFALSE 17549
// SetLives ( i , 300 ) ;
17535: LD_VAR 0 1
17539: PPUSH
17540: LD_INT 300
17542: PPUSH
17543: CALL_OW 234
17547: GO 17532
17549: POP
17550: POP
// end ;
17551: PPOPN 2
17553: END
// every 0 0$1 trigger s60 do var i , tmp ;
17554: LD_EXP 80
17558: IFFALSE 17627
17560: GO 17562
17562: DISABLE
17563: LD_INT 0
17565: PPUSH
17566: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17567: LD_ADDR_VAR 0 2
17571: PUSH
17572: LD_INT 22
17574: PUSH
17575: LD_OWVAR 2
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PPUSH
17584: CALL_OW 69
17588: ST_TO_ADDR
// if not tmp then
17589: LD_VAR 0 2
17593: NOT
17594: IFFALSE 17598
// exit ;
17596: GO 17627
// for i in tmp do
17598: LD_ADDR_VAR 0 1
17602: PUSH
17603: LD_VAR 0 2
17607: PUSH
17608: FOR_IN
17609: IFFALSE 17625
// SetLives ( i , 600 ) ;
17611: LD_VAR 0 1
17615: PPUSH
17616: LD_INT 600
17618: PPUSH
17619: CALL_OW 234
17623: GO 17608
17625: POP
17626: POP
// end ;
17627: PPOPN 2
17629: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17630: LD_INT 0
17632: PPUSH
// case cmd of 301 :
17633: LD_VAR 0 1
17637: PUSH
17638: LD_INT 301
17640: DOUBLE
17641: EQUAL
17642: IFTRUE 17646
17644: GO 17678
17646: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17647: LD_VAR 0 6
17651: PPUSH
17652: LD_VAR 0 7
17656: PPUSH
17657: LD_VAR 0 8
17661: PPUSH
17662: LD_VAR 0 4
17666: PPUSH
17667: LD_VAR 0 5
17671: PPUSH
17672: CALL 18879 0 5
17676: GO 17799
17678: LD_INT 302
17680: DOUBLE
17681: EQUAL
17682: IFTRUE 17686
17684: GO 17723
17686: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17687: LD_VAR 0 6
17691: PPUSH
17692: LD_VAR 0 7
17696: PPUSH
17697: LD_VAR 0 8
17701: PPUSH
17702: LD_VAR 0 9
17706: PPUSH
17707: LD_VAR 0 4
17711: PPUSH
17712: LD_VAR 0 5
17716: PPUSH
17717: CALL 18970 0 6
17721: GO 17799
17723: LD_INT 303
17725: DOUBLE
17726: EQUAL
17727: IFTRUE 17731
17729: GO 17768
17731: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17732: LD_VAR 0 6
17736: PPUSH
17737: LD_VAR 0 7
17741: PPUSH
17742: LD_VAR 0 8
17746: PPUSH
17747: LD_VAR 0 9
17751: PPUSH
17752: LD_VAR 0 4
17756: PPUSH
17757: LD_VAR 0 5
17761: PPUSH
17762: CALL 17804 0 6
17766: GO 17799
17768: LD_INT 304
17770: DOUBLE
17771: EQUAL
17772: IFTRUE 17776
17774: GO 17798
17776: POP
// hHackTeleport ( unit , x , y ) ; end ;
17777: LD_VAR 0 2
17781: PPUSH
17782: LD_VAR 0 4
17786: PPUSH
17787: LD_VAR 0 5
17791: PPUSH
17792: CALL 19563 0 3
17796: GO 17799
17798: POP
// end ;
17799: LD_VAR 0 12
17803: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17804: LD_INT 0
17806: PPUSH
17807: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17808: LD_VAR 0 1
17812: PUSH
17813: LD_INT 1
17815: LESS
17816: PUSH
17817: LD_VAR 0 1
17821: PUSH
17822: LD_INT 3
17824: GREATER
17825: OR
17826: PUSH
17827: LD_VAR 0 5
17831: PPUSH
17832: LD_VAR 0 6
17836: PPUSH
17837: CALL_OW 428
17841: OR
17842: IFFALSE 17846
// exit ;
17844: GO 18566
// uc_side := your_side ;
17846: LD_ADDR_OWVAR 20
17850: PUSH
17851: LD_OWVAR 2
17855: ST_TO_ADDR
// uc_nation := nation ;
17856: LD_ADDR_OWVAR 21
17860: PUSH
17861: LD_VAR 0 1
17865: ST_TO_ADDR
// bc_level = 1 ;
17866: LD_ADDR_OWVAR 43
17870: PUSH
17871: LD_INT 1
17873: ST_TO_ADDR
// case btype of 1 :
17874: LD_VAR 0 2
17878: PUSH
17879: LD_INT 1
17881: DOUBLE
17882: EQUAL
17883: IFTRUE 17887
17885: GO 17898
17887: POP
// bc_type := b_depot ; 2 :
17888: LD_ADDR_OWVAR 42
17892: PUSH
17893: LD_INT 0
17895: ST_TO_ADDR
17896: GO 18510
17898: LD_INT 2
17900: DOUBLE
17901: EQUAL
17902: IFTRUE 17906
17904: GO 17917
17906: POP
// bc_type := b_warehouse ; 3 :
17907: LD_ADDR_OWVAR 42
17911: PUSH
17912: LD_INT 1
17914: ST_TO_ADDR
17915: GO 18510
17917: LD_INT 3
17919: DOUBLE
17920: EQUAL
17921: IFTRUE 17925
17923: GO 17936
17925: POP
// bc_type := b_lab ; 4 .. 9 :
17926: LD_ADDR_OWVAR 42
17930: PUSH
17931: LD_INT 6
17933: ST_TO_ADDR
17934: GO 18510
17936: LD_INT 4
17938: DOUBLE
17939: GREATEREQUAL
17940: IFFALSE 17948
17942: LD_INT 9
17944: DOUBLE
17945: LESSEQUAL
17946: IFTRUE 17950
17948: GO 18002
17950: POP
// begin bc_type := b_lab_half ;
17951: LD_ADDR_OWVAR 42
17955: PUSH
17956: LD_INT 7
17958: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17959: LD_ADDR_OWVAR 44
17963: PUSH
17964: LD_INT 10
17966: PUSH
17967: LD_INT 11
17969: PUSH
17970: LD_INT 12
17972: PUSH
17973: LD_INT 15
17975: PUSH
17976: LD_INT 14
17978: PUSH
17979: LD_INT 13
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: PUSH
17990: LD_VAR 0 2
17994: PUSH
17995: LD_INT 3
17997: MINUS
17998: ARRAY
17999: ST_TO_ADDR
// end ; 10 .. 13 :
18000: GO 18510
18002: LD_INT 10
18004: DOUBLE
18005: GREATEREQUAL
18006: IFFALSE 18014
18008: LD_INT 13
18010: DOUBLE
18011: LESSEQUAL
18012: IFTRUE 18016
18014: GO 18093
18016: POP
// begin bc_type := b_lab_full ;
18017: LD_ADDR_OWVAR 42
18021: PUSH
18022: LD_INT 8
18024: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18025: LD_ADDR_OWVAR 44
18029: PUSH
18030: LD_INT 10
18032: PUSH
18033: LD_INT 12
18035: PUSH
18036: LD_INT 14
18038: PUSH
18039: LD_INT 13
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: PUSH
18048: LD_VAR 0 2
18052: PUSH
18053: LD_INT 9
18055: MINUS
18056: ARRAY
18057: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18058: LD_ADDR_OWVAR 45
18062: PUSH
18063: LD_INT 11
18065: PUSH
18066: LD_INT 15
18068: PUSH
18069: LD_INT 12
18071: PUSH
18072: LD_INT 15
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: PUSH
18081: LD_VAR 0 2
18085: PUSH
18086: LD_INT 9
18088: MINUS
18089: ARRAY
18090: ST_TO_ADDR
// end ; 14 :
18091: GO 18510
18093: LD_INT 14
18095: DOUBLE
18096: EQUAL
18097: IFTRUE 18101
18099: GO 18112
18101: POP
// bc_type := b_workshop ; 15 :
18102: LD_ADDR_OWVAR 42
18106: PUSH
18107: LD_INT 2
18109: ST_TO_ADDR
18110: GO 18510
18112: LD_INT 15
18114: DOUBLE
18115: EQUAL
18116: IFTRUE 18120
18118: GO 18131
18120: POP
// bc_type := b_factory ; 16 :
18121: LD_ADDR_OWVAR 42
18125: PUSH
18126: LD_INT 3
18128: ST_TO_ADDR
18129: GO 18510
18131: LD_INT 16
18133: DOUBLE
18134: EQUAL
18135: IFTRUE 18139
18137: GO 18150
18139: POP
// bc_type := b_ext_gun ; 17 :
18140: LD_ADDR_OWVAR 42
18144: PUSH
18145: LD_INT 17
18147: ST_TO_ADDR
18148: GO 18510
18150: LD_INT 17
18152: DOUBLE
18153: EQUAL
18154: IFTRUE 18158
18156: GO 18186
18158: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18159: LD_ADDR_OWVAR 42
18163: PUSH
18164: LD_INT 19
18166: PUSH
18167: LD_INT 23
18169: PUSH
18170: LD_INT 19
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: LIST
18177: PUSH
18178: LD_VAR 0 1
18182: ARRAY
18183: ST_TO_ADDR
18184: GO 18510
18186: LD_INT 18
18188: DOUBLE
18189: EQUAL
18190: IFTRUE 18194
18192: GO 18205
18194: POP
// bc_type := b_ext_radar ; 19 :
18195: LD_ADDR_OWVAR 42
18199: PUSH
18200: LD_INT 20
18202: ST_TO_ADDR
18203: GO 18510
18205: LD_INT 19
18207: DOUBLE
18208: EQUAL
18209: IFTRUE 18213
18211: GO 18224
18213: POP
// bc_type := b_ext_radio ; 20 :
18214: LD_ADDR_OWVAR 42
18218: PUSH
18219: LD_INT 22
18221: ST_TO_ADDR
18222: GO 18510
18224: LD_INT 20
18226: DOUBLE
18227: EQUAL
18228: IFTRUE 18232
18230: GO 18243
18232: POP
// bc_type := b_ext_siberium ; 21 :
18233: LD_ADDR_OWVAR 42
18237: PUSH
18238: LD_INT 21
18240: ST_TO_ADDR
18241: GO 18510
18243: LD_INT 21
18245: DOUBLE
18246: EQUAL
18247: IFTRUE 18251
18249: GO 18262
18251: POP
// bc_type := b_ext_computer ; 22 :
18252: LD_ADDR_OWVAR 42
18256: PUSH
18257: LD_INT 24
18259: ST_TO_ADDR
18260: GO 18510
18262: LD_INT 22
18264: DOUBLE
18265: EQUAL
18266: IFTRUE 18270
18268: GO 18281
18270: POP
// bc_type := b_ext_track ; 23 :
18271: LD_ADDR_OWVAR 42
18275: PUSH
18276: LD_INT 16
18278: ST_TO_ADDR
18279: GO 18510
18281: LD_INT 23
18283: DOUBLE
18284: EQUAL
18285: IFTRUE 18289
18287: GO 18300
18289: POP
// bc_type := b_ext_laser ; 24 :
18290: LD_ADDR_OWVAR 42
18294: PUSH
18295: LD_INT 25
18297: ST_TO_ADDR
18298: GO 18510
18300: LD_INT 24
18302: DOUBLE
18303: EQUAL
18304: IFTRUE 18308
18306: GO 18319
18308: POP
// bc_type := b_control_tower ; 25 :
18309: LD_ADDR_OWVAR 42
18313: PUSH
18314: LD_INT 36
18316: ST_TO_ADDR
18317: GO 18510
18319: LD_INT 25
18321: DOUBLE
18322: EQUAL
18323: IFTRUE 18327
18325: GO 18338
18327: POP
// bc_type := b_breastwork ; 26 :
18328: LD_ADDR_OWVAR 42
18332: PUSH
18333: LD_INT 31
18335: ST_TO_ADDR
18336: GO 18510
18338: LD_INT 26
18340: DOUBLE
18341: EQUAL
18342: IFTRUE 18346
18344: GO 18357
18346: POP
// bc_type := b_bunker ; 27 :
18347: LD_ADDR_OWVAR 42
18351: PUSH
18352: LD_INT 32
18354: ST_TO_ADDR
18355: GO 18510
18357: LD_INT 27
18359: DOUBLE
18360: EQUAL
18361: IFTRUE 18365
18363: GO 18376
18365: POP
// bc_type := b_turret ; 28 :
18366: LD_ADDR_OWVAR 42
18370: PUSH
18371: LD_INT 33
18373: ST_TO_ADDR
18374: GO 18510
18376: LD_INT 28
18378: DOUBLE
18379: EQUAL
18380: IFTRUE 18384
18382: GO 18395
18384: POP
// bc_type := b_armoury ; 29 :
18385: LD_ADDR_OWVAR 42
18389: PUSH
18390: LD_INT 4
18392: ST_TO_ADDR
18393: GO 18510
18395: LD_INT 29
18397: DOUBLE
18398: EQUAL
18399: IFTRUE 18403
18401: GO 18414
18403: POP
// bc_type := b_barracks ; 30 :
18404: LD_ADDR_OWVAR 42
18408: PUSH
18409: LD_INT 5
18411: ST_TO_ADDR
18412: GO 18510
18414: LD_INT 30
18416: DOUBLE
18417: EQUAL
18418: IFTRUE 18422
18420: GO 18433
18422: POP
// bc_type := b_solar_power ; 31 :
18423: LD_ADDR_OWVAR 42
18427: PUSH
18428: LD_INT 27
18430: ST_TO_ADDR
18431: GO 18510
18433: LD_INT 31
18435: DOUBLE
18436: EQUAL
18437: IFTRUE 18441
18439: GO 18452
18441: POP
// bc_type := b_oil_power ; 32 :
18442: LD_ADDR_OWVAR 42
18446: PUSH
18447: LD_INT 26
18449: ST_TO_ADDR
18450: GO 18510
18452: LD_INT 32
18454: DOUBLE
18455: EQUAL
18456: IFTRUE 18460
18458: GO 18471
18460: POP
// bc_type := b_siberite_power ; 33 :
18461: LD_ADDR_OWVAR 42
18465: PUSH
18466: LD_INT 28
18468: ST_TO_ADDR
18469: GO 18510
18471: LD_INT 33
18473: DOUBLE
18474: EQUAL
18475: IFTRUE 18479
18477: GO 18490
18479: POP
// bc_type := b_oil_mine ; 34 :
18480: LD_ADDR_OWVAR 42
18484: PUSH
18485: LD_INT 29
18487: ST_TO_ADDR
18488: GO 18510
18490: LD_INT 34
18492: DOUBLE
18493: EQUAL
18494: IFTRUE 18498
18496: GO 18509
18498: POP
// bc_type := b_siberite_mine ; end ;
18499: LD_ADDR_OWVAR 42
18503: PUSH
18504: LD_INT 30
18506: ST_TO_ADDR
18507: GO 18510
18509: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18510: LD_ADDR_VAR 0 8
18514: PUSH
18515: LD_VAR 0 5
18519: PPUSH
18520: LD_VAR 0 6
18524: PPUSH
18525: LD_VAR 0 3
18529: PPUSH
18530: CALL_OW 47
18534: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18535: LD_OWVAR 42
18539: PUSH
18540: LD_INT 32
18542: PUSH
18543: LD_INT 33
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: IN
18550: IFFALSE 18566
// PlaceWeaponTurret ( b , weapon ) ;
18552: LD_VAR 0 8
18556: PPUSH
18557: LD_VAR 0 4
18561: PPUSH
18562: CALL_OW 431
// end ;
18566: LD_VAR 0 7
18570: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18571: LD_INT 0
18573: PPUSH
18574: PPUSH
18575: PPUSH
18576: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18577: LD_ADDR_VAR 0 4
18581: PUSH
18582: LD_INT 22
18584: PUSH
18585: LD_OWVAR 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 2
18596: PUSH
18597: LD_INT 30
18599: PUSH
18600: LD_INT 0
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 30
18609: PUSH
18610: LD_INT 1
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: LIST
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PPUSH
18626: CALL_OW 69
18630: ST_TO_ADDR
// if not tmp then
18631: LD_VAR 0 4
18635: NOT
18636: IFFALSE 18640
// exit ;
18638: GO 18699
// for i in tmp do
18640: LD_ADDR_VAR 0 2
18644: PUSH
18645: LD_VAR 0 4
18649: PUSH
18650: FOR_IN
18651: IFFALSE 18697
// for j = 1 to 3 do
18653: LD_ADDR_VAR 0 3
18657: PUSH
18658: DOUBLE
18659: LD_INT 1
18661: DEC
18662: ST_TO_ADDR
18663: LD_INT 3
18665: PUSH
18666: FOR_TO
18667: IFFALSE 18693
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18669: LD_VAR 0 2
18673: PPUSH
18674: CALL_OW 274
18678: PPUSH
18679: LD_VAR 0 3
18683: PPUSH
18684: LD_INT 99999
18686: PPUSH
18687: CALL_OW 277
18691: GO 18666
18693: POP
18694: POP
18695: GO 18650
18697: POP
18698: POP
// end ;
18699: LD_VAR 0 1
18703: RET
// export function hHackSetLevel10 ; var i , j ; begin
18704: LD_INT 0
18706: PPUSH
18707: PPUSH
18708: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18709: LD_ADDR_VAR 0 2
18713: PUSH
18714: LD_INT 21
18716: PUSH
18717: LD_INT 1
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PPUSH
18724: CALL_OW 69
18728: PUSH
18729: FOR_IN
18730: IFFALSE 18782
// if IsSelected ( i ) then
18732: LD_VAR 0 2
18736: PPUSH
18737: CALL_OW 306
18741: IFFALSE 18780
// begin for j := 1 to 4 do
18743: LD_ADDR_VAR 0 3
18747: PUSH
18748: DOUBLE
18749: LD_INT 1
18751: DEC
18752: ST_TO_ADDR
18753: LD_INT 4
18755: PUSH
18756: FOR_TO
18757: IFFALSE 18778
// SetSkill ( i , j , 10 ) ;
18759: LD_VAR 0 2
18763: PPUSH
18764: LD_VAR 0 3
18768: PPUSH
18769: LD_INT 10
18771: PPUSH
18772: CALL_OW 237
18776: GO 18756
18778: POP
18779: POP
// end ;
18780: GO 18729
18782: POP
18783: POP
// end ;
18784: LD_VAR 0 1
18788: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18789: LD_INT 0
18791: PPUSH
18792: PPUSH
18793: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18794: LD_ADDR_VAR 0 2
18798: PUSH
18799: LD_INT 22
18801: PUSH
18802: LD_OWVAR 2
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 21
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 69
18829: PUSH
18830: FOR_IN
18831: IFFALSE 18872
// begin for j := 1 to 4 do
18833: LD_ADDR_VAR 0 3
18837: PUSH
18838: DOUBLE
18839: LD_INT 1
18841: DEC
18842: ST_TO_ADDR
18843: LD_INT 4
18845: PUSH
18846: FOR_TO
18847: IFFALSE 18868
// SetSkill ( i , j , 10 ) ;
18849: LD_VAR 0 2
18853: PPUSH
18854: LD_VAR 0 3
18858: PPUSH
18859: LD_INT 10
18861: PPUSH
18862: CALL_OW 237
18866: GO 18846
18868: POP
18869: POP
// end ;
18870: GO 18830
18872: POP
18873: POP
// end ;
18874: LD_VAR 0 1
18878: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18879: LD_INT 0
18881: PPUSH
// uc_side := your_side ;
18882: LD_ADDR_OWVAR 20
18886: PUSH
18887: LD_OWVAR 2
18891: ST_TO_ADDR
// uc_nation := nation ;
18892: LD_ADDR_OWVAR 21
18896: PUSH
18897: LD_VAR 0 1
18901: ST_TO_ADDR
// InitHc ;
18902: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18906: LD_INT 0
18908: PPUSH
18909: LD_VAR 0 2
18913: PPUSH
18914: LD_VAR 0 3
18918: PPUSH
18919: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18923: LD_VAR 0 4
18927: PPUSH
18928: LD_VAR 0 5
18932: PPUSH
18933: CALL_OW 428
18937: PUSH
18938: LD_INT 0
18940: EQUAL
18941: IFFALSE 18965
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18943: CALL_OW 44
18947: PPUSH
18948: LD_VAR 0 4
18952: PPUSH
18953: LD_VAR 0 5
18957: PPUSH
18958: LD_INT 1
18960: PPUSH
18961: CALL_OW 48
// end ;
18965: LD_VAR 0 6
18969: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18970: LD_INT 0
18972: PPUSH
18973: PPUSH
// uc_side := your_side ;
18974: LD_ADDR_OWVAR 20
18978: PUSH
18979: LD_OWVAR 2
18983: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18984: LD_VAR 0 1
18988: PUSH
18989: LD_INT 1
18991: PUSH
18992: LD_INT 2
18994: PUSH
18995: LD_INT 3
18997: PUSH
18998: LD_INT 4
19000: PUSH
19001: LD_INT 5
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: IN
19011: IFFALSE 19023
// uc_nation := nation_american else
19013: LD_ADDR_OWVAR 21
19017: PUSH
19018: LD_INT 1
19020: ST_TO_ADDR
19021: GO 19066
// if chassis in [ 11 , 12 , 13 , 14 ] then
19023: LD_VAR 0 1
19027: PUSH
19028: LD_INT 11
19030: PUSH
19031: LD_INT 12
19033: PUSH
19034: LD_INT 13
19036: PUSH
19037: LD_INT 14
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: IN
19046: IFFALSE 19058
// uc_nation := nation_arabian else
19048: LD_ADDR_OWVAR 21
19052: PUSH
19053: LD_INT 2
19055: ST_TO_ADDR
19056: GO 19066
// uc_nation := nation_russian ;
19058: LD_ADDR_OWVAR 21
19062: PUSH
19063: LD_INT 3
19065: ST_TO_ADDR
// vc_chassis := chassis ;
19066: LD_ADDR_OWVAR 37
19070: PUSH
19071: LD_VAR 0 1
19075: ST_TO_ADDR
// vc_engine := engine ;
19076: LD_ADDR_OWVAR 39
19080: PUSH
19081: LD_VAR 0 2
19085: ST_TO_ADDR
// vc_control := control ;
19086: LD_ADDR_OWVAR 38
19090: PUSH
19091: LD_VAR 0 3
19095: ST_TO_ADDR
// vc_weapon := weapon ;
19096: LD_ADDR_OWVAR 40
19100: PUSH
19101: LD_VAR 0 4
19105: ST_TO_ADDR
// un := CreateVehicle ;
19106: LD_ADDR_VAR 0 8
19110: PUSH
19111: CALL_OW 45
19115: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19116: LD_VAR 0 8
19120: PPUSH
19121: LD_INT 0
19123: PPUSH
19124: LD_INT 5
19126: PPUSH
19127: CALL_OW 12
19131: PPUSH
19132: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19136: LD_VAR 0 8
19140: PPUSH
19141: LD_VAR 0 5
19145: PPUSH
19146: LD_VAR 0 6
19150: PPUSH
19151: LD_INT 1
19153: PPUSH
19154: CALL_OW 48
// end ;
19158: LD_VAR 0 7
19162: RET
// export hInvincible ; every 1 do
19163: GO 19165
19165: DISABLE
// hInvincible := [ ] ;
19166: LD_ADDR_EXP 81
19170: PUSH
19171: EMPTY
19172: ST_TO_ADDR
19173: END
// every 10 do var i ;
19174: GO 19176
19176: DISABLE
19177: LD_INT 0
19179: PPUSH
// begin enable ;
19180: ENABLE
// if not hInvincible then
19181: LD_EXP 81
19185: NOT
19186: IFFALSE 19190
// exit ;
19188: GO 19234
// for i in hInvincible do
19190: LD_ADDR_VAR 0 1
19194: PUSH
19195: LD_EXP 81
19199: PUSH
19200: FOR_IN
19201: IFFALSE 19232
// if GetLives ( i ) < 1000 then
19203: LD_VAR 0 1
19207: PPUSH
19208: CALL_OW 256
19212: PUSH
19213: LD_INT 1000
19215: LESS
19216: IFFALSE 19230
// SetLives ( i , 1000 ) ;
19218: LD_VAR 0 1
19222: PPUSH
19223: LD_INT 1000
19225: PPUSH
19226: CALL_OW 234
19230: GO 19200
19232: POP
19233: POP
// end ;
19234: PPOPN 1
19236: END
// export function hHackInvincible ; var i ; begin
19237: LD_INT 0
19239: PPUSH
19240: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19241: LD_ADDR_VAR 0 2
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: LD_INT 21
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 21
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: PPUSH
19274: CALL_OW 69
19278: PUSH
19279: FOR_IN
19280: IFFALSE 19341
// if IsSelected ( i ) then
19282: LD_VAR 0 2
19286: PPUSH
19287: CALL_OW 306
19291: IFFALSE 19339
// begin if i in hInvincible then
19293: LD_VAR 0 2
19297: PUSH
19298: LD_EXP 81
19302: IN
19303: IFFALSE 19323
// hInvincible := hInvincible diff i else
19305: LD_ADDR_EXP 81
19309: PUSH
19310: LD_EXP 81
19314: PUSH
19315: LD_VAR 0 2
19319: DIFF
19320: ST_TO_ADDR
19321: GO 19339
// hInvincible := hInvincible union i ;
19323: LD_ADDR_EXP 81
19327: PUSH
19328: LD_EXP 81
19332: PUSH
19333: LD_VAR 0 2
19337: UNION
19338: ST_TO_ADDR
// end ;
19339: GO 19279
19341: POP
19342: POP
// end ;
19343: LD_VAR 0 1
19347: RET
// export function hHackInvisible ; var i , j ; begin
19348: LD_INT 0
19350: PPUSH
19351: PPUSH
19352: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_INT 21
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PPUSH
19368: CALL_OW 69
19372: PUSH
19373: FOR_IN
19374: IFFALSE 19398
// if IsSelected ( i ) then
19376: LD_VAR 0 2
19380: PPUSH
19381: CALL_OW 306
19385: IFFALSE 19396
// ComForceInvisible ( i ) ;
19387: LD_VAR 0 2
19391: PPUSH
19392: CALL_OW 496
19396: GO 19373
19398: POP
19399: POP
// end ;
19400: LD_VAR 0 1
19404: RET
// export function hHackChangeYourSide ; begin
19405: LD_INT 0
19407: PPUSH
// if your_side = 8 then
19408: LD_OWVAR 2
19412: PUSH
19413: LD_INT 8
19415: EQUAL
19416: IFFALSE 19428
// your_side := 0 else
19418: LD_ADDR_OWVAR 2
19422: PUSH
19423: LD_INT 0
19425: ST_TO_ADDR
19426: GO 19442
// your_side := your_side + 1 ;
19428: LD_ADDR_OWVAR 2
19432: PUSH
19433: LD_OWVAR 2
19437: PUSH
19438: LD_INT 1
19440: PLUS
19441: ST_TO_ADDR
// end ;
19442: LD_VAR 0 1
19446: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19447: LD_INT 0
19449: PPUSH
19450: PPUSH
19451: PPUSH
// for i in all_units do
19452: LD_ADDR_VAR 0 2
19456: PUSH
19457: LD_OWVAR 3
19461: PUSH
19462: FOR_IN
19463: IFFALSE 19541
// if IsSelected ( i ) then
19465: LD_VAR 0 2
19469: PPUSH
19470: CALL_OW 306
19474: IFFALSE 19539
// begin j := GetSide ( i ) ;
19476: LD_ADDR_VAR 0 3
19480: PUSH
19481: LD_VAR 0 2
19485: PPUSH
19486: CALL_OW 255
19490: ST_TO_ADDR
// if j = 8 then
19491: LD_VAR 0 3
19495: PUSH
19496: LD_INT 8
19498: EQUAL
19499: IFFALSE 19511
// j := 0 else
19501: LD_ADDR_VAR 0 3
19505: PUSH
19506: LD_INT 0
19508: ST_TO_ADDR
19509: GO 19525
// j := j + 1 ;
19511: LD_ADDR_VAR 0 3
19515: PUSH
19516: LD_VAR 0 3
19520: PUSH
19521: LD_INT 1
19523: PLUS
19524: ST_TO_ADDR
// SetSide ( i , j ) ;
19525: LD_VAR 0 2
19529: PPUSH
19530: LD_VAR 0 3
19534: PPUSH
19535: CALL_OW 235
// end ;
19539: GO 19462
19541: POP
19542: POP
// end ;
19543: LD_VAR 0 1
19547: RET
// export function hHackFog ; begin
19548: LD_INT 0
19550: PPUSH
// FogOff ( true ) ;
19551: LD_INT 1
19553: PPUSH
19554: CALL_OW 344
// end ;
19558: LD_VAR 0 1
19562: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19563: LD_INT 0
19565: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19566: LD_VAR 0 1
19570: PPUSH
19571: LD_VAR 0 2
19575: PPUSH
19576: LD_VAR 0 3
19580: PPUSH
19581: LD_INT 1
19583: PPUSH
19584: LD_INT 1
19586: PPUSH
19587: CALL_OW 483
// CenterOnXY ( x , y ) ;
19591: LD_VAR 0 2
19595: PPUSH
19596: LD_VAR 0 3
19600: PPUSH
19601: CALL_OW 84
// end ; end_of_file
19605: LD_VAR 0 4
19609: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19610: LD_INT 0
19612: PPUSH
19613: PPUSH
19614: PPUSH
19615: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19616: LD_VAR 0 1
19620: PPUSH
19621: CALL_OW 264
19625: PUSH
19626: LD_EXP 98
19630: EQUAL
19631: IFFALSE 19703
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19633: LD_INT 68
19635: PPUSH
19636: LD_VAR 0 1
19640: PPUSH
19641: CALL_OW 255
19645: PPUSH
19646: CALL_OW 321
19650: PUSH
19651: LD_INT 2
19653: EQUAL
19654: IFFALSE 19666
// eff := 70 else
19656: LD_ADDR_VAR 0 4
19660: PUSH
19661: LD_INT 70
19663: ST_TO_ADDR
19664: GO 19674
// eff := 30 ;
19666: LD_ADDR_VAR 0 4
19670: PUSH
19671: LD_INT 30
19673: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19674: LD_VAR 0 1
19678: PPUSH
19679: CALL_OW 250
19683: PPUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 251
19693: PPUSH
19694: LD_VAR 0 4
19698: PPUSH
19699: CALL_OW 495
// end ; end ;
19703: LD_VAR 0 2
19707: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19708: LD_INT 0
19710: PPUSH
// end ;
19711: LD_VAR 0 4
19715: RET
// export function SOS_Command ( cmd ) ; begin
19716: LD_INT 0
19718: PPUSH
// end ;
19719: LD_VAR 0 2
19723: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19724: LD_INT 0
19726: PPUSH
// end ;
19727: LD_VAR 0 6
19731: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19732: LD_INT 0
19734: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19735: LD_VAR 0 1
19739: PUSH
19740: LD_INT 250
19742: EQUAL
19743: PUSH
19744: LD_VAR 0 2
19748: PPUSH
19749: CALL_OW 264
19753: PUSH
19754: LD_EXP 101
19758: EQUAL
19759: AND
19760: IFFALSE 19781
// MinerPlaceMine ( unit , x , y ) ;
19762: LD_VAR 0 2
19766: PPUSH
19767: LD_VAR 0 4
19771: PPUSH
19772: LD_VAR 0 5
19776: PPUSH
19777: CALL 22130 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19781: LD_VAR 0 1
19785: PUSH
19786: LD_INT 251
19788: EQUAL
19789: PUSH
19790: LD_VAR 0 2
19794: PPUSH
19795: CALL_OW 264
19799: PUSH
19800: LD_EXP 101
19804: EQUAL
19805: AND
19806: IFFALSE 19827
// MinerDetonateMine ( unit , x , y ) ;
19808: LD_VAR 0 2
19812: PPUSH
19813: LD_VAR 0 4
19817: PPUSH
19818: LD_VAR 0 5
19822: PPUSH
19823: CALL 22407 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19827: LD_VAR 0 1
19831: PUSH
19832: LD_INT 252
19834: EQUAL
19835: PUSH
19836: LD_VAR 0 2
19840: PPUSH
19841: CALL_OW 264
19845: PUSH
19846: LD_EXP 101
19850: EQUAL
19851: AND
19852: IFFALSE 19873
// MinerCreateMinefield ( unit , x , y ) ;
19854: LD_VAR 0 2
19858: PPUSH
19859: LD_VAR 0 4
19863: PPUSH
19864: LD_VAR 0 5
19868: PPUSH
19869: CALL 22824 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19873: LD_VAR 0 1
19877: PUSH
19878: LD_INT 253
19880: EQUAL
19881: PUSH
19882: LD_VAR 0 2
19886: PPUSH
19887: CALL_OW 257
19891: PUSH
19892: LD_INT 5
19894: EQUAL
19895: AND
19896: IFFALSE 19917
// ComBinocular ( unit , x , y ) ;
19898: LD_VAR 0 2
19902: PPUSH
19903: LD_VAR 0 4
19907: PPUSH
19908: LD_VAR 0 5
19912: PPUSH
19913: CALL 23195 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19917: LD_VAR 0 1
19921: PUSH
19922: LD_INT 254
19924: EQUAL
19925: PUSH
19926: LD_VAR 0 2
19930: PPUSH
19931: CALL_OW 264
19935: PUSH
19936: LD_EXP 96
19940: EQUAL
19941: AND
19942: PUSH
19943: LD_VAR 0 3
19947: PPUSH
19948: CALL_OW 263
19952: PUSH
19953: LD_INT 3
19955: EQUAL
19956: AND
19957: IFFALSE 19973
// HackDestroyVehicle ( unit , selectedUnit ) ;
19959: LD_VAR 0 2
19963: PPUSH
19964: LD_VAR 0 3
19968: PPUSH
19969: CALL 21490 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19973: LD_VAR 0 1
19977: PUSH
19978: LD_INT 255
19980: EQUAL
19981: PUSH
19982: LD_VAR 0 2
19986: PPUSH
19987: CALL_OW 264
19991: PUSH
19992: LD_INT 14
19994: PUSH
19995: LD_INT 53
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: IN
20002: AND
20003: PUSH
20004: LD_VAR 0 4
20008: PPUSH
20009: LD_VAR 0 5
20013: PPUSH
20014: CALL_OW 488
20018: AND
20019: IFFALSE 20043
// CutTreeXYR ( unit , x , y , 12 ) ;
20021: LD_VAR 0 2
20025: PPUSH
20026: LD_VAR 0 4
20030: PPUSH
20031: LD_VAR 0 5
20035: PPUSH
20036: LD_INT 12
20038: PPUSH
20039: CALL 20056 0 4
// end ;
20043: LD_VAR 0 6
20047: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
20048: LD_INT 0
20050: PPUSH
// end ;
20051: LD_VAR 0 4
20055: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20056: LD_INT 0
20058: PPUSH
20059: PPUSH
20060: PPUSH
20061: PPUSH
20062: PPUSH
20063: PPUSH
20064: PPUSH
20065: PPUSH
20066: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20067: LD_VAR 0 1
20071: NOT
20072: PUSH
20073: LD_VAR 0 2
20077: PPUSH
20078: LD_VAR 0 3
20082: PPUSH
20083: CALL_OW 488
20087: NOT
20088: OR
20089: PUSH
20090: LD_VAR 0 4
20094: NOT
20095: OR
20096: IFFALSE 20100
// exit ;
20098: GO 20440
// list := [ ] ;
20100: LD_ADDR_VAR 0 13
20104: PUSH
20105: EMPTY
20106: ST_TO_ADDR
// if x - r < 0 then
20107: LD_VAR 0 2
20111: PUSH
20112: LD_VAR 0 4
20116: MINUS
20117: PUSH
20118: LD_INT 0
20120: LESS
20121: IFFALSE 20133
// min_x := 0 else
20123: LD_ADDR_VAR 0 7
20127: PUSH
20128: LD_INT 0
20130: ST_TO_ADDR
20131: GO 20149
// min_x := x - r ;
20133: LD_ADDR_VAR 0 7
20137: PUSH
20138: LD_VAR 0 2
20142: PUSH
20143: LD_VAR 0 4
20147: MINUS
20148: ST_TO_ADDR
// if y - r < 0 then
20149: LD_VAR 0 3
20153: PUSH
20154: LD_VAR 0 4
20158: MINUS
20159: PUSH
20160: LD_INT 0
20162: LESS
20163: IFFALSE 20175
// min_y := 0 else
20165: LD_ADDR_VAR 0 8
20169: PUSH
20170: LD_INT 0
20172: ST_TO_ADDR
20173: GO 20191
// min_y := y - r ;
20175: LD_ADDR_VAR 0 8
20179: PUSH
20180: LD_VAR 0 3
20184: PUSH
20185: LD_VAR 0 4
20189: MINUS
20190: ST_TO_ADDR
// max_x := x + r ;
20191: LD_ADDR_VAR 0 9
20195: PUSH
20196: LD_VAR 0 2
20200: PUSH
20201: LD_VAR 0 4
20205: PLUS
20206: ST_TO_ADDR
// max_y := y + r ;
20207: LD_ADDR_VAR 0 10
20211: PUSH
20212: LD_VAR 0 3
20216: PUSH
20217: LD_VAR 0 4
20221: PLUS
20222: ST_TO_ADDR
// for _x = min_x to max_x do
20223: LD_ADDR_VAR 0 11
20227: PUSH
20228: DOUBLE
20229: LD_VAR 0 7
20233: DEC
20234: ST_TO_ADDR
20235: LD_VAR 0 9
20239: PUSH
20240: FOR_TO
20241: IFFALSE 20358
// for _y = min_y to max_y do
20243: LD_ADDR_VAR 0 12
20247: PUSH
20248: DOUBLE
20249: LD_VAR 0 8
20253: DEC
20254: ST_TO_ADDR
20255: LD_VAR 0 10
20259: PUSH
20260: FOR_TO
20261: IFFALSE 20354
// begin if not ValidHex ( _x , _y ) then
20263: LD_VAR 0 11
20267: PPUSH
20268: LD_VAR 0 12
20272: PPUSH
20273: CALL_OW 488
20277: NOT
20278: IFFALSE 20282
// continue ;
20280: GO 20260
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20282: LD_VAR 0 11
20286: PPUSH
20287: LD_VAR 0 12
20291: PPUSH
20292: CALL_OW 351
20296: PUSH
20297: LD_VAR 0 11
20301: PPUSH
20302: LD_VAR 0 12
20306: PPUSH
20307: CALL_OW 554
20311: AND
20312: IFFALSE 20352
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20314: LD_ADDR_VAR 0 13
20318: PUSH
20319: LD_VAR 0 13
20323: PPUSH
20324: LD_VAR 0 13
20328: PUSH
20329: LD_INT 1
20331: PLUS
20332: PPUSH
20333: LD_VAR 0 11
20337: PUSH
20338: LD_VAR 0 12
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PPUSH
20347: CALL_OW 2
20351: ST_TO_ADDR
// end ;
20352: GO 20260
20354: POP
20355: POP
20356: GO 20240
20358: POP
20359: POP
// if not list then
20360: LD_VAR 0 13
20364: NOT
20365: IFFALSE 20369
// exit ;
20367: GO 20440
// for i in list do
20369: LD_ADDR_VAR 0 6
20373: PUSH
20374: LD_VAR 0 13
20378: PUSH
20379: FOR_IN
20380: IFFALSE 20438
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20382: LD_VAR 0 1
20386: PPUSH
20387: LD_STRING M
20389: PUSH
20390: LD_VAR 0 6
20394: PUSH
20395: LD_INT 1
20397: ARRAY
20398: PUSH
20399: LD_VAR 0 6
20403: PUSH
20404: LD_INT 2
20406: ARRAY
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: LD_INT 0
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: PUSH
20429: EMPTY
20430: LIST
20431: PPUSH
20432: CALL_OW 447
20436: GO 20379
20438: POP
20439: POP
// end ;
20440: LD_VAR 0 5
20444: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20445: LD_EXP 84
20449: NOT
20450: IFFALSE 20500
20452: GO 20454
20454: DISABLE
// begin initHack := true ;
20455: LD_ADDR_EXP 84
20459: PUSH
20460: LD_INT 1
20462: ST_TO_ADDR
// hackTanks := [ ] ;
20463: LD_ADDR_EXP 85
20467: PUSH
20468: EMPTY
20469: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20470: LD_ADDR_EXP 86
20474: PUSH
20475: EMPTY
20476: ST_TO_ADDR
// hackLimit := 3 ;
20477: LD_ADDR_EXP 87
20481: PUSH
20482: LD_INT 3
20484: ST_TO_ADDR
// hackDist := 12 ;
20485: LD_ADDR_EXP 88
20489: PUSH
20490: LD_INT 12
20492: ST_TO_ADDR
// hackCounter := [ ] ;
20493: LD_ADDR_EXP 89
20497: PUSH
20498: EMPTY
20499: ST_TO_ADDR
// end ;
20500: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20501: LD_EXP 84
20505: PUSH
20506: LD_INT 34
20508: PUSH
20509: LD_EXP 96
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PPUSH
20518: CALL_OW 69
20522: AND
20523: IFFALSE 20778
20525: GO 20527
20527: DISABLE
20528: LD_INT 0
20530: PPUSH
20531: PPUSH
// begin enable ;
20532: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20533: LD_ADDR_VAR 0 1
20537: PUSH
20538: LD_INT 34
20540: PUSH
20541: LD_EXP 96
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PPUSH
20550: CALL_OW 69
20554: PUSH
20555: FOR_IN
20556: IFFALSE 20776
// begin if not i in hackTanks then
20558: LD_VAR 0 1
20562: PUSH
20563: LD_EXP 85
20567: IN
20568: NOT
20569: IFFALSE 20652
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20571: LD_ADDR_EXP 85
20575: PUSH
20576: LD_EXP 85
20580: PPUSH
20581: LD_EXP 85
20585: PUSH
20586: LD_INT 1
20588: PLUS
20589: PPUSH
20590: LD_VAR 0 1
20594: PPUSH
20595: CALL_OW 1
20599: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20600: LD_ADDR_EXP 86
20604: PUSH
20605: LD_EXP 86
20609: PPUSH
20610: LD_EXP 86
20614: PUSH
20615: LD_INT 1
20617: PLUS
20618: PPUSH
20619: EMPTY
20620: PPUSH
20621: CALL_OW 1
20625: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20626: LD_ADDR_EXP 89
20630: PUSH
20631: LD_EXP 89
20635: PPUSH
20636: LD_EXP 89
20640: PUSH
20641: LD_INT 1
20643: PLUS
20644: PPUSH
20645: EMPTY
20646: PPUSH
20647: CALL_OW 1
20651: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20652: LD_VAR 0 1
20656: PPUSH
20657: CALL_OW 302
20661: NOT
20662: IFFALSE 20675
// begin HackUnlinkAll ( i ) ;
20664: LD_VAR 0 1
20668: PPUSH
20669: CALL 20781 0 1
// continue ;
20673: GO 20555
// end ; HackCheckCapturedStatus ( i ) ;
20675: LD_VAR 0 1
20679: PPUSH
20680: CALL 21224 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20684: LD_ADDR_VAR 0 2
20688: PUSH
20689: LD_INT 81
20691: PUSH
20692: LD_VAR 0 1
20696: PPUSH
20697: CALL_OW 255
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 33
20708: PUSH
20709: LD_INT 3
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 91
20718: PUSH
20719: LD_VAR 0 1
20723: PUSH
20724: LD_EXP 88
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 50
20736: PUSH
20737: EMPTY
20738: LIST
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: PPUSH
20746: CALL_OW 69
20750: ST_TO_ADDR
// if not tmp then
20751: LD_VAR 0 2
20755: NOT
20756: IFFALSE 20760
// continue ;
20758: GO 20555
// HackLink ( i , tmp ) ;
20760: LD_VAR 0 1
20764: PPUSH
20765: LD_VAR 0 2
20769: PPUSH
20770: CALL 20917 0 2
// end ;
20774: GO 20555
20776: POP
20777: POP
// end ;
20778: PPOPN 2
20780: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20781: LD_INT 0
20783: PPUSH
20784: PPUSH
20785: PPUSH
// if not hack in hackTanks then
20786: LD_VAR 0 1
20790: PUSH
20791: LD_EXP 85
20795: IN
20796: NOT
20797: IFFALSE 20801
// exit ;
20799: GO 20912
// index := GetElementIndex ( hackTanks , hack ) ;
20801: LD_ADDR_VAR 0 4
20805: PUSH
20806: LD_EXP 85
20810: PPUSH
20811: LD_VAR 0 1
20815: PPUSH
20816: CALL 28554 0 2
20820: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20821: LD_EXP 86
20825: PUSH
20826: LD_VAR 0 4
20830: ARRAY
20831: IFFALSE 20912
// begin for i in hackTanksCaptured [ index ] do
20833: LD_ADDR_VAR 0 3
20837: PUSH
20838: LD_EXP 86
20842: PUSH
20843: LD_VAR 0 4
20847: ARRAY
20848: PUSH
20849: FOR_IN
20850: IFFALSE 20876
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20852: LD_VAR 0 3
20856: PUSH
20857: LD_INT 1
20859: ARRAY
20860: PPUSH
20861: LD_VAR 0 3
20865: PUSH
20866: LD_INT 2
20868: ARRAY
20869: PPUSH
20870: CALL_OW 235
20874: GO 20849
20876: POP
20877: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20878: LD_ADDR_EXP 86
20882: PUSH
20883: LD_EXP 86
20887: PPUSH
20888: LD_VAR 0 4
20892: PPUSH
20893: EMPTY
20894: PPUSH
20895: CALL_OW 1
20899: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20900: LD_VAR 0 1
20904: PPUSH
20905: LD_INT 0
20907: PPUSH
20908: CALL_OW 505
// end ; end ;
20912: LD_VAR 0 2
20916: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20917: LD_INT 0
20919: PPUSH
20920: PPUSH
20921: PPUSH
// if not hack in hackTanks or not vehicles then
20922: LD_VAR 0 1
20926: PUSH
20927: LD_EXP 85
20931: IN
20932: NOT
20933: PUSH
20934: LD_VAR 0 2
20938: NOT
20939: OR
20940: IFFALSE 20944
// exit ;
20942: GO 21219
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20944: LD_ADDR_VAR 0 2
20948: PUSH
20949: LD_VAR 0 1
20953: PPUSH
20954: LD_VAR 0 2
20958: PPUSH
20959: LD_INT 1
20961: PPUSH
20962: LD_INT 1
20964: PPUSH
20965: CALL 29204 0 4
20969: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20970: LD_ADDR_VAR 0 5
20974: PUSH
20975: LD_EXP 85
20979: PPUSH
20980: LD_VAR 0 1
20984: PPUSH
20985: CALL 28554 0 2
20989: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20990: LD_EXP 86
20994: PUSH
20995: LD_VAR 0 5
20999: ARRAY
21000: PUSH
21001: LD_EXP 87
21005: LESS
21006: IFFALSE 21195
// begin for i := 1 to vehicles do
21008: LD_ADDR_VAR 0 4
21012: PUSH
21013: DOUBLE
21014: LD_INT 1
21016: DEC
21017: ST_TO_ADDR
21018: LD_VAR 0 2
21022: PUSH
21023: FOR_TO
21024: IFFALSE 21193
// begin if hackTanksCaptured [ index ] = hackLimit then
21026: LD_EXP 86
21030: PUSH
21031: LD_VAR 0 5
21035: ARRAY
21036: PUSH
21037: LD_EXP 87
21041: EQUAL
21042: IFFALSE 21046
// break ;
21044: GO 21193
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21046: LD_ADDR_EXP 89
21050: PUSH
21051: LD_EXP 89
21055: PPUSH
21056: LD_VAR 0 5
21060: PPUSH
21061: LD_EXP 89
21065: PUSH
21066: LD_VAR 0 5
21070: ARRAY
21071: PUSH
21072: LD_INT 1
21074: PLUS
21075: PPUSH
21076: CALL_OW 1
21080: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21081: LD_ADDR_EXP 86
21085: PUSH
21086: LD_EXP 86
21090: PPUSH
21091: LD_VAR 0 5
21095: PUSH
21096: LD_EXP 86
21100: PUSH
21101: LD_VAR 0 5
21105: ARRAY
21106: PUSH
21107: LD_INT 1
21109: PLUS
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PPUSH
21115: LD_VAR 0 2
21119: PUSH
21120: LD_VAR 0 4
21124: ARRAY
21125: PUSH
21126: LD_VAR 0 2
21130: PUSH
21131: LD_VAR 0 4
21135: ARRAY
21136: PPUSH
21137: CALL_OW 255
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PPUSH
21146: CALL 28769 0 3
21150: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21151: LD_VAR 0 2
21155: PUSH
21156: LD_VAR 0 4
21160: ARRAY
21161: PPUSH
21162: LD_VAR 0 1
21166: PPUSH
21167: CALL_OW 255
21171: PPUSH
21172: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21176: LD_VAR 0 2
21180: PUSH
21181: LD_VAR 0 4
21185: ARRAY
21186: PPUSH
21187: CALL_OW 141
// end ;
21191: GO 21023
21193: POP
21194: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21195: LD_VAR 0 1
21199: PPUSH
21200: LD_EXP 86
21204: PUSH
21205: LD_VAR 0 5
21209: ARRAY
21210: PUSH
21211: LD_INT 0
21213: PLUS
21214: PPUSH
21215: CALL_OW 505
// end ;
21219: LD_VAR 0 3
21223: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21224: LD_INT 0
21226: PPUSH
21227: PPUSH
21228: PPUSH
21229: PPUSH
// if not hack in hackTanks then
21230: LD_VAR 0 1
21234: PUSH
21235: LD_EXP 85
21239: IN
21240: NOT
21241: IFFALSE 21245
// exit ;
21243: GO 21485
// index := GetElementIndex ( hackTanks , hack ) ;
21245: LD_ADDR_VAR 0 4
21249: PUSH
21250: LD_EXP 85
21254: PPUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL 28554 0 2
21264: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21265: LD_ADDR_VAR 0 3
21269: PUSH
21270: DOUBLE
21271: LD_EXP 86
21275: PUSH
21276: LD_VAR 0 4
21280: ARRAY
21281: INC
21282: ST_TO_ADDR
21283: LD_INT 1
21285: PUSH
21286: FOR_DOWNTO
21287: IFFALSE 21459
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21289: LD_ADDR_VAR 0 5
21293: PUSH
21294: LD_EXP 86
21298: PUSH
21299: LD_VAR 0 4
21303: ARRAY
21304: PUSH
21305: LD_VAR 0 3
21309: ARRAY
21310: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21311: LD_VAR 0 5
21315: PUSH
21316: LD_INT 1
21318: ARRAY
21319: PPUSH
21320: CALL_OW 302
21324: NOT
21325: PUSH
21326: LD_VAR 0 5
21330: PUSH
21331: LD_INT 1
21333: ARRAY
21334: PPUSH
21335: CALL_OW 255
21339: PUSH
21340: LD_VAR 0 1
21344: PPUSH
21345: CALL_OW 255
21349: NONEQUAL
21350: OR
21351: IFFALSE 21457
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21353: LD_VAR 0 5
21357: PUSH
21358: LD_INT 1
21360: ARRAY
21361: PPUSH
21362: CALL_OW 305
21366: PUSH
21367: LD_VAR 0 5
21371: PUSH
21372: LD_INT 1
21374: ARRAY
21375: PPUSH
21376: CALL_OW 255
21380: PUSH
21381: LD_VAR 0 1
21385: PPUSH
21386: CALL_OW 255
21390: EQUAL
21391: AND
21392: IFFALSE 21416
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21394: LD_VAR 0 5
21398: PUSH
21399: LD_INT 1
21401: ARRAY
21402: PPUSH
21403: LD_VAR 0 5
21407: PUSH
21408: LD_INT 2
21410: ARRAY
21411: PPUSH
21412: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21416: LD_ADDR_EXP 86
21420: PUSH
21421: LD_EXP 86
21425: PPUSH
21426: LD_VAR 0 4
21430: PPUSH
21431: LD_EXP 86
21435: PUSH
21436: LD_VAR 0 4
21440: ARRAY
21441: PPUSH
21442: LD_VAR 0 3
21446: PPUSH
21447: CALL_OW 3
21451: PPUSH
21452: CALL_OW 1
21456: ST_TO_ADDR
// end ; end ;
21457: GO 21286
21459: POP
21460: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21461: LD_VAR 0 1
21465: PPUSH
21466: LD_EXP 86
21470: PUSH
21471: LD_VAR 0 4
21475: ARRAY
21476: PUSH
21477: LD_INT 0
21479: PLUS
21480: PPUSH
21481: CALL_OW 505
// end ;
21485: LD_VAR 0 2
21489: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21490: LD_INT 0
21492: PPUSH
21493: PPUSH
21494: PPUSH
21495: PPUSH
// if not hack in hackTanks then
21496: LD_VAR 0 1
21500: PUSH
21501: LD_EXP 85
21505: IN
21506: NOT
21507: IFFALSE 21511
// exit ;
21509: GO 21596
// index := GetElementIndex ( hackTanks , hack ) ;
21511: LD_ADDR_VAR 0 5
21515: PUSH
21516: LD_EXP 85
21520: PPUSH
21521: LD_VAR 0 1
21525: PPUSH
21526: CALL 28554 0 2
21530: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21531: LD_ADDR_VAR 0 4
21535: PUSH
21536: DOUBLE
21537: LD_INT 1
21539: DEC
21540: ST_TO_ADDR
21541: LD_EXP 86
21545: PUSH
21546: LD_VAR 0 5
21550: ARRAY
21551: PUSH
21552: FOR_TO
21553: IFFALSE 21594
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21555: LD_EXP 86
21559: PUSH
21560: LD_VAR 0 5
21564: ARRAY
21565: PUSH
21566: LD_VAR 0 4
21570: ARRAY
21571: PUSH
21572: LD_INT 1
21574: ARRAY
21575: PUSH
21576: LD_VAR 0 2
21580: EQUAL
21581: IFFALSE 21592
// KillUnit ( vehicle ) ;
21583: LD_VAR 0 2
21587: PPUSH
21588: CALL_OW 66
21592: GO 21552
21594: POP
21595: POP
// end ;
21596: LD_VAR 0 3
21600: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21601: LD_EXP 90
21605: NOT
21606: IFFALSE 21641
21608: GO 21610
21610: DISABLE
// begin initMiner := true ;
21611: LD_ADDR_EXP 90
21615: PUSH
21616: LD_INT 1
21618: ST_TO_ADDR
// minersList := [ ] ;
21619: LD_ADDR_EXP 91
21623: PUSH
21624: EMPTY
21625: ST_TO_ADDR
// minerMinesList := [ ] ;
21626: LD_ADDR_EXP 92
21630: PUSH
21631: EMPTY
21632: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21633: LD_ADDR_EXP 93
21637: PUSH
21638: LD_INT 5
21640: ST_TO_ADDR
// end ;
21641: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21642: LD_EXP 90
21646: PUSH
21647: LD_INT 34
21649: PUSH
21650: LD_EXP 101
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PPUSH
21659: CALL_OW 69
21663: AND
21664: IFFALSE 22127
21666: GO 21668
21668: DISABLE
21669: LD_INT 0
21671: PPUSH
21672: PPUSH
21673: PPUSH
21674: PPUSH
// begin enable ;
21675: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21676: LD_ADDR_VAR 0 1
21680: PUSH
21681: LD_INT 34
21683: PUSH
21684: LD_EXP 101
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PPUSH
21693: CALL_OW 69
21697: PUSH
21698: FOR_IN
21699: IFFALSE 21771
// begin if not i in minersList then
21701: LD_VAR 0 1
21705: PUSH
21706: LD_EXP 91
21710: IN
21711: NOT
21712: IFFALSE 21769
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21714: LD_ADDR_EXP 91
21718: PUSH
21719: LD_EXP 91
21723: PPUSH
21724: LD_EXP 91
21728: PUSH
21729: LD_INT 1
21731: PLUS
21732: PPUSH
21733: LD_VAR 0 1
21737: PPUSH
21738: CALL_OW 1
21742: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21743: LD_ADDR_EXP 92
21747: PUSH
21748: LD_EXP 92
21752: PPUSH
21753: LD_EXP 92
21757: PUSH
21758: LD_INT 1
21760: PLUS
21761: PPUSH
21762: EMPTY
21763: PPUSH
21764: CALL_OW 1
21768: ST_TO_ADDR
// end end ;
21769: GO 21698
21771: POP
21772: POP
// for i := minerMinesList downto 1 do
21773: LD_ADDR_VAR 0 1
21777: PUSH
21778: DOUBLE
21779: LD_EXP 92
21783: INC
21784: ST_TO_ADDR
21785: LD_INT 1
21787: PUSH
21788: FOR_DOWNTO
21789: IFFALSE 22125
// begin if IsLive ( minersList [ i ] ) then
21791: LD_EXP 91
21795: PUSH
21796: LD_VAR 0 1
21800: ARRAY
21801: PPUSH
21802: CALL_OW 300
21806: IFFALSE 21834
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21808: LD_EXP 91
21812: PUSH
21813: LD_VAR 0 1
21817: ARRAY
21818: PPUSH
21819: LD_EXP 92
21823: PUSH
21824: LD_VAR 0 1
21828: ARRAY
21829: PPUSH
21830: CALL_OW 505
// if not minerMinesList [ i ] then
21834: LD_EXP 92
21838: PUSH
21839: LD_VAR 0 1
21843: ARRAY
21844: NOT
21845: IFFALSE 21849
// continue ;
21847: GO 21788
// for j := minerMinesList [ i ] downto 1 do
21849: LD_ADDR_VAR 0 2
21853: PUSH
21854: DOUBLE
21855: LD_EXP 92
21859: PUSH
21860: LD_VAR 0 1
21864: ARRAY
21865: INC
21866: ST_TO_ADDR
21867: LD_INT 1
21869: PUSH
21870: FOR_DOWNTO
21871: IFFALSE 22121
// begin side := GetSide ( minersList [ i ] ) ;
21873: LD_ADDR_VAR 0 3
21877: PUSH
21878: LD_EXP 91
21882: PUSH
21883: LD_VAR 0 1
21887: ARRAY
21888: PPUSH
21889: CALL_OW 255
21893: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21894: LD_ADDR_VAR 0 4
21898: PUSH
21899: LD_EXP 92
21903: PUSH
21904: LD_VAR 0 1
21908: ARRAY
21909: PUSH
21910: LD_VAR 0 2
21914: ARRAY
21915: PUSH
21916: LD_INT 1
21918: ARRAY
21919: PPUSH
21920: LD_EXP 92
21924: PUSH
21925: LD_VAR 0 1
21929: ARRAY
21930: PUSH
21931: LD_VAR 0 2
21935: ARRAY
21936: PUSH
21937: LD_INT 2
21939: ARRAY
21940: PPUSH
21941: CALL_OW 428
21945: ST_TO_ADDR
// if not tmp then
21946: LD_VAR 0 4
21950: NOT
21951: IFFALSE 21955
// continue ;
21953: GO 21870
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21955: LD_VAR 0 4
21959: PUSH
21960: LD_INT 81
21962: PUSH
21963: LD_VAR 0 3
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PPUSH
21972: CALL_OW 69
21976: IN
21977: PUSH
21978: LD_EXP 92
21982: PUSH
21983: LD_VAR 0 1
21987: ARRAY
21988: PUSH
21989: LD_VAR 0 2
21993: ARRAY
21994: PUSH
21995: LD_INT 1
21997: ARRAY
21998: PPUSH
21999: LD_EXP 92
22003: PUSH
22004: LD_VAR 0 1
22008: ARRAY
22009: PUSH
22010: LD_VAR 0 2
22014: ARRAY
22015: PUSH
22016: LD_INT 2
22018: ARRAY
22019: PPUSH
22020: CALL_OW 458
22024: AND
22025: IFFALSE 22119
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22027: LD_EXP 92
22031: PUSH
22032: LD_VAR 0 1
22036: ARRAY
22037: PUSH
22038: LD_VAR 0 2
22042: ARRAY
22043: PUSH
22044: LD_INT 1
22046: ARRAY
22047: PPUSH
22048: LD_EXP 92
22052: PUSH
22053: LD_VAR 0 1
22057: ARRAY
22058: PUSH
22059: LD_VAR 0 2
22063: ARRAY
22064: PUSH
22065: LD_INT 2
22067: ARRAY
22068: PPUSH
22069: LD_VAR 0 3
22073: PPUSH
22074: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22078: LD_ADDR_EXP 92
22082: PUSH
22083: LD_EXP 92
22087: PPUSH
22088: LD_VAR 0 1
22092: PPUSH
22093: LD_EXP 92
22097: PUSH
22098: LD_VAR 0 1
22102: ARRAY
22103: PPUSH
22104: LD_VAR 0 2
22108: PPUSH
22109: CALL_OW 3
22113: PPUSH
22114: CALL_OW 1
22118: ST_TO_ADDR
// end ; end ;
22119: GO 21870
22121: POP
22122: POP
// end ;
22123: GO 21788
22125: POP
22126: POP
// end ;
22127: PPOPN 4
22129: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22130: LD_INT 0
22132: PPUSH
22133: PPUSH
// result := false ;
22134: LD_ADDR_VAR 0 4
22138: PUSH
22139: LD_INT 0
22141: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22142: LD_VAR 0 1
22146: PPUSH
22147: CALL_OW 264
22151: PUSH
22152: LD_EXP 101
22156: EQUAL
22157: NOT
22158: IFFALSE 22162
// exit ;
22160: GO 22402
// index := GetElementIndex ( minersList , unit ) ;
22162: LD_ADDR_VAR 0 5
22166: PUSH
22167: LD_EXP 91
22171: PPUSH
22172: LD_VAR 0 1
22176: PPUSH
22177: CALL 28554 0 2
22181: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22182: LD_EXP 92
22186: PUSH
22187: LD_VAR 0 5
22191: ARRAY
22192: PUSH
22193: LD_EXP 93
22197: GREATEREQUAL
22198: IFFALSE 22202
// exit ;
22200: GO 22402
// ComMoveXY ( unit , x , y ) ;
22202: LD_VAR 0 1
22206: PPUSH
22207: LD_VAR 0 2
22211: PPUSH
22212: LD_VAR 0 3
22216: PPUSH
22217: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22221: LD_INT 35
22223: PPUSH
22224: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22228: LD_VAR 0 1
22232: PPUSH
22233: LD_VAR 0 2
22237: PPUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: CALL 59326 0 3
22247: NOT
22248: PUSH
22249: LD_VAR 0 1
22253: PPUSH
22254: CALL_OW 314
22258: AND
22259: IFFALSE 22263
// exit ;
22261: GO 22402
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22263: LD_VAR 0 2
22267: PPUSH
22268: LD_VAR 0 3
22272: PPUSH
22273: CALL_OW 428
22277: PUSH
22278: LD_VAR 0 1
22282: EQUAL
22283: PUSH
22284: LD_VAR 0 1
22288: PPUSH
22289: CALL_OW 314
22293: NOT
22294: AND
22295: IFFALSE 22221
// PlaySoundXY ( x , y , PlantMine ) ;
22297: LD_VAR 0 2
22301: PPUSH
22302: LD_VAR 0 3
22306: PPUSH
22307: LD_STRING PlantMine
22309: PPUSH
22310: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22314: LD_VAR 0 2
22318: PPUSH
22319: LD_VAR 0 3
22323: PPUSH
22324: LD_VAR 0 1
22328: PPUSH
22329: CALL_OW 255
22333: PPUSH
22334: LD_INT 0
22336: PPUSH
22337: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22341: LD_ADDR_EXP 92
22345: PUSH
22346: LD_EXP 92
22350: PPUSH
22351: LD_VAR 0 5
22355: PUSH
22356: LD_EXP 92
22360: PUSH
22361: LD_VAR 0 5
22365: ARRAY
22366: PUSH
22367: LD_INT 1
22369: PLUS
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PPUSH
22375: LD_VAR 0 2
22379: PUSH
22380: LD_VAR 0 3
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PPUSH
22389: CALL 28769 0 3
22393: ST_TO_ADDR
// result := true ;
22394: LD_ADDR_VAR 0 4
22398: PUSH
22399: LD_INT 1
22401: ST_TO_ADDR
// end ;
22402: LD_VAR 0 4
22406: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22407: LD_INT 0
22409: PPUSH
22410: PPUSH
22411: PPUSH
// if not unit in minersList then
22412: LD_VAR 0 1
22416: PUSH
22417: LD_EXP 91
22421: IN
22422: NOT
22423: IFFALSE 22427
// exit ;
22425: GO 22819
// index := GetElementIndex ( minersList , unit ) ;
22427: LD_ADDR_VAR 0 6
22431: PUSH
22432: LD_EXP 91
22436: PPUSH
22437: LD_VAR 0 1
22441: PPUSH
22442: CALL 28554 0 2
22446: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22447: LD_ADDR_VAR 0 5
22451: PUSH
22452: DOUBLE
22453: LD_EXP 92
22457: PUSH
22458: LD_VAR 0 6
22462: ARRAY
22463: INC
22464: ST_TO_ADDR
22465: LD_INT 1
22467: PUSH
22468: FOR_DOWNTO
22469: IFFALSE 22630
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22471: LD_EXP 92
22475: PUSH
22476: LD_VAR 0 6
22480: ARRAY
22481: PUSH
22482: LD_VAR 0 5
22486: ARRAY
22487: PUSH
22488: LD_INT 1
22490: ARRAY
22491: PUSH
22492: LD_VAR 0 2
22496: EQUAL
22497: PUSH
22498: LD_EXP 92
22502: PUSH
22503: LD_VAR 0 6
22507: ARRAY
22508: PUSH
22509: LD_VAR 0 5
22513: ARRAY
22514: PUSH
22515: LD_INT 2
22517: ARRAY
22518: PUSH
22519: LD_VAR 0 3
22523: EQUAL
22524: AND
22525: IFFALSE 22628
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22527: LD_EXP 92
22531: PUSH
22532: LD_VAR 0 6
22536: ARRAY
22537: PUSH
22538: LD_VAR 0 5
22542: ARRAY
22543: PUSH
22544: LD_INT 1
22546: ARRAY
22547: PPUSH
22548: LD_EXP 92
22552: PUSH
22553: LD_VAR 0 6
22557: ARRAY
22558: PUSH
22559: LD_VAR 0 5
22563: ARRAY
22564: PUSH
22565: LD_INT 2
22567: ARRAY
22568: PPUSH
22569: LD_VAR 0 1
22573: PPUSH
22574: CALL_OW 255
22578: PPUSH
22579: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22583: LD_ADDR_EXP 92
22587: PUSH
22588: LD_EXP 92
22592: PPUSH
22593: LD_VAR 0 6
22597: PPUSH
22598: LD_EXP 92
22602: PUSH
22603: LD_VAR 0 6
22607: ARRAY
22608: PPUSH
22609: LD_VAR 0 5
22613: PPUSH
22614: CALL_OW 3
22618: PPUSH
22619: CALL_OW 1
22623: ST_TO_ADDR
// exit ;
22624: POP
22625: POP
22626: GO 22819
// end ; end ;
22628: GO 22468
22630: POP
22631: POP
// for i := minerMinesList [ index ] downto 1 do
22632: LD_ADDR_VAR 0 5
22636: PUSH
22637: DOUBLE
22638: LD_EXP 92
22642: PUSH
22643: LD_VAR 0 6
22647: ARRAY
22648: INC
22649: ST_TO_ADDR
22650: LD_INT 1
22652: PUSH
22653: FOR_DOWNTO
22654: IFFALSE 22817
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22656: LD_EXP 92
22660: PUSH
22661: LD_VAR 0 6
22665: ARRAY
22666: PUSH
22667: LD_VAR 0 5
22671: ARRAY
22672: PUSH
22673: LD_INT 1
22675: ARRAY
22676: PPUSH
22677: LD_EXP 92
22681: PUSH
22682: LD_VAR 0 6
22686: ARRAY
22687: PUSH
22688: LD_VAR 0 5
22692: ARRAY
22693: PUSH
22694: LD_INT 2
22696: ARRAY
22697: PPUSH
22698: LD_VAR 0 2
22702: PPUSH
22703: LD_VAR 0 3
22707: PPUSH
22708: CALL_OW 298
22712: PUSH
22713: LD_INT 6
22715: LESS
22716: IFFALSE 22815
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22718: LD_EXP 92
22722: PUSH
22723: LD_VAR 0 6
22727: ARRAY
22728: PUSH
22729: LD_VAR 0 5
22733: ARRAY
22734: PUSH
22735: LD_INT 1
22737: ARRAY
22738: PPUSH
22739: LD_EXP 92
22743: PUSH
22744: LD_VAR 0 6
22748: ARRAY
22749: PUSH
22750: LD_VAR 0 5
22754: ARRAY
22755: PUSH
22756: LD_INT 2
22758: ARRAY
22759: PPUSH
22760: LD_VAR 0 1
22764: PPUSH
22765: CALL_OW 255
22769: PPUSH
22770: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22774: LD_ADDR_EXP 92
22778: PUSH
22779: LD_EXP 92
22783: PPUSH
22784: LD_VAR 0 6
22788: PPUSH
22789: LD_EXP 92
22793: PUSH
22794: LD_VAR 0 6
22798: ARRAY
22799: PPUSH
22800: LD_VAR 0 5
22804: PPUSH
22805: CALL_OW 3
22809: PPUSH
22810: CALL_OW 1
22814: ST_TO_ADDR
// end ; end ;
22815: GO 22653
22817: POP
22818: POP
// end ;
22819: LD_VAR 0 4
22823: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22824: LD_INT 0
22826: PPUSH
22827: PPUSH
22828: PPUSH
22829: PPUSH
22830: PPUSH
22831: PPUSH
22832: PPUSH
22833: PPUSH
22834: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22835: LD_VAR 0 1
22839: PPUSH
22840: CALL_OW 264
22844: PUSH
22845: LD_EXP 101
22849: EQUAL
22850: NOT
22851: PUSH
22852: LD_VAR 0 1
22856: PUSH
22857: LD_EXP 91
22861: IN
22862: NOT
22863: OR
22864: IFFALSE 22868
// exit ;
22866: GO 23190
// index := GetElementIndex ( minersList , unit ) ;
22868: LD_ADDR_VAR 0 6
22872: PUSH
22873: LD_EXP 91
22877: PPUSH
22878: LD_VAR 0 1
22882: PPUSH
22883: CALL 28554 0 2
22887: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22888: LD_ADDR_VAR 0 8
22892: PUSH
22893: LD_EXP 93
22897: PUSH
22898: LD_EXP 92
22902: PUSH
22903: LD_VAR 0 6
22907: ARRAY
22908: MINUS
22909: ST_TO_ADDR
// if not minesFreeAmount then
22910: LD_VAR 0 8
22914: NOT
22915: IFFALSE 22919
// exit ;
22917: GO 23190
// tmp := [ ] ;
22919: LD_ADDR_VAR 0 7
22923: PUSH
22924: EMPTY
22925: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22926: LD_ADDR_VAR 0 5
22930: PUSH
22931: DOUBLE
22932: LD_INT 1
22934: DEC
22935: ST_TO_ADDR
22936: LD_VAR 0 8
22940: PUSH
22941: FOR_TO
22942: IFFALSE 23137
// begin _d := rand ( 0 , 5 ) ;
22944: LD_ADDR_VAR 0 11
22948: PUSH
22949: LD_INT 0
22951: PPUSH
22952: LD_INT 5
22954: PPUSH
22955: CALL_OW 12
22959: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22960: LD_ADDR_VAR 0 12
22964: PUSH
22965: LD_INT 2
22967: PPUSH
22968: LD_INT 6
22970: PPUSH
22971: CALL_OW 12
22975: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22976: LD_ADDR_VAR 0 9
22980: PUSH
22981: LD_VAR 0 2
22985: PPUSH
22986: LD_VAR 0 11
22990: PPUSH
22991: LD_VAR 0 12
22995: PPUSH
22996: CALL_OW 272
23000: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23001: LD_ADDR_VAR 0 10
23005: PUSH
23006: LD_VAR 0 3
23010: PPUSH
23011: LD_VAR 0 11
23015: PPUSH
23016: LD_VAR 0 12
23020: PPUSH
23021: CALL_OW 273
23025: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23026: LD_VAR 0 9
23030: PPUSH
23031: LD_VAR 0 10
23035: PPUSH
23036: CALL_OW 488
23040: PUSH
23041: LD_VAR 0 9
23045: PUSH
23046: LD_VAR 0 10
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_VAR 0 7
23059: IN
23060: NOT
23061: AND
23062: PUSH
23063: LD_VAR 0 9
23067: PPUSH
23068: LD_VAR 0 10
23072: PPUSH
23073: CALL_OW 458
23077: NOT
23078: AND
23079: IFFALSE 23121
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23081: LD_ADDR_VAR 0 7
23085: PUSH
23086: LD_VAR 0 7
23090: PPUSH
23091: LD_VAR 0 7
23095: PUSH
23096: LD_INT 1
23098: PLUS
23099: PPUSH
23100: LD_VAR 0 9
23104: PUSH
23105: LD_VAR 0 10
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PPUSH
23114: CALL_OW 1
23118: ST_TO_ADDR
23119: GO 23135
// i := i - 1 ;
23121: LD_ADDR_VAR 0 5
23125: PUSH
23126: LD_VAR 0 5
23130: PUSH
23131: LD_INT 1
23133: MINUS
23134: ST_TO_ADDR
// end ;
23135: GO 22941
23137: POP
23138: POP
// for i in tmp do
23139: LD_ADDR_VAR 0 5
23143: PUSH
23144: LD_VAR 0 7
23148: PUSH
23149: FOR_IN
23150: IFFALSE 23188
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23152: LD_VAR 0 1
23156: PPUSH
23157: LD_VAR 0 5
23161: PUSH
23162: LD_INT 1
23164: ARRAY
23165: PPUSH
23166: LD_VAR 0 5
23170: PUSH
23171: LD_INT 2
23173: ARRAY
23174: PPUSH
23175: CALL 22130 0 3
23179: NOT
23180: IFFALSE 23186
// exit ;
23182: POP
23183: POP
23184: GO 23190
23186: GO 23149
23188: POP
23189: POP
// end ;
23190: LD_VAR 0 4
23194: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23195: LD_INT 0
23197: PPUSH
23198: PPUSH
23199: PPUSH
23200: PPUSH
23201: PPUSH
23202: PPUSH
23203: PPUSH
// if not GetClass ( unit ) = class_sniper then
23204: LD_VAR 0 1
23208: PPUSH
23209: CALL_OW 257
23213: PUSH
23214: LD_INT 5
23216: EQUAL
23217: NOT
23218: IFFALSE 23222
// exit ;
23220: GO 23610
// dist := 8 ;
23222: LD_ADDR_VAR 0 5
23226: PUSH
23227: LD_INT 8
23229: ST_TO_ADDR
// viewRange := 12 ;
23230: LD_ADDR_VAR 0 7
23234: PUSH
23235: LD_INT 12
23237: ST_TO_ADDR
// side := GetSide ( unit ) ;
23238: LD_ADDR_VAR 0 6
23242: PUSH
23243: LD_VAR 0 1
23247: PPUSH
23248: CALL_OW 255
23252: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23253: LD_INT 61
23255: PPUSH
23256: LD_VAR 0 6
23260: PPUSH
23261: CALL_OW 321
23265: PUSH
23266: LD_INT 2
23268: EQUAL
23269: IFFALSE 23279
// viewRange := 16 ;
23271: LD_ADDR_VAR 0 7
23275: PUSH
23276: LD_INT 16
23278: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23279: LD_VAR 0 1
23283: PPUSH
23284: LD_VAR 0 2
23288: PPUSH
23289: LD_VAR 0 3
23293: PPUSH
23294: CALL_OW 297
23298: PUSH
23299: LD_VAR 0 5
23303: GREATER
23304: IFFALSE 23383
// begin ComMoveXY ( unit , x , y ) ;
23306: LD_VAR 0 1
23310: PPUSH
23311: LD_VAR 0 2
23315: PPUSH
23316: LD_VAR 0 3
23320: PPUSH
23321: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23325: LD_INT 35
23327: PPUSH
23328: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23332: LD_VAR 0 1
23336: PPUSH
23337: LD_VAR 0 2
23341: PPUSH
23342: LD_VAR 0 3
23346: PPUSH
23347: CALL 59326 0 3
23351: NOT
23352: IFFALSE 23356
// exit ;
23354: GO 23610
// until GetDistUnitXY ( unit , x , y ) < dist ;
23356: LD_VAR 0 1
23360: PPUSH
23361: LD_VAR 0 2
23365: PPUSH
23366: LD_VAR 0 3
23370: PPUSH
23371: CALL_OW 297
23375: PUSH
23376: LD_VAR 0 5
23380: LESS
23381: IFFALSE 23325
// end ; ComTurnXY ( unit , x , y ) ;
23383: LD_VAR 0 1
23387: PPUSH
23388: LD_VAR 0 2
23392: PPUSH
23393: LD_VAR 0 3
23397: PPUSH
23398: CALL_OW 118
// wait ( 5 ) ;
23402: LD_INT 5
23404: PPUSH
23405: CALL_OW 67
// _d := GetDir ( unit ) ;
23409: LD_ADDR_VAR 0 10
23413: PUSH
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 254
23423: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23424: LD_ADDR_VAR 0 8
23428: PUSH
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL_OW 250
23438: PPUSH
23439: LD_VAR 0 10
23443: PPUSH
23444: LD_VAR 0 5
23448: PPUSH
23449: CALL_OW 272
23453: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23454: LD_ADDR_VAR 0 9
23458: PUSH
23459: LD_VAR 0 1
23463: PPUSH
23464: CALL_OW 251
23468: PPUSH
23469: LD_VAR 0 10
23473: PPUSH
23474: LD_VAR 0 5
23478: PPUSH
23479: CALL_OW 273
23483: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23484: LD_VAR 0 8
23488: PPUSH
23489: LD_VAR 0 9
23493: PPUSH
23494: CALL_OW 488
23498: NOT
23499: IFFALSE 23503
// exit ;
23501: GO 23610
// ComAnimCustom ( unit , 1 ) ;
23503: LD_VAR 0 1
23507: PPUSH
23508: LD_INT 1
23510: PPUSH
23511: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23515: LD_VAR 0 8
23519: PPUSH
23520: LD_VAR 0 9
23524: PPUSH
23525: LD_VAR 0 6
23529: PPUSH
23530: LD_VAR 0 7
23534: PPUSH
23535: CALL_OW 330
// repeat wait ( 1 ) ;
23539: LD_INT 1
23541: PPUSH
23542: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23546: LD_VAR 0 1
23550: PPUSH
23551: CALL_OW 316
23555: PUSH
23556: LD_VAR 0 1
23560: PPUSH
23561: CALL_OW 314
23565: OR
23566: PUSH
23567: LD_VAR 0 1
23571: PPUSH
23572: CALL_OW 302
23576: NOT
23577: OR
23578: PUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: CALL_OW 301
23588: OR
23589: IFFALSE 23539
// RemoveSeeing ( _x , _y , side ) ;
23591: LD_VAR 0 8
23595: PPUSH
23596: LD_VAR 0 9
23600: PPUSH
23601: LD_VAR 0 6
23605: PPUSH
23606: CALL_OW 331
// end ; end_of_file
23610: LD_VAR 0 4
23614: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
23615: LD_INT 0
23617: PPUSH
// ar_miner := 81 ;
23618: LD_ADDR_EXP 101
23622: PUSH
23623: LD_INT 81
23625: ST_TO_ADDR
// ar_crane := 88 ;
23626: LD_ADDR_EXP 100
23630: PUSH
23631: LD_INT 88
23633: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23634: LD_ADDR_EXP 95
23638: PUSH
23639: LD_INT 89
23641: ST_TO_ADDR
// us_hack := 99 ;
23642: LD_ADDR_EXP 96
23646: PUSH
23647: LD_INT 99
23649: ST_TO_ADDR
// us_artillery := 97 ;
23650: LD_ADDR_EXP 97
23654: PUSH
23655: LD_INT 97
23657: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23658: LD_ADDR_EXP 98
23662: PUSH
23663: LD_INT 91
23665: ST_TO_ADDR
// ar_mortar := 92 ;
23666: LD_ADDR_EXP 99
23670: PUSH
23671: LD_INT 92
23673: ST_TO_ADDR
// ru_radar := 98 ;
23674: LD_ADDR_EXP 94
23678: PUSH
23679: LD_INT 98
23681: ST_TO_ADDR
// tech_Artillery := 80 ;
23682: LD_ADDR_EXP 102
23686: PUSH
23687: LD_INT 80
23689: ST_TO_ADDR
// tech_RadMat := 81 ;
23690: LD_ADDR_EXP 103
23694: PUSH
23695: LD_INT 81
23697: ST_TO_ADDR
// tech_BasicTools := 82 ;
23698: LD_ADDR_EXP 104
23702: PUSH
23703: LD_INT 82
23705: ST_TO_ADDR
// tech_Cargo := 83 ;
23706: LD_ADDR_EXP 105
23710: PUSH
23711: LD_INT 83
23713: ST_TO_ADDR
// tech_Track := 84 ;
23714: LD_ADDR_EXP 106
23718: PUSH
23719: LD_INT 84
23721: ST_TO_ADDR
// tech_Crane := 85 ;
23722: LD_ADDR_EXP 107
23726: PUSH
23727: LD_INT 85
23729: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23730: LD_ADDR_EXP 108
23734: PUSH
23735: LD_INT 86
23737: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23738: LD_ADDR_EXP 109
23742: PUSH
23743: LD_INT 87
23745: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
23746: LD_ADDR_EXP 110
23750: PUSH
23751: LD_INT 88
23753: ST_TO_ADDR
// class_mastodont := 31 ;
23754: LD_ADDR_EXP 111
23758: PUSH
23759: LD_INT 31
23761: ST_TO_ADDR
// class_horse := 21 ;
23762: LD_ADDR_EXP 112
23766: PUSH
23767: LD_INT 21
23769: ST_TO_ADDR
// end ;
23770: LD_VAR 0 1
23774: RET
// every 1 do
23775: GO 23777
23777: DISABLE
// InitGlobalVariables ; end_of_file
23778: CALL 23615 0 0
23782: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23783: LD_INT 0
23785: PPUSH
23786: PPUSH
// if exist_mode then
23787: LD_VAR 0 2
23791: IFFALSE 23816
// unit := CreateCharacter ( prefix & ident ) else
23793: LD_ADDR_VAR 0 5
23797: PUSH
23798: LD_VAR 0 3
23802: PUSH
23803: LD_VAR 0 1
23807: STR
23808: PPUSH
23809: CALL_OW 34
23813: ST_TO_ADDR
23814: GO 23831
// unit := NewCharacter ( ident ) ;
23816: LD_ADDR_VAR 0 5
23820: PUSH
23821: LD_VAR 0 1
23825: PPUSH
23826: CALL_OW 25
23830: ST_TO_ADDR
// result := unit ;
23831: LD_ADDR_VAR 0 4
23835: PUSH
23836: LD_VAR 0 5
23840: ST_TO_ADDR
// end ;
23841: LD_VAR 0 4
23845: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23846: LD_INT 0
23848: PPUSH
23849: PPUSH
// if not side or not nation then
23850: LD_VAR 0 1
23854: NOT
23855: PUSH
23856: LD_VAR 0 2
23860: NOT
23861: OR
23862: IFFALSE 23866
// exit ;
23864: GO 24634
// case nation of nation_american :
23866: LD_VAR 0 2
23870: PUSH
23871: LD_INT 1
23873: DOUBLE
23874: EQUAL
23875: IFTRUE 23879
23877: GO 24093
23879: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23880: LD_ADDR_VAR 0 4
23884: PUSH
23885: LD_INT 35
23887: PUSH
23888: LD_INT 45
23890: PUSH
23891: LD_INT 46
23893: PUSH
23894: LD_INT 47
23896: PUSH
23897: LD_INT 82
23899: PUSH
23900: LD_INT 83
23902: PUSH
23903: LD_INT 84
23905: PUSH
23906: LD_INT 85
23908: PUSH
23909: LD_INT 86
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: LD_INT 2
23917: PUSH
23918: LD_INT 6
23920: PUSH
23921: LD_INT 15
23923: PUSH
23924: LD_INT 16
23926: PUSH
23927: LD_INT 7
23929: PUSH
23930: LD_INT 12
23932: PUSH
23933: LD_INT 13
23935: PUSH
23936: LD_INT 10
23938: PUSH
23939: LD_INT 14
23941: PUSH
23942: LD_INT 20
23944: PUSH
23945: LD_INT 21
23947: PUSH
23948: LD_INT 22
23950: PUSH
23951: LD_INT 25
23953: PUSH
23954: LD_INT 32
23956: PUSH
23957: LD_INT 27
23959: PUSH
23960: LD_INT 36
23962: PUSH
23963: LD_INT 69
23965: PUSH
23966: LD_INT 39
23968: PUSH
23969: LD_INT 34
23971: PUSH
23972: LD_INT 40
23974: PUSH
23975: LD_INT 48
23977: PUSH
23978: LD_INT 49
23980: PUSH
23981: LD_INT 50
23983: PUSH
23984: LD_INT 51
23986: PUSH
23987: LD_INT 52
23989: PUSH
23990: LD_INT 53
23992: PUSH
23993: LD_INT 54
23995: PUSH
23996: LD_INT 55
23998: PUSH
23999: LD_INT 56
24001: PUSH
24002: LD_INT 57
24004: PUSH
24005: LD_INT 58
24007: PUSH
24008: LD_INT 59
24010: PUSH
24011: LD_INT 60
24013: PUSH
24014: LD_INT 61
24016: PUSH
24017: LD_INT 62
24019: PUSH
24020: LD_INT 80
24022: PUSH
24023: LD_INT 82
24025: PUSH
24026: LD_INT 83
24028: PUSH
24029: LD_INT 84
24031: PUSH
24032: LD_INT 85
24034: PUSH
24035: LD_INT 86
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: ST_TO_ADDR
24091: GO 24558
24093: LD_INT 2
24095: DOUBLE
24096: EQUAL
24097: IFTRUE 24101
24099: GO 24327
24101: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24102: LD_ADDR_VAR 0 4
24106: PUSH
24107: LD_INT 35
24109: PUSH
24110: LD_INT 45
24112: PUSH
24113: LD_INT 46
24115: PUSH
24116: LD_INT 47
24118: PUSH
24119: LD_INT 82
24121: PUSH
24122: LD_INT 83
24124: PUSH
24125: LD_INT 84
24127: PUSH
24128: LD_INT 85
24130: PUSH
24131: LD_INT 87
24133: PUSH
24134: LD_INT 70
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: LD_INT 11
24142: PUSH
24143: LD_INT 3
24145: PUSH
24146: LD_INT 4
24148: PUSH
24149: LD_INT 5
24151: PUSH
24152: LD_INT 6
24154: PUSH
24155: LD_INT 15
24157: PUSH
24158: LD_INT 18
24160: PUSH
24161: LD_INT 7
24163: PUSH
24164: LD_INT 17
24166: PUSH
24167: LD_INT 8
24169: PUSH
24170: LD_INT 20
24172: PUSH
24173: LD_INT 21
24175: PUSH
24176: LD_INT 22
24178: PUSH
24179: LD_INT 72
24181: PUSH
24182: LD_INT 26
24184: PUSH
24185: LD_INT 69
24187: PUSH
24188: LD_INT 39
24190: PUSH
24191: LD_INT 40
24193: PUSH
24194: LD_INT 41
24196: PUSH
24197: LD_INT 42
24199: PUSH
24200: LD_INT 43
24202: PUSH
24203: LD_INT 48
24205: PUSH
24206: LD_INT 49
24208: PUSH
24209: LD_INT 50
24211: PUSH
24212: LD_INT 51
24214: PUSH
24215: LD_INT 52
24217: PUSH
24218: LD_INT 53
24220: PUSH
24221: LD_INT 54
24223: PUSH
24224: LD_INT 55
24226: PUSH
24227: LD_INT 56
24229: PUSH
24230: LD_INT 60
24232: PUSH
24233: LD_INT 61
24235: PUSH
24236: LD_INT 62
24238: PUSH
24239: LD_INT 66
24241: PUSH
24242: LD_INT 67
24244: PUSH
24245: LD_INT 68
24247: PUSH
24248: LD_INT 81
24250: PUSH
24251: LD_INT 82
24253: PUSH
24254: LD_INT 83
24256: PUSH
24257: LD_INT 84
24259: PUSH
24260: LD_INT 85
24262: PUSH
24263: LD_INT 87
24265: PUSH
24266: LD_INT 88
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: ST_TO_ADDR
24325: GO 24558
24327: LD_INT 3
24329: DOUBLE
24330: EQUAL
24331: IFTRUE 24335
24333: GO 24557
24335: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24336: LD_ADDR_VAR 0 4
24340: PUSH
24341: LD_INT 46
24343: PUSH
24344: LD_INT 47
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: LD_INT 82
24355: PUSH
24356: LD_INT 83
24358: PUSH
24359: LD_INT 84
24361: PUSH
24362: LD_INT 85
24364: PUSH
24365: LD_INT 86
24367: PUSH
24368: LD_INT 11
24370: PUSH
24371: LD_INT 9
24373: PUSH
24374: LD_INT 20
24376: PUSH
24377: LD_INT 19
24379: PUSH
24380: LD_INT 21
24382: PUSH
24383: LD_INT 24
24385: PUSH
24386: LD_INT 22
24388: PUSH
24389: LD_INT 25
24391: PUSH
24392: LD_INT 28
24394: PUSH
24395: LD_INT 29
24397: PUSH
24398: LD_INT 30
24400: PUSH
24401: LD_INT 31
24403: PUSH
24404: LD_INT 37
24406: PUSH
24407: LD_INT 38
24409: PUSH
24410: LD_INT 32
24412: PUSH
24413: LD_INT 27
24415: PUSH
24416: LD_INT 33
24418: PUSH
24419: LD_INT 69
24421: PUSH
24422: LD_INT 39
24424: PUSH
24425: LD_INT 34
24427: PUSH
24428: LD_INT 40
24430: PUSH
24431: LD_INT 71
24433: PUSH
24434: LD_INT 23
24436: PUSH
24437: LD_INT 44
24439: PUSH
24440: LD_INT 48
24442: PUSH
24443: LD_INT 49
24445: PUSH
24446: LD_INT 50
24448: PUSH
24449: LD_INT 51
24451: PUSH
24452: LD_INT 52
24454: PUSH
24455: LD_INT 53
24457: PUSH
24458: LD_INT 54
24460: PUSH
24461: LD_INT 55
24463: PUSH
24464: LD_INT 56
24466: PUSH
24467: LD_INT 57
24469: PUSH
24470: LD_INT 58
24472: PUSH
24473: LD_INT 59
24475: PUSH
24476: LD_INT 63
24478: PUSH
24479: LD_INT 64
24481: PUSH
24482: LD_INT 65
24484: PUSH
24485: LD_INT 82
24487: PUSH
24488: LD_INT 83
24490: PUSH
24491: LD_INT 84
24493: PUSH
24494: LD_INT 85
24496: PUSH
24497: LD_INT 86
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: ST_TO_ADDR
24555: GO 24558
24557: POP
// if state > - 1 and state < 3 then
24558: LD_VAR 0 3
24562: PUSH
24563: LD_INT 1
24565: NEG
24566: GREATER
24567: PUSH
24568: LD_VAR 0 3
24572: PUSH
24573: LD_INT 3
24575: LESS
24576: AND
24577: IFFALSE 24634
// for i in result do
24579: LD_ADDR_VAR 0 5
24583: PUSH
24584: LD_VAR 0 4
24588: PUSH
24589: FOR_IN
24590: IFFALSE 24632
// if GetTech ( i , side ) <> state then
24592: LD_VAR 0 5
24596: PPUSH
24597: LD_VAR 0 1
24601: PPUSH
24602: CALL_OW 321
24606: PUSH
24607: LD_VAR 0 3
24611: NONEQUAL
24612: IFFALSE 24630
// result := result diff i ;
24614: LD_ADDR_VAR 0 4
24618: PUSH
24619: LD_VAR 0 4
24623: PUSH
24624: LD_VAR 0 5
24628: DIFF
24629: ST_TO_ADDR
24630: GO 24589
24632: POP
24633: POP
// end ;
24634: LD_VAR 0 4
24638: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24639: LD_INT 0
24641: PPUSH
24642: PPUSH
24643: PPUSH
// result := true ;
24644: LD_ADDR_VAR 0 3
24648: PUSH
24649: LD_INT 1
24651: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24652: LD_ADDR_VAR 0 5
24656: PUSH
24657: LD_VAR 0 2
24661: PPUSH
24662: CALL_OW 480
24666: ST_TO_ADDR
// if not tmp then
24667: LD_VAR 0 5
24671: NOT
24672: IFFALSE 24676
// exit ;
24674: GO 24725
// for i in tmp do
24676: LD_ADDR_VAR 0 4
24680: PUSH
24681: LD_VAR 0 5
24685: PUSH
24686: FOR_IN
24687: IFFALSE 24723
// if GetTech ( i , side ) <> state_researched then
24689: LD_VAR 0 4
24693: PPUSH
24694: LD_VAR 0 1
24698: PPUSH
24699: CALL_OW 321
24703: PUSH
24704: LD_INT 2
24706: NONEQUAL
24707: IFFALSE 24721
// begin result := false ;
24709: LD_ADDR_VAR 0 3
24713: PUSH
24714: LD_INT 0
24716: ST_TO_ADDR
// exit ;
24717: POP
24718: POP
24719: GO 24725
// end ;
24721: GO 24686
24723: POP
24724: POP
// end ;
24725: LD_VAR 0 3
24729: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24730: LD_INT 0
24732: PPUSH
24733: PPUSH
24734: PPUSH
24735: PPUSH
24736: PPUSH
24737: PPUSH
24738: PPUSH
24739: PPUSH
24740: PPUSH
24741: PPUSH
24742: PPUSH
24743: PPUSH
24744: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24745: LD_VAR 0 1
24749: NOT
24750: PUSH
24751: LD_VAR 0 1
24755: PPUSH
24756: CALL_OW 257
24760: PUSH
24761: LD_INT 9
24763: NONEQUAL
24764: OR
24765: IFFALSE 24769
// exit ;
24767: GO 25342
// side := GetSide ( unit ) ;
24769: LD_ADDR_VAR 0 9
24773: PUSH
24774: LD_VAR 0 1
24778: PPUSH
24779: CALL_OW 255
24783: ST_TO_ADDR
// tech_space := tech_spacanom ;
24784: LD_ADDR_VAR 0 12
24788: PUSH
24789: LD_INT 29
24791: ST_TO_ADDR
// tech_time := tech_taurad ;
24792: LD_ADDR_VAR 0 13
24796: PUSH
24797: LD_INT 28
24799: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24800: LD_ADDR_VAR 0 11
24804: PUSH
24805: LD_VAR 0 1
24809: PPUSH
24810: CALL_OW 310
24814: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24815: LD_VAR 0 11
24819: PPUSH
24820: CALL_OW 247
24824: PUSH
24825: LD_INT 2
24827: EQUAL
24828: IFFALSE 24832
// exit ;
24830: GO 25342
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24832: LD_ADDR_VAR 0 8
24836: PUSH
24837: LD_INT 81
24839: PUSH
24840: LD_VAR 0 9
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 3
24851: PUSH
24852: LD_INT 21
24854: PUSH
24855: LD_INT 3
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PPUSH
24870: CALL_OW 69
24874: ST_TO_ADDR
// if not tmp then
24875: LD_VAR 0 8
24879: NOT
24880: IFFALSE 24884
// exit ;
24882: GO 25342
// if in_unit then
24884: LD_VAR 0 11
24888: IFFALSE 24912
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24890: LD_ADDR_VAR 0 10
24894: PUSH
24895: LD_VAR 0 8
24899: PPUSH
24900: LD_VAR 0 11
24904: PPUSH
24905: CALL_OW 74
24909: ST_TO_ADDR
24910: GO 24932
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24912: LD_ADDR_VAR 0 10
24916: PUSH
24917: LD_VAR 0 8
24921: PPUSH
24922: LD_VAR 0 1
24926: PPUSH
24927: CALL_OW 74
24931: ST_TO_ADDR
// if not enemy then
24932: LD_VAR 0 10
24936: NOT
24937: IFFALSE 24941
// exit ;
24939: GO 25342
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24941: LD_VAR 0 11
24945: PUSH
24946: LD_VAR 0 11
24950: PPUSH
24951: LD_VAR 0 10
24955: PPUSH
24956: CALL_OW 296
24960: PUSH
24961: LD_INT 13
24963: GREATER
24964: AND
24965: PUSH
24966: LD_VAR 0 1
24970: PPUSH
24971: LD_VAR 0 10
24975: PPUSH
24976: CALL_OW 296
24980: PUSH
24981: LD_INT 12
24983: GREATER
24984: OR
24985: IFFALSE 24989
// exit ;
24987: GO 25342
// missile := [ 1 ] ;
24989: LD_ADDR_VAR 0 14
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: EMPTY
24998: LIST
24999: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25000: LD_VAR 0 9
25004: PPUSH
25005: LD_VAR 0 12
25009: PPUSH
25010: CALL_OW 325
25014: IFFALSE 25043
// missile := Insert ( missile , missile + 1 , 2 ) ;
25016: LD_ADDR_VAR 0 14
25020: PUSH
25021: LD_VAR 0 14
25025: PPUSH
25026: LD_VAR 0 14
25030: PUSH
25031: LD_INT 1
25033: PLUS
25034: PPUSH
25035: LD_INT 2
25037: PPUSH
25038: CALL_OW 2
25042: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25043: LD_VAR 0 9
25047: PPUSH
25048: LD_VAR 0 13
25052: PPUSH
25053: CALL_OW 325
25057: PUSH
25058: LD_VAR 0 10
25062: PPUSH
25063: CALL_OW 255
25067: PPUSH
25068: LD_VAR 0 13
25072: PPUSH
25073: CALL_OW 325
25077: NOT
25078: AND
25079: IFFALSE 25108
// missile := Insert ( missile , missile + 1 , 3 ) ;
25081: LD_ADDR_VAR 0 14
25085: PUSH
25086: LD_VAR 0 14
25090: PPUSH
25091: LD_VAR 0 14
25095: PUSH
25096: LD_INT 1
25098: PLUS
25099: PPUSH
25100: LD_INT 3
25102: PPUSH
25103: CALL_OW 2
25107: ST_TO_ADDR
// if missile < 2 then
25108: LD_VAR 0 14
25112: PUSH
25113: LD_INT 2
25115: LESS
25116: IFFALSE 25120
// exit ;
25118: GO 25342
// x := GetX ( enemy ) ;
25120: LD_ADDR_VAR 0 4
25124: PUSH
25125: LD_VAR 0 10
25129: PPUSH
25130: CALL_OW 250
25134: ST_TO_ADDR
// y := GetY ( enemy ) ;
25135: LD_ADDR_VAR 0 5
25139: PUSH
25140: LD_VAR 0 10
25144: PPUSH
25145: CALL_OW 251
25149: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25150: LD_ADDR_VAR 0 6
25154: PUSH
25155: LD_VAR 0 4
25159: PUSH
25160: LD_INT 1
25162: NEG
25163: PPUSH
25164: LD_INT 1
25166: PPUSH
25167: CALL_OW 12
25171: PLUS
25172: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25173: LD_ADDR_VAR 0 7
25177: PUSH
25178: LD_VAR 0 5
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PPUSH
25187: LD_INT 1
25189: PPUSH
25190: CALL_OW 12
25194: PLUS
25195: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25196: LD_VAR 0 6
25200: PPUSH
25201: LD_VAR 0 7
25205: PPUSH
25206: CALL_OW 488
25210: NOT
25211: IFFALSE 25233
// begin _x := x ;
25213: LD_ADDR_VAR 0 6
25217: PUSH
25218: LD_VAR 0 4
25222: ST_TO_ADDR
// _y := y ;
25223: LD_ADDR_VAR 0 7
25227: PUSH
25228: LD_VAR 0 5
25232: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25233: LD_ADDR_VAR 0 3
25237: PUSH
25238: LD_INT 1
25240: PPUSH
25241: LD_VAR 0 14
25245: PPUSH
25246: CALL_OW 12
25250: ST_TO_ADDR
// case i of 1 :
25251: LD_VAR 0 3
25255: PUSH
25256: LD_INT 1
25258: DOUBLE
25259: EQUAL
25260: IFTRUE 25264
25262: GO 25281
25264: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25265: LD_VAR 0 1
25269: PPUSH
25270: LD_VAR 0 10
25274: PPUSH
25275: CALL_OW 115
25279: GO 25342
25281: LD_INT 2
25283: DOUBLE
25284: EQUAL
25285: IFTRUE 25289
25287: GO 25311
25289: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25290: LD_VAR 0 1
25294: PPUSH
25295: LD_VAR 0 6
25299: PPUSH
25300: LD_VAR 0 7
25304: PPUSH
25305: CALL_OW 153
25309: GO 25342
25311: LD_INT 3
25313: DOUBLE
25314: EQUAL
25315: IFTRUE 25319
25317: GO 25341
25319: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25320: LD_VAR 0 1
25324: PPUSH
25325: LD_VAR 0 6
25329: PPUSH
25330: LD_VAR 0 7
25334: PPUSH
25335: CALL_OW 154
25339: GO 25342
25341: POP
// end ;
25342: LD_VAR 0 2
25346: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25347: LD_INT 0
25349: PPUSH
25350: PPUSH
25351: PPUSH
25352: PPUSH
25353: PPUSH
25354: PPUSH
// if not unit or not building then
25355: LD_VAR 0 1
25359: NOT
25360: PUSH
25361: LD_VAR 0 2
25365: NOT
25366: OR
25367: IFFALSE 25371
// exit ;
25369: GO 25529
// x := GetX ( building ) ;
25371: LD_ADDR_VAR 0 5
25375: PUSH
25376: LD_VAR 0 2
25380: PPUSH
25381: CALL_OW 250
25385: ST_TO_ADDR
// y := GetY ( building ) ;
25386: LD_ADDR_VAR 0 6
25390: PUSH
25391: LD_VAR 0 2
25395: PPUSH
25396: CALL_OW 251
25400: ST_TO_ADDR
// for i = 0 to 5 do
25401: LD_ADDR_VAR 0 4
25405: PUSH
25406: DOUBLE
25407: LD_INT 0
25409: DEC
25410: ST_TO_ADDR
25411: LD_INT 5
25413: PUSH
25414: FOR_TO
25415: IFFALSE 25527
// begin _x := ShiftX ( x , i , 3 ) ;
25417: LD_ADDR_VAR 0 7
25421: PUSH
25422: LD_VAR 0 5
25426: PPUSH
25427: LD_VAR 0 4
25431: PPUSH
25432: LD_INT 3
25434: PPUSH
25435: CALL_OW 272
25439: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25440: LD_ADDR_VAR 0 8
25444: PUSH
25445: LD_VAR 0 6
25449: PPUSH
25450: LD_VAR 0 4
25454: PPUSH
25455: LD_INT 3
25457: PPUSH
25458: CALL_OW 273
25462: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25463: LD_VAR 0 7
25467: PPUSH
25468: LD_VAR 0 8
25472: PPUSH
25473: CALL_OW 488
25477: NOT
25478: IFFALSE 25482
// continue ;
25480: GO 25414
// if HexInfo ( _x , _y ) = 0 then
25482: LD_VAR 0 7
25486: PPUSH
25487: LD_VAR 0 8
25491: PPUSH
25492: CALL_OW 428
25496: PUSH
25497: LD_INT 0
25499: EQUAL
25500: IFFALSE 25525
// begin ComMoveXY ( unit , _x , _y ) ;
25502: LD_VAR 0 1
25506: PPUSH
25507: LD_VAR 0 7
25511: PPUSH
25512: LD_VAR 0 8
25516: PPUSH
25517: CALL_OW 111
// exit ;
25521: POP
25522: POP
25523: GO 25529
// end ; end ;
25525: GO 25414
25527: POP
25528: POP
// end ;
25529: LD_VAR 0 3
25533: RET
// export function ScanBase ( side , base_area ) ; begin
25534: LD_INT 0
25536: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25537: LD_ADDR_VAR 0 3
25541: PUSH
25542: LD_VAR 0 2
25546: PPUSH
25547: LD_INT 81
25549: PUSH
25550: LD_VAR 0 1
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PPUSH
25559: CALL_OW 70
25563: ST_TO_ADDR
// end ;
25564: LD_VAR 0 3
25568: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25569: LD_INT 0
25571: PPUSH
25572: PPUSH
25573: PPUSH
25574: PPUSH
// result := false ;
25575: LD_ADDR_VAR 0 2
25579: PUSH
25580: LD_INT 0
25582: ST_TO_ADDR
// side := GetSide ( unit ) ;
25583: LD_ADDR_VAR 0 3
25587: PUSH
25588: LD_VAR 0 1
25592: PPUSH
25593: CALL_OW 255
25597: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25598: LD_ADDR_VAR 0 4
25602: PUSH
25603: LD_VAR 0 1
25607: PPUSH
25608: CALL_OW 248
25612: ST_TO_ADDR
// case nat of 1 :
25613: LD_VAR 0 4
25617: PUSH
25618: LD_INT 1
25620: DOUBLE
25621: EQUAL
25622: IFTRUE 25626
25624: GO 25637
25626: POP
// tech := tech_lassight ; 2 :
25627: LD_ADDR_VAR 0 5
25631: PUSH
25632: LD_INT 12
25634: ST_TO_ADDR
25635: GO 25676
25637: LD_INT 2
25639: DOUBLE
25640: EQUAL
25641: IFTRUE 25645
25643: GO 25656
25645: POP
// tech := tech_mortar ; 3 :
25646: LD_ADDR_VAR 0 5
25650: PUSH
25651: LD_INT 41
25653: ST_TO_ADDR
25654: GO 25676
25656: LD_INT 3
25658: DOUBLE
25659: EQUAL
25660: IFTRUE 25664
25662: GO 25675
25664: POP
// tech := tech_bazooka ; end ;
25665: LD_ADDR_VAR 0 5
25669: PUSH
25670: LD_INT 44
25672: ST_TO_ADDR
25673: GO 25676
25675: POP
// if Researched ( side , tech ) then
25676: LD_VAR 0 3
25680: PPUSH
25681: LD_VAR 0 5
25685: PPUSH
25686: CALL_OW 325
25690: IFFALSE 25717
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25692: LD_ADDR_VAR 0 2
25696: PUSH
25697: LD_INT 5
25699: PUSH
25700: LD_INT 8
25702: PUSH
25703: LD_INT 9
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: PUSH
25711: LD_VAR 0 4
25715: ARRAY
25716: ST_TO_ADDR
// end ;
25717: LD_VAR 0 2
25721: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25722: LD_INT 0
25724: PPUSH
25725: PPUSH
25726: PPUSH
// if not mines then
25727: LD_VAR 0 2
25731: NOT
25732: IFFALSE 25736
// exit ;
25734: GO 25880
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25736: LD_ADDR_VAR 0 5
25740: PUSH
25741: LD_INT 81
25743: PUSH
25744: LD_VAR 0 1
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 3
25755: PUSH
25756: LD_INT 21
25758: PUSH
25759: LD_INT 3
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PPUSH
25774: CALL_OW 69
25778: ST_TO_ADDR
// for i in mines do
25779: LD_ADDR_VAR 0 4
25783: PUSH
25784: LD_VAR 0 2
25788: PUSH
25789: FOR_IN
25790: IFFALSE 25878
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25792: LD_VAR 0 4
25796: PUSH
25797: LD_INT 1
25799: ARRAY
25800: PPUSH
25801: LD_VAR 0 4
25805: PUSH
25806: LD_INT 2
25808: ARRAY
25809: PPUSH
25810: CALL_OW 458
25814: NOT
25815: IFFALSE 25819
// continue ;
25817: GO 25789
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25819: LD_VAR 0 4
25823: PUSH
25824: LD_INT 1
25826: ARRAY
25827: PPUSH
25828: LD_VAR 0 4
25832: PUSH
25833: LD_INT 2
25835: ARRAY
25836: PPUSH
25837: CALL_OW 428
25841: PUSH
25842: LD_VAR 0 5
25846: IN
25847: IFFALSE 25876
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25849: LD_VAR 0 4
25853: PUSH
25854: LD_INT 1
25856: ARRAY
25857: PPUSH
25858: LD_VAR 0 4
25862: PUSH
25863: LD_INT 2
25865: ARRAY
25866: PPUSH
25867: LD_VAR 0 1
25871: PPUSH
25872: CALL_OW 456
// end ;
25876: GO 25789
25878: POP
25879: POP
// end ;
25880: LD_VAR 0 3
25884: RET
// export function Count ( array ) ; var i ; begin
25885: LD_INT 0
25887: PPUSH
25888: PPUSH
// result := 0 ;
25889: LD_ADDR_VAR 0 2
25893: PUSH
25894: LD_INT 0
25896: ST_TO_ADDR
// for i in array do
25897: LD_ADDR_VAR 0 3
25901: PUSH
25902: LD_VAR 0 1
25906: PUSH
25907: FOR_IN
25908: IFFALSE 25932
// if i then
25910: LD_VAR 0 3
25914: IFFALSE 25930
// result := result + 1 ;
25916: LD_ADDR_VAR 0 2
25920: PUSH
25921: LD_VAR 0 2
25925: PUSH
25926: LD_INT 1
25928: PLUS
25929: ST_TO_ADDR
25930: GO 25907
25932: POP
25933: POP
// end ;
25934: LD_VAR 0 2
25938: RET
// export function IsEmpty ( building ) ; begin
25939: LD_INT 0
25941: PPUSH
// if not building then
25942: LD_VAR 0 1
25946: NOT
25947: IFFALSE 25951
// exit ;
25949: GO 25994
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25951: LD_ADDR_VAR 0 2
25955: PUSH
25956: LD_VAR 0 1
25960: PUSH
25961: LD_INT 22
25963: PUSH
25964: LD_VAR 0 1
25968: PPUSH
25969: CALL_OW 255
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 58
25980: PUSH
25981: EMPTY
25982: LIST
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PPUSH
25988: CALL_OW 69
25992: IN
25993: ST_TO_ADDR
// end ;
25994: LD_VAR 0 2
25998: RET
// export function IsNotFull ( building ) ; begin
25999: LD_INT 0
26001: PPUSH
// if not building then
26002: LD_VAR 0 1
26006: NOT
26007: IFFALSE 26011
// exit ;
26009: GO 26030
// result := UnitsInside ( building ) < 6 ;
26011: LD_ADDR_VAR 0 2
26015: PUSH
26016: LD_VAR 0 1
26020: PPUSH
26021: CALL_OW 313
26025: PUSH
26026: LD_INT 6
26028: LESS
26029: ST_TO_ADDR
// end ;
26030: LD_VAR 0 2
26034: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26035: LD_INT 0
26037: PPUSH
26038: PPUSH
26039: PPUSH
26040: PPUSH
// tmp := [ ] ;
26041: LD_ADDR_VAR 0 3
26045: PUSH
26046: EMPTY
26047: ST_TO_ADDR
// list := [ ] ;
26048: LD_ADDR_VAR 0 5
26052: PUSH
26053: EMPTY
26054: ST_TO_ADDR
// for i = 16 to 25 do
26055: LD_ADDR_VAR 0 4
26059: PUSH
26060: DOUBLE
26061: LD_INT 16
26063: DEC
26064: ST_TO_ADDR
26065: LD_INT 25
26067: PUSH
26068: FOR_TO
26069: IFFALSE 26142
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26071: LD_ADDR_VAR 0 3
26075: PUSH
26076: LD_VAR 0 3
26080: PUSH
26081: LD_INT 22
26083: PUSH
26084: LD_VAR 0 1
26088: PPUSH
26089: CALL_OW 255
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 91
26100: PUSH
26101: LD_VAR 0 1
26105: PUSH
26106: LD_INT 6
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 30
26116: PUSH
26117: LD_VAR 0 4
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: LIST
26130: PUSH
26131: EMPTY
26132: LIST
26133: PPUSH
26134: CALL_OW 69
26138: ADD
26139: ST_TO_ADDR
26140: GO 26068
26142: POP
26143: POP
// for i = 1 to tmp do
26144: LD_ADDR_VAR 0 4
26148: PUSH
26149: DOUBLE
26150: LD_INT 1
26152: DEC
26153: ST_TO_ADDR
26154: LD_VAR 0 3
26158: PUSH
26159: FOR_TO
26160: IFFALSE 26248
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26162: LD_ADDR_VAR 0 5
26166: PUSH
26167: LD_VAR 0 5
26171: PUSH
26172: LD_VAR 0 3
26176: PUSH
26177: LD_VAR 0 4
26181: ARRAY
26182: PPUSH
26183: CALL_OW 266
26187: PUSH
26188: LD_VAR 0 3
26192: PUSH
26193: LD_VAR 0 4
26197: ARRAY
26198: PPUSH
26199: CALL_OW 250
26203: PUSH
26204: LD_VAR 0 3
26208: PUSH
26209: LD_VAR 0 4
26213: ARRAY
26214: PPUSH
26215: CALL_OW 251
26219: PUSH
26220: LD_VAR 0 3
26224: PUSH
26225: LD_VAR 0 4
26229: ARRAY
26230: PPUSH
26231: CALL_OW 254
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: PUSH
26242: EMPTY
26243: LIST
26244: ADD
26245: ST_TO_ADDR
26246: GO 26159
26248: POP
26249: POP
// result := list ;
26250: LD_ADDR_VAR 0 2
26254: PUSH
26255: LD_VAR 0 5
26259: ST_TO_ADDR
// end ;
26260: LD_VAR 0 2
26264: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26265: LD_INT 0
26267: PPUSH
26268: PPUSH
26269: PPUSH
26270: PPUSH
26271: PPUSH
26272: PPUSH
26273: PPUSH
// if not factory then
26274: LD_VAR 0 1
26278: NOT
26279: IFFALSE 26283
// exit ;
26281: GO 26876
// if control = control_apeman then
26283: LD_VAR 0 4
26287: PUSH
26288: LD_INT 5
26290: EQUAL
26291: IFFALSE 26400
// begin tmp := UnitsInside ( factory ) ;
26293: LD_ADDR_VAR 0 8
26297: PUSH
26298: LD_VAR 0 1
26302: PPUSH
26303: CALL_OW 313
26307: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26308: LD_VAR 0 8
26312: PPUSH
26313: LD_INT 25
26315: PUSH
26316: LD_INT 12
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PPUSH
26323: CALL_OW 72
26327: NOT
26328: IFFALSE 26338
// control := control_manual ;
26330: LD_ADDR_VAR 0 4
26334: PUSH
26335: LD_INT 1
26337: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26338: LD_ADDR_VAR 0 8
26342: PUSH
26343: LD_VAR 0 1
26347: PPUSH
26348: CALL 26035 0 1
26352: ST_TO_ADDR
// if tmp then
26353: LD_VAR 0 8
26357: IFFALSE 26400
// begin for i in tmp do
26359: LD_ADDR_VAR 0 7
26363: PUSH
26364: LD_VAR 0 8
26368: PUSH
26369: FOR_IN
26370: IFFALSE 26398
// if i [ 1 ] = b_ext_radio then
26372: LD_VAR 0 7
26376: PUSH
26377: LD_INT 1
26379: ARRAY
26380: PUSH
26381: LD_INT 22
26383: EQUAL
26384: IFFALSE 26396
// begin control := control_remote ;
26386: LD_ADDR_VAR 0 4
26390: PUSH
26391: LD_INT 2
26393: ST_TO_ADDR
// break ;
26394: GO 26398
// end ;
26396: GO 26369
26398: POP
26399: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26400: LD_VAR 0 1
26404: PPUSH
26405: LD_VAR 0 2
26409: PPUSH
26410: LD_VAR 0 3
26414: PPUSH
26415: LD_VAR 0 4
26419: PPUSH
26420: LD_VAR 0 5
26424: PPUSH
26425: CALL_OW 448
26429: IFFALSE 26464
// begin result := [ chassis , engine , control , weapon ] ;
26431: LD_ADDR_VAR 0 6
26435: PUSH
26436: LD_VAR 0 2
26440: PUSH
26441: LD_VAR 0 3
26445: PUSH
26446: LD_VAR 0 4
26450: PUSH
26451: LD_VAR 0 5
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: ST_TO_ADDR
// exit ;
26462: GO 26876
// end ; _chassis := AvailableChassisList ( factory ) ;
26464: LD_ADDR_VAR 0 9
26468: PUSH
26469: LD_VAR 0 1
26473: PPUSH
26474: CALL_OW 475
26478: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26479: LD_ADDR_VAR 0 11
26483: PUSH
26484: LD_VAR 0 1
26488: PPUSH
26489: CALL_OW 476
26493: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26494: LD_ADDR_VAR 0 12
26498: PUSH
26499: LD_VAR 0 1
26503: PPUSH
26504: CALL_OW 477
26508: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26509: LD_ADDR_VAR 0 10
26513: PUSH
26514: LD_VAR 0 1
26518: PPUSH
26519: CALL_OW 478
26523: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26524: LD_VAR 0 9
26528: NOT
26529: PUSH
26530: LD_VAR 0 11
26534: NOT
26535: OR
26536: PUSH
26537: LD_VAR 0 12
26541: NOT
26542: OR
26543: PUSH
26544: LD_VAR 0 10
26548: NOT
26549: OR
26550: IFFALSE 26585
// begin result := [ chassis , engine , control , weapon ] ;
26552: LD_ADDR_VAR 0 6
26556: PUSH
26557: LD_VAR 0 2
26561: PUSH
26562: LD_VAR 0 3
26566: PUSH
26567: LD_VAR 0 4
26571: PUSH
26572: LD_VAR 0 5
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: ST_TO_ADDR
// exit ;
26583: GO 26876
// end ; if not chassis in _chassis then
26585: LD_VAR 0 2
26589: PUSH
26590: LD_VAR 0 9
26594: IN
26595: NOT
26596: IFFALSE 26622
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26598: LD_ADDR_VAR 0 2
26602: PUSH
26603: LD_VAR 0 9
26607: PUSH
26608: LD_INT 1
26610: PPUSH
26611: LD_VAR 0 9
26615: PPUSH
26616: CALL_OW 12
26620: ARRAY
26621: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26622: LD_VAR 0 2
26626: PPUSH
26627: LD_VAR 0 3
26631: PPUSH
26632: CALL 26881 0 2
26636: NOT
26637: IFFALSE 26696
// repeat engine := _engine [ 1 ] ;
26639: LD_ADDR_VAR 0 3
26643: PUSH
26644: LD_VAR 0 11
26648: PUSH
26649: LD_INT 1
26651: ARRAY
26652: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26653: LD_ADDR_VAR 0 11
26657: PUSH
26658: LD_VAR 0 11
26662: PPUSH
26663: LD_INT 1
26665: PPUSH
26666: CALL_OW 3
26670: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26671: LD_VAR 0 2
26675: PPUSH
26676: LD_VAR 0 3
26680: PPUSH
26681: CALL 26881 0 2
26685: PUSH
26686: LD_VAR 0 11
26690: PUSH
26691: EMPTY
26692: EQUAL
26693: OR
26694: IFFALSE 26639
// if not control in _control then
26696: LD_VAR 0 4
26700: PUSH
26701: LD_VAR 0 12
26705: IN
26706: NOT
26707: IFFALSE 26733
// control := _control [ rand ( 1 , _control ) ] ;
26709: LD_ADDR_VAR 0 4
26713: PUSH
26714: LD_VAR 0 12
26718: PUSH
26719: LD_INT 1
26721: PPUSH
26722: LD_VAR 0 12
26726: PPUSH
26727: CALL_OW 12
26731: ARRAY
26732: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26733: LD_VAR 0 2
26737: PPUSH
26738: LD_VAR 0 5
26742: PPUSH
26743: CALL 27101 0 2
26747: NOT
26748: IFFALSE 26807
// repeat weapon := _weapon [ 1 ] ;
26750: LD_ADDR_VAR 0 5
26754: PUSH
26755: LD_VAR 0 10
26759: PUSH
26760: LD_INT 1
26762: ARRAY
26763: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26764: LD_ADDR_VAR 0 10
26768: PUSH
26769: LD_VAR 0 10
26773: PPUSH
26774: LD_INT 1
26776: PPUSH
26777: CALL_OW 3
26781: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26782: LD_VAR 0 2
26786: PPUSH
26787: LD_VAR 0 5
26791: PPUSH
26792: CALL 27101 0 2
26796: PUSH
26797: LD_VAR 0 10
26801: PUSH
26802: EMPTY
26803: EQUAL
26804: OR
26805: IFFALSE 26750
// result := [ ] ;
26807: LD_ADDR_VAR 0 6
26811: PUSH
26812: EMPTY
26813: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26814: LD_VAR 0 1
26818: PPUSH
26819: LD_VAR 0 2
26823: PPUSH
26824: LD_VAR 0 3
26828: PPUSH
26829: LD_VAR 0 4
26833: PPUSH
26834: LD_VAR 0 5
26838: PPUSH
26839: CALL_OW 448
26843: IFFALSE 26876
// result := [ chassis , engine , control , weapon ] ;
26845: LD_ADDR_VAR 0 6
26849: PUSH
26850: LD_VAR 0 2
26854: PUSH
26855: LD_VAR 0 3
26859: PUSH
26860: LD_VAR 0 4
26864: PUSH
26865: LD_VAR 0 5
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: ST_TO_ADDR
// end ;
26876: LD_VAR 0 6
26880: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26881: LD_INT 0
26883: PPUSH
// if not chassis or not engine then
26884: LD_VAR 0 1
26888: NOT
26889: PUSH
26890: LD_VAR 0 2
26894: NOT
26895: OR
26896: IFFALSE 26900
// exit ;
26898: GO 27096
// case engine of engine_solar :
26900: LD_VAR 0 2
26904: PUSH
26905: LD_INT 2
26907: DOUBLE
26908: EQUAL
26909: IFTRUE 26913
26911: GO 26951
26913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26914: LD_ADDR_VAR 0 3
26918: PUSH
26919: LD_INT 11
26921: PUSH
26922: LD_INT 12
26924: PUSH
26925: LD_INT 13
26927: PUSH
26928: LD_INT 14
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: LD_INT 2
26936: PUSH
26937: LD_INT 3
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: ST_TO_ADDR
26949: GO 27080
26951: LD_INT 1
26953: DOUBLE
26954: EQUAL
26955: IFTRUE 26959
26957: GO 27021
26959: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26960: LD_ADDR_VAR 0 3
26964: PUSH
26965: LD_INT 11
26967: PUSH
26968: LD_INT 12
26970: PUSH
26971: LD_INT 13
26973: PUSH
26974: LD_INT 14
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: LD_INT 2
26982: PUSH
26983: LD_INT 3
26985: PUSH
26986: LD_INT 4
26988: PUSH
26989: LD_INT 5
26991: PUSH
26992: LD_INT 21
26994: PUSH
26995: LD_INT 23
26997: PUSH
26998: LD_INT 22
27000: PUSH
27001: LD_INT 24
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: ST_TO_ADDR
27019: GO 27080
27021: LD_INT 3
27023: DOUBLE
27024: EQUAL
27025: IFTRUE 27029
27027: GO 27079
27029: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27030: LD_ADDR_VAR 0 3
27034: PUSH
27035: LD_INT 13
27037: PUSH
27038: LD_INT 14
27040: PUSH
27041: LD_INT 2
27043: PUSH
27044: LD_INT 3
27046: PUSH
27047: LD_INT 4
27049: PUSH
27050: LD_INT 5
27052: PUSH
27053: LD_INT 21
27055: PUSH
27056: LD_INT 22
27058: PUSH
27059: LD_INT 23
27061: PUSH
27062: LD_INT 24
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: ST_TO_ADDR
27077: GO 27080
27079: POP
// result := ( chassis in result ) ;
27080: LD_ADDR_VAR 0 3
27084: PUSH
27085: LD_VAR 0 1
27089: PUSH
27090: LD_VAR 0 3
27094: IN
27095: ST_TO_ADDR
// end ;
27096: LD_VAR 0 3
27100: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27101: LD_INT 0
27103: PPUSH
// if not chassis or not weapon then
27104: LD_VAR 0 1
27108: NOT
27109: PUSH
27110: LD_VAR 0 2
27114: NOT
27115: OR
27116: IFFALSE 27120
// exit ;
27118: GO 28182
// case weapon of us_machine_gun :
27120: LD_VAR 0 2
27124: PUSH
27125: LD_INT 2
27127: DOUBLE
27128: EQUAL
27129: IFTRUE 27133
27131: GO 27163
27133: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27134: LD_ADDR_VAR 0 3
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: LD_INT 3
27147: PUSH
27148: LD_INT 4
27150: PUSH
27151: LD_INT 5
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: ST_TO_ADDR
27161: GO 28166
27163: LD_INT 3
27165: DOUBLE
27166: EQUAL
27167: IFTRUE 27171
27169: GO 27201
27171: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27172: LD_ADDR_VAR 0 3
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: LD_INT 2
27182: PUSH
27183: LD_INT 3
27185: PUSH
27186: LD_INT 4
27188: PUSH
27189: LD_INT 5
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: ST_TO_ADDR
27199: GO 28166
27201: LD_INT 11
27203: DOUBLE
27204: EQUAL
27205: IFTRUE 27209
27207: GO 27239
27209: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27210: LD_ADDR_VAR 0 3
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: LD_INT 2
27220: PUSH
27221: LD_INT 3
27223: PUSH
27224: LD_INT 4
27226: PUSH
27227: LD_INT 5
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: ST_TO_ADDR
27237: GO 28166
27239: LD_INT 4
27241: DOUBLE
27242: EQUAL
27243: IFTRUE 27247
27245: GO 27273
27247: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27248: LD_ADDR_VAR 0 3
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 3
27258: PUSH
27259: LD_INT 4
27261: PUSH
27262: LD_INT 5
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: ST_TO_ADDR
27271: GO 28166
27273: LD_INT 5
27275: DOUBLE
27276: EQUAL
27277: IFTRUE 27281
27279: GO 27307
27281: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27282: LD_ADDR_VAR 0 3
27286: PUSH
27287: LD_INT 2
27289: PUSH
27290: LD_INT 3
27292: PUSH
27293: LD_INT 4
27295: PUSH
27296: LD_INT 5
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: ST_TO_ADDR
27305: GO 28166
27307: LD_INT 9
27309: DOUBLE
27310: EQUAL
27311: IFTRUE 27315
27313: GO 27341
27315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27316: LD_ADDR_VAR 0 3
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 3
27326: PUSH
27327: LD_INT 4
27329: PUSH
27330: LD_INT 5
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: ST_TO_ADDR
27339: GO 28166
27341: LD_INT 7
27343: DOUBLE
27344: EQUAL
27345: IFTRUE 27349
27347: GO 27375
27349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27350: LD_ADDR_VAR 0 3
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: LD_INT 3
27360: PUSH
27361: LD_INT 4
27363: PUSH
27364: LD_INT 5
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: ST_TO_ADDR
27373: GO 28166
27375: LD_INT 12
27377: DOUBLE
27378: EQUAL
27379: IFTRUE 27383
27381: GO 27409
27383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27384: LD_ADDR_VAR 0 3
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: LD_INT 3
27394: PUSH
27395: LD_INT 4
27397: PUSH
27398: LD_INT 5
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: ST_TO_ADDR
27407: GO 28166
27409: LD_INT 13
27411: DOUBLE
27412: EQUAL
27413: IFTRUE 27417
27415: GO 27443
27417: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27418: LD_ADDR_VAR 0 3
27422: PUSH
27423: LD_INT 2
27425: PUSH
27426: LD_INT 3
27428: PUSH
27429: LD_INT 4
27431: PUSH
27432: LD_INT 5
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: ST_TO_ADDR
27441: GO 28166
27443: LD_INT 14
27445: DOUBLE
27446: EQUAL
27447: IFTRUE 27451
27449: GO 27469
27451: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27452: LD_ADDR_VAR 0 3
27456: PUSH
27457: LD_INT 4
27459: PUSH
27460: LD_INT 5
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: ST_TO_ADDR
27467: GO 28166
27469: LD_INT 6
27471: DOUBLE
27472: EQUAL
27473: IFTRUE 27477
27475: GO 27495
27477: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27478: LD_ADDR_VAR 0 3
27482: PUSH
27483: LD_INT 4
27485: PUSH
27486: LD_INT 5
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: ST_TO_ADDR
27493: GO 28166
27495: LD_INT 10
27497: DOUBLE
27498: EQUAL
27499: IFTRUE 27503
27501: GO 27521
27503: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27504: LD_ADDR_VAR 0 3
27508: PUSH
27509: LD_INT 4
27511: PUSH
27512: LD_INT 5
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: ST_TO_ADDR
27519: GO 28166
27521: LD_INT 22
27523: DOUBLE
27524: EQUAL
27525: IFTRUE 27529
27527: GO 27555
27529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27530: LD_ADDR_VAR 0 3
27534: PUSH
27535: LD_INT 11
27537: PUSH
27538: LD_INT 12
27540: PUSH
27541: LD_INT 13
27543: PUSH
27544: LD_INT 14
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: ST_TO_ADDR
27553: GO 28166
27555: LD_INT 23
27557: DOUBLE
27558: EQUAL
27559: IFTRUE 27563
27561: GO 27589
27563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27564: LD_ADDR_VAR 0 3
27568: PUSH
27569: LD_INT 11
27571: PUSH
27572: LD_INT 12
27574: PUSH
27575: LD_INT 13
27577: PUSH
27578: LD_INT 14
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
27587: GO 28166
27589: LD_INT 24
27591: DOUBLE
27592: EQUAL
27593: IFTRUE 27597
27595: GO 27623
27597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27598: LD_ADDR_VAR 0 3
27602: PUSH
27603: LD_INT 11
27605: PUSH
27606: LD_INT 12
27608: PUSH
27609: LD_INT 13
27611: PUSH
27612: LD_INT 14
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: ST_TO_ADDR
27621: GO 28166
27623: LD_INT 30
27625: DOUBLE
27626: EQUAL
27627: IFTRUE 27631
27629: GO 27657
27631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27632: LD_ADDR_VAR 0 3
27636: PUSH
27637: LD_INT 11
27639: PUSH
27640: LD_INT 12
27642: PUSH
27643: LD_INT 13
27645: PUSH
27646: LD_INT 14
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: ST_TO_ADDR
27655: GO 28166
27657: LD_INT 25
27659: DOUBLE
27660: EQUAL
27661: IFTRUE 27665
27663: GO 27683
27665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27666: LD_ADDR_VAR 0 3
27670: PUSH
27671: LD_INT 13
27673: PUSH
27674: LD_INT 14
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: ST_TO_ADDR
27681: GO 28166
27683: LD_INT 27
27685: DOUBLE
27686: EQUAL
27687: IFTRUE 27691
27689: GO 27709
27691: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27692: LD_ADDR_VAR 0 3
27696: PUSH
27697: LD_INT 13
27699: PUSH
27700: LD_INT 14
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: ST_TO_ADDR
27707: GO 28166
27709: LD_EXP 99
27713: DOUBLE
27714: EQUAL
27715: IFTRUE 27719
27717: GO 27745
27719: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27720: LD_ADDR_VAR 0 3
27724: PUSH
27725: LD_INT 11
27727: PUSH
27728: LD_INT 12
27730: PUSH
27731: LD_INT 13
27733: PUSH
27734: LD_INT 14
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: ST_TO_ADDR
27743: GO 28166
27745: LD_INT 28
27747: DOUBLE
27748: EQUAL
27749: IFTRUE 27753
27751: GO 27771
27753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27754: LD_ADDR_VAR 0 3
27758: PUSH
27759: LD_INT 13
27761: PUSH
27762: LD_INT 14
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: ST_TO_ADDR
27769: GO 28166
27771: LD_INT 29
27773: DOUBLE
27774: EQUAL
27775: IFTRUE 27779
27777: GO 27797
27779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27780: LD_ADDR_VAR 0 3
27784: PUSH
27785: LD_INT 13
27787: PUSH
27788: LD_INT 14
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: ST_TO_ADDR
27795: GO 28166
27797: LD_INT 31
27799: DOUBLE
27800: EQUAL
27801: IFTRUE 27805
27803: GO 27823
27805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27806: LD_ADDR_VAR 0 3
27810: PUSH
27811: LD_INT 13
27813: PUSH
27814: LD_INT 14
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: ST_TO_ADDR
27821: GO 28166
27823: LD_INT 26
27825: DOUBLE
27826: EQUAL
27827: IFTRUE 27831
27829: GO 27849
27831: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27832: LD_ADDR_VAR 0 3
27836: PUSH
27837: LD_INT 13
27839: PUSH
27840: LD_INT 14
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: ST_TO_ADDR
27847: GO 28166
27849: LD_INT 42
27851: DOUBLE
27852: EQUAL
27853: IFTRUE 27857
27855: GO 27883
27857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27858: LD_ADDR_VAR 0 3
27862: PUSH
27863: LD_INT 21
27865: PUSH
27866: LD_INT 22
27868: PUSH
27869: LD_INT 23
27871: PUSH
27872: LD_INT 24
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: ST_TO_ADDR
27881: GO 28166
27883: LD_INT 43
27885: DOUBLE
27886: EQUAL
27887: IFTRUE 27891
27889: GO 27917
27891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27892: LD_ADDR_VAR 0 3
27896: PUSH
27897: LD_INT 21
27899: PUSH
27900: LD_INT 22
27902: PUSH
27903: LD_INT 23
27905: PUSH
27906: LD_INT 24
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
27915: GO 28166
27917: LD_INT 44
27919: DOUBLE
27920: EQUAL
27921: IFTRUE 27925
27923: GO 27951
27925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27926: LD_ADDR_VAR 0 3
27930: PUSH
27931: LD_INT 21
27933: PUSH
27934: LD_INT 22
27936: PUSH
27937: LD_INT 23
27939: PUSH
27940: LD_INT 24
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: ST_TO_ADDR
27949: GO 28166
27951: LD_INT 45
27953: DOUBLE
27954: EQUAL
27955: IFTRUE 27959
27957: GO 27985
27959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27960: LD_ADDR_VAR 0 3
27964: PUSH
27965: LD_INT 21
27967: PUSH
27968: LD_INT 22
27970: PUSH
27971: LD_INT 23
27973: PUSH
27974: LD_INT 24
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: ST_TO_ADDR
27983: GO 28166
27985: LD_INT 49
27987: DOUBLE
27988: EQUAL
27989: IFTRUE 27993
27991: GO 28019
27993: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27994: LD_ADDR_VAR 0 3
27998: PUSH
27999: LD_INT 21
28001: PUSH
28002: LD_INT 22
28004: PUSH
28005: LD_INT 23
28007: PUSH
28008: LD_INT 24
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: ST_TO_ADDR
28017: GO 28166
28019: LD_INT 51
28021: DOUBLE
28022: EQUAL
28023: IFTRUE 28027
28025: GO 28053
28027: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28028: LD_ADDR_VAR 0 3
28032: PUSH
28033: LD_INT 21
28035: PUSH
28036: LD_INT 22
28038: PUSH
28039: LD_INT 23
28041: PUSH
28042: LD_INT 24
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: ST_TO_ADDR
28051: GO 28166
28053: LD_INT 52
28055: DOUBLE
28056: EQUAL
28057: IFTRUE 28061
28059: GO 28087
28061: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28062: LD_ADDR_VAR 0 3
28066: PUSH
28067: LD_INT 21
28069: PUSH
28070: LD_INT 22
28072: PUSH
28073: LD_INT 23
28075: PUSH
28076: LD_INT 24
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: ST_TO_ADDR
28085: GO 28166
28087: LD_INT 53
28089: DOUBLE
28090: EQUAL
28091: IFTRUE 28095
28093: GO 28113
28095: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28096: LD_ADDR_VAR 0 3
28100: PUSH
28101: LD_INT 23
28103: PUSH
28104: LD_INT 24
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: ST_TO_ADDR
28111: GO 28166
28113: LD_INT 46
28115: DOUBLE
28116: EQUAL
28117: IFTRUE 28121
28119: GO 28139
28121: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28122: LD_ADDR_VAR 0 3
28126: PUSH
28127: LD_INT 23
28129: PUSH
28130: LD_INT 24
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: ST_TO_ADDR
28137: GO 28166
28139: LD_INT 47
28141: DOUBLE
28142: EQUAL
28143: IFTRUE 28147
28145: GO 28165
28147: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28148: LD_ADDR_VAR 0 3
28152: PUSH
28153: LD_INT 23
28155: PUSH
28156: LD_INT 24
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: ST_TO_ADDR
28163: GO 28166
28165: POP
// result := ( chassis in result ) ;
28166: LD_ADDR_VAR 0 3
28170: PUSH
28171: LD_VAR 0 1
28175: PUSH
28176: LD_VAR 0 3
28180: IN
28181: ST_TO_ADDR
// end ;
28182: LD_VAR 0 3
28186: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28187: LD_INT 0
28189: PPUSH
28190: PPUSH
28191: PPUSH
28192: PPUSH
28193: PPUSH
28194: PPUSH
28195: PPUSH
// result := array ;
28196: LD_ADDR_VAR 0 5
28200: PUSH
28201: LD_VAR 0 1
28205: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28206: LD_VAR 0 1
28210: NOT
28211: PUSH
28212: LD_VAR 0 2
28216: NOT
28217: OR
28218: PUSH
28219: LD_VAR 0 3
28223: NOT
28224: OR
28225: PUSH
28226: LD_VAR 0 2
28230: PUSH
28231: LD_VAR 0 1
28235: GREATER
28236: OR
28237: PUSH
28238: LD_VAR 0 3
28242: PUSH
28243: LD_VAR 0 1
28247: GREATER
28248: OR
28249: IFFALSE 28253
// exit ;
28251: GO 28549
// if direction then
28253: LD_VAR 0 4
28257: IFFALSE 28321
// begin d := 1 ;
28259: LD_ADDR_VAR 0 9
28263: PUSH
28264: LD_INT 1
28266: ST_TO_ADDR
// if i_from > i_to then
28267: LD_VAR 0 2
28271: PUSH
28272: LD_VAR 0 3
28276: GREATER
28277: IFFALSE 28303
// length := ( array - i_from ) + i_to else
28279: LD_ADDR_VAR 0 11
28283: PUSH
28284: LD_VAR 0 1
28288: PUSH
28289: LD_VAR 0 2
28293: MINUS
28294: PUSH
28295: LD_VAR 0 3
28299: PLUS
28300: ST_TO_ADDR
28301: GO 28319
// length := i_to - i_from ;
28303: LD_ADDR_VAR 0 11
28307: PUSH
28308: LD_VAR 0 3
28312: PUSH
28313: LD_VAR 0 2
28317: MINUS
28318: ST_TO_ADDR
// end else
28319: GO 28382
// begin d := - 1 ;
28321: LD_ADDR_VAR 0 9
28325: PUSH
28326: LD_INT 1
28328: NEG
28329: ST_TO_ADDR
// if i_from > i_to then
28330: LD_VAR 0 2
28334: PUSH
28335: LD_VAR 0 3
28339: GREATER
28340: IFFALSE 28360
// length := i_from - i_to else
28342: LD_ADDR_VAR 0 11
28346: PUSH
28347: LD_VAR 0 2
28351: PUSH
28352: LD_VAR 0 3
28356: MINUS
28357: ST_TO_ADDR
28358: GO 28382
// length := ( array - i_to ) + i_from ;
28360: LD_ADDR_VAR 0 11
28364: PUSH
28365: LD_VAR 0 1
28369: PUSH
28370: LD_VAR 0 3
28374: MINUS
28375: PUSH
28376: LD_VAR 0 2
28380: PLUS
28381: ST_TO_ADDR
// end ; if not length then
28382: LD_VAR 0 11
28386: NOT
28387: IFFALSE 28391
// exit ;
28389: GO 28549
// tmp := array ;
28391: LD_ADDR_VAR 0 10
28395: PUSH
28396: LD_VAR 0 1
28400: ST_TO_ADDR
// for i = 1 to length do
28401: LD_ADDR_VAR 0 6
28405: PUSH
28406: DOUBLE
28407: LD_INT 1
28409: DEC
28410: ST_TO_ADDR
28411: LD_VAR 0 11
28415: PUSH
28416: FOR_TO
28417: IFFALSE 28537
// begin for j = 1 to array do
28419: LD_ADDR_VAR 0 7
28423: PUSH
28424: DOUBLE
28425: LD_INT 1
28427: DEC
28428: ST_TO_ADDR
28429: LD_VAR 0 1
28433: PUSH
28434: FOR_TO
28435: IFFALSE 28523
// begin k := j + d ;
28437: LD_ADDR_VAR 0 8
28441: PUSH
28442: LD_VAR 0 7
28446: PUSH
28447: LD_VAR 0 9
28451: PLUS
28452: ST_TO_ADDR
// if k > array then
28453: LD_VAR 0 8
28457: PUSH
28458: LD_VAR 0 1
28462: GREATER
28463: IFFALSE 28473
// k := 1 ;
28465: LD_ADDR_VAR 0 8
28469: PUSH
28470: LD_INT 1
28472: ST_TO_ADDR
// if not k then
28473: LD_VAR 0 8
28477: NOT
28478: IFFALSE 28490
// k := array ;
28480: LD_ADDR_VAR 0 8
28484: PUSH
28485: LD_VAR 0 1
28489: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28490: LD_ADDR_VAR 0 10
28494: PUSH
28495: LD_VAR 0 10
28499: PPUSH
28500: LD_VAR 0 8
28504: PPUSH
28505: LD_VAR 0 1
28509: PUSH
28510: LD_VAR 0 7
28514: ARRAY
28515: PPUSH
28516: CALL_OW 1
28520: ST_TO_ADDR
// end ;
28521: GO 28434
28523: POP
28524: POP
// array := tmp ;
28525: LD_ADDR_VAR 0 1
28529: PUSH
28530: LD_VAR 0 10
28534: ST_TO_ADDR
// end ;
28535: GO 28416
28537: POP
28538: POP
// result := array ;
28539: LD_ADDR_VAR 0 5
28543: PUSH
28544: LD_VAR 0 1
28548: ST_TO_ADDR
// end ;
28549: LD_VAR 0 5
28553: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28554: LD_INT 0
28556: PPUSH
28557: PPUSH
// result := 0 ;
28558: LD_ADDR_VAR 0 3
28562: PUSH
28563: LD_INT 0
28565: ST_TO_ADDR
// if not array or not value in array then
28566: LD_VAR 0 1
28570: NOT
28571: PUSH
28572: LD_VAR 0 2
28576: PUSH
28577: LD_VAR 0 1
28581: IN
28582: NOT
28583: OR
28584: IFFALSE 28588
// exit ;
28586: GO 28642
// for i = 1 to array do
28588: LD_ADDR_VAR 0 4
28592: PUSH
28593: DOUBLE
28594: LD_INT 1
28596: DEC
28597: ST_TO_ADDR
28598: LD_VAR 0 1
28602: PUSH
28603: FOR_TO
28604: IFFALSE 28640
// if value = array [ i ] then
28606: LD_VAR 0 2
28610: PUSH
28611: LD_VAR 0 1
28615: PUSH
28616: LD_VAR 0 4
28620: ARRAY
28621: EQUAL
28622: IFFALSE 28638
// begin result := i ;
28624: LD_ADDR_VAR 0 3
28628: PUSH
28629: LD_VAR 0 4
28633: ST_TO_ADDR
// exit ;
28634: POP
28635: POP
28636: GO 28642
// end ;
28638: GO 28603
28640: POP
28641: POP
// end ;
28642: LD_VAR 0 3
28646: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28647: LD_INT 0
28649: PPUSH
// vc_chassis := chassis ;
28650: LD_ADDR_OWVAR 37
28654: PUSH
28655: LD_VAR 0 1
28659: ST_TO_ADDR
// vc_engine := engine ;
28660: LD_ADDR_OWVAR 39
28664: PUSH
28665: LD_VAR 0 2
28669: ST_TO_ADDR
// vc_control := control ;
28670: LD_ADDR_OWVAR 38
28674: PUSH
28675: LD_VAR 0 3
28679: ST_TO_ADDR
// vc_weapon := weapon ;
28680: LD_ADDR_OWVAR 40
28684: PUSH
28685: LD_VAR 0 4
28689: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28690: LD_ADDR_OWVAR 41
28694: PUSH
28695: LD_VAR 0 5
28699: ST_TO_ADDR
// end ;
28700: LD_VAR 0 6
28704: RET
// export function WantPlant ( unit ) ; var task ; begin
28705: LD_INT 0
28707: PPUSH
28708: PPUSH
// result := false ;
28709: LD_ADDR_VAR 0 2
28713: PUSH
28714: LD_INT 0
28716: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28717: LD_ADDR_VAR 0 3
28721: PUSH
28722: LD_VAR 0 1
28726: PPUSH
28727: CALL_OW 437
28731: ST_TO_ADDR
// if task then
28732: LD_VAR 0 3
28736: IFFALSE 28764
// if task [ 1 ] [ 1 ] = p then
28738: LD_VAR 0 3
28742: PUSH
28743: LD_INT 1
28745: ARRAY
28746: PUSH
28747: LD_INT 1
28749: ARRAY
28750: PUSH
28751: LD_STRING p
28753: EQUAL
28754: IFFALSE 28764
// result := true ;
28756: LD_ADDR_VAR 0 2
28760: PUSH
28761: LD_INT 1
28763: ST_TO_ADDR
// end ;
28764: LD_VAR 0 2
28768: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28769: LD_INT 0
28771: PPUSH
28772: PPUSH
28773: PPUSH
28774: PPUSH
// if pos < 1 then
28775: LD_VAR 0 2
28779: PUSH
28780: LD_INT 1
28782: LESS
28783: IFFALSE 28787
// exit ;
28785: GO 29090
// if pos = 1 then
28787: LD_VAR 0 2
28791: PUSH
28792: LD_INT 1
28794: EQUAL
28795: IFFALSE 28828
// result := Replace ( arr , pos [ 1 ] , value ) else
28797: LD_ADDR_VAR 0 4
28801: PUSH
28802: LD_VAR 0 1
28806: PPUSH
28807: LD_VAR 0 2
28811: PUSH
28812: LD_INT 1
28814: ARRAY
28815: PPUSH
28816: LD_VAR 0 3
28820: PPUSH
28821: CALL_OW 1
28825: ST_TO_ADDR
28826: GO 29090
// begin tmp := arr ;
28828: LD_ADDR_VAR 0 6
28832: PUSH
28833: LD_VAR 0 1
28837: ST_TO_ADDR
// s_arr := [ tmp ] ;
28838: LD_ADDR_VAR 0 7
28842: PUSH
28843: LD_VAR 0 6
28847: PUSH
28848: EMPTY
28849: LIST
28850: ST_TO_ADDR
// for i = 1 to pos - 1 do
28851: LD_ADDR_VAR 0 5
28855: PUSH
28856: DOUBLE
28857: LD_INT 1
28859: DEC
28860: ST_TO_ADDR
28861: LD_VAR 0 2
28865: PUSH
28866: LD_INT 1
28868: MINUS
28869: PUSH
28870: FOR_TO
28871: IFFALSE 28916
// begin tmp := tmp [ pos [ i ] ] ;
28873: LD_ADDR_VAR 0 6
28877: PUSH
28878: LD_VAR 0 6
28882: PUSH
28883: LD_VAR 0 2
28887: PUSH
28888: LD_VAR 0 5
28892: ARRAY
28893: ARRAY
28894: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28895: LD_ADDR_VAR 0 7
28899: PUSH
28900: LD_VAR 0 7
28904: PUSH
28905: LD_VAR 0 6
28909: PUSH
28910: EMPTY
28911: LIST
28912: ADD
28913: ST_TO_ADDR
// end ;
28914: GO 28870
28916: POP
28917: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28918: LD_ADDR_VAR 0 6
28922: PUSH
28923: LD_VAR 0 6
28927: PPUSH
28928: LD_VAR 0 2
28932: PUSH
28933: LD_VAR 0 2
28937: ARRAY
28938: PPUSH
28939: LD_VAR 0 3
28943: PPUSH
28944: CALL_OW 1
28948: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28949: LD_ADDR_VAR 0 7
28953: PUSH
28954: LD_VAR 0 7
28958: PPUSH
28959: LD_VAR 0 7
28963: PPUSH
28964: LD_VAR 0 6
28968: PPUSH
28969: CALL_OW 1
28973: ST_TO_ADDR
// for i = s_arr downto 2 do
28974: LD_ADDR_VAR 0 5
28978: PUSH
28979: DOUBLE
28980: LD_VAR 0 7
28984: INC
28985: ST_TO_ADDR
28986: LD_INT 2
28988: PUSH
28989: FOR_DOWNTO
28990: IFFALSE 29074
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28992: LD_ADDR_VAR 0 6
28996: PUSH
28997: LD_VAR 0 7
29001: PUSH
29002: LD_VAR 0 5
29006: PUSH
29007: LD_INT 1
29009: MINUS
29010: ARRAY
29011: PPUSH
29012: LD_VAR 0 2
29016: PUSH
29017: LD_VAR 0 5
29021: PUSH
29022: LD_INT 1
29024: MINUS
29025: ARRAY
29026: PPUSH
29027: LD_VAR 0 7
29031: PUSH
29032: LD_VAR 0 5
29036: ARRAY
29037: PPUSH
29038: CALL_OW 1
29042: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29043: LD_ADDR_VAR 0 7
29047: PUSH
29048: LD_VAR 0 7
29052: PPUSH
29053: LD_VAR 0 5
29057: PUSH
29058: LD_INT 1
29060: MINUS
29061: PPUSH
29062: LD_VAR 0 6
29066: PPUSH
29067: CALL_OW 1
29071: ST_TO_ADDR
// end ;
29072: GO 28989
29074: POP
29075: POP
// result := s_arr [ 1 ] ;
29076: LD_ADDR_VAR 0 4
29080: PUSH
29081: LD_VAR 0 7
29085: PUSH
29086: LD_INT 1
29088: ARRAY
29089: ST_TO_ADDR
// end ; end ;
29090: LD_VAR 0 4
29094: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29095: LD_INT 0
29097: PPUSH
29098: PPUSH
// if not list then
29099: LD_VAR 0 1
29103: NOT
29104: IFFALSE 29108
// exit ;
29106: GO 29199
// i := list [ pos1 ] ;
29108: LD_ADDR_VAR 0 5
29112: PUSH
29113: LD_VAR 0 1
29117: PUSH
29118: LD_VAR 0 2
29122: ARRAY
29123: ST_TO_ADDR
// if not i then
29124: LD_VAR 0 5
29128: NOT
29129: IFFALSE 29133
// exit ;
29131: GO 29199
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29133: LD_ADDR_VAR 0 1
29137: PUSH
29138: LD_VAR 0 1
29142: PPUSH
29143: LD_VAR 0 2
29147: PPUSH
29148: LD_VAR 0 1
29152: PUSH
29153: LD_VAR 0 3
29157: ARRAY
29158: PPUSH
29159: CALL_OW 1
29163: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29164: LD_ADDR_VAR 0 1
29168: PUSH
29169: LD_VAR 0 1
29173: PPUSH
29174: LD_VAR 0 3
29178: PPUSH
29179: LD_VAR 0 5
29183: PPUSH
29184: CALL_OW 1
29188: ST_TO_ADDR
// result := list ;
29189: LD_ADDR_VAR 0 4
29193: PUSH
29194: LD_VAR 0 1
29198: ST_TO_ADDR
// end ;
29199: LD_VAR 0 4
29203: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29204: LD_INT 0
29206: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29207: LD_ADDR_VAR 0 5
29211: PUSH
29212: LD_VAR 0 1
29216: PPUSH
29217: CALL_OW 250
29221: PPUSH
29222: LD_VAR 0 1
29226: PPUSH
29227: CALL_OW 251
29231: PPUSH
29232: LD_VAR 0 2
29236: PPUSH
29237: LD_VAR 0 3
29241: PPUSH
29242: LD_VAR 0 4
29246: PPUSH
29247: CALL 29257 0 5
29251: ST_TO_ADDR
// end ;
29252: LD_VAR 0 5
29256: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29257: LD_INT 0
29259: PPUSH
29260: PPUSH
29261: PPUSH
29262: PPUSH
// if not list then
29263: LD_VAR 0 3
29267: NOT
29268: IFFALSE 29272
// exit ;
29270: GO 29660
// result := [ ] ;
29272: LD_ADDR_VAR 0 6
29276: PUSH
29277: EMPTY
29278: ST_TO_ADDR
// for i in list do
29279: LD_ADDR_VAR 0 7
29283: PUSH
29284: LD_VAR 0 3
29288: PUSH
29289: FOR_IN
29290: IFFALSE 29492
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29292: LD_ADDR_VAR 0 9
29296: PUSH
29297: LD_VAR 0 7
29301: PPUSH
29302: LD_VAR 0 1
29306: PPUSH
29307: LD_VAR 0 2
29311: PPUSH
29312: CALL_OW 297
29316: ST_TO_ADDR
// if not result then
29317: LD_VAR 0 6
29321: NOT
29322: IFFALSE 29348
// result := [ [ i , tmp ] ] else
29324: LD_ADDR_VAR 0 6
29328: PUSH
29329: LD_VAR 0 7
29333: PUSH
29334: LD_VAR 0 9
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: EMPTY
29344: LIST
29345: ST_TO_ADDR
29346: GO 29490
// begin if result [ result ] [ 2 ] < tmp then
29348: LD_VAR 0 6
29352: PUSH
29353: LD_VAR 0 6
29357: ARRAY
29358: PUSH
29359: LD_INT 2
29361: ARRAY
29362: PUSH
29363: LD_VAR 0 9
29367: LESS
29368: IFFALSE 29410
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29370: LD_ADDR_VAR 0 6
29374: PUSH
29375: LD_VAR 0 6
29379: PPUSH
29380: LD_VAR 0 6
29384: PUSH
29385: LD_INT 1
29387: PLUS
29388: PPUSH
29389: LD_VAR 0 7
29393: PUSH
29394: LD_VAR 0 9
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PPUSH
29403: CALL_OW 2
29407: ST_TO_ADDR
29408: GO 29490
// for j = 1 to result do
29410: LD_ADDR_VAR 0 8
29414: PUSH
29415: DOUBLE
29416: LD_INT 1
29418: DEC
29419: ST_TO_ADDR
29420: LD_VAR 0 6
29424: PUSH
29425: FOR_TO
29426: IFFALSE 29488
// begin if tmp < result [ j ] [ 2 ] then
29428: LD_VAR 0 9
29432: PUSH
29433: LD_VAR 0 6
29437: PUSH
29438: LD_VAR 0 8
29442: ARRAY
29443: PUSH
29444: LD_INT 2
29446: ARRAY
29447: LESS
29448: IFFALSE 29486
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29450: LD_ADDR_VAR 0 6
29454: PUSH
29455: LD_VAR 0 6
29459: PPUSH
29460: LD_VAR 0 8
29464: PPUSH
29465: LD_VAR 0 7
29469: PUSH
29470: LD_VAR 0 9
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PPUSH
29479: CALL_OW 2
29483: ST_TO_ADDR
// break ;
29484: GO 29488
// end ; end ;
29486: GO 29425
29488: POP
29489: POP
// end ; end ;
29490: GO 29289
29492: POP
29493: POP
// if result and not asc then
29494: LD_VAR 0 6
29498: PUSH
29499: LD_VAR 0 4
29503: NOT
29504: AND
29505: IFFALSE 29580
// begin tmp := result ;
29507: LD_ADDR_VAR 0 9
29511: PUSH
29512: LD_VAR 0 6
29516: ST_TO_ADDR
// for i = tmp downto 1 do
29517: LD_ADDR_VAR 0 7
29521: PUSH
29522: DOUBLE
29523: LD_VAR 0 9
29527: INC
29528: ST_TO_ADDR
29529: LD_INT 1
29531: PUSH
29532: FOR_DOWNTO
29533: IFFALSE 29578
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29535: LD_ADDR_VAR 0 6
29539: PUSH
29540: LD_VAR 0 6
29544: PPUSH
29545: LD_VAR 0 9
29549: PUSH
29550: LD_VAR 0 7
29554: MINUS
29555: PUSH
29556: LD_INT 1
29558: PLUS
29559: PPUSH
29560: LD_VAR 0 9
29564: PUSH
29565: LD_VAR 0 7
29569: ARRAY
29570: PPUSH
29571: CALL_OW 1
29575: ST_TO_ADDR
29576: GO 29532
29578: POP
29579: POP
// end ; tmp := [ ] ;
29580: LD_ADDR_VAR 0 9
29584: PUSH
29585: EMPTY
29586: ST_TO_ADDR
// if mode then
29587: LD_VAR 0 5
29591: IFFALSE 29660
// begin for i = 1 to result do
29593: LD_ADDR_VAR 0 7
29597: PUSH
29598: DOUBLE
29599: LD_INT 1
29601: DEC
29602: ST_TO_ADDR
29603: LD_VAR 0 6
29607: PUSH
29608: FOR_TO
29609: IFFALSE 29648
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29611: LD_ADDR_VAR 0 9
29615: PUSH
29616: LD_VAR 0 9
29620: PPUSH
29621: LD_VAR 0 7
29625: PPUSH
29626: LD_VAR 0 6
29630: PUSH
29631: LD_VAR 0 7
29635: ARRAY
29636: PUSH
29637: LD_INT 1
29639: ARRAY
29640: PPUSH
29641: CALL_OW 1
29645: ST_TO_ADDR
29646: GO 29608
29648: POP
29649: POP
// result := tmp ;
29650: LD_ADDR_VAR 0 6
29654: PUSH
29655: LD_VAR 0 9
29659: ST_TO_ADDR
// end ; end ;
29660: LD_VAR 0 6
29664: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29665: LD_INT 0
29667: PPUSH
29668: PPUSH
29669: PPUSH
29670: PPUSH
29671: PPUSH
29672: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29673: LD_ADDR_VAR 0 5
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: LD_INT 0
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: EMPTY
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: ST_TO_ADDR
// if not x or not y then
29695: LD_VAR 0 2
29699: NOT
29700: PUSH
29701: LD_VAR 0 3
29705: NOT
29706: OR
29707: IFFALSE 29711
// exit ;
29709: GO 31363
// if not range then
29711: LD_VAR 0 4
29715: NOT
29716: IFFALSE 29726
// range := 10 ;
29718: LD_ADDR_VAR 0 4
29722: PUSH
29723: LD_INT 10
29725: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29726: LD_ADDR_VAR 0 8
29730: PUSH
29731: LD_INT 81
29733: PUSH
29734: LD_VAR 0 1
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 92
29745: PUSH
29746: LD_VAR 0 2
29750: PUSH
29751: LD_VAR 0 3
29755: PUSH
29756: LD_VAR 0 4
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 3
29769: PUSH
29770: LD_INT 21
29772: PUSH
29773: LD_INT 3
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: PPUSH
29789: CALL_OW 69
29793: ST_TO_ADDR
// if not tmp then
29794: LD_VAR 0 8
29798: NOT
29799: IFFALSE 29803
// exit ;
29801: GO 31363
// for i in tmp do
29803: LD_ADDR_VAR 0 6
29807: PUSH
29808: LD_VAR 0 8
29812: PUSH
29813: FOR_IN
29814: IFFALSE 31338
// begin points := [ 0 , 0 , 0 ] ;
29816: LD_ADDR_VAR 0 9
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: LD_INT 0
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: LIST
29834: ST_TO_ADDR
// bpoints := 1 ;
29835: LD_ADDR_VAR 0 10
29839: PUSH
29840: LD_INT 1
29842: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29843: LD_VAR 0 6
29847: PPUSH
29848: CALL_OW 247
29852: PUSH
29853: LD_INT 1
29855: DOUBLE
29856: EQUAL
29857: IFTRUE 29861
29859: GO 30439
29861: POP
// begin if GetClass ( i ) = 1 then
29862: LD_VAR 0 6
29866: PPUSH
29867: CALL_OW 257
29871: PUSH
29872: LD_INT 1
29874: EQUAL
29875: IFFALSE 29896
// points := [ 10 , 5 , 3 ] ;
29877: LD_ADDR_VAR 0 9
29881: PUSH
29882: LD_INT 10
29884: PUSH
29885: LD_INT 5
29887: PUSH
29888: LD_INT 3
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: LIST
29895: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29896: LD_VAR 0 6
29900: PPUSH
29901: CALL_OW 257
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: LD_INT 3
29911: PUSH
29912: LD_INT 4
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: IN
29920: IFFALSE 29941
// points := [ 3 , 2 , 1 ] ;
29922: LD_ADDR_VAR 0 9
29926: PUSH
29927: LD_INT 3
29929: PUSH
29930: LD_INT 2
29932: PUSH
29933: LD_INT 1
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: LIST
29940: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29941: LD_VAR 0 6
29945: PPUSH
29946: CALL_OW 257
29950: PUSH
29951: LD_INT 5
29953: EQUAL
29954: IFFALSE 29975
// points := [ 130 , 5 , 2 ] ;
29956: LD_ADDR_VAR 0 9
29960: PUSH
29961: LD_INT 130
29963: PUSH
29964: LD_INT 5
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: LIST
29974: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29975: LD_VAR 0 6
29979: PPUSH
29980: CALL_OW 257
29984: PUSH
29985: LD_INT 8
29987: EQUAL
29988: IFFALSE 30009
// points := [ 35 , 35 , 30 ] ;
29990: LD_ADDR_VAR 0 9
29994: PUSH
29995: LD_INT 35
29997: PUSH
29998: LD_INT 35
30000: PUSH
30001: LD_INT 30
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: LIST
30008: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30009: LD_VAR 0 6
30013: PPUSH
30014: CALL_OW 257
30018: PUSH
30019: LD_INT 9
30021: EQUAL
30022: IFFALSE 30043
// points := [ 20 , 55 , 40 ] ;
30024: LD_ADDR_VAR 0 9
30028: PUSH
30029: LD_INT 20
30031: PUSH
30032: LD_INT 55
30034: PUSH
30035: LD_INT 40
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30043: LD_VAR 0 6
30047: PPUSH
30048: CALL_OW 257
30052: PUSH
30053: LD_INT 12
30055: PUSH
30056: LD_INT 16
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: IN
30063: IFFALSE 30084
// points := [ 5 , 3 , 2 ] ;
30065: LD_ADDR_VAR 0 9
30069: PUSH
30070: LD_INT 5
30072: PUSH
30073: LD_INT 3
30075: PUSH
30076: LD_INT 2
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: LIST
30083: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30084: LD_VAR 0 6
30088: PPUSH
30089: CALL_OW 257
30093: PUSH
30094: LD_INT 17
30096: EQUAL
30097: IFFALSE 30118
// points := [ 100 , 50 , 75 ] ;
30099: LD_ADDR_VAR 0 9
30103: PUSH
30104: LD_INT 100
30106: PUSH
30107: LD_INT 50
30109: PUSH
30110: LD_INT 75
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: LIST
30117: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30118: LD_VAR 0 6
30122: PPUSH
30123: CALL_OW 257
30127: PUSH
30128: LD_INT 15
30130: EQUAL
30131: IFFALSE 30152
// points := [ 10 , 5 , 3 ] ;
30133: LD_ADDR_VAR 0 9
30137: PUSH
30138: LD_INT 10
30140: PUSH
30141: LD_INT 5
30143: PUSH
30144: LD_INT 3
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30152: LD_VAR 0 6
30156: PPUSH
30157: CALL_OW 257
30161: PUSH
30162: LD_INT 14
30164: EQUAL
30165: IFFALSE 30186
// points := [ 10 , 0 , 0 ] ;
30167: LD_ADDR_VAR 0 9
30171: PUSH
30172: LD_INT 10
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30186: LD_VAR 0 6
30190: PPUSH
30191: CALL_OW 257
30195: PUSH
30196: LD_INT 11
30198: EQUAL
30199: IFFALSE 30220
// points := [ 30 , 10 , 5 ] ;
30201: LD_ADDR_VAR 0 9
30205: PUSH
30206: LD_INT 30
30208: PUSH
30209: LD_INT 10
30211: PUSH
30212: LD_INT 5
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: LIST
30219: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30220: LD_VAR 0 1
30224: PPUSH
30225: LD_INT 5
30227: PPUSH
30228: CALL_OW 321
30232: PUSH
30233: LD_INT 2
30235: EQUAL
30236: IFFALSE 30253
// bpoints := bpoints * 1.8 ;
30238: LD_ADDR_VAR 0 10
30242: PUSH
30243: LD_VAR 0 10
30247: PUSH
30248: LD_REAL  1.80000000000000E+0000
30251: MUL
30252: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30253: LD_VAR 0 6
30257: PPUSH
30258: CALL_OW 257
30262: PUSH
30263: LD_INT 1
30265: PUSH
30266: LD_INT 2
30268: PUSH
30269: LD_INT 3
30271: PUSH
30272: LD_INT 4
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: IN
30281: PUSH
30282: LD_VAR 0 1
30286: PPUSH
30287: LD_INT 51
30289: PPUSH
30290: CALL_OW 321
30294: PUSH
30295: LD_INT 2
30297: EQUAL
30298: AND
30299: IFFALSE 30316
// bpoints := bpoints * 1.2 ;
30301: LD_ADDR_VAR 0 10
30305: PUSH
30306: LD_VAR 0 10
30310: PUSH
30311: LD_REAL  1.20000000000000E+0000
30314: MUL
30315: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30316: LD_VAR 0 6
30320: PPUSH
30321: CALL_OW 257
30325: PUSH
30326: LD_INT 5
30328: PUSH
30329: LD_INT 7
30331: PUSH
30332: LD_INT 9
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: LIST
30339: IN
30340: PUSH
30341: LD_VAR 0 1
30345: PPUSH
30346: LD_INT 52
30348: PPUSH
30349: CALL_OW 321
30353: PUSH
30354: LD_INT 2
30356: EQUAL
30357: AND
30358: IFFALSE 30375
// bpoints := bpoints * 1.5 ;
30360: LD_ADDR_VAR 0 10
30364: PUSH
30365: LD_VAR 0 10
30369: PUSH
30370: LD_REAL  1.50000000000000E+0000
30373: MUL
30374: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30375: LD_VAR 0 1
30379: PPUSH
30380: LD_INT 66
30382: PPUSH
30383: CALL_OW 321
30387: PUSH
30388: LD_INT 2
30390: EQUAL
30391: IFFALSE 30408
// bpoints := bpoints * 1.1 ;
30393: LD_ADDR_VAR 0 10
30397: PUSH
30398: LD_VAR 0 10
30402: PUSH
30403: LD_REAL  1.10000000000000E+0000
30406: MUL
30407: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30408: LD_ADDR_VAR 0 10
30412: PUSH
30413: LD_VAR 0 10
30417: PUSH
30418: LD_VAR 0 6
30422: PPUSH
30423: LD_INT 1
30425: PPUSH
30426: CALL_OW 259
30430: PUSH
30431: LD_REAL  1.15000000000000E+0000
30434: MUL
30435: MUL
30436: ST_TO_ADDR
// end ; unit_vehicle :
30437: GO 31267
30439: LD_INT 2
30441: DOUBLE
30442: EQUAL
30443: IFTRUE 30447
30445: GO 31255
30447: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30448: LD_VAR 0 6
30452: PPUSH
30453: CALL_OW 264
30457: PUSH
30458: LD_INT 2
30460: PUSH
30461: LD_INT 42
30463: PUSH
30464: LD_INT 24
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: LIST
30471: IN
30472: IFFALSE 30493
// points := [ 25 , 5 , 3 ] ;
30474: LD_ADDR_VAR 0 9
30478: PUSH
30479: LD_INT 25
30481: PUSH
30482: LD_INT 5
30484: PUSH
30485: LD_INT 3
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: LIST
30492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30493: LD_VAR 0 6
30497: PPUSH
30498: CALL_OW 264
30502: PUSH
30503: LD_INT 4
30505: PUSH
30506: LD_INT 43
30508: PUSH
30509: LD_INT 25
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: IN
30517: IFFALSE 30538
// points := [ 40 , 15 , 5 ] ;
30519: LD_ADDR_VAR 0 9
30523: PUSH
30524: LD_INT 40
30526: PUSH
30527: LD_INT 15
30529: PUSH
30530: LD_INT 5
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: LIST
30537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30538: LD_VAR 0 6
30542: PPUSH
30543: CALL_OW 264
30547: PUSH
30548: LD_INT 3
30550: PUSH
30551: LD_INT 23
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: IN
30558: IFFALSE 30579
// points := [ 7 , 25 , 8 ] ;
30560: LD_ADDR_VAR 0 9
30564: PUSH
30565: LD_INT 7
30567: PUSH
30568: LD_INT 25
30570: PUSH
30571: LD_INT 8
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: LIST
30578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30579: LD_VAR 0 6
30583: PPUSH
30584: CALL_OW 264
30588: PUSH
30589: LD_INT 5
30591: PUSH
30592: LD_INT 27
30594: PUSH
30595: LD_INT 44
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: LIST
30602: IN
30603: IFFALSE 30624
// points := [ 14 , 50 , 16 ] ;
30605: LD_ADDR_VAR 0 9
30609: PUSH
30610: LD_INT 14
30612: PUSH
30613: LD_INT 50
30615: PUSH
30616: LD_INT 16
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: LIST
30623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30624: LD_VAR 0 6
30628: PPUSH
30629: CALL_OW 264
30633: PUSH
30634: LD_INT 6
30636: PUSH
30637: LD_INT 46
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: IN
30644: IFFALSE 30665
// points := [ 32 , 120 , 70 ] ;
30646: LD_ADDR_VAR 0 9
30650: PUSH
30651: LD_INT 32
30653: PUSH
30654: LD_INT 120
30656: PUSH
30657: LD_INT 70
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30665: LD_VAR 0 6
30669: PPUSH
30670: CALL_OW 264
30674: PUSH
30675: LD_INT 7
30677: PUSH
30678: LD_INT 28
30680: PUSH
30681: LD_INT 45
30683: PUSH
30684: LD_EXP 99
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: IN
30695: IFFALSE 30716
// points := [ 35 , 20 , 45 ] ;
30697: LD_ADDR_VAR 0 9
30701: PUSH
30702: LD_INT 35
30704: PUSH
30705: LD_INT 20
30707: PUSH
30708: LD_INT 45
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: LIST
30715: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30716: LD_VAR 0 6
30720: PPUSH
30721: CALL_OW 264
30725: PUSH
30726: LD_INT 47
30728: PUSH
30729: EMPTY
30730: LIST
30731: IN
30732: IFFALSE 30753
// points := [ 67 , 45 , 75 ] ;
30734: LD_ADDR_VAR 0 9
30738: PUSH
30739: LD_INT 67
30741: PUSH
30742: LD_INT 45
30744: PUSH
30745: LD_INT 75
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30753: LD_VAR 0 6
30757: PPUSH
30758: CALL_OW 264
30762: PUSH
30763: LD_INT 26
30765: PUSH
30766: EMPTY
30767: LIST
30768: IN
30769: IFFALSE 30790
// points := [ 120 , 30 , 80 ] ;
30771: LD_ADDR_VAR 0 9
30775: PUSH
30776: LD_INT 120
30778: PUSH
30779: LD_INT 30
30781: PUSH
30782: LD_INT 80
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: LIST
30789: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30790: LD_VAR 0 6
30794: PPUSH
30795: CALL_OW 264
30799: PUSH
30800: LD_INT 22
30802: PUSH
30803: EMPTY
30804: LIST
30805: IN
30806: IFFALSE 30827
// points := [ 40 , 1 , 1 ] ;
30808: LD_ADDR_VAR 0 9
30812: PUSH
30813: LD_INT 40
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30827: LD_VAR 0 6
30831: PPUSH
30832: CALL_OW 264
30836: PUSH
30837: LD_INT 29
30839: PUSH
30840: EMPTY
30841: LIST
30842: IN
30843: IFFALSE 30864
// points := [ 70 , 200 , 400 ] ;
30845: LD_ADDR_VAR 0 9
30849: PUSH
30850: LD_INT 70
30852: PUSH
30853: LD_INT 200
30855: PUSH
30856: LD_INT 400
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: LIST
30863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30864: LD_VAR 0 6
30868: PPUSH
30869: CALL_OW 264
30873: PUSH
30874: LD_INT 14
30876: PUSH
30877: LD_INT 53
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: IN
30884: IFFALSE 30905
// points := [ 40 , 10 , 20 ] ;
30886: LD_ADDR_VAR 0 9
30890: PUSH
30891: LD_INT 40
30893: PUSH
30894: LD_INT 10
30896: PUSH
30897: LD_INT 20
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30905: LD_VAR 0 6
30909: PPUSH
30910: CALL_OW 264
30914: PUSH
30915: LD_INT 9
30917: PUSH
30918: EMPTY
30919: LIST
30920: IN
30921: IFFALSE 30942
// points := [ 5 , 70 , 20 ] ;
30923: LD_ADDR_VAR 0 9
30927: PUSH
30928: LD_INT 5
30930: PUSH
30931: LD_INT 70
30933: PUSH
30934: LD_INT 20
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: LIST
30941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30942: LD_VAR 0 6
30946: PPUSH
30947: CALL_OW 264
30951: PUSH
30952: LD_INT 10
30954: PUSH
30955: EMPTY
30956: LIST
30957: IN
30958: IFFALSE 30979
// points := [ 35 , 110 , 70 ] ;
30960: LD_ADDR_VAR 0 9
30964: PUSH
30965: LD_INT 35
30967: PUSH
30968: LD_INT 110
30970: PUSH
30971: LD_INT 70
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30979: LD_VAR 0 6
30983: PPUSH
30984: CALL_OW 265
30988: PUSH
30989: LD_INT 25
30991: EQUAL
30992: IFFALSE 31013
// points := [ 80 , 65 , 100 ] ;
30994: LD_ADDR_VAR 0 9
30998: PUSH
30999: LD_INT 80
31001: PUSH
31002: LD_INT 65
31004: PUSH
31005: LD_INT 100
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: LIST
31012: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31013: LD_VAR 0 6
31017: PPUSH
31018: CALL_OW 263
31022: PUSH
31023: LD_INT 1
31025: EQUAL
31026: IFFALSE 31061
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31028: LD_ADDR_VAR 0 10
31032: PUSH
31033: LD_VAR 0 10
31037: PUSH
31038: LD_VAR 0 6
31042: PPUSH
31043: CALL_OW 311
31047: PPUSH
31048: LD_INT 3
31050: PPUSH
31051: CALL_OW 259
31055: PUSH
31056: LD_INT 4
31058: MUL
31059: MUL
31060: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31061: LD_VAR 0 6
31065: PPUSH
31066: CALL_OW 263
31070: PUSH
31071: LD_INT 2
31073: EQUAL
31074: IFFALSE 31125
// begin j := IsControledBy ( i ) ;
31076: LD_ADDR_VAR 0 7
31080: PUSH
31081: LD_VAR 0 6
31085: PPUSH
31086: CALL_OW 312
31090: ST_TO_ADDR
// if j then
31091: LD_VAR 0 7
31095: IFFALSE 31125
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31097: LD_ADDR_VAR 0 10
31101: PUSH
31102: LD_VAR 0 10
31106: PUSH
31107: LD_VAR 0 7
31111: PPUSH
31112: LD_INT 3
31114: PPUSH
31115: CALL_OW 259
31119: PUSH
31120: LD_INT 3
31122: MUL
31123: MUL
31124: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31125: LD_VAR 0 6
31129: PPUSH
31130: CALL_OW 264
31134: PUSH
31135: LD_INT 5
31137: PUSH
31138: LD_INT 6
31140: PUSH
31141: LD_INT 46
31143: PUSH
31144: LD_INT 44
31146: PUSH
31147: LD_INT 47
31149: PUSH
31150: LD_INT 45
31152: PUSH
31153: LD_INT 28
31155: PUSH
31156: LD_INT 7
31158: PUSH
31159: LD_INT 27
31161: PUSH
31162: LD_INT 29
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: IN
31177: PUSH
31178: LD_VAR 0 1
31182: PPUSH
31183: LD_INT 52
31185: PPUSH
31186: CALL_OW 321
31190: PUSH
31191: LD_INT 2
31193: EQUAL
31194: AND
31195: IFFALSE 31212
// bpoints := bpoints * 1.2 ;
31197: LD_ADDR_VAR 0 10
31201: PUSH
31202: LD_VAR 0 10
31206: PUSH
31207: LD_REAL  1.20000000000000E+0000
31210: MUL
31211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31212: LD_VAR 0 6
31216: PPUSH
31217: CALL_OW 264
31221: PUSH
31222: LD_INT 6
31224: PUSH
31225: LD_INT 46
31227: PUSH
31228: LD_INT 47
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: LIST
31235: IN
31236: IFFALSE 31253
// bpoints := bpoints * 1.2 ;
31238: LD_ADDR_VAR 0 10
31242: PUSH
31243: LD_VAR 0 10
31247: PUSH
31248: LD_REAL  1.20000000000000E+0000
31251: MUL
31252: ST_TO_ADDR
// end ; unit_building :
31253: GO 31267
31255: LD_INT 3
31257: DOUBLE
31258: EQUAL
31259: IFTRUE 31263
31261: GO 31266
31263: POP
// ; end ;
31264: GO 31267
31266: POP
// for j = 1 to 3 do
31267: LD_ADDR_VAR 0 7
31271: PUSH
31272: DOUBLE
31273: LD_INT 1
31275: DEC
31276: ST_TO_ADDR
31277: LD_INT 3
31279: PUSH
31280: FOR_TO
31281: IFFALSE 31334
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31283: LD_ADDR_VAR 0 5
31287: PUSH
31288: LD_VAR 0 5
31292: PPUSH
31293: LD_VAR 0 7
31297: PPUSH
31298: LD_VAR 0 5
31302: PUSH
31303: LD_VAR 0 7
31307: ARRAY
31308: PUSH
31309: LD_VAR 0 9
31313: PUSH
31314: LD_VAR 0 7
31318: ARRAY
31319: PUSH
31320: LD_VAR 0 10
31324: MUL
31325: PLUS
31326: PPUSH
31327: CALL_OW 1
31331: ST_TO_ADDR
31332: GO 31280
31334: POP
31335: POP
// end ;
31336: GO 29813
31338: POP
31339: POP
// result := Replace ( result , 4 , tmp ) ;
31340: LD_ADDR_VAR 0 5
31344: PUSH
31345: LD_VAR 0 5
31349: PPUSH
31350: LD_INT 4
31352: PPUSH
31353: LD_VAR 0 8
31357: PPUSH
31358: CALL_OW 1
31362: ST_TO_ADDR
// end ;
31363: LD_VAR 0 5
31367: RET
// export function DangerAtRange ( unit , range ) ; begin
31368: LD_INT 0
31370: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31371: LD_ADDR_VAR 0 3
31375: PUSH
31376: LD_VAR 0 1
31380: PPUSH
31381: CALL_OW 255
31385: PPUSH
31386: LD_VAR 0 1
31390: PPUSH
31391: CALL_OW 250
31395: PPUSH
31396: LD_VAR 0 1
31400: PPUSH
31401: CALL_OW 251
31405: PPUSH
31406: LD_VAR 0 2
31410: PPUSH
31411: CALL 29665 0 4
31415: ST_TO_ADDR
// end ;
31416: LD_VAR 0 3
31420: RET
// export function DangerInArea ( side , area ) ; begin
31421: LD_INT 0
31423: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31424: LD_ADDR_VAR 0 3
31428: PUSH
31429: LD_VAR 0 2
31433: PPUSH
31434: LD_INT 81
31436: PUSH
31437: LD_VAR 0 1
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PPUSH
31446: CALL_OW 70
31450: ST_TO_ADDR
// end ;
31451: LD_VAR 0 3
31455: RET
// export function IsExtension ( b ) ; begin
31456: LD_INT 0
31458: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31459: LD_ADDR_VAR 0 2
31463: PUSH
31464: LD_VAR 0 1
31468: PUSH
31469: LD_INT 23
31471: PUSH
31472: LD_INT 20
31474: PUSH
31475: LD_INT 22
31477: PUSH
31478: LD_INT 17
31480: PUSH
31481: LD_INT 24
31483: PUSH
31484: LD_INT 21
31486: PUSH
31487: LD_INT 19
31489: PUSH
31490: LD_INT 16
31492: PUSH
31493: LD_INT 25
31495: PUSH
31496: LD_INT 18
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: IN
31511: ST_TO_ADDR
// end ;
31512: LD_VAR 0 2
31516: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31517: LD_INT 0
31519: PPUSH
31520: PPUSH
31521: PPUSH
// result := [ ] ;
31522: LD_ADDR_VAR 0 4
31526: PUSH
31527: EMPTY
31528: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31529: LD_ADDR_VAR 0 5
31533: PUSH
31534: LD_VAR 0 2
31538: PPUSH
31539: LD_INT 21
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PPUSH
31549: CALL_OW 70
31553: ST_TO_ADDR
// if not tmp then
31554: LD_VAR 0 5
31558: NOT
31559: IFFALSE 31563
// exit ;
31561: GO 31627
// if checkLink then
31563: LD_VAR 0 3
31567: IFFALSE 31617
// begin for i in tmp do
31569: LD_ADDR_VAR 0 6
31573: PUSH
31574: LD_VAR 0 5
31578: PUSH
31579: FOR_IN
31580: IFFALSE 31615
// if GetBase ( i ) <> base then
31582: LD_VAR 0 6
31586: PPUSH
31587: CALL_OW 274
31591: PUSH
31592: LD_VAR 0 1
31596: NONEQUAL
31597: IFFALSE 31613
// ComLinkToBase ( base , i ) ;
31599: LD_VAR 0 1
31603: PPUSH
31604: LD_VAR 0 6
31608: PPUSH
31609: CALL_OW 169
31613: GO 31579
31615: POP
31616: POP
// end ; result := tmp ;
31617: LD_ADDR_VAR 0 4
31621: PUSH
31622: LD_VAR 0 5
31626: ST_TO_ADDR
// end ;
31627: LD_VAR 0 4
31631: RET
// export function ComComplete ( units , b ) ; var i ; begin
31632: LD_INT 0
31634: PPUSH
31635: PPUSH
// if not units then
31636: LD_VAR 0 1
31640: NOT
31641: IFFALSE 31645
// exit ;
31643: GO 31735
// for i in units do
31645: LD_ADDR_VAR 0 4
31649: PUSH
31650: LD_VAR 0 1
31654: PUSH
31655: FOR_IN
31656: IFFALSE 31733
// if BuildingStatus ( b ) = bs_build then
31658: LD_VAR 0 2
31662: PPUSH
31663: CALL_OW 461
31667: PUSH
31668: LD_INT 1
31670: EQUAL
31671: IFFALSE 31731
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31673: LD_VAR 0 4
31677: PPUSH
31678: LD_STRING h
31680: PUSH
31681: LD_VAR 0 2
31685: PPUSH
31686: CALL_OW 250
31690: PUSH
31691: LD_VAR 0 2
31695: PPUSH
31696: CALL_OW 251
31700: PUSH
31701: LD_VAR 0 2
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: PUSH
31724: EMPTY
31725: LIST
31726: PPUSH
31727: CALL_OW 446
31731: GO 31655
31733: POP
31734: POP
// end ;
31735: LD_VAR 0 3
31739: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31740: LD_INT 0
31742: PPUSH
31743: PPUSH
31744: PPUSH
31745: PPUSH
31746: PPUSH
31747: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31748: LD_VAR 0 1
31752: NOT
31753: PUSH
31754: LD_VAR 0 1
31758: PPUSH
31759: CALL_OW 263
31763: PUSH
31764: LD_INT 2
31766: NONEQUAL
31767: OR
31768: IFFALSE 31772
// exit ;
31770: GO 32088
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31772: LD_ADDR_VAR 0 6
31776: PUSH
31777: LD_INT 22
31779: PUSH
31780: LD_VAR 0 1
31784: PPUSH
31785: CALL_OW 255
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 2
31796: PUSH
31797: LD_INT 30
31799: PUSH
31800: LD_INT 36
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 34
31809: PUSH
31810: LD_INT 31
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: LIST
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PPUSH
31826: CALL_OW 69
31830: ST_TO_ADDR
// if not tmp then
31831: LD_VAR 0 6
31835: NOT
31836: IFFALSE 31840
// exit ;
31838: GO 32088
// result := [ ] ;
31840: LD_ADDR_VAR 0 2
31844: PUSH
31845: EMPTY
31846: ST_TO_ADDR
// for i in tmp do
31847: LD_ADDR_VAR 0 3
31851: PUSH
31852: LD_VAR 0 6
31856: PUSH
31857: FOR_IN
31858: IFFALSE 31929
// begin t := UnitsInside ( i ) ;
31860: LD_ADDR_VAR 0 4
31864: PUSH
31865: LD_VAR 0 3
31869: PPUSH
31870: CALL_OW 313
31874: ST_TO_ADDR
// if t then
31875: LD_VAR 0 4
31879: IFFALSE 31927
// for j in t do
31881: LD_ADDR_VAR 0 7
31885: PUSH
31886: LD_VAR 0 4
31890: PUSH
31891: FOR_IN
31892: IFFALSE 31925
// result := Replace ( result , result + 1 , j ) ;
31894: LD_ADDR_VAR 0 2
31898: PUSH
31899: LD_VAR 0 2
31903: PPUSH
31904: LD_VAR 0 2
31908: PUSH
31909: LD_INT 1
31911: PLUS
31912: PPUSH
31913: LD_VAR 0 7
31917: PPUSH
31918: CALL_OW 1
31922: ST_TO_ADDR
31923: GO 31891
31925: POP
31926: POP
// end ;
31927: GO 31857
31929: POP
31930: POP
// if not result then
31931: LD_VAR 0 2
31935: NOT
31936: IFFALSE 31940
// exit ;
31938: GO 32088
// mech := result [ 1 ] ;
31940: LD_ADDR_VAR 0 5
31944: PUSH
31945: LD_VAR 0 2
31949: PUSH
31950: LD_INT 1
31952: ARRAY
31953: ST_TO_ADDR
// if result > 1 then
31954: LD_VAR 0 2
31958: PUSH
31959: LD_INT 1
31961: GREATER
31962: IFFALSE 32074
// begin for i = 2 to result do
31964: LD_ADDR_VAR 0 3
31968: PUSH
31969: DOUBLE
31970: LD_INT 2
31972: DEC
31973: ST_TO_ADDR
31974: LD_VAR 0 2
31978: PUSH
31979: FOR_TO
31980: IFFALSE 32072
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31982: LD_ADDR_VAR 0 4
31986: PUSH
31987: LD_VAR 0 2
31991: PUSH
31992: LD_VAR 0 3
31996: ARRAY
31997: PPUSH
31998: LD_INT 3
32000: PPUSH
32001: CALL_OW 259
32005: PUSH
32006: LD_VAR 0 2
32010: PUSH
32011: LD_VAR 0 3
32015: ARRAY
32016: PPUSH
32017: CALL_OW 432
32021: MINUS
32022: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32023: LD_VAR 0 4
32027: PUSH
32028: LD_VAR 0 5
32032: PPUSH
32033: LD_INT 3
32035: PPUSH
32036: CALL_OW 259
32040: PUSH
32041: LD_VAR 0 5
32045: PPUSH
32046: CALL_OW 432
32050: MINUS
32051: GREATEREQUAL
32052: IFFALSE 32070
// mech := result [ i ] ;
32054: LD_ADDR_VAR 0 5
32058: PUSH
32059: LD_VAR 0 2
32063: PUSH
32064: LD_VAR 0 3
32068: ARRAY
32069: ST_TO_ADDR
// end ;
32070: GO 31979
32072: POP
32073: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32074: LD_VAR 0 1
32078: PPUSH
32079: LD_VAR 0 5
32083: PPUSH
32084: CALL_OW 135
// end ;
32088: LD_VAR 0 2
32092: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32093: LD_INT 0
32095: PPUSH
32096: PPUSH
32097: PPUSH
32098: PPUSH
32099: PPUSH
32100: PPUSH
32101: PPUSH
32102: PPUSH
32103: PPUSH
32104: PPUSH
32105: PPUSH
32106: PPUSH
32107: PPUSH
// result := [ ] ;
32108: LD_ADDR_VAR 0 7
32112: PUSH
32113: EMPTY
32114: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32115: LD_VAR 0 1
32119: PPUSH
32120: CALL_OW 266
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: IN
32135: NOT
32136: IFFALSE 32140
// exit ;
32138: GO 33774
// if name then
32140: LD_VAR 0 3
32144: IFFALSE 32160
// SetBName ( base_dep , name ) ;
32146: LD_VAR 0 1
32150: PPUSH
32151: LD_VAR 0 3
32155: PPUSH
32156: CALL_OW 500
// base := GetBase ( base_dep ) ;
32160: LD_ADDR_VAR 0 15
32164: PUSH
32165: LD_VAR 0 1
32169: PPUSH
32170: CALL_OW 274
32174: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32175: LD_ADDR_VAR 0 16
32179: PUSH
32180: LD_VAR 0 1
32184: PPUSH
32185: CALL_OW 255
32189: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32190: LD_ADDR_VAR 0 17
32194: PUSH
32195: LD_VAR 0 1
32199: PPUSH
32200: CALL_OW 248
32204: ST_TO_ADDR
// if sources then
32205: LD_VAR 0 5
32209: IFFALSE 32256
// for i = 1 to 3 do
32211: LD_ADDR_VAR 0 8
32215: PUSH
32216: DOUBLE
32217: LD_INT 1
32219: DEC
32220: ST_TO_ADDR
32221: LD_INT 3
32223: PUSH
32224: FOR_TO
32225: IFFALSE 32254
// AddResourceType ( base , i , sources [ i ] ) ;
32227: LD_VAR 0 15
32231: PPUSH
32232: LD_VAR 0 8
32236: PPUSH
32237: LD_VAR 0 5
32241: PUSH
32242: LD_VAR 0 8
32246: ARRAY
32247: PPUSH
32248: CALL_OW 276
32252: GO 32224
32254: POP
32255: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32256: LD_ADDR_VAR 0 18
32260: PUSH
32261: LD_VAR 0 15
32265: PPUSH
32266: LD_VAR 0 2
32270: PPUSH
32271: LD_INT 1
32273: PPUSH
32274: CALL 31517 0 3
32278: ST_TO_ADDR
// InitHc ;
32279: CALL_OW 19
// InitUc ;
32283: CALL_OW 18
// uc_side := side ;
32287: LD_ADDR_OWVAR 20
32291: PUSH
32292: LD_VAR 0 16
32296: ST_TO_ADDR
// uc_nation := nation ;
32297: LD_ADDR_OWVAR 21
32301: PUSH
32302: LD_VAR 0 17
32306: ST_TO_ADDR
// if buildings then
32307: LD_VAR 0 18
32311: IFFALSE 33633
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32313: LD_ADDR_VAR 0 19
32317: PUSH
32318: LD_VAR 0 18
32322: PPUSH
32323: LD_INT 2
32325: PUSH
32326: LD_INT 30
32328: PUSH
32329: LD_INT 29
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 30
32338: PUSH
32339: LD_INT 30
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: PPUSH
32351: CALL_OW 72
32355: ST_TO_ADDR
// if tmp then
32356: LD_VAR 0 19
32360: IFFALSE 32408
// for i in tmp do
32362: LD_ADDR_VAR 0 8
32366: PUSH
32367: LD_VAR 0 19
32371: PUSH
32372: FOR_IN
32373: IFFALSE 32406
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32375: LD_VAR 0 8
32379: PPUSH
32380: CALL_OW 250
32384: PPUSH
32385: LD_VAR 0 8
32389: PPUSH
32390: CALL_OW 251
32394: PPUSH
32395: LD_VAR 0 16
32399: PPUSH
32400: CALL_OW 441
32404: GO 32372
32406: POP
32407: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32408: LD_VAR 0 18
32412: PPUSH
32413: LD_INT 2
32415: PUSH
32416: LD_INT 30
32418: PUSH
32419: LD_INT 32
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 30
32428: PUSH
32429: LD_INT 33
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: LIST
32440: PPUSH
32441: CALL_OW 72
32445: IFFALSE 32533
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32447: LD_ADDR_VAR 0 8
32451: PUSH
32452: LD_VAR 0 18
32456: PPUSH
32457: LD_INT 2
32459: PUSH
32460: LD_INT 30
32462: PUSH
32463: LD_INT 32
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 30
32472: PUSH
32473: LD_INT 33
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: PPUSH
32485: CALL_OW 72
32489: PUSH
32490: FOR_IN
32491: IFFALSE 32531
// begin if not GetBWeapon ( i ) then
32493: LD_VAR 0 8
32497: PPUSH
32498: CALL_OW 269
32502: NOT
32503: IFFALSE 32529
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32505: LD_VAR 0 8
32509: PPUSH
32510: LD_VAR 0 8
32514: PPUSH
32515: LD_VAR 0 2
32519: PPUSH
32520: CALL 33779 0 2
32524: PPUSH
32525: CALL_OW 431
// end ;
32529: GO 32490
32531: POP
32532: POP
// end ; for i = 1 to personel do
32533: LD_ADDR_VAR 0 8
32537: PUSH
32538: DOUBLE
32539: LD_INT 1
32541: DEC
32542: ST_TO_ADDR
32543: LD_VAR 0 6
32547: PUSH
32548: FOR_TO
32549: IFFALSE 33613
// begin if i > 4 then
32551: LD_VAR 0 8
32555: PUSH
32556: LD_INT 4
32558: GREATER
32559: IFFALSE 32563
// break ;
32561: GO 33613
// case i of 1 :
32563: LD_VAR 0 8
32567: PUSH
32568: LD_INT 1
32570: DOUBLE
32571: EQUAL
32572: IFTRUE 32576
32574: GO 32656
32576: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32577: LD_ADDR_VAR 0 12
32581: PUSH
32582: LD_VAR 0 18
32586: PPUSH
32587: LD_INT 22
32589: PUSH
32590: LD_VAR 0 16
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 58
32601: PUSH
32602: EMPTY
32603: LIST
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: LD_INT 30
32610: PUSH
32611: LD_INT 32
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 30
32620: PUSH
32621: LD_INT 4
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 30
32630: PUSH
32631: LD_INT 5
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: PPUSH
32649: CALL_OW 72
32653: ST_TO_ADDR
32654: GO 32878
32656: LD_INT 2
32658: DOUBLE
32659: EQUAL
32660: IFTRUE 32664
32662: GO 32726
32664: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32665: LD_ADDR_VAR 0 12
32669: PUSH
32670: LD_VAR 0 18
32674: PPUSH
32675: LD_INT 22
32677: PUSH
32678: LD_VAR 0 16
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 2
32689: PUSH
32690: LD_INT 30
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 30
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: LIST
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PPUSH
32719: CALL_OW 72
32723: ST_TO_ADDR
32724: GO 32878
32726: LD_INT 3
32728: DOUBLE
32729: EQUAL
32730: IFTRUE 32734
32732: GO 32796
32734: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32735: LD_ADDR_VAR 0 12
32739: PUSH
32740: LD_VAR 0 18
32744: PPUSH
32745: LD_INT 22
32747: PUSH
32748: LD_VAR 0 16
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: LD_INT 30
32762: PUSH
32763: LD_INT 2
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 30
32772: PUSH
32773: LD_INT 3
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: LIST
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PPUSH
32789: CALL_OW 72
32793: ST_TO_ADDR
32794: GO 32878
32796: LD_INT 4
32798: DOUBLE
32799: EQUAL
32800: IFTRUE 32804
32802: GO 32877
32804: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32805: LD_ADDR_VAR 0 12
32809: PUSH
32810: LD_VAR 0 18
32814: PPUSH
32815: LD_INT 22
32817: PUSH
32818: LD_VAR 0 16
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: LD_INT 30
32832: PUSH
32833: LD_INT 6
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 30
32842: PUSH
32843: LD_INT 7
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 30
32852: PUSH
32853: LD_INT 8
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PPUSH
32870: CALL_OW 72
32874: ST_TO_ADDR
32875: GO 32878
32877: POP
// if i = 1 then
32878: LD_VAR 0 8
32882: PUSH
32883: LD_INT 1
32885: EQUAL
32886: IFFALSE 32997
// begin tmp := [ ] ;
32888: LD_ADDR_VAR 0 19
32892: PUSH
32893: EMPTY
32894: ST_TO_ADDR
// for j in f do
32895: LD_ADDR_VAR 0 9
32899: PUSH
32900: LD_VAR 0 12
32904: PUSH
32905: FOR_IN
32906: IFFALSE 32979
// if GetBType ( j ) = b_bunker then
32908: LD_VAR 0 9
32912: PPUSH
32913: CALL_OW 266
32917: PUSH
32918: LD_INT 32
32920: EQUAL
32921: IFFALSE 32948
// tmp := Insert ( tmp , 1 , j ) else
32923: LD_ADDR_VAR 0 19
32927: PUSH
32928: LD_VAR 0 19
32932: PPUSH
32933: LD_INT 1
32935: PPUSH
32936: LD_VAR 0 9
32940: PPUSH
32941: CALL_OW 2
32945: ST_TO_ADDR
32946: GO 32977
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32948: LD_ADDR_VAR 0 19
32952: PUSH
32953: LD_VAR 0 19
32957: PPUSH
32958: LD_VAR 0 19
32962: PUSH
32963: LD_INT 1
32965: PLUS
32966: PPUSH
32967: LD_VAR 0 9
32971: PPUSH
32972: CALL_OW 2
32976: ST_TO_ADDR
32977: GO 32905
32979: POP
32980: POP
// if tmp then
32981: LD_VAR 0 19
32985: IFFALSE 32997
// f := tmp ;
32987: LD_ADDR_VAR 0 12
32991: PUSH
32992: LD_VAR 0 19
32996: ST_TO_ADDR
// end ; x := personel [ i ] ;
32997: LD_ADDR_VAR 0 13
33001: PUSH
33002: LD_VAR 0 6
33006: PUSH
33007: LD_VAR 0 8
33011: ARRAY
33012: ST_TO_ADDR
// if x = - 1 then
33013: LD_VAR 0 13
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: EQUAL
33022: IFFALSE 33231
// begin for j in f do
33024: LD_ADDR_VAR 0 9
33028: PUSH
33029: LD_VAR 0 12
33033: PUSH
33034: FOR_IN
33035: IFFALSE 33227
// repeat InitHc ;
33037: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33041: LD_VAR 0 9
33045: PPUSH
33046: CALL_OW 266
33050: PUSH
33051: LD_INT 5
33053: EQUAL
33054: IFFALSE 33124
// begin if UnitsInside ( j ) < 3 then
33056: LD_VAR 0 9
33060: PPUSH
33061: CALL_OW 313
33065: PUSH
33066: LD_INT 3
33068: LESS
33069: IFFALSE 33105
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33071: LD_INT 0
33073: PPUSH
33074: LD_INT 5
33076: PUSH
33077: LD_INT 8
33079: PUSH
33080: LD_INT 9
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: PUSH
33088: LD_VAR 0 17
33092: ARRAY
33093: PPUSH
33094: LD_VAR 0 4
33098: PPUSH
33099: CALL_OW 380
33103: GO 33122
// PrepareHuman ( false , i , skill ) ;
33105: LD_INT 0
33107: PPUSH
33108: LD_VAR 0 8
33112: PPUSH
33113: LD_VAR 0 4
33117: PPUSH
33118: CALL_OW 380
// end else
33122: GO 33141
// PrepareHuman ( false , i , skill ) ;
33124: LD_INT 0
33126: PPUSH
33127: LD_VAR 0 8
33131: PPUSH
33132: LD_VAR 0 4
33136: PPUSH
33137: CALL_OW 380
// un := CreateHuman ;
33141: LD_ADDR_VAR 0 14
33145: PUSH
33146: CALL_OW 44
33150: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33151: LD_ADDR_VAR 0 7
33155: PUSH
33156: LD_VAR 0 7
33160: PPUSH
33161: LD_INT 1
33163: PPUSH
33164: LD_VAR 0 14
33168: PPUSH
33169: CALL_OW 2
33173: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33174: LD_VAR 0 14
33178: PPUSH
33179: LD_VAR 0 9
33183: PPUSH
33184: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33188: LD_VAR 0 9
33192: PPUSH
33193: CALL_OW 313
33197: PUSH
33198: LD_INT 6
33200: EQUAL
33201: PUSH
33202: LD_VAR 0 9
33206: PPUSH
33207: CALL_OW 266
33211: PUSH
33212: LD_INT 32
33214: PUSH
33215: LD_INT 31
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: IN
33222: OR
33223: IFFALSE 33037
33225: GO 33034
33227: POP
33228: POP
// end else
33229: GO 33611
// for j = 1 to x do
33231: LD_ADDR_VAR 0 9
33235: PUSH
33236: DOUBLE
33237: LD_INT 1
33239: DEC
33240: ST_TO_ADDR
33241: LD_VAR 0 13
33245: PUSH
33246: FOR_TO
33247: IFFALSE 33609
// begin InitHc ;
33249: CALL_OW 19
// if not f then
33253: LD_VAR 0 12
33257: NOT
33258: IFFALSE 33347
// begin PrepareHuman ( false , i , skill ) ;
33260: LD_INT 0
33262: PPUSH
33263: LD_VAR 0 8
33267: PPUSH
33268: LD_VAR 0 4
33272: PPUSH
33273: CALL_OW 380
// un := CreateHuman ;
33277: LD_ADDR_VAR 0 14
33281: PUSH
33282: CALL_OW 44
33286: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33287: LD_ADDR_VAR 0 7
33291: PUSH
33292: LD_VAR 0 7
33296: PPUSH
33297: LD_INT 1
33299: PPUSH
33300: LD_VAR 0 14
33304: PPUSH
33305: CALL_OW 2
33309: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33310: LD_VAR 0 14
33314: PPUSH
33315: LD_VAR 0 1
33319: PPUSH
33320: CALL_OW 250
33324: PPUSH
33325: LD_VAR 0 1
33329: PPUSH
33330: CALL_OW 251
33334: PPUSH
33335: LD_INT 10
33337: PPUSH
33338: LD_INT 0
33340: PPUSH
33341: CALL_OW 50
// continue ;
33345: GO 33246
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33347: LD_VAR 0 12
33351: PUSH
33352: LD_INT 1
33354: ARRAY
33355: PPUSH
33356: CALL_OW 313
33360: PUSH
33361: LD_VAR 0 12
33365: PUSH
33366: LD_INT 1
33368: ARRAY
33369: PPUSH
33370: CALL_OW 266
33374: PUSH
33375: LD_INT 32
33377: PUSH
33378: LD_INT 31
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: IN
33385: AND
33386: PUSH
33387: LD_VAR 0 12
33391: PUSH
33392: LD_INT 1
33394: ARRAY
33395: PPUSH
33396: CALL_OW 313
33400: PUSH
33401: LD_INT 6
33403: EQUAL
33404: OR
33405: IFFALSE 33425
// f := Delete ( f , 1 ) ;
33407: LD_ADDR_VAR 0 12
33411: PUSH
33412: LD_VAR 0 12
33416: PPUSH
33417: LD_INT 1
33419: PPUSH
33420: CALL_OW 3
33424: ST_TO_ADDR
// if not f then
33425: LD_VAR 0 12
33429: NOT
33430: IFFALSE 33448
// begin x := x + 2 ;
33432: LD_ADDR_VAR 0 13
33436: PUSH
33437: LD_VAR 0 13
33441: PUSH
33442: LD_INT 2
33444: PLUS
33445: ST_TO_ADDR
// continue ;
33446: GO 33246
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33448: LD_VAR 0 12
33452: PUSH
33453: LD_INT 1
33455: ARRAY
33456: PPUSH
33457: CALL_OW 266
33461: PUSH
33462: LD_INT 5
33464: EQUAL
33465: IFFALSE 33539
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33467: LD_VAR 0 12
33471: PUSH
33472: LD_INT 1
33474: ARRAY
33475: PPUSH
33476: CALL_OW 313
33480: PUSH
33481: LD_INT 3
33483: LESS
33484: IFFALSE 33520
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33486: LD_INT 0
33488: PPUSH
33489: LD_INT 5
33491: PUSH
33492: LD_INT 8
33494: PUSH
33495: LD_INT 9
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: LIST
33502: PUSH
33503: LD_VAR 0 17
33507: ARRAY
33508: PPUSH
33509: LD_VAR 0 4
33513: PPUSH
33514: CALL_OW 380
33518: GO 33537
// PrepareHuman ( false , i , skill ) ;
33520: LD_INT 0
33522: PPUSH
33523: LD_VAR 0 8
33527: PPUSH
33528: LD_VAR 0 4
33532: PPUSH
33533: CALL_OW 380
// end else
33537: GO 33556
// PrepareHuman ( false , i , skill ) ;
33539: LD_INT 0
33541: PPUSH
33542: LD_VAR 0 8
33546: PPUSH
33547: LD_VAR 0 4
33551: PPUSH
33552: CALL_OW 380
// un := CreateHuman ;
33556: LD_ADDR_VAR 0 14
33560: PUSH
33561: CALL_OW 44
33565: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33566: LD_ADDR_VAR 0 7
33570: PUSH
33571: LD_VAR 0 7
33575: PPUSH
33576: LD_INT 1
33578: PPUSH
33579: LD_VAR 0 14
33583: PPUSH
33584: CALL_OW 2
33588: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33589: LD_VAR 0 14
33593: PPUSH
33594: LD_VAR 0 12
33598: PUSH
33599: LD_INT 1
33601: ARRAY
33602: PPUSH
33603: CALL_OW 52
// end ;
33607: GO 33246
33609: POP
33610: POP
// end ;
33611: GO 32548
33613: POP
33614: POP
// result := result ^ buildings ;
33615: LD_ADDR_VAR 0 7
33619: PUSH
33620: LD_VAR 0 7
33624: PUSH
33625: LD_VAR 0 18
33629: ADD
33630: ST_TO_ADDR
// end else
33631: GO 33774
// begin for i = 1 to personel do
33633: LD_ADDR_VAR 0 8
33637: PUSH
33638: DOUBLE
33639: LD_INT 1
33641: DEC
33642: ST_TO_ADDR
33643: LD_VAR 0 6
33647: PUSH
33648: FOR_TO
33649: IFFALSE 33772
// begin if i > 4 then
33651: LD_VAR 0 8
33655: PUSH
33656: LD_INT 4
33658: GREATER
33659: IFFALSE 33663
// break ;
33661: GO 33772
// x := personel [ i ] ;
33663: LD_ADDR_VAR 0 13
33667: PUSH
33668: LD_VAR 0 6
33672: PUSH
33673: LD_VAR 0 8
33677: ARRAY
33678: ST_TO_ADDR
// if x = - 1 then
33679: LD_VAR 0 13
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: EQUAL
33688: IFFALSE 33692
// continue ;
33690: GO 33648
// PrepareHuman ( false , i , skill ) ;
33692: LD_INT 0
33694: PPUSH
33695: LD_VAR 0 8
33699: PPUSH
33700: LD_VAR 0 4
33704: PPUSH
33705: CALL_OW 380
// un := CreateHuman ;
33709: LD_ADDR_VAR 0 14
33713: PUSH
33714: CALL_OW 44
33718: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33719: LD_VAR 0 14
33723: PPUSH
33724: LD_VAR 0 1
33728: PPUSH
33729: CALL_OW 250
33733: PPUSH
33734: LD_VAR 0 1
33738: PPUSH
33739: CALL_OW 251
33743: PPUSH
33744: LD_INT 10
33746: PPUSH
33747: LD_INT 0
33749: PPUSH
33750: CALL_OW 50
// result := result ^ un ;
33754: LD_ADDR_VAR 0 7
33758: PUSH
33759: LD_VAR 0 7
33763: PUSH
33764: LD_VAR 0 14
33768: ADD
33769: ST_TO_ADDR
// end ;
33770: GO 33648
33772: POP
33773: POP
// end ; end ;
33774: LD_VAR 0 7
33778: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33779: LD_INT 0
33781: PPUSH
33782: PPUSH
33783: PPUSH
33784: PPUSH
33785: PPUSH
33786: PPUSH
33787: PPUSH
33788: PPUSH
33789: PPUSH
33790: PPUSH
33791: PPUSH
33792: PPUSH
33793: PPUSH
33794: PPUSH
33795: PPUSH
33796: PPUSH
// result := false ;
33797: LD_ADDR_VAR 0 3
33801: PUSH
33802: LD_INT 0
33804: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33805: LD_VAR 0 1
33809: NOT
33810: PUSH
33811: LD_VAR 0 1
33815: PPUSH
33816: CALL_OW 266
33820: PUSH
33821: LD_INT 32
33823: PUSH
33824: LD_INT 33
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: IN
33831: NOT
33832: OR
33833: IFFALSE 33837
// exit ;
33835: GO 34946
// nat := GetNation ( tower ) ;
33837: LD_ADDR_VAR 0 12
33841: PUSH
33842: LD_VAR 0 1
33846: PPUSH
33847: CALL_OW 248
33851: ST_TO_ADDR
// side := GetSide ( tower ) ;
33852: LD_ADDR_VAR 0 16
33856: PUSH
33857: LD_VAR 0 1
33861: PPUSH
33862: CALL_OW 255
33866: ST_TO_ADDR
// x := GetX ( tower ) ;
33867: LD_ADDR_VAR 0 10
33871: PUSH
33872: LD_VAR 0 1
33876: PPUSH
33877: CALL_OW 250
33881: ST_TO_ADDR
// y := GetY ( tower ) ;
33882: LD_ADDR_VAR 0 11
33886: PUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 251
33896: ST_TO_ADDR
// if not x or not y then
33897: LD_VAR 0 10
33901: NOT
33902: PUSH
33903: LD_VAR 0 11
33907: NOT
33908: OR
33909: IFFALSE 33913
// exit ;
33911: GO 34946
// weapon := 0 ;
33913: LD_ADDR_VAR 0 18
33917: PUSH
33918: LD_INT 0
33920: ST_TO_ADDR
// fac_list := [ ] ;
33921: LD_ADDR_VAR 0 17
33925: PUSH
33926: EMPTY
33927: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33928: LD_ADDR_VAR 0 6
33932: PUSH
33933: LD_VAR 0 1
33937: PPUSH
33938: CALL_OW 274
33942: PPUSH
33943: LD_VAR 0 2
33947: PPUSH
33948: LD_INT 0
33950: PPUSH
33951: CALL 31517 0 3
33955: PPUSH
33956: LD_INT 30
33958: PUSH
33959: LD_INT 3
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PPUSH
33966: CALL_OW 72
33970: ST_TO_ADDR
// if not factories then
33971: LD_VAR 0 6
33975: NOT
33976: IFFALSE 33980
// exit ;
33978: GO 34946
// for i in factories do
33980: LD_ADDR_VAR 0 8
33984: PUSH
33985: LD_VAR 0 6
33989: PUSH
33990: FOR_IN
33991: IFFALSE 34016
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33993: LD_ADDR_VAR 0 17
33997: PUSH
33998: LD_VAR 0 17
34002: PUSH
34003: LD_VAR 0 8
34007: PPUSH
34008: CALL_OW 478
34012: UNION
34013: ST_TO_ADDR
34014: GO 33990
34016: POP
34017: POP
// if not fac_list then
34018: LD_VAR 0 17
34022: NOT
34023: IFFALSE 34027
// exit ;
34025: GO 34946
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34027: LD_ADDR_VAR 0 5
34031: PUSH
34032: LD_INT 4
34034: PUSH
34035: LD_INT 5
34037: PUSH
34038: LD_INT 9
34040: PUSH
34041: LD_INT 10
34043: PUSH
34044: LD_INT 6
34046: PUSH
34047: LD_INT 7
34049: PUSH
34050: LD_INT 11
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 27
34064: PUSH
34065: LD_INT 28
34067: PUSH
34068: LD_INT 26
34070: PUSH
34071: LD_INT 30
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 43
34082: PUSH
34083: LD_INT 44
34085: PUSH
34086: LD_INT 46
34088: PUSH
34089: LD_INT 45
34091: PUSH
34092: LD_INT 47
34094: PUSH
34095: LD_INT 49
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: PUSH
34111: LD_VAR 0 12
34115: ARRAY
34116: ST_TO_ADDR
// list := list isect fac_list ;
34117: LD_ADDR_VAR 0 5
34121: PUSH
34122: LD_VAR 0 5
34126: PUSH
34127: LD_VAR 0 17
34131: ISECT
34132: ST_TO_ADDR
// if not list then
34133: LD_VAR 0 5
34137: NOT
34138: IFFALSE 34142
// exit ;
34140: GO 34946
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34142: LD_VAR 0 12
34146: PUSH
34147: LD_INT 3
34149: EQUAL
34150: PUSH
34151: LD_INT 49
34153: PUSH
34154: LD_VAR 0 5
34158: IN
34159: AND
34160: PUSH
34161: LD_INT 31
34163: PPUSH
34164: LD_VAR 0 16
34168: PPUSH
34169: CALL_OW 321
34173: PUSH
34174: LD_INT 2
34176: EQUAL
34177: AND
34178: IFFALSE 34238
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34180: LD_INT 22
34182: PUSH
34183: LD_VAR 0 16
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 35
34194: PUSH
34195: LD_INT 49
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 91
34204: PUSH
34205: LD_VAR 0 1
34209: PUSH
34210: LD_INT 10
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: LIST
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: PPUSH
34223: CALL_OW 69
34227: NOT
34228: IFFALSE 34238
// weapon := ru_time_lapser ;
34230: LD_ADDR_VAR 0 18
34234: PUSH
34235: LD_INT 49
34237: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34238: LD_VAR 0 12
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: LD_INT 2
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: IN
34253: PUSH
34254: LD_INT 11
34256: PUSH
34257: LD_VAR 0 5
34261: IN
34262: PUSH
34263: LD_INT 30
34265: PUSH
34266: LD_VAR 0 5
34270: IN
34271: OR
34272: AND
34273: PUSH
34274: LD_INT 6
34276: PPUSH
34277: LD_VAR 0 16
34281: PPUSH
34282: CALL_OW 321
34286: PUSH
34287: LD_INT 2
34289: EQUAL
34290: AND
34291: IFFALSE 34456
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34293: LD_INT 22
34295: PUSH
34296: LD_VAR 0 16
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: LD_INT 35
34310: PUSH
34311: LD_INT 11
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 35
34320: PUSH
34321: LD_INT 30
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 91
34335: PUSH
34336: LD_VAR 0 1
34340: PUSH
34341: LD_INT 18
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: LIST
34353: PPUSH
34354: CALL_OW 69
34358: NOT
34359: PUSH
34360: LD_INT 22
34362: PUSH
34363: LD_VAR 0 16
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: LD_INT 30
34377: PUSH
34378: LD_INT 32
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 30
34387: PUSH
34388: LD_INT 33
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 91
34402: PUSH
34403: LD_VAR 0 1
34407: PUSH
34408: LD_INT 12
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: LIST
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: PUSH
34421: EMPTY
34422: LIST
34423: PPUSH
34424: CALL_OW 69
34428: PUSH
34429: LD_INT 2
34431: GREATER
34432: AND
34433: IFFALSE 34456
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34435: LD_ADDR_VAR 0 18
34439: PUSH
34440: LD_INT 11
34442: PUSH
34443: LD_INT 30
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_VAR 0 12
34454: ARRAY
34455: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34456: LD_VAR 0 18
34460: NOT
34461: PUSH
34462: LD_INT 40
34464: PPUSH
34465: LD_VAR 0 16
34469: PPUSH
34470: CALL_OW 321
34474: PUSH
34475: LD_INT 2
34477: EQUAL
34478: AND
34479: PUSH
34480: LD_INT 7
34482: PUSH
34483: LD_VAR 0 5
34487: IN
34488: PUSH
34489: LD_INT 28
34491: PUSH
34492: LD_VAR 0 5
34496: IN
34497: OR
34498: PUSH
34499: LD_INT 45
34501: PUSH
34502: LD_VAR 0 5
34506: IN
34507: OR
34508: AND
34509: IFFALSE 34763
// begin hex := GetHexInfo ( x , y ) ;
34511: LD_ADDR_VAR 0 4
34515: PUSH
34516: LD_VAR 0 10
34520: PPUSH
34521: LD_VAR 0 11
34525: PPUSH
34526: CALL_OW 546
34530: ST_TO_ADDR
// if hex [ 1 ] then
34531: LD_VAR 0 4
34535: PUSH
34536: LD_INT 1
34538: ARRAY
34539: IFFALSE 34543
// exit ;
34541: GO 34946
// height := hex [ 2 ] ;
34543: LD_ADDR_VAR 0 15
34547: PUSH
34548: LD_VAR 0 4
34552: PUSH
34553: LD_INT 2
34555: ARRAY
34556: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34557: LD_ADDR_VAR 0 14
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: LD_INT 3
34570: PUSH
34571: LD_INT 5
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: ST_TO_ADDR
// for i in tmp do
34580: LD_ADDR_VAR 0 8
34584: PUSH
34585: LD_VAR 0 14
34589: PUSH
34590: FOR_IN
34591: IFFALSE 34761
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34593: LD_ADDR_VAR 0 9
34597: PUSH
34598: LD_VAR 0 10
34602: PPUSH
34603: LD_VAR 0 8
34607: PPUSH
34608: LD_INT 5
34610: PPUSH
34611: CALL_OW 272
34615: PUSH
34616: LD_VAR 0 11
34620: PPUSH
34621: LD_VAR 0 8
34625: PPUSH
34626: LD_INT 5
34628: PPUSH
34629: CALL_OW 273
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34638: LD_VAR 0 9
34642: PUSH
34643: LD_INT 1
34645: ARRAY
34646: PPUSH
34647: LD_VAR 0 9
34651: PUSH
34652: LD_INT 2
34654: ARRAY
34655: PPUSH
34656: CALL_OW 488
34660: IFFALSE 34759
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34662: LD_ADDR_VAR 0 4
34666: PUSH
34667: LD_VAR 0 9
34671: PUSH
34672: LD_INT 1
34674: ARRAY
34675: PPUSH
34676: LD_VAR 0 9
34680: PUSH
34681: LD_INT 2
34683: ARRAY
34684: PPUSH
34685: CALL_OW 546
34689: ST_TO_ADDR
// if hex [ 1 ] then
34690: LD_VAR 0 4
34694: PUSH
34695: LD_INT 1
34697: ARRAY
34698: IFFALSE 34702
// continue ;
34700: GO 34590
// h := hex [ 2 ] ;
34702: LD_ADDR_VAR 0 13
34706: PUSH
34707: LD_VAR 0 4
34711: PUSH
34712: LD_INT 2
34714: ARRAY
34715: ST_TO_ADDR
// if h + 7 < height then
34716: LD_VAR 0 13
34720: PUSH
34721: LD_INT 7
34723: PLUS
34724: PUSH
34725: LD_VAR 0 15
34729: LESS
34730: IFFALSE 34759
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34732: LD_ADDR_VAR 0 18
34736: PUSH
34737: LD_INT 7
34739: PUSH
34740: LD_INT 28
34742: PUSH
34743: LD_INT 45
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: PUSH
34751: LD_VAR 0 12
34755: ARRAY
34756: ST_TO_ADDR
// break ;
34757: GO 34761
// end ; end ; end ;
34759: GO 34590
34761: POP
34762: POP
// end ; if not weapon then
34763: LD_VAR 0 18
34767: NOT
34768: IFFALSE 34828
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34770: LD_ADDR_VAR 0 5
34774: PUSH
34775: LD_VAR 0 5
34779: PUSH
34780: LD_INT 11
34782: PUSH
34783: LD_INT 30
34785: PUSH
34786: LD_INT 49
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: LIST
34793: DIFF
34794: ST_TO_ADDR
// if not list then
34795: LD_VAR 0 5
34799: NOT
34800: IFFALSE 34804
// exit ;
34802: GO 34946
// weapon := list [ rand ( 1 , list ) ] ;
34804: LD_ADDR_VAR 0 18
34808: PUSH
34809: LD_VAR 0 5
34813: PUSH
34814: LD_INT 1
34816: PPUSH
34817: LD_VAR 0 5
34821: PPUSH
34822: CALL_OW 12
34826: ARRAY
34827: ST_TO_ADDR
// end ; if weapon then
34828: LD_VAR 0 18
34832: IFFALSE 34946
// begin tmp := CostOfWeapon ( weapon ) ;
34834: LD_ADDR_VAR 0 14
34838: PUSH
34839: LD_VAR 0 18
34843: PPUSH
34844: CALL_OW 451
34848: ST_TO_ADDR
// j := GetBase ( tower ) ;
34849: LD_ADDR_VAR 0 9
34853: PUSH
34854: LD_VAR 0 1
34858: PPUSH
34859: CALL_OW 274
34863: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34864: LD_VAR 0 9
34868: PPUSH
34869: LD_INT 1
34871: PPUSH
34872: CALL_OW 275
34876: PUSH
34877: LD_VAR 0 14
34881: PUSH
34882: LD_INT 1
34884: ARRAY
34885: GREATEREQUAL
34886: PUSH
34887: LD_VAR 0 9
34891: PPUSH
34892: LD_INT 2
34894: PPUSH
34895: CALL_OW 275
34899: PUSH
34900: LD_VAR 0 14
34904: PUSH
34905: LD_INT 2
34907: ARRAY
34908: GREATEREQUAL
34909: AND
34910: PUSH
34911: LD_VAR 0 9
34915: PPUSH
34916: LD_INT 3
34918: PPUSH
34919: CALL_OW 275
34923: PUSH
34924: LD_VAR 0 14
34928: PUSH
34929: LD_INT 3
34931: ARRAY
34932: GREATEREQUAL
34933: AND
34934: IFFALSE 34946
// result := weapon ;
34936: LD_ADDR_VAR 0 3
34940: PUSH
34941: LD_VAR 0 18
34945: ST_TO_ADDR
// end ; end ;
34946: LD_VAR 0 3
34950: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34951: LD_INT 0
34953: PPUSH
34954: PPUSH
// result := true ;
34955: LD_ADDR_VAR 0 3
34959: PUSH
34960: LD_INT 1
34962: ST_TO_ADDR
// if array1 = array2 then
34963: LD_VAR 0 1
34967: PUSH
34968: LD_VAR 0 2
34972: EQUAL
34973: IFFALSE 35033
// begin for i = 1 to array1 do
34975: LD_ADDR_VAR 0 4
34979: PUSH
34980: DOUBLE
34981: LD_INT 1
34983: DEC
34984: ST_TO_ADDR
34985: LD_VAR 0 1
34989: PUSH
34990: FOR_TO
34991: IFFALSE 35029
// if array1 [ i ] <> array2 [ i ] then
34993: LD_VAR 0 1
34997: PUSH
34998: LD_VAR 0 4
35002: ARRAY
35003: PUSH
35004: LD_VAR 0 2
35008: PUSH
35009: LD_VAR 0 4
35013: ARRAY
35014: NONEQUAL
35015: IFFALSE 35027
// begin result := false ;
35017: LD_ADDR_VAR 0 3
35021: PUSH
35022: LD_INT 0
35024: ST_TO_ADDR
// break ;
35025: GO 35029
// end ;
35027: GO 34990
35029: POP
35030: POP
// end else
35031: GO 35041
// result := false ;
35033: LD_ADDR_VAR 0 3
35037: PUSH
35038: LD_INT 0
35040: ST_TO_ADDR
// end ;
35041: LD_VAR 0 3
35045: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35046: LD_INT 0
35048: PPUSH
35049: PPUSH
// if not array1 or not array2 then
35050: LD_VAR 0 1
35054: NOT
35055: PUSH
35056: LD_VAR 0 2
35060: NOT
35061: OR
35062: IFFALSE 35066
// exit ;
35064: GO 35130
// result := true ;
35066: LD_ADDR_VAR 0 3
35070: PUSH
35071: LD_INT 1
35073: ST_TO_ADDR
// for i = 1 to array1 do
35074: LD_ADDR_VAR 0 4
35078: PUSH
35079: DOUBLE
35080: LD_INT 1
35082: DEC
35083: ST_TO_ADDR
35084: LD_VAR 0 1
35088: PUSH
35089: FOR_TO
35090: IFFALSE 35128
// if array1 [ i ] <> array2 [ i ] then
35092: LD_VAR 0 1
35096: PUSH
35097: LD_VAR 0 4
35101: ARRAY
35102: PUSH
35103: LD_VAR 0 2
35107: PUSH
35108: LD_VAR 0 4
35112: ARRAY
35113: NONEQUAL
35114: IFFALSE 35126
// begin result := false ;
35116: LD_ADDR_VAR 0 3
35120: PUSH
35121: LD_INT 0
35123: ST_TO_ADDR
// break ;
35124: GO 35128
// end ;
35126: GO 35089
35128: POP
35129: POP
// end ;
35130: LD_VAR 0 3
35134: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35135: LD_INT 0
35137: PPUSH
35138: PPUSH
35139: PPUSH
// pom := GetBase ( fac ) ;
35140: LD_ADDR_VAR 0 5
35144: PUSH
35145: LD_VAR 0 1
35149: PPUSH
35150: CALL_OW 274
35154: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35155: LD_ADDR_VAR 0 4
35159: PUSH
35160: LD_VAR 0 2
35164: PUSH
35165: LD_INT 1
35167: ARRAY
35168: PPUSH
35169: LD_VAR 0 2
35173: PUSH
35174: LD_INT 2
35176: ARRAY
35177: PPUSH
35178: LD_VAR 0 2
35182: PUSH
35183: LD_INT 3
35185: ARRAY
35186: PPUSH
35187: LD_VAR 0 2
35191: PUSH
35192: LD_INT 4
35194: ARRAY
35195: PPUSH
35196: CALL_OW 449
35200: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35201: LD_ADDR_VAR 0 3
35205: PUSH
35206: LD_VAR 0 5
35210: PPUSH
35211: LD_INT 1
35213: PPUSH
35214: CALL_OW 275
35218: PUSH
35219: LD_VAR 0 4
35223: PUSH
35224: LD_INT 1
35226: ARRAY
35227: GREATEREQUAL
35228: PUSH
35229: LD_VAR 0 5
35233: PPUSH
35234: LD_INT 2
35236: PPUSH
35237: CALL_OW 275
35241: PUSH
35242: LD_VAR 0 4
35246: PUSH
35247: LD_INT 2
35249: ARRAY
35250: GREATEREQUAL
35251: AND
35252: PUSH
35253: LD_VAR 0 5
35257: PPUSH
35258: LD_INT 3
35260: PPUSH
35261: CALL_OW 275
35265: PUSH
35266: LD_VAR 0 4
35270: PUSH
35271: LD_INT 3
35273: ARRAY
35274: GREATEREQUAL
35275: AND
35276: ST_TO_ADDR
// end ;
35277: LD_VAR 0 3
35281: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35282: LD_INT 0
35284: PPUSH
35285: PPUSH
35286: PPUSH
35287: PPUSH
// pom := GetBase ( building ) ;
35288: LD_ADDR_VAR 0 3
35292: PUSH
35293: LD_VAR 0 1
35297: PPUSH
35298: CALL_OW 274
35302: ST_TO_ADDR
// if not pom then
35303: LD_VAR 0 3
35307: NOT
35308: IFFALSE 35312
// exit ;
35310: GO 35482
// btype := GetBType ( building ) ;
35312: LD_ADDR_VAR 0 5
35316: PUSH
35317: LD_VAR 0 1
35321: PPUSH
35322: CALL_OW 266
35326: ST_TO_ADDR
// if btype = b_armoury then
35327: LD_VAR 0 5
35331: PUSH
35332: LD_INT 4
35334: EQUAL
35335: IFFALSE 35345
// btype := b_barracks ;
35337: LD_ADDR_VAR 0 5
35341: PUSH
35342: LD_INT 5
35344: ST_TO_ADDR
// if btype = b_depot then
35345: LD_VAR 0 5
35349: PUSH
35350: LD_INT 0
35352: EQUAL
35353: IFFALSE 35363
// btype := b_warehouse ;
35355: LD_ADDR_VAR 0 5
35359: PUSH
35360: LD_INT 1
35362: ST_TO_ADDR
// if btype = b_workshop then
35363: LD_VAR 0 5
35367: PUSH
35368: LD_INT 2
35370: EQUAL
35371: IFFALSE 35381
// btype := b_factory ;
35373: LD_ADDR_VAR 0 5
35377: PUSH
35378: LD_INT 3
35380: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35381: LD_ADDR_VAR 0 4
35385: PUSH
35386: LD_VAR 0 5
35390: PPUSH
35391: LD_VAR 0 1
35395: PPUSH
35396: CALL_OW 248
35400: PPUSH
35401: CALL_OW 450
35405: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35406: LD_ADDR_VAR 0 2
35410: PUSH
35411: LD_VAR 0 3
35415: PPUSH
35416: LD_INT 1
35418: PPUSH
35419: CALL_OW 275
35423: PUSH
35424: LD_VAR 0 4
35428: PUSH
35429: LD_INT 1
35431: ARRAY
35432: GREATEREQUAL
35433: PUSH
35434: LD_VAR 0 3
35438: PPUSH
35439: LD_INT 2
35441: PPUSH
35442: CALL_OW 275
35446: PUSH
35447: LD_VAR 0 4
35451: PUSH
35452: LD_INT 2
35454: ARRAY
35455: GREATEREQUAL
35456: AND
35457: PUSH
35458: LD_VAR 0 3
35462: PPUSH
35463: LD_INT 3
35465: PPUSH
35466: CALL_OW 275
35470: PUSH
35471: LD_VAR 0 4
35475: PUSH
35476: LD_INT 3
35478: ARRAY
35479: GREATEREQUAL
35480: AND
35481: ST_TO_ADDR
// end ;
35482: LD_VAR 0 2
35486: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35487: LD_INT 0
35489: PPUSH
35490: PPUSH
35491: PPUSH
// pom := GetBase ( building ) ;
35492: LD_ADDR_VAR 0 4
35496: PUSH
35497: LD_VAR 0 1
35501: PPUSH
35502: CALL_OW 274
35506: ST_TO_ADDR
// if not pom then
35507: LD_VAR 0 4
35511: NOT
35512: IFFALSE 35516
// exit ;
35514: GO 35617
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35516: LD_ADDR_VAR 0 5
35520: PUSH
35521: LD_VAR 0 2
35525: PPUSH
35526: LD_VAR 0 1
35530: PPUSH
35531: CALL_OW 248
35535: PPUSH
35536: CALL_OW 450
35540: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35541: LD_ADDR_VAR 0 3
35545: PUSH
35546: LD_VAR 0 4
35550: PPUSH
35551: LD_INT 1
35553: PPUSH
35554: CALL_OW 275
35558: PUSH
35559: LD_VAR 0 5
35563: PUSH
35564: LD_INT 1
35566: ARRAY
35567: GREATEREQUAL
35568: PUSH
35569: LD_VAR 0 4
35573: PPUSH
35574: LD_INT 2
35576: PPUSH
35577: CALL_OW 275
35581: PUSH
35582: LD_VAR 0 5
35586: PUSH
35587: LD_INT 2
35589: ARRAY
35590: GREATEREQUAL
35591: AND
35592: PUSH
35593: LD_VAR 0 4
35597: PPUSH
35598: LD_INT 3
35600: PPUSH
35601: CALL_OW 275
35605: PUSH
35606: LD_VAR 0 5
35610: PUSH
35611: LD_INT 3
35613: ARRAY
35614: GREATEREQUAL
35615: AND
35616: ST_TO_ADDR
// end ;
35617: LD_VAR 0 3
35621: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35622: LD_INT 0
35624: PPUSH
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
// result := false ;
35635: LD_ADDR_VAR 0 8
35639: PUSH
35640: LD_INT 0
35642: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35643: LD_VAR 0 5
35647: NOT
35648: PUSH
35649: LD_VAR 0 1
35653: NOT
35654: OR
35655: PUSH
35656: LD_VAR 0 2
35660: NOT
35661: OR
35662: PUSH
35663: LD_VAR 0 3
35667: NOT
35668: OR
35669: IFFALSE 35673
// exit ;
35671: GO 36487
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35673: LD_ADDR_VAR 0 14
35677: PUSH
35678: LD_VAR 0 1
35682: PPUSH
35683: LD_VAR 0 2
35687: PPUSH
35688: LD_VAR 0 3
35692: PPUSH
35693: LD_VAR 0 4
35697: PPUSH
35698: LD_VAR 0 5
35702: PUSH
35703: LD_INT 1
35705: ARRAY
35706: PPUSH
35707: CALL_OW 248
35711: PPUSH
35712: LD_INT 0
35714: PPUSH
35715: CALL 37724 0 6
35719: ST_TO_ADDR
// if not hexes then
35720: LD_VAR 0 14
35724: NOT
35725: IFFALSE 35729
// exit ;
35727: GO 36487
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35729: LD_ADDR_VAR 0 17
35733: PUSH
35734: LD_VAR 0 5
35738: PPUSH
35739: LD_INT 22
35741: PUSH
35742: LD_VAR 0 13
35746: PPUSH
35747: CALL_OW 255
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 2
35758: PUSH
35759: LD_INT 30
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 30
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PPUSH
35788: CALL_OW 72
35792: ST_TO_ADDR
// for i = 1 to hexes do
35793: LD_ADDR_VAR 0 9
35797: PUSH
35798: DOUBLE
35799: LD_INT 1
35801: DEC
35802: ST_TO_ADDR
35803: LD_VAR 0 14
35807: PUSH
35808: FOR_TO
35809: IFFALSE 36485
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35811: LD_ADDR_VAR 0 13
35815: PUSH
35816: LD_VAR 0 14
35820: PUSH
35821: LD_VAR 0 9
35825: ARRAY
35826: PUSH
35827: LD_INT 1
35829: ARRAY
35830: PPUSH
35831: LD_VAR 0 14
35835: PUSH
35836: LD_VAR 0 9
35840: ARRAY
35841: PUSH
35842: LD_INT 2
35844: ARRAY
35845: PPUSH
35846: CALL_OW 428
35850: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35851: LD_VAR 0 14
35855: PUSH
35856: LD_VAR 0 9
35860: ARRAY
35861: PUSH
35862: LD_INT 1
35864: ARRAY
35865: PPUSH
35866: LD_VAR 0 14
35870: PUSH
35871: LD_VAR 0 9
35875: ARRAY
35876: PUSH
35877: LD_INT 2
35879: ARRAY
35880: PPUSH
35881: CALL_OW 351
35885: PUSH
35886: LD_VAR 0 14
35890: PUSH
35891: LD_VAR 0 9
35895: ARRAY
35896: PUSH
35897: LD_INT 1
35899: ARRAY
35900: PPUSH
35901: LD_VAR 0 14
35905: PUSH
35906: LD_VAR 0 9
35910: ARRAY
35911: PUSH
35912: LD_INT 2
35914: ARRAY
35915: PPUSH
35916: CALL_OW 488
35920: NOT
35921: OR
35922: PUSH
35923: LD_VAR 0 13
35927: PPUSH
35928: CALL_OW 247
35932: PUSH
35933: LD_INT 3
35935: EQUAL
35936: OR
35937: IFFALSE 35943
// exit ;
35939: POP
35940: POP
35941: GO 36487
// if not tmp then
35943: LD_VAR 0 13
35947: NOT
35948: IFFALSE 35952
// continue ;
35950: GO 35808
// result := true ;
35952: LD_ADDR_VAR 0 8
35956: PUSH
35957: LD_INT 1
35959: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35960: LD_VAR 0 6
35964: PUSH
35965: LD_VAR 0 13
35969: PPUSH
35970: CALL_OW 247
35974: PUSH
35975: LD_INT 2
35977: EQUAL
35978: AND
35979: PUSH
35980: LD_VAR 0 13
35984: PPUSH
35985: CALL_OW 263
35989: PUSH
35990: LD_INT 1
35992: EQUAL
35993: AND
35994: IFFALSE 36158
// begin if IsDrivenBy ( tmp ) then
35996: LD_VAR 0 13
36000: PPUSH
36001: CALL_OW 311
36005: IFFALSE 36009
// continue ;
36007: GO 35808
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36009: LD_VAR 0 6
36013: PPUSH
36014: LD_INT 3
36016: PUSH
36017: LD_INT 60
36019: PUSH
36020: EMPTY
36021: LIST
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 3
36029: PUSH
36030: LD_INT 55
36032: PUSH
36033: EMPTY
36034: LIST
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PPUSH
36044: CALL_OW 72
36048: IFFALSE 36156
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36050: LD_ADDR_VAR 0 18
36054: PUSH
36055: LD_VAR 0 6
36059: PPUSH
36060: LD_INT 3
36062: PUSH
36063: LD_INT 60
36065: PUSH
36066: EMPTY
36067: LIST
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 3
36075: PUSH
36076: LD_INT 55
36078: PUSH
36079: EMPTY
36080: LIST
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PPUSH
36090: CALL_OW 72
36094: PUSH
36095: LD_INT 1
36097: ARRAY
36098: ST_TO_ADDR
// if IsInUnit ( driver ) then
36099: LD_VAR 0 18
36103: PPUSH
36104: CALL_OW 310
36108: IFFALSE 36119
// ComExit ( driver ) ;
36110: LD_VAR 0 18
36114: PPUSH
36115: CALL 60908 0 1
// AddComEnterUnit ( driver , tmp ) ;
36119: LD_VAR 0 18
36123: PPUSH
36124: LD_VAR 0 13
36128: PPUSH
36129: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36133: LD_VAR 0 18
36137: PPUSH
36138: LD_VAR 0 7
36142: PPUSH
36143: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36147: LD_VAR 0 18
36151: PPUSH
36152: CALL_OW 181
// end ; continue ;
36156: GO 35808
// end ; if not cleaners or not tmp in cleaners then
36158: LD_VAR 0 6
36162: NOT
36163: PUSH
36164: LD_VAR 0 13
36168: PUSH
36169: LD_VAR 0 6
36173: IN
36174: NOT
36175: OR
36176: IFFALSE 36483
// begin if dep then
36178: LD_VAR 0 17
36182: IFFALSE 36318
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36184: LD_ADDR_VAR 0 16
36188: PUSH
36189: LD_VAR 0 17
36193: PUSH
36194: LD_INT 1
36196: ARRAY
36197: PPUSH
36198: CALL_OW 250
36202: PPUSH
36203: LD_VAR 0 17
36207: PUSH
36208: LD_INT 1
36210: ARRAY
36211: PPUSH
36212: CALL_OW 254
36216: PPUSH
36217: LD_INT 5
36219: PPUSH
36220: CALL_OW 272
36224: PUSH
36225: LD_VAR 0 17
36229: PUSH
36230: LD_INT 1
36232: ARRAY
36233: PPUSH
36234: CALL_OW 251
36238: PPUSH
36239: LD_VAR 0 17
36243: PUSH
36244: LD_INT 1
36246: ARRAY
36247: PPUSH
36248: CALL_OW 254
36252: PPUSH
36253: LD_INT 5
36255: PPUSH
36256: CALL_OW 273
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36265: LD_VAR 0 16
36269: PUSH
36270: LD_INT 1
36272: ARRAY
36273: PPUSH
36274: LD_VAR 0 16
36278: PUSH
36279: LD_INT 2
36281: ARRAY
36282: PPUSH
36283: CALL_OW 488
36287: IFFALSE 36318
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36289: LD_VAR 0 13
36293: PPUSH
36294: LD_VAR 0 16
36298: PUSH
36299: LD_INT 1
36301: ARRAY
36302: PPUSH
36303: LD_VAR 0 16
36307: PUSH
36308: LD_INT 2
36310: ARRAY
36311: PPUSH
36312: CALL_OW 111
// continue ;
36316: GO 35808
// end ; end ; r := GetDir ( tmp ) ;
36318: LD_ADDR_VAR 0 15
36322: PUSH
36323: LD_VAR 0 13
36327: PPUSH
36328: CALL_OW 254
36332: ST_TO_ADDR
// if r = 5 then
36333: LD_VAR 0 15
36337: PUSH
36338: LD_INT 5
36340: EQUAL
36341: IFFALSE 36351
// r := 0 ;
36343: LD_ADDR_VAR 0 15
36347: PUSH
36348: LD_INT 0
36350: ST_TO_ADDR
// for j = r to 5 do
36351: LD_ADDR_VAR 0 10
36355: PUSH
36356: DOUBLE
36357: LD_VAR 0 15
36361: DEC
36362: ST_TO_ADDR
36363: LD_INT 5
36365: PUSH
36366: FOR_TO
36367: IFFALSE 36481
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36369: LD_ADDR_VAR 0 11
36373: PUSH
36374: LD_VAR 0 13
36378: PPUSH
36379: CALL_OW 250
36383: PPUSH
36384: LD_VAR 0 10
36388: PPUSH
36389: LD_INT 2
36391: PPUSH
36392: CALL_OW 272
36396: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36397: LD_ADDR_VAR 0 12
36401: PUSH
36402: LD_VAR 0 13
36406: PPUSH
36407: CALL_OW 251
36411: PPUSH
36412: LD_VAR 0 10
36416: PPUSH
36417: LD_INT 2
36419: PPUSH
36420: CALL_OW 273
36424: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36425: LD_VAR 0 11
36429: PPUSH
36430: LD_VAR 0 12
36434: PPUSH
36435: CALL_OW 488
36439: PUSH
36440: LD_VAR 0 11
36444: PPUSH
36445: LD_VAR 0 12
36449: PPUSH
36450: CALL_OW 428
36454: NOT
36455: AND
36456: IFFALSE 36479
// begin ComMoveXY ( tmp , _x , _y ) ;
36458: LD_VAR 0 13
36462: PPUSH
36463: LD_VAR 0 11
36467: PPUSH
36468: LD_VAR 0 12
36472: PPUSH
36473: CALL_OW 111
// break ;
36477: GO 36481
// end ; end ;
36479: GO 36366
36481: POP
36482: POP
// end ; end ;
36483: GO 35808
36485: POP
36486: POP
// end ;
36487: LD_VAR 0 8
36491: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36492: LD_INT 0
36494: PPUSH
// result := true ;
36495: LD_ADDR_VAR 0 3
36499: PUSH
36500: LD_INT 1
36502: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36503: LD_VAR 0 2
36507: PUSH
36508: LD_INT 24
36510: DOUBLE
36511: EQUAL
36512: IFTRUE 36522
36514: LD_INT 33
36516: DOUBLE
36517: EQUAL
36518: IFTRUE 36522
36520: GO 36547
36522: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36523: LD_ADDR_VAR 0 3
36527: PUSH
36528: LD_INT 32
36530: PPUSH
36531: LD_VAR 0 1
36535: PPUSH
36536: CALL_OW 321
36540: PUSH
36541: LD_INT 2
36543: EQUAL
36544: ST_TO_ADDR
36545: GO 36867
36547: LD_INT 20
36549: DOUBLE
36550: EQUAL
36551: IFTRUE 36555
36553: GO 36580
36555: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36556: LD_ADDR_VAR 0 3
36560: PUSH
36561: LD_INT 6
36563: PPUSH
36564: LD_VAR 0 1
36568: PPUSH
36569: CALL_OW 321
36573: PUSH
36574: LD_INT 2
36576: EQUAL
36577: ST_TO_ADDR
36578: GO 36867
36580: LD_INT 22
36582: DOUBLE
36583: EQUAL
36584: IFTRUE 36594
36586: LD_INT 36
36588: DOUBLE
36589: EQUAL
36590: IFTRUE 36594
36592: GO 36619
36594: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36595: LD_ADDR_VAR 0 3
36599: PUSH
36600: LD_INT 15
36602: PPUSH
36603: LD_VAR 0 1
36607: PPUSH
36608: CALL_OW 321
36612: PUSH
36613: LD_INT 2
36615: EQUAL
36616: ST_TO_ADDR
36617: GO 36867
36619: LD_INT 30
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36627
36625: GO 36652
36627: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36628: LD_ADDR_VAR 0 3
36632: PUSH
36633: LD_INT 20
36635: PPUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 321
36645: PUSH
36646: LD_INT 2
36648: EQUAL
36649: ST_TO_ADDR
36650: GO 36867
36652: LD_INT 28
36654: DOUBLE
36655: EQUAL
36656: IFTRUE 36666
36658: LD_INT 21
36660: DOUBLE
36661: EQUAL
36662: IFTRUE 36666
36664: GO 36691
36666: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36667: LD_ADDR_VAR 0 3
36671: PUSH
36672: LD_INT 21
36674: PPUSH
36675: LD_VAR 0 1
36679: PPUSH
36680: CALL_OW 321
36684: PUSH
36685: LD_INT 2
36687: EQUAL
36688: ST_TO_ADDR
36689: GO 36867
36691: LD_INT 16
36693: DOUBLE
36694: EQUAL
36695: IFTRUE 36699
36697: GO 36726
36699: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36700: LD_ADDR_VAR 0 3
36704: PUSH
36705: LD_EXP 106
36709: PPUSH
36710: LD_VAR 0 1
36714: PPUSH
36715: CALL_OW 321
36719: PUSH
36720: LD_INT 2
36722: EQUAL
36723: ST_TO_ADDR
36724: GO 36867
36726: LD_INT 19
36728: DOUBLE
36729: EQUAL
36730: IFTRUE 36740
36732: LD_INT 23
36734: DOUBLE
36735: EQUAL
36736: IFTRUE 36740
36738: GO 36767
36740: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36741: LD_ADDR_VAR 0 3
36745: PUSH
36746: LD_EXP 105
36750: PPUSH
36751: LD_VAR 0 1
36755: PPUSH
36756: CALL_OW 321
36760: PUSH
36761: LD_INT 2
36763: EQUAL
36764: ST_TO_ADDR
36765: GO 36867
36767: LD_INT 17
36769: DOUBLE
36770: EQUAL
36771: IFTRUE 36775
36773: GO 36800
36775: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36776: LD_ADDR_VAR 0 3
36780: PUSH
36781: LD_INT 39
36783: PPUSH
36784: LD_VAR 0 1
36788: PPUSH
36789: CALL_OW 321
36793: PUSH
36794: LD_INT 2
36796: EQUAL
36797: ST_TO_ADDR
36798: GO 36867
36800: LD_INT 18
36802: DOUBLE
36803: EQUAL
36804: IFTRUE 36808
36806: GO 36833
36808: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36809: LD_ADDR_VAR 0 3
36813: PUSH
36814: LD_INT 40
36816: PPUSH
36817: LD_VAR 0 1
36821: PPUSH
36822: CALL_OW 321
36826: PUSH
36827: LD_INT 2
36829: EQUAL
36830: ST_TO_ADDR
36831: GO 36867
36833: LD_INT 27
36835: DOUBLE
36836: EQUAL
36837: IFTRUE 36841
36839: GO 36866
36841: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36842: LD_ADDR_VAR 0 3
36846: PUSH
36847: LD_INT 35
36849: PPUSH
36850: LD_VAR 0 1
36854: PPUSH
36855: CALL_OW 321
36859: PUSH
36860: LD_INT 2
36862: EQUAL
36863: ST_TO_ADDR
36864: GO 36867
36866: POP
// end ;
36867: LD_VAR 0 3
36871: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36872: LD_INT 0
36874: PPUSH
36875: PPUSH
36876: PPUSH
36877: PPUSH
36878: PPUSH
36879: PPUSH
36880: PPUSH
36881: PPUSH
36882: PPUSH
36883: PPUSH
36884: PPUSH
// result := false ;
36885: LD_ADDR_VAR 0 6
36889: PUSH
36890: LD_INT 0
36892: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36893: LD_VAR 0 1
36897: NOT
36898: PUSH
36899: LD_VAR 0 1
36903: PPUSH
36904: CALL_OW 266
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: IN
36919: NOT
36920: OR
36921: PUSH
36922: LD_VAR 0 2
36926: NOT
36927: OR
36928: PUSH
36929: LD_VAR 0 5
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: LD_INT 2
36942: PUSH
36943: LD_INT 3
36945: PUSH
36946: LD_INT 4
36948: PUSH
36949: LD_INT 5
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: IN
36960: NOT
36961: OR
36962: PUSH
36963: LD_VAR 0 3
36967: PPUSH
36968: LD_VAR 0 4
36972: PPUSH
36973: CALL_OW 488
36977: NOT
36978: OR
36979: IFFALSE 36983
// exit ;
36981: GO 37719
// side := GetSide ( depot ) ;
36983: LD_ADDR_VAR 0 9
36987: PUSH
36988: LD_VAR 0 1
36992: PPUSH
36993: CALL_OW 255
36997: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36998: LD_VAR 0 9
37002: PPUSH
37003: LD_VAR 0 2
37007: PPUSH
37008: CALL 36492 0 2
37012: NOT
37013: IFFALSE 37017
// exit ;
37015: GO 37719
// pom := GetBase ( depot ) ;
37017: LD_ADDR_VAR 0 10
37021: PUSH
37022: LD_VAR 0 1
37026: PPUSH
37027: CALL_OW 274
37031: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37032: LD_ADDR_VAR 0 11
37036: PUSH
37037: LD_VAR 0 2
37041: PPUSH
37042: LD_VAR 0 1
37046: PPUSH
37047: CALL_OW 248
37051: PPUSH
37052: CALL_OW 450
37056: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37057: LD_VAR 0 10
37061: PPUSH
37062: LD_INT 1
37064: PPUSH
37065: CALL_OW 275
37069: PUSH
37070: LD_VAR 0 11
37074: PUSH
37075: LD_INT 1
37077: ARRAY
37078: GREATEREQUAL
37079: PUSH
37080: LD_VAR 0 10
37084: PPUSH
37085: LD_INT 2
37087: PPUSH
37088: CALL_OW 275
37092: PUSH
37093: LD_VAR 0 11
37097: PUSH
37098: LD_INT 2
37100: ARRAY
37101: GREATEREQUAL
37102: AND
37103: PUSH
37104: LD_VAR 0 10
37108: PPUSH
37109: LD_INT 3
37111: PPUSH
37112: CALL_OW 275
37116: PUSH
37117: LD_VAR 0 11
37121: PUSH
37122: LD_INT 3
37124: ARRAY
37125: GREATEREQUAL
37126: AND
37127: NOT
37128: IFFALSE 37132
// exit ;
37130: GO 37719
// if GetBType ( depot ) = b_depot then
37132: LD_VAR 0 1
37136: PPUSH
37137: CALL_OW 266
37141: PUSH
37142: LD_INT 0
37144: EQUAL
37145: IFFALSE 37157
// dist := 28 else
37147: LD_ADDR_VAR 0 14
37151: PUSH
37152: LD_INT 28
37154: ST_TO_ADDR
37155: GO 37165
// dist := 36 ;
37157: LD_ADDR_VAR 0 14
37161: PUSH
37162: LD_INT 36
37164: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37165: LD_VAR 0 1
37169: PPUSH
37170: LD_VAR 0 3
37174: PPUSH
37175: LD_VAR 0 4
37179: PPUSH
37180: CALL_OW 297
37184: PUSH
37185: LD_VAR 0 14
37189: GREATER
37190: IFFALSE 37194
// exit ;
37192: GO 37719
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37194: LD_ADDR_VAR 0 12
37198: PUSH
37199: LD_VAR 0 2
37203: PPUSH
37204: LD_VAR 0 3
37208: PPUSH
37209: LD_VAR 0 4
37213: PPUSH
37214: LD_VAR 0 5
37218: PPUSH
37219: LD_VAR 0 1
37223: PPUSH
37224: CALL_OW 248
37228: PPUSH
37229: LD_INT 0
37231: PPUSH
37232: CALL 37724 0 6
37236: ST_TO_ADDR
// if not hexes then
37237: LD_VAR 0 12
37241: NOT
37242: IFFALSE 37246
// exit ;
37244: GO 37719
// hex := GetHexInfo ( x , y ) ;
37246: LD_ADDR_VAR 0 15
37250: PUSH
37251: LD_VAR 0 3
37255: PPUSH
37256: LD_VAR 0 4
37260: PPUSH
37261: CALL_OW 546
37265: ST_TO_ADDR
// if hex [ 1 ] then
37266: LD_VAR 0 15
37270: PUSH
37271: LD_INT 1
37273: ARRAY
37274: IFFALSE 37278
// exit ;
37276: GO 37719
// height := hex [ 2 ] ;
37278: LD_ADDR_VAR 0 13
37282: PUSH
37283: LD_VAR 0 15
37287: PUSH
37288: LD_INT 2
37290: ARRAY
37291: ST_TO_ADDR
// for i = 1 to hexes do
37292: LD_ADDR_VAR 0 7
37296: PUSH
37297: DOUBLE
37298: LD_INT 1
37300: DEC
37301: ST_TO_ADDR
37302: LD_VAR 0 12
37306: PUSH
37307: FOR_TO
37308: IFFALSE 37638
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37310: LD_VAR 0 12
37314: PUSH
37315: LD_VAR 0 7
37319: ARRAY
37320: PUSH
37321: LD_INT 1
37323: ARRAY
37324: PPUSH
37325: LD_VAR 0 12
37329: PUSH
37330: LD_VAR 0 7
37334: ARRAY
37335: PUSH
37336: LD_INT 2
37338: ARRAY
37339: PPUSH
37340: CALL_OW 488
37344: NOT
37345: PUSH
37346: LD_VAR 0 12
37350: PUSH
37351: LD_VAR 0 7
37355: ARRAY
37356: PUSH
37357: LD_INT 1
37359: ARRAY
37360: PPUSH
37361: LD_VAR 0 12
37365: PUSH
37366: LD_VAR 0 7
37370: ARRAY
37371: PUSH
37372: LD_INT 2
37374: ARRAY
37375: PPUSH
37376: CALL_OW 428
37380: PUSH
37381: LD_INT 0
37383: GREATER
37384: OR
37385: PUSH
37386: LD_VAR 0 12
37390: PUSH
37391: LD_VAR 0 7
37395: ARRAY
37396: PUSH
37397: LD_INT 1
37399: ARRAY
37400: PPUSH
37401: LD_VAR 0 12
37405: PUSH
37406: LD_VAR 0 7
37410: ARRAY
37411: PUSH
37412: LD_INT 2
37414: ARRAY
37415: PPUSH
37416: CALL_OW 351
37420: OR
37421: IFFALSE 37427
// exit ;
37423: POP
37424: POP
37425: GO 37719
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37427: LD_ADDR_VAR 0 8
37431: PUSH
37432: LD_VAR 0 12
37436: PUSH
37437: LD_VAR 0 7
37441: ARRAY
37442: PUSH
37443: LD_INT 1
37445: ARRAY
37446: PPUSH
37447: LD_VAR 0 12
37451: PUSH
37452: LD_VAR 0 7
37456: ARRAY
37457: PUSH
37458: LD_INT 2
37460: ARRAY
37461: PPUSH
37462: CALL_OW 546
37466: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37467: LD_VAR 0 8
37471: PUSH
37472: LD_INT 1
37474: ARRAY
37475: PUSH
37476: LD_VAR 0 8
37480: PUSH
37481: LD_INT 2
37483: ARRAY
37484: PUSH
37485: LD_VAR 0 13
37489: PUSH
37490: LD_INT 2
37492: PLUS
37493: GREATER
37494: OR
37495: PUSH
37496: LD_VAR 0 8
37500: PUSH
37501: LD_INT 2
37503: ARRAY
37504: PUSH
37505: LD_VAR 0 13
37509: PUSH
37510: LD_INT 2
37512: MINUS
37513: LESS
37514: OR
37515: PUSH
37516: LD_VAR 0 8
37520: PUSH
37521: LD_INT 3
37523: ARRAY
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: LD_INT 8
37530: PUSH
37531: LD_INT 9
37533: PUSH
37534: LD_INT 10
37536: PUSH
37537: LD_INT 11
37539: PUSH
37540: LD_INT 12
37542: PUSH
37543: LD_INT 13
37545: PUSH
37546: LD_INT 16
37548: PUSH
37549: LD_INT 17
37551: PUSH
37552: LD_INT 18
37554: PUSH
37555: LD_INT 19
37557: PUSH
37558: LD_INT 20
37560: PUSH
37561: LD_INT 21
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: IN
37579: NOT
37580: OR
37581: PUSH
37582: LD_VAR 0 8
37586: PUSH
37587: LD_INT 5
37589: ARRAY
37590: NOT
37591: OR
37592: PUSH
37593: LD_VAR 0 8
37597: PUSH
37598: LD_INT 6
37600: ARRAY
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: LD_INT 7
37610: PUSH
37611: LD_INT 9
37613: PUSH
37614: LD_INT 10
37616: PUSH
37617: LD_INT 11
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: IN
37628: NOT
37629: OR
37630: IFFALSE 37636
// exit ;
37632: POP
37633: POP
37634: GO 37719
// end ;
37636: GO 37307
37638: POP
37639: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37640: LD_VAR 0 9
37644: PPUSH
37645: LD_VAR 0 3
37649: PPUSH
37650: LD_VAR 0 4
37654: PPUSH
37655: LD_INT 20
37657: PPUSH
37658: CALL 29665 0 4
37662: PUSH
37663: LD_INT 4
37665: ARRAY
37666: IFFALSE 37670
// exit ;
37668: GO 37719
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37670: LD_VAR 0 2
37674: PUSH
37675: LD_INT 29
37677: PUSH
37678: LD_INT 30
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: IN
37685: PUSH
37686: LD_VAR 0 3
37690: PPUSH
37691: LD_VAR 0 4
37695: PPUSH
37696: LD_VAR 0 9
37700: PPUSH
37701: CALL_OW 440
37705: NOT
37706: AND
37707: IFFALSE 37711
// exit ;
37709: GO 37719
// result := true ;
37711: LD_ADDR_VAR 0 6
37715: PUSH
37716: LD_INT 1
37718: ST_TO_ADDR
// end ;
37719: LD_VAR 0 6
37723: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37724: LD_INT 0
37726: PPUSH
37727: PPUSH
37728: PPUSH
37729: PPUSH
37730: PPUSH
37731: PPUSH
37732: PPUSH
37733: PPUSH
37734: PPUSH
37735: PPUSH
37736: PPUSH
37737: PPUSH
37738: PPUSH
37739: PPUSH
37740: PPUSH
37741: PPUSH
37742: PPUSH
37743: PPUSH
37744: PPUSH
37745: PPUSH
37746: PPUSH
37747: PPUSH
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
37753: PPUSH
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
37759: PPUSH
37760: PPUSH
37761: PPUSH
37762: PPUSH
37763: PPUSH
37764: PPUSH
37765: PPUSH
37766: PPUSH
37767: PPUSH
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
// result = [ ] ;
37784: LD_ADDR_VAR 0 7
37788: PUSH
37789: EMPTY
37790: ST_TO_ADDR
// temp_list = [ ] ;
37791: LD_ADDR_VAR 0 9
37795: PUSH
37796: EMPTY
37797: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37798: LD_VAR 0 4
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 3
37814: PUSH
37815: LD_INT 4
37817: PUSH
37818: LD_INT 5
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: IN
37829: NOT
37830: PUSH
37831: LD_VAR 0 1
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: IN
37846: PUSH
37847: LD_VAR 0 5
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: LD_INT 3
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: LIST
37865: IN
37866: NOT
37867: AND
37868: OR
37869: IFFALSE 37873
// exit ;
37871: GO 56264
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37873: LD_VAR 0 1
37877: PUSH
37878: LD_INT 6
37880: PUSH
37881: LD_INT 7
37883: PUSH
37884: LD_INT 8
37886: PUSH
37887: LD_INT 13
37889: PUSH
37890: LD_INT 12
37892: PUSH
37893: LD_INT 15
37895: PUSH
37896: LD_INT 11
37898: PUSH
37899: LD_INT 14
37901: PUSH
37902: LD_INT 10
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: IN
37916: IFFALSE 37926
// btype = b_lab ;
37918: LD_ADDR_VAR 0 1
37922: PUSH
37923: LD_INT 6
37925: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37926: LD_VAR 0 6
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: LD_INT 2
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: IN
37945: NOT
37946: PUSH
37947: LD_VAR 0 1
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: LD_INT 2
37960: PUSH
37961: LD_INT 3
37963: PUSH
37964: LD_INT 6
37966: PUSH
37967: LD_INT 36
37969: PUSH
37970: LD_INT 4
37972: PUSH
37973: LD_INT 5
37975: PUSH
37976: LD_INT 31
37978: PUSH
37979: LD_INT 32
37981: PUSH
37982: LD_INT 33
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: IN
37998: NOT
37999: PUSH
38000: LD_VAR 0 6
38004: PUSH
38005: LD_INT 1
38007: EQUAL
38008: AND
38009: OR
38010: PUSH
38011: LD_VAR 0 1
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: LD_INT 3
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: IN
38026: NOT
38027: PUSH
38028: LD_VAR 0 6
38032: PUSH
38033: LD_INT 2
38035: EQUAL
38036: AND
38037: OR
38038: IFFALSE 38048
// mode = 0 ;
38040: LD_ADDR_VAR 0 6
38044: PUSH
38045: LD_INT 0
38047: ST_TO_ADDR
// case mode of 0 :
38048: LD_VAR 0 6
38052: PUSH
38053: LD_INT 0
38055: DOUBLE
38056: EQUAL
38057: IFTRUE 38061
38059: GO 49514
38061: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38062: LD_ADDR_VAR 0 11
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: LD_INT 1
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 1
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: LD_INT 1
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: NEG
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: LD_INT 2
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: LD_INT 2
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: LD_INT 1
38169: NEG
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: LD_INT 2
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: PUSH
38209: LD_INT 3
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: LD_INT 3
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: LD_INT 2
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38255: LD_ADDR_VAR 0 12
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: LD_INT 1
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 2
38378: NEG
38379: PUSH
38380: LD_INT 0
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 2
38389: NEG
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 3
38412: NEG
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 3
38423: NEG
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38451: LD_ADDR_VAR 0 13
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: LD_INT 2
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: LD_INT 2
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: LD_INT 3
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 3
38610: NEG
38611: PUSH
38612: LD_INT 2
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 3
38622: NEG
38623: PUSH
38624: LD_INT 3
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38650: LD_ADDR_VAR 0 14
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: LD_INT 1
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: LD_INT 1
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: LD_INT 3
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: LD_INT 3
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: LD_INT 2
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38846: LD_ADDR_VAR 0 15
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 2
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 2
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 2
38980: NEG
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 3
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 3
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39039: LD_ADDR_VAR 0 16
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 1
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 2
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 2
39162: NEG
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 2
39174: NEG
39175: PUSH
39176: LD_INT 2
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 3
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 3
39196: PUSH
39197: LD_INT 3
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: PUSH
39207: LD_INT 3
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39232: LD_ADDR_VAR 0 17
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: LD_INT 2
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: LD_INT 2
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 2
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 2
39357: PUSH
39358: LD_INT 1
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 2
39408: NEG
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: NEG
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: LD_INT 2
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39462: LD_ADDR_VAR 0 18
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 2
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 2
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 2
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: NEG
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: LD_INT 2
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39692: LD_ADDR_VAR 0 19
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: NEG
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: LD_INT 2
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: LD_INT 2
39788: NEG
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 2
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: LD_INT 2
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: LD_INT 2
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 2
39868: NEG
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 2
39879: NEG
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 2
39891: NEG
39892: PUSH
39893: LD_INT 2
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39922: LD_ADDR_VAR 0 20
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: NEG
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: LD_INT 2
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 2
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: LD_INT 2
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: LD_INT 2
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: LD_INT 1
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 2
40098: NEG
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: NEG
40122: PUSH
40123: LD_INT 2
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40152: LD_ADDR_VAR 0 21
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 1
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: LD_INT 2
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: LD_INT 2
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: LD_INT 2
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40382: LD_ADDR_VAR 0 22
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: LD_INT 2
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 2
40569: NEG
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40612: LD_ADDR_VAR 0 23
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 2
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: LD_INT 2
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: LD_INT 2
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 2
40823: NEG
40824: PUSH
40825: LD_INT 3
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: LD_INT 3
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40892: LD_ADDR_VAR 0 24
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: LD_INT 2
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: LD_INT 2
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 2
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 1
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 2
41091: NEG
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 3
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 3
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41168: LD_ADDR_VAR 0 25
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: LD_INT 2
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 3
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 3
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 2
41399: PUSH
41400: LD_INT 3
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: LD_INT 3
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41442: LD_ADDR_VAR 0 26
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: LD_INT 2
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 2
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 2
41618: NEG
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: NEG
41642: PUSH
41643: LD_INT 2
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: PUSH
41654: LD_INT 3
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 3
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 2
41684: NEG
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41718: LD_ADDR_VAR 0 27
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: NEG
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: LD_INT 2
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 2
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: NEG
41906: PUSH
41907: LD_INT 1
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: LD_INT 2
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: NEG
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 3
41951: NEG
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 3
41963: NEG
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41998: LD_ADDR_VAR 0 28
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 2
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 2
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 2
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 2
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 2
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 2
42185: NEG
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 2
42209: NEG
42210: PUSH
42211: LD_INT 3
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: LD_INT 3
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 3
42233: NEG
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 3
42245: NEG
42246: PUSH
42247: LD_INT 2
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42280: LD_ADDR_VAR 0 29
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 2
42376: NEG
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 2
42446: NEG
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: NEG
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: NEG
42471: PUSH
42472: LD_INT 3
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 3
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 3
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: LD_INT 2
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42559: LD_ADDR_VAR 0 30
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 2
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 2
42725: NEG
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 3
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 3
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: LD_INT 3
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 3
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42837: LD_ADDR_VAR 0 31
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 2
43002: NEG
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: LD_INT 2
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: LD_INT 3
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 3
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: LD_INT 3
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 3
43080: NEG
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43115: LD_ADDR_VAR 0 32
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 2
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: NEG
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 3
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 3
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: LD_INT 3
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 3
43358: NEG
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43393: LD_ADDR_VAR 0 33
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 2
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 2
43548: NEG
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: LD_INT 2
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: LD_INT 3
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 3
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 3
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 3
43637: NEG
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43672: LD_ADDR_VAR 0 34
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 2
43839: NEG
43840: PUSH
43841: LD_INT 1
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: NEG
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 3
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 3
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 2
43906: NEG
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 3
43917: NEG
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43952: LD_ADDR_VAR 0 35
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44064: LD_ADDR_VAR 0 36
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44176: LD_ADDR_VAR 0 37
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44288: LD_ADDR_VAR 0 38
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44400: LD_ADDR_VAR 0 39
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44512: LD_ADDR_VAR 0 40
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44624: LD_ADDR_VAR 0 41
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: LD_INT 3
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 3
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 3
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 3
44867: PUSH
44868: LD_INT 3
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: LD_INT 3
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 3
44898: NEG
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 3
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 3
44921: NEG
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 3
44933: NEG
44934: PUSH
44935: LD_INT 3
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44974: LD_ADDR_VAR 0 42
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: LD_INT 3
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: LD_INT 3
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 3
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 3
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 3
45220: PUSH
45221: LD_INT 3
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: LD_INT 3
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 3
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 3
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 3
45271: NEG
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 3
45283: NEG
45284: PUSH
45285: LD_INT 3
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45324: LD_ADDR_VAR 0 43
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 3
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 3
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 3
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 3
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: LD_INT 3
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 3
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 3
45620: NEG
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 3
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45672: LD_ADDR_VAR 0 44
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: LD_INT 3
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 3
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 3
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 3
45915: PUSH
45916: LD_INT 3
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: LD_INT 3
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 3
45946: NEG
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 3
45957: NEG
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 3
45969: NEG
45970: PUSH
45971: LD_INT 2
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 3
45981: NEG
45982: PUSH
45983: LD_INT 3
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46022: LD_ADDR_VAR 0 45
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: LD_INT 3
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 3
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 3
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: LD_INT 3
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: PUSH
46279: LD_INT 3
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 3
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 3
46319: NEG
46320: PUSH
46321: LD_INT 2
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: NEG
46332: PUSH
46333: LD_INT 3
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46372: LD_ADDR_VAR 0 46
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 3
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 3
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 2
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 3
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 3
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 3
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 3
46668: NEG
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: NEG
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46720: LD_ADDR_VAR 0 47
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46871: LD_ADDR_VAR 0 48
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47018: LD_ADDR_VAR 0 49
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: LD_INT 2
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47162: LD_ADDR_VAR 0 50
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47306: LD_ADDR_VAR 0 51
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47453: LD_ADDR_VAR 0 52
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: LD_INT 2
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47604: LD_ADDR_VAR 0 53
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: LD_INT 2
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47834: LD_ADDR_VAR 0 54
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 2
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48064: LD_ADDR_VAR 0 55
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: LD_INT 2
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: NEG
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48294: LD_ADDR_VAR 0 56
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 2
48481: NEG
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48524: LD_ADDR_VAR 0 57
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48754: LD_ADDR_VAR 0 58
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48984: LD_ADDR_VAR 0 59
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49072: LD_ADDR_VAR 0 60
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49160: LD_ADDR_VAR 0 61
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49248: LD_ADDR_VAR 0 62
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49336: LD_ADDR_VAR 0 63
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49424: LD_ADDR_VAR 0 64
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: ST_TO_ADDR
// end ; 1 :
49512: GO 55409
49514: LD_INT 1
49516: DOUBLE
49517: EQUAL
49518: IFTRUE 49522
49520: GO 52145
49522: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49523: LD_ADDR_VAR 0 11
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: LD_INT 3
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 2
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: LIST
49566: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49567: LD_ADDR_VAR 0 12
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 3
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 3
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: LIST
49607: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49608: LD_ADDR_VAR 0 13
49612: PUSH
49613: LD_INT 3
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: LD_INT 3
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: LIST
49647: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49648: LD_ADDR_VAR 0 14
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 3
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 3
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: LIST
49688: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49689: LD_ADDR_VAR 0 15
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 3
49707: NEG
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 3
49718: NEG
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: LIST
49732: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49733: LD_ADDR_VAR 0 16
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: LD_INT 3
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 3
49752: NEG
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 3
49764: NEG
49765: PUSH
49766: LD_INT 3
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: LIST
49778: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49779: LD_ADDR_VAR 0 17
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 3
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 3
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: LIST
49822: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49823: LD_ADDR_VAR 0 18
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49864: LD_ADDR_VAR 0 19
49868: PUSH
49869: LD_INT 3
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 3
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: LIST
49903: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49904: LD_ADDR_VAR 0 20
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: LD_INT 3
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 3
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: LIST
49944: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49945: LD_ADDR_VAR 0 21
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 3
49963: NEG
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 3
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: LIST
49988: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49989: LD_ADDR_VAR 0 22
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: LD_INT 3
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 3
50008: NEG
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: LD_INT 3
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: LIST
50034: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50035: LD_ADDR_VAR 0 23
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 3
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: LD_INT 4
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 3
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: LIST
50078: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50079: LD_ADDR_VAR 0 24
50083: PUSH
50084: LD_INT 3
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 3
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 4
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: LIST
50119: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50120: LD_ADDR_VAR 0 25
50124: PUSH
50125: LD_INT 3
50127: PUSH
50128: LD_INT 3
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 4
50137: PUSH
50138: LD_INT 3
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 3
50147: PUSH
50148: LD_INT 4
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: LIST
50159: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50160: LD_ADDR_VAR 0 26
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 3
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: LD_INT 4
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 3
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: LIST
50200: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50201: LD_ADDR_VAR 0 27
50205: PUSH
50206: LD_INT 3
50208: NEG
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: NEG
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 4
50230: NEG
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: LIST
50244: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50245: LD_ADDR_VAR 0 28
50249: PUSH
50250: LD_INT 3
50252: NEG
50253: PUSH
50254: LD_INT 3
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 3
50264: NEG
50265: PUSH
50266: LD_INT 4
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 4
50276: NEG
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: LIST
50290: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50291: LD_ADDR_VAR 0 29
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: LD_INT 3
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 3
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: LD_INT 4
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 4
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 3
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 5
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 5
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 4
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: LD_INT 6
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 6
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 5
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50446: LD_ADDR_VAR 0 30
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 3
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 3
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 3
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 4
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 4
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 4
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 5
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 5
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 5
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 6
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 6
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50589: LD_ADDR_VAR 0 31
50593: PUSH
50594: LD_INT 3
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: LD_INT 3
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 3
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 4
50626: PUSH
50627: LD_INT 3
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 4
50636: PUSH
50637: LD_INT 4
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: LD_INT 4
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 5
50656: PUSH
50657: LD_INT 4
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 5
50666: PUSH
50667: LD_INT 5
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 4
50676: PUSH
50677: LD_INT 5
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 6
50686: PUSH
50687: LD_INT 5
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 6
50696: PUSH
50697: LD_INT 6
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 5
50706: PUSH
50707: LD_INT 6
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50728: LD_ADDR_VAR 0 32
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 3
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: LD_INT 4
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 4
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 3
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 5
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 5
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: LD_INT 4
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 6
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 6
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 5
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50871: LD_ADDR_VAR 0 33
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 3
50889: NEG
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 3
50900: NEG
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 3
50912: NEG
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 4
50923: NEG
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 4
50934: NEG
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 4
50946: NEG
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 5
50957: NEG
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 5
50968: NEG
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 5
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 6
50991: NEG
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 6
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51026: LD_ADDR_VAR 0 34
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: LD_INT 3
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 3
51045: NEG
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 3
51057: NEG
51058: PUSH
51059: LD_INT 3
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 3
51069: NEG
51070: PUSH
51071: LD_INT 4
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 4
51081: NEG
51082: PUSH
51083: LD_INT 3
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 4
51093: NEG
51094: PUSH
51095: LD_INT 4
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 4
51105: NEG
51106: PUSH
51107: LD_INT 5
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 5
51117: NEG
51118: PUSH
51119: LD_INT 4
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 5
51129: NEG
51130: PUSH
51131: LD_INT 5
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 5
51141: NEG
51142: PUSH
51143: LD_INT 6
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 6
51153: NEG
51154: PUSH
51155: LD_INT 5
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 6
51165: NEG
51166: PUSH
51167: LD_INT 6
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51189: LD_ADDR_VAR 0 41
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: LD_INT 3
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: LIST
51232: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51233: LD_ADDR_VAR 0 42
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: LIST
51273: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51274: LD_ADDR_VAR 0 43
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 3
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51314: LD_ADDR_VAR 0 44
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: LD_INT 3
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: LIST
51354: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51355: LD_ADDR_VAR 0 45
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51399: LD_ADDR_VAR 0 46
51403: PUSH
51404: LD_INT 2
51406: NEG
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: LD_INT 3
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 3
51430: NEG
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: LIST
51444: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51445: LD_ADDR_VAR 0 47
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: LD_INT 3
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 3
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51478: LD_ADDR_VAR 0 48
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51509: LD_ADDR_VAR 0 49
51513: PUSH
51514: LD_INT 3
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51538: LD_ADDR_VAR 0 50
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: LD_INT 3
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 3
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51567: LD_ADDR_VAR 0 51
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51598: LD_ADDR_VAR 0 52
51602: PUSH
51603: LD_INT 3
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 3
51617: NEG
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51631: LD_ADDR_VAR 0 53
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 3
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: LIST
51674: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51675: LD_ADDR_VAR 0 54
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 3
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 3
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: LIST
51715: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51716: LD_ADDR_VAR 0 55
51720: PUSH
51721: LD_INT 3
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: LIST
51755: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51756: LD_ADDR_VAR 0 56
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 3
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51797: LD_ADDR_VAR 0 57
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 3
51815: NEG
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 3
51826: NEG
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51841: LD_ADDR_VAR 0 58
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: LD_INT 3
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: NEG
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 3
51872: NEG
51873: PUSH
51874: LD_INT 3
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51887: LD_ADDR_VAR 0 59
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51931: LD_ADDR_VAR 0 60
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: LIST
51971: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51972: LD_ADDR_VAR 0 61
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: LIST
52011: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52012: LD_ADDR_VAR 0 62
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52053: LD_ADDR_VAR 0 63
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52097: LD_ADDR_VAR 0 64
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: LIST
52142: ST_TO_ADDR
// end ; 2 :
52143: GO 55409
52145: LD_INT 2
52147: DOUBLE
52148: EQUAL
52149: IFTRUE 52153
52151: GO 55408
52153: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52154: LD_ADDR_VAR 0 29
52158: PUSH
52159: LD_INT 4
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 4
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 5
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 5
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 4
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 3
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 3
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 5
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 4
52274: PUSH
52275: LD_INT 3
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 4
52284: PUSH
52285: LD_INT 4
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: LD_INT 4
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 3
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 4
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 4
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 4
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: LD_INT 4
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 5
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 5
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 4
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 3
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: LD_INT 5
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 2
52471: NEG
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 3
52482: NEG
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 4
52493: NEG
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 4
52504: NEG
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 4
52516: NEG
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 4
52539: NEG
52540: PUSH
52541: LD_INT 4
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 4
52551: NEG
52552: PUSH
52553: LD_INT 5
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 3
52563: NEG
52564: PUSH
52565: LD_INT 4
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 3
52575: NEG
52576: PUSH
52577: LD_INT 3
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 4
52587: NEG
52588: PUSH
52589: LD_INT 3
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 5
52599: NEG
52600: PUSH
52601: LD_INT 4
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 5
52611: NEG
52612: PUSH
52613: LD_INT 5
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 3
52623: NEG
52624: PUSH
52625: LD_INT 5
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 5
52635: NEG
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52692: LD_ADDR_VAR 0 30
52696: PUSH
52697: LD_INT 4
52699: PUSH
52700: LD_INT 4
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 4
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 5
52719: PUSH
52720: LD_INT 4
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 5
52729: PUSH
52730: LD_INT 5
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 4
52739: PUSH
52740: LD_INT 5
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: PUSH
52750: LD_INT 4
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 3
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 5
52769: PUSH
52770: LD_INT 3
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: LD_INT 5
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 3
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: LD_INT 3
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: LD_INT 4
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 4
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: LD_INT 3
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: LD_INT 4
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 4
52882: NEG
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 4
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 3
52905: NEG
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: NEG
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 4
52927: NEG
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 5
52938: NEG
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 5
52949: NEG
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 5
52961: NEG
52962: PUSH
52963: LD_INT 2
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 3
52973: NEG
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 3
52984: NEG
52985: PUSH
52986: LD_INT 3
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 3
52996: NEG
52997: PUSH
52998: LD_INT 4
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 2
53020: NEG
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 3
53032: NEG
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 4
53044: NEG
53045: PUSH
53046: LD_INT 3
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 4
53056: NEG
53057: PUSH
53058: LD_INT 4
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: LD_INT 4
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 4
53080: NEG
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 4
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 5
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 4
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: LD_INT 3
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 3
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 4
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: LD_INT 5
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 2
53182: NEG
53183: PUSH
53184: LD_INT 5
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53239: LD_ADDR_VAR 0 31
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 4
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 4
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 5
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 5
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 4
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 3
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: LD_INT 5
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: LD_INT 3
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 3
53339: NEG
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 3
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 4
53395: NEG
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 4
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 4
53418: NEG
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 4
53441: NEG
53442: PUSH
53443: LD_INT 4
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 4
53453: NEG
53454: PUSH
53455: LD_INT 5
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 3
53465: NEG
53466: PUSH
53467: LD_INT 4
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 3
53477: NEG
53478: PUSH
53479: LD_INT 3
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 4
53489: NEG
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 5
53501: NEG
53502: PUSH
53503: LD_INT 4
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 5
53513: NEG
53514: PUSH
53515: LD_INT 5
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 3
53525: NEG
53526: PUSH
53527: LD_INT 5
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 5
53537: NEG
53538: PUSH
53539: LD_INT 3
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 3
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: LD_INT 4
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: LD_INT 3
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 3
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 4
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: LD_INT 4
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 4
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 4
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 5
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 5
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 4
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 5
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53789: LD_ADDR_VAR 0 32
53793: PUSH
53794: LD_INT 4
53796: NEG
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 4
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: NEG
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: NEG
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 4
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 5
53852: NEG
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 5
53863: NEG
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 5
53875: NEG
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 3
53898: NEG
53899: PUSH
53900: LD_INT 3
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 3
53910: NEG
53911: PUSH
53912: LD_INT 4
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 3
53946: NEG
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 4
53958: NEG
53959: PUSH
53960: LD_INT 3
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 4
53970: NEG
53971: PUSH
53972: LD_INT 4
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 4
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 4
53994: NEG
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 4
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 5
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: LD_INT 4
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 4
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: LD_INT 5
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 3
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: LD_INT 5
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 3
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 3
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 4
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 4
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 2
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 4
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 4
54201: PUSH
54202: LD_INT 4
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 4
54211: PUSH
54212: LD_INT 3
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 5
54221: PUSH
54222: LD_INT 4
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 5
54231: PUSH
54232: LD_INT 5
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 4
54241: PUSH
54242: LD_INT 5
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 3
54251: PUSH
54252: LD_INT 4
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 3
54261: PUSH
54262: LD_INT 3
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 5
54271: PUSH
54272: LD_INT 3
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: LD_INT 5
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54336: LD_ADDR_VAR 0 33
54340: PUSH
54341: LD_INT 4
54343: NEG
54344: PUSH
54345: LD_INT 4
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 4
54355: NEG
54356: PUSH
54357: LD_INT 5
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 3
54367: NEG
54368: PUSH
54369: LD_INT 4
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 3
54379: NEG
54380: PUSH
54381: LD_INT 3
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 4
54391: NEG
54392: PUSH
54393: LD_INT 3
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 5
54403: NEG
54404: PUSH
54405: LD_INT 4
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 5
54415: NEG
54416: PUSH
54417: LD_INT 5
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 3
54427: NEG
54428: PUSH
54429: LD_INT 5
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 5
54439: NEG
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 4
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 2
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: LD_INT 3
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: LD_INT 4
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: LD_INT 4
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 4
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 4
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 5
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 5
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 4
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 3
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 3
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 3
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 5
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 3
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 3
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 4
54666: PUSH
54667: LD_INT 3
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 4
54676: PUSH
54677: LD_INT 4
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 3
54686: PUSH
54687: LD_INT 4
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: LD_INT 3
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 4
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: LD_INT 4
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: LD_INT 4
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 3
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 4
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 5
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 5
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 4
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: LD_INT 5
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: LD_INT 3
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54874: LD_ADDR_VAR 0 34
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 4
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 5
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: LD_INT 4
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 3
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 3
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 4
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 5
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: LD_INT 3
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: LD_INT 5
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 3
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 4
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 4
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 3
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 4
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 4
55076: PUSH
55077: LD_INT 4
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 4
55086: PUSH
55087: LD_INT 3
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 5
55096: PUSH
55097: LD_INT 4
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 5
55106: PUSH
55107: LD_INT 5
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 4
55116: PUSH
55117: LD_INT 5
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: LD_INT 4
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 5
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: PUSH
55157: LD_INT 5
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 3
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 4
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 4
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 3
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: LD_INT 4
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: LD_INT 2
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 4
55259: NEG
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 4
55270: NEG
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 3
55293: NEG
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 4
55304: NEG
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 5
55315: NEG
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 5
55326: NEG
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 5
55338: NEG
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 3
55350: NEG
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: ST_TO_ADDR
// end ; end ;
55406: GO 55409
55408: POP
// case btype of b_depot , b_warehouse :
55409: LD_VAR 0 1
55413: PUSH
55414: LD_INT 0
55416: DOUBLE
55417: EQUAL
55418: IFTRUE 55428
55420: LD_INT 1
55422: DOUBLE
55423: EQUAL
55424: IFTRUE 55428
55426: GO 55629
55428: POP
// case nation of nation_american :
55429: LD_VAR 0 5
55433: PUSH
55434: LD_INT 1
55436: DOUBLE
55437: EQUAL
55438: IFTRUE 55442
55440: GO 55498
55442: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55443: LD_ADDR_VAR 0 9
55447: PUSH
55448: LD_VAR 0 11
55452: PUSH
55453: LD_VAR 0 12
55457: PUSH
55458: LD_VAR 0 13
55462: PUSH
55463: LD_VAR 0 14
55467: PUSH
55468: LD_VAR 0 15
55472: PUSH
55473: LD_VAR 0 16
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: PUSH
55486: LD_VAR 0 4
55490: PUSH
55491: LD_INT 1
55493: PLUS
55494: ARRAY
55495: ST_TO_ADDR
55496: GO 55627
55498: LD_INT 2
55500: DOUBLE
55501: EQUAL
55502: IFTRUE 55506
55504: GO 55562
55506: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55507: LD_ADDR_VAR 0 9
55511: PUSH
55512: LD_VAR 0 17
55516: PUSH
55517: LD_VAR 0 18
55521: PUSH
55522: LD_VAR 0 19
55526: PUSH
55527: LD_VAR 0 20
55531: PUSH
55532: LD_VAR 0 21
55536: PUSH
55537: LD_VAR 0 22
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: PUSH
55550: LD_VAR 0 4
55554: PUSH
55555: LD_INT 1
55557: PLUS
55558: ARRAY
55559: ST_TO_ADDR
55560: GO 55627
55562: LD_INT 3
55564: DOUBLE
55565: EQUAL
55566: IFTRUE 55570
55568: GO 55626
55570: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55571: LD_ADDR_VAR 0 9
55575: PUSH
55576: LD_VAR 0 23
55580: PUSH
55581: LD_VAR 0 24
55585: PUSH
55586: LD_VAR 0 25
55590: PUSH
55591: LD_VAR 0 26
55595: PUSH
55596: LD_VAR 0 27
55600: PUSH
55601: LD_VAR 0 28
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: PUSH
55614: LD_VAR 0 4
55618: PUSH
55619: LD_INT 1
55621: PLUS
55622: ARRAY
55623: ST_TO_ADDR
55624: GO 55627
55626: POP
55627: GO 56182
55629: LD_INT 2
55631: DOUBLE
55632: EQUAL
55633: IFTRUE 55643
55635: LD_INT 3
55637: DOUBLE
55638: EQUAL
55639: IFTRUE 55643
55641: GO 55699
55643: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55644: LD_ADDR_VAR 0 9
55648: PUSH
55649: LD_VAR 0 29
55653: PUSH
55654: LD_VAR 0 30
55658: PUSH
55659: LD_VAR 0 31
55663: PUSH
55664: LD_VAR 0 32
55668: PUSH
55669: LD_VAR 0 33
55673: PUSH
55674: LD_VAR 0 34
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: PUSH
55687: LD_VAR 0 4
55691: PUSH
55692: LD_INT 1
55694: PLUS
55695: ARRAY
55696: ST_TO_ADDR
55697: GO 56182
55699: LD_INT 16
55701: DOUBLE
55702: EQUAL
55703: IFTRUE 55761
55705: LD_INT 17
55707: DOUBLE
55708: EQUAL
55709: IFTRUE 55761
55711: LD_INT 18
55713: DOUBLE
55714: EQUAL
55715: IFTRUE 55761
55717: LD_INT 19
55719: DOUBLE
55720: EQUAL
55721: IFTRUE 55761
55723: LD_INT 22
55725: DOUBLE
55726: EQUAL
55727: IFTRUE 55761
55729: LD_INT 20
55731: DOUBLE
55732: EQUAL
55733: IFTRUE 55761
55735: LD_INT 21
55737: DOUBLE
55738: EQUAL
55739: IFTRUE 55761
55741: LD_INT 23
55743: DOUBLE
55744: EQUAL
55745: IFTRUE 55761
55747: LD_INT 24
55749: DOUBLE
55750: EQUAL
55751: IFTRUE 55761
55753: LD_INT 25
55755: DOUBLE
55756: EQUAL
55757: IFTRUE 55761
55759: GO 55817
55761: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55762: LD_ADDR_VAR 0 9
55766: PUSH
55767: LD_VAR 0 35
55771: PUSH
55772: LD_VAR 0 36
55776: PUSH
55777: LD_VAR 0 37
55781: PUSH
55782: LD_VAR 0 38
55786: PUSH
55787: LD_VAR 0 39
55791: PUSH
55792: LD_VAR 0 40
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: PUSH
55805: LD_VAR 0 4
55809: PUSH
55810: LD_INT 1
55812: PLUS
55813: ARRAY
55814: ST_TO_ADDR
55815: GO 56182
55817: LD_INT 6
55819: DOUBLE
55820: EQUAL
55821: IFTRUE 55873
55823: LD_INT 7
55825: DOUBLE
55826: EQUAL
55827: IFTRUE 55873
55829: LD_INT 8
55831: DOUBLE
55832: EQUAL
55833: IFTRUE 55873
55835: LD_INT 13
55837: DOUBLE
55838: EQUAL
55839: IFTRUE 55873
55841: LD_INT 12
55843: DOUBLE
55844: EQUAL
55845: IFTRUE 55873
55847: LD_INT 15
55849: DOUBLE
55850: EQUAL
55851: IFTRUE 55873
55853: LD_INT 11
55855: DOUBLE
55856: EQUAL
55857: IFTRUE 55873
55859: LD_INT 14
55861: DOUBLE
55862: EQUAL
55863: IFTRUE 55873
55865: LD_INT 10
55867: DOUBLE
55868: EQUAL
55869: IFTRUE 55873
55871: GO 55929
55873: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55874: LD_ADDR_VAR 0 9
55878: PUSH
55879: LD_VAR 0 41
55883: PUSH
55884: LD_VAR 0 42
55888: PUSH
55889: LD_VAR 0 43
55893: PUSH
55894: LD_VAR 0 44
55898: PUSH
55899: LD_VAR 0 45
55903: PUSH
55904: LD_VAR 0 46
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: PUSH
55917: LD_VAR 0 4
55921: PUSH
55922: LD_INT 1
55924: PLUS
55925: ARRAY
55926: ST_TO_ADDR
55927: GO 56182
55929: LD_INT 36
55931: DOUBLE
55932: EQUAL
55933: IFTRUE 55937
55935: GO 55993
55937: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55938: LD_ADDR_VAR 0 9
55942: PUSH
55943: LD_VAR 0 47
55947: PUSH
55948: LD_VAR 0 48
55952: PUSH
55953: LD_VAR 0 49
55957: PUSH
55958: LD_VAR 0 50
55962: PUSH
55963: LD_VAR 0 51
55967: PUSH
55968: LD_VAR 0 52
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: PUSH
55981: LD_VAR 0 4
55985: PUSH
55986: LD_INT 1
55988: PLUS
55989: ARRAY
55990: ST_TO_ADDR
55991: GO 56182
55993: LD_INT 4
55995: DOUBLE
55996: EQUAL
55997: IFTRUE 56019
55999: LD_INT 5
56001: DOUBLE
56002: EQUAL
56003: IFTRUE 56019
56005: LD_INT 34
56007: DOUBLE
56008: EQUAL
56009: IFTRUE 56019
56011: LD_INT 37
56013: DOUBLE
56014: EQUAL
56015: IFTRUE 56019
56017: GO 56075
56019: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56020: LD_ADDR_VAR 0 9
56024: PUSH
56025: LD_VAR 0 53
56029: PUSH
56030: LD_VAR 0 54
56034: PUSH
56035: LD_VAR 0 55
56039: PUSH
56040: LD_VAR 0 56
56044: PUSH
56045: LD_VAR 0 57
56049: PUSH
56050: LD_VAR 0 58
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: PUSH
56063: LD_VAR 0 4
56067: PUSH
56068: LD_INT 1
56070: PLUS
56071: ARRAY
56072: ST_TO_ADDR
56073: GO 56182
56075: LD_INT 31
56077: DOUBLE
56078: EQUAL
56079: IFTRUE 56125
56081: LD_INT 32
56083: DOUBLE
56084: EQUAL
56085: IFTRUE 56125
56087: LD_INT 33
56089: DOUBLE
56090: EQUAL
56091: IFTRUE 56125
56093: LD_INT 27
56095: DOUBLE
56096: EQUAL
56097: IFTRUE 56125
56099: LD_INT 26
56101: DOUBLE
56102: EQUAL
56103: IFTRUE 56125
56105: LD_INT 28
56107: DOUBLE
56108: EQUAL
56109: IFTRUE 56125
56111: LD_INT 29
56113: DOUBLE
56114: EQUAL
56115: IFTRUE 56125
56117: LD_INT 30
56119: DOUBLE
56120: EQUAL
56121: IFTRUE 56125
56123: GO 56181
56125: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56126: LD_ADDR_VAR 0 9
56130: PUSH
56131: LD_VAR 0 59
56135: PUSH
56136: LD_VAR 0 60
56140: PUSH
56141: LD_VAR 0 61
56145: PUSH
56146: LD_VAR 0 62
56150: PUSH
56151: LD_VAR 0 63
56155: PUSH
56156: LD_VAR 0 64
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: PUSH
56169: LD_VAR 0 4
56173: PUSH
56174: LD_INT 1
56176: PLUS
56177: ARRAY
56178: ST_TO_ADDR
56179: GO 56182
56181: POP
// temp_list2 = [ ] ;
56182: LD_ADDR_VAR 0 10
56186: PUSH
56187: EMPTY
56188: ST_TO_ADDR
// for i in temp_list do
56189: LD_ADDR_VAR 0 8
56193: PUSH
56194: LD_VAR 0 9
56198: PUSH
56199: FOR_IN
56200: IFFALSE 56252
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56202: LD_ADDR_VAR 0 10
56206: PUSH
56207: LD_VAR 0 10
56211: PUSH
56212: LD_VAR 0 8
56216: PUSH
56217: LD_INT 1
56219: ARRAY
56220: PUSH
56221: LD_VAR 0 2
56225: PLUS
56226: PUSH
56227: LD_VAR 0 8
56231: PUSH
56232: LD_INT 2
56234: ARRAY
56235: PUSH
56236: LD_VAR 0 3
56240: PLUS
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: EMPTY
56247: LIST
56248: ADD
56249: ST_TO_ADDR
56250: GO 56199
56252: POP
56253: POP
// result = temp_list2 ;
56254: LD_ADDR_VAR 0 7
56258: PUSH
56259: LD_VAR 0 10
56263: ST_TO_ADDR
// end ;
56264: LD_VAR 0 7
56268: RET
// export function EnemyInRange ( unit , dist ) ; begin
56269: LD_INT 0
56271: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56272: LD_ADDR_VAR 0 3
56276: PUSH
56277: LD_VAR 0 1
56281: PPUSH
56282: CALL_OW 255
56286: PPUSH
56287: LD_VAR 0 1
56291: PPUSH
56292: CALL_OW 250
56296: PPUSH
56297: LD_VAR 0 1
56301: PPUSH
56302: CALL_OW 251
56306: PPUSH
56307: LD_VAR 0 2
56311: PPUSH
56312: CALL 29665 0 4
56316: PUSH
56317: LD_INT 4
56319: ARRAY
56320: ST_TO_ADDR
// end ;
56321: LD_VAR 0 3
56325: RET
// export function PlayerSeeMe ( unit ) ; begin
56326: LD_INT 0
56328: PPUSH
// result := See ( your_side , unit ) ;
56329: LD_ADDR_VAR 0 2
56333: PUSH
56334: LD_OWVAR 2
56338: PPUSH
56339: LD_VAR 0 1
56343: PPUSH
56344: CALL_OW 292
56348: ST_TO_ADDR
// end ;
56349: LD_VAR 0 2
56353: RET
// export function ReverseDir ( unit ) ; begin
56354: LD_INT 0
56356: PPUSH
// if not unit then
56357: LD_VAR 0 1
56361: NOT
56362: IFFALSE 56366
// exit ;
56364: GO 56389
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56366: LD_ADDR_VAR 0 2
56370: PUSH
56371: LD_VAR 0 1
56375: PPUSH
56376: CALL_OW 254
56380: PUSH
56381: LD_INT 3
56383: PLUS
56384: PUSH
56385: LD_INT 6
56387: MOD
56388: ST_TO_ADDR
// end ;
56389: LD_VAR 0 2
56393: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56394: LD_INT 0
56396: PPUSH
56397: PPUSH
56398: PPUSH
56399: PPUSH
56400: PPUSH
// if not hexes then
56401: LD_VAR 0 2
56405: NOT
56406: IFFALSE 56410
// exit ;
56408: GO 56558
// dist := 9999 ;
56410: LD_ADDR_VAR 0 5
56414: PUSH
56415: LD_INT 9999
56417: ST_TO_ADDR
// for i = 1 to hexes do
56418: LD_ADDR_VAR 0 4
56422: PUSH
56423: DOUBLE
56424: LD_INT 1
56426: DEC
56427: ST_TO_ADDR
56428: LD_VAR 0 2
56432: PUSH
56433: FOR_TO
56434: IFFALSE 56546
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56436: LD_VAR 0 1
56440: PPUSH
56441: LD_VAR 0 2
56445: PUSH
56446: LD_VAR 0 4
56450: ARRAY
56451: PUSH
56452: LD_INT 1
56454: ARRAY
56455: PPUSH
56456: LD_VAR 0 2
56460: PUSH
56461: LD_VAR 0 4
56465: ARRAY
56466: PUSH
56467: LD_INT 2
56469: ARRAY
56470: PPUSH
56471: CALL_OW 297
56475: PUSH
56476: LD_VAR 0 5
56480: LESS
56481: IFFALSE 56544
// begin hex := hexes [ i ] ;
56483: LD_ADDR_VAR 0 7
56487: PUSH
56488: LD_VAR 0 2
56492: PUSH
56493: LD_VAR 0 4
56497: ARRAY
56498: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56499: LD_ADDR_VAR 0 5
56503: PUSH
56504: LD_VAR 0 1
56508: PPUSH
56509: LD_VAR 0 2
56513: PUSH
56514: LD_VAR 0 4
56518: ARRAY
56519: PUSH
56520: LD_INT 1
56522: ARRAY
56523: PPUSH
56524: LD_VAR 0 2
56528: PUSH
56529: LD_VAR 0 4
56533: ARRAY
56534: PUSH
56535: LD_INT 2
56537: ARRAY
56538: PPUSH
56539: CALL_OW 297
56543: ST_TO_ADDR
// end ; end ;
56544: GO 56433
56546: POP
56547: POP
// result := hex ;
56548: LD_ADDR_VAR 0 3
56552: PUSH
56553: LD_VAR 0 7
56557: ST_TO_ADDR
// end ;
56558: LD_VAR 0 3
56562: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56563: LD_INT 0
56565: PPUSH
56566: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56567: LD_VAR 0 1
56571: NOT
56572: PUSH
56573: LD_VAR 0 1
56577: PUSH
56578: LD_INT 21
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 23
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PPUSH
56602: CALL_OW 69
56606: IN
56607: NOT
56608: OR
56609: IFFALSE 56613
// exit ;
56611: GO 56660
// for i = 1 to 3 do
56613: LD_ADDR_VAR 0 3
56617: PUSH
56618: DOUBLE
56619: LD_INT 1
56621: DEC
56622: ST_TO_ADDR
56623: LD_INT 3
56625: PUSH
56626: FOR_TO
56627: IFFALSE 56658
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56629: LD_VAR 0 1
56633: PPUSH
56634: CALL_OW 250
56638: PPUSH
56639: LD_VAR 0 1
56643: PPUSH
56644: CALL_OW 251
56648: PPUSH
56649: LD_INT 1
56651: PPUSH
56652: CALL_OW 453
56656: GO 56626
56658: POP
56659: POP
// end ;
56660: LD_VAR 0 2
56664: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56665: LD_INT 0
56667: PPUSH
56668: PPUSH
56669: PPUSH
56670: PPUSH
56671: PPUSH
56672: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56673: LD_VAR 0 1
56677: NOT
56678: PUSH
56679: LD_VAR 0 2
56683: NOT
56684: OR
56685: PUSH
56686: LD_VAR 0 1
56690: PPUSH
56691: CALL_OW 314
56695: OR
56696: IFFALSE 56700
// exit ;
56698: GO 57141
// x := GetX ( enemy_unit ) ;
56700: LD_ADDR_VAR 0 7
56704: PUSH
56705: LD_VAR 0 2
56709: PPUSH
56710: CALL_OW 250
56714: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56715: LD_ADDR_VAR 0 8
56719: PUSH
56720: LD_VAR 0 2
56724: PPUSH
56725: CALL_OW 251
56729: ST_TO_ADDR
// if not x or not y then
56730: LD_VAR 0 7
56734: NOT
56735: PUSH
56736: LD_VAR 0 8
56740: NOT
56741: OR
56742: IFFALSE 56746
// exit ;
56744: GO 57141
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56746: LD_ADDR_VAR 0 6
56750: PUSH
56751: LD_VAR 0 7
56755: PPUSH
56756: LD_INT 0
56758: PPUSH
56759: LD_INT 4
56761: PPUSH
56762: CALL_OW 272
56766: PUSH
56767: LD_VAR 0 8
56771: PPUSH
56772: LD_INT 0
56774: PPUSH
56775: LD_INT 4
56777: PPUSH
56778: CALL_OW 273
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_VAR 0 7
56791: PPUSH
56792: LD_INT 1
56794: PPUSH
56795: LD_INT 4
56797: PPUSH
56798: CALL_OW 272
56802: PUSH
56803: LD_VAR 0 8
56807: PPUSH
56808: LD_INT 1
56810: PPUSH
56811: LD_INT 4
56813: PPUSH
56814: CALL_OW 273
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_VAR 0 7
56827: PPUSH
56828: LD_INT 2
56830: PPUSH
56831: LD_INT 4
56833: PPUSH
56834: CALL_OW 272
56838: PUSH
56839: LD_VAR 0 8
56843: PPUSH
56844: LD_INT 2
56846: PPUSH
56847: LD_INT 4
56849: PPUSH
56850: CALL_OW 273
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_VAR 0 7
56863: PPUSH
56864: LD_INT 3
56866: PPUSH
56867: LD_INT 4
56869: PPUSH
56870: CALL_OW 272
56874: PUSH
56875: LD_VAR 0 8
56879: PPUSH
56880: LD_INT 3
56882: PPUSH
56883: LD_INT 4
56885: PPUSH
56886: CALL_OW 273
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_VAR 0 7
56899: PPUSH
56900: LD_INT 4
56902: PPUSH
56903: LD_INT 4
56905: PPUSH
56906: CALL_OW 272
56910: PUSH
56911: LD_VAR 0 8
56915: PPUSH
56916: LD_INT 4
56918: PPUSH
56919: LD_INT 4
56921: PPUSH
56922: CALL_OW 273
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_VAR 0 7
56935: PPUSH
56936: LD_INT 5
56938: PPUSH
56939: LD_INT 4
56941: PPUSH
56942: CALL_OW 272
56946: PUSH
56947: LD_VAR 0 8
56951: PPUSH
56952: LD_INT 5
56954: PPUSH
56955: LD_INT 4
56957: PPUSH
56958: CALL_OW 273
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: ST_TO_ADDR
// for i = tmp downto 1 do
56975: LD_ADDR_VAR 0 4
56979: PUSH
56980: DOUBLE
56981: LD_VAR 0 6
56985: INC
56986: ST_TO_ADDR
56987: LD_INT 1
56989: PUSH
56990: FOR_DOWNTO
56991: IFFALSE 57092
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56993: LD_VAR 0 6
56997: PUSH
56998: LD_VAR 0 4
57002: ARRAY
57003: PUSH
57004: LD_INT 1
57006: ARRAY
57007: PPUSH
57008: LD_VAR 0 6
57012: PUSH
57013: LD_VAR 0 4
57017: ARRAY
57018: PUSH
57019: LD_INT 2
57021: ARRAY
57022: PPUSH
57023: CALL_OW 488
57027: NOT
57028: PUSH
57029: LD_VAR 0 6
57033: PUSH
57034: LD_VAR 0 4
57038: ARRAY
57039: PUSH
57040: LD_INT 1
57042: ARRAY
57043: PPUSH
57044: LD_VAR 0 6
57048: PUSH
57049: LD_VAR 0 4
57053: ARRAY
57054: PUSH
57055: LD_INT 2
57057: ARRAY
57058: PPUSH
57059: CALL_OW 428
57063: PUSH
57064: LD_INT 0
57066: NONEQUAL
57067: OR
57068: IFFALSE 57090
// tmp := Delete ( tmp , i ) ;
57070: LD_ADDR_VAR 0 6
57074: PUSH
57075: LD_VAR 0 6
57079: PPUSH
57080: LD_VAR 0 4
57084: PPUSH
57085: CALL_OW 3
57089: ST_TO_ADDR
57090: GO 56990
57092: POP
57093: POP
// j := GetClosestHex ( unit , tmp ) ;
57094: LD_ADDR_VAR 0 5
57098: PUSH
57099: LD_VAR 0 1
57103: PPUSH
57104: LD_VAR 0 6
57108: PPUSH
57109: CALL 56394 0 2
57113: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57114: LD_VAR 0 1
57118: PPUSH
57119: LD_VAR 0 5
57123: PUSH
57124: LD_INT 1
57126: ARRAY
57127: PPUSH
57128: LD_VAR 0 5
57132: PUSH
57133: LD_INT 2
57135: ARRAY
57136: PPUSH
57137: CALL_OW 111
// end ;
57141: LD_VAR 0 3
57145: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57146: LD_INT 0
57148: PPUSH
57149: PPUSH
57150: PPUSH
// uc_side = 0 ;
57151: LD_ADDR_OWVAR 20
57155: PUSH
57156: LD_INT 0
57158: ST_TO_ADDR
// uc_nation = 0 ;
57159: LD_ADDR_OWVAR 21
57163: PUSH
57164: LD_INT 0
57166: ST_TO_ADDR
// InitHc_All ( ) ;
57167: CALL_OW 584
// InitVc ;
57171: CALL_OW 20
// if mastodonts then
57175: LD_VAR 0 6
57179: IFFALSE 57246
// for i = 1 to mastodonts do
57181: LD_ADDR_VAR 0 11
57185: PUSH
57186: DOUBLE
57187: LD_INT 1
57189: DEC
57190: ST_TO_ADDR
57191: LD_VAR 0 6
57195: PUSH
57196: FOR_TO
57197: IFFALSE 57244
// begin vc_chassis := 31 ;
57199: LD_ADDR_OWVAR 37
57203: PUSH
57204: LD_INT 31
57206: ST_TO_ADDR
// vc_control := control_rider ;
57207: LD_ADDR_OWVAR 38
57211: PUSH
57212: LD_INT 4
57214: ST_TO_ADDR
// animal := CreateVehicle ;
57215: LD_ADDR_VAR 0 12
57219: PUSH
57220: CALL_OW 45
57224: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57225: LD_VAR 0 12
57229: PPUSH
57230: LD_VAR 0 8
57234: PPUSH
57235: LD_INT 0
57237: PPUSH
57238: CALL 59434 0 3
// end ;
57242: GO 57196
57244: POP
57245: POP
// if horses then
57246: LD_VAR 0 5
57250: IFFALSE 57317
// for i = 1 to horses do
57252: LD_ADDR_VAR 0 11
57256: PUSH
57257: DOUBLE
57258: LD_INT 1
57260: DEC
57261: ST_TO_ADDR
57262: LD_VAR 0 5
57266: PUSH
57267: FOR_TO
57268: IFFALSE 57315
// begin hc_class := 21 ;
57270: LD_ADDR_OWVAR 28
57274: PUSH
57275: LD_INT 21
57277: ST_TO_ADDR
// hc_gallery :=  ;
57278: LD_ADDR_OWVAR 33
57282: PUSH
57283: LD_STRING 
57285: ST_TO_ADDR
// animal := CreateHuman ;
57286: LD_ADDR_VAR 0 12
57290: PUSH
57291: CALL_OW 44
57295: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57296: LD_VAR 0 12
57300: PPUSH
57301: LD_VAR 0 8
57305: PPUSH
57306: LD_INT 0
57308: PPUSH
57309: CALL 59434 0 3
// end ;
57313: GO 57267
57315: POP
57316: POP
// if birds then
57317: LD_VAR 0 1
57321: IFFALSE 57388
// for i = 1 to birds do
57323: LD_ADDR_VAR 0 11
57327: PUSH
57328: DOUBLE
57329: LD_INT 1
57331: DEC
57332: ST_TO_ADDR
57333: LD_VAR 0 1
57337: PUSH
57338: FOR_TO
57339: IFFALSE 57386
// begin hc_class = 18 ;
57341: LD_ADDR_OWVAR 28
57345: PUSH
57346: LD_INT 18
57348: ST_TO_ADDR
// hc_gallery =  ;
57349: LD_ADDR_OWVAR 33
57353: PUSH
57354: LD_STRING 
57356: ST_TO_ADDR
// animal := CreateHuman ;
57357: LD_ADDR_VAR 0 12
57361: PUSH
57362: CALL_OW 44
57366: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57367: LD_VAR 0 12
57371: PPUSH
57372: LD_VAR 0 8
57376: PPUSH
57377: LD_INT 0
57379: PPUSH
57380: CALL 59434 0 3
// end ;
57384: GO 57338
57386: POP
57387: POP
// if tigers then
57388: LD_VAR 0 2
57392: IFFALSE 57476
// for i = 1 to tigers do
57394: LD_ADDR_VAR 0 11
57398: PUSH
57399: DOUBLE
57400: LD_INT 1
57402: DEC
57403: ST_TO_ADDR
57404: LD_VAR 0 2
57408: PUSH
57409: FOR_TO
57410: IFFALSE 57474
// begin hc_class = class_tiger ;
57412: LD_ADDR_OWVAR 28
57416: PUSH
57417: LD_INT 14
57419: ST_TO_ADDR
// hc_gallery =  ;
57420: LD_ADDR_OWVAR 33
57424: PUSH
57425: LD_STRING 
57427: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57428: LD_ADDR_OWVAR 35
57432: PUSH
57433: LD_INT 7
57435: NEG
57436: PPUSH
57437: LD_INT 7
57439: PPUSH
57440: CALL_OW 12
57444: ST_TO_ADDR
// animal := CreateHuman ;
57445: LD_ADDR_VAR 0 12
57449: PUSH
57450: CALL_OW 44
57454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57455: LD_VAR 0 12
57459: PPUSH
57460: LD_VAR 0 8
57464: PPUSH
57465: LD_INT 0
57467: PPUSH
57468: CALL 59434 0 3
// end ;
57472: GO 57409
57474: POP
57475: POP
// if apemans then
57476: LD_VAR 0 3
57480: IFFALSE 57603
// for i = 1 to apemans do
57482: LD_ADDR_VAR 0 11
57486: PUSH
57487: DOUBLE
57488: LD_INT 1
57490: DEC
57491: ST_TO_ADDR
57492: LD_VAR 0 3
57496: PUSH
57497: FOR_TO
57498: IFFALSE 57601
// begin hc_class = class_apeman ;
57500: LD_ADDR_OWVAR 28
57504: PUSH
57505: LD_INT 12
57507: ST_TO_ADDR
// hc_gallery =  ;
57508: LD_ADDR_OWVAR 33
57512: PUSH
57513: LD_STRING 
57515: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57516: LD_ADDR_OWVAR 35
57520: PUSH
57521: LD_INT 2
57523: NEG
57524: PPUSH
57525: LD_INT 2
57527: PPUSH
57528: CALL_OW 12
57532: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57533: LD_ADDR_OWVAR 31
57537: PUSH
57538: LD_INT 1
57540: PPUSH
57541: LD_INT 3
57543: PPUSH
57544: CALL_OW 12
57548: PUSH
57549: LD_INT 1
57551: PPUSH
57552: LD_INT 3
57554: PPUSH
57555: CALL_OW 12
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: ST_TO_ADDR
// animal := CreateHuman ;
57572: LD_ADDR_VAR 0 12
57576: PUSH
57577: CALL_OW 44
57581: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57582: LD_VAR 0 12
57586: PPUSH
57587: LD_VAR 0 8
57591: PPUSH
57592: LD_INT 0
57594: PPUSH
57595: CALL 59434 0 3
// end ;
57599: GO 57497
57601: POP
57602: POP
// if enchidnas then
57603: LD_VAR 0 4
57607: IFFALSE 57674
// for i = 1 to enchidnas do
57609: LD_ADDR_VAR 0 11
57613: PUSH
57614: DOUBLE
57615: LD_INT 1
57617: DEC
57618: ST_TO_ADDR
57619: LD_VAR 0 4
57623: PUSH
57624: FOR_TO
57625: IFFALSE 57672
// begin hc_class = 13 ;
57627: LD_ADDR_OWVAR 28
57631: PUSH
57632: LD_INT 13
57634: ST_TO_ADDR
// hc_gallery =  ;
57635: LD_ADDR_OWVAR 33
57639: PUSH
57640: LD_STRING 
57642: ST_TO_ADDR
// animal := CreateHuman ;
57643: LD_ADDR_VAR 0 12
57647: PUSH
57648: CALL_OW 44
57652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57653: LD_VAR 0 12
57657: PPUSH
57658: LD_VAR 0 8
57662: PPUSH
57663: LD_INT 0
57665: PPUSH
57666: CALL 59434 0 3
// end ;
57670: GO 57624
57672: POP
57673: POP
// if fishes then
57674: LD_VAR 0 7
57678: IFFALSE 57745
// for i = 1 to fishes do
57680: LD_ADDR_VAR 0 11
57684: PUSH
57685: DOUBLE
57686: LD_INT 1
57688: DEC
57689: ST_TO_ADDR
57690: LD_VAR 0 7
57694: PUSH
57695: FOR_TO
57696: IFFALSE 57743
// begin hc_class = 20 ;
57698: LD_ADDR_OWVAR 28
57702: PUSH
57703: LD_INT 20
57705: ST_TO_ADDR
// hc_gallery =  ;
57706: LD_ADDR_OWVAR 33
57710: PUSH
57711: LD_STRING 
57713: ST_TO_ADDR
// animal := CreateHuman ;
57714: LD_ADDR_VAR 0 12
57718: PUSH
57719: CALL_OW 44
57723: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57724: LD_VAR 0 12
57728: PPUSH
57729: LD_VAR 0 9
57733: PPUSH
57734: LD_INT 0
57736: PPUSH
57737: CALL 59434 0 3
// end ;
57741: GO 57695
57743: POP
57744: POP
// end ;
57745: LD_VAR 0 10
57749: RET
// export function WantHeal ( sci , unit ) ; begin
57750: LD_INT 0
57752: PPUSH
// if GetTaskList ( sci ) > 0 then
57753: LD_VAR 0 1
57757: PPUSH
57758: CALL_OW 437
57762: PUSH
57763: LD_INT 0
57765: GREATER
57766: IFFALSE 57836
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57768: LD_VAR 0 1
57772: PPUSH
57773: CALL_OW 437
57777: PUSH
57778: LD_INT 1
57780: ARRAY
57781: PUSH
57782: LD_INT 1
57784: ARRAY
57785: PUSH
57786: LD_STRING l
57788: EQUAL
57789: PUSH
57790: LD_VAR 0 1
57794: PPUSH
57795: CALL_OW 437
57799: PUSH
57800: LD_INT 1
57802: ARRAY
57803: PUSH
57804: LD_INT 4
57806: ARRAY
57807: PUSH
57808: LD_VAR 0 2
57812: EQUAL
57813: AND
57814: IFFALSE 57826
// result := true else
57816: LD_ADDR_VAR 0 3
57820: PUSH
57821: LD_INT 1
57823: ST_TO_ADDR
57824: GO 57834
// result := false ;
57826: LD_ADDR_VAR 0 3
57830: PUSH
57831: LD_INT 0
57833: ST_TO_ADDR
// end else
57834: GO 57844
// result := false ;
57836: LD_ADDR_VAR 0 3
57840: PUSH
57841: LD_INT 0
57843: ST_TO_ADDR
// end ;
57844: LD_VAR 0 3
57848: RET
// export function HealTarget ( sci ) ; begin
57849: LD_INT 0
57851: PPUSH
// if not sci then
57852: LD_VAR 0 1
57856: NOT
57857: IFFALSE 57861
// exit ;
57859: GO 57926
// result := 0 ;
57861: LD_ADDR_VAR 0 2
57865: PUSH
57866: LD_INT 0
57868: ST_TO_ADDR
// if GetTaskList ( sci ) then
57869: LD_VAR 0 1
57873: PPUSH
57874: CALL_OW 437
57878: IFFALSE 57926
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57880: LD_VAR 0 1
57884: PPUSH
57885: CALL_OW 437
57889: PUSH
57890: LD_INT 1
57892: ARRAY
57893: PUSH
57894: LD_INT 1
57896: ARRAY
57897: PUSH
57898: LD_STRING l
57900: EQUAL
57901: IFFALSE 57926
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57903: LD_ADDR_VAR 0 2
57907: PUSH
57908: LD_VAR 0 1
57912: PPUSH
57913: CALL_OW 437
57917: PUSH
57918: LD_INT 1
57920: ARRAY
57921: PUSH
57922: LD_INT 4
57924: ARRAY
57925: ST_TO_ADDR
// end ;
57926: LD_VAR 0 2
57930: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57931: LD_INT 0
57933: PPUSH
57934: PPUSH
57935: PPUSH
57936: PPUSH
// if not base_units then
57937: LD_VAR 0 1
57941: NOT
57942: IFFALSE 57946
// exit ;
57944: GO 58033
// result := false ;
57946: LD_ADDR_VAR 0 2
57950: PUSH
57951: LD_INT 0
57953: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57954: LD_ADDR_VAR 0 5
57958: PUSH
57959: LD_VAR 0 1
57963: PPUSH
57964: LD_INT 21
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PPUSH
57974: CALL_OW 72
57978: ST_TO_ADDR
// if not tmp then
57979: LD_VAR 0 5
57983: NOT
57984: IFFALSE 57988
// exit ;
57986: GO 58033
// for i in tmp do
57988: LD_ADDR_VAR 0 3
57992: PUSH
57993: LD_VAR 0 5
57997: PUSH
57998: FOR_IN
57999: IFFALSE 58031
// begin result := EnemyInRange ( i , 22 ) ;
58001: LD_ADDR_VAR 0 2
58005: PUSH
58006: LD_VAR 0 3
58010: PPUSH
58011: LD_INT 22
58013: PPUSH
58014: CALL 56269 0 2
58018: ST_TO_ADDR
// if result then
58019: LD_VAR 0 2
58023: IFFALSE 58029
// exit ;
58025: POP
58026: POP
58027: GO 58033
// end ;
58029: GO 57998
58031: POP
58032: POP
// end ;
58033: LD_VAR 0 2
58037: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58038: LD_INT 0
58040: PPUSH
58041: PPUSH
// if not units then
58042: LD_VAR 0 1
58046: NOT
58047: IFFALSE 58051
// exit ;
58049: GO 58121
// result := [ ] ;
58051: LD_ADDR_VAR 0 3
58055: PUSH
58056: EMPTY
58057: ST_TO_ADDR
// for i in units do
58058: LD_ADDR_VAR 0 4
58062: PUSH
58063: LD_VAR 0 1
58067: PUSH
58068: FOR_IN
58069: IFFALSE 58119
// if GetTag ( i ) = tag then
58071: LD_VAR 0 4
58075: PPUSH
58076: CALL_OW 110
58080: PUSH
58081: LD_VAR 0 2
58085: EQUAL
58086: IFFALSE 58117
// result := Replace ( result , result + 1 , i ) ;
58088: LD_ADDR_VAR 0 3
58092: PUSH
58093: LD_VAR 0 3
58097: PPUSH
58098: LD_VAR 0 3
58102: PUSH
58103: LD_INT 1
58105: PLUS
58106: PPUSH
58107: LD_VAR 0 4
58111: PPUSH
58112: CALL_OW 1
58116: ST_TO_ADDR
58117: GO 58068
58119: POP
58120: POP
// end ;
58121: LD_VAR 0 3
58125: RET
// export function IsDriver ( un ) ; begin
58126: LD_INT 0
58128: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58129: LD_ADDR_VAR 0 2
58133: PUSH
58134: LD_VAR 0 1
58138: PUSH
58139: LD_INT 55
58141: PUSH
58142: EMPTY
58143: LIST
58144: PPUSH
58145: CALL_OW 69
58149: IN
58150: ST_TO_ADDR
// end ;
58151: LD_VAR 0 2
58155: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58156: LD_INT 0
58158: PPUSH
58159: PPUSH
// list := [ ] ;
58160: LD_ADDR_VAR 0 5
58164: PUSH
58165: EMPTY
58166: ST_TO_ADDR
// case d of 0 :
58167: LD_VAR 0 3
58171: PUSH
58172: LD_INT 0
58174: DOUBLE
58175: EQUAL
58176: IFTRUE 58180
58178: GO 58313
58180: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58181: LD_ADDR_VAR 0 5
58185: PUSH
58186: LD_VAR 0 1
58190: PUSH
58191: LD_INT 4
58193: MINUS
58194: PUSH
58195: LD_VAR 0 2
58199: PUSH
58200: LD_INT 4
58202: MINUS
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: LIST
58211: PUSH
58212: LD_VAR 0 1
58216: PUSH
58217: LD_INT 3
58219: MINUS
58220: PUSH
58221: LD_VAR 0 2
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: LIST
58233: PUSH
58234: LD_VAR 0 1
58238: PUSH
58239: LD_INT 4
58241: PLUS
58242: PUSH
58243: LD_VAR 0 2
58247: PUSH
58248: LD_INT 4
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: LIST
58255: PUSH
58256: LD_VAR 0 1
58260: PUSH
58261: LD_INT 3
58263: PLUS
58264: PUSH
58265: LD_VAR 0 2
58269: PUSH
58270: LD_INT 3
58272: PLUS
58273: PUSH
58274: LD_INT 5
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: LIST
58281: PUSH
58282: LD_VAR 0 1
58286: PUSH
58287: LD_VAR 0 2
58291: PUSH
58292: LD_INT 4
58294: PLUS
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: ST_TO_ADDR
// end ; 1 :
58311: GO 59011
58313: LD_INT 1
58315: DOUBLE
58316: EQUAL
58317: IFTRUE 58321
58319: GO 58454
58321: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58322: LD_ADDR_VAR 0 5
58326: PUSH
58327: LD_VAR 0 1
58331: PUSH
58332: LD_VAR 0 2
58336: PUSH
58337: LD_INT 4
58339: MINUS
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: LIST
58348: PUSH
58349: LD_VAR 0 1
58353: PUSH
58354: LD_INT 3
58356: MINUS
58357: PUSH
58358: LD_VAR 0 2
58362: PUSH
58363: LD_INT 3
58365: MINUS
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: LIST
58374: PUSH
58375: LD_VAR 0 1
58379: PUSH
58380: LD_INT 4
58382: MINUS
58383: PUSH
58384: LD_VAR 0 2
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: PUSH
58397: LD_VAR 0 1
58401: PUSH
58402: LD_VAR 0 2
58406: PUSH
58407: LD_INT 3
58409: PLUS
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: LIST
58418: PUSH
58419: LD_VAR 0 1
58423: PUSH
58424: LD_INT 4
58426: PLUS
58427: PUSH
58428: LD_VAR 0 2
58432: PUSH
58433: LD_INT 4
58435: PLUS
58436: PUSH
58437: LD_INT 5
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: ST_TO_ADDR
// end ; 2 :
58452: GO 59011
58454: LD_INT 2
58456: DOUBLE
58457: EQUAL
58458: IFTRUE 58462
58460: GO 58591
58462: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58463: LD_ADDR_VAR 0 5
58467: PUSH
58468: LD_VAR 0 1
58472: PUSH
58473: LD_VAR 0 2
58477: PUSH
58478: LD_INT 3
58480: MINUS
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: LIST
58489: PUSH
58490: LD_VAR 0 1
58494: PUSH
58495: LD_INT 4
58497: PLUS
58498: PUSH
58499: LD_VAR 0 2
58503: PUSH
58504: LD_INT 4
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: PUSH
58512: LD_VAR 0 1
58516: PUSH
58517: LD_VAR 0 2
58521: PUSH
58522: LD_INT 4
58524: PLUS
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: LIST
58533: PUSH
58534: LD_VAR 0 1
58538: PUSH
58539: LD_INT 3
58541: MINUS
58542: PUSH
58543: LD_VAR 0 2
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: LIST
58555: PUSH
58556: LD_VAR 0 1
58560: PUSH
58561: LD_INT 4
58563: MINUS
58564: PUSH
58565: LD_VAR 0 2
58569: PUSH
58570: LD_INT 4
58572: MINUS
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: LIST
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: ST_TO_ADDR
// end ; 3 :
58589: GO 59011
58591: LD_INT 3
58593: DOUBLE
58594: EQUAL
58595: IFTRUE 58599
58597: GO 58732
58599: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58600: LD_ADDR_VAR 0 5
58604: PUSH
58605: LD_VAR 0 1
58609: PUSH
58610: LD_INT 3
58612: PLUS
58613: PUSH
58614: LD_VAR 0 2
58618: PUSH
58619: LD_INT 4
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: LIST
58626: PUSH
58627: LD_VAR 0 1
58631: PUSH
58632: LD_INT 4
58634: PLUS
58635: PUSH
58636: LD_VAR 0 2
58640: PUSH
58641: LD_INT 4
58643: PLUS
58644: PUSH
58645: LD_INT 5
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: PUSH
58653: LD_VAR 0 1
58657: PUSH
58658: LD_INT 4
58660: MINUS
58661: PUSH
58662: LD_VAR 0 2
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: LIST
58674: PUSH
58675: LD_VAR 0 1
58679: PUSH
58680: LD_VAR 0 2
58684: PUSH
58685: LD_INT 4
58687: MINUS
58688: PUSH
58689: LD_INT 3
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: PUSH
58697: LD_VAR 0 1
58701: PUSH
58702: LD_INT 3
58704: MINUS
58705: PUSH
58706: LD_VAR 0 2
58710: PUSH
58711: LD_INT 3
58713: MINUS
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: LIST
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: ST_TO_ADDR
// end ; 4 :
58730: GO 59011
58732: LD_INT 4
58734: DOUBLE
58735: EQUAL
58736: IFTRUE 58740
58738: GO 58873
58740: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58741: LD_ADDR_VAR 0 5
58745: PUSH
58746: LD_VAR 0 1
58750: PUSH
58751: LD_VAR 0 2
58755: PUSH
58756: LD_INT 4
58758: PLUS
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: LIST
58767: PUSH
58768: LD_VAR 0 1
58772: PUSH
58773: LD_INT 3
58775: PLUS
58776: PUSH
58777: LD_VAR 0 2
58781: PUSH
58782: LD_INT 3
58784: PLUS
58785: PUSH
58786: LD_INT 5
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: LIST
58793: PUSH
58794: LD_VAR 0 1
58798: PUSH
58799: LD_INT 4
58801: PLUS
58802: PUSH
58803: LD_VAR 0 2
58807: PUSH
58808: LD_INT 4
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: LIST
58815: PUSH
58816: LD_VAR 0 1
58820: PUSH
58821: LD_VAR 0 2
58825: PUSH
58826: LD_INT 3
58828: MINUS
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: PUSH
58838: LD_VAR 0 1
58842: PUSH
58843: LD_INT 4
58845: MINUS
58846: PUSH
58847: LD_VAR 0 2
58851: PUSH
58852: LD_INT 4
58854: MINUS
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: ST_TO_ADDR
// end ; 5 :
58871: GO 59011
58873: LD_INT 5
58875: DOUBLE
58876: EQUAL
58877: IFTRUE 58881
58879: GO 59010
58881: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58882: LD_ADDR_VAR 0 5
58886: PUSH
58887: LD_VAR 0 1
58891: PUSH
58892: LD_INT 4
58894: MINUS
58895: PUSH
58896: LD_VAR 0 2
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: LIST
58908: PUSH
58909: LD_VAR 0 1
58913: PUSH
58914: LD_VAR 0 2
58918: PUSH
58919: LD_INT 4
58921: MINUS
58922: PUSH
58923: LD_INT 3
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: LIST
58930: PUSH
58931: LD_VAR 0 1
58935: PUSH
58936: LD_INT 4
58938: PLUS
58939: PUSH
58940: LD_VAR 0 2
58944: PUSH
58945: LD_INT 4
58947: PLUS
58948: PUSH
58949: LD_INT 5
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: LIST
58956: PUSH
58957: LD_VAR 0 1
58961: PUSH
58962: LD_INT 3
58964: PLUS
58965: PUSH
58966: LD_VAR 0 2
58970: PUSH
58971: LD_INT 4
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: PUSH
58979: LD_VAR 0 1
58983: PUSH
58984: LD_VAR 0 2
58988: PUSH
58989: LD_INT 3
58991: PLUS
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: ST_TO_ADDR
// end ; end ;
59008: GO 59011
59010: POP
// result := list ;
59011: LD_ADDR_VAR 0 4
59015: PUSH
59016: LD_VAR 0 5
59020: ST_TO_ADDR
// end ;
59021: LD_VAR 0 4
59025: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59026: LD_INT 0
59028: PPUSH
59029: PPUSH
59030: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59031: LD_VAR 0 1
59035: NOT
59036: PUSH
59037: LD_VAR 0 2
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: LD_INT 3
59050: PUSH
59051: LD_INT 4
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: IN
59060: NOT
59061: OR
59062: IFFALSE 59066
// exit ;
59064: GO 59158
// tmp := [ ] ;
59066: LD_ADDR_VAR 0 5
59070: PUSH
59071: EMPTY
59072: ST_TO_ADDR
// for i in units do
59073: LD_ADDR_VAR 0 4
59077: PUSH
59078: LD_VAR 0 1
59082: PUSH
59083: FOR_IN
59084: IFFALSE 59127
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59086: LD_ADDR_VAR 0 5
59090: PUSH
59091: LD_VAR 0 5
59095: PPUSH
59096: LD_VAR 0 5
59100: PUSH
59101: LD_INT 1
59103: PLUS
59104: PPUSH
59105: LD_VAR 0 4
59109: PPUSH
59110: LD_VAR 0 2
59114: PPUSH
59115: CALL_OW 259
59119: PPUSH
59120: CALL_OW 2
59124: ST_TO_ADDR
59125: GO 59083
59127: POP
59128: POP
// if not tmp then
59129: LD_VAR 0 5
59133: NOT
59134: IFFALSE 59138
// exit ;
59136: GO 59158
// result := SortListByListDesc ( units , tmp ) ;
59138: LD_ADDR_VAR 0 3
59142: PUSH
59143: LD_VAR 0 1
59147: PPUSH
59148: LD_VAR 0 5
59152: PPUSH
59153: CALL_OW 77
59157: ST_TO_ADDR
// end ;
59158: LD_VAR 0 3
59162: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59163: LD_INT 0
59165: PPUSH
59166: PPUSH
59167: PPUSH
// result := false ;
59168: LD_ADDR_VAR 0 3
59172: PUSH
59173: LD_INT 0
59175: ST_TO_ADDR
// x := GetX ( building ) ;
59176: LD_ADDR_VAR 0 4
59180: PUSH
59181: LD_VAR 0 2
59185: PPUSH
59186: CALL_OW 250
59190: ST_TO_ADDR
// y := GetY ( building ) ;
59191: LD_ADDR_VAR 0 5
59195: PUSH
59196: LD_VAR 0 2
59200: PPUSH
59201: CALL_OW 251
59205: ST_TO_ADDR
// if not building or not x or not y then
59206: LD_VAR 0 2
59210: NOT
59211: PUSH
59212: LD_VAR 0 4
59216: NOT
59217: OR
59218: PUSH
59219: LD_VAR 0 5
59223: NOT
59224: OR
59225: IFFALSE 59229
// exit ;
59227: GO 59321
// if GetTaskList ( unit ) then
59229: LD_VAR 0 1
59233: PPUSH
59234: CALL_OW 437
59238: IFFALSE 59321
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59240: LD_STRING e
59242: PUSH
59243: LD_VAR 0 1
59247: PPUSH
59248: CALL_OW 437
59252: PUSH
59253: LD_INT 1
59255: ARRAY
59256: PUSH
59257: LD_INT 1
59259: ARRAY
59260: EQUAL
59261: PUSH
59262: LD_VAR 0 4
59266: PUSH
59267: LD_VAR 0 1
59271: PPUSH
59272: CALL_OW 437
59276: PUSH
59277: LD_INT 1
59279: ARRAY
59280: PUSH
59281: LD_INT 2
59283: ARRAY
59284: EQUAL
59285: AND
59286: PUSH
59287: LD_VAR 0 5
59291: PUSH
59292: LD_VAR 0 1
59296: PPUSH
59297: CALL_OW 437
59301: PUSH
59302: LD_INT 1
59304: ARRAY
59305: PUSH
59306: LD_INT 3
59308: ARRAY
59309: EQUAL
59310: AND
59311: IFFALSE 59321
// result := true end ;
59313: LD_ADDR_VAR 0 3
59317: PUSH
59318: LD_INT 1
59320: ST_TO_ADDR
// end ;
59321: LD_VAR 0 3
59325: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59326: LD_INT 0
59328: PPUSH
// result := false ;
59329: LD_ADDR_VAR 0 4
59333: PUSH
59334: LD_INT 0
59336: ST_TO_ADDR
// if GetTaskList ( unit ) then
59337: LD_VAR 0 1
59341: PPUSH
59342: CALL_OW 437
59346: IFFALSE 59429
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59348: LD_STRING M
59350: PUSH
59351: LD_VAR 0 1
59355: PPUSH
59356: CALL_OW 437
59360: PUSH
59361: LD_INT 1
59363: ARRAY
59364: PUSH
59365: LD_INT 1
59367: ARRAY
59368: EQUAL
59369: PUSH
59370: LD_VAR 0 2
59374: PUSH
59375: LD_VAR 0 1
59379: PPUSH
59380: CALL_OW 437
59384: PUSH
59385: LD_INT 1
59387: ARRAY
59388: PUSH
59389: LD_INT 2
59391: ARRAY
59392: EQUAL
59393: AND
59394: PUSH
59395: LD_VAR 0 3
59399: PUSH
59400: LD_VAR 0 1
59404: PPUSH
59405: CALL_OW 437
59409: PUSH
59410: LD_INT 1
59412: ARRAY
59413: PUSH
59414: LD_INT 3
59416: ARRAY
59417: EQUAL
59418: AND
59419: IFFALSE 59429
// result := true ;
59421: LD_ADDR_VAR 0 4
59425: PUSH
59426: LD_INT 1
59428: ST_TO_ADDR
// end ; end ;
59429: LD_VAR 0 4
59433: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59434: LD_INT 0
59436: PPUSH
59437: PPUSH
59438: PPUSH
59439: PPUSH
// if not unit or not area then
59440: LD_VAR 0 1
59444: NOT
59445: PUSH
59446: LD_VAR 0 2
59450: NOT
59451: OR
59452: IFFALSE 59456
// exit ;
59454: GO 59620
// tmp := AreaToList ( area , i ) ;
59456: LD_ADDR_VAR 0 6
59460: PUSH
59461: LD_VAR 0 2
59465: PPUSH
59466: LD_VAR 0 5
59470: PPUSH
59471: CALL_OW 517
59475: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59476: LD_ADDR_VAR 0 5
59480: PUSH
59481: DOUBLE
59482: LD_INT 1
59484: DEC
59485: ST_TO_ADDR
59486: LD_VAR 0 6
59490: PUSH
59491: LD_INT 1
59493: ARRAY
59494: PUSH
59495: FOR_TO
59496: IFFALSE 59618
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59498: LD_ADDR_VAR 0 7
59502: PUSH
59503: LD_VAR 0 6
59507: PUSH
59508: LD_INT 1
59510: ARRAY
59511: PUSH
59512: LD_VAR 0 5
59516: ARRAY
59517: PUSH
59518: LD_VAR 0 6
59522: PUSH
59523: LD_INT 2
59525: ARRAY
59526: PUSH
59527: LD_VAR 0 5
59531: ARRAY
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59537: LD_VAR 0 7
59541: PUSH
59542: LD_INT 1
59544: ARRAY
59545: PPUSH
59546: LD_VAR 0 7
59550: PUSH
59551: LD_INT 2
59553: ARRAY
59554: PPUSH
59555: CALL_OW 428
59559: PUSH
59560: LD_INT 0
59562: EQUAL
59563: IFFALSE 59616
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59565: LD_VAR 0 1
59569: PPUSH
59570: LD_VAR 0 7
59574: PUSH
59575: LD_INT 1
59577: ARRAY
59578: PPUSH
59579: LD_VAR 0 7
59583: PUSH
59584: LD_INT 2
59586: ARRAY
59587: PPUSH
59588: LD_VAR 0 3
59592: PPUSH
59593: CALL_OW 48
// result := IsPlaced ( unit ) ;
59597: LD_ADDR_VAR 0 4
59601: PUSH
59602: LD_VAR 0 1
59606: PPUSH
59607: CALL_OW 305
59611: ST_TO_ADDR
// exit ;
59612: POP
59613: POP
59614: GO 59620
// end ; end ;
59616: GO 59495
59618: POP
59619: POP
// end ;
59620: LD_VAR 0 4
59624: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59625: LD_INT 0
59627: PPUSH
59628: PPUSH
59629: PPUSH
// if not side or side > 8 then
59630: LD_VAR 0 1
59634: NOT
59635: PUSH
59636: LD_VAR 0 1
59640: PUSH
59641: LD_INT 8
59643: GREATER
59644: OR
59645: IFFALSE 59649
// exit ;
59647: GO 59836
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59649: LD_ADDR_VAR 0 4
59653: PUSH
59654: LD_INT 22
59656: PUSH
59657: LD_VAR 0 1
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 21
59668: PUSH
59669: LD_INT 3
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PPUSH
59680: CALL_OW 69
59684: ST_TO_ADDR
// if not tmp then
59685: LD_VAR 0 4
59689: NOT
59690: IFFALSE 59694
// exit ;
59692: GO 59836
// enable_addtolog := true ;
59694: LD_ADDR_OWVAR 81
59698: PUSH
59699: LD_INT 1
59701: ST_TO_ADDR
// AddToLog ( [ ) ;
59702: LD_STRING [
59704: PPUSH
59705: CALL_OW 561
// for i in tmp do
59709: LD_ADDR_VAR 0 3
59713: PUSH
59714: LD_VAR 0 4
59718: PUSH
59719: FOR_IN
59720: IFFALSE 59827
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59722: LD_STRING [
59724: PUSH
59725: LD_VAR 0 3
59729: PPUSH
59730: CALL_OW 266
59734: STR
59735: PUSH
59736: LD_STRING , 
59738: STR
59739: PUSH
59740: LD_VAR 0 3
59744: PPUSH
59745: CALL_OW 250
59749: STR
59750: PUSH
59751: LD_STRING , 
59753: STR
59754: PUSH
59755: LD_VAR 0 3
59759: PPUSH
59760: CALL_OW 251
59764: STR
59765: PUSH
59766: LD_STRING , 
59768: STR
59769: PUSH
59770: LD_VAR 0 3
59774: PPUSH
59775: CALL_OW 254
59779: STR
59780: PUSH
59781: LD_STRING , 
59783: STR
59784: PUSH
59785: LD_VAR 0 3
59789: PPUSH
59790: LD_INT 1
59792: PPUSH
59793: CALL_OW 268
59797: STR
59798: PUSH
59799: LD_STRING , 
59801: STR
59802: PUSH
59803: LD_VAR 0 3
59807: PPUSH
59808: LD_INT 2
59810: PPUSH
59811: CALL_OW 268
59815: STR
59816: PUSH
59817: LD_STRING ],
59819: STR
59820: PPUSH
59821: CALL_OW 561
// end ;
59825: GO 59719
59827: POP
59828: POP
// AddToLog ( ]; ) ;
59829: LD_STRING ];
59831: PPUSH
59832: CALL_OW 561
// end ;
59836: LD_VAR 0 2
59840: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59841: LD_INT 0
59843: PPUSH
59844: PPUSH
59845: PPUSH
59846: PPUSH
59847: PPUSH
// if not area or not rate or not max then
59848: LD_VAR 0 1
59852: NOT
59853: PUSH
59854: LD_VAR 0 2
59858: NOT
59859: OR
59860: PUSH
59861: LD_VAR 0 4
59865: NOT
59866: OR
59867: IFFALSE 59871
// exit ;
59869: GO 60063
// while 1 do
59871: LD_INT 1
59873: IFFALSE 60063
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59875: LD_ADDR_VAR 0 9
59879: PUSH
59880: LD_VAR 0 1
59884: PPUSH
59885: LD_INT 1
59887: PPUSH
59888: CALL_OW 287
59892: PUSH
59893: LD_INT 10
59895: MUL
59896: ST_TO_ADDR
// r := rate / 10 ;
59897: LD_ADDR_VAR 0 7
59901: PUSH
59902: LD_VAR 0 2
59906: PUSH
59907: LD_INT 10
59909: DIVREAL
59910: ST_TO_ADDR
// time := 1 1$00 ;
59911: LD_ADDR_VAR 0 8
59915: PUSH
59916: LD_INT 2100
59918: ST_TO_ADDR
// if amount < min then
59919: LD_VAR 0 9
59923: PUSH
59924: LD_VAR 0 3
59928: LESS
59929: IFFALSE 59947
// r := r * 2 else
59931: LD_ADDR_VAR 0 7
59935: PUSH
59936: LD_VAR 0 7
59940: PUSH
59941: LD_INT 2
59943: MUL
59944: ST_TO_ADDR
59945: GO 59973
// if amount > max then
59947: LD_VAR 0 9
59951: PUSH
59952: LD_VAR 0 4
59956: GREATER
59957: IFFALSE 59973
// r := r / 2 ;
59959: LD_ADDR_VAR 0 7
59963: PUSH
59964: LD_VAR 0 7
59968: PUSH
59969: LD_INT 2
59971: DIVREAL
59972: ST_TO_ADDR
// time := time / r ;
59973: LD_ADDR_VAR 0 8
59977: PUSH
59978: LD_VAR 0 8
59982: PUSH
59983: LD_VAR 0 7
59987: DIVREAL
59988: ST_TO_ADDR
// if time < 0 then
59989: LD_VAR 0 8
59993: PUSH
59994: LD_INT 0
59996: LESS
59997: IFFALSE 60014
// time := time * - 1 ;
59999: LD_ADDR_VAR 0 8
60003: PUSH
60004: LD_VAR 0 8
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: MUL
60013: ST_TO_ADDR
// wait ( time ) ;
60014: LD_VAR 0 8
60018: PPUSH
60019: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60023: LD_INT 35
60025: PPUSH
60026: LD_INT 875
60028: PPUSH
60029: CALL_OW 12
60033: PPUSH
60034: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60038: LD_INT 1
60040: PPUSH
60041: LD_INT 5
60043: PPUSH
60044: CALL_OW 12
60048: PPUSH
60049: LD_VAR 0 1
60053: PPUSH
60054: LD_INT 1
60056: PPUSH
60057: CALL_OW 55
// end ;
60061: GO 59871
// end ;
60063: LD_VAR 0 5
60067: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60068: LD_INT 0
60070: PPUSH
60071: PPUSH
60072: PPUSH
60073: PPUSH
60074: PPUSH
60075: PPUSH
60076: PPUSH
60077: PPUSH
// if not turrets or not factories then
60078: LD_VAR 0 1
60082: NOT
60083: PUSH
60084: LD_VAR 0 2
60088: NOT
60089: OR
60090: IFFALSE 60094
// exit ;
60092: GO 60401
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60094: LD_ADDR_VAR 0 10
60098: PUSH
60099: LD_INT 5
60101: PUSH
60102: LD_INT 6
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: LD_INT 4
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 3
60121: PUSH
60122: LD_INT 5
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 24
60136: PUSH
60137: LD_INT 25
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 23
60146: PUSH
60147: LD_INT 27
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 42
60160: PUSH
60161: LD_INT 43
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 44
60170: PUSH
60171: LD_INT 46
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 45
60180: PUSH
60181: LD_INT 47
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: LIST
60197: ST_TO_ADDR
// result := [ ] ;
60198: LD_ADDR_VAR 0 3
60202: PUSH
60203: EMPTY
60204: ST_TO_ADDR
// for i in turrets do
60205: LD_ADDR_VAR 0 4
60209: PUSH
60210: LD_VAR 0 1
60214: PUSH
60215: FOR_IN
60216: IFFALSE 60399
// begin nat := GetNation ( i ) ;
60218: LD_ADDR_VAR 0 7
60222: PUSH
60223: LD_VAR 0 4
60227: PPUSH
60228: CALL_OW 248
60232: ST_TO_ADDR
// weapon := 0 ;
60233: LD_ADDR_VAR 0 8
60237: PUSH
60238: LD_INT 0
60240: ST_TO_ADDR
// if not nat then
60241: LD_VAR 0 7
60245: NOT
60246: IFFALSE 60250
// continue ;
60248: GO 60215
// for j in list [ nat ] do
60250: LD_ADDR_VAR 0 5
60254: PUSH
60255: LD_VAR 0 10
60259: PUSH
60260: LD_VAR 0 7
60264: ARRAY
60265: PUSH
60266: FOR_IN
60267: IFFALSE 60308
// if GetBWeapon ( i ) = j [ 1 ] then
60269: LD_VAR 0 4
60273: PPUSH
60274: CALL_OW 269
60278: PUSH
60279: LD_VAR 0 5
60283: PUSH
60284: LD_INT 1
60286: ARRAY
60287: EQUAL
60288: IFFALSE 60306
// begin weapon := j [ 2 ] ;
60290: LD_ADDR_VAR 0 8
60294: PUSH
60295: LD_VAR 0 5
60299: PUSH
60300: LD_INT 2
60302: ARRAY
60303: ST_TO_ADDR
// break ;
60304: GO 60308
// end ;
60306: GO 60266
60308: POP
60309: POP
// if not weapon then
60310: LD_VAR 0 8
60314: NOT
60315: IFFALSE 60319
// continue ;
60317: GO 60215
// for k in factories do
60319: LD_ADDR_VAR 0 6
60323: PUSH
60324: LD_VAR 0 2
60328: PUSH
60329: FOR_IN
60330: IFFALSE 60395
// begin weapons := AvailableWeaponList ( k ) ;
60332: LD_ADDR_VAR 0 9
60336: PUSH
60337: LD_VAR 0 6
60341: PPUSH
60342: CALL_OW 478
60346: ST_TO_ADDR
// if not weapons then
60347: LD_VAR 0 9
60351: NOT
60352: IFFALSE 60356
// continue ;
60354: GO 60329
// if weapon in weapons then
60356: LD_VAR 0 8
60360: PUSH
60361: LD_VAR 0 9
60365: IN
60366: IFFALSE 60393
// begin result := [ i , weapon ] ;
60368: LD_ADDR_VAR 0 3
60372: PUSH
60373: LD_VAR 0 4
60377: PUSH
60378: LD_VAR 0 8
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: ST_TO_ADDR
// exit ;
60387: POP
60388: POP
60389: POP
60390: POP
60391: GO 60401
// end ; end ;
60393: GO 60329
60395: POP
60396: POP
// end ;
60397: GO 60215
60399: POP
60400: POP
// end ;
60401: LD_VAR 0 3
60405: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60406: LD_INT 0
60408: PPUSH
// if not side or side > 8 then
60409: LD_VAR 0 3
60413: NOT
60414: PUSH
60415: LD_VAR 0 3
60419: PUSH
60420: LD_INT 8
60422: GREATER
60423: OR
60424: IFFALSE 60428
// exit ;
60426: GO 60487
// if not range then
60428: LD_VAR 0 4
60432: NOT
60433: IFFALSE 60444
// range := - 12 ;
60435: LD_ADDR_VAR 0 4
60439: PUSH
60440: LD_INT 12
60442: NEG
60443: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60444: LD_VAR 0 1
60448: PPUSH
60449: LD_VAR 0 2
60453: PPUSH
60454: LD_VAR 0 3
60458: PPUSH
60459: LD_VAR 0 4
60463: PPUSH
60464: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60468: LD_VAR 0 1
60472: PPUSH
60473: LD_VAR 0 2
60477: PPUSH
60478: LD_VAR 0 3
60482: PPUSH
60483: CALL_OW 331
// end ;
60487: LD_VAR 0 5
60491: RET
// export function Video ( mode ) ; begin
60492: LD_INT 0
60494: PPUSH
// ingame_video = mode ;
60495: LD_ADDR_OWVAR 52
60499: PUSH
60500: LD_VAR 0 1
60504: ST_TO_ADDR
// interface_hidden = mode ;
60505: LD_ADDR_OWVAR 54
60509: PUSH
60510: LD_VAR 0 1
60514: ST_TO_ADDR
// end ;
60515: LD_VAR 0 2
60519: RET
// export function Join ( array , element ) ; begin
60520: LD_INT 0
60522: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60523: LD_ADDR_VAR 0 3
60527: PUSH
60528: LD_VAR 0 1
60532: PPUSH
60533: LD_VAR 0 1
60537: PUSH
60538: LD_INT 1
60540: PLUS
60541: PPUSH
60542: LD_VAR 0 2
60546: PPUSH
60547: CALL_OW 1
60551: ST_TO_ADDR
// end ;
60552: LD_VAR 0 3
60556: RET
// export function JoinUnion ( array , element ) ; begin
60557: LD_INT 0
60559: PPUSH
// result := array union element ;
60560: LD_ADDR_VAR 0 3
60564: PUSH
60565: LD_VAR 0 1
60569: PUSH
60570: LD_VAR 0 2
60574: UNION
60575: ST_TO_ADDR
// end ;
60576: LD_VAR 0 3
60580: RET
// export function GetBehemoths ( side ) ; begin
60581: LD_INT 0
60583: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60584: LD_ADDR_VAR 0 2
60588: PUSH
60589: LD_INT 22
60591: PUSH
60592: LD_VAR 0 1
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 31
60603: PUSH
60604: LD_INT 25
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PPUSH
60615: CALL_OW 69
60619: ST_TO_ADDR
// end ;
60620: LD_VAR 0 2
60624: RET
// export function Shuffle ( array ) ; var i , index ; begin
60625: LD_INT 0
60627: PPUSH
60628: PPUSH
60629: PPUSH
// result := [ ] ;
60630: LD_ADDR_VAR 0 2
60634: PUSH
60635: EMPTY
60636: ST_TO_ADDR
// if not array then
60637: LD_VAR 0 1
60641: NOT
60642: IFFALSE 60646
// exit ;
60644: GO 60745
// Randomize ;
60646: CALL_OW 10
// for i = array downto 1 do
60650: LD_ADDR_VAR 0 3
60654: PUSH
60655: DOUBLE
60656: LD_VAR 0 1
60660: INC
60661: ST_TO_ADDR
60662: LD_INT 1
60664: PUSH
60665: FOR_DOWNTO
60666: IFFALSE 60743
// begin index := rand ( 1 , array ) ;
60668: LD_ADDR_VAR 0 4
60672: PUSH
60673: LD_INT 1
60675: PPUSH
60676: LD_VAR 0 1
60680: PPUSH
60681: CALL_OW 12
60685: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60686: LD_ADDR_VAR 0 2
60690: PUSH
60691: LD_VAR 0 2
60695: PPUSH
60696: LD_VAR 0 2
60700: PUSH
60701: LD_INT 1
60703: PLUS
60704: PPUSH
60705: LD_VAR 0 1
60709: PUSH
60710: LD_VAR 0 4
60714: ARRAY
60715: PPUSH
60716: CALL_OW 2
60720: ST_TO_ADDR
// array := Delete ( array , index ) ;
60721: LD_ADDR_VAR 0 1
60725: PUSH
60726: LD_VAR 0 1
60730: PPUSH
60731: LD_VAR 0 4
60735: PPUSH
60736: CALL_OW 3
60740: ST_TO_ADDR
// end ;
60741: GO 60665
60743: POP
60744: POP
// end ;
60745: LD_VAR 0 2
60749: RET
// export function GetBaseMaterials ( base ) ; begin
60750: LD_INT 0
60752: PPUSH
// result := [ 0 , 0 , 0 ] ;
60753: LD_ADDR_VAR 0 2
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: ST_TO_ADDR
// if not base then
60772: LD_VAR 0 1
60776: NOT
60777: IFFALSE 60781
// exit ;
60779: GO 60830
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60781: LD_ADDR_VAR 0 2
60785: PUSH
60786: LD_VAR 0 1
60790: PPUSH
60791: LD_INT 1
60793: PPUSH
60794: CALL_OW 275
60798: PUSH
60799: LD_VAR 0 1
60803: PPUSH
60804: LD_INT 2
60806: PPUSH
60807: CALL_OW 275
60811: PUSH
60812: LD_VAR 0 1
60816: PPUSH
60817: LD_INT 3
60819: PPUSH
60820: CALL_OW 275
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: LIST
60829: ST_TO_ADDR
// end ;
60830: LD_VAR 0 2
60834: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60835: LD_INT 0
60837: PPUSH
60838: PPUSH
// result := array ;
60839: LD_ADDR_VAR 0 3
60843: PUSH
60844: LD_VAR 0 1
60848: ST_TO_ADDR
// if size > 0 then
60849: LD_VAR 0 2
60853: PUSH
60854: LD_INT 0
60856: GREATER
60857: IFFALSE 60903
// for i := array downto size do
60859: LD_ADDR_VAR 0 4
60863: PUSH
60864: DOUBLE
60865: LD_VAR 0 1
60869: INC
60870: ST_TO_ADDR
60871: LD_VAR 0 2
60875: PUSH
60876: FOR_DOWNTO
60877: IFFALSE 60901
// result := Delete ( result , result ) ;
60879: LD_ADDR_VAR 0 3
60883: PUSH
60884: LD_VAR 0 3
60888: PPUSH
60889: LD_VAR 0 3
60893: PPUSH
60894: CALL_OW 3
60898: ST_TO_ADDR
60899: GO 60876
60901: POP
60902: POP
// end ;
60903: LD_VAR 0 3
60907: RET
// export function ComExit ( unit ) ; var tmp ; begin
60908: LD_INT 0
60910: PPUSH
60911: PPUSH
// if not IsInUnit ( unit ) then
60912: LD_VAR 0 1
60916: PPUSH
60917: CALL_OW 310
60921: NOT
60922: IFFALSE 60926
// exit ;
60924: GO 60986
// tmp := IsInUnit ( unit ) ;
60926: LD_ADDR_VAR 0 3
60930: PUSH
60931: LD_VAR 0 1
60935: PPUSH
60936: CALL_OW 310
60940: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60941: LD_VAR 0 3
60945: PPUSH
60946: CALL_OW 247
60950: PUSH
60951: LD_INT 2
60953: EQUAL
60954: IFFALSE 60967
// ComExitVehicle ( unit ) else
60956: LD_VAR 0 1
60960: PPUSH
60961: CALL_OW 121
60965: GO 60976
// ComExitBuilding ( unit ) ;
60967: LD_VAR 0 1
60971: PPUSH
60972: CALL_OW 122
// result := tmp ;
60976: LD_ADDR_VAR 0 2
60980: PUSH
60981: LD_VAR 0 3
60985: ST_TO_ADDR
// end ;
60986: LD_VAR 0 2
60990: RET
// export function ComExitAll ( units ) ; var i ; begin
60991: LD_INT 0
60993: PPUSH
60994: PPUSH
// if not units then
60995: LD_VAR 0 1
60999: NOT
61000: IFFALSE 61004
// exit ;
61002: GO 61030
// for i in units do
61004: LD_ADDR_VAR 0 3
61008: PUSH
61009: LD_VAR 0 1
61013: PUSH
61014: FOR_IN
61015: IFFALSE 61028
// ComExit ( i ) ;
61017: LD_VAR 0 3
61021: PPUSH
61022: CALL 60908 0 1
61026: GO 61014
61028: POP
61029: POP
// end ;
61030: LD_VAR 0 2
61034: RET
// export function ResetHc ; begin
61035: LD_INT 0
61037: PPUSH
// InitHc ;
61038: CALL_OW 19
// hc_importance := 0 ;
61042: LD_ADDR_OWVAR 32
61046: PUSH
61047: LD_INT 0
61049: ST_TO_ADDR
// end ;
61050: LD_VAR 0 1
61054: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61055: LD_INT 0
61057: PPUSH
61058: PPUSH
61059: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61060: LD_ADDR_VAR 0 6
61064: PUSH
61065: LD_VAR 0 1
61069: PUSH
61070: LD_VAR 0 3
61074: PLUS
61075: PUSH
61076: LD_INT 2
61078: DIV
61079: ST_TO_ADDR
// if _x < 0 then
61080: LD_VAR 0 6
61084: PUSH
61085: LD_INT 0
61087: LESS
61088: IFFALSE 61105
// _x := _x * - 1 ;
61090: LD_ADDR_VAR 0 6
61094: PUSH
61095: LD_VAR 0 6
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: MUL
61104: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61105: LD_ADDR_VAR 0 7
61109: PUSH
61110: LD_VAR 0 2
61114: PUSH
61115: LD_VAR 0 4
61119: PLUS
61120: PUSH
61121: LD_INT 2
61123: DIV
61124: ST_TO_ADDR
// if _y < 0 then
61125: LD_VAR 0 7
61129: PUSH
61130: LD_INT 0
61132: LESS
61133: IFFALSE 61150
// _y := _y * - 1 ;
61135: LD_ADDR_VAR 0 7
61139: PUSH
61140: LD_VAR 0 7
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: MUL
61149: ST_TO_ADDR
// result := [ _x , _y ] ;
61150: LD_ADDR_VAR 0 5
61154: PUSH
61155: LD_VAR 0 6
61159: PUSH
61160: LD_VAR 0 7
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: ST_TO_ADDR
// end ;
61169: LD_VAR 0 5
61173: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61174: LD_INT 0
61176: PPUSH
61177: PPUSH
61178: PPUSH
61179: PPUSH
// task := GetTaskList ( unit ) ;
61180: LD_ADDR_VAR 0 7
61184: PUSH
61185: LD_VAR 0 1
61189: PPUSH
61190: CALL_OW 437
61194: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61195: LD_VAR 0 7
61199: NOT
61200: PUSH
61201: LD_VAR 0 1
61205: PPUSH
61206: LD_VAR 0 2
61210: PPUSH
61211: CALL_OW 308
61215: NOT
61216: AND
61217: IFFALSE 61221
// exit ;
61219: GO 61339
// if IsInArea ( unit , area ) then
61221: LD_VAR 0 1
61225: PPUSH
61226: LD_VAR 0 2
61230: PPUSH
61231: CALL_OW 308
61235: IFFALSE 61253
// begin ComMoveToArea ( unit , goAway ) ;
61237: LD_VAR 0 1
61241: PPUSH
61242: LD_VAR 0 3
61246: PPUSH
61247: CALL_OW 113
// exit ;
61251: GO 61339
// end ; if task [ 1 ] [ 1 ] <> M then
61253: LD_VAR 0 7
61257: PUSH
61258: LD_INT 1
61260: ARRAY
61261: PUSH
61262: LD_INT 1
61264: ARRAY
61265: PUSH
61266: LD_STRING M
61268: NONEQUAL
61269: IFFALSE 61273
// exit ;
61271: GO 61339
// x := task [ 1 ] [ 2 ] ;
61273: LD_ADDR_VAR 0 5
61277: PUSH
61278: LD_VAR 0 7
61282: PUSH
61283: LD_INT 1
61285: ARRAY
61286: PUSH
61287: LD_INT 2
61289: ARRAY
61290: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61291: LD_ADDR_VAR 0 6
61295: PUSH
61296: LD_VAR 0 7
61300: PUSH
61301: LD_INT 1
61303: ARRAY
61304: PUSH
61305: LD_INT 3
61307: ARRAY
61308: ST_TO_ADDR
// if InArea ( x , y , area ) then
61309: LD_VAR 0 5
61313: PPUSH
61314: LD_VAR 0 6
61318: PPUSH
61319: LD_VAR 0 2
61323: PPUSH
61324: CALL_OW 309
61328: IFFALSE 61339
// ComStop ( unit ) ;
61330: LD_VAR 0 1
61334: PPUSH
61335: CALL_OW 141
// end ;
61339: LD_VAR 0 4
61343: RET
// export function Abs ( value ) ; begin
61344: LD_INT 0
61346: PPUSH
// result := value ;
61347: LD_ADDR_VAR 0 2
61351: PUSH
61352: LD_VAR 0 1
61356: ST_TO_ADDR
// if value < 0 then
61357: LD_VAR 0 1
61361: PUSH
61362: LD_INT 0
61364: LESS
61365: IFFALSE 61382
// result := value * - 1 ;
61367: LD_ADDR_VAR 0 2
61371: PUSH
61372: LD_VAR 0 1
61376: PUSH
61377: LD_INT 1
61379: NEG
61380: MUL
61381: ST_TO_ADDR
// end ;
61382: LD_VAR 0 2
61386: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61387: LD_INT 0
61389: PPUSH
61390: PPUSH
61391: PPUSH
61392: PPUSH
61393: PPUSH
61394: PPUSH
61395: PPUSH
61396: PPUSH
// if not unit or not building then
61397: LD_VAR 0 1
61401: NOT
61402: PUSH
61403: LD_VAR 0 2
61407: NOT
61408: OR
61409: IFFALSE 61413
// exit ;
61411: GO 61639
// x := GetX ( building ) ;
61413: LD_ADDR_VAR 0 4
61417: PUSH
61418: LD_VAR 0 2
61422: PPUSH
61423: CALL_OW 250
61427: ST_TO_ADDR
// y := GetY ( building ) ;
61428: LD_ADDR_VAR 0 6
61432: PUSH
61433: LD_VAR 0 2
61437: PPUSH
61438: CALL_OW 251
61442: ST_TO_ADDR
// d := GetDir ( building ) ;
61443: LD_ADDR_VAR 0 8
61447: PUSH
61448: LD_VAR 0 2
61452: PPUSH
61453: CALL_OW 254
61457: ST_TO_ADDR
// r := 4 ;
61458: LD_ADDR_VAR 0 9
61462: PUSH
61463: LD_INT 4
61465: ST_TO_ADDR
// for i := 1 to 5 do
61466: LD_ADDR_VAR 0 10
61470: PUSH
61471: DOUBLE
61472: LD_INT 1
61474: DEC
61475: ST_TO_ADDR
61476: LD_INT 5
61478: PUSH
61479: FOR_TO
61480: IFFALSE 61637
// begin _x := ShiftX ( x , d , r + i ) ;
61482: LD_ADDR_VAR 0 5
61486: PUSH
61487: LD_VAR 0 4
61491: PPUSH
61492: LD_VAR 0 8
61496: PPUSH
61497: LD_VAR 0 9
61501: PUSH
61502: LD_VAR 0 10
61506: PLUS
61507: PPUSH
61508: CALL_OW 272
61512: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61513: LD_ADDR_VAR 0 7
61517: PUSH
61518: LD_VAR 0 6
61522: PPUSH
61523: LD_VAR 0 8
61527: PPUSH
61528: LD_VAR 0 9
61532: PUSH
61533: LD_VAR 0 10
61537: PLUS
61538: PPUSH
61539: CALL_OW 273
61543: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61544: LD_VAR 0 5
61548: PPUSH
61549: LD_VAR 0 7
61553: PPUSH
61554: CALL_OW 488
61558: PUSH
61559: LD_VAR 0 5
61563: PPUSH
61564: LD_VAR 0 7
61568: PPUSH
61569: CALL_OW 428
61573: PPUSH
61574: CALL_OW 247
61578: PUSH
61579: LD_INT 3
61581: PUSH
61582: LD_INT 2
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: IN
61589: NOT
61590: AND
61591: IFFALSE 61635
// begin ComMoveXY ( unit , _x , _y ) ;
61593: LD_VAR 0 1
61597: PPUSH
61598: LD_VAR 0 5
61602: PPUSH
61603: LD_VAR 0 7
61607: PPUSH
61608: CALL_OW 111
// result := [ _x , _y ] ;
61612: LD_ADDR_VAR 0 3
61616: PUSH
61617: LD_VAR 0 5
61621: PUSH
61622: LD_VAR 0 7
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: ST_TO_ADDR
// exit ;
61631: POP
61632: POP
61633: GO 61639
// end ; end ;
61635: GO 61479
61637: POP
61638: POP
// end ;
61639: LD_VAR 0 3
61643: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61644: LD_INT 0
61646: PPUSH
61647: PPUSH
61648: PPUSH
// result := 0 ;
61649: LD_ADDR_VAR 0 3
61653: PUSH
61654: LD_INT 0
61656: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61657: LD_VAR 0 1
61661: PUSH
61662: LD_INT 0
61664: LESS
61665: PUSH
61666: LD_VAR 0 1
61670: PUSH
61671: LD_INT 8
61673: GREATER
61674: OR
61675: PUSH
61676: LD_VAR 0 2
61680: PUSH
61681: LD_INT 0
61683: LESS
61684: OR
61685: PUSH
61686: LD_VAR 0 2
61690: PUSH
61691: LD_INT 8
61693: GREATER
61694: OR
61695: IFFALSE 61699
// exit ;
61697: GO 61774
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61699: LD_ADDR_VAR 0 4
61703: PUSH
61704: LD_INT 22
61706: PUSH
61707: LD_VAR 0 2
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PPUSH
61716: CALL_OW 69
61720: PUSH
61721: FOR_IN
61722: IFFALSE 61772
// begin un := UnitShoot ( i ) ;
61724: LD_ADDR_VAR 0 5
61728: PUSH
61729: LD_VAR 0 4
61733: PPUSH
61734: CALL_OW 504
61738: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61739: LD_VAR 0 5
61743: PPUSH
61744: CALL_OW 255
61748: PUSH
61749: LD_VAR 0 1
61753: EQUAL
61754: IFFALSE 61770
// begin result := un ;
61756: LD_ADDR_VAR 0 3
61760: PUSH
61761: LD_VAR 0 5
61765: ST_TO_ADDR
// exit ;
61766: POP
61767: POP
61768: GO 61774
// end ; end ;
61770: GO 61721
61772: POP
61773: POP
// end ;
61774: LD_VAR 0 3
61778: RET
// export function GetCargoBay ( units ) ; begin
61779: LD_INT 0
61781: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61782: LD_ADDR_VAR 0 2
61786: PUSH
61787: LD_VAR 0 1
61791: PPUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 34
61797: PUSH
61798: LD_INT 12
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 34
61807: PUSH
61808: LD_INT 51
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 34
61817: PUSH
61818: LD_INT 32
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 34
61827: PUSH
61828: LD_EXP 95
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: PPUSH
61844: CALL_OW 72
61848: ST_TO_ADDR
// end ;
61849: LD_VAR 0 2
61853: RET
// export function Negate ( value ) ; begin
61854: LD_INT 0
61856: PPUSH
// result := not value ;
61857: LD_ADDR_VAR 0 2
61861: PUSH
61862: LD_VAR 0 1
61866: NOT
61867: ST_TO_ADDR
// end ;
61868: LD_VAR 0 2
61872: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
61873: LD_INT 0
61875: PPUSH
// if x1 = x2 then
61876: LD_VAR 0 1
61880: PUSH
61881: LD_VAR 0 3
61885: EQUAL
61886: IFFALSE 61920
// begin if y1 > y2 then
61888: LD_VAR 0 2
61892: PUSH
61893: LD_VAR 0 4
61897: GREATER
61898: IFFALSE 61910
// result := 0 else
61900: LD_ADDR_VAR 0 5
61904: PUSH
61905: LD_INT 0
61907: ST_TO_ADDR
61908: GO 61918
// result := 3 ;
61910: LD_ADDR_VAR 0 5
61914: PUSH
61915: LD_INT 3
61917: ST_TO_ADDR
// exit ;
61918: GO 62006
// end ; if y1 = y2 then
61920: LD_VAR 0 2
61924: PUSH
61925: LD_VAR 0 4
61929: EQUAL
61930: IFFALSE 61964
// begin if x1 > x2 then
61932: LD_VAR 0 1
61936: PUSH
61937: LD_VAR 0 3
61941: GREATER
61942: IFFALSE 61954
// result := 1 else
61944: LD_ADDR_VAR 0 5
61948: PUSH
61949: LD_INT 1
61951: ST_TO_ADDR
61952: GO 61962
// result := 4 ;
61954: LD_ADDR_VAR 0 5
61958: PUSH
61959: LD_INT 4
61961: ST_TO_ADDR
// exit ;
61962: GO 62006
// end ; if x1 > x2 and y1 > y2 then
61964: LD_VAR 0 1
61968: PUSH
61969: LD_VAR 0 3
61973: GREATER
61974: PUSH
61975: LD_VAR 0 2
61979: PUSH
61980: LD_VAR 0 4
61984: GREATER
61985: AND
61986: IFFALSE 61998
// result := 2 else
61988: LD_ADDR_VAR 0 5
61992: PUSH
61993: LD_INT 2
61995: ST_TO_ADDR
61996: GO 62006
// result := 5 ;
61998: LD_ADDR_VAR 0 5
62002: PUSH
62003: LD_INT 5
62005: ST_TO_ADDR
// end ;
62006: LD_VAR 0 5
62010: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62011: LD_INT 0
62013: PPUSH
62014: PPUSH
// if not driver or not IsInUnit ( driver ) then
62015: LD_VAR 0 1
62019: NOT
62020: PUSH
62021: LD_VAR 0 1
62025: PPUSH
62026: CALL_OW 310
62030: NOT
62031: OR
62032: IFFALSE 62036
// exit ;
62034: GO 62126
// vehicle := IsInUnit ( driver ) ;
62036: LD_ADDR_VAR 0 3
62040: PUSH
62041: LD_VAR 0 1
62045: PPUSH
62046: CALL_OW 310
62050: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62051: LD_VAR 0 1
62055: PPUSH
62056: LD_STRING \
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: PUSH
62086: LD_STRING E
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: LD_VAR 0 3
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PPUSH
62122: CALL_OW 446
// end ;
62126: LD_VAR 0 2
62130: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62131: LD_INT 0
62133: PPUSH
62134: PPUSH
// if not driver or not IsInUnit ( driver ) then
62135: LD_VAR 0 1
62139: NOT
62140: PUSH
62141: LD_VAR 0 1
62145: PPUSH
62146: CALL_OW 310
62150: NOT
62151: OR
62152: IFFALSE 62156
// exit ;
62154: GO 62246
// vehicle := IsInUnit ( driver ) ;
62156: LD_ADDR_VAR 0 3
62160: PUSH
62161: LD_VAR 0 1
62165: PPUSH
62166: CALL_OW 310
62170: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62171: LD_VAR 0 1
62175: PPUSH
62176: LD_STRING \
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: PUSH
62206: LD_STRING E
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_VAR 0 3
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PPUSH
62242: CALL_OW 447
// end ;
62246: LD_VAR 0 2
62250: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62251: LD_INT 0
62253: PPUSH
62254: PPUSH
62255: PPUSH
// tmp := [ ] ;
62256: LD_ADDR_VAR 0 5
62260: PUSH
62261: EMPTY
62262: ST_TO_ADDR
// for i in units do
62263: LD_ADDR_VAR 0 4
62267: PUSH
62268: LD_VAR 0 1
62272: PUSH
62273: FOR_IN
62274: IFFALSE 62312
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62276: LD_ADDR_VAR 0 5
62280: PUSH
62281: LD_VAR 0 5
62285: PPUSH
62286: LD_VAR 0 5
62290: PUSH
62291: LD_INT 1
62293: PLUS
62294: PPUSH
62295: LD_VAR 0 4
62299: PPUSH
62300: CALL_OW 256
62304: PPUSH
62305: CALL_OW 2
62309: ST_TO_ADDR
62310: GO 62273
62312: POP
62313: POP
// if not tmp then
62314: LD_VAR 0 5
62318: NOT
62319: IFFALSE 62323
// exit ;
62321: GO 62371
// if asc then
62323: LD_VAR 0 2
62327: IFFALSE 62351
// result := SortListByListAsc ( units , tmp ) else
62329: LD_ADDR_VAR 0 3
62333: PUSH
62334: LD_VAR 0 1
62338: PPUSH
62339: LD_VAR 0 5
62343: PPUSH
62344: CALL_OW 76
62348: ST_TO_ADDR
62349: GO 62371
// result := SortListByListDesc ( units , tmp ) ;
62351: LD_ADDR_VAR 0 3
62355: PUSH
62356: LD_VAR 0 1
62360: PPUSH
62361: LD_VAR 0 5
62365: PPUSH
62366: CALL_OW 77
62370: ST_TO_ADDR
// end ;
62371: LD_VAR 0 3
62375: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62376: LD_INT 0
62378: PPUSH
62379: PPUSH
// task := GetTaskList ( mech ) ;
62380: LD_ADDR_VAR 0 4
62384: PUSH
62385: LD_VAR 0 1
62389: PPUSH
62390: CALL_OW 437
62394: ST_TO_ADDR
// if not task then
62395: LD_VAR 0 4
62399: NOT
62400: IFFALSE 62404
// exit ;
62402: GO 62446
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62404: LD_ADDR_VAR 0 3
62408: PUSH
62409: LD_VAR 0 4
62413: PUSH
62414: LD_INT 1
62416: ARRAY
62417: PUSH
62418: LD_INT 1
62420: ARRAY
62421: PUSH
62422: LD_STRING r
62424: EQUAL
62425: PUSH
62426: LD_VAR 0 4
62430: PUSH
62431: LD_INT 1
62433: ARRAY
62434: PUSH
62435: LD_INT 4
62437: ARRAY
62438: PUSH
62439: LD_VAR 0 2
62443: EQUAL
62444: AND
62445: ST_TO_ADDR
// end ;
62446: LD_VAR 0 3
62450: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62451: LD_INT 0
62453: PPUSH
// SetDir ( unit , d ) ;
62454: LD_VAR 0 1
62458: PPUSH
62459: LD_VAR 0 4
62463: PPUSH
62464: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62468: LD_VAR 0 1
62472: PPUSH
62473: LD_VAR 0 2
62477: PPUSH
62478: LD_VAR 0 3
62482: PPUSH
62483: LD_VAR 0 5
62487: PPUSH
62488: CALL_OW 48
// end ;
62492: LD_VAR 0 6
62496: RET
// export function ToNaturalNumber ( number ) ; begin
62497: LD_INT 0
62499: PPUSH
// result := number div 1 ;
62500: LD_ADDR_VAR 0 2
62504: PUSH
62505: LD_VAR 0 1
62509: PUSH
62510: LD_INT 1
62512: DIV
62513: ST_TO_ADDR
// if number < 0 then
62514: LD_VAR 0 1
62518: PUSH
62519: LD_INT 0
62521: LESS
62522: IFFALSE 62532
// result := 0 ;
62524: LD_ADDR_VAR 0 2
62528: PUSH
62529: LD_INT 0
62531: ST_TO_ADDR
// end ;
62532: LD_VAR 0 2
62536: RET
// export function SortByClass ( units , class ) ; var un ; begin
62537: LD_INT 0
62539: PPUSH
62540: PPUSH
// if not units or not class then
62541: LD_VAR 0 1
62545: NOT
62546: PUSH
62547: LD_VAR 0 2
62551: NOT
62552: OR
62553: IFFALSE 62557
// exit ;
62555: GO 62652
// result := [ ] ;
62557: LD_ADDR_VAR 0 3
62561: PUSH
62562: EMPTY
62563: ST_TO_ADDR
// for un in units do
62564: LD_ADDR_VAR 0 4
62568: PUSH
62569: LD_VAR 0 1
62573: PUSH
62574: FOR_IN
62575: IFFALSE 62650
// if GetClass ( un ) = class then
62577: LD_VAR 0 4
62581: PPUSH
62582: CALL_OW 257
62586: PUSH
62587: LD_VAR 0 2
62591: EQUAL
62592: IFFALSE 62619
// result := Insert ( result , 1 , un ) else
62594: LD_ADDR_VAR 0 3
62598: PUSH
62599: LD_VAR 0 3
62603: PPUSH
62604: LD_INT 1
62606: PPUSH
62607: LD_VAR 0 4
62611: PPUSH
62612: CALL_OW 2
62616: ST_TO_ADDR
62617: GO 62648
// result := Replace ( result , result + 1 , un ) ;
62619: LD_ADDR_VAR 0 3
62623: PUSH
62624: LD_VAR 0 3
62628: PPUSH
62629: LD_VAR 0 3
62633: PUSH
62634: LD_INT 1
62636: PLUS
62637: PPUSH
62638: LD_VAR 0 4
62642: PPUSH
62643: CALL_OW 1
62647: ST_TO_ADDR
62648: GO 62574
62650: POP
62651: POP
// end ;
62652: LD_VAR 0 3
62656: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62657: LD_INT 0
62659: PPUSH
62660: PPUSH
62661: PPUSH
62662: PPUSH
62663: PPUSH
62664: PPUSH
62665: PPUSH
// result := [ ] ;
62666: LD_ADDR_VAR 0 4
62670: PUSH
62671: EMPTY
62672: ST_TO_ADDR
// if x - r < 0 then
62673: LD_VAR 0 1
62677: PUSH
62678: LD_VAR 0 3
62682: MINUS
62683: PUSH
62684: LD_INT 0
62686: LESS
62687: IFFALSE 62699
// min_x := 0 else
62689: LD_ADDR_VAR 0 8
62693: PUSH
62694: LD_INT 0
62696: ST_TO_ADDR
62697: GO 62715
// min_x := x - r ;
62699: LD_ADDR_VAR 0 8
62703: PUSH
62704: LD_VAR 0 1
62708: PUSH
62709: LD_VAR 0 3
62713: MINUS
62714: ST_TO_ADDR
// if y - r < 0 then
62715: LD_VAR 0 2
62719: PUSH
62720: LD_VAR 0 3
62724: MINUS
62725: PUSH
62726: LD_INT 0
62728: LESS
62729: IFFALSE 62741
// min_y := 0 else
62731: LD_ADDR_VAR 0 7
62735: PUSH
62736: LD_INT 0
62738: ST_TO_ADDR
62739: GO 62757
// min_y := y - r ;
62741: LD_ADDR_VAR 0 7
62745: PUSH
62746: LD_VAR 0 2
62750: PUSH
62751: LD_VAR 0 3
62755: MINUS
62756: ST_TO_ADDR
// max_x := x + r ;
62757: LD_ADDR_VAR 0 9
62761: PUSH
62762: LD_VAR 0 1
62766: PUSH
62767: LD_VAR 0 3
62771: PLUS
62772: ST_TO_ADDR
// max_y := y + r ;
62773: LD_ADDR_VAR 0 10
62777: PUSH
62778: LD_VAR 0 2
62782: PUSH
62783: LD_VAR 0 3
62787: PLUS
62788: ST_TO_ADDR
// for _x = min_x to max_x do
62789: LD_ADDR_VAR 0 5
62793: PUSH
62794: DOUBLE
62795: LD_VAR 0 8
62799: DEC
62800: ST_TO_ADDR
62801: LD_VAR 0 9
62805: PUSH
62806: FOR_TO
62807: IFFALSE 62908
// for _y = min_y to max_y do
62809: LD_ADDR_VAR 0 6
62813: PUSH
62814: DOUBLE
62815: LD_VAR 0 7
62819: DEC
62820: ST_TO_ADDR
62821: LD_VAR 0 10
62825: PUSH
62826: FOR_TO
62827: IFFALSE 62904
// begin if not ValidHex ( _x , _y ) then
62829: LD_VAR 0 5
62833: PPUSH
62834: LD_VAR 0 6
62838: PPUSH
62839: CALL_OW 488
62843: NOT
62844: IFFALSE 62848
// continue ;
62846: GO 62826
// if GetResourceTypeXY ( _x , _y ) then
62848: LD_VAR 0 5
62852: PPUSH
62853: LD_VAR 0 6
62857: PPUSH
62858: CALL_OW 283
62862: IFFALSE 62902
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62864: LD_ADDR_VAR 0 4
62868: PUSH
62869: LD_VAR 0 4
62873: PPUSH
62874: LD_VAR 0 4
62878: PUSH
62879: LD_INT 1
62881: PLUS
62882: PPUSH
62883: LD_VAR 0 5
62887: PUSH
62888: LD_VAR 0 6
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PPUSH
62897: CALL_OW 1
62901: ST_TO_ADDR
// end ;
62902: GO 62826
62904: POP
62905: POP
62906: GO 62806
62908: POP
62909: POP
// end ;
62910: LD_VAR 0 4
62914: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
62915: LD_INT 0
62917: PPUSH
62918: PPUSH
62919: PPUSH
62920: PPUSH
62921: PPUSH
62922: PPUSH
// if not units then
62923: LD_VAR 0 1
62927: NOT
62928: IFFALSE 62932
// exit ;
62930: GO 63333
// result := UnitFilter ( units , [ f_ok ] ) ;
62932: LD_ADDR_VAR 0 3
62936: PUSH
62937: LD_VAR 0 1
62941: PPUSH
62942: LD_INT 50
62944: PUSH
62945: EMPTY
62946: LIST
62947: PPUSH
62948: CALL_OW 72
62952: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62953: LD_ADDR_VAR 0 7
62957: PUSH
62958: LD_VAR 0 1
62962: PUSH
62963: LD_INT 1
62965: ARRAY
62966: PPUSH
62967: CALL_OW 255
62971: ST_TO_ADDR
// if not result then
62972: LD_VAR 0 3
62976: NOT
62977: IFFALSE 62981
// exit ;
62979: GO 63333
// for i in result do
62981: LD_ADDR_VAR 0 4
62985: PUSH
62986: LD_VAR 0 3
62990: PUSH
62991: FOR_IN
62992: IFFALSE 63331
// begin tag := GetTag ( i ) + 1 ;
62994: LD_ADDR_VAR 0 8
62998: PUSH
62999: LD_VAR 0 4
63003: PPUSH
63004: CALL_OW 110
63008: PUSH
63009: LD_INT 1
63011: PLUS
63012: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63013: LD_ADDR_VAR 0 6
63017: PUSH
63018: LD_VAR 0 4
63022: PPUSH
63023: CALL_OW 250
63027: PPUSH
63028: LD_VAR 0 4
63032: PPUSH
63033: CALL_OW 251
63037: PPUSH
63038: LD_INT 6
63040: PPUSH
63041: CALL 62657 0 3
63045: ST_TO_ADDR
// if cr then
63046: LD_VAR 0 6
63050: IFFALSE 63089
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63052: LD_VAR 0 4
63056: PPUSH
63057: LD_VAR 0 6
63061: PUSH
63062: LD_INT 1
63064: ARRAY
63065: PUSH
63066: LD_INT 1
63068: ARRAY
63069: PPUSH
63070: LD_VAR 0 6
63074: PUSH
63075: LD_INT 1
63077: ARRAY
63078: PUSH
63079: LD_INT 2
63081: ARRAY
63082: PPUSH
63083: CALL_OW 116
63087: GO 63329
// if path > tag then
63089: LD_VAR 0 2
63093: PUSH
63094: LD_VAR 0 8
63098: GREATER
63099: IFFALSE 63277
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
63101: LD_ADDR_VAR 0 5
63105: PUSH
63106: LD_INT 81
63108: PUSH
63109: LD_VAR 0 7
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 91
63120: PUSH
63121: LD_VAR 0 4
63125: PUSH
63126: LD_INT 12
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: LIST
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PPUSH
63138: CALL_OW 69
63142: ST_TO_ADDR
// if enemy then
63143: LD_VAR 0 5
63147: IFFALSE 63175
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63149: LD_VAR 0 4
63153: PPUSH
63154: LD_VAR 0 5
63158: PPUSH
63159: LD_VAR 0 4
63163: PPUSH
63164: CALL_OW 74
63168: PPUSH
63169: CALL_OW 115
63173: GO 63275
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63175: LD_VAR 0 4
63179: PPUSH
63180: LD_VAR 0 2
63184: PUSH
63185: LD_VAR 0 8
63189: ARRAY
63190: PUSH
63191: LD_INT 1
63193: ARRAY
63194: PPUSH
63195: LD_VAR 0 2
63199: PUSH
63200: LD_VAR 0 8
63204: ARRAY
63205: PUSH
63206: LD_INT 2
63208: ARRAY
63209: PPUSH
63210: CALL_OW 297
63214: PUSH
63215: LD_INT 6
63217: GREATER
63218: IFFALSE 63261
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63220: LD_VAR 0 4
63224: PPUSH
63225: LD_VAR 0 2
63229: PUSH
63230: LD_VAR 0 8
63234: ARRAY
63235: PUSH
63236: LD_INT 1
63238: ARRAY
63239: PPUSH
63240: LD_VAR 0 2
63244: PUSH
63245: LD_VAR 0 8
63249: ARRAY
63250: PUSH
63251: LD_INT 2
63253: ARRAY
63254: PPUSH
63255: CALL_OW 114
63259: GO 63275
// SetTag ( i , tag ) ;
63261: LD_VAR 0 4
63265: PPUSH
63266: LD_VAR 0 8
63270: PPUSH
63271: CALL_OW 109
// end else
63275: GO 63329
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63277: LD_ADDR_VAR 0 5
63281: PUSH
63282: LD_INT 81
63284: PUSH
63285: LD_VAR 0 7
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PPUSH
63294: CALL_OW 69
63298: ST_TO_ADDR
// if enemy then
63299: LD_VAR 0 5
63303: IFFALSE 63329
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63305: LD_VAR 0 4
63309: PPUSH
63310: LD_VAR 0 5
63314: PPUSH
63315: LD_VAR 0 4
63319: PPUSH
63320: CALL_OW 74
63324: PPUSH
63325: CALL_OW 115
// end ; end ;
63329: GO 62991
63331: POP
63332: POP
// end ; end_of_file
63333: LD_VAR 0 3
63337: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63338: LD_VAR 0 1
63342: PPUSH
63343: LD_VAR 0 2
63347: PPUSH
63348: LD_VAR 0 3
63352: PPUSH
63353: LD_VAR 0 4
63357: PPUSH
63358: LD_VAR 0 5
63362: PPUSH
63363: LD_VAR 0 6
63367: PPUSH
63368: CALL 5825 0 6
// end ;
63372: PPOPN 6
63374: END
