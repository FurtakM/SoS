// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 166 0 0
// PrepareDeltaBase ;
  86: CALL 2408 0 0
// LoadVehicles ;
  90: CALL 1448 0 0
// PrepareHeroes ;
  94: CALL 287 0 0
// PrepareRandoms ;
  98: CALL 1749 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// end ;
 165: END
// export function CreateNature ; var i ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
// uc_side := 0 ;
 170: LD_ADDR_OWVAR 20
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// uc_nation := 0 ;
 178: LD_ADDR_OWVAR 21
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// for i = 1 to 4 do
 186: LD_ADDR_VAR 0 2
 190: PUSH
 191: DOUBLE
 192: LD_INT 1
 194: DEC
 195: ST_TO_ADDR
 196: LD_INT 4
 198: PUSH
 199: FOR_TO
 200: IFFALSE 280
// begin hc_gallery :=  ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING 
 209: ST_TO_ADDR
// hc_name :=  ;
 210: LD_ADDR_OWVAR 26
 214: PUSH
 215: LD_STRING 
 217: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 218: LD_ADDR_OWVAR 29
 222: PUSH
 223: LD_INT 10
 225: PPUSH
 226: LD_INT 11
 228: PPUSH
 229: CALL_OW 12
 233: PUSH
 234: LD_INT 10
 236: PPUSH
 237: LD_INT 12
 239: PPUSH
 240: CALL_OW 12
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// hc_class := class_apeman ;
 249: LD_ADDR_OWVAR 28
 253: PUSH
 254: LD_INT 12
 256: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 257: CALL_OW 44
 261: PPUSH
 262: LD_INT 22
 264: PPUSH
 265: LD_INT 18
 267: PPUSH
 268: LD_INT 20
 270: PPUSH
 271: LD_INT 0
 273: PPUSH
 274: CALL_OW 50
// end ;
 278: GO 199
 280: POP
 281: POP
// end ; end_of_file
 282: LD_VAR 0 1
 286: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
 291: PPUSH
 292: PPUSH
 293: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 294: LD_ADDR_VAR 0 3
 298: PUSH
 299: LD_INT 22
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 21
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: ARRAY
 347: PPUSH
 348: LD_STRING delta
 350: PPUSH
 351: CALL_OW 500
// uc_side = 1 ;
 355: LD_ADDR_OWVAR 20
 359: PUSH
 360: LD_INT 1
 362: ST_TO_ADDR
// uc_nation = 1 ;
 363: LD_ADDR_OWVAR 21
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_STRING JMM
 378: PPUSH
 379: LD_INT 1
 381: PPUSH
 382: LD_EXP 23
 386: PPUSH
 387: CALL 24956 0 3
 391: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 392: LD_ADDR_EXP 16
 396: PUSH
 397: LD_STRING Harisson
 399: PPUSH
 400: LD_INT 0
 402: PPUSH
 403: LD_STRING 
 405: PPUSH
 406: CALL 24956 0 3
 410: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 411: LD_EXP 1
 415: PPUSH
 416: LD_VAR 0 3
 420: PUSH
 421: LD_INT 1
 423: ARRAY
 424: PPUSH
 425: CALL_OW 250
 429: PPUSH
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 1
 437: ARRAY
 438: PPUSH
 439: CALL_OW 251
 443: PPUSH
 444: LD_INT 5
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 454: LD_EXP 1
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 466: LD_ADDR_EXP 2
 470: PUSH
 471: LD_STRING Gladstone
 473: PPUSH
 474: LD_INT 1
 476: PPUSH
 477: LD_EXP 23
 481: PPUSH
 482: CALL 24956 0 3
 486: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 487: LD_EXP 2
 491: PPUSH
 492: LD_VAR 0 3
 496: PUSH
 497: LD_INT 1
 499: ARRAY
 500: PPUSH
 501: CALL_OW 250
 505: PPUSH
 506: LD_VAR 0 3
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: CALL_OW 251
 519: PPUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 0
 525: PPUSH
 526: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 530: LD_EXP 2
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 336
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 3
 546: PUSH
 547: LD_STRING Denis
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: LD_EXP 23
 557: PPUSH
 558: CALL 24956 0 3
 562: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 563: LD_EXP 3
 567: PPUSH
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PPUSH
 577: CALL_OW 250
 581: PPUSH
 582: LD_VAR 0 3
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: PPUSH
 591: CALL_OW 251
 595: PPUSH
 596: LD_INT 5
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 606: LD_EXP 3
 610: PPUSH
 611: LD_INT 4
 613: PPUSH
 614: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 618: LD_STRING FrankInDelta
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 30
 628: PUSH
 629: LD_INT 1
 631: EQUAL
 632: IFFALSE 710
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 5
 638: PUSH
 639: LD_STRING Frank
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: LD_EXP 23
 649: PPUSH
 650: CALL 24956 0 3
 654: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 655: LD_EXP 5
 659: PPUSH
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 1
 667: ARRAY
 668: PPUSH
 669: CALL_OW 250
 673: PPUSH
 674: LD_VAR 0 3
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: CALL_OW 251
 687: PPUSH
 688: LD_INT 5
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 698: LD_EXP 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 710: LD_STRING LisaInDelta
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 30
 720: PUSH
 721: LD_INT 1
 723: EQUAL
 724: IFFALSE 802
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 726: LD_ADDR_EXP 4
 730: PUSH
 731: LD_STRING Lisa
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_EXP 23
 741: PPUSH
 742: CALL 24956 0 3
 746: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 747: LD_EXP 4
 751: PPUSH
 752: LD_VAR 0 3
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 250
 765: PPUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 251
 779: PPUSH
 780: LD_INT 5
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 790: LD_EXP 4
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 802: LD_STRING BobbyInDelta
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 30
 812: PUSH
 813: LD_INT 1
 815: EQUAL
 816: IFFALSE 894
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 6
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_EXP 23
 833: PPUSH
 834: CALL 24956 0 3
 838: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 839: LD_EXP 6
 843: PPUSH
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: CALL_OW 250
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: CALL_OW 251
 871: PPUSH
 872: LD_INT 5
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 882: LD_EXP 6
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 894: LD_STRING CyrusInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: PUSH
 905: LD_INT 1
 907: EQUAL
 908: IFFALSE 986
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 7
 914: PUSH
 915: LD_STRING Cyrus
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 23
 925: PPUSH
 926: CALL 24956 0 3
 930: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 931: LD_EXP 7
 935: PPUSH
 936: LD_VAR 0 3
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: PPUSH
 945: CALL_OW 250
 949: PPUSH
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: CALL_OW 251
 963: PPUSH
 964: LD_INT 5
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 974: LD_EXP 7
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 986: LD_STRING DonaldsonInDelta
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1078
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1002: LD_ADDR_EXP 9
1006: PUSH
1007: LD_STRING Donaldson
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_EXP 23
1017: PPUSH
1018: CALL 24956 0 3
1022: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1066: LD_EXP 9
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1078: LD_STRING BrownInDelta
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1170
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1094: LD_ADDR_EXP 8
1098: PUSH
1099: LD_STRING Brown
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: LD_EXP 23
1109: PPUSH
1110: CALL 24956 0 3
1114: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1115: LD_EXP 8
1119: PPUSH
1120: LD_VAR 0 3
1124: PUSH
1125: LD_INT 1
1127: ARRAY
1128: PPUSH
1129: CALL_OW 250
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_INT 1
1141: ARRAY
1142: PPUSH
1143: CALL_OW 251
1147: PPUSH
1148: LD_INT 5
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1158: LD_EXP 8
1162: PPUSH
1163: LD_INT 2
1165: PPUSH
1166: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1170: LD_ADDR_EXP 10
1174: PUSH
1175: LD_STRING othersInDelta
1177: PPUSH
1178: CALL_OW 31
1182: ST_TO_ADDR
// for i in others do
1183: LD_ADDR_VAR 0 2
1187: PUSH
1188: LD_EXP 10
1192: PUSH
1193: FOR_IN
1194: IFFALSE 1241
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1196: LD_VAR 0 2
1200: PPUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: PPUSH
1210: CALL_OW 250
1214: PPUSH
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 251
1228: PPUSH
1229: LD_INT 35
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 50
1239: GO 1193
1241: POP
1242: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1243: LD_ADDR_EXP 12
1247: PUSH
1248: LD_STRING apeInDelta
1250: PPUSH
1251: CALL_OW 31
1255: ST_TO_ADDR
// uc_nation = 0 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 0
1263: ST_TO_ADDR
// if apemans > 5 then
1264: LD_EXP 12
1268: PUSH
1269: LD_INT 5
1271: GREATER
1272: IFFALSE 1367
// begin for i := 1 to 5 do
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: DOUBLE
1280: LD_INT 1
1282: DEC
1283: ST_TO_ADDR
1284: LD_INT 5
1286: PUSH
1287: FOR_TO
1288: IFFALSE 1363
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1290: LD_EXP 12
1294: PUSH
1295: LD_VAR 0 2
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 250
1314: PPUSH
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 251
1328: PPUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1339: LD_ADDR_EXP 13
1343: PUSH
1344: LD_EXP 13
1348: PUSH
1349: LD_EXP 12
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: ADD
1360: ST_TO_ADDR
// end ;
1361: GO 1287
1363: POP
1364: POP
// end else
1365: GO 1443
// begin for i in apemans do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: LD_EXP 12
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1441
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_VAR 0 3
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 250
1398: PPUSH
1399: LD_VAR 0 3
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 50
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1423: LD_ADDR_EXP 13
1427: PUSH
1428: LD_EXP 13
1432: PUSH
1433: LD_VAR 0 2
1437: ADD
1438: ST_TO_ADDR
// end ;
1439: GO 1377
1441: POP
1442: POP
// end ; end ;
1443: LD_VAR 0 1
1447: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
1454: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 21
1472: PUSH
1473: LD_INT 3
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 30
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_STRING vehiclesInDelta
1515: PPUSH
1516: EMPTY
1517: PPUSH
1518: CALL_OW 30
1522: ST_TO_ADDR
// for i = 1 to vehicles do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: DOUBLE
1529: LD_INT 1
1531: DEC
1532: ST_TO_ADDR
1533: LD_VAR 0 5
1537: PUSH
1538: FOR_TO
1539: IFFALSE 1742
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: PUSH
1551: LD_INT 4
1553: PLUS
1554: ARRAY
1555: PUSH
1556: LD_INT 11
1558: EQUAL
1559: PUSH
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 2
1569: ARRAY
1570: PUSH
1571: LD_INT 3
1573: EQUAL
1574: OR
1575: IFFALSE 1726
// begin uc_nation = vehicles [ i ] ;
1577: LD_ADDR_OWVAR 21
1581: PUSH
1582: LD_VAR 0 5
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1593: LD_ADDR_OWVAR 37
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1613: LD_ADDR_OWVAR 39
1617: PUSH
1618: LD_VAR 0 5
1622: PUSH
1623: LD_VAR 0 2
1627: PUSH
1628: LD_INT 2
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1633: LD_ADDR_OWVAR 38
1637: PUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: PUSH
1648: LD_INT 3
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1653: LD_ADDR_OWVAR 40
1657: PUSH
1658: LD_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: PUSH
1668: LD_INT 4
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// veh = CreateVehicle ;
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: CALL_OW 45
1682: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1683: LD_VAR 0 3
1687: PPUSH
1688: LD_VAR 0 4
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: CALL_OW 250
1701: PPUSH
1702: LD_VAR 0 4
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: PPUSH
1711: CALL_OW 251
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 50
// end ; i = i + 4 ;
1726: LD_ADDR_VAR 0 2
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 4
1738: PLUS
1739: ST_TO_ADDR
// end ;
1740: GO 1538
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
1755: PPUSH
// uc_side = 1 ;
1756: LD_ADDR_OWVAR 20
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// uc_nation = 1 ;
1764: LD_ADDR_OWVAR 21
1768: PUSH
1769: LD_INT 1
1771: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1772: LD_ADDR_VAR 0 4
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 21
1789: PUSH
1790: LD_INT 3
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1817: LD_INT 22
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 25
1829: PUSH
1830: LD_INT 4
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: PPUSH
1855: CALL_OW 69
1859: PUSH
1860: LD_EXP 1
1864: PUSH
1865: LD_EXP 7
1869: PUSH
1870: LD_EXP 6
1874: PUSH
1875: LD_EXP 5
1879: PUSH
1880: LD_EXP 2
1884: PUSH
1885: LD_EXP 3
1889: PUSH
1890: LD_EXP 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: DIFF
1904: IFFALSE 2005
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1906: LD_ADDR_EXP 15
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 25
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 69
1953: PUSH
1954: LD_EXP 1
1958: PUSH
1959: LD_EXP 7
1963: PUSH
1964: LD_EXP 6
1968: PUSH
1969: LD_EXP 5
1973: PUSH
1974: LD_EXP 2
1978: PUSH
1979: LD_EXP 3
1983: PUSH
1984: LD_EXP 8
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: DIFF
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: ST_TO_ADDR
2003: GO 2152
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: PPUSH
2037: CALL_OW 69
2041: PUSH
2042: LD_EXP 1
2046: PUSH
2047: LD_EXP 7
2051: PUSH
2052: LD_EXP 6
2056: PUSH
2057: LD_EXP 5
2061: PUSH
2062: LD_EXP 2
2066: PUSH
2067: LD_EXP 3
2071: PUSH
2072: LD_EXP 8
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: DIFF
2086: ST_TO_ADDR
// if filter then
2087: LD_VAR 0 5
2091: IFFALSE 2152
// for i in filter do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_VAR 0 5
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2150
// if GetSkill ( i , 4 ) >= 4 then
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 259
2118: PUSH
2119: LD_INT 4
2121: GREATEREQUAL
2122: IFFALSE 2148
// begin deltaDoctor := i ;
2124: LD_ADDR_EXP 15
2128: PUSH
2129: LD_VAR 0 2
2133: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2134: LD_EXP 15
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// break ;
2146: GO 2150
// end ;
2148: GO 2103
2150: POP
2151: POP
// end ; for i = 1 to 7 do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 7
2164: PUSH
2165: FOR_TO
2166: IFFALSE 2303
// begin hc_gallery =  ;
2168: LD_ADDR_OWVAR 33
2172: PUSH
2173: LD_STRING 
2175: ST_TO_ADDR
// hc_name =  ;
2176: LD_ADDR_OWVAR 26
2180: PUSH
2181: LD_STRING 
2183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2184: LD_INT 0
2186: PPUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 1
2207: PPUSH
2208: LD_INT 4
2210: PPUSH
2211: CALL_OW 12
2215: ARRAY
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 12
2227: PPUSH
2228: CALL_OW 380
// un = CreateHuman ;
2232: LD_ADDR_VAR 0 3
2236: PUSH
2237: CALL_OW 44
2241: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2242: LD_ADDR_EXP 11
2246: PUSH
2247: LD_EXP 11
2251: PUSH
2252: LD_VAR 0 3
2256: ADD
2257: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 250
2276: PPUSH
2277: LD_VAR 0 4
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 251
2290: PPUSH
2291: LD_INT 15
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// end ;
2301: GO 2165
2303: POP
2304: POP
// if deltaDoctor then
2305: LD_EXP 15
2309: IFFALSE 2313
// exit ;
2311: GO 2403
// hc_gallery = Dawkins ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING Dawkins
2320: ST_TO_ADDR
// hc_face_number := 1 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Dr. Adam Charles Dawkins
2336: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 380
// deltaDoctor = CreateHuman ;
2350: LD_ADDR_EXP 15
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2360: LD_EXP 15
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 250
2378: PPUSH
2379: LD_VAR 0 4
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: CALL_OW 251
2392: PPUSH
2393: LD_INT 5
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 50
// end ; end_of_file
2403: LD_VAR 0 1
2407: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_STRING buildingsInDelta
2424: PPUSH
2425: EMPTY
2426: PPUSH
2427: CALL_OW 30
2431: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 40
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: CALL_OW 441
// uc_side = 1 ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// uc_nation = 1 ;
2453: LD_ADDR_OWVAR 21
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i = 1 to buildings do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_VAR 0 5
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2775
// begin bc_type = buildings [ i ] [ 1 ] ;
2479: LD_ADDR_OWVAR 42
2483: PUSH
2484: LD_VAR 0 5
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2499: LD_ADDR_OWVAR 43
2503: PUSH
2504: LD_VAR 0 5
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: ST_TO_ADDR
// if bc_type = b_lab then
2519: LD_OWVAR 42
2523: PUSH
2524: LD_INT 6
2526: EQUAL
2527: IFFALSE 2545
// begin bc_kind1 = b_lab_basic ;
2529: LD_ADDR_OWVAR 44
2533: PUSH
2534: LD_INT 9
2536: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2537: LD_ADDR_OWVAR 45
2541: PUSH
2542: LD_INT 9
2544: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2545: LD_OWVAR 42
2549: PUSH
2550: LD_INT 7
2552: EQUAL
2553: PUSH
2554: LD_OWVAR 42
2558: PUSH
2559: LD_INT 8
2561: EQUAL
2562: OR
2563: IFFALSE 2679
// begin if buildings [ i ] [ 6 ] then
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 2
2574: ARRAY
2575: PUSH
2576: LD_INT 6
2578: ARRAY
2579: IFFALSE 2601
// bc_kind1 = buildings [ i ] [ 6 ] ;
2581: LD_ADDR_OWVAR 44
2585: PUSH
2586: LD_VAR 0 5
2590: PUSH
2591: LD_VAR 0 2
2595: ARRAY
2596: PUSH
2597: LD_INT 6
2599: ARRAY
2600: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2601: LD_VAR 0 5
2605: PUSH
2606: LD_VAR 0 2
2610: ARRAY
2611: PUSH
2612: LD_INT 7
2614: ARRAY
2615: IFFALSE 2637
// bc_kind2 = buildings [ i ] [ 7 ] ;
2617: LD_ADDR_OWVAR 45
2621: PUSH
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 2
2631: ARRAY
2632: PUSH
2633: LD_INT 7
2635: ARRAY
2636: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 2
2646: ARRAY
2647: PUSH
2648: LD_INT 6
2650: ARRAY
2651: NOT
2652: PUSH
2653: LD_VAR 0 5
2657: PUSH
2658: LD_VAR 0 2
2662: ARRAY
2663: PUSH
2664: LD_INT 7
2666: ARRAY
2667: NOT
2668: AND
2669: IFFALSE 2679
// bc_type := b_lab ;
2671: LD_ADDR_OWVAR 42
2675: PUSH
2676: LD_INT 6
2678: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 5
2688: PUSH
2689: LD_VAR 0 2
2693: ARRAY
2694: PUSH
2695: LD_INT 3
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 5
2703: PUSH
2704: LD_VAR 0 2
2708: ARRAY
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 5
2718: PUSH
2719: LD_VAR 0 2
2723: ARRAY
2724: PUSH
2725: LD_INT 5
2727: ARRAY
2728: PPUSH
2729: CALL_OW 47
2733: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2734: LD_VAR 0 4
2738: PPUSH
2739: CALL_OW 266
2743: PUSH
2744: LD_INT 32
2746: EQUAL
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2476
2775: POP
2776: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2874: LD_VAR 0 6
2878: PUSH
2879: LD_INT 0
2881: GREATER
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_INT 0
2890: GREATER
2891: AND
2892: IFFALSE 2902
// baseCorrect = 1 ;
2894: LD_ADDR_EXP 18
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
// if baseCorrect = 0 then
2902: LD_EXP 18
2906: PUSH
2907: LD_INT 0
2909: EQUAL
2910: IFFALSE 3283
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 69
2945: PUSH
2946: FOR_IN
2947: IFFALSE 2960
// RemoveUnit ( i ) ;
2949: LD_VAR 0 2
2953: PPUSH
2954: CALL_OW 64
2958: GO 2946
2960: POP
2961: POP
// uc_nation = 1 ;
2962: LD_ADDR_OWVAR 21
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// uc_side = 1 ;
2970: LD_ADDR_OWVAR 20
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// bc_level = 5 ;
2978: LD_ADDR_OWVAR 43
2982: PUSH
2983: LD_INT 5
2985: ST_TO_ADDR
// bc_type = b_depot ;
2986: LD_ADDR_OWVAR 42
2990: PUSH
2991: LD_INT 0
2993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2994: LD_INT 50
2996: PPUSH
2997: LD_INT 22
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: CALL_OW 47
// bc_type = b_bunker ;
3007: LD_ADDR_OWVAR 42
3011: PUSH
3012: LD_INT 32
3014: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3015: LD_ADDR_VAR 0 4
3019: PUSH
3020: LD_INT 68
3022: PPUSH
3023: LD_INT 24
3025: PPUSH
3026: LD_INT 4
3028: PPUSH
3029: CALL_OW 47
3033: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 11
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 12
3059: ARRAY
3060: PPUSH
3061: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_INT 71
3072: PPUSH
3073: LD_INT 34
3075: PPUSH
3076: LD_INT 4
3078: PPUSH
3079: CALL_OW 47
3083: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3084: LD_VAR 0 4
3088: PPUSH
3089: LD_INT 4
3091: PUSH
3092: LD_INT 11
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 1
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 12
3109: ARRAY
3110: PPUSH
3111: CALL_OW 431
// bc_type = 31 ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3123: LD_INT 51
3125: PPUSH
3126: LD_INT 7
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL_OW 47
// bc_type = b_oil_mine ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 29
3143: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3144: LD_INT 68
3146: PPUSH
3147: LD_INT 40
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 47
// bc_type = b_workshop ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_INT 2
3164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3165: LD_INT 38
3167: PPUSH
3168: LD_INT 20
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: CALL_OW 47
// bc_type = b_armoury ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 4
3185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3186: LD_INT 38
3188: PPUSH
3189: LD_INT 20
3191: PPUSH
3192: LD_INT 2
3194: PPUSH
3195: CALL_OW 47
// bc_type = b_solar_power ;
3199: LD_ADDR_OWVAR 42
3203: PUSH
3204: LD_INT 27
3206: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3207: LD_INT 46
3209: PPUSH
3210: LD_INT 12
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3220: LD_INT 48
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3233: LD_INT 49
3235: PPUSH
3236: LD_INT 11
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: CALL_OW 47
// bc_type = b_lab_half ;
3246: LD_ADDR_OWVAR 42
3250: PUSH
3251: LD_INT 7
3253: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3254: LD_ADDR_OWVAR 44
3258: PUSH
3259: LD_INT 15
3261: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3262: LD_ADDR_OWVAR 45
3266: PUSH
3267: LD_INT 9
3269: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3270: LD_INT 42
3272: PPUSH
3273: LD_INT 15
3275: PPUSH
3276: LD_INT 2
3278: PPUSH
3279: CALL_OW 47
// end ; end ; end_of_file
3283: LD_VAR 0 1
3287: RET
// every 1 do var i , j , tmp ;
3288: GO 3290
3290: DISABLE
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
// begin InGameOn ;
3296: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3300: LD_EXP 20
3304: PUSH
3305: LD_INT 1
3307: ARRAY
3308: PPUSH
3309: CALL_OW 87
// if IsOK ( Denis ) then
3313: LD_EXP 3
3317: PPUSH
3318: CALL_OW 302
3322: IFFALSE 3350
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3324: LD_INT 6
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: LD_INT 2
3332: PPUSH
3333: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3337: LD_INT 20
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3380: LD_EXP 15
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3394: LD_EXP 1
3398: PPUSH
3399: LD_EXP 15
3403: PPUSH
3404: CALL_OW 296
3408: PUSH
3409: LD_INT 5
3411: LESS
3412: IFFALSE 3373
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_EXP 1
3423: PPUSH
3424: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3428: LD_EXP 1
3432: PPUSH
3433: LD_STRING D1-JMM-1
3435: PPUSH
3436: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3440: LD_EXP 15
3444: PPUSH
3445: LD_STRING D1-Sci-1
3447: PPUSH
3448: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3452: LD_EXP 1
3456: PUSH
3457: LD_EXP 15
3461: PUSH
3462: LD_EXP 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: PPUSH
3472: LD_EXP 20
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 120
// end ;
3485: PPOPN 3
3487: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3488: LD_EXP 1
3492: PPUSH
3493: CALL_OW 310
3497: PUSH
3498: LD_EXP 20
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: EQUAL
3507: PUSH
3508: LD_EXP 15
3512: PPUSH
3513: CALL_OW 310
3517: PUSH
3518: LD_EXP 20
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: EQUAL
3527: AND
3528: IFFALSE 4074
3530: GO 3532
3532: DISABLE
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3538: LD_EXP 20
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D1-JMM-2
3558: PPUSH
3559: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D1-Sci-2
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D1-JMM-3
3582: PPUSH
3583: CALL_OW 88
// if IsOK ( Denis ) then
3587: LD_EXP 3
3591: PPUSH
3592: CALL_OW 302
3596: IFFALSE 3612
// Say ( DeltaDoctor , D1-Sci-3 ) else
3598: LD_EXP 15
3602: PPUSH
3603: LD_STRING D1-Sci-3
3605: PPUSH
3606: CALL_OW 88
3610: GO 3624
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3612: LD_EXP 15
3616: PPUSH
3617: LD_STRING D1-Sci-3a
3619: PPUSH
3620: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING D1-JMM-4
3631: PPUSH
3632: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_INT 22
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 25
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: LD_INT 54
3666: PUSH
3667: EMPTY
3668: LIST
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 69
3683: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3684: LD_ADDR_VAR 0 1
3688: PUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3755
// for j in tmp do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3751
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 250
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 251
3744: PPUSH
3745: CALL_OW 191
3749: GO 3717
3751: POP
3752: POP
3753: GO 3704
3755: POP
3756: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3757: LD_EXP 15
3761: PPUSH
3762: LD_STRING D1-Sci-4
3764: PPUSH
3765: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3769: LD_EXP 1
3773: PPUSH
3774: LD_STRING D1-JMM-5
3776: PPUSH
3777: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3781: LD_EXP 15
3785: PPUSH
3786: LD_STRING D1-Sci-5
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-6
3800: PPUSH
3801: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3805: LD_EXP 16
3809: PPUSH
3810: LD_STRING D1-Har-6
3812: PPUSH
3813: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3817: LD_EXP 1
3821: PPUSH
3822: LD_STRING D1-JMM-7
3824: PPUSH
3825: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3829: LD_EXP 16
3833: PPUSH
3834: LD_STRING D1-Har-7
3836: PPUSH
3837: CALL_OW 94
// if IsOK ( Denis ) then
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 302
3850: IFFALSE 3864
// Say ( JMM , D1-JMM-8 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D1-JMM-8
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D1-JMM-8a
3871: PPUSH
3872: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3876: LD_EXP 16
3880: PPUSH
3881: LD_STRING D1-Har-8
3883: PPUSH
3884: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D1-JMM-9
3895: PPUSH
3896: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3900: LD_EXP 16
3904: PPUSH
3905: LD_STRING D1-Har-9
3907: PPUSH
3908: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3912: LD_EXP 1
3916: PPUSH
3917: LD_STRING D1-JMM-10
3919: PPUSH
3920: CALL_OW 88
// if IsOK ( Denis ) then
3924: LD_EXP 3
3928: PPUSH
3929: CALL_OW 302
3933: IFFALSE 3947
// Say ( JMM , D1-JMM-10a ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING D1-JMM-10a
3942: PPUSH
3943: CALL_OW 88
// SelectDeltaCharacters ;
3947: CALL 4433 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3951: LD_EXP 20
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 274
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 150
3970: PPUSH
3971: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3975: LD_INT 22
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 30
3987: PUSH
3988: LD_INT 29
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PPUSH
3999: CALL_OW 69
4003: PUSH
4004: LD_INT 0
4006: GREATER
4007: IFFALSE 4033
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4009: LD_EXP 20
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: CALL_OW 274
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: LD_INT 300
4028: PPUSH
4029: CALL_OW 277
// InGameOff ;
4033: CALL_OW 9
// Query ( Q1 ) ;
4037: LD_STRING Q1
4039: PPUSH
4040: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4044: LD_INT 3
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL_OW 424
// if IsInUnit ( JMM ) then
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 310
4063: IFFALSE 4074
// ComExitBuilding ( JMM ) ;
4065: LD_EXP 1
4069: PPUSH
4070: CALL_OW 122
// end ;
4074: PPOPN 3
4076: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 22
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 21
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 71
4108: PUSH
4109: LD_INT 0
4111: EQUAL
4112: IFFALSE 4430
4114: GO 4116
4116: DISABLE
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// begin SaveDeltaCharacters ;
4121: CALL 4787 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PPUSH
4155: CALL_OW 70
4159: IFFALSE 4416
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4161: LD_ADDR_VAR 0 1
4165: PUSH
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 58
4184: PUSH
4185: EMPTY
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 70
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4414
// begin cargoType = GetCargoType ( i ) ;
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 288
4218: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4219: LD_VAR 0 1
4223: PPUSH
4224: CALL_OW 264
4228: PUSH
4229: LD_INT 12
4231: EQUAL
4232: IFFALSE 4329
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4234: LD_ADDR_EXP 14
4238: PUSH
4239: LD_EXP 14
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 248
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 265
4263: PUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 262
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL_OW 263
4283: PUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 264
4293: PUSH
4294: LD_VAR 0 2
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: LD_VAR 0 2
4308: PPUSH
4309: CALL_OW 289
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: ADD
4326: ST_TO_ADDR
4327: GO 4400
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4329: LD_ADDR_EXP 14
4333: PUSH
4334: LD_EXP 14
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: CALL_OW 248
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: CALL_OW 265
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 262
4368: PUSH
4369: LD_VAR 0 1
4373: PPUSH
4374: CALL_OW 263
4378: PUSH
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 264
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PUSH
4396: EMPTY
4397: LIST
4398: ADD
4399: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4400: LD_EXP 14
4404: PPUSH
4405: LD_STRING 06_VehiclesIn06_1
4407: PPUSH
4408: CALL_OW 39
// end ;
4412: GO 4201
4414: POP
4415: POP
// end ; SaveCargos ;
4416: CALL 5543 0 0
// ChangeMap ( 6 , %_cont ) ;
4420: LD_INT 6
4422: PPUSH
4423: LD_STRING %_cont
4425: PPUSH
4426: CALL_OW 340
// end ; end_of_file
4430: PPOPN 2
4432: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// selectedPeople := [ ] ;
4438: LD_ADDR_EXP 17
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_EXP 1
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: DIFF
4550: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4551: LD_ADDR_EXP 17
4555: PUSH
4556: LD_STRING text
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT -5
4567: PUSH
4568: LD_EXP 1
4572: PUSH
4573: LD_INT -6
4575: PUSH
4576: LD_INT -2
4578: PUSH
4579: LD_INT -3
4581: PUSH
4582: LD_INT -5
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_VAR 0 3
4597: ADD
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -4
4604: PUSH
4605: LD_EXP 3
4609: PUSH
4610: LD_EXP 15
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ADD
4621: PPUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 42
4651: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4652: LD_EXP 17
4656: PPUSH
4657: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4661: LD_INT 22
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: CALL_OW 235
// for i in selectedPeople do
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: LD_EXP 17
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4724
// SetSide ( i , 1 ) ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 235
4722: GO 4707
4724: POP
4725: POP
// for i in yourApemans do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_EXP 13
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4753
// SetSide ( i , 1 ) ;
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_INT 1
4746: PPUSH
4747: CALL_OW 235
4751: GO 4736
4753: POP
4754: POP
// SetSide ( JMM , 1 ) ;
4755: LD_EXP 1
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4767: LD_EXP 13
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: LD_INT 5
4777: PPUSH
4778: CALL_OW 237
// end ;
4782: LD_VAR 0 1
4786: RET
// export function SaveDeltaCharacters ; begin
4787: LD_INT 0
4789: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4790: LD_EXP 1
4794: PPUSH
4795: LD_EXP 22
4799: PUSH
4800: LD_STRING JMM
4802: STR
4803: PPUSH
4804: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DeltaDoctor
4815: PPUSH
4816: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4820: LD_EXP 3
4824: PPUSH
4825: LD_EXP 22
4829: PUSH
4830: LD_STRING Denis
4832: STR
4833: PPUSH
4834: CALL_OW 38
// if Lisa in selectedPeople then
4838: LD_EXP 4
4842: PUSH
4843: LD_EXP 17
4847: IN
4848: IFFALSE 4880
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4850: LD_EXP 4
4854: PPUSH
4855: LD_EXP 22
4859: PUSH
4860: LD_STRING Lisa
4862: STR
4863: PPUSH
4864: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4868: LD_INT 1
4870: PPUSH
4871: LD_STRING LisaIn06
4873: PPUSH
4874: CALL_OW 39
// end else
4878: GO 4901
// if IsOk ( Lisa ) then
4880: LD_EXP 4
4884: PPUSH
4885: CALL_OW 302
4889: IFFALSE 4901
// SaveVariable ( 1 , LisaStayInDelta ) ;
4891: LD_INT 1
4893: PPUSH
4894: LD_STRING LisaStayInDelta
4896: PPUSH
4897: CALL_OW 39
// if Bobby in selectedPeople then
4901: LD_EXP 6
4905: PUSH
4906: LD_EXP 17
4910: IN
4911: IFFALSE 4943
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4913: LD_EXP 6
4917: PPUSH
4918: LD_EXP 22
4922: PUSH
4923: LD_STRING Bobby
4925: STR
4926: PPUSH
4927: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4931: LD_INT 1
4933: PPUSH
4934: LD_STRING BobbyIn06
4936: PPUSH
4937: CALL_OW 39
// end else
4941: GO 4964
// if IsOk ( Bobby ) then
4943: LD_EXP 6
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4964
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4954: LD_INT 1
4956: PPUSH
4957: LD_STRING BobbyStayInDelta
4959: PPUSH
4960: CALL_OW 39
// if Cyrus in selectedPeople then
4964: LD_EXP 7
4968: PUSH
4969: LD_EXP 17
4973: IN
4974: IFFALSE 5006
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4976: LD_EXP 7
4980: PPUSH
4981: LD_EXP 22
4985: PUSH
4986: LD_STRING Cyrus
4988: STR
4989: PPUSH
4990: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4994: LD_INT 1
4996: PPUSH
4997: LD_STRING CyrusIn06
4999: PPUSH
5000: CALL_OW 39
// end else
5004: GO 5027
// if IsOk ( Cyrus ) then
5006: LD_EXP 7
5010: PPUSH
5011: CALL_OW 302
5015: IFFALSE 5027
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5017: LD_INT 1
5019: PPUSH
5020: LD_STRING CyrusStayInDelta
5022: PPUSH
5023: CALL_OW 39
// if Frank in selectedPeople then
5027: LD_EXP 5
5031: PUSH
5032: LD_EXP 17
5036: IN
5037: IFFALSE 5069
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5039: LD_EXP 5
5043: PPUSH
5044: LD_EXP 22
5048: PUSH
5049: LD_STRING Frank
5051: STR
5052: PPUSH
5053: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_STRING FrankIn06
5062: PPUSH
5063: CALL_OW 39
// end else
5067: GO 5090
// if IsOk ( Frank ) then
5069: LD_EXP 5
5073: PPUSH
5074: CALL_OW 302
5078: IFFALSE 5090
// SaveVariable ( 1 , FrankStayInDelta ) ;
5080: LD_INT 1
5082: PPUSH
5083: LD_STRING FrankStayInDelta
5085: PPUSH
5086: CALL_OW 39
// if Brown in selectedPeople then
5090: LD_EXP 8
5094: PUSH
5095: LD_EXP 17
5099: IN
5100: IFFALSE 5132
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5102: LD_EXP 8
5106: PPUSH
5107: LD_EXP 22
5111: PUSH
5112: LD_STRING Brown
5114: STR
5115: PPUSH
5116: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5120: LD_INT 1
5122: PPUSH
5123: LD_STRING BrownIn06
5125: PPUSH
5126: CALL_OW 39
// end else
5130: GO 5153
// if IsOk ( Brown ) then
5132: LD_EXP 8
5136: PPUSH
5137: CALL_OW 302
5141: IFFALSE 5153
// SaveVariable ( 1 , BrownStayInDelta ) ;
5143: LD_INT 1
5145: PPUSH
5146: LD_STRING BrownStayInDelta
5148: PPUSH
5149: CALL_OW 39
// if Donaldson in selectedPeople then
5153: LD_EXP 9
5157: PUSH
5158: LD_EXP 17
5162: IN
5163: IFFALSE 5195
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5165: LD_EXP 9
5169: PPUSH
5170: LD_EXP 22
5174: PUSH
5175: LD_STRING Donaldson
5177: STR
5178: PPUSH
5179: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5183: LD_INT 1
5185: PPUSH
5186: LD_STRING DonaldsonIn06
5188: PPUSH
5189: CALL_OW 39
// end else
5193: GO 5216
// if IsOk ( Donaldson ) then
5195: LD_EXP 9
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5216
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5206: LD_INT 1
5208: PPUSH
5209: LD_STRING DonaldsonStayInDelta
5211: PPUSH
5212: CALL_OW 39
// if Gladstone in selectedPeople then
5216: LD_EXP 2
5220: PUSH
5221: LD_EXP 17
5225: IN
5226: IFFALSE 5258
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5228: LD_EXP 2
5232: PPUSH
5233: LD_EXP 22
5237: PUSH
5238: LD_STRING Gladstone
5240: STR
5241: PPUSH
5242: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5246: LD_INT 1
5248: PPUSH
5249: LD_STRING GladstoneIn06
5251: PPUSH
5252: CALL_OW 39
// end else
5256: GO 5279
// if IsOk ( Gladstone ) then
5258: LD_EXP 2
5262: PPUSH
5263: CALL_OW 302
5267: IFFALSE 5279
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_STRING GladstoneStayInDelta
5274: PPUSH
5275: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5279: LD_ADDR_EXP 17
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 23
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: LD_INT 21
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5324: LD_EXP 13
5328: PPUSH
5329: LD_STRING ApeIn06
5331: PPUSH
5332: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5336: LD_EXP 17
5340: PUSH
5341: LD_EXP 1
5345: PUSH
5346: LD_EXP 4
5350: PUSH
5351: LD_EXP 6
5355: PUSH
5356: LD_EXP 7
5360: PUSH
5361: LD_EXP 5
5365: PUSH
5366: LD_EXP 8
5370: PUSH
5371: LD_EXP 9
5375: PUSH
5376: LD_EXP 2
5380: PUSH
5381: LD_EXP 3
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: DIFF
5397: PPUSH
5398: LD_STRING OthersIn06
5400: PPUSH
5401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5405: LD_INT 22
5407: PUSH
5408: LD_INT 4
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 25
5420: PUSH
5421: LD_INT 1
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 3
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 25
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: PUSH
5474: LD_EXP 15
5478: PUSH
5479: LD_EXP 4
5483: PUSH
5484: LD_EXP 6
5488: PUSH
5489: LD_EXP 7
5493: PUSH
5494: LD_EXP 5
5498: PUSH
5499: LD_EXP 8
5503: PUSH
5504: LD_EXP 9
5508: PUSH
5509: LD_EXP 2
5513: PUSH
5514: LD_EXP 3
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: DIFF
5530: PPUSH
5531: LD_STRING OthersStayInDelta
5533: PPUSH
5534: CALL_OW 38
// end ;
5538: LD_VAR 0 1
5542: RET
// export function SaveCargos ; var i ; begin
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5547: LD_ADDR_VAR 0 2
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 34
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 70
5583: PUSH
5584: FOR_IN
5585: IFFALSE 5613
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5587: LD_ADDR_EXP 21
5591: PUSH
5592: LD_EXP 21
5596: PUSH
5597: LD_VAR 0 2
5601: PPUSH
5602: CALL 65095 0 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: ADD
5610: ST_TO_ADDR
5611: GO 5584
5613: POP
5614: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5615: LD_EXP 21
5619: PPUSH
5620: LD_STRING 06_ResourcesInCargo06_1
5622: PPUSH
5623: CALL_OW 39
// end ; end_of_file
5627: LD_VAR 0 1
5631: RET
// on Command ( comandid ) do var i ;
5632: LD_INT 0
5634: PPUSH
// begin if comandid = 65 then
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 65
5642: EQUAL
5643: IFFALSE 5684
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5645: LD_ADDR_VAR 0 2
5649: PUSH
5650: LD_INT 22
5652: PUSH
5653: LD_INT 1
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: EMPTY
5661: LIST
5662: PPUSH
5663: CALL_OW 69
5667: PUSH
5668: FOR_IN
5669: IFFALSE 5682
// ComStop ( i ) ;
5671: LD_VAR 0 2
5675: PPUSH
5676: CALL_OW 141
5680: GO 5668
5682: POP
5683: POP
// end ;
5684: PPOPN 2
5686: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5687: LD_INT 0
5689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5690: LD_ADDR_VAR 0 3
5694: PUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: LD_INT 21
5707: PUSH
5708: LD_INT 3
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: PUSH
5715: LD_INT 30
5717: PUSH
5718: LD_INT 0
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: LIST
5729: PPUSH
5730: CALL_OW 69
5734: ST_TO_ADDR
// if not tmp then
5735: LD_VAR 0 3
5739: NOT
5740: IFFALSE 5744
// exit ;
5742: GO 5774
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5744: LD_VAR 0 1
5748: PPUSH
5749: LD_VAR 0 3
5753: PUSH
5754: LD_INT 1
5756: ARRAY
5757: PPUSH
5758: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5762: LD_VAR 0 1
5766: PPUSH
5767: LD_INT 4
5769: PPUSH
5770: CALL_OW 235
// end ;
5774: PPOPN 3
5776: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL 20140 0 1
// end ;
5786: PPOPN 1
5788: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5789: LD_VAR 0 1
5793: PPUSH
5794: LD_VAR 0 2
5798: PPUSH
5799: CALL 20262 0 2
// end ; end_of_file
5803: PPOPN 2
5805: END
// every 0 0$1 do
5806: GO 5808
5808: DISABLE
// begin enable ;
5809: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5810: LD_STRING updateTimer(
5812: PUSH
5813: LD_OWVAR 1
5817: STR
5818: PUSH
5819: LD_STRING );
5821: STR
5822: PPUSH
5823: CALL_OW 559
// end ;
5827: END
// export function SOS_MapStart ( ) ; begin
5828: LD_INT 0
5830: PPUSH
// if streamModeActive then
5831: LD_EXP 24
5835: IFFALSE 5844
// DefineStreamItems ( true ) ;
5837: LD_INT 1
5839: PPUSH
5840: CALL 7494 0 1
// UpdateFactoryWaypoints ( ) ;
5844: CALL 21078 0 0
// end ;
5848: LD_VAR 0 1
5852: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5853: LD_INT 0
5855: PPUSH
// if p2 = 100 then
5856: LD_VAR 0 2
5860: PUSH
5861: LD_INT 100
5863: EQUAL
5864: IFFALSE 6867
// begin if not StreamModeActive then
5866: LD_EXP 24
5870: NOT
5871: IFFALSE 5881
// StreamModeActive := true ;
5873: LD_ADDR_EXP 24
5877: PUSH
5878: LD_INT 1
5880: ST_TO_ADDR
// if p3 = 0 then
5881: LD_VAR 0 3
5885: PUSH
5886: LD_INT 0
5888: EQUAL
5889: IFFALSE 5895
// InitStreamMode ;
5891: CALL 7030 0 0
// if p3 = 1 then
5895: LD_VAR 0 3
5899: PUSH
5900: LD_INT 1
5902: EQUAL
5903: IFFALSE 5913
// sRocket := true ;
5905: LD_ADDR_EXP 29
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// if p3 = 2 then
5913: LD_VAR 0 3
5917: PUSH
5918: LD_INT 2
5920: EQUAL
5921: IFFALSE 5931
// sSpeed := true ;
5923: LD_ADDR_EXP 28
5927: PUSH
5928: LD_INT 1
5930: ST_TO_ADDR
// if p3 = 3 then
5931: LD_VAR 0 3
5935: PUSH
5936: LD_INT 3
5938: EQUAL
5939: IFFALSE 5949
// sEngine := true ;
5941: LD_ADDR_EXP 30
5945: PUSH
5946: LD_INT 1
5948: ST_TO_ADDR
// if p3 = 4 then
5949: LD_VAR 0 3
5953: PUSH
5954: LD_INT 4
5956: EQUAL
5957: IFFALSE 5967
// sSpec := true ;
5959: LD_ADDR_EXP 27
5963: PUSH
5964: LD_INT 1
5966: ST_TO_ADDR
// if p3 = 5 then
5967: LD_VAR 0 3
5971: PUSH
5972: LD_INT 5
5974: EQUAL
5975: IFFALSE 5985
// sLevel := true ;
5977: LD_ADDR_EXP 31
5981: PUSH
5982: LD_INT 1
5984: ST_TO_ADDR
// if p3 = 6 then
5985: LD_VAR 0 3
5989: PUSH
5990: LD_INT 6
5992: EQUAL
5993: IFFALSE 6003
// sArmoury := true ;
5995: LD_ADDR_EXP 32
5999: PUSH
6000: LD_INT 1
6002: ST_TO_ADDR
// if p3 = 7 then
6003: LD_VAR 0 3
6007: PUSH
6008: LD_INT 7
6010: EQUAL
6011: IFFALSE 6021
// sRadar := true ;
6013: LD_ADDR_EXP 33
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// if p3 = 8 then
6021: LD_VAR 0 3
6025: PUSH
6026: LD_INT 8
6028: EQUAL
6029: IFFALSE 6039
// sBunker := true ;
6031: LD_ADDR_EXP 34
6035: PUSH
6036: LD_INT 1
6038: ST_TO_ADDR
// if p3 = 9 then
6039: LD_VAR 0 3
6043: PUSH
6044: LD_INT 9
6046: EQUAL
6047: IFFALSE 6057
// sHack := true ;
6049: LD_ADDR_EXP 35
6053: PUSH
6054: LD_INT 1
6056: ST_TO_ADDR
// if p3 = 10 then
6057: LD_VAR 0 3
6061: PUSH
6062: LD_INT 10
6064: EQUAL
6065: IFFALSE 6075
// sFire := true ;
6067: LD_ADDR_EXP 36
6071: PUSH
6072: LD_INT 1
6074: ST_TO_ADDR
// if p3 = 11 then
6075: LD_VAR 0 3
6079: PUSH
6080: LD_INT 11
6082: EQUAL
6083: IFFALSE 6093
// sRefresh := true ;
6085: LD_ADDR_EXP 37
6089: PUSH
6090: LD_INT 1
6092: ST_TO_ADDR
// if p3 = 12 then
6093: LD_VAR 0 3
6097: PUSH
6098: LD_INT 12
6100: EQUAL
6101: IFFALSE 6111
// sExp := true ;
6103: LD_ADDR_EXP 38
6107: PUSH
6108: LD_INT 1
6110: ST_TO_ADDR
// if p3 = 13 then
6111: LD_VAR 0 3
6115: PUSH
6116: LD_INT 13
6118: EQUAL
6119: IFFALSE 6129
// sDepot := true ;
6121: LD_ADDR_EXP 39
6125: PUSH
6126: LD_INT 1
6128: ST_TO_ADDR
// if p3 = 14 then
6129: LD_VAR 0 3
6133: PUSH
6134: LD_INT 14
6136: EQUAL
6137: IFFALSE 6147
// sFlag := true ;
6139: LD_ADDR_EXP 40
6143: PUSH
6144: LD_INT 1
6146: ST_TO_ADDR
// if p3 = 15 then
6147: LD_VAR 0 3
6151: PUSH
6152: LD_INT 15
6154: EQUAL
6155: IFFALSE 6165
// sKamikadze := true ;
6157: LD_ADDR_EXP 48
6161: PUSH
6162: LD_INT 1
6164: ST_TO_ADDR
// if p3 = 16 then
6165: LD_VAR 0 3
6169: PUSH
6170: LD_INT 16
6172: EQUAL
6173: IFFALSE 6183
// sTroll := true ;
6175: LD_ADDR_EXP 49
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// if p3 = 17 then
6183: LD_VAR 0 3
6187: PUSH
6188: LD_INT 17
6190: EQUAL
6191: IFFALSE 6201
// sSlow := true ;
6193: LD_ADDR_EXP 50
6197: PUSH
6198: LD_INT 1
6200: ST_TO_ADDR
// if p3 = 18 then
6201: LD_VAR 0 3
6205: PUSH
6206: LD_INT 18
6208: EQUAL
6209: IFFALSE 6219
// sLack := true ;
6211: LD_ADDR_EXP 51
6215: PUSH
6216: LD_INT 1
6218: ST_TO_ADDR
// if p3 = 19 then
6219: LD_VAR 0 3
6223: PUSH
6224: LD_INT 19
6226: EQUAL
6227: IFFALSE 6237
// sTank := true ;
6229: LD_ADDR_EXP 53
6233: PUSH
6234: LD_INT 1
6236: ST_TO_ADDR
// if p3 = 20 then
6237: LD_VAR 0 3
6241: PUSH
6242: LD_INT 20
6244: EQUAL
6245: IFFALSE 6255
// sRemote := true ;
6247: LD_ADDR_EXP 54
6251: PUSH
6252: LD_INT 1
6254: ST_TO_ADDR
// if p3 = 21 then
6255: LD_VAR 0 3
6259: PUSH
6260: LD_INT 21
6262: EQUAL
6263: IFFALSE 6273
// sPowell := true ;
6265: LD_ADDR_EXP 55
6269: PUSH
6270: LD_INT 1
6272: ST_TO_ADDR
// if p3 = 22 then
6273: LD_VAR 0 3
6277: PUSH
6278: LD_INT 22
6280: EQUAL
6281: IFFALSE 6291
// sTeleport := true ;
6283: LD_ADDR_EXP 58
6287: PUSH
6288: LD_INT 1
6290: ST_TO_ADDR
// if p3 = 23 then
6291: LD_VAR 0 3
6295: PUSH
6296: LD_INT 23
6298: EQUAL
6299: IFFALSE 6309
// sOilTower := true ;
6301: LD_ADDR_EXP 60
6305: PUSH
6306: LD_INT 1
6308: ST_TO_ADDR
// if p3 = 24 then
6309: LD_VAR 0 3
6313: PUSH
6314: LD_INT 24
6316: EQUAL
6317: IFFALSE 6327
// sShovel := true ;
6319: LD_ADDR_EXP 61
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// if p3 = 25 then
6327: LD_VAR 0 3
6331: PUSH
6332: LD_INT 25
6334: EQUAL
6335: IFFALSE 6345
// sSheik := true ;
6337: LD_ADDR_EXP 62
6341: PUSH
6342: LD_INT 1
6344: ST_TO_ADDR
// if p3 = 26 then
6345: LD_VAR 0 3
6349: PUSH
6350: LD_INT 26
6352: EQUAL
6353: IFFALSE 6363
// sEarthquake := true ;
6355: LD_ADDR_EXP 64
6359: PUSH
6360: LD_INT 1
6362: ST_TO_ADDR
// if p3 = 27 then
6363: LD_VAR 0 3
6367: PUSH
6368: LD_INT 27
6370: EQUAL
6371: IFFALSE 6381
// sAI := true ;
6373: LD_ADDR_EXP 65
6377: PUSH
6378: LD_INT 1
6380: ST_TO_ADDR
// if p3 = 28 then
6381: LD_VAR 0 3
6385: PUSH
6386: LD_INT 28
6388: EQUAL
6389: IFFALSE 6399
// sCargo := true ;
6391: LD_ADDR_EXP 68
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// if p3 = 29 then
6399: LD_VAR 0 3
6403: PUSH
6404: LD_INT 29
6406: EQUAL
6407: IFFALSE 6417
// sDLaser := true ;
6409: LD_ADDR_EXP 69
6413: PUSH
6414: LD_INT 1
6416: ST_TO_ADDR
// if p3 = 30 then
6417: LD_VAR 0 3
6421: PUSH
6422: LD_INT 30
6424: EQUAL
6425: IFFALSE 6435
// sExchange := true ;
6427: LD_ADDR_EXP 70
6431: PUSH
6432: LD_INT 1
6434: ST_TO_ADDR
// if p3 = 31 then
6435: LD_VAR 0 3
6439: PUSH
6440: LD_INT 31
6442: EQUAL
6443: IFFALSE 6453
// sFac := true ;
6445: LD_ADDR_EXP 71
6449: PUSH
6450: LD_INT 1
6452: ST_TO_ADDR
// if p3 = 32 then
6453: LD_VAR 0 3
6457: PUSH
6458: LD_INT 32
6460: EQUAL
6461: IFFALSE 6471
// sPower := true ;
6463: LD_ADDR_EXP 72
6467: PUSH
6468: LD_INT 1
6470: ST_TO_ADDR
// if p3 = 33 then
6471: LD_VAR 0 3
6475: PUSH
6476: LD_INT 33
6478: EQUAL
6479: IFFALSE 6489
// sRandom := true ;
6481: LD_ADDR_EXP 73
6485: PUSH
6486: LD_INT 1
6488: ST_TO_ADDR
// if p3 = 34 then
6489: LD_VAR 0 3
6493: PUSH
6494: LD_INT 34
6496: EQUAL
6497: IFFALSE 6507
// sShield := true ;
6499: LD_ADDR_EXP 74
6503: PUSH
6504: LD_INT 1
6506: ST_TO_ADDR
// if p3 = 35 then
6507: LD_VAR 0 3
6511: PUSH
6512: LD_INT 35
6514: EQUAL
6515: IFFALSE 6525
// sTime := true ;
6517: LD_ADDR_EXP 75
6521: PUSH
6522: LD_INT 1
6524: ST_TO_ADDR
// if p3 = 36 then
6525: LD_VAR 0 3
6529: PUSH
6530: LD_INT 36
6532: EQUAL
6533: IFFALSE 6543
// sTools := true ;
6535: LD_ADDR_EXP 76
6539: PUSH
6540: LD_INT 1
6542: ST_TO_ADDR
// if p3 = 101 then
6543: LD_VAR 0 3
6547: PUSH
6548: LD_INT 101
6550: EQUAL
6551: IFFALSE 6561
// sSold := true ;
6553: LD_ADDR_EXP 41
6557: PUSH
6558: LD_INT 1
6560: ST_TO_ADDR
// if p3 = 102 then
6561: LD_VAR 0 3
6565: PUSH
6566: LD_INT 102
6568: EQUAL
6569: IFFALSE 6579
// sDiff := true ;
6571: LD_ADDR_EXP 42
6575: PUSH
6576: LD_INT 1
6578: ST_TO_ADDR
// if p3 = 103 then
6579: LD_VAR 0 3
6583: PUSH
6584: LD_INT 103
6586: EQUAL
6587: IFFALSE 6597
// sFog := true ;
6589: LD_ADDR_EXP 45
6593: PUSH
6594: LD_INT 1
6596: ST_TO_ADDR
// if p3 = 104 then
6597: LD_VAR 0 3
6601: PUSH
6602: LD_INT 104
6604: EQUAL
6605: IFFALSE 6615
// sReset := true ;
6607: LD_ADDR_EXP 46
6611: PUSH
6612: LD_INT 1
6614: ST_TO_ADDR
// if p3 = 105 then
6615: LD_VAR 0 3
6619: PUSH
6620: LD_INT 105
6622: EQUAL
6623: IFFALSE 6633
// sSun := true ;
6625: LD_ADDR_EXP 47
6629: PUSH
6630: LD_INT 1
6632: ST_TO_ADDR
// if p3 = 106 then
6633: LD_VAR 0 3
6637: PUSH
6638: LD_INT 106
6640: EQUAL
6641: IFFALSE 6651
// sTiger := true ;
6643: LD_ADDR_EXP 43
6647: PUSH
6648: LD_INT 1
6650: ST_TO_ADDR
// if p3 = 107 then
6651: LD_VAR 0 3
6655: PUSH
6656: LD_INT 107
6658: EQUAL
6659: IFFALSE 6669
// sBomb := true ;
6661: LD_ADDR_EXP 44
6665: PUSH
6666: LD_INT 1
6668: ST_TO_ADDR
// if p3 = 108 then
6669: LD_VAR 0 3
6673: PUSH
6674: LD_INT 108
6676: EQUAL
6677: IFFALSE 6687
// sWound := true ;
6679: LD_ADDR_EXP 52
6683: PUSH
6684: LD_INT 1
6686: ST_TO_ADDR
// if p3 = 109 then
6687: LD_VAR 0 3
6691: PUSH
6692: LD_INT 109
6694: EQUAL
6695: IFFALSE 6705
// sBetray := true ;
6697: LD_ADDR_EXP 56
6701: PUSH
6702: LD_INT 1
6704: ST_TO_ADDR
// if p3 = 110 then
6705: LD_VAR 0 3
6709: PUSH
6710: LD_INT 110
6712: EQUAL
6713: IFFALSE 6723
// sContamin := true ;
6715: LD_ADDR_EXP 57
6719: PUSH
6720: LD_INT 1
6722: ST_TO_ADDR
// if p3 = 111 then
6723: LD_VAR 0 3
6727: PUSH
6728: LD_INT 111
6730: EQUAL
6731: IFFALSE 6741
// sOil := true ;
6733: LD_ADDR_EXP 59
6737: PUSH
6738: LD_INT 1
6740: ST_TO_ADDR
// if p3 = 112 then
6741: LD_VAR 0 3
6745: PUSH
6746: LD_INT 112
6748: EQUAL
6749: IFFALSE 6759
// sStu := true ;
6751: LD_ADDR_EXP 63
6755: PUSH
6756: LD_INT 1
6758: ST_TO_ADDR
// if p3 = 113 then
6759: LD_VAR 0 3
6763: PUSH
6764: LD_INT 113
6766: EQUAL
6767: IFFALSE 6777
// sBazooka := true ;
6769: LD_ADDR_EXP 66
6773: PUSH
6774: LD_INT 1
6776: ST_TO_ADDR
// if p3 = 114 then
6777: LD_VAR 0 3
6781: PUSH
6782: LD_INT 114
6784: EQUAL
6785: IFFALSE 6795
// sMortar := true ;
6787: LD_ADDR_EXP 67
6791: PUSH
6792: LD_INT 1
6794: ST_TO_ADDR
// if p3 = 115 then
6795: LD_VAR 0 3
6799: PUSH
6800: LD_INT 115
6802: EQUAL
6803: IFFALSE 6813
// sRanger := true ;
6805: LD_ADDR_EXP 77
6809: PUSH
6810: LD_INT 1
6812: ST_TO_ADDR
// if p3 = 116 then
6813: LD_VAR 0 3
6817: PUSH
6818: LD_INT 116
6820: EQUAL
6821: IFFALSE 6831
// sComputer := true ;
6823: LD_ADDR_EXP 78
6827: PUSH
6828: LD_INT 1
6830: ST_TO_ADDR
// if p3 = 117 then
6831: LD_VAR 0 3
6835: PUSH
6836: LD_INT 117
6838: EQUAL
6839: IFFALSE 6849
// s30 := true ;
6841: LD_ADDR_EXP 79
6845: PUSH
6846: LD_INT 1
6848: ST_TO_ADDR
// if p3 = 118 then
6849: LD_VAR 0 3
6853: PUSH
6854: LD_INT 118
6856: EQUAL
6857: IFFALSE 6867
// s60 := true ;
6859: LD_ADDR_EXP 80
6863: PUSH
6864: LD_INT 1
6866: ST_TO_ADDR
// end ; if p2 = 101 then
6867: LD_VAR 0 2
6871: PUSH
6872: LD_INT 101
6874: EQUAL
6875: IFFALSE 7003
// begin case p3 of 1 :
6877: LD_VAR 0 3
6881: PUSH
6882: LD_INT 1
6884: DOUBLE
6885: EQUAL
6886: IFTRUE 6890
6888: GO 6897
6890: POP
// hHackUnlimitedResources ; 2 :
6891: CALL 19101 0 0
6895: GO 7003
6897: LD_INT 2
6899: DOUBLE
6900: EQUAL
6901: IFTRUE 6905
6903: GO 6912
6905: POP
// hHackSetLevel10 ; 3 :
6906: CALL 19234 0 0
6910: GO 7003
6912: LD_INT 3
6914: DOUBLE
6915: EQUAL
6916: IFTRUE 6920
6918: GO 6927
6920: POP
// hHackSetLevel10YourUnits ; 4 :
6921: CALL 19319 0 0
6925: GO 7003
6927: LD_INT 4
6929: DOUBLE
6930: EQUAL
6931: IFTRUE 6935
6933: GO 6942
6935: POP
// hHackInvincible ; 5 :
6936: CALL 19767 0 0
6940: GO 7003
6942: LD_INT 5
6944: DOUBLE
6945: EQUAL
6946: IFTRUE 6950
6948: GO 6957
6950: POP
// hHackInvisible ; 6 :
6951: CALL 19878 0 0
6955: GO 7003
6957: LD_INT 6
6959: DOUBLE
6960: EQUAL
6961: IFTRUE 6965
6963: GO 6972
6965: POP
// hHackChangeYourSide ; 7 :
6966: CALL 19935 0 0
6970: GO 7003
6972: LD_INT 7
6974: DOUBLE
6975: EQUAL
6976: IFTRUE 6980
6978: GO 6987
6980: POP
// hHackChangeUnitSide ; 8 :
6981: CALL 19977 0 0
6985: GO 7003
6987: LD_INT 8
6989: DOUBLE
6990: EQUAL
6991: IFTRUE 6995
6993: GO 7002
6995: POP
// hHackFog ; end ;
6996: CALL 20078 0 0
7000: GO 7003
7002: POP
// end ; end ;
7003: LD_VAR 0 7
7007: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7008: GO 7010
7010: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7011: LD_STRING initStreamRollete();
7013: PPUSH
7014: CALL_OW 559
// InitStreamMode ;
7018: CALL 7030 0 0
// DefineStreamItems ( false ) ;
7022: LD_INT 0
7024: PPUSH
7025: CALL 7494 0 1
// end ;
7029: END
// function InitStreamMode ; begin
7030: LD_INT 0
7032: PPUSH
// streamModeActive := false ;
7033: LD_ADDR_EXP 24
7037: PUSH
7038: LD_INT 0
7040: ST_TO_ADDR
// normalCounter := 36 ;
7041: LD_ADDR_EXP 25
7045: PUSH
7046: LD_INT 36
7048: ST_TO_ADDR
// hardcoreCounter := 18 ;
7049: LD_ADDR_EXP 26
7053: PUSH
7054: LD_INT 18
7056: ST_TO_ADDR
// sRocket := false ;
7057: LD_ADDR_EXP 29
7061: PUSH
7062: LD_INT 0
7064: ST_TO_ADDR
// sSpeed := false ;
7065: LD_ADDR_EXP 28
7069: PUSH
7070: LD_INT 0
7072: ST_TO_ADDR
// sEngine := false ;
7073: LD_ADDR_EXP 30
7077: PUSH
7078: LD_INT 0
7080: ST_TO_ADDR
// sSpec := false ;
7081: LD_ADDR_EXP 27
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
// sLevel := false ;
7089: LD_ADDR_EXP 31
7093: PUSH
7094: LD_INT 0
7096: ST_TO_ADDR
// sArmoury := false ;
7097: LD_ADDR_EXP 32
7101: PUSH
7102: LD_INT 0
7104: ST_TO_ADDR
// sRadar := false ;
7105: LD_ADDR_EXP 33
7109: PUSH
7110: LD_INT 0
7112: ST_TO_ADDR
// sBunker := false ;
7113: LD_ADDR_EXP 34
7117: PUSH
7118: LD_INT 0
7120: ST_TO_ADDR
// sHack := false ;
7121: LD_ADDR_EXP 35
7125: PUSH
7126: LD_INT 0
7128: ST_TO_ADDR
// sFire := false ;
7129: LD_ADDR_EXP 36
7133: PUSH
7134: LD_INT 0
7136: ST_TO_ADDR
// sRefresh := false ;
7137: LD_ADDR_EXP 37
7141: PUSH
7142: LD_INT 0
7144: ST_TO_ADDR
// sExp := false ;
7145: LD_ADDR_EXP 38
7149: PUSH
7150: LD_INT 0
7152: ST_TO_ADDR
// sDepot := false ;
7153: LD_ADDR_EXP 39
7157: PUSH
7158: LD_INT 0
7160: ST_TO_ADDR
// sFlag := false ;
7161: LD_ADDR_EXP 40
7165: PUSH
7166: LD_INT 0
7168: ST_TO_ADDR
// sKamikadze := false ;
7169: LD_ADDR_EXP 48
7173: PUSH
7174: LD_INT 0
7176: ST_TO_ADDR
// sTroll := false ;
7177: LD_ADDR_EXP 49
7181: PUSH
7182: LD_INT 0
7184: ST_TO_ADDR
// sSlow := false ;
7185: LD_ADDR_EXP 50
7189: PUSH
7190: LD_INT 0
7192: ST_TO_ADDR
// sLack := false ;
7193: LD_ADDR_EXP 51
7197: PUSH
7198: LD_INT 0
7200: ST_TO_ADDR
// sTank := false ;
7201: LD_ADDR_EXP 53
7205: PUSH
7206: LD_INT 0
7208: ST_TO_ADDR
// sRemote := false ;
7209: LD_ADDR_EXP 54
7213: PUSH
7214: LD_INT 0
7216: ST_TO_ADDR
// sPowell := false ;
7217: LD_ADDR_EXP 55
7221: PUSH
7222: LD_INT 0
7224: ST_TO_ADDR
// sTeleport := false ;
7225: LD_ADDR_EXP 58
7229: PUSH
7230: LD_INT 0
7232: ST_TO_ADDR
// sOilTower := false ;
7233: LD_ADDR_EXP 60
7237: PUSH
7238: LD_INT 0
7240: ST_TO_ADDR
// sShovel := false ;
7241: LD_ADDR_EXP 61
7245: PUSH
7246: LD_INT 0
7248: ST_TO_ADDR
// sSheik := false ;
7249: LD_ADDR_EXP 62
7253: PUSH
7254: LD_INT 0
7256: ST_TO_ADDR
// sEarthquake := false ;
7257: LD_ADDR_EXP 64
7261: PUSH
7262: LD_INT 0
7264: ST_TO_ADDR
// sAI := false ;
7265: LD_ADDR_EXP 65
7269: PUSH
7270: LD_INT 0
7272: ST_TO_ADDR
// sCargo := false ;
7273: LD_ADDR_EXP 68
7277: PUSH
7278: LD_INT 0
7280: ST_TO_ADDR
// sDLaser := false ;
7281: LD_ADDR_EXP 69
7285: PUSH
7286: LD_INT 0
7288: ST_TO_ADDR
// sExchange := false ;
7289: LD_ADDR_EXP 70
7293: PUSH
7294: LD_INT 0
7296: ST_TO_ADDR
// sFac := false ;
7297: LD_ADDR_EXP 71
7301: PUSH
7302: LD_INT 0
7304: ST_TO_ADDR
// sPower := false ;
7305: LD_ADDR_EXP 72
7309: PUSH
7310: LD_INT 0
7312: ST_TO_ADDR
// sRandom := false ;
7313: LD_ADDR_EXP 73
7317: PUSH
7318: LD_INT 0
7320: ST_TO_ADDR
// sShield := false ;
7321: LD_ADDR_EXP 74
7325: PUSH
7326: LD_INT 0
7328: ST_TO_ADDR
// sTime := false ;
7329: LD_ADDR_EXP 75
7333: PUSH
7334: LD_INT 0
7336: ST_TO_ADDR
// sTools := false ;
7337: LD_ADDR_EXP 76
7341: PUSH
7342: LD_INT 0
7344: ST_TO_ADDR
// sSold := false ;
7345: LD_ADDR_EXP 41
7349: PUSH
7350: LD_INT 0
7352: ST_TO_ADDR
// sDiff := false ;
7353: LD_ADDR_EXP 42
7357: PUSH
7358: LD_INT 0
7360: ST_TO_ADDR
// sFog := false ;
7361: LD_ADDR_EXP 45
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// sReset := false ;
7369: LD_ADDR_EXP 46
7373: PUSH
7374: LD_INT 0
7376: ST_TO_ADDR
// sSun := false ;
7377: LD_ADDR_EXP 47
7381: PUSH
7382: LD_INT 0
7384: ST_TO_ADDR
// sTiger := false ;
7385: LD_ADDR_EXP 43
7389: PUSH
7390: LD_INT 0
7392: ST_TO_ADDR
// sBomb := false ;
7393: LD_ADDR_EXP 44
7397: PUSH
7398: LD_INT 0
7400: ST_TO_ADDR
// sWound := false ;
7401: LD_ADDR_EXP 52
7405: PUSH
7406: LD_INT 0
7408: ST_TO_ADDR
// sBetray := false ;
7409: LD_ADDR_EXP 56
7413: PUSH
7414: LD_INT 0
7416: ST_TO_ADDR
// sContamin := false ;
7417: LD_ADDR_EXP 57
7421: PUSH
7422: LD_INT 0
7424: ST_TO_ADDR
// sOil := false ;
7425: LD_ADDR_EXP 59
7429: PUSH
7430: LD_INT 0
7432: ST_TO_ADDR
// sStu := false ;
7433: LD_ADDR_EXP 63
7437: PUSH
7438: LD_INT 0
7440: ST_TO_ADDR
// sBazooka := false ;
7441: LD_ADDR_EXP 66
7445: PUSH
7446: LD_INT 0
7448: ST_TO_ADDR
// sMortar := false ;
7449: LD_ADDR_EXP 67
7453: PUSH
7454: LD_INT 0
7456: ST_TO_ADDR
// sRanger := false ;
7457: LD_ADDR_EXP 77
7461: PUSH
7462: LD_INT 0
7464: ST_TO_ADDR
// sComputer := false ;
7465: LD_ADDR_EXP 78
7469: PUSH
7470: LD_INT 0
7472: ST_TO_ADDR
// s30 := false ;
7473: LD_ADDR_EXP 79
7477: PUSH
7478: LD_INT 0
7480: ST_TO_ADDR
// s60 := false ;
7481: LD_ADDR_EXP 80
7485: PUSH
7486: LD_INT 0
7488: ST_TO_ADDR
// end ;
7489: LD_VAR 0 1
7493: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7494: LD_INT 0
7496: PPUSH
7497: PPUSH
7498: PPUSH
7499: PPUSH
7500: PPUSH
7501: PPUSH
7502: PPUSH
// result := [ ] ;
7503: LD_ADDR_VAR 0 2
7507: PUSH
7508: EMPTY
7509: ST_TO_ADDR
// if campaign_id = 1 then
7510: LD_OWVAR 69
7514: PUSH
7515: LD_INT 1
7517: EQUAL
7518: IFFALSE 10684
// begin case mission_number of 1 :
7520: LD_OWVAR 70
7524: PUSH
7525: LD_INT 1
7527: DOUBLE
7528: EQUAL
7529: IFTRUE 7533
7531: GO 7609
7533: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7534: LD_ADDR_VAR 0 2
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 4
7544: PUSH
7545: LD_INT 11
7547: PUSH
7548: LD_INT 12
7550: PUSH
7551: LD_INT 15
7553: PUSH
7554: LD_INT 16
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_INT 23
7562: PUSH
7563: LD_INT 26
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 101
7579: PUSH
7580: LD_INT 102
7582: PUSH
7583: LD_INT 106
7585: PUSH
7586: LD_INT 116
7588: PUSH
7589: LD_INT 117
7591: PUSH
7592: LD_INT 118
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: ST_TO_ADDR
7607: GO 10682
7609: LD_INT 2
7611: DOUBLE
7612: EQUAL
7613: IFTRUE 7617
7615: GO 7701
7617: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7618: LD_ADDR_VAR 0 2
7622: PUSH
7623: LD_INT 2
7625: PUSH
7626: LD_INT 4
7628: PUSH
7629: LD_INT 11
7631: PUSH
7632: LD_INT 12
7634: PUSH
7635: LD_INT 15
7637: PUSH
7638: LD_INT 16
7640: PUSH
7641: LD_INT 22
7643: PUSH
7644: LD_INT 23
7646: PUSH
7647: LD_INT 26
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 101
7663: PUSH
7664: LD_INT 102
7666: PUSH
7667: LD_INT 105
7669: PUSH
7670: LD_INT 106
7672: PUSH
7673: LD_INT 108
7675: PUSH
7676: LD_INT 116
7678: PUSH
7679: LD_INT 117
7681: PUSH
7682: LD_INT 118
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: ST_TO_ADDR
7699: GO 10682
7701: LD_INT 3
7703: DOUBLE
7704: EQUAL
7705: IFTRUE 7709
7707: GO 7797
7709: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7710: LD_ADDR_VAR 0 2
7714: PUSH
7715: LD_INT 2
7717: PUSH
7718: LD_INT 4
7720: PUSH
7721: LD_INT 5
7723: PUSH
7724: LD_INT 11
7726: PUSH
7727: LD_INT 12
7729: PUSH
7730: LD_INT 15
7732: PUSH
7733: LD_INT 16
7735: PUSH
7736: LD_INT 22
7738: PUSH
7739: LD_INT 26
7741: PUSH
7742: LD_INT 36
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 101
7759: PUSH
7760: LD_INT 102
7762: PUSH
7763: LD_INT 105
7765: PUSH
7766: LD_INT 106
7768: PUSH
7769: LD_INT 108
7771: PUSH
7772: LD_INT 116
7774: PUSH
7775: LD_INT 117
7777: PUSH
7778: LD_INT 118
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: ST_TO_ADDR
7795: GO 10682
7797: LD_INT 4
7799: DOUBLE
7800: EQUAL
7801: IFTRUE 7805
7803: GO 7901
7805: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7806: LD_ADDR_VAR 0 2
7810: PUSH
7811: LD_INT 2
7813: PUSH
7814: LD_INT 4
7816: PUSH
7817: LD_INT 5
7819: PUSH
7820: LD_INT 8
7822: PUSH
7823: LD_INT 11
7825: PUSH
7826: LD_INT 12
7828: PUSH
7829: LD_INT 15
7831: PUSH
7832: LD_INT 16
7834: PUSH
7835: LD_INT 22
7837: PUSH
7838: LD_INT 23
7840: PUSH
7841: LD_INT 26
7843: PUSH
7844: LD_INT 36
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: PUSH
7861: LD_INT 101
7863: PUSH
7864: LD_INT 102
7866: PUSH
7867: LD_INT 105
7869: PUSH
7870: LD_INT 106
7872: PUSH
7873: LD_INT 108
7875: PUSH
7876: LD_INT 116
7878: PUSH
7879: LD_INT 117
7881: PUSH
7882: LD_INT 118
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: ST_TO_ADDR
7899: GO 10682
7901: LD_INT 5
7903: DOUBLE
7904: EQUAL
7905: IFTRUE 7909
7907: GO 8021
7909: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7910: LD_ADDR_VAR 0 2
7914: PUSH
7915: LD_INT 2
7917: PUSH
7918: LD_INT 4
7920: PUSH
7921: LD_INT 5
7923: PUSH
7924: LD_INT 6
7926: PUSH
7927: LD_INT 8
7929: PUSH
7930: LD_INT 11
7932: PUSH
7933: LD_INT 12
7935: PUSH
7936: LD_INT 15
7938: PUSH
7939: LD_INT 16
7941: PUSH
7942: LD_INT 22
7944: PUSH
7945: LD_INT 23
7947: PUSH
7948: LD_INT 25
7950: PUSH
7951: LD_INT 26
7953: PUSH
7954: LD_INT 36
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 101
7975: PUSH
7976: LD_INT 102
7978: PUSH
7979: LD_INT 105
7981: PUSH
7982: LD_INT 106
7984: PUSH
7985: LD_INT 108
7987: PUSH
7988: LD_INT 109
7990: PUSH
7991: LD_INT 112
7993: PUSH
7994: LD_INT 116
7996: PUSH
7997: LD_INT 117
7999: PUSH
8000: LD_INT 118
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: ST_TO_ADDR
8019: GO 10682
8021: LD_INT 6
8023: DOUBLE
8024: EQUAL
8025: IFTRUE 8029
8027: GO 8161
8029: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8030: LD_ADDR_VAR 0 2
8034: PUSH
8035: LD_INT 2
8037: PUSH
8038: LD_INT 4
8040: PUSH
8041: LD_INT 5
8043: PUSH
8044: LD_INT 6
8046: PUSH
8047: LD_INT 8
8049: PUSH
8050: LD_INT 11
8052: PUSH
8053: LD_INT 12
8055: PUSH
8056: LD_INT 15
8058: PUSH
8059: LD_INT 16
8061: PUSH
8062: LD_INT 20
8064: PUSH
8065: LD_INT 21
8067: PUSH
8068: LD_INT 22
8070: PUSH
8071: LD_INT 23
8073: PUSH
8074: LD_INT 25
8076: PUSH
8077: LD_INT 26
8079: PUSH
8080: LD_INT 30
8082: PUSH
8083: LD_INT 31
8085: PUSH
8086: LD_INT 32
8088: PUSH
8089: LD_INT 36
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 101
8115: PUSH
8116: LD_INT 102
8118: PUSH
8119: LD_INT 105
8121: PUSH
8122: LD_INT 106
8124: PUSH
8125: LD_INT 108
8127: PUSH
8128: LD_INT 109
8130: PUSH
8131: LD_INT 112
8133: PUSH
8134: LD_INT 116
8136: PUSH
8137: LD_INT 117
8139: PUSH
8140: LD_INT 118
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: ST_TO_ADDR
8159: GO 10682
8161: LD_INT 7
8163: DOUBLE
8164: EQUAL
8165: IFTRUE 8169
8167: GO 8281
8169: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8170: LD_ADDR_VAR 0 2
8174: PUSH
8175: LD_INT 2
8177: PUSH
8178: LD_INT 4
8180: PUSH
8181: LD_INT 5
8183: PUSH
8184: LD_INT 7
8186: PUSH
8187: LD_INT 11
8189: PUSH
8190: LD_INT 12
8192: PUSH
8193: LD_INT 15
8195: PUSH
8196: LD_INT 16
8198: PUSH
8199: LD_INT 20
8201: PUSH
8202: LD_INT 21
8204: PUSH
8205: LD_INT 22
8207: PUSH
8208: LD_INT 23
8210: PUSH
8211: LD_INT 25
8213: PUSH
8214: LD_INT 26
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: PUSH
8233: LD_INT 101
8235: PUSH
8236: LD_INT 102
8238: PUSH
8239: LD_INT 103
8241: PUSH
8242: LD_INT 105
8244: PUSH
8245: LD_INT 106
8247: PUSH
8248: LD_INT 108
8250: PUSH
8251: LD_INT 112
8253: PUSH
8254: LD_INT 116
8256: PUSH
8257: LD_INT 117
8259: PUSH
8260: LD_INT 118
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: ST_TO_ADDR
8279: GO 10682
8281: LD_INT 8
8283: DOUBLE
8284: EQUAL
8285: IFTRUE 8289
8287: GO 8429
8289: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8290: LD_ADDR_VAR 0 2
8294: PUSH
8295: LD_INT 2
8297: PUSH
8298: LD_INT 4
8300: PUSH
8301: LD_INT 5
8303: PUSH
8304: LD_INT 6
8306: PUSH
8307: LD_INT 7
8309: PUSH
8310: LD_INT 8
8312: PUSH
8313: LD_INT 11
8315: PUSH
8316: LD_INT 12
8318: PUSH
8319: LD_INT 15
8321: PUSH
8322: LD_INT 16
8324: PUSH
8325: LD_INT 20
8327: PUSH
8328: LD_INT 21
8330: PUSH
8331: LD_INT 22
8333: PUSH
8334: LD_INT 23
8336: PUSH
8337: LD_INT 25
8339: PUSH
8340: LD_INT 26
8342: PUSH
8343: LD_INT 30
8345: PUSH
8346: LD_INT 31
8348: PUSH
8349: LD_INT 32
8351: PUSH
8352: LD_INT 36
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: PUSH
8377: LD_INT 101
8379: PUSH
8380: LD_INT 102
8382: PUSH
8383: LD_INT 103
8385: PUSH
8386: LD_INT 105
8388: PUSH
8389: LD_INT 106
8391: PUSH
8392: LD_INT 108
8394: PUSH
8395: LD_INT 109
8397: PUSH
8398: LD_INT 112
8400: PUSH
8401: LD_INT 116
8403: PUSH
8404: LD_INT 117
8406: PUSH
8407: LD_INT 118
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: ST_TO_ADDR
8427: GO 10682
8429: LD_INT 9
8431: DOUBLE
8432: EQUAL
8433: IFTRUE 8437
8435: GO 8585
8437: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8438: LD_ADDR_VAR 0 2
8442: PUSH
8443: LD_INT 2
8445: PUSH
8446: LD_INT 4
8448: PUSH
8449: LD_INT 5
8451: PUSH
8452: LD_INT 6
8454: PUSH
8455: LD_INT 7
8457: PUSH
8458: LD_INT 8
8460: PUSH
8461: LD_INT 11
8463: PUSH
8464: LD_INT 12
8466: PUSH
8467: LD_INT 15
8469: PUSH
8470: LD_INT 16
8472: PUSH
8473: LD_INT 20
8475: PUSH
8476: LD_INT 21
8478: PUSH
8479: LD_INT 22
8481: PUSH
8482: LD_INT 23
8484: PUSH
8485: LD_INT 25
8487: PUSH
8488: LD_INT 26
8490: PUSH
8491: LD_INT 28
8493: PUSH
8494: LD_INT 30
8496: PUSH
8497: LD_INT 31
8499: PUSH
8500: LD_INT 32
8502: PUSH
8503: LD_INT 36
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 101
8531: PUSH
8532: LD_INT 102
8534: PUSH
8535: LD_INT 103
8537: PUSH
8538: LD_INT 105
8540: PUSH
8541: LD_INT 106
8543: PUSH
8544: LD_INT 108
8546: PUSH
8547: LD_INT 109
8549: PUSH
8550: LD_INT 112
8552: PUSH
8553: LD_INT 114
8555: PUSH
8556: LD_INT 116
8558: PUSH
8559: LD_INT 117
8561: PUSH
8562: LD_INT 118
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: ST_TO_ADDR
8583: GO 10682
8585: LD_INT 10
8587: DOUBLE
8588: EQUAL
8589: IFTRUE 8593
8591: GO 8789
8593: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8594: LD_ADDR_VAR 0 2
8598: PUSH
8599: LD_INT 2
8601: PUSH
8602: LD_INT 4
8604: PUSH
8605: LD_INT 5
8607: PUSH
8608: LD_INT 6
8610: PUSH
8611: LD_INT 7
8613: PUSH
8614: LD_INT 8
8616: PUSH
8617: LD_INT 9
8619: PUSH
8620: LD_INT 10
8622: PUSH
8623: LD_INT 11
8625: PUSH
8626: LD_INT 12
8628: PUSH
8629: LD_INT 13
8631: PUSH
8632: LD_INT 14
8634: PUSH
8635: LD_INT 15
8637: PUSH
8638: LD_INT 16
8640: PUSH
8641: LD_INT 17
8643: PUSH
8644: LD_INT 18
8646: PUSH
8647: LD_INT 19
8649: PUSH
8650: LD_INT 20
8652: PUSH
8653: LD_INT 21
8655: PUSH
8656: LD_INT 22
8658: PUSH
8659: LD_INT 23
8661: PUSH
8662: LD_INT 24
8664: PUSH
8665: LD_INT 25
8667: PUSH
8668: LD_INT 26
8670: PUSH
8671: LD_INT 28
8673: PUSH
8674: LD_INT 30
8676: PUSH
8677: LD_INT 31
8679: PUSH
8680: LD_INT 32
8682: PUSH
8683: LD_INT 36
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 101
8719: PUSH
8720: LD_INT 102
8722: PUSH
8723: LD_INT 103
8725: PUSH
8726: LD_INT 104
8728: PUSH
8729: LD_INT 105
8731: PUSH
8732: LD_INT 106
8734: PUSH
8735: LD_INT 107
8737: PUSH
8738: LD_INT 108
8740: PUSH
8741: LD_INT 109
8743: PUSH
8744: LD_INT 110
8746: PUSH
8747: LD_INT 111
8749: PUSH
8750: LD_INT 112
8752: PUSH
8753: LD_INT 114
8755: PUSH
8756: LD_INT 116
8758: PUSH
8759: LD_INT 117
8761: PUSH
8762: LD_INT 118
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: ST_TO_ADDR
8787: GO 10682
8789: LD_INT 11
8791: DOUBLE
8792: EQUAL
8793: IFTRUE 8797
8795: GO 9001
8797: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8798: LD_ADDR_VAR 0 2
8802: PUSH
8803: LD_INT 2
8805: PUSH
8806: LD_INT 3
8808: PUSH
8809: LD_INT 4
8811: PUSH
8812: LD_INT 5
8814: PUSH
8815: LD_INT 6
8817: PUSH
8818: LD_INT 7
8820: PUSH
8821: LD_INT 8
8823: PUSH
8824: LD_INT 9
8826: PUSH
8827: LD_INT 10
8829: PUSH
8830: LD_INT 11
8832: PUSH
8833: LD_INT 12
8835: PUSH
8836: LD_INT 13
8838: PUSH
8839: LD_INT 14
8841: PUSH
8842: LD_INT 15
8844: PUSH
8845: LD_INT 16
8847: PUSH
8848: LD_INT 17
8850: PUSH
8851: LD_INT 18
8853: PUSH
8854: LD_INT 19
8856: PUSH
8857: LD_INT 20
8859: PUSH
8860: LD_INT 21
8862: PUSH
8863: LD_INT 22
8865: PUSH
8866: LD_INT 23
8868: PUSH
8869: LD_INT 24
8871: PUSH
8872: LD_INT 25
8874: PUSH
8875: LD_INT 26
8877: PUSH
8878: LD_INT 28
8880: PUSH
8881: LD_INT 30
8883: PUSH
8884: LD_INT 31
8886: PUSH
8887: LD_INT 32
8889: PUSH
8890: LD_INT 34
8892: PUSH
8893: LD_INT 36
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 101
8931: PUSH
8932: LD_INT 102
8934: PUSH
8935: LD_INT 103
8937: PUSH
8938: LD_INT 104
8940: PUSH
8941: LD_INT 105
8943: PUSH
8944: LD_INT 106
8946: PUSH
8947: LD_INT 107
8949: PUSH
8950: LD_INT 108
8952: PUSH
8953: LD_INT 109
8955: PUSH
8956: LD_INT 110
8958: PUSH
8959: LD_INT 111
8961: PUSH
8962: LD_INT 112
8964: PUSH
8965: LD_INT 114
8967: PUSH
8968: LD_INT 116
8970: PUSH
8971: LD_INT 117
8973: PUSH
8974: LD_INT 118
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: ST_TO_ADDR
8999: GO 10682
9001: LD_INT 12
9003: DOUBLE
9004: EQUAL
9005: IFTRUE 9009
9007: GO 9229
9009: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9010: LD_ADDR_VAR 0 2
9014: PUSH
9015: LD_INT 1
9017: PUSH
9018: LD_INT 2
9020: PUSH
9021: LD_INT 3
9023: PUSH
9024: LD_INT 4
9026: PUSH
9027: LD_INT 5
9029: PUSH
9030: LD_INT 6
9032: PUSH
9033: LD_INT 7
9035: PUSH
9036: LD_INT 8
9038: PUSH
9039: LD_INT 9
9041: PUSH
9042: LD_INT 10
9044: PUSH
9045: LD_INT 11
9047: PUSH
9048: LD_INT 12
9050: PUSH
9051: LD_INT 13
9053: PUSH
9054: LD_INT 14
9056: PUSH
9057: LD_INT 15
9059: PUSH
9060: LD_INT 16
9062: PUSH
9063: LD_INT 17
9065: PUSH
9066: LD_INT 18
9068: PUSH
9069: LD_INT 19
9071: PUSH
9072: LD_INT 20
9074: PUSH
9075: LD_INT 21
9077: PUSH
9078: LD_INT 22
9080: PUSH
9081: LD_INT 23
9083: PUSH
9084: LD_INT 24
9086: PUSH
9087: LD_INT 25
9089: PUSH
9090: LD_INT 26
9092: PUSH
9093: LD_INT 27
9095: PUSH
9096: LD_INT 28
9098: PUSH
9099: LD_INT 30
9101: PUSH
9102: LD_INT 31
9104: PUSH
9105: LD_INT 32
9107: PUSH
9108: LD_INT 33
9110: PUSH
9111: LD_INT 34
9113: PUSH
9114: LD_INT 36
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: PUSH
9153: LD_INT 101
9155: PUSH
9156: LD_INT 102
9158: PUSH
9159: LD_INT 103
9161: PUSH
9162: LD_INT 104
9164: PUSH
9165: LD_INT 105
9167: PUSH
9168: LD_INT 106
9170: PUSH
9171: LD_INT 107
9173: PUSH
9174: LD_INT 108
9176: PUSH
9177: LD_INT 109
9179: PUSH
9180: LD_INT 110
9182: PUSH
9183: LD_INT 111
9185: PUSH
9186: LD_INT 112
9188: PUSH
9189: LD_INT 113
9191: PUSH
9192: LD_INT 114
9194: PUSH
9195: LD_INT 116
9197: PUSH
9198: LD_INT 117
9200: PUSH
9201: LD_INT 118
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: ST_TO_ADDR
9227: GO 10682
9229: LD_INT 13
9231: DOUBLE
9232: EQUAL
9233: IFTRUE 9237
9235: GO 9445
9237: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9238: LD_ADDR_VAR 0 2
9242: PUSH
9243: LD_INT 1
9245: PUSH
9246: LD_INT 2
9248: PUSH
9249: LD_INT 3
9251: PUSH
9252: LD_INT 4
9254: PUSH
9255: LD_INT 5
9257: PUSH
9258: LD_INT 8
9260: PUSH
9261: LD_INT 9
9263: PUSH
9264: LD_INT 10
9266: PUSH
9267: LD_INT 11
9269: PUSH
9270: LD_INT 12
9272: PUSH
9273: LD_INT 14
9275: PUSH
9276: LD_INT 15
9278: PUSH
9279: LD_INT 16
9281: PUSH
9282: LD_INT 17
9284: PUSH
9285: LD_INT 18
9287: PUSH
9288: LD_INT 19
9290: PUSH
9291: LD_INT 20
9293: PUSH
9294: LD_INT 21
9296: PUSH
9297: LD_INT 22
9299: PUSH
9300: LD_INT 23
9302: PUSH
9303: LD_INT 24
9305: PUSH
9306: LD_INT 25
9308: PUSH
9309: LD_INT 26
9311: PUSH
9312: LD_INT 27
9314: PUSH
9315: LD_INT 28
9317: PUSH
9318: LD_INT 30
9320: PUSH
9321: LD_INT 31
9323: PUSH
9324: LD_INT 32
9326: PUSH
9327: LD_INT 33
9329: PUSH
9330: LD_INT 34
9332: PUSH
9333: LD_INT 36
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 101
9371: PUSH
9372: LD_INT 102
9374: PUSH
9375: LD_INT 103
9377: PUSH
9378: LD_INT 104
9380: PUSH
9381: LD_INT 105
9383: PUSH
9384: LD_INT 106
9386: PUSH
9387: LD_INT 107
9389: PUSH
9390: LD_INT 108
9392: PUSH
9393: LD_INT 109
9395: PUSH
9396: LD_INT 110
9398: PUSH
9399: LD_INT 111
9401: PUSH
9402: LD_INT 112
9404: PUSH
9405: LD_INT 113
9407: PUSH
9408: LD_INT 114
9410: PUSH
9411: LD_INT 116
9413: PUSH
9414: LD_INT 117
9416: PUSH
9417: LD_INT 118
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: ST_TO_ADDR
9443: GO 10682
9445: LD_INT 14
9447: DOUBLE
9448: EQUAL
9449: IFTRUE 9453
9451: GO 9677
9453: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9454: LD_ADDR_VAR 0 2
9458: PUSH
9459: LD_INT 1
9461: PUSH
9462: LD_INT 2
9464: PUSH
9465: LD_INT 3
9467: PUSH
9468: LD_INT 4
9470: PUSH
9471: LD_INT 5
9473: PUSH
9474: LD_INT 6
9476: PUSH
9477: LD_INT 7
9479: PUSH
9480: LD_INT 8
9482: PUSH
9483: LD_INT 9
9485: PUSH
9486: LD_INT 10
9488: PUSH
9489: LD_INT 11
9491: PUSH
9492: LD_INT 12
9494: PUSH
9495: LD_INT 13
9497: PUSH
9498: LD_INT 14
9500: PUSH
9501: LD_INT 15
9503: PUSH
9504: LD_INT 16
9506: PUSH
9507: LD_INT 17
9509: PUSH
9510: LD_INT 18
9512: PUSH
9513: LD_INT 19
9515: PUSH
9516: LD_INT 20
9518: PUSH
9519: LD_INT 21
9521: PUSH
9522: LD_INT 22
9524: PUSH
9525: LD_INT 23
9527: PUSH
9528: LD_INT 24
9530: PUSH
9531: LD_INT 25
9533: PUSH
9534: LD_INT 26
9536: PUSH
9537: LD_INT 27
9539: PUSH
9540: LD_INT 28
9542: PUSH
9543: LD_INT 29
9545: PUSH
9546: LD_INT 30
9548: PUSH
9549: LD_INT 31
9551: PUSH
9552: LD_INT 32
9554: PUSH
9555: LD_INT 33
9557: PUSH
9558: LD_INT 34
9560: PUSH
9561: LD_INT 36
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 101
9603: PUSH
9604: LD_INT 102
9606: PUSH
9607: LD_INT 103
9609: PUSH
9610: LD_INT 104
9612: PUSH
9613: LD_INT 105
9615: PUSH
9616: LD_INT 106
9618: PUSH
9619: LD_INT 107
9621: PUSH
9622: LD_INT 108
9624: PUSH
9625: LD_INT 109
9627: PUSH
9628: LD_INT 110
9630: PUSH
9631: LD_INT 111
9633: PUSH
9634: LD_INT 112
9636: PUSH
9637: LD_INT 113
9639: PUSH
9640: LD_INT 114
9642: PUSH
9643: LD_INT 116
9645: PUSH
9646: LD_INT 117
9648: PUSH
9649: LD_INT 118
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: ST_TO_ADDR
9675: GO 10682
9677: LD_INT 15
9679: DOUBLE
9680: EQUAL
9681: IFTRUE 9685
9683: GO 9909
9685: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9686: LD_ADDR_VAR 0 2
9690: PUSH
9691: LD_INT 1
9693: PUSH
9694: LD_INT 2
9696: PUSH
9697: LD_INT 3
9699: PUSH
9700: LD_INT 4
9702: PUSH
9703: LD_INT 5
9705: PUSH
9706: LD_INT 6
9708: PUSH
9709: LD_INT 7
9711: PUSH
9712: LD_INT 8
9714: PUSH
9715: LD_INT 9
9717: PUSH
9718: LD_INT 10
9720: PUSH
9721: LD_INT 11
9723: PUSH
9724: LD_INT 12
9726: PUSH
9727: LD_INT 13
9729: PUSH
9730: LD_INT 14
9732: PUSH
9733: LD_INT 15
9735: PUSH
9736: LD_INT 16
9738: PUSH
9739: LD_INT 17
9741: PUSH
9742: LD_INT 18
9744: PUSH
9745: LD_INT 19
9747: PUSH
9748: LD_INT 20
9750: PUSH
9751: LD_INT 21
9753: PUSH
9754: LD_INT 22
9756: PUSH
9757: LD_INT 23
9759: PUSH
9760: LD_INT 24
9762: PUSH
9763: LD_INT 25
9765: PUSH
9766: LD_INT 26
9768: PUSH
9769: LD_INT 27
9771: PUSH
9772: LD_INT 28
9774: PUSH
9775: LD_INT 29
9777: PUSH
9778: LD_INT 30
9780: PUSH
9781: LD_INT 31
9783: PUSH
9784: LD_INT 32
9786: PUSH
9787: LD_INT 33
9789: PUSH
9790: LD_INT 34
9792: PUSH
9793: LD_INT 36
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 101
9835: PUSH
9836: LD_INT 102
9838: PUSH
9839: LD_INT 103
9841: PUSH
9842: LD_INT 104
9844: PUSH
9845: LD_INT 105
9847: PUSH
9848: LD_INT 106
9850: PUSH
9851: LD_INT 107
9853: PUSH
9854: LD_INT 108
9856: PUSH
9857: LD_INT 109
9859: PUSH
9860: LD_INT 110
9862: PUSH
9863: LD_INT 111
9865: PUSH
9866: LD_INT 112
9868: PUSH
9869: LD_INT 113
9871: PUSH
9872: LD_INT 114
9874: PUSH
9875: LD_INT 116
9877: PUSH
9878: LD_INT 117
9880: PUSH
9881: LD_INT 118
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: ST_TO_ADDR
9907: GO 10682
9909: LD_INT 16
9911: DOUBLE
9912: EQUAL
9913: IFTRUE 9917
9915: GO 10053
9917: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9918: LD_ADDR_VAR 0 2
9922: PUSH
9923: LD_INT 2
9925: PUSH
9926: LD_INT 4
9928: PUSH
9929: LD_INT 5
9931: PUSH
9932: LD_INT 7
9934: PUSH
9935: LD_INT 11
9937: PUSH
9938: LD_INT 12
9940: PUSH
9941: LD_INT 15
9943: PUSH
9944: LD_INT 16
9946: PUSH
9947: LD_INT 20
9949: PUSH
9950: LD_INT 21
9952: PUSH
9953: LD_INT 22
9955: PUSH
9956: LD_INT 23
9958: PUSH
9959: LD_INT 25
9961: PUSH
9962: LD_INT 26
9964: PUSH
9965: LD_INT 30
9967: PUSH
9968: LD_INT 31
9970: PUSH
9971: LD_INT 32
9973: PUSH
9974: LD_INT 33
9976: PUSH
9977: LD_INT 34
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 101
10003: PUSH
10004: LD_INT 102
10006: PUSH
10007: LD_INT 103
10009: PUSH
10010: LD_INT 106
10012: PUSH
10013: LD_INT 108
10015: PUSH
10016: LD_INT 112
10018: PUSH
10019: LD_INT 113
10021: PUSH
10022: LD_INT 114
10024: PUSH
10025: LD_INT 116
10027: PUSH
10028: LD_INT 117
10030: PUSH
10031: LD_INT 118
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: ST_TO_ADDR
10051: GO 10682
10053: LD_INT 17
10055: DOUBLE
10056: EQUAL
10057: IFTRUE 10061
10059: GO 10285
10061: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10062: LD_ADDR_VAR 0 2
10066: PUSH
10067: LD_INT 1
10069: PUSH
10070: LD_INT 2
10072: PUSH
10073: LD_INT 3
10075: PUSH
10076: LD_INT 4
10078: PUSH
10079: LD_INT 5
10081: PUSH
10082: LD_INT 6
10084: PUSH
10085: LD_INT 7
10087: PUSH
10088: LD_INT 8
10090: PUSH
10091: LD_INT 9
10093: PUSH
10094: LD_INT 10
10096: PUSH
10097: LD_INT 11
10099: PUSH
10100: LD_INT 12
10102: PUSH
10103: LD_INT 13
10105: PUSH
10106: LD_INT 14
10108: PUSH
10109: LD_INT 15
10111: PUSH
10112: LD_INT 16
10114: PUSH
10115: LD_INT 17
10117: PUSH
10118: LD_INT 18
10120: PUSH
10121: LD_INT 19
10123: PUSH
10124: LD_INT 20
10126: PUSH
10127: LD_INT 21
10129: PUSH
10130: LD_INT 22
10132: PUSH
10133: LD_INT 23
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 25
10141: PUSH
10142: LD_INT 26
10144: PUSH
10145: LD_INT 27
10147: PUSH
10148: LD_INT 28
10150: PUSH
10151: LD_INT 29
10153: PUSH
10154: LD_INT 30
10156: PUSH
10157: LD_INT 31
10159: PUSH
10160: LD_INT 32
10162: PUSH
10163: LD_INT 33
10165: PUSH
10166: LD_INT 34
10168: PUSH
10169: LD_INT 36
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 101
10211: PUSH
10212: LD_INT 102
10214: PUSH
10215: LD_INT 103
10217: PUSH
10218: LD_INT 104
10220: PUSH
10221: LD_INT 105
10223: PUSH
10224: LD_INT 106
10226: PUSH
10227: LD_INT 107
10229: PUSH
10230: LD_INT 108
10232: PUSH
10233: LD_INT 109
10235: PUSH
10236: LD_INT 110
10238: PUSH
10239: LD_INT 111
10241: PUSH
10242: LD_INT 112
10244: PUSH
10245: LD_INT 113
10247: PUSH
10248: LD_INT 114
10250: PUSH
10251: LD_INT 116
10253: PUSH
10254: LD_INT 117
10256: PUSH
10257: LD_INT 118
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: ST_TO_ADDR
10283: GO 10682
10285: LD_INT 18
10287: DOUBLE
10288: EQUAL
10289: IFTRUE 10293
10291: GO 10441
10293: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10294: LD_ADDR_VAR 0 2
10298: PUSH
10299: LD_INT 2
10301: PUSH
10302: LD_INT 4
10304: PUSH
10305: LD_INT 5
10307: PUSH
10308: LD_INT 7
10310: PUSH
10311: LD_INT 11
10313: PUSH
10314: LD_INT 12
10316: PUSH
10317: LD_INT 15
10319: PUSH
10320: LD_INT 16
10322: PUSH
10323: LD_INT 20
10325: PUSH
10326: LD_INT 21
10328: PUSH
10329: LD_INT 22
10331: PUSH
10332: LD_INT 23
10334: PUSH
10335: LD_INT 25
10337: PUSH
10338: LD_INT 26
10340: PUSH
10341: LD_INT 30
10343: PUSH
10344: LD_INT 31
10346: PUSH
10347: LD_INT 32
10349: PUSH
10350: LD_INT 33
10352: PUSH
10353: LD_INT 34
10355: PUSH
10356: LD_INT 35
10358: PUSH
10359: LD_INT 36
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 101
10387: PUSH
10388: LD_INT 102
10390: PUSH
10391: LD_INT 103
10393: PUSH
10394: LD_INT 106
10396: PUSH
10397: LD_INT 108
10399: PUSH
10400: LD_INT 112
10402: PUSH
10403: LD_INT 113
10405: PUSH
10406: LD_INT 114
10408: PUSH
10409: LD_INT 115
10411: PUSH
10412: LD_INT 116
10414: PUSH
10415: LD_INT 117
10417: PUSH
10418: LD_INT 118
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: ST_TO_ADDR
10439: GO 10682
10441: LD_INT 19
10443: DOUBLE
10444: EQUAL
10445: IFTRUE 10449
10447: GO 10681
10449: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10450: LD_ADDR_VAR 0 2
10454: PUSH
10455: LD_INT 1
10457: PUSH
10458: LD_INT 2
10460: PUSH
10461: LD_INT 3
10463: PUSH
10464: LD_INT 4
10466: PUSH
10467: LD_INT 5
10469: PUSH
10470: LD_INT 6
10472: PUSH
10473: LD_INT 7
10475: PUSH
10476: LD_INT 8
10478: PUSH
10479: LD_INT 9
10481: PUSH
10482: LD_INT 10
10484: PUSH
10485: LD_INT 11
10487: PUSH
10488: LD_INT 12
10490: PUSH
10491: LD_INT 13
10493: PUSH
10494: LD_INT 14
10496: PUSH
10497: LD_INT 15
10499: PUSH
10500: LD_INT 16
10502: PUSH
10503: LD_INT 17
10505: PUSH
10506: LD_INT 18
10508: PUSH
10509: LD_INT 19
10511: PUSH
10512: LD_INT 20
10514: PUSH
10515: LD_INT 21
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_INT 23
10523: PUSH
10524: LD_INT 24
10526: PUSH
10527: LD_INT 25
10529: PUSH
10530: LD_INT 26
10532: PUSH
10533: LD_INT 27
10535: PUSH
10536: LD_INT 28
10538: PUSH
10539: LD_INT 29
10541: PUSH
10542: LD_INT 30
10544: PUSH
10545: LD_INT 31
10547: PUSH
10548: LD_INT 32
10550: PUSH
10551: LD_INT 33
10553: PUSH
10554: LD_INT 34
10556: PUSH
10557: LD_INT 35
10559: PUSH
10560: LD_INT 36
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 101
10603: PUSH
10604: LD_INT 102
10606: PUSH
10607: LD_INT 103
10609: PUSH
10610: LD_INT 104
10612: PUSH
10613: LD_INT 105
10615: PUSH
10616: LD_INT 106
10618: PUSH
10619: LD_INT 107
10621: PUSH
10622: LD_INT 108
10624: PUSH
10625: LD_INT 109
10627: PUSH
10628: LD_INT 110
10630: PUSH
10631: LD_INT 111
10633: PUSH
10634: LD_INT 112
10636: PUSH
10637: LD_INT 113
10639: PUSH
10640: LD_INT 114
10642: PUSH
10643: LD_INT 115
10645: PUSH
10646: LD_INT 116
10648: PUSH
10649: LD_INT 117
10651: PUSH
10652: LD_INT 118
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: ST_TO_ADDR
10679: GO 10682
10681: POP
// end else
10682: GO 10913
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10684: LD_ADDR_VAR 0 2
10688: PUSH
10689: LD_INT 1
10691: PUSH
10692: LD_INT 2
10694: PUSH
10695: LD_INT 3
10697: PUSH
10698: LD_INT 4
10700: PUSH
10701: LD_INT 5
10703: PUSH
10704: LD_INT 6
10706: PUSH
10707: LD_INT 7
10709: PUSH
10710: LD_INT 8
10712: PUSH
10713: LD_INT 9
10715: PUSH
10716: LD_INT 10
10718: PUSH
10719: LD_INT 11
10721: PUSH
10722: LD_INT 12
10724: PUSH
10725: LD_INT 13
10727: PUSH
10728: LD_INT 14
10730: PUSH
10731: LD_INT 15
10733: PUSH
10734: LD_INT 16
10736: PUSH
10737: LD_INT 17
10739: PUSH
10740: LD_INT 18
10742: PUSH
10743: LD_INT 19
10745: PUSH
10746: LD_INT 20
10748: PUSH
10749: LD_INT 21
10751: PUSH
10752: LD_INT 22
10754: PUSH
10755: LD_INT 23
10757: PUSH
10758: LD_INT 24
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 26
10766: PUSH
10767: LD_INT 27
10769: PUSH
10770: LD_INT 28
10772: PUSH
10773: LD_INT 29
10775: PUSH
10776: LD_INT 30
10778: PUSH
10779: LD_INT 31
10781: PUSH
10782: LD_INT 32
10784: PUSH
10785: LD_INT 33
10787: PUSH
10788: LD_INT 34
10790: PUSH
10791: LD_INT 35
10793: PUSH
10794: LD_INT 36
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 101
10837: PUSH
10838: LD_INT 102
10840: PUSH
10841: LD_INT 103
10843: PUSH
10844: LD_INT 104
10846: PUSH
10847: LD_INT 105
10849: PUSH
10850: LD_INT 106
10852: PUSH
10853: LD_INT 107
10855: PUSH
10856: LD_INT 108
10858: PUSH
10859: LD_INT 109
10861: PUSH
10862: LD_INT 110
10864: PUSH
10865: LD_INT 111
10867: PUSH
10868: LD_INT 112
10870: PUSH
10871: LD_INT 113
10873: PUSH
10874: LD_INT 114
10876: PUSH
10877: LD_INT 115
10879: PUSH
10880: LD_INT 116
10882: PUSH
10883: LD_INT 117
10885: PUSH
10886: LD_INT 118
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: ST_TO_ADDR
// if result then
10913: LD_VAR 0 2
10917: IFFALSE 11703
// begin normal :=  ;
10919: LD_ADDR_VAR 0 5
10923: PUSH
10924: LD_STRING 
10926: ST_TO_ADDR
// hardcore :=  ;
10927: LD_ADDR_VAR 0 6
10931: PUSH
10932: LD_STRING 
10934: ST_TO_ADDR
// active :=  ;
10935: LD_ADDR_VAR 0 7
10939: PUSH
10940: LD_STRING 
10942: ST_TO_ADDR
// for i = 1 to normalCounter do
10943: LD_ADDR_VAR 0 8
10947: PUSH
10948: DOUBLE
10949: LD_INT 1
10951: DEC
10952: ST_TO_ADDR
10953: LD_EXP 25
10957: PUSH
10958: FOR_TO
10959: IFFALSE 11060
// begin tmp := 0 ;
10961: LD_ADDR_VAR 0 3
10965: PUSH
10966: LD_STRING 0
10968: ST_TO_ADDR
// if result [ 1 ] then
10969: LD_VAR 0 2
10973: PUSH
10974: LD_INT 1
10976: ARRAY
10977: IFFALSE 11042
// if result [ 1 ] [ 1 ] = i then
10979: LD_VAR 0 2
10983: PUSH
10984: LD_INT 1
10986: ARRAY
10987: PUSH
10988: LD_INT 1
10990: ARRAY
10991: PUSH
10992: LD_VAR 0 8
10996: EQUAL
10997: IFFALSE 11042
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_VAR 0 2
11008: PPUSH
11009: LD_INT 1
11011: PPUSH
11012: LD_VAR 0 2
11016: PUSH
11017: LD_INT 1
11019: ARRAY
11020: PPUSH
11021: LD_INT 1
11023: PPUSH
11024: CALL_OW 3
11028: PPUSH
11029: CALL_OW 1
11033: ST_TO_ADDR
// tmp := 1 ;
11034: LD_ADDR_VAR 0 3
11038: PUSH
11039: LD_STRING 1
11041: ST_TO_ADDR
// end ; normal := normal & tmp ;
11042: LD_ADDR_VAR 0 5
11046: PUSH
11047: LD_VAR 0 5
11051: PUSH
11052: LD_VAR 0 3
11056: STR
11057: ST_TO_ADDR
// end ;
11058: GO 10958
11060: POP
11061: POP
// for i = 1 to hardcoreCounter do
11062: LD_ADDR_VAR 0 8
11066: PUSH
11067: DOUBLE
11068: LD_INT 1
11070: DEC
11071: ST_TO_ADDR
11072: LD_EXP 26
11076: PUSH
11077: FOR_TO
11078: IFFALSE 11183
// begin tmp := 0 ;
11080: LD_ADDR_VAR 0 3
11084: PUSH
11085: LD_STRING 0
11087: ST_TO_ADDR
// if result [ 2 ] then
11088: LD_VAR 0 2
11092: PUSH
11093: LD_INT 2
11095: ARRAY
11096: IFFALSE 11165
// if result [ 2 ] [ 1 ] = 100 + i then
11098: LD_VAR 0 2
11102: PUSH
11103: LD_INT 2
11105: ARRAY
11106: PUSH
11107: LD_INT 1
11109: ARRAY
11110: PUSH
11111: LD_INT 100
11113: PUSH
11114: LD_VAR 0 8
11118: PLUS
11119: EQUAL
11120: IFFALSE 11165
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11122: LD_ADDR_VAR 0 2
11126: PUSH
11127: LD_VAR 0 2
11131: PPUSH
11132: LD_INT 2
11134: PPUSH
11135: LD_VAR 0 2
11139: PUSH
11140: LD_INT 2
11142: ARRAY
11143: PPUSH
11144: LD_INT 1
11146: PPUSH
11147: CALL_OW 3
11151: PPUSH
11152: CALL_OW 1
11156: ST_TO_ADDR
// tmp := 1 ;
11157: LD_ADDR_VAR 0 3
11161: PUSH
11162: LD_STRING 1
11164: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11165: LD_ADDR_VAR 0 6
11169: PUSH
11170: LD_VAR 0 6
11174: PUSH
11175: LD_VAR 0 3
11179: STR
11180: ST_TO_ADDR
// end ;
11181: GO 11077
11183: POP
11184: POP
// if isGameLoad then
11185: LD_VAR 0 1
11189: IFFALSE 11664
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11191: LD_ADDR_VAR 0 4
11195: PUSH
11196: LD_EXP 29
11200: PUSH
11201: LD_EXP 28
11205: PUSH
11206: LD_EXP 30
11210: PUSH
11211: LD_EXP 27
11215: PUSH
11216: LD_EXP 31
11220: PUSH
11221: LD_EXP 32
11225: PUSH
11226: LD_EXP 33
11230: PUSH
11231: LD_EXP 34
11235: PUSH
11236: LD_EXP 35
11240: PUSH
11241: LD_EXP 36
11245: PUSH
11246: LD_EXP 37
11250: PUSH
11251: LD_EXP 38
11255: PUSH
11256: LD_EXP 39
11260: PUSH
11261: LD_EXP 40
11265: PUSH
11266: LD_EXP 48
11270: PUSH
11271: LD_EXP 49
11275: PUSH
11276: LD_EXP 50
11280: PUSH
11281: LD_EXP 51
11285: PUSH
11286: LD_EXP 53
11290: PUSH
11291: LD_EXP 54
11295: PUSH
11296: LD_EXP 55
11300: PUSH
11301: LD_EXP 58
11305: PUSH
11306: LD_EXP 60
11310: PUSH
11311: LD_EXP 61
11315: PUSH
11316: LD_EXP 62
11320: PUSH
11321: LD_EXP 64
11325: PUSH
11326: LD_EXP 65
11330: PUSH
11331: LD_EXP 68
11335: PUSH
11336: LD_EXP 69
11340: PUSH
11341: LD_EXP 70
11345: PUSH
11346: LD_EXP 71
11350: PUSH
11351: LD_EXP 72
11355: PUSH
11356: LD_EXP 73
11360: PUSH
11361: LD_EXP 74
11365: PUSH
11366: LD_EXP 75
11370: PUSH
11371: LD_EXP 76
11375: PUSH
11376: LD_EXP 41
11380: PUSH
11381: LD_EXP 42
11385: PUSH
11386: LD_EXP 45
11390: PUSH
11391: LD_EXP 46
11395: PUSH
11396: LD_EXP 47
11400: PUSH
11401: LD_EXP 43
11405: PUSH
11406: LD_EXP 44
11410: PUSH
11411: LD_EXP 52
11415: PUSH
11416: LD_EXP 56
11420: PUSH
11421: LD_EXP 57
11425: PUSH
11426: LD_EXP 59
11430: PUSH
11431: LD_EXP 63
11435: PUSH
11436: LD_EXP 66
11440: PUSH
11441: LD_EXP 67
11445: PUSH
11446: LD_EXP 77
11450: PUSH
11451: LD_EXP 78
11455: PUSH
11456: LD_EXP 79
11460: PUSH
11461: LD_EXP 80
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: ST_TO_ADDR
// tmp :=  ;
11522: LD_ADDR_VAR 0 3
11526: PUSH
11527: LD_STRING 
11529: ST_TO_ADDR
// for i = 1 to normalCounter do
11530: LD_ADDR_VAR 0 8
11534: PUSH
11535: DOUBLE
11536: LD_INT 1
11538: DEC
11539: ST_TO_ADDR
11540: LD_EXP 25
11544: PUSH
11545: FOR_TO
11546: IFFALSE 11582
// begin if flags [ i ] then
11548: LD_VAR 0 4
11552: PUSH
11553: LD_VAR 0 8
11557: ARRAY
11558: IFFALSE 11580
// tmp := tmp & i & ; ;
11560: LD_ADDR_VAR 0 3
11564: PUSH
11565: LD_VAR 0 3
11569: PUSH
11570: LD_VAR 0 8
11574: STR
11575: PUSH
11576: LD_STRING ;
11578: STR
11579: ST_TO_ADDR
// end ;
11580: GO 11545
11582: POP
11583: POP
// for i = 1 to hardcoreCounter do
11584: LD_ADDR_VAR 0 8
11588: PUSH
11589: DOUBLE
11590: LD_INT 1
11592: DEC
11593: ST_TO_ADDR
11594: LD_EXP 26
11598: PUSH
11599: FOR_TO
11600: IFFALSE 11646
// begin if flags [ normalCounter + i ] then
11602: LD_VAR 0 4
11606: PUSH
11607: LD_EXP 25
11611: PUSH
11612: LD_VAR 0 8
11616: PLUS
11617: ARRAY
11618: IFFALSE 11644
// tmp := tmp & ( 100 + i ) & ; ;
11620: LD_ADDR_VAR 0 3
11624: PUSH
11625: LD_VAR 0 3
11629: PUSH
11630: LD_INT 100
11632: PUSH
11633: LD_VAR 0 8
11637: PLUS
11638: STR
11639: PUSH
11640: LD_STRING ;
11642: STR
11643: ST_TO_ADDR
// end ;
11644: GO 11599
11646: POP
11647: POP
// if tmp then
11648: LD_VAR 0 3
11652: IFFALSE 11664
// active := tmp ;
11654: LD_ADDR_VAR 0 7
11658: PUSH
11659: LD_VAR 0 3
11663: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11664: LD_STRING getStreamItemsFromMission("
11666: PUSH
11667: LD_VAR 0 5
11671: STR
11672: PUSH
11673: LD_STRING ","
11675: STR
11676: PUSH
11677: LD_VAR 0 6
11681: STR
11682: PUSH
11683: LD_STRING ","
11685: STR
11686: PUSH
11687: LD_VAR 0 7
11691: STR
11692: PUSH
11693: LD_STRING ")
11695: STR
11696: PPUSH
11697: CALL_OW 559
// end else
11701: GO 11710
// ToLua ( getStreamItemsFromMission("","","") ) ;
11703: LD_STRING getStreamItemsFromMission("","","")
11705: PPUSH
11706: CALL_OW 559
// end ;
11710: LD_VAR 0 2
11714: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11715: LD_EXP 24
11719: PUSH
11720: LD_EXP 29
11724: AND
11725: IFFALSE 11849
11727: GO 11729
11729: DISABLE
11730: LD_INT 0
11732: PPUSH
11733: PPUSH
// begin enable ;
11734: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11735: LD_ADDR_VAR 0 2
11739: PUSH
11740: LD_INT 22
11742: PUSH
11743: LD_OWVAR 2
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 2
11754: PUSH
11755: LD_INT 34
11757: PUSH
11758: LD_INT 7
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 34
11767: PUSH
11768: LD_INT 45
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 34
11777: PUSH
11778: LD_INT 28
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 34
11787: PUSH
11788: LD_INT 47
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PPUSH
11806: CALL_OW 69
11810: ST_TO_ADDR
// if not tmp then
11811: LD_VAR 0 2
11815: NOT
11816: IFFALSE 11820
// exit ;
11818: GO 11849
// for i in tmp do
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: LD_VAR 0 2
11829: PUSH
11830: FOR_IN
11831: IFFALSE 11847
// begin SetLives ( i , 0 ) ;
11833: LD_VAR 0 1
11837: PPUSH
11838: LD_INT 0
11840: PPUSH
11841: CALL_OW 234
// end ;
11845: GO 11830
11847: POP
11848: POP
// end ;
11849: PPOPN 2
11851: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11852: LD_EXP 24
11856: PUSH
11857: LD_EXP 30
11861: AND
11862: IFFALSE 11946
11864: GO 11866
11866: DISABLE
11867: LD_INT 0
11869: PPUSH
11870: PPUSH
// begin enable ;
11871: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11872: LD_ADDR_VAR 0 2
11876: PUSH
11877: LD_INT 22
11879: PUSH
11880: LD_OWVAR 2
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 32
11891: PUSH
11892: LD_INT 3
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PPUSH
11903: CALL_OW 69
11907: ST_TO_ADDR
// if not tmp then
11908: LD_VAR 0 2
11912: NOT
11913: IFFALSE 11917
// exit ;
11915: GO 11946
// for i in tmp do
11917: LD_ADDR_VAR 0 1
11921: PUSH
11922: LD_VAR 0 2
11926: PUSH
11927: FOR_IN
11928: IFFALSE 11944
// begin SetLives ( i , 0 ) ;
11930: LD_VAR 0 1
11934: PPUSH
11935: LD_INT 0
11937: PPUSH
11938: CALL_OW 234
// end ;
11942: GO 11927
11944: POP
11945: POP
// end ;
11946: PPOPN 2
11948: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11949: LD_EXP 24
11953: PUSH
11954: LD_EXP 27
11958: AND
11959: IFFALSE 12052
11961: GO 11963
11963: DISABLE
11964: LD_INT 0
11966: PPUSH
// begin enable ;
11967: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11968: LD_ADDR_VAR 0 1
11972: PUSH
11973: LD_INT 22
11975: PUSH
11976: LD_OWVAR 2
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 2
11987: PUSH
11988: LD_INT 25
11990: PUSH
11991: LD_INT 5
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 25
12000: PUSH
12001: LD_INT 9
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 25
12010: PUSH
12011: LD_INT 8
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 69
12032: PUSH
12033: FOR_IN
12034: IFFALSE 12050
// begin SetClass ( i , 1 ) ;
12036: LD_VAR 0 1
12040: PPUSH
12041: LD_INT 1
12043: PPUSH
12044: CALL_OW 336
// end ;
12048: GO 12033
12050: POP
12051: POP
// end ;
12052: PPOPN 1
12054: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12055: LD_EXP 24
12059: PUSH
12060: LD_EXP 28
12064: AND
12065: PUSH
12066: LD_OWVAR 65
12070: PUSH
12071: LD_INT 7
12073: LESS
12074: AND
12075: IFFALSE 12089
12077: GO 12079
12079: DISABLE
// begin enable ;
12080: ENABLE
// game_speed := 7 ;
12081: LD_ADDR_OWVAR 65
12085: PUSH
12086: LD_INT 7
12088: ST_TO_ADDR
// end ;
12089: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12090: LD_EXP 24
12094: PUSH
12095: LD_EXP 31
12099: AND
12100: IFFALSE 12302
12102: GO 12104
12104: DISABLE
12105: LD_INT 0
12107: PPUSH
12108: PPUSH
12109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12110: LD_ADDR_VAR 0 3
12114: PUSH
12115: LD_INT 81
12117: PUSH
12118: LD_OWVAR 2
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 21
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 69
12145: ST_TO_ADDR
// if not tmp then
12146: LD_VAR 0 3
12150: NOT
12151: IFFALSE 12155
// exit ;
12153: GO 12302
// if tmp > 5 then
12155: LD_VAR 0 3
12159: PUSH
12160: LD_INT 5
12162: GREATER
12163: IFFALSE 12175
// k := 5 else
12165: LD_ADDR_VAR 0 2
12169: PUSH
12170: LD_INT 5
12172: ST_TO_ADDR
12173: GO 12185
// k := tmp ;
12175: LD_ADDR_VAR 0 2
12179: PUSH
12180: LD_VAR 0 3
12184: ST_TO_ADDR
// for i := 1 to k do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: DOUBLE
12191: LD_INT 1
12193: DEC
12194: ST_TO_ADDR
12195: LD_VAR 0 2
12199: PUSH
12200: FOR_TO
12201: IFFALSE 12300
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12203: LD_VAR 0 3
12207: PUSH
12208: LD_VAR 0 1
12212: ARRAY
12213: PPUSH
12214: LD_VAR 0 1
12218: PUSH
12219: LD_INT 4
12221: MOD
12222: PUSH
12223: LD_INT 1
12225: PLUS
12226: PPUSH
12227: CALL_OW 259
12231: PUSH
12232: LD_INT 10
12234: LESS
12235: IFFALSE 12298
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12237: LD_VAR 0 3
12241: PUSH
12242: LD_VAR 0 1
12246: ARRAY
12247: PPUSH
12248: LD_VAR 0 1
12252: PUSH
12253: LD_INT 4
12255: MOD
12256: PUSH
12257: LD_INT 1
12259: PLUS
12260: PPUSH
12261: LD_VAR 0 3
12265: PUSH
12266: LD_VAR 0 1
12270: ARRAY
12271: PPUSH
12272: LD_VAR 0 1
12276: PUSH
12277: LD_INT 4
12279: MOD
12280: PUSH
12281: LD_INT 1
12283: PLUS
12284: PPUSH
12285: CALL_OW 259
12289: PUSH
12290: LD_INT 1
12292: PLUS
12293: PPUSH
12294: CALL_OW 237
12298: GO 12200
12300: POP
12301: POP
// end ;
12302: PPOPN 3
12304: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12305: LD_EXP 24
12309: PUSH
12310: LD_EXP 32
12314: AND
12315: IFFALSE 12335
12317: GO 12319
12319: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12320: LD_INT 4
12322: PPUSH
12323: LD_OWVAR 2
12327: PPUSH
12328: LD_INT 0
12330: PPUSH
12331: CALL_OW 324
12335: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12336: LD_EXP 24
12340: PUSH
12341: LD_EXP 61
12345: AND
12346: IFFALSE 12366
12348: GO 12350
12350: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12351: LD_INT 19
12353: PPUSH
12354: LD_OWVAR 2
12358: PPUSH
12359: LD_INT 0
12361: PPUSH
12362: CALL_OW 324
12366: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12367: LD_EXP 24
12371: PUSH
12372: LD_EXP 33
12376: AND
12377: IFFALSE 12479
12379: GO 12381
12381: DISABLE
12382: LD_INT 0
12384: PPUSH
12385: PPUSH
// begin enable ;
12386: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12387: LD_ADDR_VAR 0 2
12391: PUSH
12392: LD_INT 22
12394: PUSH
12395: LD_OWVAR 2
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 2
12406: PUSH
12407: LD_INT 34
12409: PUSH
12410: LD_INT 11
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 34
12419: PUSH
12420: LD_INT 30
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: LIST
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PPUSH
12436: CALL_OW 69
12440: ST_TO_ADDR
// if not tmp then
12441: LD_VAR 0 2
12445: NOT
12446: IFFALSE 12450
// exit ;
12448: GO 12479
// for i in tmp do
12450: LD_ADDR_VAR 0 1
12454: PUSH
12455: LD_VAR 0 2
12459: PUSH
12460: FOR_IN
12461: IFFALSE 12477
// begin SetLives ( i , 0 ) ;
12463: LD_VAR 0 1
12467: PPUSH
12468: LD_INT 0
12470: PPUSH
12471: CALL_OW 234
// end ;
12475: GO 12460
12477: POP
12478: POP
// end ;
12479: PPOPN 2
12481: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12482: LD_EXP 24
12486: PUSH
12487: LD_EXP 34
12491: AND
12492: IFFALSE 12512
12494: GO 12496
12496: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12497: LD_INT 32
12499: PPUSH
12500: LD_OWVAR 2
12504: PPUSH
12505: LD_INT 0
12507: PPUSH
12508: CALL_OW 324
12512: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12513: LD_EXP 24
12517: PUSH
12518: LD_EXP 35
12522: AND
12523: IFFALSE 12704
12525: GO 12527
12527: DISABLE
12528: LD_INT 0
12530: PPUSH
12531: PPUSH
12532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12533: LD_ADDR_VAR 0 2
12537: PUSH
12538: LD_INT 22
12540: PUSH
12541: LD_OWVAR 2
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 33
12552: PUSH
12553: LD_INT 3
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PPUSH
12564: CALL_OW 69
12568: ST_TO_ADDR
// if not tmp then
12569: LD_VAR 0 2
12573: NOT
12574: IFFALSE 12578
// exit ;
12576: GO 12704
// side := 0 ;
12578: LD_ADDR_VAR 0 3
12582: PUSH
12583: LD_INT 0
12585: ST_TO_ADDR
// for i := 1 to 8 do
12586: LD_ADDR_VAR 0 1
12590: PUSH
12591: DOUBLE
12592: LD_INT 1
12594: DEC
12595: ST_TO_ADDR
12596: LD_INT 8
12598: PUSH
12599: FOR_TO
12600: IFFALSE 12648
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12602: LD_OWVAR 2
12606: PUSH
12607: LD_VAR 0 1
12611: NONEQUAL
12612: PUSH
12613: LD_OWVAR 2
12617: PPUSH
12618: LD_VAR 0 1
12622: PPUSH
12623: CALL_OW 81
12627: PUSH
12628: LD_INT 2
12630: EQUAL
12631: AND
12632: IFFALSE 12646
// begin side := i ;
12634: LD_ADDR_VAR 0 3
12638: PUSH
12639: LD_VAR 0 1
12643: ST_TO_ADDR
// break ;
12644: GO 12648
// end ;
12646: GO 12599
12648: POP
12649: POP
// if not side then
12650: LD_VAR 0 3
12654: NOT
12655: IFFALSE 12659
// exit ;
12657: GO 12704
// for i := 1 to tmp do
12659: LD_ADDR_VAR 0 1
12663: PUSH
12664: DOUBLE
12665: LD_INT 1
12667: DEC
12668: ST_TO_ADDR
12669: LD_VAR 0 2
12673: PUSH
12674: FOR_TO
12675: IFFALSE 12702
// if Prob ( 60 ) then
12677: LD_INT 60
12679: PPUSH
12680: CALL_OW 13
12684: IFFALSE 12700
// SetSide ( i , side ) ;
12686: LD_VAR 0 1
12690: PPUSH
12691: LD_VAR 0 3
12695: PPUSH
12696: CALL_OW 235
12700: GO 12674
12702: POP
12703: POP
// end ;
12704: PPOPN 3
12706: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12707: LD_EXP 24
12711: PUSH
12712: LD_EXP 37
12716: AND
12717: IFFALSE 12836
12719: GO 12721
12721: DISABLE
12722: LD_INT 0
12724: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12725: LD_ADDR_VAR 0 1
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_OWVAR 2
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 21
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: LD_INT 3
12754: PUSH
12755: LD_INT 23
12757: PUSH
12758: LD_INT 0
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: PUSH
12779: FOR_IN
12780: IFFALSE 12834
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12782: LD_VAR 0 1
12786: PPUSH
12787: CALL_OW 257
12791: PUSH
12792: LD_INT 1
12794: PUSH
12795: LD_INT 2
12797: PUSH
12798: LD_INT 3
12800: PUSH
12801: LD_INT 4
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: IN
12810: IFFALSE 12832
// SetClass ( un , rand ( 1 , 4 ) ) ;
12812: LD_VAR 0 1
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: LD_INT 4
12822: PPUSH
12823: CALL_OW 12
12827: PPUSH
12828: CALL_OW 336
12832: GO 12779
12834: POP
12835: POP
// end ;
12836: PPOPN 1
12838: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12839: LD_EXP 24
12843: PUSH
12844: LD_EXP 36
12848: AND
12849: IFFALSE 12928
12851: GO 12853
12853: DISABLE
12854: LD_INT 0
12856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12857: LD_ADDR_VAR 0 1
12861: PUSH
12862: LD_INT 22
12864: PUSH
12865: LD_OWVAR 2
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 21
12876: PUSH
12877: LD_INT 3
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PPUSH
12888: CALL_OW 69
12892: ST_TO_ADDR
// if not tmp then
12893: LD_VAR 0 1
12897: NOT
12898: IFFALSE 12902
// exit ;
12900: GO 12928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12902: LD_VAR 0 1
12906: PUSH
12907: LD_INT 1
12909: PPUSH
12910: LD_VAR 0 1
12914: PPUSH
12915: CALL_OW 12
12919: ARRAY
12920: PPUSH
12921: LD_INT 100
12923: PPUSH
12924: CALL_OW 234
// end ;
12928: PPOPN 1
12930: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12931: LD_EXP 24
12935: PUSH
12936: LD_EXP 38
12940: AND
12941: IFFALSE 13039
12943: GO 12945
12945: DISABLE
12946: LD_INT 0
12948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12949: LD_ADDR_VAR 0 1
12953: PUSH
12954: LD_INT 22
12956: PUSH
12957: LD_OWVAR 2
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 21
12968: PUSH
12969: LD_INT 1
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PPUSH
12980: CALL_OW 69
12984: ST_TO_ADDR
// if not tmp then
12985: LD_VAR 0 1
12989: NOT
12990: IFFALSE 12994
// exit ;
12992: GO 13039
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12994: LD_VAR 0 1
12998: PUSH
12999: LD_INT 1
13001: PPUSH
13002: LD_VAR 0 1
13006: PPUSH
13007: CALL_OW 12
13011: ARRAY
13012: PPUSH
13013: LD_INT 1
13015: PPUSH
13016: LD_INT 4
13018: PPUSH
13019: CALL_OW 12
13023: PPUSH
13024: LD_INT 3000
13026: PPUSH
13027: LD_INT 9000
13029: PPUSH
13030: CALL_OW 12
13034: PPUSH
13035: CALL_OW 492
// end ;
13039: PPOPN 1
13041: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13042: LD_EXP 24
13046: PUSH
13047: LD_EXP 39
13051: AND
13052: IFFALSE 13072
13054: GO 13056
13056: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13057: LD_INT 1
13059: PPUSH
13060: LD_OWVAR 2
13064: PPUSH
13065: LD_INT 0
13067: PPUSH
13068: CALL_OW 324
13072: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13073: LD_EXP 24
13077: PUSH
13078: LD_EXP 40
13082: AND
13083: IFFALSE 13166
13085: GO 13087
13087: DISABLE
13088: LD_INT 0
13090: PPUSH
13091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13092: LD_ADDR_VAR 0 2
13096: PUSH
13097: LD_INT 22
13099: PUSH
13100: LD_OWVAR 2
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 21
13111: PUSH
13112: LD_INT 3
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 69
13127: ST_TO_ADDR
// if not tmp then
13128: LD_VAR 0 2
13132: NOT
13133: IFFALSE 13137
// exit ;
13135: GO 13166
// for i in tmp do
13137: LD_ADDR_VAR 0 1
13141: PUSH
13142: LD_VAR 0 2
13146: PUSH
13147: FOR_IN
13148: IFFALSE 13164
// SetBLevel ( i , 10 ) ;
13150: LD_VAR 0 1
13154: PPUSH
13155: LD_INT 10
13157: PPUSH
13158: CALL_OW 241
13162: GO 13147
13164: POP
13165: POP
// end ;
13166: PPOPN 2
13168: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13169: LD_EXP 24
13173: PUSH
13174: LD_EXP 41
13178: AND
13179: IFFALSE 13290
13181: GO 13183
13183: DISABLE
13184: LD_INT 0
13186: PPUSH
13187: PPUSH
13188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13189: LD_ADDR_VAR 0 3
13193: PUSH
13194: LD_INT 22
13196: PUSH
13197: LD_OWVAR 2
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 25
13208: PUSH
13209: LD_INT 1
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PPUSH
13220: CALL_OW 69
13224: ST_TO_ADDR
// if not tmp then
13225: LD_VAR 0 3
13229: NOT
13230: IFFALSE 13234
// exit ;
13232: GO 13290
// un := tmp [ rand ( 1 , tmp ) ] ;
13234: LD_ADDR_VAR 0 2
13238: PUSH
13239: LD_VAR 0 3
13243: PUSH
13244: LD_INT 1
13246: PPUSH
13247: LD_VAR 0 3
13251: PPUSH
13252: CALL_OW 12
13256: ARRAY
13257: ST_TO_ADDR
// if Crawls ( un ) then
13258: LD_VAR 0 2
13262: PPUSH
13263: CALL_OW 318
13267: IFFALSE 13278
// ComWalk ( un ) ;
13269: LD_VAR 0 2
13273: PPUSH
13274: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13278: LD_VAR 0 2
13282: PPUSH
13283: LD_INT 5
13285: PPUSH
13286: CALL_OW 336
// end ;
13290: PPOPN 3
13292: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13293: LD_EXP 24
13297: PUSH
13298: LD_EXP 42
13302: AND
13303: PUSH
13304: LD_OWVAR 67
13308: PUSH
13309: LD_INT 4
13311: LESS
13312: AND
13313: IFFALSE 13332
13315: GO 13317
13317: DISABLE
// begin Difficulty := Difficulty + 1 ;
13318: LD_ADDR_OWVAR 67
13322: PUSH
13323: LD_OWVAR 67
13327: PUSH
13328: LD_INT 1
13330: PLUS
13331: ST_TO_ADDR
// end ;
13332: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13333: LD_EXP 24
13337: PUSH
13338: LD_EXP 43
13342: AND
13343: IFFALSE 13446
13345: GO 13347
13347: DISABLE
13348: LD_INT 0
13350: PPUSH
// begin for i := 1 to 5 do
13351: LD_ADDR_VAR 0 1
13355: PUSH
13356: DOUBLE
13357: LD_INT 1
13359: DEC
13360: ST_TO_ADDR
13361: LD_INT 5
13363: PUSH
13364: FOR_TO
13365: IFFALSE 13444
// begin uc_nation := nation_nature ;
13367: LD_ADDR_OWVAR 21
13371: PUSH
13372: LD_INT 0
13374: ST_TO_ADDR
// uc_side := 0 ;
13375: LD_ADDR_OWVAR 20
13379: PUSH
13380: LD_INT 0
13382: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13383: LD_ADDR_OWVAR 29
13387: PUSH
13388: LD_INT 12
13390: PUSH
13391: LD_INT 12
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: ST_TO_ADDR
// hc_agressivity := 20 ;
13398: LD_ADDR_OWVAR 35
13402: PUSH
13403: LD_INT 20
13405: ST_TO_ADDR
// hc_class := class_tiger ;
13406: LD_ADDR_OWVAR 28
13410: PUSH
13411: LD_INT 14
13413: ST_TO_ADDR
// hc_gallery :=  ;
13414: LD_ADDR_OWVAR 33
13418: PUSH
13419: LD_STRING 
13421: ST_TO_ADDR
// hc_name :=  ;
13422: LD_ADDR_OWVAR 26
13426: PUSH
13427: LD_STRING 
13429: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13430: CALL_OW 44
13434: PPUSH
13435: LD_INT 0
13437: PPUSH
13438: CALL_OW 51
// end ;
13442: GO 13364
13444: POP
13445: POP
// end ;
13446: PPOPN 1
13448: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13449: LD_EXP 24
13453: PUSH
13454: LD_EXP 44
13458: AND
13459: IFFALSE 13468
13461: GO 13463
13463: DISABLE
// StreamSibBomb ;
13464: CALL 13469 0 0
13468: END
// export function StreamSibBomb ; var i , x , y ; begin
13469: LD_INT 0
13471: PPUSH
13472: PPUSH
13473: PPUSH
13474: PPUSH
// result := false ;
13475: LD_ADDR_VAR 0 1
13479: PUSH
13480: LD_INT 0
13482: ST_TO_ADDR
// for i := 1 to 16 do
13483: LD_ADDR_VAR 0 2
13487: PUSH
13488: DOUBLE
13489: LD_INT 1
13491: DEC
13492: ST_TO_ADDR
13493: LD_INT 16
13495: PUSH
13496: FOR_TO
13497: IFFALSE 13696
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13499: LD_ADDR_VAR 0 3
13503: PUSH
13504: LD_INT 10
13506: PUSH
13507: LD_INT 20
13509: PUSH
13510: LD_INT 30
13512: PUSH
13513: LD_INT 40
13515: PUSH
13516: LD_INT 50
13518: PUSH
13519: LD_INT 60
13521: PUSH
13522: LD_INT 70
13524: PUSH
13525: LD_INT 80
13527: PUSH
13528: LD_INT 90
13530: PUSH
13531: LD_INT 100
13533: PUSH
13534: LD_INT 110
13536: PUSH
13537: LD_INT 120
13539: PUSH
13540: LD_INT 130
13542: PUSH
13543: LD_INT 140
13545: PUSH
13546: LD_INT 150
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 1
13568: PPUSH
13569: LD_INT 15
13571: PPUSH
13572: CALL_OW 12
13576: ARRAY
13577: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13578: LD_ADDR_VAR 0 4
13582: PUSH
13583: LD_INT 10
13585: PUSH
13586: LD_INT 20
13588: PUSH
13589: LD_INT 30
13591: PUSH
13592: LD_INT 40
13594: PUSH
13595: LD_INT 50
13597: PUSH
13598: LD_INT 60
13600: PUSH
13601: LD_INT 70
13603: PUSH
13604: LD_INT 80
13606: PUSH
13607: LD_INT 90
13609: PUSH
13610: LD_INT 100
13612: PUSH
13613: LD_INT 110
13615: PUSH
13616: LD_INT 120
13618: PUSH
13619: LD_INT 130
13621: PUSH
13622: LD_INT 140
13624: PUSH
13625: LD_INT 150
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 1
13647: PPUSH
13648: LD_INT 15
13650: PPUSH
13651: CALL_OW 12
13655: ARRAY
13656: ST_TO_ADDR
// if ValidHex ( x , y ) then
13657: LD_VAR 0 3
13661: PPUSH
13662: LD_VAR 0 4
13666: PPUSH
13667: CALL_OW 488
13671: IFFALSE 13694
// begin result := [ x , y ] ;
13673: LD_ADDR_VAR 0 1
13677: PUSH
13678: LD_VAR 0 3
13682: PUSH
13683: LD_VAR 0 4
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: ST_TO_ADDR
// break ;
13692: GO 13696
// end ; end ;
13694: GO 13496
13696: POP
13697: POP
// if result then
13698: LD_VAR 0 1
13702: IFFALSE 13762
// begin ToLua ( playSibBomb() ) ;
13704: LD_STRING playSibBomb()
13706: PPUSH
13707: CALL_OW 559
// wait ( 0 0$14 ) ;
13711: LD_INT 490
13713: PPUSH
13714: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13718: LD_VAR 0 1
13722: PUSH
13723: LD_INT 1
13725: ARRAY
13726: PPUSH
13727: LD_VAR 0 1
13731: PUSH
13732: LD_INT 2
13734: ARRAY
13735: PPUSH
13736: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13740: LD_VAR 0 1
13744: PUSH
13745: LD_INT 1
13747: ARRAY
13748: PPUSH
13749: LD_VAR 0 1
13753: PUSH
13754: LD_INT 2
13756: ARRAY
13757: PPUSH
13758: CALL_OW 429
// end ; end ;
13762: LD_VAR 0 1
13766: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13767: LD_EXP 24
13771: PUSH
13772: LD_EXP 46
13776: AND
13777: IFFALSE 13789
13779: GO 13781
13781: DISABLE
// YouLost (  ) ;
13782: LD_STRING 
13784: PPUSH
13785: CALL_OW 104
13789: END
// every 0 0$1 trigger StreamModeActive and sFog do
13790: LD_EXP 24
13794: PUSH
13795: LD_EXP 45
13799: AND
13800: IFFALSE 13814
13802: GO 13804
13804: DISABLE
// FogOff ( your_side ) ;
13805: LD_OWVAR 2
13809: PPUSH
13810: CALL_OW 344
13814: END
// every 0 0$1 trigger StreamModeActive and sSun do
13815: LD_EXP 24
13819: PUSH
13820: LD_EXP 47
13824: AND
13825: IFFALSE 13853
13827: GO 13829
13829: DISABLE
// begin solar_recharge_percent := 0 ;
13830: LD_ADDR_OWVAR 79
13834: PUSH
13835: LD_INT 0
13837: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13838: LD_INT 10500
13840: PPUSH
13841: CALL_OW 67
// solar_recharge_percent := 100 ;
13845: LD_ADDR_OWVAR 79
13849: PUSH
13850: LD_INT 100
13852: ST_TO_ADDR
// end ;
13853: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13854: LD_EXP 24
13858: PUSH
13859: LD_EXP 48
13863: AND
13864: IFFALSE 14103
13866: GO 13868
13868: DISABLE
13869: LD_INT 0
13871: PPUSH
13872: PPUSH
13873: PPUSH
// begin tmp := [ ] ;
13874: LD_ADDR_VAR 0 3
13878: PUSH
13879: EMPTY
13880: ST_TO_ADDR
// for i := 1 to 6 do
13881: LD_ADDR_VAR 0 1
13885: PUSH
13886: DOUBLE
13887: LD_INT 1
13889: DEC
13890: ST_TO_ADDR
13891: LD_INT 6
13893: PUSH
13894: FOR_TO
13895: IFFALSE 14000
// begin uc_nation := nation_nature ;
13897: LD_ADDR_OWVAR 21
13901: PUSH
13902: LD_INT 0
13904: ST_TO_ADDR
// uc_side := 0 ;
13905: LD_ADDR_OWVAR 20
13909: PUSH
13910: LD_INT 0
13912: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13913: LD_ADDR_OWVAR 29
13917: PUSH
13918: LD_INT 12
13920: PUSH
13921: LD_INT 12
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: ST_TO_ADDR
// hc_agressivity := 20 ;
13928: LD_ADDR_OWVAR 35
13932: PUSH
13933: LD_INT 20
13935: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13936: LD_ADDR_OWVAR 28
13940: PUSH
13941: LD_INT 17
13943: ST_TO_ADDR
// hc_gallery :=  ;
13944: LD_ADDR_OWVAR 33
13948: PUSH
13949: LD_STRING 
13951: ST_TO_ADDR
// hc_name :=  ;
13952: LD_ADDR_OWVAR 26
13956: PUSH
13957: LD_STRING 
13959: ST_TO_ADDR
// un := CreateHuman ;
13960: LD_ADDR_VAR 0 2
13964: PUSH
13965: CALL_OW 44
13969: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13970: LD_VAR 0 2
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: CALL_OW 51
// tmp := tmp ^ un ;
13982: LD_ADDR_VAR 0 3
13986: PUSH
13987: LD_VAR 0 3
13991: PUSH
13992: LD_VAR 0 2
13996: ADD
13997: ST_TO_ADDR
// end ;
13998: GO 13894
14000: POP
14001: POP
// repeat wait ( 0 0$1 ) ;
14002: LD_INT 35
14004: PPUSH
14005: CALL_OW 67
// for un in tmp do
14009: LD_ADDR_VAR 0 2
14013: PUSH
14014: LD_VAR 0 3
14018: PUSH
14019: FOR_IN
14020: IFFALSE 14094
// begin if IsDead ( un ) then
14022: LD_VAR 0 2
14026: PPUSH
14027: CALL_OW 301
14031: IFFALSE 14051
// begin tmp := tmp diff un ;
14033: LD_ADDR_VAR 0 3
14037: PUSH
14038: LD_VAR 0 3
14042: PUSH
14043: LD_VAR 0 2
14047: DIFF
14048: ST_TO_ADDR
// continue ;
14049: GO 14019
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14051: LD_VAR 0 2
14055: PPUSH
14056: LD_INT 3
14058: PUSH
14059: LD_INT 22
14061: PUSH
14062: LD_INT 0
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PPUSH
14073: CALL_OW 69
14077: PPUSH
14078: LD_VAR 0 2
14082: PPUSH
14083: CALL_OW 74
14087: PPUSH
14088: CALL_OW 115
// end ;
14092: GO 14019
14094: POP
14095: POP
// until not tmp ;
14096: LD_VAR 0 3
14100: NOT
14101: IFFALSE 14002
// end ;
14103: PPOPN 3
14105: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14106: LD_EXP 24
14110: PUSH
14111: LD_EXP 49
14115: AND
14116: IFFALSE 14170
14118: GO 14120
14120: DISABLE
// begin ToLua ( displayTroll(); ) ;
14121: LD_STRING displayTroll();
14123: PPUSH
14124: CALL_OW 559
// wait ( 3 3$00 ) ;
14128: LD_INT 6300
14130: PPUSH
14131: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14135: LD_STRING hideTroll();
14137: PPUSH
14138: CALL_OW 559
// wait ( 1 1$00 ) ;
14142: LD_INT 2100
14144: PPUSH
14145: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14149: LD_STRING displayTroll();
14151: PPUSH
14152: CALL_OW 559
// wait ( 1 1$00 ) ;
14156: LD_INT 2100
14158: PPUSH
14159: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14163: LD_STRING hideTroll();
14165: PPUSH
14166: CALL_OW 559
// end ;
14170: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14171: LD_EXP 24
14175: PUSH
14176: LD_EXP 50
14180: AND
14181: IFFALSE 14244
14183: GO 14185
14185: DISABLE
14186: LD_INT 0
14188: PPUSH
// begin p := 0 ;
14189: LD_ADDR_VAR 0 1
14193: PUSH
14194: LD_INT 0
14196: ST_TO_ADDR
// repeat game_speed := 1 ;
14197: LD_ADDR_OWVAR 65
14201: PUSH
14202: LD_INT 1
14204: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14205: LD_INT 35
14207: PPUSH
14208: CALL_OW 67
// p := p + 1 ;
14212: LD_ADDR_VAR 0 1
14216: PUSH
14217: LD_VAR 0 1
14221: PUSH
14222: LD_INT 1
14224: PLUS
14225: ST_TO_ADDR
// until p >= 60 ;
14226: LD_VAR 0 1
14230: PUSH
14231: LD_INT 60
14233: GREATEREQUAL
14234: IFFALSE 14197
// game_speed := 4 ;
14236: LD_ADDR_OWVAR 65
14240: PUSH
14241: LD_INT 4
14243: ST_TO_ADDR
// end ;
14244: PPOPN 1
14246: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14247: LD_EXP 24
14251: PUSH
14252: LD_EXP 51
14256: AND
14257: IFFALSE 14403
14259: GO 14261
14261: DISABLE
14262: LD_INT 0
14264: PPUSH
14265: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14266: LD_ADDR_VAR 0 1
14270: PUSH
14271: LD_INT 22
14273: PUSH
14274: LD_OWVAR 2
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 2
14285: PUSH
14286: LD_INT 30
14288: PUSH
14289: LD_INT 0
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 30
14298: PUSH
14299: LD_INT 1
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PPUSH
14315: CALL_OW 69
14319: ST_TO_ADDR
// if not depot then
14320: LD_VAR 0 1
14324: NOT
14325: IFFALSE 14329
// exit ;
14327: GO 14403
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14329: LD_ADDR_VAR 0 2
14333: PUSH
14334: LD_VAR 0 1
14338: PUSH
14339: LD_INT 1
14341: PPUSH
14342: LD_VAR 0 1
14346: PPUSH
14347: CALL_OW 12
14351: ARRAY
14352: PPUSH
14353: CALL_OW 274
14357: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14358: LD_VAR 0 2
14362: PPUSH
14363: LD_INT 1
14365: PPUSH
14366: LD_INT 0
14368: PPUSH
14369: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14373: LD_VAR 0 2
14377: PPUSH
14378: LD_INT 2
14380: PPUSH
14381: LD_INT 0
14383: PPUSH
14384: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14388: LD_VAR 0 2
14392: PPUSH
14393: LD_INT 3
14395: PPUSH
14396: LD_INT 0
14398: PPUSH
14399: CALL_OW 277
// end ;
14403: PPOPN 2
14405: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14406: LD_EXP 24
14410: PUSH
14411: LD_EXP 52
14415: AND
14416: IFFALSE 14513
14418: GO 14420
14420: DISABLE
14421: LD_INT 0
14423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14424: LD_ADDR_VAR 0 1
14428: PUSH
14429: LD_INT 22
14431: PUSH
14432: LD_OWVAR 2
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 21
14443: PUSH
14444: LD_INT 1
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 3
14453: PUSH
14454: LD_INT 23
14456: PUSH
14457: LD_INT 0
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: LIST
14472: PPUSH
14473: CALL_OW 69
14477: ST_TO_ADDR
// if not tmp then
14478: LD_VAR 0 1
14482: NOT
14483: IFFALSE 14487
// exit ;
14485: GO 14513
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14487: LD_VAR 0 1
14491: PUSH
14492: LD_INT 1
14494: PPUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 12
14504: ARRAY
14505: PPUSH
14506: LD_INT 200
14508: PPUSH
14509: CALL_OW 234
// end ;
14513: PPOPN 1
14515: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14516: LD_EXP 24
14520: PUSH
14521: LD_EXP 53
14525: AND
14526: IFFALSE 14605
14528: GO 14530
14530: DISABLE
14531: LD_INT 0
14533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14534: LD_ADDR_VAR 0 1
14538: PUSH
14539: LD_INT 22
14541: PUSH
14542: LD_OWVAR 2
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 21
14553: PUSH
14554: LD_INT 2
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PPUSH
14565: CALL_OW 69
14569: ST_TO_ADDR
// if not tmp then
14570: LD_VAR 0 1
14574: NOT
14575: IFFALSE 14579
// exit ;
14577: GO 14605
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14579: LD_VAR 0 1
14583: PUSH
14584: LD_INT 1
14586: PPUSH
14587: LD_VAR 0 1
14591: PPUSH
14592: CALL_OW 12
14596: ARRAY
14597: PPUSH
14598: LD_INT 60
14600: PPUSH
14601: CALL_OW 234
// end ;
14605: PPOPN 1
14607: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14608: LD_EXP 24
14612: PUSH
14613: LD_EXP 54
14617: AND
14618: IFFALSE 14717
14620: GO 14622
14622: DISABLE
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
// begin enable ;
14627: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14628: LD_ADDR_VAR 0 1
14632: PUSH
14633: LD_INT 22
14635: PUSH
14636: LD_OWVAR 2
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: LD_INT 61
14647: PUSH
14648: EMPTY
14649: LIST
14650: PUSH
14651: LD_INT 33
14653: PUSH
14654: LD_INT 2
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: LIST
14665: PPUSH
14666: CALL_OW 69
14670: ST_TO_ADDR
// if not tmp then
14671: LD_VAR 0 1
14675: NOT
14676: IFFALSE 14680
// exit ;
14678: GO 14717
// for i in tmp do
14680: LD_ADDR_VAR 0 2
14684: PUSH
14685: LD_VAR 0 1
14689: PUSH
14690: FOR_IN
14691: IFFALSE 14715
// if IsControledBy ( i ) then
14693: LD_VAR 0 2
14697: PPUSH
14698: CALL_OW 312
14702: IFFALSE 14713
// ComUnlink ( i ) ;
14704: LD_VAR 0 2
14708: PPUSH
14709: CALL_OW 136
14713: GO 14690
14715: POP
14716: POP
// end ;
14717: PPOPN 2
14719: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14720: LD_EXP 24
14724: PUSH
14725: LD_EXP 55
14729: AND
14730: IFFALSE 14870
14732: GO 14734
14734: DISABLE
14735: LD_INT 0
14737: PPUSH
14738: PPUSH
// begin ToLua ( displayPowell(); ) ;
14739: LD_STRING displayPowell();
14741: PPUSH
14742: CALL_OW 559
// uc_side := 0 ;
14746: LD_ADDR_OWVAR 20
14750: PUSH
14751: LD_INT 0
14753: ST_TO_ADDR
// uc_nation := 2 ;
14754: LD_ADDR_OWVAR 21
14758: PUSH
14759: LD_INT 2
14761: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14762: LD_ADDR_OWVAR 37
14766: PUSH
14767: LD_INT 14
14769: ST_TO_ADDR
// vc_engine := engine_siberite ;
14770: LD_ADDR_OWVAR 39
14774: PUSH
14775: LD_INT 3
14777: ST_TO_ADDR
// vc_control := control_apeman ;
14778: LD_ADDR_OWVAR 38
14782: PUSH
14783: LD_INT 5
14785: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14786: LD_ADDR_OWVAR 40
14790: PUSH
14791: LD_INT 29
14793: ST_TO_ADDR
// un := CreateVehicle ;
14794: LD_ADDR_VAR 0 2
14798: PUSH
14799: CALL_OW 45
14803: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14804: LD_VAR 0 2
14808: PPUSH
14809: LD_INT 1
14811: PPUSH
14812: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14816: LD_INT 35
14818: PPUSH
14819: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14823: LD_VAR 0 2
14827: PPUSH
14828: LD_INT 22
14830: PUSH
14831: LD_OWVAR 2
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: PPUSH
14845: LD_VAR 0 2
14849: PPUSH
14850: CALL_OW 74
14854: PPUSH
14855: CALL_OW 115
// until IsDead ( un ) ;
14859: LD_VAR 0 2
14863: PPUSH
14864: CALL_OW 301
14868: IFFALSE 14816
// end ;
14870: PPOPN 2
14872: END
// every 0 0$1 trigger StreamModeActive and sStu do
14873: LD_EXP 24
14877: PUSH
14878: LD_EXP 63
14882: AND
14883: IFFALSE 14899
14885: GO 14887
14887: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14888: LD_STRING displayStucuk();
14890: PPUSH
14891: CALL_OW 559
// ResetFog ;
14895: CALL_OW 335
// end ;
14899: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14900: LD_EXP 24
14904: PUSH
14905: LD_EXP 56
14909: AND
14910: IFFALSE 15051
14912: GO 14914
14914: DISABLE
14915: LD_INT 0
14917: PPUSH
14918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14919: LD_ADDR_VAR 0 2
14923: PUSH
14924: LD_INT 22
14926: PUSH
14927: LD_OWVAR 2
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 21
14938: PUSH
14939: LD_INT 1
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PPUSH
14950: CALL_OW 69
14954: ST_TO_ADDR
// if not tmp then
14955: LD_VAR 0 2
14959: NOT
14960: IFFALSE 14964
// exit ;
14962: GO 15051
// un := tmp [ rand ( 1 , tmp ) ] ;
14964: LD_ADDR_VAR 0 1
14968: PUSH
14969: LD_VAR 0 2
14973: PUSH
14974: LD_INT 1
14976: PPUSH
14977: LD_VAR 0 2
14981: PPUSH
14982: CALL_OW 12
14986: ARRAY
14987: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14988: LD_VAR 0 1
14992: PPUSH
14993: LD_INT 0
14995: PPUSH
14996: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15000: LD_VAR 0 1
15004: PPUSH
15005: LD_OWVAR 3
15009: PUSH
15010: LD_VAR 0 1
15014: DIFF
15015: PPUSH
15016: LD_VAR 0 1
15020: PPUSH
15021: CALL_OW 74
15025: PPUSH
15026: CALL_OW 115
// wait ( 0 0$20 ) ;
15030: LD_INT 700
15032: PPUSH
15033: CALL_OW 67
// SetSide ( un , your_side ) ;
15037: LD_VAR 0 1
15041: PPUSH
15042: LD_OWVAR 2
15046: PPUSH
15047: CALL_OW 235
// end ;
15051: PPOPN 2
15053: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15054: LD_EXP 24
15058: PUSH
15059: LD_EXP 57
15063: AND
15064: IFFALSE 15170
15066: GO 15068
15068: DISABLE
15069: LD_INT 0
15071: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15072: LD_ADDR_VAR 0 1
15076: PUSH
15077: LD_INT 22
15079: PUSH
15080: LD_OWVAR 2
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 2
15091: PUSH
15092: LD_INT 30
15094: PUSH
15095: LD_INT 0
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: LD_INT 30
15104: PUSH
15105: LD_INT 1
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PPUSH
15121: CALL_OW 69
15125: ST_TO_ADDR
// if not depot then
15126: LD_VAR 0 1
15130: NOT
15131: IFFALSE 15135
// exit ;
15133: GO 15170
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15135: LD_VAR 0 1
15139: PUSH
15140: LD_INT 1
15142: ARRAY
15143: PPUSH
15144: CALL_OW 250
15148: PPUSH
15149: LD_VAR 0 1
15153: PUSH
15154: LD_INT 1
15156: ARRAY
15157: PPUSH
15158: CALL_OW 251
15162: PPUSH
15163: LD_INT 70
15165: PPUSH
15166: CALL_OW 495
// end ;
15170: PPOPN 1
15172: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15173: LD_EXP 24
15177: PUSH
15178: LD_EXP 58
15182: AND
15183: IFFALSE 15394
15185: GO 15187
15187: DISABLE
15188: LD_INT 0
15190: PPUSH
15191: PPUSH
15192: PPUSH
15193: PPUSH
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15195: LD_ADDR_VAR 0 5
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 21
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 5
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15394
// for i in tmp do
15240: LD_ADDR_VAR 0 1
15244: PUSH
15245: LD_VAR 0 5
15249: PUSH
15250: FOR_IN
15251: IFFALSE 15392
// begin d := rand ( 0 , 5 ) ;
15253: LD_ADDR_VAR 0 4
15257: PUSH
15258: LD_INT 0
15260: PPUSH
15261: LD_INT 5
15263: PPUSH
15264: CALL_OW 12
15268: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15269: LD_ADDR_VAR 0 2
15273: PUSH
15274: LD_VAR 0 1
15278: PPUSH
15279: CALL_OW 250
15283: PPUSH
15284: LD_VAR 0 4
15288: PPUSH
15289: LD_INT 3
15291: PPUSH
15292: LD_INT 12
15294: PPUSH
15295: CALL_OW 12
15299: PPUSH
15300: CALL_OW 272
15304: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15305: LD_ADDR_VAR 0 3
15309: PUSH
15310: LD_VAR 0 1
15314: PPUSH
15315: CALL_OW 251
15319: PPUSH
15320: LD_VAR 0 4
15324: PPUSH
15325: LD_INT 3
15327: PPUSH
15328: LD_INT 12
15330: PPUSH
15331: CALL_OW 12
15335: PPUSH
15336: CALL_OW 273
15340: ST_TO_ADDR
// if ValidHex ( x , y ) then
15341: LD_VAR 0 2
15345: PPUSH
15346: LD_VAR 0 3
15350: PPUSH
15351: CALL_OW 488
15355: IFFALSE 15390
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15357: LD_VAR 0 1
15361: PPUSH
15362: LD_VAR 0 2
15366: PPUSH
15367: LD_VAR 0 3
15371: PPUSH
15372: LD_INT 3
15374: PPUSH
15375: LD_INT 6
15377: PPUSH
15378: CALL_OW 12
15382: PPUSH
15383: LD_INT 1
15385: PPUSH
15386: CALL_OW 483
// end ;
15390: GO 15250
15392: POP
15393: POP
// end ;
15394: PPOPN 5
15396: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15397: LD_EXP 24
15401: PUSH
15402: LD_EXP 59
15406: AND
15407: IFFALSE 15501
15409: GO 15411
15411: DISABLE
15412: LD_INT 0
15414: PPUSH
15415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15416: LD_ADDR_VAR 0 2
15420: PUSH
15421: LD_INT 22
15423: PUSH
15424: LD_OWVAR 2
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 32
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 21
15445: PUSH
15446: LD_INT 2
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: LIST
15457: PPUSH
15458: CALL_OW 69
15462: ST_TO_ADDR
// if not tmp then
15463: LD_VAR 0 2
15467: NOT
15468: IFFALSE 15472
// exit ;
15470: GO 15501
// for i in tmp do
15472: LD_ADDR_VAR 0 1
15476: PUSH
15477: LD_VAR 0 2
15481: PUSH
15482: FOR_IN
15483: IFFALSE 15499
// SetFuel ( i , 0 ) ;
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_INT 0
15492: PPUSH
15493: CALL_OW 240
15497: GO 15482
15499: POP
15500: POP
// end ;
15501: PPOPN 2
15503: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15504: LD_EXP 24
15508: PUSH
15509: LD_EXP 60
15513: AND
15514: IFFALSE 15580
15516: GO 15518
15518: DISABLE
15519: LD_INT 0
15521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15522: LD_ADDR_VAR 0 1
15526: PUSH
15527: LD_INT 22
15529: PUSH
15530: LD_OWVAR 2
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 30
15541: PUSH
15542: LD_INT 29
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PPUSH
15553: CALL_OW 69
15557: ST_TO_ADDR
// if not tmp then
15558: LD_VAR 0 1
15562: NOT
15563: IFFALSE 15567
// exit ;
15565: GO 15580
// DestroyUnit ( tmp [ 1 ] ) ;
15567: LD_VAR 0 1
15571: PUSH
15572: LD_INT 1
15574: ARRAY
15575: PPUSH
15576: CALL_OW 65
// end ;
15580: PPOPN 1
15582: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15583: LD_EXP 24
15587: PUSH
15588: LD_EXP 62
15592: AND
15593: IFFALSE 15722
15595: GO 15597
15597: DISABLE
15598: LD_INT 0
15600: PPUSH
// begin uc_side := 0 ;
15601: LD_ADDR_OWVAR 20
15605: PUSH
15606: LD_INT 0
15608: ST_TO_ADDR
// uc_nation := nation_arabian ;
15609: LD_ADDR_OWVAR 21
15613: PUSH
15614: LD_INT 2
15616: ST_TO_ADDR
// hc_gallery :=  ;
15617: LD_ADDR_OWVAR 33
15621: PUSH
15622: LD_STRING 
15624: ST_TO_ADDR
// hc_name :=  ;
15625: LD_ADDR_OWVAR 26
15629: PUSH
15630: LD_STRING 
15632: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15633: LD_INT 1
15635: PPUSH
15636: LD_INT 11
15638: PPUSH
15639: LD_INT 10
15641: PPUSH
15642: CALL_OW 380
// un := CreateHuman ;
15646: LD_ADDR_VAR 0 1
15650: PUSH
15651: CALL_OW 44
15655: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15656: LD_VAR 0 1
15660: PPUSH
15661: LD_INT 1
15663: PPUSH
15664: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15668: LD_INT 35
15670: PPUSH
15671: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15675: LD_VAR 0 1
15679: PPUSH
15680: LD_INT 22
15682: PUSH
15683: LD_OWVAR 2
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PPUSH
15692: CALL_OW 69
15696: PPUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: CALL_OW 74
15706: PPUSH
15707: CALL_OW 115
// until IsDead ( un ) ;
15711: LD_VAR 0 1
15715: PPUSH
15716: CALL_OW 301
15720: IFFALSE 15668
// end ;
15722: PPOPN 1
15724: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15725: LD_EXP 24
15729: PUSH
15730: LD_EXP 64
15734: AND
15735: IFFALSE 15747
15737: GO 15739
15739: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15740: LD_STRING earthquake(getX(game), 0, 32)
15742: PPUSH
15743: CALL_OW 559
15747: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15748: LD_EXP 24
15752: PUSH
15753: LD_EXP 65
15757: AND
15758: IFFALSE 15849
15760: GO 15762
15762: DISABLE
15763: LD_INT 0
15765: PPUSH
// begin enable ;
15766: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15767: LD_ADDR_VAR 0 1
15771: PUSH
15772: LD_INT 22
15774: PUSH
15775: LD_OWVAR 2
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 21
15786: PUSH
15787: LD_INT 2
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 33
15796: PUSH
15797: LD_INT 3
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: LIST
15808: PPUSH
15809: CALL_OW 69
15813: ST_TO_ADDR
// if not tmp then
15814: LD_VAR 0 1
15818: NOT
15819: IFFALSE 15823
// exit ;
15821: GO 15849
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15823: LD_VAR 0 1
15827: PUSH
15828: LD_INT 1
15830: PPUSH
15831: LD_VAR 0 1
15835: PPUSH
15836: CALL_OW 12
15840: ARRAY
15841: PPUSH
15842: LD_INT 1
15844: PPUSH
15845: CALL_OW 234
// end ;
15849: PPOPN 1
15851: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15852: LD_EXP 24
15856: PUSH
15857: LD_EXP 66
15861: AND
15862: IFFALSE 16003
15864: GO 15866
15866: DISABLE
15867: LD_INT 0
15869: PPUSH
15870: PPUSH
15871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15872: LD_ADDR_VAR 0 3
15876: PUSH
15877: LD_INT 22
15879: PUSH
15880: LD_OWVAR 2
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 25
15891: PUSH
15892: LD_INT 1
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PPUSH
15903: CALL_OW 69
15907: ST_TO_ADDR
// if not tmp then
15908: LD_VAR 0 3
15912: NOT
15913: IFFALSE 15917
// exit ;
15915: GO 16003
// un := tmp [ rand ( 1 , tmp ) ] ;
15917: LD_ADDR_VAR 0 2
15921: PUSH
15922: LD_VAR 0 3
15926: PUSH
15927: LD_INT 1
15929: PPUSH
15930: LD_VAR 0 3
15934: PPUSH
15935: CALL_OW 12
15939: ARRAY
15940: ST_TO_ADDR
// if Crawls ( un ) then
15941: LD_VAR 0 2
15945: PPUSH
15946: CALL_OW 318
15950: IFFALSE 15961
// ComWalk ( un ) ;
15952: LD_VAR 0 2
15956: PPUSH
15957: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15961: LD_VAR 0 2
15965: PPUSH
15966: LD_INT 9
15968: PPUSH
15969: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15973: LD_INT 28
15975: PPUSH
15976: LD_OWVAR 2
15980: PPUSH
15981: LD_INT 2
15983: PPUSH
15984: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15988: LD_INT 29
15990: PPUSH
15991: LD_OWVAR 2
15995: PPUSH
15996: LD_INT 2
15998: PPUSH
15999: CALL_OW 322
// end ;
16003: PPOPN 3
16005: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16006: LD_EXP 24
16010: PUSH
16011: LD_EXP 67
16015: AND
16016: IFFALSE 16127
16018: GO 16020
16020: DISABLE
16021: LD_INT 0
16023: PPUSH
16024: PPUSH
16025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16026: LD_ADDR_VAR 0 3
16030: PUSH
16031: LD_INT 22
16033: PUSH
16034: LD_OWVAR 2
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 25
16045: PUSH
16046: LD_INT 1
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PPUSH
16057: CALL_OW 69
16061: ST_TO_ADDR
// if not tmp then
16062: LD_VAR 0 3
16066: NOT
16067: IFFALSE 16071
// exit ;
16069: GO 16127
// un := tmp [ rand ( 1 , tmp ) ] ;
16071: LD_ADDR_VAR 0 2
16075: PUSH
16076: LD_VAR 0 3
16080: PUSH
16081: LD_INT 1
16083: PPUSH
16084: LD_VAR 0 3
16088: PPUSH
16089: CALL_OW 12
16093: ARRAY
16094: ST_TO_ADDR
// if Crawls ( un ) then
16095: LD_VAR 0 2
16099: PPUSH
16100: CALL_OW 318
16104: IFFALSE 16115
// ComWalk ( un ) ;
16106: LD_VAR 0 2
16110: PPUSH
16111: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16115: LD_VAR 0 2
16119: PPUSH
16120: LD_INT 8
16122: PPUSH
16123: CALL_OW 336
// end ;
16127: PPOPN 3
16129: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16130: LD_EXP 24
16134: PUSH
16135: LD_EXP 68
16139: AND
16140: IFFALSE 16284
16142: GO 16144
16144: DISABLE
16145: LD_INT 0
16147: PPUSH
16148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16149: LD_ADDR_VAR 0 2
16153: PUSH
16154: LD_INT 22
16156: PUSH
16157: LD_OWVAR 2
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: LD_INT 21
16168: PUSH
16169: LD_INT 2
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 2
16178: PUSH
16179: LD_INT 34
16181: PUSH
16182: LD_INT 12
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 34
16191: PUSH
16192: LD_INT 51
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 34
16201: PUSH
16202: LD_INT 32
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: LIST
16219: PPUSH
16220: CALL_OW 69
16224: ST_TO_ADDR
// if not tmp then
16225: LD_VAR 0 2
16229: NOT
16230: IFFALSE 16234
// exit ;
16232: GO 16284
// for i in tmp do
16234: LD_ADDR_VAR 0 1
16238: PUSH
16239: LD_VAR 0 2
16243: PUSH
16244: FOR_IN
16245: IFFALSE 16282
// if GetCargo ( i , mat_artifact ) = 0 then
16247: LD_VAR 0 1
16251: PPUSH
16252: LD_INT 4
16254: PPUSH
16255: CALL_OW 289
16259: PUSH
16260: LD_INT 0
16262: EQUAL
16263: IFFALSE 16280
// SetCargo ( i , mat_siberit , 100 ) ;
16265: LD_VAR 0 1
16269: PPUSH
16270: LD_INT 3
16272: PPUSH
16273: LD_INT 100
16275: PPUSH
16276: CALL_OW 290
16280: GO 16244
16282: POP
16283: POP
// end ;
16284: PPOPN 2
16286: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16287: LD_EXP 24
16291: PUSH
16292: LD_EXP 69
16296: AND
16297: IFFALSE 16480
16299: GO 16301
16301: DISABLE
16302: LD_INT 0
16304: PPUSH
16305: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16306: LD_ADDR_VAR 0 2
16310: PUSH
16311: LD_INT 22
16313: PUSH
16314: LD_OWVAR 2
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PPUSH
16323: CALL_OW 69
16327: ST_TO_ADDR
// if not tmp then
16328: LD_VAR 0 2
16332: NOT
16333: IFFALSE 16337
// exit ;
16335: GO 16480
// for i := 1 to 2 do
16337: LD_ADDR_VAR 0 1
16341: PUSH
16342: DOUBLE
16343: LD_INT 1
16345: DEC
16346: ST_TO_ADDR
16347: LD_INT 2
16349: PUSH
16350: FOR_TO
16351: IFFALSE 16478
// begin uc_side := your_side ;
16353: LD_ADDR_OWVAR 20
16357: PUSH
16358: LD_OWVAR 2
16362: ST_TO_ADDR
// uc_nation := nation_american ;
16363: LD_ADDR_OWVAR 21
16367: PUSH
16368: LD_INT 1
16370: ST_TO_ADDR
// vc_chassis := us_morphling ;
16371: LD_ADDR_OWVAR 37
16375: PUSH
16376: LD_INT 5
16378: ST_TO_ADDR
// vc_engine := engine_siberite ;
16379: LD_ADDR_OWVAR 39
16383: PUSH
16384: LD_INT 3
16386: ST_TO_ADDR
// vc_control := control_computer ;
16387: LD_ADDR_OWVAR 38
16391: PUSH
16392: LD_INT 3
16394: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16395: LD_ADDR_OWVAR 40
16399: PUSH
16400: LD_INT 10
16402: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16403: LD_VAR 0 2
16407: PUSH
16408: LD_INT 1
16410: ARRAY
16411: PPUSH
16412: CALL_OW 310
16416: NOT
16417: IFFALSE 16464
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16419: CALL_OW 45
16423: PPUSH
16424: LD_VAR 0 2
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: CALL_OW 250
16437: PPUSH
16438: LD_VAR 0 2
16442: PUSH
16443: LD_INT 1
16445: ARRAY
16446: PPUSH
16447: CALL_OW 251
16451: PPUSH
16452: LD_INT 12
16454: PPUSH
16455: LD_INT 1
16457: PPUSH
16458: CALL_OW 50
16462: GO 16476
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16464: CALL_OW 45
16468: PPUSH
16469: LD_INT 1
16471: PPUSH
16472: CALL_OW 51
// end ;
16476: GO 16350
16478: POP
16479: POP
// end ;
16480: PPOPN 2
16482: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16483: LD_EXP 24
16487: PUSH
16488: LD_EXP 70
16492: AND
16493: IFFALSE 16715
16495: GO 16497
16497: DISABLE
16498: LD_INT 0
16500: PPUSH
16501: PPUSH
16502: PPUSH
16503: PPUSH
16504: PPUSH
16505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16506: LD_ADDR_VAR 0 6
16510: PUSH
16511: LD_INT 22
16513: PUSH
16514: LD_OWVAR 2
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 21
16525: PUSH
16526: LD_INT 1
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 3
16535: PUSH
16536: LD_INT 23
16538: PUSH
16539: LD_INT 0
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: LIST
16554: PPUSH
16555: CALL_OW 69
16559: ST_TO_ADDR
// if not tmp then
16560: LD_VAR 0 6
16564: NOT
16565: IFFALSE 16569
// exit ;
16567: GO 16715
// s1 := rand ( 1 , 4 ) ;
16569: LD_ADDR_VAR 0 2
16573: PUSH
16574: LD_INT 1
16576: PPUSH
16577: LD_INT 4
16579: PPUSH
16580: CALL_OW 12
16584: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16585: LD_ADDR_VAR 0 4
16589: PUSH
16590: LD_VAR 0 6
16594: PUSH
16595: LD_INT 1
16597: ARRAY
16598: PPUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: CALL_OW 259
16608: ST_TO_ADDR
// if s1 = 1 then
16609: LD_VAR 0 2
16613: PUSH
16614: LD_INT 1
16616: EQUAL
16617: IFFALSE 16637
// s2 := rand ( 2 , 4 ) else
16619: LD_ADDR_VAR 0 3
16623: PUSH
16624: LD_INT 2
16626: PPUSH
16627: LD_INT 4
16629: PPUSH
16630: CALL_OW 12
16634: ST_TO_ADDR
16635: GO 16645
// s2 := 1 ;
16637: LD_ADDR_VAR 0 3
16641: PUSH
16642: LD_INT 1
16644: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16645: LD_ADDR_VAR 0 5
16649: PUSH
16650: LD_VAR 0 6
16654: PUSH
16655: LD_INT 1
16657: ARRAY
16658: PPUSH
16659: LD_VAR 0 3
16663: PPUSH
16664: CALL_OW 259
16668: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16669: LD_VAR 0 6
16673: PUSH
16674: LD_INT 1
16676: ARRAY
16677: PPUSH
16678: LD_VAR 0 2
16682: PPUSH
16683: LD_VAR 0 5
16687: PPUSH
16688: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16692: LD_VAR 0 6
16696: PUSH
16697: LD_INT 1
16699: ARRAY
16700: PPUSH
16701: LD_VAR 0 3
16705: PPUSH
16706: LD_VAR 0 4
16710: PPUSH
16711: CALL_OW 237
// end ;
16715: PPOPN 6
16717: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16718: LD_EXP 24
16722: PUSH
16723: LD_EXP 71
16727: AND
16728: IFFALSE 16807
16730: GO 16732
16732: DISABLE
16733: LD_INT 0
16735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16736: LD_ADDR_VAR 0 1
16740: PUSH
16741: LD_INT 22
16743: PUSH
16744: LD_OWVAR 2
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 30
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PPUSH
16767: CALL_OW 69
16771: ST_TO_ADDR
// if not tmp then
16772: LD_VAR 0 1
16776: NOT
16777: IFFALSE 16781
// exit ;
16779: GO 16807
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16781: LD_VAR 0 1
16785: PUSH
16786: LD_INT 1
16788: PPUSH
16789: LD_VAR 0 1
16793: PPUSH
16794: CALL_OW 12
16798: ARRAY
16799: PPUSH
16800: LD_INT 1
16802: PPUSH
16803: CALL_OW 234
// end ;
16807: PPOPN 1
16809: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16810: LD_EXP 24
16814: PUSH
16815: LD_EXP 72
16819: AND
16820: IFFALSE 16932
16822: GO 16824
16824: DISABLE
16825: LD_INT 0
16827: PPUSH
16828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16829: LD_ADDR_VAR 0 2
16833: PUSH
16834: LD_INT 22
16836: PUSH
16837: LD_OWVAR 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 2
16848: PUSH
16849: LD_INT 30
16851: PUSH
16852: LD_INT 27
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 30
16861: PUSH
16862: LD_INT 26
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 30
16871: PUSH
16872: LD_INT 28
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PPUSH
16889: CALL_OW 69
16893: ST_TO_ADDR
// if not tmp then
16894: LD_VAR 0 2
16898: NOT
16899: IFFALSE 16903
// exit ;
16901: GO 16932
// for i in tmp do
16903: LD_ADDR_VAR 0 1
16907: PUSH
16908: LD_VAR 0 2
16912: PUSH
16913: FOR_IN
16914: IFFALSE 16930
// SetLives ( i , 1 ) ;
16916: LD_VAR 0 1
16920: PPUSH
16921: LD_INT 1
16923: PPUSH
16924: CALL_OW 234
16928: GO 16913
16930: POP
16931: POP
// end ;
16932: PPOPN 2
16934: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16935: LD_EXP 24
16939: PUSH
16940: LD_EXP 73
16944: AND
16945: IFFALSE 17232
16947: GO 16949
16949: DISABLE
16950: LD_INT 0
16952: PPUSH
16953: PPUSH
16954: PPUSH
// begin i := rand ( 1 , 7 ) ;
16955: LD_ADDR_VAR 0 1
16959: PUSH
16960: LD_INT 1
16962: PPUSH
16963: LD_INT 7
16965: PPUSH
16966: CALL_OW 12
16970: ST_TO_ADDR
// case i of 1 :
16971: LD_VAR 0 1
16975: PUSH
16976: LD_INT 1
16978: DOUBLE
16979: EQUAL
16980: IFTRUE 16984
16982: GO 16994
16984: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16985: LD_STRING earthquake(getX(game), 0, 32)
16987: PPUSH
16988: CALL_OW 559
16992: GO 17232
16994: LD_INT 2
16996: DOUBLE
16997: EQUAL
16998: IFTRUE 17002
17000: GO 17016
17002: POP
// begin ToLua ( displayStucuk(); ) ;
17003: LD_STRING displayStucuk();
17005: PPUSH
17006: CALL_OW 559
// ResetFog ;
17010: CALL_OW 335
// end ; 3 :
17014: GO 17232
17016: LD_INT 3
17018: DOUBLE
17019: EQUAL
17020: IFTRUE 17024
17022: GO 17128
17024: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17025: LD_ADDR_VAR 0 2
17029: PUSH
17030: LD_INT 22
17032: PUSH
17033: LD_OWVAR 2
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 25
17044: PUSH
17045: LD_INT 1
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PPUSH
17056: CALL_OW 69
17060: ST_TO_ADDR
// if not tmp then
17061: LD_VAR 0 2
17065: NOT
17066: IFFALSE 17070
// exit ;
17068: GO 17232
// un := tmp [ rand ( 1 , tmp ) ] ;
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_VAR 0 2
17079: PUSH
17080: LD_INT 1
17082: PPUSH
17083: LD_VAR 0 2
17087: PPUSH
17088: CALL_OW 12
17092: ARRAY
17093: ST_TO_ADDR
// if Crawls ( un ) then
17094: LD_VAR 0 3
17098: PPUSH
17099: CALL_OW 318
17103: IFFALSE 17114
// ComWalk ( un ) ;
17105: LD_VAR 0 3
17109: PPUSH
17110: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17114: LD_VAR 0 3
17118: PPUSH
17119: LD_INT 8
17121: PPUSH
17122: CALL_OW 336
// end ; 4 :
17126: GO 17232
17128: LD_INT 4
17130: DOUBLE
17131: EQUAL
17132: IFTRUE 17136
17134: GO 17210
17136: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17137: LD_ADDR_VAR 0 2
17141: PUSH
17142: LD_INT 22
17144: PUSH
17145: LD_OWVAR 2
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 30
17156: PUSH
17157: LD_INT 29
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PPUSH
17168: CALL_OW 69
17172: ST_TO_ADDR
// if not tmp then
17173: LD_VAR 0 2
17177: NOT
17178: IFFALSE 17182
// exit ;
17180: GO 17232
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17182: LD_VAR 0 2
17186: PUSH
17187: LD_INT 1
17189: ARRAY
17190: PPUSH
17191: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17195: LD_VAR 0 2
17199: PUSH
17200: LD_INT 1
17202: ARRAY
17203: PPUSH
17204: CALL_OW 65
// end ; 5 .. 7 :
17208: GO 17232
17210: LD_INT 5
17212: DOUBLE
17213: GREATEREQUAL
17214: IFFALSE 17222
17216: LD_INT 7
17218: DOUBLE
17219: LESSEQUAL
17220: IFTRUE 17224
17222: GO 17231
17224: POP
// StreamSibBomb ; end ;
17225: CALL 13469 0 0
17229: GO 17232
17231: POP
// end ;
17232: PPOPN 3
17234: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17235: LD_EXP 24
17239: PUSH
17240: LD_EXP 74
17244: AND
17245: IFFALSE 17401
17247: GO 17249
17249: DISABLE
17250: LD_INT 0
17252: PPUSH
17253: PPUSH
17254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17255: LD_ADDR_VAR 0 2
17259: PUSH
17260: LD_INT 81
17262: PUSH
17263: LD_OWVAR 2
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 2
17274: PUSH
17275: LD_INT 21
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 21
17287: PUSH
17288: LD_INT 2
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PPUSH
17304: CALL_OW 69
17308: ST_TO_ADDR
// if not tmp then
17309: LD_VAR 0 2
17313: NOT
17314: IFFALSE 17318
// exit ;
17316: GO 17401
// p := 0 ;
17318: LD_ADDR_VAR 0 3
17322: PUSH
17323: LD_INT 0
17325: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17326: LD_INT 35
17328: PPUSH
17329: CALL_OW 67
// p := p + 1 ;
17333: LD_ADDR_VAR 0 3
17337: PUSH
17338: LD_VAR 0 3
17342: PUSH
17343: LD_INT 1
17345: PLUS
17346: ST_TO_ADDR
// for i in tmp do
17347: LD_ADDR_VAR 0 1
17351: PUSH
17352: LD_VAR 0 2
17356: PUSH
17357: FOR_IN
17358: IFFALSE 17389
// if GetLives ( i ) < 1000 then
17360: LD_VAR 0 1
17364: PPUSH
17365: CALL_OW 256
17369: PUSH
17370: LD_INT 1000
17372: LESS
17373: IFFALSE 17387
// SetLives ( i , 1000 ) ;
17375: LD_VAR 0 1
17379: PPUSH
17380: LD_INT 1000
17382: PPUSH
17383: CALL_OW 234
17387: GO 17357
17389: POP
17390: POP
// until p > 20 ;
17391: LD_VAR 0 3
17395: PUSH
17396: LD_INT 20
17398: GREATER
17399: IFFALSE 17326
// end ;
17401: PPOPN 3
17403: END
// every 0 0$1 trigger StreamModeActive and sTime do
17404: LD_EXP 24
17408: PUSH
17409: LD_EXP 75
17413: AND
17414: IFFALSE 17449
17416: GO 17418
17418: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17419: LD_INT 28
17421: PPUSH
17422: LD_OWVAR 2
17426: PPUSH
17427: LD_INT 2
17429: PPUSH
17430: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17434: LD_INT 30
17436: PPUSH
17437: LD_OWVAR 2
17441: PPUSH
17442: LD_INT 2
17444: PPUSH
17445: CALL_OW 322
// end ;
17449: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17450: LD_EXP 24
17454: PUSH
17455: LD_EXP 76
17459: AND
17460: IFFALSE 17581
17462: GO 17464
17464: DISABLE
17465: LD_INT 0
17467: PPUSH
17468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: LD_INT 22
17476: PUSH
17477: LD_OWVAR 2
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 21
17488: PUSH
17489: LD_INT 1
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 3
17498: PUSH
17499: LD_INT 23
17501: PUSH
17502: LD_INT 0
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: LIST
17517: PPUSH
17518: CALL_OW 69
17522: ST_TO_ADDR
// if not tmp then
17523: LD_VAR 0 2
17527: NOT
17528: IFFALSE 17532
// exit ;
17530: GO 17581
// for i in tmp do
17532: LD_ADDR_VAR 0 1
17536: PUSH
17537: LD_VAR 0 2
17541: PUSH
17542: FOR_IN
17543: IFFALSE 17579
// begin if Crawls ( i ) then
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 318
17554: IFFALSE 17565
// ComWalk ( i ) ;
17556: LD_VAR 0 1
17560: PPUSH
17561: CALL_OW 138
// SetClass ( i , 2 ) ;
17565: LD_VAR 0 1
17569: PPUSH
17570: LD_INT 2
17572: PPUSH
17573: CALL_OW 336
// end ;
17577: GO 17542
17579: POP
17580: POP
// end ;
17581: PPOPN 2
17583: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17584: LD_EXP 24
17588: PUSH
17589: LD_EXP 77
17593: AND
17594: IFFALSE 17882
17596: GO 17598
17598: DISABLE
17599: LD_INT 0
17601: PPUSH
17602: PPUSH
17603: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17604: LD_OWVAR 2
17608: PPUSH
17609: LD_INT 9
17611: PPUSH
17612: LD_INT 1
17614: PPUSH
17615: LD_INT 1
17617: PPUSH
17618: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17622: LD_INT 9
17624: PPUSH
17625: LD_OWVAR 2
17629: PPUSH
17630: CALL_OW 343
// uc_side := 9 ;
17634: LD_ADDR_OWVAR 20
17638: PUSH
17639: LD_INT 9
17641: ST_TO_ADDR
// uc_nation := 2 ;
17642: LD_ADDR_OWVAR 21
17646: PUSH
17647: LD_INT 2
17649: ST_TO_ADDR
// hc_name := Dark Warrior ;
17650: LD_ADDR_OWVAR 26
17654: PUSH
17655: LD_STRING Dark Warrior
17657: ST_TO_ADDR
// hc_gallery :=  ;
17658: LD_ADDR_OWVAR 33
17662: PUSH
17663: LD_STRING 
17665: ST_TO_ADDR
// hc_noskilllimit := true ;
17666: LD_ADDR_OWVAR 76
17670: PUSH
17671: LD_INT 1
17673: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17674: LD_ADDR_OWVAR 31
17678: PUSH
17679: LD_INT 30
17681: PUSH
17682: LD_INT 30
17684: PUSH
17685: LD_INT 30
17687: PUSH
17688: LD_INT 30
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: ST_TO_ADDR
// un := CreateHuman ;
17697: LD_ADDR_VAR 0 3
17701: PUSH
17702: CALL_OW 44
17706: ST_TO_ADDR
// hc_noskilllimit := false ;
17707: LD_ADDR_OWVAR 76
17711: PUSH
17712: LD_INT 0
17714: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17715: LD_VAR 0 3
17719: PPUSH
17720: LD_INT 1
17722: PPUSH
17723: CALL_OW 51
// ToLua ( playRanger() ) ;
17727: LD_STRING playRanger()
17729: PPUSH
17730: CALL_OW 559
// p := 0 ;
17734: LD_ADDR_VAR 0 2
17738: PUSH
17739: LD_INT 0
17741: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17742: LD_INT 35
17744: PPUSH
17745: CALL_OW 67
// p := p + 1 ;
17749: LD_ADDR_VAR 0 2
17753: PUSH
17754: LD_VAR 0 2
17758: PUSH
17759: LD_INT 1
17761: PLUS
17762: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17763: LD_VAR 0 3
17767: PPUSH
17768: CALL_OW 256
17772: PUSH
17773: LD_INT 1000
17775: LESS
17776: IFFALSE 17790
// SetLives ( un , 1000 ) ;
17778: LD_VAR 0 3
17782: PPUSH
17783: LD_INT 1000
17785: PPUSH
17786: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17790: LD_VAR 0 3
17794: PPUSH
17795: LD_INT 81
17797: PUSH
17798: LD_OWVAR 2
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 91
17809: PUSH
17810: LD_VAR 0 3
17814: PUSH
17815: LD_INT 30
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PPUSH
17827: CALL_OW 69
17831: PPUSH
17832: LD_VAR 0 3
17836: PPUSH
17837: CALL_OW 74
17841: PPUSH
17842: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17846: LD_VAR 0 2
17850: PUSH
17851: LD_INT 80
17853: GREATER
17854: PUSH
17855: LD_VAR 0 3
17859: PPUSH
17860: CALL_OW 301
17864: OR
17865: IFFALSE 17742
// if un then
17867: LD_VAR 0 3
17871: IFFALSE 17882
// RemoveUnit ( un ) ;
17873: LD_VAR 0 3
17877: PPUSH
17878: CALL_OW 64
// end ;
17882: PPOPN 3
17884: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17885: LD_EXP 78
17889: IFFALSE 18005
17891: GO 17893
17893: DISABLE
17894: LD_INT 0
17896: PPUSH
17897: PPUSH
17898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17899: LD_ADDR_VAR 0 2
17903: PUSH
17904: LD_INT 81
17906: PUSH
17907: LD_OWVAR 2
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 21
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PPUSH
17930: CALL_OW 69
17934: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17935: LD_STRING playComputer()
17937: PPUSH
17938: CALL_OW 559
// if not tmp then
17942: LD_VAR 0 2
17946: NOT
17947: IFFALSE 17951
// exit ;
17949: GO 18005
// for i in tmp do
17951: LD_ADDR_VAR 0 1
17955: PUSH
17956: LD_VAR 0 2
17960: PUSH
17961: FOR_IN
17962: IFFALSE 18003
// for j := 1 to 4 do
17964: LD_ADDR_VAR 0 3
17968: PUSH
17969: DOUBLE
17970: LD_INT 1
17972: DEC
17973: ST_TO_ADDR
17974: LD_INT 4
17976: PUSH
17977: FOR_TO
17978: IFFALSE 17999
// SetSkill ( i , j , 10 ) ;
17980: LD_VAR 0 1
17984: PPUSH
17985: LD_VAR 0 3
17989: PPUSH
17990: LD_INT 10
17992: PPUSH
17993: CALL_OW 237
17997: GO 17977
17999: POP
18000: POP
18001: GO 17961
18003: POP
18004: POP
// end ;
18005: PPOPN 3
18007: END
// every 0 0$1 trigger s30 do var i , tmp ;
18008: LD_EXP 79
18012: IFFALSE 18081
18014: GO 18016
18016: DISABLE
18017: LD_INT 0
18019: PPUSH
18020: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18021: LD_ADDR_VAR 0 2
18025: PUSH
18026: LD_INT 22
18028: PUSH
18029: LD_OWVAR 2
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PPUSH
18038: CALL_OW 69
18042: ST_TO_ADDR
// if not tmp then
18043: LD_VAR 0 2
18047: NOT
18048: IFFALSE 18052
// exit ;
18050: GO 18081
// for i in tmp do
18052: LD_ADDR_VAR 0 1
18056: PUSH
18057: LD_VAR 0 2
18061: PUSH
18062: FOR_IN
18063: IFFALSE 18079
// SetLives ( i , 300 ) ;
18065: LD_VAR 0 1
18069: PPUSH
18070: LD_INT 300
18072: PPUSH
18073: CALL_OW 234
18077: GO 18062
18079: POP
18080: POP
// end ;
18081: PPOPN 2
18083: END
// every 0 0$1 trigger s60 do var i , tmp ;
18084: LD_EXP 80
18088: IFFALSE 18157
18090: GO 18092
18092: DISABLE
18093: LD_INT 0
18095: PPUSH
18096: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18097: LD_ADDR_VAR 0 2
18101: PUSH
18102: LD_INT 22
18104: PUSH
18105: LD_OWVAR 2
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PPUSH
18114: CALL_OW 69
18118: ST_TO_ADDR
// if not tmp then
18119: LD_VAR 0 2
18123: NOT
18124: IFFALSE 18128
// exit ;
18126: GO 18157
// for i in tmp do
18128: LD_ADDR_VAR 0 1
18132: PUSH
18133: LD_VAR 0 2
18137: PUSH
18138: FOR_IN
18139: IFFALSE 18155
// SetLives ( i , 600 ) ;
18141: LD_VAR 0 1
18145: PPUSH
18146: LD_INT 600
18148: PPUSH
18149: CALL_OW 234
18153: GO 18138
18155: POP
18156: POP
// end ;
18157: PPOPN 2
18159: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18160: LD_INT 0
18162: PPUSH
// case cmd of 301 :
18163: LD_VAR 0 1
18167: PUSH
18168: LD_INT 301
18170: DOUBLE
18171: EQUAL
18172: IFTRUE 18176
18174: GO 18208
18176: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18177: LD_VAR 0 6
18181: PPUSH
18182: LD_VAR 0 7
18186: PPUSH
18187: LD_VAR 0 8
18191: PPUSH
18192: LD_VAR 0 4
18196: PPUSH
18197: LD_VAR 0 5
18201: PPUSH
18202: CALL 19409 0 5
18206: GO 18329
18208: LD_INT 302
18210: DOUBLE
18211: EQUAL
18212: IFTRUE 18216
18214: GO 18253
18216: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18217: LD_VAR 0 6
18221: PPUSH
18222: LD_VAR 0 7
18226: PPUSH
18227: LD_VAR 0 8
18231: PPUSH
18232: LD_VAR 0 9
18236: PPUSH
18237: LD_VAR 0 4
18241: PPUSH
18242: LD_VAR 0 5
18246: PPUSH
18247: CALL 19500 0 6
18251: GO 18329
18253: LD_INT 303
18255: DOUBLE
18256: EQUAL
18257: IFTRUE 18261
18259: GO 18298
18261: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18262: LD_VAR 0 6
18266: PPUSH
18267: LD_VAR 0 7
18271: PPUSH
18272: LD_VAR 0 8
18276: PPUSH
18277: LD_VAR 0 9
18281: PPUSH
18282: LD_VAR 0 4
18286: PPUSH
18287: LD_VAR 0 5
18291: PPUSH
18292: CALL 18334 0 6
18296: GO 18329
18298: LD_INT 304
18300: DOUBLE
18301: EQUAL
18302: IFTRUE 18306
18304: GO 18328
18306: POP
// hHackTeleport ( unit , x , y ) ; end ;
18307: LD_VAR 0 2
18311: PPUSH
18312: LD_VAR 0 4
18316: PPUSH
18317: LD_VAR 0 5
18321: PPUSH
18322: CALL 20093 0 3
18326: GO 18329
18328: POP
// end ;
18329: LD_VAR 0 12
18333: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18334: LD_INT 0
18336: PPUSH
18337: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18338: LD_VAR 0 1
18342: PUSH
18343: LD_INT 1
18345: LESS
18346: PUSH
18347: LD_VAR 0 1
18351: PUSH
18352: LD_INT 3
18354: GREATER
18355: OR
18356: PUSH
18357: LD_VAR 0 5
18361: PPUSH
18362: LD_VAR 0 6
18366: PPUSH
18367: CALL_OW 428
18371: OR
18372: IFFALSE 18376
// exit ;
18374: GO 19096
// uc_side := your_side ;
18376: LD_ADDR_OWVAR 20
18380: PUSH
18381: LD_OWVAR 2
18385: ST_TO_ADDR
// uc_nation := nation ;
18386: LD_ADDR_OWVAR 21
18390: PUSH
18391: LD_VAR 0 1
18395: ST_TO_ADDR
// bc_level = 1 ;
18396: LD_ADDR_OWVAR 43
18400: PUSH
18401: LD_INT 1
18403: ST_TO_ADDR
// case btype of 1 :
18404: LD_VAR 0 2
18408: PUSH
18409: LD_INT 1
18411: DOUBLE
18412: EQUAL
18413: IFTRUE 18417
18415: GO 18428
18417: POP
// bc_type := b_depot ; 2 :
18418: LD_ADDR_OWVAR 42
18422: PUSH
18423: LD_INT 0
18425: ST_TO_ADDR
18426: GO 19040
18428: LD_INT 2
18430: DOUBLE
18431: EQUAL
18432: IFTRUE 18436
18434: GO 18447
18436: POP
// bc_type := b_warehouse ; 3 :
18437: LD_ADDR_OWVAR 42
18441: PUSH
18442: LD_INT 1
18444: ST_TO_ADDR
18445: GO 19040
18447: LD_INT 3
18449: DOUBLE
18450: EQUAL
18451: IFTRUE 18455
18453: GO 18466
18455: POP
// bc_type := b_lab ; 4 .. 9 :
18456: LD_ADDR_OWVAR 42
18460: PUSH
18461: LD_INT 6
18463: ST_TO_ADDR
18464: GO 19040
18466: LD_INT 4
18468: DOUBLE
18469: GREATEREQUAL
18470: IFFALSE 18478
18472: LD_INT 9
18474: DOUBLE
18475: LESSEQUAL
18476: IFTRUE 18480
18478: GO 18532
18480: POP
// begin bc_type := b_lab_half ;
18481: LD_ADDR_OWVAR 42
18485: PUSH
18486: LD_INT 7
18488: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18489: LD_ADDR_OWVAR 44
18493: PUSH
18494: LD_INT 10
18496: PUSH
18497: LD_INT 11
18499: PUSH
18500: LD_INT 12
18502: PUSH
18503: LD_INT 15
18505: PUSH
18506: LD_INT 14
18508: PUSH
18509: LD_INT 13
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: LD_VAR 0 2
18524: PUSH
18525: LD_INT 3
18527: MINUS
18528: ARRAY
18529: ST_TO_ADDR
// end ; 10 .. 13 :
18530: GO 19040
18532: LD_INT 10
18534: DOUBLE
18535: GREATEREQUAL
18536: IFFALSE 18544
18538: LD_INT 13
18540: DOUBLE
18541: LESSEQUAL
18542: IFTRUE 18546
18544: GO 18623
18546: POP
// begin bc_type := b_lab_full ;
18547: LD_ADDR_OWVAR 42
18551: PUSH
18552: LD_INT 8
18554: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18555: LD_ADDR_OWVAR 44
18559: PUSH
18560: LD_INT 10
18562: PUSH
18563: LD_INT 12
18565: PUSH
18566: LD_INT 14
18568: PUSH
18569: LD_INT 13
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: PUSH
18578: LD_VAR 0 2
18582: PUSH
18583: LD_INT 9
18585: MINUS
18586: ARRAY
18587: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18588: LD_ADDR_OWVAR 45
18592: PUSH
18593: LD_INT 11
18595: PUSH
18596: LD_INT 15
18598: PUSH
18599: LD_INT 12
18601: PUSH
18602: LD_INT 15
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: PUSH
18611: LD_VAR 0 2
18615: PUSH
18616: LD_INT 9
18618: MINUS
18619: ARRAY
18620: ST_TO_ADDR
// end ; 14 :
18621: GO 19040
18623: LD_INT 14
18625: DOUBLE
18626: EQUAL
18627: IFTRUE 18631
18629: GO 18642
18631: POP
// bc_type := b_workshop ; 15 :
18632: LD_ADDR_OWVAR 42
18636: PUSH
18637: LD_INT 2
18639: ST_TO_ADDR
18640: GO 19040
18642: LD_INT 15
18644: DOUBLE
18645: EQUAL
18646: IFTRUE 18650
18648: GO 18661
18650: POP
// bc_type := b_factory ; 16 :
18651: LD_ADDR_OWVAR 42
18655: PUSH
18656: LD_INT 3
18658: ST_TO_ADDR
18659: GO 19040
18661: LD_INT 16
18663: DOUBLE
18664: EQUAL
18665: IFTRUE 18669
18667: GO 18680
18669: POP
// bc_type := b_ext_gun ; 17 :
18670: LD_ADDR_OWVAR 42
18674: PUSH
18675: LD_INT 17
18677: ST_TO_ADDR
18678: GO 19040
18680: LD_INT 17
18682: DOUBLE
18683: EQUAL
18684: IFTRUE 18688
18686: GO 18716
18688: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18689: LD_ADDR_OWVAR 42
18693: PUSH
18694: LD_INT 19
18696: PUSH
18697: LD_INT 23
18699: PUSH
18700: LD_INT 19
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: PUSH
18708: LD_VAR 0 1
18712: ARRAY
18713: ST_TO_ADDR
18714: GO 19040
18716: LD_INT 18
18718: DOUBLE
18719: EQUAL
18720: IFTRUE 18724
18722: GO 18735
18724: POP
// bc_type := b_ext_radar ; 19 :
18725: LD_ADDR_OWVAR 42
18729: PUSH
18730: LD_INT 20
18732: ST_TO_ADDR
18733: GO 19040
18735: LD_INT 19
18737: DOUBLE
18738: EQUAL
18739: IFTRUE 18743
18741: GO 18754
18743: POP
// bc_type := b_ext_radio ; 20 :
18744: LD_ADDR_OWVAR 42
18748: PUSH
18749: LD_INT 22
18751: ST_TO_ADDR
18752: GO 19040
18754: LD_INT 20
18756: DOUBLE
18757: EQUAL
18758: IFTRUE 18762
18760: GO 18773
18762: POP
// bc_type := b_ext_siberium ; 21 :
18763: LD_ADDR_OWVAR 42
18767: PUSH
18768: LD_INT 21
18770: ST_TO_ADDR
18771: GO 19040
18773: LD_INT 21
18775: DOUBLE
18776: EQUAL
18777: IFTRUE 18781
18779: GO 18792
18781: POP
// bc_type := b_ext_computer ; 22 :
18782: LD_ADDR_OWVAR 42
18786: PUSH
18787: LD_INT 24
18789: ST_TO_ADDR
18790: GO 19040
18792: LD_INT 22
18794: DOUBLE
18795: EQUAL
18796: IFTRUE 18800
18798: GO 18811
18800: POP
// bc_type := b_ext_track ; 23 :
18801: LD_ADDR_OWVAR 42
18805: PUSH
18806: LD_INT 16
18808: ST_TO_ADDR
18809: GO 19040
18811: LD_INT 23
18813: DOUBLE
18814: EQUAL
18815: IFTRUE 18819
18817: GO 18830
18819: POP
// bc_type := b_ext_laser ; 24 :
18820: LD_ADDR_OWVAR 42
18824: PUSH
18825: LD_INT 25
18827: ST_TO_ADDR
18828: GO 19040
18830: LD_INT 24
18832: DOUBLE
18833: EQUAL
18834: IFTRUE 18838
18836: GO 18849
18838: POP
// bc_type := b_control_tower ; 25 :
18839: LD_ADDR_OWVAR 42
18843: PUSH
18844: LD_INT 36
18846: ST_TO_ADDR
18847: GO 19040
18849: LD_INT 25
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 18868
18857: POP
// bc_type := b_breastwork ; 26 :
18858: LD_ADDR_OWVAR 42
18862: PUSH
18863: LD_INT 31
18865: ST_TO_ADDR
18866: GO 19040
18868: LD_INT 26
18870: DOUBLE
18871: EQUAL
18872: IFTRUE 18876
18874: GO 18887
18876: POP
// bc_type := b_bunker ; 27 :
18877: LD_ADDR_OWVAR 42
18881: PUSH
18882: LD_INT 32
18884: ST_TO_ADDR
18885: GO 19040
18887: LD_INT 27
18889: DOUBLE
18890: EQUAL
18891: IFTRUE 18895
18893: GO 18906
18895: POP
// bc_type := b_turret ; 28 :
18896: LD_ADDR_OWVAR 42
18900: PUSH
18901: LD_INT 33
18903: ST_TO_ADDR
18904: GO 19040
18906: LD_INT 28
18908: DOUBLE
18909: EQUAL
18910: IFTRUE 18914
18912: GO 18925
18914: POP
// bc_type := b_armoury ; 29 :
18915: LD_ADDR_OWVAR 42
18919: PUSH
18920: LD_INT 4
18922: ST_TO_ADDR
18923: GO 19040
18925: LD_INT 29
18927: DOUBLE
18928: EQUAL
18929: IFTRUE 18933
18931: GO 18944
18933: POP
// bc_type := b_barracks ; 30 :
18934: LD_ADDR_OWVAR 42
18938: PUSH
18939: LD_INT 5
18941: ST_TO_ADDR
18942: GO 19040
18944: LD_INT 30
18946: DOUBLE
18947: EQUAL
18948: IFTRUE 18952
18950: GO 18963
18952: POP
// bc_type := b_solar_power ; 31 :
18953: LD_ADDR_OWVAR 42
18957: PUSH
18958: LD_INT 27
18960: ST_TO_ADDR
18961: GO 19040
18963: LD_INT 31
18965: DOUBLE
18966: EQUAL
18967: IFTRUE 18971
18969: GO 18982
18971: POP
// bc_type := b_oil_power ; 32 :
18972: LD_ADDR_OWVAR 42
18976: PUSH
18977: LD_INT 26
18979: ST_TO_ADDR
18980: GO 19040
18982: LD_INT 32
18984: DOUBLE
18985: EQUAL
18986: IFTRUE 18990
18988: GO 19001
18990: POP
// bc_type := b_siberite_power ; 33 :
18991: LD_ADDR_OWVAR 42
18995: PUSH
18996: LD_INT 28
18998: ST_TO_ADDR
18999: GO 19040
19001: LD_INT 33
19003: DOUBLE
19004: EQUAL
19005: IFTRUE 19009
19007: GO 19020
19009: POP
// bc_type := b_oil_mine ; 34 :
19010: LD_ADDR_OWVAR 42
19014: PUSH
19015: LD_INT 29
19017: ST_TO_ADDR
19018: GO 19040
19020: LD_INT 34
19022: DOUBLE
19023: EQUAL
19024: IFTRUE 19028
19026: GO 19039
19028: POP
// bc_type := b_siberite_mine ; end ;
19029: LD_ADDR_OWVAR 42
19033: PUSH
19034: LD_INT 30
19036: ST_TO_ADDR
19037: GO 19040
19039: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19040: LD_ADDR_VAR 0 8
19044: PUSH
19045: LD_VAR 0 5
19049: PPUSH
19050: LD_VAR 0 6
19054: PPUSH
19055: LD_VAR 0 3
19059: PPUSH
19060: CALL_OW 47
19064: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19065: LD_OWVAR 42
19069: PUSH
19070: LD_INT 32
19072: PUSH
19073: LD_INT 33
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: IN
19080: IFFALSE 19096
// PlaceWeaponTurret ( b , weapon ) ;
19082: LD_VAR 0 8
19086: PPUSH
19087: LD_VAR 0 4
19091: PPUSH
19092: CALL_OW 431
// end ;
19096: LD_VAR 0 7
19100: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19101: LD_INT 0
19103: PPUSH
19104: PPUSH
19105: PPUSH
19106: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19107: LD_ADDR_VAR 0 4
19111: PUSH
19112: LD_INT 22
19114: PUSH
19115: LD_OWVAR 2
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 2
19126: PUSH
19127: LD_INT 30
19129: PUSH
19130: LD_INT 0
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 30
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PPUSH
19156: CALL_OW 69
19160: ST_TO_ADDR
// if not tmp then
19161: LD_VAR 0 4
19165: NOT
19166: IFFALSE 19170
// exit ;
19168: GO 19229
// for i in tmp do
19170: LD_ADDR_VAR 0 2
19174: PUSH
19175: LD_VAR 0 4
19179: PUSH
19180: FOR_IN
19181: IFFALSE 19227
// for j = 1 to 3 do
19183: LD_ADDR_VAR 0 3
19187: PUSH
19188: DOUBLE
19189: LD_INT 1
19191: DEC
19192: ST_TO_ADDR
19193: LD_INT 3
19195: PUSH
19196: FOR_TO
19197: IFFALSE 19223
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19199: LD_VAR 0 2
19203: PPUSH
19204: CALL_OW 274
19208: PPUSH
19209: LD_VAR 0 3
19213: PPUSH
19214: LD_INT 99999
19216: PPUSH
19217: CALL_OW 277
19221: GO 19196
19223: POP
19224: POP
19225: GO 19180
19227: POP
19228: POP
// end ;
19229: LD_VAR 0 1
19233: RET
// export function hHackSetLevel10 ; var i , j ; begin
19234: LD_INT 0
19236: PPUSH
19237: PPUSH
19238: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19239: LD_ADDR_VAR 0 2
19243: PUSH
19244: LD_INT 21
19246: PUSH
19247: LD_INT 1
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PPUSH
19254: CALL_OW 69
19258: PUSH
19259: FOR_IN
19260: IFFALSE 19312
// if IsSelected ( i ) then
19262: LD_VAR 0 2
19266: PPUSH
19267: CALL_OW 306
19271: IFFALSE 19310
// begin for j := 1 to 4 do
19273: LD_ADDR_VAR 0 3
19277: PUSH
19278: DOUBLE
19279: LD_INT 1
19281: DEC
19282: ST_TO_ADDR
19283: LD_INT 4
19285: PUSH
19286: FOR_TO
19287: IFFALSE 19308
// SetSkill ( i , j , 10 ) ;
19289: LD_VAR 0 2
19293: PPUSH
19294: LD_VAR 0 3
19298: PPUSH
19299: LD_INT 10
19301: PPUSH
19302: CALL_OW 237
19306: GO 19286
19308: POP
19309: POP
// end ;
19310: GO 19259
19312: POP
19313: POP
// end ;
19314: LD_VAR 0 1
19318: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19319: LD_INT 0
19321: PPUSH
19322: PPUSH
19323: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19324: LD_ADDR_VAR 0 2
19328: PUSH
19329: LD_INT 22
19331: PUSH
19332: LD_OWVAR 2
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 21
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PPUSH
19355: CALL_OW 69
19359: PUSH
19360: FOR_IN
19361: IFFALSE 19402
// begin for j := 1 to 4 do
19363: LD_ADDR_VAR 0 3
19367: PUSH
19368: DOUBLE
19369: LD_INT 1
19371: DEC
19372: ST_TO_ADDR
19373: LD_INT 4
19375: PUSH
19376: FOR_TO
19377: IFFALSE 19398
// SetSkill ( i , j , 10 ) ;
19379: LD_VAR 0 2
19383: PPUSH
19384: LD_VAR 0 3
19388: PPUSH
19389: LD_INT 10
19391: PPUSH
19392: CALL_OW 237
19396: GO 19376
19398: POP
19399: POP
// end ;
19400: GO 19360
19402: POP
19403: POP
// end ;
19404: LD_VAR 0 1
19408: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19409: LD_INT 0
19411: PPUSH
// uc_side := your_side ;
19412: LD_ADDR_OWVAR 20
19416: PUSH
19417: LD_OWVAR 2
19421: ST_TO_ADDR
// uc_nation := nation ;
19422: LD_ADDR_OWVAR 21
19426: PUSH
19427: LD_VAR 0 1
19431: ST_TO_ADDR
// InitHc ;
19432: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19436: LD_INT 0
19438: PPUSH
19439: LD_VAR 0 2
19443: PPUSH
19444: LD_VAR 0 3
19448: PPUSH
19449: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19453: LD_VAR 0 4
19457: PPUSH
19458: LD_VAR 0 5
19462: PPUSH
19463: CALL_OW 428
19467: PUSH
19468: LD_INT 0
19470: EQUAL
19471: IFFALSE 19495
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19473: CALL_OW 44
19477: PPUSH
19478: LD_VAR 0 4
19482: PPUSH
19483: LD_VAR 0 5
19487: PPUSH
19488: LD_INT 1
19490: PPUSH
19491: CALL_OW 48
// end ;
19495: LD_VAR 0 6
19499: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19500: LD_INT 0
19502: PPUSH
19503: PPUSH
// uc_side := your_side ;
19504: LD_ADDR_OWVAR 20
19508: PUSH
19509: LD_OWVAR 2
19513: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19514: LD_VAR 0 1
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: LD_INT 3
19527: PUSH
19528: LD_INT 4
19530: PUSH
19531: LD_INT 5
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: IN
19541: IFFALSE 19553
// uc_nation := nation_american else
19543: LD_ADDR_OWVAR 21
19547: PUSH
19548: LD_INT 1
19550: ST_TO_ADDR
19551: GO 19596
// if chassis in [ 11 , 12 , 13 , 14 ] then
19553: LD_VAR 0 1
19557: PUSH
19558: LD_INT 11
19560: PUSH
19561: LD_INT 12
19563: PUSH
19564: LD_INT 13
19566: PUSH
19567: LD_INT 14
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: IN
19576: IFFALSE 19588
// uc_nation := nation_arabian else
19578: LD_ADDR_OWVAR 21
19582: PUSH
19583: LD_INT 2
19585: ST_TO_ADDR
19586: GO 19596
// uc_nation := nation_russian ;
19588: LD_ADDR_OWVAR 21
19592: PUSH
19593: LD_INT 3
19595: ST_TO_ADDR
// vc_chassis := chassis ;
19596: LD_ADDR_OWVAR 37
19600: PUSH
19601: LD_VAR 0 1
19605: ST_TO_ADDR
// vc_engine := engine ;
19606: LD_ADDR_OWVAR 39
19610: PUSH
19611: LD_VAR 0 2
19615: ST_TO_ADDR
// vc_control := control ;
19616: LD_ADDR_OWVAR 38
19620: PUSH
19621: LD_VAR 0 3
19625: ST_TO_ADDR
// vc_weapon := weapon ;
19626: LD_ADDR_OWVAR 40
19630: PUSH
19631: LD_VAR 0 4
19635: ST_TO_ADDR
// un := CreateVehicle ;
19636: LD_ADDR_VAR 0 8
19640: PUSH
19641: CALL_OW 45
19645: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19646: LD_VAR 0 8
19650: PPUSH
19651: LD_INT 0
19653: PPUSH
19654: LD_INT 5
19656: PPUSH
19657: CALL_OW 12
19661: PPUSH
19662: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19666: LD_VAR 0 8
19670: PPUSH
19671: LD_VAR 0 5
19675: PPUSH
19676: LD_VAR 0 6
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: CALL_OW 48
// end ;
19688: LD_VAR 0 7
19692: RET
// export hInvincible ; every 1 do
19693: GO 19695
19695: DISABLE
// hInvincible := [ ] ;
19696: LD_ADDR_EXP 81
19700: PUSH
19701: EMPTY
19702: ST_TO_ADDR
19703: END
// every 10 do var i ;
19704: GO 19706
19706: DISABLE
19707: LD_INT 0
19709: PPUSH
// begin enable ;
19710: ENABLE
// if not hInvincible then
19711: LD_EXP 81
19715: NOT
19716: IFFALSE 19720
// exit ;
19718: GO 19764
// for i in hInvincible do
19720: LD_ADDR_VAR 0 1
19724: PUSH
19725: LD_EXP 81
19729: PUSH
19730: FOR_IN
19731: IFFALSE 19762
// if GetLives ( i ) < 1000 then
19733: LD_VAR 0 1
19737: PPUSH
19738: CALL_OW 256
19742: PUSH
19743: LD_INT 1000
19745: LESS
19746: IFFALSE 19760
// SetLives ( i , 1000 ) ;
19748: LD_VAR 0 1
19752: PPUSH
19753: LD_INT 1000
19755: PPUSH
19756: CALL_OW 234
19760: GO 19730
19762: POP
19763: POP
// end ;
19764: PPOPN 1
19766: END
// export function hHackInvincible ; var i ; begin
19767: LD_INT 0
19769: PPUSH
19770: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19771: LD_ADDR_VAR 0 2
19775: PUSH
19776: LD_INT 2
19778: PUSH
19779: LD_INT 21
19781: PUSH
19782: LD_INT 1
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 21
19791: PUSH
19792: LD_INT 2
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: PPUSH
19804: CALL_OW 69
19808: PUSH
19809: FOR_IN
19810: IFFALSE 19871
// if IsSelected ( i ) then
19812: LD_VAR 0 2
19816: PPUSH
19817: CALL_OW 306
19821: IFFALSE 19869
// begin if i in hInvincible then
19823: LD_VAR 0 2
19827: PUSH
19828: LD_EXP 81
19832: IN
19833: IFFALSE 19853
// hInvincible := hInvincible diff i else
19835: LD_ADDR_EXP 81
19839: PUSH
19840: LD_EXP 81
19844: PUSH
19845: LD_VAR 0 2
19849: DIFF
19850: ST_TO_ADDR
19851: GO 19869
// hInvincible := hInvincible union i ;
19853: LD_ADDR_EXP 81
19857: PUSH
19858: LD_EXP 81
19862: PUSH
19863: LD_VAR 0 2
19867: UNION
19868: ST_TO_ADDR
// end ;
19869: GO 19809
19871: POP
19872: POP
// end ;
19873: LD_VAR 0 1
19877: RET
// export function hHackInvisible ; var i , j ; begin
19878: LD_INT 0
19880: PPUSH
19881: PPUSH
19882: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19883: LD_ADDR_VAR 0 2
19887: PUSH
19888: LD_INT 21
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PPUSH
19898: CALL_OW 69
19902: PUSH
19903: FOR_IN
19904: IFFALSE 19928
// if IsSelected ( i ) then
19906: LD_VAR 0 2
19910: PPUSH
19911: CALL_OW 306
19915: IFFALSE 19926
// ComForceInvisible ( i ) ;
19917: LD_VAR 0 2
19921: PPUSH
19922: CALL_OW 496
19926: GO 19903
19928: POP
19929: POP
// end ;
19930: LD_VAR 0 1
19934: RET
// export function hHackChangeYourSide ; begin
19935: LD_INT 0
19937: PPUSH
// if your_side = 8 then
19938: LD_OWVAR 2
19942: PUSH
19943: LD_INT 8
19945: EQUAL
19946: IFFALSE 19958
// your_side := 0 else
19948: LD_ADDR_OWVAR 2
19952: PUSH
19953: LD_INT 0
19955: ST_TO_ADDR
19956: GO 19972
// your_side := your_side + 1 ;
19958: LD_ADDR_OWVAR 2
19962: PUSH
19963: LD_OWVAR 2
19967: PUSH
19968: LD_INT 1
19970: PLUS
19971: ST_TO_ADDR
// end ;
19972: LD_VAR 0 1
19976: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19977: LD_INT 0
19979: PPUSH
19980: PPUSH
19981: PPUSH
// for i in all_units do
19982: LD_ADDR_VAR 0 2
19986: PUSH
19987: LD_OWVAR 3
19991: PUSH
19992: FOR_IN
19993: IFFALSE 20071
// if IsSelected ( i ) then
19995: LD_VAR 0 2
19999: PPUSH
20000: CALL_OW 306
20004: IFFALSE 20069
// begin j := GetSide ( i ) ;
20006: LD_ADDR_VAR 0 3
20010: PUSH
20011: LD_VAR 0 2
20015: PPUSH
20016: CALL_OW 255
20020: ST_TO_ADDR
// if j = 8 then
20021: LD_VAR 0 3
20025: PUSH
20026: LD_INT 8
20028: EQUAL
20029: IFFALSE 20041
// j := 0 else
20031: LD_ADDR_VAR 0 3
20035: PUSH
20036: LD_INT 0
20038: ST_TO_ADDR
20039: GO 20055
// j := j + 1 ;
20041: LD_ADDR_VAR 0 3
20045: PUSH
20046: LD_VAR 0 3
20050: PUSH
20051: LD_INT 1
20053: PLUS
20054: ST_TO_ADDR
// SetSide ( i , j ) ;
20055: LD_VAR 0 2
20059: PPUSH
20060: LD_VAR 0 3
20064: PPUSH
20065: CALL_OW 235
// end ;
20069: GO 19992
20071: POP
20072: POP
// end ;
20073: LD_VAR 0 1
20077: RET
// export function hHackFog ; begin
20078: LD_INT 0
20080: PPUSH
// FogOff ( true ) ;
20081: LD_INT 1
20083: PPUSH
20084: CALL_OW 344
// end ;
20088: LD_VAR 0 1
20092: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20093: LD_INT 0
20095: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20096: LD_VAR 0 1
20100: PPUSH
20101: LD_VAR 0 2
20105: PPUSH
20106: LD_VAR 0 3
20110: PPUSH
20111: LD_INT 1
20113: PPUSH
20114: LD_INT 1
20116: PPUSH
20117: CALL_OW 483
// CenterOnXY ( x , y ) ;
20121: LD_VAR 0 2
20125: PPUSH
20126: LD_VAR 0 3
20130: PPUSH
20131: CALL_OW 84
// end ; end_of_file
20135: LD_VAR 0 4
20139: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20140: LD_INT 0
20142: PPUSH
20143: PPUSH
20144: PPUSH
20145: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20146: LD_VAR 0 1
20150: PPUSH
20151: CALL_OW 264
20155: PUSH
20156: LD_EXP 97
20160: EQUAL
20161: IFFALSE 20233
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20163: LD_INT 68
20165: PPUSH
20166: LD_VAR 0 1
20170: PPUSH
20171: CALL_OW 255
20175: PPUSH
20176: CALL_OW 321
20180: PUSH
20181: LD_INT 2
20183: EQUAL
20184: IFFALSE 20196
// eff := 70 else
20186: LD_ADDR_VAR 0 4
20190: PUSH
20191: LD_INT 70
20193: ST_TO_ADDR
20194: GO 20204
// eff := 30 ;
20196: LD_ADDR_VAR 0 4
20200: PUSH
20201: LD_INT 30
20203: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20204: LD_VAR 0 1
20208: PPUSH
20209: CALL_OW 250
20213: PPUSH
20214: LD_VAR 0 1
20218: PPUSH
20219: CALL_OW 251
20223: PPUSH
20224: LD_VAR 0 4
20228: PPUSH
20229: CALL_OW 495
// end ; end ;
20233: LD_VAR 0 2
20237: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20238: LD_INT 0
20240: PPUSH
// end ;
20241: LD_VAR 0 4
20245: RET
// export function SOS_Command ( cmd ) ; begin
20246: LD_INT 0
20248: PPUSH
// end ;
20249: LD_VAR 0 2
20253: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20254: LD_INT 0
20256: PPUSH
// end ;
20257: LD_VAR 0 6
20261: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20262: LD_INT 0
20264: PPUSH
20265: PPUSH
// if not vehicle or not factory then
20266: LD_VAR 0 1
20270: NOT
20271: PUSH
20272: LD_VAR 0 2
20276: NOT
20277: OR
20278: IFFALSE 20282
// exit ;
20280: GO 20513
// if factoryWaypoints >= factory then
20282: LD_EXP 82
20286: PUSH
20287: LD_VAR 0 2
20291: GREATEREQUAL
20292: IFFALSE 20513
// if factoryWaypoints [ factory ] then
20294: LD_EXP 82
20298: PUSH
20299: LD_VAR 0 2
20303: ARRAY
20304: IFFALSE 20513
// begin if GetControl ( vehicle ) = control_manual then
20306: LD_VAR 0 1
20310: PPUSH
20311: CALL_OW 263
20315: PUSH
20316: LD_INT 1
20318: EQUAL
20319: IFFALSE 20400
// begin driver := IsDrivenBy ( vehicle ) ;
20321: LD_ADDR_VAR 0 4
20325: PUSH
20326: LD_VAR 0 1
20330: PPUSH
20331: CALL_OW 311
20335: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20336: LD_VAR 0 4
20340: PPUSH
20341: LD_EXP 82
20345: PUSH
20346: LD_VAR 0 2
20350: ARRAY
20351: PUSH
20352: LD_INT 3
20354: ARRAY
20355: PPUSH
20356: LD_EXP 82
20360: PUSH
20361: LD_VAR 0 2
20365: ARRAY
20366: PUSH
20367: LD_INT 4
20369: ARRAY
20370: PPUSH
20371: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20375: LD_VAR 0 4
20379: PPUSH
20380: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20384: LD_VAR 0 4
20388: PPUSH
20389: LD_VAR 0 2
20393: PPUSH
20394: CALL_OW 180
// end else
20398: GO 20513
// if GetControl ( vehicle ) = control_remote then
20400: LD_VAR 0 1
20404: PPUSH
20405: CALL_OW 263
20409: PUSH
20410: LD_INT 2
20412: EQUAL
20413: IFFALSE 20474
// begin wait ( 0 0$2 ) ;
20415: LD_INT 70
20417: PPUSH
20418: CALL_OW 67
// if Connect ( vehicle ) then
20422: LD_VAR 0 1
20426: PPUSH
20427: CALL 32913 0 1
20431: IFFALSE 20472
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20433: LD_VAR 0 1
20437: PPUSH
20438: LD_EXP 82
20442: PUSH
20443: LD_VAR 0 2
20447: ARRAY
20448: PUSH
20449: LD_INT 3
20451: ARRAY
20452: PPUSH
20453: LD_EXP 82
20457: PUSH
20458: LD_VAR 0 2
20462: ARRAY
20463: PUSH
20464: LD_INT 4
20466: ARRAY
20467: PPUSH
20468: CALL_OW 171
// end else
20472: GO 20513
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20474: LD_VAR 0 1
20478: PPUSH
20479: LD_EXP 82
20483: PUSH
20484: LD_VAR 0 2
20488: ARRAY
20489: PUSH
20490: LD_INT 3
20492: ARRAY
20493: PPUSH
20494: LD_EXP 82
20498: PUSH
20499: LD_VAR 0 2
20503: ARRAY
20504: PUSH
20505: LD_INT 4
20507: ARRAY
20508: PPUSH
20509: CALL_OW 171
// end ; end ;
20513: LD_VAR 0 3
20517: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20518: LD_INT 0
20520: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20521: LD_VAR 0 1
20525: PUSH
20526: LD_INT 250
20528: EQUAL
20529: PUSH
20530: LD_VAR 0 2
20534: PPUSH
20535: CALL_OW 264
20539: PUSH
20540: LD_EXP 100
20544: EQUAL
20545: AND
20546: IFFALSE 20567
// MinerPlaceMine ( unit , x , y ) ;
20548: LD_VAR 0 2
20552: PPUSH
20553: LD_VAR 0 4
20557: PPUSH
20558: LD_VAR 0 5
20562: PPUSH
20563: CALL 23295 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20567: LD_VAR 0 1
20571: PUSH
20572: LD_INT 251
20574: EQUAL
20575: PUSH
20576: LD_VAR 0 2
20580: PPUSH
20581: CALL_OW 264
20585: PUSH
20586: LD_EXP 100
20590: EQUAL
20591: AND
20592: IFFALSE 20613
// MinerDetonateMine ( unit , x , y ) ;
20594: LD_VAR 0 2
20598: PPUSH
20599: LD_VAR 0 4
20603: PPUSH
20604: LD_VAR 0 5
20608: PPUSH
20609: CALL 23572 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20613: LD_VAR 0 1
20617: PUSH
20618: LD_INT 252
20620: EQUAL
20621: PUSH
20622: LD_VAR 0 2
20626: PPUSH
20627: CALL_OW 264
20631: PUSH
20632: LD_EXP 100
20636: EQUAL
20637: AND
20638: IFFALSE 20659
// MinerCreateMinefield ( unit , x , y ) ;
20640: LD_VAR 0 2
20644: PPUSH
20645: LD_VAR 0 4
20649: PPUSH
20650: LD_VAR 0 5
20654: PPUSH
20655: CALL 23989 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20659: LD_VAR 0 1
20663: PUSH
20664: LD_INT 253
20666: EQUAL
20667: PUSH
20668: LD_VAR 0 2
20672: PPUSH
20673: CALL_OW 257
20677: PUSH
20678: LD_INT 5
20680: EQUAL
20681: AND
20682: IFFALSE 20703
// ComBinocular ( unit , x , y ) ;
20684: LD_VAR 0 2
20688: PPUSH
20689: LD_VAR 0 4
20693: PPUSH
20694: LD_VAR 0 5
20698: PPUSH
20699: CALL 24360 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20703: LD_VAR 0 1
20707: PUSH
20708: LD_INT 254
20710: EQUAL
20711: PUSH
20712: LD_VAR 0 2
20716: PPUSH
20717: CALL_OW 264
20721: PUSH
20722: LD_EXP 95
20726: EQUAL
20727: AND
20728: PUSH
20729: LD_VAR 0 3
20733: PPUSH
20734: CALL_OW 263
20738: PUSH
20739: LD_INT 3
20741: EQUAL
20742: AND
20743: IFFALSE 20759
// HackDestroyVehicle ( unit , selectedUnit ) ;
20745: LD_VAR 0 2
20749: PPUSH
20750: LD_VAR 0 3
20754: PPUSH
20755: CALL 22655 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20759: LD_VAR 0 1
20763: PUSH
20764: LD_INT 255
20766: EQUAL
20767: PUSH
20768: LD_VAR 0 2
20772: PPUSH
20773: CALL_OW 264
20777: PUSH
20778: LD_INT 14
20780: PUSH
20781: LD_INT 53
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: IN
20788: AND
20789: PUSH
20790: LD_VAR 0 4
20794: PPUSH
20795: LD_VAR 0 5
20799: PPUSH
20800: CALL_OW 488
20804: AND
20805: IFFALSE 20829
// CutTreeXYR ( unit , x , y , 12 ) ;
20807: LD_VAR 0 2
20811: PPUSH
20812: LD_VAR 0 4
20816: PPUSH
20817: LD_VAR 0 5
20821: PPUSH
20822: LD_INT 12
20824: PPUSH
20825: CALL 21221 0 4
// if cmd = 256 then
20829: LD_VAR 0 1
20833: PUSH
20834: LD_INT 256
20836: EQUAL
20837: IFFALSE 20858
// SetFactoryWaypoint ( unit , x , y ) ;
20839: LD_VAR 0 2
20843: PPUSH
20844: LD_VAR 0 4
20848: PPUSH
20849: LD_VAR 0 5
20853: PPUSH
20854: CALL 20863 0 3
// end ;
20858: LD_VAR 0 6
20862: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20863: LD_INT 0
20865: PPUSH
20866: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20867: LD_VAR 0 1
20871: NOT
20872: PUSH
20873: LD_VAR 0 2
20877: PPUSH
20878: LD_VAR 0 3
20882: PPUSH
20883: CALL_OW 488
20887: NOT
20888: OR
20889: PUSH
20890: LD_VAR 0 1
20894: PPUSH
20895: CALL_OW 266
20899: PUSH
20900: LD_INT 3
20902: NONEQUAL
20903: PUSH
20904: LD_VAR 0 1
20908: PPUSH
20909: CALL_OW 247
20913: PUSH
20914: LD_INT 1
20916: EQUAL
20917: NOT
20918: AND
20919: OR
20920: IFFALSE 20924
// exit ;
20922: GO 21073
// if GetType ( factory ) = unit_human then
20924: LD_VAR 0 1
20928: PPUSH
20929: CALL_OW 247
20933: PUSH
20934: LD_INT 1
20936: EQUAL
20937: IFFALSE 20954
// factory := IsInUnit ( factory ) ;
20939: LD_ADDR_VAR 0 1
20943: PUSH
20944: LD_VAR 0 1
20948: PPUSH
20949: CALL_OW 310
20953: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20954: LD_VAR 0 1
20958: PPUSH
20959: CALL_OW 266
20963: PUSH
20964: LD_INT 3
20966: NONEQUAL
20967: IFFALSE 20971
// exit ;
20969: GO 21073
// if HexInfo ( x , y ) = factory then
20971: LD_VAR 0 2
20975: PPUSH
20976: LD_VAR 0 3
20980: PPUSH
20981: CALL_OW 428
20985: PUSH
20986: LD_VAR 0 1
20990: EQUAL
20991: IFFALSE 21018
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20993: LD_ADDR_EXP 82
20997: PUSH
20998: LD_EXP 82
21002: PPUSH
21003: LD_VAR 0 1
21007: PPUSH
21008: LD_INT 0
21010: PPUSH
21011: CALL_OW 1
21015: ST_TO_ADDR
21016: GO 21069
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21018: LD_ADDR_EXP 82
21022: PUSH
21023: LD_EXP 82
21027: PPUSH
21028: LD_VAR 0 1
21032: PPUSH
21033: LD_VAR 0 1
21037: PPUSH
21038: CALL_OW 255
21042: PUSH
21043: LD_VAR 0 1
21047: PUSH
21048: LD_VAR 0 2
21052: PUSH
21053: LD_VAR 0 3
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: PPUSH
21064: CALL_OW 1
21068: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21069: CALL 21078 0 0
// end ;
21073: LD_VAR 0 4
21077: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
21078: LD_INT 0
21080: PPUSH
21081: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21082: LD_STRING resetFactoryWaypoint();
21084: PPUSH
21085: CALL_OW 559
// if factoryWaypoints then
21089: LD_EXP 82
21093: IFFALSE 21216
// begin for i := 1 to factoryWaypoints do
21095: LD_ADDR_VAR 0 2
21099: PUSH
21100: DOUBLE
21101: LD_INT 1
21103: DEC
21104: ST_TO_ADDR
21105: LD_EXP 82
21109: PUSH
21110: FOR_TO
21111: IFFALSE 21214
// if factoryWaypoints [ i ] then
21113: LD_EXP 82
21117: PUSH
21118: LD_VAR 0 2
21122: ARRAY
21123: IFFALSE 21212
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
21125: LD_STRING setFactoryWaypointXY(
21127: PUSH
21128: LD_EXP 82
21132: PUSH
21133: LD_VAR 0 2
21137: ARRAY
21138: PUSH
21139: LD_INT 1
21141: ARRAY
21142: STR
21143: PUSH
21144: LD_STRING ,
21146: STR
21147: PUSH
21148: LD_EXP 82
21152: PUSH
21153: LD_VAR 0 2
21157: ARRAY
21158: PUSH
21159: LD_INT 2
21161: ARRAY
21162: STR
21163: PUSH
21164: LD_STRING ,
21166: STR
21167: PUSH
21168: LD_EXP 82
21172: PUSH
21173: LD_VAR 0 2
21177: ARRAY
21178: PUSH
21179: LD_INT 3
21181: ARRAY
21182: STR
21183: PUSH
21184: LD_STRING ,
21186: STR
21187: PUSH
21188: LD_EXP 82
21192: PUSH
21193: LD_VAR 0 2
21197: ARRAY
21198: PUSH
21199: LD_INT 4
21201: ARRAY
21202: STR
21203: PUSH
21204: LD_STRING )
21206: STR
21207: PPUSH
21208: CALL_OW 559
21212: GO 21110
21214: POP
21215: POP
// end ; end ;
21216: LD_VAR 0 1
21220: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21221: LD_INT 0
21223: PPUSH
21224: PPUSH
21225: PPUSH
21226: PPUSH
21227: PPUSH
21228: PPUSH
21229: PPUSH
21230: PPUSH
21231: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21232: LD_VAR 0 1
21236: NOT
21237: PUSH
21238: LD_VAR 0 2
21242: PPUSH
21243: LD_VAR 0 3
21247: PPUSH
21248: CALL_OW 488
21252: NOT
21253: OR
21254: PUSH
21255: LD_VAR 0 4
21259: NOT
21260: OR
21261: IFFALSE 21265
// exit ;
21263: GO 21605
// list := [ ] ;
21265: LD_ADDR_VAR 0 13
21269: PUSH
21270: EMPTY
21271: ST_TO_ADDR
// if x - r < 0 then
21272: LD_VAR 0 2
21276: PUSH
21277: LD_VAR 0 4
21281: MINUS
21282: PUSH
21283: LD_INT 0
21285: LESS
21286: IFFALSE 21298
// min_x := 0 else
21288: LD_ADDR_VAR 0 7
21292: PUSH
21293: LD_INT 0
21295: ST_TO_ADDR
21296: GO 21314
// min_x := x - r ;
21298: LD_ADDR_VAR 0 7
21302: PUSH
21303: LD_VAR 0 2
21307: PUSH
21308: LD_VAR 0 4
21312: MINUS
21313: ST_TO_ADDR
// if y - r < 0 then
21314: LD_VAR 0 3
21318: PUSH
21319: LD_VAR 0 4
21323: MINUS
21324: PUSH
21325: LD_INT 0
21327: LESS
21328: IFFALSE 21340
// min_y := 0 else
21330: LD_ADDR_VAR 0 8
21334: PUSH
21335: LD_INT 0
21337: ST_TO_ADDR
21338: GO 21356
// min_y := y - r ;
21340: LD_ADDR_VAR 0 8
21344: PUSH
21345: LD_VAR 0 3
21349: PUSH
21350: LD_VAR 0 4
21354: MINUS
21355: ST_TO_ADDR
// max_x := x + r ;
21356: LD_ADDR_VAR 0 9
21360: PUSH
21361: LD_VAR 0 2
21365: PUSH
21366: LD_VAR 0 4
21370: PLUS
21371: ST_TO_ADDR
// max_y := y + r ;
21372: LD_ADDR_VAR 0 10
21376: PUSH
21377: LD_VAR 0 3
21381: PUSH
21382: LD_VAR 0 4
21386: PLUS
21387: ST_TO_ADDR
// for _x = min_x to max_x do
21388: LD_ADDR_VAR 0 11
21392: PUSH
21393: DOUBLE
21394: LD_VAR 0 7
21398: DEC
21399: ST_TO_ADDR
21400: LD_VAR 0 9
21404: PUSH
21405: FOR_TO
21406: IFFALSE 21523
// for _y = min_y to max_y do
21408: LD_ADDR_VAR 0 12
21412: PUSH
21413: DOUBLE
21414: LD_VAR 0 8
21418: DEC
21419: ST_TO_ADDR
21420: LD_VAR 0 10
21424: PUSH
21425: FOR_TO
21426: IFFALSE 21519
// begin if not ValidHex ( _x , _y ) then
21428: LD_VAR 0 11
21432: PPUSH
21433: LD_VAR 0 12
21437: PPUSH
21438: CALL_OW 488
21442: NOT
21443: IFFALSE 21447
// continue ;
21445: GO 21425
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21447: LD_VAR 0 11
21451: PPUSH
21452: LD_VAR 0 12
21456: PPUSH
21457: CALL_OW 351
21461: PUSH
21462: LD_VAR 0 11
21466: PPUSH
21467: LD_VAR 0 12
21471: PPUSH
21472: CALL_OW 554
21476: AND
21477: IFFALSE 21517
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21479: LD_ADDR_VAR 0 13
21483: PUSH
21484: LD_VAR 0 13
21488: PPUSH
21489: LD_VAR 0 13
21493: PUSH
21494: LD_INT 1
21496: PLUS
21497: PPUSH
21498: LD_VAR 0 11
21502: PUSH
21503: LD_VAR 0 12
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 2
21516: ST_TO_ADDR
// end ;
21517: GO 21425
21519: POP
21520: POP
21521: GO 21405
21523: POP
21524: POP
// if not list then
21525: LD_VAR 0 13
21529: NOT
21530: IFFALSE 21534
// exit ;
21532: GO 21605
// for i in list do
21534: LD_ADDR_VAR 0 6
21538: PUSH
21539: LD_VAR 0 13
21543: PUSH
21544: FOR_IN
21545: IFFALSE 21603
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21547: LD_VAR 0 1
21551: PPUSH
21552: LD_STRING M
21554: PUSH
21555: LD_VAR 0 6
21559: PUSH
21560: LD_INT 1
21562: ARRAY
21563: PUSH
21564: LD_VAR 0 6
21568: PUSH
21569: LD_INT 2
21571: ARRAY
21572: PUSH
21573: LD_INT 0
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: LD_INT 0
21581: PUSH
21582: LD_INT 0
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: PUSH
21594: EMPTY
21595: LIST
21596: PPUSH
21597: CALL_OW 447
21601: GO 21544
21603: POP
21604: POP
// end ;
21605: LD_VAR 0 5
21609: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21610: LD_EXP 83
21614: NOT
21615: IFFALSE 21665
21617: GO 21619
21619: DISABLE
// begin initHack := true ;
21620: LD_ADDR_EXP 83
21624: PUSH
21625: LD_INT 1
21627: ST_TO_ADDR
// hackTanks := [ ] ;
21628: LD_ADDR_EXP 84
21632: PUSH
21633: EMPTY
21634: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21635: LD_ADDR_EXP 85
21639: PUSH
21640: EMPTY
21641: ST_TO_ADDR
// hackLimit := 3 ;
21642: LD_ADDR_EXP 86
21646: PUSH
21647: LD_INT 3
21649: ST_TO_ADDR
// hackDist := 12 ;
21650: LD_ADDR_EXP 87
21654: PUSH
21655: LD_INT 12
21657: ST_TO_ADDR
// hackCounter := [ ] ;
21658: LD_ADDR_EXP 88
21662: PUSH
21663: EMPTY
21664: ST_TO_ADDR
// end ;
21665: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21666: LD_EXP 83
21670: PUSH
21671: LD_INT 34
21673: PUSH
21674: LD_EXP 95
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PPUSH
21683: CALL_OW 69
21687: AND
21688: IFFALSE 21943
21690: GO 21692
21692: DISABLE
21693: LD_INT 0
21695: PPUSH
21696: PPUSH
// begin enable ;
21697: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21698: LD_ADDR_VAR 0 1
21702: PUSH
21703: LD_INT 34
21705: PUSH
21706: LD_EXP 95
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PPUSH
21715: CALL_OW 69
21719: PUSH
21720: FOR_IN
21721: IFFALSE 21941
// begin if not i in hackTanks then
21723: LD_VAR 0 1
21727: PUSH
21728: LD_EXP 84
21732: IN
21733: NOT
21734: IFFALSE 21817
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21736: LD_ADDR_EXP 84
21740: PUSH
21741: LD_EXP 84
21745: PPUSH
21746: LD_EXP 84
21750: PUSH
21751: LD_INT 1
21753: PLUS
21754: PPUSH
21755: LD_VAR 0 1
21759: PPUSH
21760: CALL_OW 1
21764: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21765: LD_ADDR_EXP 85
21769: PUSH
21770: LD_EXP 85
21774: PPUSH
21775: LD_EXP 85
21779: PUSH
21780: LD_INT 1
21782: PLUS
21783: PPUSH
21784: EMPTY
21785: PPUSH
21786: CALL_OW 1
21790: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21791: LD_ADDR_EXP 88
21795: PUSH
21796: LD_EXP 88
21800: PPUSH
21801: LD_EXP 88
21805: PUSH
21806: LD_INT 1
21808: PLUS
21809: PPUSH
21810: EMPTY
21811: PPUSH
21812: CALL_OW 1
21816: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21817: LD_VAR 0 1
21821: PPUSH
21822: CALL_OW 302
21826: NOT
21827: IFFALSE 21840
// begin HackUnlinkAll ( i ) ;
21829: LD_VAR 0 1
21833: PPUSH
21834: CALL 21946 0 1
// continue ;
21838: GO 21720
// end ; HackCheckCapturedStatus ( i ) ;
21840: LD_VAR 0 1
21844: PPUSH
21845: CALL 22389 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21849: LD_ADDR_VAR 0 2
21853: PUSH
21854: LD_INT 81
21856: PUSH
21857: LD_VAR 0 1
21861: PPUSH
21862: CALL_OW 255
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 33
21873: PUSH
21874: LD_INT 3
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 91
21883: PUSH
21884: LD_VAR 0 1
21888: PUSH
21889: LD_EXP 87
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 50
21901: PUSH
21902: EMPTY
21903: LIST
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: PPUSH
21911: CALL_OW 69
21915: ST_TO_ADDR
// if not tmp then
21916: LD_VAR 0 2
21920: NOT
21921: IFFALSE 21925
// continue ;
21923: GO 21720
// HackLink ( i , tmp ) ;
21925: LD_VAR 0 1
21929: PPUSH
21930: LD_VAR 0 2
21934: PPUSH
21935: CALL 22082 0 2
// end ;
21939: GO 21720
21941: POP
21942: POP
// end ;
21943: PPOPN 2
21945: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21946: LD_INT 0
21948: PPUSH
21949: PPUSH
21950: PPUSH
// if not hack in hackTanks then
21951: LD_VAR 0 1
21955: PUSH
21956: LD_EXP 84
21960: IN
21961: NOT
21962: IFFALSE 21966
// exit ;
21964: GO 22077
// index := GetElementIndex ( hackTanks , hack ) ;
21966: LD_ADDR_VAR 0 4
21970: PUSH
21971: LD_EXP 84
21975: PPUSH
21976: LD_VAR 0 1
21980: PPUSH
21981: CALL 29727 0 2
21985: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21986: LD_EXP 85
21990: PUSH
21991: LD_VAR 0 4
21995: ARRAY
21996: IFFALSE 22077
// begin for i in hackTanksCaptured [ index ] do
21998: LD_ADDR_VAR 0 3
22002: PUSH
22003: LD_EXP 85
22007: PUSH
22008: LD_VAR 0 4
22012: ARRAY
22013: PUSH
22014: FOR_IN
22015: IFFALSE 22041
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22017: LD_VAR 0 3
22021: PUSH
22022: LD_INT 1
22024: ARRAY
22025: PPUSH
22026: LD_VAR 0 3
22030: PUSH
22031: LD_INT 2
22033: ARRAY
22034: PPUSH
22035: CALL_OW 235
22039: GO 22014
22041: POP
22042: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22043: LD_ADDR_EXP 85
22047: PUSH
22048: LD_EXP 85
22052: PPUSH
22053: LD_VAR 0 4
22057: PPUSH
22058: EMPTY
22059: PPUSH
22060: CALL_OW 1
22064: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22065: LD_VAR 0 1
22069: PPUSH
22070: LD_INT 0
22072: PPUSH
22073: CALL_OW 505
// end ; end ;
22077: LD_VAR 0 2
22081: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22082: LD_INT 0
22084: PPUSH
22085: PPUSH
22086: PPUSH
// if not hack in hackTanks or not vehicles then
22087: LD_VAR 0 1
22091: PUSH
22092: LD_EXP 84
22096: IN
22097: NOT
22098: PUSH
22099: LD_VAR 0 2
22103: NOT
22104: OR
22105: IFFALSE 22109
// exit ;
22107: GO 22384
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22109: LD_ADDR_VAR 0 2
22113: PUSH
22114: LD_VAR 0 1
22118: PPUSH
22119: LD_VAR 0 2
22123: PPUSH
22124: LD_INT 1
22126: PPUSH
22127: LD_INT 1
22129: PPUSH
22130: CALL 30377 0 4
22134: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22135: LD_ADDR_VAR 0 5
22139: PUSH
22140: LD_EXP 84
22144: PPUSH
22145: LD_VAR 0 1
22149: PPUSH
22150: CALL 29727 0 2
22154: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22155: LD_EXP 85
22159: PUSH
22160: LD_VAR 0 5
22164: ARRAY
22165: PUSH
22166: LD_EXP 86
22170: LESS
22171: IFFALSE 22360
// begin for i := 1 to vehicles do
22173: LD_ADDR_VAR 0 4
22177: PUSH
22178: DOUBLE
22179: LD_INT 1
22181: DEC
22182: ST_TO_ADDR
22183: LD_VAR 0 2
22187: PUSH
22188: FOR_TO
22189: IFFALSE 22358
// begin if hackTanksCaptured [ index ] = hackLimit then
22191: LD_EXP 85
22195: PUSH
22196: LD_VAR 0 5
22200: ARRAY
22201: PUSH
22202: LD_EXP 86
22206: EQUAL
22207: IFFALSE 22211
// break ;
22209: GO 22358
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22211: LD_ADDR_EXP 88
22215: PUSH
22216: LD_EXP 88
22220: PPUSH
22221: LD_VAR 0 5
22225: PPUSH
22226: LD_EXP 88
22230: PUSH
22231: LD_VAR 0 5
22235: ARRAY
22236: PUSH
22237: LD_INT 1
22239: PLUS
22240: PPUSH
22241: CALL_OW 1
22245: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22246: LD_ADDR_EXP 85
22250: PUSH
22251: LD_EXP 85
22255: PPUSH
22256: LD_VAR 0 5
22260: PUSH
22261: LD_EXP 85
22265: PUSH
22266: LD_VAR 0 5
22270: ARRAY
22271: PUSH
22272: LD_INT 1
22274: PLUS
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PPUSH
22280: LD_VAR 0 2
22284: PUSH
22285: LD_VAR 0 4
22289: ARRAY
22290: PUSH
22291: LD_VAR 0 2
22295: PUSH
22296: LD_VAR 0 4
22300: ARRAY
22301: PPUSH
22302: CALL_OW 255
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PPUSH
22311: CALL 29942 0 3
22315: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22316: LD_VAR 0 2
22320: PUSH
22321: LD_VAR 0 4
22325: ARRAY
22326: PPUSH
22327: LD_VAR 0 1
22331: PPUSH
22332: CALL_OW 255
22336: PPUSH
22337: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22341: LD_VAR 0 2
22345: PUSH
22346: LD_VAR 0 4
22350: ARRAY
22351: PPUSH
22352: CALL_OW 141
// end ;
22356: GO 22188
22358: POP
22359: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22360: LD_VAR 0 1
22364: PPUSH
22365: LD_EXP 85
22369: PUSH
22370: LD_VAR 0 5
22374: ARRAY
22375: PUSH
22376: LD_INT 0
22378: PLUS
22379: PPUSH
22380: CALL_OW 505
// end ;
22384: LD_VAR 0 3
22388: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22389: LD_INT 0
22391: PPUSH
22392: PPUSH
22393: PPUSH
22394: PPUSH
// if not hack in hackTanks then
22395: LD_VAR 0 1
22399: PUSH
22400: LD_EXP 84
22404: IN
22405: NOT
22406: IFFALSE 22410
// exit ;
22408: GO 22650
// index := GetElementIndex ( hackTanks , hack ) ;
22410: LD_ADDR_VAR 0 4
22414: PUSH
22415: LD_EXP 84
22419: PPUSH
22420: LD_VAR 0 1
22424: PPUSH
22425: CALL 29727 0 2
22429: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22430: LD_ADDR_VAR 0 3
22434: PUSH
22435: DOUBLE
22436: LD_EXP 85
22440: PUSH
22441: LD_VAR 0 4
22445: ARRAY
22446: INC
22447: ST_TO_ADDR
22448: LD_INT 1
22450: PUSH
22451: FOR_DOWNTO
22452: IFFALSE 22624
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22454: LD_ADDR_VAR 0 5
22458: PUSH
22459: LD_EXP 85
22463: PUSH
22464: LD_VAR 0 4
22468: ARRAY
22469: PUSH
22470: LD_VAR 0 3
22474: ARRAY
22475: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22476: LD_VAR 0 5
22480: PUSH
22481: LD_INT 1
22483: ARRAY
22484: PPUSH
22485: CALL_OW 302
22489: NOT
22490: PUSH
22491: LD_VAR 0 5
22495: PUSH
22496: LD_INT 1
22498: ARRAY
22499: PPUSH
22500: CALL_OW 255
22504: PUSH
22505: LD_VAR 0 1
22509: PPUSH
22510: CALL_OW 255
22514: NONEQUAL
22515: OR
22516: IFFALSE 22622
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22518: LD_VAR 0 5
22522: PUSH
22523: LD_INT 1
22525: ARRAY
22526: PPUSH
22527: CALL_OW 305
22531: PUSH
22532: LD_VAR 0 5
22536: PUSH
22537: LD_INT 1
22539: ARRAY
22540: PPUSH
22541: CALL_OW 255
22545: PUSH
22546: LD_VAR 0 1
22550: PPUSH
22551: CALL_OW 255
22555: EQUAL
22556: AND
22557: IFFALSE 22581
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22559: LD_VAR 0 5
22563: PUSH
22564: LD_INT 1
22566: ARRAY
22567: PPUSH
22568: LD_VAR 0 5
22572: PUSH
22573: LD_INT 2
22575: ARRAY
22576: PPUSH
22577: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22581: LD_ADDR_EXP 85
22585: PUSH
22586: LD_EXP 85
22590: PPUSH
22591: LD_VAR 0 4
22595: PPUSH
22596: LD_EXP 85
22600: PUSH
22601: LD_VAR 0 4
22605: ARRAY
22606: PPUSH
22607: LD_VAR 0 3
22611: PPUSH
22612: CALL_OW 3
22616: PPUSH
22617: CALL_OW 1
22621: ST_TO_ADDR
// end ; end ;
22622: GO 22451
22624: POP
22625: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22626: LD_VAR 0 1
22630: PPUSH
22631: LD_EXP 85
22635: PUSH
22636: LD_VAR 0 4
22640: ARRAY
22641: PUSH
22642: LD_INT 0
22644: PLUS
22645: PPUSH
22646: CALL_OW 505
// end ;
22650: LD_VAR 0 2
22654: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22655: LD_INT 0
22657: PPUSH
22658: PPUSH
22659: PPUSH
22660: PPUSH
// if not hack in hackTanks then
22661: LD_VAR 0 1
22665: PUSH
22666: LD_EXP 84
22670: IN
22671: NOT
22672: IFFALSE 22676
// exit ;
22674: GO 22761
// index := GetElementIndex ( hackTanks , hack ) ;
22676: LD_ADDR_VAR 0 5
22680: PUSH
22681: LD_EXP 84
22685: PPUSH
22686: LD_VAR 0 1
22690: PPUSH
22691: CALL 29727 0 2
22695: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22696: LD_ADDR_VAR 0 4
22700: PUSH
22701: DOUBLE
22702: LD_INT 1
22704: DEC
22705: ST_TO_ADDR
22706: LD_EXP 85
22710: PUSH
22711: LD_VAR 0 5
22715: ARRAY
22716: PUSH
22717: FOR_TO
22718: IFFALSE 22759
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22720: LD_EXP 85
22724: PUSH
22725: LD_VAR 0 5
22729: ARRAY
22730: PUSH
22731: LD_VAR 0 4
22735: ARRAY
22736: PUSH
22737: LD_INT 1
22739: ARRAY
22740: PUSH
22741: LD_VAR 0 2
22745: EQUAL
22746: IFFALSE 22757
// KillUnit ( vehicle ) ;
22748: LD_VAR 0 2
22752: PPUSH
22753: CALL_OW 66
22757: GO 22717
22759: POP
22760: POP
// end ;
22761: LD_VAR 0 3
22765: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22766: LD_EXP 89
22770: NOT
22771: IFFALSE 22806
22773: GO 22775
22775: DISABLE
// begin initMiner := true ;
22776: LD_ADDR_EXP 89
22780: PUSH
22781: LD_INT 1
22783: ST_TO_ADDR
// minersList := [ ] ;
22784: LD_ADDR_EXP 90
22788: PUSH
22789: EMPTY
22790: ST_TO_ADDR
// minerMinesList := [ ] ;
22791: LD_ADDR_EXP 91
22795: PUSH
22796: EMPTY
22797: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22798: LD_ADDR_EXP 92
22802: PUSH
22803: LD_INT 5
22805: ST_TO_ADDR
// end ;
22806: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22807: LD_EXP 89
22811: PUSH
22812: LD_INT 34
22814: PUSH
22815: LD_EXP 100
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PPUSH
22824: CALL_OW 69
22828: AND
22829: IFFALSE 23292
22831: GO 22833
22833: DISABLE
22834: LD_INT 0
22836: PPUSH
22837: PPUSH
22838: PPUSH
22839: PPUSH
// begin enable ;
22840: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22841: LD_ADDR_VAR 0 1
22845: PUSH
22846: LD_INT 34
22848: PUSH
22849: LD_EXP 100
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PPUSH
22858: CALL_OW 69
22862: PUSH
22863: FOR_IN
22864: IFFALSE 22936
// begin if not i in minersList then
22866: LD_VAR 0 1
22870: PUSH
22871: LD_EXP 90
22875: IN
22876: NOT
22877: IFFALSE 22934
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22879: LD_ADDR_EXP 90
22883: PUSH
22884: LD_EXP 90
22888: PPUSH
22889: LD_EXP 90
22893: PUSH
22894: LD_INT 1
22896: PLUS
22897: PPUSH
22898: LD_VAR 0 1
22902: PPUSH
22903: CALL_OW 1
22907: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22908: LD_ADDR_EXP 91
22912: PUSH
22913: LD_EXP 91
22917: PPUSH
22918: LD_EXP 91
22922: PUSH
22923: LD_INT 1
22925: PLUS
22926: PPUSH
22927: EMPTY
22928: PPUSH
22929: CALL_OW 1
22933: ST_TO_ADDR
// end end ;
22934: GO 22863
22936: POP
22937: POP
// for i := minerMinesList downto 1 do
22938: LD_ADDR_VAR 0 1
22942: PUSH
22943: DOUBLE
22944: LD_EXP 91
22948: INC
22949: ST_TO_ADDR
22950: LD_INT 1
22952: PUSH
22953: FOR_DOWNTO
22954: IFFALSE 23290
// begin if IsLive ( minersList [ i ] ) then
22956: LD_EXP 90
22960: PUSH
22961: LD_VAR 0 1
22965: ARRAY
22966: PPUSH
22967: CALL_OW 300
22971: IFFALSE 22999
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22973: LD_EXP 90
22977: PUSH
22978: LD_VAR 0 1
22982: ARRAY
22983: PPUSH
22984: LD_EXP 91
22988: PUSH
22989: LD_VAR 0 1
22993: ARRAY
22994: PPUSH
22995: CALL_OW 505
// if not minerMinesList [ i ] then
22999: LD_EXP 91
23003: PUSH
23004: LD_VAR 0 1
23008: ARRAY
23009: NOT
23010: IFFALSE 23014
// continue ;
23012: GO 22953
// for j := minerMinesList [ i ] downto 1 do
23014: LD_ADDR_VAR 0 2
23018: PUSH
23019: DOUBLE
23020: LD_EXP 91
23024: PUSH
23025: LD_VAR 0 1
23029: ARRAY
23030: INC
23031: ST_TO_ADDR
23032: LD_INT 1
23034: PUSH
23035: FOR_DOWNTO
23036: IFFALSE 23286
// begin side := GetSide ( minersList [ i ] ) ;
23038: LD_ADDR_VAR 0 3
23042: PUSH
23043: LD_EXP 90
23047: PUSH
23048: LD_VAR 0 1
23052: ARRAY
23053: PPUSH
23054: CALL_OW 255
23058: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23059: LD_ADDR_VAR 0 4
23063: PUSH
23064: LD_EXP 91
23068: PUSH
23069: LD_VAR 0 1
23073: ARRAY
23074: PUSH
23075: LD_VAR 0 2
23079: ARRAY
23080: PUSH
23081: LD_INT 1
23083: ARRAY
23084: PPUSH
23085: LD_EXP 91
23089: PUSH
23090: LD_VAR 0 1
23094: ARRAY
23095: PUSH
23096: LD_VAR 0 2
23100: ARRAY
23101: PUSH
23102: LD_INT 2
23104: ARRAY
23105: PPUSH
23106: CALL_OW 428
23110: ST_TO_ADDR
// if not tmp then
23111: LD_VAR 0 4
23115: NOT
23116: IFFALSE 23120
// continue ;
23118: GO 23035
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23120: LD_VAR 0 4
23124: PUSH
23125: LD_INT 81
23127: PUSH
23128: LD_VAR 0 3
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PPUSH
23137: CALL_OW 69
23141: IN
23142: PUSH
23143: LD_EXP 91
23147: PUSH
23148: LD_VAR 0 1
23152: ARRAY
23153: PUSH
23154: LD_VAR 0 2
23158: ARRAY
23159: PUSH
23160: LD_INT 1
23162: ARRAY
23163: PPUSH
23164: LD_EXP 91
23168: PUSH
23169: LD_VAR 0 1
23173: ARRAY
23174: PUSH
23175: LD_VAR 0 2
23179: ARRAY
23180: PUSH
23181: LD_INT 2
23183: ARRAY
23184: PPUSH
23185: CALL_OW 458
23189: AND
23190: IFFALSE 23284
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23192: LD_EXP 91
23196: PUSH
23197: LD_VAR 0 1
23201: ARRAY
23202: PUSH
23203: LD_VAR 0 2
23207: ARRAY
23208: PUSH
23209: LD_INT 1
23211: ARRAY
23212: PPUSH
23213: LD_EXP 91
23217: PUSH
23218: LD_VAR 0 1
23222: ARRAY
23223: PUSH
23224: LD_VAR 0 2
23228: ARRAY
23229: PUSH
23230: LD_INT 2
23232: ARRAY
23233: PPUSH
23234: LD_VAR 0 3
23238: PPUSH
23239: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23243: LD_ADDR_EXP 91
23247: PUSH
23248: LD_EXP 91
23252: PPUSH
23253: LD_VAR 0 1
23257: PPUSH
23258: LD_EXP 91
23262: PUSH
23263: LD_VAR 0 1
23267: ARRAY
23268: PPUSH
23269: LD_VAR 0 2
23273: PPUSH
23274: CALL_OW 3
23278: PPUSH
23279: CALL_OW 1
23283: ST_TO_ADDR
// end ; end ;
23284: GO 23035
23286: POP
23287: POP
// end ;
23288: GO 22953
23290: POP
23291: POP
// end ;
23292: PPOPN 4
23294: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23295: LD_INT 0
23297: PPUSH
23298: PPUSH
// result := false ;
23299: LD_ADDR_VAR 0 4
23303: PUSH
23304: LD_INT 0
23306: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23307: LD_VAR 0 1
23311: PPUSH
23312: CALL_OW 264
23316: PUSH
23317: LD_EXP 100
23321: EQUAL
23322: NOT
23323: IFFALSE 23327
// exit ;
23325: GO 23567
// index := GetElementIndex ( minersList , unit ) ;
23327: LD_ADDR_VAR 0 5
23331: PUSH
23332: LD_EXP 90
23336: PPUSH
23337: LD_VAR 0 1
23341: PPUSH
23342: CALL 29727 0 2
23346: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23347: LD_EXP 91
23351: PUSH
23352: LD_VAR 0 5
23356: ARRAY
23357: PUSH
23358: LD_EXP 92
23362: GREATEREQUAL
23363: IFFALSE 23367
// exit ;
23365: GO 23567
// ComMoveXY ( unit , x , y ) ;
23367: LD_VAR 0 1
23371: PPUSH
23372: LD_VAR 0 2
23376: PPUSH
23377: LD_VAR 0 3
23381: PPUSH
23382: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23386: LD_INT 35
23388: PPUSH
23389: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23393: LD_VAR 0 1
23397: PPUSH
23398: LD_VAR 0 2
23402: PPUSH
23403: LD_VAR 0 3
23407: PPUSH
23408: CALL 60446 0 3
23412: NOT
23413: PUSH
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 314
23423: AND
23424: IFFALSE 23428
// exit ;
23426: GO 23567
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23428: LD_VAR 0 2
23432: PPUSH
23433: LD_VAR 0 3
23437: PPUSH
23438: CALL_OW 428
23442: PUSH
23443: LD_VAR 0 1
23447: EQUAL
23448: PUSH
23449: LD_VAR 0 1
23453: PPUSH
23454: CALL_OW 314
23458: NOT
23459: AND
23460: IFFALSE 23386
// PlaySoundXY ( x , y , PlantMine ) ;
23462: LD_VAR 0 2
23466: PPUSH
23467: LD_VAR 0 3
23471: PPUSH
23472: LD_STRING PlantMine
23474: PPUSH
23475: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23479: LD_VAR 0 2
23483: PPUSH
23484: LD_VAR 0 3
23488: PPUSH
23489: LD_VAR 0 1
23493: PPUSH
23494: CALL_OW 255
23498: PPUSH
23499: LD_INT 0
23501: PPUSH
23502: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23506: LD_ADDR_EXP 91
23510: PUSH
23511: LD_EXP 91
23515: PPUSH
23516: LD_VAR 0 5
23520: PUSH
23521: LD_EXP 91
23525: PUSH
23526: LD_VAR 0 5
23530: ARRAY
23531: PUSH
23532: LD_INT 1
23534: PLUS
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PPUSH
23540: LD_VAR 0 2
23544: PUSH
23545: LD_VAR 0 3
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PPUSH
23554: CALL 29942 0 3
23558: ST_TO_ADDR
// result := true ;
23559: LD_ADDR_VAR 0 4
23563: PUSH
23564: LD_INT 1
23566: ST_TO_ADDR
// end ;
23567: LD_VAR 0 4
23571: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23572: LD_INT 0
23574: PPUSH
23575: PPUSH
23576: PPUSH
// if not unit in minersList then
23577: LD_VAR 0 1
23581: PUSH
23582: LD_EXP 90
23586: IN
23587: NOT
23588: IFFALSE 23592
// exit ;
23590: GO 23984
// index := GetElementIndex ( minersList , unit ) ;
23592: LD_ADDR_VAR 0 6
23596: PUSH
23597: LD_EXP 90
23601: PPUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL 29727 0 2
23611: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23612: LD_ADDR_VAR 0 5
23616: PUSH
23617: DOUBLE
23618: LD_EXP 91
23622: PUSH
23623: LD_VAR 0 6
23627: ARRAY
23628: INC
23629: ST_TO_ADDR
23630: LD_INT 1
23632: PUSH
23633: FOR_DOWNTO
23634: IFFALSE 23795
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23636: LD_EXP 91
23640: PUSH
23641: LD_VAR 0 6
23645: ARRAY
23646: PUSH
23647: LD_VAR 0 5
23651: ARRAY
23652: PUSH
23653: LD_INT 1
23655: ARRAY
23656: PUSH
23657: LD_VAR 0 2
23661: EQUAL
23662: PUSH
23663: LD_EXP 91
23667: PUSH
23668: LD_VAR 0 6
23672: ARRAY
23673: PUSH
23674: LD_VAR 0 5
23678: ARRAY
23679: PUSH
23680: LD_INT 2
23682: ARRAY
23683: PUSH
23684: LD_VAR 0 3
23688: EQUAL
23689: AND
23690: IFFALSE 23793
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23692: LD_EXP 91
23696: PUSH
23697: LD_VAR 0 6
23701: ARRAY
23702: PUSH
23703: LD_VAR 0 5
23707: ARRAY
23708: PUSH
23709: LD_INT 1
23711: ARRAY
23712: PPUSH
23713: LD_EXP 91
23717: PUSH
23718: LD_VAR 0 6
23722: ARRAY
23723: PUSH
23724: LD_VAR 0 5
23728: ARRAY
23729: PUSH
23730: LD_INT 2
23732: ARRAY
23733: PPUSH
23734: LD_VAR 0 1
23738: PPUSH
23739: CALL_OW 255
23743: PPUSH
23744: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23748: LD_ADDR_EXP 91
23752: PUSH
23753: LD_EXP 91
23757: PPUSH
23758: LD_VAR 0 6
23762: PPUSH
23763: LD_EXP 91
23767: PUSH
23768: LD_VAR 0 6
23772: ARRAY
23773: PPUSH
23774: LD_VAR 0 5
23778: PPUSH
23779: CALL_OW 3
23783: PPUSH
23784: CALL_OW 1
23788: ST_TO_ADDR
// exit ;
23789: POP
23790: POP
23791: GO 23984
// end ; end ;
23793: GO 23633
23795: POP
23796: POP
// for i := minerMinesList [ index ] downto 1 do
23797: LD_ADDR_VAR 0 5
23801: PUSH
23802: DOUBLE
23803: LD_EXP 91
23807: PUSH
23808: LD_VAR 0 6
23812: ARRAY
23813: INC
23814: ST_TO_ADDR
23815: LD_INT 1
23817: PUSH
23818: FOR_DOWNTO
23819: IFFALSE 23982
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23821: LD_EXP 91
23825: PUSH
23826: LD_VAR 0 6
23830: ARRAY
23831: PUSH
23832: LD_VAR 0 5
23836: ARRAY
23837: PUSH
23838: LD_INT 1
23840: ARRAY
23841: PPUSH
23842: LD_EXP 91
23846: PUSH
23847: LD_VAR 0 6
23851: ARRAY
23852: PUSH
23853: LD_VAR 0 5
23857: ARRAY
23858: PUSH
23859: LD_INT 2
23861: ARRAY
23862: PPUSH
23863: LD_VAR 0 2
23867: PPUSH
23868: LD_VAR 0 3
23872: PPUSH
23873: CALL_OW 298
23877: PUSH
23878: LD_INT 6
23880: LESS
23881: IFFALSE 23980
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23883: LD_EXP 91
23887: PUSH
23888: LD_VAR 0 6
23892: ARRAY
23893: PUSH
23894: LD_VAR 0 5
23898: ARRAY
23899: PUSH
23900: LD_INT 1
23902: ARRAY
23903: PPUSH
23904: LD_EXP 91
23908: PUSH
23909: LD_VAR 0 6
23913: ARRAY
23914: PUSH
23915: LD_VAR 0 5
23919: ARRAY
23920: PUSH
23921: LD_INT 2
23923: ARRAY
23924: PPUSH
23925: LD_VAR 0 1
23929: PPUSH
23930: CALL_OW 255
23934: PPUSH
23935: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23939: LD_ADDR_EXP 91
23943: PUSH
23944: LD_EXP 91
23948: PPUSH
23949: LD_VAR 0 6
23953: PPUSH
23954: LD_EXP 91
23958: PUSH
23959: LD_VAR 0 6
23963: ARRAY
23964: PPUSH
23965: LD_VAR 0 5
23969: PPUSH
23970: CALL_OW 3
23974: PPUSH
23975: CALL_OW 1
23979: ST_TO_ADDR
// end ; end ;
23980: GO 23818
23982: POP
23983: POP
// end ;
23984: LD_VAR 0 4
23988: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23989: LD_INT 0
23991: PPUSH
23992: PPUSH
23993: PPUSH
23994: PPUSH
23995: PPUSH
23996: PPUSH
23997: PPUSH
23998: PPUSH
23999: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24000: LD_VAR 0 1
24004: PPUSH
24005: CALL_OW 264
24009: PUSH
24010: LD_EXP 100
24014: EQUAL
24015: NOT
24016: PUSH
24017: LD_VAR 0 1
24021: PUSH
24022: LD_EXP 90
24026: IN
24027: NOT
24028: OR
24029: IFFALSE 24033
// exit ;
24031: GO 24355
// index := GetElementIndex ( minersList , unit ) ;
24033: LD_ADDR_VAR 0 6
24037: PUSH
24038: LD_EXP 90
24042: PPUSH
24043: LD_VAR 0 1
24047: PPUSH
24048: CALL 29727 0 2
24052: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24053: LD_ADDR_VAR 0 8
24057: PUSH
24058: LD_EXP 92
24062: PUSH
24063: LD_EXP 91
24067: PUSH
24068: LD_VAR 0 6
24072: ARRAY
24073: MINUS
24074: ST_TO_ADDR
// if not minesFreeAmount then
24075: LD_VAR 0 8
24079: NOT
24080: IFFALSE 24084
// exit ;
24082: GO 24355
// tmp := [ ] ;
24084: LD_ADDR_VAR 0 7
24088: PUSH
24089: EMPTY
24090: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24091: LD_ADDR_VAR 0 5
24095: PUSH
24096: DOUBLE
24097: LD_INT 1
24099: DEC
24100: ST_TO_ADDR
24101: LD_VAR 0 8
24105: PUSH
24106: FOR_TO
24107: IFFALSE 24302
// begin _d := rand ( 0 , 5 ) ;
24109: LD_ADDR_VAR 0 11
24113: PUSH
24114: LD_INT 0
24116: PPUSH
24117: LD_INT 5
24119: PPUSH
24120: CALL_OW 12
24124: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24125: LD_ADDR_VAR 0 12
24129: PUSH
24130: LD_INT 2
24132: PPUSH
24133: LD_INT 6
24135: PPUSH
24136: CALL_OW 12
24140: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24141: LD_ADDR_VAR 0 9
24145: PUSH
24146: LD_VAR 0 2
24150: PPUSH
24151: LD_VAR 0 11
24155: PPUSH
24156: LD_VAR 0 12
24160: PPUSH
24161: CALL_OW 272
24165: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24166: LD_ADDR_VAR 0 10
24170: PUSH
24171: LD_VAR 0 3
24175: PPUSH
24176: LD_VAR 0 11
24180: PPUSH
24181: LD_VAR 0 12
24185: PPUSH
24186: CALL_OW 273
24190: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24191: LD_VAR 0 9
24195: PPUSH
24196: LD_VAR 0 10
24200: PPUSH
24201: CALL_OW 488
24205: PUSH
24206: LD_VAR 0 9
24210: PUSH
24211: LD_VAR 0 10
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_VAR 0 7
24224: IN
24225: NOT
24226: AND
24227: PUSH
24228: LD_VAR 0 9
24232: PPUSH
24233: LD_VAR 0 10
24237: PPUSH
24238: CALL_OW 458
24242: NOT
24243: AND
24244: IFFALSE 24286
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24246: LD_ADDR_VAR 0 7
24250: PUSH
24251: LD_VAR 0 7
24255: PPUSH
24256: LD_VAR 0 7
24260: PUSH
24261: LD_INT 1
24263: PLUS
24264: PPUSH
24265: LD_VAR 0 9
24269: PUSH
24270: LD_VAR 0 10
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PPUSH
24279: CALL_OW 1
24283: ST_TO_ADDR
24284: GO 24300
// i := i - 1 ;
24286: LD_ADDR_VAR 0 5
24290: PUSH
24291: LD_VAR 0 5
24295: PUSH
24296: LD_INT 1
24298: MINUS
24299: ST_TO_ADDR
// end ;
24300: GO 24106
24302: POP
24303: POP
// for i in tmp do
24304: LD_ADDR_VAR 0 5
24308: PUSH
24309: LD_VAR 0 7
24313: PUSH
24314: FOR_IN
24315: IFFALSE 24353
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24317: LD_VAR 0 1
24321: PPUSH
24322: LD_VAR 0 5
24326: PUSH
24327: LD_INT 1
24329: ARRAY
24330: PPUSH
24331: LD_VAR 0 5
24335: PUSH
24336: LD_INT 2
24338: ARRAY
24339: PPUSH
24340: CALL 23295 0 3
24344: NOT
24345: IFFALSE 24351
// exit ;
24347: POP
24348: POP
24349: GO 24355
24351: GO 24314
24353: POP
24354: POP
// end ;
24355: LD_VAR 0 4
24359: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24360: LD_INT 0
24362: PPUSH
24363: PPUSH
24364: PPUSH
24365: PPUSH
24366: PPUSH
24367: PPUSH
24368: PPUSH
// if not GetClass ( unit ) = class_sniper then
24369: LD_VAR 0 1
24373: PPUSH
24374: CALL_OW 257
24378: PUSH
24379: LD_INT 5
24381: EQUAL
24382: NOT
24383: IFFALSE 24387
// exit ;
24385: GO 24775
// dist := 8 ;
24387: LD_ADDR_VAR 0 5
24391: PUSH
24392: LD_INT 8
24394: ST_TO_ADDR
// viewRange := 12 ;
24395: LD_ADDR_VAR 0 7
24399: PUSH
24400: LD_INT 12
24402: ST_TO_ADDR
// side := GetSide ( unit ) ;
24403: LD_ADDR_VAR 0 6
24407: PUSH
24408: LD_VAR 0 1
24412: PPUSH
24413: CALL_OW 255
24417: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24418: LD_INT 61
24420: PPUSH
24421: LD_VAR 0 6
24425: PPUSH
24426: CALL_OW 321
24430: PUSH
24431: LD_INT 2
24433: EQUAL
24434: IFFALSE 24444
// viewRange := 16 ;
24436: LD_ADDR_VAR 0 7
24440: PUSH
24441: LD_INT 16
24443: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24444: LD_VAR 0 1
24448: PPUSH
24449: LD_VAR 0 2
24453: PPUSH
24454: LD_VAR 0 3
24458: PPUSH
24459: CALL_OW 297
24463: PUSH
24464: LD_VAR 0 5
24468: GREATER
24469: IFFALSE 24548
// begin ComMoveXY ( unit , x , y ) ;
24471: LD_VAR 0 1
24475: PPUSH
24476: LD_VAR 0 2
24480: PPUSH
24481: LD_VAR 0 3
24485: PPUSH
24486: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24490: LD_INT 35
24492: PPUSH
24493: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24497: LD_VAR 0 1
24501: PPUSH
24502: LD_VAR 0 2
24506: PPUSH
24507: LD_VAR 0 3
24511: PPUSH
24512: CALL 60446 0 3
24516: NOT
24517: IFFALSE 24521
// exit ;
24519: GO 24775
// until GetDistUnitXY ( unit , x , y ) < dist ;
24521: LD_VAR 0 1
24525: PPUSH
24526: LD_VAR 0 2
24530: PPUSH
24531: LD_VAR 0 3
24535: PPUSH
24536: CALL_OW 297
24540: PUSH
24541: LD_VAR 0 5
24545: LESS
24546: IFFALSE 24490
// end ; ComTurnXY ( unit , x , y ) ;
24548: LD_VAR 0 1
24552: PPUSH
24553: LD_VAR 0 2
24557: PPUSH
24558: LD_VAR 0 3
24562: PPUSH
24563: CALL_OW 118
// wait ( 5 ) ;
24567: LD_INT 5
24569: PPUSH
24570: CALL_OW 67
// _d := GetDir ( unit ) ;
24574: LD_ADDR_VAR 0 10
24578: PUSH
24579: LD_VAR 0 1
24583: PPUSH
24584: CALL_OW 254
24588: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24589: LD_ADDR_VAR 0 8
24593: PUSH
24594: LD_VAR 0 1
24598: PPUSH
24599: CALL_OW 250
24603: PPUSH
24604: LD_VAR 0 10
24608: PPUSH
24609: LD_VAR 0 5
24613: PPUSH
24614: CALL_OW 272
24618: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24619: LD_ADDR_VAR 0 9
24623: PUSH
24624: LD_VAR 0 1
24628: PPUSH
24629: CALL_OW 251
24633: PPUSH
24634: LD_VAR 0 10
24638: PPUSH
24639: LD_VAR 0 5
24643: PPUSH
24644: CALL_OW 273
24648: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24649: LD_VAR 0 8
24653: PPUSH
24654: LD_VAR 0 9
24658: PPUSH
24659: CALL_OW 488
24663: NOT
24664: IFFALSE 24668
// exit ;
24666: GO 24775
// ComAnimCustom ( unit , 1 ) ;
24668: LD_VAR 0 1
24672: PPUSH
24673: LD_INT 1
24675: PPUSH
24676: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24680: LD_VAR 0 8
24684: PPUSH
24685: LD_VAR 0 9
24689: PPUSH
24690: LD_VAR 0 6
24694: PPUSH
24695: LD_VAR 0 7
24699: PPUSH
24700: CALL_OW 330
// repeat wait ( 1 ) ;
24704: LD_INT 1
24706: PPUSH
24707: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24711: LD_VAR 0 1
24715: PPUSH
24716: CALL_OW 316
24720: PUSH
24721: LD_VAR 0 1
24725: PPUSH
24726: CALL_OW 314
24730: OR
24731: PUSH
24732: LD_VAR 0 1
24736: PPUSH
24737: CALL_OW 302
24741: NOT
24742: OR
24743: PUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 301
24753: OR
24754: IFFALSE 24704
// RemoveSeeing ( _x , _y , side ) ;
24756: LD_VAR 0 8
24760: PPUSH
24761: LD_VAR 0 9
24765: PPUSH
24766: LD_VAR 0 6
24770: PPUSH
24771: CALL_OW 331
// end ; end_of_file
24775: LD_VAR 0 4
24779: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24780: LD_INT 0
24782: PPUSH
// ar_miner := 81 ;
24783: LD_ADDR_EXP 100
24787: PUSH
24788: LD_INT 81
24790: ST_TO_ADDR
// ar_crane := 88 ;
24791: LD_ADDR_EXP 99
24795: PUSH
24796: LD_INT 88
24798: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24799: LD_ADDR_EXP 94
24803: PUSH
24804: LD_INT 89
24806: ST_TO_ADDR
// us_hack := 99 ;
24807: LD_ADDR_EXP 95
24811: PUSH
24812: LD_INT 99
24814: ST_TO_ADDR
// us_artillery := 97 ;
24815: LD_ADDR_EXP 96
24819: PUSH
24820: LD_INT 97
24822: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24823: LD_ADDR_EXP 97
24827: PUSH
24828: LD_INT 91
24830: ST_TO_ADDR
// ar_mortar := 92 ;
24831: LD_ADDR_EXP 98
24835: PUSH
24836: LD_INT 92
24838: ST_TO_ADDR
// ru_flamethrower := 93 ;
24839: LD_ADDR_EXP 101
24843: PUSH
24844: LD_INT 93
24846: ST_TO_ADDR
// ru_radar := 98 ;
24847: LD_ADDR_EXP 93
24851: PUSH
24852: LD_INT 98
24854: ST_TO_ADDR
// tech_Artillery := 80 ;
24855: LD_ADDR_EXP 102
24859: PUSH
24860: LD_INT 80
24862: ST_TO_ADDR
// tech_RadMat := 81 ;
24863: LD_ADDR_EXP 103
24867: PUSH
24868: LD_INT 81
24870: ST_TO_ADDR
// tech_BasicTools := 82 ;
24871: LD_ADDR_EXP 104
24875: PUSH
24876: LD_INT 82
24878: ST_TO_ADDR
// tech_Cargo := 83 ;
24879: LD_ADDR_EXP 105
24883: PUSH
24884: LD_INT 83
24886: ST_TO_ADDR
// tech_Track := 84 ;
24887: LD_ADDR_EXP 106
24891: PUSH
24892: LD_INT 84
24894: ST_TO_ADDR
// tech_Crane := 85 ;
24895: LD_ADDR_EXP 107
24899: PUSH
24900: LD_INT 85
24902: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24903: LD_ADDR_EXP 108
24907: PUSH
24908: LD_INT 86
24910: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24911: LD_ADDR_EXP 109
24915: PUSH
24916: LD_INT 87
24918: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24919: LD_ADDR_EXP 110
24923: PUSH
24924: LD_INT 88
24926: ST_TO_ADDR
// class_mastodont := 31 ;
24927: LD_ADDR_EXP 111
24931: PUSH
24932: LD_INT 31
24934: ST_TO_ADDR
// class_horse := 21 ;
24935: LD_ADDR_EXP 112
24939: PUSH
24940: LD_INT 21
24942: ST_TO_ADDR
// end ;
24943: LD_VAR 0 1
24947: RET
// every 1 do
24948: GO 24950
24950: DISABLE
// InitGlobalVariables ; end_of_file
24951: CALL 24780 0 0
24955: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24956: LD_INT 0
24958: PPUSH
24959: PPUSH
// if exist_mode then
24960: LD_VAR 0 2
24964: IFFALSE 24989
// unit := CreateCharacter ( prefix & ident ) else
24966: LD_ADDR_VAR 0 5
24970: PUSH
24971: LD_VAR 0 3
24975: PUSH
24976: LD_VAR 0 1
24980: STR
24981: PPUSH
24982: CALL_OW 34
24986: ST_TO_ADDR
24987: GO 25004
// unit := NewCharacter ( ident ) ;
24989: LD_ADDR_VAR 0 5
24993: PUSH
24994: LD_VAR 0 1
24998: PPUSH
24999: CALL_OW 25
25003: ST_TO_ADDR
// result := unit ;
25004: LD_ADDR_VAR 0 4
25008: PUSH
25009: LD_VAR 0 5
25013: ST_TO_ADDR
// end ;
25014: LD_VAR 0 4
25018: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25019: LD_INT 0
25021: PPUSH
25022: PPUSH
// if not side or not nation then
25023: LD_VAR 0 1
25027: NOT
25028: PUSH
25029: LD_VAR 0 2
25033: NOT
25034: OR
25035: IFFALSE 25039
// exit ;
25037: GO 25807
// case nation of nation_american :
25039: LD_VAR 0 2
25043: PUSH
25044: LD_INT 1
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25266
25052: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25053: LD_ADDR_VAR 0 4
25057: PUSH
25058: LD_INT 35
25060: PUSH
25061: LD_INT 45
25063: PUSH
25064: LD_INT 46
25066: PUSH
25067: LD_INT 47
25069: PUSH
25070: LD_INT 82
25072: PUSH
25073: LD_INT 83
25075: PUSH
25076: LD_INT 84
25078: PUSH
25079: LD_INT 85
25081: PUSH
25082: LD_INT 86
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: LD_INT 6
25093: PUSH
25094: LD_INT 15
25096: PUSH
25097: LD_INT 16
25099: PUSH
25100: LD_INT 7
25102: PUSH
25103: LD_INT 12
25105: PUSH
25106: LD_INT 13
25108: PUSH
25109: LD_INT 10
25111: PUSH
25112: LD_INT 14
25114: PUSH
25115: LD_INT 20
25117: PUSH
25118: LD_INT 21
25120: PUSH
25121: LD_INT 22
25123: PUSH
25124: LD_INT 25
25126: PUSH
25127: LD_INT 32
25129: PUSH
25130: LD_INT 27
25132: PUSH
25133: LD_INT 36
25135: PUSH
25136: LD_INT 69
25138: PUSH
25139: LD_INT 39
25141: PUSH
25142: LD_INT 34
25144: PUSH
25145: LD_INT 40
25147: PUSH
25148: LD_INT 48
25150: PUSH
25151: LD_INT 49
25153: PUSH
25154: LD_INT 50
25156: PUSH
25157: LD_INT 51
25159: PUSH
25160: LD_INT 52
25162: PUSH
25163: LD_INT 53
25165: PUSH
25166: LD_INT 54
25168: PUSH
25169: LD_INT 55
25171: PUSH
25172: LD_INT 56
25174: PUSH
25175: LD_INT 57
25177: PUSH
25178: LD_INT 58
25180: PUSH
25181: LD_INT 59
25183: PUSH
25184: LD_INT 60
25186: PUSH
25187: LD_INT 61
25189: PUSH
25190: LD_INT 62
25192: PUSH
25193: LD_INT 80
25195: PUSH
25196: LD_INT 82
25198: PUSH
25199: LD_INT 83
25201: PUSH
25202: LD_INT 84
25204: PUSH
25205: LD_INT 85
25207: PUSH
25208: LD_INT 86
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: ST_TO_ADDR
25264: GO 25731
25266: LD_INT 2
25268: DOUBLE
25269: EQUAL
25270: IFTRUE 25274
25272: GO 25500
25274: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25275: LD_ADDR_VAR 0 4
25279: PUSH
25280: LD_INT 35
25282: PUSH
25283: LD_INT 45
25285: PUSH
25286: LD_INT 46
25288: PUSH
25289: LD_INT 47
25291: PUSH
25292: LD_INT 82
25294: PUSH
25295: LD_INT 83
25297: PUSH
25298: LD_INT 84
25300: PUSH
25301: LD_INT 85
25303: PUSH
25304: LD_INT 87
25306: PUSH
25307: LD_INT 70
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: LD_INT 11
25315: PUSH
25316: LD_INT 3
25318: PUSH
25319: LD_INT 4
25321: PUSH
25322: LD_INT 5
25324: PUSH
25325: LD_INT 6
25327: PUSH
25328: LD_INT 15
25330: PUSH
25331: LD_INT 18
25333: PUSH
25334: LD_INT 7
25336: PUSH
25337: LD_INT 17
25339: PUSH
25340: LD_INT 8
25342: PUSH
25343: LD_INT 20
25345: PUSH
25346: LD_INT 21
25348: PUSH
25349: LD_INT 22
25351: PUSH
25352: LD_INT 72
25354: PUSH
25355: LD_INT 26
25357: PUSH
25358: LD_INT 69
25360: PUSH
25361: LD_INT 39
25363: PUSH
25364: LD_INT 40
25366: PUSH
25367: LD_INT 41
25369: PUSH
25370: LD_INT 42
25372: PUSH
25373: LD_INT 43
25375: PUSH
25376: LD_INT 48
25378: PUSH
25379: LD_INT 49
25381: PUSH
25382: LD_INT 50
25384: PUSH
25385: LD_INT 51
25387: PUSH
25388: LD_INT 52
25390: PUSH
25391: LD_INT 53
25393: PUSH
25394: LD_INT 54
25396: PUSH
25397: LD_INT 55
25399: PUSH
25400: LD_INT 56
25402: PUSH
25403: LD_INT 60
25405: PUSH
25406: LD_INT 61
25408: PUSH
25409: LD_INT 62
25411: PUSH
25412: LD_INT 66
25414: PUSH
25415: LD_INT 67
25417: PUSH
25418: LD_INT 68
25420: PUSH
25421: LD_INT 81
25423: PUSH
25424: LD_INT 82
25426: PUSH
25427: LD_INT 83
25429: PUSH
25430: LD_INT 84
25432: PUSH
25433: LD_INT 85
25435: PUSH
25436: LD_INT 87
25438: PUSH
25439: LD_INT 88
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: ST_TO_ADDR
25498: GO 25731
25500: LD_INT 3
25502: DOUBLE
25503: EQUAL
25504: IFTRUE 25508
25506: GO 25730
25508: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25509: LD_ADDR_VAR 0 4
25513: PUSH
25514: LD_INT 46
25516: PUSH
25517: LD_INT 47
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: LD_INT 82
25528: PUSH
25529: LD_INT 83
25531: PUSH
25532: LD_INT 84
25534: PUSH
25535: LD_INT 85
25537: PUSH
25538: LD_INT 86
25540: PUSH
25541: LD_INT 11
25543: PUSH
25544: LD_INT 9
25546: PUSH
25547: LD_INT 20
25549: PUSH
25550: LD_INT 19
25552: PUSH
25553: LD_INT 21
25555: PUSH
25556: LD_INT 24
25558: PUSH
25559: LD_INT 22
25561: PUSH
25562: LD_INT 25
25564: PUSH
25565: LD_INT 28
25567: PUSH
25568: LD_INT 29
25570: PUSH
25571: LD_INT 30
25573: PUSH
25574: LD_INT 31
25576: PUSH
25577: LD_INT 37
25579: PUSH
25580: LD_INT 38
25582: PUSH
25583: LD_INT 32
25585: PUSH
25586: LD_INT 27
25588: PUSH
25589: LD_INT 33
25591: PUSH
25592: LD_INT 69
25594: PUSH
25595: LD_INT 39
25597: PUSH
25598: LD_INT 34
25600: PUSH
25601: LD_INT 40
25603: PUSH
25604: LD_INT 71
25606: PUSH
25607: LD_INT 23
25609: PUSH
25610: LD_INT 44
25612: PUSH
25613: LD_INT 48
25615: PUSH
25616: LD_INT 49
25618: PUSH
25619: LD_INT 50
25621: PUSH
25622: LD_INT 51
25624: PUSH
25625: LD_INT 52
25627: PUSH
25628: LD_INT 53
25630: PUSH
25631: LD_INT 54
25633: PUSH
25634: LD_INT 55
25636: PUSH
25637: LD_INT 56
25639: PUSH
25640: LD_INT 57
25642: PUSH
25643: LD_INT 58
25645: PUSH
25646: LD_INT 59
25648: PUSH
25649: LD_INT 63
25651: PUSH
25652: LD_INT 64
25654: PUSH
25655: LD_INT 65
25657: PUSH
25658: LD_INT 82
25660: PUSH
25661: LD_INT 83
25663: PUSH
25664: LD_INT 84
25666: PUSH
25667: LD_INT 85
25669: PUSH
25670: LD_INT 86
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: ST_TO_ADDR
25728: GO 25731
25730: POP
// if state > - 1 and state < 3 then
25731: LD_VAR 0 3
25735: PUSH
25736: LD_INT 1
25738: NEG
25739: GREATER
25740: PUSH
25741: LD_VAR 0 3
25745: PUSH
25746: LD_INT 3
25748: LESS
25749: AND
25750: IFFALSE 25807
// for i in result do
25752: LD_ADDR_VAR 0 5
25756: PUSH
25757: LD_VAR 0 4
25761: PUSH
25762: FOR_IN
25763: IFFALSE 25805
// if GetTech ( i , side ) <> state then
25765: LD_VAR 0 5
25769: PPUSH
25770: LD_VAR 0 1
25774: PPUSH
25775: CALL_OW 321
25779: PUSH
25780: LD_VAR 0 3
25784: NONEQUAL
25785: IFFALSE 25803
// result := result diff i ;
25787: LD_ADDR_VAR 0 4
25791: PUSH
25792: LD_VAR 0 4
25796: PUSH
25797: LD_VAR 0 5
25801: DIFF
25802: ST_TO_ADDR
25803: GO 25762
25805: POP
25806: POP
// end ;
25807: LD_VAR 0 4
25811: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25812: LD_INT 0
25814: PPUSH
25815: PPUSH
25816: PPUSH
// result := true ;
25817: LD_ADDR_VAR 0 3
25821: PUSH
25822: LD_INT 1
25824: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25825: LD_ADDR_VAR 0 5
25829: PUSH
25830: LD_VAR 0 2
25834: PPUSH
25835: CALL_OW 480
25839: ST_TO_ADDR
// if not tmp then
25840: LD_VAR 0 5
25844: NOT
25845: IFFALSE 25849
// exit ;
25847: GO 25898
// for i in tmp do
25849: LD_ADDR_VAR 0 4
25853: PUSH
25854: LD_VAR 0 5
25858: PUSH
25859: FOR_IN
25860: IFFALSE 25896
// if GetTech ( i , side ) <> state_researched then
25862: LD_VAR 0 4
25866: PPUSH
25867: LD_VAR 0 1
25871: PPUSH
25872: CALL_OW 321
25876: PUSH
25877: LD_INT 2
25879: NONEQUAL
25880: IFFALSE 25894
// begin result := false ;
25882: LD_ADDR_VAR 0 3
25886: PUSH
25887: LD_INT 0
25889: ST_TO_ADDR
// exit ;
25890: POP
25891: POP
25892: GO 25898
// end ;
25894: GO 25859
25896: POP
25897: POP
// end ;
25898: LD_VAR 0 3
25902: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25903: LD_INT 0
25905: PPUSH
25906: PPUSH
25907: PPUSH
25908: PPUSH
25909: PPUSH
25910: PPUSH
25911: PPUSH
25912: PPUSH
25913: PPUSH
25914: PPUSH
25915: PPUSH
25916: PPUSH
25917: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25918: LD_VAR 0 1
25922: NOT
25923: PUSH
25924: LD_VAR 0 1
25928: PPUSH
25929: CALL_OW 257
25933: PUSH
25934: LD_INT 9
25936: NONEQUAL
25937: OR
25938: IFFALSE 25942
// exit ;
25940: GO 26515
// side := GetSide ( unit ) ;
25942: LD_ADDR_VAR 0 9
25946: PUSH
25947: LD_VAR 0 1
25951: PPUSH
25952: CALL_OW 255
25956: ST_TO_ADDR
// tech_space := tech_spacanom ;
25957: LD_ADDR_VAR 0 12
25961: PUSH
25962: LD_INT 29
25964: ST_TO_ADDR
// tech_time := tech_taurad ;
25965: LD_ADDR_VAR 0 13
25969: PUSH
25970: LD_INT 28
25972: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25973: LD_ADDR_VAR 0 11
25977: PUSH
25978: LD_VAR 0 1
25982: PPUSH
25983: CALL_OW 310
25987: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25988: LD_VAR 0 11
25992: PPUSH
25993: CALL_OW 247
25997: PUSH
25998: LD_INT 2
26000: EQUAL
26001: IFFALSE 26005
// exit ;
26003: GO 26515
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26005: LD_ADDR_VAR 0 8
26009: PUSH
26010: LD_INT 81
26012: PUSH
26013: LD_VAR 0 9
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 3
26024: PUSH
26025: LD_INT 21
26027: PUSH
26028: LD_INT 3
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 69
26047: ST_TO_ADDR
// if not tmp then
26048: LD_VAR 0 8
26052: NOT
26053: IFFALSE 26057
// exit ;
26055: GO 26515
// if in_unit then
26057: LD_VAR 0 11
26061: IFFALSE 26085
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26063: LD_ADDR_VAR 0 10
26067: PUSH
26068: LD_VAR 0 8
26072: PPUSH
26073: LD_VAR 0 11
26077: PPUSH
26078: CALL_OW 74
26082: ST_TO_ADDR
26083: GO 26105
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26085: LD_ADDR_VAR 0 10
26089: PUSH
26090: LD_VAR 0 8
26094: PPUSH
26095: LD_VAR 0 1
26099: PPUSH
26100: CALL_OW 74
26104: ST_TO_ADDR
// if not enemy then
26105: LD_VAR 0 10
26109: NOT
26110: IFFALSE 26114
// exit ;
26112: GO 26515
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26114: LD_VAR 0 11
26118: PUSH
26119: LD_VAR 0 11
26123: PPUSH
26124: LD_VAR 0 10
26128: PPUSH
26129: CALL_OW 296
26133: PUSH
26134: LD_INT 13
26136: GREATER
26137: AND
26138: PUSH
26139: LD_VAR 0 1
26143: PPUSH
26144: LD_VAR 0 10
26148: PPUSH
26149: CALL_OW 296
26153: PUSH
26154: LD_INT 12
26156: GREATER
26157: OR
26158: IFFALSE 26162
// exit ;
26160: GO 26515
// missile := [ 1 ] ;
26162: LD_ADDR_VAR 0 14
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: EMPTY
26171: LIST
26172: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26173: LD_VAR 0 9
26177: PPUSH
26178: LD_VAR 0 12
26182: PPUSH
26183: CALL_OW 325
26187: IFFALSE 26216
// missile := Replace ( missile , missile + 1 , 2 ) ;
26189: LD_ADDR_VAR 0 14
26193: PUSH
26194: LD_VAR 0 14
26198: PPUSH
26199: LD_VAR 0 14
26203: PUSH
26204: LD_INT 1
26206: PLUS
26207: PPUSH
26208: LD_INT 2
26210: PPUSH
26211: CALL_OW 1
26215: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26216: LD_VAR 0 9
26220: PPUSH
26221: LD_VAR 0 13
26225: PPUSH
26226: CALL_OW 325
26230: PUSH
26231: LD_VAR 0 10
26235: PPUSH
26236: CALL_OW 255
26240: PPUSH
26241: LD_VAR 0 13
26245: PPUSH
26246: CALL_OW 325
26250: NOT
26251: AND
26252: IFFALSE 26281
// missile := Replace ( missile , missile + 1 , 3 ) ;
26254: LD_ADDR_VAR 0 14
26258: PUSH
26259: LD_VAR 0 14
26263: PPUSH
26264: LD_VAR 0 14
26268: PUSH
26269: LD_INT 1
26271: PLUS
26272: PPUSH
26273: LD_INT 3
26275: PPUSH
26276: CALL_OW 1
26280: ST_TO_ADDR
// if missile < 2 then
26281: LD_VAR 0 14
26285: PUSH
26286: LD_INT 2
26288: LESS
26289: IFFALSE 26293
// exit ;
26291: GO 26515
// x := GetX ( enemy ) ;
26293: LD_ADDR_VAR 0 4
26297: PUSH
26298: LD_VAR 0 10
26302: PPUSH
26303: CALL_OW 250
26307: ST_TO_ADDR
// y := GetY ( enemy ) ;
26308: LD_ADDR_VAR 0 5
26312: PUSH
26313: LD_VAR 0 10
26317: PPUSH
26318: CALL_OW 251
26322: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26323: LD_ADDR_VAR 0 6
26327: PUSH
26328: LD_VAR 0 4
26332: PUSH
26333: LD_INT 1
26335: NEG
26336: PPUSH
26337: LD_INT 1
26339: PPUSH
26340: CALL_OW 12
26344: PLUS
26345: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26346: LD_ADDR_VAR 0 7
26350: PUSH
26351: LD_VAR 0 5
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PPUSH
26360: LD_INT 1
26362: PPUSH
26363: CALL_OW 12
26367: PLUS
26368: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26369: LD_VAR 0 6
26373: PPUSH
26374: LD_VAR 0 7
26378: PPUSH
26379: CALL_OW 488
26383: NOT
26384: IFFALSE 26406
// begin _x := x ;
26386: LD_ADDR_VAR 0 6
26390: PUSH
26391: LD_VAR 0 4
26395: ST_TO_ADDR
// _y := y ;
26396: LD_ADDR_VAR 0 7
26400: PUSH
26401: LD_VAR 0 5
26405: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26406: LD_ADDR_VAR 0 3
26410: PUSH
26411: LD_INT 1
26413: PPUSH
26414: LD_VAR 0 14
26418: PPUSH
26419: CALL_OW 12
26423: ST_TO_ADDR
// case i of 1 :
26424: LD_VAR 0 3
26428: PUSH
26429: LD_INT 1
26431: DOUBLE
26432: EQUAL
26433: IFTRUE 26437
26435: GO 26454
26437: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26438: LD_VAR 0 1
26442: PPUSH
26443: LD_VAR 0 10
26447: PPUSH
26448: CALL_OW 115
26452: GO 26515
26454: LD_INT 2
26456: DOUBLE
26457: EQUAL
26458: IFTRUE 26462
26460: GO 26484
26462: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26463: LD_VAR 0 1
26467: PPUSH
26468: LD_VAR 0 6
26472: PPUSH
26473: LD_VAR 0 7
26477: PPUSH
26478: CALL_OW 153
26482: GO 26515
26484: LD_INT 3
26486: DOUBLE
26487: EQUAL
26488: IFTRUE 26492
26490: GO 26514
26492: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26493: LD_VAR 0 1
26497: PPUSH
26498: LD_VAR 0 6
26502: PPUSH
26503: LD_VAR 0 7
26507: PPUSH
26508: CALL_OW 154
26512: GO 26515
26514: POP
// end ;
26515: LD_VAR 0 2
26519: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26520: LD_INT 0
26522: PPUSH
26523: PPUSH
26524: PPUSH
26525: PPUSH
26526: PPUSH
26527: PPUSH
// if not unit or not building then
26528: LD_VAR 0 1
26532: NOT
26533: PUSH
26534: LD_VAR 0 2
26538: NOT
26539: OR
26540: IFFALSE 26544
// exit ;
26542: GO 26702
// x := GetX ( building ) ;
26544: LD_ADDR_VAR 0 5
26548: PUSH
26549: LD_VAR 0 2
26553: PPUSH
26554: CALL_OW 250
26558: ST_TO_ADDR
// y := GetY ( building ) ;
26559: LD_ADDR_VAR 0 6
26563: PUSH
26564: LD_VAR 0 2
26568: PPUSH
26569: CALL_OW 251
26573: ST_TO_ADDR
// for i = 0 to 5 do
26574: LD_ADDR_VAR 0 4
26578: PUSH
26579: DOUBLE
26580: LD_INT 0
26582: DEC
26583: ST_TO_ADDR
26584: LD_INT 5
26586: PUSH
26587: FOR_TO
26588: IFFALSE 26700
// begin _x := ShiftX ( x , i , 3 ) ;
26590: LD_ADDR_VAR 0 7
26594: PUSH
26595: LD_VAR 0 5
26599: PPUSH
26600: LD_VAR 0 4
26604: PPUSH
26605: LD_INT 3
26607: PPUSH
26608: CALL_OW 272
26612: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26613: LD_ADDR_VAR 0 8
26617: PUSH
26618: LD_VAR 0 6
26622: PPUSH
26623: LD_VAR 0 4
26627: PPUSH
26628: LD_INT 3
26630: PPUSH
26631: CALL_OW 273
26635: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26636: LD_VAR 0 7
26640: PPUSH
26641: LD_VAR 0 8
26645: PPUSH
26646: CALL_OW 488
26650: NOT
26651: IFFALSE 26655
// continue ;
26653: GO 26587
// if HexInfo ( _x , _y ) = 0 then
26655: LD_VAR 0 7
26659: PPUSH
26660: LD_VAR 0 8
26664: PPUSH
26665: CALL_OW 428
26669: PUSH
26670: LD_INT 0
26672: EQUAL
26673: IFFALSE 26698
// begin ComMoveXY ( unit , _x , _y ) ;
26675: LD_VAR 0 1
26679: PPUSH
26680: LD_VAR 0 7
26684: PPUSH
26685: LD_VAR 0 8
26689: PPUSH
26690: CALL_OW 111
// exit ;
26694: POP
26695: POP
26696: GO 26702
// end ; end ;
26698: GO 26587
26700: POP
26701: POP
// end ;
26702: LD_VAR 0 3
26706: RET
// export function ScanBase ( side , base_area ) ; begin
26707: LD_INT 0
26709: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26710: LD_ADDR_VAR 0 3
26714: PUSH
26715: LD_VAR 0 2
26719: PPUSH
26720: LD_INT 81
26722: PUSH
26723: LD_VAR 0 1
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PPUSH
26732: CALL_OW 70
26736: ST_TO_ADDR
// end ;
26737: LD_VAR 0 3
26741: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26742: LD_INT 0
26744: PPUSH
26745: PPUSH
26746: PPUSH
26747: PPUSH
// result := false ;
26748: LD_ADDR_VAR 0 2
26752: PUSH
26753: LD_INT 0
26755: ST_TO_ADDR
// side := GetSide ( unit ) ;
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: LD_VAR 0 1
26765: PPUSH
26766: CALL_OW 255
26770: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26771: LD_ADDR_VAR 0 4
26775: PUSH
26776: LD_VAR 0 1
26780: PPUSH
26781: CALL_OW 248
26785: ST_TO_ADDR
// case nat of 1 :
26786: LD_VAR 0 4
26790: PUSH
26791: LD_INT 1
26793: DOUBLE
26794: EQUAL
26795: IFTRUE 26799
26797: GO 26810
26799: POP
// tech := tech_lassight ; 2 :
26800: LD_ADDR_VAR 0 5
26804: PUSH
26805: LD_INT 12
26807: ST_TO_ADDR
26808: GO 26849
26810: LD_INT 2
26812: DOUBLE
26813: EQUAL
26814: IFTRUE 26818
26816: GO 26829
26818: POP
// tech := tech_mortar ; 3 :
26819: LD_ADDR_VAR 0 5
26823: PUSH
26824: LD_INT 41
26826: ST_TO_ADDR
26827: GO 26849
26829: LD_INT 3
26831: DOUBLE
26832: EQUAL
26833: IFTRUE 26837
26835: GO 26848
26837: POP
// tech := tech_bazooka ; end ;
26838: LD_ADDR_VAR 0 5
26842: PUSH
26843: LD_INT 44
26845: ST_TO_ADDR
26846: GO 26849
26848: POP
// if Researched ( side , tech ) then
26849: LD_VAR 0 3
26853: PPUSH
26854: LD_VAR 0 5
26858: PPUSH
26859: CALL_OW 325
26863: IFFALSE 26890
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26865: LD_ADDR_VAR 0 2
26869: PUSH
26870: LD_INT 5
26872: PUSH
26873: LD_INT 8
26875: PUSH
26876: LD_INT 9
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: PUSH
26884: LD_VAR 0 4
26888: ARRAY
26889: ST_TO_ADDR
// end ;
26890: LD_VAR 0 2
26894: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26895: LD_INT 0
26897: PPUSH
26898: PPUSH
26899: PPUSH
// if not mines then
26900: LD_VAR 0 2
26904: NOT
26905: IFFALSE 26909
// exit ;
26907: GO 27053
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26909: LD_ADDR_VAR 0 5
26913: PUSH
26914: LD_INT 81
26916: PUSH
26917: LD_VAR 0 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 3
26928: PUSH
26929: LD_INT 21
26931: PUSH
26932: LD_INT 3
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PPUSH
26947: CALL_OW 69
26951: ST_TO_ADDR
// for i in mines do
26952: LD_ADDR_VAR 0 4
26956: PUSH
26957: LD_VAR 0 2
26961: PUSH
26962: FOR_IN
26963: IFFALSE 27051
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26965: LD_VAR 0 4
26969: PUSH
26970: LD_INT 1
26972: ARRAY
26973: PPUSH
26974: LD_VAR 0 4
26978: PUSH
26979: LD_INT 2
26981: ARRAY
26982: PPUSH
26983: CALL_OW 458
26987: NOT
26988: IFFALSE 26992
// continue ;
26990: GO 26962
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26992: LD_VAR 0 4
26996: PUSH
26997: LD_INT 1
26999: ARRAY
27000: PPUSH
27001: LD_VAR 0 4
27005: PUSH
27006: LD_INT 2
27008: ARRAY
27009: PPUSH
27010: CALL_OW 428
27014: PUSH
27015: LD_VAR 0 5
27019: IN
27020: IFFALSE 27049
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27022: LD_VAR 0 4
27026: PUSH
27027: LD_INT 1
27029: ARRAY
27030: PPUSH
27031: LD_VAR 0 4
27035: PUSH
27036: LD_INT 2
27038: ARRAY
27039: PPUSH
27040: LD_VAR 0 1
27044: PPUSH
27045: CALL_OW 456
// end ;
27049: GO 26962
27051: POP
27052: POP
// end ;
27053: LD_VAR 0 3
27057: RET
// export function Count ( array ) ; var i ; begin
27058: LD_INT 0
27060: PPUSH
27061: PPUSH
// result := 0 ;
27062: LD_ADDR_VAR 0 2
27066: PUSH
27067: LD_INT 0
27069: ST_TO_ADDR
// for i in array do
27070: LD_ADDR_VAR 0 3
27074: PUSH
27075: LD_VAR 0 1
27079: PUSH
27080: FOR_IN
27081: IFFALSE 27105
// if i then
27083: LD_VAR 0 3
27087: IFFALSE 27103
// result := result + 1 ;
27089: LD_ADDR_VAR 0 2
27093: PUSH
27094: LD_VAR 0 2
27098: PUSH
27099: LD_INT 1
27101: PLUS
27102: ST_TO_ADDR
27103: GO 27080
27105: POP
27106: POP
// end ;
27107: LD_VAR 0 2
27111: RET
// export function IsEmpty ( building ) ; begin
27112: LD_INT 0
27114: PPUSH
// if not building then
27115: LD_VAR 0 1
27119: NOT
27120: IFFALSE 27124
// exit ;
27122: GO 27167
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27124: LD_ADDR_VAR 0 2
27128: PUSH
27129: LD_VAR 0 1
27133: PUSH
27134: LD_INT 22
27136: PUSH
27137: LD_VAR 0 1
27141: PPUSH
27142: CALL_OW 255
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 58
27153: PUSH
27154: EMPTY
27155: LIST
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PPUSH
27161: CALL_OW 69
27165: IN
27166: ST_TO_ADDR
// end ;
27167: LD_VAR 0 2
27171: RET
// export function IsNotFull ( building ) ; begin
27172: LD_INT 0
27174: PPUSH
// if not building then
27175: LD_VAR 0 1
27179: NOT
27180: IFFALSE 27184
// exit ;
27182: GO 27203
// result := UnitsInside ( building ) < 6 ;
27184: LD_ADDR_VAR 0 2
27188: PUSH
27189: LD_VAR 0 1
27193: PPUSH
27194: CALL_OW 313
27198: PUSH
27199: LD_INT 6
27201: LESS
27202: ST_TO_ADDR
// end ;
27203: LD_VAR 0 2
27207: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27208: LD_INT 0
27210: PPUSH
27211: PPUSH
27212: PPUSH
27213: PPUSH
// tmp := [ ] ;
27214: LD_ADDR_VAR 0 3
27218: PUSH
27219: EMPTY
27220: ST_TO_ADDR
// list := [ ] ;
27221: LD_ADDR_VAR 0 5
27225: PUSH
27226: EMPTY
27227: ST_TO_ADDR
// for i = 16 to 25 do
27228: LD_ADDR_VAR 0 4
27232: PUSH
27233: DOUBLE
27234: LD_INT 16
27236: DEC
27237: ST_TO_ADDR
27238: LD_INT 25
27240: PUSH
27241: FOR_TO
27242: IFFALSE 27315
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27244: LD_ADDR_VAR 0 3
27248: PUSH
27249: LD_VAR 0 3
27253: PUSH
27254: LD_INT 22
27256: PUSH
27257: LD_VAR 0 1
27261: PPUSH
27262: CALL_OW 255
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 91
27273: PUSH
27274: LD_VAR 0 1
27278: PUSH
27279: LD_INT 6
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 30
27289: PUSH
27290: LD_VAR 0 4
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: LIST
27303: PUSH
27304: EMPTY
27305: LIST
27306: PPUSH
27307: CALL_OW 69
27311: ADD
27312: ST_TO_ADDR
27313: GO 27241
27315: POP
27316: POP
// for i = 1 to tmp do
27317: LD_ADDR_VAR 0 4
27321: PUSH
27322: DOUBLE
27323: LD_INT 1
27325: DEC
27326: ST_TO_ADDR
27327: LD_VAR 0 3
27331: PUSH
27332: FOR_TO
27333: IFFALSE 27421
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27335: LD_ADDR_VAR 0 5
27339: PUSH
27340: LD_VAR 0 5
27344: PUSH
27345: LD_VAR 0 3
27349: PUSH
27350: LD_VAR 0 4
27354: ARRAY
27355: PPUSH
27356: CALL_OW 266
27360: PUSH
27361: LD_VAR 0 3
27365: PUSH
27366: LD_VAR 0 4
27370: ARRAY
27371: PPUSH
27372: CALL_OW 250
27376: PUSH
27377: LD_VAR 0 3
27381: PUSH
27382: LD_VAR 0 4
27386: ARRAY
27387: PPUSH
27388: CALL_OW 251
27392: PUSH
27393: LD_VAR 0 3
27397: PUSH
27398: LD_VAR 0 4
27402: ARRAY
27403: PPUSH
27404: CALL_OW 254
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: PUSH
27415: EMPTY
27416: LIST
27417: ADD
27418: ST_TO_ADDR
27419: GO 27332
27421: POP
27422: POP
// result := list ;
27423: LD_ADDR_VAR 0 2
27427: PUSH
27428: LD_VAR 0 5
27432: ST_TO_ADDR
// end ;
27433: LD_VAR 0 2
27437: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27438: LD_INT 0
27440: PPUSH
27441: PPUSH
27442: PPUSH
27443: PPUSH
27444: PPUSH
27445: PPUSH
27446: PPUSH
// if not factory then
27447: LD_VAR 0 1
27451: NOT
27452: IFFALSE 27456
// exit ;
27454: GO 28049
// if control = control_apeman then
27456: LD_VAR 0 4
27460: PUSH
27461: LD_INT 5
27463: EQUAL
27464: IFFALSE 27573
// begin tmp := UnitsInside ( factory ) ;
27466: LD_ADDR_VAR 0 8
27470: PUSH
27471: LD_VAR 0 1
27475: PPUSH
27476: CALL_OW 313
27480: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27481: LD_VAR 0 8
27485: PPUSH
27486: LD_INT 25
27488: PUSH
27489: LD_INT 12
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PPUSH
27496: CALL_OW 72
27500: NOT
27501: IFFALSE 27511
// control := control_manual ;
27503: LD_ADDR_VAR 0 4
27507: PUSH
27508: LD_INT 1
27510: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27511: LD_ADDR_VAR 0 8
27515: PUSH
27516: LD_VAR 0 1
27520: PPUSH
27521: CALL 27208 0 1
27525: ST_TO_ADDR
// if tmp then
27526: LD_VAR 0 8
27530: IFFALSE 27573
// begin for i in tmp do
27532: LD_ADDR_VAR 0 7
27536: PUSH
27537: LD_VAR 0 8
27541: PUSH
27542: FOR_IN
27543: IFFALSE 27571
// if i [ 1 ] = b_ext_radio then
27545: LD_VAR 0 7
27549: PUSH
27550: LD_INT 1
27552: ARRAY
27553: PUSH
27554: LD_INT 22
27556: EQUAL
27557: IFFALSE 27569
// begin control := control_remote ;
27559: LD_ADDR_VAR 0 4
27563: PUSH
27564: LD_INT 2
27566: ST_TO_ADDR
// break ;
27567: GO 27571
// end ;
27569: GO 27542
27571: POP
27572: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27573: LD_VAR 0 1
27577: PPUSH
27578: LD_VAR 0 2
27582: PPUSH
27583: LD_VAR 0 3
27587: PPUSH
27588: LD_VAR 0 4
27592: PPUSH
27593: LD_VAR 0 5
27597: PPUSH
27598: CALL_OW 448
27602: IFFALSE 27637
// begin result := [ chassis , engine , control , weapon ] ;
27604: LD_ADDR_VAR 0 6
27608: PUSH
27609: LD_VAR 0 2
27613: PUSH
27614: LD_VAR 0 3
27618: PUSH
27619: LD_VAR 0 4
27623: PUSH
27624: LD_VAR 0 5
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: ST_TO_ADDR
// exit ;
27635: GO 28049
// end ; _chassis := AvailableChassisList ( factory ) ;
27637: LD_ADDR_VAR 0 9
27641: PUSH
27642: LD_VAR 0 1
27646: PPUSH
27647: CALL_OW 475
27651: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27652: LD_ADDR_VAR 0 11
27656: PUSH
27657: LD_VAR 0 1
27661: PPUSH
27662: CALL_OW 476
27666: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27667: LD_ADDR_VAR 0 12
27671: PUSH
27672: LD_VAR 0 1
27676: PPUSH
27677: CALL_OW 477
27681: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27682: LD_ADDR_VAR 0 10
27686: PUSH
27687: LD_VAR 0 1
27691: PPUSH
27692: CALL_OW 478
27696: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27697: LD_VAR 0 9
27701: NOT
27702: PUSH
27703: LD_VAR 0 11
27707: NOT
27708: OR
27709: PUSH
27710: LD_VAR 0 12
27714: NOT
27715: OR
27716: PUSH
27717: LD_VAR 0 10
27721: NOT
27722: OR
27723: IFFALSE 27758
// begin result := [ chassis , engine , control , weapon ] ;
27725: LD_ADDR_VAR 0 6
27729: PUSH
27730: LD_VAR 0 2
27734: PUSH
27735: LD_VAR 0 3
27739: PUSH
27740: LD_VAR 0 4
27744: PUSH
27745: LD_VAR 0 5
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: ST_TO_ADDR
// exit ;
27756: GO 28049
// end ; if not chassis in _chassis then
27758: LD_VAR 0 2
27762: PUSH
27763: LD_VAR 0 9
27767: IN
27768: NOT
27769: IFFALSE 27795
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27771: LD_ADDR_VAR 0 2
27775: PUSH
27776: LD_VAR 0 9
27780: PUSH
27781: LD_INT 1
27783: PPUSH
27784: LD_VAR 0 9
27788: PPUSH
27789: CALL_OW 12
27793: ARRAY
27794: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27795: LD_VAR 0 2
27799: PPUSH
27800: LD_VAR 0 3
27804: PPUSH
27805: CALL 28054 0 2
27809: NOT
27810: IFFALSE 27869
// repeat engine := _engine [ 1 ] ;
27812: LD_ADDR_VAR 0 3
27816: PUSH
27817: LD_VAR 0 11
27821: PUSH
27822: LD_INT 1
27824: ARRAY
27825: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27826: LD_ADDR_VAR 0 11
27830: PUSH
27831: LD_VAR 0 11
27835: PPUSH
27836: LD_INT 1
27838: PPUSH
27839: CALL_OW 3
27843: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27844: LD_VAR 0 2
27848: PPUSH
27849: LD_VAR 0 3
27853: PPUSH
27854: CALL 28054 0 2
27858: PUSH
27859: LD_VAR 0 11
27863: PUSH
27864: EMPTY
27865: EQUAL
27866: OR
27867: IFFALSE 27812
// if not control in _control then
27869: LD_VAR 0 4
27873: PUSH
27874: LD_VAR 0 12
27878: IN
27879: NOT
27880: IFFALSE 27906
// control := _control [ rand ( 1 , _control ) ] ;
27882: LD_ADDR_VAR 0 4
27886: PUSH
27887: LD_VAR 0 12
27891: PUSH
27892: LD_INT 1
27894: PPUSH
27895: LD_VAR 0 12
27899: PPUSH
27900: CALL_OW 12
27904: ARRAY
27905: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27906: LD_VAR 0 2
27910: PPUSH
27911: LD_VAR 0 5
27915: PPUSH
27916: CALL 28274 0 2
27920: NOT
27921: IFFALSE 27980
// repeat weapon := _weapon [ 1 ] ;
27923: LD_ADDR_VAR 0 5
27927: PUSH
27928: LD_VAR 0 10
27932: PUSH
27933: LD_INT 1
27935: ARRAY
27936: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27937: LD_ADDR_VAR 0 10
27941: PUSH
27942: LD_VAR 0 10
27946: PPUSH
27947: LD_INT 1
27949: PPUSH
27950: CALL_OW 3
27954: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27955: LD_VAR 0 2
27959: PPUSH
27960: LD_VAR 0 5
27964: PPUSH
27965: CALL 28274 0 2
27969: PUSH
27970: LD_VAR 0 10
27974: PUSH
27975: EMPTY
27976: EQUAL
27977: OR
27978: IFFALSE 27923
// result := [ ] ;
27980: LD_ADDR_VAR 0 6
27984: PUSH
27985: EMPTY
27986: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27987: LD_VAR 0 1
27991: PPUSH
27992: LD_VAR 0 2
27996: PPUSH
27997: LD_VAR 0 3
28001: PPUSH
28002: LD_VAR 0 4
28006: PPUSH
28007: LD_VAR 0 5
28011: PPUSH
28012: CALL_OW 448
28016: IFFALSE 28049
// result := [ chassis , engine , control , weapon ] ;
28018: LD_ADDR_VAR 0 6
28022: PUSH
28023: LD_VAR 0 2
28027: PUSH
28028: LD_VAR 0 3
28032: PUSH
28033: LD_VAR 0 4
28037: PUSH
28038: LD_VAR 0 5
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: ST_TO_ADDR
// end ;
28049: LD_VAR 0 6
28053: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28054: LD_INT 0
28056: PPUSH
// if not chassis or not engine then
28057: LD_VAR 0 1
28061: NOT
28062: PUSH
28063: LD_VAR 0 2
28067: NOT
28068: OR
28069: IFFALSE 28073
// exit ;
28071: GO 28269
// case engine of engine_solar :
28073: LD_VAR 0 2
28077: PUSH
28078: LD_INT 2
28080: DOUBLE
28081: EQUAL
28082: IFTRUE 28086
28084: GO 28124
28086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28087: LD_ADDR_VAR 0 3
28091: PUSH
28092: LD_INT 11
28094: PUSH
28095: LD_INT 12
28097: PUSH
28098: LD_INT 13
28100: PUSH
28101: LD_INT 14
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: LD_INT 2
28109: PUSH
28110: LD_INT 3
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: ST_TO_ADDR
28122: GO 28253
28124: LD_INT 1
28126: DOUBLE
28127: EQUAL
28128: IFTRUE 28132
28130: GO 28194
28132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28133: LD_ADDR_VAR 0 3
28137: PUSH
28138: LD_INT 11
28140: PUSH
28141: LD_INT 12
28143: PUSH
28144: LD_INT 13
28146: PUSH
28147: LD_INT 14
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: LD_INT 2
28155: PUSH
28156: LD_INT 3
28158: PUSH
28159: LD_INT 4
28161: PUSH
28162: LD_INT 5
28164: PUSH
28165: LD_INT 21
28167: PUSH
28168: LD_INT 23
28170: PUSH
28171: LD_INT 22
28173: PUSH
28174: LD_INT 24
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: ST_TO_ADDR
28192: GO 28253
28194: LD_INT 3
28196: DOUBLE
28197: EQUAL
28198: IFTRUE 28202
28200: GO 28252
28202: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28203: LD_ADDR_VAR 0 3
28207: PUSH
28208: LD_INT 13
28210: PUSH
28211: LD_INT 14
28213: PUSH
28214: LD_INT 2
28216: PUSH
28217: LD_INT 3
28219: PUSH
28220: LD_INT 4
28222: PUSH
28223: LD_INT 5
28225: PUSH
28226: LD_INT 21
28228: PUSH
28229: LD_INT 22
28231: PUSH
28232: LD_INT 23
28234: PUSH
28235: LD_INT 24
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: ST_TO_ADDR
28250: GO 28253
28252: POP
// result := ( chassis in result ) ;
28253: LD_ADDR_VAR 0 3
28257: PUSH
28258: LD_VAR 0 1
28262: PUSH
28263: LD_VAR 0 3
28267: IN
28268: ST_TO_ADDR
// end ;
28269: LD_VAR 0 3
28273: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28274: LD_INT 0
28276: PPUSH
// if not chassis or not weapon then
28277: LD_VAR 0 1
28281: NOT
28282: PUSH
28283: LD_VAR 0 2
28287: NOT
28288: OR
28289: IFFALSE 28293
// exit ;
28291: GO 29355
// case weapon of us_machine_gun :
28293: LD_VAR 0 2
28297: PUSH
28298: LD_INT 2
28300: DOUBLE
28301: EQUAL
28302: IFTRUE 28306
28304: GO 28336
28306: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28307: LD_ADDR_VAR 0 3
28311: PUSH
28312: LD_INT 1
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: LD_INT 3
28320: PUSH
28321: LD_INT 4
28323: PUSH
28324: LD_INT 5
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: ST_TO_ADDR
28334: GO 29339
28336: LD_INT 3
28338: DOUBLE
28339: EQUAL
28340: IFTRUE 28344
28342: GO 28374
28344: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28345: LD_ADDR_VAR 0 3
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: LD_INT 3
28358: PUSH
28359: LD_INT 4
28361: PUSH
28362: LD_INT 5
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: ST_TO_ADDR
28372: GO 29339
28374: LD_INT 11
28376: DOUBLE
28377: EQUAL
28378: IFTRUE 28382
28380: GO 28412
28382: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28383: LD_ADDR_VAR 0 3
28387: PUSH
28388: LD_INT 1
28390: PUSH
28391: LD_INT 2
28393: PUSH
28394: LD_INT 3
28396: PUSH
28397: LD_INT 4
28399: PUSH
28400: LD_INT 5
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: ST_TO_ADDR
28410: GO 29339
28412: LD_INT 4
28414: DOUBLE
28415: EQUAL
28416: IFTRUE 28420
28418: GO 28446
28420: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28421: LD_ADDR_VAR 0 3
28425: PUSH
28426: LD_INT 2
28428: PUSH
28429: LD_INT 3
28431: PUSH
28432: LD_INT 4
28434: PUSH
28435: LD_INT 5
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: ST_TO_ADDR
28444: GO 29339
28446: LD_INT 5
28448: DOUBLE
28449: EQUAL
28450: IFTRUE 28454
28452: GO 28480
28454: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28455: LD_ADDR_VAR 0 3
28459: PUSH
28460: LD_INT 2
28462: PUSH
28463: LD_INT 3
28465: PUSH
28466: LD_INT 4
28468: PUSH
28469: LD_INT 5
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: ST_TO_ADDR
28478: GO 29339
28480: LD_INT 9
28482: DOUBLE
28483: EQUAL
28484: IFTRUE 28488
28486: GO 28514
28488: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28489: LD_ADDR_VAR 0 3
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: LD_INT 3
28499: PUSH
28500: LD_INT 4
28502: PUSH
28503: LD_INT 5
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: ST_TO_ADDR
28512: GO 29339
28514: LD_INT 7
28516: DOUBLE
28517: EQUAL
28518: IFTRUE 28522
28520: GO 28548
28522: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28523: LD_ADDR_VAR 0 3
28527: PUSH
28528: LD_INT 2
28530: PUSH
28531: LD_INT 3
28533: PUSH
28534: LD_INT 4
28536: PUSH
28537: LD_INT 5
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: ST_TO_ADDR
28546: GO 29339
28548: LD_INT 12
28550: DOUBLE
28551: EQUAL
28552: IFTRUE 28556
28554: GO 28582
28556: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28557: LD_ADDR_VAR 0 3
28561: PUSH
28562: LD_INT 2
28564: PUSH
28565: LD_INT 3
28567: PUSH
28568: LD_INT 4
28570: PUSH
28571: LD_INT 5
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: ST_TO_ADDR
28580: GO 29339
28582: LD_INT 13
28584: DOUBLE
28585: EQUAL
28586: IFTRUE 28590
28588: GO 28616
28590: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28591: LD_ADDR_VAR 0 3
28595: PUSH
28596: LD_INT 2
28598: PUSH
28599: LD_INT 3
28601: PUSH
28602: LD_INT 4
28604: PUSH
28605: LD_INT 5
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: ST_TO_ADDR
28614: GO 29339
28616: LD_INT 14
28618: DOUBLE
28619: EQUAL
28620: IFTRUE 28624
28622: GO 28642
28624: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28625: LD_ADDR_VAR 0 3
28629: PUSH
28630: LD_INT 4
28632: PUSH
28633: LD_INT 5
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: ST_TO_ADDR
28640: GO 29339
28642: LD_INT 6
28644: DOUBLE
28645: EQUAL
28646: IFTRUE 28650
28648: GO 28668
28650: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28651: LD_ADDR_VAR 0 3
28655: PUSH
28656: LD_INT 4
28658: PUSH
28659: LD_INT 5
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: ST_TO_ADDR
28666: GO 29339
28668: LD_INT 10
28670: DOUBLE
28671: EQUAL
28672: IFTRUE 28676
28674: GO 28694
28676: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28677: LD_ADDR_VAR 0 3
28681: PUSH
28682: LD_INT 4
28684: PUSH
28685: LD_INT 5
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: ST_TO_ADDR
28692: GO 29339
28694: LD_INT 22
28696: DOUBLE
28697: EQUAL
28698: IFTRUE 28702
28700: GO 28728
28702: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28703: LD_ADDR_VAR 0 3
28707: PUSH
28708: LD_INT 11
28710: PUSH
28711: LD_INT 12
28713: PUSH
28714: LD_INT 13
28716: PUSH
28717: LD_INT 14
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: ST_TO_ADDR
28726: GO 29339
28728: LD_INT 23
28730: DOUBLE
28731: EQUAL
28732: IFTRUE 28736
28734: GO 28762
28736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28737: LD_ADDR_VAR 0 3
28741: PUSH
28742: LD_INT 11
28744: PUSH
28745: LD_INT 12
28747: PUSH
28748: LD_INT 13
28750: PUSH
28751: LD_INT 14
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: ST_TO_ADDR
28760: GO 29339
28762: LD_INT 24
28764: DOUBLE
28765: EQUAL
28766: IFTRUE 28770
28768: GO 28796
28770: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28771: LD_ADDR_VAR 0 3
28775: PUSH
28776: LD_INT 11
28778: PUSH
28779: LD_INT 12
28781: PUSH
28782: LD_INT 13
28784: PUSH
28785: LD_INT 14
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: ST_TO_ADDR
28794: GO 29339
28796: LD_INT 30
28798: DOUBLE
28799: EQUAL
28800: IFTRUE 28804
28802: GO 28830
28804: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28805: LD_ADDR_VAR 0 3
28809: PUSH
28810: LD_INT 11
28812: PUSH
28813: LD_INT 12
28815: PUSH
28816: LD_INT 13
28818: PUSH
28819: LD_INT 14
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: ST_TO_ADDR
28828: GO 29339
28830: LD_INT 25
28832: DOUBLE
28833: EQUAL
28834: IFTRUE 28838
28836: GO 28856
28838: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28839: LD_ADDR_VAR 0 3
28843: PUSH
28844: LD_INT 13
28846: PUSH
28847: LD_INT 14
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: ST_TO_ADDR
28854: GO 29339
28856: LD_INT 27
28858: DOUBLE
28859: EQUAL
28860: IFTRUE 28864
28862: GO 28882
28864: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28865: LD_ADDR_VAR 0 3
28869: PUSH
28870: LD_INT 13
28872: PUSH
28873: LD_INT 14
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: ST_TO_ADDR
28880: GO 29339
28882: LD_EXP 98
28886: DOUBLE
28887: EQUAL
28888: IFTRUE 28892
28890: GO 28918
28892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28893: LD_ADDR_VAR 0 3
28897: PUSH
28898: LD_INT 11
28900: PUSH
28901: LD_INT 12
28903: PUSH
28904: LD_INT 13
28906: PUSH
28907: LD_INT 14
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: ST_TO_ADDR
28916: GO 29339
28918: LD_INT 28
28920: DOUBLE
28921: EQUAL
28922: IFTRUE 28926
28924: GO 28944
28926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28927: LD_ADDR_VAR 0 3
28931: PUSH
28932: LD_INT 13
28934: PUSH
28935: LD_INT 14
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: ST_TO_ADDR
28942: GO 29339
28944: LD_INT 29
28946: DOUBLE
28947: EQUAL
28948: IFTRUE 28952
28950: GO 28970
28952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28953: LD_ADDR_VAR 0 3
28957: PUSH
28958: LD_INT 13
28960: PUSH
28961: LD_INT 14
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: ST_TO_ADDR
28968: GO 29339
28970: LD_INT 31
28972: DOUBLE
28973: EQUAL
28974: IFTRUE 28978
28976: GO 28996
28978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28979: LD_ADDR_VAR 0 3
28983: PUSH
28984: LD_INT 13
28986: PUSH
28987: LD_INT 14
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: ST_TO_ADDR
28994: GO 29339
28996: LD_INT 26
28998: DOUBLE
28999: EQUAL
29000: IFTRUE 29004
29002: GO 29022
29004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29005: LD_ADDR_VAR 0 3
29009: PUSH
29010: LD_INT 13
29012: PUSH
29013: LD_INT 14
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: ST_TO_ADDR
29020: GO 29339
29022: LD_INT 42
29024: DOUBLE
29025: EQUAL
29026: IFTRUE 29030
29028: GO 29056
29030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29031: LD_ADDR_VAR 0 3
29035: PUSH
29036: LD_INT 21
29038: PUSH
29039: LD_INT 22
29041: PUSH
29042: LD_INT 23
29044: PUSH
29045: LD_INT 24
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: ST_TO_ADDR
29054: GO 29339
29056: LD_INT 43
29058: DOUBLE
29059: EQUAL
29060: IFTRUE 29064
29062: GO 29090
29064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29065: LD_ADDR_VAR 0 3
29069: PUSH
29070: LD_INT 21
29072: PUSH
29073: LD_INT 22
29075: PUSH
29076: LD_INT 23
29078: PUSH
29079: LD_INT 24
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: ST_TO_ADDR
29088: GO 29339
29090: LD_INT 44
29092: DOUBLE
29093: EQUAL
29094: IFTRUE 29098
29096: GO 29124
29098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29099: LD_ADDR_VAR 0 3
29103: PUSH
29104: LD_INT 21
29106: PUSH
29107: LD_INT 22
29109: PUSH
29110: LD_INT 23
29112: PUSH
29113: LD_INT 24
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: ST_TO_ADDR
29122: GO 29339
29124: LD_INT 45
29126: DOUBLE
29127: EQUAL
29128: IFTRUE 29132
29130: GO 29158
29132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29133: LD_ADDR_VAR 0 3
29137: PUSH
29138: LD_INT 21
29140: PUSH
29141: LD_INT 22
29143: PUSH
29144: LD_INT 23
29146: PUSH
29147: LD_INT 24
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: ST_TO_ADDR
29156: GO 29339
29158: LD_INT 49
29160: DOUBLE
29161: EQUAL
29162: IFTRUE 29166
29164: GO 29192
29166: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29167: LD_ADDR_VAR 0 3
29171: PUSH
29172: LD_INT 21
29174: PUSH
29175: LD_INT 22
29177: PUSH
29178: LD_INT 23
29180: PUSH
29181: LD_INT 24
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: ST_TO_ADDR
29190: GO 29339
29192: LD_INT 51
29194: DOUBLE
29195: EQUAL
29196: IFTRUE 29200
29198: GO 29226
29200: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29201: LD_ADDR_VAR 0 3
29205: PUSH
29206: LD_INT 21
29208: PUSH
29209: LD_INT 22
29211: PUSH
29212: LD_INT 23
29214: PUSH
29215: LD_INT 24
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: ST_TO_ADDR
29224: GO 29339
29226: LD_INT 52
29228: DOUBLE
29229: EQUAL
29230: IFTRUE 29234
29232: GO 29260
29234: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29235: LD_ADDR_VAR 0 3
29239: PUSH
29240: LD_INT 21
29242: PUSH
29243: LD_INT 22
29245: PUSH
29246: LD_INT 23
29248: PUSH
29249: LD_INT 24
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: ST_TO_ADDR
29258: GO 29339
29260: LD_INT 53
29262: DOUBLE
29263: EQUAL
29264: IFTRUE 29268
29266: GO 29286
29268: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29269: LD_ADDR_VAR 0 3
29273: PUSH
29274: LD_INT 23
29276: PUSH
29277: LD_INT 24
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: ST_TO_ADDR
29284: GO 29339
29286: LD_INT 46
29288: DOUBLE
29289: EQUAL
29290: IFTRUE 29294
29292: GO 29312
29294: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29295: LD_ADDR_VAR 0 3
29299: PUSH
29300: LD_INT 23
29302: PUSH
29303: LD_INT 24
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: ST_TO_ADDR
29310: GO 29339
29312: LD_INT 47
29314: DOUBLE
29315: EQUAL
29316: IFTRUE 29320
29318: GO 29338
29320: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29321: LD_ADDR_VAR 0 3
29325: PUSH
29326: LD_INT 23
29328: PUSH
29329: LD_INT 24
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: ST_TO_ADDR
29336: GO 29339
29338: POP
// result := ( chassis in result ) ;
29339: LD_ADDR_VAR 0 3
29343: PUSH
29344: LD_VAR 0 1
29348: PUSH
29349: LD_VAR 0 3
29353: IN
29354: ST_TO_ADDR
// end ;
29355: LD_VAR 0 3
29359: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29360: LD_INT 0
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
// result := array ;
29369: LD_ADDR_VAR 0 5
29373: PUSH
29374: LD_VAR 0 1
29378: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29379: LD_VAR 0 1
29383: NOT
29384: PUSH
29385: LD_VAR 0 2
29389: NOT
29390: OR
29391: PUSH
29392: LD_VAR 0 3
29396: NOT
29397: OR
29398: PUSH
29399: LD_VAR 0 2
29403: PUSH
29404: LD_VAR 0 1
29408: GREATER
29409: OR
29410: PUSH
29411: LD_VAR 0 3
29415: PUSH
29416: LD_VAR 0 1
29420: GREATER
29421: OR
29422: IFFALSE 29426
// exit ;
29424: GO 29722
// if direction then
29426: LD_VAR 0 4
29430: IFFALSE 29494
// begin d := 1 ;
29432: LD_ADDR_VAR 0 9
29436: PUSH
29437: LD_INT 1
29439: ST_TO_ADDR
// if i_from > i_to then
29440: LD_VAR 0 2
29444: PUSH
29445: LD_VAR 0 3
29449: GREATER
29450: IFFALSE 29476
// length := ( array - i_from ) + i_to else
29452: LD_ADDR_VAR 0 11
29456: PUSH
29457: LD_VAR 0 1
29461: PUSH
29462: LD_VAR 0 2
29466: MINUS
29467: PUSH
29468: LD_VAR 0 3
29472: PLUS
29473: ST_TO_ADDR
29474: GO 29492
// length := i_to - i_from ;
29476: LD_ADDR_VAR 0 11
29480: PUSH
29481: LD_VAR 0 3
29485: PUSH
29486: LD_VAR 0 2
29490: MINUS
29491: ST_TO_ADDR
// end else
29492: GO 29555
// begin d := - 1 ;
29494: LD_ADDR_VAR 0 9
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: ST_TO_ADDR
// if i_from > i_to then
29503: LD_VAR 0 2
29507: PUSH
29508: LD_VAR 0 3
29512: GREATER
29513: IFFALSE 29533
// length := i_from - i_to else
29515: LD_ADDR_VAR 0 11
29519: PUSH
29520: LD_VAR 0 2
29524: PUSH
29525: LD_VAR 0 3
29529: MINUS
29530: ST_TO_ADDR
29531: GO 29555
// length := ( array - i_to ) + i_from ;
29533: LD_ADDR_VAR 0 11
29537: PUSH
29538: LD_VAR 0 1
29542: PUSH
29543: LD_VAR 0 3
29547: MINUS
29548: PUSH
29549: LD_VAR 0 2
29553: PLUS
29554: ST_TO_ADDR
// end ; if not length then
29555: LD_VAR 0 11
29559: NOT
29560: IFFALSE 29564
// exit ;
29562: GO 29722
// tmp := array ;
29564: LD_ADDR_VAR 0 10
29568: PUSH
29569: LD_VAR 0 1
29573: ST_TO_ADDR
// for i = 1 to length do
29574: LD_ADDR_VAR 0 6
29578: PUSH
29579: DOUBLE
29580: LD_INT 1
29582: DEC
29583: ST_TO_ADDR
29584: LD_VAR 0 11
29588: PUSH
29589: FOR_TO
29590: IFFALSE 29710
// begin for j = 1 to array do
29592: LD_ADDR_VAR 0 7
29596: PUSH
29597: DOUBLE
29598: LD_INT 1
29600: DEC
29601: ST_TO_ADDR
29602: LD_VAR 0 1
29606: PUSH
29607: FOR_TO
29608: IFFALSE 29696
// begin k := j + d ;
29610: LD_ADDR_VAR 0 8
29614: PUSH
29615: LD_VAR 0 7
29619: PUSH
29620: LD_VAR 0 9
29624: PLUS
29625: ST_TO_ADDR
// if k > array then
29626: LD_VAR 0 8
29630: PUSH
29631: LD_VAR 0 1
29635: GREATER
29636: IFFALSE 29646
// k := 1 ;
29638: LD_ADDR_VAR 0 8
29642: PUSH
29643: LD_INT 1
29645: ST_TO_ADDR
// if not k then
29646: LD_VAR 0 8
29650: NOT
29651: IFFALSE 29663
// k := array ;
29653: LD_ADDR_VAR 0 8
29657: PUSH
29658: LD_VAR 0 1
29662: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29663: LD_ADDR_VAR 0 10
29667: PUSH
29668: LD_VAR 0 10
29672: PPUSH
29673: LD_VAR 0 8
29677: PPUSH
29678: LD_VAR 0 1
29682: PUSH
29683: LD_VAR 0 7
29687: ARRAY
29688: PPUSH
29689: CALL_OW 1
29693: ST_TO_ADDR
// end ;
29694: GO 29607
29696: POP
29697: POP
// array := tmp ;
29698: LD_ADDR_VAR 0 1
29702: PUSH
29703: LD_VAR 0 10
29707: ST_TO_ADDR
// end ;
29708: GO 29589
29710: POP
29711: POP
// result := array ;
29712: LD_ADDR_VAR 0 5
29716: PUSH
29717: LD_VAR 0 1
29721: ST_TO_ADDR
// end ;
29722: LD_VAR 0 5
29726: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29727: LD_INT 0
29729: PPUSH
29730: PPUSH
// result := 0 ;
29731: LD_ADDR_VAR 0 3
29735: PUSH
29736: LD_INT 0
29738: ST_TO_ADDR
// if not array or not value in array then
29739: LD_VAR 0 1
29743: NOT
29744: PUSH
29745: LD_VAR 0 2
29749: PUSH
29750: LD_VAR 0 1
29754: IN
29755: NOT
29756: OR
29757: IFFALSE 29761
// exit ;
29759: GO 29815
// for i = 1 to array do
29761: LD_ADDR_VAR 0 4
29765: PUSH
29766: DOUBLE
29767: LD_INT 1
29769: DEC
29770: ST_TO_ADDR
29771: LD_VAR 0 1
29775: PUSH
29776: FOR_TO
29777: IFFALSE 29813
// if value = array [ i ] then
29779: LD_VAR 0 2
29783: PUSH
29784: LD_VAR 0 1
29788: PUSH
29789: LD_VAR 0 4
29793: ARRAY
29794: EQUAL
29795: IFFALSE 29811
// begin result := i ;
29797: LD_ADDR_VAR 0 3
29801: PUSH
29802: LD_VAR 0 4
29806: ST_TO_ADDR
// exit ;
29807: POP
29808: POP
29809: GO 29815
// end ;
29811: GO 29776
29813: POP
29814: POP
// end ;
29815: LD_VAR 0 3
29819: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29820: LD_INT 0
29822: PPUSH
// vc_chassis := chassis ;
29823: LD_ADDR_OWVAR 37
29827: PUSH
29828: LD_VAR 0 1
29832: ST_TO_ADDR
// vc_engine := engine ;
29833: LD_ADDR_OWVAR 39
29837: PUSH
29838: LD_VAR 0 2
29842: ST_TO_ADDR
// vc_control := control ;
29843: LD_ADDR_OWVAR 38
29847: PUSH
29848: LD_VAR 0 3
29852: ST_TO_ADDR
// vc_weapon := weapon ;
29853: LD_ADDR_OWVAR 40
29857: PUSH
29858: LD_VAR 0 4
29862: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29863: LD_ADDR_OWVAR 41
29867: PUSH
29868: LD_VAR 0 5
29872: ST_TO_ADDR
// end ;
29873: LD_VAR 0 6
29877: RET
// export function WantPlant ( unit ) ; var task ; begin
29878: LD_INT 0
29880: PPUSH
29881: PPUSH
// result := false ;
29882: LD_ADDR_VAR 0 2
29886: PUSH
29887: LD_INT 0
29889: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29890: LD_ADDR_VAR 0 3
29894: PUSH
29895: LD_VAR 0 1
29899: PPUSH
29900: CALL_OW 437
29904: ST_TO_ADDR
// if task then
29905: LD_VAR 0 3
29909: IFFALSE 29937
// if task [ 1 ] [ 1 ] = p then
29911: LD_VAR 0 3
29915: PUSH
29916: LD_INT 1
29918: ARRAY
29919: PUSH
29920: LD_INT 1
29922: ARRAY
29923: PUSH
29924: LD_STRING p
29926: EQUAL
29927: IFFALSE 29937
// result := true ;
29929: LD_ADDR_VAR 0 2
29933: PUSH
29934: LD_INT 1
29936: ST_TO_ADDR
// end ;
29937: LD_VAR 0 2
29941: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29942: LD_INT 0
29944: PPUSH
29945: PPUSH
29946: PPUSH
29947: PPUSH
// if pos < 1 then
29948: LD_VAR 0 2
29952: PUSH
29953: LD_INT 1
29955: LESS
29956: IFFALSE 29960
// exit ;
29958: GO 30263
// if pos = 1 then
29960: LD_VAR 0 2
29964: PUSH
29965: LD_INT 1
29967: EQUAL
29968: IFFALSE 30001
// result := Replace ( arr , pos [ 1 ] , value ) else
29970: LD_ADDR_VAR 0 4
29974: PUSH
29975: LD_VAR 0 1
29979: PPUSH
29980: LD_VAR 0 2
29984: PUSH
29985: LD_INT 1
29987: ARRAY
29988: PPUSH
29989: LD_VAR 0 3
29993: PPUSH
29994: CALL_OW 1
29998: ST_TO_ADDR
29999: GO 30263
// begin tmp := arr ;
30001: LD_ADDR_VAR 0 6
30005: PUSH
30006: LD_VAR 0 1
30010: ST_TO_ADDR
// s_arr := [ tmp ] ;
30011: LD_ADDR_VAR 0 7
30015: PUSH
30016: LD_VAR 0 6
30020: PUSH
30021: EMPTY
30022: LIST
30023: ST_TO_ADDR
// for i = 1 to pos - 1 do
30024: LD_ADDR_VAR 0 5
30028: PUSH
30029: DOUBLE
30030: LD_INT 1
30032: DEC
30033: ST_TO_ADDR
30034: LD_VAR 0 2
30038: PUSH
30039: LD_INT 1
30041: MINUS
30042: PUSH
30043: FOR_TO
30044: IFFALSE 30089
// begin tmp := tmp [ pos [ i ] ] ;
30046: LD_ADDR_VAR 0 6
30050: PUSH
30051: LD_VAR 0 6
30055: PUSH
30056: LD_VAR 0 2
30060: PUSH
30061: LD_VAR 0 5
30065: ARRAY
30066: ARRAY
30067: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30068: LD_ADDR_VAR 0 7
30072: PUSH
30073: LD_VAR 0 7
30077: PUSH
30078: LD_VAR 0 6
30082: PUSH
30083: EMPTY
30084: LIST
30085: ADD
30086: ST_TO_ADDR
// end ;
30087: GO 30043
30089: POP
30090: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30091: LD_ADDR_VAR 0 6
30095: PUSH
30096: LD_VAR 0 6
30100: PPUSH
30101: LD_VAR 0 2
30105: PUSH
30106: LD_VAR 0 2
30110: ARRAY
30111: PPUSH
30112: LD_VAR 0 3
30116: PPUSH
30117: CALL_OW 1
30121: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30122: LD_ADDR_VAR 0 7
30126: PUSH
30127: LD_VAR 0 7
30131: PPUSH
30132: LD_VAR 0 7
30136: PPUSH
30137: LD_VAR 0 6
30141: PPUSH
30142: CALL_OW 1
30146: ST_TO_ADDR
// for i = s_arr downto 2 do
30147: LD_ADDR_VAR 0 5
30151: PUSH
30152: DOUBLE
30153: LD_VAR 0 7
30157: INC
30158: ST_TO_ADDR
30159: LD_INT 2
30161: PUSH
30162: FOR_DOWNTO
30163: IFFALSE 30247
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30165: LD_ADDR_VAR 0 6
30169: PUSH
30170: LD_VAR 0 7
30174: PUSH
30175: LD_VAR 0 5
30179: PUSH
30180: LD_INT 1
30182: MINUS
30183: ARRAY
30184: PPUSH
30185: LD_VAR 0 2
30189: PUSH
30190: LD_VAR 0 5
30194: PUSH
30195: LD_INT 1
30197: MINUS
30198: ARRAY
30199: PPUSH
30200: LD_VAR 0 7
30204: PUSH
30205: LD_VAR 0 5
30209: ARRAY
30210: PPUSH
30211: CALL_OW 1
30215: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30216: LD_ADDR_VAR 0 7
30220: PUSH
30221: LD_VAR 0 7
30225: PPUSH
30226: LD_VAR 0 5
30230: PUSH
30231: LD_INT 1
30233: MINUS
30234: PPUSH
30235: LD_VAR 0 6
30239: PPUSH
30240: CALL_OW 1
30244: ST_TO_ADDR
// end ;
30245: GO 30162
30247: POP
30248: POP
// result := s_arr [ 1 ] ;
30249: LD_ADDR_VAR 0 4
30253: PUSH
30254: LD_VAR 0 7
30258: PUSH
30259: LD_INT 1
30261: ARRAY
30262: ST_TO_ADDR
// end ; end ;
30263: LD_VAR 0 4
30267: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30268: LD_INT 0
30270: PPUSH
30271: PPUSH
// if not list then
30272: LD_VAR 0 1
30276: NOT
30277: IFFALSE 30281
// exit ;
30279: GO 30372
// i := list [ pos1 ] ;
30281: LD_ADDR_VAR 0 5
30285: PUSH
30286: LD_VAR 0 1
30290: PUSH
30291: LD_VAR 0 2
30295: ARRAY
30296: ST_TO_ADDR
// if not i then
30297: LD_VAR 0 5
30301: NOT
30302: IFFALSE 30306
// exit ;
30304: GO 30372
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30306: LD_ADDR_VAR 0 1
30310: PUSH
30311: LD_VAR 0 1
30315: PPUSH
30316: LD_VAR 0 2
30320: PPUSH
30321: LD_VAR 0 1
30325: PUSH
30326: LD_VAR 0 3
30330: ARRAY
30331: PPUSH
30332: CALL_OW 1
30336: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30337: LD_ADDR_VAR 0 1
30341: PUSH
30342: LD_VAR 0 1
30346: PPUSH
30347: LD_VAR 0 3
30351: PPUSH
30352: LD_VAR 0 5
30356: PPUSH
30357: CALL_OW 1
30361: ST_TO_ADDR
// result := list ;
30362: LD_ADDR_VAR 0 4
30366: PUSH
30367: LD_VAR 0 1
30371: ST_TO_ADDR
// end ;
30372: LD_VAR 0 4
30376: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30377: LD_INT 0
30379: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30380: LD_ADDR_VAR 0 5
30384: PUSH
30385: LD_VAR 0 1
30389: PPUSH
30390: CALL_OW 250
30394: PPUSH
30395: LD_VAR 0 1
30399: PPUSH
30400: CALL_OW 251
30404: PPUSH
30405: LD_VAR 0 2
30409: PPUSH
30410: LD_VAR 0 3
30414: PPUSH
30415: LD_VAR 0 4
30419: PPUSH
30420: CALL 30430 0 5
30424: ST_TO_ADDR
// end ;
30425: LD_VAR 0 5
30429: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30430: LD_INT 0
30432: PPUSH
30433: PPUSH
30434: PPUSH
30435: PPUSH
// if not list then
30436: LD_VAR 0 3
30440: NOT
30441: IFFALSE 30445
// exit ;
30443: GO 30833
// result := [ ] ;
30445: LD_ADDR_VAR 0 6
30449: PUSH
30450: EMPTY
30451: ST_TO_ADDR
// for i in list do
30452: LD_ADDR_VAR 0 7
30456: PUSH
30457: LD_VAR 0 3
30461: PUSH
30462: FOR_IN
30463: IFFALSE 30665
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30465: LD_ADDR_VAR 0 9
30469: PUSH
30470: LD_VAR 0 7
30474: PPUSH
30475: LD_VAR 0 1
30479: PPUSH
30480: LD_VAR 0 2
30484: PPUSH
30485: CALL_OW 297
30489: ST_TO_ADDR
// if not result then
30490: LD_VAR 0 6
30494: NOT
30495: IFFALSE 30521
// result := [ [ i , tmp ] ] else
30497: LD_ADDR_VAR 0 6
30501: PUSH
30502: LD_VAR 0 7
30506: PUSH
30507: LD_VAR 0 9
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: ST_TO_ADDR
30519: GO 30663
// begin if result [ result ] [ 2 ] < tmp then
30521: LD_VAR 0 6
30525: PUSH
30526: LD_VAR 0 6
30530: ARRAY
30531: PUSH
30532: LD_INT 2
30534: ARRAY
30535: PUSH
30536: LD_VAR 0 9
30540: LESS
30541: IFFALSE 30583
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30543: LD_ADDR_VAR 0 6
30547: PUSH
30548: LD_VAR 0 6
30552: PPUSH
30553: LD_VAR 0 6
30557: PUSH
30558: LD_INT 1
30560: PLUS
30561: PPUSH
30562: LD_VAR 0 7
30566: PUSH
30567: LD_VAR 0 9
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PPUSH
30576: CALL_OW 2
30580: ST_TO_ADDR
30581: GO 30663
// for j = 1 to result do
30583: LD_ADDR_VAR 0 8
30587: PUSH
30588: DOUBLE
30589: LD_INT 1
30591: DEC
30592: ST_TO_ADDR
30593: LD_VAR 0 6
30597: PUSH
30598: FOR_TO
30599: IFFALSE 30661
// begin if tmp < result [ j ] [ 2 ] then
30601: LD_VAR 0 9
30605: PUSH
30606: LD_VAR 0 6
30610: PUSH
30611: LD_VAR 0 8
30615: ARRAY
30616: PUSH
30617: LD_INT 2
30619: ARRAY
30620: LESS
30621: IFFALSE 30659
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30623: LD_ADDR_VAR 0 6
30627: PUSH
30628: LD_VAR 0 6
30632: PPUSH
30633: LD_VAR 0 8
30637: PPUSH
30638: LD_VAR 0 7
30642: PUSH
30643: LD_VAR 0 9
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PPUSH
30652: CALL_OW 2
30656: ST_TO_ADDR
// break ;
30657: GO 30661
// end ; end ;
30659: GO 30598
30661: POP
30662: POP
// end ; end ;
30663: GO 30462
30665: POP
30666: POP
// if result and not asc then
30667: LD_VAR 0 6
30671: PUSH
30672: LD_VAR 0 4
30676: NOT
30677: AND
30678: IFFALSE 30753
// begin tmp := result ;
30680: LD_ADDR_VAR 0 9
30684: PUSH
30685: LD_VAR 0 6
30689: ST_TO_ADDR
// for i = tmp downto 1 do
30690: LD_ADDR_VAR 0 7
30694: PUSH
30695: DOUBLE
30696: LD_VAR 0 9
30700: INC
30701: ST_TO_ADDR
30702: LD_INT 1
30704: PUSH
30705: FOR_DOWNTO
30706: IFFALSE 30751
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30708: LD_ADDR_VAR 0 6
30712: PUSH
30713: LD_VAR 0 6
30717: PPUSH
30718: LD_VAR 0 9
30722: PUSH
30723: LD_VAR 0 7
30727: MINUS
30728: PUSH
30729: LD_INT 1
30731: PLUS
30732: PPUSH
30733: LD_VAR 0 9
30737: PUSH
30738: LD_VAR 0 7
30742: ARRAY
30743: PPUSH
30744: CALL_OW 1
30748: ST_TO_ADDR
30749: GO 30705
30751: POP
30752: POP
// end ; tmp := [ ] ;
30753: LD_ADDR_VAR 0 9
30757: PUSH
30758: EMPTY
30759: ST_TO_ADDR
// if mode then
30760: LD_VAR 0 5
30764: IFFALSE 30833
// begin for i = 1 to result do
30766: LD_ADDR_VAR 0 7
30770: PUSH
30771: DOUBLE
30772: LD_INT 1
30774: DEC
30775: ST_TO_ADDR
30776: LD_VAR 0 6
30780: PUSH
30781: FOR_TO
30782: IFFALSE 30821
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30784: LD_ADDR_VAR 0 9
30788: PUSH
30789: LD_VAR 0 9
30793: PPUSH
30794: LD_VAR 0 7
30798: PPUSH
30799: LD_VAR 0 6
30803: PUSH
30804: LD_VAR 0 7
30808: ARRAY
30809: PUSH
30810: LD_INT 1
30812: ARRAY
30813: PPUSH
30814: CALL_OW 1
30818: ST_TO_ADDR
30819: GO 30781
30821: POP
30822: POP
// result := tmp ;
30823: LD_ADDR_VAR 0 6
30827: PUSH
30828: LD_VAR 0 9
30832: ST_TO_ADDR
// end ; end ;
30833: LD_VAR 0 6
30837: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30838: LD_INT 0
30840: PPUSH
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
30845: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30846: LD_ADDR_VAR 0 5
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: EMPTY
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: ST_TO_ADDR
// if not x or not y then
30868: LD_VAR 0 2
30872: NOT
30873: PUSH
30874: LD_VAR 0 3
30878: NOT
30879: OR
30880: IFFALSE 30884
// exit ;
30882: GO 32536
// if not range then
30884: LD_VAR 0 4
30888: NOT
30889: IFFALSE 30899
// range := 10 ;
30891: LD_ADDR_VAR 0 4
30895: PUSH
30896: LD_INT 10
30898: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30899: LD_ADDR_VAR 0 8
30903: PUSH
30904: LD_INT 81
30906: PUSH
30907: LD_VAR 0 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 92
30918: PUSH
30919: LD_VAR 0 2
30923: PUSH
30924: LD_VAR 0 3
30928: PUSH
30929: LD_VAR 0 4
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 3
30942: PUSH
30943: LD_INT 21
30945: PUSH
30946: LD_INT 3
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: LIST
30961: PPUSH
30962: CALL_OW 69
30966: ST_TO_ADDR
// if not tmp then
30967: LD_VAR 0 8
30971: NOT
30972: IFFALSE 30976
// exit ;
30974: GO 32536
// for i in tmp do
30976: LD_ADDR_VAR 0 6
30980: PUSH
30981: LD_VAR 0 8
30985: PUSH
30986: FOR_IN
30987: IFFALSE 32511
// begin points := [ 0 , 0 , 0 ] ;
30989: LD_ADDR_VAR 0 9
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: ST_TO_ADDR
// bpoints := 1 ;
31008: LD_ADDR_VAR 0 10
31012: PUSH
31013: LD_INT 1
31015: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31016: LD_VAR 0 6
31020: PPUSH
31021: CALL_OW 247
31025: PUSH
31026: LD_INT 1
31028: DOUBLE
31029: EQUAL
31030: IFTRUE 31034
31032: GO 31612
31034: POP
// begin if GetClass ( i ) = 1 then
31035: LD_VAR 0 6
31039: PPUSH
31040: CALL_OW 257
31044: PUSH
31045: LD_INT 1
31047: EQUAL
31048: IFFALSE 31069
// points := [ 10 , 5 , 3 ] ;
31050: LD_ADDR_VAR 0 9
31054: PUSH
31055: LD_INT 10
31057: PUSH
31058: LD_INT 5
31060: PUSH
31061: LD_INT 3
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: LIST
31068: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31069: LD_VAR 0 6
31073: PPUSH
31074: CALL_OW 257
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: LD_INT 4
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: LIST
31092: IN
31093: IFFALSE 31114
// points := [ 3 , 2 , 1 ] ;
31095: LD_ADDR_VAR 0 9
31099: PUSH
31100: LD_INT 3
31102: PUSH
31103: LD_INT 2
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: LIST
31113: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31114: LD_VAR 0 6
31118: PPUSH
31119: CALL_OW 257
31123: PUSH
31124: LD_INT 5
31126: EQUAL
31127: IFFALSE 31148
// points := [ 130 , 5 , 2 ] ;
31129: LD_ADDR_VAR 0 9
31133: PUSH
31134: LD_INT 130
31136: PUSH
31137: LD_INT 5
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31148: LD_VAR 0 6
31152: PPUSH
31153: CALL_OW 257
31157: PUSH
31158: LD_INT 8
31160: EQUAL
31161: IFFALSE 31182
// points := [ 35 , 35 , 30 ] ;
31163: LD_ADDR_VAR 0 9
31167: PUSH
31168: LD_INT 35
31170: PUSH
31171: LD_INT 35
31173: PUSH
31174: LD_INT 30
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31182: LD_VAR 0 6
31186: PPUSH
31187: CALL_OW 257
31191: PUSH
31192: LD_INT 9
31194: EQUAL
31195: IFFALSE 31216
// points := [ 20 , 55 , 40 ] ;
31197: LD_ADDR_VAR 0 9
31201: PUSH
31202: LD_INT 20
31204: PUSH
31205: LD_INT 55
31207: PUSH
31208: LD_INT 40
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: LIST
31215: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31216: LD_VAR 0 6
31220: PPUSH
31221: CALL_OW 257
31225: PUSH
31226: LD_INT 12
31228: PUSH
31229: LD_INT 16
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: IN
31236: IFFALSE 31257
// points := [ 5 , 3 , 2 ] ;
31238: LD_ADDR_VAR 0 9
31242: PUSH
31243: LD_INT 5
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: LIST
31256: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31257: LD_VAR 0 6
31261: PPUSH
31262: CALL_OW 257
31266: PUSH
31267: LD_INT 17
31269: EQUAL
31270: IFFALSE 31291
// points := [ 100 , 50 , 75 ] ;
31272: LD_ADDR_VAR 0 9
31276: PUSH
31277: LD_INT 100
31279: PUSH
31280: LD_INT 50
31282: PUSH
31283: LD_INT 75
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: LIST
31290: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31291: LD_VAR 0 6
31295: PPUSH
31296: CALL_OW 257
31300: PUSH
31301: LD_INT 15
31303: EQUAL
31304: IFFALSE 31325
// points := [ 10 , 5 , 3 ] ;
31306: LD_ADDR_VAR 0 9
31310: PUSH
31311: LD_INT 10
31313: PUSH
31314: LD_INT 5
31316: PUSH
31317: LD_INT 3
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: LIST
31324: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31325: LD_VAR 0 6
31329: PPUSH
31330: CALL_OW 257
31334: PUSH
31335: LD_INT 14
31337: EQUAL
31338: IFFALSE 31359
// points := [ 10 , 0 , 0 ] ;
31340: LD_ADDR_VAR 0 9
31344: PUSH
31345: LD_INT 10
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31359: LD_VAR 0 6
31363: PPUSH
31364: CALL_OW 257
31368: PUSH
31369: LD_INT 11
31371: EQUAL
31372: IFFALSE 31393
// points := [ 30 , 10 , 5 ] ;
31374: LD_ADDR_VAR 0 9
31378: PUSH
31379: LD_INT 30
31381: PUSH
31382: LD_INT 10
31384: PUSH
31385: LD_INT 5
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: LIST
31392: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31393: LD_VAR 0 1
31397: PPUSH
31398: LD_INT 5
31400: PPUSH
31401: CALL_OW 321
31405: PUSH
31406: LD_INT 2
31408: EQUAL
31409: IFFALSE 31426
// bpoints := bpoints * 1.8 ;
31411: LD_ADDR_VAR 0 10
31415: PUSH
31416: LD_VAR 0 10
31420: PUSH
31421: LD_REAL  1.80000000000000E+0000
31424: MUL
31425: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31426: LD_VAR 0 6
31430: PPUSH
31431: CALL_OW 257
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: LD_INT 2
31441: PUSH
31442: LD_INT 3
31444: PUSH
31445: LD_INT 4
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: IN
31454: PUSH
31455: LD_VAR 0 1
31459: PPUSH
31460: LD_INT 51
31462: PPUSH
31463: CALL_OW 321
31467: PUSH
31468: LD_INT 2
31470: EQUAL
31471: AND
31472: IFFALSE 31489
// bpoints := bpoints * 1.2 ;
31474: LD_ADDR_VAR 0 10
31478: PUSH
31479: LD_VAR 0 10
31483: PUSH
31484: LD_REAL  1.20000000000000E+0000
31487: MUL
31488: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31489: LD_VAR 0 6
31493: PPUSH
31494: CALL_OW 257
31498: PUSH
31499: LD_INT 5
31501: PUSH
31502: LD_INT 7
31504: PUSH
31505: LD_INT 9
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: LIST
31512: IN
31513: PUSH
31514: LD_VAR 0 1
31518: PPUSH
31519: LD_INT 52
31521: PPUSH
31522: CALL_OW 321
31526: PUSH
31527: LD_INT 2
31529: EQUAL
31530: AND
31531: IFFALSE 31548
// bpoints := bpoints * 1.5 ;
31533: LD_ADDR_VAR 0 10
31537: PUSH
31538: LD_VAR 0 10
31542: PUSH
31543: LD_REAL  1.50000000000000E+0000
31546: MUL
31547: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31548: LD_VAR 0 1
31552: PPUSH
31553: LD_INT 66
31555: PPUSH
31556: CALL_OW 321
31560: PUSH
31561: LD_INT 2
31563: EQUAL
31564: IFFALSE 31581
// bpoints := bpoints * 1.1 ;
31566: LD_ADDR_VAR 0 10
31570: PUSH
31571: LD_VAR 0 10
31575: PUSH
31576: LD_REAL  1.10000000000000E+0000
31579: MUL
31580: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31581: LD_ADDR_VAR 0 10
31585: PUSH
31586: LD_VAR 0 10
31590: PUSH
31591: LD_VAR 0 6
31595: PPUSH
31596: LD_INT 1
31598: PPUSH
31599: CALL_OW 259
31603: PUSH
31604: LD_REAL  1.15000000000000E+0000
31607: MUL
31608: MUL
31609: ST_TO_ADDR
// end ; unit_vehicle :
31610: GO 32440
31612: LD_INT 2
31614: DOUBLE
31615: EQUAL
31616: IFTRUE 31620
31618: GO 32428
31620: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31621: LD_VAR 0 6
31625: PPUSH
31626: CALL_OW 264
31630: PUSH
31631: LD_INT 2
31633: PUSH
31634: LD_INT 42
31636: PUSH
31637: LD_INT 24
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: LIST
31644: IN
31645: IFFALSE 31666
// points := [ 25 , 5 , 3 ] ;
31647: LD_ADDR_VAR 0 9
31651: PUSH
31652: LD_INT 25
31654: PUSH
31655: LD_INT 5
31657: PUSH
31658: LD_INT 3
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: LIST
31665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31666: LD_VAR 0 6
31670: PPUSH
31671: CALL_OW 264
31675: PUSH
31676: LD_INT 4
31678: PUSH
31679: LD_INT 43
31681: PUSH
31682: LD_INT 25
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: LIST
31689: IN
31690: IFFALSE 31711
// points := [ 40 , 15 , 5 ] ;
31692: LD_ADDR_VAR 0 9
31696: PUSH
31697: LD_INT 40
31699: PUSH
31700: LD_INT 15
31702: PUSH
31703: LD_INT 5
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: LIST
31710: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31711: LD_VAR 0 6
31715: PPUSH
31716: CALL_OW 264
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: LD_INT 23
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: IN
31731: IFFALSE 31752
// points := [ 7 , 25 , 8 ] ;
31733: LD_ADDR_VAR 0 9
31737: PUSH
31738: LD_INT 7
31740: PUSH
31741: LD_INT 25
31743: PUSH
31744: LD_INT 8
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31752: LD_VAR 0 6
31756: PPUSH
31757: CALL_OW 264
31761: PUSH
31762: LD_INT 5
31764: PUSH
31765: LD_INT 27
31767: PUSH
31768: LD_INT 44
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: LIST
31775: IN
31776: IFFALSE 31797
// points := [ 14 , 50 , 16 ] ;
31778: LD_ADDR_VAR 0 9
31782: PUSH
31783: LD_INT 14
31785: PUSH
31786: LD_INT 50
31788: PUSH
31789: LD_INT 16
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: LIST
31796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31797: LD_VAR 0 6
31801: PPUSH
31802: CALL_OW 264
31806: PUSH
31807: LD_INT 6
31809: PUSH
31810: LD_INT 46
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: IN
31817: IFFALSE 31838
// points := [ 32 , 120 , 70 ] ;
31819: LD_ADDR_VAR 0 9
31823: PUSH
31824: LD_INT 32
31826: PUSH
31827: LD_INT 120
31829: PUSH
31830: LD_INT 70
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31838: LD_VAR 0 6
31842: PPUSH
31843: CALL_OW 264
31847: PUSH
31848: LD_INT 7
31850: PUSH
31851: LD_INT 28
31853: PUSH
31854: LD_INT 45
31856: PUSH
31857: LD_EXP 98
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: IN
31868: IFFALSE 31889
// points := [ 35 , 20 , 45 ] ;
31870: LD_ADDR_VAR 0 9
31874: PUSH
31875: LD_INT 35
31877: PUSH
31878: LD_INT 20
31880: PUSH
31881: LD_INT 45
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: LIST
31888: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31889: LD_VAR 0 6
31893: PPUSH
31894: CALL_OW 264
31898: PUSH
31899: LD_INT 47
31901: PUSH
31902: EMPTY
31903: LIST
31904: IN
31905: IFFALSE 31926
// points := [ 67 , 45 , 75 ] ;
31907: LD_ADDR_VAR 0 9
31911: PUSH
31912: LD_INT 67
31914: PUSH
31915: LD_INT 45
31917: PUSH
31918: LD_INT 75
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: LIST
31925: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31926: LD_VAR 0 6
31930: PPUSH
31931: CALL_OW 264
31935: PUSH
31936: LD_INT 26
31938: PUSH
31939: EMPTY
31940: LIST
31941: IN
31942: IFFALSE 31963
// points := [ 120 , 30 , 80 ] ;
31944: LD_ADDR_VAR 0 9
31948: PUSH
31949: LD_INT 120
31951: PUSH
31952: LD_INT 30
31954: PUSH
31955: LD_INT 80
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31963: LD_VAR 0 6
31967: PPUSH
31968: CALL_OW 264
31972: PUSH
31973: LD_INT 22
31975: PUSH
31976: EMPTY
31977: LIST
31978: IN
31979: IFFALSE 32000
// points := [ 40 , 1 , 1 ] ;
31981: LD_ADDR_VAR 0 9
31985: PUSH
31986: LD_INT 40
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32000: LD_VAR 0 6
32004: PPUSH
32005: CALL_OW 264
32009: PUSH
32010: LD_INT 29
32012: PUSH
32013: EMPTY
32014: LIST
32015: IN
32016: IFFALSE 32037
// points := [ 70 , 200 , 400 ] ;
32018: LD_ADDR_VAR 0 9
32022: PUSH
32023: LD_INT 70
32025: PUSH
32026: LD_INT 200
32028: PUSH
32029: LD_INT 400
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32037: LD_VAR 0 6
32041: PPUSH
32042: CALL_OW 264
32046: PUSH
32047: LD_INT 14
32049: PUSH
32050: LD_INT 53
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: IN
32057: IFFALSE 32078
// points := [ 40 , 10 , 20 ] ;
32059: LD_ADDR_VAR 0 9
32063: PUSH
32064: LD_INT 40
32066: PUSH
32067: LD_INT 10
32069: PUSH
32070: LD_INT 20
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32078: LD_VAR 0 6
32082: PPUSH
32083: CALL_OW 264
32087: PUSH
32088: LD_INT 9
32090: PUSH
32091: EMPTY
32092: LIST
32093: IN
32094: IFFALSE 32115
// points := [ 5 , 70 , 20 ] ;
32096: LD_ADDR_VAR 0 9
32100: PUSH
32101: LD_INT 5
32103: PUSH
32104: LD_INT 70
32106: PUSH
32107: LD_INT 20
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32115: LD_VAR 0 6
32119: PPUSH
32120: CALL_OW 264
32124: PUSH
32125: LD_INT 10
32127: PUSH
32128: EMPTY
32129: LIST
32130: IN
32131: IFFALSE 32152
// points := [ 35 , 110 , 70 ] ;
32133: LD_ADDR_VAR 0 9
32137: PUSH
32138: LD_INT 35
32140: PUSH
32141: LD_INT 110
32143: PUSH
32144: LD_INT 70
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: LIST
32151: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32152: LD_VAR 0 6
32156: PPUSH
32157: CALL_OW 265
32161: PUSH
32162: LD_INT 25
32164: EQUAL
32165: IFFALSE 32186
// points := [ 80 , 65 , 100 ] ;
32167: LD_ADDR_VAR 0 9
32171: PUSH
32172: LD_INT 80
32174: PUSH
32175: LD_INT 65
32177: PUSH
32178: LD_INT 100
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: LIST
32185: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32186: LD_VAR 0 6
32190: PPUSH
32191: CALL_OW 263
32195: PUSH
32196: LD_INT 1
32198: EQUAL
32199: IFFALSE 32234
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32201: LD_ADDR_VAR 0 10
32205: PUSH
32206: LD_VAR 0 10
32210: PUSH
32211: LD_VAR 0 6
32215: PPUSH
32216: CALL_OW 311
32220: PPUSH
32221: LD_INT 3
32223: PPUSH
32224: CALL_OW 259
32228: PUSH
32229: LD_INT 4
32231: MUL
32232: MUL
32233: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32234: LD_VAR 0 6
32238: PPUSH
32239: CALL_OW 263
32243: PUSH
32244: LD_INT 2
32246: EQUAL
32247: IFFALSE 32298
// begin j := IsControledBy ( i ) ;
32249: LD_ADDR_VAR 0 7
32253: PUSH
32254: LD_VAR 0 6
32258: PPUSH
32259: CALL_OW 312
32263: ST_TO_ADDR
// if j then
32264: LD_VAR 0 7
32268: IFFALSE 32298
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32270: LD_ADDR_VAR 0 10
32274: PUSH
32275: LD_VAR 0 10
32279: PUSH
32280: LD_VAR 0 7
32284: PPUSH
32285: LD_INT 3
32287: PPUSH
32288: CALL_OW 259
32292: PUSH
32293: LD_INT 3
32295: MUL
32296: MUL
32297: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32298: LD_VAR 0 6
32302: PPUSH
32303: CALL_OW 264
32307: PUSH
32308: LD_INT 5
32310: PUSH
32311: LD_INT 6
32313: PUSH
32314: LD_INT 46
32316: PUSH
32317: LD_INT 44
32319: PUSH
32320: LD_INT 47
32322: PUSH
32323: LD_INT 45
32325: PUSH
32326: LD_INT 28
32328: PUSH
32329: LD_INT 7
32331: PUSH
32332: LD_INT 27
32334: PUSH
32335: LD_INT 29
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: IN
32350: PUSH
32351: LD_VAR 0 1
32355: PPUSH
32356: LD_INT 52
32358: PPUSH
32359: CALL_OW 321
32363: PUSH
32364: LD_INT 2
32366: EQUAL
32367: AND
32368: IFFALSE 32385
// bpoints := bpoints * 1.2 ;
32370: LD_ADDR_VAR 0 10
32374: PUSH
32375: LD_VAR 0 10
32379: PUSH
32380: LD_REAL  1.20000000000000E+0000
32383: MUL
32384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32385: LD_VAR 0 6
32389: PPUSH
32390: CALL_OW 264
32394: PUSH
32395: LD_INT 6
32397: PUSH
32398: LD_INT 46
32400: PUSH
32401: LD_INT 47
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: IN
32409: IFFALSE 32426
// bpoints := bpoints * 1.2 ;
32411: LD_ADDR_VAR 0 10
32415: PUSH
32416: LD_VAR 0 10
32420: PUSH
32421: LD_REAL  1.20000000000000E+0000
32424: MUL
32425: ST_TO_ADDR
// end ; unit_building :
32426: GO 32440
32428: LD_INT 3
32430: DOUBLE
32431: EQUAL
32432: IFTRUE 32436
32434: GO 32439
32436: POP
// ; end ;
32437: GO 32440
32439: POP
// for j = 1 to 3 do
32440: LD_ADDR_VAR 0 7
32444: PUSH
32445: DOUBLE
32446: LD_INT 1
32448: DEC
32449: ST_TO_ADDR
32450: LD_INT 3
32452: PUSH
32453: FOR_TO
32454: IFFALSE 32507
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32456: LD_ADDR_VAR 0 5
32460: PUSH
32461: LD_VAR 0 5
32465: PPUSH
32466: LD_VAR 0 7
32470: PPUSH
32471: LD_VAR 0 5
32475: PUSH
32476: LD_VAR 0 7
32480: ARRAY
32481: PUSH
32482: LD_VAR 0 9
32486: PUSH
32487: LD_VAR 0 7
32491: ARRAY
32492: PUSH
32493: LD_VAR 0 10
32497: MUL
32498: PLUS
32499: PPUSH
32500: CALL_OW 1
32504: ST_TO_ADDR
32505: GO 32453
32507: POP
32508: POP
// end ;
32509: GO 30986
32511: POP
32512: POP
// result := Replace ( result , 4 , tmp ) ;
32513: LD_ADDR_VAR 0 5
32517: PUSH
32518: LD_VAR 0 5
32522: PPUSH
32523: LD_INT 4
32525: PPUSH
32526: LD_VAR 0 8
32530: PPUSH
32531: CALL_OW 1
32535: ST_TO_ADDR
// end ;
32536: LD_VAR 0 5
32540: RET
// export function DangerAtRange ( unit , range ) ; begin
32541: LD_INT 0
32543: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32544: LD_ADDR_VAR 0 3
32548: PUSH
32549: LD_VAR 0 1
32553: PPUSH
32554: CALL_OW 255
32558: PPUSH
32559: LD_VAR 0 1
32563: PPUSH
32564: CALL_OW 250
32568: PPUSH
32569: LD_VAR 0 1
32573: PPUSH
32574: CALL_OW 251
32578: PPUSH
32579: LD_VAR 0 2
32583: PPUSH
32584: CALL 30838 0 4
32588: ST_TO_ADDR
// end ;
32589: LD_VAR 0 3
32593: RET
// export function DangerInArea ( side , area ) ; begin
32594: LD_INT 0
32596: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32597: LD_ADDR_VAR 0 3
32601: PUSH
32602: LD_VAR 0 2
32606: PPUSH
32607: LD_INT 81
32609: PUSH
32610: LD_VAR 0 1
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PPUSH
32619: CALL_OW 70
32623: ST_TO_ADDR
// end ;
32624: LD_VAR 0 3
32628: RET
// export function IsExtension ( b ) ; begin
32629: LD_INT 0
32631: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32632: LD_ADDR_VAR 0 2
32636: PUSH
32637: LD_VAR 0 1
32641: PUSH
32642: LD_INT 23
32644: PUSH
32645: LD_INT 20
32647: PUSH
32648: LD_INT 22
32650: PUSH
32651: LD_INT 17
32653: PUSH
32654: LD_INT 24
32656: PUSH
32657: LD_INT 21
32659: PUSH
32660: LD_INT 19
32662: PUSH
32663: LD_INT 16
32665: PUSH
32666: LD_INT 25
32668: PUSH
32669: LD_INT 18
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: IN
32684: ST_TO_ADDR
// end ;
32685: LD_VAR 0 2
32689: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32690: LD_INT 0
32692: PPUSH
32693: PPUSH
32694: PPUSH
// result := [ ] ;
32695: LD_ADDR_VAR 0 4
32699: PUSH
32700: EMPTY
32701: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32702: LD_ADDR_VAR 0 5
32706: PUSH
32707: LD_VAR 0 2
32711: PPUSH
32712: LD_INT 21
32714: PUSH
32715: LD_INT 3
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PPUSH
32722: CALL_OW 70
32726: ST_TO_ADDR
// if not tmp then
32727: LD_VAR 0 5
32731: NOT
32732: IFFALSE 32736
// exit ;
32734: GO 32800
// if checkLink then
32736: LD_VAR 0 3
32740: IFFALSE 32790
// begin for i in tmp do
32742: LD_ADDR_VAR 0 6
32746: PUSH
32747: LD_VAR 0 5
32751: PUSH
32752: FOR_IN
32753: IFFALSE 32788
// if GetBase ( i ) <> base then
32755: LD_VAR 0 6
32759: PPUSH
32760: CALL_OW 274
32764: PUSH
32765: LD_VAR 0 1
32769: NONEQUAL
32770: IFFALSE 32786
// ComLinkToBase ( base , i ) ;
32772: LD_VAR 0 1
32776: PPUSH
32777: LD_VAR 0 6
32781: PPUSH
32782: CALL_OW 169
32786: GO 32752
32788: POP
32789: POP
// end ; result := tmp ;
32790: LD_ADDR_VAR 0 4
32794: PUSH
32795: LD_VAR 0 5
32799: ST_TO_ADDR
// end ;
32800: LD_VAR 0 4
32804: RET
// export function ComComplete ( units , b ) ; var i ; begin
32805: LD_INT 0
32807: PPUSH
32808: PPUSH
// if not units then
32809: LD_VAR 0 1
32813: NOT
32814: IFFALSE 32818
// exit ;
32816: GO 32908
// for i in units do
32818: LD_ADDR_VAR 0 4
32822: PUSH
32823: LD_VAR 0 1
32827: PUSH
32828: FOR_IN
32829: IFFALSE 32906
// if BuildingStatus ( b ) = bs_build then
32831: LD_VAR 0 2
32835: PPUSH
32836: CALL_OW 461
32840: PUSH
32841: LD_INT 1
32843: EQUAL
32844: IFFALSE 32904
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32846: LD_VAR 0 4
32850: PPUSH
32851: LD_STRING h
32853: PUSH
32854: LD_VAR 0 2
32858: PPUSH
32859: CALL_OW 250
32863: PUSH
32864: LD_VAR 0 2
32868: PPUSH
32869: CALL_OW 251
32873: PUSH
32874: LD_VAR 0 2
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: PUSH
32897: EMPTY
32898: LIST
32899: PPUSH
32900: CALL_OW 446
32904: GO 32828
32906: POP
32907: POP
// end ;
32908: LD_VAR 0 3
32912: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32913: LD_INT 0
32915: PPUSH
32916: PPUSH
32917: PPUSH
32918: PPUSH
32919: PPUSH
32920: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32921: LD_VAR 0 1
32925: NOT
32926: PUSH
32927: LD_VAR 0 1
32931: PPUSH
32932: CALL_OW 263
32936: PUSH
32937: LD_INT 2
32939: NONEQUAL
32940: OR
32941: IFFALSE 32945
// exit ;
32943: GO 33261
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32945: LD_ADDR_VAR 0 6
32949: PUSH
32950: LD_INT 22
32952: PUSH
32953: LD_VAR 0 1
32957: PPUSH
32958: CALL_OW 255
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 2
32969: PUSH
32970: LD_INT 30
32972: PUSH
32973: LD_INT 36
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 34
32982: PUSH
32983: LD_INT 31
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: LIST
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PPUSH
32999: CALL_OW 69
33003: ST_TO_ADDR
// if not tmp then
33004: LD_VAR 0 6
33008: NOT
33009: IFFALSE 33013
// exit ;
33011: GO 33261
// result := [ ] ;
33013: LD_ADDR_VAR 0 2
33017: PUSH
33018: EMPTY
33019: ST_TO_ADDR
// for i in tmp do
33020: LD_ADDR_VAR 0 3
33024: PUSH
33025: LD_VAR 0 6
33029: PUSH
33030: FOR_IN
33031: IFFALSE 33102
// begin t := UnitsInside ( i ) ;
33033: LD_ADDR_VAR 0 4
33037: PUSH
33038: LD_VAR 0 3
33042: PPUSH
33043: CALL_OW 313
33047: ST_TO_ADDR
// if t then
33048: LD_VAR 0 4
33052: IFFALSE 33100
// for j in t do
33054: LD_ADDR_VAR 0 7
33058: PUSH
33059: LD_VAR 0 4
33063: PUSH
33064: FOR_IN
33065: IFFALSE 33098
// result := Replace ( result , result + 1 , j ) ;
33067: LD_ADDR_VAR 0 2
33071: PUSH
33072: LD_VAR 0 2
33076: PPUSH
33077: LD_VAR 0 2
33081: PUSH
33082: LD_INT 1
33084: PLUS
33085: PPUSH
33086: LD_VAR 0 7
33090: PPUSH
33091: CALL_OW 1
33095: ST_TO_ADDR
33096: GO 33064
33098: POP
33099: POP
// end ;
33100: GO 33030
33102: POP
33103: POP
// if not result then
33104: LD_VAR 0 2
33108: NOT
33109: IFFALSE 33113
// exit ;
33111: GO 33261
// mech := result [ 1 ] ;
33113: LD_ADDR_VAR 0 5
33117: PUSH
33118: LD_VAR 0 2
33122: PUSH
33123: LD_INT 1
33125: ARRAY
33126: ST_TO_ADDR
// if result > 1 then
33127: LD_VAR 0 2
33131: PUSH
33132: LD_INT 1
33134: GREATER
33135: IFFALSE 33247
// begin for i = 2 to result do
33137: LD_ADDR_VAR 0 3
33141: PUSH
33142: DOUBLE
33143: LD_INT 2
33145: DEC
33146: ST_TO_ADDR
33147: LD_VAR 0 2
33151: PUSH
33152: FOR_TO
33153: IFFALSE 33245
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33155: LD_ADDR_VAR 0 4
33159: PUSH
33160: LD_VAR 0 2
33164: PUSH
33165: LD_VAR 0 3
33169: ARRAY
33170: PPUSH
33171: LD_INT 3
33173: PPUSH
33174: CALL_OW 259
33178: PUSH
33179: LD_VAR 0 2
33183: PUSH
33184: LD_VAR 0 3
33188: ARRAY
33189: PPUSH
33190: CALL_OW 432
33194: MINUS
33195: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33196: LD_VAR 0 4
33200: PUSH
33201: LD_VAR 0 5
33205: PPUSH
33206: LD_INT 3
33208: PPUSH
33209: CALL_OW 259
33213: PUSH
33214: LD_VAR 0 5
33218: PPUSH
33219: CALL_OW 432
33223: MINUS
33224: GREATEREQUAL
33225: IFFALSE 33243
// mech := result [ i ] ;
33227: LD_ADDR_VAR 0 5
33231: PUSH
33232: LD_VAR 0 2
33236: PUSH
33237: LD_VAR 0 3
33241: ARRAY
33242: ST_TO_ADDR
// end ;
33243: GO 33152
33245: POP
33246: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33247: LD_VAR 0 1
33251: PPUSH
33252: LD_VAR 0 5
33256: PPUSH
33257: CALL_OW 135
// end ;
33261: LD_VAR 0 2
33265: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33266: LD_INT 0
33268: PPUSH
33269: PPUSH
33270: PPUSH
33271: PPUSH
33272: PPUSH
33273: PPUSH
33274: PPUSH
33275: PPUSH
33276: PPUSH
33277: PPUSH
33278: PPUSH
33279: PPUSH
33280: PPUSH
// result := [ ] ;
33281: LD_ADDR_VAR 0 7
33285: PUSH
33286: EMPTY
33287: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33288: LD_VAR 0 1
33292: PPUSH
33293: CALL_OW 266
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: IN
33308: NOT
33309: IFFALSE 33313
// exit ;
33311: GO 34947
// if name then
33313: LD_VAR 0 3
33317: IFFALSE 33333
// SetBName ( base_dep , name ) ;
33319: LD_VAR 0 1
33323: PPUSH
33324: LD_VAR 0 3
33328: PPUSH
33329: CALL_OW 500
// base := GetBase ( base_dep ) ;
33333: LD_ADDR_VAR 0 15
33337: PUSH
33338: LD_VAR 0 1
33342: PPUSH
33343: CALL_OW 274
33347: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33348: LD_ADDR_VAR 0 16
33352: PUSH
33353: LD_VAR 0 1
33357: PPUSH
33358: CALL_OW 255
33362: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33363: LD_ADDR_VAR 0 17
33367: PUSH
33368: LD_VAR 0 1
33372: PPUSH
33373: CALL_OW 248
33377: ST_TO_ADDR
// if sources then
33378: LD_VAR 0 5
33382: IFFALSE 33429
// for i = 1 to 3 do
33384: LD_ADDR_VAR 0 8
33388: PUSH
33389: DOUBLE
33390: LD_INT 1
33392: DEC
33393: ST_TO_ADDR
33394: LD_INT 3
33396: PUSH
33397: FOR_TO
33398: IFFALSE 33427
// AddResourceType ( base , i , sources [ i ] ) ;
33400: LD_VAR 0 15
33404: PPUSH
33405: LD_VAR 0 8
33409: PPUSH
33410: LD_VAR 0 5
33414: PUSH
33415: LD_VAR 0 8
33419: ARRAY
33420: PPUSH
33421: CALL_OW 276
33425: GO 33397
33427: POP
33428: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33429: LD_ADDR_VAR 0 18
33433: PUSH
33434: LD_VAR 0 15
33438: PPUSH
33439: LD_VAR 0 2
33443: PPUSH
33444: LD_INT 1
33446: PPUSH
33447: CALL 32690 0 3
33451: ST_TO_ADDR
// InitHc ;
33452: CALL_OW 19
// InitUc ;
33456: CALL_OW 18
// uc_side := side ;
33460: LD_ADDR_OWVAR 20
33464: PUSH
33465: LD_VAR 0 16
33469: ST_TO_ADDR
// uc_nation := nation ;
33470: LD_ADDR_OWVAR 21
33474: PUSH
33475: LD_VAR 0 17
33479: ST_TO_ADDR
// if buildings then
33480: LD_VAR 0 18
33484: IFFALSE 34806
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33486: LD_ADDR_VAR 0 19
33490: PUSH
33491: LD_VAR 0 18
33495: PPUSH
33496: LD_INT 2
33498: PUSH
33499: LD_INT 30
33501: PUSH
33502: LD_INT 29
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 30
33511: PUSH
33512: LD_INT 30
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: PPUSH
33524: CALL_OW 72
33528: ST_TO_ADDR
// if tmp then
33529: LD_VAR 0 19
33533: IFFALSE 33581
// for i in tmp do
33535: LD_ADDR_VAR 0 8
33539: PUSH
33540: LD_VAR 0 19
33544: PUSH
33545: FOR_IN
33546: IFFALSE 33579
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33548: LD_VAR 0 8
33552: PPUSH
33553: CALL_OW 250
33557: PPUSH
33558: LD_VAR 0 8
33562: PPUSH
33563: CALL_OW 251
33567: PPUSH
33568: LD_VAR 0 16
33572: PPUSH
33573: CALL_OW 441
33577: GO 33545
33579: POP
33580: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33581: LD_VAR 0 18
33585: PPUSH
33586: LD_INT 2
33588: PUSH
33589: LD_INT 30
33591: PUSH
33592: LD_INT 32
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 30
33601: PUSH
33602: LD_INT 33
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: PPUSH
33614: CALL_OW 72
33618: IFFALSE 33706
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33620: LD_ADDR_VAR 0 8
33624: PUSH
33625: LD_VAR 0 18
33629: PPUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 30
33635: PUSH
33636: LD_INT 32
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 30
33645: PUSH
33646: LD_INT 33
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: PPUSH
33658: CALL_OW 72
33662: PUSH
33663: FOR_IN
33664: IFFALSE 33704
// begin if not GetBWeapon ( i ) then
33666: LD_VAR 0 8
33670: PPUSH
33671: CALL_OW 269
33675: NOT
33676: IFFALSE 33702
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33678: LD_VAR 0 8
33682: PPUSH
33683: LD_VAR 0 8
33687: PPUSH
33688: LD_VAR 0 2
33692: PPUSH
33693: CALL 34952 0 2
33697: PPUSH
33698: CALL_OW 431
// end ;
33702: GO 33663
33704: POP
33705: POP
// end ; for i = 1 to personel do
33706: LD_ADDR_VAR 0 8
33710: PUSH
33711: DOUBLE
33712: LD_INT 1
33714: DEC
33715: ST_TO_ADDR
33716: LD_VAR 0 6
33720: PUSH
33721: FOR_TO
33722: IFFALSE 34786
// begin if i > 4 then
33724: LD_VAR 0 8
33728: PUSH
33729: LD_INT 4
33731: GREATER
33732: IFFALSE 33736
// break ;
33734: GO 34786
// case i of 1 :
33736: LD_VAR 0 8
33740: PUSH
33741: LD_INT 1
33743: DOUBLE
33744: EQUAL
33745: IFTRUE 33749
33747: GO 33829
33749: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33750: LD_ADDR_VAR 0 12
33754: PUSH
33755: LD_VAR 0 18
33759: PPUSH
33760: LD_INT 22
33762: PUSH
33763: LD_VAR 0 16
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 58
33774: PUSH
33775: EMPTY
33776: LIST
33777: PUSH
33778: LD_INT 2
33780: PUSH
33781: LD_INT 30
33783: PUSH
33784: LD_INT 32
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 30
33793: PUSH
33794: LD_INT 4
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 30
33803: PUSH
33804: LD_INT 5
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: PPUSH
33822: CALL_OW 72
33826: ST_TO_ADDR
33827: GO 34051
33829: LD_INT 2
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33837
33835: GO 33899
33837: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33838: LD_ADDR_VAR 0 12
33842: PUSH
33843: LD_VAR 0 18
33847: PPUSH
33848: LD_INT 22
33850: PUSH
33851: LD_VAR 0 16
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: LD_INT 30
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 30
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PPUSH
33892: CALL_OW 72
33896: ST_TO_ADDR
33897: GO 34051
33899: LD_INT 3
33901: DOUBLE
33902: EQUAL
33903: IFTRUE 33907
33905: GO 33969
33907: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33908: LD_ADDR_VAR 0 12
33912: PUSH
33913: LD_VAR 0 18
33917: PPUSH
33918: LD_INT 22
33920: PUSH
33921: LD_VAR 0 16
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: LD_INT 30
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 30
33945: PUSH
33946: LD_INT 3
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PPUSH
33962: CALL_OW 72
33966: ST_TO_ADDR
33967: GO 34051
33969: LD_INT 4
33971: DOUBLE
33972: EQUAL
33973: IFTRUE 33977
33975: GO 34050
33977: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33978: LD_ADDR_VAR 0 12
33982: PUSH
33983: LD_VAR 0 18
33987: PPUSH
33988: LD_INT 22
33990: PUSH
33991: LD_VAR 0 16
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: LD_INT 30
34005: PUSH
34006: LD_INT 6
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 30
34015: PUSH
34016: LD_INT 7
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 30
34025: PUSH
34026: LD_INT 8
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PPUSH
34043: CALL_OW 72
34047: ST_TO_ADDR
34048: GO 34051
34050: POP
// if i = 1 then
34051: LD_VAR 0 8
34055: PUSH
34056: LD_INT 1
34058: EQUAL
34059: IFFALSE 34170
// begin tmp := [ ] ;
34061: LD_ADDR_VAR 0 19
34065: PUSH
34066: EMPTY
34067: ST_TO_ADDR
// for j in f do
34068: LD_ADDR_VAR 0 9
34072: PUSH
34073: LD_VAR 0 12
34077: PUSH
34078: FOR_IN
34079: IFFALSE 34152
// if GetBType ( j ) = b_bunker then
34081: LD_VAR 0 9
34085: PPUSH
34086: CALL_OW 266
34090: PUSH
34091: LD_INT 32
34093: EQUAL
34094: IFFALSE 34121
// tmp := Insert ( tmp , 1 , j ) else
34096: LD_ADDR_VAR 0 19
34100: PUSH
34101: LD_VAR 0 19
34105: PPUSH
34106: LD_INT 1
34108: PPUSH
34109: LD_VAR 0 9
34113: PPUSH
34114: CALL_OW 2
34118: ST_TO_ADDR
34119: GO 34150
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34121: LD_ADDR_VAR 0 19
34125: PUSH
34126: LD_VAR 0 19
34130: PPUSH
34131: LD_VAR 0 19
34135: PUSH
34136: LD_INT 1
34138: PLUS
34139: PPUSH
34140: LD_VAR 0 9
34144: PPUSH
34145: CALL_OW 2
34149: ST_TO_ADDR
34150: GO 34078
34152: POP
34153: POP
// if tmp then
34154: LD_VAR 0 19
34158: IFFALSE 34170
// f := tmp ;
34160: LD_ADDR_VAR 0 12
34164: PUSH
34165: LD_VAR 0 19
34169: ST_TO_ADDR
// end ; x := personel [ i ] ;
34170: LD_ADDR_VAR 0 13
34174: PUSH
34175: LD_VAR 0 6
34179: PUSH
34180: LD_VAR 0 8
34184: ARRAY
34185: ST_TO_ADDR
// if x = - 1 then
34186: LD_VAR 0 13
34190: PUSH
34191: LD_INT 1
34193: NEG
34194: EQUAL
34195: IFFALSE 34404
// begin for j in f do
34197: LD_ADDR_VAR 0 9
34201: PUSH
34202: LD_VAR 0 12
34206: PUSH
34207: FOR_IN
34208: IFFALSE 34400
// repeat InitHc ;
34210: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34214: LD_VAR 0 9
34218: PPUSH
34219: CALL_OW 266
34223: PUSH
34224: LD_INT 5
34226: EQUAL
34227: IFFALSE 34297
// begin if UnitsInside ( j ) < 3 then
34229: LD_VAR 0 9
34233: PPUSH
34234: CALL_OW 313
34238: PUSH
34239: LD_INT 3
34241: LESS
34242: IFFALSE 34278
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34244: LD_INT 0
34246: PPUSH
34247: LD_INT 5
34249: PUSH
34250: LD_INT 8
34252: PUSH
34253: LD_INT 9
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: PUSH
34261: LD_VAR 0 17
34265: ARRAY
34266: PPUSH
34267: LD_VAR 0 4
34271: PPUSH
34272: CALL_OW 380
34276: GO 34295
// PrepareHuman ( false , i , skill ) ;
34278: LD_INT 0
34280: PPUSH
34281: LD_VAR 0 8
34285: PPUSH
34286: LD_VAR 0 4
34290: PPUSH
34291: CALL_OW 380
// end else
34295: GO 34314
// PrepareHuman ( false , i , skill ) ;
34297: LD_INT 0
34299: PPUSH
34300: LD_VAR 0 8
34304: PPUSH
34305: LD_VAR 0 4
34309: PPUSH
34310: CALL_OW 380
// un := CreateHuman ;
34314: LD_ADDR_VAR 0 14
34318: PUSH
34319: CALL_OW 44
34323: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34324: LD_ADDR_VAR 0 7
34328: PUSH
34329: LD_VAR 0 7
34333: PPUSH
34334: LD_INT 1
34336: PPUSH
34337: LD_VAR 0 14
34341: PPUSH
34342: CALL_OW 2
34346: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34347: LD_VAR 0 14
34351: PPUSH
34352: LD_VAR 0 9
34356: PPUSH
34357: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34361: LD_VAR 0 9
34365: PPUSH
34366: CALL_OW 313
34370: PUSH
34371: LD_INT 6
34373: EQUAL
34374: PUSH
34375: LD_VAR 0 9
34379: PPUSH
34380: CALL_OW 266
34384: PUSH
34385: LD_INT 32
34387: PUSH
34388: LD_INT 31
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: IN
34395: OR
34396: IFFALSE 34210
34398: GO 34207
34400: POP
34401: POP
// end else
34402: GO 34784
// for j = 1 to x do
34404: LD_ADDR_VAR 0 9
34408: PUSH
34409: DOUBLE
34410: LD_INT 1
34412: DEC
34413: ST_TO_ADDR
34414: LD_VAR 0 13
34418: PUSH
34419: FOR_TO
34420: IFFALSE 34782
// begin InitHc ;
34422: CALL_OW 19
// if not f then
34426: LD_VAR 0 12
34430: NOT
34431: IFFALSE 34520
// begin PrepareHuman ( false , i , skill ) ;
34433: LD_INT 0
34435: PPUSH
34436: LD_VAR 0 8
34440: PPUSH
34441: LD_VAR 0 4
34445: PPUSH
34446: CALL_OW 380
// un := CreateHuman ;
34450: LD_ADDR_VAR 0 14
34454: PUSH
34455: CALL_OW 44
34459: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34460: LD_ADDR_VAR 0 7
34464: PUSH
34465: LD_VAR 0 7
34469: PPUSH
34470: LD_INT 1
34472: PPUSH
34473: LD_VAR 0 14
34477: PPUSH
34478: CALL_OW 2
34482: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34483: LD_VAR 0 14
34487: PPUSH
34488: LD_VAR 0 1
34492: PPUSH
34493: CALL_OW 250
34497: PPUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL_OW 251
34507: PPUSH
34508: LD_INT 10
34510: PPUSH
34511: LD_INT 0
34513: PPUSH
34514: CALL_OW 50
// continue ;
34518: GO 34419
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34520: LD_VAR 0 12
34524: PUSH
34525: LD_INT 1
34527: ARRAY
34528: PPUSH
34529: CALL_OW 313
34533: PUSH
34534: LD_VAR 0 12
34538: PUSH
34539: LD_INT 1
34541: ARRAY
34542: PPUSH
34543: CALL_OW 266
34547: PUSH
34548: LD_INT 32
34550: PUSH
34551: LD_INT 31
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: IN
34558: AND
34559: PUSH
34560: LD_VAR 0 12
34564: PUSH
34565: LD_INT 1
34567: ARRAY
34568: PPUSH
34569: CALL_OW 313
34573: PUSH
34574: LD_INT 6
34576: EQUAL
34577: OR
34578: IFFALSE 34598
// f := Delete ( f , 1 ) ;
34580: LD_ADDR_VAR 0 12
34584: PUSH
34585: LD_VAR 0 12
34589: PPUSH
34590: LD_INT 1
34592: PPUSH
34593: CALL_OW 3
34597: ST_TO_ADDR
// if not f then
34598: LD_VAR 0 12
34602: NOT
34603: IFFALSE 34621
// begin x := x + 2 ;
34605: LD_ADDR_VAR 0 13
34609: PUSH
34610: LD_VAR 0 13
34614: PUSH
34615: LD_INT 2
34617: PLUS
34618: ST_TO_ADDR
// continue ;
34619: GO 34419
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34621: LD_VAR 0 12
34625: PUSH
34626: LD_INT 1
34628: ARRAY
34629: PPUSH
34630: CALL_OW 266
34634: PUSH
34635: LD_INT 5
34637: EQUAL
34638: IFFALSE 34712
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34640: LD_VAR 0 12
34644: PUSH
34645: LD_INT 1
34647: ARRAY
34648: PPUSH
34649: CALL_OW 313
34653: PUSH
34654: LD_INT 3
34656: LESS
34657: IFFALSE 34693
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34659: LD_INT 0
34661: PPUSH
34662: LD_INT 5
34664: PUSH
34665: LD_INT 8
34667: PUSH
34668: LD_INT 9
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: LIST
34675: PUSH
34676: LD_VAR 0 17
34680: ARRAY
34681: PPUSH
34682: LD_VAR 0 4
34686: PPUSH
34687: CALL_OW 380
34691: GO 34710
// PrepareHuman ( false , i , skill ) ;
34693: LD_INT 0
34695: PPUSH
34696: LD_VAR 0 8
34700: PPUSH
34701: LD_VAR 0 4
34705: PPUSH
34706: CALL_OW 380
// end else
34710: GO 34729
// PrepareHuman ( false , i , skill ) ;
34712: LD_INT 0
34714: PPUSH
34715: LD_VAR 0 8
34719: PPUSH
34720: LD_VAR 0 4
34724: PPUSH
34725: CALL_OW 380
// un := CreateHuman ;
34729: LD_ADDR_VAR 0 14
34733: PUSH
34734: CALL_OW 44
34738: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34739: LD_ADDR_VAR 0 7
34743: PUSH
34744: LD_VAR 0 7
34748: PPUSH
34749: LD_INT 1
34751: PPUSH
34752: LD_VAR 0 14
34756: PPUSH
34757: CALL_OW 2
34761: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34762: LD_VAR 0 14
34766: PPUSH
34767: LD_VAR 0 12
34771: PUSH
34772: LD_INT 1
34774: ARRAY
34775: PPUSH
34776: CALL_OW 52
// end ;
34780: GO 34419
34782: POP
34783: POP
// end ;
34784: GO 33721
34786: POP
34787: POP
// result := result ^ buildings ;
34788: LD_ADDR_VAR 0 7
34792: PUSH
34793: LD_VAR 0 7
34797: PUSH
34798: LD_VAR 0 18
34802: ADD
34803: ST_TO_ADDR
// end else
34804: GO 34947
// begin for i = 1 to personel do
34806: LD_ADDR_VAR 0 8
34810: PUSH
34811: DOUBLE
34812: LD_INT 1
34814: DEC
34815: ST_TO_ADDR
34816: LD_VAR 0 6
34820: PUSH
34821: FOR_TO
34822: IFFALSE 34945
// begin if i > 4 then
34824: LD_VAR 0 8
34828: PUSH
34829: LD_INT 4
34831: GREATER
34832: IFFALSE 34836
// break ;
34834: GO 34945
// x := personel [ i ] ;
34836: LD_ADDR_VAR 0 13
34840: PUSH
34841: LD_VAR 0 6
34845: PUSH
34846: LD_VAR 0 8
34850: ARRAY
34851: ST_TO_ADDR
// if x = - 1 then
34852: LD_VAR 0 13
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: EQUAL
34861: IFFALSE 34865
// continue ;
34863: GO 34821
// PrepareHuman ( false , i , skill ) ;
34865: LD_INT 0
34867: PPUSH
34868: LD_VAR 0 8
34872: PPUSH
34873: LD_VAR 0 4
34877: PPUSH
34878: CALL_OW 380
// un := CreateHuman ;
34882: LD_ADDR_VAR 0 14
34886: PUSH
34887: CALL_OW 44
34891: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34892: LD_VAR 0 14
34896: PPUSH
34897: LD_VAR 0 1
34901: PPUSH
34902: CALL_OW 250
34906: PPUSH
34907: LD_VAR 0 1
34911: PPUSH
34912: CALL_OW 251
34916: PPUSH
34917: LD_INT 10
34919: PPUSH
34920: LD_INT 0
34922: PPUSH
34923: CALL_OW 50
// result := result ^ un ;
34927: LD_ADDR_VAR 0 7
34931: PUSH
34932: LD_VAR 0 7
34936: PUSH
34937: LD_VAR 0 14
34941: ADD
34942: ST_TO_ADDR
// end ;
34943: GO 34821
34945: POP
34946: POP
// end ; end ;
34947: LD_VAR 0 7
34951: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34952: LD_INT 0
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
// result := false ;
34970: LD_ADDR_VAR 0 3
34974: PUSH
34975: LD_INT 0
34977: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34978: LD_VAR 0 1
34982: NOT
34983: PUSH
34984: LD_VAR 0 1
34988: PPUSH
34989: CALL_OW 266
34993: PUSH
34994: LD_INT 32
34996: PUSH
34997: LD_INT 33
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: IN
35004: NOT
35005: OR
35006: IFFALSE 35010
// exit ;
35008: GO 36119
// nat := GetNation ( tower ) ;
35010: LD_ADDR_VAR 0 12
35014: PUSH
35015: LD_VAR 0 1
35019: PPUSH
35020: CALL_OW 248
35024: ST_TO_ADDR
// side := GetSide ( tower ) ;
35025: LD_ADDR_VAR 0 16
35029: PUSH
35030: LD_VAR 0 1
35034: PPUSH
35035: CALL_OW 255
35039: ST_TO_ADDR
// x := GetX ( tower ) ;
35040: LD_ADDR_VAR 0 10
35044: PUSH
35045: LD_VAR 0 1
35049: PPUSH
35050: CALL_OW 250
35054: ST_TO_ADDR
// y := GetY ( tower ) ;
35055: LD_ADDR_VAR 0 11
35059: PUSH
35060: LD_VAR 0 1
35064: PPUSH
35065: CALL_OW 251
35069: ST_TO_ADDR
// if not x or not y then
35070: LD_VAR 0 10
35074: NOT
35075: PUSH
35076: LD_VAR 0 11
35080: NOT
35081: OR
35082: IFFALSE 35086
// exit ;
35084: GO 36119
// weapon := 0 ;
35086: LD_ADDR_VAR 0 18
35090: PUSH
35091: LD_INT 0
35093: ST_TO_ADDR
// fac_list := [ ] ;
35094: LD_ADDR_VAR 0 17
35098: PUSH
35099: EMPTY
35100: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35101: LD_ADDR_VAR 0 6
35105: PUSH
35106: LD_VAR 0 1
35110: PPUSH
35111: CALL_OW 274
35115: PPUSH
35116: LD_VAR 0 2
35120: PPUSH
35121: LD_INT 0
35123: PPUSH
35124: CALL 32690 0 3
35128: PPUSH
35129: LD_INT 30
35131: PUSH
35132: LD_INT 3
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PPUSH
35139: CALL_OW 72
35143: ST_TO_ADDR
// if not factories then
35144: LD_VAR 0 6
35148: NOT
35149: IFFALSE 35153
// exit ;
35151: GO 36119
// for i in factories do
35153: LD_ADDR_VAR 0 8
35157: PUSH
35158: LD_VAR 0 6
35162: PUSH
35163: FOR_IN
35164: IFFALSE 35189
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35166: LD_ADDR_VAR 0 17
35170: PUSH
35171: LD_VAR 0 17
35175: PUSH
35176: LD_VAR 0 8
35180: PPUSH
35181: CALL_OW 478
35185: UNION
35186: ST_TO_ADDR
35187: GO 35163
35189: POP
35190: POP
// if not fac_list then
35191: LD_VAR 0 17
35195: NOT
35196: IFFALSE 35200
// exit ;
35198: GO 36119
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35200: LD_ADDR_VAR 0 5
35204: PUSH
35205: LD_INT 4
35207: PUSH
35208: LD_INT 5
35210: PUSH
35211: LD_INT 9
35213: PUSH
35214: LD_INT 10
35216: PUSH
35217: LD_INT 6
35219: PUSH
35220: LD_INT 7
35222: PUSH
35223: LD_INT 11
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 27
35237: PUSH
35238: LD_INT 28
35240: PUSH
35241: LD_INT 26
35243: PUSH
35244: LD_INT 30
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 43
35255: PUSH
35256: LD_INT 44
35258: PUSH
35259: LD_INT 46
35261: PUSH
35262: LD_INT 45
35264: PUSH
35265: LD_INT 47
35267: PUSH
35268: LD_INT 49
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: LIST
35283: PUSH
35284: LD_VAR 0 12
35288: ARRAY
35289: ST_TO_ADDR
// list := list isect fac_list ;
35290: LD_ADDR_VAR 0 5
35294: PUSH
35295: LD_VAR 0 5
35299: PUSH
35300: LD_VAR 0 17
35304: ISECT
35305: ST_TO_ADDR
// if not list then
35306: LD_VAR 0 5
35310: NOT
35311: IFFALSE 35315
// exit ;
35313: GO 36119
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35315: LD_VAR 0 12
35319: PUSH
35320: LD_INT 3
35322: EQUAL
35323: PUSH
35324: LD_INT 49
35326: PUSH
35327: LD_VAR 0 5
35331: IN
35332: AND
35333: PUSH
35334: LD_INT 31
35336: PPUSH
35337: LD_VAR 0 16
35341: PPUSH
35342: CALL_OW 321
35346: PUSH
35347: LD_INT 2
35349: EQUAL
35350: AND
35351: IFFALSE 35411
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35353: LD_INT 22
35355: PUSH
35356: LD_VAR 0 16
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 35
35367: PUSH
35368: LD_INT 49
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 91
35377: PUSH
35378: LD_VAR 0 1
35382: PUSH
35383: LD_INT 10
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: LIST
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: LIST
35395: PPUSH
35396: CALL_OW 69
35400: NOT
35401: IFFALSE 35411
// weapon := ru_time_lapser ;
35403: LD_ADDR_VAR 0 18
35407: PUSH
35408: LD_INT 49
35410: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35411: LD_VAR 0 12
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: IN
35426: PUSH
35427: LD_INT 11
35429: PUSH
35430: LD_VAR 0 5
35434: IN
35435: PUSH
35436: LD_INT 30
35438: PUSH
35439: LD_VAR 0 5
35443: IN
35444: OR
35445: AND
35446: PUSH
35447: LD_INT 6
35449: PPUSH
35450: LD_VAR 0 16
35454: PPUSH
35455: CALL_OW 321
35459: PUSH
35460: LD_INT 2
35462: EQUAL
35463: AND
35464: IFFALSE 35629
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35466: LD_INT 22
35468: PUSH
35469: LD_VAR 0 16
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 2
35480: PUSH
35481: LD_INT 35
35483: PUSH
35484: LD_INT 11
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 35
35493: PUSH
35494: LD_INT 30
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 91
35508: PUSH
35509: LD_VAR 0 1
35513: PUSH
35514: LD_INT 18
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: LIST
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: LIST
35526: PPUSH
35527: CALL_OW 69
35531: NOT
35532: PUSH
35533: LD_INT 22
35535: PUSH
35536: LD_VAR 0 16
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: LD_INT 30
35550: PUSH
35551: LD_INT 32
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 30
35560: PUSH
35561: LD_INT 33
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 91
35575: PUSH
35576: LD_VAR 0 1
35580: PUSH
35581: LD_INT 12
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: LIST
35593: PUSH
35594: EMPTY
35595: LIST
35596: PPUSH
35597: CALL_OW 69
35601: PUSH
35602: LD_INT 2
35604: GREATER
35605: AND
35606: IFFALSE 35629
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35608: LD_ADDR_VAR 0 18
35612: PUSH
35613: LD_INT 11
35615: PUSH
35616: LD_INT 30
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_VAR 0 12
35627: ARRAY
35628: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35629: LD_VAR 0 18
35633: NOT
35634: PUSH
35635: LD_INT 40
35637: PPUSH
35638: LD_VAR 0 16
35642: PPUSH
35643: CALL_OW 321
35647: PUSH
35648: LD_INT 2
35650: EQUAL
35651: AND
35652: PUSH
35653: LD_INT 7
35655: PUSH
35656: LD_VAR 0 5
35660: IN
35661: PUSH
35662: LD_INT 28
35664: PUSH
35665: LD_VAR 0 5
35669: IN
35670: OR
35671: PUSH
35672: LD_INT 45
35674: PUSH
35675: LD_VAR 0 5
35679: IN
35680: OR
35681: AND
35682: IFFALSE 35936
// begin hex := GetHexInfo ( x , y ) ;
35684: LD_ADDR_VAR 0 4
35688: PUSH
35689: LD_VAR 0 10
35693: PPUSH
35694: LD_VAR 0 11
35698: PPUSH
35699: CALL_OW 546
35703: ST_TO_ADDR
// if hex [ 1 ] then
35704: LD_VAR 0 4
35708: PUSH
35709: LD_INT 1
35711: ARRAY
35712: IFFALSE 35716
// exit ;
35714: GO 36119
// height := hex [ 2 ] ;
35716: LD_ADDR_VAR 0 15
35720: PUSH
35721: LD_VAR 0 4
35725: PUSH
35726: LD_INT 2
35728: ARRAY
35729: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35730: LD_ADDR_VAR 0 14
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: LD_INT 3
35743: PUSH
35744: LD_INT 5
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: ST_TO_ADDR
// for i in tmp do
35753: LD_ADDR_VAR 0 8
35757: PUSH
35758: LD_VAR 0 14
35762: PUSH
35763: FOR_IN
35764: IFFALSE 35934
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35766: LD_ADDR_VAR 0 9
35770: PUSH
35771: LD_VAR 0 10
35775: PPUSH
35776: LD_VAR 0 8
35780: PPUSH
35781: LD_INT 5
35783: PPUSH
35784: CALL_OW 272
35788: PUSH
35789: LD_VAR 0 11
35793: PPUSH
35794: LD_VAR 0 8
35798: PPUSH
35799: LD_INT 5
35801: PPUSH
35802: CALL_OW 273
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35811: LD_VAR 0 9
35815: PUSH
35816: LD_INT 1
35818: ARRAY
35819: PPUSH
35820: LD_VAR 0 9
35824: PUSH
35825: LD_INT 2
35827: ARRAY
35828: PPUSH
35829: CALL_OW 488
35833: IFFALSE 35932
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35835: LD_ADDR_VAR 0 4
35839: PUSH
35840: LD_VAR 0 9
35844: PUSH
35845: LD_INT 1
35847: ARRAY
35848: PPUSH
35849: LD_VAR 0 9
35853: PUSH
35854: LD_INT 2
35856: ARRAY
35857: PPUSH
35858: CALL_OW 546
35862: ST_TO_ADDR
// if hex [ 1 ] then
35863: LD_VAR 0 4
35867: PUSH
35868: LD_INT 1
35870: ARRAY
35871: IFFALSE 35875
// continue ;
35873: GO 35763
// h := hex [ 2 ] ;
35875: LD_ADDR_VAR 0 13
35879: PUSH
35880: LD_VAR 0 4
35884: PUSH
35885: LD_INT 2
35887: ARRAY
35888: ST_TO_ADDR
// if h + 7 < height then
35889: LD_VAR 0 13
35893: PUSH
35894: LD_INT 7
35896: PLUS
35897: PUSH
35898: LD_VAR 0 15
35902: LESS
35903: IFFALSE 35932
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35905: LD_ADDR_VAR 0 18
35909: PUSH
35910: LD_INT 7
35912: PUSH
35913: LD_INT 28
35915: PUSH
35916: LD_INT 45
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: LIST
35923: PUSH
35924: LD_VAR 0 12
35928: ARRAY
35929: ST_TO_ADDR
// break ;
35930: GO 35934
// end ; end ; end ;
35932: GO 35763
35934: POP
35935: POP
// end ; if not weapon then
35936: LD_VAR 0 18
35940: NOT
35941: IFFALSE 36001
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35943: LD_ADDR_VAR 0 5
35947: PUSH
35948: LD_VAR 0 5
35952: PUSH
35953: LD_INT 11
35955: PUSH
35956: LD_INT 30
35958: PUSH
35959: LD_INT 49
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: LIST
35966: DIFF
35967: ST_TO_ADDR
// if not list then
35968: LD_VAR 0 5
35972: NOT
35973: IFFALSE 35977
// exit ;
35975: GO 36119
// weapon := list [ rand ( 1 , list ) ] ;
35977: LD_ADDR_VAR 0 18
35981: PUSH
35982: LD_VAR 0 5
35986: PUSH
35987: LD_INT 1
35989: PPUSH
35990: LD_VAR 0 5
35994: PPUSH
35995: CALL_OW 12
35999: ARRAY
36000: ST_TO_ADDR
// end ; if weapon then
36001: LD_VAR 0 18
36005: IFFALSE 36119
// begin tmp := CostOfWeapon ( weapon ) ;
36007: LD_ADDR_VAR 0 14
36011: PUSH
36012: LD_VAR 0 18
36016: PPUSH
36017: CALL_OW 451
36021: ST_TO_ADDR
// j := GetBase ( tower ) ;
36022: LD_ADDR_VAR 0 9
36026: PUSH
36027: LD_VAR 0 1
36031: PPUSH
36032: CALL_OW 274
36036: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36037: LD_VAR 0 9
36041: PPUSH
36042: LD_INT 1
36044: PPUSH
36045: CALL_OW 275
36049: PUSH
36050: LD_VAR 0 14
36054: PUSH
36055: LD_INT 1
36057: ARRAY
36058: GREATEREQUAL
36059: PUSH
36060: LD_VAR 0 9
36064: PPUSH
36065: LD_INT 2
36067: PPUSH
36068: CALL_OW 275
36072: PUSH
36073: LD_VAR 0 14
36077: PUSH
36078: LD_INT 2
36080: ARRAY
36081: GREATEREQUAL
36082: AND
36083: PUSH
36084: LD_VAR 0 9
36088: PPUSH
36089: LD_INT 3
36091: PPUSH
36092: CALL_OW 275
36096: PUSH
36097: LD_VAR 0 14
36101: PUSH
36102: LD_INT 3
36104: ARRAY
36105: GREATEREQUAL
36106: AND
36107: IFFALSE 36119
// result := weapon ;
36109: LD_ADDR_VAR 0 3
36113: PUSH
36114: LD_VAR 0 18
36118: ST_TO_ADDR
// end ; end ;
36119: LD_VAR 0 3
36123: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36124: LD_INT 0
36126: PPUSH
36127: PPUSH
// result := true ;
36128: LD_ADDR_VAR 0 3
36132: PUSH
36133: LD_INT 1
36135: ST_TO_ADDR
// if array1 = array2 then
36136: LD_VAR 0 1
36140: PUSH
36141: LD_VAR 0 2
36145: EQUAL
36146: IFFALSE 36206
// begin for i = 1 to array1 do
36148: LD_ADDR_VAR 0 4
36152: PUSH
36153: DOUBLE
36154: LD_INT 1
36156: DEC
36157: ST_TO_ADDR
36158: LD_VAR 0 1
36162: PUSH
36163: FOR_TO
36164: IFFALSE 36202
// if array1 [ i ] <> array2 [ i ] then
36166: LD_VAR 0 1
36170: PUSH
36171: LD_VAR 0 4
36175: ARRAY
36176: PUSH
36177: LD_VAR 0 2
36181: PUSH
36182: LD_VAR 0 4
36186: ARRAY
36187: NONEQUAL
36188: IFFALSE 36200
// begin result := false ;
36190: LD_ADDR_VAR 0 3
36194: PUSH
36195: LD_INT 0
36197: ST_TO_ADDR
// break ;
36198: GO 36202
// end ;
36200: GO 36163
36202: POP
36203: POP
// end else
36204: GO 36214
// result := false ;
36206: LD_ADDR_VAR 0 3
36210: PUSH
36211: LD_INT 0
36213: ST_TO_ADDR
// end ;
36214: LD_VAR 0 3
36218: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36219: LD_INT 0
36221: PPUSH
36222: PPUSH
// if not array1 or not array2 then
36223: LD_VAR 0 1
36227: NOT
36228: PUSH
36229: LD_VAR 0 2
36233: NOT
36234: OR
36235: IFFALSE 36239
// exit ;
36237: GO 36303
// result := true ;
36239: LD_ADDR_VAR 0 3
36243: PUSH
36244: LD_INT 1
36246: ST_TO_ADDR
// for i = 1 to array1 do
36247: LD_ADDR_VAR 0 4
36251: PUSH
36252: DOUBLE
36253: LD_INT 1
36255: DEC
36256: ST_TO_ADDR
36257: LD_VAR 0 1
36261: PUSH
36262: FOR_TO
36263: IFFALSE 36301
// if array1 [ i ] <> array2 [ i ] then
36265: LD_VAR 0 1
36269: PUSH
36270: LD_VAR 0 4
36274: ARRAY
36275: PUSH
36276: LD_VAR 0 2
36280: PUSH
36281: LD_VAR 0 4
36285: ARRAY
36286: NONEQUAL
36287: IFFALSE 36299
// begin result := false ;
36289: LD_ADDR_VAR 0 3
36293: PUSH
36294: LD_INT 0
36296: ST_TO_ADDR
// break ;
36297: GO 36301
// end ;
36299: GO 36262
36301: POP
36302: POP
// end ;
36303: LD_VAR 0 3
36307: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36308: LD_INT 0
36310: PPUSH
36311: PPUSH
36312: PPUSH
// pom := GetBase ( fac ) ;
36313: LD_ADDR_VAR 0 5
36317: PUSH
36318: LD_VAR 0 1
36322: PPUSH
36323: CALL_OW 274
36327: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36328: LD_ADDR_VAR 0 4
36332: PUSH
36333: LD_VAR 0 2
36337: PUSH
36338: LD_INT 1
36340: ARRAY
36341: PPUSH
36342: LD_VAR 0 2
36346: PUSH
36347: LD_INT 2
36349: ARRAY
36350: PPUSH
36351: LD_VAR 0 2
36355: PUSH
36356: LD_INT 3
36358: ARRAY
36359: PPUSH
36360: LD_VAR 0 2
36364: PUSH
36365: LD_INT 4
36367: ARRAY
36368: PPUSH
36369: CALL_OW 449
36373: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36374: LD_ADDR_VAR 0 3
36378: PUSH
36379: LD_VAR 0 5
36383: PPUSH
36384: LD_INT 1
36386: PPUSH
36387: CALL_OW 275
36391: PUSH
36392: LD_VAR 0 4
36396: PUSH
36397: LD_INT 1
36399: ARRAY
36400: GREATEREQUAL
36401: PUSH
36402: LD_VAR 0 5
36406: PPUSH
36407: LD_INT 2
36409: PPUSH
36410: CALL_OW 275
36414: PUSH
36415: LD_VAR 0 4
36419: PUSH
36420: LD_INT 2
36422: ARRAY
36423: GREATEREQUAL
36424: AND
36425: PUSH
36426: LD_VAR 0 5
36430: PPUSH
36431: LD_INT 3
36433: PPUSH
36434: CALL_OW 275
36438: PUSH
36439: LD_VAR 0 4
36443: PUSH
36444: LD_INT 3
36446: ARRAY
36447: GREATEREQUAL
36448: AND
36449: ST_TO_ADDR
// end ;
36450: LD_VAR 0 3
36454: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36455: LD_INT 0
36457: PPUSH
36458: PPUSH
36459: PPUSH
36460: PPUSH
// pom := GetBase ( building ) ;
36461: LD_ADDR_VAR 0 3
36465: PUSH
36466: LD_VAR 0 1
36470: PPUSH
36471: CALL_OW 274
36475: ST_TO_ADDR
// if not pom then
36476: LD_VAR 0 3
36480: NOT
36481: IFFALSE 36485
// exit ;
36483: GO 36655
// btype := GetBType ( building ) ;
36485: LD_ADDR_VAR 0 5
36489: PUSH
36490: LD_VAR 0 1
36494: PPUSH
36495: CALL_OW 266
36499: ST_TO_ADDR
// if btype = b_armoury then
36500: LD_VAR 0 5
36504: PUSH
36505: LD_INT 4
36507: EQUAL
36508: IFFALSE 36518
// btype := b_barracks ;
36510: LD_ADDR_VAR 0 5
36514: PUSH
36515: LD_INT 5
36517: ST_TO_ADDR
// if btype = b_depot then
36518: LD_VAR 0 5
36522: PUSH
36523: LD_INT 0
36525: EQUAL
36526: IFFALSE 36536
// btype := b_warehouse ;
36528: LD_ADDR_VAR 0 5
36532: PUSH
36533: LD_INT 1
36535: ST_TO_ADDR
// if btype = b_workshop then
36536: LD_VAR 0 5
36540: PUSH
36541: LD_INT 2
36543: EQUAL
36544: IFFALSE 36554
// btype := b_factory ;
36546: LD_ADDR_VAR 0 5
36550: PUSH
36551: LD_INT 3
36553: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36554: LD_ADDR_VAR 0 4
36558: PUSH
36559: LD_VAR 0 5
36563: PPUSH
36564: LD_VAR 0 1
36568: PPUSH
36569: CALL_OW 248
36573: PPUSH
36574: CALL_OW 450
36578: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36579: LD_ADDR_VAR 0 2
36583: PUSH
36584: LD_VAR 0 3
36588: PPUSH
36589: LD_INT 1
36591: PPUSH
36592: CALL_OW 275
36596: PUSH
36597: LD_VAR 0 4
36601: PUSH
36602: LD_INT 1
36604: ARRAY
36605: GREATEREQUAL
36606: PUSH
36607: LD_VAR 0 3
36611: PPUSH
36612: LD_INT 2
36614: PPUSH
36615: CALL_OW 275
36619: PUSH
36620: LD_VAR 0 4
36624: PUSH
36625: LD_INT 2
36627: ARRAY
36628: GREATEREQUAL
36629: AND
36630: PUSH
36631: LD_VAR 0 3
36635: PPUSH
36636: LD_INT 3
36638: PPUSH
36639: CALL_OW 275
36643: PUSH
36644: LD_VAR 0 4
36648: PUSH
36649: LD_INT 3
36651: ARRAY
36652: GREATEREQUAL
36653: AND
36654: ST_TO_ADDR
// end ;
36655: LD_VAR 0 2
36659: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36660: LD_INT 0
36662: PPUSH
36663: PPUSH
36664: PPUSH
// pom := GetBase ( building ) ;
36665: LD_ADDR_VAR 0 4
36669: PUSH
36670: LD_VAR 0 1
36674: PPUSH
36675: CALL_OW 274
36679: ST_TO_ADDR
// if not pom then
36680: LD_VAR 0 4
36684: NOT
36685: IFFALSE 36689
// exit ;
36687: GO 36790
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36689: LD_ADDR_VAR 0 5
36693: PUSH
36694: LD_VAR 0 2
36698: PPUSH
36699: LD_VAR 0 1
36703: PPUSH
36704: CALL_OW 248
36708: PPUSH
36709: CALL_OW 450
36713: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36714: LD_ADDR_VAR 0 3
36718: PUSH
36719: LD_VAR 0 4
36723: PPUSH
36724: LD_INT 1
36726: PPUSH
36727: CALL_OW 275
36731: PUSH
36732: LD_VAR 0 5
36736: PUSH
36737: LD_INT 1
36739: ARRAY
36740: GREATEREQUAL
36741: PUSH
36742: LD_VAR 0 4
36746: PPUSH
36747: LD_INT 2
36749: PPUSH
36750: CALL_OW 275
36754: PUSH
36755: LD_VAR 0 5
36759: PUSH
36760: LD_INT 2
36762: ARRAY
36763: GREATEREQUAL
36764: AND
36765: PUSH
36766: LD_VAR 0 4
36770: PPUSH
36771: LD_INT 3
36773: PPUSH
36774: CALL_OW 275
36778: PUSH
36779: LD_VAR 0 5
36783: PUSH
36784: LD_INT 3
36786: ARRAY
36787: GREATEREQUAL
36788: AND
36789: ST_TO_ADDR
// end ;
36790: LD_VAR 0 3
36794: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36795: LD_INT 0
36797: PPUSH
36798: PPUSH
36799: PPUSH
36800: PPUSH
36801: PPUSH
36802: PPUSH
36803: PPUSH
36804: PPUSH
36805: PPUSH
36806: PPUSH
36807: PPUSH
// result := false ;
36808: LD_ADDR_VAR 0 8
36812: PUSH
36813: LD_INT 0
36815: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36816: LD_VAR 0 5
36820: NOT
36821: PUSH
36822: LD_VAR 0 1
36826: NOT
36827: OR
36828: PUSH
36829: LD_VAR 0 2
36833: NOT
36834: OR
36835: PUSH
36836: LD_VAR 0 3
36840: NOT
36841: OR
36842: IFFALSE 36846
// exit ;
36844: GO 37660
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36846: LD_ADDR_VAR 0 14
36850: PUSH
36851: LD_VAR 0 1
36855: PPUSH
36856: LD_VAR 0 2
36860: PPUSH
36861: LD_VAR 0 3
36865: PPUSH
36866: LD_VAR 0 4
36870: PPUSH
36871: LD_VAR 0 5
36875: PUSH
36876: LD_INT 1
36878: ARRAY
36879: PPUSH
36880: CALL_OW 248
36884: PPUSH
36885: LD_INT 0
36887: PPUSH
36888: CALL 38897 0 6
36892: ST_TO_ADDR
// if not hexes then
36893: LD_VAR 0 14
36897: NOT
36898: IFFALSE 36902
// exit ;
36900: GO 37660
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36902: LD_ADDR_VAR 0 17
36906: PUSH
36907: LD_VAR 0 5
36911: PPUSH
36912: LD_INT 22
36914: PUSH
36915: LD_VAR 0 13
36919: PPUSH
36920: CALL_OW 255
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 2
36931: PUSH
36932: LD_INT 30
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 30
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PPUSH
36961: CALL_OW 72
36965: ST_TO_ADDR
// for i = 1 to hexes do
36966: LD_ADDR_VAR 0 9
36970: PUSH
36971: DOUBLE
36972: LD_INT 1
36974: DEC
36975: ST_TO_ADDR
36976: LD_VAR 0 14
36980: PUSH
36981: FOR_TO
36982: IFFALSE 37658
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36984: LD_ADDR_VAR 0 13
36988: PUSH
36989: LD_VAR 0 14
36993: PUSH
36994: LD_VAR 0 9
36998: ARRAY
36999: PUSH
37000: LD_INT 1
37002: ARRAY
37003: PPUSH
37004: LD_VAR 0 14
37008: PUSH
37009: LD_VAR 0 9
37013: ARRAY
37014: PUSH
37015: LD_INT 2
37017: ARRAY
37018: PPUSH
37019: CALL_OW 428
37023: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37024: LD_VAR 0 14
37028: PUSH
37029: LD_VAR 0 9
37033: ARRAY
37034: PUSH
37035: LD_INT 1
37037: ARRAY
37038: PPUSH
37039: LD_VAR 0 14
37043: PUSH
37044: LD_VAR 0 9
37048: ARRAY
37049: PUSH
37050: LD_INT 2
37052: ARRAY
37053: PPUSH
37054: CALL_OW 351
37058: PUSH
37059: LD_VAR 0 14
37063: PUSH
37064: LD_VAR 0 9
37068: ARRAY
37069: PUSH
37070: LD_INT 1
37072: ARRAY
37073: PPUSH
37074: LD_VAR 0 14
37078: PUSH
37079: LD_VAR 0 9
37083: ARRAY
37084: PUSH
37085: LD_INT 2
37087: ARRAY
37088: PPUSH
37089: CALL_OW 488
37093: NOT
37094: OR
37095: PUSH
37096: LD_VAR 0 13
37100: PPUSH
37101: CALL_OW 247
37105: PUSH
37106: LD_INT 3
37108: EQUAL
37109: OR
37110: IFFALSE 37116
// exit ;
37112: POP
37113: POP
37114: GO 37660
// if not tmp then
37116: LD_VAR 0 13
37120: NOT
37121: IFFALSE 37125
// continue ;
37123: GO 36981
// result := true ;
37125: LD_ADDR_VAR 0 8
37129: PUSH
37130: LD_INT 1
37132: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37133: LD_VAR 0 6
37137: PUSH
37138: LD_VAR 0 13
37142: PPUSH
37143: CALL_OW 247
37147: PUSH
37148: LD_INT 2
37150: EQUAL
37151: AND
37152: PUSH
37153: LD_VAR 0 13
37157: PPUSH
37158: CALL_OW 263
37162: PUSH
37163: LD_INT 1
37165: EQUAL
37166: AND
37167: IFFALSE 37331
// begin if IsDrivenBy ( tmp ) then
37169: LD_VAR 0 13
37173: PPUSH
37174: CALL_OW 311
37178: IFFALSE 37182
// continue ;
37180: GO 36981
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37182: LD_VAR 0 6
37186: PPUSH
37187: LD_INT 3
37189: PUSH
37190: LD_INT 60
37192: PUSH
37193: EMPTY
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 3
37202: PUSH
37203: LD_INT 55
37205: PUSH
37206: EMPTY
37207: LIST
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PPUSH
37217: CALL_OW 72
37221: IFFALSE 37329
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37223: LD_ADDR_VAR 0 18
37227: PUSH
37228: LD_VAR 0 6
37232: PPUSH
37233: LD_INT 3
37235: PUSH
37236: LD_INT 60
37238: PUSH
37239: EMPTY
37240: LIST
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 3
37248: PUSH
37249: LD_INT 55
37251: PUSH
37252: EMPTY
37253: LIST
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PPUSH
37263: CALL_OW 72
37267: PUSH
37268: LD_INT 1
37270: ARRAY
37271: ST_TO_ADDR
// if IsInUnit ( driver ) then
37272: LD_VAR 0 18
37276: PPUSH
37277: CALL_OW 310
37281: IFFALSE 37292
// ComExit ( driver ) ;
37283: LD_VAR 0 18
37287: PPUSH
37288: CALL 62025 0 1
// AddComEnterUnit ( driver , tmp ) ;
37292: LD_VAR 0 18
37296: PPUSH
37297: LD_VAR 0 13
37301: PPUSH
37302: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37306: LD_VAR 0 18
37310: PPUSH
37311: LD_VAR 0 7
37315: PPUSH
37316: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37320: LD_VAR 0 18
37324: PPUSH
37325: CALL_OW 181
// end ; continue ;
37329: GO 36981
// end ; if not cleaners or not tmp in cleaners then
37331: LD_VAR 0 6
37335: NOT
37336: PUSH
37337: LD_VAR 0 13
37341: PUSH
37342: LD_VAR 0 6
37346: IN
37347: NOT
37348: OR
37349: IFFALSE 37656
// begin if dep then
37351: LD_VAR 0 17
37355: IFFALSE 37491
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37357: LD_ADDR_VAR 0 16
37361: PUSH
37362: LD_VAR 0 17
37366: PUSH
37367: LD_INT 1
37369: ARRAY
37370: PPUSH
37371: CALL_OW 250
37375: PPUSH
37376: LD_VAR 0 17
37380: PUSH
37381: LD_INT 1
37383: ARRAY
37384: PPUSH
37385: CALL_OW 254
37389: PPUSH
37390: LD_INT 5
37392: PPUSH
37393: CALL_OW 272
37397: PUSH
37398: LD_VAR 0 17
37402: PUSH
37403: LD_INT 1
37405: ARRAY
37406: PPUSH
37407: CALL_OW 251
37411: PPUSH
37412: LD_VAR 0 17
37416: PUSH
37417: LD_INT 1
37419: ARRAY
37420: PPUSH
37421: CALL_OW 254
37425: PPUSH
37426: LD_INT 5
37428: PPUSH
37429: CALL_OW 273
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37438: LD_VAR 0 16
37442: PUSH
37443: LD_INT 1
37445: ARRAY
37446: PPUSH
37447: LD_VAR 0 16
37451: PUSH
37452: LD_INT 2
37454: ARRAY
37455: PPUSH
37456: CALL_OW 488
37460: IFFALSE 37491
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37462: LD_VAR 0 13
37466: PPUSH
37467: LD_VAR 0 16
37471: PUSH
37472: LD_INT 1
37474: ARRAY
37475: PPUSH
37476: LD_VAR 0 16
37480: PUSH
37481: LD_INT 2
37483: ARRAY
37484: PPUSH
37485: CALL_OW 111
// continue ;
37489: GO 36981
// end ; end ; r := GetDir ( tmp ) ;
37491: LD_ADDR_VAR 0 15
37495: PUSH
37496: LD_VAR 0 13
37500: PPUSH
37501: CALL_OW 254
37505: ST_TO_ADDR
// if r = 5 then
37506: LD_VAR 0 15
37510: PUSH
37511: LD_INT 5
37513: EQUAL
37514: IFFALSE 37524
// r := 0 ;
37516: LD_ADDR_VAR 0 15
37520: PUSH
37521: LD_INT 0
37523: ST_TO_ADDR
// for j = r to 5 do
37524: LD_ADDR_VAR 0 10
37528: PUSH
37529: DOUBLE
37530: LD_VAR 0 15
37534: DEC
37535: ST_TO_ADDR
37536: LD_INT 5
37538: PUSH
37539: FOR_TO
37540: IFFALSE 37654
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37542: LD_ADDR_VAR 0 11
37546: PUSH
37547: LD_VAR 0 13
37551: PPUSH
37552: CALL_OW 250
37556: PPUSH
37557: LD_VAR 0 10
37561: PPUSH
37562: LD_INT 2
37564: PPUSH
37565: CALL_OW 272
37569: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37570: LD_ADDR_VAR 0 12
37574: PUSH
37575: LD_VAR 0 13
37579: PPUSH
37580: CALL_OW 251
37584: PPUSH
37585: LD_VAR 0 10
37589: PPUSH
37590: LD_INT 2
37592: PPUSH
37593: CALL_OW 273
37597: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37598: LD_VAR 0 11
37602: PPUSH
37603: LD_VAR 0 12
37607: PPUSH
37608: CALL_OW 488
37612: PUSH
37613: LD_VAR 0 11
37617: PPUSH
37618: LD_VAR 0 12
37622: PPUSH
37623: CALL_OW 428
37627: NOT
37628: AND
37629: IFFALSE 37652
// begin ComMoveXY ( tmp , _x , _y ) ;
37631: LD_VAR 0 13
37635: PPUSH
37636: LD_VAR 0 11
37640: PPUSH
37641: LD_VAR 0 12
37645: PPUSH
37646: CALL_OW 111
// break ;
37650: GO 37654
// end ; end ;
37652: GO 37539
37654: POP
37655: POP
// end ; end ;
37656: GO 36981
37658: POP
37659: POP
// end ;
37660: LD_VAR 0 8
37664: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37665: LD_INT 0
37667: PPUSH
// result := true ;
37668: LD_ADDR_VAR 0 3
37672: PUSH
37673: LD_INT 1
37675: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37676: LD_VAR 0 2
37680: PUSH
37681: LD_INT 24
37683: DOUBLE
37684: EQUAL
37685: IFTRUE 37695
37687: LD_INT 33
37689: DOUBLE
37690: EQUAL
37691: IFTRUE 37695
37693: GO 37720
37695: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37696: LD_ADDR_VAR 0 3
37700: PUSH
37701: LD_INT 32
37703: PPUSH
37704: LD_VAR 0 1
37708: PPUSH
37709: CALL_OW 321
37713: PUSH
37714: LD_INT 2
37716: EQUAL
37717: ST_TO_ADDR
37718: GO 38040
37720: LD_INT 20
37722: DOUBLE
37723: EQUAL
37724: IFTRUE 37728
37726: GO 37753
37728: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37729: LD_ADDR_VAR 0 3
37733: PUSH
37734: LD_INT 6
37736: PPUSH
37737: LD_VAR 0 1
37741: PPUSH
37742: CALL_OW 321
37746: PUSH
37747: LD_INT 2
37749: EQUAL
37750: ST_TO_ADDR
37751: GO 38040
37753: LD_INT 22
37755: DOUBLE
37756: EQUAL
37757: IFTRUE 37767
37759: LD_INT 36
37761: DOUBLE
37762: EQUAL
37763: IFTRUE 37767
37765: GO 37792
37767: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37768: LD_ADDR_VAR 0 3
37772: PUSH
37773: LD_INT 15
37775: PPUSH
37776: LD_VAR 0 1
37780: PPUSH
37781: CALL_OW 321
37785: PUSH
37786: LD_INT 2
37788: EQUAL
37789: ST_TO_ADDR
37790: GO 38040
37792: LD_INT 30
37794: DOUBLE
37795: EQUAL
37796: IFTRUE 37800
37798: GO 37825
37800: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37801: LD_ADDR_VAR 0 3
37805: PUSH
37806: LD_INT 20
37808: PPUSH
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 321
37818: PUSH
37819: LD_INT 2
37821: EQUAL
37822: ST_TO_ADDR
37823: GO 38040
37825: LD_INT 28
37827: DOUBLE
37828: EQUAL
37829: IFTRUE 37839
37831: LD_INT 21
37833: DOUBLE
37834: EQUAL
37835: IFTRUE 37839
37837: GO 37864
37839: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37840: LD_ADDR_VAR 0 3
37844: PUSH
37845: LD_INT 21
37847: PPUSH
37848: LD_VAR 0 1
37852: PPUSH
37853: CALL_OW 321
37857: PUSH
37858: LD_INT 2
37860: EQUAL
37861: ST_TO_ADDR
37862: GO 38040
37864: LD_INT 16
37866: DOUBLE
37867: EQUAL
37868: IFTRUE 37872
37870: GO 37899
37872: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37873: LD_ADDR_VAR 0 3
37877: PUSH
37878: LD_EXP 106
37882: PPUSH
37883: LD_VAR 0 1
37887: PPUSH
37888: CALL_OW 321
37892: PUSH
37893: LD_INT 2
37895: EQUAL
37896: ST_TO_ADDR
37897: GO 38040
37899: LD_INT 19
37901: DOUBLE
37902: EQUAL
37903: IFTRUE 37913
37905: LD_INT 23
37907: DOUBLE
37908: EQUAL
37909: IFTRUE 37913
37911: GO 37940
37913: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37914: LD_ADDR_VAR 0 3
37918: PUSH
37919: LD_EXP 105
37923: PPUSH
37924: LD_VAR 0 1
37928: PPUSH
37929: CALL_OW 321
37933: PUSH
37934: LD_INT 2
37936: EQUAL
37937: ST_TO_ADDR
37938: GO 38040
37940: LD_INT 17
37942: DOUBLE
37943: EQUAL
37944: IFTRUE 37948
37946: GO 37973
37948: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37949: LD_ADDR_VAR 0 3
37953: PUSH
37954: LD_INT 39
37956: PPUSH
37957: LD_VAR 0 1
37961: PPUSH
37962: CALL_OW 321
37966: PUSH
37967: LD_INT 2
37969: EQUAL
37970: ST_TO_ADDR
37971: GO 38040
37973: LD_INT 18
37975: DOUBLE
37976: EQUAL
37977: IFTRUE 37981
37979: GO 38006
37981: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37982: LD_ADDR_VAR 0 3
37986: PUSH
37987: LD_INT 40
37989: PPUSH
37990: LD_VAR 0 1
37994: PPUSH
37995: CALL_OW 321
37999: PUSH
38000: LD_INT 2
38002: EQUAL
38003: ST_TO_ADDR
38004: GO 38040
38006: LD_INT 27
38008: DOUBLE
38009: EQUAL
38010: IFTRUE 38014
38012: GO 38039
38014: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38015: LD_ADDR_VAR 0 3
38019: PUSH
38020: LD_INT 35
38022: PPUSH
38023: LD_VAR 0 1
38027: PPUSH
38028: CALL_OW 321
38032: PUSH
38033: LD_INT 2
38035: EQUAL
38036: ST_TO_ADDR
38037: GO 38040
38039: POP
// end ;
38040: LD_VAR 0 3
38044: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38045: LD_INT 0
38047: PPUSH
38048: PPUSH
38049: PPUSH
38050: PPUSH
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
38056: PPUSH
38057: PPUSH
// result := false ;
38058: LD_ADDR_VAR 0 6
38062: PUSH
38063: LD_INT 0
38065: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38066: LD_VAR 0 1
38070: NOT
38071: PUSH
38072: LD_VAR 0 1
38076: PPUSH
38077: CALL_OW 266
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: IN
38092: NOT
38093: OR
38094: PUSH
38095: LD_VAR 0 2
38099: NOT
38100: OR
38101: PUSH
38102: LD_VAR 0 5
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: LD_INT 2
38115: PUSH
38116: LD_INT 3
38118: PUSH
38119: LD_INT 4
38121: PUSH
38122: LD_INT 5
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: IN
38133: NOT
38134: OR
38135: PUSH
38136: LD_VAR 0 3
38140: PPUSH
38141: LD_VAR 0 4
38145: PPUSH
38146: CALL_OW 488
38150: NOT
38151: OR
38152: IFFALSE 38156
// exit ;
38154: GO 38892
// side := GetSide ( depot ) ;
38156: LD_ADDR_VAR 0 9
38160: PUSH
38161: LD_VAR 0 1
38165: PPUSH
38166: CALL_OW 255
38170: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38171: LD_VAR 0 9
38175: PPUSH
38176: LD_VAR 0 2
38180: PPUSH
38181: CALL 37665 0 2
38185: NOT
38186: IFFALSE 38190
// exit ;
38188: GO 38892
// pom := GetBase ( depot ) ;
38190: LD_ADDR_VAR 0 10
38194: PUSH
38195: LD_VAR 0 1
38199: PPUSH
38200: CALL_OW 274
38204: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38205: LD_ADDR_VAR 0 11
38209: PUSH
38210: LD_VAR 0 2
38214: PPUSH
38215: LD_VAR 0 1
38219: PPUSH
38220: CALL_OW 248
38224: PPUSH
38225: CALL_OW 450
38229: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38230: LD_VAR 0 10
38234: PPUSH
38235: LD_INT 1
38237: PPUSH
38238: CALL_OW 275
38242: PUSH
38243: LD_VAR 0 11
38247: PUSH
38248: LD_INT 1
38250: ARRAY
38251: GREATEREQUAL
38252: PUSH
38253: LD_VAR 0 10
38257: PPUSH
38258: LD_INT 2
38260: PPUSH
38261: CALL_OW 275
38265: PUSH
38266: LD_VAR 0 11
38270: PUSH
38271: LD_INT 2
38273: ARRAY
38274: GREATEREQUAL
38275: AND
38276: PUSH
38277: LD_VAR 0 10
38281: PPUSH
38282: LD_INT 3
38284: PPUSH
38285: CALL_OW 275
38289: PUSH
38290: LD_VAR 0 11
38294: PUSH
38295: LD_INT 3
38297: ARRAY
38298: GREATEREQUAL
38299: AND
38300: NOT
38301: IFFALSE 38305
// exit ;
38303: GO 38892
// if GetBType ( depot ) = b_depot then
38305: LD_VAR 0 1
38309: PPUSH
38310: CALL_OW 266
38314: PUSH
38315: LD_INT 0
38317: EQUAL
38318: IFFALSE 38330
// dist := 28 else
38320: LD_ADDR_VAR 0 14
38324: PUSH
38325: LD_INT 28
38327: ST_TO_ADDR
38328: GO 38338
// dist := 36 ;
38330: LD_ADDR_VAR 0 14
38334: PUSH
38335: LD_INT 36
38337: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38338: LD_VAR 0 1
38342: PPUSH
38343: LD_VAR 0 3
38347: PPUSH
38348: LD_VAR 0 4
38352: PPUSH
38353: CALL_OW 297
38357: PUSH
38358: LD_VAR 0 14
38362: GREATER
38363: IFFALSE 38367
// exit ;
38365: GO 38892
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38367: LD_ADDR_VAR 0 12
38371: PUSH
38372: LD_VAR 0 2
38376: PPUSH
38377: LD_VAR 0 3
38381: PPUSH
38382: LD_VAR 0 4
38386: PPUSH
38387: LD_VAR 0 5
38391: PPUSH
38392: LD_VAR 0 1
38396: PPUSH
38397: CALL_OW 248
38401: PPUSH
38402: LD_INT 0
38404: PPUSH
38405: CALL 38897 0 6
38409: ST_TO_ADDR
// if not hexes then
38410: LD_VAR 0 12
38414: NOT
38415: IFFALSE 38419
// exit ;
38417: GO 38892
// hex := GetHexInfo ( x , y ) ;
38419: LD_ADDR_VAR 0 15
38423: PUSH
38424: LD_VAR 0 3
38428: PPUSH
38429: LD_VAR 0 4
38433: PPUSH
38434: CALL_OW 546
38438: ST_TO_ADDR
// if hex [ 1 ] then
38439: LD_VAR 0 15
38443: PUSH
38444: LD_INT 1
38446: ARRAY
38447: IFFALSE 38451
// exit ;
38449: GO 38892
// height := hex [ 2 ] ;
38451: LD_ADDR_VAR 0 13
38455: PUSH
38456: LD_VAR 0 15
38460: PUSH
38461: LD_INT 2
38463: ARRAY
38464: ST_TO_ADDR
// for i = 1 to hexes do
38465: LD_ADDR_VAR 0 7
38469: PUSH
38470: DOUBLE
38471: LD_INT 1
38473: DEC
38474: ST_TO_ADDR
38475: LD_VAR 0 12
38479: PUSH
38480: FOR_TO
38481: IFFALSE 38811
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38483: LD_VAR 0 12
38487: PUSH
38488: LD_VAR 0 7
38492: ARRAY
38493: PUSH
38494: LD_INT 1
38496: ARRAY
38497: PPUSH
38498: LD_VAR 0 12
38502: PUSH
38503: LD_VAR 0 7
38507: ARRAY
38508: PUSH
38509: LD_INT 2
38511: ARRAY
38512: PPUSH
38513: CALL_OW 488
38517: NOT
38518: PUSH
38519: LD_VAR 0 12
38523: PUSH
38524: LD_VAR 0 7
38528: ARRAY
38529: PUSH
38530: LD_INT 1
38532: ARRAY
38533: PPUSH
38534: LD_VAR 0 12
38538: PUSH
38539: LD_VAR 0 7
38543: ARRAY
38544: PUSH
38545: LD_INT 2
38547: ARRAY
38548: PPUSH
38549: CALL_OW 428
38553: PUSH
38554: LD_INT 0
38556: GREATER
38557: OR
38558: PUSH
38559: LD_VAR 0 12
38563: PUSH
38564: LD_VAR 0 7
38568: ARRAY
38569: PUSH
38570: LD_INT 1
38572: ARRAY
38573: PPUSH
38574: LD_VAR 0 12
38578: PUSH
38579: LD_VAR 0 7
38583: ARRAY
38584: PUSH
38585: LD_INT 2
38587: ARRAY
38588: PPUSH
38589: CALL_OW 351
38593: OR
38594: IFFALSE 38600
// exit ;
38596: POP
38597: POP
38598: GO 38892
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38600: LD_ADDR_VAR 0 8
38604: PUSH
38605: LD_VAR 0 12
38609: PUSH
38610: LD_VAR 0 7
38614: ARRAY
38615: PUSH
38616: LD_INT 1
38618: ARRAY
38619: PPUSH
38620: LD_VAR 0 12
38624: PUSH
38625: LD_VAR 0 7
38629: ARRAY
38630: PUSH
38631: LD_INT 2
38633: ARRAY
38634: PPUSH
38635: CALL_OW 546
38639: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38640: LD_VAR 0 8
38644: PUSH
38645: LD_INT 1
38647: ARRAY
38648: PUSH
38649: LD_VAR 0 8
38653: PUSH
38654: LD_INT 2
38656: ARRAY
38657: PUSH
38658: LD_VAR 0 13
38662: PUSH
38663: LD_INT 2
38665: PLUS
38666: GREATER
38667: OR
38668: PUSH
38669: LD_VAR 0 8
38673: PUSH
38674: LD_INT 2
38676: ARRAY
38677: PUSH
38678: LD_VAR 0 13
38682: PUSH
38683: LD_INT 2
38685: MINUS
38686: LESS
38687: OR
38688: PUSH
38689: LD_VAR 0 8
38693: PUSH
38694: LD_INT 3
38696: ARRAY
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 8
38703: PUSH
38704: LD_INT 9
38706: PUSH
38707: LD_INT 10
38709: PUSH
38710: LD_INT 11
38712: PUSH
38713: LD_INT 12
38715: PUSH
38716: LD_INT 13
38718: PUSH
38719: LD_INT 16
38721: PUSH
38722: LD_INT 17
38724: PUSH
38725: LD_INT 18
38727: PUSH
38728: LD_INT 19
38730: PUSH
38731: LD_INT 20
38733: PUSH
38734: LD_INT 21
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: IN
38752: NOT
38753: OR
38754: PUSH
38755: LD_VAR 0 8
38759: PUSH
38760: LD_INT 5
38762: ARRAY
38763: NOT
38764: OR
38765: PUSH
38766: LD_VAR 0 8
38770: PUSH
38771: LD_INT 6
38773: ARRAY
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: LD_INT 2
38780: PUSH
38781: LD_INT 7
38783: PUSH
38784: LD_INT 9
38786: PUSH
38787: LD_INT 10
38789: PUSH
38790: LD_INT 11
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: IN
38801: NOT
38802: OR
38803: IFFALSE 38809
// exit ;
38805: POP
38806: POP
38807: GO 38892
// end ;
38809: GO 38480
38811: POP
38812: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38813: LD_VAR 0 9
38817: PPUSH
38818: LD_VAR 0 3
38822: PPUSH
38823: LD_VAR 0 4
38827: PPUSH
38828: LD_INT 20
38830: PPUSH
38831: CALL 30838 0 4
38835: PUSH
38836: LD_INT 4
38838: ARRAY
38839: IFFALSE 38843
// exit ;
38841: GO 38892
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38843: LD_VAR 0 2
38847: PUSH
38848: LD_INT 29
38850: PUSH
38851: LD_INT 30
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: IN
38858: PUSH
38859: LD_VAR 0 3
38863: PPUSH
38864: LD_VAR 0 4
38868: PPUSH
38869: LD_VAR 0 9
38873: PPUSH
38874: CALL_OW 440
38878: NOT
38879: AND
38880: IFFALSE 38884
// exit ;
38882: GO 38892
// result := true ;
38884: LD_ADDR_VAR 0 6
38888: PUSH
38889: LD_INT 1
38891: ST_TO_ADDR
// end ;
38892: LD_VAR 0 6
38896: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38897: LD_INT 0
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
38924: PPUSH
38925: PPUSH
38926: PPUSH
38927: PPUSH
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
38942: PPUSH
38943: PPUSH
38944: PPUSH
38945: PPUSH
38946: PPUSH
38947: PPUSH
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
38953: PPUSH
38954: PPUSH
38955: PPUSH
38956: PPUSH
// result = [ ] ;
38957: LD_ADDR_VAR 0 7
38961: PUSH
38962: EMPTY
38963: ST_TO_ADDR
// temp_list = [ ] ;
38964: LD_ADDR_VAR 0 9
38968: PUSH
38969: EMPTY
38970: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38971: LD_VAR 0 4
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: LD_INT 3
38987: PUSH
38988: LD_INT 4
38990: PUSH
38991: LD_INT 5
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: IN
39002: NOT
39003: PUSH
39004: LD_VAR 0 1
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: IN
39019: PUSH
39020: LD_VAR 0 5
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 3
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: IN
39039: NOT
39040: AND
39041: OR
39042: IFFALSE 39046
// exit ;
39044: GO 57437
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39046: LD_VAR 0 1
39050: PUSH
39051: LD_INT 6
39053: PUSH
39054: LD_INT 7
39056: PUSH
39057: LD_INT 8
39059: PUSH
39060: LD_INT 13
39062: PUSH
39063: LD_INT 12
39065: PUSH
39066: LD_INT 15
39068: PUSH
39069: LD_INT 11
39071: PUSH
39072: LD_INT 14
39074: PUSH
39075: LD_INT 10
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: IN
39089: IFFALSE 39099
// btype = b_lab ;
39091: LD_ADDR_VAR 0 1
39095: PUSH
39096: LD_INT 6
39098: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39099: LD_VAR 0 6
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: LIST
39117: IN
39118: NOT
39119: PUSH
39120: LD_VAR 0 1
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: LD_INT 2
39133: PUSH
39134: LD_INT 3
39136: PUSH
39137: LD_INT 6
39139: PUSH
39140: LD_INT 36
39142: PUSH
39143: LD_INT 4
39145: PUSH
39146: LD_INT 5
39148: PUSH
39149: LD_INT 31
39151: PUSH
39152: LD_INT 32
39154: PUSH
39155: LD_INT 33
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: IN
39171: NOT
39172: PUSH
39173: LD_VAR 0 6
39177: PUSH
39178: LD_INT 1
39180: EQUAL
39181: AND
39182: OR
39183: PUSH
39184: LD_VAR 0 1
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 3
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: IN
39199: NOT
39200: PUSH
39201: LD_VAR 0 6
39205: PUSH
39206: LD_INT 2
39208: EQUAL
39209: AND
39210: OR
39211: IFFALSE 39221
// mode = 0 ;
39213: LD_ADDR_VAR 0 6
39217: PUSH
39218: LD_INT 0
39220: ST_TO_ADDR
// case mode of 0 :
39221: LD_VAR 0 6
39225: PUSH
39226: LD_INT 0
39228: DOUBLE
39229: EQUAL
39230: IFTRUE 39234
39232: GO 50687
39234: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39235: LD_ADDR_VAR 0 11
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 1
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: LD_INT 3
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: LD_INT 3
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39428: LD_ADDR_VAR 0 12
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 2
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 2
39551: NEG
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: NEG
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 2
39574: NEG
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 3
39585: NEG
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 3
39596: NEG
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39624: LD_ADDR_VAR 0 13
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 2
39759: NEG
39760: PUSH
39761: LD_INT 2
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 2
39771: NEG
39772: PUSH
39773: LD_INT 3
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 3
39783: NEG
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 3
39795: NEG
39796: PUSH
39797: LD_INT 3
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39823: LD_ADDR_VAR 0 14
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: LD_INT 2
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: LD_INT 3
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: LD_INT 3
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40019: LD_ADDR_VAR 0 15
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 2
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 3
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 3
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40212: LD_ADDR_VAR 0 16
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 2
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: NEG
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: NEG
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 3
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 3
40369: PUSH
40370: LD_INT 3
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: LD_INT 3
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40405: LD_ADDR_VAR 0 17
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: LD_INT 1
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 1
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: LD_INT 2
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: LD_INT 2
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: LD_INT 2
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40635: LD_ADDR_VAR 0 18
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: LD_INT 2
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 2
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 2
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: LD_INT 2
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40865: LD_ADDR_VAR 0 19
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: LD_INT 2
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: NEG
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: NEG
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41095: LD_ADDR_VAR 0 20
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 2
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: NEG
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: NEG
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: LD_INT 2
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41325: LD_ADDR_VAR 0 21
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 1
41345: NEG
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 2
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: LD_INT 2
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 2
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 2
41501: NEG
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 2
41512: NEG
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41555: LD_ADDR_VAR 0 22
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: LD_INT 2
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41785: LD_ADDR_VAR 0 23
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 2
41961: NEG
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 2
41972: NEG
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 2
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: LD_INT 3
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: LD_INT 3
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 2
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42065: LD_ADDR_VAR 0 24
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 2
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: NEG
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: NEG
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 3
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 3
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42341: LD_ADDR_VAR 0 25
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: PUSH
42487: LD_INT 2
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 3
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 3
42562: PUSH
42563: LD_INT 2
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: LD_INT 3
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 3
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42615: LD_ADDR_VAR 0 26
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: LD_INT 3
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 3
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42891: LD_ADDR_VAR 0 27
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: LD_INT 2
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 2
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 3
43124: NEG
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 3
43136: NEG
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43171: LD_ADDR_VAR 0 28
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 2
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: LD_INT 3
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 3
43398: NEG
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 3
43406: NEG
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 3
43418: NEG
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43453: LD_ADDR_VAR 0 29
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 2
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: LD_INT 2
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: LD_INT 3
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 3
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: LD_INT 3
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 3
43697: NEG
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43732: LD_ADDR_VAR 0 30
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 3
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 3
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: LD_INT 3
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 3
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44010: LD_ADDR_VAR 0 31
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: LD_INT 2
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: LD_INT 3
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 3
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 3
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 3
44253: NEG
44254: PUSH
44255: LD_INT 2
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44288: LD_ADDR_VAR 0 32
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: LD_INT 2
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: NEG
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 3
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 3
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: PUSH
44511: LD_INT 3
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44566: LD_ADDR_VAR 0 33
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: NEG
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: LD_INT 3
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 2
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 3
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: LD_INT 3
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 3
44810: NEG
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44845: LD_ADDR_VAR 0 34
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 2
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: LD_INT 3
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 3
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: LD_INT 3
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: NEG
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 3
45090: NEG
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45125: LD_ADDR_VAR 0 35
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45237: LD_ADDR_VAR 0 36
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45349: LD_ADDR_VAR 0 37
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45461: LD_ADDR_VAR 0 38
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45573: LD_ADDR_VAR 0 39
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 2
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45685: LD_ADDR_VAR 0 40
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45797: LD_ADDR_VAR 0 41
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: LD_INT 3
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 3
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 3
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 3
46040: PUSH
46041: LD_INT 3
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: LD_INT 3
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 2
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 3
46071: NEG
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 3
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 3
46094: NEG
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 3
46106: NEG
46107: PUSH
46108: LD_INT 3
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46147: LD_ADDR_VAR 0 42
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 3
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 3
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 3
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 3
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 3
46393: PUSH
46394: LD_INT 3
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: LD_INT 3
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 3
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 3
46444: NEG
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 3
46456: NEG
46457: PUSH
46458: LD_INT 3
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46497: LD_ADDR_VAR 0 43
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 3
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 3
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 3
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 3
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 3
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 3
46793: NEG
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 3
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46845: LD_ADDR_VAR 0 44
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: LD_INT 3
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 3
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 3
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 3
47088: PUSH
47089: LD_INT 3
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: LD_INT 3
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 3
47119: NEG
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 3
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 3
47142: NEG
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 3
47154: NEG
47155: PUSH
47156: LD_INT 3
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47195: LD_ADDR_VAR 0 45
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: LD_INT 2
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: LD_INT 3
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 3
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 3
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 3
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 3
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 2
47451: PUSH
47452: LD_INT 3
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 3
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 3
47492: NEG
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 3
47504: NEG
47505: PUSH
47506: LD_INT 3
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47545: LD_ADDR_VAR 0 46
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 3
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 3
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 3
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 3
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 3
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: NEG
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 3
47852: NEG
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47893: LD_ADDR_VAR 0 47
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: LD_INT 2
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 2
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48044: LD_ADDR_VAR 0 48
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48191: LD_ADDR_VAR 0 49
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48335: LD_ADDR_VAR 0 50
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48479: LD_ADDR_VAR 0 51
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48626: LD_ADDR_VAR 0 52
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48777: LD_ADDR_VAR 0 53
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49007: LD_ADDR_VAR 0 54
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49237: LD_ADDR_VAR 0 55
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49467: LD_ADDR_VAR 0 56
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49697: LD_ADDR_VAR 0 57
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49927: LD_ADDR_VAR 0 58
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50157: LD_ADDR_VAR 0 59
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50245: LD_ADDR_VAR 0 60
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50333: LD_ADDR_VAR 0 61
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50421: LD_ADDR_VAR 0 62
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50509: LD_ADDR_VAR 0 63
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50597: LD_ADDR_VAR 0 64
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: ST_TO_ADDR
// end ; 1 :
50685: GO 56582
50687: LD_INT 1
50689: DOUBLE
50690: EQUAL
50691: IFTRUE 50695
50693: GO 53318
50695: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50696: LD_ADDR_VAR 0 11
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: LD_INT 3
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 3
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50740: LD_ADDR_VAR 0 12
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50781: LD_ADDR_VAR 0 13
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 3
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: LIST
50820: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50821: LD_ADDR_VAR 0 14
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 3
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50862: LD_ADDR_VAR 0 15
50866: PUSH
50867: LD_INT 2
50869: NEG
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 3
50891: NEG
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: LIST
50905: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50906: LD_ADDR_VAR 0 16
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: LD_INT 3
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 3
50925: NEG
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: NEG
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: LIST
50951: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50952: LD_ADDR_VAR 0 17
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: LIST
50995: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50996: LD_ADDR_VAR 0 18
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 3
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: LIST
51036: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51037: LD_ADDR_VAR 0 19
51041: PUSH
51042: LD_INT 3
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: LIST
51076: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51077: LD_ADDR_VAR 0 20
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 3
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: LIST
51117: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51118: LD_ADDR_VAR 0 21
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 3
51136: NEG
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 3
51147: NEG
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51162: LD_ADDR_VAR 0 22
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 3
51181: NEG
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 3
51193: NEG
51194: PUSH
51195: LD_INT 3
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: LIST
51207: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51208: LD_ADDR_VAR 0 23
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 3
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 4
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: LIST
51251: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51252: LD_ADDR_VAR 0 24
51256: PUSH
51257: LD_INT 3
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 3
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 4
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: LIST
51292: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51293: LD_ADDR_VAR 0 25
51297: PUSH
51298: LD_INT 3
51300: PUSH
51301: LD_INT 3
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 4
51310: PUSH
51311: LD_INT 3
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 3
51320: PUSH
51321: LD_INT 4
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: LIST
51332: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51333: LD_ADDR_VAR 0 26
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 4
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 3
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: LIST
51373: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51374: LD_ADDR_VAR 0 27
51378: PUSH
51379: LD_INT 3
51381: NEG
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 3
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 4
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: LIST
51417: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51418: LD_ADDR_VAR 0 28
51422: PUSH
51423: LD_INT 3
51425: NEG
51426: PUSH
51427: LD_INT 3
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: LD_INT 4
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 4
51449: NEG
51450: PUSH
51451: LD_INT 3
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51464: LD_ADDR_VAR 0 29
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 4
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 4
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 3
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 5
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: LD_INT 5
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 4
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 6
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 6
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: LD_INT 5
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51619: LD_ADDR_VAR 0 30
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 3
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 3
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 4
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 4
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 4
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 5
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 5
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 5
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 6
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 6
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51762: LD_ADDR_VAR 0 31
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: PUSH
51780: LD_INT 3
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 2
51789: PUSH
51790: LD_INT 3
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 4
51799: PUSH
51800: LD_INT 3
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 4
51809: PUSH
51810: LD_INT 4
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 4
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 5
51829: PUSH
51830: LD_INT 4
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 5
51839: PUSH
51840: LD_INT 5
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 4
51849: PUSH
51850: LD_INT 5
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 6
51859: PUSH
51860: LD_INT 5
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 6
51869: PUSH
51870: LD_INT 6
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 5
51879: PUSH
51880: LD_INT 6
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51901: LD_ADDR_VAR 0 32
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 3
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 3
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 4
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 4
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 3
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 5
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 5
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 4
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 6
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 6
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: LD_INT 5
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52044: LD_ADDR_VAR 0 33
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: NEG
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 3
52073: NEG
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 3
52085: NEG
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 4
52096: NEG
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 4
52107: NEG
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 4
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 5
52130: NEG
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 5
52141: NEG
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 5
52153: NEG
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 6
52164: NEG
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 6
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52199: LD_ADDR_VAR 0 34
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: LD_INT 3
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 3
52218: NEG
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 3
52230: NEG
52231: PUSH
52232: LD_INT 3
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 3
52242: NEG
52243: PUSH
52244: LD_INT 4
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 4
52254: NEG
52255: PUSH
52256: LD_INT 3
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 4
52266: NEG
52267: PUSH
52268: LD_INT 4
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 4
52278: NEG
52279: PUSH
52280: LD_INT 5
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 5
52290: NEG
52291: PUSH
52292: LD_INT 4
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 5
52302: NEG
52303: PUSH
52304: LD_INT 5
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 5
52314: NEG
52315: PUSH
52316: LD_INT 6
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 6
52326: NEG
52327: PUSH
52328: LD_INT 5
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 6
52338: NEG
52339: PUSH
52340: LD_INT 6
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52362: LD_ADDR_VAR 0 41
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 2
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 3
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52406: LD_ADDR_VAR 0 42
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52447: LD_ADDR_VAR 0 43
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 3
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: LD_INT 3
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: LIST
52486: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52487: LD_ADDR_VAR 0 44
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: LIST
52527: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52528: LD_ADDR_VAR 0 45
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 3
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52572: LD_ADDR_VAR 0 46
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: LD_INT 2
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 3
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 3
52603: NEG
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52618: LD_ADDR_VAR 0 47
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: LD_INT 3
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 3
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52651: LD_ADDR_VAR 0 48
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52682: LD_ADDR_VAR 0 49
52686: PUSH
52687: LD_INT 3
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52711: LD_ADDR_VAR 0 50
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: LD_INT 3
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: LD_INT 3
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52740: LD_ADDR_VAR 0 51
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52771: LD_ADDR_VAR 0 52
52775: PUSH
52776: LD_INT 3
52778: NEG
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 3
52790: NEG
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52804: LD_ADDR_VAR 0 53
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 3
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: LD_INT 3
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: LIST
52847: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52848: LD_ADDR_VAR 0 54
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52889: LD_ADDR_VAR 0 55
52893: PUSH
52894: LD_INT 3
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: LD_INT 3
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52929: LD_ADDR_VAR 0 56
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: LIST
52969: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52970: LD_ADDR_VAR 0 57
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 3
52988: NEG
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 3
52999: NEG
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53014: LD_ADDR_VAR 0 58
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 3
53033: NEG
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: NEG
53046: PUSH
53047: LD_INT 3
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53060: LD_ADDR_VAR 0 59
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: LIST
53103: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53104: LD_ADDR_VAR 0 60
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 2
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: LIST
53144: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53145: LD_ADDR_VAR 0 61
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53185: LD_ADDR_VAR 0 62
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: LIST
53225: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53226: LD_ADDR_VAR 0 63
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: LIST
53269: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53270: LD_ADDR_VAR 0 64
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 2
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: ST_TO_ADDR
// end ; 2 :
53316: GO 56582
53318: LD_INT 2
53320: DOUBLE
53321: EQUAL
53322: IFTRUE 53326
53324: GO 56581
53326: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53327: LD_ADDR_VAR 0 29
53331: PUSH
53332: LD_INT 4
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 4
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 5
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 5
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 4
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 5
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: LD_INT 3
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 4
53447: PUSH
53448: LD_INT 3
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 4
53457: PUSH
53458: LD_INT 4
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 3
53467: PUSH
53468: LD_INT 4
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: LD_INT 3
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 4
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: LD_INT 4
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 4
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 3
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 4
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: LD_INT 5
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 5
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 4
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: LD_INT 3
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: LD_INT 5
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: LD_INT 3
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 3
53610: NEG
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 3
53621: NEG
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 2
53644: NEG
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 3
53655: NEG
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 4
53666: NEG
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 4
53677: NEG
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 4
53689: NEG
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 4
53712: NEG
53713: PUSH
53714: LD_INT 4
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 4
53724: NEG
53725: PUSH
53726: LD_INT 5
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 3
53736: NEG
53737: PUSH
53738: LD_INT 4
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: LD_INT 3
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 4
53760: NEG
53761: PUSH
53762: LD_INT 3
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 5
53772: NEG
53773: PUSH
53774: LD_INT 4
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 5
53784: NEG
53785: PUSH
53786: LD_INT 5
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 3
53796: NEG
53797: PUSH
53798: LD_INT 5
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 5
53808: NEG
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53865: LD_ADDR_VAR 0 30
53869: PUSH
53870: LD_INT 4
53872: PUSH
53873: LD_INT 4
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 4
53882: PUSH
53883: LD_INT 3
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 5
53892: PUSH
53893: LD_INT 4
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 5
53902: PUSH
53903: LD_INT 5
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 4
53912: PUSH
53913: LD_INT 5
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 3
53922: PUSH
53923: LD_INT 4
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 3
53932: PUSH
53933: LD_INT 3
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 5
53942: PUSH
53943: LD_INT 3
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 3
53952: PUSH
53953: LD_INT 5
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 3
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 4
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 4
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: LD_INT 4
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 4
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 4
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 3
54078: NEG
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 4
54100: NEG
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 5
54111: NEG
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 5
54122: NEG
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 5
54134: NEG
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 3
54146: NEG
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: LD_INT 4
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: NEG
54182: PUSH
54183: LD_INT 3
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 3
54205: NEG
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 4
54217: NEG
54218: PUSH
54219: LD_INT 3
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 4
54229: NEG
54230: PUSH
54231: LD_INT 4
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: LD_INT 4
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 4
54253: NEG
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 4
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 5
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 4
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 3
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 3
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: LD_INT 4
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: LD_INT 5
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 2
54344: PUSH
54345: LD_INT 3
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: NEG
54356: PUSH
54357: LD_INT 5
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54412: LD_ADDR_VAR 0 31
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 4
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 3
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 4
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 5
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 5
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 4
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 3
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: LD_INT 5
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: LD_INT 3
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 3
54512: NEG
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 3
54523: NEG
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 3
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 4
54568: NEG
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 4
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 4
54591: NEG
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 4
54614: NEG
54615: PUSH
54616: LD_INT 4
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 4
54626: NEG
54627: PUSH
54628: LD_INT 5
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: LD_INT 4
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 3
54650: NEG
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 4
54662: NEG
54663: PUSH
54664: LD_INT 3
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 5
54674: NEG
54675: PUSH
54676: LD_INT 4
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 5
54686: NEG
54687: PUSH
54688: LD_INT 5
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 3
54698: NEG
54699: PUSH
54700: LD_INT 5
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 5
54710: NEG
54711: PUSH
54712: LD_INT 3
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 3
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 4
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 3
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: LD_INT 4
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: LD_INT 4
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 4
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 4
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 5
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 5
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 4
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 3
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 3
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: LD_INT 2
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 5
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54962: LD_ADDR_VAR 0 32
54966: PUSH
54967: LD_INT 4
54969: NEG
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 4
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 3
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 3
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 4
55014: NEG
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 5
55025: NEG
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 5
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 5
55048: NEG
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 3
55083: NEG
55084: PUSH
55085: LD_INT 4
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 4
55131: NEG
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 4
55143: NEG
55144: PUSH
55145: LD_INT 4
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: LD_INT 4
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 4
55167: NEG
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 4
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 5
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: LD_INT 4
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: LD_INT 4
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 5
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: LD_INT 3
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: LD_INT 5
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 4
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 4
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 2
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 4
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 4
55374: PUSH
55375: LD_INT 4
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 4
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 5
55394: PUSH
55395: LD_INT 4
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 5
55404: PUSH
55405: LD_INT 5
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 4
55414: PUSH
55415: LD_INT 5
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 3
55424: PUSH
55425: LD_INT 4
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 5
55444: PUSH
55445: LD_INT 3
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: LD_INT 5
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55509: LD_ADDR_VAR 0 33
55513: PUSH
55514: LD_INT 4
55516: NEG
55517: PUSH
55518: LD_INT 4
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 4
55528: NEG
55529: PUSH
55530: LD_INT 5
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 3
55540: NEG
55541: PUSH
55542: LD_INT 4
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 3
55552: NEG
55553: PUSH
55554: LD_INT 3
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 4
55564: NEG
55565: PUSH
55566: LD_INT 3
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 5
55576: NEG
55577: PUSH
55578: LD_INT 4
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 5
55588: NEG
55589: PUSH
55590: LD_INT 5
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 3
55600: NEG
55601: PUSH
55602: LD_INT 5
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 5
55612: NEG
55613: PUSH
55614: LD_INT 3
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 4
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 3
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 3
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 4
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: LD_INT 4
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 4
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 4
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 5
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 5
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 4
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 3
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 5
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 3
55819: PUSH
55820: LD_INT 3
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 3
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 4
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 4
55849: PUSH
55850: LD_INT 4
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: LD_INT 4
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 4
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: LD_INT 4
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 4
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 3
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: LD_INT 4
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 5
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 5
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 4
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: LD_INT 3
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: LD_INT 5
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: LD_INT 3
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56047: LD_ADDR_VAR 0 34
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 4
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 5
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: LD_INT 4
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 3
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 4
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 5
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: LD_INT 3
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: LD_INT 5
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 3
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 4
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 4
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 3
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 4
56249: PUSH
56250: LD_INT 4
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 4
56259: PUSH
56260: LD_INT 3
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 5
56269: PUSH
56270: LD_INT 4
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 5
56279: PUSH
56280: LD_INT 5
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 4
56289: PUSH
56290: LD_INT 5
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: LD_INT 4
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 3
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 5
56319: PUSH
56320: LD_INT 3
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 3
56329: PUSH
56330: LD_INT 5
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 3
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 3
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 4
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 4
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 3
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: LD_INT 4
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 4
56432: NEG
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 4
56443: NEG
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 3
56455: NEG
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 3
56466: NEG
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 4
56477: NEG
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 5
56488: NEG
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 5
56499: NEG
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 5
56511: NEG
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: ST_TO_ADDR
// end ; end ;
56579: GO 56582
56581: POP
// case btype of b_depot , b_warehouse :
56582: LD_VAR 0 1
56586: PUSH
56587: LD_INT 0
56589: DOUBLE
56590: EQUAL
56591: IFTRUE 56601
56593: LD_INT 1
56595: DOUBLE
56596: EQUAL
56597: IFTRUE 56601
56599: GO 56802
56601: POP
// case nation of nation_american :
56602: LD_VAR 0 5
56606: PUSH
56607: LD_INT 1
56609: DOUBLE
56610: EQUAL
56611: IFTRUE 56615
56613: GO 56671
56615: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56616: LD_ADDR_VAR 0 9
56620: PUSH
56621: LD_VAR 0 11
56625: PUSH
56626: LD_VAR 0 12
56630: PUSH
56631: LD_VAR 0 13
56635: PUSH
56636: LD_VAR 0 14
56640: PUSH
56641: LD_VAR 0 15
56645: PUSH
56646: LD_VAR 0 16
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: PUSH
56659: LD_VAR 0 4
56663: PUSH
56664: LD_INT 1
56666: PLUS
56667: ARRAY
56668: ST_TO_ADDR
56669: GO 56800
56671: LD_INT 2
56673: DOUBLE
56674: EQUAL
56675: IFTRUE 56679
56677: GO 56735
56679: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56680: LD_ADDR_VAR 0 9
56684: PUSH
56685: LD_VAR 0 17
56689: PUSH
56690: LD_VAR 0 18
56694: PUSH
56695: LD_VAR 0 19
56699: PUSH
56700: LD_VAR 0 20
56704: PUSH
56705: LD_VAR 0 21
56709: PUSH
56710: LD_VAR 0 22
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: PUSH
56723: LD_VAR 0 4
56727: PUSH
56728: LD_INT 1
56730: PLUS
56731: ARRAY
56732: ST_TO_ADDR
56733: GO 56800
56735: LD_INT 3
56737: DOUBLE
56738: EQUAL
56739: IFTRUE 56743
56741: GO 56799
56743: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56744: LD_ADDR_VAR 0 9
56748: PUSH
56749: LD_VAR 0 23
56753: PUSH
56754: LD_VAR 0 24
56758: PUSH
56759: LD_VAR 0 25
56763: PUSH
56764: LD_VAR 0 26
56768: PUSH
56769: LD_VAR 0 27
56773: PUSH
56774: LD_VAR 0 28
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: PUSH
56787: LD_VAR 0 4
56791: PUSH
56792: LD_INT 1
56794: PLUS
56795: ARRAY
56796: ST_TO_ADDR
56797: GO 56800
56799: POP
56800: GO 57355
56802: LD_INT 2
56804: DOUBLE
56805: EQUAL
56806: IFTRUE 56816
56808: LD_INT 3
56810: DOUBLE
56811: EQUAL
56812: IFTRUE 56816
56814: GO 56872
56816: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56817: LD_ADDR_VAR 0 9
56821: PUSH
56822: LD_VAR 0 29
56826: PUSH
56827: LD_VAR 0 30
56831: PUSH
56832: LD_VAR 0 31
56836: PUSH
56837: LD_VAR 0 32
56841: PUSH
56842: LD_VAR 0 33
56846: PUSH
56847: LD_VAR 0 34
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: PUSH
56860: LD_VAR 0 4
56864: PUSH
56865: LD_INT 1
56867: PLUS
56868: ARRAY
56869: ST_TO_ADDR
56870: GO 57355
56872: LD_INT 16
56874: DOUBLE
56875: EQUAL
56876: IFTRUE 56934
56878: LD_INT 17
56880: DOUBLE
56881: EQUAL
56882: IFTRUE 56934
56884: LD_INT 18
56886: DOUBLE
56887: EQUAL
56888: IFTRUE 56934
56890: LD_INT 19
56892: DOUBLE
56893: EQUAL
56894: IFTRUE 56934
56896: LD_INT 22
56898: DOUBLE
56899: EQUAL
56900: IFTRUE 56934
56902: LD_INT 20
56904: DOUBLE
56905: EQUAL
56906: IFTRUE 56934
56908: LD_INT 21
56910: DOUBLE
56911: EQUAL
56912: IFTRUE 56934
56914: LD_INT 23
56916: DOUBLE
56917: EQUAL
56918: IFTRUE 56934
56920: LD_INT 24
56922: DOUBLE
56923: EQUAL
56924: IFTRUE 56934
56926: LD_INT 25
56928: DOUBLE
56929: EQUAL
56930: IFTRUE 56934
56932: GO 56990
56934: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56935: LD_ADDR_VAR 0 9
56939: PUSH
56940: LD_VAR 0 35
56944: PUSH
56945: LD_VAR 0 36
56949: PUSH
56950: LD_VAR 0 37
56954: PUSH
56955: LD_VAR 0 38
56959: PUSH
56960: LD_VAR 0 39
56964: PUSH
56965: LD_VAR 0 40
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: PUSH
56978: LD_VAR 0 4
56982: PUSH
56983: LD_INT 1
56985: PLUS
56986: ARRAY
56987: ST_TO_ADDR
56988: GO 57355
56990: LD_INT 6
56992: DOUBLE
56993: EQUAL
56994: IFTRUE 57046
56996: LD_INT 7
56998: DOUBLE
56999: EQUAL
57000: IFTRUE 57046
57002: LD_INT 8
57004: DOUBLE
57005: EQUAL
57006: IFTRUE 57046
57008: LD_INT 13
57010: DOUBLE
57011: EQUAL
57012: IFTRUE 57046
57014: LD_INT 12
57016: DOUBLE
57017: EQUAL
57018: IFTRUE 57046
57020: LD_INT 15
57022: DOUBLE
57023: EQUAL
57024: IFTRUE 57046
57026: LD_INT 11
57028: DOUBLE
57029: EQUAL
57030: IFTRUE 57046
57032: LD_INT 14
57034: DOUBLE
57035: EQUAL
57036: IFTRUE 57046
57038: LD_INT 10
57040: DOUBLE
57041: EQUAL
57042: IFTRUE 57046
57044: GO 57102
57046: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57047: LD_ADDR_VAR 0 9
57051: PUSH
57052: LD_VAR 0 41
57056: PUSH
57057: LD_VAR 0 42
57061: PUSH
57062: LD_VAR 0 43
57066: PUSH
57067: LD_VAR 0 44
57071: PUSH
57072: LD_VAR 0 45
57076: PUSH
57077: LD_VAR 0 46
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: PUSH
57090: LD_VAR 0 4
57094: PUSH
57095: LD_INT 1
57097: PLUS
57098: ARRAY
57099: ST_TO_ADDR
57100: GO 57355
57102: LD_INT 36
57104: DOUBLE
57105: EQUAL
57106: IFTRUE 57110
57108: GO 57166
57110: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57111: LD_ADDR_VAR 0 9
57115: PUSH
57116: LD_VAR 0 47
57120: PUSH
57121: LD_VAR 0 48
57125: PUSH
57126: LD_VAR 0 49
57130: PUSH
57131: LD_VAR 0 50
57135: PUSH
57136: LD_VAR 0 51
57140: PUSH
57141: LD_VAR 0 52
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: PUSH
57154: LD_VAR 0 4
57158: PUSH
57159: LD_INT 1
57161: PLUS
57162: ARRAY
57163: ST_TO_ADDR
57164: GO 57355
57166: LD_INT 4
57168: DOUBLE
57169: EQUAL
57170: IFTRUE 57192
57172: LD_INT 5
57174: DOUBLE
57175: EQUAL
57176: IFTRUE 57192
57178: LD_INT 34
57180: DOUBLE
57181: EQUAL
57182: IFTRUE 57192
57184: LD_INT 37
57186: DOUBLE
57187: EQUAL
57188: IFTRUE 57192
57190: GO 57248
57192: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57193: LD_ADDR_VAR 0 9
57197: PUSH
57198: LD_VAR 0 53
57202: PUSH
57203: LD_VAR 0 54
57207: PUSH
57208: LD_VAR 0 55
57212: PUSH
57213: LD_VAR 0 56
57217: PUSH
57218: LD_VAR 0 57
57222: PUSH
57223: LD_VAR 0 58
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: PUSH
57236: LD_VAR 0 4
57240: PUSH
57241: LD_INT 1
57243: PLUS
57244: ARRAY
57245: ST_TO_ADDR
57246: GO 57355
57248: LD_INT 31
57250: DOUBLE
57251: EQUAL
57252: IFTRUE 57298
57254: LD_INT 32
57256: DOUBLE
57257: EQUAL
57258: IFTRUE 57298
57260: LD_INT 33
57262: DOUBLE
57263: EQUAL
57264: IFTRUE 57298
57266: LD_INT 27
57268: DOUBLE
57269: EQUAL
57270: IFTRUE 57298
57272: LD_INT 26
57274: DOUBLE
57275: EQUAL
57276: IFTRUE 57298
57278: LD_INT 28
57280: DOUBLE
57281: EQUAL
57282: IFTRUE 57298
57284: LD_INT 29
57286: DOUBLE
57287: EQUAL
57288: IFTRUE 57298
57290: LD_INT 30
57292: DOUBLE
57293: EQUAL
57294: IFTRUE 57298
57296: GO 57354
57298: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57299: LD_ADDR_VAR 0 9
57303: PUSH
57304: LD_VAR 0 59
57308: PUSH
57309: LD_VAR 0 60
57313: PUSH
57314: LD_VAR 0 61
57318: PUSH
57319: LD_VAR 0 62
57323: PUSH
57324: LD_VAR 0 63
57328: PUSH
57329: LD_VAR 0 64
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: PUSH
57342: LD_VAR 0 4
57346: PUSH
57347: LD_INT 1
57349: PLUS
57350: ARRAY
57351: ST_TO_ADDR
57352: GO 57355
57354: POP
// temp_list2 = [ ] ;
57355: LD_ADDR_VAR 0 10
57359: PUSH
57360: EMPTY
57361: ST_TO_ADDR
// for i in temp_list do
57362: LD_ADDR_VAR 0 8
57366: PUSH
57367: LD_VAR 0 9
57371: PUSH
57372: FOR_IN
57373: IFFALSE 57425
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57375: LD_ADDR_VAR 0 10
57379: PUSH
57380: LD_VAR 0 10
57384: PUSH
57385: LD_VAR 0 8
57389: PUSH
57390: LD_INT 1
57392: ARRAY
57393: PUSH
57394: LD_VAR 0 2
57398: PLUS
57399: PUSH
57400: LD_VAR 0 8
57404: PUSH
57405: LD_INT 2
57407: ARRAY
57408: PUSH
57409: LD_VAR 0 3
57413: PLUS
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: EMPTY
57420: LIST
57421: ADD
57422: ST_TO_ADDR
57423: GO 57372
57425: POP
57426: POP
// result = temp_list2 ;
57427: LD_ADDR_VAR 0 7
57431: PUSH
57432: LD_VAR 0 10
57436: ST_TO_ADDR
// end ;
57437: LD_VAR 0 7
57441: RET
// export function EnemyInRange ( unit , dist ) ; begin
57442: LD_INT 0
57444: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57445: LD_ADDR_VAR 0 3
57449: PUSH
57450: LD_VAR 0 1
57454: PPUSH
57455: CALL_OW 255
57459: PPUSH
57460: LD_VAR 0 1
57464: PPUSH
57465: CALL_OW 250
57469: PPUSH
57470: LD_VAR 0 1
57474: PPUSH
57475: CALL_OW 251
57479: PPUSH
57480: LD_VAR 0 2
57484: PPUSH
57485: CALL 30838 0 4
57489: PUSH
57490: LD_INT 4
57492: ARRAY
57493: ST_TO_ADDR
// end ;
57494: LD_VAR 0 3
57498: RET
// export function PlayerSeeMe ( unit ) ; begin
57499: LD_INT 0
57501: PPUSH
// result := See ( your_side , unit ) ;
57502: LD_ADDR_VAR 0 2
57506: PUSH
57507: LD_OWVAR 2
57511: PPUSH
57512: LD_VAR 0 1
57516: PPUSH
57517: CALL_OW 292
57521: ST_TO_ADDR
// end ;
57522: LD_VAR 0 2
57526: RET
// export function ReverseDir ( unit ) ; begin
57527: LD_INT 0
57529: PPUSH
// if not unit then
57530: LD_VAR 0 1
57534: NOT
57535: IFFALSE 57539
// exit ;
57537: GO 57562
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57539: LD_ADDR_VAR 0 2
57543: PUSH
57544: LD_VAR 0 1
57548: PPUSH
57549: CALL_OW 254
57553: PUSH
57554: LD_INT 3
57556: PLUS
57557: PUSH
57558: LD_INT 6
57560: MOD
57561: ST_TO_ADDR
// end ;
57562: LD_VAR 0 2
57566: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57567: LD_INT 0
57569: PPUSH
57570: PPUSH
57571: PPUSH
57572: PPUSH
57573: PPUSH
// if not hexes then
57574: LD_VAR 0 2
57578: NOT
57579: IFFALSE 57583
// exit ;
57581: GO 57731
// dist := 9999 ;
57583: LD_ADDR_VAR 0 5
57587: PUSH
57588: LD_INT 9999
57590: ST_TO_ADDR
// for i = 1 to hexes do
57591: LD_ADDR_VAR 0 4
57595: PUSH
57596: DOUBLE
57597: LD_INT 1
57599: DEC
57600: ST_TO_ADDR
57601: LD_VAR 0 2
57605: PUSH
57606: FOR_TO
57607: IFFALSE 57719
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57609: LD_VAR 0 1
57613: PPUSH
57614: LD_VAR 0 2
57618: PUSH
57619: LD_VAR 0 4
57623: ARRAY
57624: PUSH
57625: LD_INT 1
57627: ARRAY
57628: PPUSH
57629: LD_VAR 0 2
57633: PUSH
57634: LD_VAR 0 4
57638: ARRAY
57639: PUSH
57640: LD_INT 2
57642: ARRAY
57643: PPUSH
57644: CALL_OW 297
57648: PUSH
57649: LD_VAR 0 5
57653: LESS
57654: IFFALSE 57717
// begin hex := hexes [ i ] ;
57656: LD_ADDR_VAR 0 7
57660: PUSH
57661: LD_VAR 0 2
57665: PUSH
57666: LD_VAR 0 4
57670: ARRAY
57671: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57672: LD_ADDR_VAR 0 5
57676: PUSH
57677: LD_VAR 0 1
57681: PPUSH
57682: LD_VAR 0 2
57686: PUSH
57687: LD_VAR 0 4
57691: ARRAY
57692: PUSH
57693: LD_INT 1
57695: ARRAY
57696: PPUSH
57697: LD_VAR 0 2
57701: PUSH
57702: LD_VAR 0 4
57706: ARRAY
57707: PUSH
57708: LD_INT 2
57710: ARRAY
57711: PPUSH
57712: CALL_OW 297
57716: ST_TO_ADDR
// end ; end ;
57717: GO 57606
57719: POP
57720: POP
// result := hex ;
57721: LD_ADDR_VAR 0 3
57725: PUSH
57726: LD_VAR 0 7
57730: ST_TO_ADDR
// end ;
57731: LD_VAR 0 3
57735: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57736: LD_INT 0
57738: PPUSH
57739: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57740: LD_VAR 0 1
57744: NOT
57745: PUSH
57746: LD_VAR 0 1
57750: PUSH
57751: LD_INT 21
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 23
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PPUSH
57775: CALL_OW 69
57779: IN
57780: NOT
57781: OR
57782: IFFALSE 57786
// exit ;
57784: GO 57833
// for i = 1 to 3 do
57786: LD_ADDR_VAR 0 3
57790: PUSH
57791: DOUBLE
57792: LD_INT 1
57794: DEC
57795: ST_TO_ADDR
57796: LD_INT 3
57798: PUSH
57799: FOR_TO
57800: IFFALSE 57831
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57802: LD_VAR 0 1
57806: PPUSH
57807: CALL_OW 250
57811: PPUSH
57812: LD_VAR 0 1
57816: PPUSH
57817: CALL_OW 251
57821: PPUSH
57822: LD_INT 1
57824: PPUSH
57825: CALL_OW 453
57829: GO 57799
57831: POP
57832: POP
// end ;
57833: LD_VAR 0 2
57837: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57838: LD_INT 0
57840: PPUSH
57841: PPUSH
57842: PPUSH
57843: PPUSH
57844: PPUSH
57845: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57846: LD_VAR 0 1
57850: NOT
57851: PUSH
57852: LD_VAR 0 2
57856: NOT
57857: OR
57858: PUSH
57859: LD_VAR 0 1
57863: PPUSH
57864: CALL_OW 314
57868: OR
57869: IFFALSE 57873
// exit ;
57871: GO 58314
// x := GetX ( enemy_unit ) ;
57873: LD_ADDR_VAR 0 7
57877: PUSH
57878: LD_VAR 0 2
57882: PPUSH
57883: CALL_OW 250
57887: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57888: LD_ADDR_VAR 0 8
57892: PUSH
57893: LD_VAR 0 2
57897: PPUSH
57898: CALL_OW 251
57902: ST_TO_ADDR
// if not x or not y then
57903: LD_VAR 0 7
57907: NOT
57908: PUSH
57909: LD_VAR 0 8
57913: NOT
57914: OR
57915: IFFALSE 57919
// exit ;
57917: GO 58314
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57919: LD_ADDR_VAR 0 6
57923: PUSH
57924: LD_VAR 0 7
57928: PPUSH
57929: LD_INT 0
57931: PPUSH
57932: LD_INT 4
57934: PPUSH
57935: CALL_OW 272
57939: PUSH
57940: LD_VAR 0 8
57944: PPUSH
57945: LD_INT 0
57947: PPUSH
57948: LD_INT 4
57950: PPUSH
57951: CALL_OW 273
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_VAR 0 7
57964: PPUSH
57965: LD_INT 1
57967: PPUSH
57968: LD_INT 4
57970: PPUSH
57971: CALL_OW 272
57975: PUSH
57976: LD_VAR 0 8
57980: PPUSH
57981: LD_INT 1
57983: PPUSH
57984: LD_INT 4
57986: PPUSH
57987: CALL_OW 273
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_VAR 0 7
58000: PPUSH
58001: LD_INT 2
58003: PPUSH
58004: LD_INT 4
58006: PPUSH
58007: CALL_OW 272
58011: PUSH
58012: LD_VAR 0 8
58016: PPUSH
58017: LD_INT 2
58019: PPUSH
58020: LD_INT 4
58022: PPUSH
58023: CALL_OW 273
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_VAR 0 7
58036: PPUSH
58037: LD_INT 3
58039: PPUSH
58040: LD_INT 4
58042: PPUSH
58043: CALL_OW 272
58047: PUSH
58048: LD_VAR 0 8
58052: PPUSH
58053: LD_INT 3
58055: PPUSH
58056: LD_INT 4
58058: PPUSH
58059: CALL_OW 273
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_VAR 0 7
58072: PPUSH
58073: LD_INT 4
58075: PPUSH
58076: LD_INT 4
58078: PPUSH
58079: CALL_OW 272
58083: PUSH
58084: LD_VAR 0 8
58088: PPUSH
58089: LD_INT 4
58091: PPUSH
58092: LD_INT 4
58094: PPUSH
58095: CALL_OW 273
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_VAR 0 7
58108: PPUSH
58109: LD_INT 5
58111: PPUSH
58112: LD_INT 4
58114: PPUSH
58115: CALL_OW 272
58119: PUSH
58120: LD_VAR 0 8
58124: PPUSH
58125: LD_INT 5
58127: PPUSH
58128: LD_INT 4
58130: PPUSH
58131: CALL_OW 273
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: ST_TO_ADDR
// for i = tmp downto 1 do
58148: LD_ADDR_VAR 0 4
58152: PUSH
58153: DOUBLE
58154: LD_VAR 0 6
58158: INC
58159: ST_TO_ADDR
58160: LD_INT 1
58162: PUSH
58163: FOR_DOWNTO
58164: IFFALSE 58265
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58166: LD_VAR 0 6
58170: PUSH
58171: LD_VAR 0 4
58175: ARRAY
58176: PUSH
58177: LD_INT 1
58179: ARRAY
58180: PPUSH
58181: LD_VAR 0 6
58185: PUSH
58186: LD_VAR 0 4
58190: ARRAY
58191: PUSH
58192: LD_INT 2
58194: ARRAY
58195: PPUSH
58196: CALL_OW 488
58200: NOT
58201: PUSH
58202: LD_VAR 0 6
58206: PUSH
58207: LD_VAR 0 4
58211: ARRAY
58212: PUSH
58213: LD_INT 1
58215: ARRAY
58216: PPUSH
58217: LD_VAR 0 6
58221: PUSH
58222: LD_VAR 0 4
58226: ARRAY
58227: PUSH
58228: LD_INT 2
58230: ARRAY
58231: PPUSH
58232: CALL_OW 428
58236: PUSH
58237: LD_INT 0
58239: NONEQUAL
58240: OR
58241: IFFALSE 58263
// tmp := Delete ( tmp , i ) ;
58243: LD_ADDR_VAR 0 6
58247: PUSH
58248: LD_VAR 0 6
58252: PPUSH
58253: LD_VAR 0 4
58257: PPUSH
58258: CALL_OW 3
58262: ST_TO_ADDR
58263: GO 58163
58265: POP
58266: POP
// j := GetClosestHex ( unit , tmp ) ;
58267: LD_ADDR_VAR 0 5
58271: PUSH
58272: LD_VAR 0 1
58276: PPUSH
58277: LD_VAR 0 6
58281: PPUSH
58282: CALL 57567 0 2
58286: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58287: LD_VAR 0 1
58291: PPUSH
58292: LD_VAR 0 5
58296: PUSH
58297: LD_INT 1
58299: ARRAY
58300: PPUSH
58301: LD_VAR 0 5
58305: PUSH
58306: LD_INT 2
58308: ARRAY
58309: PPUSH
58310: CALL_OW 111
// end ;
58314: LD_VAR 0 3
58318: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58319: LD_INT 0
58321: PPUSH
58322: PPUSH
58323: PPUSH
// uc_side = 0 ;
58324: LD_ADDR_OWVAR 20
58328: PUSH
58329: LD_INT 0
58331: ST_TO_ADDR
// uc_nation = 0 ;
58332: LD_ADDR_OWVAR 21
58336: PUSH
58337: LD_INT 0
58339: ST_TO_ADDR
// InitHc_All ( ) ;
58340: CALL_OW 584
// InitVc ;
58344: CALL_OW 20
// if mastodonts then
58348: LD_VAR 0 6
58352: IFFALSE 58419
// for i = 1 to mastodonts do
58354: LD_ADDR_VAR 0 11
58358: PUSH
58359: DOUBLE
58360: LD_INT 1
58362: DEC
58363: ST_TO_ADDR
58364: LD_VAR 0 6
58368: PUSH
58369: FOR_TO
58370: IFFALSE 58417
// begin vc_chassis := 31 ;
58372: LD_ADDR_OWVAR 37
58376: PUSH
58377: LD_INT 31
58379: ST_TO_ADDR
// vc_control := control_rider ;
58380: LD_ADDR_OWVAR 38
58384: PUSH
58385: LD_INT 4
58387: ST_TO_ADDR
// animal := CreateVehicle ;
58388: LD_ADDR_VAR 0 12
58392: PUSH
58393: CALL_OW 45
58397: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58398: LD_VAR 0 12
58402: PPUSH
58403: LD_VAR 0 8
58407: PPUSH
58408: LD_INT 0
58410: PPUSH
58411: CALL 60554 0 3
// end ;
58415: GO 58369
58417: POP
58418: POP
// if horses then
58419: LD_VAR 0 5
58423: IFFALSE 58490
// for i = 1 to horses do
58425: LD_ADDR_VAR 0 11
58429: PUSH
58430: DOUBLE
58431: LD_INT 1
58433: DEC
58434: ST_TO_ADDR
58435: LD_VAR 0 5
58439: PUSH
58440: FOR_TO
58441: IFFALSE 58488
// begin hc_class := 21 ;
58443: LD_ADDR_OWVAR 28
58447: PUSH
58448: LD_INT 21
58450: ST_TO_ADDR
// hc_gallery :=  ;
58451: LD_ADDR_OWVAR 33
58455: PUSH
58456: LD_STRING 
58458: ST_TO_ADDR
// animal := CreateHuman ;
58459: LD_ADDR_VAR 0 12
58463: PUSH
58464: CALL_OW 44
58468: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58469: LD_VAR 0 12
58473: PPUSH
58474: LD_VAR 0 8
58478: PPUSH
58479: LD_INT 0
58481: PPUSH
58482: CALL 60554 0 3
// end ;
58486: GO 58440
58488: POP
58489: POP
// if birds then
58490: LD_VAR 0 1
58494: IFFALSE 58561
// for i = 1 to birds do
58496: LD_ADDR_VAR 0 11
58500: PUSH
58501: DOUBLE
58502: LD_INT 1
58504: DEC
58505: ST_TO_ADDR
58506: LD_VAR 0 1
58510: PUSH
58511: FOR_TO
58512: IFFALSE 58559
// begin hc_class = 18 ;
58514: LD_ADDR_OWVAR 28
58518: PUSH
58519: LD_INT 18
58521: ST_TO_ADDR
// hc_gallery =  ;
58522: LD_ADDR_OWVAR 33
58526: PUSH
58527: LD_STRING 
58529: ST_TO_ADDR
// animal := CreateHuman ;
58530: LD_ADDR_VAR 0 12
58534: PUSH
58535: CALL_OW 44
58539: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58540: LD_VAR 0 12
58544: PPUSH
58545: LD_VAR 0 8
58549: PPUSH
58550: LD_INT 0
58552: PPUSH
58553: CALL 60554 0 3
// end ;
58557: GO 58511
58559: POP
58560: POP
// if tigers then
58561: LD_VAR 0 2
58565: IFFALSE 58649
// for i = 1 to tigers do
58567: LD_ADDR_VAR 0 11
58571: PUSH
58572: DOUBLE
58573: LD_INT 1
58575: DEC
58576: ST_TO_ADDR
58577: LD_VAR 0 2
58581: PUSH
58582: FOR_TO
58583: IFFALSE 58647
// begin hc_class = class_tiger ;
58585: LD_ADDR_OWVAR 28
58589: PUSH
58590: LD_INT 14
58592: ST_TO_ADDR
// hc_gallery =  ;
58593: LD_ADDR_OWVAR 33
58597: PUSH
58598: LD_STRING 
58600: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58601: LD_ADDR_OWVAR 35
58605: PUSH
58606: LD_INT 7
58608: NEG
58609: PPUSH
58610: LD_INT 7
58612: PPUSH
58613: CALL_OW 12
58617: ST_TO_ADDR
// animal := CreateHuman ;
58618: LD_ADDR_VAR 0 12
58622: PUSH
58623: CALL_OW 44
58627: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58628: LD_VAR 0 12
58632: PPUSH
58633: LD_VAR 0 8
58637: PPUSH
58638: LD_INT 0
58640: PPUSH
58641: CALL 60554 0 3
// end ;
58645: GO 58582
58647: POP
58648: POP
// if apemans then
58649: LD_VAR 0 3
58653: IFFALSE 58776
// for i = 1 to apemans do
58655: LD_ADDR_VAR 0 11
58659: PUSH
58660: DOUBLE
58661: LD_INT 1
58663: DEC
58664: ST_TO_ADDR
58665: LD_VAR 0 3
58669: PUSH
58670: FOR_TO
58671: IFFALSE 58774
// begin hc_class = class_apeman ;
58673: LD_ADDR_OWVAR 28
58677: PUSH
58678: LD_INT 12
58680: ST_TO_ADDR
// hc_gallery =  ;
58681: LD_ADDR_OWVAR 33
58685: PUSH
58686: LD_STRING 
58688: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58689: LD_ADDR_OWVAR 35
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PPUSH
58698: LD_INT 2
58700: PPUSH
58701: CALL_OW 12
58705: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58706: LD_ADDR_OWVAR 31
58710: PUSH
58711: LD_INT 1
58713: PPUSH
58714: LD_INT 3
58716: PPUSH
58717: CALL_OW 12
58721: PUSH
58722: LD_INT 1
58724: PPUSH
58725: LD_INT 3
58727: PPUSH
58728: CALL_OW 12
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: ST_TO_ADDR
// animal := CreateHuman ;
58745: LD_ADDR_VAR 0 12
58749: PUSH
58750: CALL_OW 44
58754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58755: LD_VAR 0 12
58759: PPUSH
58760: LD_VAR 0 8
58764: PPUSH
58765: LD_INT 0
58767: PPUSH
58768: CALL 60554 0 3
// end ;
58772: GO 58670
58774: POP
58775: POP
// if enchidnas then
58776: LD_VAR 0 4
58780: IFFALSE 58847
// for i = 1 to enchidnas do
58782: LD_ADDR_VAR 0 11
58786: PUSH
58787: DOUBLE
58788: LD_INT 1
58790: DEC
58791: ST_TO_ADDR
58792: LD_VAR 0 4
58796: PUSH
58797: FOR_TO
58798: IFFALSE 58845
// begin hc_class = 13 ;
58800: LD_ADDR_OWVAR 28
58804: PUSH
58805: LD_INT 13
58807: ST_TO_ADDR
// hc_gallery =  ;
58808: LD_ADDR_OWVAR 33
58812: PUSH
58813: LD_STRING 
58815: ST_TO_ADDR
// animal := CreateHuman ;
58816: LD_ADDR_VAR 0 12
58820: PUSH
58821: CALL_OW 44
58825: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58826: LD_VAR 0 12
58830: PPUSH
58831: LD_VAR 0 8
58835: PPUSH
58836: LD_INT 0
58838: PPUSH
58839: CALL 60554 0 3
// end ;
58843: GO 58797
58845: POP
58846: POP
// if fishes then
58847: LD_VAR 0 7
58851: IFFALSE 58918
// for i = 1 to fishes do
58853: LD_ADDR_VAR 0 11
58857: PUSH
58858: DOUBLE
58859: LD_INT 1
58861: DEC
58862: ST_TO_ADDR
58863: LD_VAR 0 7
58867: PUSH
58868: FOR_TO
58869: IFFALSE 58916
// begin hc_class = 20 ;
58871: LD_ADDR_OWVAR 28
58875: PUSH
58876: LD_INT 20
58878: ST_TO_ADDR
// hc_gallery =  ;
58879: LD_ADDR_OWVAR 33
58883: PUSH
58884: LD_STRING 
58886: ST_TO_ADDR
// animal := CreateHuman ;
58887: LD_ADDR_VAR 0 12
58891: PUSH
58892: CALL_OW 44
58896: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58897: LD_VAR 0 12
58901: PPUSH
58902: LD_VAR 0 9
58906: PPUSH
58907: LD_INT 0
58909: PPUSH
58910: CALL 60554 0 3
// end ;
58914: GO 58868
58916: POP
58917: POP
// end ;
58918: LD_VAR 0 10
58922: RET
// export function WantHeal ( sci , unit ) ; begin
58923: LD_INT 0
58925: PPUSH
// if GetTaskList ( sci ) > 0 then
58926: LD_VAR 0 1
58930: PPUSH
58931: CALL_OW 437
58935: PUSH
58936: LD_INT 0
58938: GREATER
58939: IFFALSE 59009
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58941: LD_VAR 0 1
58945: PPUSH
58946: CALL_OW 437
58950: PUSH
58951: LD_INT 1
58953: ARRAY
58954: PUSH
58955: LD_INT 1
58957: ARRAY
58958: PUSH
58959: LD_STRING l
58961: EQUAL
58962: PUSH
58963: LD_VAR 0 1
58967: PPUSH
58968: CALL_OW 437
58972: PUSH
58973: LD_INT 1
58975: ARRAY
58976: PUSH
58977: LD_INT 4
58979: ARRAY
58980: PUSH
58981: LD_VAR 0 2
58985: EQUAL
58986: AND
58987: IFFALSE 58999
// result := true else
58989: LD_ADDR_VAR 0 3
58993: PUSH
58994: LD_INT 1
58996: ST_TO_ADDR
58997: GO 59007
// result := false ;
58999: LD_ADDR_VAR 0 3
59003: PUSH
59004: LD_INT 0
59006: ST_TO_ADDR
// end else
59007: GO 59017
// result := false ;
59009: LD_ADDR_VAR 0 3
59013: PUSH
59014: LD_INT 0
59016: ST_TO_ADDR
// end ;
59017: LD_VAR 0 3
59021: RET
// export function HealTarget ( sci ) ; begin
59022: LD_INT 0
59024: PPUSH
// if not sci then
59025: LD_VAR 0 1
59029: NOT
59030: IFFALSE 59034
// exit ;
59032: GO 59099
// result := 0 ;
59034: LD_ADDR_VAR 0 2
59038: PUSH
59039: LD_INT 0
59041: ST_TO_ADDR
// if GetTaskList ( sci ) then
59042: LD_VAR 0 1
59046: PPUSH
59047: CALL_OW 437
59051: IFFALSE 59099
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59053: LD_VAR 0 1
59057: PPUSH
59058: CALL_OW 437
59062: PUSH
59063: LD_INT 1
59065: ARRAY
59066: PUSH
59067: LD_INT 1
59069: ARRAY
59070: PUSH
59071: LD_STRING l
59073: EQUAL
59074: IFFALSE 59099
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59076: LD_ADDR_VAR 0 2
59080: PUSH
59081: LD_VAR 0 1
59085: PPUSH
59086: CALL_OW 437
59090: PUSH
59091: LD_INT 1
59093: ARRAY
59094: PUSH
59095: LD_INT 4
59097: ARRAY
59098: ST_TO_ADDR
// end ;
59099: LD_VAR 0 2
59103: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59104: LD_INT 0
59106: PPUSH
59107: PPUSH
59108: PPUSH
59109: PPUSH
// if not base_units then
59110: LD_VAR 0 1
59114: NOT
59115: IFFALSE 59119
// exit ;
59117: GO 59206
// result := false ;
59119: LD_ADDR_VAR 0 2
59123: PUSH
59124: LD_INT 0
59126: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59127: LD_ADDR_VAR 0 5
59131: PUSH
59132: LD_VAR 0 1
59136: PPUSH
59137: LD_INT 21
59139: PUSH
59140: LD_INT 3
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PPUSH
59147: CALL_OW 72
59151: ST_TO_ADDR
// if not tmp then
59152: LD_VAR 0 5
59156: NOT
59157: IFFALSE 59161
// exit ;
59159: GO 59206
// for i in tmp do
59161: LD_ADDR_VAR 0 3
59165: PUSH
59166: LD_VAR 0 5
59170: PUSH
59171: FOR_IN
59172: IFFALSE 59204
// begin result := EnemyInRange ( i , 22 ) ;
59174: LD_ADDR_VAR 0 2
59178: PUSH
59179: LD_VAR 0 3
59183: PPUSH
59184: LD_INT 22
59186: PPUSH
59187: CALL 57442 0 2
59191: ST_TO_ADDR
// if result then
59192: LD_VAR 0 2
59196: IFFALSE 59202
// exit ;
59198: POP
59199: POP
59200: GO 59206
// end ;
59202: GO 59171
59204: POP
59205: POP
// end ;
59206: LD_VAR 0 2
59210: RET
// export function FilterByTag ( units , tag ) ; begin
59211: LD_INT 0
59213: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59214: LD_ADDR_VAR 0 3
59218: PUSH
59219: LD_VAR 0 1
59223: PPUSH
59224: LD_INT 120
59226: PUSH
59227: LD_VAR 0 2
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PPUSH
59236: CALL_OW 72
59240: ST_TO_ADDR
// end ;
59241: LD_VAR 0 3
59245: RET
// export function IsDriver ( un ) ; begin
59246: LD_INT 0
59248: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59249: LD_ADDR_VAR 0 2
59253: PUSH
59254: LD_VAR 0 1
59258: PUSH
59259: LD_INT 55
59261: PUSH
59262: EMPTY
59263: LIST
59264: PPUSH
59265: CALL_OW 69
59269: IN
59270: ST_TO_ADDR
// end ;
59271: LD_VAR 0 2
59275: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59276: LD_INT 0
59278: PPUSH
59279: PPUSH
// list := [ ] ;
59280: LD_ADDR_VAR 0 5
59284: PUSH
59285: EMPTY
59286: ST_TO_ADDR
// case d of 0 :
59287: LD_VAR 0 3
59291: PUSH
59292: LD_INT 0
59294: DOUBLE
59295: EQUAL
59296: IFTRUE 59300
59298: GO 59433
59300: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59301: LD_ADDR_VAR 0 5
59305: PUSH
59306: LD_VAR 0 1
59310: PUSH
59311: LD_INT 4
59313: MINUS
59314: PUSH
59315: LD_VAR 0 2
59319: PUSH
59320: LD_INT 4
59322: MINUS
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: LIST
59331: PUSH
59332: LD_VAR 0 1
59336: PUSH
59337: LD_INT 3
59339: MINUS
59340: PUSH
59341: LD_VAR 0 2
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: LIST
59353: PUSH
59354: LD_VAR 0 1
59358: PUSH
59359: LD_INT 4
59361: PLUS
59362: PUSH
59363: LD_VAR 0 2
59367: PUSH
59368: LD_INT 4
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: LIST
59375: PUSH
59376: LD_VAR 0 1
59380: PUSH
59381: LD_INT 3
59383: PLUS
59384: PUSH
59385: LD_VAR 0 2
59389: PUSH
59390: LD_INT 3
59392: PLUS
59393: PUSH
59394: LD_INT 5
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: LIST
59401: PUSH
59402: LD_VAR 0 1
59406: PUSH
59407: LD_VAR 0 2
59411: PUSH
59412: LD_INT 4
59414: PLUS
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: LIST
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: ST_TO_ADDR
// end ; 1 :
59431: GO 60131
59433: LD_INT 1
59435: DOUBLE
59436: EQUAL
59437: IFTRUE 59441
59439: GO 59574
59441: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59442: LD_ADDR_VAR 0 5
59446: PUSH
59447: LD_VAR 0 1
59451: PUSH
59452: LD_VAR 0 2
59456: PUSH
59457: LD_INT 4
59459: MINUS
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: LIST
59468: PUSH
59469: LD_VAR 0 1
59473: PUSH
59474: LD_INT 3
59476: MINUS
59477: PUSH
59478: LD_VAR 0 2
59482: PUSH
59483: LD_INT 3
59485: MINUS
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: PUSH
59495: LD_VAR 0 1
59499: PUSH
59500: LD_INT 4
59502: MINUS
59503: PUSH
59504: LD_VAR 0 2
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: LIST
59516: PUSH
59517: LD_VAR 0 1
59521: PUSH
59522: LD_VAR 0 2
59526: PUSH
59527: LD_INT 3
59529: PLUS
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: LIST
59538: PUSH
59539: LD_VAR 0 1
59543: PUSH
59544: LD_INT 4
59546: PLUS
59547: PUSH
59548: LD_VAR 0 2
59552: PUSH
59553: LD_INT 4
59555: PLUS
59556: PUSH
59557: LD_INT 5
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: ST_TO_ADDR
// end ; 2 :
59572: GO 60131
59574: LD_INT 2
59576: DOUBLE
59577: EQUAL
59578: IFTRUE 59582
59580: GO 59711
59582: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59583: LD_ADDR_VAR 0 5
59587: PUSH
59588: LD_VAR 0 1
59592: PUSH
59593: LD_VAR 0 2
59597: PUSH
59598: LD_INT 3
59600: MINUS
59601: PUSH
59602: LD_INT 3
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: LIST
59609: PUSH
59610: LD_VAR 0 1
59614: PUSH
59615: LD_INT 4
59617: PLUS
59618: PUSH
59619: LD_VAR 0 2
59623: PUSH
59624: LD_INT 4
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: LIST
59631: PUSH
59632: LD_VAR 0 1
59636: PUSH
59637: LD_VAR 0 2
59641: PUSH
59642: LD_INT 4
59644: PLUS
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: LIST
59653: PUSH
59654: LD_VAR 0 1
59658: PUSH
59659: LD_INT 3
59661: MINUS
59662: PUSH
59663: LD_VAR 0 2
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: LIST
59675: PUSH
59676: LD_VAR 0 1
59680: PUSH
59681: LD_INT 4
59683: MINUS
59684: PUSH
59685: LD_VAR 0 2
59689: PUSH
59690: LD_INT 4
59692: MINUS
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: LIST
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: ST_TO_ADDR
// end ; 3 :
59709: GO 60131
59711: LD_INT 3
59713: DOUBLE
59714: EQUAL
59715: IFTRUE 59719
59717: GO 59852
59719: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59720: LD_ADDR_VAR 0 5
59724: PUSH
59725: LD_VAR 0 1
59729: PUSH
59730: LD_INT 3
59732: PLUS
59733: PUSH
59734: LD_VAR 0 2
59738: PUSH
59739: LD_INT 4
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: PUSH
59747: LD_VAR 0 1
59751: PUSH
59752: LD_INT 4
59754: PLUS
59755: PUSH
59756: LD_VAR 0 2
59760: PUSH
59761: LD_INT 4
59763: PLUS
59764: PUSH
59765: LD_INT 5
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: LIST
59772: PUSH
59773: LD_VAR 0 1
59777: PUSH
59778: LD_INT 4
59780: MINUS
59781: PUSH
59782: LD_VAR 0 2
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: PUSH
59795: LD_VAR 0 1
59799: PUSH
59800: LD_VAR 0 2
59804: PUSH
59805: LD_INT 4
59807: MINUS
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: LIST
59816: PUSH
59817: LD_VAR 0 1
59821: PUSH
59822: LD_INT 3
59824: MINUS
59825: PUSH
59826: LD_VAR 0 2
59830: PUSH
59831: LD_INT 3
59833: MINUS
59834: PUSH
59835: LD_INT 2
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: ST_TO_ADDR
// end ; 4 :
59850: GO 60131
59852: LD_INT 4
59854: DOUBLE
59855: EQUAL
59856: IFTRUE 59860
59858: GO 59993
59860: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59861: LD_ADDR_VAR 0 5
59865: PUSH
59866: LD_VAR 0 1
59870: PUSH
59871: LD_VAR 0 2
59875: PUSH
59876: LD_INT 4
59878: PLUS
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: LIST
59887: PUSH
59888: LD_VAR 0 1
59892: PUSH
59893: LD_INT 3
59895: PLUS
59896: PUSH
59897: LD_VAR 0 2
59901: PUSH
59902: LD_INT 3
59904: PLUS
59905: PUSH
59906: LD_INT 5
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: LIST
59913: PUSH
59914: LD_VAR 0 1
59918: PUSH
59919: LD_INT 4
59921: PLUS
59922: PUSH
59923: LD_VAR 0 2
59927: PUSH
59928: LD_INT 4
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: PUSH
59936: LD_VAR 0 1
59940: PUSH
59941: LD_VAR 0 2
59945: PUSH
59946: LD_INT 3
59948: MINUS
59949: PUSH
59950: LD_INT 3
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: PUSH
59958: LD_VAR 0 1
59962: PUSH
59963: LD_INT 4
59965: MINUS
59966: PUSH
59967: LD_VAR 0 2
59971: PUSH
59972: LD_INT 4
59974: MINUS
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: LIST
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: ST_TO_ADDR
// end ; 5 :
59991: GO 60131
59993: LD_INT 5
59995: DOUBLE
59996: EQUAL
59997: IFTRUE 60001
59999: GO 60130
60001: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60002: LD_ADDR_VAR 0 5
60006: PUSH
60007: LD_VAR 0 1
60011: PUSH
60012: LD_INT 4
60014: MINUS
60015: PUSH
60016: LD_VAR 0 2
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: LIST
60028: PUSH
60029: LD_VAR 0 1
60033: PUSH
60034: LD_VAR 0 2
60038: PUSH
60039: LD_INT 4
60041: MINUS
60042: PUSH
60043: LD_INT 3
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: LIST
60050: PUSH
60051: LD_VAR 0 1
60055: PUSH
60056: LD_INT 4
60058: PLUS
60059: PUSH
60060: LD_VAR 0 2
60064: PUSH
60065: LD_INT 4
60067: PLUS
60068: PUSH
60069: LD_INT 5
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: LIST
60076: PUSH
60077: LD_VAR 0 1
60081: PUSH
60082: LD_INT 3
60084: PLUS
60085: PUSH
60086: LD_VAR 0 2
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: LIST
60098: PUSH
60099: LD_VAR 0 1
60103: PUSH
60104: LD_VAR 0 2
60108: PUSH
60109: LD_INT 3
60111: PLUS
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: LIST
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: ST_TO_ADDR
// end ; end ;
60128: GO 60131
60130: POP
// result := list ;
60131: LD_ADDR_VAR 0 4
60135: PUSH
60136: LD_VAR 0 5
60140: ST_TO_ADDR
// end ;
60141: LD_VAR 0 4
60145: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60146: LD_INT 0
60148: PPUSH
60149: PPUSH
60150: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60151: LD_VAR 0 1
60155: NOT
60156: PUSH
60157: LD_VAR 0 2
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: LD_INT 4
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: IN
60180: NOT
60181: OR
60182: IFFALSE 60186
// exit ;
60184: GO 60278
// tmp := [ ] ;
60186: LD_ADDR_VAR 0 5
60190: PUSH
60191: EMPTY
60192: ST_TO_ADDR
// for i in units do
60193: LD_ADDR_VAR 0 4
60197: PUSH
60198: LD_VAR 0 1
60202: PUSH
60203: FOR_IN
60204: IFFALSE 60247
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60206: LD_ADDR_VAR 0 5
60210: PUSH
60211: LD_VAR 0 5
60215: PPUSH
60216: LD_VAR 0 5
60220: PUSH
60221: LD_INT 1
60223: PLUS
60224: PPUSH
60225: LD_VAR 0 4
60229: PPUSH
60230: LD_VAR 0 2
60234: PPUSH
60235: CALL_OW 259
60239: PPUSH
60240: CALL_OW 2
60244: ST_TO_ADDR
60245: GO 60203
60247: POP
60248: POP
// if not tmp then
60249: LD_VAR 0 5
60253: NOT
60254: IFFALSE 60258
// exit ;
60256: GO 60278
// result := SortListByListDesc ( units , tmp ) ;
60258: LD_ADDR_VAR 0 3
60262: PUSH
60263: LD_VAR 0 1
60267: PPUSH
60268: LD_VAR 0 5
60272: PPUSH
60273: CALL_OW 77
60277: ST_TO_ADDR
// end ;
60278: LD_VAR 0 3
60282: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60283: LD_INT 0
60285: PPUSH
60286: PPUSH
60287: PPUSH
// result := false ;
60288: LD_ADDR_VAR 0 3
60292: PUSH
60293: LD_INT 0
60295: ST_TO_ADDR
// x := GetX ( building ) ;
60296: LD_ADDR_VAR 0 4
60300: PUSH
60301: LD_VAR 0 2
60305: PPUSH
60306: CALL_OW 250
60310: ST_TO_ADDR
// y := GetY ( building ) ;
60311: LD_ADDR_VAR 0 5
60315: PUSH
60316: LD_VAR 0 2
60320: PPUSH
60321: CALL_OW 251
60325: ST_TO_ADDR
// if not building or not x or not y then
60326: LD_VAR 0 2
60330: NOT
60331: PUSH
60332: LD_VAR 0 4
60336: NOT
60337: OR
60338: PUSH
60339: LD_VAR 0 5
60343: NOT
60344: OR
60345: IFFALSE 60349
// exit ;
60347: GO 60441
// if GetTaskList ( unit ) then
60349: LD_VAR 0 1
60353: PPUSH
60354: CALL_OW 437
60358: IFFALSE 60441
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60360: LD_STRING e
60362: PUSH
60363: LD_VAR 0 1
60367: PPUSH
60368: CALL_OW 437
60372: PUSH
60373: LD_INT 1
60375: ARRAY
60376: PUSH
60377: LD_INT 1
60379: ARRAY
60380: EQUAL
60381: PUSH
60382: LD_VAR 0 4
60386: PUSH
60387: LD_VAR 0 1
60391: PPUSH
60392: CALL_OW 437
60396: PUSH
60397: LD_INT 1
60399: ARRAY
60400: PUSH
60401: LD_INT 2
60403: ARRAY
60404: EQUAL
60405: AND
60406: PUSH
60407: LD_VAR 0 5
60411: PUSH
60412: LD_VAR 0 1
60416: PPUSH
60417: CALL_OW 437
60421: PUSH
60422: LD_INT 1
60424: ARRAY
60425: PUSH
60426: LD_INT 3
60428: ARRAY
60429: EQUAL
60430: AND
60431: IFFALSE 60441
// result := true end ;
60433: LD_ADDR_VAR 0 3
60437: PUSH
60438: LD_INT 1
60440: ST_TO_ADDR
// end ;
60441: LD_VAR 0 3
60445: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60446: LD_INT 0
60448: PPUSH
// result := false ;
60449: LD_ADDR_VAR 0 4
60453: PUSH
60454: LD_INT 0
60456: ST_TO_ADDR
// if GetTaskList ( unit ) then
60457: LD_VAR 0 1
60461: PPUSH
60462: CALL_OW 437
60466: IFFALSE 60549
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60468: LD_STRING M
60470: PUSH
60471: LD_VAR 0 1
60475: PPUSH
60476: CALL_OW 437
60480: PUSH
60481: LD_INT 1
60483: ARRAY
60484: PUSH
60485: LD_INT 1
60487: ARRAY
60488: EQUAL
60489: PUSH
60490: LD_VAR 0 2
60494: PUSH
60495: LD_VAR 0 1
60499: PPUSH
60500: CALL_OW 437
60504: PUSH
60505: LD_INT 1
60507: ARRAY
60508: PUSH
60509: LD_INT 2
60511: ARRAY
60512: EQUAL
60513: AND
60514: PUSH
60515: LD_VAR 0 3
60519: PUSH
60520: LD_VAR 0 1
60524: PPUSH
60525: CALL_OW 437
60529: PUSH
60530: LD_INT 1
60532: ARRAY
60533: PUSH
60534: LD_INT 3
60536: ARRAY
60537: EQUAL
60538: AND
60539: IFFALSE 60549
// result := true ;
60541: LD_ADDR_VAR 0 4
60545: PUSH
60546: LD_INT 1
60548: ST_TO_ADDR
// end ; end ;
60549: LD_VAR 0 4
60553: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60554: LD_INT 0
60556: PPUSH
60557: PPUSH
60558: PPUSH
60559: PPUSH
// if not unit or not area then
60560: LD_VAR 0 1
60564: NOT
60565: PUSH
60566: LD_VAR 0 2
60570: NOT
60571: OR
60572: IFFALSE 60576
// exit ;
60574: GO 60740
// tmp := AreaToList ( area , i ) ;
60576: LD_ADDR_VAR 0 6
60580: PUSH
60581: LD_VAR 0 2
60585: PPUSH
60586: LD_VAR 0 5
60590: PPUSH
60591: CALL_OW 517
60595: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60596: LD_ADDR_VAR 0 5
60600: PUSH
60601: DOUBLE
60602: LD_INT 1
60604: DEC
60605: ST_TO_ADDR
60606: LD_VAR 0 6
60610: PUSH
60611: LD_INT 1
60613: ARRAY
60614: PUSH
60615: FOR_TO
60616: IFFALSE 60738
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60618: LD_ADDR_VAR 0 7
60622: PUSH
60623: LD_VAR 0 6
60627: PUSH
60628: LD_INT 1
60630: ARRAY
60631: PUSH
60632: LD_VAR 0 5
60636: ARRAY
60637: PUSH
60638: LD_VAR 0 6
60642: PUSH
60643: LD_INT 2
60645: ARRAY
60646: PUSH
60647: LD_VAR 0 5
60651: ARRAY
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60657: LD_VAR 0 7
60661: PUSH
60662: LD_INT 1
60664: ARRAY
60665: PPUSH
60666: LD_VAR 0 7
60670: PUSH
60671: LD_INT 2
60673: ARRAY
60674: PPUSH
60675: CALL_OW 428
60679: PUSH
60680: LD_INT 0
60682: EQUAL
60683: IFFALSE 60736
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60685: LD_VAR 0 1
60689: PPUSH
60690: LD_VAR 0 7
60694: PUSH
60695: LD_INT 1
60697: ARRAY
60698: PPUSH
60699: LD_VAR 0 7
60703: PUSH
60704: LD_INT 2
60706: ARRAY
60707: PPUSH
60708: LD_VAR 0 3
60712: PPUSH
60713: CALL_OW 48
// result := IsPlaced ( unit ) ;
60717: LD_ADDR_VAR 0 4
60721: PUSH
60722: LD_VAR 0 1
60726: PPUSH
60727: CALL_OW 305
60731: ST_TO_ADDR
// exit ;
60732: POP
60733: POP
60734: GO 60740
// end ; end ;
60736: GO 60615
60738: POP
60739: POP
// end ;
60740: LD_VAR 0 4
60744: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60745: LD_INT 0
60747: PPUSH
60748: PPUSH
60749: PPUSH
// if not side or side > 8 then
60750: LD_VAR 0 1
60754: NOT
60755: PUSH
60756: LD_VAR 0 1
60760: PUSH
60761: LD_INT 8
60763: GREATER
60764: OR
60765: IFFALSE 60769
// exit ;
60767: GO 60956
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60769: LD_ADDR_VAR 0 4
60773: PUSH
60774: LD_INT 22
60776: PUSH
60777: LD_VAR 0 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 21
60788: PUSH
60789: LD_INT 3
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PPUSH
60800: CALL_OW 69
60804: ST_TO_ADDR
// if not tmp then
60805: LD_VAR 0 4
60809: NOT
60810: IFFALSE 60814
// exit ;
60812: GO 60956
// enable_addtolog := true ;
60814: LD_ADDR_OWVAR 81
60818: PUSH
60819: LD_INT 1
60821: ST_TO_ADDR
// AddToLog ( [ ) ;
60822: LD_STRING [
60824: PPUSH
60825: CALL_OW 561
// for i in tmp do
60829: LD_ADDR_VAR 0 3
60833: PUSH
60834: LD_VAR 0 4
60838: PUSH
60839: FOR_IN
60840: IFFALSE 60947
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60842: LD_STRING [
60844: PUSH
60845: LD_VAR 0 3
60849: PPUSH
60850: CALL_OW 266
60854: STR
60855: PUSH
60856: LD_STRING , 
60858: STR
60859: PUSH
60860: LD_VAR 0 3
60864: PPUSH
60865: CALL_OW 250
60869: STR
60870: PUSH
60871: LD_STRING , 
60873: STR
60874: PUSH
60875: LD_VAR 0 3
60879: PPUSH
60880: CALL_OW 251
60884: STR
60885: PUSH
60886: LD_STRING , 
60888: STR
60889: PUSH
60890: LD_VAR 0 3
60894: PPUSH
60895: CALL_OW 254
60899: STR
60900: PUSH
60901: LD_STRING , 
60903: STR
60904: PUSH
60905: LD_VAR 0 3
60909: PPUSH
60910: LD_INT 1
60912: PPUSH
60913: CALL_OW 268
60917: STR
60918: PUSH
60919: LD_STRING , 
60921: STR
60922: PUSH
60923: LD_VAR 0 3
60927: PPUSH
60928: LD_INT 2
60930: PPUSH
60931: CALL_OW 268
60935: STR
60936: PUSH
60937: LD_STRING ],
60939: STR
60940: PPUSH
60941: CALL_OW 561
// end ;
60945: GO 60839
60947: POP
60948: POP
// AddToLog ( ]; ) ;
60949: LD_STRING ];
60951: PPUSH
60952: CALL_OW 561
// end ;
60956: LD_VAR 0 2
60960: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60961: LD_INT 0
60963: PPUSH
60964: PPUSH
60965: PPUSH
60966: PPUSH
60967: PPUSH
// if not area or not rate or not max then
60968: LD_VAR 0 1
60972: NOT
60973: PUSH
60974: LD_VAR 0 2
60978: NOT
60979: OR
60980: PUSH
60981: LD_VAR 0 4
60985: NOT
60986: OR
60987: IFFALSE 60991
// exit ;
60989: GO 61180
// while 1 do
60991: LD_INT 1
60993: IFFALSE 61180
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60995: LD_ADDR_VAR 0 9
60999: PUSH
61000: LD_VAR 0 1
61004: PPUSH
61005: LD_INT 1
61007: PPUSH
61008: CALL_OW 287
61012: PUSH
61013: LD_INT 10
61015: MUL
61016: ST_TO_ADDR
// r := rate / 10 ;
61017: LD_ADDR_VAR 0 7
61021: PUSH
61022: LD_VAR 0 2
61026: PUSH
61027: LD_INT 10
61029: DIVREAL
61030: ST_TO_ADDR
// time := 1 1$00 ;
61031: LD_ADDR_VAR 0 8
61035: PUSH
61036: LD_INT 2100
61038: ST_TO_ADDR
// if amount < min then
61039: LD_VAR 0 9
61043: PUSH
61044: LD_VAR 0 3
61048: LESS
61049: IFFALSE 61067
// r := r * 2 else
61051: LD_ADDR_VAR 0 7
61055: PUSH
61056: LD_VAR 0 7
61060: PUSH
61061: LD_INT 2
61063: MUL
61064: ST_TO_ADDR
61065: GO 61093
// if amount > max then
61067: LD_VAR 0 9
61071: PUSH
61072: LD_VAR 0 4
61076: GREATER
61077: IFFALSE 61093
// r := r / 2 ;
61079: LD_ADDR_VAR 0 7
61083: PUSH
61084: LD_VAR 0 7
61088: PUSH
61089: LD_INT 2
61091: DIVREAL
61092: ST_TO_ADDR
// time := time / r ;
61093: LD_ADDR_VAR 0 8
61097: PUSH
61098: LD_VAR 0 8
61102: PUSH
61103: LD_VAR 0 7
61107: DIVREAL
61108: ST_TO_ADDR
// if time < 0 then
61109: LD_VAR 0 8
61113: PUSH
61114: LD_INT 0
61116: LESS
61117: IFFALSE 61134
// time := time * - 1 ;
61119: LD_ADDR_VAR 0 8
61123: PUSH
61124: LD_VAR 0 8
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: MUL
61133: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61134: LD_VAR 0 8
61138: PUSH
61139: LD_INT 35
61141: PPUSH
61142: LD_INT 875
61144: PPUSH
61145: CALL_OW 12
61149: PLUS
61150: PPUSH
61151: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61155: LD_INT 1
61157: PPUSH
61158: LD_INT 5
61160: PPUSH
61161: CALL_OW 12
61165: PPUSH
61166: LD_VAR 0 1
61170: PPUSH
61171: LD_INT 1
61173: PPUSH
61174: CALL_OW 55
// end ;
61178: GO 60991
// end ;
61180: LD_VAR 0 5
61184: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61185: LD_INT 0
61187: PPUSH
61188: PPUSH
61189: PPUSH
61190: PPUSH
61191: PPUSH
61192: PPUSH
61193: PPUSH
61194: PPUSH
// if not turrets or not factories then
61195: LD_VAR 0 1
61199: NOT
61200: PUSH
61201: LD_VAR 0 2
61205: NOT
61206: OR
61207: IFFALSE 61211
// exit ;
61209: GO 61518
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61211: LD_ADDR_VAR 0 10
61215: PUSH
61216: LD_INT 5
61218: PUSH
61219: LD_INT 6
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: LD_INT 4
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 3
61238: PUSH
61239: LD_INT 5
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 24
61253: PUSH
61254: LD_INT 25
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 23
61263: PUSH
61264: LD_INT 27
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 42
61277: PUSH
61278: LD_INT 43
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 44
61287: PUSH
61288: LD_INT 46
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 45
61297: PUSH
61298: LD_INT 47
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: LIST
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: LIST
61314: ST_TO_ADDR
// result := [ ] ;
61315: LD_ADDR_VAR 0 3
61319: PUSH
61320: EMPTY
61321: ST_TO_ADDR
// for i in turrets do
61322: LD_ADDR_VAR 0 4
61326: PUSH
61327: LD_VAR 0 1
61331: PUSH
61332: FOR_IN
61333: IFFALSE 61516
// begin nat := GetNation ( i ) ;
61335: LD_ADDR_VAR 0 7
61339: PUSH
61340: LD_VAR 0 4
61344: PPUSH
61345: CALL_OW 248
61349: ST_TO_ADDR
// weapon := 0 ;
61350: LD_ADDR_VAR 0 8
61354: PUSH
61355: LD_INT 0
61357: ST_TO_ADDR
// if not nat then
61358: LD_VAR 0 7
61362: NOT
61363: IFFALSE 61367
// continue ;
61365: GO 61332
// for j in list [ nat ] do
61367: LD_ADDR_VAR 0 5
61371: PUSH
61372: LD_VAR 0 10
61376: PUSH
61377: LD_VAR 0 7
61381: ARRAY
61382: PUSH
61383: FOR_IN
61384: IFFALSE 61425
// if GetBWeapon ( i ) = j [ 1 ] then
61386: LD_VAR 0 4
61390: PPUSH
61391: CALL_OW 269
61395: PUSH
61396: LD_VAR 0 5
61400: PUSH
61401: LD_INT 1
61403: ARRAY
61404: EQUAL
61405: IFFALSE 61423
// begin weapon := j [ 2 ] ;
61407: LD_ADDR_VAR 0 8
61411: PUSH
61412: LD_VAR 0 5
61416: PUSH
61417: LD_INT 2
61419: ARRAY
61420: ST_TO_ADDR
// break ;
61421: GO 61425
// end ;
61423: GO 61383
61425: POP
61426: POP
// if not weapon then
61427: LD_VAR 0 8
61431: NOT
61432: IFFALSE 61436
// continue ;
61434: GO 61332
// for k in factories do
61436: LD_ADDR_VAR 0 6
61440: PUSH
61441: LD_VAR 0 2
61445: PUSH
61446: FOR_IN
61447: IFFALSE 61512
// begin weapons := AvailableWeaponList ( k ) ;
61449: LD_ADDR_VAR 0 9
61453: PUSH
61454: LD_VAR 0 6
61458: PPUSH
61459: CALL_OW 478
61463: ST_TO_ADDR
// if not weapons then
61464: LD_VAR 0 9
61468: NOT
61469: IFFALSE 61473
// continue ;
61471: GO 61446
// if weapon in weapons then
61473: LD_VAR 0 8
61477: PUSH
61478: LD_VAR 0 9
61482: IN
61483: IFFALSE 61510
// begin result := [ i , weapon ] ;
61485: LD_ADDR_VAR 0 3
61489: PUSH
61490: LD_VAR 0 4
61494: PUSH
61495: LD_VAR 0 8
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: ST_TO_ADDR
// exit ;
61504: POP
61505: POP
61506: POP
61507: POP
61508: GO 61518
// end ; end ;
61510: GO 61446
61512: POP
61513: POP
// end ;
61514: GO 61332
61516: POP
61517: POP
// end ;
61518: LD_VAR 0 3
61522: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61523: LD_INT 0
61525: PPUSH
// if not side or side > 8 then
61526: LD_VAR 0 3
61530: NOT
61531: PUSH
61532: LD_VAR 0 3
61536: PUSH
61537: LD_INT 8
61539: GREATER
61540: OR
61541: IFFALSE 61545
// exit ;
61543: GO 61604
// if not range then
61545: LD_VAR 0 4
61549: NOT
61550: IFFALSE 61561
// range := - 12 ;
61552: LD_ADDR_VAR 0 4
61556: PUSH
61557: LD_INT 12
61559: NEG
61560: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61561: LD_VAR 0 1
61565: PPUSH
61566: LD_VAR 0 2
61570: PPUSH
61571: LD_VAR 0 3
61575: PPUSH
61576: LD_VAR 0 4
61580: PPUSH
61581: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61585: LD_VAR 0 1
61589: PPUSH
61590: LD_VAR 0 2
61594: PPUSH
61595: LD_VAR 0 3
61599: PPUSH
61600: CALL_OW 331
// end ;
61604: LD_VAR 0 5
61608: RET
// export function Video ( mode ) ; begin
61609: LD_INT 0
61611: PPUSH
// ingame_video = mode ;
61612: LD_ADDR_OWVAR 52
61616: PUSH
61617: LD_VAR 0 1
61621: ST_TO_ADDR
// interface_hidden = mode ;
61622: LD_ADDR_OWVAR 54
61626: PUSH
61627: LD_VAR 0 1
61631: ST_TO_ADDR
// end ;
61632: LD_VAR 0 2
61636: RET
// export function Join ( array , element ) ; begin
61637: LD_INT 0
61639: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61640: LD_ADDR_VAR 0 3
61644: PUSH
61645: LD_VAR 0 1
61649: PPUSH
61650: LD_VAR 0 1
61654: PUSH
61655: LD_INT 1
61657: PLUS
61658: PPUSH
61659: LD_VAR 0 2
61663: PPUSH
61664: CALL_OW 1
61668: ST_TO_ADDR
// end ;
61669: LD_VAR 0 3
61673: RET
// export function JoinUnion ( array , element ) ; begin
61674: LD_INT 0
61676: PPUSH
// result := array union element ;
61677: LD_ADDR_VAR 0 3
61681: PUSH
61682: LD_VAR 0 1
61686: PUSH
61687: LD_VAR 0 2
61691: UNION
61692: ST_TO_ADDR
// end ;
61693: LD_VAR 0 3
61697: RET
// export function GetBehemoths ( side ) ; begin
61698: LD_INT 0
61700: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61701: LD_ADDR_VAR 0 2
61705: PUSH
61706: LD_INT 22
61708: PUSH
61709: LD_VAR 0 1
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 31
61720: PUSH
61721: LD_INT 25
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PPUSH
61732: CALL_OW 69
61736: ST_TO_ADDR
// end ;
61737: LD_VAR 0 2
61741: RET
// export function Shuffle ( array ) ; var i , index ; begin
61742: LD_INT 0
61744: PPUSH
61745: PPUSH
61746: PPUSH
// result := [ ] ;
61747: LD_ADDR_VAR 0 2
61751: PUSH
61752: EMPTY
61753: ST_TO_ADDR
// if not array then
61754: LD_VAR 0 1
61758: NOT
61759: IFFALSE 61763
// exit ;
61761: GO 61862
// Randomize ;
61763: CALL_OW 10
// for i = array downto 1 do
61767: LD_ADDR_VAR 0 3
61771: PUSH
61772: DOUBLE
61773: LD_VAR 0 1
61777: INC
61778: ST_TO_ADDR
61779: LD_INT 1
61781: PUSH
61782: FOR_DOWNTO
61783: IFFALSE 61860
// begin index := rand ( 1 , array ) ;
61785: LD_ADDR_VAR 0 4
61789: PUSH
61790: LD_INT 1
61792: PPUSH
61793: LD_VAR 0 1
61797: PPUSH
61798: CALL_OW 12
61802: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61803: LD_ADDR_VAR 0 2
61807: PUSH
61808: LD_VAR 0 2
61812: PPUSH
61813: LD_VAR 0 2
61817: PUSH
61818: LD_INT 1
61820: PLUS
61821: PPUSH
61822: LD_VAR 0 1
61826: PUSH
61827: LD_VAR 0 4
61831: ARRAY
61832: PPUSH
61833: CALL_OW 2
61837: ST_TO_ADDR
// array := Delete ( array , index ) ;
61838: LD_ADDR_VAR 0 1
61842: PUSH
61843: LD_VAR 0 1
61847: PPUSH
61848: LD_VAR 0 4
61852: PPUSH
61853: CALL_OW 3
61857: ST_TO_ADDR
// end ;
61858: GO 61782
61860: POP
61861: POP
// end ;
61862: LD_VAR 0 2
61866: RET
// export function GetBaseMaterials ( base ) ; begin
61867: LD_INT 0
61869: PPUSH
// result := [ 0 , 0 , 0 ] ;
61870: LD_ADDR_VAR 0 2
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: LIST
61888: ST_TO_ADDR
// if not base then
61889: LD_VAR 0 1
61893: NOT
61894: IFFALSE 61898
// exit ;
61896: GO 61947
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61898: LD_ADDR_VAR 0 2
61902: PUSH
61903: LD_VAR 0 1
61907: PPUSH
61908: LD_INT 1
61910: PPUSH
61911: CALL_OW 275
61915: PUSH
61916: LD_VAR 0 1
61920: PPUSH
61921: LD_INT 2
61923: PPUSH
61924: CALL_OW 275
61928: PUSH
61929: LD_VAR 0 1
61933: PPUSH
61934: LD_INT 3
61936: PPUSH
61937: CALL_OW 275
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: LIST
61946: ST_TO_ADDR
// end ;
61947: LD_VAR 0 2
61951: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61952: LD_INT 0
61954: PPUSH
61955: PPUSH
// result := array ;
61956: LD_ADDR_VAR 0 3
61960: PUSH
61961: LD_VAR 0 1
61965: ST_TO_ADDR
// if size > 0 then
61966: LD_VAR 0 2
61970: PUSH
61971: LD_INT 0
61973: GREATER
61974: IFFALSE 62020
// for i := array downto size do
61976: LD_ADDR_VAR 0 4
61980: PUSH
61981: DOUBLE
61982: LD_VAR 0 1
61986: INC
61987: ST_TO_ADDR
61988: LD_VAR 0 2
61992: PUSH
61993: FOR_DOWNTO
61994: IFFALSE 62018
// result := Delete ( result , result ) ;
61996: LD_ADDR_VAR 0 3
62000: PUSH
62001: LD_VAR 0 3
62005: PPUSH
62006: LD_VAR 0 3
62010: PPUSH
62011: CALL_OW 3
62015: ST_TO_ADDR
62016: GO 61993
62018: POP
62019: POP
// end ;
62020: LD_VAR 0 3
62024: RET
// export function ComExit ( unit ) ; var tmp ; begin
62025: LD_INT 0
62027: PPUSH
62028: PPUSH
// if not IsInUnit ( unit ) then
62029: LD_VAR 0 1
62033: PPUSH
62034: CALL_OW 310
62038: NOT
62039: IFFALSE 62043
// exit ;
62041: GO 62103
// tmp := IsInUnit ( unit ) ;
62043: LD_ADDR_VAR 0 3
62047: PUSH
62048: LD_VAR 0 1
62052: PPUSH
62053: CALL_OW 310
62057: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62058: LD_VAR 0 3
62062: PPUSH
62063: CALL_OW 247
62067: PUSH
62068: LD_INT 2
62070: EQUAL
62071: IFFALSE 62084
// ComExitVehicle ( unit ) else
62073: LD_VAR 0 1
62077: PPUSH
62078: CALL_OW 121
62082: GO 62093
// ComExitBuilding ( unit ) ;
62084: LD_VAR 0 1
62088: PPUSH
62089: CALL_OW 122
// result := tmp ;
62093: LD_ADDR_VAR 0 2
62097: PUSH
62098: LD_VAR 0 3
62102: ST_TO_ADDR
// end ;
62103: LD_VAR 0 2
62107: RET
// export function ComExitAll ( units ) ; var i ; begin
62108: LD_INT 0
62110: PPUSH
62111: PPUSH
// if not units then
62112: LD_VAR 0 1
62116: NOT
62117: IFFALSE 62121
// exit ;
62119: GO 62147
// for i in units do
62121: LD_ADDR_VAR 0 3
62125: PUSH
62126: LD_VAR 0 1
62130: PUSH
62131: FOR_IN
62132: IFFALSE 62145
// ComExit ( i ) ;
62134: LD_VAR 0 3
62138: PPUSH
62139: CALL 62025 0 1
62143: GO 62131
62145: POP
62146: POP
// end ;
62147: LD_VAR 0 2
62151: RET
// export function ResetHc ; begin
62152: LD_INT 0
62154: PPUSH
// InitHc ;
62155: CALL_OW 19
// hc_importance := 0 ;
62159: LD_ADDR_OWVAR 32
62163: PUSH
62164: LD_INT 0
62166: ST_TO_ADDR
// end ;
62167: LD_VAR 0 1
62171: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62172: LD_INT 0
62174: PPUSH
62175: PPUSH
62176: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62177: LD_ADDR_VAR 0 6
62181: PUSH
62182: LD_VAR 0 1
62186: PUSH
62187: LD_VAR 0 3
62191: PLUS
62192: PUSH
62193: LD_INT 2
62195: DIV
62196: ST_TO_ADDR
// if _x < 0 then
62197: LD_VAR 0 6
62201: PUSH
62202: LD_INT 0
62204: LESS
62205: IFFALSE 62222
// _x := _x * - 1 ;
62207: LD_ADDR_VAR 0 6
62211: PUSH
62212: LD_VAR 0 6
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: MUL
62221: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62222: LD_ADDR_VAR 0 7
62226: PUSH
62227: LD_VAR 0 2
62231: PUSH
62232: LD_VAR 0 4
62236: PLUS
62237: PUSH
62238: LD_INT 2
62240: DIV
62241: ST_TO_ADDR
// if _y < 0 then
62242: LD_VAR 0 7
62246: PUSH
62247: LD_INT 0
62249: LESS
62250: IFFALSE 62267
// _y := _y * - 1 ;
62252: LD_ADDR_VAR 0 7
62256: PUSH
62257: LD_VAR 0 7
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: MUL
62266: ST_TO_ADDR
// result := [ _x , _y ] ;
62267: LD_ADDR_VAR 0 5
62271: PUSH
62272: LD_VAR 0 6
62276: PUSH
62277: LD_VAR 0 7
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: ST_TO_ADDR
// end ;
62286: LD_VAR 0 5
62290: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62291: LD_INT 0
62293: PPUSH
62294: PPUSH
62295: PPUSH
62296: PPUSH
// task := GetTaskList ( unit ) ;
62297: LD_ADDR_VAR 0 7
62301: PUSH
62302: LD_VAR 0 1
62306: PPUSH
62307: CALL_OW 437
62311: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62312: LD_VAR 0 7
62316: NOT
62317: PUSH
62318: LD_VAR 0 1
62322: PPUSH
62323: LD_VAR 0 2
62327: PPUSH
62328: CALL_OW 308
62332: NOT
62333: AND
62334: IFFALSE 62338
// exit ;
62336: GO 62456
// if IsInArea ( unit , area ) then
62338: LD_VAR 0 1
62342: PPUSH
62343: LD_VAR 0 2
62347: PPUSH
62348: CALL_OW 308
62352: IFFALSE 62370
// begin ComMoveToArea ( unit , goAway ) ;
62354: LD_VAR 0 1
62358: PPUSH
62359: LD_VAR 0 3
62363: PPUSH
62364: CALL_OW 113
// exit ;
62368: GO 62456
// end ; if task [ 1 ] [ 1 ] <> M then
62370: LD_VAR 0 7
62374: PUSH
62375: LD_INT 1
62377: ARRAY
62378: PUSH
62379: LD_INT 1
62381: ARRAY
62382: PUSH
62383: LD_STRING M
62385: NONEQUAL
62386: IFFALSE 62390
// exit ;
62388: GO 62456
// x := task [ 1 ] [ 2 ] ;
62390: LD_ADDR_VAR 0 5
62394: PUSH
62395: LD_VAR 0 7
62399: PUSH
62400: LD_INT 1
62402: ARRAY
62403: PUSH
62404: LD_INT 2
62406: ARRAY
62407: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62408: LD_ADDR_VAR 0 6
62412: PUSH
62413: LD_VAR 0 7
62417: PUSH
62418: LD_INT 1
62420: ARRAY
62421: PUSH
62422: LD_INT 3
62424: ARRAY
62425: ST_TO_ADDR
// if InArea ( x , y , area ) then
62426: LD_VAR 0 5
62430: PPUSH
62431: LD_VAR 0 6
62435: PPUSH
62436: LD_VAR 0 2
62440: PPUSH
62441: CALL_OW 309
62445: IFFALSE 62456
// ComStop ( unit ) ;
62447: LD_VAR 0 1
62451: PPUSH
62452: CALL_OW 141
// end ;
62456: LD_VAR 0 4
62460: RET
// export function Abs ( value ) ; begin
62461: LD_INT 0
62463: PPUSH
// result := value ;
62464: LD_ADDR_VAR 0 2
62468: PUSH
62469: LD_VAR 0 1
62473: ST_TO_ADDR
// if value < 0 then
62474: LD_VAR 0 1
62478: PUSH
62479: LD_INT 0
62481: LESS
62482: IFFALSE 62499
// result := value * - 1 ;
62484: LD_ADDR_VAR 0 2
62488: PUSH
62489: LD_VAR 0 1
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: MUL
62498: ST_TO_ADDR
// end ;
62499: LD_VAR 0 2
62503: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62504: LD_INT 0
62506: PPUSH
62507: PPUSH
62508: PPUSH
62509: PPUSH
62510: PPUSH
62511: PPUSH
62512: PPUSH
62513: PPUSH
// if not unit or not building then
62514: LD_VAR 0 1
62518: NOT
62519: PUSH
62520: LD_VAR 0 2
62524: NOT
62525: OR
62526: IFFALSE 62530
// exit ;
62528: GO 62756
// x := GetX ( building ) ;
62530: LD_ADDR_VAR 0 4
62534: PUSH
62535: LD_VAR 0 2
62539: PPUSH
62540: CALL_OW 250
62544: ST_TO_ADDR
// y := GetY ( building ) ;
62545: LD_ADDR_VAR 0 6
62549: PUSH
62550: LD_VAR 0 2
62554: PPUSH
62555: CALL_OW 251
62559: ST_TO_ADDR
// d := GetDir ( building ) ;
62560: LD_ADDR_VAR 0 8
62564: PUSH
62565: LD_VAR 0 2
62569: PPUSH
62570: CALL_OW 254
62574: ST_TO_ADDR
// r := 4 ;
62575: LD_ADDR_VAR 0 9
62579: PUSH
62580: LD_INT 4
62582: ST_TO_ADDR
// for i := 1 to 5 do
62583: LD_ADDR_VAR 0 10
62587: PUSH
62588: DOUBLE
62589: LD_INT 1
62591: DEC
62592: ST_TO_ADDR
62593: LD_INT 5
62595: PUSH
62596: FOR_TO
62597: IFFALSE 62754
// begin _x := ShiftX ( x , d , r + i ) ;
62599: LD_ADDR_VAR 0 5
62603: PUSH
62604: LD_VAR 0 4
62608: PPUSH
62609: LD_VAR 0 8
62613: PPUSH
62614: LD_VAR 0 9
62618: PUSH
62619: LD_VAR 0 10
62623: PLUS
62624: PPUSH
62625: CALL_OW 272
62629: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62630: LD_ADDR_VAR 0 7
62634: PUSH
62635: LD_VAR 0 6
62639: PPUSH
62640: LD_VAR 0 8
62644: PPUSH
62645: LD_VAR 0 9
62649: PUSH
62650: LD_VAR 0 10
62654: PLUS
62655: PPUSH
62656: CALL_OW 273
62660: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62661: LD_VAR 0 5
62665: PPUSH
62666: LD_VAR 0 7
62670: PPUSH
62671: CALL_OW 488
62675: PUSH
62676: LD_VAR 0 5
62680: PPUSH
62681: LD_VAR 0 7
62685: PPUSH
62686: CALL_OW 428
62690: PPUSH
62691: CALL_OW 247
62695: PUSH
62696: LD_INT 3
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: IN
62706: NOT
62707: AND
62708: IFFALSE 62752
// begin ComMoveXY ( unit , _x , _y ) ;
62710: LD_VAR 0 1
62714: PPUSH
62715: LD_VAR 0 5
62719: PPUSH
62720: LD_VAR 0 7
62724: PPUSH
62725: CALL_OW 111
// result := [ _x , _y ] ;
62729: LD_ADDR_VAR 0 3
62733: PUSH
62734: LD_VAR 0 5
62738: PUSH
62739: LD_VAR 0 7
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: ST_TO_ADDR
// exit ;
62748: POP
62749: POP
62750: GO 62756
// end ; end ;
62752: GO 62596
62754: POP
62755: POP
// end ;
62756: LD_VAR 0 3
62760: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62761: LD_INT 0
62763: PPUSH
62764: PPUSH
62765: PPUSH
// result := 0 ;
62766: LD_ADDR_VAR 0 3
62770: PUSH
62771: LD_INT 0
62773: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62774: LD_VAR 0 1
62778: PUSH
62779: LD_INT 0
62781: LESS
62782: PUSH
62783: LD_VAR 0 1
62787: PUSH
62788: LD_INT 8
62790: GREATER
62791: OR
62792: PUSH
62793: LD_VAR 0 2
62797: PUSH
62798: LD_INT 0
62800: LESS
62801: OR
62802: PUSH
62803: LD_VAR 0 2
62807: PUSH
62808: LD_INT 8
62810: GREATER
62811: OR
62812: IFFALSE 62816
// exit ;
62814: GO 62891
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62816: LD_ADDR_VAR 0 4
62820: PUSH
62821: LD_INT 22
62823: PUSH
62824: LD_VAR 0 2
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PPUSH
62833: CALL_OW 69
62837: PUSH
62838: FOR_IN
62839: IFFALSE 62889
// begin un := UnitShoot ( i ) ;
62841: LD_ADDR_VAR 0 5
62845: PUSH
62846: LD_VAR 0 4
62850: PPUSH
62851: CALL_OW 504
62855: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62856: LD_VAR 0 5
62860: PPUSH
62861: CALL_OW 255
62865: PUSH
62866: LD_VAR 0 1
62870: EQUAL
62871: IFFALSE 62887
// begin result := un ;
62873: LD_ADDR_VAR 0 3
62877: PUSH
62878: LD_VAR 0 5
62882: ST_TO_ADDR
// exit ;
62883: POP
62884: POP
62885: GO 62891
// end ; end ;
62887: GO 62838
62889: POP
62890: POP
// end ;
62891: LD_VAR 0 3
62895: RET
// export function GetCargoBay ( units ) ; begin
62896: LD_INT 0
62898: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62899: LD_ADDR_VAR 0 2
62903: PUSH
62904: LD_VAR 0 1
62908: PPUSH
62909: LD_INT 2
62911: PUSH
62912: LD_INT 34
62914: PUSH
62915: LD_INT 12
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 34
62924: PUSH
62925: LD_INT 51
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 34
62934: PUSH
62935: LD_INT 32
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 34
62944: PUSH
62945: LD_EXP 94
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: PPUSH
62961: CALL_OW 72
62965: ST_TO_ADDR
// end ;
62966: LD_VAR 0 2
62970: RET
// export function Negate ( value ) ; begin
62971: LD_INT 0
62973: PPUSH
// result := not value ;
62974: LD_ADDR_VAR 0 2
62978: PUSH
62979: LD_VAR 0 1
62983: NOT
62984: ST_TO_ADDR
// end ;
62985: LD_VAR 0 2
62989: RET
// export function Inc ( value ) ; begin
62990: LD_INT 0
62992: PPUSH
// result := value + 1 ;
62993: LD_ADDR_VAR 0 2
62997: PUSH
62998: LD_VAR 0 1
63002: PUSH
63003: LD_INT 1
63005: PLUS
63006: ST_TO_ADDR
// end ;
63007: LD_VAR 0 2
63011: RET
// export function Dec ( value ) ; begin
63012: LD_INT 0
63014: PPUSH
// result := value - 1 ;
63015: LD_ADDR_VAR 0 2
63019: PUSH
63020: LD_VAR 0 1
63024: PUSH
63025: LD_INT 1
63027: MINUS
63028: ST_TO_ADDR
// end ;
63029: LD_VAR 0 2
63033: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63034: LD_INT 0
63036: PPUSH
63037: PPUSH
63038: PPUSH
63039: PPUSH
63040: PPUSH
63041: PPUSH
63042: PPUSH
63043: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63044: LD_VAR 0 1
63048: PPUSH
63049: LD_VAR 0 2
63053: PPUSH
63054: CALL_OW 488
63058: NOT
63059: PUSH
63060: LD_VAR 0 3
63064: PPUSH
63065: LD_VAR 0 4
63069: PPUSH
63070: CALL_OW 488
63074: NOT
63075: OR
63076: IFFALSE 63089
// begin result := - 1 ;
63078: LD_ADDR_VAR 0 5
63082: PUSH
63083: LD_INT 1
63085: NEG
63086: ST_TO_ADDR
// exit ;
63087: GO 63324
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63089: LD_ADDR_VAR 0 12
63093: PUSH
63094: LD_VAR 0 1
63098: PPUSH
63099: LD_VAR 0 2
63103: PPUSH
63104: LD_VAR 0 3
63108: PPUSH
63109: LD_VAR 0 4
63113: PPUSH
63114: CALL 62172 0 4
63118: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63119: LD_ADDR_VAR 0 11
63123: PUSH
63124: LD_VAR 0 1
63128: PPUSH
63129: LD_VAR 0 2
63133: PPUSH
63134: LD_VAR 0 12
63138: PUSH
63139: LD_INT 1
63141: ARRAY
63142: PPUSH
63143: LD_VAR 0 12
63147: PUSH
63148: LD_INT 2
63150: ARRAY
63151: PPUSH
63152: CALL_OW 298
63156: ST_TO_ADDR
// distance := 9999 ;
63157: LD_ADDR_VAR 0 10
63161: PUSH
63162: LD_INT 9999
63164: ST_TO_ADDR
// for i := 0 to 5 do
63165: LD_ADDR_VAR 0 6
63169: PUSH
63170: DOUBLE
63171: LD_INT 0
63173: DEC
63174: ST_TO_ADDR
63175: LD_INT 5
63177: PUSH
63178: FOR_TO
63179: IFFALSE 63322
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63181: LD_ADDR_VAR 0 7
63185: PUSH
63186: LD_VAR 0 1
63190: PPUSH
63191: LD_VAR 0 6
63195: PPUSH
63196: LD_VAR 0 11
63200: PPUSH
63201: CALL_OW 272
63205: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63206: LD_ADDR_VAR 0 8
63210: PUSH
63211: LD_VAR 0 2
63215: PPUSH
63216: LD_VAR 0 6
63220: PPUSH
63221: LD_VAR 0 11
63225: PPUSH
63226: CALL_OW 273
63230: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63231: LD_VAR 0 7
63235: PPUSH
63236: LD_VAR 0 8
63240: PPUSH
63241: CALL_OW 488
63245: NOT
63246: IFFALSE 63250
// continue ;
63248: GO 63178
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63250: LD_ADDR_VAR 0 9
63254: PUSH
63255: LD_VAR 0 12
63259: PUSH
63260: LD_INT 1
63262: ARRAY
63263: PPUSH
63264: LD_VAR 0 12
63268: PUSH
63269: LD_INT 2
63271: ARRAY
63272: PPUSH
63273: LD_VAR 0 7
63277: PPUSH
63278: LD_VAR 0 8
63282: PPUSH
63283: CALL_OW 298
63287: ST_TO_ADDR
// if tmp < distance then
63288: LD_VAR 0 9
63292: PUSH
63293: LD_VAR 0 10
63297: LESS
63298: IFFALSE 63320
// begin result := i ;
63300: LD_ADDR_VAR 0 5
63304: PUSH
63305: LD_VAR 0 6
63309: ST_TO_ADDR
// distance := tmp ;
63310: LD_ADDR_VAR 0 10
63314: PUSH
63315: LD_VAR 0 9
63319: ST_TO_ADDR
// end ; end ;
63320: GO 63178
63322: POP
63323: POP
// end ;
63324: LD_VAR 0 5
63328: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63329: LD_INT 0
63331: PPUSH
63332: PPUSH
// if not driver or not IsInUnit ( driver ) then
63333: LD_VAR 0 1
63337: NOT
63338: PUSH
63339: LD_VAR 0 1
63343: PPUSH
63344: CALL_OW 310
63348: NOT
63349: OR
63350: IFFALSE 63354
// exit ;
63352: GO 63444
// vehicle := IsInUnit ( driver ) ;
63354: LD_ADDR_VAR 0 3
63358: PUSH
63359: LD_VAR 0 1
63363: PPUSH
63364: CALL_OW 310
63368: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63369: LD_VAR 0 1
63373: PPUSH
63374: LD_STRING \
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: PUSH
63404: LD_STRING E
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: LD_VAR 0 3
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PPUSH
63440: CALL_OW 446
// end ;
63444: LD_VAR 0 2
63448: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63449: LD_INT 0
63451: PPUSH
63452: PPUSH
// if not driver or not IsInUnit ( driver ) then
63453: LD_VAR 0 1
63457: NOT
63458: PUSH
63459: LD_VAR 0 1
63463: PPUSH
63464: CALL_OW 310
63468: NOT
63469: OR
63470: IFFALSE 63474
// exit ;
63472: GO 63564
// vehicle := IsInUnit ( driver ) ;
63474: LD_ADDR_VAR 0 3
63478: PUSH
63479: LD_VAR 0 1
63483: PPUSH
63484: CALL_OW 310
63488: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63489: LD_VAR 0 1
63493: PPUSH
63494: LD_STRING \
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: LD_INT 0
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: PUSH
63524: LD_STRING E
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: LD_VAR 0 3
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PPUSH
63560: CALL_OW 447
// end ;
63564: LD_VAR 0 2
63568: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63569: LD_INT 0
63571: PPUSH
63572: PPUSH
63573: PPUSH
// tmp := [ ] ;
63574: LD_ADDR_VAR 0 5
63578: PUSH
63579: EMPTY
63580: ST_TO_ADDR
// for i in units do
63581: LD_ADDR_VAR 0 4
63585: PUSH
63586: LD_VAR 0 1
63590: PUSH
63591: FOR_IN
63592: IFFALSE 63630
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63594: LD_ADDR_VAR 0 5
63598: PUSH
63599: LD_VAR 0 5
63603: PPUSH
63604: LD_VAR 0 5
63608: PUSH
63609: LD_INT 1
63611: PLUS
63612: PPUSH
63613: LD_VAR 0 4
63617: PPUSH
63618: CALL_OW 256
63622: PPUSH
63623: CALL_OW 2
63627: ST_TO_ADDR
63628: GO 63591
63630: POP
63631: POP
// if not tmp then
63632: LD_VAR 0 5
63636: NOT
63637: IFFALSE 63641
// exit ;
63639: GO 63689
// if asc then
63641: LD_VAR 0 2
63645: IFFALSE 63669
// result := SortListByListAsc ( units , tmp ) else
63647: LD_ADDR_VAR 0 3
63651: PUSH
63652: LD_VAR 0 1
63656: PPUSH
63657: LD_VAR 0 5
63661: PPUSH
63662: CALL_OW 76
63666: ST_TO_ADDR
63667: GO 63689
// result := SortListByListDesc ( units , tmp ) ;
63669: LD_ADDR_VAR 0 3
63673: PUSH
63674: LD_VAR 0 1
63678: PPUSH
63679: LD_VAR 0 5
63683: PPUSH
63684: CALL_OW 77
63688: ST_TO_ADDR
// end ;
63689: LD_VAR 0 3
63693: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63694: LD_INT 0
63696: PPUSH
63697: PPUSH
// task := GetTaskList ( mech ) ;
63698: LD_ADDR_VAR 0 4
63702: PUSH
63703: LD_VAR 0 1
63707: PPUSH
63708: CALL_OW 437
63712: ST_TO_ADDR
// if not task then
63713: LD_VAR 0 4
63717: NOT
63718: IFFALSE 63722
// exit ;
63720: GO 63764
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63722: LD_ADDR_VAR 0 3
63726: PUSH
63727: LD_VAR 0 4
63731: PUSH
63732: LD_INT 1
63734: ARRAY
63735: PUSH
63736: LD_INT 1
63738: ARRAY
63739: PUSH
63740: LD_STRING r
63742: EQUAL
63743: PUSH
63744: LD_VAR 0 4
63748: PUSH
63749: LD_INT 1
63751: ARRAY
63752: PUSH
63753: LD_INT 4
63755: ARRAY
63756: PUSH
63757: LD_VAR 0 2
63761: EQUAL
63762: AND
63763: ST_TO_ADDR
// end ;
63764: LD_VAR 0 3
63768: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63769: LD_INT 0
63771: PPUSH
// SetDir ( unit , d ) ;
63772: LD_VAR 0 1
63776: PPUSH
63777: LD_VAR 0 4
63781: PPUSH
63782: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63786: LD_VAR 0 1
63790: PPUSH
63791: LD_VAR 0 2
63795: PPUSH
63796: LD_VAR 0 3
63800: PPUSH
63801: LD_VAR 0 5
63805: PPUSH
63806: CALL_OW 48
// end ;
63810: LD_VAR 0 6
63814: RET
// export function ToNaturalNumber ( number ) ; begin
63815: LD_INT 0
63817: PPUSH
// result := number div 1 ;
63818: LD_ADDR_VAR 0 2
63822: PUSH
63823: LD_VAR 0 1
63827: PUSH
63828: LD_INT 1
63830: DIV
63831: ST_TO_ADDR
// if number < 0 then
63832: LD_VAR 0 1
63836: PUSH
63837: LD_INT 0
63839: LESS
63840: IFFALSE 63850
// result := 0 ;
63842: LD_ADDR_VAR 0 2
63846: PUSH
63847: LD_INT 0
63849: ST_TO_ADDR
// end ;
63850: LD_VAR 0 2
63854: RET
// export function SortByClass ( units , class ) ; var un ; begin
63855: LD_INT 0
63857: PPUSH
63858: PPUSH
// if not units or not class then
63859: LD_VAR 0 1
63863: NOT
63864: PUSH
63865: LD_VAR 0 2
63869: NOT
63870: OR
63871: IFFALSE 63875
// exit ;
63873: GO 63970
// result := [ ] ;
63875: LD_ADDR_VAR 0 3
63879: PUSH
63880: EMPTY
63881: ST_TO_ADDR
// for un in units do
63882: LD_ADDR_VAR 0 4
63886: PUSH
63887: LD_VAR 0 1
63891: PUSH
63892: FOR_IN
63893: IFFALSE 63968
// if GetClass ( un ) = class then
63895: LD_VAR 0 4
63899: PPUSH
63900: CALL_OW 257
63904: PUSH
63905: LD_VAR 0 2
63909: EQUAL
63910: IFFALSE 63937
// result := Insert ( result , 1 , un ) else
63912: LD_ADDR_VAR 0 3
63916: PUSH
63917: LD_VAR 0 3
63921: PPUSH
63922: LD_INT 1
63924: PPUSH
63925: LD_VAR 0 4
63929: PPUSH
63930: CALL_OW 2
63934: ST_TO_ADDR
63935: GO 63966
// result := Replace ( result , result + 1 , un ) ;
63937: LD_ADDR_VAR 0 3
63941: PUSH
63942: LD_VAR 0 3
63946: PPUSH
63947: LD_VAR 0 3
63951: PUSH
63952: LD_INT 1
63954: PLUS
63955: PPUSH
63956: LD_VAR 0 4
63960: PPUSH
63961: CALL_OW 1
63965: ST_TO_ADDR
63966: GO 63892
63968: POP
63969: POP
// end ;
63970: LD_VAR 0 3
63974: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63975: LD_INT 0
63977: PPUSH
63978: PPUSH
63979: PPUSH
63980: PPUSH
63981: PPUSH
63982: PPUSH
63983: PPUSH
// result := [ ] ;
63984: LD_ADDR_VAR 0 4
63988: PUSH
63989: EMPTY
63990: ST_TO_ADDR
// if x - r < 0 then
63991: LD_VAR 0 1
63995: PUSH
63996: LD_VAR 0 3
64000: MINUS
64001: PUSH
64002: LD_INT 0
64004: LESS
64005: IFFALSE 64017
// min_x := 0 else
64007: LD_ADDR_VAR 0 8
64011: PUSH
64012: LD_INT 0
64014: ST_TO_ADDR
64015: GO 64033
// min_x := x - r ;
64017: LD_ADDR_VAR 0 8
64021: PUSH
64022: LD_VAR 0 1
64026: PUSH
64027: LD_VAR 0 3
64031: MINUS
64032: ST_TO_ADDR
// if y - r < 0 then
64033: LD_VAR 0 2
64037: PUSH
64038: LD_VAR 0 3
64042: MINUS
64043: PUSH
64044: LD_INT 0
64046: LESS
64047: IFFALSE 64059
// min_y := 0 else
64049: LD_ADDR_VAR 0 7
64053: PUSH
64054: LD_INT 0
64056: ST_TO_ADDR
64057: GO 64075
// min_y := y - r ;
64059: LD_ADDR_VAR 0 7
64063: PUSH
64064: LD_VAR 0 2
64068: PUSH
64069: LD_VAR 0 3
64073: MINUS
64074: ST_TO_ADDR
// max_x := x + r ;
64075: LD_ADDR_VAR 0 9
64079: PUSH
64080: LD_VAR 0 1
64084: PUSH
64085: LD_VAR 0 3
64089: PLUS
64090: ST_TO_ADDR
// max_y := y + r ;
64091: LD_ADDR_VAR 0 10
64095: PUSH
64096: LD_VAR 0 2
64100: PUSH
64101: LD_VAR 0 3
64105: PLUS
64106: ST_TO_ADDR
// for _x = min_x to max_x do
64107: LD_ADDR_VAR 0 5
64111: PUSH
64112: DOUBLE
64113: LD_VAR 0 8
64117: DEC
64118: ST_TO_ADDR
64119: LD_VAR 0 9
64123: PUSH
64124: FOR_TO
64125: IFFALSE 64226
// for _y = min_y to max_y do
64127: LD_ADDR_VAR 0 6
64131: PUSH
64132: DOUBLE
64133: LD_VAR 0 7
64137: DEC
64138: ST_TO_ADDR
64139: LD_VAR 0 10
64143: PUSH
64144: FOR_TO
64145: IFFALSE 64222
// begin if not ValidHex ( _x , _y ) then
64147: LD_VAR 0 5
64151: PPUSH
64152: LD_VAR 0 6
64156: PPUSH
64157: CALL_OW 488
64161: NOT
64162: IFFALSE 64166
// continue ;
64164: GO 64144
// if GetResourceTypeXY ( _x , _y ) then
64166: LD_VAR 0 5
64170: PPUSH
64171: LD_VAR 0 6
64175: PPUSH
64176: CALL_OW 283
64180: IFFALSE 64220
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64182: LD_ADDR_VAR 0 4
64186: PUSH
64187: LD_VAR 0 4
64191: PPUSH
64192: LD_VAR 0 4
64196: PUSH
64197: LD_INT 1
64199: PLUS
64200: PPUSH
64201: LD_VAR 0 5
64205: PUSH
64206: LD_VAR 0 6
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PPUSH
64215: CALL_OW 1
64219: ST_TO_ADDR
// end ;
64220: GO 64144
64222: POP
64223: POP
64224: GO 64124
64226: POP
64227: POP
// end ;
64228: LD_VAR 0 4
64232: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64233: LD_INT 0
64235: PPUSH
64236: PPUSH
64237: PPUSH
64238: PPUSH
64239: PPUSH
64240: PPUSH
64241: PPUSH
64242: PPUSH
// if not units then
64243: LD_VAR 0 1
64247: NOT
64248: IFFALSE 64252
// exit ;
64250: GO 64677
// result := UnitFilter ( units , [ f_ok ] ) ;
64252: LD_ADDR_VAR 0 3
64256: PUSH
64257: LD_VAR 0 1
64261: PPUSH
64262: LD_INT 50
64264: PUSH
64265: EMPTY
64266: LIST
64267: PPUSH
64268: CALL_OW 72
64272: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64273: LD_ADDR_VAR 0 8
64277: PUSH
64278: LD_VAR 0 1
64282: PUSH
64283: LD_INT 1
64285: ARRAY
64286: PPUSH
64287: CALL_OW 255
64291: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
64292: LD_ADDR_VAR 0 10
64296: PUSH
64297: LD_INT 29
64299: PUSH
64300: LD_EXP 97
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: ST_TO_ADDR
// if not result then
64309: LD_VAR 0 3
64313: NOT
64314: IFFALSE 64318
// exit ;
64316: GO 64677
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64318: LD_ADDR_VAR 0 5
64322: PUSH
64323: LD_INT 81
64325: PUSH
64326: LD_VAR 0 8
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PPUSH
64335: CALL_OW 69
64339: ST_TO_ADDR
// for i in result do
64340: LD_ADDR_VAR 0 4
64344: PUSH
64345: LD_VAR 0 3
64349: PUSH
64350: FOR_IN
64351: IFFALSE 64675
// begin tag := GetTag ( i ) + 1 ;
64353: LD_ADDR_VAR 0 9
64357: PUSH
64358: LD_VAR 0 4
64362: PPUSH
64363: CALL_OW 110
64367: PUSH
64368: LD_INT 1
64370: PLUS
64371: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64372: LD_ADDR_VAR 0 7
64376: PUSH
64377: LD_VAR 0 4
64381: PPUSH
64382: CALL_OW 250
64386: PPUSH
64387: LD_VAR 0 4
64391: PPUSH
64392: CALL_OW 251
64396: PPUSH
64397: LD_INT 6
64399: PPUSH
64400: CALL 63975 0 3
64404: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64405: LD_VAR 0 7
64409: PUSH
64410: LD_VAR 0 4
64414: PPUSH
64415: CALL_OW 264
64419: PUSH
64420: LD_VAR 0 10
64424: IN
64425: NOT
64426: AND
64427: IFFALSE 64466
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64429: LD_VAR 0 4
64433: PPUSH
64434: LD_VAR 0 7
64438: PUSH
64439: LD_INT 1
64441: ARRAY
64442: PUSH
64443: LD_INT 1
64445: ARRAY
64446: PPUSH
64447: LD_VAR 0 7
64451: PUSH
64452: LD_INT 1
64454: ARRAY
64455: PUSH
64456: LD_INT 2
64458: ARRAY
64459: PPUSH
64460: CALL_OW 116
64464: GO 64673
// if path > tag then
64466: LD_VAR 0 2
64470: PUSH
64471: LD_VAR 0 9
64475: GREATER
64476: IFFALSE 64643
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
64478: LD_ADDR_VAR 0 6
64482: PUSH
64483: LD_VAR 0 5
64487: PPUSH
64488: LD_INT 91
64490: PUSH
64491: LD_VAR 0 4
64495: PUSH
64496: LD_INT 12
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: LIST
64503: PPUSH
64504: CALL_OW 72
64508: ST_TO_ADDR
// if nearEnemy then
64509: LD_VAR 0 6
64513: IFFALSE 64541
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64515: LD_VAR 0 4
64519: PPUSH
64520: LD_VAR 0 6
64524: PPUSH
64525: LD_VAR 0 4
64529: PPUSH
64530: CALL_OW 74
64534: PPUSH
64535: CALL_OW 115
64539: GO 64641
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64541: LD_VAR 0 4
64545: PPUSH
64546: LD_VAR 0 2
64550: PUSH
64551: LD_VAR 0 9
64555: ARRAY
64556: PUSH
64557: LD_INT 1
64559: ARRAY
64560: PPUSH
64561: LD_VAR 0 2
64565: PUSH
64566: LD_VAR 0 9
64570: ARRAY
64571: PUSH
64572: LD_INT 2
64574: ARRAY
64575: PPUSH
64576: CALL_OW 297
64580: PUSH
64581: LD_INT 6
64583: GREATER
64584: IFFALSE 64627
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64586: LD_VAR 0 4
64590: PPUSH
64591: LD_VAR 0 2
64595: PUSH
64596: LD_VAR 0 9
64600: ARRAY
64601: PUSH
64602: LD_INT 1
64604: ARRAY
64605: PPUSH
64606: LD_VAR 0 2
64610: PUSH
64611: LD_VAR 0 9
64615: ARRAY
64616: PUSH
64617: LD_INT 2
64619: ARRAY
64620: PPUSH
64621: CALL_OW 114
64625: GO 64641
// SetTag ( i , tag ) ;
64627: LD_VAR 0 4
64631: PPUSH
64632: LD_VAR 0 9
64636: PPUSH
64637: CALL_OW 109
// end else
64641: GO 64673
// if enemy then
64643: LD_VAR 0 5
64647: IFFALSE 64673
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64649: LD_VAR 0 4
64653: PPUSH
64654: LD_VAR 0 5
64658: PPUSH
64659: LD_VAR 0 4
64663: PPUSH
64664: CALL_OW 74
64668: PPUSH
64669: CALL_OW 115
// end ;
64673: GO 64350
64675: POP
64676: POP
// end ;
64677: LD_VAR 0 3
64681: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64682: LD_INT 0
64684: PPUSH
64685: PPUSH
64686: PPUSH
// if not unit or IsInUnit ( unit ) then
64687: LD_VAR 0 1
64691: NOT
64692: PUSH
64693: LD_VAR 0 1
64697: PPUSH
64698: CALL_OW 310
64702: OR
64703: IFFALSE 64707
// exit ;
64705: GO 64798
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64707: LD_ADDR_VAR 0 4
64711: PUSH
64712: LD_VAR 0 1
64716: PPUSH
64717: CALL_OW 250
64721: PPUSH
64722: LD_VAR 0 2
64726: PPUSH
64727: LD_INT 1
64729: PPUSH
64730: CALL_OW 272
64734: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64735: LD_ADDR_VAR 0 5
64739: PUSH
64740: LD_VAR 0 1
64744: PPUSH
64745: CALL_OW 251
64749: PPUSH
64750: LD_VAR 0 2
64754: PPUSH
64755: LD_INT 1
64757: PPUSH
64758: CALL_OW 273
64762: ST_TO_ADDR
// if ValidHex ( x , y ) then
64763: LD_VAR 0 4
64767: PPUSH
64768: LD_VAR 0 5
64772: PPUSH
64773: CALL_OW 488
64777: IFFALSE 64798
// ComTurnXY ( unit , x , y ) ;
64779: LD_VAR 0 1
64783: PPUSH
64784: LD_VAR 0 4
64788: PPUSH
64789: LD_VAR 0 5
64793: PPUSH
64794: CALL_OW 118
// end ;
64798: LD_VAR 0 3
64802: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64803: LD_INT 0
64805: PPUSH
64806: PPUSH
// result := false ;
64807: LD_ADDR_VAR 0 3
64811: PUSH
64812: LD_INT 0
64814: ST_TO_ADDR
// if not units then
64815: LD_VAR 0 2
64819: NOT
64820: IFFALSE 64824
// exit ;
64822: GO 64869
// for i in units do
64824: LD_ADDR_VAR 0 4
64828: PUSH
64829: LD_VAR 0 2
64833: PUSH
64834: FOR_IN
64835: IFFALSE 64867
// if See ( side , i ) then
64837: LD_VAR 0 1
64841: PPUSH
64842: LD_VAR 0 4
64846: PPUSH
64847: CALL_OW 292
64851: IFFALSE 64865
// begin result := true ;
64853: LD_ADDR_VAR 0 3
64857: PUSH
64858: LD_INT 1
64860: ST_TO_ADDR
// exit ;
64861: POP
64862: POP
64863: GO 64869
// end ;
64865: GO 64834
64867: POP
64868: POP
// end ;
64869: LD_VAR 0 3
64873: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64874: LD_INT 0
64876: PPUSH
64877: PPUSH
64878: PPUSH
64879: PPUSH
// if not unit or not points then
64880: LD_VAR 0 1
64884: NOT
64885: PUSH
64886: LD_VAR 0 2
64890: NOT
64891: OR
64892: IFFALSE 64896
// exit ;
64894: GO 64986
// dist := 99999 ;
64896: LD_ADDR_VAR 0 5
64900: PUSH
64901: LD_INT 99999
64903: ST_TO_ADDR
// for i in points do
64904: LD_ADDR_VAR 0 4
64908: PUSH
64909: LD_VAR 0 2
64913: PUSH
64914: FOR_IN
64915: IFFALSE 64984
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64917: LD_ADDR_VAR 0 6
64921: PUSH
64922: LD_VAR 0 1
64926: PPUSH
64927: LD_VAR 0 4
64931: PUSH
64932: LD_INT 1
64934: ARRAY
64935: PPUSH
64936: LD_VAR 0 4
64940: PUSH
64941: LD_INT 2
64943: ARRAY
64944: PPUSH
64945: CALL_OW 297
64949: ST_TO_ADDR
// if tmpDist < dist then
64950: LD_VAR 0 6
64954: PUSH
64955: LD_VAR 0 5
64959: LESS
64960: IFFALSE 64982
// begin result := i ;
64962: LD_ADDR_VAR 0 3
64966: PUSH
64967: LD_VAR 0 4
64971: ST_TO_ADDR
// dist := tmpDist ;
64972: LD_ADDR_VAR 0 5
64976: PUSH
64977: LD_VAR 0 6
64981: ST_TO_ADDR
// end ; end ;
64982: GO 64914
64984: POP
64985: POP
// end ;
64986: LD_VAR 0 3
64990: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64991: LD_INT 0
64993: PPUSH
// uc_side := side ;
64994: LD_ADDR_OWVAR 20
64998: PUSH
64999: LD_VAR 0 1
65003: ST_TO_ADDR
// uc_nation := 3 ;
65004: LD_ADDR_OWVAR 21
65008: PUSH
65009: LD_INT 3
65011: ST_TO_ADDR
// vc_chassis := 25 ;
65012: LD_ADDR_OWVAR 37
65016: PUSH
65017: LD_INT 25
65019: ST_TO_ADDR
// vc_engine := engine_siberite ;
65020: LD_ADDR_OWVAR 39
65024: PUSH
65025: LD_INT 3
65027: ST_TO_ADDR
// vc_control := control_computer ;
65028: LD_ADDR_OWVAR 38
65032: PUSH
65033: LD_INT 3
65035: ST_TO_ADDR
// vc_weapon := 59 ;
65036: LD_ADDR_OWVAR 40
65040: PUSH
65041: LD_INT 59
65043: ST_TO_ADDR
// result := CreateVehicle ;
65044: LD_ADDR_VAR 0 5
65048: PUSH
65049: CALL_OW 45
65053: ST_TO_ADDR
// SetDir ( result , d ) ;
65054: LD_VAR 0 5
65058: PPUSH
65059: LD_VAR 0 4
65063: PPUSH
65064: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65068: LD_VAR 0 5
65072: PPUSH
65073: LD_VAR 0 2
65077: PPUSH
65078: LD_VAR 0 3
65082: PPUSH
65083: LD_INT 0
65085: PPUSH
65086: CALL_OW 48
// end ;
65090: LD_VAR 0 5
65094: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65095: LD_INT 0
65097: PPUSH
65098: PPUSH
65099: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65100: LD_ADDR_VAR 0 2
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65123: LD_VAR 0 1
65127: NOT
65128: PUSH
65129: LD_VAR 0 1
65133: PPUSH
65134: CALL_OW 264
65138: PUSH
65139: LD_INT 12
65141: PUSH
65142: LD_INT 51
65144: PUSH
65145: LD_INT 32
65147: PUSH
65148: LD_EXP 94
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: IN
65159: NOT
65160: OR
65161: IFFALSE 65165
// exit ;
65163: GO 65263
// for i := 1 to 3 do
65165: LD_ADDR_VAR 0 3
65169: PUSH
65170: DOUBLE
65171: LD_INT 1
65173: DEC
65174: ST_TO_ADDR
65175: LD_INT 3
65177: PUSH
65178: FOR_TO
65179: IFFALSE 65261
// begin tmp := GetCargo ( cargo , i ) ;
65181: LD_ADDR_VAR 0 4
65185: PUSH
65186: LD_VAR 0 1
65190: PPUSH
65191: LD_VAR 0 3
65195: PPUSH
65196: CALL_OW 289
65200: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65201: LD_ADDR_VAR 0 2
65205: PUSH
65206: LD_VAR 0 2
65210: PPUSH
65211: LD_VAR 0 3
65215: PPUSH
65216: LD_VAR 0 4
65220: PPUSH
65221: CALL_OW 1
65225: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65226: LD_ADDR_VAR 0 2
65230: PUSH
65231: LD_VAR 0 2
65235: PPUSH
65236: LD_INT 4
65238: PPUSH
65239: LD_VAR 0 2
65243: PUSH
65244: LD_INT 4
65246: ARRAY
65247: PUSH
65248: LD_VAR 0 4
65252: PLUS
65253: PPUSH
65254: CALL_OW 1
65258: ST_TO_ADDR
// end ;
65259: GO 65178
65261: POP
65262: POP
// end ; end_of_file
65263: LD_VAR 0 2
65267: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65268: LD_VAR 0 1
65272: PPUSH
65273: LD_VAR 0 2
65277: PPUSH
65278: LD_VAR 0 3
65282: PPUSH
65283: LD_VAR 0 4
65287: PPUSH
65288: LD_VAR 0 5
65292: PPUSH
65293: LD_VAR 0 6
65297: PPUSH
65298: CALL 5853 0 6
// end ;
65302: PPOPN 6
65304: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65305: CALL 5828 0 0
// end ;
65309: PPOPN 1
65311: END
