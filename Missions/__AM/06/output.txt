// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 166 0 0
// PrepareDeltaBase ;
  86: CALL 2408 0 0
// LoadVehicles ;
  90: CALL 1448 0 0
// PrepareHeroes ;
  94: CALL 287 0 0
// PrepareRandoms ;
  98: CALL 1749 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// end ;
 165: END
// export function CreateNature ; var i ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
// uc_side := 0 ;
 170: LD_ADDR_OWVAR 20
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// uc_nation := 0 ;
 178: LD_ADDR_OWVAR 21
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// for i = 1 to 4 do
 186: LD_ADDR_VAR 0 2
 190: PUSH
 191: DOUBLE
 192: LD_INT 1
 194: DEC
 195: ST_TO_ADDR
 196: LD_INT 4
 198: PUSH
 199: FOR_TO
 200: IFFALSE 280
// begin hc_gallery :=  ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING 
 209: ST_TO_ADDR
// hc_name :=  ;
 210: LD_ADDR_OWVAR 26
 214: PUSH
 215: LD_STRING 
 217: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 218: LD_ADDR_OWVAR 29
 222: PUSH
 223: LD_INT 10
 225: PPUSH
 226: LD_INT 11
 228: PPUSH
 229: CALL_OW 12
 233: PUSH
 234: LD_INT 10
 236: PPUSH
 237: LD_INT 12
 239: PPUSH
 240: CALL_OW 12
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// hc_class := class_apeman ;
 249: LD_ADDR_OWVAR 28
 253: PUSH
 254: LD_INT 12
 256: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 257: CALL_OW 44
 261: PPUSH
 262: LD_INT 22
 264: PPUSH
 265: LD_INT 18
 267: PPUSH
 268: LD_INT 20
 270: PPUSH
 271: LD_INT 0
 273: PPUSH
 274: CALL_OW 50
// end ;
 278: GO 199
 280: POP
 281: POP
// end ; end_of_file
 282: LD_VAR 0 1
 286: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
 291: PPUSH
 292: PPUSH
 293: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 294: LD_ADDR_VAR 0 3
 298: PUSH
 299: LD_INT 22
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 21
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: ARRAY
 347: PPUSH
 348: LD_STRING delta
 350: PPUSH
 351: CALL_OW 500
// uc_side = 1 ;
 355: LD_ADDR_OWVAR 20
 359: PUSH
 360: LD_INT 1
 362: ST_TO_ADDR
// uc_nation = 1 ;
 363: LD_ADDR_OWVAR 21
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_STRING JMM
 378: PPUSH
 379: LD_INT 1
 381: PPUSH
 382: LD_EXP 23
 386: PPUSH
 387: CALL 20399 0 3
 391: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 392: LD_ADDR_EXP 16
 396: PUSH
 397: LD_STRING Harisson
 399: PPUSH
 400: LD_INT 0
 402: PPUSH
 403: LD_STRING 
 405: PPUSH
 406: CALL 20399 0 3
 410: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 411: LD_EXP 1
 415: PPUSH
 416: LD_VAR 0 3
 420: PUSH
 421: LD_INT 1
 423: ARRAY
 424: PPUSH
 425: CALL_OW 250
 429: PPUSH
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 1
 437: ARRAY
 438: PPUSH
 439: CALL_OW 251
 443: PPUSH
 444: LD_INT 5
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 454: LD_EXP 1
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 466: LD_ADDR_EXP 2
 470: PUSH
 471: LD_STRING Gladstone
 473: PPUSH
 474: LD_INT 1
 476: PPUSH
 477: LD_EXP 23
 481: PPUSH
 482: CALL 20399 0 3
 486: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 487: LD_EXP 2
 491: PPUSH
 492: LD_VAR 0 3
 496: PUSH
 497: LD_INT 1
 499: ARRAY
 500: PPUSH
 501: CALL_OW 250
 505: PPUSH
 506: LD_VAR 0 3
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: CALL_OW 251
 519: PPUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 0
 525: PPUSH
 526: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 530: LD_EXP 2
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 336
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 3
 546: PUSH
 547: LD_STRING Denis
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: LD_EXP 23
 557: PPUSH
 558: CALL 20399 0 3
 562: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 563: LD_EXP 3
 567: PPUSH
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PPUSH
 577: CALL_OW 250
 581: PPUSH
 582: LD_VAR 0 3
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: PPUSH
 591: CALL_OW 251
 595: PPUSH
 596: LD_INT 5
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 606: LD_EXP 3
 610: PPUSH
 611: LD_INT 4
 613: PPUSH
 614: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 618: LD_STRING FrankInDelta
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 30
 628: PUSH
 629: LD_INT 1
 631: EQUAL
 632: IFFALSE 710
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 5
 638: PUSH
 639: LD_STRING Frank
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: LD_EXP 23
 649: PPUSH
 650: CALL 20399 0 3
 654: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 655: LD_EXP 5
 659: PPUSH
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 1
 667: ARRAY
 668: PPUSH
 669: CALL_OW 250
 673: PPUSH
 674: LD_VAR 0 3
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: CALL_OW 251
 687: PPUSH
 688: LD_INT 5
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 698: LD_EXP 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 710: LD_STRING LisaInDelta
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 30
 720: PUSH
 721: LD_INT 1
 723: EQUAL
 724: IFFALSE 802
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 726: LD_ADDR_EXP 4
 730: PUSH
 731: LD_STRING Lisa
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_EXP 23
 741: PPUSH
 742: CALL 20399 0 3
 746: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 747: LD_EXP 4
 751: PPUSH
 752: LD_VAR 0 3
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 250
 765: PPUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 251
 779: PPUSH
 780: LD_INT 5
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 790: LD_EXP 4
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 802: LD_STRING BobbyInDelta
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 30
 812: PUSH
 813: LD_INT 1
 815: EQUAL
 816: IFFALSE 894
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 6
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_EXP 23
 833: PPUSH
 834: CALL 20399 0 3
 838: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 839: LD_EXP 6
 843: PPUSH
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: CALL_OW 250
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: CALL_OW 251
 871: PPUSH
 872: LD_INT 5
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 882: LD_EXP 6
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 894: LD_STRING CyrusInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: PUSH
 905: LD_INT 1
 907: EQUAL
 908: IFFALSE 986
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 7
 914: PUSH
 915: LD_STRING Cyrus
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 23
 925: PPUSH
 926: CALL 20399 0 3
 930: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 931: LD_EXP 7
 935: PPUSH
 936: LD_VAR 0 3
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: PPUSH
 945: CALL_OW 250
 949: PPUSH
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: CALL_OW 251
 963: PPUSH
 964: LD_INT 5
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 974: LD_EXP 7
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 986: LD_STRING DonaldsonInDelta
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1078
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1002: LD_ADDR_EXP 9
1006: PUSH
1007: LD_STRING Donaldson
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_EXP 23
1017: PPUSH
1018: CALL 20399 0 3
1022: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1066: LD_EXP 9
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1078: LD_STRING BrownInDelta
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1170
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1094: LD_ADDR_EXP 8
1098: PUSH
1099: LD_STRING Brown
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: LD_EXP 23
1109: PPUSH
1110: CALL 20399 0 3
1114: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1115: LD_EXP 8
1119: PPUSH
1120: LD_VAR 0 3
1124: PUSH
1125: LD_INT 1
1127: ARRAY
1128: PPUSH
1129: CALL_OW 250
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_INT 1
1141: ARRAY
1142: PPUSH
1143: CALL_OW 251
1147: PPUSH
1148: LD_INT 5
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1158: LD_EXP 8
1162: PPUSH
1163: LD_INT 2
1165: PPUSH
1166: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1170: LD_ADDR_EXP 10
1174: PUSH
1175: LD_STRING othersInDelta
1177: PPUSH
1178: CALL_OW 31
1182: ST_TO_ADDR
// for i in others do
1183: LD_ADDR_VAR 0 2
1187: PUSH
1188: LD_EXP 10
1192: PUSH
1193: FOR_IN
1194: IFFALSE 1241
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1196: LD_VAR 0 2
1200: PPUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: PPUSH
1210: CALL_OW 250
1214: PPUSH
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 251
1228: PPUSH
1229: LD_INT 35
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 50
1239: GO 1193
1241: POP
1242: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1243: LD_ADDR_EXP 12
1247: PUSH
1248: LD_STRING apeInDelta
1250: PPUSH
1251: CALL_OW 31
1255: ST_TO_ADDR
// uc_nation = 0 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 0
1263: ST_TO_ADDR
// if apemans > 5 then
1264: LD_EXP 12
1268: PUSH
1269: LD_INT 5
1271: GREATER
1272: IFFALSE 1367
// begin for i := 1 to 5 do
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: DOUBLE
1280: LD_INT 1
1282: DEC
1283: ST_TO_ADDR
1284: LD_INT 5
1286: PUSH
1287: FOR_TO
1288: IFFALSE 1363
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1290: LD_EXP 12
1294: PUSH
1295: LD_VAR 0 2
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 250
1314: PPUSH
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 251
1328: PPUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1339: LD_ADDR_EXP 13
1343: PUSH
1344: LD_EXP 13
1348: PUSH
1349: LD_EXP 12
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: ADD
1360: ST_TO_ADDR
// end ;
1361: GO 1287
1363: POP
1364: POP
// end else
1365: GO 1443
// begin for i in apemans do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: LD_EXP 12
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1441
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_VAR 0 3
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 250
1398: PPUSH
1399: LD_VAR 0 3
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 50
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1423: LD_ADDR_EXP 13
1427: PUSH
1428: LD_EXP 13
1432: PUSH
1433: LD_VAR 0 2
1437: ADD
1438: ST_TO_ADDR
// end ;
1439: GO 1377
1441: POP
1442: POP
// end ; end ;
1443: LD_VAR 0 1
1447: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
1454: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 21
1472: PUSH
1473: LD_INT 3
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 30
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_STRING vehiclesInDelta
1515: PPUSH
1516: EMPTY
1517: PPUSH
1518: CALL_OW 30
1522: ST_TO_ADDR
// for i = 1 to vehicles do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: DOUBLE
1529: LD_INT 1
1531: DEC
1532: ST_TO_ADDR
1533: LD_VAR 0 5
1537: PUSH
1538: FOR_TO
1539: IFFALSE 1742
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: PUSH
1551: LD_INT 4
1553: PLUS
1554: ARRAY
1555: PUSH
1556: LD_INT 11
1558: EQUAL
1559: PUSH
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 2
1569: ARRAY
1570: PUSH
1571: LD_INT 3
1573: EQUAL
1574: OR
1575: IFFALSE 1726
// begin uc_nation = vehicles [ i ] ;
1577: LD_ADDR_OWVAR 21
1581: PUSH
1582: LD_VAR 0 5
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1593: LD_ADDR_OWVAR 37
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1613: LD_ADDR_OWVAR 39
1617: PUSH
1618: LD_VAR 0 5
1622: PUSH
1623: LD_VAR 0 2
1627: PUSH
1628: LD_INT 2
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1633: LD_ADDR_OWVAR 38
1637: PUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: PUSH
1648: LD_INT 3
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1653: LD_ADDR_OWVAR 40
1657: PUSH
1658: LD_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: PUSH
1668: LD_INT 4
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// veh = CreateVehicle ;
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: CALL_OW 45
1682: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1683: LD_VAR 0 3
1687: PPUSH
1688: LD_VAR 0 4
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: CALL_OW 250
1701: PPUSH
1702: LD_VAR 0 4
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: PPUSH
1711: CALL_OW 251
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 50
// end ; i = i + 4 ;
1726: LD_ADDR_VAR 0 2
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 4
1738: PLUS
1739: ST_TO_ADDR
// end ;
1740: GO 1538
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
1755: PPUSH
// uc_side = 1 ;
1756: LD_ADDR_OWVAR 20
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// uc_nation = 1 ;
1764: LD_ADDR_OWVAR 21
1768: PUSH
1769: LD_INT 1
1771: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1772: LD_ADDR_VAR 0 4
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 21
1789: PUSH
1790: LD_INT 3
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1817: LD_INT 22
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 25
1829: PUSH
1830: LD_INT 4
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: PPUSH
1855: CALL_OW 69
1859: PUSH
1860: LD_EXP 1
1864: PUSH
1865: LD_EXP 7
1869: PUSH
1870: LD_EXP 6
1874: PUSH
1875: LD_EXP 5
1879: PUSH
1880: LD_EXP 2
1884: PUSH
1885: LD_EXP 3
1889: PUSH
1890: LD_EXP 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: DIFF
1904: IFFALSE 2005
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1906: LD_ADDR_EXP 15
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 25
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 69
1953: PUSH
1954: LD_EXP 1
1958: PUSH
1959: LD_EXP 7
1963: PUSH
1964: LD_EXP 6
1968: PUSH
1969: LD_EXP 5
1973: PUSH
1974: LD_EXP 2
1978: PUSH
1979: LD_EXP 3
1983: PUSH
1984: LD_EXP 8
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: DIFF
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: ST_TO_ADDR
2003: GO 2152
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: PPUSH
2037: CALL_OW 69
2041: PUSH
2042: LD_EXP 1
2046: PUSH
2047: LD_EXP 7
2051: PUSH
2052: LD_EXP 6
2056: PUSH
2057: LD_EXP 5
2061: PUSH
2062: LD_EXP 2
2066: PUSH
2067: LD_EXP 3
2071: PUSH
2072: LD_EXP 8
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: DIFF
2086: ST_TO_ADDR
// if filter then
2087: LD_VAR 0 5
2091: IFFALSE 2152
// for i in filter do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_VAR 0 5
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2150
// if GetSkill ( i , 4 ) >= 4 then
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 259
2118: PUSH
2119: LD_INT 4
2121: GREATEREQUAL
2122: IFFALSE 2148
// begin deltaDoctor := i ;
2124: LD_ADDR_EXP 15
2128: PUSH
2129: LD_VAR 0 2
2133: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2134: LD_EXP 15
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// break ;
2146: GO 2150
// end ;
2148: GO 2103
2150: POP
2151: POP
// end ; for i = 1 to 7 do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 7
2164: PUSH
2165: FOR_TO
2166: IFFALSE 2303
// begin hc_gallery =  ;
2168: LD_ADDR_OWVAR 33
2172: PUSH
2173: LD_STRING 
2175: ST_TO_ADDR
// hc_name =  ;
2176: LD_ADDR_OWVAR 26
2180: PUSH
2181: LD_STRING 
2183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2184: LD_INT 0
2186: PPUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 1
2207: PPUSH
2208: LD_INT 4
2210: PPUSH
2211: CALL_OW 12
2215: ARRAY
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 12
2227: PPUSH
2228: CALL_OW 380
// un = CreateHuman ;
2232: LD_ADDR_VAR 0 3
2236: PUSH
2237: CALL_OW 44
2241: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2242: LD_ADDR_EXP 11
2246: PUSH
2247: LD_EXP 11
2251: PUSH
2252: LD_VAR 0 3
2256: ADD
2257: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 250
2276: PPUSH
2277: LD_VAR 0 4
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 251
2290: PPUSH
2291: LD_INT 15
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// end ;
2301: GO 2165
2303: POP
2304: POP
// if deltaDoctor then
2305: LD_EXP 15
2309: IFFALSE 2313
// exit ;
2311: GO 2403
// hc_gallery = Dawkins ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING Dawkins
2320: ST_TO_ADDR
// hc_face_number := 1 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Dr. Adam Charles Dawkins
2336: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 380
// deltaDoctor = CreateHuman ;
2350: LD_ADDR_EXP 15
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2360: LD_EXP 15
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 250
2378: PPUSH
2379: LD_VAR 0 4
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: CALL_OW 251
2392: PPUSH
2393: LD_INT 5
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 50
// end ; end_of_file
2403: LD_VAR 0 1
2407: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_STRING buildingsInDelta
2424: PPUSH
2425: EMPTY
2426: PPUSH
2427: CALL_OW 30
2431: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 40
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: CALL_OW 441
// uc_side = 1 ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// uc_nation = 1 ;
2453: LD_ADDR_OWVAR 21
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i = 1 to buildings do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_VAR 0 5
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2775
// begin bc_type = buildings [ i ] [ 1 ] ;
2479: LD_ADDR_OWVAR 42
2483: PUSH
2484: LD_VAR 0 5
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2499: LD_ADDR_OWVAR 43
2503: PUSH
2504: LD_VAR 0 5
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: ST_TO_ADDR
// if bc_type = b_lab then
2519: LD_OWVAR 42
2523: PUSH
2524: LD_INT 6
2526: EQUAL
2527: IFFALSE 2545
// begin bc_kind1 = b_lab_basic ;
2529: LD_ADDR_OWVAR 44
2533: PUSH
2534: LD_INT 9
2536: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2537: LD_ADDR_OWVAR 45
2541: PUSH
2542: LD_INT 9
2544: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2545: LD_OWVAR 42
2549: PUSH
2550: LD_INT 7
2552: EQUAL
2553: PUSH
2554: LD_OWVAR 42
2558: PUSH
2559: LD_INT 8
2561: EQUAL
2562: OR
2563: IFFALSE 2679
// begin if buildings [ i ] [ 6 ] then
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 2
2574: ARRAY
2575: PUSH
2576: LD_INT 6
2578: ARRAY
2579: IFFALSE 2601
// bc_kind1 = buildings [ i ] [ 6 ] ;
2581: LD_ADDR_OWVAR 44
2585: PUSH
2586: LD_VAR 0 5
2590: PUSH
2591: LD_VAR 0 2
2595: ARRAY
2596: PUSH
2597: LD_INT 6
2599: ARRAY
2600: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2601: LD_VAR 0 5
2605: PUSH
2606: LD_VAR 0 2
2610: ARRAY
2611: PUSH
2612: LD_INT 7
2614: ARRAY
2615: IFFALSE 2637
// bc_kind2 = buildings [ i ] [ 7 ] ;
2617: LD_ADDR_OWVAR 45
2621: PUSH
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 2
2631: ARRAY
2632: PUSH
2633: LD_INT 7
2635: ARRAY
2636: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 2
2646: ARRAY
2647: PUSH
2648: LD_INT 6
2650: ARRAY
2651: NOT
2652: PUSH
2653: LD_VAR 0 5
2657: PUSH
2658: LD_VAR 0 2
2662: ARRAY
2663: PUSH
2664: LD_INT 7
2666: ARRAY
2667: NOT
2668: AND
2669: IFFALSE 2679
// bc_type := b_lab ;
2671: LD_ADDR_OWVAR 42
2675: PUSH
2676: LD_INT 6
2678: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 5
2688: PUSH
2689: LD_VAR 0 2
2693: ARRAY
2694: PUSH
2695: LD_INT 3
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 5
2703: PUSH
2704: LD_VAR 0 2
2708: ARRAY
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 5
2718: PUSH
2719: LD_VAR 0 2
2723: ARRAY
2724: PUSH
2725: LD_INT 5
2727: ARRAY
2728: PPUSH
2729: CALL_OW 47
2733: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2734: LD_VAR 0 4
2738: PPUSH
2739: CALL_OW 266
2743: PUSH
2744: LD_INT 32
2746: EQUAL
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2476
2775: POP
2776: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2874: LD_VAR 0 6
2878: PUSH
2879: LD_INT 0
2881: GREATER
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_INT 0
2890: GREATER
2891: AND
2892: IFFALSE 2902
// baseCorrect = 1 ;
2894: LD_ADDR_EXP 18
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
// if baseCorrect = 0 then
2902: LD_EXP 18
2906: PUSH
2907: LD_INT 0
2909: EQUAL
2910: IFFALSE 3283
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 69
2945: PUSH
2946: FOR_IN
2947: IFFALSE 2960
// RemoveUnit ( i ) ;
2949: LD_VAR 0 2
2953: PPUSH
2954: CALL_OW 64
2958: GO 2946
2960: POP
2961: POP
// uc_nation = 1 ;
2962: LD_ADDR_OWVAR 21
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// uc_side = 1 ;
2970: LD_ADDR_OWVAR 20
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// bc_level = 5 ;
2978: LD_ADDR_OWVAR 43
2982: PUSH
2983: LD_INT 5
2985: ST_TO_ADDR
// bc_type = b_depot ;
2986: LD_ADDR_OWVAR 42
2990: PUSH
2991: LD_INT 0
2993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2994: LD_INT 50
2996: PPUSH
2997: LD_INT 22
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: CALL_OW 47
// bc_type = b_bunker ;
3007: LD_ADDR_OWVAR 42
3011: PUSH
3012: LD_INT 32
3014: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3015: LD_ADDR_VAR 0 4
3019: PUSH
3020: LD_INT 68
3022: PPUSH
3023: LD_INT 24
3025: PPUSH
3026: LD_INT 4
3028: PPUSH
3029: CALL_OW 47
3033: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 11
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 12
3059: ARRAY
3060: PPUSH
3061: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_INT 71
3072: PPUSH
3073: LD_INT 34
3075: PPUSH
3076: LD_INT 4
3078: PPUSH
3079: CALL_OW 47
3083: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3084: LD_VAR 0 4
3088: PPUSH
3089: LD_INT 4
3091: PUSH
3092: LD_INT 11
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 1
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 12
3109: ARRAY
3110: PPUSH
3111: CALL_OW 431
// bc_type = 31 ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3123: LD_INT 51
3125: PPUSH
3126: LD_INT 7
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL_OW 47
// bc_type = b_oil_mine ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 29
3143: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3144: LD_INT 68
3146: PPUSH
3147: LD_INT 40
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 47
// bc_type = b_workshop ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_INT 2
3164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3165: LD_INT 38
3167: PPUSH
3168: LD_INT 20
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: CALL_OW 47
// bc_type = b_armoury ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 4
3185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3186: LD_INT 38
3188: PPUSH
3189: LD_INT 20
3191: PPUSH
3192: LD_INT 2
3194: PPUSH
3195: CALL_OW 47
// bc_type = b_solar_power ;
3199: LD_ADDR_OWVAR 42
3203: PUSH
3204: LD_INT 27
3206: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3207: LD_INT 46
3209: PPUSH
3210: LD_INT 12
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3220: LD_INT 48
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3233: LD_INT 49
3235: PPUSH
3236: LD_INT 11
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: CALL_OW 47
// bc_type = b_lab_half ;
3246: LD_ADDR_OWVAR 42
3250: PUSH
3251: LD_INT 7
3253: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3254: LD_ADDR_OWVAR 44
3258: PUSH
3259: LD_INT 15
3261: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3262: LD_ADDR_OWVAR 45
3266: PUSH
3267: LD_INT 9
3269: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3270: LD_INT 42
3272: PPUSH
3273: LD_INT 15
3275: PPUSH
3276: LD_INT 2
3278: PPUSH
3279: CALL_OW 47
// end ; end ; end_of_file
3283: LD_VAR 0 1
3287: RET
// every 1 do var i , j , tmp ;
3288: GO 3290
3290: DISABLE
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
// begin InGameOn ;
3296: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3300: LD_EXP 20
3304: PUSH
3305: LD_INT 1
3307: ARRAY
3308: PPUSH
3309: CALL_OW 87
// if IsOK ( Denis ) then
3313: LD_EXP 3
3317: PPUSH
3318: CALL_OW 302
3322: IFFALSE 3350
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3324: LD_INT 6
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: LD_INT 2
3332: PPUSH
3333: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3337: LD_INT 20
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3380: LD_EXP 15
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3394: LD_EXP 1
3398: PPUSH
3399: LD_EXP 15
3403: PPUSH
3404: CALL_OW 296
3408: PUSH
3409: LD_INT 5
3411: LESS
3412: IFFALSE 3373
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_EXP 1
3423: PPUSH
3424: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3428: LD_EXP 1
3432: PPUSH
3433: LD_STRING D1-JMM-1
3435: PPUSH
3436: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3440: LD_EXP 15
3444: PPUSH
3445: LD_STRING D1-Sci-1
3447: PPUSH
3448: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3452: LD_EXP 1
3456: PUSH
3457: LD_EXP 15
3461: PUSH
3462: LD_EXP 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: PPUSH
3472: LD_EXP 20
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 120
// end ;
3485: PPOPN 3
3487: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3488: LD_EXP 1
3492: PPUSH
3493: CALL_OW 310
3497: PUSH
3498: LD_EXP 20
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: EQUAL
3507: PUSH
3508: LD_EXP 15
3512: PPUSH
3513: CALL_OW 310
3517: PUSH
3518: LD_EXP 20
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: EQUAL
3527: AND
3528: IFFALSE 4074
3530: GO 3532
3532: DISABLE
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3538: LD_EXP 20
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D1-JMM-2
3558: PPUSH
3559: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D1-Sci-2
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D1-JMM-3
3582: PPUSH
3583: CALL_OW 88
// if IsOK ( Denis ) then
3587: LD_EXP 3
3591: PPUSH
3592: CALL_OW 302
3596: IFFALSE 3612
// Say ( DeltaDoctor , D1-Sci-3 ) else
3598: LD_EXP 15
3602: PPUSH
3603: LD_STRING D1-Sci-3
3605: PPUSH
3606: CALL_OW 88
3610: GO 3624
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3612: LD_EXP 15
3616: PPUSH
3617: LD_STRING D1-Sci-3a
3619: PPUSH
3620: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING D1-JMM-4
3631: PPUSH
3632: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_INT 22
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 25
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: LD_INT 54
3666: PUSH
3667: EMPTY
3668: LIST
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 69
3683: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3684: LD_ADDR_VAR 0 1
3688: PUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3755
// for j in tmp do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3751
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 250
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 251
3744: PPUSH
3745: CALL_OW 191
3749: GO 3717
3751: POP
3752: POP
3753: GO 3704
3755: POP
3756: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3757: LD_EXP 15
3761: PPUSH
3762: LD_STRING D1-Sci-4
3764: PPUSH
3765: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3769: LD_EXP 1
3773: PPUSH
3774: LD_STRING D1-JMM-5
3776: PPUSH
3777: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3781: LD_EXP 15
3785: PPUSH
3786: LD_STRING D1-Sci-5
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-6
3800: PPUSH
3801: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3805: LD_EXP 16
3809: PPUSH
3810: LD_STRING D1-Har-6
3812: PPUSH
3813: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3817: LD_EXP 1
3821: PPUSH
3822: LD_STRING D1-JMM-7
3824: PPUSH
3825: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3829: LD_EXP 16
3833: PPUSH
3834: LD_STRING D1-Har-7
3836: PPUSH
3837: CALL_OW 94
// if IsOK ( Denis ) then
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 302
3850: IFFALSE 3864
// Say ( JMM , D1-JMM-8 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D1-JMM-8
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D1-JMM-8a
3871: PPUSH
3872: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3876: LD_EXP 16
3880: PPUSH
3881: LD_STRING D1-Har-8
3883: PPUSH
3884: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D1-JMM-9
3895: PPUSH
3896: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3900: LD_EXP 16
3904: PPUSH
3905: LD_STRING D1-Har-9
3907: PPUSH
3908: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3912: LD_EXP 1
3916: PPUSH
3917: LD_STRING D1-JMM-10
3919: PPUSH
3920: CALL_OW 88
// if IsOK ( Denis ) then
3924: LD_EXP 3
3928: PPUSH
3929: CALL_OW 302
3933: IFFALSE 3947
// Say ( JMM , D1-JMM-10a ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING D1-JMM-10a
3942: PPUSH
3943: CALL_OW 88
// SelectDeltaCharacters ;
3947: CALL 4433 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3951: LD_EXP 20
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 274
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 250
3970: PPUSH
3971: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3975: LD_INT 22
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 30
3987: PUSH
3988: LD_INT 29
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PPUSH
3999: CALL_OW 69
4003: PUSH
4004: LD_INT 0
4006: GREATER
4007: IFFALSE 4033
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4009: LD_EXP 20
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: CALL_OW 274
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: LD_INT 300
4028: PPUSH
4029: CALL_OW 277
// InGameOff ;
4033: CALL_OW 9
// Query ( Q1 ) ;
4037: LD_STRING Q1
4039: PPUSH
4040: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4044: LD_INT 3
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL_OW 424
// if IsInUnit ( JMM ) then
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 310
4063: IFFALSE 4074
// ComExitBuilding ( JMM ) ;
4065: LD_EXP 1
4069: PPUSH
4070: CALL_OW 122
// end ;
4074: PPOPN 3
4076: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 22
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 21
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 71
4108: PUSH
4109: LD_INT 0
4111: EQUAL
4112: IFFALSE 4430
4114: GO 4116
4116: DISABLE
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// begin SaveDeltaCharacters ;
4121: CALL 4787 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PPUSH
4155: CALL_OW 70
4159: IFFALSE 4416
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4161: LD_ADDR_VAR 0 1
4165: PUSH
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 58
4184: PUSH
4185: EMPTY
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 70
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4414
// begin cargoType = GetCargoType ( i ) ;
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 288
4218: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4219: LD_VAR 0 1
4223: PPUSH
4224: CALL_OW 264
4228: PUSH
4229: LD_INT 12
4231: EQUAL
4232: IFFALSE 4329
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4234: LD_ADDR_EXP 14
4238: PUSH
4239: LD_EXP 14
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 248
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 265
4263: PUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 262
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL_OW 263
4283: PUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 264
4293: PUSH
4294: LD_VAR 0 2
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: LD_VAR 0 2
4308: PPUSH
4309: CALL_OW 289
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: ADD
4326: ST_TO_ADDR
4327: GO 4400
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4329: LD_ADDR_EXP 14
4333: PUSH
4334: LD_EXP 14
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: CALL_OW 248
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: CALL_OW 265
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 262
4368: PUSH
4369: LD_VAR 0 1
4373: PPUSH
4374: CALL_OW 263
4378: PUSH
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 264
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PUSH
4396: EMPTY
4397: LIST
4398: ADD
4399: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4400: LD_EXP 14
4404: PPUSH
4405: LD_STRING 06_VehiclesIn06_1
4407: PPUSH
4408: CALL_OW 39
// end ;
4412: GO 4201
4414: POP
4415: POP
// end ; SaveCargos ;
4416: CALL 5498 0 0
// ChangeMap ( 6 , %_cont ) ;
4420: LD_INT 6
4422: PPUSH
4423: LD_STRING %_cont
4425: PPUSH
4426: CALL_OW 340
// end ; end_of_file
4430: PPOPN 2
4432: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// selectedPeople := [ ] ;
4438: LD_ADDR_EXP 17
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_EXP 1
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: DIFF
4550: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4551: LD_ADDR_EXP 17
4555: PUSH
4556: LD_STRING text
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT -5
4567: PUSH
4568: LD_EXP 1
4572: PUSH
4573: LD_INT -6
4575: PUSH
4576: LD_INT -2
4578: PUSH
4579: LD_INT -3
4581: PUSH
4582: LD_INT -5
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_VAR 0 3
4597: ADD
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -4
4604: PUSH
4605: LD_EXP 3
4609: PUSH
4610: LD_EXP 15
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ADD
4621: PPUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 42
4651: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4652: LD_EXP 17
4656: PPUSH
4657: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4661: LD_INT 22
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: CALL_OW 235
// for i in selectedPeople do
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: LD_EXP 17
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4724
// SetSide ( i , 1 ) ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 235
4722: GO 4707
4724: POP
4725: POP
// for i in yourApemans do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_EXP 13
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4753
// SetSide ( i , 1 ) ;
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_INT 1
4746: PPUSH
4747: CALL_OW 235
4751: GO 4736
4753: POP
4754: POP
// SetSide ( JMM , 1 ) ;
4755: LD_EXP 1
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4767: LD_EXP 13
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: LD_INT 5
4777: PPUSH
4778: CALL_OW 237
// end ;
4782: LD_VAR 0 1
4786: RET
// export function SaveDeltaCharacters ; begin
4787: LD_INT 0
4789: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4790: LD_EXP 1
4794: PPUSH
4795: LD_EXP 22
4799: PUSH
4800: LD_STRING JMM
4802: STR
4803: PPUSH
4804: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DeltaDoctor
4815: PPUSH
4816: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4820: LD_EXP 3
4824: PPUSH
4825: LD_EXP 22
4829: PUSH
4830: LD_STRING Denis
4832: STR
4833: PPUSH
4834: CALL_OW 38
// if Lisa in selectedPeople then
4838: LD_EXP 4
4842: PUSH
4843: LD_EXP 17
4847: IN
4848: IFFALSE 4880
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4850: LD_EXP 4
4854: PPUSH
4855: LD_EXP 22
4859: PUSH
4860: LD_STRING Lisa
4862: STR
4863: PPUSH
4864: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4868: LD_INT 1
4870: PPUSH
4871: LD_STRING LisaIn06
4873: PPUSH
4874: CALL_OW 39
// end else
4878: GO 4901
// if IsOk ( Lisa ) then
4880: LD_EXP 4
4884: PPUSH
4885: CALL_OW 302
4889: IFFALSE 4901
// SaveVariable ( 1 , LisaStayInDelta ) ;
4891: LD_INT 1
4893: PPUSH
4894: LD_STRING LisaStayInDelta
4896: PPUSH
4897: CALL_OW 39
// if Bobby in selectedPeople then
4901: LD_EXP 6
4905: PUSH
4906: LD_EXP 17
4910: IN
4911: IFFALSE 4943
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4913: LD_EXP 6
4917: PPUSH
4918: LD_EXP 22
4922: PUSH
4923: LD_STRING Bobby
4925: STR
4926: PPUSH
4927: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4931: LD_INT 1
4933: PPUSH
4934: LD_STRING BobbyIn06
4936: PPUSH
4937: CALL_OW 39
// end else
4941: GO 4964
// if IsOk ( Bobby ) then
4943: LD_EXP 6
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4964
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4954: LD_INT 1
4956: PPUSH
4957: LD_STRING BobbyStayInDelta
4959: PPUSH
4960: CALL_OW 39
// if Cyrus in selectedPeople then
4964: LD_EXP 7
4968: PUSH
4969: LD_EXP 17
4973: IN
4974: IFFALSE 5006
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4976: LD_EXP 7
4980: PPUSH
4981: LD_EXP 22
4985: PUSH
4986: LD_STRING Cyrus
4988: STR
4989: PPUSH
4990: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4994: LD_INT 1
4996: PPUSH
4997: LD_STRING CyrusIn06
4999: PPUSH
5000: CALL_OW 39
// end else
5004: GO 5027
// if IsOk ( Cyrus ) then
5006: LD_EXP 7
5010: PPUSH
5011: CALL_OW 302
5015: IFFALSE 5027
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5017: LD_INT 1
5019: PPUSH
5020: LD_STRING CyrusStayInDelta
5022: PPUSH
5023: CALL_OW 39
// if Frank in selectedPeople then
5027: LD_EXP 5
5031: PUSH
5032: LD_EXP 17
5036: IN
5037: IFFALSE 5069
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5039: LD_EXP 5
5043: PPUSH
5044: LD_EXP 22
5048: PUSH
5049: LD_STRING Frank
5051: STR
5052: PPUSH
5053: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_STRING FrankIn06
5062: PPUSH
5063: CALL_OW 39
// end else
5067: GO 5090
// if IsOk ( Frank ) then
5069: LD_EXP 5
5073: PPUSH
5074: CALL_OW 302
5078: IFFALSE 5090
// SaveVariable ( 1 , FrankStayInDelta ) ;
5080: LD_INT 1
5082: PPUSH
5083: LD_STRING FrankStayInDelta
5085: PPUSH
5086: CALL_OW 39
// if Brown in selectedPeople then
5090: LD_EXP 8
5094: PUSH
5095: LD_EXP 17
5099: IN
5100: IFFALSE 5132
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5102: LD_EXP 8
5106: PPUSH
5107: LD_EXP 22
5111: PUSH
5112: LD_STRING Brown
5114: STR
5115: PPUSH
5116: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5120: LD_INT 1
5122: PPUSH
5123: LD_STRING BrownIn06
5125: PPUSH
5126: CALL_OW 39
// end else
5130: GO 5153
// if IsOk ( Brown ) then
5132: LD_EXP 8
5136: PPUSH
5137: CALL_OW 302
5141: IFFALSE 5153
// SaveVariable ( 1 , BrownStayInDelta ) ;
5143: LD_INT 1
5145: PPUSH
5146: LD_STRING BrownStayInDelta
5148: PPUSH
5149: CALL_OW 39
// if Donaldson in selectedPeople then
5153: LD_EXP 9
5157: PUSH
5158: LD_EXP 17
5162: IN
5163: IFFALSE 5195
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5165: LD_EXP 9
5169: PPUSH
5170: LD_EXP 22
5174: PUSH
5175: LD_STRING Donaldson
5177: STR
5178: PPUSH
5179: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5183: LD_INT 1
5185: PPUSH
5186: LD_STRING DonaldsonIn06
5188: PPUSH
5189: CALL_OW 39
// end else
5193: GO 5216
// if IsOk ( Donaldson ) then
5195: LD_EXP 9
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5216
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5206: LD_INT 1
5208: PPUSH
5209: LD_STRING DonaldsonStayInDelta
5211: PPUSH
5212: CALL_OW 39
// if Gladstone in selectedPeople then
5216: LD_EXP 2
5220: PUSH
5221: LD_EXP 17
5225: IN
5226: IFFALSE 5258
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5228: LD_EXP 2
5232: PPUSH
5233: LD_EXP 22
5237: PUSH
5238: LD_STRING Gladstone
5240: STR
5241: PPUSH
5242: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5246: LD_INT 1
5248: PPUSH
5249: LD_STRING GladstoneIn06
5251: PPUSH
5252: CALL_OW 39
// end else
5256: GO 5279
// if IsOk ( Gladstone ) then
5258: LD_EXP 2
5262: PPUSH
5263: CALL_OW 302
5267: IFFALSE 5279
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_STRING GladstoneStayInDelta
5274: PPUSH
5275: CALL_OW 39
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5279: LD_EXP 13
5283: PPUSH
5284: LD_STRING ApeIn06
5286: PPUSH
5287: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5291: LD_EXP 17
5295: PUSH
5296: LD_EXP 1
5300: PUSH
5301: LD_EXP 4
5305: PUSH
5306: LD_EXP 6
5310: PUSH
5311: LD_EXP 7
5315: PUSH
5316: LD_EXP 5
5320: PUSH
5321: LD_EXP 8
5325: PUSH
5326: LD_EXP 9
5330: PUSH
5331: LD_EXP 2
5335: PUSH
5336: LD_EXP 3
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: DIFF
5352: PPUSH
5353: LD_STRING OthersIn06
5355: PPUSH
5356: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5360: LD_INT 22
5362: PUSH
5363: LD_INT 4
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: LD_INT 2
5372: PUSH
5373: LD_INT 25
5375: PUSH
5376: LD_INT 1
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PUSH
5383: LD_INT 25
5385: PUSH
5386: LD_INT 2
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PUSH
5393: LD_INT 25
5395: PUSH
5396: LD_INT 3
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: PUSH
5403: LD_INT 25
5405: PUSH
5406: LD_INT 4
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PPUSH
5424: CALL_OW 69
5428: PUSH
5429: LD_EXP 15
5433: PUSH
5434: LD_EXP 4
5438: PUSH
5439: LD_EXP 6
5443: PUSH
5444: LD_EXP 7
5448: PUSH
5449: LD_EXP 5
5453: PUSH
5454: LD_EXP 8
5458: PUSH
5459: LD_EXP 9
5463: PUSH
5464: LD_EXP 2
5468: PUSH
5469: LD_EXP 3
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: DIFF
5485: PPUSH
5486: LD_STRING OthersStayInDelta
5488: PPUSH
5489: CALL_OW 38
// end ;
5493: LD_VAR 0 1
5497: RET
// export function SaveCargos ; var i ; begin
5498: LD_INT 0
5500: PPUSH
5501: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5502: LD_ADDR_VAR 0 2
5506: PUSH
5507: LD_INT 3
5509: PPUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 34
5522: PUSH
5523: LD_INT 12
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 70
5538: PUSH
5539: FOR_IN
5540: IFFALSE 5568
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5542: LD_ADDR_EXP 21
5546: PUSH
5547: LD_EXP 21
5551: PUSH
5552: LD_VAR 0 2
5556: PPUSH
5557: CALL 5587 0 1
5561: PUSH
5562: EMPTY
5563: LIST
5564: ADD
5565: ST_TO_ADDR
5566: GO 5539
5568: POP
5569: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5570: LD_EXP 21
5574: PPUSH
5575: LD_STRING 06_ResourcesInCargo06_1
5577: PPUSH
5578: CALL_OW 39
// end ;
5582: LD_VAR 0 1
5586: RET
// export function GetMultiCargo ( cargo_bay ) ; begin
5587: LD_INT 0
5589: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5590: LD_ADDR_VAR 0 2
5594: PUSH
5595: LD_VAR 0 1
5599: PPUSH
5600: LD_INT 1
5602: PPUSH
5603: CALL_OW 289
5607: PUSH
5608: LD_VAR 0 1
5612: PPUSH
5613: LD_INT 2
5615: PPUSH
5616: CALL_OW 289
5620: PUSH
5621: LD_VAR 0 1
5625: PPUSH
5626: LD_INT 3
5628: PPUSH
5629: CALL_OW 289
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: LIST
5638: ST_TO_ADDR
// end ; end_of_file
5639: LD_VAR 0 2
5643: RET
// on Command ( comandid ) do var i ;
5644: LD_INT 0
5646: PPUSH
// begin if comandid = 65 then
5647: LD_VAR 0 1
5651: PUSH
5652: LD_INT 65
5654: EQUAL
5655: IFFALSE 5696
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5657: LD_ADDR_VAR 0 2
5661: PUSH
5662: LD_INT 22
5664: PUSH
5665: LD_INT 1
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PUSH
5672: EMPTY
5673: LIST
5674: PPUSH
5675: CALL_OW 69
5679: PUSH
5680: FOR_IN
5681: IFFALSE 5694
// ComStop ( i ) ;
5683: LD_VAR 0 2
5687: PPUSH
5688: CALL_OW 141
5692: GO 5680
5694: POP
5695: POP
// end ;
5696: PPOPN 2
5698: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5699: LD_INT 0
5701: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5702: LD_ADDR_VAR 0 3
5706: PUSH
5707: LD_INT 22
5709: PUSH
5710: LD_INT 1
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: LD_INT 21
5719: PUSH
5720: LD_INT 3
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: LD_INT 30
5729: PUSH
5730: LD_INT 0
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: PPUSH
5742: CALL_OW 69
5746: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5747: LD_VAR 0 1
5751: PPUSH
5752: LD_VAR 0 3
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: PPUSH
5761: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5765: LD_VAR 0 1
5769: PPUSH
5770: LD_INT 4
5772: PPUSH
5773: CALL_OW 235
// end ; end_of_file
5777: PPOPN 3
5779: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ;
5780: LD_VAR 0 1
5784: PPUSH
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_VAR 0 3
5794: PPUSH
5795: LD_VAR 0 4
5799: PPUSH
5800: LD_VAR 0 5
5804: PPUSH
5805: CALL 18584 0 5
// end ;
5809: PPOPN 5
5811: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
5812: LD_VAR 0 2
5816: PUSH
5817: LD_INT 100
5819: EQUAL
5820: IFFALSE 6769
// begin if not StreamModeActive then
5822: LD_EXP 24
5826: NOT
5827: IFFALSE 5837
// StreamModeActive := true ;
5829: LD_ADDR_EXP 24
5833: PUSH
5834: LD_INT 1
5836: ST_TO_ADDR
// if p3 = 0 then
5837: LD_VAR 0 3
5841: PUSH
5842: LD_INT 0
5844: EQUAL
5845: IFFALSE 5851
// InitStreamMode ;
5847: CALL 7002 0 0
// if p3 = 1 then
5851: LD_VAR 0 3
5855: PUSH
5856: LD_INT 1
5858: EQUAL
5859: IFFALSE 5869
// sRocket := true ;
5861: LD_ADDR_EXP 29
5865: PUSH
5866: LD_INT 1
5868: ST_TO_ADDR
// if p3 = 2 then
5869: LD_VAR 0 3
5873: PUSH
5874: LD_INT 2
5876: EQUAL
5877: IFFALSE 5887
// sSpeed := true ;
5879: LD_ADDR_EXP 28
5883: PUSH
5884: LD_INT 1
5886: ST_TO_ADDR
// if p3 = 3 then
5887: LD_VAR 0 3
5891: PUSH
5892: LD_INT 3
5894: EQUAL
5895: IFFALSE 5905
// sEngine := true ;
5897: LD_ADDR_EXP 30
5901: PUSH
5902: LD_INT 1
5904: ST_TO_ADDR
// if p3 = 4 then
5905: LD_VAR 0 3
5909: PUSH
5910: LD_INT 4
5912: EQUAL
5913: IFFALSE 5923
// sSpec := true ;
5915: LD_ADDR_EXP 27
5919: PUSH
5920: LD_INT 1
5922: ST_TO_ADDR
// if p3 = 5 then
5923: LD_VAR 0 3
5927: PUSH
5928: LD_INT 5
5930: EQUAL
5931: IFFALSE 5941
// sLevel := true ;
5933: LD_ADDR_EXP 31
5937: PUSH
5938: LD_INT 1
5940: ST_TO_ADDR
// if p3 = 6 then
5941: LD_VAR 0 3
5945: PUSH
5946: LD_INT 6
5948: EQUAL
5949: IFFALSE 5959
// sArmoury := true ;
5951: LD_ADDR_EXP 32
5955: PUSH
5956: LD_INT 1
5958: ST_TO_ADDR
// if p3 = 7 then
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 7
5966: EQUAL
5967: IFFALSE 5977
// sRadar := true ;
5969: LD_ADDR_EXP 33
5973: PUSH
5974: LD_INT 1
5976: ST_TO_ADDR
// if p3 = 8 then
5977: LD_VAR 0 3
5981: PUSH
5982: LD_INT 8
5984: EQUAL
5985: IFFALSE 5995
// sBunker := true ;
5987: LD_ADDR_EXP 34
5991: PUSH
5992: LD_INT 1
5994: ST_TO_ADDR
// if p3 = 9 then
5995: LD_VAR 0 3
5999: PUSH
6000: LD_INT 9
6002: EQUAL
6003: IFFALSE 6013
// sHack := true ;
6005: LD_ADDR_EXP 35
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// if p3 = 10 then
6013: LD_VAR 0 3
6017: PUSH
6018: LD_INT 10
6020: EQUAL
6021: IFFALSE 6031
// sFire := true ;
6023: LD_ADDR_EXP 36
6027: PUSH
6028: LD_INT 1
6030: ST_TO_ADDR
// if p3 = 11 then
6031: LD_VAR 0 3
6035: PUSH
6036: LD_INT 11
6038: EQUAL
6039: IFFALSE 6049
// sRefresh := true ;
6041: LD_ADDR_EXP 37
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
// if p3 = 12 then
6049: LD_VAR 0 3
6053: PUSH
6054: LD_INT 12
6056: EQUAL
6057: IFFALSE 6067
// sExp := true ;
6059: LD_ADDR_EXP 38
6063: PUSH
6064: LD_INT 1
6066: ST_TO_ADDR
// if p3 = 13 then
6067: LD_VAR 0 3
6071: PUSH
6072: LD_INT 13
6074: EQUAL
6075: IFFALSE 6085
// sDepot := true ;
6077: LD_ADDR_EXP 39
6081: PUSH
6082: LD_INT 1
6084: ST_TO_ADDR
// if p3 = 14 then
6085: LD_VAR 0 3
6089: PUSH
6090: LD_INT 14
6092: EQUAL
6093: IFFALSE 6103
// sFlag := true ;
6095: LD_ADDR_EXP 40
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
// if p3 = 15 then
6103: LD_VAR 0 3
6107: PUSH
6108: LD_INT 15
6110: EQUAL
6111: IFFALSE 6121
// sKamikadze := true ;
6113: LD_ADDR_EXP 48
6117: PUSH
6118: LD_INT 1
6120: ST_TO_ADDR
// if p3 = 16 then
6121: LD_VAR 0 3
6125: PUSH
6126: LD_INT 16
6128: EQUAL
6129: IFFALSE 6139
// sTroll := true ;
6131: LD_ADDR_EXP 49
6135: PUSH
6136: LD_INT 1
6138: ST_TO_ADDR
// if p3 = 17 then
6139: LD_VAR 0 3
6143: PUSH
6144: LD_INT 17
6146: EQUAL
6147: IFFALSE 6157
// sSlow := true ;
6149: LD_ADDR_EXP 50
6153: PUSH
6154: LD_INT 1
6156: ST_TO_ADDR
// if p3 = 18 then
6157: LD_VAR 0 3
6161: PUSH
6162: LD_INT 18
6164: EQUAL
6165: IFFALSE 6175
// sLack := true ;
6167: LD_ADDR_EXP 51
6171: PUSH
6172: LD_INT 1
6174: ST_TO_ADDR
// if p3 = 19 then
6175: LD_VAR 0 3
6179: PUSH
6180: LD_INT 19
6182: EQUAL
6183: IFFALSE 6193
// sTank := true ;
6185: LD_ADDR_EXP 53
6189: PUSH
6190: LD_INT 1
6192: ST_TO_ADDR
// if p3 = 20 then
6193: LD_VAR 0 3
6197: PUSH
6198: LD_INT 20
6200: EQUAL
6201: IFFALSE 6211
// sRemote := true ;
6203: LD_ADDR_EXP 54
6207: PUSH
6208: LD_INT 1
6210: ST_TO_ADDR
// if p3 = 21 then
6211: LD_VAR 0 3
6215: PUSH
6216: LD_INT 21
6218: EQUAL
6219: IFFALSE 6229
// sPowell := true ;
6221: LD_ADDR_EXP 55
6225: PUSH
6226: LD_INT 1
6228: ST_TO_ADDR
// if p3 = 22 then
6229: LD_VAR 0 3
6233: PUSH
6234: LD_INT 22
6236: EQUAL
6237: IFFALSE 6247
// sTeleport := true ;
6239: LD_ADDR_EXP 58
6243: PUSH
6244: LD_INT 1
6246: ST_TO_ADDR
// if p3 = 23 then
6247: LD_VAR 0 3
6251: PUSH
6252: LD_INT 23
6254: EQUAL
6255: IFFALSE 6265
// sOilTower := true ;
6257: LD_ADDR_EXP 60
6261: PUSH
6262: LD_INT 1
6264: ST_TO_ADDR
// if p3 = 24 then
6265: LD_VAR 0 3
6269: PUSH
6270: LD_INT 24
6272: EQUAL
6273: IFFALSE 6283
// sShovel := true ;
6275: LD_ADDR_EXP 61
6279: PUSH
6280: LD_INT 1
6282: ST_TO_ADDR
// if p3 = 25 then
6283: LD_VAR 0 3
6287: PUSH
6288: LD_INT 25
6290: EQUAL
6291: IFFALSE 6301
// sSheik := true ;
6293: LD_ADDR_EXP 62
6297: PUSH
6298: LD_INT 1
6300: ST_TO_ADDR
// if p3 = 26 then
6301: LD_VAR 0 3
6305: PUSH
6306: LD_INT 26
6308: EQUAL
6309: IFFALSE 6319
// sEarthquake := true ;
6311: LD_ADDR_EXP 64
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// if p3 = 27 then
6319: LD_VAR 0 3
6323: PUSH
6324: LD_INT 27
6326: EQUAL
6327: IFFALSE 6337
// sAI := true ;
6329: LD_ADDR_EXP 65
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// if p3 = 28 then
6337: LD_VAR 0 3
6341: PUSH
6342: LD_INT 28
6344: EQUAL
6345: IFFALSE 6355
// sCargo := true ;
6347: LD_ADDR_EXP 68
6351: PUSH
6352: LD_INT 1
6354: ST_TO_ADDR
// if p3 = 29 then
6355: LD_VAR 0 3
6359: PUSH
6360: LD_INT 29
6362: EQUAL
6363: IFFALSE 6373
// sDLaser := true ;
6365: LD_ADDR_EXP 69
6369: PUSH
6370: LD_INT 1
6372: ST_TO_ADDR
// if p3 = 30 then
6373: LD_VAR 0 3
6377: PUSH
6378: LD_INT 30
6380: EQUAL
6381: IFFALSE 6391
// sExchange := true ;
6383: LD_ADDR_EXP 70
6387: PUSH
6388: LD_INT 1
6390: ST_TO_ADDR
// if p3 = 31 then
6391: LD_VAR 0 3
6395: PUSH
6396: LD_INT 31
6398: EQUAL
6399: IFFALSE 6409
// sFac := true ;
6401: LD_ADDR_EXP 71
6405: PUSH
6406: LD_INT 1
6408: ST_TO_ADDR
// if p3 = 32 then
6409: LD_VAR 0 3
6413: PUSH
6414: LD_INT 32
6416: EQUAL
6417: IFFALSE 6427
// sPower := true ;
6419: LD_ADDR_EXP 72
6423: PUSH
6424: LD_INT 1
6426: ST_TO_ADDR
// if p3 = 33 then
6427: LD_VAR 0 3
6431: PUSH
6432: LD_INT 33
6434: EQUAL
6435: IFFALSE 6445
// sRandom := true ;
6437: LD_ADDR_EXP 73
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// if p3 = 34 then
6445: LD_VAR 0 3
6449: PUSH
6450: LD_INT 34
6452: EQUAL
6453: IFFALSE 6463
// sShield := true ;
6455: LD_ADDR_EXP 74
6459: PUSH
6460: LD_INT 1
6462: ST_TO_ADDR
// if p3 = 35 then
6463: LD_VAR 0 3
6467: PUSH
6468: LD_INT 35
6470: EQUAL
6471: IFFALSE 6481
// sTime := true ;
6473: LD_ADDR_EXP 75
6477: PUSH
6478: LD_INT 1
6480: ST_TO_ADDR
// if p3 = 36 then
6481: LD_VAR 0 3
6485: PUSH
6486: LD_INT 36
6488: EQUAL
6489: IFFALSE 6499
// sTools := true ;
6491: LD_ADDR_EXP 76
6495: PUSH
6496: LD_INT 1
6498: ST_TO_ADDR
// if p3 = 101 then
6499: LD_VAR 0 3
6503: PUSH
6504: LD_INT 101
6506: EQUAL
6507: IFFALSE 6517
// sSold := true ;
6509: LD_ADDR_EXP 41
6513: PUSH
6514: LD_INT 1
6516: ST_TO_ADDR
// if p3 = 102 then
6517: LD_VAR 0 3
6521: PUSH
6522: LD_INT 102
6524: EQUAL
6525: IFFALSE 6535
// sDiff := true ;
6527: LD_ADDR_EXP 42
6531: PUSH
6532: LD_INT 1
6534: ST_TO_ADDR
// if p3 = 103 then
6535: LD_VAR 0 3
6539: PUSH
6540: LD_INT 103
6542: EQUAL
6543: IFFALSE 6553
// sFog := true ;
6545: LD_ADDR_EXP 45
6549: PUSH
6550: LD_INT 1
6552: ST_TO_ADDR
// if p3 = 104 then
6553: LD_VAR 0 3
6557: PUSH
6558: LD_INT 104
6560: EQUAL
6561: IFFALSE 6571
// sReset := true ;
6563: LD_ADDR_EXP 46
6567: PUSH
6568: LD_INT 1
6570: ST_TO_ADDR
// if p3 = 105 then
6571: LD_VAR 0 3
6575: PUSH
6576: LD_INT 105
6578: EQUAL
6579: IFFALSE 6589
// sSun := true ;
6581: LD_ADDR_EXP 47
6585: PUSH
6586: LD_INT 1
6588: ST_TO_ADDR
// if p3 = 106 then
6589: LD_VAR 0 3
6593: PUSH
6594: LD_INT 106
6596: EQUAL
6597: IFFALSE 6607
// sTiger := true ;
6599: LD_ADDR_EXP 43
6603: PUSH
6604: LD_INT 1
6606: ST_TO_ADDR
// if p3 = 107 then
6607: LD_VAR 0 3
6611: PUSH
6612: LD_INT 107
6614: EQUAL
6615: IFFALSE 6625
// sBomb := true ;
6617: LD_ADDR_EXP 44
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// if p3 = 108 then
6625: LD_VAR 0 3
6629: PUSH
6630: LD_INT 108
6632: EQUAL
6633: IFFALSE 6643
// sWound := true ;
6635: LD_ADDR_EXP 52
6639: PUSH
6640: LD_INT 1
6642: ST_TO_ADDR
// if p3 = 109 then
6643: LD_VAR 0 3
6647: PUSH
6648: LD_INT 109
6650: EQUAL
6651: IFFALSE 6661
// sBetray := true ;
6653: LD_ADDR_EXP 56
6657: PUSH
6658: LD_INT 1
6660: ST_TO_ADDR
// if p3 = 110 then
6661: LD_VAR 0 3
6665: PUSH
6666: LD_INT 110
6668: EQUAL
6669: IFFALSE 6679
// sContamin := true ;
6671: LD_ADDR_EXP 57
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// if p3 = 111 then
6679: LD_VAR 0 3
6683: PUSH
6684: LD_INT 111
6686: EQUAL
6687: IFFALSE 6697
// sOil := true ;
6689: LD_ADDR_EXP 59
6693: PUSH
6694: LD_INT 1
6696: ST_TO_ADDR
// if p3 = 112 then
6697: LD_VAR 0 3
6701: PUSH
6702: LD_INT 112
6704: EQUAL
6705: IFFALSE 6715
// sStu := true ;
6707: LD_ADDR_EXP 63
6711: PUSH
6712: LD_INT 1
6714: ST_TO_ADDR
// if p3 = 113 then
6715: LD_VAR 0 3
6719: PUSH
6720: LD_INT 113
6722: EQUAL
6723: IFFALSE 6733
// sBazooka := true ;
6725: LD_ADDR_EXP 66
6729: PUSH
6730: LD_INT 1
6732: ST_TO_ADDR
// if p3 = 114 then
6733: LD_VAR 0 3
6737: PUSH
6738: LD_INT 114
6740: EQUAL
6741: IFFALSE 6751
// sMortar := true ;
6743: LD_ADDR_EXP 67
6747: PUSH
6748: LD_INT 1
6750: ST_TO_ADDR
// if p3 = 115 then
6751: LD_VAR 0 3
6755: PUSH
6756: LD_INT 115
6758: EQUAL
6759: IFFALSE 6769
// sRanger := true ;
6761: LD_ADDR_EXP 77
6765: PUSH
6766: LD_INT 1
6768: ST_TO_ADDR
// end ; if p2 = 101 then
6769: LD_VAR 0 2
6773: PUSH
6774: LD_INT 101
6776: EQUAL
6777: IFFALSE 6980
// begin case p3 of 1 :
6779: LD_VAR 0 3
6783: PUSH
6784: LD_INT 1
6786: DOUBLE
6787: EQUAL
6788: IFTRUE 6792
6790: GO 6799
6792: POP
// hHackUnlimitedResources ; 2 :
6793: CALL 17074 0 0
6797: GO 6980
6799: LD_INT 2
6801: DOUBLE
6802: EQUAL
6803: IFTRUE 6807
6805: GO 6814
6807: POP
// hHackSetLevel10 ; 3 :
6808: CALL 17207 0 0
6812: GO 6980
6814: LD_INT 3
6816: DOUBLE
6817: EQUAL
6818: IFTRUE 6822
6820: GO 6829
6822: POP
// hHackSetLevel10YourUnits ; 4 :
6823: CALL 17292 0 0
6827: GO 6980
6829: LD_INT 4
6831: DOUBLE
6832: EQUAL
6833: IFTRUE 6837
6835: GO 6859
6837: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
6838: LD_VAR 0 4
6842: PPUSH
6843: LD_VAR 0 5
6847: PPUSH
6848: LD_VAR 0 6
6852: PPUSH
6853: CALL 17382 0 3
6857: GO 6980
6859: LD_INT 5
6861: DOUBLE
6862: EQUAL
6863: IFTRUE 6867
6865: GO 6874
6867: POP
// hHackSpawnVehicle ; 6 :
6868: CALL 17443 0 0
6872: GO 6980
6874: LD_INT 6
6876: DOUBLE
6877: EQUAL
6878: IFTRUE 6882
6880: GO 6889
6882: POP
// hHackInvincible ; 7 :
6883: CALL 17989 0 0
6887: GO 6980
6889: LD_INT 7
6891: DOUBLE
6892: EQUAL
6893: IFTRUE 6897
6895: GO 6904
6897: POP
// hHackInvisible ; 8 :
6898: CALL 18100 0 0
6902: GO 6980
6904: LD_INT 8
6906: DOUBLE
6907: EQUAL
6908: IFTRUE 6912
6910: GO 6919
6912: POP
// hHackChangeYourSide ; 9 :
6913: CALL 18157 0 0
6917: GO 6980
6919: LD_INT 9
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 6934
6927: POP
// hHackChangeUnitSide ; 10 :
6928: CALL 18199 0 0
6932: GO 6980
6934: LD_INT 10
6936: DOUBLE
6937: EQUAL
6938: IFTRUE 6942
6940: GO 6949
6942: POP
// hHackFog ; 11 :
6943: CALL 18300 0 0
6947: GO 6980
6949: LD_INT 11
6951: DOUBLE
6952: EQUAL
6953: IFTRUE 6957
6955: GO 6964
6957: POP
// hHackApeman ; 12 :
6958: CALL 18315 0 0
6962: GO 6980
6964: LD_INT 12
6966: DOUBLE
6967: EQUAL
6968: IFTRUE 6972
6970: GO 6979
6972: POP
// hHackBoom ; end ;
6973: CALL 18400 0 0
6977: GO 6980
6979: POP
// end ; end ;
6980: PPOPN 6
6982: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6983: GO 6985
6985: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6986: LD_STRING initStreamRollete();
6988: PPUSH
6989: CALL_OW 559
// InitStreamMode ;
6993: CALL 7002 0 0
// DefineStreamItems ( ) ;
6997: CALL 7442 0 0
// end ;
7001: END
// function InitStreamMode ; begin
7002: LD_INT 0
7004: PPUSH
// streamModeActive := false ;
7005: LD_ADDR_EXP 24
7009: PUSH
7010: LD_INT 0
7012: ST_TO_ADDR
// normalCounter := 36 ;
7013: LD_ADDR_EXP 25
7017: PUSH
7018: LD_INT 36
7020: ST_TO_ADDR
// hardcoreCounter := 16 ;
7021: LD_ADDR_EXP 26
7025: PUSH
7026: LD_INT 16
7028: ST_TO_ADDR
// sRocket := false ;
7029: LD_ADDR_EXP 29
7033: PUSH
7034: LD_INT 0
7036: ST_TO_ADDR
// sSpeed := false ;
7037: LD_ADDR_EXP 28
7041: PUSH
7042: LD_INT 0
7044: ST_TO_ADDR
// sEngine := false ;
7045: LD_ADDR_EXP 30
7049: PUSH
7050: LD_INT 0
7052: ST_TO_ADDR
// sSpec := false ;
7053: LD_ADDR_EXP 27
7057: PUSH
7058: LD_INT 0
7060: ST_TO_ADDR
// sLevel := false ;
7061: LD_ADDR_EXP 31
7065: PUSH
7066: LD_INT 0
7068: ST_TO_ADDR
// sArmoury := false ;
7069: LD_ADDR_EXP 32
7073: PUSH
7074: LD_INT 0
7076: ST_TO_ADDR
// sRadar := false ;
7077: LD_ADDR_EXP 33
7081: PUSH
7082: LD_INT 0
7084: ST_TO_ADDR
// sBunker := false ;
7085: LD_ADDR_EXP 34
7089: PUSH
7090: LD_INT 0
7092: ST_TO_ADDR
// sHack := false ;
7093: LD_ADDR_EXP 35
7097: PUSH
7098: LD_INT 0
7100: ST_TO_ADDR
// sFire := false ;
7101: LD_ADDR_EXP 36
7105: PUSH
7106: LD_INT 0
7108: ST_TO_ADDR
// sRefresh := false ;
7109: LD_ADDR_EXP 37
7113: PUSH
7114: LD_INT 0
7116: ST_TO_ADDR
// sExp := false ;
7117: LD_ADDR_EXP 38
7121: PUSH
7122: LD_INT 0
7124: ST_TO_ADDR
// sDepot := false ;
7125: LD_ADDR_EXP 39
7129: PUSH
7130: LD_INT 0
7132: ST_TO_ADDR
// sFlag := false ;
7133: LD_ADDR_EXP 40
7137: PUSH
7138: LD_INT 0
7140: ST_TO_ADDR
// sKamikadze := false ;
7141: LD_ADDR_EXP 48
7145: PUSH
7146: LD_INT 0
7148: ST_TO_ADDR
// sTroll := false ;
7149: LD_ADDR_EXP 49
7153: PUSH
7154: LD_INT 0
7156: ST_TO_ADDR
// sSlow := false ;
7157: LD_ADDR_EXP 50
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
// sLack := false ;
7165: LD_ADDR_EXP 51
7169: PUSH
7170: LD_INT 0
7172: ST_TO_ADDR
// sTank := false ;
7173: LD_ADDR_EXP 53
7177: PUSH
7178: LD_INT 0
7180: ST_TO_ADDR
// sRemote := false ;
7181: LD_ADDR_EXP 54
7185: PUSH
7186: LD_INT 0
7188: ST_TO_ADDR
// sPowell := false ;
7189: LD_ADDR_EXP 55
7193: PUSH
7194: LD_INT 0
7196: ST_TO_ADDR
// sTeleport := false ;
7197: LD_ADDR_EXP 58
7201: PUSH
7202: LD_INT 0
7204: ST_TO_ADDR
// sOilTower := false ;
7205: LD_ADDR_EXP 60
7209: PUSH
7210: LD_INT 0
7212: ST_TO_ADDR
// sShovel := false ;
7213: LD_ADDR_EXP 61
7217: PUSH
7218: LD_INT 0
7220: ST_TO_ADDR
// sSheik := false ;
7221: LD_ADDR_EXP 62
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// sEarthquake := false ;
7229: LD_ADDR_EXP 64
7233: PUSH
7234: LD_INT 0
7236: ST_TO_ADDR
// sAI := false ;
7237: LD_ADDR_EXP 65
7241: PUSH
7242: LD_INT 0
7244: ST_TO_ADDR
// sCargo := false ;
7245: LD_ADDR_EXP 68
7249: PUSH
7250: LD_INT 0
7252: ST_TO_ADDR
// sDLaser := false ;
7253: LD_ADDR_EXP 69
7257: PUSH
7258: LD_INT 0
7260: ST_TO_ADDR
// sExchange := false ;
7261: LD_ADDR_EXP 70
7265: PUSH
7266: LD_INT 0
7268: ST_TO_ADDR
// sFac := false ;
7269: LD_ADDR_EXP 71
7273: PUSH
7274: LD_INT 0
7276: ST_TO_ADDR
// sPower := false ;
7277: LD_ADDR_EXP 72
7281: PUSH
7282: LD_INT 0
7284: ST_TO_ADDR
// sRandom := false ;
7285: LD_ADDR_EXP 73
7289: PUSH
7290: LD_INT 0
7292: ST_TO_ADDR
// sShield := false ;
7293: LD_ADDR_EXP 74
7297: PUSH
7298: LD_INT 0
7300: ST_TO_ADDR
// sTime := false ;
7301: LD_ADDR_EXP 75
7305: PUSH
7306: LD_INT 0
7308: ST_TO_ADDR
// sTools := false ;
7309: LD_ADDR_EXP 76
7313: PUSH
7314: LD_INT 0
7316: ST_TO_ADDR
// sSold := false ;
7317: LD_ADDR_EXP 41
7321: PUSH
7322: LD_INT 0
7324: ST_TO_ADDR
// sDiff := false ;
7325: LD_ADDR_EXP 42
7329: PUSH
7330: LD_INT 0
7332: ST_TO_ADDR
// sFog := false ;
7333: LD_ADDR_EXP 45
7337: PUSH
7338: LD_INT 0
7340: ST_TO_ADDR
// sReset := false ;
7341: LD_ADDR_EXP 46
7345: PUSH
7346: LD_INT 0
7348: ST_TO_ADDR
// sSun := false ;
7349: LD_ADDR_EXP 47
7353: PUSH
7354: LD_INT 0
7356: ST_TO_ADDR
// sTiger := false ;
7357: LD_ADDR_EXP 43
7361: PUSH
7362: LD_INT 0
7364: ST_TO_ADDR
// sBomb := false ;
7365: LD_ADDR_EXP 44
7369: PUSH
7370: LD_INT 0
7372: ST_TO_ADDR
// sWound := false ;
7373: LD_ADDR_EXP 52
7377: PUSH
7378: LD_INT 0
7380: ST_TO_ADDR
// sBetray := false ;
7381: LD_ADDR_EXP 56
7385: PUSH
7386: LD_INT 0
7388: ST_TO_ADDR
// sContamin := false ;
7389: LD_ADDR_EXP 57
7393: PUSH
7394: LD_INT 0
7396: ST_TO_ADDR
// sOil := false ;
7397: LD_ADDR_EXP 59
7401: PUSH
7402: LD_INT 0
7404: ST_TO_ADDR
// sStu := false ;
7405: LD_ADDR_EXP 63
7409: PUSH
7410: LD_INT 0
7412: ST_TO_ADDR
// sBazooka := false ;
7413: LD_ADDR_EXP 66
7417: PUSH
7418: LD_INT 0
7420: ST_TO_ADDR
// sMortar := false ;
7421: LD_ADDR_EXP 67
7425: PUSH
7426: LD_INT 0
7428: ST_TO_ADDR
// sRanger := false ;
7429: LD_ADDR_EXP 77
7433: PUSH
7434: LD_INT 0
7436: ST_TO_ADDR
// end ;
7437: LD_VAR 0 1
7441: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7442: LD_INT 0
7444: PPUSH
7445: PPUSH
7446: PPUSH
7447: PPUSH
7448: PPUSH
// result := [ ] ;
7449: LD_ADDR_VAR 0 1
7453: PUSH
7454: EMPTY
7455: ST_TO_ADDR
// if campaign_id = 1 then
7456: LD_OWVAR 69
7460: PUSH
7461: LD_INT 1
7463: EQUAL
7464: IFFALSE 10402
// begin case mission_number of 1 :
7466: LD_OWVAR 70
7470: PUSH
7471: LD_INT 1
7473: DOUBLE
7474: EQUAL
7475: IFTRUE 7479
7477: GO 7543
7479: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
7480: LD_ADDR_VAR 0 1
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: LD_INT 4
7490: PUSH
7491: LD_INT 11
7493: PUSH
7494: LD_INT 12
7496: PUSH
7497: LD_INT 15
7499: PUSH
7500: LD_INT 16
7502: PUSH
7503: LD_INT 22
7505: PUSH
7506: LD_INT 23
7508: PUSH
7509: LD_INT 26
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 101
7525: PUSH
7526: LD_INT 102
7528: PUSH
7529: LD_INT 106
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: ST_TO_ADDR
7541: GO 10400
7543: LD_INT 2
7545: DOUBLE
7546: EQUAL
7547: IFTRUE 7551
7549: GO 7623
7551: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: LD_INT 4
7562: PUSH
7563: LD_INT 11
7565: PUSH
7566: LD_INT 12
7568: PUSH
7569: LD_INT 15
7571: PUSH
7572: LD_INT 16
7574: PUSH
7575: LD_INT 22
7577: PUSH
7578: LD_INT 23
7580: PUSH
7581: LD_INT 26
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 101
7597: PUSH
7598: LD_INT 102
7600: PUSH
7601: LD_INT 105
7603: PUSH
7604: LD_INT 106
7606: PUSH
7607: LD_INT 108
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: ST_TO_ADDR
7621: GO 10400
7623: LD_INT 3
7625: DOUBLE
7626: EQUAL
7627: IFTRUE 7631
7629: GO 7707
7631: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
7632: LD_ADDR_VAR 0 1
7636: PUSH
7637: LD_INT 2
7639: PUSH
7640: LD_INT 4
7642: PUSH
7643: LD_INT 5
7645: PUSH
7646: LD_INT 11
7648: PUSH
7649: LD_INT 12
7651: PUSH
7652: LD_INT 15
7654: PUSH
7655: LD_INT 16
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_INT 26
7663: PUSH
7664: LD_INT 36
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 101
7681: PUSH
7682: LD_INT 102
7684: PUSH
7685: LD_INT 105
7687: PUSH
7688: LD_INT 106
7690: PUSH
7691: LD_INT 108
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: ST_TO_ADDR
7705: GO 10400
7707: LD_INT 4
7709: DOUBLE
7710: EQUAL
7711: IFTRUE 7715
7713: GO 7799
7715: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
7716: LD_ADDR_VAR 0 1
7720: PUSH
7721: LD_INT 2
7723: PUSH
7724: LD_INT 4
7726: PUSH
7727: LD_INT 5
7729: PUSH
7730: LD_INT 8
7732: PUSH
7733: LD_INT 11
7735: PUSH
7736: LD_INT 12
7738: PUSH
7739: LD_INT 15
7741: PUSH
7742: LD_INT 16
7744: PUSH
7745: LD_INT 22
7747: PUSH
7748: LD_INT 23
7750: PUSH
7751: LD_INT 26
7753: PUSH
7754: LD_INT 36
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: PUSH
7771: LD_INT 101
7773: PUSH
7774: LD_INT 102
7776: PUSH
7777: LD_INT 105
7779: PUSH
7780: LD_INT 106
7782: PUSH
7783: LD_INT 108
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: ST_TO_ADDR
7797: GO 10400
7799: LD_INT 5
7801: DOUBLE
7802: EQUAL
7803: IFTRUE 7807
7805: GO 7907
7807: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
7808: LD_ADDR_VAR 0 1
7812: PUSH
7813: LD_INT 2
7815: PUSH
7816: LD_INT 4
7818: PUSH
7819: LD_INT 5
7821: PUSH
7822: LD_INT 6
7824: PUSH
7825: LD_INT 8
7827: PUSH
7828: LD_INT 11
7830: PUSH
7831: LD_INT 12
7833: PUSH
7834: LD_INT 15
7836: PUSH
7837: LD_INT 16
7839: PUSH
7840: LD_INT 22
7842: PUSH
7843: LD_INT 23
7845: PUSH
7846: LD_INT 25
7848: PUSH
7849: LD_INT 26
7851: PUSH
7852: LD_INT 36
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 101
7873: PUSH
7874: LD_INT 102
7876: PUSH
7877: LD_INT 105
7879: PUSH
7880: LD_INT 106
7882: PUSH
7883: LD_INT 108
7885: PUSH
7886: LD_INT 109
7888: PUSH
7889: LD_INT 112
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: ST_TO_ADDR
7905: GO 10400
7907: LD_INT 6
7909: DOUBLE
7910: EQUAL
7911: IFTRUE 7915
7913: GO 8035
7915: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7916: LD_ADDR_VAR 0 1
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: LD_INT 4
7926: PUSH
7927: LD_INT 5
7929: PUSH
7930: LD_INT 6
7932: PUSH
7933: LD_INT 8
7935: PUSH
7936: LD_INT 11
7938: PUSH
7939: LD_INT 12
7941: PUSH
7942: LD_INT 15
7944: PUSH
7945: LD_INT 16
7947: PUSH
7948: LD_INT 20
7950: PUSH
7951: LD_INT 21
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 23
7959: PUSH
7960: LD_INT 25
7962: PUSH
7963: LD_INT 26
7965: PUSH
7966: LD_INT 30
7968: PUSH
7969: LD_INT 31
7971: PUSH
7972: LD_INT 32
7974: PUSH
7975: LD_INT 36
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 101
8001: PUSH
8002: LD_INT 102
8004: PUSH
8005: LD_INT 105
8007: PUSH
8008: LD_INT 106
8010: PUSH
8011: LD_INT 108
8013: PUSH
8014: LD_INT 109
8016: PUSH
8017: LD_INT 112
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: ST_TO_ADDR
8033: GO 10400
8035: LD_INT 7
8037: DOUBLE
8038: EQUAL
8039: IFTRUE 8043
8041: GO 8143
8043: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8044: LD_ADDR_VAR 0 1
8048: PUSH
8049: LD_INT 2
8051: PUSH
8052: LD_INT 4
8054: PUSH
8055: LD_INT 5
8057: PUSH
8058: LD_INT 7
8060: PUSH
8061: LD_INT 11
8063: PUSH
8064: LD_INT 12
8066: PUSH
8067: LD_INT 15
8069: PUSH
8070: LD_INT 16
8072: PUSH
8073: LD_INT 20
8075: PUSH
8076: LD_INT 21
8078: PUSH
8079: LD_INT 22
8081: PUSH
8082: LD_INT 23
8084: PUSH
8085: LD_INT 25
8087: PUSH
8088: LD_INT 26
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 101
8109: PUSH
8110: LD_INT 102
8112: PUSH
8113: LD_INT 103
8115: PUSH
8116: LD_INT 105
8118: PUSH
8119: LD_INT 106
8121: PUSH
8122: LD_INT 108
8124: PUSH
8125: LD_INT 112
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: ST_TO_ADDR
8141: GO 10400
8143: LD_INT 8
8145: DOUBLE
8146: EQUAL
8147: IFTRUE 8151
8149: GO 8279
8151: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8152: LD_ADDR_VAR 0 1
8156: PUSH
8157: LD_INT 2
8159: PUSH
8160: LD_INT 4
8162: PUSH
8163: LD_INT 5
8165: PUSH
8166: LD_INT 6
8168: PUSH
8169: LD_INT 7
8171: PUSH
8172: LD_INT 8
8174: PUSH
8175: LD_INT 11
8177: PUSH
8178: LD_INT 12
8180: PUSH
8181: LD_INT 15
8183: PUSH
8184: LD_INT 16
8186: PUSH
8187: LD_INT 20
8189: PUSH
8190: LD_INT 21
8192: PUSH
8193: LD_INT 22
8195: PUSH
8196: LD_INT 23
8198: PUSH
8199: LD_INT 25
8201: PUSH
8202: LD_INT 26
8204: PUSH
8205: LD_INT 30
8207: PUSH
8208: LD_INT 31
8210: PUSH
8211: LD_INT 32
8213: PUSH
8214: LD_INT 36
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: PUSH
8239: LD_INT 101
8241: PUSH
8242: LD_INT 102
8244: PUSH
8245: LD_INT 103
8247: PUSH
8248: LD_INT 105
8250: PUSH
8251: LD_INT 106
8253: PUSH
8254: LD_INT 108
8256: PUSH
8257: LD_INT 109
8259: PUSH
8260: LD_INT 112
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: ST_TO_ADDR
8277: GO 10400
8279: LD_INT 9
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8423
8287: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8288: LD_ADDR_VAR 0 1
8292: PUSH
8293: LD_INT 2
8295: PUSH
8296: LD_INT 4
8298: PUSH
8299: LD_INT 5
8301: PUSH
8302: LD_INT 6
8304: PUSH
8305: LD_INT 7
8307: PUSH
8308: LD_INT 8
8310: PUSH
8311: LD_INT 11
8313: PUSH
8314: LD_INT 12
8316: PUSH
8317: LD_INT 15
8319: PUSH
8320: LD_INT 16
8322: PUSH
8323: LD_INT 20
8325: PUSH
8326: LD_INT 21
8328: PUSH
8329: LD_INT 22
8331: PUSH
8332: LD_INT 23
8334: PUSH
8335: LD_INT 25
8337: PUSH
8338: LD_INT 26
8340: PUSH
8341: LD_INT 28
8343: PUSH
8344: LD_INT 30
8346: PUSH
8347: LD_INT 31
8349: PUSH
8350: LD_INT 32
8352: PUSH
8353: LD_INT 36
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 101
8381: PUSH
8382: LD_INT 102
8384: PUSH
8385: LD_INT 103
8387: PUSH
8388: LD_INT 105
8390: PUSH
8391: LD_INT 106
8393: PUSH
8394: LD_INT 108
8396: PUSH
8397: LD_INT 109
8399: PUSH
8400: LD_INT 112
8402: PUSH
8403: LD_INT 114
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: ST_TO_ADDR
8421: GO 10400
8423: LD_INT 10
8425: DOUBLE
8426: EQUAL
8427: IFTRUE 8431
8429: GO 8615
8431: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8432: LD_ADDR_VAR 0 1
8436: PUSH
8437: LD_INT 2
8439: PUSH
8440: LD_INT 4
8442: PUSH
8443: LD_INT 5
8445: PUSH
8446: LD_INT 6
8448: PUSH
8449: LD_INT 7
8451: PUSH
8452: LD_INT 8
8454: PUSH
8455: LD_INT 9
8457: PUSH
8458: LD_INT 10
8460: PUSH
8461: LD_INT 11
8463: PUSH
8464: LD_INT 12
8466: PUSH
8467: LD_INT 13
8469: PUSH
8470: LD_INT 14
8472: PUSH
8473: LD_INT 15
8475: PUSH
8476: LD_INT 16
8478: PUSH
8479: LD_INT 17
8481: PUSH
8482: LD_INT 18
8484: PUSH
8485: LD_INT 19
8487: PUSH
8488: LD_INT 20
8490: PUSH
8491: LD_INT 21
8493: PUSH
8494: LD_INT 22
8496: PUSH
8497: LD_INT 23
8499: PUSH
8500: LD_INT 24
8502: PUSH
8503: LD_INT 25
8505: PUSH
8506: LD_INT 26
8508: PUSH
8509: LD_INT 28
8511: PUSH
8512: LD_INT 30
8514: PUSH
8515: LD_INT 31
8517: PUSH
8518: LD_INT 32
8520: PUSH
8521: LD_INT 36
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: PUSH
8555: LD_INT 101
8557: PUSH
8558: LD_INT 102
8560: PUSH
8561: LD_INT 103
8563: PUSH
8564: LD_INT 104
8566: PUSH
8567: LD_INT 105
8569: PUSH
8570: LD_INT 106
8572: PUSH
8573: LD_INT 107
8575: PUSH
8576: LD_INT 108
8578: PUSH
8579: LD_INT 109
8581: PUSH
8582: LD_INT 110
8584: PUSH
8585: LD_INT 111
8587: PUSH
8588: LD_INT 112
8590: PUSH
8591: LD_INT 114
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: ST_TO_ADDR
8613: GO 10400
8615: LD_INT 11
8617: DOUBLE
8618: EQUAL
8619: IFTRUE 8623
8621: GO 8815
8623: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
8624: LD_ADDR_VAR 0 1
8628: PUSH
8629: LD_INT 2
8631: PUSH
8632: LD_INT 3
8634: PUSH
8635: LD_INT 4
8637: PUSH
8638: LD_INT 5
8640: PUSH
8641: LD_INT 6
8643: PUSH
8644: LD_INT 7
8646: PUSH
8647: LD_INT 8
8649: PUSH
8650: LD_INT 9
8652: PUSH
8653: LD_INT 10
8655: PUSH
8656: LD_INT 11
8658: PUSH
8659: LD_INT 12
8661: PUSH
8662: LD_INT 13
8664: PUSH
8665: LD_INT 14
8667: PUSH
8668: LD_INT 15
8670: PUSH
8671: LD_INT 16
8673: PUSH
8674: LD_INT 17
8676: PUSH
8677: LD_INT 18
8679: PUSH
8680: LD_INT 19
8682: PUSH
8683: LD_INT 20
8685: PUSH
8686: LD_INT 21
8688: PUSH
8689: LD_INT 22
8691: PUSH
8692: LD_INT 23
8694: PUSH
8695: LD_INT 24
8697: PUSH
8698: LD_INT 25
8700: PUSH
8701: LD_INT 26
8703: PUSH
8704: LD_INT 28
8706: PUSH
8707: LD_INT 30
8709: PUSH
8710: LD_INT 31
8712: PUSH
8713: LD_INT 32
8715: PUSH
8716: LD_INT 34
8718: PUSH
8719: LD_INT 36
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 101
8757: PUSH
8758: LD_INT 102
8760: PUSH
8761: LD_INT 103
8763: PUSH
8764: LD_INT 104
8766: PUSH
8767: LD_INT 105
8769: PUSH
8770: LD_INT 106
8772: PUSH
8773: LD_INT 107
8775: PUSH
8776: LD_INT 108
8778: PUSH
8779: LD_INT 109
8781: PUSH
8782: LD_INT 110
8784: PUSH
8785: LD_INT 111
8787: PUSH
8788: LD_INT 112
8790: PUSH
8791: LD_INT 114
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: ST_TO_ADDR
8813: GO 10400
8815: LD_INT 12
8817: DOUBLE
8818: EQUAL
8819: IFTRUE 8823
8821: GO 9031
8823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
8824: LD_ADDR_VAR 0 1
8828: PUSH
8829: LD_INT 1
8831: PUSH
8832: LD_INT 2
8834: PUSH
8835: LD_INT 3
8837: PUSH
8838: LD_INT 4
8840: PUSH
8841: LD_INT 5
8843: PUSH
8844: LD_INT 6
8846: PUSH
8847: LD_INT 7
8849: PUSH
8850: LD_INT 8
8852: PUSH
8853: LD_INT 9
8855: PUSH
8856: LD_INT 10
8858: PUSH
8859: LD_INT 11
8861: PUSH
8862: LD_INT 12
8864: PUSH
8865: LD_INT 13
8867: PUSH
8868: LD_INT 14
8870: PUSH
8871: LD_INT 15
8873: PUSH
8874: LD_INT 16
8876: PUSH
8877: LD_INT 17
8879: PUSH
8880: LD_INT 18
8882: PUSH
8883: LD_INT 19
8885: PUSH
8886: LD_INT 20
8888: PUSH
8889: LD_INT 21
8891: PUSH
8892: LD_INT 22
8894: PUSH
8895: LD_INT 23
8897: PUSH
8898: LD_INT 24
8900: PUSH
8901: LD_INT 25
8903: PUSH
8904: LD_INT 26
8906: PUSH
8907: LD_INT 27
8909: PUSH
8910: LD_INT 28
8912: PUSH
8913: LD_INT 30
8915: PUSH
8916: LD_INT 31
8918: PUSH
8919: LD_INT 32
8921: PUSH
8922: LD_INT 33
8924: PUSH
8925: LD_INT 34
8927: PUSH
8928: LD_INT 36
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 101
8969: PUSH
8970: LD_INT 102
8972: PUSH
8973: LD_INT 103
8975: PUSH
8976: LD_INT 104
8978: PUSH
8979: LD_INT 105
8981: PUSH
8982: LD_INT 106
8984: PUSH
8985: LD_INT 107
8987: PUSH
8988: LD_INT 108
8990: PUSH
8991: LD_INT 109
8993: PUSH
8994: LD_INT 110
8996: PUSH
8997: LD_INT 111
8999: PUSH
9000: LD_INT 112
9002: PUSH
9003: LD_INT 113
9005: PUSH
9006: LD_INT 114
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: ST_TO_ADDR
9029: GO 10400
9031: LD_INT 13
9033: DOUBLE
9034: EQUAL
9035: IFTRUE 9039
9037: GO 9235
9039: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9040: LD_ADDR_VAR 0 1
9044: PUSH
9045: LD_INT 1
9047: PUSH
9048: LD_INT 2
9050: PUSH
9051: LD_INT 3
9053: PUSH
9054: LD_INT 4
9056: PUSH
9057: LD_INT 5
9059: PUSH
9060: LD_INT 8
9062: PUSH
9063: LD_INT 9
9065: PUSH
9066: LD_INT 10
9068: PUSH
9069: LD_INT 11
9071: PUSH
9072: LD_INT 12
9074: PUSH
9075: LD_INT 14
9077: PUSH
9078: LD_INT 15
9080: PUSH
9081: LD_INT 16
9083: PUSH
9084: LD_INT 17
9086: PUSH
9087: LD_INT 18
9089: PUSH
9090: LD_INT 19
9092: PUSH
9093: LD_INT 20
9095: PUSH
9096: LD_INT 21
9098: PUSH
9099: LD_INT 22
9101: PUSH
9102: LD_INT 23
9104: PUSH
9105: LD_INT 24
9107: PUSH
9108: LD_INT 25
9110: PUSH
9111: LD_INT 26
9113: PUSH
9114: LD_INT 27
9116: PUSH
9117: LD_INT 28
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 31
9125: PUSH
9126: LD_INT 32
9128: PUSH
9129: LD_INT 33
9131: PUSH
9132: LD_INT 34
9134: PUSH
9135: LD_INT 36
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: PUSH
9171: LD_INT 101
9173: PUSH
9174: LD_INT 102
9176: PUSH
9177: LD_INT 103
9179: PUSH
9180: LD_INT 104
9182: PUSH
9183: LD_INT 105
9185: PUSH
9186: LD_INT 106
9188: PUSH
9189: LD_INT 107
9191: PUSH
9192: LD_INT 108
9194: PUSH
9195: LD_INT 109
9197: PUSH
9198: LD_INT 110
9200: PUSH
9201: LD_INT 111
9203: PUSH
9204: LD_INT 112
9206: PUSH
9207: LD_INT 113
9209: PUSH
9210: LD_INT 114
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: ST_TO_ADDR
9233: GO 10400
9235: LD_INT 14
9237: DOUBLE
9238: EQUAL
9239: IFTRUE 9243
9241: GO 9455
9243: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9244: LD_ADDR_VAR 0 1
9248: PUSH
9249: LD_INT 1
9251: PUSH
9252: LD_INT 2
9254: PUSH
9255: LD_INT 3
9257: PUSH
9258: LD_INT 4
9260: PUSH
9261: LD_INT 5
9263: PUSH
9264: LD_INT 6
9266: PUSH
9267: LD_INT 7
9269: PUSH
9270: LD_INT 8
9272: PUSH
9273: LD_INT 9
9275: PUSH
9276: LD_INT 10
9278: PUSH
9279: LD_INT 11
9281: PUSH
9282: LD_INT 12
9284: PUSH
9285: LD_INT 13
9287: PUSH
9288: LD_INT 14
9290: PUSH
9291: LD_INT 15
9293: PUSH
9294: LD_INT 16
9296: PUSH
9297: LD_INT 17
9299: PUSH
9300: LD_INT 18
9302: PUSH
9303: LD_INT 19
9305: PUSH
9306: LD_INT 20
9308: PUSH
9309: LD_INT 21
9311: PUSH
9312: LD_INT 22
9314: PUSH
9315: LD_INT 23
9317: PUSH
9318: LD_INT 24
9320: PUSH
9321: LD_INT 25
9323: PUSH
9324: LD_INT 26
9326: PUSH
9327: LD_INT 27
9329: PUSH
9330: LD_INT 28
9332: PUSH
9333: LD_INT 29
9335: PUSH
9336: LD_INT 30
9338: PUSH
9339: LD_INT 31
9341: PUSH
9342: LD_INT 32
9344: PUSH
9345: LD_INT 33
9347: PUSH
9348: LD_INT 34
9350: PUSH
9351: LD_INT 36
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 101
9393: PUSH
9394: LD_INT 102
9396: PUSH
9397: LD_INT 103
9399: PUSH
9400: LD_INT 104
9402: PUSH
9403: LD_INT 105
9405: PUSH
9406: LD_INT 106
9408: PUSH
9409: LD_INT 107
9411: PUSH
9412: LD_INT 108
9414: PUSH
9415: LD_INT 109
9417: PUSH
9418: LD_INT 110
9420: PUSH
9421: LD_INT 111
9423: PUSH
9424: LD_INT 112
9426: PUSH
9427: LD_INT 113
9429: PUSH
9430: LD_INT 114
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: ST_TO_ADDR
9453: GO 10400
9455: LD_INT 15
9457: DOUBLE
9458: EQUAL
9459: IFTRUE 9463
9461: GO 9675
9463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
9464: LD_ADDR_VAR 0 1
9468: PUSH
9469: LD_INT 1
9471: PUSH
9472: LD_INT 2
9474: PUSH
9475: LD_INT 3
9477: PUSH
9478: LD_INT 4
9480: PUSH
9481: LD_INT 5
9483: PUSH
9484: LD_INT 6
9486: PUSH
9487: LD_INT 7
9489: PUSH
9490: LD_INT 8
9492: PUSH
9493: LD_INT 9
9495: PUSH
9496: LD_INT 10
9498: PUSH
9499: LD_INT 11
9501: PUSH
9502: LD_INT 12
9504: PUSH
9505: LD_INT 13
9507: PUSH
9508: LD_INT 14
9510: PUSH
9511: LD_INT 15
9513: PUSH
9514: LD_INT 16
9516: PUSH
9517: LD_INT 17
9519: PUSH
9520: LD_INT 18
9522: PUSH
9523: LD_INT 19
9525: PUSH
9526: LD_INT 20
9528: PUSH
9529: LD_INT 21
9531: PUSH
9532: LD_INT 22
9534: PUSH
9535: LD_INT 23
9537: PUSH
9538: LD_INT 24
9540: PUSH
9541: LD_INT 25
9543: PUSH
9544: LD_INT 26
9546: PUSH
9547: LD_INT 27
9549: PUSH
9550: LD_INT 28
9552: PUSH
9553: LD_INT 29
9555: PUSH
9556: LD_INT 30
9558: PUSH
9559: LD_INT 31
9561: PUSH
9562: LD_INT 32
9564: PUSH
9565: LD_INT 33
9567: PUSH
9568: LD_INT 34
9570: PUSH
9571: LD_INT 36
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 101
9613: PUSH
9614: LD_INT 102
9616: PUSH
9617: LD_INT 103
9619: PUSH
9620: LD_INT 104
9622: PUSH
9623: LD_INT 105
9625: PUSH
9626: LD_INT 106
9628: PUSH
9629: LD_INT 107
9631: PUSH
9632: LD_INT 108
9634: PUSH
9635: LD_INT 109
9637: PUSH
9638: LD_INT 110
9640: PUSH
9641: LD_INT 111
9643: PUSH
9644: LD_INT 112
9646: PUSH
9647: LD_INT 113
9649: PUSH
9650: LD_INT 114
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: ST_TO_ADDR
9673: GO 10400
9675: LD_INT 16
9677: DOUBLE
9678: EQUAL
9679: IFTRUE 9683
9681: GO 9807
9683: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
9684: LD_ADDR_VAR 0 1
9688: PUSH
9689: LD_INT 2
9691: PUSH
9692: LD_INT 4
9694: PUSH
9695: LD_INT 5
9697: PUSH
9698: LD_INT 7
9700: PUSH
9701: LD_INT 11
9703: PUSH
9704: LD_INT 12
9706: PUSH
9707: LD_INT 15
9709: PUSH
9710: LD_INT 16
9712: PUSH
9713: LD_INT 20
9715: PUSH
9716: LD_INT 21
9718: PUSH
9719: LD_INT 22
9721: PUSH
9722: LD_INT 23
9724: PUSH
9725: LD_INT 25
9727: PUSH
9728: LD_INT 26
9730: PUSH
9731: LD_INT 30
9733: PUSH
9734: LD_INT 31
9736: PUSH
9737: LD_INT 32
9739: PUSH
9740: LD_INT 33
9742: PUSH
9743: LD_INT 34
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 101
9769: PUSH
9770: LD_INT 102
9772: PUSH
9773: LD_INT 103
9775: PUSH
9776: LD_INT 106
9778: PUSH
9779: LD_INT 108
9781: PUSH
9782: LD_INT 112
9784: PUSH
9785: LD_INT 113
9787: PUSH
9788: LD_INT 114
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: ST_TO_ADDR
9805: GO 10400
9807: LD_INT 17
9809: DOUBLE
9810: EQUAL
9811: IFTRUE 9815
9813: GO 10027
9815: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
9816: LD_ADDR_VAR 0 1
9820: PUSH
9821: LD_INT 1
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: LD_INT 3
9829: PUSH
9830: LD_INT 4
9832: PUSH
9833: LD_INT 5
9835: PUSH
9836: LD_INT 6
9838: PUSH
9839: LD_INT 7
9841: PUSH
9842: LD_INT 8
9844: PUSH
9845: LD_INT 9
9847: PUSH
9848: LD_INT 10
9850: PUSH
9851: LD_INT 11
9853: PUSH
9854: LD_INT 12
9856: PUSH
9857: LD_INT 13
9859: PUSH
9860: LD_INT 14
9862: PUSH
9863: LD_INT 15
9865: PUSH
9866: LD_INT 16
9868: PUSH
9869: LD_INT 17
9871: PUSH
9872: LD_INT 18
9874: PUSH
9875: LD_INT 19
9877: PUSH
9878: LD_INT 20
9880: PUSH
9881: LD_INT 21
9883: PUSH
9884: LD_INT 22
9886: PUSH
9887: LD_INT 23
9889: PUSH
9890: LD_INT 24
9892: PUSH
9893: LD_INT 25
9895: PUSH
9896: LD_INT 26
9898: PUSH
9899: LD_INT 27
9901: PUSH
9902: LD_INT 28
9904: PUSH
9905: LD_INT 29
9907: PUSH
9908: LD_INT 30
9910: PUSH
9911: LD_INT 31
9913: PUSH
9914: LD_INT 32
9916: PUSH
9917: LD_INT 33
9919: PUSH
9920: LD_INT 34
9922: PUSH
9923: LD_INT 36
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 101
9965: PUSH
9966: LD_INT 102
9968: PUSH
9969: LD_INT 103
9971: PUSH
9972: LD_INT 104
9974: PUSH
9975: LD_INT 105
9977: PUSH
9978: LD_INT 106
9980: PUSH
9981: LD_INT 107
9983: PUSH
9984: LD_INT 108
9986: PUSH
9987: LD_INT 109
9989: PUSH
9990: LD_INT 110
9992: PUSH
9993: LD_INT 111
9995: PUSH
9996: LD_INT 112
9998: PUSH
9999: LD_INT 113
10001: PUSH
10002: LD_INT 114
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: ST_TO_ADDR
10025: GO 10400
10027: LD_INT 18
10029: DOUBLE
10030: EQUAL
10031: IFTRUE 10035
10033: GO 10171
10035: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10036: LD_ADDR_VAR 0 1
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: LD_INT 4
10046: PUSH
10047: LD_INT 5
10049: PUSH
10050: LD_INT 7
10052: PUSH
10053: LD_INT 11
10055: PUSH
10056: LD_INT 12
10058: PUSH
10059: LD_INT 15
10061: PUSH
10062: LD_INT 16
10064: PUSH
10065: LD_INT 20
10067: PUSH
10068: LD_INT 21
10070: PUSH
10071: LD_INT 22
10073: PUSH
10074: LD_INT 23
10076: PUSH
10077: LD_INT 25
10079: PUSH
10080: LD_INT 26
10082: PUSH
10083: LD_INT 30
10085: PUSH
10086: LD_INT 31
10088: PUSH
10089: LD_INT 32
10091: PUSH
10092: LD_INT 33
10094: PUSH
10095: LD_INT 34
10097: PUSH
10098: LD_INT 35
10100: PUSH
10101: LD_INT 36
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 101
10129: PUSH
10130: LD_INT 102
10132: PUSH
10133: LD_INT 103
10135: PUSH
10136: LD_INT 106
10138: PUSH
10139: LD_INT 108
10141: PUSH
10142: LD_INT 112
10144: PUSH
10145: LD_INT 113
10147: PUSH
10148: LD_INT 114
10150: PUSH
10151: LD_INT 115
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: ST_TO_ADDR
10169: GO 10400
10171: LD_INT 19
10173: DOUBLE
10174: EQUAL
10175: IFTRUE 10179
10177: GO 10399
10179: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10180: LD_ADDR_VAR 0 1
10184: PUSH
10185: LD_INT 1
10187: PUSH
10188: LD_INT 2
10190: PUSH
10191: LD_INT 3
10193: PUSH
10194: LD_INT 4
10196: PUSH
10197: LD_INT 5
10199: PUSH
10200: LD_INT 6
10202: PUSH
10203: LD_INT 7
10205: PUSH
10206: LD_INT 8
10208: PUSH
10209: LD_INT 9
10211: PUSH
10212: LD_INT 10
10214: PUSH
10215: LD_INT 11
10217: PUSH
10218: LD_INT 12
10220: PUSH
10221: LD_INT 13
10223: PUSH
10224: LD_INT 14
10226: PUSH
10227: LD_INT 15
10229: PUSH
10230: LD_INT 16
10232: PUSH
10233: LD_INT 17
10235: PUSH
10236: LD_INT 18
10238: PUSH
10239: LD_INT 19
10241: PUSH
10242: LD_INT 20
10244: PUSH
10245: LD_INT 21
10247: PUSH
10248: LD_INT 22
10250: PUSH
10251: LD_INT 23
10253: PUSH
10254: LD_INT 24
10256: PUSH
10257: LD_INT 25
10259: PUSH
10260: LD_INT 26
10262: PUSH
10263: LD_INT 27
10265: PUSH
10266: LD_INT 28
10268: PUSH
10269: LD_INT 29
10271: PUSH
10272: LD_INT 30
10274: PUSH
10275: LD_INT 31
10277: PUSH
10278: LD_INT 32
10280: PUSH
10281: LD_INT 33
10283: PUSH
10284: LD_INT 34
10286: PUSH
10287: LD_INT 35
10289: PUSH
10290: LD_INT 36
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 101
10333: PUSH
10334: LD_INT 102
10336: PUSH
10337: LD_INT 103
10339: PUSH
10340: LD_INT 104
10342: PUSH
10343: LD_INT 105
10345: PUSH
10346: LD_INT 106
10348: PUSH
10349: LD_INT 107
10351: PUSH
10352: LD_INT 108
10354: PUSH
10355: LD_INT 109
10357: PUSH
10358: LD_INT 110
10360: PUSH
10361: LD_INT 111
10363: PUSH
10364: LD_INT 112
10366: PUSH
10367: LD_INT 113
10369: PUSH
10370: LD_INT 114
10372: PUSH
10373: LD_INT 115
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: ST_TO_ADDR
10397: GO 10400
10399: POP
// end else
10400: GO 10619
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10402: LD_ADDR_VAR 0 1
10406: PUSH
10407: LD_INT 1
10409: PUSH
10410: LD_INT 2
10412: PUSH
10413: LD_INT 3
10415: PUSH
10416: LD_INT 4
10418: PUSH
10419: LD_INT 5
10421: PUSH
10422: LD_INT 6
10424: PUSH
10425: LD_INT 7
10427: PUSH
10428: LD_INT 8
10430: PUSH
10431: LD_INT 9
10433: PUSH
10434: LD_INT 10
10436: PUSH
10437: LD_INT 11
10439: PUSH
10440: LD_INT 12
10442: PUSH
10443: LD_INT 13
10445: PUSH
10446: LD_INT 14
10448: PUSH
10449: LD_INT 15
10451: PUSH
10452: LD_INT 16
10454: PUSH
10455: LD_INT 17
10457: PUSH
10458: LD_INT 18
10460: PUSH
10461: LD_INT 19
10463: PUSH
10464: LD_INT 20
10466: PUSH
10467: LD_INT 21
10469: PUSH
10470: LD_INT 22
10472: PUSH
10473: LD_INT 23
10475: PUSH
10476: LD_INT 24
10478: PUSH
10479: LD_INT 25
10481: PUSH
10482: LD_INT 26
10484: PUSH
10485: LD_INT 27
10487: PUSH
10488: LD_INT 28
10490: PUSH
10491: LD_INT 29
10493: PUSH
10494: LD_INT 30
10496: PUSH
10497: LD_INT 31
10499: PUSH
10500: LD_INT 32
10502: PUSH
10503: LD_INT 33
10505: PUSH
10506: LD_INT 34
10508: PUSH
10509: LD_INT 35
10511: PUSH
10512: LD_INT 36
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 101
10555: PUSH
10556: LD_INT 102
10558: PUSH
10559: LD_INT 103
10561: PUSH
10562: LD_INT 104
10564: PUSH
10565: LD_INT 105
10567: PUSH
10568: LD_INT 106
10570: PUSH
10571: LD_INT 107
10573: PUSH
10574: LD_INT 108
10576: PUSH
10577: LD_INT 109
10579: PUSH
10580: LD_INT 110
10582: PUSH
10583: LD_INT 111
10585: PUSH
10586: LD_INT 112
10588: PUSH
10589: LD_INT 113
10591: PUSH
10592: LD_INT 114
10594: PUSH
10595: LD_INT 115
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: ST_TO_ADDR
// if result then
10619: LD_VAR 0 1
10623: IFFALSE 10912
// begin normal :=  ;
10625: LD_ADDR_VAR 0 3
10629: PUSH
10630: LD_STRING 
10632: ST_TO_ADDR
// hardcore :=  ;
10633: LD_ADDR_VAR 0 4
10637: PUSH
10638: LD_STRING 
10640: ST_TO_ADDR
// for i = 1 to normalCounter do
10641: LD_ADDR_VAR 0 5
10645: PUSH
10646: DOUBLE
10647: LD_INT 1
10649: DEC
10650: ST_TO_ADDR
10651: LD_EXP 25
10655: PUSH
10656: FOR_TO
10657: IFFALSE 10758
// begin tmp := 0 ;
10659: LD_ADDR_VAR 0 2
10663: PUSH
10664: LD_STRING 0
10666: ST_TO_ADDR
// if result [ 1 ] then
10667: LD_VAR 0 1
10671: PUSH
10672: LD_INT 1
10674: ARRAY
10675: IFFALSE 10740
// if result [ 1 ] [ 1 ] = i then
10677: LD_VAR 0 1
10681: PUSH
10682: LD_INT 1
10684: ARRAY
10685: PUSH
10686: LD_INT 1
10688: ARRAY
10689: PUSH
10690: LD_VAR 0 5
10694: EQUAL
10695: IFFALSE 10740
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10697: LD_ADDR_VAR 0 1
10701: PUSH
10702: LD_VAR 0 1
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: LD_VAR 0 1
10714: PUSH
10715: LD_INT 1
10717: ARRAY
10718: PPUSH
10719: LD_INT 1
10721: PPUSH
10722: CALL_OW 3
10726: PPUSH
10727: CALL_OW 1
10731: ST_TO_ADDR
// tmp := 1 ;
10732: LD_ADDR_VAR 0 2
10736: PUSH
10737: LD_STRING 1
10739: ST_TO_ADDR
// end ; normal := normal & tmp ;
10740: LD_ADDR_VAR 0 3
10744: PUSH
10745: LD_VAR 0 3
10749: PUSH
10750: LD_VAR 0 2
10754: STR
10755: ST_TO_ADDR
// end ;
10756: GO 10656
10758: POP
10759: POP
// for i = 1 to hardcoreCounter do
10760: LD_ADDR_VAR 0 5
10764: PUSH
10765: DOUBLE
10766: LD_INT 1
10768: DEC
10769: ST_TO_ADDR
10770: LD_EXP 26
10774: PUSH
10775: FOR_TO
10776: IFFALSE 10881
// begin tmp := 0 ;
10778: LD_ADDR_VAR 0 2
10782: PUSH
10783: LD_STRING 0
10785: ST_TO_ADDR
// if result [ 2 ] then
10786: LD_VAR 0 1
10790: PUSH
10791: LD_INT 2
10793: ARRAY
10794: IFFALSE 10863
// if result [ 2 ] [ 1 ] = 100 + i then
10796: LD_VAR 0 1
10800: PUSH
10801: LD_INT 2
10803: ARRAY
10804: PUSH
10805: LD_INT 1
10807: ARRAY
10808: PUSH
10809: LD_INT 100
10811: PUSH
10812: LD_VAR 0 5
10816: PLUS
10817: EQUAL
10818: IFFALSE 10863
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10820: LD_ADDR_VAR 0 1
10824: PUSH
10825: LD_VAR 0 1
10829: PPUSH
10830: LD_INT 2
10832: PPUSH
10833: LD_VAR 0 1
10837: PUSH
10838: LD_INT 2
10840: ARRAY
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 3
10849: PPUSH
10850: CALL_OW 1
10854: ST_TO_ADDR
// tmp := 1 ;
10855: LD_ADDR_VAR 0 2
10859: PUSH
10860: LD_STRING 1
10862: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10863: LD_ADDR_VAR 0 4
10867: PUSH
10868: LD_VAR 0 4
10872: PUSH
10873: LD_VAR 0 2
10877: STR
10878: ST_TO_ADDR
// end ;
10879: GO 10775
10881: POP
10882: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10883: LD_STRING getStreamItemsFromMission("
10885: PUSH
10886: LD_VAR 0 3
10890: STR
10891: PUSH
10892: LD_STRING ","
10894: STR
10895: PUSH
10896: LD_VAR 0 4
10900: STR
10901: PUSH
10902: LD_STRING ")
10904: STR
10905: PPUSH
10906: CALL_OW 559
// end else
10910: GO 10919
// ToLua ( getStreamItemsFromMission("","") ) ;
10912: LD_STRING getStreamItemsFromMission("","")
10914: PPUSH
10915: CALL_OW 559
// end ;
10919: LD_VAR 0 1
10923: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10924: LD_EXP 24
10928: PUSH
10929: LD_EXP 29
10933: AND
10934: IFFALSE 11058
10936: GO 10938
10938: DISABLE
10939: LD_INT 0
10941: PPUSH
10942: PPUSH
// begin enable ;
10943: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10944: LD_ADDR_VAR 0 2
10948: PUSH
10949: LD_INT 22
10951: PUSH
10952: LD_OWVAR 2
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 2
10963: PUSH
10964: LD_INT 34
10966: PUSH
10967: LD_INT 7
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 34
10976: PUSH
10977: LD_INT 45
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 34
10986: PUSH
10987: LD_INT 28
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 34
10996: PUSH
10997: LD_INT 47
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PPUSH
11015: CALL_OW 69
11019: ST_TO_ADDR
// if not tmp then
11020: LD_VAR 0 2
11024: NOT
11025: IFFALSE 11029
// exit ;
11027: GO 11058
// for i in tmp do
11029: LD_ADDR_VAR 0 1
11033: PUSH
11034: LD_VAR 0 2
11038: PUSH
11039: FOR_IN
11040: IFFALSE 11056
// begin SetLives ( i , 0 ) ;
11042: LD_VAR 0 1
11046: PPUSH
11047: LD_INT 0
11049: PPUSH
11050: CALL_OW 234
// end ;
11054: GO 11039
11056: POP
11057: POP
// end ;
11058: PPOPN 2
11060: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11061: LD_EXP 24
11065: PUSH
11066: LD_EXP 30
11070: AND
11071: IFFALSE 11155
11073: GO 11075
11075: DISABLE
11076: LD_INT 0
11078: PPUSH
11079: PPUSH
// begin enable ;
11080: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11081: LD_ADDR_VAR 0 2
11085: PUSH
11086: LD_INT 22
11088: PUSH
11089: LD_OWVAR 2
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 32
11100: PUSH
11101: LD_INT 3
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 69
11116: ST_TO_ADDR
// if not tmp then
11117: LD_VAR 0 2
11121: NOT
11122: IFFALSE 11126
// exit ;
11124: GO 11155
// for i in tmp do
11126: LD_ADDR_VAR 0 1
11130: PUSH
11131: LD_VAR 0 2
11135: PUSH
11136: FOR_IN
11137: IFFALSE 11153
// begin SetLives ( i , 0 ) ;
11139: LD_VAR 0 1
11143: PPUSH
11144: LD_INT 0
11146: PPUSH
11147: CALL_OW 234
// end ;
11151: GO 11136
11153: POP
11154: POP
// end ;
11155: PPOPN 2
11157: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11158: LD_EXP 24
11162: PUSH
11163: LD_EXP 27
11167: AND
11168: IFFALSE 11261
11170: GO 11172
11172: DISABLE
11173: LD_INT 0
11175: PPUSH
// begin enable ;
11176: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11177: LD_ADDR_VAR 0 1
11181: PUSH
11182: LD_INT 22
11184: PUSH
11185: LD_OWVAR 2
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 2
11196: PUSH
11197: LD_INT 25
11199: PUSH
11200: LD_INT 5
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: LD_INT 25
11209: PUSH
11210: LD_INT 9
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 25
11219: PUSH
11220: LD_INT 8
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PPUSH
11237: CALL_OW 69
11241: PUSH
11242: FOR_IN
11243: IFFALSE 11259
// begin SetClass ( i , 1 ) ;
11245: LD_VAR 0 1
11249: PPUSH
11250: LD_INT 1
11252: PPUSH
11253: CALL_OW 336
// end ;
11257: GO 11242
11259: POP
11260: POP
// end ;
11261: PPOPN 1
11263: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11264: LD_EXP 24
11268: PUSH
11269: LD_EXP 28
11273: AND
11274: PUSH
11275: LD_OWVAR 65
11279: PUSH
11280: LD_INT 7
11282: LESS
11283: AND
11284: IFFALSE 11298
11286: GO 11288
11288: DISABLE
// begin enable ;
11289: ENABLE
// game_speed := 7 ;
11290: LD_ADDR_OWVAR 65
11294: PUSH
11295: LD_INT 7
11297: ST_TO_ADDR
// end ;
11298: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11299: LD_EXP 24
11303: PUSH
11304: LD_EXP 31
11308: AND
11309: IFFALSE 11511
11311: GO 11313
11313: DISABLE
11314: LD_INT 0
11316: PPUSH
11317: PPUSH
11318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11319: LD_ADDR_VAR 0 3
11323: PUSH
11324: LD_INT 81
11326: PUSH
11327: LD_OWVAR 2
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 21
11338: PUSH
11339: LD_INT 1
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PPUSH
11350: CALL_OW 69
11354: ST_TO_ADDR
// if not tmp then
11355: LD_VAR 0 3
11359: NOT
11360: IFFALSE 11364
// exit ;
11362: GO 11511
// if tmp > 5 then
11364: LD_VAR 0 3
11368: PUSH
11369: LD_INT 5
11371: GREATER
11372: IFFALSE 11384
// k := 5 else
11374: LD_ADDR_VAR 0 2
11378: PUSH
11379: LD_INT 5
11381: ST_TO_ADDR
11382: GO 11394
// k := tmp ;
11384: LD_ADDR_VAR 0 2
11388: PUSH
11389: LD_VAR 0 3
11393: ST_TO_ADDR
// for i := 1 to k do
11394: LD_ADDR_VAR 0 1
11398: PUSH
11399: DOUBLE
11400: LD_INT 1
11402: DEC
11403: ST_TO_ADDR
11404: LD_VAR 0 2
11408: PUSH
11409: FOR_TO
11410: IFFALSE 11509
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11412: LD_VAR 0 3
11416: PUSH
11417: LD_VAR 0 1
11421: ARRAY
11422: PPUSH
11423: LD_VAR 0 1
11427: PUSH
11428: LD_INT 4
11430: MOD
11431: PUSH
11432: LD_INT 1
11434: PLUS
11435: PPUSH
11436: CALL_OW 259
11440: PUSH
11441: LD_INT 10
11443: LESS
11444: IFFALSE 11507
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11446: LD_VAR 0 3
11450: PUSH
11451: LD_VAR 0 1
11455: ARRAY
11456: PPUSH
11457: LD_VAR 0 1
11461: PUSH
11462: LD_INT 4
11464: MOD
11465: PUSH
11466: LD_INT 1
11468: PLUS
11469: PPUSH
11470: LD_VAR 0 3
11474: PUSH
11475: LD_VAR 0 1
11479: ARRAY
11480: PPUSH
11481: LD_VAR 0 1
11485: PUSH
11486: LD_INT 4
11488: MOD
11489: PUSH
11490: LD_INT 1
11492: PLUS
11493: PPUSH
11494: CALL_OW 259
11498: PUSH
11499: LD_INT 1
11501: PLUS
11502: PPUSH
11503: CALL_OW 237
11507: GO 11409
11509: POP
11510: POP
// end ;
11511: PPOPN 3
11513: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11514: LD_EXP 24
11518: PUSH
11519: LD_EXP 32
11523: AND
11524: IFFALSE 11544
11526: GO 11528
11528: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11529: LD_INT 4
11531: PPUSH
11532: LD_OWVAR 2
11536: PPUSH
11537: LD_INT 0
11539: PPUSH
11540: CALL_OW 324
11544: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11545: LD_EXP 24
11549: PUSH
11550: LD_EXP 61
11554: AND
11555: IFFALSE 11575
11557: GO 11559
11559: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11560: LD_INT 19
11562: PPUSH
11563: LD_OWVAR 2
11567: PPUSH
11568: LD_INT 0
11570: PPUSH
11571: CALL_OW 324
11575: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11576: LD_EXP 24
11580: PUSH
11581: LD_EXP 33
11585: AND
11586: IFFALSE 11688
11588: GO 11590
11590: DISABLE
11591: LD_INT 0
11593: PPUSH
11594: PPUSH
// begin enable ;
11595: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11596: LD_ADDR_VAR 0 2
11600: PUSH
11601: LD_INT 22
11603: PUSH
11604: LD_OWVAR 2
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 2
11615: PUSH
11616: LD_INT 34
11618: PUSH
11619: LD_INT 11
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 34
11628: PUSH
11629: LD_INT 30
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PPUSH
11645: CALL_OW 69
11649: ST_TO_ADDR
// if not tmp then
11650: LD_VAR 0 2
11654: NOT
11655: IFFALSE 11659
// exit ;
11657: GO 11688
// for i in tmp do
11659: LD_ADDR_VAR 0 1
11663: PUSH
11664: LD_VAR 0 2
11668: PUSH
11669: FOR_IN
11670: IFFALSE 11686
// begin SetLives ( i , 0 ) ;
11672: LD_VAR 0 1
11676: PPUSH
11677: LD_INT 0
11679: PPUSH
11680: CALL_OW 234
// end ;
11684: GO 11669
11686: POP
11687: POP
// end ;
11688: PPOPN 2
11690: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11691: LD_EXP 24
11695: PUSH
11696: LD_EXP 34
11700: AND
11701: IFFALSE 11721
11703: GO 11705
11705: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11706: LD_INT 32
11708: PPUSH
11709: LD_OWVAR 2
11713: PPUSH
11714: LD_INT 0
11716: PPUSH
11717: CALL_OW 324
11721: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11722: LD_EXP 24
11726: PUSH
11727: LD_EXP 35
11731: AND
11732: IFFALSE 11913
11734: GO 11736
11736: DISABLE
11737: LD_INT 0
11739: PPUSH
11740: PPUSH
11741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11742: LD_ADDR_VAR 0 2
11746: PUSH
11747: LD_INT 22
11749: PUSH
11750: LD_OWVAR 2
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 33
11761: PUSH
11762: LD_INT 3
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 69
11777: ST_TO_ADDR
// if not tmp then
11778: LD_VAR 0 2
11782: NOT
11783: IFFALSE 11787
// exit ;
11785: GO 11913
// side := 0 ;
11787: LD_ADDR_VAR 0 3
11791: PUSH
11792: LD_INT 0
11794: ST_TO_ADDR
// for i := 1 to 8 do
11795: LD_ADDR_VAR 0 1
11799: PUSH
11800: DOUBLE
11801: LD_INT 1
11803: DEC
11804: ST_TO_ADDR
11805: LD_INT 8
11807: PUSH
11808: FOR_TO
11809: IFFALSE 11857
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11811: LD_OWVAR 2
11815: PUSH
11816: LD_VAR 0 1
11820: NONEQUAL
11821: PUSH
11822: LD_OWVAR 2
11826: PPUSH
11827: LD_VAR 0 1
11831: PPUSH
11832: CALL_OW 81
11836: PUSH
11837: LD_INT 2
11839: EQUAL
11840: AND
11841: IFFALSE 11855
// begin side := i ;
11843: LD_ADDR_VAR 0 3
11847: PUSH
11848: LD_VAR 0 1
11852: ST_TO_ADDR
// break ;
11853: GO 11857
// end ;
11855: GO 11808
11857: POP
11858: POP
// if not side then
11859: LD_VAR 0 3
11863: NOT
11864: IFFALSE 11868
// exit ;
11866: GO 11913
// for i := 1 to tmp do
11868: LD_ADDR_VAR 0 1
11872: PUSH
11873: DOUBLE
11874: LD_INT 1
11876: DEC
11877: ST_TO_ADDR
11878: LD_VAR 0 2
11882: PUSH
11883: FOR_TO
11884: IFFALSE 11911
// if Prob ( 60 ) then
11886: LD_INT 60
11888: PPUSH
11889: CALL_OW 13
11893: IFFALSE 11909
// SetSide ( i , side ) ;
11895: LD_VAR 0 1
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: CALL_OW 235
11909: GO 11883
11911: POP
11912: POP
// end ;
11913: PPOPN 3
11915: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11916: LD_EXP 24
11920: PUSH
11921: LD_EXP 37
11925: AND
11926: IFFALSE 12045
11928: GO 11930
11930: DISABLE
11931: LD_INT 0
11933: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11934: LD_ADDR_VAR 0 1
11938: PUSH
11939: LD_INT 22
11941: PUSH
11942: LD_OWVAR 2
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 21
11953: PUSH
11954: LD_INT 1
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: LD_INT 3
11963: PUSH
11964: LD_INT 23
11966: PUSH
11967: LD_INT 0
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: PPUSH
11983: CALL_OW 69
11987: PUSH
11988: FOR_IN
11989: IFFALSE 12043
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11991: LD_VAR 0 1
11995: PPUSH
11996: CALL_OW 257
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: LD_INT 2
12006: PUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 4
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: IN
12019: IFFALSE 12041
// SetClass ( un , rand ( 1 , 4 ) ) ;
12021: LD_VAR 0 1
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: LD_INT 4
12031: PPUSH
12032: CALL_OW 12
12036: PPUSH
12037: CALL_OW 336
12041: GO 11988
12043: POP
12044: POP
// end ;
12045: PPOPN 1
12047: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12048: LD_EXP 24
12052: PUSH
12053: LD_EXP 36
12057: AND
12058: IFFALSE 12137
12060: GO 12062
12062: DISABLE
12063: LD_INT 0
12065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12066: LD_ADDR_VAR 0 1
12070: PUSH
12071: LD_INT 22
12073: PUSH
12074: LD_OWVAR 2
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 21
12085: PUSH
12086: LD_INT 3
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PPUSH
12097: CALL_OW 69
12101: ST_TO_ADDR
// if not tmp then
12102: LD_VAR 0 1
12106: NOT
12107: IFFALSE 12111
// exit ;
12109: GO 12137
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12111: LD_VAR 0 1
12115: PUSH
12116: LD_INT 1
12118: PPUSH
12119: LD_VAR 0 1
12123: PPUSH
12124: CALL_OW 12
12128: ARRAY
12129: PPUSH
12130: LD_INT 100
12132: PPUSH
12133: CALL_OW 234
// end ;
12137: PPOPN 1
12139: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12140: LD_EXP 24
12144: PUSH
12145: LD_EXP 38
12149: AND
12150: IFFALSE 12248
12152: GO 12154
12154: DISABLE
12155: LD_INT 0
12157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12158: LD_ADDR_VAR 0 1
12162: PUSH
12163: LD_INT 22
12165: PUSH
12166: LD_OWVAR 2
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 21
12177: PUSH
12178: LD_INT 1
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 69
12193: ST_TO_ADDR
// if not tmp then
12194: LD_VAR 0 1
12198: NOT
12199: IFFALSE 12203
// exit ;
12201: GO 12248
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 1
12210: PPUSH
12211: LD_VAR 0 1
12215: PPUSH
12216: CALL_OW 12
12220: ARRAY
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: LD_INT 4
12227: PPUSH
12228: CALL_OW 12
12232: PPUSH
12233: LD_INT 3000
12235: PPUSH
12236: LD_INT 9000
12238: PPUSH
12239: CALL_OW 12
12243: PPUSH
12244: CALL_OW 492
// end ;
12248: PPOPN 1
12250: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12251: LD_EXP 24
12255: PUSH
12256: LD_EXP 39
12260: AND
12261: IFFALSE 12281
12263: GO 12265
12265: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12266: LD_INT 1
12268: PPUSH
12269: LD_OWVAR 2
12273: PPUSH
12274: LD_INT 0
12276: PPUSH
12277: CALL_OW 324
12281: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12282: LD_EXP 24
12286: PUSH
12287: LD_EXP 40
12291: AND
12292: IFFALSE 12375
12294: GO 12296
12296: DISABLE
12297: LD_INT 0
12299: PPUSH
12300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12301: LD_ADDR_VAR 0 2
12305: PUSH
12306: LD_INT 22
12308: PUSH
12309: LD_OWVAR 2
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 21
12320: PUSH
12321: LD_INT 3
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PPUSH
12332: CALL_OW 69
12336: ST_TO_ADDR
// if not tmp then
12337: LD_VAR 0 2
12341: NOT
12342: IFFALSE 12346
// exit ;
12344: GO 12375
// for i in tmp do
12346: LD_ADDR_VAR 0 1
12350: PUSH
12351: LD_VAR 0 2
12355: PUSH
12356: FOR_IN
12357: IFFALSE 12373
// SetBLevel ( i , 10 ) ;
12359: LD_VAR 0 1
12363: PPUSH
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 241
12371: GO 12356
12373: POP
12374: POP
// end ;
12375: PPOPN 2
12377: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12378: LD_EXP 24
12382: PUSH
12383: LD_EXP 41
12387: AND
12388: IFFALSE 12499
12390: GO 12392
12392: DISABLE
12393: LD_INT 0
12395: PPUSH
12396: PPUSH
12397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12398: LD_ADDR_VAR 0 3
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_OWVAR 2
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 25
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: ST_TO_ADDR
// if not tmp then
12434: LD_VAR 0 3
12438: NOT
12439: IFFALSE 12443
// exit ;
12441: GO 12499
// un := tmp [ rand ( 1 , tmp ) ] ;
12443: LD_ADDR_VAR 0 2
12447: PUSH
12448: LD_VAR 0 3
12452: PUSH
12453: LD_INT 1
12455: PPUSH
12456: LD_VAR 0 3
12460: PPUSH
12461: CALL_OW 12
12465: ARRAY
12466: ST_TO_ADDR
// if Crawls ( un ) then
12467: LD_VAR 0 2
12471: PPUSH
12472: CALL_OW 318
12476: IFFALSE 12487
// ComWalk ( un ) ;
12478: LD_VAR 0 2
12482: PPUSH
12483: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12487: LD_VAR 0 2
12491: PPUSH
12492: LD_INT 5
12494: PPUSH
12495: CALL_OW 336
// end ;
12499: PPOPN 3
12501: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
12502: LD_EXP 24
12506: PUSH
12507: LD_EXP 42
12511: AND
12512: PUSH
12513: LD_OWVAR 67
12517: PUSH
12518: LD_INT 3
12520: LESS
12521: AND
12522: IFFALSE 12541
12524: GO 12526
12526: DISABLE
// Difficulty := Difficulty + 1 ;
12527: LD_ADDR_OWVAR 67
12531: PUSH
12532: LD_OWVAR 67
12536: PUSH
12537: LD_INT 1
12539: PLUS
12540: ST_TO_ADDR
12541: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12542: LD_EXP 24
12546: PUSH
12547: LD_EXP 43
12551: AND
12552: IFFALSE 12655
12554: GO 12556
12556: DISABLE
12557: LD_INT 0
12559: PPUSH
// begin for i := 1 to 5 do
12560: LD_ADDR_VAR 0 1
12564: PUSH
12565: DOUBLE
12566: LD_INT 1
12568: DEC
12569: ST_TO_ADDR
12570: LD_INT 5
12572: PUSH
12573: FOR_TO
12574: IFFALSE 12653
// begin uc_nation := nation_nature ;
12576: LD_ADDR_OWVAR 21
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// uc_side := 0 ;
12584: LD_ADDR_OWVAR 20
12588: PUSH
12589: LD_INT 0
12591: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12592: LD_ADDR_OWVAR 29
12596: PUSH
12597: LD_INT 12
12599: PUSH
12600: LD_INT 12
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: ST_TO_ADDR
// hc_agressivity := 20 ;
12607: LD_ADDR_OWVAR 35
12611: PUSH
12612: LD_INT 20
12614: ST_TO_ADDR
// hc_class := class_tiger ;
12615: LD_ADDR_OWVAR 28
12619: PUSH
12620: LD_INT 14
12622: ST_TO_ADDR
// hc_gallery :=  ;
12623: LD_ADDR_OWVAR 33
12627: PUSH
12628: LD_STRING 
12630: ST_TO_ADDR
// hc_name :=  ;
12631: LD_ADDR_OWVAR 26
12635: PUSH
12636: LD_STRING 
12638: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12639: CALL_OW 44
12643: PPUSH
12644: LD_INT 0
12646: PPUSH
12647: CALL_OW 51
// end ;
12651: GO 12573
12653: POP
12654: POP
// end ;
12655: PPOPN 1
12657: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12658: LD_EXP 24
12662: PUSH
12663: LD_EXP 44
12667: AND
12668: IFFALSE 12677
12670: GO 12672
12672: DISABLE
// StreamSibBomb ;
12673: CALL 12678 0 0
12677: END
// export function StreamSibBomb ; var i , x , y ; begin
12678: LD_INT 0
12680: PPUSH
12681: PPUSH
12682: PPUSH
12683: PPUSH
// result := false ;
12684: LD_ADDR_VAR 0 1
12688: PUSH
12689: LD_INT 0
12691: ST_TO_ADDR
// for i := 1 to 16 do
12692: LD_ADDR_VAR 0 2
12696: PUSH
12697: DOUBLE
12698: LD_INT 1
12700: DEC
12701: ST_TO_ADDR
12702: LD_INT 16
12704: PUSH
12705: FOR_TO
12706: IFFALSE 12905
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12708: LD_ADDR_VAR 0 3
12712: PUSH
12713: LD_INT 10
12715: PUSH
12716: LD_INT 20
12718: PUSH
12719: LD_INT 30
12721: PUSH
12722: LD_INT 40
12724: PUSH
12725: LD_INT 50
12727: PUSH
12728: LD_INT 60
12730: PUSH
12731: LD_INT 70
12733: PUSH
12734: LD_INT 80
12736: PUSH
12737: LD_INT 90
12739: PUSH
12740: LD_INT 100
12742: PUSH
12743: LD_INT 110
12745: PUSH
12746: LD_INT 120
12748: PUSH
12749: LD_INT 130
12751: PUSH
12752: LD_INT 140
12754: PUSH
12755: LD_INT 150
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 1
12777: PPUSH
12778: LD_INT 15
12780: PPUSH
12781: CALL_OW 12
12785: ARRAY
12786: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12787: LD_ADDR_VAR 0 4
12791: PUSH
12792: LD_INT 10
12794: PUSH
12795: LD_INT 20
12797: PUSH
12798: LD_INT 30
12800: PUSH
12801: LD_INT 40
12803: PUSH
12804: LD_INT 50
12806: PUSH
12807: LD_INT 60
12809: PUSH
12810: LD_INT 70
12812: PUSH
12813: LD_INT 80
12815: PUSH
12816: LD_INT 90
12818: PUSH
12819: LD_INT 100
12821: PUSH
12822: LD_INT 110
12824: PUSH
12825: LD_INT 120
12827: PUSH
12828: LD_INT 130
12830: PUSH
12831: LD_INT 140
12833: PUSH
12834: LD_INT 150
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 1
12856: PPUSH
12857: LD_INT 15
12859: PPUSH
12860: CALL_OW 12
12864: ARRAY
12865: ST_TO_ADDR
// if ValidHex ( x , y ) then
12866: LD_VAR 0 3
12870: PPUSH
12871: LD_VAR 0 4
12875: PPUSH
12876: CALL_OW 488
12880: IFFALSE 12903
// begin result := [ x , y ] ;
12882: LD_ADDR_VAR 0 1
12886: PUSH
12887: LD_VAR 0 3
12891: PUSH
12892: LD_VAR 0 4
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: ST_TO_ADDR
// break ;
12901: GO 12905
// end ; end ;
12903: GO 12705
12905: POP
12906: POP
// if result then
12907: LD_VAR 0 1
12911: IFFALSE 12971
// begin ToLua ( playSibBomb() ) ;
12913: LD_STRING playSibBomb()
12915: PPUSH
12916: CALL_OW 559
// wait ( 0 0$14 ) ;
12920: LD_INT 490
12922: PPUSH
12923: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12927: LD_VAR 0 1
12931: PUSH
12932: LD_INT 1
12934: ARRAY
12935: PPUSH
12936: LD_VAR 0 1
12940: PUSH
12941: LD_INT 2
12943: ARRAY
12944: PPUSH
12945: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12949: LD_VAR 0 1
12953: PUSH
12954: LD_INT 1
12956: ARRAY
12957: PPUSH
12958: LD_VAR 0 1
12962: PUSH
12963: LD_INT 2
12965: ARRAY
12966: PPUSH
12967: CALL_OW 429
// end ; end ;
12971: LD_VAR 0 1
12975: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12976: LD_EXP 24
12980: PUSH
12981: LD_EXP 46
12985: AND
12986: IFFALSE 12998
12988: GO 12990
12990: DISABLE
// YouLost (  ) ;
12991: LD_STRING 
12993: PPUSH
12994: CALL_OW 104
12998: END
// every 0 0$1 trigger StreamModeActive and sFog do
12999: LD_EXP 24
13003: PUSH
13004: LD_EXP 45
13008: AND
13009: IFFALSE 13023
13011: GO 13013
13013: DISABLE
// FogOff ( your_side ) ;
13014: LD_OWVAR 2
13018: PPUSH
13019: CALL_OW 344
13023: END
// every 0 0$1 trigger StreamModeActive and sSun do
13024: LD_EXP 24
13028: PUSH
13029: LD_EXP 47
13033: AND
13034: IFFALSE 13062
13036: GO 13038
13038: DISABLE
// begin solar_recharge_percent := 0 ;
13039: LD_ADDR_OWVAR 79
13043: PUSH
13044: LD_INT 0
13046: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13047: LD_INT 10500
13049: PPUSH
13050: CALL_OW 67
// solar_recharge_percent := 100 ;
13054: LD_ADDR_OWVAR 79
13058: PUSH
13059: LD_INT 100
13061: ST_TO_ADDR
// end ;
13062: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13063: LD_EXP 24
13067: PUSH
13068: LD_EXP 48
13072: AND
13073: IFFALSE 13312
13075: GO 13077
13077: DISABLE
13078: LD_INT 0
13080: PPUSH
13081: PPUSH
13082: PPUSH
// begin tmp := [ ] ;
13083: LD_ADDR_VAR 0 3
13087: PUSH
13088: EMPTY
13089: ST_TO_ADDR
// for i := 1 to 6 do
13090: LD_ADDR_VAR 0 1
13094: PUSH
13095: DOUBLE
13096: LD_INT 1
13098: DEC
13099: ST_TO_ADDR
13100: LD_INT 6
13102: PUSH
13103: FOR_TO
13104: IFFALSE 13209
// begin uc_nation := nation_nature ;
13106: LD_ADDR_OWVAR 21
13110: PUSH
13111: LD_INT 0
13113: ST_TO_ADDR
// uc_side := 0 ;
13114: LD_ADDR_OWVAR 20
13118: PUSH
13119: LD_INT 0
13121: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13122: LD_ADDR_OWVAR 29
13126: PUSH
13127: LD_INT 12
13129: PUSH
13130: LD_INT 12
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: ST_TO_ADDR
// hc_agressivity := 20 ;
13137: LD_ADDR_OWVAR 35
13141: PUSH
13142: LD_INT 20
13144: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13145: LD_ADDR_OWVAR 28
13149: PUSH
13150: LD_INT 17
13152: ST_TO_ADDR
// hc_gallery :=  ;
13153: LD_ADDR_OWVAR 33
13157: PUSH
13158: LD_STRING 
13160: ST_TO_ADDR
// hc_name :=  ;
13161: LD_ADDR_OWVAR 26
13165: PUSH
13166: LD_STRING 
13168: ST_TO_ADDR
// un := CreateHuman ;
13169: LD_ADDR_VAR 0 2
13173: PUSH
13174: CALL_OW 44
13178: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13179: LD_VAR 0 2
13183: PPUSH
13184: LD_INT 1
13186: PPUSH
13187: CALL_OW 51
// tmp := tmp ^ un ;
13191: LD_ADDR_VAR 0 3
13195: PUSH
13196: LD_VAR 0 3
13200: PUSH
13201: LD_VAR 0 2
13205: ADD
13206: ST_TO_ADDR
// end ;
13207: GO 13103
13209: POP
13210: POP
// repeat wait ( 0 0$1 ) ;
13211: LD_INT 35
13213: PPUSH
13214: CALL_OW 67
// for un in tmp do
13218: LD_ADDR_VAR 0 2
13222: PUSH
13223: LD_VAR 0 3
13227: PUSH
13228: FOR_IN
13229: IFFALSE 13303
// begin if IsDead ( un ) then
13231: LD_VAR 0 2
13235: PPUSH
13236: CALL_OW 301
13240: IFFALSE 13260
// begin tmp := tmp diff un ;
13242: LD_ADDR_VAR 0 3
13246: PUSH
13247: LD_VAR 0 3
13251: PUSH
13252: LD_VAR 0 2
13256: DIFF
13257: ST_TO_ADDR
// continue ;
13258: GO 13228
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13260: LD_VAR 0 2
13264: PPUSH
13265: LD_INT 3
13267: PUSH
13268: LD_INT 22
13270: PUSH
13271: LD_INT 0
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PPUSH
13282: CALL_OW 69
13286: PPUSH
13287: LD_VAR 0 2
13291: PPUSH
13292: CALL_OW 74
13296: PPUSH
13297: CALL_OW 115
// end ;
13301: GO 13228
13303: POP
13304: POP
// until not tmp ;
13305: LD_VAR 0 3
13309: NOT
13310: IFFALSE 13211
// end ;
13312: PPOPN 3
13314: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13315: LD_EXP 24
13319: PUSH
13320: LD_EXP 49
13324: AND
13325: IFFALSE 13379
13327: GO 13329
13329: DISABLE
// begin ToLua ( displayTroll(); ) ;
13330: LD_STRING displayTroll();
13332: PPUSH
13333: CALL_OW 559
// wait ( 3 3$00 ) ;
13337: LD_INT 6300
13339: PPUSH
13340: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13344: LD_STRING hideTroll();
13346: PPUSH
13347: CALL_OW 559
// wait ( 1 1$00 ) ;
13351: LD_INT 2100
13353: PPUSH
13354: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13358: LD_STRING displayTroll();
13360: PPUSH
13361: CALL_OW 559
// wait ( 1 1$00 ) ;
13365: LD_INT 2100
13367: PPUSH
13368: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13372: LD_STRING hideTroll();
13374: PPUSH
13375: CALL_OW 559
// end ;
13379: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13380: LD_EXP 24
13384: PUSH
13385: LD_EXP 50
13389: AND
13390: IFFALSE 13453
13392: GO 13394
13394: DISABLE
13395: LD_INT 0
13397: PPUSH
// begin p := 0 ;
13398: LD_ADDR_VAR 0 1
13402: PUSH
13403: LD_INT 0
13405: ST_TO_ADDR
// repeat game_speed := 1 ;
13406: LD_ADDR_OWVAR 65
13410: PUSH
13411: LD_INT 1
13413: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13414: LD_INT 35
13416: PPUSH
13417: CALL_OW 67
// p := p + 1 ;
13421: LD_ADDR_VAR 0 1
13425: PUSH
13426: LD_VAR 0 1
13430: PUSH
13431: LD_INT 1
13433: PLUS
13434: ST_TO_ADDR
// until p >= 60 ;
13435: LD_VAR 0 1
13439: PUSH
13440: LD_INT 60
13442: GREATEREQUAL
13443: IFFALSE 13406
// game_speed := 4 ;
13445: LD_ADDR_OWVAR 65
13449: PUSH
13450: LD_INT 4
13452: ST_TO_ADDR
// end ;
13453: PPOPN 1
13455: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13456: LD_EXP 24
13460: PUSH
13461: LD_EXP 51
13465: AND
13466: IFFALSE 13612
13468: GO 13470
13470: DISABLE
13471: LD_INT 0
13473: PPUSH
13474: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13475: LD_ADDR_VAR 0 1
13479: PUSH
13480: LD_INT 22
13482: PUSH
13483: LD_OWVAR 2
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 2
13494: PUSH
13495: LD_INT 30
13497: PUSH
13498: LD_INT 0
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 30
13507: PUSH
13508: LD_INT 1
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PPUSH
13524: CALL_OW 69
13528: ST_TO_ADDR
// if not depot then
13529: LD_VAR 0 1
13533: NOT
13534: IFFALSE 13538
// exit ;
13536: GO 13612
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13538: LD_ADDR_VAR 0 2
13542: PUSH
13543: LD_VAR 0 1
13547: PUSH
13548: LD_INT 1
13550: PPUSH
13551: LD_VAR 0 1
13555: PPUSH
13556: CALL_OW 12
13560: ARRAY
13561: PPUSH
13562: CALL_OW 274
13566: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13567: LD_VAR 0 2
13571: PPUSH
13572: LD_INT 1
13574: PPUSH
13575: LD_INT 0
13577: PPUSH
13578: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13582: LD_VAR 0 2
13586: PPUSH
13587: LD_INT 2
13589: PPUSH
13590: LD_INT 0
13592: PPUSH
13593: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13597: LD_VAR 0 2
13601: PPUSH
13602: LD_INT 3
13604: PPUSH
13605: LD_INT 0
13607: PPUSH
13608: CALL_OW 277
// end ;
13612: PPOPN 2
13614: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13615: LD_EXP 24
13619: PUSH
13620: LD_EXP 52
13624: AND
13625: IFFALSE 13722
13627: GO 13629
13629: DISABLE
13630: LD_INT 0
13632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13633: LD_ADDR_VAR 0 1
13637: PUSH
13638: LD_INT 22
13640: PUSH
13641: LD_OWVAR 2
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: LD_INT 21
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 3
13662: PUSH
13663: LD_INT 23
13665: PUSH
13666: LD_INT 0
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: LIST
13681: PPUSH
13682: CALL_OW 69
13686: ST_TO_ADDR
// if not tmp then
13687: LD_VAR 0 1
13691: NOT
13692: IFFALSE 13696
// exit ;
13694: GO 13722
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13696: LD_VAR 0 1
13700: PUSH
13701: LD_INT 1
13703: PPUSH
13704: LD_VAR 0 1
13708: PPUSH
13709: CALL_OW 12
13713: ARRAY
13714: PPUSH
13715: LD_INT 200
13717: PPUSH
13718: CALL_OW 234
// end ;
13722: PPOPN 1
13724: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13725: LD_EXP 24
13729: PUSH
13730: LD_EXP 53
13734: AND
13735: IFFALSE 13814
13737: GO 13739
13739: DISABLE
13740: LD_INT 0
13742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13743: LD_ADDR_VAR 0 1
13747: PUSH
13748: LD_INT 22
13750: PUSH
13751: LD_OWVAR 2
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 21
13762: PUSH
13763: LD_INT 2
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PPUSH
13774: CALL_OW 69
13778: ST_TO_ADDR
// if not tmp then
13779: LD_VAR 0 1
13783: NOT
13784: IFFALSE 13788
// exit ;
13786: GO 13814
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13788: LD_VAR 0 1
13792: PUSH
13793: LD_INT 1
13795: PPUSH
13796: LD_VAR 0 1
13800: PPUSH
13801: CALL_OW 12
13805: ARRAY
13806: PPUSH
13807: LD_INT 60
13809: PPUSH
13810: CALL_OW 234
// end ;
13814: PPOPN 1
13816: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13817: LD_EXP 24
13821: PUSH
13822: LD_EXP 54
13826: AND
13827: IFFALSE 13926
13829: GO 13831
13831: DISABLE
13832: LD_INT 0
13834: PPUSH
13835: PPUSH
// begin enable ;
13836: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13837: LD_ADDR_VAR 0 1
13841: PUSH
13842: LD_INT 22
13844: PUSH
13845: LD_OWVAR 2
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 61
13856: PUSH
13857: EMPTY
13858: LIST
13859: PUSH
13860: LD_INT 33
13862: PUSH
13863: LD_INT 2
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: LIST
13874: PPUSH
13875: CALL_OW 69
13879: ST_TO_ADDR
// if not tmp then
13880: LD_VAR 0 1
13884: NOT
13885: IFFALSE 13889
// exit ;
13887: GO 13926
// for i in tmp do
13889: LD_ADDR_VAR 0 2
13893: PUSH
13894: LD_VAR 0 1
13898: PUSH
13899: FOR_IN
13900: IFFALSE 13924
// if IsControledBy ( i ) then
13902: LD_VAR 0 2
13906: PPUSH
13907: CALL_OW 312
13911: IFFALSE 13922
// ComUnlink ( i ) ;
13913: LD_VAR 0 2
13917: PPUSH
13918: CALL_OW 136
13922: GO 13899
13924: POP
13925: POP
// end ;
13926: PPOPN 2
13928: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13929: LD_EXP 24
13933: PUSH
13934: LD_EXP 55
13938: AND
13939: IFFALSE 14079
13941: GO 13943
13943: DISABLE
13944: LD_INT 0
13946: PPUSH
13947: PPUSH
// begin ToLua ( displayPowell(); ) ;
13948: LD_STRING displayPowell();
13950: PPUSH
13951: CALL_OW 559
// uc_side := 0 ;
13955: LD_ADDR_OWVAR 20
13959: PUSH
13960: LD_INT 0
13962: ST_TO_ADDR
// uc_nation := 2 ;
13963: LD_ADDR_OWVAR 21
13967: PUSH
13968: LD_INT 2
13970: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13971: LD_ADDR_OWVAR 37
13975: PUSH
13976: LD_INT 14
13978: ST_TO_ADDR
// vc_engine := engine_siberite ;
13979: LD_ADDR_OWVAR 39
13983: PUSH
13984: LD_INT 3
13986: ST_TO_ADDR
// vc_control := control_apeman ;
13987: LD_ADDR_OWVAR 38
13991: PUSH
13992: LD_INT 5
13994: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13995: LD_ADDR_OWVAR 40
13999: PUSH
14000: LD_INT 29
14002: ST_TO_ADDR
// un := CreateVehicle ;
14003: LD_ADDR_VAR 0 2
14007: PUSH
14008: CALL_OW 45
14012: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14013: LD_VAR 0 2
14017: PPUSH
14018: LD_INT 1
14020: PPUSH
14021: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14025: LD_INT 35
14027: PPUSH
14028: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14032: LD_VAR 0 2
14036: PPUSH
14037: LD_INT 22
14039: PUSH
14040: LD_OWVAR 2
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 69
14053: PPUSH
14054: LD_VAR 0 2
14058: PPUSH
14059: CALL_OW 74
14063: PPUSH
14064: CALL_OW 115
// until IsDead ( un ) ;
14068: LD_VAR 0 2
14072: PPUSH
14073: CALL_OW 301
14077: IFFALSE 14025
// end ;
14079: PPOPN 2
14081: END
// every 0 0$1 trigger StreamModeActive and sStu do
14082: LD_EXP 24
14086: PUSH
14087: LD_EXP 63
14091: AND
14092: IFFALSE 14108
14094: GO 14096
14096: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14097: LD_STRING displayStucuk();
14099: PPUSH
14100: CALL_OW 559
// ResetFog ;
14104: CALL_OW 335
// end ;
14108: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14109: LD_EXP 24
14113: PUSH
14114: LD_EXP 56
14118: AND
14119: IFFALSE 14260
14121: GO 14123
14123: DISABLE
14124: LD_INT 0
14126: PPUSH
14127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14128: LD_ADDR_VAR 0 2
14132: PUSH
14133: LD_INT 22
14135: PUSH
14136: LD_OWVAR 2
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PUSH
14145: LD_INT 21
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PPUSH
14159: CALL_OW 69
14163: ST_TO_ADDR
// if not tmp then
14164: LD_VAR 0 2
14168: NOT
14169: IFFALSE 14173
// exit ;
14171: GO 14260
// un := tmp [ rand ( 1 , tmp ) ] ;
14173: LD_ADDR_VAR 0 1
14177: PUSH
14178: LD_VAR 0 2
14182: PUSH
14183: LD_INT 1
14185: PPUSH
14186: LD_VAR 0 2
14190: PPUSH
14191: CALL_OW 12
14195: ARRAY
14196: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14197: LD_VAR 0 1
14201: PPUSH
14202: LD_INT 0
14204: PPUSH
14205: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14209: LD_VAR 0 1
14213: PPUSH
14214: LD_OWVAR 3
14218: PUSH
14219: LD_VAR 0 1
14223: DIFF
14224: PPUSH
14225: LD_VAR 0 1
14229: PPUSH
14230: CALL_OW 74
14234: PPUSH
14235: CALL_OW 115
// wait ( 0 0$20 ) ;
14239: LD_INT 700
14241: PPUSH
14242: CALL_OW 67
// SetSide ( un , your_side ) ;
14246: LD_VAR 0 1
14250: PPUSH
14251: LD_OWVAR 2
14255: PPUSH
14256: CALL_OW 235
// end ;
14260: PPOPN 2
14262: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14263: LD_EXP 24
14267: PUSH
14268: LD_EXP 57
14272: AND
14273: IFFALSE 14379
14275: GO 14277
14277: DISABLE
14278: LD_INT 0
14280: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14281: LD_ADDR_VAR 0 1
14285: PUSH
14286: LD_INT 22
14288: PUSH
14289: LD_OWVAR 2
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 2
14300: PUSH
14301: LD_INT 30
14303: PUSH
14304: LD_INT 0
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 30
14313: PUSH
14314: LD_INT 1
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PPUSH
14330: CALL_OW 69
14334: ST_TO_ADDR
// if not depot then
14335: LD_VAR 0 1
14339: NOT
14340: IFFALSE 14344
// exit ;
14342: GO 14379
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14344: LD_VAR 0 1
14348: PUSH
14349: LD_INT 1
14351: ARRAY
14352: PPUSH
14353: CALL_OW 250
14357: PPUSH
14358: LD_VAR 0 1
14362: PUSH
14363: LD_INT 1
14365: ARRAY
14366: PPUSH
14367: CALL_OW 251
14371: PPUSH
14372: LD_INT 70
14374: PPUSH
14375: CALL_OW 495
// end ;
14379: PPOPN 1
14381: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14382: LD_EXP 24
14386: PUSH
14387: LD_EXP 58
14391: AND
14392: IFFALSE 14603
14394: GO 14396
14396: DISABLE
14397: LD_INT 0
14399: PPUSH
14400: PPUSH
14401: PPUSH
14402: PPUSH
14403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14404: LD_ADDR_VAR 0 5
14408: PUSH
14409: LD_INT 22
14411: PUSH
14412: LD_OWVAR 2
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 21
14423: PUSH
14424: LD_INT 1
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PPUSH
14435: CALL_OW 69
14439: ST_TO_ADDR
// if not tmp then
14440: LD_VAR 0 5
14444: NOT
14445: IFFALSE 14449
// exit ;
14447: GO 14603
// for i in tmp do
14449: LD_ADDR_VAR 0 1
14453: PUSH
14454: LD_VAR 0 5
14458: PUSH
14459: FOR_IN
14460: IFFALSE 14601
// begin d := rand ( 0 , 5 ) ;
14462: LD_ADDR_VAR 0 4
14466: PUSH
14467: LD_INT 0
14469: PPUSH
14470: LD_INT 5
14472: PPUSH
14473: CALL_OW 12
14477: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14478: LD_ADDR_VAR 0 2
14482: PUSH
14483: LD_VAR 0 1
14487: PPUSH
14488: CALL_OW 250
14492: PPUSH
14493: LD_VAR 0 4
14497: PPUSH
14498: LD_INT 3
14500: PPUSH
14501: LD_INT 12
14503: PPUSH
14504: CALL_OW 12
14508: PPUSH
14509: CALL_OW 272
14513: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14514: LD_ADDR_VAR 0 3
14518: PUSH
14519: LD_VAR 0 1
14523: PPUSH
14524: CALL_OW 251
14528: PPUSH
14529: LD_VAR 0 4
14533: PPUSH
14534: LD_INT 3
14536: PPUSH
14537: LD_INT 12
14539: PPUSH
14540: CALL_OW 12
14544: PPUSH
14545: CALL_OW 273
14549: ST_TO_ADDR
// if ValidHex ( x , y ) then
14550: LD_VAR 0 2
14554: PPUSH
14555: LD_VAR 0 3
14559: PPUSH
14560: CALL_OW 488
14564: IFFALSE 14599
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14566: LD_VAR 0 1
14570: PPUSH
14571: LD_VAR 0 2
14575: PPUSH
14576: LD_VAR 0 3
14580: PPUSH
14581: LD_INT 3
14583: PPUSH
14584: LD_INT 6
14586: PPUSH
14587: CALL_OW 12
14591: PPUSH
14592: LD_INT 1
14594: PPUSH
14595: CALL_OW 483
// end ;
14599: GO 14459
14601: POP
14602: POP
// end ;
14603: PPOPN 5
14605: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14606: LD_EXP 24
14610: PUSH
14611: LD_EXP 59
14615: AND
14616: IFFALSE 14710
14618: GO 14620
14620: DISABLE
14621: LD_INT 0
14623: PPUSH
14624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14625: LD_ADDR_VAR 0 2
14629: PUSH
14630: LD_INT 22
14632: PUSH
14633: LD_OWVAR 2
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 32
14644: PUSH
14645: LD_INT 1
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: LD_INT 21
14654: PUSH
14655: LD_INT 2
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: LIST
14666: PPUSH
14667: CALL_OW 69
14671: ST_TO_ADDR
// if not tmp then
14672: LD_VAR 0 2
14676: NOT
14677: IFFALSE 14681
// exit ;
14679: GO 14710
// for i in tmp do
14681: LD_ADDR_VAR 0 1
14685: PUSH
14686: LD_VAR 0 2
14690: PUSH
14691: FOR_IN
14692: IFFALSE 14708
// SetFuel ( i , 0 ) ;
14694: LD_VAR 0 1
14698: PPUSH
14699: LD_INT 0
14701: PPUSH
14702: CALL_OW 240
14706: GO 14691
14708: POP
14709: POP
// end ;
14710: PPOPN 2
14712: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14713: LD_EXP 24
14717: PUSH
14718: LD_EXP 60
14722: AND
14723: IFFALSE 14789
14725: GO 14727
14727: DISABLE
14728: LD_INT 0
14730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14731: LD_ADDR_VAR 0 1
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_OWVAR 2
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 30
14750: PUSH
14751: LD_INT 29
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: ST_TO_ADDR
// if not tmp then
14767: LD_VAR 0 1
14771: NOT
14772: IFFALSE 14776
// exit ;
14774: GO 14789
// DestroyUnit ( tmp [ 1 ] ) ;
14776: LD_VAR 0 1
14780: PUSH
14781: LD_INT 1
14783: ARRAY
14784: PPUSH
14785: CALL_OW 65
// end ;
14789: PPOPN 1
14791: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14792: LD_EXP 24
14796: PUSH
14797: LD_EXP 62
14801: AND
14802: IFFALSE 14931
14804: GO 14806
14806: DISABLE
14807: LD_INT 0
14809: PPUSH
// begin uc_side := 0 ;
14810: LD_ADDR_OWVAR 20
14814: PUSH
14815: LD_INT 0
14817: ST_TO_ADDR
// uc_nation := nation_arabian ;
14818: LD_ADDR_OWVAR 21
14822: PUSH
14823: LD_INT 2
14825: ST_TO_ADDR
// hc_gallery :=  ;
14826: LD_ADDR_OWVAR 33
14830: PUSH
14831: LD_STRING 
14833: ST_TO_ADDR
// hc_name :=  ;
14834: LD_ADDR_OWVAR 26
14838: PUSH
14839: LD_STRING 
14841: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14842: LD_INT 1
14844: PPUSH
14845: LD_INT 11
14847: PPUSH
14848: LD_INT 10
14850: PPUSH
14851: CALL_OW 380
// un := CreateHuman ;
14855: LD_ADDR_VAR 0 1
14859: PUSH
14860: CALL_OW 44
14864: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14865: LD_VAR 0 1
14869: PPUSH
14870: LD_INT 1
14872: PPUSH
14873: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14877: LD_INT 35
14879: PPUSH
14880: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14884: LD_VAR 0 1
14888: PPUSH
14889: LD_INT 22
14891: PUSH
14892: LD_OWVAR 2
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PPUSH
14901: CALL_OW 69
14905: PPUSH
14906: LD_VAR 0 1
14910: PPUSH
14911: CALL_OW 74
14915: PPUSH
14916: CALL_OW 115
// until IsDead ( un ) ;
14920: LD_VAR 0 1
14924: PPUSH
14925: CALL_OW 301
14929: IFFALSE 14877
// end ;
14931: PPOPN 1
14933: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14934: LD_EXP 24
14938: PUSH
14939: LD_EXP 64
14943: AND
14944: IFFALSE 14956
14946: GO 14948
14948: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14949: LD_STRING earthquake(getX(game), 0, 32)
14951: PPUSH
14952: CALL_OW 559
14956: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14957: LD_EXP 24
14961: PUSH
14962: LD_EXP 65
14966: AND
14967: IFFALSE 15058
14969: GO 14971
14971: DISABLE
14972: LD_INT 0
14974: PPUSH
// begin enable ;
14975: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14976: LD_ADDR_VAR 0 1
14980: PUSH
14981: LD_INT 22
14983: PUSH
14984: LD_OWVAR 2
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 21
14995: PUSH
14996: LD_INT 2
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 33
15005: PUSH
15006: LD_INT 3
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: LIST
15017: PPUSH
15018: CALL_OW 69
15022: ST_TO_ADDR
// if not tmp then
15023: LD_VAR 0 1
15027: NOT
15028: IFFALSE 15032
// exit ;
15030: GO 15058
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15032: LD_VAR 0 1
15036: PUSH
15037: LD_INT 1
15039: PPUSH
15040: LD_VAR 0 1
15044: PPUSH
15045: CALL_OW 12
15049: ARRAY
15050: PPUSH
15051: LD_INT 1
15053: PPUSH
15054: CALL_OW 234
// end ;
15058: PPOPN 1
15060: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15061: LD_EXP 24
15065: PUSH
15066: LD_EXP 66
15070: AND
15071: IFFALSE 15212
15073: GO 15075
15075: DISABLE
15076: LD_INT 0
15078: PPUSH
15079: PPUSH
15080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15081: LD_ADDR_VAR 0 3
15085: PUSH
15086: LD_INT 22
15088: PUSH
15089: LD_OWVAR 2
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 25
15100: PUSH
15101: LD_INT 1
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PPUSH
15112: CALL_OW 69
15116: ST_TO_ADDR
// if not tmp then
15117: LD_VAR 0 3
15121: NOT
15122: IFFALSE 15126
// exit ;
15124: GO 15212
// un := tmp [ rand ( 1 , tmp ) ] ;
15126: LD_ADDR_VAR 0 2
15130: PUSH
15131: LD_VAR 0 3
15135: PUSH
15136: LD_INT 1
15138: PPUSH
15139: LD_VAR 0 3
15143: PPUSH
15144: CALL_OW 12
15148: ARRAY
15149: ST_TO_ADDR
// if Crawls ( un ) then
15150: LD_VAR 0 2
15154: PPUSH
15155: CALL_OW 318
15159: IFFALSE 15170
// ComWalk ( un ) ;
15161: LD_VAR 0 2
15165: PPUSH
15166: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15170: LD_VAR 0 2
15174: PPUSH
15175: LD_INT 9
15177: PPUSH
15178: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15182: LD_INT 28
15184: PPUSH
15185: LD_OWVAR 2
15189: PPUSH
15190: LD_INT 2
15192: PPUSH
15193: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15197: LD_INT 29
15199: PPUSH
15200: LD_OWVAR 2
15204: PPUSH
15205: LD_INT 2
15207: PPUSH
15208: CALL_OW 322
// end ;
15212: PPOPN 3
15214: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15215: LD_EXP 24
15219: PUSH
15220: LD_EXP 67
15224: AND
15225: IFFALSE 15336
15227: GO 15229
15229: DISABLE
15230: LD_INT 0
15232: PPUSH
15233: PPUSH
15234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15235: LD_ADDR_VAR 0 3
15239: PUSH
15240: LD_INT 22
15242: PUSH
15243: LD_OWVAR 2
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: LD_INT 25
15254: PUSH
15255: LD_INT 1
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PPUSH
15266: CALL_OW 69
15270: ST_TO_ADDR
// if not tmp then
15271: LD_VAR 0 3
15275: NOT
15276: IFFALSE 15280
// exit ;
15278: GO 15336
// un := tmp [ rand ( 1 , tmp ) ] ;
15280: LD_ADDR_VAR 0 2
15284: PUSH
15285: LD_VAR 0 3
15289: PUSH
15290: LD_INT 1
15292: PPUSH
15293: LD_VAR 0 3
15297: PPUSH
15298: CALL_OW 12
15302: ARRAY
15303: ST_TO_ADDR
// if Crawls ( un ) then
15304: LD_VAR 0 2
15308: PPUSH
15309: CALL_OW 318
15313: IFFALSE 15324
// ComWalk ( un ) ;
15315: LD_VAR 0 2
15319: PPUSH
15320: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15324: LD_VAR 0 2
15328: PPUSH
15329: LD_INT 8
15331: PPUSH
15332: CALL_OW 336
// end ;
15336: PPOPN 3
15338: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15339: LD_EXP 24
15343: PUSH
15344: LD_EXP 68
15348: AND
15349: IFFALSE 15493
15351: GO 15353
15353: DISABLE
15354: LD_INT 0
15356: PPUSH
15357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15358: LD_ADDR_VAR 0 2
15362: PUSH
15363: LD_INT 22
15365: PUSH
15366: LD_OWVAR 2
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 21
15377: PUSH
15378: LD_INT 2
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 2
15387: PUSH
15388: LD_INT 34
15390: PUSH
15391: LD_INT 12
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 34
15400: PUSH
15401: LD_INT 51
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 34
15410: PUSH
15411: LD_INT 32
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: LIST
15428: PPUSH
15429: CALL_OW 69
15433: ST_TO_ADDR
// if not tmp then
15434: LD_VAR 0 2
15438: NOT
15439: IFFALSE 15443
// exit ;
15441: GO 15493
// for i in tmp do
15443: LD_ADDR_VAR 0 1
15447: PUSH
15448: LD_VAR 0 2
15452: PUSH
15453: FOR_IN
15454: IFFALSE 15491
// if GetCargo ( i , mat_artifact ) = 0 then
15456: LD_VAR 0 1
15460: PPUSH
15461: LD_INT 4
15463: PPUSH
15464: CALL_OW 289
15468: PUSH
15469: LD_INT 0
15471: EQUAL
15472: IFFALSE 15489
// SetCargo ( i , mat_siberit , 100 ) ;
15474: LD_VAR 0 1
15478: PPUSH
15479: LD_INT 3
15481: PPUSH
15482: LD_INT 100
15484: PPUSH
15485: CALL_OW 290
15489: GO 15453
15491: POP
15492: POP
// end ;
15493: PPOPN 2
15495: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15496: LD_EXP 24
15500: PUSH
15501: LD_EXP 69
15505: AND
15506: IFFALSE 15689
15508: GO 15510
15510: DISABLE
15511: LD_INT 0
15513: PPUSH
15514: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15515: LD_ADDR_VAR 0 2
15519: PUSH
15520: LD_INT 22
15522: PUSH
15523: LD_OWVAR 2
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: ST_TO_ADDR
// if not tmp then
15537: LD_VAR 0 2
15541: NOT
15542: IFFALSE 15546
// exit ;
15544: GO 15689
// for i := 1 to 2 do
15546: LD_ADDR_VAR 0 1
15550: PUSH
15551: DOUBLE
15552: LD_INT 1
15554: DEC
15555: ST_TO_ADDR
15556: LD_INT 2
15558: PUSH
15559: FOR_TO
15560: IFFALSE 15687
// begin uc_side := your_side ;
15562: LD_ADDR_OWVAR 20
15566: PUSH
15567: LD_OWVAR 2
15571: ST_TO_ADDR
// uc_nation := nation_american ;
15572: LD_ADDR_OWVAR 21
15576: PUSH
15577: LD_INT 1
15579: ST_TO_ADDR
// vc_chassis := us_morphling ;
15580: LD_ADDR_OWVAR 37
15584: PUSH
15585: LD_INT 5
15587: ST_TO_ADDR
// vc_engine := engine_siberite ;
15588: LD_ADDR_OWVAR 39
15592: PUSH
15593: LD_INT 3
15595: ST_TO_ADDR
// vc_control := control_computer ;
15596: LD_ADDR_OWVAR 38
15600: PUSH
15601: LD_INT 3
15603: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15604: LD_ADDR_OWVAR 40
15608: PUSH
15609: LD_INT 10
15611: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15612: LD_VAR 0 2
15616: PUSH
15617: LD_INT 1
15619: ARRAY
15620: PPUSH
15621: CALL_OW 310
15625: NOT
15626: IFFALSE 15673
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15628: CALL_OW 45
15632: PPUSH
15633: LD_VAR 0 2
15637: PUSH
15638: LD_INT 1
15640: ARRAY
15641: PPUSH
15642: CALL_OW 250
15646: PPUSH
15647: LD_VAR 0 2
15651: PUSH
15652: LD_INT 1
15654: ARRAY
15655: PPUSH
15656: CALL_OW 251
15660: PPUSH
15661: LD_INT 12
15663: PPUSH
15664: LD_INT 1
15666: PPUSH
15667: CALL_OW 50
15671: GO 15685
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15673: CALL_OW 45
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: CALL_OW 51
// end ;
15685: GO 15559
15687: POP
15688: POP
// end ;
15689: PPOPN 2
15691: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15692: LD_EXP 24
15696: PUSH
15697: LD_EXP 70
15701: AND
15702: IFFALSE 15924
15704: GO 15706
15706: DISABLE
15707: LD_INT 0
15709: PPUSH
15710: PPUSH
15711: PPUSH
15712: PPUSH
15713: PPUSH
15714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15715: LD_ADDR_VAR 0 6
15719: PUSH
15720: LD_INT 22
15722: PUSH
15723: LD_OWVAR 2
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 21
15734: PUSH
15735: LD_INT 1
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 3
15744: PUSH
15745: LD_INT 23
15747: PUSH
15748: LD_INT 0
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: LIST
15763: PPUSH
15764: CALL_OW 69
15768: ST_TO_ADDR
// if not tmp then
15769: LD_VAR 0 6
15773: NOT
15774: IFFALSE 15778
// exit ;
15776: GO 15924
// s1 := rand ( 1 , 4 ) ;
15778: LD_ADDR_VAR 0 2
15782: PUSH
15783: LD_INT 1
15785: PPUSH
15786: LD_INT 4
15788: PPUSH
15789: CALL_OW 12
15793: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15794: LD_ADDR_VAR 0 4
15798: PUSH
15799: LD_VAR 0 6
15803: PUSH
15804: LD_INT 1
15806: ARRAY
15807: PPUSH
15808: LD_VAR 0 2
15812: PPUSH
15813: CALL_OW 259
15817: ST_TO_ADDR
// if s1 = 1 then
15818: LD_VAR 0 2
15822: PUSH
15823: LD_INT 1
15825: EQUAL
15826: IFFALSE 15846
// s2 := rand ( 2 , 4 ) else
15828: LD_ADDR_VAR 0 3
15832: PUSH
15833: LD_INT 2
15835: PPUSH
15836: LD_INT 4
15838: PPUSH
15839: CALL_OW 12
15843: ST_TO_ADDR
15844: GO 15854
// s2 := 1 ;
15846: LD_ADDR_VAR 0 3
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15854: LD_ADDR_VAR 0 5
15858: PUSH
15859: LD_VAR 0 6
15863: PUSH
15864: LD_INT 1
15866: ARRAY
15867: PPUSH
15868: LD_VAR 0 3
15872: PPUSH
15873: CALL_OW 259
15877: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15878: LD_VAR 0 6
15882: PUSH
15883: LD_INT 1
15885: ARRAY
15886: PPUSH
15887: LD_VAR 0 2
15891: PPUSH
15892: LD_VAR 0 5
15896: PPUSH
15897: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15901: LD_VAR 0 6
15905: PUSH
15906: LD_INT 1
15908: ARRAY
15909: PPUSH
15910: LD_VAR 0 3
15914: PPUSH
15915: LD_VAR 0 4
15919: PPUSH
15920: CALL_OW 237
// end ;
15924: PPOPN 6
15926: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15927: LD_EXP 24
15931: PUSH
15932: LD_EXP 71
15936: AND
15937: IFFALSE 16016
15939: GO 15941
15941: DISABLE
15942: LD_INT 0
15944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15945: LD_ADDR_VAR 0 1
15949: PUSH
15950: LD_INT 22
15952: PUSH
15953: LD_OWVAR 2
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 30
15964: PUSH
15965: LD_INT 3
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PPUSH
15976: CALL_OW 69
15980: ST_TO_ADDR
// if not tmp then
15981: LD_VAR 0 1
15985: NOT
15986: IFFALSE 15990
// exit ;
15988: GO 16016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15990: LD_VAR 0 1
15994: PUSH
15995: LD_INT 1
15997: PPUSH
15998: LD_VAR 0 1
16002: PPUSH
16003: CALL_OW 12
16007: ARRAY
16008: PPUSH
16009: LD_INT 1
16011: PPUSH
16012: CALL_OW 234
// end ;
16016: PPOPN 1
16018: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16019: LD_EXP 24
16023: PUSH
16024: LD_EXP 72
16028: AND
16029: IFFALSE 16141
16031: GO 16033
16033: DISABLE
16034: LD_INT 0
16036: PPUSH
16037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16038: LD_ADDR_VAR 0 2
16042: PUSH
16043: LD_INT 22
16045: PUSH
16046: LD_OWVAR 2
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 2
16057: PUSH
16058: LD_INT 30
16060: PUSH
16061: LD_INT 27
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 30
16070: PUSH
16071: LD_INT 26
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 30
16080: PUSH
16081: LD_INT 28
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PPUSH
16098: CALL_OW 69
16102: ST_TO_ADDR
// if not tmp then
16103: LD_VAR 0 2
16107: NOT
16108: IFFALSE 16112
// exit ;
16110: GO 16141
// for i in tmp do
16112: LD_ADDR_VAR 0 1
16116: PUSH
16117: LD_VAR 0 2
16121: PUSH
16122: FOR_IN
16123: IFFALSE 16139
// SetLives ( i , 1 ) ;
16125: LD_VAR 0 1
16129: PPUSH
16130: LD_INT 1
16132: PPUSH
16133: CALL_OW 234
16137: GO 16122
16139: POP
16140: POP
// end ;
16141: PPOPN 2
16143: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16144: LD_EXP 24
16148: PUSH
16149: LD_EXP 73
16153: AND
16154: IFFALSE 16428
16156: GO 16158
16158: DISABLE
16159: LD_INT 0
16161: PPUSH
16162: PPUSH
16163: PPUSH
// begin i := rand ( 1 , 7 ) ;
16164: LD_ADDR_VAR 0 1
16168: PUSH
16169: LD_INT 1
16171: PPUSH
16172: LD_INT 7
16174: PPUSH
16175: CALL_OW 12
16179: ST_TO_ADDR
// case i of 1 :
16180: LD_VAR 0 1
16184: PUSH
16185: LD_INT 1
16187: DOUBLE
16188: EQUAL
16189: IFTRUE 16193
16191: GO 16203
16193: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16194: LD_STRING earthquake(getX(game), 0, 32)
16196: PPUSH
16197: CALL_OW 559
16201: GO 16428
16203: LD_INT 2
16205: DOUBLE
16206: EQUAL
16207: IFTRUE 16211
16209: GO 16225
16211: POP
// begin ToLua ( displayStucuk(); ) ;
16212: LD_STRING displayStucuk();
16214: PPUSH
16215: CALL_OW 559
// ResetFog ;
16219: CALL_OW 335
// end ; 3 :
16223: GO 16428
16225: LD_INT 3
16227: DOUBLE
16228: EQUAL
16229: IFTRUE 16233
16231: GO 16337
16233: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16234: LD_ADDR_VAR 0 2
16238: PUSH
16239: LD_INT 22
16241: PUSH
16242: LD_OWVAR 2
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 25
16253: PUSH
16254: LD_INT 1
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PPUSH
16265: CALL_OW 69
16269: ST_TO_ADDR
// if not tmp then
16270: LD_VAR 0 2
16274: NOT
16275: IFFALSE 16279
// exit ;
16277: GO 16428
// un := tmp [ rand ( 1 , tmp ) ] ;
16279: LD_ADDR_VAR 0 3
16283: PUSH
16284: LD_VAR 0 2
16288: PUSH
16289: LD_INT 1
16291: PPUSH
16292: LD_VAR 0 2
16296: PPUSH
16297: CALL_OW 12
16301: ARRAY
16302: ST_TO_ADDR
// if Crawls ( un ) then
16303: LD_VAR 0 3
16307: PPUSH
16308: CALL_OW 318
16312: IFFALSE 16323
// ComWalk ( un ) ;
16314: LD_VAR 0 3
16318: PPUSH
16319: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16323: LD_VAR 0 3
16327: PPUSH
16328: LD_INT 8
16330: PPUSH
16331: CALL_OW 336
// end ; 4 :
16335: GO 16428
16337: LD_INT 4
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16406
16345: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16346: LD_ADDR_VAR 0 2
16350: PUSH
16351: LD_INT 22
16353: PUSH
16354: LD_OWVAR 2
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 30
16365: PUSH
16366: LD_INT 29
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PPUSH
16377: CALL_OW 69
16381: ST_TO_ADDR
// if not tmp then
16382: LD_VAR 0 2
16386: NOT
16387: IFFALSE 16391
// exit ;
16389: GO 16428
// DestroyUnit ( tmp [ 1 ] ) ;
16391: LD_VAR 0 2
16395: PUSH
16396: LD_INT 1
16398: ARRAY
16399: PPUSH
16400: CALL_OW 65
// end ; 5 .. 7 :
16404: GO 16428
16406: LD_INT 5
16408: DOUBLE
16409: GREATEREQUAL
16410: IFFALSE 16418
16412: LD_INT 7
16414: DOUBLE
16415: LESSEQUAL
16416: IFTRUE 16420
16418: GO 16427
16420: POP
// StreamSibBomb ; end ;
16421: CALL 12678 0 0
16425: GO 16428
16427: POP
// end ;
16428: PPOPN 3
16430: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16431: LD_EXP 24
16435: PUSH
16436: LD_EXP 74
16440: AND
16441: IFFALSE 16597
16443: GO 16445
16445: DISABLE
16446: LD_INT 0
16448: PPUSH
16449: PPUSH
16450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16451: LD_ADDR_VAR 0 2
16455: PUSH
16456: LD_INT 81
16458: PUSH
16459: LD_OWVAR 2
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 2
16470: PUSH
16471: LD_INT 21
16473: PUSH
16474: LD_INT 1
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 21
16483: PUSH
16484: LD_INT 2
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: ST_TO_ADDR
// if not tmp then
16505: LD_VAR 0 2
16509: NOT
16510: IFFALSE 16514
// exit ;
16512: GO 16597
// p := 0 ;
16514: LD_ADDR_VAR 0 3
16518: PUSH
16519: LD_INT 0
16521: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16522: LD_INT 35
16524: PPUSH
16525: CALL_OW 67
// p := p + 1 ;
16529: LD_ADDR_VAR 0 3
16533: PUSH
16534: LD_VAR 0 3
16538: PUSH
16539: LD_INT 1
16541: PLUS
16542: ST_TO_ADDR
// for i in tmp do
16543: LD_ADDR_VAR 0 1
16547: PUSH
16548: LD_VAR 0 2
16552: PUSH
16553: FOR_IN
16554: IFFALSE 16585
// if GetLives ( i ) < 1000 then
16556: LD_VAR 0 1
16560: PPUSH
16561: CALL_OW 256
16565: PUSH
16566: LD_INT 1000
16568: LESS
16569: IFFALSE 16583
// SetLives ( i , 1000 ) ;
16571: LD_VAR 0 1
16575: PPUSH
16576: LD_INT 1000
16578: PPUSH
16579: CALL_OW 234
16583: GO 16553
16585: POP
16586: POP
// until p > 20 ;
16587: LD_VAR 0 3
16591: PUSH
16592: LD_INT 20
16594: GREATER
16595: IFFALSE 16522
// end ;
16597: PPOPN 3
16599: END
// every 0 0$1 trigger StreamModeActive and sTime do
16600: LD_EXP 24
16604: PUSH
16605: LD_EXP 75
16609: AND
16610: IFFALSE 16645
16612: GO 16614
16614: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16615: LD_INT 28
16617: PPUSH
16618: LD_OWVAR 2
16622: PPUSH
16623: LD_INT 2
16625: PPUSH
16626: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16630: LD_INT 30
16632: PPUSH
16633: LD_OWVAR 2
16637: PPUSH
16638: LD_INT 2
16640: PPUSH
16641: CALL_OW 322
// end ;
16645: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16646: LD_EXP 24
16650: PUSH
16651: LD_EXP 76
16655: AND
16656: IFFALSE 16777
16658: GO 16660
16660: DISABLE
16661: LD_INT 0
16663: PPUSH
16664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16665: LD_ADDR_VAR 0 2
16669: PUSH
16670: LD_INT 22
16672: PUSH
16673: LD_OWVAR 2
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 21
16684: PUSH
16685: LD_INT 1
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 3
16694: PUSH
16695: LD_INT 23
16697: PUSH
16698: LD_INT 0
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: LIST
16713: PPUSH
16714: CALL_OW 69
16718: ST_TO_ADDR
// if not tmp then
16719: LD_VAR 0 2
16723: NOT
16724: IFFALSE 16728
// exit ;
16726: GO 16777
// for i in tmp do
16728: LD_ADDR_VAR 0 1
16732: PUSH
16733: LD_VAR 0 2
16737: PUSH
16738: FOR_IN
16739: IFFALSE 16775
// begin if Crawls ( i ) then
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 318
16750: IFFALSE 16761
// ComWalk ( i ) ;
16752: LD_VAR 0 1
16756: PPUSH
16757: CALL_OW 138
// SetClass ( i , 2 ) ;
16761: LD_VAR 0 1
16765: PPUSH
16766: LD_INT 2
16768: PPUSH
16769: CALL_OW 336
// end ;
16773: GO 16738
16775: POP
16776: POP
// end ;
16777: PPOPN 2
16779: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16780: LD_EXP 24
16784: PUSH
16785: LD_EXP 77
16789: AND
16790: IFFALSE 17071
16792: GO 16794
16794: DISABLE
16795: LD_INT 0
16797: PPUSH
16798: PPUSH
16799: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16800: LD_OWVAR 2
16804: PPUSH
16805: LD_INT 9
16807: PPUSH
16808: LD_INT 1
16810: PPUSH
16811: LD_INT 1
16813: PPUSH
16814: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16818: LD_INT 9
16820: PPUSH
16821: LD_OWVAR 2
16825: PPUSH
16826: CALL_OW 343
// uc_side := 9 ;
16830: LD_ADDR_OWVAR 20
16834: PUSH
16835: LD_INT 9
16837: ST_TO_ADDR
// uc_nation := 2 ;
16838: LD_ADDR_OWVAR 21
16842: PUSH
16843: LD_INT 2
16845: ST_TO_ADDR
// hc_name := Dark Warrior ;
16846: LD_ADDR_OWVAR 26
16850: PUSH
16851: LD_STRING Dark Warrior
16853: ST_TO_ADDR
// hc_gallery :=  ;
16854: LD_ADDR_OWVAR 33
16858: PUSH
16859: LD_STRING 
16861: ST_TO_ADDR
// hc_noskilllimit := true ;
16862: LD_ADDR_OWVAR 76
16866: PUSH
16867: LD_INT 1
16869: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16870: LD_ADDR_OWVAR 31
16874: PUSH
16875: LD_INT 30
16877: PUSH
16878: LD_INT 30
16880: PUSH
16881: LD_INT 30
16883: PUSH
16884: LD_INT 30
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: ST_TO_ADDR
// un := CreateHuman ;
16893: LD_ADDR_VAR 0 3
16897: PUSH
16898: CALL_OW 44
16902: ST_TO_ADDR
// hc_noskilllimit := false ;
16903: LD_ADDR_OWVAR 76
16907: PUSH
16908: LD_INT 0
16910: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16911: LD_VAR 0 3
16915: PPUSH
16916: LD_INT 1
16918: PPUSH
16919: CALL_OW 51
// p := 0 ;
16923: LD_ADDR_VAR 0 2
16927: PUSH
16928: LD_INT 0
16930: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16931: LD_INT 35
16933: PPUSH
16934: CALL_OW 67
// p := p + 1 ;
16938: LD_ADDR_VAR 0 2
16942: PUSH
16943: LD_VAR 0 2
16947: PUSH
16948: LD_INT 1
16950: PLUS
16951: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16952: LD_VAR 0 3
16956: PPUSH
16957: CALL_OW 256
16961: PUSH
16962: LD_INT 1000
16964: LESS
16965: IFFALSE 16979
// SetLives ( un , 1000 ) ;
16967: LD_VAR 0 3
16971: PPUSH
16972: LD_INT 1000
16974: PPUSH
16975: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16979: LD_VAR 0 3
16983: PPUSH
16984: LD_INT 81
16986: PUSH
16987: LD_OWVAR 2
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 91
16998: PUSH
16999: LD_VAR 0 3
17003: PUSH
17004: LD_INT 30
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: LIST
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PPUSH
17016: CALL_OW 69
17020: PPUSH
17021: LD_VAR 0 3
17025: PPUSH
17026: CALL_OW 74
17030: PPUSH
17031: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17035: LD_VAR 0 2
17039: PUSH
17040: LD_INT 60
17042: GREATER
17043: PUSH
17044: LD_VAR 0 3
17048: PPUSH
17049: CALL_OW 301
17053: OR
17054: IFFALSE 16931
// if un then
17056: LD_VAR 0 3
17060: IFFALSE 17071
// RemoveUnit ( un ) ;
17062: LD_VAR 0 3
17066: PPUSH
17067: CALL_OW 64
// end ;
17071: PPOPN 3
17073: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17074: LD_INT 0
17076: PPUSH
17077: PPUSH
17078: PPUSH
17079: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17080: LD_ADDR_VAR 0 4
17084: PUSH
17085: LD_INT 22
17087: PUSH
17088: LD_OWVAR 2
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: LD_INT 30
17102: PUSH
17103: LD_INT 0
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 30
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PPUSH
17129: CALL_OW 69
17133: ST_TO_ADDR
// if not tmp then
17134: LD_VAR 0 4
17138: NOT
17139: IFFALSE 17143
// exit ;
17141: GO 17202
// for i in tmp do
17143: LD_ADDR_VAR 0 2
17147: PUSH
17148: LD_VAR 0 4
17152: PUSH
17153: FOR_IN
17154: IFFALSE 17200
// for j = 1 to 3 do
17156: LD_ADDR_VAR 0 3
17160: PUSH
17161: DOUBLE
17162: LD_INT 1
17164: DEC
17165: ST_TO_ADDR
17166: LD_INT 3
17168: PUSH
17169: FOR_TO
17170: IFFALSE 17196
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17172: LD_VAR 0 2
17176: PPUSH
17177: CALL_OW 274
17181: PPUSH
17182: LD_VAR 0 3
17186: PPUSH
17187: LD_INT 99999
17189: PPUSH
17190: CALL_OW 277
17194: GO 17169
17196: POP
17197: POP
17198: GO 17153
17200: POP
17201: POP
// end ;
17202: LD_VAR 0 1
17206: RET
// export function hHackSetLevel10 ; var i , j ; begin
17207: LD_INT 0
17209: PPUSH
17210: PPUSH
17211: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17212: LD_ADDR_VAR 0 2
17216: PUSH
17217: LD_INT 21
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PPUSH
17227: CALL_OW 69
17231: PUSH
17232: FOR_IN
17233: IFFALSE 17285
// if IsSelected ( i ) then
17235: LD_VAR 0 2
17239: PPUSH
17240: CALL_OW 306
17244: IFFALSE 17283
// begin for j := 1 to 4 do
17246: LD_ADDR_VAR 0 3
17250: PUSH
17251: DOUBLE
17252: LD_INT 1
17254: DEC
17255: ST_TO_ADDR
17256: LD_INT 4
17258: PUSH
17259: FOR_TO
17260: IFFALSE 17281
// SetSkill ( i , j , 10 ) ;
17262: LD_VAR 0 2
17266: PPUSH
17267: LD_VAR 0 3
17271: PPUSH
17272: LD_INT 10
17274: PPUSH
17275: CALL_OW 237
17279: GO 17259
17281: POP
17282: POP
// end ;
17283: GO 17232
17285: POP
17286: POP
// end ;
17287: LD_VAR 0 1
17291: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17292: LD_INT 0
17294: PPUSH
17295: PPUSH
17296: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17297: LD_ADDR_VAR 0 2
17301: PUSH
17302: LD_INT 22
17304: PUSH
17305: LD_OWVAR 2
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 21
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PPUSH
17328: CALL_OW 69
17332: PUSH
17333: FOR_IN
17334: IFFALSE 17375
// begin for j := 1 to 4 do
17336: LD_ADDR_VAR 0 3
17340: PUSH
17341: DOUBLE
17342: LD_INT 1
17344: DEC
17345: ST_TO_ADDR
17346: LD_INT 4
17348: PUSH
17349: FOR_TO
17350: IFFALSE 17371
// SetSkill ( i , j , 10 ) ;
17352: LD_VAR 0 2
17356: PPUSH
17357: LD_VAR 0 3
17361: PPUSH
17362: LD_INT 10
17364: PPUSH
17365: CALL_OW 237
17369: GO 17349
17371: POP
17372: POP
// end ;
17373: GO 17333
17375: POP
17376: POP
// end ;
17377: LD_VAR 0 1
17381: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
17382: LD_INT 0
17384: PPUSH
// uc_side := your_side ;
17385: LD_ADDR_OWVAR 20
17389: PUSH
17390: LD_OWVAR 2
17394: ST_TO_ADDR
// uc_nation := nation ;
17395: LD_ADDR_OWVAR 21
17399: PUSH
17400: LD_VAR 0 1
17404: ST_TO_ADDR
// InitHc ;
17405: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17409: LD_INT 0
17411: PPUSH
17412: LD_VAR 0 2
17416: PPUSH
17417: LD_VAR 0 3
17421: PPUSH
17422: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
17426: CALL_OW 44
17430: PPUSH
17431: LD_INT 1
17433: PPUSH
17434: CALL_OW 51
// end ;
17438: LD_VAR 0 4
17442: RET
// export function hHackSpawnVehicle ; begin
17443: LD_INT 0
17445: PPUSH
// uc_side := your_side ;
17446: LD_ADDR_OWVAR 20
17450: PUSH
17451: LD_OWVAR 2
17455: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
17456: LD_ADDR_OWVAR 21
17460: PUSH
17461: LD_INT 1
17463: PPUSH
17464: LD_INT 3
17466: PPUSH
17467: CALL_OW 12
17471: ST_TO_ADDR
// InitVc ;
17472: CALL_OW 20
// case uc_nation of 1 :
17476: LD_OWVAR 21
17480: PUSH
17481: LD_INT 1
17483: DOUBLE
17484: EQUAL
17485: IFTRUE 17489
17487: GO 17633
17489: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
17490: LD_ADDR_OWVAR 37
17494: PUSH
17495: LD_INT 1
17497: PUSH
17498: LD_INT 2
17500: PUSH
17501: LD_INT 3
17503: PUSH
17504: LD_INT 4
17506: PUSH
17507: LD_INT 5
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 1
17519: PPUSH
17520: LD_INT 5
17522: PPUSH
17523: CALL_OW 12
17527: ARRAY
17528: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
17529: LD_ADDR_OWVAR 39
17533: PUSH
17534: LD_INT 1
17536: PPUSH
17537: LD_INT 3
17539: PPUSH
17540: CALL_OW 12
17544: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
17545: LD_ADDR_OWVAR 38
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: LD_INT 2
17555: PUSH
17556: LD_INT 3
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 1
17566: PPUSH
17567: LD_INT 3
17569: PPUSH
17570: CALL_OW 12
17574: ARRAY
17575: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
17576: LD_ADDR_OWVAR 40
17580: PUSH
17581: LD_INT 2
17583: PUSH
17584: LD_INT 4
17586: PUSH
17587: LD_INT 5
17589: PUSH
17590: LD_INT 3
17592: PUSH
17593: LD_INT 7
17595: PUSH
17596: LD_INT 8
17598: PUSH
17599: LD_INT 9
17601: PUSH
17602: LD_INT 10
17604: PUSH
17605: LD_INT 6
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 1
17621: PPUSH
17622: LD_INT 9
17624: PPUSH
17625: CALL_OW 12
17629: ARRAY
17630: ST_TO_ADDR
// end ; 2 :
17631: GO 17898
17633: LD_INT 2
17635: DOUBLE
17636: EQUAL
17637: IFTRUE 17641
17639: GO 17765
17641: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
17642: LD_ADDR_OWVAR 37
17646: PUSH
17647: LD_INT 11
17649: PUSH
17650: LD_INT 12
17652: PUSH
17653: LD_INT 13
17655: PUSH
17656: LD_INT 14
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: PPUSH
17668: LD_INT 4
17670: PPUSH
17671: CALL_OW 12
17675: ARRAY
17676: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
17677: LD_ADDR_OWVAR 39
17681: PUSH
17682: LD_INT 1
17684: PPUSH
17685: LD_INT 3
17687: PPUSH
17688: CALL_OW 12
17692: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
17693: LD_ADDR_OWVAR 38
17697: PUSH
17698: LD_INT 1
17700: PUSH
17701: LD_INT 2
17703: PUSH
17704: LD_INT 5
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 1
17714: PPUSH
17715: LD_INT 3
17717: PPUSH
17718: CALL_OW 12
17722: ARRAY
17723: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
17724: LD_ADDR_OWVAR 40
17728: PUSH
17729: LD_INT 24
17731: PUSH
17732: LD_INT 26
17734: PUSH
17735: LD_INT 27
17737: PUSH
17738: LD_INT 28
17740: PUSH
17741: LD_INT 29
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 1
17753: PPUSH
17754: LD_INT 5
17756: PPUSH
17757: CALL_OW 12
17761: ARRAY
17762: ST_TO_ADDR
// end ; 3 :
17763: GO 17898
17765: LD_INT 3
17767: DOUBLE
17768: EQUAL
17769: IFTRUE 17773
17771: GO 17897
17773: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
17774: LD_ADDR_OWVAR 37
17778: PUSH
17779: LD_INT 21
17781: PUSH
17782: LD_INT 23
17784: PUSH
17785: LD_INT 22
17787: PUSH
17788: LD_INT 24
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 1
17799: PPUSH
17800: LD_INT 4
17802: PPUSH
17803: CALL_OW 12
17807: ARRAY
17808: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
17809: LD_ADDR_OWVAR 39
17813: PUSH
17814: LD_INT 1
17816: PPUSH
17817: LD_INT 3
17819: PPUSH
17820: CALL_OW 12
17824: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
17825: LD_ADDR_OWVAR 38
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: LD_INT 3
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 1
17842: PPUSH
17843: LD_INT 2
17845: PPUSH
17846: CALL_OW 12
17850: ARRAY
17851: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
17852: LD_ADDR_OWVAR 40
17856: PUSH
17857: LD_INT 42
17859: PUSH
17860: LD_INT 43
17862: PUSH
17863: LD_INT 44
17865: PUSH
17866: LD_INT 46
17868: PUSH
17869: LD_INT 48
17871: PUSH
17872: LD_INT 47
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 1
17885: PPUSH
17886: LD_INT 6
17888: PPUSH
17889: CALL_OW 12
17893: ARRAY
17894: ST_TO_ADDR
// end ; end ;
17895: GO 17898
17897: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17898: CALL_OW 45
17902: PPUSH
17903: LD_INT 1
17905: PPUSH
17906: CALL_OW 51
// end ;
17910: LD_VAR 0 1
17914: RET
// export hInvincible ; every 1 do
17915: GO 17917
17917: DISABLE
// hInvincible := [ ] ;
17918: LD_ADDR_EXP 78
17922: PUSH
17923: EMPTY
17924: ST_TO_ADDR
17925: END
// every 10 do var i ;
17926: GO 17928
17928: DISABLE
17929: LD_INT 0
17931: PPUSH
// begin enable ;
17932: ENABLE
// if not hInvincible then
17933: LD_EXP 78
17937: NOT
17938: IFFALSE 17942
// exit ;
17940: GO 17986
// for i in hInvincible do
17942: LD_ADDR_VAR 0 1
17946: PUSH
17947: LD_EXP 78
17951: PUSH
17952: FOR_IN
17953: IFFALSE 17984
// if GetLives ( i ) < 1000 then
17955: LD_VAR 0 1
17959: PPUSH
17960: CALL_OW 256
17964: PUSH
17965: LD_INT 1000
17967: LESS
17968: IFFALSE 17982
// SetLives ( i , 1000 ) ;
17970: LD_VAR 0 1
17974: PPUSH
17975: LD_INT 1000
17977: PPUSH
17978: CALL_OW 234
17982: GO 17952
17984: POP
17985: POP
// end ;
17986: PPOPN 1
17988: END
// export function hHackInvincible ; var i ; begin
17989: LD_INT 0
17991: PPUSH
17992: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17993: LD_ADDR_VAR 0 2
17997: PUSH
17998: LD_INT 2
18000: PUSH
18001: LD_INT 21
18003: PUSH
18004: LD_INT 1
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 21
18013: PUSH
18014: LD_INT 2
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: LIST
18025: PPUSH
18026: CALL_OW 69
18030: PUSH
18031: FOR_IN
18032: IFFALSE 18093
// if IsSelected ( i ) then
18034: LD_VAR 0 2
18038: PPUSH
18039: CALL_OW 306
18043: IFFALSE 18091
// begin if i in hInvincible then
18045: LD_VAR 0 2
18049: PUSH
18050: LD_EXP 78
18054: IN
18055: IFFALSE 18075
// hInvincible := hInvincible diff i else
18057: LD_ADDR_EXP 78
18061: PUSH
18062: LD_EXP 78
18066: PUSH
18067: LD_VAR 0 2
18071: DIFF
18072: ST_TO_ADDR
18073: GO 18091
// hInvincible := hInvincible union i ;
18075: LD_ADDR_EXP 78
18079: PUSH
18080: LD_EXP 78
18084: PUSH
18085: LD_VAR 0 2
18089: UNION
18090: ST_TO_ADDR
// end ;
18091: GO 18031
18093: POP
18094: POP
// end ;
18095: LD_VAR 0 1
18099: RET
// export function hHackInvisible ; var i , j ; begin
18100: LD_INT 0
18102: PPUSH
18103: PPUSH
18104: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18105: LD_ADDR_VAR 0 2
18109: PUSH
18110: LD_INT 21
18112: PUSH
18113: LD_INT 1
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PPUSH
18120: CALL_OW 69
18124: PUSH
18125: FOR_IN
18126: IFFALSE 18150
// if IsSelected ( i ) then
18128: LD_VAR 0 2
18132: PPUSH
18133: CALL_OW 306
18137: IFFALSE 18148
// ComForceInvisible ( i ) ;
18139: LD_VAR 0 2
18143: PPUSH
18144: CALL_OW 496
18148: GO 18125
18150: POP
18151: POP
// end ;
18152: LD_VAR 0 1
18156: RET
// export function hHackChangeYourSide ; begin
18157: LD_INT 0
18159: PPUSH
// if your_side = 8 then
18160: LD_OWVAR 2
18164: PUSH
18165: LD_INT 8
18167: EQUAL
18168: IFFALSE 18180
// your_side := 0 else
18170: LD_ADDR_OWVAR 2
18174: PUSH
18175: LD_INT 0
18177: ST_TO_ADDR
18178: GO 18194
// your_side := your_side + 1 ;
18180: LD_ADDR_OWVAR 2
18184: PUSH
18185: LD_OWVAR 2
18189: PUSH
18190: LD_INT 1
18192: PLUS
18193: ST_TO_ADDR
// end ;
18194: LD_VAR 0 1
18198: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18199: LD_INT 0
18201: PPUSH
18202: PPUSH
18203: PPUSH
// for i in all_units do
18204: LD_ADDR_VAR 0 2
18208: PUSH
18209: LD_OWVAR 3
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18293
// if IsSelected ( i ) then
18217: LD_VAR 0 2
18221: PPUSH
18222: CALL_OW 306
18226: IFFALSE 18291
// begin j := GetSide ( i ) ;
18228: LD_ADDR_VAR 0 3
18232: PUSH
18233: LD_VAR 0 2
18237: PPUSH
18238: CALL_OW 255
18242: ST_TO_ADDR
// if j = 8 then
18243: LD_VAR 0 3
18247: PUSH
18248: LD_INT 8
18250: EQUAL
18251: IFFALSE 18263
// j := 0 else
18253: LD_ADDR_VAR 0 3
18257: PUSH
18258: LD_INT 0
18260: ST_TO_ADDR
18261: GO 18277
// j := j + 1 ;
18263: LD_ADDR_VAR 0 3
18267: PUSH
18268: LD_VAR 0 3
18272: PUSH
18273: LD_INT 1
18275: PLUS
18276: ST_TO_ADDR
// SetSide ( i , j ) ;
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_VAR 0 3
18286: PPUSH
18287: CALL_OW 235
// end ;
18291: GO 18214
18293: POP
18294: POP
// end ;
18295: LD_VAR 0 1
18299: RET
// export function hHackFog ; begin
18300: LD_INT 0
18302: PPUSH
// FogOff ( true ) ;
18303: LD_INT 1
18305: PPUSH
18306: CALL_OW 344
// end ;
18310: LD_VAR 0 1
18314: RET
// export function hHackApeman ; begin
18315: LD_INT 0
18317: PPUSH
// uc_side := your_side ;
18318: LD_ADDR_OWVAR 20
18322: PUSH
18323: LD_OWVAR 2
18327: ST_TO_ADDR
// uc_nation := 0 ;
18328: LD_ADDR_OWVAR 21
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// hc_name :=  ;
18336: LD_ADDR_OWVAR 26
18340: PUSH
18341: LD_STRING 
18343: ST_TO_ADDR
// hc_gallery :=  ;
18344: LD_ADDR_OWVAR 33
18348: PUSH
18349: LD_STRING 
18351: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
18352: LD_ADDR_OWVAR 31
18356: PUSH
18357: LD_INT 0
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: LD_INT 0
18365: PUSH
18366: LD_INT 0
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: ST_TO_ADDR
// hc_class := class_apeman ;
18375: LD_ADDR_OWVAR 28
18379: PUSH
18380: LD_INT 12
18382: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
18383: CALL_OW 44
18387: PPUSH
18388: LD_INT 1
18390: PPUSH
18391: CALL_OW 51
// end ;
18395: LD_VAR 0 1
18399: RET
// export function hHackBoom ; begin
18400: LD_INT 0
18402: PPUSH
// uc_side := your_side ;
18403: LD_ADDR_OWVAR 20
18407: PUSH
18408: LD_OWVAR 2
18412: ST_TO_ADDR
// uc_nation := 1 ;
18413: LD_ADDR_OWVAR 21
18417: PUSH
18418: LD_INT 1
18420: ST_TO_ADDR
// vc_chassis := us_morphling ;
18421: LD_ADDR_OWVAR 37
18425: PUSH
18426: LD_INT 5
18428: ST_TO_ADDR
// vc_engine := engine_siberite ;
18429: LD_ADDR_OWVAR 39
18433: PUSH
18434: LD_INT 3
18436: ST_TO_ADDR
// vc_control := control_computer ;
18437: LD_ADDR_OWVAR 38
18441: PUSH
18442: LD_INT 3
18444: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
18445: LD_ADDR_OWVAR 40
18449: PUSH
18450: LD_INT 8
18452: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18453: CALL_OW 45
18457: PPUSH
18458: LD_INT 1
18460: PPUSH
18461: CALL_OW 51
// end ; end_of_file
18465: LD_VAR 0 1
18469: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18470: LD_INT 0
18472: PPUSH
18473: PPUSH
18474: PPUSH
18475: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18476: LD_VAR 0 1
18480: PPUSH
18481: CALL_OW 264
18485: PUSH
18486: LD_EXP 89
18490: EQUAL
18491: IFFALSE 18563
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18493: LD_INT 68
18495: PPUSH
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 255
18505: PPUSH
18506: CALL_OW 321
18510: PUSH
18511: LD_INT 2
18513: EQUAL
18514: IFFALSE 18526
// eff := 70 else
18516: LD_ADDR_VAR 0 4
18520: PUSH
18521: LD_INT 70
18523: ST_TO_ADDR
18524: GO 18534
// eff := 30 ;
18526: LD_ADDR_VAR 0 4
18530: PUSH
18531: LD_INT 30
18533: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18534: LD_VAR 0 1
18538: PPUSH
18539: CALL_OW 250
18543: PPUSH
18544: LD_VAR 0 1
18548: PPUSH
18549: CALL_OW 251
18553: PPUSH
18554: LD_VAR 0 4
18558: PPUSH
18559: CALL_OW 495
// end ; end ;
18563: LD_VAR 0 2
18567: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18568: LD_INT 0
18570: PPUSH
// end ;
18571: LD_VAR 0 4
18575: RET
// export function SOS_Command ( cmd ) ; begin
18576: LD_INT 0
18578: PPUSH
// end ;
18579: LD_VAR 0 2
18583: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18584: LD_INT 0
18586: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18587: LD_VAR 0 1
18591: PUSH
18592: LD_INT 254
18594: EQUAL
18595: PUSH
18596: LD_VAR 0 2
18600: PPUSH
18601: CALL_OW 264
18605: PUSH
18606: LD_EXP 87
18610: EQUAL
18611: AND
18612: PUSH
18613: LD_VAR 0 3
18617: PPUSH
18618: CALL_OW 263
18622: PUSH
18623: LD_INT 3
18625: EQUAL
18626: AND
18627: IFFALSE 18643
// HackDestroyVehicle ( unit , selectedUnit ) ;
18629: LD_VAR 0 2
18633: PPUSH
18634: LD_VAR 0 3
18638: PPUSH
18639: CALL 20152 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18643: LD_VAR 0 1
18647: PUSH
18648: LD_INT 255
18650: EQUAL
18651: PUSH
18652: LD_VAR 0 2
18656: PPUSH
18657: CALL_OW 264
18661: PUSH
18662: LD_INT 14
18664: PUSH
18665: LD_INT 53
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: IN
18672: AND
18673: PUSH
18674: LD_VAR 0 4
18678: PPUSH
18679: LD_VAR 0 5
18683: PPUSH
18684: CALL_OW 488
18688: AND
18689: IFFALSE 18713
// CutTreeXYR ( unit , x , y , 12 ) ;
18691: LD_VAR 0 2
18695: PPUSH
18696: LD_VAR 0 4
18700: PPUSH
18701: LD_VAR 0 5
18705: PPUSH
18706: LD_INT 12
18708: PPUSH
18709: CALL 18718 0 4
// end ;
18713: LD_VAR 0 6
18717: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18718: LD_INT 0
18720: PPUSH
18721: PPUSH
18722: PPUSH
18723: PPUSH
18724: PPUSH
18725: PPUSH
18726: PPUSH
18727: PPUSH
18728: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18729: LD_VAR 0 1
18733: NOT
18734: PUSH
18735: LD_VAR 0 2
18739: PPUSH
18740: LD_VAR 0 3
18744: PPUSH
18745: CALL_OW 488
18749: NOT
18750: OR
18751: PUSH
18752: LD_VAR 0 4
18756: NOT
18757: OR
18758: IFFALSE 18762
// exit ;
18760: GO 19102
// list := [ ] ;
18762: LD_ADDR_VAR 0 13
18766: PUSH
18767: EMPTY
18768: ST_TO_ADDR
// if x - r < 0 then
18769: LD_VAR 0 2
18773: PUSH
18774: LD_VAR 0 4
18778: MINUS
18779: PUSH
18780: LD_INT 0
18782: LESS
18783: IFFALSE 18795
// min_x := 0 else
18785: LD_ADDR_VAR 0 7
18789: PUSH
18790: LD_INT 0
18792: ST_TO_ADDR
18793: GO 18811
// min_x := x - r ;
18795: LD_ADDR_VAR 0 7
18799: PUSH
18800: LD_VAR 0 2
18804: PUSH
18805: LD_VAR 0 4
18809: MINUS
18810: ST_TO_ADDR
// if y - r < 0 then
18811: LD_VAR 0 3
18815: PUSH
18816: LD_VAR 0 4
18820: MINUS
18821: PUSH
18822: LD_INT 0
18824: LESS
18825: IFFALSE 18837
// min_y := 0 else
18827: LD_ADDR_VAR 0 8
18831: PUSH
18832: LD_INT 0
18834: ST_TO_ADDR
18835: GO 18853
// min_y := y - r ;
18837: LD_ADDR_VAR 0 8
18841: PUSH
18842: LD_VAR 0 3
18846: PUSH
18847: LD_VAR 0 4
18851: MINUS
18852: ST_TO_ADDR
// max_x := x + r ;
18853: LD_ADDR_VAR 0 9
18857: PUSH
18858: LD_VAR 0 2
18862: PUSH
18863: LD_VAR 0 4
18867: PLUS
18868: ST_TO_ADDR
// max_y := y + r ;
18869: LD_ADDR_VAR 0 10
18873: PUSH
18874: LD_VAR 0 3
18878: PUSH
18879: LD_VAR 0 4
18883: PLUS
18884: ST_TO_ADDR
// for _x = min_x to max_x do
18885: LD_ADDR_VAR 0 11
18889: PUSH
18890: DOUBLE
18891: LD_VAR 0 7
18895: DEC
18896: ST_TO_ADDR
18897: LD_VAR 0 9
18901: PUSH
18902: FOR_TO
18903: IFFALSE 19020
// for _y = min_y to max_y do
18905: LD_ADDR_VAR 0 12
18909: PUSH
18910: DOUBLE
18911: LD_VAR 0 8
18915: DEC
18916: ST_TO_ADDR
18917: LD_VAR 0 10
18921: PUSH
18922: FOR_TO
18923: IFFALSE 19016
// begin if not ValidHex ( _x , _y ) then
18925: LD_VAR 0 11
18929: PPUSH
18930: LD_VAR 0 12
18934: PPUSH
18935: CALL_OW 488
18939: NOT
18940: IFFALSE 18944
// continue ;
18942: GO 18922
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18944: LD_VAR 0 11
18948: PPUSH
18949: LD_VAR 0 12
18953: PPUSH
18954: CALL_OW 351
18958: PUSH
18959: LD_VAR 0 11
18963: PPUSH
18964: LD_VAR 0 12
18968: PPUSH
18969: CALL_OW 554
18973: AND
18974: IFFALSE 19014
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18976: LD_ADDR_VAR 0 13
18980: PUSH
18981: LD_VAR 0 13
18985: PPUSH
18986: LD_VAR 0 13
18990: PUSH
18991: LD_INT 1
18993: PLUS
18994: PPUSH
18995: LD_VAR 0 11
18999: PUSH
19000: LD_VAR 0 12
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PPUSH
19009: CALL_OW 2
19013: ST_TO_ADDR
// end ;
19014: GO 18922
19016: POP
19017: POP
19018: GO 18902
19020: POP
19021: POP
// if not list then
19022: LD_VAR 0 13
19026: NOT
19027: IFFALSE 19031
// exit ;
19029: GO 19102
// for i in list do
19031: LD_ADDR_VAR 0 6
19035: PUSH
19036: LD_VAR 0 13
19040: PUSH
19041: FOR_IN
19042: IFFALSE 19100
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19044: LD_VAR 0 1
19048: PPUSH
19049: LD_STRING M
19051: PUSH
19052: LD_VAR 0 6
19056: PUSH
19057: LD_INT 1
19059: ARRAY
19060: PUSH
19061: LD_VAR 0 6
19065: PUSH
19066: LD_INT 2
19068: ARRAY
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: LD_INT 0
19075: PUSH
19076: LD_INT 0
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: PUSH
19091: EMPTY
19092: LIST
19093: PPUSH
19094: CALL_OW 447
19098: GO 19041
19100: POP
19101: POP
// end ;
19102: LD_VAR 0 5
19106: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19107: LD_EXP 79
19111: NOT
19112: IFFALSE 19162
19114: GO 19116
19116: DISABLE
// begin initHack := true ;
19117: LD_ADDR_EXP 79
19121: PUSH
19122: LD_INT 1
19124: ST_TO_ADDR
// hackTanks := [ ] ;
19125: LD_ADDR_EXP 80
19129: PUSH
19130: EMPTY
19131: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19132: LD_ADDR_EXP 81
19136: PUSH
19137: EMPTY
19138: ST_TO_ADDR
// hackLimit := 3 ;
19139: LD_ADDR_EXP 82
19143: PUSH
19144: LD_INT 3
19146: ST_TO_ADDR
// hackDist := 12 ;
19147: LD_ADDR_EXP 83
19151: PUSH
19152: LD_INT 12
19154: ST_TO_ADDR
// hackCounter := [ ] ;
19155: LD_ADDR_EXP 84
19159: PUSH
19160: EMPTY
19161: ST_TO_ADDR
// end ;
19162: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19163: LD_EXP 79
19167: PUSH
19168: LD_INT 34
19170: PUSH
19171: LD_EXP 87
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PPUSH
19180: CALL_OW 69
19184: AND
19185: IFFALSE 19440
19187: GO 19189
19189: DISABLE
19190: LD_INT 0
19192: PPUSH
19193: PPUSH
// begin enable ;
19194: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19195: LD_ADDR_VAR 0 1
19199: PUSH
19200: LD_INT 34
19202: PUSH
19203: LD_EXP 87
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PPUSH
19212: CALL_OW 69
19216: PUSH
19217: FOR_IN
19218: IFFALSE 19438
// begin if not i in hackTanks then
19220: LD_VAR 0 1
19224: PUSH
19225: LD_EXP 80
19229: IN
19230: NOT
19231: IFFALSE 19314
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19233: LD_ADDR_EXP 80
19237: PUSH
19238: LD_EXP 80
19242: PPUSH
19243: LD_EXP 80
19247: PUSH
19248: LD_INT 1
19250: PLUS
19251: PPUSH
19252: LD_VAR 0 1
19256: PPUSH
19257: CALL_OW 1
19261: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19262: LD_ADDR_EXP 81
19266: PUSH
19267: LD_EXP 81
19271: PPUSH
19272: LD_EXP 81
19276: PUSH
19277: LD_INT 1
19279: PLUS
19280: PPUSH
19281: EMPTY
19282: PPUSH
19283: CALL_OW 1
19287: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19288: LD_ADDR_EXP 84
19292: PUSH
19293: LD_EXP 84
19297: PPUSH
19298: LD_EXP 84
19302: PUSH
19303: LD_INT 1
19305: PLUS
19306: PPUSH
19307: EMPTY
19308: PPUSH
19309: CALL_OW 1
19313: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19314: LD_VAR 0 1
19318: PPUSH
19319: CALL_OW 302
19323: NOT
19324: IFFALSE 19337
// begin HackUnlinkAll ( i ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL 19443 0 1
// continue ;
19335: GO 19217
// end ; HackCheckCapturedStatus ( i ) ;
19337: LD_VAR 0 1
19341: PPUSH
19342: CALL 19886 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19346: LD_ADDR_VAR 0 2
19350: PUSH
19351: LD_INT 81
19353: PUSH
19354: LD_VAR 0 1
19358: PPUSH
19359: CALL_OW 255
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 33
19370: PUSH
19371: LD_INT 3
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 91
19380: PUSH
19381: LD_VAR 0 1
19385: PUSH
19386: LD_EXP 83
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 50
19398: PUSH
19399: EMPTY
19400: LIST
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: PPUSH
19408: CALL_OW 69
19412: ST_TO_ADDR
// if not tmp then
19413: LD_VAR 0 2
19417: NOT
19418: IFFALSE 19422
// continue ;
19420: GO 19217
// HackLink ( i , tmp ) ;
19422: LD_VAR 0 1
19426: PPUSH
19427: LD_VAR 0 2
19431: PPUSH
19432: CALL 19579 0 2
// end ;
19436: GO 19217
19438: POP
19439: POP
// end ;
19440: PPOPN 2
19442: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19443: LD_INT 0
19445: PPUSH
19446: PPUSH
19447: PPUSH
// if not hack in hackTanks then
19448: LD_VAR 0 1
19452: PUSH
19453: LD_EXP 80
19457: IN
19458: NOT
19459: IFFALSE 19463
// exit ;
19461: GO 19574
// index := GetElementIndex ( hackTanks , hack ) ;
19463: LD_ADDR_VAR 0 4
19467: PUSH
19468: LD_EXP 80
19472: PPUSH
19473: LD_VAR 0 1
19477: PPUSH
19478: CALL 25130 0 2
19482: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19483: LD_EXP 81
19487: PUSH
19488: LD_VAR 0 4
19492: ARRAY
19493: IFFALSE 19574
// begin for i in hackTanksCaptured [ index ] do
19495: LD_ADDR_VAR 0 3
19499: PUSH
19500: LD_EXP 81
19504: PUSH
19505: LD_VAR 0 4
19509: ARRAY
19510: PUSH
19511: FOR_IN
19512: IFFALSE 19538
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19514: LD_VAR 0 3
19518: PUSH
19519: LD_INT 1
19521: ARRAY
19522: PPUSH
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 2
19530: ARRAY
19531: PPUSH
19532: CALL_OW 235
19536: GO 19511
19538: POP
19539: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19540: LD_ADDR_EXP 81
19544: PUSH
19545: LD_EXP 81
19549: PPUSH
19550: LD_VAR 0 4
19554: PPUSH
19555: EMPTY
19556: PPUSH
19557: CALL_OW 1
19561: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19562: LD_VAR 0 1
19566: PPUSH
19567: LD_INT 0
19569: PPUSH
19570: CALL_OW 505
// end ; end ;
19574: LD_VAR 0 2
19578: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19579: LD_INT 0
19581: PPUSH
19582: PPUSH
19583: PPUSH
// if not hack in hackTanks or not vehicles then
19584: LD_VAR 0 1
19588: PUSH
19589: LD_EXP 80
19593: IN
19594: NOT
19595: PUSH
19596: LD_VAR 0 2
19600: NOT
19601: OR
19602: IFFALSE 19606
// exit ;
19604: GO 19881
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19606: LD_ADDR_VAR 0 2
19610: PUSH
19611: LD_VAR 0 1
19615: PPUSH
19616: LD_VAR 0 2
19620: PPUSH
19621: LD_INT 1
19623: PPUSH
19624: LD_INT 1
19626: PPUSH
19627: CALL 25780 0 4
19631: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19632: LD_ADDR_VAR 0 5
19636: PUSH
19637: LD_EXP 80
19641: PPUSH
19642: LD_VAR 0 1
19646: PPUSH
19647: CALL 25130 0 2
19651: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19652: LD_EXP 81
19656: PUSH
19657: LD_VAR 0 5
19661: ARRAY
19662: PUSH
19663: LD_EXP 82
19667: LESS
19668: IFFALSE 19857
// begin for i := 1 to vehicles do
19670: LD_ADDR_VAR 0 4
19674: PUSH
19675: DOUBLE
19676: LD_INT 1
19678: DEC
19679: ST_TO_ADDR
19680: LD_VAR 0 2
19684: PUSH
19685: FOR_TO
19686: IFFALSE 19855
// begin if hackTanksCaptured [ index ] = hackLimit then
19688: LD_EXP 81
19692: PUSH
19693: LD_VAR 0 5
19697: ARRAY
19698: PUSH
19699: LD_EXP 82
19703: EQUAL
19704: IFFALSE 19708
// break ;
19706: GO 19855
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19708: LD_ADDR_EXP 84
19712: PUSH
19713: LD_EXP 84
19717: PPUSH
19718: LD_VAR 0 5
19722: PPUSH
19723: LD_EXP 84
19727: PUSH
19728: LD_VAR 0 5
19732: ARRAY
19733: PUSH
19734: LD_INT 1
19736: PLUS
19737: PPUSH
19738: CALL_OW 1
19742: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19743: LD_ADDR_EXP 81
19747: PUSH
19748: LD_EXP 81
19752: PPUSH
19753: LD_VAR 0 5
19757: PUSH
19758: LD_EXP 81
19762: PUSH
19763: LD_VAR 0 5
19767: ARRAY
19768: PUSH
19769: LD_INT 1
19771: PLUS
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PPUSH
19777: LD_VAR 0 2
19781: PUSH
19782: LD_VAR 0 4
19786: ARRAY
19787: PUSH
19788: LD_VAR 0 2
19792: PUSH
19793: LD_VAR 0 4
19797: ARRAY
19798: PPUSH
19799: CALL_OW 255
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL 25345 0 3
19812: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19813: LD_VAR 0 2
19817: PUSH
19818: LD_VAR 0 4
19822: ARRAY
19823: PPUSH
19824: LD_VAR 0 1
19828: PPUSH
19829: CALL_OW 255
19833: PPUSH
19834: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19838: LD_VAR 0 2
19842: PUSH
19843: LD_VAR 0 4
19847: ARRAY
19848: PPUSH
19849: CALL_OW 141
// end ;
19853: GO 19685
19855: POP
19856: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19857: LD_VAR 0 1
19861: PPUSH
19862: LD_EXP 81
19866: PUSH
19867: LD_VAR 0 5
19871: ARRAY
19872: PUSH
19873: LD_INT 0
19875: PLUS
19876: PPUSH
19877: CALL_OW 505
// end ;
19881: LD_VAR 0 3
19885: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19886: LD_INT 0
19888: PPUSH
19889: PPUSH
19890: PPUSH
19891: PPUSH
// if not hack in hackTanks then
19892: LD_VAR 0 1
19896: PUSH
19897: LD_EXP 80
19901: IN
19902: NOT
19903: IFFALSE 19907
// exit ;
19905: GO 20147
// index := GetElementIndex ( hackTanks , hack ) ;
19907: LD_ADDR_VAR 0 4
19911: PUSH
19912: LD_EXP 80
19916: PPUSH
19917: LD_VAR 0 1
19921: PPUSH
19922: CALL 25130 0 2
19926: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19927: LD_ADDR_VAR 0 3
19931: PUSH
19932: DOUBLE
19933: LD_EXP 81
19937: PUSH
19938: LD_VAR 0 4
19942: ARRAY
19943: INC
19944: ST_TO_ADDR
19945: LD_INT 1
19947: PUSH
19948: FOR_DOWNTO
19949: IFFALSE 20121
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19951: LD_ADDR_VAR 0 5
19955: PUSH
19956: LD_EXP 81
19960: PUSH
19961: LD_VAR 0 4
19965: ARRAY
19966: PUSH
19967: LD_VAR 0 3
19971: ARRAY
19972: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19973: LD_VAR 0 5
19977: PUSH
19978: LD_INT 1
19980: ARRAY
19981: PPUSH
19982: CALL_OW 302
19986: NOT
19987: PUSH
19988: LD_VAR 0 5
19992: PUSH
19993: LD_INT 1
19995: ARRAY
19996: PPUSH
19997: CALL_OW 255
20001: PUSH
20002: LD_VAR 0 1
20006: PPUSH
20007: CALL_OW 255
20011: NONEQUAL
20012: OR
20013: IFFALSE 20119
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20015: LD_VAR 0 5
20019: PUSH
20020: LD_INT 1
20022: ARRAY
20023: PPUSH
20024: CALL_OW 305
20028: PUSH
20029: LD_VAR 0 5
20033: PUSH
20034: LD_INT 1
20036: ARRAY
20037: PPUSH
20038: CALL_OW 255
20042: PUSH
20043: LD_VAR 0 1
20047: PPUSH
20048: CALL_OW 255
20052: EQUAL
20053: AND
20054: IFFALSE 20078
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20056: LD_VAR 0 5
20060: PUSH
20061: LD_INT 1
20063: ARRAY
20064: PPUSH
20065: LD_VAR 0 5
20069: PUSH
20070: LD_INT 2
20072: ARRAY
20073: PPUSH
20074: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20078: LD_ADDR_EXP 81
20082: PUSH
20083: LD_EXP 81
20087: PPUSH
20088: LD_VAR 0 4
20092: PPUSH
20093: LD_EXP 81
20097: PUSH
20098: LD_VAR 0 4
20102: ARRAY
20103: PPUSH
20104: LD_VAR 0 3
20108: PPUSH
20109: CALL_OW 3
20113: PPUSH
20114: CALL_OW 1
20118: ST_TO_ADDR
// end ; end ;
20119: GO 19948
20121: POP
20122: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20123: LD_VAR 0 1
20127: PPUSH
20128: LD_EXP 81
20132: PUSH
20133: LD_VAR 0 4
20137: ARRAY
20138: PUSH
20139: LD_INT 0
20141: PLUS
20142: PPUSH
20143: CALL_OW 505
// end ;
20147: LD_VAR 0 2
20151: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20152: LD_INT 0
20154: PPUSH
20155: PPUSH
20156: PPUSH
20157: PPUSH
// if not hack in hackTanks then
20158: LD_VAR 0 1
20162: PUSH
20163: LD_EXP 80
20167: IN
20168: NOT
20169: IFFALSE 20173
// exit ;
20171: GO 20258
// index := GetElementIndex ( hackTanks , hack ) ;
20173: LD_ADDR_VAR 0 5
20177: PUSH
20178: LD_EXP 80
20182: PPUSH
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL 25130 0 2
20192: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20193: LD_ADDR_VAR 0 4
20197: PUSH
20198: DOUBLE
20199: LD_INT 1
20201: DEC
20202: ST_TO_ADDR
20203: LD_EXP 81
20207: PUSH
20208: LD_VAR 0 5
20212: ARRAY
20213: PUSH
20214: FOR_TO
20215: IFFALSE 20256
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20217: LD_EXP 81
20221: PUSH
20222: LD_VAR 0 5
20226: ARRAY
20227: PUSH
20228: LD_VAR 0 4
20232: ARRAY
20233: PUSH
20234: LD_INT 1
20236: ARRAY
20237: PUSH
20238: LD_VAR 0 2
20242: EQUAL
20243: IFFALSE 20254
// KillUnit ( vehicle ) ;
20245: LD_VAR 0 2
20249: PPUSH
20250: CALL_OW 66
20254: GO 20214
20256: POP
20257: POP
// end ; end_of_file
20258: LD_VAR 0 3
20262: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
20263: LD_INT 0
20265: PPUSH
// ar_crane := 88 ;
20266: LD_ADDR_EXP 91
20270: PUSH
20271: LD_INT 88
20273: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20274: LD_ADDR_EXP 86
20278: PUSH
20279: LD_INT 89
20281: ST_TO_ADDR
// us_hack := 99 ;
20282: LD_ADDR_EXP 87
20286: PUSH
20287: LD_INT 99
20289: ST_TO_ADDR
// us_artillery := 97 ;
20290: LD_ADDR_EXP 88
20294: PUSH
20295: LD_INT 97
20297: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20298: LD_ADDR_EXP 89
20302: PUSH
20303: LD_INT 91
20305: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
20306: LD_ADDR_EXP 90
20310: PUSH
20311: LD_INT 92
20313: ST_TO_ADDR
// ru_radar := 98 ;
20314: LD_ADDR_EXP 85
20318: PUSH
20319: LD_INT 98
20321: ST_TO_ADDR
// tech_Artillery := 80 ;
20322: LD_ADDR_EXP 92
20326: PUSH
20327: LD_INT 80
20329: ST_TO_ADDR
// tech_RadMat := 81 ;
20330: LD_ADDR_EXP 93
20334: PUSH
20335: LD_INT 81
20337: ST_TO_ADDR
// tech_BasicTools := 82 ;
20338: LD_ADDR_EXP 94
20342: PUSH
20343: LD_INT 82
20345: ST_TO_ADDR
// tech_Cargo := 83 ;
20346: LD_ADDR_EXP 95
20350: PUSH
20351: LD_INT 83
20353: ST_TO_ADDR
// tech_Track := 84 ;
20354: LD_ADDR_EXP 96
20358: PUSH
20359: LD_INT 84
20361: ST_TO_ADDR
// tech_Crane := 85 ;
20362: LD_ADDR_EXP 97
20366: PUSH
20367: LD_INT 85
20369: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20370: LD_ADDR_EXP 98
20374: PUSH
20375: LD_INT 86
20377: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20378: LD_ADDR_EXP 99
20382: PUSH
20383: LD_INT 87
20385: ST_TO_ADDR
// end ;
20386: LD_VAR 0 1
20390: RET
// every 1 do
20391: GO 20393
20393: DISABLE
// InitGlobalVariables ; end_of_file
20394: CALL 20263 0 0
20398: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20399: LD_INT 0
20401: PPUSH
20402: PPUSH
// if exist_mode then
20403: LD_VAR 0 2
20407: IFFALSE 20432
// unit := CreateCharacter ( prefix & ident ) else
20409: LD_ADDR_VAR 0 5
20413: PUSH
20414: LD_VAR 0 3
20418: PUSH
20419: LD_VAR 0 1
20423: STR
20424: PPUSH
20425: CALL_OW 34
20429: ST_TO_ADDR
20430: GO 20447
// unit := NewCharacter ( ident ) ;
20432: LD_ADDR_VAR 0 5
20436: PUSH
20437: LD_VAR 0 1
20441: PPUSH
20442: CALL_OW 25
20446: ST_TO_ADDR
// result := unit ;
20447: LD_ADDR_VAR 0 4
20451: PUSH
20452: LD_VAR 0 5
20456: ST_TO_ADDR
// end ;
20457: LD_VAR 0 4
20461: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20462: LD_INT 0
20464: PPUSH
20465: PPUSH
// if not side or not nation then
20466: LD_VAR 0 1
20470: NOT
20471: PUSH
20472: LD_VAR 0 2
20476: NOT
20477: OR
20478: IFFALSE 20482
// exit ;
20480: GO 21246
// case nation of nation_american :
20482: LD_VAR 0 2
20486: PUSH
20487: LD_INT 1
20489: DOUBLE
20490: EQUAL
20491: IFTRUE 20495
20493: GO 20709
20495: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20496: LD_ADDR_VAR 0 4
20500: PUSH
20501: LD_INT 35
20503: PUSH
20504: LD_INT 45
20506: PUSH
20507: LD_INT 46
20509: PUSH
20510: LD_INT 47
20512: PUSH
20513: LD_INT 82
20515: PUSH
20516: LD_INT 83
20518: PUSH
20519: LD_INT 84
20521: PUSH
20522: LD_INT 85
20524: PUSH
20525: LD_INT 86
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: LD_INT 2
20533: PUSH
20534: LD_INT 6
20536: PUSH
20537: LD_INT 15
20539: PUSH
20540: LD_INT 16
20542: PUSH
20543: LD_INT 7
20545: PUSH
20546: LD_INT 12
20548: PUSH
20549: LD_INT 13
20551: PUSH
20552: LD_INT 10
20554: PUSH
20555: LD_INT 14
20557: PUSH
20558: LD_INT 20
20560: PUSH
20561: LD_INT 21
20563: PUSH
20564: LD_INT 22
20566: PUSH
20567: LD_INT 25
20569: PUSH
20570: LD_INT 32
20572: PUSH
20573: LD_INT 27
20575: PUSH
20576: LD_INT 36
20578: PUSH
20579: LD_INT 69
20581: PUSH
20582: LD_INT 39
20584: PUSH
20585: LD_INT 34
20587: PUSH
20588: LD_INT 40
20590: PUSH
20591: LD_INT 48
20593: PUSH
20594: LD_INT 49
20596: PUSH
20597: LD_INT 50
20599: PUSH
20600: LD_INT 51
20602: PUSH
20603: LD_INT 52
20605: PUSH
20606: LD_INT 53
20608: PUSH
20609: LD_INT 54
20611: PUSH
20612: LD_INT 55
20614: PUSH
20615: LD_INT 56
20617: PUSH
20618: LD_INT 57
20620: PUSH
20621: LD_INT 58
20623: PUSH
20624: LD_INT 59
20626: PUSH
20627: LD_INT 60
20629: PUSH
20630: LD_INT 61
20632: PUSH
20633: LD_INT 62
20635: PUSH
20636: LD_INT 80
20638: PUSH
20639: LD_INT 82
20641: PUSH
20642: LD_INT 83
20644: PUSH
20645: LD_INT 84
20647: PUSH
20648: LD_INT 85
20650: PUSH
20651: LD_INT 86
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: ST_TO_ADDR
20707: GO 21170
20709: LD_INT 2
20711: DOUBLE
20712: EQUAL
20713: IFTRUE 20717
20715: GO 20939
20717: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
20718: LD_ADDR_VAR 0 4
20722: PUSH
20723: LD_INT 35
20725: PUSH
20726: LD_INT 45
20728: PUSH
20729: LD_INT 46
20731: PUSH
20732: LD_INT 47
20734: PUSH
20735: LD_INT 82
20737: PUSH
20738: LD_INT 83
20740: PUSH
20741: LD_INT 84
20743: PUSH
20744: LD_INT 85
20746: PUSH
20747: LD_INT 87
20749: PUSH
20750: LD_INT 70
20752: PUSH
20753: LD_INT 1
20755: PUSH
20756: LD_INT 11
20758: PUSH
20759: LD_INT 3
20761: PUSH
20762: LD_INT 4
20764: PUSH
20765: LD_INT 5
20767: PUSH
20768: LD_INT 6
20770: PUSH
20771: LD_INT 15
20773: PUSH
20774: LD_INT 18
20776: PUSH
20777: LD_INT 7
20779: PUSH
20780: LD_INT 17
20782: PUSH
20783: LD_INT 8
20785: PUSH
20786: LD_INT 20
20788: PUSH
20789: LD_INT 21
20791: PUSH
20792: LD_INT 22
20794: PUSH
20795: LD_INT 72
20797: PUSH
20798: LD_INT 26
20800: PUSH
20801: LD_INT 69
20803: PUSH
20804: LD_INT 39
20806: PUSH
20807: LD_INT 40
20809: PUSH
20810: LD_INT 41
20812: PUSH
20813: LD_INT 42
20815: PUSH
20816: LD_INT 43
20818: PUSH
20819: LD_INT 48
20821: PUSH
20822: LD_INT 49
20824: PUSH
20825: LD_INT 50
20827: PUSH
20828: LD_INT 51
20830: PUSH
20831: LD_INT 52
20833: PUSH
20834: LD_INT 53
20836: PUSH
20837: LD_INT 54
20839: PUSH
20840: LD_INT 55
20842: PUSH
20843: LD_INT 56
20845: PUSH
20846: LD_INT 60
20848: PUSH
20849: LD_INT 61
20851: PUSH
20852: LD_INT 62
20854: PUSH
20855: LD_INT 66
20857: PUSH
20858: LD_INT 67
20860: PUSH
20861: LD_INT 68
20863: PUSH
20864: LD_INT 81
20866: PUSH
20867: LD_INT 82
20869: PUSH
20870: LD_INT 83
20872: PUSH
20873: LD_INT 84
20875: PUSH
20876: LD_INT 85
20878: PUSH
20879: LD_INT 87
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: ST_TO_ADDR
20937: GO 21170
20939: LD_INT 3
20941: DOUBLE
20942: EQUAL
20943: IFTRUE 20947
20945: GO 21169
20947: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20948: LD_ADDR_VAR 0 4
20952: PUSH
20953: LD_INT 46
20955: PUSH
20956: LD_INT 47
20958: PUSH
20959: LD_INT 1
20961: PUSH
20962: LD_INT 2
20964: PUSH
20965: LD_INT 82
20967: PUSH
20968: LD_INT 83
20970: PUSH
20971: LD_INT 84
20973: PUSH
20974: LD_INT 85
20976: PUSH
20977: LD_INT 86
20979: PUSH
20980: LD_INT 11
20982: PUSH
20983: LD_INT 9
20985: PUSH
20986: LD_INT 20
20988: PUSH
20989: LD_INT 19
20991: PUSH
20992: LD_INT 21
20994: PUSH
20995: LD_INT 24
20997: PUSH
20998: LD_INT 22
21000: PUSH
21001: LD_INT 25
21003: PUSH
21004: LD_INT 28
21006: PUSH
21007: LD_INT 29
21009: PUSH
21010: LD_INT 30
21012: PUSH
21013: LD_INT 31
21015: PUSH
21016: LD_INT 37
21018: PUSH
21019: LD_INT 38
21021: PUSH
21022: LD_INT 32
21024: PUSH
21025: LD_INT 27
21027: PUSH
21028: LD_INT 33
21030: PUSH
21031: LD_INT 69
21033: PUSH
21034: LD_INT 39
21036: PUSH
21037: LD_INT 34
21039: PUSH
21040: LD_INT 40
21042: PUSH
21043: LD_INT 71
21045: PUSH
21046: LD_INT 23
21048: PUSH
21049: LD_INT 44
21051: PUSH
21052: LD_INT 48
21054: PUSH
21055: LD_INT 49
21057: PUSH
21058: LD_INT 50
21060: PUSH
21061: LD_INT 51
21063: PUSH
21064: LD_INT 52
21066: PUSH
21067: LD_INT 53
21069: PUSH
21070: LD_INT 54
21072: PUSH
21073: LD_INT 55
21075: PUSH
21076: LD_INT 56
21078: PUSH
21079: LD_INT 57
21081: PUSH
21082: LD_INT 58
21084: PUSH
21085: LD_INT 59
21087: PUSH
21088: LD_INT 63
21090: PUSH
21091: LD_INT 64
21093: PUSH
21094: LD_INT 65
21096: PUSH
21097: LD_INT 82
21099: PUSH
21100: LD_INT 83
21102: PUSH
21103: LD_INT 84
21105: PUSH
21106: LD_INT 85
21108: PUSH
21109: LD_INT 86
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: ST_TO_ADDR
21167: GO 21170
21169: POP
// if state > - 1 and state < 3 then
21170: LD_VAR 0 3
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: GREATER
21179: PUSH
21180: LD_VAR 0 3
21184: PUSH
21185: LD_INT 3
21187: LESS
21188: AND
21189: IFFALSE 21246
// for i in result do
21191: LD_ADDR_VAR 0 5
21195: PUSH
21196: LD_VAR 0 4
21200: PUSH
21201: FOR_IN
21202: IFFALSE 21244
// if GetTech ( i , side ) <> state then
21204: LD_VAR 0 5
21208: PPUSH
21209: LD_VAR 0 1
21213: PPUSH
21214: CALL_OW 321
21218: PUSH
21219: LD_VAR 0 3
21223: NONEQUAL
21224: IFFALSE 21242
// result := result diff i ;
21226: LD_ADDR_VAR 0 4
21230: PUSH
21231: LD_VAR 0 4
21235: PUSH
21236: LD_VAR 0 5
21240: DIFF
21241: ST_TO_ADDR
21242: GO 21201
21244: POP
21245: POP
// end ;
21246: LD_VAR 0 4
21250: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21251: LD_INT 0
21253: PPUSH
21254: PPUSH
21255: PPUSH
// result := true ;
21256: LD_ADDR_VAR 0 3
21260: PUSH
21261: LD_INT 1
21263: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21264: LD_ADDR_VAR 0 5
21268: PUSH
21269: LD_VAR 0 2
21273: PPUSH
21274: CALL_OW 480
21278: ST_TO_ADDR
// if not tmp then
21279: LD_VAR 0 5
21283: NOT
21284: IFFALSE 21288
// exit ;
21286: GO 21337
// for i in tmp do
21288: LD_ADDR_VAR 0 4
21292: PUSH
21293: LD_VAR 0 5
21297: PUSH
21298: FOR_IN
21299: IFFALSE 21335
// if GetTech ( i , side ) <> state_researched then
21301: LD_VAR 0 4
21305: PPUSH
21306: LD_VAR 0 1
21310: PPUSH
21311: CALL_OW 321
21315: PUSH
21316: LD_INT 2
21318: NONEQUAL
21319: IFFALSE 21333
// begin result := false ;
21321: LD_ADDR_VAR 0 3
21325: PUSH
21326: LD_INT 0
21328: ST_TO_ADDR
// exit ;
21329: POP
21330: POP
21331: GO 21337
// end ;
21333: GO 21298
21335: POP
21336: POP
// end ;
21337: LD_VAR 0 3
21341: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21342: LD_INT 0
21344: PPUSH
21345: PPUSH
21346: PPUSH
21347: PPUSH
21348: PPUSH
21349: PPUSH
21350: PPUSH
21351: PPUSH
21352: PPUSH
21353: PPUSH
21354: PPUSH
21355: PPUSH
21356: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21357: LD_VAR 0 1
21361: NOT
21362: PUSH
21363: LD_VAR 0 1
21367: PPUSH
21368: CALL_OW 257
21372: PUSH
21373: LD_INT 9
21375: NONEQUAL
21376: OR
21377: IFFALSE 21381
// exit ;
21379: GO 21954
// side := GetSide ( unit ) ;
21381: LD_ADDR_VAR 0 9
21385: PUSH
21386: LD_VAR 0 1
21390: PPUSH
21391: CALL_OW 255
21395: ST_TO_ADDR
// tech_space := tech_spacanom ;
21396: LD_ADDR_VAR 0 12
21400: PUSH
21401: LD_INT 29
21403: ST_TO_ADDR
// tech_time := tech_taurad ;
21404: LD_ADDR_VAR 0 13
21408: PUSH
21409: LD_INT 28
21411: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21412: LD_ADDR_VAR 0 11
21416: PUSH
21417: LD_VAR 0 1
21421: PPUSH
21422: CALL_OW 310
21426: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21427: LD_VAR 0 11
21431: PPUSH
21432: CALL_OW 247
21436: PUSH
21437: LD_INT 2
21439: EQUAL
21440: IFFALSE 21444
// exit ;
21442: GO 21954
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21444: LD_ADDR_VAR 0 8
21448: PUSH
21449: LD_INT 81
21451: PUSH
21452: LD_VAR 0 9
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 3
21463: PUSH
21464: LD_INT 21
21466: PUSH
21467: LD_INT 3
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PPUSH
21482: CALL_OW 69
21486: ST_TO_ADDR
// if not tmp then
21487: LD_VAR 0 8
21491: NOT
21492: IFFALSE 21496
// exit ;
21494: GO 21954
// if in_unit then
21496: LD_VAR 0 11
21500: IFFALSE 21524
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21502: LD_ADDR_VAR 0 10
21506: PUSH
21507: LD_VAR 0 8
21511: PPUSH
21512: LD_VAR 0 11
21516: PPUSH
21517: CALL_OW 74
21521: ST_TO_ADDR
21522: GO 21544
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21524: LD_ADDR_VAR 0 10
21528: PUSH
21529: LD_VAR 0 8
21533: PPUSH
21534: LD_VAR 0 1
21538: PPUSH
21539: CALL_OW 74
21543: ST_TO_ADDR
// if not enemy then
21544: LD_VAR 0 10
21548: NOT
21549: IFFALSE 21553
// exit ;
21551: GO 21954
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21553: LD_VAR 0 11
21557: PUSH
21558: LD_VAR 0 11
21562: PPUSH
21563: LD_VAR 0 10
21567: PPUSH
21568: CALL_OW 296
21572: PUSH
21573: LD_INT 13
21575: GREATER
21576: AND
21577: PUSH
21578: LD_VAR 0 1
21582: PPUSH
21583: LD_VAR 0 10
21587: PPUSH
21588: CALL_OW 296
21592: PUSH
21593: LD_INT 12
21595: GREATER
21596: OR
21597: IFFALSE 21601
// exit ;
21599: GO 21954
// missile := [ 1 ] ;
21601: LD_ADDR_VAR 0 14
21605: PUSH
21606: LD_INT 1
21608: PUSH
21609: EMPTY
21610: LIST
21611: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21612: LD_VAR 0 9
21616: PPUSH
21617: LD_VAR 0 12
21621: PPUSH
21622: CALL_OW 325
21626: IFFALSE 21655
// missile := Insert ( missile , missile + 1 , 2 ) ;
21628: LD_ADDR_VAR 0 14
21632: PUSH
21633: LD_VAR 0 14
21637: PPUSH
21638: LD_VAR 0 14
21642: PUSH
21643: LD_INT 1
21645: PLUS
21646: PPUSH
21647: LD_INT 2
21649: PPUSH
21650: CALL_OW 2
21654: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21655: LD_VAR 0 9
21659: PPUSH
21660: LD_VAR 0 13
21664: PPUSH
21665: CALL_OW 325
21669: PUSH
21670: LD_VAR 0 10
21674: PPUSH
21675: CALL_OW 255
21679: PPUSH
21680: LD_VAR 0 13
21684: PPUSH
21685: CALL_OW 325
21689: NOT
21690: AND
21691: IFFALSE 21720
// missile := Insert ( missile , missile + 1 , 3 ) ;
21693: LD_ADDR_VAR 0 14
21697: PUSH
21698: LD_VAR 0 14
21702: PPUSH
21703: LD_VAR 0 14
21707: PUSH
21708: LD_INT 1
21710: PLUS
21711: PPUSH
21712: LD_INT 3
21714: PPUSH
21715: CALL_OW 2
21719: ST_TO_ADDR
// if missile < 2 then
21720: LD_VAR 0 14
21724: PUSH
21725: LD_INT 2
21727: LESS
21728: IFFALSE 21732
// exit ;
21730: GO 21954
// x := GetX ( enemy ) ;
21732: LD_ADDR_VAR 0 4
21736: PUSH
21737: LD_VAR 0 10
21741: PPUSH
21742: CALL_OW 250
21746: ST_TO_ADDR
// y := GetY ( enemy ) ;
21747: LD_ADDR_VAR 0 5
21751: PUSH
21752: LD_VAR 0 10
21756: PPUSH
21757: CALL_OW 251
21761: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21762: LD_ADDR_VAR 0 6
21766: PUSH
21767: LD_VAR 0 4
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PPUSH
21776: LD_INT 1
21778: PPUSH
21779: CALL_OW 12
21783: PLUS
21784: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21785: LD_ADDR_VAR 0 7
21789: PUSH
21790: LD_VAR 0 5
21794: PUSH
21795: LD_INT 1
21797: NEG
21798: PPUSH
21799: LD_INT 1
21801: PPUSH
21802: CALL_OW 12
21806: PLUS
21807: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21808: LD_VAR 0 6
21812: PPUSH
21813: LD_VAR 0 7
21817: PPUSH
21818: CALL_OW 488
21822: NOT
21823: IFFALSE 21845
// begin _x := x ;
21825: LD_ADDR_VAR 0 6
21829: PUSH
21830: LD_VAR 0 4
21834: ST_TO_ADDR
// _y := y ;
21835: LD_ADDR_VAR 0 7
21839: PUSH
21840: LD_VAR 0 5
21844: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21845: LD_ADDR_VAR 0 3
21849: PUSH
21850: LD_INT 1
21852: PPUSH
21853: LD_VAR 0 14
21857: PPUSH
21858: CALL_OW 12
21862: ST_TO_ADDR
// case i of 1 :
21863: LD_VAR 0 3
21867: PUSH
21868: LD_INT 1
21870: DOUBLE
21871: EQUAL
21872: IFTRUE 21876
21874: GO 21893
21876: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21877: LD_VAR 0 1
21881: PPUSH
21882: LD_VAR 0 10
21886: PPUSH
21887: CALL_OW 115
21891: GO 21954
21893: LD_INT 2
21895: DOUBLE
21896: EQUAL
21897: IFTRUE 21901
21899: GO 21923
21901: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21902: LD_VAR 0 1
21906: PPUSH
21907: LD_VAR 0 6
21911: PPUSH
21912: LD_VAR 0 7
21916: PPUSH
21917: CALL_OW 153
21921: GO 21954
21923: LD_INT 3
21925: DOUBLE
21926: EQUAL
21927: IFTRUE 21931
21929: GO 21953
21931: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21932: LD_VAR 0 1
21936: PPUSH
21937: LD_VAR 0 6
21941: PPUSH
21942: LD_VAR 0 7
21946: PPUSH
21947: CALL_OW 154
21951: GO 21954
21953: POP
// end ;
21954: LD_VAR 0 2
21958: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21959: LD_INT 0
21961: PPUSH
21962: PPUSH
21963: PPUSH
21964: PPUSH
21965: PPUSH
21966: PPUSH
// if not unit or not building then
21967: LD_VAR 0 1
21971: NOT
21972: PUSH
21973: LD_VAR 0 2
21977: NOT
21978: OR
21979: IFFALSE 21983
// exit ;
21981: GO 22141
// x := GetX ( building ) ;
21983: LD_ADDR_VAR 0 5
21987: PUSH
21988: LD_VAR 0 2
21992: PPUSH
21993: CALL_OW 250
21997: ST_TO_ADDR
// y := GetY ( building ) ;
21998: LD_ADDR_VAR 0 6
22002: PUSH
22003: LD_VAR 0 2
22007: PPUSH
22008: CALL_OW 251
22012: ST_TO_ADDR
// for i = 0 to 5 do
22013: LD_ADDR_VAR 0 4
22017: PUSH
22018: DOUBLE
22019: LD_INT 0
22021: DEC
22022: ST_TO_ADDR
22023: LD_INT 5
22025: PUSH
22026: FOR_TO
22027: IFFALSE 22139
// begin _x := ShiftX ( x , i , 3 ) ;
22029: LD_ADDR_VAR 0 7
22033: PUSH
22034: LD_VAR 0 5
22038: PPUSH
22039: LD_VAR 0 4
22043: PPUSH
22044: LD_INT 3
22046: PPUSH
22047: CALL_OW 272
22051: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22052: LD_ADDR_VAR 0 8
22056: PUSH
22057: LD_VAR 0 6
22061: PPUSH
22062: LD_VAR 0 4
22066: PPUSH
22067: LD_INT 3
22069: PPUSH
22070: CALL_OW 273
22074: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22075: LD_VAR 0 7
22079: PPUSH
22080: LD_VAR 0 8
22084: PPUSH
22085: CALL_OW 488
22089: NOT
22090: IFFALSE 22094
// continue ;
22092: GO 22026
// if HexInfo ( _x , _y ) = 0 then
22094: LD_VAR 0 7
22098: PPUSH
22099: LD_VAR 0 8
22103: PPUSH
22104: CALL_OW 428
22108: PUSH
22109: LD_INT 0
22111: EQUAL
22112: IFFALSE 22137
// begin ComMoveXY ( unit , _x , _y ) ;
22114: LD_VAR 0 1
22118: PPUSH
22119: LD_VAR 0 7
22123: PPUSH
22124: LD_VAR 0 8
22128: PPUSH
22129: CALL_OW 111
// exit ;
22133: POP
22134: POP
22135: GO 22141
// end ; end ;
22137: GO 22026
22139: POP
22140: POP
// end ;
22141: LD_VAR 0 3
22145: RET
// export function ScanBase ( side , base_area ) ; begin
22146: LD_INT 0
22148: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22149: LD_ADDR_VAR 0 3
22153: PUSH
22154: LD_VAR 0 2
22158: PPUSH
22159: LD_INT 81
22161: PUSH
22162: LD_VAR 0 1
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PPUSH
22171: CALL_OW 70
22175: ST_TO_ADDR
// end ;
22176: LD_VAR 0 3
22180: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22181: LD_INT 0
22183: PPUSH
22184: PPUSH
22185: PPUSH
22186: PPUSH
// result := false ;
22187: LD_ADDR_VAR 0 2
22191: PUSH
22192: LD_INT 0
22194: ST_TO_ADDR
// side := GetSide ( unit ) ;
22195: LD_ADDR_VAR 0 3
22199: PUSH
22200: LD_VAR 0 1
22204: PPUSH
22205: CALL_OW 255
22209: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22210: LD_ADDR_VAR 0 4
22214: PUSH
22215: LD_VAR 0 1
22219: PPUSH
22220: CALL_OW 248
22224: ST_TO_ADDR
// case nat of 1 :
22225: LD_VAR 0 4
22229: PUSH
22230: LD_INT 1
22232: DOUBLE
22233: EQUAL
22234: IFTRUE 22238
22236: GO 22249
22238: POP
// tech := tech_lassight ; 2 :
22239: LD_ADDR_VAR 0 5
22243: PUSH
22244: LD_INT 12
22246: ST_TO_ADDR
22247: GO 22288
22249: LD_INT 2
22251: DOUBLE
22252: EQUAL
22253: IFTRUE 22257
22255: GO 22268
22257: POP
// tech := tech_mortar ; 3 :
22258: LD_ADDR_VAR 0 5
22262: PUSH
22263: LD_INT 41
22265: ST_TO_ADDR
22266: GO 22288
22268: LD_INT 3
22270: DOUBLE
22271: EQUAL
22272: IFTRUE 22276
22274: GO 22287
22276: POP
// tech := tech_bazooka ; end ;
22277: LD_ADDR_VAR 0 5
22281: PUSH
22282: LD_INT 44
22284: ST_TO_ADDR
22285: GO 22288
22287: POP
// if Researched ( side , tech ) then
22288: LD_VAR 0 3
22292: PPUSH
22293: LD_VAR 0 5
22297: PPUSH
22298: CALL_OW 325
22302: IFFALSE 22329
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22304: LD_ADDR_VAR 0 2
22308: PUSH
22309: LD_INT 5
22311: PUSH
22312: LD_INT 8
22314: PUSH
22315: LD_INT 9
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: PUSH
22323: LD_VAR 0 4
22327: ARRAY
22328: ST_TO_ADDR
// end ;
22329: LD_VAR 0 2
22333: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22334: LD_INT 0
22336: PPUSH
22337: PPUSH
22338: PPUSH
// if not mines then
22339: LD_VAR 0 2
22343: NOT
22344: IFFALSE 22348
// exit ;
22346: GO 22492
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22348: LD_ADDR_VAR 0 5
22352: PUSH
22353: LD_INT 81
22355: PUSH
22356: LD_VAR 0 1
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 3
22367: PUSH
22368: LD_INT 21
22370: PUSH
22371: LD_INT 3
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PPUSH
22386: CALL_OW 69
22390: ST_TO_ADDR
// for i in mines do
22391: LD_ADDR_VAR 0 4
22395: PUSH
22396: LD_VAR 0 2
22400: PUSH
22401: FOR_IN
22402: IFFALSE 22490
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22404: LD_VAR 0 4
22408: PUSH
22409: LD_INT 1
22411: ARRAY
22412: PPUSH
22413: LD_VAR 0 4
22417: PUSH
22418: LD_INT 2
22420: ARRAY
22421: PPUSH
22422: CALL_OW 458
22426: NOT
22427: IFFALSE 22431
// continue ;
22429: GO 22401
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22431: LD_VAR 0 4
22435: PUSH
22436: LD_INT 1
22438: ARRAY
22439: PPUSH
22440: LD_VAR 0 4
22444: PUSH
22445: LD_INT 2
22447: ARRAY
22448: PPUSH
22449: CALL_OW 428
22453: PUSH
22454: LD_VAR 0 5
22458: IN
22459: IFFALSE 22488
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22461: LD_VAR 0 4
22465: PUSH
22466: LD_INT 1
22468: ARRAY
22469: PPUSH
22470: LD_VAR 0 4
22474: PUSH
22475: LD_INT 2
22477: ARRAY
22478: PPUSH
22479: LD_VAR 0 1
22483: PPUSH
22484: CALL_OW 456
// end ;
22488: GO 22401
22490: POP
22491: POP
// end ;
22492: LD_VAR 0 3
22496: RET
// export function Count ( array ) ; var i ; begin
22497: LD_INT 0
22499: PPUSH
22500: PPUSH
// result := 0 ;
22501: LD_ADDR_VAR 0 2
22505: PUSH
22506: LD_INT 0
22508: ST_TO_ADDR
// for i in array do
22509: LD_ADDR_VAR 0 3
22513: PUSH
22514: LD_VAR 0 1
22518: PUSH
22519: FOR_IN
22520: IFFALSE 22544
// if i then
22522: LD_VAR 0 3
22526: IFFALSE 22542
// result := result + 1 ;
22528: LD_ADDR_VAR 0 2
22532: PUSH
22533: LD_VAR 0 2
22537: PUSH
22538: LD_INT 1
22540: PLUS
22541: ST_TO_ADDR
22542: GO 22519
22544: POP
22545: POP
// end ;
22546: LD_VAR 0 2
22550: RET
// export function IsEmpty ( building ) ; begin
22551: LD_INT 0
22553: PPUSH
// if not building then
22554: LD_VAR 0 1
22558: NOT
22559: IFFALSE 22563
// exit ;
22561: GO 22606
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22563: LD_ADDR_VAR 0 2
22567: PUSH
22568: LD_VAR 0 1
22572: PUSH
22573: LD_INT 22
22575: PUSH
22576: LD_VAR 0 1
22580: PPUSH
22581: CALL_OW 255
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 58
22592: PUSH
22593: EMPTY
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PPUSH
22600: CALL_OW 69
22604: IN
22605: ST_TO_ADDR
// end ;
22606: LD_VAR 0 2
22610: RET
// export function IsNotFull ( building ) ; begin
22611: LD_INT 0
22613: PPUSH
// if not building then
22614: LD_VAR 0 1
22618: NOT
22619: IFFALSE 22623
// exit ;
22621: GO 22642
// result := UnitsInside ( building ) < 6 ;
22623: LD_ADDR_VAR 0 2
22627: PUSH
22628: LD_VAR 0 1
22632: PPUSH
22633: CALL_OW 313
22637: PUSH
22638: LD_INT 6
22640: LESS
22641: ST_TO_ADDR
// end ;
22642: LD_VAR 0 2
22646: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22647: LD_INT 0
22649: PPUSH
22650: PPUSH
22651: PPUSH
22652: PPUSH
// tmp := [ ] ;
22653: LD_ADDR_VAR 0 3
22657: PUSH
22658: EMPTY
22659: ST_TO_ADDR
// list := [ ] ;
22660: LD_ADDR_VAR 0 5
22664: PUSH
22665: EMPTY
22666: ST_TO_ADDR
// for i = 16 to 25 do
22667: LD_ADDR_VAR 0 4
22671: PUSH
22672: DOUBLE
22673: LD_INT 16
22675: DEC
22676: ST_TO_ADDR
22677: LD_INT 25
22679: PUSH
22680: FOR_TO
22681: IFFALSE 22754
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22683: LD_ADDR_VAR 0 3
22687: PUSH
22688: LD_VAR 0 3
22692: PUSH
22693: LD_INT 22
22695: PUSH
22696: LD_VAR 0 1
22700: PPUSH
22701: CALL_OW 255
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 91
22712: PUSH
22713: LD_VAR 0 1
22717: PUSH
22718: LD_INT 6
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 30
22728: PUSH
22729: LD_VAR 0 4
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: LIST
22742: PUSH
22743: EMPTY
22744: LIST
22745: PPUSH
22746: CALL_OW 69
22750: ADD
22751: ST_TO_ADDR
22752: GO 22680
22754: POP
22755: POP
// for i = 1 to tmp do
22756: LD_ADDR_VAR 0 4
22760: PUSH
22761: DOUBLE
22762: LD_INT 1
22764: DEC
22765: ST_TO_ADDR
22766: LD_VAR 0 3
22770: PUSH
22771: FOR_TO
22772: IFFALSE 22860
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22774: LD_ADDR_VAR 0 5
22778: PUSH
22779: LD_VAR 0 5
22783: PUSH
22784: LD_VAR 0 3
22788: PUSH
22789: LD_VAR 0 4
22793: ARRAY
22794: PPUSH
22795: CALL_OW 266
22799: PUSH
22800: LD_VAR 0 3
22804: PUSH
22805: LD_VAR 0 4
22809: ARRAY
22810: PPUSH
22811: CALL_OW 250
22815: PUSH
22816: LD_VAR 0 3
22820: PUSH
22821: LD_VAR 0 4
22825: ARRAY
22826: PPUSH
22827: CALL_OW 251
22831: PUSH
22832: LD_VAR 0 3
22836: PUSH
22837: LD_VAR 0 4
22841: ARRAY
22842: PPUSH
22843: CALL_OW 254
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: PUSH
22854: EMPTY
22855: LIST
22856: ADD
22857: ST_TO_ADDR
22858: GO 22771
22860: POP
22861: POP
// result := list ;
22862: LD_ADDR_VAR 0 2
22866: PUSH
22867: LD_VAR 0 5
22871: ST_TO_ADDR
// end ;
22872: LD_VAR 0 2
22876: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22877: LD_INT 0
22879: PPUSH
22880: PPUSH
22881: PPUSH
22882: PPUSH
22883: PPUSH
22884: PPUSH
22885: PPUSH
// if not factory then
22886: LD_VAR 0 1
22890: NOT
22891: IFFALSE 22895
// exit ;
22893: GO 23488
// if control = control_apeman then
22895: LD_VAR 0 4
22899: PUSH
22900: LD_INT 5
22902: EQUAL
22903: IFFALSE 23012
// begin tmp := UnitsInside ( factory ) ;
22905: LD_ADDR_VAR 0 8
22909: PUSH
22910: LD_VAR 0 1
22914: PPUSH
22915: CALL_OW 313
22919: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22920: LD_VAR 0 8
22924: PPUSH
22925: LD_INT 25
22927: PUSH
22928: LD_INT 12
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PPUSH
22935: CALL_OW 72
22939: NOT
22940: IFFALSE 22950
// control := control_manual ;
22942: LD_ADDR_VAR 0 4
22946: PUSH
22947: LD_INT 1
22949: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22950: LD_ADDR_VAR 0 8
22954: PUSH
22955: LD_VAR 0 1
22959: PPUSH
22960: CALL 22647 0 1
22964: ST_TO_ADDR
// if tmp then
22965: LD_VAR 0 8
22969: IFFALSE 23012
// begin for i in tmp do
22971: LD_ADDR_VAR 0 7
22975: PUSH
22976: LD_VAR 0 8
22980: PUSH
22981: FOR_IN
22982: IFFALSE 23010
// if i [ 1 ] = b_ext_radio then
22984: LD_VAR 0 7
22988: PUSH
22989: LD_INT 1
22991: ARRAY
22992: PUSH
22993: LD_INT 22
22995: EQUAL
22996: IFFALSE 23008
// begin control := control_remote ;
22998: LD_ADDR_VAR 0 4
23002: PUSH
23003: LD_INT 2
23005: ST_TO_ADDR
// break ;
23006: GO 23010
// end ;
23008: GO 22981
23010: POP
23011: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23012: LD_VAR 0 1
23016: PPUSH
23017: LD_VAR 0 2
23021: PPUSH
23022: LD_VAR 0 3
23026: PPUSH
23027: LD_VAR 0 4
23031: PPUSH
23032: LD_VAR 0 5
23036: PPUSH
23037: CALL_OW 448
23041: IFFALSE 23076
// begin result := [ chassis , engine , control , weapon ] ;
23043: LD_ADDR_VAR 0 6
23047: PUSH
23048: LD_VAR 0 2
23052: PUSH
23053: LD_VAR 0 3
23057: PUSH
23058: LD_VAR 0 4
23062: PUSH
23063: LD_VAR 0 5
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: ST_TO_ADDR
// exit ;
23074: GO 23488
// end ; _chassis := AvailableChassisList ( factory ) ;
23076: LD_ADDR_VAR 0 9
23080: PUSH
23081: LD_VAR 0 1
23085: PPUSH
23086: CALL_OW 475
23090: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23091: LD_ADDR_VAR 0 11
23095: PUSH
23096: LD_VAR 0 1
23100: PPUSH
23101: CALL_OW 476
23105: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23106: LD_ADDR_VAR 0 12
23110: PUSH
23111: LD_VAR 0 1
23115: PPUSH
23116: CALL_OW 477
23120: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23121: LD_ADDR_VAR 0 10
23125: PUSH
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 478
23135: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23136: LD_VAR 0 9
23140: NOT
23141: PUSH
23142: LD_VAR 0 11
23146: NOT
23147: OR
23148: PUSH
23149: LD_VAR 0 12
23153: NOT
23154: OR
23155: PUSH
23156: LD_VAR 0 10
23160: NOT
23161: OR
23162: IFFALSE 23197
// begin result := [ chassis , engine , control , weapon ] ;
23164: LD_ADDR_VAR 0 6
23168: PUSH
23169: LD_VAR 0 2
23173: PUSH
23174: LD_VAR 0 3
23178: PUSH
23179: LD_VAR 0 4
23183: PUSH
23184: LD_VAR 0 5
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: ST_TO_ADDR
// exit ;
23195: GO 23488
// end ; if not chassis in _chassis then
23197: LD_VAR 0 2
23201: PUSH
23202: LD_VAR 0 9
23206: IN
23207: NOT
23208: IFFALSE 23234
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23210: LD_ADDR_VAR 0 2
23214: PUSH
23215: LD_VAR 0 9
23219: PUSH
23220: LD_INT 1
23222: PPUSH
23223: LD_VAR 0 9
23227: PPUSH
23228: CALL_OW 12
23232: ARRAY
23233: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23234: LD_VAR 0 2
23238: PPUSH
23239: LD_VAR 0 3
23243: PPUSH
23244: CALL 23493 0 2
23248: NOT
23249: IFFALSE 23308
// repeat engine := _engine [ 1 ] ;
23251: LD_ADDR_VAR 0 3
23255: PUSH
23256: LD_VAR 0 11
23260: PUSH
23261: LD_INT 1
23263: ARRAY
23264: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23265: LD_ADDR_VAR 0 11
23269: PUSH
23270: LD_VAR 0 11
23274: PPUSH
23275: LD_INT 1
23277: PPUSH
23278: CALL_OW 3
23282: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23283: LD_VAR 0 2
23287: PPUSH
23288: LD_VAR 0 3
23292: PPUSH
23293: CALL 23493 0 2
23297: PUSH
23298: LD_VAR 0 11
23302: PUSH
23303: EMPTY
23304: EQUAL
23305: OR
23306: IFFALSE 23251
// if not control in _control then
23308: LD_VAR 0 4
23312: PUSH
23313: LD_VAR 0 12
23317: IN
23318: NOT
23319: IFFALSE 23345
// control := _control [ rand ( 1 , _control ) ] ;
23321: LD_ADDR_VAR 0 4
23325: PUSH
23326: LD_VAR 0 12
23330: PUSH
23331: LD_INT 1
23333: PPUSH
23334: LD_VAR 0 12
23338: PPUSH
23339: CALL_OW 12
23343: ARRAY
23344: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23345: LD_VAR 0 2
23349: PPUSH
23350: LD_VAR 0 5
23354: PPUSH
23355: CALL 23713 0 2
23359: NOT
23360: IFFALSE 23419
// repeat weapon := _weapon [ 1 ] ;
23362: LD_ADDR_VAR 0 5
23366: PUSH
23367: LD_VAR 0 10
23371: PUSH
23372: LD_INT 1
23374: ARRAY
23375: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23376: LD_ADDR_VAR 0 10
23380: PUSH
23381: LD_VAR 0 10
23385: PPUSH
23386: LD_INT 1
23388: PPUSH
23389: CALL_OW 3
23393: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23394: LD_VAR 0 2
23398: PPUSH
23399: LD_VAR 0 5
23403: PPUSH
23404: CALL 23713 0 2
23408: PUSH
23409: LD_VAR 0 10
23413: PUSH
23414: EMPTY
23415: EQUAL
23416: OR
23417: IFFALSE 23362
// result := [ ] ;
23419: LD_ADDR_VAR 0 6
23423: PUSH
23424: EMPTY
23425: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23426: LD_VAR 0 1
23430: PPUSH
23431: LD_VAR 0 2
23435: PPUSH
23436: LD_VAR 0 3
23440: PPUSH
23441: LD_VAR 0 4
23445: PPUSH
23446: LD_VAR 0 5
23450: PPUSH
23451: CALL_OW 448
23455: IFFALSE 23488
// result := [ chassis , engine , control , weapon ] ;
23457: LD_ADDR_VAR 0 6
23461: PUSH
23462: LD_VAR 0 2
23466: PUSH
23467: LD_VAR 0 3
23471: PUSH
23472: LD_VAR 0 4
23476: PUSH
23477: LD_VAR 0 5
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: ST_TO_ADDR
// end ;
23488: LD_VAR 0 6
23492: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23493: LD_INT 0
23495: PPUSH
// if not chassis or not engine then
23496: LD_VAR 0 1
23500: NOT
23501: PUSH
23502: LD_VAR 0 2
23506: NOT
23507: OR
23508: IFFALSE 23512
// exit ;
23510: GO 23708
// case engine of engine_solar :
23512: LD_VAR 0 2
23516: PUSH
23517: LD_INT 2
23519: DOUBLE
23520: EQUAL
23521: IFTRUE 23525
23523: GO 23563
23525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23526: LD_ADDR_VAR 0 3
23530: PUSH
23531: LD_INT 11
23533: PUSH
23534: LD_INT 12
23536: PUSH
23537: LD_INT 13
23539: PUSH
23540: LD_INT 14
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 3
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: ST_TO_ADDR
23561: GO 23692
23563: LD_INT 1
23565: DOUBLE
23566: EQUAL
23567: IFTRUE 23571
23569: GO 23633
23571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23572: LD_ADDR_VAR 0 3
23576: PUSH
23577: LD_INT 11
23579: PUSH
23580: LD_INT 12
23582: PUSH
23583: LD_INT 13
23585: PUSH
23586: LD_INT 14
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: LD_INT 2
23594: PUSH
23595: LD_INT 3
23597: PUSH
23598: LD_INT 4
23600: PUSH
23601: LD_INT 5
23603: PUSH
23604: LD_INT 21
23606: PUSH
23607: LD_INT 23
23609: PUSH
23610: LD_INT 22
23612: PUSH
23613: LD_INT 24
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: ST_TO_ADDR
23631: GO 23692
23633: LD_INT 3
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23691
23641: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23642: LD_ADDR_VAR 0 3
23646: PUSH
23647: LD_INT 13
23649: PUSH
23650: LD_INT 14
23652: PUSH
23653: LD_INT 2
23655: PUSH
23656: LD_INT 3
23658: PUSH
23659: LD_INT 4
23661: PUSH
23662: LD_INT 5
23664: PUSH
23665: LD_INT 21
23667: PUSH
23668: LD_INT 22
23670: PUSH
23671: LD_INT 23
23673: PUSH
23674: LD_INT 24
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: ST_TO_ADDR
23689: GO 23692
23691: POP
// result := ( chassis in result ) ;
23692: LD_ADDR_VAR 0 3
23696: PUSH
23697: LD_VAR 0 1
23701: PUSH
23702: LD_VAR 0 3
23706: IN
23707: ST_TO_ADDR
// end ;
23708: LD_VAR 0 3
23712: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23713: LD_INT 0
23715: PPUSH
// if not chassis or not weapon then
23716: LD_VAR 0 1
23720: NOT
23721: PUSH
23722: LD_VAR 0 2
23726: NOT
23727: OR
23728: IFFALSE 23732
// exit ;
23730: GO 24758
// case weapon of us_machine_gun :
23732: LD_VAR 0 2
23736: PUSH
23737: LD_INT 2
23739: DOUBLE
23740: EQUAL
23741: IFTRUE 23745
23743: GO 23775
23745: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23746: LD_ADDR_VAR 0 3
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 2
23756: PUSH
23757: LD_INT 3
23759: PUSH
23760: LD_INT 4
23762: PUSH
23763: LD_INT 5
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: ST_TO_ADDR
23773: GO 24742
23775: LD_INT 3
23777: DOUBLE
23778: EQUAL
23779: IFTRUE 23783
23781: GO 23813
23783: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23784: LD_ADDR_VAR 0 3
23788: PUSH
23789: LD_INT 1
23791: PUSH
23792: LD_INT 2
23794: PUSH
23795: LD_INT 3
23797: PUSH
23798: LD_INT 4
23800: PUSH
23801: LD_INT 5
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: ST_TO_ADDR
23811: GO 24742
23813: LD_INT 11
23815: DOUBLE
23816: EQUAL
23817: IFTRUE 23821
23819: GO 23851
23821: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23822: LD_ADDR_VAR 0 3
23826: PUSH
23827: LD_INT 1
23829: PUSH
23830: LD_INT 2
23832: PUSH
23833: LD_INT 3
23835: PUSH
23836: LD_INT 4
23838: PUSH
23839: LD_INT 5
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: ST_TO_ADDR
23849: GO 24742
23851: LD_INT 4
23853: DOUBLE
23854: EQUAL
23855: IFTRUE 23859
23857: GO 23885
23859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23860: LD_ADDR_VAR 0 3
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: LD_INT 3
23870: PUSH
23871: LD_INT 4
23873: PUSH
23874: LD_INT 5
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: ST_TO_ADDR
23883: GO 24742
23885: LD_INT 5
23887: DOUBLE
23888: EQUAL
23889: IFTRUE 23893
23891: GO 23919
23893: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23894: LD_ADDR_VAR 0 3
23898: PUSH
23899: LD_INT 2
23901: PUSH
23902: LD_INT 3
23904: PUSH
23905: LD_INT 4
23907: PUSH
23908: LD_INT 5
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: ST_TO_ADDR
23917: GO 24742
23919: LD_INT 9
23921: DOUBLE
23922: EQUAL
23923: IFTRUE 23927
23925: GO 23953
23927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23928: LD_ADDR_VAR 0 3
23932: PUSH
23933: LD_INT 2
23935: PUSH
23936: LD_INT 3
23938: PUSH
23939: LD_INT 4
23941: PUSH
23942: LD_INT 5
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: ST_TO_ADDR
23951: GO 24742
23953: LD_INT 7
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 23987
23961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23962: LD_ADDR_VAR 0 3
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: LD_INT 3
23972: PUSH
23973: LD_INT 4
23975: PUSH
23976: LD_INT 5
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: ST_TO_ADDR
23985: GO 24742
23987: LD_INT 12
23989: DOUBLE
23990: EQUAL
23991: IFTRUE 23995
23993: GO 24021
23995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23996: LD_ADDR_VAR 0 3
24000: PUSH
24001: LD_INT 2
24003: PUSH
24004: LD_INT 3
24006: PUSH
24007: LD_INT 4
24009: PUSH
24010: LD_INT 5
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: ST_TO_ADDR
24019: GO 24742
24021: LD_INT 13
24023: DOUBLE
24024: EQUAL
24025: IFTRUE 24029
24027: GO 24055
24029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24030: LD_ADDR_VAR 0 3
24034: PUSH
24035: LD_INT 2
24037: PUSH
24038: LD_INT 3
24040: PUSH
24041: LD_INT 4
24043: PUSH
24044: LD_INT 5
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: ST_TO_ADDR
24053: GO 24742
24055: LD_INT 14
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 24081
24063: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24064: LD_ADDR_VAR 0 3
24068: PUSH
24069: LD_INT 4
24071: PUSH
24072: LD_INT 5
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: ST_TO_ADDR
24079: GO 24742
24081: LD_INT 6
24083: DOUBLE
24084: EQUAL
24085: IFTRUE 24089
24087: GO 24107
24089: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24090: LD_ADDR_VAR 0 3
24094: PUSH
24095: LD_INT 4
24097: PUSH
24098: LD_INT 5
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: ST_TO_ADDR
24105: GO 24742
24107: LD_INT 10
24109: DOUBLE
24110: EQUAL
24111: IFTRUE 24115
24113: GO 24133
24115: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24116: LD_ADDR_VAR 0 3
24120: PUSH
24121: LD_INT 4
24123: PUSH
24124: LD_INT 5
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: ST_TO_ADDR
24131: GO 24742
24133: LD_INT 22
24135: DOUBLE
24136: EQUAL
24137: IFTRUE 24141
24139: GO 24167
24141: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24142: LD_ADDR_VAR 0 3
24146: PUSH
24147: LD_INT 11
24149: PUSH
24150: LD_INT 12
24152: PUSH
24153: LD_INT 13
24155: PUSH
24156: LD_INT 14
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: ST_TO_ADDR
24165: GO 24742
24167: LD_INT 23
24169: DOUBLE
24170: EQUAL
24171: IFTRUE 24175
24173: GO 24201
24175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24176: LD_ADDR_VAR 0 3
24180: PUSH
24181: LD_INT 11
24183: PUSH
24184: LD_INT 12
24186: PUSH
24187: LD_INT 13
24189: PUSH
24190: LD_INT 14
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: ST_TO_ADDR
24199: GO 24742
24201: LD_INT 24
24203: DOUBLE
24204: EQUAL
24205: IFTRUE 24209
24207: GO 24235
24209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24210: LD_ADDR_VAR 0 3
24214: PUSH
24215: LD_INT 11
24217: PUSH
24218: LD_INT 12
24220: PUSH
24221: LD_INT 13
24223: PUSH
24224: LD_INT 14
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: ST_TO_ADDR
24233: GO 24742
24235: LD_INT 30
24237: DOUBLE
24238: EQUAL
24239: IFTRUE 24243
24241: GO 24269
24243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24244: LD_ADDR_VAR 0 3
24248: PUSH
24249: LD_INT 11
24251: PUSH
24252: LD_INT 12
24254: PUSH
24255: LD_INT 13
24257: PUSH
24258: LD_INT 14
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: ST_TO_ADDR
24267: GO 24742
24269: LD_INT 25
24271: DOUBLE
24272: EQUAL
24273: IFTRUE 24277
24275: GO 24295
24277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24278: LD_ADDR_VAR 0 3
24282: PUSH
24283: LD_INT 13
24285: PUSH
24286: LD_INT 14
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: ST_TO_ADDR
24293: GO 24742
24295: LD_INT 27
24297: DOUBLE
24298: EQUAL
24299: IFTRUE 24303
24301: GO 24321
24303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24304: LD_ADDR_VAR 0 3
24308: PUSH
24309: LD_INT 13
24311: PUSH
24312: LD_INT 14
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: ST_TO_ADDR
24319: GO 24742
24321: LD_INT 28
24323: DOUBLE
24324: EQUAL
24325: IFTRUE 24329
24327: GO 24347
24329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24330: LD_ADDR_VAR 0 3
24334: PUSH
24335: LD_INT 13
24337: PUSH
24338: LD_INT 14
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: ST_TO_ADDR
24345: GO 24742
24347: LD_INT 29
24349: DOUBLE
24350: EQUAL
24351: IFTRUE 24355
24353: GO 24373
24355: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24356: LD_ADDR_VAR 0 3
24360: PUSH
24361: LD_INT 13
24363: PUSH
24364: LD_INT 14
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: ST_TO_ADDR
24371: GO 24742
24373: LD_INT 31
24375: DOUBLE
24376: EQUAL
24377: IFTRUE 24381
24379: GO 24399
24381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24382: LD_ADDR_VAR 0 3
24386: PUSH
24387: LD_INT 13
24389: PUSH
24390: LD_INT 14
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: ST_TO_ADDR
24397: GO 24742
24399: LD_INT 26
24401: DOUBLE
24402: EQUAL
24403: IFTRUE 24407
24405: GO 24425
24407: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24408: LD_ADDR_VAR 0 3
24412: PUSH
24413: LD_INT 13
24415: PUSH
24416: LD_INT 14
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: ST_TO_ADDR
24423: GO 24742
24425: LD_INT 42
24427: DOUBLE
24428: EQUAL
24429: IFTRUE 24433
24431: GO 24459
24433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24434: LD_ADDR_VAR 0 3
24438: PUSH
24439: LD_INT 21
24441: PUSH
24442: LD_INT 22
24444: PUSH
24445: LD_INT 23
24447: PUSH
24448: LD_INT 24
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: ST_TO_ADDR
24457: GO 24742
24459: LD_INT 43
24461: DOUBLE
24462: EQUAL
24463: IFTRUE 24467
24465: GO 24493
24467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24468: LD_ADDR_VAR 0 3
24472: PUSH
24473: LD_INT 21
24475: PUSH
24476: LD_INT 22
24478: PUSH
24479: LD_INT 23
24481: PUSH
24482: LD_INT 24
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: ST_TO_ADDR
24491: GO 24742
24493: LD_INT 44
24495: DOUBLE
24496: EQUAL
24497: IFTRUE 24501
24499: GO 24527
24501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24502: LD_ADDR_VAR 0 3
24506: PUSH
24507: LD_INT 21
24509: PUSH
24510: LD_INT 22
24512: PUSH
24513: LD_INT 23
24515: PUSH
24516: LD_INT 24
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: ST_TO_ADDR
24525: GO 24742
24527: LD_INT 45
24529: DOUBLE
24530: EQUAL
24531: IFTRUE 24535
24533: GO 24561
24535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24536: LD_ADDR_VAR 0 3
24540: PUSH
24541: LD_INT 21
24543: PUSH
24544: LD_INT 22
24546: PUSH
24547: LD_INT 23
24549: PUSH
24550: LD_INT 24
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: ST_TO_ADDR
24559: GO 24742
24561: LD_INT 49
24563: DOUBLE
24564: EQUAL
24565: IFTRUE 24569
24567: GO 24595
24569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24570: LD_ADDR_VAR 0 3
24574: PUSH
24575: LD_INT 21
24577: PUSH
24578: LD_INT 22
24580: PUSH
24581: LD_INT 23
24583: PUSH
24584: LD_INT 24
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: ST_TO_ADDR
24593: GO 24742
24595: LD_INT 51
24597: DOUBLE
24598: EQUAL
24599: IFTRUE 24603
24601: GO 24629
24603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24604: LD_ADDR_VAR 0 3
24608: PUSH
24609: LD_INT 21
24611: PUSH
24612: LD_INT 22
24614: PUSH
24615: LD_INT 23
24617: PUSH
24618: LD_INT 24
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: ST_TO_ADDR
24627: GO 24742
24629: LD_INT 52
24631: DOUBLE
24632: EQUAL
24633: IFTRUE 24637
24635: GO 24663
24637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24638: LD_ADDR_VAR 0 3
24642: PUSH
24643: LD_INT 21
24645: PUSH
24646: LD_INT 22
24648: PUSH
24649: LD_INT 23
24651: PUSH
24652: LD_INT 24
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: ST_TO_ADDR
24661: GO 24742
24663: LD_INT 53
24665: DOUBLE
24666: EQUAL
24667: IFTRUE 24671
24669: GO 24689
24671: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24672: LD_ADDR_VAR 0 3
24676: PUSH
24677: LD_INT 23
24679: PUSH
24680: LD_INT 24
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: ST_TO_ADDR
24687: GO 24742
24689: LD_INT 46
24691: DOUBLE
24692: EQUAL
24693: IFTRUE 24697
24695: GO 24715
24697: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24698: LD_ADDR_VAR 0 3
24702: PUSH
24703: LD_INT 23
24705: PUSH
24706: LD_INT 24
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: ST_TO_ADDR
24713: GO 24742
24715: LD_INT 47
24717: DOUBLE
24718: EQUAL
24719: IFTRUE 24723
24721: GO 24741
24723: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24724: LD_ADDR_VAR 0 3
24728: PUSH
24729: LD_INT 23
24731: PUSH
24732: LD_INT 24
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: ST_TO_ADDR
24739: GO 24742
24741: POP
// result := ( chassis in result ) ;
24742: LD_ADDR_VAR 0 3
24746: PUSH
24747: LD_VAR 0 1
24751: PUSH
24752: LD_VAR 0 3
24756: IN
24757: ST_TO_ADDR
// end ;
24758: LD_VAR 0 3
24762: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24763: LD_INT 0
24765: PPUSH
24766: PPUSH
24767: PPUSH
24768: PPUSH
24769: PPUSH
24770: PPUSH
24771: PPUSH
// result := array ;
24772: LD_ADDR_VAR 0 5
24776: PUSH
24777: LD_VAR 0 1
24781: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24782: LD_VAR 0 1
24786: NOT
24787: PUSH
24788: LD_VAR 0 2
24792: NOT
24793: OR
24794: PUSH
24795: LD_VAR 0 3
24799: NOT
24800: OR
24801: PUSH
24802: LD_VAR 0 2
24806: PUSH
24807: LD_VAR 0 1
24811: GREATER
24812: OR
24813: PUSH
24814: LD_VAR 0 3
24818: PUSH
24819: LD_VAR 0 1
24823: GREATER
24824: OR
24825: IFFALSE 24829
// exit ;
24827: GO 25125
// if direction then
24829: LD_VAR 0 4
24833: IFFALSE 24897
// begin d := 1 ;
24835: LD_ADDR_VAR 0 9
24839: PUSH
24840: LD_INT 1
24842: ST_TO_ADDR
// if i_from > i_to then
24843: LD_VAR 0 2
24847: PUSH
24848: LD_VAR 0 3
24852: GREATER
24853: IFFALSE 24879
// length := ( array - i_from ) + i_to else
24855: LD_ADDR_VAR 0 11
24859: PUSH
24860: LD_VAR 0 1
24864: PUSH
24865: LD_VAR 0 2
24869: MINUS
24870: PUSH
24871: LD_VAR 0 3
24875: PLUS
24876: ST_TO_ADDR
24877: GO 24895
// length := i_to - i_from ;
24879: LD_ADDR_VAR 0 11
24883: PUSH
24884: LD_VAR 0 3
24888: PUSH
24889: LD_VAR 0 2
24893: MINUS
24894: ST_TO_ADDR
// end else
24895: GO 24958
// begin d := - 1 ;
24897: LD_ADDR_VAR 0 9
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: ST_TO_ADDR
// if i_from > i_to then
24906: LD_VAR 0 2
24910: PUSH
24911: LD_VAR 0 3
24915: GREATER
24916: IFFALSE 24936
// length := i_from - i_to else
24918: LD_ADDR_VAR 0 11
24922: PUSH
24923: LD_VAR 0 2
24927: PUSH
24928: LD_VAR 0 3
24932: MINUS
24933: ST_TO_ADDR
24934: GO 24958
// length := ( array - i_to ) + i_from ;
24936: LD_ADDR_VAR 0 11
24940: PUSH
24941: LD_VAR 0 1
24945: PUSH
24946: LD_VAR 0 3
24950: MINUS
24951: PUSH
24952: LD_VAR 0 2
24956: PLUS
24957: ST_TO_ADDR
// end ; if not length then
24958: LD_VAR 0 11
24962: NOT
24963: IFFALSE 24967
// exit ;
24965: GO 25125
// tmp := array ;
24967: LD_ADDR_VAR 0 10
24971: PUSH
24972: LD_VAR 0 1
24976: ST_TO_ADDR
// for i = 1 to length do
24977: LD_ADDR_VAR 0 6
24981: PUSH
24982: DOUBLE
24983: LD_INT 1
24985: DEC
24986: ST_TO_ADDR
24987: LD_VAR 0 11
24991: PUSH
24992: FOR_TO
24993: IFFALSE 25113
// begin for j = 1 to array do
24995: LD_ADDR_VAR 0 7
24999: PUSH
25000: DOUBLE
25001: LD_INT 1
25003: DEC
25004: ST_TO_ADDR
25005: LD_VAR 0 1
25009: PUSH
25010: FOR_TO
25011: IFFALSE 25099
// begin k := j + d ;
25013: LD_ADDR_VAR 0 8
25017: PUSH
25018: LD_VAR 0 7
25022: PUSH
25023: LD_VAR 0 9
25027: PLUS
25028: ST_TO_ADDR
// if k > array then
25029: LD_VAR 0 8
25033: PUSH
25034: LD_VAR 0 1
25038: GREATER
25039: IFFALSE 25049
// k := 1 ;
25041: LD_ADDR_VAR 0 8
25045: PUSH
25046: LD_INT 1
25048: ST_TO_ADDR
// if not k then
25049: LD_VAR 0 8
25053: NOT
25054: IFFALSE 25066
// k := array ;
25056: LD_ADDR_VAR 0 8
25060: PUSH
25061: LD_VAR 0 1
25065: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25066: LD_ADDR_VAR 0 10
25070: PUSH
25071: LD_VAR 0 10
25075: PPUSH
25076: LD_VAR 0 8
25080: PPUSH
25081: LD_VAR 0 1
25085: PUSH
25086: LD_VAR 0 7
25090: ARRAY
25091: PPUSH
25092: CALL_OW 1
25096: ST_TO_ADDR
// end ;
25097: GO 25010
25099: POP
25100: POP
// array := tmp ;
25101: LD_ADDR_VAR 0 1
25105: PUSH
25106: LD_VAR 0 10
25110: ST_TO_ADDR
// end ;
25111: GO 24992
25113: POP
25114: POP
// result := array ;
25115: LD_ADDR_VAR 0 5
25119: PUSH
25120: LD_VAR 0 1
25124: ST_TO_ADDR
// end ;
25125: LD_VAR 0 5
25129: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25130: LD_INT 0
25132: PPUSH
25133: PPUSH
// result := 0 ;
25134: LD_ADDR_VAR 0 3
25138: PUSH
25139: LD_INT 0
25141: ST_TO_ADDR
// if not array or not value in array then
25142: LD_VAR 0 1
25146: NOT
25147: PUSH
25148: LD_VAR 0 2
25152: PUSH
25153: LD_VAR 0 1
25157: IN
25158: NOT
25159: OR
25160: IFFALSE 25164
// exit ;
25162: GO 25218
// for i = 1 to array do
25164: LD_ADDR_VAR 0 4
25168: PUSH
25169: DOUBLE
25170: LD_INT 1
25172: DEC
25173: ST_TO_ADDR
25174: LD_VAR 0 1
25178: PUSH
25179: FOR_TO
25180: IFFALSE 25216
// if value = array [ i ] then
25182: LD_VAR 0 2
25186: PUSH
25187: LD_VAR 0 1
25191: PUSH
25192: LD_VAR 0 4
25196: ARRAY
25197: EQUAL
25198: IFFALSE 25214
// begin result := i ;
25200: LD_ADDR_VAR 0 3
25204: PUSH
25205: LD_VAR 0 4
25209: ST_TO_ADDR
// exit ;
25210: POP
25211: POP
25212: GO 25218
// end ;
25214: GO 25179
25216: POP
25217: POP
// end ;
25218: LD_VAR 0 3
25222: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25223: LD_INT 0
25225: PPUSH
// vc_chassis := chassis ;
25226: LD_ADDR_OWVAR 37
25230: PUSH
25231: LD_VAR 0 1
25235: ST_TO_ADDR
// vc_engine := engine ;
25236: LD_ADDR_OWVAR 39
25240: PUSH
25241: LD_VAR 0 2
25245: ST_TO_ADDR
// vc_control := control ;
25246: LD_ADDR_OWVAR 38
25250: PUSH
25251: LD_VAR 0 3
25255: ST_TO_ADDR
// vc_weapon := weapon ;
25256: LD_ADDR_OWVAR 40
25260: PUSH
25261: LD_VAR 0 4
25265: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25266: LD_ADDR_OWVAR 41
25270: PUSH
25271: LD_VAR 0 5
25275: ST_TO_ADDR
// end ;
25276: LD_VAR 0 6
25280: RET
// export function WantPlant ( unit ) ; var task ; begin
25281: LD_INT 0
25283: PPUSH
25284: PPUSH
// result := false ;
25285: LD_ADDR_VAR 0 2
25289: PUSH
25290: LD_INT 0
25292: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25293: LD_ADDR_VAR 0 3
25297: PUSH
25298: LD_VAR 0 1
25302: PPUSH
25303: CALL_OW 437
25307: ST_TO_ADDR
// if task then
25308: LD_VAR 0 3
25312: IFFALSE 25340
// if task [ 1 ] [ 1 ] = p then
25314: LD_VAR 0 3
25318: PUSH
25319: LD_INT 1
25321: ARRAY
25322: PUSH
25323: LD_INT 1
25325: ARRAY
25326: PUSH
25327: LD_STRING p
25329: EQUAL
25330: IFFALSE 25340
// result := true ;
25332: LD_ADDR_VAR 0 2
25336: PUSH
25337: LD_INT 1
25339: ST_TO_ADDR
// end ;
25340: LD_VAR 0 2
25344: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25345: LD_INT 0
25347: PPUSH
25348: PPUSH
25349: PPUSH
25350: PPUSH
// if pos < 1 then
25351: LD_VAR 0 2
25355: PUSH
25356: LD_INT 1
25358: LESS
25359: IFFALSE 25363
// exit ;
25361: GO 25666
// if pos = 1 then
25363: LD_VAR 0 2
25367: PUSH
25368: LD_INT 1
25370: EQUAL
25371: IFFALSE 25404
// result := Replace ( arr , pos [ 1 ] , value ) else
25373: LD_ADDR_VAR 0 4
25377: PUSH
25378: LD_VAR 0 1
25382: PPUSH
25383: LD_VAR 0 2
25387: PUSH
25388: LD_INT 1
25390: ARRAY
25391: PPUSH
25392: LD_VAR 0 3
25396: PPUSH
25397: CALL_OW 1
25401: ST_TO_ADDR
25402: GO 25666
// begin tmp := arr ;
25404: LD_ADDR_VAR 0 6
25408: PUSH
25409: LD_VAR 0 1
25413: ST_TO_ADDR
// s_arr := [ tmp ] ;
25414: LD_ADDR_VAR 0 7
25418: PUSH
25419: LD_VAR 0 6
25423: PUSH
25424: EMPTY
25425: LIST
25426: ST_TO_ADDR
// for i = 1 to pos - 1 do
25427: LD_ADDR_VAR 0 5
25431: PUSH
25432: DOUBLE
25433: LD_INT 1
25435: DEC
25436: ST_TO_ADDR
25437: LD_VAR 0 2
25441: PUSH
25442: LD_INT 1
25444: MINUS
25445: PUSH
25446: FOR_TO
25447: IFFALSE 25492
// begin tmp := tmp [ pos [ i ] ] ;
25449: LD_ADDR_VAR 0 6
25453: PUSH
25454: LD_VAR 0 6
25458: PUSH
25459: LD_VAR 0 2
25463: PUSH
25464: LD_VAR 0 5
25468: ARRAY
25469: ARRAY
25470: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25471: LD_ADDR_VAR 0 7
25475: PUSH
25476: LD_VAR 0 7
25480: PUSH
25481: LD_VAR 0 6
25485: PUSH
25486: EMPTY
25487: LIST
25488: ADD
25489: ST_TO_ADDR
// end ;
25490: GO 25446
25492: POP
25493: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25494: LD_ADDR_VAR 0 6
25498: PUSH
25499: LD_VAR 0 6
25503: PPUSH
25504: LD_VAR 0 2
25508: PUSH
25509: LD_VAR 0 2
25513: ARRAY
25514: PPUSH
25515: LD_VAR 0 3
25519: PPUSH
25520: CALL_OW 1
25524: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25525: LD_ADDR_VAR 0 7
25529: PUSH
25530: LD_VAR 0 7
25534: PPUSH
25535: LD_VAR 0 7
25539: PPUSH
25540: LD_VAR 0 6
25544: PPUSH
25545: CALL_OW 1
25549: ST_TO_ADDR
// for i = s_arr downto 2 do
25550: LD_ADDR_VAR 0 5
25554: PUSH
25555: DOUBLE
25556: LD_VAR 0 7
25560: INC
25561: ST_TO_ADDR
25562: LD_INT 2
25564: PUSH
25565: FOR_DOWNTO
25566: IFFALSE 25650
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25568: LD_ADDR_VAR 0 6
25572: PUSH
25573: LD_VAR 0 7
25577: PUSH
25578: LD_VAR 0 5
25582: PUSH
25583: LD_INT 1
25585: MINUS
25586: ARRAY
25587: PPUSH
25588: LD_VAR 0 2
25592: PUSH
25593: LD_VAR 0 5
25597: PUSH
25598: LD_INT 1
25600: MINUS
25601: ARRAY
25602: PPUSH
25603: LD_VAR 0 7
25607: PUSH
25608: LD_VAR 0 5
25612: ARRAY
25613: PPUSH
25614: CALL_OW 1
25618: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25619: LD_ADDR_VAR 0 7
25623: PUSH
25624: LD_VAR 0 7
25628: PPUSH
25629: LD_VAR 0 5
25633: PUSH
25634: LD_INT 1
25636: MINUS
25637: PPUSH
25638: LD_VAR 0 6
25642: PPUSH
25643: CALL_OW 1
25647: ST_TO_ADDR
// end ;
25648: GO 25565
25650: POP
25651: POP
// result := s_arr [ 1 ] ;
25652: LD_ADDR_VAR 0 4
25656: PUSH
25657: LD_VAR 0 7
25661: PUSH
25662: LD_INT 1
25664: ARRAY
25665: ST_TO_ADDR
// end ; end ;
25666: LD_VAR 0 4
25670: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25671: LD_INT 0
25673: PPUSH
25674: PPUSH
// if not list then
25675: LD_VAR 0 1
25679: NOT
25680: IFFALSE 25684
// exit ;
25682: GO 25775
// i := list [ pos1 ] ;
25684: LD_ADDR_VAR 0 5
25688: PUSH
25689: LD_VAR 0 1
25693: PUSH
25694: LD_VAR 0 2
25698: ARRAY
25699: ST_TO_ADDR
// if not i then
25700: LD_VAR 0 5
25704: NOT
25705: IFFALSE 25709
// exit ;
25707: GO 25775
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25709: LD_ADDR_VAR 0 1
25713: PUSH
25714: LD_VAR 0 1
25718: PPUSH
25719: LD_VAR 0 2
25723: PPUSH
25724: LD_VAR 0 1
25728: PUSH
25729: LD_VAR 0 3
25733: ARRAY
25734: PPUSH
25735: CALL_OW 1
25739: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25740: LD_ADDR_VAR 0 1
25744: PUSH
25745: LD_VAR 0 1
25749: PPUSH
25750: LD_VAR 0 3
25754: PPUSH
25755: LD_VAR 0 5
25759: PPUSH
25760: CALL_OW 1
25764: ST_TO_ADDR
// result := list ;
25765: LD_ADDR_VAR 0 4
25769: PUSH
25770: LD_VAR 0 1
25774: ST_TO_ADDR
// end ;
25775: LD_VAR 0 4
25779: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25780: LD_INT 0
25782: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25783: LD_ADDR_VAR 0 5
25787: PUSH
25788: LD_VAR 0 1
25792: PPUSH
25793: CALL_OW 250
25797: PPUSH
25798: LD_VAR 0 1
25802: PPUSH
25803: CALL_OW 251
25807: PPUSH
25808: LD_VAR 0 2
25812: PPUSH
25813: LD_VAR 0 3
25817: PPUSH
25818: LD_VAR 0 4
25822: PPUSH
25823: CALL 25833 0 5
25827: ST_TO_ADDR
// end ;
25828: LD_VAR 0 5
25832: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25833: LD_INT 0
25835: PPUSH
25836: PPUSH
25837: PPUSH
25838: PPUSH
// if not list then
25839: LD_VAR 0 3
25843: NOT
25844: IFFALSE 25848
// exit ;
25846: GO 26236
// result := [ ] ;
25848: LD_ADDR_VAR 0 6
25852: PUSH
25853: EMPTY
25854: ST_TO_ADDR
// for i in list do
25855: LD_ADDR_VAR 0 7
25859: PUSH
25860: LD_VAR 0 3
25864: PUSH
25865: FOR_IN
25866: IFFALSE 26068
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25868: LD_ADDR_VAR 0 9
25872: PUSH
25873: LD_VAR 0 7
25877: PPUSH
25878: LD_VAR 0 1
25882: PPUSH
25883: LD_VAR 0 2
25887: PPUSH
25888: CALL_OW 297
25892: ST_TO_ADDR
// if not result then
25893: LD_VAR 0 6
25897: NOT
25898: IFFALSE 25924
// result := [ [ i , tmp ] ] else
25900: LD_ADDR_VAR 0 6
25904: PUSH
25905: LD_VAR 0 7
25909: PUSH
25910: LD_VAR 0 9
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: ST_TO_ADDR
25922: GO 26066
// begin if result [ result ] [ 2 ] < tmp then
25924: LD_VAR 0 6
25928: PUSH
25929: LD_VAR 0 6
25933: ARRAY
25934: PUSH
25935: LD_INT 2
25937: ARRAY
25938: PUSH
25939: LD_VAR 0 9
25943: LESS
25944: IFFALSE 25986
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25946: LD_ADDR_VAR 0 6
25950: PUSH
25951: LD_VAR 0 6
25955: PPUSH
25956: LD_VAR 0 6
25960: PUSH
25961: LD_INT 1
25963: PLUS
25964: PPUSH
25965: LD_VAR 0 7
25969: PUSH
25970: LD_VAR 0 9
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PPUSH
25979: CALL_OW 2
25983: ST_TO_ADDR
25984: GO 26066
// for j = 1 to result do
25986: LD_ADDR_VAR 0 8
25990: PUSH
25991: DOUBLE
25992: LD_INT 1
25994: DEC
25995: ST_TO_ADDR
25996: LD_VAR 0 6
26000: PUSH
26001: FOR_TO
26002: IFFALSE 26064
// begin if tmp < result [ j ] [ 2 ] then
26004: LD_VAR 0 9
26008: PUSH
26009: LD_VAR 0 6
26013: PUSH
26014: LD_VAR 0 8
26018: ARRAY
26019: PUSH
26020: LD_INT 2
26022: ARRAY
26023: LESS
26024: IFFALSE 26062
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26026: LD_ADDR_VAR 0 6
26030: PUSH
26031: LD_VAR 0 6
26035: PPUSH
26036: LD_VAR 0 8
26040: PPUSH
26041: LD_VAR 0 7
26045: PUSH
26046: LD_VAR 0 9
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PPUSH
26055: CALL_OW 2
26059: ST_TO_ADDR
// break ;
26060: GO 26064
// end ; end ;
26062: GO 26001
26064: POP
26065: POP
// end ; end ;
26066: GO 25865
26068: POP
26069: POP
// if result and not asc then
26070: LD_VAR 0 6
26074: PUSH
26075: LD_VAR 0 4
26079: NOT
26080: AND
26081: IFFALSE 26156
// begin tmp := result ;
26083: LD_ADDR_VAR 0 9
26087: PUSH
26088: LD_VAR 0 6
26092: ST_TO_ADDR
// for i = tmp downto 1 do
26093: LD_ADDR_VAR 0 7
26097: PUSH
26098: DOUBLE
26099: LD_VAR 0 9
26103: INC
26104: ST_TO_ADDR
26105: LD_INT 1
26107: PUSH
26108: FOR_DOWNTO
26109: IFFALSE 26154
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26111: LD_ADDR_VAR 0 6
26115: PUSH
26116: LD_VAR 0 6
26120: PPUSH
26121: LD_VAR 0 9
26125: PUSH
26126: LD_VAR 0 7
26130: MINUS
26131: PUSH
26132: LD_INT 1
26134: PLUS
26135: PPUSH
26136: LD_VAR 0 9
26140: PUSH
26141: LD_VAR 0 7
26145: ARRAY
26146: PPUSH
26147: CALL_OW 1
26151: ST_TO_ADDR
26152: GO 26108
26154: POP
26155: POP
// end ; tmp := [ ] ;
26156: LD_ADDR_VAR 0 9
26160: PUSH
26161: EMPTY
26162: ST_TO_ADDR
// if mode then
26163: LD_VAR 0 5
26167: IFFALSE 26236
// begin for i = 1 to result do
26169: LD_ADDR_VAR 0 7
26173: PUSH
26174: DOUBLE
26175: LD_INT 1
26177: DEC
26178: ST_TO_ADDR
26179: LD_VAR 0 6
26183: PUSH
26184: FOR_TO
26185: IFFALSE 26224
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26187: LD_ADDR_VAR 0 9
26191: PUSH
26192: LD_VAR 0 9
26196: PPUSH
26197: LD_VAR 0 7
26201: PPUSH
26202: LD_VAR 0 6
26206: PUSH
26207: LD_VAR 0 7
26211: ARRAY
26212: PUSH
26213: LD_INT 1
26215: ARRAY
26216: PPUSH
26217: CALL_OW 1
26221: ST_TO_ADDR
26222: GO 26184
26224: POP
26225: POP
// result := tmp ;
26226: LD_ADDR_VAR 0 6
26230: PUSH
26231: LD_VAR 0 9
26235: ST_TO_ADDR
// end ; end ;
26236: LD_VAR 0 6
26240: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26241: LD_INT 0
26243: PPUSH
26244: PPUSH
26245: PPUSH
26246: PPUSH
26247: PPUSH
26248: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26249: LD_ADDR_VAR 0 5
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: LD_INT 0
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: EMPTY
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: ST_TO_ADDR
// if not x or not y then
26271: LD_VAR 0 2
26275: NOT
26276: PUSH
26277: LD_VAR 0 3
26281: NOT
26282: OR
26283: IFFALSE 26287
// exit ;
26285: GO 27933
// if not range then
26287: LD_VAR 0 4
26291: NOT
26292: IFFALSE 26302
// range := 10 ;
26294: LD_ADDR_VAR 0 4
26298: PUSH
26299: LD_INT 10
26301: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26302: LD_ADDR_VAR 0 8
26306: PUSH
26307: LD_INT 81
26309: PUSH
26310: LD_VAR 0 1
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 92
26321: PUSH
26322: LD_VAR 0 2
26326: PUSH
26327: LD_VAR 0 3
26331: PUSH
26332: LD_VAR 0 4
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 3
26345: PUSH
26346: LD_INT 21
26348: PUSH
26349: LD_INT 3
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: LIST
26364: PPUSH
26365: CALL_OW 69
26369: ST_TO_ADDR
// if not tmp then
26370: LD_VAR 0 8
26374: NOT
26375: IFFALSE 26379
// exit ;
26377: GO 27933
// for i in tmp do
26379: LD_ADDR_VAR 0 6
26383: PUSH
26384: LD_VAR 0 8
26388: PUSH
26389: FOR_IN
26390: IFFALSE 27908
// begin points := [ 0 , 0 , 0 ] ;
26392: LD_ADDR_VAR 0 9
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: LIST
26410: ST_TO_ADDR
// bpoints := 1 ;
26411: LD_ADDR_VAR 0 10
26415: PUSH
26416: LD_INT 1
26418: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26419: LD_VAR 0 6
26423: PPUSH
26424: CALL_OW 247
26428: PUSH
26429: LD_INT 1
26431: DOUBLE
26432: EQUAL
26433: IFTRUE 26437
26435: GO 27015
26437: POP
// begin if GetClass ( i ) = 1 then
26438: LD_VAR 0 6
26442: PPUSH
26443: CALL_OW 257
26447: PUSH
26448: LD_INT 1
26450: EQUAL
26451: IFFALSE 26472
// points := [ 10 , 5 , 3 ] ;
26453: LD_ADDR_VAR 0 9
26457: PUSH
26458: LD_INT 10
26460: PUSH
26461: LD_INT 5
26463: PUSH
26464: LD_INT 3
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: LIST
26471: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26472: LD_VAR 0 6
26476: PPUSH
26477: CALL_OW 257
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: LD_INT 3
26487: PUSH
26488: LD_INT 4
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: IN
26496: IFFALSE 26517
// points := [ 3 , 2 , 1 ] ;
26498: LD_ADDR_VAR 0 9
26502: PUSH
26503: LD_INT 3
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: LD_INT 1
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26517: LD_VAR 0 6
26521: PPUSH
26522: CALL_OW 257
26526: PUSH
26527: LD_INT 5
26529: EQUAL
26530: IFFALSE 26551
// points := [ 130 , 5 , 2 ] ;
26532: LD_ADDR_VAR 0 9
26536: PUSH
26537: LD_INT 130
26539: PUSH
26540: LD_INT 5
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: LIST
26550: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26551: LD_VAR 0 6
26555: PPUSH
26556: CALL_OW 257
26560: PUSH
26561: LD_INT 8
26563: EQUAL
26564: IFFALSE 26585
// points := [ 35 , 35 , 30 ] ;
26566: LD_ADDR_VAR 0 9
26570: PUSH
26571: LD_INT 35
26573: PUSH
26574: LD_INT 35
26576: PUSH
26577: LD_INT 30
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26585: LD_VAR 0 6
26589: PPUSH
26590: CALL_OW 257
26594: PUSH
26595: LD_INT 9
26597: EQUAL
26598: IFFALSE 26619
// points := [ 20 , 55 , 40 ] ;
26600: LD_ADDR_VAR 0 9
26604: PUSH
26605: LD_INT 20
26607: PUSH
26608: LD_INT 55
26610: PUSH
26611: LD_INT 40
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26619: LD_VAR 0 6
26623: PPUSH
26624: CALL_OW 257
26628: PUSH
26629: LD_INT 12
26631: PUSH
26632: LD_INT 16
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: IN
26639: IFFALSE 26660
// points := [ 5 , 3 , 2 ] ;
26641: LD_ADDR_VAR 0 9
26645: PUSH
26646: LD_INT 5
26648: PUSH
26649: LD_INT 3
26651: PUSH
26652: LD_INT 2
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: LIST
26659: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26660: LD_VAR 0 6
26664: PPUSH
26665: CALL_OW 257
26669: PUSH
26670: LD_INT 17
26672: EQUAL
26673: IFFALSE 26694
// points := [ 100 , 50 , 75 ] ;
26675: LD_ADDR_VAR 0 9
26679: PUSH
26680: LD_INT 100
26682: PUSH
26683: LD_INT 50
26685: PUSH
26686: LD_INT 75
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: LIST
26693: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26694: LD_VAR 0 6
26698: PPUSH
26699: CALL_OW 257
26703: PUSH
26704: LD_INT 15
26706: EQUAL
26707: IFFALSE 26728
// points := [ 10 , 5 , 3 ] ;
26709: LD_ADDR_VAR 0 9
26713: PUSH
26714: LD_INT 10
26716: PUSH
26717: LD_INT 5
26719: PUSH
26720: LD_INT 3
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: LIST
26727: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26728: LD_VAR 0 6
26732: PPUSH
26733: CALL_OW 257
26737: PUSH
26738: LD_INT 14
26740: EQUAL
26741: IFFALSE 26762
// points := [ 10 , 0 , 0 ] ;
26743: LD_ADDR_VAR 0 9
26747: PUSH
26748: LD_INT 10
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: LIST
26761: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26762: LD_VAR 0 6
26766: PPUSH
26767: CALL_OW 257
26771: PUSH
26772: LD_INT 11
26774: EQUAL
26775: IFFALSE 26796
// points := [ 30 , 10 , 5 ] ;
26777: LD_ADDR_VAR 0 9
26781: PUSH
26782: LD_INT 30
26784: PUSH
26785: LD_INT 10
26787: PUSH
26788: LD_INT 5
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: LIST
26795: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26796: LD_VAR 0 1
26800: PPUSH
26801: LD_INT 5
26803: PPUSH
26804: CALL_OW 321
26808: PUSH
26809: LD_INT 2
26811: EQUAL
26812: IFFALSE 26829
// bpoints := bpoints * 1.8 ;
26814: LD_ADDR_VAR 0 10
26818: PUSH
26819: LD_VAR 0 10
26823: PUSH
26824: LD_REAL  1.80000000000000E+0000
26827: MUL
26828: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26829: LD_VAR 0 6
26833: PPUSH
26834: CALL_OW 257
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: LD_INT 3
26847: PUSH
26848: LD_INT 4
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: IN
26857: PUSH
26858: LD_VAR 0 1
26862: PPUSH
26863: LD_INT 51
26865: PPUSH
26866: CALL_OW 321
26870: PUSH
26871: LD_INT 2
26873: EQUAL
26874: AND
26875: IFFALSE 26892
// bpoints := bpoints * 1.2 ;
26877: LD_ADDR_VAR 0 10
26881: PUSH
26882: LD_VAR 0 10
26886: PUSH
26887: LD_REAL  1.20000000000000E+0000
26890: MUL
26891: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26892: LD_VAR 0 6
26896: PPUSH
26897: CALL_OW 257
26901: PUSH
26902: LD_INT 5
26904: PUSH
26905: LD_INT 7
26907: PUSH
26908: LD_INT 9
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: LIST
26915: IN
26916: PUSH
26917: LD_VAR 0 1
26921: PPUSH
26922: LD_INT 52
26924: PPUSH
26925: CALL_OW 321
26929: PUSH
26930: LD_INT 2
26932: EQUAL
26933: AND
26934: IFFALSE 26951
// bpoints := bpoints * 1.5 ;
26936: LD_ADDR_VAR 0 10
26940: PUSH
26941: LD_VAR 0 10
26945: PUSH
26946: LD_REAL  1.50000000000000E+0000
26949: MUL
26950: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26951: LD_VAR 0 1
26955: PPUSH
26956: LD_INT 66
26958: PPUSH
26959: CALL_OW 321
26963: PUSH
26964: LD_INT 2
26966: EQUAL
26967: IFFALSE 26984
// bpoints := bpoints * 1.1 ;
26969: LD_ADDR_VAR 0 10
26973: PUSH
26974: LD_VAR 0 10
26978: PUSH
26979: LD_REAL  1.10000000000000E+0000
26982: MUL
26983: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26984: LD_ADDR_VAR 0 10
26988: PUSH
26989: LD_VAR 0 10
26993: PUSH
26994: LD_VAR 0 6
26998: PPUSH
26999: LD_INT 1
27001: PPUSH
27002: CALL_OW 259
27006: PUSH
27007: LD_REAL  1.15000000000000E+0000
27010: MUL
27011: MUL
27012: ST_TO_ADDR
// end ; unit_vehicle :
27013: GO 27837
27015: LD_INT 2
27017: DOUBLE
27018: EQUAL
27019: IFTRUE 27023
27021: GO 27825
27023: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27024: LD_VAR 0 6
27028: PPUSH
27029: CALL_OW 264
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: LD_INT 42
27039: PUSH
27040: LD_INT 24
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: LIST
27047: IN
27048: IFFALSE 27069
// points := [ 25 , 5 , 3 ] ;
27050: LD_ADDR_VAR 0 9
27054: PUSH
27055: LD_INT 25
27057: PUSH
27058: LD_INT 5
27060: PUSH
27061: LD_INT 3
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: LIST
27068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27069: LD_VAR 0 6
27073: PPUSH
27074: CALL_OW 264
27078: PUSH
27079: LD_INT 4
27081: PUSH
27082: LD_INT 43
27084: PUSH
27085: LD_INT 25
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: LIST
27092: IN
27093: IFFALSE 27114
// points := [ 40 , 15 , 5 ] ;
27095: LD_ADDR_VAR 0 9
27099: PUSH
27100: LD_INT 40
27102: PUSH
27103: LD_INT 15
27105: PUSH
27106: LD_INT 5
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: LIST
27113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27114: LD_VAR 0 6
27118: PPUSH
27119: CALL_OW 264
27123: PUSH
27124: LD_INT 3
27126: PUSH
27127: LD_INT 23
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: IN
27134: IFFALSE 27155
// points := [ 7 , 25 , 8 ] ;
27136: LD_ADDR_VAR 0 9
27140: PUSH
27141: LD_INT 7
27143: PUSH
27144: LD_INT 25
27146: PUSH
27147: LD_INT 8
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27155: LD_VAR 0 6
27159: PPUSH
27160: CALL_OW 264
27164: PUSH
27165: LD_INT 5
27167: PUSH
27168: LD_INT 27
27170: PUSH
27171: LD_INT 44
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: IN
27179: IFFALSE 27200
// points := [ 14 , 50 , 16 ] ;
27181: LD_ADDR_VAR 0 9
27185: PUSH
27186: LD_INT 14
27188: PUSH
27189: LD_INT 50
27191: PUSH
27192: LD_INT 16
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: LIST
27199: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27200: LD_VAR 0 6
27204: PPUSH
27205: CALL_OW 264
27209: PUSH
27210: LD_INT 6
27212: PUSH
27213: LD_INT 46
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: IN
27220: IFFALSE 27241
// points := [ 32 , 120 , 70 ] ;
27222: LD_ADDR_VAR 0 9
27226: PUSH
27227: LD_INT 32
27229: PUSH
27230: LD_INT 120
27232: PUSH
27233: LD_INT 70
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27241: LD_VAR 0 6
27245: PPUSH
27246: CALL_OW 264
27250: PUSH
27251: LD_INT 7
27253: PUSH
27254: LD_INT 28
27256: PUSH
27257: LD_INT 45
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: LIST
27264: IN
27265: IFFALSE 27286
// points := [ 35 , 20 , 45 ] ;
27267: LD_ADDR_VAR 0 9
27271: PUSH
27272: LD_INT 35
27274: PUSH
27275: LD_INT 20
27277: PUSH
27278: LD_INT 45
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27286: LD_VAR 0 6
27290: PPUSH
27291: CALL_OW 264
27295: PUSH
27296: LD_INT 47
27298: PUSH
27299: EMPTY
27300: LIST
27301: IN
27302: IFFALSE 27323
// points := [ 67 , 45 , 75 ] ;
27304: LD_ADDR_VAR 0 9
27308: PUSH
27309: LD_INT 67
27311: PUSH
27312: LD_INT 45
27314: PUSH
27315: LD_INT 75
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27323: LD_VAR 0 6
27327: PPUSH
27328: CALL_OW 264
27332: PUSH
27333: LD_INT 26
27335: PUSH
27336: EMPTY
27337: LIST
27338: IN
27339: IFFALSE 27360
// points := [ 120 , 30 , 80 ] ;
27341: LD_ADDR_VAR 0 9
27345: PUSH
27346: LD_INT 120
27348: PUSH
27349: LD_INT 30
27351: PUSH
27352: LD_INT 80
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27360: LD_VAR 0 6
27364: PPUSH
27365: CALL_OW 264
27369: PUSH
27370: LD_INT 22
27372: PUSH
27373: EMPTY
27374: LIST
27375: IN
27376: IFFALSE 27397
// points := [ 40 , 1 , 1 ] ;
27378: LD_ADDR_VAR 0 9
27382: PUSH
27383: LD_INT 40
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: LIST
27396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27397: LD_VAR 0 6
27401: PPUSH
27402: CALL_OW 264
27406: PUSH
27407: LD_INT 29
27409: PUSH
27410: EMPTY
27411: LIST
27412: IN
27413: IFFALSE 27434
// points := [ 70 , 200 , 400 ] ;
27415: LD_ADDR_VAR 0 9
27419: PUSH
27420: LD_INT 70
27422: PUSH
27423: LD_INT 200
27425: PUSH
27426: LD_INT 400
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: LIST
27433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27434: LD_VAR 0 6
27438: PPUSH
27439: CALL_OW 264
27443: PUSH
27444: LD_INT 14
27446: PUSH
27447: LD_INT 53
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: IN
27454: IFFALSE 27475
// points := [ 40 , 10 , 20 ] ;
27456: LD_ADDR_VAR 0 9
27460: PUSH
27461: LD_INT 40
27463: PUSH
27464: LD_INT 10
27466: PUSH
27467: LD_INT 20
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: LIST
27474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27475: LD_VAR 0 6
27479: PPUSH
27480: CALL_OW 264
27484: PUSH
27485: LD_INT 9
27487: PUSH
27488: EMPTY
27489: LIST
27490: IN
27491: IFFALSE 27512
// points := [ 5 , 70 , 20 ] ;
27493: LD_ADDR_VAR 0 9
27497: PUSH
27498: LD_INT 5
27500: PUSH
27501: LD_INT 70
27503: PUSH
27504: LD_INT 20
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27512: LD_VAR 0 6
27516: PPUSH
27517: CALL_OW 264
27521: PUSH
27522: LD_INT 10
27524: PUSH
27525: EMPTY
27526: LIST
27527: IN
27528: IFFALSE 27549
// points := [ 35 , 110 , 70 ] ;
27530: LD_ADDR_VAR 0 9
27534: PUSH
27535: LD_INT 35
27537: PUSH
27538: LD_INT 110
27540: PUSH
27541: LD_INT 70
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: LIST
27548: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27549: LD_VAR 0 6
27553: PPUSH
27554: CALL_OW 265
27558: PUSH
27559: LD_INT 25
27561: EQUAL
27562: IFFALSE 27583
// points := [ 80 , 65 , 100 ] ;
27564: LD_ADDR_VAR 0 9
27568: PUSH
27569: LD_INT 80
27571: PUSH
27572: LD_INT 65
27574: PUSH
27575: LD_INT 100
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27583: LD_VAR 0 6
27587: PPUSH
27588: CALL_OW 263
27592: PUSH
27593: LD_INT 1
27595: EQUAL
27596: IFFALSE 27631
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27598: LD_ADDR_VAR 0 10
27602: PUSH
27603: LD_VAR 0 10
27607: PUSH
27608: LD_VAR 0 6
27612: PPUSH
27613: CALL_OW 311
27617: PPUSH
27618: LD_INT 3
27620: PPUSH
27621: CALL_OW 259
27625: PUSH
27626: LD_INT 4
27628: MUL
27629: MUL
27630: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27631: LD_VAR 0 6
27635: PPUSH
27636: CALL_OW 263
27640: PUSH
27641: LD_INT 2
27643: EQUAL
27644: IFFALSE 27695
// begin j := IsControledBy ( i ) ;
27646: LD_ADDR_VAR 0 7
27650: PUSH
27651: LD_VAR 0 6
27655: PPUSH
27656: CALL_OW 312
27660: ST_TO_ADDR
// if j then
27661: LD_VAR 0 7
27665: IFFALSE 27695
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27667: LD_ADDR_VAR 0 10
27671: PUSH
27672: LD_VAR 0 10
27676: PUSH
27677: LD_VAR 0 7
27681: PPUSH
27682: LD_INT 3
27684: PPUSH
27685: CALL_OW 259
27689: PUSH
27690: LD_INT 3
27692: MUL
27693: MUL
27694: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27695: LD_VAR 0 6
27699: PPUSH
27700: CALL_OW 264
27704: PUSH
27705: LD_INT 5
27707: PUSH
27708: LD_INT 6
27710: PUSH
27711: LD_INT 46
27713: PUSH
27714: LD_INT 44
27716: PUSH
27717: LD_INT 47
27719: PUSH
27720: LD_INT 45
27722: PUSH
27723: LD_INT 28
27725: PUSH
27726: LD_INT 7
27728: PUSH
27729: LD_INT 27
27731: PUSH
27732: LD_INT 29
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: IN
27747: PUSH
27748: LD_VAR 0 1
27752: PPUSH
27753: LD_INT 52
27755: PPUSH
27756: CALL_OW 321
27760: PUSH
27761: LD_INT 2
27763: EQUAL
27764: AND
27765: IFFALSE 27782
// bpoints := bpoints * 1.2 ;
27767: LD_ADDR_VAR 0 10
27771: PUSH
27772: LD_VAR 0 10
27776: PUSH
27777: LD_REAL  1.20000000000000E+0000
27780: MUL
27781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27782: LD_VAR 0 6
27786: PPUSH
27787: CALL_OW 264
27791: PUSH
27792: LD_INT 6
27794: PUSH
27795: LD_INT 46
27797: PUSH
27798: LD_INT 47
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: LIST
27805: IN
27806: IFFALSE 27823
// bpoints := bpoints * 1.2 ;
27808: LD_ADDR_VAR 0 10
27812: PUSH
27813: LD_VAR 0 10
27817: PUSH
27818: LD_REAL  1.20000000000000E+0000
27821: MUL
27822: ST_TO_ADDR
// end ; unit_building :
27823: GO 27837
27825: LD_INT 3
27827: DOUBLE
27828: EQUAL
27829: IFTRUE 27833
27831: GO 27836
27833: POP
// ; end ;
27834: GO 27837
27836: POP
// for j = 1 to 3 do
27837: LD_ADDR_VAR 0 7
27841: PUSH
27842: DOUBLE
27843: LD_INT 1
27845: DEC
27846: ST_TO_ADDR
27847: LD_INT 3
27849: PUSH
27850: FOR_TO
27851: IFFALSE 27904
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27853: LD_ADDR_VAR 0 5
27857: PUSH
27858: LD_VAR 0 5
27862: PPUSH
27863: LD_VAR 0 7
27867: PPUSH
27868: LD_VAR 0 5
27872: PUSH
27873: LD_VAR 0 7
27877: ARRAY
27878: PUSH
27879: LD_VAR 0 9
27883: PUSH
27884: LD_VAR 0 7
27888: ARRAY
27889: PUSH
27890: LD_VAR 0 10
27894: MUL
27895: PLUS
27896: PPUSH
27897: CALL_OW 1
27901: ST_TO_ADDR
27902: GO 27850
27904: POP
27905: POP
// end ;
27906: GO 26389
27908: POP
27909: POP
// result := Replace ( result , 4 , tmp ) ;
27910: LD_ADDR_VAR 0 5
27914: PUSH
27915: LD_VAR 0 5
27919: PPUSH
27920: LD_INT 4
27922: PPUSH
27923: LD_VAR 0 8
27927: PPUSH
27928: CALL_OW 1
27932: ST_TO_ADDR
// end ;
27933: LD_VAR 0 5
27937: RET
// export function DangerAtRange ( unit , range ) ; begin
27938: LD_INT 0
27940: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27941: LD_ADDR_VAR 0 3
27945: PUSH
27946: LD_VAR 0 1
27950: PPUSH
27951: CALL_OW 255
27955: PPUSH
27956: LD_VAR 0 1
27960: PPUSH
27961: CALL_OW 250
27965: PPUSH
27966: LD_VAR 0 1
27970: PPUSH
27971: CALL_OW 251
27975: PPUSH
27976: LD_VAR 0 2
27980: PPUSH
27981: CALL 26241 0 4
27985: ST_TO_ADDR
// end ;
27986: LD_VAR 0 3
27990: RET
// export function DangerInArea ( side , area ) ; begin
27991: LD_INT 0
27993: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27994: LD_ADDR_VAR 0 3
27998: PUSH
27999: LD_VAR 0 2
28003: PPUSH
28004: LD_INT 81
28006: PUSH
28007: LD_VAR 0 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PPUSH
28016: CALL_OW 70
28020: ST_TO_ADDR
// end ;
28021: LD_VAR 0 3
28025: RET
// export function IsExtension ( b ) ; begin
28026: LD_INT 0
28028: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28029: LD_ADDR_VAR 0 2
28033: PUSH
28034: LD_VAR 0 1
28038: PUSH
28039: LD_INT 23
28041: PUSH
28042: LD_INT 20
28044: PUSH
28045: LD_INT 22
28047: PUSH
28048: LD_INT 17
28050: PUSH
28051: LD_INT 24
28053: PUSH
28054: LD_INT 21
28056: PUSH
28057: LD_INT 19
28059: PUSH
28060: LD_INT 16
28062: PUSH
28063: LD_INT 25
28065: PUSH
28066: LD_INT 18
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: IN
28081: ST_TO_ADDR
// end ;
28082: LD_VAR 0 2
28086: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28087: LD_INT 0
28089: PPUSH
28090: PPUSH
28091: PPUSH
// result := [ ] ;
28092: LD_ADDR_VAR 0 3
28096: PUSH
28097: EMPTY
28098: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28099: LD_ADDR_VAR 0 4
28103: PUSH
28104: LD_VAR 0 2
28108: PPUSH
28109: LD_INT 21
28111: PUSH
28112: LD_INT 3
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PPUSH
28119: CALL_OW 70
28123: ST_TO_ADDR
// if not tmp then
28124: LD_VAR 0 4
28128: NOT
28129: IFFALSE 28133
// exit ;
28131: GO 28191
// for i in tmp do
28133: LD_ADDR_VAR 0 5
28137: PUSH
28138: LD_VAR 0 4
28142: PUSH
28143: FOR_IN
28144: IFFALSE 28179
// if GetBase ( i ) <> base then
28146: LD_VAR 0 5
28150: PPUSH
28151: CALL_OW 274
28155: PUSH
28156: LD_VAR 0 1
28160: NONEQUAL
28161: IFFALSE 28177
// ComLinkToBase ( base , i ) ;
28163: LD_VAR 0 1
28167: PPUSH
28168: LD_VAR 0 5
28172: PPUSH
28173: CALL_OW 169
28177: GO 28143
28179: POP
28180: POP
// result := tmp ;
28181: LD_ADDR_VAR 0 3
28185: PUSH
28186: LD_VAR 0 4
28190: ST_TO_ADDR
// end ;
28191: LD_VAR 0 3
28195: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28196: LD_INT 0
28198: PPUSH
28199: PPUSH
// if BuildingStatus ( b ) = bs_build then
28200: LD_VAR 0 2
28204: PPUSH
28205: CALL_OW 461
28209: PUSH
28210: LD_INT 1
28212: EQUAL
28213: IFFALSE 28273
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28215: LD_VAR 0 1
28219: PPUSH
28220: LD_STRING h
28222: PUSH
28223: LD_VAR 0 2
28227: PPUSH
28228: CALL_OW 250
28232: PUSH
28233: LD_VAR 0 2
28237: PPUSH
28238: CALL_OW 251
28242: PUSH
28243: LD_VAR 0 2
28247: PUSH
28248: LD_INT 0
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: PUSH
28266: EMPTY
28267: LIST
28268: PPUSH
28269: CALL_OW 446
// end ;
28273: LD_VAR 0 3
28277: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28278: LD_INT 0
28280: PPUSH
28281: PPUSH
28282: PPUSH
28283: PPUSH
28284: PPUSH
28285: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28286: LD_VAR 0 1
28290: NOT
28291: PUSH
28292: LD_VAR 0 1
28296: PPUSH
28297: CALL_OW 263
28301: PUSH
28302: LD_INT 2
28304: EQUAL
28305: NOT
28306: OR
28307: IFFALSE 28311
// exit ;
28309: GO 28627
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28311: LD_ADDR_VAR 0 6
28315: PUSH
28316: LD_INT 22
28318: PUSH
28319: LD_VAR 0 1
28323: PPUSH
28324: CALL_OW 255
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: LD_INT 30
28338: PUSH
28339: LD_INT 36
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 34
28348: PUSH
28349: LD_INT 31
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PPUSH
28365: CALL_OW 69
28369: ST_TO_ADDR
// if not tmp then
28370: LD_VAR 0 6
28374: NOT
28375: IFFALSE 28379
// exit ;
28377: GO 28627
// result := [ ] ;
28379: LD_ADDR_VAR 0 2
28383: PUSH
28384: EMPTY
28385: ST_TO_ADDR
// for i in tmp do
28386: LD_ADDR_VAR 0 3
28390: PUSH
28391: LD_VAR 0 6
28395: PUSH
28396: FOR_IN
28397: IFFALSE 28468
// begin t := UnitsInside ( i ) ;
28399: LD_ADDR_VAR 0 4
28403: PUSH
28404: LD_VAR 0 3
28408: PPUSH
28409: CALL_OW 313
28413: ST_TO_ADDR
// if t then
28414: LD_VAR 0 4
28418: IFFALSE 28466
// for j in t do
28420: LD_ADDR_VAR 0 7
28424: PUSH
28425: LD_VAR 0 4
28429: PUSH
28430: FOR_IN
28431: IFFALSE 28464
// result := Insert ( result , result + 1 , j ) ;
28433: LD_ADDR_VAR 0 2
28437: PUSH
28438: LD_VAR 0 2
28442: PPUSH
28443: LD_VAR 0 2
28447: PUSH
28448: LD_INT 1
28450: PLUS
28451: PPUSH
28452: LD_VAR 0 7
28456: PPUSH
28457: CALL_OW 2
28461: ST_TO_ADDR
28462: GO 28430
28464: POP
28465: POP
// end ;
28466: GO 28396
28468: POP
28469: POP
// if not result then
28470: LD_VAR 0 2
28474: NOT
28475: IFFALSE 28479
// exit ;
28477: GO 28627
// mech := result [ 1 ] ;
28479: LD_ADDR_VAR 0 5
28483: PUSH
28484: LD_VAR 0 2
28488: PUSH
28489: LD_INT 1
28491: ARRAY
28492: ST_TO_ADDR
// if result > 1 then
28493: LD_VAR 0 2
28497: PUSH
28498: LD_INT 1
28500: GREATER
28501: IFFALSE 28613
// for i = 2 to result do
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: DOUBLE
28509: LD_INT 2
28511: DEC
28512: ST_TO_ADDR
28513: LD_VAR 0 2
28517: PUSH
28518: FOR_TO
28519: IFFALSE 28611
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28521: LD_ADDR_VAR 0 4
28525: PUSH
28526: LD_VAR 0 2
28530: PUSH
28531: LD_VAR 0 3
28535: ARRAY
28536: PPUSH
28537: LD_INT 3
28539: PPUSH
28540: CALL_OW 259
28544: PUSH
28545: LD_VAR 0 2
28549: PUSH
28550: LD_VAR 0 3
28554: ARRAY
28555: PPUSH
28556: CALL_OW 432
28560: MINUS
28561: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28562: LD_VAR 0 4
28566: PUSH
28567: LD_VAR 0 5
28571: PPUSH
28572: LD_INT 3
28574: PPUSH
28575: CALL_OW 259
28579: PUSH
28580: LD_VAR 0 5
28584: PPUSH
28585: CALL_OW 432
28589: MINUS
28590: GREATEREQUAL
28591: IFFALSE 28609
// mech := result [ i ] ;
28593: LD_ADDR_VAR 0 5
28597: PUSH
28598: LD_VAR 0 2
28602: PUSH
28603: LD_VAR 0 3
28607: ARRAY
28608: ST_TO_ADDR
// end ;
28609: GO 28518
28611: POP
28612: POP
// ComLinkTo ( vehicle , mech ) ;
28613: LD_VAR 0 1
28617: PPUSH
28618: LD_VAR 0 5
28622: PPUSH
28623: CALL_OW 135
// end ;
28627: LD_VAR 0 2
28631: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28632: LD_INT 0
28634: PPUSH
28635: PPUSH
28636: PPUSH
28637: PPUSH
28638: PPUSH
28639: PPUSH
28640: PPUSH
28641: PPUSH
28642: PPUSH
28643: PPUSH
28644: PPUSH
28645: PPUSH
28646: PPUSH
// result := [ ] ;
28647: LD_ADDR_VAR 0 7
28651: PUSH
28652: EMPTY
28653: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28654: LD_VAR 0 1
28658: PPUSH
28659: CALL_OW 266
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: LD_INT 1
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: IN
28674: NOT
28675: IFFALSE 28679
// exit ;
28677: GO 30310
// if name then
28679: LD_VAR 0 3
28683: IFFALSE 28699
// SetBName ( base_dep , name ) ;
28685: LD_VAR 0 1
28689: PPUSH
28690: LD_VAR 0 3
28694: PPUSH
28695: CALL_OW 500
// base := GetBase ( base_dep ) ;
28699: LD_ADDR_VAR 0 15
28703: PUSH
28704: LD_VAR 0 1
28708: PPUSH
28709: CALL_OW 274
28713: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28714: LD_ADDR_VAR 0 16
28718: PUSH
28719: LD_VAR 0 1
28723: PPUSH
28724: CALL_OW 255
28728: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28729: LD_ADDR_VAR 0 17
28733: PUSH
28734: LD_VAR 0 1
28738: PPUSH
28739: CALL_OW 248
28743: ST_TO_ADDR
// if sources then
28744: LD_VAR 0 5
28748: IFFALSE 28795
// for i = 1 to 3 do
28750: LD_ADDR_VAR 0 8
28754: PUSH
28755: DOUBLE
28756: LD_INT 1
28758: DEC
28759: ST_TO_ADDR
28760: LD_INT 3
28762: PUSH
28763: FOR_TO
28764: IFFALSE 28793
// AddResourceType ( base , i , sources [ i ] ) ;
28766: LD_VAR 0 15
28770: PPUSH
28771: LD_VAR 0 8
28775: PPUSH
28776: LD_VAR 0 5
28780: PUSH
28781: LD_VAR 0 8
28785: ARRAY
28786: PPUSH
28787: CALL_OW 276
28791: GO 28763
28793: POP
28794: POP
// buildings := GetBaseBuildings ( base , area ) ;
28795: LD_ADDR_VAR 0 18
28799: PUSH
28800: LD_VAR 0 15
28804: PPUSH
28805: LD_VAR 0 2
28809: PPUSH
28810: CALL 28087 0 2
28814: ST_TO_ADDR
// InitHc ;
28815: CALL_OW 19
// InitUc ;
28819: CALL_OW 18
// uc_side := side ;
28823: LD_ADDR_OWVAR 20
28827: PUSH
28828: LD_VAR 0 16
28832: ST_TO_ADDR
// uc_nation := nation ;
28833: LD_ADDR_OWVAR 21
28837: PUSH
28838: LD_VAR 0 17
28842: ST_TO_ADDR
// if buildings then
28843: LD_VAR 0 18
28847: IFFALSE 30169
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28849: LD_ADDR_VAR 0 19
28853: PUSH
28854: LD_VAR 0 18
28858: PPUSH
28859: LD_INT 2
28861: PUSH
28862: LD_INT 30
28864: PUSH
28865: LD_INT 29
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 30
28874: PUSH
28875: LD_INT 30
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: PPUSH
28887: CALL_OW 72
28891: ST_TO_ADDR
// if tmp then
28892: LD_VAR 0 19
28896: IFFALSE 28944
// for i in tmp do
28898: LD_ADDR_VAR 0 8
28902: PUSH
28903: LD_VAR 0 19
28907: PUSH
28908: FOR_IN
28909: IFFALSE 28942
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28911: LD_VAR 0 8
28915: PPUSH
28916: CALL_OW 250
28920: PPUSH
28921: LD_VAR 0 8
28925: PPUSH
28926: CALL_OW 251
28930: PPUSH
28931: LD_VAR 0 16
28935: PPUSH
28936: CALL_OW 441
28940: GO 28908
28942: POP
28943: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28944: LD_VAR 0 18
28948: PPUSH
28949: LD_INT 2
28951: PUSH
28952: LD_INT 30
28954: PUSH
28955: LD_INT 32
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 30
28964: PUSH
28965: LD_INT 33
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: LIST
28976: PPUSH
28977: CALL_OW 72
28981: IFFALSE 29069
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28983: LD_ADDR_VAR 0 8
28987: PUSH
28988: LD_VAR 0 18
28992: PPUSH
28993: LD_INT 2
28995: PUSH
28996: LD_INT 30
28998: PUSH
28999: LD_INT 32
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 30
29008: PUSH
29009: LD_INT 33
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: LIST
29020: PPUSH
29021: CALL_OW 72
29025: PUSH
29026: FOR_IN
29027: IFFALSE 29067
// begin if not GetBWeapon ( i ) then
29029: LD_VAR 0 8
29033: PPUSH
29034: CALL_OW 269
29038: NOT
29039: IFFALSE 29065
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29041: LD_VAR 0 8
29045: PPUSH
29046: LD_VAR 0 8
29050: PPUSH
29051: LD_VAR 0 2
29055: PPUSH
29056: CALL 30315 0 2
29060: PPUSH
29061: CALL_OW 431
// end ;
29065: GO 29026
29067: POP
29068: POP
// end ; for i = 1 to personel do
29069: LD_ADDR_VAR 0 8
29073: PUSH
29074: DOUBLE
29075: LD_INT 1
29077: DEC
29078: ST_TO_ADDR
29079: LD_VAR 0 6
29083: PUSH
29084: FOR_TO
29085: IFFALSE 30149
// begin if i > 4 then
29087: LD_VAR 0 8
29091: PUSH
29092: LD_INT 4
29094: GREATER
29095: IFFALSE 29099
// break ;
29097: GO 30149
// case i of 1 :
29099: LD_VAR 0 8
29103: PUSH
29104: LD_INT 1
29106: DOUBLE
29107: EQUAL
29108: IFTRUE 29112
29110: GO 29192
29112: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29113: LD_ADDR_VAR 0 12
29117: PUSH
29118: LD_VAR 0 18
29122: PPUSH
29123: LD_INT 22
29125: PUSH
29126: LD_VAR 0 16
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 58
29137: PUSH
29138: EMPTY
29139: LIST
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: LD_INT 30
29146: PUSH
29147: LD_INT 32
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 30
29156: PUSH
29157: LD_INT 4
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 30
29166: PUSH
29167: LD_INT 5
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: LIST
29184: PPUSH
29185: CALL_OW 72
29189: ST_TO_ADDR
29190: GO 29414
29192: LD_INT 2
29194: DOUBLE
29195: EQUAL
29196: IFTRUE 29200
29198: GO 29262
29200: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29201: LD_ADDR_VAR 0 12
29205: PUSH
29206: LD_VAR 0 18
29210: PPUSH
29211: LD_INT 22
29213: PUSH
29214: LD_VAR 0 16
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 2
29225: PUSH
29226: LD_INT 30
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 30
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PPUSH
29255: CALL_OW 72
29259: ST_TO_ADDR
29260: GO 29414
29262: LD_INT 3
29264: DOUBLE
29265: EQUAL
29266: IFTRUE 29270
29268: GO 29332
29270: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29271: LD_ADDR_VAR 0 12
29275: PUSH
29276: LD_VAR 0 18
29280: PPUSH
29281: LD_INT 22
29283: PUSH
29284: LD_VAR 0 16
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 2
29295: PUSH
29296: LD_INT 30
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 30
29308: PUSH
29309: LD_INT 3
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: LIST
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PPUSH
29325: CALL_OW 72
29329: ST_TO_ADDR
29330: GO 29414
29332: LD_INT 4
29334: DOUBLE
29335: EQUAL
29336: IFTRUE 29340
29338: GO 29413
29340: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29341: LD_ADDR_VAR 0 12
29345: PUSH
29346: LD_VAR 0 18
29350: PPUSH
29351: LD_INT 22
29353: PUSH
29354: LD_VAR 0 16
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 2
29365: PUSH
29366: LD_INT 30
29368: PUSH
29369: LD_INT 6
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 30
29378: PUSH
29379: LD_INT 7
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 30
29388: PUSH
29389: LD_INT 8
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PPUSH
29406: CALL_OW 72
29410: ST_TO_ADDR
29411: GO 29414
29413: POP
// if i = 1 then
29414: LD_VAR 0 8
29418: PUSH
29419: LD_INT 1
29421: EQUAL
29422: IFFALSE 29533
// begin tmp := [ ] ;
29424: LD_ADDR_VAR 0 19
29428: PUSH
29429: EMPTY
29430: ST_TO_ADDR
// for j in f do
29431: LD_ADDR_VAR 0 9
29435: PUSH
29436: LD_VAR 0 12
29440: PUSH
29441: FOR_IN
29442: IFFALSE 29515
// if GetBType ( j ) = b_bunker then
29444: LD_VAR 0 9
29448: PPUSH
29449: CALL_OW 266
29453: PUSH
29454: LD_INT 32
29456: EQUAL
29457: IFFALSE 29484
// tmp := Insert ( tmp , 1 , j ) else
29459: LD_ADDR_VAR 0 19
29463: PUSH
29464: LD_VAR 0 19
29468: PPUSH
29469: LD_INT 1
29471: PPUSH
29472: LD_VAR 0 9
29476: PPUSH
29477: CALL_OW 2
29481: ST_TO_ADDR
29482: GO 29513
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29484: LD_ADDR_VAR 0 19
29488: PUSH
29489: LD_VAR 0 19
29493: PPUSH
29494: LD_VAR 0 19
29498: PUSH
29499: LD_INT 1
29501: PLUS
29502: PPUSH
29503: LD_VAR 0 9
29507: PPUSH
29508: CALL_OW 2
29512: ST_TO_ADDR
29513: GO 29441
29515: POP
29516: POP
// if tmp then
29517: LD_VAR 0 19
29521: IFFALSE 29533
// f := tmp ;
29523: LD_ADDR_VAR 0 12
29527: PUSH
29528: LD_VAR 0 19
29532: ST_TO_ADDR
// end ; x := personel [ i ] ;
29533: LD_ADDR_VAR 0 13
29537: PUSH
29538: LD_VAR 0 6
29542: PUSH
29543: LD_VAR 0 8
29547: ARRAY
29548: ST_TO_ADDR
// if x = - 1 then
29549: LD_VAR 0 13
29553: PUSH
29554: LD_INT 1
29556: NEG
29557: EQUAL
29558: IFFALSE 29767
// begin for j in f do
29560: LD_ADDR_VAR 0 9
29564: PUSH
29565: LD_VAR 0 12
29569: PUSH
29570: FOR_IN
29571: IFFALSE 29763
// repeat InitHc ;
29573: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29577: LD_VAR 0 9
29581: PPUSH
29582: CALL_OW 266
29586: PUSH
29587: LD_INT 5
29589: EQUAL
29590: IFFALSE 29660
// begin if UnitsInside ( j ) < 3 then
29592: LD_VAR 0 9
29596: PPUSH
29597: CALL_OW 313
29601: PUSH
29602: LD_INT 3
29604: LESS
29605: IFFALSE 29641
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29607: LD_INT 0
29609: PPUSH
29610: LD_INT 5
29612: PUSH
29613: LD_INT 8
29615: PUSH
29616: LD_INT 9
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: PUSH
29624: LD_VAR 0 17
29628: ARRAY
29629: PPUSH
29630: LD_VAR 0 4
29634: PPUSH
29635: CALL_OW 380
29639: GO 29658
// PrepareHuman ( false , i , skill ) ;
29641: LD_INT 0
29643: PPUSH
29644: LD_VAR 0 8
29648: PPUSH
29649: LD_VAR 0 4
29653: PPUSH
29654: CALL_OW 380
// end else
29658: GO 29677
// PrepareHuman ( false , i , skill ) ;
29660: LD_INT 0
29662: PPUSH
29663: LD_VAR 0 8
29667: PPUSH
29668: LD_VAR 0 4
29672: PPUSH
29673: CALL_OW 380
// un := CreateHuman ;
29677: LD_ADDR_VAR 0 14
29681: PUSH
29682: CALL_OW 44
29686: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29687: LD_ADDR_VAR 0 7
29691: PUSH
29692: LD_VAR 0 7
29696: PPUSH
29697: LD_INT 1
29699: PPUSH
29700: LD_VAR 0 14
29704: PPUSH
29705: CALL_OW 2
29709: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29710: LD_VAR 0 14
29714: PPUSH
29715: LD_VAR 0 9
29719: PPUSH
29720: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29724: LD_VAR 0 9
29728: PPUSH
29729: CALL_OW 313
29733: PUSH
29734: LD_INT 6
29736: EQUAL
29737: PUSH
29738: LD_VAR 0 9
29742: PPUSH
29743: CALL_OW 266
29747: PUSH
29748: LD_INT 32
29750: PUSH
29751: LD_INT 31
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: IN
29758: OR
29759: IFFALSE 29573
29761: GO 29570
29763: POP
29764: POP
// end else
29765: GO 30147
// for j = 1 to x do
29767: LD_ADDR_VAR 0 9
29771: PUSH
29772: DOUBLE
29773: LD_INT 1
29775: DEC
29776: ST_TO_ADDR
29777: LD_VAR 0 13
29781: PUSH
29782: FOR_TO
29783: IFFALSE 30145
// begin InitHc ;
29785: CALL_OW 19
// if not f then
29789: LD_VAR 0 12
29793: NOT
29794: IFFALSE 29883
// begin PrepareHuman ( false , i , skill ) ;
29796: LD_INT 0
29798: PPUSH
29799: LD_VAR 0 8
29803: PPUSH
29804: LD_VAR 0 4
29808: PPUSH
29809: CALL_OW 380
// un := CreateHuman ;
29813: LD_ADDR_VAR 0 14
29817: PUSH
29818: CALL_OW 44
29822: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29823: LD_ADDR_VAR 0 7
29827: PUSH
29828: LD_VAR 0 7
29832: PPUSH
29833: LD_INT 1
29835: PPUSH
29836: LD_VAR 0 14
29840: PPUSH
29841: CALL_OW 2
29845: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29846: LD_VAR 0 14
29850: PPUSH
29851: LD_VAR 0 1
29855: PPUSH
29856: CALL_OW 250
29860: PPUSH
29861: LD_VAR 0 1
29865: PPUSH
29866: CALL_OW 251
29870: PPUSH
29871: LD_INT 10
29873: PPUSH
29874: LD_INT 0
29876: PPUSH
29877: CALL_OW 50
// continue ;
29881: GO 29782
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29883: LD_VAR 0 12
29887: PUSH
29888: LD_INT 1
29890: ARRAY
29891: PPUSH
29892: CALL_OW 313
29896: PUSH
29897: LD_VAR 0 12
29901: PUSH
29902: LD_INT 1
29904: ARRAY
29905: PPUSH
29906: CALL_OW 266
29910: PUSH
29911: LD_INT 32
29913: PUSH
29914: LD_INT 31
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: IN
29921: AND
29922: PUSH
29923: LD_VAR 0 12
29927: PUSH
29928: LD_INT 1
29930: ARRAY
29931: PPUSH
29932: CALL_OW 313
29936: PUSH
29937: LD_INT 6
29939: EQUAL
29940: OR
29941: IFFALSE 29961
// f := Delete ( f , 1 ) ;
29943: LD_ADDR_VAR 0 12
29947: PUSH
29948: LD_VAR 0 12
29952: PPUSH
29953: LD_INT 1
29955: PPUSH
29956: CALL_OW 3
29960: ST_TO_ADDR
// if not f then
29961: LD_VAR 0 12
29965: NOT
29966: IFFALSE 29984
// begin x := x + 2 ;
29968: LD_ADDR_VAR 0 13
29972: PUSH
29973: LD_VAR 0 13
29977: PUSH
29978: LD_INT 2
29980: PLUS
29981: ST_TO_ADDR
// continue ;
29982: GO 29782
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29984: LD_VAR 0 12
29988: PUSH
29989: LD_INT 1
29991: ARRAY
29992: PPUSH
29993: CALL_OW 266
29997: PUSH
29998: LD_INT 5
30000: EQUAL
30001: IFFALSE 30075
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30003: LD_VAR 0 12
30007: PUSH
30008: LD_INT 1
30010: ARRAY
30011: PPUSH
30012: CALL_OW 313
30016: PUSH
30017: LD_INT 3
30019: LESS
30020: IFFALSE 30056
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30022: LD_INT 0
30024: PPUSH
30025: LD_INT 5
30027: PUSH
30028: LD_INT 8
30030: PUSH
30031: LD_INT 9
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: LIST
30038: PUSH
30039: LD_VAR 0 17
30043: ARRAY
30044: PPUSH
30045: LD_VAR 0 4
30049: PPUSH
30050: CALL_OW 380
30054: GO 30073
// PrepareHuman ( false , i , skill ) ;
30056: LD_INT 0
30058: PPUSH
30059: LD_VAR 0 8
30063: PPUSH
30064: LD_VAR 0 4
30068: PPUSH
30069: CALL_OW 380
// end else
30073: GO 30092
// PrepareHuman ( false , i , skill ) ;
30075: LD_INT 0
30077: PPUSH
30078: LD_VAR 0 8
30082: PPUSH
30083: LD_VAR 0 4
30087: PPUSH
30088: CALL_OW 380
// un := CreateHuman ;
30092: LD_ADDR_VAR 0 14
30096: PUSH
30097: CALL_OW 44
30101: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30102: LD_ADDR_VAR 0 7
30106: PUSH
30107: LD_VAR 0 7
30111: PPUSH
30112: LD_INT 1
30114: PPUSH
30115: LD_VAR 0 14
30119: PPUSH
30120: CALL_OW 2
30124: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30125: LD_VAR 0 14
30129: PPUSH
30130: LD_VAR 0 12
30134: PUSH
30135: LD_INT 1
30137: ARRAY
30138: PPUSH
30139: CALL_OW 52
// end ;
30143: GO 29782
30145: POP
30146: POP
// end ;
30147: GO 29084
30149: POP
30150: POP
// result := result ^ buildings ;
30151: LD_ADDR_VAR 0 7
30155: PUSH
30156: LD_VAR 0 7
30160: PUSH
30161: LD_VAR 0 18
30165: ADD
30166: ST_TO_ADDR
// end else
30167: GO 30310
// begin for i = 1 to personel do
30169: LD_ADDR_VAR 0 8
30173: PUSH
30174: DOUBLE
30175: LD_INT 1
30177: DEC
30178: ST_TO_ADDR
30179: LD_VAR 0 6
30183: PUSH
30184: FOR_TO
30185: IFFALSE 30308
// begin if i > 4 then
30187: LD_VAR 0 8
30191: PUSH
30192: LD_INT 4
30194: GREATER
30195: IFFALSE 30199
// break ;
30197: GO 30308
// x := personel [ i ] ;
30199: LD_ADDR_VAR 0 13
30203: PUSH
30204: LD_VAR 0 6
30208: PUSH
30209: LD_VAR 0 8
30213: ARRAY
30214: ST_TO_ADDR
// if x = - 1 then
30215: LD_VAR 0 13
30219: PUSH
30220: LD_INT 1
30222: NEG
30223: EQUAL
30224: IFFALSE 30228
// continue ;
30226: GO 30184
// PrepareHuman ( false , i , skill ) ;
30228: LD_INT 0
30230: PPUSH
30231: LD_VAR 0 8
30235: PPUSH
30236: LD_VAR 0 4
30240: PPUSH
30241: CALL_OW 380
// un := CreateHuman ;
30245: LD_ADDR_VAR 0 14
30249: PUSH
30250: CALL_OW 44
30254: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30255: LD_VAR 0 14
30259: PPUSH
30260: LD_VAR 0 1
30264: PPUSH
30265: CALL_OW 250
30269: PPUSH
30270: LD_VAR 0 1
30274: PPUSH
30275: CALL_OW 251
30279: PPUSH
30280: LD_INT 10
30282: PPUSH
30283: LD_INT 0
30285: PPUSH
30286: CALL_OW 50
// result := result ^ un ;
30290: LD_ADDR_VAR 0 7
30294: PUSH
30295: LD_VAR 0 7
30299: PUSH
30300: LD_VAR 0 14
30304: ADD
30305: ST_TO_ADDR
// end ;
30306: GO 30184
30308: POP
30309: POP
// end ; end ;
30310: LD_VAR 0 7
30314: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30315: LD_INT 0
30317: PPUSH
30318: PPUSH
30319: PPUSH
30320: PPUSH
30321: PPUSH
30322: PPUSH
30323: PPUSH
30324: PPUSH
30325: PPUSH
30326: PPUSH
30327: PPUSH
30328: PPUSH
30329: PPUSH
30330: PPUSH
30331: PPUSH
30332: PPUSH
// result := false ;
30333: LD_ADDR_VAR 0 3
30337: PUSH
30338: LD_INT 0
30340: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30341: LD_VAR 0 1
30345: NOT
30346: PUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL_OW 266
30356: PUSH
30357: LD_INT 32
30359: PUSH
30360: LD_INT 33
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: IN
30367: NOT
30368: OR
30369: IFFALSE 30373
// exit ;
30371: GO 31509
// nat := GetNation ( tower ) ;
30373: LD_ADDR_VAR 0 12
30377: PUSH
30378: LD_VAR 0 1
30382: PPUSH
30383: CALL_OW 248
30387: ST_TO_ADDR
// side := GetSide ( tower ) ;
30388: LD_ADDR_VAR 0 16
30392: PUSH
30393: LD_VAR 0 1
30397: PPUSH
30398: CALL_OW 255
30402: ST_TO_ADDR
// x := GetX ( tower ) ;
30403: LD_ADDR_VAR 0 10
30407: PUSH
30408: LD_VAR 0 1
30412: PPUSH
30413: CALL_OW 250
30417: ST_TO_ADDR
// y := GetY ( tower ) ;
30418: LD_ADDR_VAR 0 11
30422: PUSH
30423: LD_VAR 0 1
30427: PPUSH
30428: CALL_OW 251
30432: ST_TO_ADDR
// if not x or not y then
30433: LD_VAR 0 10
30437: NOT
30438: PUSH
30439: LD_VAR 0 11
30443: NOT
30444: OR
30445: IFFALSE 30449
// exit ;
30447: GO 31509
// weapon := 0 ;
30449: LD_ADDR_VAR 0 18
30453: PUSH
30454: LD_INT 0
30456: ST_TO_ADDR
// fac_list := [ ] ;
30457: LD_ADDR_VAR 0 17
30461: PUSH
30462: EMPTY
30463: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
30464: LD_ADDR_VAR 0 6
30468: PUSH
30469: LD_VAR 0 1
30473: PPUSH
30474: CALL_OW 274
30478: PPUSH
30479: LD_VAR 0 2
30483: PPUSH
30484: CALL 28087 0 2
30488: PPUSH
30489: LD_INT 30
30491: PUSH
30492: LD_INT 3
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PPUSH
30499: CALL_OW 72
30503: ST_TO_ADDR
// if not factories then
30504: LD_VAR 0 6
30508: NOT
30509: IFFALSE 30513
// exit ;
30511: GO 31509
// for i in factories do
30513: LD_ADDR_VAR 0 8
30517: PUSH
30518: LD_VAR 0 6
30522: PUSH
30523: FOR_IN
30524: IFFALSE 30549
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30526: LD_ADDR_VAR 0 17
30530: PUSH
30531: LD_VAR 0 17
30535: PUSH
30536: LD_VAR 0 8
30540: PPUSH
30541: CALL_OW 478
30545: UNION
30546: ST_TO_ADDR
30547: GO 30523
30549: POP
30550: POP
// if not fac_list then
30551: LD_VAR 0 17
30555: NOT
30556: IFFALSE 30560
// exit ;
30558: GO 31509
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30560: LD_ADDR_VAR 0 5
30564: PUSH
30565: LD_INT 4
30567: PUSH
30568: LD_INT 5
30570: PUSH
30571: LD_INT 9
30573: PUSH
30574: LD_INT 10
30576: PUSH
30577: LD_INT 6
30579: PUSH
30580: LD_INT 7
30582: PUSH
30583: LD_INT 11
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 27
30597: PUSH
30598: LD_INT 28
30600: PUSH
30601: LD_INT 26
30603: PUSH
30604: LD_INT 30
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 43
30615: PUSH
30616: LD_INT 44
30618: PUSH
30619: LD_INT 46
30621: PUSH
30622: LD_INT 45
30624: PUSH
30625: LD_INT 47
30627: PUSH
30628: LD_INT 49
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: PUSH
30644: LD_VAR 0 12
30648: ARRAY
30649: ST_TO_ADDR
// for i in list do
30650: LD_ADDR_VAR 0 8
30654: PUSH
30655: LD_VAR 0 5
30659: PUSH
30660: FOR_IN
30661: IFFALSE 30694
// if not i in fac_list then
30663: LD_VAR 0 8
30667: PUSH
30668: LD_VAR 0 17
30672: IN
30673: NOT
30674: IFFALSE 30692
// list := list diff i ;
30676: LD_ADDR_VAR 0 5
30680: PUSH
30681: LD_VAR 0 5
30685: PUSH
30686: LD_VAR 0 8
30690: DIFF
30691: ST_TO_ADDR
30692: GO 30660
30694: POP
30695: POP
// if not list then
30696: LD_VAR 0 5
30700: NOT
30701: IFFALSE 30705
// exit ;
30703: GO 31509
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30705: LD_VAR 0 12
30709: PUSH
30710: LD_INT 3
30712: EQUAL
30713: PUSH
30714: LD_INT 49
30716: PUSH
30717: LD_VAR 0 5
30721: IN
30722: AND
30723: PUSH
30724: LD_INT 31
30726: PPUSH
30727: LD_VAR 0 16
30731: PPUSH
30732: CALL_OW 321
30736: PUSH
30737: LD_INT 2
30739: EQUAL
30740: AND
30741: IFFALSE 30801
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30743: LD_INT 22
30745: PUSH
30746: LD_VAR 0 16
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 35
30757: PUSH
30758: LD_INT 49
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 91
30767: PUSH
30768: LD_VAR 0 1
30772: PUSH
30773: LD_INT 10
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: LIST
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: LIST
30785: PPUSH
30786: CALL_OW 69
30790: NOT
30791: IFFALSE 30801
// weapon := ru_time_lapser ;
30793: LD_ADDR_VAR 0 18
30797: PUSH
30798: LD_INT 49
30800: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30801: LD_VAR 0 12
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: IN
30816: PUSH
30817: LD_INT 11
30819: PUSH
30820: LD_VAR 0 5
30824: IN
30825: PUSH
30826: LD_INT 30
30828: PUSH
30829: LD_VAR 0 5
30833: IN
30834: OR
30835: AND
30836: PUSH
30837: LD_INT 6
30839: PPUSH
30840: LD_VAR 0 16
30844: PPUSH
30845: CALL_OW 321
30849: PUSH
30850: LD_INT 2
30852: EQUAL
30853: AND
30854: IFFALSE 31019
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30856: LD_INT 22
30858: PUSH
30859: LD_VAR 0 16
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 2
30870: PUSH
30871: LD_INT 35
30873: PUSH
30874: LD_INT 11
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 35
30883: PUSH
30884: LD_INT 30
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 91
30898: PUSH
30899: LD_VAR 0 1
30903: PUSH
30904: LD_INT 18
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: LIST
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: LIST
30916: PPUSH
30917: CALL_OW 69
30921: NOT
30922: PUSH
30923: LD_INT 22
30925: PUSH
30926: LD_VAR 0 16
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 2
30937: PUSH
30938: LD_INT 30
30940: PUSH
30941: LD_INT 32
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 30
30950: PUSH
30951: LD_INT 33
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 91
30965: PUSH
30966: LD_VAR 0 1
30970: PUSH
30971: LD_INT 12
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: PUSH
30984: EMPTY
30985: LIST
30986: PPUSH
30987: CALL_OW 69
30991: PUSH
30992: LD_INT 2
30994: GREATER
30995: AND
30996: IFFALSE 31019
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30998: LD_ADDR_VAR 0 18
31002: PUSH
31003: LD_INT 11
31005: PUSH
31006: LD_INT 30
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_VAR 0 12
31017: ARRAY
31018: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31019: LD_VAR 0 18
31023: NOT
31024: PUSH
31025: LD_INT 40
31027: PPUSH
31028: LD_VAR 0 16
31032: PPUSH
31033: CALL_OW 321
31037: PUSH
31038: LD_INT 2
31040: EQUAL
31041: AND
31042: PUSH
31043: LD_INT 7
31045: PUSH
31046: LD_VAR 0 5
31050: IN
31051: PUSH
31052: LD_INT 28
31054: PUSH
31055: LD_VAR 0 5
31059: IN
31060: OR
31061: PUSH
31062: LD_INT 45
31064: PUSH
31065: LD_VAR 0 5
31069: IN
31070: OR
31071: AND
31072: IFFALSE 31326
// begin hex := GetHexInfo ( x , y ) ;
31074: LD_ADDR_VAR 0 4
31078: PUSH
31079: LD_VAR 0 10
31083: PPUSH
31084: LD_VAR 0 11
31088: PPUSH
31089: CALL_OW 546
31093: ST_TO_ADDR
// if hex [ 1 ] then
31094: LD_VAR 0 4
31098: PUSH
31099: LD_INT 1
31101: ARRAY
31102: IFFALSE 31106
// exit ;
31104: GO 31509
// height := hex [ 2 ] ;
31106: LD_ADDR_VAR 0 15
31110: PUSH
31111: LD_VAR 0 4
31115: PUSH
31116: LD_INT 2
31118: ARRAY
31119: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31120: LD_ADDR_VAR 0 14
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: LD_INT 3
31133: PUSH
31134: LD_INT 5
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: ST_TO_ADDR
// for i in tmp do
31143: LD_ADDR_VAR 0 8
31147: PUSH
31148: LD_VAR 0 14
31152: PUSH
31153: FOR_IN
31154: IFFALSE 31324
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31156: LD_ADDR_VAR 0 9
31160: PUSH
31161: LD_VAR 0 10
31165: PPUSH
31166: LD_VAR 0 8
31170: PPUSH
31171: LD_INT 5
31173: PPUSH
31174: CALL_OW 272
31178: PUSH
31179: LD_VAR 0 11
31183: PPUSH
31184: LD_VAR 0 8
31188: PPUSH
31189: LD_INT 5
31191: PPUSH
31192: CALL_OW 273
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31201: LD_VAR 0 9
31205: PUSH
31206: LD_INT 1
31208: ARRAY
31209: PPUSH
31210: LD_VAR 0 9
31214: PUSH
31215: LD_INT 2
31217: ARRAY
31218: PPUSH
31219: CALL_OW 488
31223: IFFALSE 31322
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31225: LD_ADDR_VAR 0 4
31229: PUSH
31230: LD_VAR 0 9
31234: PUSH
31235: LD_INT 1
31237: ARRAY
31238: PPUSH
31239: LD_VAR 0 9
31243: PUSH
31244: LD_INT 2
31246: ARRAY
31247: PPUSH
31248: CALL_OW 546
31252: ST_TO_ADDR
// if hex [ 1 ] then
31253: LD_VAR 0 4
31257: PUSH
31258: LD_INT 1
31260: ARRAY
31261: IFFALSE 31265
// continue ;
31263: GO 31153
// h := hex [ 2 ] ;
31265: LD_ADDR_VAR 0 13
31269: PUSH
31270: LD_VAR 0 4
31274: PUSH
31275: LD_INT 2
31277: ARRAY
31278: ST_TO_ADDR
// if h + 7 < height then
31279: LD_VAR 0 13
31283: PUSH
31284: LD_INT 7
31286: PLUS
31287: PUSH
31288: LD_VAR 0 15
31292: LESS
31293: IFFALSE 31322
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31295: LD_ADDR_VAR 0 18
31299: PUSH
31300: LD_INT 7
31302: PUSH
31303: LD_INT 28
31305: PUSH
31306: LD_INT 45
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: LIST
31313: PUSH
31314: LD_VAR 0 12
31318: ARRAY
31319: ST_TO_ADDR
// break ;
31320: GO 31324
// end ; end ; end ;
31322: GO 31153
31324: POP
31325: POP
// end ; if not weapon then
31326: LD_VAR 0 18
31330: NOT
31331: IFFALSE 31391
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31333: LD_ADDR_VAR 0 5
31337: PUSH
31338: LD_VAR 0 5
31342: PUSH
31343: LD_INT 11
31345: PUSH
31346: LD_INT 30
31348: PUSH
31349: LD_INT 49
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: LIST
31356: DIFF
31357: ST_TO_ADDR
// if not list then
31358: LD_VAR 0 5
31362: NOT
31363: IFFALSE 31367
// exit ;
31365: GO 31509
// weapon := list [ rand ( 1 , list ) ] ;
31367: LD_ADDR_VAR 0 18
31371: PUSH
31372: LD_VAR 0 5
31376: PUSH
31377: LD_INT 1
31379: PPUSH
31380: LD_VAR 0 5
31384: PPUSH
31385: CALL_OW 12
31389: ARRAY
31390: ST_TO_ADDR
// end ; if weapon then
31391: LD_VAR 0 18
31395: IFFALSE 31509
// begin tmp := CostOfWeapon ( weapon ) ;
31397: LD_ADDR_VAR 0 14
31401: PUSH
31402: LD_VAR 0 18
31406: PPUSH
31407: CALL_OW 451
31411: ST_TO_ADDR
// j := GetBase ( tower ) ;
31412: LD_ADDR_VAR 0 9
31416: PUSH
31417: LD_VAR 0 1
31421: PPUSH
31422: CALL_OW 274
31426: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31427: LD_VAR 0 9
31431: PPUSH
31432: LD_INT 1
31434: PPUSH
31435: CALL_OW 275
31439: PUSH
31440: LD_VAR 0 14
31444: PUSH
31445: LD_INT 1
31447: ARRAY
31448: GREATEREQUAL
31449: PUSH
31450: LD_VAR 0 9
31454: PPUSH
31455: LD_INT 2
31457: PPUSH
31458: CALL_OW 275
31462: PUSH
31463: LD_VAR 0 14
31467: PUSH
31468: LD_INT 2
31470: ARRAY
31471: GREATEREQUAL
31472: AND
31473: PUSH
31474: LD_VAR 0 9
31478: PPUSH
31479: LD_INT 3
31481: PPUSH
31482: CALL_OW 275
31486: PUSH
31487: LD_VAR 0 14
31491: PUSH
31492: LD_INT 3
31494: ARRAY
31495: GREATEREQUAL
31496: AND
31497: IFFALSE 31509
// result := weapon ;
31499: LD_ADDR_VAR 0 3
31503: PUSH
31504: LD_VAR 0 18
31508: ST_TO_ADDR
// end ; end ;
31509: LD_VAR 0 3
31513: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31514: LD_INT 0
31516: PPUSH
31517: PPUSH
// result := true ;
31518: LD_ADDR_VAR 0 3
31522: PUSH
31523: LD_INT 1
31525: ST_TO_ADDR
// if array1 = array2 then
31526: LD_VAR 0 1
31530: PUSH
31531: LD_VAR 0 2
31535: EQUAL
31536: IFFALSE 31596
// begin for i = 1 to array1 do
31538: LD_ADDR_VAR 0 4
31542: PUSH
31543: DOUBLE
31544: LD_INT 1
31546: DEC
31547: ST_TO_ADDR
31548: LD_VAR 0 1
31552: PUSH
31553: FOR_TO
31554: IFFALSE 31592
// if array1 [ i ] <> array2 [ i ] then
31556: LD_VAR 0 1
31560: PUSH
31561: LD_VAR 0 4
31565: ARRAY
31566: PUSH
31567: LD_VAR 0 2
31571: PUSH
31572: LD_VAR 0 4
31576: ARRAY
31577: NONEQUAL
31578: IFFALSE 31590
// begin result := false ;
31580: LD_ADDR_VAR 0 3
31584: PUSH
31585: LD_INT 0
31587: ST_TO_ADDR
// break ;
31588: GO 31592
// end ;
31590: GO 31553
31592: POP
31593: POP
// end else
31594: GO 31604
// result := false ;
31596: LD_ADDR_VAR 0 3
31600: PUSH
31601: LD_INT 0
31603: ST_TO_ADDR
// end ;
31604: LD_VAR 0 3
31608: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31609: LD_INT 0
31611: PPUSH
31612: PPUSH
31613: PPUSH
// pom := GetBase ( fac ) ;
31614: LD_ADDR_VAR 0 5
31618: PUSH
31619: LD_VAR 0 1
31623: PPUSH
31624: CALL_OW 274
31628: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31629: LD_ADDR_VAR 0 4
31633: PUSH
31634: LD_VAR 0 2
31638: PUSH
31639: LD_INT 1
31641: ARRAY
31642: PPUSH
31643: LD_VAR 0 2
31647: PUSH
31648: LD_INT 2
31650: ARRAY
31651: PPUSH
31652: LD_VAR 0 2
31656: PUSH
31657: LD_INT 3
31659: ARRAY
31660: PPUSH
31661: LD_VAR 0 2
31665: PUSH
31666: LD_INT 4
31668: ARRAY
31669: PPUSH
31670: CALL_OW 449
31674: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31675: LD_ADDR_VAR 0 3
31679: PUSH
31680: LD_VAR 0 5
31684: PPUSH
31685: LD_INT 1
31687: PPUSH
31688: CALL_OW 275
31692: PUSH
31693: LD_VAR 0 4
31697: PUSH
31698: LD_INT 1
31700: ARRAY
31701: GREATEREQUAL
31702: PUSH
31703: LD_VAR 0 5
31707: PPUSH
31708: LD_INT 2
31710: PPUSH
31711: CALL_OW 275
31715: PUSH
31716: LD_VAR 0 4
31720: PUSH
31721: LD_INT 2
31723: ARRAY
31724: GREATEREQUAL
31725: AND
31726: PUSH
31727: LD_VAR 0 5
31731: PPUSH
31732: LD_INT 3
31734: PPUSH
31735: CALL_OW 275
31739: PUSH
31740: LD_VAR 0 4
31744: PUSH
31745: LD_INT 3
31747: ARRAY
31748: GREATEREQUAL
31749: AND
31750: ST_TO_ADDR
// end ;
31751: LD_VAR 0 3
31755: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31756: LD_INT 0
31758: PPUSH
31759: PPUSH
31760: PPUSH
31761: PPUSH
// pom := GetBase ( building ) ;
31762: LD_ADDR_VAR 0 3
31766: PUSH
31767: LD_VAR 0 1
31771: PPUSH
31772: CALL_OW 274
31776: ST_TO_ADDR
// if not pom then
31777: LD_VAR 0 3
31781: NOT
31782: IFFALSE 31786
// exit ;
31784: GO 31956
// btype := GetBType ( building ) ;
31786: LD_ADDR_VAR 0 5
31790: PUSH
31791: LD_VAR 0 1
31795: PPUSH
31796: CALL_OW 266
31800: ST_TO_ADDR
// if btype = b_armoury then
31801: LD_VAR 0 5
31805: PUSH
31806: LD_INT 4
31808: EQUAL
31809: IFFALSE 31819
// btype := b_barracks ;
31811: LD_ADDR_VAR 0 5
31815: PUSH
31816: LD_INT 5
31818: ST_TO_ADDR
// if btype = b_depot then
31819: LD_VAR 0 5
31823: PUSH
31824: LD_INT 0
31826: EQUAL
31827: IFFALSE 31837
// btype := b_warehouse ;
31829: LD_ADDR_VAR 0 5
31833: PUSH
31834: LD_INT 1
31836: ST_TO_ADDR
// if btype = b_workshop then
31837: LD_VAR 0 5
31841: PUSH
31842: LD_INT 2
31844: EQUAL
31845: IFFALSE 31855
// btype := b_factory ;
31847: LD_ADDR_VAR 0 5
31851: PUSH
31852: LD_INT 3
31854: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31855: LD_ADDR_VAR 0 4
31859: PUSH
31860: LD_VAR 0 5
31864: PPUSH
31865: LD_VAR 0 1
31869: PPUSH
31870: CALL_OW 248
31874: PPUSH
31875: CALL_OW 450
31879: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31880: LD_ADDR_VAR 0 2
31884: PUSH
31885: LD_VAR 0 3
31889: PPUSH
31890: LD_INT 1
31892: PPUSH
31893: CALL_OW 275
31897: PUSH
31898: LD_VAR 0 4
31902: PUSH
31903: LD_INT 1
31905: ARRAY
31906: GREATEREQUAL
31907: PUSH
31908: LD_VAR 0 3
31912: PPUSH
31913: LD_INT 2
31915: PPUSH
31916: CALL_OW 275
31920: PUSH
31921: LD_VAR 0 4
31925: PUSH
31926: LD_INT 2
31928: ARRAY
31929: GREATEREQUAL
31930: AND
31931: PUSH
31932: LD_VAR 0 3
31936: PPUSH
31937: LD_INT 3
31939: PPUSH
31940: CALL_OW 275
31944: PUSH
31945: LD_VAR 0 4
31949: PUSH
31950: LD_INT 3
31952: ARRAY
31953: GREATEREQUAL
31954: AND
31955: ST_TO_ADDR
// end ;
31956: LD_VAR 0 2
31960: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31961: LD_INT 0
31963: PPUSH
31964: PPUSH
31965: PPUSH
// pom := GetBase ( building ) ;
31966: LD_ADDR_VAR 0 4
31970: PUSH
31971: LD_VAR 0 1
31975: PPUSH
31976: CALL_OW 274
31980: ST_TO_ADDR
// if not pom then
31981: LD_VAR 0 4
31985: NOT
31986: IFFALSE 31990
// exit ;
31988: GO 32091
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31990: LD_ADDR_VAR 0 5
31994: PUSH
31995: LD_VAR 0 2
31999: PPUSH
32000: LD_VAR 0 1
32004: PPUSH
32005: CALL_OW 248
32009: PPUSH
32010: CALL_OW 450
32014: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32015: LD_ADDR_VAR 0 3
32019: PUSH
32020: LD_VAR 0 4
32024: PPUSH
32025: LD_INT 1
32027: PPUSH
32028: CALL_OW 275
32032: PUSH
32033: LD_VAR 0 5
32037: PUSH
32038: LD_INT 1
32040: ARRAY
32041: GREATEREQUAL
32042: PUSH
32043: LD_VAR 0 4
32047: PPUSH
32048: LD_INT 2
32050: PPUSH
32051: CALL_OW 275
32055: PUSH
32056: LD_VAR 0 5
32060: PUSH
32061: LD_INT 2
32063: ARRAY
32064: GREATEREQUAL
32065: AND
32066: PUSH
32067: LD_VAR 0 4
32071: PPUSH
32072: LD_INT 3
32074: PPUSH
32075: CALL_OW 275
32079: PUSH
32080: LD_VAR 0 5
32084: PUSH
32085: LD_INT 3
32087: ARRAY
32088: GREATEREQUAL
32089: AND
32090: ST_TO_ADDR
// end ;
32091: LD_VAR 0 3
32095: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32096: LD_INT 0
32098: PPUSH
32099: PPUSH
32100: PPUSH
32101: PPUSH
32102: PPUSH
32103: PPUSH
32104: PPUSH
32105: PPUSH
32106: PPUSH
32107: PPUSH
// result := false ;
32108: LD_ADDR_VAR 0 6
32112: PUSH
32113: LD_INT 0
32115: ST_TO_ADDR
// if not base or not btype or not x or not y then
32116: LD_VAR 0 1
32120: NOT
32121: PUSH
32122: LD_VAR 0 2
32126: NOT
32127: OR
32128: PUSH
32129: LD_VAR 0 3
32133: NOT
32134: OR
32135: PUSH
32136: LD_VAR 0 4
32140: NOT
32141: OR
32142: IFFALSE 32146
// exit ;
32144: GO 32755
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32146: LD_ADDR_VAR 0 12
32150: PUSH
32151: LD_VAR 0 2
32155: PPUSH
32156: LD_VAR 0 3
32160: PPUSH
32161: LD_VAR 0 4
32165: PPUSH
32166: LD_VAR 0 5
32170: PPUSH
32171: LD_VAR 0 1
32175: PUSH
32176: LD_INT 1
32178: ARRAY
32179: PPUSH
32180: CALL_OW 248
32184: PPUSH
32185: LD_INT 0
32187: PPUSH
32188: CALL 33592 0 6
32192: ST_TO_ADDR
// if not hexes then
32193: LD_VAR 0 12
32197: NOT
32198: IFFALSE 32202
// exit ;
32200: GO 32755
// for i = 1 to hexes do
32202: LD_ADDR_VAR 0 7
32206: PUSH
32207: DOUBLE
32208: LD_INT 1
32210: DEC
32211: ST_TO_ADDR
32212: LD_VAR 0 12
32216: PUSH
32217: FOR_TO
32218: IFFALSE 32753
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32220: LD_ADDR_VAR 0 11
32224: PUSH
32225: LD_VAR 0 12
32229: PUSH
32230: LD_VAR 0 7
32234: ARRAY
32235: PUSH
32236: LD_INT 1
32238: ARRAY
32239: PPUSH
32240: LD_VAR 0 12
32244: PUSH
32245: LD_VAR 0 7
32249: ARRAY
32250: PUSH
32251: LD_INT 2
32253: ARRAY
32254: PPUSH
32255: CALL_OW 428
32259: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32260: LD_VAR 0 12
32264: PUSH
32265: LD_VAR 0 7
32269: ARRAY
32270: PUSH
32271: LD_INT 1
32273: ARRAY
32274: PPUSH
32275: LD_VAR 0 12
32279: PUSH
32280: LD_VAR 0 7
32284: ARRAY
32285: PUSH
32286: LD_INT 2
32288: ARRAY
32289: PPUSH
32290: CALL_OW 351
32294: PUSH
32295: LD_VAR 0 12
32299: PUSH
32300: LD_VAR 0 7
32304: ARRAY
32305: PUSH
32306: LD_INT 1
32308: ARRAY
32309: PPUSH
32310: LD_VAR 0 12
32314: PUSH
32315: LD_VAR 0 7
32319: ARRAY
32320: PUSH
32321: LD_INT 2
32323: ARRAY
32324: PPUSH
32325: CALL_OW 488
32329: NOT
32330: OR
32331: PUSH
32332: LD_VAR 0 11
32336: PPUSH
32337: CALL_OW 247
32341: PUSH
32342: LD_INT 3
32344: EQUAL
32345: OR
32346: IFFALSE 32352
// exit ;
32348: POP
32349: POP
32350: GO 32755
// if not tmp or not tmp in base then
32352: LD_VAR 0 11
32356: NOT
32357: PUSH
32358: LD_VAR 0 11
32362: PUSH
32363: LD_VAR 0 1
32367: IN
32368: NOT
32369: OR
32370: IFFALSE 32374
// continue ;
32372: GO 32217
// result := true ;
32374: LD_ADDR_VAR 0 6
32378: PUSH
32379: LD_INT 1
32381: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32382: LD_ADDR_VAR 0 15
32386: PUSH
32387: LD_VAR 0 1
32391: PPUSH
32392: LD_INT 22
32394: PUSH
32395: LD_VAR 0 11
32399: PPUSH
32400: CALL_OW 255
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 2
32411: PUSH
32412: LD_INT 30
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 30
32424: PUSH
32425: LD_INT 1
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: LIST
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PPUSH
32441: CALL_OW 72
32445: ST_TO_ADDR
// if dep then
32446: LD_VAR 0 15
32450: IFFALSE 32586
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32452: LD_ADDR_VAR 0 14
32456: PUSH
32457: LD_VAR 0 15
32461: PUSH
32462: LD_INT 1
32464: ARRAY
32465: PPUSH
32466: CALL_OW 250
32470: PPUSH
32471: LD_VAR 0 15
32475: PUSH
32476: LD_INT 1
32478: ARRAY
32479: PPUSH
32480: CALL_OW 254
32484: PPUSH
32485: LD_INT 5
32487: PPUSH
32488: CALL_OW 272
32492: PUSH
32493: LD_VAR 0 15
32497: PUSH
32498: LD_INT 1
32500: ARRAY
32501: PPUSH
32502: CALL_OW 251
32506: PPUSH
32507: LD_VAR 0 15
32511: PUSH
32512: LD_INT 1
32514: ARRAY
32515: PPUSH
32516: CALL_OW 254
32520: PPUSH
32521: LD_INT 5
32523: PPUSH
32524: CALL_OW 273
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32533: LD_VAR 0 14
32537: PUSH
32538: LD_INT 1
32540: ARRAY
32541: PPUSH
32542: LD_VAR 0 14
32546: PUSH
32547: LD_INT 2
32549: ARRAY
32550: PPUSH
32551: CALL_OW 488
32555: IFFALSE 32586
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32557: LD_VAR 0 11
32561: PPUSH
32562: LD_VAR 0 14
32566: PUSH
32567: LD_INT 1
32569: ARRAY
32570: PPUSH
32571: LD_VAR 0 14
32575: PUSH
32576: LD_INT 2
32578: ARRAY
32579: PPUSH
32580: CALL_OW 111
// continue ;
32584: GO 32217
// end ; end ; r := GetDir ( tmp ) ;
32586: LD_ADDR_VAR 0 13
32590: PUSH
32591: LD_VAR 0 11
32595: PPUSH
32596: CALL_OW 254
32600: ST_TO_ADDR
// if r = 5 then
32601: LD_VAR 0 13
32605: PUSH
32606: LD_INT 5
32608: EQUAL
32609: IFFALSE 32619
// r := 0 ;
32611: LD_ADDR_VAR 0 13
32615: PUSH
32616: LD_INT 0
32618: ST_TO_ADDR
// for j = r to 5 do
32619: LD_ADDR_VAR 0 8
32623: PUSH
32624: DOUBLE
32625: LD_VAR 0 13
32629: DEC
32630: ST_TO_ADDR
32631: LD_INT 5
32633: PUSH
32634: FOR_TO
32635: IFFALSE 32749
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32637: LD_ADDR_VAR 0 9
32641: PUSH
32642: LD_VAR 0 11
32646: PPUSH
32647: CALL_OW 250
32651: PPUSH
32652: LD_VAR 0 8
32656: PPUSH
32657: LD_INT 2
32659: PPUSH
32660: CALL_OW 272
32664: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32665: LD_ADDR_VAR 0 10
32669: PUSH
32670: LD_VAR 0 11
32674: PPUSH
32675: CALL_OW 251
32679: PPUSH
32680: LD_VAR 0 8
32684: PPUSH
32685: LD_INT 2
32687: PPUSH
32688: CALL_OW 273
32692: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32693: LD_VAR 0 9
32697: PPUSH
32698: LD_VAR 0 10
32702: PPUSH
32703: CALL_OW 488
32707: PUSH
32708: LD_VAR 0 9
32712: PPUSH
32713: LD_VAR 0 10
32717: PPUSH
32718: CALL_OW 428
32722: NOT
32723: AND
32724: IFFALSE 32747
// begin ComMoveXY ( tmp , _x , _y ) ;
32726: LD_VAR 0 11
32730: PPUSH
32731: LD_VAR 0 9
32735: PPUSH
32736: LD_VAR 0 10
32740: PPUSH
32741: CALL_OW 111
// break ;
32745: GO 32749
// end ; end ;
32747: GO 32634
32749: POP
32750: POP
// end ;
32751: GO 32217
32753: POP
32754: POP
// end ;
32755: LD_VAR 0 6
32759: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
32760: LD_INT 0
32762: PPUSH
32763: PPUSH
32764: PPUSH
32765: PPUSH
32766: PPUSH
32767: PPUSH
32768: PPUSH
32769: PPUSH
32770: PPUSH
32771: PPUSH
// result := false ;
32772: LD_ADDR_VAR 0 6
32776: PUSH
32777: LD_INT 0
32779: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32780: LD_VAR 0 1
32784: NOT
32785: PUSH
32786: LD_VAR 0 1
32790: PPUSH
32791: CALL_OW 266
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: IN
32806: NOT
32807: OR
32808: PUSH
32809: LD_VAR 0 2
32813: NOT
32814: OR
32815: PUSH
32816: LD_VAR 0 5
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: LD_INT 3
32832: PUSH
32833: LD_INT 4
32835: PUSH
32836: LD_INT 5
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: IN
32847: NOT
32848: OR
32849: PUSH
32850: LD_VAR 0 3
32854: PPUSH
32855: LD_VAR 0 4
32859: PPUSH
32860: CALL_OW 488
32864: NOT
32865: OR
32866: IFFALSE 32870
// exit ;
32868: GO 33587
// pom := GetBase ( depot ) ;
32870: LD_ADDR_VAR 0 10
32874: PUSH
32875: LD_VAR 0 1
32879: PPUSH
32880: CALL_OW 274
32884: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32885: LD_ADDR_VAR 0 11
32889: PUSH
32890: LD_VAR 0 2
32894: PPUSH
32895: LD_VAR 0 1
32899: PPUSH
32900: CALL_OW 248
32904: PPUSH
32905: CALL_OW 450
32909: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32910: LD_VAR 0 10
32914: PPUSH
32915: LD_INT 1
32917: PPUSH
32918: CALL_OW 275
32922: PUSH
32923: LD_VAR 0 11
32927: PUSH
32928: LD_INT 1
32930: ARRAY
32931: GREATEREQUAL
32932: PUSH
32933: LD_VAR 0 10
32937: PPUSH
32938: LD_INT 2
32940: PPUSH
32941: CALL_OW 275
32945: PUSH
32946: LD_VAR 0 11
32950: PUSH
32951: LD_INT 2
32953: ARRAY
32954: GREATEREQUAL
32955: AND
32956: PUSH
32957: LD_VAR 0 10
32961: PPUSH
32962: LD_INT 3
32964: PPUSH
32965: CALL_OW 275
32969: PUSH
32970: LD_VAR 0 11
32974: PUSH
32975: LD_INT 3
32977: ARRAY
32978: GREATEREQUAL
32979: AND
32980: NOT
32981: IFFALSE 32985
// exit ;
32983: GO 33587
// if GetBType ( depot ) = b_depot then
32985: LD_VAR 0 1
32989: PPUSH
32990: CALL_OW 266
32994: PUSH
32995: LD_INT 0
32997: EQUAL
32998: IFFALSE 33010
// dist := 28 else
33000: LD_ADDR_VAR 0 14
33004: PUSH
33005: LD_INT 28
33007: ST_TO_ADDR
33008: GO 33018
// dist := 36 ;
33010: LD_ADDR_VAR 0 14
33014: PUSH
33015: LD_INT 36
33017: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33018: LD_VAR 0 1
33022: PPUSH
33023: LD_VAR 0 3
33027: PPUSH
33028: LD_VAR 0 4
33032: PPUSH
33033: CALL_OW 297
33037: PUSH
33038: LD_VAR 0 14
33042: GREATER
33043: IFFALSE 33047
// exit ;
33045: GO 33587
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33047: LD_ADDR_VAR 0 12
33051: PUSH
33052: LD_VAR 0 2
33056: PPUSH
33057: LD_VAR 0 3
33061: PPUSH
33062: LD_VAR 0 4
33066: PPUSH
33067: LD_VAR 0 5
33071: PPUSH
33072: LD_VAR 0 1
33076: PPUSH
33077: CALL_OW 248
33081: PPUSH
33082: LD_INT 0
33084: PPUSH
33085: CALL 33592 0 6
33089: ST_TO_ADDR
// if not hexes then
33090: LD_VAR 0 12
33094: NOT
33095: IFFALSE 33099
// exit ;
33097: GO 33587
// hex := GetHexInfo ( x , y ) ;
33099: LD_ADDR_VAR 0 15
33103: PUSH
33104: LD_VAR 0 3
33108: PPUSH
33109: LD_VAR 0 4
33113: PPUSH
33114: CALL_OW 546
33118: ST_TO_ADDR
// if hex [ 1 ] then
33119: LD_VAR 0 15
33123: PUSH
33124: LD_INT 1
33126: ARRAY
33127: IFFALSE 33131
// exit ;
33129: GO 33587
// height := hex [ 2 ] ;
33131: LD_ADDR_VAR 0 13
33135: PUSH
33136: LD_VAR 0 15
33140: PUSH
33141: LD_INT 2
33143: ARRAY
33144: ST_TO_ADDR
// for i = 1 to hexes do
33145: LD_ADDR_VAR 0 7
33149: PUSH
33150: DOUBLE
33151: LD_INT 1
33153: DEC
33154: ST_TO_ADDR
33155: LD_VAR 0 12
33159: PUSH
33160: FOR_TO
33161: IFFALSE 33491
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33163: LD_VAR 0 12
33167: PUSH
33168: LD_VAR 0 7
33172: ARRAY
33173: PUSH
33174: LD_INT 1
33176: ARRAY
33177: PPUSH
33178: LD_VAR 0 12
33182: PUSH
33183: LD_VAR 0 7
33187: ARRAY
33188: PUSH
33189: LD_INT 2
33191: ARRAY
33192: PPUSH
33193: CALL_OW 488
33197: NOT
33198: PUSH
33199: LD_VAR 0 12
33203: PUSH
33204: LD_VAR 0 7
33208: ARRAY
33209: PUSH
33210: LD_INT 1
33212: ARRAY
33213: PPUSH
33214: LD_VAR 0 12
33218: PUSH
33219: LD_VAR 0 7
33223: ARRAY
33224: PUSH
33225: LD_INT 2
33227: ARRAY
33228: PPUSH
33229: CALL_OW 428
33233: PUSH
33234: LD_INT 0
33236: GREATER
33237: OR
33238: PUSH
33239: LD_VAR 0 12
33243: PUSH
33244: LD_VAR 0 7
33248: ARRAY
33249: PUSH
33250: LD_INT 1
33252: ARRAY
33253: PPUSH
33254: LD_VAR 0 12
33258: PUSH
33259: LD_VAR 0 7
33263: ARRAY
33264: PUSH
33265: LD_INT 2
33267: ARRAY
33268: PPUSH
33269: CALL_OW 351
33273: OR
33274: IFFALSE 33280
// exit ;
33276: POP
33277: POP
33278: GO 33587
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33280: LD_ADDR_VAR 0 8
33284: PUSH
33285: LD_VAR 0 12
33289: PUSH
33290: LD_VAR 0 7
33294: ARRAY
33295: PUSH
33296: LD_INT 1
33298: ARRAY
33299: PPUSH
33300: LD_VAR 0 12
33304: PUSH
33305: LD_VAR 0 7
33309: ARRAY
33310: PUSH
33311: LD_INT 2
33313: ARRAY
33314: PPUSH
33315: CALL_OW 546
33319: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33320: LD_VAR 0 8
33324: PUSH
33325: LD_INT 1
33327: ARRAY
33328: PUSH
33329: LD_VAR 0 8
33333: PUSH
33334: LD_INT 2
33336: ARRAY
33337: PUSH
33338: LD_VAR 0 13
33342: PUSH
33343: LD_INT 2
33345: PLUS
33346: GREATER
33347: OR
33348: PUSH
33349: LD_VAR 0 8
33353: PUSH
33354: LD_INT 2
33356: ARRAY
33357: PUSH
33358: LD_VAR 0 13
33362: PUSH
33363: LD_INT 2
33365: MINUS
33366: LESS
33367: OR
33368: PUSH
33369: LD_VAR 0 8
33373: PUSH
33374: LD_INT 3
33376: ARRAY
33377: PUSH
33378: LD_INT 0
33380: PUSH
33381: LD_INT 8
33383: PUSH
33384: LD_INT 9
33386: PUSH
33387: LD_INT 10
33389: PUSH
33390: LD_INT 11
33392: PUSH
33393: LD_INT 12
33395: PUSH
33396: LD_INT 13
33398: PUSH
33399: LD_INT 16
33401: PUSH
33402: LD_INT 17
33404: PUSH
33405: LD_INT 18
33407: PUSH
33408: LD_INT 19
33410: PUSH
33411: LD_INT 20
33413: PUSH
33414: LD_INT 21
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: IN
33432: NOT
33433: OR
33434: PUSH
33435: LD_VAR 0 8
33439: PUSH
33440: LD_INT 5
33442: ARRAY
33443: NOT
33444: OR
33445: PUSH
33446: LD_VAR 0 8
33450: PUSH
33451: LD_INT 6
33453: ARRAY
33454: PUSH
33455: LD_INT 1
33457: PUSH
33458: LD_INT 2
33460: PUSH
33461: LD_INT 7
33463: PUSH
33464: LD_INT 9
33466: PUSH
33467: LD_INT 10
33469: PUSH
33470: LD_INT 11
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: IN
33481: NOT
33482: OR
33483: IFFALSE 33489
// exit ;
33485: POP
33486: POP
33487: GO 33587
// end ;
33489: GO 33160
33491: POP
33492: POP
// side := GetSide ( depot ) ;
33493: LD_ADDR_VAR 0 9
33497: PUSH
33498: LD_VAR 0 1
33502: PPUSH
33503: CALL_OW 255
33507: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33508: LD_VAR 0 9
33512: PPUSH
33513: LD_VAR 0 3
33517: PPUSH
33518: LD_VAR 0 4
33522: PPUSH
33523: LD_INT 20
33525: PPUSH
33526: CALL 26241 0 4
33530: PUSH
33531: LD_INT 4
33533: ARRAY
33534: IFFALSE 33538
// exit ;
33536: GO 33587
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33538: LD_VAR 0 2
33542: PUSH
33543: LD_INT 29
33545: PUSH
33546: LD_INT 30
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: IN
33553: PUSH
33554: LD_VAR 0 3
33558: PPUSH
33559: LD_VAR 0 4
33563: PPUSH
33564: LD_VAR 0 9
33568: PPUSH
33569: CALL_OW 440
33573: NOT
33574: AND
33575: IFFALSE 33579
// exit ;
33577: GO 33587
// result := true ;
33579: LD_ADDR_VAR 0 6
33583: PUSH
33584: LD_INT 1
33586: ST_TO_ADDR
// end ;
33587: LD_VAR 0 6
33591: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
33592: LD_INT 0
33594: PPUSH
33595: PPUSH
33596: PPUSH
33597: PPUSH
33598: PPUSH
33599: PPUSH
33600: PPUSH
33601: PPUSH
33602: PPUSH
33603: PPUSH
33604: PPUSH
33605: PPUSH
33606: PPUSH
33607: PPUSH
33608: PPUSH
33609: PPUSH
33610: PPUSH
33611: PPUSH
33612: PPUSH
33613: PPUSH
33614: PPUSH
33615: PPUSH
33616: PPUSH
33617: PPUSH
33618: PPUSH
33619: PPUSH
33620: PPUSH
33621: PPUSH
33622: PPUSH
33623: PPUSH
33624: PPUSH
33625: PPUSH
33626: PPUSH
33627: PPUSH
33628: PPUSH
33629: PPUSH
33630: PPUSH
33631: PPUSH
33632: PPUSH
33633: PPUSH
33634: PPUSH
33635: PPUSH
33636: PPUSH
33637: PPUSH
33638: PPUSH
33639: PPUSH
33640: PPUSH
33641: PPUSH
33642: PPUSH
33643: PPUSH
33644: PPUSH
33645: PPUSH
33646: PPUSH
33647: PPUSH
33648: PPUSH
33649: PPUSH
33650: PPUSH
33651: PPUSH
// result = [ ] ;
33652: LD_ADDR_VAR 0 7
33656: PUSH
33657: EMPTY
33658: ST_TO_ADDR
// temp_list = [ ] ;
33659: LD_ADDR_VAR 0 9
33663: PUSH
33664: EMPTY
33665: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33666: LD_VAR 0 4
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 3
33682: PUSH
33683: LD_INT 4
33685: PUSH
33686: LD_INT 5
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: IN
33697: NOT
33698: PUSH
33699: LD_VAR 0 1
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: IN
33714: PUSH
33715: LD_VAR 0 5
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: LD_INT 2
33725: PUSH
33726: LD_INT 3
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: LIST
33733: IN
33734: NOT
33735: AND
33736: OR
33737: IFFALSE 33741
// exit ;
33739: GO 52132
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33741: LD_VAR 0 1
33745: PUSH
33746: LD_INT 6
33748: PUSH
33749: LD_INT 7
33751: PUSH
33752: LD_INT 8
33754: PUSH
33755: LD_INT 13
33757: PUSH
33758: LD_INT 12
33760: PUSH
33761: LD_INT 15
33763: PUSH
33764: LD_INT 11
33766: PUSH
33767: LD_INT 14
33769: PUSH
33770: LD_INT 10
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: IN
33784: IFFALSE 33794
// btype = b_lab ;
33786: LD_ADDR_VAR 0 1
33790: PUSH
33791: LD_INT 6
33793: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33794: LD_VAR 0 6
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: LD_INT 2
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: LIST
33812: IN
33813: NOT
33814: PUSH
33815: LD_VAR 0 1
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: LD_INT 6
33834: PUSH
33835: LD_INT 36
33837: PUSH
33838: LD_INT 4
33840: PUSH
33841: LD_INT 5
33843: PUSH
33844: LD_INT 31
33846: PUSH
33847: LD_INT 32
33849: PUSH
33850: LD_INT 33
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: IN
33866: NOT
33867: PUSH
33868: LD_VAR 0 6
33872: PUSH
33873: LD_INT 1
33875: EQUAL
33876: AND
33877: OR
33878: PUSH
33879: LD_VAR 0 1
33883: PUSH
33884: LD_INT 2
33886: PUSH
33887: LD_INT 3
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: IN
33894: NOT
33895: PUSH
33896: LD_VAR 0 6
33900: PUSH
33901: LD_INT 2
33903: EQUAL
33904: AND
33905: OR
33906: IFFALSE 33916
// mode = 0 ;
33908: LD_ADDR_VAR 0 6
33912: PUSH
33913: LD_INT 0
33915: ST_TO_ADDR
// case mode of 0 :
33916: LD_VAR 0 6
33920: PUSH
33921: LD_INT 0
33923: DOUBLE
33924: EQUAL
33925: IFTRUE 33929
33927: GO 45382
33929: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33930: LD_ADDR_VAR 0 11
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 1
33988: NEG
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: LD_INT 1
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: LD_INT 2
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 2
34026: NEG
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: LD_INT 1
34037: NEG
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: LD_INT 2
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 3
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: LD_INT 3
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34123: LD_ADDR_VAR 0 12
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 1
34161: PUSH
34162: LD_INT 1
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: LD_INT 1
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 1
34181: NEG
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 1
34192: NEG
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 2
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: NEG
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 2
34257: NEG
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 2
34269: NEG
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 3
34280: NEG
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 3
34291: NEG
34292: PUSH
34293: LD_INT 1
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34319: LD_ADDR_VAR 0 13
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: LD_INT 1
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 1
34388: NEG
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: NEG
34401: PUSH
34402: LD_INT 2
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 2
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 2
34454: NEG
34455: PUSH
34456: LD_INT 2
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 2
34466: NEG
34467: PUSH
34468: LD_INT 3
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 3
34478: NEG
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 3
34490: NEG
34491: PUSH
34492: LD_INT 3
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34518: LD_ADDR_VAR 0 14
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: LD_INT 0
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: LD_INT 1
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: LD_INT 1
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: NEG
34588: PUSH
34589: LD_INT 1
34591: NEG
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: LD_INT 2
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: LD_INT 2
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: LD_INT 2
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: NEG
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 1
34664: NEG
34665: PUSH
34666: LD_INT 3
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: LD_INT 3
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: LD_INT 2
34690: NEG
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34714: LD_ADDR_VAR 0 15
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 1
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: LD_INT 1
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 1
34772: NEG
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 1
34783: NEG
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 1
34795: PUSH
34796: LD_INT 1
34798: NEG
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 2
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: LD_INT 1
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 2
34837: NEG
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 2
34848: NEG
34849: PUSH
34850: LD_INT 1
34852: NEG
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34907: LD_ADDR_VAR 0 16
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: LD_INT 1
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 1
34965: NEG
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: NEG
34989: PUSH
34990: LD_INT 2
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 2
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 2
35010: PUSH
35011: LD_INT 2
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 2
35030: NEG
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 2
35042: NEG
35043: PUSH
35044: LD_INT 2
35046: NEG
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 3
35054: PUSH
35055: LD_INT 2
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: LD_INT 3
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: LD_INT 3
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35100: LD_ADDR_VAR 0 17
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 1
35169: NEG
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: LD_INT 2
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: LD_INT 2
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 2
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 2
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 2
35235: PUSH
35236: LD_INT 2
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: LD_INT 2
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: LD_INT 2
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 2
35276: NEG
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 2
35287: NEG
35288: PUSH
35289: LD_INT 1
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 2
35299: NEG
35300: PUSH
35301: LD_INT 2
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35330: LD_ADDR_VAR 0 18
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: LD_INT 1
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: LD_INT 1
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: LD_INT 0
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: LD_INT 1
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 1
35411: NEG
35412: PUSH
35413: LD_INT 2
35415: NEG
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 2
35426: NEG
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: LD_INT 2
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: LD_INT 1
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 2
35517: NEG
35518: PUSH
35519: LD_INT 1
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 2
35529: NEG
35530: PUSH
35531: LD_INT 2
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35560: LD_ADDR_VAR 0 19
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: LD_INT 2
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: LD_INT 2
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 2
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 2
35695: PUSH
35696: LD_INT 2
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: LD_INT 2
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: LD_INT 2
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 2
35736: NEG
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 2
35747: NEG
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: LD_INT 2
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35790: LD_ADDR_VAR 0 20
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: LD_INT 1
35810: NEG
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: NEG
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: LD_INT 2
35875: NEG
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: LD_INT 2
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 2
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 2
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 2
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: LD_INT 2
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: LD_INT 1
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 2
35966: NEG
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 2
35977: NEG
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 2
35989: NEG
35990: PUSH
35991: LD_INT 2
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36020: LD_ADDR_VAR 0 21
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: NEG
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: LD_INT 2
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 2
36116: NEG
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 2
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 2
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 2
36155: PUSH
36156: LD_INT 2
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: LD_INT 2
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 1
36185: NEG
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 2
36196: NEG
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 2
36207: NEG
36208: PUSH
36209: LD_INT 1
36211: NEG
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 2
36219: NEG
36220: PUSH
36221: LD_INT 2
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36250: LD_ADDR_VAR 0 22
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: PUSH
36289: LD_INT 1
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 1
36319: NEG
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 2
36335: NEG
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: LD_INT 2
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: LD_INT 1
36357: NEG
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 2
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: LD_INT 2
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: LD_INT 2
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: LD_INT 2
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 1
36415: NEG
36416: PUSH
36417: LD_INT 1
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 2
36426: NEG
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 2
36437: NEG
36438: PUSH
36439: LD_INT 1
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 2
36449: NEG
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36480: LD_ADDR_VAR 0 23
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 1
36538: NEG
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: NEG
36562: PUSH
36563: LD_INT 2
36565: NEG
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 2
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 2
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: LD_INT 2
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 2
36656: NEG
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 2
36667: NEG
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 2
36679: NEG
36680: PUSH
36681: LD_INT 2
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 2
36691: NEG
36692: PUSH
36693: LD_INT 3
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 1
36703: NEG
36704: PUSH
36705: LD_INT 3
36707: NEG
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: LD_INT 2
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36760: LD_ADDR_VAR 0 24
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 2
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 2
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 2
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 2
36936: NEG
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: NEG
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: LD_INT 2
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: LD_INT 2
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 3
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 3
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37036: LD_ADDR_VAR 0 25
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 0
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: LD_INT 2
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 2
37223: NEG
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 2
37235: NEG
37236: PUSH
37237: LD_INT 2
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 3
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 2
37267: PUSH
37268: LD_INT 3
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 3
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37310: LD_ADDR_VAR 0 26
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: LD_INT 2
37395: NEG
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 2
37406: NEG
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 2
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 2
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 2
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: LD_INT 2
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: LD_INT 2
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 1
37475: NEG
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 2
37486: NEG
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 2
37497: NEG
37498: PUSH
37499: LD_INT 1
37501: NEG
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 2
37509: NEG
37510: PUSH
37511: LD_INT 2
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: PUSH
37522: LD_INT 3
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: LD_INT 3
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 2
37552: NEG
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37586: LD_ADDR_VAR 0 27
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: LD_INT 2
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 2
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 2
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 2
37721: PUSH
37722: LD_INT 2
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: LD_INT 2
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 2
37773: NEG
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 2
37785: NEG
37786: PUSH
37787: LD_INT 2
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 2
37808: NEG
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 3
37819: NEG
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 3
37831: NEG
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37866: LD_ADDR_VAR 0 28
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: LD_INT 1
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: NEG
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: LD_INT 2
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: LD_INT 2
37962: NEG
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 2
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 2
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 2
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: PUSH
38012: LD_INT 2
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: LD_INT 2
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 2
38065: NEG
38066: PUSH
38067: LD_INT 2
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: LD_INT 3
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: LD_INT 3
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 3
38101: NEG
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 3
38113: NEG
38114: PUSH
38115: LD_INT 2
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38148: LD_ADDR_VAR 0 29
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: LD_INT 2
38244: NEG
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 1
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 2
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: LD_INT 2
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 2
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: LD_INT 1
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: NEG
38339: PUSH
38340: LD_INT 3
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 2
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 3
38361: PUSH
38362: LD_INT 1
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: LD_INT 3
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: LD_INT 2
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 3
38392: NEG
38393: PUSH
38394: LD_INT 2
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38427: LD_ADDR_VAR 0 30
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 1
38508: NEG
38509: PUSH
38510: LD_INT 2
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 2
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 2
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: LD_INT 2
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 2
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: NEG
38594: PUSH
38595: LD_INT 0
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 2
38604: NEG
38605: PUSH
38606: LD_INT 1
38608: NEG
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PUSH
38618: LD_INT 3
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 2
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 3
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 2
38649: PUSH
38650: LD_INT 3
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 2
38659: NEG
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 3
38670: NEG
38671: PUSH
38672: LD_INT 1
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38705: LD_ADDR_VAR 0 31
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 0
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 2
38882: NEG
38883: PUSH
38884: LD_INT 2
38886: NEG
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 2
38894: NEG
38895: PUSH
38896: LD_INT 3
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 3
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: LD_INT 3
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: LD_INT 2
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 3
38948: NEG
38949: PUSH
38950: LD_INT 2
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38983: LD_ADDR_VAR 0 32
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: LD_INT 2
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: LD_INT 2
39079: NEG
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 2
39160: NEG
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: LD_INT 3
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 2
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 3
39195: PUSH
39196: LD_INT 2
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: LD_INT 3
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 2
39215: NEG
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 3
39226: NEG
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39261: LD_ADDR_VAR 0 33
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: LD_INT 2
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 2
39451: NEG
39452: PUSH
39453: LD_INT 3
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: LD_INT 1
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 3
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: LD_INT 3
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: LD_INT 2
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 3
39505: NEG
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39540: LD_ADDR_VAR 0 34
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: LD_INT 2
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: LD_INT 2
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 2
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 2
39665: PUSH
39666: LD_INT 2
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 2
39707: NEG
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: LD_INT 3
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: LD_INT 3
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: LD_INT 1
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 3
39785: NEG
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39820: LD_ADDR_VAR 0 35
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 2
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39932: LD_ADDR_VAR 0 36
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: LD_INT 2
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40044: LD_ADDR_VAR 0 37
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: NEG
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40156: LD_ADDR_VAR 0 38
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: NEG
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40268: LD_ADDR_VAR 0 39
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40380: LD_ADDR_VAR 0 40
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40492: LD_ADDR_VAR 0 41
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: LD_INT 2
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 2
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 2
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: LD_INT 2
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: LD_INT 2
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: LD_INT 3
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 2
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 3
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 3
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 3
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 3
40735: PUSH
40736: LD_INT 3
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 2
40745: PUSH
40746: LD_INT 3
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 3
40766: NEG
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 3
40777: NEG
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 3
40789: NEG
40790: PUSH
40791: LD_INT 2
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 3
40801: NEG
40802: PUSH
40803: LD_INT 3
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40842: LD_ADDR_VAR 0 42
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 0
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: LD_INT 2
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: NEG
41033: PUSH
41034: LD_INT 3
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: LD_INT 3
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: LD_INT 3
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 2
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 3
41078: PUSH
41079: LD_INT 2
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: LD_INT 3
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 3
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 3
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 3
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 3
41139: NEG
41140: PUSH
41141: LD_INT 2
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 3
41151: NEG
41152: PUSH
41153: LD_INT 3
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41192: LD_ADDR_VAR 0 43
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 2
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 2
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 2
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 2
41358: NEG
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: NEG
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: LD_INT 3
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: LD_INT 3
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: LD_INT 2
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 3
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 3
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: LD_INT 3
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: LD_INT 3
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 3
41488: NEG
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 3
41499: NEG
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41540: LD_ADDR_VAR 0 44
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 2
41695: NEG
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: LD_INT 2
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: LD_INT 3
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 3
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 3
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 3
41773: PUSH
41774: LD_INT 2
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 3
41783: PUSH
41784: LD_INT 3
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: LD_INT 3
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 3
41814: NEG
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 3
41825: NEG
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 3
41837: NEG
41838: PUSH
41839: LD_INT 2
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 3
41849: NEG
41850: PUSH
41851: LD_INT 3
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41890: LD_ADDR_VAR 0 45
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 2
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: LD_INT 2
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 2
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 2
42068: NEG
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: LD_INT 3
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: LD_INT 3
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: LD_INT 3
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: LD_INT 2
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 3
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 3
42136: PUSH
42137: LD_INT 3
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 3
42187: NEG
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 3
42199: NEG
42200: PUSH
42201: LD_INT 3
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42240: LD_ADDR_VAR 0 46
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 2
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 3
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 3
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 3
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 3
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 3
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 3
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: NEG
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 3
42536: NEG
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 3
42547: NEG
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42588: LD_ADDR_VAR 0 47
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: LD_INT 1
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42739: LD_ADDR_VAR 0 48
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42886: LD_ADDR_VAR 0 49
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 2
42998: PUSH
42999: LD_INT 2
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43030: LD_ADDR_VAR 0 50
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: LD_INT 2
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43174: LD_ADDR_VAR 0 51
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43321: LD_ADDR_VAR 0 52
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 2
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: LD_INT 2
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43472: LD_ADDR_VAR 0 53
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 2
43659: NEG
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43702: LD_ADDR_VAR 0 54
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 2
43889: NEG
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43932: LD_ADDR_VAR 0 55
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 2
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 2
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 2
44067: PUSH
44068: LD_INT 2
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 2
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 2
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44162: LD_ADDR_VAR 0 56
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: LD_INT 2
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: LD_INT 2
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44392: LD_ADDR_VAR 0 57
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 2
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: LD_INT 2
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: NEG
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44622: LD_ADDR_VAR 0 58
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44852: LD_ADDR_VAR 0 59
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44940: LD_ADDR_VAR 0 60
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45028: LD_ADDR_VAR 0 61
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45116: LD_ADDR_VAR 0 62
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45204: LD_ADDR_VAR 0 63
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45292: LD_ADDR_VAR 0 64
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: ST_TO_ADDR
// end ; 1 :
45380: GO 51277
45382: LD_INT 1
45384: DOUBLE
45385: EQUAL
45386: IFTRUE 45390
45388: GO 48013
45390: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45391: LD_ADDR_VAR 0 11
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 3
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 3
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45435: LD_ADDR_VAR 0 12
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 3
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45476: LD_ADDR_VAR 0 13
45480: PUSH
45481: LD_INT 3
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 3
45493: PUSH
45494: LD_INT 3
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: LD_INT 3
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: LIST
45515: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45516: LD_ADDR_VAR 0 14
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: LD_INT 3
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: LD_INT 3
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45557: LD_ADDR_VAR 0 15
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 3
45575: NEG
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: NEG
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45601: LD_ADDR_VAR 0 16
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: LD_INT 3
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 3
45620: NEG
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 3
45632: NEG
45633: PUSH
45634: LD_INT 3
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: LIST
45646: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45647: LD_ADDR_VAR 0 17
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 3
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 3
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 2
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45691: LD_ADDR_VAR 0 18
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45732: LD_ADDR_VAR 0 19
45736: PUSH
45737: LD_INT 3
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 3
45749: PUSH
45750: LD_INT 3
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: LD_INT 3
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: LIST
45771: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45772: LD_ADDR_VAR 0 20
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: LD_INT 3
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 3
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: LIST
45812: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45813: LD_ADDR_VAR 0 21
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 3
45831: NEG
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 3
45842: NEG
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: LIST
45856: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45857: LD_ADDR_VAR 0 22
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: LD_INT 3
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 3
45876: NEG
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 3
45888: NEG
45889: PUSH
45890: LD_INT 3
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45903: LD_ADDR_VAR 0 23
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 3
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: LD_INT 4
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 3
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45947: LD_ADDR_VAR 0 24
45951: PUSH
45952: LD_INT 3
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 3
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 4
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: LIST
45987: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45988: LD_ADDR_VAR 0 25
45992: PUSH
45993: LD_INT 3
45995: PUSH
45996: LD_INT 3
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 4
46005: PUSH
46006: LD_INT 3
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 3
46015: PUSH
46016: LD_INT 4
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46028: LD_ADDR_VAR 0 26
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 3
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: LD_INT 4
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: LD_INT 3
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: LIST
46068: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46069: LD_ADDR_VAR 0 27
46073: PUSH
46074: LD_INT 3
46076: NEG
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 3
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 4
46098: NEG
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46113: LD_ADDR_VAR 0 28
46117: PUSH
46118: LD_INT 3
46120: NEG
46121: PUSH
46122: LD_INT 3
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: NEG
46133: PUSH
46134: LD_INT 4
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 4
46144: NEG
46145: PUSH
46146: LD_INT 3
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46159: LD_ADDR_VAR 0 29
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 3
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 3
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: LD_INT 4
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 4
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 3
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 5
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 5
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 4
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: LD_INT 6
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 6
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 5
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46314: LD_ADDR_VAR 0 30
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 3
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 3
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 4
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 4
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 4
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 5
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 5
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 5
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 6
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 6
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46457: LD_ADDR_VAR 0 31
46461: PUSH
46462: LD_INT 3
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 3
46474: PUSH
46475: LD_INT 3
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: LD_INT 3
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 4
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 4
46504: PUSH
46505: LD_INT 4
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 3
46514: PUSH
46515: LD_INT 4
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 5
46524: PUSH
46525: LD_INT 4
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 5
46534: PUSH
46535: LD_INT 5
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 4
46544: PUSH
46545: LD_INT 5
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 6
46554: PUSH
46555: LD_INT 5
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 6
46564: PUSH
46565: LD_INT 6
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 5
46574: PUSH
46575: LD_INT 6
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46596: LD_ADDR_VAR 0 32
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: LD_INT 3
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 3
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 4
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: LD_INT 4
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 5
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 5
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: LD_INT 4
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 6
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 6
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 5
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46739: LD_ADDR_VAR 0 33
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 3
46757: NEG
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 3
46768: NEG
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 3
46780: NEG
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 4
46791: NEG
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 4
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 4
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 5
46825: NEG
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 5
46836: NEG
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 5
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 6
46859: NEG
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 6
46870: NEG
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46894: LD_ADDR_VAR 0 34
46898: PUSH
46899: LD_INT 2
46901: NEG
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 3
46913: NEG
46914: PUSH
46915: LD_INT 2
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 3
46925: NEG
46926: PUSH
46927: LD_INT 3
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 3
46937: NEG
46938: PUSH
46939: LD_INT 4
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 4
46949: NEG
46950: PUSH
46951: LD_INT 3
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 4
46961: NEG
46962: PUSH
46963: LD_INT 4
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 4
46973: NEG
46974: PUSH
46975: LD_INT 5
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 5
46985: NEG
46986: PUSH
46987: LD_INT 4
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 5
46997: NEG
46998: PUSH
46999: LD_INT 5
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 5
47009: NEG
47010: PUSH
47011: LD_INT 6
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 6
47021: NEG
47022: PUSH
47023: LD_INT 5
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 6
47033: NEG
47034: PUSH
47035: LD_INT 6
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47057: LD_ADDR_VAR 0 41
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 3
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: LIST
47100: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47101: LD_ADDR_VAR 0 42
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: LIST
47141: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47142: LD_ADDR_VAR 0 43
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 3
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: LD_INT 3
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: LIST
47181: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47182: LD_ADDR_VAR 0 44
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 3
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: LIST
47222: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47223: LD_ADDR_VAR 0 45
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 3
47252: NEG
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: LIST
47266: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47267: LD_ADDR_VAR 0 46
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 3
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 3
47298: NEG
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47313: LD_ADDR_VAR 0 47
47317: PUSH
47318: LD_INT 2
47320: NEG
47321: PUSH
47322: LD_INT 3
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 3
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47346: LD_ADDR_VAR 0 48
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47377: LD_ADDR_VAR 0 49
47381: PUSH
47382: LD_INT 3
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47406: LD_ADDR_VAR 0 50
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: LD_INT 3
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47435: LD_ADDR_VAR 0 51
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47466: LD_ADDR_VAR 0 52
47470: PUSH
47471: LD_INT 3
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 3
47485: NEG
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47499: LD_ADDR_VAR 0 53
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 3
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 3
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47543: LD_ADDR_VAR 0 54
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 3
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 3
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: LIST
47583: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47584: LD_ADDR_VAR 0 55
47588: PUSH
47589: LD_INT 3
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 3
47601: PUSH
47602: LD_INT 3
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: LD_INT 3
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47624: LD_ADDR_VAR 0 56
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 3
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47665: LD_ADDR_VAR 0 57
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 3
47683: NEG
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 3
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47709: LD_ADDR_VAR 0 58
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 3
47728: NEG
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: LD_INT 3
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: LIST
47754: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47755: LD_ADDR_VAR 0 59
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 2
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47799: LD_ADDR_VAR 0 60
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: LIST
47839: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47840: LD_ADDR_VAR 0 61
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: LIST
47879: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47880: LD_ADDR_VAR 0 62
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47921: LD_ADDR_VAR 0 63
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 2
47939: NEG
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: LIST
47964: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47965: LD_ADDR_VAR 0 64
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: LIST
48010: ST_TO_ADDR
// end ; 2 :
48011: GO 51277
48013: LD_INT 2
48015: DOUBLE
48016: EQUAL
48017: IFTRUE 48021
48019: GO 51276
48021: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48022: LD_ADDR_VAR 0 29
48026: PUSH
48027: LD_INT 4
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 4
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 5
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 5
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 4
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 3
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 5
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 3
48122: PUSH
48123: LD_INT 3
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 3
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 4
48142: PUSH
48143: LD_INT 3
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 4
48152: PUSH
48153: LD_INT 4
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 3
48162: PUSH
48163: LD_INT 4
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 3
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 4
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: LD_INT 4
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 4
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: LD_INT 3
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 4
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 5
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 5
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 4
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: LD_INT 3
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: LD_INT 5
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 3
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 3
48305: NEG
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 3
48316: NEG
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 3
48350: NEG
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 4
48361: NEG
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 4
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 4
48384: NEG
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 4
48407: NEG
48408: PUSH
48409: LD_INT 4
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 4
48419: NEG
48420: PUSH
48421: LD_INT 5
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 3
48431: NEG
48432: PUSH
48433: LD_INT 4
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 3
48443: NEG
48444: PUSH
48445: LD_INT 3
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 4
48455: NEG
48456: PUSH
48457: LD_INT 3
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 5
48467: NEG
48468: PUSH
48469: LD_INT 4
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 5
48479: NEG
48480: PUSH
48481: LD_INT 5
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 3
48491: NEG
48492: PUSH
48493: LD_INT 5
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 5
48503: NEG
48504: PUSH
48505: LD_INT 3
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48560: LD_ADDR_VAR 0 30
48564: PUSH
48565: LD_INT 4
48567: PUSH
48568: LD_INT 4
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 4
48577: PUSH
48578: LD_INT 3
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 5
48587: PUSH
48588: LD_INT 4
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 5
48597: PUSH
48598: LD_INT 5
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 4
48607: PUSH
48608: LD_INT 5
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 3
48617: PUSH
48618: LD_INT 4
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 3
48627: PUSH
48628: LD_INT 3
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 5
48637: PUSH
48638: LD_INT 3
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 3
48647: PUSH
48648: LD_INT 5
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 3
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 3
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 4
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 4
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 3
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: LD_INT 4
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 4
48750: NEG
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 4
48761: NEG
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 3
48773: NEG
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 3
48784: NEG
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 4
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 5
48806: NEG
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 5
48817: NEG
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 5
48829: NEG
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 3
48841: NEG
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 3
48852: NEG
48853: PUSH
48854: LD_INT 3
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 3
48864: NEG
48865: PUSH
48866: LD_INT 4
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: LD_INT 3
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 3
48900: NEG
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 4
48912: NEG
48913: PUSH
48914: LD_INT 3
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 4
48924: NEG
48925: PUSH
48926: LD_INT 4
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: LD_INT 4
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 4
48948: NEG
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 4
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 5
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 4
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 3
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 3
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: LD_INT 4
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: LD_INT 5
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: PUSH
49040: LD_INT 3
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: LD_INT 5
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49107: LD_ADDR_VAR 0 31
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 4
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 3
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: LD_INT 4
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 5
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 5
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: LD_INT 4
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 3
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: LD_INT 5
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 3
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 3
49252: NEG
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 4
49263: NEG
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 4
49274: NEG
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 4
49286: NEG
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 4
49309: NEG
49310: PUSH
49311: LD_INT 4
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 4
49321: NEG
49322: PUSH
49323: LD_INT 5
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 3
49333: NEG
49334: PUSH
49335: LD_INT 4
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: LD_INT 3
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 4
49357: NEG
49358: PUSH
49359: LD_INT 3
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 5
49369: NEG
49370: PUSH
49371: LD_INT 4
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 5
49381: NEG
49382: PUSH
49383: LD_INT 5
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 3
49393: NEG
49394: PUSH
49395: LD_INT 5
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 5
49405: NEG
49406: PUSH
49407: LD_INT 3
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 3
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 4
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: LD_INT 2
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 2
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: LD_INT 3
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 4
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 2
49507: NEG
49508: PUSH
49509: LD_INT 4
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 4
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 4
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 5
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 5
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 4
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 3
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 3
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 3
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 5
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49657: LD_ADDR_VAR 0 32
49661: PUSH
49662: LD_INT 4
49664: NEG
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 4
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: NEG
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 3
49698: NEG
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 4
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 5
49720: NEG
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 5
49731: NEG
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 5
49743: NEG
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 3
49755: NEG
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: LD_INT 3
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 3
49778: NEG
49779: PUSH
49780: LD_INT 4
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 3
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 4
49826: NEG
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 4
49838: NEG
49839: PUSH
49840: LD_INT 4
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: LD_INT 4
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 4
49862: NEG
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 4
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 5
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 4
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 3
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 3
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 4
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: LD_INT 5
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: LD_INT 3
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: LD_INT 5
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 3
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 3
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 4
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 4
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 3
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 4
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 4
50069: PUSH
50070: LD_INT 4
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 4
50079: PUSH
50080: LD_INT 3
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 5
50089: PUSH
50090: LD_INT 4
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 5
50099: PUSH
50100: LD_INT 5
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 4
50109: PUSH
50110: LD_INT 5
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 3
50119: PUSH
50120: LD_INT 4
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 3
50129: PUSH
50130: LD_INT 3
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 5
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 3
50149: PUSH
50150: LD_INT 5
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50204: LD_ADDR_VAR 0 33
50208: PUSH
50209: LD_INT 4
50211: NEG
50212: PUSH
50213: LD_INT 4
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 4
50223: NEG
50224: PUSH
50225: LD_INT 5
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 3
50235: NEG
50236: PUSH
50237: LD_INT 4
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: LD_INT 3
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 4
50259: NEG
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 5
50271: NEG
50272: PUSH
50273: LD_INT 4
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 5
50283: NEG
50284: PUSH
50285: LD_INT 5
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: LD_INT 5
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 5
50307: NEG
50308: PUSH
50309: LD_INT 3
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 3
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 4
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: LD_INT 3
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 2
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 4
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: LD_INT 4
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 4
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 4
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 5
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 5
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 4
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 5
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 3
50514: PUSH
50515: LD_INT 3
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 4
50534: PUSH
50535: LD_INT 3
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 4
50544: PUSH
50545: LD_INT 4
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 3
50554: PUSH
50555: LD_INT 4
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: LD_INT 3
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 4
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: LD_INT 4
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 4
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 4
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 5
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 5
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 4
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 3
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: LD_INT 5
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: LD_INT 3
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50742: LD_ADDR_VAR 0 34
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: LD_INT 4
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 5
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 4
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 3
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: LD_INT 4
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 5
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: LD_INT 3
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: LD_INT 5
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 3
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 4
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 4
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 3
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 4
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 4
50944: PUSH
50945: LD_INT 4
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 4
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 5
50964: PUSH
50965: LD_INT 4
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 5
50974: PUSH
50975: LD_INT 5
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 4
50984: PUSH
50985: LD_INT 5
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 3
50994: PUSH
50995: LD_INT 4
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: PUSH
51005: LD_INT 3
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 5
51014: PUSH
51015: LD_INT 3
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: LD_INT 5
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 4
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 4
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: LD_INT 3
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: LD_INT 4
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 4
51127: NEG
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 4
51138: NEG
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 3
51150: NEG
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 4
51172: NEG
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 5
51183: NEG
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 5
51194: NEG
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 5
51206: NEG
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 3
51218: NEG
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: ST_TO_ADDR
// end ; end ;
51274: GO 51277
51276: POP
// case btype of b_depot , b_warehouse :
51277: LD_VAR 0 1
51281: PUSH
51282: LD_INT 0
51284: DOUBLE
51285: EQUAL
51286: IFTRUE 51296
51288: LD_INT 1
51290: DOUBLE
51291: EQUAL
51292: IFTRUE 51296
51294: GO 51497
51296: POP
// case nation of nation_american :
51297: LD_VAR 0 5
51301: PUSH
51302: LD_INT 1
51304: DOUBLE
51305: EQUAL
51306: IFTRUE 51310
51308: GO 51366
51310: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
51311: LD_ADDR_VAR 0 9
51315: PUSH
51316: LD_VAR 0 11
51320: PUSH
51321: LD_VAR 0 12
51325: PUSH
51326: LD_VAR 0 13
51330: PUSH
51331: LD_VAR 0 14
51335: PUSH
51336: LD_VAR 0 15
51340: PUSH
51341: LD_VAR 0 16
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: PUSH
51354: LD_VAR 0 4
51358: PUSH
51359: LD_INT 1
51361: PLUS
51362: ARRAY
51363: ST_TO_ADDR
51364: GO 51495
51366: LD_INT 2
51368: DOUBLE
51369: EQUAL
51370: IFTRUE 51374
51372: GO 51430
51374: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
51375: LD_ADDR_VAR 0 9
51379: PUSH
51380: LD_VAR 0 17
51384: PUSH
51385: LD_VAR 0 18
51389: PUSH
51390: LD_VAR 0 19
51394: PUSH
51395: LD_VAR 0 20
51399: PUSH
51400: LD_VAR 0 21
51404: PUSH
51405: LD_VAR 0 22
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: PUSH
51418: LD_VAR 0 4
51422: PUSH
51423: LD_INT 1
51425: PLUS
51426: ARRAY
51427: ST_TO_ADDR
51428: GO 51495
51430: LD_INT 3
51432: DOUBLE
51433: EQUAL
51434: IFTRUE 51438
51436: GO 51494
51438: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51439: LD_ADDR_VAR 0 9
51443: PUSH
51444: LD_VAR 0 23
51448: PUSH
51449: LD_VAR 0 24
51453: PUSH
51454: LD_VAR 0 25
51458: PUSH
51459: LD_VAR 0 26
51463: PUSH
51464: LD_VAR 0 27
51468: PUSH
51469: LD_VAR 0 28
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: PUSH
51482: LD_VAR 0 4
51486: PUSH
51487: LD_INT 1
51489: PLUS
51490: ARRAY
51491: ST_TO_ADDR
51492: GO 51495
51494: POP
51495: GO 52050
51497: LD_INT 2
51499: DOUBLE
51500: EQUAL
51501: IFTRUE 51511
51503: LD_INT 3
51505: DOUBLE
51506: EQUAL
51507: IFTRUE 51511
51509: GO 51567
51511: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51512: LD_ADDR_VAR 0 9
51516: PUSH
51517: LD_VAR 0 29
51521: PUSH
51522: LD_VAR 0 30
51526: PUSH
51527: LD_VAR 0 31
51531: PUSH
51532: LD_VAR 0 32
51536: PUSH
51537: LD_VAR 0 33
51541: PUSH
51542: LD_VAR 0 34
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: PUSH
51555: LD_VAR 0 4
51559: PUSH
51560: LD_INT 1
51562: PLUS
51563: ARRAY
51564: ST_TO_ADDR
51565: GO 52050
51567: LD_INT 16
51569: DOUBLE
51570: EQUAL
51571: IFTRUE 51629
51573: LD_INT 17
51575: DOUBLE
51576: EQUAL
51577: IFTRUE 51629
51579: LD_INT 18
51581: DOUBLE
51582: EQUAL
51583: IFTRUE 51629
51585: LD_INT 19
51587: DOUBLE
51588: EQUAL
51589: IFTRUE 51629
51591: LD_INT 22
51593: DOUBLE
51594: EQUAL
51595: IFTRUE 51629
51597: LD_INT 20
51599: DOUBLE
51600: EQUAL
51601: IFTRUE 51629
51603: LD_INT 21
51605: DOUBLE
51606: EQUAL
51607: IFTRUE 51629
51609: LD_INT 23
51611: DOUBLE
51612: EQUAL
51613: IFTRUE 51629
51615: LD_INT 24
51617: DOUBLE
51618: EQUAL
51619: IFTRUE 51629
51621: LD_INT 25
51623: DOUBLE
51624: EQUAL
51625: IFTRUE 51629
51627: GO 51685
51629: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51630: LD_ADDR_VAR 0 9
51634: PUSH
51635: LD_VAR 0 35
51639: PUSH
51640: LD_VAR 0 36
51644: PUSH
51645: LD_VAR 0 37
51649: PUSH
51650: LD_VAR 0 38
51654: PUSH
51655: LD_VAR 0 39
51659: PUSH
51660: LD_VAR 0 40
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: PUSH
51673: LD_VAR 0 4
51677: PUSH
51678: LD_INT 1
51680: PLUS
51681: ARRAY
51682: ST_TO_ADDR
51683: GO 52050
51685: LD_INT 6
51687: DOUBLE
51688: EQUAL
51689: IFTRUE 51741
51691: LD_INT 7
51693: DOUBLE
51694: EQUAL
51695: IFTRUE 51741
51697: LD_INT 8
51699: DOUBLE
51700: EQUAL
51701: IFTRUE 51741
51703: LD_INT 13
51705: DOUBLE
51706: EQUAL
51707: IFTRUE 51741
51709: LD_INT 12
51711: DOUBLE
51712: EQUAL
51713: IFTRUE 51741
51715: LD_INT 15
51717: DOUBLE
51718: EQUAL
51719: IFTRUE 51741
51721: LD_INT 11
51723: DOUBLE
51724: EQUAL
51725: IFTRUE 51741
51727: LD_INT 14
51729: DOUBLE
51730: EQUAL
51731: IFTRUE 51741
51733: LD_INT 10
51735: DOUBLE
51736: EQUAL
51737: IFTRUE 51741
51739: GO 51797
51741: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
51742: LD_ADDR_VAR 0 9
51746: PUSH
51747: LD_VAR 0 41
51751: PUSH
51752: LD_VAR 0 42
51756: PUSH
51757: LD_VAR 0 43
51761: PUSH
51762: LD_VAR 0 44
51766: PUSH
51767: LD_VAR 0 45
51771: PUSH
51772: LD_VAR 0 46
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: PUSH
51785: LD_VAR 0 4
51789: PUSH
51790: LD_INT 1
51792: PLUS
51793: ARRAY
51794: ST_TO_ADDR
51795: GO 52050
51797: LD_INT 36
51799: DOUBLE
51800: EQUAL
51801: IFTRUE 51805
51803: GO 51861
51805: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51806: LD_ADDR_VAR 0 9
51810: PUSH
51811: LD_VAR 0 47
51815: PUSH
51816: LD_VAR 0 48
51820: PUSH
51821: LD_VAR 0 49
51825: PUSH
51826: LD_VAR 0 50
51830: PUSH
51831: LD_VAR 0 51
51835: PUSH
51836: LD_VAR 0 52
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: PUSH
51849: LD_VAR 0 4
51853: PUSH
51854: LD_INT 1
51856: PLUS
51857: ARRAY
51858: ST_TO_ADDR
51859: GO 52050
51861: LD_INT 4
51863: DOUBLE
51864: EQUAL
51865: IFTRUE 51887
51867: LD_INT 5
51869: DOUBLE
51870: EQUAL
51871: IFTRUE 51887
51873: LD_INT 34
51875: DOUBLE
51876: EQUAL
51877: IFTRUE 51887
51879: LD_INT 37
51881: DOUBLE
51882: EQUAL
51883: IFTRUE 51887
51885: GO 51943
51887: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51888: LD_ADDR_VAR 0 9
51892: PUSH
51893: LD_VAR 0 53
51897: PUSH
51898: LD_VAR 0 54
51902: PUSH
51903: LD_VAR 0 55
51907: PUSH
51908: LD_VAR 0 56
51912: PUSH
51913: LD_VAR 0 57
51917: PUSH
51918: LD_VAR 0 58
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: PUSH
51931: LD_VAR 0 4
51935: PUSH
51936: LD_INT 1
51938: PLUS
51939: ARRAY
51940: ST_TO_ADDR
51941: GO 52050
51943: LD_INT 31
51945: DOUBLE
51946: EQUAL
51947: IFTRUE 51993
51949: LD_INT 32
51951: DOUBLE
51952: EQUAL
51953: IFTRUE 51993
51955: LD_INT 33
51957: DOUBLE
51958: EQUAL
51959: IFTRUE 51993
51961: LD_INT 27
51963: DOUBLE
51964: EQUAL
51965: IFTRUE 51993
51967: LD_INT 26
51969: DOUBLE
51970: EQUAL
51971: IFTRUE 51993
51973: LD_INT 28
51975: DOUBLE
51976: EQUAL
51977: IFTRUE 51993
51979: LD_INT 29
51981: DOUBLE
51982: EQUAL
51983: IFTRUE 51993
51985: LD_INT 30
51987: DOUBLE
51988: EQUAL
51989: IFTRUE 51993
51991: GO 52049
51993: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
51994: LD_ADDR_VAR 0 9
51998: PUSH
51999: LD_VAR 0 59
52003: PUSH
52004: LD_VAR 0 60
52008: PUSH
52009: LD_VAR 0 61
52013: PUSH
52014: LD_VAR 0 62
52018: PUSH
52019: LD_VAR 0 63
52023: PUSH
52024: LD_VAR 0 64
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: PUSH
52037: LD_VAR 0 4
52041: PUSH
52042: LD_INT 1
52044: PLUS
52045: ARRAY
52046: ST_TO_ADDR
52047: GO 52050
52049: POP
// temp_list2 = [ ] ;
52050: LD_ADDR_VAR 0 10
52054: PUSH
52055: EMPTY
52056: ST_TO_ADDR
// for i in temp_list do
52057: LD_ADDR_VAR 0 8
52061: PUSH
52062: LD_VAR 0 9
52066: PUSH
52067: FOR_IN
52068: IFFALSE 52120
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52070: LD_ADDR_VAR 0 10
52074: PUSH
52075: LD_VAR 0 10
52079: PUSH
52080: LD_VAR 0 8
52084: PUSH
52085: LD_INT 1
52087: ARRAY
52088: PUSH
52089: LD_VAR 0 2
52093: PLUS
52094: PUSH
52095: LD_VAR 0 8
52099: PUSH
52100: LD_INT 2
52102: ARRAY
52103: PUSH
52104: LD_VAR 0 3
52108: PLUS
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: EMPTY
52115: LIST
52116: ADD
52117: ST_TO_ADDR
52118: GO 52067
52120: POP
52121: POP
// result = temp_list2 ;
52122: LD_ADDR_VAR 0 7
52126: PUSH
52127: LD_VAR 0 10
52131: ST_TO_ADDR
// end ;
52132: LD_VAR 0 7
52136: RET
// export function EnemyInRange ( unit , dist ) ; begin
52137: LD_INT 0
52139: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52140: LD_ADDR_VAR 0 3
52144: PUSH
52145: LD_VAR 0 1
52149: PPUSH
52150: CALL_OW 255
52154: PPUSH
52155: LD_VAR 0 1
52159: PPUSH
52160: CALL_OW 250
52164: PPUSH
52165: LD_VAR 0 1
52169: PPUSH
52170: CALL_OW 251
52174: PPUSH
52175: LD_VAR 0 2
52179: PPUSH
52180: CALL 26241 0 4
52184: PUSH
52185: LD_INT 4
52187: ARRAY
52188: ST_TO_ADDR
// end ;
52189: LD_VAR 0 3
52193: RET
// export function PlayerSeeMe ( unit ) ; begin
52194: LD_INT 0
52196: PPUSH
// result := See ( your_side , unit ) ;
52197: LD_ADDR_VAR 0 2
52201: PUSH
52202: LD_OWVAR 2
52206: PPUSH
52207: LD_VAR 0 1
52211: PPUSH
52212: CALL_OW 292
52216: ST_TO_ADDR
// end ;
52217: LD_VAR 0 2
52221: RET
// export function ReverseDir ( unit ) ; begin
52222: LD_INT 0
52224: PPUSH
// if not unit then
52225: LD_VAR 0 1
52229: NOT
52230: IFFALSE 52234
// exit ;
52232: GO 52257
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52234: LD_ADDR_VAR 0 2
52238: PUSH
52239: LD_VAR 0 1
52243: PPUSH
52244: CALL_OW 254
52248: PUSH
52249: LD_INT 3
52251: PLUS
52252: PUSH
52253: LD_INT 6
52255: MOD
52256: ST_TO_ADDR
// end ;
52257: LD_VAR 0 2
52261: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52262: LD_INT 0
52264: PPUSH
52265: PPUSH
52266: PPUSH
52267: PPUSH
52268: PPUSH
// if not hexes then
52269: LD_VAR 0 2
52273: NOT
52274: IFFALSE 52278
// exit ;
52276: GO 52426
// dist := 9999 ;
52278: LD_ADDR_VAR 0 5
52282: PUSH
52283: LD_INT 9999
52285: ST_TO_ADDR
// for i = 1 to hexes do
52286: LD_ADDR_VAR 0 4
52290: PUSH
52291: DOUBLE
52292: LD_INT 1
52294: DEC
52295: ST_TO_ADDR
52296: LD_VAR 0 2
52300: PUSH
52301: FOR_TO
52302: IFFALSE 52414
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52304: LD_VAR 0 1
52308: PPUSH
52309: LD_VAR 0 2
52313: PUSH
52314: LD_VAR 0 4
52318: ARRAY
52319: PUSH
52320: LD_INT 1
52322: ARRAY
52323: PPUSH
52324: LD_VAR 0 2
52328: PUSH
52329: LD_VAR 0 4
52333: ARRAY
52334: PUSH
52335: LD_INT 2
52337: ARRAY
52338: PPUSH
52339: CALL_OW 297
52343: PUSH
52344: LD_VAR 0 5
52348: LESS
52349: IFFALSE 52412
// begin hex := hexes [ i ] ;
52351: LD_ADDR_VAR 0 7
52355: PUSH
52356: LD_VAR 0 2
52360: PUSH
52361: LD_VAR 0 4
52365: ARRAY
52366: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52367: LD_ADDR_VAR 0 5
52371: PUSH
52372: LD_VAR 0 1
52376: PPUSH
52377: LD_VAR 0 2
52381: PUSH
52382: LD_VAR 0 4
52386: ARRAY
52387: PUSH
52388: LD_INT 1
52390: ARRAY
52391: PPUSH
52392: LD_VAR 0 2
52396: PUSH
52397: LD_VAR 0 4
52401: ARRAY
52402: PUSH
52403: LD_INT 2
52405: ARRAY
52406: PPUSH
52407: CALL_OW 297
52411: ST_TO_ADDR
// end ; end ;
52412: GO 52301
52414: POP
52415: POP
// result := hex ;
52416: LD_ADDR_VAR 0 3
52420: PUSH
52421: LD_VAR 0 7
52425: ST_TO_ADDR
// end ;
52426: LD_VAR 0 3
52430: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52431: LD_INT 0
52433: PPUSH
52434: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52435: LD_VAR 0 1
52439: NOT
52440: PUSH
52441: LD_VAR 0 1
52445: PUSH
52446: LD_INT 21
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 23
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PPUSH
52470: CALL_OW 69
52474: IN
52475: NOT
52476: OR
52477: IFFALSE 52481
// exit ;
52479: GO 52528
// for i = 1 to 3 do
52481: LD_ADDR_VAR 0 3
52485: PUSH
52486: DOUBLE
52487: LD_INT 1
52489: DEC
52490: ST_TO_ADDR
52491: LD_INT 3
52493: PUSH
52494: FOR_TO
52495: IFFALSE 52526
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52497: LD_VAR 0 1
52501: PPUSH
52502: CALL_OW 250
52506: PPUSH
52507: LD_VAR 0 1
52511: PPUSH
52512: CALL_OW 251
52516: PPUSH
52517: LD_INT 1
52519: PPUSH
52520: CALL_OW 453
52524: GO 52494
52526: POP
52527: POP
// end ;
52528: LD_VAR 0 2
52532: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52533: LD_INT 0
52535: PPUSH
52536: PPUSH
52537: PPUSH
52538: PPUSH
52539: PPUSH
52540: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52541: LD_VAR 0 1
52545: NOT
52546: PUSH
52547: LD_VAR 0 2
52551: NOT
52552: OR
52553: PUSH
52554: LD_VAR 0 1
52558: PPUSH
52559: CALL_OW 314
52563: OR
52564: IFFALSE 52568
// exit ;
52566: GO 53009
// x := GetX ( enemy_unit ) ;
52568: LD_ADDR_VAR 0 7
52572: PUSH
52573: LD_VAR 0 2
52577: PPUSH
52578: CALL_OW 250
52582: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52583: LD_ADDR_VAR 0 8
52587: PUSH
52588: LD_VAR 0 2
52592: PPUSH
52593: CALL_OW 251
52597: ST_TO_ADDR
// if not x or not y then
52598: LD_VAR 0 7
52602: NOT
52603: PUSH
52604: LD_VAR 0 8
52608: NOT
52609: OR
52610: IFFALSE 52614
// exit ;
52612: GO 53009
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52614: LD_ADDR_VAR 0 6
52618: PUSH
52619: LD_VAR 0 7
52623: PPUSH
52624: LD_INT 0
52626: PPUSH
52627: LD_INT 4
52629: PPUSH
52630: CALL_OW 272
52634: PUSH
52635: LD_VAR 0 8
52639: PPUSH
52640: LD_INT 0
52642: PPUSH
52643: LD_INT 4
52645: PPUSH
52646: CALL_OW 273
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_VAR 0 7
52659: PPUSH
52660: LD_INT 1
52662: PPUSH
52663: LD_INT 4
52665: PPUSH
52666: CALL_OW 272
52670: PUSH
52671: LD_VAR 0 8
52675: PPUSH
52676: LD_INT 1
52678: PPUSH
52679: LD_INT 4
52681: PPUSH
52682: CALL_OW 273
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_VAR 0 7
52695: PPUSH
52696: LD_INT 2
52698: PPUSH
52699: LD_INT 4
52701: PPUSH
52702: CALL_OW 272
52706: PUSH
52707: LD_VAR 0 8
52711: PPUSH
52712: LD_INT 2
52714: PPUSH
52715: LD_INT 4
52717: PPUSH
52718: CALL_OW 273
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_VAR 0 7
52731: PPUSH
52732: LD_INT 3
52734: PPUSH
52735: LD_INT 4
52737: PPUSH
52738: CALL_OW 272
52742: PUSH
52743: LD_VAR 0 8
52747: PPUSH
52748: LD_INT 3
52750: PPUSH
52751: LD_INT 4
52753: PPUSH
52754: CALL_OW 273
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_VAR 0 7
52767: PPUSH
52768: LD_INT 4
52770: PPUSH
52771: LD_INT 4
52773: PPUSH
52774: CALL_OW 272
52778: PUSH
52779: LD_VAR 0 8
52783: PPUSH
52784: LD_INT 4
52786: PPUSH
52787: LD_INT 4
52789: PPUSH
52790: CALL_OW 273
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_VAR 0 7
52803: PPUSH
52804: LD_INT 5
52806: PPUSH
52807: LD_INT 4
52809: PPUSH
52810: CALL_OW 272
52814: PUSH
52815: LD_VAR 0 8
52819: PPUSH
52820: LD_INT 5
52822: PPUSH
52823: LD_INT 4
52825: PPUSH
52826: CALL_OW 273
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: ST_TO_ADDR
// for i = tmp downto 1 do
52843: LD_ADDR_VAR 0 4
52847: PUSH
52848: DOUBLE
52849: LD_VAR 0 6
52853: INC
52854: ST_TO_ADDR
52855: LD_INT 1
52857: PUSH
52858: FOR_DOWNTO
52859: IFFALSE 52960
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52861: LD_VAR 0 6
52865: PUSH
52866: LD_VAR 0 4
52870: ARRAY
52871: PUSH
52872: LD_INT 1
52874: ARRAY
52875: PPUSH
52876: LD_VAR 0 6
52880: PUSH
52881: LD_VAR 0 4
52885: ARRAY
52886: PUSH
52887: LD_INT 2
52889: ARRAY
52890: PPUSH
52891: CALL_OW 488
52895: NOT
52896: PUSH
52897: LD_VAR 0 6
52901: PUSH
52902: LD_VAR 0 4
52906: ARRAY
52907: PUSH
52908: LD_INT 1
52910: ARRAY
52911: PPUSH
52912: LD_VAR 0 6
52916: PUSH
52917: LD_VAR 0 4
52921: ARRAY
52922: PUSH
52923: LD_INT 2
52925: ARRAY
52926: PPUSH
52927: CALL_OW 428
52931: PUSH
52932: LD_INT 0
52934: NONEQUAL
52935: OR
52936: IFFALSE 52958
// tmp := Delete ( tmp , i ) ;
52938: LD_ADDR_VAR 0 6
52942: PUSH
52943: LD_VAR 0 6
52947: PPUSH
52948: LD_VAR 0 4
52952: PPUSH
52953: CALL_OW 3
52957: ST_TO_ADDR
52958: GO 52858
52960: POP
52961: POP
// j := GetClosestHex ( unit , tmp ) ;
52962: LD_ADDR_VAR 0 5
52966: PUSH
52967: LD_VAR 0 1
52971: PPUSH
52972: LD_VAR 0 6
52976: PPUSH
52977: CALL 52262 0 2
52981: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52982: LD_VAR 0 1
52986: PPUSH
52987: LD_VAR 0 5
52991: PUSH
52992: LD_INT 1
52994: ARRAY
52995: PPUSH
52996: LD_VAR 0 5
53000: PUSH
53001: LD_INT 2
53003: ARRAY
53004: PPUSH
53005: CALL_OW 111
// end ;
53009: LD_VAR 0 3
53013: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53014: LD_INT 0
53016: PPUSH
53017: PPUSH
53018: PPUSH
// uc_side = 0 ;
53019: LD_ADDR_OWVAR 20
53023: PUSH
53024: LD_INT 0
53026: ST_TO_ADDR
// uc_nation = 0 ;
53027: LD_ADDR_OWVAR 21
53031: PUSH
53032: LD_INT 0
53034: ST_TO_ADDR
// InitHc ;
53035: CALL_OW 19
// InitVc ;
53039: CALL_OW 20
// if mastodonts then
53043: LD_VAR 0 6
53047: IFFALSE 53114
// for i = 1 to mastodonts do
53049: LD_ADDR_VAR 0 11
53053: PUSH
53054: DOUBLE
53055: LD_INT 1
53057: DEC
53058: ST_TO_ADDR
53059: LD_VAR 0 6
53063: PUSH
53064: FOR_TO
53065: IFFALSE 53112
// begin vc_chassis := 31 ;
53067: LD_ADDR_OWVAR 37
53071: PUSH
53072: LD_INT 31
53074: ST_TO_ADDR
// vc_control := control_rider ;
53075: LD_ADDR_OWVAR 38
53079: PUSH
53080: LD_INT 4
53082: ST_TO_ADDR
// animal := CreateVehicle ;
53083: LD_ADDR_VAR 0 12
53087: PUSH
53088: CALL_OW 45
53092: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53093: LD_VAR 0 12
53097: PPUSH
53098: LD_VAR 0 8
53102: PPUSH
53103: LD_INT 0
53105: PPUSH
53106: CALL 55183 0 3
// end ;
53110: GO 53064
53112: POP
53113: POP
// if horses then
53114: LD_VAR 0 5
53118: IFFALSE 53185
// for i = 1 to horses do
53120: LD_ADDR_VAR 0 11
53124: PUSH
53125: DOUBLE
53126: LD_INT 1
53128: DEC
53129: ST_TO_ADDR
53130: LD_VAR 0 5
53134: PUSH
53135: FOR_TO
53136: IFFALSE 53183
// begin hc_class := 21 ;
53138: LD_ADDR_OWVAR 28
53142: PUSH
53143: LD_INT 21
53145: ST_TO_ADDR
// hc_gallery :=  ;
53146: LD_ADDR_OWVAR 33
53150: PUSH
53151: LD_STRING 
53153: ST_TO_ADDR
// animal := CreateHuman ;
53154: LD_ADDR_VAR 0 12
53158: PUSH
53159: CALL_OW 44
53163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53164: LD_VAR 0 12
53168: PPUSH
53169: LD_VAR 0 8
53173: PPUSH
53174: LD_INT 0
53176: PPUSH
53177: CALL 55183 0 3
// end ;
53181: GO 53135
53183: POP
53184: POP
// if birds then
53185: LD_VAR 0 1
53189: IFFALSE 53256
// for i = 1 to birds do
53191: LD_ADDR_VAR 0 11
53195: PUSH
53196: DOUBLE
53197: LD_INT 1
53199: DEC
53200: ST_TO_ADDR
53201: LD_VAR 0 1
53205: PUSH
53206: FOR_TO
53207: IFFALSE 53254
// begin hc_class = 18 ;
53209: LD_ADDR_OWVAR 28
53213: PUSH
53214: LD_INT 18
53216: ST_TO_ADDR
// hc_gallery =  ;
53217: LD_ADDR_OWVAR 33
53221: PUSH
53222: LD_STRING 
53224: ST_TO_ADDR
// animal := CreateHuman ;
53225: LD_ADDR_VAR 0 12
53229: PUSH
53230: CALL_OW 44
53234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53235: LD_VAR 0 12
53239: PPUSH
53240: LD_VAR 0 8
53244: PPUSH
53245: LD_INT 0
53247: PPUSH
53248: CALL 55183 0 3
// end ;
53252: GO 53206
53254: POP
53255: POP
// if tigers then
53256: LD_VAR 0 2
53260: IFFALSE 53344
// for i = 1 to tigers do
53262: LD_ADDR_VAR 0 11
53266: PUSH
53267: DOUBLE
53268: LD_INT 1
53270: DEC
53271: ST_TO_ADDR
53272: LD_VAR 0 2
53276: PUSH
53277: FOR_TO
53278: IFFALSE 53342
// begin hc_class = class_tiger ;
53280: LD_ADDR_OWVAR 28
53284: PUSH
53285: LD_INT 14
53287: ST_TO_ADDR
// hc_gallery =  ;
53288: LD_ADDR_OWVAR 33
53292: PUSH
53293: LD_STRING 
53295: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53296: LD_ADDR_OWVAR 35
53300: PUSH
53301: LD_INT 7
53303: NEG
53304: PPUSH
53305: LD_INT 7
53307: PPUSH
53308: CALL_OW 12
53312: ST_TO_ADDR
// animal := CreateHuman ;
53313: LD_ADDR_VAR 0 12
53317: PUSH
53318: CALL_OW 44
53322: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53323: LD_VAR 0 12
53327: PPUSH
53328: LD_VAR 0 8
53332: PPUSH
53333: LD_INT 0
53335: PPUSH
53336: CALL 55183 0 3
// end ;
53340: GO 53277
53342: POP
53343: POP
// if apemans then
53344: LD_VAR 0 3
53348: IFFALSE 53471
// for i = 1 to apemans do
53350: LD_ADDR_VAR 0 11
53354: PUSH
53355: DOUBLE
53356: LD_INT 1
53358: DEC
53359: ST_TO_ADDR
53360: LD_VAR 0 3
53364: PUSH
53365: FOR_TO
53366: IFFALSE 53469
// begin hc_class = class_apeman ;
53368: LD_ADDR_OWVAR 28
53372: PUSH
53373: LD_INT 12
53375: ST_TO_ADDR
// hc_gallery =  ;
53376: LD_ADDR_OWVAR 33
53380: PUSH
53381: LD_STRING 
53383: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53384: LD_ADDR_OWVAR 35
53388: PUSH
53389: LD_INT 5
53391: NEG
53392: PPUSH
53393: LD_INT 5
53395: PPUSH
53396: CALL_OW 12
53400: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53401: LD_ADDR_OWVAR 31
53405: PUSH
53406: LD_INT 1
53408: PPUSH
53409: LD_INT 3
53411: PPUSH
53412: CALL_OW 12
53416: PUSH
53417: LD_INT 1
53419: PPUSH
53420: LD_INT 3
53422: PPUSH
53423: CALL_OW 12
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: ST_TO_ADDR
// animal := CreateHuman ;
53440: LD_ADDR_VAR 0 12
53444: PUSH
53445: CALL_OW 44
53449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53450: LD_VAR 0 12
53454: PPUSH
53455: LD_VAR 0 8
53459: PPUSH
53460: LD_INT 0
53462: PPUSH
53463: CALL 55183 0 3
// end ;
53467: GO 53365
53469: POP
53470: POP
// if enchidnas then
53471: LD_VAR 0 4
53475: IFFALSE 53542
// for i = 1 to enchidnas do
53477: LD_ADDR_VAR 0 11
53481: PUSH
53482: DOUBLE
53483: LD_INT 1
53485: DEC
53486: ST_TO_ADDR
53487: LD_VAR 0 4
53491: PUSH
53492: FOR_TO
53493: IFFALSE 53540
// begin hc_class = 13 ;
53495: LD_ADDR_OWVAR 28
53499: PUSH
53500: LD_INT 13
53502: ST_TO_ADDR
// hc_gallery =  ;
53503: LD_ADDR_OWVAR 33
53507: PUSH
53508: LD_STRING 
53510: ST_TO_ADDR
// animal := CreateHuman ;
53511: LD_ADDR_VAR 0 12
53515: PUSH
53516: CALL_OW 44
53520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53521: LD_VAR 0 12
53525: PPUSH
53526: LD_VAR 0 8
53530: PPUSH
53531: LD_INT 0
53533: PPUSH
53534: CALL 55183 0 3
// end ;
53538: GO 53492
53540: POP
53541: POP
// if fishes then
53542: LD_VAR 0 7
53546: IFFALSE 53613
// for i = 1 to fishes do
53548: LD_ADDR_VAR 0 11
53552: PUSH
53553: DOUBLE
53554: LD_INT 1
53556: DEC
53557: ST_TO_ADDR
53558: LD_VAR 0 7
53562: PUSH
53563: FOR_TO
53564: IFFALSE 53611
// begin hc_class = 20 ;
53566: LD_ADDR_OWVAR 28
53570: PUSH
53571: LD_INT 20
53573: ST_TO_ADDR
// hc_gallery =  ;
53574: LD_ADDR_OWVAR 33
53578: PUSH
53579: LD_STRING 
53581: ST_TO_ADDR
// animal := CreateHuman ;
53582: LD_ADDR_VAR 0 12
53586: PUSH
53587: CALL_OW 44
53591: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53592: LD_VAR 0 12
53596: PPUSH
53597: LD_VAR 0 9
53601: PPUSH
53602: LD_INT 0
53604: PPUSH
53605: CALL 55183 0 3
// end ;
53609: GO 53563
53611: POP
53612: POP
// end ;
53613: LD_VAR 0 10
53617: RET
// export function WantHeal ( sci , unit ) ; begin
53618: LD_INT 0
53620: PPUSH
// if GetTaskList ( sci ) > 0 then
53621: LD_VAR 0 1
53625: PPUSH
53626: CALL_OW 437
53630: PUSH
53631: LD_INT 0
53633: GREATER
53634: IFFALSE 53704
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53636: LD_VAR 0 1
53640: PPUSH
53641: CALL_OW 437
53645: PUSH
53646: LD_INT 1
53648: ARRAY
53649: PUSH
53650: LD_INT 1
53652: ARRAY
53653: PUSH
53654: LD_STRING l
53656: EQUAL
53657: PUSH
53658: LD_VAR 0 1
53662: PPUSH
53663: CALL_OW 437
53667: PUSH
53668: LD_INT 1
53670: ARRAY
53671: PUSH
53672: LD_INT 4
53674: ARRAY
53675: PUSH
53676: LD_VAR 0 2
53680: EQUAL
53681: AND
53682: IFFALSE 53694
// result := true else
53684: LD_ADDR_VAR 0 3
53688: PUSH
53689: LD_INT 1
53691: ST_TO_ADDR
53692: GO 53702
// result := false ;
53694: LD_ADDR_VAR 0 3
53698: PUSH
53699: LD_INT 0
53701: ST_TO_ADDR
// end else
53702: GO 53712
// result := false ;
53704: LD_ADDR_VAR 0 3
53708: PUSH
53709: LD_INT 0
53711: ST_TO_ADDR
// end ;
53712: LD_VAR 0 3
53716: RET
// export function HealTarget ( sci ) ; begin
53717: LD_INT 0
53719: PPUSH
// if not sci then
53720: LD_VAR 0 1
53724: NOT
53725: IFFALSE 53729
// exit ;
53727: GO 53794
// result := 0 ;
53729: LD_ADDR_VAR 0 2
53733: PUSH
53734: LD_INT 0
53736: ST_TO_ADDR
// if GetTaskList ( sci ) then
53737: LD_VAR 0 1
53741: PPUSH
53742: CALL_OW 437
53746: IFFALSE 53794
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53748: LD_VAR 0 1
53752: PPUSH
53753: CALL_OW 437
53757: PUSH
53758: LD_INT 1
53760: ARRAY
53761: PUSH
53762: LD_INT 1
53764: ARRAY
53765: PUSH
53766: LD_STRING l
53768: EQUAL
53769: IFFALSE 53794
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53771: LD_ADDR_VAR 0 2
53775: PUSH
53776: LD_VAR 0 1
53780: PPUSH
53781: CALL_OW 437
53785: PUSH
53786: LD_INT 1
53788: ARRAY
53789: PUSH
53790: LD_INT 4
53792: ARRAY
53793: ST_TO_ADDR
// end ;
53794: LD_VAR 0 2
53798: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53799: LD_INT 0
53801: PPUSH
53802: PPUSH
53803: PPUSH
53804: PPUSH
// if not base_units then
53805: LD_VAR 0 1
53809: NOT
53810: IFFALSE 53814
// exit ;
53812: GO 53901
// result := false ;
53814: LD_ADDR_VAR 0 2
53818: PUSH
53819: LD_INT 0
53821: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53822: LD_ADDR_VAR 0 5
53826: PUSH
53827: LD_VAR 0 1
53831: PPUSH
53832: LD_INT 21
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PPUSH
53842: CALL_OW 72
53846: ST_TO_ADDR
// if not tmp then
53847: LD_VAR 0 5
53851: NOT
53852: IFFALSE 53856
// exit ;
53854: GO 53901
// for i in tmp do
53856: LD_ADDR_VAR 0 3
53860: PUSH
53861: LD_VAR 0 5
53865: PUSH
53866: FOR_IN
53867: IFFALSE 53899
// begin result := EnemyInRange ( i , 22 ) ;
53869: LD_ADDR_VAR 0 2
53873: PUSH
53874: LD_VAR 0 3
53878: PPUSH
53879: LD_INT 22
53881: PPUSH
53882: CALL 52137 0 2
53886: ST_TO_ADDR
// if result then
53887: LD_VAR 0 2
53891: IFFALSE 53897
// exit ;
53893: POP
53894: POP
53895: GO 53901
// end ;
53897: GO 53866
53899: POP
53900: POP
// end ;
53901: LD_VAR 0 2
53905: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53906: LD_INT 0
53908: PPUSH
53909: PPUSH
// if not units then
53910: LD_VAR 0 1
53914: NOT
53915: IFFALSE 53919
// exit ;
53917: GO 53989
// result := [ ] ;
53919: LD_ADDR_VAR 0 3
53923: PUSH
53924: EMPTY
53925: ST_TO_ADDR
// for i in units do
53926: LD_ADDR_VAR 0 4
53930: PUSH
53931: LD_VAR 0 1
53935: PUSH
53936: FOR_IN
53937: IFFALSE 53987
// if GetTag ( i ) = tag then
53939: LD_VAR 0 4
53943: PPUSH
53944: CALL_OW 110
53948: PUSH
53949: LD_VAR 0 2
53953: EQUAL
53954: IFFALSE 53985
// result := Insert ( result , result + 1 , i ) ;
53956: LD_ADDR_VAR 0 3
53960: PUSH
53961: LD_VAR 0 3
53965: PPUSH
53966: LD_VAR 0 3
53970: PUSH
53971: LD_INT 1
53973: PLUS
53974: PPUSH
53975: LD_VAR 0 4
53979: PPUSH
53980: CALL_OW 2
53984: ST_TO_ADDR
53985: GO 53936
53987: POP
53988: POP
// end ;
53989: LD_VAR 0 3
53993: RET
// export function IsDriver ( un ) ; begin
53994: LD_INT 0
53996: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53997: LD_ADDR_VAR 0 2
54001: PUSH
54002: LD_VAR 0 1
54006: PUSH
54007: LD_INT 55
54009: PUSH
54010: EMPTY
54011: LIST
54012: PPUSH
54013: CALL_OW 69
54017: IN
54018: ST_TO_ADDR
// end ;
54019: LD_VAR 0 2
54023: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54024: LD_INT 0
54026: PPUSH
54027: PPUSH
// list := [ ] ;
54028: LD_ADDR_VAR 0 5
54032: PUSH
54033: EMPTY
54034: ST_TO_ADDR
// case d of 0 :
54035: LD_VAR 0 3
54039: PUSH
54040: LD_INT 0
54042: DOUBLE
54043: EQUAL
54044: IFTRUE 54048
54046: GO 54181
54048: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54049: LD_ADDR_VAR 0 5
54053: PUSH
54054: LD_VAR 0 1
54058: PUSH
54059: LD_INT 4
54061: MINUS
54062: PUSH
54063: LD_VAR 0 2
54067: PUSH
54068: LD_INT 4
54070: MINUS
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: LIST
54079: PUSH
54080: LD_VAR 0 1
54084: PUSH
54085: LD_INT 3
54087: MINUS
54088: PUSH
54089: LD_VAR 0 2
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: PUSH
54102: LD_VAR 0 1
54106: PUSH
54107: LD_INT 4
54109: PLUS
54110: PUSH
54111: LD_VAR 0 2
54115: PUSH
54116: LD_INT 4
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: LIST
54123: PUSH
54124: LD_VAR 0 1
54128: PUSH
54129: LD_INT 3
54131: PLUS
54132: PUSH
54133: LD_VAR 0 2
54137: PUSH
54138: LD_INT 3
54140: PLUS
54141: PUSH
54142: LD_INT 5
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: PUSH
54150: LD_VAR 0 1
54154: PUSH
54155: LD_VAR 0 2
54159: PUSH
54160: LD_INT 4
54162: PLUS
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: ST_TO_ADDR
// end ; 1 :
54179: GO 54879
54181: LD_INT 1
54183: DOUBLE
54184: EQUAL
54185: IFTRUE 54189
54187: GO 54322
54189: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54190: LD_ADDR_VAR 0 5
54194: PUSH
54195: LD_VAR 0 1
54199: PUSH
54200: LD_VAR 0 2
54204: PUSH
54205: LD_INT 4
54207: MINUS
54208: PUSH
54209: LD_INT 3
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: LIST
54216: PUSH
54217: LD_VAR 0 1
54221: PUSH
54222: LD_INT 3
54224: MINUS
54225: PUSH
54226: LD_VAR 0 2
54230: PUSH
54231: LD_INT 3
54233: MINUS
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: LIST
54242: PUSH
54243: LD_VAR 0 1
54247: PUSH
54248: LD_INT 4
54250: MINUS
54251: PUSH
54252: LD_VAR 0 2
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: LIST
54264: PUSH
54265: LD_VAR 0 1
54269: PUSH
54270: LD_VAR 0 2
54274: PUSH
54275: LD_INT 3
54277: PLUS
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: LIST
54286: PUSH
54287: LD_VAR 0 1
54291: PUSH
54292: LD_INT 4
54294: PLUS
54295: PUSH
54296: LD_VAR 0 2
54300: PUSH
54301: LD_INT 4
54303: PLUS
54304: PUSH
54305: LD_INT 5
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: LIST
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: ST_TO_ADDR
// end ; 2 :
54320: GO 54879
54322: LD_INT 2
54324: DOUBLE
54325: EQUAL
54326: IFTRUE 54330
54328: GO 54459
54330: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54331: LD_ADDR_VAR 0 5
54335: PUSH
54336: LD_VAR 0 1
54340: PUSH
54341: LD_VAR 0 2
54345: PUSH
54346: LD_INT 3
54348: MINUS
54349: PUSH
54350: LD_INT 3
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: PUSH
54358: LD_VAR 0 1
54362: PUSH
54363: LD_INT 4
54365: PLUS
54366: PUSH
54367: LD_VAR 0 2
54371: PUSH
54372: LD_INT 4
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: LIST
54379: PUSH
54380: LD_VAR 0 1
54384: PUSH
54385: LD_VAR 0 2
54389: PUSH
54390: LD_INT 4
54392: PLUS
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: LIST
54401: PUSH
54402: LD_VAR 0 1
54406: PUSH
54407: LD_INT 3
54409: MINUS
54410: PUSH
54411: LD_VAR 0 2
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: LIST
54423: PUSH
54424: LD_VAR 0 1
54428: PUSH
54429: LD_INT 4
54431: MINUS
54432: PUSH
54433: LD_VAR 0 2
54437: PUSH
54438: LD_INT 4
54440: MINUS
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: LIST
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: ST_TO_ADDR
// end ; 3 :
54457: GO 54879
54459: LD_INT 3
54461: DOUBLE
54462: EQUAL
54463: IFTRUE 54467
54465: GO 54600
54467: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54468: LD_ADDR_VAR 0 5
54472: PUSH
54473: LD_VAR 0 1
54477: PUSH
54478: LD_INT 3
54480: PLUS
54481: PUSH
54482: LD_VAR 0 2
54486: PUSH
54487: LD_INT 4
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: LIST
54494: PUSH
54495: LD_VAR 0 1
54499: PUSH
54500: LD_INT 4
54502: PLUS
54503: PUSH
54504: LD_VAR 0 2
54508: PUSH
54509: LD_INT 4
54511: PLUS
54512: PUSH
54513: LD_INT 5
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: LIST
54520: PUSH
54521: LD_VAR 0 1
54525: PUSH
54526: LD_INT 4
54528: MINUS
54529: PUSH
54530: LD_VAR 0 2
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: LIST
54542: PUSH
54543: LD_VAR 0 1
54547: PUSH
54548: LD_VAR 0 2
54552: PUSH
54553: LD_INT 4
54555: MINUS
54556: PUSH
54557: LD_INT 3
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: LIST
54564: PUSH
54565: LD_VAR 0 1
54569: PUSH
54570: LD_INT 3
54572: MINUS
54573: PUSH
54574: LD_VAR 0 2
54578: PUSH
54579: LD_INT 3
54581: MINUS
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: LIST
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: ST_TO_ADDR
// end ; 4 :
54598: GO 54879
54600: LD_INT 4
54602: DOUBLE
54603: EQUAL
54604: IFTRUE 54608
54606: GO 54741
54608: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54609: LD_ADDR_VAR 0 5
54613: PUSH
54614: LD_VAR 0 1
54618: PUSH
54619: LD_VAR 0 2
54623: PUSH
54624: LD_INT 4
54626: PLUS
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: LIST
54635: PUSH
54636: LD_VAR 0 1
54640: PUSH
54641: LD_INT 3
54643: PLUS
54644: PUSH
54645: LD_VAR 0 2
54649: PUSH
54650: LD_INT 3
54652: PLUS
54653: PUSH
54654: LD_INT 5
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: LIST
54661: PUSH
54662: LD_VAR 0 1
54666: PUSH
54667: LD_INT 4
54669: PLUS
54670: PUSH
54671: LD_VAR 0 2
54675: PUSH
54676: LD_INT 4
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: LIST
54683: PUSH
54684: LD_VAR 0 1
54688: PUSH
54689: LD_VAR 0 2
54693: PUSH
54694: LD_INT 3
54696: MINUS
54697: PUSH
54698: LD_INT 3
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: LIST
54705: PUSH
54706: LD_VAR 0 1
54710: PUSH
54711: LD_INT 4
54713: MINUS
54714: PUSH
54715: LD_VAR 0 2
54719: PUSH
54720: LD_INT 4
54722: MINUS
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: ST_TO_ADDR
// end ; 5 :
54739: GO 54879
54741: LD_INT 5
54743: DOUBLE
54744: EQUAL
54745: IFTRUE 54749
54747: GO 54878
54749: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54750: LD_ADDR_VAR 0 5
54754: PUSH
54755: LD_VAR 0 1
54759: PUSH
54760: LD_INT 4
54762: MINUS
54763: PUSH
54764: LD_VAR 0 2
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: LIST
54776: PUSH
54777: LD_VAR 0 1
54781: PUSH
54782: LD_VAR 0 2
54786: PUSH
54787: LD_INT 4
54789: MINUS
54790: PUSH
54791: LD_INT 3
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: LIST
54798: PUSH
54799: LD_VAR 0 1
54803: PUSH
54804: LD_INT 4
54806: PLUS
54807: PUSH
54808: LD_VAR 0 2
54812: PUSH
54813: LD_INT 4
54815: PLUS
54816: PUSH
54817: LD_INT 5
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: LIST
54824: PUSH
54825: LD_VAR 0 1
54829: PUSH
54830: LD_INT 3
54832: PLUS
54833: PUSH
54834: LD_VAR 0 2
54838: PUSH
54839: LD_INT 4
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: LIST
54846: PUSH
54847: LD_VAR 0 1
54851: PUSH
54852: LD_VAR 0 2
54856: PUSH
54857: LD_INT 3
54859: PLUS
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: LIST
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: ST_TO_ADDR
// end ; end ;
54876: GO 54879
54878: POP
// result := list ;
54879: LD_ADDR_VAR 0 4
54883: PUSH
54884: LD_VAR 0 5
54888: ST_TO_ADDR
// end ;
54889: LD_VAR 0 4
54893: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54894: LD_INT 0
54896: PPUSH
54897: PPUSH
54898: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54899: LD_VAR 0 1
54903: NOT
54904: PUSH
54905: LD_VAR 0 2
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 3
54918: PUSH
54919: LD_INT 4
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: IN
54928: NOT
54929: OR
54930: IFFALSE 54934
// exit ;
54932: GO 55026
// tmp := [ ] ;
54934: LD_ADDR_VAR 0 5
54938: PUSH
54939: EMPTY
54940: ST_TO_ADDR
// for i in units do
54941: LD_ADDR_VAR 0 4
54945: PUSH
54946: LD_VAR 0 1
54950: PUSH
54951: FOR_IN
54952: IFFALSE 54995
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54954: LD_ADDR_VAR 0 5
54958: PUSH
54959: LD_VAR 0 5
54963: PPUSH
54964: LD_VAR 0 5
54968: PUSH
54969: LD_INT 1
54971: PLUS
54972: PPUSH
54973: LD_VAR 0 4
54977: PPUSH
54978: LD_VAR 0 2
54982: PPUSH
54983: CALL_OW 259
54987: PPUSH
54988: CALL_OW 2
54992: ST_TO_ADDR
54993: GO 54951
54995: POP
54996: POP
// if not tmp then
54997: LD_VAR 0 5
55001: NOT
55002: IFFALSE 55006
// exit ;
55004: GO 55026
// result := SortListByListDesc ( units , tmp ) ;
55006: LD_ADDR_VAR 0 3
55010: PUSH
55011: LD_VAR 0 1
55015: PPUSH
55016: LD_VAR 0 5
55020: PPUSH
55021: CALL_OW 77
55025: ST_TO_ADDR
// end ;
55026: LD_VAR 0 3
55030: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55031: LD_INT 0
55033: PPUSH
55034: PPUSH
55035: PPUSH
// x := GetX ( building ) ;
55036: LD_ADDR_VAR 0 4
55040: PUSH
55041: LD_VAR 0 2
55045: PPUSH
55046: CALL_OW 250
55050: ST_TO_ADDR
// y := GetY ( building ) ;
55051: LD_ADDR_VAR 0 5
55055: PUSH
55056: LD_VAR 0 2
55060: PPUSH
55061: CALL_OW 251
55065: ST_TO_ADDR
// if GetTaskList ( unit ) then
55066: LD_VAR 0 1
55070: PPUSH
55071: CALL_OW 437
55075: IFFALSE 55170
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55077: LD_STRING e
55079: PUSH
55080: LD_VAR 0 1
55084: PPUSH
55085: CALL_OW 437
55089: PUSH
55090: LD_INT 1
55092: ARRAY
55093: PUSH
55094: LD_INT 1
55096: ARRAY
55097: EQUAL
55098: PUSH
55099: LD_VAR 0 4
55103: PUSH
55104: LD_VAR 0 1
55108: PPUSH
55109: CALL_OW 437
55113: PUSH
55114: LD_INT 1
55116: ARRAY
55117: PUSH
55118: LD_INT 2
55120: ARRAY
55121: EQUAL
55122: AND
55123: PUSH
55124: LD_VAR 0 5
55128: PUSH
55129: LD_VAR 0 1
55133: PPUSH
55134: CALL_OW 437
55138: PUSH
55139: LD_INT 1
55141: ARRAY
55142: PUSH
55143: LD_INT 3
55145: ARRAY
55146: EQUAL
55147: AND
55148: IFFALSE 55160
// result := true else
55150: LD_ADDR_VAR 0 3
55154: PUSH
55155: LD_INT 1
55157: ST_TO_ADDR
55158: GO 55168
// result := false ;
55160: LD_ADDR_VAR 0 3
55164: PUSH
55165: LD_INT 0
55167: ST_TO_ADDR
// end else
55168: GO 55178
// result := false ;
55170: LD_ADDR_VAR 0 3
55174: PUSH
55175: LD_INT 0
55177: ST_TO_ADDR
// end ;
55178: LD_VAR 0 3
55182: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55183: LD_INT 0
55185: PPUSH
55186: PPUSH
55187: PPUSH
55188: PPUSH
// if not unit or not area then
55189: LD_VAR 0 1
55193: NOT
55194: PUSH
55195: LD_VAR 0 2
55199: NOT
55200: OR
55201: IFFALSE 55205
// exit ;
55203: GO 55369
// tmp := AreaToList ( area , i ) ;
55205: LD_ADDR_VAR 0 6
55209: PUSH
55210: LD_VAR 0 2
55214: PPUSH
55215: LD_VAR 0 5
55219: PPUSH
55220: CALL_OW 517
55224: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55225: LD_ADDR_VAR 0 5
55229: PUSH
55230: DOUBLE
55231: LD_INT 1
55233: DEC
55234: ST_TO_ADDR
55235: LD_VAR 0 6
55239: PUSH
55240: LD_INT 1
55242: ARRAY
55243: PUSH
55244: FOR_TO
55245: IFFALSE 55367
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55247: LD_ADDR_VAR 0 7
55251: PUSH
55252: LD_VAR 0 6
55256: PUSH
55257: LD_INT 1
55259: ARRAY
55260: PUSH
55261: LD_VAR 0 5
55265: ARRAY
55266: PUSH
55267: LD_VAR 0 6
55271: PUSH
55272: LD_INT 2
55274: ARRAY
55275: PUSH
55276: LD_VAR 0 5
55280: ARRAY
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55286: LD_VAR 0 7
55290: PUSH
55291: LD_INT 1
55293: ARRAY
55294: PPUSH
55295: LD_VAR 0 7
55299: PUSH
55300: LD_INT 2
55302: ARRAY
55303: PPUSH
55304: CALL_OW 428
55308: PUSH
55309: LD_INT 0
55311: EQUAL
55312: IFFALSE 55365
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55314: LD_VAR 0 1
55318: PPUSH
55319: LD_VAR 0 7
55323: PUSH
55324: LD_INT 1
55326: ARRAY
55327: PPUSH
55328: LD_VAR 0 7
55332: PUSH
55333: LD_INT 2
55335: ARRAY
55336: PPUSH
55337: LD_VAR 0 3
55341: PPUSH
55342: CALL_OW 48
// result := IsPlaced ( unit ) ;
55346: LD_ADDR_VAR 0 4
55350: PUSH
55351: LD_VAR 0 1
55355: PPUSH
55356: CALL_OW 305
55360: ST_TO_ADDR
// exit ;
55361: POP
55362: POP
55363: GO 55369
// end ; end ;
55365: GO 55244
55367: POP
55368: POP
// end ;
55369: LD_VAR 0 4
55373: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55374: LD_INT 0
55376: PPUSH
55377: PPUSH
55378: PPUSH
// if not side or side > 8 then
55379: LD_VAR 0 1
55383: NOT
55384: PUSH
55385: LD_VAR 0 1
55389: PUSH
55390: LD_INT 8
55392: GREATER
55393: OR
55394: IFFALSE 55398
// exit ;
55396: GO 55585
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55398: LD_ADDR_VAR 0 4
55402: PUSH
55403: LD_INT 22
55405: PUSH
55406: LD_VAR 0 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 21
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PPUSH
55429: CALL_OW 69
55433: ST_TO_ADDR
// if not tmp then
55434: LD_VAR 0 4
55438: NOT
55439: IFFALSE 55443
// exit ;
55441: GO 55585
// enable_addtolog := true ;
55443: LD_ADDR_OWVAR 81
55447: PUSH
55448: LD_INT 1
55450: ST_TO_ADDR
// AddToLog ( [ ) ;
55451: LD_STRING [
55453: PPUSH
55454: CALL_OW 561
// for i in tmp do
55458: LD_ADDR_VAR 0 3
55462: PUSH
55463: LD_VAR 0 4
55467: PUSH
55468: FOR_IN
55469: IFFALSE 55576
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55471: LD_STRING [
55473: PUSH
55474: LD_VAR 0 3
55478: PPUSH
55479: CALL_OW 266
55483: STR
55484: PUSH
55485: LD_STRING , 
55487: STR
55488: PUSH
55489: LD_VAR 0 3
55493: PPUSH
55494: CALL_OW 250
55498: STR
55499: PUSH
55500: LD_STRING , 
55502: STR
55503: PUSH
55504: LD_VAR 0 3
55508: PPUSH
55509: CALL_OW 251
55513: STR
55514: PUSH
55515: LD_STRING , 
55517: STR
55518: PUSH
55519: LD_VAR 0 3
55523: PPUSH
55524: CALL_OW 254
55528: STR
55529: PUSH
55530: LD_STRING , 
55532: STR
55533: PUSH
55534: LD_VAR 0 3
55538: PPUSH
55539: LD_INT 1
55541: PPUSH
55542: CALL_OW 268
55546: STR
55547: PUSH
55548: LD_STRING , 
55550: STR
55551: PUSH
55552: LD_VAR 0 3
55556: PPUSH
55557: LD_INT 2
55559: PPUSH
55560: CALL_OW 268
55564: STR
55565: PUSH
55566: LD_STRING ],
55568: STR
55569: PPUSH
55570: CALL_OW 561
// end ;
55574: GO 55468
55576: POP
55577: POP
// AddToLog ( ]; ) ;
55578: LD_STRING ];
55580: PPUSH
55581: CALL_OW 561
// end ;
55585: LD_VAR 0 2
55589: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55590: LD_INT 0
55592: PPUSH
55593: PPUSH
55594: PPUSH
55595: PPUSH
55596: PPUSH
// if not area or not rate or not max then
55597: LD_VAR 0 1
55601: NOT
55602: PUSH
55603: LD_VAR 0 2
55607: NOT
55608: OR
55609: PUSH
55610: LD_VAR 0 4
55614: NOT
55615: OR
55616: IFFALSE 55620
// exit ;
55618: GO 55812
// while 1 do
55620: LD_INT 1
55622: IFFALSE 55812
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55624: LD_ADDR_VAR 0 9
55628: PUSH
55629: LD_VAR 0 1
55633: PPUSH
55634: LD_INT 1
55636: PPUSH
55637: CALL_OW 287
55641: PUSH
55642: LD_INT 10
55644: MUL
55645: ST_TO_ADDR
// r := rate / 10 ;
55646: LD_ADDR_VAR 0 7
55650: PUSH
55651: LD_VAR 0 2
55655: PUSH
55656: LD_INT 10
55658: DIVREAL
55659: ST_TO_ADDR
// time := 1 1$00 ;
55660: LD_ADDR_VAR 0 8
55664: PUSH
55665: LD_INT 2100
55667: ST_TO_ADDR
// if amount < min then
55668: LD_VAR 0 9
55672: PUSH
55673: LD_VAR 0 3
55677: LESS
55678: IFFALSE 55696
// r := r * 2 else
55680: LD_ADDR_VAR 0 7
55684: PUSH
55685: LD_VAR 0 7
55689: PUSH
55690: LD_INT 2
55692: MUL
55693: ST_TO_ADDR
55694: GO 55722
// if amount > max then
55696: LD_VAR 0 9
55700: PUSH
55701: LD_VAR 0 4
55705: GREATER
55706: IFFALSE 55722
// r := r / 2 ;
55708: LD_ADDR_VAR 0 7
55712: PUSH
55713: LD_VAR 0 7
55717: PUSH
55718: LD_INT 2
55720: DIVREAL
55721: ST_TO_ADDR
// time := time / r ;
55722: LD_ADDR_VAR 0 8
55726: PUSH
55727: LD_VAR 0 8
55731: PUSH
55732: LD_VAR 0 7
55736: DIVREAL
55737: ST_TO_ADDR
// if time < 0 then
55738: LD_VAR 0 8
55742: PUSH
55743: LD_INT 0
55745: LESS
55746: IFFALSE 55763
// time := time * - 1 ;
55748: LD_ADDR_VAR 0 8
55752: PUSH
55753: LD_VAR 0 8
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: MUL
55762: ST_TO_ADDR
// wait ( time ) ;
55763: LD_VAR 0 8
55767: PPUSH
55768: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55772: LD_INT 35
55774: PPUSH
55775: LD_INT 875
55777: PPUSH
55778: CALL_OW 12
55782: PPUSH
55783: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55787: LD_INT 1
55789: PPUSH
55790: LD_INT 5
55792: PPUSH
55793: CALL_OW 12
55797: PPUSH
55798: LD_VAR 0 1
55802: PPUSH
55803: LD_INT 1
55805: PPUSH
55806: CALL_OW 55
// end ;
55810: GO 55620
// end ;
55812: LD_VAR 0 5
55816: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55817: LD_INT 0
55819: PPUSH
55820: PPUSH
55821: PPUSH
55822: PPUSH
55823: PPUSH
55824: PPUSH
55825: PPUSH
55826: PPUSH
// if not turrets or not factories then
55827: LD_VAR 0 1
55831: NOT
55832: PUSH
55833: LD_VAR 0 2
55837: NOT
55838: OR
55839: IFFALSE 55843
// exit ;
55841: GO 56150
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55843: LD_ADDR_VAR 0 10
55847: PUSH
55848: LD_INT 5
55850: PUSH
55851: LD_INT 6
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: LD_INT 4
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 3
55870: PUSH
55871: LD_INT 5
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 24
55885: PUSH
55886: LD_INT 25
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 23
55895: PUSH
55896: LD_INT 27
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 42
55909: PUSH
55910: LD_INT 43
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 44
55919: PUSH
55920: LD_INT 46
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 45
55929: PUSH
55930: LD_INT 47
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: LIST
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: ST_TO_ADDR
// result := [ ] ;
55947: LD_ADDR_VAR 0 3
55951: PUSH
55952: EMPTY
55953: ST_TO_ADDR
// for i in turrets do
55954: LD_ADDR_VAR 0 4
55958: PUSH
55959: LD_VAR 0 1
55963: PUSH
55964: FOR_IN
55965: IFFALSE 56148
// begin nat := GetNation ( i ) ;
55967: LD_ADDR_VAR 0 7
55971: PUSH
55972: LD_VAR 0 4
55976: PPUSH
55977: CALL_OW 248
55981: ST_TO_ADDR
// weapon := 0 ;
55982: LD_ADDR_VAR 0 8
55986: PUSH
55987: LD_INT 0
55989: ST_TO_ADDR
// if not nat then
55990: LD_VAR 0 7
55994: NOT
55995: IFFALSE 55999
// continue ;
55997: GO 55964
// for j in list [ nat ] do
55999: LD_ADDR_VAR 0 5
56003: PUSH
56004: LD_VAR 0 10
56008: PUSH
56009: LD_VAR 0 7
56013: ARRAY
56014: PUSH
56015: FOR_IN
56016: IFFALSE 56057
// if GetBWeapon ( i ) = j [ 1 ] then
56018: LD_VAR 0 4
56022: PPUSH
56023: CALL_OW 269
56027: PUSH
56028: LD_VAR 0 5
56032: PUSH
56033: LD_INT 1
56035: ARRAY
56036: EQUAL
56037: IFFALSE 56055
// begin weapon := j [ 2 ] ;
56039: LD_ADDR_VAR 0 8
56043: PUSH
56044: LD_VAR 0 5
56048: PUSH
56049: LD_INT 2
56051: ARRAY
56052: ST_TO_ADDR
// break ;
56053: GO 56057
// end ;
56055: GO 56015
56057: POP
56058: POP
// if not weapon then
56059: LD_VAR 0 8
56063: NOT
56064: IFFALSE 56068
// continue ;
56066: GO 55964
// for k in factories do
56068: LD_ADDR_VAR 0 6
56072: PUSH
56073: LD_VAR 0 2
56077: PUSH
56078: FOR_IN
56079: IFFALSE 56144
// begin weapons := AvailableWeaponList ( k ) ;
56081: LD_ADDR_VAR 0 9
56085: PUSH
56086: LD_VAR 0 6
56090: PPUSH
56091: CALL_OW 478
56095: ST_TO_ADDR
// if not weapons then
56096: LD_VAR 0 9
56100: NOT
56101: IFFALSE 56105
// continue ;
56103: GO 56078
// if weapon in weapons then
56105: LD_VAR 0 8
56109: PUSH
56110: LD_VAR 0 9
56114: IN
56115: IFFALSE 56142
// begin result := [ i , weapon ] ;
56117: LD_ADDR_VAR 0 3
56121: PUSH
56122: LD_VAR 0 4
56126: PUSH
56127: LD_VAR 0 8
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// exit ;
56136: POP
56137: POP
56138: POP
56139: POP
56140: GO 56150
// end ; end ;
56142: GO 56078
56144: POP
56145: POP
// end ;
56146: GO 55964
56148: POP
56149: POP
// end ;
56150: LD_VAR 0 3
56154: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56155: LD_INT 0
56157: PPUSH
// if not side or side > 8 then
56158: LD_VAR 0 3
56162: NOT
56163: PUSH
56164: LD_VAR 0 3
56168: PUSH
56169: LD_INT 8
56171: GREATER
56172: OR
56173: IFFALSE 56177
// exit ;
56175: GO 56236
// if not range then
56177: LD_VAR 0 4
56181: NOT
56182: IFFALSE 56193
// range := - 12 ;
56184: LD_ADDR_VAR 0 4
56188: PUSH
56189: LD_INT 12
56191: NEG
56192: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56193: LD_VAR 0 1
56197: PPUSH
56198: LD_VAR 0 2
56202: PPUSH
56203: LD_VAR 0 3
56207: PPUSH
56208: LD_VAR 0 4
56212: PPUSH
56213: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56217: LD_VAR 0 1
56221: PPUSH
56222: LD_VAR 0 2
56226: PPUSH
56227: LD_VAR 0 3
56231: PPUSH
56232: CALL_OW 331
// end ;
56236: LD_VAR 0 5
56240: RET
// export function Video ( mode ) ; begin
56241: LD_INT 0
56243: PPUSH
// ingame_video = mode ;
56244: LD_ADDR_OWVAR 52
56248: PUSH
56249: LD_VAR 0 1
56253: ST_TO_ADDR
// interface_hidden = mode ;
56254: LD_ADDR_OWVAR 54
56258: PUSH
56259: LD_VAR 0 1
56263: ST_TO_ADDR
// end ;
56264: LD_VAR 0 2
56268: RET
// export function Join ( array , element ) ; begin
56269: LD_INT 0
56271: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56272: LD_ADDR_VAR 0 3
56276: PUSH
56277: LD_VAR 0 1
56281: PPUSH
56282: LD_VAR 0 1
56286: PUSH
56287: LD_INT 1
56289: PLUS
56290: PPUSH
56291: LD_VAR 0 2
56295: PPUSH
56296: CALL_OW 1
56300: ST_TO_ADDR
// end ;
56301: LD_VAR 0 3
56305: RET
// export function JoinUnion ( array , element ) ; begin
56306: LD_INT 0
56308: PPUSH
// result := array union element ;
56309: LD_ADDR_VAR 0 3
56313: PUSH
56314: LD_VAR 0 1
56318: PUSH
56319: LD_VAR 0 2
56323: UNION
56324: ST_TO_ADDR
// end ;
56325: LD_VAR 0 3
56329: RET
// export function GetBehemoths ( side ) ; begin
56330: LD_INT 0
56332: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56333: LD_ADDR_VAR 0 2
56337: PUSH
56338: LD_INT 22
56340: PUSH
56341: LD_VAR 0 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 31
56352: PUSH
56353: LD_INT 25
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PPUSH
56364: CALL_OW 69
56368: ST_TO_ADDR
// end ;
56369: LD_VAR 0 2
56373: RET
// export function Shuffle ( array ) ; var i , index ; begin
56374: LD_INT 0
56376: PPUSH
56377: PPUSH
56378: PPUSH
// result := [ ] ;
56379: LD_ADDR_VAR 0 2
56383: PUSH
56384: EMPTY
56385: ST_TO_ADDR
// if not array then
56386: LD_VAR 0 1
56390: NOT
56391: IFFALSE 56395
// exit ;
56393: GO 56494
// Randomize ;
56395: CALL_OW 10
// for i = array downto 1 do
56399: LD_ADDR_VAR 0 3
56403: PUSH
56404: DOUBLE
56405: LD_VAR 0 1
56409: INC
56410: ST_TO_ADDR
56411: LD_INT 1
56413: PUSH
56414: FOR_DOWNTO
56415: IFFALSE 56492
// begin index := rand ( 1 , array ) ;
56417: LD_ADDR_VAR 0 4
56421: PUSH
56422: LD_INT 1
56424: PPUSH
56425: LD_VAR 0 1
56429: PPUSH
56430: CALL_OW 12
56434: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56435: LD_ADDR_VAR 0 2
56439: PUSH
56440: LD_VAR 0 2
56444: PPUSH
56445: LD_VAR 0 2
56449: PUSH
56450: LD_INT 1
56452: PLUS
56453: PPUSH
56454: LD_VAR 0 1
56458: PUSH
56459: LD_VAR 0 4
56463: ARRAY
56464: PPUSH
56465: CALL_OW 2
56469: ST_TO_ADDR
// array := Delete ( array , index ) ;
56470: LD_ADDR_VAR 0 1
56474: PUSH
56475: LD_VAR 0 1
56479: PPUSH
56480: LD_VAR 0 4
56484: PPUSH
56485: CALL_OW 3
56489: ST_TO_ADDR
// end ;
56490: GO 56414
56492: POP
56493: POP
// end ;
56494: LD_VAR 0 2
56498: RET
// export function GetBaseMaterials ( base ) ; begin
56499: LD_INT 0
56501: PPUSH
// result := [ 0 , 0 , 0 ] ;
56502: LD_ADDR_VAR 0 2
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: LIST
56520: ST_TO_ADDR
// if not base then
56521: LD_VAR 0 1
56525: NOT
56526: IFFALSE 56530
// exit ;
56528: GO 56579
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56530: LD_ADDR_VAR 0 2
56534: PUSH
56535: LD_VAR 0 1
56539: PPUSH
56540: LD_INT 1
56542: PPUSH
56543: CALL_OW 275
56547: PUSH
56548: LD_VAR 0 1
56552: PPUSH
56553: LD_INT 2
56555: PPUSH
56556: CALL_OW 275
56560: PUSH
56561: LD_VAR 0 1
56565: PPUSH
56566: LD_INT 3
56568: PPUSH
56569: CALL_OW 275
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: LIST
56578: ST_TO_ADDR
// end ;
56579: LD_VAR 0 2
56583: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56584: LD_INT 0
56586: PPUSH
56587: PPUSH
// result := array ;
56588: LD_ADDR_VAR 0 3
56592: PUSH
56593: LD_VAR 0 1
56597: ST_TO_ADDR
// if size > 0 then
56598: LD_VAR 0 2
56602: PUSH
56603: LD_INT 0
56605: GREATER
56606: IFFALSE 56652
// for i := array downto size do
56608: LD_ADDR_VAR 0 4
56612: PUSH
56613: DOUBLE
56614: LD_VAR 0 1
56618: INC
56619: ST_TO_ADDR
56620: LD_VAR 0 2
56624: PUSH
56625: FOR_DOWNTO
56626: IFFALSE 56650
// result := Delete ( result , result ) ;
56628: LD_ADDR_VAR 0 3
56632: PUSH
56633: LD_VAR 0 3
56637: PPUSH
56638: LD_VAR 0 3
56642: PPUSH
56643: CALL_OW 3
56647: ST_TO_ADDR
56648: GO 56625
56650: POP
56651: POP
// end ;
56652: LD_VAR 0 3
56656: RET
// export function ComExit ( unit ) ; var tmp ; begin
56657: LD_INT 0
56659: PPUSH
56660: PPUSH
// if not IsInUnit ( unit ) then
56661: LD_VAR 0 1
56665: PPUSH
56666: CALL_OW 310
56670: NOT
56671: IFFALSE 56675
// exit ;
56673: GO 56735
// tmp := IsInUnit ( unit ) ;
56675: LD_ADDR_VAR 0 3
56679: PUSH
56680: LD_VAR 0 1
56684: PPUSH
56685: CALL_OW 310
56689: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56690: LD_VAR 0 3
56694: PPUSH
56695: CALL_OW 247
56699: PUSH
56700: LD_INT 2
56702: EQUAL
56703: IFFALSE 56716
// ComExitVehicle ( unit ) else
56705: LD_VAR 0 1
56709: PPUSH
56710: CALL_OW 121
56714: GO 56725
// ComExitBuilding ( unit ) ;
56716: LD_VAR 0 1
56720: PPUSH
56721: CALL_OW 122
// result := tmp ;
56725: LD_ADDR_VAR 0 2
56729: PUSH
56730: LD_VAR 0 3
56734: ST_TO_ADDR
// end ;
56735: LD_VAR 0 2
56739: RET
// export function ResetHc ; begin
56740: LD_INT 0
56742: PPUSH
// InitHc ;
56743: CALL_OW 19
// hc_importance := 0 ;
56747: LD_ADDR_OWVAR 32
56751: PUSH
56752: LD_INT 0
56754: ST_TO_ADDR
// end ;
56755: LD_VAR 0 1
56759: RET
