// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 20
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 21
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 19
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 909 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 22
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2080 0 0
// PrepareHeroes ;
  82: CALL 1089 0 0
// PrepareRandoms ;
  86: CALL 3451 0 0
// Action ;
  90: CALL 5258 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 806
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 531
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 20
 347: PUSH
 348: LD_EXP 20
 352: PPUSH
 353: LD_EXP 20
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 20
 452: PUSH
 453: LD_EXP 20
 457: PPUSH
 458: LD_EXP 20
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// end ;
 529: GO 310
 531: POP
 532: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 533: LD_EXP 20
 537: PPUSH
 538: LD_STRING 13_VehiclesIn13_1
 540: PPUSH
 541: CALL_OW 39
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 24
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 16
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
 581: LD_STRING enableBioCharacter(BIO_HUGH)
 583: PPUSH
 584: CALL_OW 559
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 588: LD_EXP 3
 592: PPUSH
 593: LD_STRING Lisa
 595: PPUSH
 596: LD_EXP 23
 600: PPUSH
 601: CALL 4247 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 605: LD_EXP 8
 609: PPUSH
 610: LD_STRING Brown
 612: PPUSH
 613: LD_EXP 23
 617: PPUSH
 618: CALL 4247 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 622: LD_EXP 4
 626: PPUSH
 627: LD_STRING Donaldson
 629: PPUSH
 630: LD_EXP 23
 634: PPUSH
 635: CALL 4247 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 639: LD_EXP 5
 643: PPUSH
 644: LD_STRING Bobby
 646: PPUSH
 647: LD_EXP 23
 651: PPUSH
 652: CALL 4247 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 656: LD_EXP 6
 660: PPUSH
 661: LD_STRING Cyrus
 663: PPUSH
 664: LD_EXP 23
 668: PPUSH
 669: CALL 4247 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 673: LD_EXP 7
 677: PPUSH
 678: LD_STRING Denis
 680: PPUSH
 681: LD_EXP 23
 685: PPUSH
 686: CALL 4247 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 690: LD_EXP 9
 694: PPUSH
 695: LD_STRING Gladstone
 697: PPUSH
 698: LD_EXP 23
 702: PPUSH
 703: CALL 4247 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 707: LD_EXP 10
 711: PPUSH
 712: LD_STRING Houten
 714: PPUSH
 715: LD_EXP 23
 719: PPUSH
 720: CALL 4247 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 724: LD_EXP 11
 728: PPUSH
 729: LD_STRING Cornel
 731: PPUSH
 732: LD_EXP 23
 736: PPUSH
 737: CALL 4247 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 741: LD_EXP 12
 745: PPUSH
 746: LD_STRING Gary
 748: PPUSH
 749: LD_EXP 23
 753: PPUSH
 754: CALL 4247 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 758: LD_EXP 13
 762: PPUSH
 763: LD_STRING Frank
 765: PPUSH
 766: LD_EXP 23
 770: PPUSH
 771: CALL 4247 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 775: LD_EXP 14
 779: PPUSH
 780: LD_STRING Kikuchi
 782: PPUSH
 783: LD_EXP 23
 787: PPUSH
 788: CALL 4247 0 3
// SaveCargos ;
 792: CALL 809 0 0
// ChangeMap ( 13 , %_cont ) ;
 796: LD_INT 13
 798: PPUSH
 799: LD_STRING %_cont
 801: PPUSH
 802: CALL_OW 340
// end ;
 806: PPOPN 2
 808: END
// export function SaveCargos ; var i ; begin
 809: LD_INT 0
 811: PPUSH
 812: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 813: LD_ADDR_VAR 0 2
 817: PUSH
 818: LD_INT 2
 820: PPUSH
 821: LD_INT 22
 823: PUSH
 824: LD_INT 1
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 33
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 34
 843: PUSH
 844: LD_INT 12
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PPUSH
 856: CALL_OW 70
 860: PUSH
 861: FOR_IN
 862: IFFALSE 890
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 864: LD_ADDR_EXP 21
 868: PUSH
 869: LD_EXP 21
 873: PUSH
 874: LD_VAR 0 2
 878: PPUSH
 879: CALL 68239 0 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: ADD
 887: ST_TO_ADDR
 888: GO 861
 890: POP
 891: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 892: LD_EXP 21
 896: PPUSH
 897: LD_STRING 13_ResourcesInCargo13_1
 899: PPUSH
 900: CALL_OW 39
// end ;
 904: LD_VAR 0 1
 908: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 909: LD_INT 0
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 917: LD_ADDR_VAR 0 2
 921: PUSH
 922: LD_STRING 10_EpsilonEnv
 924: PPUSH
 925: EMPTY
 926: PPUSH
 927: CALL_OW 30
 931: ST_TO_ADDR
// if not tmp then
 932: LD_VAR 0 2
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1084
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 941: LD_ADDR_VAR 0 3
 945: PUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 353
 953: ST_TO_ADDR
// if not list then
 954: LD_VAR 0 3
 958: NOT
 959: IFFALSE 963
// exit ;
 961: GO 1084
// for i in list do
 963: LD_ADDR_VAR 0 4
 967: PUSH
 968: LD_VAR 0 3
 972: PUSH
 973: FOR_IN
 974: IFFALSE 1082
// begin exist := false ;
 976: LD_ADDR_VAR 0 6
 980: PUSH
 981: LD_INT 0
 983: ST_TO_ADDR
// for j in tmp do
 984: LD_ADDR_VAR 0 5
 988: PUSH
 989: LD_VAR 0 2
 993: PUSH
 994: FOR_IN
 995: IFFALSE 1049
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 997: LD_VAR 0 4
1001: PUSH
1002: LD_INT 1
1004: ARRAY
1005: PUSH
1006: LD_VAR 0 5
1010: PUSH
1011: LD_INT 1
1013: ARRAY
1014: EQUAL
1015: PUSH
1016: LD_VAR 0 4
1020: PUSH
1021: LD_INT 2
1023: ARRAY
1024: PUSH
1025: LD_VAR 0 5
1029: PUSH
1030: LD_INT 2
1032: ARRAY
1033: EQUAL
1034: AND
1035: IFFALSE 1047
// begin exist := true ;
1037: LD_ADDR_VAR 0 6
1041: PUSH
1042: LD_INT 1
1044: ST_TO_ADDR
// break ;
1045: GO 1049
// end ;
1047: GO 994
1049: POP
1050: POP
// if not exist then
1051: LD_VAR 0 6
1055: NOT
1056: IFFALSE 1080
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1058: LD_VAR 0 4
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 4
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 347
// end ;
1080: GO 973
1082: POP
1083: POP
// end ; end_of_file
1084: LD_VAR 0 1
1088: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1089: LD_INT 0
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1098: LD_ADDR_VAR 0 4
1102: PUSH
1103: LD_INT 22
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 23
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 30
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 69
1160: ST_TO_ADDR
// if tmp then
1161: LD_VAR 0 4
1165: IFFALSE 1287
// begin x := GetX ( tmp [ 1 ] ) ;
1167: LD_ADDR_VAR 0 5
1171: PUSH
1172: LD_VAR 0 4
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: CALL_OW 250
1185: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1186: LD_ADDR_VAR 0 6
1190: PUSH
1191: LD_VAR 0 4
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: CALL_OW 251
1204: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1205: LD_VAR 0 4
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: LD_STRING epsilon
1216: PPUSH
1217: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1221: LD_ADDR_VAR 0 7
1225: PUSH
1226: LD_VAR 0 4
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PPUSH
1235: CALL_OW 274
1239: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1240: LD_VAR 0 7
1244: PPUSH
1245: LD_INT 1
1247: PPUSH
1248: LD_INT 3000
1250: PPUSH
1251: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1255: LD_VAR 0 7
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: LD_INT 500
1265: PPUSH
1266: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1270: LD_VAR 0 7
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 200
1280: PPUSH
1281: CALL_OW 277
// end else
1285: GO 1303
// begin x := 104 ;
1287: LD_ADDR_VAR 0 5
1291: PUSH
1292: LD_INT 104
1294: ST_TO_ADDR
// y := 32 ;
1295: LD_ADDR_VAR 0 6
1299: PUSH
1300: LD_INT 32
1302: ST_TO_ADDR
// end ; uc_side := 1 ;
1303: LD_ADDR_OWVAR 20
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1311: LD_ADDR_EXP 1
1315: PUSH
1316: LD_STRING JMM
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 3721 0 2
1326: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1327: LD_ADDR_EXP 3
1331: PUSH
1332: LD_STRING Lisa
1334: PPUSH
1335: LD_INT 1
1337: PPUSH
1338: CALL 3721 0 2
1342: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1343: LD_ADDR_EXP 4
1347: PUSH
1348: LD_STRING Donaldson
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 3721 0 2
1358: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1359: LD_ADDR_EXP 5
1363: PUSH
1364: LD_STRING Bobby
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL 3721 0 2
1374: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1375: LD_ADDR_EXP 6
1379: PUSH
1380: LD_STRING Cyrus
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL 3721 0 2
1390: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1391: LD_ADDR_EXP 7
1395: PUSH
1396: LD_STRING Denis
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: CALL 3721 0 2
1406: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1407: LD_ADDR_EXP 8
1411: PUSH
1412: LD_STRING Brown
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: CALL 3721 0 2
1422: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1423: LD_ADDR_EXP 9
1427: PUSH
1428: LD_STRING Gladstone
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: CALL 3721 0 2
1438: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1439: LD_ADDR_EXP 10
1443: PUSH
1444: LD_STRING Houten
1446: PPUSH
1447: LD_INT 1
1449: PPUSH
1450: CALL 3721 0 2
1454: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1455: LD_ADDR_EXP 11
1459: PUSH
1460: LD_STRING Cornell
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL 3721 0 2
1470: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1471: LD_ADDR_EXP 12
1475: PUSH
1476: LD_STRING Gary
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL 3721 0 2
1486: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1487: LD_ADDR_EXP 13
1491: PUSH
1492: LD_STRING Frank
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL 3721 0 2
1502: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1503: LD_ADDR_EXP 14
1507: PUSH
1508: LD_STRING Kikuchi
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL 3721 0 2
1518: ST_TO_ADDR
// DeltaDoctor := PrepareUnit2 ( DeltaDoctor , true ) ;
1519: LD_ADDR_EXP 15
1523: PUSH
1524: LD_STRING DeltaDoctor
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: CALL 3721 0 2
1534: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1535: LD_ADDR_EXP 16
1539: PUSH
1540: LD_STRING Stevens
1542: PPUSH
1543: LD_INT 0
1545: PPUSH
1546: CALL 3721 0 2
1550: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1551: LD_ADDR_EXP 2
1555: PUSH
1556: LD_STRING Powell
1558: PPUSH
1559: LD_INT 0
1561: PPUSH
1562: CALL 3721 0 2
1566: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1567: LD_EXP 1
1571: PPUSH
1572: LD_VAR 0 5
1576: PPUSH
1577: LD_VAR 0 6
1581: PPUSH
1582: LD_INT 4
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL 3894 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1592: LD_EXP 16
1596: PPUSH
1597: LD_VAR 0 5
1601: PPUSH
1602: LD_VAR 0 6
1606: PPUSH
1607: LD_INT 4
1609: PPUSH
1610: LD_INT 0
1612: PPUSH
1613: CALL 3894 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1617: LD_EXP 3
1621: PPUSH
1622: LD_VAR 0 5
1626: PPUSH
1627: LD_VAR 0 6
1631: PPUSH
1632: LD_INT 35
1634: PPUSH
1635: LD_INT 0
1637: PPUSH
1638: CALL 3894 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1642: LD_EXP 4
1646: PPUSH
1647: LD_VAR 0 5
1651: PPUSH
1652: LD_VAR 0 6
1656: PPUSH
1657: LD_INT 35
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL 3894 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1667: LD_EXP 5
1671: PPUSH
1672: LD_VAR 0 5
1676: PPUSH
1677: LD_VAR 0 6
1681: PPUSH
1682: LD_INT 35
1684: PPUSH
1685: LD_INT 0
1687: PPUSH
1688: CALL 3894 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1692: LD_EXP 6
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: LD_VAR 0 6
1706: PPUSH
1707: LD_INT 35
1709: PPUSH
1710: LD_INT 0
1712: PPUSH
1713: CALL 3894 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1717: LD_EXP 7
1721: PPUSH
1722: LD_VAR 0 5
1726: PPUSH
1727: LD_VAR 0 6
1731: PPUSH
1732: LD_INT 35
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL 3894 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1742: LD_EXP 8
1746: PPUSH
1747: LD_VAR 0 5
1751: PPUSH
1752: LD_VAR 0 6
1756: PPUSH
1757: LD_INT 35
1759: PPUSH
1760: LD_INT 0
1762: PPUSH
1763: CALL 3894 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1767: LD_EXP 9
1771: PPUSH
1772: LD_VAR 0 5
1776: PPUSH
1777: LD_VAR 0 6
1781: PPUSH
1782: LD_INT 35
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL 3894 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1792: LD_EXP 10
1796: PPUSH
1797: LD_VAR 0 5
1801: PPUSH
1802: LD_VAR 0 6
1806: PPUSH
1807: LD_INT 35
1809: PPUSH
1810: LD_INT 0
1812: PPUSH
1813: CALL 3894 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1817: LD_EXP 11
1821: PPUSH
1822: LD_VAR 0 5
1826: PPUSH
1827: LD_VAR 0 6
1831: PPUSH
1832: LD_INT 35
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL 3894 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1842: LD_EXP 12
1846: PPUSH
1847: LD_VAR 0 5
1851: PPUSH
1852: LD_VAR 0 6
1856: PPUSH
1857: LD_INT 35
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL 3894 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1867: LD_EXP 13
1871: PPUSH
1872: LD_VAR 0 5
1876: PPUSH
1877: LD_VAR 0 6
1881: PPUSH
1882: LD_INT 35
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL 3894 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1892: LD_EXP 14
1896: PPUSH
1897: LD_VAR 0 5
1901: PPUSH
1902: LD_VAR 0 6
1906: PPUSH
1907: LD_INT 35
1909: PPUSH
1910: LD_INT 0
1912: PPUSH
1913: CALL 3894 0 5
// SetClass ( JMM , 1 ) ;
1917: LD_EXP 1
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1929: LD_ADDR_EXP 17
1933: PUSH
1934: LD_STRING 12_other_survivors
1936: PPUSH
1937: CALL_OW 31
1941: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1942: LD_ADDR_EXP 18
1946: PUSH
1947: LD_STRING 12_others
1949: PPUSH
1950: CALL_OW 31
1954: ST_TO_ADDR
// for i in others11 do
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: LD_EXP 18
1964: PUSH
1965: FOR_IN
1966: IFFALSE 2013
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1968: LD_VAR 0 2
1972: PPUSH
1973: LD_VAR 0 4
1977: PUSH
1978: LD_INT 1
1980: ARRAY
1981: PPUSH
1982: CALL_OW 250
1986: PPUSH
1987: LD_VAR 0 4
1991: PUSH
1992: LD_INT 1
1994: ARRAY
1995: PPUSH
1996: CALL_OW 251
2000: PPUSH
2001: LD_INT 15
2003: PPUSH
2004: LD_INT 0
2006: PPUSH
2007: CALL 3894 0 5
2011: GO 1965
2013: POP
2014: POP
// for i in others12 do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 17
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2073
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2028: LD_VAR 0 2
2032: PPUSH
2033: LD_VAR 0 4
2037: PUSH
2038: LD_INT 1
2040: ARRAY
2041: PPUSH
2042: CALL_OW 250
2046: PPUSH
2047: LD_VAR 0 4
2051: PUSH
2052: LD_INT 1
2054: ARRAY
2055: PPUSH
2056: CALL_OW 251
2060: PPUSH
2061: LD_INT 15
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL 3894 0 5
2071: GO 2025
2073: POP
2074: POP
// end ;
2075: LD_VAR 0 1
2079: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2080: LD_INT 0
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
2088: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2089: LD_INT 113
2091: PPUSH
2092: LD_INT 50
2094: PPUSH
2095: LD_INT 1
2097: PPUSH
2098: CALL_OW 441
// SetResourceVisibility ( 99 , 19 , 1 ) ;
2102: LD_INT 99
2104: PPUSH
2105: LD_INT 19
2107: PPUSH
2108: LD_INT 1
2110: PPUSH
2111: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2115: LD_INT 43
2117: PPUSH
2118: LD_INT 79
2120: PPUSH
2121: LD_INT 1
2123: PPUSH
2124: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2128: LD_INT 43
2130: PPUSH
2131: LD_INT 68
2133: PPUSH
2134: LD_INT 1
2136: PPUSH
2137: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2141: LD_INT 99
2143: PPUSH
2144: LD_INT 114
2146: PPUSH
2147: LD_INT 1
2149: PPUSH
2150: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2154: LD_INT 103
2156: PPUSH
2157: LD_INT 114
2159: PPUSH
2160: LD_INT 1
2162: PPUSH
2163: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2167: LD_INT 152
2169: PPUSH
2170: LD_INT 85
2172: PPUSH
2173: LD_INT 1
2175: PPUSH
2176: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2180: LD_INT 156
2182: PPUSH
2183: LD_INT 92
2185: PPUSH
2186: LD_INT 1
2188: PPUSH
2189: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: LD_STRING 10_EpsilonBase
2200: PPUSH
2201: EMPTY
2202: PPUSH
2203: CALL_OW 30
2207: ST_TO_ADDR
// if not blist then
2208: LD_VAR 0 2
2212: NOT
2213: IFFALSE 2225
// begin baseCorrect := 0 ;
2215: LD_ADDR_VAR 0 6
2219: PUSH
2220: LD_INT 0
2222: ST_TO_ADDR
// end else
2223: GO 2280
// begin for i in blist do
2225: LD_ADDR_VAR 0 3
2229: PUSH
2230: LD_VAR 0 2
2234: PUSH
2235: FOR_IN
2236: IFFALSE 2278
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2238: LD_VAR 0 3
2242: PUSH
2243: LD_INT 1
2245: ARRAY
2246: PUSH
2247: LD_INT 0
2249: EQUAL
2250: PUSH
2251: LD_VAR 0 3
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PUSH
2260: LD_INT 1
2262: EQUAL
2263: OR
2264: IFFALSE 2276
// begin baseCorrect := 1 ;
2266: LD_ADDR_VAR 0 6
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// break ;
2274: GO 2278
// end ;
2276: GO 2235
2278: POP
2279: POP
// end ; if baseCorrect = 0 then
2280: LD_VAR 0 6
2284: PUSH
2285: LD_INT 0
2287: EQUAL
2288: IFFALSE 2995
// begin uc_side := 1 ;
2290: LD_ADDR_OWVAR 20
2294: PUSH
2295: LD_INT 1
2297: ST_TO_ADDR
// uc_nation := 1 ;
2298: LD_ADDR_OWVAR 21
2302: PUSH
2303: LD_INT 1
2305: ST_TO_ADDR
// bc_level := 10 ;
2306: LD_ADDR_OWVAR 43
2310: PUSH
2311: LD_INT 10
2313: ST_TO_ADDR
// bc_type := b_warehouse ;
2314: LD_ADDR_OWVAR 42
2318: PUSH
2319: LD_INT 1
2321: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2322: LD_INT 99
2324: PPUSH
2325: LD_INT 24
2327: PPUSH
2328: LD_INT 2
2330: PPUSH
2331: CALL_OW 47
// bc_type := b_bunker ;
2335: LD_ADDR_OWVAR 42
2339: PUSH
2340: LD_INT 32
2342: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2343: LD_ADDR_VAR 0 7
2347: PUSH
2348: LD_INT 124
2350: PPUSH
2351: LD_INT 42
2353: PPUSH
2354: LD_INT 4
2356: PPUSH
2357: CALL_OW 47
2361: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2362: LD_VAR 0 7
2366: PPUSH
2367: LD_INT 4
2369: PUSH
2370: LD_INT 5
2372: PUSH
2373: LD_INT 6
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 1
2383: PPUSH
2384: LD_INT 3
2386: PPUSH
2387: CALL_OW 12
2391: ARRAY
2392: PPUSH
2393: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2397: LD_ADDR_VAR 0 7
2401: PUSH
2402: LD_INT 111
2404: PPUSH
2405: LD_INT 16
2407: PPUSH
2408: LD_INT 4
2410: PPUSH
2411: CALL_OW 47
2415: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2416: LD_VAR 0 7
2420: PPUSH
2421: LD_INT 4
2423: PUSH
2424: LD_INT 5
2426: PUSH
2427: LD_INT 6
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 1
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: CALL_OW 12
2445: ARRAY
2446: PPUSH
2447: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2451: LD_ADDR_VAR 0 7
2455: PUSH
2456: LD_INT 113
2458: PPUSH
2459: LD_INT 21
2461: PPUSH
2462: LD_INT 4
2464: PPUSH
2465: CALL_OW 47
2469: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2470: LD_VAR 0 7
2474: PPUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 5
2480: PUSH
2481: LD_INT 6
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PUSH
2489: LD_INT 1
2491: PPUSH
2492: LD_INT 3
2494: PPUSH
2495: CALL_OW 12
2499: ARRAY
2500: PPUSH
2501: CALL_OW 431
// bc_type := 33 ;
2505: LD_ADDR_OWVAR 42
2509: PUSH
2510: LD_INT 33
2512: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2513: LD_ADDR_VAR 0 7
2517: PUSH
2518: LD_INT 95
2520: PPUSH
2521: LD_INT 41
2523: PPUSH
2524: LD_INT 1
2526: PPUSH
2527: CALL_OW 47
2531: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2532: LD_VAR 0 7
2536: PPUSH
2537: LD_INT 4
2539: PUSH
2540: LD_INT 5
2542: PUSH
2543: LD_INT 6
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 1
2553: PPUSH
2554: LD_INT 3
2556: PPUSH
2557: CALL_OW 12
2561: ARRAY
2562: PPUSH
2563: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2567: LD_ADDR_VAR 0 7
2571: PUSH
2572: LD_INT 97
2574: PPUSH
2575: LD_INT 48
2577: PPUSH
2578: LD_INT 1
2580: PPUSH
2581: CALL_OW 47
2585: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2586: LD_VAR 0 7
2590: PPUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 5
2596: PUSH
2597: LD_INT 6
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 1
2607: PPUSH
2608: LD_INT 3
2610: PPUSH
2611: CALL_OW 12
2615: ARRAY
2616: PPUSH
2617: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2621: LD_ADDR_VAR 0 7
2625: PUSH
2626: LD_INT 86
2628: PPUSH
2629: LD_INT 19
2631: PPUSH
2632: LD_INT 1
2634: PPUSH
2635: CALL_OW 47
2639: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2640: LD_VAR 0 7
2644: PPUSH
2645: LD_INT 4
2647: PUSH
2648: LD_INT 5
2650: PUSH
2651: LD_INT 6
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: LIST
2658: PUSH
2659: LD_INT 1
2661: PPUSH
2662: LD_INT 3
2664: PPUSH
2665: CALL_OW 12
2669: ARRAY
2670: PPUSH
2671: CALL_OW 431
// bc_type := 30 ;
2675: LD_ADDR_OWVAR 42
2679: PUSH
2680: LD_INT 30
2682: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2683: LD_INT 104
2685: PPUSH
2686: LD_INT 24
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: CALL_OW 47
// bc_type := 29 ;
2696: LD_ADDR_OWVAR 42
2700: PUSH
2701: LD_INT 29
2703: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2704: LD_INT 113
2706: PPUSH
2707: LD_INT 50
2709: PPUSH
2710: LD_INT 3
2712: PPUSH
2713: CALL_OW 47
// bc_type := 27 ;
2717: LD_ADDR_OWVAR 42
2721: PUSH
2722: LD_INT 27
2724: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2725: LD_INT 98
2727: PPUSH
2728: LD_INT 26
2730: PPUSH
2731: LD_INT 2
2733: PPUSH
2734: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2738: LD_INT 95
2740: PPUSH
2741: LD_INT 23
2743: PPUSH
2744: LD_INT 3
2746: PPUSH
2747: CALL_OW 47
// bc_type := 28 ;
2751: LD_ADDR_OWVAR 42
2755: PUSH
2756: LD_INT 28
2758: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2759: LD_INT 107
2761: PPUSH
2762: LD_INT 32
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL_OW 47
// bc_type := 3 ;
2772: LD_ADDR_OWVAR 42
2776: PUSH
2777: LD_INT 3
2779: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2780: LD_INT 106
2782: PPUSH
2783: LD_INT 42
2785: PPUSH
2786: LD_INT 0
2788: PPUSH
2789: CALL_OW 47
// bc_type := 16 ;
2793: LD_ADDR_OWVAR 42
2797: PUSH
2798: LD_INT 16
2800: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2801: LD_INT 109
2803: PPUSH
2804: LD_INT 45
2806: PPUSH
2807: LD_INT 5
2809: PPUSH
2810: CALL_OW 47
// bc_type := 17 ;
2814: LD_ADDR_OWVAR 42
2818: PUSH
2819: LD_INT 17
2821: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2822: LD_INT 106
2824: PPUSH
2825: LD_INT 46
2827: PPUSH
2828: LD_INT 0
2830: PPUSH
2831: CALL_OW 47
// bc_type := 19 ;
2835: LD_ADDR_OWVAR 42
2839: PUSH
2840: LD_INT 19
2842: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2843: LD_INT 103
2845: PPUSH
2846: LD_INT 42
2848: PPUSH
2849: LD_INT 1
2851: PPUSH
2852: CALL_OW 47
// bc_type := 21 ;
2856: LD_ADDR_OWVAR 42
2860: PUSH
2861: LD_INT 21
2863: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2864: LD_INT 110
2866: PPUSH
2867: LD_INT 42
2869: PPUSH
2870: LD_INT 4
2872: PPUSH
2873: CALL_OW 47
// bc_type := 5 ;
2877: LD_ADDR_OWVAR 42
2881: PUSH
2882: LD_INT 5
2884: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2885: LD_INT 114
2887: PPUSH
2888: LD_INT 55
2890: PPUSH
2891: LD_INT 5
2893: PPUSH
2894: CALL_OW 47
// bc_type := 36 ;
2898: LD_ADDR_OWVAR 42
2902: PUSH
2903: LD_INT 36
2905: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2906: LD_INT 96
2908: PPUSH
2909: LD_INT 28
2911: PPUSH
2912: LD_INT 2
2914: PPUSH
2915: CALL_OW 47
// bc_type := b_lab_full ;
2919: LD_ADDR_OWVAR 42
2923: PUSH
2924: LD_INT 8
2926: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2927: LD_ADDR_OWVAR 44
2931: PUSH
2932: LD_INT 15
2934: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2935: LD_ADDR_OWVAR 45
2939: PUSH
2940: LD_INT 11
2942: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2943: LD_INT 116
2945: PPUSH
2946: LD_INT 38
2948: PPUSH
2949: LD_INT 4
2951: PPUSH
2952: CALL_OW 47
// bc_type := b_lab_full ;
2956: LD_ADDR_OWVAR 42
2960: PUSH
2961: LD_INT 8
2963: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2964: LD_ADDR_OWVAR 44
2968: PUSH
2969: LD_INT 10
2971: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2972: LD_ADDR_OWVAR 45
2976: PUSH
2977: LD_INT 12
2979: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2980: LD_INT 112
2982: PPUSH
2983: LD_INT 29
2985: PPUSH
2986: LD_INT 4
2988: PPUSH
2989: CALL_OW 47
// end else
2993: GO 3243
// begin uc_side := 1 ;
2995: LD_ADDR_OWVAR 20
2999: PUSH
3000: LD_INT 1
3002: ST_TO_ADDR
// for i in blist do
3003: LD_ADDR_VAR 0 3
3007: PUSH
3008: LD_VAR 0 2
3012: PUSH
3013: FOR_IN
3014: IFFALSE 3241
// begin InitBc ;
3016: CALL_OW 21
// uc_nation := i [ 6 ] ;
3020: LD_ADDR_OWVAR 21
3024: PUSH
3025: LD_VAR 0 3
3029: PUSH
3030: LD_INT 6
3032: ARRAY
3033: ST_TO_ADDR
// bc_type := i [ 1 ] ;
3034: LD_ADDR_OWVAR 42
3038: PUSH
3039: LD_VAR 0 3
3043: PUSH
3044: LD_INT 1
3046: ARRAY
3047: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3048: LD_ADDR_OWVAR 43
3052: PUSH
3053: LD_VAR 0 3
3057: PUSH
3058: LD_INT 5
3060: ARRAY
3061: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3062: LD_VAR 0 3
3066: PUSH
3067: LD_INT 1
3069: ARRAY
3070: PUSH
3071: LD_INT 7
3073: PUSH
3074: LD_INT 8
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: IN
3081: IFFALSE 3111
// begin bc_kind1 := i [ 7 ] ;
3083: LD_ADDR_OWVAR 44
3087: PUSH
3088: LD_VAR 0 3
3092: PUSH
3093: LD_INT 7
3095: ARRAY
3096: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3097: LD_ADDR_OWVAR 45
3101: PUSH
3102: LD_VAR 0 3
3106: PUSH
3107: LD_INT 8
3109: ARRAY
3110: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3111: LD_ADDR_VAR 0 4
3115: PUSH
3116: LD_VAR 0 3
3120: PUSH
3121: LD_INT 2
3123: ARRAY
3124: PPUSH
3125: LD_VAR 0 3
3129: PUSH
3130: LD_INT 3
3132: ARRAY
3133: PPUSH
3134: LD_VAR 0 3
3138: PUSH
3139: LD_INT 4
3141: ARRAY
3142: PPUSH
3143: CALL_OW 47
3147: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3148: LD_VAR 0 4
3152: PPUSH
3153: CALL_OW 266
3157: PUSH
3158: LD_INT 32
3160: PUSH
3161: LD_INT 33
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: IN
3168: IFFALSE 3239
// if i [ 7 ] then
3170: LD_VAR 0 3
3174: PUSH
3175: LD_INT 7
3177: ARRAY
3178: IFFALSE 3200
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3180: LD_VAR 0 4
3184: PPUSH
3185: LD_VAR 0 3
3189: PUSH
3190: LD_INT 7
3192: ARRAY
3193: PPUSH
3194: CALL_OW 431
3198: GO 3239
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3200: LD_VAR 0 4
3204: PPUSH
3205: LD_INT 11
3207: PUSH
3208: LD_INT 7
3210: PUSH
3211: LD_INT 4
3213: PUSH
3214: LD_INT 5
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 1
3225: PPUSH
3226: LD_INT 4
3228: PPUSH
3229: CALL_OW 12
3233: ARRAY
3234: PPUSH
3235: CALL_OW 431
// end ;
3239: GO 3013
3241: POP
3242: POP
// end ; uc_side := 1 ;
3243: LD_ADDR_OWVAR 20
3247: PUSH
3248: LD_INT 1
3250: ST_TO_ADDR
// uc_nation := 1 ;
3251: LD_ADDR_OWVAR 21
3255: PUSH
3256: LD_INT 1
3258: ST_TO_ADDR
// for i := 1 to 8 do
3259: LD_ADDR_VAR 0 3
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_INT 8
3271: PUSH
3272: FOR_TO
3273: IFFALSE 3444
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3275: LD_ADDR_OWVAR 37
3279: PUSH
3280: LD_INT 5
3282: PUSH
3283: LD_INT 5
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: LD_INT 4
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 1
3300: PPUSH
3301: LD_INT 4
3303: PPUSH
3304: CALL_OW 12
3308: ARRAY
3309: ST_TO_ADDR
// vc_engine := engine_siberite ;
3310: LD_ADDR_OWVAR 39
3314: PUSH
3315: LD_INT 3
3317: ST_TO_ADDR
// vc_control := control_manual ;
3318: LD_ADDR_OWVAR 38
3322: PUSH
3323: LD_INT 1
3325: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3326: LD_OWVAR 37
3330: PUSH
3331: LD_INT 4
3333: EQUAL
3334: IFFALSE 3346
// vc_weapon := us_heavy_gun else
3336: LD_ADDR_OWVAR 40
3340: PUSH
3341: LD_INT 6
3343: ST_TO_ADDR
3344: GO 3391
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3346: LD_ADDR_OWVAR 40
3350: PUSH
3351: LD_INT 7
3353: PUSH
3354: LD_INT 9
3356: PUSH
3357: LD_INT 12
3359: PUSH
3360: LD_INT 13
3362: PUSH
3363: LD_INT 9
3365: PUSH
3366: LD_INT 9
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: PUSH
3377: LD_VAR 0 3
3381: PUSH
3382: LD_INT 6
3384: MOD
3385: PUSH
3386: LD_INT 1
3388: PLUS
3389: ARRAY
3390: ST_TO_ADDR
// un := CreateVehicle ;
3391: LD_ADDR_VAR 0 5
3395: PUSH
3396: CALL_OW 45
3400: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3401: LD_VAR 0 5
3405: PPUSH
3406: LD_INT 0
3408: PPUSH
3409: LD_INT 5
3411: PPUSH
3412: CALL_OW 12
3416: PPUSH
3417: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3421: LD_VAR 0 5
3425: PPUSH
3426: LD_INT 78
3428: PPUSH
3429: LD_INT 31
3431: PPUSH
3432: LD_INT 8
3434: PPUSH
3435: LD_INT 0
3437: PPUSH
3438: CALL_OW 50
// end ;
3442: GO 3272
3444: POP
3445: POP
// end ;
3446: LD_VAR 0 1
3450: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3451: LD_INT 0
3453: PPUSH
3454: PPUSH
3455: PPUSH
3456: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3457: LD_INT 22
3459: PUSH
3460: LD_INT 1
3462: PUSH
3463: EMPTY
3464: LIST
3465: LIST
3466: PUSH
3467: LD_INT 21
3469: PUSH
3470: LD_INT 1
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PPUSH
3481: CALL_OW 69
3485: PUSH
3486: LD_INT 6
3488: LESS
3489: IFFALSE 3716
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3491: LD_ADDR_VAR 0 4
3495: PUSH
3496: LD_INT 22
3498: PUSH
3499: LD_INT 1
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PUSH
3506: LD_INT 2
3508: PUSH
3509: LD_INT 30
3511: PUSH
3512: LD_INT 0
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: PUSH
3519: LD_INT 30
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PPUSH
3538: CALL_OW 69
3542: ST_TO_ADDR
// uc_side := 1 ;
3543: LD_ADDR_OWVAR 20
3547: PUSH
3548: LD_INT 1
3550: ST_TO_ADDR
// uc_nation := 1 ;
3551: LD_ADDR_OWVAR 21
3555: PUSH
3556: LD_INT 1
3558: ST_TO_ADDR
// for i := 1 to 6 do
3559: LD_ADDR_VAR 0 2
3563: PUSH
3564: DOUBLE
3565: LD_INT 1
3567: DEC
3568: ST_TO_ADDR
3569: LD_INT 6
3571: PUSH
3572: FOR_TO
3573: IFFALSE 3714
// begin hc_gallery :=  ;
3575: LD_ADDR_OWVAR 33
3579: PUSH
3580: LD_STRING 
3582: ST_TO_ADDR
// hc_name :=  ;
3583: LD_ADDR_OWVAR 26
3587: PUSH
3588: LD_STRING 
3590: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3591: LD_INT 0
3593: PPUSH
3594: LD_INT 1
3596: PUSH
3597: LD_INT 2
3599: PUSH
3600: LD_INT 3
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 1
3614: PPUSH
3615: LD_INT 4
3617: PPUSH
3618: CALL_OW 12
3622: ARRAY
3623: PPUSH
3624: LD_INT 5
3626: PPUSH
3627: LD_INT 8
3629: PPUSH
3630: CALL_OW 12
3634: PPUSH
3635: CALL_OW 380
// un := CreateHuman ;
3639: LD_ADDR_VAR 0 3
3643: PUSH
3644: CALL_OW 44
3648: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3649: LD_ADDR_EXP 19
3653: PUSH
3654: LD_EXP 19
3658: PPUSH
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL 64670 0 2
3668: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3669: LD_VAR 0 3
3673: PPUSH
3674: LD_VAR 0 4
3678: PUSH
3679: LD_INT 1
3681: ARRAY
3682: PPUSH
3683: CALL_OW 250
3687: PPUSH
3688: LD_VAR 0 4
3692: PUSH
3693: LD_INT 1
3695: ARRAY
3696: PPUSH
3697: CALL_OW 251
3701: PPUSH
3702: LD_INT 15
3704: PPUSH
3705: LD_INT 0
3707: PPUSH
3708: CALL 3894 0 5
// end ;
3712: GO 3572
3714: POP
3715: POP
// end ; end ; end_of_file
3716: LD_VAR 0 1
3720: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3721: LD_INT 0
3723: PPUSH
3724: PPUSH
// if existMode then
3725: LD_VAR 0 2
3729: IFFALSE 3864
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3731: LD_EXP 22
3735: PUSH
3736: LD_VAR 0 1
3740: STR
3741: PPUSH
3742: CALL_OW 28
3746: IFFALSE 3771
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3748: LD_ADDR_VAR 0 4
3752: PUSH
3753: LD_EXP 22
3757: PUSH
3758: LD_VAR 0 1
3762: STR
3763: PPUSH
3764: CALL_OW 34
3768: ST_TO_ADDR
3769: GO 3862
// begin if TestCharacters ( 11_ & ident ) then
3771: LD_STRING 11_
3773: PUSH
3774: LD_VAR 0 1
3778: STR
3779: PPUSH
3780: CALL_OW 28
3784: IFFALSE 3807
// unit := CreateCharacter ( 11_ & ident ) else
3786: LD_ADDR_VAR 0 4
3790: PUSH
3791: LD_STRING 11_
3793: PUSH
3794: LD_VAR 0 1
3798: STR
3799: PPUSH
3800: CALL_OW 34
3804: ST_TO_ADDR
3805: GO 3862
// if TestCharacters ( 10c_ & ident ) then
3807: LD_STRING 10c_
3809: PUSH
3810: LD_VAR 0 1
3814: STR
3815: PPUSH
3816: CALL_OW 28
3820: IFFALSE 3843
// unit := CreateCharacter ( 10c_ & ident ) else
3822: LD_ADDR_VAR 0 4
3826: PUSH
3827: LD_STRING 10c_
3829: PUSH
3830: LD_VAR 0 1
3834: STR
3835: PPUSH
3836: CALL_OW 34
3840: ST_TO_ADDR
3841: GO 3862
// unit := CreateCharacter ( 10_ & ident ) ;
3843: LD_ADDR_VAR 0 4
3847: PUSH
3848: LD_STRING 10_
3850: PUSH
3851: LD_VAR 0 1
3855: STR
3856: PPUSH
3857: CALL_OW 34
3861: ST_TO_ADDR
// end ; end else
3862: GO 3879
// unit := NewCharacter ( ident ) ;
3864: LD_ADDR_VAR 0 4
3868: PUSH
3869: LD_VAR 0 1
3873: PPUSH
3874: CALL_OW 25
3878: ST_TO_ADDR
// result := unit ;
3879: LD_ADDR_VAR 0 3
3883: PUSH
3884: LD_VAR 0 4
3888: ST_TO_ADDR
// end ;
3889: LD_VAR 0 3
3893: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3894: LD_INT 0
3896: PPUSH
3897: PPUSH
3898: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3899: LD_ADDR_VAR 0 8
3903: PUSH
3904: LD_INT 22
3906: PUSH
3907: LD_VAR 0 1
3911: PPUSH
3912: CALL_OW 255
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PUSH
3921: LD_INT 21
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 3
3933: PUSH
3934: LD_INT 30
3936: PUSH
3937: LD_INT 3
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: LIST
3952: PPUSH
3953: CALL_OW 69
3957: ST_TO_ADDR
// if not tmp then
3958: LD_VAR 0 8
3962: NOT
3963: IFFALSE 3996
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3965: LD_VAR 0 1
3969: PPUSH
3970: LD_VAR 0 2
3974: PPUSH
3975: LD_VAR 0 3
3979: PPUSH
3980: LD_VAR 0 4
3984: PPUSH
3985: LD_VAR 0 5
3989: PPUSH
3990: CALL_OW 50
// exit ;
3994: GO 4242
// end ; for i in tmp do
3996: LD_ADDR_VAR 0 7
4000: PUSH
4001: LD_VAR 0 8
4005: PUSH
4006: FOR_IN
4007: IFFALSE 4211
// if IsNotFull ( i ) then
4009: LD_VAR 0 7
4013: PPUSH
4014: CALL 29143 0 1
4018: IFFALSE 4209
// begin PlaceHumanInUnit ( unit , i ) ;
4020: LD_VAR 0 1
4024: PPUSH
4025: LD_VAR 0 7
4029: PPUSH
4030: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
4034: LD_VAR 0 7
4038: PPUSH
4039: CALL_OW 266
4043: PUSH
4044: LD_INT 5
4046: PUSH
4047: LD_INT 4
4049: PUSH
4050: LD_INT 31
4052: PUSH
4053: LD_INT 32
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: IN
4062: IFFALSE 4095
// begin SetClass ( unit , class_soldier ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4076: LD_VAR 0 1
4080: PPUSH
4081: LD_VAR 0 7
4085: PPUSH
4086: CALL 59897 0 1
4090: PPUSH
4091: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4095: LD_VAR 0 7
4099: PPUSH
4100: CALL_OW 266
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 36
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: IN
4119: IFFALSE 4133
// SetClass ( unit , class_mechanic ) ;
4121: LD_VAR 0 1
4125: PPUSH
4126: LD_INT 3
4128: PPUSH
4129: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4133: LD_VAR 0 7
4137: PPUSH
4138: CALL_OW 266
4142: PUSH
4143: LD_INT 0
4145: PUSH
4146: LD_INT 1
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: IN
4153: IFFALSE 4167
// SetClass ( unit , class_engineer ) ;
4155: LD_VAR 0 1
4159: PPUSH
4160: LD_INT 2
4162: PPUSH
4163: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4167: LD_VAR 0 7
4171: PPUSH
4172: CALL_OW 266
4176: PUSH
4177: LD_INT 6
4179: PUSH
4180: LD_INT 7
4182: PUSH
4183: LD_INT 8
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: IN
4191: IFFALSE 4205
// SetClass ( unit , class_scientistic ) ;
4193: LD_VAR 0 1
4197: PPUSH
4198: LD_INT 4
4200: PPUSH
4201: CALL_OW 336
// exit ;
4205: POP
4206: POP
4207: GO 4242
// end ;
4209: GO 4006
4211: POP
4212: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4213: LD_VAR 0 1
4217: PPUSH
4218: LD_VAR 0 2
4222: PPUSH
4223: LD_VAR 0 3
4227: PPUSH
4228: LD_VAR 0 4
4232: PPUSH
4233: LD_VAR 0 5
4237: PPUSH
4238: CALL_OW 50
// end ;
4242: LD_VAR 0 6
4246: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4247: LD_INT 0
4249: PPUSH
// if unit in selectedTab then
4250: LD_VAR 0 1
4254: PUSH
4255: LD_VAR 0 3
4259: IN
4260: IFFALSE 4282
// SaveCharacters ( unit , 13c_ & unitString ) else
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_STRING 13c_
4269: PUSH
4270: LD_VAR 0 2
4274: STR
4275: PPUSH
4276: CALL_OW 38
4280: GO 4300
// SaveCharacters ( unit , 13s_ & unitString ) ;
4282: LD_VAR 0 1
4286: PPUSH
4287: LD_STRING 13s_
4289: PUSH
4290: LD_VAR 0 2
4294: STR
4295: PPUSH
4296: CALL_OW 38
// end ;
4300: LD_VAR 0 4
4304: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4305: LD_INT 0
4307: PPUSH
4308: PPUSH
4309: PPUSH
4310: PPUSH
// selected := [ ] ;
4311: LD_ADDR_EXP 23
4315: PUSH
4316: EMPTY
4317: ST_TO_ADDR
// othersSelect := [ ] ;
4318: LD_ADDR_EXP 24
4322: PUSH
4323: EMPTY
4324: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4325: LD_ADDR_VAR 0 3
4329: PUSH
4330: LD_EXP 3
4334: PUSH
4335: LD_EXP 4
4339: PUSH
4340: LD_EXP 5
4344: PUSH
4345: LD_EXP 6
4349: PUSH
4350: LD_EXP 8
4354: PUSH
4355: LD_EXP 9
4359: PUSH
4360: LD_EXP 10
4364: PUSH
4365: LD_EXP 11
4369: PUSH
4370: LD_EXP 12
4374: PUSH
4375: LD_EXP 13
4379: PUSH
4380: LD_EXP 14
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4398: LD_ADDR_VAR 0 3
4402: PUSH
4403: LD_VAR 0 3
4407: PUSH
4408: LD_EXP 18
4412: ADD
4413: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4414: LD_ADDR_VAR 0 3
4418: PUSH
4419: LD_VAR 0 3
4423: PUSH
4424: LD_EXP 17
4428: ADD
4429: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4430: LD_ADDR_VAR 0 3
4434: PUSH
4435: LD_VAR 0 3
4439: PUSH
4440: LD_EXP 19
4444: ADD
4445: ST_TO_ADDR
// for i in tmp do
4446: LD_ADDR_VAR 0 2
4450: PUSH
4451: LD_VAR 0 3
4455: PUSH
4456: FOR_IN
4457: IFFALSE 4496
// if GetClass ( i ) = 8 then
4459: LD_VAR 0 2
4463: PPUSH
4464: CALL_OW 257
4468: PUSH
4469: LD_INT 8
4471: EQUAL
4472: IFFALSE 4494
// SetClass ( i , rand ( 1 , 4 ) ) ;
4474: LD_VAR 0 2
4478: PPUSH
4479: LD_INT 1
4481: PPUSH
4482: LD_INT 4
4484: PPUSH
4485: CALL_OW 12
4489: PPUSH
4490: CALL_OW 336
4494: GO 4456
4496: POP
4497: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4498: LD_ADDR_EXP 23
4502: PUSH
4503: LD_STRING 1
4505: PPUSH
4506: LD_INT 6
4508: PPUSH
4509: LD_INT 6
4511: PPUSH
4512: LD_INT -5
4514: PUSH
4515: LD_EXP 1
4519: PUSH
4520: LD_EXP 16
4524: PUSH
4525: LD_INT -2
4527: PUSH
4528: LD_INT -3
4530: PUSH
4531: LD_INT -5
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: PUSH
4542: LD_VAR 0 3
4546: ADD
4547: PUSH
4548: LD_INT -6
4550: PUSH
4551: LD_INT -4
4553: PUSH
4554: LD_EXP 2
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: ADD
4564: PPUSH
4565: LD_INT 1
4567: PUSH
4568: LD_INT 0
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 2
4577: PUSH
4578: LD_INT 1
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 3
4587: PUSH
4588: LD_INT 0
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 4
4597: PUSH
4598: LD_INT 2
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 5
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: LD_INT 2
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: PPUSH
4626: CALL_OW 42
4630: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4631: LD_ADDR_EXP 24
4635: PUSH
4636: LD_EXP 23
4640: PUSH
4641: LD_EXP 3
4645: PUSH
4646: LD_EXP 4
4650: PUSH
4651: LD_EXP 5
4655: PUSH
4656: LD_EXP 6
4660: PUSH
4661: LD_EXP 7
4665: PUSH
4666: LD_EXP 8
4670: PUSH
4671: LD_EXP 9
4675: PUSH
4676: LD_EXP 10
4680: PUSH
4681: LD_EXP 11
4685: PUSH
4686: LD_EXP 12
4690: PUSH
4691: LD_EXP 13
4695: PUSH
4696: LD_EXP 14
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: DIFF
4715: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4716: LD_ADDR_VAR 0 4
4720: PUSH
4721: LD_VAR 0 3
4725: PUSH
4726: LD_EXP 23
4730: DIFF
4731: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4732: LD_ADDR_VAR 0 4
4736: PUSH
4737: LD_VAR 0 4
4741: PUSH
4742: LD_EXP 3
4746: PUSH
4747: LD_EXP 4
4751: PUSH
4752: LD_EXP 5
4756: PUSH
4757: LD_EXP 6
4761: PUSH
4762: LD_EXP 7
4766: PUSH
4767: LD_EXP 8
4771: PUSH
4772: LD_EXP 9
4776: PUSH
4777: LD_EXP 10
4781: PUSH
4782: LD_EXP 11
4786: PUSH
4787: LD_EXP 12
4791: PUSH
4792: LD_EXP 13
4796: PUSH
4797: LD_EXP 14
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: DIFF
4816: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4817: LD_VAR 0 4
4821: PPUSH
4822: LD_STRING 13s_others
4824: PPUSH
4825: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4829: LD_EXP 24
4833: PPUSH
4834: LD_STRING 13c_others
4836: PPUSH
4837: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4841: LD_EXP 1
4845: PPUSH
4846: LD_STRING 13c_JMM
4848: PPUSH
4849: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4853: LD_EXP 16
4857: PPUSH
4858: LD_STRING 13c_Stevens
4860: PPUSH
4861: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4865: LD_EXP 3
4869: PPUSH
4870: LD_STRING Lisa
4872: PPUSH
4873: LD_EXP 23
4877: PPUSH
4878: CALL 4247 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4882: LD_EXP 8
4886: PPUSH
4887: LD_STRING Brown
4889: PPUSH
4890: LD_EXP 23
4894: PPUSH
4895: CALL 4247 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4899: LD_EXP 4
4903: PPUSH
4904: LD_STRING Donaldson
4906: PPUSH
4907: LD_EXP 23
4911: PPUSH
4912: CALL 4247 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4916: LD_EXP 5
4920: PPUSH
4921: LD_STRING Bobby
4923: PPUSH
4924: LD_EXP 23
4928: PPUSH
4929: CALL 4247 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4933: LD_EXP 6
4937: PPUSH
4938: LD_STRING Cyrus
4940: PPUSH
4941: LD_EXP 23
4945: PPUSH
4946: CALL 4247 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4950: LD_EXP 7
4954: PPUSH
4955: LD_STRING Denis
4957: PPUSH
4958: LD_EXP 23
4962: PPUSH
4963: CALL 4247 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4967: LD_EXP 9
4971: PPUSH
4972: LD_STRING Gladstone
4974: PPUSH
4975: LD_EXP 23
4979: PPUSH
4980: CALL 4247 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4984: LD_EXP 10
4988: PPUSH
4989: LD_STRING Houten
4991: PPUSH
4992: LD_EXP 23
4996: PPUSH
4997: CALL 4247 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
5001: LD_EXP 11
5005: PPUSH
5006: LD_STRING Cornel
5008: PPUSH
5009: LD_EXP 23
5013: PPUSH
5014: CALL 4247 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
5018: LD_EXP 12
5022: PPUSH
5023: LD_STRING Gary
5025: PPUSH
5026: LD_EXP 23
5030: PPUSH
5031: CALL 4247 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5035: LD_EXP 13
5039: PPUSH
5040: LD_STRING Frank
5042: PPUSH
5043: LD_EXP 23
5047: PPUSH
5048: CALL 4247 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5052: LD_EXP 14
5056: PPUSH
5057: LD_STRING Kikuchi
5059: PPUSH
5060: LD_EXP 23
5064: PPUSH
5065: CALL 4247 0 3
// SaveCharactersAfterSelect ( DeltaDoctor , DeltaDoctor , selected ) ;
5069: LD_EXP 15
5073: PPUSH
5074: LD_STRING DeltaDoctor
5076: PPUSH
5077: LD_EXP 23
5081: PPUSH
5082: CALL 4247 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5086: LD_INT 22
5088: PUSH
5089: LD_INT 1
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 21
5098: PUSH
5099: LD_INT 1
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: PPUSH
5115: LD_INT 4
5117: PPUSH
5118: CALL_OW 235
// SetSide ( selected , 1 ) ;
5122: LD_EXP 23
5126: PPUSH
5127: LD_INT 1
5129: PPUSH
5130: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5134: LD_EXP 1
5138: PUSH
5139: LD_EXP 16
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5155: LD_ADDR_VAR 0 2
5159: PUSH
5160: LD_INT 22
5162: PUSH
5163: LD_INT 1
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: PUSH
5170: LD_INT 21
5172: PUSH
5173: LD_INT 1
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PPUSH
5184: CALL_OW 69
5188: PUSH
5189: FOR_IN
5190: IFFALSE 5203
// ComExit ( i ) ;
5192: LD_VAR 0 2
5196: PPUSH
5197: CALL 65068 0 1
5201: GO 5189
5203: POP
5204: POP
// end ; end_of_file
5205: LD_VAR 0 1
5209: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5210: LD_VAR 0 1
5214: PPUSH
5215: CALL 21432 0 1
// if un = JMM then
5219: LD_VAR 0 1
5223: PUSH
5224: LD_EXP 1
5228: EQUAL
5229: IFFALSE 5238
// YouLost ( JMM ) ;
5231: LD_STRING JMM
5233: PPUSH
5234: CALL_OW 104
// end ;
5238: PPOPN 1
5240: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5241: LD_VAR 0 1
5245: PPUSH
5246: LD_VAR 0 2
5250: PPUSH
5251: CALL 21490 0 2
// end ; end_of_file
5255: PPOPN 2
5257: END
// export function Action ; begin
5258: LD_INT 0
5260: PPUSH
// InGameOn ;
5261: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5265: LD_INT 22
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: LD_INT 2
5277: PUSH
5278: LD_INT 30
5280: PUSH
5281: LD_INT 0
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 30
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PPUSH
5307: CALL_OW 69
5311: PPUSH
5312: CALL_OW 87
// wait ( 0 0$1 ) ;
5316: LD_INT 35
5318: PPUSH
5319: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5323: LD_EXP 1
5327: PPUSH
5328: LD_STRING D1-JMM-1
5330: PPUSH
5331: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5335: LD_EXP 2
5339: PPUSH
5340: LD_STRING D1-Pow-1
5342: PPUSH
5343: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5347: LD_EXP 2
5351: PPUSH
5352: LD_STRING D1-Pow-1a
5354: PPUSH
5355: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5359: LD_EXP 2
5363: PPUSH
5364: LD_STRING D1-Pow-1b
5366: PPUSH
5367: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5371: LD_EXP 2
5375: PPUSH
5376: LD_STRING D1-Pow-1c
5378: PPUSH
5379: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5383: LD_EXP 1
5387: PPUSH
5388: LD_STRING D1-JMM-2
5390: PPUSH
5391: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5395: LD_EXP 2
5399: PPUSH
5400: LD_STRING D1-Pow-2
5402: PPUSH
5403: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5407: LD_EXP 1
5411: PPUSH
5412: LD_STRING D1-JMM-3
5414: PPUSH
5415: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5419: LD_EXP 2
5423: PPUSH
5424: LD_STRING D1-Pow-3
5426: PPUSH
5427: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5431: LD_EXP 1
5435: PPUSH
5436: LD_STRING D1-JMM-4
5438: PPUSH
5439: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5443: LD_EXP 2
5447: PPUSH
5448: LD_STRING D1-Pow-4
5450: PPUSH
5451: CALL_OW 94
// SelectAndSaveCharacters ;
5455: CALL 4305 0 0
// InGameOff ;
5459: CALL_OW 9
// Query ( Q1 ) ;
5463: LD_STRING Q1
5465: PPUSH
5466: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5470: LD_INT 2
5472: PPUSH
5473: LD_INT 1
5475: PPUSH
5476: CALL_OW 424
// end ; end_of_file
5480: LD_VAR 0 1
5484: RET
// export globalGameSaveCounter ; every 0 0$1 do
5485: GO 5487
5487: DISABLE
// begin enable ;
5488: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5489: LD_STRING updateTimer(
5491: PUSH
5492: LD_OWVAR 1
5496: STR
5497: PUSH
5498: LD_STRING );
5500: STR
5501: PPUSH
5502: CALL_OW 559
// end ;
5506: END
// every 0 0$1 do
5507: GO 5509
5509: DISABLE
// begin globalGameSaveCounter := 0 ;
5510: LD_ADDR_EXP 25
5514: PUSH
5515: LD_INT 0
5517: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5518: LD_STRING setGameSaveCounter(0)
5520: PPUSH
5521: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5525: LD_STRING initStreamRollete();
5527: PPUSH
5528: CALL_OW 559
// InitStreamMode ;
5532: CALL 6875 0 0
// DefineStreamItems ( false ) ;
5536: LD_INT 0
5538: PPUSH
5539: CALL 7339 0 1
// end ;
5543: END
// export function SOS_MapStart ( ) ; begin
5544: LD_INT 0
5546: PPUSH
// if streamModeActive then
5547: LD_EXP 26
5551: IFFALSE 5560
// DefineStreamItems ( true ) ;
5553: LD_INT 1
5555: PPUSH
5556: CALL 7339 0 1
// UpdateLuaVariables ( ) ;
5560: CALL 5577 0 0
// UpdateFactoryWaypoints ( ) ;
5564: CALL 20341 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5568: CALL 20593 0 0
// end ;
5572: LD_VAR 0 1
5576: RET
// function UpdateLuaVariables ( ) ; begin
5577: LD_INT 0
5579: PPUSH
// if globalGameSaveCounter then
5580: LD_EXP 25
5584: IFFALSE 5618
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5586: LD_ADDR_EXP 25
5590: PUSH
5591: LD_EXP 25
5595: PPUSH
5596: CALL 66031 0 1
5600: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5601: LD_STRING setGameSaveCounter(
5603: PUSH
5604: LD_EXP 25
5608: STR
5609: PUSH
5610: LD_STRING )
5612: STR
5613: PPUSH
5614: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5618: LD_STRING setGameDifficulty(
5620: PUSH
5621: LD_OWVAR 67
5625: STR
5626: PUSH
5627: LD_STRING )
5629: STR
5630: PPUSH
5631: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
5635: LD_STRING displayDifficulty(
5637: PUSH
5638: LD_OWVAR 67
5642: STR
5643: PUSH
5644: LD_STRING )
5646: STR
5647: PPUSH
5648: CALL_OW 559
// end ;
5652: LD_VAR 0 1
5656: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5657: LD_INT 0
5659: PPUSH
// if p2 = stream_mode then
5660: LD_VAR 0 2
5664: PUSH
5665: LD_INT 100
5667: EQUAL
5668: IFFALSE 6671
// begin if not StreamModeActive then
5670: LD_EXP 26
5674: NOT
5675: IFFALSE 5685
// StreamModeActive := true ;
5677: LD_ADDR_EXP 26
5681: PUSH
5682: LD_INT 1
5684: ST_TO_ADDR
// if p3 = 0 then
5685: LD_VAR 0 3
5689: PUSH
5690: LD_INT 0
5692: EQUAL
5693: IFFALSE 5699
// InitStreamMode ;
5695: CALL 6875 0 0
// if p3 = 1 then
5699: LD_VAR 0 3
5703: PUSH
5704: LD_INT 1
5706: EQUAL
5707: IFFALSE 5717
// sRocket := true ;
5709: LD_ADDR_EXP 31
5713: PUSH
5714: LD_INT 1
5716: ST_TO_ADDR
// if p3 = 2 then
5717: LD_VAR 0 3
5721: PUSH
5722: LD_INT 2
5724: EQUAL
5725: IFFALSE 5735
// sSpeed := true ;
5727: LD_ADDR_EXP 30
5731: PUSH
5732: LD_INT 1
5734: ST_TO_ADDR
// if p3 = 3 then
5735: LD_VAR 0 3
5739: PUSH
5740: LD_INT 3
5742: EQUAL
5743: IFFALSE 5753
// sEngine := true ;
5745: LD_ADDR_EXP 32
5749: PUSH
5750: LD_INT 1
5752: ST_TO_ADDR
// if p3 = 4 then
5753: LD_VAR 0 3
5757: PUSH
5758: LD_INT 4
5760: EQUAL
5761: IFFALSE 5771
// sSpec := true ;
5763: LD_ADDR_EXP 29
5767: PUSH
5768: LD_INT 1
5770: ST_TO_ADDR
// if p3 = 5 then
5771: LD_VAR 0 3
5775: PUSH
5776: LD_INT 5
5778: EQUAL
5779: IFFALSE 5789
// sLevel := true ;
5781: LD_ADDR_EXP 33
5785: PUSH
5786: LD_INT 1
5788: ST_TO_ADDR
// if p3 = 6 then
5789: LD_VAR 0 3
5793: PUSH
5794: LD_INT 6
5796: EQUAL
5797: IFFALSE 5807
// sArmoury := true ;
5799: LD_ADDR_EXP 34
5803: PUSH
5804: LD_INT 1
5806: ST_TO_ADDR
// if p3 = 7 then
5807: LD_VAR 0 3
5811: PUSH
5812: LD_INT 7
5814: EQUAL
5815: IFFALSE 5825
// sRadar := true ;
5817: LD_ADDR_EXP 35
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// if p3 = 8 then
5825: LD_VAR 0 3
5829: PUSH
5830: LD_INT 8
5832: EQUAL
5833: IFFALSE 5843
// sBunker := true ;
5835: LD_ADDR_EXP 36
5839: PUSH
5840: LD_INT 1
5842: ST_TO_ADDR
// if p3 = 9 then
5843: LD_VAR 0 3
5847: PUSH
5848: LD_INT 9
5850: EQUAL
5851: IFFALSE 5861
// sHack := true ;
5853: LD_ADDR_EXP 37
5857: PUSH
5858: LD_INT 1
5860: ST_TO_ADDR
// if p3 = 10 then
5861: LD_VAR 0 3
5865: PUSH
5866: LD_INT 10
5868: EQUAL
5869: IFFALSE 5879
// sFire := true ;
5871: LD_ADDR_EXP 38
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
// if p3 = 11 then
5879: LD_VAR 0 3
5883: PUSH
5884: LD_INT 11
5886: EQUAL
5887: IFFALSE 5897
// sRefresh := true ;
5889: LD_ADDR_EXP 39
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// if p3 = 12 then
5897: LD_VAR 0 3
5901: PUSH
5902: LD_INT 12
5904: EQUAL
5905: IFFALSE 5915
// sExp := true ;
5907: LD_ADDR_EXP 40
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// if p3 = 13 then
5915: LD_VAR 0 3
5919: PUSH
5920: LD_INT 13
5922: EQUAL
5923: IFFALSE 5933
// sDepot := true ;
5925: LD_ADDR_EXP 41
5929: PUSH
5930: LD_INT 1
5932: ST_TO_ADDR
// if p3 = 14 then
5933: LD_VAR 0 3
5937: PUSH
5938: LD_INT 14
5940: EQUAL
5941: IFFALSE 5951
// sFlag := true ;
5943: LD_ADDR_EXP 42
5947: PUSH
5948: LD_INT 1
5950: ST_TO_ADDR
// if p3 = 15 then
5951: LD_VAR 0 3
5955: PUSH
5956: LD_INT 15
5958: EQUAL
5959: IFFALSE 5969
// sKamikadze := true ;
5961: LD_ADDR_EXP 50
5965: PUSH
5966: LD_INT 1
5968: ST_TO_ADDR
// if p3 = 16 then
5969: LD_VAR 0 3
5973: PUSH
5974: LD_INT 16
5976: EQUAL
5977: IFFALSE 5987
// sTroll := true ;
5979: LD_ADDR_EXP 51
5983: PUSH
5984: LD_INT 1
5986: ST_TO_ADDR
// if p3 = 17 then
5987: LD_VAR 0 3
5991: PUSH
5992: LD_INT 17
5994: EQUAL
5995: IFFALSE 6005
// sSlow := true ;
5997: LD_ADDR_EXP 52
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// if p3 = 18 then
6005: LD_VAR 0 3
6009: PUSH
6010: LD_INT 18
6012: EQUAL
6013: IFFALSE 6023
// sLack := true ;
6015: LD_ADDR_EXP 53
6019: PUSH
6020: LD_INT 1
6022: ST_TO_ADDR
// if p3 = 19 then
6023: LD_VAR 0 3
6027: PUSH
6028: LD_INT 19
6030: EQUAL
6031: IFFALSE 6041
// sTank := true ;
6033: LD_ADDR_EXP 55
6037: PUSH
6038: LD_INT 1
6040: ST_TO_ADDR
// if p3 = 20 then
6041: LD_VAR 0 3
6045: PUSH
6046: LD_INT 20
6048: EQUAL
6049: IFFALSE 6059
// sRemote := true ;
6051: LD_ADDR_EXP 56
6055: PUSH
6056: LD_INT 1
6058: ST_TO_ADDR
// if p3 = 21 then
6059: LD_VAR 0 3
6063: PUSH
6064: LD_INT 21
6066: EQUAL
6067: IFFALSE 6077
// sPowell := true ;
6069: LD_ADDR_EXP 57
6073: PUSH
6074: LD_INT 1
6076: ST_TO_ADDR
// if p3 = 22 then
6077: LD_VAR 0 3
6081: PUSH
6082: LD_INT 22
6084: EQUAL
6085: IFFALSE 6095
// sTeleport := true ;
6087: LD_ADDR_EXP 60
6091: PUSH
6092: LD_INT 1
6094: ST_TO_ADDR
// if p3 = 23 then
6095: LD_VAR 0 3
6099: PUSH
6100: LD_INT 23
6102: EQUAL
6103: IFFALSE 6113
// sOilTower := true ;
6105: LD_ADDR_EXP 62
6109: PUSH
6110: LD_INT 1
6112: ST_TO_ADDR
// if p3 = 24 then
6113: LD_VAR 0 3
6117: PUSH
6118: LD_INT 24
6120: EQUAL
6121: IFFALSE 6131
// sShovel := true ;
6123: LD_ADDR_EXP 63
6127: PUSH
6128: LD_INT 1
6130: ST_TO_ADDR
// if p3 = 25 then
6131: LD_VAR 0 3
6135: PUSH
6136: LD_INT 25
6138: EQUAL
6139: IFFALSE 6149
// sSheik := true ;
6141: LD_ADDR_EXP 64
6145: PUSH
6146: LD_INT 1
6148: ST_TO_ADDR
// if p3 = 26 then
6149: LD_VAR 0 3
6153: PUSH
6154: LD_INT 26
6156: EQUAL
6157: IFFALSE 6167
// sEarthquake := true ;
6159: LD_ADDR_EXP 66
6163: PUSH
6164: LD_INT 1
6166: ST_TO_ADDR
// if p3 = 27 then
6167: LD_VAR 0 3
6171: PUSH
6172: LD_INT 27
6174: EQUAL
6175: IFFALSE 6185
// sAI := true ;
6177: LD_ADDR_EXP 67
6181: PUSH
6182: LD_INT 1
6184: ST_TO_ADDR
// if p3 = 28 then
6185: LD_VAR 0 3
6189: PUSH
6190: LD_INT 28
6192: EQUAL
6193: IFFALSE 6203
// sCargo := true ;
6195: LD_ADDR_EXP 70
6199: PUSH
6200: LD_INT 1
6202: ST_TO_ADDR
// if p3 = 29 then
6203: LD_VAR 0 3
6207: PUSH
6208: LD_INT 29
6210: EQUAL
6211: IFFALSE 6221
// sDLaser := true ;
6213: LD_ADDR_EXP 71
6217: PUSH
6218: LD_INT 1
6220: ST_TO_ADDR
// if p3 = 30 then
6221: LD_VAR 0 3
6225: PUSH
6226: LD_INT 30
6228: EQUAL
6229: IFFALSE 6239
// sExchange := true ;
6231: LD_ADDR_EXP 72
6235: PUSH
6236: LD_INT 1
6238: ST_TO_ADDR
// if p3 = 31 then
6239: LD_VAR 0 3
6243: PUSH
6244: LD_INT 31
6246: EQUAL
6247: IFFALSE 6257
// sFac := true ;
6249: LD_ADDR_EXP 73
6253: PUSH
6254: LD_INT 1
6256: ST_TO_ADDR
// if p3 = 32 then
6257: LD_VAR 0 3
6261: PUSH
6262: LD_INT 32
6264: EQUAL
6265: IFFALSE 6275
// sPower := true ;
6267: LD_ADDR_EXP 74
6271: PUSH
6272: LD_INT 1
6274: ST_TO_ADDR
// if p3 = 33 then
6275: LD_VAR 0 3
6279: PUSH
6280: LD_INT 33
6282: EQUAL
6283: IFFALSE 6293
// sRandom := true ;
6285: LD_ADDR_EXP 75
6289: PUSH
6290: LD_INT 1
6292: ST_TO_ADDR
// if p3 = 34 then
6293: LD_VAR 0 3
6297: PUSH
6298: LD_INT 34
6300: EQUAL
6301: IFFALSE 6311
// sShield := true ;
6303: LD_ADDR_EXP 76
6307: PUSH
6308: LD_INT 1
6310: ST_TO_ADDR
// if p3 = 35 then
6311: LD_VAR 0 3
6315: PUSH
6316: LD_INT 35
6318: EQUAL
6319: IFFALSE 6329
// sTime := true ;
6321: LD_ADDR_EXP 77
6325: PUSH
6326: LD_INT 1
6328: ST_TO_ADDR
// if p3 = 36 then
6329: LD_VAR 0 3
6333: PUSH
6334: LD_INT 36
6336: EQUAL
6337: IFFALSE 6347
// sTools := true ;
6339: LD_ADDR_EXP 78
6343: PUSH
6344: LD_INT 1
6346: ST_TO_ADDR
// if p3 = 101 then
6347: LD_VAR 0 3
6351: PUSH
6352: LD_INT 101
6354: EQUAL
6355: IFFALSE 6365
// sSold := true ;
6357: LD_ADDR_EXP 43
6361: PUSH
6362: LD_INT 1
6364: ST_TO_ADDR
// if p3 = 102 then
6365: LD_VAR 0 3
6369: PUSH
6370: LD_INT 102
6372: EQUAL
6373: IFFALSE 6383
// sDiff := true ;
6375: LD_ADDR_EXP 44
6379: PUSH
6380: LD_INT 1
6382: ST_TO_ADDR
// if p3 = 103 then
6383: LD_VAR 0 3
6387: PUSH
6388: LD_INT 103
6390: EQUAL
6391: IFFALSE 6401
// sFog := true ;
6393: LD_ADDR_EXP 47
6397: PUSH
6398: LD_INT 1
6400: ST_TO_ADDR
// if p3 = 104 then
6401: LD_VAR 0 3
6405: PUSH
6406: LD_INT 104
6408: EQUAL
6409: IFFALSE 6419
// sReset := true ;
6411: LD_ADDR_EXP 48
6415: PUSH
6416: LD_INT 1
6418: ST_TO_ADDR
// if p3 = 105 then
6419: LD_VAR 0 3
6423: PUSH
6424: LD_INT 105
6426: EQUAL
6427: IFFALSE 6437
// sSun := true ;
6429: LD_ADDR_EXP 49
6433: PUSH
6434: LD_INT 1
6436: ST_TO_ADDR
// if p3 = 106 then
6437: LD_VAR 0 3
6441: PUSH
6442: LD_INT 106
6444: EQUAL
6445: IFFALSE 6455
// sTiger := true ;
6447: LD_ADDR_EXP 45
6451: PUSH
6452: LD_INT 1
6454: ST_TO_ADDR
// if p3 = 107 then
6455: LD_VAR 0 3
6459: PUSH
6460: LD_INT 107
6462: EQUAL
6463: IFFALSE 6473
// sBomb := true ;
6465: LD_ADDR_EXP 46
6469: PUSH
6470: LD_INT 1
6472: ST_TO_ADDR
// if p3 = 108 then
6473: LD_VAR 0 3
6477: PUSH
6478: LD_INT 108
6480: EQUAL
6481: IFFALSE 6491
// sWound := true ;
6483: LD_ADDR_EXP 54
6487: PUSH
6488: LD_INT 1
6490: ST_TO_ADDR
// if p3 = 109 then
6491: LD_VAR 0 3
6495: PUSH
6496: LD_INT 109
6498: EQUAL
6499: IFFALSE 6509
// sBetray := true ;
6501: LD_ADDR_EXP 58
6505: PUSH
6506: LD_INT 1
6508: ST_TO_ADDR
// if p3 = 110 then
6509: LD_VAR 0 3
6513: PUSH
6514: LD_INT 110
6516: EQUAL
6517: IFFALSE 6527
// sContamin := true ;
6519: LD_ADDR_EXP 59
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// if p3 = 111 then
6527: LD_VAR 0 3
6531: PUSH
6532: LD_INT 111
6534: EQUAL
6535: IFFALSE 6545
// sOil := true ;
6537: LD_ADDR_EXP 61
6541: PUSH
6542: LD_INT 1
6544: ST_TO_ADDR
// if p3 = 112 then
6545: LD_VAR 0 3
6549: PUSH
6550: LD_INT 112
6552: EQUAL
6553: IFFALSE 6563
// sStu := true ;
6555: LD_ADDR_EXP 65
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// if p3 = 113 then
6563: LD_VAR 0 3
6567: PUSH
6568: LD_INT 113
6570: EQUAL
6571: IFFALSE 6581
// sBazooka := true ;
6573: LD_ADDR_EXP 68
6577: PUSH
6578: LD_INT 1
6580: ST_TO_ADDR
// if p3 = 114 then
6581: LD_VAR 0 3
6585: PUSH
6586: LD_INT 114
6588: EQUAL
6589: IFFALSE 6599
// sMortar := true ;
6591: LD_ADDR_EXP 69
6595: PUSH
6596: LD_INT 1
6598: ST_TO_ADDR
// if p3 = 115 then
6599: LD_VAR 0 3
6603: PUSH
6604: LD_INT 115
6606: EQUAL
6607: IFFALSE 6617
// sRanger := true ;
6609: LD_ADDR_EXP 79
6613: PUSH
6614: LD_INT 1
6616: ST_TO_ADDR
// if p3 = 116 then
6617: LD_VAR 0 3
6621: PUSH
6622: LD_INT 116
6624: EQUAL
6625: IFFALSE 6635
// sComputer := true ;
6627: LD_ADDR_EXP 80
6631: PUSH
6632: LD_INT 1
6634: ST_TO_ADDR
// if p3 = 117 then
6635: LD_VAR 0 3
6639: PUSH
6640: LD_INT 117
6642: EQUAL
6643: IFFALSE 6653
// s30 := true ;
6645: LD_ADDR_EXP 81
6649: PUSH
6650: LD_INT 1
6652: ST_TO_ADDR
// if p3 = 118 then
6653: LD_VAR 0 3
6657: PUSH
6658: LD_INT 118
6660: EQUAL
6661: IFFALSE 6671
// s60 := true ;
6663: LD_ADDR_EXP 82
6667: PUSH
6668: LD_INT 1
6670: ST_TO_ADDR
// end ; if p2 = hack_mode then
6671: LD_VAR 0 2
6675: PUSH
6676: LD_INT 101
6678: EQUAL
6679: IFFALSE 6807
// begin case p3 of 1 :
6681: LD_VAR 0 3
6685: PUSH
6686: LD_INT 1
6688: DOUBLE
6689: EQUAL
6690: IFTRUE 6694
6692: GO 6701
6694: POP
// hHackUnlimitedResources ; 2 :
6695: CALL 18954 0 0
6699: GO 6807
6701: LD_INT 2
6703: DOUBLE
6704: EQUAL
6705: IFTRUE 6709
6707: GO 6716
6709: POP
// hHackSetLevel10 ; 3 :
6710: CALL 19087 0 0
6714: GO 6807
6716: LD_INT 3
6718: DOUBLE
6719: EQUAL
6720: IFTRUE 6724
6722: GO 6731
6724: POP
// hHackSetLevel10YourUnits ; 4 :
6725: CALL 19172 0 0
6729: GO 6807
6731: LD_INT 4
6733: DOUBLE
6734: EQUAL
6735: IFTRUE 6739
6737: GO 6746
6739: POP
// hHackInvincible ; 5 :
6740: CALL 19620 0 0
6744: GO 6807
6746: LD_INT 5
6748: DOUBLE
6749: EQUAL
6750: IFTRUE 6754
6752: GO 6761
6754: POP
// hHackInvisible ; 6 :
6755: CALL 19731 0 0
6759: GO 6807
6761: LD_INT 6
6763: DOUBLE
6764: EQUAL
6765: IFTRUE 6769
6767: GO 6776
6769: POP
// hHackChangeYourSide ; 7 :
6770: CALL 19788 0 0
6774: GO 6807
6776: LD_INT 7
6778: DOUBLE
6779: EQUAL
6780: IFTRUE 6784
6782: GO 6791
6784: POP
// hHackChangeUnitSide ; 8 :
6785: CALL 19830 0 0
6789: GO 6807
6791: LD_INT 8
6793: DOUBLE
6794: EQUAL
6795: IFTRUE 6799
6797: GO 6806
6799: POP
// hHackFog ; end ;
6800: CALL 19931 0 0
6804: GO 6807
6806: POP
// end ; if p2 = game_save_mode then
6807: LD_VAR 0 2
6811: PUSH
6812: LD_INT 102
6814: EQUAL
6815: IFFALSE 6870
// begin if p3 = 1 then
6817: LD_VAR 0 3
6821: PUSH
6822: LD_INT 1
6824: EQUAL
6825: IFFALSE 6837
// globalGameSaveCounter := p4 ;
6827: LD_ADDR_EXP 25
6831: PUSH
6832: LD_VAR 0 4
6836: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6837: LD_VAR 0 3
6841: PUSH
6842: LD_INT 2
6844: EQUAL
6845: PUSH
6846: LD_EXP 25
6850: AND
6851: IFFALSE 6870
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6853: LD_STRING setGameSaveCounter(
6855: PUSH
6856: LD_EXP 25
6860: STR
6861: PUSH
6862: LD_STRING )
6864: STR
6865: PPUSH
6866: CALL_OW 559
// end ; end ;
6870: LD_VAR 0 7
6874: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6875: LD_INT 0
6877: PPUSH
// streamModeActive := false ;
6878: LD_ADDR_EXP 26
6882: PUSH
6883: LD_INT 0
6885: ST_TO_ADDR
// normalCounter := 36 ;
6886: LD_ADDR_EXP 27
6890: PUSH
6891: LD_INT 36
6893: ST_TO_ADDR
// hardcoreCounter := 18 ;
6894: LD_ADDR_EXP 28
6898: PUSH
6899: LD_INT 18
6901: ST_TO_ADDR
// sRocket := false ;
6902: LD_ADDR_EXP 31
6906: PUSH
6907: LD_INT 0
6909: ST_TO_ADDR
// sSpeed := false ;
6910: LD_ADDR_EXP 30
6914: PUSH
6915: LD_INT 0
6917: ST_TO_ADDR
// sEngine := false ;
6918: LD_ADDR_EXP 32
6922: PUSH
6923: LD_INT 0
6925: ST_TO_ADDR
// sSpec := false ;
6926: LD_ADDR_EXP 29
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// sLevel := false ;
6934: LD_ADDR_EXP 33
6938: PUSH
6939: LD_INT 0
6941: ST_TO_ADDR
// sArmoury := false ;
6942: LD_ADDR_EXP 34
6946: PUSH
6947: LD_INT 0
6949: ST_TO_ADDR
// sRadar := false ;
6950: LD_ADDR_EXP 35
6954: PUSH
6955: LD_INT 0
6957: ST_TO_ADDR
// sBunker := false ;
6958: LD_ADDR_EXP 36
6962: PUSH
6963: LD_INT 0
6965: ST_TO_ADDR
// sHack := false ;
6966: LD_ADDR_EXP 37
6970: PUSH
6971: LD_INT 0
6973: ST_TO_ADDR
// sFire := false ;
6974: LD_ADDR_EXP 38
6978: PUSH
6979: LD_INT 0
6981: ST_TO_ADDR
// sRefresh := false ;
6982: LD_ADDR_EXP 39
6986: PUSH
6987: LD_INT 0
6989: ST_TO_ADDR
// sExp := false ;
6990: LD_ADDR_EXP 40
6994: PUSH
6995: LD_INT 0
6997: ST_TO_ADDR
// sDepot := false ;
6998: LD_ADDR_EXP 41
7002: PUSH
7003: LD_INT 0
7005: ST_TO_ADDR
// sFlag := false ;
7006: LD_ADDR_EXP 42
7010: PUSH
7011: LD_INT 0
7013: ST_TO_ADDR
// sKamikadze := false ;
7014: LD_ADDR_EXP 50
7018: PUSH
7019: LD_INT 0
7021: ST_TO_ADDR
// sTroll := false ;
7022: LD_ADDR_EXP 51
7026: PUSH
7027: LD_INT 0
7029: ST_TO_ADDR
// sSlow := false ;
7030: LD_ADDR_EXP 52
7034: PUSH
7035: LD_INT 0
7037: ST_TO_ADDR
// sLack := false ;
7038: LD_ADDR_EXP 53
7042: PUSH
7043: LD_INT 0
7045: ST_TO_ADDR
// sTank := false ;
7046: LD_ADDR_EXP 55
7050: PUSH
7051: LD_INT 0
7053: ST_TO_ADDR
// sRemote := false ;
7054: LD_ADDR_EXP 56
7058: PUSH
7059: LD_INT 0
7061: ST_TO_ADDR
// sPowell := false ;
7062: LD_ADDR_EXP 57
7066: PUSH
7067: LD_INT 0
7069: ST_TO_ADDR
// sTeleport := false ;
7070: LD_ADDR_EXP 60
7074: PUSH
7075: LD_INT 0
7077: ST_TO_ADDR
// sOilTower := false ;
7078: LD_ADDR_EXP 62
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// sShovel := false ;
7086: LD_ADDR_EXP 63
7090: PUSH
7091: LD_INT 0
7093: ST_TO_ADDR
// sSheik := false ;
7094: LD_ADDR_EXP 64
7098: PUSH
7099: LD_INT 0
7101: ST_TO_ADDR
// sEarthquake := false ;
7102: LD_ADDR_EXP 66
7106: PUSH
7107: LD_INT 0
7109: ST_TO_ADDR
// sAI := false ;
7110: LD_ADDR_EXP 67
7114: PUSH
7115: LD_INT 0
7117: ST_TO_ADDR
// sCargo := false ;
7118: LD_ADDR_EXP 70
7122: PUSH
7123: LD_INT 0
7125: ST_TO_ADDR
// sDLaser := false ;
7126: LD_ADDR_EXP 71
7130: PUSH
7131: LD_INT 0
7133: ST_TO_ADDR
// sExchange := false ;
7134: LD_ADDR_EXP 72
7138: PUSH
7139: LD_INT 0
7141: ST_TO_ADDR
// sFac := false ;
7142: LD_ADDR_EXP 73
7146: PUSH
7147: LD_INT 0
7149: ST_TO_ADDR
// sPower := false ;
7150: LD_ADDR_EXP 74
7154: PUSH
7155: LD_INT 0
7157: ST_TO_ADDR
// sRandom := false ;
7158: LD_ADDR_EXP 75
7162: PUSH
7163: LD_INT 0
7165: ST_TO_ADDR
// sShield := false ;
7166: LD_ADDR_EXP 76
7170: PUSH
7171: LD_INT 0
7173: ST_TO_ADDR
// sTime := false ;
7174: LD_ADDR_EXP 77
7178: PUSH
7179: LD_INT 0
7181: ST_TO_ADDR
// sTools := false ;
7182: LD_ADDR_EXP 78
7186: PUSH
7187: LD_INT 0
7189: ST_TO_ADDR
// sSold := false ;
7190: LD_ADDR_EXP 43
7194: PUSH
7195: LD_INT 0
7197: ST_TO_ADDR
// sDiff := false ;
7198: LD_ADDR_EXP 44
7202: PUSH
7203: LD_INT 0
7205: ST_TO_ADDR
// sFog := false ;
7206: LD_ADDR_EXP 47
7210: PUSH
7211: LD_INT 0
7213: ST_TO_ADDR
// sReset := false ;
7214: LD_ADDR_EXP 48
7218: PUSH
7219: LD_INT 0
7221: ST_TO_ADDR
// sSun := false ;
7222: LD_ADDR_EXP 49
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// sTiger := false ;
7230: LD_ADDR_EXP 45
7234: PUSH
7235: LD_INT 0
7237: ST_TO_ADDR
// sBomb := false ;
7238: LD_ADDR_EXP 46
7242: PUSH
7243: LD_INT 0
7245: ST_TO_ADDR
// sWound := false ;
7246: LD_ADDR_EXP 54
7250: PUSH
7251: LD_INT 0
7253: ST_TO_ADDR
// sBetray := false ;
7254: LD_ADDR_EXP 58
7258: PUSH
7259: LD_INT 0
7261: ST_TO_ADDR
// sContamin := false ;
7262: LD_ADDR_EXP 59
7266: PUSH
7267: LD_INT 0
7269: ST_TO_ADDR
// sOil := false ;
7270: LD_ADDR_EXP 61
7274: PUSH
7275: LD_INT 0
7277: ST_TO_ADDR
// sStu := false ;
7278: LD_ADDR_EXP 65
7282: PUSH
7283: LD_INT 0
7285: ST_TO_ADDR
// sBazooka := false ;
7286: LD_ADDR_EXP 68
7290: PUSH
7291: LD_INT 0
7293: ST_TO_ADDR
// sMortar := false ;
7294: LD_ADDR_EXP 69
7298: PUSH
7299: LD_INT 0
7301: ST_TO_ADDR
// sRanger := false ;
7302: LD_ADDR_EXP 79
7306: PUSH
7307: LD_INT 0
7309: ST_TO_ADDR
// sComputer := false ;
7310: LD_ADDR_EXP 80
7314: PUSH
7315: LD_INT 0
7317: ST_TO_ADDR
// s30 := false ;
7318: LD_ADDR_EXP 81
7322: PUSH
7323: LD_INT 0
7325: ST_TO_ADDR
// s60 := false ;
7326: LD_ADDR_EXP 82
7330: PUSH
7331: LD_INT 0
7333: ST_TO_ADDR
// end ;
7334: LD_VAR 0 1
7338: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7339: LD_INT 0
7341: PPUSH
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
7346: PPUSH
7347: PPUSH
// result := [ ] ;
7348: LD_ADDR_VAR 0 2
7352: PUSH
7353: EMPTY
7354: ST_TO_ADDR
// if campaign_id = 1 then
7355: LD_OWVAR 69
7359: PUSH
7360: LD_INT 1
7362: EQUAL
7363: IFFALSE 10529
// begin case mission_number of 1 :
7365: LD_OWVAR 70
7369: PUSH
7370: LD_INT 1
7372: DOUBLE
7373: EQUAL
7374: IFTRUE 7378
7376: GO 7454
7378: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7379: LD_ADDR_VAR 0 2
7383: PUSH
7384: LD_INT 2
7386: PUSH
7387: LD_INT 4
7389: PUSH
7390: LD_INT 11
7392: PUSH
7393: LD_INT 12
7395: PUSH
7396: LD_INT 15
7398: PUSH
7399: LD_INT 16
7401: PUSH
7402: LD_INT 22
7404: PUSH
7405: LD_INT 23
7407: PUSH
7408: LD_INT 26
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 101
7424: PUSH
7425: LD_INT 102
7427: PUSH
7428: LD_INT 106
7430: PUSH
7431: LD_INT 116
7433: PUSH
7434: LD_INT 117
7436: PUSH
7437: LD_INT 118
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: ST_TO_ADDR
7452: GO 10527
7454: LD_INT 2
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7546
7462: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7463: LD_ADDR_VAR 0 2
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: LD_INT 4
7473: PUSH
7474: LD_INT 11
7476: PUSH
7477: LD_INT 12
7479: PUSH
7480: LD_INT 15
7482: PUSH
7483: LD_INT 16
7485: PUSH
7486: LD_INT 22
7488: PUSH
7489: LD_INT 23
7491: PUSH
7492: LD_INT 26
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 101
7508: PUSH
7509: LD_INT 102
7511: PUSH
7512: LD_INT 105
7514: PUSH
7515: LD_INT 106
7517: PUSH
7518: LD_INT 108
7520: PUSH
7521: LD_INT 116
7523: PUSH
7524: LD_INT 117
7526: PUSH
7527: LD_INT 118
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: ST_TO_ADDR
7544: GO 10527
7546: LD_INT 3
7548: DOUBLE
7549: EQUAL
7550: IFTRUE 7554
7552: GO 7642
7554: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7555: LD_ADDR_VAR 0 2
7559: PUSH
7560: LD_INT 2
7562: PUSH
7563: LD_INT 4
7565: PUSH
7566: LD_INT 5
7568: PUSH
7569: LD_INT 11
7571: PUSH
7572: LD_INT 12
7574: PUSH
7575: LD_INT 15
7577: PUSH
7578: LD_INT 16
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 26
7586: PUSH
7587: LD_INT 36
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 101
7604: PUSH
7605: LD_INT 102
7607: PUSH
7608: LD_INT 105
7610: PUSH
7611: LD_INT 106
7613: PUSH
7614: LD_INT 108
7616: PUSH
7617: LD_INT 116
7619: PUSH
7620: LD_INT 117
7622: PUSH
7623: LD_INT 118
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: ST_TO_ADDR
7640: GO 10527
7642: LD_INT 4
7644: DOUBLE
7645: EQUAL
7646: IFTRUE 7650
7648: GO 7746
7650: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7651: LD_ADDR_VAR 0 2
7655: PUSH
7656: LD_INT 2
7658: PUSH
7659: LD_INT 4
7661: PUSH
7662: LD_INT 5
7664: PUSH
7665: LD_INT 8
7667: PUSH
7668: LD_INT 11
7670: PUSH
7671: LD_INT 12
7673: PUSH
7674: LD_INT 15
7676: PUSH
7677: LD_INT 16
7679: PUSH
7680: LD_INT 22
7682: PUSH
7683: LD_INT 23
7685: PUSH
7686: LD_INT 26
7688: PUSH
7689: LD_INT 36
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 101
7708: PUSH
7709: LD_INT 102
7711: PUSH
7712: LD_INT 105
7714: PUSH
7715: LD_INT 106
7717: PUSH
7718: LD_INT 108
7720: PUSH
7721: LD_INT 116
7723: PUSH
7724: LD_INT 117
7726: PUSH
7727: LD_INT 118
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: ST_TO_ADDR
7744: GO 10527
7746: LD_INT 5
7748: DOUBLE
7749: EQUAL
7750: IFTRUE 7754
7752: GO 7866
7754: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_INT 2
7762: PUSH
7763: LD_INT 4
7765: PUSH
7766: LD_INT 5
7768: PUSH
7769: LD_INT 6
7771: PUSH
7772: LD_INT 8
7774: PUSH
7775: LD_INT 11
7777: PUSH
7778: LD_INT 12
7780: PUSH
7781: LD_INT 15
7783: PUSH
7784: LD_INT 16
7786: PUSH
7787: LD_INT 22
7789: PUSH
7790: LD_INT 23
7792: PUSH
7793: LD_INT 25
7795: PUSH
7796: LD_INT 26
7798: PUSH
7799: LD_INT 36
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 101
7820: PUSH
7821: LD_INT 102
7823: PUSH
7824: LD_INT 105
7826: PUSH
7827: LD_INT 106
7829: PUSH
7830: LD_INT 108
7832: PUSH
7833: LD_INT 109
7835: PUSH
7836: LD_INT 112
7838: PUSH
7839: LD_INT 116
7841: PUSH
7842: LD_INT 117
7844: PUSH
7845: LD_INT 118
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: ST_TO_ADDR
7864: GO 10527
7866: LD_INT 6
7868: DOUBLE
7869: EQUAL
7870: IFTRUE 7874
7872: GO 8006
7874: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7875: LD_ADDR_VAR 0 2
7879: PUSH
7880: LD_INT 2
7882: PUSH
7883: LD_INT 4
7885: PUSH
7886: LD_INT 5
7888: PUSH
7889: LD_INT 6
7891: PUSH
7892: LD_INT 8
7894: PUSH
7895: LD_INT 11
7897: PUSH
7898: LD_INT 12
7900: PUSH
7901: LD_INT 15
7903: PUSH
7904: LD_INT 16
7906: PUSH
7907: LD_INT 20
7909: PUSH
7910: LD_INT 21
7912: PUSH
7913: LD_INT 22
7915: PUSH
7916: LD_INT 23
7918: PUSH
7919: LD_INT 25
7921: PUSH
7922: LD_INT 26
7924: PUSH
7925: LD_INT 30
7927: PUSH
7928: LD_INT 31
7930: PUSH
7931: LD_INT 32
7933: PUSH
7934: LD_INT 36
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: PUSH
7958: LD_INT 101
7960: PUSH
7961: LD_INT 102
7963: PUSH
7964: LD_INT 105
7966: PUSH
7967: LD_INT 106
7969: PUSH
7970: LD_INT 108
7972: PUSH
7973: LD_INT 109
7975: PUSH
7976: LD_INT 112
7978: PUSH
7979: LD_INT 116
7981: PUSH
7982: LD_INT 117
7984: PUSH
7985: LD_INT 118
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: ST_TO_ADDR
8004: GO 10527
8006: LD_INT 7
8008: DOUBLE
8009: EQUAL
8010: IFTRUE 8014
8012: GO 8126
8014: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8015: LD_ADDR_VAR 0 2
8019: PUSH
8020: LD_INT 2
8022: PUSH
8023: LD_INT 4
8025: PUSH
8026: LD_INT 5
8028: PUSH
8029: LD_INT 7
8031: PUSH
8032: LD_INT 11
8034: PUSH
8035: LD_INT 12
8037: PUSH
8038: LD_INT 15
8040: PUSH
8041: LD_INT 16
8043: PUSH
8044: LD_INT 20
8046: PUSH
8047: LD_INT 21
8049: PUSH
8050: LD_INT 22
8052: PUSH
8053: LD_INT 23
8055: PUSH
8056: LD_INT 25
8058: PUSH
8059: LD_INT 26
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 101
8080: PUSH
8081: LD_INT 102
8083: PUSH
8084: LD_INT 103
8086: PUSH
8087: LD_INT 105
8089: PUSH
8090: LD_INT 106
8092: PUSH
8093: LD_INT 108
8095: PUSH
8096: LD_INT 112
8098: PUSH
8099: LD_INT 116
8101: PUSH
8102: LD_INT 117
8104: PUSH
8105: LD_INT 118
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: ST_TO_ADDR
8124: GO 10527
8126: LD_INT 8
8128: DOUBLE
8129: EQUAL
8130: IFTRUE 8134
8132: GO 8274
8134: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8135: LD_ADDR_VAR 0 2
8139: PUSH
8140: LD_INT 2
8142: PUSH
8143: LD_INT 4
8145: PUSH
8146: LD_INT 5
8148: PUSH
8149: LD_INT 6
8151: PUSH
8152: LD_INT 7
8154: PUSH
8155: LD_INT 8
8157: PUSH
8158: LD_INT 11
8160: PUSH
8161: LD_INT 12
8163: PUSH
8164: LD_INT 15
8166: PUSH
8167: LD_INT 16
8169: PUSH
8170: LD_INT 20
8172: PUSH
8173: LD_INT 21
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_INT 23
8181: PUSH
8182: LD_INT 25
8184: PUSH
8185: LD_INT 26
8187: PUSH
8188: LD_INT 30
8190: PUSH
8191: LD_INT 31
8193: PUSH
8194: LD_INT 32
8196: PUSH
8197: LD_INT 36
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 101
8224: PUSH
8225: LD_INT 102
8227: PUSH
8228: LD_INT 103
8230: PUSH
8231: LD_INT 105
8233: PUSH
8234: LD_INT 106
8236: PUSH
8237: LD_INT 108
8239: PUSH
8240: LD_INT 109
8242: PUSH
8243: LD_INT 112
8245: PUSH
8246: LD_INT 116
8248: PUSH
8249: LD_INT 117
8251: PUSH
8252: LD_INT 118
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: ST_TO_ADDR
8272: GO 10527
8274: LD_INT 9
8276: DOUBLE
8277: EQUAL
8278: IFTRUE 8282
8280: GO 8430
8282: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8283: LD_ADDR_VAR 0 2
8287: PUSH
8288: LD_INT 2
8290: PUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: LD_INT 6
8299: PUSH
8300: LD_INT 7
8302: PUSH
8303: LD_INT 8
8305: PUSH
8306: LD_INT 11
8308: PUSH
8309: LD_INT 12
8311: PUSH
8312: LD_INT 15
8314: PUSH
8315: LD_INT 16
8317: PUSH
8318: LD_INT 20
8320: PUSH
8321: LD_INT 21
8323: PUSH
8324: LD_INT 22
8326: PUSH
8327: LD_INT 23
8329: PUSH
8330: LD_INT 25
8332: PUSH
8333: LD_INT 26
8335: PUSH
8336: LD_INT 28
8338: PUSH
8339: LD_INT 30
8341: PUSH
8342: LD_INT 31
8344: PUSH
8345: LD_INT 32
8347: PUSH
8348: LD_INT 36
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: PUSH
8374: LD_INT 101
8376: PUSH
8377: LD_INT 102
8379: PUSH
8380: LD_INT 103
8382: PUSH
8383: LD_INT 105
8385: PUSH
8386: LD_INT 106
8388: PUSH
8389: LD_INT 108
8391: PUSH
8392: LD_INT 109
8394: PUSH
8395: LD_INT 112
8397: PUSH
8398: LD_INT 114
8400: PUSH
8401: LD_INT 116
8403: PUSH
8404: LD_INT 117
8406: PUSH
8407: LD_INT 118
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: ST_TO_ADDR
8428: GO 10527
8430: LD_INT 10
8432: DOUBLE
8433: EQUAL
8434: IFTRUE 8438
8436: GO 8634
8438: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8439: LD_ADDR_VAR 0 2
8443: PUSH
8444: LD_INT 2
8446: PUSH
8447: LD_INT 4
8449: PUSH
8450: LD_INT 5
8452: PUSH
8453: LD_INT 6
8455: PUSH
8456: LD_INT 7
8458: PUSH
8459: LD_INT 8
8461: PUSH
8462: LD_INT 9
8464: PUSH
8465: LD_INT 10
8467: PUSH
8468: LD_INT 11
8470: PUSH
8471: LD_INT 12
8473: PUSH
8474: LD_INT 13
8476: PUSH
8477: LD_INT 14
8479: PUSH
8480: LD_INT 15
8482: PUSH
8483: LD_INT 16
8485: PUSH
8486: LD_INT 17
8488: PUSH
8489: LD_INT 18
8491: PUSH
8492: LD_INT 19
8494: PUSH
8495: LD_INT 20
8497: PUSH
8498: LD_INT 21
8500: PUSH
8501: LD_INT 22
8503: PUSH
8504: LD_INT 23
8506: PUSH
8507: LD_INT 24
8509: PUSH
8510: LD_INT 25
8512: PUSH
8513: LD_INT 26
8515: PUSH
8516: LD_INT 28
8518: PUSH
8519: LD_INT 30
8521: PUSH
8522: LD_INT 31
8524: PUSH
8525: LD_INT 32
8527: PUSH
8528: LD_INT 36
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 101
8564: PUSH
8565: LD_INT 102
8567: PUSH
8568: LD_INT 103
8570: PUSH
8571: LD_INT 104
8573: PUSH
8574: LD_INT 105
8576: PUSH
8577: LD_INT 106
8579: PUSH
8580: LD_INT 107
8582: PUSH
8583: LD_INT 108
8585: PUSH
8586: LD_INT 109
8588: PUSH
8589: LD_INT 110
8591: PUSH
8592: LD_INT 111
8594: PUSH
8595: LD_INT 112
8597: PUSH
8598: LD_INT 114
8600: PUSH
8601: LD_INT 116
8603: PUSH
8604: LD_INT 117
8606: PUSH
8607: LD_INT 118
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: ST_TO_ADDR
8632: GO 10527
8634: LD_INT 11
8636: DOUBLE
8637: EQUAL
8638: IFTRUE 8642
8640: GO 8846
8642: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8643: LD_ADDR_VAR 0 2
8647: PUSH
8648: LD_INT 2
8650: PUSH
8651: LD_INT 3
8653: PUSH
8654: LD_INT 4
8656: PUSH
8657: LD_INT 5
8659: PUSH
8660: LD_INT 6
8662: PUSH
8663: LD_INT 7
8665: PUSH
8666: LD_INT 8
8668: PUSH
8669: LD_INT 9
8671: PUSH
8672: LD_INT 10
8674: PUSH
8675: LD_INT 11
8677: PUSH
8678: LD_INT 12
8680: PUSH
8681: LD_INT 13
8683: PUSH
8684: LD_INT 14
8686: PUSH
8687: LD_INT 15
8689: PUSH
8690: LD_INT 16
8692: PUSH
8693: LD_INT 17
8695: PUSH
8696: LD_INT 18
8698: PUSH
8699: LD_INT 19
8701: PUSH
8702: LD_INT 20
8704: PUSH
8705: LD_INT 21
8707: PUSH
8708: LD_INT 22
8710: PUSH
8711: LD_INT 23
8713: PUSH
8714: LD_INT 24
8716: PUSH
8717: LD_INT 25
8719: PUSH
8720: LD_INT 26
8722: PUSH
8723: LD_INT 28
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_INT 31
8731: PUSH
8732: LD_INT 32
8734: PUSH
8735: LD_INT 34
8737: PUSH
8738: LD_INT 36
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: PUSH
8774: LD_INT 101
8776: PUSH
8777: LD_INT 102
8779: PUSH
8780: LD_INT 103
8782: PUSH
8783: LD_INT 104
8785: PUSH
8786: LD_INT 105
8788: PUSH
8789: LD_INT 106
8791: PUSH
8792: LD_INT 107
8794: PUSH
8795: LD_INT 108
8797: PUSH
8798: LD_INT 109
8800: PUSH
8801: LD_INT 110
8803: PUSH
8804: LD_INT 111
8806: PUSH
8807: LD_INT 112
8809: PUSH
8810: LD_INT 114
8812: PUSH
8813: LD_INT 116
8815: PUSH
8816: LD_INT 117
8818: PUSH
8819: LD_INT 118
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: ST_TO_ADDR
8844: GO 10527
8846: LD_INT 12
8848: DOUBLE
8849: EQUAL
8850: IFTRUE 8854
8852: GO 9074
8854: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8855: LD_ADDR_VAR 0 2
8859: PUSH
8860: LD_INT 1
8862: PUSH
8863: LD_INT 2
8865: PUSH
8866: LD_INT 3
8868: PUSH
8869: LD_INT 4
8871: PUSH
8872: LD_INT 5
8874: PUSH
8875: LD_INT 6
8877: PUSH
8878: LD_INT 7
8880: PUSH
8881: LD_INT 8
8883: PUSH
8884: LD_INT 9
8886: PUSH
8887: LD_INT 10
8889: PUSH
8890: LD_INT 11
8892: PUSH
8893: LD_INT 12
8895: PUSH
8896: LD_INT 13
8898: PUSH
8899: LD_INT 14
8901: PUSH
8902: LD_INT 15
8904: PUSH
8905: LD_INT 16
8907: PUSH
8908: LD_INT 17
8910: PUSH
8911: LD_INT 18
8913: PUSH
8914: LD_INT 19
8916: PUSH
8917: LD_INT 20
8919: PUSH
8920: LD_INT 21
8922: PUSH
8923: LD_INT 22
8925: PUSH
8926: LD_INT 23
8928: PUSH
8929: LD_INT 24
8931: PUSH
8932: LD_INT 25
8934: PUSH
8935: LD_INT 26
8937: PUSH
8938: LD_INT 27
8940: PUSH
8941: LD_INT 28
8943: PUSH
8944: LD_INT 30
8946: PUSH
8947: LD_INT 31
8949: PUSH
8950: LD_INT 32
8952: PUSH
8953: LD_INT 33
8955: PUSH
8956: LD_INT 34
8958: PUSH
8959: LD_INT 36
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 101
9000: PUSH
9001: LD_INT 102
9003: PUSH
9004: LD_INT 103
9006: PUSH
9007: LD_INT 104
9009: PUSH
9010: LD_INT 105
9012: PUSH
9013: LD_INT 106
9015: PUSH
9016: LD_INT 107
9018: PUSH
9019: LD_INT 108
9021: PUSH
9022: LD_INT 109
9024: PUSH
9025: LD_INT 110
9027: PUSH
9028: LD_INT 111
9030: PUSH
9031: LD_INT 112
9033: PUSH
9034: LD_INT 113
9036: PUSH
9037: LD_INT 114
9039: PUSH
9040: LD_INT 116
9042: PUSH
9043: LD_INT 117
9045: PUSH
9046: LD_INT 118
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: ST_TO_ADDR
9072: GO 10527
9074: LD_INT 13
9076: DOUBLE
9077: EQUAL
9078: IFTRUE 9082
9080: GO 9290
9082: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9083: LD_ADDR_VAR 0 2
9087: PUSH
9088: LD_INT 1
9090: PUSH
9091: LD_INT 2
9093: PUSH
9094: LD_INT 3
9096: PUSH
9097: LD_INT 4
9099: PUSH
9100: LD_INT 5
9102: PUSH
9103: LD_INT 8
9105: PUSH
9106: LD_INT 9
9108: PUSH
9109: LD_INT 10
9111: PUSH
9112: LD_INT 11
9114: PUSH
9115: LD_INT 12
9117: PUSH
9118: LD_INT 14
9120: PUSH
9121: LD_INT 15
9123: PUSH
9124: LD_INT 16
9126: PUSH
9127: LD_INT 17
9129: PUSH
9130: LD_INT 18
9132: PUSH
9133: LD_INT 19
9135: PUSH
9136: LD_INT 20
9138: PUSH
9139: LD_INT 21
9141: PUSH
9142: LD_INT 22
9144: PUSH
9145: LD_INT 23
9147: PUSH
9148: LD_INT 24
9150: PUSH
9151: LD_INT 25
9153: PUSH
9154: LD_INT 26
9156: PUSH
9157: LD_INT 27
9159: PUSH
9160: LD_INT 28
9162: PUSH
9163: LD_INT 30
9165: PUSH
9166: LD_INT 31
9168: PUSH
9169: LD_INT 32
9171: PUSH
9172: LD_INT 33
9174: PUSH
9175: LD_INT 34
9177: PUSH
9178: LD_INT 36
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: PUSH
9214: LD_INT 101
9216: PUSH
9217: LD_INT 102
9219: PUSH
9220: LD_INT 103
9222: PUSH
9223: LD_INT 104
9225: PUSH
9226: LD_INT 105
9228: PUSH
9229: LD_INT 106
9231: PUSH
9232: LD_INT 107
9234: PUSH
9235: LD_INT 108
9237: PUSH
9238: LD_INT 109
9240: PUSH
9241: LD_INT 110
9243: PUSH
9244: LD_INT 111
9246: PUSH
9247: LD_INT 112
9249: PUSH
9250: LD_INT 113
9252: PUSH
9253: LD_INT 114
9255: PUSH
9256: LD_INT 116
9258: PUSH
9259: LD_INT 117
9261: PUSH
9262: LD_INT 118
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: ST_TO_ADDR
9288: GO 10527
9290: LD_INT 14
9292: DOUBLE
9293: EQUAL
9294: IFTRUE 9298
9296: GO 9522
9298: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9299: LD_ADDR_VAR 0 2
9303: PUSH
9304: LD_INT 1
9306: PUSH
9307: LD_INT 2
9309: PUSH
9310: LD_INT 3
9312: PUSH
9313: LD_INT 4
9315: PUSH
9316: LD_INT 5
9318: PUSH
9319: LD_INT 6
9321: PUSH
9322: LD_INT 7
9324: PUSH
9325: LD_INT 8
9327: PUSH
9328: LD_INT 9
9330: PUSH
9331: LD_INT 10
9333: PUSH
9334: LD_INT 11
9336: PUSH
9337: LD_INT 12
9339: PUSH
9340: LD_INT 13
9342: PUSH
9343: LD_INT 14
9345: PUSH
9346: LD_INT 15
9348: PUSH
9349: LD_INT 16
9351: PUSH
9352: LD_INT 17
9354: PUSH
9355: LD_INT 18
9357: PUSH
9358: LD_INT 19
9360: PUSH
9361: LD_INT 20
9363: PUSH
9364: LD_INT 21
9366: PUSH
9367: LD_INT 22
9369: PUSH
9370: LD_INT 23
9372: PUSH
9373: LD_INT 24
9375: PUSH
9376: LD_INT 25
9378: PUSH
9379: LD_INT 26
9381: PUSH
9382: LD_INT 27
9384: PUSH
9385: LD_INT 28
9387: PUSH
9388: LD_INT 29
9390: PUSH
9391: LD_INT 30
9393: PUSH
9394: LD_INT 31
9396: PUSH
9397: LD_INT 32
9399: PUSH
9400: LD_INT 33
9402: PUSH
9403: LD_INT 34
9405: PUSH
9406: LD_INT 36
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 101
9448: PUSH
9449: LD_INT 102
9451: PUSH
9452: LD_INT 103
9454: PUSH
9455: LD_INT 104
9457: PUSH
9458: LD_INT 105
9460: PUSH
9461: LD_INT 106
9463: PUSH
9464: LD_INT 107
9466: PUSH
9467: LD_INT 108
9469: PUSH
9470: LD_INT 109
9472: PUSH
9473: LD_INT 110
9475: PUSH
9476: LD_INT 111
9478: PUSH
9479: LD_INT 112
9481: PUSH
9482: LD_INT 113
9484: PUSH
9485: LD_INT 114
9487: PUSH
9488: LD_INT 116
9490: PUSH
9491: LD_INT 117
9493: PUSH
9494: LD_INT 118
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: ST_TO_ADDR
9520: GO 10527
9522: LD_INT 15
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9754
9530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9531: LD_ADDR_VAR 0 2
9535: PUSH
9536: LD_INT 1
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: LD_INT 3
9544: PUSH
9545: LD_INT 4
9547: PUSH
9548: LD_INT 5
9550: PUSH
9551: LD_INT 6
9553: PUSH
9554: LD_INT 7
9556: PUSH
9557: LD_INT 8
9559: PUSH
9560: LD_INT 9
9562: PUSH
9563: LD_INT 10
9565: PUSH
9566: LD_INT 11
9568: PUSH
9569: LD_INT 12
9571: PUSH
9572: LD_INT 13
9574: PUSH
9575: LD_INT 14
9577: PUSH
9578: LD_INT 15
9580: PUSH
9581: LD_INT 16
9583: PUSH
9584: LD_INT 17
9586: PUSH
9587: LD_INT 18
9589: PUSH
9590: LD_INT 19
9592: PUSH
9593: LD_INT 20
9595: PUSH
9596: LD_INT 21
9598: PUSH
9599: LD_INT 22
9601: PUSH
9602: LD_INT 23
9604: PUSH
9605: LD_INT 24
9607: PUSH
9608: LD_INT 25
9610: PUSH
9611: LD_INT 26
9613: PUSH
9614: LD_INT 27
9616: PUSH
9617: LD_INT 28
9619: PUSH
9620: LD_INT 29
9622: PUSH
9623: LD_INT 30
9625: PUSH
9626: LD_INT 31
9628: PUSH
9629: LD_INT 32
9631: PUSH
9632: LD_INT 33
9634: PUSH
9635: LD_INT 34
9637: PUSH
9638: LD_INT 36
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 101
9680: PUSH
9681: LD_INT 102
9683: PUSH
9684: LD_INT 103
9686: PUSH
9687: LD_INT 104
9689: PUSH
9690: LD_INT 105
9692: PUSH
9693: LD_INT 106
9695: PUSH
9696: LD_INT 107
9698: PUSH
9699: LD_INT 108
9701: PUSH
9702: LD_INT 109
9704: PUSH
9705: LD_INT 110
9707: PUSH
9708: LD_INT 111
9710: PUSH
9711: LD_INT 112
9713: PUSH
9714: LD_INT 113
9716: PUSH
9717: LD_INT 114
9719: PUSH
9720: LD_INT 116
9722: PUSH
9723: LD_INT 117
9725: PUSH
9726: LD_INT 118
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: ST_TO_ADDR
9752: GO 10527
9754: LD_INT 16
9756: DOUBLE
9757: EQUAL
9758: IFTRUE 9762
9760: GO 9898
9762: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9763: LD_ADDR_VAR 0 2
9767: PUSH
9768: LD_INT 2
9770: PUSH
9771: LD_INT 4
9773: PUSH
9774: LD_INT 5
9776: PUSH
9777: LD_INT 7
9779: PUSH
9780: LD_INT 11
9782: PUSH
9783: LD_INT 12
9785: PUSH
9786: LD_INT 15
9788: PUSH
9789: LD_INT 16
9791: PUSH
9792: LD_INT 20
9794: PUSH
9795: LD_INT 21
9797: PUSH
9798: LD_INT 22
9800: PUSH
9801: LD_INT 23
9803: PUSH
9804: LD_INT 25
9806: PUSH
9807: LD_INT 26
9809: PUSH
9810: LD_INT 30
9812: PUSH
9813: LD_INT 31
9815: PUSH
9816: LD_INT 32
9818: PUSH
9819: LD_INT 33
9821: PUSH
9822: LD_INT 34
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 101
9848: PUSH
9849: LD_INT 102
9851: PUSH
9852: LD_INT 103
9854: PUSH
9855: LD_INT 106
9857: PUSH
9858: LD_INT 108
9860: PUSH
9861: LD_INT 112
9863: PUSH
9864: LD_INT 113
9866: PUSH
9867: LD_INT 114
9869: PUSH
9870: LD_INT 116
9872: PUSH
9873: LD_INT 117
9875: PUSH
9876: LD_INT 118
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: ST_TO_ADDR
9896: GO 10527
9898: LD_INT 17
9900: DOUBLE
9901: EQUAL
9902: IFTRUE 9906
9904: GO 10130
9906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9907: LD_ADDR_VAR 0 2
9911: PUSH
9912: LD_INT 1
9914: PUSH
9915: LD_INT 2
9917: PUSH
9918: LD_INT 3
9920: PUSH
9921: LD_INT 4
9923: PUSH
9924: LD_INT 5
9926: PUSH
9927: LD_INT 6
9929: PUSH
9930: LD_INT 7
9932: PUSH
9933: LD_INT 8
9935: PUSH
9936: LD_INT 9
9938: PUSH
9939: LD_INT 10
9941: PUSH
9942: LD_INT 11
9944: PUSH
9945: LD_INT 12
9947: PUSH
9948: LD_INT 13
9950: PUSH
9951: LD_INT 14
9953: PUSH
9954: LD_INT 15
9956: PUSH
9957: LD_INT 16
9959: PUSH
9960: LD_INT 17
9962: PUSH
9963: LD_INT 18
9965: PUSH
9966: LD_INT 19
9968: PUSH
9969: LD_INT 20
9971: PUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 22
9977: PUSH
9978: LD_INT 23
9980: PUSH
9981: LD_INT 24
9983: PUSH
9984: LD_INT 25
9986: PUSH
9987: LD_INT 26
9989: PUSH
9990: LD_INT 27
9992: PUSH
9993: LD_INT 28
9995: PUSH
9996: LD_INT 29
9998: PUSH
9999: LD_INT 30
10001: PUSH
10002: LD_INT 31
10004: PUSH
10005: LD_INT 32
10007: PUSH
10008: LD_INT 33
10010: PUSH
10011: LD_INT 34
10013: PUSH
10014: LD_INT 36
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 101
10056: PUSH
10057: LD_INT 102
10059: PUSH
10060: LD_INT 103
10062: PUSH
10063: LD_INT 104
10065: PUSH
10066: LD_INT 105
10068: PUSH
10069: LD_INT 106
10071: PUSH
10072: LD_INT 107
10074: PUSH
10075: LD_INT 108
10077: PUSH
10078: LD_INT 109
10080: PUSH
10081: LD_INT 110
10083: PUSH
10084: LD_INT 111
10086: PUSH
10087: LD_INT 112
10089: PUSH
10090: LD_INT 113
10092: PUSH
10093: LD_INT 114
10095: PUSH
10096: LD_INT 116
10098: PUSH
10099: LD_INT 117
10101: PUSH
10102: LD_INT 118
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: ST_TO_ADDR
10128: GO 10527
10130: LD_INT 18
10132: DOUBLE
10133: EQUAL
10134: IFTRUE 10138
10136: GO 10286
10138: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10139: LD_ADDR_VAR 0 2
10143: PUSH
10144: LD_INT 2
10146: PUSH
10147: LD_INT 4
10149: PUSH
10150: LD_INT 5
10152: PUSH
10153: LD_INT 7
10155: PUSH
10156: LD_INT 11
10158: PUSH
10159: LD_INT 12
10161: PUSH
10162: LD_INT 15
10164: PUSH
10165: LD_INT 16
10167: PUSH
10168: LD_INT 20
10170: PUSH
10171: LD_INT 21
10173: PUSH
10174: LD_INT 22
10176: PUSH
10177: LD_INT 23
10179: PUSH
10180: LD_INT 25
10182: PUSH
10183: LD_INT 26
10185: PUSH
10186: LD_INT 30
10188: PUSH
10189: LD_INT 31
10191: PUSH
10192: LD_INT 32
10194: PUSH
10195: LD_INT 33
10197: PUSH
10198: LD_INT 34
10200: PUSH
10201: LD_INT 35
10203: PUSH
10204: LD_INT 36
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 101
10232: PUSH
10233: LD_INT 102
10235: PUSH
10236: LD_INT 103
10238: PUSH
10239: LD_INT 106
10241: PUSH
10242: LD_INT 108
10244: PUSH
10245: LD_INT 112
10247: PUSH
10248: LD_INT 113
10250: PUSH
10251: LD_INT 114
10253: PUSH
10254: LD_INT 115
10256: PUSH
10257: LD_INT 116
10259: PUSH
10260: LD_INT 117
10262: PUSH
10263: LD_INT 118
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: ST_TO_ADDR
10284: GO 10527
10286: LD_INT 19
10288: DOUBLE
10289: EQUAL
10290: IFTRUE 10294
10292: GO 10526
10294: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10295: LD_ADDR_VAR 0 2
10299: PUSH
10300: LD_INT 1
10302: PUSH
10303: LD_INT 2
10305: PUSH
10306: LD_INT 3
10308: PUSH
10309: LD_INT 4
10311: PUSH
10312: LD_INT 5
10314: PUSH
10315: LD_INT 6
10317: PUSH
10318: LD_INT 7
10320: PUSH
10321: LD_INT 8
10323: PUSH
10324: LD_INT 9
10326: PUSH
10327: LD_INT 10
10329: PUSH
10330: LD_INT 11
10332: PUSH
10333: LD_INT 12
10335: PUSH
10336: LD_INT 13
10338: PUSH
10339: LD_INT 14
10341: PUSH
10342: LD_INT 15
10344: PUSH
10345: LD_INT 16
10347: PUSH
10348: LD_INT 17
10350: PUSH
10351: LD_INT 18
10353: PUSH
10354: LD_INT 19
10356: PUSH
10357: LD_INT 20
10359: PUSH
10360: LD_INT 21
10362: PUSH
10363: LD_INT 22
10365: PUSH
10366: LD_INT 23
10368: PUSH
10369: LD_INT 24
10371: PUSH
10372: LD_INT 25
10374: PUSH
10375: LD_INT 26
10377: PUSH
10378: LD_INT 27
10380: PUSH
10381: LD_INT 28
10383: PUSH
10384: LD_INT 29
10386: PUSH
10387: LD_INT 30
10389: PUSH
10390: LD_INT 31
10392: PUSH
10393: LD_INT 32
10395: PUSH
10396: LD_INT 33
10398: PUSH
10399: LD_INT 34
10401: PUSH
10402: LD_INT 35
10404: PUSH
10405: LD_INT 36
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 101
10448: PUSH
10449: LD_INT 102
10451: PUSH
10452: LD_INT 103
10454: PUSH
10455: LD_INT 104
10457: PUSH
10458: LD_INT 105
10460: PUSH
10461: LD_INT 106
10463: PUSH
10464: LD_INT 107
10466: PUSH
10467: LD_INT 108
10469: PUSH
10470: LD_INT 109
10472: PUSH
10473: LD_INT 110
10475: PUSH
10476: LD_INT 111
10478: PUSH
10479: LD_INT 112
10481: PUSH
10482: LD_INT 113
10484: PUSH
10485: LD_INT 114
10487: PUSH
10488: LD_INT 115
10490: PUSH
10491: LD_INT 116
10493: PUSH
10494: LD_INT 117
10496: PUSH
10497: LD_INT 118
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: ST_TO_ADDR
10524: GO 10527
10526: POP
// end else
10527: GO 10758
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10529: LD_ADDR_VAR 0 2
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: LD_INT 2
10539: PUSH
10540: LD_INT 3
10542: PUSH
10543: LD_INT 4
10545: PUSH
10546: LD_INT 5
10548: PUSH
10549: LD_INT 6
10551: PUSH
10552: LD_INT 7
10554: PUSH
10555: LD_INT 8
10557: PUSH
10558: LD_INT 9
10560: PUSH
10561: LD_INT 10
10563: PUSH
10564: LD_INT 11
10566: PUSH
10567: LD_INT 12
10569: PUSH
10570: LD_INT 13
10572: PUSH
10573: LD_INT 14
10575: PUSH
10576: LD_INT 15
10578: PUSH
10579: LD_INT 16
10581: PUSH
10582: LD_INT 17
10584: PUSH
10585: LD_INT 18
10587: PUSH
10588: LD_INT 19
10590: PUSH
10591: LD_INT 20
10593: PUSH
10594: LD_INT 21
10596: PUSH
10597: LD_INT 22
10599: PUSH
10600: LD_INT 23
10602: PUSH
10603: LD_INT 24
10605: PUSH
10606: LD_INT 25
10608: PUSH
10609: LD_INT 26
10611: PUSH
10612: LD_INT 27
10614: PUSH
10615: LD_INT 28
10617: PUSH
10618: LD_INT 29
10620: PUSH
10621: LD_INT 30
10623: PUSH
10624: LD_INT 31
10626: PUSH
10627: LD_INT 32
10629: PUSH
10630: LD_INT 33
10632: PUSH
10633: LD_INT 34
10635: PUSH
10636: LD_INT 35
10638: PUSH
10639: LD_INT 36
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 101
10682: PUSH
10683: LD_INT 102
10685: PUSH
10686: LD_INT 103
10688: PUSH
10689: LD_INT 104
10691: PUSH
10692: LD_INT 105
10694: PUSH
10695: LD_INT 106
10697: PUSH
10698: LD_INT 107
10700: PUSH
10701: LD_INT 108
10703: PUSH
10704: LD_INT 109
10706: PUSH
10707: LD_INT 110
10709: PUSH
10710: LD_INT 111
10712: PUSH
10713: LD_INT 112
10715: PUSH
10716: LD_INT 113
10718: PUSH
10719: LD_INT 114
10721: PUSH
10722: LD_INT 115
10724: PUSH
10725: LD_INT 116
10727: PUSH
10728: LD_INT 117
10730: PUSH
10731: LD_INT 118
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: ST_TO_ADDR
// if result then
10758: LD_VAR 0 2
10762: IFFALSE 11548
// begin normal :=  ;
10764: LD_ADDR_VAR 0 5
10768: PUSH
10769: LD_STRING 
10771: ST_TO_ADDR
// hardcore :=  ;
10772: LD_ADDR_VAR 0 6
10776: PUSH
10777: LD_STRING 
10779: ST_TO_ADDR
// active :=  ;
10780: LD_ADDR_VAR 0 7
10784: PUSH
10785: LD_STRING 
10787: ST_TO_ADDR
// for i = 1 to normalCounter do
10788: LD_ADDR_VAR 0 8
10792: PUSH
10793: DOUBLE
10794: LD_INT 1
10796: DEC
10797: ST_TO_ADDR
10798: LD_EXP 27
10802: PUSH
10803: FOR_TO
10804: IFFALSE 10905
// begin tmp := 0 ;
10806: LD_ADDR_VAR 0 3
10810: PUSH
10811: LD_STRING 0
10813: ST_TO_ADDR
// if result [ 1 ] then
10814: LD_VAR 0 2
10818: PUSH
10819: LD_INT 1
10821: ARRAY
10822: IFFALSE 10887
// if result [ 1 ] [ 1 ] = i then
10824: LD_VAR 0 2
10828: PUSH
10829: LD_INT 1
10831: ARRAY
10832: PUSH
10833: LD_INT 1
10835: ARRAY
10836: PUSH
10837: LD_VAR 0 8
10841: EQUAL
10842: IFFALSE 10887
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10844: LD_ADDR_VAR 0 2
10848: PUSH
10849: LD_VAR 0 2
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: LD_VAR 0 2
10861: PUSH
10862: LD_INT 1
10864: ARRAY
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 3
10873: PPUSH
10874: CALL_OW 1
10878: ST_TO_ADDR
// tmp := 1 ;
10879: LD_ADDR_VAR 0 3
10883: PUSH
10884: LD_STRING 1
10886: ST_TO_ADDR
// end ; normal := normal & tmp ;
10887: LD_ADDR_VAR 0 5
10891: PUSH
10892: LD_VAR 0 5
10896: PUSH
10897: LD_VAR 0 3
10901: STR
10902: ST_TO_ADDR
// end ;
10903: GO 10803
10905: POP
10906: POP
// for i = 1 to hardcoreCounter do
10907: LD_ADDR_VAR 0 8
10911: PUSH
10912: DOUBLE
10913: LD_INT 1
10915: DEC
10916: ST_TO_ADDR
10917: LD_EXP 28
10921: PUSH
10922: FOR_TO
10923: IFFALSE 11028
// begin tmp := 0 ;
10925: LD_ADDR_VAR 0 3
10929: PUSH
10930: LD_STRING 0
10932: ST_TO_ADDR
// if result [ 2 ] then
10933: LD_VAR 0 2
10937: PUSH
10938: LD_INT 2
10940: ARRAY
10941: IFFALSE 11010
// if result [ 2 ] [ 1 ] = 100 + i then
10943: LD_VAR 0 2
10947: PUSH
10948: LD_INT 2
10950: ARRAY
10951: PUSH
10952: LD_INT 1
10954: ARRAY
10955: PUSH
10956: LD_INT 100
10958: PUSH
10959: LD_VAR 0 8
10963: PLUS
10964: EQUAL
10965: IFFALSE 11010
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10967: LD_ADDR_VAR 0 2
10971: PUSH
10972: LD_VAR 0 2
10976: PPUSH
10977: LD_INT 2
10979: PPUSH
10980: LD_VAR 0 2
10984: PUSH
10985: LD_INT 2
10987: ARRAY
10988: PPUSH
10989: LD_INT 1
10991: PPUSH
10992: CALL_OW 3
10996: PPUSH
10997: CALL_OW 1
11001: ST_TO_ADDR
// tmp := 1 ;
11002: LD_ADDR_VAR 0 3
11006: PUSH
11007: LD_STRING 1
11009: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11010: LD_ADDR_VAR 0 6
11014: PUSH
11015: LD_VAR 0 6
11019: PUSH
11020: LD_VAR 0 3
11024: STR
11025: ST_TO_ADDR
// end ;
11026: GO 10922
11028: POP
11029: POP
// if isGameLoad then
11030: LD_VAR 0 1
11034: IFFALSE 11509
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11036: LD_ADDR_VAR 0 4
11040: PUSH
11041: LD_EXP 31
11045: PUSH
11046: LD_EXP 30
11050: PUSH
11051: LD_EXP 32
11055: PUSH
11056: LD_EXP 29
11060: PUSH
11061: LD_EXP 33
11065: PUSH
11066: LD_EXP 34
11070: PUSH
11071: LD_EXP 35
11075: PUSH
11076: LD_EXP 36
11080: PUSH
11081: LD_EXP 37
11085: PUSH
11086: LD_EXP 38
11090: PUSH
11091: LD_EXP 39
11095: PUSH
11096: LD_EXP 40
11100: PUSH
11101: LD_EXP 41
11105: PUSH
11106: LD_EXP 42
11110: PUSH
11111: LD_EXP 50
11115: PUSH
11116: LD_EXP 51
11120: PUSH
11121: LD_EXP 52
11125: PUSH
11126: LD_EXP 53
11130: PUSH
11131: LD_EXP 55
11135: PUSH
11136: LD_EXP 56
11140: PUSH
11141: LD_EXP 57
11145: PUSH
11146: LD_EXP 60
11150: PUSH
11151: LD_EXP 62
11155: PUSH
11156: LD_EXP 63
11160: PUSH
11161: LD_EXP 64
11165: PUSH
11166: LD_EXP 66
11170: PUSH
11171: LD_EXP 67
11175: PUSH
11176: LD_EXP 70
11180: PUSH
11181: LD_EXP 71
11185: PUSH
11186: LD_EXP 72
11190: PUSH
11191: LD_EXP 73
11195: PUSH
11196: LD_EXP 74
11200: PUSH
11201: LD_EXP 75
11205: PUSH
11206: LD_EXP 76
11210: PUSH
11211: LD_EXP 77
11215: PUSH
11216: LD_EXP 78
11220: PUSH
11221: LD_EXP 43
11225: PUSH
11226: LD_EXP 44
11230: PUSH
11231: LD_EXP 47
11235: PUSH
11236: LD_EXP 48
11240: PUSH
11241: LD_EXP 49
11245: PUSH
11246: LD_EXP 45
11250: PUSH
11251: LD_EXP 46
11255: PUSH
11256: LD_EXP 54
11260: PUSH
11261: LD_EXP 58
11265: PUSH
11266: LD_EXP 59
11270: PUSH
11271: LD_EXP 61
11275: PUSH
11276: LD_EXP 65
11280: PUSH
11281: LD_EXP 68
11285: PUSH
11286: LD_EXP 69
11290: PUSH
11291: LD_EXP 79
11295: PUSH
11296: LD_EXP 80
11300: PUSH
11301: LD_EXP 81
11305: PUSH
11306: LD_EXP 82
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: ST_TO_ADDR
// tmp :=  ;
11367: LD_ADDR_VAR 0 3
11371: PUSH
11372: LD_STRING 
11374: ST_TO_ADDR
// for i = 1 to normalCounter do
11375: LD_ADDR_VAR 0 8
11379: PUSH
11380: DOUBLE
11381: LD_INT 1
11383: DEC
11384: ST_TO_ADDR
11385: LD_EXP 27
11389: PUSH
11390: FOR_TO
11391: IFFALSE 11427
// begin if flags [ i ] then
11393: LD_VAR 0 4
11397: PUSH
11398: LD_VAR 0 8
11402: ARRAY
11403: IFFALSE 11425
// tmp := tmp & i & ; ;
11405: LD_ADDR_VAR 0 3
11409: PUSH
11410: LD_VAR 0 3
11414: PUSH
11415: LD_VAR 0 8
11419: STR
11420: PUSH
11421: LD_STRING ;
11423: STR
11424: ST_TO_ADDR
// end ;
11425: GO 11390
11427: POP
11428: POP
// for i = 1 to hardcoreCounter do
11429: LD_ADDR_VAR 0 8
11433: PUSH
11434: DOUBLE
11435: LD_INT 1
11437: DEC
11438: ST_TO_ADDR
11439: LD_EXP 28
11443: PUSH
11444: FOR_TO
11445: IFFALSE 11491
// begin if flags [ normalCounter + i ] then
11447: LD_VAR 0 4
11451: PUSH
11452: LD_EXP 27
11456: PUSH
11457: LD_VAR 0 8
11461: PLUS
11462: ARRAY
11463: IFFALSE 11489
// tmp := tmp & ( 100 + i ) & ; ;
11465: LD_ADDR_VAR 0 3
11469: PUSH
11470: LD_VAR 0 3
11474: PUSH
11475: LD_INT 100
11477: PUSH
11478: LD_VAR 0 8
11482: PLUS
11483: STR
11484: PUSH
11485: LD_STRING ;
11487: STR
11488: ST_TO_ADDR
// end ;
11489: GO 11444
11491: POP
11492: POP
// if tmp then
11493: LD_VAR 0 3
11497: IFFALSE 11509
// active := tmp ;
11499: LD_ADDR_VAR 0 7
11503: PUSH
11504: LD_VAR 0 3
11508: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11509: LD_STRING getStreamItemsFromMission("
11511: PUSH
11512: LD_VAR 0 5
11516: STR
11517: PUSH
11518: LD_STRING ","
11520: STR
11521: PUSH
11522: LD_VAR 0 6
11526: STR
11527: PUSH
11528: LD_STRING ","
11530: STR
11531: PUSH
11532: LD_VAR 0 7
11536: STR
11537: PUSH
11538: LD_STRING ")
11540: STR
11541: PPUSH
11542: CALL_OW 559
// end else
11546: GO 11555
// ToLua ( getStreamItemsFromMission("","","") ) ;
11548: LD_STRING getStreamItemsFromMission("","","")
11550: PPUSH
11551: CALL_OW 559
// end ;
11555: LD_VAR 0 2
11559: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11560: LD_EXP 26
11564: PUSH
11565: LD_EXP 31
11569: AND
11570: IFFALSE 11694
11572: GO 11574
11574: DISABLE
11575: LD_INT 0
11577: PPUSH
11578: PPUSH
// begin enable ;
11579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11580: LD_ADDR_VAR 0 2
11584: PUSH
11585: LD_INT 22
11587: PUSH
11588: LD_OWVAR 2
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 2
11599: PUSH
11600: LD_INT 34
11602: PUSH
11603: LD_INT 7
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 34
11612: PUSH
11613: LD_INT 45
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 34
11622: PUSH
11623: LD_INT 28
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 34
11632: PUSH
11633: LD_INT 47
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PPUSH
11651: CALL_OW 69
11655: ST_TO_ADDR
// if not tmp then
11656: LD_VAR 0 2
11660: NOT
11661: IFFALSE 11665
// exit ;
11663: GO 11694
// for i in tmp do
11665: LD_ADDR_VAR 0 1
11669: PUSH
11670: LD_VAR 0 2
11674: PUSH
11675: FOR_IN
11676: IFFALSE 11692
// begin SetLives ( i , 0 ) ;
11678: LD_VAR 0 1
11682: PPUSH
11683: LD_INT 0
11685: PPUSH
11686: CALL_OW 234
// end ;
11690: GO 11675
11692: POP
11693: POP
// end ;
11694: PPOPN 2
11696: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11697: LD_EXP 26
11701: PUSH
11702: LD_EXP 32
11706: AND
11707: IFFALSE 11791
11709: GO 11711
11711: DISABLE
11712: LD_INT 0
11714: PPUSH
11715: PPUSH
// begin enable ;
11716: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11717: LD_ADDR_VAR 0 2
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_OWVAR 2
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 32
11736: PUSH
11737: LD_INT 3
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 69
11752: ST_TO_ADDR
// if not tmp then
11753: LD_VAR 0 2
11757: NOT
11758: IFFALSE 11762
// exit ;
11760: GO 11791
// for i in tmp do
11762: LD_ADDR_VAR 0 1
11766: PUSH
11767: LD_VAR 0 2
11771: PUSH
11772: FOR_IN
11773: IFFALSE 11789
// begin SetLives ( i , 0 ) ;
11775: LD_VAR 0 1
11779: PPUSH
11780: LD_INT 0
11782: PPUSH
11783: CALL_OW 234
// end ;
11787: GO 11772
11789: POP
11790: POP
// end ;
11791: PPOPN 2
11793: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11794: LD_EXP 26
11798: PUSH
11799: LD_EXP 29
11803: AND
11804: IFFALSE 11897
11806: GO 11808
11808: DISABLE
11809: LD_INT 0
11811: PPUSH
// begin enable ;
11812: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11813: LD_ADDR_VAR 0 1
11817: PUSH
11818: LD_INT 22
11820: PUSH
11821: LD_OWVAR 2
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 2
11832: PUSH
11833: LD_INT 25
11835: PUSH
11836: LD_INT 5
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: LD_INT 25
11845: PUSH
11846: LD_INT 9
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 25
11855: PUSH
11856: LD_INT 8
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PPUSH
11873: CALL_OW 69
11877: PUSH
11878: FOR_IN
11879: IFFALSE 11895
// begin SetClass ( i , 1 ) ;
11881: LD_VAR 0 1
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 336
// end ;
11893: GO 11878
11895: POP
11896: POP
// end ;
11897: PPOPN 1
11899: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11900: LD_EXP 26
11904: PUSH
11905: LD_EXP 30
11909: AND
11910: PUSH
11911: LD_OWVAR 65
11915: PUSH
11916: LD_INT 7
11918: LESS
11919: AND
11920: IFFALSE 11934
11922: GO 11924
11924: DISABLE
// begin enable ;
11925: ENABLE
// game_speed := 7 ;
11926: LD_ADDR_OWVAR 65
11930: PUSH
11931: LD_INT 7
11933: ST_TO_ADDR
// end ;
11934: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11935: LD_EXP 26
11939: PUSH
11940: LD_EXP 33
11944: AND
11945: IFFALSE 12147
11947: GO 11949
11949: DISABLE
11950: LD_INT 0
11952: PPUSH
11953: PPUSH
11954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11955: LD_ADDR_VAR 0 3
11959: PUSH
11960: LD_INT 81
11962: PUSH
11963: LD_OWVAR 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 21
11974: PUSH
11975: LD_INT 1
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PPUSH
11986: CALL_OW 69
11990: ST_TO_ADDR
// if not tmp then
11991: LD_VAR 0 3
11995: NOT
11996: IFFALSE 12000
// exit ;
11998: GO 12147
// if tmp > 5 then
12000: LD_VAR 0 3
12004: PUSH
12005: LD_INT 5
12007: GREATER
12008: IFFALSE 12020
// k := 5 else
12010: LD_ADDR_VAR 0 2
12014: PUSH
12015: LD_INT 5
12017: ST_TO_ADDR
12018: GO 12030
// k := tmp ;
12020: LD_ADDR_VAR 0 2
12024: PUSH
12025: LD_VAR 0 3
12029: ST_TO_ADDR
// for i := 1 to k do
12030: LD_ADDR_VAR 0 1
12034: PUSH
12035: DOUBLE
12036: LD_INT 1
12038: DEC
12039: ST_TO_ADDR
12040: LD_VAR 0 2
12044: PUSH
12045: FOR_TO
12046: IFFALSE 12145
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12048: LD_VAR 0 3
12052: PUSH
12053: LD_VAR 0 1
12057: ARRAY
12058: PPUSH
12059: LD_VAR 0 1
12063: PUSH
12064: LD_INT 4
12066: MOD
12067: PUSH
12068: LD_INT 1
12070: PLUS
12071: PPUSH
12072: CALL_OW 259
12076: PUSH
12077: LD_INT 10
12079: LESS
12080: IFFALSE 12143
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12082: LD_VAR 0 3
12086: PUSH
12087: LD_VAR 0 1
12091: ARRAY
12092: PPUSH
12093: LD_VAR 0 1
12097: PUSH
12098: LD_INT 4
12100: MOD
12101: PUSH
12102: LD_INT 1
12104: PLUS
12105: PPUSH
12106: LD_VAR 0 3
12110: PUSH
12111: LD_VAR 0 1
12115: ARRAY
12116: PPUSH
12117: LD_VAR 0 1
12121: PUSH
12122: LD_INT 4
12124: MOD
12125: PUSH
12126: LD_INT 1
12128: PLUS
12129: PPUSH
12130: CALL_OW 259
12134: PUSH
12135: LD_INT 1
12137: PLUS
12138: PPUSH
12139: CALL_OW 237
12143: GO 12045
12145: POP
12146: POP
// end ;
12147: PPOPN 3
12149: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12150: LD_EXP 26
12154: PUSH
12155: LD_EXP 34
12159: AND
12160: IFFALSE 12180
12162: GO 12164
12164: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12165: LD_INT 4
12167: PPUSH
12168: LD_OWVAR 2
12172: PPUSH
12173: LD_INT 0
12175: PPUSH
12176: CALL_OW 324
12180: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12181: LD_EXP 26
12185: PUSH
12186: LD_EXP 63
12190: AND
12191: IFFALSE 12211
12193: GO 12195
12195: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12196: LD_INT 19
12198: PPUSH
12199: LD_OWVAR 2
12203: PPUSH
12204: LD_INT 0
12206: PPUSH
12207: CALL_OW 324
12211: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12212: LD_EXP 26
12216: PUSH
12217: LD_EXP 35
12221: AND
12222: IFFALSE 12324
12224: GO 12226
12226: DISABLE
12227: LD_INT 0
12229: PPUSH
12230: PPUSH
// begin enable ;
12231: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 22
12239: PUSH
12240: LD_OWVAR 2
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 2
12251: PUSH
12252: LD_INT 34
12254: PUSH
12255: LD_INT 11
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 34
12264: PUSH
12265: LD_INT 30
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PPUSH
12281: CALL_OW 69
12285: ST_TO_ADDR
// if not tmp then
12286: LD_VAR 0 2
12290: NOT
12291: IFFALSE 12295
// exit ;
12293: GO 12324
// for i in tmp do
12295: LD_ADDR_VAR 0 1
12299: PUSH
12300: LD_VAR 0 2
12304: PUSH
12305: FOR_IN
12306: IFFALSE 12322
// begin SetLives ( i , 0 ) ;
12308: LD_VAR 0 1
12312: PPUSH
12313: LD_INT 0
12315: PPUSH
12316: CALL_OW 234
// end ;
12320: GO 12305
12322: POP
12323: POP
// end ;
12324: PPOPN 2
12326: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12327: LD_EXP 26
12331: PUSH
12332: LD_EXP 36
12336: AND
12337: IFFALSE 12357
12339: GO 12341
12341: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12342: LD_INT 32
12344: PPUSH
12345: LD_OWVAR 2
12349: PPUSH
12350: LD_INT 0
12352: PPUSH
12353: CALL_OW 324
12357: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12358: LD_EXP 26
12362: PUSH
12363: LD_EXP 37
12367: AND
12368: IFFALSE 12549
12370: GO 12372
12372: DISABLE
12373: LD_INT 0
12375: PPUSH
12376: PPUSH
12377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12378: LD_ADDR_VAR 0 2
12382: PUSH
12383: LD_INT 22
12385: PUSH
12386: LD_OWVAR 2
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 33
12397: PUSH
12398: LD_INT 3
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PPUSH
12409: CALL_OW 69
12413: ST_TO_ADDR
// if not tmp then
12414: LD_VAR 0 2
12418: NOT
12419: IFFALSE 12423
// exit ;
12421: GO 12549
// side := 0 ;
12423: LD_ADDR_VAR 0 3
12427: PUSH
12428: LD_INT 0
12430: ST_TO_ADDR
// for i := 1 to 8 do
12431: LD_ADDR_VAR 0 1
12435: PUSH
12436: DOUBLE
12437: LD_INT 1
12439: DEC
12440: ST_TO_ADDR
12441: LD_INT 8
12443: PUSH
12444: FOR_TO
12445: IFFALSE 12493
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12447: LD_OWVAR 2
12451: PUSH
12452: LD_VAR 0 1
12456: NONEQUAL
12457: PUSH
12458: LD_OWVAR 2
12462: PPUSH
12463: LD_VAR 0 1
12467: PPUSH
12468: CALL_OW 81
12472: PUSH
12473: LD_INT 2
12475: EQUAL
12476: AND
12477: IFFALSE 12491
// begin side := i ;
12479: LD_ADDR_VAR 0 3
12483: PUSH
12484: LD_VAR 0 1
12488: ST_TO_ADDR
// break ;
12489: GO 12493
// end ;
12491: GO 12444
12493: POP
12494: POP
// if not side then
12495: LD_VAR 0 3
12499: NOT
12500: IFFALSE 12504
// exit ;
12502: GO 12549
// for i := 1 to tmp do
12504: LD_ADDR_VAR 0 1
12508: PUSH
12509: DOUBLE
12510: LD_INT 1
12512: DEC
12513: ST_TO_ADDR
12514: LD_VAR 0 2
12518: PUSH
12519: FOR_TO
12520: IFFALSE 12547
// if Prob ( 60 ) then
12522: LD_INT 60
12524: PPUSH
12525: CALL_OW 13
12529: IFFALSE 12545
// SetSide ( i , side ) ;
12531: LD_VAR 0 1
12535: PPUSH
12536: LD_VAR 0 3
12540: PPUSH
12541: CALL_OW 235
12545: GO 12519
12547: POP
12548: POP
// end ;
12549: PPOPN 3
12551: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12552: LD_EXP 26
12556: PUSH
12557: LD_EXP 39
12561: AND
12562: IFFALSE 12681
12564: GO 12566
12566: DISABLE
12567: LD_INT 0
12569: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12570: LD_ADDR_VAR 0 1
12574: PUSH
12575: LD_INT 22
12577: PUSH
12578: LD_OWVAR 2
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 21
12589: PUSH
12590: LD_INT 1
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 3
12599: PUSH
12600: LD_INT 23
12602: PUSH
12603: LD_INT 0
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: PPUSH
12619: CALL_OW 69
12623: PUSH
12624: FOR_IN
12625: IFFALSE 12679
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12627: LD_VAR 0 1
12631: PPUSH
12632: CALL_OW 257
12636: PUSH
12637: LD_INT 1
12639: PUSH
12640: LD_INT 2
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: LD_INT 4
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: IN
12655: IFFALSE 12677
// SetClass ( un , rand ( 1 , 4 ) ) ;
12657: LD_VAR 0 1
12661: PPUSH
12662: LD_INT 1
12664: PPUSH
12665: LD_INT 4
12667: PPUSH
12668: CALL_OW 12
12672: PPUSH
12673: CALL_OW 336
12677: GO 12624
12679: POP
12680: POP
// end ;
12681: PPOPN 1
12683: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12684: LD_EXP 26
12688: PUSH
12689: LD_EXP 38
12693: AND
12694: IFFALSE 12773
12696: GO 12698
12698: DISABLE
12699: LD_INT 0
12701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12702: LD_ADDR_VAR 0 1
12706: PUSH
12707: LD_INT 22
12709: PUSH
12710: LD_OWVAR 2
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 21
12721: PUSH
12722: LD_INT 3
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PPUSH
12733: CALL_OW 69
12737: ST_TO_ADDR
// if not tmp then
12738: LD_VAR 0 1
12742: NOT
12743: IFFALSE 12747
// exit ;
12745: GO 12773
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12747: LD_VAR 0 1
12751: PUSH
12752: LD_INT 1
12754: PPUSH
12755: LD_VAR 0 1
12759: PPUSH
12760: CALL_OW 12
12764: ARRAY
12765: PPUSH
12766: LD_INT 100
12768: PPUSH
12769: CALL_OW 234
// end ;
12773: PPOPN 1
12775: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12776: LD_EXP 26
12780: PUSH
12781: LD_EXP 40
12785: AND
12786: IFFALSE 12884
12788: GO 12790
12790: DISABLE
12791: LD_INT 0
12793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12794: LD_ADDR_VAR 0 1
12798: PUSH
12799: LD_INT 22
12801: PUSH
12802: LD_OWVAR 2
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 21
12813: PUSH
12814: LD_INT 1
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PPUSH
12825: CALL_OW 69
12829: ST_TO_ADDR
// if not tmp then
12830: LD_VAR 0 1
12834: NOT
12835: IFFALSE 12839
// exit ;
12837: GO 12884
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12839: LD_VAR 0 1
12843: PUSH
12844: LD_INT 1
12846: PPUSH
12847: LD_VAR 0 1
12851: PPUSH
12852: CALL_OW 12
12856: ARRAY
12857: PPUSH
12858: LD_INT 1
12860: PPUSH
12861: LD_INT 4
12863: PPUSH
12864: CALL_OW 12
12868: PPUSH
12869: LD_INT 3000
12871: PPUSH
12872: LD_INT 9000
12874: PPUSH
12875: CALL_OW 12
12879: PPUSH
12880: CALL_OW 492
// end ;
12884: PPOPN 1
12886: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12887: LD_EXP 26
12891: PUSH
12892: LD_EXP 41
12896: AND
12897: IFFALSE 12917
12899: GO 12901
12901: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12902: LD_INT 1
12904: PPUSH
12905: LD_OWVAR 2
12909: PPUSH
12910: LD_INT 0
12912: PPUSH
12913: CALL_OW 324
12917: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12918: LD_EXP 26
12922: PUSH
12923: LD_EXP 42
12927: AND
12928: IFFALSE 13011
12930: GO 12932
12932: DISABLE
12933: LD_INT 0
12935: PPUSH
12936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12937: LD_ADDR_VAR 0 2
12941: PUSH
12942: LD_INT 22
12944: PUSH
12945: LD_OWVAR 2
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 21
12956: PUSH
12957: LD_INT 3
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PPUSH
12968: CALL_OW 69
12972: ST_TO_ADDR
// if not tmp then
12973: LD_VAR 0 2
12977: NOT
12978: IFFALSE 12982
// exit ;
12980: GO 13011
// for i in tmp do
12982: LD_ADDR_VAR 0 1
12986: PUSH
12987: LD_VAR 0 2
12991: PUSH
12992: FOR_IN
12993: IFFALSE 13009
// SetBLevel ( i , 10 ) ;
12995: LD_VAR 0 1
12999: PPUSH
13000: LD_INT 10
13002: PPUSH
13003: CALL_OW 241
13007: GO 12992
13009: POP
13010: POP
// end ;
13011: PPOPN 2
13013: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13014: LD_EXP 26
13018: PUSH
13019: LD_EXP 43
13023: AND
13024: IFFALSE 13135
13026: GO 13028
13028: DISABLE
13029: LD_INT 0
13031: PPUSH
13032: PPUSH
13033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13034: LD_ADDR_VAR 0 3
13038: PUSH
13039: LD_INT 22
13041: PUSH
13042: LD_OWVAR 2
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 25
13053: PUSH
13054: LD_INT 1
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PPUSH
13065: CALL_OW 69
13069: ST_TO_ADDR
// if not tmp then
13070: LD_VAR 0 3
13074: NOT
13075: IFFALSE 13079
// exit ;
13077: GO 13135
// un := tmp [ rand ( 1 , tmp ) ] ;
13079: LD_ADDR_VAR 0 2
13083: PUSH
13084: LD_VAR 0 3
13088: PUSH
13089: LD_INT 1
13091: PPUSH
13092: LD_VAR 0 3
13096: PPUSH
13097: CALL_OW 12
13101: ARRAY
13102: ST_TO_ADDR
// if Crawls ( un ) then
13103: LD_VAR 0 2
13107: PPUSH
13108: CALL_OW 318
13112: IFFALSE 13123
// ComWalk ( un ) ;
13114: LD_VAR 0 2
13118: PPUSH
13119: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13123: LD_VAR 0 2
13127: PPUSH
13128: LD_INT 5
13130: PPUSH
13131: CALL_OW 336
// end ;
13135: PPOPN 3
13137: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13138: LD_EXP 26
13142: PUSH
13143: LD_EXP 44
13147: AND
13148: PUSH
13149: LD_OWVAR 67
13153: PUSH
13154: LD_INT 4
13156: LESS
13157: AND
13158: IFFALSE 13177
13160: GO 13162
13162: DISABLE
// begin Difficulty := Difficulty + 1 ;
13163: LD_ADDR_OWVAR 67
13167: PUSH
13168: LD_OWVAR 67
13172: PUSH
13173: LD_INT 1
13175: PLUS
13176: ST_TO_ADDR
// end ;
13177: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13178: LD_EXP 26
13182: PUSH
13183: LD_EXP 45
13187: AND
13188: IFFALSE 13291
13190: GO 13192
13192: DISABLE
13193: LD_INT 0
13195: PPUSH
// begin for i := 1 to 5 do
13196: LD_ADDR_VAR 0 1
13200: PUSH
13201: DOUBLE
13202: LD_INT 1
13204: DEC
13205: ST_TO_ADDR
13206: LD_INT 5
13208: PUSH
13209: FOR_TO
13210: IFFALSE 13289
// begin uc_nation := nation_nature ;
13212: LD_ADDR_OWVAR 21
13216: PUSH
13217: LD_INT 0
13219: ST_TO_ADDR
// uc_side := 0 ;
13220: LD_ADDR_OWVAR 20
13224: PUSH
13225: LD_INT 0
13227: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13228: LD_ADDR_OWVAR 29
13232: PUSH
13233: LD_INT 12
13235: PUSH
13236: LD_INT 12
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: ST_TO_ADDR
// hc_agressivity := 20 ;
13243: LD_ADDR_OWVAR 35
13247: PUSH
13248: LD_INT 20
13250: ST_TO_ADDR
// hc_class := class_tiger ;
13251: LD_ADDR_OWVAR 28
13255: PUSH
13256: LD_INT 14
13258: ST_TO_ADDR
// hc_gallery :=  ;
13259: LD_ADDR_OWVAR 33
13263: PUSH
13264: LD_STRING 
13266: ST_TO_ADDR
// hc_name :=  ;
13267: LD_ADDR_OWVAR 26
13271: PUSH
13272: LD_STRING 
13274: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13275: CALL_OW 44
13279: PPUSH
13280: LD_INT 0
13282: PPUSH
13283: CALL_OW 51
// end ;
13287: GO 13209
13289: POP
13290: POP
// end ;
13291: PPOPN 1
13293: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13294: LD_EXP 26
13298: PUSH
13299: LD_EXP 46
13303: AND
13304: IFFALSE 13313
13306: GO 13308
13308: DISABLE
// StreamSibBomb ;
13309: CALL 13314 0 0
13313: END
// export function StreamSibBomb ; var i , x , y ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
// result := false ;
13320: LD_ADDR_VAR 0 1
13324: PUSH
13325: LD_INT 0
13327: ST_TO_ADDR
// for i := 1 to 16 do
13328: LD_ADDR_VAR 0 2
13332: PUSH
13333: DOUBLE
13334: LD_INT 1
13336: DEC
13337: ST_TO_ADDR
13338: LD_INT 16
13340: PUSH
13341: FOR_TO
13342: IFFALSE 13541
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13344: LD_ADDR_VAR 0 3
13348: PUSH
13349: LD_INT 10
13351: PUSH
13352: LD_INT 20
13354: PUSH
13355: LD_INT 30
13357: PUSH
13358: LD_INT 40
13360: PUSH
13361: LD_INT 50
13363: PUSH
13364: LD_INT 60
13366: PUSH
13367: LD_INT 70
13369: PUSH
13370: LD_INT 80
13372: PUSH
13373: LD_INT 90
13375: PUSH
13376: LD_INT 100
13378: PUSH
13379: LD_INT 110
13381: PUSH
13382: LD_INT 120
13384: PUSH
13385: LD_INT 130
13387: PUSH
13388: LD_INT 140
13390: PUSH
13391: LD_INT 150
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 1
13413: PPUSH
13414: LD_INT 15
13416: PPUSH
13417: CALL_OW 12
13421: ARRAY
13422: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13423: LD_ADDR_VAR 0 4
13427: PUSH
13428: LD_INT 10
13430: PUSH
13431: LD_INT 20
13433: PUSH
13434: LD_INT 30
13436: PUSH
13437: LD_INT 40
13439: PUSH
13440: LD_INT 50
13442: PUSH
13443: LD_INT 60
13445: PUSH
13446: LD_INT 70
13448: PUSH
13449: LD_INT 80
13451: PUSH
13452: LD_INT 90
13454: PUSH
13455: LD_INT 100
13457: PUSH
13458: LD_INT 110
13460: PUSH
13461: LD_INT 120
13463: PUSH
13464: LD_INT 130
13466: PUSH
13467: LD_INT 140
13469: PUSH
13470: LD_INT 150
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 1
13492: PPUSH
13493: LD_INT 15
13495: PPUSH
13496: CALL_OW 12
13500: ARRAY
13501: ST_TO_ADDR
// if ValidHex ( x , y ) then
13502: LD_VAR 0 3
13506: PPUSH
13507: LD_VAR 0 4
13511: PPUSH
13512: CALL_OW 488
13516: IFFALSE 13539
// begin result := [ x , y ] ;
13518: LD_ADDR_VAR 0 1
13522: PUSH
13523: LD_VAR 0 3
13527: PUSH
13528: LD_VAR 0 4
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: ST_TO_ADDR
// break ;
13537: GO 13541
// end ; end ;
13539: GO 13341
13541: POP
13542: POP
// if result then
13543: LD_VAR 0 1
13547: IFFALSE 13607
// begin ToLua ( playSibBomb() ) ;
13549: LD_STRING playSibBomb()
13551: PPUSH
13552: CALL_OW 559
// wait ( 0 0$14 ) ;
13556: LD_INT 490
13558: PPUSH
13559: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13563: LD_VAR 0 1
13567: PUSH
13568: LD_INT 1
13570: ARRAY
13571: PPUSH
13572: LD_VAR 0 1
13576: PUSH
13577: LD_INT 2
13579: ARRAY
13580: PPUSH
13581: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13585: LD_VAR 0 1
13589: PUSH
13590: LD_INT 1
13592: ARRAY
13593: PPUSH
13594: LD_VAR 0 1
13598: PUSH
13599: LD_INT 2
13601: ARRAY
13602: PPUSH
13603: CALL_OW 429
// end ; end ;
13607: LD_VAR 0 1
13611: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13612: LD_EXP 26
13616: PUSH
13617: LD_EXP 48
13621: AND
13622: IFFALSE 13634
13624: GO 13626
13626: DISABLE
// YouLost (  ) ;
13627: LD_STRING 
13629: PPUSH
13630: CALL_OW 104
13634: END
// every 0 0$1 trigger StreamModeActive and sFog do
13635: LD_EXP 26
13639: PUSH
13640: LD_EXP 47
13644: AND
13645: IFFALSE 13659
13647: GO 13649
13649: DISABLE
// FogOff ( your_side ) ;
13650: LD_OWVAR 2
13654: PPUSH
13655: CALL_OW 344
13659: END
// every 0 0$1 trigger StreamModeActive and sSun do
13660: LD_EXP 26
13664: PUSH
13665: LD_EXP 49
13669: AND
13670: IFFALSE 13698
13672: GO 13674
13674: DISABLE
// begin solar_recharge_percent := 0 ;
13675: LD_ADDR_OWVAR 79
13679: PUSH
13680: LD_INT 0
13682: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13683: LD_INT 10500
13685: PPUSH
13686: CALL_OW 67
// solar_recharge_percent := 100 ;
13690: LD_ADDR_OWVAR 79
13694: PUSH
13695: LD_INT 100
13697: ST_TO_ADDR
// end ;
13698: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13699: LD_EXP 26
13703: PUSH
13704: LD_EXP 50
13708: AND
13709: IFFALSE 13948
13711: GO 13713
13713: DISABLE
13714: LD_INT 0
13716: PPUSH
13717: PPUSH
13718: PPUSH
// begin tmp := [ ] ;
13719: LD_ADDR_VAR 0 3
13723: PUSH
13724: EMPTY
13725: ST_TO_ADDR
// for i := 1 to 6 do
13726: LD_ADDR_VAR 0 1
13730: PUSH
13731: DOUBLE
13732: LD_INT 1
13734: DEC
13735: ST_TO_ADDR
13736: LD_INT 6
13738: PUSH
13739: FOR_TO
13740: IFFALSE 13845
// begin uc_nation := nation_nature ;
13742: LD_ADDR_OWVAR 21
13746: PUSH
13747: LD_INT 0
13749: ST_TO_ADDR
// uc_side := 0 ;
13750: LD_ADDR_OWVAR 20
13754: PUSH
13755: LD_INT 0
13757: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13758: LD_ADDR_OWVAR 29
13762: PUSH
13763: LD_INT 12
13765: PUSH
13766: LD_INT 12
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: ST_TO_ADDR
// hc_agressivity := 20 ;
13773: LD_ADDR_OWVAR 35
13777: PUSH
13778: LD_INT 20
13780: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13781: LD_ADDR_OWVAR 28
13785: PUSH
13786: LD_INT 17
13788: ST_TO_ADDR
// hc_gallery :=  ;
13789: LD_ADDR_OWVAR 33
13793: PUSH
13794: LD_STRING 
13796: ST_TO_ADDR
// hc_name :=  ;
13797: LD_ADDR_OWVAR 26
13801: PUSH
13802: LD_STRING 
13804: ST_TO_ADDR
// un := CreateHuman ;
13805: LD_ADDR_VAR 0 2
13809: PUSH
13810: CALL_OW 44
13814: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13815: LD_VAR 0 2
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: CALL_OW 51
// tmp := tmp ^ un ;
13827: LD_ADDR_VAR 0 3
13831: PUSH
13832: LD_VAR 0 3
13836: PUSH
13837: LD_VAR 0 2
13841: ADD
13842: ST_TO_ADDR
// end ;
13843: GO 13739
13845: POP
13846: POP
// repeat wait ( 0 0$1 ) ;
13847: LD_INT 35
13849: PPUSH
13850: CALL_OW 67
// for un in tmp do
13854: LD_ADDR_VAR 0 2
13858: PUSH
13859: LD_VAR 0 3
13863: PUSH
13864: FOR_IN
13865: IFFALSE 13939
// begin if IsDead ( un ) then
13867: LD_VAR 0 2
13871: PPUSH
13872: CALL_OW 301
13876: IFFALSE 13896
// begin tmp := tmp diff un ;
13878: LD_ADDR_VAR 0 3
13882: PUSH
13883: LD_VAR 0 3
13887: PUSH
13888: LD_VAR 0 2
13892: DIFF
13893: ST_TO_ADDR
// continue ;
13894: GO 13864
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13896: LD_VAR 0 2
13900: PPUSH
13901: LD_INT 3
13903: PUSH
13904: LD_INT 22
13906: PUSH
13907: LD_INT 0
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PPUSH
13918: CALL_OW 69
13922: PPUSH
13923: LD_VAR 0 2
13927: PPUSH
13928: CALL_OW 74
13932: PPUSH
13933: CALL_OW 115
// end ;
13937: GO 13864
13939: POP
13940: POP
// until not tmp ;
13941: LD_VAR 0 3
13945: NOT
13946: IFFALSE 13847
// end ;
13948: PPOPN 3
13950: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13951: LD_EXP 26
13955: PUSH
13956: LD_EXP 51
13960: AND
13961: IFFALSE 14015
13963: GO 13965
13965: DISABLE
// begin ToLua ( displayTroll(); ) ;
13966: LD_STRING displayTroll();
13968: PPUSH
13969: CALL_OW 559
// wait ( 3 3$00 ) ;
13973: LD_INT 6300
13975: PPUSH
13976: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13980: LD_STRING hideTroll();
13982: PPUSH
13983: CALL_OW 559
// wait ( 1 1$00 ) ;
13987: LD_INT 2100
13989: PPUSH
13990: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13994: LD_STRING displayTroll();
13996: PPUSH
13997: CALL_OW 559
// wait ( 1 1$00 ) ;
14001: LD_INT 2100
14003: PPUSH
14004: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14008: LD_STRING hideTroll();
14010: PPUSH
14011: CALL_OW 559
// end ;
14015: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14016: LD_EXP 26
14020: PUSH
14021: LD_EXP 52
14025: AND
14026: IFFALSE 14089
14028: GO 14030
14030: DISABLE
14031: LD_INT 0
14033: PPUSH
// begin p := 0 ;
14034: LD_ADDR_VAR 0 1
14038: PUSH
14039: LD_INT 0
14041: ST_TO_ADDR
// repeat game_speed := 1 ;
14042: LD_ADDR_OWVAR 65
14046: PUSH
14047: LD_INT 1
14049: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14050: LD_INT 35
14052: PPUSH
14053: CALL_OW 67
// p := p + 1 ;
14057: LD_ADDR_VAR 0 1
14061: PUSH
14062: LD_VAR 0 1
14066: PUSH
14067: LD_INT 1
14069: PLUS
14070: ST_TO_ADDR
// until p >= 60 ;
14071: LD_VAR 0 1
14075: PUSH
14076: LD_INT 60
14078: GREATEREQUAL
14079: IFFALSE 14042
// game_speed := 4 ;
14081: LD_ADDR_OWVAR 65
14085: PUSH
14086: LD_INT 4
14088: ST_TO_ADDR
// end ;
14089: PPOPN 1
14091: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14092: LD_EXP 26
14096: PUSH
14097: LD_EXP 53
14101: AND
14102: IFFALSE 14248
14104: GO 14106
14106: DISABLE
14107: LD_INT 0
14109: PPUSH
14110: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14111: LD_ADDR_VAR 0 1
14115: PUSH
14116: LD_INT 22
14118: PUSH
14119: LD_OWVAR 2
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 2
14130: PUSH
14131: LD_INT 30
14133: PUSH
14134: LD_INT 0
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 30
14143: PUSH
14144: LD_INT 1
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 69
14164: ST_TO_ADDR
// if not depot then
14165: LD_VAR 0 1
14169: NOT
14170: IFFALSE 14174
// exit ;
14172: GO 14248
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14174: LD_ADDR_VAR 0 2
14178: PUSH
14179: LD_VAR 0 1
14183: PUSH
14184: LD_INT 1
14186: PPUSH
14187: LD_VAR 0 1
14191: PPUSH
14192: CALL_OW 12
14196: ARRAY
14197: PPUSH
14198: CALL_OW 274
14202: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14203: LD_VAR 0 2
14207: PPUSH
14208: LD_INT 1
14210: PPUSH
14211: LD_INT 0
14213: PPUSH
14214: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14218: LD_VAR 0 2
14222: PPUSH
14223: LD_INT 2
14225: PPUSH
14226: LD_INT 0
14228: PPUSH
14229: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14233: LD_VAR 0 2
14237: PPUSH
14238: LD_INT 3
14240: PPUSH
14241: LD_INT 0
14243: PPUSH
14244: CALL_OW 277
// end ;
14248: PPOPN 2
14250: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14251: LD_EXP 26
14255: PUSH
14256: LD_EXP 54
14260: AND
14261: IFFALSE 14358
14263: GO 14265
14265: DISABLE
14266: LD_INT 0
14268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14269: LD_ADDR_VAR 0 1
14273: PUSH
14274: LD_INT 22
14276: PUSH
14277: LD_OWVAR 2
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 1
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 3
14298: PUSH
14299: LD_INT 23
14301: PUSH
14302: LD_INT 0
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: PPUSH
14318: CALL_OW 69
14322: ST_TO_ADDR
// if not tmp then
14323: LD_VAR 0 1
14327: NOT
14328: IFFALSE 14332
// exit ;
14330: GO 14358
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14332: LD_VAR 0 1
14336: PUSH
14337: LD_INT 1
14339: PPUSH
14340: LD_VAR 0 1
14344: PPUSH
14345: CALL_OW 12
14349: ARRAY
14350: PPUSH
14351: LD_INT 200
14353: PPUSH
14354: CALL_OW 234
// end ;
14358: PPOPN 1
14360: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14361: LD_EXP 26
14365: PUSH
14366: LD_EXP 55
14370: AND
14371: IFFALSE 14450
14373: GO 14375
14375: DISABLE
14376: LD_INT 0
14378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14379: LD_ADDR_VAR 0 1
14383: PUSH
14384: LD_INT 22
14386: PUSH
14387: LD_OWVAR 2
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: LD_INT 21
14398: PUSH
14399: LD_INT 2
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 69
14414: ST_TO_ADDR
// if not tmp then
14415: LD_VAR 0 1
14419: NOT
14420: IFFALSE 14424
// exit ;
14422: GO 14450
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14424: LD_VAR 0 1
14428: PUSH
14429: LD_INT 1
14431: PPUSH
14432: LD_VAR 0 1
14436: PPUSH
14437: CALL_OW 12
14441: ARRAY
14442: PPUSH
14443: LD_INT 60
14445: PPUSH
14446: CALL_OW 234
// end ;
14450: PPOPN 1
14452: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14453: LD_EXP 26
14457: PUSH
14458: LD_EXP 56
14462: AND
14463: IFFALSE 14562
14465: GO 14467
14467: DISABLE
14468: LD_INT 0
14470: PPUSH
14471: PPUSH
// begin enable ;
14472: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14473: LD_ADDR_VAR 0 1
14477: PUSH
14478: LD_INT 22
14480: PUSH
14481: LD_OWVAR 2
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: LD_INT 61
14492: PUSH
14493: EMPTY
14494: LIST
14495: PUSH
14496: LD_INT 33
14498: PUSH
14499: LD_INT 2
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: LIST
14510: PPUSH
14511: CALL_OW 69
14515: ST_TO_ADDR
// if not tmp then
14516: LD_VAR 0 1
14520: NOT
14521: IFFALSE 14525
// exit ;
14523: GO 14562
// for i in tmp do
14525: LD_ADDR_VAR 0 2
14529: PUSH
14530: LD_VAR 0 1
14534: PUSH
14535: FOR_IN
14536: IFFALSE 14560
// if IsControledBy ( i ) then
14538: LD_VAR 0 2
14542: PPUSH
14543: CALL_OW 312
14547: IFFALSE 14558
// ComUnlink ( i ) ;
14549: LD_VAR 0 2
14553: PPUSH
14554: CALL_OW 136
14558: GO 14535
14560: POP
14561: POP
// end ;
14562: PPOPN 2
14564: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14565: LD_EXP 26
14569: PUSH
14570: LD_EXP 57
14574: AND
14575: IFFALSE 14715
14577: GO 14579
14579: DISABLE
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
// begin ToLua ( displayPowell(); ) ;
14584: LD_STRING displayPowell();
14586: PPUSH
14587: CALL_OW 559
// uc_side := 0 ;
14591: LD_ADDR_OWVAR 20
14595: PUSH
14596: LD_INT 0
14598: ST_TO_ADDR
// uc_nation := 2 ;
14599: LD_ADDR_OWVAR 21
14603: PUSH
14604: LD_INT 2
14606: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14607: LD_ADDR_OWVAR 37
14611: PUSH
14612: LD_INT 14
14614: ST_TO_ADDR
// vc_engine := engine_siberite ;
14615: LD_ADDR_OWVAR 39
14619: PUSH
14620: LD_INT 3
14622: ST_TO_ADDR
// vc_control := control_apeman ;
14623: LD_ADDR_OWVAR 38
14627: PUSH
14628: LD_INT 5
14630: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14631: LD_ADDR_OWVAR 40
14635: PUSH
14636: LD_INT 29
14638: ST_TO_ADDR
// un := CreateVehicle ;
14639: LD_ADDR_VAR 0 2
14643: PUSH
14644: CALL_OW 45
14648: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14649: LD_VAR 0 2
14653: PPUSH
14654: LD_INT 1
14656: PPUSH
14657: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14661: LD_INT 35
14663: PPUSH
14664: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14668: LD_VAR 0 2
14672: PPUSH
14673: LD_INT 22
14675: PUSH
14676: LD_OWVAR 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PPUSH
14685: CALL_OW 69
14689: PPUSH
14690: LD_VAR 0 2
14694: PPUSH
14695: CALL_OW 74
14699: PPUSH
14700: CALL_OW 115
// until IsDead ( un ) ;
14704: LD_VAR 0 2
14708: PPUSH
14709: CALL_OW 301
14713: IFFALSE 14661
// end ;
14715: PPOPN 2
14717: END
// every 0 0$1 trigger StreamModeActive and sStu do
14718: LD_EXP 26
14722: PUSH
14723: LD_EXP 65
14727: AND
14728: IFFALSE 14744
14730: GO 14732
14732: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14733: LD_STRING displayStucuk();
14735: PPUSH
14736: CALL_OW 559
// ResetFog ;
14740: CALL_OW 335
// end ;
14744: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14745: LD_EXP 26
14749: PUSH
14750: LD_EXP 58
14754: AND
14755: IFFALSE 14896
14757: GO 14759
14759: DISABLE
14760: LD_INT 0
14762: PPUSH
14763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14764: LD_ADDR_VAR 0 2
14768: PUSH
14769: LD_INT 22
14771: PUSH
14772: LD_OWVAR 2
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 21
14783: PUSH
14784: LD_INT 1
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PPUSH
14795: CALL_OW 69
14799: ST_TO_ADDR
// if not tmp then
14800: LD_VAR 0 2
14804: NOT
14805: IFFALSE 14809
// exit ;
14807: GO 14896
// un := tmp [ rand ( 1 , tmp ) ] ;
14809: LD_ADDR_VAR 0 1
14813: PUSH
14814: LD_VAR 0 2
14818: PUSH
14819: LD_INT 1
14821: PPUSH
14822: LD_VAR 0 2
14826: PPUSH
14827: CALL_OW 12
14831: ARRAY
14832: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14833: LD_VAR 0 1
14837: PPUSH
14838: LD_INT 0
14840: PPUSH
14841: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14845: LD_VAR 0 1
14849: PPUSH
14850: LD_OWVAR 3
14854: PUSH
14855: LD_VAR 0 1
14859: DIFF
14860: PPUSH
14861: LD_VAR 0 1
14865: PPUSH
14866: CALL_OW 74
14870: PPUSH
14871: CALL_OW 115
// wait ( 0 0$20 ) ;
14875: LD_INT 700
14877: PPUSH
14878: CALL_OW 67
// SetSide ( un , your_side ) ;
14882: LD_VAR 0 1
14886: PPUSH
14887: LD_OWVAR 2
14891: PPUSH
14892: CALL_OW 235
// end ;
14896: PPOPN 2
14898: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14899: LD_EXP 26
14903: PUSH
14904: LD_EXP 59
14908: AND
14909: IFFALSE 15015
14911: GO 14913
14913: DISABLE
14914: LD_INT 0
14916: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14917: LD_ADDR_VAR 0 1
14921: PUSH
14922: LD_INT 22
14924: PUSH
14925: LD_OWVAR 2
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: LD_INT 2
14936: PUSH
14937: LD_INT 30
14939: PUSH
14940: LD_INT 0
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 30
14949: PUSH
14950: LD_INT 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PPUSH
14966: CALL_OW 69
14970: ST_TO_ADDR
// if not depot then
14971: LD_VAR 0 1
14975: NOT
14976: IFFALSE 14980
// exit ;
14978: GO 15015
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14980: LD_VAR 0 1
14984: PUSH
14985: LD_INT 1
14987: ARRAY
14988: PPUSH
14989: CALL_OW 250
14993: PPUSH
14994: LD_VAR 0 1
14998: PUSH
14999: LD_INT 1
15001: ARRAY
15002: PPUSH
15003: CALL_OW 251
15007: PPUSH
15008: LD_INT 70
15010: PPUSH
15011: CALL_OW 495
// end ;
15015: PPOPN 1
15017: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15018: LD_EXP 26
15022: PUSH
15023: LD_EXP 60
15027: AND
15028: IFFALSE 15239
15030: GO 15032
15032: DISABLE
15033: LD_INT 0
15035: PPUSH
15036: PPUSH
15037: PPUSH
15038: PPUSH
15039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15040: LD_ADDR_VAR 0 5
15044: PUSH
15045: LD_INT 22
15047: PUSH
15048: LD_OWVAR 2
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT 21
15059: PUSH
15060: LD_INT 1
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PPUSH
15071: CALL_OW 69
15075: ST_TO_ADDR
// if not tmp then
15076: LD_VAR 0 5
15080: NOT
15081: IFFALSE 15085
// exit ;
15083: GO 15239
// for i in tmp do
15085: LD_ADDR_VAR 0 1
15089: PUSH
15090: LD_VAR 0 5
15094: PUSH
15095: FOR_IN
15096: IFFALSE 15237
// begin d := rand ( 0 , 5 ) ;
15098: LD_ADDR_VAR 0 4
15102: PUSH
15103: LD_INT 0
15105: PPUSH
15106: LD_INT 5
15108: PPUSH
15109: CALL_OW 12
15113: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15114: LD_ADDR_VAR 0 2
15118: PUSH
15119: LD_VAR 0 1
15123: PPUSH
15124: CALL_OW 250
15128: PPUSH
15129: LD_VAR 0 4
15133: PPUSH
15134: LD_INT 3
15136: PPUSH
15137: LD_INT 12
15139: PPUSH
15140: CALL_OW 12
15144: PPUSH
15145: CALL_OW 272
15149: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15150: LD_ADDR_VAR 0 3
15154: PUSH
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 251
15164: PPUSH
15165: LD_VAR 0 4
15169: PPUSH
15170: LD_INT 3
15172: PPUSH
15173: LD_INT 12
15175: PPUSH
15176: CALL_OW 12
15180: PPUSH
15181: CALL_OW 273
15185: ST_TO_ADDR
// if ValidHex ( x , y ) then
15186: LD_VAR 0 2
15190: PPUSH
15191: LD_VAR 0 3
15195: PPUSH
15196: CALL_OW 488
15200: IFFALSE 15235
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15202: LD_VAR 0 1
15206: PPUSH
15207: LD_VAR 0 2
15211: PPUSH
15212: LD_VAR 0 3
15216: PPUSH
15217: LD_INT 3
15219: PPUSH
15220: LD_INT 6
15222: PPUSH
15223: CALL_OW 12
15227: PPUSH
15228: LD_INT 1
15230: PPUSH
15231: CALL_OW 483
// end ;
15235: GO 15095
15237: POP
15238: POP
// end ;
15239: PPOPN 5
15241: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15242: LD_EXP 26
15246: PUSH
15247: LD_EXP 61
15251: AND
15252: IFFALSE 15346
15254: GO 15256
15256: DISABLE
15257: LD_INT 0
15259: PPUSH
15260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15261: LD_ADDR_VAR 0 2
15265: PUSH
15266: LD_INT 22
15268: PUSH
15269: LD_OWVAR 2
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 32
15280: PUSH
15281: LD_INT 1
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 21
15290: PUSH
15291: LD_INT 2
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: LIST
15302: PPUSH
15303: CALL_OW 69
15307: ST_TO_ADDR
// if not tmp then
15308: LD_VAR 0 2
15312: NOT
15313: IFFALSE 15317
// exit ;
15315: GO 15346
// for i in tmp do
15317: LD_ADDR_VAR 0 1
15321: PUSH
15322: LD_VAR 0 2
15326: PUSH
15327: FOR_IN
15328: IFFALSE 15344
// SetFuel ( i , 0 ) ;
15330: LD_VAR 0 1
15334: PPUSH
15335: LD_INT 0
15337: PPUSH
15338: CALL_OW 240
15342: GO 15327
15344: POP
15345: POP
// end ;
15346: PPOPN 2
15348: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15349: LD_EXP 26
15353: PUSH
15354: LD_EXP 62
15358: AND
15359: IFFALSE 15425
15361: GO 15363
15363: DISABLE
15364: LD_INT 0
15366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15367: LD_ADDR_VAR 0 1
15371: PUSH
15372: LD_INT 22
15374: PUSH
15375: LD_OWVAR 2
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 30
15386: PUSH
15387: LD_INT 29
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: ST_TO_ADDR
// if not tmp then
15403: LD_VAR 0 1
15407: NOT
15408: IFFALSE 15412
// exit ;
15410: GO 15425
// DestroyUnit ( tmp [ 1 ] ) ;
15412: LD_VAR 0 1
15416: PUSH
15417: LD_INT 1
15419: ARRAY
15420: PPUSH
15421: CALL_OW 65
// end ;
15425: PPOPN 1
15427: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15428: LD_EXP 26
15432: PUSH
15433: LD_EXP 64
15437: AND
15438: IFFALSE 15567
15440: GO 15442
15442: DISABLE
15443: LD_INT 0
15445: PPUSH
// begin uc_side := 0 ;
15446: LD_ADDR_OWVAR 20
15450: PUSH
15451: LD_INT 0
15453: ST_TO_ADDR
// uc_nation := nation_arabian ;
15454: LD_ADDR_OWVAR 21
15458: PUSH
15459: LD_INT 2
15461: ST_TO_ADDR
// hc_gallery :=  ;
15462: LD_ADDR_OWVAR 33
15466: PUSH
15467: LD_STRING 
15469: ST_TO_ADDR
// hc_name :=  ;
15470: LD_ADDR_OWVAR 26
15474: PUSH
15475: LD_STRING 
15477: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15478: LD_INT 1
15480: PPUSH
15481: LD_INT 11
15483: PPUSH
15484: LD_INT 10
15486: PPUSH
15487: CALL_OW 380
// un := CreateHuman ;
15491: LD_ADDR_VAR 0 1
15495: PUSH
15496: CALL_OW 44
15500: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15501: LD_VAR 0 1
15505: PPUSH
15506: LD_INT 1
15508: PPUSH
15509: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15513: LD_INT 35
15515: PPUSH
15516: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15520: LD_VAR 0 1
15524: PPUSH
15525: LD_INT 22
15527: PUSH
15528: LD_OWVAR 2
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: PPUSH
15537: CALL_OW 69
15541: PPUSH
15542: LD_VAR 0 1
15546: PPUSH
15547: CALL_OW 74
15551: PPUSH
15552: CALL_OW 115
// until IsDead ( un ) ;
15556: LD_VAR 0 1
15560: PPUSH
15561: CALL_OW 301
15565: IFFALSE 15513
// end ;
15567: PPOPN 1
15569: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15570: LD_EXP 26
15574: PUSH
15575: LD_EXP 66
15579: AND
15580: IFFALSE 15592
15582: GO 15584
15584: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15585: LD_STRING earthquake(getX(game), 0, 32)
15587: PPUSH
15588: CALL_OW 559
15592: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15593: LD_EXP 26
15597: PUSH
15598: LD_EXP 67
15602: AND
15603: IFFALSE 15694
15605: GO 15607
15607: DISABLE
15608: LD_INT 0
15610: PPUSH
// begin enable ;
15611: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15612: LD_ADDR_VAR 0 1
15616: PUSH
15617: LD_INT 22
15619: PUSH
15620: LD_OWVAR 2
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 21
15631: PUSH
15632: LD_INT 2
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 33
15641: PUSH
15642: LD_INT 3
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: LIST
15653: PPUSH
15654: CALL_OW 69
15658: ST_TO_ADDR
// if not tmp then
15659: LD_VAR 0 1
15663: NOT
15664: IFFALSE 15668
// exit ;
15666: GO 15694
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15668: LD_VAR 0 1
15672: PUSH
15673: LD_INT 1
15675: PPUSH
15676: LD_VAR 0 1
15680: PPUSH
15681: CALL_OW 12
15685: ARRAY
15686: PPUSH
15687: LD_INT 1
15689: PPUSH
15690: CALL_OW 234
// end ;
15694: PPOPN 1
15696: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15697: LD_EXP 26
15701: PUSH
15702: LD_EXP 68
15706: AND
15707: IFFALSE 15848
15709: GO 15711
15711: DISABLE
15712: LD_INT 0
15714: PPUSH
15715: PPUSH
15716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15717: LD_ADDR_VAR 0 3
15721: PUSH
15722: LD_INT 22
15724: PUSH
15725: LD_OWVAR 2
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 25
15736: PUSH
15737: LD_INT 1
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PPUSH
15748: CALL_OW 69
15752: ST_TO_ADDR
// if not tmp then
15753: LD_VAR 0 3
15757: NOT
15758: IFFALSE 15762
// exit ;
15760: GO 15848
// un := tmp [ rand ( 1 , tmp ) ] ;
15762: LD_ADDR_VAR 0 2
15766: PUSH
15767: LD_VAR 0 3
15771: PUSH
15772: LD_INT 1
15774: PPUSH
15775: LD_VAR 0 3
15779: PPUSH
15780: CALL_OW 12
15784: ARRAY
15785: ST_TO_ADDR
// if Crawls ( un ) then
15786: LD_VAR 0 2
15790: PPUSH
15791: CALL_OW 318
15795: IFFALSE 15806
// ComWalk ( un ) ;
15797: LD_VAR 0 2
15801: PPUSH
15802: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15806: LD_VAR 0 2
15810: PPUSH
15811: LD_INT 9
15813: PPUSH
15814: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15818: LD_INT 28
15820: PPUSH
15821: LD_OWVAR 2
15825: PPUSH
15826: LD_INT 2
15828: PPUSH
15829: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15833: LD_INT 29
15835: PPUSH
15836: LD_OWVAR 2
15840: PPUSH
15841: LD_INT 2
15843: PPUSH
15844: CALL_OW 322
// end ;
15848: PPOPN 3
15850: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15851: LD_EXP 26
15855: PUSH
15856: LD_EXP 69
15860: AND
15861: IFFALSE 15972
15863: GO 15865
15865: DISABLE
15866: LD_INT 0
15868: PPUSH
15869: PPUSH
15870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15871: LD_ADDR_VAR 0 3
15875: PUSH
15876: LD_INT 22
15878: PUSH
15879: LD_OWVAR 2
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 25
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PPUSH
15902: CALL_OW 69
15906: ST_TO_ADDR
// if not tmp then
15907: LD_VAR 0 3
15911: NOT
15912: IFFALSE 15916
// exit ;
15914: GO 15972
// un := tmp [ rand ( 1 , tmp ) ] ;
15916: LD_ADDR_VAR 0 2
15920: PUSH
15921: LD_VAR 0 3
15925: PUSH
15926: LD_INT 1
15928: PPUSH
15929: LD_VAR 0 3
15933: PPUSH
15934: CALL_OW 12
15938: ARRAY
15939: ST_TO_ADDR
// if Crawls ( un ) then
15940: LD_VAR 0 2
15944: PPUSH
15945: CALL_OW 318
15949: IFFALSE 15960
// ComWalk ( un ) ;
15951: LD_VAR 0 2
15955: PPUSH
15956: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15960: LD_VAR 0 2
15964: PPUSH
15965: LD_INT 8
15967: PPUSH
15968: CALL_OW 336
// end ;
15972: PPOPN 3
15974: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15975: LD_EXP 26
15979: PUSH
15980: LD_EXP 70
15984: AND
15985: IFFALSE 16129
15987: GO 15989
15989: DISABLE
15990: LD_INT 0
15992: PPUSH
15993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: LD_INT 22
16001: PUSH
16002: LD_OWVAR 2
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 21
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 2
16023: PUSH
16024: LD_INT 34
16026: PUSH
16027: LD_INT 12
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 34
16036: PUSH
16037: LD_INT 51
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 34
16046: PUSH
16047: LD_INT 32
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: PPUSH
16065: CALL_OW 69
16069: ST_TO_ADDR
// if not tmp then
16070: LD_VAR 0 2
16074: NOT
16075: IFFALSE 16079
// exit ;
16077: GO 16129
// for i in tmp do
16079: LD_ADDR_VAR 0 1
16083: PUSH
16084: LD_VAR 0 2
16088: PUSH
16089: FOR_IN
16090: IFFALSE 16127
// if GetCargo ( i , mat_artifact ) = 0 then
16092: LD_VAR 0 1
16096: PPUSH
16097: LD_INT 4
16099: PPUSH
16100: CALL_OW 289
16104: PUSH
16105: LD_INT 0
16107: EQUAL
16108: IFFALSE 16125
// SetCargo ( i , mat_siberit , 100 ) ;
16110: LD_VAR 0 1
16114: PPUSH
16115: LD_INT 3
16117: PPUSH
16118: LD_INT 100
16120: PPUSH
16121: CALL_OW 290
16125: GO 16089
16127: POP
16128: POP
// end ;
16129: PPOPN 2
16131: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16132: LD_EXP 26
16136: PUSH
16137: LD_EXP 71
16141: AND
16142: IFFALSE 16325
16144: GO 16146
16146: DISABLE
16147: LD_INT 0
16149: PPUSH
16150: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16151: LD_ADDR_VAR 0 2
16155: PUSH
16156: LD_INT 22
16158: PUSH
16159: LD_OWVAR 2
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PPUSH
16168: CALL_OW 69
16172: ST_TO_ADDR
// if not tmp then
16173: LD_VAR 0 2
16177: NOT
16178: IFFALSE 16182
// exit ;
16180: GO 16325
// for i := 1 to 2 do
16182: LD_ADDR_VAR 0 1
16186: PUSH
16187: DOUBLE
16188: LD_INT 1
16190: DEC
16191: ST_TO_ADDR
16192: LD_INT 2
16194: PUSH
16195: FOR_TO
16196: IFFALSE 16323
// begin uc_side := your_side ;
16198: LD_ADDR_OWVAR 20
16202: PUSH
16203: LD_OWVAR 2
16207: ST_TO_ADDR
// uc_nation := nation_american ;
16208: LD_ADDR_OWVAR 21
16212: PUSH
16213: LD_INT 1
16215: ST_TO_ADDR
// vc_chassis := us_morphling ;
16216: LD_ADDR_OWVAR 37
16220: PUSH
16221: LD_INT 5
16223: ST_TO_ADDR
// vc_engine := engine_siberite ;
16224: LD_ADDR_OWVAR 39
16228: PUSH
16229: LD_INT 3
16231: ST_TO_ADDR
// vc_control := control_computer ;
16232: LD_ADDR_OWVAR 38
16236: PUSH
16237: LD_INT 3
16239: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16240: LD_ADDR_OWVAR 40
16244: PUSH
16245: LD_INT 10
16247: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16248: LD_VAR 0 2
16252: PUSH
16253: LD_INT 1
16255: ARRAY
16256: PPUSH
16257: CALL_OW 310
16261: NOT
16262: IFFALSE 16309
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16264: CALL_OW 45
16268: PPUSH
16269: LD_VAR 0 2
16273: PUSH
16274: LD_INT 1
16276: ARRAY
16277: PPUSH
16278: CALL_OW 250
16282: PPUSH
16283: LD_VAR 0 2
16287: PUSH
16288: LD_INT 1
16290: ARRAY
16291: PPUSH
16292: CALL_OW 251
16296: PPUSH
16297: LD_INT 12
16299: PPUSH
16300: LD_INT 1
16302: PPUSH
16303: CALL_OW 50
16307: GO 16321
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16309: CALL_OW 45
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: CALL_OW 51
// end ;
16321: GO 16195
16323: POP
16324: POP
// end ;
16325: PPOPN 2
16327: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16328: LD_EXP 26
16332: PUSH
16333: LD_EXP 72
16337: AND
16338: IFFALSE 16560
16340: GO 16342
16342: DISABLE
16343: LD_INT 0
16345: PPUSH
16346: PPUSH
16347: PPUSH
16348: PPUSH
16349: PPUSH
16350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16351: LD_ADDR_VAR 0 6
16355: PUSH
16356: LD_INT 22
16358: PUSH
16359: LD_OWVAR 2
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 21
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 3
16380: PUSH
16381: LD_INT 23
16383: PUSH
16384: LD_INT 0
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: LIST
16399: PPUSH
16400: CALL_OW 69
16404: ST_TO_ADDR
// if not tmp then
16405: LD_VAR 0 6
16409: NOT
16410: IFFALSE 16414
// exit ;
16412: GO 16560
// s1 := rand ( 1 , 4 ) ;
16414: LD_ADDR_VAR 0 2
16418: PUSH
16419: LD_INT 1
16421: PPUSH
16422: LD_INT 4
16424: PPUSH
16425: CALL_OW 12
16429: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16430: LD_ADDR_VAR 0 4
16434: PUSH
16435: LD_VAR 0 6
16439: PUSH
16440: LD_INT 1
16442: ARRAY
16443: PPUSH
16444: LD_VAR 0 2
16448: PPUSH
16449: CALL_OW 259
16453: ST_TO_ADDR
// if s1 = 1 then
16454: LD_VAR 0 2
16458: PUSH
16459: LD_INT 1
16461: EQUAL
16462: IFFALSE 16482
// s2 := rand ( 2 , 4 ) else
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_INT 2
16471: PPUSH
16472: LD_INT 4
16474: PPUSH
16475: CALL_OW 12
16479: ST_TO_ADDR
16480: GO 16490
// s2 := 1 ;
16482: LD_ADDR_VAR 0 3
16486: PUSH
16487: LD_INT 1
16489: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16490: LD_ADDR_VAR 0 5
16494: PUSH
16495: LD_VAR 0 6
16499: PUSH
16500: LD_INT 1
16502: ARRAY
16503: PPUSH
16504: LD_VAR 0 3
16508: PPUSH
16509: CALL_OW 259
16513: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16514: LD_VAR 0 6
16518: PUSH
16519: LD_INT 1
16521: ARRAY
16522: PPUSH
16523: LD_VAR 0 2
16527: PPUSH
16528: LD_VAR 0 5
16532: PPUSH
16533: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16537: LD_VAR 0 6
16541: PUSH
16542: LD_INT 1
16544: ARRAY
16545: PPUSH
16546: LD_VAR 0 3
16550: PPUSH
16551: LD_VAR 0 4
16555: PPUSH
16556: CALL_OW 237
// end ;
16560: PPOPN 6
16562: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16563: LD_EXP 26
16567: PUSH
16568: LD_EXP 73
16572: AND
16573: IFFALSE 16652
16575: GO 16577
16577: DISABLE
16578: LD_INT 0
16580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16581: LD_ADDR_VAR 0 1
16585: PUSH
16586: LD_INT 22
16588: PUSH
16589: LD_OWVAR 2
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 30
16600: PUSH
16601: LD_INT 3
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: ST_TO_ADDR
// if not tmp then
16617: LD_VAR 0 1
16621: NOT
16622: IFFALSE 16626
// exit ;
16624: GO 16652
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16626: LD_VAR 0 1
16630: PUSH
16631: LD_INT 1
16633: PPUSH
16634: LD_VAR 0 1
16638: PPUSH
16639: CALL_OW 12
16643: ARRAY
16644: PPUSH
16645: LD_INT 1
16647: PPUSH
16648: CALL_OW 234
// end ;
16652: PPOPN 1
16654: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16655: LD_EXP 26
16659: PUSH
16660: LD_EXP 74
16664: AND
16665: IFFALSE 16777
16667: GO 16669
16669: DISABLE
16670: LD_INT 0
16672: PPUSH
16673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16674: LD_ADDR_VAR 0 2
16678: PUSH
16679: LD_INT 22
16681: PUSH
16682: LD_OWVAR 2
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 2
16693: PUSH
16694: LD_INT 30
16696: PUSH
16697: LD_INT 27
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 30
16706: PUSH
16707: LD_INT 26
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 30
16716: PUSH
16717: LD_INT 28
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PPUSH
16734: CALL_OW 69
16738: ST_TO_ADDR
// if not tmp then
16739: LD_VAR 0 2
16743: NOT
16744: IFFALSE 16748
// exit ;
16746: GO 16777
// for i in tmp do
16748: LD_ADDR_VAR 0 1
16752: PUSH
16753: LD_VAR 0 2
16757: PUSH
16758: FOR_IN
16759: IFFALSE 16775
// SetLives ( i , 1 ) ;
16761: LD_VAR 0 1
16765: PPUSH
16766: LD_INT 1
16768: PPUSH
16769: CALL_OW 234
16773: GO 16758
16775: POP
16776: POP
// end ;
16777: PPOPN 2
16779: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16780: LD_EXP 26
16784: PUSH
16785: LD_EXP 75
16789: AND
16790: IFFALSE 17077
16792: GO 16794
16794: DISABLE
16795: LD_INT 0
16797: PPUSH
16798: PPUSH
16799: PPUSH
// begin i := rand ( 1 , 7 ) ;
16800: LD_ADDR_VAR 0 1
16804: PUSH
16805: LD_INT 1
16807: PPUSH
16808: LD_INT 7
16810: PPUSH
16811: CALL_OW 12
16815: ST_TO_ADDR
// case i of 1 :
16816: LD_VAR 0 1
16820: PUSH
16821: LD_INT 1
16823: DOUBLE
16824: EQUAL
16825: IFTRUE 16829
16827: GO 16839
16829: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16830: LD_STRING earthquake(getX(game), 0, 32)
16832: PPUSH
16833: CALL_OW 559
16837: GO 17077
16839: LD_INT 2
16841: DOUBLE
16842: EQUAL
16843: IFTRUE 16847
16845: GO 16861
16847: POP
// begin ToLua ( displayStucuk(); ) ;
16848: LD_STRING displayStucuk();
16850: PPUSH
16851: CALL_OW 559
// ResetFog ;
16855: CALL_OW 335
// end ; 3 :
16859: GO 17077
16861: LD_INT 3
16863: DOUBLE
16864: EQUAL
16865: IFTRUE 16869
16867: GO 16973
16869: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16870: LD_ADDR_VAR 0 2
16874: PUSH
16875: LD_INT 22
16877: PUSH
16878: LD_OWVAR 2
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 25
16889: PUSH
16890: LD_INT 1
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PPUSH
16901: CALL_OW 69
16905: ST_TO_ADDR
// if not tmp then
16906: LD_VAR 0 2
16910: NOT
16911: IFFALSE 16915
// exit ;
16913: GO 17077
// un := tmp [ rand ( 1 , tmp ) ] ;
16915: LD_ADDR_VAR 0 3
16919: PUSH
16920: LD_VAR 0 2
16924: PUSH
16925: LD_INT 1
16927: PPUSH
16928: LD_VAR 0 2
16932: PPUSH
16933: CALL_OW 12
16937: ARRAY
16938: ST_TO_ADDR
// if Crawls ( un ) then
16939: LD_VAR 0 3
16943: PPUSH
16944: CALL_OW 318
16948: IFFALSE 16959
// ComWalk ( un ) ;
16950: LD_VAR 0 3
16954: PPUSH
16955: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16959: LD_VAR 0 3
16963: PPUSH
16964: LD_INT 8
16966: PPUSH
16967: CALL_OW 336
// end ; 4 :
16971: GO 17077
16973: LD_INT 4
16975: DOUBLE
16976: EQUAL
16977: IFTRUE 16981
16979: GO 17055
16981: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16982: LD_ADDR_VAR 0 2
16986: PUSH
16987: LD_INT 22
16989: PUSH
16990: LD_OWVAR 2
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 30
17001: PUSH
17002: LD_INT 29
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PPUSH
17013: CALL_OW 69
17017: ST_TO_ADDR
// if not tmp then
17018: LD_VAR 0 2
17022: NOT
17023: IFFALSE 17027
// exit ;
17025: GO 17077
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17027: LD_VAR 0 2
17031: PUSH
17032: LD_INT 1
17034: ARRAY
17035: PPUSH
17036: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17040: LD_VAR 0 2
17044: PUSH
17045: LD_INT 1
17047: ARRAY
17048: PPUSH
17049: CALL_OW 65
// end ; 5 .. 7 :
17053: GO 17077
17055: LD_INT 5
17057: DOUBLE
17058: GREATEREQUAL
17059: IFFALSE 17067
17061: LD_INT 7
17063: DOUBLE
17064: LESSEQUAL
17065: IFTRUE 17069
17067: GO 17076
17069: POP
// StreamSibBomb ; end ;
17070: CALL 13314 0 0
17074: GO 17077
17076: POP
// end ;
17077: PPOPN 3
17079: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17080: LD_EXP 26
17084: PUSH
17085: LD_EXP 76
17089: AND
17090: IFFALSE 17246
17092: GO 17094
17094: DISABLE
17095: LD_INT 0
17097: PPUSH
17098: PPUSH
17099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17100: LD_ADDR_VAR 0 2
17104: PUSH
17105: LD_INT 81
17107: PUSH
17108: LD_OWVAR 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 2
17119: PUSH
17120: LD_INT 21
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 21
17132: PUSH
17133: LD_INT 2
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: LIST
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PPUSH
17149: CALL_OW 69
17153: ST_TO_ADDR
// if not tmp then
17154: LD_VAR 0 2
17158: NOT
17159: IFFALSE 17163
// exit ;
17161: GO 17246
// p := 0 ;
17163: LD_ADDR_VAR 0 3
17167: PUSH
17168: LD_INT 0
17170: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17171: LD_INT 35
17173: PPUSH
17174: CALL_OW 67
// p := p + 1 ;
17178: LD_ADDR_VAR 0 3
17182: PUSH
17183: LD_VAR 0 3
17187: PUSH
17188: LD_INT 1
17190: PLUS
17191: ST_TO_ADDR
// for i in tmp do
17192: LD_ADDR_VAR 0 1
17196: PUSH
17197: LD_VAR 0 2
17201: PUSH
17202: FOR_IN
17203: IFFALSE 17234
// if GetLives ( i ) < 1000 then
17205: LD_VAR 0 1
17209: PPUSH
17210: CALL_OW 256
17214: PUSH
17215: LD_INT 1000
17217: LESS
17218: IFFALSE 17232
// SetLives ( i , 1000 ) ;
17220: LD_VAR 0 1
17224: PPUSH
17225: LD_INT 1000
17227: PPUSH
17228: CALL_OW 234
17232: GO 17202
17234: POP
17235: POP
// until p > 20 ;
17236: LD_VAR 0 3
17240: PUSH
17241: LD_INT 20
17243: GREATER
17244: IFFALSE 17171
// end ;
17246: PPOPN 3
17248: END
// every 0 0$1 trigger StreamModeActive and sTime do
17249: LD_EXP 26
17253: PUSH
17254: LD_EXP 77
17258: AND
17259: IFFALSE 17294
17261: GO 17263
17263: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17264: LD_INT 28
17266: PPUSH
17267: LD_OWVAR 2
17271: PPUSH
17272: LD_INT 2
17274: PPUSH
17275: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17279: LD_INT 30
17281: PPUSH
17282: LD_OWVAR 2
17286: PPUSH
17287: LD_INT 2
17289: PPUSH
17290: CALL_OW 322
// end ;
17294: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17295: LD_EXP 26
17299: PUSH
17300: LD_EXP 78
17304: AND
17305: IFFALSE 17426
17307: GO 17309
17309: DISABLE
17310: LD_INT 0
17312: PPUSH
17313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17314: LD_ADDR_VAR 0 2
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_OWVAR 2
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 1
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 3
17343: PUSH
17344: LD_INT 23
17346: PUSH
17347: LD_INT 0
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: PPUSH
17363: CALL_OW 69
17367: ST_TO_ADDR
// if not tmp then
17368: LD_VAR 0 2
17372: NOT
17373: IFFALSE 17377
// exit ;
17375: GO 17426
// for i in tmp do
17377: LD_ADDR_VAR 0 1
17381: PUSH
17382: LD_VAR 0 2
17386: PUSH
17387: FOR_IN
17388: IFFALSE 17424
// begin if Crawls ( i ) then
17390: LD_VAR 0 1
17394: PPUSH
17395: CALL_OW 318
17399: IFFALSE 17410
// ComWalk ( i ) ;
17401: LD_VAR 0 1
17405: PPUSH
17406: CALL_OW 138
// SetClass ( i , 2 ) ;
17410: LD_VAR 0 1
17414: PPUSH
17415: LD_INT 2
17417: PPUSH
17418: CALL_OW 336
// end ;
17422: GO 17387
17424: POP
17425: POP
// end ;
17426: PPOPN 2
17428: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17429: LD_EXP 26
17433: PUSH
17434: LD_EXP 79
17438: AND
17439: IFFALSE 17727
17441: GO 17443
17443: DISABLE
17444: LD_INT 0
17446: PPUSH
17447: PPUSH
17448: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17449: LD_OWVAR 2
17453: PPUSH
17454: LD_INT 9
17456: PPUSH
17457: LD_INT 1
17459: PPUSH
17460: LD_INT 1
17462: PPUSH
17463: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17467: LD_INT 9
17469: PPUSH
17470: LD_OWVAR 2
17474: PPUSH
17475: CALL_OW 343
// uc_side := 9 ;
17479: LD_ADDR_OWVAR 20
17483: PUSH
17484: LD_INT 9
17486: ST_TO_ADDR
// uc_nation := 2 ;
17487: LD_ADDR_OWVAR 21
17491: PUSH
17492: LD_INT 2
17494: ST_TO_ADDR
// hc_name := Dark Warrior ;
17495: LD_ADDR_OWVAR 26
17499: PUSH
17500: LD_STRING Dark Warrior
17502: ST_TO_ADDR
// hc_gallery :=  ;
17503: LD_ADDR_OWVAR 33
17507: PUSH
17508: LD_STRING 
17510: ST_TO_ADDR
// hc_noskilllimit := true ;
17511: LD_ADDR_OWVAR 76
17515: PUSH
17516: LD_INT 1
17518: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17519: LD_ADDR_OWVAR 31
17523: PUSH
17524: LD_INT 30
17526: PUSH
17527: LD_INT 30
17529: PUSH
17530: LD_INT 30
17532: PUSH
17533: LD_INT 30
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: ST_TO_ADDR
// un := CreateHuman ;
17542: LD_ADDR_VAR 0 3
17546: PUSH
17547: CALL_OW 44
17551: ST_TO_ADDR
// hc_noskilllimit := false ;
17552: LD_ADDR_OWVAR 76
17556: PUSH
17557: LD_INT 0
17559: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17560: LD_VAR 0 3
17564: PPUSH
17565: LD_INT 1
17567: PPUSH
17568: CALL_OW 51
// ToLua ( playRanger() ) ;
17572: LD_STRING playRanger()
17574: PPUSH
17575: CALL_OW 559
// p := 0 ;
17579: LD_ADDR_VAR 0 2
17583: PUSH
17584: LD_INT 0
17586: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17587: LD_INT 35
17589: PPUSH
17590: CALL_OW 67
// p := p + 1 ;
17594: LD_ADDR_VAR 0 2
17598: PUSH
17599: LD_VAR 0 2
17603: PUSH
17604: LD_INT 1
17606: PLUS
17607: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17608: LD_VAR 0 3
17612: PPUSH
17613: CALL_OW 256
17617: PUSH
17618: LD_INT 1000
17620: LESS
17621: IFFALSE 17635
// SetLives ( un , 1000 ) ;
17623: LD_VAR 0 3
17627: PPUSH
17628: LD_INT 1000
17630: PPUSH
17631: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17635: LD_VAR 0 3
17639: PPUSH
17640: LD_INT 81
17642: PUSH
17643: LD_OWVAR 2
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 91
17654: PUSH
17655: LD_VAR 0 3
17659: PUSH
17660: LD_INT 30
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PPUSH
17672: CALL_OW 69
17676: PPUSH
17677: LD_VAR 0 3
17681: PPUSH
17682: CALL_OW 74
17686: PPUSH
17687: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17691: LD_VAR 0 2
17695: PUSH
17696: LD_INT 80
17698: GREATER
17699: PUSH
17700: LD_VAR 0 3
17704: PPUSH
17705: CALL_OW 301
17709: OR
17710: IFFALSE 17587
// if un then
17712: LD_VAR 0 3
17716: IFFALSE 17727
// RemoveUnit ( un ) ;
17718: LD_VAR 0 3
17722: PPUSH
17723: CALL_OW 64
// end ;
17727: PPOPN 3
17729: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17730: LD_EXP 80
17734: IFFALSE 17850
17736: GO 17738
17738: DISABLE
17739: LD_INT 0
17741: PPUSH
17742: PPUSH
17743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17744: LD_ADDR_VAR 0 2
17748: PUSH
17749: LD_INT 81
17751: PUSH
17752: LD_OWVAR 2
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 21
17763: PUSH
17764: LD_INT 1
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PPUSH
17775: CALL_OW 69
17779: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17780: LD_STRING playComputer()
17782: PPUSH
17783: CALL_OW 559
// if not tmp then
17787: LD_VAR 0 2
17791: NOT
17792: IFFALSE 17796
// exit ;
17794: GO 17850
// for i in tmp do
17796: LD_ADDR_VAR 0 1
17800: PUSH
17801: LD_VAR 0 2
17805: PUSH
17806: FOR_IN
17807: IFFALSE 17848
// for j := 1 to 4 do
17809: LD_ADDR_VAR 0 3
17813: PUSH
17814: DOUBLE
17815: LD_INT 1
17817: DEC
17818: ST_TO_ADDR
17819: LD_INT 4
17821: PUSH
17822: FOR_TO
17823: IFFALSE 17844
// SetSkill ( i , j , 10 ) ;
17825: LD_VAR 0 1
17829: PPUSH
17830: LD_VAR 0 3
17834: PPUSH
17835: LD_INT 10
17837: PPUSH
17838: CALL_OW 237
17842: GO 17822
17844: POP
17845: POP
17846: GO 17806
17848: POP
17849: POP
// end ;
17850: PPOPN 3
17852: END
// every 0 0$1 trigger s30 do var i , tmp ;
17853: LD_EXP 81
17857: IFFALSE 17926
17859: GO 17861
17861: DISABLE
17862: LD_INT 0
17864: PPUSH
17865: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17866: LD_ADDR_VAR 0 2
17870: PUSH
17871: LD_INT 22
17873: PUSH
17874: LD_OWVAR 2
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PPUSH
17883: CALL_OW 69
17887: ST_TO_ADDR
// if not tmp then
17888: LD_VAR 0 2
17892: NOT
17893: IFFALSE 17897
// exit ;
17895: GO 17926
// for i in tmp do
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 2
17906: PUSH
17907: FOR_IN
17908: IFFALSE 17924
// SetLives ( i , 300 ) ;
17910: LD_VAR 0 1
17914: PPUSH
17915: LD_INT 300
17917: PPUSH
17918: CALL_OW 234
17922: GO 17907
17924: POP
17925: POP
// end ;
17926: PPOPN 2
17928: END
// every 0 0$1 trigger s60 do var i , tmp ;
17929: LD_EXP 82
17933: IFFALSE 18002
17935: GO 17937
17937: DISABLE
17938: LD_INT 0
17940: PPUSH
17941: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17942: LD_ADDR_VAR 0 2
17946: PUSH
17947: LD_INT 22
17949: PUSH
17950: LD_OWVAR 2
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PPUSH
17959: CALL_OW 69
17963: ST_TO_ADDR
// if not tmp then
17964: LD_VAR 0 2
17968: NOT
17969: IFFALSE 17973
// exit ;
17971: GO 18002
// for i in tmp do
17973: LD_ADDR_VAR 0 1
17977: PUSH
17978: LD_VAR 0 2
17982: PUSH
17983: FOR_IN
17984: IFFALSE 18000
// SetLives ( i , 600 ) ;
17986: LD_VAR 0 1
17990: PPUSH
17991: LD_INT 600
17993: PPUSH
17994: CALL_OW 234
17998: GO 17983
18000: POP
18001: POP
// end ;
18002: PPOPN 2
18004: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18005: LD_INT 0
18007: PPUSH
// case cmd of 301 :
18008: LD_VAR 0 1
18012: PUSH
18013: LD_INT 301
18015: DOUBLE
18016: EQUAL
18017: IFTRUE 18021
18019: GO 18053
18021: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18022: LD_VAR 0 6
18026: PPUSH
18027: LD_VAR 0 7
18031: PPUSH
18032: LD_VAR 0 8
18036: PPUSH
18037: LD_VAR 0 4
18041: PPUSH
18042: LD_VAR 0 5
18046: PPUSH
18047: CALL 19262 0 5
18051: GO 18174
18053: LD_INT 302
18055: DOUBLE
18056: EQUAL
18057: IFTRUE 18061
18059: GO 18098
18061: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18062: LD_VAR 0 6
18066: PPUSH
18067: LD_VAR 0 7
18071: PPUSH
18072: LD_VAR 0 8
18076: PPUSH
18077: LD_VAR 0 9
18081: PPUSH
18082: LD_VAR 0 4
18086: PPUSH
18087: LD_VAR 0 5
18091: PPUSH
18092: CALL 19353 0 6
18096: GO 18174
18098: LD_INT 303
18100: DOUBLE
18101: EQUAL
18102: IFTRUE 18106
18104: GO 18143
18106: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18107: LD_VAR 0 6
18111: PPUSH
18112: LD_VAR 0 7
18116: PPUSH
18117: LD_VAR 0 8
18121: PPUSH
18122: LD_VAR 0 9
18126: PPUSH
18127: LD_VAR 0 4
18131: PPUSH
18132: LD_VAR 0 5
18136: PPUSH
18137: CALL 18179 0 6
18141: GO 18174
18143: LD_INT 304
18145: DOUBLE
18146: EQUAL
18147: IFTRUE 18151
18149: GO 18173
18151: POP
// hHackTeleport ( unit , x , y ) ; end ;
18152: LD_VAR 0 2
18156: PPUSH
18157: LD_VAR 0 4
18161: PPUSH
18162: LD_VAR 0 5
18166: PPUSH
18167: CALL 19946 0 3
18171: GO 18174
18173: POP
// end ;
18174: LD_VAR 0 12
18178: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18179: LD_INT 0
18181: PPUSH
18182: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18183: LD_VAR 0 1
18187: PUSH
18188: LD_INT 1
18190: LESS
18191: PUSH
18192: LD_VAR 0 1
18196: PUSH
18197: LD_INT 3
18199: GREATER
18200: OR
18201: PUSH
18202: LD_VAR 0 5
18206: PPUSH
18207: LD_VAR 0 6
18211: PPUSH
18212: CALL_OW 428
18216: OR
18217: IFFALSE 18221
// exit ;
18219: GO 18949
// uc_side := your_side ;
18221: LD_ADDR_OWVAR 20
18225: PUSH
18226: LD_OWVAR 2
18230: ST_TO_ADDR
// uc_nation := nation ;
18231: LD_ADDR_OWVAR 21
18235: PUSH
18236: LD_VAR 0 1
18240: ST_TO_ADDR
// bc_level = 1 ;
18241: LD_ADDR_OWVAR 43
18245: PUSH
18246: LD_INT 1
18248: ST_TO_ADDR
// case btype of 1 :
18249: LD_VAR 0 2
18253: PUSH
18254: LD_INT 1
18256: DOUBLE
18257: EQUAL
18258: IFTRUE 18262
18260: GO 18273
18262: POP
// bc_type := b_depot ; 2 :
18263: LD_ADDR_OWVAR 42
18267: PUSH
18268: LD_INT 0
18270: ST_TO_ADDR
18271: GO 18893
18273: LD_INT 2
18275: DOUBLE
18276: EQUAL
18277: IFTRUE 18281
18279: GO 18292
18281: POP
// bc_type := b_warehouse ; 3 :
18282: LD_ADDR_OWVAR 42
18286: PUSH
18287: LD_INT 1
18289: ST_TO_ADDR
18290: GO 18893
18292: LD_INT 3
18294: DOUBLE
18295: EQUAL
18296: IFTRUE 18300
18298: GO 18311
18300: POP
// bc_type := b_lab ; 4 .. 9 :
18301: LD_ADDR_OWVAR 42
18305: PUSH
18306: LD_INT 6
18308: ST_TO_ADDR
18309: GO 18893
18311: LD_INT 4
18313: DOUBLE
18314: GREATEREQUAL
18315: IFFALSE 18323
18317: LD_INT 9
18319: DOUBLE
18320: LESSEQUAL
18321: IFTRUE 18325
18323: GO 18385
18325: POP
// begin bc_type := b_lab_half ;
18326: LD_ADDR_OWVAR 42
18330: PUSH
18331: LD_INT 7
18333: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18334: LD_ADDR_OWVAR 44
18338: PUSH
18339: LD_INT 10
18341: PUSH
18342: LD_INT 11
18344: PUSH
18345: LD_INT 12
18347: PUSH
18348: LD_INT 15
18350: PUSH
18351: LD_INT 14
18353: PUSH
18354: LD_INT 13
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: PUSH
18365: LD_VAR 0 2
18369: PUSH
18370: LD_INT 3
18372: MINUS
18373: ARRAY
18374: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18375: LD_ADDR_OWVAR 45
18379: PUSH
18380: LD_INT 9
18382: ST_TO_ADDR
// end ; 10 .. 13 :
18383: GO 18893
18385: LD_INT 10
18387: DOUBLE
18388: GREATEREQUAL
18389: IFFALSE 18397
18391: LD_INT 13
18393: DOUBLE
18394: LESSEQUAL
18395: IFTRUE 18399
18397: GO 18476
18399: POP
// begin bc_type := b_lab_full ;
18400: LD_ADDR_OWVAR 42
18404: PUSH
18405: LD_INT 8
18407: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18408: LD_ADDR_OWVAR 44
18412: PUSH
18413: LD_INT 10
18415: PUSH
18416: LD_INT 12
18418: PUSH
18419: LD_INT 14
18421: PUSH
18422: LD_INT 13
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: PUSH
18431: LD_VAR 0 2
18435: PUSH
18436: LD_INT 9
18438: MINUS
18439: ARRAY
18440: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18441: LD_ADDR_OWVAR 45
18445: PUSH
18446: LD_INT 11
18448: PUSH
18449: LD_INT 15
18451: PUSH
18452: LD_INT 12
18454: PUSH
18455: LD_INT 15
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: PUSH
18464: LD_VAR 0 2
18468: PUSH
18469: LD_INT 9
18471: MINUS
18472: ARRAY
18473: ST_TO_ADDR
// end ; 14 :
18474: GO 18893
18476: LD_INT 14
18478: DOUBLE
18479: EQUAL
18480: IFTRUE 18484
18482: GO 18495
18484: POP
// bc_type := b_workshop ; 15 :
18485: LD_ADDR_OWVAR 42
18489: PUSH
18490: LD_INT 2
18492: ST_TO_ADDR
18493: GO 18893
18495: LD_INT 15
18497: DOUBLE
18498: EQUAL
18499: IFTRUE 18503
18501: GO 18514
18503: POP
// bc_type := b_factory ; 16 :
18504: LD_ADDR_OWVAR 42
18508: PUSH
18509: LD_INT 3
18511: ST_TO_ADDR
18512: GO 18893
18514: LD_INT 16
18516: DOUBLE
18517: EQUAL
18518: IFTRUE 18522
18520: GO 18533
18522: POP
// bc_type := b_ext_gun ; 17 :
18523: LD_ADDR_OWVAR 42
18527: PUSH
18528: LD_INT 17
18530: ST_TO_ADDR
18531: GO 18893
18533: LD_INT 17
18535: DOUBLE
18536: EQUAL
18537: IFTRUE 18541
18539: GO 18569
18541: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18542: LD_ADDR_OWVAR 42
18546: PUSH
18547: LD_INT 19
18549: PUSH
18550: LD_INT 23
18552: PUSH
18553: LD_INT 19
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: PUSH
18561: LD_VAR 0 1
18565: ARRAY
18566: ST_TO_ADDR
18567: GO 18893
18569: LD_INT 18
18571: DOUBLE
18572: EQUAL
18573: IFTRUE 18577
18575: GO 18588
18577: POP
// bc_type := b_ext_radar ; 19 :
18578: LD_ADDR_OWVAR 42
18582: PUSH
18583: LD_INT 20
18585: ST_TO_ADDR
18586: GO 18893
18588: LD_INT 19
18590: DOUBLE
18591: EQUAL
18592: IFTRUE 18596
18594: GO 18607
18596: POP
// bc_type := b_ext_radio ; 20 :
18597: LD_ADDR_OWVAR 42
18601: PUSH
18602: LD_INT 22
18604: ST_TO_ADDR
18605: GO 18893
18607: LD_INT 20
18609: DOUBLE
18610: EQUAL
18611: IFTRUE 18615
18613: GO 18626
18615: POP
// bc_type := b_ext_siberium ; 21 :
18616: LD_ADDR_OWVAR 42
18620: PUSH
18621: LD_INT 21
18623: ST_TO_ADDR
18624: GO 18893
18626: LD_INT 21
18628: DOUBLE
18629: EQUAL
18630: IFTRUE 18634
18632: GO 18645
18634: POP
// bc_type := b_ext_computer ; 22 :
18635: LD_ADDR_OWVAR 42
18639: PUSH
18640: LD_INT 24
18642: ST_TO_ADDR
18643: GO 18893
18645: LD_INT 22
18647: DOUBLE
18648: EQUAL
18649: IFTRUE 18653
18651: GO 18664
18653: POP
// bc_type := b_ext_track ; 23 :
18654: LD_ADDR_OWVAR 42
18658: PUSH
18659: LD_INT 16
18661: ST_TO_ADDR
18662: GO 18893
18664: LD_INT 23
18666: DOUBLE
18667: EQUAL
18668: IFTRUE 18672
18670: GO 18683
18672: POP
// bc_type := b_ext_laser ; 24 :
18673: LD_ADDR_OWVAR 42
18677: PUSH
18678: LD_INT 25
18680: ST_TO_ADDR
18681: GO 18893
18683: LD_INT 24
18685: DOUBLE
18686: EQUAL
18687: IFTRUE 18691
18689: GO 18702
18691: POP
// bc_type := b_control_tower ; 25 :
18692: LD_ADDR_OWVAR 42
18696: PUSH
18697: LD_INT 36
18699: ST_TO_ADDR
18700: GO 18893
18702: LD_INT 25
18704: DOUBLE
18705: EQUAL
18706: IFTRUE 18710
18708: GO 18721
18710: POP
// bc_type := b_breastwork ; 26 :
18711: LD_ADDR_OWVAR 42
18715: PUSH
18716: LD_INT 31
18718: ST_TO_ADDR
18719: GO 18893
18721: LD_INT 26
18723: DOUBLE
18724: EQUAL
18725: IFTRUE 18729
18727: GO 18740
18729: POP
// bc_type := b_bunker ; 27 :
18730: LD_ADDR_OWVAR 42
18734: PUSH
18735: LD_INT 32
18737: ST_TO_ADDR
18738: GO 18893
18740: LD_INT 27
18742: DOUBLE
18743: EQUAL
18744: IFTRUE 18748
18746: GO 18759
18748: POP
// bc_type := b_turret ; 28 :
18749: LD_ADDR_OWVAR 42
18753: PUSH
18754: LD_INT 33
18756: ST_TO_ADDR
18757: GO 18893
18759: LD_INT 28
18761: DOUBLE
18762: EQUAL
18763: IFTRUE 18767
18765: GO 18778
18767: POP
// bc_type := b_armoury ; 29 :
18768: LD_ADDR_OWVAR 42
18772: PUSH
18773: LD_INT 4
18775: ST_TO_ADDR
18776: GO 18893
18778: LD_INT 29
18780: DOUBLE
18781: EQUAL
18782: IFTRUE 18786
18784: GO 18797
18786: POP
// bc_type := b_barracks ; 30 :
18787: LD_ADDR_OWVAR 42
18791: PUSH
18792: LD_INT 5
18794: ST_TO_ADDR
18795: GO 18893
18797: LD_INT 30
18799: DOUBLE
18800: EQUAL
18801: IFTRUE 18805
18803: GO 18816
18805: POP
// bc_type := b_solar_power ; 31 :
18806: LD_ADDR_OWVAR 42
18810: PUSH
18811: LD_INT 27
18813: ST_TO_ADDR
18814: GO 18893
18816: LD_INT 31
18818: DOUBLE
18819: EQUAL
18820: IFTRUE 18824
18822: GO 18835
18824: POP
// bc_type := b_oil_power ; 32 :
18825: LD_ADDR_OWVAR 42
18829: PUSH
18830: LD_INT 26
18832: ST_TO_ADDR
18833: GO 18893
18835: LD_INT 32
18837: DOUBLE
18838: EQUAL
18839: IFTRUE 18843
18841: GO 18854
18843: POP
// bc_type := b_siberite_power ; 33 :
18844: LD_ADDR_OWVAR 42
18848: PUSH
18849: LD_INT 28
18851: ST_TO_ADDR
18852: GO 18893
18854: LD_INT 33
18856: DOUBLE
18857: EQUAL
18858: IFTRUE 18862
18860: GO 18873
18862: POP
// bc_type := b_oil_mine ; 34 :
18863: LD_ADDR_OWVAR 42
18867: PUSH
18868: LD_INT 29
18870: ST_TO_ADDR
18871: GO 18893
18873: LD_INT 34
18875: DOUBLE
18876: EQUAL
18877: IFTRUE 18881
18879: GO 18892
18881: POP
// bc_type := b_siberite_mine ; end ;
18882: LD_ADDR_OWVAR 42
18886: PUSH
18887: LD_INT 30
18889: ST_TO_ADDR
18890: GO 18893
18892: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18893: LD_ADDR_VAR 0 8
18897: PUSH
18898: LD_VAR 0 5
18902: PPUSH
18903: LD_VAR 0 6
18907: PPUSH
18908: LD_VAR 0 3
18912: PPUSH
18913: CALL_OW 47
18917: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18918: LD_OWVAR 42
18922: PUSH
18923: LD_INT 32
18925: PUSH
18926: LD_INT 33
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: IN
18933: IFFALSE 18949
// PlaceWeaponTurret ( b , weapon ) ;
18935: LD_VAR 0 8
18939: PPUSH
18940: LD_VAR 0 4
18944: PPUSH
18945: CALL_OW 431
// end ;
18949: LD_VAR 0 7
18953: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18954: LD_INT 0
18956: PPUSH
18957: PPUSH
18958: PPUSH
18959: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18960: LD_ADDR_VAR 0 4
18964: PUSH
18965: LD_INT 22
18967: PUSH
18968: LD_OWVAR 2
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: LD_INT 30
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 30
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PPUSH
19009: CALL_OW 69
19013: ST_TO_ADDR
// if not tmp then
19014: LD_VAR 0 4
19018: NOT
19019: IFFALSE 19023
// exit ;
19021: GO 19082
// for i in tmp do
19023: LD_ADDR_VAR 0 2
19027: PUSH
19028: LD_VAR 0 4
19032: PUSH
19033: FOR_IN
19034: IFFALSE 19080
// for j = 1 to 3 do
19036: LD_ADDR_VAR 0 3
19040: PUSH
19041: DOUBLE
19042: LD_INT 1
19044: DEC
19045: ST_TO_ADDR
19046: LD_INT 3
19048: PUSH
19049: FOR_TO
19050: IFFALSE 19076
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19052: LD_VAR 0 2
19056: PPUSH
19057: CALL_OW 274
19061: PPUSH
19062: LD_VAR 0 3
19066: PPUSH
19067: LD_INT 99999
19069: PPUSH
19070: CALL_OW 277
19074: GO 19049
19076: POP
19077: POP
19078: GO 19033
19080: POP
19081: POP
// end ;
19082: LD_VAR 0 1
19086: RET
// export function hHackSetLevel10 ; var i , j ; begin
19087: LD_INT 0
19089: PPUSH
19090: PPUSH
19091: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19092: LD_ADDR_VAR 0 2
19096: PUSH
19097: LD_INT 21
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PPUSH
19107: CALL_OW 69
19111: PUSH
19112: FOR_IN
19113: IFFALSE 19165
// if IsSelected ( i ) then
19115: LD_VAR 0 2
19119: PPUSH
19120: CALL_OW 306
19124: IFFALSE 19163
// begin for j := 1 to 4 do
19126: LD_ADDR_VAR 0 3
19130: PUSH
19131: DOUBLE
19132: LD_INT 1
19134: DEC
19135: ST_TO_ADDR
19136: LD_INT 4
19138: PUSH
19139: FOR_TO
19140: IFFALSE 19161
// SetSkill ( i , j , 10 ) ;
19142: LD_VAR 0 2
19146: PPUSH
19147: LD_VAR 0 3
19151: PPUSH
19152: LD_INT 10
19154: PPUSH
19155: CALL_OW 237
19159: GO 19139
19161: POP
19162: POP
// end ;
19163: GO 19112
19165: POP
19166: POP
// end ;
19167: LD_VAR 0 1
19171: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19172: LD_INT 0
19174: PPUSH
19175: PPUSH
19176: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19177: LD_ADDR_VAR 0 2
19181: PUSH
19182: LD_INT 22
19184: PUSH
19185: LD_OWVAR 2
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 21
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 69
19212: PUSH
19213: FOR_IN
19214: IFFALSE 19255
// begin for j := 1 to 4 do
19216: LD_ADDR_VAR 0 3
19220: PUSH
19221: DOUBLE
19222: LD_INT 1
19224: DEC
19225: ST_TO_ADDR
19226: LD_INT 4
19228: PUSH
19229: FOR_TO
19230: IFFALSE 19251
// SetSkill ( i , j , 10 ) ;
19232: LD_VAR 0 2
19236: PPUSH
19237: LD_VAR 0 3
19241: PPUSH
19242: LD_INT 10
19244: PPUSH
19245: CALL_OW 237
19249: GO 19229
19251: POP
19252: POP
// end ;
19253: GO 19213
19255: POP
19256: POP
// end ;
19257: LD_VAR 0 1
19261: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19262: LD_INT 0
19264: PPUSH
// uc_side := your_side ;
19265: LD_ADDR_OWVAR 20
19269: PUSH
19270: LD_OWVAR 2
19274: ST_TO_ADDR
// uc_nation := nation ;
19275: LD_ADDR_OWVAR 21
19279: PUSH
19280: LD_VAR 0 1
19284: ST_TO_ADDR
// InitHc ;
19285: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19289: LD_INT 0
19291: PPUSH
19292: LD_VAR 0 2
19296: PPUSH
19297: LD_VAR 0 3
19301: PPUSH
19302: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19306: LD_VAR 0 4
19310: PPUSH
19311: LD_VAR 0 5
19315: PPUSH
19316: CALL_OW 428
19320: PUSH
19321: LD_INT 0
19323: EQUAL
19324: IFFALSE 19348
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19326: CALL_OW 44
19330: PPUSH
19331: LD_VAR 0 4
19335: PPUSH
19336: LD_VAR 0 5
19340: PPUSH
19341: LD_INT 1
19343: PPUSH
19344: CALL_OW 48
// end ;
19348: LD_VAR 0 6
19352: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19353: LD_INT 0
19355: PPUSH
19356: PPUSH
// uc_side := your_side ;
19357: LD_ADDR_OWVAR 20
19361: PUSH
19362: LD_OWVAR 2
19366: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19367: LD_VAR 0 1
19371: PUSH
19372: LD_INT 1
19374: PUSH
19375: LD_INT 2
19377: PUSH
19378: LD_INT 3
19380: PUSH
19381: LD_INT 4
19383: PUSH
19384: LD_INT 5
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: IN
19394: IFFALSE 19406
// uc_nation := nation_american else
19396: LD_ADDR_OWVAR 21
19400: PUSH
19401: LD_INT 1
19403: ST_TO_ADDR
19404: GO 19449
// if chassis in [ 11 , 12 , 13 , 14 ] then
19406: LD_VAR 0 1
19410: PUSH
19411: LD_INT 11
19413: PUSH
19414: LD_INT 12
19416: PUSH
19417: LD_INT 13
19419: PUSH
19420: LD_INT 14
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: IN
19429: IFFALSE 19441
// uc_nation := nation_arabian else
19431: LD_ADDR_OWVAR 21
19435: PUSH
19436: LD_INT 2
19438: ST_TO_ADDR
19439: GO 19449
// uc_nation := nation_russian ;
19441: LD_ADDR_OWVAR 21
19445: PUSH
19446: LD_INT 3
19448: ST_TO_ADDR
// vc_chassis := chassis ;
19449: LD_ADDR_OWVAR 37
19453: PUSH
19454: LD_VAR 0 1
19458: ST_TO_ADDR
// vc_engine := engine ;
19459: LD_ADDR_OWVAR 39
19463: PUSH
19464: LD_VAR 0 2
19468: ST_TO_ADDR
// vc_control := control ;
19469: LD_ADDR_OWVAR 38
19473: PUSH
19474: LD_VAR 0 3
19478: ST_TO_ADDR
// vc_weapon := weapon ;
19479: LD_ADDR_OWVAR 40
19483: PUSH
19484: LD_VAR 0 4
19488: ST_TO_ADDR
// un := CreateVehicle ;
19489: LD_ADDR_VAR 0 8
19493: PUSH
19494: CALL_OW 45
19498: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19499: LD_VAR 0 8
19503: PPUSH
19504: LD_INT 0
19506: PPUSH
19507: LD_INT 5
19509: PPUSH
19510: CALL_OW 12
19514: PPUSH
19515: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19519: LD_VAR 0 8
19523: PPUSH
19524: LD_VAR 0 5
19528: PPUSH
19529: LD_VAR 0 6
19533: PPUSH
19534: LD_INT 1
19536: PPUSH
19537: CALL_OW 48
// end ;
19541: LD_VAR 0 7
19545: RET
// export hInvincible ; every 1 do
19546: GO 19548
19548: DISABLE
// hInvincible := [ ] ;
19549: LD_ADDR_EXP 83
19553: PUSH
19554: EMPTY
19555: ST_TO_ADDR
19556: END
// every 10 do var i ;
19557: GO 19559
19559: DISABLE
19560: LD_INT 0
19562: PPUSH
// begin enable ;
19563: ENABLE
// if not hInvincible then
19564: LD_EXP 83
19568: NOT
19569: IFFALSE 19573
// exit ;
19571: GO 19617
// for i in hInvincible do
19573: LD_ADDR_VAR 0 1
19577: PUSH
19578: LD_EXP 83
19582: PUSH
19583: FOR_IN
19584: IFFALSE 19615
// if GetLives ( i ) < 1000 then
19586: LD_VAR 0 1
19590: PPUSH
19591: CALL_OW 256
19595: PUSH
19596: LD_INT 1000
19598: LESS
19599: IFFALSE 19613
// SetLives ( i , 1000 ) ;
19601: LD_VAR 0 1
19605: PPUSH
19606: LD_INT 1000
19608: PPUSH
19609: CALL_OW 234
19613: GO 19583
19615: POP
19616: POP
// end ;
19617: PPOPN 1
19619: END
// export function hHackInvincible ; var i ; begin
19620: LD_INT 0
19622: PPUSH
19623: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19624: LD_ADDR_VAR 0 2
19628: PUSH
19629: LD_INT 2
19631: PUSH
19632: LD_INT 21
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 21
19644: PUSH
19645: LD_INT 2
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: LIST
19656: PPUSH
19657: CALL_OW 69
19661: PUSH
19662: FOR_IN
19663: IFFALSE 19724
// if IsSelected ( i ) then
19665: LD_VAR 0 2
19669: PPUSH
19670: CALL_OW 306
19674: IFFALSE 19722
// begin if i in hInvincible then
19676: LD_VAR 0 2
19680: PUSH
19681: LD_EXP 83
19685: IN
19686: IFFALSE 19706
// hInvincible := hInvincible diff i else
19688: LD_ADDR_EXP 83
19692: PUSH
19693: LD_EXP 83
19697: PUSH
19698: LD_VAR 0 2
19702: DIFF
19703: ST_TO_ADDR
19704: GO 19722
// hInvincible := hInvincible union i ;
19706: LD_ADDR_EXP 83
19710: PUSH
19711: LD_EXP 83
19715: PUSH
19716: LD_VAR 0 2
19720: UNION
19721: ST_TO_ADDR
// end ;
19722: GO 19662
19724: POP
19725: POP
// end ;
19726: LD_VAR 0 1
19730: RET
// export function hHackInvisible ; var i , j ; begin
19731: LD_INT 0
19733: PPUSH
19734: PPUSH
19735: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19736: LD_ADDR_VAR 0 2
19740: PUSH
19741: LD_INT 21
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PPUSH
19751: CALL_OW 69
19755: PUSH
19756: FOR_IN
19757: IFFALSE 19781
// if IsSelected ( i ) then
19759: LD_VAR 0 2
19763: PPUSH
19764: CALL_OW 306
19768: IFFALSE 19779
// ComForceInvisible ( i ) ;
19770: LD_VAR 0 2
19774: PPUSH
19775: CALL_OW 496
19779: GO 19756
19781: POP
19782: POP
// end ;
19783: LD_VAR 0 1
19787: RET
// export function hHackChangeYourSide ; begin
19788: LD_INT 0
19790: PPUSH
// if your_side = 8 then
19791: LD_OWVAR 2
19795: PUSH
19796: LD_INT 8
19798: EQUAL
19799: IFFALSE 19811
// your_side := 0 else
19801: LD_ADDR_OWVAR 2
19805: PUSH
19806: LD_INT 0
19808: ST_TO_ADDR
19809: GO 19825
// your_side := your_side + 1 ;
19811: LD_ADDR_OWVAR 2
19815: PUSH
19816: LD_OWVAR 2
19820: PUSH
19821: LD_INT 1
19823: PLUS
19824: ST_TO_ADDR
// end ;
19825: LD_VAR 0 1
19829: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19830: LD_INT 0
19832: PPUSH
19833: PPUSH
19834: PPUSH
// for i in all_units do
19835: LD_ADDR_VAR 0 2
19839: PUSH
19840: LD_OWVAR 3
19844: PUSH
19845: FOR_IN
19846: IFFALSE 19924
// if IsSelected ( i ) then
19848: LD_VAR 0 2
19852: PPUSH
19853: CALL_OW 306
19857: IFFALSE 19922
// begin j := GetSide ( i ) ;
19859: LD_ADDR_VAR 0 3
19863: PUSH
19864: LD_VAR 0 2
19868: PPUSH
19869: CALL_OW 255
19873: ST_TO_ADDR
// if j = 8 then
19874: LD_VAR 0 3
19878: PUSH
19879: LD_INT 8
19881: EQUAL
19882: IFFALSE 19894
// j := 0 else
19884: LD_ADDR_VAR 0 3
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
19892: GO 19908
// j := j + 1 ;
19894: LD_ADDR_VAR 0 3
19898: PUSH
19899: LD_VAR 0 3
19903: PUSH
19904: LD_INT 1
19906: PLUS
19907: ST_TO_ADDR
// SetSide ( i , j ) ;
19908: LD_VAR 0 2
19912: PPUSH
19913: LD_VAR 0 3
19917: PPUSH
19918: CALL_OW 235
// end ;
19922: GO 19845
19924: POP
19925: POP
// end ;
19926: LD_VAR 0 1
19930: RET
// export function hHackFog ; begin
19931: LD_INT 0
19933: PPUSH
// FogOff ( true ) ;
19934: LD_INT 1
19936: PPUSH
19937: CALL_OW 344
// end ;
19941: LD_VAR 0 1
19945: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19946: LD_INT 0
19948: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19949: LD_VAR 0 1
19953: PPUSH
19954: LD_VAR 0 2
19958: PPUSH
19959: LD_VAR 0 3
19963: PPUSH
19964: LD_INT 1
19966: PPUSH
19967: LD_INT 1
19969: PPUSH
19970: CALL_OW 483
// CenterOnXY ( x , y ) ;
19974: LD_VAR 0 2
19978: PPUSH
19979: LD_VAR 0 3
19983: PPUSH
19984: CALL_OW 84
// end ;
19988: LD_VAR 0 4
19992: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19993: LD_INT 0
19995: PPUSH
19996: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19997: LD_VAR 0 1
20001: NOT
20002: PUSH
20003: LD_VAR 0 2
20007: PPUSH
20008: LD_VAR 0 3
20012: PPUSH
20013: CALL_OW 488
20017: NOT
20018: OR
20019: PUSH
20020: LD_VAR 0 1
20024: PPUSH
20025: CALL_OW 266
20029: PUSH
20030: LD_INT 3
20032: NONEQUAL
20033: PUSH
20034: LD_VAR 0 1
20038: PPUSH
20039: CALL_OW 247
20043: PUSH
20044: LD_INT 1
20046: EQUAL
20047: NOT
20048: AND
20049: OR
20050: IFFALSE 20054
// exit ;
20052: GO 20336
// if GetType ( factory ) = unit_human then
20054: LD_VAR 0 1
20058: PPUSH
20059: CALL_OW 247
20063: PUSH
20064: LD_INT 1
20066: EQUAL
20067: IFFALSE 20084
// factory := IsInUnit ( factory ) ;
20069: LD_ADDR_VAR 0 1
20073: PUSH
20074: LD_VAR 0 1
20078: PPUSH
20079: CALL_OW 310
20083: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20084: LD_VAR 0 1
20088: PPUSH
20089: CALL_OW 266
20093: PUSH
20094: LD_INT 3
20096: NONEQUAL
20097: IFFALSE 20101
// exit ;
20099: GO 20336
// for i := 1 to Count ( factoryWaypoints ) do
20101: LD_ADDR_VAR 0 5
20105: PUSH
20106: DOUBLE
20107: LD_INT 1
20109: DEC
20110: ST_TO_ADDR
20111: LD_EXP 84
20115: PPUSH
20116: CALL 29061 0 1
20120: PUSH
20121: FOR_TO
20122: IFFALSE 20284
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
20124: LD_VAR 0 2
20128: PPUSH
20129: LD_VAR 0 3
20133: PPUSH
20134: CALL_OW 428
20138: PUSH
20139: LD_EXP 84
20143: PUSH
20144: LD_VAR 0 5
20148: ARRAY
20149: PUSH
20150: LD_INT 2
20152: ARRAY
20153: EQUAL
20154: IFFALSE 20186
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20156: LD_ADDR_EXP 84
20160: PUSH
20161: LD_EXP 84
20165: PPUSH
20166: LD_VAR 0 5
20170: PPUSH
20171: CALL_OW 3
20175: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20176: CALL 20341 0 0
// exit ;
20180: POP
20181: POP
20182: GO 20336
// end else
20184: GO 20282
// if factory = factoryWaypoints [ i ] [ 2 ] then
20186: LD_VAR 0 1
20190: PUSH
20191: LD_EXP 84
20195: PUSH
20196: LD_VAR 0 5
20200: ARRAY
20201: PUSH
20202: LD_INT 2
20204: ARRAY
20205: EQUAL
20206: IFFALSE 20282
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20208: LD_ADDR_EXP 84
20212: PUSH
20213: LD_EXP 84
20217: PPUSH
20218: LD_VAR 0 5
20222: PPUSH
20223: CALL_OW 3
20227: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20228: LD_ADDR_EXP 84
20232: PUSH
20233: LD_EXP 84
20237: PPUSH
20238: LD_VAR 0 1
20242: PPUSH
20243: CALL_OW 255
20247: PUSH
20248: LD_VAR 0 1
20252: PUSH
20253: LD_VAR 0 2
20257: PUSH
20258: LD_VAR 0 3
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: PPUSH
20269: CALL 64670 0 2
20273: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20274: CALL 20341 0 0
// exit ;
20278: POP
20279: POP
20280: GO 20336
// end ; end ;
20282: GO 20121
20284: POP
20285: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20286: LD_ADDR_EXP 84
20290: PUSH
20291: LD_EXP 84
20295: PPUSH
20296: LD_VAR 0 1
20300: PPUSH
20301: CALL_OW 255
20305: PUSH
20306: LD_VAR 0 1
20310: PUSH
20311: LD_VAR 0 2
20315: PUSH
20316: LD_VAR 0 3
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: PPUSH
20327: CALL 64670 0 2
20331: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20332: CALL 20341 0 0
// end ;
20336: LD_VAR 0 4
20340: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20341: LD_INT 0
20343: PPUSH
20344: PPUSH
20345: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20346: LD_STRING resetFactoryWaypoint();
20348: PPUSH
20349: CALL_OW 559
// if factoryWaypoints then
20353: LD_EXP 84
20357: IFFALSE 20478
// begin list := factoryWaypoints ;
20359: LD_ADDR_VAR 0 3
20363: PUSH
20364: LD_EXP 84
20368: ST_TO_ADDR
// for i := 1 to list do
20369: LD_ADDR_VAR 0 2
20373: PUSH
20374: DOUBLE
20375: LD_INT 1
20377: DEC
20378: ST_TO_ADDR
20379: LD_VAR 0 3
20383: PUSH
20384: FOR_TO
20385: IFFALSE 20476
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20387: LD_STRING setFactoryWaypointXY(
20389: PUSH
20390: LD_VAR 0 3
20394: PUSH
20395: LD_VAR 0 2
20399: ARRAY
20400: PUSH
20401: LD_INT 1
20403: ARRAY
20404: STR
20405: PUSH
20406: LD_STRING ,
20408: STR
20409: PUSH
20410: LD_VAR 0 3
20414: PUSH
20415: LD_VAR 0 2
20419: ARRAY
20420: PUSH
20421: LD_INT 2
20423: ARRAY
20424: STR
20425: PUSH
20426: LD_STRING ,
20428: STR
20429: PUSH
20430: LD_VAR 0 3
20434: PUSH
20435: LD_VAR 0 2
20439: ARRAY
20440: PUSH
20441: LD_INT 3
20443: ARRAY
20444: STR
20445: PUSH
20446: LD_STRING ,
20448: STR
20449: PUSH
20450: LD_VAR 0 3
20454: PUSH
20455: LD_VAR 0 2
20459: ARRAY
20460: PUSH
20461: LD_INT 4
20463: ARRAY
20464: STR
20465: PUSH
20466: LD_STRING )
20468: STR
20469: PPUSH
20470: CALL_OW 559
20474: GO 20384
20476: POP
20477: POP
// end ; end ;
20478: LD_VAR 0 1
20482: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20483: LD_INT 0
20485: PPUSH
// if HexInfo ( x , y ) = warehouse then
20486: LD_VAR 0 2
20490: PPUSH
20491: LD_VAR 0 3
20495: PPUSH
20496: CALL_OW 428
20500: PUSH
20501: LD_VAR 0 1
20505: EQUAL
20506: IFFALSE 20533
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20508: LD_ADDR_EXP 85
20512: PUSH
20513: LD_EXP 85
20517: PPUSH
20518: LD_VAR 0 1
20522: PPUSH
20523: LD_INT 0
20525: PPUSH
20526: CALL_OW 1
20530: ST_TO_ADDR
20531: GO 20584
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20533: LD_ADDR_EXP 85
20537: PUSH
20538: LD_EXP 85
20542: PPUSH
20543: LD_VAR 0 1
20547: PPUSH
20548: LD_VAR 0 1
20552: PPUSH
20553: CALL_OW 255
20557: PUSH
20558: LD_VAR 0 1
20562: PUSH
20563: LD_VAR 0 2
20567: PUSH
20568: LD_VAR 0 3
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 1
20583: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20584: CALL 20593 0 0
// end ;
20588: LD_VAR 0 4
20592: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20593: LD_INT 0
20595: PPUSH
20596: PPUSH
20597: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20598: LD_STRING resetWarehouseGatheringPoints();
20600: PPUSH
20601: CALL_OW 559
// if warehouseGatheringPoints then
20605: LD_EXP 85
20609: IFFALSE 20735
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20611: LD_ADDR_VAR 0 3
20615: PUSH
20616: LD_EXP 85
20620: PPUSH
20621: CALL 68432 0 1
20625: ST_TO_ADDR
// for i := 1 to list do
20626: LD_ADDR_VAR 0 2
20630: PUSH
20631: DOUBLE
20632: LD_INT 1
20634: DEC
20635: ST_TO_ADDR
20636: LD_VAR 0 3
20640: PUSH
20641: FOR_TO
20642: IFFALSE 20733
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20644: LD_STRING setWarehouseGatheringPointXY(
20646: PUSH
20647: LD_VAR 0 3
20651: PUSH
20652: LD_VAR 0 2
20656: ARRAY
20657: PUSH
20658: LD_INT 1
20660: ARRAY
20661: STR
20662: PUSH
20663: LD_STRING ,
20665: STR
20666: PUSH
20667: LD_VAR 0 3
20671: PUSH
20672: LD_VAR 0 2
20676: ARRAY
20677: PUSH
20678: LD_INT 2
20680: ARRAY
20681: STR
20682: PUSH
20683: LD_STRING ,
20685: STR
20686: PUSH
20687: LD_VAR 0 3
20691: PUSH
20692: LD_VAR 0 2
20696: ARRAY
20697: PUSH
20698: LD_INT 3
20700: ARRAY
20701: STR
20702: PUSH
20703: LD_STRING ,
20705: STR
20706: PUSH
20707: LD_VAR 0 3
20711: PUSH
20712: LD_VAR 0 2
20716: ARRAY
20717: PUSH
20718: LD_INT 4
20720: ARRAY
20721: STR
20722: PUSH
20723: LD_STRING )
20725: STR
20726: PPUSH
20727: CALL_OW 559
20731: GO 20641
20733: POP
20734: POP
// end ; end ;
20735: LD_VAR 0 1
20739: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20740: LD_EXP 85
20744: IFFALSE 21429
20746: GO 20748
20748: DISABLE
20749: LD_INT 0
20751: PPUSH
20752: PPUSH
20753: PPUSH
20754: PPUSH
20755: PPUSH
20756: PPUSH
20757: PPUSH
20758: PPUSH
20759: PPUSH
// begin enable ;
20760: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20761: LD_ADDR_VAR 0 3
20765: PUSH
20766: LD_EXP 85
20770: PPUSH
20771: CALL 68432 0 1
20775: ST_TO_ADDR
// if not list then
20776: LD_VAR 0 3
20780: NOT
20781: IFFALSE 20785
// exit ;
20783: GO 21429
// for i := 1 to list do
20785: LD_ADDR_VAR 0 1
20789: PUSH
20790: DOUBLE
20791: LD_INT 1
20793: DEC
20794: ST_TO_ADDR
20795: LD_VAR 0 3
20799: PUSH
20800: FOR_TO
20801: IFFALSE 21427
// begin depot := list [ i ] [ 2 ] ;
20803: LD_ADDR_VAR 0 8
20807: PUSH
20808: LD_VAR 0 3
20812: PUSH
20813: LD_VAR 0 1
20817: ARRAY
20818: PUSH
20819: LD_INT 2
20821: ARRAY
20822: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20823: LD_ADDR_VAR 0 5
20827: PUSH
20828: LD_VAR 0 3
20832: PUSH
20833: LD_VAR 0 1
20837: ARRAY
20838: PUSH
20839: LD_INT 1
20841: ARRAY
20842: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20843: LD_VAR 0 8
20847: PPUSH
20848: CALL_OW 301
20852: PUSH
20853: LD_VAR 0 5
20857: PUSH
20858: LD_VAR 0 8
20862: PPUSH
20863: CALL_OW 255
20867: NONEQUAL
20868: OR
20869: IFFALSE 20898
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20871: LD_ADDR_EXP 85
20875: PUSH
20876: LD_EXP 85
20880: PPUSH
20881: LD_VAR 0 8
20885: PPUSH
20886: LD_INT 0
20888: PPUSH
20889: CALL_OW 1
20893: ST_TO_ADDR
// exit ;
20894: POP
20895: POP
20896: GO 21429
// end ; x := list [ i ] [ 3 ] ;
20898: LD_ADDR_VAR 0 6
20902: PUSH
20903: LD_VAR 0 3
20907: PUSH
20908: LD_VAR 0 1
20912: ARRAY
20913: PUSH
20914: LD_INT 3
20916: ARRAY
20917: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20918: LD_ADDR_VAR 0 7
20922: PUSH
20923: LD_VAR 0 3
20927: PUSH
20928: LD_VAR 0 1
20932: ARRAY
20933: PUSH
20934: LD_INT 4
20936: ARRAY
20937: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20938: LD_ADDR_VAR 0 9
20942: PUSH
20943: LD_VAR 0 6
20947: PPUSH
20948: LD_VAR 0 7
20952: PPUSH
20953: LD_INT 16
20955: PPUSH
20956: CALL 67016 0 3
20960: ST_TO_ADDR
// if not cratesNearbyPoint then
20961: LD_VAR 0 9
20965: NOT
20966: IFFALSE 20972
// exit ;
20968: POP
20969: POP
20970: GO 21429
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20972: LD_ADDR_VAR 0 4
20976: PUSH
20977: LD_INT 22
20979: PUSH
20980: LD_VAR 0 5
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 3
20991: PUSH
20992: LD_INT 60
20994: PUSH
20995: EMPTY
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 91
21004: PUSH
21005: LD_VAR 0 8
21009: PUSH
21010: LD_INT 6
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 2
21020: PUSH
21021: LD_INT 25
21023: PUSH
21024: LD_INT 2
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 25
21033: PUSH
21034: LD_INT 16
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: LIST
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: PPUSH
21052: CALL_OW 69
21056: PUSH
21057: LD_VAR 0 8
21061: PPUSH
21062: CALL_OW 313
21066: PPUSH
21067: LD_INT 3
21069: PUSH
21070: LD_INT 60
21072: PUSH
21073: EMPTY
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 2
21082: PUSH
21083: LD_INT 25
21085: PUSH
21086: LD_INT 2
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 25
21095: PUSH
21096: LD_INT 16
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: LIST
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PPUSH
21112: CALL_OW 72
21116: UNION
21117: ST_TO_ADDR
// if tmp then
21118: LD_VAR 0 4
21122: IFFALSE 21202
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21124: LD_ADDR_VAR 0 4
21128: PUSH
21129: LD_VAR 0 4
21133: PPUSH
21134: LD_INT 3
21136: PPUSH
21137: CALL 64985 0 2
21141: ST_TO_ADDR
// for j in tmp do
21142: LD_ADDR_VAR 0 2
21146: PUSH
21147: LD_VAR 0 4
21151: PUSH
21152: FOR_IN
21153: IFFALSE 21196
// begin if IsInUnit ( j ) then
21155: LD_VAR 0 2
21159: PPUSH
21160: CALL_OW 310
21164: IFFALSE 21175
// ComExit ( j ) ;
21166: LD_VAR 0 2
21170: PPUSH
21171: CALL 65068 0 1
// AddComCollect ( j , x , y ) ;
21175: LD_VAR 0 2
21179: PPUSH
21180: LD_VAR 0 6
21184: PPUSH
21185: LD_VAR 0 7
21189: PPUSH
21190: CALL_OW 177
// end ;
21194: GO 21152
21196: POP
21197: POP
// exit ;
21198: POP
21199: POP
21200: GO 21429
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21202: LD_ADDR_VAR 0 4
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_VAR 0 5
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 91
21221: PUSH
21222: LD_VAR 0 8
21226: PUSH
21227: LD_INT 8
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 2
21237: PUSH
21238: LD_INT 34
21240: PUSH
21241: LD_INT 12
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 34
21250: PUSH
21251: LD_INT 51
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 34
21260: PUSH
21261: LD_INT 32
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 34
21270: PUSH
21271: LD_INT 89
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: LIST
21289: PPUSH
21290: CALL_OW 69
21294: ST_TO_ADDR
// if tmp then
21295: LD_VAR 0 4
21299: IFFALSE 21425
// begin for j in tmp do
21301: LD_ADDR_VAR 0 2
21305: PUSH
21306: LD_VAR 0 4
21310: PUSH
21311: FOR_IN
21312: IFFALSE 21423
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21314: LD_VAR 0 2
21318: PPUSH
21319: CALL_OW 262
21323: PUSH
21324: LD_INT 3
21326: EQUAL
21327: PUSH
21328: LD_VAR 0 2
21332: PPUSH
21333: CALL_OW 261
21337: PUSH
21338: LD_INT 20
21340: GREATER
21341: OR
21342: PUSH
21343: LD_VAR 0 2
21347: PPUSH
21348: CALL_OW 314
21352: NOT
21353: AND
21354: PUSH
21355: LD_VAR 0 2
21359: PPUSH
21360: CALL_OW 263
21364: PUSH
21365: LD_INT 1
21367: NONEQUAL
21368: PUSH
21369: LD_VAR 0 2
21373: PPUSH
21374: CALL_OW 311
21378: OR
21379: AND
21380: IFFALSE 21421
// begin ComCollect ( j , x , y ) ;
21382: LD_VAR 0 2
21386: PPUSH
21387: LD_VAR 0 6
21391: PPUSH
21392: LD_VAR 0 7
21396: PPUSH
21397: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_VAR 0 8
21410: PPUSH
21411: CALL_OW 172
// exit ;
21415: POP
21416: POP
21417: POP
21418: POP
21419: GO 21429
// end ;
21421: GO 21311
21423: POP
21424: POP
// end ; end ;
21425: GO 20800
21427: POP
21428: POP
// end ; end_of_file
21429: PPOPN 9
21431: END
// export function SOS_UnitDestroyed ( un ) ; begin
21432: LD_INT 0
21434: PPUSH
// ComRadiation ( un ) ;
21435: LD_VAR 0 1
21439: PPUSH
21440: CALL 22421 0 1
// end ;
21444: LD_VAR 0 2
21448: RET
// export function SOS_UnitKamikazed ( un ) ; begin
21449: LD_INT 0
21451: PPUSH
// ComRadiation ( un ) ;
21452: LD_VAR 0 1
21456: PPUSH
21457: CALL 22421 0 1
// end ;
21461: LD_VAR 0 2
21465: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21466: LD_INT 0
21468: PPUSH
// end ;
21469: LD_VAR 0 4
21473: RET
// export function SOS_Command ( cmd ) ; begin
21474: LD_INT 0
21476: PPUSH
// end ;
21477: LD_VAR 0 2
21481: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21482: LD_INT 0
21484: PPUSH
// end ;
21485: LD_VAR 0 6
21489: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
21490: LD_INT 0
21492: PPUSH
21493: PPUSH
21494: PPUSH
21495: PPUSH
21496: PPUSH
// if not vehicle or not factory then
21497: LD_VAR 0 1
21501: NOT
21502: PUSH
21503: LD_VAR 0 2
21507: NOT
21508: OR
21509: IFFALSE 21513
// exit ;
21511: GO 22012
// if not factoryWaypoints then
21513: LD_EXP 84
21517: NOT
21518: IFFALSE 21522
// exit ;
21520: GO 22012
// for i := 1 to Count ( factoryWaypoints ) do
21522: LD_ADDR_VAR 0 4
21526: PUSH
21527: DOUBLE
21528: LD_INT 1
21530: DEC
21531: ST_TO_ADDR
21532: LD_EXP 84
21536: PPUSH
21537: CALL 29061 0 1
21541: PUSH
21542: FOR_TO
21543: IFFALSE 22010
// if factoryWaypoints [ i ] [ 2 ] = factory then
21545: LD_EXP 84
21549: PUSH
21550: LD_VAR 0 4
21554: ARRAY
21555: PUSH
21556: LD_INT 2
21558: ARRAY
21559: PUSH
21560: LD_VAR 0 2
21564: EQUAL
21565: IFFALSE 22008
// begin if GetControl ( vehicle ) = control_manual then
21567: LD_VAR 0 1
21571: PPUSH
21572: CALL_OW 263
21576: PUSH
21577: LD_INT 1
21579: EQUAL
21580: IFFALSE 21891
// begin driver := IsDrivenBy ( vehicle ) ;
21582: LD_ADDR_VAR 0 6
21586: PUSH
21587: LD_VAR 0 1
21591: PPUSH
21592: CALL_OW 311
21596: ST_TO_ADDR
// tag := GetTag ( driver ) ;
21597: LD_ADDR_VAR 0 5
21601: PUSH
21602: LD_VAR 0 6
21606: PPUSH
21607: CALL_OW 110
21611: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
21612: LD_VAR 0 5
21616: PUSH
21617: LD_INT 501
21619: EQUAL
21620: PUSH
21621: LD_VAR 0 1
21625: PPUSH
21626: CALL_OW 110
21630: PUSH
21631: LD_INT 501
21633: EQUAL
21634: OR
21635: IFFALSE 21641
// exit ;
21637: POP
21638: POP
21639: GO 22012
// if not HasTask ( driver ) then
21641: LD_VAR 0 6
21645: PPUSH
21646: CALL_OW 314
21650: NOT
21651: IFFALSE 21889
// begin SetTag ( driver , tDriver ) ;
21653: LD_VAR 0 6
21657: PPUSH
21658: LD_INT 501
21660: PPUSH
21661: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
21665: LD_VAR 0 1
21669: PPUSH
21670: LD_INT 501
21672: PPUSH
21673: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21677: LD_ADDR_VAR 0 7
21681: PUSH
21682: LD_EXP 84
21686: PUSH
21687: LD_VAR 0 4
21691: ARRAY
21692: PUSH
21693: LD_INT 3
21695: ARRAY
21696: PPUSH
21697: LD_EXP 84
21701: PUSH
21702: LD_VAR 0 4
21706: ARRAY
21707: PUSH
21708: LD_INT 4
21710: ARRAY
21711: PPUSH
21712: CALL_OW 428
21716: ST_TO_ADDR
// if hex then
21717: LD_VAR 0 7
21721: IFFALSE 21739
// ComMoveUnit ( driver , hex ) else
21723: LD_VAR 0 6
21727: PPUSH
21728: LD_VAR 0 7
21732: PPUSH
21733: CALL_OW 112
21737: GO 21778
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21739: LD_VAR 0 6
21743: PPUSH
21744: LD_EXP 84
21748: PUSH
21749: LD_VAR 0 4
21753: ARRAY
21754: PUSH
21755: LD_INT 3
21757: ARRAY
21758: PPUSH
21759: LD_EXP 84
21763: PUSH
21764: LD_VAR 0 4
21768: ARRAY
21769: PUSH
21770: LD_INT 4
21772: ARRAY
21773: PPUSH
21774: CALL_OW 111
// AddComExitVehicle ( driver ) ;
21778: LD_VAR 0 6
21782: PPUSH
21783: CALL_OW 181
// if Multiplayer then
21787: LD_OWVAR 4
21791: IFFALSE 21840
// begin repeat wait ( 10 ) ;
21793: LD_INT 10
21795: PPUSH
21796: CALL_OW 67
// until not IsInUnit ( driver ) ;
21800: LD_VAR 0 6
21804: PPUSH
21805: CALL_OW 310
21809: NOT
21810: IFFALSE 21793
// if not HasTask ( driver ) then
21812: LD_VAR 0 6
21816: PPUSH
21817: CALL_OW 314
21821: NOT
21822: IFFALSE 21838
// ComEnterUnit ( driver , factory ) ;
21824: LD_VAR 0 6
21828: PPUSH
21829: LD_VAR 0 2
21833: PPUSH
21834: CALL_OW 120
// end else
21838: GO 21854
// AddComEnterUnit ( driver , factory ) ;
21840: LD_VAR 0 6
21844: PPUSH
21845: LD_VAR 0 2
21849: PPUSH
21850: CALL_OW 180
// wait ( 0 0$1 ) ;
21854: LD_INT 35
21856: PPUSH
21857: CALL_OW 67
// SetTag ( driver , tag ) ;
21861: LD_VAR 0 6
21865: PPUSH
21866: LD_VAR 0 5
21870: PPUSH
21871: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
21875: LD_VAR 0 1
21879: PPUSH
21880: LD_INT 0
21882: PPUSH
21883: CALL_OW 109
// break ;
21887: GO 22010
// end ; end else
21889: GO 22008
// if GetControl ( vehicle ) = control_remote then
21891: LD_VAR 0 1
21895: PPUSH
21896: CALL_OW 263
21900: PUSH
21901: LD_INT 2
21903: EQUAL
21904: IFFALSE 21967
// begin wait ( 0 0$2 ) ;
21906: LD_INT 70
21908: PPUSH
21909: CALL_OW 67
// if Connect ( vehicle ) then
21913: LD_VAR 0 1
21917: PPUSH
21918: CALL 35267 0 1
21922: IFFALSE 21963
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21924: LD_VAR 0 1
21928: PPUSH
21929: LD_EXP 84
21933: PUSH
21934: LD_VAR 0 4
21938: ARRAY
21939: PUSH
21940: LD_INT 3
21942: ARRAY
21943: PPUSH
21944: LD_EXP 84
21948: PUSH
21949: LD_VAR 0 4
21953: ARRAY
21954: PUSH
21955: LD_INT 4
21957: ARRAY
21958: PPUSH
21959: CALL_OW 171
// break ;
21963: GO 22010
// end else
21965: GO 22008
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21967: LD_VAR 0 1
21971: PPUSH
21972: LD_EXP 84
21976: PUSH
21977: LD_VAR 0 4
21981: ARRAY
21982: PUSH
21983: LD_INT 3
21985: ARRAY
21986: PPUSH
21987: LD_EXP 84
21991: PUSH
21992: LD_VAR 0 4
21996: ARRAY
21997: PUSH
21998: LD_INT 4
22000: ARRAY
22001: PPUSH
22002: CALL_OW 171
// break ;
22006: GO 22010
// end ; end ;
22008: GO 21542
22010: POP
22011: POP
// end ;
22012: LD_VAR 0 3
22016: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22017: LD_INT 0
22019: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22020: LD_VAR 0 1
22024: PUSH
22025: LD_INT 250
22027: EQUAL
22028: PUSH
22029: LD_VAR 0 2
22033: PPUSH
22034: CALL_OW 264
22038: PUSH
22039: LD_INT 81
22041: EQUAL
22042: AND
22043: IFFALSE 22064
// MinerPlaceMine ( unit , x , y ) ;
22045: LD_VAR 0 2
22049: PPUSH
22050: LD_VAR 0 4
22054: PPUSH
22055: LD_VAR 0 5
22059: PPUSH
22060: CALL 25156 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22064: LD_VAR 0 1
22068: PUSH
22069: LD_INT 251
22071: EQUAL
22072: PUSH
22073: LD_VAR 0 2
22077: PPUSH
22078: CALL_OW 264
22082: PUSH
22083: LD_INT 81
22085: EQUAL
22086: AND
22087: IFFALSE 22108
// MinerDetonateMine ( unit , x , y ) ;
22089: LD_VAR 0 2
22093: PPUSH
22094: LD_VAR 0 4
22098: PPUSH
22099: LD_VAR 0 5
22103: PPUSH
22104: CALL 25431 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22108: LD_VAR 0 1
22112: PUSH
22113: LD_INT 252
22115: EQUAL
22116: PUSH
22117: LD_VAR 0 2
22121: PPUSH
22122: CALL_OW 264
22126: PUSH
22127: LD_INT 81
22129: EQUAL
22130: AND
22131: IFFALSE 22152
// MinerCreateMinefield ( unit , x , y ) ;
22133: LD_VAR 0 2
22137: PPUSH
22138: LD_VAR 0 4
22142: PPUSH
22143: LD_VAR 0 5
22147: PPUSH
22148: CALL 25848 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22152: LD_VAR 0 1
22156: PUSH
22157: LD_INT 253
22159: EQUAL
22160: PUSH
22161: LD_VAR 0 2
22165: PPUSH
22166: CALL_OW 257
22170: PUSH
22171: LD_INT 5
22173: EQUAL
22174: AND
22175: IFFALSE 22196
// ComBinocular ( unit , x , y ) ;
22177: LD_VAR 0 2
22181: PPUSH
22182: LD_VAR 0 4
22186: PPUSH
22187: LD_VAR 0 5
22191: PPUSH
22192: CALL 26217 0 3
// if selectedUnit then
22196: LD_VAR 0 3
22200: IFFALSE 22256
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22202: LD_VAR 0 1
22206: PUSH
22207: LD_INT 254
22209: EQUAL
22210: PUSH
22211: LD_VAR 0 2
22215: PPUSH
22216: CALL_OW 264
22220: PUSH
22221: LD_INT 99
22223: EQUAL
22224: AND
22225: PUSH
22226: LD_VAR 0 3
22230: PPUSH
22231: CALL_OW 263
22235: PUSH
22236: LD_INT 3
22238: EQUAL
22239: AND
22240: IFFALSE 22256
// HackDestroyVehicle ( unit , selectedUnit ) ;
22242: LD_VAR 0 2
22246: PPUSH
22247: LD_VAR 0 3
22251: PPUSH
22252: CALL 24520 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22256: LD_VAR 0 1
22260: PUSH
22261: LD_INT 255
22263: EQUAL
22264: PUSH
22265: LD_VAR 0 2
22269: PPUSH
22270: CALL_OW 264
22274: PUSH
22275: LD_INT 14
22277: PUSH
22278: LD_INT 53
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: IN
22285: AND
22286: PUSH
22287: LD_VAR 0 4
22291: PPUSH
22292: LD_VAR 0 5
22296: PPUSH
22297: CALL_OW 488
22301: AND
22302: IFFALSE 22326
// CutTreeXYR ( unit , x , y , 12 ) ;
22304: LD_VAR 0 2
22308: PPUSH
22309: LD_VAR 0 4
22313: PPUSH
22314: LD_VAR 0 5
22318: PPUSH
22319: LD_INT 12
22321: PPUSH
22322: CALL 22517 0 4
// if cmd = 256 then
22326: LD_VAR 0 1
22330: PUSH
22331: LD_INT 256
22333: EQUAL
22334: IFFALSE 22355
// SetFactoryWaypoint ( unit , x , y ) ;
22336: LD_VAR 0 2
22340: PPUSH
22341: LD_VAR 0 4
22345: PPUSH
22346: LD_VAR 0 5
22350: PPUSH
22351: CALL 19993 0 3
// if cmd = 257 then
22355: LD_VAR 0 1
22359: PUSH
22360: LD_INT 257
22362: EQUAL
22363: IFFALSE 22384
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22365: LD_VAR 0 2
22369: PPUSH
22370: LD_VAR 0 4
22374: PPUSH
22375: LD_VAR 0 5
22379: PPUSH
22380: CALL 20483 0 3
// if cmd = 258 then
22384: LD_VAR 0 1
22388: PUSH
22389: LD_INT 258
22391: EQUAL
22392: IFFALSE 22416
// BurnTreeXYR ( unit , x , y , 8 ) ;
22394: LD_VAR 0 2
22398: PPUSH
22399: LD_VAR 0 4
22403: PPUSH
22404: LD_VAR 0 5
22408: PPUSH
22409: LD_INT 8
22411: PPUSH
22412: CALL 22911 0 4
// end ;
22416: LD_VAR 0 6
22420: RET
// export function ComRadiation ( un ) ; var eff ; begin
22421: LD_INT 0
22423: PPUSH
22424: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
22425: LD_VAR 0 1
22429: PPUSH
22430: CALL_OW 264
22434: PUSH
22435: LD_INT 91
22437: NONEQUAL
22438: IFFALSE 22442
// exit ;
22440: GO 22512
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22442: LD_INT 68
22444: PPUSH
22445: LD_VAR 0 1
22449: PPUSH
22450: CALL_OW 255
22454: PPUSH
22455: CALL_OW 321
22459: PUSH
22460: LD_INT 2
22462: EQUAL
22463: IFFALSE 22475
// eff := 70 else
22465: LD_ADDR_VAR 0 3
22469: PUSH
22470: LD_INT 70
22472: ST_TO_ADDR
22473: GO 22483
// eff := 30 ;
22475: LD_ADDR_VAR 0 3
22479: PUSH
22480: LD_INT 30
22482: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22483: LD_VAR 0 1
22487: PPUSH
22488: CALL_OW 250
22492: PPUSH
22493: LD_VAR 0 1
22497: PPUSH
22498: CALL_OW 251
22502: PPUSH
22503: LD_VAR 0 3
22507: PPUSH
22508: CALL_OW 495
// end ;
22512: LD_VAR 0 2
22516: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22517: LD_INT 0
22519: PPUSH
22520: PPUSH
22521: PPUSH
22522: PPUSH
22523: PPUSH
22524: PPUSH
22525: PPUSH
22526: PPUSH
22527: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22528: LD_VAR 0 1
22532: PPUSH
22533: CALL_OW 302
22537: NOT
22538: PUSH
22539: LD_VAR 0 2
22543: PPUSH
22544: LD_VAR 0 3
22548: PPUSH
22549: CALL_OW 488
22553: NOT
22554: OR
22555: PUSH
22556: LD_VAR 0 4
22560: NOT
22561: OR
22562: IFFALSE 22566
// exit ;
22564: GO 22906
// list := [ ] ;
22566: LD_ADDR_VAR 0 13
22570: PUSH
22571: EMPTY
22572: ST_TO_ADDR
// if x - r < 0 then
22573: LD_VAR 0 2
22577: PUSH
22578: LD_VAR 0 4
22582: MINUS
22583: PUSH
22584: LD_INT 0
22586: LESS
22587: IFFALSE 22599
// min_x := 0 else
22589: LD_ADDR_VAR 0 7
22593: PUSH
22594: LD_INT 0
22596: ST_TO_ADDR
22597: GO 22615
// min_x := x - r ;
22599: LD_ADDR_VAR 0 7
22603: PUSH
22604: LD_VAR 0 2
22608: PUSH
22609: LD_VAR 0 4
22613: MINUS
22614: ST_TO_ADDR
// if y - r < 0 then
22615: LD_VAR 0 3
22619: PUSH
22620: LD_VAR 0 4
22624: MINUS
22625: PUSH
22626: LD_INT 0
22628: LESS
22629: IFFALSE 22641
// min_y := 0 else
22631: LD_ADDR_VAR 0 8
22635: PUSH
22636: LD_INT 0
22638: ST_TO_ADDR
22639: GO 22657
// min_y := y - r ;
22641: LD_ADDR_VAR 0 8
22645: PUSH
22646: LD_VAR 0 3
22650: PUSH
22651: LD_VAR 0 4
22655: MINUS
22656: ST_TO_ADDR
// max_x := x + r ;
22657: LD_ADDR_VAR 0 9
22661: PUSH
22662: LD_VAR 0 2
22666: PUSH
22667: LD_VAR 0 4
22671: PLUS
22672: ST_TO_ADDR
// max_y := y + r ;
22673: LD_ADDR_VAR 0 10
22677: PUSH
22678: LD_VAR 0 3
22682: PUSH
22683: LD_VAR 0 4
22687: PLUS
22688: ST_TO_ADDR
// for _x = min_x to max_x do
22689: LD_ADDR_VAR 0 11
22693: PUSH
22694: DOUBLE
22695: LD_VAR 0 7
22699: DEC
22700: ST_TO_ADDR
22701: LD_VAR 0 9
22705: PUSH
22706: FOR_TO
22707: IFFALSE 22824
// for _y = min_y to max_y do
22709: LD_ADDR_VAR 0 12
22713: PUSH
22714: DOUBLE
22715: LD_VAR 0 8
22719: DEC
22720: ST_TO_ADDR
22721: LD_VAR 0 10
22725: PUSH
22726: FOR_TO
22727: IFFALSE 22820
// begin if not ValidHex ( _x , _y ) then
22729: LD_VAR 0 11
22733: PPUSH
22734: LD_VAR 0 12
22738: PPUSH
22739: CALL_OW 488
22743: NOT
22744: IFFALSE 22748
// continue ;
22746: GO 22726
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22748: LD_VAR 0 11
22752: PPUSH
22753: LD_VAR 0 12
22757: PPUSH
22758: CALL_OW 351
22762: PUSH
22763: LD_VAR 0 11
22767: PPUSH
22768: LD_VAR 0 12
22772: PPUSH
22773: CALL_OW 554
22777: AND
22778: IFFALSE 22818
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22780: LD_ADDR_VAR 0 13
22784: PUSH
22785: LD_VAR 0 13
22789: PPUSH
22790: LD_VAR 0 13
22794: PUSH
22795: LD_INT 1
22797: PLUS
22798: PPUSH
22799: LD_VAR 0 11
22803: PUSH
22804: LD_VAR 0 12
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PPUSH
22813: CALL_OW 2
22817: ST_TO_ADDR
// end ;
22818: GO 22726
22820: POP
22821: POP
22822: GO 22706
22824: POP
22825: POP
// if not list then
22826: LD_VAR 0 13
22830: NOT
22831: IFFALSE 22835
// exit ;
22833: GO 22906
// for i in list do
22835: LD_ADDR_VAR 0 6
22839: PUSH
22840: LD_VAR 0 13
22844: PUSH
22845: FOR_IN
22846: IFFALSE 22904
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22848: LD_VAR 0 1
22852: PPUSH
22853: LD_STRING M
22855: PUSH
22856: LD_VAR 0 6
22860: PUSH
22861: LD_INT 1
22863: ARRAY
22864: PUSH
22865: LD_VAR 0 6
22869: PUSH
22870: LD_INT 2
22872: ARRAY
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: LD_INT 0
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: PUSH
22895: EMPTY
22896: LIST
22897: PPUSH
22898: CALL_OW 447
22902: GO 22845
22904: POP
22905: POP
// end ;
22906: LD_VAR 0 5
22910: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22911: LD_INT 0
22913: PPUSH
22914: PPUSH
22915: PPUSH
22916: PPUSH
22917: PPUSH
22918: PPUSH
22919: PPUSH
22920: PPUSH
22921: PPUSH
22922: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22923: LD_VAR 0 1
22927: PPUSH
22928: CALL_OW 302
22932: NOT
22933: PUSH
22934: LD_VAR 0 2
22938: PPUSH
22939: LD_VAR 0 3
22943: PPUSH
22944: CALL_OW 488
22948: NOT
22949: OR
22950: PUSH
22951: LD_VAR 0 4
22955: NOT
22956: OR
22957: IFFALSE 22961
// exit ;
22959: GO 23474
// list := [ ] ;
22961: LD_ADDR_VAR 0 13
22965: PUSH
22966: EMPTY
22967: ST_TO_ADDR
// if x - r < 0 then
22968: LD_VAR 0 2
22972: PUSH
22973: LD_VAR 0 4
22977: MINUS
22978: PUSH
22979: LD_INT 0
22981: LESS
22982: IFFALSE 22994
// min_x := 0 else
22984: LD_ADDR_VAR 0 7
22988: PUSH
22989: LD_INT 0
22991: ST_TO_ADDR
22992: GO 23010
// min_x := x - r ;
22994: LD_ADDR_VAR 0 7
22998: PUSH
22999: LD_VAR 0 2
23003: PUSH
23004: LD_VAR 0 4
23008: MINUS
23009: ST_TO_ADDR
// if y - r < 0 then
23010: LD_VAR 0 3
23014: PUSH
23015: LD_VAR 0 4
23019: MINUS
23020: PUSH
23021: LD_INT 0
23023: LESS
23024: IFFALSE 23036
// min_y := 0 else
23026: LD_ADDR_VAR 0 8
23030: PUSH
23031: LD_INT 0
23033: ST_TO_ADDR
23034: GO 23052
// min_y := y - r ;
23036: LD_ADDR_VAR 0 8
23040: PUSH
23041: LD_VAR 0 3
23045: PUSH
23046: LD_VAR 0 4
23050: MINUS
23051: ST_TO_ADDR
// max_x := x + r ;
23052: LD_ADDR_VAR 0 9
23056: PUSH
23057: LD_VAR 0 2
23061: PUSH
23062: LD_VAR 0 4
23066: PLUS
23067: ST_TO_ADDR
// max_y := y + r ;
23068: LD_ADDR_VAR 0 10
23072: PUSH
23073: LD_VAR 0 3
23077: PUSH
23078: LD_VAR 0 4
23082: PLUS
23083: ST_TO_ADDR
// for _x = min_x to max_x do
23084: LD_ADDR_VAR 0 11
23088: PUSH
23089: DOUBLE
23090: LD_VAR 0 7
23094: DEC
23095: ST_TO_ADDR
23096: LD_VAR 0 9
23100: PUSH
23101: FOR_TO
23102: IFFALSE 23219
// for _y = min_y to max_y do
23104: LD_ADDR_VAR 0 12
23108: PUSH
23109: DOUBLE
23110: LD_VAR 0 8
23114: DEC
23115: ST_TO_ADDR
23116: LD_VAR 0 10
23120: PUSH
23121: FOR_TO
23122: IFFALSE 23215
// begin if not ValidHex ( _x , _y ) then
23124: LD_VAR 0 11
23128: PPUSH
23129: LD_VAR 0 12
23133: PPUSH
23134: CALL_OW 488
23138: NOT
23139: IFFALSE 23143
// continue ;
23141: GO 23121
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23143: LD_VAR 0 11
23147: PPUSH
23148: LD_VAR 0 12
23152: PPUSH
23153: CALL_OW 351
23157: PUSH
23158: LD_VAR 0 11
23162: PPUSH
23163: LD_VAR 0 12
23167: PPUSH
23168: CALL_OW 554
23172: AND
23173: IFFALSE 23213
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23175: LD_ADDR_VAR 0 13
23179: PUSH
23180: LD_VAR 0 13
23184: PPUSH
23185: LD_VAR 0 13
23189: PUSH
23190: LD_INT 1
23192: PLUS
23193: PPUSH
23194: LD_VAR 0 11
23198: PUSH
23199: LD_VAR 0 12
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PPUSH
23208: CALL_OW 2
23212: ST_TO_ADDR
// end ;
23213: GO 23121
23215: POP
23216: POP
23217: GO 23101
23219: POP
23220: POP
// if not list then
23221: LD_VAR 0 13
23225: NOT
23226: IFFALSE 23230
// exit ;
23228: GO 23474
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23230: LD_ADDR_VAR 0 13
23234: PUSH
23235: LD_VAR 0 1
23239: PPUSH
23240: LD_VAR 0 13
23244: PPUSH
23245: LD_INT 1
23247: PPUSH
23248: LD_INT 1
23250: PPUSH
23251: CALL 32409 0 4
23255: ST_TO_ADDR
// ComStop ( flame ) ;
23256: LD_VAR 0 1
23260: PPUSH
23261: CALL_OW 141
// for i in list do
23265: LD_ADDR_VAR 0 6
23269: PUSH
23270: LD_VAR 0 13
23274: PUSH
23275: FOR_IN
23276: IFFALSE 23307
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23278: LD_VAR 0 1
23282: PPUSH
23283: LD_VAR 0 6
23287: PUSH
23288: LD_INT 1
23290: ARRAY
23291: PPUSH
23292: LD_VAR 0 6
23296: PUSH
23297: LD_INT 2
23299: ARRAY
23300: PPUSH
23301: CALL_OW 176
23305: GO 23275
23307: POP
23308: POP
// repeat wait ( 0 0$1 ) ;
23309: LD_INT 35
23311: PPUSH
23312: CALL_OW 67
// task := GetTaskList ( flame ) ;
23316: LD_ADDR_VAR 0 14
23320: PUSH
23321: LD_VAR 0 1
23325: PPUSH
23326: CALL_OW 437
23330: ST_TO_ADDR
// if not task then
23331: LD_VAR 0 14
23335: NOT
23336: IFFALSE 23340
// exit ;
23338: GO 23474
// if task [ 1 ] [ 1 ] <> | then
23340: LD_VAR 0 14
23344: PUSH
23345: LD_INT 1
23347: ARRAY
23348: PUSH
23349: LD_INT 1
23351: ARRAY
23352: PUSH
23353: LD_STRING |
23355: NONEQUAL
23356: IFFALSE 23360
// exit ;
23358: GO 23474
// _x := task [ 1 ] [ 2 ] ;
23360: LD_ADDR_VAR 0 11
23364: PUSH
23365: LD_VAR 0 14
23369: PUSH
23370: LD_INT 1
23372: ARRAY
23373: PUSH
23374: LD_INT 2
23376: ARRAY
23377: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23378: LD_ADDR_VAR 0 12
23382: PUSH
23383: LD_VAR 0 14
23387: PUSH
23388: LD_INT 1
23390: ARRAY
23391: PUSH
23392: LD_INT 3
23394: ARRAY
23395: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23396: LD_VAR 0 11
23400: PPUSH
23401: LD_VAR 0 12
23405: PPUSH
23406: CALL_OW 351
23410: NOT
23411: PUSH
23412: LD_VAR 0 11
23416: PPUSH
23417: LD_VAR 0 12
23421: PPUSH
23422: CALL_OW 554
23426: NOT
23427: OR
23428: IFFALSE 23462
// begin task := Delete ( task , 1 ) ;
23430: LD_ADDR_VAR 0 14
23434: PUSH
23435: LD_VAR 0 14
23439: PPUSH
23440: LD_INT 1
23442: PPUSH
23443: CALL_OW 3
23447: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23448: LD_VAR 0 1
23452: PPUSH
23453: LD_VAR 0 14
23457: PPUSH
23458: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23462: LD_VAR 0 1
23466: PPUSH
23467: CALL_OW 314
23471: NOT
23472: IFFALSE 23309
// end ;
23474: LD_VAR 0 5
23478: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23479: LD_EXP 87
23483: NOT
23484: IFFALSE 23534
23486: GO 23488
23488: DISABLE
// begin initHack := true ;
23489: LD_ADDR_EXP 87
23493: PUSH
23494: LD_INT 1
23496: ST_TO_ADDR
// hackTanks := [ ] ;
23497: LD_ADDR_EXP 88
23501: PUSH
23502: EMPTY
23503: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23504: LD_ADDR_EXP 89
23508: PUSH
23509: EMPTY
23510: ST_TO_ADDR
// hackLimit := 3 ;
23511: LD_ADDR_EXP 90
23515: PUSH
23516: LD_INT 3
23518: ST_TO_ADDR
// hackDist := 12 ;
23519: LD_ADDR_EXP 91
23523: PUSH
23524: LD_INT 12
23526: ST_TO_ADDR
// hackCounter := [ ] ;
23527: LD_ADDR_EXP 92
23531: PUSH
23532: EMPTY
23533: ST_TO_ADDR
// end ;
23534: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23535: LD_EXP 87
23539: PUSH
23540: LD_INT 34
23542: PUSH
23543: LD_INT 99
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PPUSH
23550: CALL_OW 69
23554: AND
23555: IFFALSE 23808
23557: GO 23559
23559: DISABLE
23560: LD_INT 0
23562: PPUSH
23563: PPUSH
// begin enable ;
23564: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23565: LD_ADDR_VAR 0 1
23569: PUSH
23570: LD_INT 34
23572: PUSH
23573: LD_INT 99
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PPUSH
23580: CALL_OW 69
23584: PUSH
23585: FOR_IN
23586: IFFALSE 23806
// begin if not i in hackTanks then
23588: LD_VAR 0 1
23592: PUSH
23593: LD_EXP 88
23597: IN
23598: NOT
23599: IFFALSE 23682
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23601: LD_ADDR_EXP 88
23605: PUSH
23606: LD_EXP 88
23610: PPUSH
23611: LD_EXP 88
23615: PUSH
23616: LD_INT 1
23618: PLUS
23619: PPUSH
23620: LD_VAR 0 1
23624: PPUSH
23625: CALL_OW 1
23629: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23630: LD_ADDR_EXP 89
23634: PUSH
23635: LD_EXP 89
23639: PPUSH
23640: LD_EXP 89
23644: PUSH
23645: LD_INT 1
23647: PLUS
23648: PPUSH
23649: EMPTY
23650: PPUSH
23651: CALL_OW 1
23655: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23656: LD_ADDR_EXP 92
23660: PUSH
23661: LD_EXP 92
23665: PPUSH
23666: LD_EXP 92
23670: PUSH
23671: LD_INT 1
23673: PLUS
23674: PPUSH
23675: EMPTY
23676: PPUSH
23677: CALL_OW 1
23681: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23682: LD_VAR 0 1
23686: PPUSH
23687: CALL_OW 302
23691: NOT
23692: IFFALSE 23705
// begin HackUnlinkAll ( i ) ;
23694: LD_VAR 0 1
23698: PPUSH
23699: CALL 23811 0 1
// continue ;
23703: GO 23585
// end ; HackCheckCapturedStatus ( i ) ;
23705: LD_VAR 0 1
23709: PPUSH
23710: CALL 24254 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23714: LD_ADDR_VAR 0 2
23718: PUSH
23719: LD_INT 81
23721: PUSH
23722: LD_VAR 0 1
23726: PPUSH
23727: CALL_OW 255
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 33
23738: PUSH
23739: LD_INT 3
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 91
23748: PUSH
23749: LD_VAR 0 1
23753: PUSH
23754: LD_EXP 91
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 50
23766: PUSH
23767: EMPTY
23768: LIST
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: PPUSH
23776: CALL_OW 69
23780: ST_TO_ADDR
// if not tmp then
23781: LD_VAR 0 2
23785: NOT
23786: IFFALSE 23790
// continue ;
23788: GO 23585
// HackLink ( i , tmp ) ;
23790: LD_VAR 0 1
23794: PPUSH
23795: LD_VAR 0 2
23799: PPUSH
23800: CALL 23947 0 2
// end ;
23804: GO 23585
23806: POP
23807: POP
// end ;
23808: PPOPN 2
23810: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23811: LD_INT 0
23813: PPUSH
23814: PPUSH
23815: PPUSH
// if not hack in hackTanks then
23816: LD_VAR 0 1
23820: PUSH
23821: LD_EXP 88
23825: IN
23826: NOT
23827: IFFALSE 23831
// exit ;
23829: GO 23942
// index := GetElementIndex ( hackTanks , hack ) ;
23831: LD_ADDR_VAR 0 4
23835: PUSH
23836: LD_EXP 88
23840: PPUSH
23841: LD_VAR 0 1
23845: PPUSH
23846: CALL 31706 0 2
23850: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23851: LD_EXP 89
23855: PUSH
23856: LD_VAR 0 4
23860: ARRAY
23861: IFFALSE 23942
// begin for i in hackTanksCaptured [ index ] do
23863: LD_ADDR_VAR 0 3
23867: PUSH
23868: LD_EXP 89
23872: PUSH
23873: LD_VAR 0 4
23877: ARRAY
23878: PUSH
23879: FOR_IN
23880: IFFALSE 23906
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23882: LD_VAR 0 3
23886: PUSH
23887: LD_INT 1
23889: ARRAY
23890: PPUSH
23891: LD_VAR 0 3
23895: PUSH
23896: LD_INT 2
23898: ARRAY
23899: PPUSH
23900: CALL_OW 235
23904: GO 23879
23906: POP
23907: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23908: LD_ADDR_EXP 89
23912: PUSH
23913: LD_EXP 89
23917: PPUSH
23918: LD_VAR 0 4
23922: PPUSH
23923: EMPTY
23924: PPUSH
23925: CALL_OW 1
23929: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23930: LD_VAR 0 1
23934: PPUSH
23935: LD_INT 0
23937: PPUSH
23938: CALL_OW 505
// end ; end ;
23942: LD_VAR 0 2
23946: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23947: LD_INT 0
23949: PPUSH
23950: PPUSH
23951: PPUSH
// if not hack in hackTanks or not vehicles then
23952: LD_VAR 0 1
23956: PUSH
23957: LD_EXP 88
23961: IN
23962: NOT
23963: PUSH
23964: LD_VAR 0 2
23968: NOT
23969: OR
23970: IFFALSE 23974
// exit ;
23972: GO 24249
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23974: LD_ADDR_VAR 0 2
23978: PUSH
23979: LD_VAR 0 1
23983: PPUSH
23984: LD_VAR 0 2
23988: PPUSH
23989: LD_INT 1
23991: PPUSH
23992: LD_INT 1
23994: PPUSH
23995: CALL 32356 0 4
23999: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24000: LD_ADDR_VAR 0 5
24004: PUSH
24005: LD_EXP 88
24009: PPUSH
24010: LD_VAR 0 1
24014: PPUSH
24015: CALL 31706 0 2
24019: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24020: LD_EXP 89
24024: PUSH
24025: LD_VAR 0 5
24029: ARRAY
24030: PUSH
24031: LD_EXP 90
24035: LESS
24036: IFFALSE 24225
// begin for i := 1 to vehicles do
24038: LD_ADDR_VAR 0 4
24042: PUSH
24043: DOUBLE
24044: LD_INT 1
24046: DEC
24047: ST_TO_ADDR
24048: LD_VAR 0 2
24052: PUSH
24053: FOR_TO
24054: IFFALSE 24223
// begin if hackTanksCaptured [ index ] = hackLimit then
24056: LD_EXP 89
24060: PUSH
24061: LD_VAR 0 5
24065: ARRAY
24066: PUSH
24067: LD_EXP 90
24071: EQUAL
24072: IFFALSE 24076
// break ;
24074: GO 24223
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24076: LD_ADDR_EXP 92
24080: PUSH
24081: LD_EXP 92
24085: PPUSH
24086: LD_VAR 0 5
24090: PPUSH
24091: LD_EXP 92
24095: PUSH
24096: LD_VAR 0 5
24100: ARRAY
24101: PUSH
24102: LD_INT 1
24104: PLUS
24105: PPUSH
24106: CALL_OW 1
24110: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24111: LD_ADDR_EXP 89
24115: PUSH
24116: LD_EXP 89
24120: PPUSH
24121: LD_VAR 0 5
24125: PUSH
24126: LD_EXP 89
24130: PUSH
24131: LD_VAR 0 5
24135: ARRAY
24136: PUSH
24137: LD_INT 1
24139: PLUS
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PPUSH
24145: LD_VAR 0 2
24149: PUSH
24150: LD_VAR 0 4
24154: ARRAY
24155: PUSH
24156: LD_VAR 0 2
24160: PUSH
24161: LD_VAR 0 4
24165: ARRAY
24166: PPUSH
24167: CALL_OW 255
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PPUSH
24176: CALL 31921 0 3
24180: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24181: LD_VAR 0 2
24185: PUSH
24186: LD_VAR 0 4
24190: ARRAY
24191: PPUSH
24192: LD_VAR 0 1
24196: PPUSH
24197: CALL_OW 255
24201: PPUSH
24202: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24206: LD_VAR 0 2
24210: PUSH
24211: LD_VAR 0 4
24215: ARRAY
24216: PPUSH
24217: CALL_OW 141
// end ;
24221: GO 24053
24223: POP
24224: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24225: LD_VAR 0 1
24229: PPUSH
24230: LD_EXP 89
24234: PUSH
24235: LD_VAR 0 5
24239: ARRAY
24240: PUSH
24241: LD_INT 0
24243: PLUS
24244: PPUSH
24245: CALL_OW 505
// end ;
24249: LD_VAR 0 3
24253: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24254: LD_INT 0
24256: PPUSH
24257: PPUSH
24258: PPUSH
24259: PPUSH
// if not hack in hackTanks then
24260: LD_VAR 0 1
24264: PUSH
24265: LD_EXP 88
24269: IN
24270: NOT
24271: IFFALSE 24275
// exit ;
24273: GO 24515
// index := GetElementIndex ( hackTanks , hack ) ;
24275: LD_ADDR_VAR 0 4
24279: PUSH
24280: LD_EXP 88
24284: PPUSH
24285: LD_VAR 0 1
24289: PPUSH
24290: CALL 31706 0 2
24294: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24295: LD_ADDR_VAR 0 3
24299: PUSH
24300: DOUBLE
24301: LD_EXP 89
24305: PUSH
24306: LD_VAR 0 4
24310: ARRAY
24311: INC
24312: ST_TO_ADDR
24313: LD_INT 1
24315: PUSH
24316: FOR_DOWNTO
24317: IFFALSE 24489
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24319: LD_ADDR_VAR 0 5
24323: PUSH
24324: LD_EXP 89
24328: PUSH
24329: LD_VAR 0 4
24333: ARRAY
24334: PUSH
24335: LD_VAR 0 3
24339: ARRAY
24340: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24341: LD_VAR 0 5
24345: PUSH
24346: LD_INT 1
24348: ARRAY
24349: PPUSH
24350: CALL_OW 302
24354: NOT
24355: PUSH
24356: LD_VAR 0 5
24360: PUSH
24361: LD_INT 1
24363: ARRAY
24364: PPUSH
24365: CALL_OW 255
24369: PUSH
24370: LD_VAR 0 1
24374: PPUSH
24375: CALL_OW 255
24379: NONEQUAL
24380: OR
24381: IFFALSE 24487
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24383: LD_VAR 0 5
24387: PUSH
24388: LD_INT 1
24390: ARRAY
24391: PPUSH
24392: CALL_OW 305
24396: PUSH
24397: LD_VAR 0 5
24401: PUSH
24402: LD_INT 1
24404: ARRAY
24405: PPUSH
24406: CALL_OW 255
24410: PUSH
24411: LD_VAR 0 1
24415: PPUSH
24416: CALL_OW 255
24420: EQUAL
24421: AND
24422: IFFALSE 24446
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24424: LD_VAR 0 5
24428: PUSH
24429: LD_INT 1
24431: ARRAY
24432: PPUSH
24433: LD_VAR 0 5
24437: PUSH
24438: LD_INT 2
24440: ARRAY
24441: PPUSH
24442: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24446: LD_ADDR_EXP 89
24450: PUSH
24451: LD_EXP 89
24455: PPUSH
24456: LD_VAR 0 4
24460: PPUSH
24461: LD_EXP 89
24465: PUSH
24466: LD_VAR 0 4
24470: ARRAY
24471: PPUSH
24472: LD_VAR 0 3
24476: PPUSH
24477: CALL_OW 3
24481: PPUSH
24482: CALL_OW 1
24486: ST_TO_ADDR
// end ; end ;
24487: GO 24316
24489: POP
24490: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24491: LD_VAR 0 1
24495: PPUSH
24496: LD_EXP 89
24500: PUSH
24501: LD_VAR 0 4
24505: ARRAY
24506: PUSH
24507: LD_INT 0
24509: PLUS
24510: PPUSH
24511: CALL_OW 505
// end ;
24515: LD_VAR 0 2
24519: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24520: LD_INT 0
24522: PPUSH
24523: PPUSH
24524: PPUSH
24525: PPUSH
// if not hack in hackTanks then
24526: LD_VAR 0 1
24530: PUSH
24531: LD_EXP 88
24535: IN
24536: NOT
24537: IFFALSE 24541
// exit ;
24539: GO 24626
// index := GetElementIndex ( hackTanks , hack ) ;
24541: LD_ADDR_VAR 0 5
24545: PUSH
24546: LD_EXP 88
24550: PPUSH
24551: LD_VAR 0 1
24555: PPUSH
24556: CALL 31706 0 2
24560: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24561: LD_ADDR_VAR 0 4
24565: PUSH
24566: DOUBLE
24567: LD_INT 1
24569: DEC
24570: ST_TO_ADDR
24571: LD_EXP 89
24575: PUSH
24576: LD_VAR 0 5
24580: ARRAY
24581: PUSH
24582: FOR_TO
24583: IFFALSE 24624
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24585: LD_EXP 89
24589: PUSH
24590: LD_VAR 0 5
24594: ARRAY
24595: PUSH
24596: LD_VAR 0 4
24600: ARRAY
24601: PUSH
24602: LD_INT 1
24604: ARRAY
24605: PUSH
24606: LD_VAR 0 2
24610: EQUAL
24611: IFFALSE 24622
// KillUnit ( vehicle ) ;
24613: LD_VAR 0 2
24617: PPUSH
24618: CALL_OW 66
24622: GO 24582
24624: POP
24625: POP
// end ;
24626: LD_VAR 0 3
24630: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24631: LD_EXP 93
24635: NOT
24636: IFFALSE 24671
24638: GO 24640
24640: DISABLE
// begin initMiner := true ;
24641: LD_ADDR_EXP 93
24645: PUSH
24646: LD_INT 1
24648: ST_TO_ADDR
// minersList := [ ] ;
24649: LD_ADDR_EXP 94
24653: PUSH
24654: EMPTY
24655: ST_TO_ADDR
// minerMinesList := [ ] ;
24656: LD_ADDR_EXP 95
24660: PUSH
24661: EMPTY
24662: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24663: LD_ADDR_EXP 96
24667: PUSH
24668: LD_INT 5
24670: ST_TO_ADDR
// end ;
24671: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24672: LD_EXP 93
24676: PUSH
24677: LD_INT 34
24679: PUSH
24680: LD_INT 81
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PPUSH
24687: CALL_OW 69
24691: AND
24692: IFFALSE 25153
24694: GO 24696
24696: DISABLE
24697: LD_INT 0
24699: PPUSH
24700: PPUSH
24701: PPUSH
24702: PPUSH
// begin enable ;
24703: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24704: LD_ADDR_VAR 0 1
24708: PUSH
24709: LD_INT 34
24711: PUSH
24712: LD_INT 81
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PPUSH
24719: CALL_OW 69
24723: PUSH
24724: FOR_IN
24725: IFFALSE 24797
// begin if not i in minersList then
24727: LD_VAR 0 1
24731: PUSH
24732: LD_EXP 94
24736: IN
24737: NOT
24738: IFFALSE 24795
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24740: LD_ADDR_EXP 94
24744: PUSH
24745: LD_EXP 94
24749: PPUSH
24750: LD_EXP 94
24754: PUSH
24755: LD_INT 1
24757: PLUS
24758: PPUSH
24759: LD_VAR 0 1
24763: PPUSH
24764: CALL_OW 1
24768: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24769: LD_ADDR_EXP 95
24773: PUSH
24774: LD_EXP 95
24778: PPUSH
24779: LD_EXP 95
24783: PUSH
24784: LD_INT 1
24786: PLUS
24787: PPUSH
24788: EMPTY
24789: PPUSH
24790: CALL_OW 1
24794: ST_TO_ADDR
// end end ;
24795: GO 24724
24797: POP
24798: POP
// for i := minerMinesList downto 1 do
24799: LD_ADDR_VAR 0 1
24803: PUSH
24804: DOUBLE
24805: LD_EXP 95
24809: INC
24810: ST_TO_ADDR
24811: LD_INT 1
24813: PUSH
24814: FOR_DOWNTO
24815: IFFALSE 25151
// begin if IsLive ( minersList [ i ] ) then
24817: LD_EXP 94
24821: PUSH
24822: LD_VAR 0 1
24826: ARRAY
24827: PPUSH
24828: CALL_OW 300
24832: IFFALSE 24860
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24834: LD_EXP 94
24838: PUSH
24839: LD_VAR 0 1
24843: ARRAY
24844: PPUSH
24845: LD_EXP 95
24849: PUSH
24850: LD_VAR 0 1
24854: ARRAY
24855: PPUSH
24856: CALL_OW 505
// if not minerMinesList [ i ] then
24860: LD_EXP 95
24864: PUSH
24865: LD_VAR 0 1
24869: ARRAY
24870: NOT
24871: IFFALSE 24875
// continue ;
24873: GO 24814
// for j := minerMinesList [ i ] downto 1 do
24875: LD_ADDR_VAR 0 2
24879: PUSH
24880: DOUBLE
24881: LD_EXP 95
24885: PUSH
24886: LD_VAR 0 1
24890: ARRAY
24891: INC
24892: ST_TO_ADDR
24893: LD_INT 1
24895: PUSH
24896: FOR_DOWNTO
24897: IFFALSE 25147
// begin side := GetSide ( minersList [ i ] ) ;
24899: LD_ADDR_VAR 0 3
24903: PUSH
24904: LD_EXP 94
24908: PUSH
24909: LD_VAR 0 1
24913: ARRAY
24914: PPUSH
24915: CALL_OW 255
24919: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24920: LD_ADDR_VAR 0 4
24924: PUSH
24925: LD_EXP 95
24929: PUSH
24930: LD_VAR 0 1
24934: ARRAY
24935: PUSH
24936: LD_VAR 0 2
24940: ARRAY
24941: PUSH
24942: LD_INT 1
24944: ARRAY
24945: PPUSH
24946: LD_EXP 95
24950: PUSH
24951: LD_VAR 0 1
24955: ARRAY
24956: PUSH
24957: LD_VAR 0 2
24961: ARRAY
24962: PUSH
24963: LD_INT 2
24965: ARRAY
24966: PPUSH
24967: CALL_OW 428
24971: ST_TO_ADDR
// if not tmp then
24972: LD_VAR 0 4
24976: NOT
24977: IFFALSE 24981
// continue ;
24979: GO 24896
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24981: LD_VAR 0 4
24985: PUSH
24986: LD_INT 81
24988: PUSH
24989: LD_VAR 0 3
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PPUSH
24998: CALL_OW 69
25002: IN
25003: PUSH
25004: LD_EXP 95
25008: PUSH
25009: LD_VAR 0 1
25013: ARRAY
25014: PUSH
25015: LD_VAR 0 2
25019: ARRAY
25020: PUSH
25021: LD_INT 1
25023: ARRAY
25024: PPUSH
25025: LD_EXP 95
25029: PUSH
25030: LD_VAR 0 1
25034: ARRAY
25035: PUSH
25036: LD_VAR 0 2
25040: ARRAY
25041: PUSH
25042: LD_INT 2
25044: ARRAY
25045: PPUSH
25046: CALL_OW 458
25050: AND
25051: IFFALSE 25145
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25053: LD_EXP 95
25057: PUSH
25058: LD_VAR 0 1
25062: ARRAY
25063: PUSH
25064: LD_VAR 0 2
25068: ARRAY
25069: PUSH
25070: LD_INT 1
25072: ARRAY
25073: PPUSH
25074: LD_EXP 95
25078: PUSH
25079: LD_VAR 0 1
25083: ARRAY
25084: PUSH
25085: LD_VAR 0 2
25089: ARRAY
25090: PUSH
25091: LD_INT 2
25093: ARRAY
25094: PPUSH
25095: LD_VAR 0 3
25099: PPUSH
25100: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25104: LD_ADDR_EXP 95
25108: PUSH
25109: LD_EXP 95
25113: PPUSH
25114: LD_VAR 0 1
25118: PPUSH
25119: LD_EXP 95
25123: PUSH
25124: LD_VAR 0 1
25128: ARRAY
25129: PPUSH
25130: LD_VAR 0 2
25134: PPUSH
25135: CALL_OW 3
25139: PPUSH
25140: CALL_OW 1
25144: ST_TO_ADDR
// end ; end ;
25145: GO 24896
25147: POP
25148: POP
// end ;
25149: GO 24814
25151: POP
25152: POP
// end ;
25153: PPOPN 4
25155: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25156: LD_INT 0
25158: PPUSH
25159: PPUSH
// result := false ;
25160: LD_ADDR_VAR 0 4
25164: PUSH
25165: LD_INT 0
25167: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25168: LD_VAR 0 1
25172: PPUSH
25173: CALL_OW 264
25177: PUSH
25178: LD_INT 81
25180: EQUAL
25181: NOT
25182: IFFALSE 25186
// exit ;
25184: GO 25426
// index := GetElementIndex ( minersList , unit ) ;
25186: LD_ADDR_VAR 0 5
25190: PUSH
25191: LD_EXP 94
25195: PPUSH
25196: LD_VAR 0 1
25200: PPUSH
25201: CALL 31706 0 2
25205: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25206: LD_EXP 95
25210: PUSH
25211: LD_VAR 0 5
25215: ARRAY
25216: PUSH
25217: LD_EXP 96
25221: GREATEREQUAL
25222: IFFALSE 25226
// exit ;
25224: GO 25426
// ComMoveXY ( unit , x , y ) ;
25226: LD_VAR 0 1
25230: PPUSH
25231: LD_VAR 0 2
25235: PPUSH
25236: LD_VAR 0 3
25240: PPUSH
25241: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25245: LD_INT 35
25247: PPUSH
25248: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25252: LD_VAR 0 1
25256: PPUSH
25257: LD_VAR 0 2
25261: PPUSH
25262: LD_VAR 0 3
25266: PPUSH
25267: CALL 63467 0 3
25271: NOT
25272: PUSH
25273: LD_VAR 0 1
25277: PPUSH
25278: CALL_OW 314
25282: AND
25283: IFFALSE 25287
// exit ;
25285: GO 25426
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25287: LD_VAR 0 2
25291: PPUSH
25292: LD_VAR 0 3
25296: PPUSH
25297: CALL_OW 428
25301: PUSH
25302: LD_VAR 0 1
25306: EQUAL
25307: PUSH
25308: LD_VAR 0 1
25312: PPUSH
25313: CALL_OW 314
25317: NOT
25318: AND
25319: IFFALSE 25245
// PlaySoundXY ( x , y , PlantMine ) ;
25321: LD_VAR 0 2
25325: PPUSH
25326: LD_VAR 0 3
25330: PPUSH
25331: LD_STRING PlantMine
25333: PPUSH
25334: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25338: LD_VAR 0 2
25342: PPUSH
25343: LD_VAR 0 3
25347: PPUSH
25348: LD_VAR 0 1
25352: PPUSH
25353: CALL_OW 255
25357: PPUSH
25358: LD_INT 0
25360: PPUSH
25361: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25365: LD_ADDR_EXP 95
25369: PUSH
25370: LD_EXP 95
25374: PPUSH
25375: LD_VAR 0 5
25379: PUSH
25380: LD_EXP 95
25384: PUSH
25385: LD_VAR 0 5
25389: ARRAY
25390: PUSH
25391: LD_INT 1
25393: PLUS
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PPUSH
25399: LD_VAR 0 2
25403: PUSH
25404: LD_VAR 0 3
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PPUSH
25413: CALL 31921 0 3
25417: ST_TO_ADDR
// result := true ;
25418: LD_ADDR_VAR 0 4
25422: PUSH
25423: LD_INT 1
25425: ST_TO_ADDR
// end ;
25426: LD_VAR 0 4
25430: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25431: LD_INT 0
25433: PPUSH
25434: PPUSH
25435: PPUSH
// if not unit in minersList then
25436: LD_VAR 0 1
25440: PUSH
25441: LD_EXP 94
25445: IN
25446: NOT
25447: IFFALSE 25451
// exit ;
25449: GO 25843
// index := GetElementIndex ( minersList , unit ) ;
25451: LD_ADDR_VAR 0 6
25455: PUSH
25456: LD_EXP 94
25460: PPUSH
25461: LD_VAR 0 1
25465: PPUSH
25466: CALL 31706 0 2
25470: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25471: LD_ADDR_VAR 0 5
25475: PUSH
25476: DOUBLE
25477: LD_EXP 95
25481: PUSH
25482: LD_VAR 0 6
25486: ARRAY
25487: INC
25488: ST_TO_ADDR
25489: LD_INT 1
25491: PUSH
25492: FOR_DOWNTO
25493: IFFALSE 25654
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25495: LD_EXP 95
25499: PUSH
25500: LD_VAR 0 6
25504: ARRAY
25505: PUSH
25506: LD_VAR 0 5
25510: ARRAY
25511: PUSH
25512: LD_INT 1
25514: ARRAY
25515: PUSH
25516: LD_VAR 0 2
25520: EQUAL
25521: PUSH
25522: LD_EXP 95
25526: PUSH
25527: LD_VAR 0 6
25531: ARRAY
25532: PUSH
25533: LD_VAR 0 5
25537: ARRAY
25538: PUSH
25539: LD_INT 2
25541: ARRAY
25542: PUSH
25543: LD_VAR 0 3
25547: EQUAL
25548: AND
25549: IFFALSE 25652
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25551: LD_EXP 95
25555: PUSH
25556: LD_VAR 0 6
25560: ARRAY
25561: PUSH
25562: LD_VAR 0 5
25566: ARRAY
25567: PUSH
25568: LD_INT 1
25570: ARRAY
25571: PPUSH
25572: LD_EXP 95
25576: PUSH
25577: LD_VAR 0 6
25581: ARRAY
25582: PUSH
25583: LD_VAR 0 5
25587: ARRAY
25588: PUSH
25589: LD_INT 2
25591: ARRAY
25592: PPUSH
25593: LD_VAR 0 1
25597: PPUSH
25598: CALL_OW 255
25602: PPUSH
25603: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25607: LD_ADDR_EXP 95
25611: PUSH
25612: LD_EXP 95
25616: PPUSH
25617: LD_VAR 0 6
25621: PPUSH
25622: LD_EXP 95
25626: PUSH
25627: LD_VAR 0 6
25631: ARRAY
25632: PPUSH
25633: LD_VAR 0 5
25637: PPUSH
25638: CALL_OW 3
25642: PPUSH
25643: CALL_OW 1
25647: ST_TO_ADDR
// exit ;
25648: POP
25649: POP
25650: GO 25843
// end ; end ;
25652: GO 25492
25654: POP
25655: POP
// for i := minerMinesList [ index ] downto 1 do
25656: LD_ADDR_VAR 0 5
25660: PUSH
25661: DOUBLE
25662: LD_EXP 95
25666: PUSH
25667: LD_VAR 0 6
25671: ARRAY
25672: INC
25673: ST_TO_ADDR
25674: LD_INT 1
25676: PUSH
25677: FOR_DOWNTO
25678: IFFALSE 25841
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25680: LD_EXP 95
25684: PUSH
25685: LD_VAR 0 6
25689: ARRAY
25690: PUSH
25691: LD_VAR 0 5
25695: ARRAY
25696: PUSH
25697: LD_INT 1
25699: ARRAY
25700: PPUSH
25701: LD_EXP 95
25705: PUSH
25706: LD_VAR 0 6
25710: ARRAY
25711: PUSH
25712: LD_VAR 0 5
25716: ARRAY
25717: PUSH
25718: LD_INT 2
25720: ARRAY
25721: PPUSH
25722: LD_VAR 0 2
25726: PPUSH
25727: LD_VAR 0 3
25731: PPUSH
25732: CALL_OW 298
25736: PUSH
25737: LD_INT 6
25739: LESS
25740: IFFALSE 25839
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25742: LD_EXP 95
25746: PUSH
25747: LD_VAR 0 6
25751: ARRAY
25752: PUSH
25753: LD_VAR 0 5
25757: ARRAY
25758: PUSH
25759: LD_INT 1
25761: ARRAY
25762: PPUSH
25763: LD_EXP 95
25767: PUSH
25768: LD_VAR 0 6
25772: ARRAY
25773: PUSH
25774: LD_VAR 0 5
25778: ARRAY
25779: PUSH
25780: LD_INT 2
25782: ARRAY
25783: PPUSH
25784: LD_VAR 0 1
25788: PPUSH
25789: CALL_OW 255
25793: PPUSH
25794: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25798: LD_ADDR_EXP 95
25802: PUSH
25803: LD_EXP 95
25807: PPUSH
25808: LD_VAR 0 6
25812: PPUSH
25813: LD_EXP 95
25817: PUSH
25818: LD_VAR 0 6
25822: ARRAY
25823: PPUSH
25824: LD_VAR 0 5
25828: PPUSH
25829: CALL_OW 3
25833: PPUSH
25834: CALL_OW 1
25838: ST_TO_ADDR
// end ; end ;
25839: GO 25677
25841: POP
25842: POP
// end ;
25843: LD_VAR 0 4
25847: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25848: LD_INT 0
25850: PPUSH
25851: PPUSH
25852: PPUSH
25853: PPUSH
25854: PPUSH
25855: PPUSH
25856: PPUSH
25857: PPUSH
25858: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25859: LD_VAR 0 1
25863: PPUSH
25864: CALL_OW 264
25868: PUSH
25869: LD_INT 81
25871: EQUAL
25872: NOT
25873: PUSH
25874: LD_VAR 0 1
25878: PUSH
25879: LD_EXP 94
25883: IN
25884: NOT
25885: OR
25886: IFFALSE 25890
// exit ;
25888: GO 26212
// index := GetElementIndex ( minersList , unit ) ;
25890: LD_ADDR_VAR 0 6
25894: PUSH
25895: LD_EXP 94
25899: PPUSH
25900: LD_VAR 0 1
25904: PPUSH
25905: CALL 31706 0 2
25909: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25910: LD_ADDR_VAR 0 8
25914: PUSH
25915: LD_EXP 96
25919: PUSH
25920: LD_EXP 95
25924: PUSH
25925: LD_VAR 0 6
25929: ARRAY
25930: MINUS
25931: ST_TO_ADDR
// if not minesFreeAmount then
25932: LD_VAR 0 8
25936: NOT
25937: IFFALSE 25941
// exit ;
25939: GO 26212
// tmp := [ ] ;
25941: LD_ADDR_VAR 0 7
25945: PUSH
25946: EMPTY
25947: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25948: LD_ADDR_VAR 0 5
25952: PUSH
25953: DOUBLE
25954: LD_INT 1
25956: DEC
25957: ST_TO_ADDR
25958: LD_VAR 0 8
25962: PUSH
25963: FOR_TO
25964: IFFALSE 26159
// begin _d := rand ( 0 , 5 ) ;
25966: LD_ADDR_VAR 0 11
25970: PUSH
25971: LD_INT 0
25973: PPUSH
25974: LD_INT 5
25976: PPUSH
25977: CALL_OW 12
25981: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25982: LD_ADDR_VAR 0 12
25986: PUSH
25987: LD_INT 2
25989: PPUSH
25990: LD_INT 6
25992: PPUSH
25993: CALL_OW 12
25997: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25998: LD_ADDR_VAR 0 9
26002: PUSH
26003: LD_VAR 0 2
26007: PPUSH
26008: LD_VAR 0 11
26012: PPUSH
26013: LD_VAR 0 12
26017: PPUSH
26018: CALL_OW 272
26022: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26023: LD_ADDR_VAR 0 10
26027: PUSH
26028: LD_VAR 0 3
26032: PPUSH
26033: LD_VAR 0 11
26037: PPUSH
26038: LD_VAR 0 12
26042: PPUSH
26043: CALL_OW 273
26047: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26048: LD_VAR 0 9
26052: PPUSH
26053: LD_VAR 0 10
26057: PPUSH
26058: CALL_OW 488
26062: PUSH
26063: LD_VAR 0 9
26067: PUSH
26068: LD_VAR 0 10
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_VAR 0 7
26081: IN
26082: NOT
26083: AND
26084: PUSH
26085: LD_VAR 0 9
26089: PPUSH
26090: LD_VAR 0 10
26094: PPUSH
26095: CALL_OW 458
26099: NOT
26100: AND
26101: IFFALSE 26143
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26103: LD_ADDR_VAR 0 7
26107: PUSH
26108: LD_VAR 0 7
26112: PPUSH
26113: LD_VAR 0 7
26117: PUSH
26118: LD_INT 1
26120: PLUS
26121: PPUSH
26122: LD_VAR 0 9
26126: PUSH
26127: LD_VAR 0 10
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PPUSH
26136: CALL_OW 1
26140: ST_TO_ADDR
26141: GO 26157
// i := i - 1 ;
26143: LD_ADDR_VAR 0 5
26147: PUSH
26148: LD_VAR 0 5
26152: PUSH
26153: LD_INT 1
26155: MINUS
26156: ST_TO_ADDR
// end ;
26157: GO 25963
26159: POP
26160: POP
// for i in tmp do
26161: LD_ADDR_VAR 0 5
26165: PUSH
26166: LD_VAR 0 7
26170: PUSH
26171: FOR_IN
26172: IFFALSE 26210
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26174: LD_VAR 0 1
26178: PPUSH
26179: LD_VAR 0 5
26183: PUSH
26184: LD_INT 1
26186: ARRAY
26187: PPUSH
26188: LD_VAR 0 5
26192: PUSH
26193: LD_INT 2
26195: ARRAY
26196: PPUSH
26197: CALL 25156 0 3
26201: NOT
26202: IFFALSE 26208
// exit ;
26204: POP
26205: POP
26206: GO 26212
26208: GO 26171
26210: POP
26211: POP
// end ;
26212: LD_VAR 0 4
26216: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
26217: LD_INT 0
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
26223: PPUSH
26224: PPUSH
26225: PPUSH
26226: PPUSH
26227: PPUSH
// if GetClass ( unit ) <> class_sniper then
26228: LD_VAR 0 1
26232: PPUSH
26233: CALL_OW 257
26237: PUSH
26238: LD_INT 5
26240: NONEQUAL
26241: IFFALSE 26245
// exit ;
26243: GO 26711
// dist := 8 ;
26245: LD_ADDR_VAR 0 5
26249: PUSH
26250: LD_INT 8
26252: ST_TO_ADDR
// viewRange := 12 ;
26253: LD_ADDR_VAR 0 8
26257: PUSH
26258: LD_INT 12
26260: ST_TO_ADDR
// side := GetSide ( unit ) ;
26261: LD_ADDR_VAR 0 6
26265: PUSH
26266: LD_VAR 0 1
26270: PPUSH
26271: CALL_OW 255
26275: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26276: LD_INT 61
26278: PPUSH
26279: LD_VAR 0 6
26283: PPUSH
26284: CALL_OW 321
26288: PUSH
26289: LD_INT 2
26291: EQUAL
26292: IFFALSE 26302
// viewRange := 16 ;
26294: LD_ADDR_VAR 0 8
26298: PUSH
26299: LD_INT 16
26301: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26302: LD_VAR 0 1
26306: PPUSH
26307: LD_VAR 0 2
26311: PPUSH
26312: LD_VAR 0 3
26316: PPUSH
26317: CALL_OW 297
26321: PUSH
26322: LD_VAR 0 5
26326: GREATER
26327: IFFALSE 26406
// begin ComMoveXY ( unit , x , y ) ;
26329: LD_VAR 0 1
26333: PPUSH
26334: LD_VAR 0 2
26338: PPUSH
26339: LD_VAR 0 3
26343: PPUSH
26344: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26348: LD_INT 35
26350: PPUSH
26351: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26355: LD_VAR 0 1
26359: PPUSH
26360: LD_VAR 0 2
26364: PPUSH
26365: LD_VAR 0 3
26369: PPUSH
26370: CALL 63467 0 3
26374: NOT
26375: IFFALSE 26379
// exit ;
26377: GO 26711
// until GetDistUnitXY ( unit , x , y ) < dist ;
26379: LD_VAR 0 1
26383: PPUSH
26384: LD_VAR 0 2
26388: PPUSH
26389: LD_VAR 0 3
26393: PPUSH
26394: CALL_OW 297
26398: PUSH
26399: LD_VAR 0 5
26403: LESS
26404: IFFALSE 26348
// end ; ComTurnXY ( unit , x , y ) ;
26406: LD_VAR 0 1
26410: PPUSH
26411: LD_VAR 0 2
26415: PPUSH
26416: LD_VAR 0 3
26420: PPUSH
26421: CALL_OW 118
// repeat if Multiplayer then
26425: LD_OWVAR 4
26429: IFFALSE 26440
// wait ( 35 ) else
26431: LD_INT 35
26433: PPUSH
26434: CALL_OW 67
26438: GO 26447
// wait ( 5 ) ;
26440: LD_INT 5
26442: PPUSH
26443: CALL_OW 67
// _d := GetDir ( unit ) ;
26447: LD_ADDR_VAR 0 11
26451: PUSH
26452: LD_VAR 0 1
26456: PPUSH
26457: CALL_OW 254
26461: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
26462: LD_ADDR_VAR 0 7
26466: PUSH
26467: LD_VAR 0 1
26471: PPUSH
26472: CALL_OW 250
26476: PPUSH
26477: LD_VAR 0 1
26481: PPUSH
26482: CALL_OW 251
26486: PPUSH
26487: LD_VAR 0 2
26491: PPUSH
26492: LD_VAR 0 3
26496: PPUSH
26497: CALL 66075 0 4
26501: ST_TO_ADDR
// until dir = _d ;
26502: LD_VAR 0 7
26506: PUSH
26507: LD_VAR 0 11
26511: EQUAL
26512: IFFALSE 26425
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
26514: LD_ADDR_VAR 0 9
26518: PUSH
26519: LD_VAR 0 1
26523: PPUSH
26524: CALL_OW 250
26528: PPUSH
26529: LD_VAR 0 7
26533: PPUSH
26534: LD_VAR 0 5
26538: PPUSH
26539: CALL_OW 272
26543: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
26544: LD_ADDR_VAR 0 10
26548: PUSH
26549: LD_VAR 0 1
26553: PPUSH
26554: CALL_OW 251
26558: PPUSH
26559: LD_VAR 0 7
26563: PPUSH
26564: LD_VAR 0 5
26568: PPUSH
26569: CALL_OW 273
26573: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26574: LD_VAR 0 9
26578: PPUSH
26579: LD_VAR 0 10
26583: PPUSH
26584: CALL_OW 488
26588: NOT
26589: IFFALSE 26593
// exit ;
26591: GO 26711
// ComAnimCustom ( unit , 1 ) ;
26593: LD_VAR 0 1
26597: PPUSH
26598: LD_INT 1
26600: PPUSH
26601: CALL_OW 592
// p := 0 ;
26605: LD_ADDR_VAR 0 12
26609: PUSH
26610: LD_INT 0
26612: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26613: LD_VAR 0 9
26617: PPUSH
26618: LD_VAR 0 10
26622: PPUSH
26623: LD_VAR 0 6
26627: PPUSH
26628: LD_VAR 0 8
26632: PPUSH
26633: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
26637: LD_INT 35
26639: PPUSH
26640: CALL_OW 67
// p := Inc ( p ) ;
26644: LD_ADDR_VAR 0 12
26648: PUSH
26649: LD_VAR 0 12
26653: PPUSH
26654: CALL 66031 0 1
26658: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
26659: LD_VAR 0 12
26663: PUSH
26664: LD_INT 3
26666: EQUAL
26667: PUSH
26668: LD_VAR 0 1
26672: PPUSH
26673: CALL_OW 302
26677: NOT
26678: OR
26679: PUSH
26680: LD_VAR 0 1
26684: PPUSH
26685: CALL_OW 301
26689: OR
26690: IFFALSE 26637
// RemoveSeeing ( _x , _y , side ) ;
26692: LD_VAR 0 9
26696: PPUSH
26697: LD_VAR 0 10
26701: PPUSH
26702: LD_VAR 0 6
26706: PPUSH
26707: CALL_OW 331
// end ; end_of_file
26711: LD_VAR 0 4
26715: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26716: LD_VAR 0 1
26720: PUSH
26721: LD_INT 200
26723: DOUBLE
26724: GREATEREQUAL
26725: IFFALSE 26733
26727: LD_INT 299
26729: DOUBLE
26730: LESSEQUAL
26731: IFTRUE 26735
26733: GO 26767
26735: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26736: LD_VAR 0 1
26740: PPUSH
26741: LD_VAR 0 2
26745: PPUSH
26746: LD_VAR 0 3
26750: PPUSH
26751: LD_VAR 0 4
26755: PPUSH
26756: LD_VAR 0 5
26760: PPUSH
26761: CALL 22017 0 5
26765: GO 26844
26767: LD_INT 300
26769: DOUBLE
26770: GREATEREQUAL
26771: IFFALSE 26779
26773: LD_INT 399
26775: DOUBLE
26776: LESSEQUAL
26777: IFTRUE 26781
26779: GO 26843
26781: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26782: LD_VAR 0 1
26786: PPUSH
26787: LD_VAR 0 2
26791: PPUSH
26792: LD_VAR 0 3
26796: PPUSH
26797: LD_VAR 0 4
26801: PPUSH
26802: LD_VAR 0 5
26806: PPUSH
26807: LD_VAR 0 6
26811: PPUSH
26812: LD_VAR 0 7
26816: PPUSH
26817: LD_VAR 0 8
26821: PPUSH
26822: LD_VAR 0 9
26826: PPUSH
26827: LD_VAR 0 10
26831: PPUSH
26832: LD_VAR 0 11
26836: PPUSH
26837: CALL 18005 0 11
26841: GO 26844
26843: POP
// end ;
26844: PPOPN 11
26846: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26847: LD_VAR 0 1
26851: PPUSH
26852: LD_VAR 0 2
26856: PPUSH
26857: LD_VAR 0 3
26861: PPUSH
26862: LD_VAR 0 4
26866: PPUSH
26867: LD_VAR 0 5
26871: PPUSH
26872: CALL 21482 0 5
// end ; end_of_file
26876: PPOPN 5
26878: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
26879: LD_VAR 0 1
26883: PPUSH
26884: LD_VAR 0 2
26888: PPUSH
26889: LD_VAR 0 3
26893: PPUSH
26894: LD_VAR 0 4
26898: PPUSH
26899: LD_VAR 0 5
26903: PPUSH
26904: LD_VAR 0 6
26908: PPUSH
26909: CALL 5657 0 6
// end ;
26913: PPOPN 6
26915: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
26916: LD_INT 0
26918: PPUSH
// begin if not units then
26919: LD_VAR 0 1
26923: NOT
26924: IFFALSE 26928
// exit ;
26926: GO 26928
// end ;
26928: PPOPN 7
26930: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
26931: CALL 5544 0 0
// end ; end_of_file end_of_file
26935: PPOPN 1
26937: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26938: LD_INT 0
26940: PPUSH
26941: PPUSH
// if exist_mode then
26942: LD_VAR 0 2
26946: IFFALSE 26992
// begin unit := CreateCharacter ( prefix & ident ) ;
26948: LD_ADDR_VAR 0 5
26952: PUSH
26953: LD_VAR 0 3
26957: PUSH
26958: LD_VAR 0 1
26962: STR
26963: PPUSH
26964: CALL_OW 34
26968: ST_TO_ADDR
// if unit then
26969: LD_VAR 0 5
26973: IFFALSE 26990
// DeleteCharacters ( prefix & ident ) ;
26975: LD_VAR 0 3
26979: PUSH
26980: LD_VAR 0 1
26984: STR
26985: PPUSH
26986: CALL_OW 40
// end else
26990: GO 27007
// unit := NewCharacter ( ident ) ;
26992: LD_ADDR_VAR 0 5
26996: PUSH
26997: LD_VAR 0 1
27001: PPUSH
27002: CALL_OW 25
27006: ST_TO_ADDR
// result := unit ;
27007: LD_ADDR_VAR 0 4
27011: PUSH
27012: LD_VAR 0 5
27016: ST_TO_ADDR
// end ;
27017: LD_VAR 0 4
27021: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27022: LD_INT 0
27024: PPUSH
27025: PPUSH
// if not side or not nation then
27026: LD_VAR 0 1
27030: NOT
27031: PUSH
27032: LD_VAR 0 2
27036: NOT
27037: OR
27038: IFFALSE 27042
// exit ;
27040: GO 27810
// case nation of nation_american :
27042: LD_VAR 0 2
27046: PUSH
27047: LD_INT 1
27049: DOUBLE
27050: EQUAL
27051: IFTRUE 27055
27053: GO 27269
27055: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27056: LD_ADDR_VAR 0 4
27060: PUSH
27061: LD_INT 35
27063: PUSH
27064: LD_INT 45
27066: PUSH
27067: LD_INT 46
27069: PUSH
27070: LD_INT 47
27072: PUSH
27073: LD_INT 82
27075: PUSH
27076: LD_INT 83
27078: PUSH
27079: LD_INT 84
27081: PUSH
27082: LD_INT 85
27084: PUSH
27085: LD_INT 86
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: LD_INT 6
27096: PUSH
27097: LD_INT 15
27099: PUSH
27100: LD_INT 16
27102: PUSH
27103: LD_INT 7
27105: PUSH
27106: LD_INT 12
27108: PUSH
27109: LD_INT 13
27111: PUSH
27112: LD_INT 10
27114: PUSH
27115: LD_INT 14
27117: PUSH
27118: LD_INT 20
27120: PUSH
27121: LD_INT 21
27123: PUSH
27124: LD_INT 22
27126: PUSH
27127: LD_INT 25
27129: PUSH
27130: LD_INT 32
27132: PUSH
27133: LD_INT 27
27135: PUSH
27136: LD_INT 36
27138: PUSH
27139: LD_INT 69
27141: PUSH
27142: LD_INT 39
27144: PUSH
27145: LD_INT 34
27147: PUSH
27148: LD_INT 40
27150: PUSH
27151: LD_INT 48
27153: PUSH
27154: LD_INT 49
27156: PUSH
27157: LD_INT 50
27159: PUSH
27160: LD_INT 51
27162: PUSH
27163: LD_INT 52
27165: PUSH
27166: LD_INT 53
27168: PUSH
27169: LD_INT 54
27171: PUSH
27172: LD_INT 55
27174: PUSH
27175: LD_INT 56
27177: PUSH
27178: LD_INT 57
27180: PUSH
27181: LD_INT 58
27183: PUSH
27184: LD_INT 59
27186: PUSH
27187: LD_INT 60
27189: PUSH
27190: LD_INT 61
27192: PUSH
27193: LD_INT 62
27195: PUSH
27196: LD_INT 80
27198: PUSH
27199: LD_INT 82
27201: PUSH
27202: LD_INT 83
27204: PUSH
27205: LD_INT 84
27207: PUSH
27208: LD_INT 85
27210: PUSH
27211: LD_INT 86
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: ST_TO_ADDR
27267: GO 27734
27269: LD_INT 2
27271: DOUBLE
27272: EQUAL
27273: IFTRUE 27277
27275: GO 27503
27277: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27278: LD_ADDR_VAR 0 4
27282: PUSH
27283: LD_INT 35
27285: PUSH
27286: LD_INT 45
27288: PUSH
27289: LD_INT 46
27291: PUSH
27292: LD_INT 47
27294: PUSH
27295: LD_INT 82
27297: PUSH
27298: LD_INT 83
27300: PUSH
27301: LD_INT 84
27303: PUSH
27304: LD_INT 85
27306: PUSH
27307: LD_INT 87
27309: PUSH
27310: LD_INT 70
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: LD_INT 11
27318: PUSH
27319: LD_INT 3
27321: PUSH
27322: LD_INT 4
27324: PUSH
27325: LD_INT 5
27327: PUSH
27328: LD_INT 6
27330: PUSH
27331: LD_INT 15
27333: PUSH
27334: LD_INT 18
27336: PUSH
27337: LD_INT 7
27339: PUSH
27340: LD_INT 17
27342: PUSH
27343: LD_INT 8
27345: PUSH
27346: LD_INT 20
27348: PUSH
27349: LD_INT 21
27351: PUSH
27352: LD_INT 22
27354: PUSH
27355: LD_INT 72
27357: PUSH
27358: LD_INT 26
27360: PUSH
27361: LD_INT 69
27363: PUSH
27364: LD_INT 39
27366: PUSH
27367: LD_INT 40
27369: PUSH
27370: LD_INT 41
27372: PUSH
27373: LD_INT 42
27375: PUSH
27376: LD_INT 43
27378: PUSH
27379: LD_INT 48
27381: PUSH
27382: LD_INT 49
27384: PUSH
27385: LD_INT 50
27387: PUSH
27388: LD_INT 51
27390: PUSH
27391: LD_INT 52
27393: PUSH
27394: LD_INT 53
27396: PUSH
27397: LD_INT 54
27399: PUSH
27400: LD_INT 55
27402: PUSH
27403: LD_INT 56
27405: PUSH
27406: LD_INT 60
27408: PUSH
27409: LD_INT 61
27411: PUSH
27412: LD_INT 62
27414: PUSH
27415: LD_INT 66
27417: PUSH
27418: LD_INT 67
27420: PUSH
27421: LD_INT 68
27423: PUSH
27424: LD_INT 81
27426: PUSH
27427: LD_INT 82
27429: PUSH
27430: LD_INT 83
27432: PUSH
27433: LD_INT 84
27435: PUSH
27436: LD_INT 85
27438: PUSH
27439: LD_INT 87
27441: PUSH
27442: LD_INT 88
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: ST_TO_ADDR
27501: GO 27734
27503: LD_INT 3
27505: DOUBLE
27506: EQUAL
27507: IFTRUE 27511
27509: GO 27733
27511: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27512: LD_ADDR_VAR 0 4
27516: PUSH
27517: LD_INT 46
27519: PUSH
27520: LD_INT 47
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: LD_INT 2
27528: PUSH
27529: LD_INT 82
27531: PUSH
27532: LD_INT 83
27534: PUSH
27535: LD_INT 84
27537: PUSH
27538: LD_INT 85
27540: PUSH
27541: LD_INT 86
27543: PUSH
27544: LD_INT 11
27546: PUSH
27547: LD_INT 9
27549: PUSH
27550: LD_INT 20
27552: PUSH
27553: LD_INT 19
27555: PUSH
27556: LD_INT 21
27558: PUSH
27559: LD_INT 24
27561: PUSH
27562: LD_INT 22
27564: PUSH
27565: LD_INT 25
27567: PUSH
27568: LD_INT 28
27570: PUSH
27571: LD_INT 29
27573: PUSH
27574: LD_INT 30
27576: PUSH
27577: LD_INT 31
27579: PUSH
27580: LD_INT 37
27582: PUSH
27583: LD_INT 38
27585: PUSH
27586: LD_INT 32
27588: PUSH
27589: LD_INT 27
27591: PUSH
27592: LD_INT 33
27594: PUSH
27595: LD_INT 69
27597: PUSH
27598: LD_INT 39
27600: PUSH
27601: LD_INT 34
27603: PUSH
27604: LD_INT 40
27606: PUSH
27607: LD_INT 71
27609: PUSH
27610: LD_INT 23
27612: PUSH
27613: LD_INT 44
27615: PUSH
27616: LD_INT 48
27618: PUSH
27619: LD_INT 49
27621: PUSH
27622: LD_INT 50
27624: PUSH
27625: LD_INT 51
27627: PUSH
27628: LD_INT 52
27630: PUSH
27631: LD_INT 53
27633: PUSH
27634: LD_INT 54
27636: PUSH
27637: LD_INT 55
27639: PUSH
27640: LD_INT 56
27642: PUSH
27643: LD_INT 57
27645: PUSH
27646: LD_INT 58
27648: PUSH
27649: LD_INT 59
27651: PUSH
27652: LD_INT 63
27654: PUSH
27655: LD_INT 64
27657: PUSH
27658: LD_INT 65
27660: PUSH
27661: LD_INT 82
27663: PUSH
27664: LD_INT 83
27666: PUSH
27667: LD_INT 84
27669: PUSH
27670: LD_INT 85
27672: PUSH
27673: LD_INT 86
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: ST_TO_ADDR
27731: GO 27734
27733: POP
// if state > - 1 and state < 3 then
27734: LD_VAR 0 3
27738: PUSH
27739: LD_INT 1
27741: NEG
27742: GREATER
27743: PUSH
27744: LD_VAR 0 3
27748: PUSH
27749: LD_INT 3
27751: LESS
27752: AND
27753: IFFALSE 27810
// for i in result do
27755: LD_ADDR_VAR 0 5
27759: PUSH
27760: LD_VAR 0 4
27764: PUSH
27765: FOR_IN
27766: IFFALSE 27808
// if GetTech ( i , side ) <> state then
27768: LD_VAR 0 5
27772: PPUSH
27773: LD_VAR 0 1
27777: PPUSH
27778: CALL_OW 321
27782: PUSH
27783: LD_VAR 0 3
27787: NONEQUAL
27788: IFFALSE 27806
// result := result diff i ;
27790: LD_ADDR_VAR 0 4
27794: PUSH
27795: LD_VAR 0 4
27799: PUSH
27800: LD_VAR 0 5
27804: DIFF
27805: ST_TO_ADDR
27806: GO 27765
27808: POP
27809: POP
// end ;
27810: LD_VAR 0 4
27814: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27815: LD_INT 0
27817: PPUSH
27818: PPUSH
27819: PPUSH
// result := true ;
27820: LD_ADDR_VAR 0 3
27824: PUSH
27825: LD_INT 1
27827: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27828: LD_ADDR_VAR 0 5
27832: PUSH
27833: LD_VAR 0 2
27837: PPUSH
27838: CALL_OW 480
27842: ST_TO_ADDR
// if not tmp then
27843: LD_VAR 0 5
27847: NOT
27848: IFFALSE 27852
// exit ;
27850: GO 27901
// for i in tmp do
27852: LD_ADDR_VAR 0 4
27856: PUSH
27857: LD_VAR 0 5
27861: PUSH
27862: FOR_IN
27863: IFFALSE 27899
// if GetTech ( i , side ) <> state_researched then
27865: LD_VAR 0 4
27869: PPUSH
27870: LD_VAR 0 1
27874: PPUSH
27875: CALL_OW 321
27879: PUSH
27880: LD_INT 2
27882: NONEQUAL
27883: IFFALSE 27897
// begin result := false ;
27885: LD_ADDR_VAR 0 3
27889: PUSH
27890: LD_INT 0
27892: ST_TO_ADDR
// exit ;
27893: POP
27894: POP
27895: GO 27901
// end ;
27897: GO 27862
27899: POP
27900: POP
// end ;
27901: LD_VAR 0 3
27905: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27906: LD_INT 0
27908: PPUSH
27909: PPUSH
27910: PPUSH
27911: PPUSH
27912: PPUSH
27913: PPUSH
27914: PPUSH
27915: PPUSH
27916: PPUSH
27917: PPUSH
27918: PPUSH
27919: PPUSH
27920: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27921: LD_VAR 0 1
27925: NOT
27926: PUSH
27927: LD_VAR 0 1
27931: PPUSH
27932: CALL_OW 257
27936: PUSH
27937: LD_INT 9
27939: NONEQUAL
27940: OR
27941: IFFALSE 27945
// exit ;
27943: GO 28518
// side := GetSide ( unit ) ;
27945: LD_ADDR_VAR 0 9
27949: PUSH
27950: LD_VAR 0 1
27954: PPUSH
27955: CALL_OW 255
27959: ST_TO_ADDR
// tech_space := tech_spacanom ;
27960: LD_ADDR_VAR 0 12
27964: PUSH
27965: LD_INT 29
27967: ST_TO_ADDR
// tech_time := tech_taurad ;
27968: LD_ADDR_VAR 0 13
27972: PUSH
27973: LD_INT 28
27975: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27976: LD_ADDR_VAR 0 11
27980: PUSH
27981: LD_VAR 0 1
27985: PPUSH
27986: CALL_OW 310
27990: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27991: LD_VAR 0 11
27995: PPUSH
27996: CALL_OW 247
28000: PUSH
28001: LD_INT 2
28003: EQUAL
28004: IFFALSE 28008
// exit ;
28006: GO 28518
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28008: LD_ADDR_VAR 0 8
28012: PUSH
28013: LD_INT 81
28015: PUSH
28016: LD_VAR 0 9
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 3
28027: PUSH
28028: LD_INT 21
28030: PUSH
28031: LD_INT 3
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PPUSH
28046: CALL_OW 69
28050: ST_TO_ADDR
// if not tmp then
28051: LD_VAR 0 8
28055: NOT
28056: IFFALSE 28060
// exit ;
28058: GO 28518
// if in_unit then
28060: LD_VAR 0 11
28064: IFFALSE 28088
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28066: LD_ADDR_VAR 0 10
28070: PUSH
28071: LD_VAR 0 8
28075: PPUSH
28076: LD_VAR 0 11
28080: PPUSH
28081: CALL_OW 74
28085: ST_TO_ADDR
28086: GO 28108
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28088: LD_ADDR_VAR 0 10
28092: PUSH
28093: LD_VAR 0 8
28097: PPUSH
28098: LD_VAR 0 1
28102: PPUSH
28103: CALL_OW 74
28107: ST_TO_ADDR
// if not enemy then
28108: LD_VAR 0 10
28112: NOT
28113: IFFALSE 28117
// exit ;
28115: GO 28518
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28117: LD_VAR 0 11
28121: PUSH
28122: LD_VAR 0 11
28126: PPUSH
28127: LD_VAR 0 10
28131: PPUSH
28132: CALL_OW 296
28136: PUSH
28137: LD_INT 13
28139: GREATER
28140: AND
28141: PUSH
28142: LD_VAR 0 1
28146: PPUSH
28147: LD_VAR 0 10
28151: PPUSH
28152: CALL_OW 296
28156: PUSH
28157: LD_INT 12
28159: GREATER
28160: OR
28161: IFFALSE 28165
// exit ;
28163: GO 28518
// missile := [ 1 ] ;
28165: LD_ADDR_VAR 0 14
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28176: LD_VAR 0 9
28180: PPUSH
28181: LD_VAR 0 12
28185: PPUSH
28186: CALL_OW 325
28190: IFFALSE 28219
// missile := Replace ( missile , missile + 1 , 2 ) ;
28192: LD_ADDR_VAR 0 14
28196: PUSH
28197: LD_VAR 0 14
28201: PPUSH
28202: LD_VAR 0 14
28206: PUSH
28207: LD_INT 1
28209: PLUS
28210: PPUSH
28211: LD_INT 2
28213: PPUSH
28214: CALL_OW 1
28218: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28219: LD_VAR 0 9
28223: PPUSH
28224: LD_VAR 0 13
28228: PPUSH
28229: CALL_OW 325
28233: PUSH
28234: LD_VAR 0 10
28238: PPUSH
28239: CALL_OW 255
28243: PPUSH
28244: LD_VAR 0 13
28248: PPUSH
28249: CALL_OW 325
28253: NOT
28254: AND
28255: IFFALSE 28284
// missile := Replace ( missile , missile + 1 , 3 ) ;
28257: LD_ADDR_VAR 0 14
28261: PUSH
28262: LD_VAR 0 14
28266: PPUSH
28267: LD_VAR 0 14
28271: PUSH
28272: LD_INT 1
28274: PLUS
28275: PPUSH
28276: LD_INT 3
28278: PPUSH
28279: CALL_OW 1
28283: ST_TO_ADDR
// if missile < 2 then
28284: LD_VAR 0 14
28288: PUSH
28289: LD_INT 2
28291: LESS
28292: IFFALSE 28296
// exit ;
28294: GO 28518
// x := GetX ( enemy ) ;
28296: LD_ADDR_VAR 0 4
28300: PUSH
28301: LD_VAR 0 10
28305: PPUSH
28306: CALL_OW 250
28310: ST_TO_ADDR
// y := GetY ( enemy ) ;
28311: LD_ADDR_VAR 0 5
28315: PUSH
28316: LD_VAR 0 10
28320: PPUSH
28321: CALL_OW 251
28325: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28326: LD_ADDR_VAR 0 6
28330: PUSH
28331: LD_VAR 0 4
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PPUSH
28340: LD_INT 1
28342: PPUSH
28343: CALL_OW 12
28347: PLUS
28348: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28349: LD_ADDR_VAR 0 7
28353: PUSH
28354: LD_VAR 0 5
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PPUSH
28363: LD_INT 1
28365: PPUSH
28366: CALL_OW 12
28370: PLUS
28371: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28372: LD_VAR 0 6
28376: PPUSH
28377: LD_VAR 0 7
28381: PPUSH
28382: CALL_OW 488
28386: NOT
28387: IFFALSE 28409
// begin _x := x ;
28389: LD_ADDR_VAR 0 6
28393: PUSH
28394: LD_VAR 0 4
28398: ST_TO_ADDR
// _y := y ;
28399: LD_ADDR_VAR 0 7
28403: PUSH
28404: LD_VAR 0 5
28408: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28409: LD_ADDR_VAR 0 3
28413: PUSH
28414: LD_INT 1
28416: PPUSH
28417: LD_VAR 0 14
28421: PPUSH
28422: CALL_OW 12
28426: ST_TO_ADDR
// case i of 1 :
28427: LD_VAR 0 3
28431: PUSH
28432: LD_INT 1
28434: DOUBLE
28435: EQUAL
28436: IFTRUE 28440
28438: GO 28457
28440: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28441: LD_VAR 0 1
28445: PPUSH
28446: LD_VAR 0 10
28450: PPUSH
28451: CALL_OW 115
28455: GO 28518
28457: LD_INT 2
28459: DOUBLE
28460: EQUAL
28461: IFTRUE 28465
28463: GO 28487
28465: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28466: LD_VAR 0 1
28470: PPUSH
28471: LD_VAR 0 6
28475: PPUSH
28476: LD_VAR 0 7
28480: PPUSH
28481: CALL_OW 153
28485: GO 28518
28487: LD_INT 3
28489: DOUBLE
28490: EQUAL
28491: IFTRUE 28495
28493: GO 28517
28495: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28496: LD_VAR 0 1
28500: PPUSH
28501: LD_VAR 0 6
28505: PPUSH
28506: LD_VAR 0 7
28510: PPUSH
28511: CALL_OW 154
28515: GO 28518
28517: POP
// end ;
28518: LD_VAR 0 2
28522: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28523: LD_INT 0
28525: PPUSH
28526: PPUSH
28527: PPUSH
28528: PPUSH
28529: PPUSH
28530: PPUSH
// if not unit or not building then
28531: LD_VAR 0 1
28535: NOT
28536: PUSH
28537: LD_VAR 0 2
28541: NOT
28542: OR
28543: IFFALSE 28547
// exit ;
28545: GO 28705
// x := GetX ( building ) ;
28547: LD_ADDR_VAR 0 5
28551: PUSH
28552: LD_VAR 0 2
28556: PPUSH
28557: CALL_OW 250
28561: ST_TO_ADDR
// y := GetY ( building ) ;
28562: LD_ADDR_VAR 0 6
28566: PUSH
28567: LD_VAR 0 2
28571: PPUSH
28572: CALL_OW 251
28576: ST_TO_ADDR
// for i = 0 to 5 do
28577: LD_ADDR_VAR 0 4
28581: PUSH
28582: DOUBLE
28583: LD_INT 0
28585: DEC
28586: ST_TO_ADDR
28587: LD_INT 5
28589: PUSH
28590: FOR_TO
28591: IFFALSE 28703
// begin _x := ShiftX ( x , i , 3 ) ;
28593: LD_ADDR_VAR 0 7
28597: PUSH
28598: LD_VAR 0 5
28602: PPUSH
28603: LD_VAR 0 4
28607: PPUSH
28608: LD_INT 3
28610: PPUSH
28611: CALL_OW 272
28615: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28616: LD_ADDR_VAR 0 8
28620: PUSH
28621: LD_VAR 0 6
28625: PPUSH
28626: LD_VAR 0 4
28630: PPUSH
28631: LD_INT 3
28633: PPUSH
28634: CALL_OW 273
28638: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28639: LD_VAR 0 7
28643: PPUSH
28644: LD_VAR 0 8
28648: PPUSH
28649: CALL_OW 488
28653: NOT
28654: IFFALSE 28658
// continue ;
28656: GO 28590
// if HexInfo ( _x , _y ) = 0 then
28658: LD_VAR 0 7
28662: PPUSH
28663: LD_VAR 0 8
28667: PPUSH
28668: CALL_OW 428
28672: PUSH
28673: LD_INT 0
28675: EQUAL
28676: IFFALSE 28701
// begin ComMoveXY ( unit , _x , _y ) ;
28678: LD_VAR 0 1
28682: PPUSH
28683: LD_VAR 0 7
28687: PPUSH
28688: LD_VAR 0 8
28692: PPUSH
28693: CALL_OW 111
// exit ;
28697: POP
28698: POP
28699: GO 28705
// end ; end ;
28701: GO 28590
28703: POP
28704: POP
// end ;
28705: LD_VAR 0 3
28709: RET
// export function ScanBase ( side , base_area ) ; begin
28710: LD_INT 0
28712: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28713: LD_ADDR_VAR 0 3
28717: PUSH
28718: LD_VAR 0 2
28722: PPUSH
28723: LD_INT 81
28725: PUSH
28726: LD_VAR 0 1
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PPUSH
28735: CALL_OW 70
28739: ST_TO_ADDR
// end ;
28740: LD_VAR 0 3
28744: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28745: LD_INT 0
28747: PPUSH
28748: PPUSH
28749: PPUSH
28750: PPUSH
// result := false ;
28751: LD_ADDR_VAR 0 2
28755: PUSH
28756: LD_INT 0
28758: ST_TO_ADDR
// side := GetSide ( unit ) ;
28759: LD_ADDR_VAR 0 3
28763: PUSH
28764: LD_VAR 0 1
28768: PPUSH
28769: CALL_OW 255
28773: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28774: LD_ADDR_VAR 0 4
28778: PUSH
28779: LD_VAR 0 1
28783: PPUSH
28784: CALL_OW 248
28788: ST_TO_ADDR
// case nat of 1 :
28789: LD_VAR 0 4
28793: PUSH
28794: LD_INT 1
28796: DOUBLE
28797: EQUAL
28798: IFTRUE 28802
28800: GO 28813
28802: POP
// tech := tech_lassight ; 2 :
28803: LD_ADDR_VAR 0 5
28807: PUSH
28808: LD_INT 12
28810: ST_TO_ADDR
28811: GO 28852
28813: LD_INT 2
28815: DOUBLE
28816: EQUAL
28817: IFTRUE 28821
28819: GO 28832
28821: POP
// tech := tech_mortar ; 3 :
28822: LD_ADDR_VAR 0 5
28826: PUSH
28827: LD_INT 41
28829: ST_TO_ADDR
28830: GO 28852
28832: LD_INT 3
28834: DOUBLE
28835: EQUAL
28836: IFTRUE 28840
28838: GO 28851
28840: POP
// tech := tech_bazooka ; end ;
28841: LD_ADDR_VAR 0 5
28845: PUSH
28846: LD_INT 44
28848: ST_TO_ADDR
28849: GO 28852
28851: POP
// if Researched ( side , tech ) then
28852: LD_VAR 0 3
28856: PPUSH
28857: LD_VAR 0 5
28861: PPUSH
28862: CALL_OW 325
28866: IFFALSE 28893
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28868: LD_ADDR_VAR 0 2
28872: PUSH
28873: LD_INT 5
28875: PUSH
28876: LD_INT 8
28878: PUSH
28879: LD_INT 9
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: PUSH
28887: LD_VAR 0 4
28891: ARRAY
28892: ST_TO_ADDR
// end ;
28893: LD_VAR 0 2
28897: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28898: LD_INT 0
28900: PPUSH
28901: PPUSH
28902: PPUSH
// if not mines then
28903: LD_VAR 0 2
28907: NOT
28908: IFFALSE 28912
// exit ;
28910: GO 29056
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28912: LD_ADDR_VAR 0 5
28916: PUSH
28917: LD_INT 81
28919: PUSH
28920: LD_VAR 0 1
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 3
28931: PUSH
28932: LD_INT 21
28934: PUSH
28935: LD_INT 3
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PPUSH
28950: CALL_OW 69
28954: ST_TO_ADDR
// for i in mines do
28955: LD_ADDR_VAR 0 4
28959: PUSH
28960: LD_VAR 0 2
28964: PUSH
28965: FOR_IN
28966: IFFALSE 29054
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28968: LD_VAR 0 4
28972: PUSH
28973: LD_INT 1
28975: ARRAY
28976: PPUSH
28977: LD_VAR 0 4
28981: PUSH
28982: LD_INT 2
28984: ARRAY
28985: PPUSH
28986: CALL_OW 458
28990: NOT
28991: IFFALSE 28995
// continue ;
28993: GO 28965
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28995: LD_VAR 0 4
28999: PUSH
29000: LD_INT 1
29002: ARRAY
29003: PPUSH
29004: LD_VAR 0 4
29008: PUSH
29009: LD_INT 2
29011: ARRAY
29012: PPUSH
29013: CALL_OW 428
29017: PUSH
29018: LD_VAR 0 5
29022: IN
29023: IFFALSE 29052
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29025: LD_VAR 0 4
29029: PUSH
29030: LD_INT 1
29032: ARRAY
29033: PPUSH
29034: LD_VAR 0 4
29038: PUSH
29039: LD_INT 2
29041: ARRAY
29042: PPUSH
29043: LD_VAR 0 1
29047: PPUSH
29048: CALL_OW 456
// end ;
29052: GO 28965
29054: POP
29055: POP
// end ;
29056: LD_VAR 0 3
29060: RET
// export function Count ( array ) ; begin
29061: LD_INT 0
29063: PPUSH
// result := array + 0 ;
29064: LD_ADDR_VAR 0 2
29068: PUSH
29069: LD_VAR 0 1
29073: PUSH
29074: LD_INT 0
29076: PLUS
29077: ST_TO_ADDR
// end ;
29078: LD_VAR 0 2
29082: RET
// export function IsEmpty ( building ) ; begin
29083: LD_INT 0
29085: PPUSH
// if not building then
29086: LD_VAR 0 1
29090: NOT
29091: IFFALSE 29095
// exit ;
29093: GO 29138
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29095: LD_ADDR_VAR 0 2
29099: PUSH
29100: LD_VAR 0 1
29104: PUSH
29105: LD_INT 22
29107: PUSH
29108: LD_VAR 0 1
29112: PPUSH
29113: CALL_OW 255
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 58
29124: PUSH
29125: EMPTY
29126: LIST
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PPUSH
29132: CALL_OW 69
29136: IN
29137: ST_TO_ADDR
// end ;
29138: LD_VAR 0 2
29142: RET
// export function IsNotFull ( building ) ; var places ; begin
29143: LD_INT 0
29145: PPUSH
29146: PPUSH
// if not building then
29147: LD_VAR 0 1
29151: NOT
29152: IFFALSE 29156
// exit ;
29154: GO 29184
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29156: LD_ADDR_VAR 0 2
29160: PUSH
29161: LD_VAR 0 1
29165: PPUSH
29166: LD_INT 3
29168: PUSH
29169: LD_INT 62
29171: PUSH
29172: EMPTY
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PPUSH
29179: CALL_OW 72
29183: ST_TO_ADDR
// end ;
29184: LD_VAR 0 2
29188: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29189: LD_INT 0
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
// tmp := [ ] ;
29195: LD_ADDR_VAR 0 3
29199: PUSH
29200: EMPTY
29201: ST_TO_ADDR
// list := [ ] ;
29202: LD_ADDR_VAR 0 5
29206: PUSH
29207: EMPTY
29208: ST_TO_ADDR
// for i = 16 to 25 do
29209: LD_ADDR_VAR 0 4
29213: PUSH
29214: DOUBLE
29215: LD_INT 16
29217: DEC
29218: ST_TO_ADDR
29219: LD_INT 25
29221: PUSH
29222: FOR_TO
29223: IFFALSE 29296
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29225: LD_ADDR_VAR 0 3
29229: PUSH
29230: LD_VAR 0 3
29234: PUSH
29235: LD_INT 22
29237: PUSH
29238: LD_VAR 0 1
29242: PPUSH
29243: CALL_OW 255
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 91
29254: PUSH
29255: LD_VAR 0 1
29259: PUSH
29260: LD_INT 6
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 30
29270: PUSH
29271: LD_VAR 0 4
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: LIST
29284: PUSH
29285: EMPTY
29286: LIST
29287: PPUSH
29288: CALL_OW 69
29292: ADD
29293: ST_TO_ADDR
29294: GO 29222
29296: POP
29297: POP
// for i = 1 to tmp do
29298: LD_ADDR_VAR 0 4
29302: PUSH
29303: DOUBLE
29304: LD_INT 1
29306: DEC
29307: ST_TO_ADDR
29308: LD_VAR 0 3
29312: PUSH
29313: FOR_TO
29314: IFFALSE 29402
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29316: LD_ADDR_VAR 0 5
29320: PUSH
29321: LD_VAR 0 5
29325: PUSH
29326: LD_VAR 0 3
29330: PUSH
29331: LD_VAR 0 4
29335: ARRAY
29336: PPUSH
29337: CALL_OW 266
29341: PUSH
29342: LD_VAR 0 3
29346: PUSH
29347: LD_VAR 0 4
29351: ARRAY
29352: PPUSH
29353: CALL_OW 250
29357: PUSH
29358: LD_VAR 0 3
29362: PUSH
29363: LD_VAR 0 4
29367: ARRAY
29368: PPUSH
29369: CALL_OW 251
29373: PUSH
29374: LD_VAR 0 3
29378: PUSH
29379: LD_VAR 0 4
29383: ARRAY
29384: PPUSH
29385: CALL_OW 254
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: ADD
29399: ST_TO_ADDR
29400: GO 29313
29402: POP
29403: POP
// result := list ;
29404: LD_ADDR_VAR 0 2
29408: PUSH
29409: LD_VAR 0 5
29413: ST_TO_ADDR
// end ;
29414: LD_VAR 0 2
29418: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29419: LD_INT 0
29421: PPUSH
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
29426: PPUSH
29427: PPUSH
// if not factory then
29428: LD_VAR 0 1
29432: NOT
29433: IFFALSE 29437
// exit ;
29435: GO 30030
// if control = control_apeman then
29437: LD_VAR 0 4
29441: PUSH
29442: LD_INT 5
29444: EQUAL
29445: IFFALSE 29554
// begin tmp := UnitsInside ( factory ) ;
29447: LD_ADDR_VAR 0 8
29451: PUSH
29452: LD_VAR 0 1
29456: PPUSH
29457: CALL_OW 313
29461: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29462: LD_VAR 0 8
29466: PPUSH
29467: LD_INT 25
29469: PUSH
29470: LD_INT 12
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PPUSH
29477: CALL_OW 72
29481: NOT
29482: IFFALSE 29492
// control := control_manual ;
29484: LD_ADDR_VAR 0 4
29488: PUSH
29489: LD_INT 1
29491: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29492: LD_ADDR_VAR 0 8
29496: PUSH
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL 29189 0 1
29506: ST_TO_ADDR
// if tmp then
29507: LD_VAR 0 8
29511: IFFALSE 29554
// begin for i in tmp do
29513: LD_ADDR_VAR 0 7
29517: PUSH
29518: LD_VAR 0 8
29522: PUSH
29523: FOR_IN
29524: IFFALSE 29552
// if i [ 1 ] = b_ext_radio then
29526: LD_VAR 0 7
29530: PUSH
29531: LD_INT 1
29533: ARRAY
29534: PUSH
29535: LD_INT 22
29537: EQUAL
29538: IFFALSE 29550
// begin control := control_remote ;
29540: LD_ADDR_VAR 0 4
29544: PUSH
29545: LD_INT 2
29547: ST_TO_ADDR
// break ;
29548: GO 29552
// end ;
29550: GO 29523
29552: POP
29553: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29554: LD_VAR 0 1
29558: PPUSH
29559: LD_VAR 0 2
29563: PPUSH
29564: LD_VAR 0 3
29568: PPUSH
29569: LD_VAR 0 4
29573: PPUSH
29574: LD_VAR 0 5
29578: PPUSH
29579: CALL_OW 448
29583: IFFALSE 29618
// begin result := [ chassis , engine , control , weapon ] ;
29585: LD_ADDR_VAR 0 6
29589: PUSH
29590: LD_VAR 0 2
29594: PUSH
29595: LD_VAR 0 3
29599: PUSH
29600: LD_VAR 0 4
29604: PUSH
29605: LD_VAR 0 5
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: ST_TO_ADDR
// exit ;
29616: GO 30030
// end ; _chassis := AvailableChassisList ( factory ) ;
29618: LD_ADDR_VAR 0 9
29622: PUSH
29623: LD_VAR 0 1
29627: PPUSH
29628: CALL_OW 475
29632: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29633: LD_ADDR_VAR 0 11
29637: PUSH
29638: LD_VAR 0 1
29642: PPUSH
29643: CALL_OW 476
29647: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29648: LD_ADDR_VAR 0 12
29652: PUSH
29653: LD_VAR 0 1
29657: PPUSH
29658: CALL_OW 477
29662: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29663: LD_ADDR_VAR 0 10
29667: PUSH
29668: LD_VAR 0 1
29672: PPUSH
29673: CALL_OW 478
29677: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29678: LD_VAR 0 9
29682: NOT
29683: PUSH
29684: LD_VAR 0 11
29688: NOT
29689: OR
29690: PUSH
29691: LD_VAR 0 12
29695: NOT
29696: OR
29697: PUSH
29698: LD_VAR 0 10
29702: NOT
29703: OR
29704: IFFALSE 29739
// begin result := [ chassis , engine , control , weapon ] ;
29706: LD_ADDR_VAR 0 6
29710: PUSH
29711: LD_VAR 0 2
29715: PUSH
29716: LD_VAR 0 3
29720: PUSH
29721: LD_VAR 0 4
29725: PUSH
29726: LD_VAR 0 5
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: ST_TO_ADDR
// exit ;
29737: GO 30030
// end ; if not chassis in _chassis then
29739: LD_VAR 0 2
29743: PUSH
29744: LD_VAR 0 9
29748: IN
29749: NOT
29750: IFFALSE 29776
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29752: LD_ADDR_VAR 0 2
29756: PUSH
29757: LD_VAR 0 9
29761: PUSH
29762: LD_INT 1
29764: PPUSH
29765: LD_VAR 0 9
29769: PPUSH
29770: CALL_OW 12
29774: ARRAY
29775: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29776: LD_VAR 0 2
29780: PPUSH
29781: LD_VAR 0 3
29785: PPUSH
29786: CALL 30035 0 2
29790: NOT
29791: IFFALSE 29850
// repeat engine := _engine [ 1 ] ;
29793: LD_ADDR_VAR 0 3
29797: PUSH
29798: LD_VAR 0 11
29802: PUSH
29803: LD_INT 1
29805: ARRAY
29806: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29807: LD_ADDR_VAR 0 11
29811: PUSH
29812: LD_VAR 0 11
29816: PPUSH
29817: LD_INT 1
29819: PPUSH
29820: CALL_OW 3
29824: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29825: LD_VAR 0 2
29829: PPUSH
29830: LD_VAR 0 3
29834: PPUSH
29835: CALL 30035 0 2
29839: PUSH
29840: LD_VAR 0 11
29844: PUSH
29845: EMPTY
29846: EQUAL
29847: OR
29848: IFFALSE 29793
// if not control in _control then
29850: LD_VAR 0 4
29854: PUSH
29855: LD_VAR 0 12
29859: IN
29860: NOT
29861: IFFALSE 29887
// control := _control [ rand ( 1 , _control ) ] ;
29863: LD_ADDR_VAR 0 4
29867: PUSH
29868: LD_VAR 0 12
29872: PUSH
29873: LD_INT 1
29875: PPUSH
29876: LD_VAR 0 12
29880: PPUSH
29881: CALL_OW 12
29885: ARRAY
29886: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29887: LD_VAR 0 2
29891: PPUSH
29892: LD_VAR 0 5
29896: PPUSH
29897: CALL 30255 0 2
29901: NOT
29902: IFFALSE 29961
// repeat weapon := _weapon [ 1 ] ;
29904: LD_ADDR_VAR 0 5
29908: PUSH
29909: LD_VAR 0 10
29913: PUSH
29914: LD_INT 1
29916: ARRAY
29917: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29918: LD_ADDR_VAR 0 10
29922: PUSH
29923: LD_VAR 0 10
29927: PPUSH
29928: LD_INT 1
29930: PPUSH
29931: CALL_OW 3
29935: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29936: LD_VAR 0 2
29940: PPUSH
29941: LD_VAR 0 5
29945: PPUSH
29946: CALL 30255 0 2
29950: PUSH
29951: LD_VAR 0 10
29955: PUSH
29956: EMPTY
29957: EQUAL
29958: OR
29959: IFFALSE 29904
// result := [ ] ;
29961: LD_ADDR_VAR 0 6
29965: PUSH
29966: EMPTY
29967: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29968: LD_VAR 0 1
29972: PPUSH
29973: LD_VAR 0 2
29977: PPUSH
29978: LD_VAR 0 3
29982: PPUSH
29983: LD_VAR 0 4
29987: PPUSH
29988: LD_VAR 0 5
29992: PPUSH
29993: CALL_OW 448
29997: IFFALSE 30030
// result := [ chassis , engine , control , weapon ] ;
29999: LD_ADDR_VAR 0 6
30003: PUSH
30004: LD_VAR 0 2
30008: PUSH
30009: LD_VAR 0 3
30013: PUSH
30014: LD_VAR 0 4
30018: PUSH
30019: LD_VAR 0 5
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: ST_TO_ADDR
// end ;
30030: LD_VAR 0 6
30034: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30035: LD_INT 0
30037: PPUSH
// if not chassis or not engine then
30038: LD_VAR 0 1
30042: NOT
30043: PUSH
30044: LD_VAR 0 2
30048: NOT
30049: OR
30050: IFFALSE 30054
// exit ;
30052: GO 30250
// case engine of engine_solar :
30054: LD_VAR 0 2
30058: PUSH
30059: LD_INT 2
30061: DOUBLE
30062: EQUAL
30063: IFTRUE 30067
30065: GO 30105
30067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30068: LD_ADDR_VAR 0 3
30072: PUSH
30073: LD_INT 11
30075: PUSH
30076: LD_INT 12
30078: PUSH
30079: LD_INT 13
30081: PUSH
30082: LD_INT 14
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: LD_INT 3
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: ST_TO_ADDR
30103: GO 30234
30105: LD_INT 1
30107: DOUBLE
30108: EQUAL
30109: IFTRUE 30113
30111: GO 30175
30113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30114: LD_ADDR_VAR 0 3
30118: PUSH
30119: LD_INT 11
30121: PUSH
30122: LD_INT 12
30124: PUSH
30125: LD_INT 13
30127: PUSH
30128: LD_INT 14
30130: PUSH
30131: LD_INT 1
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: LD_INT 4
30142: PUSH
30143: LD_INT 5
30145: PUSH
30146: LD_INT 21
30148: PUSH
30149: LD_INT 23
30151: PUSH
30152: LD_INT 22
30154: PUSH
30155: LD_INT 24
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: ST_TO_ADDR
30173: GO 30234
30175: LD_INT 3
30177: DOUBLE
30178: EQUAL
30179: IFTRUE 30183
30181: GO 30233
30183: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30184: LD_ADDR_VAR 0 3
30188: PUSH
30189: LD_INT 13
30191: PUSH
30192: LD_INT 14
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: LD_INT 3
30200: PUSH
30201: LD_INT 4
30203: PUSH
30204: LD_INT 5
30206: PUSH
30207: LD_INT 21
30209: PUSH
30210: LD_INT 22
30212: PUSH
30213: LD_INT 23
30215: PUSH
30216: LD_INT 24
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: ST_TO_ADDR
30231: GO 30234
30233: POP
// result := ( chassis in result ) ;
30234: LD_ADDR_VAR 0 3
30238: PUSH
30239: LD_VAR 0 1
30243: PUSH
30244: LD_VAR 0 3
30248: IN
30249: ST_TO_ADDR
// end ;
30250: LD_VAR 0 3
30254: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30255: LD_INT 0
30257: PPUSH
// if not chassis or not weapon then
30258: LD_VAR 0 1
30262: NOT
30263: PUSH
30264: LD_VAR 0 2
30268: NOT
30269: OR
30270: IFFALSE 30274
// exit ;
30272: GO 31334
// case weapon of us_machine_gun :
30274: LD_VAR 0 2
30278: PUSH
30279: LD_INT 2
30281: DOUBLE
30282: EQUAL
30283: IFTRUE 30287
30285: GO 30317
30287: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30288: LD_ADDR_VAR 0 3
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: LD_INT 3
30301: PUSH
30302: LD_INT 4
30304: PUSH
30305: LD_INT 5
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: ST_TO_ADDR
30315: GO 31318
30317: LD_INT 3
30319: DOUBLE
30320: EQUAL
30321: IFTRUE 30325
30323: GO 30355
30325: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30326: LD_ADDR_VAR 0 3
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: LD_INT 2
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: LD_INT 4
30342: PUSH
30343: LD_INT 5
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: ST_TO_ADDR
30353: GO 31318
30355: LD_INT 11
30357: DOUBLE
30358: EQUAL
30359: IFTRUE 30363
30361: GO 30393
30363: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30364: LD_ADDR_VAR 0 3
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: LD_INT 2
30374: PUSH
30375: LD_INT 3
30377: PUSH
30378: LD_INT 4
30380: PUSH
30381: LD_INT 5
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: ST_TO_ADDR
30391: GO 31318
30393: LD_INT 4
30395: DOUBLE
30396: EQUAL
30397: IFTRUE 30401
30399: GO 30427
30401: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30402: LD_ADDR_VAR 0 3
30406: PUSH
30407: LD_INT 2
30409: PUSH
30410: LD_INT 3
30412: PUSH
30413: LD_INT 4
30415: PUSH
30416: LD_INT 5
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: ST_TO_ADDR
30425: GO 31318
30427: LD_INT 5
30429: DOUBLE
30430: EQUAL
30431: IFTRUE 30435
30433: GO 30461
30435: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30436: LD_ADDR_VAR 0 3
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 3
30446: PUSH
30447: LD_INT 4
30449: PUSH
30450: LD_INT 5
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: ST_TO_ADDR
30459: GO 31318
30461: LD_INT 9
30463: DOUBLE
30464: EQUAL
30465: IFTRUE 30469
30467: GO 30495
30469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30470: LD_ADDR_VAR 0 3
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: LD_INT 3
30480: PUSH
30481: LD_INT 4
30483: PUSH
30484: LD_INT 5
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: ST_TO_ADDR
30493: GO 31318
30495: LD_INT 7
30497: DOUBLE
30498: EQUAL
30499: IFTRUE 30503
30501: GO 30529
30503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30504: LD_ADDR_VAR 0 3
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: LD_INT 3
30514: PUSH
30515: LD_INT 4
30517: PUSH
30518: LD_INT 5
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: ST_TO_ADDR
30527: GO 31318
30529: LD_INT 12
30531: DOUBLE
30532: EQUAL
30533: IFTRUE 30537
30535: GO 30563
30537: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30538: LD_ADDR_VAR 0 3
30542: PUSH
30543: LD_INT 2
30545: PUSH
30546: LD_INT 3
30548: PUSH
30549: LD_INT 4
30551: PUSH
30552: LD_INT 5
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: ST_TO_ADDR
30561: GO 31318
30563: LD_INT 13
30565: DOUBLE
30566: EQUAL
30567: IFTRUE 30571
30569: GO 30597
30571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30572: LD_ADDR_VAR 0 3
30576: PUSH
30577: LD_INT 2
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: LD_INT 4
30585: PUSH
30586: LD_INT 5
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: ST_TO_ADDR
30595: GO 31318
30597: LD_INT 14
30599: DOUBLE
30600: EQUAL
30601: IFTRUE 30605
30603: GO 30623
30605: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30606: LD_ADDR_VAR 0 3
30610: PUSH
30611: LD_INT 4
30613: PUSH
30614: LD_INT 5
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: ST_TO_ADDR
30621: GO 31318
30623: LD_INT 6
30625: DOUBLE
30626: EQUAL
30627: IFTRUE 30631
30629: GO 30649
30631: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30632: LD_ADDR_VAR 0 3
30636: PUSH
30637: LD_INT 4
30639: PUSH
30640: LD_INT 5
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: ST_TO_ADDR
30647: GO 31318
30649: LD_INT 10
30651: DOUBLE
30652: EQUAL
30653: IFTRUE 30657
30655: GO 30675
30657: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30658: LD_ADDR_VAR 0 3
30662: PUSH
30663: LD_INT 4
30665: PUSH
30666: LD_INT 5
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: ST_TO_ADDR
30673: GO 31318
30675: LD_INT 22
30677: DOUBLE
30678: EQUAL
30679: IFTRUE 30683
30681: GO 30709
30683: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30684: LD_ADDR_VAR 0 3
30688: PUSH
30689: LD_INT 11
30691: PUSH
30692: LD_INT 12
30694: PUSH
30695: LD_INT 13
30697: PUSH
30698: LD_INT 14
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: ST_TO_ADDR
30707: GO 31318
30709: LD_INT 23
30711: DOUBLE
30712: EQUAL
30713: IFTRUE 30717
30715: GO 30743
30717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30718: LD_ADDR_VAR 0 3
30722: PUSH
30723: LD_INT 11
30725: PUSH
30726: LD_INT 12
30728: PUSH
30729: LD_INT 13
30731: PUSH
30732: LD_INT 14
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: ST_TO_ADDR
30741: GO 31318
30743: LD_INT 24
30745: DOUBLE
30746: EQUAL
30747: IFTRUE 30751
30749: GO 30777
30751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30752: LD_ADDR_VAR 0 3
30756: PUSH
30757: LD_INT 11
30759: PUSH
30760: LD_INT 12
30762: PUSH
30763: LD_INT 13
30765: PUSH
30766: LD_INT 14
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: ST_TO_ADDR
30775: GO 31318
30777: LD_INT 30
30779: DOUBLE
30780: EQUAL
30781: IFTRUE 30785
30783: GO 30811
30785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30786: LD_ADDR_VAR 0 3
30790: PUSH
30791: LD_INT 11
30793: PUSH
30794: LD_INT 12
30796: PUSH
30797: LD_INT 13
30799: PUSH
30800: LD_INT 14
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: ST_TO_ADDR
30809: GO 31318
30811: LD_INT 25
30813: DOUBLE
30814: EQUAL
30815: IFTRUE 30819
30817: GO 30837
30819: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30820: LD_ADDR_VAR 0 3
30824: PUSH
30825: LD_INT 13
30827: PUSH
30828: LD_INT 14
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: ST_TO_ADDR
30835: GO 31318
30837: LD_INT 27
30839: DOUBLE
30840: EQUAL
30841: IFTRUE 30845
30843: GO 30863
30845: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30846: LD_ADDR_VAR 0 3
30850: PUSH
30851: LD_INT 13
30853: PUSH
30854: LD_INT 14
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: ST_TO_ADDR
30861: GO 31318
30863: LD_INT 92
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 30897
30871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30872: LD_ADDR_VAR 0 3
30876: PUSH
30877: LD_INT 11
30879: PUSH
30880: LD_INT 12
30882: PUSH
30883: LD_INT 13
30885: PUSH
30886: LD_INT 14
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: ST_TO_ADDR
30895: GO 31318
30897: LD_INT 28
30899: DOUBLE
30900: EQUAL
30901: IFTRUE 30905
30903: GO 30923
30905: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30906: LD_ADDR_VAR 0 3
30910: PUSH
30911: LD_INT 13
30913: PUSH
30914: LD_INT 14
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: ST_TO_ADDR
30921: GO 31318
30923: LD_INT 29
30925: DOUBLE
30926: EQUAL
30927: IFTRUE 30931
30929: GO 30949
30931: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30932: LD_ADDR_VAR 0 3
30936: PUSH
30937: LD_INT 13
30939: PUSH
30940: LD_INT 14
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: ST_TO_ADDR
30947: GO 31318
30949: LD_INT 31
30951: DOUBLE
30952: EQUAL
30953: IFTRUE 30957
30955: GO 30975
30957: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30958: LD_ADDR_VAR 0 3
30962: PUSH
30963: LD_INT 13
30965: PUSH
30966: LD_INT 14
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: ST_TO_ADDR
30973: GO 31318
30975: LD_INT 26
30977: DOUBLE
30978: EQUAL
30979: IFTRUE 30983
30981: GO 31001
30983: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30984: LD_ADDR_VAR 0 3
30988: PUSH
30989: LD_INT 13
30991: PUSH
30992: LD_INT 14
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: ST_TO_ADDR
30999: GO 31318
31001: LD_INT 42
31003: DOUBLE
31004: EQUAL
31005: IFTRUE 31009
31007: GO 31035
31009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31010: LD_ADDR_VAR 0 3
31014: PUSH
31015: LD_INT 21
31017: PUSH
31018: LD_INT 22
31020: PUSH
31021: LD_INT 23
31023: PUSH
31024: LD_INT 24
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: ST_TO_ADDR
31033: GO 31318
31035: LD_INT 43
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31069
31043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: LD_INT 21
31051: PUSH
31052: LD_INT 22
31054: PUSH
31055: LD_INT 23
31057: PUSH
31058: LD_INT 24
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
31067: GO 31318
31069: LD_INT 44
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31077
31075: GO 31103
31077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: LD_INT 21
31085: PUSH
31086: LD_INT 22
31088: PUSH
31089: LD_INT 23
31091: PUSH
31092: LD_INT 24
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: ST_TO_ADDR
31101: GO 31318
31103: LD_INT 45
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31111
31109: GO 31137
31111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_INT 21
31119: PUSH
31120: LD_INT 22
31122: PUSH
31123: LD_INT 23
31125: PUSH
31126: LD_INT 24
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: ST_TO_ADDR
31135: GO 31318
31137: LD_INT 49
31139: DOUBLE
31140: EQUAL
31141: IFTRUE 31145
31143: GO 31171
31145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31146: LD_ADDR_VAR 0 3
31150: PUSH
31151: LD_INT 21
31153: PUSH
31154: LD_INT 22
31156: PUSH
31157: LD_INT 23
31159: PUSH
31160: LD_INT 24
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: ST_TO_ADDR
31169: GO 31318
31171: LD_INT 51
31173: DOUBLE
31174: EQUAL
31175: IFTRUE 31179
31177: GO 31205
31179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31180: LD_ADDR_VAR 0 3
31184: PUSH
31185: LD_INT 21
31187: PUSH
31188: LD_INT 22
31190: PUSH
31191: LD_INT 23
31193: PUSH
31194: LD_INT 24
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: ST_TO_ADDR
31203: GO 31318
31205: LD_INT 52
31207: DOUBLE
31208: EQUAL
31209: IFTRUE 31213
31211: GO 31239
31213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31214: LD_ADDR_VAR 0 3
31218: PUSH
31219: LD_INT 21
31221: PUSH
31222: LD_INT 22
31224: PUSH
31225: LD_INT 23
31227: PUSH
31228: LD_INT 24
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: ST_TO_ADDR
31237: GO 31318
31239: LD_INT 53
31241: DOUBLE
31242: EQUAL
31243: IFTRUE 31247
31245: GO 31265
31247: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31248: LD_ADDR_VAR 0 3
31252: PUSH
31253: LD_INT 23
31255: PUSH
31256: LD_INT 24
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: ST_TO_ADDR
31263: GO 31318
31265: LD_INT 46
31267: DOUBLE
31268: EQUAL
31269: IFTRUE 31273
31271: GO 31291
31273: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31274: LD_ADDR_VAR 0 3
31278: PUSH
31279: LD_INT 23
31281: PUSH
31282: LD_INT 24
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: ST_TO_ADDR
31289: GO 31318
31291: LD_INT 47
31293: DOUBLE
31294: EQUAL
31295: IFTRUE 31299
31297: GO 31317
31299: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31300: LD_ADDR_VAR 0 3
31304: PUSH
31305: LD_INT 23
31307: PUSH
31308: LD_INT 24
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: ST_TO_ADDR
31315: GO 31318
31317: POP
// result := ( chassis in result ) ;
31318: LD_ADDR_VAR 0 3
31322: PUSH
31323: LD_VAR 0 1
31327: PUSH
31328: LD_VAR 0 3
31332: IN
31333: ST_TO_ADDR
// end ;
31334: LD_VAR 0 3
31338: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31339: LD_INT 0
31341: PPUSH
31342: PPUSH
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
// result := array ;
31348: LD_ADDR_VAR 0 5
31352: PUSH
31353: LD_VAR 0 1
31357: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31358: LD_VAR 0 1
31362: NOT
31363: PUSH
31364: LD_VAR 0 2
31368: NOT
31369: OR
31370: PUSH
31371: LD_VAR 0 3
31375: NOT
31376: OR
31377: PUSH
31378: LD_VAR 0 2
31382: PUSH
31383: LD_VAR 0 1
31387: GREATER
31388: OR
31389: PUSH
31390: LD_VAR 0 3
31394: PUSH
31395: LD_VAR 0 1
31399: GREATER
31400: OR
31401: IFFALSE 31405
// exit ;
31403: GO 31701
// if direction then
31405: LD_VAR 0 4
31409: IFFALSE 31473
// begin d := 1 ;
31411: LD_ADDR_VAR 0 9
31415: PUSH
31416: LD_INT 1
31418: ST_TO_ADDR
// if i_from > i_to then
31419: LD_VAR 0 2
31423: PUSH
31424: LD_VAR 0 3
31428: GREATER
31429: IFFALSE 31455
// length := ( array - i_from ) + i_to else
31431: LD_ADDR_VAR 0 11
31435: PUSH
31436: LD_VAR 0 1
31440: PUSH
31441: LD_VAR 0 2
31445: MINUS
31446: PUSH
31447: LD_VAR 0 3
31451: PLUS
31452: ST_TO_ADDR
31453: GO 31471
// length := i_to - i_from ;
31455: LD_ADDR_VAR 0 11
31459: PUSH
31460: LD_VAR 0 3
31464: PUSH
31465: LD_VAR 0 2
31469: MINUS
31470: ST_TO_ADDR
// end else
31471: GO 31534
// begin d := - 1 ;
31473: LD_ADDR_VAR 0 9
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: ST_TO_ADDR
// if i_from > i_to then
31482: LD_VAR 0 2
31486: PUSH
31487: LD_VAR 0 3
31491: GREATER
31492: IFFALSE 31512
// length := i_from - i_to else
31494: LD_ADDR_VAR 0 11
31498: PUSH
31499: LD_VAR 0 2
31503: PUSH
31504: LD_VAR 0 3
31508: MINUS
31509: ST_TO_ADDR
31510: GO 31534
// length := ( array - i_to ) + i_from ;
31512: LD_ADDR_VAR 0 11
31516: PUSH
31517: LD_VAR 0 1
31521: PUSH
31522: LD_VAR 0 3
31526: MINUS
31527: PUSH
31528: LD_VAR 0 2
31532: PLUS
31533: ST_TO_ADDR
// end ; if not length then
31534: LD_VAR 0 11
31538: NOT
31539: IFFALSE 31543
// exit ;
31541: GO 31701
// tmp := array ;
31543: LD_ADDR_VAR 0 10
31547: PUSH
31548: LD_VAR 0 1
31552: ST_TO_ADDR
// for i = 1 to length do
31553: LD_ADDR_VAR 0 6
31557: PUSH
31558: DOUBLE
31559: LD_INT 1
31561: DEC
31562: ST_TO_ADDR
31563: LD_VAR 0 11
31567: PUSH
31568: FOR_TO
31569: IFFALSE 31689
// begin for j = 1 to array do
31571: LD_ADDR_VAR 0 7
31575: PUSH
31576: DOUBLE
31577: LD_INT 1
31579: DEC
31580: ST_TO_ADDR
31581: LD_VAR 0 1
31585: PUSH
31586: FOR_TO
31587: IFFALSE 31675
// begin k := j + d ;
31589: LD_ADDR_VAR 0 8
31593: PUSH
31594: LD_VAR 0 7
31598: PUSH
31599: LD_VAR 0 9
31603: PLUS
31604: ST_TO_ADDR
// if k > array then
31605: LD_VAR 0 8
31609: PUSH
31610: LD_VAR 0 1
31614: GREATER
31615: IFFALSE 31625
// k := 1 ;
31617: LD_ADDR_VAR 0 8
31621: PUSH
31622: LD_INT 1
31624: ST_TO_ADDR
// if not k then
31625: LD_VAR 0 8
31629: NOT
31630: IFFALSE 31642
// k := array ;
31632: LD_ADDR_VAR 0 8
31636: PUSH
31637: LD_VAR 0 1
31641: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31642: LD_ADDR_VAR 0 10
31646: PUSH
31647: LD_VAR 0 10
31651: PPUSH
31652: LD_VAR 0 8
31656: PPUSH
31657: LD_VAR 0 1
31661: PUSH
31662: LD_VAR 0 7
31666: ARRAY
31667: PPUSH
31668: CALL_OW 1
31672: ST_TO_ADDR
// end ;
31673: GO 31586
31675: POP
31676: POP
// array := tmp ;
31677: LD_ADDR_VAR 0 1
31681: PUSH
31682: LD_VAR 0 10
31686: ST_TO_ADDR
// end ;
31687: GO 31568
31689: POP
31690: POP
// result := array ;
31691: LD_ADDR_VAR 0 5
31695: PUSH
31696: LD_VAR 0 1
31700: ST_TO_ADDR
// end ;
31701: LD_VAR 0 5
31705: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31706: LD_INT 0
31708: PPUSH
31709: PPUSH
// result := 0 ;
31710: LD_ADDR_VAR 0 3
31714: PUSH
31715: LD_INT 0
31717: ST_TO_ADDR
// if not array or not value in array then
31718: LD_VAR 0 1
31722: NOT
31723: PUSH
31724: LD_VAR 0 2
31728: PUSH
31729: LD_VAR 0 1
31733: IN
31734: NOT
31735: OR
31736: IFFALSE 31740
// exit ;
31738: GO 31794
// for i = 1 to array do
31740: LD_ADDR_VAR 0 4
31744: PUSH
31745: DOUBLE
31746: LD_INT 1
31748: DEC
31749: ST_TO_ADDR
31750: LD_VAR 0 1
31754: PUSH
31755: FOR_TO
31756: IFFALSE 31792
// if value = array [ i ] then
31758: LD_VAR 0 2
31762: PUSH
31763: LD_VAR 0 1
31767: PUSH
31768: LD_VAR 0 4
31772: ARRAY
31773: EQUAL
31774: IFFALSE 31790
// begin result := i ;
31776: LD_ADDR_VAR 0 3
31780: PUSH
31781: LD_VAR 0 4
31785: ST_TO_ADDR
// exit ;
31786: POP
31787: POP
31788: GO 31794
// end ;
31790: GO 31755
31792: POP
31793: POP
// end ;
31794: LD_VAR 0 3
31798: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31799: LD_INT 0
31801: PPUSH
// vc_chassis := chassis ;
31802: LD_ADDR_OWVAR 37
31806: PUSH
31807: LD_VAR 0 1
31811: ST_TO_ADDR
// vc_engine := engine ;
31812: LD_ADDR_OWVAR 39
31816: PUSH
31817: LD_VAR 0 2
31821: ST_TO_ADDR
// vc_control := control ;
31822: LD_ADDR_OWVAR 38
31826: PUSH
31827: LD_VAR 0 3
31831: ST_TO_ADDR
// vc_weapon := weapon ;
31832: LD_ADDR_OWVAR 40
31836: PUSH
31837: LD_VAR 0 4
31841: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31842: LD_ADDR_OWVAR 41
31846: PUSH
31847: LD_VAR 0 5
31851: ST_TO_ADDR
// end ;
31852: LD_VAR 0 6
31856: RET
// export function WantPlant ( unit ) ; var task ; begin
31857: LD_INT 0
31859: PPUSH
31860: PPUSH
// result := false ;
31861: LD_ADDR_VAR 0 2
31865: PUSH
31866: LD_INT 0
31868: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31869: LD_ADDR_VAR 0 3
31873: PUSH
31874: LD_VAR 0 1
31878: PPUSH
31879: CALL_OW 437
31883: ST_TO_ADDR
// if task then
31884: LD_VAR 0 3
31888: IFFALSE 31916
// if task [ 1 ] [ 1 ] = p then
31890: LD_VAR 0 3
31894: PUSH
31895: LD_INT 1
31897: ARRAY
31898: PUSH
31899: LD_INT 1
31901: ARRAY
31902: PUSH
31903: LD_STRING p
31905: EQUAL
31906: IFFALSE 31916
// result := true ;
31908: LD_ADDR_VAR 0 2
31912: PUSH
31913: LD_INT 1
31915: ST_TO_ADDR
// end ;
31916: LD_VAR 0 2
31920: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31921: LD_INT 0
31923: PPUSH
31924: PPUSH
31925: PPUSH
31926: PPUSH
// if pos < 1 then
31927: LD_VAR 0 2
31931: PUSH
31932: LD_INT 1
31934: LESS
31935: IFFALSE 31939
// exit ;
31937: GO 32242
// if pos = 1 then
31939: LD_VAR 0 2
31943: PUSH
31944: LD_INT 1
31946: EQUAL
31947: IFFALSE 31980
// result := Replace ( arr , pos [ 1 ] , value ) else
31949: LD_ADDR_VAR 0 4
31953: PUSH
31954: LD_VAR 0 1
31958: PPUSH
31959: LD_VAR 0 2
31963: PUSH
31964: LD_INT 1
31966: ARRAY
31967: PPUSH
31968: LD_VAR 0 3
31972: PPUSH
31973: CALL_OW 1
31977: ST_TO_ADDR
31978: GO 32242
// begin tmp := arr ;
31980: LD_ADDR_VAR 0 6
31984: PUSH
31985: LD_VAR 0 1
31989: ST_TO_ADDR
// s_arr := [ tmp ] ;
31990: LD_ADDR_VAR 0 7
31994: PUSH
31995: LD_VAR 0 6
31999: PUSH
32000: EMPTY
32001: LIST
32002: ST_TO_ADDR
// for i = 1 to pos - 1 do
32003: LD_ADDR_VAR 0 5
32007: PUSH
32008: DOUBLE
32009: LD_INT 1
32011: DEC
32012: ST_TO_ADDR
32013: LD_VAR 0 2
32017: PUSH
32018: LD_INT 1
32020: MINUS
32021: PUSH
32022: FOR_TO
32023: IFFALSE 32068
// begin tmp := tmp [ pos [ i ] ] ;
32025: LD_ADDR_VAR 0 6
32029: PUSH
32030: LD_VAR 0 6
32034: PUSH
32035: LD_VAR 0 2
32039: PUSH
32040: LD_VAR 0 5
32044: ARRAY
32045: ARRAY
32046: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32047: LD_ADDR_VAR 0 7
32051: PUSH
32052: LD_VAR 0 7
32056: PUSH
32057: LD_VAR 0 6
32061: PUSH
32062: EMPTY
32063: LIST
32064: ADD
32065: ST_TO_ADDR
// end ;
32066: GO 32022
32068: POP
32069: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32070: LD_ADDR_VAR 0 6
32074: PUSH
32075: LD_VAR 0 6
32079: PPUSH
32080: LD_VAR 0 2
32084: PUSH
32085: LD_VAR 0 2
32089: ARRAY
32090: PPUSH
32091: LD_VAR 0 3
32095: PPUSH
32096: CALL_OW 1
32100: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32101: LD_ADDR_VAR 0 7
32105: PUSH
32106: LD_VAR 0 7
32110: PPUSH
32111: LD_VAR 0 7
32115: PPUSH
32116: LD_VAR 0 6
32120: PPUSH
32121: CALL_OW 1
32125: ST_TO_ADDR
// for i = s_arr downto 2 do
32126: LD_ADDR_VAR 0 5
32130: PUSH
32131: DOUBLE
32132: LD_VAR 0 7
32136: INC
32137: ST_TO_ADDR
32138: LD_INT 2
32140: PUSH
32141: FOR_DOWNTO
32142: IFFALSE 32226
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32144: LD_ADDR_VAR 0 6
32148: PUSH
32149: LD_VAR 0 7
32153: PUSH
32154: LD_VAR 0 5
32158: PUSH
32159: LD_INT 1
32161: MINUS
32162: ARRAY
32163: PPUSH
32164: LD_VAR 0 2
32168: PUSH
32169: LD_VAR 0 5
32173: PUSH
32174: LD_INT 1
32176: MINUS
32177: ARRAY
32178: PPUSH
32179: LD_VAR 0 7
32183: PUSH
32184: LD_VAR 0 5
32188: ARRAY
32189: PPUSH
32190: CALL_OW 1
32194: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32195: LD_ADDR_VAR 0 7
32199: PUSH
32200: LD_VAR 0 7
32204: PPUSH
32205: LD_VAR 0 5
32209: PUSH
32210: LD_INT 1
32212: MINUS
32213: PPUSH
32214: LD_VAR 0 6
32218: PPUSH
32219: CALL_OW 1
32223: ST_TO_ADDR
// end ;
32224: GO 32141
32226: POP
32227: POP
// result := s_arr [ 1 ] ;
32228: LD_ADDR_VAR 0 4
32232: PUSH
32233: LD_VAR 0 7
32237: PUSH
32238: LD_INT 1
32240: ARRAY
32241: ST_TO_ADDR
// end ; end ;
32242: LD_VAR 0 4
32246: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32247: LD_INT 0
32249: PPUSH
32250: PPUSH
// if not list then
32251: LD_VAR 0 1
32255: NOT
32256: IFFALSE 32260
// exit ;
32258: GO 32351
// i := list [ pos1 ] ;
32260: LD_ADDR_VAR 0 5
32264: PUSH
32265: LD_VAR 0 1
32269: PUSH
32270: LD_VAR 0 2
32274: ARRAY
32275: ST_TO_ADDR
// if not i then
32276: LD_VAR 0 5
32280: NOT
32281: IFFALSE 32285
// exit ;
32283: GO 32351
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32285: LD_ADDR_VAR 0 1
32289: PUSH
32290: LD_VAR 0 1
32294: PPUSH
32295: LD_VAR 0 2
32299: PPUSH
32300: LD_VAR 0 1
32304: PUSH
32305: LD_VAR 0 3
32309: ARRAY
32310: PPUSH
32311: CALL_OW 1
32315: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32316: LD_ADDR_VAR 0 1
32320: PUSH
32321: LD_VAR 0 1
32325: PPUSH
32326: LD_VAR 0 3
32330: PPUSH
32331: LD_VAR 0 5
32335: PPUSH
32336: CALL_OW 1
32340: ST_TO_ADDR
// result := list ;
32341: LD_ADDR_VAR 0 4
32345: PUSH
32346: LD_VAR 0 1
32350: ST_TO_ADDR
// end ;
32351: LD_VAR 0 4
32355: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32356: LD_INT 0
32358: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32359: LD_ADDR_VAR 0 5
32363: PUSH
32364: LD_VAR 0 1
32368: PPUSH
32369: CALL_OW 250
32373: PPUSH
32374: LD_VAR 0 1
32378: PPUSH
32379: CALL_OW 251
32383: PPUSH
32384: LD_VAR 0 2
32388: PPUSH
32389: LD_VAR 0 3
32393: PPUSH
32394: LD_VAR 0 4
32398: PPUSH
32399: CALL 32777 0 5
32403: ST_TO_ADDR
// end ;
32404: LD_VAR 0 5
32408: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32409: LD_INT 0
32411: PPUSH
32412: PPUSH
32413: PPUSH
32414: PPUSH
// if not list or not unit then
32415: LD_VAR 0 2
32419: NOT
32420: PUSH
32421: LD_VAR 0 1
32425: NOT
32426: OR
32427: IFFALSE 32431
// exit ;
32429: GO 32772
// result := [ ] ;
32431: LD_ADDR_VAR 0 5
32435: PUSH
32436: EMPTY
32437: ST_TO_ADDR
// for i in list do
32438: LD_ADDR_VAR 0 6
32442: PUSH
32443: LD_VAR 0 2
32447: PUSH
32448: FOR_IN
32449: IFFALSE 32667
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32451: LD_ADDR_VAR 0 8
32455: PUSH
32456: LD_VAR 0 1
32460: PPUSH
32461: LD_VAR 0 6
32465: PUSH
32466: LD_INT 1
32468: ARRAY
32469: PPUSH
32470: LD_VAR 0 6
32474: PUSH
32475: LD_INT 2
32477: ARRAY
32478: PPUSH
32479: CALL_OW 297
32483: ST_TO_ADDR
// if not Count ( result ) then
32484: LD_VAR 0 5
32488: PPUSH
32489: CALL 29061 0 1
32493: NOT
32494: IFFALSE 32527
// begin result := Join ( result , [ i , tmp ] ) ;
32496: LD_ADDR_VAR 0 5
32500: PUSH
32501: LD_VAR 0 5
32505: PPUSH
32506: LD_VAR 0 6
32510: PUSH
32511: LD_VAR 0 8
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PPUSH
32520: CALL 64670 0 2
32524: ST_TO_ADDR
// continue ;
32525: GO 32448
// end ; if result [ result ] [ 2 ] <= tmp then
32527: LD_VAR 0 5
32531: PUSH
32532: LD_VAR 0 5
32536: ARRAY
32537: PUSH
32538: LD_INT 2
32540: ARRAY
32541: PUSH
32542: LD_VAR 0 8
32546: LESSEQUAL
32547: IFFALSE 32580
// result := Join ( result , [ i , tmp ] ) else
32549: LD_ADDR_VAR 0 5
32553: PUSH
32554: LD_VAR 0 5
32558: PPUSH
32559: LD_VAR 0 6
32563: PUSH
32564: LD_VAR 0 8
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PPUSH
32573: CALL 64670 0 2
32577: ST_TO_ADDR
32578: GO 32665
// begin for j := 1 to Count ( result ) do
32580: LD_ADDR_VAR 0 7
32584: PUSH
32585: DOUBLE
32586: LD_INT 1
32588: DEC
32589: ST_TO_ADDR
32590: LD_VAR 0 5
32594: PPUSH
32595: CALL 29061 0 1
32599: PUSH
32600: FOR_TO
32601: IFFALSE 32663
// begin if tmp < result [ j ] [ 2 ] then
32603: LD_VAR 0 8
32607: PUSH
32608: LD_VAR 0 5
32612: PUSH
32613: LD_VAR 0 7
32617: ARRAY
32618: PUSH
32619: LD_INT 2
32621: ARRAY
32622: LESS
32623: IFFALSE 32661
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32625: LD_ADDR_VAR 0 5
32629: PUSH
32630: LD_VAR 0 5
32634: PPUSH
32635: LD_VAR 0 7
32639: PPUSH
32640: LD_VAR 0 6
32644: PUSH
32645: LD_VAR 0 8
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PPUSH
32654: CALL_OW 2
32658: ST_TO_ADDR
// break ;
32659: GO 32663
// end ; end ;
32661: GO 32600
32663: POP
32664: POP
// end ; end ;
32665: GO 32448
32667: POP
32668: POP
// if result and not asc then
32669: LD_VAR 0 5
32673: PUSH
32674: LD_VAR 0 3
32678: NOT
32679: AND
32680: IFFALSE 32697
// result := ReverseArray ( result ) ;
32682: LD_ADDR_VAR 0 5
32686: PUSH
32687: LD_VAR 0 5
32691: PPUSH
32692: CALL 59937 0 1
32696: ST_TO_ADDR
// tmp := [ ] ;
32697: LD_ADDR_VAR 0 8
32701: PUSH
32702: EMPTY
32703: ST_TO_ADDR
// if mode then
32704: LD_VAR 0 4
32708: IFFALSE 32772
// begin for i := 1 to result do
32710: LD_ADDR_VAR 0 6
32714: PUSH
32715: DOUBLE
32716: LD_INT 1
32718: DEC
32719: ST_TO_ADDR
32720: LD_VAR 0 5
32724: PUSH
32725: FOR_TO
32726: IFFALSE 32760
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32728: LD_ADDR_VAR 0 8
32732: PUSH
32733: LD_VAR 0 8
32737: PPUSH
32738: LD_VAR 0 5
32742: PUSH
32743: LD_VAR 0 6
32747: ARRAY
32748: PUSH
32749: LD_INT 1
32751: ARRAY
32752: PPUSH
32753: CALL 64670 0 2
32757: ST_TO_ADDR
32758: GO 32725
32760: POP
32761: POP
// result := tmp ;
32762: LD_ADDR_VAR 0 5
32766: PUSH
32767: LD_VAR 0 8
32771: ST_TO_ADDR
// end ; end ;
32772: LD_VAR 0 5
32776: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32777: LD_INT 0
32779: PPUSH
32780: PPUSH
32781: PPUSH
32782: PPUSH
// if not list then
32783: LD_VAR 0 3
32787: NOT
32788: IFFALSE 32792
// exit ;
32790: GO 33180
// result := [ ] ;
32792: LD_ADDR_VAR 0 6
32796: PUSH
32797: EMPTY
32798: ST_TO_ADDR
// for i in list do
32799: LD_ADDR_VAR 0 7
32803: PUSH
32804: LD_VAR 0 3
32808: PUSH
32809: FOR_IN
32810: IFFALSE 33012
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32812: LD_ADDR_VAR 0 9
32816: PUSH
32817: LD_VAR 0 7
32821: PPUSH
32822: LD_VAR 0 1
32826: PPUSH
32827: LD_VAR 0 2
32831: PPUSH
32832: CALL_OW 297
32836: ST_TO_ADDR
// if not result then
32837: LD_VAR 0 6
32841: NOT
32842: IFFALSE 32868
// result := [ [ i , tmp ] ] else
32844: LD_ADDR_VAR 0 6
32848: PUSH
32849: LD_VAR 0 7
32853: PUSH
32854: LD_VAR 0 9
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: EMPTY
32864: LIST
32865: ST_TO_ADDR
32866: GO 33010
// begin if result [ result ] [ 2 ] <= tmp then
32868: LD_VAR 0 6
32872: PUSH
32873: LD_VAR 0 6
32877: ARRAY
32878: PUSH
32879: LD_INT 2
32881: ARRAY
32882: PUSH
32883: LD_VAR 0 9
32887: LESSEQUAL
32888: IFFALSE 32930
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32890: LD_ADDR_VAR 0 6
32894: PUSH
32895: LD_VAR 0 6
32899: PPUSH
32900: LD_VAR 0 6
32904: PUSH
32905: LD_INT 1
32907: PLUS
32908: PPUSH
32909: LD_VAR 0 7
32913: PUSH
32914: LD_VAR 0 9
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PPUSH
32923: CALL_OW 2
32927: ST_TO_ADDR
32928: GO 33010
// for j := 1 to result do
32930: LD_ADDR_VAR 0 8
32934: PUSH
32935: DOUBLE
32936: LD_INT 1
32938: DEC
32939: ST_TO_ADDR
32940: LD_VAR 0 6
32944: PUSH
32945: FOR_TO
32946: IFFALSE 33008
// begin if tmp < result [ j ] [ 2 ] then
32948: LD_VAR 0 9
32952: PUSH
32953: LD_VAR 0 6
32957: PUSH
32958: LD_VAR 0 8
32962: ARRAY
32963: PUSH
32964: LD_INT 2
32966: ARRAY
32967: LESS
32968: IFFALSE 33006
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32970: LD_ADDR_VAR 0 6
32974: PUSH
32975: LD_VAR 0 6
32979: PPUSH
32980: LD_VAR 0 8
32984: PPUSH
32985: LD_VAR 0 7
32989: PUSH
32990: LD_VAR 0 9
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PPUSH
32999: CALL_OW 2
33003: ST_TO_ADDR
// break ;
33004: GO 33008
// end ; end ;
33006: GO 32945
33008: POP
33009: POP
// end ; end ;
33010: GO 32809
33012: POP
33013: POP
// if result and not asc then
33014: LD_VAR 0 6
33018: PUSH
33019: LD_VAR 0 4
33023: NOT
33024: AND
33025: IFFALSE 33100
// begin tmp := result ;
33027: LD_ADDR_VAR 0 9
33031: PUSH
33032: LD_VAR 0 6
33036: ST_TO_ADDR
// for i = tmp downto 1 do
33037: LD_ADDR_VAR 0 7
33041: PUSH
33042: DOUBLE
33043: LD_VAR 0 9
33047: INC
33048: ST_TO_ADDR
33049: LD_INT 1
33051: PUSH
33052: FOR_DOWNTO
33053: IFFALSE 33098
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33055: LD_ADDR_VAR 0 6
33059: PUSH
33060: LD_VAR 0 6
33064: PPUSH
33065: LD_VAR 0 9
33069: PUSH
33070: LD_VAR 0 7
33074: MINUS
33075: PUSH
33076: LD_INT 1
33078: PLUS
33079: PPUSH
33080: LD_VAR 0 9
33084: PUSH
33085: LD_VAR 0 7
33089: ARRAY
33090: PPUSH
33091: CALL_OW 1
33095: ST_TO_ADDR
33096: GO 33052
33098: POP
33099: POP
// end ; tmp := [ ] ;
33100: LD_ADDR_VAR 0 9
33104: PUSH
33105: EMPTY
33106: ST_TO_ADDR
// if mode then
33107: LD_VAR 0 5
33111: IFFALSE 33180
// begin for i = 1 to result do
33113: LD_ADDR_VAR 0 7
33117: PUSH
33118: DOUBLE
33119: LD_INT 1
33121: DEC
33122: ST_TO_ADDR
33123: LD_VAR 0 6
33127: PUSH
33128: FOR_TO
33129: IFFALSE 33168
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33131: LD_ADDR_VAR 0 9
33135: PUSH
33136: LD_VAR 0 9
33140: PPUSH
33141: LD_VAR 0 7
33145: PPUSH
33146: LD_VAR 0 6
33150: PUSH
33151: LD_VAR 0 7
33155: ARRAY
33156: PUSH
33157: LD_INT 1
33159: ARRAY
33160: PPUSH
33161: CALL_OW 1
33165: ST_TO_ADDR
33166: GO 33128
33168: POP
33169: POP
// result := tmp ;
33170: LD_ADDR_VAR 0 6
33174: PUSH
33175: LD_VAR 0 9
33179: ST_TO_ADDR
// end ; end ;
33180: LD_VAR 0 6
33184: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33185: LD_INT 0
33187: PPUSH
33188: PPUSH
33189: PPUSH
33190: PPUSH
33191: PPUSH
33192: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33193: LD_ADDR_VAR 0 5
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: EMPTY
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: ST_TO_ADDR
// if not x or not y then
33215: LD_VAR 0 2
33219: NOT
33220: PUSH
33221: LD_VAR 0 3
33225: NOT
33226: OR
33227: IFFALSE 33231
// exit ;
33229: GO 34881
// if not range then
33231: LD_VAR 0 4
33235: NOT
33236: IFFALSE 33246
// range := 10 ;
33238: LD_ADDR_VAR 0 4
33242: PUSH
33243: LD_INT 10
33245: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33246: LD_ADDR_VAR 0 8
33250: PUSH
33251: LD_INT 81
33253: PUSH
33254: LD_VAR 0 1
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 92
33265: PUSH
33266: LD_VAR 0 2
33270: PUSH
33271: LD_VAR 0 3
33275: PUSH
33276: LD_VAR 0 4
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 3
33289: PUSH
33290: LD_INT 21
33292: PUSH
33293: LD_INT 3
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: LIST
33308: PPUSH
33309: CALL_OW 69
33313: ST_TO_ADDR
// if not tmp then
33314: LD_VAR 0 8
33318: NOT
33319: IFFALSE 33323
// exit ;
33321: GO 34881
// for i in tmp do
33323: LD_ADDR_VAR 0 6
33327: PUSH
33328: LD_VAR 0 8
33332: PUSH
33333: FOR_IN
33334: IFFALSE 34856
// begin points := [ 0 , 0 , 0 ] ;
33336: LD_ADDR_VAR 0 9
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: ST_TO_ADDR
// bpoints := 1 ;
33355: LD_ADDR_VAR 0 10
33359: PUSH
33360: LD_INT 1
33362: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33363: LD_VAR 0 6
33367: PPUSH
33368: CALL_OW 247
33372: PUSH
33373: LD_INT 1
33375: DOUBLE
33376: EQUAL
33377: IFTRUE 33381
33379: GO 33959
33381: POP
// begin if GetClass ( i ) = 1 then
33382: LD_VAR 0 6
33386: PPUSH
33387: CALL_OW 257
33391: PUSH
33392: LD_INT 1
33394: EQUAL
33395: IFFALSE 33416
// points := [ 10 , 5 , 3 ] ;
33397: LD_ADDR_VAR 0 9
33401: PUSH
33402: LD_INT 10
33404: PUSH
33405: LD_INT 5
33407: PUSH
33408: LD_INT 3
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33416: LD_VAR 0 6
33420: PPUSH
33421: CALL_OW 257
33425: PUSH
33426: LD_INT 2
33428: PUSH
33429: LD_INT 3
33431: PUSH
33432: LD_INT 4
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: LIST
33439: IN
33440: IFFALSE 33461
// points := [ 3 , 2 , 1 ] ;
33442: LD_ADDR_VAR 0 9
33446: PUSH
33447: LD_INT 3
33449: PUSH
33450: LD_INT 2
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33461: LD_VAR 0 6
33465: PPUSH
33466: CALL_OW 257
33470: PUSH
33471: LD_INT 5
33473: EQUAL
33474: IFFALSE 33495
// points := [ 130 , 5 , 2 ] ;
33476: LD_ADDR_VAR 0 9
33480: PUSH
33481: LD_INT 130
33483: PUSH
33484: LD_INT 5
33486: PUSH
33487: LD_INT 2
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: LIST
33494: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33495: LD_VAR 0 6
33499: PPUSH
33500: CALL_OW 257
33504: PUSH
33505: LD_INT 8
33507: EQUAL
33508: IFFALSE 33529
// points := [ 35 , 35 , 30 ] ;
33510: LD_ADDR_VAR 0 9
33514: PUSH
33515: LD_INT 35
33517: PUSH
33518: LD_INT 35
33520: PUSH
33521: LD_INT 30
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: LIST
33528: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33529: LD_VAR 0 6
33533: PPUSH
33534: CALL_OW 257
33538: PUSH
33539: LD_INT 9
33541: EQUAL
33542: IFFALSE 33563
// points := [ 20 , 55 , 40 ] ;
33544: LD_ADDR_VAR 0 9
33548: PUSH
33549: LD_INT 20
33551: PUSH
33552: LD_INT 55
33554: PUSH
33555: LD_INT 40
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: LIST
33562: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33563: LD_VAR 0 6
33567: PPUSH
33568: CALL_OW 257
33572: PUSH
33573: LD_INT 12
33575: PUSH
33576: LD_INT 16
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: IN
33583: IFFALSE 33604
// points := [ 5 , 3 , 2 ] ;
33585: LD_ADDR_VAR 0 9
33589: PUSH
33590: LD_INT 5
33592: PUSH
33593: LD_INT 3
33595: PUSH
33596: LD_INT 2
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33604: LD_VAR 0 6
33608: PPUSH
33609: CALL_OW 257
33613: PUSH
33614: LD_INT 17
33616: EQUAL
33617: IFFALSE 33638
// points := [ 100 , 50 , 75 ] ;
33619: LD_ADDR_VAR 0 9
33623: PUSH
33624: LD_INT 100
33626: PUSH
33627: LD_INT 50
33629: PUSH
33630: LD_INT 75
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33638: LD_VAR 0 6
33642: PPUSH
33643: CALL_OW 257
33647: PUSH
33648: LD_INT 15
33650: EQUAL
33651: IFFALSE 33672
// points := [ 10 , 5 , 3 ] ;
33653: LD_ADDR_VAR 0 9
33657: PUSH
33658: LD_INT 10
33660: PUSH
33661: LD_INT 5
33663: PUSH
33664: LD_INT 3
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33672: LD_VAR 0 6
33676: PPUSH
33677: CALL_OW 257
33681: PUSH
33682: LD_INT 14
33684: EQUAL
33685: IFFALSE 33706
// points := [ 10 , 0 , 0 ] ;
33687: LD_ADDR_VAR 0 9
33691: PUSH
33692: LD_INT 10
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33706: LD_VAR 0 6
33710: PPUSH
33711: CALL_OW 257
33715: PUSH
33716: LD_INT 11
33718: EQUAL
33719: IFFALSE 33740
// points := [ 30 , 10 , 5 ] ;
33721: LD_ADDR_VAR 0 9
33725: PUSH
33726: LD_INT 30
33728: PUSH
33729: LD_INT 10
33731: PUSH
33732: LD_INT 5
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33740: LD_VAR 0 1
33744: PPUSH
33745: LD_INT 5
33747: PPUSH
33748: CALL_OW 321
33752: PUSH
33753: LD_INT 2
33755: EQUAL
33756: IFFALSE 33773
// bpoints := bpoints * 1.8 ;
33758: LD_ADDR_VAR 0 10
33762: PUSH
33763: LD_VAR 0 10
33767: PUSH
33768: LD_REAL  1.80000000000000E+0000
33771: MUL
33772: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33773: LD_VAR 0 6
33777: PPUSH
33778: CALL_OW 257
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: LD_INT 2
33788: PUSH
33789: LD_INT 3
33791: PUSH
33792: LD_INT 4
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: IN
33801: PUSH
33802: LD_VAR 0 1
33806: PPUSH
33807: LD_INT 51
33809: PPUSH
33810: CALL_OW 321
33814: PUSH
33815: LD_INT 2
33817: EQUAL
33818: AND
33819: IFFALSE 33836
// bpoints := bpoints * 1.2 ;
33821: LD_ADDR_VAR 0 10
33825: PUSH
33826: LD_VAR 0 10
33830: PUSH
33831: LD_REAL  1.20000000000000E+0000
33834: MUL
33835: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33836: LD_VAR 0 6
33840: PPUSH
33841: CALL_OW 257
33845: PUSH
33846: LD_INT 5
33848: PUSH
33849: LD_INT 7
33851: PUSH
33852: LD_INT 9
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: LIST
33859: IN
33860: PUSH
33861: LD_VAR 0 1
33865: PPUSH
33866: LD_INT 52
33868: PPUSH
33869: CALL_OW 321
33873: PUSH
33874: LD_INT 2
33876: EQUAL
33877: AND
33878: IFFALSE 33895
// bpoints := bpoints * 1.5 ;
33880: LD_ADDR_VAR 0 10
33884: PUSH
33885: LD_VAR 0 10
33889: PUSH
33890: LD_REAL  1.50000000000000E+0000
33893: MUL
33894: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33895: LD_VAR 0 1
33899: PPUSH
33900: LD_INT 66
33902: PPUSH
33903: CALL_OW 321
33907: PUSH
33908: LD_INT 2
33910: EQUAL
33911: IFFALSE 33928
// bpoints := bpoints * 1.1 ;
33913: LD_ADDR_VAR 0 10
33917: PUSH
33918: LD_VAR 0 10
33922: PUSH
33923: LD_REAL  1.10000000000000E+0000
33926: MUL
33927: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33928: LD_ADDR_VAR 0 10
33932: PUSH
33933: LD_VAR 0 10
33937: PUSH
33938: LD_VAR 0 6
33942: PPUSH
33943: LD_INT 1
33945: PPUSH
33946: CALL_OW 259
33950: PUSH
33951: LD_REAL  1.15000000000000E+0000
33954: MUL
33955: MUL
33956: ST_TO_ADDR
// end ; unit_vehicle :
33957: GO 34785
33959: LD_INT 2
33961: DOUBLE
33962: EQUAL
33963: IFTRUE 33967
33965: GO 34773
33967: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33968: LD_VAR 0 6
33972: PPUSH
33973: CALL_OW 264
33977: PUSH
33978: LD_INT 2
33980: PUSH
33981: LD_INT 42
33983: PUSH
33984: LD_INT 24
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: IN
33992: IFFALSE 34013
// points := [ 25 , 5 , 3 ] ;
33994: LD_ADDR_VAR 0 9
33998: PUSH
33999: LD_INT 25
34001: PUSH
34002: LD_INT 5
34004: PUSH
34005: LD_INT 3
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: LIST
34012: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34013: LD_VAR 0 6
34017: PPUSH
34018: CALL_OW 264
34022: PUSH
34023: LD_INT 4
34025: PUSH
34026: LD_INT 43
34028: PUSH
34029: LD_INT 25
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: LIST
34036: IN
34037: IFFALSE 34058
// points := [ 40 , 15 , 5 ] ;
34039: LD_ADDR_VAR 0 9
34043: PUSH
34044: LD_INT 40
34046: PUSH
34047: LD_INT 15
34049: PUSH
34050: LD_INT 5
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34058: LD_VAR 0 6
34062: PPUSH
34063: CALL_OW 264
34067: PUSH
34068: LD_INT 3
34070: PUSH
34071: LD_INT 23
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: IN
34078: IFFALSE 34099
// points := [ 7 , 25 , 8 ] ;
34080: LD_ADDR_VAR 0 9
34084: PUSH
34085: LD_INT 7
34087: PUSH
34088: LD_INT 25
34090: PUSH
34091: LD_INT 8
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34099: LD_VAR 0 6
34103: PPUSH
34104: CALL_OW 264
34108: PUSH
34109: LD_INT 5
34111: PUSH
34112: LD_INT 27
34114: PUSH
34115: LD_INT 44
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: IN
34123: IFFALSE 34144
// points := [ 14 , 50 , 16 ] ;
34125: LD_ADDR_VAR 0 9
34129: PUSH
34130: LD_INT 14
34132: PUSH
34133: LD_INT 50
34135: PUSH
34136: LD_INT 16
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: LIST
34143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34144: LD_VAR 0 6
34148: PPUSH
34149: CALL_OW 264
34153: PUSH
34154: LD_INT 6
34156: PUSH
34157: LD_INT 46
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: IN
34164: IFFALSE 34185
// points := [ 32 , 120 , 70 ] ;
34166: LD_ADDR_VAR 0 9
34170: PUSH
34171: LD_INT 32
34173: PUSH
34174: LD_INT 120
34176: PUSH
34177: LD_INT 70
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: LIST
34184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34185: LD_VAR 0 6
34189: PPUSH
34190: CALL_OW 264
34194: PUSH
34195: LD_INT 7
34197: PUSH
34198: LD_INT 28
34200: PUSH
34201: LD_INT 45
34203: PUSH
34204: LD_INT 92
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: IN
34213: IFFALSE 34234
// points := [ 35 , 20 , 45 ] ;
34215: LD_ADDR_VAR 0 9
34219: PUSH
34220: LD_INT 35
34222: PUSH
34223: LD_INT 20
34225: PUSH
34226: LD_INT 45
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: LIST
34233: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34234: LD_VAR 0 6
34238: PPUSH
34239: CALL_OW 264
34243: PUSH
34244: LD_INT 47
34246: PUSH
34247: EMPTY
34248: LIST
34249: IN
34250: IFFALSE 34271
// points := [ 67 , 45 , 75 ] ;
34252: LD_ADDR_VAR 0 9
34256: PUSH
34257: LD_INT 67
34259: PUSH
34260: LD_INT 45
34262: PUSH
34263: LD_INT 75
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: LIST
34270: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34271: LD_VAR 0 6
34275: PPUSH
34276: CALL_OW 264
34280: PUSH
34281: LD_INT 26
34283: PUSH
34284: EMPTY
34285: LIST
34286: IN
34287: IFFALSE 34308
// points := [ 120 , 30 , 80 ] ;
34289: LD_ADDR_VAR 0 9
34293: PUSH
34294: LD_INT 120
34296: PUSH
34297: LD_INT 30
34299: PUSH
34300: LD_INT 80
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34308: LD_VAR 0 6
34312: PPUSH
34313: CALL_OW 264
34317: PUSH
34318: LD_INT 22
34320: PUSH
34321: EMPTY
34322: LIST
34323: IN
34324: IFFALSE 34345
// points := [ 40 , 1 , 1 ] ;
34326: LD_ADDR_VAR 0 9
34330: PUSH
34331: LD_INT 40
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: LIST
34344: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34345: LD_VAR 0 6
34349: PPUSH
34350: CALL_OW 264
34354: PUSH
34355: LD_INT 29
34357: PUSH
34358: EMPTY
34359: LIST
34360: IN
34361: IFFALSE 34382
// points := [ 70 , 200 , 400 ] ;
34363: LD_ADDR_VAR 0 9
34367: PUSH
34368: LD_INT 70
34370: PUSH
34371: LD_INT 200
34373: PUSH
34374: LD_INT 400
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: LIST
34381: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34382: LD_VAR 0 6
34386: PPUSH
34387: CALL_OW 264
34391: PUSH
34392: LD_INT 14
34394: PUSH
34395: LD_INT 53
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: IN
34402: IFFALSE 34423
// points := [ 40 , 10 , 20 ] ;
34404: LD_ADDR_VAR 0 9
34408: PUSH
34409: LD_INT 40
34411: PUSH
34412: LD_INT 10
34414: PUSH
34415: LD_INT 20
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: LIST
34422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34423: LD_VAR 0 6
34427: PPUSH
34428: CALL_OW 264
34432: PUSH
34433: LD_INT 9
34435: PUSH
34436: EMPTY
34437: LIST
34438: IN
34439: IFFALSE 34460
// points := [ 5 , 70 , 20 ] ;
34441: LD_ADDR_VAR 0 9
34445: PUSH
34446: LD_INT 5
34448: PUSH
34449: LD_INT 70
34451: PUSH
34452: LD_INT 20
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34460: LD_VAR 0 6
34464: PPUSH
34465: CALL_OW 264
34469: PUSH
34470: LD_INT 10
34472: PUSH
34473: EMPTY
34474: LIST
34475: IN
34476: IFFALSE 34497
// points := [ 35 , 110 , 70 ] ;
34478: LD_ADDR_VAR 0 9
34482: PUSH
34483: LD_INT 35
34485: PUSH
34486: LD_INT 110
34488: PUSH
34489: LD_INT 70
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34497: LD_VAR 0 6
34501: PPUSH
34502: CALL_OW 265
34506: PUSH
34507: LD_INT 25
34509: EQUAL
34510: IFFALSE 34531
// points := [ 80 , 65 , 100 ] ;
34512: LD_ADDR_VAR 0 9
34516: PUSH
34517: LD_INT 80
34519: PUSH
34520: LD_INT 65
34522: PUSH
34523: LD_INT 100
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34531: LD_VAR 0 6
34535: PPUSH
34536: CALL_OW 263
34540: PUSH
34541: LD_INT 1
34543: EQUAL
34544: IFFALSE 34579
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34546: LD_ADDR_VAR 0 10
34550: PUSH
34551: LD_VAR 0 10
34555: PUSH
34556: LD_VAR 0 6
34560: PPUSH
34561: CALL_OW 311
34565: PPUSH
34566: LD_INT 3
34568: PPUSH
34569: CALL_OW 259
34573: PUSH
34574: LD_INT 4
34576: MUL
34577: MUL
34578: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34579: LD_VAR 0 6
34583: PPUSH
34584: CALL_OW 263
34588: PUSH
34589: LD_INT 2
34591: EQUAL
34592: IFFALSE 34643
// begin j := IsControledBy ( i ) ;
34594: LD_ADDR_VAR 0 7
34598: PUSH
34599: LD_VAR 0 6
34603: PPUSH
34604: CALL_OW 312
34608: ST_TO_ADDR
// if j then
34609: LD_VAR 0 7
34613: IFFALSE 34643
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34615: LD_ADDR_VAR 0 10
34619: PUSH
34620: LD_VAR 0 10
34624: PUSH
34625: LD_VAR 0 7
34629: PPUSH
34630: LD_INT 3
34632: PPUSH
34633: CALL_OW 259
34637: PUSH
34638: LD_INT 3
34640: MUL
34641: MUL
34642: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34643: LD_VAR 0 6
34647: PPUSH
34648: CALL_OW 264
34652: PUSH
34653: LD_INT 5
34655: PUSH
34656: LD_INT 6
34658: PUSH
34659: LD_INT 46
34661: PUSH
34662: LD_INT 44
34664: PUSH
34665: LD_INT 47
34667: PUSH
34668: LD_INT 45
34670: PUSH
34671: LD_INT 28
34673: PUSH
34674: LD_INT 7
34676: PUSH
34677: LD_INT 27
34679: PUSH
34680: LD_INT 29
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: IN
34695: PUSH
34696: LD_VAR 0 1
34700: PPUSH
34701: LD_INT 52
34703: PPUSH
34704: CALL_OW 321
34708: PUSH
34709: LD_INT 2
34711: EQUAL
34712: AND
34713: IFFALSE 34730
// bpoints := bpoints * 1.2 ;
34715: LD_ADDR_VAR 0 10
34719: PUSH
34720: LD_VAR 0 10
34724: PUSH
34725: LD_REAL  1.20000000000000E+0000
34728: MUL
34729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34730: LD_VAR 0 6
34734: PPUSH
34735: CALL_OW 264
34739: PUSH
34740: LD_INT 6
34742: PUSH
34743: LD_INT 46
34745: PUSH
34746: LD_INT 47
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: LIST
34753: IN
34754: IFFALSE 34771
// bpoints := bpoints * 1.2 ;
34756: LD_ADDR_VAR 0 10
34760: PUSH
34761: LD_VAR 0 10
34765: PUSH
34766: LD_REAL  1.20000000000000E+0000
34769: MUL
34770: ST_TO_ADDR
// end ; unit_building :
34771: GO 34785
34773: LD_INT 3
34775: DOUBLE
34776: EQUAL
34777: IFTRUE 34781
34779: GO 34784
34781: POP
// ; end ;
34782: GO 34785
34784: POP
// for j = 1 to 3 do
34785: LD_ADDR_VAR 0 7
34789: PUSH
34790: DOUBLE
34791: LD_INT 1
34793: DEC
34794: ST_TO_ADDR
34795: LD_INT 3
34797: PUSH
34798: FOR_TO
34799: IFFALSE 34852
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34801: LD_ADDR_VAR 0 5
34805: PUSH
34806: LD_VAR 0 5
34810: PPUSH
34811: LD_VAR 0 7
34815: PPUSH
34816: LD_VAR 0 5
34820: PUSH
34821: LD_VAR 0 7
34825: ARRAY
34826: PUSH
34827: LD_VAR 0 9
34831: PUSH
34832: LD_VAR 0 7
34836: ARRAY
34837: PUSH
34838: LD_VAR 0 10
34842: MUL
34843: PLUS
34844: PPUSH
34845: CALL_OW 1
34849: ST_TO_ADDR
34850: GO 34798
34852: POP
34853: POP
// end ;
34854: GO 33333
34856: POP
34857: POP
// result := Replace ( result , 4 , tmp ) ;
34858: LD_ADDR_VAR 0 5
34862: PUSH
34863: LD_VAR 0 5
34867: PPUSH
34868: LD_INT 4
34870: PPUSH
34871: LD_VAR 0 8
34875: PPUSH
34876: CALL_OW 1
34880: ST_TO_ADDR
// end ;
34881: LD_VAR 0 5
34885: RET
// export function DangerAtRange ( unit , range ) ; begin
34886: LD_INT 0
34888: PPUSH
// if not unit then
34889: LD_VAR 0 1
34893: NOT
34894: IFFALSE 34898
// exit ;
34896: GO 34943
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34898: LD_ADDR_VAR 0 3
34902: PUSH
34903: LD_VAR 0 1
34907: PPUSH
34908: CALL_OW 255
34912: PPUSH
34913: LD_VAR 0 1
34917: PPUSH
34918: CALL_OW 250
34922: PPUSH
34923: LD_VAR 0 1
34927: PPUSH
34928: CALL_OW 251
34932: PPUSH
34933: LD_VAR 0 2
34937: PPUSH
34938: CALL 33185 0 4
34942: ST_TO_ADDR
// end ;
34943: LD_VAR 0 3
34947: RET
// export function DangerInArea ( side , area ) ; begin
34948: LD_INT 0
34950: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34951: LD_ADDR_VAR 0 3
34955: PUSH
34956: LD_VAR 0 2
34960: PPUSH
34961: LD_INT 81
34963: PUSH
34964: LD_VAR 0 1
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PPUSH
34973: CALL_OW 70
34977: ST_TO_ADDR
// end ;
34978: LD_VAR 0 3
34982: RET
// export function IsExtension ( b ) ; begin
34983: LD_INT 0
34985: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34986: LD_ADDR_VAR 0 2
34990: PUSH
34991: LD_VAR 0 1
34995: PUSH
34996: LD_INT 23
34998: PUSH
34999: LD_INT 20
35001: PUSH
35002: LD_INT 22
35004: PUSH
35005: LD_INT 17
35007: PUSH
35008: LD_INT 24
35010: PUSH
35011: LD_INT 21
35013: PUSH
35014: LD_INT 19
35016: PUSH
35017: LD_INT 16
35019: PUSH
35020: LD_INT 25
35022: PUSH
35023: LD_INT 18
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: IN
35038: ST_TO_ADDR
// end ;
35039: LD_VAR 0 2
35043: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35044: LD_INT 0
35046: PPUSH
35047: PPUSH
35048: PPUSH
// result := [ ] ;
35049: LD_ADDR_VAR 0 4
35053: PUSH
35054: EMPTY
35055: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35056: LD_ADDR_VAR 0 5
35060: PUSH
35061: LD_VAR 0 2
35065: PPUSH
35066: LD_INT 21
35068: PUSH
35069: LD_INT 3
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PPUSH
35076: CALL_OW 70
35080: ST_TO_ADDR
// if not tmp then
35081: LD_VAR 0 5
35085: NOT
35086: IFFALSE 35090
// exit ;
35088: GO 35154
// if checkLink then
35090: LD_VAR 0 3
35094: IFFALSE 35144
// begin for i in tmp do
35096: LD_ADDR_VAR 0 6
35100: PUSH
35101: LD_VAR 0 5
35105: PUSH
35106: FOR_IN
35107: IFFALSE 35142
// if GetBase ( i ) <> base then
35109: LD_VAR 0 6
35113: PPUSH
35114: CALL_OW 274
35118: PUSH
35119: LD_VAR 0 1
35123: NONEQUAL
35124: IFFALSE 35140
// ComLinkToBase ( base , i ) ;
35126: LD_VAR 0 1
35130: PPUSH
35131: LD_VAR 0 6
35135: PPUSH
35136: CALL_OW 169
35140: GO 35106
35142: POP
35143: POP
// end ; result := tmp ;
35144: LD_ADDR_VAR 0 4
35148: PUSH
35149: LD_VAR 0 5
35153: ST_TO_ADDR
// end ;
35154: LD_VAR 0 4
35158: RET
// export function ComComplete ( units , b ) ; var i ; begin
35159: LD_INT 0
35161: PPUSH
35162: PPUSH
// if not units then
35163: LD_VAR 0 1
35167: NOT
35168: IFFALSE 35172
// exit ;
35170: GO 35262
// for i in units do
35172: LD_ADDR_VAR 0 4
35176: PUSH
35177: LD_VAR 0 1
35181: PUSH
35182: FOR_IN
35183: IFFALSE 35260
// if BuildingStatus ( b ) = bs_build then
35185: LD_VAR 0 2
35189: PPUSH
35190: CALL_OW 461
35194: PUSH
35195: LD_INT 1
35197: EQUAL
35198: IFFALSE 35258
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35200: LD_VAR 0 4
35204: PPUSH
35205: LD_STRING h
35207: PUSH
35208: LD_VAR 0 2
35212: PPUSH
35213: CALL_OW 250
35217: PUSH
35218: LD_VAR 0 2
35222: PPUSH
35223: CALL_OW 251
35227: PUSH
35228: LD_VAR 0 2
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: PUSH
35251: EMPTY
35252: LIST
35253: PPUSH
35254: CALL_OW 446
35258: GO 35182
35260: POP
35261: POP
// end ;
35262: LD_VAR 0 3
35266: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35267: LD_INT 0
35269: PPUSH
35270: PPUSH
35271: PPUSH
35272: PPUSH
35273: PPUSH
35274: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35275: LD_VAR 0 1
35279: NOT
35280: PUSH
35281: LD_VAR 0 1
35285: PPUSH
35286: CALL_OW 263
35290: PUSH
35291: LD_INT 2
35293: NONEQUAL
35294: OR
35295: IFFALSE 35299
// exit ;
35297: GO 35615
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35299: LD_ADDR_VAR 0 6
35303: PUSH
35304: LD_INT 22
35306: PUSH
35307: LD_VAR 0 1
35311: PPUSH
35312: CALL_OW 255
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: LD_INT 30
35326: PUSH
35327: LD_INT 36
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 34
35336: PUSH
35337: LD_INT 31
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PPUSH
35353: CALL_OW 69
35357: ST_TO_ADDR
// if not tmp then
35358: LD_VAR 0 6
35362: NOT
35363: IFFALSE 35367
// exit ;
35365: GO 35615
// result := [ ] ;
35367: LD_ADDR_VAR 0 2
35371: PUSH
35372: EMPTY
35373: ST_TO_ADDR
// for i in tmp do
35374: LD_ADDR_VAR 0 3
35378: PUSH
35379: LD_VAR 0 6
35383: PUSH
35384: FOR_IN
35385: IFFALSE 35456
// begin t := UnitsInside ( i ) ;
35387: LD_ADDR_VAR 0 4
35391: PUSH
35392: LD_VAR 0 3
35396: PPUSH
35397: CALL_OW 313
35401: ST_TO_ADDR
// if t then
35402: LD_VAR 0 4
35406: IFFALSE 35454
// for j in t do
35408: LD_ADDR_VAR 0 7
35412: PUSH
35413: LD_VAR 0 4
35417: PUSH
35418: FOR_IN
35419: IFFALSE 35452
// result := Replace ( result , result + 1 , j ) ;
35421: LD_ADDR_VAR 0 2
35425: PUSH
35426: LD_VAR 0 2
35430: PPUSH
35431: LD_VAR 0 2
35435: PUSH
35436: LD_INT 1
35438: PLUS
35439: PPUSH
35440: LD_VAR 0 7
35444: PPUSH
35445: CALL_OW 1
35449: ST_TO_ADDR
35450: GO 35418
35452: POP
35453: POP
// end ;
35454: GO 35384
35456: POP
35457: POP
// if not result then
35458: LD_VAR 0 2
35462: NOT
35463: IFFALSE 35467
// exit ;
35465: GO 35615
// mech := result [ 1 ] ;
35467: LD_ADDR_VAR 0 5
35471: PUSH
35472: LD_VAR 0 2
35476: PUSH
35477: LD_INT 1
35479: ARRAY
35480: ST_TO_ADDR
// if result > 1 then
35481: LD_VAR 0 2
35485: PUSH
35486: LD_INT 1
35488: GREATER
35489: IFFALSE 35601
// begin for i = 2 to result do
35491: LD_ADDR_VAR 0 3
35495: PUSH
35496: DOUBLE
35497: LD_INT 2
35499: DEC
35500: ST_TO_ADDR
35501: LD_VAR 0 2
35505: PUSH
35506: FOR_TO
35507: IFFALSE 35599
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35509: LD_ADDR_VAR 0 4
35513: PUSH
35514: LD_VAR 0 2
35518: PUSH
35519: LD_VAR 0 3
35523: ARRAY
35524: PPUSH
35525: LD_INT 3
35527: PPUSH
35528: CALL_OW 259
35532: PUSH
35533: LD_VAR 0 2
35537: PUSH
35538: LD_VAR 0 3
35542: ARRAY
35543: PPUSH
35544: CALL_OW 432
35548: MINUS
35549: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35550: LD_VAR 0 4
35554: PUSH
35555: LD_VAR 0 5
35559: PPUSH
35560: LD_INT 3
35562: PPUSH
35563: CALL_OW 259
35567: PUSH
35568: LD_VAR 0 5
35572: PPUSH
35573: CALL_OW 432
35577: MINUS
35578: GREATEREQUAL
35579: IFFALSE 35597
// mech := result [ i ] ;
35581: LD_ADDR_VAR 0 5
35585: PUSH
35586: LD_VAR 0 2
35590: PUSH
35591: LD_VAR 0 3
35595: ARRAY
35596: ST_TO_ADDR
// end ;
35597: GO 35506
35599: POP
35600: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35601: LD_VAR 0 1
35605: PPUSH
35606: LD_VAR 0 5
35610: PPUSH
35611: CALL_OW 135
// end ;
35615: LD_VAR 0 2
35619: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35620: LD_INT 0
35622: PPUSH
35623: PPUSH
35624: PPUSH
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
// result := [ ] ;
35635: LD_ADDR_VAR 0 7
35639: PUSH
35640: EMPTY
35641: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35642: LD_VAR 0 1
35646: PPUSH
35647: CALL_OW 266
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: IN
35662: NOT
35663: IFFALSE 35667
// exit ;
35665: GO 37301
// if name then
35667: LD_VAR 0 3
35671: IFFALSE 35687
// SetBName ( base_dep , name ) ;
35673: LD_VAR 0 1
35677: PPUSH
35678: LD_VAR 0 3
35682: PPUSH
35683: CALL_OW 500
// base := GetBase ( base_dep ) ;
35687: LD_ADDR_VAR 0 15
35691: PUSH
35692: LD_VAR 0 1
35696: PPUSH
35697: CALL_OW 274
35701: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35702: LD_ADDR_VAR 0 16
35706: PUSH
35707: LD_VAR 0 1
35711: PPUSH
35712: CALL_OW 255
35716: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35717: LD_ADDR_VAR 0 17
35721: PUSH
35722: LD_VAR 0 1
35726: PPUSH
35727: CALL_OW 248
35731: ST_TO_ADDR
// if sources then
35732: LD_VAR 0 5
35736: IFFALSE 35783
// for i = 1 to 3 do
35738: LD_ADDR_VAR 0 8
35742: PUSH
35743: DOUBLE
35744: LD_INT 1
35746: DEC
35747: ST_TO_ADDR
35748: LD_INT 3
35750: PUSH
35751: FOR_TO
35752: IFFALSE 35781
// AddResourceType ( base , i , sources [ i ] ) ;
35754: LD_VAR 0 15
35758: PPUSH
35759: LD_VAR 0 8
35763: PPUSH
35764: LD_VAR 0 5
35768: PUSH
35769: LD_VAR 0 8
35773: ARRAY
35774: PPUSH
35775: CALL_OW 276
35779: GO 35751
35781: POP
35782: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35783: LD_ADDR_VAR 0 18
35787: PUSH
35788: LD_VAR 0 15
35792: PPUSH
35793: LD_VAR 0 2
35797: PPUSH
35798: LD_INT 1
35800: PPUSH
35801: CALL 35044 0 3
35805: ST_TO_ADDR
// InitHc ;
35806: CALL_OW 19
// InitUc ;
35810: CALL_OW 18
// uc_side := side ;
35814: LD_ADDR_OWVAR 20
35818: PUSH
35819: LD_VAR 0 16
35823: ST_TO_ADDR
// uc_nation := nation ;
35824: LD_ADDR_OWVAR 21
35828: PUSH
35829: LD_VAR 0 17
35833: ST_TO_ADDR
// if buildings then
35834: LD_VAR 0 18
35838: IFFALSE 37160
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35840: LD_ADDR_VAR 0 19
35844: PUSH
35845: LD_VAR 0 18
35849: PPUSH
35850: LD_INT 2
35852: PUSH
35853: LD_INT 30
35855: PUSH
35856: LD_INT 29
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 30
35865: PUSH
35866: LD_INT 30
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: LIST
35877: PPUSH
35878: CALL_OW 72
35882: ST_TO_ADDR
// if tmp then
35883: LD_VAR 0 19
35887: IFFALSE 35935
// for i in tmp do
35889: LD_ADDR_VAR 0 8
35893: PUSH
35894: LD_VAR 0 19
35898: PUSH
35899: FOR_IN
35900: IFFALSE 35933
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35902: LD_VAR 0 8
35906: PPUSH
35907: CALL_OW 250
35911: PPUSH
35912: LD_VAR 0 8
35916: PPUSH
35917: CALL_OW 251
35921: PPUSH
35922: LD_VAR 0 16
35926: PPUSH
35927: CALL_OW 441
35931: GO 35899
35933: POP
35934: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35935: LD_VAR 0 18
35939: PPUSH
35940: LD_INT 2
35942: PUSH
35943: LD_INT 30
35945: PUSH
35946: LD_INT 32
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 30
35955: PUSH
35956: LD_INT 33
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: LIST
35967: PPUSH
35968: CALL_OW 72
35972: IFFALSE 36060
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35974: LD_ADDR_VAR 0 8
35978: PUSH
35979: LD_VAR 0 18
35983: PPUSH
35984: LD_INT 2
35986: PUSH
35987: LD_INT 30
35989: PUSH
35990: LD_INT 32
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 30
35999: PUSH
36000: LD_INT 33
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: PPUSH
36012: CALL_OW 72
36016: PUSH
36017: FOR_IN
36018: IFFALSE 36058
// begin if not GetBWeapon ( i ) then
36020: LD_VAR 0 8
36024: PPUSH
36025: CALL_OW 269
36029: NOT
36030: IFFALSE 36056
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36032: LD_VAR 0 8
36036: PPUSH
36037: LD_VAR 0 8
36041: PPUSH
36042: LD_VAR 0 2
36046: PPUSH
36047: CALL 37306 0 2
36051: PPUSH
36052: CALL_OW 431
// end ;
36056: GO 36017
36058: POP
36059: POP
// end ; for i = 1 to personel do
36060: LD_ADDR_VAR 0 8
36064: PUSH
36065: DOUBLE
36066: LD_INT 1
36068: DEC
36069: ST_TO_ADDR
36070: LD_VAR 0 6
36074: PUSH
36075: FOR_TO
36076: IFFALSE 37140
// begin if i > 4 then
36078: LD_VAR 0 8
36082: PUSH
36083: LD_INT 4
36085: GREATER
36086: IFFALSE 36090
// break ;
36088: GO 37140
// case i of 1 :
36090: LD_VAR 0 8
36094: PUSH
36095: LD_INT 1
36097: DOUBLE
36098: EQUAL
36099: IFTRUE 36103
36101: GO 36183
36103: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36104: LD_ADDR_VAR 0 12
36108: PUSH
36109: LD_VAR 0 18
36113: PPUSH
36114: LD_INT 22
36116: PUSH
36117: LD_VAR 0 16
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 58
36128: PUSH
36129: EMPTY
36130: LIST
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: LD_INT 30
36137: PUSH
36138: LD_INT 32
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 30
36147: PUSH
36148: LD_INT 4
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 30
36157: PUSH
36158: LD_INT 5
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: LIST
36175: PPUSH
36176: CALL_OW 72
36180: ST_TO_ADDR
36181: GO 36405
36183: LD_INT 2
36185: DOUBLE
36186: EQUAL
36187: IFTRUE 36191
36189: GO 36253
36191: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36192: LD_ADDR_VAR 0 12
36196: PUSH
36197: LD_VAR 0 18
36201: PPUSH
36202: LD_INT 22
36204: PUSH
36205: LD_VAR 0 16
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: LD_INT 30
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 30
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PPUSH
36246: CALL_OW 72
36250: ST_TO_ADDR
36251: GO 36405
36253: LD_INT 3
36255: DOUBLE
36256: EQUAL
36257: IFTRUE 36261
36259: GO 36323
36261: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36262: LD_ADDR_VAR 0 12
36266: PUSH
36267: LD_VAR 0 18
36271: PPUSH
36272: LD_INT 22
36274: PUSH
36275: LD_VAR 0 16
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 2
36286: PUSH
36287: LD_INT 30
36289: PUSH
36290: LD_INT 2
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 30
36299: PUSH
36300: LD_INT 3
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PPUSH
36316: CALL_OW 72
36320: ST_TO_ADDR
36321: GO 36405
36323: LD_INT 4
36325: DOUBLE
36326: EQUAL
36327: IFTRUE 36331
36329: GO 36404
36331: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36332: LD_ADDR_VAR 0 12
36336: PUSH
36337: LD_VAR 0 18
36341: PPUSH
36342: LD_INT 22
36344: PUSH
36345: LD_VAR 0 16
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: LD_INT 30
36359: PUSH
36360: LD_INT 6
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 30
36369: PUSH
36370: LD_INT 7
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 30
36379: PUSH
36380: LD_INT 8
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PPUSH
36397: CALL_OW 72
36401: ST_TO_ADDR
36402: GO 36405
36404: POP
// if i = 1 then
36405: LD_VAR 0 8
36409: PUSH
36410: LD_INT 1
36412: EQUAL
36413: IFFALSE 36524
// begin tmp := [ ] ;
36415: LD_ADDR_VAR 0 19
36419: PUSH
36420: EMPTY
36421: ST_TO_ADDR
// for j in f do
36422: LD_ADDR_VAR 0 9
36426: PUSH
36427: LD_VAR 0 12
36431: PUSH
36432: FOR_IN
36433: IFFALSE 36506
// if GetBType ( j ) = b_bunker then
36435: LD_VAR 0 9
36439: PPUSH
36440: CALL_OW 266
36444: PUSH
36445: LD_INT 32
36447: EQUAL
36448: IFFALSE 36475
// tmp := Insert ( tmp , 1 , j ) else
36450: LD_ADDR_VAR 0 19
36454: PUSH
36455: LD_VAR 0 19
36459: PPUSH
36460: LD_INT 1
36462: PPUSH
36463: LD_VAR 0 9
36467: PPUSH
36468: CALL_OW 2
36472: ST_TO_ADDR
36473: GO 36504
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36475: LD_ADDR_VAR 0 19
36479: PUSH
36480: LD_VAR 0 19
36484: PPUSH
36485: LD_VAR 0 19
36489: PUSH
36490: LD_INT 1
36492: PLUS
36493: PPUSH
36494: LD_VAR 0 9
36498: PPUSH
36499: CALL_OW 2
36503: ST_TO_ADDR
36504: GO 36432
36506: POP
36507: POP
// if tmp then
36508: LD_VAR 0 19
36512: IFFALSE 36524
// f := tmp ;
36514: LD_ADDR_VAR 0 12
36518: PUSH
36519: LD_VAR 0 19
36523: ST_TO_ADDR
// end ; x := personel [ i ] ;
36524: LD_ADDR_VAR 0 13
36528: PUSH
36529: LD_VAR 0 6
36533: PUSH
36534: LD_VAR 0 8
36538: ARRAY
36539: ST_TO_ADDR
// if x = - 1 then
36540: LD_VAR 0 13
36544: PUSH
36545: LD_INT 1
36547: NEG
36548: EQUAL
36549: IFFALSE 36758
// begin for j in f do
36551: LD_ADDR_VAR 0 9
36555: PUSH
36556: LD_VAR 0 12
36560: PUSH
36561: FOR_IN
36562: IFFALSE 36754
// repeat InitHc ;
36564: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36568: LD_VAR 0 9
36572: PPUSH
36573: CALL_OW 266
36577: PUSH
36578: LD_INT 5
36580: EQUAL
36581: IFFALSE 36651
// begin if UnitsInside ( j ) < 3 then
36583: LD_VAR 0 9
36587: PPUSH
36588: CALL_OW 313
36592: PUSH
36593: LD_INT 3
36595: LESS
36596: IFFALSE 36632
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36598: LD_INT 0
36600: PPUSH
36601: LD_INT 5
36603: PUSH
36604: LD_INT 8
36606: PUSH
36607: LD_INT 9
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: PUSH
36615: LD_VAR 0 17
36619: ARRAY
36620: PPUSH
36621: LD_VAR 0 4
36625: PPUSH
36626: CALL_OW 380
36630: GO 36649
// PrepareHuman ( false , i , skill ) ;
36632: LD_INT 0
36634: PPUSH
36635: LD_VAR 0 8
36639: PPUSH
36640: LD_VAR 0 4
36644: PPUSH
36645: CALL_OW 380
// end else
36649: GO 36668
// PrepareHuman ( false , i , skill ) ;
36651: LD_INT 0
36653: PPUSH
36654: LD_VAR 0 8
36658: PPUSH
36659: LD_VAR 0 4
36663: PPUSH
36664: CALL_OW 380
// un := CreateHuman ;
36668: LD_ADDR_VAR 0 14
36672: PUSH
36673: CALL_OW 44
36677: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36678: LD_ADDR_VAR 0 7
36682: PUSH
36683: LD_VAR 0 7
36687: PPUSH
36688: LD_INT 1
36690: PPUSH
36691: LD_VAR 0 14
36695: PPUSH
36696: CALL_OW 2
36700: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36701: LD_VAR 0 14
36705: PPUSH
36706: LD_VAR 0 9
36710: PPUSH
36711: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36715: LD_VAR 0 9
36719: PPUSH
36720: CALL_OW 313
36724: PUSH
36725: LD_INT 6
36727: EQUAL
36728: PUSH
36729: LD_VAR 0 9
36733: PPUSH
36734: CALL_OW 266
36738: PUSH
36739: LD_INT 32
36741: PUSH
36742: LD_INT 31
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: IN
36749: OR
36750: IFFALSE 36564
36752: GO 36561
36754: POP
36755: POP
// end else
36756: GO 37138
// for j = 1 to x do
36758: LD_ADDR_VAR 0 9
36762: PUSH
36763: DOUBLE
36764: LD_INT 1
36766: DEC
36767: ST_TO_ADDR
36768: LD_VAR 0 13
36772: PUSH
36773: FOR_TO
36774: IFFALSE 37136
// begin InitHc ;
36776: CALL_OW 19
// if not f then
36780: LD_VAR 0 12
36784: NOT
36785: IFFALSE 36874
// begin PrepareHuman ( false , i , skill ) ;
36787: LD_INT 0
36789: PPUSH
36790: LD_VAR 0 8
36794: PPUSH
36795: LD_VAR 0 4
36799: PPUSH
36800: CALL_OW 380
// un := CreateHuman ;
36804: LD_ADDR_VAR 0 14
36808: PUSH
36809: CALL_OW 44
36813: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36814: LD_ADDR_VAR 0 7
36818: PUSH
36819: LD_VAR 0 7
36823: PPUSH
36824: LD_INT 1
36826: PPUSH
36827: LD_VAR 0 14
36831: PPUSH
36832: CALL_OW 2
36836: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36837: LD_VAR 0 14
36841: PPUSH
36842: LD_VAR 0 1
36846: PPUSH
36847: CALL_OW 250
36851: PPUSH
36852: LD_VAR 0 1
36856: PPUSH
36857: CALL_OW 251
36861: PPUSH
36862: LD_INT 10
36864: PPUSH
36865: LD_INT 0
36867: PPUSH
36868: CALL_OW 50
// continue ;
36872: GO 36773
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36874: LD_VAR 0 12
36878: PUSH
36879: LD_INT 1
36881: ARRAY
36882: PPUSH
36883: CALL_OW 313
36887: PUSH
36888: LD_VAR 0 12
36892: PUSH
36893: LD_INT 1
36895: ARRAY
36896: PPUSH
36897: CALL_OW 266
36901: PUSH
36902: LD_INT 32
36904: PUSH
36905: LD_INT 31
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: IN
36912: AND
36913: PUSH
36914: LD_VAR 0 12
36918: PUSH
36919: LD_INT 1
36921: ARRAY
36922: PPUSH
36923: CALL_OW 313
36927: PUSH
36928: LD_INT 6
36930: EQUAL
36931: OR
36932: IFFALSE 36952
// f := Delete ( f , 1 ) ;
36934: LD_ADDR_VAR 0 12
36938: PUSH
36939: LD_VAR 0 12
36943: PPUSH
36944: LD_INT 1
36946: PPUSH
36947: CALL_OW 3
36951: ST_TO_ADDR
// if not f then
36952: LD_VAR 0 12
36956: NOT
36957: IFFALSE 36975
// begin x := x + 2 ;
36959: LD_ADDR_VAR 0 13
36963: PUSH
36964: LD_VAR 0 13
36968: PUSH
36969: LD_INT 2
36971: PLUS
36972: ST_TO_ADDR
// continue ;
36973: GO 36773
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36975: LD_VAR 0 12
36979: PUSH
36980: LD_INT 1
36982: ARRAY
36983: PPUSH
36984: CALL_OW 266
36988: PUSH
36989: LD_INT 5
36991: EQUAL
36992: IFFALSE 37066
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36994: LD_VAR 0 12
36998: PUSH
36999: LD_INT 1
37001: ARRAY
37002: PPUSH
37003: CALL_OW 313
37007: PUSH
37008: LD_INT 3
37010: LESS
37011: IFFALSE 37047
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37013: LD_INT 0
37015: PPUSH
37016: LD_INT 5
37018: PUSH
37019: LD_INT 8
37021: PUSH
37022: LD_INT 9
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: LIST
37029: PUSH
37030: LD_VAR 0 17
37034: ARRAY
37035: PPUSH
37036: LD_VAR 0 4
37040: PPUSH
37041: CALL_OW 380
37045: GO 37064
// PrepareHuman ( false , i , skill ) ;
37047: LD_INT 0
37049: PPUSH
37050: LD_VAR 0 8
37054: PPUSH
37055: LD_VAR 0 4
37059: PPUSH
37060: CALL_OW 380
// end else
37064: GO 37083
// PrepareHuman ( false , i , skill ) ;
37066: LD_INT 0
37068: PPUSH
37069: LD_VAR 0 8
37073: PPUSH
37074: LD_VAR 0 4
37078: PPUSH
37079: CALL_OW 380
// un := CreateHuman ;
37083: LD_ADDR_VAR 0 14
37087: PUSH
37088: CALL_OW 44
37092: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37093: LD_ADDR_VAR 0 7
37097: PUSH
37098: LD_VAR 0 7
37102: PPUSH
37103: LD_INT 1
37105: PPUSH
37106: LD_VAR 0 14
37110: PPUSH
37111: CALL_OW 2
37115: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37116: LD_VAR 0 14
37120: PPUSH
37121: LD_VAR 0 12
37125: PUSH
37126: LD_INT 1
37128: ARRAY
37129: PPUSH
37130: CALL_OW 52
// end ;
37134: GO 36773
37136: POP
37137: POP
// end ;
37138: GO 36075
37140: POP
37141: POP
// result := result ^ buildings ;
37142: LD_ADDR_VAR 0 7
37146: PUSH
37147: LD_VAR 0 7
37151: PUSH
37152: LD_VAR 0 18
37156: ADD
37157: ST_TO_ADDR
// end else
37158: GO 37301
// begin for i = 1 to personel do
37160: LD_ADDR_VAR 0 8
37164: PUSH
37165: DOUBLE
37166: LD_INT 1
37168: DEC
37169: ST_TO_ADDR
37170: LD_VAR 0 6
37174: PUSH
37175: FOR_TO
37176: IFFALSE 37299
// begin if i > 4 then
37178: LD_VAR 0 8
37182: PUSH
37183: LD_INT 4
37185: GREATER
37186: IFFALSE 37190
// break ;
37188: GO 37299
// x := personel [ i ] ;
37190: LD_ADDR_VAR 0 13
37194: PUSH
37195: LD_VAR 0 6
37199: PUSH
37200: LD_VAR 0 8
37204: ARRAY
37205: ST_TO_ADDR
// if x = - 1 then
37206: LD_VAR 0 13
37210: PUSH
37211: LD_INT 1
37213: NEG
37214: EQUAL
37215: IFFALSE 37219
// continue ;
37217: GO 37175
// PrepareHuman ( false , i , skill ) ;
37219: LD_INT 0
37221: PPUSH
37222: LD_VAR 0 8
37226: PPUSH
37227: LD_VAR 0 4
37231: PPUSH
37232: CALL_OW 380
// un := CreateHuman ;
37236: LD_ADDR_VAR 0 14
37240: PUSH
37241: CALL_OW 44
37245: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37246: LD_VAR 0 14
37250: PPUSH
37251: LD_VAR 0 1
37255: PPUSH
37256: CALL_OW 250
37260: PPUSH
37261: LD_VAR 0 1
37265: PPUSH
37266: CALL_OW 251
37270: PPUSH
37271: LD_INT 10
37273: PPUSH
37274: LD_INT 0
37276: PPUSH
37277: CALL_OW 50
// result := result ^ un ;
37281: LD_ADDR_VAR 0 7
37285: PUSH
37286: LD_VAR 0 7
37290: PUSH
37291: LD_VAR 0 14
37295: ADD
37296: ST_TO_ADDR
// end ;
37297: GO 37175
37299: POP
37300: POP
// end ; end ;
37301: LD_VAR 0 7
37305: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37306: LD_INT 0
37308: PPUSH
37309: PPUSH
37310: PPUSH
37311: PPUSH
37312: PPUSH
37313: PPUSH
37314: PPUSH
37315: PPUSH
37316: PPUSH
37317: PPUSH
37318: PPUSH
37319: PPUSH
37320: PPUSH
37321: PPUSH
37322: PPUSH
37323: PPUSH
// result := false ;
37324: LD_ADDR_VAR 0 3
37328: PUSH
37329: LD_INT 0
37331: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37332: LD_VAR 0 1
37336: NOT
37337: PUSH
37338: LD_VAR 0 1
37342: PPUSH
37343: CALL_OW 266
37347: PUSH
37348: LD_INT 32
37350: PUSH
37351: LD_INT 33
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: IN
37358: NOT
37359: OR
37360: IFFALSE 37364
// exit ;
37362: GO 38473
// nat := GetNation ( tower ) ;
37364: LD_ADDR_VAR 0 12
37368: PUSH
37369: LD_VAR 0 1
37373: PPUSH
37374: CALL_OW 248
37378: ST_TO_ADDR
// side := GetSide ( tower ) ;
37379: LD_ADDR_VAR 0 16
37383: PUSH
37384: LD_VAR 0 1
37388: PPUSH
37389: CALL_OW 255
37393: ST_TO_ADDR
// x := GetX ( tower ) ;
37394: LD_ADDR_VAR 0 10
37398: PUSH
37399: LD_VAR 0 1
37403: PPUSH
37404: CALL_OW 250
37408: ST_TO_ADDR
// y := GetY ( tower ) ;
37409: LD_ADDR_VAR 0 11
37413: PUSH
37414: LD_VAR 0 1
37418: PPUSH
37419: CALL_OW 251
37423: ST_TO_ADDR
// if not x or not y then
37424: LD_VAR 0 10
37428: NOT
37429: PUSH
37430: LD_VAR 0 11
37434: NOT
37435: OR
37436: IFFALSE 37440
// exit ;
37438: GO 38473
// weapon := 0 ;
37440: LD_ADDR_VAR 0 18
37444: PUSH
37445: LD_INT 0
37447: ST_TO_ADDR
// fac_list := [ ] ;
37448: LD_ADDR_VAR 0 17
37452: PUSH
37453: EMPTY
37454: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37455: LD_ADDR_VAR 0 6
37459: PUSH
37460: LD_VAR 0 1
37464: PPUSH
37465: CALL_OW 274
37469: PPUSH
37470: LD_VAR 0 2
37474: PPUSH
37475: LD_INT 0
37477: PPUSH
37478: CALL 35044 0 3
37482: PPUSH
37483: LD_INT 30
37485: PUSH
37486: LD_INT 3
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PPUSH
37493: CALL_OW 72
37497: ST_TO_ADDR
// if not factories then
37498: LD_VAR 0 6
37502: NOT
37503: IFFALSE 37507
// exit ;
37505: GO 38473
// for i in factories do
37507: LD_ADDR_VAR 0 8
37511: PUSH
37512: LD_VAR 0 6
37516: PUSH
37517: FOR_IN
37518: IFFALSE 37543
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37520: LD_ADDR_VAR 0 17
37524: PUSH
37525: LD_VAR 0 17
37529: PUSH
37530: LD_VAR 0 8
37534: PPUSH
37535: CALL_OW 478
37539: UNION
37540: ST_TO_ADDR
37541: GO 37517
37543: POP
37544: POP
// if not fac_list then
37545: LD_VAR 0 17
37549: NOT
37550: IFFALSE 37554
// exit ;
37552: GO 38473
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37554: LD_ADDR_VAR 0 5
37558: PUSH
37559: LD_INT 4
37561: PUSH
37562: LD_INT 5
37564: PUSH
37565: LD_INT 9
37567: PUSH
37568: LD_INT 10
37570: PUSH
37571: LD_INT 6
37573: PUSH
37574: LD_INT 7
37576: PUSH
37577: LD_INT 11
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 27
37591: PUSH
37592: LD_INT 28
37594: PUSH
37595: LD_INT 26
37597: PUSH
37598: LD_INT 30
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 43
37609: PUSH
37610: LD_INT 44
37612: PUSH
37613: LD_INT 46
37615: PUSH
37616: LD_INT 45
37618: PUSH
37619: LD_INT 47
37621: PUSH
37622: LD_INT 49
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: LIST
37637: PUSH
37638: LD_VAR 0 12
37642: ARRAY
37643: ST_TO_ADDR
// list := list isect fac_list ;
37644: LD_ADDR_VAR 0 5
37648: PUSH
37649: LD_VAR 0 5
37653: PUSH
37654: LD_VAR 0 17
37658: ISECT
37659: ST_TO_ADDR
// if not list then
37660: LD_VAR 0 5
37664: NOT
37665: IFFALSE 37669
// exit ;
37667: GO 38473
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37669: LD_VAR 0 12
37673: PUSH
37674: LD_INT 3
37676: EQUAL
37677: PUSH
37678: LD_INT 49
37680: PUSH
37681: LD_VAR 0 5
37685: IN
37686: AND
37687: PUSH
37688: LD_INT 31
37690: PPUSH
37691: LD_VAR 0 16
37695: PPUSH
37696: CALL_OW 321
37700: PUSH
37701: LD_INT 2
37703: EQUAL
37704: AND
37705: IFFALSE 37765
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37707: LD_INT 22
37709: PUSH
37710: LD_VAR 0 16
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 35
37721: PUSH
37722: LD_INT 49
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 91
37731: PUSH
37732: LD_VAR 0 1
37736: PUSH
37737: LD_INT 10
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: LIST
37749: PPUSH
37750: CALL_OW 69
37754: NOT
37755: IFFALSE 37765
// weapon := ru_time_lapser ;
37757: LD_ADDR_VAR 0 18
37761: PUSH
37762: LD_INT 49
37764: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37765: LD_VAR 0 12
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: IN
37780: PUSH
37781: LD_INT 11
37783: PUSH
37784: LD_VAR 0 5
37788: IN
37789: PUSH
37790: LD_INT 30
37792: PUSH
37793: LD_VAR 0 5
37797: IN
37798: OR
37799: AND
37800: PUSH
37801: LD_INT 6
37803: PPUSH
37804: LD_VAR 0 16
37808: PPUSH
37809: CALL_OW 321
37813: PUSH
37814: LD_INT 2
37816: EQUAL
37817: AND
37818: IFFALSE 37983
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37820: LD_INT 22
37822: PUSH
37823: LD_VAR 0 16
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: LD_INT 35
37837: PUSH
37838: LD_INT 11
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 35
37847: PUSH
37848: LD_INT 30
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 91
37862: PUSH
37863: LD_VAR 0 1
37867: PUSH
37868: LD_INT 18
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: LIST
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: PPUSH
37881: CALL_OW 69
37885: NOT
37886: PUSH
37887: LD_INT 22
37889: PUSH
37890: LD_VAR 0 16
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 2
37901: PUSH
37902: LD_INT 30
37904: PUSH
37905: LD_INT 32
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 30
37914: PUSH
37915: LD_INT 33
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 91
37929: PUSH
37930: LD_VAR 0 1
37934: PUSH
37935: LD_INT 12
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: LIST
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: LIST
37947: PUSH
37948: EMPTY
37949: LIST
37950: PPUSH
37951: CALL_OW 69
37955: PUSH
37956: LD_INT 2
37958: GREATER
37959: AND
37960: IFFALSE 37983
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37962: LD_ADDR_VAR 0 18
37966: PUSH
37967: LD_INT 11
37969: PUSH
37970: LD_INT 30
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_VAR 0 12
37981: ARRAY
37982: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37983: LD_VAR 0 18
37987: NOT
37988: PUSH
37989: LD_INT 40
37991: PPUSH
37992: LD_VAR 0 16
37996: PPUSH
37997: CALL_OW 321
38001: PUSH
38002: LD_INT 2
38004: EQUAL
38005: AND
38006: PUSH
38007: LD_INT 7
38009: PUSH
38010: LD_VAR 0 5
38014: IN
38015: PUSH
38016: LD_INT 28
38018: PUSH
38019: LD_VAR 0 5
38023: IN
38024: OR
38025: PUSH
38026: LD_INT 45
38028: PUSH
38029: LD_VAR 0 5
38033: IN
38034: OR
38035: AND
38036: IFFALSE 38290
// begin hex := GetHexInfo ( x , y ) ;
38038: LD_ADDR_VAR 0 4
38042: PUSH
38043: LD_VAR 0 10
38047: PPUSH
38048: LD_VAR 0 11
38052: PPUSH
38053: CALL_OW 546
38057: ST_TO_ADDR
// if hex [ 1 ] then
38058: LD_VAR 0 4
38062: PUSH
38063: LD_INT 1
38065: ARRAY
38066: IFFALSE 38070
// exit ;
38068: GO 38473
// height := hex [ 2 ] ;
38070: LD_ADDR_VAR 0 15
38074: PUSH
38075: LD_VAR 0 4
38079: PUSH
38080: LD_INT 2
38082: ARRAY
38083: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38084: LD_ADDR_VAR 0 14
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: LD_INT 2
38094: PUSH
38095: LD_INT 3
38097: PUSH
38098: LD_INT 5
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: ST_TO_ADDR
// for i in tmp do
38107: LD_ADDR_VAR 0 8
38111: PUSH
38112: LD_VAR 0 14
38116: PUSH
38117: FOR_IN
38118: IFFALSE 38288
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38120: LD_ADDR_VAR 0 9
38124: PUSH
38125: LD_VAR 0 10
38129: PPUSH
38130: LD_VAR 0 8
38134: PPUSH
38135: LD_INT 5
38137: PPUSH
38138: CALL_OW 272
38142: PUSH
38143: LD_VAR 0 11
38147: PPUSH
38148: LD_VAR 0 8
38152: PPUSH
38153: LD_INT 5
38155: PPUSH
38156: CALL_OW 273
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38165: LD_VAR 0 9
38169: PUSH
38170: LD_INT 1
38172: ARRAY
38173: PPUSH
38174: LD_VAR 0 9
38178: PUSH
38179: LD_INT 2
38181: ARRAY
38182: PPUSH
38183: CALL_OW 488
38187: IFFALSE 38286
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38189: LD_ADDR_VAR 0 4
38193: PUSH
38194: LD_VAR 0 9
38198: PUSH
38199: LD_INT 1
38201: ARRAY
38202: PPUSH
38203: LD_VAR 0 9
38207: PUSH
38208: LD_INT 2
38210: ARRAY
38211: PPUSH
38212: CALL_OW 546
38216: ST_TO_ADDR
// if hex [ 1 ] then
38217: LD_VAR 0 4
38221: PUSH
38222: LD_INT 1
38224: ARRAY
38225: IFFALSE 38229
// continue ;
38227: GO 38117
// h := hex [ 2 ] ;
38229: LD_ADDR_VAR 0 13
38233: PUSH
38234: LD_VAR 0 4
38238: PUSH
38239: LD_INT 2
38241: ARRAY
38242: ST_TO_ADDR
// if h + 7 < height then
38243: LD_VAR 0 13
38247: PUSH
38248: LD_INT 7
38250: PLUS
38251: PUSH
38252: LD_VAR 0 15
38256: LESS
38257: IFFALSE 38286
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38259: LD_ADDR_VAR 0 18
38263: PUSH
38264: LD_INT 7
38266: PUSH
38267: LD_INT 28
38269: PUSH
38270: LD_INT 45
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: LIST
38277: PUSH
38278: LD_VAR 0 12
38282: ARRAY
38283: ST_TO_ADDR
// break ;
38284: GO 38288
// end ; end ; end ;
38286: GO 38117
38288: POP
38289: POP
// end ; if not weapon then
38290: LD_VAR 0 18
38294: NOT
38295: IFFALSE 38355
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38297: LD_ADDR_VAR 0 5
38301: PUSH
38302: LD_VAR 0 5
38306: PUSH
38307: LD_INT 11
38309: PUSH
38310: LD_INT 30
38312: PUSH
38313: LD_INT 49
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: LIST
38320: DIFF
38321: ST_TO_ADDR
// if not list then
38322: LD_VAR 0 5
38326: NOT
38327: IFFALSE 38331
// exit ;
38329: GO 38473
// weapon := list [ rand ( 1 , list ) ] ;
38331: LD_ADDR_VAR 0 18
38335: PUSH
38336: LD_VAR 0 5
38340: PUSH
38341: LD_INT 1
38343: PPUSH
38344: LD_VAR 0 5
38348: PPUSH
38349: CALL_OW 12
38353: ARRAY
38354: ST_TO_ADDR
// end ; if weapon then
38355: LD_VAR 0 18
38359: IFFALSE 38473
// begin tmp := CostOfWeapon ( weapon ) ;
38361: LD_ADDR_VAR 0 14
38365: PUSH
38366: LD_VAR 0 18
38370: PPUSH
38371: CALL_OW 451
38375: ST_TO_ADDR
// j := GetBase ( tower ) ;
38376: LD_ADDR_VAR 0 9
38380: PUSH
38381: LD_VAR 0 1
38385: PPUSH
38386: CALL_OW 274
38390: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38391: LD_VAR 0 9
38395: PPUSH
38396: LD_INT 1
38398: PPUSH
38399: CALL_OW 275
38403: PUSH
38404: LD_VAR 0 14
38408: PUSH
38409: LD_INT 1
38411: ARRAY
38412: GREATEREQUAL
38413: PUSH
38414: LD_VAR 0 9
38418: PPUSH
38419: LD_INT 2
38421: PPUSH
38422: CALL_OW 275
38426: PUSH
38427: LD_VAR 0 14
38431: PUSH
38432: LD_INT 2
38434: ARRAY
38435: GREATEREQUAL
38436: AND
38437: PUSH
38438: LD_VAR 0 9
38442: PPUSH
38443: LD_INT 3
38445: PPUSH
38446: CALL_OW 275
38450: PUSH
38451: LD_VAR 0 14
38455: PUSH
38456: LD_INT 3
38458: ARRAY
38459: GREATEREQUAL
38460: AND
38461: IFFALSE 38473
// result := weapon ;
38463: LD_ADDR_VAR 0 3
38467: PUSH
38468: LD_VAR 0 18
38472: ST_TO_ADDR
// end ; end ;
38473: LD_VAR 0 3
38477: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38478: LD_INT 0
38480: PPUSH
38481: PPUSH
// result := true ;
38482: LD_ADDR_VAR 0 3
38486: PUSH
38487: LD_INT 1
38489: ST_TO_ADDR
// if array1 = array2 then
38490: LD_VAR 0 1
38494: PUSH
38495: LD_VAR 0 2
38499: EQUAL
38500: IFFALSE 38560
// begin for i = 1 to array1 do
38502: LD_ADDR_VAR 0 4
38506: PUSH
38507: DOUBLE
38508: LD_INT 1
38510: DEC
38511: ST_TO_ADDR
38512: LD_VAR 0 1
38516: PUSH
38517: FOR_TO
38518: IFFALSE 38556
// if array1 [ i ] <> array2 [ i ] then
38520: LD_VAR 0 1
38524: PUSH
38525: LD_VAR 0 4
38529: ARRAY
38530: PUSH
38531: LD_VAR 0 2
38535: PUSH
38536: LD_VAR 0 4
38540: ARRAY
38541: NONEQUAL
38542: IFFALSE 38554
// begin result := false ;
38544: LD_ADDR_VAR 0 3
38548: PUSH
38549: LD_INT 0
38551: ST_TO_ADDR
// break ;
38552: GO 38556
// end ;
38554: GO 38517
38556: POP
38557: POP
// end else
38558: GO 38568
// result := false ;
38560: LD_ADDR_VAR 0 3
38564: PUSH
38565: LD_INT 0
38567: ST_TO_ADDR
// end ;
38568: LD_VAR 0 3
38572: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38573: LD_INT 0
38575: PPUSH
38576: PPUSH
// if not array1 or not array2 then
38577: LD_VAR 0 1
38581: NOT
38582: PUSH
38583: LD_VAR 0 2
38587: NOT
38588: OR
38589: IFFALSE 38593
// exit ;
38591: GO 38657
// result := true ;
38593: LD_ADDR_VAR 0 3
38597: PUSH
38598: LD_INT 1
38600: ST_TO_ADDR
// for i = 1 to array1 do
38601: LD_ADDR_VAR 0 4
38605: PUSH
38606: DOUBLE
38607: LD_INT 1
38609: DEC
38610: ST_TO_ADDR
38611: LD_VAR 0 1
38615: PUSH
38616: FOR_TO
38617: IFFALSE 38655
// if array1 [ i ] <> array2 [ i ] then
38619: LD_VAR 0 1
38623: PUSH
38624: LD_VAR 0 4
38628: ARRAY
38629: PUSH
38630: LD_VAR 0 2
38634: PUSH
38635: LD_VAR 0 4
38639: ARRAY
38640: NONEQUAL
38641: IFFALSE 38653
// begin result := false ;
38643: LD_ADDR_VAR 0 3
38647: PUSH
38648: LD_INT 0
38650: ST_TO_ADDR
// break ;
38651: GO 38655
// end ;
38653: GO 38616
38655: POP
38656: POP
// end ;
38657: LD_VAR 0 3
38661: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38662: LD_INT 0
38664: PPUSH
38665: PPUSH
38666: PPUSH
// pom := GetBase ( fac ) ;
38667: LD_ADDR_VAR 0 5
38671: PUSH
38672: LD_VAR 0 1
38676: PPUSH
38677: CALL_OW 274
38681: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38682: LD_ADDR_VAR 0 4
38686: PUSH
38687: LD_VAR 0 2
38691: PUSH
38692: LD_INT 1
38694: ARRAY
38695: PPUSH
38696: LD_VAR 0 2
38700: PUSH
38701: LD_INT 2
38703: ARRAY
38704: PPUSH
38705: LD_VAR 0 2
38709: PUSH
38710: LD_INT 3
38712: ARRAY
38713: PPUSH
38714: LD_VAR 0 2
38718: PUSH
38719: LD_INT 4
38721: ARRAY
38722: PPUSH
38723: CALL_OW 449
38727: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38728: LD_ADDR_VAR 0 3
38732: PUSH
38733: LD_VAR 0 5
38737: PPUSH
38738: LD_INT 1
38740: PPUSH
38741: CALL_OW 275
38745: PUSH
38746: LD_VAR 0 4
38750: PUSH
38751: LD_INT 1
38753: ARRAY
38754: GREATEREQUAL
38755: PUSH
38756: LD_VAR 0 5
38760: PPUSH
38761: LD_INT 2
38763: PPUSH
38764: CALL_OW 275
38768: PUSH
38769: LD_VAR 0 4
38773: PUSH
38774: LD_INT 2
38776: ARRAY
38777: GREATEREQUAL
38778: AND
38779: PUSH
38780: LD_VAR 0 5
38784: PPUSH
38785: LD_INT 3
38787: PPUSH
38788: CALL_OW 275
38792: PUSH
38793: LD_VAR 0 4
38797: PUSH
38798: LD_INT 3
38800: ARRAY
38801: GREATEREQUAL
38802: AND
38803: ST_TO_ADDR
// end ;
38804: LD_VAR 0 3
38808: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38809: LD_INT 0
38811: PPUSH
38812: PPUSH
38813: PPUSH
38814: PPUSH
// pom := GetBase ( building ) ;
38815: LD_ADDR_VAR 0 3
38819: PUSH
38820: LD_VAR 0 1
38824: PPUSH
38825: CALL_OW 274
38829: ST_TO_ADDR
// if not pom then
38830: LD_VAR 0 3
38834: NOT
38835: IFFALSE 38839
// exit ;
38837: GO 39009
// btype := GetBType ( building ) ;
38839: LD_ADDR_VAR 0 5
38843: PUSH
38844: LD_VAR 0 1
38848: PPUSH
38849: CALL_OW 266
38853: ST_TO_ADDR
// if btype = b_armoury then
38854: LD_VAR 0 5
38858: PUSH
38859: LD_INT 4
38861: EQUAL
38862: IFFALSE 38872
// btype := b_barracks ;
38864: LD_ADDR_VAR 0 5
38868: PUSH
38869: LD_INT 5
38871: ST_TO_ADDR
// if btype = b_depot then
38872: LD_VAR 0 5
38876: PUSH
38877: LD_INT 0
38879: EQUAL
38880: IFFALSE 38890
// btype := b_warehouse ;
38882: LD_ADDR_VAR 0 5
38886: PUSH
38887: LD_INT 1
38889: ST_TO_ADDR
// if btype = b_workshop then
38890: LD_VAR 0 5
38894: PUSH
38895: LD_INT 2
38897: EQUAL
38898: IFFALSE 38908
// btype := b_factory ;
38900: LD_ADDR_VAR 0 5
38904: PUSH
38905: LD_INT 3
38907: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38908: LD_ADDR_VAR 0 4
38912: PUSH
38913: LD_VAR 0 5
38917: PPUSH
38918: LD_VAR 0 1
38922: PPUSH
38923: CALL_OW 248
38927: PPUSH
38928: CALL_OW 450
38932: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38933: LD_ADDR_VAR 0 2
38937: PUSH
38938: LD_VAR 0 3
38942: PPUSH
38943: LD_INT 1
38945: PPUSH
38946: CALL_OW 275
38950: PUSH
38951: LD_VAR 0 4
38955: PUSH
38956: LD_INT 1
38958: ARRAY
38959: GREATEREQUAL
38960: PUSH
38961: LD_VAR 0 3
38965: PPUSH
38966: LD_INT 2
38968: PPUSH
38969: CALL_OW 275
38973: PUSH
38974: LD_VAR 0 4
38978: PUSH
38979: LD_INT 2
38981: ARRAY
38982: GREATEREQUAL
38983: AND
38984: PUSH
38985: LD_VAR 0 3
38989: PPUSH
38990: LD_INT 3
38992: PPUSH
38993: CALL_OW 275
38997: PUSH
38998: LD_VAR 0 4
39002: PUSH
39003: LD_INT 3
39005: ARRAY
39006: GREATEREQUAL
39007: AND
39008: ST_TO_ADDR
// end ;
39009: LD_VAR 0 2
39013: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39014: LD_INT 0
39016: PPUSH
39017: PPUSH
39018: PPUSH
// pom := GetBase ( building ) ;
39019: LD_ADDR_VAR 0 4
39023: PUSH
39024: LD_VAR 0 1
39028: PPUSH
39029: CALL_OW 274
39033: ST_TO_ADDR
// if not pom then
39034: LD_VAR 0 4
39038: NOT
39039: IFFALSE 39043
// exit ;
39041: GO 39144
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39043: LD_ADDR_VAR 0 5
39047: PUSH
39048: LD_VAR 0 2
39052: PPUSH
39053: LD_VAR 0 1
39057: PPUSH
39058: CALL_OW 248
39062: PPUSH
39063: CALL_OW 450
39067: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39068: LD_ADDR_VAR 0 3
39072: PUSH
39073: LD_VAR 0 4
39077: PPUSH
39078: LD_INT 1
39080: PPUSH
39081: CALL_OW 275
39085: PUSH
39086: LD_VAR 0 5
39090: PUSH
39091: LD_INT 1
39093: ARRAY
39094: GREATEREQUAL
39095: PUSH
39096: LD_VAR 0 4
39100: PPUSH
39101: LD_INT 2
39103: PPUSH
39104: CALL_OW 275
39108: PUSH
39109: LD_VAR 0 5
39113: PUSH
39114: LD_INT 2
39116: ARRAY
39117: GREATEREQUAL
39118: AND
39119: PUSH
39120: LD_VAR 0 4
39124: PPUSH
39125: LD_INT 3
39127: PPUSH
39128: CALL_OW 275
39132: PUSH
39133: LD_VAR 0 5
39137: PUSH
39138: LD_INT 3
39140: ARRAY
39141: GREATEREQUAL
39142: AND
39143: ST_TO_ADDR
// end ;
39144: LD_VAR 0 3
39148: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39149: LD_INT 0
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
// result := false ;
39162: LD_ADDR_VAR 0 8
39166: PUSH
39167: LD_INT 0
39169: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39170: LD_VAR 0 5
39174: NOT
39175: PUSH
39176: LD_VAR 0 1
39180: NOT
39181: OR
39182: PUSH
39183: LD_VAR 0 2
39187: NOT
39188: OR
39189: PUSH
39190: LD_VAR 0 3
39194: NOT
39195: OR
39196: IFFALSE 39200
// exit ;
39198: GO 40014
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39200: LD_ADDR_VAR 0 14
39204: PUSH
39205: LD_VAR 0 1
39209: PPUSH
39210: LD_VAR 0 2
39214: PPUSH
39215: LD_VAR 0 3
39219: PPUSH
39220: LD_VAR 0 4
39224: PPUSH
39225: LD_VAR 0 5
39229: PUSH
39230: LD_INT 1
39232: ARRAY
39233: PPUSH
39234: CALL_OW 248
39238: PPUSH
39239: LD_INT 0
39241: PPUSH
39242: CALL 41267 0 6
39246: ST_TO_ADDR
// if not hexes then
39247: LD_VAR 0 14
39251: NOT
39252: IFFALSE 39256
// exit ;
39254: GO 40014
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39256: LD_ADDR_VAR 0 17
39260: PUSH
39261: LD_VAR 0 5
39265: PPUSH
39266: LD_INT 22
39268: PUSH
39269: LD_VAR 0 13
39273: PPUSH
39274: CALL_OW 255
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 2
39285: PUSH
39286: LD_INT 30
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 30
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PPUSH
39315: CALL_OW 72
39319: ST_TO_ADDR
// for i = 1 to hexes do
39320: LD_ADDR_VAR 0 9
39324: PUSH
39325: DOUBLE
39326: LD_INT 1
39328: DEC
39329: ST_TO_ADDR
39330: LD_VAR 0 14
39334: PUSH
39335: FOR_TO
39336: IFFALSE 40012
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39338: LD_ADDR_VAR 0 13
39342: PUSH
39343: LD_VAR 0 14
39347: PUSH
39348: LD_VAR 0 9
39352: ARRAY
39353: PUSH
39354: LD_INT 1
39356: ARRAY
39357: PPUSH
39358: LD_VAR 0 14
39362: PUSH
39363: LD_VAR 0 9
39367: ARRAY
39368: PUSH
39369: LD_INT 2
39371: ARRAY
39372: PPUSH
39373: CALL_OW 428
39377: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39378: LD_VAR 0 14
39382: PUSH
39383: LD_VAR 0 9
39387: ARRAY
39388: PUSH
39389: LD_INT 1
39391: ARRAY
39392: PPUSH
39393: LD_VAR 0 14
39397: PUSH
39398: LD_VAR 0 9
39402: ARRAY
39403: PUSH
39404: LD_INT 2
39406: ARRAY
39407: PPUSH
39408: CALL_OW 351
39412: PUSH
39413: LD_VAR 0 14
39417: PUSH
39418: LD_VAR 0 9
39422: ARRAY
39423: PUSH
39424: LD_INT 1
39426: ARRAY
39427: PPUSH
39428: LD_VAR 0 14
39432: PUSH
39433: LD_VAR 0 9
39437: ARRAY
39438: PUSH
39439: LD_INT 2
39441: ARRAY
39442: PPUSH
39443: CALL_OW 488
39447: NOT
39448: OR
39449: PUSH
39450: LD_VAR 0 13
39454: PPUSH
39455: CALL_OW 247
39459: PUSH
39460: LD_INT 3
39462: EQUAL
39463: OR
39464: IFFALSE 39470
// exit ;
39466: POP
39467: POP
39468: GO 40014
// if not tmp then
39470: LD_VAR 0 13
39474: NOT
39475: IFFALSE 39479
// continue ;
39477: GO 39335
// result := true ;
39479: LD_ADDR_VAR 0 8
39483: PUSH
39484: LD_INT 1
39486: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39487: LD_VAR 0 6
39491: PUSH
39492: LD_VAR 0 13
39496: PPUSH
39497: CALL_OW 247
39501: PUSH
39502: LD_INT 2
39504: EQUAL
39505: AND
39506: PUSH
39507: LD_VAR 0 13
39511: PPUSH
39512: CALL_OW 263
39516: PUSH
39517: LD_INT 1
39519: EQUAL
39520: AND
39521: IFFALSE 39685
// begin if IsDrivenBy ( tmp ) then
39523: LD_VAR 0 13
39527: PPUSH
39528: CALL_OW 311
39532: IFFALSE 39536
// continue ;
39534: GO 39335
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39536: LD_VAR 0 6
39540: PPUSH
39541: LD_INT 3
39543: PUSH
39544: LD_INT 60
39546: PUSH
39547: EMPTY
39548: LIST
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 3
39556: PUSH
39557: LD_INT 55
39559: PUSH
39560: EMPTY
39561: LIST
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PPUSH
39571: CALL_OW 72
39575: IFFALSE 39683
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39577: LD_ADDR_VAR 0 18
39581: PUSH
39582: LD_VAR 0 6
39586: PPUSH
39587: LD_INT 3
39589: PUSH
39590: LD_INT 60
39592: PUSH
39593: EMPTY
39594: LIST
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 3
39602: PUSH
39603: LD_INT 55
39605: PUSH
39606: EMPTY
39607: LIST
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PPUSH
39617: CALL_OW 72
39621: PUSH
39622: LD_INT 1
39624: ARRAY
39625: ST_TO_ADDR
// if IsInUnit ( driver ) then
39626: LD_VAR 0 18
39630: PPUSH
39631: CALL_OW 310
39635: IFFALSE 39646
// ComExit ( driver ) ;
39637: LD_VAR 0 18
39641: PPUSH
39642: CALL 65068 0 1
// AddComEnterUnit ( driver , tmp ) ;
39646: LD_VAR 0 18
39650: PPUSH
39651: LD_VAR 0 13
39655: PPUSH
39656: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39660: LD_VAR 0 18
39664: PPUSH
39665: LD_VAR 0 7
39669: PPUSH
39670: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39674: LD_VAR 0 18
39678: PPUSH
39679: CALL_OW 181
// end ; continue ;
39683: GO 39335
// end ; if not cleaners or not tmp in cleaners then
39685: LD_VAR 0 6
39689: NOT
39690: PUSH
39691: LD_VAR 0 13
39695: PUSH
39696: LD_VAR 0 6
39700: IN
39701: NOT
39702: OR
39703: IFFALSE 40010
// begin if dep then
39705: LD_VAR 0 17
39709: IFFALSE 39845
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39711: LD_ADDR_VAR 0 16
39715: PUSH
39716: LD_VAR 0 17
39720: PUSH
39721: LD_INT 1
39723: ARRAY
39724: PPUSH
39725: CALL_OW 250
39729: PPUSH
39730: LD_VAR 0 17
39734: PUSH
39735: LD_INT 1
39737: ARRAY
39738: PPUSH
39739: CALL_OW 254
39743: PPUSH
39744: LD_INT 5
39746: PPUSH
39747: CALL_OW 272
39751: PUSH
39752: LD_VAR 0 17
39756: PUSH
39757: LD_INT 1
39759: ARRAY
39760: PPUSH
39761: CALL_OW 251
39765: PPUSH
39766: LD_VAR 0 17
39770: PUSH
39771: LD_INT 1
39773: ARRAY
39774: PPUSH
39775: CALL_OW 254
39779: PPUSH
39780: LD_INT 5
39782: PPUSH
39783: CALL_OW 273
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39792: LD_VAR 0 16
39796: PUSH
39797: LD_INT 1
39799: ARRAY
39800: PPUSH
39801: LD_VAR 0 16
39805: PUSH
39806: LD_INT 2
39808: ARRAY
39809: PPUSH
39810: CALL_OW 488
39814: IFFALSE 39845
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39816: LD_VAR 0 13
39820: PPUSH
39821: LD_VAR 0 16
39825: PUSH
39826: LD_INT 1
39828: ARRAY
39829: PPUSH
39830: LD_VAR 0 16
39834: PUSH
39835: LD_INT 2
39837: ARRAY
39838: PPUSH
39839: CALL_OW 111
// continue ;
39843: GO 39335
// end ; end ; r := GetDir ( tmp ) ;
39845: LD_ADDR_VAR 0 15
39849: PUSH
39850: LD_VAR 0 13
39854: PPUSH
39855: CALL_OW 254
39859: ST_TO_ADDR
// if r = 5 then
39860: LD_VAR 0 15
39864: PUSH
39865: LD_INT 5
39867: EQUAL
39868: IFFALSE 39878
// r := 0 ;
39870: LD_ADDR_VAR 0 15
39874: PUSH
39875: LD_INT 0
39877: ST_TO_ADDR
// for j = r to 5 do
39878: LD_ADDR_VAR 0 10
39882: PUSH
39883: DOUBLE
39884: LD_VAR 0 15
39888: DEC
39889: ST_TO_ADDR
39890: LD_INT 5
39892: PUSH
39893: FOR_TO
39894: IFFALSE 40008
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39896: LD_ADDR_VAR 0 11
39900: PUSH
39901: LD_VAR 0 13
39905: PPUSH
39906: CALL_OW 250
39910: PPUSH
39911: LD_VAR 0 10
39915: PPUSH
39916: LD_INT 2
39918: PPUSH
39919: CALL_OW 272
39923: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39924: LD_ADDR_VAR 0 12
39928: PUSH
39929: LD_VAR 0 13
39933: PPUSH
39934: CALL_OW 251
39938: PPUSH
39939: LD_VAR 0 10
39943: PPUSH
39944: LD_INT 2
39946: PPUSH
39947: CALL_OW 273
39951: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39952: LD_VAR 0 11
39956: PPUSH
39957: LD_VAR 0 12
39961: PPUSH
39962: CALL_OW 488
39966: PUSH
39967: LD_VAR 0 11
39971: PPUSH
39972: LD_VAR 0 12
39976: PPUSH
39977: CALL_OW 428
39981: NOT
39982: AND
39983: IFFALSE 40006
// begin ComMoveXY ( tmp , _x , _y ) ;
39985: LD_VAR 0 13
39989: PPUSH
39990: LD_VAR 0 11
39994: PPUSH
39995: LD_VAR 0 12
39999: PPUSH
40000: CALL_OW 111
// break ;
40004: GO 40008
// end ; end ;
40006: GO 39893
40008: POP
40009: POP
// end ; end ;
40010: GO 39335
40012: POP
40013: POP
// end ;
40014: LD_VAR 0 8
40018: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40019: LD_INT 0
40021: PPUSH
// result := true ;
40022: LD_ADDR_VAR 0 3
40026: PUSH
40027: LD_INT 1
40029: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40030: LD_VAR 0 2
40034: PUSH
40035: LD_INT 24
40037: DOUBLE
40038: EQUAL
40039: IFTRUE 40049
40041: LD_INT 33
40043: DOUBLE
40044: EQUAL
40045: IFTRUE 40049
40047: GO 40074
40049: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40050: LD_ADDR_VAR 0 3
40054: PUSH
40055: LD_INT 32
40057: PPUSH
40058: LD_VAR 0 1
40062: PPUSH
40063: CALL_OW 321
40067: PUSH
40068: LD_INT 2
40070: EQUAL
40071: ST_TO_ADDR
40072: GO 40390
40074: LD_INT 20
40076: DOUBLE
40077: EQUAL
40078: IFTRUE 40082
40080: GO 40107
40082: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40083: LD_ADDR_VAR 0 3
40087: PUSH
40088: LD_INT 6
40090: PPUSH
40091: LD_VAR 0 1
40095: PPUSH
40096: CALL_OW 321
40100: PUSH
40101: LD_INT 2
40103: EQUAL
40104: ST_TO_ADDR
40105: GO 40390
40107: LD_INT 22
40109: DOUBLE
40110: EQUAL
40111: IFTRUE 40121
40113: LD_INT 36
40115: DOUBLE
40116: EQUAL
40117: IFTRUE 40121
40119: GO 40146
40121: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40122: LD_ADDR_VAR 0 3
40126: PUSH
40127: LD_INT 15
40129: PPUSH
40130: LD_VAR 0 1
40134: PPUSH
40135: CALL_OW 321
40139: PUSH
40140: LD_INT 2
40142: EQUAL
40143: ST_TO_ADDR
40144: GO 40390
40146: LD_INT 30
40148: DOUBLE
40149: EQUAL
40150: IFTRUE 40154
40152: GO 40179
40154: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40155: LD_ADDR_VAR 0 3
40159: PUSH
40160: LD_INT 20
40162: PPUSH
40163: LD_VAR 0 1
40167: PPUSH
40168: CALL_OW 321
40172: PUSH
40173: LD_INT 2
40175: EQUAL
40176: ST_TO_ADDR
40177: GO 40390
40179: LD_INT 28
40181: DOUBLE
40182: EQUAL
40183: IFTRUE 40193
40185: LD_INT 21
40187: DOUBLE
40188: EQUAL
40189: IFTRUE 40193
40191: GO 40218
40193: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40194: LD_ADDR_VAR 0 3
40198: PUSH
40199: LD_INT 21
40201: PPUSH
40202: LD_VAR 0 1
40206: PPUSH
40207: CALL_OW 321
40211: PUSH
40212: LD_INT 2
40214: EQUAL
40215: ST_TO_ADDR
40216: GO 40390
40218: LD_INT 16
40220: DOUBLE
40221: EQUAL
40222: IFTRUE 40226
40224: GO 40251
40226: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40227: LD_ADDR_VAR 0 3
40231: PUSH
40232: LD_INT 84
40234: PPUSH
40235: LD_VAR 0 1
40239: PPUSH
40240: CALL_OW 321
40244: PUSH
40245: LD_INT 2
40247: EQUAL
40248: ST_TO_ADDR
40249: GO 40390
40251: LD_INT 19
40253: DOUBLE
40254: EQUAL
40255: IFTRUE 40265
40257: LD_INT 23
40259: DOUBLE
40260: EQUAL
40261: IFTRUE 40265
40263: GO 40290
40265: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40266: LD_ADDR_VAR 0 3
40270: PUSH
40271: LD_INT 83
40273: PPUSH
40274: LD_VAR 0 1
40278: PPUSH
40279: CALL_OW 321
40283: PUSH
40284: LD_INT 2
40286: EQUAL
40287: ST_TO_ADDR
40288: GO 40390
40290: LD_INT 17
40292: DOUBLE
40293: EQUAL
40294: IFTRUE 40298
40296: GO 40323
40298: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40299: LD_ADDR_VAR 0 3
40303: PUSH
40304: LD_INT 39
40306: PPUSH
40307: LD_VAR 0 1
40311: PPUSH
40312: CALL_OW 321
40316: PUSH
40317: LD_INT 2
40319: EQUAL
40320: ST_TO_ADDR
40321: GO 40390
40323: LD_INT 18
40325: DOUBLE
40326: EQUAL
40327: IFTRUE 40331
40329: GO 40356
40331: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40332: LD_ADDR_VAR 0 3
40336: PUSH
40337: LD_INT 40
40339: PPUSH
40340: LD_VAR 0 1
40344: PPUSH
40345: CALL_OW 321
40349: PUSH
40350: LD_INT 2
40352: EQUAL
40353: ST_TO_ADDR
40354: GO 40390
40356: LD_INT 27
40358: DOUBLE
40359: EQUAL
40360: IFTRUE 40364
40362: GO 40389
40364: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40365: LD_ADDR_VAR 0 3
40369: PUSH
40370: LD_INT 35
40372: PPUSH
40373: LD_VAR 0 1
40377: PPUSH
40378: CALL_OW 321
40382: PUSH
40383: LD_INT 2
40385: EQUAL
40386: ST_TO_ADDR
40387: GO 40390
40389: POP
// end ;
40390: LD_VAR 0 3
40394: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40395: LD_INT 0
40397: PPUSH
40398: PPUSH
40399: PPUSH
40400: PPUSH
40401: PPUSH
40402: PPUSH
40403: PPUSH
40404: PPUSH
40405: PPUSH
40406: PPUSH
40407: PPUSH
// result := false ;
40408: LD_ADDR_VAR 0 6
40412: PUSH
40413: LD_INT 0
40415: ST_TO_ADDR
// if btype = b_depot then
40416: LD_VAR 0 2
40420: PUSH
40421: LD_INT 0
40423: EQUAL
40424: IFFALSE 40436
// begin result := true ;
40426: LD_ADDR_VAR 0 6
40430: PUSH
40431: LD_INT 1
40433: ST_TO_ADDR
// exit ;
40434: GO 41262
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40436: LD_VAR 0 1
40440: NOT
40441: PUSH
40442: LD_VAR 0 1
40446: PPUSH
40447: CALL_OW 266
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: IN
40462: NOT
40463: OR
40464: PUSH
40465: LD_VAR 0 2
40469: NOT
40470: OR
40471: PUSH
40472: LD_VAR 0 5
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: LD_INT 3
40488: PUSH
40489: LD_INT 4
40491: PUSH
40492: LD_INT 5
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: IN
40503: NOT
40504: OR
40505: PUSH
40506: LD_VAR 0 3
40510: PPUSH
40511: LD_VAR 0 4
40515: PPUSH
40516: CALL_OW 488
40520: NOT
40521: OR
40522: IFFALSE 40526
// exit ;
40524: GO 41262
// side := GetSide ( depot ) ;
40526: LD_ADDR_VAR 0 9
40530: PUSH
40531: LD_VAR 0 1
40535: PPUSH
40536: CALL_OW 255
40540: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40541: LD_VAR 0 9
40545: PPUSH
40546: LD_VAR 0 2
40550: PPUSH
40551: CALL 40019 0 2
40555: NOT
40556: IFFALSE 40560
// exit ;
40558: GO 41262
// pom := GetBase ( depot ) ;
40560: LD_ADDR_VAR 0 10
40564: PUSH
40565: LD_VAR 0 1
40569: PPUSH
40570: CALL_OW 274
40574: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40575: LD_ADDR_VAR 0 11
40579: PUSH
40580: LD_VAR 0 2
40584: PPUSH
40585: LD_VAR 0 1
40589: PPUSH
40590: CALL_OW 248
40594: PPUSH
40595: CALL_OW 450
40599: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40600: LD_VAR 0 10
40604: PPUSH
40605: LD_INT 1
40607: PPUSH
40608: CALL_OW 275
40612: PUSH
40613: LD_VAR 0 11
40617: PUSH
40618: LD_INT 1
40620: ARRAY
40621: GREATEREQUAL
40622: PUSH
40623: LD_VAR 0 10
40627: PPUSH
40628: LD_INT 2
40630: PPUSH
40631: CALL_OW 275
40635: PUSH
40636: LD_VAR 0 11
40640: PUSH
40641: LD_INT 2
40643: ARRAY
40644: GREATEREQUAL
40645: AND
40646: PUSH
40647: LD_VAR 0 10
40651: PPUSH
40652: LD_INT 3
40654: PPUSH
40655: CALL_OW 275
40659: PUSH
40660: LD_VAR 0 11
40664: PUSH
40665: LD_INT 3
40667: ARRAY
40668: GREATEREQUAL
40669: AND
40670: NOT
40671: IFFALSE 40675
// exit ;
40673: GO 41262
// if GetBType ( depot ) = b_depot then
40675: LD_VAR 0 1
40679: PPUSH
40680: CALL_OW 266
40684: PUSH
40685: LD_INT 0
40687: EQUAL
40688: IFFALSE 40700
// dist := 28 else
40690: LD_ADDR_VAR 0 14
40694: PUSH
40695: LD_INT 28
40697: ST_TO_ADDR
40698: GO 40708
// dist := 36 ;
40700: LD_ADDR_VAR 0 14
40704: PUSH
40705: LD_INT 36
40707: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40708: LD_VAR 0 1
40712: PPUSH
40713: LD_VAR 0 3
40717: PPUSH
40718: LD_VAR 0 4
40722: PPUSH
40723: CALL_OW 297
40727: PUSH
40728: LD_VAR 0 14
40732: GREATER
40733: IFFALSE 40737
// exit ;
40735: GO 41262
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40737: LD_ADDR_VAR 0 12
40741: PUSH
40742: LD_VAR 0 2
40746: PPUSH
40747: LD_VAR 0 3
40751: PPUSH
40752: LD_VAR 0 4
40756: PPUSH
40757: LD_VAR 0 5
40761: PPUSH
40762: LD_VAR 0 1
40766: PPUSH
40767: CALL_OW 248
40771: PPUSH
40772: LD_INT 0
40774: PPUSH
40775: CALL 41267 0 6
40779: ST_TO_ADDR
// if not hexes then
40780: LD_VAR 0 12
40784: NOT
40785: IFFALSE 40789
// exit ;
40787: GO 41262
// hex := GetHexInfo ( x , y ) ;
40789: LD_ADDR_VAR 0 15
40793: PUSH
40794: LD_VAR 0 3
40798: PPUSH
40799: LD_VAR 0 4
40803: PPUSH
40804: CALL_OW 546
40808: ST_TO_ADDR
// if hex [ 1 ] then
40809: LD_VAR 0 15
40813: PUSH
40814: LD_INT 1
40816: ARRAY
40817: IFFALSE 40821
// exit ;
40819: GO 41262
// height := hex [ 2 ] ;
40821: LD_ADDR_VAR 0 13
40825: PUSH
40826: LD_VAR 0 15
40830: PUSH
40831: LD_INT 2
40833: ARRAY
40834: ST_TO_ADDR
// for i = 1 to hexes do
40835: LD_ADDR_VAR 0 7
40839: PUSH
40840: DOUBLE
40841: LD_INT 1
40843: DEC
40844: ST_TO_ADDR
40845: LD_VAR 0 12
40849: PUSH
40850: FOR_TO
40851: IFFALSE 41181
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40853: LD_VAR 0 12
40857: PUSH
40858: LD_VAR 0 7
40862: ARRAY
40863: PUSH
40864: LD_INT 1
40866: ARRAY
40867: PPUSH
40868: LD_VAR 0 12
40872: PUSH
40873: LD_VAR 0 7
40877: ARRAY
40878: PUSH
40879: LD_INT 2
40881: ARRAY
40882: PPUSH
40883: CALL_OW 488
40887: NOT
40888: PUSH
40889: LD_VAR 0 12
40893: PUSH
40894: LD_VAR 0 7
40898: ARRAY
40899: PUSH
40900: LD_INT 1
40902: ARRAY
40903: PPUSH
40904: LD_VAR 0 12
40908: PUSH
40909: LD_VAR 0 7
40913: ARRAY
40914: PUSH
40915: LD_INT 2
40917: ARRAY
40918: PPUSH
40919: CALL_OW 428
40923: PUSH
40924: LD_INT 0
40926: GREATER
40927: OR
40928: PUSH
40929: LD_VAR 0 12
40933: PUSH
40934: LD_VAR 0 7
40938: ARRAY
40939: PUSH
40940: LD_INT 1
40942: ARRAY
40943: PPUSH
40944: LD_VAR 0 12
40948: PUSH
40949: LD_VAR 0 7
40953: ARRAY
40954: PUSH
40955: LD_INT 2
40957: ARRAY
40958: PPUSH
40959: CALL_OW 351
40963: OR
40964: IFFALSE 40970
// exit ;
40966: POP
40967: POP
40968: GO 41262
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40970: LD_ADDR_VAR 0 8
40974: PUSH
40975: LD_VAR 0 12
40979: PUSH
40980: LD_VAR 0 7
40984: ARRAY
40985: PUSH
40986: LD_INT 1
40988: ARRAY
40989: PPUSH
40990: LD_VAR 0 12
40994: PUSH
40995: LD_VAR 0 7
40999: ARRAY
41000: PUSH
41001: LD_INT 2
41003: ARRAY
41004: PPUSH
41005: CALL_OW 546
41009: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41010: LD_VAR 0 8
41014: PUSH
41015: LD_INT 1
41017: ARRAY
41018: PUSH
41019: LD_VAR 0 8
41023: PUSH
41024: LD_INT 2
41026: ARRAY
41027: PUSH
41028: LD_VAR 0 13
41032: PUSH
41033: LD_INT 2
41035: PLUS
41036: GREATER
41037: OR
41038: PUSH
41039: LD_VAR 0 8
41043: PUSH
41044: LD_INT 2
41046: ARRAY
41047: PUSH
41048: LD_VAR 0 13
41052: PUSH
41053: LD_INT 2
41055: MINUS
41056: LESS
41057: OR
41058: PUSH
41059: LD_VAR 0 8
41063: PUSH
41064: LD_INT 3
41066: ARRAY
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 8
41073: PUSH
41074: LD_INT 9
41076: PUSH
41077: LD_INT 10
41079: PUSH
41080: LD_INT 11
41082: PUSH
41083: LD_INT 12
41085: PUSH
41086: LD_INT 13
41088: PUSH
41089: LD_INT 16
41091: PUSH
41092: LD_INT 17
41094: PUSH
41095: LD_INT 18
41097: PUSH
41098: LD_INT 19
41100: PUSH
41101: LD_INT 20
41103: PUSH
41104: LD_INT 21
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: IN
41122: NOT
41123: OR
41124: PUSH
41125: LD_VAR 0 8
41129: PUSH
41130: LD_INT 5
41132: ARRAY
41133: NOT
41134: OR
41135: PUSH
41136: LD_VAR 0 8
41140: PUSH
41141: LD_INT 6
41143: ARRAY
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 2
41150: PUSH
41151: LD_INT 7
41153: PUSH
41154: LD_INT 9
41156: PUSH
41157: LD_INT 10
41159: PUSH
41160: LD_INT 11
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: IN
41171: NOT
41172: OR
41173: IFFALSE 41179
// exit ;
41175: POP
41176: POP
41177: GO 41262
// end ;
41179: GO 40850
41181: POP
41182: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41183: LD_VAR 0 9
41187: PPUSH
41188: LD_VAR 0 3
41192: PPUSH
41193: LD_VAR 0 4
41197: PPUSH
41198: LD_INT 20
41200: PPUSH
41201: CALL 33185 0 4
41205: PUSH
41206: LD_INT 4
41208: ARRAY
41209: IFFALSE 41213
// exit ;
41211: GO 41262
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41213: LD_VAR 0 2
41217: PUSH
41218: LD_INT 29
41220: PUSH
41221: LD_INT 30
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: IN
41228: PUSH
41229: LD_VAR 0 3
41233: PPUSH
41234: LD_VAR 0 4
41238: PPUSH
41239: LD_VAR 0 9
41243: PPUSH
41244: CALL_OW 440
41248: NOT
41249: AND
41250: IFFALSE 41254
// exit ;
41252: GO 41262
// result := true ;
41254: LD_ADDR_VAR 0 6
41258: PUSH
41259: LD_INT 1
41261: ST_TO_ADDR
// end ;
41262: LD_VAR 0 6
41266: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41267: LD_INT 0
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
41302: PPUSH
41303: PPUSH
41304: PPUSH
41305: PPUSH
41306: PPUSH
41307: PPUSH
41308: PPUSH
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
41320: PPUSH
41321: PPUSH
41322: PPUSH
41323: PPUSH
41324: PPUSH
41325: PPUSH
41326: PPUSH
// result = [ ] ;
41327: LD_ADDR_VAR 0 7
41331: PUSH
41332: EMPTY
41333: ST_TO_ADDR
// temp_list = [ ] ;
41334: LD_ADDR_VAR 0 9
41338: PUSH
41339: EMPTY
41340: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41341: LD_VAR 0 4
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: LD_INT 3
41357: PUSH
41358: LD_INT 4
41360: PUSH
41361: LD_INT 5
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: IN
41372: NOT
41373: PUSH
41374: LD_VAR 0 1
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: IN
41389: PUSH
41390: LD_VAR 0 5
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: LD_INT 3
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: LIST
41408: IN
41409: NOT
41410: AND
41411: OR
41412: IFFALSE 41416
// exit ;
41414: GO 59807
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41416: LD_VAR 0 1
41420: PUSH
41421: LD_INT 6
41423: PUSH
41424: LD_INT 7
41426: PUSH
41427: LD_INT 8
41429: PUSH
41430: LD_INT 13
41432: PUSH
41433: LD_INT 12
41435: PUSH
41436: LD_INT 15
41438: PUSH
41439: LD_INT 11
41441: PUSH
41442: LD_INT 14
41444: PUSH
41445: LD_INT 10
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: IN
41459: IFFALSE 41469
// btype = b_lab ;
41461: LD_ADDR_VAR 0 1
41465: PUSH
41466: LD_INT 6
41468: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41469: LD_VAR 0 6
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 2
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: LIST
41487: IN
41488: NOT
41489: PUSH
41490: LD_VAR 0 1
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: LD_INT 3
41506: PUSH
41507: LD_INT 6
41509: PUSH
41510: LD_INT 36
41512: PUSH
41513: LD_INT 4
41515: PUSH
41516: LD_INT 5
41518: PUSH
41519: LD_INT 31
41521: PUSH
41522: LD_INT 32
41524: PUSH
41525: LD_INT 33
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: IN
41541: NOT
41542: PUSH
41543: LD_VAR 0 6
41547: PUSH
41548: LD_INT 1
41550: EQUAL
41551: AND
41552: OR
41553: PUSH
41554: LD_VAR 0 1
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: LD_INT 3
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: IN
41569: NOT
41570: PUSH
41571: LD_VAR 0 6
41575: PUSH
41576: LD_INT 2
41578: EQUAL
41579: AND
41580: OR
41581: IFFALSE 41591
// mode = 0 ;
41583: LD_ADDR_VAR 0 6
41587: PUSH
41588: LD_INT 0
41590: ST_TO_ADDR
// case mode of 0 :
41591: LD_VAR 0 6
41595: PUSH
41596: LD_INT 0
41598: DOUBLE
41599: EQUAL
41600: IFTRUE 41604
41602: GO 53057
41604: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41605: LD_ADDR_VAR 0 11
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: LD_INT 2
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 3
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 3
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41798: LD_ADDR_VAR 0 12
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: NEG
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 3
41966: NEG
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41994: LD_ADDR_VAR 0 13
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 2
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 2
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: PUSH
42098: LD_INT 2
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 2
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 2
42129: NEG
42130: PUSH
42131: LD_INT 2
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 2
42141: NEG
42142: PUSH
42143: LD_INT 3
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 3
42153: NEG
42154: PUSH
42155: LD_INT 2
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 3
42165: NEG
42166: PUSH
42167: LD_INT 3
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42193: LD_ADDR_VAR 0 14
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 3
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 3
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42389: LD_ADDR_VAR 0 15
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 2
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 3
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 3
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42582: LD_ADDR_VAR 0 16
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 3
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 3
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42775: LD_ADDR_VAR 0 17
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: NEG
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: NEG
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 2
42974: NEG
42975: PUSH
42976: LD_INT 2
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43005: LD_ADDR_VAR 0 18
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: LD_INT 2
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43235: LD_ADDR_VAR 0 19
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43465: LD_ADDR_VAR 0 20
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43695: LD_ADDR_VAR 0 21
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: NEG
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43925: LD_ADDR_VAR 0 22
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 2
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: NEG
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44155: LD_ADDR_VAR 0 23
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 2
44366: NEG
44367: PUSH
44368: LD_INT 3
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: LD_INT 3
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: LD_INT 2
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44435: LD_ADDR_VAR 0 24
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 2
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 2
44622: NEG
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 2
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44711: LD_ADDR_VAR 0 25
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: LD_INT 2
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: LD_INT 2
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 3
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 3
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: LD_INT 3
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 3
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44985: LD_ADDR_VAR 0 26
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: LD_INT 3
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 3
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45261: LD_ADDR_VAR 0 27
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 2
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: LD_INT 1
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: NEG
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: LD_INT 2
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 3
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 3
45506: NEG
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45541: LD_ADDR_VAR 0 28
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: LD_INT 2
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: LD_INT 3
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 3
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 3
45776: NEG
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 3
45788: NEG
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45823: LD_ADDR_VAR 0 29
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: LD_INT 3
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 3
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: LD_INT 3
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 2
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 3
46067: NEG
46068: PUSH
46069: LD_INT 2
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46102: LD_ADDR_VAR 0 30
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 3
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 2
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 3
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 3
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46380: LD_ADDR_VAR 0 31
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: LD_INT 2
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: LD_INT 3
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 3
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 3
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 3
46623: NEG
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46658: LD_ADDR_VAR 0 32
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 3
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 3
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 3
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 3
46901: NEG
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46936: LD_ADDR_VAR 0 33
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: LD_INT 3
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 3
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 3
47180: NEG
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47215: LD_ADDR_VAR 0 34
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: LD_INT 2
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: NEG
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 3
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 2
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 3
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 3
47460: NEG
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47495: LD_ADDR_VAR 0 35
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47607: LD_ADDR_VAR 0 36
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47719: LD_ADDR_VAR 0 37
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47831: LD_ADDR_VAR 0 38
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47943: LD_ADDR_VAR 0 39
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48055: LD_ADDR_VAR 0 40
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48167: LD_ADDR_VAR 0 41
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: LD_INT 3
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 3
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 3
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 3
48410: PUSH
48411: LD_INT 3
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 3
48441: NEG
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 3
48452: NEG
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 3
48464: NEG
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 3
48476: NEG
48477: PUSH
48478: LD_INT 3
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48517: LD_ADDR_VAR 0 42
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: LD_INT 3
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 3
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 3
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 3
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 3
48814: NEG
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 3
48826: NEG
48827: PUSH
48828: LD_INT 3
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48867: LD_ADDR_VAR 0 43
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 3
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 3
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 3
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 3
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 3
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 3
49163: NEG
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 3
49174: NEG
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49215: LD_ADDR_VAR 0 44
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: NEG
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: LD_INT 3
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 3
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: PUSH
49469: LD_INT 3
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 3
49500: NEG
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 3
49512: NEG
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 3
49524: NEG
49525: PUSH
49526: LD_INT 3
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49565: LD_ADDR_VAR 0 45
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 2
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 3
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 3
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 3
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 3
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 3
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: LD_INT 3
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 3
49862: NEG
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: NEG
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49915: LD_ADDR_VAR 0 46
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 3
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 3
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 3
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 3
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: LD_INT 3
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 3
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 3
50211: NEG
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 3
50222: NEG
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50263: LD_ADDR_VAR 0 47
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: LD_INT 2
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50414: LD_ADDR_VAR 0 48
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 2
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50561: LD_ADDR_VAR 0 49
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50705: LD_ADDR_VAR 0 50
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50849: LD_ADDR_VAR 0 51
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50996: LD_ADDR_VAR 0 52
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51147: LD_ADDR_VAR 0 53
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51377: LD_ADDR_VAR 0 54
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51607: LD_ADDR_VAR 0 55
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51837: LD_ADDR_VAR 0 56
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52067: LD_ADDR_VAR 0 57
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52297: LD_ADDR_VAR 0 58
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52527: LD_ADDR_VAR 0 59
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52615: LD_ADDR_VAR 0 60
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52703: LD_ADDR_VAR 0 61
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52791: LD_ADDR_VAR 0 62
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52879: LD_ADDR_VAR 0 63
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52967: LD_ADDR_VAR 0 64
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: ST_TO_ADDR
// end ; 1 :
53055: GO 58952
53057: LD_INT 1
53059: DOUBLE
53060: EQUAL
53061: IFTRUE 53065
53063: GO 55688
53065: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53066: LD_ADDR_VAR 0 11
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 3
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 3
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: LIST
53109: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53110: LD_ADDR_VAR 0 12
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 3
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: LIST
53150: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53151: LD_ADDR_VAR 0 13
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: LD_INT 3
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: LD_INT 3
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: LIST
53190: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53191: LD_ADDR_VAR 0 14
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 3
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: LIST
53231: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53232: LD_ADDR_VAR 0 15
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 3
53250: NEG
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 3
53261: NEG
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: LIST
53275: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53276: LD_ADDR_VAR 0 16
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: LD_INT 3
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 3
53295: NEG
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 3
53307: NEG
53308: PUSH
53309: LD_INT 3
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: LIST
53321: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53322: LD_ADDR_VAR 0 17
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 3
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 3
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: LIST
53365: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53366: LD_ADDR_VAR 0 18
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: LIST
53406: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53407: LD_ADDR_VAR 0 19
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: LIST
53446: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53447: LD_ADDR_VAR 0 20
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 3
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: LIST
53487: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53488: LD_ADDR_VAR 0 21
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 3
53506: NEG
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 3
53517: NEG
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: LIST
53531: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53532: LD_ADDR_VAR 0 22
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 3
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 3
53551: NEG
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 3
53563: NEG
53564: PUSH
53565: LD_INT 3
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: LIST
53577: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53578: LD_ADDR_VAR 0 23
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 3
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: LD_INT 4
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 3
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53622: LD_ADDR_VAR 0 24
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 4
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53663: LD_ADDR_VAR 0 25
53667: PUSH
53668: LD_INT 3
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 4
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 4
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: LIST
53702: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53703: LD_ADDR_VAR 0 26
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: LD_INT 4
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: LIST
53743: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53744: LD_ADDR_VAR 0 27
53748: PUSH
53749: LD_INT 3
53751: NEG
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 3
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 4
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: LIST
53787: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53788: LD_ADDR_VAR 0 28
53792: PUSH
53793: LD_INT 3
53795: NEG
53796: PUSH
53797: LD_INT 3
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: LD_INT 4
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 4
53819: NEG
53820: PUSH
53821: LD_INT 3
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: LIST
53833: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53834: LD_ADDR_VAR 0 29
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 4
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 4
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 3
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 5
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: LD_INT 5
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 4
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 6
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 6
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: LD_INT 5
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53989: LD_ADDR_VAR 0 30
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 3
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 3
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 3
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 4
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 4
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 4
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 5
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 5
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 5
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 6
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 6
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54132: LD_ADDR_VAR 0 31
54136: PUSH
54137: LD_INT 3
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 4
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 4
54179: PUSH
54180: LD_INT 4
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 3
54189: PUSH
54190: LD_INT 4
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 5
54199: PUSH
54200: LD_INT 4
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 5
54209: PUSH
54210: LD_INT 5
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 4
54219: PUSH
54220: LD_INT 5
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 6
54229: PUSH
54230: LD_INT 5
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 6
54239: PUSH
54240: LD_INT 6
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 5
54249: PUSH
54250: LD_INT 6
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54271: LD_ADDR_VAR 0 32
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 4
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 4
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: LD_INT 5
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 5
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 4
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: LD_INT 6
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 6
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 5
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54414: LD_ADDR_VAR 0 33
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 3
54432: NEG
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 4
54466: NEG
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 4
54477: NEG
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 4
54489: NEG
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 5
54500: NEG
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 5
54511: NEG
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 5
54523: NEG
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 6
54534: NEG
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 6
54545: NEG
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54569: LD_ADDR_VAR 0 34
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: LD_INT 3
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 3
54588: NEG
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 3
54600: NEG
54601: PUSH
54602: LD_INT 3
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 3
54612: NEG
54613: PUSH
54614: LD_INT 4
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 4
54624: NEG
54625: PUSH
54626: LD_INT 3
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 4
54636: NEG
54637: PUSH
54638: LD_INT 4
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 4
54648: NEG
54649: PUSH
54650: LD_INT 5
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 5
54660: NEG
54661: PUSH
54662: LD_INT 4
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 5
54672: NEG
54673: PUSH
54674: LD_INT 5
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 5
54684: NEG
54685: PUSH
54686: LD_INT 6
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 6
54696: NEG
54697: PUSH
54698: LD_INT 5
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 6
54708: NEG
54709: PUSH
54710: LD_INT 6
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54732: LD_ADDR_VAR 0 41
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 3
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: LIST
54775: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54776: LD_ADDR_VAR 0 42
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: LIST
54816: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54817: LD_ADDR_VAR 0 43
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 3
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: LD_INT 3
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: LIST
54856: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54857: LD_ADDR_VAR 0 44
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 3
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54898: LD_ADDR_VAR 0 45
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 3
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: LIST
54941: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54942: LD_ADDR_VAR 0 46
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: NEG
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 3
54973: NEG
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: LIST
54987: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54988: LD_ADDR_VAR 0 47
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: LD_INT 3
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55021: LD_ADDR_VAR 0 48
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55052: LD_ADDR_VAR 0 49
55056: PUSH
55057: LD_INT 3
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 3
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55081: LD_ADDR_VAR 0 50
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: LD_INT 3
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 3
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55110: LD_ADDR_VAR 0 51
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55141: LD_ADDR_VAR 0 52
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: NEG
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55174: LD_ADDR_VAR 0 53
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: LD_INT 3
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: LD_INT 3
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55218: LD_ADDR_VAR 0 54
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: LIST
55258: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55259: LD_ADDR_VAR 0 55
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: LIST
55298: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55299: LD_ADDR_VAR 0 56
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 3
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: LIST
55339: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55340: LD_ADDR_VAR 0 57
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: NEG
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 3
55369: NEG
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55384: LD_ADDR_VAR 0 58
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: LD_INT 3
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 3
55415: NEG
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55430: LD_ADDR_VAR 0 59
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55474: LD_ADDR_VAR 0 60
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: LIST
55514: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55515: LD_ADDR_VAR 0 61
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: LIST
55554: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55555: LD_ADDR_VAR 0 62
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: LIST
55595: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55596: LD_ADDR_VAR 0 63
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55640: LD_ADDR_VAR 0 64
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: LIST
55685: ST_TO_ADDR
// end ; 2 :
55686: GO 58952
55688: LD_INT 2
55690: DOUBLE
55691: EQUAL
55692: IFTRUE 55696
55694: GO 58951
55696: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55697: LD_ADDR_VAR 0 29
55701: PUSH
55702: LD_INT 4
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 4
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 5
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 5
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 4
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 3
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 3
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 5
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 3
55797: PUSH
55798: LD_INT 3
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 3
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 4
55817: PUSH
55818: LD_INT 3
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 4
55827: PUSH
55828: LD_INT 4
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 3
55837: PUSH
55838: LD_INT 4
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 3
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 4
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: LD_INT 4
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 4
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 3
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 4
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 5
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 5
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 4
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: LD_INT 5
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: NEG
55970: PUSH
55971: LD_INT 3
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 3
55980: NEG
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: NEG
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 4
56036: NEG
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 4
56047: NEG
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 4
56059: NEG
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 4
56082: NEG
56083: PUSH
56084: LD_INT 4
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 4
56094: NEG
56095: PUSH
56096: LD_INT 5
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 3
56106: NEG
56107: PUSH
56108: LD_INT 4
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 3
56118: NEG
56119: PUSH
56120: LD_INT 3
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 4
56130: NEG
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 5
56142: NEG
56143: PUSH
56144: LD_INT 4
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 5
56154: NEG
56155: PUSH
56156: LD_INT 5
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: LD_INT 5
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 5
56178: NEG
56179: PUSH
56180: LD_INT 3
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56235: LD_ADDR_VAR 0 30
56239: PUSH
56240: LD_INT 4
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 4
56252: PUSH
56253: LD_INT 3
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 5
56262: PUSH
56263: LD_INT 4
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 5
56272: PUSH
56273: LD_INT 5
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 4
56282: PUSH
56283: LD_INT 5
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: LD_INT 4
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: LD_INT 3
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 5
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 3
56322: PUSH
56323: LD_INT 5
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 3
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 3
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: LD_INT 4
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 4
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 4
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: LD_INT 2
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 4
56425: NEG
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 4
56436: NEG
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 3
56448: NEG
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 3
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 4
56470: NEG
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 5
56481: NEG
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 5
56492: NEG
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 5
56504: NEG
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 3
56516: NEG
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 3
56527: NEG
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 3
56539: NEG
56540: PUSH
56541: LD_INT 4
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 3
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 3
56575: NEG
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 4
56587: NEG
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 4
56599: NEG
56600: PUSH
56601: LD_INT 4
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 4
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 4
56623: NEG
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 4
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 5
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 4
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: LD_INT 3
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 4
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 5
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: LD_INT 3
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: LD_INT 5
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56782: LD_ADDR_VAR 0 31
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: LD_INT 4
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 3
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 4
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 5
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 5
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 4
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: LD_INT 3
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: LD_INT 5
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: NEG
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 3
56882: NEG
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 3
56893: NEG
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: NEG
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: NEG
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 4
56938: NEG
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 4
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 4
56961: NEG
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 4
56984: NEG
56985: PUSH
56986: LD_INT 4
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 4
56996: NEG
56997: PUSH
56998: LD_INT 5
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 3
57008: NEG
57009: PUSH
57010: LD_INT 4
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 3
57020: NEG
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 4
57032: NEG
57033: PUSH
57034: LD_INT 3
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 5
57044: NEG
57045: PUSH
57046: LD_INT 4
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 5
57056: NEG
57057: PUSH
57058: LD_INT 5
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: LD_INT 5
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 5
57080: NEG
57081: PUSH
57082: LD_INT 3
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 3
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 4
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 3
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: LD_INT 4
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: LD_INT 4
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 4
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 4
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 5
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 5
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 4
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 3
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 5
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57332: LD_ADDR_VAR 0 32
57336: PUSH
57337: LD_INT 4
57339: NEG
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 4
57350: NEG
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 3
57362: NEG
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 3
57373: NEG
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 4
57384: NEG
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 5
57395: NEG
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 5
57406: NEG
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 5
57418: NEG
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: NEG
57442: PUSH
57443: LD_INT 3
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 3
57453: NEG
57454: PUSH
57455: LD_INT 4
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: LD_INT 3
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 3
57489: NEG
57490: PUSH
57491: LD_INT 2
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 4
57501: NEG
57502: PUSH
57503: LD_INT 3
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 4
57513: NEG
57514: PUSH
57515: LD_INT 4
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: LD_INT 4
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 4
57537: NEG
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 4
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: LD_INT 5
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: LD_INT 4
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: LD_INT 3
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: LD_INT 3
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 4
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 5
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: LD_INT 3
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 5
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 3
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 4
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 4
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 3
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 4
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 4
57744: PUSH
57745: LD_INT 4
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 4
57754: PUSH
57755: LD_INT 3
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 5
57764: PUSH
57765: LD_INT 4
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 5
57774: PUSH
57775: LD_INT 5
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 4
57784: PUSH
57785: LD_INT 5
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 3
57794: PUSH
57795: LD_INT 4
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: PUSH
57805: LD_INT 3
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 5
57814: PUSH
57815: LD_INT 3
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 3
57824: PUSH
57825: LD_INT 5
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57879: LD_ADDR_VAR 0 33
57883: PUSH
57884: LD_INT 4
57886: NEG
57887: PUSH
57888: LD_INT 4
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 4
57898: NEG
57899: PUSH
57900: LD_INT 5
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 3
57910: NEG
57911: PUSH
57912: LD_INT 4
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 3
57922: NEG
57923: PUSH
57924: LD_INT 3
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 4
57934: NEG
57935: PUSH
57936: LD_INT 3
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 5
57946: NEG
57947: PUSH
57948: LD_INT 4
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 5
57958: NEG
57959: PUSH
57960: LD_INT 5
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 3
57970: NEG
57971: PUSH
57972: LD_INT 5
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 5
57982: NEG
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 4
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 3
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: LD_INT 4
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 2
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: LD_INT 4
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 4
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 4
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 5
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 5
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 4
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 3
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 3
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 5
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 3
58189: PUSH
58190: LD_INT 3
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 4
58209: PUSH
58210: LD_INT 3
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 4
58219: PUSH
58220: LD_INT 4
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: LD_INT 4
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: LD_INT 3
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 4
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: LD_INT 4
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 4
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 3
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 4
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 5
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 5
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: LD_INT 4
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: LD_INT 3
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 2
58351: PUSH
58352: LD_INT 5
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: LD_INT 3
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58417: LD_ADDR_VAR 0 34
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 4
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 5
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: LD_INT 4
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: LD_INT 3
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: LD_INT 4
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 5
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: LD_INT 3
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: LD_INT 5
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 3
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 4
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 4
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 4
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 4
58619: PUSH
58620: LD_INT 4
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 4
58629: PUSH
58630: LD_INT 3
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 5
58639: PUSH
58640: LD_INT 4
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 5
58649: PUSH
58650: LD_INT 5
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 4
58659: PUSH
58660: LD_INT 5
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 3
58669: PUSH
58670: LD_INT 4
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 3
58679: PUSH
58680: LD_INT 3
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 5
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 3
58699: PUSH
58700: LD_INT 5
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 3
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 4
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 4
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: LD_INT 4
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 4
58802: NEG
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 4
58813: NEG
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: NEG
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 3
58836: NEG
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 4
58847: NEG
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 5
58858: NEG
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 5
58869: NEG
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 5
58881: NEG
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 3
58893: NEG
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: ST_TO_ADDR
// end ; end ;
58949: GO 58952
58951: POP
// case btype of b_depot , b_warehouse :
58952: LD_VAR 0 1
58956: PUSH
58957: LD_INT 0
58959: DOUBLE
58960: EQUAL
58961: IFTRUE 58971
58963: LD_INT 1
58965: DOUBLE
58966: EQUAL
58967: IFTRUE 58971
58969: GO 59172
58971: POP
// case nation of nation_american :
58972: LD_VAR 0 5
58976: PUSH
58977: LD_INT 1
58979: DOUBLE
58980: EQUAL
58981: IFTRUE 58985
58983: GO 59041
58985: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58986: LD_ADDR_VAR 0 9
58990: PUSH
58991: LD_VAR 0 11
58995: PUSH
58996: LD_VAR 0 12
59000: PUSH
59001: LD_VAR 0 13
59005: PUSH
59006: LD_VAR 0 14
59010: PUSH
59011: LD_VAR 0 15
59015: PUSH
59016: LD_VAR 0 16
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: PUSH
59029: LD_VAR 0 4
59033: PUSH
59034: LD_INT 1
59036: PLUS
59037: ARRAY
59038: ST_TO_ADDR
59039: GO 59170
59041: LD_INT 2
59043: DOUBLE
59044: EQUAL
59045: IFTRUE 59049
59047: GO 59105
59049: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59050: LD_ADDR_VAR 0 9
59054: PUSH
59055: LD_VAR 0 17
59059: PUSH
59060: LD_VAR 0 18
59064: PUSH
59065: LD_VAR 0 19
59069: PUSH
59070: LD_VAR 0 20
59074: PUSH
59075: LD_VAR 0 21
59079: PUSH
59080: LD_VAR 0 22
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: PUSH
59093: LD_VAR 0 4
59097: PUSH
59098: LD_INT 1
59100: PLUS
59101: ARRAY
59102: ST_TO_ADDR
59103: GO 59170
59105: LD_INT 3
59107: DOUBLE
59108: EQUAL
59109: IFTRUE 59113
59111: GO 59169
59113: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59114: LD_ADDR_VAR 0 9
59118: PUSH
59119: LD_VAR 0 23
59123: PUSH
59124: LD_VAR 0 24
59128: PUSH
59129: LD_VAR 0 25
59133: PUSH
59134: LD_VAR 0 26
59138: PUSH
59139: LD_VAR 0 27
59143: PUSH
59144: LD_VAR 0 28
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: PUSH
59157: LD_VAR 0 4
59161: PUSH
59162: LD_INT 1
59164: PLUS
59165: ARRAY
59166: ST_TO_ADDR
59167: GO 59170
59169: POP
59170: GO 59725
59172: LD_INT 2
59174: DOUBLE
59175: EQUAL
59176: IFTRUE 59186
59178: LD_INT 3
59180: DOUBLE
59181: EQUAL
59182: IFTRUE 59186
59184: GO 59242
59186: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59187: LD_ADDR_VAR 0 9
59191: PUSH
59192: LD_VAR 0 29
59196: PUSH
59197: LD_VAR 0 30
59201: PUSH
59202: LD_VAR 0 31
59206: PUSH
59207: LD_VAR 0 32
59211: PUSH
59212: LD_VAR 0 33
59216: PUSH
59217: LD_VAR 0 34
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: PUSH
59230: LD_VAR 0 4
59234: PUSH
59235: LD_INT 1
59237: PLUS
59238: ARRAY
59239: ST_TO_ADDR
59240: GO 59725
59242: LD_INT 16
59244: DOUBLE
59245: EQUAL
59246: IFTRUE 59304
59248: LD_INT 17
59250: DOUBLE
59251: EQUAL
59252: IFTRUE 59304
59254: LD_INT 18
59256: DOUBLE
59257: EQUAL
59258: IFTRUE 59304
59260: LD_INT 19
59262: DOUBLE
59263: EQUAL
59264: IFTRUE 59304
59266: LD_INT 22
59268: DOUBLE
59269: EQUAL
59270: IFTRUE 59304
59272: LD_INT 20
59274: DOUBLE
59275: EQUAL
59276: IFTRUE 59304
59278: LD_INT 21
59280: DOUBLE
59281: EQUAL
59282: IFTRUE 59304
59284: LD_INT 23
59286: DOUBLE
59287: EQUAL
59288: IFTRUE 59304
59290: LD_INT 24
59292: DOUBLE
59293: EQUAL
59294: IFTRUE 59304
59296: LD_INT 25
59298: DOUBLE
59299: EQUAL
59300: IFTRUE 59304
59302: GO 59360
59304: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59305: LD_ADDR_VAR 0 9
59309: PUSH
59310: LD_VAR 0 35
59314: PUSH
59315: LD_VAR 0 36
59319: PUSH
59320: LD_VAR 0 37
59324: PUSH
59325: LD_VAR 0 38
59329: PUSH
59330: LD_VAR 0 39
59334: PUSH
59335: LD_VAR 0 40
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: PUSH
59348: LD_VAR 0 4
59352: PUSH
59353: LD_INT 1
59355: PLUS
59356: ARRAY
59357: ST_TO_ADDR
59358: GO 59725
59360: LD_INT 6
59362: DOUBLE
59363: EQUAL
59364: IFTRUE 59416
59366: LD_INT 7
59368: DOUBLE
59369: EQUAL
59370: IFTRUE 59416
59372: LD_INT 8
59374: DOUBLE
59375: EQUAL
59376: IFTRUE 59416
59378: LD_INT 13
59380: DOUBLE
59381: EQUAL
59382: IFTRUE 59416
59384: LD_INT 12
59386: DOUBLE
59387: EQUAL
59388: IFTRUE 59416
59390: LD_INT 15
59392: DOUBLE
59393: EQUAL
59394: IFTRUE 59416
59396: LD_INT 11
59398: DOUBLE
59399: EQUAL
59400: IFTRUE 59416
59402: LD_INT 14
59404: DOUBLE
59405: EQUAL
59406: IFTRUE 59416
59408: LD_INT 10
59410: DOUBLE
59411: EQUAL
59412: IFTRUE 59416
59414: GO 59472
59416: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59417: LD_ADDR_VAR 0 9
59421: PUSH
59422: LD_VAR 0 41
59426: PUSH
59427: LD_VAR 0 42
59431: PUSH
59432: LD_VAR 0 43
59436: PUSH
59437: LD_VAR 0 44
59441: PUSH
59442: LD_VAR 0 45
59446: PUSH
59447: LD_VAR 0 46
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: PUSH
59460: LD_VAR 0 4
59464: PUSH
59465: LD_INT 1
59467: PLUS
59468: ARRAY
59469: ST_TO_ADDR
59470: GO 59725
59472: LD_INT 36
59474: DOUBLE
59475: EQUAL
59476: IFTRUE 59480
59478: GO 59536
59480: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59481: LD_ADDR_VAR 0 9
59485: PUSH
59486: LD_VAR 0 47
59490: PUSH
59491: LD_VAR 0 48
59495: PUSH
59496: LD_VAR 0 49
59500: PUSH
59501: LD_VAR 0 50
59505: PUSH
59506: LD_VAR 0 51
59510: PUSH
59511: LD_VAR 0 52
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: PUSH
59524: LD_VAR 0 4
59528: PUSH
59529: LD_INT 1
59531: PLUS
59532: ARRAY
59533: ST_TO_ADDR
59534: GO 59725
59536: LD_INT 4
59538: DOUBLE
59539: EQUAL
59540: IFTRUE 59562
59542: LD_INT 5
59544: DOUBLE
59545: EQUAL
59546: IFTRUE 59562
59548: LD_INT 34
59550: DOUBLE
59551: EQUAL
59552: IFTRUE 59562
59554: LD_INT 37
59556: DOUBLE
59557: EQUAL
59558: IFTRUE 59562
59560: GO 59618
59562: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59563: LD_ADDR_VAR 0 9
59567: PUSH
59568: LD_VAR 0 53
59572: PUSH
59573: LD_VAR 0 54
59577: PUSH
59578: LD_VAR 0 55
59582: PUSH
59583: LD_VAR 0 56
59587: PUSH
59588: LD_VAR 0 57
59592: PUSH
59593: LD_VAR 0 58
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: PUSH
59606: LD_VAR 0 4
59610: PUSH
59611: LD_INT 1
59613: PLUS
59614: ARRAY
59615: ST_TO_ADDR
59616: GO 59725
59618: LD_INT 31
59620: DOUBLE
59621: EQUAL
59622: IFTRUE 59668
59624: LD_INT 32
59626: DOUBLE
59627: EQUAL
59628: IFTRUE 59668
59630: LD_INT 33
59632: DOUBLE
59633: EQUAL
59634: IFTRUE 59668
59636: LD_INT 27
59638: DOUBLE
59639: EQUAL
59640: IFTRUE 59668
59642: LD_INT 26
59644: DOUBLE
59645: EQUAL
59646: IFTRUE 59668
59648: LD_INT 28
59650: DOUBLE
59651: EQUAL
59652: IFTRUE 59668
59654: LD_INT 29
59656: DOUBLE
59657: EQUAL
59658: IFTRUE 59668
59660: LD_INT 30
59662: DOUBLE
59663: EQUAL
59664: IFTRUE 59668
59666: GO 59724
59668: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59669: LD_ADDR_VAR 0 9
59673: PUSH
59674: LD_VAR 0 59
59678: PUSH
59679: LD_VAR 0 60
59683: PUSH
59684: LD_VAR 0 61
59688: PUSH
59689: LD_VAR 0 62
59693: PUSH
59694: LD_VAR 0 63
59698: PUSH
59699: LD_VAR 0 64
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: PUSH
59712: LD_VAR 0 4
59716: PUSH
59717: LD_INT 1
59719: PLUS
59720: ARRAY
59721: ST_TO_ADDR
59722: GO 59725
59724: POP
// temp_list2 = [ ] ;
59725: LD_ADDR_VAR 0 10
59729: PUSH
59730: EMPTY
59731: ST_TO_ADDR
// for i in temp_list do
59732: LD_ADDR_VAR 0 8
59736: PUSH
59737: LD_VAR 0 9
59741: PUSH
59742: FOR_IN
59743: IFFALSE 59795
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59745: LD_ADDR_VAR 0 10
59749: PUSH
59750: LD_VAR 0 10
59754: PUSH
59755: LD_VAR 0 8
59759: PUSH
59760: LD_INT 1
59762: ARRAY
59763: PUSH
59764: LD_VAR 0 2
59768: PLUS
59769: PUSH
59770: LD_VAR 0 8
59774: PUSH
59775: LD_INT 2
59777: ARRAY
59778: PUSH
59779: LD_VAR 0 3
59783: PLUS
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: EMPTY
59790: LIST
59791: ADD
59792: ST_TO_ADDR
59793: GO 59742
59795: POP
59796: POP
// result = temp_list2 ;
59797: LD_ADDR_VAR 0 7
59801: PUSH
59802: LD_VAR 0 10
59806: ST_TO_ADDR
// end ;
59807: LD_VAR 0 7
59811: RET
// export function EnemyInRange ( unit , dist ) ; begin
59812: LD_INT 0
59814: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59815: LD_ADDR_VAR 0 3
59819: PUSH
59820: LD_VAR 0 1
59824: PPUSH
59825: CALL_OW 255
59829: PPUSH
59830: LD_VAR 0 1
59834: PPUSH
59835: CALL_OW 250
59839: PPUSH
59840: LD_VAR 0 1
59844: PPUSH
59845: CALL_OW 251
59849: PPUSH
59850: LD_VAR 0 2
59854: PPUSH
59855: CALL 33185 0 4
59859: PUSH
59860: LD_INT 4
59862: ARRAY
59863: ST_TO_ADDR
// end ;
59864: LD_VAR 0 3
59868: RET
// export function PlayerSeeMe ( unit ) ; begin
59869: LD_INT 0
59871: PPUSH
// result := See ( your_side , unit ) ;
59872: LD_ADDR_VAR 0 2
59876: PUSH
59877: LD_OWVAR 2
59881: PPUSH
59882: LD_VAR 0 1
59886: PPUSH
59887: CALL_OW 292
59891: ST_TO_ADDR
// end ;
59892: LD_VAR 0 2
59896: RET
// export function ReverseDir ( unit ) ; begin
59897: LD_INT 0
59899: PPUSH
// if not unit then
59900: LD_VAR 0 1
59904: NOT
59905: IFFALSE 59909
// exit ;
59907: GO 59932
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59909: LD_ADDR_VAR 0 2
59913: PUSH
59914: LD_VAR 0 1
59918: PPUSH
59919: CALL_OW 254
59923: PUSH
59924: LD_INT 3
59926: PLUS
59927: PUSH
59928: LD_INT 6
59930: MOD
59931: ST_TO_ADDR
// end ;
59932: LD_VAR 0 2
59936: RET
// export function ReverseArray ( array ) ; var i ; begin
59937: LD_INT 0
59939: PPUSH
59940: PPUSH
// if not array then
59941: LD_VAR 0 1
59945: NOT
59946: IFFALSE 59950
// exit ;
59948: GO 60005
// result := [ ] ;
59950: LD_ADDR_VAR 0 2
59954: PUSH
59955: EMPTY
59956: ST_TO_ADDR
// for i := array downto 1 do
59957: LD_ADDR_VAR 0 3
59961: PUSH
59962: DOUBLE
59963: LD_VAR 0 1
59967: INC
59968: ST_TO_ADDR
59969: LD_INT 1
59971: PUSH
59972: FOR_DOWNTO
59973: IFFALSE 60003
// result := Join ( result , array [ i ] ) ;
59975: LD_ADDR_VAR 0 2
59979: PUSH
59980: LD_VAR 0 2
59984: PPUSH
59985: LD_VAR 0 1
59989: PUSH
59990: LD_VAR 0 3
59994: ARRAY
59995: PPUSH
59996: CALL 64670 0 2
60000: ST_TO_ADDR
60001: GO 59972
60003: POP
60004: POP
// end ;
60005: LD_VAR 0 2
60009: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60010: LD_INT 0
60012: PPUSH
60013: PPUSH
60014: PPUSH
60015: PPUSH
60016: PPUSH
60017: PPUSH
// if not unit or not hexes then
60018: LD_VAR 0 1
60022: NOT
60023: PUSH
60024: LD_VAR 0 2
60028: NOT
60029: OR
60030: IFFALSE 60034
// exit ;
60032: GO 60157
// dist := 9999 ;
60034: LD_ADDR_VAR 0 5
60038: PUSH
60039: LD_INT 9999
60041: ST_TO_ADDR
// for i = 1 to hexes do
60042: LD_ADDR_VAR 0 4
60046: PUSH
60047: DOUBLE
60048: LD_INT 1
60050: DEC
60051: ST_TO_ADDR
60052: LD_VAR 0 2
60056: PUSH
60057: FOR_TO
60058: IFFALSE 60145
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60060: LD_ADDR_VAR 0 6
60064: PUSH
60065: LD_VAR 0 1
60069: PPUSH
60070: LD_VAR 0 2
60074: PUSH
60075: LD_VAR 0 4
60079: ARRAY
60080: PUSH
60081: LD_INT 1
60083: ARRAY
60084: PPUSH
60085: LD_VAR 0 2
60089: PUSH
60090: LD_VAR 0 4
60094: ARRAY
60095: PUSH
60096: LD_INT 2
60098: ARRAY
60099: PPUSH
60100: CALL_OW 297
60104: ST_TO_ADDR
// if tdist < dist then
60105: LD_VAR 0 6
60109: PUSH
60110: LD_VAR 0 5
60114: LESS
60115: IFFALSE 60143
// begin hex := hexes [ i ] ;
60117: LD_ADDR_VAR 0 8
60121: PUSH
60122: LD_VAR 0 2
60126: PUSH
60127: LD_VAR 0 4
60131: ARRAY
60132: ST_TO_ADDR
// dist := tdist ;
60133: LD_ADDR_VAR 0 5
60137: PUSH
60138: LD_VAR 0 6
60142: ST_TO_ADDR
// end ; end ;
60143: GO 60057
60145: POP
60146: POP
// result := hex ;
60147: LD_ADDR_VAR 0 3
60151: PUSH
60152: LD_VAR 0 8
60156: ST_TO_ADDR
// end ;
60157: LD_VAR 0 3
60161: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60162: LD_INT 0
60164: PPUSH
60165: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60166: LD_VAR 0 1
60170: NOT
60171: PUSH
60172: LD_VAR 0 1
60176: PUSH
60177: LD_INT 21
60179: PUSH
60180: LD_INT 2
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 23
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PPUSH
60201: CALL_OW 69
60205: IN
60206: NOT
60207: OR
60208: IFFALSE 60212
// exit ;
60210: GO 60259
// for i = 1 to 3 do
60212: LD_ADDR_VAR 0 3
60216: PUSH
60217: DOUBLE
60218: LD_INT 1
60220: DEC
60221: ST_TO_ADDR
60222: LD_INT 3
60224: PUSH
60225: FOR_TO
60226: IFFALSE 60257
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60228: LD_VAR 0 1
60232: PPUSH
60233: CALL_OW 250
60237: PPUSH
60238: LD_VAR 0 1
60242: PPUSH
60243: CALL_OW 251
60247: PPUSH
60248: LD_INT 1
60250: PPUSH
60251: CALL_OW 453
60255: GO 60225
60257: POP
60258: POP
// end ;
60259: LD_VAR 0 2
60263: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60264: LD_INT 0
60266: PPUSH
60267: PPUSH
60268: PPUSH
60269: PPUSH
60270: PPUSH
60271: PPUSH
// if not unit or not enemy_unit then
60272: LD_VAR 0 1
60276: NOT
60277: PUSH
60278: LD_VAR 0 2
60282: NOT
60283: OR
60284: IFFALSE 60288
// exit ;
60286: GO 60755
// if GetLives ( i ) < 250 then
60288: LD_VAR 0 4
60292: PPUSH
60293: CALL_OW 256
60297: PUSH
60298: LD_INT 250
60300: LESS
60301: IFFALSE 60314
// begin ComAutodestruct ( i ) ;
60303: LD_VAR 0 4
60307: PPUSH
60308: CALL 60162 0 1
// exit ;
60312: GO 60755
// end ; x := GetX ( enemy_unit ) ;
60314: LD_ADDR_VAR 0 7
60318: PUSH
60319: LD_VAR 0 2
60323: PPUSH
60324: CALL_OW 250
60328: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60329: LD_ADDR_VAR 0 8
60333: PUSH
60334: LD_VAR 0 2
60338: PPUSH
60339: CALL_OW 251
60343: ST_TO_ADDR
// if not x or not y then
60344: LD_VAR 0 7
60348: NOT
60349: PUSH
60350: LD_VAR 0 8
60354: NOT
60355: OR
60356: IFFALSE 60360
// exit ;
60358: GO 60755
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60360: LD_ADDR_VAR 0 6
60364: PUSH
60365: LD_VAR 0 7
60369: PPUSH
60370: LD_INT 0
60372: PPUSH
60373: LD_INT 4
60375: PPUSH
60376: CALL_OW 272
60380: PUSH
60381: LD_VAR 0 8
60385: PPUSH
60386: LD_INT 0
60388: PPUSH
60389: LD_INT 4
60391: PPUSH
60392: CALL_OW 273
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_VAR 0 7
60405: PPUSH
60406: LD_INT 1
60408: PPUSH
60409: LD_INT 4
60411: PPUSH
60412: CALL_OW 272
60416: PUSH
60417: LD_VAR 0 8
60421: PPUSH
60422: LD_INT 1
60424: PPUSH
60425: LD_INT 4
60427: PPUSH
60428: CALL_OW 273
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_VAR 0 7
60441: PPUSH
60442: LD_INT 2
60444: PPUSH
60445: LD_INT 4
60447: PPUSH
60448: CALL_OW 272
60452: PUSH
60453: LD_VAR 0 8
60457: PPUSH
60458: LD_INT 2
60460: PPUSH
60461: LD_INT 4
60463: PPUSH
60464: CALL_OW 273
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_VAR 0 7
60477: PPUSH
60478: LD_INT 3
60480: PPUSH
60481: LD_INT 4
60483: PPUSH
60484: CALL_OW 272
60488: PUSH
60489: LD_VAR 0 8
60493: PPUSH
60494: LD_INT 3
60496: PPUSH
60497: LD_INT 4
60499: PPUSH
60500: CALL_OW 273
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_VAR 0 7
60513: PPUSH
60514: LD_INT 4
60516: PPUSH
60517: LD_INT 4
60519: PPUSH
60520: CALL_OW 272
60524: PUSH
60525: LD_VAR 0 8
60529: PPUSH
60530: LD_INT 4
60532: PPUSH
60533: LD_INT 4
60535: PPUSH
60536: CALL_OW 273
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_VAR 0 7
60549: PPUSH
60550: LD_INT 5
60552: PPUSH
60553: LD_INT 4
60555: PPUSH
60556: CALL_OW 272
60560: PUSH
60561: LD_VAR 0 8
60565: PPUSH
60566: LD_INT 5
60568: PPUSH
60569: LD_INT 4
60571: PPUSH
60572: CALL_OW 273
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: ST_TO_ADDR
// for i = tmp downto 1 do
60589: LD_ADDR_VAR 0 4
60593: PUSH
60594: DOUBLE
60595: LD_VAR 0 6
60599: INC
60600: ST_TO_ADDR
60601: LD_INT 1
60603: PUSH
60604: FOR_DOWNTO
60605: IFFALSE 60706
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60607: LD_VAR 0 6
60611: PUSH
60612: LD_VAR 0 4
60616: ARRAY
60617: PUSH
60618: LD_INT 1
60620: ARRAY
60621: PPUSH
60622: LD_VAR 0 6
60626: PUSH
60627: LD_VAR 0 4
60631: ARRAY
60632: PUSH
60633: LD_INT 2
60635: ARRAY
60636: PPUSH
60637: CALL_OW 488
60641: NOT
60642: PUSH
60643: LD_VAR 0 6
60647: PUSH
60648: LD_VAR 0 4
60652: ARRAY
60653: PUSH
60654: LD_INT 1
60656: ARRAY
60657: PPUSH
60658: LD_VAR 0 6
60662: PUSH
60663: LD_VAR 0 4
60667: ARRAY
60668: PUSH
60669: LD_INT 2
60671: ARRAY
60672: PPUSH
60673: CALL_OW 428
60677: PUSH
60678: LD_INT 0
60680: NONEQUAL
60681: OR
60682: IFFALSE 60704
// tmp := Delete ( tmp , i ) ;
60684: LD_ADDR_VAR 0 6
60688: PUSH
60689: LD_VAR 0 6
60693: PPUSH
60694: LD_VAR 0 4
60698: PPUSH
60699: CALL_OW 3
60703: ST_TO_ADDR
60704: GO 60604
60706: POP
60707: POP
// j := GetClosestHex ( unit , tmp ) ;
60708: LD_ADDR_VAR 0 5
60712: PUSH
60713: LD_VAR 0 1
60717: PPUSH
60718: LD_VAR 0 6
60722: PPUSH
60723: CALL 60010 0 2
60727: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60728: LD_VAR 0 1
60732: PPUSH
60733: LD_VAR 0 5
60737: PUSH
60738: LD_INT 1
60740: ARRAY
60741: PPUSH
60742: LD_VAR 0 5
60746: PUSH
60747: LD_INT 2
60749: ARRAY
60750: PPUSH
60751: CALL_OW 111
// end ;
60755: LD_VAR 0 3
60759: RET
// export function PrepareApemanSoldier ( ) ; begin
60760: LD_INT 0
60762: PPUSH
// uc_nation := 0 ;
60763: LD_ADDR_OWVAR 21
60767: PUSH
60768: LD_INT 0
60770: ST_TO_ADDR
// hc_sex := sex_male ;
60771: LD_ADDR_OWVAR 27
60775: PUSH
60776: LD_INT 1
60778: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60779: LD_ADDR_OWVAR 28
60783: PUSH
60784: LD_INT 15
60786: ST_TO_ADDR
// hc_gallery :=  ;
60787: LD_ADDR_OWVAR 33
60791: PUSH
60792: LD_STRING 
60794: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60795: LD_ADDR_OWVAR 31
60799: PUSH
60800: LD_INT 0
60802: PPUSH
60803: LD_INT 3
60805: PPUSH
60806: CALL_OW 12
60810: PUSH
60811: LD_INT 0
60813: PPUSH
60814: LD_INT 3
60816: PPUSH
60817: CALL_OW 12
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: ST_TO_ADDR
// end ;
60834: LD_VAR 0 1
60838: RET
// export function PrepareApemanEngineer ( ) ; begin
60839: LD_INT 0
60841: PPUSH
// uc_nation := 0 ;
60842: LD_ADDR_OWVAR 21
60846: PUSH
60847: LD_INT 0
60849: ST_TO_ADDR
// hc_sex := sex_male ;
60850: LD_ADDR_OWVAR 27
60854: PUSH
60855: LD_INT 1
60857: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60858: LD_ADDR_OWVAR 28
60862: PUSH
60863: LD_INT 16
60865: ST_TO_ADDR
// hc_gallery :=  ;
60866: LD_ADDR_OWVAR 33
60870: PUSH
60871: LD_STRING 
60873: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60874: LD_ADDR_OWVAR 31
60878: PUSH
60879: LD_INT 0
60881: PPUSH
60882: LD_INT 3
60884: PPUSH
60885: CALL_OW 12
60889: PUSH
60890: LD_INT 0
60892: PPUSH
60893: LD_INT 3
60895: PPUSH
60896: CALL_OW 12
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: ST_TO_ADDR
// end ;
60913: LD_VAR 0 1
60917: RET
// export function PrepareApeman ( agressivity ) ; begin
60918: LD_INT 0
60920: PPUSH
// uc_side := 0 ;
60921: LD_ADDR_OWVAR 20
60925: PUSH
60926: LD_INT 0
60928: ST_TO_ADDR
// uc_nation := 0 ;
60929: LD_ADDR_OWVAR 21
60933: PUSH
60934: LD_INT 0
60936: ST_TO_ADDR
// hc_sex := sex_male ;
60937: LD_ADDR_OWVAR 27
60941: PUSH
60942: LD_INT 1
60944: ST_TO_ADDR
// hc_class := class_apeman ;
60945: LD_ADDR_OWVAR 28
60949: PUSH
60950: LD_INT 12
60952: ST_TO_ADDR
// hc_gallery :=  ;
60953: LD_ADDR_OWVAR 33
60957: PUSH
60958: LD_STRING 
60960: ST_TO_ADDR
// if agressivity = 0 then
60961: LD_VAR 0 1
60965: PUSH
60966: LD_INT 0
60968: EQUAL
60969: IFFALSE 60981
// hc_agressivity := 0 else
60971: LD_ADDR_OWVAR 35
60975: PUSH
60976: LD_INT 0
60978: ST_TO_ADDR
60979: GO 61002
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60981: LD_ADDR_OWVAR 35
60985: PUSH
60986: LD_VAR 0 1
60990: NEG
60991: PPUSH
60992: LD_VAR 0 1
60996: PPUSH
60997: CALL_OW 12
61001: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61002: LD_ADDR_OWVAR 31
61006: PUSH
61007: LD_INT 0
61009: PPUSH
61010: LD_INT 3
61012: PPUSH
61013: CALL_OW 12
61017: PUSH
61018: LD_INT 0
61020: PPUSH
61021: LD_INT 3
61023: PPUSH
61024: CALL_OW 12
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: ST_TO_ADDR
// end ;
61041: LD_VAR 0 2
61045: RET
// export function PrepareTiger ( agressivity ) ; begin
61046: LD_INT 0
61048: PPUSH
// uc_side := 0 ;
61049: LD_ADDR_OWVAR 20
61053: PUSH
61054: LD_INT 0
61056: ST_TO_ADDR
// uc_nation := 0 ;
61057: LD_ADDR_OWVAR 21
61061: PUSH
61062: LD_INT 0
61064: ST_TO_ADDR
// hc_class := class_tiger ;
61065: LD_ADDR_OWVAR 28
61069: PUSH
61070: LD_INT 14
61072: ST_TO_ADDR
// hc_gallery :=  ;
61073: LD_ADDR_OWVAR 33
61077: PUSH
61078: LD_STRING 
61080: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61081: LD_ADDR_OWVAR 35
61085: PUSH
61086: LD_VAR 0 1
61090: NEG
61091: PPUSH
61092: LD_VAR 0 1
61096: PPUSH
61097: CALL_OW 12
61101: ST_TO_ADDR
// end ;
61102: LD_VAR 0 2
61106: RET
// export function PrepareEnchidna ( ) ; begin
61107: LD_INT 0
61109: PPUSH
// uc_side := 0 ;
61110: LD_ADDR_OWVAR 20
61114: PUSH
61115: LD_INT 0
61117: ST_TO_ADDR
// uc_nation := 0 ;
61118: LD_ADDR_OWVAR 21
61122: PUSH
61123: LD_INT 0
61125: ST_TO_ADDR
// hc_class := class_baggie ;
61126: LD_ADDR_OWVAR 28
61130: PUSH
61131: LD_INT 13
61133: ST_TO_ADDR
// hc_gallery :=  ;
61134: LD_ADDR_OWVAR 33
61138: PUSH
61139: LD_STRING 
61141: ST_TO_ADDR
// end ;
61142: LD_VAR 0 1
61146: RET
// export function PrepareFrog ( ) ; begin
61147: LD_INT 0
61149: PPUSH
// uc_side := 0 ;
61150: LD_ADDR_OWVAR 20
61154: PUSH
61155: LD_INT 0
61157: ST_TO_ADDR
// uc_nation := 0 ;
61158: LD_ADDR_OWVAR 21
61162: PUSH
61163: LD_INT 0
61165: ST_TO_ADDR
// hc_class := class_frog ;
61166: LD_ADDR_OWVAR 28
61170: PUSH
61171: LD_INT 19
61173: ST_TO_ADDR
// hc_gallery :=  ;
61174: LD_ADDR_OWVAR 33
61178: PUSH
61179: LD_STRING 
61181: ST_TO_ADDR
// end ;
61182: LD_VAR 0 1
61186: RET
// export function PrepareFish ( ) ; begin
61187: LD_INT 0
61189: PPUSH
// uc_side := 0 ;
61190: LD_ADDR_OWVAR 20
61194: PUSH
61195: LD_INT 0
61197: ST_TO_ADDR
// uc_nation := 0 ;
61198: LD_ADDR_OWVAR 21
61202: PUSH
61203: LD_INT 0
61205: ST_TO_ADDR
// hc_class := class_fish ;
61206: LD_ADDR_OWVAR 28
61210: PUSH
61211: LD_INT 20
61213: ST_TO_ADDR
// hc_gallery :=  ;
61214: LD_ADDR_OWVAR 33
61218: PUSH
61219: LD_STRING 
61221: ST_TO_ADDR
// end ;
61222: LD_VAR 0 1
61226: RET
// export function PrepareBird ( ) ; begin
61227: LD_INT 0
61229: PPUSH
// uc_side := 0 ;
61230: LD_ADDR_OWVAR 20
61234: PUSH
61235: LD_INT 0
61237: ST_TO_ADDR
// uc_nation := 0 ;
61238: LD_ADDR_OWVAR 21
61242: PUSH
61243: LD_INT 0
61245: ST_TO_ADDR
// hc_class := class_phororhacos ;
61246: LD_ADDR_OWVAR 28
61250: PUSH
61251: LD_INT 18
61253: ST_TO_ADDR
// hc_gallery :=  ;
61254: LD_ADDR_OWVAR 33
61258: PUSH
61259: LD_STRING 
61261: ST_TO_ADDR
// end ;
61262: LD_VAR 0 1
61266: RET
// export function PrepareHorse ( ) ; begin
61267: LD_INT 0
61269: PPUSH
// uc_side := 0 ;
61270: LD_ADDR_OWVAR 20
61274: PUSH
61275: LD_INT 0
61277: ST_TO_ADDR
// uc_nation := 0 ;
61278: LD_ADDR_OWVAR 21
61282: PUSH
61283: LD_INT 0
61285: ST_TO_ADDR
// hc_class := class_horse ;
61286: LD_ADDR_OWVAR 28
61290: PUSH
61291: LD_INT 21
61293: ST_TO_ADDR
// hc_gallery :=  ;
61294: LD_ADDR_OWVAR 33
61298: PUSH
61299: LD_STRING 
61301: ST_TO_ADDR
// end ;
61302: LD_VAR 0 1
61306: RET
// export function PrepareMastodont ( ) ; begin
61307: LD_INT 0
61309: PPUSH
// uc_side := 0 ;
61310: LD_ADDR_OWVAR 20
61314: PUSH
61315: LD_INT 0
61317: ST_TO_ADDR
// uc_nation := 0 ;
61318: LD_ADDR_OWVAR 21
61322: PUSH
61323: LD_INT 0
61325: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61326: LD_ADDR_OWVAR 37
61330: PUSH
61331: LD_INT 31
61333: ST_TO_ADDR
// vc_control := control_rider ;
61334: LD_ADDR_OWVAR 38
61338: PUSH
61339: LD_INT 4
61341: ST_TO_ADDR
// end ;
61342: LD_VAR 0 1
61346: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61347: LD_INT 0
61349: PPUSH
61350: PPUSH
61351: PPUSH
// uc_side = 0 ;
61352: LD_ADDR_OWVAR 20
61356: PUSH
61357: LD_INT 0
61359: ST_TO_ADDR
// uc_nation = 0 ;
61360: LD_ADDR_OWVAR 21
61364: PUSH
61365: LD_INT 0
61367: ST_TO_ADDR
// InitHc_All ( ) ;
61368: CALL_OW 584
// InitVc ;
61372: CALL_OW 20
// if mastodonts then
61376: LD_VAR 0 6
61380: IFFALSE 61447
// for i = 1 to mastodonts do
61382: LD_ADDR_VAR 0 11
61386: PUSH
61387: DOUBLE
61388: LD_INT 1
61390: DEC
61391: ST_TO_ADDR
61392: LD_VAR 0 6
61396: PUSH
61397: FOR_TO
61398: IFFALSE 61445
// begin vc_chassis := 31 ;
61400: LD_ADDR_OWVAR 37
61404: PUSH
61405: LD_INT 31
61407: ST_TO_ADDR
// vc_control := control_rider ;
61408: LD_ADDR_OWVAR 38
61412: PUSH
61413: LD_INT 4
61415: ST_TO_ADDR
// animal := CreateVehicle ;
61416: LD_ADDR_VAR 0 12
61420: PUSH
61421: CALL_OW 45
61425: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61426: LD_VAR 0 12
61430: PPUSH
61431: LD_VAR 0 8
61435: PPUSH
61436: LD_INT 0
61438: PPUSH
61439: CALL 63575 0 3
// end ;
61443: GO 61397
61445: POP
61446: POP
// if horses then
61447: LD_VAR 0 5
61451: IFFALSE 61518
// for i = 1 to horses do
61453: LD_ADDR_VAR 0 11
61457: PUSH
61458: DOUBLE
61459: LD_INT 1
61461: DEC
61462: ST_TO_ADDR
61463: LD_VAR 0 5
61467: PUSH
61468: FOR_TO
61469: IFFALSE 61516
// begin hc_class := 21 ;
61471: LD_ADDR_OWVAR 28
61475: PUSH
61476: LD_INT 21
61478: ST_TO_ADDR
// hc_gallery :=  ;
61479: LD_ADDR_OWVAR 33
61483: PUSH
61484: LD_STRING 
61486: ST_TO_ADDR
// animal := CreateHuman ;
61487: LD_ADDR_VAR 0 12
61491: PUSH
61492: CALL_OW 44
61496: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61497: LD_VAR 0 12
61501: PPUSH
61502: LD_VAR 0 8
61506: PPUSH
61507: LD_INT 0
61509: PPUSH
61510: CALL 63575 0 3
// end ;
61514: GO 61468
61516: POP
61517: POP
// if birds then
61518: LD_VAR 0 1
61522: IFFALSE 61589
// for i = 1 to birds do
61524: LD_ADDR_VAR 0 11
61528: PUSH
61529: DOUBLE
61530: LD_INT 1
61532: DEC
61533: ST_TO_ADDR
61534: LD_VAR 0 1
61538: PUSH
61539: FOR_TO
61540: IFFALSE 61587
// begin hc_class := 18 ;
61542: LD_ADDR_OWVAR 28
61546: PUSH
61547: LD_INT 18
61549: ST_TO_ADDR
// hc_gallery =  ;
61550: LD_ADDR_OWVAR 33
61554: PUSH
61555: LD_STRING 
61557: ST_TO_ADDR
// animal := CreateHuman ;
61558: LD_ADDR_VAR 0 12
61562: PUSH
61563: CALL_OW 44
61567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61568: LD_VAR 0 12
61572: PPUSH
61573: LD_VAR 0 8
61577: PPUSH
61578: LD_INT 0
61580: PPUSH
61581: CALL 63575 0 3
// end ;
61585: GO 61539
61587: POP
61588: POP
// if tigers then
61589: LD_VAR 0 2
61593: IFFALSE 61677
// for i = 1 to tigers do
61595: LD_ADDR_VAR 0 11
61599: PUSH
61600: DOUBLE
61601: LD_INT 1
61603: DEC
61604: ST_TO_ADDR
61605: LD_VAR 0 2
61609: PUSH
61610: FOR_TO
61611: IFFALSE 61675
// begin hc_class = class_tiger ;
61613: LD_ADDR_OWVAR 28
61617: PUSH
61618: LD_INT 14
61620: ST_TO_ADDR
// hc_gallery =  ;
61621: LD_ADDR_OWVAR 33
61625: PUSH
61626: LD_STRING 
61628: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61629: LD_ADDR_OWVAR 35
61633: PUSH
61634: LD_INT 7
61636: NEG
61637: PPUSH
61638: LD_INT 7
61640: PPUSH
61641: CALL_OW 12
61645: ST_TO_ADDR
// animal := CreateHuman ;
61646: LD_ADDR_VAR 0 12
61650: PUSH
61651: CALL_OW 44
61655: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61656: LD_VAR 0 12
61660: PPUSH
61661: LD_VAR 0 8
61665: PPUSH
61666: LD_INT 0
61668: PPUSH
61669: CALL 63575 0 3
// end ;
61673: GO 61610
61675: POP
61676: POP
// if apemans then
61677: LD_VAR 0 3
61681: IFFALSE 61804
// for i = 1 to apemans do
61683: LD_ADDR_VAR 0 11
61687: PUSH
61688: DOUBLE
61689: LD_INT 1
61691: DEC
61692: ST_TO_ADDR
61693: LD_VAR 0 3
61697: PUSH
61698: FOR_TO
61699: IFFALSE 61802
// begin hc_class = class_apeman ;
61701: LD_ADDR_OWVAR 28
61705: PUSH
61706: LD_INT 12
61708: ST_TO_ADDR
// hc_gallery =  ;
61709: LD_ADDR_OWVAR 33
61713: PUSH
61714: LD_STRING 
61716: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61717: LD_ADDR_OWVAR 35
61721: PUSH
61722: LD_INT 2
61724: NEG
61725: PPUSH
61726: LD_INT 2
61728: PPUSH
61729: CALL_OW 12
61733: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61734: LD_ADDR_OWVAR 31
61738: PUSH
61739: LD_INT 1
61741: PPUSH
61742: LD_INT 3
61744: PPUSH
61745: CALL_OW 12
61749: PUSH
61750: LD_INT 1
61752: PPUSH
61753: LD_INT 3
61755: PPUSH
61756: CALL_OW 12
61760: PUSH
61761: LD_INT 0
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: ST_TO_ADDR
// animal := CreateHuman ;
61773: LD_ADDR_VAR 0 12
61777: PUSH
61778: CALL_OW 44
61782: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61783: LD_VAR 0 12
61787: PPUSH
61788: LD_VAR 0 8
61792: PPUSH
61793: LD_INT 0
61795: PPUSH
61796: CALL 63575 0 3
// end ;
61800: GO 61698
61802: POP
61803: POP
// if enchidnas then
61804: LD_VAR 0 4
61808: IFFALSE 61875
// for i = 1 to enchidnas do
61810: LD_ADDR_VAR 0 11
61814: PUSH
61815: DOUBLE
61816: LD_INT 1
61818: DEC
61819: ST_TO_ADDR
61820: LD_VAR 0 4
61824: PUSH
61825: FOR_TO
61826: IFFALSE 61873
// begin hc_class = 13 ;
61828: LD_ADDR_OWVAR 28
61832: PUSH
61833: LD_INT 13
61835: ST_TO_ADDR
// hc_gallery =  ;
61836: LD_ADDR_OWVAR 33
61840: PUSH
61841: LD_STRING 
61843: ST_TO_ADDR
// animal := CreateHuman ;
61844: LD_ADDR_VAR 0 12
61848: PUSH
61849: CALL_OW 44
61853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61854: LD_VAR 0 12
61858: PPUSH
61859: LD_VAR 0 8
61863: PPUSH
61864: LD_INT 0
61866: PPUSH
61867: CALL 63575 0 3
// end ;
61871: GO 61825
61873: POP
61874: POP
// if fishes then
61875: LD_VAR 0 7
61879: IFFALSE 61946
// for i = 1 to fishes do
61881: LD_ADDR_VAR 0 11
61885: PUSH
61886: DOUBLE
61887: LD_INT 1
61889: DEC
61890: ST_TO_ADDR
61891: LD_VAR 0 7
61895: PUSH
61896: FOR_TO
61897: IFFALSE 61944
// begin hc_class = 20 ;
61899: LD_ADDR_OWVAR 28
61903: PUSH
61904: LD_INT 20
61906: ST_TO_ADDR
// hc_gallery =  ;
61907: LD_ADDR_OWVAR 33
61911: PUSH
61912: LD_STRING 
61914: ST_TO_ADDR
// animal := CreateHuman ;
61915: LD_ADDR_VAR 0 12
61919: PUSH
61920: CALL_OW 44
61924: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61925: LD_VAR 0 12
61929: PPUSH
61930: LD_VAR 0 9
61934: PPUSH
61935: LD_INT 0
61937: PPUSH
61938: CALL 63575 0 3
// end ;
61942: GO 61896
61944: POP
61945: POP
// end ;
61946: LD_VAR 0 10
61950: RET
// export function WantHeal ( sci , unit ) ; begin
61951: LD_INT 0
61953: PPUSH
// if GetTaskList ( sci ) > 0 then
61954: LD_VAR 0 1
61958: PPUSH
61959: CALL_OW 437
61963: PUSH
61964: LD_INT 0
61966: GREATER
61967: IFFALSE 62037
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61969: LD_VAR 0 1
61973: PPUSH
61974: CALL_OW 437
61978: PUSH
61979: LD_INT 1
61981: ARRAY
61982: PUSH
61983: LD_INT 1
61985: ARRAY
61986: PUSH
61987: LD_STRING l
61989: EQUAL
61990: PUSH
61991: LD_VAR 0 1
61995: PPUSH
61996: CALL_OW 437
62000: PUSH
62001: LD_INT 1
62003: ARRAY
62004: PUSH
62005: LD_INT 4
62007: ARRAY
62008: PUSH
62009: LD_VAR 0 2
62013: EQUAL
62014: AND
62015: IFFALSE 62027
// result := true else
62017: LD_ADDR_VAR 0 3
62021: PUSH
62022: LD_INT 1
62024: ST_TO_ADDR
62025: GO 62035
// result := false ;
62027: LD_ADDR_VAR 0 3
62031: PUSH
62032: LD_INT 0
62034: ST_TO_ADDR
// end else
62035: GO 62045
// result := false ;
62037: LD_ADDR_VAR 0 3
62041: PUSH
62042: LD_INT 0
62044: ST_TO_ADDR
// end ;
62045: LD_VAR 0 3
62049: RET
// export function HealTarget ( sci ) ; begin
62050: LD_INT 0
62052: PPUSH
// if not sci then
62053: LD_VAR 0 1
62057: NOT
62058: IFFALSE 62062
// exit ;
62060: GO 62127
// result := 0 ;
62062: LD_ADDR_VAR 0 2
62066: PUSH
62067: LD_INT 0
62069: ST_TO_ADDR
// if GetTaskList ( sci ) then
62070: LD_VAR 0 1
62074: PPUSH
62075: CALL_OW 437
62079: IFFALSE 62127
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62081: LD_VAR 0 1
62085: PPUSH
62086: CALL_OW 437
62090: PUSH
62091: LD_INT 1
62093: ARRAY
62094: PUSH
62095: LD_INT 1
62097: ARRAY
62098: PUSH
62099: LD_STRING l
62101: EQUAL
62102: IFFALSE 62127
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62104: LD_ADDR_VAR 0 2
62108: PUSH
62109: LD_VAR 0 1
62113: PPUSH
62114: CALL_OW 437
62118: PUSH
62119: LD_INT 1
62121: ARRAY
62122: PUSH
62123: LD_INT 4
62125: ARRAY
62126: ST_TO_ADDR
// end ;
62127: LD_VAR 0 2
62131: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62132: LD_INT 0
62134: PPUSH
62135: PPUSH
62136: PPUSH
62137: PPUSH
// if not base_units then
62138: LD_VAR 0 1
62142: NOT
62143: IFFALSE 62147
// exit ;
62145: GO 62234
// result := false ;
62147: LD_ADDR_VAR 0 2
62151: PUSH
62152: LD_INT 0
62154: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62155: LD_ADDR_VAR 0 5
62159: PUSH
62160: LD_VAR 0 1
62164: PPUSH
62165: LD_INT 21
62167: PUSH
62168: LD_INT 3
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PPUSH
62175: CALL_OW 72
62179: ST_TO_ADDR
// if not tmp then
62180: LD_VAR 0 5
62184: NOT
62185: IFFALSE 62189
// exit ;
62187: GO 62234
// for i in tmp do
62189: LD_ADDR_VAR 0 3
62193: PUSH
62194: LD_VAR 0 5
62198: PUSH
62199: FOR_IN
62200: IFFALSE 62232
// begin result := EnemyInRange ( i , 22 ) ;
62202: LD_ADDR_VAR 0 2
62206: PUSH
62207: LD_VAR 0 3
62211: PPUSH
62212: LD_INT 22
62214: PPUSH
62215: CALL 59812 0 2
62219: ST_TO_ADDR
// if result then
62220: LD_VAR 0 2
62224: IFFALSE 62230
// exit ;
62226: POP
62227: POP
62228: GO 62234
// end ;
62230: GO 62199
62232: POP
62233: POP
// end ;
62234: LD_VAR 0 2
62238: RET
// export function FilterByTag ( units , tag ) ; begin
62239: LD_INT 0
62241: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62242: LD_ADDR_VAR 0 3
62246: PUSH
62247: LD_VAR 0 1
62251: PPUSH
62252: LD_INT 120
62254: PUSH
62255: LD_VAR 0 2
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PPUSH
62264: CALL_OW 72
62268: ST_TO_ADDR
// end ;
62269: LD_VAR 0 3
62273: RET
// export function IsDriver ( un ) ; begin
62274: LD_INT 0
62276: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62277: LD_ADDR_VAR 0 2
62281: PUSH
62282: LD_VAR 0 1
62286: PUSH
62287: LD_INT 55
62289: PUSH
62290: EMPTY
62291: LIST
62292: PPUSH
62293: CALL_OW 69
62297: IN
62298: ST_TO_ADDR
// end ;
62299: LD_VAR 0 2
62303: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62304: LD_INT 0
62306: PPUSH
62307: PPUSH
// list := [ ] ;
62308: LD_ADDR_VAR 0 5
62312: PUSH
62313: EMPTY
62314: ST_TO_ADDR
// case d of 0 :
62315: LD_VAR 0 3
62319: PUSH
62320: LD_INT 0
62322: DOUBLE
62323: EQUAL
62324: IFTRUE 62328
62326: GO 62461
62328: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62329: LD_ADDR_VAR 0 5
62333: PUSH
62334: LD_VAR 0 1
62338: PUSH
62339: LD_INT 4
62341: MINUS
62342: PUSH
62343: LD_VAR 0 2
62347: PUSH
62348: LD_INT 4
62350: MINUS
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: LIST
62359: PUSH
62360: LD_VAR 0 1
62364: PUSH
62365: LD_INT 3
62367: MINUS
62368: PUSH
62369: LD_VAR 0 2
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: PUSH
62382: LD_VAR 0 1
62386: PUSH
62387: LD_INT 4
62389: PLUS
62390: PUSH
62391: LD_VAR 0 2
62395: PUSH
62396: LD_INT 4
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: LIST
62403: PUSH
62404: LD_VAR 0 1
62408: PUSH
62409: LD_INT 3
62411: PLUS
62412: PUSH
62413: LD_VAR 0 2
62417: PUSH
62418: LD_INT 3
62420: PLUS
62421: PUSH
62422: LD_INT 5
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: LIST
62429: PUSH
62430: LD_VAR 0 1
62434: PUSH
62435: LD_VAR 0 2
62439: PUSH
62440: LD_INT 4
62442: PLUS
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: LIST
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: ST_TO_ADDR
// end ; 1 :
62459: GO 63159
62461: LD_INT 1
62463: DOUBLE
62464: EQUAL
62465: IFTRUE 62469
62467: GO 62602
62469: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62470: LD_ADDR_VAR 0 5
62474: PUSH
62475: LD_VAR 0 1
62479: PUSH
62480: LD_VAR 0 2
62484: PUSH
62485: LD_INT 4
62487: MINUS
62488: PUSH
62489: LD_INT 3
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: LIST
62496: PUSH
62497: LD_VAR 0 1
62501: PUSH
62502: LD_INT 3
62504: MINUS
62505: PUSH
62506: LD_VAR 0 2
62510: PUSH
62511: LD_INT 3
62513: MINUS
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: LIST
62522: PUSH
62523: LD_VAR 0 1
62527: PUSH
62528: LD_INT 4
62530: MINUS
62531: PUSH
62532: LD_VAR 0 2
62536: PUSH
62537: LD_INT 1
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: LIST
62544: PUSH
62545: LD_VAR 0 1
62549: PUSH
62550: LD_VAR 0 2
62554: PUSH
62555: LD_INT 3
62557: PLUS
62558: PUSH
62559: LD_INT 0
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: LIST
62566: PUSH
62567: LD_VAR 0 1
62571: PUSH
62572: LD_INT 4
62574: PLUS
62575: PUSH
62576: LD_VAR 0 2
62580: PUSH
62581: LD_INT 4
62583: PLUS
62584: PUSH
62585: LD_INT 5
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: ST_TO_ADDR
// end ; 2 :
62600: GO 63159
62602: LD_INT 2
62604: DOUBLE
62605: EQUAL
62606: IFTRUE 62610
62608: GO 62739
62610: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62611: LD_ADDR_VAR 0 5
62615: PUSH
62616: LD_VAR 0 1
62620: PUSH
62621: LD_VAR 0 2
62625: PUSH
62626: LD_INT 3
62628: MINUS
62629: PUSH
62630: LD_INT 3
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: LIST
62637: PUSH
62638: LD_VAR 0 1
62642: PUSH
62643: LD_INT 4
62645: PLUS
62646: PUSH
62647: LD_VAR 0 2
62651: PUSH
62652: LD_INT 4
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: LIST
62659: PUSH
62660: LD_VAR 0 1
62664: PUSH
62665: LD_VAR 0 2
62669: PUSH
62670: LD_INT 4
62672: PLUS
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: LIST
62681: PUSH
62682: LD_VAR 0 1
62686: PUSH
62687: LD_INT 3
62689: MINUS
62690: PUSH
62691: LD_VAR 0 2
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: LIST
62703: PUSH
62704: LD_VAR 0 1
62708: PUSH
62709: LD_INT 4
62711: MINUS
62712: PUSH
62713: LD_VAR 0 2
62717: PUSH
62718: LD_INT 4
62720: MINUS
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: LIST
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: ST_TO_ADDR
// end ; 3 :
62737: GO 63159
62739: LD_INT 3
62741: DOUBLE
62742: EQUAL
62743: IFTRUE 62747
62745: GO 62880
62747: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62748: LD_ADDR_VAR 0 5
62752: PUSH
62753: LD_VAR 0 1
62757: PUSH
62758: LD_INT 3
62760: PLUS
62761: PUSH
62762: LD_VAR 0 2
62766: PUSH
62767: LD_INT 4
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: PUSH
62775: LD_VAR 0 1
62779: PUSH
62780: LD_INT 4
62782: PLUS
62783: PUSH
62784: LD_VAR 0 2
62788: PUSH
62789: LD_INT 4
62791: PLUS
62792: PUSH
62793: LD_INT 5
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: LIST
62800: PUSH
62801: LD_VAR 0 1
62805: PUSH
62806: LD_INT 4
62808: MINUS
62809: PUSH
62810: LD_VAR 0 2
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: LIST
62822: PUSH
62823: LD_VAR 0 1
62827: PUSH
62828: LD_VAR 0 2
62832: PUSH
62833: LD_INT 4
62835: MINUS
62836: PUSH
62837: LD_INT 3
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: LIST
62844: PUSH
62845: LD_VAR 0 1
62849: PUSH
62850: LD_INT 3
62852: MINUS
62853: PUSH
62854: LD_VAR 0 2
62858: PUSH
62859: LD_INT 3
62861: MINUS
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: ST_TO_ADDR
// end ; 4 :
62878: GO 63159
62880: LD_INT 4
62882: DOUBLE
62883: EQUAL
62884: IFTRUE 62888
62886: GO 63021
62888: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62889: LD_ADDR_VAR 0 5
62893: PUSH
62894: LD_VAR 0 1
62898: PUSH
62899: LD_VAR 0 2
62903: PUSH
62904: LD_INT 4
62906: PLUS
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: LIST
62915: PUSH
62916: LD_VAR 0 1
62920: PUSH
62921: LD_INT 3
62923: PLUS
62924: PUSH
62925: LD_VAR 0 2
62929: PUSH
62930: LD_INT 3
62932: PLUS
62933: PUSH
62934: LD_INT 5
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: LIST
62941: PUSH
62942: LD_VAR 0 1
62946: PUSH
62947: LD_INT 4
62949: PLUS
62950: PUSH
62951: LD_VAR 0 2
62955: PUSH
62956: LD_INT 4
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: LIST
62963: PUSH
62964: LD_VAR 0 1
62968: PUSH
62969: LD_VAR 0 2
62973: PUSH
62974: LD_INT 3
62976: MINUS
62977: PUSH
62978: LD_INT 3
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: LIST
62985: PUSH
62986: LD_VAR 0 1
62990: PUSH
62991: LD_INT 4
62993: MINUS
62994: PUSH
62995: LD_VAR 0 2
62999: PUSH
63000: LD_INT 4
63002: MINUS
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: ST_TO_ADDR
// end ; 5 :
63019: GO 63159
63021: LD_INT 5
63023: DOUBLE
63024: EQUAL
63025: IFTRUE 63029
63027: GO 63158
63029: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63030: LD_ADDR_VAR 0 5
63034: PUSH
63035: LD_VAR 0 1
63039: PUSH
63040: LD_INT 4
63042: MINUS
63043: PUSH
63044: LD_VAR 0 2
63048: PUSH
63049: LD_INT 1
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: LIST
63056: PUSH
63057: LD_VAR 0 1
63061: PUSH
63062: LD_VAR 0 2
63066: PUSH
63067: LD_INT 4
63069: MINUS
63070: PUSH
63071: LD_INT 3
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: LIST
63078: PUSH
63079: LD_VAR 0 1
63083: PUSH
63084: LD_INT 4
63086: PLUS
63087: PUSH
63088: LD_VAR 0 2
63092: PUSH
63093: LD_INT 4
63095: PLUS
63096: PUSH
63097: LD_INT 5
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: LIST
63104: PUSH
63105: LD_VAR 0 1
63109: PUSH
63110: LD_INT 3
63112: PLUS
63113: PUSH
63114: LD_VAR 0 2
63118: PUSH
63119: LD_INT 4
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: LIST
63126: PUSH
63127: LD_VAR 0 1
63131: PUSH
63132: LD_VAR 0 2
63136: PUSH
63137: LD_INT 3
63139: PLUS
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: LIST
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: ST_TO_ADDR
// end ; end ;
63156: GO 63159
63158: POP
// result := list ;
63159: LD_ADDR_VAR 0 4
63163: PUSH
63164: LD_VAR 0 5
63168: ST_TO_ADDR
// end ;
63169: LD_VAR 0 4
63173: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63174: LD_INT 0
63176: PPUSH
63177: PPUSH
63178: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63179: LD_VAR 0 1
63183: NOT
63184: PUSH
63185: LD_VAR 0 2
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: LD_INT 3
63198: PUSH
63199: LD_INT 4
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: IN
63208: NOT
63209: OR
63210: IFFALSE 63214
// exit ;
63212: GO 63297
// tmp := [ ] ;
63214: LD_ADDR_VAR 0 5
63218: PUSH
63219: EMPTY
63220: ST_TO_ADDR
// for i in units do
63221: LD_ADDR_VAR 0 4
63225: PUSH
63226: LD_VAR 0 1
63230: PUSH
63231: FOR_IN
63232: IFFALSE 63266
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63234: LD_ADDR_VAR 0 5
63238: PUSH
63239: LD_VAR 0 5
63243: PPUSH
63244: LD_VAR 0 4
63248: PPUSH
63249: LD_VAR 0 2
63253: PPUSH
63254: CALL_OW 259
63258: PPUSH
63259: CALL 64670 0 2
63263: ST_TO_ADDR
63264: GO 63231
63266: POP
63267: POP
// if not tmp then
63268: LD_VAR 0 5
63272: NOT
63273: IFFALSE 63277
// exit ;
63275: GO 63297
// result := SortListByListDesc ( units , tmp ) ;
63277: LD_ADDR_VAR 0 3
63281: PUSH
63282: LD_VAR 0 1
63286: PPUSH
63287: LD_VAR 0 5
63291: PPUSH
63292: CALL_OW 77
63296: ST_TO_ADDR
// end ;
63297: LD_VAR 0 3
63301: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63302: LD_INT 0
63304: PPUSH
63305: PPUSH
63306: PPUSH
// result := false ;
63307: LD_ADDR_VAR 0 3
63311: PUSH
63312: LD_INT 0
63314: ST_TO_ADDR
// if not building then
63315: LD_VAR 0 2
63319: NOT
63320: IFFALSE 63324
// exit ;
63322: GO 63462
// x := GetX ( building ) ;
63324: LD_ADDR_VAR 0 4
63328: PUSH
63329: LD_VAR 0 2
63333: PPUSH
63334: CALL_OW 250
63338: ST_TO_ADDR
// y := GetY ( building ) ;
63339: LD_ADDR_VAR 0 5
63343: PUSH
63344: LD_VAR 0 2
63348: PPUSH
63349: CALL_OW 251
63353: ST_TO_ADDR
// if not x or not y then
63354: LD_VAR 0 4
63358: NOT
63359: PUSH
63360: LD_VAR 0 5
63364: NOT
63365: OR
63366: IFFALSE 63370
// exit ;
63368: GO 63462
// if GetTaskList ( unit ) then
63370: LD_VAR 0 1
63374: PPUSH
63375: CALL_OW 437
63379: IFFALSE 63462
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63381: LD_STRING e
63383: PUSH
63384: LD_VAR 0 1
63388: PPUSH
63389: CALL_OW 437
63393: PUSH
63394: LD_INT 1
63396: ARRAY
63397: PUSH
63398: LD_INT 1
63400: ARRAY
63401: EQUAL
63402: PUSH
63403: LD_VAR 0 4
63407: PUSH
63408: LD_VAR 0 1
63412: PPUSH
63413: CALL_OW 437
63417: PUSH
63418: LD_INT 1
63420: ARRAY
63421: PUSH
63422: LD_INT 2
63424: ARRAY
63425: EQUAL
63426: AND
63427: PUSH
63428: LD_VAR 0 5
63432: PUSH
63433: LD_VAR 0 1
63437: PPUSH
63438: CALL_OW 437
63442: PUSH
63443: LD_INT 1
63445: ARRAY
63446: PUSH
63447: LD_INT 3
63449: ARRAY
63450: EQUAL
63451: AND
63452: IFFALSE 63462
// result := true end ;
63454: LD_ADDR_VAR 0 3
63458: PUSH
63459: LD_INT 1
63461: ST_TO_ADDR
// end ;
63462: LD_VAR 0 3
63466: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63467: LD_INT 0
63469: PPUSH
// result := false ;
63470: LD_ADDR_VAR 0 4
63474: PUSH
63475: LD_INT 0
63477: ST_TO_ADDR
// if GetTaskList ( unit ) then
63478: LD_VAR 0 1
63482: PPUSH
63483: CALL_OW 437
63487: IFFALSE 63570
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63489: LD_STRING M
63491: PUSH
63492: LD_VAR 0 1
63496: PPUSH
63497: CALL_OW 437
63501: PUSH
63502: LD_INT 1
63504: ARRAY
63505: PUSH
63506: LD_INT 1
63508: ARRAY
63509: EQUAL
63510: PUSH
63511: LD_VAR 0 2
63515: PUSH
63516: LD_VAR 0 1
63520: PPUSH
63521: CALL_OW 437
63525: PUSH
63526: LD_INT 1
63528: ARRAY
63529: PUSH
63530: LD_INT 2
63532: ARRAY
63533: EQUAL
63534: AND
63535: PUSH
63536: LD_VAR 0 3
63540: PUSH
63541: LD_VAR 0 1
63545: PPUSH
63546: CALL_OW 437
63550: PUSH
63551: LD_INT 1
63553: ARRAY
63554: PUSH
63555: LD_INT 3
63557: ARRAY
63558: EQUAL
63559: AND
63560: IFFALSE 63570
// result := true ;
63562: LD_ADDR_VAR 0 4
63566: PUSH
63567: LD_INT 1
63569: ST_TO_ADDR
// end ; end ;
63570: LD_VAR 0 4
63574: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63575: LD_INT 0
63577: PPUSH
63578: PPUSH
63579: PPUSH
63580: PPUSH
// if not unit or not area then
63581: LD_VAR 0 1
63585: NOT
63586: PUSH
63587: LD_VAR 0 2
63591: NOT
63592: OR
63593: IFFALSE 63597
// exit ;
63595: GO 63773
// tmp := AreaToList ( area , i ) ;
63597: LD_ADDR_VAR 0 6
63601: PUSH
63602: LD_VAR 0 2
63606: PPUSH
63607: LD_VAR 0 5
63611: PPUSH
63612: CALL_OW 517
63616: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63617: LD_ADDR_VAR 0 5
63621: PUSH
63622: DOUBLE
63623: LD_INT 1
63625: DEC
63626: ST_TO_ADDR
63627: LD_VAR 0 6
63631: PUSH
63632: LD_INT 1
63634: ARRAY
63635: PUSH
63636: FOR_TO
63637: IFFALSE 63771
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63639: LD_ADDR_VAR 0 7
63643: PUSH
63644: LD_VAR 0 6
63648: PUSH
63649: LD_INT 1
63651: ARRAY
63652: PUSH
63653: LD_VAR 0 5
63657: ARRAY
63658: PUSH
63659: LD_VAR 0 6
63663: PUSH
63664: LD_INT 2
63666: ARRAY
63667: PUSH
63668: LD_VAR 0 5
63672: ARRAY
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63678: LD_INT 92
63680: PUSH
63681: LD_VAR 0 7
63685: PUSH
63686: LD_INT 1
63688: ARRAY
63689: PUSH
63690: LD_VAR 0 7
63694: PUSH
63695: LD_INT 2
63697: ARRAY
63698: PUSH
63699: LD_INT 2
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: PPUSH
63708: CALL_OW 69
63712: PUSH
63713: LD_INT 0
63715: EQUAL
63716: IFFALSE 63769
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63718: LD_VAR 0 1
63722: PPUSH
63723: LD_VAR 0 7
63727: PUSH
63728: LD_INT 1
63730: ARRAY
63731: PPUSH
63732: LD_VAR 0 7
63736: PUSH
63737: LD_INT 2
63739: ARRAY
63740: PPUSH
63741: LD_VAR 0 3
63745: PPUSH
63746: CALL_OW 48
// result := IsPlaced ( unit ) ;
63750: LD_ADDR_VAR 0 4
63754: PUSH
63755: LD_VAR 0 1
63759: PPUSH
63760: CALL_OW 305
63764: ST_TO_ADDR
// exit ;
63765: POP
63766: POP
63767: GO 63773
// end ; end ;
63769: GO 63636
63771: POP
63772: POP
// end ;
63773: LD_VAR 0 4
63777: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63778: LD_INT 0
63780: PPUSH
63781: PPUSH
63782: PPUSH
// if not side or side > 8 then
63783: LD_VAR 0 1
63787: NOT
63788: PUSH
63789: LD_VAR 0 1
63793: PUSH
63794: LD_INT 8
63796: GREATER
63797: OR
63798: IFFALSE 63802
// exit ;
63800: GO 63989
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63802: LD_ADDR_VAR 0 4
63806: PUSH
63807: LD_INT 22
63809: PUSH
63810: LD_VAR 0 1
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 21
63821: PUSH
63822: LD_INT 3
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PPUSH
63833: CALL_OW 69
63837: ST_TO_ADDR
// if not tmp then
63838: LD_VAR 0 4
63842: NOT
63843: IFFALSE 63847
// exit ;
63845: GO 63989
// enable_addtolog := true ;
63847: LD_ADDR_OWVAR 81
63851: PUSH
63852: LD_INT 1
63854: ST_TO_ADDR
// AddToLog ( [ ) ;
63855: LD_STRING [
63857: PPUSH
63858: CALL_OW 561
// for i in tmp do
63862: LD_ADDR_VAR 0 3
63866: PUSH
63867: LD_VAR 0 4
63871: PUSH
63872: FOR_IN
63873: IFFALSE 63980
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63875: LD_STRING [
63877: PUSH
63878: LD_VAR 0 3
63882: PPUSH
63883: CALL_OW 266
63887: STR
63888: PUSH
63889: LD_STRING , 
63891: STR
63892: PUSH
63893: LD_VAR 0 3
63897: PPUSH
63898: CALL_OW 250
63902: STR
63903: PUSH
63904: LD_STRING , 
63906: STR
63907: PUSH
63908: LD_VAR 0 3
63912: PPUSH
63913: CALL_OW 251
63917: STR
63918: PUSH
63919: LD_STRING , 
63921: STR
63922: PUSH
63923: LD_VAR 0 3
63927: PPUSH
63928: CALL_OW 254
63932: STR
63933: PUSH
63934: LD_STRING , 
63936: STR
63937: PUSH
63938: LD_VAR 0 3
63942: PPUSH
63943: LD_INT 1
63945: PPUSH
63946: CALL_OW 268
63950: STR
63951: PUSH
63952: LD_STRING , 
63954: STR
63955: PUSH
63956: LD_VAR 0 3
63960: PPUSH
63961: LD_INT 2
63963: PPUSH
63964: CALL_OW 268
63968: STR
63969: PUSH
63970: LD_STRING ],
63972: STR
63973: PPUSH
63974: CALL_OW 561
// end ;
63978: GO 63872
63980: POP
63981: POP
// AddToLog ( ]; ) ;
63982: LD_STRING ];
63984: PPUSH
63985: CALL_OW 561
// end ;
63989: LD_VAR 0 2
63993: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63994: LD_INT 0
63996: PPUSH
63997: PPUSH
63998: PPUSH
63999: PPUSH
64000: PPUSH
// if not area or not rate or not max then
64001: LD_VAR 0 1
64005: NOT
64006: PUSH
64007: LD_VAR 0 2
64011: NOT
64012: OR
64013: PUSH
64014: LD_VAR 0 4
64018: NOT
64019: OR
64020: IFFALSE 64024
// exit ;
64022: GO 64213
// while 1 do
64024: LD_INT 1
64026: IFFALSE 64213
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64028: LD_ADDR_VAR 0 9
64032: PUSH
64033: LD_VAR 0 1
64037: PPUSH
64038: LD_INT 1
64040: PPUSH
64041: CALL_OW 287
64045: PUSH
64046: LD_INT 10
64048: MUL
64049: ST_TO_ADDR
// r := rate / 10 ;
64050: LD_ADDR_VAR 0 7
64054: PUSH
64055: LD_VAR 0 2
64059: PUSH
64060: LD_INT 10
64062: DIVREAL
64063: ST_TO_ADDR
// time := 1 1$00 ;
64064: LD_ADDR_VAR 0 8
64068: PUSH
64069: LD_INT 2100
64071: ST_TO_ADDR
// if amount < min then
64072: LD_VAR 0 9
64076: PUSH
64077: LD_VAR 0 3
64081: LESS
64082: IFFALSE 64100
// r := r * 2 else
64084: LD_ADDR_VAR 0 7
64088: PUSH
64089: LD_VAR 0 7
64093: PUSH
64094: LD_INT 2
64096: MUL
64097: ST_TO_ADDR
64098: GO 64126
// if amount > max then
64100: LD_VAR 0 9
64104: PUSH
64105: LD_VAR 0 4
64109: GREATER
64110: IFFALSE 64126
// r := r / 2 ;
64112: LD_ADDR_VAR 0 7
64116: PUSH
64117: LD_VAR 0 7
64121: PUSH
64122: LD_INT 2
64124: DIVREAL
64125: ST_TO_ADDR
// time := time / r ;
64126: LD_ADDR_VAR 0 8
64130: PUSH
64131: LD_VAR 0 8
64135: PUSH
64136: LD_VAR 0 7
64140: DIVREAL
64141: ST_TO_ADDR
// if time < 0 then
64142: LD_VAR 0 8
64146: PUSH
64147: LD_INT 0
64149: LESS
64150: IFFALSE 64167
// time := time * - 1 ;
64152: LD_ADDR_VAR 0 8
64156: PUSH
64157: LD_VAR 0 8
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: MUL
64166: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64167: LD_VAR 0 8
64171: PUSH
64172: LD_INT 35
64174: PPUSH
64175: LD_INT 875
64177: PPUSH
64178: CALL_OW 12
64182: PLUS
64183: PPUSH
64184: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64188: LD_INT 1
64190: PPUSH
64191: LD_INT 5
64193: PPUSH
64194: CALL_OW 12
64198: PPUSH
64199: LD_VAR 0 1
64203: PPUSH
64204: LD_INT 1
64206: PPUSH
64207: CALL_OW 55
// end ;
64211: GO 64024
// end ;
64213: LD_VAR 0 5
64217: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64218: LD_INT 0
64220: PPUSH
64221: PPUSH
64222: PPUSH
64223: PPUSH
64224: PPUSH
64225: PPUSH
64226: PPUSH
64227: PPUSH
// if not turrets or not factories then
64228: LD_VAR 0 1
64232: NOT
64233: PUSH
64234: LD_VAR 0 2
64238: NOT
64239: OR
64240: IFFALSE 64244
// exit ;
64242: GO 64551
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64244: LD_ADDR_VAR 0 10
64248: PUSH
64249: LD_INT 5
64251: PUSH
64252: LD_INT 6
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 2
64261: PUSH
64262: LD_INT 4
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 3
64271: PUSH
64272: LD_INT 5
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 24
64286: PUSH
64287: LD_INT 25
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 23
64296: PUSH
64297: LD_INT 27
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 42
64310: PUSH
64311: LD_INT 43
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 44
64320: PUSH
64321: LD_INT 46
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 45
64330: PUSH
64331: LD_INT 47
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: LIST
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: LIST
64347: ST_TO_ADDR
// result := [ ] ;
64348: LD_ADDR_VAR 0 3
64352: PUSH
64353: EMPTY
64354: ST_TO_ADDR
// for i in turrets do
64355: LD_ADDR_VAR 0 4
64359: PUSH
64360: LD_VAR 0 1
64364: PUSH
64365: FOR_IN
64366: IFFALSE 64549
// begin nat := GetNation ( i ) ;
64368: LD_ADDR_VAR 0 7
64372: PUSH
64373: LD_VAR 0 4
64377: PPUSH
64378: CALL_OW 248
64382: ST_TO_ADDR
// weapon := 0 ;
64383: LD_ADDR_VAR 0 8
64387: PUSH
64388: LD_INT 0
64390: ST_TO_ADDR
// if not nat then
64391: LD_VAR 0 7
64395: NOT
64396: IFFALSE 64400
// continue ;
64398: GO 64365
// for j in list [ nat ] do
64400: LD_ADDR_VAR 0 5
64404: PUSH
64405: LD_VAR 0 10
64409: PUSH
64410: LD_VAR 0 7
64414: ARRAY
64415: PUSH
64416: FOR_IN
64417: IFFALSE 64458
// if GetBWeapon ( i ) = j [ 1 ] then
64419: LD_VAR 0 4
64423: PPUSH
64424: CALL_OW 269
64428: PUSH
64429: LD_VAR 0 5
64433: PUSH
64434: LD_INT 1
64436: ARRAY
64437: EQUAL
64438: IFFALSE 64456
// begin weapon := j [ 2 ] ;
64440: LD_ADDR_VAR 0 8
64444: PUSH
64445: LD_VAR 0 5
64449: PUSH
64450: LD_INT 2
64452: ARRAY
64453: ST_TO_ADDR
// break ;
64454: GO 64458
// end ;
64456: GO 64416
64458: POP
64459: POP
// if not weapon then
64460: LD_VAR 0 8
64464: NOT
64465: IFFALSE 64469
// continue ;
64467: GO 64365
// for k in factories do
64469: LD_ADDR_VAR 0 6
64473: PUSH
64474: LD_VAR 0 2
64478: PUSH
64479: FOR_IN
64480: IFFALSE 64545
// begin weapons := AvailableWeaponList ( k ) ;
64482: LD_ADDR_VAR 0 9
64486: PUSH
64487: LD_VAR 0 6
64491: PPUSH
64492: CALL_OW 478
64496: ST_TO_ADDR
// if not weapons then
64497: LD_VAR 0 9
64501: NOT
64502: IFFALSE 64506
// continue ;
64504: GO 64479
// if weapon in weapons then
64506: LD_VAR 0 8
64510: PUSH
64511: LD_VAR 0 9
64515: IN
64516: IFFALSE 64543
// begin result := [ i , weapon ] ;
64518: LD_ADDR_VAR 0 3
64522: PUSH
64523: LD_VAR 0 4
64527: PUSH
64528: LD_VAR 0 8
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: ST_TO_ADDR
// exit ;
64537: POP
64538: POP
64539: POP
64540: POP
64541: GO 64551
// end ; end ;
64543: GO 64479
64545: POP
64546: POP
// end ;
64547: GO 64365
64549: POP
64550: POP
// end ;
64551: LD_VAR 0 3
64555: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64556: LD_INT 0
64558: PPUSH
// if not side or side > 8 then
64559: LD_VAR 0 3
64563: NOT
64564: PUSH
64565: LD_VAR 0 3
64569: PUSH
64570: LD_INT 8
64572: GREATER
64573: OR
64574: IFFALSE 64578
// exit ;
64576: GO 64637
// if not range then
64578: LD_VAR 0 4
64582: NOT
64583: IFFALSE 64594
// range := - 12 ;
64585: LD_ADDR_VAR 0 4
64589: PUSH
64590: LD_INT 12
64592: NEG
64593: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64594: LD_VAR 0 1
64598: PPUSH
64599: LD_VAR 0 2
64603: PPUSH
64604: LD_VAR 0 3
64608: PPUSH
64609: LD_VAR 0 4
64613: PPUSH
64614: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64618: LD_VAR 0 1
64622: PPUSH
64623: LD_VAR 0 2
64627: PPUSH
64628: LD_VAR 0 3
64632: PPUSH
64633: CALL_OW 331
// end ;
64637: LD_VAR 0 5
64641: RET
// export function Video ( mode ) ; begin
64642: LD_INT 0
64644: PPUSH
// ingame_video = mode ;
64645: LD_ADDR_OWVAR 52
64649: PUSH
64650: LD_VAR 0 1
64654: ST_TO_ADDR
// interface_hidden = mode ;
64655: LD_ADDR_OWVAR 54
64659: PUSH
64660: LD_VAR 0 1
64664: ST_TO_ADDR
// end ;
64665: LD_VAR 0 2
64669: RET
// export function Join ( array , element ) ; begin
64670: LD_INT 0
64672: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64673: LD_ADDR_VAR 0 3
64677: PUSH
64678: LD_VAR 0 1
64682: PPUSH
64683: LD_VAR 0 1
64687: PUSH
64688: LD_INT 1
64690: PLUS
64691: PPUSH
64692: LD_VAR 0 2
64696: PPUSH
64697: CALL_OW 1
64701: ST_TO_ADDR
// end ;
64702: LD_VAR 0 3
64706: RET
// export function JoinUnion ( array , element ) ; begin
64707: LD_INT 0
64709: PPUSH
// result := array union element ;
64710: LD_ADDR_VAR 0 3
64714: PUSH
64715: LD_VAR 0 1
64719: PUSH
64720: LD_VAR 0 2
64724: UNION
64725: ST_TO_ADDR
// end ;
64726: LD_VAR 0 3
64730: RET
// export function GetBehemoths ( side ) ; begin
64731: LD_INT 0
64733: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64734: LD_ADDR_VAR 0 2
64738: PUSH
64739: LD_INT 22
64741: PUSH
64742: LD_VAR 0 1
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 31
64753: PUSH
64754: LD_INT 25
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PPUSH
64765: CALL_OW 69
64769: ST_TO_ADDR
// end ;
64770: LD_VAR 0 2
64774: RET
// export function Shuffle ( array ) ; var i , index ; begin
64775: LD_INT 0
64777: PPUSH
64778: PPUSH
64779: PPUSH
// result := [ ] ;
64780: LD_ADDR_VAR 0 2
64784: PUSH
64785: EMPTY
64786: ST_TO_ADDR
// if not array then
64787: LD_VAR 0 1
64791: NOT
64792: IFFALSE 64796
// exit ;
64794: GO 64895
// Randomize ;
64796: CALL_OW 10
// for i = array downto 1 do
64800: LD_ADDR_VAR 0 3
64804: PUSH
64805: DOUBLE
64806: LD_VAR 0 1
64810: INC
64811: ST_TO_ADDR
64812: LD_INT 1
64814: PUSH
64815: FOR_DOWNTO
64816: IFFALSE 64893
// begin index := rand ( 1 , array ) ;
64818: LD_ADDR_VAR 0 4
64822: PUSH
64823: LD_INT 1
64825: PPUSH
64826: LD_VAR 0 1
64830: PPUSH
64831: CALL_OW 12
64835: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64836: LD_ADDR_VAR 0 2
64840: PUSH
64841: LD_VAR 0 2
64845: PPUSH
64846: LD_VAR 0 2
64850: PUSH
64851: LD_INT 1
64853: PLUS
64854: PPUSH
64855: LD_VAR 0 1
64859: PUSH
64860: LD_VAR 0 4
64864: ARRAY
64865: PPUSH
64866: CALL_OW 2
64870: ST_TO_ADDR
// array := Delete ( array , index ) ;
64871: LD_ADDR_VAR 0 1
64875: PUSH
64876: LD_VAR 0 1
64880: PPUSH
64881: LD_VAR 0 4
64885: PPUSH
64886: CALL_OW 3
64890: ST_TO_ADDR
// end ;
64891: GO 64815
64893: POP
64894: POP
// end ;
64895: LD_VAR 0 2
64899: RET
// export function GetBaseMaterials ( base ) ; begin
64900: LD_INT 0
64902: PPUSH
// result := [ 0 , 0 , 0 ] ;
64903: LD_ADDR_VAR 0 2
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: ST_TO_ADDR
// if not base then
64922: LD_VAR 0 1
64926: NOT
64927: IFFALSE 64931
// exit ;
64929: GO 64980
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64931: LD_ADDR_VAR 0 2
64935: PUSH
64936: LD_VAR 0 1
64940: PPUSH
64941: LD_INT 1
64943: PPUSH
64944: CALL_OW 275
64948: PUSH
64949: LD_VAR 0 1
64953: PPUSH
64954: LD_INT 2
64956: PPUSH
64957: CALL_OW 275
64961: PUSH
64962: LD_VAR 0 1
64966: PPUSH
64967: LD_INT 3
64969: PPUSH
64970: CALL_OW 275
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: LIST
64979: ST_TO_ADDR
// end ;
64980: LD_VAR 0 2
64984: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64985: LD_INT 0
64987: PPUSH
64988: PPUSH
// result := array ;
64989: LD_ADDR_VAR 0 3
64993: PUSH
64994: LD_VAR 0 1
64998: ST_TO_ADDR
// if size >= result then
64999: LD_VAR 0 2
65003: PUSH
65004: LD_VAR 0 3
65008: GREATEREQUAL
65009: IFFALSE 65013
// exit ;
65011: GO 65063
// if size then
65013: LD_VAR 0 2
65017: IFFALSE 65063
// for i := array downto size do
65019: LD_ADDR_VAR 0 4
65023: PUSH
65024: DOUBLE
65025: LD_VAR 0 1
65029: INC
65030: ST_TO_ADDR
65031: LD_VAR 0 2
65035: PUSH
65036: FOR_DOWNTO
65037: IFFALSE 65061
// result := Delete ( result , result ) ;
65039: LD_ADDR_VAR 0 3
65043: PUSH
65044: LD_VAR 0 3
65048: PPUSH
65049: LD_VAR 0 3
65053: PPUSH
65054: CALL_OW 3
65058: ST_TO_ADDR
65059: GO 65036
65061: POP
65062: POP
// end ;
65063: LD_VAR 0 3
65067: RET
// export function ComExit ( unit ) ; var tmp ; begin
65068: LD_INT 0
65070: PPUSH
65071: PPUSH
// if not IsInUnit ( unit ) then
65072: LD_VAR 0 1
65076: PPUSH
65077: CALL_OW 310
65081: NOT
65082: IFFALSE 65086
// exit ;
65084: GO 65146
// tmp := IsInUnit ( unit ) ;
65086: LD_ADDR_VAR 0 3
65090: PUSH
65091: LD_VAR 0 1
65095: PPUSH
65096: CALL_OW 310
65100: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65101: LD_VAR 0 3
65105: PPUSH
65106: CALL_OW 247
65110: PUSH
65111: LD_INT 2
65113: EQUAL
65114: IFFALSE 65127
// ComExitVehicle ( unit ) else
65116: LD_VAR 0 1
65120: PPUSH
65121: CALL_OW 121
65125: GO 65136
// ComExitBuilding ( unit ) ;
65127: LD_VAR 0 1
65131: PPUSH
65132: CALL_OW 122
// result := tmp ;
65136: LD_ADDR_VAR 0 2
65140: PUSH
65141: LD_VAR 0 3
65145: ST_TO_ADDR
// end ;
65146: LD_VAR 0 2
65150: RET
// export function ComExitAll ( units ) ; var i ; begin
65151: LD_INT 0
65153: PPUSH
65154: PPUSH
// if not units then
65155: LD_VAR 0 1
65159: NOT
65160: IFFALSE 65164
// exit ;
65162: GO 65190
// for i in units do
65164: LD_ADDR_VAR 0 3
65168: PUSH
65169: LD_VAR 0 1
65173: PUSH
65174: FOR_IN
65175: IFFALSE 65188
// ComExit ( i ) ;
65177: LD_VAR 0 3
65181: PPUSH
65182: CALL 65068 0 1
65186: GO 65174
65188: POP
65189: POP
// end ;
65190: LD_VAR 0 2
65194: RET
// export function ResetHc ; begin
65195: LD_INT 0
65197: PPUSH
// InitHc ;
65198: CALL_OW 19
// hc_importance := 0 ;
65202: LD_ADDR_OWVAR 32
65206: PUSH
65207: LD_INT 0
65209: ST_TO_ADDR
// end ;
65210: LD_VAR 0 1
65214: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65215: LD_INT 0
65217: PPUSH
65218: PPUSH
65219: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65220: LD_ADDR_VAR 0 6
65224: PUSH
65225: LD_VAR 0 1
65229: PUSH
65230: LD_VAR 0 3
65234: PLUS
65235: PUSH
65236: LD_INT 2
65238: DIV
65239: ST_TO_ADDR
// if _x < 0 then
65240: LD_VAR 0 6
65244: PUSH
65245: LD_INT 0
65247: LESS
65248: IFFALSE 65265
// _x := _x * - 1 ;
65250: LD_ADDR_VAR 0 6
65254: PUSH
65255: LD_VAR 0 6
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: MUL
65264: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65265: LD_ADDR_VAR 0 7
65269: PUSH
65270: LD_VAR 0 2
65274: PUSH
65275: LD_VAR 0 4
65279: PLUS
65280: PUSH
65281: LD_INT 2
65283: DIV
65284: ST_TO_ADDR
// if _y < 0 then
65285: LD_VAR 0 7
65289: PUSH
65290: LD_INT 0
65292: LESS
65293: IFFALSE 65310
// _y := _y * - 1 ;
65295: LD_ADDR_VAR 0 7
65299: PUSH
65300: LD_VAR 0 7
65304: PUSH
65305: LD_INT 1
65307: NEG
65308: MUL
65309: ST_TO_ADDR
// result := [ _x , _y ] ;
65310: LD_ADDR_VAR 0 5
65314: PUSH
65315: LD_VAR 0 6
65319: PUSH
65320: LD_VAR 0 7
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: ST_TO_ADDR
// end ;
65329: LD_VAR 0 5
65333: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65334: LD_INT 0
65336: PPUSH
65337: PPUSH
65338: PPUSH
65339: PPUSH
// task := GetTaskList ( unit ) ;
65340: LD_ADDR_VAR 0 7
65344: PUSH
65345: LD_VAR 0 1
65349: PPUSH
65350: CALL_OW 437
65354: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65355: LD_VAR 0 7
65359: NOT
65360: PUSH
65361: LD_VAR 0 1
65365: PPUSH
65366: LD_VAR 0 2
65370: PPUSH
65371: CALL_OW 308
65375: NOT
65376: AND
65377: IFFALSE 65381
// exit ;
65379: GO 65499
// if IsInArea ( unit , area ) then
65381: LD_VAR 0 1
65385: PPUSH
65386: LD_VAR 0 2
65390: PPUSH
65391: CALL_OW 308
65395: IFFALSE 65413
// begin ComMoveToArea ( unit , goAway ) ;
65397: LD_VAR 0 1
65401: PPUSH
65402: LD_VAR 0 3
65406: PPUSH
65407: CALL_OW 113
// exit ;
65411: GO 65499
// end ; if task [ 1 ] [ 1 ] <> M then
65413: LD_VAR 0 7
65417: PUSH
65418: LD_INT 1
65420: ARRAY
65421: PUSH
65422: LD_INT 1
65424: ARRAY
65425: PUSH
65426: LD_STRING M
65428: NONEQUAL
65429: IFFALSE 65433
// exit ;
65431: GO 65499
// x := task [ 1 ] [ 2 ] ;
65433: LD_ADDR_VAR 0 5
65437: PUSH
65438: LD_VAR 0 7
65442: PUSH
65443: LD_INT 1
65445: ARRAY
65446: PUSH
65447: LD_INT 2
65449: ARRAY
65450: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65451: LD_ADDR_VAR 0 6
65455: PUSH
65456: LD_VAR 0 7
65460: PUSH
65461: LD_INT 1
65463: ARRAY
65464: PUSH
65465: LD_INT 3
65467: ARRAY
65468: ST_TO_ADDR
// if InArea ( x , y , area ) then
65469: LD_VAR 0 5
65473: PPUSH
65474: LD_VAR 0 6
65478: PPUSH
65479: LD_VAR 0 2
65483: PPUSH
65484: CALL_OW 309
65488: IFFALSE 65499
// ComStop ( unit ) ;
65490: LD_VAR 0 1
65494: PPUSH
65495: CALL_OW 141
// end ;
65499: LD_VAR 0 4
65503: RET
// export function Abs ( value ) ; begin
65504: LD_INT 0
65506: PPUSH
// result := value ;
65507: LD_ADDR_VAR 0 2
65511: PUSH
65512: LD_VAR 0 1
65516: ST_TO_ADDR
// if value < 0 then
65517: LD_VAR 0 1
65521: PUSH
65522: LD_INT 0
65524: LESS
65525: IFFALSE 65542
// result := value * - 1 ;
65527: LD_ADDR_VAR 0 2
65531: PUSH
65532: LD_VAR 0 1
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: MUL
65541: ST_TO_ADDR
// end ;
65542: LD_VAR 0 2
65546: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65547: LD_INT 0
65549: PPUSH
65550: PPUSH
65551: PPUSH
65552: PPUSH
65553: PPUSH
65554: PPUSH
65555: PPUSH
65556: PPUSH
// if not unit or not building then
65557: LD_VAR 0 1
65561: NOT
65562: PUSH
65563: LD_VAR 0 2
65567: NOT
65568: OR
65569: IFFALSE 65573
// exit ;
65571: GO 65799
// x := GetX ( building ) ;
65573: LD_ADDR_VAR 0 4
65577: PUSH
65578: LD_VAR 0 2
65582: PPUSH
65583: CALL_OW 250
65587: ST_TO_ADDR
// y := GetY ( building ) ;
65588: LD_ADDR_VAR 0 6
65592: PUSH
65593: LD_VAR 0 2
65597: PPUSH
65598: CALL_OW 251
65602: ST_TO_ADDR
// d := GetDir ( building ) ;
65603: LD_ADDR_VAR 0 8
65607: PUSH
65608: LD_VAR 0 2
65612: PPUSH
65613: CALL_OW 254
65617: ST_TO_ADDR
// r := 4 ;
65618: LD_ADDR_VAR 0 9
65622: PUSH
65623: LD_INT 4
65625: ST_TO_ADDR
// for i := 1 to 5 do
65626: LD_ADDR_VAR 0 10
65630: PUSH
65631: DOUBLE
65632: LD_INT 1
65634: DEC
65635: ST_TO_ADDR
65636: LD_INT 5
65638: PUSH
65639: FOR_TO
65640: IFFALSE 65797
// begin _x := ShiftX ( x , d , r + i ) ;
65642: LD_ADDR_VAR 0 5
65646: PUSH
65647: LD_VAR 0 4
65651: PPUSH
65652: LD_VAR 0 8
65656: PPUSH
65657: LD_VAR 0 9
65661: PUSH
65662: LD_VAR 0 10
65666: PLUS
65667: PPUSH
65668: CALL_OW 272
65672: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65673: LD_ADDR_VAR 0 7
65677: PUSH
65678: LD_VAR 0 6
65682: PPUSH
65683: LD_VAR 0 8
65687: PPUSH
65688: LD_VAR 0 9
65692: PUSH
65693: LD_VAR 0 10
65697: PLUS
65698: PPUSH
65699: CALL_OW 273
65703: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65704: LD_VAR 0 5
65708: PPUSH
65709: LD_VAR 0 7
65713: PPUSH
65714: CALL_OW 488
65718: PUSH
65719: LD_VAR 0 5
65723: PPUSH
65724: LD_VAR 0 7
65728: PPUSH
65729: CALL_OW 428
65733: PPUSH
65734: CALL_OW 247
65738: PUSH
65739: LD_INT 3
65741: PUSH
65742: LD_INT 2
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: IN
65749: NOT
65750: AND
65751: IFFALSE 65795
// begin ComMoveXY ( unit , _x , _y ) ;
65753: LD_VAR 0 1
65757: PPUSH
65758: LD_VAR 0 5
65762: PPUSH
65763: LD_VAR 0 7
65767: PPUSH
65768: CALL_OW 111
// result := [ _x , _y ] ;
65772: LD_ADDR_VAR 0 3
65776: PUSH
65777: LD_VAR 0 5
65781: PUSH
65782: LD_VAR 0 7
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: ST_TO_ADDR
// exit ;
65791: POP
65792: POP
65793: GO 65799
// end ; end ;
65795: GO 65639
65797: POP
65798: POP
// end ;
65799: LD_VAR 0 3
65803: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65804: LD_INT 0
65806: PPUSH
65807: PPUSH
65808: PPUSH
// result := 0 ;
65809: LD_ADDR_VAR 0 3
65813: PUSH
65814: LD_INT 0
65816: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65817: LD_VAR 0 1
65821: PUSH
65822: LD_INT 0
65824: LESS
65825: PUSH
65826: LD_VAR 0 1
65830: PUSH
65831: LD_INT 8
65833: GREATER
65834: OR
65835: PUSH
65836: LD_VAR 0 2
65840: PUSH
65841: LD_INT 0
65843: LESS
65844: OR
65845: PUSH
65846: LD_VAR 0 2
65850: PUSH
65851: LD_INT 8
65853: GREATER
65854: OR
65855: IFFALSE 65859
// exit ;
65857: GO 65934
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65859: LD_ADDR_VAR 0 4
65863: PUSH
65864: LD_INT 22
65866: PUSH
65867: LD_VAR 0 2
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PPUSH
65876: CALL_OW 69
65880: PUSH
65881: FOR_IN
65882: IFFALSE 65932
// begin un := UnitShoot ( i ) ;
65884: LD_ADDR_VAR 0 5
65888: PUSH
65889: LD_VAR 0 4
65893: PPUSH
65894: CALL_OW 504
65898: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65899: LD_VAR 0 5
65903: PPUSH
65904: CALL_OW 255
65908: PUSH
65909: LD_VAR 0 1
65913: EQUAL
65914: IFFALSE 65930
// begin result := un ;
65916: LD_ADDR_VAR 0 3
65920: PUSH
65921: LD_VAR 0 5
65925: ST_TO_ADDR
// exit ;
65926: POP
65927: POP
65928: GO 65934
// end ; end ;
65930: GO 65881
65932: POP
65933: POP
// end ;
65934: LD_VAR 0 3
65938: RET
// export function GetCargoBay ( units ) ; begin
65939: LD_INT 0
65941: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65942: LD_ADDR_VAR 0 2
65946: PUSH
65947: LD_VAR 0 1
65951: PPUSH
65952: LD_INT 2
65954: PUSH
65955: LD_INT 34
65957: PUSH
65958: LD_INT 12
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 34
65967: PUSH
65968: LD_INT 51
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 34
65977: PUSH
65978: LD_INT 32
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 34
65987: PUSH
65988: LD_INT 89
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: PPUSH
66002: CALL_OW 72
66006: ST_TO_ADDR
// end ;
66007: LD_VAR 0 2
66011: RET
// export function Negate ( value ) ; begin
66012: LD_INT 0
66014: PPUSH
// result := not value ;
66015: LD_ADDR_VAR 0 2
66019: PUSH
66020: LD_VAR 0 1
66024: NOT
66025: ST_TO_ADDR
// end ;
66026: LD_VAR 0 2
66030: RET
// export function Inc ( value ) ; begin
66031: LD_INT 0
66033: PPUSH
// result := value + 1 ;
66034: LD_ADDR_VAR 0 2
66038: PUSH
66039: LD_VAR 0 1
66043: PUSH
66044: LD_INT 1
66046: PLUS
66047: ST_TO_ADDR
// end ;
66048: LD_VAR 0 2
66052: RET
// export function Dec ( value ) ; begin
66053: LD_INT 0
66055: PPUSH
// result := value - 1 ;
66056: LD_ADDR_VAR 0 2
66060: PUSH
66061: LD_VAR 0 1
66065: PUSH
66066: LD_INT 1
66068: MINUS
66069: ST_TO_ADDR
// end ;
66070: LD_VAR 0 2
66074: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66075: LD_INT 0
66077: PPUSH
66078: PPUSH
66079: PPUSH
66080: PPUSH
66081: PPUSH
66082: PPUSH
66083: PPUSH
66084: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66085: LD_VAR 0 1
66089: PPUSH
66090: LD_VAR 0 2
66094: PPUSH
66095: CALL_OW 488
66099: NOT
66100: PUSH
66101: LD_VAR 0 3
66105: PPUSH
66106: LD_VAR 0 4
66110: PPUSH
66111: CALL_OW 488
66115: NOT
66116: OR
66117: IFFALSE 66130
// begin result := - 1 ;
66119: LD_ADDR_VAR 0 5
66123: PUSH
66124: LD_INT 1
66126: NEG
66127: ST_TO_ADDR
// exit ;
66128: GO 66365
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66130: LD_ADDR_VAR 0 12
66134: PUSH
66135: LD_VAR 0 1
66139: PPUSH
66140: LD_VAR 0 2
66144: PPUSH
66145: LD_VAR 0 3
66149: PPUSH
66150: LD_VAR 0 4
66154: PPUSH
66155: CALL 65215 0 4
66159: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66160: LD_ADDR_VAR 0 11
66164: PUSH
66165: LD_VAR 0 1
66169: PPUSH
66170: LD_VAR 0 2
66174: PPUSH
66175: LD_VAR 0 12
66179: PUSH
66180: LD_INT 1
66182: ARRAY
66183: PPUSH
66184: LD_VAR 0 12
66188: PUSH
66189: LD_INT 2
66191: ARRAY
66192: PPUSH
66193: CALL_OW 298
66197: ST_TO_ADDR
// distance := 9999 ;
66198: LD_ADDR_VAR 0 10
66202: PUSH
66203: LD_INT 9999
66205: ST_TO_ADDR
// for i := 0 to 5 do
66206: LD_ADDR_VAR 0 6
66210: PUSH
66211: DOUBLE
66212: LD_INT 0
66214: DEC
66215: ST_TO_ADDR
66216: LD_INT 5
66218: PUSH
66219: FOR_TO
66220: IFFALSE 66363
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66222: LD_ADDR_VAR 0 7
66226: PUSH
66227: LD_VAR 0 1
66231: PPUSH
66232: LD_VAR 0 6
66236: PPUSH
66237: LD_VAR 0 11
66241: PPUSH
66242: CALL_OW 272
66246: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66247: LD_ADDR_VAR 0 8
66251: PUSH
66252: LD_VAR 0 2
66256: PPUSH
66257: LD_VAR 0 6
66261: PPUSH
66262: LD_VAR 0 11
66266: PPUSH
66267: CALL_OW 273
66271: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66272: LD_VAR 0 7
66276: PPUSH
66277: LD_VAR 0 8
66281: PPUSH
66282: CALL_OW 488
66286: NOT
66287: IFFALSE 66291
// continue ;
66289: GO 66219
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66291: LD_ADDR_VAR 0 9
66295: PUSH
66296: LD_VAR 0 12
66300: PUSH
66301: LD_INT 1
66303: ARRAY
66304: PPUSH
66305: LD_VAR 0 12
66309: PUSH
66310: LD_INT 2
66312: ARRAY
66313: PPUSH
66314: LD_VAR 0 7
66318: PPUSH
66319: LD_VAR 0 8
66323: PPUSH
66324: CALL_OW 298
66328: ST_TO_ADDR
// if tmp < distance then
66329: LD_VAR 0 9
66333: PUSH
66334: LD_VAR 0 10
66338: LESS
66339: IFFALSE 66361
// begin result := i ;
66341: LD_ADDR_VAR 0 5
66345: PUSH
66346: LD_VAR 0 6
66350: ST_TO_ADDR
// distance := tmp ;
66351: LD_ADDR_VAR 0 10
66355: PUSH
66356: LD_VAR 0 9
66360: ST_TO_ADDR
// end ; end ;
66361: GO 66219
66363: POP
66364: POP
// end ;
66365: LD_VAR 0 5
66369: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66370: LD_INT 0
66372: PPUSH
66373: PPUSH
// if not driver or not IsInUnit ( driver ) then
66374: LD_VAR 0 1
66378: NOT
66379: PUSH
66380: LD_VAR 0 1
66384: PPUSH
66385: CALL_OW 310
66389: NOT
66390: OR
66391: IFFALSE 66395
// exit ;
66393: GO 66485
// vehicle := IsInUnit ( driver ) ;
66395: LD_ADDR_VAR 0 3
66399: PUSH
66400: LD_VAR 0 1
66404: PPUSH
66405: CALL_OW 310
66409: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66410: LD_VAR 0 1
66414: PPUSH
66415: LD_STRING \
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: LD_INT 0
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: LD_INT 0
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: PUSH
66445: LD_STRING E
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: LD_VAR 0 3
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PPUSH
66481: CALL_OW 446
// end ;
66485: LD_VAR 0 2
66489: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66490: LD_INT 0
66492: PPUSH
66493: PPUSH
// if not driver or not IsInUnit ( driver ) then
66494: LD_VAR 0 1
66498: NOT
66499: PUSH
66500: LD_VAR 0 1
66504: PPUSH
66505: CALL_OW 310
66509: NOT
66510: OR
66511: IFFALSE 66515
// exit ;
66513: GO 66605
// vehicle := IsInUnit ( driver ) ;
66515: LD_ADDR_VAR 0 3
66519: PUSH
66520: LD_VAR 0 1
66524: PPUSH
66525: CALL_OW 310
66529: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66530: LD_VAR 0 1
66534: PPUSH
66535: LD_STRING \
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: PUSH
66565: LD_STRING E
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: LD_INT 0
66573: PUSH
66574: LD_VAR 0 3
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PPUSH
66601: CALL_OW 447
// end ;
66605: LD_VAR 0 2
66609: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66610: LD_INT 0
66612: PPUSH
66613: PPUSH
66614: PPUSH
// tmp := [ ] ;
66615: LD_ADDR_VAR 0 5
66619: PUSH
66620: EMPTY
66621: ST_TO_ADDR
// for i in units do
66622: LD_ADDR_VAR 0 4
66626: PUSH
66627: LD_VAR 0 1
66631: PUSH
66632: FOR_IN
66633: IFFALSE 66671
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66635: LD_ADDR_VAR 0 5
66639: PUSH
66640: LD_VAR 0 5
66644: PPUSH
66645: LD_VAR 0 5
66649: PUSH
66650: LD_INT 1
66652: PLUS
66653: PPUSH
66654: LD_VAR 0 4
66658: PPUSH
66659: CALL_OW 256
66663: PPUSH
66664: CALL_OW 2
66668: ST_TO_ADDR
66669: GO 66632
66671: POP
66672: POP
// if not tmp then
66673: LD_VAR 0 5
66677: NOT
66678: IFFALSE 66682
// exit ;
66680: GO 66730
// if asc then
66682: LD_VAR 0 2
66686: IFFALSE 66710
// result := SortListByListAsc ( units , tmp ) else
66688: LD_ADDR_VAR 0 3
66692: PUSH
66693: LD_VAR 0 1
66697: PPUSH
66698: LD_VAR 0 5
66702: PPUSH
66703: CALL_OW 76
66707: ST_TO_ADDR
66708: GO 66730
// result := SortListByListDesc ( units , tmp ) ;
66710: LD_ADDR_VAR 0 3
66714: PUSH
66715: LD_VAR 0 1
66719: PPUSH
66720: LD_VAR 0 5
66724: PPUSH
66725: CALL_OW 77
66729: ST_TO_ADDR
// end ;
66730: LD_VAR 0 3
66734: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66735: LD_INT 0
66737: PPUSH
66738: PPUSH
// task := GetTaskList ( mech ) ;
66739: LD_ADDR_VAR 0 4
66743: PUSH
66744: LD_VAR 0 1
66748: PPUSH
66749: CALL_OW 437
66753: ST_TO_ADDR
// if not task then
66754: LD_VAR 0 4
66758: NOT
66759: IFFALSE 66763
// exit ;
66761: GO 66805
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66763: LD_ADDR_VAR 0 3
66767: PUSH
66768: LD_VAR 0 4
66772: PUSH
66773: LD_INT 1
66775: ARRAY
66776: PUSH
66777: LD_INT 1
66779: ARRAY
66780: PUSH
66781: LD_STRING r
66783: EQUAL
66784: PUSH
66785: LD_VAR 0 4
66789: PUSH
66790: LD_INT 1
66792: ARRAY
66793: PUSH
66794: LD_INT 4
66796: ARRAY
66797: PUSH
66798: LD_VAR 0 2
66802: EQUAL
66803: AND
66804: ST_TO_ADDR
// end ;
66805: LD_VAR 0 3
66809: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66810: LD_INT 0
66812: PPUSH
// SetDir ( unit , d ) ;
66813: LD_VAR 0 1
66817: PPUSH
66818: LD_VAR 0 4
66822: PPUSH
66823: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66827: LD_VAR 0 1
66831: PPUSH
66832: LD_VAR 0 2
66836: PPUSH
66837: LD_VAR 0 3
66841: PPUSH
66842: LD_VAR 0 5
66846: PPUSH
66847: CALL_OW 48
// end ;
66851: LD_VAR 0 6
66855: RET
// export function ToNaturalNumber ( number ) ; begin
66856: LD_INT 0
66858: PPUSH
// result := number div 1 ;
66859: LD_ADDR_VAR 0 2
66863: PUSH
66864: LD_VAR 0 1
66868: PUSH
66869: LD_INT 1
66871: DIV
66872: ST_TO_ADDR
// if number < 0 then
66873: LD_VAR 0 1
66877: PUSH
66878: LD_INT 0
66880: LESS
66881: IFFALSE 66891
// result := 0 ;
66883: LD_ADDR_VAR 0 2
66887: PUSH
66888: LD_INT 0
66890: ST_TO_ADDR
// end ;
66891: LD_VAR 0 2
66895: RET
// export function SortByClass ( units , class ) ; var un ; begin
66896: LD_INT 0
66898: PPUSH
66899: PPUSH
// if not units or not class then
66900: LD_VAR 0 1
66904: NOT
66905: PUSH
66906: LD_VAR 0 2
66910: NOT
66911: OR
66912: IFFALSE 66916
// exit ;
66914: GO 67011
// result := [ ] ;
66916: LD_ADDR_VAR 0 3
66920: PUSH
66921: EMPTY
66922: ST_TO_ADDR
// for un in units do
66923: LD_ADDR_VAR 0 4
66927: PUSH
66928: LD_VAR 0 1
66932: PUSH
66933: FOR_IN
66934: IFFALSE 67009
// if GetClass ( un ) = class then
66936: LD_VAR 0 4
66940: PPUSH
66941: CALL_OW 257
66945: PUSH
66946: LD_VAR 0 2
66950: EQUAL
66951: IFFALSE 66978
// result := Insert ( result , 1 , un ) else
66953: LD_ADDR_VAR 0 3
66957: PUSH
66958: LD_VAR 0 3
66962: PPUSH
66963: LD_INT 1
66965: PPUSH
66966: LD_VAR 0 4
66970: PPUSH
66971: CALL_OW 2
66975: ST_TO_ADDR
66976: GO 67007
// result := Replace ( result , result + 1 , un ) ;
66978: LD_ADDR_VAR 0 3
66982: PUSH
66983: LD_VAR 0 3
66987: PPUSH
66988: LD_VAR 0 3
66992: PUSH
66993: LD_INT 1
66995: PLUS
66996: PPUSH
66997: LD_VAR 0 4
67001: PPUSH
67002: CALL_OW 1
67006: ST_TO_ADDR
67007: GO 66933
67009: POP
67010: POP
// end ;
67011: LD_VAR 0 3
67015: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67016: LD_INT 0
67018: PPUSH
67019: PPUSH
67020: PPUSH
67021: PPUSH
67022: PPUSH
67023: PPUSH
67024: PPUSH
// result := [ ] ;
67025: LD_ADDR_VAR 0 4
67029: PUSH
67030: EMPTY
67031: ST_TO_ADDR
// if x - r < 0 then
67032: LD_VAR 0 1
67036: PUSH
67037: LD_VAR 0 3
67041: MINUS
67042: PUSH
67043: LD_INT 0
67045: LESS
67046: IFFALSE 67058
// min_x := 0 else
67048: LD_ADDR_VAR 0 8
67052: PUSH
67053: LD_INT 0
67055: ST_TO_ADDR
67056: GO 67074
// min_x := x - r ;
67058: LD_ADDR_VAR 0 8
67062: PUSH
67063: LD_VAR 0 1
67067: PUSH
67068: LD_VAR 0 3
67072: MINUS
67073: ST_TO_ADDR
// if y - r < 0 then
67074: LD_VAR 0 2
67078: PUSH
67079: LD_VAR 0 3
67083: MINUS
67084: PUSH
67085: LD_INT 0
67087: LESS
67088: IFFALSE 67100
// min_y := 0 else
67090: LD_ADDR_VAR 0 7
67094: PUSH
67095: LD_INT 0
67097: ST_TO_ADDR
67098: GO 67116
// min_y := y - r ;
67100: LD_ADDR_VAR 0 7
67104: PUSH
67105: LD_VAR 0 2
67109: PUSH
67110: LD_VAR 0 3
67114: MINUS
67115: ST_TO_ADDR
// max_x := x + r ;
67116: LD_ADDR_VAR 0 9
67120: PUSH
67121: LD_VAR 0 1
67125: PUSH
67126: LD_VAR 0 3
67130: PLUS
67131: ST_TO_ADDR
// max_y := y + r ;
67132: LD_ADDR_VAR 0 10
67136: PUSH
67137: LD_VAR 0 2
67141: PUSH
67142: LD_VAR 0 3
67146: PLUS
67147: ST_TO_ADDR
// for _x = min_x to max_x do
67148: LD_ADDR_VAR 0 5
67152: PUSH
67153: DOUBLE
67154: LD_VAR 0 8
67158: DEC
67159: ST_TO_ADDR
67160: LD_VAR 0 9
67164: PUSH
67165: FOR_TO
67166: IFFALSE 67267
// for _y = min_y to max_y do
67168: LD_ADDR_VAR 0 6
67172: PUSH
67173: DOUBLE
67174: LD_VAR 0 7
67178: DEC
67179: ST_TO_ADDR
67180: LD_VAR 0 10
67184: PUSH
67185: FOR_TO
67186: IFFALSE 67263
// begin if not ValidHex ( _x , _y ) then
67188: LD_VAR 0 5
67192: PPUSH
67193: LD_VAR 0 6
67197: PPUSH
67198: CALL_OW 488
67202: NOT
67203: IFFALSE 67207
// continue ;
67205: GO 67185
// if GetResourceTypeXY ( _x , _y ) then
67207: LD_VAR 0 5
67211: PPUSH
67212: LD_VAR 0 6
67216: PPUSH
67217: CALL_OW 283
67221: IFFALSE 67261
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67223: LD_ADDR_VAR 0 4
67227: PUSH
67228: LD_VAR 0 4
67232: PPUSH
67233: LD_VAR 0 4
67237: PUSH
67238: LD_INT 1
67240: PLUS
67241: PPUSH
67242: LD_VAR 0 5
67246: PUSH
67247: LD_VAR 0 6
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PPUSH
67256: CALL_OW 1
67260: ST_TO_ADDR
// end ;
67261: GO 67185
67263: POP
67264: POP
67265: GO 67165
67267: POP
67268: POP
// end ;
67269: LD_VAR 0 4
67273: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67274: LD_INT 0
67276: PPUSH
67277: PPUSH
67278: PPUSH
67279: PPUSH
67280: PPUSH
67281: PPUSH
67282: PPUSH
67283: PPUSH
// if not units then
67284: LD_VAR 0 1
67288: NOT
67289: IFFALSE 67293
// exit ;
67291: GO 67821
// result := UnitFilter ( units , [ f_ok ] ) ;
67293: LD_ADDR_VAR 0 3
67297: PUSH
67298: LD_VAR 0 1
67302: PPUSH
67303: LD_INT 50
67305: PUSH
67306: EMPTY
67307: LIST
67308: PPUSH
67309: CALL_OW 72
67313: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67314: LD_ADDR_VAR 0 8
67318: PUSH
67319: LD_VAR 0 1
67323: PUSH
67324: LD_INT 1
67326: ARRAY
67327: PPUSH
67328: CALL_OW 255
67332: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67333: LD_ADDR_VAR 0 10
67337: PUSH
67338: LD_INT 29
67340: PUSH
67341: LD_INT 91
67343: PUSH
67344: LD_INT 49
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: LIST
67351: ST_TO_ADDR
// if not result then
67352: LD_VAR 0 3
67356: NOT
67357: IFFALSE 67361
// exit ;
67359: GO 67821
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67361: LD_ADDR_VAR 0 5
67365: PUSH
67366: LD_INT 81
67368: PUSH
67369: LD_VAR 0 8
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PPUSH
67378: CALL_OW 69
67382: ST_TO_ADDR
// for i in result do
67383: LD_ADDR_VAR 0 4
67387: PUSH
67388: LD_VAR 0 3
67392: PUSH
67393: FOR_IN
67394: IFFALSE 67819
// begin tag := GetTag ( i ) + 1 ;
67396: LD_ADDR_VAR 0 9
67400: PUSH
67401: LD_VAR 0 4
67405: PPUSH
67406: CALL_OW 110
67410: PUSH
67411: LD_INT 1
67413: PLUS
67414: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
67415: LD_ADDR_VAR 0 7
67419: PUSH
67420: LD_VAR 0 4
67424: PPUSH
67425: CALL_OW 250
67429: PPUSH
67430: LD_VAR 0 4
67434: PPUSH
67435: CALL_OW 251
67439: PPUSH
67440: LD_INT 4
67442: PPUSH
67443: CALL 67016 0 3
67447: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
67448: LD_VAR 0 4
67452: PPUSH
67453: CALL_OW 247
67457: PUSH
67458: LD_INT 2
67460: EQUAL
67461: PUSH
67462: LD_VAR 0 7
67466: PUSH
67467: LD_INT 2
67469: GREATER
67470: AND
67471: PUSH
67472: LD_VAR 0 4
67476: PPUSH
67477: CALL_OW 264
67481: PUSH
67482: LD_VAR 0 10
67486: IN
67487: NOT
67488: AND
67489: IFFALSE 67528
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67491: LD_VAR 0 4
67495: PPUSH
67496: LD_VAR 0 7
67500: PUSH
67501: LD_INT 1
67503: ARRAY
67504: PUSH
67505: LD_INT 1
67507: ARRAY
67508: PPUSH
67509: LD_VAR 0 7
67513: PUSH
67514: LD_INT 1
67516: ARRAY
67517: PUSH
67518: LD_INT 2
67520: ARRAY
67521: PPUSH
67522: CALL_OW 116
67526: GO 67817
// if path > tag then
67528: LD_VAR 0 2
67532: PUSH
67533: LD_VAR 0 9
67537: GREATER
67538: IFFALSE 67746
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67540: LD_ADDR_VAR 0 6
67544: PUSH
67545: LD_VAR 0 5
67549: PPUSH
67550: LD_INT 91
67552: PUSH
67553: LD_VAR 0 4
67557: PUSH
67558: LD_INT 8
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: LIST
67565: PPUSH
67566: CALL_OW 72
67570: ST_TO_ADDR
// if nearEnemy then
67571: LD_VAR 0 6
67575: IFFALSE 67644
// begin if GetWeapon ( i ) = ru_time_lapser then
67577: LD_VAR 0 4
67581: PPUSH
67582: CALL_OW 264
67586: PUSH
67587: LD_INT 49
67589: EQUAL
67590: IFFALSE 67618
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67592: LD_VAR 0 4
67596: PPUSH
67597: LD_VAR 0 6
67601: PPUSH
67602: LD_VAR 0 4
67606: PPUSH
67607: CALL_OW 74
67611: PPUSH
67612: CALL_OW 112
67616: GO 67642
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67618: LD_VAR 0 4
67622: PPUSH
67623: LD_VAR 0 6
67627: PPUSH
67628: LD_VAR 0 4
67632: PPUSH
67633: CALL_OW 74
67637: PPUSH
67638: CALL 68892 0 2
// end else
67642: GO 67744
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67644: LD_VAR 0 4
67648: PPUSH
67649: LD_VAR 0 2
67653: PUSH
67654: LD_VAR 0 9
67658: ARRAY
67659: PUSH
67660: LD_INT 1
67662: ARRAY
67663: PPUSH
67664: LD_VAR 0 2
67668: PUSH
67669: LD_VAR 0 9
67673: ARRAY
67674: PUSH
67675: LD_INT 2
67677: ARRAY
67678: PPUSH
67679: CALL_OW 297
67683: PUSH
67684: LD_INT 6
67686: GREATER
67687: IFFALSE 67730
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67689: LD_VAR 0 4
67693: PPUSH
67694: LD_VAR 0 2
67698: PUSH
67699: LD_VAR 0 9
67703: ARRAY
67704: PUSH
67705: LD_INT 1
67707: ARRAY
67708: PPUSH
67709: LD_VAR 0 2
67713: PUSH
67714: LD_VAR 0 9
67718: ARRAY
67719: PUSH
67720: LD_INT 2
67722: ARRAY
67723: PPUSH
67724: CALL_OW 114
67728: GO 67744
// SetTag ( i , tag ) ;
67730: LD_VAR 0 4
67734: PPUSH
67735: LD_VAR 0 9
67739: PPUSH
67740: CALL_OW 109
// end else
67744: GO 67817
// if enemy then
67746: LD_VAR 0 5
67750: IFFALSE 67817
// begin if GetWeapon ( i ) = ru_time_lapser then
67752: LD_VAR 0 4
67756: PPUSH
67757: CALL_OW 264
67761: PUSH
67762: LD_INT 49
67764: EQUAL
67765: IFFALSE 67793
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67767: LD_VAR 0 4
67771: PPUSH
67772: LD_VAR 0 5
67776: PPUSH
67777: LD_VAR 0 4
67781: PPUSH
67782: CALL_OW 74
67786: PPUSH
67787: CALL_OW 112
67791: GO 67817
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67793: LD_VAR 0 4
67797: PPUSH
67798: LD_VAR 0 5
67802: PPUSH
67803: LD_VAR 0 4
67807: PPUSH
67808: CALL_OW 74
67812: PPUSH
67813: CALL 68892 0 2
// end ; end ;
67817: GO 67393
67819: POP
67820: POP
// end ;
67821: LD_VAR 0 3
67825: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67826: LD_INT 0
67828: PPUSH
67829: PPUSH
67830: PPUSH
// if not unit or IsInUnit ( unit ) then
67831: LD_VAR 0 1
67835: NOT
67836: PUSH
67837: LD_VAR 0 1
67841: PPUSH
67842: CALL_OW 310
67846: OR
67847: IFFALSE 67851
// exit ;
67849: GO 67942
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67851: LD_ADDR_VAR 0 4
67855: PUSH
67856: LD_VAR 0 1
67860: PPUSH
67861: CALL_OW 250
67865: PPUSH
67866: LD_VAR 0 2
67870: PPUSH
67871: LD_INT 1
67873: PPUSH
67874: CALL_OW 272
67878: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67879: LD_ADDR_VAR 0 5
67883: PUSH
67884: LD_VAR 0 1
67888: PPUSH
67889: CALL_OW 251
67893: PPUSH
67894: LD_VAR 0 2
67898: PPUSH
67899: LD_INT 1
67901: PPUSH
67902: CALL_OW 273
67906: ST_TO_ADDR
// if ValidHex ( x , y ) then
67907: LD_VAR 0 4
67911: PPUSH
67912: LD_VAR 0 5
67916: PPUSH
67917: CALL_OW 488
67921: IFFALSE 67942
// ComTurnXY ( unit , x , y ) ;
67923: LD_VAR 0 1
67927: PPUSH
67928: LD_VAR 0 4
67932: PPUSH
67933: LD_VAR 0 5
67937: PPUSH
67938: CALL_OW 118
// end ;
67942: LD_VAR 0 3
67946: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67947: LD_INT 0
67949: PPUSH
67950: PPUSH
// result := false ;
67951: LD_ADDR_VAR 0 3
67955: PUSH
67956: LD_INT 0
67958: ST_TO_ADDR
// if not units then
67959: LD_VAR 0 2
67963: NOT
67964: IFFALSE 67968
// exit ;
67966: GO 68013
// for i in units do
67968: LD_ADDR_VAR 0 4
67972: PUSH
67973: LD_VAR 0 2
67977: PUSH
67978: FOR_IN
67979: IFFALSE 68011
// if See ( side , i ) then
67981: LD_VAR 0 1
67985: PPUSH
67986: LD_VAR 0 4
67990: PPUSH
67991: CALL_OW 292
67995: IFFALSE 68009
// begin result := true ;
67997: LD_ADDR_VAR 0 3
68001: PUSH
68002: LD_INT 1
68004: ST_TO_ADDR
// exit ;
68005: POP
68006: POP
68007: GO 68013
// end ;
68009: GO 67978
68011: POP
68012: POP
// end ;
68013: LD_VAR 0 3
68017: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68018: LD_INT 0
68020: PPUSH
68021: PPUSH
68022: PPUSH
68023: PPUSH
// if not unit or not points then
68024: LD_VAR 0 1
68028: NOT
68029: PUSH
68030: LD_VAR 0 2
68034: NOT
68035: OR
68036: IFFALSE 68040
// exit ;
68038: GO 68130
// dist := 99999 ;
68040: LD_ADDR_VAR 0 5
68044: PUSH
68045: LD_INT 99999
68047: ST_TO_ADDR
// for i in points do
68048: LD_ADDR_VAR 0 4
68052: PUSH
68053: LD_VAR 0 2
68057: PUSH
68058: FOR_IN
68059: IFFALSE 68128
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68061: LD_ADDR_VAR 0 6
68065: PUSH
68066: LD_VAR 0 1
68070: PPUSH
68071: LD_VAR 0 4
68075: PUSH
68076: LD_INT 1
68078: ARRAY
68079: PPUSH
68080: LD_VAR 0 4
68084: PUSH
68085: LD_INT 2
68087: ARRAY
68088: PPUSH
68089: CALL_OW 297
68093: ST_TO_ADDR
// if tmpDist < dist then
68094: LD_VAR 0 6
68098: PUSH
68099: LD_VAR 0 5
68103: LESS
68104: IFFALSE 68126
// begin result := i ;
68106: LD_ADDR_VAR 0 3
68110: PUSH
68111: LD_VAR 0 4
68115: ST_TO_ADDR
// dist := tmpDist ;
68116: LD_ADDR_VAR 0 5
68120: PUSH
68121: LD_VAR 0 6
68125: ST_TO_ADDR
// end ; end ;
68126: GO 68058
68128: POP
68129: POP
// end ;
68130: LD_VAR 0 3
68134: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68135: LD_INT 0
68137: PPUSH
// uc_side := side ;
68138: LD_ADDR_OWVAR 20
68142: PUSH
68143: LD_VAR 0 1
68147: ST_TO_ADDR
// uc_nation := 3 ;
68148: LD_ADDR_OWVAR 21
68152: PUSH
68153: LD_INT 3
68155: ST_TO_ADDR
// vc_chassis := 25 ;
68156: LD_ADDR_OWVAR 37
68160: PUSH
68161: LD_INT 25
68163: ST_TO_ADDR
// vc_engine := engine_siberite ;
68164: LD_ADDR_OWVAR 39
68168: PUSH
68169: LD_INT 3
68171: ST_TO_ADDR
// vc_control := control_computer ;
68172: LD_ADDR_OWVAR 38
68176: PUSH
68177: LD_INT 3
68179: ST_TO_ADDR
// vc_weapon := 59 ;
68180: LD_ADDR_OWVAR 40
68184: PUSH
68185: LD_INT 59
68187: ST_TO_ADDR
// result := CreateVehicle ;
68188: LD_ADDR_VAR 0 5
68192: PUSH
68193: CALL_OW 45
68197: ST_TO_ADDR
// SetDir ( result , d ) ;
68198: LD_VAR 0 5
68202: PPUSH
68203: LD_VAR 0 4
68207: PPUSH
68208: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68212: LD_VAR 0 5
68216: PPUSH
68217: LD_VAR 0 2
68221: PPUSH
68222: LD_VAR 0 3
68226: PPUSH
68227: LD_INT 0
68229: PPUSH
68230: CALL_OW 48
// end ;
68234: LD_VAR 0 5
68238: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68239: LD_INT 0
68241: PPUSH
68242: PPUSH
68243: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68244: LD_ADDR_VAR 0 2
68248: PUSH
68249: LD_INT 0
68251: PUSH
68252: LD_INT 0
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68267: LD_VAR 0 1
68271: NOT
68272: PUSH
68273: LD_VAR 0 1
68277: PPUSH
68278: CALL_OW 264
68282: PUSH
68283: LD_INT 12
68285: PUSH
68286: LD_INT 51
68288: PUSH
68289: LD_INT 32
68291: PUSH
68292: LD_INT 89
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: IN
68301: NOT
68302: OR
68303: IFFALSE 68307
// exit ;
68305: GO 68405
// for i := 1 to 3 do
68307: LD_ADDR_VAR 0 3
68311: PUSH
68312: DOUBLE
68313: LD_INT 1
68315: DEC
68316: ST_TO_ADDR
68317: LD_INT 3
68319: PUSH
68320: FOR_TO
68321: IFFALSE 68403
// begin tmp := GetCargo ( cargo , i ) ;
68323: LD_ADDR_VAR 0 4
68327: PUSH
68328: LD_VAR 0 1
68332: PPUSH
68333: LD_VAR 0 3
68337: PPUSH
68338: CALL_OW 289
68342: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68343: LD_ADDR_VAR 0 2
68347: PUSH
68348: LD_VAR 0 2
68352: PPUSH
68353: LD_VAR 0 3
68357: PPUSH
68358: LD_VAR 0 4
68362: PPUSH
68363: CALL_OW 1
68367: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68368: LD_ADDR_VAR 0 2
68372: PUSH
68373: LD_VAR 0 2
68377: PPUSH
68378: LD_INT 4
68380: PPUSH
68381: LD_VAR 0 2
68385: PUSH
68386: LD_INT 4
68388: ARRAY
68389: PUSH
68390: LD_VAR 0 4
68394: PLUS
68395: PPUSH
68396: CALL_OW 1
68400: ST_TO_ADDR
// end ;
68401: GO 68320
68403: POP
68404: POP
// end ;
68405: LD_VAR 0 2
68409: RET
// export function Length ( array ) ; begin
68410: LD_INT 0
68412: PPUSH
// result := array + 0 ;
68413: LD_ADDR_VAR 0 2
68417: PUSH
68418: LD_VAR 0 1
68422: PUSH
68423: LD_INT 0
68425: PLUS
68426: ST_TO_ADDR
// end ;
68427: LD_VAR 0 2
68431: RET
// export function PrepareArray ( array ) ; begin
68432: LD_INT 0
68434: PPUSH
// result := array diff 0 ;
68435: LD_ADDR_VAR 0 2
68439: PUSH
68440: LD_VAR 0 1
68444: PUSH
68445: LD_INT 0
68447: DIFF
68448: ST_TO_ADDR
// if not result [ 1 ] then
68449: LD_VAR 0 2
68453: PUSH
68454: LD_INT 1
68456: ARRAY
68457: NOT
68458: IFFALSE 68478
// result := Delete ( result , 1 ) ;
68460: LD_ADDR_VAR 0 2
68464: PUSH
68465: LD_VAR 0 2
68469: PPUSH
68470: LD_INT 1
68472: PPUSH
68473: CALL_OW 3
68477: ST_TO_ADDR
// end ;
68478: LD_VAR 0 2
68482: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68483: LD_INT 0
68485: PPUSH
68486: PPUSH
68487: PPUSH
68488: PPUSH
// sibRocketRange := 25 ;
68489: LD_ADDR_VAR 0 6
68493: PUSH
68494: LD_INT 25
68496: ST_TO_ADDR
// result := false ;
68497: LD_ADDR_VAR 0 4
68501: PUSH
68502: LD_INT 0
68504: ST_TO_ADDR
// for i := 0 to 5 do
68505: LD_ADDR_VAR 0 5
68509: PUSH
68510: DOUBLE
68511: LD_INT 0
68513: DEC
68514: ST_TO_ADDR
68515: LD_INT 5
68517: PUSH
68518: FOR_TO
68519: IFFALSE 68586
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68521: LD_VAR 0 1
68525: PPUSH
68526: LD_VAR 0 5
68530: PPUSH
68531: LD_VAR 0 6
68535: PPUSH
68536: CALL_OW 272
68540: PPUSH
68541: LD_VAR 0 2
68545: PPUSH
68546: LD_VAR 0 5
68550: PPUSH
68551: LD_VAR 0 6
68555: PPUSH
68556: CALL_OW 273
68560: PPUSH
68561: LD_VAR 0 3
68565: PPUSH
68566: CALL_OW 309
68570: IFFALSE 68584
// begin result := true ;
68572: LD_ADDR_VAR 0 4
68576: PUSH
68577: LD_INT 1
68579: ST_TO_ADDR
// exit ;
68580: POP
68581: POP
68582: GO 68588
// end ;
68584: GO 68518
68586: POP
68587: POP
// end ;
68588: LD_VAR 0 4
68592: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68593: LD_INT 0
68595: PPUSH
68596: PPUSH
68597: PPUSH
// if btype = b_depot then
68598: LD_VAR 0 2
68602: PUSH
68603: LD_INT 0
68605: EQUAL
68606: IFFALSE 68618
// begin result := true ;
68608: LD_ADDR_VAR 0 3
68612: PUSH
68613: LD_INT 1
68615: ST_TO_ADDR
// exit ;
68616: GO 68734
// end ; pom := GetBase ( depot ) ;
68618: LD_ADDR_VAR 0 4
68622: PUSH
68623: LD_VAR 0 1
68627: PPUSH
68628: CALL_OW 274
68632: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68633: LD_ADDR_VAR 0 5
68637: PUSH
68638: LD_VAR 0 2
68642: PPUSH
68643: LD_VAR 0 1
68647: PPUSH
68648: CALL_OW 248
68652: PPUSH
68653: CALL_OW 450
68657: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68658: LD_ADDR_VAR 0 3
68662: PUSH
68663: LD_VAR 0 4
68667: PPUSH
68668: LD_INT 1
68670: PPUSH
68671: CALL_OW 275
68675: PUSH
68676: LD_VAR 0 5
68680: PUSH
68681: LD_INT 1
68683: ARRAY
68684: GREATEREQUAL
68685: PUSH
68686: LD_VAR 0 4
68690: PPUSH
68691: LD_INT 2
68693: PPUSH
68694: CALL_OW 275
68698: PUSH
68699: LD_VAR 0 5
68703: PUSH
68704: LD_INT 2
68706: ARRAY
68707: GREATEREQUAL
68708: AND
68709: PUSH
68710: LD_VAR 0 4
68714: PPUSH
68715: LD_INT 3
68717: PPUSH
68718: CALL_OW 275
68722: PUSH
68723: LD_VAR 0 5
68727: PUSH
68728: LD_INT 3
68730: ARRAY
68731: GREATEREQUAL
68732: AND
68733: ST_TO_ADDR
// end ;
68734: LD_VAR 0 3
68738: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68739: LD_INT 0
68741: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68742: LD_VAR 0 1
68746: PPUSH
68747: LD_VAR 0 2
68751: PPUSH
68752: LD_INT 0
68754: PPUSH
68755: LD_INT 0
68757: PPUSH
68758: LD_INT 1
68760: PPUSH
68761: LD_INT 0
68763: PPUSH
68764: CALL_OW 587
// end ;
68768: LD_VAR 0 3
68772: RET
// export function CenterOnNow ( unit ) ; begin
68773: LD_INT 0
68775: PPUSH
// result := IsInUnit ( unit ) ;
68776: LD_ADDR_VAR 0 2
68780: PUSH
68781: LD_VAR 0 1
68785: PPUSH
68786: CALL_OW 310
68790: ST_TO_ADDR
// if not result then
68791: LD_VAR 0 2
68795: NOT
68796: IFFALSE 68808
// result := unit ;
68798: LD_ADDR_VAR 0 2
68802: PUSH
68803: LD_VAR 0 1
68807: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68808: LD_VAR 0 1
68812: PPUSH
68813: CALL_OW 87
// end ;
68817: LD_VAR 0 2
68821: RET
// export function ComMoveHex ( unit , hex ) ; begin
68822: LD_INT 0
68824: PPUSH
// if not hex then
68825: LD_VAR 0 2
68829: NOT
68830: IFFALSE 68834
// exit ;
68832: GO 68887
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68834: LD_VAR 0 2
68838: PUSH
68839: LD_INT 1
68841: ARRAY
68842: PPUSH
68843: LD_VAR 0 2
68847: PUSH
68848: LD_INT 2
68850: ARRAY
68851: PPUSH
68852: CALL_OW 428
68856: IFFALSE 68860
// exit ;
68858: GO 68887
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68860: LD_VAR 0 1
68864: PPUSH
68865: LD_VAR 0 2
68869: PUSH
68870: LD_INT 1
68872: ARRAY
68873: PPUSH
68874: LD_VAR 0 2
68878: PUSH
68879: LD_INT 2
68881: ARRAY
68882: PPUSH
68883: CALL_OW 111
// end ;
68887: LD_VAR 0 3
68891: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68892: LD_INT 0
68894: PPUSH
68895: PPUSH
68896: PPUSH
// if not unit or not enemy then
68897: LD_VAR 0 1
68901: NOT
68902: PUSH
68903: LD_VAR 0 2
68907: NOT
68908: OR
68909: IFFALSE 68913
// exit ;
68911: GO 69037
// x := GetX ( enemy ) ;
68913: LD_ADDR_VAR 0 4
68917: PUSH
68918: LD_VAR 0 2
68922: PPUSH
68923: CALL_OW 250
68927: ST_TO_ADDR
// y := GetY ( enemy ) ;
68928: LD_ADDR_VAR 0 5
68932: PUSH
68933: LD_VAR 0 2
68937: PPUSH
68938: CALL_OW 251
68942: ST_TO_ADDR
// if ValidHex ( x , y ) then
68943: LD_VAR 0 4
68947: PPUSH
68948: LD_VAR 0 5
68952: PPUSH
68953: CALL_OW 488
68957: IFFALSE 69037
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
68959: LD_VAR 0 2
68963: PPUSH
68964: CALL_OW 247
68968: PUSH
68969: LD_INT 3
68971: PUSH
68972: LD_INT 2
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: IN
68979: PUSH
68980: LD_VAR 0 1
68984: PPUSH
68985: CALL_OW 255
68989: PPUSH
68990: LD_VAR 0 2
68994: PPUSH
68995: CALL_OW 292
68999: OR
69000: IFFALSE 69018
// ComAttackUnit ( unit , enemy ) else
69002: LD_VAR 0 1
69006: PPUSH
69007: LD_VAR 0 2
69011: PPUSH
69012: CALL_OW 115
69016: GO 69037
// ComAgressiveMove ( unit , x , y ) ;
69018: LD_VAR 0 1
69022: PPUSH
69023: LD_VAR 0 4
69027: PPUSH
69028: LD_VAR 0 5
69032: PPUSH
69033: CALL_OW 114
// end ;
69037: LD_VAR 0 3
69041: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69042: LD_INT 0
69044: PPUSH
69045: PPUSH
69046: PPUSH
// list := AreaToList ( area , 0 ) ;
69047: LD_ADDR_VAR 0 5
69051: PUSH
69052: LD_VAR 0 1
69056: PPUSH
69057: LD_INT 0
69059: PPUSH
69060: CALL_OW 517
69064: ST_TO_ADDR
// if not list then
69065: LD_VAR 0 5
69069: NOT
69070: IFFALSE 69074
// exit ;
69072: GO 69204
// if all then
69074: LD_VAR 0 2
69078: IFFALSE 69166
// begin for i := 1 to list [ 1 ] do
69080: LD_ADDR_VAR 0 4
69084: PUSH
69085: DOUBLE
69086: LD_INT 1
69088: DEC
69089: ST_TO_ADDR
69090: LD_VAR 0 5
69094: PUSH
69095: LD_INT 1
69097: ARRAY
69098: PUSH
69099: FOR_TO
69100: IFFALSE 69162
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69102: LD_ADDR_VAR 0 3
69106: PUSH
69107: LD_VAR 0 3
69111: PPUSH
69112: LD_VAR 0 3
69116: PUSH
69117: LD_INT 1
69119: PLUS
69120: PPUSH
69121: LD_VAR 0 5
69125: PUSH
69126: LD_INT 1
69128: ARRAY
69129: PUSH
69130: LD_VAR 0 4
69134: ARRAY
69135: PUSH
69136: LD_VAR 0 5
69140: PUSH
69141: LD_INT 2
69143: ARRAY
69144: PUSH
69145: LD_VAR 0 4
69149: ARRAY
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PPUSH
69155: CALL_OW 1
69159: ST_TO_ADDR
69160: GO 69099
69162: POP
69163: POP
// exit ;
69164: GO 69204
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69166: LD_ADDR_VAR 0 3
69170: PUSH
69171: LD_VAR 0 5
69175: PUSH
69176: LD_INT 1
69178: ARRAY
69179: PUSH
69180: LD_INT 1
69182: ARRAY
69183: PUSH
69184: LD_VAR 0 5
69188: PUSH
69189: LD_INT 2
69191: ARRAY
69192: PUSH
69193: LD_INT 1
69195: ARRAY
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: EMPTY
69202: LIST
69203: ST_TO_ADDR
// end ;
69204: LD_VAR 0 3
69208: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69209: LD_INT 0
69211: PPUSH
69212: PPUSH
// list := AreaToList ( area , 0 ) ;
69213: LD_ADDR_VAR 0 4
69217: PUSH
69218: LD_VAR 0 1
69222: PPUSH
69223: LD_INT 0
69225: PPUSH
69226: CALL_OW 517
69230: ST_TO_ADDR
// if not list then
69231: LD_VAR 0 4
69235: NOT
69236: IFFALSE 69240
// exit ;
69238: GO 69281
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69240: LD_ADDR_VAR 0 3
69244: PUSH
69245: LD_VAR 0 4
69249: PUSH
69250: LD_INT 1
69252: ARRAY
69253: PUSH
69254: LD_INT 1
69256: ARRAY
69257: PUSH
69258: LD_VAR 0 4
69262: PUSH
69263: LD_INT 2
69265: ARRAY
69266: PUSH
69267: LD_INT 1
69269: ARRAY
69270: PUSH
69271: LD_VAR 0 2
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: LIST
69280: ST_TO_ADDR
// end ;
69281: LD_VAR 0 3
69285: RET
// export function First ( array ) ; begin
69286: LD_INT 0
69288: PPUSH
// if not array then
69289: LD_VAR 0 1
69293: NOT
69294: IFFALSE 69298
// exit ;
69296: GO 69312
// result := array [ 1 ] ;
69298: LD_ADDR_VAR 0 2
69302: PUSH
69303: LD_VAR 0 1
69307: PUSH
69308: LD_INT 1
69310: ARRAY
69311: ST_TO_ADDR
// end ;
69312: LD_VAR 0 2
69316: RET
// export function Last ( array ) ; begin
69317: LD_INT 0
69319: PPUSH
// if not array then
69320: LD_VAR 0 1
69324: NOT
69325: IFFALSE 69329
// exit ;
69327: GO 69345
// result := array [ array ] ;
69329: LD_ADDR_VAR 0 2
69333: PUSH
69334: LD_VAR 0 1
69338: PUSH
69339: LD_VAR 0 1
69343: ARRAY
69344: ST_TO_ADDR
// end ;
69345: LD_VAR 0 2
69349: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69350: LD_INT 0
69352: PPUSH
69353: PPUSH
// result := [ ] ;
69354: LD_ADDR_VAR 0 5
69358: PUSH
69359: EMPTY
69360: ST_TO_ADDR
// if not array then
69361: LD_VAR 0 1
69365: NOT
69366: IFFALSE 69370
// exit ;
69368: GO 69482
// for i := 1 to array do
69370: LD_ADDR_VAR 0 6
69374: PUSH
69375: DOUBLE
69376: LD_INT 1
69378: DEC
69379: ST_TO_ADDR
69380: LD_VAR 0 1
69384: PUSH
69385: FOR_TO
69386: IFFALSE 69480
// if array [ i ] [ index ] = value then
69388: LD_VAR 0 1
69392: PUSH
69393: LD_VAR 0 6
69397: ARRAY
69398: PUSH
69399: LD_VAR 0 2
69403: ARRAY
69404: PUSH
69405: LD_VAR 0 3
69409: EQUAL
69410: IFFALSE 69478
// begin if indexColumn then
69412: LD_VAR 0 4
69416: IFFALSE 69452
// result := Join ( result , array [ i ] [ indexColumn ] ) else
69418: LD_ADDR_VAR 0 5
69422: PUSH
69423: LD_VAR 0 5
69427: PPUSH
69428: LD_VAR 0 1
69432: PUSH
69433: LD_VAR 0 6
69437: ARRAY
69438: PUSH
69439: LD_VAR 0 4
69443: ARRAY
69444: PPUSH
69445: CALL 64670 0 2
69449: ST_TO_ADDR
69450: GO 69478
// result := Join ( result , array [ i ] ) ;
69452: LD_ADDR_VAR 0 5
69456: PUSH
69457: LD_VAR 0 5
69461: PPUSH
69462: LD_VAR 0 1
69466: PUSH
69467: LD_VAR 0 6
69471: ARRAY
69472: PPUSH
69473: CALL 64670 0 2
69477: ST_TO_ADDR
// end ;
69478: GO 69385
69480: POP
69481: POP
// end ;
69482: LD_VAR 0 5
69486: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
69487: LD_INT 0
69489: PPUSH
// if not vehicles or not parkingPoint then
69490: LD_VAR 0 1
69494: NOT
69495: PUSH
69496: LD_VAR 0 2
69500: NOT
69501: OR
69502: IFFALSE 69506
// exit ;
69504: GO 69604
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
69506: LD_ADDR_VAR 0 1
69510: PUSH
69511: LD_VAR 0 1
69515: PPUSH
69516: LD_INT 50
69518: PUSH
69519: EMPTY
69520: LIST
69521: PUSH
69522: LD_INT 3
69524: PUSH
69525: LD_INT 92
69527: PUSH
69528: LD_VAR 0 2
69532: PUSH
69533: LD_INT 1
69535: ARRAY
69536: PUSH
69537: LD_VAR 0 2
69541: PUSH
69542: LD_INT 2
69544: ARRAY
69545: PUSH
69546: LD_INT 8
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PPUSH
69563: CALL_OW 72
69567: ST_TO_ADDR
// if not vehicles then
69568: LD_VAR 0 1
69572: NOT
69573: IFFALSE 69577
// exit ;
69575: GO 69604
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69577: LD_VAR 0 1
69581: PPUSH
69582: LD_VAR 0 2
69586: PUSH
69587: LD_INT 1
69589: ARRAY
69590: PPUSH
69591: LD_VAR 0 2
69595: PUSH
69596: LD_INT 2
69598: ARRAY
69599: PPUSH
69600: CALL_OW 111
// end ;
69604: LD_VAR 0 3
69608: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69609: LD_INT 0
69611: PPUSH
69612: PPUSH
69613: PPUSH
// if not side or not area then
69614: LD_VAR 0 1
69618: NOT
69619: PUSH
69620: LD_VAR 0 2
69624: NOT
69625: OR
69626: IFFALSE 69630
// exit ;
69628: GO 69749
// tmp := AreaToList ( area , 0 ) ;
69630: LD_ADDR_VAR 0 5
69634: PUSH
69635: LD_VAR 0 2
69639: PPUSH
69640: LD_INT 0
69642: PPUSH
69643: CALL_OW 517
69647: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69648: LD_ADDR_VAR 0 4
69652: PUSH
69653: DOUBLE
69654: LD_INT 1
69656: DEC
69657: ST_TO_ADDR
69658: LD_VAR 0 5
69662: PUSH
69663: LD_INT 1
69665: ARRAY
69666: PUSH
69667: FOR_TO
69668: IFFALSE 69747
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69670: LD_VAR 0 5
69674: PUSH
69675: LD_INT 1
69677: ARRAY
69678: PUSH
69679: LD_VAR 0 4
69683: ARRAY
69684: PPUSH
69685: LD_VAR 0 5
69689: PUSH
69690: LD_INT 2
69692: ARRAY
69693: PUSH
69694: LD_VAR 0 4
69698: ARRAY
69699: PPUSH
69700: CALL_OW 351
69704: IFFALSE 69745
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69706: LD_VAR 0 5
69710: PUSH
69711: LD_INT 1
69713: ARRAY
69714: PUSH
69715: LD_VAR 0 4
69719: ARRAY
69720: PPUSH
69721: LD_VAR 0 5
69725: PUSH
69726: LD_INT 2
69728: ARRAY
69729: PUSH
69730: LD_VAR 0 4
69734: ARRAY
69735: PPUSH
69736: LD_VAR 0 1
69740: PPUSH
69741: CALL_OW 244
// end ;
69745: GO 69667
69747: POP
69748: POP
// end ;
69749: LD_VAR 0 3
69753: RET
