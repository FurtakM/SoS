// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 909 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2064 0 0
// PrepareHeroes ;
  82: CALL 1089 0 0
// PrepareRandoms ;
  86: CALL 3427 0 0
// Action ;
  90: CALL 5217 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 806
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
 581: LD_STRING enableBioCharacter(BIO_HUGH)
 583: PPUSH
 584: CALL_OW 559
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 588: LD_EXP 3
 592: PPUSH
 593: LD_STRING Lisa
 595: PPUSH
 596: LD_EXP 22
 600: PPUSH
 601: CALL 4223 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 605: LD_EXP 8
 609: PPUSH
 610: LD_STRING Brown
 612: PPUSH
 613: LD_EXP 22
 617: PPUSH
 618: CALL 4223 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 622: LD_EXP 4
 626: PPUSH
 627: LD_STRING Donaldson
 629: PPUSH
 630: LD_EXP 22
 634: PPUSH
 635: CALL 4223 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 639: LD_EXP 5
 643: PPUSH
 644: LD_STRING Bobby
 646: PPUSH
 647: LD_EXP 22
 651: PPUSH
 652: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 656: LD_EXP 6
 660: PPUSH
 661: LD_STRING Cyrus
 663: PPUSH
 664: LD_EXP 22
 668: PPUSH
 669: CALL 4223 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 673: LD_EXP 7
 677: PPUSH
 678: LD_STRING Denis
 680: PPUSH
 681: LD_EXP 22
 685: PPUSH
 686: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 690: LD_EXP 9
 694: PPUSH
 695: LD_STRING Gladstone
 697: PPUSH
 698: LD_EXP 22
 702: PPUSH
 703: CALL 4223 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 707: LD_EXP 10
 711: PPUSH
 712: LD_STRING Houten
 714: PPUSH
 715: LD_EXP 22
 719: PPUSH
 720: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 724: LD_EXP 11
 728: PPUSH
 729: LD_STRING Cornel
 731: PPUSH
 732: LD_EXP 22
 736: PPUSH
 737: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 741: LD_EXP 12
 745: PPUSH
 746: LD_STRING Gary
 748: PPUSH
 749: LD_EXP 22
 753: PPUSH
 754: CALL 4223 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 758: LD_EXP 13
 762: PPUSH
 763: LD_STRING Frank
 765: PPUSH
 766: LD_EXP 22
 770: PPUSH
 771: CALL 4223 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 775: LD_EXP 14
 779: PPUSH
 780: LD_STRING Kikuchi
 782: PPUSH
 783: LD_EXP 22
 787: PPUSH
 788: CALL 4223 0 3
// SaveCargos ;
 792: CALL 809 0 0
// ChangeMap ( 13 , %_cont ) ;
 796: LD_INT 13
 798: PPUSH
 799: LD_STRING %_cont
 801: PPUSH
 802: CALL_OW 340
// end ;
 806: PPOPN 2
 808: END
// export function SaveCargos ; var i ; begin
 809: LD_INT 0
 811: PPUSH
 812: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 813: LD_ADDR_VAR 0 2
 817: PUSH
 818: LD_INT 2
 820: PPUSH
 821: LD_INT 22
 823: PUSH
 824: LD_INT 1
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 33
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 34
 843: PUSH
 844: LD_INT 12
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PPUSH
 856: CALL_OW 70
 860: PUSH
 861: FOR_IN
 862: IFFALSE 890
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 864: LD_ADDR_EXP 20
 868: PUSH
 869: LD_EXP 20
 873: PUSH
 874: LD_VAR 0 2
 878: PPUSH
 879: CALL 67463 0 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: ADD
 887: ST_TO_ADDR
 888: GO 861
 890: POP
 891: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 892: LD_EXP 20
 896: PPUSH
 897: LD_STRING 13_ResourcesInCargo13_1
 899: PPUSH
 900: CALL_OW 39
// end ;
 904: LD_VAR 0 1
 908: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 909: LD_INT 0
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 917: LD_ADDR_VAR 0 2
 921: PUSH
 922: LD_STRING 10_EpsilonEnv
 924: PPUSH
 925: EMPTY
 926: PPUSH
 927: CALL_OW 30
 931: ST_TO_ADDR
// if not tmp then
 932: LD_VAR 0 2
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1084
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 941: LD_ADDR_VAR 0 3
 945: PUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 353
 953: ST_TO_ADDR
// if not list then
 954: LD_VAR 0 3
 958: NOT
 959: IFFALSE 963
// exit ;
 961: GO 1084
// for i in list do
 963: LD_ADDR_VAR 0 4
 967: PUSH
 968: LD_VAR 0 3
 972: PUSH
 973: FOR_IN
 974: IFFALSE 1082
// begin exist := false ;
 976: LD_ADDR_VAR 0 6
 980: PUSH
 981: LD_INT 0
 983: ST_TO_ADDR
// for j in tmp do
 984: LD_ADDR_VAR 0 5
 988: PUSH
 989: LD_VAR 0 2
 993: PUSH
 994: FOR_IN
 995: IFFALSE 1049
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 997: LD_VAR 0 4
1001: PUSH
1002: LD_INT 1
1004: ARRAY
1005: PUSH
1006: LD_VAR 0 5
1010: PUSH
1011: LD_INT 1
1013: ARRAY
1014: EQUAL
1015: PUSH
1016: LD_VAR 0 4
1020: PUSH
1021: LD_INT 2
1023: ARRAY
1024: PUSH
1025: LD_VAR 0 5
1029: PUSH
1030: LD_INT 2
1032: ARRAY
1033: EQUAL
1034: AND
1035: IFFALSE 1047
// begin exist := true ;
1037: LD_ADDR_VAR 0 6
1041: PUSH
1042: LD_INT 1
1044: ST_TO_ADDR
// break ;
1045: GO 1049
// end ;
1047: GO 994
1049: POP
1050: POP
// if not exist then
1051: LD_VAR 0 6
1055: NOT
1056: IFFALSE 1080
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1058: LD_VAR 0 4
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 4
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 347
// end ;
1080: GO 973
1082: POP
1083: POP
// end ; end_of_file
1084: LD_VAR 0 1
1088: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1089: LD_INT 0
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1098: LD_ADDR_VAR 0 4
1102: PUSH
1103: LD_INT 22
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 23
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 30
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 69
1160: ST_TO_ADDR
// if tmp then
1161: LD_VAR 0 4
1165: IFFALSE 1287
// begin x := GetX ( tmp [ 1 ] ) ;
1167: LD_ADDR_VAR 0 5
1171: PUSH
1172: LD_VAR 0 4
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: CALL_OW 250
1185: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1186: LD_ADDR_VAR 0 6
1190: PUSH
1191: LD_VAR 0 4
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: CALL_OW 251
1204: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1205: LD_VAR 0 4
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: LD_STRING epsilon
1216: PPUSH
1217: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1221: LD_ADDR_VAR 0 7
1225: PUSH
1226: LD_VAR 0 4
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PPUSH
1235: CALL_OW 274
1239: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1240: LD_VAR 0 7
1244: PPUSH
1245: LD_INT 1
1247: PPUSH
1248: LD_INT 3000
1250: PPUSH
1251: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1255: LD_VAR 0 7
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: LD_INT 500
1265: PPUSH
1266: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1270: LD_VAR 0 7
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 200
1280: PPUSH
1281: CALL_OW 277
// end else
1285: GO 1303
// begin x := 104 ;
1287: LD_ADDR_VAR 0 5
1291: PUSH
1292: LD_INT 104
1294: ST_TO_ADDR
// y := 32 ;
1295: LD_ADDR_VAR 0 6
1299: PUSH
1300: LD_INT 32
1302: ST_TO_ADDR
// end ; uc_side := 1 ;
1303: LD_ADDR_OWVAR 20
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1311: LD_ADDR_EXP 1
1315: PUSH
1316: LD_STRING JMM
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 3697 0 2
1326: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1327: LD_ADDR_EXP 3
1331: PUSH
1332: LD_STRING Lisa
1334: PPUSH
1335: LD_INT 1
1337: PPUSH
1338: CALL 3697 0 2
1342: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1343: LD_ADDR_EXP 4
1347: PUSH
1348: LD_STRING Donaldson
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 3697 0 2
1358: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1359: LD_ADDR_EXP 5
1363: PUSH
1364: LD_STRING Bobby
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL 3697 0 2
1374: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1375: LD_ADDR_EXP 6
1379: PUSH
1380: LD_STRING Cyrus
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL 3697 0 2
1390: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1391: LD_ADDR_EXP 7
1395: PUSH
1396: LD_STRING Denis
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: CALL 3697 0 2
1406: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1407: LD_ADDR_EXP 8
1411: PUSH
1412: LD_STRING Brown
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: CALL 3697 0 2
1422: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1423: LD_ADDR_EXP 9
1427: PUSH
1428: LD_STRING Gladstone
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: CALL 3697 0 2
1438: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1439: LD_ADDR_EXP 10
1443: PUSH
1444: LD_STRING Houten
1446: PPUSH
1447: LD_INT 1
1449: PPUSH
1450: CALL 3697 0 2
1454: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1455: LD_ADDR_EXP 11
1459: PUSH
1460: LD_STRING Cornell
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL 3697 0 2
1470: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1471: LD_ADDR_EXP 12
1475: PUSH
1476: LD_STRING Gary
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL 3697 0 2
1486: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1487: LD_ADDR_EXP 13
1491: PUSH
1492: LD_STRING Frank
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL 3697 0 2
1502: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1503: LD_ADDR_EXP 14
1507: PUSH
1508: LD_STRING Kikuchi
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL 3697 0 2
1518: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1519: LD_ADDR_EXP 15
1523: PUSH
1524: LD_STRING Stevens
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL 3697 0 2
1534: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1535: LD_ADDR_EXP 2
1539: PUSH
1540: LD_STRING Powell
1542: PPUSH
1543: LD_INT 0
1545: PPUSH
1546: CALL 3697 0 2
1550: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_VAR 0 5
1560: PPUSH
1561: LD_VAR 0 6
1565: PPUSH
1566: LD_INT 4
1568: PPUSH
1569: LD_INT 0
1571: PPUSH
1572: CALL 3870 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1576: LD_EXP 15
1580: PPUSH
1581: LD_VAR 0 5
1585: PPUSH
1586: LD_VAR 0 6
1590: PPUSH
1591: LD_INT 4
1593: PPUSH
1594: LD_INT 0
1596: PPUSH
1597: CALL 3870 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1601: LD_EXP 3
1605: PPUSH
1606: LD_VAR 0 5
1610: PPUSH
1611: LD_VAR 0 6
1615: PPUSH
1616: LD_INT 35
1618: PPUSH
1619: LD_INT 0
1621: PPUSH
1622: CALL 3870 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1626: LD_EXP 4
1630: PPUSH
1631: LD_VAR 0 5
1635: PPUSH
1636: LD_VAR 0 6
1640: PPUSH
1641: LD_INT 35
1643: PPUSH
1644: LD_INT 0
1646: PPUSH
1647: CALL 3870 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1651: LD_EXP 5
1655: PPUSH
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_VAR 0 6
1665: PPUSH
1666: LD_INT 35
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: CALL 3870 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_VAR 0 5
1685: PPUSH
1686: LD_VAR 0 6
1690: PPUSH
1691: LD_INT 35
1693: PPUSH
1694: LD_INT 0
1696: PPUSH
1697: CALL 3870 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1701: LD_EXP 7
1705: PPUSH
1706: LD_VAR 0 5
1710: PPUSH
1711: LD_VAR 0 6
1715: PPUSH
1716: LD_INT 35
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL 3870 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_VAR 0 5
1735: PPUSH
1736: LD_VAR 0 6
1740: PPUSH
1741: LD_INT 35
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL 3870 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1751: LD_EXP 9
1755: PPUSH
1756: LD_VAR 0 5
1760: PPUSH
1761: LD_VAR 0 6
1765: PPUSH
1766: LD_INT 35
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL 3870 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1776: LD_EXP 10
1780: PPUSH
1781: LD_VAR 0 5
1785: PPUSH
1786: LD_VAR 0 6
1790: PPUSH
1791: LD_INT 35
1793: PPUSH
1794: LD_INT 0
1796: PPUSH
1797: CALL 3870 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1801: LD_EXP 11
1805: PPUSH
1806: LD_VAR 0 5
1810: PPUSH
1811: LD_VAR 0 6
1815: PPUSH
1816: LD_INT 35
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL 3870 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1826: LD_EXP 12
1830: PPUSH
1831: LD_VAR 0 5
1835: PPUSH
1836: LD_VAR 0 6
1840: PPUSH
1841: LD_INT 35
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL 3870 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1851: LD_EXP 13
1855: PPUSH
1856: LD_VAR 0 5
1860: PPUSH
1861: LD_VAR 0 6
1865: PPUSH
1866: LD_INT 35
1868: PPUSH
1869: LD_INT 0
1871: PPUSH
1872: CALL 3870 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1876: LD_EXP 14
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: LD_VAR 0 6
1890: PPUSH
1891: LD_INT 35
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL 3870 0 5
// SetClass ( JMM , 1 ) ;
1901: LD_EXP 1
1905: PPUSH
1906: LD_INT 1
1908: PPUSH
1909: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1913: LD_ADDR_EXP 16
1917: PUSH
1918: LD_STRING 12_other_survivors
1920: PPUSH
1921: CALL_OW 31
1925: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1926: LD_ADDR_EXP 17
1930: PUSH
1931: LD_STRING 12_others
1933: PPUSH
1934: CALL_OW 31
1938: ST_TO_ADDR
// for i in others11 do
1939: LD_ADDR_VAR 0 2
1943: PUSH
1944: LD_EXP 17
1948: PUSH
1949: FOR_IN
1950: IFFALSE 1997
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 4
1961: PUSH
1962: LD_INT 1
1964: ARRAY
1965: PPUSH
1966: CALL_OW 250
1970: PPUSH
1971: LD_VAR 0 4
1975: PUSH
1976: LD_INT 1
1978: ARRAY
1979: PPUSH
1980: CALL_OW 251
1984: PPUSH
1985: LD_INT 15
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL 3870 0 5
1995: GO 1949
1997: POP
1998: POP
// for i in others12 do
1999: LD_ADDR_VAR 0 2
2003: PUSH
2004: LD_EXP 16
2008: PUSH
2009: FOR_IN
2010: IFFALSE 2057
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2012: LD_VAR 0 2
2016: PPUSH
2017: LD_VAR 0 4
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PPUSH
2026: CALL_OW 250
2030: PPUSH
2031: LD_VAR 0 4
2035: PUSH
2036: LD_INT 1
2038: ARRAY
2039: PPUSH
2040: CALL_OW 251
2044: PPUSH
2045: LD_INT 15
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL 3870 0 5
2055: GO 2009
2057: POP
2058: POP
// end ;
2059: LD_VAR 0 1
2063: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2064: LD_INT 0
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
2070: PPUSH
2071: PPUSH
2072: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2073: LD_INT 113
2075: PPUSH
2076: LD_INT 50
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL_OW 441
// SetResourceVisibility ( 99 , 19 , 1 ) ;
2086: LD_INT 99
2088: PPUSH
2089: LD_INT 19
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2099: LD_INT 43
2101: PPUSH
2102: LD_INT 79
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2112: LD_INT 43
2114: PPUSH
2115: LD_INT 68
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2125: LD_INT 99
2127: PPUSH
2128: LD_INT 114
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2138: LD_INT 103
2140: PPUSH
2141: LD_INT 114
2143: PPUSH
2144: LD_INT 1
2146: PPUSH
2147: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2151: LD_INT 152
2153: PPUSH
2154: LD_INT 85
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2164: LD_INT 156
2166: PPUSH
2167: LD_INT 92
2169: PPUSH
2170: LD_INT 1
2172: PPUSH
2173: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: LD_STRING 10_EpsilonBase
2184: PPUSH
2185: EMPTY
2186: PPUSH
2187: CALL_OW 30
2191: ST_TO_ADDR
// if not blist then
2192: LD_VAR 0 2
2196: NOT
2197: IFFALSE 2201
// exit ;
2199: GO 3422
// for i in blist do
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: LD_VAR 0 2
2210: PUSH
2211: FOR_IN
2212: IFFALSE 2254
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2214: LD_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PUSH
2223: LD_INT 0
2225: EQUAL
2226: PUSH
2227: LD_VAR 0 3
2231: PUSH
2232: LD_INT 1
2234: ARRAY
2235: PUSH
2236: LD_INT 1
2238: EQUAL
2239: OR
2240: IFFALSE 2252
// begin baseCorrect := 1 ;
2242: LD_ADDR_VAR 0 6
2246: PUSH
2247: LD_INT 1
2249: ST_TO_ADDR
// break ;
2250: GO 2254
// end ;
2252: GO 2211
2254: POP
2255: POP
// if baseCorrect = 0 then
2256: LD_VAR 0 6
2260: PUSH
2261: LD_INT 0
2263: EQUAL
2264: IFFALSE 2971
// begin uc_side := 1 ;
2266: LD_ADDR_OWVAR 20
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// uc_nation := 1 ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// bc_level := 10 ;
2282: LD_ADDR_OWVAR 43
2286: PUSH
2287: LD_INT 10
2289: ST_TO_ADDR
// bc_type := b_warehouse ;
2290: LD_ADDR_OWVAR 42
2294: PUSH
2295: LD_INT 1
2297: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2298: LD_INT 99
2300: PPUSH
2301: LD_INT 24
2303: PPUSH
2304: LD_INT 2
2306: PPUSH
2307: CALL_OW 47
// bc_type := b_bunker ;
2311: LD_ADDR_OWVAR 42
2315: PUSH
2316: LD_INT 32
2318: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2319: LD_ADDR_VAR 0 7
2323: PUSH
2324: LD_INT 124
2326: PPUSH
2327: LD_INT 42
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: CALL_OW 47
2337: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2338: LD_VAR 0 7
2342: PPUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 5
2348: PUSH
2349: LD_INT 6
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: CALL_OW 12
2367: ARRAY
2368: PPUSH
2369: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2373: LD_ADDR_VAR 0 7
2377: PUSH
2378: LD_INT 111
2380: PPUSH
2381: LD_INT 16
2383: PPUSH
2384: LD_INT 4
2386: PPUSH
2387: CALL_OW 47
2391: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2392: LD_VAR 0 7
2396: PPUSH
2397: LD_INT 4
2399: PUSH
2400: LD_INT 5
2402: PUSH
2403: LD_INT 6
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 1
2413: PPUSH
2414: LD_INT 3
2416: PPUSH
2417: CALL_OW 12
2421: ARRAY
2422: PPUSH
2423: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2427: LD_ADDR_VAR 0 7
2431: PUSH
2432: LD_INT 113
2434: PPUSH
2435: LD_INT 21
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: CALL_OW 47
2445: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2446: LD_VAR 0 7
2450: PPUSH
2451: LD_INT 4
2453: PUSH
2454: LD_INT 5
2456: PUSH
2457: LD_INT 6
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 1
2467: PPUSH
2468: LD_INT 3
2470: PPUSH
2471: CALL_OW 12
2475: ARRAY
2476: PPUSH
2477: CALL_OW 431
// bc_type := 33 ;
2481: LD_ADDR_OWVAR 42
2485: PUSH
2486: LD_INT 33
2488: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_INT 95
2496: PPUSH
2497: LD_INT 41
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL_OW 47
2507: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2508: LD_VAR 0 7
2512: PPUSH
2513: LD_INT 4
2515: PUSH
2516: LD_INT 5
2518: PUSH
2519: LD_INT 6
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ARRAY
2538: PPUSH
2539: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2543: LD_ADDR_VAR 0 7
2547: PUSH
2548: LD_INT 97
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: CALL_OW 47
2561: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2562: LD_VAR 0 7
2566: PPUSH
2567: LD_INT 4
2569: PUSH
2570: LD_INT 5
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 1
2583: PPUSH
2584: LD_INT 3
2586: PPUSH
2587: CALL_OW 12
2591: ARRAY
2592: PPUSH
2593: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2597: LD_ADDR_VAR 0 7
2601: PUSH
2602: LD_INT 86
2604: PPUSH
2605: LD_INT 19
2607: PPUSH
2608: LD_INT 1
2610: PPUSH
2611: CALL_OW 47
2615: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2616: LD_VAR 0 7
2620: PPUSH
2621: LD_INT 4
2623: PUSH
2624: LD_INT 5
2626: PUSH
2627: LD_INT 6
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 1
2637: PPUSH
2638: LD_INT 3
2640: PPUSH
2641: CALL_OW 12
2645: ARRAY
2646: PPUSH
2647: CALL_OW 431
// bc_type := 30 ;
2651: LD_ADDR_OWVAR 42
2655: PUSH
2656: LD_INT 30
2658: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2659: LD_INT 104
2661: PPUSH
2662: LD_INT 24
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 47
// bc_type := 29 ;
2672: LD_ADDR_OWVAR 42
2676: PUSH
2677: LD_INT 29
2679: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2680: LD_INT 113
2682: PPUSH
2683: LD_INT 50
2685: PPUSH
2686: LD_INT 3
2688: PPUSH
2689: CALL_OW 47
// bc_type := 27 ;
2693: LD_ADDR_OWVAR 42
2697: PUSH
2698: LD_INT 27
2700: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2701: LD_INT 98
2703: PPUSH
2704: LD_INT 26
2706: PPUSH
2707: LD_INT 2
2709: PPUSH
2710: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2714: LD_INT 95
2716: PPUSH
2717: LD_INT 23
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: CALL_OW 47
// bc_type := 28 ;
2727: LD_ADDR_OWVAR 42
2731: PUSH
2732: LD_INT 28
2734: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2735: LD_INT 107
2737: PPUSH
2738: LD_INT 32
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL_OW 47
// bc_type := 3 ;
2748: LD_ADDR_OWVAR 42
2752: PUSH
2753: LD_INT 3
2755: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2756: LD_INT 106
2758: PPUSH
2759: LD_INT 42
2761: PPUSH
2762: LD_INT 0
2764: PPUSH
2765: CALL_OW 47
// bc_type := 16 ;
2769: LD_ADDR_OWVAR 42
2773: PUSH
2774: LD_INT 16
2776: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2777: LD_INT 109
2779: PPUSH
2780: LD_INT 45
2782: PPUSH
2783: LD_INT 5
2785: PPUSH
2786: CALL_OW 47
// bc_type := 17 ;
2790: LD_ADDR_OWVAR 42
2794: PUSH
2795: LD_INT 17
2797: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2798: LD_INT 106
2800: PPUSH
2801: LD_INT 46
2803: PPUSH
2804: LD_INT 0
2806: PPUSH
2807: CALL_OW 47
// bc_type := 19 ;
2811: LD_ADDR_OWVAR 42
2815: PUSH
2816: LD_INT 19
2818: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2819: LD_INT 103
2821: PPUSH
2822: LD_INT 42
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: CALL_OW 47
// bc_type := 21 ;
2832: LD_ADDR_OWVAR 42
2836: PUSH
2837: LD_INT 21
2839: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2840: LD_INT 110
2842: PPUSH
2843: LD_INT 42
2845: PPUSH
2846: LD_INT 4
2848: PPUSH
2849: CALL_OW 47
// bc_type := 5 ;
2853: LD_ADDR_OWVAR 42
2857: PUSH
2858: LD_INT 5
2860: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2861: LD_INT 114
2863: PPUSH
2864: LD_INT 55
2866: PPUSH
2867: LD_INT 5
2869: PPUSH
2870: CALL_OW 47
// bc_type := 36 ;
2874: LD_ADDR_OWVAR 42
2878: PUSH
2879: LD_INT 36
2881: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2882: LD_INT 96
2884: PPUSH
2885: LD_INT 28
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 47
// bc_type := b_lab_full ;
2895: LD_ADDR_OWVAR 42
2899: PUSH
2900: LD_INT 8
2902: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2903: LD_ADDR_OWVAR 44
2907: PUSH
2908: LD_INT 15
2910: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2911: LD_ADDR_OWVAR 45
2915: PUSH
2916: LD_INT 11
2918: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2919: LD_INT 116
2921: PPUSH
2922: LD_INT 38
2924: PPUSH
2925: LD_INT 4
2927: PPUSH
2928: CALL_OW 47
// bc_type := b_lab_full ;
2932: LD_ADDR_OWVAR 42
2936: PUSH
2937: LD_INT 8
2939: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2940: LD_ADDR_OWVAR 44
2944: PUSH
2945: LD_INT 10
2947: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2948: LD_ADDR_OWVAR 45
2952: PUSH
2953: LD_INT 12
2955: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2956: LD_INT 112
2958: PPUSH
2959: LD_INT 29
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: CALL_OW 47
// end else
2969: GO 3219
// begin uc_side := 1 ;
2971: LD_ADDR_OWVAR 20
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// for i in blist do
2979: LD_ADDR_VAR 0 3
2983: PUSH
2984: LD_VAR 0 2
2988: PUSH
2989: FOR_IN
2990: IFFALSE 3217
// begin InitBc ;
2992: CALL_OW 21
// uc_nation := i [ 6 ] ;
2996: LD_ADDR_OWVAR 21
3000: PUSH
3001: LD_VAR 0 3
3005: PUSH
3006: LD_INT 6
3008: ARRAY
3009: ST_TO_ADDR
// bc_type := i [ 1 ] ;
3010: LD_ADDR_OWVAR 42
3014: PUSH
3015: LD_VAR 0 3
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3024: LD_ADDR_OWVAR 43
3028: PUSH
3029: LD_VAR 0 3
3033: PUSH
3034: LD_INT 5
3036: ARRAY
3037: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3038: LD_VAR 0 3
3042: PUSH
3043: LD_INT 1
3045: ARRAY
3046: PUSH
3047: LD_INT 7
3049: PUSH
3050: LD_INT 8
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: IN
3057: IFFALSE 3087
// begin bc_kind1 := i [ 7 ] ;
3059: LD_ADDR_OWVAR 44
3063: PUSH
3064: LD_VAR 0 3
3068: PUSH
3069: LD_INT 7
3071: ARRAY
3072: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3073: LD_ADDR_OWVAR 45
3077: PUSH
3078: LD_VAR 0 3
3082: PUSH
3083: LD_INT 8
3085: ARRAY
3086: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3087: LD_ADDR_VAR 0 4
3091: PUSH
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 2
3099: ARRAY
3100: PPUSH
3101: LD_VAR 0 3
3105: PUSH
3106: LD_INT 3
3108: ARRAY
3109: PPUSH
3110: LD_VAR 0 3
3114: PUSH
3115: LD_INT 4
3117: ARRAY
3118: PPUSH
3119: CALL_OW 47
3123: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3124: LD_VAR 0 4
3128: PPUSH
3129: CALL_OW 266
3133: PUSH
3134: LD_INT 32
3136: PUSH
3137: LD_INT 33
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: IN
3144: IFFALSE 3215
// if i [ 7 ] then
3146: LD_VAR 0 3
3150: PUSH
3151: LD_INT 7
3153: ARRAY
3154: IFFALSE 3176
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3156: LD_VAR 0 4
3160: PPUSH
3161: LD_VAR 0 3
3165: PUSH
3166: LD_INT 7
3168: ARRAY
3169: PPUSH
3170: CALL_OW 431
3174: GO 3215
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3176: LD_VAR 0 4
3180: PPUSH
3181: LD_INT 11
3183: PUSH
3184: LD_INT 7
3186: PUSH
3187: LD_INT 4
3189: PUSH
3190: LD_INT 5
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: PUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 4
3204: PPUSH
3205: CALL_OW 12
3209: ARRAY
3210: PPUSH
3211: CALL_OW 431
// end ;
3215: GO 2989
3217: POP
3218: POP
// end ; uc_side := 1 ;
3219: LD_ADDR_OWVAR 20
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// uc_nation := 1 ;
3227: LD_ADDR_OWVAR 21
3231: PUSH
3232: LD_INT 1
3234: ST_TO_ADDR
// for i := 1 to 8 do
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: DOUBLE
3241: LD_INT 1
3243: DEC
3244: ST_TO_ADDR
3245: LD_INT 8
3247: PUSH
3248: FOR_TO
3249: IFFALSE 3420
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3251: LD_ADDR_OWVAR 37
3255: PUSH
3256: LD_INT 5
3258: PUSH
3259: LD_INT 5
3261: PUSH
3262: LD_INT 3
3264: PUSH
3265: LD_INT 4
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: PUSH
3274: LD_INT 1
3276: PPUSH
3277: LD_INT 4
3279: PPUSH
3280: CALL_OW 12
3284: ARRAY
3285: ST_TO_ADDR
// vc_engine := engine_siberite ;
3286: LD_ADDR_OWVAR 39
3290: PUSH
3291: LD_INT 3
3293: ST_TO_ADDR
// vc_control := control_manual ;
3294: LD_ADDR_OWVAR 38
3298: PUSH
3299: LD_INT 1
3301: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3302: LD_OWVAR 37
3306: PUSH
3307: LD_INT 4
3309: EQUAL
3310: IFFALSE 3322
// vc_weapon := us_heavy_gun else
3312: LD_ADDR_OWVAR 40
3316: PUSH
3317: LD_INT 6
3319: ST_TO_ADDR
3320: GO 3367
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3322: LD_ADDR_OWVAR 40
3326: PUSH
3327: LD_INT 7
3329: PUSH
3330: LD_INT 9
3332: PUSH
3333: LD_INT 12
3335: PUSH
3336: LD_INT 13
3338: PUSH
3339: LD_INT 9
3341: PUSH
3342: LD_INT 9
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: PUSH
3353: LD_VAR 0 3
3357: PUSH
3358: LD_INT 6
3360: MOD
3361: PUSH
3362: LD_INT 1
3364: PLUS
3365: ARRAY
3366: ST_TO_ADDR
// un := CreateVehicle ;
3367: LD_ADDR_VAR 0 5
3371: PUSH
3372: CALL_OW 45
3376: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3377: LD_VAR 0 5
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: LD_INT 5
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3397: LD_VAR 0 5
3401: PPUSH
3402: LD_INT 78
3404: PPUSH
3405: LD_INT 31
3407: PPUSH
3408: LD_INT 8
3410: PPUSH
3411: LD_INT 0
3413: PPUSH
3414: CALL_OW 50
// end ;
3418: GO 3248
3420: POP
3421: POP
// end ;
3422: LD_VAR 0 1
3426: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3433: LD_INT 22
3435: PUSH
3436: LD_INT 1
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: LD_INT 21
3445: PUSH
3446: LD_INT 1
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PPUSH
3457: CALL_OW 69
3461: PUSH
3462: LD_INT 6
3464: LESS
3465: IFFALSE 3692
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3467: LD_ADDR_VAR 0 4
3471: PUSH
3472: LD_INT 22
3474: PUSH
3475: LD_INT 1
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 2
3484: PUSH
3485: LD_INT 30
3487: PUSH
3488: LD_INT 0
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: LD_INT 30
3497: PUSH
3498: LD_INT 1
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 69
3518: ST_TO_ADDR
// uc_side := 1 ;
3519: LD_ADDR_OWVAR 20
3523: PUSH
3524: LD_INT 1
3526: ST_TO_ADDR
// uc_nation := 1 ;
3527: LD_ADDR_OWVAR 21
3531: PUSH
3532: LD_INT 1
3534: ST_TO_ADDR
// for i := 1 to 6 do
3535: LD_ADDR_VAR 0 2
3539: PUSH
3540: DOUBLE
3541: LD_INT 1
3543: DEC
3544: ST_TO_ADDR
3545: LD_INT 6
3547: PUSH
3548: FOR_TO
3549: IFFALSE 3690
// begin hc_gallery :=  ;
3551: LD_ADDR_OWVAR 33
3555: PUSH
3556: LD_STRING 
3558: ST_TO_ADDR
// hc_name :=  ;
3559: LD_ADDR_OWVAR 26
3563: PUSH
3564: LD_STRING 
3566: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 1
3572: PUSH
3573: LD_INT 2
3575: PUSH
3576: LD_INT 3
3578: PUSH
3579: LD_INT 4
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_INT 4
3593: PPUSH
3594: CALL_OW 12
3598: ARRAY
3599: PPUSH
3600: LD_INT 5
3602: PPUSH
3603: LD_INT 8
3605: PPUSH
3606: CALL_OW 12
3610: PPUSH
3611: CALL_OW 380
// un := CreateHuman ;
3615: LD_ADDR_VAR 0 3
3619: PUSH
3620: CALL_OW 44
3624: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3625: LD_ADDR_EXP 18
3629: PUSH
3630: LD_EXP 18
3634: PPUSH
3635: LD_VAR 0 3
3639: PPUSH
3640: CALL 63898 0 2
3644: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 4
3654: PUSH
3655: LD_INT 1
3657: ARRAY
3658: PPUSH
3659: CALL_OW 250
3663: PPUSH
3664: LD_VAR 0 4
3668: PUSH
3669: LD_INT 1
3671: ARRAY
3672: PPUSH
3673: CALL_OW 251
3677: PPUSH
3678: LD_INT 15
3680: PPUSH
3681: LD_INT 0
3683: PPUSH
3684: CALL 3870 0 5
// end ;
3688: GO 3548
3690: POP
3691: POP
// end ; end ; end_of_file
3692: LD_VAR 0 1
3696: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3697: LD_INT 0
3699: PPUSH
3700: PPUSH
// if existMode then
3701: LD_VAR 0 2
3705: IFFALSE 3840
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3707: LD_EXP 21
3711: PUSH
3712: LD_VAR 0 1
3716: STR
3717: PPUSH
3718: CALL_OW 28
3722: IFFALSE 3747
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3724: LD_ADDR_VAR 0 4
3728: PUSH
3729: LD_EXP 21
3733: PUSH
3734: LD_VAR 0 1
3738: STR
3739: PPUSH
3740: CALL_OW 34
3744: ST_TO_ADDR
3745: GO 3838
// begin if TestCharacters ( 11_ & ident ) then
3747: LD_STRING 11_
3749: PUSH
3750: LD_VAR 0 1
3754: STR
3755: PPUSH
3756: CALL_OW 28
3760: IFFALSE 3783
// unit := CreateCharacter ( 11_ & ident ) else
3762: LD_ADDR_VAR 0 4
3766: PUSH
3767: LD_STRING 11_
3769: PUSH
3770: LD_VAR 0 1
3774: STR
3775: PPUSH
3776: CALL_OW 34
3780: ST_TO_ADDR
3781: GO 3838
// if TestCharacters ( 10c_ & ident ) then
3783: LD_STRING 10c_
3785: PUSH
3786: LD_VAR 0 1
3790: STR
3791: PPUSH
3792: CALL_OW 28
3796: IFFALSE 3819
// unit := CreateCharacter ( 10c_ & ident ) else
3798: LD_ADDR_VAR 0 4
3802: PUSH
3803: LD_STRING 10c_
3805: PUSH
3806: LD_VAR 0 1
3810: STR
3811: PPUSH
3812: CALL_OW 34
3816: ST_TO_ADDR
3817: GO 3838
// unit := CreateCharacter ( 10_ & ident ) ;
3819: LD_ADDR_VAR 0 4
3823: PUSH
3824: LD_STRING 10_
3826: PUSH
3827: LD_VAR 0 1
3831: STR
3832: PPUSH
3833: CALL_OW 34
3837: ST_TO_ADDR
// end ; end else
3838: GO 3855
// unit := NewCharacter ( ident ) ;
3840: LD_ADDR_VAR 0 4
3844: PUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: CALL_OW 25
3854: ST_TO_ADDR
// result := unit ;
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: LD_VAR 0 4
3864: ST_TO_ADDR
// end ;
3865: LD_VAR 0 3
3869: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3870: LD_INT 0
3872: PPUSH
3873: PPUSH
3874: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3875: LD_ADDR_VAR 0 8
3879: PUSH
3880: LD_INT 22
3882: PUSH
3883: LD_VAR 0 1
3887: PPUSH
3888: CALL_OW 255
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PUSH
3897: LD_INT 21
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: PUSH
3907: LD_INT 3
3909: PUSH
3910: LD_INT 30
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: PPUSH
3929: CALL_OW 69
3933: ST_TO_ADDR
// if not tmp then
3934: LD_VAR 0 8
3938: NOT
3939: IFFALSE 3972
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_VAR 0 2
3950: PPUSH
3951: LD_VAR 0 3
3955: PPUSH
3956: LD_VAR 0 4
3960: PPUSH
3961: LD_VAR 0 5
3965: PPUSH
3966: CALL_OW 50
// exit ;
3970: GO 4218
// end ; for i in tmp do
3972: LD_ADDR_VAR 0 7
3976: PUSH
3977: LD_VAR 0 8
3981: PUSH
3982: FOR_IN
3983: IFFALSE 4187
// if IsNotFull ( i ) then
3985: LD_VAR 0 7
3989: PPUSH
3990: CALL 28380 0 1
3994: IFFALSE 4185
// begin PlaceHumanInUnit ( unit , i ) ;
3996: LD_VAR 0 1
4000: PPUSH
4001: LD_VAR 0 7
4005: PPUSH
4006: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
4010: LD_VAR 0 7
4014: PPUSH
4015: CALL_OW 266
4019: PUSH
4020: LD_INT 5
4022: PUSH
4023: LD_INT 4
4025: PUSH
4026: LD_INT 31
4028: PUSH
4029: LD_INT 32
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: IN
4038: IFFALSE 4071
// begin SetClass ( unit , class_soldier ) ;
4040: LD_VAR 0 1
4044: PPUSH
4045: LD_INT 1
4047: PPUSH
4048: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4052: LD_VAR 0 1
4056: PPUSH
4057: LD_VAR 0 7
4061: PPUSH
4062: CALL 59134 0 1
4066: PPUSH
4067: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4071: LD_VAR 0 7
4075: PPUSH
4076: CALL_OW 266
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: LD_INT 3
4086: PUSH
4087: LD_INT 36
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: IN
4095: IFFALSE 4109
// SetClass ( unit , class_mechanic ) ;
4097: LD_VAR 0 1
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4109: LD_VAR 0 7
4113: PPUSH
4114: CALL_OW 266
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: LD_INT 1
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: IN
4129: IFFALSE 4143
// SetClass ( unit , class_engineer ) ;
4131: LD_VAR 0 1
4135: PPUSH
4136: LD_INT 2
4138: PPUSH
4139: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4143: LD_VAR 0 7
4147: PPUSH
4148: CALL_OW 266
4152: PUSH
4153: LD_INT 6
4155: PUSH
4156: LD_INT 7
4158: PUSH
4159: LD_INT 8
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: IN
4167: IFFALSE 4181
// SetClass ( unit , class_scientistic ) ;
4169: LD_VAR 0 1
4173: PPUSH
4174: LD_INT 4
4176: PPUSH
4177: CALL_OW 336
// exit ;
4181: POP
4182: POP
4183: GO 4218
// end ;
4185: GO 3982
4187: POP
4188: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4189: LD_VAR 0 1
4193: PPUSH
4194: LD_VAR 0 2
4198: PPUSH
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_VAR 0 4
4208: PPUSH
4209: LD_VAR 0 5
4213: PPUSH
4214: CALL_OW 50
// end ;
4218: LD_VAR 0 6
4222: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4223: LD_INT 0
4225: PPUSH
// if unit in selectedTab then
4226: LD_VAR 0 1
4230: PUSH
4231: LD_VAR 0 3
4235: IN
4236: IFFALSE 4258
// SaveCharacters ( unit , 13c_ & unitString ) else
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_STRING 13c_
4245: PUSH
4246: LD_VAR 0 2
4250: STR
4251: PPUSH
4252: CALL_OW 38
4256: GO 4276
// SaveCharacters ( unit , 13s_ & unitString ) ;
4258: LD_VAR 0 1
4262: PPUSH
4263: LD_STRING 13s_
4265: PUSH
4266: LD_VAR 0 2
4270: STR
4271: PPUSH
4272: CALL_OW 38
// end ;
4276: LD_VAR 0 4
4280: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
// selected := [ ] ;
4287: LD_ADDR_EXP 22
4291: PUSH
4292: EMPTY
4293: ST_TO_ADDR
// othersSelect := [ ] ;
4294: LD_ADDR_EXP 23
4298: PUSH
4299: EMPTY
4300: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4301: LD_ADDR_VAR 0 3
4305: PUSH
4306: LD_EXP 3
4310: PUSH
4311: LD_EXP 4
4315: PUSH
4316: LD_EXP 5
4320: PUSH
4321: LD_EXP 6
4325: PUSH
4326: LD_EXP 8
4330: PUSH
4331: LD_EXP 9
4335: PUSH
4336: LD_EXP 10
4340: PUSH
4341: LD_EXP 11
4345: PUSH
4346: LD_EXP 12
4350: PUSH
4351: LD_EXP 13
4355: PUSH
4356: LD_EXP 14
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4374: LD_ADDR_VAR 0 3
4378: PUSH
4379: LD_VAR 0 3
4383: PUSH
4384: LD_EXP 17
4388: ADD
4389: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4390: LD_ADDR_VAR 0 3
4394: PUSH
4395: LD_VAR 0 3
4399: PUSH
4400: LD_EXP 16
4404: ADD
4405: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4406: LD_ADDR_VAR 0 3
4410: PUSH
4411: LD_VAR 0 3
4415: PUSH
4416: LD_EXP 18
4420: ADD
4421: ST_TO_ADDR
// for i in tmp do
4422: LD_ADDR_VAR 0 2
4426: PUSH
4427: LD_VAR 0 3
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4472
// if GetClass ( i ) = 8 then
4435: LD_VAR 0 2
4439: PPUSH
4440: CALL_OW 257
4444: PUSH
4445: LD_INT 8
4447: EQUAL
4448: IFFALSE 4470
// SetClass ( i , rand ( 1 , 4 ) ) ;
4450: LD_VAR 0 2
4454: PPUSH
4455: LD_INT 1
4457: PPUSH
4458: LD_INT 4
4460: PPUSH
4461: CALL_OW 12
4465: PPUSH
4466: CALL_OW 336
4470: GO 4432
4472: POP
4473: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4474: LD_ADDR_EXP 22
4478: PUSH
4479: LD_STRING 1
4481: PPUSH
4482: LD_INT 6
4484: PPUSH
4485: LD_INT 6
4487: PPUSH
4488: LD_INT -5
4490: PUSH
4491: LD_EXP 1
4495: PUSH
4496: LD_EXP 15
4500: PUSH
4501: LD_INT -2
4503: PUSH
4504: LD_INT -3
4506: PUSH
4507: LD_INT -5
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: PUSH
4518: LD_VAR 0 3
4522: ADD
4523: PUSH
4524: LD_INT -6
4526: PUSH
4527: LD_INT -4
4529: PUSH
4530: LD_EXP 2
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: ADD
4540: PPUSH
4541: LD_INT 1
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 2
4553: PUSH
4554: LD_INT 1
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 3
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 4
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 5
4583: PUSH
4584: LD_INT 0
4586: PUSH
4587: LD_INT 2
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 42
4606: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4607: LD_ADDR_EXP 23
4611: PUSH
4612: LD_EXP 22
4616: PUSH
4617: LD_EXP 3
4621: PUSH
4622: LD_EXP 4
4626: PUSH
4627: LD_EXP 5
4631: PUSH
4632: LD_EXP 6
4636: PUSH
4637: LD_EXP 7
4641: PUSH
4642: LD_EXP 8
4646: PUSH
4647: LD_EXP 9
4651: PUSH
4652: LD_EXP 10
4656: PUSH
4657: LD_EXP 11
4661: PUSH
4662: LD_EXP 12
4666: PUSH
4667: LD_EXP 13
4671: PUSH
4672: LD_EXP 14
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: DIFF
4691: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4692: LD_ADDR_VAR 0 4
4696: PUSH
4697: LD_VAR 0 3
4701: PUSH
4702: LD_EXP 22
4706: DIFF
4707: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_VAR 0 4
4717: PUSH
4718: LD_EXP 3
4722: PUSH
4723: LD_EXP 4
4727: PUSH
4728: LD_EXP 5
4732: PUSH
4733: LD_EXP 6
4737: PUSH
4738: LD_EXP 7
4742: PUSH
4743: LD_EXP 8
4747: PUSH
4748: LD_EXP 9
4752: PUSH
4753: LD_EXP 10
4757: PUSH
4758: LD_EXP 11
4762: PUSH
4763: LD_EXP 12
4767: PUSH
4768: LD_EXP 13
4772: PUSH
4773: LD_EXP 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: DIFF
4792: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4793: LD_VAR 0 4
4797: PPUSH
4798: LD_STRING 13s_others
4800: PPUSH
4801: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4805: LD_EXP 23
4809: PPUSH
4810: LD_STRING 13c_others
4812: PPUSH
4813: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4817: LD_EXP 1
4821: PPUSH
4822: LD_STRING 13c_JMM
4824: PPUSH
4825: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4829: LD_EXP 15
4833: PPUSH
4834: LD_STRING 13c_Stevens
4836: PPUSH
4837: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4841: LD_EXP 3
4845: PPUSH
4846: LD_STRING Lisa
4848: PPUSH
4849: LD_EXP 22
4853: PPUSH
4854: CALL 4223 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4858: LD_EXP 8
4862: PPUSH
4863: LD_STRING Brown
4865: PPUSH
4866: LD_EXP 22
4870: PPUSH
4871: CALL 4223 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4875: LD_EXP 4
4879: PPUSH
4880: LD_STRING Donaldson
4882: PPUSH
4883: LD_EXP 22
4887: PPUSH
4888: CALL 4223 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4892: LD_EXP 5
4896: PPUSH
4897: LD_STRING Bobby
4899: PPUSH
4900: LD_EXP 22
4904: PPUSH
4905: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4909: LD_EXP 6
4913: PPUSH
4914: LD_STRING Cyrus
4916: PPUSH
4917: LD_EXP 22
4921: PPUSH
4922: CALL 4223 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4926: LD_EXP 7
4930: PPUSH
4931: LD_STRING Denis
4933: PPUSH
4934: LD_EXP 22
4938: PPUSH
4939: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4943: LD_EXP 9
4947: PPUSH
4948: LD_STRING Gladstone
4950: PPUSH
4951: LD_EXP 22
4955: PPUSH
4956: CALL 4223 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4960: LD_EXP 10
4964: PPUSH
4965: LD_STRING Houten
4967: PPUSH
4968: LD_EXP 22
4972: PPUSH
4973: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4977: LD_EXP 11
4981: PPUSH
4982: LD_STRING Cornel
4984: PPUSH
4985: LD_EXP 22
4989: PPUSH
4990: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4994: LD_EXP 12
4998: PPUSH
4999: LD_STRING Gary
5001: PPUSH
5002: LD_EXP 22
5006: PPUSH
5007: CALL 4223 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5011: LD_EXP 13
5015: PPUSH
5016: LD_STRING Frank
5018: PPUSH
5019: LD_EXP 22
5023: PPUSH
5024: CALL 4223 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5028: LD_EXP 14
5032: PPUSH
5033: LD_STRING Kikuchi
5035: PPUSH
5036: LD_EXP 22
5040: PPUSH
5041: CALL 4223 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5045: LD_INT 22
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: LD_INT 21
5057: PUSH
5058: LD_INT 1
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 69
5073: PPUSH
5074: LD_INT 4
5076: PPUSH
5077: CALL_OW 235
// SetSide ( selected , 1 ) ;
5081: LD_EXP 22
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5093: LD_EXP 1
5097: PUSH
5098: LD_EXP 15
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: LD_INT 1
5109: PPUSH
5110: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_INT 22
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 21
5131: PUSH
5132: LD_INT 1
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PPUSH
5143: CALL_OW 69
5147: PUSH
5148: FOR_IN
5149: IFFALSE 5162
// ComExit ( i ) ;
5151: LD_VAR 0 2
5155: PPUSH
5156: CALL 64296 0 1
5160: GO 5148
5162: POP
5163: POP
// end ; end_of_file
5164: LD_VAR 0 1
5168: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5169: LD_VAR 0 1
5173: PPUSH
5174: CALL 21246 0 1
// if un = JMM then
5178: LD_VAR 0 1
5182: PUSH
5183: LD_EXP 1
5187: EQUAL
5188: IFFALSE 5197
// YouLost ( JMM ) ;
5190: LD_STRING JMM
5192: PPUSH
5193: CALL_OW 104
// end ;
5197: PPOPN 1
5199: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5200: LD_VAR 0 1
5204: PPUSH
5205: LD_VAR 0 2
5209: PPUSH
5210: CALL 21366 0 2
// end ; end_of_file
5214: PPOPN 2
5216: END
// export function Action ; begin
5217: LD_INT 0
5219: PPUSH
// InGameOn ;
5220: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5224: LD_INT 22
5226: PUSH
5227: LD_INT 1
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: LD_INT 2
5236: PUSH
5237: LD_INT 30
5239: PUSH
5240: LD_INT 0
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 30
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PPUSH
5271: CALL_OW 87
// wait ( 0 0$1 ) ;
5275: LD_INT 35
5277: PPUSH
5278: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5282: LD_EXP 1
5286: PPUSH
5287: LD_STRING D1-JMM-1
5289: PPUSH
5290: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5294: LD_EXP 2
5298: PPUSH
5299: LD_STRING D1-Pow-1
5301: PPUSH
5302: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5306: LD_EXP 2
5310: PPUSH
5311: LD_STRING D1-Pow-1a
5313: PPUSH
5314: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5318: LD_EXP 2
5322: PPUSH
5323: LD_STRING D1-Pow-1b
5325: PPUSH
5326: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5330: LD_EXP 2
5334: PPUSH
5335: LD_STRING D1-Pow-1c
5337: PPUSH
5338: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5342: LD_EXP 1
5346: PPUSH
5347: LD_STRING D1-JMM-2
5349: PPUSH
5350: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5354: LD_EXP 2
5358: PPUSH
5359: LD_STRING D1-Pow-2
5361: PPUSH
5362: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5366: LD_EXP 1
5370: PPUSH
5371: LD_STRING D1-JMM-3
5373: PPUSH
5374: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5378: LD_EXP 2
5382: PPUSH
5383: LD_STRING D1-Pow-3
5385: PPUSH
5386: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5390: LD_EXP 1
5394: PPUSH
5395: LD_STRING D1-JMM-4
5397: PPUSH
5398: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5402: LD_EXP 2
5406: PPUSH
5407: LD_STRING D1-Pow-4
5409: PPUSH
5410: CALL_OW 94
// SelectAndSaveCharacters ;
5414: CALL 4281 0 0
// InGameOff ;
5418: CALL_OW 9
// Query ( Q1 ) ;
5422: LD_STRING Q1
5424: PPUSH
5425: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5429: LD_INT 2
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: CALL_OW 424
// end ; end_of_file
5439: LD_VAR 0 1
5443: RET
// export globalGameSaveCounter ; every 0 0$1 do
5444: GO 5446
5446: DISABLE
// begin enable ;
5447: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5448: LD_STRING updateTimer(
5450: PUSH
5451: LD_OWVAR 1
5455: STR
5456: PUSH
5457: LD_STRING );
5459: STR
5460: PPUSH
5461: CALL_OW 559
// end ;
5465: END
// every 0 0$1 do
5466: GO 5468
5468: DISABLE
// begin globalGameSaveCounter := 0 ;
5469: LD_ADDR_EXP 24
5473: PUSH
5474: LD_INT 0
5476: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5477: LD_STRING setGameSaveCounter(0)
5479: PPUSH
5480: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5484: LD_STRING initStreamRollete();
5486: PPUSH
5487: CALL_OW 559
// InitStreamMode ;
5491: CALL 6817 0 0
// DefineStreamItems ( false ) ;
5495: LD_INT 0
5497: PPUSH
5498: CALL 7281 0 1
// end ;
5502: END
// export function SOS_MapStart ( ) ; begin
5503: LD_INT 0
5505: PPUSH
// if streamModeActive then
5506: LD_EXP 25
5510: IFFALSE 5519
// DefineStreamItems ( true ) ;
5512: LD_INT 1
5514: PPUSH
5515: CALL 7281 0 1
// UpdateLuaVariables ( ) ;
5519: CALL 5536 0 0
// UpdateFactoryWaypoints ( ) ;
5523: CALL 20150 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5527: CALL 20407 0 0
// end ;
5531: LD_VAR 0 1
5535: RET
// function UpdateLuaVariables ( ) ; begin
5536: LD_INT 0
5538: PPUSH
// if globalGameSaveCounter then
5539: LD_EXP 24
5543: IFFALSE 5577
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5545: LD_ADDR_EXP 24
5549: PUSH
5550: LD_EXP 24
5554: PPUSH
5555: CALL 65259 0 1
5559: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5560: LD_STRING setGameSaveCounter(
5562: PUSH
5563: LD_EXP 24
5567: STR
5568: PUSH
5569: LD_STRING )
5571: STR
5572: PPUSH
5573: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5577: LD_STRING setGameDifficulty(
5579: PUSH
5580: LD_OWVAR 67
5584: STR
5585: PUSH
5586: LD_STRING )
5588: STR
5589: PPUSH
5590: CALL_OW 559
// end ;
5594: LD_VAR 0 1
5598: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5599: LD_INT 0
5601: PPUSH
// if p2 = stream_mode then
5602: LD_VAR 0 2
5606: PUSH
5607: LD_INT 100
5609: EQUAL
5610: IFFALSE 6613
// begin if not StreamModeActive then
5612: LD_EXP 25
5616: NOT
5617: IFFALSE 5627
// StreamModeActive := true ;
5619: LD_ADDR_EXP 25
5623: PUSH
5624: LD_INT 1
5626: ST_TO_ADDR
// if p3 = 0 then
5627: LD_VAR 0 3
5631: PUSH
5632: LD_INT 0
5634: EQUAL
5635: IFFALSE 5641
// InitStreamMode ;
5637: CALL 6817 0 0
// if p3 = 1 then
5641: LD_VAR 0 3
5645: PUSH
5646: LD_INT 1
5648: EQUAL
5649: IFFALSE 5659
// sRocket := true ;
5651: LD_ADDR_EXP 30
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// if p3 = 2 then
5659: LD_VAR 0 3
5663: PUSH
5664: LD_INT 2
5666: EQUAL
5667: IFFALSE 5677
// sSpeed := true ;
5669: LD_ADDR_EXP 29
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// if p3 = 3 then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 3
5684: EQUAL
5685: IFFALSE 5695
// sEngine := true ;
5687: LD_ADDR_EXP 31
5691: PUSH
5692: LD_INT 1
5694: ST_TO_ADDR
// if p3 = 4 then
5695: LD_VAR 0 3
5699: PUSH
5700: LD_INT 4
5702: EQUAL
5703: IFFALSE 5713
// sSpec := true ;
5705: LD_ADDR_EXP 28
5709: PUSH
5710: LD_INT 1
5712: ST_TO_ADDR
// if p3 = 5 then
5713: LD_VAR 0 3
5717: PUSH
5718: LD_INT 5
5720: EQUAL
5721: IFFALSE 5731
// sLevel := true ;
5723: LD_ADDR_EXP 32
5727: PUSH
5728: LD_INT 1
5730: ST_TO_ADDR
// if p3 = 6 then
5731: LD_VAR 0 3
5735: PUSH
5736: LD_INT 6
5738: EQUAL
5739: IFFALSE 5749
// sArmoury := true ;
5741: LD_ADDR_EXP 33
5745: PUSH
5746: LD_INT 1
5748: ST_TO_ADDR
// if p3 = 7 then
5749: LD_VAR 0 3
5753: PUSH
5754: LD_INT 7
5756: EQUAL
5757: IFFALSE 5767
// sRadar := true ;
5759: LD_ADDR_EXP 34
5763: PUSH
5764: LD_INT 1
5766: ST_TO_ADDR
// if p3 = 8 then
5767: LD_VAR 0 3
5771: PUSH
5772: LD_INT 8
5774: EQUAL
5775: IFFALSE 5785
// sBunker := true ;
5777: LD_ADDR_EXP 35
5781: PUSH
5782: LD_INT 1
5784: ST_TO_ADDR
// if p3 = 9 then
5785: LD_VAR 0 3
5789: PUSH
5790: LD_INT 9
5792: EQUAL
5793: IFFALSE 5803
// sHack := true ;
5795: LD_ADDR_EXP 36
5799: PUSH
5800: LD_INT 1
5802: ST_TO_ADDR
// if p3 = 10 then
5803: LD_VAR 0 3
5807: PUSH
5808: LD_INT 10
5810: EQUAL
5811: IFFALSE 5821
// sFire := true ;
5813: LD_ADDR_EXP 37
5817: PUSH
5818: LD_INT 1
5820: ST_TO_ADDR
// if p3 = 11 then
5821: LD_VAR 0 3
5825: PUSH
5826: LD_INT 11
5828: EQUAL
5829: IFFALSE 5839
// sRefresh := true ;
5831: LD_ADDR_EXP 38
5835: PUSH
5836: LD_INT 1
5838: ST_TO_ADDR
// if p3 = 12 then
5839: LD_VAR 0 3
5843: PUSH
5844: LD_INT 12
5846: EQUAL
5847: IFFALSE 5857
// sExp := true ;
5849: LD_ADDR_EXP 39
5853: PUSH
5854: LD_INT 1
5856: ST_TO_ADDR
// if p3 = 13 then
5857: LD_VAR 0 3
5861: PUSH
5862: LD_INT 13
5864: EQUAL
5865: IFFALSE 5875
// sDepot := true ;
5867: LD_ADDR_EXP 40
5871: PUSH
5872: LD_INT 1
5874: ST_TO_ADDR
// if p3 = 14 then
5875: LD_VAR 0 3
5879: PUSH
5880: LD_INT 14
5882: EQUAL
5883: IFFALSE 5893
// sFlag := true ;
5885: LD_ADDR_EXP 41
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// if p3 = 15 then
5893: LD_VAR 0 3
5897: PUSH
5898: LD_INT 15
5900: EQUAL
5901: IFFALSE 5911
// sKamikadze := true ;
5903: LD_ADDR_EXP 49
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// if p3 = 16 then
5911: LD_VAR 0 3
5915: PUSH
5916: LD_INT 16
5918: EQUAL
5919: IFFALSE 5929
// sTroll := true ;
5921: LD_ADDR_EXP 50
5925: PUSH
5926: LD_INT 1
5928: ST_TO_ADDR
// if p3 = 17 then
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 17
5936: EQUAL
5937: IFFALSE 5947
// sSlow := true ;
5939: LD_ADDR_EXP 51
5943: PUSH
5944: LD_INT 1
5946: ST_TO_ADDR
// if p3 = 18 then
5947: LD_VAR 0 3
5951: PUSH
5952: LD_INT 18
5954: EQUAL
5955: IFFALSE 5965
// sLack := true ;
5957: LD_ADDR_EXP 52
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// if p3 = 19 then
5965: LD_VAR 0 3
5969: PUSH
5970: LD_INT 19
5972: EQUAL
5973: IFFALSE 5983
// sTank := true ;
5975: LD_ADDR_EXP 54
5979: PUSH
5980: LD_INT 1
5982: ST_TO_ADDR
// if p3 = 20 then
5983: LD_VAR 0 3
5987: PUSH
5988: LD_INT 20
5990: EQUAL
5991: IFFALSE 6001
// sRemote := true ;
5993: LD_ADDR_EXP 55
5997: PUSH
5998: LD_INT 1
6000: ST_TO_ADDR
// if p3 = 21 then
6001: LD_VAR 0 3
6005: PUSH
6006: LD_INT 21
6008: EQUAL
6009: IFFALSE 6019
// sPowell := true ;
6011: LD_ADDR_EXP 56
6015: PUSH
6016: LD_INT 1
6018: ST_TO_ADDR
// if p3 = 22 then
6019: LD_VAR 0 3
6023: PUSH
6024: LD_INT 22
6026: EQUAL
6027: IFFALSE 6037
// sTeleport := true ;
6029: LD_ADDR_EXP 59
6033: PUSH
6034: LD_INT 1
6036: ST_TO_ADDR
// if p3 = 23 then
6037: LD_VAR 0 3
6041: PUSH
6042: LD_INT 23
6044: EQUAL
6045: IFFALSE 6055
// sOilTower := true ;
6047: LD_ADDR_EXP 61
6051: PUSH
6052: LD_INT 1
6054: ST_TO_ADDR
// if p3 = 24 then
6055: LD_VAR 0 3
6059: PUSH
6060: LD_INT 24
6062: EQUAL
6063: IFFALSE 6073
// sShovel := true ;
6065: LD_ADDR_EXP 62
6069: PUSH
6070: LD_INT 1
6072: ST_TO_ADDR
// if p3 = 25 then
6073: LD_VAR 0 3
6077: PUSH
6078: LD_INT 25
6080: EQUAL
6081: IFFALSE 6091
// sSheik := true ;
6083: LD_ADDR_EXP 63
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// if p3 = 26 then
6091: LD_VAR 0 3
6095: PUSH
6096: LD_INT 26
6098: EQUAL
6099: IFFALSE 6109
// sEarthquake := true ;
6101: LD_ADDR_EXP 65
6105: PUSH
6106: LD_INT 1
6108: ST_TO_ADDR
// if p3 = 27 then
6109: LD_VAR 0 3
6113: PUSH
6114: LD_INT 27
6116: EQUAL
6117: IFFALSE 6127
// sAI := true ;
6119: LD_ADDR_EXP 66
6123: PUSH
6124: LD_INT 1
6126: ST_TO_ADDR
// if p3 = 28 then
6127: LD_VAR 0 3
6131: PUSH
6132: LD_INT 28
6134: EQUAL
6135: IFFALSE 6145
// sCargo := true ;
6137: LD_ADDR_EXP 69
6141: PUSH
6142: LD_INT 1
6144: ST_TO_ADDR
// if p3 = 29 then
6145: LD_VAR 0 3
6149: PUSH
6150: LD_INT 29
6152: EQUAL
6153: IFFALSE 6163
// sDLaser := true ;
6155: LD_ADDR_EXP 70
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// if p3 = 30 then
6163: LD_VAR 0 3
6167: PUSH
6168: LD_INT 30
6170: EQUAL
6171: IFFALSE 6181
// sExchange := true ;
6173: LD_ADDR_EXP 71
6177: PUSH
6178: LD_INT 1
6180: ST_TO_ADDR
// if p3 = 31 then
6181: LD_VAR 0 3
6185: PUSH
6186: LD_INT 31
6188: EQUAL
6189: IFFALSE 6199
// sFac := true ;
6191: LD_ADDR_EXP 72
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// if p3 = 32 then
6199: LD_VAR 0 3
6203: PUSH
6204: LD_INT 32
6206: EQUAL
6207: IFFALSE 6217
// sPower := true ;
6209: LD_ADDR_EXP 73
6213: PUSH
6214: LD_INT 1
6216: ST_TO_ADDR
// if p3 = 33 then
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 33
6224: EQUAL
6225: IFFALSE 6235
// sRandom := true ;
6227: LD_ADDR_EXP 74
6231: PUSH
6232: LD_INT 1
6234: ST_TO_ADDR
// if p3 = 34 then
6235: LD_VAR 0 3
6239: PUSH
6240: LD_INT 34
6242: EQUAL
6243: IFFALSE 6253
// sShield := true ;
6245: LD_ADDR_EXP 75
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// if p3 = 35 then
6253: LD_VAR 0 3
6257: PUSH
6258: LD_INT 35
6260: EQUAL
6261: IFFALSE 6271
// sTime := true ;
6263: LD_ADDR_EXP 76
6267: PUSH
6268: LD_INT 1
6270: ST_TO_ADDR
// if p3 = 36 then
6271: LD_VAR 0 3
6275: PUSH
6276: LD_INT 36
6278: EQUAL
6279: IFFALSE 6289
// sTools := true ;
6281: LD_ADDR_EXP 77
6285: PUSH
6286: LD_INT 1
6288: ST_TO_ADDR
// if p3 = 101 then
6289: LD_VAR 0 3
6293: PUSH
6294: LD_INT 101
6296: EQUAL
6297: IFFALSE 6307
// sSold := true ;
6299: LD_ADDR_EXP 42
6303: PUSH
6304: LD_INT 1
6306: ST_TO_ADDR
// if p3 = 102 then
6307: LD_VAR 0 3
6311: PUSH
6312: LD_INT 102
6314: EQUAL
6315: IFFALSE 6325
// sDiff := true ;
6317: LD_ADDR_EXP 43
6321: PUSH
6322: LD_INT 1
6324: ST_TO_ADDR
// if p3 = 103 then
6325: LD_VAR 0 3
6329: PUSH
6330: LD_INT 103
6332: EQUAL
6333: IFFALSE 6343
// sFog := true ;
6335: LD_ADDR_EXP 46
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// if p3 = 104 then
6343: LD_VAR 0 3
6347: PUSH
6348: LD_INT 104
6350: EQUAL
6351: IFFALSE 6361
// sReset := true ;
6353: LD_ADDR_EXP 47
6357: PUSH
6358: LD_INT 1
6360: ST_TO_ADDR
// if p3 = 105 then
6361: LD_VAR 0 3
6365: PUSH
6366: LD_INT 105
6368: EQUAL
6369: IFFALSE 6379
// sSun := true ;
6371: LD_ADDR_EXP 48
6375: PUSH
6376: LD_INT 1
6378: ST_TO_ADDR
// if p3 = 106 then
6379: LD_VAR 0 3
6383: PUSH
6384: LD_INT 106
6386: EQUAL
6387: IFFALSE 6397
// sTiger := true ;
6389: LD_ADDR_EXP 44
6393: PUSH
6394: LD_INT 1
6396: ST_TO_ADDR
// if p3 = 107 then
6397: LD_VAR 0 3
6401: PUSH
6402: LD_INT 107
6404: EQUAL
6405: IFFALSE 6415
// sBomb := true ;
6407: LD_ADDR_EXP 45
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// if p3 = 108 then
6415: LD_VAR 0 3
6419: PUSH
6420: LD_INT 108
6422: EQUAL
6423: IFFALSE 6433
// sWound := true ;
6425: LD_ADDR_EXP 53
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// if p3 = 109 then
6433: LD_VAR 0 3
6437: PUSH
6438: LD_INT 109
6440: EQUAL
6441: IFFALSE 6451
// sBetray := true ;
6443: LD_ADDR_EXP 57
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// if p3 = 110 then
6451: LD_VAR 0 3
6455: PUSH
6456: LD_INT 110
6458: EQUAL
6459: IFFALSE 6469
// sContamin := true ;
6461: LD_ADDR_EXP 58
6465: PUSH
6466: LD_INT 1
6468: ST_TO_ADDR
// if p3 = 111 then
6469: LD_VAR 0 3
6473: PUSH
6474: LD_INT 111
6476: EQUAL
6477: IFFALSE 6487
// sOil := true ;
6479: LD_ADDR_EXP 60
6483: PUSH
6484: LD_INT 1
6486: ST_TO_ADDR
// if p3 = 112 then
6487: LD_VAR 0 3
6491: PUSH
6492: LD_INT 112
6494: EQUAL
6495: IFFALSE 6505
// sStu := true ;
6497: LD_ADDR_EXP 64
6501: PUSH
6502: LD_INT 1
6504: ST_TO_ADDR
// if p3 = 113 then
6505: LD_VAR 0 3
6509: PUSH
6510: LD_INT 113
6512: EQUAL
6513: IFFALSE 6523
// sBazooka := true ;
6515: LD_ADDR_EXP 67
6519: PUSH
6520: LD_INT 1
6522: ST_TO_ADDR
// if p3 = 114 then
6523: LD_VAR 0 3
6527: PUSH
6528: LD_INT 114
6530: EQUAL
6531: IFFALSE 6541
// sMortar := true ;
6533: LD_ADDR_EXP 68
6537: PUSH
6538: LD_INT 1
6540: ST_TO_ADDR
// if p3 = 115 then
6541: LD_VAR 0 3
6545: PUSH
6546: LD_INT 115
6548: EQUAL
6549: IFFALSE 6559
// sRanger := true ;
6551: LD_ADDR_EXP 78
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// if p3 = 116 then
6559: LD_VAR 0 3
6563: PUSH
6564: LD_INT 116
6566: EQUAL
6567: IFFALSE 6577
// sComputer := true ;
6569: LD_ADDR_EXP 79
6573: PUSH
6574: LD_INT 1
6576: ST_TO_ADDR
// if p3 = 117 then
6577: LD_VAR 0 3
6581: PUSH
6582: LD_INT 117
6584: EQUAL
6585: IFFALSE 6595
// s30 := true ;
6587: LD_ADDR_EXP 80
6591: PUSH
6592: LD_INT 1
6594: ST_TO_ADDR
// if p3 = 118 then
6595: LD_VAR 0 3
6599: PUSH
6600: LD_INT 118
6602: EQUAL
6603: IFFALSE 6613
// s60 := true ;
6605: LD_ADDR_EXP 81
6609: PUSH
6610: LD_INT 1
6612: ST_TO_ADDR
// end ; if p2 = hack_mode then
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 101
6620: EQUAL
6621: IFFALSE 6749
// begin case p3 of 1 :
6623: LD_VAR 0 3
6627: PUSH
6628: LD_INT 1
6630: DOUBLE
6631: EQUAL
6632: IFTRUE 6636
6634: GO 6643
6636: POP
// hHackUnlimitedResources ; 2 :
6637: CALL 18896 0 0
6641: GO 6749
6643: LD_INT 2
6645: DOUBLE
6646: EQUAL
6647: IFTRUE 6651
6649: GO 6658
6651: POP
// hHackSetLevel10 ; 3 :
6652: CALL 19029 0 0
6656: GO 6749
6658: LD_INT 3
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6673
6666: POP
// hHackSetLevel10YourUnits ; 4 :
6667: CALL 19114 0 0
6671: GO 6749
6673: LD_INT 4
6675: DOUBLE
6676: EQUAL
6677: IFTRUE 6681
6679: GO 6688
6681: POP
// hHackInvincible ; 5 :
6682: CALL 19562 0 0
6686: GO 6749
6688: LD_INT 5
6690: DOUBLE
6691: EQUAL
6692: IFTRUE 6696
6694: GO 6703
6696: POP
// hHackInvisible ; 6 :
6697: CALL 19673 0 0
6701: GO 6749
6703: LD_INT 6
6705: DOUBLE
6706: EQUAL
6707: IFTRUE 6711
6709: GO 6718
6711: POP
// hHackChangeYourSide ; 7 :
6712: CALL 19730 0 0
6716: GO 6749
6718: LD_INT 7
6720: DOUBLE
6721: EQUAL
6722: IFTRUE 6726
6724: GO 6733
6726: POP
// hHackChangeUnitSide ; 8 :
6727: CALL 19772 0 0
6731: GO 6749
6733: LD_INT 8
6735: DOUBLE
6736: EQUAL
6737: IFTRUE 6741
6739: GO 6748
6741: POP
// hHackFog ; end ;
6742: CALL 19873 0 0
6746: GO 6749
6748: POP
// end ; if p2 = game_save_mode then
6749: LD_VAR 0 2
6753: PUSH
6754: LD_INT 102
6756: EQUAL
6757: IFFALSE 6812
// begin if p3 = 1 then
6759: LD_VAR 0 3
6763: PUSH
6764: LD_INT 1
6766: EQUAL
6767: IFFALSE 6779
// globalGameSaveCounter := p4 ;
6769: LD_ADDR_EXP 24
6773: PUSH
6774: LD_VAR 0 4
6778: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6779: LD_VAR 0 3
6783: PUSH
6784: LD_INT 2
6786: EQUAL
6787: PUSH
6788: LD_EXP 24
6792: AND
6793: IFFALSE 6812
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6795: LD_STRING setGameSaveCounter(
6797: PUSH
6798: LD_EXP 24
6802: STR
6803: PUSH
6804: LD_STRING )
6806: STR
6807: PPUSH
6808: CALL_OW 559
// end ; end ;
6812: LD_VAR 0 7
6816: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6817: LD_INT 0
6819: PPUSH
// streamModeActive := false ;
6820: LD_ADDR_EXP 25
6824: PUSH
6825: LD_INT 0
6827: ST_TO_ADDR
// normalCounter := 36 ;
6828: LD_ADDR_EXP 26
6832: PUSH
6833: LD_INT 36
6835: ST_TO_ADDR
// hardcoreCounter := 18 ;
6836: LD_ADDR_EXP 27
6840: PUSH
6841: LD_INT 18
6843: ST_TO_ADDR
// sRocket := false ;
6844: LD_ADDR_EXP 30
6848: PUSH
6849: LD_INT 0
6851: ST_TO_ADDR
// sSpeed := false ;
6852: LD_ADDR_EXP 29
6856: PUSH
6857: LD_INT 0
6859: ST_TO_ADDR
// sEngine := false ;
6860: LD_ADDR_EXP 31
6864: PUSH
6865: LD_INT 0
6867: ST_TO_ADDR
// sSpec := false ;
6868: LD_ADDR_EXP 28
6872: PUSH
6873: LD_INT 0
6875: ST_TO_ADDR
// sLevel := false ;
6876: LD_ADDR_EXP 32
6880: PUSH
6881: LD_INT 0
6883: ST_TO_ADDR
// sArmoury := false ;
6884: LD_ADDR_EXP 33
6888: PUSH
6889: LD_INT 0
6891: ST_TO_ADDR
// sRadar := false ;
6892: LD_ADDR_EXP 34
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// sBunker := false ;
6900: LD_ADDR_EXP 35
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// sHack := false ;
6908: LD_ADDR_EXP 36
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// sFire := false ;
6916: LD_ADDR_EXP 37
6920: PUSH
6921: LD_INT 0
6923: ST_TO_ADDR
// sRefresh := false ;
6924: LD_ADDR_EXP 38
6928: PUSH
6929: LD_INT 0
6931: ST_TO_ADDR
// sExp := false ;
6932: LD_ADDR_EXP 39
6936: PUSH
6937: LD_INT 0
6939: ST_TO_ADDR
// sDepot := false ;
6940: LD_ADDR_EXP 40
6944: PUSH
6945: LD_INT 0
6947: ST_TO_ADDR
// sFlag := false ;
6948: LD_ADDR_EXP 41
6952: PUSH
6953: LD_INT 0
6955: ST_TO_ADDR
// sKamikadze := false ;
6956: LD_ADDR_EXP 49
6960: PUSH
6961: LD_INT 0
6963: ST_TO_ADDR
// sTroll := false ;
6964: LD_ADDR_EXP 50
6968: PUSH
6969: LD_INT 0
6971: ST_TO_ADDR
// sSlow := false ;
6972: LD_ADDR_EXP 51
6976: PUSH
6977: LD_INT 0
6979: ST_TO_ADDR
// sLack := false ;
6980: LD_ADDR_EXP 52
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// sTank := false ;
6988: LD_ADDR_EXP 54
6992: PUSH
6993: LD_INT 0
6995: ST_TO_ADDR
// sRemote := false ;
6996: LD_ADDR_EXP 55
7000: PUSH
7001: LD_INT 0
7003: ST_TO_ADDR
// sPowell := false ;
7004: LD_ADDR_EXP 56
7008: PUSH
7009: LD_INT 0
7011: ST_TO_ADDR
// sTeleport := false ;
7012: LD_ADDR_EXP 59
7016: PUSH
7017: LD_INT 0
7019: ST_TO_ADDR
// sOilTower := false ;
7020: LD_ADDR_EXP 61
7024: PUSH
7025: LD_INT 0
7027: ST_TO_ADDR
// sShovel := false ;
7028: LD_ADDR_EXP 62
7032: PUSH
7033: LD_INT 0
7035: ST_TO_ADDR
// sSheik := false ;
7036: LD_ADDR_EXP 63
7040: PUSH
7041: LD_INT 0
7043: ST_TO_ADDR
// sEarthquake := false ;
7044: LD_ADDR_EXP 65
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// sAI := false ;
7052: LD_ADDR_EXP 66
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// sCargo := false ;
7060: LD_ADDR_EXP 69
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// sDLaser := false ;
7068: LD_ADDR_EXP 70
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// sExchange := false ;
7076: LD_ADDR_EXP 71
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// sFac := false ;
7084: LD_ADDR_EXP 72
7088: PUSH
7089: LD_INT 0
7091: ST_TO_ADDR
// sPower := false ;
7092: LD_ADDR_EXP 73
7096: PUSH
7097: LD_INT 0
7099: ST_TO_ADDR
// sRandom := false ;
7100: LD_ADDR_EXP 74
7104: PUSH
7105: LD_INT 0
7107: ST_TO_ADDR
// sShield := false ;
7108: LD_ADDR_EXP 75
7112: PUSH
7113: LD_INT 0
7115: ST_TO_ADDR
// sTime := false ;
7116: LD_ADDR_EXP 76
7120: PUSH
7121: LD_INT 0
7123: ST_TO_ADDR
// sTools := false ;
7124: LD_ADDR_EXP 77
7128: PUSH
7129: LD_INT 0
7131: ST_TO_ADDR
// sSold := false ;
7132: LD_ADDR_EXP 42
7136: PUSH
7137: LD_INT 0
7139: ST_TO_ADDR
// sDiff := false ;
7140: LD_ADDR_EXP 43
7144: PUSH
7145: LD_INT 0
7147: ST_TO_ADDR
// sFog := false ;
7148: LD_ADDR_EXP 46
7152: PUSH
7153: LD_INT 0
7155: ST_TO_ADDR
// sReset := false ;
7156: LD_ADDR_EXP 47
7160: PUSH
7161: LD_INT 0
7163: ST_TO_ADDR
// sSun := false ;
7164: LD_ADDR_EXP 48
7168: PUSH
7169: LD_INT 0
7171: ST_TO_ADDR
// sTiger := false ;
7172: LD_ADDR_EXP 44
7176: PUSH
7177: LD_INT 0
7179: ST_TO_ADDR
// sBomb := false ;
7180: LD_ADDR_EXP 45
7184: PUSH
7185: LD_INT 0
7187: ST_TO_ADDR
// sWound := false ;
7188: LD_ADDR_EXP 53
7192: PUSH
7193: LD_INT 0
7195: ST_TO_ADDR
// sBetray := false ;
7196: LD_ADDR_EXP 57
7200: PUSH
7201: LD_INT 0
7203: ST_TO_ADDR
// sContamin := false ;
7204: LD_ADDR_EXP 58
7208: PUSH
7209: LD_INT 0
7211: ST_TO_ADDR
// sOil := false ;
7212: LD_ADDR_EXP 60
7216: PUSH
7217: LD_INT 0
7219: ST_TO_ADDR
// sStu := false ;
7220: LD_ADDR_EXP 64
7224: PUSH
7225: LD_INT 0
7227: ST_TO_ADDR
// sBazooka := false ;
7228: LD_ADDR_EXP 67
7232: PUSH
7233: LD_INT 0
7235: ST_TO_ADDR
// sMortar := false ;
7236: LD_ADDR_EXP 68
7240: PUSH
7241: LD_INT 0
7243: ST_TO_ADDR
// sRanger := false ;
7244: LD_ADDR_EXP 78
7248: PUSH
7249: LD_INT 0
7251: ST_TO_ADDR
// sComputer := false ;
7252: LD_ADDR_EXP 79
7256: PUSH
7257: LD_INT 0
7259: ST_TO_ADDR
// s30 := false ;
7260: LD_ADDR_EXP 80
7264: PUSH
7265: LD_INT 0
7267: ST_TO_ADDR
// s60 := false ;
7268: LD_ADDR_EXP 81
7272: PUSH
7273: LD_INT 0
7275: ST_TO_ADDR
// end ;
7276: LD_VAR 0 1
7280: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7281: LD_INT 0
7283: PPUSH
7284: PPUSH
7285: PPUSH
7286: PPUSH
7287: PPUSH
7288: PPUSH
7289: PPUSH
// result := [ ] ;
7290: LD_ADDR_VAR 0 2
7294: PUSH
7295: EMPTY
7296: ST_TO_ADDR
// if campaign_id = 1 then
7297: LD_OWVAR 69
7301: PUSH
7302: LD_INT 1
7304: EQUAL
7305: IFFALSE 10471
// begin case mission_number of 1 :
7307: LD_OWVAR 70
7311: PUSH
7312: LD_INT 1
7314: DOUBLE
7315: EQUAL
7316: IFTRUE 7320
7318: GO 7396
7320: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7321: LD_ADDR_VAR 0 2
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 4
7331: PUSH
7332: LD_INT 11
7334: PUSH
7335: LD_INT 12
7337: PUSH
7338: LD_INT 15
7340: PUSH
7341: LD_INT 16
7343: PUSH
7344: LD_INT 22
7346: PUSH
7347: LD_INT 23
7349: PUSH
7350: LD_INT 26
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 101
7366: PUSH
7367: LD_INT 102
7369: PUSH
7370: LD_INT 106
7372: PUSH
7373: LD_INT 116
7375: PUSH
7376: LD_INT 117
7378: PUSH
7379: LD_INT 118
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: ST_TO_ADDR
7394: GO 10469
7396: LD_INT 2
7398: DOUBLE
7399: EQUAL
7400: IFTRUE 7404
7402: GO 7488
7404: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7405: LD_ADDR_VAR 0 2
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 11
7418: PUSH
7419: LD_INT 12
7421: PUSH
7422: LD_INT 15
7424: PUSH
7425: LD_INT 16
7427: PUSH
7428: LD_INT 22
7430: PUSH
7431: LD_INT 23
7433: PUSH
7434: LD_INT 26
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 101
7450: PUSH
7451: LD_INT 102
7453: PUSH
7454: LD_INT 105
7456: PUSH
7457: LD_INT 106
7459: PUSH
7460: LD_INT 108
7462: PUSH
7463: LD_INT 116
7465: PUSH
7466: LD_INT 117
7468: PUSH
7469: LD_INT 118
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: ST_TO_ADDR
7486: GO 10469
7488: LD_INT 3
7490: DOUBLE
7491: EQUAL
7492: IFTRUE 7496
7494: GO 7584
7496: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7497: LD_ADDR_VAR 0 2
7501: PUSH
7502: LD_INT 2
7504: PUSH
7505: LD_INT 4
7507: PUSH
7508: LD_INT 5
7510: PUSH
7511: LD_INT 11
7513: PUSH
7514: LD_INT 12
7516: PUSH
7517: LD_INT 15
7519: PUSH
7520: LD_INT 16
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 26
7528: PUSH
7529: LD_INT 36
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 101
7546: PUSH
7547: LD_INT 102
7549: PUSH
7550: LD_INT 105
7552: PUSH
7553: LD_INT 106
7555: PUSH
7556: LD_INT 108
7558: PUSH
7559: LD_INT 116
7561: PUSH
7562: LD_INT 117
7564: PUSH
7565: LD_INT 118
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: ST_TO_ADDR
7582: GO 10469
7584: LD_INT 4
7586: DOUBLE
7587: EQUAL
7588: IFTRUE 7592
7590: GO 7688
7592: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7593: LD_ADDR_VAR 0 2
7597: PUSH
7598: LD_INT 2
7600: PUSH
7601: LD_INT 4
7603: PUSH
7604: LD_INT 5
7606: PUSH
7607: LD_INT 8
7609: PUSH
7610: LD_INT 11
7612: PUSH
7613: LD_INT 12
7615: PUSH
7616: LD_INT 15
7618: PUSH
7619: LD_INT 16
7621: PUSH
7622: LD_INT 22
7624: PUSH
7625: LD_INT 23
7627: PUSH
7628: LD_INT 26
7630: PUSH
7631: LD_INT 36
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 101
7650: PUSH
7651: LD_INT 102
7653: PUSH
7654: LD_INT 105
7656: PUSH
7657: LD_INT 106
7659: PUSH
7660: LD_INT 108
7662: PUSH
7663: LD_INT 116
7665: PUSH
7666: LD_INT 117
7668: PUSH
7669: LD_INT 118
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: ST_TO_ADDR
7686: GO 10469
7688: LD_INT 5
7690: DOUBLE
7691: EQUAL
7692: IFTRUE 7696
7694: GO 7808
7696: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7697: LD_ADDR_VAR 0 2
7701: PUSH
7702: LD_INT 2
7704: PUSH
7705: LD_INT 4
7707: PUSH
7708: LD_INT 5
7710: PUSH
7711: LD_INT 6
7713: PUSH
7714: LD_INT 8
7716: PUSH
7717: LD_INT 11
7719: PUSH
7720: LD_INT 12
7722: PUSH
7723: LD_INT 15
7725: PUSH
7726: LD_INT 16
7728: PUSH
7729: LD_INT 22
7731: PUSH
7732: LD_INT 23
7734: PUSH
7735: LD_INT 25
7737: PUSH
7738: LD_INT 26
7740: PUSH
7741: LD_INT 36
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 101
7762: PUSH
7763: LD_INT 102
7765: PUSH
7766: LD_INT 105
7768: PUSH
7769: LD_INT 106
7771: PUSH
7772: LD_INT 108
7774: PUSH
7775: LD_INT 109
7777: PUSH
7778: LD_INT 112
7780: PUSH
7781: LD_INT 116
7783: PUSH
7784: LD_INT 117
7786: PUSH
7787: LD_INT 118
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: ST_TO_ADDR
7806: GO 10469
7808: LD_INT 6
7810: DOUBLE
7811: EQUAL
7812: IFTRUE 7816
7814: GO 7948
7816: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7817: LD_ADDR_VAR 0 2
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: LD_INT 4
7827: PUSH
7828: LD_INT 5
7830: PUSH
7831: LD_INT 6
7833: PUSH
7834: LD_INT 8
7836: PUSH
7837: LD_INT 11
7839: PUSH
7840: LD_INT 12
7842: PUSH
7843: LD_INT 15
7845: PUSH
7846: LD_INT 16
7848: PUSH
7849: LD_INT 20
7851: PUSH
7852: LD_INT 21
7854: PUSH
7855: LD_INT 22
7857: PUSH
7858: LD_INT 23
7860: PUSH
7861: LD_INT 25
7863: PUSH
7864: LD_INT 26
7866: PUSH
7867: LD_INT 30
7869: PUSH
7870: LD_INT 31
7872: PUSH
7873: LD_INT 32
7875: PUSH
7876: LD_INT 36
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 101
7902: PUSH
7903: LD_INT 102
7905: PUSH
7906: LD_INT 105
7908: PUSH
7909: LD_INT 106
7911: PUSH
7912: LD_INT 108
7914: PUSH
7915: LD_INT 109
7917: PUSH
7918: LD_INT 112
7920: PUSH
7921: LD_INT 116
7923: PUSH
7924: LD_INT 117
7926: PUSH
7927: LD_INT 118
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: ST_TO_ADDR
7946: GO 10469
7948: LD_INT 7
7950: DOUBLE
7951: EQUAL
7952: IFTRUE 7956
7954: GO 8068
7956: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_INT 2
7964: PUSH
7965: LD_INT 4
7967: PUSH
7968: LD_INT 5
7970: PUSH
7971: LD_INT 7
7973: PUSH
7974: LD_INT 11
7976: PUSH
7977: LD_INT 12
7979: PUSH
7980: LD_INT 15
7982: PUSH
7983: LD_INT 16
7985: PUSH
7986: LD_INT 20
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 22
7994: PUSH
7995: LD_INT 23
7997: PUSH
7998: LD_INT 25
8000: PUSH
8001: LD_INT 26
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: PUSH
8020: LD_INT 101
8022: PUSH
8023: LD_INT 102
8025: PUSH
8026: LD_INT 103
8028: PUSH
8029: LD_INT 105
8031: PUSH
8032: LD_INT 106
8034: PUSH
8035: LD_INT 108
8037: PUSH
8038: LD_INT 112
8040: PUSH
8041: LD_INT 116
8043: PUSH
8044: LD_INT 117
8046: PUSH
8047: LD_INT 118
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: ST_TO_ADDR
8066: GO 10469
8068: LD_INT 8
8070: DOUBLE
8071: EQUAL
8072: IFTRUE 8076
8074: GO 8216
8076: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8077: LD_ADDR_VAR 0 2
8081: PUSH
8082: LD_INT 2
8084: PUSH
8085: LD_INT 4
8087: PUSH
8088: LD_INT 5
8090: PUSH
8091: LD_INT 6
8093: PUSH
8094: LD_INT 7
8096: PUSH
8097: LD_INT 8
8099: PUSH
8100: LD_INT 11
8102: PUSH
8103: LD_INT 12
8105: PUSH
8106: LD_INT 15
8108: PUSH
8109: LD_INT 16
8111: PUSH
8112: LD_INT 20
8114: PUSH
8115: LD_INT 21
8117: PUSH
8118: LD_INT 22
8120: PUSH
8121: LD_INT 23
8123: PUSH
8124: LD_INT 25
8126: PUSH
8127: LD_INT 26
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: LD_INT 31
8135: PUSH
8136: LD_INT 32
8138: PUSH
8139: LD_INT 36
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 101
8166: PUSH
8167: LD_INT 102
8169: PUSH
8170: LD_INT 103
8172: PUSH
8173: LD_INT 105
8175: PUSH
8176: LD_INT 106
8178: PUSH
8179: LD_INT 108
8181: PUSH
8182: LD_INT 109
8184: PUSH
8185: LD_INT 112
8187: PUSH
8188: LD_INT 116
8190: PUSH
8191: LD_INT 117
8193: PUSH
8194: LD_INT 118
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: ST_TO_ADDR
8214: GO 10469
8216: LD_INT 9
8218: DOUBLE
8219: EQUAL
8220: IFTRUE 8224
8222: GO 8372
8224: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8225: LD_ADDR_VAR 0 2
8229: PUSH
8230: LD_INT 2
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: LD_INT 5
8238: PUSH
8239: LD_INT 6
8241: PUSH
8242: LD_INT 7
8244: PUSH
8245: LD_INT 8
8247: PUSH
8248: LD_INT 11
8250: PUSH
8251: LD_INT 12
8253: PUSH
8254: LD_INT 15
8256: PUSH
8257: LD_INT 16
8259: PUSH
8260: LD_INT 20
8262: PUSH
8263: LD_INT 21
8265: PUSH
8266: LD_INT 22
8268: PUSH
8269: LD_INT 23
8271: PUSH
8272: LD_INT 25
8274: PUSH
8275: LD_INT 26
8277: PUSH
8278: LD_INT 28
8280: PUSH
8281: LD_INT 30
8283: PUSH
8284: LD_INT 31
8286: PUSH
8287: LD_INT 32
8289: PUSH
8290: LD_INT 36
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: PUSH
8316: LD_INT 101
8318: PUSH
8319: LD_INT 102
8321: PUSH
8322: LD_INT 103
8324: PUSH
8325: LD_INT 105
8327: PUSH
8328: LD_INT 106
8330: PUSH
8331: LD_INT 108
8333: PUSH
8334: LD_INT 109
8336: PUSH
8337: LD_INT 112
8339: PUSH
8340: LD_INT 114
8342: PUSH
8343: LD_INT 116
8345: PUSH
8346: LD_INT 117
8348: PUSH
8349: LD_INT 118
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: ST_TO_ADDR
8370: GO 10469
8372: LD_INT 10
8374: DOUBLE
8375: EQUAL
8376: IFTRUE 8380
8378: GO 8576
8380: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8381: LD_ADDR_VAR 0 2
8385: PUSH
8386: LD_INT 2
8388: PUSH
8389: LD_INT 4
8391: PUSH
8392: LD_INT 5
8394: PUSH
8395: LD_INT 6
8397: PUSH
8398: LD_INT 7
8400: PUSH
8401: LD_INT 8
8403: PUSH
8404: LD_INT 9
8406: PUSH
8407: LD_INT 10
8409: PUSH
8410: LD_INT 11
8412: PUSH
8413: LD_INT 12
8415: PUSH
8416: LD_INT 13
8418: PUSH
8419: LD_INT 14
8421: PUSH
8422: LD_INT 15
8424: PUSH
8425: LD_INT 16
8427: PUSH
8428: LD_INT 17
8430: PUSH
8431: LD_INT 18
8433: PUSH
8434: LD_INT 19
8436: PUSH
8437: LD_INT 20
8439: PUSH
8440: LD_INT 21
8442: PUSH
8443: LD_INT 22
8445: PUSH
8446: LD_INT 23
8448: PUSH
8449: LD_INT 24
8451: PUSH
8452: LD_INT 25
8454: PUSH
8455: LD_INT 26
8457: PUSH
8458: LD_INT 28
8460: PUSH
8461: LD_INT 30
8463: PUSH
8464: LD_INT 31
8466: PUSH
8467: LD_INT 32
8469: PUSH
8470: LD_INT 36
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 101
8506: PUSH
8507: LD_INT 102
8509: PUSH
8510: LD_INT 103
8512: PUSH
8513: LD_INT 104
8515: PUSH
8516: LD_INT 105
8518: PUSH
8519: LD_INT 106
8521: PUSH
8522: LD_INT 107
8524: PUSH
8525: LD_INT 108
8527: PUSH
8528: LD_INT 109
8530: PUSH
8531: LD_INT 110
8533: PUSH
8534: LD_INT 111
8536: PUSH
8537: LD_INT 112
8539: PUSH
8540: LD_INT 114
8542: PUSH
8543: LD_INT 116
8545: PUSH
8546: LD_INT 117
8548: PUSH
8549: LD_INT 118
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: ST_TO_ADDR
8574: GO 10469
8576: LD_INT 11
8578: DOUBLE
8579: EQUAL
8580: IFTRUE 8584
8582: GO 8788
8584: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8585: LD_ADDR_VAR 0 2
8589: PUSH
8590: LD_INT 2
8592: PUSH
8593: LD_INT 3
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: LD_INT 5
8601: PUSH
8602: LD_INT 6
8604: PUSH
8605: LD_INT 7
8607: PUSH
8608: LD_INT 8
8610: PUSH
8611: LD_INT 9
8613: PUSH
8614: LD_INT 10
8616: PUSH
8617: LD_INT 11
8619: PUSH
8620: LD_INT 12
8622: PUSH
8623: LD_INT 13
8625: PUSH
8626: LD_INT 14
8628: PUSH
8629: LD_INT 15
8631: PUSH
8632: LD_INT 16
8634: PUSH
8635: LD_INT 17
8637: PUSH
8638: LD_INT 18
8640: PUSH
8641: LD_INT 19
8643: PUSH
8644: LD_INT 20
8646: PUSH
8647: LD_INT 21
8649: PUSH
8650: LD_INT 22
8652: PUSH
8653: LD_INT 23
8655: PUSH
8656: LD_INT 24
8658: PUSH
8659: LD_INT 25
8661: PUSH
8662: LD_INT 26
8664: PUSH
8665: LD_INT 28
8667: PUSH
8668: LD_INT 30
8670: PUSH
8671: LD_INT 31
8673: PUSH
8674: LD_INT 32
8676: PUSH
8677: LD_INT 34
8679: PUSH
8680: LD_INT 36
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: PUSH
8716: LD_INT 101
8718: PUSH
8719: LD_INT 102
8721: PUSH
8722: LD_INT 103
8724: PUSH
8725: LD_INT 104
8727: PUSH
8728: LD_INT 105
8730: PUSH
8731: LD_INT 106
8733: PUSH
8734: LD_INT 107
8736: PUSH
8737: LD_INT 108
8739: PUSH
8740: LD_INT 109
8742: PUSH
8743: LD_INT 110
8745: PUSH
8746: LD_INT 111
8748: PUSH
8749: LD_INT 112
8751: PUSH
8752: LD_INT 114
8754: PUSH
8755: LD_INT 116
8757: PUSH
8758: LD_INT 117
8760: PUSH
8761: LD_INT 118
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: ST_TO_ADDR
8786: GO 10469
8788: LD_INT 12
8790: DOUBLE
8791: EQUAL
8792: IFTRUE 8796
8794: GO 9016
8796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: LD_INT 2
8807: PUSH
8808: LD_INT 3
8810: PUSH
8811: LD_INT 4
8813: PUSH
8814: LD_INT 5
8816: PUSH
8817: LD_INT 6
8819: PUSH
8820: LD_INT 7
8822: PUSH
8823: LD_INT 8
8825: PUSH
8826: LD_INT 9
8828: PUSH
8829: LD_INT 10
8831: PUSH
8832: LD_INT 11
8834: PUSH
8835: LD_INT 12
8837: PUSH
8838: LD_INT 13
8840: PUSH
8841: LD_INT 14
8843: PUSH
8844: LD_INT 15
8846: PUSH
8847: LD_INT 16
8849: PUSH
8850: LD_INT 17
8852: PUSH
8853: LD_INT 18
8855: PUSH
8856: LD_INT 19
8858: PUSH
8859: LD_INT 20
8861: PUSH
8862: LD_INT 21
8864: PUSH
8865: LD_INT 22
8867: PUSH
8868: LD_INT 23
8870: PUSH
8871: LD_INT 24
8873: PUSH
8874: LD_INT 25
8876: PUSH
8877: LD_INT 26
8879: PUSH
8880: LD_INT 27
8882: PUSH
8883: LD_INT 28
8885: PUSH
8886: LD_INT 30
8888: PUSH
8889: LD_INT 31
8891: PUSH
8892: LD_INT 32
8894: PUSH
8895: LD_INT 33
8897: PUSH
8898: LD_INT 34
8900: PUSH
8901: LD_INT 36
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 101
8942: PUSH
8943: LD_INT 102
8945: PUSH
8946: LD_INT 103
8948: PUSH
8949: LD_INT 104
8951: PUSH
8952: LD_INT 105
8954: PUSH
8955: LD_INT 106
8957: PUSH
8958: LD_INT 107
8960: PUSH
8961: LD_INT 108
8963: PUSH
8964: LD_INT 109
8966: PUSH
8967: LD_INT 110
8969: PUSH
8970: LD_INT 111
8972: PUSH
8973: LD_INT 112
8975: PUSH
8976: LD_INT 113
8978: PUSH
8979: LD_INT 114
8981: PUSH
8982: LD_INT 116
8984: PUSH
8985: LD_INT 117
8987: PUSH
8988: LD_INT 118
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: ST_TO_ADDR
9014: GO 10469
9016: LD_INT 13
9018: DOUBLE
9019: EQUAL
9020: IFTRUE 9024
9022: GO 9232
9024: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9025: LD_ADDR_VAR 0 2
9029: PUSH
9030: LD_INT 1
9032: PUSH
9033: LD_INT 2
9035: PUSH
9036: LD_INT 3
9038: PUSH
9039: LD_INT 4
9041: PUSH
9042: LD_INT 5
9044: PUSH
9045: LD_INT 8
9047: PUSH
9048: LD_INT 9
9050: PUSH
9051: LD_INT 10
9053: PUSH
9054: LD_INT 11
9056: PUSH
9057: LD_INT 12
9059: PUSH
9060: LD_INT 14
9062: PUSH
9063: LD_INT 15
9065: PUSH
9066: LD_INT 16
9068: PUSH
9069: LD_INT 17
9071: PUSH
9072: LD_INT 18
9074: PUSH
9075: LD_INT 19
9077: PUSH
9078: LD_INT 20
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 22
9086: PUSH
9087: LD_INT 23
9089: PUSH
9090: LD_INT 24
9092: PUSH
9093: LD_INT 25
9095: PUSH
9096: LD_INT 26
9098: PUSH
9099: LD_INT 27
9101: PUSH
9102: LD_INT 28
9104: PUSH
9105: LD_INT 30
9107: PUSH
9108: LD_INT 31
9110: PUSH
9111: LD_INT 32
9113: PUSH
9114: LD_INT 33
9116: PUSH
9117: LD_INT 34
9119: PUSH
9120: LD_INT 36
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 101
9158: PUSH
9159: LD_INT 102
9161: PUSH
9162: LD_INT 103
9164: PUSH
9165: LD_INT 104
9167: PUSH
9168: LD_INT 105
9170: PUSH
9171: LD_INT 106
9173: PUSH
9174: LD_INT 107
9176: PUSH
9177: LD_INT 108
9179: PUSH
9180: LD_INT 109
9182: PUSH
9183: LD_INT 110
9185: PUSH
9186: LD_INT 111
9188: PUSH
9189: LD_INT 112
9191: PUSH
9192: LD_INT 113
9194: PUSH
9195: LD_INT 114
9197: PUSH
9198: LD_INT 116
9200: PUSH
9201: LD_INT 117
9203: PUSH
9204: LD_INT 118
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: ST_TO_ADDR
9230: GO 10469
9232: LD_INT 14
9234: DOUBLE
9235: EQUAL
9236: IFTRUE 9240
9238: GO 9464
9240: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_INT 1
9248: PUSH
9249: LD_INT 2
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: LD_INT 4
9257: PUSH
9258: LD_INT 5
9260: PUSH
9261: LD_INT 6
9263: PUSH
9264: LD_INT 7
9266: PUSH
9267: LD_INT 8
9269: PUSH
9270: LD_INT 9
9272: PUSH
9273: LD_INT 10
9275: PUSH
9276: LD_INT 11
9278: PUSH
9279: LD_INT 12
9281: PUSH
9282: LD_INT 13
9284: PUSH
9285: LD_INT 14
9287: PUSH
9288: LD_INT 15
9290: PUSH
9291: LD_INT 16
9293: PUSH
9294: LD_INT 17
9296: PUSH
9297: LD_INT 18
9299: PUSH
9300: LD_INT 19
9302: PUSH
9303: LD_INT 20
9305: PUSH
9306: LD_INT 21
9308: PUSH
9309: LD_INT 22
9311: PUSH
9312: LD_INT 23
9314: PUSH
9315: LD_INT 24
9317: PUSH
9318: LD_INT 25
9320: PUSH
9321: LD_INT 26
9323: PUSH
9324: LD_INT 27
9326: PUSH
9327: LD_INT 28
9329: PUSH
9330: LD_INT 29
9332: PUSH
9333: LD_INT 30
9335: PUSH
9336: LD_INT 31
9338: PUSH
9339: LD_INT 32
9341: PUSH
9342: LD_INT 33
9344: PUSH
9345: LD_INT 34
9347: PUSH
9348: LD_INT 36
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 101
9390: PUSH
9391: LD_INT 102
9393: PUSH
9394: LD_INT 103
9396: PUSH
9397: LD_INT 104
9399: PUSH
9400: LD_INT 105
9402: PUSH
9403: LD_INT 106
9405: PUSH
9406: LD_INT 107
9408: PUSH
9409: LD_INT 108
9411: PUSH
9412: LD_INT 109
9414: PUSH
9415: LD_INT 110
9417: PUSH
9418: LD_INT 111
9420: PUSH
9421: LD_INT 112
9423: PUSH
9424: LD_INT 113
9426: PUSH
9427: LD_INT 114
9429: PUSH
9430: LD_INT 116
9432: PUSH
9433: LD_INT 117
9435: PUSH
9436: LD_INT 118
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: ST_TO_ADDR
9462: GO 10469
9464: LD_INT 15
9466: DOUBLE
9467: EQUAL
9468: IFTRUE 9472
9470: GO 9696
9472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9473: LD_ADDR_VAR 0 2
9477: PUSH
9478: LD_INT 1
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: LD_INT 3
9486: PUSH
9487: LD_INT 4
9489: PUSH
9490: LD_INT 5
9492: PUSH
9493: LD_INT 6
9495: PUSH
9496: LD_INT 7
9498: PUSH
9499: LD_INT 8
9501: PUSH
9502: LD_INT 9
9504: PUSH
9505: LD_INT 10
9507: PUSH
9508: LD_INT 11
9510: PUSH
9511: LD_INT 12
9513: PUSH
9514: LD_INT 13
9516: PUSH
9517: LD_INT 14
9519: PUSH
9520: LD_INT 15
9522: PUSH
9523: LD_INT 16
9525: PUSH
9526: LD_INT 17
9528: PUSH
9529: LD_INT 18
9531: PUSH
9532: LD_INT 19
9534: PUSH
9535: LD_INT 20
9537: PUSH
9538: LD_INT 21
9540: PUSH
9541: LD_INT 22
9543: PUSH
9544: LD_INT 23
9546: PUSH
9547: LD_INT 24
9549: PUSH
9550: LD_INT 25
9552: PUSH
9553: LD_INT 26
9555: PUSH
9556: LD_INT 27
9558: PUSH
9559: LD_INT 28
9561: PUSH
9562: LD_INT 29
9564: PUSH
9565: LD_INT 30
9567: PUSH
9568: LD_INT 31
9570: PUSH
9571: LD_INT 32
9573: PUSH
9574: LD_INT 33
9576: PUSH
9577: LD_INT 34
9579: PUSH
9580: LD_INT 36
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 101
9622: PUSH
9623: LD_INT 102
9625: PUSH
9626: LD_INT 103
9628: PUSH
9629: LD_INT 104
9631: PUSH
9632: LD_INT 105
9634: PUSH
9635: LD_INT 106
9637: PUSH
9638: LD_INT 107
9640: PUSH
9641: LD_INT 108
9643: PUSH
9644: LD_INT 109
9646: PUSH
9647: LD_INT 110
9649: PUSH
9650: LD_INT 111
9652: PUSH
9653: LD_INT 112
9655: PUSH
9656: LD_INT 113
9658: PUSH
9659: LD_INT 114
9661: PUSH
9662: LD_INT 116
9664: PUSH
9665: LD_INT 117
9667: PUSH
9668: LD_INT 118
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: ST_TO_ADDR
9694: GO 10469
9696: LD_INT 16
9698: DOUBLE
9699: EQUAL
9700: IFTRUE 9704
9702: GO 9840
9704: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9705: LD_ADDR_VAR 0 2
9709: PUSH
9710: LD_INT 2
9712: PUSH
9713: LD_INT 4
9715: PUSH
9716: LD_INT 5
9718: PUSH
9719: LD_INT 7
9721: PUSH
9722: LD_INT 11
9724: PUSH
9725: LD_INT 12
9727: PUSH
9728: LD_INT 15
9730: PUSH
9731: LD_INT 16
9733: PUSH
9734: LD_INT 20
9736: PUSH
9737: LD_INT 21
9739: PUSH
9740: LD_INT 22
9742: PUSH
9743: LD_INT 23
9745: PUSH
9746: LD_INT 25
9748: PUSH
9749: LD_INT 26
9751: PUSH
9752: LD_INT 30
9754: PUSH
9755: LD_INT 31
9757: PUSH
9758: LD_INT 32
9760: PUSH
9761: LD_INT 33
9763: PUSH
9764: LD_INT 34
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 101
9790: PUSH
9791: LD_INT 102
9793: PUSH
9794: LD_INT 103
9796: PUSH
9797: LD_INT 106
9799: PUSH
9800: LD_INT 108
9802: PUSH
9803: LD_INT 112
9805: PUSH
9806: LD_INT 113
9808: PUSH
9809: LD_INT 114
9811: PUSH
9812: LD_INT 116
9814: PUSH
9815: LD_INT 117
9817: PUSH
9818: LD_INT 118
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
9838: GO 10469
9840: LD_INT 17
9842: DOUBLE
9843: EQUAL
9844: IFTRUE 9848
9846: GO 10072
9848: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9849: LD_ADDR_VAR 0 2
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: LD_INT 2
9859: PUSH
9860: LD_INT 3
9862: PUSH
9863: LD_INT 4
9865: PUSH
9866: LD_INT 5
9868: PUSH
9869: LD_INT 6
9871: PUSH
9872: LD_INT 7
9874: PUSH
9875: LD_INT 8
9877: PUSH
9878: LD_INT 9
9880: PUSH
9881: LD_INT 10
9883: PUSH
9884: LD_INT 11
9886: PUSH
9887: LD_INT 12
9889: PUSH
9890: LD_INT 13
9892: PUSH
9893: LD_INT 14
9895: PUSH
9896: LD_INT 15
9898: PUSH
9899: LD_INT 16
9901: PUSH
9902: LD_INT 17
9904: PUSH
9905: LD_INT 18
9907: PUSH
9908: LD_INT 19
9910: PUSH
9911: LD_INT 20
9913: PUSH
9914: LD_INT 21
9916: PUSH
9917: LD_INT 22
9919: PUSH
9920: LD_INT 23
9922: PUSH
9923: LD_INT 24
9925: PUSH
9926: LD_INT 25
9928: PUSH
9929: LD_INT 26
9931: PUSH
9932: LD_INT 27
9934: PUSH
9935: LD_INT 28
9937: PUSH
9938: LD_INT 29
9940: PUSH
9941: LD_INT 30
9943: PUSH
9944: LD_INT 31
9946: PUSH
9947: LD_INT 32
9949: PUSH
9950: LD_INT 33
9952: PUSH
9953: LD_INT 34
9955: PUSH
9956: LD_INT 36
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 101
9998: PUSH
9999: LD_INT 102
10001: PUSH
10002: LD_INT 103
10004: PUSH
10005: LD_INT 104
10007: PUSH
10008: LD_INT 105
10010: PUSH
10011: LD_INT 106
10013: PUSH
10014: LD_INT 107
10016: PUSH
10017: LD_INT 108
10019: PUSH
10020: LD_INT 109
10022: PUSH
10023: LD_INT 110
10025: PUSH
10026: LD_INT 111
10028: PUSH
10029: LD_INT 112
10031: PUSH
10032: LD_INT 113
10034: PUSH
10035: LD_INT 114
10037: PUSH
10038: LD_INT 116
10040: PUSH
10041: LD_INT 117
10043: PUSH
10044: LD_INT 118
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: ST_TO_ADDR
10070: GO 10469
10072: LD_INT 18
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10228
10080: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10081: LD_ADDR_VAR 0 2
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: LD_INT 4
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: LD_INT 7
10097: PUSH
10098: LD_INT 11
10100: PUSH
10101: LD_INT 12
10103: PUSH
10104: LD_INT 15
10106: PUSH
10107: LD_INT 16
10109: PUSH
10110: LD_INT 20
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 22
10118: PUSH
10119: LD_INT 23
10121: PUSH
10122: LD_INT 25
10124: PUSH
10125: LD_INT 26
10127: PUSH
10128: LD_INT 30
10130: PUSH
10131: LD_INT 31
10133: PUSH
10134: LD_INT 32
10136: PUSH
10137: LD_INT 33
10139: PUSH
10140: LD_INT 34
10142: PUSH
10143: LD_INT 35
10145: PUSH
10146: LD_INT 36
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 101
10174: PUSH
10175: LD_INT 102
10177: PUSH
10178: LD_INT 103
10180: PUSH
10181: LD_INT 106
10183: PUSH
10184: LD_INT 108
10186: PUSH
10187: LD_INT 112
10189: PUSH
10190: LD_INT 113
10192: PUSH
10193: LD_INT 114
10195: PUSH
10196: LD_INT 115
10198: PUSH
10199: LD_INT 116
10201: PUSH
10202: LD_INT 117
10204: PUSH
10205: LD_INT 118
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: ST_TO_ADDR
10226: GO 10469
10228: LD_INT 19
10230: DOUBLE
10231: EQUAL
10232: IFTRUE 10236
10234: GO 10468
10236: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10237: LD_ADDR_VAR 0 2
10241: PUSH
10242: LD_INT 1
10244: PUSH
10245: LD_INT 2
10247: PUSH
10248: LD_INT 3
10250: PUSH
10251: LD_INT 4
10253: PUSH
10254: LD_INT 5
10256: PUSH
10257: LD_INT 6
10259: PUSH
10260: LD_INT 7
10262: PUSH
10263: LD_INT 8
10265: PUSH
10266: LD_INT 9
10268: PUSH
10269: LD_INT 10
10271: PUSH
10272: LD_INT 11
10274: PUSH
10275: LD_INT 12
10277: PUSH
10278: LD_INT 13
10280: PUSH
10281: LD_INT 14
10283: PUSH
10284: LD_INT 15
10286: PUSH
10287: LD_INT 16
10289: PUSH
10290: LD_INT 17
10292: PUSH
10293: LD_INT 18
10295: PUSH
10296: LD_INT 19
10298: PUSH
10299: LD_INT 20
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 22
10307: PUSH
10308: LD_INT 23
10310: PUSH
10311: LD_INT 24
10313: PUSH
10314: LD_INT 25
10316: PUSH
10317: LD_INT 26
10319: PUSH
10320: LD_INT 27
10322: PUSH
10323: LD_INT 28
10325: PUSH
10326: LD_INT 29
10328: PUSH
10329: LD_INT 30
10331: PUSH
10332: LD_INT 31
10334: PUSH
10335: LD_INT 32
10337: PUSH
10338: LD_INT 33
10340: PUSH
10341: LD_INT 34
10343: PUSH
10344: LD_INT 35
10346: PUSH
10347: LD_INT 36
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 101
10390: PUSH
10391: LD_INT 102
10393: PUSH
10394: LD_INT 103
10396: PUSH
10397: LD_INT 104
10399: PUSH
10400: LD_INT 105
10402: PUSH
10403: LD_INT 106
10405: PUSH
10406: LD_INT 107
10408: PUSH
10409: LD_INT 108
10411: PUSH
10412: LD_INT 109
10414: PUSH
10415: LD_INT 110
10417: PUSH
10418: LD_INT 111
10420: PUSH
10421: LD_INT 112
10423: PUSH
10424: LD_INT 113
10426: PUSH
10427: LD_INT 114
10429: PUSH
10430: LD_INT 115
10432: PUSH
10433: LD_INT 116
10435: PUSH
10436: LD_INT 117
10438: PUSH
10439: LD_INT 118
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: ST_TO_ADDR
10466: GO 10469
10468: POP
// end else
10469: GO 10700
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10471: LD_ADDR_VAR 0 2
10475: PUSH
10476: LD_INT 1
10478: PUSH
10479: LD_INT 2
10481: PUSH
10482: LD_INT 3
10484: PUSH
10485: LD_INT 4
10487: PUSH
10488: LD_INT 5
10490: PUSH
10491: LD_INT 6
10493: PUSH
10494: LD_INT 7
10496: PUSH
10497: LD_INT 8
10499: PUSH
10500: LD_INT 9
10502: PUSH
10503: LD_INT 10
10505: PUSH
10506: LD_INT 11
10508: PUSH
10509: LD_INT 12
10511: PUSH
10512: LD_INT 13
10514: PUSH
10515: LD_INT 14
10517: PUSH
10518: LD_INT 15
10520: PUSH
10521: LD_INT 16
10523: PUSH
10524: LD_INT 17
10526: PUSH
10527: LD_INT 18
10529: PUSH
10530: LD_INT 19
10532: PUSH
10533: LD_INT 20
10535: PUSH
10536: LD_INT 21
10538: PUSH
10539: LD_INT 22
10541: PUSH
10542: LD_INT 23
10544: PUSH
10545: LD_INT 24
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 26
10553: PUSH
10554: LD_INT 27
10556: PUSH
10557: LD_INT 28
10559: PUSH
10560: LD_INT 29
10562: PUSH
10563: LD_INT 30
10565: PUSH
10566: LD_INT 31
10568: PUSH
10569: LD_INT 32
10571: PUSH
10572: LD_INT 33
10574: PUSH
10575: LD_INT 34
10577: PUSH
10578: LD_INT 35
10580: PUSH
10581: LD_INT 36
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 101
10624: PUSH
10625: LD_INT 102
10627: PUSH
10628: LD_INT 103
10630: PUSH
10631: LD_INT 104
10633: PUSH
10634: LD_INT 105
10636: PUSH
10637: LD_INT 106
10639: PUSH
10640: LD_INT 107
10642: PUSH
10643: LD_INT 108
10645: PUSH
10646: LD_INT 109
10648: PUSH
10649: LD_INT 110
10651: PUSH
10652: LD_INT 111
10654: PUSH
10655: LD_INT 112
10657: PUSH
10658: LD_INT 113
10660: PUSH
10661: LD_INT 114
10663: PUSH
10664: LD_INT 115
10666: PUSH
10667: LD_INT 116
10669: PUSH
10670: LD_INT 117
10672: PUSH
10673: LD_INT 118
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: ST_TO_ADDR
// if result then
10700: LD_VAR 0 2
10704: IFFALSE 11490
// begin normal :=  ;
10706: LD_ADDR_VAR 0 5
10710: PUSH
10711: LD_STRING 
10713: ST_TO_ADDR
// hardcore :=  ;
10714: LD_ADDR_VAR 0 6
10718: PUSH
10719: LD_STRING 
10721: ST_TO_ADDR
// active :=  ;
10722: LD_ADDR_VAR 0 7
10726: PUSH
10727: LD_STRING 
10729: ST_TO_ADDR
// for i = 1 to normalCounter do
10730: LD_ADDR_VAR 0 8
10734: PUSH
10735: DOUBLE
10736: LD_INT 1
10738: DEC
10739: ST_TO_ADDR
10740: LD_EXP 26
10744: PUSH
10745: FOR_TO
10746: IFFALSE 10847
// begin tmp := 0 ;
10748: LD_ADDR_VAR 0 3
10752: PUSH
10753: LD_STRING 0
10755: ST_TO_ADDR
// if result [ 1 ] then
10756: LD_VAR 0 2
10760: PUSH
10761: LD_INT 1
10763: ARRAY
10764: IFFALSE 10829
// if result [ 1 ] [ 1 ] = i then
10766: LD_VAR 0 2
10770: PUSH
10771: LD_INT 1
10773: ARRAY
10774: PUSH
10775: LD_INT 1
10777: ARRAY
10778: PUSH
10779: LD_VAR 0 8
10783: EQUAL
10784: IFFALSE 10829
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10786: LD_ADDR_VAR 0 2
10790: PUSH
10791: LD_VAR 0 2
10795: PPUSH
10796: LD_INT 1
10798: PPUSH
10799: LD_VAR 0 2
10803: PUSH
10804: LD_INT 1
10806: ARRAY
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 3
10815: PPUSH
10816: CALL_OW 1
10820: ST_TO_ADDR
// tmp := 1 ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_STRING 1
10828: ST_TO_ADDR
// end ; normal := normal & tmp ;
10829: LD_ADDR_VAR 0 5
10833: PUSH
10834: LD_VAR 0 5
10838: PUSH
10839: LD_VAR 0 3
10843: STR
10844: ST_TO_ADDR
// end ;
10845: GO 10745
10847: POP
10848: POP
// for i = 1 to hardcoreCounter do
10849: LD_ADDR_VAR 0 8
10853: PUSH
10854: DOUBLE
10855: LD_INT 1
10857: DEC
10858: ST_TO_ADDR
10859: LD_EXP 27
10863: PUSH
10864: FOR_TO
10865: IFFALSE 10970
// begin tmp := 0 ;
10867: LD_ADDR_VAR 0 3
10871: PUSH
10872: LD_STRING 0
10874: ST_TO_ADDR
// if result [ 2 ] then
10875: LD_VAR 0 2
10879: PUSH
10880: LD_INT 2
10882: ARRAY
10883: IFFALSE 10952
// if result [ 2 ] [ 1 ] = 100 + i then
10885: LD_VAR 0 2
10889: PUSH
10890: LD_INT 2
10892: ARRAY
10893: PUSH
10894: LD_INT 1
10896: ARRAY
10897: PUSH
10898: LD_INT 100
10900: PUSH
10901: LD_VAR 0 8
10905: PLUS
10906: EQUAL
10907: IFFALSE 10952
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10909: LD_ADDR_VAR 0 2
10913: PUSH
10914: LD_VAR 0 2
10918: PPUSH
10919: LD_INT 2
10921: PPUSH
10922: LD_VAR 0 2
10926: PUSH
10927: LD_INT 2
10929: ARRAY
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 3
10938: PPUSH
10939: CALL_OW 1
10943: ST_TO_ADDR
// tmp := 1 ;
10944: LD_ADDR_VAR 0 3
10948: PUSH
10949: LD_STRING 1
10951: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10952: LD_ADDR_VAR 0 6
10956: PUSH
10957: LD_VAR 0 6
10961: PUSH
10962: LD_VAR 0 3
10966: STR
10967: ST_TO_ADDR
// end ;
10968: GO 10864
10970: POP
10971: POP
// if isGameLoad then
10972: LD_VAR 0 1
10976: IFFALSE 11451
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10978: LD_ADDR_VAR 0 4
10982: PUSH
10983: LD_EXP 30
10987: PUSH
10988: LD_EXP 29
10992: PUSH
10993: LD_EXP 31
10997: PUSH
10998: LD_EXP 28
11002: PUSH
11003: LD_EXP 32
11007: PUSH
11008: LD_EXP 33
11012: PUSH
11013: LD_EXP 34
11017: PUSH
11018: LD_EXP 35
11022: PUSH
11023: LD_EXP 36
11027: PUSH
11028: LD_EXP 37
11032: PUSH
11033: LD_EXP 38
11037: PUSH
11038: LD_EXP 39
11042: PUSH
11043: LD_EXP 40
11047: PUSH
11048: LD_EXP 41
11052: PUSH
11053: LD_EXP 49
11057: PUSH
11058: LD_EXP 50
11062: PUSH
11063: LD_EXP 51
11067: PUSH
11068: LD_EXP 52
11072: PUSH
11073: LD_EXP 54
11077: PUSH
11078: LD_EXP 55
11082: PUSH
11083: LD_EXP 56
11087: PUSH
11088: LD_EXP 59
11092: PUSH
11093: LD_EXP 61
11097: PUSH
11098: LD_EXP 62
11102: PUSH
11103: LD_EXP 63
11107: PUSH
11108: LD_EXP 65
11112: PUSH
11113: LD_EXP 66
11117: PUSH
11118: LD_EXP 69
11122: PUSH
11123: LD_EXP 70
11127: PUSH
11128: LD_EXP 71
11132: PUSH
11133: LD_EXP 72
11137: PUSH
11138: LD_EXP 73
11142: PUSH
11143: LD_EXP 74
11147: PUSH
11148: LD_EXP 75
11152: PUSH
11153: LD_EXP 76
11157: PUSH
11158: LD_EXP 77
11162: PUSH
11163: LD_EXP 42
11167: PUSH
11168: LD_EXP 43
11172: PUSH
11173: LD_EXP 46
11177: PUSH
11178: LD_EXP 47
11182: PUSH
11183: LD_EXP 48
11187: PUSH
11188: LD_EXP 44
11192: PUSH
11193: LD_EXP 45
11197: PUSH
11198: LD_EXP 53
11202: PUSH
11203: LD_EXP 57
11207: PUSH
11208: LD_EXP 58
11212: PUSH
11213: LD_EXP 60
11217: PUSH
11218: LD_EXP 64
11222: PUSH
11223: LD_EXP 67
11227: PUSH
11228: LD_EXP 68
11232: PUSH
11233: LD_EXP 78
11237: PUSH
11238: LD_EXP 79
11242: PUSH
11243: LD_EXP 80
11247: PUSH
11248: LD_EXP 81
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: ST_TO_ADDR
// tmp :=  ;
11309: LD_ADDR_VAR 0 3
11313: PUSH
11314: LD_STRING 
11316: ST_TO_ADDR
// for i = 1 to normalCounter do
11317: LD_ADDR_VAR 0 8
11321: PUSH
11322: DOUBLE
11323: LD_INT 1
11325: DEC
11326: ST_TO_ADDR
11327: LD_EXP 26
11331: PUSH
11332: FOR_TO
11333: IFFALSE 11369
// begin if flags [ i ] then
11335: LD_VAR 0 4
11339: PUSH
11340: LD_VAR 0 8
11344: ARRAY
11345: IFFALSE 11367
// tmp := tmp & i & ; ;
11347: LD_ADDR_VAR 0 3
11351: PUSH
11352: LD_VAR 0 3
11356: PUSH
11357: LD_VAR 0 8
11361: STR
11362: PUSH
11363: LD_STRING ;
11365: STR
11366: ST_TO_ADDR
// end ;
11367: GO 11332
11369: POP
11370: POP
// for i = 1 to hardcoreCounter do
11371: LD_ADDR_VAR 0 8
11375: PUSH
11376: DOUBLE
11377: LD_INT 1
11379: DEC
11380: ST_TO_ADDR
11381: LD_EXP 27
11385: PUSH
11386: FOR_TO
11387: IFFALSE 11433
// begin if flags [ normalCounter + i ] then
11389: LD_VAR 0 4
11393: PUSH
11394: LD_EXP 26
11398: PUSH
11399: LD_VAR 0 8
11403: PLUS
11404: ARRAY
11405: IFFALSE 11431
// tmp := tmp & ( 100 + i ) & ; ;
11407: LD_ADDR_VAR 0 3
11411: PUSH
11412: LD_VAR 0 3
11416: PUSH
11417: LD_INT 100
11419: PUSH
11420: LD_VAR 0 8
11424: PLUS
11425: STR
11426: PUSH
11427: LD_STRING ;
11429: STR
11430: ST_TO_ADDR
// end ;
11431: GO 11386
11433: POP
11434: POP
// if tmp then
11435: LD_VAR 0 3
11439: IFFALSE 11451
// active := tmp ;
11441: LD_ADDR_VAR 0 7
11445: PUSH
11446: LD_VAR 0 3
11450: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11451: LD_STRING getStreamItemsFromMission("
11453: PUSH
11454: LD_VAR 0 5
11458: STR
11459: PUSH
11460: LD_STRING ","
11462: STR
11463: PUSH
11464: LD_VAR 0 6
11468: STR
11469: PUSH
11470: LD_STRING ","
11472: STR
11473: PUSH
11474: LD_VAR 0 7
11478: STR
11479: PUSH
11480: LD_STRING ")
11482: STR
11483: PPUSH
11484: CALL_OW 559
// end else
11488: GO 11497
// ToLua ( getStreamItemsFromMission("","","") ) ;
11490: LD_STRING getStreamItemsFromMission("","","")
11492: PPUSH
11493: CALL_OW 559
// end ;
11497: LD_VAR 0 2
11501: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11502: LD_EXP 25
11506: PUSH
11507: LD_EXP 30
11511: AND
11512: IFFALSE 11636
11514: GO 11516
11516: DISABLE
11517: LD_INT 0
11519: PPUSH
11520: PPUSH
// begin enable ;
11521: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 22
11529: PUSH
11530: LD_OWVAR 2
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 2
11541: PUSH
11542: LD_INT 34
11544: PUSH
11545: LD_INT 7
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 34
11554: PUSH
11555: LD_INT 45
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 34
11564: PUSH
11565: LD_INT 28
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 34
11574: PUSH
11575: LD_INT 47
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: ST_TO_ADDR
// if not tmp then
11598: LD_VAR 0 2
11602: NOT
11603: IFFALSE 11607
// exit ;
11605: GO 11636
// for i in tmp do
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: LD_VAR 0 2
11616: PUSH
11617: FOR_IN
11618: IFFALSE 11634
// begin SetLives ( i , 0 ) ;
11620: LD_VAR 0 1
11624: PPUSH
11625: LD_INT 0
11627: PPUSH
11628: CALL_OW 234
// end ;
11632: GO 11617
11634: POP
11635: POP
// end ;
11636: PPOPN 2
11638: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11639: LD_EXP 25
11643: PUSH
11644: LD_EXP 31
11648: AND
11649: IFFALSE 11733
11651: GO 11653
11653: DISABLE
11654: LD_INT 0
11656: PPUSH
11657: PPUSH
// begin enable ;
11658: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11659: LD_ADDR_VAR 0 2
11663: PUSH
11664: LD_INT 22
11666: PUSH
11667: LD_OWVAR 2
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 32
11678: PUSH
11679: LD_INT 3
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PPUSH
11690: CALL_OW 69
11694: ST_TO_ADDR
// if not tmp then
11695: LD_VAR 0 2
11699: NOT
11700: IFFALSE 11704
// exit ;
11702: GO 11733
// for i in tmp do
11704: LD_ADDR_VAR 0 1
11708: PUSH
11709: LD_VAR 0 2
11713: PUSH
11714: FOR_IN
11715: IFFALSE 11731
// begin SetLives ( i , 0 ) ;
11717: LD_VAR 0 1
11721: PPUSH
11722: LD_INT 0
11724: PPUSH
11725: CALL_OW 234
// end ;
11729: GO 11714
11731: POP
11732: POP
// end ;
11733: PPOPN 2
11735: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11736: LD_EXP 25
11740: PUSH
11741: LD_EXP 28
11745: AND
11746: IFFALSE 11839
11748: GO 11750
11750: DISABLE
11751: LD_INT 0
11753: PPUSH
// begin enable ;
11754: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_OWVAR 2
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 2
11774: PUSH
11775: LD_INT 25
11777: PUSH
11778: LD_INT 5
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 25
11787: PUSH
11788: LD_INT 9
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 25
11797: PUSH
11798: LD_INT 8
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PPUSH
11815: CALL_OW 69
11819: PUSH
11820: FOR_IN
11821: IFFALSE 11837
// begin SetClass ( i , 1 ) ;
11823: LD_VAR 0 1
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: CALL_OW 336
// end ;
11835: GO 11820
11837: POP
11838: POP
// end ;
11839: PPOPN 1
11841: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11842: LD_EXP 25
11846: PUSH
11847: LD_EXP 29
11851: AND
11852: PUSH
11853: LD_OWVAR 65
11857: PUSH
11858: LD_INT 7
11860: LESS
11861: AND
11862: IFFALSE 11876
11864: GO 11866
11866: DISABLE
// begin enable ;
11867: ENABLE
// game_speed := 7 ;
11868: LD_ADDR_OWVAR 65
11872: PUSH
11873: LD_INT 7
11875: ST_TO_ADDR
// end ;
11876: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11877: LD_EXP 25
11881: PUSH
11882: LD_EXP 32
11886: AND
11887: IFFALSE 12089
11889: GO 11891
11891: DISABLE
11892: LD_INT 0
11894: PPUSH
11895: PPUSH
11896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11897: LD_ADDR_VAR 0 3
11901: PUSH
11902: LD_INT 81
11904: PUSH
11905: LD_OWVAR 2
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 21
11916: PUSH
11917: LD_INT 1
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PPUSH
11928: CALL_OW 69
11932: ST_TO_ADDR
// if not tmp then
11933: LD_VAR 0 3
11937: NOT
11938: IFFALSE 11942
// exit ;
11940: GO 12089
// if tmp > 5 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 5
11949: GREATER
11950: IFFALSE 11962
// k := 5 else
11952: LD_ADDR_VAR 0 2
11956: PUSH
11957: LD_INT 5
11959: ST_TO_ADDR
11960: GO 11972
// k := tmp ;
11962: LD_ADDR_VAR 0 2
11966: PUSH
11967: LD_VAR 0 3
11971: ST_TO_ADDR
// for i := 1 to k do
11972: LD_ADDR_VAR 0 1
11976: PUSH
11977: DOUBLE
11978: LD_INT 1
11980: DEC
11981: ST_TO_ADDR
11982: LD_VAR 0 2
11986: PUSH
11987: FOR_TO
11988: IFFALSE 12087
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11990: LD_VAR 0 3
11994: PUSH
11995: LD_VAR 0 1
11999: ARRAY
12000: PPUSH
12001: LD_VAR 0 1
12005: PUSH
12006: LD_INT 4
12008: MOD
12009: PUSH
12010: LD_INT 1
12012: PLUS
12013: PPUSH
12014: CALL_OW 259
12018: PUSH
12019: LD_INT 10
12021: LESS
12022: IFFALSE 12085
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12024: LD_VAR 0 3
12028: PUSH
12029: LD_VAR 0 1
12033: ARRAY
12034: PPUSH
12035: LD_VAR 0 1
12039: PUSH
12040: LD_INT 4
12042: MOD
12043: PUSH
12044: LD_INT 1
12046: PLUS
12047: PPUSH
12048: LD_VAR 0 3
12052: PUSH
12053: LD_VAR 0 1
12057: ARRAY
12058: PPUSH
12059: LD_VAR 0 1
12063: PUSH
12064: LD_INT 4
12066: MOD
12067: PUSH
12068: LD_INT 1
12070: PLUS
12071: PPUSH
12072: CALL_OW 259
12076: PUSH
12077: LD_INT 1
12079: PLUS
12080: PPUSH
12081: CALL_OW 237
12085: GO 11987
12087: POP
12088: POP
// end ;
12089: PPOPN 3
12091: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12092: LD_EXP 25
12096: PUSH
12097: LD_EXP 33
12101: AND
12102: IFFALSE 12122
12104: GO 12106
12106: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12107: LD_INT 4
12109: PPUSH
12110: LD_OWVAR 2
12114: PPUSH
12115: LD_INT 0
12117: PPUSH
12118: CALL_OW 324
12122: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12123: LD_EXP 25
12127: PUSH
12128: LD_EXP 62
12132: AND
12133: IFFALSE 12153
12135: GO 12137
12137: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12138: LD_INT 19
12140: PPUSH
12141: LD_OWVAR 2
12145: PPUSH
12146: LD_INT 0
12148: PPUSH
12149: CALL_OW 324
12153: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12154: LD_EXP 25
12158: PUSH
12159: LD_EXP 34
12163: AND
12164: IFFALSE 12266
12166: GO 12168
12168: DISABLE
12169: LD_INT 0
12171: PPUSH
12172: PPUSH
// begin enable ;
12173: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12174: LD_ADDR_VAR 0 2
12178: PUSH
12179: LD_INT 22
12181: PUSH
12182: LD_OWVAR 2
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 2
12193: PUSH
12194: LD_INT 34
12196: PUSH
12197: LD_INT 11
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 34
12206: PUSH
12207: LD_INT 30
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 69
12227: ST_TO_ADDR
// if not tmp then
12228: LD_VAR 0 2
12232: NOT
12233: IFFALSE 12237
// exit ;
12235: GO 12266
// for i in tmp do
12237: LD_ADDR_VAR 0 1
12241: PUSH
12242: LD_VAR 0 2
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12264
// begin SetLives ( i , 0 ) ;
12250: LD_VAR 0 1
12254: PPUSH
12255: LD_INT 0
12257: PPUSH
12258: CALL_OW 234
// end ;
12262: GO 12247
12264: POP
12265: POP
// end ;
12266: PPOPN 2
12268: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12269: LD_EXP 25
12273: PUSH
12274: LD_EXP 35
12278: AND
12279: IFFALSE 12299
12281: GO 12283
12283: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12284: LD_INT 32
12286: PPUSH
12287: LD_OWVAR 2
12291: PPUSH
12292: LD_INT 0
12294: PPUSH
12295: CALL_OW 324
12299: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12300: LD_EXP 25
12304: PUSH
12305: LD_EXP 36
12309: AND
12310: IFFALSE 12491
12312: GO 12314
12314: DISABLE
12315: LD_INT 0
12317: PPUSH
12318: PPUSH
12319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12320: LD_ADDR_VAR 0 2
12324: PUSH
12325: LD_INT 22
12327: PUSH
12328: LD_OWVAR 2
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 33
12339: PUSH
12340: LD_INT 3
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 69
12355: ST_TO_ADDR
// if not tmp then
12356: LD_VAR 0 2
12360: NOT
12361: IFFALSE 12365
// exit ;
12363: GO 12491
// side := 0 ;
12365: LD_ADDR_VAR 0 3
12369: PUSH
12370: LD_INT 0
12372: ST_TO_ADDR
// for i := 1 to 8 do
12373: LD_ADDR_VAR 0 1
12377: PUSH
12378: DOUBLE
12379: LD_INT 1
12381: DEC
12382: ST_TO_ADDR
12383: LD_INT 8
12385: PUSH
12386: FOR_TO
12387: IFFALSE 12435
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12389: LD_OWVAR 2
12393: PUSH
12394: LD_VAR 0 1
12398: NONEQUAL
12399: PUSH
12400: LD_OWVAR 2
12404: PPUSH
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 81
12414: PUSH
12415: LD_INT 2
12417: EQUAL
12418: AND
12419: IFFALSE 12433
// begin side := i ;
12421: LD_ADDR_VAR 0 3
12425: PUSH
12426: LD_VAR 0 1
12430: ST_TO_ADDR
// break ;
12431: GO 12435
// end ;
12433: GO 12386
12435: POP
12436: POP
// if not side then
12437: LD_VAR 0 3
12441: NOT
12442: IFFALSE 12446
// exit ;
12444: GO 12491
// for i := 1 to tmp do
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: DOUBLE
12452: LD_INT 1
12454: DEC
12455: ST_TO_ADDR
12456: LD_VAR 0 2
12460: PUSH
12461: FOR_TO
12462: IFFALSE 12489
// if Prob ( 60 ) then
12464: LD_INT 60
12466: PPUSH
12467: CALL_OW 13
12471: IFFALSE 12487
// SetSide ( i , side ) ;
12473: LD_VAR 0 1
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: CALL_OW 235
12487: GO 12461
12489: POP
12490: POP
// end ;
12491: PPOPN 3
12493: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12494: LD_EXP 25
12498: PUSH
12499: LD_EXP 38
12503: AND
12504: IFFALSE 12623
12506: GO 12508
12508: DISABLE
12509: LD_INT 0
12511: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12512: LD_ADDR_VAR 0 1
12516: PUSH
12517: LD_INT 22
12519: PUSH
12520: LD_OWVAR 2
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 21
12531: PUSH
12532: LD_INT 1
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 3
12541: PUSH
12542: LD_INT 23
12544: PUSH
12545: LD_INT 0
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: LIST
12560: PPUSH
12561: CALL_OW 69
12565: PUSH
12566: FOR_IN
12567: IFFALSE 12621
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12569: LD_VAR 0 1
12573: PPUSH
12574: CALL_OW 257
12578: PUSH
12579: LD_INT 1
12581: PUSH
12582: LD_INT 2
12584: PUSH
12585: LD_INT 3
12587: PUSH
12588: LD_INT 4
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: IN
12597: IFFALSE 12619
// SetClass ( un , rand ( 1 , 4 ) ) ;
12599: LD_VAR 0 1
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: LD_INT 4
12609: PPUSH
12610: CALL_OW 12
12614: PPUSH
12615: CALL_OW 336
12619: GO 12566
12621: POP
12622: POP
// end ;
12623: PPOPN 1
12625: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12626: LD_EXP 25
12630: PUSH
12631: LD_EXP 37
12635: AND
12636: IFFALSE 12715
12638: GO 12640
12640: DISABLE
12641: LD_INT 0
12643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12644: LD_ADDR_VAR 0 1
12648: PUSH
12649: LD_INT 22
12651: PUSH
12652: LD_OWVAR 2
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: LD_INT 21
12663: PUSH
12664: LD_INT 3
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PPUSH
12675: CALL_OW 69
12679: ST_TO_ADDR
// if not tmp then
12680: LD_VAR 0 1
12684: NOT
12685: IFFALSE 12689
// exit ;
12687: GO 12715
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12689: LD_VAR 0 1
12693: PUSH
12694: LD_INT 1
12696: PPUSH
12697: LD_VAR 0 1
12701: PPUSH
12702: CALL_OW 12
12706: ARRAY
12707: PPUSH
12708: LD_INT 100
12710: PPUSH
12711: CALL_OW 234
// end ;
12715: PPOPN 1
12717: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12718: LD_EXP 25
12722: PUSH
12723: LD_EXP 39
12727: AND
12728: IFFALSE 12826
12730: GO 12732
12732: DISABLE
12733: LD_INT 0
12735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12736: LD_ADDR_VAR 0 1
12740: PUSH
12741: LD_INT 22
12743: PUSH
12744: LD_OWVAR 2
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 1
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 69
12771: ST_TO_ADDR
// if not tmp then
12772: LD_VAR 0 1
12776: NOT
12777: IFFALSE 12781
// exit ;
12779: GO 12826
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12781: LD_VAR 0 1
12785: PUSH
12786: LD_INT 1
12788: PPUSH
12789: LD_VAR 0 1
12793: PPUSH
12794: CALL_OW 12
12798: ARRAY
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: LD_INT 4
12805: PPUSH
12806: CALL_OW 12
12810: PPUSH
12811: LD_INT 3000
12813: PPUSH
12814: LD_INT 9000
12816: PPUSH
12817: CALL_OW 12
12821: PPUSH
12822: CALL_OW 492
// end ;
12826: PPOPN 1
12828: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12829: LD_EXP 25
12833: PUSH
12834: LD_EXP 40
12838: AND
12839: IFFALSE 12859
12841: GO 12843
12843: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12844: LD_INT 1
12846: PPUSH
12847: LD_OWVAR 2
12851: PPUSH
12852: LD_INT 0
12854: PPUSH
12855: CALL_OW 324
12859: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12860: LD_EXP 25
12864: PUSH
12865: LD_EXP 41
12869: AND
12870: IFFALSE 12953
12872: GO 12874
12874: DISABLE
12875: LD_INT 0
12877: PPUSH
12878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12879: LD_ADDR_VAR 0 2
12883: PUSH
12884: LD_INT 22
12886: PUSH
12887: LD_OWVAR 2
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 21
12898: PUSH
12899: LD_INT 3
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 69
12914: ST_TO_ADDR
// if not tmp then
12915: LD_VAR 0 2
12919: NOT
12920: IFFALSE 12924
// exit ;
12922: GO 12953
// for i in tmp do
12924: LD_ADDR_VAR 0 1
12928: PUSH
12929: LD_VAR 0 2
12933: PUSH
12934: FOR_IN
12935: IFFALSE 12951
// SetBLevel ( i , 10 ) ;
12937: LD_VAR 0 1
12941: PPUSH
12942: LD_INT 10
12944: PPUSH
12945: CALL_OW 241
12949: GO 12934
12951: POP
12952: POP
// end ;
12953: PPOPN 2
12955: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12956: LD_EXP 25
12960: PUSH
12961: LD_EXP 42
12965: AND
12966: IFFALSE 13077
12968: GO 12970
12970: DISABLE
12971: LD_INT 0
12973: PPUSH
12974: PPUSH
12975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12976: LD_ADDR_VAR 0 3
12980: PUSH
12981: LD_INT 22
12983: PUSH
12984: LD_OWVAR 2
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PUSH
12993: LD_INT 25
12995: PUSH
12996: LD_INT 1
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 69
13011: ST_TO_ADDR
// if not tmp then
13012: LD_VAR 0 3
13016: NOT
13017: IFFALSE 13021
// exit ;
13019: GO 13077
// un := tmp [ rand ( 1 , tmp ) ] ;
13021: LD_ADDR_VAR 0 2
13025: PUSH
13026: LD_VAR 0 3
13030: PUSH
13031: LD_INT 1
13033: PPUSH
13034: LD_VAR 0 3
13038: PPUSH
13039: CALL_OW 12
13043: ARRAY
13044: ST_TO_ADDR
// if Crawls ( un ) then
13045: LD_VAR 0 2
13049: PPUSH
13050: CALL_OW 318
13054: IFFALSE 13065
// ComWalk ( un ) ;
13056: LD_VAR 0 2
13060: PPUSH
13061: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13065: LD_VAR 0 2
13069: PPUSH
13070: LD_INT 5
13072: PPUSH
13073: CALL_OW 336
// end ;
13077: PPOPN 3
13079: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13080: LD_EXP 25
13084: PUSH
13085: LD_EXP 43
13089: AND
13090: PUSH
13091: LD_OWVAR 67
13095: PUSH
13096: LD_INT 4
13098: LESS
13099: AND
13100: IFFALSE 13119
13102: GO 13104
13104: DISABLE
// begin Difficulty := Difficulty + 1 ;
13105: LD_ADDR_OWVAR 67
13109: PUSH
13110: LD_OWVAR 67
13114: PUSH
13115: LD_INT 1
13117: PLUS
13118: ST_TO_ADDR
// end ;
13119: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13120: LD_EXP 25
13124: PUSH
13125: LD_EXP 44
13129: AND
13130: IFFALSE 13233
13132: GO 13134
13134: DISABLE
13135: LD_INT 0
13137: PPUSH
// begin for i := 1 to 5 do
13138: LD_ADDR_VAR 0 1
13142: PUSH
13143: DOUBLE
13144: LD_INT 1
13146: DEC
13147: ST_TO_ADDR
13148: LD_INT 5
13150: PUSH
13151: FOR_TO
13152: IFFALSE 13231
// begin uc_nation := nation_nature ;
13154: LD_ADDR_OWVAR 21
13158: PUSH
13159: LD_INT 0
13161: ST_TO_ADDR
// uc_side := 0 ;
13162: LD_ADDR_OWVAR 20
13166: PUSH
13167: LD_INT 0
13169: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13170: LD_ADDR_OWVAR 29
13174: PUSH
13175: LD_INT 12
13177: PUSH
13178: LD_INT 12
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: ST_TO_ADDR
// hc_agressivity := 20 ;
13185: LD_ADDR_OWVAR 35
13189: PUSH
13190: LD_INT 20
13192: ST_TO_ADDR
// hc_class := class_tiger ;
13193: LD_ADDR_OWVAR 28
13197: PUSH
13198: LD_INT 14
13200: ST_TO_ADDR
// hc_gallery :=  ;
13201: LD_ADDR_OWVAR 33
13205: PUSH
13206: LD_STRING 
13208: ST_TO_ADDR
// hc_name :=  ;
13209: LD_ADDR_OWVAR 26
13213: PUSH
13214: LD_STRING 
13216: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13217: CALL_OW 44
13221: PPUSH
13222: LD_INT 0
13224: PPUSH
13225: CALL_OW 51
// end ;
13229: GO 13151
13231: POP
13232: POP
// end ;
13233: PPOPN 1
13235: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13236: LD_EXP 25
13240: PUSH
13241: LD_EXP 45
13245: AND
13246: IFFALSE 13255
13248: GO 13250
13250: DISABLE
// StreamSibBomb ;
13251: CALL 13256 0 0
13255: END
// export function StreamSibBomb ; var i , x , y ; begin
13256: LD_INT 0
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
// result := false ;
13262: LD_ADDR_VAR 0 1
13266: PUSH
13267: LD_INT 0
13269: ST_TO_ADDR
// for i := 1 to 16 do
13270: LD_ADDR_VAR 0 2
13274: PUSH
13275: DOUBLE
13276: LD_INT 1
13278: DEC
13279: ST_TO_ADDR
13280: LD_INT 16
13282: PUSH
13283: FOR_TO
13284: IFFALSE 13483
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13286: LD_ADDR_VAR 0 3
13290: PUSH
13291: LD_INT 10
13293: PUSH
13294: LD_INT 20
13296: PUSH
13297: LD_INT 30
13299: PUSH
13300: LD_INT 40
13302: PUSH
13303: LD_INT 50
13305: PUSH
13306: LD_INT 60
13308: PUSH
13309: LD_INT 70
13311: PUSH
13312: LD_INT 80
13314: PUSH
13315: LD_INT 90
13317: PUSH
13318: LD_INT 100
13320: PUSH
13321: LD_INT 110
13323: PUSH
13324: LD_INT 120
13326: PUSH
13327: LD_INT 130
13329: PUSH
13330: LD_INT 140
13332: PUSH
13333: LD_INT 150
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 1
13355: PPUSH
13356: LD_INT 15
13358: PPUSH
13359: CALL_OW 12
13363: ARRAY
13364: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13365: LD_ADDR_VAR 0 4
13369: PUSH
13370: LD_INT 10
13372: PUSH
13373: LD_INT 20
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 40
13381: PUSH
13382: LD_INT 50
13384: PUSH
13385: LD_INT 60
13387: PUSH
13388: LD_INT 70
13390: PUSH
13391: LD_INT 80
13393: PUSH
13394: LD_INT 90
13396: PUSH
13397: LD_INT 100
13399: PUSH
13400: LD_INT 110
13402: PUSH
13403: LD_INT 120
13405: PUSH
13406: LD_INT 130
13408: PUSH
13409: LD_INT 140
13411: PUSH
13412: LD_INT 150
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 1
13434: PPUSH
13435: LD_INT 15
13437: PPUSH
13438: CALL_OW 12
13442: ARRAY
13443: ST_TO_ADDR
// if ValidHex ( x , y ) then
13444: LD_VAR 0 3
13448: PPUSH
13449: LD_VAR 0 4
13453: PPUSH
13454: CALL_OW 488
13458: IFFALSE 13481
// begin result := [ x , y ] ;
13460: LD_ADDR_VAR 0 1
13464: PUSH
13465: LD_VAR 0 3
13469: PUSH
13470: LD_VAR 0 4
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: ST_TO_ADDR
// break ;
13479: GO 13483
// end ; end ;
13481: GO 13283
13483: POP
13484: POP
// if result then
13485: LD_VAR 0 1
13489: IFFALSE 13549
// begin ToLua ( playSibBomb() ) ;
13491: LD_STRING playSibBomb()
13493: PPUSH
13494: CALL_OW 559
// wait ( 0 0$14 ) ;
13498: LD_INT 490
13500: PPUSH
13501: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13505: LD_VAR 0 1
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PPUSH
13514: LD_VAR 0 1
13518: PUSH
13519: LD_INT 2
13521: ARRAY
13522: PPUSH
13523: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13527: LD_VAR 0 1
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: PPUSH
13536: LD_VAR 0 1
13540: PUSH
13541: LD_INT 2
13543: ARRAY
13544: PPUSH
13545: CALL_OW 429
// end ; end ;
13549: LD_VAR 0 1
13553: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13554: LD_EXP 25
13558: PUSH
13559: LD_EXP 47
13563: AND
13564: IFFALSE 13576
13566: GO 13568
13568: DISABLE
// YouLost (  ) ;
13569: LD_STRING 
13571: PPUSH
13572: CALL_OW 104
13576: END
// every 0 0$1 trigger StreamModeActive and sFog do
13577: LD_EXP 25
13581: PUSH
13582: LD_EXP 46
13586: AND
13587: IFFALSE 13601
13589: GO 13591
13591: DISABLE
// FogOff ( your_side ) ;
13592: LD_OWVAR 2
13596: PPUSH
13597: CALL_OW 344
13601: END
// every 0 0$1 trigger StreamModeActive and sSun do
13602: LD_EXP 25
13606: PUSH
13607: LD_EXP 48
13611: AND
13612: IFFALSE 13640
13614: GO 13616
13616: DISABLE
// begin solar_recharge_percent := 0 ;
13617: LD_ADDR_OWVAR 79
13621: PUSH
13622: LD_INT 0
13624: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13625: LD_INT 10500
13627: PPUSH
13628: CALL_OW 67
// solar_recharge_percent := 100 ;
13632: LD_ADDR_OWVAR 79
13636: PUSH
13637: LD_INT 100
13639: ST_TO_ADDR
// end ;
13640: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13641: LD_EXP 25
13645: PUSH
13646: LD_EXP 49
13650: AND
13651: IFFALSE 13890
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
13659: PPUSH
13660: PPUSH
// begin tmp := [ ] ;
13661: LD_ADDR_VAR 0 3
13665: PUSH
13666: EMPTY
13667: ST_TO_ADDR
// for i := 1 to 6 do
13668: LD_ADDR_VAR 0 1
13672: PUSH
13673: DOUBLE
13674: LD_INT 1
13676: DEC
13677: ST_TO_ADDR
13678: LD_INT 6
13680: PUSH
13681: FOR_TO
13682: IFFALSE 13787
// begin uc_nation := nation_nature ;
13684: LD_ADDR_OWVAR 21
13688: PUSH
13689: LD_INT 0
13691: ST_TO_ADDR
// uc_side := 0 ;
13692: LD_ADDR_OWVAR 20
13696: PUSH
13697: LD_INT 0
13699: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13700: LD_ADDR_OWVAR 29
13704: PUSH
13705: LD_INT 12
13707: PUSH
13708: LD_INT 12
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: ST_TO_ADDR
// hc_agressivity := 20 ;
13715: LD_ADDR_OWVAR 35
13719: PUSH
13720: LD_INT 20
13722: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13723: LD_ADDR_OWVAR 28
13727: PUSH
13728: LD_INT 17
13730: ST_TO_ADDR
// hc_gallery :=  ;
13731: LD_ADDR_OWVAR 33
13735: PUSH
13736: LD_STRING 
13738: ST_TO_ADDR
// hc_name :=  ;
13739: LD_ADDR_OWVAR 26
13743: PUSH
13744: LD_STRING 
13746: ST_TO_ADDR
// un := CreateHuman ;
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: CALL_OW 44
13756: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13757: LD_VAR 0 2
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: CALL_OW 51
// tmp := tmp ^ un ;
13769: LD_ADDR_VAR 0 3
13773: PUSH
13774: LD_VAR 0 3
13778: PUSH
13779: LD_VAR 0 2
13783: ADD
13784: ST_TO_ADDR
// end ;
13785: GO 13681
13787: POP
13788: POP
// repeat wait ( 0 0$1 ) ;
13789: LD_INT 35
13791: PPUSH
13792: CALL_OW 67
// for un in tmp do
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: LD_VAR 0 3
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13881
// begin if IsDead ( un ) then
13809: LD_VAR 0 2
13813: PPUSH
13814: CALL_OW 301
13818: IFFALSE 13838
// begin tmp := tmp diff un ;
13820: LD_ADDR_VAR 0 3
13824: PUSH
13825: LD_VAR 0 3
13829: PUSH
13830: LD_VAR 0 2
13834: DIFF
13835: ST_TO_ADDR
// continue ;
13836: GO 13806
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13838: LD_VAR 0 2
13842: PPUSH
13843: LD_INT 3
13845: PUSH
13846: LD_INT 22
13848: PUSH
13849: LD_INT 0
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PPUSH
13860: CALL_OW 69
13864: PPUSH
13865: LD_VAR 0 2
13869: PPUSH
13870: CALL_OW 74
13874: PPUSH
13875: CALL_OW 115
// end ;
13879: GO 13806
13881: POP
13882: POP
// until not tmp ;
13883: LD_VAR 0 3
13887: NOT
13888: IFFALSE 13789
// end ;
13890: PPOPN 3
13892: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13893: LD_EXP 25
13897: PUSH
13898: LD_EXP 50
13902: AND
13903: IFFALSE 13957
13905: GO 13907
13907: DISABLE
// begin ToLua ( displayTroll(); ) ;
13908: LD_STRING displayTroll();
13910: PPUSH
13911: CALL_OW 559
// wait ( 3 3$00 ) ;
13915: LD_INT 6300
13917: PPUSH
13918: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13922: LD_STRING hideTroll();
13924: PPUSH
13925: CALL_OW 559
// wait ( 1 1$00 ) ;
13929: LD_INT 2100
13931: PPUSH
13932: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13936: LD_STRING displayTroll();
13938: PPUSH
13939: CALL_OW 559
// wait ( 1 1$00 ) ;
13943: LD_INT 2100
13945: PPUSH
13946: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13950: LD_STRING hideTroll();
13952: PPUSH
13953: CALL_OW 559
// end ;
13957: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13958: LD_EXP 25
13962: PUSH
13963: LD_EXP 51
13967: AND
13968: IFFALSE 14031
13970: GO 13972
13972: DISABLE
13973: LD_INT 0
13975: PPUSH
// begin p := 0 ;
13976: LD_ADDR_VAR 0 1
13980: PUSH
13981: LD_INT 0
13983: ST_TO_ADDR
// repeat game_speed := 1 ;
13984: LD_ADDR_OWVAR 65
13988: PUSH
13989: LD_INT 1
13991: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13992: LD_INT 35
13994: PPUSH
13995: CALL_OW 67
// p := p + 1 ;
13999: LD_ADDR_VAR 0 1
14003: PUSH
14004: LD_VAR 0 1
14008: PUSH
14009: LD_INT 1
14011: PLUS
14012: ST_TO_ADDR
// until p >= 60 ;
14013: LD_VAR 0 1
14017: PUSH
14018: LD_INT 60
14020: GREATEREQUAL
14021: IFFALSE 13984
// game_speed := 4 ;
14023: LD_ADDR_OWVAR 65
14027: PUSH
14028: LD_INT 4
14030: ST_TO_ADDR
// end ;
14031: PPOPN 1
14033: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14034: LD_EXP 25
14038: PUSH
14039: LD_EXP 52
14043: AND
14044: IFFALSE 14190
14046: GO 14048
14048: DISABLE
14049: LD_INT 0
14051: PPUSH
14052: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14053: LD_ADDR_VAR 0 1
14057: PUSH
14058: LD_INT 22
14060: PUSH
14061: LD_OWVAR 2
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 2
14072: PUSH
14073: LD_INT 30
14075: PUSH
14076: LD_INT 0
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 30
14085: PUSH
14086: LD_INT 1
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PPUSH
14102: CALL_OW 69
14106: ST_TO_ADDR
// if not depot then
14107: LD_VAR 0 1
14111: NOT
14112: IFFALSE 14116
// exit ;
14114: GO 14190
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14116: LD_ADDR_VAR 0 2
14120: PUSH
14121: LD_VAR 0 1
14125: PUSH
14126: LD_INT 1
14128: PPUSH
14129: LD_VAR 0 1
14133: PPUSH
14134: CALL_OW 12
14138: ARRAY
14139: PPUSH
14140: CALL_OW 274
14144: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14145: LD_VAR 0 2
14149: PPUSH
14150: LD_INT 1
14152: PPUSH
14153: LD_INT 0
14155: PPUSH
14156: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14160: LD_VAR 0 2
14164: PPUSH
14165: LD_INT 2
14167: PPUSH
14168: LD_INT 0
14170: PPUSH
14171: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14175: LD_VAR 0 2
14179: PPUSH
14180: LD_INT 3
14182: PPUSH
14183: LD_INT 0
14185: PPUSH
14186: CALL_OW 277
// end ;
14190: PPOPN 2
14192: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14193: LD_EXP 25
14197: PUSH
14198: LD_EXP 53
14202: AND
14203: IFFALSE 14300
14205: GO 14207
14207: DISABLE
14208: LD_INT 0
14210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14211: LD_ADDR_VAR 0 1
14215: PUSH
14216: LD_INT 22
14218: PUSH
14219: LD_OWVAR 2
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 21
14230: PUSH
14231: LD_INT 1
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 3
14240: PUSH
14241: LD_INT 23
14243: PUSH
14244: LD_INT 0
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: LIST
14259: PPUSH
14260: CALL_OW 69
14264: ST_TO_ADDR
// if not tmp then
14265: LD_VAR 0 1
14269: NOT
14270: IFFALSE 14274
// exit ;
14272: GO 14300
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14274: LD_VAR 0 1
14278: PUSH
14279: LD_INT 1
14281: PPUSH
14282: LD_VAR 0 1
14286: PPUSH
14287: CALL_OW 12
14291: ARRAY
14292: PPUSH
14293: LD_INT 200
14295: PPUSH
14296: CALL_OW 234
// end ;
14300: PPOPN 1
14302: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14303: LD_EXP 25
14307: PUSH
14308: LD_EXP 54
14312: AND
14313: IFFALSE 14392
14315: GO 14317
14317: DISABLE
14318: LD_INT 0
14320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14321: LD_ADDR_VAR 0 1
14325: PUSH
14326: LD_INT 22
14328: PUSH
14329: LD_OWVAR 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 21
14340: PUSH
14341: LD_INT 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// if not tmp then
14357: LD_VAR 0 1
14361: NOT
14362: IFFALSE 14366
// exit ;
14364: GO 14392
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14366: LD_VAR 0 1
14370: PUSH
14371: LD_INT 1
14373: PPUSH
14374: LD_VAR 0 1
14378: PPUSH
14379: CALL_OW 12
14383: ARRAY
14384: PPUSH
14385: LD_INT 60
14387: PPUSH
14388: CALL_OW 234
// end ;
14392: PPOPN 1
14394: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14395: LD_EXP 25
14399: PUSH
14400: LD_EXP 55
14404: AND
14405: IFFALSE 14504
14407: GO 14409
14409: DISABLE
14410: LD_INT 0
14412: PPUSH
14413: PPUSH
// begin enable ;
14414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14415: LD_ADDR_VAR 0 1
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_OWVAR 2
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 61
14434: PUSH
14435: EMPTY
14436: LIST
14437: PUSH
14438: LD_INT 33
14440: PUSH
14441: LD_INT 2
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PPUSH
14453: CALL_OW 69
14457: ST_TO_ADDR
// if not tmp then
14458: LD_VAR 0 1
14462: NOT
14463: IFFALSE 14467
// exit ;
14465: GO 14504
// for i in tmp do
14467: LD_ADDR_VAR 0 2
14471: PUSH
14472: LD_VAR 0 1
14476: PUSH
14477: FOR_IN
14478: IFFALSE 14502
// if IsControledBy ( i ) then
14480: LD_VAR 0 2
14484: PPUSH
14485: CALL_OW 312
14489: IFFALSE 14500
// ComUnlink ( i ) ;
14491: LD_VAR 0 2
14495: PPUSH
14496: CALL_OW 136
14500: GO 14477
14502: POP
14503: POP
// end ;
14504: PPOPN 2
14506: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14507: LD_EXP 25
14511: PUSH
14512: LD_EXP 56
14516: AND
14517: IFFALSE 14657
14519: GO 14521
14521: DISABLE
14522: LD_INT 0
14524: PPUSH
14525: PPUSH
// begin ToLua ( displayPowell(); ) ;
14526: LD_STRING displayPowell();
14528: PPUSH
14529: CALL_OW 559
// uc_side := 0 ;
14533: LD_ADDR_OWVAR 20
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// uc_nation := 2 ;
14541: LD_ADDR_OWVAR 21
14545: PUSH
14546: LD_INT 2
14548: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14549: LD_ADDR_OWVAR 37
14553: PUSH
14554: LD_INT 14
14556: ST_TO_ADDR
// vc_engine := engine_siberite ;
14557: LD_ADDR_OWVAR 39
14561: PUSH
14562: LD_INT 3
14564: ST_TO_ADDR
// vc_control := control_apeman ;
14565: LD_ADDR_OWVAR 38
14569: PUSH
14570: LD_INT 5
14572: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14573: LD_ADDR_OWVAR 40
14577: PUSH
14578: LD_INT 29
14580: ST_TO_ADDR
// un := CreateVehicle ;
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: CALL_OW 45
14590: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14591: LD_VAR 0 2
14595: PPUSH
14596: LD_INT 1
14598: PPUSH
14599: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14603: LD_INT 35
14605: PPUSH
14606: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14610: LD_VAR 0 2
14614: PPUSH
14615: LD_INT 22
14617: PUSH
14618: LD_OWVAR 2
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PPUSH
14627: CALL_OW 69
14631: PPUSH
14632: LD_VAR 0 2
14636: PPUSH
14637: CALL_OW 74
14641: PPUSH
14642: CALL_OW 115
// until IsDead ( un ) ;
14646: LD_VAR 0 2
14650: PPUSH
14651: CALL_OW 301
14655: IFFALSE 14603
// end ;
14657: PPOPN 2
14659: END
// every 0 0$1 trigger StreamModeActive and sStu do
14660: LD_EXP 25
14664: PUSH
14665: LD_EXP 64
14669: AND
14670: IFFALSE 14686
14672: GO 14674
14674: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14675: LD_STRING displayStucuk();
14677: PPUSH
14678: CALL_OW 559
// ResetFog ;
14682: CALL_OW 335
// end ;
14686: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14687: LD_EXP 25
14691: PUSH
14692: LD_EXP 57
14696: AND
14697: IFFALSE 14838
14699: GO 14701
14701: DISABLE
14702: LD_INT 0
14704: PPUSH
14705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14706: LD_ADDR_VAR 0 2
14710: PUSH
14711: LD_INT 22
14713: PUSH
14714: LD_OWVAR 2
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 21
14725: PUSH
14726: LD_INT 1
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PPUSH
14737: CALL_OW 69
14741: ST_TO_ADDR
// if not tmp then
14742: LD_VAR 0 2
14746: NOT
14747: IFFALSE 14751
// exit ;
14749: GO 14838
// un := tmp [ rand ( 1 , tmp ) ] ;
14751: LD_ADDR_VAR 0 1
14755: PUSH
14756: LD_VAR 0 2
14760: PUSH
14761: LD_INT 1
14763: PPUSH
14764: LD_VAR 0 2
14768: PPUSH
14769: CALL_OW 12
14773: ARRAY
14774: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14775: LD_VAR 0 1
14779: PPUSH
14780: LD_INT 0
14782: PPUSH
14783: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14787: LD_VAR 0 1
14791: PPUSH
14792: LD_OWVAR 3
14796: PUSH
14797: LD_VAR 0 1
14801: DIFF
14802: PPUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 74
14812: PPUSH
14813: CALL_OW 115
// wait ( 0 0$20 ) ;
14817: LD_INT 700
14819: PPUSH
14820: CALL_OW 67
// SetSide ( un , your_side ) ;
14824: LD_VAR 0 1
14828: PPUSH
14829: LD_OWVAR 2
14833: PPUSH
14834: CALL_OW 235
// end ;
14838: PPOPN 2
14840: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14841: LD_EXP 25
14845: PUSH
14846: LD_EXP 58
14850: AND
14851: IFFALSE 14957
14853: GO 14855
14855: DISABLE
14856: LD_INT 0
14858: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14859: LD_ADDR_VAR 0 1
14863: PUSH
14864: LD_INT 22
14866: PUSH
14867: LD_OWVAR 2
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: LD_INT 30
14881: PUSH
14882: LD_INT 0
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 30
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: ST_TO_ADDR
// if not depot then
14913: LD_VAR 0 1
14917: NOT
14918: IFFALSE 14922
// exit ;
14920: GO 14957
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14922: LD_VAR 0 1
14926: PUSH
14927: LD_INT 1
14929: ARRAY
14930: PPUSH
14931: CALL_OW 250
14935: PPUSH
14936: LD_VAR 0 1
14940: PUSH
14941: LD_INT 1
14943: ARRAY
14944: PPUSH
14945: CALL_OW 251
14949: PPUSH
14950: LD_INT 70
14952: PPUSH
14953: CALL_OW 495
// end ;
14957: PPOPN 1
14959: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14960: LD_EXP 25
14964: PUSH
14965: LD_EXP 59
14969: AND
14970: IFFALSE 15181
14972: GO 14974
14974: DISABLE
14975: LD_INT 0
14977: PPUSH
14978: PPUSH
14979: PPUSH
14980: PPUSH
14981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14982: LD_ADDR_VAR 0 5
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_OWVAR 2
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 21
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 69
15017: ST_TO_ADDR
// if not tmp then
15018: LD_VAR 0 5
15022: NOT
15023: IFFALSE 15027
// exit ;
15025: GO 15181
// for i in tmp do
15027: LD_ADDR_VAR 0 1
15031: PUSH
15032: LD_VAR 0 5
15036: PUSH
15037: FOR_IN
15038: IFFALSE 15179
// begin d := rand ( 0 , 5 ) ;
15040: LD_ADDR_VAR 0 4
15044: PUSH
15045: LD_INT 0
15047: PPUSH
15048: LD_INT 5
15050: PPUSH
15051: CALL_OW 12
15055: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15056: LD_ADDR_VAR 0 2
15060: PUSH
15061: LD_VAR 0 1
15065: PPUSH
15066: CALL_OW 250
15070: PPUSH
15071: LD_VAR 0 4
15075: PPUSH
15076: LD_INT 3
15078: PPUSH
15079: LD_INT 12
15081: PPUSH
15082: CALL_OW 12
15086: PPUSH
15087: CALL_OW 272
15091: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15092: LD_ADDR_VAR 0 3
15096: PUSH
15097: LD_VAR 0 1
15101: PPUSH
15102: CALL_OW 251
15106: PPUSH
15107: LD_VAR 0 4
15111: PPUSH
15112: LD_INT 3
15114: PPUSH
15115: LD_INT 12
15117: PPUSH
15118: CALL_OW 12
15122: PPUSH
15123: CALL_OW 273
15127: ST_TO_ADDR
// if ValidHex ( x , y ) then
15128: LD_VAR 0 2
15132: PPUSH
15133: LD_VAR 0 3
15137: PPUSH
15138: CALL_OW 488
15142: IFFALSE 15177
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15144: LD_VAR 0 1
15148: PPUSH
15149: LD_VAR 0 2
15153: PPUSH
15154: LD_VAR 0 3
15158: PPUSH
15159: LD_INT 3
15161: PPUSH
15162: LD_INT 6
15164: PPUSH
15165: CALL_OW 12
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 483
// end ;
15177: GO 15037
15179: POP
15180: POP
// end ;
15181: PPOPN 5
15183: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15184: LD_EXP 25
15188: PUSH
15189: LD_EXP 60
15193: AND
15194: IFFALSE 15288
15196: GO 15198
15198: DISABLE
15199: LD_INT 0
15201: PPUSH
15202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15203: LD_ADDR_VAR 0 2
15207: PUSH
15208: LD_INT 22
15210: PUSH
15211: LD_OWVAR 2
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 32
15222: PUSH
15223: LD_INT 1
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 21
15232: PUSH
15233: LD_INT 2
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: LIST
15244: PPUSH
15245: CALL_OW 69
15249: ST_TO_ADDR
// if not tmp then
15250: LD_VAR 0 2
15254: NOT
15255: IFFALSE 15259
// exit ;
15257: GO 15288
// for i in tmp do
15259: LD_ADDR_VAR 0 1
15263: PUSH
15264: LD_VAR 0 2
15268: PUSH
15269: FOR_IN
15270: IFFALSE 15286
// SetFuel ( i , 0 ) ;
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_INT 0
15279: PPUSH
15280: CALL_OW 240
15284: GO 15269
15286: POP
15287: POP
// end ;
15288: PPOPN 2
15290: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15291: LD_EXP 25
15295: PUSH
15296: LD_EXP 61
15300: AND
15301: IFFALSE 15367
15303: GO 15305
15305: DISABLE
15306: LD_INT 0
15308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15309: LD_ADDR_VAR 0 1
15313: PUSH
15314: LD_INT 22
15316: PUSH
15317: LD_OWVAR 2
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 29
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PPUSH
15340: CALL_OW 69
15344: ST_TO_ADDR
// if not tmp then
15345: LD_VAR 0 1
15349: NOT
15350: IFFALSE 15354
// exit ;
15352: GO 15367
// DestroyUnit ( tmp [ 1 ] ) ;
15354: LD_VAR 0 1
15358: PUSH
15359: LD_INT 1
15361: ARRAY
15362: PPUSH
15363: CALL_OW 65
// end ;
15367: PPOPN 1
15369: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15370: LD_EXP 25
15374: PUSH
15375: LD_EXP 63
15379: AND
15380: IFFALSE 15509
15382: GO 15384
15384: DISABLE
15385: LD_INT 0
15387: PPUSH
// begin uc_side := 0 ;
15388: LD_ADDR_OWVAR 20
15392: PUSH
15393: LD_INT 0
15395: ST_TO_ADDR
// uc_nation := nation_arabian ;
15396: LD_ADDR_OWVAR 21
15400: PUSH
15401: LD_INT 2
15403: ST_TO_ADDR
// hc_gallery :=  ;
15404: LD_ADDR_OWVAR 33
15408: PUSH
15409: LD_STRING 
15411: ST_TO_ADDR
// hc_name :=  ;
15412: LD_ADDR_OWVAR 26
15416: PUSH
15417: LD_STRING 
15419: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 11
15425: PPUSH
15426: LD_INT 10
15428: PPUSH
15429: CALL_OW 380
// un := CreateHuman ;
15433: LD_ADDR_VAR 0 1
15437: PUSH
15438: CALL_OW 44
15442: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15443: LD_VAR 0 1
15447: PPUSH
15448: LD_INT 1
15450: PPUSH
15451: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15455: LD_INT 35
15457: PPUSH
15458: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15462: LD_VAR 0 1
15466: PPUSH
15467: LD_INT 22
15469: PUSH
15470: LD_OWVAR 2
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: PPUSH
15484: LD_VAR 0 1
15488: PPUSH
15489: CALL_OW 74
15493: PPUSH
15494: CALL_OW 115
// until IsDead ( un ) ;
15498: LD_VAR 0 1
15502: PPUSH
15503: CALL_OW 301
15507: IFFALSE 15455
// end ;
15509: PPOPN 1
15511: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15512: LD_EXP 25
15516: PUSH
15517: LD_EXP 65
15521: AND
15522: IFFALSE 15534
15524: GO 15526
15526: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15527: LD_STRING earthquake(getX(game), 0, 32)
15529: PPUSH
15530: CALL_OW 559
15534: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15535: LD_EXP 25
15539: PUSH
15540: LD_EXP 66
15544: AND
15545: IFFALSE 15636
15547: GO 15549
15549: DISABLE
15550: LD_INT 0
15552: PPUSH
// begin enable ;
15553: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15554: LD_ADDR_VAR 0 1
15558: PUSH
15559: LD_INT 22
15561: PUSH
15562: LD_OWVAR 2
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 21
15573: PUSH
15574: LD_INT 2
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 33
15583: PUSH
15584: LD_INT 3
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: PPUSH
15596: CALL_OW 69
15600: ST_TO_ADDR
// if not tmp then
15601: LD_VAR 0 1
15605: NOT
15606: IFFALSE 15610
// exit ;
15608: GO 15636
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15610: LD_VAR 0 1
15614: PUSH
15615: LD_INT 1
15617: PPUSH
15618: LD_VAR 0 1
15622: PPUSH
15623: CALL_OW 12
15627: ARRAY
15628: PPUSH
15629: LD_INT 1
15631: PPUSH
15632: CALL_OW 234
// end ;
15636: PPOPN 1
15638: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15639: LD_EXP 25
15643: PUSH
15644: LD_EXP 67
15648: AND
15649: IFFALSE 15790
15651: GO 15653
15653: DISABLE
15654: LD_INT 0
15656: PPUSH
15657: PPUSH
15658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15659: LD_ADDR_VAR 0 3
15663: PUSH
15664: LD_INT 22
15666: PUSH
15667: LD_OWVAR 2
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 25
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 69
15694: ST_TO_ADDR
// if not tmp then
15695: LD_VAR 0 3
15699: NOT
15700: IFFALSE 15704
// exit ;
15702: GO 15790
// un := tmp [ rand ( 1 , tmp ) ] ;
15704: LD_ADDR_VAR 0 2
15708: PUSH
15709: LD_VAR 0 3
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_VAR 0 3
15721: PPUSH
15722: CALL_OW 12
15726: ARRAY
15727: ST_TO_ADDR
// if Crawls ( un ) then
15728: LD_VAR 0 2
15732: PPUSH
15733: CALL_OW 318
15737: IFFALSE 15748
// ComWalk ( un ) ;
15739: LD_VAR 0 2
15743: PPUSH
15744: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15748: LD_VAR 0 2
15752: PPUSH
15753: LD_INT 9
15755: PPUSH
15756: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15760: LD_INT 28
15762: PPUSH
15763: LD_OWVAR 2
15767: PPUSH
15768: LD_INT 2
15770: PPUSH
15771: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15775: LD_INT 29
15777: PPUSH
15778: LD_OWVAR 2
15782: PPUSH
15783: LD_INT 2
15785: PPUSH
15786: CALL_OW 322
// end ;
15790: PPOPN 3
15792: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15793: LD_EXP 25
15797: PUSH
15798: LD_EXP 68
15802: AND
15803: IFFALSE 15914
15805: GO 15807
15807: DISABLE
15808: LD_INT 0
15810: PPUSH
15811: PPUSH
15812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15813: LD_ADDR_VAR 0 3
15817: PUSH
15818: LD_INT 22
15820: PUSH
15821: LD_OWVAR 2
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PPUSH
15844: CALL_OW 69
15848: ST_TO_ADDR
// if not tmp then
15849: LD_VAR 0 3
15853: NOT
15854: IFFALSE 15858
// exit ;
15856: GO 15914
// un := tmp [ rand ( 1 , tmp ) ] ;
15858: LD_ADDR_VAR 0 2
15862: PUSH
15863: LD_VAR 0 3
15867: PUSH
15868: LD_INT 1
15870: PPUSH
15871: LD_VAR 0 3
15875: PPUSH
15876: CALL_OW 12
15880: ARRAY
15881: ST_TO_ADDR
// if Crawls ( un ) then
15882: LD_VAR 0 2
15886: PPUSH
15887: CALL_OW 318
15891: IFFALSE 15902
// ComWalk ( un ) ;
15893: LD_VAR 0 2
15897: PPUSH
15898: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15902: LD_VAR 0 2
15906: PPUSH
15907: LD_INT 8
15909: PPUSH
15910: CALL_OW 336
// end ;
15914: PPOPN 3
15916: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15917: LD_EXP 25
15921: PUSH
15922: LD_EXP 69
15926: AND
15927: IFFALSE 16071
15929: GO 15931
15931: DISABLE
15932: LD_INT 0
15934: PPUSH
15935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15936: LD_ADDR_VAR 0 2
15940: PUSH
15941: LD_INT 22
15943: PUSH
15944: LD_OWVAR 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 21
15955: PUSH
15956: LD_INT 2
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 2
15965: PUSH
15966: LD_INT 34
15968: PUSH
15969: LD_INT 12
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 34
15978: PUSH
15979: LD_INT 51
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 34
15988: PUSH
15989: LD_INT 32
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: LIST
16006: PPUSH
16007: CALL_OW 69
16011: ST_TO_ADDR
// if not tmp then
16012: LD_VAR 0 2
16016: NOT
16017: IFFALSE 16021
// exit ;
16019: GO 16071
// for i in tmp do
16021: LD_ADDR_VAR 0 1
16025: PUSH
16026: LD_VAR 0 2
16030: PUSH
16031: FOR_IN
16032: IFFALSE 16069
// if GetCargo ( i , mat_artifact ) = 0 then
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_INT 4
16041: PPUSH
16042: CALL_OW 289
16046: PUSH
16047: LD_INT 0
16049: EQUAL
16050: IFFALSE 16067
// SetCargo ( i , mat_siberit , 100 ) ;
16052: LD_VAR 0 1
16056: PPUSH
16057: LD_INT 3
16059: PPUSH
16060: LD_INT 100
16062: PPUSH
16063: CALL_OW 290
16067: GO 16031
16069: POP
16070: POP
// end ;
16071: PPOPN 2
16073: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16074: LD_EXP 25
16078: PUSH
16079: LD_EXP 70
16083: AND
16084: IFFALSE 16267
16086: GO 16088
16088: DISABLE
16089: LD_INT 0
16091: PPUSH
16092: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16093: LD_ADDR_VAR 0 2
16097: PUSH
16098: LD_INT 22
16100: PUSH
16101: LD_OWVAR 2
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: ST_TO_ADDR
// if not tmp then
16115: LD_VAR 0 2
16119: NOT
16120: IFFALSE 16124
// exit ;
16122: GO 16267
// for i := 1 to 2 do
16124: LD_ADDR_VAR 0 1
16128: PUSH
16129: DOUBLE
16130: LD_INT 1
16132: DEC
16133: ST_TO_ADDR
16134: LD_INT 2
16136: PUSH
16137: FOR_TO
16138: IFFALSE 16265
// begin uc_side := your_side ;
16140: LD_ADDR_OWVAR 20
16144: PUSH
16145: LD_OWVAR 2
16149: ST_TO_ADDR
// uc_nation := nation_american ;
16150: LD_ADDR_OWVAR 21
16154: PUSH
16155: LD_INT 1
16157: ST_TO_ADDR
// vc_chassis := us_morphling ;
16158: LD_ADDR_OWVAR 37
16162: PUSH
16163: LD_INT 5
16165: ST_TO_ADDR
// vc_engine := engine_siberite ;
16166: LD_ADDR_OWVAR 39
16170: PUSH
16171: LD_INT 3
16173: ST_TO_ADDR
// vc_control := control_computer ;
16174: LD_ADDR_OWVAR 38
16178: PUSH
16179: LD_INT 3
16181: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16182: LD_ADDR_OWVAR 40
16186: PUSH
16187: LD_INT 10
16189: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16190: LD_VAR 0 2
16194: PUSH
16195: LD_INT 1
16197: ARRAY
16198: PPUSH
16199: CALL_OW 310
16203: NOT
16204: IFFALSE 16251
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16206: CALL_OW 45
16210: PPUSH
16211: LD_VAR 0 2
16215: PUSH
16216: LD_INT 1
16218: ARRAY
16219: PPUSH
16220: CALL_OW 250
16224: PPUSH
16225: LD_VAR 0 2
16229: PUSH
16230: LD_INT 1
16232: ARRAY
16233: PPUSH
16234: CALL_OW 251
16238: PPUSH
16239: LD_INT 12
16241: PPUSH
16242: LD_INT 1
16244: PPUSH
16245: CALL_OW 50
16249: GO 16263
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16251: CALL_OW 45
16255: PPUSH
16256: LD_INT 1
16258: PPUSH
16259: CALL_OW 51
// end ;
16263: GO 16137
16265: POP
16266: POP
// end ;
16267: PPOPN 2
16269: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16270: LD_EXP 25
16274: PUSH
16275: LD_EXP 71
16279: AND
16280: IFFALSE 16502
16282: GO 16284
16284: DISABLE
16285: LD_INT 0
16287: PPUSH
16288: PPUSH
16289: PPUSH
16290: PPUSH
16291: PPUSH
16292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16293: LD_ADDR_VAR 0 6
16297: PUSH
16298: LD_INT 22
16300: PUSH
16301: LD_OWVAR 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 21
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 3
16322: PUSH
16323: LD_INT 23
16325: PUSH
16326: LD_INT 0
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: PPUSH
16342: CALL_OW 69
16346: ST_TO_ADDR
// if not tmp then
16347: LD_VAR 0 6
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 16502
// s1 := rand ( 1 , 4 ) ;
16356: LD_ADDR_VAR 0 2
16360: PUSH
16361: LD_INT 1
16363: PPUSH
16364: LD_INT 4
16366: PPUSH
16367: CALL_OW 12
16371: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16372: LD_ADDR_VAR 0 4
16376: PUSH
16377: LD_VAR 0 6
16381: PUSH
16382: LD_INT 1
16384: ARRAY
16385: PPUSH
16386: LD_VAR 0 2
16390: PPUSH
16391: CALL_OW 259
16395: ST_TO_ADDR
// if s1 = 1 then
16396: LD_VAR 0 2
16400: PUSH
16401: LD_INT 1
16403: EQUAL
16404: IFFALSE 16424
// s2 := rand ( 2 , 4 ) else
16406: LD_ADDR_VAR 0 3
16410: PUSH
16411: LD_INT 2
16413: PPUSH
16414: LD_INT 4
16416: PPUSH
16417: CALL_OW 12
16421: ST_TO_ADDR
16422: GO 16432
// s2 := 1 ;
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_INT 1
16431: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16432: LD_ADDR_VAR 0 5
16436: PUSH
16437: LD_VAR 0 6
16441: PUSH
16442: LD_INT 1
16444: ARRAY
16445: PPUSH
16446: LD_VAR 0 3
16450: PPUSH
16451: CALL_OW 259
16455: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16456: LD_VAR 0 6
16460: PUSH
16461: LD_INT 1
16463: ARRAY
16464: PPUSH
16465: LD_VAR 0 2
16469: PPUSH
16470: LD_VAR 0 5
16474: PPUSH
16475: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16479: LD_VAR 0 6
16483: PUSH
16484: LD_INT 1
16486: ARRAY
16487: PPUSH
16488: LD_VAR 0 3
16492: PPUSH
16493: LD_VAR 0 4
16497: PPUSH
16498: CALL_OW 237
// end ;
16502: PPOPN 6
16504: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16505: LD_EXP 25
16509: PUSH
16510: LD_EXP 72
16514: AND
16515: IFFALSE 16594
16517: GO 16519
16519: DISABLE
16520: LD_INT 0
16522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16523: LD_ADDR_VAR 0 1
16527: PUSH
16528: LD_INT 22
16530: PUSH
16531: LD_OWVAR 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 30
16542: PUSH
16543: LD_INT 3
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PPUSH
16554: CALL_OW 69
16558: ST_TO_ADDR
// if not tmp then
16559: LD_VAR 0 1
16563: NOT
16564: IFFALSE 16568
// exit ;
16566: GO 16594
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16568: LD_VAR 0 1
16572: PUSH
16573: LD_INT 1
16575: PPUSH
16576: LD_VAR 0 1
16580: PPUSH
16581: CALL_OW 12
16585: ARRAY
16586: PPUSH
16587: LD_INT 1
16589: PPUSH
16590: CALL_OW 234
// end ;
16594: PPOPN 1
16596: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16597: LD_EXP 25
16601: PUSH
16602: LD_EXP 73
16606: AND
16607: IFFALSE 16719
16609: GO 16611
16611: DISABLE
16612: LD_INT 0
16614: PPUSH
16615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16616: LD_ADDR_VAR 0 2
16620: PUSH
16621: LD_INT 22
16623: PUSH
16624: LD_OWVAR 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 2
16635: PUSH
16636: LD_INT 30
16638: PUSH
16639: LD_INT 27
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 30
16648: PUSH
16649: LD_INT 26
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 30
16658: PUSH
16659: LD_INT 28
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: ST_TO_ADDR
// if not tmp then
16681: LD_VAR 0 2
16685: NOT
16686: IFFALSE 16690
// exit ;
16688: GO 16719
// for i in tmp do
16690: LD_ADDR_VAR 0 1
16694: PUSH
16695: LD_VAR 0 2
16699: PUSH
16700: FOR_IN
16701: IFFALSE 16717
// SetLives ( i , 1 ) ;
16703: LD_VAR 0 1
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 234
16715: GO 16700
16717: POP
16718: POP
// end ;
16719: PPOPN 2
16721: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16722: LD_EXP 25
16726: PUSH
16727: LD_EXP 74
16731: AND
16732: IFFALSE 17019
16734: GO 16736
16736: DISABLE
16737: LD_INT 0
16739: PPUSH
16740: PPUSH
16741: PPUSH
// begin i := rand ( 1 , 7 ) ;
16742: LD_ADDR_VAR 0 1
16746: PUSH
16747: LD_INT 1
16749: PPUSH
16750: LD_INT 7
16752: PPUSH
16753: CALL_OW 12
16757: ST_TO_ADDR
// case i of 1 :
16758: LD_VAR 0 1
16762: PUSH
16763: LD_INT 1
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16771
16769: GO 16781
16771: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16772: LD_STRING earthquake(getX(game), 0, 32)
16774: PPUSH
16775: CALL_OW 559
16779: GO 17019
16781: LD_INT 2
16783: DOUBLE
16784: EQUAL
16785: IFTRUE 16789
16787: GO 16803
16789: POP
// begin ToLua ( displayStucuk(); ) ;
16790: LD_STRING displayStucuk();
16792: PPUSH
16793: CALL_OW 559
// ResetFog ;
16797: CALL_OW 335
// end ; 3 :
16801: GO 17019
16803: LD_INT 3
16805: DOUBLE
16806: EQUAL
16807: IFTRUE 16811
16809: GO 16915
16811: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16812: LD_ADDR_VAR 0 2
16816: PUSH
16817: LD_INT 22
16819: PUSH
16820: LD_OWVAR 2
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 25
16831: PUSH
16832: LD_INT 1
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PPUSH
16843: CALL_OW 69
16847: ST_TO_ADDR
// if not tmp then
16848: LD_VAR 0 2
16852: NOT
16853: IFFALSE 16857
// exit ;
16855: GO 17019
// un := tmp [ rand ( 1 , tmp ) ] ;
16857: LD_ADDR_VAR 0 3
16861: PUSH
16862: LD_VAR 0 2
16866: PUSH
16867: LD_INT 1
16869: PPUSH
16870: LD_VAR 0 2
16874: PPUSH
16875: CALL_OW 12
16879: ARRAY
16880: ST_TO_ADDR
// if Crawls ( un ) then
16881: LD_VAR 0 3
16885: PPUSH
16886: CALL_OW 318
16890: IFFALSE 16901
// ComWalk ( un ) ;
16892: LD_VAR 0 3
16896: PPUSH
16897: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16901: LD_VAR 0 3
16905: PPUSH
16906: LD_INT 8
16908: PPUSH
16909: CALL_OW 336
// end ; 4 :
16913: GO 17019
16915: LD_INT 4
16917: DOUBLE
16918: EQUAL
16919: IFTRUE 16923
16921: GO 16997
16923: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16924: LD_ADDR_VAR 0 2
16928: PUSH
16929: LD_INT 22
16931: PUSH
16932: LD_OWVAR 2
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 30
16943: PUSH
16944: LD_INT 29
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PPUSH
16955: CALL_OW 69
16959: ST_TO_ADDR
// if not tmp then
16960: LD_VAR 0 2
16964: NOT
16965: IFFALSE 16969
// exit ;
16967: GO 17019
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16969: LD_VAR 0 2
16973: PUSH
16974: LD_INT 1
16976: ARRAY
16977: PPUSH
16978: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16982: LD_VAR 0 2
16986: PUSH
16987: LD_INT 1
16989: ARRAY
16990: PPUSH
16991: CALL_OW 65
// end ; 5 .. 7 :
16995: GO 17019
16997: LD_INT 5
16999: DOUBLE
17000: GREATEREQUAL
17001: IFFALSE 17009
17003: LD_INT 7
17005: DOUBLE
17006: LESSEQUAL
17007: IFTRUE 17011
17009: GO 17018
17011: POP
// StreamSibBomb ; end ;
17012: CALL 13256 0 0
17016: GO 17019
17018: POP
// end ;
17019: PPOPN 3
17021: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17022: LD_EXP 25
17026: PUSH
17027: LD_EXP 75
17031: AND
17032: IFFALSE 17188
17034: GO 17036
17036: DISABLE
17037: LD_INT 0
17039: PPUSH
17040: PPUSH
17041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17042: LD_ADDR_VAR 0 2
17046: PUSH
17047: LD_INT 81
17049: PUSH
17050: LD_OWVAR 2
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 2
17061: PUSH
17062: LD_INT 21
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 21
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: LIST
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: ST_TO_ADDR
// if not tmp then
17096: LD_VAR 0 2
17100: NOT
17101: IFFALSE 17105
// exit ;
17103: GO 17188
// p := 0 ;
17105: LD_ADDR_VAR 0 3
17109: PUSH
17110: LD_INT 0
17112: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17113: LD_INT 35
17115: PPUSH
17116: CALL_OW 67
// p := p + 1 ;
17120: LD_ADDR_VAR 0 3
17124: PUSH
17125: LD_VAR 0 3
17129: PUSH
17130: LD_INT 1
17132: PLUS
17133: ST_TO_ADDR
// for i in tmp do
17134: LD_ADDR_VAR 0 1
17138: PUSH
17139: LD_VAR 0 2
17143: PUSH
17144: FOR_IN
17145: IFFALSE 17176
// if GetLives ( i ) < 1000 then
17147: LD_VAR 0 1
17151: PPUSH
17152: CALL_OW 256
17156: PUSH
17157: LD_INT 1000
17159: LESS
17160: IFFALSE 17174
// SetLives ( i , 1000 ) ;
17162: LD_VAR 0 1
17166: PPUSH
17167: LD_INT 1000
17169: PPUSH
17170: CALL_OW 234
17174: GO 17144
17176: POP
17177: POP
// until p > 20 ;
17178: LD_VAR 0 3
17182: PUSH
17183: LD_INT 20
17185: GREATER
17186: IFFALSE 17113
// end ;
17188: PPOPN 3
17190: END
// every 0 0$1 trigger StreamModeActive and sTime do
17191: LD_EXP 25
17195: PUSH
17196: LD_EXP 76
17200: AND
17201: IFFALSE 17236
17203: GO 17205
17205: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17206: LD_INT 28
17208: PPUSH
17209: LD_OWVAR 2
17213: PPUSH
17214: LD_INT 2
17216: PPUSH
17217: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17221: LD_INT 30
17223: PPUSH
17224: LD_OWVAR 2
17228: PPUSH
17229: LD_INT 2
17231: PPUSH
17232: CALL_OW 322
// end ;
17236: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17237: LD_EXP 25
17241: PUSH
17242: LD_EXP 77
17246: AND
17247: IFFALSE 17368
17249: GO 17251
17251: DISABLE
17252: LD_INT 0
17254: PPUSH
17255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17256: LD_ADDR_VAR 0 2
17260: PUSH
17261: LD_INT 22
17263: PUSH
17264: LD_OWVAR 2
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 21
17275: PUSH
17276: LD_INT 1
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 3
17285: PUSH
17286: LD_INT 23
17288: PUSH
17289: LD_INT 0
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: PPUSH
17305: CALL_OW 69
17309: ST_TO_ADDR
// if not tmp then
17310: LD_VAR 0 2
17314: NOT
17315: IFFALSE 17319
// exit ;
17317: GO 17368
// for i in tmp do
17319: LD_ADDR_VAR 0 1
17323: PUSH
17324: LD_VAR 0 2
17328: PUSH
17329: FOR_IN
17330: IFFALSE 17366
// begin if Crawls ( i ) then
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 318
17341: IFFALSE 17352
// ComWalk ( i ) ;
17343: LD_VAR 0 1
17347: PPUSH
17348: CALL_OW 138
// SetClass ( i , 2 ) ;
17352: LD_VAR 0 1
17356: PPUSH
17357: LD_INT 2
17359: PPUSH
17360: CALL_OW 336
// end ;
17364: GO 17329
17366: POP
17367: POP
// end ;
17368: PPOPN 2
17370: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17371: LD_EXP 25
17375: PUSH
17376: LD_EXP 78
17380: AND
17381: IFFALSE 17669
17383: GO 17385
17385: DISABLE
17386: LD_INT 0
17388: PPUSH
17389: PPUSH
17390: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17391: LD_OWVAR 2
17395: PPUSH
17396: LD_INT 9
17398: PPUSH
17399: LD_INT 1
17401: PPUSH
17402: LD_INT 1
17404: PPUSH
17405: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17409: LD_INT 9
17411: PPUSH
17412: LD_OWVAR 2
17416: PPUSH
17417: CALL_OW 343
// uc_side := 9 ;
17421: LD_ADDR_OWVAR 20
17425: PUSH
17426: LD_INT 9
17428: ST_TO_ADDR
// uc_nation := 2 ;
17429: LD_ADDR_OWVAR 21
17433: PUSH
17434: LD_INT 2
17436: ST_TO_ADDR
// hc_name := Dark Warrior ;
17437: LD_ADDR_OWVAR 26
17441: PUSH
17442: LD_STRING Dark Warrior
17444: ST_TO_ADDR
// hc_gallery :=  ;
17445: LD_ADDR_OWVAR 33
17449: PUSH
17450: LD_STRING 
17452: ST_TO_ADDR
// hc_noskilllimit := true ;
17453: LD_ADDR_OWVAR 76
17457: PUSH
17458: LD_INT 1
17460: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17461: LD_ADDR_OWVAR 31
17465: PUSH
17466: LD_INT 30
17468: PUSH
17469: LD_INT 30
17471: PUSH
17472: LD_INT 30
17474: PUSH
17475: LD_INT 30
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: ST_TO_ADDR
// un := CreateHuman ;
17484: LD_ADDR_VAR 0 3
17488: PUSH
17489: CALL_OW 44
17493: ST_TO_ADDR
// hc_noskilllimit := false ;
17494: LD_ADDR_OWVAR 76
17498: PUSH
17499: LD_INT 0
17501: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17502: LD_VAR 0 3
17506: PPUSH
17507: LD_INT 1
17509: PPUSH
17510: CALL_OW 51
// ToLua ( playRanger() ) ;
17514: LD_STRING playRanger()
17516: PPUSH
17517: CALL_OW 559
// p := 0 ;
17521: LD_ADDR_VAR 0 2
17525: PUSH
17526: LD_INT 0
17528: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17529: LD_INT 35
17531: PPUSH
17532: CALL_OW 67
// p := p + 1 ;
17536: LD_ADDR_VAR 0 2
17540: PUSH
17541: LD_VAR 0 2
17545: PUSH
17546: LD_INT 1
17548: PLUS
17549: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17550: LD_VAR 0 3
17554: PPUSH
17555: CALL_OW 256
17559: PUSH
17560: LD_INT 1000
17562: LESS
17563: IFFALSE 17577
// SetLives ( un , 1000 ) ;
17565: LD_VAR 0 3
17569: PPUSH
17570: LD_INT 1000
17572: PPUSH
17573: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17577: LD_VAR 0 3
17581: PPUSH
17582: LD_INT 81
17584: PUSH
17585: LD_OWVAR 2
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 91
17596: PUSH
17597: LD_VAR 0 3
17601: PUSH
17602: LD_INT 30
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PPUSH
17614: CALL_OW 69
17618: PPUSH
17619: LD_VAR 0 3
17623: PPUSH
17624: CALL_OW 74
17628: PPUSH
17629: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17633: LD_VAR 0 2
17637: PUSH
17638: LD_INT 80
17640: GREATER
17641: PUSH
17642: LD_VAR 0 3
17646: PPUSH
17647: CALL_OW 301
17651: OR
17652: IFFALSE 17529
// if un then
17654: LD_VAR 0 3
17658: IFFALSE 17669
// RemoveUnit ( un ) ;
17660: LD_VAR 0 3
17664: PPUSH
17665: CALL_OW 64
// end ;
17669: PPOPN 3
17671: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17672: LD_EXP 79
17676: IFFALSE 17792
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
17685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17686: LD_ADDR_VAR 0 2
17690: PUSH
17691: LD_INT 81
17693: PUSH
17694: LD_OWVAR 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 21
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PPUSH
17717: CALL_OW 69
17721: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17722: LD_STRING playComputer()
17724: PPUSH
17725: CALL_OW 559
// if not tmp then
17729: LD_VAR 0 2
17733: NOT
17734: IFFALSE 17738
// exit ;
17736: GO 17792
// for i in tmp do
17738: LD_ADDR_VAR 0 1
17742: PUSH
17743: LD_VAR 0 2
17747: PUSH
17748: FOR_IN
17749: IFFALSE 17790
// for j := 1 to 4 do
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: DOUBLE
17757: LD_INT 1
17759: DEC
17760: ST_TO_ADDR
17761: LD_INT 4
17763: PUSH
17764: FOR_TO
17765: IFFALSE 17786
// SetSkill ( i , j , 10 ) ;
17767: LD_VAR 0 1
17771: PPUSH
17772: LD_VAR 0 3
17776: PPUSH
17777: LD_INT 10
17779: PPUSH
17780: CALL_OW 237
17784: GO 17764
17786: POP
17787: POP
17788: GO 17748
17790: POP
17791: POP
// end ;
17792: PPOPN 3
17794: END
// every 0 0$1 trigger s30 do var i , tmp ;
17795: LD_EXP 80
17799: IFFALSE 17868
17801: GO 17803
17803: DISABLE
17804: LD_INT 0
17806: PPUSH
17807: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17808: LD_ADDR_VAR 0 2
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_OWVAR 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 69
17829: ST_TO_ADDR
// if not tmp then
17830: LD_VAR 0 2
17834: NOT
17835: IFFALSE 17839
// exit ;
17837: GO 17868
// for i in tmp do
17839: LD_ADDR_VAR 0 1
17843: PUSH
17844: LD_VAR 0 2
17848: PUSH
17849: FOR_IN
17850: IFFALSE 17866
// SetLives ( i , 300 ) ;
17852: LD_VAR 0 1
17856: PPUSH
17857: LD_INT 300
17859: PPUSH
17860: CALL_OW 234
17864: GO 17849
17866: POP
17867: POP
// end ;
17868: PPOPN 2
17870: END
// every 0 0$1 trigger s60 do var i , tmp ;
17871: LD_EXP 81
17875: IFFALSE 17944
17877: GO 17879
17879: DISABLE
17880: LD_INT 0
17882: PPUSH
17883: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17884: LD_ADDR_VAR 0 2
17888: PUSH
17889: LD_INT 22
17891: PUSH
17892: LD_OWVAR 2
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PPUSH
17901: CALL_OW 69
17905: ST_TO_ADDR
// if not tmp then
17906: LD_VAR 0 2
17910: NOT
17911: IFFALSE 17915
// exit ;
17913: GO 17944
// for i in tmp do
17915: LD_ADDR_VAR 0 1
17919: PUSH
17920: LD_VAR 0 2
17924: PUSH
17925: FOR_IN
17926: IFFALSE 17942
// SetLives ( i , 600 ) ;
17928: LD_VAR 0 1
17932: PPUSH
17933: LD_INT 600
17935: PPUSH
17936: CALL_OW 234
17940: GO 17925
17942: POP
17943: POP
// end ;
17944: PPOPN 2
17946: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17947: LD_INT 0
17949: PPUSH
// case cmd of 301 :
17950: LD_VAR 0 1
17954: PUSH
17955: LD_INT 301
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 17995
17963: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17964: LD_VAR 0 6
17968: PPUSH
17969: LD_VAR 0 7
17973: PPUSH
17974: LD_VAR 0 8
17978: PPUSH
17979: LD_VAR 0 4
17983: PPUSH
17984: LD_VAR 0 5
17988: PPUSH
17989: CALL 19204 0 5
17993: GO 18116
17995: LD_INT 302
17997: DOUBLE
17998: EQUAL
17999: IFTRUE 18003
18001: GO 18040
18003: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18004: LD_VAR 0 6
18008: PPUSH
18009: LD_VAR 0 7
18013: PPUSH
18014: LD_VAR 0 8
18018: PPUSH
18019: LD_VAR 0 9
18023: PPUSH
18024: LD_VAR 0 4
18028: PPUSH
18029: LD_VAR 0 5
18033: PPUSH
18034: CALL 19295 0 6
18038: GO 18116
18040: LD_INT 303
18042: DOUBLE
18043: EQUAL
18044: IFTRUE 18048
18046: GO 18085
18048: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18049: LD_VAR 0 6
18053: PPUSH
18054: LD_VAR 0 7
18058: PPUSH
18059: LD_VAR 0 8
18063: PPUSH
18064: LD_VAR 0 9
18068: PPUSH
18069: LD_VAR 0 4
18073: PPUSH
18074: LD_VAR 0 5
18078: PPUSH
18079: CALL 18121 0 6
18083: GO 18116
18085: LD_INT 304
18087: DOUBLE
18088: EQUAL
18089: IFTRUE 18093
18091: GO 18115
18093: POP
// hHackTeleport ( unit , x , y ) ; end ;
18094: LD_VAR 0 2
18098: PPUSH
18099: LD_VAR 0 4
18103: PPUSH
18104: LD_VAR 0 5
18108: PPUSH
18109: CALL 19888 0 3
18113: GO 18116
18115: POP
// end ;
18116: LD_VAR 0 12
18120: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18121: LD_INT 0
18123: PPUSH
18124: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18125: LD_VAR 0 1
18129: PUSH
18130: LD_INT 1
18132: LESS
18133: PUSH
18134: LD_VAR 0 1
18138: PUSH
18139: LD_INT 3
18141: GREATER
18142: OR
18143: PUSH
18144: LD_VAR 0 5
18148: PPUSH
18149: LD_VAR 0 6
18153: PPUSH
18154: CALL_OW 428
18158: OR
18159: IFFALSE 18163
// exit ;
18161: GO 18891
// uc_side := your_side ;
18163: LD_ADDR_OWVAR 20
18167: PUSH
18168: LD_OWVAR 2
18172: ST_TO_ADDR
// uc_nation := nation ;
18173: LD_ADDR_OWVAR 21
18177: PUSH
18178: LD_VAR 0 1
18182: ST_TO_ADDR
// bc_level = 1 ;
18183: LD_ADDR_OWVAR 43
18187: PUSH
18188: LD_INT 1
18190: ST_TO_ADDR
// case btype of 1 :
18191: LD_VAR 0 2
18195: PUSH
18196: LD_INT 1
18198: DOUBLE
18199: EQUAL
18200: IFTRUE 18204
18202: GO 18215
18204: POP
// bc_type := b_depot ; 2 :
18205: LD_ADDR_OWVAR 42
18209: PUSH
18210: LD_INT 0
18212: ST_TO_ADDR
18213: GO 18835
18215: LD_INT 2
18217: DOUBLE
18218: EQUAL
18219: IFTRUE 18223
18221: GO 18234
18223: POP
// bc_type := b_warehouse ; 3 :
18224: LD_ADDR_OWVAR 42
18228: PUSH
18229: LD_INT 1
18231: ST_TO_ADDR
18232: GO 18835
18234: LD_INT 3
18236: DOUBLE
18237: EQUAL
18238: IFTRUE 18242
18240: GO 18253
18242: POP
// bc_type := b_lab ; 4 .. 9 :
18243: LD_ADDR_OWVAR 42
18247: PUSH
18248: LD_INT 6
18250: ST_TO_ADDR
18251: GO 18835
18253: LD_INT 4
18255: DOUBLE
18256: GREATEREQUAL
18257: IFFALSE 18265
18259: LD_INT 9
18261: DOUBLE
18262: LESSEQUAL
18263: IFTRUE 18267
18265: GO 18327
18267: POP
// begin bc_type := b_lab_half ;
18268: LD_ADDR_OWVAR 42
18272: PUSH
18273: LD_INT 7
18275: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18276: LD_ADDR_OWVAR 44
18280: PUSH
18281: LD_INT 10
18283: PUSH
18284: LD_INT 11
18286: PUSH
18287: LD_INT 12
18289: PUSH
18290: LD_INT 15
18292: PUSH
18293: LD_INT 14
18295: PUSH
18296: LD_INT 13
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: PUSH
18307: LD_VAR 0 2
18311: PUSH
18312: LD_INT 3
18314: MINUS
18315: ARRAY
18316: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18317: LD_ADDR_OWVAR 45
18321: PUSH
18322: LD_INT 9
18324: ST_TO_ADDR
// end ; 10 .. 13 :
18325: GO 18835
18327: LD_INT 10
18329: DOUBLE
18330: GREATEREQUAL
18331: IFFALSE 18339
18333: LD_INT 13
18335: DOUBLE
18336: LESSEQUAL
18337: IFTRUE 18341
18339: GO 18418
18341: POP
// begin bc_type := b_lab_full ;
18342: LD_ADDR_OWVAR 42
18346: PUSH
18347: LD_INT 8
18349: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18350: LD_ADDR_OWVAR 44
18354: PUSH
18355: LD_INT 10
18357: PUSH
18358: LD_INT 12
18360: PUSH
18361: LD_INT 14
18363: PUSH
18364: LD_INT 13
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: PUSH
18373: LD_VAR 0 2
18377: PUSH
18378: LD_INT 9
18380: MINUS
18381: ARRAY
18382: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18383: LD_ADDR_OWVAR 45
18387: PUSH
18388: LD_INT 11
18390: PUSH
18391: LD_INT 15
18393: PUSH
18394: LD_INT 12
18396: PUSH
18397: LD_INT 15
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: PUSH
18406: LD_VAR 0 2
18410: PUSH
18411: LD_INT 9
18413: MINUS
18414: ARRAY
18415: ST_TO_ADDR
// end ; 14 :
18416: GO 18835
18418: LD_INT 14
18420: DOUBLE
18421: EQUAL
18422: IFTRUE 18426
18424: GO 18437
18426: POP
// bc_type := b_workshop ; 15 :
18427: LD_ADDR_OWVAR 42
18431: PUSH
18432: LD_INT 2
18434: ST_TO_ADDR
18435: GO 18835
18437: LD_INT 15
18439: DOUBLE
18440: EQUAL
18441: IFTRUE 18445
18443: GO 18456
18445: POP
// bc_type := b_factory ; 16 :
18446: LD_ADDR_OWVAR 42
18450: PUSH
18451: LD_INT 3
18453: ST_TO_ADDR
18454: GO 18835
18456: LD_INT 16
18458: DOUBLE
18459: EQUAL
18460: IFTRUE 18464
18462: GO 18475
18464: POP
// bc_type := b_ext_gun ; 17 :
18465: LD_ADDR_OWVAR 42
18469: PUSH
18470: LD_INT 17
18472: ST_TO_ADDR
18473: GO 18835
18475: LD_INT 17
18477: DOUBLE
18478: EQUAL
18479: IFTRUE 18483
18481: GO 18511
18483: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18484: LD_ADDR_OWVAR 42
18488: PUSH
18489: LD_INT 19
18491: PUSH
18492: LD_INT 23
18494: PUSH
18495: LD_INT 19
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: PUSH
18503: LD_VAR 0 1
18507: ARRAY
18508: ST_TO_ADDR
18509: GO 18835
18511: LD_INT 18
18513: DOUBLE
18514: EQUAL
18515: IFTRUE 18519
18517: GO 18530
18519: POP
// bc_type := b_ext_radar ; 19 :
18520: LD_ADDR_OWVAR 42
18524: PUSH
18525: LD_INT 20
18527: ST_TO_ADDR
18528: GO 18835
18530: LD_INT 19
18532: DOUBLE
18533: EQUAL
18534: IFTRUE 18538
18536: GO 18549
18538: POP
// bc_type := b_ext_radio ; 20 :
18539: LD_ADDR_OWVAR 42
18543: PUSH
18544: LD_INT 22
18546: ST_TO_ADDR
18547: GO 18835
18549: LD_INT 20
18551: DOUBLE
18552: EQUAL
18553: IFTRUE 18557
18555: GO 18568
18557: POP
// bc_type := b_ext_siberium ; 21 :
18558: LD_ADDR_OWVAR 42
18562: PUSH
18563: LD_INT 21
18565: ST_TO_ADDR
18566: GO 18835
18568: LD_INT 21
18570: DOUBLE
18571: EQUAL
18572: IFTRUE 18576
18574: GO 18587
18576: POP
// bc_type := b_ext_computer ; 22 :
18577: LD_ADDR_OWVAR 42
18581: PUSH
18582: LD_INT 24
18584: ST_TO_ADDR
18585: GO 18835
18587: LD_INT 22
18589: DOUBLE
18590: EQUAL
18591: IFTRUE 18595
18593: GO 18606
18595: POP
// bc_type := b_ext_track ; 23 :
18596: LD_ADDR_OWVAR 42
18600: PUSH
18601: LD_INT 16
18603: ST_TO_ADDR
18604: GO 18835
18606: LD_INT 23
18608: DOUBLE
18609: EQUAL
18610: IFTRUE 18614
18612: GO 18625
18614: POP
// bc_type := b_ext_laser ; 24 :
18615: LD_ADDR_OWVAR 42
18619: PUSH
18620: LD_INT 25
18622: ST_TO_ADDR
18623: GO 18835
18625: LD_INT 24
18627: DOUBLE
18628: EQUAL
18629: IFTRUE 18633
18631: GO 18644
18633: POP
// bc_type := b_control_tower ; 25 :
18634: LD_ADDR_OWVAR 42
18638: PUSH
18639: LD_INT 36
18641: ST_TO_ADDR
18642: GO 18835
18644: LD_INT 25
18646: DOUBLE
18647: EQUAL
18648: IFTRUE 18652
18650: GO 18663
18652: POP
// bc_type := b_breastwork ; 26 :
18653: LD_ADDR_OWVAR 42
18657: PUSH
18658: LD_INT 31
18660: ST_TO_ADDR
18661: GO 18835
18663: LD_INT 26
18665: DOUBLE
18666: EQUAL
18667: IFTRUE 18671
18669: GO 18682
18671: POP
// bc_type := b_bunker ; 27 :
18672: LD_ADDR_OWVAR 42
18676: PUSH
18677: LD_INT 32
18679: ST_TO_ADDR
18680: GO 18835
18682: LD_INT 27
18684: DOUBLE
18685: EQUAL
18686: IFTRUE 18690
18688: GO 18701
18690: POP
// bc_type := b_turret ; 28 :
18691: LD_ADDR_OWVAR 42
18695: PUSH
18696: LD_INT 33
18698: ST_TO_ADDR
18699: GO 18835
18701: LD_INT 28
18703: DOUBLE
18704: EQUAL
18705: IFTRUE 18709
18707: GO 18720
18709: POP
// bc_type := b_armoury ; 29 :
18710: LD_ADDR_OWVAR 42
18714: PUSH
18715: LD_INT 4
18717: ST_TO_ADDR
18718: GO 18835
18720: LD_INT 29
18722: DOUBLE
18723: EQUAL
18724: IFTRUE 18728
18726: GO 18739
18728: POP
// bc_type := b_barracks ; 30 :
18729: LD_ADDR_OWVAR 42
18733: PUSH
18734: LD_INT 5
18736: ST_TO_ADDR
18737: GO 18835
18739: LD_INT 30
18741: DOUBLE
18742: EQUAL
18743: IFTRUE 18747
18745: GO 18758
18747: POP
// bc_type := b_solar_power ; 31 :
18748: LD_ADDR_OWVAR 42
18752: PUSH
18753: LD_INT 27
18755: ST_TO_ADDR
18756: GO 18835
18758: LD_INT 31
18760: DOUBLE
18761: EQUAL
18762: IFTRUE 18766
18764: GO 18777
18766: POP
// bc_type := b_oil_power ; 32 :
18767: LD_ADDR_OWVAR 42
18771: PUSH
18772: LD_INT 26
18774: ST_TO_ADDR
18775: GO 18835
18777: LD_INT 32
18779: DOUBLE
18780: EQUAL
18781: IFTRUE 18785
18783: GO 18796
18785: POP
// bc_type := b_siberite_power ; 33 :
18786: LD_ADDR_OWVAR 42
18790: PUSH
18791: LD_INT 28
18793: ST_TO_ADDR
18794: GO 18835
18796: LD_INT 33
18798: DOUBLE
18799: EQUAL
18800: IFTRUE 18804
18802: GO 18815
18804: POP
// bc_type := b_oil_mine ; 34 :
18805: LD_ADDR_OWVAR 42
18809: PUSH
18810: LD_INT 29
18812: ST_TO_ADDR
18813: GO 18835
18815: LD_INT 34
18817: DOUBLE
18818: EQUAL
18819: IFTRUE 18823
18821: GO 18834
18823: POP
// bc_type := b_siberite_mine ; end ;
18824: LD_ADDR_OWVAR 42
18828: PUSH
18829: LD_INT 30
18831: ST_TO_ADDR
18832: GO 18835
18834: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18835: LD_ADDR_VAR 0 8
18839: PUSH
18840: LD_VAR 0 5
18844: PPUSH
18845: LD_VAR 0 6
18849: PPUSH
18850: LD_VAR 0 3
18854: PPUSH
18855: CALL_OW 47
18859: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18860: LD_OWVAR 42
18864: PUSH
18865: LD_INT 32
18867: PUSH
18868: LD_INT 33
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: IN
18875: IFFALSE 18891
// PlaceWeaponTurret ( b , weapon ) ;
18877: LD_VAR 0 8
18881: PPUSH
18882: LD_VAR 0 4
18886: PPUSH
18887: CALL_OW 431
// end ;
18891: LD_VAR 0 7
18895: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18896: LD_INT 0
18898: PPUSH
18899: PPUSH
18900: PPUSH
18901: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18902: LD_ADDR_VAR 0 4
18906: PUSH
18907: LD_INT 22
18909: PUSH
18910: LD_OWVAR 2
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 2
18921: PUSH
18922: LD_INT 30
18924: PUSH
18925: LD_INT 0
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 30
18934: PUSH
18935: LD_INT 1
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PPUSH
18951: CALL_OW 69
18955: ST_TO_ADDR
// if not tmp then
18956: LD_VAR 0 4
18960: NOT
18961: IFFALSE 18965
// exit ;
18963: GO 19024
// for i in tmp do
18965: LD_ADDR_VAR 0 2
18969: PUSH
18970: LD_VAR 0 4
18974: PUSH
18975: FOR_IN
18976: IFFALSE 19022
// for j = 1 to 3 do
18978: LD_ADDR_VAR 0 3
18982: PUSH
18983: DOUBLE
18984: LD_INT 1
18986: DEC
18987: ST_TO_ADDR
18988: LD_INT 3
18990: PUSH
18991: FOR_TO
18992: IFFALSE 19018
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18994: LD_VAR 0 2
18998: PPUSH
18999: CALL_OW 274
19003: PPUSH
19004: LD_VAR 0 3
19008: PPUSH
19009: LD_INT 99999
19011: PPUSH
19012: CALL_OW 277
19016: GO 18991
19018: POP
19019: POP
19020: GO 18975
19022: POP
19023: POP
// end ;
19024: LD_VAR 0 1
19028: RET
// export function hHackSetLevel10 ; var i , j ; begin
19029: LD_INT 0
19031: PPUSH
19032: PPUSH
19033: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19034: LD_ADDR_VAR 0 2
19038: PUSH
19039: LD_INT 21
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PPUSH
19049: CALL_OW 69
19053: PUSH
19054: FOR_IN
19055: IFFALSE 19107
// if IsSelected ( i ) then
19057: LD_VAR 0 2
19061: PPUSH
19062: CALL_OW 306
19066: IFFALSE 19105
// begin for j := 1 to 4 do
19068: LD_ADDR_VAR 0 3
19072: PUSH
19073: DOUBLE
19074: LD_INT 1
19076: DEC
19077: ST_TO_ADDR
19078: LD_INT 4
19080: PUSH
19081: FOR_TO
19082: IFFALSE 19103
// SetSkill ( i , j , 10 ) ;
19084: LD_VAR 0 2
19088: PPUSH
19089: LD_VAR 0 3
19093: PPUSH
19094: LD_INT 10
19096: PPUSH
19097: CALL_OW 237
19101: GO 19081
19103: POP
19104: POP
// end ;
19105: GO 19054
19107: POP
19108: POP
// end ;
19109: LD_VAR 0 1
19113: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19114: LD_INT 0
19116: PPUSH
19117: PPUSH
19118: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19119: LD_ADDR_VAR 0 2
19123: PUSH
19124: LD_INT 22
19126: PUSH
19127: LD_OWVAR 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 21
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PPUSH
19150: CALL_OW 69
19154: PUSH
19155: FOR_IN
19156: IFFALSE 19197
// begin for j := 1 to 4 do
19158: LD_ADDR_VAR 0 3
19162: PUSH
19163: DOUBLE
19164: LD_INT 1
19166: DEC
19167: ST_TO_ADDR
19168: LD_INT 4
19170: PUSH
19171: FOR_TO
19172: IFFALSE 19193
// SetSkill ( i , j , 10 ) ;
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_INT 10
19186: PPUSH
19187: CALL_OW 237
19191: GO 19171
19193: POP
19194: POP
// end ;
19195: GO 19155
19197: POP
19198: POP
// end ;
19199: LD_VAR 0 1
19203: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19204: LD_INT 0
19206: PPUSH
// uc_side := your_side ;
19207: LD_ADDR_OWVAR 20
19211: PUSH
19212: LD_OWVAR 2
19216: ST_TO_ADDR
// uc_nation := nation ;
19217: LD_ADDR_OWVAR 21
19221: PUSH
19222: LD_VAR 0 1
19226: ST_TO_ADDR
// InitHc ;
19227: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19231: LD_INT 0
19233: PPUSH
19234: LD_VAR 0 2
19238: PPUSH
19239: LD_VAR 0 3
19243: PPUSH
19244: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19248: LD_VAR 0 4
19252: PPUSH
19253: LD_VAR 0 5
19257: PPUSH
19258: CALL_OW 428
19262: PUSH
19263: LD_INT 0
19265: EQUAL
19266: IFFALSE 19290
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19268: CALL_OW 44
19272: PPUSH
19273: LD_VAR 0 4
19277: PPUSH
19278: LD_VAR 0 5
19282: PPUSH
19283: LD_INT 1
19285: PPUSH
19286: CALL_OW 48
// end ;
19290: LD_VAR 0 6
19294: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19295: LD_INT 0
19297: PPUSH
19298: PPUSH
// uc_side := your_side ;
19299: LD_ADDR_OWVAR 20
19303: PUSH
19304: LD_OWVAR 2
19308: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19309: LD_VAR 0 1
19313: PUSH
19314: LD_INT 1
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: LD_INT 3
19322: PUSH
19323: LD_INT 4
19325: PUSH
19326: LD_INT 5
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: IN
19336: IFFALSE 19348
// uc_nation := nation_american else
19338: LD_ADDR_OWVAR 21
19342: PUSH
19343: LD_INT 1
19345: ST_TO_ADDR
19346: GO 19391
// if chassis in [ 11 , 12 , 13 , 14 ] then
19348: LD_VAR 0 1
19352: PUSH
19353: LD_INT 11
19355: PUSH
19356: LD_INT 12
19358: PUSH
19359: LD_INT 13
19361: PUSH
19362: LD_INT 14
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: IN
19371: IFFALSE 19383
// uc_nation := nation_arabian else
19373: LD_ADDR_OWVAR 21
19377: PUSH
19378: LD_INT 2
19380: ST_TO_ADDR
19381: GO 19391
// uc_nation := nation_russian ;
19383: LD_ADDR_OWVAR 21
19387: PUSH
19388: LD_INT 3
19390: ST_TO_ADDR
// vc_chassis := chassis ;
19391: LD_ADDR_OWVAR 37
19395: PUSH
19396: LD_VAR 0 1
19400: ST_TO_ADDR
// vc_engine := engine ;
19401: LD_ADDR_OWVAR 39
19405: PUSH
19406: LD_VAR 0 2
19410: ST_TO_ADDR
// vc_control := control ;
19411: LD_ADDR_OWVAR 38
19415: PUSH
19416: LD_VAR 0 3
19420: ST_TO_ADDR
// vc_weapon := weapon ;
19421: LD_ADDR_OWVAR 40
19425: PUSH
19426: LD_VAR 0 4
19430: ST_TO_ADDR
// un := CreateVehicle ;
19431: LD_ADDR_VAR 0 8
19435: PUSH
19436: CALL_OW 45
19440: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19441: LD_VAR 0 8
19445: PPUSH
19446: LD_INT 0
19448: PPUSH
19449: LD_INT 5
19451: PPUSH
19452: CALL_OW 12
19456: PPUSH
19457: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19461: LD_VAR 0 8
19465: PPUSH
19466: LD_VAR 0 5
19470: PPUSH
19471: LD_VAR 0 6
19475: PPUSH
19476: LD_INT 1
19478: PPUSH
19479: CALL_OW 48
// end ;
19483: LD_VAR 0 7
19487: RET
// export hInvincible ; every 1 do
19488: GO 19490
19490: DISABLE
// hInvincible := [ ] ;
19491: LD_ADDR_EXP 82
19495: PUSH
19496: EMPTY
19497: ST_TO_ADDR
19498: END
// every 10 do var i ;
19499: GO 19501
19501: DISABLE
19502: LD_INT 0
19504: PPUSH
// begin enable ;
19505: ENABLE
// if not hInvincible then
19506: LD_EXP 82
19510: NOT
19511: IFFALSE 19515
// exit ;
19513: GO 19559
// for i in hInvincible do
19515: LD_ADDR_VAR 0 1
19519: PUSH
19520: LD_EXP 82
19524: PUSH
19525: FOR_IN
19526: IFFALSE 19557
// if GetLives ( i ) < 1000 then
19528: LD_VAR 0 1
19532: PPUSH
19533: CALL_OW 256
19537: PUSH
19538: LD_INT 1000
19540: LESS
19541: IFFALSE 19555
// SetLives ( i , 1000 ) ;
19543: LD_VAR 0 1
19547: PPUSH
19548: LD_INT 1000
19550: PPUSH
19551: CALL_OW 234
19555: GO 19525
19557: POP
19558: POP
// end ;
19559: PPOPN 1
19561: END
// export function hHackInvincible ; var i ; begin
19562: LD_INT 0
19564: PPUSH
19565: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19566: LD_ADDR_VAR 0 2
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: LD_INT 21
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 21
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: PPUSH
19599: CALL_OW 69
19603: PUSH
19604: FOR_IN
19605: IFFALSE 19666
// if IsSelected ( i ) then
19607: LD_VAR 0 2
19611: PPUSH
19612: CALL_OW 306
19616: IFFALSE 19664
// begin if i in hInvincible then
19618: LD_VAR 0 2
19622: PUSH
19623: LD_EXP 82
19627: IN
19628: IFFALSE 19648
// hInvincible := hInvincible diff i else
19630: LD_ADDR_EXP 82
19634: PUSH
19635: LD_EXP 82
19639: PUSH
19640: LD_VAR 0 2
19644: DIFF
19645: ST_TO_ADDR
19646: GO 19664
// hInvincible := hInvincible union i ;
19648: LD_ADDR_EXP 82
19652: PUSH
19653: LD_EXP 82
19657: PUSH
19658: LD_VAR 0 2
19662: UNION
19663: ST_TO_ADDR
// end ;
19664: GO 19604
19666: POP
19667: POP
// end ;
19668: LD_VAR 0 1
19672: RET
// export function hHackInvisible ; var i , j ; begin
19673: LD_INT 0
19675: PPUSH
19676: PPUSH
19677: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_INT 21
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PPUSH
19693: CALL_OW 69
19697: PUSH
19698: FOR_IN
19699: IFFALSE 19723
// if IsSelected ( i ) then
19701: LD_VAR 0 2
19705: PPUSH
19706: CALL_OW 306
19710: IFFALSE 19721
// ComForceInvisible ( i ) ;
19712: LD_VAR 0 2
19716: PPUSH
19717: CALL_OW 496
19721: GO 19698
19723: POP
19724: POP
// end ;
19725: LD_VAR 0 1
19729: RET
// export function hHackChangeYourSide ; begin
19730: LD_INT 0
19732: PPUSH
// if your_side = 8 then
19733: LD_OWVAR 2
19737: PUSH
19738: LD_INT 8
19740: EQUAL
19741: IFFALSE 19753
// your_side := 0 else
19743: LD_ADDR_OWVAR 2
19747: PUSH
19748: LD_INT 0
19750: ST_TO_ADDR
19751: GO 19767
// your_side := your_side + 1 ;
19753: LD_ADDR_OWVAR 2
19757: PUSH
19758: LD_OWVAR 2
19762: PUSH
19763: LD_INT 1
19765: PLUS
19766: ST_TO_ADDR
// end ;
19767: LD_VAR 0 1
19771: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19772: LD_INT 0
19774: PPUSH
19775: PPUSH
19776: PPUSH
// for i in all_units do
19777: LD_ADDR_VAR 0 2
19781: PUSH
19782: LD_OWVAR 3
19786: PUSH
19787: FOR_IN
19788: IFFALSE 19866
// if IsSelected ( i ) then
19790: LD_VAR 0 2
19794: PPUSH
19795: CALL_OW 306
19799: IFFALSE 19864
// begin j := GetSide ( i ) ;
19801: LD_ADDR_VAR 0 3
19805: PUSH
19806: LD_VAR 0 2
19810: PPUSH
19811: CALL_OW 255
19815: ST_TO_ADDR
// if j = 8 then
19816: LD_VAR 0 3
19820: PUSH
19821: LD_INT 8
19823: EQUAL
19824: IFFALSE 19836
// j := 0 else
19826: LD_ADDR_VAR 0 3
19830: PUSH
19831: LD_INT 0
19833: ST_TO_ADDR
19834: GO 19850
// j := j + 1 ;
19836: LD_ADDR_VAR 0 3
19840: PUSH
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 1
19848: PLUS
19849: ST_TO_ADDR
// SetSide ( i , j ) ;
19850: LD_VAR 0 2
19854: PPUSH
19855: LD_VAR 0 3
19859: PPUSH
19860: CALL_OW 235
// end ;
19864: GO 19787
19866: POP
19867: POP
// end ;
19868: LD_VAR 0 1
19872: RET
// export function hHackFog ; begin
19873: LD_INT 0
19875: PPUSH
// FogOff ( true ) ;
19876: LD_INT 1
19878: PPUSH
19879: CALL_OW 344
// end ;
19883: LD_VAR 0 1
19887: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19888: LD_INT 0
19890: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19891: LD_VAR 0 1
19895: PPUSH
19896: LD_VAR 0 2
19900: PPUSH
19901: LD_VAR 0 3
19905: PPUSH
19906: LD_INT 1
19908: PPUSH
19909: LD_INT 1
19911: PPUSH
19912: CALL_OW 483
// CenterOnXY ( x , y ) ;
19916: LD_VAR 0 2
19920: PPUSH
19921: LD_VAR 0 3
19925: PPUSH
19926: CALL_OW 84
// end ;
19930: LD_VAR 0 4
19934: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19935: LD_INT 0
19937: PPUSH
19938: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19939: LD_VAR 0 1
19943: NOT
19944: PUSH
19945: LD_VAR 0 2
19949: PPUSH
19950: LD_VAR 0 3
19954: PPUSH
19955: CALL_OW 488
19959: NOT
19960: OR
19961: PUSH
19962: LD_VAR 0 1
19966: PPUSH
19967: CALL_OW 266
19971: PUSH
19972: LD_INT 3
19974: NONEQUAL
19975: PUSH
19976: LD_VAR 0 1
19980: PPUSH
19981: CALL_OW 247
19985: PUSH
19986: LD_INT 1
19988: EQUAL
19989: NOT
19990: AND
19991: OR
19992: IFFALSE 19996
// exit ;
19994: GO 20145
// if GetType ( factory ) = unit_human then
19996: LD_VAR 0 1
20000: PPUSH
20001: CALL_OW 247
20005: PUSH
20006: LD_INT 1
20008: EQUAL
20009: IFFALSE 20026
// factory := IsInUnit ( factory ) ;
20011: LD_ADDR_VAR 0 1
20015: PUSH
20016: LD_VAR 0 1
20020: PPUSH
20021: CALL_OW 310
20025: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20026: LD_VAR 0 1
20030: PPUSH
20031: CALL_OW 266
20035: PUSH
20036: LD_INT 3
20038: NONEQUAL
20039: IFFALSE 20043
// exit ;
20041: GO 20145
// if HexInfo ( x , y ) = factory then
20043: LD_VAR 0 2
20047: PPUSH
20048: LD_VAR 0 3
20052: PPUSH
20053: CALL_OW 428
20057: PUSH
20058: LD_VAR 0 1
20062: EQUAL
20063: IFFALSE 20090
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20065: LD_ADDR_EXP 83
20069: PUSH
20070: LD_EXP 83
20074: PPUSH
20075: LD_VAR 0 1
20079: PPUSH
20080: LD_INT 0
20082: PPUSH
20083: CALL_OW 1
20087: ST_TO_ADDR
20088: GO 20141
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20090: LD_ADDR_EXP 83
20094: PUSH
20095: LD_EXP 83
20099: PPUSH
20100: LD_VAR 0 1
20104: PPUSH
20105: LD_VAR 0 1
20109: PPUSH
20110: CALL_OW 255
20114: PUSH
20115: LD_VAR 0 1
20119: PUSH
20120: LD_VAR 0 2
20124: PUSH
20125: LD_VAR 0 3
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: PPUSH
20136: CALL_OW 1
20140: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20141: CALL 20150 0 0
// end ;
20145: LD_VAR 0 4
20149: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20150: LD_INT 0
20152: PPUSH
20153: PPUSH
20154: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20155: LD_STRING resetFactoryWaypoint();
20157: PPUSH
20158: CALL_OW 559
// if factoryWaypoints then
20162: LD_EXP 83
20166: IFFALSE 20292
// begin list := PrepareArray ( factoryWaypoints ) ;
20168: LD_ADDR_VAR 0 3
20172: PUSH
20173: LD_EXP 83
20177: PPUSH
20178: CALL 67656 0 1
20182: ST_TO_ADDR
// for i := 1 to list do
20183: LD_ADDR_VAR 0 2
20187: PUSH
20188: DOUBLE
20189: LD_INT 1
20191: DEC
20192: ST_TO_ADDR
20193: LD_VAR 0 3
20197: PUSH
20198: FOR_TO
20199: IFFALSE 20290
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20201: LD_STRING setFactoryWaypointXY(
20203: PUSH
20204: LD_VAR 0 3
20208: PUSH
20209: LD_VAR 0 2
20213: ARRAY
20214: PUSH
20215: LD_INT 1
20217: ARRAY
20218: STR
20219: PUSH
20220: LD_STRING ,
20222: STR
20223: PUSH
20224: LD_VAR 0 3
20228: PUSH
20229: LD_VAR 0 2
20233: ARRAY
20234: PUSH
20235: LD_INT 2
20237: ARRAY
20238: STR
20239: PUSH
20240: LD_STRING ,
20242: STR
20243: PUSH
20244: LD_VAR 0 3
20248: PUSH
20249: LD_VAR 0 2
20253: ARRAY
20254: PUSH
20255: LD_INT 3
20257: ARRAY
20258: STR
20259: PUSH
20260: LD_STRING ,
20262: STR
20263: PUSH
20264: LD_VAR 0 3
20268: PUSH
20269: LD_VAR 0 2
20273: ARRAY
20274: PUSH
20275: LD_INT 4
20277: ARRAY
20278: STR
20279: PUSH
20280: LD_STRING )
20282: STR
20283: PPUSH
20284: CALL_OW 559
20288: GO 20198
20290: POP
20291: POP
// end ; end ;
20292: LD_VAR 0 1
20296: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20297: LD_INT 0
20299: PPUSH
// if HexInfo ( x , y ) = warehouse then
20300: LD_VAR 0 2
20304: PPUSH
20305: LD_VAR 0 3
20309: PPUSH
20310: CALL_OW 428
20314: PUSH
20315: LD_VAR 0 1
20319: EQUAL
20320: IFFALSE 20347
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20322: LD_ADDR_EXP 84
20326: PUSH
20327: LD_EXP 84
20331: PPUSH
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_INT 0
20339: PPUSH
20340: CALL_OW 1
20344: ST_TO_ADDR
20345: GO 20398
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20347: LD_ADDR_EXP 84
20351: PUSH
20352: LD_EXP 84
20356: PPUSH
20357: LD_VAR 0 1
20361: PPUSH
20362: LD_VAR 0 1
20366: PPUSH
20367: CALL_OW 255
20371: PUSH
20372: LD_VAR 0 1
20376: PUSH
20377: LD_VAR 0 2
20381: PUSH
20382: LD_VAR 0 3
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: PPUSH
20393: CALL_OW 1
20397: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20398: CALL 20407 0 0
// end ;
20402: LD_VAR 0 4
20406: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20407: LD_INT 0
20409: PPUSH
20410: PPUSH
20411: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20412: LD_STRING resetWarehouseGatheringPoints();
20414: PPUSH
20415: CALL_OW 559
// if warehouseGatheringPoints then
20419: LD_EXP 84
20423: IFFALSE 20549
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20425: LD_ADDR_VAR 0 3
20429: PUSH
20430: LD_EXP 84
20434: PPUSH
20435: CALL 67656 0 1
20439: ST_TO_ADDR
// for i := 1 to list do
20440: LD_ADDR_VAR 0 2
20444: PUSH
20445: DOUBLE
20446: LD_INT 1
20448: DEC
20449: ST_TO_ADDR
20450: LD_VAR 0 3
20454: PUSH
20455: FOR_TO
20456: IFFALSE 20547
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20458: LD_STRING setWarehouseGatheringPointXY(
20460: PUSH
20461: LD_VAR 0 3
20465: PUSH
20466: LD_VAR 0 2
20470: ARRAY
20471: PUSH
20472: LD_INT 1
20474: ARRAY
20475: STR
20476: PUSH
20477: LD_STRING ,
20479: STR
20480: PUSH
20481: LD_VAR 0 3
20485: PUSH
20486: LD_VAR 0 2
20490: ARRAY
20491: PUSH
20492: LD_INT 2
20494: ARRAY
20495: STR
20496: PUSH
20497: LD_STRING ,
20499: STR
20500: PUSH
20501: LD_VAR 0 3
20505: PUSH
20506: LD_VAR 0 2
20510: ARRAY
20511: PUSH
20512: LD_INT 3
20514: ARRAY
20515: STR
20516: PUSH
20517: LD_STRING ,
20519: STR
20520: PUSH
20521: LD_VAR 0 3
20525: PUSH
20526: LD_VAR 0 2
20530: ARRAY
20531: PUSH
20532: LD_INT 4
20534: ARRAY
20535: STR
20536: PUSH
20537: LD_STRING )
20539: STR
20540: PPUSH
20541: CALL_OW 559
20545: GO 20455
20547: POP
20548: POP
// end ; end ;
20549: LD_VAR 0 1
20553: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20554: LD_EXP 84
20558: IFFALSE 21243
20560: GO 20562
20562: DISABLE
20563: LD_INT 0
20565: PPUSH
20566: PPUSH
20567: PPUSH
20568: PPUSH
20569: PPUSH
20570: PPUSH
20571: PPUSH
20572: PPUSH
20573: PPUSH
// begin enable ;
20574: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20575: LD_ADDR_VAR 0 3
20579: PUSH
20580: LD_EXP 84
20584: PPUSH
20585: CALL 67656 0 1
20589: ST_TO_ADDR
// if not list then
20590: LD_VAR 0 3
20594: NOT
20595: IFFALSE 20599
// exit ;
20597: GO 21243
// for i := 1 to list do
20599: LD_ADDR_VAR 0 1
20603: PUSH
20604: DOUBLE
20605: LD_INT 1
20607: DEC
20608: ST_TO_ADDR
20609: LD_VAR 0 3
20613: PUSH
20614: FOR_TO
20615: IFFALSE 21241
// begin depot := list [ i ] [ 2 ] ;
20617: LD_ADDR_VAR 0 8
20621: PUSH
20622: LD_VAR 0 3
20626: PUSH
20627: LD_VAR 0 1
20631: ARRAY
20632: PUSH
20633: LD_INT 2
20635: ARRAY
20636: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20637: LD_ADDR_VAR 0 5
20641: PUSH
20642: LD_VAR 0 3
20646: PUSH
20647: LD_VAR 0 1
20651: ARRAY
20652: PUSH
20653: LD_INT 1
20655: ARRAY
20656: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20657: LD_VAR 0 8
20661: PPUSH
20662: CALL_OW 301
20666: PUSH
20667: LD_VAR 0 5
20671: PUSH
20672: LD_VAR 0 8
20676: PPUSH
20677: CALL_OW 255
20681: NONEQUAL
20682: OR
20683: IFFALSE 20712
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20685: LD_ADDR_EXP 84
20689: PUSH
20690: LD_EXP 84
20694: PPUSH
20695: LD_VAR 0 8
20699: PPUSH
20700: LD_INT 0
20702: PPUSH
20703: CALL_OW 1
20707: ST_TO_ADDR
// exit ;
20708: POP
20709: POP
20710: GO 21243
// end ; x := list [ i ] [ 3 ] ;
20712: LD_ADDR_VAR 0 6
20716: PUSH
20717: LD_VAR 0 3
20721: PUSH
20722: LD_VAR 0 1
20726: ARRAY
20727: PUSH
20728: LD_INT 3
20730: ARRAY
20731: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20732: LD_ADDR_VAR 0 7
20736: PUSH
20737: LD_VAR 0 3
20741: PUSH
20742: LD_VAR 0 1
20746: ARRAY
20747: PUSH
20748: LD_INT 4
20750: ARRAY
20751: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20752: LD_ADDR_VAR 0 9
20756: PUSH
20757: LD_VAR 0 6
20761: PPUSH
20762: LD_VAR 0 7
20766: PPUSH
20767: LD_INT 16
20769: PPUSH
20770: CALL 66244 0 3
20774: ST_TO_ADDR
// if not cratesNearbyPoint then
20775: LD_VAR 0 9
20779: NOT
20780: IFFALSE 20786
// exit ;
20782: POP
20783: POP
20784: GO 21243
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20786: LD_ADDR_VAR 0 4
20790: PUSH
20791: LD_INT 22
20793: PUSH
20794: LD_VAR 0 5
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 3
20805: PUSH
20806: LD_INT 60
20808: PUSH
20809: EMPTY
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 91
20818: PUSH
20819: LD_VAR 0 8
20823: PUSH
20824: LD_INT 6
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 25
20837: PUSH
20838: LD_INT 2
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 25
20847: PUSH
20848: LD_INT 16
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: PPUSH
20866: CALL_OW 69
20870: PUSH
20871: LD_VAR 0 8
20875: PPUSH
20876: CALL_OW 313
20880: PPUSH
20881: LD_INT 3
20883: PUSH
20884: LD_INT 60
20886: PUSH
20887: EMPTY
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: LD_INT 25
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 25
20909: PUSH
20910: LD_INT 16
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PPUSH
20926: CALL_OW 72
20930: UNION
20931: ST_TO_ADDR
// if tmp then
20932: LD_VAR 0 4
20936: IFFALSE 21016
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20938: LD_ADDR_VAR 0 4
20942: PUSH
20943: LD_VAR 0 4
20947: PPUSH
20948: LD_INT 3
20950: PPUSH
20951: CALL 64213 0 2
20955: ST_TO_ADDR
// for j in tmp do
20956: LD_ADDR_VAR 0 2
20960: PUSH
20961: LD_VAR 0 4
20965: PUSH
20966: FOR_IN
20967: IFFALSE 21010
// begin if IsInUnit ( j ) then
20969: LD_VAR 0 2
20973: PPUSH
20974: CALL_OW 310
20978: IFFALSE 20989
// ComExit ( j ) ;
20980: LD_VAR 0 2
20984: PPUSH
20985: CALL 64296 0 1
// AddComCollect ( j , x , y ) ;
20989: LD_VAR 0 2
20993: PPUSH
20994: LD_VAR 0 6
20998: PPUSH
20999: LD_VAR 0 7
21003: PPUSH
21004: CALL_OW 177
// end ;
21008: GO 20966
21010: POP
21011: POP
// exit ;
21012: POP
21013: POP
21014: GO 21243
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21016: LD_ADDR_VAR 0 4
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_VAR 0 5
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 91
21035: PUSH
21036: LD_VAR 0 8
21040: PUSH
21041: LD_INT 8
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 2
21051: PUSH
21052: LD_INT 34
21054: PUSH
21055: LD_INT 12
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 34
21064: PUSH
21065: LD_INT 51
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 34
21074: PUSH
21075: LD_INT 32
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 34
21084: PUSH
21085: LD_INT 89
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: PPUSH
21104: CALL_OW 69
21108: ST_TO_ADDR
// if tmp then
21109: LD_VAR 0 4
21113: IFFALSE 21239
// begin for j in tmp do
21115: LD_ADDR_VAR 0 2
21119: PUSH
21120: LD_VAR 0 4
21124: PUSH
21125: FOR_IN
21126: IFFALSE 21237
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21128: LD_VAR 0 2
21132: PPUSH
21133: CALL_OW 262
21137: PUSH
21138: LD_INT 3
21140: EQUAL
21141: PUSH
21142: LD_VAR 0 2
21146: PPUSH
21147: CALL_OW 261
21151: PUSH
21152: LD_INT 20
21154: GREATER
21155: OR
21156: PUSH
21157: LD_VAR 0 2
21161: PPUSH
21162: CALL_OW 314
21166: NOT
21167: AND
21168: PUSH
21169: LD_VAR 0 2
21173: PPUSH
21174: CALL_OW 263
21178: PUSH
21179: LD_INT 1
21181: NONEQUAL
21182: PUSH
21183: LD_VAR 0 2
21187: PPUSH
21188: CALL_OW 311
21192: OR
21193: AND
21194: IFFALSE 21235
// begin ComCollect ( j , x , y ) ;
21196: LD_VAR 0 2
21200: PPUSH
21201: LD_VAR 0 6
21205: PPUSH
21206: LD_VAR 0 7
21210: PPUSH
21211: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21215: LD_VAR 0 2
21219: PPUSH
21220: LD_VAR 0 8
21224: PPUSH
21225: CALL_OW 172
// exit ;
21229: POP
21230: POP
21231: POP
21232: POP
21233: GO 21243
// end ;
21235: GO 21125
21237: POP
21238: POP
// end ; end ;
21239: GO 20614
21241: POP
21242: POP
// end ; end_of_file
21243: PPOPN 9
21245: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21246: LD_INT 0
21248: PPUSH
21249: PPUSH
21250: PPUSH
21251: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21252: LD_VAR 0 1
21256: PPUSH
21257: CALL_OW 264
21261: PUSH
21262: LD_INT 91
21264: EQUAL
21265: IFFALSE 21337
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21267: LD_INT 68
21269: PPUSH
21270: LD_VAR 0 1
21274: PPUSH
21275: CALL_OW 255
21279: PPUSH
21280: CALL_OW 321
21284: PUSH
21285: LD_INT 2
21287: EQUAL
21288: IFFALSE 21300
// eff := 70 else
21290: LD_ADDR_VAR 0 4
21294: PUSH
21295: LD_INT 70
21297: ST_TO_ADDR
21298: GO 21308
// eff := 30 ;
21300: LD_ADDR_VAR 0 4
21304: PUSH
21305: LD_INT 30
21307: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21308: LD_VAR 0 1
21312: PPUSH
21313: CALL_OW 250
21317: PPUSH
21318: LD_VAR 0 1
21322: PPUSH
21323: CALL_OW 251
21327: PPUSH
21328: LD_VAR 0 4
21332: PPUSH
21333: CALL_OW 495
// end ; end ;
21337: LD_VAR 0 2
21341: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21342: LD_INT 0
21344: PPUSH
// end ;
21345: LD_VAR 0 4
21349: RET
// export function SOS_Command ( cmd ) ; begin
21350: LD_INT 0
21352: PPUSH
// end ;
21353: LD_VAR 0 2
21357: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21358: LD_INT 0
21360: PPUSH
// end ;
21361: LD_VAR 0 6
21365: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21366: LD_INT 0
21368: PPUSH
21369: PPUSH
// if not vehicle or not factory then
21370: LD_VAR 0 1
21374: NOT
21375: PUSH
21376: LD_VAR 0 2
21380: NOT
21381: OR
21382: IFFALSE 21386
// exit ;
21384: GO 21617
// if factoryWaypoints >= factory then
21386: LD_EXP 83
21390: PUSH
21391: LD_VAR 0 2
21395: GREATEREQUAL
21396: IFFALSE 21617
// if factoryWaypoints [ factory ] then
21398: LD_EXP 83
21402: PUSH
21403: LD_VAR 0 2
21407: ARRAY
21408: IFFALSE 21617
// begin if GetControl ( vehicle ) = control_manual then
21410: LD_VAR 0 1
21414: PPUSH
21415: CALL_OW 263
21419: PUSH
21420: LD_INT 1
21422: EQUAL
21423: IFFALSE 21504
// begin driver := IsDrivenBy ( vehicle ) ;
21425: LD_ADDR_VAR 0 4
21429: PUSH
21430: LD_VAR 0 1
21434: PPUSH
21435: CALL_OW 311
21439: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21440: LD_VAR 0 4
21444: PPUSH
21445: LD_EXP 83
21449: PUSH
21450: LD_VAR 0 2
21454: ARRAY
21455: PUSH
21456: LD_INT 3
21458: ARRAY
21459: PPUSH
21460: LD_EXP 83
21464: PUSH
21465: LD_VAR 0 2
21469: ARRAY
21470: PUSH
21471: LD_INT 4
21473: ARRAY
21474: PPUSH
21475: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21479: LD_VAR 0 4
21483: PPUSH
21484: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21488: LD_VAR 0 4
21492: PPUSH
21493: LD_VAR 0 2
21497: PPUSH
21498: CALL_OW 180
// end else
21502: GO 21617
// if GetControl ( vehicle ) = control_remote then
21504: LD_VAR 0 1
21508: PPUSH
21509: CALL_OW 263
21513: PUSH
21514: LD_INT 2
21516: EQUAL
21517: IFFALSE 21578
// begin wait ( 0 0$2 ) ;
21519: LD_INT 70
21521: PPUSH
21522: CALL_OW 67
// if Connect ( vehicle ) then
21526: LD_VAR 0 1
21530: PPUSH
21531: CALL 34504 0 1
21535: IFFALSE 21576
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21537: LD_VAR 0 1
21541: PPUSH
21542: LD_EXP 83
21546: PUSH
21547: LD_VAR 0 2
21551: ARRAY
21552: PUSH
21553: LD_INT 3
21555: ARRAY
21556: PPUSH
21557: LD_EXP 83
21561: PUSH
21562: LD_VAR 0 2
21566: ARRAY
21567: PUSH
21568: LD_INT 4
21570: ARRAY
21571: PPUSH
21572: CALL_OW 171
// end else
21576: GO 21617
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21578: LD_VAR 0 1
21582: PPUSH
21583: LD_EXP 83
21587: PUSH
21588: LD_VAR 0 2
21592: ARRAY
21593: PUSH
21594: LD_INT 3
21596: ARRAY
21597: PPUSH
21598: LD_EXP 83
21602: PUSH
21603: LD_VAR 0 2
21607: ARRAY
21608: PUSH
21609: LD_INT 4
21611: ARRAY
21612: PPUSH
21613: CALL_OW 171
// end ; end ;
21617: LD_VAR 0 3
21621: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21622: LD_INT 0
21624: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21625: LD_VAR 0 1
21629: PUSH
21630: LD_INT 250
21632: EQUAL
21633: PUSH
21634: LD_VAR 0 2
21638: PPUSH
21639: CALL_OW 264
21643: PUSH
21644: LD_INT 81
21646: EQUAL
21647: AND
21648: IFFALSE 21669
// MinerPlaceMine ( unit , x , y ) ;
21650: LD_VAR 0 2
21654: PPUSH
21655: LD_VAR 0 4
21659: PPUSH
21660: LD_VAR 0 5
21664: PPUSH
21665: CALL 24493 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21669: LD_VAR 0 1
21673: PUSH
21674: LD_INT 251
21676: EQUAL
21677: PUSH
21678: LD_VAR 0 2
21682: PPUSH
21683: CALL_OW 264
21687: PUSH
21688: LD_INT 81
21690: EQUAL
21691: AND
21692: IFFALSE 21713
// MinerDetonateMine ( unit , x , y ) ;
21694: LD_VAR 0 2
21698: PPUSH
21699: LD_VAR 0 4
21703: PPUSH
21704: LD_VAR 0 5
21708: PPUSH
21709: CALL 24768 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21713: LD_VAR 0 1
21717: PUSH
21718: LD_INT 252
21720: EQUAL
21721: PUSH
21722: LD_VAR 0 2
21726: PPUSH
21727: CALL_OW 264
21731: PUSH
21732: LD_INT 81
21734: EQUAL
21735: AND
21736: IFFALSE 21757
// MinerCreateMinefield ( unit , x , y ) ;
21738: LD_VAR 0 2
21742: PPUSH
21743: LD_VAR 0 4
21747: PPUSH
21748: LD_VAR 0 5
21752: PPUSH
21753: CALL 25185 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21757: LD_VAR 0 1
21761: PUSH
21762: LD_INT 253
21764: EQUAL
21765: PUSH
21766: LD_VAR 0 2
21770: PPUSH
21771: CALL_OW 257
21775: PUSH
21776: LD_INT 5
21778: EQUAL
21779: AND
21780: IFFALSE 21801
// ComBinocular ( unit , x , y ) ;
21782: LD_VAR 0 2
21786: PPUSH
21787: LD_VAR 0 4
21791: PPUSH
21792: LD_VAR 0 5
21796: PPUSH
21797: CALL 25554 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21801: LD_VAR 0 1
21805: PUSH
21806: LD_INT 254
21808: EQUAL
21809: PUSH
21810: LD_VAR 0 2
21814: PPUSH
21815: CALL_OW 264
21819: PUSH
21820: LD_INT 99
21822: EQUAL
21823: AND
21824: PUSH
21825: LD_VAR 0 3
21829: PPUSH
21830: CALL_OW 263
21834: PUSH
21835: LD_INT 3
21837: EQUAL
21838: AND
21839: IFFALSE 21855
// HackDestroyVehicle ( unit , selectedUnit ) ;
21841: LD_VAR 0 2
21845: PPUSH
21846: LD_VAR 0 3
21850: PPUSH
21851: CALL 23857 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21855: LD_VAR 0 1
21859: PUSH
21860: LD_INT 255
21862: EQUAL
21863: PUSH
21864: LD_VAR 0 2
21868: PPUSH
21869: CALL_OW 264
21873: PUSH
21874: LD_INT 14
21876: PUSH
21877: LD_INT 53
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: IN
21884: AND
21885: PUSH
21886: LD_VAR 0 4
21890: PPUSH
21891: LD_VAR 0 5
21895: PPUSH
21896: CALL_OW 488
21900: AND
21901: IFFALSE 21925
// CutTreeXYR ( unit , x , y , 12 ) ;
21903: LD_VAR 0 2
21907: PPUSH
21908: LD_VAR 0 4
21912: PPUSH
21913: LD_VAR 0 5
21917: PPUSH
21918: LD_INT 12
21920: PPUSH
21921: CALL 22020 0 4
// if cmd = 256 then
21925: LD_VAR 0 1
21929: PUSH
21930: LD_INT 256
21932: EQUAL
21933: IFFALSE 21954
// SetFactoryWaypoint ( unit , x , y ) ;
21935: LD_VAR 0 2
21939: PPUSH
21940: LD_VAR 0 4
21944: PPUSH
21945: LD_VAR 0 5
21949: PPUSH
21950: CALL 19935 0 3
// if cmd = 257 then
21954: LD_VAR 0 1
21958: PUSH
21959: LD_INT 257
21961: EQUAL
21962: IFFALSE 21983
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21964: LD_VAR 0 2
21968: PPUSH
21969: LD_VAR 0 4
21973: PPUSH
21974: LD_VAR 0 5
21978: PPUSH
21979: CALL 20297 0 3
// if cmd = 258 then
21983: LD_VAR 0 1
21987: PUSH
21988: LD_INT 258
21990: EQUAL
21991: IFFALSE 22015
// BurnTreeXYR ( unit , x , y , 8 ) ;
21993: LD_VAR 0 2
21997: PPUSH
21998: LD_VAR 0 4
22002: PPUSH
22003: LD_VAR 0 5
22007: PPUSH
22008: LD_INT 8
22010: PPUSH
22011: CALL 22414 0 4
// end ;
22015: LD_VAR 0 6
22019: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22020: LD_INT 0
22022: PPUSH
22023: PPUSH
22024: PPUSH
22025: PPUSH
22026: PPUSH
22027: PPUSH
22028: PPUSH
22029: PPUSH
22030: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22031: LD_VAR 0 1
22035: PPUSH
22036: CALL_OW 302
22040: NOT
22041: PUSH
22042: LD_VAR 0 2
22046: PPUSH
22047: LD_VAR 0 3
22051: PPUSH
22052: CALL_OW 488
22056: NOT
22057: OR
22058: PUSH
22059: LD_VAR 0 4
22063: NOT
22064: OR
22065: IFFALSE 22069
// exit ;
22067: GO 22409
// list := [ ] ;
22069: LD_ADDR_VAR 0 13
22073: PUSH
22074: EMPTY
22075: ST_TO_ADDR
// if x - r < 0 then
22076: LD_VAR 0 2
22080: PUSH
22081: LD_VAR 0 4
22085: MINUS
22086: PUSH
22087: LD_INT 0
22089: LESS
22090: IFFALSE 22102
// min_x := 0 else
22092: LD_ADDR_VAR 0 7
22096: PUSH
22097: LD_INT 0
22099: ST_TO_ADDR
22100: GO 22118
// min_x := x - r ;
22102: LD_ADDR_VAR 0 7
22106: PUSH
22107: LD_VAR 0 2
22111: PUSH
22112: LD_VAR 0 4
22116: MINUS
22117: ST_TO_ADDR
// if y - r < 0 then
22118: LD_VAR 0 3
22122: PUSH
22123: LD_VAR 0 4
22127: MINUS
22128: PUSH
22129: LD_INT 0
22131: LESS
22132: IFFALSE 22144
// min_y := 0 else
22134: LD_ADDR_VAR 0 8
22138: PUSH
22139: LD_INT 0
22141: ST_TO_ADDR
22142: GO 22160
// min_y := y - r ;
22144: LD_ADDR_VAR 0 8
22148: PUSH
22149: LD_VAR 0 3
22153: PUSH
22154: LD_VAR 0 4
22158: MINUS
22159: ST_TO_ADDR
// max_x := x + r ;
22160: LD_ADDR_VAR 0 9
22164: PUSH
22165: LD_VAR 0 2
22169: PUSH
22170: LD_VAR 0 4
22174: PLUS
22175: ST_TO_ADDR
// max_y := y + r ;
22176: LD_ADDR_VAR 0 10
22180: PUSH
22181: LD_VAR 0 3
22185: PUSH
22186: LD_VAR 0 4
22190: PLUS
22191: ST_TO_ADDR
// for _x = min_x to max_x do
22192: LD_ADDR_VAR 0 11
22196: PUSH
22197: DOUBLE
22198: LD_VAR 0 7
22202: DEC
22203: ST_TO_ADDR
22204: LD_VAR 0 9
22208: PUSH
22209: FOR_TO
22210: IFFALSE 22327
// for _y = min_y to max_y do
22212: LD_ADDR_VAR 0 12
22216: PUSH
22217: DOUBLE
22218: LD_VAR 0 8
22222: DEC
22223: ST_TO_ADDR
22224: LD_VAR 0 10
22228: PUSH
22229: FOR_TO
22230: IFFALSE 22323
// begin if not ValidHex ( _x , _y ) then
22232: LD_VAR 0 11
22236: PPUSH
22237: LD_VAR 0 12
22241: PPUSH
22242: CALL_OW 488
22246: NOT
22247: IFFALSE 22251
// continue ;
22249: GO 22229
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22251: LD_VAR 0 11
22255: PPUSH
22256: LD_VAR 0 12
22260: PPUSH
22261: CALL_OW 351
22265: PUSH
22266: LD_VAR 0 11
22270: PPUSH
22271: LD_VAR 0 12
22275: PPUSH
22276: CALL_OW 554
22280: AND
22281: IFFALSE 22321
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22283: LD_ADDR_VAR 0 13
22287: PUSH
22288: LD_VAR 0 13
22292: PPUSH
22293: LD_VAR 0 13
22297: PUSH
22298: LD_INT 1
22300: PLUS
22301: PPUSH
22302: LD_VAR 0 11
22306: PUSH
22307: LD_VAR 0 12
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PPUSH
22316: CALL_OW 2
22320: ST_TO_ADDR
// end ;
22321: GO 22229
22323: POP
22324: POP
22325: GO 22209
22327: POP
22328: POP
// if not list then
22329: LD_VAR 0 13
22333: NOT
22334: IFFALSE 22338
// exit ;
22336: GO 22409
// for i in list do
22338: LD_ADDR_VAR 0 6
22342: PUSH
22343: LD_VAR 0 13
22347: PUSH
22348: FOR_IN
22349: IFFALSE 22407
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22351: LD_VAR 0 1
22355: PPUSH
22356: LD_STRING M
22358: PUSH
22359: LD_VAR 0 6
22363: PUSH
22364: LD_INT 1
22366: ARRAY
22367: PUSH
22368: LD_VAR 0 6
22372: PUSH
22373: LD_INT 2
22375: ARRAY
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: LD_INT 0
22382: PUSH
22383: LD_INT 0
22385: PUSH
22386: LD_INT 0
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: PUSH
22398: EMPTY
22399: LIST
22400: PPUSH
22401: CALL_OW 447
22405: GO 22348
22407: POP
22408: POP
// end ;
22409: LD_VAR 0 5
22413: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22414: LD_INT 0
22416: PPUSH
22417: PPUSH
22418: PPUSH
22419: PPUSH
22420: PPUSH
22421: PPUSH
22422: PPUSH
22423: PPUSH
22424: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22425: LD_VAR 0 1
22429: PPUSH
22430: CALL_OW 302
22434: NOT
22435: PUSH
22436: LD_VAR 0 2
22440: PPUSH
22441: LD_VAR 0 3
22445: PPUSH
22446: CALL_OW 488
22450: NOT
22451: OR
22452: PUSH
22453: LD_VAR 0 4
22457: NOT
22458: OR
22459: IFFALSE 22463
// exit ;
22461: GO 22811
// list := [ ] ;
22463: LD_ADDR_VAR 0 13
22467: PUSH
22468: EMPTY
22469: ST_TO_ADDR
// if x - r < 0 then
22470: LD_VAR 0 2
22474: PUSH
22475: LD_VAR 0 4
22479: MINUS
22480: PUSH
22481: LD_INT 0
22483: LESS
22484: IFFALSE 22496
// min_x := 0 else
22486: LD_ADDR_VAR 0 7
22490: PUSH
22491: LD_INT 0
22493: ST_TO_ADDR
22494: GO 22512
// min_x := x - r ;
22496: LD_ADDR_VAR 0 7
22500: PUSH
22501: LD_VAR 0 2
22505: PUSH
22506: LD_VAR 0 4
22510: MINUS
22511: ST_TO_ADDR
// if y - r < 0 then
22512: LD_VAR 0 3
22516: PUSH
22517: LD_VAR 0 4
22521: MINUS
22522: PUSH
22523: LD_INT 0
22525: LESS
22526: IFFALSE 22538
// min_y := 0 else
22528: LD_ADDR_VAR 0 8
22532: PUSH
22533: LD_INT 0
22535: ST_TO_ADDR
22536: GO 22554
// min_y := y - r ;
22538: LD_ADDR_VAR 0 8
22542: PUSH
22543: LD_VAR 0 3
22547: PUSH
22548: LD_VAR 0 4
22552: MINUS
22553: ST_TO_ADDR
// max_x := x + r ;
22554: LD_ADDR_VAR 0 9
22558: PUSH
22559: LD_VAR 0 2
22563: PUSH
22564: LD_VAR 0 4
22568: PLUS
22569: ST_TO_ADDR
// max_y := y + r ;
22570: LD_ADDR_VAR 0 10
22574: PUSH
22575: LD_VAR 0 3
22579: PUSH
22580: LD_VAR 0 4
22584: PLUS
22585: ST_TO_ADDR
// for _x = min_x to max_x do
22586: LD_ADDR_VAR 0 11
22590: PUSH
22591: DOUBLE
22592: LD_VAR 0 7
22596: DEC
22597: ST_TO_ADDR
22598: LD_VAR 0 9
22602: PUSH
22603: FOR_TO
22604: IFFALSE 22721
// for _y = min_y to max_y do
22606: LD_ADDR_VAR 0 12
22610: PUSH
22611: DOUBLE
22612: LD_VAR 0 8
22616: DEC
22617: ST_TO_ADDR
22618: LD_VAR 0 10
22622: PUSH
22623: FOR_TO
22624: IFFALSE 22717
// begin if not ValidHex ( _x , _y ) then
22626: LD_VAR 0 11
22630: PPUSH
22631: LD_VAR 0 12
22635: PPUSH
22636: CALL_OW 488
22640: NOT
22641: IFFALSE 22645
// continue ;
22643: GO 22623
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22645: LD_VAR 0 11
22649: PPUSH
22650: LD_VAR 0 12
22654: PPUSH
22655: CALL_OW 351
22659: PUSH
22660: LD_VAR 0 11
22664: PPUSH
22665: LD_VAR 0 12
22669: PPUSH
22670: CALL_OW 554
22674: AND
22675: IFFALSE 22715
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22677: LD_ADDR_VAR 0 13
22681: PUSH
22682: LD_VAR 0 13
22686: PPUSH
22687: LD_VAR 0 13
22691: PUSH
22692: LD_INT 1
22694: PLUS
22695: PPUSH
22696: LD_VAR 0 11
22700: PUSH
22701: LD_VAR 0 12
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PPUSH
22710: CALL_OW 2
22714: ST_TO_ADDR
// end ;
22715: GO 22623
22717: POP
22718: POP
22719: GO 22603
22721: POP
22722: POP
// if not list then
22723: LD_VAR 0 13
22727: NOT
22728: IFFALSE 22732
// exit ;
22730: GO 22811
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22732: LD_ADDR_VAR 0 13
22736: PUSH
22737: LD_VAR 0 1
22741: PPUSH
22742: LD_VAR 0 13
22746: PPUSH
22747: LD_INT 1
22749: PPUSH
22750: LD_INT 1
22752: PPUSH
22753: CALL 31646 0 4
22757: ST_TO_ADDR
// ComStop ( flame ) ;
22758: LD_VAR 0 1
22762: PPUSH
22763: CALL_OW 141
// for i in list do
22767: LD_ADDR_VAR 0 6
22771: PUSH
22772: LD_VAR 0 13
22776: PUSH
22777: FOR_IN
22778: IFFALSE 22809
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22780: LD_VAR 0 1
22784: PPUSH
22785: LD_VAR 0 6
22789: PUSH
22790: LD_INT 1
22792: ARRAY
22793: PPUSH
22794: LD_VAR 0 6
22798: PUSH
22799: LD_INT 2
22801: ARRAY
22802: PPUSH
22803: CALL_OW 176
22807: GO 22777
22809: POP
22810: POP
// end ;
22811: LD_VAR 0 5
22815: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22816: LD_EXP 86
22820: NOT
22821: IFFALSE 22871
22823: GO 22825
22825: DISABLE
// begin initHack := true ;
22826: LD_ADDR_EXP 86
22830: PUSH
22831: LD_INT 1
22833: ST_TO_ADDR
// hackTanks := [ ] ;
22834: LD_ADDR_EXP 87
22838: PUSH
22839: EMPTY
22840: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22841: LD_ADDR_EXP 88
22845: PUSH
22846: EMPTY
22847: ST_TO_ADDR
// hackLimit := 3 ;
22848: LD_ADDR_EXP 89
22852: PUSH
22853: LD_INT 3
22855: ST_TO_ADDR
// hackDist := 12 ;
22856: LD_ADDR_EXP 90
22860: PUSH
22861: LD_INT 12
22863: ST_TO_ADDR
// hackCounter := [ ] ;
22864: LD_ADDR_EXP 91
22868: PUSH
22869: EMPTY
22870: ST_TO_ADDR
// end ;
22871: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22872: LD_EXP 86
22876: PUSH
22877: LD_INT 34
22879: PUSH
22880: LD_INT 99
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PPUSH
22887: CALL_OW 69
22891: AND
22892: IFFALSE 23145
22894: GO 22896
22896: DISABLE
22897: LD_INT 0
22899: PPUSH
22900: PPUSH
// begin enable ;
22901: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22902: LD_ADDR_VAR 0 1
22906: PUSH
22907: LD_INT 34
22909: PUSH
22910: LD_INT 99
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PPUSH
22917: CALL_OW 69
22921: PUSH
22922: FOR_IN
22923: IFFALSE 23143
// begin if not i in hackTanks then
22925: LD_VAR 0 1
22929: PUSH
22930: LD_EXP 87
22934: IN
22935: NOT
22936: IFFALSE 23019
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22938: LD_ADDR_EXP 87
22942: PUSH
22943: LD_EXP 87
22947: PPUSH
22948: LD_EXP 87
22952: PUSH
22953: LD_INT 1
22955: PLUS
22956: PPUSH
22957: LD_VAR 0 1
22961: PPUSH
22962: CALL_OW 1
22966: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22967: LD_ADDR_EXP 88
22971: PUSH
22972: LD_EXP 88
22976: PPUSH
22977: LD_EXP 88
22981: PUSH
22982: LD_INT 1
22984: PLUS
22985: PPUSH
22986: EMPTY
22987: PPUSH
22988: CALL_OW 1
22992: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22993: LD_ADDR_EXP 91
22997: PUSH
22998: LD_EXP 91
23002: PPUSH
23003: LD_EXP 91
23007: PUSH
23008: LD_INT 1
23010: PLUS
23011: PPUSH
23012: EMPTY
23013: PPUSH
23014: CALL_OW 1
23018: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23019: LD_VAR 0 1
23023: PPUSH
23024: CALL_OW 302
23028: NOT
23029: IFFALSE 23042
// begin HackUnlinkAll ( i ) ;
23031: LD_VAR 0 1
23035: PPUSH
23036: CALL 23148 0 1
// continue ;
23040: GO 22922
// end ; HackCheckCapturedStatus ( i ) ;
23042: LD_VAR 0 1
23046: PPUSH
23047: CALL 23591 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23051: LD_ADDR_VAR 0 2
23055: PUSH
23056: LD_INT 81
23058: PUSH
23059: LD_VAR 0 1
23063: PPUSH
23064: CALL_OW 255
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 33
23075: PUSH
23076: LD_INT 3
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 91
23085: PUSH
23086: LD_VAR 0 1
23090: PUSH
23091: LD_EXP 90
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 50
23103: PUSH
23104: EMPTY
23105: LIST
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: PPUSH
23113: CALL_OW 69
23117: ST_TO_ADDR
// if not tmp then
23118: LD_VAR 0 2
23122: NOT
23123: IFFALSE 23127
// continue ;
23125: GO 22922
// HackLink ( i , tmp ) ;
23127: LD_VAR 0 1
23131: PPUSH
23132: LD_VAR 0 2
23136: PPUSH
23137: CALL 23284 0 2
// end ;
23141: GO 22922
23143: POP
23144: POP
// end ;
23145: PPOPN 2
23147: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23148: LD_INT 0
23150: PPUSH
23151: PPUSH
23152: PPUSH
// if not hack in hackTanks then
23153: LD_VAR 0 1
23157: PUSH
23158: LD_EXP 87
23162: IN
23163: NOT
23164: IFFALSE 23168
// exit ;
23166: GO 23279
// index := GetElementIndex ( hackTanks , hack ) ;
23168: LD_ADDR_VAR 0 4
23172: PUSH
23173: LD_EXP 87
23177: PPUSH
23178: LD_VAR 0 1
23182: PPUSH
23183: CALL 30943 0 2
23187: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23188: LD_EXP 88
23192: PUSH
23193: LD_VAR 0 4
23197: ARRAY
23198: IFFALSE 23279
// begin for i in hackTanksCaptured [ index ] do
23200: LD_ADDR_VAR 0 3
23204: PUSH
23205: LD_EXP 88
23209: PUSH
23210: LD_VAR 0 4
23214: ARRAY
23215: PUSH
23216: FOR_IN
23217: IFFALSE 23243
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23219: LD_VAR 0 3
23223: PUSH
23224: LD_INT 1
23226: ARRAY
23227: PPUSH
23228: LD_VAR 0 3
23232: PUSH
23233: LD_INT 2
23235: ARRAY
23236: PPUSH
23237: CALL_OW 235
23241: GO 23216
23243: POP
23244: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23245: LD_ADDR_EXP 88
23249: PUSH
23250: LD_EXP 88
23254: PPUSH
23255: LD_VAR 0 4
23259: PPUSH
23260: EMPTY
23261: PPUSH
23262: CALL_OW 1
23266: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23267: LD_VAR 0 1
23271: PPUSH
23272: LD_INT 0
23274: PPUSH
23275: CALL_OW 505
// end ; end ;
23279: LD_VAR 0 2
23283: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23284: LD_INT 0
23286: PPUSH
23287: PPUSH
23288: PPUSH
// if not hack in hackTanks or not vehicles then
23289: LD_VAR 0 1
23293: PUSH
23294: LD_EXP 87
23298: IN
23299: NOT
23300: PUSH
23301: LD_VAR 0 2
23305: NOT
23306: OR
23307: IFFALSE 23311
// exit ;
23309: GO 23586
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23311: LD_ADDR_VAR 0 2
23315: PUSH
23316: LD_VAR 0 1
23320: PPUSH
23321: LD_VAR 0 2
23325: PPUSH
23326: LD_INT 1
23328: PPUSH
23329: LD_INT 1
23331: PPUSH
23332: CALL 31593 0 4
23336: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23337: LD_ADDR_VAR 0 5
23341: PUSH
23342: LD_EXP 87
23346: PPUSH
23347: LD_VAR 0 1
23351: PPUSH
23352: CALL 30943 0 2
23356: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23357: LD_EXP 88
23361: PUSH
23362: LD_VAR 0 5
23366: ARRAY
23367: PUSH
23368: LD_EXP 89
23372: LESS
23373: IFFALSE 23562
// begin for i := 1 to vehicles do
23375: LD_ADDR_VAR 0 4
23379: PUSH
23380: DOUBLE
23381: LD_INT 1
23383: DEC
23384: ST_TO_ADDR
23385: LD_VAR 0 2
23389: PUSH
23390: FOR_TO
23391: IFFALSE 23560
// begin if hackTanksCaptured [ index ] = hackLimit then
23393: LD_EXP 88
23397: PUSH
23398: LD_VAR 0 5
23402: ARRAY
23403: PUSH
23404: LD_EXP 89
23408: EQUAL
23409: IFFALSE 23413
// break ;
23411: GO 23560
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23413: LD_ADDR_EXP 91
23417: PUSH
23418: LD_EXP 91
23422: PPUSH
23423: LD_VAR 0 5
23427: PPUSH
23428: LD_EXP 91
23432: PUSH
23433: LD_VAR 0 5
23437: ARRAY
23438: PUSH
23439: LD_INT 1
23441: PLUS
23442: PPUSH
23443: CALL_OW 1
23447: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23448: LD_ADDR_EXP 88
23452: PUSH
23453: LD_EXP 88
23457: PPUSH
23458: LD_VAR 0 5
23462: PUSH
23463: LD_EXP 88
23467: PUSH
23468: LD_VAR 0 5
23472: ARRAY
23473: PUSH
23474: LD_INT 1
23476: PLUS
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PPUSH
23482: LD_VAR 0 2
23486: PUSH
23487: LD_VAR 0 4
23491: ARRAY
23492: PUSH
23493: LD_VAR 0 2
23497: PUSH
23498: LD_VAR 0 4
23502: ARRAY
23503: PPUSH
23504: CALL_OW 255
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PPUSH
23513: CALL 31158 0 3
23517: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23518: LD_VAR 0 2
23522: PUSH
23523: LD_VAR 0 4
23527: ARRAY
23528: PPUSH
23529: LD_VAR 0 1
23533: PPUSH
23534: CALL_OW 255
23538: PPUSH
23539: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23543: LD_VAR 0 2
23547: PUSH
23548: LD_VAR 0 4
23552: ARRAY
23553: PPUSH
23554: CALL_OW 141
// end ;
23558: GO 23390
23560: POP
23561: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23562: LD_VAR 0 1
23566: PPUSH
23567: LD_EXP 88
23571: PUSH
23572: LD_VAR 0 5
23576: ARRAY
23577: PUSH
23578: LD_INT 0
23580: PLUS
23581: PPUSH
23582: CALL_OW 505
// end ;
23586: LD_VAR 0 3
23590: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23591: LD_INT 0
23593: PPUSH
23594: PPUSH
23595: PPUSH
23596: PPUSH
// if not hack in hackTanks then
23597: LD_VAR 0 1
23601: PUSH
23602: LD_EXP 87
23606: IN
23607: NOT
23608: IFFALSE 23612
// exit ;
23610: GO 23852
// index := GetElementIndex ( hackTanks , hack ) ;
23612: LD_ADDR_VAR 0 4
23616: PUSH
23617: LD_EXP 87
23621: PPUSH
23622: LD_VAR 0 1
23626: PPUSH
23627: CALL 30943 0 2
23631: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23632: LD_ADDR_VAR 0 3
23636: PUSH
23637: DOUBLE
23638: LD_EXP 88
23642: PUSH
23643: LD_VAR 0 4
23647: ARRAY
23648: INC
23649: ST_TO_ADDR
23650: LD_INT 1
23652: PUSH
23653: FOR_DOWNTO
23654: IFFALSE 23826
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23656: LD_ADDR_VAR 0 5
23660: PUSH
23661: LD_EXP 88
23665: PUSH
23666: LD_VAR 0 4
23670: ARRAY
23671: PUSH
23672: LD_VAR 0 3
23676: ARRAY
23677: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23678: LD_VAR 0 5
23682: PUSH
23683: LD_INT 1
23685: ARRAY
23686: PPUSH
23687: CALL_OW 302
23691: NOT
23692: PUSH
23693: LD_VAR 0 5
23697: PUSH
23698: LD_INT 1
23700: ARRAY
23701: PPUSH
23702: CALL_OW 255
23706: PUSH
23707: LD_VAR 0 1
23711: PPUSH
23712: CALL_OW 255
23716: NONEQUAL
23717: OR
23718: IFFALSE 23824
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23720: LD_VAR 0 5
23724: PUSH
23725: LD_INT 1
23727: ARRAY
23728: PPUSH
23729: CALL_OW 305
23733: PUSH
23734: LD_VAR 0 5
23738: PUSH
23739: LD_INT 1
23741: ARRAY
23742: PPUSH
23743: CALL_OW 255
23747: PUSH
23748: LD_VAR 0 1
23752: PPUSH
23753: CALL_OW 255
23757: EQUAL
23758: AND
23759: IFFALSE 23783
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23761: LD_VAR 0 5
23765: PUSH
23766: LD_INT 1
23768: ARRAY
23769: PPUSH
23770: LD_VAR 0 5
23774: PUSH
23775: LD_INT 2
23777: ARRAY
23778: PPUSH
23779: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23783: LD_ADDR_EXP 88
23787: PUSH
23788: LD_EXP 88
23792: PPUSH
23793: LD_VAR 0 4
23797: PPUSH
23798: LD_EXP 88
23802: PUSH
23803: LD_VAR 0 4
23807: ARRAY
23808: PPUSH
23809: LD_VAR 0 3
23813: PPUSH
23814: CALL_OW 3
23818: PPUSH
23819: CALL_OW 1
23823: ST_TO_ADDR
// end ; end ;
23824: GO 23653
23826: POP
23827: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23828: LD_VAR 0 1
23832: PPUSH
23833: LD_EXP 88
23837: PUSH
23838: LD_VAR 0 4
23842: ARRAY
23843: PUSH
23844: LD_INT 0
23846: PLUS
23847: PPUSH
23848: CALL_OW 505
// end ;
23852: LD_VAR 0 2
23856: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23857: LD_INT 0
23859: PPUSH
23860: PPUSH
23861: PPUSH
23862: PPUSH
// if not hack in hackTanks then
23863: LD_VAR 0 1
23867: PUSH
23868: LD_EXP 87
23872: IN
23873: NOT
23874: IFFALSE 23878
// exit ;
23876: GO 23963
// index := GetElementIndex ( hackTanks , hack ) ;
23878: LD_ADDR_VAR 0 5
23882: PUSH
23883: LD_EXP 87
23887: PPUSH
23888: LD_VAR 0 1
23892: PPUSH
23893: CALL 30943 0 2
23897: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23898: LD_ADDR_VAR 0 4
23902: PUSH
23903: DOUBLE
23904: LD_INT 1
23906: DEC
23907: ST_TO_ADDR
23908: LD_EXP 88
23912: PUSH
23913: LD_VAR 0 5
23917: ARRAY
23918: PUSH
23919: FOR_TO
23920: IFFALSE 23961
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23922: LD_EXP 88
23926: PUSH
23927: LD_VAR 0 5
23931: ARRAY
23932: PUSH
23933: LD_VAR 0 4
23937: ARRAY
23938: PUSH
23939: LD_INT 1
23941: ARRAY
23942: PUSH
23943: LD_VAR 0 2
23947: EQUAL
23948: IFFALSE 23959
// KillUnit ( vehicle ) ;
23950: LD_VAR 0 2
23954: PPUSH
23955: CALL_OW 66
23959: GO 23919
23961: POP
23962: POP
// end ;
23963: LD_VAR 0 3
23967: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23968: LD_EXP 92
23972: NOT
23973: IFFALSE 24008
23975: GO 23977
23977: DISABLE
// begin initMiner := true ;
23978: LD_ADDR_EXP 92
23982: PUSH
23983: LD_INT 1
23985: ST_TO_ADDR
// minersList := [ ] ;
23986: LD_ADDR_EXP 93
23990: PUSH
23991: EMPTY
23992: ST_TO_ADDR
// minerMinesList := [ ] ;
23993: LD_ADDR_EXP 94
23997: PUSH
23998: EMPTY
23999: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24000: LD_ADDR_EXP 95
24004: PUSH
24005: LD_INT 5
24007: ST_TO_ADDR
// end ;
24008: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24009: LD_EXP 92
24013: PUSH
24014: LD_INT 34
24016: PUSH
24017: LD_INT 81
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PPUSH
24024: CALL_OW 69
24028: AND
24029: IFFALSE 24490
24031: GO 24033
24033: DISABLE
24034: LD_INT 0
24036: PPUSH
24037: PPUSH
24038: PPUSH
24039: PPUSH
// begin enable ;
24040: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24041: LD_ADDR_VAR 0 1
24045: PUSH
24046: LD_INT 34
24048: PUSH
24049: LD_INT 81
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PPUSH
24056: CALL_OW 69
24060: PUSH
24061: FOR_IN
24062: IFFALSE 24134
// begin if not i in minersList then
24064: LD_VAR 0 1
24068: PUSH
24069: LD_EXP 93
24073: IN
24074: NOT
24075: IFFALSE 24132
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24077: LD_ADDR_EXP 93
24081: PUSH
24082: LD_EXP 93
24086: PPUSH
24087: LD_EXP 93
24091: PUSH
24092: LD_INT 1
24094: PLUS
24095: PPUSH
24096: LD_VAR 0 1
24100: PPUSH
24101: CALL_OW 1
24105: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24106: LD_ADDR_EXP 94
24110: PUSH
24111: LD_EXP 94
24115: PPUSH
24116: LD_EXP 94
24120: PUSH
24121: LD_INT 1
24123: PLUS
24124: PPUSH
24125: EMPTY
24126: PPUSH
24127: CALL_OW 1
24131: ST_TO_ADDR
// end end ;
24132: GO 24061
24134: POP
24135: POP
// for i := minerMinesList downto 1 do
24136: LD_ADDR_VAR 0 1
24140: PUSH
24141: DOUBLE
24142: LD_EXP 94
24146: INC
24147: ST_TO_ADDR
24148: LD_INT 1
24150: PUSH
24151: FOR_DOWNTO
24152: IFFALSE 24488
// begin if IsLive ( minersList [ i ] ) then
24154: LD_EXP 93
24158: PUSH
24159: LD_VAR 0 1
24163: ARRAY
24164: PPUSH
24165: CALL_OW 300
24169: IFFALSE 24197
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24171: LD_EXP 93
24175: PUSH
24176: LD_VAR 0 1
24180: ARRAY
24181: PPUSH
24182: LD_EXP 94
24186: PUSH
24187: LD_VAR 0 1
24191: ARRAY
24192: PPUSH
24193: CALL_OW 505
// if not minerMinesList [ i ] then
24197: LD_EXP 94
24201: PUSH
24202: LD_VAR 0 1
24206: ARRAY
24207: NOT
24208: IFFALSE 24212
// continue ;
24210: GO 24151
// for j := minerMinesList [ i ] downto 1 do
24212: LD_ADDR_VAR 0 2
24216: PUSH
24217: DOUBLE
24218: LD_EXP 94
24222: PUSH
24223: LD_VAR 0 1
24227: ARRAY
24228: INC
24229: ST_TO_ADDR
24230: LD_INT 1
24232: PUSH
24233: FOR_DOWNTO
24234: IFFALSE 24484
// begin side := GetSide ( minersList [ i ] ) ;
24236: LD_ADDR_VAR 0 3
24240: PUSH
24241: LD_EXP 93
24245: PUSH
24246: LD_VAR 0 1
24250: ARRAY
24251: PPUSH
24252: CALL_OW 255
24256: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24257: LD_ADDR_VAR 0 4
24261: PUSH
24262: LD_EXP 94
24266: PUSH
24267: LD_VAR 0 1
24271: ARRAY
24272: PUSH
24273: LD_VAR 0 2
24277: ARRAY
24278: PUSH
24279: LD_INT 1
24281: ARRAY
24282: PPUSH
24283: LD_EXP 94
24287: PUSH
24288: LD_VAR 0 1
24292: ARRAY
24293: PUSH
24294: LD_VAR 0 2
24298: ARRAY
24299: PUSH
24300: LD_INT 2
24302: ARRAY
24303: PPUSH
24304: CALL_OW 428
24308: ST_TO_ADDR
// if not tmp then
24309: LD_VAR 0 4
24313: NOT
24314: IFFALSE 24318
// continue ;
24316: GO 24233
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24318: LD_VAR 0 4
24322: PUSH
24323: LD_INT 81
24325: PUSH
24326: LD_VAR 0 3
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PPUSH
24335: CALL_OW 69
24339: IN
24340: PUSH
24341: LD_EXP 94
24345: PUSH
24346: LD_VAR 0 1
24350: ARRAY
24351: PUSH
24352: LD_VAR 0 2
24356: ARRAY
24357: PUSH
24358: LD_INT 1
24360: ARRAY
24361: PPUSH
24362: LD_EXP 94
24366: PUSH
24367: LD_VAR 0 1
24371: ARRAY
24372: PUSH
24373: LD_VAR 0 2
24377: ARRAY
24378: PUSH
24379: LD_INT 2
24381: ARRAY
24382: PPUSH
24383: CALL_OW 458
24387: AND
24388: IFFALSE 24482
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24390: LD_EXP 94
24394: PUSH
24395: LD_VAR 0 1
24399: ARRAY
24400: PUSH
24401: LD_VAR 0 2
24405: ARRAY
24406: PUSH
24407: LD_INT 1
24409: ARRAY
24410: PPUSH
24411: LD_EXP 94
24415: PUSH
24416: LD_VAR 0 1
24420: ARRAY
24421: PUSH
24422: LD_VAR 0 2
24426: ARRAY
24427: PUSH
24428: LD_INT 2
24430: ARRAY
24431: PPUSH
24432: LD_VAR 0 3
24436: PPUSH
24437: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24441: LD_ADDR_EXP 94
24445: PUSH
24446: LD_EXP 94
24450: PPUSH
24451: LD_VAR 0 1
24455: PPUSH
24456: LD_EXP 94
24460: PUSH
24461: LD_VAR 0 1
24465: ARRAY
24466: PPUSH
24467: LD_VAR 0 2
24471: PPUSH
24472: CALL_OW 3
24476: PPUSH
24477: CALL_OW 1
24481: ST_TO_ADDR
// end ; end ;
24482: GO 24233
24484: POP
24485: POP
// end ;
24486: GO 24151
24488: POP
24489: POP
// end ;
24490: PPOPN 4
24492: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24493: LD_INT 0
24495: PPUSH
24496: PPUSH
// result := false ;
24497: LD_ADDR_VAR 0 4
24501: PUSH
24502: LD_INT 0
24504: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24505: LD_VAR 0 1
24509: PPUSH
24510: CALL_OW 264
24514: PUSH
24515: LD_INT 81
24517: EQUAL
24518: NOT
24519: IFFALSE 24523
// exit ;
24521: GO 24763
// index := GetElementIndex ( minersList , unit ) ;
24523: LD_ADDR_VAR 0 5
24527: PUSH
24528: LD_EXP 93
24532: PPUSH
24533: LD_VAR 0 1
24537: PPUSH
24538: CALL 30943 0 2
24542: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24543: LD_EXP 94
24547: PUSH
24548: LD_VAR 0 5
24552: ARRAY
24553: PUSH
24554: LD_EXP 95
24558: GREATEREQUAL
24559: IFFALSE 24563
// exit ;
24561: GO 24763
// ComMoveXY ( unit , x , y ) ;
24563: LD_VAR 0 1
24567: PPUSH
24568: LD_VAR 0 2
24572: PPUSH
24573: LD_VAR 0 3
24577: PPUSH
24578: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24582: LD_INT 35
24584: PPUSH
24585: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24589: LD_VAR 0 1
24593: PPUSH
24594: LD_VAR 0 2
24598: PPUSH
24599: LD_VAR 0 3
24603: PPUSH
24604: CALL 62695 0 3
24608: NOT
24609: PUSH
24610: LD_VAR 0 1
24614: PPUSH
24615: CALL_OW 314
24619: AND
24620: IFFALSE 24624
// exit ;
24622: GO 24763
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24624: LD_VAR 0 2
24628: PPUSH
24629: LD_VAR 0 3
24633: PPUSH
24634: CALL_OW 428
24638: PUSH
24639: LD_VAR 0 1
24643: EQUAL
24644: PUSH
24645: LD_VAR 0 1
24649: PPUSH
24650: CALL_OW 314
24654: NOT
24655: AND
24656: IFFALSE 24582
// PlaySoundXY ( x , y , PlantMine ) ;
24658: LD_VAR 0 2
24662: PPUSH
24663: LD_VAR 0 3
24667: PPUSH
24668: LD_STRING PlantMine
24670: PPUSH
24671: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24675: LD_VAR 0 2
24679: PPUSH
24680: LD_VAR 0 3
24684: PPUSH
24685: LD_VAR 0 1
24689: PPUSH
24690: CALL_OW 255
24694: PPUSH
24695: LD_INT 0
24697: PPUSH
24698: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24702: LD_ADDR_EXP 94
24706: PUSH
24707: LD_EXP 94
24711: PPUSH
24712: LD_VAR 0 5
24716: PUSH
24717: LD_EXP 94
24721: PUSH
24722: LD_VAR 0 5
24726: ARRAY
24727: PUSH
24728: LD_INT 1
24730: PLUS
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PPUSH
24736: LD_VAR 0 2
24740: PUSH
24741: LD_VAR 0 3
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PPUSH
24750: CALL 31158 0 3
24754: ST_TO_ADDR
// result := true ;
24755: LD_ADDR_VAR 0 4
24759: PUSH
24760: LD_INT 1
24762: ST_TO_ADDR
// end ;
24763: LD_VAR 0 4
24767: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24768: LD_INT 0
24770: PPUSH
24771: PPUSH
24772: PPUSH
// if not unit in minersList then
24773: LD_VAR 0 1
24777: PUSH
24778: LD_EXP 93
24782: IN
24783: NOT
24784: IFFALSE 24788
// exit ;
24786: GO 25180
// index := GetElementIndex ( minersList , unit ) ;
24788: LD_ADDR_VAR 0 6
24792: PUSH
24793: LD_EXP 93
24797: PPUSH
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL 30943 0 2
24807: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24808: LD_ADDR_VAR 0 5
24812: PUSH
24813: DOUBLE
24814: LD_EXP 94
24818: PUSH
24819: LD_VAR 0 6
24823: ARRAY
24824: INC
24825: ST_TO_ADDR
24826: LD_INT 1
24828: PUSH
24829: FOR_DOWNTO
24830: IFFALSE 24991
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24832: LD_EXP 94
24836: PUSH
24837: LD_VAR 0 6
24841: ARRAY
24842: PUSH
24843: LD_VAR 0 5
24847: ARRAY
24848: PUSH
24849: LD_INT 1
24851: ARRAY
24852: PUSH
24853: LD_VAR 0 2
24857: EQUAL
24858: PUSH
24859: LD_EXP 94
24863: PUSH
24864: LD_VAR 0 6
24868: ARRAY
24869: PUSH
24870: LD_VAR 0 5
24874: ARRAY
24875: PUSH
24876: LD_INT 2
24878: ARRAY
24879: PUSH
24880: LD_VAR 0 3
24884: EQUAL
24885: AND
24886: IFFALSE 24989
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24888: LD_EXP 94
24892: PUSH
24893: LD_VAR 0 6
24897: ARRAY
24898: PUSH
24899: LD_VAR 0 5
24903: ARRAY
24904: PUSH
24905: LD_INT 1
24907: ARRAY
24908: PPUSH
24909: LD_EXP 94
24913: PUSH
24914: LD_VAR 0 6
24918: ARRAY
24919: PUSH
24920: LD_VAR 0 5
24924: ARRAY
24925: PUSH
24926: LD_INT 2
24928: ARRAY
24929: PPUSH
24930: LD_VAR 0 1
24934: PPUSH
24935: CALL_OW 255
24939: PPUSH
24940: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24944: LD_ADDR_EXP 94
24948: PUSH
24949: LD_EXP 94
24953: PPUSH
24954: LD_VAR 0 6
24958: PPUSH
24959: LD_EXP 94
24963: PUSH
24964: LD_VAR 0 6
24968: ARRAY
24969: PPUSH
24970: LD_VAR 0 5
24974: PPUSH
24975: CALL_OW 3
24979: PPUSH
24980: CALL_OW 1
24984: ST_TO_ADDR
// exit ;
24985: POP
24986: POP
24987: GO 25180
// end ; end ;
24989: GO 24829
24991: POP
24992: POP
// for i := minerMinesList [ index ] downto 1 do
24993: LD_ADDR_VAR 0 5
24997: PUSH
24998: DOUBLE
24999: LD_EXP 94
25003: PUSH
25004: LD_VAR 0 6
25008: ARRAY
25009: INC
25010: ST_TO_ADDR
25011: LD_INT 1
25013: PUSH
25014: FOR_DOWNTO
25015: IFFALSE 25178
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25017: LD_EXP 94
25021: PUSH
25022: LD_VAR 0 6
25026: ARRAY
25027: PUSH
25028: LD_VAR 0 5
25032: ARRAY
25033: PUSH
25034: LD_INT 1
25036: ARRAY
25037: PPUSH
25038: LD_EXP 94
25042: PUSH
25043: LD_VAR 0 6
25047: ARRAY
25048: PUSH
25049: LD_VAR 0 5
25053: ARRAY
25054: PUSH
25055: LD_INT 2
25057: ARRAY
25058: PPUSH
25059: LD_VAR 0 2
25063: PPUSH
25064: LD_VAR 0 3
25068: PPUSH
25069: CALL_OW 298
25073: PUSH
25074: LD_INT 6
25076: LESS
25077: IFFALSE 25176
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25079: LD_EXP 94
25083: PUSH
25084: LD_VAR 0 6
25088: ARRAY
25089: PUSH
25090: LD_VAR 0 5
25094: ARRAY
25095: PUSH
25096: LD_INT 1
25098: ARRAY
25099: PPUSH
25100: LD_EXP 94
25104: PUSH
25105: LD_VAR 0 6
25109: ARRAY
25110: PUSH
25111: LD_VAR 0 5
25115: ARRAY
25116: PUSH
25117: LD_INT 2
25119: ARRAY
25120: PPUSH
25121: LD_VAR 0 1
25125: PPUSH
25126: CALL_OW 255
25130: PPUSH
25131: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25135: LD_ADDR_EXP 94
25139: PUSH
25140: LD_EXP 94
25144: PPUSH
25145: LD_VAR 0 6
25149: PPUSH
25150: LD_EXP 94
25154: PUSH
25155: LD_VAR 0 6
25159: ARRAY
25160: PPUSH
25161: LD_VAR 0 5
25165: PPUSH
25166: CALL_OW 3
25170: PPUSH
25171: CALL_OW 1
25175: ST_TO_ADDR
// end ; end ;
25176: GO 25014
25178: POP
25179: POP
// end ;
25180: LD_VAR 0 4
25184: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25185: LD_INT 0
25187: PPUSH
25188: PPUSH
25189: PPUSH
25190: PPUSH
25191: PPUSH
25192: PPUSH
25193: PPUSH
25194: PPUSH
25195: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25196: LD_VAR 0 1
25200: PPUSH
25201: CALL_OW 264
25205: PUSH
25206: LD_INT 81
25208: EQUAL
25209: NOT
25210: PUSH
25211: LD_VAR 0 1
25215: PUSH
25216: LD_EXP 93
25220: IN
25221: NOT
25222: OR
25223: IFFALSE 25227
// exit ;
25225: GO 25549
// index := GetElementIndex ( minersList , unit ) ;
25227: LD_ADDR_VAR 0 6
25231: PUSH
25232: LD_EXP 93
25236: PPUSH
25237: LD_VAR 0 1
25241: PPUSH
25242: CALL 30943 0 2
25246: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25247: LD_ADDR_VAR 0 8
25251: PUSH
25252: LD_EXP 95
25256: PUSH
25257: LD_EXP 94
25261: PUSH
25262: LD_VAR 0 6
25266: ARRAY
25267: MINUS
25268: ST_TO_ADDR
// if not minesFreeAmount then
25269: LD_VAR 0 8
25273: NOT
25274: IFFALSE 25278
// exit ;
25276: GO 25549
// tmp := [ ] ;
25278: LD_ADDR_VAR 0 7
25282: PUSH
25283: EMPTY
25284: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25285: LD_ADDR_VAR 0 5
25289: PUSH
25290: DOUBLE
25291: LD_INT 1
25293: DEC
25294: ST_TO_ADDR
25295: LD_VAR 0 8
25299: PUSH
25300: FOR_TO
25301: IFFALSE 25496
// begin _d := rand ( 0 , 5 ) ;
25303: LD_ADDR_VAR 0 11
25307: PUSH
25308: LD_INT 0
25310: PPUSH
25311: LD_INT 5
25313: PPUSH
25314: CALL_OW 12
25318: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25319: LD_ADDR_VAR 0 12
25323: PUSH
25324: LD_INT 2
25326: PPUSH
25327: LD_INT 6
25329: PPUSH
25330: CALL_OW 12
25334: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25335: LD_ADDR_VAR 0 9
25339: PUSH
25340: LD_VAR 0 2
25344: PPUSH
25345: LD_VAR 0 11
25349: PPUSH
25350: LD_VAR 0 12
25354: PPUSH
25355: CALL_OW 272
25359: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25360: LD_ADDR_VAR 0 10
25364: PUSH
25365: LD_VAR 0 3
25369: PPUSH
25370: LD_VAR 0 11
25374: PPUSH
25375: LD_VAR 0 12
25379: PPUSH
25380: CALL_OW 273
25384: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25385: LD_VAR 0 9
25389: PPUSH
25390: LD_VAR 0 10
25394: PPUSH
25395: CALL_OW 488
25399: PUSH
25400: LD_VAR 0 9
25404: PUSH
25405: LD_VAR 0 10
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_VAR 0 7
25418: IN
25419: NOT
25420: AND
25421: PUSH
25422: LD_VAR 0 9
25426: PPUSH
25427: LD_VAR 0 10
25431: PPUSH
25432: CALL_OW 458
25436: NOT
25437: AND
25438: IFFALSE 25480
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25440: LD_ADDR_VAR 0 7
25444: PUSH
25445: LD_VAR 0 7
25449: PPUSH
25450: LD_VAR 0 7
25454: PUSH
25455: LD_INT 1
25457: PLUS
25458: PPUSH
25459: LD_VAR 0 9
25463: PUSH
25464: LD_VAR 0 10
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PPUSH
25473: CALL_OW 1
25477: ST_TO_ADDR
25478: GO 25494
// i := i - 1 ;
25480: LD_ADDR_VAR 0 5
25484: PUSH
25485: LD_VAR 0 5
25489: PUSH
25490: LD_INT 1
25492: MINUS
25493: ST_TO_ADDR
// end ;
25494: GO 25300
25496: POP
25497: POP
// for i in tmp do
25498: LD_ADDR_VAR 0 5
25502: PUSH
25503: LD_VAR 0 7
25507: PUSH
25508: FOR_IN
25509: IFFALSE 25547
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25511: LD_VAR 0 1
25515: PPUSH
25516: LD_VAR 0 5
25520: PUSH
25521: LD_INT 1
25523: ARRAY
25524: PPUSH
25525: LD_VAR 0 5
25529: PUSH
25530: LD_INT 2
25532: ARRAY
25533: PPUSH
25534: CALL 24493 0 3
25538: NOT
25539: IFFALSE 25545
// exit ;
25541: POP
25542: POP
25543: GO 25549
25545: GO 25508
25547: POP
25548: POP
// end ;
25549: LD_VAR 0 4
25553: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25554: LD_INT 0
25556: PPUSH
25557: PPUSH
25558: PPUSH
25559: PPUSH
25560: PPUSH
25561: PPUSH
25562: PPUSH
// if not GetClass ( unit ) = class_sniper then
25563: LD_VAR 0 1
25567: PPUSH
25568: CALL_OW 257
25572: PUSH
25573: LD_INT 5
25575: EQUAL
25576: NOT
25577: IFFALSE 25581
// exit ;
25579: GO 25969
// dist := 8 ;
25581: LD_ADDR_VAR 0 5
25585: PUSH
25586: LD_INT 8
25588: ST_TO_ADDR
// viewRange := 12 ;
25589: LD_ADDR_VAR 0 7
25593: PUSH
25594: LD_INT 12
25596: ST_TO_ADDR
// side := GetSide ( unit ) ;
25597: LD_ADDR_VAR 0 6
25601: PUSH
25602: LD_VAR 0 1
25606: PPUSH
25607: CALL_OW 255
25611: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25612: LD_INT 61
25614: PPUSH
25615: LD_VAR 0 6
25619: PPUSH
25620: CALL_OW 321
25624: PUSH
25625: LD_INT 2
25627: EQUAL
25628: IFFALSE 25638
// viewRange := 16 ;
25630: LD_ADDR_VAR 0 7
25634: PUSH
25635: LD_INT 16
25637: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25638: LD_VAR 0 1
25642: PPUSH
25643: LD_VAR 0 2
25647: PPUSH
25648: LD_VAR 0 3
25652: PPUSH
25653: CALL_OW 297
25657: PUSH
25658: LD_VAR 0 5
25662: GREATER
25663: IFFALSE 25742
// begin ComMoveXY ( unit , x , y ) ;
25665: LD_VAR 0 1
25669: PPUSH
25670: LD_VAR 0 2
25674: PPUSH
25675: LD_VAR 0 3
25679: PPUSH
25680: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25684: LD_INT 35
25686: PPUSH
25687: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25691: LD_VAR 0 1
25695: PPUSH
25696: LD_VAR 0 2
25700: PPUSH
25701: LD_VAR 0 3
25705: PPUSH
25706: CALL 62695 0 3
25710: NOT
25711: IFFALSE 25715
// exit ;
25713: GO 25969
// until GetDistUnitXY ( unit , x , y ) < dist ;
25715: LD_VAR 0 1
25719: PPUSH
25720: LD_VAR 0 2
25724: PPUSH
25725: LD_VAR 0 3
25729: PPUSH
25730: CALL_OW 297
25734: PUSH
25735: LD_VAR 0 5
25739: LESS
25740: IFFALSE 25684
// end ; ComTurnXY ( unit , x , y ) ;
25742: LD_VAR 0 1
25746: PPUSH
25747: LD_VAR 0 2
25751: PPUSH
25752: LD_VAR 0 3
25756: PPUSH
25757: CALL_OW 118
// wait ( 5 ) ;
25761: LD_INT 5
25763: PPUSH
25764: CALL_OW 67
// _d := GetDir ( unit ) ;
25768: LD_ADDR_VAR 0 10
25772: PUSH
25773: LD_VAR 0 1
25777: PPUSH
25778: CALL_OW 254
25782: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25783: LD_ADDR_VAR 0 8
25787: PUSH
25788: LD_VAR 0 1
25792: PPUSH
25793: CALL_OW 250
25797: PPUSH
25798: LD_VAR 0 10
25802: PPUSH
25803: LD_VAR 0 5
25807: PPUSH
25808: CALL_OW 272
25812: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25813: LD_ADDR_VAR 0 9
25817: PUSH
25818: LD_VAR 0 1
25822: PPUSH
25823: CALL_OW 251
25827: PPUSH
25828: LD_VAR 0 10
25832: PPUSH
25833: LD_VAR 0 5
25837: PPUSH
25838: CALL_OW 273
25842: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25843: LD_VAR 0 8
25847: PPUSH
25848: LD_VAR 0 9
25852: PPUSH
25853: CALL_OW 488
25857: NOT
25858: IFFALSE 25862
// exit ;
25860: GO 25969
// ComAnimCustom ( unit , 1 ) ;
25862: LD_VAR 0 1
25866: PPUSH
25867: LD_INT 1
25869: PPUSH
25870: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25874: LD_VAR 0 8
25878: PPUSH
25879: LD_VAR 0 9
25883: PPUSH
25884: LD_VAR 0 6
25888: PPUSH
25889: LD_VAR 0 7
25893: PPUSH
25894: CALL_OW 330
// repeat wait ( 1 ) ;
25898: LD_INT 1
25900: PPUSH
25901: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25905: LD_VAR 0 1
25909: PPUSH
25910: CALL_OW 316
25914: PUSH
25915: LD_VAR 0 1
25919: PPUSH
25920: CALL_OW 314
25924: OR
25925: PUSH
25926: LD_VAR 0 1
25930: PPUSH
25931: CALL_OW 302
25935: NOT
25936: OR
25937: PUSH
25938: LD_VAR 0 1
25942: PPUSH
25943: CALL_OW 301
25947: OR
25948: IFFALSE 25898
// RemoveSeeing ( _x , _y , side ) ;
25950: LD_VAR 0 8
25954: PPUSH
25955: LD_VAR 0 9
25959: PPUSH
25960: LD_VAR 0 6
25964: PPUSH
25965: CALL_OW 331
// end ; end_of_file
25969: LD_VAR 0 4
25973: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25974: LD_VAR 0 1
25978: PUSH
25979: LD_INT 200
25981: DOUBLE
25982: GREATEREQUAL
25983: IFFALSE 25991
25985: LD_INT 299
25987: DOUBLE
25988: LESSEQUAL
25989: IFTRUE 25993
25991: GO 26025
25993: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25994: LD_VAR 0 1
25998: PPUSH
25999: LD_VAR 0 2
26003: PPUSH
26004: LD_VAR 0 3
26008: PPUSH
26009: LD_VAR 0 4
26013: PPUSH
26014: LD_VAR 0 5
26018: PPUSH
26019: CALL 21622 0 5
26023: GO 26102
26025: LD_INT 300
26027: DOUBLE
26028: GREATEREQUAL
26029: IFFALSE 26037
26031: LD_INT 399
26033: DOUBLE
26034: LESSEQUAL
26035: IFTRUE 26039
26037: GO 26101
26039: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26040: LD_VAR 0 1
26044: PPUSH
26045: LD_VAR 0 2
26049: PPUSH
26050: LD_VAR 0 3
26054: PPUSH
26055: LD_VAR 0 4
26059: PPUSH
26060: LD_VAR 0 5
26064: PPUSH
26065: LD_VAR 0 6
26069: PPUSH
26070: LD_VAR 0 7
26074: PPUSH
26075: LD_VAR 0 8
26079: PPUSH
26080: LD_VAR 0 9
26084: PPUSH
26085: LD_VAR 0 10
26089: PPUSH
26090: LD_VAR 0 11
26094: PPUSH
26095: CALL 17947 0 11
26099: GO 26102
26101: POP
// end ;
26102: PPOPN 11
26104: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26105: LD_VAR 0 1
26109: PPUSH
26110: LD_VAR 0 2
26114: PPUSH
26115: LD_VAR 0 3
26119: PPUSH
26120: LD_VAR 0 4
26124: PPUSH
26125: LD_VAR 0 5
26129: PPUSH
26130: CALL 21358 0 5
// end ; end_of_file
26134: PPOPN 5
26136: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
26137: LD_VAR 0 1
26141: PPUSH
26142: LD_VAR 0 2
26146: PPUSH
26147: LD_VAR 0 3
26151: PPUSH
26152: LD_VAR 0 4
26156: PPUSH
26157: LD_VAR 0 5
26161: PPUSH
26162: LD_VAR 0 6
26166: PPUSH
26167: CALL 5599 0 6
// end ;
26171: PPOPN 6
26173: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
26174: LD_INT 0
26176: PPUSH
// begin if not units then
26177: LD_VAR 0 1
26181: NOT
26182: IFFALSE 26186
// exit ;
26184: GO 26186
// end ;
26186: PPOPN 7
26188: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
26189: CALL 5503 0 0
// end ; end_of_file end_of_file
26193: PPOPN 1
26195: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26196: LD_INT 0
26198: PPUSH
26199: PPUSH
// if exist_mode then
26200: LD_VAR 0 2
26204: IFFALSE 26229
// unit := CreateCharacter ( prefix & ident ) else
26206: LD_ADDR_VAR 0 5
26210: PUSH
26211: LD_VAR 0 3
26215: PUSH
26216: LD_VAR 0 1
26220: STR
26221: PPUSH
26222: CALL_OW 34
26226: ST_TO_ADDR
26227: GO 26244
// unit := NewCharacter ( ident ) ;
26229: LD_ADDR_VAR 0 5
26233: PUSH
26234: LD_VAR 0 1
26238: PPUSH
26239: CALL_OW 25
26243: ST_TO_ADDR
// result := unit ;
26244: LD_ADDR_VAR 0 4
26248: PUSH
26249: LD_VAR 0 5
26253: ST_TO_ADDR
// end ;
26254: LD_VAR 0 4
26258: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26259: LD_INT 0
26261: PPUSH
26262: PPUSH
// if not side or not nation then
26263: LD_VAR 0 1
26267: NOT
26268: PUSH
26269: LD_VAR 0 2
26273: NOT
26274: OR
26275: IFFALSE 26279
// exit ;
26277: GO 27047
// case nation of nation_american :
26279: LD_VAR 0 2
26283: PUSH
26284: LD_INT 1
26286: DOUBLE
26287: EQUAL
26288: IFTRUE 26292
26290: GO 26506
26292: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26293: LD_ADDR_VAR 0 4
26297: PUSH
26298: LD_INT 35
26300: PUSH
26301: LD_INT 45
26303: PUSH
26304: LD_INT 46
26306: PUSH
26307: LD_INT 47
26309: PUSH
26310: LD_INT 82
26312: PUSH
26313: LD_INT 83
26315: PUSH
26316: LD_INT 84
26318: PUSH
26319: LD_INT 85
26321: PUSH
26322: LD_INT 86
26324: PUSH
26325: LD_INT 1
26327: PUSH
26328: LD_INT 2
26330: PUSH
26331: LD_INT 6
26333: PUSH
26334: LD_INT 15
26336: PUSH
26337: LD_INT 16
26339: PUSH
26340: LD_INT 7
26342: PUSH
26343: LD_INT 12
26345: PUSH
26346: LD_INT 13
26348: PUSH
26349: LD_INT 10
26351: PUSH
26352: LD_INT 14
26354: PUSH
26355: LD_INT 20
26357: PUSH
26358: LD_INT 21
26360: PUSH
26361: LD_INT 22
26363: PUSH
26364: LD_INT 25
26366: PUSH
26367: LD_INT 32
26369: PUSH
26370: LD_INT 27
26372: PUSH
26373: LD_INT 36
26375: PUSH
26376: LD_INT 69
26378: PUSH
26379: LD_INT 39
26381: PUSH
26382: LD_INT 34
26384: PUSH
26385: LD_INT 40
26387: PUSH
26388: LD_INT 48
26390: PUSH
26391: LD_INT 49
26393: PUSH
26394: LD_INT 50
26396: PUSH
26397: LD_INT 51
26399: PUSH
26400: LD_INT 52
26402: PUSH
26403: LD_INT 53
26405: PUSH
26406: LD_INT 54
26408: PUSH
26409: LD_INT 55
26411: PUSH
26412: LD_INT 56
26414: PUSH
26415: LD_INT 57
26417: PUSH
26418: LD_INT 58
26420: PUSH
26421: LD_INT 59
26423: PUSH
26424: LD_INT 60
26426: PUSH
26427: LD_INT 61
26429: PUSH
26430: LD_INT 62
26432: PUSH
26433: LD_INT 80
26435: PUSH
26436: LD_INT 82
26438: PUSH
26439: LD_INT 83
26441: PUSH
26442: LD_INT 84
26444: PUSH
26445: LD_INT 85
26447: PUSH
26448: LD_INT 86
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: ST_TO_ADDR
26504: GO 26971
26506: LD_INT 2
26508: DOUBLE
26509: EQUAL
26510: IFTRUE 26514
26512: GO 26740
26514: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26515: LD_ADDR_VAR 0 4
26519: PUSH
26520: LD_INT 35
26522: PUSH
26523: LD_INT 45
26525: PUSH
26526: LD_INT 46
26528: PUSH
26529: LD_INT 47
26531: PUSH
26532: LD_INT 82
26534: PUSH
26535: LD_INT 83
26537: PUSH
26538: LD_INT 84
26540: PUSH
26541: LD_INT 85
26543: PUSH
26544: LD_INT 87
26546: PUSH
26547: LD_INT 70
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: LD_INT 11
26555: PUSH
26556: LD_INT 3
26558: PUSH
26559: LD_INT 4
26561: PUSH
26562: LD_INT 5
26564: PUSH
26565: LD_INT 6
26567: PUSH
26568: LD_INT 15
26570: PUSH
26571: LD_INT 18
26573: PUSH
26574: LD_INT 7
26576: PUSH
26577: LD_INT 17
26579: PUSH
26580: LD_INT 8
26582: PUSH
26583: LD_INT 20
26585: PUSH
26586: LD_INT 21
26588: PUSH
26589: LD_INT 22
26591: PUSH
26592: LD_INT 72
26594: PUSH
26595: LD_INT 26
26597: PUSH
26598: LD_INT 69
26600: PUSH
26601: LD_INT 39
26603: PUSH
26604: LD_INT 40
26606: PUSH
26607: LD_INT 41
26609: PUSH
26610: LD_INT 42
26612: PUSH
26613: LD_INT 43
26615: PUSH
26616: LD_INT 48
26618: PUSH
26619: LD_INT 49
26621: PUSH
26622: LD_INT 50
26624: PUSH
26625: LD_INT 51
26627: PUSH
26628: LD_INT 52
26630: PUSH
26631: LD_INT 53
26633: PUSH
26634: LD_INT 54
26636: PUSH
26637: LD_INT 55
26639: PUSH
26640: LD_INT 56
26642: PUSH
26643: LD_INT 60
26645: PUSH
26646: LD_INT 61
26648: PUSH
26649: LD_INT 62
26651: PUSH
26652: LD_INT 66
26654: PUSH
26655: LD_INT 67
26657: PUSH
26658: LD_INT 68
26660: PUSH
26661: LD_INT 81
26663: PUSH
26664: LD_INT 82
26666: PUSH
26667: LD_INT 83
26669: PUSH
26670: LD_INT 84
26672: PUSH
26673: LD_INT 85
26675: PUSH
26676: LD_INT 87
26678: PUSH
26679: LD_INT 88
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: ST_TO_ADDR
26738: GO 26971
26740: LD_INT 3
26742: DOUBLE
26743: EQUAL
26744: IFTRUE 26748
26746: GO 26970
26748: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26749: LD_ADDR_VAR 0 4
26753: PUSH
26754: LD_INT 46
26756: PUSH
26757: LD_INT 47
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: LD_INT 82
26768: PUSH
26769: LD_INT 83
26771: PUSH
26772: LD_INT 84
26774: PUSH
26775: LD_INT 85
26777: PUSH
26778: LD_INT 86
26780: PUSH
26781: LD_INT 11
26783: PUSH
26784: LD_INT 9
26786: PUSH
26787: LD_INT 20
26789: PUSH
26790: LD_INT 19
26792: PUSH
26793: LD_INT 21
26795: PUSH
26796: LD_INT 24
26798: PUSH
26799: LD_INT 22
26801: PUSH
26802: LD_INT 25
26804: PUSH
26805: LD_INT 28
26807: PUSH
26808: LD_INT 29
26810: PUSH
26811: LD_INT 30
26813: PUSH
26814: LD_INT 31
26816: PUSH
26817: LD_INT 37
26819: PUSH
26820: LD_INT 38
26822: PUSH
26823: LD_INT 32
26825: PUSH
26826: LD_INT 27
26828: PUSH
26829: LD_INT 33
26831: PUSH
26832: LD_INT 69
26834: PUSH
26835: LD_INT 39
26837: PUSH
26838: LD_INT 34
26840: PUSH
26841: LD_INT 40
26843: PUSH
26844: LD_INT 71
26846: PUSH
26847: LD_INT 23
26849: PUSH
26850: LD_INT 44
26852: PUSH
26853: LD_INT 48
26855: PUSH
26856: LD_INT 49
26858: PUSH
26859: LD_INT 50
26861: PUSH
26862: LD_INT 51
26864: PUSH
26865: LD_INT 52
26867: PUSH
26868: LD_INT 53
26870: PUSH
26871: LD_INT 54
26873: PUSH
26874: LD_INT 55
26876: PUSH
26877: LD_INT 56
26879: PUSH
26880: LD_INT 57
26882: PUSH
26883: LD_INT 58
26885: PUSH
26886: LD_INT 59
26888: PUSH
26889: LD_INT 63
26891: PUSH
26892: LD_INT 64
26894: PUSH
26895: LD_INT 65
26897: PUSH
26898: LD_INT 82
26900: PUSH
26901: LD_INT 83
26903: PUSH
26904: LD_INT 84
26906: PUSH
26907: LD_INT 85
26909: PUSH
26910: LD_INT 86
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: ST_TO_ADDR
26968: GO 26971
26970: POP
// if state > - 1 and state < 3 then
26971: LD_VAR 0 3
26975: PUSH
26976: LD_INT 1
26978: NEG
26979: GREATER
26980: PUSH
26981: LD_VAR 0 3
26985: PUSH
26986: LD_INT 3
26988: LESS
26989: AND
26990: IFFALSE 27047
// for i in result do
26992: LD_ADDR_VAR 0 5
26996: PUSH
26997: LD_VAR 0 4
27001: PUSH
27002: FOR_IN
27003: IFFALSE 27045
// if GetTech ( i , side ) <> state then
27005: LD_VAR 0 5
27009: PPUSH
27010: LD_VAR 0 1
27014: PPUSH
27015: CALL_OW 321
27019: PUSH
27020: LD_VAR 0 3
27024: NONEQUAL
27025: IFFALSE 27043
// result := result diff i ;
27027: LD_ADDR_VAR 0 4
27031: PUSH
27032: LD_VAR 0 4
27036: PUSH
27037: LD_VAR 0 5
27041: DIFF
27042: ST_TO_ADDR
27043: GO 27002
27045: POP
27046: POP
// end ;
27047: LD_VAR 0 4
27051: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27052: LD_INT 0
27054: PPUSH
27055: PPUSH
27056: PPUSH
// result := true ;
27057: LD_ADDR_VAR 0 3
27061: PUSH
27062: LD_INT 1
27064: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27065: LD_ADDR_VAR 0 5
27069: PUSH
27070: LD_VAR 0 2
27074: PPUSH
27075: CALL_OW 480
27079: ST_TO_ADDR
// if not tmp then
27080: LD_VAR 0 5
27084: NOT
27085: IFFALSE 27089
// exit ;
27087: GO 27138
// for i in tmp do
27089: LD_ADDR_VAR 0 4
27093: PUSH
27094: LD_VAR 0 5
27098: PUSH
27099: FOR_IN
27100: IFFALSE 27136
// if GetTech ( i , side ) <> state_researched then
27102: LD_VAR 0 4
27106: PPUSH
27107: LD_VAR 0 1
27111: PPUSH
27112: CALL_OW 321
27116: PUSH
27117: LD_INT 2
27119: NONEQUAL
27120: IFFALSE 27134
// begin result := false ;
27122: LD_ADDR_VAR 0 3
27126: PUSH
27127: LD_INT 0
27129: ST_TO_ADDR
// exit ;
27130: POP
27131: POP
27132: GO 27138
// end ;
27134: GO 27099
27136: POP
27137: POP
// end ;
27138: LD_VAR 0 3
27142: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27143: LD_INT 0
27145: PPUSH
27146: PPUSH
27147: PPUSH
27148: PPUSH
27149: PPUSH
27150: PPUSH
27151: PPUSH
27152: PPUSH
27153: PPUSH
27154: PPUSH
27155: PPUSH
27156: PPUSH
27157: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27158: LD_VAR 0 1
27162: NOT
27163: PUSH
27164: LD_VAR 0 1
27168: PPUSH
27169: CALL_OW 257
27173: PUSH
27174: LD_INT 9
27176: NONEQUAL
27177: OR
27178: IFFALSE 27182
// exit ;
27180: GO 27755
// side := GetSide ( unit ) ;
27182: LD_ADDR_VAR 0 9
27186: PUSH
27187: LD_VAR 0 1
27191: PPUSH
27192: CALL_OW 255
27196: ST_TO_ADDR
// tech_space := tech_spacanom ;
27197: LD_ADDR_VAR 0 12
27201: PUSH
27202: LD_INT 29
27204: ST_TO_ADDR
// tech_time := tech_taurad ;
27205: LD_ADDR_VAR 0 13
27209: PUSH
27210: LD_INT 28
27212: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27213: LD_ADDR_VAR 0 11
27217: PUSH
27218: LD_VAR 0 1
27222: PPUSH
27223: CALL_OW 310
27227: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27228: LD_VAR 0 11
27232: PPUSH
27233: CALL_OW 247
27237: PUSH
27238: LD_INT 2
27240: EQUAL
27241: IFFALSE 27245
// exit ;
27243: GO 27755
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27245: LD_ADDR_VAR 0 8
27249: PUSH
27250: LD_INT 81
27252: PUSH
27253: LD_VAR 0 9
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 3
27264: PUSH
27265: LD_INT 21
27267: PUSH
27268: LD_INT 3
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PPUSH
27283: CALL_OW 69
27287: ST_TO_ADDR
// if not tmp then
27288: LD_VAR 0 8
27292: NOT
27293: IFFALSE 27297
// exit ;
27295: GO 27755
// if in_unit then
27297: LD_VAR 0 11
27301: IFFALSE 27325
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27303: LD_ADDR_VAR 0 10
27307: PUSH
27308: LD_VAR 0 8
27312: PPUSH
27313: LD_VAR 0 11
27317: PPUSH
27318: CALL_OW 74
27322: ST_TO_ADDR
27323: GO 27345
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27325: LD_ADDR_VAR 0 10
27329: PUSH
27330: LD_VAR 0 8
27334: PPUSH
27335: LD_VAR 0 1
27339: PPUSH
27340: CALL_OW 74
27344: ST_TO_ADDR
// if not enemy then
27345: LD_VAR 0 10
27349: NOT
27350: IFFALSE 27354
// exit ;
27352: GO 27755
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27354: LD_VAR 0 11
27358: PUSH
27359: LD_VAR 0 11
27363: PPUSH
27364: LD_VAR 0 10
27368: PPUSH
27369: CALL_OW 296
27373: PUSH
27374: LD_INT 13
27376: GREATER
27377: AND
27378: PUSH
27379: LD_VAR 0 1
27383: PPUSH
27384: LD_VAR 0 10
27388: PPUSH
27389: CALL_OW 296
27393: PUSH
27394: LD_INT 12
27396: GREATER
27397: OR
27398: IFFALSE 27402
// exit ;
27400: GO 27755
// missile := [ 1 ] ;
27402: LD_ADDR_VAR 0 14
27406: PUSH
27407: LD_INT 1
27409: PUSH
27410: EMPTY
27411: LIST
27412: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27413: LD_VAR 0 9
27417: PPUSH
27418: LD_VAR 0 12
27422: PPUSH
27423: CALL_OW 325
27427: IFFALSE 27456
// missile := Replace ( missile , missile + 1 , 2 ) ;
27429: LD_ADDR_VAR 0 14
27433: PUSH
27434: LD_VAR 0 14
27438: PPUSH
27439: LD_VAR 0 14
27443: PUSH
27444: LD_INT 1
27446: PLUS
27447: PPUSH
27448: LD_INT 2
27450: PPUSH
27451: CALL_OW 1
27455: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27456: LD_VAR 0 9
27460: PPUSH
27461: LD_VAR 0 13
27465: PPUSH
27466: CALL_OW 325
27470: PUSH
27471: LD_VAR 0 10
27475: PPUSH
27476: CALL_OW 255
27480: PPUSH
27481: LD_VAR 0 13
27485: PPUSH
27486: CALL_OW 325
27490: NOT
27491: AND
27492: IFFALSE 27521
// missile := Replace ( missile , missile + 1 , 3 ) ;
27494: LD_ADDR_VAR 0 14
27498: PUSH
27499: LD_VAR 0 14
27503: PPUSH
27504: LD_VAR 0 14
27508: PUSH
27509: LD_INT 1
27511: PLUS
27512: PPUSH
27513: LD_INT 3
27515: PPUSH
27516: CALL_OW 1
27520: ST_TO_ADDR
// if missile < 2 then
27521: LD_VAR 0 14
27525: PUSH
27526: LD_INT 2
27528: LESS
27529: IFFALSE 27533
// exit ;
27531: GO 27755
// x := GetX ( enemy ) ;
27533: LD_ADDR_VAR 0 4
27537: PUSH
27538: LD_VAR 0 10
27542: PPUSH
27543: CALL_OW 250
27547: ST_TO_ADDR
// y := GetY ( enemy ) ;
27548: LD_ADDR_VAR 0 5
27552: PUSH
27553: LD_VAR 0 10
27557: PPUSH
27558: CALL_OW 251
27562: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27563: LD_ADDR_VAR 0 6
27567: PUSH
27568: LD_VAR 0 4
27572: PUSH
27573: LD_INT 1
27575: NEG
27576: PPUSH
27577: LD_INT 1
27579: PPUSH
27580: CALL_OW 12
27584: PLUS
27585: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27586: LD_ADDR_VAR 0 7
27590: PUSH
27591: LD_VAR 0 5
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PPUSH
27600: LD_INT 1
27602: PPUSH
27603: CALL_OW 12
27607: PLUS
27608: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27609: LD_VAR 0 6
27613: PPUSH
27614: LD_VAR 0 7
27618: PPUSH
27619: CALL_OW 488
27623: NOT
27624: IFFALSE 27646
// begin _x := x ;
27626: LD_ADDR_VAR 0 6
27630: PUSH
27631: LD_VAR 0 4
27635: ST_TO_ADDR
// _y := y ;
27636: LD_ADDR_VAR 0 7
27640: PUSH
27641: LD_VAR 0 5
27645: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27646: LD_ADDR_VAR 0 3
27650: PUSH
27651: LD_INT 1
27653: PPUSH
27654: LD_VAR 0 14
27658: PPUSH
27659: CALL_OW 12
27663: ST_TO_ADDR
// case i of 1 :
27664: LD_VAR 0 3
27668: PUSH
27669: LD_INT 1
27671: DOUBLE
27672: EQUAL
27673: IFTRUE 27677
27675: GO 27694
27677: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27678: LD_VAR 0 1
27682: PPUSH
27683: LD_VAR 0 10
27687: PPUSH
27688: CALL_OW 115
27692: GO 27755
27694: LD_INT 2
27696: DOUBLE
27697: EQUAL
27698: IFTRUE 27702
27700: GO 27724
27702: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27703: LD_VAR 0 1
27707: PPUSH
27708: LD_VAR 0 6
27712: PPUSH
27713: LD_VAR 0 7
27717: PPUSH
27718: CALL_OW 153
27722: GO 27755
27724: LD_INT 3
27726: DOUBLE
27727: EQUAL
27728: IFTRUE 27732
27730: GO 27754
27732: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27733: LD_VAR 0 1
27737: PPUSH
27738: LD_VAR 0 6
27742: PPUSH
27743: LD_VAR 0 7
27747: PPUSH
27748: CALL_OW 154
27752: GO 27755
27754: POP
// end ;
27755: LD_VAR 0 2
27759: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27760: LD_INT 0
27762: PPUSH
27763: PPUSH
27764: PPUSH
27765: PPUSH
27766: PPUSH
27767: PPUSH
// if not unit or not building then
27768: LD_VAR 0 1
27772: NOT
27773: PUSH
27774: LD_VAR 0 2
27778: NOT
27779: OR
27780: IFFALSE 27784
// exit ;
27782: GO 27942
// x := GetX ( building ) ;
27784: LD_ADDR_VAR 0 5
27788: PUSH
27789: LD_VAR 0 2
27793: PPUSH
27794: CALL_OW 250
27798: ST_TO_ADDR
// y := GetY ( building ) ;
27799: LD_ADDR_VAR 0 6
27803: PUSH
27804: LD_VAR 0 2
27808: PPUSH
27809: CALL_OW 251
27813: ST_TO_ADDR
// for i = 0 to 5 do
27814: LD_ADDR_VAR 0 4
27818: PUSH
27819: DOUBLE
27820: LD_INT 0
27822: DEC
27823: ST_TO_ADDR
27824: LD_INT 5
27826: PUSH
27827: FOR_TO
27828: IFFALSE 27940
// begin _x := ShiftX ( x , i , 3 ) ;
27830: LD_ADDR_VAR 0 7
27834: PUSH
27835: LD_VAR 0 5
27839: PPUSH
27840: LD_VAR 0 4
27844: PPUSH
27845: LD_INT 3
27847: PPUSH
27848: CALL_OW 272
27852: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27853: LD_ADDR_VAR 0 8
27857: PUSH
27858: LD_VAR 0 6
27862: PPUSH
27863: LD_VAR 0 4
27867: PPUSH
27868: LD_INT 3
27870: PPUSH
27871: CALL_OW 273
27875: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27876: LD_VAR 0 7
27880: PPUSH
27881: LD_VAR 0 8
27885: PPUSH
27886: CALL_OW 488
27890: NOT
27891: IFFALSE 27895
// continue ;
27893: GO 27827
// if HexInfo ( _x , _y ) = 0 then
27895: LD_VAR 0 7
27899: PPUSH
27900: LD_VAR 0 8
27904: PPUSH
27905: CALL_OW 428
27909: PUSH
27910: LD_INT 0
27912: EQUAL
27913: IFFALSE 27938
// begin ComMoveXY ( unit , _x , _y ) ;
27915: LD_VAR 0 1
27919: PPUSH
27920: LD_VAR 0 7
27924: PPUSH
27925: LD_VAR 0 8
27929: PPUSH
27930: CALL_OW 111
// exit ;
27934: POP
27935: POP
27936: GO 27942
// end ; end ;
27938: GO 27827
27940: POP
27941: POP
// end ;
27942: LD_VAR 0 3
27946: RET
// export function ScanBase ( side , base_area ) ; begin
27947: LD_INT 0
27949: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27950: LD_ADDR_VAR 0 3
27954: PUSH
27955: LD_VAR 0 2
27959: PPUSH
27960: LD_INT 81
27962: PUSH
27963: LD_VAR 0 1
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PPUSH
27972: CALL_OW 70
27976: ST_TO_ADDR
// end ;
27977: LD_VAR 0 3
27981: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27982: LD_INT 0
27984: PPUSH
27985: PPUSH
27986: PPUSH
27987: PPUSH
// result := false ;
27988: LD_ADDR_VAR 0 2
27992: PUSH
27993: LD_INT 0
27995: ST_TO_ADDR
// side := GetSide ( unit ) ;
27996: LD_ADDR_VAR 0 3
28000: PUSH
28001: LD_VAR 0 1
28005: PPUSH
28006: CALL_OW 255
28010: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28011: LD_ADDR_VAR 0 4
28015: PUSH
28016: LD_VAR 0 1
28020: PPUSH
28021: CALL_OW 248
28025: ST_TO_ADDR
// case nat of 1 :
28026: LD_VAR 0 4
28030: PUSH
28031: LD_INT 1
28033: DOUBLE
28034: EQUAL
28035: IFTRUE 28039
28037: GO 28050
28039: POP
// tech := tech_lassight ; 2 :
28040: LD_ADDR_VAR 0 5
28044: PUSH
28045: LD_INT 12
28047: ST_TO_ADDR
28048: GO 28089
28050: LD_INT 2
28052: DOUBLE
28053: EQUAL
28054: IFTRUE 28058
28056: GO 28069
28058: POP
// tech := tech_mortar ; 3 :
28059: LD_ADDR_VAR 0 5
28063: PUSH
28064: LD_INT 41
28066: ST_TO_ADDR
28067: GO 28089
28069: LD_INT 3
28071: DOUBLE
28072: EQUAL
28073: IFTRUE 28077
28075: GO 28088
28077: POP
// tech := tech_bazooka ; end ;
28078: LD_ADDR_VAR 0 5
28082: PUSH
28083: LD_INT 44
28085: ST_TO_ADDR
28086: GO 28089
28088: POP
// if Researched ( side , tech ) then
28089: LD_VAR 0 3
28093: PPUSH
28094: LD_VAR 0 5
28098: PPUSH
28099: CALL_OW 325
28103: IFFALSE 28130
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28105: LD_ADDR_VAR 0 2
28109: PUSH
28110: LD_INT 5
28112: PUSH
28113: LD_INT 8
28115: PUSH
28116: LD_INT 9
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: LIST
28123: PUSH
28124: LD_VAR 0 4
28128: ARRAY
28129: ST_TO_ADDR
// end ;
28130: LD_VAR 0 2
28134: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28135: LD_INT 0
28137: PPUSH
28138: PPUSH
28139: PPUSH
// if not mines then
28140: LD_VAR 0 2
28144: NOT
28145: IFFALSE 28149
// exit ;
28147: GO 28293
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28149: LD_ADDR_VAR 0 5
28153: PUSH
28154: LD_INT 81
28156: PUSH
28157: LD_VAR 0 1
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 3
28168: PUSH
28169: LD_INT 21
28171: PUSH
28172: LD_INT 3
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PPUSH
28187: CALL_OW 69
28191: ST_TO_ADDR
// for i in mines do
28192: LD_ADDR_VAR 0 4
28196: PUSH
28197: LD_VAR 0 2
28201: PUSH
28202: FOR_IN
28203: IFFALSE 28291
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28205: LD_VAR 0 4
28209: PUSH
28210: LD_INT 1
28212: ARRAY
28213: PPUSH
28214: LD_VAR 0 4
28218: PUSH
28219: LD_INT 2
28221: ARRAY
28222: PPUSH
28223: CALL_OW 458
28227: NOT
28228: IFFALSE 28232
// continue ;
28230: GO 28202
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28232: LD_VAR 0 4
28236: PUSH
28237: LD_INT 1
28239: ARRAY
28240: PPUSH
28241: LD_VAR 0 4
28245: PUSH
28246: LD_INT 2
28248: ARRAY
28249: PPUSH
28250: CALL_OW 428
28254: PUSH
28255: LD_VAR 0 5
28259: IN
28260: IFFALSE 28289
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28262: LD_VAR 0 4
28266: PUSH
28267: LD_INT 1
28269: ARRAY
28270: PPUSH
28271: LD_VAR 0 4
28275: PUSH
28276: LD_INT 2
28278: ARRAY
28279: PPUSH
28280: LD_VAR 0 1
28284: PPUSH
28285: CALL_OW 456
// end ;
28289: GO 28202
28291: POP
28292: POP
// end ;
28293: LD_VAR 0 3
28297: RET
// export function Count ( array ) ; begin
28298: LD_INT 0
28300: PPUSH
// result := array + 0 ;
28301: LD_ADDR_VAR 0 2
28305: PUSH
28306: LD_VAR 0 1
28310: PUSH
28311: LD_INT 0
28313: PLUS
28314: ST_TO_ADDR
// end ;
28315: LD_VAR 0 2
28319: RET
// export function IsEmpty ( building ) ; begin
28320: LD_INT 0
28322: PPUSH
// if not building then
28323: LD_VAR 0 1
28327: NOT
28328: IFFALSE 28332
// exit ;
28330: GO 28375
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28332: LD_ADDR_VAR 0 2
28336: PUSH
28337: LD_VAR 0 1
28341: PUSH
28342: LD_INT 22
28344: PUSH
28345: LD_VAR 0 1
28349: PPUSH
28350: CALL_OW 255
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 58
28361: PUSH
28362: EMPTY
28363: LIST
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PPUSH
28369: CALL_OW 69
28373: IN
28374: ST_TO_ADDR
// end ;
28375: LD_VAR 0 2
28379: RET
// export function IsNotFull ( building ) ; var places ; begin
28380: LD_INT 0
28382: PPUSH
28383: PPUSH
// if not building then
28384: LD_VAR 0 1
28388: NOT
28389: IFFALSE 28393
// exit ;
28391: GO 28421
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28393: LD_ADDR_VAR 0 2
28397: PUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: LD_INT 3
28405: PUSH
28406: LD_INT 62
28408: PUSH
28409: EMPTY
28410: LIST
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PPUSH
28416: CALL_OW 72
28420: ST_TO_ADDR
// end ;
28421: LD_VAR 0 2
28425: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28426: LD_INT 0
28428: PPUSH
28429: PPUSH
28430: PPUSH
28431: PPUSH
// tmp := [ ] ;
28432: LD_ADDR_VAR 0 3
28436: PUSH
28437: EMPTY
28438: ST_TO_ADDR
// list := [ ] ;
28439: LD_ADDR_VAR 0 5
28443: PUSH
28444: EMPTY
28445: ST_TO_ADDR
// for i = 16 to 25 do
28446: LD_ADDR_VAR 0 4
28450: PUSH
28451: DOUBLE
28452: LD_INT 16
28454: DEC
28455: ST_TO_ADDR
28456: LD_INT 25
28458: PUSH
28459: FOR_TO
28460: IFFALSE 28533
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28462: LD_ADDR_VAR 0 3
28466: PUSH
28467: LD_VAR 0 3
28471: PUSH
28472: LD_INT 22
28474: PUSH
28475: LD_VAR 0 1
28479: PPUSH
28480: CALL_OW 255
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 91
28491: PUSH
28492: LD_VAR 0 1
28496: PUSH
28497: LD_INT 6
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 30
28507: PUSH
28508: LD_VAR 0 4
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: LIST
28521: PUSH
28522: EMPTY
28523: LIST
28524: PPUSH
28525: CALL_OW 69
28529: ADD
28530: ST_TO_ADDR
28531: GO 28459
28533: POP
28534: POP
// for i = 1 to tmp do
28535: LD_ADDR_VAR 0 4
28539: PUSH
28540: DOUBLE
28541: LD_INT 1
28543: DEC
28544: ST_TO_ADDR
28545: LD_VAR 0 3
28549: PUSH
28550: FOR_TO
28551: IFFALSE 28639
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28553: LD_ADDR_VAR 0 5
28557: PUSH
28558: LD_VAR 0 5
28562: PUSH
28563: LD_VAR 0 3
28567: PUSH
28568: LD_VAR 0 4
28572: ARRAY
28573: PPUSH
28574: CALL_OW 266
28578: PUSH
28579: LD_VAR 0 3
28583: PUSH
28584: LD_VAR 0 4
28588: ARRAY
28589: PPUSH
28590: CALL_OW 250
28594: PUSH
28595: LD_VAR 0 3
28599: PUSH
28600: LD_VAR 0 4
28604: ARRAY
28605: PPUSH
28606: CALL_OW 251
28610: PUSH
28611: LD_VAR 0 3
28615: PUSH
28616: LD_VAR 0 4
28620: ARRAY
28621: PPUSH
28622: CALL_OW 254
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: PUSH
28633: EMPTY
28634: LIST
28635: ADD
28636: ST_TO_ADDR
28637: GO 28550
28639: POP
28640: POP
// result := list ;
28641: LD_ADDR_VAR 0 2
28645: PUSH
28646: LD_VAR 0 5
28650: ST_TO_ADDR
// end ;
28651: LD_VAR 0 2
28655: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28656: LD_INT 0
28658: PPUSH
28659: PPUSH
28660: PPUSH
28661: PPUSH
28662: PPUSH
28663: PPUSH
28664: PPUSH
// if not factory then
28665: LD_VAR 0 1
28669: NOT
28670: IFFALSE 28674
// exit ;
28672: GO 29267
// if control = control_apeman then
28674: LD_VAR 0 4
28678: PUSH
28679: LD_INT 5
28681: EQUAL
28682: IFFALSE 28791
// begin tmp := UnitsInside ( factory ) ;
28684: LD_ADDR_VAR 0 8
28688: PUSH
28689: LD_VAR 0 1
28693: PPUSH
28694: CALL_OW 313
28698: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28699: LD_VAR 0 8
28703: PPUSH
28704: LD_INT 25
28706: PUSH
28707: LD_INT 12
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PPUSH
28714: CALL_OW 72
28718: NOT
28719: IFFALSE 28729
// control := control_manual ;
28721: LD_ADDR_VAR 0 4
28725: PUSH
28726: LD_INT 1
28728: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28729: LD_ADDR_VAR 0 8
28733: PUSH
28734: LD_VAR 0 1
28738: PPUSH
28739: CALL 28426 0 1
28743: ST_TO_ADDR
// if tmp then
28744: LD_VAR 0 8
28748: IFFALSE 28791
// begin for i in tmp do
28750: LD_ADDR_VAR 0 7
28754: PUSH
28755: LD_VAR 0 8
28759: PUSH
28760: FOR_IN
28761: IFFALSE 28789
// if i [ 1 ] = b_ext_radio then
28763: LD_VAR 0 7
28767: PUSH
28768: LD_INT 1
28770: ARRAY
28771: PUSH
28772: LD_INT 22
28774: EQUAL
28775: IFFALSE 28787
// begin control := control_remote ;
28777: LD_ADDR_VAR 0 4
28781: PUSH
28782: LD_INT 2
28784: ST_TO_ADDR
// break ;
28785: GO 28789
// end ;
28787: GO 28760
28789: POP
28790: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28791: LD_VAR 0 1
28795: PPUSH
28796: LD_VAR 0 2
28800: PPUSH
28801: LD_VAR 0 3
28805: PPUSH
28806: LD_VAR 0 4
28810: PPUSH
28811: LD_VAR 0 5
28815: PPUSH
28816: CALL_OW 448
28820: IFFALSE 28855
// begin result := [ chassis , engine , control , weapon ] ;
28822: LD_ADDR_VAR 0 6
28826: PUSH
28827: LD_VAR 0 2
28831: PUSH
28832: LD_VAR 0 3
28836: PUSH
28837: LD_VAR 0 4
28841: PUSH
28842: LD_VAR 0 5
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: ST_TO_ADDR
// exit ;
28853: GO 29267
// end ; _chassis := AvailableChassisList ( factory ) ;
28855: LD_ADDR_VAR 0 9
28859: PUSH
28860: LD_VAR 0 1
28864: PPUSH
28865: CALL_OW 475
28869: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28870: LD_ADDR_VAR 0 11
28874: PUSH
28875: LD_VAR 0 1
28879: PPUSH
28880: CALL_OW 476
28884: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28885: LD_ADDR_VAR 0 12
28889: PUSH
28890: LD_VAR 0 1
28894: PPUSH
28895: CALL_OW 477
28899: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28900: LD_ADDR_VAR 0 10
28904: PUSH
28905: LD_VAR 0 1
28909: PPUSH
28910: CALL_OW 478
28914: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28915: LD_VAR 0 9
28919: NOT
28920: PUSH
28921: LD_VAR 0 11
28925: NOT
28926: OR
28927: PUSH
28928: LD_VAR 0 12
28932: NOT
28933: OR
28934: PUSH
28935: LD_VAR 0 10
28939: NOT
28940: OR
28941: IFFALSE 28976
// begin result := [ chassis , engine , control , weapon ] ;
28943: LD_ADDR_VAR 0 6
28947: PUSH
28948: LD_VAR 0 2
28952: PUSH
28953: LD_VAR 0 3
28957: PUSH
28958: LD_VAR 0 4
28962: PUSH
28963: LD_VAR 0 5
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: ST_TO_ADDR
// exit ;
28974: GO 29267
// end ; if not chassis in _chassis then
28976: LD_VAR 0 2
28980: PUSH
28981: LD_VAR 0 9
28985: IN
28986: NOT
28987: IFFALSE 29013
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28989: LD_ADDR_VAR 0 2
28993: PUSH
28994: LD_VAR 0 9
28998: PUSH
28999: LD_INT 1
29001: PPUSH
29002: LD_VAR 0 9
29006: PPUSH
29007: CALL_OW 12
29011: ARRAY
29012: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29013: LD_VAR 0 2
29017: PPUSH
29018: LD_VAR 0 3
29022: PPUSH
29023: CALL 29272 0 2
29027: NOT
29028: IFFALSE 29087
// repeat engine := _engine [ 1 ] ;
29030: LD_ADDR_VAR 0 3
29034: PUSH
29035: LD_VAR 0 11
29039: PUSH
29040: LD_INT 1
29042: ARRAY
29043: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29044: LD_ADDR_VAR 0 11
29048: PUSH
29049: LD_VAR 0 11
29053: PPUSH
29054: LD_INT 1
29056: PPUSH
29057: CALL_OW 3
29061: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29062: LD_VAR 0 2
29066: PPUSH
29067: LD_VAR 0 3
29071: PPUSH
29072: CALL 29272 0 2
29076: PUSH
29077: LD_VAR 0 11
29081: PUSH
29082: EMPTY
29083: EQUAL
29084: OR
29085: IFFALSE 29030
// if not control in _control then
29087: LD_VAR 0 4
29091: PUSH
29092: LD_VAR 0 12
29096: IN
29097: NOT
29098: IFFALSE 29124
// control := _control [ rand ( 1 , _control ) ] ;
29100: LD_ADDR_VAR 0 4
29104: PUSH
29105: LD_VAR 0 12
29109: PUSH
29110: LD_INT 1
29112: PPUSH
29113: LD_VAR 0 12
29117: PPUSH
29118: CALL_OW 12
29122: ARRAY
29123: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29124: LD_VAR 0 2
29128: PPUSH
29129: LD_VAR 0 5
29133: PPUSH
29134: CALL 29492 0 2
29138: NOT
29139: IFFALSE 29198
// repeat weapon := _weapon [ 1 ] ;
29141: LD_ADDR_VAR 0 5
29145: PUSH
29146: LD_VAR 0 10
29150: PUSH
29151: LD_INT 1
29153: ARRAY
29154: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29155: LD_ADDR_VAR 0 10
29159: PUSH
29160: LD_VAR 0 10
29164: PPUSH
29165: LD_INT 1
29167: PPUSH
29168: CALL_OW 3
29172: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29173: LD_VAR 0 2
29177: PPUSH
29178: LD_VAR 0 5
29182: PPUSH
29183: CALL 29492 0 2
29187: PUSH
29188: LD_VAR 0 10
29192: PUSH
29193: EMPTY
29194: EQUAL
29195: OR
29196: IFFALSE 29141
// result := [ ] ;
29198: LD_ADDR_VAR 0 6
29202: PUSH
29203: EMPTY
29204: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29205: LD_VAR 0 1
29209: PPUSH
29210: LD_VAR 0 2
29214: PPUSH
29215: LD_VAR 0 3
29219: PPUSH
29220: LD_VAR 0 4
29224: PPUSH
29225: LD_VAR 0 5
29229: PPUSH
29230: CALL_OW 448
29234: IFFALSE 29267
// result := [ chassis , engine , control , weapon ] ;
29236: LD_ADDR_VAR 0 6
29240: PUSH
29241: LD_VAR 0 2
29245: PUSH
29246: LD_VAR 0 3
29250: PUSH
29251: LD_VAR 0 4
29255: PUSH
29256: LD_VAR 0 5
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: ST_TO_ADDR
// end ;
29267: LD_VAR 0 6
29271: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29272: LD_INT 0
29274: PPUSH
// if not chassis or not engine then
29275: LD_VAR 0 1
29279: NOT
29280: PUSH
29281: LD_VAR 0 2
29285: NOT
29286: OR
29287: IFFALSE 29291
// exit ;
29289: GO 29487
// case engine of engine_solar :
29291: LD_VAR 0 2
29295: PUSH
29296: LD_INT 2
29298: DOUBLE
29299: EQUAL
29300: IFTRUE 29304
29302: GO 29342
29304: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29305: LD_ADDR_VAR 0 3
29309: PUSH
29310: LD_INT 11
29312: PUSH
29313: LD_INT 12
29315: PUSH
29316: LD_INT 13
29318: PUSH
29319: LD_INT 14
29321: PUSH
29322: LD_INT 1
29324: PUSH
29325: LD_INT 2
29327: PUSH
29328: LD_INT 3
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: ST_TO_ADDR
29340: GO 29471
29342: LD_INT 1
29344: DOUBLE
29345: EQUAL
29346: IFTRUE 29350
29348: GO 29412
29350: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29351: LD_ADDR_VAR 0 3
29355: PUSH
29356: LD_INT 11
29358: PUSH
29359: LD_INT 12
29361: PUSH
29362: LD_INT 13
29364: PUSH
29365: LD_INT 14
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: LD_INT 2
29373: PUSH
29374: LD_INT 3
29376: PUSH
29377: LD_INT 4
29379: PUSH
29380: LD_INT 5
29382: PUSH
29383: LD_INT 21
29385: PUSH
29386: LD_INT 23
29388: PUSH
29389: LD_INT 22
29391: PUSH
29392: LD_INT 24
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: ST_TO_ADDR
29410: GO 29471
29412: LD_INT 3
29414: DOUBLE
29415: EQUAL
29416: IFTRUE 29420
29418: GO 29470
29420: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29421: LD_ADDR_VAR 0 3
29425: PUSH
29426: LD_INT 13
29428: PUSH
29429: LD_INT 14
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: LD_INT 3
29437: PUSH
29438: LD_INT 4
29440: PUSH
29441: LD_INT 5
29443: PUSH
29444: LD_INT 21
29446: PUSH
29447: LD_INT 22
29449: PUSH
29450: LD_INT 23
29452: PUSH
29453: LD_INT 24
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: ST_TO_ADDR
29468: GO 29471
29470: POP
// result := ( chassis in result ) ;
29471: LD_ADDR_VAR 0 3
29475: PUSH
29476: LD_VAR 0 1
29480: PUSH
29481: LD_VAR 0 3
29485: IN
29486: ST_TO_ADDR
// end ;
29487: LD_VAR 0 3
29491: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29492: LD_INT 0
29494: PPUSH
// if not chassis or not weapon then
29495: LD_VAR 0 1
29499: NOT
29500: PUSH
29501: LD_VAR 0 2
29505: NOT
29506: OR
29507: IFFALSE 29511
// exit ;
29509: GO 30571
// case weapon of us_machine_gun :
29511: LD_VAR 0 2
29515: PUSH
29516: LD_INT 2
29518: DOUBLE
29519: EQUAL
29520: IFTRUE 29524
29522: GO 29554
29524: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29525: LD_ADDR_VAR 0 3
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: LD_INT 3
29538: PUSH
29539: LD_INT 4
29541: PUSH
29542: LD_INT 5
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: ST_TO_ADDR
29552: GO 30555
29554: LD_INT 3
29556: DOUBLE
29557: EQUAL
29558: IFTRUE 29562
29560: GO 29592
29562: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29563: LD_ADDR_VAR 0 3
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: LD_INT 3
29576: PUSH
29577: LD_INT 4
29579: PUSH
29580: LD_INT 5
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: ST_TO_ADDR
29590: GO 30555
29592: LD_INT 11
29594: DOUBLE
29595: EQUAL
29596: IFTRUE 29600
29598: GO 29630
29600: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29601: LD_ADDR_VAR 0 3
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: LD_INT 2
29611: PUSH
29612: LD_INT 3
29614: PUSH
29615: LD_INT 4
29617: PUSH
29618: LD_INT 5
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: ST_TO_ADDR
29628: GO 30555
29630: LD_INT 4
29632: DOUBLE
29633: EQUAL
29634: IFTRUE 29638
29636: GO 29664
29638: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29639: LD_ADDR_VAR 0 3
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: LD_INT 3
29649: PUSH
29650: LD_INT 4
29652: PUSH
29653: LD_INT 5
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: ST_TO_ADDR
29662: GO 30555
29664: LD_INT 5
29666: DOUBLE
29667: EQUAL
29668: IFTRUE 29672
29670: GO 29698
29672: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29673: LD_ADDR_VAR 0 3
29677: PUSH
29678: LD_INT 2
29680: PUSH
29681: LD_INT 3
29683: PUSH
29684: LD_INT 4
29686: PUSH
29687: LD_INT 5
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: ST_TO_ADDR
29696: GO 30555
29698: LD_INT 9
29700: DOUBLE
29701: EQUAL
29702: IFTRUE 29706
29704: GO 29732
29706: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29707: LD_ADDR_VAR 0 3
29711: PUSH
29712: LD_INT 2
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: LD_INT 4
29720: PUSH
29721: LD_INT 5
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: ST_TO_ADDR
29730: GO 30555
29732: LD_INT 7
29734: DOUBLE
29735: EQUAL
29736: IFTRUE 29740
29738: GO 29766
29740: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_INT 2
29748: PUSH
29749: LD_INT 3
29751: PUSH
29752: LD_INT 4
29754: PUSH
29755: LD_INT 5
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: ST_TO_ADDR
29764: GO 30555
29766: LD_INT 12
29768: DOUBLE
29769: EQUAL
29770: IFTRUE 29774
29772: GO 29800
29774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29775: LD_ADDR_VAR 0 3
29779: PUSH
29780: LD_INT 2
29782: PUSH
29783: LD_INT 3
29785: PUSH
29786: LD_INT 4
29788: PUSH
29789: LD_INT 5
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: ST_TO_ADDR
29798: GO 30555
29800: LD_INT 13
29802: DOUBLE
29803: EQUAL
29804: IFTRUE 29808
29806: GO 29834
29808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29809: LD_ADDR_VAR 0 3
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: LD_INT 4
29822: PUSH
29823: LD_INT 5
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: ST_TO_ADDR
29832: GO 30555
29834: LD_INT 14
29836: DOUBLE
29837: EQUAL
29838: IFTRUE 29842
29840: GO 29860
29842: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29843: LD_ADDR_VAR 0 3
29847: PUSH
29848: LD_INT 4
29850: PUSH
29851: LD_INT 5
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: ST_TO_ADDR
29858: GO 30555
29860: LD_INT 6
29862: DOUBLE
29863: EQUAL
29864: IFTRUE 29868
29866: GO 29886
29868: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29869: LD_ADDR_VAR 0 3
29873: PUSH
29874: LD_INT 4
29876: PUSH
29877: LD_INT 5
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: ST_TO_ADDR
29884: GO 30555
29886: LD_INT 10
29888: DOUBLE
29889: EQUAL
29890: IFTRUE 29894
29892: GO 29912
29894: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29895: LD_ADDR_VAR 0 3
29899: PUSH
29900: LD_INT 4
29902: PUSH
29903: LD_INT 5
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: ST_TO_ADDR
29910: GO 30555
29912: LD_INT 22
29914: DOUBLE
29915: EQUAL
29916: IFTRUE 29920
29918: GO 29946
29920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29921: LD_ADDR_VAR 0 3
29925: PUSH
29926: LD_INT 11
29928: PUSH
29929: LD_INT 12
29931: PUSH
29932: LD_INT 13
29934: PUSH
29935: LD_INT 14
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: ST_TO_ADDR
29944: GO 30555
29946: LD_INT 23
29948: DOUBLE
29949: EQUAL
29950: IFTRUE 29954
29952: GO 29980
29954: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29955: LD_ADDR_VAR 0 3
29959: PUSH
29960: LD_INT 11
29962: PUSH
29963: LD_INT 12
29965: PUSH
29966: LD_INT 13
29968: PUSH
29969: LD_INT 14
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: ST_TO_ADDR
29978: GO 30555
29980: LD_INT 24
29982: DOUBLE
29983: EQUAL
29984: IFTRUE 29988
29986: GO 30014
29988: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29989: LD_ADDR_VAR 0 3
29993: PUSH
29994: LD_INT 11
29996: PUSH
29997: LD_INT 12
29999: PUSH
30000: LD_INT 13
30002: PUSH
30003: LD_INT 14
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: ST_TO_ADDR
30012: GO 30555
30014: LD_INT 30
30016: DOUBLE
30017: EQUAL
30018: IFTRUE 30022
30020: GO 30048
30022: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30023: LD_ADDR_VAR 0 3
30027: PUSH
30028: LD_INT 11
30030: PUSH
30031: LD_INT 12
30033: PUSH
30034: LD_INT 13
30036: PUSH
30037: LD_INT 14
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: ST_TO_ADDR
30046: GO 30555
30048: LD_INT 25
30050: DOUBLE
30051: EQUAL
30052: IFTRUE 30056
30054: GO 30074
30056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30057: LD_ADDR_VAR 0 3
30061: PUSH
30062: LD_INT 13
30064: PUSH
30065: LD_INT 14
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: ST_TO_ADDR
30072: GO 30555
30074: LD_INT 27
30076: DOUBLE
30077: EQUAL
30078: IFTRUE 30082
30080: GO 30100
30082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30083: LD_ADDR_VAR 0 3
30087: PUSH
30088: LD_INT 13
30090: PUSH
30091: LD_INT 14
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: ST_TO_ADDR
30098: GO 30555
30100: LD_INT 92
30102: DOUBLE
30103: EQUAL
30104: IFTRUE 30108
30106: GO 30134
30108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30109: LD_ADDR_VAR 0 3
30113: PUSH
30114: LD_INT 11
30116: PUSH
30117: LD_INT 12
30119: PUSH
30120: LD_INT 13
30122: PUSH
30123: LD_INT 14
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: ST_TO_ADDR
30132: GO 30555
30134: LD_INT 28
30136: DOUBLE
30137: EQUAL
30138: IFTRUE 30142
30140: GO 30160
30142: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30143: LD_ADDR_VAR 0 3
30147: PUSH
30148: LD_INT 13
30150: PUSH
30151: LD_INT 14
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: ST_TO_ADDR
30158: GO 30555
30160: LD_INT 29
30162: DOUBLE
30163: EQUAL
30164: IFTRUE 30168
30166: GO 30186
30168: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30169: LD_ADDR_VAR 0 3
30173: PUSH
30174: LD_INT 13
30176: PUSH
30177: LD_INT 14
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: ST_TO_ADDR
30184: GO 30555
30186: LD_INT 31
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 30212
30194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30195: LD_ADDR_VAR 0 3
30199: PUSH
30200: LD_INT 13
30202: PUSH
30203: LD_INT 14
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: ST_TO_ADDR
30210: GO 30555
30212: LD_INT 26
30214: DOUBLE
30215: EQUAL
30216: IFTRUE 30220
30218: GO 30238
30220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30221: LD_ADDR_VAR 0 3
30225: PUSH
30226: LD_INT 13
30228: PUSH
30229: LD_INT 14
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: ST_TO_ADDR
30236: GO 30555
30238: LD_INT 42
30240: DOUBLE
30241: EQUAL
30242: IFTRUE 30246
30244: GO 30272
30246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30247: LD_ADDR_VAR 0 3
30251: PUSH
30252: LD_INT 21
30254: PUSH
30255: LD_INT 22
30257: PUSH
30258: LD_INT 23
30260: PUSH
30261: LD_INT 24
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: ST_TO_ADDR
30270: GO 30555
30272: LD_INT 43
30274: DOUBLE
30275: EQUAL
30276: IFTRUE 30280
30278: GO 30306
30280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30281: LD_ADDR_VAR 0 3
30285: PUSH
30286: LD_INT 21
30288: PUSH
30289: LD_INT 22
30291: PUSH
30292: LD_INT 23
30294: PUSH
30295: LD_INT 24
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: ST_TO_ADDR
30304: GO 30555
30306: LD_INT 44
30308: DOUBLE
30309: EQUAL
30310: IFTRUE 30314
30312: GO 30340
30314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30315: LD_ADDR_VAR 0 3
30319: PUSH
30320: LD_INT 21
30322: PUSH
30323: LD_INT 22
30325: PUSH
30326: LD_INT 23
30328: PUSH
30329: LD_INT 24
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: ST_TO_ADDR
30338: GO 30555
30340: LD_INT 45
30342: DOUBLE
30343: EQUAL
30344: IFTRUE 30348
30346: GO 30374
30348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30349: LD_ADDR_VAR 0 3
30353: PUSH
30354: LD_INT 21
30356: PUSH
30357: LD_INT 22
30359: PUSH
30360: LD_INT 23
30362: PUSH
30363: LD_INT 24
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: ST_TO_ADDR
30372: GO 30555
30374: LD_INT 49
30376: DOUBLE
30377: EQUAL
30378: IFTRUE 30382
30380: GO 30408
30382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30383: LD_ADDR_VAR 0 3
30387: PUSH
30388: LD_INT 21
30390: PUSH
30391: LD_INT 22
30393: PUSH
30394: LD_INT 23
30396: PUSH
30397: LD_INT 24
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: ST_TO_ADDR
30406: GO 30555
30408: LD_INT 51
30410: DOUBLE
30411: EQUAL
30412: IFTRUE 30416
30414: GO 30442
30416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30417: LD_ADDR_VAR 0 3
30421: PUSH
30422: LD_INT 21
30424: PUSH
30425: LD_INT 22
30427: PUSH
30428: LD_INT 23
30430: PUSH
30431: LD_INT 24
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: ST_TO_ADDR
30440: GO 30555
30442: LD_INT 52
30444: DOUBLE
30445: EQUAL
30446: IFTRUE 30450
30448: GO 30476
30450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30451: LD_ADDR_VAR 0 3
30455: PUSH
30456: LD_INT 21
30458: PUSH
30459: LD_INT 22
30461: PUSH
30462: LD_INT 23
30464: PUSH
30465: LD_INT 24
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: ST_TO_ADDR
30474: GO 30555
30476: LD_INT 53
30478: DOUBLE
30479: EQUAL
30480: IFTRUE 30484
30482: GO 30502
30484: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30485: LD_ADDR_VAR 0 3
30489: PUSH
30490: LD_INT 23
30492: PUSH
30493: LD_INT 24
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: ST_TO_ADDR
30500: GO 30555
30502: LD_INT 46
30504: DOUBLE
30505: EQUAL
30506: IFTRUE 30510
30508: GO 30528
30510: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30511: LD_ADDR_VAR 0 3
30515: PUSH
30516: LD_INT 23
30518: PUSH
30519: LD_INT 24
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: ST_TO_ADDR
30526: GO 30555
30528: LD_INT 47
30530: DOUBLE
30531: EQUAL
30532: IFTRUE 30536
30534: GO 30554
30536: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30537: LD_ADDR_VAR 0 3
30541: PUSH
30542: LD_INT 23
30544: PUSH
30545: LD_INT 24
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: ST_TO_ADDR
30552: GO 30555
30554: POP
// result := ( chassis in result ) ;
30555: LD_ADDR_VAR 0 3
30559: PUSH
30560: LD_VAR 0 1
30564: PUSH
30565: LD_VAR 0 3
30569: IN
30570: ST_TO_ADDR
// end ;
30571: LD_VAR 0 3
30575: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30576: LD_INT 0
30578: PPUSH
30579: PPUSH
30580: PPUSH
30581: PPUSH
30582: PPUSH
30583: PPUSH
30584: PPUSH
// result := array ;
30585: LD_ADDR_VAR 0 5
30589: PUSH
30590: LD_VAR 0 1
30594: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30595: LD_VAR 0 1
30599: NOT
30600: PUSH
30601: LD_VAR 0 2
30605: NOT
30606: OR
30607: PUSH
30608: LD_VAR 0 3
30612: NOT
30613: OR
30614: PUSH
30615: LD_VAR 0 2
30619: PUSH
30620: LD_VAR 0 1
30624: GREATER
30625: OR
30626: PUSH
30627: LD_VAR 0 3
30631: PUSH
30632: LD_VAR 0 1
30636: GREATER
30637: OR
30638: IFFALSE 30642
// exit ;
30640: GO 30938
// if direction then
30642: LD_VAR 0 4
30646: IFFALSE 30710
// begin d := 1 ;
30648: LD_ADDR_VAR 0 9
30652: PUSH
30653: LD_INT 1
30655: ST_TO_ADDR
// if i_from > i_to then
30656: LD_VAR 0 2
30660: PUSH
30661: LD_VAR 0 3
30665: GREATER
30666: IFFALSE 30692
// length := ( array - i_from ) + i_to else
30668: LD_ADDR_VAR 0 11
30672: PUSH
30673: LD_VAR 0 1
30677: PUSH
30678: LD_VAR 0 2
30682: MINUS
30683: PUSH
30684: LD_VAR 0 3
30688: PLUS
30689: ST_TO_ADDR
30690: GO 30708
// length := i_to - i_from ;
30692: LD_ADDR_VAR 0 11
30696: PUSH
30697: LD_VAR 0 3
30701: PUSH
30702: LD_VAR 0 2
30706: MINUS
30707: ST_TO_ADDR
// end else
30708: GO 30771
// begin d := - 1 ;
30710: LD_ADDR_VAR 0 9
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: ST_TO_ADDR
// if i_from > i_to then
30719: LD_VAR 0 2
30723: PUSH
30724: LD_VAR 0 3
30728: GREATER
30729: IFFALSE 30749
// length := i_from - i_to else
30731: LD_ADDR_VAR 0 11
30735: PUSH
30736: LD_VAR 0 2
30740: PUSH
30741: LD_VAR 0 3
30745: MINUS
30746: ST_TO_ADDR
30747: GO 30771
// length := ( array - i_to ) + i_from ;
30749: LD_ADDR_VAR 0 11
30753: PUSH
30754: LD_VAR 0 1
30758: PUSH
30759: LD_VAR 0 3
30763: MINUS
30764: PUSH
30765: LD_VAR 0 2
30769: PLUS
30770: ST_TO_ADDR
// end ; if not length then
30771: LD_VAR 0 11
30775: NOT
30776: IFFALSE 30780
// exit ;
30778: GO 30938
// tmp := array ;
30780: LD_ADDR_VAR 0 10
30784: PUSH
30785: LD_VAR 0 1
30789: ST_TO_ADDR
// for i = 1 to length do
30790: LD_ADDR_VAR 0 6
30794: PUSH
30795: DOUBLE
30796: LD_INT 1
30798: DEC
30799: ST_TO_ADDR
30800: LD_VAR 0 11
30804: PUSH
30805: FOR_TO
30806: IFFALSE 30926
// begin for j = 1 to array do
30808: LD_ADDR_VAR 0 7
30812: PUSH
30813: DOUBLE
30814: LD_INT 1
30816: DEC
30817: ST_TO_ADDR
30818: LD_VAR 0 1
30822: PUSH
30823: FOR_TO
30824: IFFALSE 30912
// begin k := j + d ;
30826: LD_ADDR_VAR 0 8
30830: PUSH
30831: LD_VAR 0 7
30835: PUSH
30836: LD_VAR 0 9
30840: PLUS
30841: ST_TO_ADDR
// if k > array then
30842: LD_VAR 0 8
30846: PUSH
30847: LD_VAR 0 1
30851: GREATER
30852: IFFALSE 30862
// k := 1 ;
30854: LD_ADDR_VAR 0 8
30858: PUSH
30859: LD_INT 1
30861: ST_TO_ADDR
// if not k then
30862: LD_VAR 0 8
30866: NOT
30867: IFFALSE 30879
// k := array ;
30869: LD_ADDR_VAR 0 8
30873: PUSH
30874: LD_VAR 0 1
30878: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30879: LD_ADDR_VAR 0 10
30883: PUSH
30884: LD_VAR 0 10
30888: PPUSH
30889: LD_VAR 0 8
30893: PPUSH
30894: LD_VAR 0 1
30898: PUSH
30899: LD_VAR 0 7
30903: ARRAY
30904: PPUSH
30905: CALL_OW 1
30909: ST_TO_ADDR
// end ;
30910: GO 30823
30912: POP
30913: POP
// array := tmp ;
30914: LD_ADDR_VAR 0 1
30918: PUSH
30919: LD_VAR 0 10
30923: ST_TO_ADDR
// end ;
30924: GO 30805
30926: POP
30927: POP
// result := array ;
30928: LD_ADDR_VAR 0 5
30932: PUSH
30933: LD_VAR 0 1
30937: ST_TO_ADDR
// end ;
30938: LD_VAR 0 5
30942: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30943: LD_INT 0
30945: PPUSH
30946: PPUSH
// result := 0 ;
30947: LD_ADDR_VAR 0 3
30951: PUSH
30952: LD_INT 0
30954: ST_TO_ADDR
// if not array or not value in array then
30955: LD_VAR 0 1
30959: NOT
30960: PUSH
30961: LD_VAR 0 2
30965: PUSH
30966: LD_VAR 0 1
30970: IN
30971: NOT
30972: OR
30973: IFFALSE 30977
// exit ;
30975: GO 31031
// for i = 1 to array do
30977: LD_ADDR_VAR 0 4
30981: PUSH
30982: DOUBLE
30983: LD_INT 1
30985: DEC
30986: ST_TO_ADDR
30987: LD_VAR 0 1
30991: PUSH
30992: FOR_TO
30993: IFFALSE 31029
// if value = array [ i ] then
30995: LD_VAR 0 2
30999: PUSH
31000: LD_VAR 0 1
31004: PUSH
31005: LD_VAR 0 4
31009: ARRAY
31010: EQUAL
31011: IFFALSE 31027
// begin result := i ;
31013: LD_ADDR_VAR 0 3
31017: PUSH
31018: LD_VAR 0 4
31022: ST_TO_ADDR
// exit ;
31023: POP
31024: POP
31025: GO 31031
// end ;
31027: GO 30992
31029: POP
31030: POP
// end ;
31031: LD_VAR 0 3
31035: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31036: LD_INT 0
31038: PPUSH
// vc_chassis := chassis ;
31039: LD_ADDR_OWVAR 37
31043: PUSH
31044: LD_VAR 0 1
31048: ST_TO_ADDR
// vc_engine := engine ;
31049: LD_ADDR_OWVAR 39
31053: PUSH
31054: LD_VAR 0 2
31058: ST_TO_ADDR
// vc_control := control ;
31059: LD_ADDR_OWVAR 38
31063: PUSH
31064: LD_VAR 0 3
31068: ST_TO_ADDR
// vc_weapon := weapon ;
31069: LD_ADDR_OWVAR 40
31073: PUSH
31074: LD_VAR 0 4
31078: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31079: LD_ADDR_OWVAR 41
31083: PUSH
31084: LD_VAR 0 5
31088: ST_TO_ADDR
// end ;
31089: LD_VAR 0 6
31093: RET
// export function WantPlant ( unit ) ; var task ; begin
31094: LD_INT 0
31096: PPUSH
31097: PPUSH
// result := false ;
31098: LD_ADDR_VAR 0 2
31102: PUSH
31103: LD_INT 0
31105: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31106: LD_ADDR_VAR 0 3
31110: PUSH
31111: LD_VAR 0 1
31115: PPUSH
31116: CALL_OW 437
31120: ST_TO_ADDR
// if task then
31121: LD_VAR 0 3
31125: IFFALSE 31153
// if task [ 1 ] [ 1 ] = p then
31127: LD_VAR 0 3
31131: PUSH
31132: LD_INT 1
31134: ARRAY
31135: PUSH
31136: LD_INT 1
31138: ARRAY
31139: PUSH
31140: LD_STRING p
31142: EQUAL
31143: IFFALSE 31153
// result := true ;
31145: LD_ADDR_VAR 0 2
31149: PUSH
31150: LD_INT 1
31152: ST_TO_ADDR
// end ;
31153: LD_VAR 0 2
31157: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31158: LD_INT 0
31160: PPUSH
31161: PPUSH
31162: PPUSH
31163: PPUSH
// if pos < 1 then
31164: LD_VAR 0 2
31168: PUSH
31169: LD_INT 1
31171: LESS
31172: IFFALSE 31176
// exit ;
31174: GO 31479
// if pos = 1 then
31176: LD_VAR 0 2
31180: PUSH
31181: LD_INT 1
31183: EQUAL
31184: IFFALSE 31217
// result := Replace ( arr , pos [ 1 ] , value ) else
31186: LD_ADDR_VAR 0 4
31190: PUSH
31191: LD_VAR 0 1
31195: PPUSH
31196: LD_VAR 0 2
31200: PUSH
31201: LD_INT 1
31203: ARRAY
31204: PPUSH
31205: LD_VAR 0 3
31209: PPUSH
31210: CALL_OW 1
31214: ST_TO_ADDR
31215: GO 31479
// begin tmp := arr ;
31217: LD_ADDR_VAR 0 6
31221: PUSH
31222: LD_VAR 0 1
31226: ST_TO_ADDR
// s_arr := [ tmp ] ;
31227: LD_ADDR_VAR 0 7
31231: PUSH
31232: LD_VAR 0 6
31236: PUSH
31237: EMPTY
31238: LIST
31239: ST_TO_ADDR
// for i = 1 to pos - 1 do
31240: LD_ADDR_VAR 0 5
31244: PUSH
31245: DOUBLE
31246: LD_INT 1
31248: DEC
31249: ST_TO_ADDR
31250: LD_VAR 0 2
31254: PUSH
31255: LD_INT 1
31257: MINUS
31258: PUSH
31259: FOR_TO
31260: IFFALSE 31305
// begin tmp := tmp [ pos [ i ] ] ;
31262: LD_ADDR_VAR 0 6
31266: PUSH
31267: LD_VAR 0 6
31271: PUSH
31272: LD_VAR 0 2
31276: PUSH
31277: LD_VAR 0 5
31281: ARRAY
31282: ARRAY
31283: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31284: LD_ADDR_VAR 0 7
31288: PUSH
31289: LD_VAR 0 7
31293: PUSH
31294: LD_VAR 0 6
31298: PUSH
31299: EMPTY
31300: LIST
31301: ADD
31302: ST_TO_ADDR
// end ;
31303: GO 31259
31305: POP
31306: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31307: LD_ADDR_VAR 0 6
31311: PUSH
31312: LD_VAR 0 6
31316: PPUSH
31317: LD_VAR 0 2
31321: PUSH
31322: LD_VAR 0 2
31326: ARRAY
31327: PPUSH
31328: LD_VAR 0 3
31332: PPUSH
31333: CALL_OW 1
31337: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31338: LD_ADDR_VAR 0 7
31342: PUSH
31343: LD_VAR 0 7
31347: PPUSH
31348: LD_VAR 0 7
31352: PPUSH
31353: LD_VAR 0 6
31357: PPUSH
31358: CALL_OW 1
31362: ST_TO_ADDR
// for i = s_arr downto 2 do
31363: LD_ADDR_VAR 0 5
31367: PUSH
31368: DOUBLE
31369: LD_VAR 0 7
31373: INC
31374: ST_TO_ADDR
31375: LD_INT 2
31377: PUSH
31378: FOR_DOWNTO
31379: IFFALSE 31463
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31381: LD_ADDR_VAR 0 6
31385: PUSH
31386: LD_VAR 0 7
31390: PUSH
31391: LD_VAR 0 5
31395: PUSH
31396: LD_INT 1
31398: MINUS
31399: ARRAY
31400: PPUSH
31401: LD_VAR 0 2
31405: PUSH
31406: LD_VAR 0 5
31410: PUSH
31411: LD_INT 1
31413: MINUS
31414: ARRAY
31415: PPUSH
31416: LD_VAR 0 7
31420: PUSH
31421: LD_VAR 0 5
31425: ARRAY
31426: PPUSH
31427: CALL_OW 1
31431: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31432: LD_ADDR_VAR 0 7
31436: PUSH
31437: LD_VAR 0 7
31441: PPUSH
31442: LD_VAR 0 5
31446: PUSH
31447: LD_INT 1
31449: MINUS
31450: PPUSH
31451: LD_VAR 0 6
31455: PPUSH
31456: CALL_OW 1
31460: ST_TO_ADDR
// end ;
31461: GO 31378
31463: POP
31464: POP
// result := s_arr [ 1 ] ;
31465: LD_ADDR_VAR 0 4
31469: PUSH
31470: LD_VAR 0 7
31474: PUSH
31475: LD_INT 1
31477: ARRAY
31478: ST_TO_ADDR
// end ; end ;
31479: LD_VAR 0 4
31483: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31484: LD_INT 0
31486: PPUSH
31487: PPUSH
// if not list then
31488: LD_VAR 0 1
31492: NOT
31493: IFFALSE 31497
// exit ;
31495: GO 31588
// i := list [ pos1 ] ;
31497: LD_ADDR_VAR 0 5
31501: PUSH
31502: LD_VAR 0 1
31506: PUSH
31507: LD_VAR 0 2
31511: ARRAY
31512: ST_TO_ADDR
// if not i then
31513: LD_VAR 0 5
31517: NOT
31518: IFFALSE 31522
// exit ;
31520: GO 31588
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31522: LD_ADDR_VAR 0 1
31526: PUSH
31527: LD_VAR 0 1
31531: PPUSH
31532: LD_VAR 0 2
31536: PPUSH
31537: LD_VAR 0 1
31541: PUSH
31542: LD_VAR 0 3
31546: ARRAY
31547: PPUSH
31548: CALL_OW 1
31552: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31553: LD_ADDR_VAR 0 1
31557: PUSH
31558: LD_VAR 0 1
31562: PPUSH
31563: LD_VAR 0 3
31567: PPUSH
31568: LD_VAR 0 5
31572: PPUSH
31573: CALL_OW 1
31577: ST_TO_ADDR
// result := list ;
31578: LD_ADDR_VAR 0 4
31582: PUSH
31583: LD_VAR 0 1
31587: ST_TO_ADDR
// end ;
31588: LD_VAR 0 4
31592: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31593: LD_INT 0
31595: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31596: LD_ADDR_VAR 0 5
31600: PUSH
31601: LD_VAR 0 1
31605: PPUSH
31606: CALL_OW 250
31610: PPUSH
31611: LD_VAR 0 1
31615: PPUSH
31616: CALL_OW 251
31620: PPUSH
31621: LD_VAR 0 2
31625: PPUSH
31626: LD_VAR 0 3
31630: PPUSH
31631: LD_VAR 0 4
31635: PPUSH
31636: CALL 32014 0 5
31640: ST_TO_ADDR
// end ;
31641: LD_VAR 0 5
31645: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31646: LD_INT 0
31648: PPUSH
31649: PPUSH
31650: PPUSH
31651: PPUSH
// if not list or not unit then
31652: LD_VAR 0 2
31656: NOT
31657: PUSH
31658: LD_VAR 0 1
31662: NOT
31663: OR
31664: IFFALSE 31668
// exit ;
31666: GO 32009
// result := [ ] ;
31668: LD_ADDR_VAR 0 5
31672: PUSH
31673: EMPTY
31674: ST_TO_ADDR
// for i in list do
31675: LD_ADDR_VAR 0 6
31679: PUSH
31680: LD_VAR 0 2
31684: PUSH
31685: FOR_IN
31686: IFFALSE 31904
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31688: LD_ADDR_VAR 0 8
31692: PUSH
31693: LD_VAR 0 1
31697: PPUSH
31698: LD_VAR 0 6
31702: PUSH
31703: LD_INT 1
31705: ARRAY
31706: PPUSH
31707: LD_VAR 0 6
31711: PUSH
31712: LD_INT 2
31714: ARRAY
31715: PPUSH
31716: CALL_OW 297
31720: ST_TO_ADDR
// if not Count ( result ) then
31721: LD_VAR 0 5
31725: PPUSH
31726: CALL 28298 0 1
31730: NOT
31731: IFFALSE 31764
// begin result := Join ( result , [ i , tmp ] ) ;
31733: LD_ADDR_VAR 0 5
31737: PUSH
31738: LD_VAR 0 5
31742: PPUSH
31743: LD_VAR 0 6
31747: PUSH
31748: LD_VAR 0 8
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PPUSH
31757: CALL 63898 0 2
31761: ST_TO_ADDR
// continue ;
31762: GO 31685
// end ; if result [ result ] [ 2 ] <= tmp then
31764: LD_VAR 0 5
31768: PUSH
31769: LD_VAR 0 5
31773: ARRAY
31774: PUSH
31775: LD_INT 2
31777: ARRAY
31778: PUSH
31779: LD_VAR 0 8
31783: LESSEQUAL
31784: IFFALSE 31817
// result := Join ( result , [ i , tmp ] ) else
31786: LD_ADDR_VAR 0 5
31790: PUSH
31791: LD_VAR 0 5
31795: PPUSH
31796: LD_VAR 0 6
31800: PUSH
31801: LD_VAR 0 8
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PPUSH
31810: CALL 63898 0 2
31814: ST_TO_ADDR
31815: GO 31902
// begin for j := 1 to Count ( result ) do
31817: LD_ADDR_VAR 0 7
31821: PUSH
31822: DOUBLE
31823: LD_INT 1
31825: DEC
31826: ST_TO_ADDR
31827: LD_VAR 0 5
31831: PPUSH
31832: CALL 28298 0 1
31836: PUSH
31837: FOR_TO
31838: IFFALSE 31900
// begin if tmp < result [ j ] [ 2 ] then
31840: LD_VAR 0 8
31844: PUSH
31845: LD_VAR 0 5
31849: PUSH
31850: LD_VAR 0 7
31854: ARRAY
31855: PUSH
31856: LD_INT 2
31858: ARRAY
31859: LESS
31860: IFFALSE 31898
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31862: LD_ADDR_VAR 0 5
31866: PUSH
31867: LD_VAR 0 5
31871: PPUSH
31872: LD_VAR 0 7
31876: PPUSH
31877: LD_VAR 0 6
31881: PUSH
31882: LD_VAR 0 8
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PPUSH
31891: CALL_OW 2
31895: ST_TO_ADDR
// break ;
31896: GO 31900
// end ; end ;
31898: GO 31837
31900: POP
31901: POP
// end ; end ;
31902: GO 31685
31904: POP
31905: POP
// if result and not asc then
31906: LD_VAR 0 5
31910: PUSH
31911: LD_VAR 0 3
31915: NOT
31916: AND
31917: IFFALSE 31934
// result := ReverseArray ( result ) ;
31919: LD_ADDR_VAR 0 5
31923: PUSH
31924: LD_VAR 0 5
31928: PPUSH
31929: CALL 59174 0 1
31933: ST_TO_ADDR
// tmp := [ ] ;
31934: LD_ADDR_VAR 0 8
31938: PUSH
31939: EMPTY
31940: ST_TO_ADDR
// if mode then
31941: LD_VAR 0 4
31945: IFFALSE 32009
// begin for i := 1 to result do
31947: LD_ADDR_VAR 0 6
31951: PUSH
31952: DOUBLE
31953: LD_INT 1
31955: DEC
31956: ST_TO_ADDR
31957: LD_VAR 0 5
31961: PUSH
31962: FOR_TO
31963: IFFALSE 31997
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
31965: LD_ADDR_VAR 0 8
31969: PUSH
31970: LD_VAR 0 8
31974: PPUSH
31975: LD_VAR 0 5
31979: PUSH
31980: LD_VAR 0 6
31984: ARRAY
31985: PUSH
31986: LD_INT 1
31988: ARRAY
31989: PPUSH
31990: CALL 63898 0 2
31994: ST_TO_ADDR
31995: GO 31962
31997: POP
31998: POP
// result := tmp ;
31999: LD_ADDR_VAR 0 5
32003: PUSH
32004: LD_VAR 0 8
32008: ST_TO_ADDR
// end ; end ;
32009: LD_VAR 0 5
32013: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32014: LD_INT 0
32016: PPUSH
32017: PPUSH
32018: PPUSH
32019: PPUSH
// if not list then
32020: LD_VAR 0 3
32024: NOT
32025: IFFALSE 32029
// exit ;
32027: GO 32417
// result := [ ] ;
32029: LD_ADDR_VAR 0 6
32033: PUSH
32034: EMPTY
32035: ST_TO_ADDR
// for i in list do
32036: LD_ADDR_VAR 0 7
32040: PUSH
32041: LD_VAR 0 3
32045: PUSH
32046: FOR_IN
32047: IFFALSE 32249
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32049: LD_ADDR_VAR 0 9
32053: PUSH
32054: LD_VAR 0 7
32058: PPUSH
32059: LD_VAR 0 1
32063: PPUSH
32064: LD_VAR 0 2
32068: PPUSH
32069: CALL_OW 297
32073: ST_TO_ADDR
// if not result then
32074: LD_VAR 0 6
32078: NOT
32079: IFFALSE 32105
// result := [ [ i , tmp ] ] else
32081: LD_ADDR_VAR 0 6
32085: PUSH
32086: LD_VAR 0 7
32090: PUSH
32091: LD_VAR 0 9
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: EMPTY
32101: LIST
32102: ST_TO_ADDR
32103: GO 32247
// begin if result [ result ] [ 2 ] < tmp then
32105: LD_VAR 0 6
32109: PUSH
32110: LD_VAR 0 6
32114: ARRAY
32115: PUSH
32116: LD_INT 2
32118: ARRAY
32119: PUSH
32120: LD_VAR 0 9
32124: LESS
32125: IFFALSE 32167
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32127: LD_ADDR_VAR 0 6
32131: PUSH
32132: LD_VAR 0 6
32136: PPUSH
32137: LD_VAR 0 6
32141: PUSH
32142: LD_INT 1
32144: PLUS
32145: PPUSH
32146: LD_VAR 0 7
32150: PUSH
32151: LD_VAR 0 9
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PPUSH
32160: CALL_OW 2
32164: ST_TO_ADDR
32165: GO 32247
// for j = 1 to result do
32167: LD_ADDR_VAR 0 8
32171: PUSH
32172: DOUBLE
32173: LD_INT 1
32175: DEC
32176: ST_TO_ADDR
32177: LD_VAR 0 6
32181: PUSH
32182: FOR_TO
32183: IFFALSE 32245
// begin if tmp < result [ j ] [ 2 ] then
32185: LD_VAR 0 9
32189: PUSH
32190: LD_VAR 0 6
32194: PUSH
32195: LD_VAR 0 8
32199: ARRAY
32200: PUSH
32201: LD_INT 2
32203: ARRAY
32204: LESS
32205: IFFALSE 32243
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32207: LD_ADDR_VAR 0 6
32211: PUSH
32212: LD_VAR 0 6
32216: PPUSH
32217: LD_VAR 0 8
32221: PPUSH
32222: LD_VAR 0 7
32226: PUSH
32227: LD_VAR 0 9
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PPUSH
32236: CALL_OW 2
32240: ST_TO_ADDR
// break ;
32241: GO 32245
// end ; end ;
32243: GO 32182
32245: POP
32246: POP
// end ; end ;
32247: GO 32046
32249: POP
32250: POP
// if result and not asc then
32251: LD_VAR 0 6
32255: PUSH
32256: LD_VAR 0 4
32260: NOT
32261: AND
32262: IFFALSE 32337
// begin tmp := result ;
32264: LD_ADDR_VAR 0 9
32268: PUSH
32269: LD_VAR 0 6
32273: ST_TO_ADDR
// for i = tmp downto 1 do
32274: LD_ADDR_VAR 0 7
32278: PUSH
32279: DOUBLE
32280: LD_VAR 0 9
32284: INC
32285: ST_TO_ADDR
32286: LD_INT 1
32288: PUSH
32289: FOR_DOWNTO
32290: IFFALSE 32335
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32292: LD_ADDR_VAR 0 6
32296: PUSH
32297: LD_VAR 0 6
32301: PPUSH
32302: LD_VAR 0 9
32306: PUSH
32307: LD_VAR 0 7
32311: MINUS
32312: PUSH
32313: LD_INT 1
32315: PLUS
32316: PPUSH
32317: LD_VAR 0 9
32321: PUSH
32322: LD_VAR 0 7
32326: ARRAY
32327: PPUSH
32328: CALL_OW 1
32332: ST_TO_ADDR
32333: GO 32289
32335: POP
32336: POP
// end ; tmp := [ ] ;
32337: LD_ADDR_VAR 0 9
32341: PUSH
32342: EMPTY
32343: ST_TO_ADDR
// if mode then
32344: LD_VAR 0 5
32348: IFFALSE 32417
// begin for i = 1 to result do
32350: LD_ADDR_VAR 0 7
32354: PUSH
32355: DOUBLE
32356: LD_INT 1
32358: DEC
32359: ST_TO_ADDR
32360: LD_VAR 0 6
32364: PUSH
32365: FOR_TO
32366: IFFALSE 32405
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32368: LD_ADDR_VAR 0 9
32372: PUSH
32373: LD_VAR 0 9
32377: PPUSH
32378: LD_VAR 0 7
32382: PPUSH
32383: LD_VAR 0 6
32387: PUSH
32388: LD_VAR 0 7
32392: ARRAY
32393: PUSH
32394: LD_INT 1
32396: ARRAY
32397: PPUSH
32398: CALL_OW 1
32402: ST_TO_ADDR
32403: GO 32365
32405: POP
32406: POP
// result := tmp ;
32407: LD_ADDR_VAR 0 6
32411: PUSH
32412: LD_VAR 0 9
32416: ST_TO_ADDR
// end ; end ;
32417: LD_VAR 0 6
32421: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32422: LD_INT 0
32424: PPUSH
32425: PPUSH
32426: PPUSH
32427: PPUSH
32428: PPUSH
32429: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32430: LD_ADDR_VAR 0 5
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: ST_TO_ADDR
// if not x or not y then
32452: LD_VAR 0 2
32456: NOT
32457: PUSH
32458: LD_VAR 0 3
32462: NOT
32463: OR
32464: IFFALSE 32468
// exit ;
32466: GO 34118
// if not range then
32468: LD_VAR 0 4
32472: NOT
32473: IFFALSE 32483
// range := 10 ;
32475: LD_ADDR_VAR 0 4
32479: PUSH
32480: LD_INT 10
32482: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32483: LD_ADDR_VAR 0 8
32487: PUSH
32488: LD_INT 81
32490: PUSH
32491: LD_VAR 0 1
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 92
32502: PUSH
32503: LD_VAR 0 2
32507: PUSH
32508: LD_VAR 0 3
32512: PUSH
32513: LD_VAR 0 4
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: LD_INT 21
32529: PUSH
32530: LD_INT 3
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: LIST
32545: PPUSH
32546: CALL_OW 69
32550: ST_TO_ADDR
// if not tmp then
32551: LD_VAR 0 8
32555: NOT
32556: IFFALSE 32560
// exit ;
32558: GO 34118
// for i in tmp do
32560: LD_ADDR_VAR 0 6
32564: PUSH
32565: LD_VAR 0 8
32569: PUSH
32570: FOR_IN
32571: IFFALSE 34093
// begin points := [ 0 , 0 , 0 ] ;
32573: LD_ADDR_VAR 0 9
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: LD_INT 0
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: LIST
32591: ST_TO_ADDR
// bpoints := 1 ;
32592: LD_ADDR_VAR 0 10
32596: PUSH
32597: LD_INT 1
32599: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32600: LD_VAR 0 6
32604: PPUSH
32605: CALL_OW 247
32609: PUSH
32610: LD_INT 1
32612: DOUBLE
32613: EQUAL
32614: IFTRUE 32618
32616: GO 33196
32618: POP
// begin if GetClass ( i ) = 1 then
32619: LD_VAR 0 6
32623: PPUSH
32624: CALL_OW 257
32628: PUSH
32629: LD_INT 1
32631: EQUAL
32632: IFFALSE 32653
// points := [ 10 , 5 , 3 ] ;
32634: LD_ADDR_VAR 0 9
32638: PUSH
32639: LD_INT 10
32641: PUSH
32642: LD_INT 5
32644: PUSH
32645: LD_INT 3
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32653: LD_VAR 0 6
32657: PPUSH
32658: CALL_OW 257
32662: PUSH
32663: LD_INT 2
32665: PUSH
32666: LD_INT 3
32668: PUSH
32669: LD_INT 4
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: IN
32677: IFFALSE 32698
// points := [ 3 , 2 , 1 ] ;
32679: LD_ADDR_VAR 0 9
32683: PUSH
32684: LD_INT 3
32686: PUSH
32687: LD_INT 2
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: LIST
32697: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32698: LD_VAR 0 6
32702: PPUSH
32703: CALL_OW 257
32707: PUSH
32708: LD_INT 5
32710: EQUAL
32711: IFFALSE 32732
// points := [ 130 , 5 , 2 ] ;
32713: LD_ADDR_VAR 0 9
32717: PUSH
32718: LD_INT 130
32720: PUSH
32721: LD_INT 5
32723: PUSH
32724: LD_INT 2
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: LIST
32731: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32732: LD_VAR 0 6
32736: PPUSH
32737: CALL_OW 257
32741: PUSH
32742: LD_INT 8
32744: EQUAL
32745: IFFALSE 32766
// points := [ 35 , 35 , 30 ] ;
32747: LD_ADDR_VAR 0 9
32751: PUSH
32752: LD_INT 35
32754: PUSH
32755: LD_INT 35
32757: PUSH
32758: LD_INT 30
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32766: LD_VAR 0 6
32770: PPUSH
32771: CALL_OW 257
32775: PUSH
32776: LD_INT 9
32778: EQUAL
32779: IFFALSE 32800
// points := [ 20 , 55 , 40 ] ;
32781: LD_ADDR_VAR 0 9
32785: PUSH
32786: LD_INT 20
32788: PUSH
32789: LD_INT 55
32791: PUSH
32792: LD_INT 40
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32800: LD_VAR 0 6
32804: PPUSH
32805: CALL_OW 257
32809: PUSH
32810: LD_INT 12
32812: PUSH
32813: LD_INT 16
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: IN
32820: IFFALSE 32841
// points := [ 5 , 3 , 2 ] ;
32822: LD_ADDR_VAR 0 9
32826: PUSH
32827: LD_INT 5
32829: PUSH
32830: LD_INT 3
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: LIST
32840: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32841: LD_VAR 0 6
32845: PPUSH
32846: CALL_OW 257
32850: PUSH
32851: LD_INT 17
32853: EQUAL
32854: IFFALSE 32875
// points := [ 100 , 50 , 75 ] ;
32856: LD_ADDR_VAR 0 9
32860: PUSH
32861: LD_INT 100
32863: PUSH
32864: LD_INT 50
32866: PUSH
32867: LD_INT 75
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32875: LD_VAR 0 6
32879: PPUSH
32880: CALL_OW 257
32884: PUSH
32885: LD_INT 15
32887: EQUAL
32888: IFFALSE 32909
// points := [ 10 , 5 , 3 ] ;
32890: LD_ADDR_VAR 0 9
32894: PUSH
32895: LD_INT 10
32897: PUSH
32898: LD_INT 5
32900: PUSH
32901: LD_INT 3
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32909: LD_VAR 0 6
32913: PPUSH
32914: CALL_OW 257
32918: PUSH
32919: LD_INT 14
32921: EQUAL
32922: IFFALSE 32943
// points := [ 10 , 0 , 0 ] ;
32924: LD_ADDR_VAR 0 9
32928: PUSH
32929: LD_INT 10
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32943: LD_VAR 0 6
32947: PPUSH
32948: CALL_OW 257
32952: PUSH
32953: LD_INT 11
32955: EQUAL
32956: IFFALSE 32977
// points := [ 30 , 10 , 5 ] ;
32958: LD_ADDR_VAR 0 9
32962: PUSH
32963: LD_INT 30
32965: PUSH
32966: LD_INT 10
32968: PUSH
32969: LD_INT 5
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32977: LD_VAR 0 1
32981: PPUSH
32982: LD_INT 5
32984: PPUSH
32985: CALL_OW 321
32989: PUSH
32990: LD_INT 2
32992: EQUAL
32993: IFFALSE 33010
// bpoints := bpoints * 1.8 ;
32995: LD_ADDR_VAR 0 10
32999: PUSH
33000: LD_VAR 0 10
33004: PUSH
33005: LD_REAL  1.80000000000000E+0000
33008: MUL
33009: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33010: LD_VAR 0 6
33014: PPUSH
33015: CALL_OW 257
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: LD_INT 3
33028: PUSH
33029: LD_INT 4
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: IN
33038: PUSH
33039: LD_VAR 0 1
33043: PPUSH
33044: LD_INT 51
33046: PPUSH
33047: CALL_OW 321
33051: PUSH
33052: LD_INT 2
33054: EQUAL
33055: AND
33056: IFFALSE 33073
// bpoints := bpoints * 1.2 ;
33058: LD_ADDR_VAR 0 10
33062: PUSH
33063: LD_VAR 0 10
33067: PUSH
33068: LD_REAL  1.20000000000000E+0000
33071: MUL
33072: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33073: LD_VAR 0 6
33077: PPUSH
33078: CALL_OW 257
33082: PUSH
33083: LD_INT 5
33085: PUSH
33086: LD_INT 7
33088: PUSH
33089: LD_INT 9
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: IN
33097: PUSH
33098: LD_VAR 0 1
33102: PPUSH
33103: LD_INT 52
33105: PPUSH
33106: CALL_OW 321
33110: PUSH
33111: LD_INT 2
33113: EQUAL
33114: AND
33115: IFFALSE 33132
// bpoints := bpoints * 1.5 ;
33117: LD_ADDR_VAR 0 10
33121: PUSH
33122: LD_VAR 0 10
33126: PUSH
33127: LD_REAL  1.50000000000000E+0000
33130: MUL
33131: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33132: LD_VAR 0 1
33136: PPUSH
33137: LD_INT 66
33139: PPUSH
33140: CALL_OW 321
33144: PUSH
33145: LD_INT 2
33147: EQUAL
33148: IFFALSE 33165
// bpoints := bpoints * 1.1 ;
33150: LD_ADDR_VAR 0 10
33154: PUSH
33155: LD_VAR 0 10
33159: PUSH
33160: LD_REAL  1.10000000000000E+0000
33163: MUL
33164: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33165: LD_ADDR_VAR 0 10
33169: PUSH
33170: LD_VAR 0 10
33174: PUSH
33175: LD_VAR 0 6
33179: PPUSH
33180: LD_INT 1
33182: PPUSH
33183: CALL_OW 259
33187: PUSH
33188: LD_REAL  1.15000000000000E+0000
33191: MUL
33192: MUL
33193: ST_TO_ADDR
// end ; unit_vehicle :
33194: GO 34022
33196: LD_INT 2
33198: DOUBLE
33199: EQUAL
33200: IFTRUE 33204
33202: GO 34010
33204: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33205: LD_VAR 0 6
33209: PPUSH
33210: CALL_OW 264
33214: PUSH
33215: LD_INT 2
33217: PUSH
33218: LD_INT 42
33220: PUSH
33221: LD_INT 24
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: IN
33229: IFFALSE 33250
// points := [ 25 , 5 , 3 ] ;
33231: LD_ADDR_VAR 0 9
33235: PUSH
33236: LD_INT 25
33238: PUSH
33239: LD_INT 5
33241: PUSH
33242: LD_INT 3
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: LIST
33249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33250: LD_VAR 0 6
33254: PPUSH
33255: CALL_OW 264
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: LD_INT 43
33265: PUSH
33266: LD_INT 25
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: IN
33274: IFFALSE 33295
// points := [ 40 , 15 , 5 ] ;
33276: LD_ADDR_VAR 0 9
33280: PUSH
33281: LD_INT 40
33283: PUSH
33284: LD_INT 15
33286: PUSH
33287: LD_INT 5
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: LIST
33294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33295: LD_VAR 0 6
33299: PPUSH
33300: CALL_OW 264
33304: PUSH
33305: LD_INT 3
33307: PUSH
33308: LD_INT 23
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: IN
33315: IFFALSE 33336
// points := [ 7 , 25 , 8 ] ;
33317: LD_ADDR_VAR 0 9
33321: PUSH
33322: LD_INT 7
33324: PUSH
33325: LD_INT 25
33327: PUSH
33328: LD_INT 8
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33336: LD_VAR 0 6
33340: PPUSH
33341: CALL_OW 264
33345: PUSH
33346: LD_INT 5
33348: PUSH
33349: LD_INT 27
33351: PUSH
33352: LD_INT 44
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: LIST
33359: IN
33360: IFFALSE 33381
// points := [ 14 , 50 , 16 ] ;
33362: LD_ADDR_VAR 0 9
33366: PUSH
33367: LD_INT 14
33369: PUSH
33370: LD_INT 50
33372: PUSH
33373: LD_INT 16
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: LIST
33380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33381: LD_VAR 0 6
33385: PPUSH
33386: CALL_OW 264
33390: PUSH
33391: LD_INT 6
33393: PUSH
33394: LD_INT 46
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: IN
33401: IFFALSE 33422
// points := [ 32 , 120 , 70 ] ;
33403: LD_ADDR_VAR 0 9
33407: PUSH
33408: LD_INT 32
33410: PUSH
33411: LD_INT 120
33413: PUSH
33414: LD_INT 70
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33422: LD_VAR 0 6
33426: PPUSH
33427: CALL_OW 264
33431: PUSH
33432: LD_INT 7
33434: PUSH
33435: LD_INT 28
33437: PUSH
33438: LD_INT 45
33440: PUSH
33441: LD_INT 92
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: IN
33450: IFFALSE 33471
// points := [ 35 , 20 , 45 ] ;
33452: LD_ADDR_VAR 0 9
33456: PUSH
33457: LD_INT 35
33459: PUSH
33460: LD_INT 20
33462: PUSH
33463: LD_INT 45
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33471: LD_VAR 0 6
33475: PPUSH
33476: CALL_OW 264
33480: PUSH
33481: LD_INT 47
33483: PUSH
33484: EMPTY
33485: LIST
33486: IN
33487: IFFALSE 33508
// points := [ 67 , 45 , 75 ] ;
33489: LD_ADDR_VAR 0 9
33493: PUSH
33494: LD_INT 67
33496: PUSH
33497: LD_INT 45
33499: PUSH
33500: LD_INT 75
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33508: LD_VAR 0 6
33512: PPUSH
33513: CALL_OW 264
33517: PUSH
33518: LD_INT 26
33520: PUSH
33521: EMPTY
33522: LIST
33523: IN
33524: IFFALSE 33545
// points := [ 120 , 30 , 80 ] ;
33526: LD_ADDR_VAR 0 9
33530: PUSH
33531: LD_INT 120
33533: PUSH
33534: LD_INT 30
33536: PUSH
33537: LD_INT 80
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: LIST
33544: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33545: LD_VAR 0 6
33549: PPUSH
33550: CALL_OW 264
33554: PUSH
33555: LD_INT 22
33557: PUSH
33558: EMPTY
33559: LIST
33560: IN
33561: IFFALSE 33582
// points := [ 40 , 1 , 1 ] ;
33563: LD_ADDR_VAR 0 9
33567: PUSH
33568: LD_INT 40
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33582: LD_VAR 0 6
33586: PPUSH
33587: CALL_OW 264
33591: PUSH
33592: LD_INT 29
33594: PUSH
33595: EMPTY
33596: LIST
33597: IN
33598: IFFALSE 33619
// points := [ 70 , 200 , 400 ] ;
33600: LD_ADDR_VAR 0 9
33604: PUSH
33605: LD_INT 70
33607: PUSH
33608: LD_INT 200
33610: PUSH
33611: LD_INT 400
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33619: LD_VAR 0 6
33623: PPUSH
33624: CALL_OW 264
33628: PUSH
33629: LD_INT 14
33631: PUSH
33632: LD_INT 53
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: IN
33639: IFFALSE 33660
// points := [ 40 , 10 , 20 ] ;
33641: LD_ADDR_VAR 0 9
33645: PUSH
33646: LD_INT 40
33648: PUSH
33649: LD_INT 10
33651: PUSH
33652: LD_INT 20
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33660: LD_VAR 0 6
33664: PPUSH
33665: CALL_OW 264
33669: PUSH
33670: LD_INT 9
33672: PUSH
33673: EMPTY
33674: LIST
33675: IN
33676: IFFALSE 33697
// points := [ 5 , 70 , 20 ] ;
33678: LD_ADDR_VAR 0 9
33682: PUSH
33683: LD_INT 5
33685: PUSH
33686: LD_INT 70
33688: PUSH
33689: LD_INT 20
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33697: LD_VAR 0 6
33701: PPUSH
33702: CALL_OW 264
33706: PUSH
33707: LD_INT 10
33709: PUSH
33710: EMPTY
33711: LIST
33712: IN
33713: IFFALSE 33734
// points := [ 35 , 110 , 70 ] ;
33715: LD_ADDR_VAR 0 9
33719: PUSH
33720: LD_INT 35
33722: PUSH
33723: LD_INT 110
33725: PUSH
33726: LD_INT 70
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: LIST
33733: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33734: LD_VAR 0 6
33738: PPUSH
33739: CALL_OW 265
33743: PUSH
33744: LD_INT 25
33746: EQUAL
33747: IFFALSE 33768
// points := [ 80 , 65 , 100 ] ;
33749: LD_ADDR_VAR 0 9
33753: PUSH
33754: LD_INT 80
33756: PUSH
33757: LD_INT 65
33759: PUSH
33760: LD_INT 100
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: LIST
33767: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33768: LD_VAR 0 6
33772: PPUSH
33773: CALL_OW 263
33777: PUSH
33778: LD_INT 1
33780: EQUAL
33781: IFFALSE 33816
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33783: LD_ADDR_VAR 0 10
33787: PUSH
33788: LD_VAR 0 10
33792: PUSH
33793: LD_VAR 0 6
33797: PPUSH
33798: CALL_OW 311
33802: PPUSH
33803: LD_INT 3
33805: PPUSH
33806: CALL_OW 259
33810: PUSH
33811: LD_INT 4
33813: MUL
33814: MUL
33815: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33816: LD_VAR 0 6
33820: PPUSH
33821: CALL_OW 263
33825: PUSH
33826: LD_INT 2
33828: EQUAL
33829: IFFALSE 33880
// begin j := IsControledBy ( i ) ;
33831: LD_ADDR_VAR 0 7
33835: PUSH
33836: LD_VAR 0 6
33840: PPUSH
33841: CALL_OW 312
33845: ST_TO_ADDR
// if j then
33846: LD_VAR 0 7
33850: IFFALSE 33880
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33852: LD_ADDR_VAR 0 10
33856: PUSH
33857: LD_VAR 0 10
33861: PUSH
33862: LD_VAR 0 7
33866: PPUSH
33867: LD_INT 3
33869: PPUSH
33870: CALL_OW 259
33874: PUSH
33875: LD_INT 3
33877: MUL
33878: MUL
33879: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33880: LD_VAR 0 6
33884: PPUSH
33885: CALL_OW 264
33889: PUSH
33890: LD_INT 5
33892: PUSH
33893: LD_INT 6
33895: PUSH
33896: LD_INT 46
33898: PUSH
33899: LD_INT 44
33901: PUSH
33902: LD_INT 47
33904: PUSH
33905: LD_INT 45
33907: PUSH
33908: LD_INT 28
33910: PUSH
33911: LD_INT 7
33913: PUSH
33914: LD_INT 27
33916: PUSH
33917: LD_INT 29
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: IN
33932: PUSH
33933: LD_VAR 0 1
33937: PPUSH
33938: LD_INT 52
33940: PPUSH
33941: CALL_OW 321
33945: PUSH
33946: LD_INT 2
33948: EQUAL
33949: AND
33950: IFFALSE 33967
// bpoints := bpoints * 1.2 ;
33952: LD_ADDR_VAR 0 10
33956: PUSH
33957: LD_VAR 0 10
33961: PUSH
33962: LD_REAL  1.20000000000000E+0000
33965: MUL
33966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33967: LD_VAR 0 6
33971: PPUSH
33972: CALL_OW 264
33976: PUSH
33977: LD_INT 6
33979: PUSH
33980: LD_INT 46
33982: PUSH
33983: LD_INT 47
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: IN
33991: IFFALSE 34008
// bpoints := bpoints * 1.2 ;
33993: LD_ADDR_VAR 0 10
33997: PUSH
33998: LD_VAR 0 10
34002: PUSH
34003: LD_REAL  1.20000000000000E+0000
34006: MUL
34007: ST_TO_ADDR
// end ; unit_building :
34008: GO 34022
34010: LD_INT 3
34012: DOUBLE
34013: EQUAL
34014: IFTRUE 34018
34016: GO 34021
34018: POP
// ; end ;
34019: GO 34022
34021: POP
// for j = 1 to 3 do
34022: LD_ADDR_VAR 0 7
34026: PUSH
34027: DOUBLE
34028: LD_INT 1
34030: DEC
34031: ST_TO_ADDR
34032: LD_INT 3
34034: PUSH
34035: FOR_TO
34036: IFFALSE 34089
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34038: LD_ADDR_VAR 0 5
34042: PUSH
34043: LD_VAR 0 5
34047: PPUSH
34048: LD_VAR 0 7
34052: PPUSH
34053: LD_VAR 0 5
34057: PUSH
34058: LD_VAR 0 7
34062: ARRAY
34063: PUSH
34064: LD_VAR 0 9
34068: PUSH
34069: LD_VAR 0 7
34073: ARRAY
34074: PUSH
34075: LD_VAR 0 10
34079: MUL
34080: PLUS
34081: PPUSH
34082: CALL_OW 1
34086: ST_TO_ADDR
34087: GO 34035
34089: POP
34090: POP
// end ;
34091: GO 32570
34093: POP
34094: POP
// result := Replace ( result , 4 , tmp ) ;
34095: LD_ADDR_VAR 0 5
34099: PUSH
34100: LD_VAR 0 5
34104: PPUSH
34105: LD_INT 4
34107: PPUSH
34108: LD_VAR 0 8
34112: PPUSH
34113: CALL_OW 1
34117: ST_TO_ADDR
// end ;
34118: LD_VAR 0 5
34122: RET
// export function DangerAtRange ( unit , range ) ; begin
34123: LD_INT 0
34125: PPUSH
// if not unit then
34126: LD_VAR 0 1
34130: NOT
34131: IFFALSE 34135
// exit ;
34133: GO 34180
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34135: LD_ADDR_VAR 0 3
34139: PUSH
34140: LD_VAR 0 1
34144: PPUSH
34145: CALL_OW 255
34149: PPUSH
34150: LD_VAR 0 1
34154: PPUSH
34155: CALL_OW 250
34159: PPUSH
34160: LD_VAR 0 1
34164: PPUSH
34165: CALL_OW 251
34169: PPUSH
34170: LD_VAR 0 2
34174: PPUSH
34175: CALL 32422 0 4
34179: ST_TO_ADDR
// end ;
34180: LD_VAR 0 3
34184: RET
// export function DangerInArea ( side , area ) ; begin
34185: LD_INT 0
34187: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34188: LD_ADDR_VAR 0 3
34192: PUSH
34193: LD_VAR 0 2
34197: PPUSH
34198: LD_INT 81
34200: PUSH
34201: LD_VAR 0 1
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PPUSH
34210: CALL_OW 70
34214: ST_TO_ADDR
// end ;
34215: LD_VAR 0 3
34219: RET
// export function IsExtension ( b ) ; begin
34220: LD_INT 0
34222: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34223: LD_ADDR_VAR 0 2
34227: PUSH
34228: LD_VAR 0 1
34232: PUSH
34233: LD_INT 23
34235: PUSH
34236: LD_INT 20
34238: PUSH
34239: LD_INT 22
34241: PUSH
34242: LD_INT 17
34244: PUSH
34245: LD_INT 24
34247: PUSH
34248: LD_INT 21
34250: PUSH
34251: LD_INT 19
34253: PUSH
34254: LD_INT 16
34256: PUSH
34257: LD_INT 25
34259: PUSH
34260: LD_INT 18
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: IN
34275: ST_TO_ADDR
// end ;
34276: LD_VAR 0 2
34280: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34281: LD_INT 0
34283: PPUSH
34284: PPUSH
34285: PPUSH
// result := [ ] ;
34286: LD_ADDR_VAR 0 4
34290: PUSH
34291: EMPTY
34292: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34293: LD_ADDR_VAR 0 5
34297: PUSH
34298: LD_VAR 0 2
34302: PPUSH
34303: LD_INT 21
34305: PUSH
34306: LD_INT 3
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PPUSH
34313: CALL_OW 70
34317: ST_TO_ADDR
// if not tmp then
34318: LD_VAR 0 5
34322: NOT
34323: IFFALSE 34327
// exit ;
34325: GO 34391
// if checkLink then
34327: LD_VAR 0 3
34331: IFFALSE 34381
// begin for i in tmp do
34333: LD_ADDR_VAR 0 6
34337: PUSH
34338: LD_VAR 0 5
34342: PUSH
34343: FOR_IN
34344: IFFALSE 34379
// if GetBase ( i ) <> base then
34346: LD_VAR 0 6
34350: PPUSH
34351: CALL_OW 274
34355: PUSH
34356: LD_VAR 0 1
34360: NONEQUAL
34361: IFFALSE 34377
// ComLinkToBase ( base , i ) ;
34363: LD_VAR 0 1
34367: PPUSH
34368: LD_VAR 0 6
34372: PPUSH
34373: CALL_OW 169
34377: GO 34343
34379: POP
34380: POP
// end ; result := tmp ;
34381: LD_ADDR_VAR 0 4
34385: PUSH
34386: LD_VAR 0 5
34390: ST_TO_ADDR
// end ;
34391: LD_VAR 0 4
34395: RET
// export function ComComplete ( units , b ) ; var i ; begin
34396: LD_INT 0
34398: PPUSH
34399: PPUSH
// if not units then
34400: LD_VAR 0 1
34404: NOT
34405: IFFALSE 34409
// exit ;
34407: GO 34499
// for i in units do
34409: LD_ADDR_VAR 0 4
34413: PUSH
34414: LD_VAR 0 1
34418: PUSH
34419: FOR_IN
34420: IFFALSE 34497
// if BuildingStatus ( b ) = bs_build then
34422: LD_VAR 0 2
34426: PPUSH
34427: CALL_OW 461
34431: PUSH
34432: LD_INT 1
34434: EQUAL
34435: IFFALSE 34495
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34437: LD_VAR 0 4
34441: PPUSH
34442: LD_STRING h
34444: PUSH
34445: LD_VAR 0 2
34449: PPUSH
34450: CALL_OW 250
34454: PUSH
34455: LD_VAR 0 2
34459: PPUSH
34460: CALL_OW 251
34464: PUSH
34465: LD_VAR 0 2
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: PUSH
34488: EMPTY
34489: LIST
34490: PPUSH
34491: CALL_OW 446
34495: GO 34419
34497: POP
34498: POP
// end ;
34499: LD_VAR 0 3
34503: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34504: LD_INT 0
34506: PPUSH
34507: PPUSH
34508: PPUSH
34509: PPUSH
34510: PPUSH
34511: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34512: LD_VAR 0 1
34516: NOT
34517: PUSH
34518: LD_VAR 0 1
34522: PPUSH
34523: CALL_OW 263
34527: PUSH
34528: LD_INT 2
34530: NONEQUAL
34531: OR
34532: IFFALSE 34536
// exit ;
34534: GO 34852
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34536: LD_ADDR_VAR 0 6
34540: PUSH
34541: LD_INT 22
34543: PUSH
34544: LD_VAR 0 1
34548: PPUSH
34549: CALL_OW 255
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: LD_INT 30
34563: PUSH
34564: LD_INT 36
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 34
34573: PUSH
34574: LD_INT 31
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: LIST
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PPUSH
34590: CALL_OW 69
34594: ST_TO_ADDR
// if not tmp then
34595: LD_VAR 0 6
34599: NOT
34600: IFFALSE 34604
// exit ;
34602: GO 34852
// result := [ ] ;
34604: LD_ADDR_VAR 0 2
34608: PUSH
34609: EMPTY
34610: ST_TO_ADDR
// for i in tmp do
34611: LD_ADDR_VAR 0 3
34615: PUSH
34616: LD_VAR 0 6
34620: PUSH
34621: FOR_IN
34622: IFFALSE 34693
// begin t := UnitsInside ( i ) ;
34624: LD_ADDR_VAR 0 4
34628: PUSH
34629: LD_VAR 0 3
34633: PPUSH
34634: CALL_OW 313
34638: ST_TO_ADDR
// if t then
34639: LD_VAR 0 4
34643: IFFALSE 34691
// for j in t do
34645: LD_ADDR_VAR 0 7
34649: PUSH
34650: LD_VAR 0 4
34654: PUSH
34655: FOR_IN
34656: IFFALSE 34689
// result := Replace ( result , result + 1 , j ) ;
34658: LD_ADDR_VAR 0 2
34662: PUSH
34663: LD_VAR 0 2
34667: PPUSH
34668: LD_VAR 0 2
34672: PUSH
34673: LD_INT 1
34675: PLUS
34676: PPUSH
34677: LD_VAR 0 7
34681: PPUSH
34682: CALL_OW 1
34686: ST_TO_ADDR
34687: GO 34655
34689: POP
34690: POP
// end ;
34691: GO 34621
34693: POP
34694: POP
// if not result then
34695: LD_VAR 0 2
34699: NOT
34700: IFFALSE 34704
// exit ;
34702: GO 34852
// mech := result [ 1 ] ;
34704: LD_ADDR_VAR 0 5
34708: PUSH
34709: LD_VAR 0 2
34713: PUSH
34714: LD_INT 1
34716: ARRAY
34717: ST_TO_ADDR
// if result > 1 then
34718: LD_VAR 0 2
34722: PUSH
34723: LD_INT 1
34725: GREATER
34726: IFFALSE 34838
// begin for i = 2 to result do
34728: LD_ADDR_VAR 0 3
34732: PUSH
34733: DOUBLE
34734: LD_INT 2
34736: DEC
34737: ST_TO_ADDR
34738: LD_VAR 0 2
34742: PUSH
34743: FOR_TO
34744: IFFALSE 34836
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34746: LD_ADDR_VAR 0 4
34750: PUSH
34751: LD_VAR 0 2
34755: PUSH
34756: LD_VAR 0 3
34760: ARRAY
34761: PPUSH
34762: LD_INT 3
34764: PPUSH
34765: CALL_OW 259
34769: PUSH
34770: LD_VAR 0 2
34774: PUSH
34775: LD_VAR 0 3
34779: ARRAY
34780: PPUSH
34781: CALL_OW 432
34785: MINUS
34786: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34787: LD_VAR 0 4
34791: PUSH
34792: LD_VAR 0 5
34796: PPUSH
34797: LD_INT 3
34799: PPUSH
34800: CALL_OW 259
34804: PUSH
34805: LD_VAR 0 5
34809: PPUSH
34810: CALL_OW 432
34814: MINUS
34815: GREATEREQUAL
34816: IFFALSE 34834
// mech := result [ i ] ;
34818: LD_ADDR_VAR 0 5
34822: PUSH
34823: LD_VAR 0 2
34827: PUSH
34828: LD_VAR 0 3
34832: ARRAY
34833: ST_TO_ADDR
// end ;
34834: GO 34743
34836: POP
34837: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34838: LD_VAR 0 1
34842: PPUSH
34843: LD_VAR 0 5
34847: PPUSH
34848: CALL_OW 135
// end ;
34852: LD_VAR 0 2
34856: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34857: LD_INT 0
34859: PPUSH
34860: PPUSH
34861: PPUSH
34862: PPUSH
34863: PPUSH
34864: PPUSH
34865: PPUSH
34866: PPUSH
34867: PPUSH
34868: PPUSH
34869: PPUSH
34870: PPUSH
34871: PPUSH
// result := [ ] ;
34872: LD_ADDR_VAR 0 7
34876: PUSH
34877: EMPTY
34878: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34879: LD_VAR 0 1
34883: PPUSH
34884: CALL_OW 266
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: LD_INT 1
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: IN
34899: NOT
34900: IFFALSE 34904
// exit ;
34902: GO 36538
// if name then
34904: LD_VAR 0 3
34908: IFFALSE 34924
// SetBName ( base_dep , name ) ;
34910: LD_VAR 0 1
34914: PPUSH
34915: LD_VAR 0 3
34919: PPUSH
34920: CALL_OW 500
// base := GetBase ( base_dep ) ;
34924: LD_ADDR_VAR 0 15
34928: PUSH
34929: LD_VAR 0 1
34933: PPUSH
34934: CALL_OW 274
34938: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34939: LD_ADDR_VAR 0 16
34943: PUSH
34944: LD_VAR 0 1
34948: PPUSH
34949: CALL_OW 255
34953: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34954: LD_ADDR_VAR 0 17
34958: PUSH
34959: LD_VAR 0 1
34963: PPUSH
34964: CALL_OW 248
34968: ST_TO_ADDR
// if sources then
34969: LD_VAR 0 5
34973: IFFALSE 35020
// for i = 1 to 3 do
34975: LD_ADDR_VAR 0 8
34979: PUSH
34980: DOUBLE
34981: LD_INT 1
34983: DEC
34984: ST_TO_ADDR
34985: LD_INT 3
34987: PUSH
34988: FOR_TO
34989: IFFALSE 35018
// AddResourceType ( base , i , sources [ i ] ) ;
34991: LD_VAR 0 15
34995: PPUSH
34996: LD_VAR 0 8
35000: PPUSH
35001: LD_VAR 0 5
35005: PUSH
35006: LD_VAR 0 8
35010: ARRAY
35011: PPUSH
35012: CALL_OW 276
35016: GO 34988
35018: POP
35019: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35020: LD_ADDR_VAR 0 18
35024: PUSH
35025: LD_VAR 0 15
35029: PPUSH
35030: LD_VAR 0 2
35034: PPUSH
35035: LD_INT 1
35037: PPUSH
35038: CALL 34281 0 3
35042: ST_TO_ADDR
// InitHc ;
35043: CALL_OW 19
// InitUc ;
35047: CALL_OW 18
// uc_side := side ;
35051: LD_ADDR_OWVAR 20
35055: PUSH
35056: LD_VAR 0 16
35060: ST_TO_ADDR
// uc_nation := nation ;
35061: LD_ADDR_OWVAR 21
35065: PUSH
35066: LD_VAR 0 17
35070: ST_TO_ADDR
// if buildings then
35071: LD_VAR 0 18
35075: IFFALSE 36397
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35077: LD_ADDR_VAR 0 19
35081: PUSH
35082: LD_VAR 0 18
35086: PPUSH
35087: LD_INT 2
35089: PUSH
35090: LD_INT 30
35092: PUSH
35093: LD_INT 29
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 30
35102: PUSH
35103: LD_INT 30
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: LIST
35114: PPUSH
35115: CALL_OW 72
35119: ST_TO_ADDR
// if tmp then
35120: LD_VAR 0 19
35124: IFFALSE 35172
// for i in tmp do
35126: LD_ADDR_VAR 0 8
35130: PUSH
35131: LD_VAR 0 19
35135: PUSH
35136: FOR_IN
35137: IFFALSE 35170
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35139: LD_VAR 0 8
35143: PPUSH
35144: CALL_OW 250
35148: PPUSH
35149: LD_VAR 0 8
35153: PPUSH
35154: CALL_OW 251
35158: PPUSH
35159: LD_VAR 0 16
35163: PPUSH
35164: CALL_OW 441
35168: GO 35136
35170: POP
35171: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35172: LD_VAR 0 18
35176: PPUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 30
35182: PUSH
35183: LD_INT 32
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 30
35192: PUSH
35193: LD_INT 33
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: PPUSH
35205: CALL_OW 72
35209: IFFALSE 35297
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35211: LD_ADDR_VAR 0 8
35215: PUSH
35216: LD_VAR 0 18
35220: PPUSH
35221: LD_INT 2
35223: PUSH
35224: LD_INT 30
35226: PUSH
35227: LD_INT 32
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 30
35236: PUSH
35237: LD_INT 33
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: PPUSH
35249: CALL_OW 72
35253: PUSH
35254: FOR_IN
35255: IFFALSE 35295
// begin if not GetBWeapon ( i ) then
35257: LD_VAR 0 8
35261: PPUSH
35262: CALL_OW 269
35266: NOT
35267: IFFALSE 35293
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35269: LD_VAR 0 8
35273: PPUSH
35274: LD_VAR 0 8
35278: PPUSH
35279: LD_VAR 0 2
35283: PPUSH
35284: CALL 36543 0 2
35288: PPUSH
35289: CALL_OW 431
// end ;
35293: GO 35254
35295: POP
35296: POP
// end ; for i = 1 to personel do
35297: LD_ADDR_VAR 0 8
35301: PUSH
35302: DOUBLE
35303: LD_INT 1
35305: DEC
35306: ST_TO_ADDR
35307: LD_VAR 0 6
35311: PUSH
35312: FOR_TO
35313: IFFALSE 36377
// begin if i > 4 then
35315: LD_VAR 0 8
35319: PUSH
35320: LD_INT 4
35322: GREATER
35323: IFFALSE 35327
// break ;
35325: GO 36377
// case i of 1 :
35327: LD_VAR 0 8
35331: PUSH
35332: LD_INT 1
35334: DOUBLE
35335: EQUAL
35336: IFTRUE 35340
35338: GO 35420
35340: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35341: LD_ADDR_VAR 0 12
35345: PUSH
35346: LD_VAR 0 18
35350: PPUSH
35351: LD_INT 22
35353: PUSH
35354: LD_VAR 0 16
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 58
35365: PUSH
35366: EMPTY
35367: LIST
35368: PUSH
35369: LD_INT 2
35371: PUSH
35372: LD_INT 30
35374: PUSH
35375: LD_INT 32
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 30
35384: PUSH
35385: LD_INT 4
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 30
35394: PUSH
35395: LD_INT 5
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: PPUSH
35413: CALL_OW 72
35417: ST_TO_ADDR
35418: GO 35642
35420: LD_INT 2
35422: DOUBLE
35423: EQUAL
35424: IFTRUE 35428
35426: GO 35490
35428: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35429: LD_ADDR_VAR 0 12
35433: PUSH
35434: LD_VAR 0 18
35438: PPUSH
35439: LD_INT 22
35441: PUSH
35442: LD_VAR 0 16
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: LD_INT 30
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 30
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: LIST
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PPUSH
35483: CALL_OW 72
35487: ST_TO_ADDR
35488: GO 35642
35490: LD_INT 3
35492: DOUBLE
35493: EQUAL
35494: IFTRUE 35498
35496: GO 35560
35498: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35499: LD_ADDR_VAR 0 12
35503: PUSH
35504: LD_VAR 0 18
35508: PPUSH
35509: LD_INT 22
35511: PUSH
35512: LD_VAR 0 16
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: LD_INT 30
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 30
35536: PUSH
35537: LD_INT 3
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PPUSH
35553: CALL_OW 72
35557: ST_TO_ADDR
35558: GO 35642
35560: LD_INT 4
35562: DOUBLE
35563: EQUAL
35564: IFTRUE 35568
35566: GO 35641
35568: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35569: LD_ADDR_VAR 0 12
35573: PUSH
35574: LD_VAR 0 18
35578: PPUSH
35579: LD_INT 22
35581: PUSH
35582: LD_VAR 0 16
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 2
35593: PUSH
35594: LD_INT 30
35596: PUSH
35597: LD_INT 6
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 30
35606: PUSH
35607: LD_INT 7
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 30
35616: PUSH
35617: LD_INT 8
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PPUSH
35634: CALL_OW 72
35638: ST_TO_ADDR
35639: GO 35642
35641: POP
// if i = 1 then
35642: LD_VAR 0 8
35646: PUSH
35647: LD_INT 1
35649: EQUAL
35650: IFFALSE 35761
// begin tmp := [ ] ;
35652: LD_ADDR_VAR 0 19
35656: PUSH
35657: EMPTY
35658: ST_TO_ADDR
// for j in f do
35659: LD_ADDR_VAR 0 9
35663: PUSH
35664: LD_VAR 0 12
35668: PUSH
35669: FOR_IN
35670: IFFALSE 35743
// if GetBType ( j ) = b_bunker then
35672: LD_VAR 0 9
35676: PPUSH
35677: CALL_OW 266
35681: PUSH
35682: LD_INT 32
35684: EQUAL
35685: IFFALSE 35712
// tmp := Insert ( tmp , 1 , j ) else
35687: LD_ADDR_VAR 0 19
35691: PUSH
35692: LD_VAR 0 19
35696: PPUSH
35697: LD_INT 1
35699: PPUSH
35700: LD_VAR 0 9
35704: PPUSH
35705: CALL_OW 2
35709: ST_TO_ADDR
35710: GO 35741
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35712: LD_ADDR_VAR 0 19
35716: PUSH
35717: LD_VAR 0 19
35721: PPUSH
35722: LD_VAR 0 19
35726: PUSH
35727: LD_INT 1
35729: PLUS
35730: PPUSH
35731: LD_VAR 0 9
35735: PPUSH
35736: CALL_OW 2
35740: ST_TO_ADDR
35741: GO 35669
35743: POP
35744: POP
// if tmp then
35745: LD_VAR 0 19
35749: IFFALSE 35761
// f := tmp ;
35751: LD_ADDR_VAR 0 12
35755: PUSH
35756: LD_VAR 0 19
35760: ST_TO_ADDR
// end ; x := personel [ i ] ;
35761: LD_ADDR_VAR 0 13
35765: PUSH
35766: LD_VAR 0 6
35770: PUSH
35771: LD_VAR 0 8
35775: ARRAY
35776: ST_TO_ADDR
// if x = - 1 then
35777: LD_VAR 0 13
35781: PUSH
35782: LD_INT 1
35784: NEG
35785: EQUAL
35786: IFFALSE 35995
// begin for j in f do
35788: LD_ADDR_VAR 0 9
35792: PUSH
35793: LD_VAR 0 12
35797: PUSH
35798: FOR_IN
35799: IFFALSE 35991
// repeat InitHc ;
35801: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35805: LD_VAR 0 9
35809: PPUSH
35810: CALL_OW 266
35814: PUSH
35815: LD_INT 5
35817: EQUAL
35818: IFFALSE 35888
// begin if UnitsInside ( j ) < 3 then
35820: LD_VAR 0 9
35824: PPUSH
35825: CALL_OW 313
35829: PUSH
35830: LD_INT 3
35832: LESS
35833: IFFALSE 35869
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35835: LD_INT 0
35837: PPUSH
35838: LD_INT 5
35840: PUSH
35841: LD_INT 8
35843: PUSH
35844: LD_INT 9
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: PUSH
35852: LD_VAR 0 17
35856: ARRAY
35857: PPUSH
35858: LD_VAR 0 4
35862: PPUSH
35863: CALL_OW 380
35867: GO 35886
// PrepareHuman ( false , i , skill ) ;
35869: LD_INT 0
35871: PPUSH
35872: LD_VAR 0 8
35876: PPUSH
35877: LD_VAR 0 4
35881: PPUSH
35882: CALL_OW 380
// end else
35886: GO 35905
// PrepareHuman ( false , i , skill ) ;
35888: LD_INT 0
35890: PPUSH
35891: LD_VAR 0 8
35895: PPUSH
35896: LD_VAR 0 4
35900: PPUSH
35901: CALL_OW 380
// un := CreateHuman ;
35905: LD_ADDR_VAR 0 14
35909: PUSH
35910: CALL_OW 44
35914: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35915: LD_ADDR_VAR 0 7
35919: PUSH
35920: LD_VAR 0 7
35924: PPUSH
35925: LD_INT 1
35927: PPUSH
35928: LD_VAR 0 14
35932: PPUSH
35933: CALL_OW 2
35937: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35938: LD_VAR 0 14
35942: PPUSH
35943: LD_VAR 0 9
35947: PPUSH
35948: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35952: LD_VAR 0 9
35956: PPUSH
35957: CALL_OW 313
35961: PUSH
35962: LD_INT 6
35964: EQUAL
35965: PUSH
35966: LD_VAR 0 9
35970: PPUSH
35971: CALL_OW 266
35975: PUSH
35976: LD_INT 32
35978: PUSH
35979: LD_INT 31
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: IN
35986: OR
35987: IFFALSE 35801
35989: GO 35798
35991: POP
35992: POP
// end else
35993: GO 36375
// for j = 1 to x do
35995: LD_ADDR_VAR 0 9
35999: PUSH
36000: DOUBLE
36001: LD_INT 1
36003: DEC
36004: ST_TO_ADDR
36005: LD_VAR 0 13
36009: PUSH
36010: FOR_TO
36011: IFFALSE 36373
// begin InitHc ;
36013: CALL_OW 19
// if not f then
36017: LD_VAR 0 12
36021: NOT
36022: IFFALSE 36111
// begin PrepareHuman ( false , i , skill ) ;
36024: LD_INT 0
36026: PPUSH
36027: LD_VAR 0 8
36031: PPUSH
36032: LD_VAR 0 4
36036: PPUSH
36037: CALL_OW 380
// un := CreateHuman ;
36041: LD_ADDR_VAR 0 14
36045: PUSH
36046: CALL_OW 44
36050: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36051: LD_ADDR_VAR 0 7
36055: PUSH
36056: LD_VAR 0 7
36060: PPUSH
36061: LD_INT 1
36063: PPUSH
36064: LD_VAR 0 14
36068: PPUSH
36069: CALL_OW 2
36073: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36074: LD_VAR 0 14
36078: PPUSH
36079: LD_VAR 0 1
36083: PPUSH
36084: CALL_OW 250
36088: PPUSH
36089: LD_VAR 0 1
36093: PPUSH
36094: CALL_OW 251
36098: PPUSH
36099: LD_INT 10
36101: PPUSH
36102: LD_INT 0
36104: PPUSH
36105: CALL_OW 50
// continue ;
36109: GO 36010
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36111: LD_VAR 0 12
36115: PUSH
36116: LD_INT 1
36118: ARRAY
36119: PPUSH
36120: CALL_OW 313
36124: PUSH
36125: LD_VAR 0 12
36129: PUSH
36130: LD_INT 1
36132: ARRAY
36133: PPUSH
36134: CALL_OW 266
36138: PUSH
36139: LD_INT 32
36141: PUSH
36142: LD_INT 31
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: IN
36149: AND
36150: PUSH
36151: LD_VAR 0 12
36155: PUSH
36156: LD_INT 1
36158: ARRAY
36159: PPUSH
36160: CALL_OW 313
36164: PUSH
36165: LD_INT 6
36167: EQUAL
36168: OR
36169: IFFALSE 36189
// f := Delete ( f , 1 ) ;
36171: LD_ADDR_VAR 0 12
36175: PUSH
36176: LD_VAR 0 12
36180: PPUSH
36181: LD_INT 1
36183: PPUSH
36184: CALL_OW 3
36188: ST_TO_ADDR
// if not f then
36189: LD_VAR 0 12
36193: NOT
36194: IFFALSE 36212
// begin x := x + 2 ;
36196: LD_ADDR_VAR 0 13
36200: PUSH
36201: LD_VAR 0 13
36205: PUSH
36206: LD_INT 2
36208: PLUS
36209: ST_TO_ADDR
// continue ;
36210: GO 36010
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36212: LD_VAR 0 12
36216: PUSH
36217: LD_INT 1
36219: ARRAY
36220: PPUSH
36221: CALL_OW 266
36225: PUSH
36226: LD_INT 5
36228: EQUAL
36229: IFFALSE 36303
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36231: LD_VAR 0 12
36235: PUSH
36236: LD_INT 1
36238: ARRAY
36239: PPUSH
36240: CALL_OW 313
36244: PUSH
36245: LD_INT 3
36247: LESS
36248: IFFALSE 36284
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36250: LD_INT 0
36252: PPUSH
36253: LD_INT 5
36255: PUSH
36256: LD_INT 8
36258: PUSH
36259: LD_INT 9
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: LIST
36266: PUSH
36267: LD_VAR 0 17
36271: ARRAY
36272: PPUSH
36273: LD_VAR 0 4
36277: PPUSH
36278: CALL_OW 380
36282: GO 36301
// PrepareHuman ( false , i , skill ) ;
36284: LD_INT 0
36286: PPUSH
36287: LD_VAR 0 8
36291: PPUSH
36292: LD_VAR 0 4
36296: PPUSH
36297: CALL_OW 380
// end else
36301: GO 36320
// PrepareHuman ( false , i , skill ) ;
36303: LD_INT 0
36305: PPUSH
36306: LD_VAR 0 8
36310: PPUSH
36311: LD_VAR 0 4
36315: PPUSH
36316: CALL_OW 380
// un := CreateHuman ;
36320: LD_ADDR_VAR 0 14
36324: PUSH
36325: CALL_OW 44
36329: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36330: LD_ADDR_VAR 0 7
36334: PUSH
36335: LD_VAR 0 7
36339: PPUSH
36340: LD_INT 1
36342: PPUSH
36343: LD_VAR 0 14
36347: PPUSH
36348: CALL_OW 2
36352: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36353: LD_VAR 0 14
36357: PPUSH
36358: LD_VAR 0 12
36362: PUSH
36363: LD_INT 1
36365: ARRAY
36366: PPUSH
36367: CALL_OW 52
// end ;
36371: GO 36010
36373: POP
36374: POP
// end ;
36375: GO 35312
36377: POP
36378: POP
// result := result ^ buildings ;
36379: LD_ADDR_VAR 0 7
36383: PUSH
36384: LD_VAR 0 7
36388: PUSH
36389: LD_VAR 0 18
36393: ADD
36394: ST_TO_ADDR
// end else
36395: GO 36538
// begin for i = 1 to personel do
36397: LD_ADDR_VAR 0 8
36401: PUSH
36402: DOUBLE
36403: LD_INT 1
36405: DEC
36406: ST_TO_ADDR
36407: LD_VAR 0 6
36411: PUSH
36412: FOR_TO
36413: IFFALSE 36536
// begin if i > 4 then
36415: LD_VAR 0 8
36419: PUSH
36420: LD_INT 4
36422: GREATER
36423: IFFALSE 36427
// break ;
36425: GO 36536
// x := personel [ i ] ;
36427: LD_ADDR_VAR 0 13
36431: PUSH
36432: LD_VAR 0 6
36436: PUSH
36437: LD_VAR 0 8
36441: ARRAY
36442: ST_TO_ADDR
// if x = - 1 then
36443: LD_VAR 0 13
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: EQUAL
36452: IFFALSE 36456
// continue ;
36454: GO 36412
// PrepareHuman ( false , i , skill ) ;
36456: LD_INT 0
36458: PPUSH
36459: LD_VAR 0 8
36463: PPUSH
36464: LD_VAR 0 4
36468: PPUSH
36469: CALL_OW 380
// un := CreateHuman ;
36473: LD_ADDR_VAR 0 14
36477: PUSH
36478: CALL_OW 44
36482: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36483: LD_VAR 0 14
36487: PPUSH
36488: LD_VAR 0 1
36492: PPUSH
36493: CALL_OW 250
36497: PPUSH
36498: LD_VAR 0 1
36502: PPUSH
36503: CALL_OW 251
36507: PPUSH
36508: LD_INT 10
36510: PPUSH
36511: LD_INT 0
36513: PPUSH
36514: CALL_OW 50
// result := result ^ un ;
36518: LD_ADDR_VAR 0 7
36522: PUSH
36523: LD_VAR 0 7
36527: PUSH
36528: LD_VAR 0 14
36532: ADD
36533: ST_TO_ADDR
// end ;
36534: GO 36412
36536: POP
36537: POP
// end ; end ;
36538: LD_VAR 0 7
36542: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36543: LD_INT 0
36545: PPUSH
36546: PPUSH
36547: PPUSH
36548: PPUSH
36549: PPUSH
36550: PPUSH
36551: PPUSH
36552: PPUSH
36553: PPUSH
36554: PPUSH
36555: PPUSH
36556: PPUSH
36557: PPUSH
36558: PPUSH
36559: PPUSH
36560: PPUSH
// result := false ;
36561: LD_ADDR_VAR 0 3
36565: PUSH
36566: LD_INT 0
36568: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36569: LD_VAR 0 1
36573: NOT
36574: PUSH
36575: LD_VAR 0 1
36579: PPUSH
36580: CALL_OW 266
36584: PUSH
36585: LD_INT 32
36587: PUSH
36588: LD_INT 33
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: IN
36595: NOT
36596: OR
36597: IFFALSE 36601
// exit ;
36599: GO 37710
// nat := GetNation ( tower ) ;
36601: LD_ADDR_VAR 0 12
36605: PUSH
36606: LD_VAR 0 1
36610: PPUSH
36611: CALL_OW 248
36615: ST_TO_ADDR
// side := GetSide ( tower ) ;
36616: LD_ADDR_VAR 0 16
36620: PUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 255
36630: ST_TO_ADDR
// x := GetX ( tower ) ;
36631: LD_ADDR_VAR 0 10
36635: PUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 250
36645: ST_TO_ADDR
// y := GetY ( tower ) ;
36646: LD_ADDR_VAR 0 11
36650: PUSH
36651: LD_VAR 0 1
36655: PPUSH
36656: CALL_OW 251
36660: ST_TO_ADDR
// if not x or not y then
36661: LD_VAR 0 10
36665: NOT
36666: PUSH
36667: LD_VAR 0 11
36671: NOT
36672: OR
36673: IFFALSE 36677
// exit ;
36675: GO 37710
// weapon := 0 ;
36677: LD_ADDR_VAR 0 18
36681: PUSH
36682: LD_INT 0
36684: ST_TO_ADDR
// fac_list := [ ] ;
36685: LD_ADDR_VAR 0 17
36689: PUSH
36690: EMPTY
36691: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36692: LD_ADDR_VAR 0 6
36696: PUSH
36697: LD_VAR 0 1
36701: PPUSH
36702: CALL_OW 274
36706: PPUSH
36707: LD_VAR 0 2
36711: PPUSH
36712: LD_INT 0
36714: PPUSH
36715: CALL 34281 0 3
36719: PPUSH
36720: LD_INT 30
36722: PUSH
36723: LD_INT 3
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PPUSH
36730: CALL_OW 72
36734: ST_TO_ADDR
// if not factories then
36735: LD_VAR 0 6
36739: NOT
36740: IFFALSE 36744
// exit ;
36742: GO 37710
// for i in factories do
36744: LD_ADDR_VAR 0 8
36748: PUSH
36749: LD_VAR 0 6
36753: PUSH
36754: FOR_IN
36755: IFFALSE 36780
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36757: LD_ADDR_VAR 0 17
36761: PUSH
36762: LD_VAR 0 17
36766: PUSH
36767: LD_VAR 0 8
36771: PPUSH
36772: CALL_OW 478
36776: UNION
36777: ST_TO_ADDR
36778: GO 36754
36780: POP
36781: POP
// if not fac_list then
36782: LD_VAR 0 17
36786: NOT
36787: IFFALSE 36791
// exit ;
36789: GO 37710
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36791: LD_ADDR_VAR 0 5
36795: PUSH
36796: LD_INT 4
36798: PUSH
36799: LD_INT 5
36801: PUSH
36802: LD_INT 9
36804: PUSH
36805: LD_INT 10
36807: PUSH
36808: LD_INT 6
36810: PUSH
36811: LD_INT 7
36813: PUSH
36814: LD_INT 11
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 27
36828: PUSH
36829: LD_INT 28
36831: PUSH
36832: LD_INT 26
36834: PUSH
36835: LD_INT 30
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 43
36846: PUSH
36847: LD_INT 44
36849: PUSH
36850: LD_INT 46
36852: PUSH
36853: LD_INT 45
36855: PUSH
36856: LD_INT 47
36858: PUSH
36859: LD_INT 49
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: PUSH
36875: LD_VAR 0 12
36879: ARRAY
36880: ST_TO_ADDR
// list := list isect fac_list ;
36881: LD_ADDR_VAR 0 5
36885: PUSH
36886: LD_VAR 0 5
36890: PUSH
36891: LD_VAR 0 17
36895: ISECT
36896: ST_TO_ADDR
// if not list then
36897: LD_VAR 0 5
36901: NOT
36902: IFFALSE 36906
// exit ;
36904: GO 37710
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36906: LD_VAR 0 12
36910: PUSH
36911: LD_INT 3
36913: EQUAL
36914: PUSH
36915: LD_INT 49
36917: PUSH
36918: LD_VAR 0 5
36922: IN
36923: AND
36924: PUSH
36925: LD_INT 31
36927: PPUSH
36928: LD_VAR 0 16
36932: PPUSH
36933: CALL_OW 321
36937: PUSH
36938: LD_INT 2
36940: EQUAL
36941: AND
36942: IFFALSE 37002
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36944: LD_INT 22
36946: PUSH
36947: LD_VAR 0 16
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 35
36958: PUSH
36959: LD_INT 49
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 91
36968: PUSH
36969: LD_VAR 0 1
36973: PUSH
36974: LD_INT 10
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: LIST
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: PPUSH
36987: CALL_OW 69
36991: NOT
36992: IFFALSE 37002
// weapon := ru_time_lapser ;
36994: LD_ADDR_VAR 0 18
36998: PUSH
36999: LD_INT 49
37001: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37002: LD_VAR 0 12
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: IN
37017: PUSH
37018: LD_INT 11
37020: PUSH
37021: LD_VAR 0 5
37025: IN
37026: PUSH
37027: LD_INT 30
37029: PUSH
37030: LD_VAR 0 5
37034: IN
37035: OR
37036: AND
37037: PUSH
37038: LD_INT 6
37040: PPUSH
37041: LD_VAR 0 16
37045: PPUSH
37046: CALL_OW 321
37050: PUSH
37051: LD_INT 2
37053: EQUAL
37054: AND
37055: IFFALSE 37220
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37057: LD_INT 22
37059: PUSH
37060: LD_VAR 0 16
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: LD_INT 35
37074: PUSH
37075: LD_INT 11
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 35
37084: PUSH
37085: LD_INT 30
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 91
37099: PUSH
37100: LD_VAR 0 1
37104: PUSH
37105: LD_INT 18
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: LIST
37117: PPUSH
37118: CALL_OW 69
37122: NOT
37123: PUSH
37124: LD_INT 22
37126: PUSH
37127: LD_VAR 0 16
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: LD_INT 30
37141: PUSH
37142: LD_INT 32
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 30
37151: PUSH
37152: LD_INT 33
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 91
37166: PUSH
37167: LD_VAR 0 1
37171: PUSH
37172: LD_INT 12
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: LIST
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: LIST
37184: PUSH
37185: EMPTY
37186: LIST
37187: PPUSH
37188: CALL_OW 69
37192: PUSH
37193: LD_INT 2
37195: GREATER
37196: AND
37197: IFFALSE 37220
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37199: LD_ADDR_VAR 0 18
37203: PUSH
37204: LD_INT 11
37206: PUSH
37207: LD_INT 30
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_VAR 0 12
37218: ARRAY
37219: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37220: LD_VAR 0 18
37224: NOT
37225: PUSH
37226: LD_INT 40
37228: PPUSH
37229: LD_VAR 0 16
37233: PPUSH
37234: CALL_OW 321
37238: PUSH
37239: LD_INT 2
37241: EQUAL
37242: AND
37243: PUSH
37244: LD_INT 7
37246: PUSH
37247: LD_VAR 0 5
37251: IN
37252: PUSH
37253: LD_INT 28
37255: PUSH
37256: LD_VAR 0 5
37260: IN
37261: OR
37262: PUSH
37263: LD_INT 45
37265: PUSH
37266: LD_VAR 0 5
37270: IN
37271: OR
37272: AND
37273: IFFALSE 37527
// begin hex := GetHexInfo ( x , y ) ;
37275: LD_ADDR_VAR 0 4
37279: PUSH
37280: LD_VAR 0 10
37284: PPUSH
37285: LD_VAR 0 11
37289: PPUSH
37290: CALL_OW 546
37294: ST_TO_ADDR
// if hex [ 1 ] then
37295: LD_VAR 0 4
37299: PUSH
37300: LD_INT 1
37302: ARRAY
37303: IFFALSE 37307
// exit ;
37305: GO 37710
// height := hex [ 2 ] ;
37307: LD_ADDR_VAR 0 15
37311: PUSH
37312: LD_VAR 0 4
37316: PUSH
37317: LD_INT 2
37319: ARRAY
37320: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37321: LD_ADDR_VAR 0 14
37325: PUSH
37326: LD_INT 0
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: LD_INT 3
37334: PUSH
37335: LD_INT 5
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: ST_TO_ADDR
// for i in tmp do
37344: LD_ADDR_VAR 0 8
37348: PUSH
37349: LD_VAR 0 14
37353: PUSH
37354: FOR_IN
37355: IFFALSE 37525
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37357: LD_ADDR_VAR 0 9
37361: PUSH
37362: LD_VAR 0 10
37366: PPUSH
37367: LD_VAR 0 8
37371: PPUSH
37372: LD_INT 5
37374: PPUSH
37375: CALL_OW 272
37379: PUSH
37380: LD_VAR 0 11
37384: PPUSH
37385: LD_VAR 0 8
37389: PPUSH
37390: LD_INT 5
37392: PPUSH
37393: CALL_OW 273
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37402: LD_VAR 0 9
37406: PUSH
37407: LD_INT 1
37409: ARRAY
37410: PPUSH
37411: LD_VAR 0 9
37415: PUSH
37416: LD_INT 2
37418: ARRAY
37419: PPUSH
37420: CALL_OW 488
37424: IFFALSE 37523
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37426: LD_ADDR_VAR 0 4
37430: PUSH
37431: LD_VAR 0 9
37435: PUSH
37436: LD_INT 1
37438: ARRAY
37439: PPUSH
37440: LD_VAR 0 9
37444: PUSH
37445: LD_INT 2
37447: ARRAY
37448: PPUSH
37449: CALL_OW 546
37453: ST_TO_ADDR
// if hex [ 1 ] then
37454: LD_VAR 0 4
37458: PUSH
37459: LD_INT 1
37461: ARRAY
37462: IFFALSE 37466
// continue ;
37464: GO 37354
// h := hex [ 2 ] ;
37466: LD_ADDR_VAR 0 13
37470: PUSH
37471: LD_VAR 0 4
37475: PUSH
37476: LD_INT 2
37478: ARRAY
37479: ST_TO_ADDR
// if h + 7 < height then
37480: LD_VAR 0 13
37484: PUSH
37485: LD_INT 7
37487: PLUS
37488: PUSH
37489: LD_VAR 0 15
37493: LESS
37494: IFFALSE 37523
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37496: LD_ADDR_VAR 0 18
37500: PUSH
37501: LD_INT 7
37503: PUSH
37504: LD_INT 28
37506: PUSH
37507: LD_INT 45
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: PUSH
37515: LD_VAR 0 12
37519: ARRAY
37520: ST_TO_ADDR
// break ;
37521: GO 37525
// end ; end ; end ;
37523: GO 37354
37525: POP
37526: POP
// end ; if not weapon then
37527: LD_VAR 0 18
37531: NOT
37532: IFFALSE 37592
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37534: LD_ADDR_VAR 0 5
37538: PUSH
37539: LD_VAR 0 5
37543: PUSH
37544: LD_INT 11
37546: PUSH
37547: LD_INT 30
37549: PUSH
37550: LD_INT 49
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: LIST
37557: DIFF
37558: ST_TO_ADDR
// if not list then
37559: LD_VAR 0 5
37563: NOT
37564: IFFALSE 37568
// exit ;
37566: GO 37710
// weapon := list [ rand ( 1 , list ) ] ;
37568: LD_ADDR_VAR 0 18
37572: PUSH
37573: LD_VAR 0 5
37577: PUSH
37578: LD_INT 1
37580: PPUSH
37581: LD_VAR 0 5
37585: PPUSH
37586: CALL_OW 12
37590: ARRAY
37591: ST_TO_ADDR
// end ; if weapon then
37592: LD_VAR 0 18
37596: IFFALSE 37710
// begin tmp := CostOfWeapon ( weapon ) ;
37598: LD_ADDR_VAR 0 14
37602: PUSH
37603: LD_VAR 0 18
37607: PPUSH
37608: CALL_OW 451
37612: ST_TO_ADDR
// j := GetBase ( tower ) ;
37613: LD_ADDR_VAR 0 9
37617: PUSH
37618: LD_VAR 0 1
37622: PPUSH
37623: CALL_OW 274
37627: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37628: LD_VAR 0 9
37632: PPUSH
37633: LD_INT 1
37635: PPUSH
37636: CALL_OW 275
37640: PUSH
37641: LD_VAR 0 14
37645: PUSH
37646: LD_INT 1
37648: ARRAY
37649: GREATEREQUAL
37650: PUSH
37651: LD_VAR 0 9
37655: PPUSH
37656: LD_INT 2
37658: PPUSH
37659: CALL_OW 275
37663: PUSH
37664: LD_VAR 0 14
37668: PUSH
37669: LD_INT 2
37671: ARRAY
37672: GREATEREQUAL
37673: AND
37674: PUSH
37675: LD_VAR 0 9
37679: PPUSH
37680: LD_INT 3
37682: PPUSH
37683: CALL_OW 275
37687: PUSH
37688: LD_VAR 0 14
37692: PUSH
37693: LD_INT 3
37695: ARRAY
37696: GREATEREQUAL
37697: AND
37698: IFFALSE 37710
// result := weapon ;
37700: LD_ADDR_VAR 0 3
37704: PUSH
37705: LD_VAR 0 18
37709: ST_TO_ADDR
// end ; end ;
37710: LD_VAR 0 3
37714: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37715: LD_INT 0
37717: PPUSH
37718: PPUSH
// result := true ;
37719: LD_ADDR_VAR 0 3
37723: PUSH
37724: LD_INT 1
37726: ST_TO_ADDR
// if array1 = array2 then
37727: LD_VAR 0 1
37731: PUSH
37732: LD_VAR 0 2
37736: EQUAL
37737: IFFALSE 37797
// begin for i = 1 to array1 do
37739: LD_ADDR_VAR 0 4
37743: PUSH
37744: DOUBLE
37745: LD_INT 1
37747: DEC
37748: ST_TO_ADDR
37749: LD_VAR 0 1
37753: PUSH
37754: FOR_TO
37755: IFFALSE 37793
// if array1 [ i ] <> array2 [ i ] then
37757: LD_VAR 0 1
37761: PUSH
37762: LD_VAR 0 4
37766: ARRAY
37767: PUSH
37768: LD_VAR 0 2
37772: PUSH
37773: LD_VAR 0 4
37777: ARRAY
37778: NONEQUAL
37779: IFFALSE 37791
// begin result := false ;
37781: LD_ADDR_VAR 0 3
37785: PUSH
37786: LD_INT 0
37788: ST_TO_ADDR
// break ;
37789: GO 37793
// end ;
37791: GO 37754
37793: POP
37794: POP
// end else
37795: GO 37805
// result := false ;
37797: LD_ADDR_VAR 0 3
37801: PUSH
37802: LD_INT 0
37804: ST_TO_ADDR
// end ;
37805: LD_VAR 0 3
37809: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37810: LD_INT 0
37812: PPUSH
37813: PPUSH
// if not array1 or not array2 then
37814: LD_VAR 0 1
37818: NOT
37819: PUSH
37820: LD_VAR 0 2
37824: NOT
37825: OR
37826: IFFALSE 37830
// exit ;
37828: GO 37894
// result := true ;
37830: LD_ADDR_VAR 0 3
37834: PUSH
37835: LD_INT 1
37837: ST_TO_ADDR
// for i = 1 to array1 do
37838: LD_ADDR_VAR 0 4
37842: PUSH
37843: DOUBLE
37844: LD_INT 1
37846: DEC
37847: ST_TO_ADDR
37848: LD_VAR 0 1
37852: PUSH
37853: FOR_TO
37854: IFFALSE 37892
// if array1 [ i ] <> array2 [ i ] then
37856: LD_VAR 0 1
37860: PUSH
37861: LD_VAR 0 4
37865: ARRAY
37866: PUSH
37867: LD_VAR 0 2
37871: PUSH
37872: LD_VAR 0 4
37876: ARRAY
37877: NONEQUAL
37878: IFFALSE 37890
// begin result := false ;
37880: LD_ADDR_VAR 0 3
37884: PUSH
37885: LD_INT 0
37887: ST_TO_ADDR
// break ;
37888: GO 37892
// end ;
37890: GO 37853
37892: POP
37893: POP
// end ;
37894: LD_VAR 0 3
37898: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37899: LD_INT 0
37901: PPUSH
37902: PPUSH
37903: PPUSH
// pom := GetBase ( fac ) ;
37904: LD_ADDR_VAR 0 5
37908: PUSH
37909: LD_VAR 0 1
37913: PPUSH
37914: CALL_OW 274
37918: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37919: LD_ADDR_VAR 0 4
37923: PUSH
37924: LD_VAR 0 2
37928: PUSH
37929: LD_INT 1
37931: ARRAY
37932: PPUSH
37933: LD_VAR 0 2
37937: PUSH
37938: LD_INT 2
37940: ARRAY
37941: PPUSH
37942: LD_VAR 0 2
37946: PUSH
37947: LD_INT 3
37949: ARRAY
37950: PPUSH
37951: LD_VAR 0 2
37955: PUSH
37956: LD_INT 4
37958: ARRAY
37959: PPUSH
37960: CALL_OW 449
37964: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37965: LD_ADDR_VAR 0 3
37969: PUSH
37970: LD_VAR 0 5
37974: PPUSH
37975: LD_INT 1
37977: PPUSH
37978: CALL_OW 275
37982: PUSH
37983: LD_VAR 0 4
37987: PUSH
37988: LD_INT 1
37990: ARRAY
37991: GREATEREQUAL
37992: PUSH
37993: LD_VAR 0 5
37997: PPUSH
37998: LD_INT 2
38000: PPUSH
38001: CALL_OW 275
38005: PUSH
38006: LD_VAR 0 4
38010: PUSH
38011: LD_INT 2
38013: ARRAY
38014: GREATEREQUAL
38015: AND
38016: PUSH
38017: LD_VAR 0 5
38021: PPUSH
38022: LD_INT 3
38024: PPUSH
38025: CALL_OW 275
38029: PUSH
38030: LD_VAR 0 4
38034: PUSH
38035: LD_INT 3
38037: ARRAY
38038: GREATEREQUAL
38039: AND
38040: ST_TO_ADDR
// end ;
38041: LD_VAR 0 3
38045: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38046: LD_INT 0
38048: PPUSH
38049: PPUSH
38050: PPUSH
38051: PPUSH
// pom := GetBase ( building ) ;
38052: LD_ADDR_VAR 0 3
38056: PUSH
38057: LD_VAR 0 1
38061: PPUSH
38062: CALL_OW 274
38066: ST_TO_ADDR
// if not pom then
38067: LD_VAR 0 3
38071: NOT
38072: IFFALSE 38076
// exit ;
38074: GO 38246
// btype := GetBType ( building ) ;
38076: LD_ADDR_VAR 0 5
38080: PUSH
38081: LD_VAR 0 1
38085: PPUSH
38086: CALL_OW 266
38090: ST_TO_ADDR
// if btype = b_armoury then
38091: LD_VAR 0 5
38095: PUSH
38096: LD_INT 4
38098: EQUAL
38099: IFFALSE 38109
// btype := b_barracks ;
38101: LD_ADDR_VAR 0 5
38105: PUSH
38106: LD_INT 5
38108: ST_TO_ADDR
// if btype = b_depot then
38109: LD_VAR 0 5
38113: PUSH
38114: LD_INT 0
38116: EQUAL
38117: IFFALSE 38127
// btype := b_warehouse ;
38119: LD_ADDR_VAR 0 5
38123: PUSH
38124: LD_INT 1
38126: ST_TO_ADDR
// if btype = b_workshop then
38127: LD_VAR 0 5
38131: PUSH
38132: LD_INT 2
38134: EQUAL
38135: IFFALSE 38145
// btype := b_factory ;
38137: LD_ADDR_VAR 0 5
38141: PUSH
38142: LD_INT 3
38144: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38145: LD_ADDR_VAR 0 4
38149: PUSH
38150: LD_VAR 0 5
38154: PPUSH
38155: LD_VAR 0 1
38159: PPUSH
38160: CALL_OW 248
38164: PPUSH
38165: CALL_OW 450
38169: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38170: LD_ADDR_VAR 0 2
38174: PUSH
38175: LD_VAR 0 3
38179: PPUSH
38180: LD_INT 1
38182: PPUSH
38183: CALL_OW 275
38187: PUSH
38188: LD_VAR 0 4
38192: PUSH
38193: LD_INT 1
38195: ARRAY
38196: GREATEREQUAL
38197: PUSH
38198: LD_VAR 0 3
38202: PPUSH
38203: LD_INT 2
38205: PPUSH
38206: CALL_OW 275
38210: PUSH
38211: LD_VAR 0 4
38215: PUSH
38216: LD_INT 2
38218: ARRAY
38219: GREATEREQUAL
38220: AND
38221: PUSH
38222: LD_VAR 0 3
38226: PPUSH
38227: LD_INT 3
38229: PPUSH
38230: CALL_OW 275
38234: PUSH
38235: LD_VAR 0 4
38239: PUSH
38240: LD_INT 3
38242: ARRAY
38243: GREATEREQUAL
38244: AND
38245: ST_TO_ADDR
// end ;
38246: LD_VAR 0 2
38250: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38251: LD_INT 0
38253: PPUSH
38254: PPUSH
38255: PPUSH
// pom := GetBase ( building ) ;
38256: LD_ADDR_VAR 0 4
38260: PUSH
38261: LD_VAR 0 1
38265: PPUSH
38266: CALL_OW 274
38270: ST_TO_ADDR
// if not pom then
38271: LD_VAR 0 4
38275: NOT
38276: IFFALSE 38280
// exit ;
38278: GO 38381
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38280: LD_ADDR_VAR 0 5
38284: PUSH
38285: LD_VAR 0 2
38289: PPUSH
38290: LD_VAR 0 1
38294: PPUSH
38295: CALL_OW 248
38299: PPUSH
38300: CALL_OW 450
38304: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38305: LD_ADDR_VAR 0 3
38309: PUSH
38310: LD_VAR 0 4
38314: PPUSH
38315: LD_INT 1
38317: PPUSH
38318: CALL_OW 275
38322: PUSH
38323: LD_VAR 0 5
38327: PUSH
38328: LD_INT 1
38330: ARRAY
38331: GREATEREQUAL
38332: PUSH
38333: LD_VAR 0 4
38337: PPUSH
38338: LD_INT 2
38340: PPUSH
38341: CALL_OW 275
38345: PUSH
38346: LD_VAR 0 5
38350: PUSH
38351: LD_INT 2
38353: ARRAY
38354: GREATEREQUAL
38355: AND
38356: PUSH
38357: LD_VAR 0 4
38361: PPUSH
38362: LD_INT 3
38364: PPUSH
38365: CALL_OW 275
38369: PUSH
38370: LD_VAR 0 5
38374: PUSH
38375: LD_INT 3
38377: ARRAY
38378: GREATEREQUAL
38379: AND
38380: ST_TO_ADDR
// end ;
38381: LD_VAR 0 3
38385: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38386: LD_INT 0
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
38394: PPUSH
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
// result := false ;
38399: LD_ADDR_VAR 0 8
38403: PUSH
38404: LD_INT 0
38406: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38407: LD_VAR 0 5
38411: NOT
38412: PUSH
38413: LD_VAR 0 1
38417: NOT
38418: OR
38419: PUSH
38420: LD_VAR 0 2
38424: NOT
38425: OR
38426: PUSH
38427: LD_VAR 0 3
38431: NOT
38432: OR
38433: IFFALSE 38437
// exit ;
38435: GO 39251
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38437: LD_ADDR_VAR 0 14
38441: PUSH
38442: LD_VAR 0 1
38446: PPUSH
38447: LD_VAR 0 2
38451: PPUSH
38452: LD_VAR 0 3
38456: PPUSH
38457: LD_VAR 0 4
38461: PPUSH
38462: LD_VAR 0 5
38466: PUSH
38467: LD_INT 1
38469: ARRAY
38470: PPUSH
38471: CALL_OW 248
38475: PPUSH
38476: LD_INT 0
38478: PPUSH
38479: CALL 40504 0 6
38483: ST_TO_ADDR
// if not hexes then
38484: LD_VAR 0 14
38488: NOT
38489: IFFALSE 38493
// exit ;
38491: GO 39251
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38493: LD_ADDR_VAR 0 17
38497: PUSH
38498: LD_VAR 0 5
38502: PPUSH
38503: LD_INT 22
38505: PUSH
38506: LD_VAR 0 13
38510: PPUSH
38511: CALL_OW 255
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: LD_INT 30
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 30
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PPUSH
38552: CALL_OW 72
38556: ST_TO_ADDR
// for i = 1 to hexes do
38557: LD_ADDR_VAR 0 9
38561: PUSH
38562: DOUBLE
38563: LD_INT 1
38565: DEC
38566: ST_TO_ADDR
38567: LD_VAR 0 14
38571: PUSH
38572: FOR_TO
38573: IFFALSE 39249
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38575: LD_ADDR_VAR 0 13
38579: PUSH
38580: LD_VAR 0 14
38584: PUSH
38585: LD_VAR 0 9
38589: ARRAY
38590: PUSH
38591: LD_INT 1
38593: ARRAY
38594: PPUSH
38595: LD_VAR 0 14
38599: PUSH
38600: LD_VAR 0 9
38604: ARRAY
38605: PUSH
38606: LD_INT 2
38608: ARRAY
38609: PPUSH
38610: CALL_OW 428
38614: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38615: LD_VAR 0 14
38619: PUSH
38620: LD_VAR 0 9
38624: ARRAY
38625: PUSH
38626: LD_INT 1
38628: ARRAY
38629: PPUSH
38630: LD_VAR 0 14
38634: PUSH
38635: LD_VAR 0 9
38639: ARRAY
38640: PUSH
38641: LD_INT 2
38643: ARRAY
38644: PPUSH
38645: CALL_OW 351
38649: PUSH
38650: LD_VAR 0 14
38654: PUSH
38655: LD_VAR 0 9
38659: ARRAY
38660: PUSH
38661: LD_INT 1
38663: ARRAY
38664: PPUSH
38665: LD_VAR 0 14
38669: PUSH
38670: LD_VAR 0 9
38674: ARRAY
38675: PUSH
38676: LD_INT 2
38678: ARRAY
38679: PPUSH
38680: CALL_OW 488
38684: NOT
38685: OR
38686: PUSH
38687: LD_VAR 0 13
38691: PPUSH
38692: CALL_OW 247
38696: PUSH
38697: LD_INT 3
38699: EQUAL
38700: OR
38701: IFFALSE 38707
// exit ;
38703: POP
38704: POP
38705: GO 39251
// if not tmp then
38707: LD_VAR 0 13
38711: NOT
38712: IFFALSE 38716
// continue ;
38714: GO 38572
// result := true ;
38716: LD_ADDR_VAR 0 8
38720: PUSH
38721: LD_INT 1
38723: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38724: LD_VAR 0 6
38728: PUSH
38729: LD_VAR 0 13
38733: PPUSH
38734: CALL_OW 247
38738: PUSH
38739: LD_INT 2
38741: EQUAL
38742: AND
38743: PUSH
38744: LD_VAR 0 13
38748: PPUSH
38749: CALL_OW 263
38753: PUSH
38754: LD_INT 1
38756: EQUAL
38757: AND
38758: IFFALSE 38922
// begin if IsDrivenBy ( tmp ) then
38760: LD_VAR 0 13
38764: PPUSH
38765: CALL_OW 311
38769: IFFALSE 38773
// continue ;
38771: GO 38572
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38773: LD_VAR 0 6
38777: PPUSH
38778: LD_INT 3
38780: PUSH
38781: LD_INT 60
38783: PUSH
38784: EMPTY
38785: LIST
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 3
38793: PUSH
38794: LD_INT 55
38796: PUSH
38797: EMPTY
38798: LIST
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PPUSH
38808: CALL_OW 72
38812: IFFALSE 38920
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38814: LD_ADDR_VAR 0 18
38818: PUSH
38819: LD_VAR 0 6
38823: PPUSH
38824: LD_INT 3
38826: PUSH
38827: LD_INT 60
38829: PUSH
38830: EMPTY
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 3
38839: PUSH
38840: LD_INT 55
38842: PUSH
38843: EMPTY
38844: LIST
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PPUSH
38854: CALL_OW 72
38858: PUSH
38859: LD_INT 1
38861: ARRAY
38862: ST_TO_ADDR
// if IsInUnit ( driver ) then
38863: LD_VAR 0 18
38867: PPUSH
38868: CALL_OW 310
38872: IFFALSE 38883
// ComExit ( driver ) ;
38874: LD_VAR 0 18
38878: PPUSH
38879: CALL 64296 0 1
// AddComEnterUnit ( driver , tmp ) ;
38883: LD_VAR 0 18
38887: PPUSH
38888: LD_VAR 0 13
38892: PPUSH
38893: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38897: LD_VAR 0 18
38901: PPUSH
38902: LD_VAR 0 7
38906: PPUSH
38907: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38911: LD_VAR 0 18
38915: PPUSH
38916: CALL_OW 181
// end ; continue ;
38920: GO 38572
// end ; if not cleaners or not tmp in cleaners then
38922: LD_VAR 0 6
38926: NOT
38927: PUSH
38928: LD_VAR 0 13
38932: PUSH
38933: LD_VAR 0 6
38937: IN
38938: NOT
38939: OR
38940: IFFALSE 39247
// begin if dep then
38942: LD_VAR 0 17
38946: IFFALSE 39082
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38948: LD_ADDR_VAR 0 16
38952: PUSH
38953: LD_VAR 0 17
38957: PUSH
38958: LD_INT 1
38960: ARRAY
38961: PPUSH
38962: CALL_OW 250
38966: PPUSH
38967: LD_VAR 0 17
38971: PUSH
38972: LD_INT 1
38974: ARRAY
38975: PPUSH
38976: CALL_OW 254
38980: PPUSH
38981: LD_INT 5
38983: PPUSH
38984: CALL_OW 272
38988: PUSH
38989: LD_VAR 0 17
38993: PUSH
38994: LD_INT 1
38996: ARRAY
38997: PPUSH
38998: CALL_OW 251
39002: PPUSH
39003: LD_VAR 0 17
39007: PUSH
39008: LD_INT 1
39010: ARRAY
39011: PPUSH
39012: CALL_OW 254
39016: PPUSH
39017: LD_INT 5
39019: PPUSH
39020: CALL_OW 273
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39029: LD_VAR 0 16
39033: PUSH
39034: LD_INT 1
39036: ARRAY
39037: PPUSH
39038: LD_VAR 0 16
39042: PUSH
39043: LD_INT 2
39045: ARRAY
39046: PPUSH
39047: CALL_OW 488
39051: IFFALSE 39082
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39053: LD_VAR 0 13
39057: PPUSH
39058: LD_VAR 0 16
39062: PUSH
39063: LD_INT 1
39065: ARRAY
39066: PPUSH
39067: LD_VAR 0 16
39071: PUSH
39072: LD_INT 2
39074: ARRAY
39075: PPUSH
39076: CALL_OW 111
// continue ;
39080: GO 38572
// end ; end ; r := GetDir ( tmp ) ;
39082: LD_ADDR_VAR 0 15
39086: PUSH
39087: LD_VAR 0 13
39091: PPUSH
39092: CALL_OW 254
39096: ST_TO_ADDR
// if r = 5 then
39097: LD_VAR 0 15
39101: PUSH
39102: LD_INT 5
39104: EQUAL
39105: IFFALSE 39115
// r := 0 ;
39107: LD_ADDR_VAR 0 15
39111: PUSH
39112: LD_INT 0
39114: ST_TO_ADDR
// for j = r to 5 do
39115: LD_ADDR_VAR 0 10
39119: PUSH
39120: DOUBLE
39121: LD_VAR 0 15
39125: DEC
39126: ST_TO_ADDR
39127: LD_INT 5
39129: PUSH
39130: FOR_TO
39131: IFFALSE 39245
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39133: LD_ADDR_VAR 0 11
39137: PUSH
39138: LD_VAR 0 13
39142: PPUSH
39143: CALL_OW 250
39147: PPUSH
39148: LD_VAR 0 10
39152: PPUSH
39153: LD_INT 2
39155: PPUSH
39156: CALL_OW 272
39160: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39161: LD_ADDR_VAR 0 12
39165: PUSH
39166: LD_VAR 0 13
39170: PPUSH
39171: CALL_OW 251
39175: PPUSH
39176: LD_VAR 0 10
39180: PPUSH
39181: LD_INT 2
39183: PPUSH
39184: CALL_OW 273
39188: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39189: LD_VAR 0 11
39193: PPUSH
39194: LD_VAR 0 12
39198: PPUSH
39199: CALL_OW 488
39203: PUSH
39204: LD_VAR 0 11
39208: PPUSH
39209: LD_VAR 0 12
39213: PPUSH
39214: CALL_OW 428
39218: NOT
39219: AND
39220: IFFALSE 39243
// begin ComMoveXY ( tmp , _x , _y ) ;
39222: LD_VAR 0 13
39226: PPUSH
39227: LD_VAR 0 11
39231: PPUSH
39232: LD_VAR 0 12
39236: PPUSH
39237: CALL_OW 111
// break ;
39241: GO 39245
// end ; end ;
39243: GO 39130
39245: POP
39246: POP
// end ; end ;
39247: GO 38572
39249: POP
39250: POP
// end ;
39251: LD_VAR 0 8
39255: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39256: LD_INT 0
39258: PPUSH
// result := true ;
39259: LD_ADDR_VAR 0 3
39263: PUSH
39264: LD_INT 1
39266: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39267: LD_VAR 0 2
39271: PUSH
39272: LD_INT 24
39274: DOUBLE
39275: EQUAL
39276: IFTRUE 39286
39278: LD_INT 33
39280: DOUBLE
39281: EQUAL
39282: IFTRUE 39286
39284: GO 39311
39286: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39287: LD_ADDR_VAR 0 3
39291: PUSH
39292: LD_INT 32
39294: PPUSH
39295: LD_VAR 0 1
39299: PPUSH
39300: CALL_OW 321
39304: PUSH
39305: LD_INT 2
39307: EQUAL
39308: ST_TO_ADDR
39309: GO 39627
39311: LD_INT 20
39313: DOUBLE
39314: EQUAL
39315: IFTRUE 39319
39317: GO 39344
39319: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39320: LD_ADDR_VAR 0 3
39324: PUSH
39325: LD_INT 6
39327: PPUSH
39328: LD_VAR 0 1
39332: PPUSH
39333: CALL_OW 321
39337: PUSH
39338: LD_INT 2
39340: EQUAL
39341: ST_TO_ADDR
39342: GO 39627
39344: LD_INT 22
39346: DOUBLE
39347: EQUAL
39348: IFTRUE 39358
39350: LD_INT 36
39352: DOUBLE
39353: EQUAL
39354: IFTRUE 39358
39356: GO 39383
39358: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39359: LD_ADDR_VAR 0 3
39363: PUSH
39364: LD_INT 15
39366: PPUSH
39367: LD_VAR 0 1
39371: PPUSH
39372: CALL_OW 321
39376: PUSH
39377: LD_INT 2
39379: EQUAL
39380: ST_TO_ADDR
39381: GO 39627
39383: LD_INT 30
39385: DOUBLE
39386: EQUAL
39387: IFTRUE 39391
39389: GO 39416
39391: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39392: LD_ADDR_VAR 0 3
39396: PUSH
39397: LD_INT 20
39399: PPUSH
39400: LD_VAR 0 1
39404: PPUSH
39405: CALL_OW 321
39409: PUSH
39410: LD_INT 2
39412: EQUAL
39413: ST_TO_ADDR
39414: GO 39627
39416: LD_INT 28
39418: DOUBLE
39419: EQUAL
39420: IFTRUE 39430
39422: LD_INT 21
39424: DOUBLE
39425: EQUAL
39426: IFTRUE 39430
39428: GO 39455
39430: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39431: LD_ADDR_VAR 0 3
39435: PUSH
39436: LD_INT 21
39438: PPUSH
39439: LD_VAR 0 1
39443: PPUSH
39444: CALL_OW 321
39448: PUSH
39449: LD_INT 2
39451: EQUAL
39452: ST_TO_ADDR
39453: GO 39627
39455: LD_INT 16
39457: DOUBLE
39458: EQUAL
39459: IFTRUE 39463
39461: GO 39488
39463: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39464: LD_ADDR_VAR 0 3
39468: PUSH
39469: LD_INT 84
39471: PPUSH
39472: LD_VAR 0 1
39476: PPUSH
39477: CALL_OW 321
39481: PUSH
39482: LD_INT 2
39484: EQUAL
39485: ST_TO_ADDR
39486: GO 39627
39488: LD_INT 19
39490: DOUBLE
39491: EQUAL
39492: IFTRUE 39502
39494: LD_INT 23
39496: DOUBLE
39497: EQUAL
39498: IFTRUE 39502
39500: GO 39527
39502: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39503: LD_ADDR_VAR 0 3
39507: PUSH
39508: LD_INT 83
39510: PPUSH
39511: LD_VAR 0 1
39515: PPUSH
39516: CALL_OW 321
39520: PUSH
39521: LD_INT 2
39523: EQUAL
39524: ST_TO_ADDR
39525: GO 39627
39527: LD_INT 17
39529: DOUBLE
39530: EQUAL
39531: IFTRUE 39535
39533: GO 39560
39535: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39536: LD_ADDR_VAR 0 3
39540: PUSH
39541: LD_INT 39
39543: PPUSH
39544: LD_VAR 0 1
39548: PPUSH
39549: CALL_OW 321
39553: PUSH
39554: LD_INT 2
39556: EQUAL
39557: ST_TO_ADDR
39558: GO 39627
39560: LD_INT 18
39562: DOUBLE
39563: EQUAL
39564: IFTRUE 39568
39566: GO 39593
39568: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39569: LD_ADDR_VAR 0 3
39573: PUSH
39574: LD_INT 40
39576: PPUSH
39577: LD_VAR 0 1
39581: PPUSH
39582: CALL_OW 321
39586: PUSH
39587: LD_INT 2
39589: EQUAL
39590: ST_TO_ADDR
39591: GO 39627
39593: LD_INT 27
39595: DOUBLE
39596: EQUAL
39597: IFTRUE 39601
39599: GO 39626
39601: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39602: LD_ADDR_VAR 0 3
39606: PUSH
39607: LD_INT 35
39609: PPUSH
39610: LD_VAR 0 1
39614: PPUSH
39615: CALL_OW 321
39619: PUSH
39620: LD_INT 2
39622: EQUAL
39623: ST_TO_ADDR
39624: GO 39627
39626: POP
// end ;
39627: LD_VAR 0 3
39631: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39632: LD_INT 0
39634: PPUSH
39635: PPUSH
39636: PPUSH
39637: PPUSH
39638: PPUSH
39639: PPUSH
39640: PPUSH
39641: PPUSH
39642: PPUSH
39643: PPUSH
39644: PPUSH
// result := false ;
39645: LD_ADDR_VAR 0 6
39649: PUSH
39650: LD_INT 0
39652: ST_TO_ADDR
// if btype = b_depot then
39653: LD_VAR 0 2
39657: PUSH
39658: LD_INT 0
39660: EQUAL
39661: IFFALSE 39673
// begin result := true ;
39663: LD_ADDR_VAR 0 6
39667: PUSH
39668: LD_INT 1
39670: ST_TO_ADDR
// exit ;
39671: GO 40499
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39673: LD_VAR 0 1
39677: NOT
39678: PUSH
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 266
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: IN
39699: NOT
39700: OR
39701: PUSH
39702: LD_VAR 0 2
39706: NOT
39707: OR
39708: PUSH
39709: LD_VAR 0 5
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: LD_INT 4
39728: PUSH
39729: LD_INT 5
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: IN
39740: NOT
39741: OR
39742: PUSH
39743: LD_VAR 0 3
39747: PPUSH
39748: LD_VAR 0 4
39752: PPUSH
39753: CALL_OW 488
39757: NOT
39758: OR
39759: IFFALSE 39763
// exit ;
39761: GO 40499
// side := GetSide ( depot ) ;
39763: LD_ADDR_VAR 0 9
39767: PUSH
39768: LD_VAR 0 1
39772: PPUSH
39773: CALL_OW 255
39777: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39778: LD_VAR 0 9
39782: PPUSH
39783: LD_VAR 0 2
39787: PPUSH
39788: CALL 39256 0 2
39792: NOT
39793: IFFALSE 39797
// exit ;
39795: GO 40499
// pom := GetBase ( depot ) ;
39797: LD_ADDR_VAR 0 10
39801: PUSH
39802: LD_VAR 0 1
39806: PPUSH
39807: CALL_OW 274
39811: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39812: LD_ADDR_VAR 0 11
39816: PUSH
39817: LD_VAR 0 2
39821: PPUSH
39822: LD_VAR 0 1
39826: PPUSH
39827: CALL_OW 248
39831: PPUSH
39832: CALL_OW 450
39836: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39837: LD_VAR 0 10
39841: PPUSH
39842: LD_INT 1
39844: PPUSH
39845: CALL_OW 275
39849: PUSH
39850: LD_VAR 0 11
39854: PUSH
39855: LD_INT 1
39857: ARRAY
39858: GREATEREQUAL
39859: PUSH
39860: LD_VAR 0 10
39864: PPUSH
39865: LD_INT 2
39867: PPUSH
39868: CALL_OW 275
39872: PUSH
39873: LD_VAR 0 11
39877: PUSH
39878: LD_INT 2
39880: ARRAY
39881: GREATEREQUAL
39882: AND
39883: PUSH
39884: LD_VAR 0 10
39888: PPUSH
39889: LD_INT 3
39891: PPUSH
39892: CALL_OW 275
39896: PUSH
39897: LD_VAR 0 11
39901: PUSH
39902: LD_INT 3
39904: ARRAY
39905: GREATEREQUAL
39906: AND
39907: NOT
39908: IFFALSE 39912
// exit ;
39910: GO 40499
// if GetBType ( depot ) = b_depot then
39912: LD_VAR 0 1
39916: PPUSH
39917: CALL_OW 266
39921: PUSH
39922: LD_INT 0
39924: EQUAL
39925: IFFALSE 39937
// dist := 28 else
39927: LD_ADDR_VAR 0 14
39931: PUSH
39932: LD_INT 28
39934: ST_TO_ADDR
39935: GO 39945
// dist := 36 ;
39937: LD_ADDR_VAR 0 14
39941: PUSH
39942: LD_INT 36
39944: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39945: LD_VAR 0 1
39949: PPUSH
39950: LD_VAR 0 3
39954: PPUSH
39955: LD_VAR 0 4
39959: PPUSH
39960: CALL_OW 297
39964: PUSH
39965: LD_VAR 0 14
39969: GREATER
39970: IFFALSE 39974
// exit ;
39972: GO 40499
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39974: LD_ADDR_VAR 0 12
39978: PUSH
39979: LD_VAR 0 2
39983: PPUSH
39984: LD_VAR 0 3
39988: PPUSH
39989: LD_VAR 0 4
39993: PPUSH
39994: LD_VAR 0 5
39998: PPUSH
39999: LD_VAR 0 1
40003: PPUSH
40004: CALL_OW 248
40008: PPUSH
40009: LD_INT 0
40011: PPUSH
40012: CALL 40504 0 6
40016: ST_TO_ADDR
// if not hexes then
40017: LD_VAR 0 12
40021: NOT
40022: IFFALSE 40026
// exit ;
40024: GO 40499
// hex := GetHexInfo ( x , y ) ;
40026: LD_ADDR_VAR 0 15
40030: PUSH
40031: LD_VAR 0 3
40035: PPUSH
40036: LD_VAR 0 4
40040: PPUSH
40041: CALL_OW 546
40045: ST_TO_ADDR
// if hex [ 1 ] then
40046: LD_VAR 0 15
40050: PUSH
40051: LD_INT 1
40053: ARRAY
40054: IFFALSE 40058
// exit ;
40056: GO 40499
// height := hex [ 2 ] ;
40058: LD_ADDR_VAR 0 13
40062: PUSH
40063: LD_VAR 0 15
40067: PUSH
40068: LD_INT 2
40070: ARRAY
40071: ST_TO_ADDR
// for i = 1 to hexes do
40072: LD_ADDR_VAR 0 7
40076: PUSH
40077: DOUBLE
40078: LD_INT 1
40080: DEC
40081: ST_TO_ADDR
40082: LD_VAR 0 12
40086: PUSH
40087: FOR_TO
40088: IFFALSE 40418
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40090: LD_VAR 0 12
40094: PUSH
40095: LD_VAR 0 7
40099: ARRAY
40100: PUSH
40101: LD_INT 1
40103: ARRAY
40104: PPUSH
40105: LD_VAR 0 12
40109: PUSH
40110: LD_VAR 0 7
40114: ARRAY
40115: PUSH
40116: LD_INT 2
40118: ARRAY
40119: PPUSH
40120: CALL_OW 488
40124: NOT
40125: PUSH
40126: LD_VAR 0 12
40130: PUSH
40131: LD_VAR 0 7
40135: ARRAY
40136: PUSH
40137: LD_INT 1
40139: ARRAY
40140: PPUSH
40141: LD_VAR 0 12
40145: PUSH
40146: LD_VAR 0 7
40150: ARRAY
40151: PUSH
40152: LD_INT 2
40154: ARRAY
40155: PPUSH
40156: CALL_OW 428
40160: PUSH
40161: LD_INT 0
40163: GREATER
40164: OR
40165: PUSH
40166: LD_VAR 0 12
40170: PUSH
40171: LD_VAR 0 7
40175: ARRAY
40176: PUSH
40177: LD_INT 1
40179: ARRAY
40180: PPUSH
40181: LD_VAR 0 12
40185: PUSH
40186: LD_VAR 0 7
40190: ARRAY
40191: PUSH
40192: LD_INT 2
40194: ARRAY
40195: PPUSH
40196: CALL_OW 351
40200: OR
40201: IFFALSE 40207
// exit ;
40203: POP
40204: POP
40205: GO 40499
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40207: LD_ADDR_VAR 0 8
40211: PUSH
40212: LD_VAR 0 12
40216: PUSH
40217: LD_VAR 0 7
40221: ARRAY
40222: PUSH
40223: LD_INT 1
40225: ARRAY
40226: PPUSH
40227: LD_VAR 0 12
40231: PUSH
40232: LD_VAR 0 7
40236: ARRAY
40237: PUSH
40238: LD_INT 2
40240: ARRAY
40241: PPUSH
40242: CALL_OW 546
40246: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40247: LD_VAR 0 8
40251: PUSH
40252: LD_INT 1
40254: ARRAY
40255: PUSH
40256: LD_VAR 0 8
40260: PUSH
40261: LD_INT 2
40263: ARRAY
40264: PUSH
40265: LD_VAR 0 13
40269: PUSH
40270: LD_INT 2
40272: PLUS
40273: GREATER
40274: OR
40275: PUSH
40276: LD_VAR 0 8
40280: PUSH
40281: LD_INT 2
40283: ARRAY
40284: PUSH
40285: LD_VAR 0 13
40289: PUSH
40290: LD_INT 2
40292: MINUS
40293: LESS
40294: OR
40295: PUSH
40296: LD_VAR 0 8
40300: PUSH
40301: LD_INT 3
40303: ARRAY
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 8
40310: PUSH
40311: LD_INT 9
40313: PUSH
40314: LD_INT 10
40316: PUSH
40317: LD_INT 11
40319: PUSH
40320: LD_INT 12
40322: PUSH
40323: LD_INT 13
40325: PUSH
40326: LD_INT 16
40328: PUSH
40329: LD_INT 17
40331: PUSH
40332: LD_INT 18
40334: PUSH
40335: LD_INT 19
40337: PUSH
40338: LD_INT 20
40340: PUSH
40341: LD_INT 21
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: IN
40359: NOT
40360: OR
40361: PUSH
40362: LD_VAR 0 8
40366: PUSH
40367: LD_INT 5
40369: ARRAY
40370: NOT
40371: OR
40372: PUSH
40373: LD_VAR 0 8
40377: PUSH
40378: LD_INT 6
40380: ARRAY
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: LD_INT 7
40390: PUSH
40391: LD_INT 9
40393: PUSH
40394: LD_INT 10
40396: PUSH
40397: LD_INT 11
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: IN
40408: NOT
40409: OR
40410: IFFALSE 40416
// exit ;
40412: POP
40413: POP
40414: GO 40499
// end ;
40416: GO 40087
40418: POP
40419: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40420: LD_VAR 0 9
40424: PPUSH
40425: LD_VAR 0 3
40429: PPUSH
40430: LD_VAR 0 4
40434: PPUSH
40435: LD_INT 20
40437: PPUSH
40438: CALL 32422 0 4
40442: PUSH
40443: LD_INT 4
40445: ARRAY
40446: IFFALSE 40450
// exit ;
40448: GO 40499
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40450: LD_VAR 0 2
40454: PUSH
40455: LD_INT 29
40457: PUSH
40458: LD_INT 30
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: IN
40465: PUSH
40466: LD_VAR 0 3
40470: PPUSH
40471: LD_VAR 0 4
40475: PPUSH
40476: LD_VAR 0 9
40480: PPUSH
40481: CALL_OW 440
40485: NOT
40486: AND
40487: IFFALSE 40491
// exit ;
40489: GO 40499
// result := true ;
40491: LD_ADDR_VAR 0 6
40495: PUSH
40496: LD_INT 1
40498: ST_TO_ADDR
// end ;
40499: LD_VAR 0 6
40503: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40504: LD_INT 0
40506: PPUSH
40507: PPUSH
40508: PPUSH
40509: PPUSH
40510: PPUSH
40511: PPUSH
40512: PPUSH
40513: PPUSH
40514: PPUSH
40515: PPUSH
40516: PPUSH
40517: PPUSH
40518: PPUSH
40519: PPUSH
40520: PPUSH
40521: PPUSH
40522: PPUSH
40523: PPUSH
40524: PPUSH
40525: PPUSH
40526: PPUSH
40527: PPUSH
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
// result = [ ] ;
40564: LD_ADDR_VAR 0 7
40568: PUSH
40569: EMPTY
40570: ST_TO_ADDR
// temp_list = [ ] ;
40571: LD_ADDR_VAR 0 9
40575: PUSH
40576: EMPTY
40577: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40578: LD_VAR 0 4
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 2
40591: PUSH
40592: LD_INT 3
40594: PUSH
40595: LD_INT 4
40597: PUSH
40598: LD_INT 5
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: IN
40609: NOT
40610: PUSH
40611: LD_VAR 0 1
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: IN
40626: PUSH
40627: LD_VAR 0 5
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: LD_INT 3
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: LIST
40645: IN
40646: NOT
40647: AND
40648: OR
40649: IFFALSE 40653
// exit ;
40651: GO 59044
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40653: LD_VAR 0 1
40657: PUSH
40658: LD_INT 6
40660: PUSH
40661: LD_INT 7
40663: PUSH
40664: LD_INT 8
40666: PUSH
40667: LD_INT 13
40669: PUSH
40670: LD_INT 12
40672: PUSH
40673: LD_INT 15
40675: PUSH
40676: LD_INT 11
40678: PUSH
40679: LD_INT 14
40681: PUSH
40682: LD_INT 10
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: IN
40696: IFFALSE 40706
// btype = b_lab ;
40698: LD_ADDR_VAR 0 1
40702: PUSH
40703: LD_INT 6
40705: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40706: LD_VAR 0 6
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: LIST
40724: IN
40725: NOT
40726: PUSH
40727: LD_VAR 0 1
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: LD_INT 3
40743: PUSH
40744: LD_INT 6
40746: PUSH
40747: LD_INT 36
40749: PUSH
40750: LD_INT 4
40752: PUSH
40753: LD_INT 5
40755: PUSH
40756: LD_INT 31
40758: PUSH
40759: LD_INT 32
40761: PUSH
40762: LD_INT 33
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: IN
40778: NOT
40779: PUSH
40780: LD_VAR 0 6
40784: PUSH
40785: LD_INT 1
40787: EQUAL
40788: AND
40789: OR
40790: PUSH
40791: LD_VAR 0 1
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: LD_INT 3
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: IN
40806: NOT
40807: PUSH
40808: LD_VAR 0 6
40812: PUSH
40813: LD_INT 2
40815: EQUAL
40816: AND
40817: OR
40818: IFFALSE 40828
// mode = 0 ;
40820: LD_ADDR_VAR 0 6
40824: PUSH
40825: LD_INT 0
40827: ST_TO_ADDR
// case mode of 0 :
40828: LD_VAR 0 6
40832: PUSH
40833: LD_INT 0
40835: DOUBLE
40836: EQUAL
40837: IFTRUE 40841
40839: GO 52294
40841: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40842: LD_ADDR_VAR 0 11
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 0
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 2
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 3
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 3
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41035: LD_ADDR_VAR 0 12
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 2
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 3
41192: NEG
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 3
41203: NEG
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41231: LD_ADDR_VAR 0 13
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: NEG
41379: PUSH
41380: LD_INT 3
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 3
41390: NEG
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 3
41402: NEG
41403: PUSH
41404: LD_INT 3
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41430: LD_ADDR_VAR 0 14
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: LD_INT 2
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: LD_INT 3
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 3
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41626: LD_ADDR_VAR 0 15
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: LD_INT 1
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 3
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 3
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41819: LD_ADDR_VAR 0 16
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 2
41942: NEG
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 3
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: LD_INT 3
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: LD_INT 3
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42012: LD_ADDR_VAR 0 17
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42242: LD_ADDR_VAR 0 18
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: NEG
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 2
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 2
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 2
42441: NEG
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42472: LD_ADDR_VAR 0 19
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 2
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 2
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 2
42648: NEG
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: NEG
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 2
42671: NEG
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42702: LD_ADDR_VAR 0 20
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: LD_INT 2
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 2
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 2
42889: NEG
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: NEG
42902: PUSH
42903: LD_INT 2
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42932: LD_ADDR_VAR 0 21
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 2
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 2
43131: NEG
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43162: LD_ADDR_VAR 0 22
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: NEG
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: LD_INT 2
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: LD_INT 2
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 2
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: LD_INT 1
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: NEG
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 2
43361: NEG
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43392: LD_ADDR_VAR 0 23
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: NEG
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 3
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: LD_INT 3
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43672: LD_ADDR_VAR 0 24
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: NEG
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 2
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 3
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 3
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43948: LD_ADDR_VAR 0 25
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 3
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 3
44169: PUSH
44170: LD_INT 2
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: LD_INT 3
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44222: LD_ADDR_VAR 0 26
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: LD_INT 3
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: LD_INT 3
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44498: LD_ADDR_VAR 0 27
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: LD_INT 2
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 2
44697: NEG
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: LD_INT 2
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 3
44731: NEG
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 3
44743: NEG
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44778: LD_ADDR_VAR 0 28
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 2
44977: NEG
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: LD_INT 3
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: LD_INT 3
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 3
45013: NEG
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 3
45025: NEG
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45060: LD_ADDR_VAR 0 29
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 3
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 3
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 3
45304: NEG
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45339: LD_ADDR_VAR 0 30
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 3
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 3
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 3
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45617: LD_ADDR_VAR 0 31
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: LD_INT 3
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 3
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: LD_INT 3
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 3
45860: NEG
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45895: LD_ADDR_VAR 0 32
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 3
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 2
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 3
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: LD_INT 3
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 3
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46173: LD_ADDR_VAR 0 33
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: NEG
46364: PUSH
46365: LD_INT 3
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 3
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 3
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 3
46417: NEG
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46452: LD_ADDR_VAR 0 34
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: LD_INT 3
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 3
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46732: LD_ADDR_VAR 0 35
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46844: LD_ADDR_VAR 0 36
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46956: LD_ADDR_VAR 0 37
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47068: LD_ADDR_VAR 0 38
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47180: LD_ADDR_VAR 0 39
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47292: LD_ADDR_VAR 0 40
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47404: LD_ADDR_VAR 0 41
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: LD_INT 3
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 3
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 3
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 3
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: LD_INT 3
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 3
47678: NEG
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 3
47689: NEG
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: NEG
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 3
47713: NEG
47714: PUSH
47715: LD_INT 3
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47754: LD_ADDR_VAR 0 42
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 2
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: LD_INT 3
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: LD_INT 3
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 3
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 3
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 3
48000: PUSH
48001: LD_INT 3
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 3
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 3
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 3
48051: NEG
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 3
48063: NEG
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48104: LD_ADDR_VAR 0 43
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: LD_INT 3
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 3
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: LD_INT 3
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: NEG
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 3
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48452: LD_ADDR_VAR 0 44
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 3
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 3
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 3
48695: PUSH
48696: LD_INT 3
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: LD_INT 3
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 3
48737: NEG
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 3
48749: NEG
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 3
48761: NEG
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48802: LD_ADDR_VAR 0 45
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 3
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: LD_INT 3
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 3
49048: PUSH
49049: LD_INT 3
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: LD_INT 3
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 3
49099: NEG
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 3
49111: NEG
49112: PUSH
49113: LD_INT 3
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49152: LD_ADDR_VAR 0 46
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: LD_INT 1
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 3
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 3
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 3
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 3
49448: NEG
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 3
49459: NEG
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49500: LD_ADDR_VAR 0 47
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49651: LD_ADDR_VAR 0 48
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49798: LD_ADDR_VAR 0 49
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49942: LD_ADDR_VAR 0 50
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50086: LD_ADDR_VAR 0 51
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 2
50198: NEG
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50233: LD_ADDR_VAR 0 52
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50384: LD_ADDR_VAR 0 53
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50614: LD_ADDR_VAR 0 54
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: NEG
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50844: LD_ADDR_VAR 0 55
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51074: LD_ADDR_VAR 0 56
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51304: LD_ADDR_VAR 0 57
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51534: LD_ADDR_VAR 0 58
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51764: LD_ADDR_VAR 0 59
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51852: LD_ADDR_VAR 0 60
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51940: LD_ADDR_VAR 0 61
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52028: LD_ADDR_VAR 0 62
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52116: LD_ADDR_VAR 0 63
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52204: LD_ADDR_VAR 0 64
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: ST_TO_ADDR
// end ; 1 :
52292: GO 58189
52294: LD_INT 1
52296: DOUBLE
52297: EQUAL
52298: IFTRUE 52302
52300: GO 54925
52302: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52303: LD_ADDR_VAR 0 11
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 3
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52347: LD_ADDR_VAR 0 12
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 3
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 3
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52388: LD_ADDR_VAR 0 13
52392: PUSH
52393: LD_INT 3
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: LD_INT 3
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52428: LD_ADDR_VAR 0 14
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52469: LD_ADDR_VAR 0 15
52473: PUSH
52474: LD_INT 2
52476: NEG
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 3
52487: NEG
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 3
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52513: LD_ADDR_VAR 0 16
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: LD_INT 3
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 3
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: LD_INT 3
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: LIST
52558: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52559: LD_ADDR_VAR 0 17
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: LD_INT 3
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 3
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52603: LD_ADDR_VAR 0 18
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 3
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52644: LD_ADDR_VAR 0 19
52648: PUSH
52649: LD_INT 3
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 3
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52684: LD_ADDR_VAR 0 20
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 3
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: LIST
52724: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52725: LD_ADDR_VAR 0 21
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 3
52743: NEG
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: NEG
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: LIST
52768: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52769: LD_ADDR_VAR 0 22
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: LD_INT 3
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 3
52788: NEG
52789: PUSH
52790: LD_INT 2
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 3
52800: NEG
52801: PUSH
52802: LD_INT 3
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: LIST
52814: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52815: LD_ADDR_VAR 0 23
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 3
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 4
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 3
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52859: LD_ADDR_VAR 0 24
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 4
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52900: LD_ADDR_VAR 0 25
52904: PUSH
52905: LD_INT 3
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 4
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 3
52927: PUSH
52928: LD_INT 4
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: LIST
52939: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52940: LD_ADDR_VAR 0 26
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 4
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: LIST
52980: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52981: LD_ADDR_VAR 0 27
52985: PUSH
52986: LD_INT 3
52988: NEG
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 3
52999: NEG
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 4
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: LIST
53024: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53025: LD_ADDR_VAR 0 28
53029: PUSH
53030: LD_INT 3
53032: NEG
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 3
53044: NEG
53045: PUSH
53046: LD_INT 4
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 4
53056: NEG
53057: PUSH
53058: LD_INT 3
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53071: LD_ADDR_VAR 0 29
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: LD_INT 3
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 4
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 4
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: LD_INT 3
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 5
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 5
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 4
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 6
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 6
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 5
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53226: LD_ADDR_VAR 0 30
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 3
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 4
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 4
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 4
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 5
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 5
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 5
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 6
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 6
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53369: LD_ADDR_VAR 0 31
53373: PUSH
53374: LD_INT 3
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 3
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 4
53406: PUSH
53407: LD_INT 3
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 4
53416: PUSH
53417: LD_INT 4
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 3
53426: PUSH
53427: LD_INT 4
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 5
53436: PUSH
53437: LD_INT 4
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 5
53446: PUSH
53447: LD_INT 5
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 4
53456: PUSH
53457: LD_INT 5
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 6
53466: PUSH
53467: LD_INT 5
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 6
53476: PUSH
53477: LD_INT 6
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 5
53486: PUSH
53487: LD_INT 6
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53508: LD_ADDR_VAR 0 32
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 3
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 3
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 4
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 4
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 3
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 5
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 5
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 4
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 6
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 6
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 5
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53651: LD_ADDR_VAR 0 33
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 3
53669: NEG
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: NEG
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: NEG
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 4
53703: NEG
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 4
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 4
53726: NEG
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 5
53737: NEG
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 5
53748: NEG
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 5
53760: NEG
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 6
53771: NEG
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 6
53782: NEG
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53806: LD_ADDR_VAR 0 34
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 3
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: NEG
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 3
53837: NEG
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 3
53849: NEG
53850: PUSH
53851: LD_INT 4
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 4
53861: NEG
53862: PUSH
53863: LD_INT 3
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 4
53873: NEG
53874: PUSH
53875: LD_INT 4
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 4
53885: NEG
53886: PUSH
53887: LD_INT 5
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 5
53897: NEG
53898: PUSH
53899: LD_INT 4
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 5
53909: NEG
53910: PUSH
53911: LD_INT 5
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 5
53921: NEG
53922: PUSH
53923: LD_INT 6
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 6
53933: NEG
53934: PUSH
53935: LD_INT 5
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 6
53945: NEG
53946: PUSH
53947: LD_INT 6
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53969: LD_ADDR_VAR 0 41
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: LIST
54012: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54013: LD_ADDR_VAR 0 42
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 3
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54054: LD_ADDR_VAR 0 43
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 3
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: LD_INT 3
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: LIST
54093: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54094: LD_ADDR_VAR 0 44
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: LIST
54134: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54135: LD_ADDR_VAR 0 45
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: LIST
54178: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54179: LD_ADDR_VAR 0 46
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: LD_INT 3
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: LIST
54224: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54225: LD_ADDR_VAR 0 47
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: LD_INT 3
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54258: LD_ADDR_VAR 0 48
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54289: LD_ADDR_VAR 0 49
54293: PUSH
54294: LD_INT 3
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 3
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54318: LD_ADDR_VAR 0 50
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54347: LD_ADDR_VAR 0 51
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54378: LD_ADDR_VAR 0 52
54382: PUSH
54383: LD_INT 3
54385: NEG
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 3
54397: NEG
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54411: LD_ADDR_VAR 0 53
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 3
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 3
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: LD_INT 2
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: LIST
54454: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54455: LD_ADDR_VAR 0 54
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 3
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 3
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: LIST
54495: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54496: LD_ADDR_VAR 0 55
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 3
54513: PUSH
54514: LD_INT 3
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 3
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: LIST
54535: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54536: LD_ADDR_VAR 0 56
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 3
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 3
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54577: LD_ADDR_VAR 0 57
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: LIST
54620: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54621: LD_ADDR_VAR 0 58
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: LD_INT 3
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 3
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: NEG
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: LIST
54666: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54667: LD_ADDR_VAR 0 59
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: LIST
54710: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54711: LD_ADDR_VAR 0 60
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: LIST
54751: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54752: LD_ADDR_VAR 0 61
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 2
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: LIST
54791: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54792: LD_ADDR_VAR 0 62
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: LIST
54832: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54833: LD_ADDR_VAR 0 63
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: LIST
54876: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54877: LD_ADDR_VAR 0 64
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: ST_TO_ADDR
// end ; 2 :
54923: GO 58189
54925: LD_INT 2
54927: DOUBLE
54928: EQUAL
54929: IFTRUE 54933
54931: GO 58188
54933: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54934: LD_ADDR_VAR 0 29
54938: PUSH
54939: LD_INT 4
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 4
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 5
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 5
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 4
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 3
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 5
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 3
55034: PUSH
55035: LD_INT 3
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 3
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 4
55054: PUSH
55055: LD_INT 3
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 4
55064: PUSH
55065: LD_INT 4
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 3
55074: PUSH
55075: LD_INT 4
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 3
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 4
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 4
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: LD_INT 4
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 3
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 4
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 5
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 5
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 4
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: LD_INT 5
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 3
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 3
55217: NEG
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 3
55262: NEG
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 4
55273: NEG
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 4
55284: NEG
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 4
55296: NEG
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 4
55319: NEG
55320: PUSH
55321: LD_INT 4
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 4
55331: NEG
55332: PUSH
55333: LD_INT 5
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 3
55343: NEG
55344: PUSH
55345: LD_INT 4
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: NEG
55356: PUSH
55357: LD_INT 3
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 4
55367: NEG
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 5
55379: NEG
55380: PUSH
55381: LD_INT 4
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 5
55391: NEG
55392: PUSH
55393: LD_INT 5
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: LD_INT 5
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 5
55415: NEG
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55472: LD_ADDR_VAR 0 30
55476: PUSH
55477: LD_INT 4
55479: PUSH
55480: LD_INT 4
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 4
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 5
55499: PUSH
55500: LD_INT 4
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 5
55509: PUSH
55510: LD_INT 5
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 4
55519: PUSH
55520: LD_INT 5
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 3
55529: PUSH
55530: LD_INT 4
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 3
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 5
55549: PUSH
55550: LD_INT 3
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: PUSH
55560: LD_INT 5
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 3
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 4
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 4
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 3
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 4
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 4
55662: NEG
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 4
55673: NEG
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 3
55685: NEG
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 3
55696: NEG
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 4
55707: NEG
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 5
55718: NEG
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 5
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 5
55741: NEG
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 3
55753: NEG
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 3
55764: NEG
55765: PUSH
55766: LD_INT 3
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 3
55776: NEG
55777: PUSH
55778: LD_INT 4
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 4
55824: NEG
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 4
55836: NEG
55837: PUSH
55838: LD_INT 4
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: LD_INT 4
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 4
55860: NEG
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 4
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 5
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 4
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 3
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 3
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: LD_INT 4
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 5
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: LD_INT 3
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: LD_INT 5
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56019: LD_ADDR_VAR 0 31
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 4
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 3
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: LD_INT 4
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: LD_INT 5
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 5
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 4
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: LD_INT 5
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: LD_INT 3
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 3
56164: NEG
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 4
56175: NEG
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 4
56186: NEG
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 4
56198: NEG
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 4
56221: NEG
56222: PUSH
56223: LD_INT 4
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 4
56233: NEG
56234: PUSH
56235: LD_INT 5
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 3
56245: NEG
56246: PUSH
56247: LD_INT 4
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 3
56257: NEG
56258: PUSH
56259: LD_INT 3
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 4
56269: NEG
56270: PUSH
56271: LD_INT 3
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 5
56281: NEG
56282: PUSH
56283: LD_INT 4
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 5
56293: NEG
56294: PUSH
56295: LD_INT 5
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 3
56305: NEG
56306: PUSH
56307: LD_INT 5
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 5
56317: NEG
56318: PUSH
56319: LD_INT 3
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 3
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 4
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 3
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 2
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 3
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: LD_INT 4
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 4
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 4
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 5
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 5
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 4
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 3
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 3
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 5
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56569: LD_ADDR_VAR 0 32
56573: PUSH
56574: LD_INT 4
56576: NEG
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 4
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 3
56599: NEG
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 3
56610: NEG
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 4
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 5
56632: NEG
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 5
56643: NEG
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 5
56655: NEG
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 3
56667: NEG
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: LD_INT 3
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: LD_INT 4
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 4
56738: NEG
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 4
56750: NEG
56751: PUSH
56752: LD_INT 4
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 2
56762: NEG
56763: PUSH
56764: LD_INT 4
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 4
56774: NEG
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 4
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 5
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 4
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 3
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 3
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 4
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 5
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: LD_INT 3
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: LD_INT 5
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 4
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 4
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 4
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 4
56981: PUSH
56982: LD_INT 4
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 4
56991: PUSH
56992: LD_INT 3
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 5
57001: PUSH
57002: LD_INT 4
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 5
57011: PUSH
57012: LD_INT 5
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 4
57021: PUSH
57022: LD_INT 5
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: LD_INT 4
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: LD_INT 3
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 5
57051: PUSH
57052: LD_INT 3
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: LD_INT 5
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57116: LD_ADDR_VAR 0 33
57120: PUSH
57121: LD_INT 4
57123: NEG
57124: PUSH
57125: LD_INT 4
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 4
57135: NEG
57136: PUSH
57137: LD_INT 5
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: LD_INT 4
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 4
57171: NEG
57172: PUSH
57173: LD_INT 3
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 5
57183: NEG
57184: PUSH
57185: LD_INT 4
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 5
57195: NEG
57196: PUSH
57197: LD_INT 5
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: LD_INT 5
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 5
57219: NEG
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 4
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: LD_INT 3
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 3
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 4
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: LD_INT 4
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 4
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 4
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 5
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 5
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 4
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 3
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 5
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: LD_INT 3
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 4
57446: PUSH
57447: LD_INT 3
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 4
57456: PUSH
57457: LD_INT 4
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 3
57466: PUSH
57467: LD_INT 4
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: LD_INT 3
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 4
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 4
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 4
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 4
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 5
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 5
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 4
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: LD_INT 5
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: LD_INT 3
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57654: LD_ADDR_VAR 0 34
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 4
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 5
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: LD_INT 4
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: LD_INT 3
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: LD_INT 4
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: LD_INT 5
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: LD_INT 3
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: LD_INT 5
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 4
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 4
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 4
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 4
57856: PUSH
57857: LD_INT 4
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 4
57866: PUSH
57867: LD_INT 3
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 5
57876: PUSH
57877: LD_INT 4
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 5
57886: PUSH
57887: LD_INT 5
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 4
57896: PUSH
57897: LD_INT 5
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 3
57906: PUSH
57907: LD_INT 4
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 5
57926: PUSH
57927: LD_INT 3
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 3
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: LD_INT 3
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 4
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 4
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: LD_INT 3
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: LD_INT 4
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: NEG
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 4
58039: NEG
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 4
58050: NEG
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 3
58062: NEG
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 4
58084: NEG
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 5
58095: NEG
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 5
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 5
58118: NEG
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: ST_TO_ADDR
// end ; end ;
58186: GO 58189
58188: POP
// case btype of b_depot , b_warehouse :
58189: LD_VAR 0 1
58193: PUSH
58194: LD_INT 0
58196: DOUBLE
58197: EQUAL
58198: IFTRUE 58208
58200: LD_INT 1
58202: DOUBLE
58203: EQUAL
58204: IFTRUE 58208
58206: GO 58409
58208: POP
// case nation of nation_american :
58209: LD_VAR 0 5
58213: PUSH
58214: LD_INT 1
58216: DOUBLE
58217: EQUAL
58218: IFTRUE 58222
58220: GO 58278
58222: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58223: LD_ADDR_VAR 0 9
58227: PUSH
58228: LD_VAR 0 11
58232: PUSH
58233: LD_VAR 0 12
58237: PUSH
58238: LD_VAR 0 13
58242: PUSH
58243: LD_VAR 0 14
58247: PUSH
58248: LD_VAR 0 15
58252: PUSH
58253: LD_VAR 0 16
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: PUSH
58266: LD_VAR 0 4
58270: PUSH
58271: LD_INT 1
58273: PLUS
58274: ARRAY
58275: ST_TO_ADDR
58276: GO 58407
58278: LD_INT 2
58280: DOUBLE
58281: EQUAL
58282: IFTRUE 58286
58284: GO 58342
58286: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58287: LD_ADDR_VAR 0 9
58291: PUSH
58292: LD_VAR 0 17
58296: PUSH
58297: LD_VAR 0 18
58301: PUSH
58302: LD_VAR 0 19
58306: PUSH
58307: LD_VAR 0 20
58311: PUSH
58312: LD_VAR 0 21
58316: PUSH
58317: LD_VAR 0 22
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: PUSH
58330: LD_VAR 0 4
58334: PUSH
58335: LD_INT 1
58337: PLUS
58338: ARRAY
58339: ST_TO_ADDR
58340: GO 58407
58342: LD_INT 3
58344: DOUBLE
58345: EQUAL
58346: IFTRUE 58350
58348: GO 58406
58350: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58351: LD_ADDR_VAR 0 9
58355: PUSH
58356: LD_VAR 0 23
58360: PUSH
58361: LD_VAR 0 24
58365: PUSH
58366: LD_VAR 0 25
58370: PUSH
58371: LD_VAR 0 26
58375: PUSH
58376: LD_VAR 0 27
58380: PUSH
58381: LD_VAR 0 28
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: PUSH
58394: LD_VAR 0 4
58398: PUSH
58399: LD_INT 1
58401: PLUS
58402: ARRAY
58403: ST_TO_ADDR
58404: GO 58407
58406: POP
58407: GO 58962
58409: LD_INT 2
58411: DOUBLE
58412: EQUAL
58413: IFTRUE 58423
58415: LD_INT 3
58417: DOUBLE
58418: EQUAL
58419: IFTRUE 58423
58421: GO 58479
58423: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58424: LD_ADDR_VAR 0 9
58428: PUSH
58429: LD_VAR 0 29
58433: PUSH
58434: LD_VAR 0 30
58438: PUSH
58439: LD_VAR 0 31
58443: PUSH
58444: LD_VAR 0 32
58448: PUSH
58449: LD_VAR 0 33
58453: PUSH
58454: LD_VAR 0 34
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: PUSH
58467: LD_VAR 0 4
58471: PUSH
58472: LD_INT 1
58474: PLUS
58475: ARRAY
58476: ST_TO_ADDR
58477: GO 58962
58479: LD_INT 16
58481: DOUBLE
58482: EQUAL
58483: IFTRUE 58541
58485: LD_INT 17
58487: DOUBLE
58488: EQUAL
58489: IFTRUE 58541
58491: LD_INT 18
58493: DOUBLE
58494: EQUAL
58495: IFTRUE 58541
58497: LD_INT 19
58499: DOUBLE
58500: EQUAL
58501: IFTRUE 58541
58503: LD_INT 22
58505: DOUBLE
58506: EQUAL
58507: IFTRUE 58541
58509: LD_INT 20
58511: DOUBLE
58512: EQUAL
58513: IFTRUE 58541
58515: LD_INT 21
58517: DOUBLE
58518: EQUAL
58519: IFTRUE 58541
58521: LD_INT 23
58523: DOUBLE
58524: EQUAL
58525: IFTRUE 58541
58527: LD_INT 24
58529: DOUBLE
58530: EQUAL
58531: IFTRUE 58541
58533: LD_INT 25
58535: DOUBLE
58536: EQUAL
58537: IFTRUE 58541
58539: GO 58597
58541: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58542: LD_ADDR_VAR 0 9
58546: PUSH
58547: LD_VAR 0 35
58551: PUSH
58552: LD_VAR 0 36
58556: PUSH
58557: LD_VAR 0 37
58561: PUSH
58562: LD_VAR 0 38
58566: PUSH
58567: LD_VAR 0 39
58571: PUSH
58572: LD_VAR 0 40
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: PUSH
58585: LD_VAR 0 4
58589: PUSH
58590: LD_INT 1
58592: PLUS
58593: ARRAY
58594: ST_TO_ADDR
58595: GO 58962
58597: LD_INT 6
58599: DOUBLE
58600: EQUAL
58601: IFTRUE 58653
58603: LD_INT 7
58605: DOUBLE
58606: EQUAL
58607: IFTRUE 58653
58609: LD_INT 8
58611: DOUBLE
58612: EQUAL
58613: IFTRUE 58653
58615: LD_INT 13
58617: DOUBLE
58618: EQUAL
58619: IFTRUE 58653
58621: LD_INT 12
58623: DOUBLE
58624: EQUAL
58625: IFTRUE 58653
58627: LD_INT 15
58629: DOUBLE
58630: EQUAL
58631: IFTRUE 58653
58633: LD_INT 11
58635: DOUBLE
58636: EQUAL
58637: IFTRUE 58653
58639: LD_INT 14
58641: DOUBLE
58642: EQUAL
58643: IFTRUE 58653
58645: LD_INT 10
58647: DOUBLE
58648: EQUAL
58649: IFTRUE 58653
58651: GO 58709
58653: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58654: LD_ADDR_VAR 0 9
58658: PUSH
58659: LD_VAR 0 41
58663: PUSH
58664: LD_VAR 0 42
58668: PUSH
58669: LD_VAR 0 43
58673: PUSH
58674: LD_VAR 0 44
58678: PUSH
58679: LD_VAR 0 45
58683: PUSH
58684: LD_VAR 0 46
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: PUSH
58697: LD_VAR 0 4
58701: PUSH
58702: LD_INT 1
58704: PLUS
58705: ARRAY
58706: ST_TO_ADDR
58707: GO 58962
58709: LD_INT 36
58711: DOUBLE
58712: EQUAL
58713: IFTRUE 58717
58715: GO 58773
58717: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58718: LD_ADDR_VAR 0 9
58722: PUSH
58723: LD_VAR 0 47
58727: PUSH
58728: LD_VAR 0 48
58732: PUSH
58733: LD_VAR 0 49
58737: PUSH
58738: LD_VAR 0 50
58742: PUSH
58743: LD_VAR 0 51
58747: PUSH
58748: LD_VAR 0 52
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: PUSH
58761: LD_VAR 0 4
58765: PUSH
58766: LD_INT 1
58768: PLUS
58769: ARRAY
58770: ST_TO_ADDR
58771: GO 58962
58773: LD_INT 4
58775: DOUBLE
58776: EQUAL
58777: IFTRUE 58799
58779: LD_INT 5
58781: DOUBLE
58782: EQUAL
58783: IFTRUE 58799
58785: LD_INT 34
58787: DOUBLE
58788: EQUAL
58789: IFTRUE 58799
58791: LD_INT 37
58793: DOUBLE
58794: EQUAL
58795: IFTRUE 58799
58797: GO 58855
58799: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58800: LD_ADDR_VAR 0 9
58804: PUSH
58805: LD_VAR 0 53
58809: PUSH
58810: LD_VAR 0 54
58814: PUSH
58815: LD_VAR 0 55
58819: PUSH
58820: LD_VAR 0 56
58824: PUSH
58825: LD_VAR 0 57
58829: PUSH
58830: LD_VAR 0 58
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: PUSH
58843: LD_VAR 0 4
58847: PUSH
58848: LD_INT 1
58850: PLUS
58851: ARRAY
58852: ST_TO_ADDR
58853: GO 58962
58855: LD_INT 31
58857: DOUBLE
58858: EQUAL
58859: IFTRUE 58905
58861: LD_INT 32
58863: DOUBLE
58864: EQUAL
58865: IFTRUE 58905
58867: LD_INT 33
58869: DOUBLE
58870: EQUAL
58871: IFTRUE 58905
58873: LD_INT 27
58875: DOUBLE
58876: EQUAL
58877: IFTRUE 58905
58879: LD_INT 26
58881: DOUBLE
58882: EQUAL
58883: IFTRUE 58905
58885: LD_INT 28
58887: DOUBLE
58888: EQUAL
58889: IFTRUE 58905
58891: LD_INT 29
58893: DOUBLE
58894: EQUAL
58895: IFTRUE 58905
58897: LD_INT 30
58899: DOUBLE
58900: EQUAL
58901: IFTRUE 58905
58903: GO 58961
58905: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58906: LD_ADDR_VAR 0 9
58910: PUSH
58911: LD_VAR 0 59
58915: PUSH
58916: LD_VAR 0 60
58920: PUSH
58921: LD_VAR 0 61
58925: PUSH
58926: LD_VAR 0 62
58930: PUSH
58931: LD_VAR 0 63
58935: PUSH
58936: LD_VAR 0 64
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: PUSH
58949: LD_VAR 0 4
58953: PUSH
58954: LD_INT 1
58956: PLUS
58957: ARRAY
58958: ST_TO_ADDR
58959: GO 58962
58961: POP
// temp_list2 = [ ] ;
58962: LD_ADDR_VAR 0 10
58966: PUSH
58967: EMPTY
58968: ST_TO_ADDR
// for i in temp_list do
58969: LD_ADDR_VAR 0 8
58973: PUSH
58974: LD_VAR 0 9
58978: PUSH
58979: FOR_IN
58980: IFFALSE 59032
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58982: LD_ADDR_VAR 0 10
58986: PUSH
58987: LD_VAR 0 10
58991: PUSH
58992: LD_VAR 0 8
58996: PUSH
58997: LD_INT 1
58999: ARRAY
59000: PUSH
59001: LD_VAR 0 2
59005: PLUS
59006: PUSH
59007: LD_VAR 0 8
59011: PUSH
59012: LD_INT 2
59014: ARRAY
59015: PUSH
59016: LD_VAR 0 3
59020: PLUS
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: EMPTY
59027: LIST
59028: ADD
59029: ST_TO_ADDR
59030: GO 58979
59032: POP
59033: POP
// result = temp_list2 ;
59034: LD_ADDR_VAR 0 7
59038: PUSH
59039: LD_VAR 0 10
59043: ST_TO_ADDR
// end ;
59044: LD_VAR 0 7
59048: RET
// export function EnemyInRange ( unit , dist ) ; begin
59049: LD_INT 0
59051: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59052: LD_ADDR_VAR 0 3
59056: PUSH
59057: LD_VAR 0 1
59061: PPUSH
59062: CALL_OW 255
59066: PPUSH
59067: LD_VAR 0 1
59071: PPUSH
59072: CALL_OW 250
59076: PPUSH
59077: LD_VAR 0 1
59081: PPUSH
59082: CALL_OW 251
59086: PPUSH
59087: LD_VAR 0 2
59091: PPUSH
59092: CALL 32422 0 4
59096: PUSH
59097: LD_INT 4
59099: ARRAY
59100: ST_TO_ADDR
// end ;
59101: LD_VAR 0 3
59105: RET
// export function PlayerSeeMe ( unit ) ; begin
59106: LD_INT 0
59108: PPUSH
// result := See ( your_side , unit ) ;
59109: LD_ADDR_VAR 0 2
59113: PUSH
59114: LD_OWVAR 2
59118: PPUSH
59119: LD_VAR 0 1
59123: PPUSH
59124: CALL_OW 292
59128: ST_TO_ADDR
// end ;
59129: LD_VAR 0 2
59133: RET
// export function ReverseDir ( unit ) ; begin
59134: LD_INT 0
59136: PPUSH
// if not unit then
59137: LD_VAR 0 1
59141: NOT
59142: IFFALSE 59146
// exit ;
59144: GO 59169
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59146: LD_ADDR_VAR 0 2
59150: PUSH
59151: LD_VAR 0 1
59155: PPUSH
59156: CALL_OW 254
59160: PUSH
59161: LD_INT 3
59163: PLUS
59164: PUSH
59165: LD_INT 6
59167: MOD
59168: ST_TO_ADDR
// end ;
59169: LD_VAR 0 2
59173: RET
// export function ReverseArray ( array ) ; var i ; begin
59174: LD_INT 0
59176: PPUSH
59177: PPUSH
// if not array then
59178: LD_VAR 0 1
59182: NOT
59183: IFFALSE 59187
// exit ;
59185: GO 59242
// result := [ ] ;
59187: LD_ADDR_VAR 0 2
59191: PUSH
59192: EMPTY
59193: ST_TO_ADDR
// for i := array downto 1 do
59194: LD_ADDR_VAR 0 3
59198: PUSH
59199: DOUBLE
59200: LD_VAR 0 1
59204: INC
59205: ST_TO_ADDR
59206: LD_INT 1
59208: PUSH
59209: FOR_DOWNTO
59210: IFFALSE 59240
// result := Join ( result , array [ i ] ) ;
59212: LD_ADDR_VAR 0 2
59216: PUSH
59217: LD_VAR 0 2
59221: PPUSH
59222: LD_VAR 0 1
59226: PUSH
59227: LD_VAR 0 3
59231: ARRAY
59232: PPUSH
59233: CALL 63898 0 2
59237: ST_TO_ADDR
59238: GO 59209
59240: POP
59241: POP
// end ;
59242: LD_VAR 0 2
59246: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59247: LD_INT 0
59249: PPUSH
59250: PPUSH
59251: PPUSH
59252: PPUSH
59253: PPUSH
59254: PPUSH
// if not unit or not hexes then
59255: LD_VAR 0 1
59259: NOT
59260: PUSH
59261: LD_VAR 0 2
59265: NOT
59266: OR
59267: IFFALSE 59271
// exit ;
59269: GO 59394
// dist := 9999 ;
59271: LD_ADDR_VAR 0 5
59275: PUSH
59276: LD_INT 9999
59278: ST_TO_ADDR
// for i = 1 to hexes do
59279: LD_ADDR_VAR 0 4
59283: PUSH
59284: DOUBLE
59285: LD_INT 1
59287: DEC
59288: ST_TO_ADDR
59289: LD_VAR 0 2
59293: PUSH
59294: FOR_TO
59295: IFFALSE 59382
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59297: LD_ADDR_VAR 0 6
59301: PUSH
59302: LD_VAR 0 1
59306: PPUSH
59307: LD_VAR 0 2
59311: PUSH
59312: LD_VAR 0 4
59316: ARRAY
59317: PUSH
59318: LD_INT 1
59320: ARRAY
59321: PPUSH
59322: LD_VAR 0 2
59326: PUSH
59327: LD_VAR 0 4
59331: ARRAY
59332: PUSH
59333: LD_INT 2
59335: ARRAY
59336: PPUSH
59337: CALL_OW 297
59341: ST_TO_ADDR
// if tdist < dist then
59342: LD_VAR 0 6
59346: PUSH
59347: LD_VAR 0 5
59351: LESS
59352: IFFALSE 59380
// begin hex := hexes [ i ] ;
59354: LD_ADDR_VAR 0 8
59358: PUSH
59359: LD_VAR 0 2
59363: PUSH
59364: LD_VAR 0 4
59368: ARRAY
59369: ST_TO_ADDR
// dist := tdist ;
59370: LD_ADDR_VAR 0 5
59374: PUSH
59375: LD_VAR 0 6
59379: ST_TO_ADDR
// end ; end ;
59380: GO 59294
59382: POP
59383: POP
// result := hex ;
59384: LD_ADDR_VAR 0 3
59388: PUSH
59389: LD_VAR 0 8
59393: ST_TO_ADDR
// end ;
59394: LD_VAR 0 3
59398: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59399: LD_INT 0
59401: PPUSH
59402: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59403: LD_VAR 0 1
59407: NOT
59408: PUSH
59409: LD_VAR 0 1
59413: PUSH
59414: LD_INT 21
59416: PUSH
59417: LD_INT 2
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 23
59426: PUSH
59427: LD_INT 2
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PPUSH
59438: CALL_OW 69
59442: IN
59443: NOT
59444: OR
59445: IFFALSE 59449
// exit ;
59447: GO 59496
// for i = 1 to 3 do
59449: LD_ADDR_VAR 0 3
59453: PUSH
59454: DOUBLE
59455: LD_INT 1
59457: DEC
59458: ST_TO_ADDR
59459: LD_INT 3
59461: PUSH
59462: FOR_TO
59463: IFFALSE 59494
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59465: LD_VAR 0 1
59469: PPUSH
59470: CALL_OW 250
59474: PPUSH
59475: LD_VAR 0 1
59479: PPUSH
59480: CALL_OW 251
59484: PPUSH
59485: LD_INT 1
59487: PPUSH
59488: CALL_OW 453
59492: GO 59462
59494: POP
59495: POP
// end ;
59496: LD_VAR 0 2
59500: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59501: LD_INT 0
59503: PPUSH
59504: PPUSH
59505: PPUSH
59506: PPUSH
59507: PPUSH
59508: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59509: LD_VAR 0 1
59513: NOT
59514: PUSH
59515: LD_VAR 0 2
59519: NOT
59520: OR
59521: PUSH
59522: LD_VAR 0 1
59526: PPUSH
59527: CALL_OW 314
59531: OR
59532: IFFALSE 59536
// exit ;
59534: GO 60003
// if GetLives ( i ) < 250 then
59536: LD_VAR 0 4
59540: PPUSH
59541: CALL_OW 256
59545: PUSH
59546: LD_INT 250
59548: LESS
59549: IFFALSE 59562
// begin ComAutodestruct ( i ) ;
59551: LD_VAR 0 4
59555: PPUSH
59556: CALL 59399 0 1
// exit ;
59560: GO 60003
// end ; x := GetX ( enemy_unit ) ;
59562: LD_ADDR_VAR 0 7
59566: PUSH
59567: LD_VAR 0 2
59571: PPUSH
59572: CALL_OW 250
59576: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59577: LD_ADDR_VAR 0 8
59581: PUSH
59582: LD_VAR 0 2
59586: PPUSH
59587: CALL_OW 251
59591: ST_TO_ADDR
// if not x or not y then
59592: LD_VAR 0 7
59596: NOT
59597: PUSH
59598: LD_VAR 0 8
59602: NOT
59603: OR
59604: IFFALSE 59608
// exit ;
59606: GO 60003
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59608: LD_ADDR_VAR 0 6
59612: PUSH
59613: LD_VAR 0 7
59617: PPUSH
59618: LD_INT 0
59620: PPUSH
59621: LD_INT 4
59623: PPUSH
59624: CALL_OW 272
59628: PUSH
59629: LD_VAR 0 8
59633: PPUSH
59634: LD_INT 0
59636: PPUSH
59637: LD_INT 4
59639: PPUSH
59640: CALL_OW 273
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_VAR 0 7
59653: PPUSH
59654: LD_INT 1
59656: PPUSH
59657: LD_INT 4
59659: PPUSH
59660: CALL_OW 272
59664: PUSH
59665: LD_VAR 0 8
59669: PPUSH
59670: LD_INT 1
59672: PPUSH
59673: LD_INT 4
59675: PPUSH
59676: CALL_OW 273
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_VAR 0 7
59689: PPUSH
59690: LD_INT 2
59692: PPUSH
59693: LD_INT 4
59695: PPUSH
59696: CALL_OW 272
59700: PUSH
59701: LD_VAR 0 8
59705: PPUSH
59706: LD_INT 2
59708: PPUSH
59709: LD_INT 4
59711: PPUSH
59712: CALL_OW 273
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_VAR 0 7
59725: PPUSH
59726: LD_INT 3
59728: PPUSH
59729: LD_INT 4
59731: PPUSH
59732: CALL_OW 272
59736: PUSH
59737: LD_VAR 0 8
59741: PPUSH
59742: LD_INT 3
59744: PPUSH
59745: LD_INT 4
59747: PPUSH
59748: CALL_OW 273
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_VAR 0 7
59761: PPUSH
59762: LD_INT 4
59764: PPUSH
59765: LD_INT 4
59767: PPUSH
59768: CALL_OW 272
59772: PUSH
59773: LD_VAR 0 8
59777: PPUSH
59778: LD_INT 4
59780: PPUSH
59781: LD_INT 4
59783: PPUSH
59784: CALL_OW 273
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_VAR 0 7
59797: PPUSH
59798: LD_INT 5
59800: PPUSH
59801: LD_INT 4
59803: PPUSH
59804: CALL_OW 272
59808: PUSH
59809: LD_VAR 0 8
59813: PPUSH
59814: LD_INT 5
59816: PPUSH
59817: LD_INT 4
59819: PPUSH
59820: CALL_OW 273
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: ST_TO_ADDR
// for i = tmp downto 1 do
59837: LD_ADDR_VAR 0 4
59841: PUSH
59842: DOUBLE
59843: LD_VAR 0 6
59847: INC
59848: ST_TO_ADDR
59849: LD_INT 1
59851: PUSH
59852: FOR_DOWNTO
59853: IFFALSE 59954
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59855: LD_VAR 0 6
59859: PUSH
59860: LD_VAR 0 4
59864: ARRAY
59865: PUSH
59866: LD_INT 1
59868: ARRAY
59869: PPUSH
59870: LD_VAR 0 6
59874: PUSH
59875: LD_VAR 0 4
59879: ARRAY
59880: PUSH
59881: LD_INT 2
59883: ARRAY
59884: PPUSH
59885: CALL_OW 488
59889: NOT
59890: PUSH
59891: LD_VAR 0 6
59895: PUSH
59896: LD_VAR 0 4
59900: ARRAY
59901: PUSH
59902: LD_INT 1
59904: ARRAY
59905: PPUSH
59906: LD_VAR 0 6
59910: PUSH
59911: LD_VAR 0 4
59915: ARRAY
59916: PUSH
59917: LD_INT 2
59919: ARRAY
59920: PPUSH
59921: CALL_OW 428
59925: PUSH
59926: LD_INT 0
59928: NONEQUAL
59929: OR
59930: IFFALSE 59952
// tmp := Delete ( tmp , i ) ;
59932: LD_ADDR_VAR 0 6
59936: PUSH
59937: LD_VAR 0 6
59941: PPUSH
59942: LD_VAR 0 4
59946: PPUSH
59947: CALL_OW 3
59951: ST_TO_ADDR
59952: GO 59852
59954: POP
59955: POP
// j := GetClosestHex ( unit , tmp ) ;
59956: LD_ADDR_VAR 0 5
59960: PUSH
59961: LD_VAR 0 1
59965: PPUSH
59966: LD_VAR 0 6
59970: PPUSH
59971: CALL 59247 0 2
59975: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59976: LD_VAR 0 1
59980: PPUSH
59981: LD_VAR 0 5
59985: PUSH
59986: LD_INT 1
59988: ARRAY
59989: PPUSH
59990: LD_VAR 0 5
59994: PUSH
59995: LD_INT 2
59997: ARRAY
59998: PPUSH
59999: CALL_OW 111
// end ;
60003: LD_VAR 0 3
60007: RET
// export function PrepareApemanSoldier ( ) ; begin
60008: LD_INT 0
60010: PPUSH
// uc_nation := 0 ;
60011: LD_ADDR_OWVAR 21
60015: PUSH
60016: LD_INT 0
60018: ST_TO_ADDR
// hc_sex := sex_male ;
60019: LD_ADDR_OWVAR 27
60023: PUSH
60024: LD_INT 1
60026: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60027: LD_ADDR_OWVAR 28
60031: PUSH
60032: LD_INT 15
60034: ST_TO_ADDR
// hc_gallery :=  ;
60035: LD_ADDR_OWVAR 33
60039: PUSH
60040: LD_STRING 
60042: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60043: LD_ADDR_OWVAR 31
60047: PUSH
60048: LD_INT 0
60050: PPUSH
60051: LD_INT 3
60053: PPUSH
60054: CALL_OW 12
60058: PUSH
60059: LD_INT 0
60061: PPUSH
60062: LD_INT 3
60064: PPUSH
60065: CALL_OW 12
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: ST_TO_ADDR
// end ;
60082: LD_VAR 0 1
60086: RET
// export function PrepareApemanEngineer ( ) ; begin
60087: LD_INT 0
60089: PPUSH
// uc_nation := 0 ;
60090: LD_ADDR_OWVAR 21
60094: PUSH
60095: LD_INT 0
60097: ST_TO_ADDR
// hc_sex := sex_male ;
60098: LD_ADDR_OWVAR 27
60102: PUSH
60103: LD_INT 1
60105: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60106: LD_ADDR_OWVAR 28
60110: PUSH
60111: LD_INT 16
60113: ST_TO_ADDR
// hc_gallery :=  ;
60114: LD_ADDR_OWVAR 33
60118: PUSH
60119: LD_STRING 
60121: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60122: LD_ADDR_OWVAR 31
60126: PUSH
60127: LD_INT 0
60129: PPUSH
60130: LD_INT 3
60132: PPUSH
60133: CALL_OW 12
60137: PUSH
60138: LD_INT 0
60140: PPUSH
60141: LD_INT 3
60143: PPUSH
60144: CALL_OW 12
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: ST_TO_ADDR
// end ;
60161: LD_VAR 0 1
60165: RET
// export function PrepareApeman ( agressivity ) ; begin
60166: LD_INT 0
60168: PPUSH
// uc_side := 0 ;
60169: LD_ADDR_OWVAR 20
60173: PUSH
60174: LD_INT 0
60176: ST_TO_ADDR
// uc_nation := 0 ;
60177: LD_ADDR_OWVAR 21
60181: PUSH
60182: LD_INT 0
60184: ST_TO_ADDR
// hc_sex := sex_male ;
60185: LD_ADDR_OWVAR 27
60189: PUSH
60190: LD_INT 1
60192: ST_TO_ADDR
// hc_class := class_apeman ;
60193: LD_ADDR_OWVAR 28
60197: PUSH
60198: LD_INT 12
60200: ST_TO_ADDR
// hc_gallery :=  ;
60201: LD_ADDR_OWVAR 33
60205: PUSH
60206: LD_STRING 
60208: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60209: LD_ADDR_OWVAR 35
60213: PUSH
60214: LD_VAR 0 1
60218: NEG
60219: PPUSH
60220: LD_VAR 0 1
60224: PPUSH
60225: CALL_OW 12
60229: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60230: LD_ADDR_OWVAR 31
60234: PUSH
60235: LD_INT 0
60237: PPUSH
60238: LD_INT 3
60240: PPUSH
60241: CALL_OW 12
60245: PUSH
60246: LD_INT 0
60248: PPUSH
60249: LD_INT 3
60251: PPUSH
60252: CALL_OW 12
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: ST_TO_ADDR
// end ;
60269: LD_VAR 0 2
60273: RET
// export function PrepareTiger ( agressivity ) ; begin
60274: LD_INT 0
60276: PPUSH
// uc_side := 0 ;
60277: LD_ADDR_OWVAR 20
60281: PUSH
60282: LD_INT 0
60284: ST_TO_ADDR
// uc_nation := 0 ;
60285: LD_ADDR_OWVAR 21
60289: PUSH
60290: LD_INT 0
60292: ST_TO_ADDR
// hc_class := class_tiger ;
60293: LD_ADDR_OWVAR 28
60297: PUSH
60298: LD_INT 14
60300: ST_TO_ADDR
// hc_gallery :=  ;
60301: LD_ADDR_OWVAR 33
60305: PUSH
60306: LD_STRING 
60308: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60309: LD_ADDR_OWVAR 35
60313: PUSH
60314: LD_VAR 0 1
60318: NEG
60319: PPUSH
60320: LD_VAR 0 1
60324: PPUSH
60325: CALL_OW 12
60329: ST_TO_ADDR
// end ;
60330: LD_VAR 0 2
60334: RET
// export function PrepareEnchidna ( ) ; begin
60335: LD_INT 0
60337: PPUSH
// uc_side := 0 ;
60338: LD_ADDR_OWVAR 20
60342: PUSH
60343: LD_INT 0
60345: ST_TO_ADDR
// uc_nation := 0 ;
60346: LD_ADDR_OWVAR 21
60350: PUSH
60351: LD_INT 0
60353: ST_TO_ADDR
// hc_class := class_baggie ;
60354: LD_ADDR_OWVAR 28
60358: PUSH
60359: LD_INT 13
60361: ST_TO_ADDR
// hc_gallery :=  ;
60362: LD_ADDR_OWVAR 33
60366: PUSH
60367: LD_STRING 
60369: ST_TO_ADDR
// end ;
60370: LD_VAR 0 1
60374: RET
// export function PrepareFrog ( ) ; begin
60375: LD_INT 0
60377: PPUSH
// uc_side := 0 ;
60378: LD_ADDR_OWVAR 20
60382: PUSH
60383: LD_INT 0
60385: ST_TO_ADDR
// uc_nation := 0 ;
60386: LD_ADDR_OWVAR 21
60390: PUSH
60391: LD_INT 0
60393: ST_TO_ADDR
// hc_class := class_frog ;
60394: LD_ADDR_OWVAR 28
60398: PUSH
60399: LD_INT 19
60401: ST_TO_ADDR
// hc_gallery :=  ;
60402: LD_ADDR_OWVAR 33
60406: PUSH
60407: LD_STRING 
60409: ST_TO_ADDR
// end ;
60410: LD_VAR 0 1
60414: RET
// export function PrepareFish ( ) ; begin
60415: LD_INT 0
60417: PPUSH
// uc_side := 0 ;
60418: LD_ADDR_OWVAR 20
60422: PUSH
60423: LD_INT 0
60425: ST_TO_ADDR
// uc_nation := 0 ;
60426: LD_ADDR_OWVAR 21
60430: PUSH
60431: LD_INT 0
60433: ST_TO_ADDR
// hc_class := class_fish ;
60434: LD_ADDR_OWVAR 28
60438: PUSH
60439: LD_INT 20
60441: ST_TO_ADDR
// hc_gallery :=  ;
60442: LD_ADDR_OWVAR 33
60446: PUSH
60447: LD_STRING 
60449: ST_TO_ADDR
// end ;
60450: LD_VAR 0 1
60454: RET
// export function PrepareBird ( ) ; begin
60455: LD_INT 0
60457: PPUSH
// uc_side := 0 ;
60458: LD_ADDR_OWVAR 20
60462: PUSH
60463: LD_INT 0
60465: ST_TO_ADDR
// uc_nation := 0 ;
60466: LD_ADDR_OWVAR 21
60470: PUSH
60471: LD_INT 0
60473: ST_TO_ADDR
// hc_class := class_phororhacos ;
60474: LD_ADDR_OWVAR 28
60478: PUSH
60479: LD_INT 18
60481: ST_TO_ADDR
// hc_gallery :=  ;
60482: LD_ADDR_OWVAR 33
60486: PUSH
60487: LD_STRING 
60489: ST_TO_ADDR
// end ;
60490: LD_VAR 0 1
60494: RET
// export function PrepareHorse ( ) ; begin
60495: LD_INT 0
60497: PPUSH
// uc_side := 0 ;
60498: LD_ADDR_OWVAR 20
60502: PUSH
60503: LD_INT 0
60505: ST_TO_ADDR
// uc_nation := 0 ;
60506: LD_ADDR_OWVAR 21
60510: PUSH
60511: LD_INT 0
60513: ST_TO_ADDR
// hc_class := class_horse ;
60514: LD_ADDR_OWVAR 28
60518: PUSH
60519: LD_INT 21
60521: ST_TO_ADDR
// hc_gallery :=  ;
60522: LD_ADDR_OWVAR 33
60526: PUSH
60527: LD_STRING 
60529: ST_TO_ADDR
// end ;
60530: LD_VAR 0 1
60534: RET
// export function PrepareMastodont ( ) ; begin
60535: LD_INT 0
60537: PPUSH
// uc_side := 0 ;
60538: LD_ADDR_OWVAR 20
60542: PUSH
60543: LD_INT 0
60545: ST_TO_ADDR
// uc_nation := 0 ;
60546: LD_ADDR_OWVAR 21
60550: PUSH
60551: LD_INT 0
60553: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60554: LD_ADDR_OWVAR 37
60558: PUSH
60559: LD_INT 31
60561: ST_TO_ADDR
// vc_control := control_rider ;
60562: LD_ADDR_OWVAR 38
60566: PUSH
60567: LD_INT 4
60569: ST_TO_ADDR
// end ;
60570: LD_VAR 0 1
60574: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60575: LD_INT 0
60577: PPUSH
60578: PPUSH
60579: PPUSH
// uc_side = 0 ;
60580: LD_ADDR_OWVAR 20
60584: PUSH
60585: LD_INT 0
60587: ST_TO_ADDR
// uc_nation = 0 ;
60588: LD_ADDR_OWVAR 21
60592: PUSH
60593: LD_INT 0
60595: ST_TO_ADDR
// InitHc_All ( ) ;
60596: CALL_OW 584
// InitVc ;
60600: CALL_OW 20
// if mastodonts then
60604: LD_VAR 0 6
60608: IFFALSE 60675
// for i = 1 to mastodonts do
60610: LD_ADDR_VAR 0 11
60614: PUSH
60615: DOUBLE
60616: LD_INT 1
60618: DEC
60619: ST_TO_ADDR
60620: LD_VAR 0 6
60624: PUSH
60625: FOR_TO
60626: IFFALSE 60673
// begin vc_chassis := 31 ;
60628: LD_ADDR_OWVAR 37
60632: PUSH
60633: LD_INT 31
60635: ST_TO_ADDR
// vc_control := control_rider ;
60636: LD_ADDR_OWVAR 38
60640: PUSH
60641: LD_INT 4
60643: ST_TO_ADDR
// animal := CreateVehicle ;
60644: LD_ADDR_VAR 0 12
60648: PUSH
60649: CALL_OW 45
60653: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60654: LD_VAR 0 12
60658: PPUSH
60659: LD_VAR 0 8
60663: PPUSH
60664: LD_INT 0
60666: PPUSH
60667: CALL 62803 0 3
// end ;
60671: GO 60625
60673: POP
60674: POP
// if horses then
60675: LD_VAR 0 5
60679: IFFALSE 60746
// for i = 1 to horses do
60681: LD_ADDR_VAR 0 11
60685: PUSH
60686: DOUBLE
60687: LD_INT 1
60689: DEC
60690: ST_TO_ADDR
60691: LD_VAR 0 5
60695: PUSH
60696: FOR_TO
60697: IFFALSE 60744
// begin hc_class := 21 ;
60699: LD_ADDR_OWVAR 28
60703: PUSH
60704: LD_INT 21
60706: ST_TO_ADDR
// hc_gallery :=  ;
60707: LD_ADDR_OWVAR 33
60711: PUSH
60712: LD_STRING 
60714: ST_TO_ADDR
// animal := CreateHuman ;
60715: LD_ADDR_VAR 0 12
60719: PUSH
60720: CALL_OW 44
60724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60725: LD_VAR 0 12
60729: PPUSH
60730: LD_VAR 0 8
60734: PPUSH
60735: LD_INT 0
60737: PPUSH
60738: CALL 62803 0 3
// end ;
60742: GO 60696
60744: POP
60745: POP
// if birds then
60746: LD_VAR 0 1
60750: IFFALSE 60817
// for i = 1 to birds do
60752: LD_ADDR_VAR 0 11
60756: PUSH
60757: DOUBLE
60758: LD_INT 1
60760: DEC
60761: ST_TO_ADDR
60762: LD_VAR 0 1
60766: PUSH
60767: FOR_TO
60768: IFFALSE 60815
// begin hc_class := 18 ;
60770: LD_ADDR_OWVAR 28
60774: PUSH
60775: LD_INT 18
60777: ST_TO_ADDR
// hc_gallery =  ;
60778: LD_ADDR_OWVAR 33
60782: PUSH
60783: LD_STRING 
60785: ST_TO_ADDR
// animal := CreateHuman ;
60786: LD_ADDR_VAR 0 12
60790: PUSH
60791: CALL_OW 44
60795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60796: LD_VAR 0 12
60800: PPUSH
60801: LD_VAR 0 8
60805: PPUSH
60806: LD_INT 0
60808: PPUSH
60809: CALL 62803 0 3
// end ;
60813: GO 60767
60815: POP
60816: POP
// if tigers then
60817: LD_VAR 0 2
60821: IFFALSE 60905
// for i = 1 to tigers do
60823: LD_ADDR_VAR 0 11
60827: PUSH
60828: DOUBLE
60829: LD_INT 1
60831: DEC
60832: ST_TO_ADDR
60833: LD_VAR 0 2
60837: PUSH
60838: FOR_TO
60839: IFFALSE 60903
// begin hc_class = class_tiger ;
60841: LD_ADDR_OWVAR 28
60845: PUSH
60846: LD_INT 14
60848: ST_TO_ADDR
// hc_gallery =  ;
60849: LD_ADDR_OWVAR 33
60853: PUSH
60854: LD_STRING 
60856: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60857: LD_ADDR_OWVAR 35
60861: PUSH
60862: LD_INT 7
60864: NEG
60865: PPUSH
60866: LD_INT 7
60868: PPUSH
60869: CALL_OW 12
60873: ST_TO_ADDR
// animal := CreateHuman ;
60874: LD_ADDR_VAR 0 12
60878: PUSH
60879: CALL_OW 44
60883: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60884: LD_VAR 0 12
60888: PPUSH
60889: LD_VAR 0 8
60893: PPUSH
60894: LD_INT 0
60896: PPUSH
60897: CALL 62803 0 3
// end ;
60901: GO 60838
60903: POP
60904: POP
// if apemans then
60905: LD_VAR 0 3
60909: IFFALSE 61032
// for i = 1 to apemans do
60911: LD_ADDR_VAR 0 11
60915: PUSH
60916: DOUBLE
60917: LD_INT 1
60919: DEC
60920: ST_TO_ADDR
60921: LD_VAR 0 3
60925: PUSH
60926: FOR_TO
60927: IFFALSE 61030
// begin hc_class = class_apeman ;
60929: LD_ADDR_OWVAR 28
60933: PUSH
60934: LD_INT 12
60936: ST_TO_ADDR
// hc_gallery =  ;
60937: LD_ADDR_OWVAR 33
60941: PUSH
60942: LD_STRING 
60944: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60945: LD_ADDR_OWVAR 35
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PPUSH
60954: LD_INT 2
60956: PPUSH
60957: CALL_OW 12
60961: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60962: LD_ADDR_OWVAR 31
60966: PUSH
60967: LD_INT 1
60969: PPUSH
60970: LD_INT 3
60972: PPUSH
60973: CALL_OW 12
60977: PUSH
60978: LD_INT 1
60980: PPUSH
60981: LD_INT 3
60983: PPUSH
60984: CALL_OW 12
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: ST_TO_ADDR
// animal := CreateHuman ;
61001: LD_ADDR_VAR 0 12
61005: PUSH
61006: CALL_OW 44
61010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61011: LD_VAR 0 12
61015: PPUSH
61016: LD_VAR 0 8
61020: PPUSH
61021: LD_INT 0
61023: PPUSH
61024: CALL 62803 0 3
// end ;
61028: GO 60926
61030: POP
61031: POP
// if enchidnas then
61032: LD_VAR 0 4
61036: IFFALSE 61103
// for i = 1 to enchidnas do
61038: LD_ADDR_VAR 0 11
61042: PUSH
61043: DOUBLE
61044: LD_INT 1
61046: DEC
61047: ST_TO_ADDR
61048: LD_VAR 0 4
61052: PUSH
61053: FOR_TO
61054: IFFALSE 61101
// begin hc_class = 13 ;
61056: LD_ADDR_OWVAR 28
61060: PUSH
61061: LD_INT 13
61063: ST_TO_ADDR
// hc_gallery =  ;
61064: LD_ADDR_OWVAR 33
61068: PUSH
61069: LD_STRING 
61071: ST_TO_ADDR
// animal := CreateHuman ;
61072: LD_ADDR_VAR 0 12
61076: PUSH
61077: CALL_OW 44
61081: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61082: LD_VAR 0 12
61086: PPUSH
61087: LD_VAR 0 8
61091: PPUSH
61092: LD_INT 0
61094: PPUSH
61095: CALL 62803 0 3
// end ;
61099: GO 61053
61101: POP
61102: POP
// if fishes then
61103: LD_VAR 0 7
61107: IFFALSE 61174
// for i = 1 to fishes do
61109: LD_ADDR_VAR 0 11
61113: PUSH
61114: DOUBLE
61115: LD_INT 1
61117: DEC
61118: ST_TO_ADDR
61119: LD_VAR 0 7
61123: PUSH
61124: FOR_TO
61125: IFFALSE 61172
// begin hc_class = 20 ;
61127: LD_ADDR_OWVAR 28
61131: PUSH
61132: LD_INT 20
61134: ST_TO_ADDR
// hc_gallery =  ;
61135: LD_ADDR_OWVAR 33
61139: PUSH
61140: LD_STRING 
61142: ST_TO_ADDR
// animal := CreateHuman ;
61143: LD_ADDR_VAR 0 12
61147: PUSH
61148: CALL_OW 44
61152: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61153: LD_VAR 0 12
61157: PPUSH
61158: LD_VAR 0 9
61162: PPUSH
61163: LD_INT 0
61165: PPUSH
61166: CALL 62803 0 3
// end ;
61170: GO 61124
61172: POP
61173: POP
// end ;
61174: LD_VAR 0 10
61178: RET
// export function WantHeal ( sci , unit ) ; begin
61179: LD_INT 0
61181: PPUSH
// if GetTaskList ( sci ) > 0 then
61182: LD_VAR 0 1
61186: PPUSH
61187: CALL_OW 437
61191: PUSH
61192: LD_INT 0
61194: GREATER
61195: IFFALSE 61265
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61197: LD_VAR 0 1
61201: PPUSH
61202: CALL_OW 437
61206: PUSH
61207: LD_INT 1
61209: ARRAY
61210: PUSH
61211: LD_INT 1
61213: ARRAY
61214: PUSH
61215: LD_STRING l
61217: EQUAL
61218: PUSH
61219: LD_VAR 0 1
61223: PPUSH
61224: CALL_OW 437
61228: PUSH
61229: LD_INT 1
61231: ARRAY
61232: PUSH
61233: LD_INT 4
61235: ARRAY
61236: PUSH
61237: LD_VAR 0 2
61241: EQUAL
61242: AND
61243: IFFALSE 61255
// result := true else
61245: LD_ADDR_VAR 0 3
61249: PUSH
61250: LD_INT 1
61252: ST_TO_ADDR
61253: GO 61263
// result := false ;
61255: LD_ADDR_VAR 0 3
61259: PUSH
61260: LD_INT 0
61262: ST_TO_ADDR
// end else
61263: GO 61273
// result := false ;
61265: LD_ADDR_VAR 0 3
61269: PUSH
61270: LD_INT 0
61272: ST_TO_ADDR
// end ;
61273: LD_VAR 0 3
61277: RET
// export function HealTarget ( sci ) ; begin
61278: LD_INT 0
61280: PPUSH
// if not sci then
61281: LD_VAR 0 1
61285: NOT
61286: IFFALSE 61290
// exit ;
61288: GO 61355
// result := 0 ;
61290: LD_ADDR_VAR 0 2
61294: PUSH
61295: LD_INT 0
61297: ST_TO_ADDR
// if GetTaskList ( sci ) then
61298: LD_VAR 0 1
61302: PPUSH
61303: CALL_OW 437
61307: IFFALSE 61355
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61309: LD_VAR 0 1
61313: PPUSH
61314: CALL_OW 437
61318: PUSH
61319: LD_INT 1
61321: ARRAY
61322: PUSH
61323: LD_INT 1
61325: ARRAY
61326: PUSH
61327: LD_STRING l
61329: EQUAL
61330: IFFALSE 61355
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61332: LD_ADDR_VAR 0 2
61336: PUSH
61337: LD_VAR 0 1
61341: PPUSH
61342: CALL_OW 437
61346: PUSH
61347: LD_INT 1
61349: ARRAY
61350: PUSH
61351: LD_INT 4
61353: ARRAY
61354: ST_TO_ADDR
// end ;
61355: LD_VAR 0 2
61359: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61360: LD_INT 0
61362: PPUSH
61363: PPUSH
61364: PPUSH
61365: PPUSH
// if not base_units then
61366: LD_VAR 0 1
61370: NOT
61371: IFFALSE 61375
// exit ;
61373: GO 61462
// result := false ;
61375: LD_ADDR_VAR 0 2
61379: PUSH
61380: LD_INT 0
61382: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61383: LD_ADDR_VAR 0 5
61387: PUSH
61388: LD_VAR 0 1
61392: PPUSH
61393: LD_INT 21
61395: PUSH
61396: LD_INT 3
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PPUSH
61403: CALL_OW 72
61407: ST_TO_ADDR
// if not tmp then
61408: LD_VAR 0 5
61412: NOT
61413: IFFALSE 61417
// exit ;
61415: GO 61462
// for i in tmp do
61417: LD_ADDR_VAR 0 3
61421: PUSH
61422: LD_VAR 0 5
61426: PUSH
61427: FOR_IN
61428: IFFALSE 61460
// begin result := EnemyInRange ( i , 22 ) ;
61430: LD_ADDR_VAR 0 2
61434: PUSH
61435: LD_VAR 0 3
61439: PPUSH
61440: LD_INT 22
61442: PPUSH
61443: CALL 59049 0 2
61447: ST_TO_ADDR
// if result then
61448: LD_VAR 0 2
61452: IFFALSE 61458
// exit ;
61454: POP
61455: POP
61456: GO 61462
// end ;
61458: GO 61427
61460: POP
61461: POP
// end ;
61462: LD_VAR 0 2
61466: RET
// export function FilterByTag ( units , tag ) ; begin
61467: LD_INT 0
61469: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61470: LD_ADDR_VAR 0 3
61474: PUSH
61475: LD_VAR 0 1
61479: PPUSH
61480: LD_INT 120
61482: PUSH
61483: LD_VAR 0 2
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PPUSH
61492: CALL_OW 72
61496: ST_TO_ADDR
// end ;
61497: LD_VAR 0 3
61501: RET
// export function IsDriver ( un ) ; begin
61502: LD_INT 0
61504: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61505: LD_ADDR_VAR 0 2
61509: PUSH
61510: LD_VAR 0 1
61514: PUSH
61515: LD_INT 55
61517: PUSH
61518: EMPTY
61519: LIST
61520: PPUSH
61521: CALL_OW 69
61525: IN
61526: ST_TO_ADDR
// end ;
61527: LD_VAR 0 2
61531: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61532: LD_INT 0
61534: PPUSH
61535: PPUSH
// list := [ ] ;
61536: LD_ADDR_VAR 0 5
61540: PUSH
61541: EMPTY
61542: ST_TO_ADDR
// case d of 0 :
61543: LD_VAR 0 3
61547: PUSH
61548: LD_INT 0
61550: DOUBLE
61551: EQUAL
61552: IFTRUE 61556
61554: GO 61689
61556: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61557: LD_ADDR_VAR 0 5
61561: PUSH
61562: LD_VAR 0 1
61566: PUSH
61567: LD_INT 4
61569: MINUS
61570: PUSH
61571: LD_VAR 0 2
61575: PUSH
61576: LD_INT 4
61578: MINUS
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: LIST
61587: PUSH
61588: LD_VAR 0 1
61592: PUSH
61593: LD_INT 3
61595: MINUS
61596: PUSH
61597: LD_VAR 0 2
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: PUSH
61610: LD_VAR 0 1
61614: PUSH
61615: LD_INT 4
61617: PLUS
61618: PUSH
61619: LD_VAR 0 2
61623: PUSH
61624: LD_INT 4
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: LIST
61631: PUSH
61632: LD_VAR 0 1
61636: PUSH
61637: LD_INT 3
61639: PLUS
61640: PUSH
61641: LD_VAR 0 2
61645: PUSH
61646: LD_INT 3
61648: PLUS
61649: PUSH
61650: LD_INT 5
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: PUSH
61658: LD_VAR 0 1
61662: PUSH
61663: LD_VAR 0 2
61667: PUSH
61668: LD_INT 4
61670: PLUS
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: LIST
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: ST_TO_ADDR
// end ; 1 :
61687: GO 62387
61689: LD_INT 1
61691: DOUBLE
61692: EQUAL
61693: IFTRUE 61697
61695: GO 61830
61697: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61698: LD_ADDR_VAR 0 5
61702: PUSH
61703: LD_VAR 0 1
61707: PUSH
61708: LD_VAR 0 2
61712: PUSH
61713: LD_INT 4
61715: MINUS
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: LIST
61724: PUSH
61725: LD_VAR 0 1
61729: PUSH
61730: LD_INT 3
61732: MINUS
61733: PUSH
61734: LD_VAR 0 2
61738: PUSH
61739: LD_INT 3
61741: MINUS
61742: PUSH
61743: LD_INT 2
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: LIST
61750: PUSH
61751: LD_VAR 0 1
61755: PUSH
61756: LD_INT 4
61758: MINUS
61759: PUSH
61760: LD_VAR 0 2
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: LIST
61772: PUSH
61773: LD_VAR 0 1
61777: PUSH
61778: LD_VAR 0 2
61782: PUSH
61783: LD_INT 3
61785: PLUS
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: LIST
61794: PUSH
61795: LD_VAR 0 1
61799: PUSH
61800: LD_INT 4
61802: PLUS
61803: PUSH
61804: LD_VAR 0 2
61808: PUSH
61809: LD_INT 4
61811: PLUS
61812: PUSH
61813: LD_INT 5
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: LIST
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: ST_TO_ADDR
// end ; 2 :
61828: GO 62387
61830: LD_INT 2
61832: DOUBLE
61833: EQUAL
61834: IFTRUE 61838
61836: GO 61967
61838: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61839: LD_ADDR_VAR 0 5
61843: PUSH
61844: LD_VAR 0 1
61848: PUSH
61849: LD_VAR 0 2
61853: PUSH
61854: LD_INT 3
61856: MINUS
61857: PUSH
61858: LD_INT 3
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: PUSH
61866: LD_VAR 0 1
61870: PUSH
61871: LD_INT 4
61873: PLUS
61874: PUSH
61875: LD_VAR 0 2
61879: PUSH
61880: LD_INT 4
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: LIST
61887: PUSH
61888: LD_VAR 0 1
61892: PUSH
61893: LD_VAR 0 2
61897: PUSH
61898: LD_INT 4
61900: PLUS
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: PUSH
61910: LD_VAR 0 1
61914: PUSH
61915: LD_INT 3
61917: MINUS
61918: PUSH
61919: LD_VAR 0 2
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: LIST
61931: PUSH
61932: LD_VAR 0 1
61936: PUSH
61937: LD_INT 4
61939: MINUS
61940: PUSH
61941: LD_VAR 0 2
61945: PUSH
61946: LD_INT 4
61948: MINUS
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: LIST
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: ST_TO_ADDR
// end ; 3 :
61965: GO 62387
61967: LD_INT 3
61969: DOUBLE
61970: EQUAL
61971: IFTRUE 61975
61973: GO 62108
61975: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61976: LD_ADDR_VAR 0 5
61980: PUSH
61981: LD_VAR 0 1
61985: PUSH
61986: LD_INT 3
61988: PLUS
61989: PUSH
61990: LD_VAR 0 2
61994: PUSH
61995: LD_INT 4
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: LIST
62002: PUSH
62003: LD_VAR 0 1
62007: PUSH
62008: LD_INT 4
62010: PLUS
62011: PUSH
62012: LD_VAR 0 2
62016: PUSH
62017: LD_INT 4
62019: PLUS
62020: PUSH
62021: LD_INT 5
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: LIST
62028: PUSH
62029: LD_VAR 0 1
62033: PUSH
62034: LD_INT 4
62036: MINUS
62037: PUSH
62038: LD_VAR 0 2
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: PUSH
62051: LD_VAR 0 1
62055: PUSH
62056: LD_VAR 0 2
62060: PUSH
62061: LD_INT 4
62063: MINUS
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: LIST
62072: PUSH
62073: LD_VAR 0 1
62077: PUSH
62078: LD_INT 3
62080: MINUS
62081: PUSH
62082: LD_VAR 0 2
62086: PUSH
62087: LD_INT 3
62089: MINUS
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: LIST
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: ST_TO_ADDR
// end ; 4 :
62106: GO 62387
62108: LD_INT 4
62110: DOUBLE
62111: EQUAL
62112: IFTRUE 62116
62114: GO 62249
62116: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62117: LD_ADDR_VAR 0 5
62121: PUSH
62122: LD_VAR 0 1
62126: PUSH
62127: LD_VAR 0 2
62131: PUSH
62132: LD_INT 4
62134: PLUS
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: LIST
62143: PUSH
62144: LD_VAR 0 1
62148: PUSH
62149: LD_INT 3
62151: PLUS
62152: PUSH
62153: LD_VAR 0 2
62157: PUSH
62158: LD_INT 3
62160: PLUS
62161: PUSH
62162: LD_INT 5
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: LIST
62169: PUSH
62170: LD_VAR 0 1
62174: PUSH
62175: LD_INT 4
62177: PLUS
62178: PUSH
62179: LD_VAR 0 2
62183: PUSH
62184: LD_INT 4
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: LIST
62191: PUSH
62192: LD_VAR 0 1
62196: PUSH
62197: LD_VAR 0 2
62201: PUSH
62202: LD_INT 3
62204: MINUS
62205: PUSH
62206: LD_INT 3
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: PUSH
62214: LD_VAR 0 1
62218: PUSH
62219: LD_INT 4
62221: MINUS
62222: PUSH
62223: LD_VAR 0 2
62227: PUSH
62228: LD_INT 4
62230: MINUS
62231: PUSH
62232: LD_INT 2
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: LIST
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: ST_TO_ADDR
// end ; 5 :
62247: GO 62387
62249: LD_INT 5
62251: DOUBLE
62252: EQUAL
62253: IFTRUE 62257
62255: GO 62386
62257: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62258: LD_ADDR_VAR 0 5
62262: PUSH
62263: LD_VAR 0 1
62267: PUSH
62268: LD_INT 4
62270: MINUS
62271: PUSH
62272: LD_VAR 0 2
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: LIST
62284: PUSH
62285: LD_VAR 0 1
62289: PUSH
62290: LD_VAR 0 2
62294: PUSH
62295: LD_INT 4
62297: MINUS
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: LIST
62306: PUSH
62307: LD_VAR 0 1
62311: PUSH
62312: LD_INT 4
62314: PLUS
62315: PUSH
62316: LD_VAR 0 2
62320: PUSH
62321: LD_INT 4
62323: PLUS
62324: PUSH
62325: LD_INT 5
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: LIST
62332: PUSH
62333: LD_VAR 0 1
62337: PUSH
62338: LD_INT 3
62340: PLUS
62341: PUSH
62342: LD_VAR 0 2
62346: PUSH
62347: LD_INT 4
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: LIST
62354: PUSH
62355: LD_VAR 0 1
62359: PUSH
62360: LD_VAR 0 2
62364: PUSH
62365: LD_INT 3
62367: PLUS
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: ST_TO_ADDR
// end ; end ;
62384: GO 62387
62386: POP
// result := list ;
62387: LD_ADDR_VAR 0 4
62391: PUSH
62392: LD_VAR 0 5
62396: ST_TO_ADDR
// end ;
62397: LD_VAR 0 4
62401: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62402: LD_INT 0
62404: PPUSH
62405: PPUSH
62406: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62407: LD_VAR 0 1
62411: NOT
62412: PUSH
62413: LD_VAR 0 2
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: LD_INT 2
62423: PUSH
62424: LD_INT 3
62426: PUSH
62427: LD_INT 4
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: IN
62436: NOT
62437: OR
62438: IFFALSE 62442
// exit ;
62440: GO 62525
// tmp := [ ] ;
62442: LD_ADDR_VAR 0 5
62446: PUSH
62447: EMPTY
62448: ST_TO_ADDR
// for i in units do
62449: LD_ADDR_VAR 0 4
62453: PUSH
62454: LD_VAR 0 1
62458: PUSH
62459: FOR_IN
62460: IFFALSE 62494
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62462: LD_ADDR_VAR 0 5
62466: PUSH
62467: LD_VAR 0 5
62471: PPUSH
62472: LD_VAR 0 4
62476: PPUSH
62477: LD_VAR 0 2
62481: PPUSH
62482: CALL_OW 259
62486: PPUSH
62487: CALL 63898 0 2
62491: ST_TO_ADDR
62492: GO 62459
62494: POP
62495: POP
// if not tmp then
62496: LD_VAR 0 5
62500: NOT
62501: IFFALSE 62505
// exit ;
62503: GO 62525
// result := SortListByListDesc ( units , tmp ) ;
62505: LD_ADDR_VAR 0 3
62509: PUSH
62510: LD_VAR 0 1
62514: PPUSH
62515: LD_VAR 0 5
62519: PPUSH
62520: CALL_OW 77
62524: ST_TO_ADDR
// end ;
62525: LD_VAR 0 3
62529: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62530: LD_INT 0
62532: PPUSH
62533: PPUSH
62534: PPUSH
// result := false ;
62535: LD_ADDR_VAR 0 3
62539: PUSH
62540: LD_INT 0
62542: ST_TO_ADDR
// if not building then
62543: LD_VAR 0 2
62547: NOT
62548: IFFALSE 62552
// exit ;
62550: GO 62690
// x := GetX ( building ) ;
62552: LD_ADDR_VAR 0 4
62556: PUSH
62557: LD_VAR 0 2
62561: PPUSH
62562: CALL_OW 250
62566: ST_TO_ADDR
// y := GetY ( building ) ;
62567: LD_ADDR_VAR 0 5
62571: PUSH
62572: LD_VAR 0 2
62576: PPUSH
62577: CALL_OW 251
62581: ST_TO_ADDR
// if not x or not y then
62582: LD_VAR 0 4
62586: NOT
62587: PUSH
62588: LD_VAR 0 5
62592: NOT
62593: OR
62594: IFFALSE 62598
// exit ;
62596: GO 62690
// if GetTaskList ( unit ) then
62598: LD_VAR 0 1
62602: PPUSH
62603: CALL_OW 437
62607: IFFALSE 62690
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62609: LD_STRING e
62611: PUSH
62612: LD_VAR 0 1
62616: PPUSH
62617: CALL_OW 437
62621: PUSH
62622: LD_INT 1
62624: ARRAY
62625: PUSH
62626: LD_INT 1
62628: ARRAY
62629: EQUAL
62630: PUSH
62631: LD_VAR 0 4
62635: PUSH
62636: LD_VAR 0 1
62640: PPUSH
62641: CALL_OW 437
62645: PUSH
62646: LD_INT 1
62648: ARRAY
62649: PUSH
62650: LD_INT 2
62652: ARRAY
62653: EQUAL
62654: AND
62655: PUSH
62656: LD_VAR 0 5
62660: PUSH
62661: LD_VAR 0 1
62665: PPUSH
62666: CALL_OW 437
62670: PUSH
62671: LD_INT 1
62673: ARRAY
62674: PUSH
62675: LD_INT 3
62677: ARRAY
62678: EQUAL
62679: AND
62680: IFFALSE 62690
// result := true end ;
62682: LD_ADDR_VAR 0 3
62686: PUSH
62687: LD_INT 1
62689: ST_TO_ADDR
// end ;
62690: LD_VAR 0 3
62694: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62695: LD_INT 0
62697: PPUSH
// result := false ;
62698: LD_ADDR_VAR 0 4
62702: PUSH
62703: LD_INT 0
62705: ST_TO_ADDR
// if GetTaskList ( unit ) then
62706: LD_VAR 0 1
62710: PPUSH
62711: CALL_OW 437
62715: IFFALSE 62798
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62717: LD_STRING M
62719: PUSH
62720: LD_VAR 0 1
62724: PPUSH
62725: CALL_OW 437
62729: PUSH
62730: LD_INT 1
62732: ARRAY
62733: PUSH
62734: LD_INT 1
62736: ARRAY
62737: EQUAL
62738: PUSH
62739: LD_VAR 0 2
62743: PUSH
62744: LD_VAR 0 1
62748: PPUSH
62749: CALL_OW 437
62753: PUSH
62754: LD_INT 1
62756: ARRAY
62757: PUSH
62758: LD_INT 2
62760: ARRAY
62761: EQUAL
62762: AND
62763: PUSH
62764: LD_VAR 0 3
62768: PUSH
62769: LD_VAR 0 1
62773: PPUSH
62774: CALL_OW 437
62778: PUSH
62779: LD_INT 1
62781: ARRAY
62782: PUSH
62783: LD_INT 3
62785: ARRAY
62786: EQUAL
62787: AND
62788: IFFALSE 62798
// result := true ;
62790: LD_ADDR_VAR 0 4
62794: PUSH
62795: LD_INT 1
62797: ST_TO_ADDR
// end ; end ;
62798: LD_VAR 0 4
62802: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62803: LD_INT 0
62805: PPUSH
62806: PPUSH
62807: PPUSH
62808: PPUSH
// if not unit or not area then
62809: LD_VAR 0 1
62813: NOT
62814: PUSH
62815: LD_VAR 0 2
62819: NOT
62820: OR
62821: IFFALSE 62825
// exit ;
62823: GO 63001
// tmp := AreaToList ( area , i ) ;
62825: LD_ADDR_VAR 0 6
62829: PUSH
62830: LD_VAR 0 2
62834: PPUSH
62835: LD_VAR 0 5
62839: PPUSH
62840: CALL_OW 517
62844: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62845: LD_ADDR_VAR 0 5
62849: PUSH
62850: DOUBLE
62851: LD_INT 1
62853: DEC
62854: ST_TO_ADDR
62855: LD_VAR 0 6
62859: PUSH
62860: LD_INT 1
62862: ARRAY
62863: PUSH
62864: FOR_TO
62865: IFFALSE 62999
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62867: LD_ADDR_VAR 0 7
62871: PUSH
62872: LD_VAR 0 6
62876: PUSH
62877: LD_INT 1
62879: ARRAY
62880: PUSH
62881: LD_VAR 0 5
62885: ARRAY
62886: PUSH
62887: LD_VAR 0 6
62891: PUSH
62892: LD_INT 2
62894: ARRAY
62895: PUSH
62896: LD_VAR 0 5
62900: ARRAY
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
62906: LD_INT 92
62908: PUSH
62909: LD_VAR 0 7
62913: PUSH
62914: LD_INT 1
62916: ARRAY
62917: PUSH
62918: LD_VAR 0 7
62922: PUSH
62923: LD_INT 2
62925: ARRAY
62926: PUSH
62927: LD_INT 2
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: PPUSH
62936: CALL_OW 69
62940: PUSH
62941: LD_INT 0
62943: EQUAL
62944: IFFALSE 62997
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62946: LD_VAR 0 1
62950: PPUSH
62951: LD_VAR 0 7
62955: PUSH
62956: LD_INT 1
62958: ARRAY
62959: PPUSH
62960: LD_VAR 0 7
62964: PUSH
62965: LD_INT 2
62967: ARRAY
62968: PPUSH
62969: LD_VAR 0 3
62973: PPUSH
62974: CALL_OW 48
// result := IsPlaced ( unit ) ;
62978: LD_ADDR_VAR 0 4
62982: PUSH
62983: LD_VAR 0 1
62987: PPUSH
62988: CALL_OW 305
62992: ST_TO_ADDR
// exit ;
62993: POP
62994: POP
62995: GO 63001
// end ; end ;
62997: GO 62864
62999: POP
63000: POP
// end ;
63001: LD_VAR 0 4
63005: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63006: LD_INT 0
63008: PPUSH
63009: PPUSH
63010: PPUSH
// if not side or side > 8 then
63011: LD_VAR 0 1
63015: NOT
63016: PUSH
63017: LD_VAR 0 1
63021: PUSH
63022: LD_INT 8
63024: GREATER
63025: OR
63026: IFFALSE 63030
// exit ;
63028: GO 63217
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63030: LD_ADDR_VAR 0 4
63034: PUSH
63035: LD_INT 22
63037: PUSH
63038: LD_VAR 0 1
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 21
63049: PUSH
63050: LD_INT 3
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PPUSH
63061: CALL_OW 69
63065: ST_TO_ADDR
// if not tmp then
63066: LD_VAR 0 4
63070: NOT
63071: IFFALSE 63075
// exit ;
63073: GO 63217
// enable_addtolog := true ;
63075: LD_ADDR_OWVAR 81
63079: PUSH
63080: LD_INT 1
63082: ST_TO_ADDR
// AddToLog ( [ ) ;
63083: LD_STRING [
63085: PPUSH
63086: CALL_OW 561
// for i in tmp do
63090: LD_ADDR_VAR 0 3
63094: PUSH
63095: LD_VAR 0 4
63099: PUSH
63100: FOR_IN
63101: IFFALSE 63208
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63103: LD_STRING [
63105: PUSH
63106: LD_VAR 0 3
63110: PPUSH
63111: CALL_OW 266
63115: STR
63116: PUSH
63117: LD_STRING , 
63119: STR
63120: PUSH
63121: LD_VAR 0 3
63125: PPUSH
63126: CALL_OW 250
63130: STR
63131: PUSH
63132: LD_STRING , 
63134: STR
63135: PUSH
63136: LD_VAR 0 3
63140: PPUSH
63141: CALL_OW 251
63145: STR
63146: PUSH
63147: LD_STRING , 
63149: STR
63150: PUSH
63151: LD_VAR 0 3
63155: PPUSH
63156: CALL_OW 254
63160: STR
63161: PUSH
63162: LD_STRING , 
63164: STR
63165: PUSH
63166: LD_VAR 0 3
63170: PPUSH
63171: LD_INT 1
63173: PPUSH
63174: CALL_OW 268
63178: STR
63179: PUSH
63180: LD_STRING , 
63182: STR
63183: PUSH
63184: LD_VAR 0 3
63188: PPUSH
63189: LD_INT 2
63191: PPUSH
63192: CALL_OW 268
63196: STR
63197: PUSH
63198: LD_STRING ],
63200: STR
63201: PPUSH
63202: CALL_OW 561
// end ;
63206: GO 63100
63208: POP
63209: POP
// AddToLog ( ]; ) ;
63210: LD_STRING ];
63212: PPUSH
63213: CALL_OW 561
// end ;
63217: LD_VAR 0 2
63221: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63222: LD_INT 0
63224: PPUSH
63225: PPUSH
63226: PPUSH
63227: PPUSH
63228: PPUSH
// if not area or not rate or not max then
63229: LD_VAR 0 1
63233: NOT
63234: PUSH
63235: LD_VAR 0 2
63239: NOT
63240: OR
63241: PUSH
63242: LD_VAR 0 4
63246: NOT
63247: OR
63248: IFFALSE 63252
// exit ;
63250: GO 63441
// while 1 do
63252: LD_INT 1
63254: IFFALSE 63441
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63256: LD_ADDR_VAR 0 9
63260: PUSH
63261: LD_VAR 0 1
63265: PPUSH
63266: LD_INT 1
63268: PPUSH
63269: CALL_OW 287
63273: PUSH
63274: LD_INT 10
63276: MUL
63277: ST_TO_ADDR
// r := rate / 10 ;
63278: LD_ADDR_VAR 0 7
63282: PUSH
63283: LD_VAR 0 2
63287: PUSH
63288: LD_INT 10
63290: DIVREAL
63291: ST_TO_ADDR
// time := 1 1$00 ;
63292: LD_ADDR_VAR 0 8
63296: PUSH
63297: LD_INT 2100
63299: ST_TO_ADDR
// if amount < min then
63300: LD_VAR 0 9
63304: PUSH
63305: LD_VAR 0 3
63309: LESS
63310: IFFALSE 63328
// r := r * 2 else
63312: LD_ADDR_VAR 0 7
63316: PUSH
63317: LD_VAR 0 7
63321: PUSH
63322: LD_INT 2
63324: MUL
63325: ST_TO_ADDR
63326: GO 63354
// if amount > max then
63328: LD_VAR 0 9
63332: PUSH
63333: LD_VAR 0 4
63337: GREATER
63338: IFFALSE 63354
// r := r / 2 ;
63340: LD_ADDR_VAR 0 7
63344: PUSH
63345: LD_VAR 0 7
63349: PUSH
63350: LD_INT 2
63352: DIVREAL
63353: ST_TO_ADDR
// time := time / r ;
63354: LD_ADDR_VAR 0 8
63358: PUSH
63359: LD_VAR 0 8
63363: PUSH
63364: LD_VAR 0 7
63368: DIVREAL
63369: ST_TO_ADDR
// if time < 0 then
63370: LD_VAR 0 8
63374: PUSH
63375: LD_INT 0
63377: LESS
63378: IFFALSE 63395
// time := time * - 1 ;
63380: LD_ADDR_VAR 0 8
63384: PUSH
63385: LD_VAR 0 8
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: MUL
63394: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63395: LD_VAR 0 8
63399: PUSH
63400: LD_INT 35
63402: PPUSH
63403: LD_INT 875
63405: PPUSH
63406: CALL_OW 12
63410: PLUS
63411: PPUSH
63412: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63416: LD_INT 1
63418: PPUSH
63419: LD_INT 5
63421: PPUSH
63422: CALL_OW 12
63426: PPUSH
63427: LD_VAR 0 1
63431: PPUSH
63432: LD_INT 1
63434: PPUSH
63435: CALL_OW 55
// end ;
63439: GO 63252
// end ;
63441: LD_VAR 0 5
63445: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63446: LD_INT 0
63448: PPUSH
63449: PPUSH
63450: PPUSH
63451: PPUSH
63452: PPUSH
63453: PPUSH
63454: PPUSH
63455: PPUSH
// if not turrets or not factories then
63456: LD_VAR 0 1
63460: NOT
63461: PUSH
63462: LD_VAR 0 2
63466: NOT
63467: OR
63468: IFFALSE 63472
// exit ;
63470: GO 63779
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63472: LD_ADDR_VAR 0 10
63476: PUSH
63477: LD_INT 5
63479: PUSH
63480: LD_INT 6
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 2
63489: PUSH
63490: LD_INT 4
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 3
63499: PUSH
63500: LD_INT 5
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 24
63514: PUSH
63515: LD_INT 25
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 23
63524: PUSH
63525: LD_INT 27
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 42
63538: PUSH
63539: LD_INT 43
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 44
63548: PUSH
63549: LD_INT 46
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 45
63558: PUSH
63559: LD_INT 47
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: LIST
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: LIST
63575: ST_TO_ADDR
// result := [ ] ;
63576: LD_ADDR_VAR 0 3
63580: PUSH
63581: EMPTY
63582: ST_TO_ADDR
// for i in turrets do
63583: LD_ADDR_VAR 0 4
63587: PUSH
63588: LD_VAR 0 1
63592: PUSH
63593: FOR_IN
63594: IFFALSE 63777
// begin nat := GetNation ( i ) ;
63596: LD_ADDR_VAR 0 7
63600: PUSH
63601: LD_VAR 0 4
63605: PPUSH
63606: CALL_OW 248
63610: ST_TO_ADDR
// weapon := 0 ;
63611: LD_ADDR_VAR 0 8
63615: PUSH
63616: LD_INT 0
63618: ST_TO_ADDR
// if not nat then
63619: LD_VAR 0 7
63623: NOT
63624: IFFALSE 63628
// continue ;
63626: GO 63593
// for j in list [ nat ] do
63628: LD_ADDR_VAR 0 5
63632: PUSH
63633: LD_VAR 0 10
63637: PUSH
63638: LD_VAR 0 7
63642: ARRAY
63643: PUSH
63644: FOR_IN
63645: IFFALSE 63686
// if GetBWeapon ( i ) = j [ 1 ] then
63647: LD_VAR 0 4
63651: PPUSH
63652: CALL_OW 269
63656: PUSH
63657: LD_VAR 0 5
63661: PUSH
63662: LD_INT 1
63664: ARRAY
63665: EQUAL
63666: IFFALSE 63684
// begin weapon := j [ 2 ] ;
63668: LD_ADDR_VAR 0 8
63672: PUSH
63673: LD_VAR 0 5
63677: PUSH
63678: LD_INT 2
63680: ARRAY
63681: ST_TO_ADDR
// break ;
63682: GO 63686
// end ;
63684: GO 63644
63686: POP
63687: POP
// if not weapon then
63688: LD_VAR 0 8
63692: NOT
63693: IFFALSE 63697
// continue ;
63695: GO 63593
// for k in factories do
63697: LD_ADDR_VAR 0 6
63701: PUSH
63702: LD_VAR 0 2
63706: PUSH
63707: FOR_IN
63708: IFFALSE 63773
// begin weapons := AvailableWeaponList ( k ) ;
63710: LD_ADDR_VAR 0 9
63714: PUSH
63715: LD_VAR 0 6
63719: PPUSH
63720: CALL_OW 478
63724: ST_TO_ADDR
// if not weapons then
63725: LD_VAR 0 9
63729: NOT
63730: IFFALSE 63734
// continue ;
63732: GO 63707
// if weapon in weapons then
63734: LD_VAR 0 8
63738: PUSH
63739: LD_VAR 0 9
63743: IN
63744: IFFALSE 63771
// begin result := [ i , weapon ] ;
63746: LD_ADDR_VAR 0 3
63750: PUSH
63751: LD_VAR 0 4
63755: PUSH
63756: LD_VAR 0 8
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: ST_TO_ADDR
// exit ;
63765: POP
63766: POP
63767: POP
63768: POP
63769: GO 63779
// end ; end ;
63771: GO 63707
63773: POP
63774: POP
// end ;
63775: GO 63593
63777: POP
63778: POP
// end ;
63779: LD_VAR 0 3
63783: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63784: LD_INT 0
63786: PPUSH
// if not side or side > 8 then
63787: LD_VAR 0 3
63791: NOT
63792: PUSH
63793: LD_VAR 0 3
63797: PUSH
63798: LD_INT 8
63800: GREATER
63801: OR
63802: IFFALSE 63806
// exit ;
63804: GO 63865
// if not range then
63806: LD_VAR 0 4
63810: NOT
63811: IFFALSE 63822
// range := - 12 ;
63813: LD_ADDR_VAR 0 4
63817: PUSH
63818: LD_INT 12
63820: NEG
63821: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63822: LD_VAR 0 1
63826: PPUSH
63827: LD_VAR 0 2
63831: PPUSH
63832: LD_VAR 0 3
63836: PPUSH
63837: LD_VAR 0 4
63841: PPUSH
63842: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63846: LD_VAR 0 1
63850: PPUSH
63851: LD_VAR 0 2
63855: PPUSH
63856: LD_VAR 0 3
63860: PPUSH
63861: CALL_OW 331
// end ;
63865: LD_VAR 0 5
63869: RET
// export function Video ( mode ) ; begin
63870: LD_INT 0
63872: PPUSH
// ingame_video = mode ;
63873: LD_ADDR_OWVAR 52
63877: PUSH
63878: LD_VAR 0 1
63882: ST_TO_ADDR
// interface_hidden = mode ;
63883: LD_ADDR_OWVAR 54
63887: PUSH
63888: LD_VAR 0 1
63892: ST_TO_ADDR
// end ;
63893: LD_VAR 0 2
63897: RET
// export function Join ( array , element ) ; begin
63898: LD_INT 0
63900: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63901: LD_ADDR_VAR 0 3
63905: PUSH
63906: LD_VAR 0 1
63910: PPUSH
63911: LD_VAR 0 1
63915: PUSH
63916: LD_INT 1
63918: PLUS
63919: PPUSH
63920: LD_VAR 0 2
63924: PPUSH
63925: CALL_OW 1
63929: ST_TO_ADDR
// end ;
63930: LD_VAR 0 3
63934: RET
// export function JoinUnion ( array , element ) ; begin
63935: LD_INT 0
63937: PPUSH
// result := array union element ;
63938: LD_ADDR_VAR 0 3
63942: PUSH
63943: LD_VAR 0 1
63947: PUSH
63948: LD_VAR 0 2
63952: UNION
63953: ST_TO_ADDR
// end ;
63954: LD_VAR 0 3
63958: RET
// export function GetBehemoths ( side ) ; begin
63959: LD_INT 0
63961: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63962: LD_ADDR_VAR 0 2
63966: PUSH
63967: LD_INT 22
63969: PUSH
63970: LD_VAR 0 1
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 31
63981: PUSH
63982: LD_INT 25
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PPUSH
63993: CALL_OW 69
63997: ST_TO_ADDR
// end ;
63998: LD_VAR 0 2
64002: RET
// export function Shuffle ( array ) ; var i , index ; begin
64003: LD_INT 0
64005: PPUSH
64006: PPUSH
64007: PPUSH
// result := [ ] ;
64008: LD_ADDR_VAR 0 2
64012: PUSH
64013: EMPTY
64014: ST_TO_ADDR
// if not array then
64015: LD_VAR 0 1
64019: NOT
64020: IFFALSE 64024
// exit ;
64022: GO 64123
// Randomize ;
64024: CALL_OW 10
// for i = array downto 1 do
64028: LD_ADDR_VAR 0 3
64032: PUSH
64033: DOUBLE
64034: LD_VAR 0 1
64038: INC
64039: ST_TO_ADDR
64040: LD_INT 1
64042: PUSH
64043: FOR_DOWNTO
64044: IFFALSE 64121
// begin index := rand ( 1 , array ) ;
64046: LD_ADDR_VAR 0 4
64050: PUSH
64051: LD_INT 1
64053: PPUSH
64054: LD_VAR 0 1
64058: PPUSH
64059: CALL_OW 12
64063: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64064: LD_ADDR_VAR 0 2
64068: PUSH
64069: LD_VAR 0 2
64073: PPUSH
64074: LD_VAR 0 2
64078: PUSH
64079: LD_INT 1
64081: PLUS
64082: PPUSH
64083: LD_VAR 0 1
64087: PUSH
64088: LD_VAR 0 4
64092: ARRAY
64093: PPUSH
64094: CALL_OW 2
64098: ST_TO_ADDR
// array := Delete ( array , index ) ;
64099: LD_ADDR_VAR 0 1
64103: PUSH
64104: LD_VAR 0 1
64108: PPUSH
64109: LD_VAR 0 4
64113: PPUSH
64114: CALL_OW 3
64118: ST_TO_ADDR
// end ;
64119: GO 64043
64121: POP
64122: POP
// end ;
64123: LD_VAR 0 2
64127: RET
// export function GetBaseMaterials ( base ) ; begin
64128: LD_INT 0
64130: PPUSH
// result := [ 0 , 0 , 0 ] ;
64131: LD_ADDR_VAR 0 2
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: LIST
64149: ST_TO_ADDR
// if not base then
64150: LD_VAR 0 1
64154: NOT
64155: IFFALSE 64159
// exit ;
64157: GO 64208
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64159: LD_ADDR_VAR 0 2
64163: PUSH
64164: LD_VAR 0 1
64168: PPUSH
64169: LD_INT 1
64171: PPUSH
64172: CALL_OW 275
64176: PUSH
64177: LD_VAR 0 1
64181: PPUSH
64182: LD_INT 2
64184: PPUSH
64185: CALL_OW 275
64189: PUSH
64190: LD_VAR 0 1
64194: PPUSH
64195: LD_INT 3
64197: PPUSH
64198: CALL_OW 275
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: LIST
64207: ST_TO_ADDR
// end ;
64208: LD_VAR 0 2
64212: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64213: LD_INT 0
64215: PPUSH
64216: PPUSH
// result := array ;
64217: LD_ADDR_VAR 0 3
64221: PUSH
64222: LD_VAR 0 1
64226: ST_TO_ADDR
// if size >= result then
64227: LD_VAR 0 2
64231: PUSH
64232: LD_VAR 0 3
64236: GREATEREQUAL
64237: IFFALSE 64241
// exit ;
64239: GO 64291
// if size then
64241: LD_VAR 0 2
64245: IFFALSE 64291
// for i := array downto size do
64247: LD_ADDR_VAR 0 4
64251: PUSH
64252: DOUBLE
64253: LD_VAR 0 1
64257: INC
64258: ST_TO_ADDR
64259: LD_VAR 0 2
64263: PUSH
64264: FOR_DOWNTO
64265: IFFALSE 64289
// result := Delete ( result , result ) ;
64267: LD_ADDR_VAR 0 3
64271: PUSH
64272: LD_VAR 0 3
64276: PPUSH
64277: LD_VAR 0 3
64281: PPUSH
64282: CALL_OW 3
64286: ST_TO_ADDR
64287: GO 64264
64289: POP
64290: POP
// end ;
64291: LD_VAR 0 3
64295: RET
// export function ComExit ( unit ) ; var tmp ; begin
64296: LD_INT 0
64298: PPUSH
64299: PPUSH
// if not IsInUnit ( unit ) then
64300: LD_VAR 0 1
64304: PPUSH
64305: CALL_OW 310
64309: NOT
64310: IFFALSE 64314
// exit ;
64312: GO 64374
// tmp := IsInUnit ( unit ) ;
64314: LD_ADDR_VAR 0 3
64318: PUSH
64319: LD_VAR 0 1
64323: PPUSH
64324: CALL_OW 310
64328: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64329: LD_VAR 0 3
64333: PPUSH
64334: CALL_OW 247
64338: PUSH
64339: LD_INT 2
64341: EQUAL
64342: IFFALSE 64355
// ComExitVehicle ( unit ) else
64344: LD_VAR 0 1
64348: PPUSH
64349: CALL_OW 121
64353: GO 64364
// ComExitBuilding ( unit ) ;
64355: LD_VAR 0 1
64359: PPUSH
64360: CALL_OW 122
// result := tmp ;
64364: LD_ADDR_VAR 0 2
64368: PUSH
64369: LD_VAR 0 3
64373: ST_TO_ADDR
// end ;
64374: LD_VAR 0 2
64378: RET
// export function ComExitAll ( units ) ; var i ; begin
64379: LD_INT 0
64381: PPUSH
64382: PPUSH
// if not units then
64383: LD_VAR 0 1
64387: NOT
64388: IFFALSE 64392
// exit ;
64390: GO 64418
// for i in units do
64392: LD_ADDR_VAR 0 3
64396: PUSH
64397: LD_VAR 0 1
64401: PUSH
64402: FOR_IN
64403: IFFALSE 64416
// ComExit ( i ) ;
64405: LD_VAR 0 3
64409: PPUSH
64410: CALL 64296 0 1
64414: GO 64402
64416: POP
64417: POP
// end ;
64418: LD_VAR 0 2
64422: RET
// export function ResetHc ; begin
64423: LD_INT 0
64425: PPUSH
// InitHc ;
64426: CALL_OW 19
// hc_importance := 0 ;
64430: LD_ADDR_OWVAR 32
64434: PUSH
64435: LD_INT 0
64437: ST_TO_ADDR
// end ;
64438: LD_VAR 0 1
64442: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64443: LD_INT 0
64445: PPUSH
64446: PPUSH
64447: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64448: LD_ADDR_VAR 0 6
64452: PUSH
64453: LD_VAR 0 1
64457: PUSH
64458: LD_VAR 0 3
64462: PLUS
64463: PUSH
64464: LD_INT 2
64466: DIV
64467: ST_TO_ADDR
// if _x < 0 then
64468: LD_VAR 0 6
64472: PUSH
64473: LD_INT 0
64475: LESS
64476: IFFALSE 64493
// _x := _x * - 1 ;
64478: LD_ADDR_VAR 0 6
64482: PUSH
64483: LD_VAR 0 6
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: MUL
64492: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64493: LD_ADDR_VAR 0 7
64497: PUSH
64498: LD_VAR 0 2
64502: PUSH
64503: LD_VAR 0 4
64507: PLUS
64508: PUSH
64509: LD_INT 2
64511: DIV
64512: ST_TO_ADDR
// if _y < 0 then
64513: LD_VAR 0 7
64517: PUSH
64518: LD_INT 0
64520: LESS
64521: IFFALSE 64538
// _y := _y * - 1 ;
64523: LD_ADDR_VAR 0 7
64527: PUSH
64528: LD_VAR 0 7
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: MUL
64537: ST_TO_ADDR
// result := [ _x , _y ] ;
64538: LD_ADDR_VAR 0 5
64542: PUSH
64543: LD_VAR 0 6
64547: PUSH
64548: LD_VAR 0 7
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: ST_TO_ADDR
// end ;
64557: LD_VAR 0 5
64561: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64562: LD_INT 0
64564: PPUSH
64565: PPUSH
64566: PPUSH
64567: PPUSH
// task := GetTaskList ( unit ) ;
64568: LD_ADDR_VAR 0 7
64572: PUSH
64573: LD_VAR 0 1
64577: PPUSH
64578: CALL_OW 437
64582: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64583: LD_VAR 0 7
64587: NOT
64588: PUSH
64589: LD_VAR 0 1
64593: PPUSH
64594: LD_VAR 0 2
64598: PPUSH
64599: CALL_OW 308
64603: NOT
64604: AND
64605: IFFALSE 64609
// exit ;
64607: GO 64727
// if IsInArea ( unit , area ) then
64609: LD_VAR 0 1
64613: PPUSH
64614: LD_VAR 0 2
64618: PPUSH
64619: CALL_OW 308
64623: IFFALSE 64641
// begin ComMoveToArea ( unit , goAway ) ;
64625: LD_VAR 0 1
64629: PPUSH
64630: LD_VAR 0 3
64634: PPUSH
64635: CALL_OW 113
// exit ;
64639: GO 64727
// end ; if task [ 1 ] [ 1 ] <> M then
64641: LD_VAR 0 7
64645: PUSH
64646: LD_INT 1
64648: ARRAY
64649: PUSH
64650: LD_INT 1
64652: ARRAY
64653: PUSH
64654: LD_STRING M
64656: NONEQUAL
64657: IFFALSE 64661
// exit ;
64659: GO 64727
// x := task [ 1 ] [ 2 ] ;
64661: LD_ADDR_VAR 0 5
64665: PUSH
64666: LD_VAR 0 7
64670: PUSH
64671: LD_INT 1
64673: ARRAY
64674: PUSH
64675: LD_INT 2
64677: ARRAY
64678: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64679: LD_ADDR_VAR 0 6
64683: PUSH
64684: LD_VAR 0 7
64688: PUSH
64689: LD_INT 1
64691: ARRAY
64692: PUSH
64693: LD_INT 3
64695: ARRAY
64696: ST_TO_ADDR
// if InArea ( x , y , area ) then
64697: LD_VAR 0 5
64701: PPUSH
64702: LD_VAR 0 6
64706: PPUSH
64707: LD_VAR 0 2
64711: PPUSH
64712: CALL_OW 309
64716: IFFALSE 64727
// ComStop ( unit ) ;
64718: LD_VAR 0 1
64722: PPUSH
64723: CALL_OW 141
// end ;
64727: LD_VAR 0 4
64731: RET
// export function Abs ( value ) ; begin
64732: LD_INT 0
64734: PPUSH
// result := value ;
64735: LD_ADDR_VAR 0 2
64739: PUSH
64740: LD_VAR 0 1
64744: ST_TO_ADDR
// if value < 0 then
64745: LD_VAR 0 1
64749: PUSH
64750: LD_INT 0
64752: LESS
64753: IFFALSE 64770
// result := value * - 1 ;
64755: LD_ADDR_VAR 0 2
64759: PUSH
64760: LD_VAR 0 1
64764: PUSH
64765: LD_INT 1
64767: NEG
64768: MUL
64769: ST_TO_ADDR
// end ;
64770: LD_VAR 0 2
64774: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64775: LD_INT 0
64777: PPUSH
64778: PPUSH
64779: PPUSH
64780: PPUSH
64781: PPUSH
64782: PPUSH
64783: PPUSH
64784: PPUSH
// if not unit or not building then
64785: LD_VAR 0 1
64789: NOT
64790: PUSH
64791: LD_VAR 0 2
64795: NOT
64796: OR
64797: IFFALSE 64801
// exit ;
64799: GO 65027
// x := GetX ( building ) ;
64801: LD_ADDR_VAR 0 4
64805: PUSH
64806: LD_VAR 0 2
64810: PPUSH
64811: CALL_OW 250
64815: ST_TO_ADDR
// y := GetY ( building ) ;
64816: LD_ADDR_VAR 0 6
64820: PUSH
64821: LD_VAR 0 2
64825: PPUSH
64826: CALL_OW 251
64830: ST_TO_ADDR
// d := GetDir ( building ) ;
64831: LD_ADDR_VAR 0 8
64835: PUSH
64836: LD_VAR 0 2
64840: PPUSH
64841: CALL_OW 254
64845: ST_TO_ADDR
// r := 4 ;
64846: LD_ADDR_VAR 0 9
64850: PUSH
64851: LD_INT 4
64853: ST_TO_ADDR
// for i := 1 to 5 do
64854: LD_ADDR_VAR 0 10
64858: PUSH
64859: DOUBLE
64860: LD_INT 1
64862: DEC
64863: ST_TO_ADDR
64864: LD_INT 5
64866: PUSH
64867: FOR_TO
64868: IFFALSE 65025
// begin _x := ShiftX ( x , d , r + i ) ;
64870: LD_ADDR_VAR 0 5
64874: PUSH
64875: LD_VAR 0 4
64879: PPUSH
64880: LD_VAR 0 8
64884: PPUSH
64885: LD_VAR 0 9
64889: PUSH
64890: LD_VAR 0 10
64894: PLUS
64895: PPUSH
64896: CALL_OW 272
64900: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64901: LD_ADDR_VAR 0 7
64905: PUSH
64906: LD_VAR 0 6
64910: PPUSH
64911: LD_VAR 0 8
64915: PPUSH
64916: LD_VAR 0 9
64920: PUSH
64921: LD_VAR 0 10
64925: PLUS
64926: PPUSH
64927: CALL_OW 273
64931: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64932: LD_VAR 0 5
64936: PPUSH
64937: LD_VAR 0 7
64941: PPUSH
64942: CALL_OW 488
64946: PUSH
64947: LD_VAR 0 5
64951: PPUSH
64952: LD_VAR 0 7
64956: PPUSH
64957: CALL_OW 428
64961: PPUSH
64962: CALL_OW 247
64966: PUSH
64967: LD_INT 3
64969: PUSH
64970: LD_INT 2
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: IN
64977: NOT
64978: AND
64979: IFFALSE 65023
// begin ComMoveXY ( unit , _x , _y ) ;
64981: LD_VAR 0 1
64985: PPUSH
64986: LD_VAR 0 5
64990: PPUSH
64991: LD_VAR 0 7
64995: PPUSH
64996: CALL_OW 111
// result := [ _x , _y ] ;
65000: LD_ADDR_VAR 0 3
65004: PUSH
65005: LD_VAR 0 5
65009: PUSH
65010: LD_VAR 0 7
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: ST_TO_ADDR
// exit ;
65019: POP
65020: POP
65021: GO 65027
// end ; end ;
65023: GO 64867
65025: POP
65026: POP
// end ;
65027: LD_VAR 0 3
65031: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65032: LD_INT 0
65034: PPUSH
65035: PPUSH
65036: PPUSH
// result := 0 ;
65037: LD_ADDR_VAR 0 3
65041: PUSH
65042: LD_INT 0
65044: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65045: LD_VAR 0 1
65049: PUSH
65050: LD_INT 0
65052: LESS
65053: PUSH
65054: LD_VAR 0 1
65058: PUSH
65059: LD_INT 8
65061: GREATER
65062: OR
65063: PUSH
65064: LD_VAR 0 2
65068: PUSH
65069: LD_INT 0
65071: LESS
65072: OR
65073: PUSH
65074: LD_VAR 0 2
65078: PUSH
65079: LD_INT 8
65081: GREATER
65082: OR
65083: IFFALSE 65087
// exit ;
65085: GO 65162
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65087: LD_ADDR_VAR 0 4
65091: PUSH
65092: LD_INT 22
65094: PUSH
65095: LD_VAR 0 2
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PPUSH
65104: CALL_OW 69
65108: PUSH
65109: FOR_IN
65110: IFFALSE 65160
// begin un := UnitShoot ( i ) ;
65112: LD_ADDR_VAR 0 5
65116: PUSH
65117: LD_VAR 0 4
65121: PPUSH
65122: CALL_OW 504
65126: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65127: LD_VAR 0 5
65131: PPUSH
65132: CALL_OW 255
65136: PUSH
65137: LD_VAR 0 1
65141: EQUAL
65142: IFFALSE 65158
// begin result := un ;
65144: LD_ADDR_VAR 0 3
65148: PUSH
65149: LD_VAR 0 5
65153: ST_TO_ADDR
// exit ;
65154: POP
65155: POP
65156: GO 65162
// end ; end ;
65158: GO 65109
65160: POP
65161: POP
// end ;
65162: LD_VAR 0 3
65166: RET
// export function GetCargoBay ( units ) ; begin
65167: LD_INT 0
65169: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65170: LD_ADDR_VAR 0 2
65174: PUSH
65175: LD_VAR 0 1
65179: PPUSH
65180: LD_INT 2
65182: PUSH
65183: LD_INT 34
65185: PUSH
65186: LD_INT 12
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 34
65195: PUSH
65196: LD_INT 51
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 34
65205: PUSH
65206: LD_INT 32
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 34
65215: PUSH
65216: LD_INT 89
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: PPUSH
65230: CALL_OW 72
65234: ST_TO_ADDR
// end ;
65235: LD_VAR 0 2
65239: RET
// export function Negate ( value ) ; begin
65240: LD_INT 0
65242: PPUSH
// result := not value ;
65243: LD_ADDR_VAR 0 2
65247: PUSH
65248: LD_VAR 0 1
65252: NOT
65253: ST_TO_ADDR
// end ;
65254: LD_VAR 0 2
65258: RET
// export function Inc ( value ) ; begin
65259: LD_INT 0
65261: PPUSH
// result := value + 1 ;
65262: LD_ADDR_VAR 0 2
65266: PUSH
65267: LD_VAR 0 1
65271: PUSH
65272: LD_INT 1
65274: PLUS
65275: ST_TO_ADDR
// end ;
65276: LD_VAR 0 2
65280: RET
// export function Dec ( value ) ; begin
65281: LD_INT 0
65283: PPUSH
// result := value - 1 ;
65284: LD_ADDR_VAR 0 2
65288: PUSH
65289: LD_VAR 0 1
65293: PUSH
65294: LD_INT 1
65296: MINUS
65297: ST_TO_ADDR
// end ;
65298: LD_VAR 0 2
65302: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65303: LD_INT 0
65305: PPUSH
65306: PPUSH
65307: PPUSH
65308: PPUSH
65309: PPUSH
65310: PPUSH
65311: PPUSH
65312: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65313: LD_VAR 0 1
65317: PPUSH
65318: LD_VAR 0 2
65322: PPUSH
65323: CALL_OW 488
65327: NOT
65328: PUSH
65329: LD_VAR 0 3
65333: PPUSH
65334: LD_VAR 0 4
65338: PPUSH
65339: CALL_OW 488
65343: NOT
65344: OR
65345: IFFALSE 65358
// begin result := - 1 ;
65347: LD_ADDR_VAR 0 5
65351: PUSH
65352: LD_INT 1
65354: NEG
65355: ST_TO_ADDR
// exit ;
65356: GO 65593
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65358: LD_ADDR_VAR 0 12
65362: PUSH
65363: LD_VAR 0 1
65367: PPUSH
65368: LD_VAR 0 2
65372: PPUSH
65373: LD_VAR 0 3
65377: PPUSH
65378: LD_VAR 0 4
65382: PPUSH
65383: CALL 64443 0 4
65387: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65388: LD_ADDR_VAR 0 11
65392: PUSH
65393: LD_VAR 0 1
65397: PPUSH
65398: LD_VAR 0 2
65402: PPUSH
65403: LD_VAR 0 12
65407: PUSH
65408: LD_INT 1
65410: ARRAY
65411: PPUSH
65412: LD_VAR 0 12
65416: PUSH
65417: LD_INT 2
65419: ARRAY
65420: PPUSH
65421: CALL_OW 298
65425: ST_TO_ADDR
// distance := 9999 ;
65426: LD_ADDR_VAR 0 10
65430: PUSH
65431: LD_INT 9999
65433: ST_TO_ADDR
// for i := 0 to 5 do
65434: LD_ADDR_VAR 0 6
65438: PUSH
65439: DOUBLE
65440: LD_INT 0
65442: DEC
65443: ST_TO_ADDR
65444: LD_INT 5
65446: PUSH
65447: FOR_TO
65448: IFFALSE 65591
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65450: LD_ADDR_VAR 0 7
65454: PUSH
65455: LD_VAR 0 1
65459: PPUSH
65460: LD_VAR 0 6
65464: PPUSH
65465: LD_VAR 0 11
65469: PPUSH
65470: CALL_OW 272
65474: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65475: LD_ADDR_VAR 0 8
65479: PUSH
65480: LD_VAR 0 2
65484: PPUSH
65485: LD_VAR 0 6
65489: PPUSH
65490: LD_VAR 0 11
65494: PPUSH
65495: CALL_OW 273
65499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65500: LD_VAR 0 7
65504: PPUSH
65505: LD_VAR 0 8
65509: PPUSH
65510: CALL_OW 488
65514: NOT
65515: IFFALSE 65519
// continue ;
65517: GO 65447
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65519: LD_ADDR_VAR 0 9
65523: PUSH
65524: LD_VAR 0 12
65528: PUSH
65529: LD_INT 1
65531: ARRAY
65532: PPUSH
65533: LD_VAR 0 12
65537: PUSH
65538: LD_INT 2
65540: ARRAY
65541: PPUSH
65542: LD_VAR 0 7
65546: PPUSH
65547: LD_VAR 0 8
65551: PPUSH
65552: CALL_OW 298
65556: ST_TO_ADDR
// if tmp < distance then
65557: LD_VAR 0 9
65561: PUSH
65562: LD_VAR 0 10
65566: LESS
65567: IFFALSE 65589
// begin result := i ;
65569: LD_ADDR_VAR 0 5
65573: PUSH
65574: LD_VAR 0 6
65578: ST_TO_ADDR
// distance := tmp ;
65579: LD_ADDR_VAR 0 10
65583: PUSH
65584: LD_VAR 0 9
65588: ST_TO_ADDR
// end ; end ;
65589: GO 65447
65591: POP
65592: POP
// end ;
65593: LD_VAR 0 5
65597: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65598: LD_INT 0
65600: PPUSH
65601: PPUSH
// if not driver or not IsInUnit ( driver ) then
65602: LD_VAR 0 1
65606: NOT
65607: PUSH
65608: LD_VAR 0 1
65612: PPUSH
65613: CALL_OW 310
65617: NOT
65618: OR
65619: IFFALSE 65623
// exit ;
65621: GO 65713
// vehicle := IsInUnit ( driver ) ;
65623: LD_ADDR_VAR 0 3
65627: PUSH
65628: LD_VAR 0 1
65632: PPUSH
65633: CALL_OW 310
65637: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65638: LD_VAR 0 1
65642: PPUSH
65643: LD_STRING \
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: LD_INT 0
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: PUSH
65673: LD_STRING E
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: LD_VAR 0 3
65686: PUSH
65687: LD_INT 0
65689: PUSH
65690: LD_INT 0
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PPUSH
65709: CALL_OW 446
// end ;
65713: LD_VAR 0 2
65717: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65718: LD_INT 0
65720: PPUSH
65721: PPUSH
// if not driver or not IsInUnit ( driver ) then
65722: LD_VAR 0 1
65726: NOT
65727: PUSH
65728: LD_VAR 0 1
65732: PPUSH
65733: CALL_OW 310
65737: NOT
65738: OR
65739: IFFALSE 65743
// exit ;
65741: GO 65833
// vehicle := IsInUnit ( driver ) ;
65743: LD_ADDR_VAR 0 3
65747: PUSH
65748: LD_VAR 0 1
65752: PPUSH
65753: CALL_OW 310
65757: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65758: LD_VAR 0 1
65762: PPUSH
65763: LD_STRING \
65765: PUSH
65766: LD_INT 0
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: LD_INT 0
65777: PUSH
65778: LD_INT 0
65780: PUSH
65781: LD_INT 0
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: PUSH
65793: LD_STRING E
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: LD_VAR 0 3
65806: PUSH
65807: LD_INT 0
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PPUSH
65829: CALL_OW 447
// end ;
65833: LD_VAR 0 2
65837: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65838: LD_INT 0
65840: PPUSH
65841: PPUSH
65842: PPUSH
// tmp := [ ] ;
65843: LD_ADDR_VAR 0 5
65847: PUSH
65848: EMPTY
65849: ST_TO_ADDR
// for i in units do
65850: LD_ADDR_VAR 0 4
65854: PUSH
65855: LD_VAR 0 1
65859: PUSH
65860: FOR_IN
65861: IFFALSE 65899
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65863: LD_ADDR_VAR 0 5
65867: PUSH
65868: LD_VAR 0 5
65872: PPUSH
65873: LD_VAR 0 5
65877: PUSH
65878: LD_INT 1
65880: PLUS
65881: PPUSH
65882: LD_VAR 0 4
65886: PPUSH
65887: CALL_OW 256
65891: PPUSH
65892: CALL_OW 2
65896: ST_TO_ADDR
65897: GO 65860
65899: POP
65900: POP
// if not tmp then
65901: LD_VAR 0 5
65905: NOT
65906: IFFALSE 65910
// exit ;
65908: GO 65958
// if asc then
65910: LD_VAR 0 2
65914: IFFALSE 65938
// result := SortListByListAsc ( units , tmp ) else
65916: LD_ADDR_VAR 0 3
65920: PUSH
65921: LD_VAR 0 1
65925: PPUSH
65926: LD_VAR 0 5
65930: PPUSH
65931: CALL_OW 76
65935: ST_TO_ADDR
65936: GO 65958
// result := SortListByListDesc ( units , tmp ) ;
65938: LD_ADDR_VAR 0 3
65942: PUSH
65943: LD_VAR 0 1
65947: PPUSH
65948: LD_VAR 0 5
65952: PPUSH
65953: CALL_OW 77
65957: ST_TO_ADDR
// end ;
65958: LD_VAR 0 3
65962: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65963: LD_INT 0
65965: PPUSH
65966: PPUSH
// task := GetTaskList ( mech ) ;
65967: LD_ADDR_VAR 0 4
65971: PUSH
65972: LD_VAR 0 1
65976: PPUSH
65977: CALL_OW 437
65981: ST_TO_ADDR
// if not task then
65982: LD_VAR 0 4
65986: NOT
65987: IFFALSE 65991
// exit ;
65989: GO 66033
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65991: LD_ADDR_VAR 0 3
65995: PUSH
65996: LD_VAR 0 4
66000: PUSH
66001: LD_INT 1
66003: ARRAY
66004: PUSH
66005: LD_INT 1
66007: ARRAY
66008: PUSH
66009: LD_STRING r
66011: EQUAL
66012: PUSH
66013: LD_VAR 0 4
66017: PUSH
66018: LD_INT 1
66020: ARRAY
66021: PUSH
66022: LD_INT 4
66024: ARRAY
66025: PUSH
66026: LD_VAR 0 2
66030: EQUAL
66031: AND
66032: ST_TO_ADDR
// end ;
66033: LD_VAR 0 3
66037: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66038: LD_INT 0
66040: PPUSH
// SetDir ( unit , d ) ;
66041: LD_VAR 0 1
66045: PPUSH
66046: LD_VAR 0 4
66050: PPUSH
66051: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66055: LD_VAR 0 1
66059: PPUSH
66060: LD_VAR 0 2
66064: PPUSH
66065: LD_VAR 0 3
66069: PPUSH
66070: LD_VAR 0 5
66074: PPUSH
66075: CALL_OW 48
// end ;
66079: LD_VAR 0 6
66083: RET
// export function ToNaturalNumber ( number ) ; begin
66084: LD_INT 0
66086: PPUSH
// result := number div 1 ;
66087: LD_ADDR_VAR 0 2
66091: PUSH
66092: LD_VAR 0 1
66096: PUSH
66097: LD_INT 1
66099: DIV
66100: ST_TO_ADDR
// if number < 0 then
66101: LD_VAR 0 1
66105: PUSH
66106: LD_INT 0
66108: LESS
66109: IFFALSE 66119
// result := 0 ;
66111: LD_ADDR_VAR 0 2
66115: PUSH
66116: LD_INT 0
66118: ST_TO_ADDR
// end ;
66119: LD_VAR 0 2
66123: RET
// export function SortByClass ( units , class ) ; var un ; begin
66124: LD_INT 0
66126: PPUSH
66127: PPUSH
// if not units or not class then
66128: LD_VAR 0 1
66132: NOT
66133: PUSH
66134: LD_VAR 0 2
66138: NOT
66139: OR
66140: IFFALSE 66144
// exit ;
66142: GO 66239
// result := [ ] ;
66144: LD_ADDR_VAR 0 3
66148: PUSH
66149: EMPTY
66150: ST_TO_ADDR
// for un in units do
66151: LD_ADDR_VAR 0 4
66155: PUSH
66156: LD_VAR 0 1
66160: PUSH
66161: FOR_IN
66162: IFFALSE 66237
// if GetClass ( un ) = class then
66164: LD_VAR 0 4
66168: PPUSH
66169: CALL_OW 257
66173: PUSH
66174: LD_VAR 0 2
66178: EQUAL
66179: IFFALSE 66206
// result := Insert ( result , 1 , un ) else
66181: LD_ADDR_VAR 0 3
66185: PUSH
66186: LD_VAR 0 3
66190: PPUSH
66191: LD_INT 1
66193: PPUSH
66194: LD_VAR 0 4
66198: PPUSH
66199: CALL_OW 2
66203: ST_TO_ADDR
66204: GO 66235
// result := Replace ( result , result + 1 , un ) ;
66206: LD_ADDR_VAR 0 3
66210: PUSH
66211: LD_VAR 0 3
66215: PPUSH
66216: LD_VAR 0 3
66220: PUSH
66221: LD_INT 1
66223: PLUS
66224: PPUSH
66225: LD_VAR 0 4
66229: PPUSH
66230: CALL_OW 1
66234: ST_TO_ADDR
66235: GO 66161
66237: POP
66238: POP
// end ;
66239: LD_VAR 0 3
66243: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66244: LD_INT 0
66246: PPUSH
66247: PPUSH
66248: PPUSH
66249: PPUSH
66250: PPUSH
66251: PPUSH
66252: PPUSH
// result := [ ] ;
66253: LD_ADDR_VAR 0 4
66257: PUSH
66258: EMPTY
66259: ST_TO_ADDR
// if x - r < 0 then
66260: LD_VAR 0 1
66264: PUSH
66265: LD_VAR 0 3
66269: MINUS
66270: PUSH
66271: LD_INT 0
66273: LESS
66274: IFFALSE 66286
// min_x := 0 else
66276: LD_ADDR_VAR 0 8
66280: PUSH
66281: LD_INT 0
66283: ST_TO_ADDR
66284: GO 66302
// min_x := x - r ;
66286: LD_ADDR_VAR 0 8
66290: PUSH
66291: LD_VAR 0 1
66295: PUSH
66296: LD_VAR 0 3
66300: MINUS
66301: ST_TO_ADDR
// if y - r < 0 then
66302: LD_VAR 0 2
66306: PUSH
66307: LD_VAR 0 3
66311: MINUS
66312: PUSH
66313: LD_INT 0
66315: LESS
66316: IFFALSE 66328
// min_y := 0 else
66318: LD_ADDR_VAR 0 7
66322: PUSH
66323: LD_INT 0
66325: ST_TO_ADDR
66326: GO 66344
// min_y := y - r ;
66328: LD_ADDR_VAR 0 7
66332: PUSH
66333: LD_VAR 0 2
66337: PUSH
66338: LD_VAR 0 3
66342: MINUS
66343: ST_TO_ADDR
// max_x := x + r ;
66344: LD_ADDR_VAR 0 9
66348: PUSH
66349: LD_VAR 0 1
66353: PUSH
66354: LD_VAR 0 3
66358: PLUS
66359: ST_TO_ADDR
// max_y := y + r ;
66360: LD_ADDR_VAR 0 10
66364: PUSH
66365: LD_VAR 0 2
66369: PUSH
66370: LD_VAR 0 3
66374: PLUS
66375: ST_TO_ADDR
// for _x = min_x to max_x do
66376: LD_ADDR_VAR 0 5
66380: PUSH
66381: DOUBLE
66382: LD_VAR 0 8
66386: DEC
66387: ST_TO_ADDR
66388: LD_VAR 0 9
66392: PUSH
66393: FOR_TO
66394: IFFALSE 66495
// for _y = min_y to max_y do
66396: LD_ADDR_VAR 0 6
66400: PUSH
66401: DOUBLE
66402: LD_VAR 0 7
66406: DEC
66407: ST_TO_ADDR
66408: LD_VAR 0 10
66412: PUSH
66413: FOR_TO
66414: IFFALSE 66491
// begin if not ValidHex ( _x , _y ) then
66416: LD_VAR 0 5
66420: PPUSH
66421: LD_VAR 0 6
66425: PPUSH
66426: CALL_OW 488
66430: NOT
66431: IFFALSE 66435
// continue ;
66433: GO 66413
// if GetResourceTypeXY ( _x , _y ) then
66435: LD_VAR 0 5
66439: PPUSH
66440: LD_VAR 0 6
66444: PPUSH
66445: CALL_OW 283
66449: IFFALSE 66489
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66451: LD_ADDR_VAR 0 4
66455: PUSH
66456: LD_VAR 0 4
66460: PPUSH
66461: LD_VAR 0 4
66465: PUSH
66466: LD_INT 1
66468: PLUS
66469: PPUSH
66470: LD_VAR 0 5
66474: PUSH
66475: LD_VAR 0 6
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PPUSH
66484: CALL_OW 1
66488: ST_TO_ADDR
// end ;
66489: GO 66413
66491: POP
66492: POP
66493: GO 66393
66495: POP
66496: POP
// end ;
66497: LD_VAR 0 4
66501: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66502: LD_INT 0
66504: PPUSH
66505: PPUSH
66506: PPUSH
66507: PPUSH
66508: PPUSH
66509: PPUSH
66510: PPUSH
66511: PPUSH
// if not units then
66512: LD_VAR 0 1
66516: NOT
66517: IFFALSE 66521
// exit ;
66519: GO 67045
// result := UnitFilter ( units , [ f_ok ] ) ;
66521: LD_ADDR_VAR 0 3
66525: PUSH
66526: LD_VAR 0 1
66530: PPUSH
66531: LD_INT 50
66533: PUSH
66534: EMPTY
66535: LIST
66536: PPUSH
66537: CALL_OW 72
66541: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66542: LD_ADDR_VAR 0 8
66546: PUSH
66547: LD_VAR 0 1
66551: PUSH
66552: LD_INT 1
66554: ARRAY
66555: PPUSH
66556: CALL_OW 255
66560: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66561: LD_ADDR_VAR 0 10
66565: PUSH
66566: LD_INT 29
66568: PUSH
66569: LD_INT 91
66571: PUSH
66572: LD_INT 49
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: LIST
66579: ST_TO_ADDR
// if not result then
66580: LD_VAR 0 3
66584: NOT
66585: IFFALSE 66589
// exit ;
66587: GO 67045
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66589: LD_ADDR_VAR 0 5
66593: PUSH
66594: LD_INT 81
66596: PUSH
66597: LD_VAR 0 8
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PPUSH
66606: CALL_OW 69
66610: ST_TO_ADDR
// for i in result do
66611: LD_ADDR_VAR 0 4
66615: PUSH
66616: LD_VAR 0 3
66620: PUSH
66621: FOR_IN
66622: IFFALSE 67043
// begin tag := GetTag ( i ) + 1 ;
66624: LD_ADDR_VAR 0 9
66628: PUSH
66629: LD_VAR 0 4
66633: PPUSH
66634: CALL_OW 110
66638: PUSH
66639: LD_INT 1
66641: PLUS
66642: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66643: LD_ADDR_VAR 0 7
66647: PUSH
66648: LD_VAR 0 4
66652: PPUSH
66653: CALL_OW 250
66657: PPUSH
66658: LD_VAR 0 4
66662: PPUSH
66663: CALL_OW 251
66667: PPUSH
66668: LD_INT 6
66670: PPUSH
66671: CALL 66244 0 3
66675: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66676: LD_VAR 0 4
66680: PPUSH
66681: CALL_OW 247
66685: PUSH
66686: LD_INT 2
66688: EQUAL
66689: PUSH
66690: LD_VAR 0 7
66694: AND
66695: PUSH
66696: LD_VAR 0 4
66700: PPUSH
66701: CALL_OW 264
66705: PUSH
66706: LD_VAR 0 10
66710: IN
66711: NOT
66712: AND
66713: IFFALSE 66752
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66715: LD_VAR 0 4
66719: PPUSH
66720: LD_VAR 0 7
66724: PUSH
66725: LD_INT 1
66727: ARRAY
66728: PUSH
66729: LD_INT 1
66731: ARRAY
66732: PPUSH
66733: LD_VAR 0 7
66737: PUSH
66738: LD_INT 1
66740: ARRAY
66741: PUSH
66742: LD_INT 2
66744: ARRAY
66745: PPUSH
66746: CALL_OW 116
66750: GO 67041
// if path > tag then
66752: LD_VAR 0 2
66756: PUSH
66757: LD_VAR 0 9
66761: GREATER
66762: IFFALSE 66970
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66764: LD_ADDR_VAR 0 6
66768: PUSH
66769: LD_VAR 0 5
66773: PPUSH
66774: LD_INT 91
66776: PUSH
66777: LD_VAR 0 4
66781: PUSH
66782: LD_INT 8
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: LIST
66789: PPUSH
66790: CALL_OW 72
66794: ST_TO_ADDR
// if nearEnemy then
66795: LD_VAR 0 6
66799: IFFALSE 66868
// begin if GetWeapon ( i ) = ru_time_lapser then
66801: LD_VAR 0 4
66805: PPUSH
66806: CALL_OW 264
66810: PUSH
66811: LD_INT 49
66813: EQUAL
66814: IFFALSE 66842
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66816: LD_VAR 0 4
66820: PPUSH
66821: LD_VAR 0 6
66825: PPUSH
66826: LD_VAR 0 4
66830: PPUSH
66831: CALL_OW 74
66835: PPUSH
66836: CALL_OW 112
66840: GO 66866
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66842: LD_VAR 0 4
66846: PPUSH
66847: LD_VAR 0 6
66851: PPUSH
66852: LD_VAR 0 4
66856: PPUSH
66857: CALL_OW 74
66861: PPUSH
66862: CALL 67970 0 2
// end else
66866: GO 66968
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66868: LD_VAR 0 4
66872: PPUSH
66873: LD_VAR 0 2
66877: PUSH
66878: LD_VAR 0 9
66882: ARRAY
66883: PUSH
66884: LD_INT 1
66886: ARRAY
66887: PPUSH
66888: LD_VAR 0 2
66892: PUSH
66893: LD_VAR 0 9
66897: ARRAY
66898: PUSH
66899: LD_INT 2
66901: ARRAY
66902: PPUSH
66903: CALL_OW 297
66907: PUSH
66908: LD_INT 6
66910: GREATER
66911: IFFALSE 66954
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66913: LD_VAR 0 4
66917: PPUSH
66918: LD_VAR 0 2
66922: PUSH
66923: LD_VAR 0 9
66927: ARRAY
66928: PUSH
66929: LD_INT 1
66931: ARRAY
66932: PPUSH
66933: LD_VAR 0 2
66937: PUSH
66938: LD_VAR 0 9
66942: ARRAY
66943: PUSH
66944: LD_INT 2
66946: ARRAY
66947: PPUSH
66948: CALL_OW 114
66952: GO 66968
// SetTag ( i , tag ) ;
66954: LD_VAR 0 4
66958: PPUSH
66959: LD_VAR 0 9
66963: PPUSH
66964: CALL_OW 109
// end else
66968: GO 67041
// if enemy then
66970: LD_VAR 0 5
66974: IFFALSE 67041
// begin if GetWeapon ( i ) = ru_time_lapser then
66976: LD_VAR 0 4
66980: PPUSH
66981: CALL_OW 264
66985: PUSH
66986: LD_INT 49
66988: EQUAL
66989: IFFALSE 67017
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66991: LD_VAR 0 4
66995: PPUSH
66996: LD_VAR 0 5
67000: PPUSH
67001: LD_VAR 0 4
67005: PPUSH
67006: CALL_OW 74
67010: PPUSH
67011: CALL_OW 112
67015: GO 67041
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67017: LD_VAR 0 4
67021: PPUSH
67022: LD_VAR 0 5
67026: PPUSH
67027: LD_VAR 0 4
67031: PPUSH
67032: CALL_OW 74
67036: PPUSH
67037: CALL 67970 0 2
// end ; end ;
67041: GO 66621
67043: POP
67044: POP
// end ;
67045: LD_VAR 0 3
67049: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67050: LD_INT 0
67052: PPUSH
67053: PPUSH
67054: PPUSH
// if not unit or IsInUnit ( unit ) then
67055: LD_VAR 0 1
67059: NOT
67060: PUSH
67061: LD_VAR 0 1
67065: PPUSH
67066: CALL_OW 310
67070: OR
67071: IFFALSE 67075
// exit ;
67073: GO 67166
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67075: LD_ADDR_VAR 0 4
67079: PUSH
67080: LD_VAR 0 1
67084: PPUSH
67085: CALL_OW 250
67089: PPUSH
67090: LD_VAR 0 2
67094: PPUSH
67095: LD_INT 1
67097: PPUSH
67098: CALL_OW 272
67102: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67103: LD_ADDR_VAR 0 5
67107: PUSH
67108: LD_VAR 0 1
67112: PPUSH
67113: CALL_OW 251
67117: PPUSH
67118: LD_VAR 0 2
67122: PPUSH
67123: LD_INT 1
67125: PPUSH
67126: CALL_OW 273
67130: ST_TO_ADDR
// if ValidHex ( x , y ) then
67131: LD_VAR 0 4
67135: PPUSH
67136: LD_VAR 0 5
67140: PPUSH
67141: CALL_OW 488
67145: IFFALSE 67166
// ComTurnXY ( unit , x , y ) ;
67147: LD_VAR 0 1
67151: PPUSH
67152: LD_VAR 0 4
67156: PPUSH
67157: LD_VAR 0 5
67161: PPUSH
67162: CALL_OW 118
// end ;
67166: LD_VAR 0 3
67170: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67171: LD_INT 0
67173: PPUSH
67174: PPUSH
// result := false ;
67175: LD_ADDR_VAR 0 3
67179: PUSH
67180: LD_INT 0
67182: ST_TO_ADDR
// if not units then
67183: LD_VAR 0 2
67187: NOT
67188: IFFALSE 67192
// exit ;
67190: GO 67237
// for i in units do
67192: LD_ADDR_VAR 0 4
67196: PUSH
67197: LD_VAR 0 2
67201: PUSH
67202: FOR_IN
67203: IFFALSE 67235
// if See ( side , i ) then
67205: LD_VAR 0 1
67209: PPUSH
67210: LD_VAR 0 4
67214: PPUSH
67215: CALL_OW 292
67219: IFFALSE 67233
// begin result := true ;
67221: LD_ADDR_VAR 0 3
67225: PUSH
67226: LD_INT 1
67228: ST_TO_ADDR
// exit ;
67229: POP
67230: POP
67231: GO 67237
// end ;
67233: GO 67202
67235: POP
67236: POP
// end ;
67237: LD_VAR 0 3
67241: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67242: LD_INT 0
67244: PPUSH
67245: PPUSH
67246: PPUSH
67247: PPUSH
// if not unit or not points then
67248: LD_VAR 0 1
67252: NOT
67253: PUSH
67254: LD_VAR 0 2
67258: NOT
67259: OR
67260: IFFALSE 67264
// exit ;
67262: GO 67354
// dist := 99999 ;
67264: LD_ADDR_VAR 0 5
67268: PUSH
67269: LD_INT 99999
67271: ST_TO_ADDR
// for i in points do
67272: LD_ADDR_VAR 0 4
67276: PUSH
67277: LD_VAR 0 2
67281: PUSH
67282: FOR_IN
67283: IFFALSE 67352
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67285: LD_ADDR_VAR 0 6
67289: PUSH
67290: LD_VAR 0 1
67294: PPUSH
67295: LD_VAR 0 4
67299: PUSH
67300: LD_INT 1
67302: ARRAY
67303: PPUSH
67304: LD_VAR 0 4
67308: PUSH
67309: LD_INT 2
67311: ARRAY
67312: PPUSH
67313: CALL_OW 297
67317: ST_TO_ADDR
// if tmpDist < dist then
67318: LD_VAR 0 6
67322: PUSH
67323: LD_VAR 0 5
67327: LESS
67328: IFFALSE 67350
// begin result := i ;
67330: LD_ADDR_VAR 0 3
67334: PUSH
67335: LD_VAR 0 4
67339: ST_TO_ADDR
// dist := tmpDist ;
67340: LD_ADDR_VAR 0 5
67344: PUSH
67345: LD_VAR 0 6
67349: ST_TO_ADDR
// end ; end ;
67350: GO 67282
67352: POP
67353: POP
// end ;
67354: LD_VAR 0 3
67358: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67359: LD_INT 0
67361: PPUSH
// uc_side := side ;
67362: LD_ADDR_OWVAR 20
67366: PUSH
67367: LD_VAR 0 1
67371: ST_TO_ADDR
// uc_nation := 3 ;
67372: LD_ADDR_OWVAR 21
67376: PUSH
67377: LD_INT 3
67379: ST_TO_ADDR
// vc_chassis := 25 ;
67380: LD_ADDR_OWVAR 37
67384: PUSH
67385: LD_INT 25
67387: ST_TO_ADDR
// vc_engine := engine_siberite ;
67388: LD_ADDR_OWVAR 39
67392: PUSH
67393: LD_INT 3
67395: ST_TO_ADDR
// vc_control := control_computer ;
67396: LD_ADDR_OWVAR 38
67400: PUSH
67401: LD_INT 3
67403: ST_TO_ADDR
// vc_weapon := 59 ;
67404: LD_ADDR_OWVAR 40
67408: PUSH
67409: LD_INT 59
67411: ST_TO_ADDR
// result := CreateVehicle ;
67412: LD_ADDR_VAR 0 5
67416: PUSH
67417: CALL_OW 45
67421: ST_TO_ADDR
// SetDir ( result , d ) ;
67422: LD_VAR 0 5
67426: PPUSH
67427: LD_VAR 0 4
67431: PPUSH
67432: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67436: LD_VAR 0 5
67440: PPUSH
67441: LD_VAR 0 2
67445: PPUSH
67446: LD_VAR 0 3
67450: PPUSH
67451: LD_INT 0
67453: PPUSH
67454: CALL_OW 48
// end ;
67458: LD_VAR 0 5
67462: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67463: LD_INT 0
67465: PPUSH
67466: PPUSH
67467: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67468: LD_ADDR_VAR 0 2
67472: PUSH
67473: LD_INT 0
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67491: LD_VAR 0 1
67495: NOT
67496: PUSH
67497: LD_VAR 0 1
67501: PPUSH
67502: CALL_OW 264
67506: PUSH
67507: LD_INT 12
67509: PUSH
67510: LD_INT 51
67512: PUSH
67513: LD_INT 32
67515: PUSH
67516: LD_INT 89
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: IN
67525: NOT
67526: OR
67527: IFFALSE 67531
// exit ;
67529: GO 67629
// for i := 1 to 3 do
67531: LD_ADDR_VAR 0 3
67535: PUSH
67536: DOUBLE
67537: LD_INT 1
67539: DEC
67540: ST_TO_ADDR
67541: LD_INT 3
67543: PUSH
67544: FOR_TO
67545: IFFALSE 67627
// begin tmp := GetCargo ( cargo , i ) ;
67547: LD_ADDR_VAR 0 4
67551: PUSH
67552: LD_VAR 0 1
67556: PPUSH
67557: LD_VAR 0 3
67561: PPUSH
67562: CALL_OW 289
67566: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67567: LD_ADDR_VAR 0 2
67571: PUSH
67572: LD_VAR 0 2
67576: PPUSH
67577: LD_VAR 0 3
67581: PPUSH
67582: LD_VAR 0 4
67586: PPUSH
67587: CALL_OW 1
67591: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67592: LD_ADDR_VAR 0 2
67596: PUSH
67597: LD_VAR 0 2
67601: PPUSH
67602: LD_INT 4
67604: PPUSH
67605: LD_VAR 0 2
67609: PUSH
67610: LD_INT 4
67612: ARRAY
67613: PUSH
67614: LD_VAR 0 4
67618: PLUS
67619: PPUSH
67620: CALL_OW 1
67624: ST_TO_ADDR
// end ;
67625: GO 67544
67627: POP
67628: POP
// end ;
67629: LD_VAR 0 2
67633: RET
// export function Length ( array ) ; begin
67634: LD_INT 0
67636: PPUSH
// result := array + 0 ;
67637: LD_ADDR_VAR 0 2
67641: PUSH
67642: LD_VAR 0 1
67646: PUSH
67647: LD_INT 0
67649: PLUS
67650: ST_TO_ADDR
// end ;
67651: LD_VAR 0 2
67655: RET
// export function PrepareArray ( array ) ; begin
67656: LD_INT 0
67658: PPUSH
// result := array diff 0 ;
67659: LD_ADDR_VAR 0 2
67663: PUSH
67664: LD_VAR 0 1
67668: PUSH
67669: LD_INT 0
67671: DIFF
67672: ST_TO_ADDR
// if not result [ 1 ] then
67673: LD_VAR 0 2
67677: PUSH
67678: LD_INT 1
67680: ARRAY
67681: NOT
67682: IFFALSE 67702
// result := Delete ( result , 1 ) ;
67684: LD_ADDR_VAR 0 2
67688: PUSH
67689: LD_VAR 0 2
67693: PPUSH
67694: LD_INT 1
67696: PPUSH
67697: CALL_OW 3
67701: ST_TO_ADDR
// end ;
67702: LD_VAR 0 2
67706: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67707: LD_INT 0
67709: PPUSH
67710: PPUSH
67711: PPUSH
67712: PPUSH
// sibRocketRange := 25 ;
67713: LD_ADDR_VAR 0 6
67717: PUSH
67718: LD_INT 25
67720: ST_TO_ADDR
// result := false ;
67721: LD_ADDR_VAR 0 4
67725: PUSH
67726: LD_INT 0
67728: ST_TO_ADDR
// for i := 0 to 5 do
67729: LD_ADDR_VAR 0 5
67733: PUSH
67734: DOUBLE
67735: LD_INT 0
67737: DEC
67738: ST_TO_ADDR
67739: LD_INT 5
67741: PUSH
67742: FOR_TO
67743: IFFALSE 67810
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67745: LD_VAR 0 1
67749: PPUSH
67750: LD_VAR 0 5
67754: PPUSH
67755: LD_VAR 0 6
67759: PPUSH
67760: CALL_OW 272
67764: PPUSH
67765: LD_VAR 0 2
67769: PPUSH
67770: LD_VAR 0 5
67774: PPUSH
67775: LD_VAR 0 6
67779: PPUSH
67780: CALL_OW 273
67784: PPUSH
67785: LD_VAR 0 3
67789: PPUSH
67790: CALL_OW 309
67794: IFFALSE 67808
// begin result := true ;
67796: LD_ADDR_VAR 0 4
67800: PUSH
67801: LD_INT 1
67803: ST_TO_ADDR
// exit ;
67804: POP
67805: POP
67806: GO 67812
// end ;
67808: GO 67742
67810: POP
67811: POP
// end ;
67812: LD_VAR 0 4
67816: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67817: LD_INT 0
67819: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67820: LD_VAR 0 1
67824: PPUSH
67825: LD_VAR 0 2
67829: PPUSH
67830: LD_INT 0
67832: PPUSH
67833: LD_INT 0
67835: PPUSH
67836: LD_INT 1
67838: PPUSH
67839: LD_INT 0
67841: PPUSH
67842: CALL_OW 587
// end ;
67846: LD_VAR 0 3
67850: RET
// export function CenterOnNow ( unit ) ; begin
67851: LD_INT 0
67853: PPUSH
// result := IsInUnit ( unit ) ;
67854: LD_ADDR_VAR 0 2
67858: PUSH
67859: LD_VAR 0 1
67863: PPUSH
67864: CALL_OW 310
67868: ST_TO_ADDR
// if not result then
67869: LD_VAR 0 2
67873: NOT
67874: IFFALSE 67886
// result := unit ;
67876: LD_ADDR_VAR 0 2
67880: PUSH
67881: LD_VAR 0 1
67885: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67886: LD_VAR 0 1
67890: PPUSH
67891: CALL_OW 87
// end ;
67895: LD_VAR 0 2
67899: RET
// export function ComMoveHex ( unit , hex ) ; begin
67900: LD_INT 0
67902: PPUSH
// if not hex then
67903: LD_VAR 0 2
67907: NOT
67908: IFFALSE 67912
// exit ;
67910: GO 67965
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67912: LD_VAR 0 2
67916: PUSH
67917: LD_INT 1
67919: ARRAY
67920: PPUSH
67921: LD_VAR 0 2
67925: PUSH
67926: LD_INT 2
67928: ARRAY
67929: PPUSH
67930: CALL_OW 428
67934: IFFALSE 67938
// exit ;
67936: GO 67965
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67938: LD_VAR 0 1
67942: PPUSH
67943: LD_VAR 0 2
67947: PUSH
67948: LD_INT 1
67950: ARRAY
67951: PPUSH
67952: LD_VAR 0 2
67956: PUSH
67957: LD_INT 2
67959: ARRAY
67960: PPUSH
67961: CALL_OW 111
// end ;
67965: LD_VAR 0 3
67969: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
67970: LD_INT 0
67972: PPUSH
67973: PPUSH
67974: PPUSH
// if not unit or not enemy then
67975: LD_VAR 0 1
67979: NOT
67980: PUSH
67981: LD_VAR 0 2
67985: NOT
67986: OR
67987: IFFALSE 67991
// exit ;
67989: GO 68115
// x := GetX ( enemy ) ;
67991: LD_ADDR_VAR 0 4
67995: PUSH
67996: LD_VAR 0 2
68000: PPUSH
68001: CALL_OW 250
68005: ST_TO_ADDR
// y := GetY ( enemy ) ;
68006: LD_ADDR_VAR 0 5
68010: PUSH
68011: LD_VAR 0 2
68015: PPUSH
68016: CALL_OW 251
68020: ST_TO_ADDR
// if ValidHex ( x , y ) then
68021: LD_VAR 0 4
68025: PPUSH
68026: LD_VAR 0 5
68030: PPUSH
68031: CALL_OW 488
68035: IFFALSE 68115
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
68037: LD_VAR 0 2
68041: PPUSH
68042: CALL_OW 247
68046: PUSH
68047: LD_INT 3
68049: PUSH
68050: LD_INT 2
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: IN
68057: PUSH
68058: LD_VAR 0 1
68062: PPUSH
68063: CALL_OW 255
68067: PPUSH
68068: LD_VAR 0 2
68072: PPUSH
68073: CALL_OW 292
68077: AND
68078: IFFALSE 68096
// ComAttackUnit ( unit , enemy ) else
68080: LD_VAR 0 1
68084: PPUSH
68085: LD_VAR 0 2
68089: PPUSH
68090: CALL_OW 115
68094: GO 68115
// ComAgressiveMove ( unit , x , y ) ;
68096: LD_VAR 0 1
68100: PPUSH
68101: LD_VAR 0 4
68105: PPUSH
68106: LD_VAR 0 5
68110: PPUSH
68111: CALL_OW 114
// end ;
68115: LD_VAR 0 3
68119: RET
