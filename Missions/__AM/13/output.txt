// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 902 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2057 0 0
// PrepareHeroes ;
  82: CALL 1082 0 0
// PrepareRandoms ;
  86: CALL 3420 0 0
// Action ;
  90: CALL 5210 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 799
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_STRING Lisa
 588: PPUSH
 589: LD_EXP 22
 593: PPUSH
 594: CALL 4216 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 598: LD_EXP 8
 602: PPUSH
 603: LD_STRING Brown
 605: PPUSH
 606: LD_EXP 22
 610: PPUSH
 611: CALL 4216 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 615: LD_EXP 4
 619: PPUSH
 620: LD_STRING Donaldson
 622: PPUSH
 623: LD_EXP 22
 627: PPUSH
 628: CALL 4216 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 632: LD_EXP 5
 636: PPUSH
 637: LD_STRING Bobby
 639: PPUSH
 640: LD_EXP 22
 644: PPUSH
 645: CALL 4216 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 649: LD_EXP 6
 653: PPUSH
 654: LD_STRING Cyrus
 656: PPUSH
 657: LD_EXP 22
 661: PPUSH
 662: CALL 4216 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 666: LD_EXP 7
 670: PPUSH
 671: LD_STRING Denis
 673: PPUSH
 674: LD_EXP 22
 678: PPUSH
 679: CALL 4216 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 683: LD_EXP 9
 687: PPUSH
 688: LD_STRING Gladstone
 690: PPUSH
 691: LD_EXP 22
 695: PPUSH
 696: CALL 4216 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 700: LD_EXP 10
 704: PPUSH
 705: LD_STRING Houten
 707: PPUSH
 708: LD_EXP 22
 712: PPUSH
 713: CALL 4216 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 717: LD_EXP 11
 721: PPUSH
 722: LD_STRING Cornel
 724: PPUSH
 725: LD_EXP 22
 729: PPUSH
 730: CALL 4216 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 734: LD_EXP 12
 738: PPUSH
 739: LD_STRING Gary
 741: PPUSH
 742: LD_EXP 22
 746: PPUSH
 747: CALL 4216 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_STRING Frank
 758: PPUSH
 759: LD_EXP 22
 763: PPUSH
 764: CALL 4216 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 768: LD_EXP 14
 772: PPUSH
 773: LD_STRING Kikuchi
 775: PPUSH
 776: LD_EXP 22
 780: PPUSH
 781: CALL 4216 0 3
// SaveCargos ;
 785: CALL 802 0 0
// ChangeMap ( 13 , %_cont ) ;
 789: LD_INT 13
 791: PPUSH
 792: LD_STRING %_cont
 794: PPUSH
 795: CALL_OW 340
// end ;
 799: PPOPN 2
 801: END
// export function SaveCargos ; var i ; begin
 802: LD_INT 0
 804: PPUSH
 805: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 806: LD_ADDR_VAR 0 2
 810: PUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 22
 816: PUSH
 817: LD_INT 1
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 33
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 34
 836: PUSH
 837: LD_INT 12
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PPUSH
 849: CALL_OW 70
 853: PUSH
 854: FOR_IN
 855: IFFALSE 883
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 857: LD_ADDR_EXP 20
 861: PUSH
 862: LD_EXP 20
 866: PUSH
 867: LD_VAR 0 2
 871: PPUSH
 872: CALL 66775 0 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: ADD
 880: ST_TO_ADDR
 881: GO 854
 883: POP
 884: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 885: LD_EXP 20
 889: PPUSH
 890: LD_STRING 13_ResourcesInCargo13_1
 892: PPUSH
 893: CALL_OW 39
// end ;
 897: LD_VAR 0 1
 901: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 902: LD_INT 0
 904: PPUSH
 905: PPUSH
 906: PPUSH
 907: PPUSH
 908: PPUSH
 909: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_STRING 10_EpsilonEnv
 917: PPUSH
 918: EMPTY
 919: PPUSH
 920: CALL_OW 30
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 2
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1077
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: CALL_OW 353
 946: ST_TO_ADDR
// if not list then
 947: LD_VAR 0 3
 951: NOT
 952: IFFALSE 956
// exit ;
 954: GO 1077
// for i in list do
 956: LD_ADDR_VAR 0 4
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: FOR_IN
 967: IFFALSE 1075
// begin exist := false ;
 969: LD_ADDR_VAR 0 6
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// for j in tmp do
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: FOR_IN
 988: IFFALSE 1042
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 990: LD_VAR 0 4
 994: PUSH
 995: LD_INT 1
 997: ARRAY
 998: PUSH
 999: LD_VAR 0 5
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: EQUAL
1008: PUSH
1009: LD_VAR 0 4
1013: PUSH
1014: LD_INT 2
1016: ARRAY
1017: PUSH
1018: LD_VAR 0 5
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: EQUAL
1027: AND
1028: IFFALSE 1040
// begin exist := true ;
1030: LD_ADDR_VAR 0 6
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// break ;
1038: GO 1042
// end ;
1040: GO 987
1042: POP
1043: POP
// if not exist then
1044: LD_VAR 0 6
1048: NOT
1049: IFFALSE 1073
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1051: LD_VAR 0 4
1055: PUSH
1056: LD_INT 1
1058: ARRAY
1059: PPUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_INT 2
1067: ARRAY
1068: PPUSH
1069: CALL_OW 347
// end ;
1073: GO 966
1075: POP
1076: POP
// end ; end_of_file
1077: LD_VAR 0 1
1081: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1082: LD_INT 0
1084: PPUSH
1085: PPUSH
1086: PPUSH
1087: PPUSH
1088: PPUSH
1089: PPUSH
1090: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1091: LD_ADDR_VAR 0 4
1095: PUSH
1096: LD_INT 22
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 23
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: LD_INT 30
1121: PUSH
1122: LD_INT 0
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 30
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PPUSH
1149: CALL_OW 69
1153: ST_TO_ADDR
// if tmp then
1154: LD_VAR 0 4
1158: IFFALSE 1280
// begin x := GetX ( tmp [ 1 ] ) ;
1160: LD_ADDR_VAR 0 5
1164: PUSH
1165: LD_VAR 0 4
1169: PUSH
1170: LD_INT 1
1172: ARRAY
1173: PPUSH
1174: CALL_OW 250
1178: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1179: LD_ADDR_VAR 0 6
1183: PUSH
1184: LD_VAR 0 4
1188: PUSH
1189: LD_INT 1
1191: ARRAY
1192: PPUSH
1193: CALL_OW 251
1197: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1198: LD_VAR 0 4
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: LD_STRING epsilon
1209: PPUSH
1210: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1214: LD_ADDR_VAR 0 7
1218: PUSH
1219: LD_VAR 0 4
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: PPUSH
1228: CALL_OW 274
1232: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1233: LD_VAR 0 7
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_INT 3000
1243: PPUSH
1244: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1248: LD_VAR 0 7
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: LD_INT 500
1258: PPUSH
1259: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1263: LD_VAR 0 7
1267: PPUSH
1268: LD_INT 3
1270: PPUSH
1271: LD_INT 200
1273: PPUSH
1274: CALL_OW 277
// end else
1278: GO 1296
// begin x := 104 ;
1280: LD_ADDR_VAR 0 5
1284: PUSH
1285: LD_INT 104
1287: ST_TO_ADDR
// y := 32 ;
1288: LD_ADDR_VAR 0 6
1292: PUSH
1293: LD_INT 32
1295: ST_TO_ADDR
// end ; uc_side := 1 ;
1296: LD_ADDR_OWVAR 20
1300: PUSH
1301: LD_INT 1
1303: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1304: LD_ADDR_EXP 1
1308: PUSH
1309: LD_STRING JMM
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: CALL 3690 0 2
1319: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1320: LD_ADDR_EXP 3
1324: PUSH
1325: LD_STRING Lisa
1327: PPUSH
1328: LD_INT 1
1330: PPUSH
1331: CALL 3690 0 2
1335: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1336: LD_ADDR_EXP 4
1340: PUSH
1341: LD_STRING Donaldson
1343: PPUSH
1344: LD_INT 1
1346: PPUSH
1347: CALL 3690 0 2
1351: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1352: LD_ADDR_EXP 5
1356: PUSH
1357: LD_STRING Bobby
1359: PPUSH
1360: LD_INT 1
1362: PPUSH
1363: CALL 3690 0 2
1367: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1368: LD_ADDR_EXP 6
1372: PUSH
1373: LD_STRING Cyrus
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 3690 0 2
1383: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1384: LD_ADDR_EXP 7
1388: PUSH
1389: LD_STRING Denis
1391: PPUSH
1392: LD_INT 1
1394: PPUSH
1395: CALL 3690 0 2
1399: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1400: LD_ADDR_EXP 8
1404: PUSH
1405: LD_STRING Brown
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: CALL 3690 0 2
1415: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1416: LD_ADDR_EXP 9
1420: PUSH
1421: LD_STRING Gladstone
1423: PPUSH
1424: LD_INT 1
1426: PPUSH
1427: CALL 3690 0 2
1431: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1432: LD_ADDR_EXP 10
1436: PUSH
1437: LD_STRING Houten
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL 3690 0 2
1447: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1448: LD_ADDR_EXP 11
1452: PUSH
1453: LD_STRING Cornell
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: CALL 3690 0 2
1463: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1464: LD_ADDR_EXP 12
1468: PUSH
1469: LD_STRING Gary
1471: PPUSH
1472: LD_INT 1
1474: PPUSH
1475: CALL 3690 0 2
1479: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1480: LD_ADDR_EXP 13
1484: PUSH
1485: LD_STRING Frank
1487: PPUSH
1488: LD_INT 1
1490: PPUSH
1491: CALL 3690 0 2
1495: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1496: LD_ADDR_EXP 14
1500: PUSH
1501: LD_STRING Kikuchi
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: CALL 3690 0 2
1511: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1512: LD_ADDR_EXP 15
1516: PUSH
1517: LD_STRING Stevens
1519: PPUSH
1520: LD_INT 0
1522: PPUSH
1523: CALL 3690 0 2
1527: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1528: LD_ADDR_EXP 2
1532: PUSH
1533: LD_STRING Powell
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL 3690 0 2
1543: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1544: LD_EXP 1
1548: PPUSH
1549: LD_VAR 0 5
1553: PPUSH
1554: LD_VAR 0 6
1558: PPUSH
1559: LD_INT 4
1561: PPUSH
1562: LD_INT 0
1564: PPUSH
1565: CALL 3863 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1569: LD_EXP 15
1573: PPUSH
1574: LD_VAR 0 5
1578: PPUSH
1579: LD_VAR 0 6
1583: PPUSH
1584: LD_INT 4
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL 3863 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1594: LD_EXP 3
1598: PPUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: LD_VAR 0 6
1608: PPUSH
1609: LD_INT 35
1611: PPUSH
1612: LD_INT 0
1614: PPUSH
1615: CALL 3863 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1619: LD_EXP 4
1623: PPUSH
1624: LD_VAR 0 5
1628: PPUSH
1629: LD_VAR 0 6
1633: PPUSH
1634: LD_INT 35
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL 3863 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1644: LD_EXP 5
1648: PPUSH
1649: LD_VAR 0 5
1653: PPUSH
1654: LD_VAR 0 6
1658: PPUSH
1659: LD_INT 35
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL 3863 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_VAR 0 5
1678: PPUSH
1679: LD_VAR 0 6
1683: PPUSH
1684: LD_INT 35
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: CALL 3863 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1694: LD_EXP 7
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: LD_VAR 0 6
1708: PPUSH
1709: LD_INT 35
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL 3863 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1719: LD_EXP 8
1723: PPUSH
1724: LD_VAR 0 5
1728: PPUSH
1729: LD_VAR 0 6
1733: PPUSH
1734: LD_INT 35
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: CALL 3863 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1744: LD_EXP 9
1748: PPUSH
1749: LD_VAR 0 5
1753: PPUSH
1754: LD_VAR 0 6
1758: PPUSH
1759: LD_INT 35
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 3863 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1769: LD_EXP 10
1773: PPUSH
1774: LD_VAR 0 5
1778: PPUSH
1779: LD_VAR 0 6
1783: PPUSH
1784: LD_INT 35
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL 3863 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1794: LD_EXP 11
1798: PPUSH
1799: LD_VAR 0 5
1803: PPUSH
1804: LD_VAR 0 6
1808: PPUSH
1809: LD_INT 35
1811: PPUSH
1812: LD_INT 0
1814: PPUSH
1815: CALL 3863 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1819: LD_EXP 12
1823: PPUSH
1824: LD_VAR 0 5
1828: PPUSH
1829: LD_VAR 0 6
1833: PPUSH
1834: LD_INT 35
1836: PPUSH
1837: LD_INT 0
1839: PPUSH
1840: CALL 3863 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1844: LD_EXP 13
1848: PPUSH
1849: LD_VAR 0 5
1853: PPUSH
1854: LD_VAR 0 6
1858: PPUSH
1859: LD_INT 35
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL 3863 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1869: LD_EXP 14
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: LD_VAR 0 6
1883: PPUSH
1884: LD_INT 35
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL 3863 0 5
// SetClass ( JMM , 1 ) ;
1894: LD_EXP 1
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1906: LD_ADDR_EXP 16
1910: PUSH
1911: LD_STRING 12_other_survivors
1913: PPUSH
1914: CALL_OW 31
1918: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1919: LD_ADDR_EXP 17
1923: PUSH
1924: LD_STRING 12_others
1926: PPUSH
1927: CALL_OW 31
1931: ST_TO_ADDR
// for i in others11 do
1932: LD_ADDR_VAR 0 2
1936: PUSH
1937: LD_EXP 17
1941: PUSH
1942: FOR_IN
1943: IFFALSE 1990
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1945: LD_VAR 0 2
1949: PPUSH
1950: LD_VAR 0 4
1954: PUSH
1955: LD_INT 1
1957: ARRAY
1958: PPUSH
1959: CALL_OW 250
1963: PPUSH
1964: LD_VAR 0 4
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 251
1977: PPUSH
1978: LD_INT 15
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL 3863 0 5
1988: GO 1942
1990: POP
1991: POP
// for i in others12 do
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_EXP 16
2001: PUSH
2002: FOR_IN
2003: IFFALSE 2050
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2005: LD_VAR 0 2
2009: PPUSH
2010: LD_VAR 0 4
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PPUSH
2019: CALL_OW 250
2023: PPUSH
2024: LD_VAR 0 4
2028: PUSH
2029: LD_INT 1
2031: ARRAY
2032: PPUSH
2033: CALL_OW 251
2037: PPUSH
2038: LD_INT 15
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL 3863 0 5
2048: GO 2002
2050: POP
2051: POP
// end ;
2052: LD_VAR 0 1
2056: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2057: LD_INT 0
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
2063: PPUSH
2064: PPUSH
2065: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2066: LD_INT 113
2068: PPUSH
2069: LD_INT 50
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2079: LD_INT 104
2081: PPUSH
2082: LD_INT 24
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2092: LD_INT 43
2094: PPUSH
2095: LD_INT 79
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2105: LD_INT 43
2107: PPUSH
2108: LD_INT 68
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2118: LD_INT 99
2120: PPUSH
2121: LD_INT 114
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2131: LD_INT 103
2133: PPUSH
2134: LD_INT 114
2136: PPUSH
2137: LD_INT 1
2139: PPUSH
2140: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2144: LD_INT 152
2146: PPUSH
2147: LD_INT 85
2149: PPUSH
2150: LD_INT 1
2152: PPUSH
2153: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2157: LD_INT 156
2159: PPUSH
2160: LD_INT 92
2162: PPUSH
2163: LD_INT 1
2165: PPUSH
2166: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2170: LD_ADDR_VAR 0 2
2174: PUSH
2175: LD_STRING 10_EpsilonBase
2177: PPUSH
2178: EMPTY
2179: PPUSH
2180: CALL_OW 30
2184: ST_TO_ADDR
// if not blist then
2185: LD_VAR 0 2
2189: NOT
2190: IFFALSE 2194
// exit ;
2192: GO 3415
// for i in blist do
2194: LD_ADDR_VAR 0 3
2198: PUSH
2199: LD_VAR 0 2
2203: PUSH
2204: FOR_IN
2205: IFFALSE 2247
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2207: LD_VAR 0 3
2211: PUSH
2212: LD_INT 1
2214: ARRAY
2215: PUSH
2216: LD_INT 0
2218: EQUAL
2219: PUSH
2220: LD_VAR 0 3
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PUSH
2229: LD_INT 1
2231: EQUAL
2232: OR
2233: IFFALSE 2245
// begin baseCorrect := 1 ;
2235: LD_ADDR_VAR 0 6
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// break ;
2243: GO 2247
// end ;
2245: GO 2204
2247: POP
2248: POP
// if baseCorrect = 0 then
2249: LD_VAR 0 6
2253: PUSH
2254: LD_INT 0
2256: EQUAL
2257: IFFALSE 2964
// begin uc_side := 1 ;
2259: LD_ADDR_OWVAR 20
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// uc_nation := 1 ;
2267: LD_ADDR_OWVAR 21
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// bc_level := 10 ;
2275: LD_ADDR_OWVAR 43
2279: PUSH
2280: LD_INT 10
2282: ST_TO_ADDR
// bc_type := b_warehouse ;
2283: LD_ADDR_OWVAR 42
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2291: LD_INT 99
2293: PPUSH
2294: LD_INT 24
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: CALL_OW 47
// bc_type := b_bunker ;
2304: LD_ADDR_OWVAR 42
2308: PUSH
2309: LD_INT 32
2311: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2312: LD_ADDR_VAR 0 7
2316: PUSH
2317: LD_INT 124
2319: PPUSH
2320: LD_INT 42
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: CALL_OW 47
2330: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2331: LD_VAR 0 7
2335: PPUSH
2336: LD_INT 4
2338: PUSH
2339: LD_INT 5
2341: PUSH
2342: LD_INT 6
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 3
2355: PPUSH
2356: CALL_OW 12
2360: ARRAY
2361: PPUSH
2362: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2366: LD_ADDR_VAR 0 7
2370: PUSH
2371: LD_INT 111
2373: PPUSH
2374: LD_INT 16
2376: PPUSH
2377: LD_INT 4
2379: PPUSH
2380: CALL_OW 47
2384: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2385: LD_VAR 0 7
2389: PPUSH
2390: LD_INT 4
2392: PUSH
2393: LD_INT 5
2395: PUSH
2396: LD_INT 6
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 1
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 12
2414: ARRAY
2415: PPUSH
2416: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2420: LD_ADDR_VAR 0 7
2424: PUSH
2425: LD_INT 113
2427: PPUSH
2428: LD_INT 21
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 47
2438: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2439: LD_VAR 0 7
2443: PPUSH
2444: LD_INT 4
2446: PUSH
2447: LD_INT 5
2449: PUSH
2450: LD_INT 6
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 3
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: PPUSH
2470: CALL_OW 431
// bc_type := 33 ;
2474: LD_ADDR_OWVAR 42
2478: PUSH
2479: LD_INT 33
2481: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2482: LD_ADDR_VAR 0 7
2486: PUSH
2487: LD_INT 95
2489: PPUSH
2490: LD_INT 41
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: CALL_OW 47
2500: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2501: LD_VAR 0 7
2505: PPUSH
2506: LD_INT 4
2508: PUSH
2509: LD_INT 5
2511: PUSH
2512: LD_INT 6
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 1
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: CALL_OW 12
2530: ARRAY
2531: PPUSH
2532: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2536: LD_ADDR_VAR 0 7
2540: PUSH
2541: LD_INT 97
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 47
2554: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2555: LD_VAR 0 7
2559: PPUSH
2560: LD_INT 4
2562: PUSH
2563: LD_INT 5
2565: PUSH
2566: LD_INT 6
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 3
2579: PPUSH
2580: CALL_OW 12
2584: ARRAY
2585: PPUSH
2586: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2590: LD_ADDR_VAR 0 7
2594: PUSH
2595: LD_INT 86
2597: PPUSH
2598: LD_INT 19
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: CALL_OW 47
2608: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2609: LD_VAR 0 7
2613: PPUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 5
2619: PUSH
2620: LD_INT 6
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 3
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: PPUSH
2640: CALL_OW 431
// bc_type := 30 ;
2644: LD_ADDR_OWVAR 42
2648: PUSH
2649: LD_INT 30
2651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2652: LD_INT 104
2654: PPUSH
2655: LD_INT 24
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: CALL_OW 47
// bc_type := 29 ;
2665: LD_ADDR_OWVAR 42
2669: PUSH
2670: LD_INT 29
2672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2673: LD_INT 113
2675: PPUSH
2676: LD_INT 50
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: CALL_OW 47
// bc_type := 27 ;
2686: LD_ADDR_OWVAR 42
2690: PUSH
2691: LD_INT 27
2693: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2694: LD_INT 98
2696: PPUSH
2697: LD_INT 26
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2707: LD_INT 95
2709: PPUSH
2710: LD_INT 23
2712: PPUSH
2713: LD_INT 3
2715: PPUSH
2716: CALL_OW 47
// bc_type := 28 ;
2720: LD_ADDR_OWVAR 42
2724: PUSH
2725: LD_INT 28
2727: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2728: LD_INT 107
2730: PPUSH
2731: LD_INT 32
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 47
// bc_type := 3 ;
2741: LD_ADDR_OWVAR 42
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2749: LD_INT 106
2751: PPUSH
2752: LD_INT 42
2754: PPUSH
2755: LD_INT 0
2757: PPUSH
2758: CALL_OW 47
// bc_type := 16 ;
2762: LD_ADDR_OWVAR 42
2766: PUSH
2767: LD_INT 16
2769: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2770: LD_INT 109
2772: PPUSH
2773: LD_INT 45
2775: PPUSH
2776: LD_INT 5
2778: PPUSH
2779: CALL_OW 47
// bc_type := 17 ;
2783: LD_ADDR_OWVAR 42
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2791: LD_INT 106
2793: PPUSH
2794: LD_INT 46
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: CALL_OW 47
// bc_type := 19 ;
2804: LD_ADDR_OWVAR 42
2808: PUSH
2809: LD_INT 19
2811: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2812: LD_INT 103
2814: PPUSH
2815: LD_INT 42
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 47
// bc_type := 21 ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 21
2832: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2833: LD_INT 110
2835: PPUSH
2836: LD_INT 42
2838: PPUSH
2839: LD_INT 4
2841: PPUSH
2842: CALL_OW 47
// bc_type := 5 ;
2846: LD_ADDR_OWVAR 42
2850: PUSH
2851: LD_INT 5
2853: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2854: LD_INT 114
2856: PPUSH
2857: LD_INT 55
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 47
// bc_type := 36 ;
2867: LD_ADDR_OWVAR 42
2871: PUSH
2872: LD_INT 36
2874: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2875: LD_INT 96
2877: PPUSH
2878: LD_INT 28
2880: PPUSH
2881: LD_INT 2
2883: PPUSH
2884: CALL_OW 47
// bc_type := b_lab_full ;
2888: LD_ADDR_OWVAR 42
2892: PUSH
2893: LD_INT 8
2895: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2896: LD_ADDR_OWVAR 44
2900: PUSH
2901: LD_INT 15
2903: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2904: LD_ADDR_OWVAR 45
2908: PUSH
2909: LD_INT 11
2911: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2912: LD_INT 116
2914: PPUSH
2915: LD_INT 38
2917: PPUSH
2918: LD_INT 4
2920: PPUSH
2921: CALL_OW 47
// bc_type := b_lab_full ;
2925: LD_ADDR_OWVAR 42
2929: PUSH
2930: LD_INT 8
2932: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2933: LD_ADDR_OWVAR 44
2937: PUSH
2938: LD_INT 10
2940: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2941: LD_ADDR_OWVAR 45
2945: PUSH
2946: LD_INT 12
2948: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2949: LD_INT 112
2951: PPUSH
2952: LD_INT 29
2954: PPUSH
2955: LD_INT 4
2957: PPUSH
2958: CALL_OW 47
// end else
2962: GO 3212
// begin uc_side := 1 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 1
2971: ST_TO_ADDR
// for i in blist do
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: LD_VAR 0 2
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3210
// begin InitBc ;
2985: CALL_OW 21
// uc_nation := i [ 6 ] ;
2989: LD_ADDR_OWVAR 21
2993: PUSH
2994: LD_VAR 0 3
2998: PUSH
2999: LD_INT 6
3001: ARRAY
3002: ST_TO_ADDR
// bc_type := i [ 1 ] ;
3003: LD_ADDR_OWVAR 42
3007: PUSH
3008: LD_VAR 0 3
3012: PUSH
3013: LD_INT 1
3015: ARRAY
3016: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3017: LD_ADDR_OWVAR 43
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_INT 5
3029: ARRAY
3030: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3031: LD_VAR 0 3
3035: PUSH
3036: LD_INT 1
3038: ARRAY
3039: PUSH
3040: LD_INT 7
3042: PUSH
3043: LD_INT 8
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: IN
3050: IFFALSE 3080
// begin bc_kind1 := i [ 7 ] ;
3052: LD_ADDR_OWVAR 44
3056: PUSH
3057: LD_VAR 0 3
3061: PUSH
3062: LD_INT 7
3064: ARRAY
3065: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3066: LD_ADDR_OWVAR 45
3070: PUSH
3071: LD_VAR 0 3
3075: PUSH
3076: LD_INT 8
3078: ARRAY
3079: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3080: LD_ADDR_VAR 0 4
3084: PUSH
3085: LD_VAR 0 3
3089: PUSH
3090: LD_INT 2
3092: ARRAY
3093: PPUSH
3094: LD_VAR 0 3
3098: PUSH
3099: LD_INT 3
3101: ARRAY
3102: PPUSH
3103: LD_VAR 0 3
3107: PUSH
3108: LD_INT 4
3110: ARRAY
3111: PPUSH
3112: CALL_OW 47
3116: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3117: LD_VAR 0 4
3121: PPUSH
3122: CALL_OW 266
3126: PUSH
3127: LD_INT 32
3129: PUSH
3130: LD_INT 33
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: IN
3137: IFFALSE 3208
// if i [ 7 ] then
3139: LD_VAR 0 3
3143: PUSH
3144: LD_INT 7
3146: ARRAY
3147: IFFALSE 3169
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3149: LD_VAR 0 4
3153: PPUSH
3154: LD_VAR 0 3
3158: PUSH
3159: LD_INT 7
3161: ARRAY
3162: PPUSH
3163: CALL_OW 431
3167: GO 3208
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3169: LD_VAR 0 4
3173: PPUSH
3174: LD_INT 11
3176: PUSH
3177: LD_INT 7
3179: PUSH
3180: LD_INT 4
3182: PUSH
3183: LD_INT 5
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 1
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 12
3202: ARRAY
3203: PPUSH
3204: CALL_OW 431
// end ;
3208: GO 2982
3210: POP
3211: POP
// end ; uc_side := 1 ;
3212: LD_ADDR_OWVAR 20
3216: PUSH
3217: LD_INT 1
3219: ST_TO_ADDR
// uc_nation := 1 ;
3220: LD_ADDR_OWVAR 21
3224: PUSH
3225: LD_INT 1
3227: ST_TO_ADDR
// for i := 1 to 8 do
3228: LD_ADDR_VAR 0 3
3232: PUSH
3233: DOUBLE
3234: LD_INT 1
3236: DEC
3237: ST_TO_ADDR
3238: LD_INT 8
3240: PUSH
3241: FOR_TO
3242: IFFALSE 3413
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3244: LD_ADDR_OWVAR 37
3248: PUSH
3249: LD_INT 5
3251: PUSH
3252: LD_INT 5
3254: PUSH
3255: LD_INT 3
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: PUSH
3267: LD_INT 1
3269: PPUSH
3270: LD_INT 4
3272: PPUSH
3273: CALL_OW 12
3277: ARRAY
3278: ST_TO_ADDR
// vc_engine := engine_siberite ;
3279: LD_ADDR_OWVAR 39
3283: PUSH
3284: LD_INT 3
3286: ST_TO_ADDR
// vc_control := control_manual ;
3287: LD_ADDR_OWVAR 38
3291: PUSH
3292: LD_INT 1
3294: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3295: LD_OWVAR 37
3299: PUSH
3300: LD_INT 4
3302: EQUAL
3303: IFFALSE 3315
// vc_weapon := us_heavy_gun else
3305: LD_ADDR_OWVAR 40
3309: PUSH
3310: LD_INT 6
3312: ST_TO_ADDR
3313: GO 3360
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3315: LD_ADDR_OWVAR 40
3319: PUSH
3320: LD_INT 7
3322: PUSH
3323: LD_INT 9
3325: PUSH
3326: LD_INT 12
3328: PUSH
3329: LD_INT 13
3331: PUSH
3332: LD_INT 9
3334: PUSH
3335: LD_INT 9
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: PUSH
3346: LD_VAR 0 3
3350: PUSH
3351: LD_INT 6
3353: MOD
3354: PUSH
3355: LD_INT 1
3357: PLUS
3358: ARRAY
3359: ST_TO_ADDR
// un := CreateVehicle ;
3360: LD_ADDR_VAR 0 5
3364: PUSH
3365: CALL_OW 45
3369: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3370: LD_VAR 0 5
3374: PPUSH
3375: LD_INT 0
3377: PPUSH
3378: LD_INT 5
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3390: LD_VAR 0 5
3394: PPUSH
3395: LD_INT 78
3397: PPUSH
3398: LD_INT 31
3400: PPUSH
3401: LD_INT 8
3403: PPUSH
3404: LD_INT 0
3406: PPUSH
3407: CALL_OW 50
// end ;
3411: GO 3241
3413: POP
3414: POP
// end ;
3415: LD_VAR 0 1
3419: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3420: LD_INT 0
3422: PPUSH
3423: PPUSH
3424: PPUSH
3425: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3426: LD_INT 22
3428: PUSH
3429: LD_INT 1
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PUSH
3436: LD_INT 21
3438: PUSH
3439: LD_INT 1
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PPUSH
3450: CALL_OW 69
3454: PUSH
3455: LD_INT 6
3457: LESS
3458: IFFALSE 3685
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3460: LD_ADDR_VAR 0 4
3464: PUSH
3465: LD_INT 22
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 30
3480: PUSH
3481: LD_INT 0
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: LD_INT 30
3490: PUSH
3491: LD_INT 1
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: ST_TO_ADDR
// uc_side := 1 ;
3512: LD_ADDR_OWVAR 20
3516: PUSH
3517: LD_INT 1
3519: ST_TO_ADDR
// uc_nation := 1 ;
3520: LD_ADDR_OWVAR 21
3524: PUSH
3525: LD_INT 1
3527: ST_TO_ADDR
// for i := 1 to 6 do
3528: LD_ADDR_VAR 0 2
3532: PUSH
3533: DOUBLE
3534: LD_INT 1
3536: DEC
3537: ST_TO_ADDR
3538: LD_INT 6
3540: PUSH
3541: FOR_TO
3542: IFFALSE 3683
// begin hc_gallery :=  ;
3544: LD_ADDR_OWVAR 33
3548: PUSH
3549: LD_STRING 
3551: ST_TO_ADDR
// hc_name :=  ;
3552: LD_ADDR_OWVAR 26
3556: PUSH
3557: LD_STRING 
3559: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3560: LD_INT 0
3562: PPUSH
3563: LD_INT 1
3565: PUSH
3566: LD_INT 2
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 1
3583: PPUSH
3584: LD_INT 4
3586: PPUSH
3587: CALL_OW 12
3591: ARRAY
3592: PPUSH
3593: LD_INT 5
3595: PPUSH
3596: LD_INT 8
3598: PPUSH
3599: CALL_OW 12
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 3
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3618: LD_ADDR_EXP 18
3622: PUSH
3623: LD_EXP 18
3627: PPUSH
3628: LD_VAR 0 3
3632: PPUSH
3633: CALL 63210 0 2
3637: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3638: LD_VAR 0 3
3642: PPUSH
3643: LD_VAR 0 4
3647: PUSH
3648: LD_INT 1
3650: ARRAY
3651: PPUSH
3652: CALL_OW 250
3656: PPUSH
3657: LD_VAR 0 4
3661: PUSH
3662: LD_INT 1
3664: ARRAY
3665: PPUSH
3666: CALL_OW 251
3670: PPUSH
3671: LD_INT 15
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL 3863 0 5
// end ;
3681: GO 3541
3683: POP
3684: POP
// end ; end ; end_of_file
3685: LD_VAR 0 1
3689: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3690: LD_INT 0
3692: PPUSH
3693: PPUSH
// if existMode then
3694: LD_VAR 0 2
3698: IFFALSE 3833
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3700: LD_EXP 21
3704: PUSH
3705: LD_VAR 0 1
3709: STR
3710: PPUSH
3711: CALL_OW 28
3715: IFFALSE 3740
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3717: LD_ADDR_VAR 0 4
3721: PUSH
3722: LD_EXP 21
3726: PUSH
3727: LD_VAR 0 1
3731: STR
3732: PPUSH
3733: CALL_OW 34
3737: ST_TO_ADDR
3738: GO 3831
// begin if TestCharacters ( 11_ & ident ) then
3740: LD_STRING 11_
3742: PUSH
3743: LD_VAR 0 1
3747: STR
3748: PPUSH
3749: CALL_OW 28
3753: IFFALSE 3776
// unit := CreateCharacter ( 11_ & ident ) else
3755: LD_ADDR_VAR 0 4
3759: PUSH
3760: LD_STRING 11_
3762: PUSH
3763: LD_VAR 0 1
3767: STR
3768: PPUSH
3769: CALL_OW 34
3773: ST_TO_ADDR
3774: GO 3831
// if TestCharacters ( 10c_ & ident ) then
3776: LD_STRING 10c_
3778: PUSH
3779: LD_VAR 0 1
3783: STR
3784: PPUSH
3785: CALL_OW 28
3789: IFFALSE 3812
// unit := CreateCharacter ( 10c_ & ident ) else
3791: LD_ADDR_VAR 0 4
3795: PUSH
3796: LD_STRING 10c_
3798: PUSH
3799: LD_VAR 0 1
3803: STR
3804: PPUSH
3805: CALL_OW 34
3809: ST_TO_ADDR
3810: GO 3831
// unit := CreateCharacter ( 10_ & ident ) ;
3812: LD_ADDR_VAR 0 4
3816: PUSH
3817: LD_STRING 10_
3819: PUSH
3820: LD_VAR 0 1
3824: STR
3825: PPUSH
3826: CALL_OW 34
3830: ST_TO_ADDR
// end ; end else
3831: GO 3848
// unit := NewCharacter ( ident ) ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 25
3847: ST_TO_ADDR
// result := unit ;
3848: LD_ADDR_VAR 0 3
3852: PUSH
3853: LD_VAR 0 4
3857: ST_TO_ADDR
// end ;
3858: LD_VAR 0 3
3862: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3863: LD_INT 0
3865: PPUSH
3866: PPUSH
3867: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3868: LD_ADDR_VAR 0 8
3872: PUSH
3873: LD_INT 22
3875: PUSH
3876: LD_VAR 0 1
3880: PPUSH
3881: CALL_OW 255
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PUSH
3890: LD_INT 21
3892: PUSH
3893: LD_INT 3
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: LD_INT 30
3905: PUSH
3906: LD_INT 3
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: LIST
3921: PPUSH
3922: CALL_OW 69
3926: ST_TO_ADDR
// if not tmp then
3927: LD_VAR 0 8
3931: NOT
3932: IFFALSE 3965
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3934: LD_VAR 0 1
3938: PPUSH
3939: LD_VAR 0 2
3943: PPUSH
3944: LD_VAR 0 3
3948: PPUSH
3949: LD_VAR 0 4
3953: PPUSH
3954: LD_VAR 0 5
3958: PPUSH
3959: CALL_OW 50
// exit ;
3963: GO 4211
// end ; for i in tmp do
3965: LD_ADDR_VAR 0 7
3969: PUSH
3970: LD_VAR 0 8
3974: PUSH
3975: FOR_IN
3976: IFFALSE 4180
// if IsNotFull ( i ) then
3978: LD_VAR 0 7
3982: PPUSH
3983: CALL 27958 0 1
3987: IFFALSE 4178
// begin PlaceHumanInUnit ( unit , i ) ;
3989: LD_VAR 0 1
3993: PPUSH
3994: LD_VAR 0 7
3998: PPUSH
3999: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
4003: LD_VAR 0 7
4007: PPUSH
4008: CALL_OW 266
4012: PUSH
4013: LD_INT 5
4015: PUSH
4016: LD_INT 4
4018: PUSH
4019: LD_INT 31
4021: PUSH
4022: LD_INT 32
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: IN
4031: IFFALSE 4064
// begin SetClass ( unit , class_soldier ) ;
4033: LD_VAR 0 1
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4045: LD_VAR 0 1
4049: PPUSH
4050: LD_VAR 0 7
4054: PPUSH
4055: CALL 58458 0 1
4059: PPUSH
4060: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4064: LD_VAR 0 7
4068: PPUSH
4069: CALL_OW 266
4073: PUSH
4074: LD_INT 2
4076: PUSH
4077: LD_INT 3
4079: PUSH
4080: LD_INT 36
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: IN
4088: IFFALSE 4102
// SetClass ( unit , class_mechanic ) ;
4090: LD_VAR 0 1
4094: PPUSH
4095: LD_INT 3
4097: PPUSH
4098: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4102: LD_VAR 0 7
4106: PPUSH
4107: CALL_OW 266
4111: PUSH
4112: LD_INT 0
4114: PUSH
4115: LD_INT 1
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: IN
4122: IFFALSE 4136
// SetClass ( unit , class_engineer ) ;
4124: LD_VAR 0 1
4128: PPUSH
4129: LD_INT 2
4131: PPUSH
4132: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4136: LD_VAR 0 7
4140: PPUSH
4141: CALL_OW 266
4145: PUSH
4146: LD_INT 6
4148: PUSH
4149: LD_INT 7
4151: PUSH
4152: LD_INT 8
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: IN
4160: IFFALSE 4174
// SetClass ( unit , class_scientistic ) ;
4162: LD_VAR 0 1
4166: PPUSH
4167: LD_INT 4
4169: PPUSH
4170: CALL_OW 336
// exit ;
4174: POP
4175: POP
4176: GO 4211
// end ;
4178: GO 3975
4180: POP
4181: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4182: LD_VAR 0 1
4186: PPUSH
4187: LD_VAR 0 2
4191: PPUSH
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_VAR 0 4
4201: PPUSH
4202: LD_VAR 0 5
4206: PPUSH
4207: CALL_OW 50
// end ;
4211: LD_VAR 0 6
4215: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4216: LD_INT 0
4218: PPUSH
// if unit in selectedTab then
4219: LD_VAR 0 1
4223: PUSH
4224: LD_VAR 0 3
4228: IN
4229: IFFALSE 4251
// SaveCharacters ( unit , 13c_ & unitString ) else
4231: LD_VAR 0 1
4235: PPUSH
4236: LD_STRING 13c_
4238: PUSH
4239: LD_VAR 0 2
4243: STR
4244: PPUSH
4245: CALL_OW 38
4249: GO 4269
// SaveCharacters ( unit , 13s_ & unitString ) ;
4251: LD_VAR 0 1
4255: PPUSH
4256: LD_STRING 13s_
4258: PUSH
4259: LD_VAR 0 2
4263: STR
4264: PPUSH
4265: CALL_OW 38
// end ;
4269: LD_VAR 0 4
4273: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4274: LD_INT 0
4276: PPUSH
4277: PPUSH
4278: PPUSH
4279: PPUSH
// selected := [ ] ;
4280: LD_ADDR_EXP 22
4284: PUSH
4285: EMPTY
4286: ST_TO_ADDR
// othersSelect := [ ] ;
4287: LD_ADDR_EXP 23
4291: PUSH
4292: EMPTY
4293: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: LD_EXP 3
4303: PUSH
4304: LD_EXP 4
4308: PUSH
4309: LD_EXP 5
4313: PUSH
4314: LD_EXP 6
4318: PUSH
4319: LD_EXP 8
4323: PUSH
4324: LD_EXP 9
4328: PUSH
4329: LD_EXP 10
4333: PUSH
4334: LD_EXP 11
4338: PUSH
4339: LD_EXP 12
4343: PUSH
4344: LD_EXP 13
4348: PUSH
4349: LD_EXP 14
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4367: LD_ADDR_VAR 0 3
4371: PUSH
4372: LD_VAR 0 3
4376: PUSH
4377: LD_EXP 17
4381: ADD
4382: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4383: LD_ADDR_VAR 0 3
4387: PUSH
4388: LD_VAR 0 3
4392: PUSH
4393: LD_EXP 16
4397: ADD
4398: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4399: LD_ADDR_VAR 0 3
4403: PUSH
4404: LD_VAR 0 3
4408: PUSH
4409: LD_EXP 18
4413: ADD
4414: ST_TO_ADDR
// for i in tmp do
4415: LD_ADDR_VAR 0 2
4419: PUSH
4420: LD_VAR 0 3
4424: PUSH
4425: FOR_IN
4426: IFFALSE 4465
// if GetClass ( i ) = 8 then
4428: LD_VAR 0 2
4432: PPUSH
4433: CALL_OW 257
4437: PUSH
4438: LD_INT 8
4440: EQUAL
4441: IFFALSE 4463
// SetClass ( i , rand ( 1 , 4 ) ) ;
4443: LD_VAR 0 2
4447: PPUSH
4448: LD_INT 1
4450: PPUSH
4451: LD_INT 4
4453: PPUSH
4454: CALL_OW 12
4458: PPUSH
4459: CALL_OW 336
4463: GO 4425
4465: POP
4466: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4467: LD_ADDR_EXP 22
4471: PUSH
4472: LD_STRING 1
4474: PPUSH
4475: LD_INT 6
4477: PPUSH
4478: LD_INT 6
4480: PPUSH
4481: LD_INT -5
4483: PUSH
4484: LD_EXP 1
4488: PUSH
4489: LD_EXP 15
4493: PUSH
4494: LD_INT -2
4496: PUSH
4497: LD_INT -3
4499: PUSH
4500: LD_INT -5
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: PUSH
4511: LD_VAR 0 3
4515: ADD
4516: PUSH
4517: LD_INT -6
4519: PUSH
4520: LD_INT -4
4522: PUSH
4523: LD_EXP 2
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: ADD
4533: PPUSH
4534: LD_INT 1
4536: PUSH
4537: LD_INT 0
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 2
4546: PUSH
4547: LD_INT 1
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: LD_INT 0
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 4
4566: PUSH
4567: LD_INT 2
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: LD_INT 5
4576: PUSH
4577: LD_INT 0
4579: PUSH
4580: LD_INT 2
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 42
4599: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4600: LD_ADDR_EXP 23
4604: PUSH
4605: LD_EXP 22
4609: PUSH
4610: LD_EXP 3
4614: PUSH
4615: LD_EXP 4
4619: PUSH
4620: LD_EXP 5
4624: PUSH
4625: LD_EXP 6
4629: PUSH
4630: LD_EXP 7
4634: PUSH
4635: LD_EXP 8
4639: PUSH
4640: LD_EXP 9
4644: PUSH
4645: LD_EXP 10
4649: PUSH
4650: LD_EXP 11
4654: PUSH
4655: LD_EXP 12
4659: PUSH
4660: LD_EXP 13
4664: PUSH
4665: LD_EXP 14
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: DIFF
4684: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4685: LD_ADDR_VAR 0 4
4689: PUSH
4690: LD_VAR 0 3
4694: PUSH
4695: LD_EXP 22
4699: DIFF
4700: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4701: LD_ADDR_VAR 0 4
4705: PUSH
4706: LD_VAR 0 4
4710: PUSH
4711: LD_EXP 3
4715: PUSH
4716: LD_EXP 4
4720: PUSH
4721: LD_EXP 5
4725: PUSH
4726: LD_EXP 6
4730: PUSH
4731: LD_EXP 7
4735: PUSH
4736: LD_EXP 8
4740: PUSH
4741: LD_EXP 9
4745: PUSH
4746: LD_EXP 10
4750: PUSH
4751: LD_EXP 11
4755: PUSH
4756: LD_EXP 12
4760: PUSH
4761: LD_EXP 13
4765: PUSH
4766: LD_EXP 14
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: DIFF
4785: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4786: LD_VAR 0 4
4790: PPUSH
4791: LD_STRING 13s_others
4793: PPUSH
4794: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4798: LD_EXP 23
4802: PPUSH
4803: LD_STRING 13c_others
4805: PPUSH
4806: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4810: LD_EXP 1
4814: PPUSH
4815: LD_STRING 13c_JMM
4817: PPUSH
4818: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4822: LD_EXP 15
4826: PPUSH
4827: LD_STRING 13c_Stevens
4829: PPUSH
4830: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4834: LD_EXP 3
4838: PPUSH
4839: LD_STRING Lisa
4841: PPUSH
4842: LD_EXP 22
4846: PPUSH
4847: CALL 4216 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4851: LD_EXP 8
4855: PPUSH
4856: LD_STRING Brown
4858: PPUSH
4859: LD_EXP 22
4863: PPUSH
4864: CALL 4216 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4868: LD_EXP 4
4872: PPUSH
4873: LD_STRING Donaldson
4875: PPUSH
4876: LD_EXP 22
4880: PPUSH
4881: CALL 4216 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4885: LD_EXP 5
4889: PPUSH
4890: LD_STRING Bobby
4892: PPUSH
4893: LD_EXP 22
4897: PPUSH
4898: CALL 4216 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4902: LD_EXP 6
4906: PPUSH
4907: LD_STRING Cyrus
4909: PPUSH
4910: LD_EXP 22
4914: PPUSH
4915: CALL 4216 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4919: LD_EXP 7
4923: PPUSH
4924: LD_STRING Denis
4926: PPUSH
4927: LD_EXP 22
4931: PPUSH
4932: CALL 4216 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4936: LD_EXP 9
4940: PPUSH
4941: LD_STRING Gladstone
4943: PPUSH
4944: LD_EXP 22
4948: PPUSH
4949: CALL 4216 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4953: LD_EXP 10
4957: PPUSH
4958: LD_STRING Houten
4960: PPUSH
4961: LD_EXP 22
4965: PPUSH
4966: CALL 4216 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4970: LD_EXP 11
4974: PPUSH
4975: LD_STRING Cornel
4977: PPUSH
4978: LD_EXP 22
4982: PPUSH
4983: CALL 4216 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4987: LD_EXP 12
4991: PPUSH
4992: LD_STRING Gary
4994: PPUSH
4995: LD_EXP 22
4999: PPUSH
5000: CALL 4216 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5004: LD_EXP 13
5008: PPUSH
5009: LD_STRING Frank
5011: PPUSH
5012: LD_EXP 22
5016: PPUSH
5017: CALL 4216 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5021: LD_EXP 14
5025: PPUSH
5026: LD_STRING Kikuchi
5028: PPUSH
5029: LD_EXP 22
5033: PPUSH
5034: CALL 4216 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5038: LD_INT 22
5040: PUSH
5041: LD_INT 1
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 21
5050: PUSH
5051: LD_INT 1
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PPUSH
5062: CALL_OW 69
5066: PPUSH
5067: LD_INT 4
5069: PPUSH
5070: CALL_OW 235
// SetSide ( selected , 1 ) ;
5074: LD_EXP 22
5078: PPUSH
5079: LD_INT 1
5081: PPUSH
5082: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5086: LD_EXP 1
5090: PUSH
5091: LD_EXP 15
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PPUSH
5100: LD_INT 1
5102: PPUSH
5103: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5107: LD_ADDR_VAR 0 2
5111: PUSH
5112: LD_INT 22
5114: PUSH
5115: LD_INT 1
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PUSH
5122: LD_INT 21
5124: PUSH
5125: LD_INT 1
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: PPUSH
5136: CALL_OW 69
5140: PUSH
5141: FOR_IN
5142: IFFALSE 5155
// ComExit ( i ) ;
5144: LD_VAR 0 2
5148: PPUSH
5149: CALL 63608 0 1
5153: GO 5141
5155: POP
5156: POP
// end ; end_of_file
5157: LD_VAR 0 1
5161: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5162: LD_VAR 0 1
5166: PPUSH
5167: CALL 21231 0 1
// if un = JMM then
5171: LD_VAR 0 1
5175: PUSH
5176: LD_EXP 1
5180: EQUAL
5181: IFFALSE 5190
// YouLost ( JMM ) ;
5183: LD_STRING JMM
5185: PPUSH
5186: CALL_OW 104
// end ;
5190: PPOPN 1
5192: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5193: LD_VAR 0 1
5197: PPUSH
5198: LD_VAR 0 2
5202: PPUSH
5203: CALL 21351 0 2
// end ; end_of_file
5207: PPOPN 2
5209: END
// export function Action ; begin
5210: LD_INT 0
5212: PPUSH
// InGameOn ;
5213: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5217: LD_INT 22
5219: PUSH
5220: LD_INT 1
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: PUSH
5227: LD_INT 2
5229: PUSH
5230: LD_INT 30
5232: PUSH
5233: LD_INT 0
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 30
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PPUSH
5259: CALL_OW 69
5263: PPUSH
5264: CALL_OW 87
// wait ( 0 0$1 ) ;
5268: LD_INT 35
5270: PPUSH
5271: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5275: LD_EXP 1
5279: PPUSH
5280: LD_STRING D1-JMM-1
5282: PPUSH
5283: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5287: LD_EXP 2
5291: PPUSH
5292: LD_STRING D1-Pow-1
5294: PPUSH
5295: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5299: LD_EXP 2
5303: PPUSH
5304: LD_STRING D1-Pow-1a
5306: PPUSH
5307: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5311: LD_EXP 2
5315: PPUSH
5316: LD_STRING D1-Pow-1b
5318: PPUSH
5319: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5323: LD_EXP 2
5327: PPUSH
5328: LD_STRING D1-Pow-1c
5330: PPUSH
5331: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5335: LD_EXP 1
5339: PPUSH
5340: LD_STRING D1-JMM-2
5342: PPUSH
5343: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5347: LD_EXP 2
5351: PPUSH
5352: LD_STRING D1-Pow-2
5354: PPUSH
5355: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5359: LD_EXP 1
5363: PPUSH
5364: LD_STRING D1-JMM-3
5366: PPUSH
5367: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5371: LD_EXP 2
5375: PPUSH
5376: LD_STRING D1-Pow-3
5378: PPUSH
5379: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5383: LD_EXP 1
5387: PPUSH
5388: LD_STRING D1-JMM-4
5390: PPUSH
5391: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5395: LD_EXP 2
5399: PPUSH
5400: LD_STRING D1-Pow-4
5402: PPUSH
5403: CALL_OW 94
// SelectAndSaveCharacters ;
5407: CALL 4274 0 0
// InGameOff ;
5411: CALL_OW 9
// Query ( Q1 ) ;
5415: LD_STRING Q1
5417: PPUSH
5418: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5422: LD_INT 2
5424: PPUSH
5425: LD_INT 1
5427: PPUSH
5428: CALL_OW 424
// end ; end_of_file
5432: LD_VAR 0 1
5436: RET
// export globalGameSaveCounter ; every 0 0$1 do
5437: GO 5439
5439: DISABLE
// begin enable ;
5440: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5441: LD_STRING updateTimer(
5443: PUSH
5444: LD_OWVAR 1
5448: STR
5449: PUSH
5450: LD_STRING );
5452: STR
5453: PPUSH
5454: CALL_OW 559
// end ;
5458: END
// every 0 0$1 do
5459: GO 5461
5461: DISABLE
// begin globalGameSaveCounter := 0 ;
5462: LD_ADDR_EXP 24
5466: PUSH
5467: LD_INT 0
5469: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5470: LD_STRING setGameSaveCounter(0)
5472: PPUSH
5473: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5477: LD_STRING initStreamRollete();
5479: PPUSH
5480: CALL_OW 559
// InitStreamMode ;
5484: CALL 6810 0 0
// DefineStreamItems ( false ) ;
5488: LD_INT 0
5490: PPUSH
5491: CALL 7274 0 1
// end ;
5495: END
// export function SOS_MapStart ( ) ; begin
5496: LD_INT 0
5498: PPUSH
// if streamModeActive then
5499: LD_EXP 25
5503: IFFALSE 5512
// DefineStreamItems ( true ) ;
5505: LD_INT 1
5507: PPUSH
5508: CALL 7274 0 1
// UpdateLuaVariables ( ) ;
5512: CALL 5529 0 0
// UpdateFactoryWaypoints ( ) ;
5516: CALL 20135 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5520: CALL 20392 0 0
// end ;
5524: LD_VAR 0 1
5528: RET
// function UpdateLuaVariables ( ) ; begin
5529: LD_INT 0
5531: PPUSH
// if globalGameSaveCounter then
5532: LD_EXP 24
5536: IFFALSE 5570
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5538: LD_ADDR_EXP 24
5542: PUSH
5543: LD_EXP 24
5547: PPUSH
5548: CALL 64571 0 1
5552: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5553: LD_STRING setGameSaveCounter(
5555: PUSH
5556: LD_EXP 24
5560: STR
5561: PUSH
5562: LD_STRING )
5564: STR
5565: PPUSH
5566: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5570: LD_STRING setGameDifficulty(
5572: PUSH
5573: LD_OWVAR 67
5577: STR
5578: PUSH
5579: LD_STRING )
5581: STR
5582: PPUSH
5583: CALL_OW 559
// end ;
5587: LD_VAR 0 1
5591: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5592: LD_INT 0
5594: PPUSH
// if p2 = stream_mode then
5595: LD_VAR 0 2
5599: PUSH
5600: LD_INT 100
5602: EQUAL
5603: IFFALSE 6606
// begin if not StreamModeActive then
5605: LD_EXP 25
5609: NOT
5610: IFFALSE 5620
// StreamModeActive := true ;
5612: LD_ADDR_EXP 25
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// if p3 = 0 then
5620: LD_VAR 0 3
5624: PUSH
5625: LD_INT 0
5627: EQUAL
5628: IFFALSE 5634
// InitStreamMode ;
5630: CALL 6810 0 0
// if p3 = 1 then
5634: LD_VAR 0 3
5638: PUSH
5639: LD_INT 1
5641: EQUAL
5642: IFFALSE 5652
// sRocket := true ;
5644: LD_ADDR_EXP 30
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// if p3 = 2 then
5652: LD_VAR 0 3
5656: PUSH
5657: LD_INT 2
5659: EQUAL
5660: IFFALSE 5670
// sSpeed := true ;
5662: LD_ADDR_EXP 29
5666: PUSH
5667: LD_INT 1
5669: ST_TO_ADDR
// if p3 = 3 then
5670: LD_VAR 0 3
5674: PUSH
5675: LD_INT 3
5677: EQUAL
5678: IFFALSE 5688
// sEngine := true ;
5680: LD_ADDR_EXP 31
5684: PUSH
5685: LD_INT 1
5687: ST_TO_ADDR
// if p3 = 4 then
5688: LD_VAR 0 3
5692: PUSH
5693: LD_INT 4
5695: EQUAL
5696: IFFALSE 5706
// sSpec := true ;
5698: LD_ADDR_EXP 28
5702: PUSH
5703: LD_INT 1
5705: ST_TO_ADDR
// if p3 = 5 then
5706: LD_VAR 0 3
5710: PUSH
5711: LD_INT 5
5713: EQUAL
5714: IFFALSE 5724
// sLevel := true ;
5716: LD_ADDR_EXP 32
5720: PUSH
5721: LD_INT 1
5723: ST_TO_ADDR
// if p3 = 6 then
5724: LD_VAR 0 3
5728: PUSH
5729: LD_INT 6
5731: EQUAL
5732: IFFALSE 5742
// sArmoury := true ;
5734: LD_ADDR_EXP 33
5738: PUSH
5739: LD_INT 1
5741: ST_TO_ADDR
// if p3 = 7 then
5742: LD_VAR 0 3
5746: PUSH
5747: LD_INT 7
5749: EQUAL
5750: IFFALSE 5760
// sRadar := true ;
5752: LD_ADDR_EXP 34
5756: PUSH
5757: LD_INT 1
5759: ST_TO_ADDR
// if p3 = 8 then
5760: LD_VAR 0 3
5764: PUSH
5765: LD_INT 8
5767: EQUAL
5768: IFFALSE 5778
// sBunker := true ;
5770: LD_ADDR_EXP 35
5774: PUSH
5775: LD_INT 1
5777: ST_TO_ADDR
// if p3 = 9 then
5778: LD_VAR 0 3
5782: PUSH
5783: LD_INT 9
5785: EQUAL
5786: IFFALSE 5796
// sHack := true ;
5788: LD_ADDR_EXP 36
5792: PUSH
5793: LD_INT 1
5795: ST_TO_ADDR
// if p3 = 10 then
5796: LD_VAR 0 3
5800: PUSH
5801: LD_INT 10
5803: EQUAL
5804: IFFALSE 5814
// sFire := true ;
5806: LD_ADDR_EXP 37
5810: PUSH
5811: LD_INT 1
5813: ST_TO_ADDR
// if p3 = 11 then
5814: LD_VAR 0 3
5818: PUSH
5819: LD_INT 11
5821: EQUAL
5822: IFFALSE 5832
// sRefresh := true ;
5824: LD_ADDR_EXP 38
5828: PUSH
5829: LD_INT 1
5831: ST_TO_ADDR
// if p3 = 12 then
5832: LD_VAR 0 3
5836: PUSH
5837: LD_INT 12
5839: EQUAL
5840: IFFALSE 5850
// sExp := true ;
5842: LD_ADDR_EXP 39
5846: PUSH
5847: LD_INT 1
5849: ST_TO_ADDR
// if p3 = 13 then
5850: LD_VAR 0 3
5854: PUSH
5855: LD_INT 13
5857: EQUAL
5858: IFFALSE 5868
// sDepot := true ;
5860: LD_ADDR_EXP 40
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// if p3 = 14 then
5868: LD_VAR 0 3
5872: PUSH
5873: LD_INT 14
5875: EQUAL
5876: IFFALSE 5886
// sFlag := true ;
5878: LD_ADDR_EXP 41
5882: PUSH
5883: LD_INT 1
5885: ST_TO_ADDR
// if p3 = 15 then
5886: LD_VAR 0 3
5890: PUSH
5891: LD_INT 15
5893: EQUAL
5894: IFFALSE 5904
// sKamikadze := true ;
5896: LD_ADDR_EXP 49
5900: PUSH
5901: LD_INT 1
5903: ST_TO_ADDR
// if p3 = 16 then
5904: LD_VAR 0 3
5908: PUSH
5909: LD_INT 16
5911: EQUAL
5912: IFFALSE 5922
// sTroll := true ;
5914: LD_ADDR_EXP 50
5918: PUSH
5919: LD_INT 1
5921: ST_TO_ADDR
// if p3 = 17 then
5922: LD_VAR 0 3
5926: PUSH
5927: LD_INT 17
5929: EQUAL
5930: IFFALSE 5940
// sSlow := true ;
5932: LD_ADDR_EXP 51
5936: PUSH
5937: LD_INT 1
5939: ST_TO_ADDR
// if p3 = 18 then
5940: LD_VAR 0 3
5944: PUSH
5945: LD_INT 18
5947: EQUAL
5948: IFFALSE 5958
// sLack := true ;
5950: LD_ADDR_EXP 52
5954: PUSH
5955: LD_INT 1
5957: ST_TO_ADDR
// if p3 = 19 then
5958: LD_VAR 0 3
5962: PUSH
5963: LD_INT 19
5965: EQUAL
5966: IFFALSE 5976
// sTank := true ;
5968: LD_ADDR_EXP 54
5972: PUSH
5973: LD_INT 1
5975: ST_TO_ADDR
// if p3 = 20 then
5976: LD_VAR 0 3
5980: PUSH
5981: LD_INT 20
5983: EQUAL
5984: IFFALSE 5994
// sRemote := true ;
5986: LD_ADDR_EXP 55
5990: PUSH
5991: LD_INT 1
5993: ST_TO_ADDR
// if p3 = 21 then
5994: LD_VAR 0 3
5998: PUSH
5999: LD_INT 21
6001: EQUAL
6002: IFFALSE 6012
// sPowell := true ;
6004: LD_ADDR_EXP 56
6008: PUSH
6009: LD_INT 1
6011: ST_TO_ADDR
// if p3 = 22 then
6012: LD_VAR 0 3
6016: PUSH
6017: LD_INT 22
6019: EQUAL
6020: IFFALSE 6030
// sTeleport := true ;
6022: LD_ADDR_EXP 59
6026: PUSH
6027: LD_INT 1
6029: ST_TO_ADDR
// if p3 = 23 then
6030: LD_VAR 0 3
6034: PUSH
6035: LD_INT 23
6037: EQUAL
6038: IFFALSE 6048
// sOilTower := true ;
6040: LD_ADDR_EXP 61
6044: PUSH
6045: LD_INT 1
6047: ST_TO_ADDR
// if p3 = 24 then
6048: LD_VAR 0 3
6052: PUSH
6053: LD_INT 24
6055: EQUAL
6056: IFFALSE 6066
// sShovel := true ;
6058: LD_ADDR_EXP 62
6062: PUSH
6063: LD_INT 1
6065: ST_TO_ADDR
// if p3 = 25 then
6066: LD_VAR 0 3
6070: PUSH
6071: LD_INT 25
6073: EQUAL
6074: IFFALSE 6084
// sSheik := true ;
6076: LD_ADDR_EXP 63
6080: PUSH
6081: LD_INT 1
6083: ST_TO_ADDR
// if p3 = 26 then
6084: LD_VAR 0 3
6088: PUSH
6089: LD_INT 26
6091: EQUAL
6092: IFFALSE 6102
// sEarthquake := true ;
6094: LD_ADDR_EXP 65
6098: PUSH
6099: LD_INT 1
6101: ST_TO_ADDR
// if p3 = 27 then
6102: LD_VAR 0 3
6106: PUSH
6107: LD_INT 27
6109: EQUAL
6110: IFFALSE 6120
// sAI := true ;
6112: LD_ADDR_EXP 66
6116: PUSH
6117: LD_INT 1
6119: ST_TO_ADDR
// if p3 = 28 then
6120: LD_VAR 0 3
6124: PUSH
6125: LD_INT 28
6127: EQUAL
6128: IFFALSE 6138
// sCargo := true ;
6130: LD_ADDR_EXP 69
6134: PUSH
6135: LD_INT 1
6137: ST_TO_ADDR
// if p3 = 29 then
6138: LD_VAR 0 3
6142: PUSH
6143: LD_INT 29
6145: EQUAL
6146: IFFALSE 6156
// sDLaser := true ;
6148: LD_ADDR_EXP 70
6152: PUSH
6153: LD_INT 1
6155: ST_TO_ADDR
// if p3 = 30 then
6156: LD_VAR 0 3
6160: PUSH
6161: LD_INT 30
6163: EQUAL
6164: IFFALSE 6174
// sExchange := true ;
6166: LD_ADDR_EXP 71
6170: PUSH
6171: LD_INT 1
6173: ST_TO_ADDR
// if p3 = 31 then
6174: LD_VAR 0 3
6178: PUSH
6179: LD_INT 31
6181: EQUAL
6182: IFFALSE 6192
// sFac := true ;
6184: LD_ADDR_EXP 72
6188: PUSH
6189: LD_INT 1
6191: ST_TO_ADDR
// if p3 = 32 then
6192: LD_VAR 0 3
6196: PUSH
6197: LD_INT 32
6199: EQUAL
6200: IFFALSE 6210
// sPower := true ;
6202: LD_ADDR_EXP 73
6206: PUSH
6207: LD_INT 1
6209: ST_TO_ADDR
// if p3 = 33 then
6210: LD_VAR 0 3
6214: PUSH
6215: LD_INT 33
6217: EQUAL
6218: IFFALSE 6228
// sRandom := true ;
6220: LD_ADDR_EXP 74
6224: PUSH
6225: LD_INT 1
6227: ST_TO_ADDR
// if p3 = 34 then
6228: LD_VAR 0 3
6232: PUSH
6233: LD_INT 34
6235: EQUAL
6236: IFFALSE 6246
// sShield := true ;
6238: LD_ADDR_EXP 75
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// if p3 = 35 then
6246: LD_VAR 0 3
6250: PUSH
6251: LD_INT 35
6253: EQUAL
6254: IFFALSE 6264
// sTime := true ;
6256: LD_ADDR_EXP 76
6260: PUSH
6261: LD_INT 1
6263: ST_TO_ADDR
// if p3 = 36 then
6264: LD_VAR 0 3
6268: PUSH
6269: LD_INT 36
6271: EQUAL
6272: IFFALSE 6282
// sTools := true ;
6274: LD_ADDR_EXP 77
6278: PUSH
6279: LD_INT 1
6281: ST_TO_ADDR
// if p3 = 101 then
6282: LD_VAR 0 3
6286: PUSH
6287: LD_INT 101
6289: EQUAL
6290: IFFALSE 6300
// sSold := true ;
6292: LD_ADDR_EXP 42
6296: PUSH
6297: LD_INT 1
6299: ST_TO_ADDR
// if p3 = 102 then
6300: LD_VAR 0 3
6304: PUSH
6305: LD_INT 102
6307: EQUAL
6308: IFFALSE 6318
// sDiff := true ;
6310: LD_ADDR_EXP 43
6314: PUSH
6315: LD_INT 1
6317: ST_TO_ADDR
// if p3 = 103 then
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 103
6325: EQUAL
6326: IFFALSE 6336
// sFog := true ;
6328: LD_ADDR_EXP 46
6332: PUSH
6333: LD_INT 1
6335: ST_TO_ADDR
// if p3 = 104 then
6336: LD_VAR 0 3
6340: PUSH
6341: LD_INT 104
6343: EQUAL
6344: IFFALSE 6354
// sReset := true ;
6346: LD_ADDR_EXP 47
6350: PUSH
6351: LD_INT 1
6353: ST_TO_ADDR
// if p3 = 105 then
6354: LD_VAR 0 3
6358: PUSH
6359: LD_INT 105
6361: EQUAL
6362: IFFALSE 6372
// sSun := true ;
6364: LD_ADDR_EXP 48
6368: PUSH
6369: LD_INT 1
6371: ST_TO_ADDR
// if p3 = 106 then
6372: LD_VAR 0 3
6376: PUSH
6377: LD_INT 106
6379: EQUAL
6380: IFFALSE 6390
// sTiger := true ;
6382: LD_ADDR_EXP 44
6386: PUSH
6387: LD_INT 1
6389: ST_TO_ADDR
// if p3 = 107 then
6390: LD_VAR 0 3
6394: PUSH
6395: LD_INT 107
6397: EQUAL
6398: IFFALSE 6408
// sBomb := true ;
6400: LD_ADDR_EXP 45
6404: PUSH
6405: LD_INT 1
6407: ST_TO_ADDR
// if p3 = 108 then
6408: LD_VAR 0 3
6412: PUSH
6413: LD_INT 108
6415: EQUAL
6416: IFFALSE 6426
// sWound := true ;
6418: LD_ADDR_EXP 53
6422: PUSH
6423: LD_INT 1
6425: ST_TO_ADDR
// if p3 = 109 then
6426: LD_VAR 0 3
6430: PUSH
6431: LD_INT 109
6433: EQUAL
6434: IFFALSE 6444
// sBetray := true ;
6436: LD_ADDR_EXP 57
6440: PUSH
6441: LD_INT 1
6443: ST_TO_ADDR
// if p3 = 110 then
6444: LD_VAR 0 3
6448: PUSH
6449: LD_INT 110
6451: EQUAL
6452: IFFALSE 6462
// sContamin := true ;
6454: LD_ADDR_EXP 58
6458: PUSH
6459: LD_INT 1
6461: ST_TO_ADDR
// if p3 = 111 then
6462: LD_VAR 0 3
6466: PUSH
6467: LD_INT 111
6469: EQUAL
6470: IFFALSE 6480
// sOil := true ;
6472: LD_ADDR_EXP 60
6476: PUSH
6477: LD_INT 1
6479: ST_TO_ADDR
// if p3 = 112 then
6480: LD_VAR 0 3
6484: PUSH
6485: LD_INT 112
6487: EQUAL
6488: IFFALSE 6498
// sStu := true ;
6490: LD_ADDR_EXP 64
6494: PUSH
6495: LD_INT 1
6497: ST_TO_ADDR
// if p3 = 113 then
6498: LD_VAR 0 3
6502: PUSH
6503: LD_INT 113
6505: EQUAL
6506: IFFALSE 6516
// sBazooka := true ;
6508: LD_ADDR_EXP 67
6512: PUSH
6513: LD_INT 1
6515: ST_TO_ADDR
// if p3 = 114 then
6516: LD_VAR 0 3
6520: PUSH
6521: LD_INT 114
6523: EQUAL
6524: IFFALSE 6534
// sMortar := true ;
6526: LD_ADDR_EXP 68
6530: PUSH
6531: LD_INT 1
6533: ST_TO_ADDR
// if p3 = 115 then
6534: LD_VAR 0 3
6538: PUSH
6539: LD_INT 115
6541: EQUAL
6542: IFFALSE 6552
// sRanger := true ;
6544: LD_ADDR_EXP 78
6548: PUSH
6549: LD_INT 1
6551: ST_TO_ADDR
// if p3 = 116 then
6552: LD_VAR 0 3
6556: PUSH
6557: LD_INT 116
6559: EQUAL
6560: IFFALSE 6570
// sComputer := true ;
6562: LD_ADDR_EXP 79
6566: PUSH
6567: LD_INT 1
6569: ST_TO_ADDR
// if p3 = 117 then
6570: LD_VAR 0 3
6574: PUSH
6575: LD_INT 117
6577: EQUAL
6578: IFFALSE 6588
// s30 := true ;
6580: LD_ADDR_EXP 80
6584: PUSH
6585: LD_INT 1
6587: ST_TO_ADDR
// if p3 = 118 then
6588: LD_VAR 0 3
6592: PUSH
6593: LD_INT 118
6595: EQUAL
6596: IFFALSE 6606
// s60 := true ;
6598: LD_ADDR_EXP 81
6602: PUSH
6603: LD_INT 1
6605: ST_TO_ADDR
// end ; if p2 = hack_mode then
6606: LD_VAR 0 2
6610: PUSH
6611: LD_INT 101
6613: EQUAL
6614: IFFALSE 6742
// begin case p3 of 1 :
6616: LD_VAR 0 3
6620: PUSH
6621: LD_INT 1
6623: DOUBLE
6624: EQUAL
6625: IFTRUE 6629
6627: GO 6636
6629: POP
// hHackUnlimitedResources ; 2 :
6630: CALL 18881 0 0
6634: GO 6742
6636: LD_INT 2
6638: DOUBLE
6639: EQUAL
6640: IFTRUE 6644
6642: GO 6651
6644: POP
// hHackSetLevel10 ; 3 :
6645: CALL 19014 0 0
6649: GO 6742
6651: LD_INT 3
6653: DOUBLE
6654: EQUAL
6655: IFTRUE 6659
6657: GO 6666
6659: POP
// hHackSetLevel10YourUnits ; 4 :
6660: CALL 19099 0 0
6664: GO 6742
6666: LD_INT 4
6668: DOUBLE
6669: EQUAL
6670: IFTRUE 6674
6672: GO 6681
6674: POP
// hHackInvincible ; 5 :
6675: CALL 19547 0 0
6679: GO 6742
6681: LD_INT 5
6683: DOUBLE
6684: EQUAL
6685: IFTRUE 6689
6687: GO 6696
6689: POP
// hHackInvisible ; 6 :
6690: CALL 19658 0 0
6694: GO 6742
6696: LD_INT 6
6698: DOUBLE
6699: EQUAL
6700: IFTRUE 6704
6702: GO 6711
6704: POP
// hHackChangeYourSide ; 7 :
6705: CALL 19715 0 0
6709: GO 6742
6711: LD_INT 7
6713: DOUBLE
6714: EQUAL
6715: IFTRUE 6719
6717: GO 6726
6719: POP
// hHackChangeUnitSide ; 8 :
6720: CALL 19757 0 0
6724: GO 6742
6726: LD_INT 8
6728: DOUBLE
6729: EQUAL
6730: IFTRUE 6734
6732: GO 6741
6734: POP
// hHackFog ; end ;
6735: CALL 19858 0 0
6739: GO 6742
6741: POP
// end ; if p2 = game_save_mode then
6742: LD_VAR 0 2
6746: PUSH
6747: LD_INT 102
6749: EQUAL
6750: IFFALSE 6805
// begin if p3 = 1 then
6752: LD_VAR 0 3
6756: PUSH
6757: LD_INT 1
6759: EQUAL
6760: IFFALSE 6772
// globalGameSaveCounter := p4 ;
6762: LD_ADDR_EXP 24
6766: PUSH
6767: LD_VAR 0 4
6771: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6772: LD_VAR 0 3
6776: PUSH
6777: LD_INT 2
6779: EQUAL
6780: PUSH
6781: LD_EXP 24
6785: AND
6786: IFFALSE 6805
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6788: LD_STRING setGameSaveCounter(
6790: PUSH
6791: LD_EXP 24
6795: STR
6796: PUSH
6797: LD_STRING )
6799: STR
6800: PPUSH
6801: CALL_OW 559
// end ; end ;
6805: LD_VAR 0 7
6809: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6810: LD_INT 0
6812: PPUSH
// streamModeActive := false ;
6813: LD_ADDR_EXP 25
6817: PUSH
6818: LD_INT 0
6820: ST_TO_ADDR
// normalCounter := 36 ;
6821: LD_ADDR_EXP 26
6825: PUSH
6826: LD_INT 36
6828: ST_TO_ADDR
// hardcoreCounter := 18 ;
6829: LD_ADDR_EXP 27
6833: PUSH
6834: LD_INT 18
6836: ST_TO_ADDR
// sRocket := false ;
6837: LD_ADDR_EXP 30
6841: PUSH
6842: LD_INT 0
6844: ST_TO_ADDR
// sSpeed := false ;
6845: LD_ADDR_EXP 29
6849: PUSH
6850: LD_INT 0
6852: ST_TO_ADDR
// sEngine := false ;
6853: LD_ADDR_EXP 31
6857: PUSH
6858: LD_INT 0
6860: ST_TO_ADDR
// sSpec := false ;
6861: LD_ADDR_EXP 28
6865: PUSH
6866: LD_INT 0
6868: ST_TO_ADDR
// sLevel := false ;
6869: LD_ADDR_EXP 32
6873: PUSH
6874: LD_INT 0
6876: ST_TO_ADDR
// sArmoury := false ;
6877: LD_ADDR_EXP 33
6881: PUSH
6882: LD_INT 0
6884: ST_TO_ADDR
// sRadar := false ;
6885: LD_ADDR_EXP 34
6889: PUSH
6890: LD_INT 0
6892: ST_TO_ADDR
// sBunker := false ;
6893: LD_ADDR_EXP 35
6897: PUSH
6898: LD_INT 0
6900: ST_TO_ADDR
// sHack := false ;
6901: LD_ADDR_EXP 36
6905: PUSH
6906: LD_INT 0
6908: ST_TO_ADDR
// sFire := false ;
6909: LD_ADDR_EXP 37
6913: PUSH
6914: LD_INT 0
6916: ST_TO_ADDR
// sRefresh := false ;
6917: LD_ADDR_EXP 38
6921: PUSH
6922: LD_INT 0
6924: ST_TO_ADDR
// sExp := false ;
6925: LD_ADDR_EXP 39
6929: PUSH
6930: LD_INT 0
6932: ST_TO_ADDR
// sDepot := false ;
6933: LD_ADDR_EXP 40
6937: PUSH
6938: LD_INT 0
6940: ST_TO_ADDR
// sFlag := false ;
6941: LD_ADDR_EXP 41
6945: PUSH
6946: LD_INT 0
6948: ST_TO_ADDR
// sKamikadze := false ;
6949: LD_ADDR_EXP 49
6953: PUSH
6954: LD_INT 0
6956: ST_TO_ADDR
// sTroll := false ;
6957: LD_ADDR_EXP 50
6961: PUSH
6962: LD_INT 0
6964: ST_TO_ADDR
// sSlow := false ;
6965: LD_ADDR_EXP 51
6969: PUSH
6970: LD_INT 0
6972: ST_TO_ADDR
// sLack := false ;
6973: LD_ADDR_EXP 52
6977: PUSH
6978: LD_INT 0
6980: ST_TO_ADDR
// sTank := false ;
6981: LD_ADDR_EXP 54
6985: PUSH
6986: LD_INT 0
6988: ST_TO_ADDR
// sRemote := false ;
6989: LD_ADDR_EXP 55
6993: PUSH
6994: LD_INT 0
6996: ST_TO_ADDR
// sPowell := false ;
6997: LD_ADDR_EXP 56
7001: PUSH
7002: LD_INT 0
7004: ST_TO_ADDR
// sTeleport := false ;
7005: LD_ADDR_EXP 59
7009: PUSH
7010: LD_INT 0
7012: ST_TO_ADDR
// sOilTower := false ;
7013: LD_ADDR_EXP 61
7017: PUSH
7018: LD_INT 0
7020: ST_TO_ADDR
// sShovel := false ;
7021: LD_ADDR_EXP 62
7025: PUSH
7026: LD_INT 0
7028: ST_TO_ADDR
// sSheik := false ;
7029: LD_ADDR_EXP 63
7033: PUSH
7034: LD_INT 0
7036: ST_TO_ADDR
// sEarthquake := false ;
7037: LD_ADDR_EXP 65
7041: PUSH
7042: LD_INT 0
7044: ST_TO_ADDR
// sAI := false ;
7045: LD_ADDR_EXP 66
7049: PUSH
7050: LD_INT 0
7052: ST_TO_ADDR
// sCargo := false ;
7053: LD_ADDR_EXP 69
7057: PUSH
7058: LD_INT 0
7060: ST_TO_ADDR
// sDLaser := false ;
7061: LD_ADDR_EXP 70
7065: PUSH
7066: LD_INT 0
7068: ST_TO_ADDR
// sExchange := false ;
7069: LD_ADDR_EXP 71
7073: PUSH
7074: LD_INT 0
7076: ST_TO_ADDR
// sFac := false ;
7077: LD_ADDR_EXP 72
7081: PUSH
7082: LD_INT 0
7084: ST_TO_ADDR
// sPower := false ;
7085: LD_ADDR_EXP 73
7089: PUSH
7090: LD_INT 0
7092: ST_TO_ADDR
// sRandom := false ;
7093: LD_ADDR_EXP 74
7097: PUSH
7098: LD_INT 0
7100: ST_TO_ADDR
// sShield := false ;
7101: LD_ADDR_EXP 75
7105: PUSH
7106: LD_INT 0
7108: ST_TO_ADDR
// sTime := false ;
7109: LD_ADDR_EXP 76
7113: PUSH
7114: LD_INT 0
7116: ST_TO_ADDR
// sTools := false ;
7117: LD_ADDR_EXP 77
7121: PUSH
7122: LD_INT 0
7124: ST_TO_ADDR
// sSold := false ;
7125: LD_ADDR_EXP 42
7129: PUSH
7130: LD_INT 0
7132: ST_TO_ADDR
// sDiff := false ;
7133: LD_ADDR_EXP 43
7137: PUSH
7138: LD_INT 0
7140: ST_TO_ADDR
// sFog := false ;
7141: LD_ADDR_EXP 46
7145: PUSH
7146: LD_INT 0
7148: ST_TO_ADDR
// sReset := false ;
7149: LD_ADDR_EXP 47
7153: PUSH
7154: LD_INT 0
7156: ST_TO_ADDR
// sSun := false ;
7157: LD_ADDR_EXP 48
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
// sTiger := false ;
7165: LD_ADDR_EXP 44
7169: PUSH
7170: LD_INT 0
7172: ST_TO_ADDR
// sBomb := false ;
7173: LD_ADDR_EXP 45
7177: PUSH
7178: LD_INT 0
7180: ST_TO_ADDR
// sWound := false ;
7181: LD_ADDR_EXP 53
7185: PUSH
7186: LD_INT 0
7188: ST_TO_ADDR
// sBetray := false ;
7189: LD_ADDR_EXP 57
7193: PUSH
7194: LD_INT 0
7196: ST_TO_ADDR
// sContamin := false ;
7197: LD_ADDR_EXP 58
7201: PUSH
7202: LD_INT 0
7204: ST_TO_ADDR
// sOil := false ;
7205: LD_ADDR_EXP 60
7209: PUSH
7210: LD_INT 0
7212: ST_TO_ADDR
// sStu := false ;
7213: LD_ADDR_EXP 64
7217: PUSH
7218: LD_INT 0
7220: ST_TO_ADDR
// sBazooka := false ;
7221: LD_ADDR_EXP 67
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// sMortar := false ;
7229: LD_ADDR_EXP 68
7233: PUSH
7234: LD_INT 0
7236: ST_TO_ADDR
// sRanger := false ;
7237: LD_ADDR_EXP 78
7241: PUSH
7242: LD_INT 0
7244: ST_TO_ADDR
// sComputer := false ;
7245: LD_ADDR_EXP 79
7249: PUSH
7250: LD_INT 0
7252: ST_TO_ADDR
// s30 := false ;
7253: LD_ADDR_EXP 80
7257: PUSH
7258: LD_INT 0
7260: ST_TO_ADDR
// s60 := false ;
7261: LD_ADDR_EXP 81
7265: PUSH
7266: LD_INT 0
7268: ST_TO_ADDR
// end ;
7269: LD_VAR 0 1
7273: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7274: LD_INT 0
7276: PPUSH
7277: PPUSH
7278: PPUSH
7279: PPUSH
7280: PPUSH
7281: PPUSH
7282: PPUSH
// result := [ ] ;
7283: LD_ADDR_VAR 0 2
7287: PUSH
7288: EMPTY
7289: ST_TO_ADDR
// if campaign_id = 1 then
7290: LD_OWVAR 69
7294: PUSH
7295: LD_INT 1
7297: EQUAL
7298: IFFALSE 10464
// begin case mission_number of 1 :
7300: LD_OWVAR 70
7304: PUSH
7305: LD_INT 1
7307: DOUBLE
7308: EQUAL
7309: IFTRUE 7313
7311: GO 7389
7313: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7314: LD_ADDR_VAR 0 2
7318: PUSH
7319: LD_INT 2
7321: PUSH
7322: LD_INT 4
7324: PUSH
7325: LD_INT 11
7327: PUSH
7328: LD_INT 12
7330: PUSH
7331: LD_INT 15
7333: PUSH
7334: LD_INT 16
7336: PUSH
7337: LD_INT 22
7339: PUSH
7340: LD_INT 23
7342: PUSH
7343: LD_INT 26
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 101
7359: PUSH
7360: LD_INT 102
7362: PUSH
7363: LD_INT 106
7365: PUSH
7366: LD_INT 116
7368: PUSH
7369: LD_INT 117
7371: PUSH
7372: LD_INT 118
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: ST_TO_ADDR
7387: GO 10462
7389: LD_INT 2
7391: DOUBLE
7392: EQUAL
7393: IFTRUE 7397
7395: GO 7481
7397: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7398: LD_ADDR_VAR 0 2
7402: PUSH
7403: LD_INT 2
7405: PUSH
7406: LD_INT 4
7408: PUSH
7409: LD_INT 11
7411: PUSH
7412: LD_INT 12
7414: PUSH
7415: LD_INT 15
7417: PUSH
7418: LD_INT 16
7420: PUSH
7421: LD_INT 22
7423: PUSH
7424: LD_INT 23
7426: PUSH
7427: LD_INT 26
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: PUSH
7441: LD_INT 101
7443: PUSH
7444: LD_INT 102
7446: PUSH
7447: LD_INT 105
7449: PUSH
7450: LD_INT 106
7452: PUSH
7453: LD_INT 108
7455: PUSH
7456: LD_INT 116
7458: PUSH
7459: LD_INT 117
7461: PUSH
7462: LD_INT 118
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: ST_TO_ADDR
7479: GO 10462
7481: LD_INT 3
7483: DOUBLE
7484: EQUAL
7485: IFTRUE 7489
7487: GO 7577
7489: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7490: LD_ADDR_VAR 0 2
7494: PUSH
7495: LD_INT 2
7497: PUSH
7498: LD_INT 4
7500: PUSH
7501: LD_INT 5
7503: PUSH
7504: LD_INT 11
7506: PUSH
7507: LD_INT 12
7509: PUSH
7510: LD_INT 15
7512: PUSH
7513: LD_INT 16
7515: PUSH
7516: LD_INT 22
7518: PUSH
7519: LD_INT 26
7521: PUSH
7522: LD_INT 36
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 101
7539: PUSH
7540: LD_INT 102
7542: PUSH
7543: LD_INT 105
7545: PUSH
7546: LD_INT 106
7548: PUSH
7549: LD_INT 108
7551: PUSH
7552: LD_INT 116
7554: PUSH
7555: LD_INT 117
7557: PUSH
7558: LD_INT 118
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: ST_TO_ADDR
7575: GO 10462
7577: LD_INT 4
7579: DOUBLE
7580: EQUAL
7581: IFTRUE 7585
7583: GO 7681
7585: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7586: LD_ADDR_VAR 0 2
7590: PUSH
7591: LD_INT 2
7593: PUSH
7594: LD_INT 4
7596: PUSH
7597: LD_INT 5
7599: PUSH
7600: LD_INT 8
7602: PUSH
7603: LD_INT 11
7605: PUSH
7606: LD_INT 12
7608: PUSH
7609: LD_INT 15
7611: PUSH
7612: LD_INT 16
7614: PUSH
7615: LD_INT 22
7617: PUSH
7618: LD_INT 23
7620: PUSH
7621: LD_INT 26
7623: PUSH
7624: LD_INT 36
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 101
7643: PUSH
7644: LD_INT 102
7646: PUSH
7647: LD_INT 105
7649: PUSH
7650: LD_INT 106
7652: PUSH
7653: LD_INT 108
7655: PUSH
7656: LD_INT 116
7658: PUSH
7659: LD_INT 117
7661: PUSH
7662: LD_INT 118
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: ST_TO_ADDR
7679: GO 10462
7681: LD_INT 5
7683: DOUBLE
7684: EQUAL
7685: IFTRUE 7689
7687: GO 7801
7689: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7690: LD_ADDR_VAR 0 2
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 4
7700: PUSH
7701: LD_INT 5
7703: PUSH
7704: LD_INT 6
7706: PUSH
7707: LD_INT 8
7709: PUSH
7710: LD_INT 11
7712: PUSH
7713: LD_INT 12
7715: PUSH
7716: LD_INT 15
7718: PUSH
7719: LD_INT 16
7721: PUSH
7722: LD_INT 22
7724: PUSH
7725: LD_INT 23
7727: PUSH
7728: LD_INT 25
7730: PUSH
7731: LD_INT 26
7733: PUSH
7734: LD_INT 36
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 101
7755: PUSH
7756: LD_INT 102
7758: PUSH
7759: LD_INT 105
7761: PUSH
7762: LD_INT 106
7764: PUSH
7765: LD_INT 108
7767: PUSH
7768: LD_INT 109
7770: PUSH
7771: LD_INT 112
7773: PUSH
7774: LD_INT 116
7776: PUSH
7777: LD_INT 117
7779: PUSH
7780: LD_INT 118
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: ST_TO_ADDR
7799: GO 10462
7801: LD_INT 6
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7941
7809: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7810: LD_ADDR_VAR 0 2
7814: PUSH
7815: LD_INT 2
7817: PUSH
7818: LD_INT 4
7820: PUSH
7821: LD_INT 5
7823: PUSH
7824: LD_INT 6
7826: PUSH
7827: LD_INT 8
7829: PUSH
7830: LD_INT 11
7832: PUSH
7833: LD_INT 12
7835: PUSH
7836: LD_INT 15
7838: PUSH
7839: LD_INT 16
7841: PUSH
7842: LD_INT 20
7844: PUSH
7845: LD_INT 21
7847: PUSH
7848: LD_INT 22
7850: PUSH
7851: LD_INT 23
7853: PUSH
7854: LD_INT 25
7856: PUSH
7857: LD_INT 26
7859: PUSH
7860: LD_INT 30
7862: PUSH
7863: LD_INT 31
7865: PUSH
7866: LD_INT 32
7868: PUSH
7869: LD_INT 36
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: PUSH
7893: LD_INT 101
7895: PUSH
7896: LD_INT 102
7898: PUSH
7899: LD_INT 105
7901: PUSH
7902: LD_INT 106
7904: PUSH
7905: LD_INT 108
7907: PUSH
7908: LD_INT 109
7910: PUSH
7911: LD_INT 112
7913: PUSH
7914: LD_INT 116
7916: PUSH
7917: LD_INT 117
7919: PUSH
7920: LD_INT 118
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: ST_TO_ADDR
7939: GO 10462
7941: LD_INT 7
7943: DOUBLE
7944: EQUAL
7945: IFTRUE 7949
7947: GO 8061
7949: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7950: LD_ADDR_VAR 0 2
7954: PUSH
7955: LD_INT 2
7957: PUSH
7958: LD_INT 4
7960: PUSH
7961: LD_INT 5
7963: PUSH
7964: LD_INT 7
7966: PUSH
7967: LD_INT 11
7969: PUSH
7970: LD_INT 12
7972: PUSH
7973: LD_INT 15
7975: PUSH
7976: LD_INT 16
7978: PUSH
7979: LD_INT 20
7981: PUSH
7982: LD_INT 21
7984: PUSH
7985: LD_INT 22
7987: PUSH
7988: LD_INT 23
7990: PUSH
7991: LD_INT 25
7993: PUSH
7994: LD_INT 26
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 101
8015: PUSH
8016: LD_INT 102
8018: PUSH
8019: LD_INT 103
8021: PUSH
8022: LD_INT 105
8024: PUSH
8025: LD_INT 106
8027: PUSH
8028: LD_INT 108
8030: PUSH
8031: LD_INT 112
8033: PUSH
8034: LD_INT 116
8036: PUSH
8037: LD_INT 117
8039: PUSH
8040: LD_INT 118
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: ST_TO_ADDR
8059: GO 10462
8061: LD_INT 8
8063: DOUBLE
8064: EQUAL
8065: IFTRUE 8069
8067: GO 8209
8069: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8070: LD_ADDR_VAR 0 2
8074: PUSH
8075: LD_INT 2
8077: PUSH
8078: LD_INT 4
8080: PUSH
8081: LD_INT 5
8083: PUSH
8084: LD_INT 6
8086: PUSH
8087: LD_INT 7
8089: PUSH
8090: LD_INT 8
8092: PUSH
8093: LD_INT 11
8095: PUSH
8096: LD_INT 12
8098: PUSH
8099: LD_INT 15
8101: PUSH
8102: LD_INT 16
8104: PUSH
8105: LD_INT 20
8107: PUSH
8108: LD_INT 21
8110: PUSH
8111: LD_INT 22
8113: PUSH
8114: LD_INT 23
8116: PUSH
8117: LD_INT 25
8119: PUSH
8120: LD_INT 26
8122: PUSH
8123: LD_INT 30
8125: PUSH
8126: LD_INT 31
8128: PUSH
8129: LD_INT 32
8131: PUSH
8132: LD_INT 36
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: PUSH
8157: LD_INT 101
8159: PUSH
8160: LD_INT 102
8162: PUSH
8163: LD_INT 103
8165: PUSH
8166: LD_INT 105
8168: PUSH
8169: LD_INT 106
8171: PUSH
8172: LD_INT 108
8174: PUSH
8175: LD_INT 109
8177: PUSH
8178: LD_INT 112
8180: PUSH
8181: LD_INT 116
8183: PUSH
8184: LD_INT 117
8186: PUSH
8187: LD_INT 118
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: ST_TO_ADDR
8207: GO 10462
8209: LD_INT 9
8211: DOUBLE
8212: EQUAL
8213: IFTRUE 8217
8215: GO 8365
8217: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8218: LD_ADDR_VAR 0 2
8222: PUSH
8223: LD_INT 2
8225: PUSH
8226: LD_INT 4
8228: PUSH
8229: LD_INT 5
8231: PUSH
8232: LD_INT 6
8234: PUSH
8235: LD_INT 7
8237: PUSH
8238: LD_INT 8
8240: PUSH
8241: LD_INT 11
8243: PUSH
8244: LD_INT 12
8246: PUSH
8247: LD_INT 15
8249: PUSH
8250: LD_INT 16
8252: PUSH
8253: LD_INT 20
8255: PUSH
8256: LD_INT 21
8258: PUSH
8259: LD_INT 22
8261: PUSH
8262: LD_INT 23
8264: PUSH
8265: LD_INT 25
8267: PUSH
8268: LD_INT 26
8270: PUSH
8271: LD_INT 28
8273: PUSH
8274: LD_INT 30
8276: PUSH
8277: LD_INT 31
8279: PUSH
8280: LD_INT 32
8282: PUSH
8283: LD_INT 36
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: PUSH
8309: LD_INT 101
8311: PUSH
8312: LD_INT 102
8314: PUSH
8315: LD_INT 103
8317: PUSH
8318: LD_INT 105
8320: PUSH
8321: LD_INT 106
8323: PUSH
8324: LD_INT 108
8326: PUSH
8327: LD_INT 109
8329: PUSH
8330: LD_INT 112
8332: PUSH
8333: LD_INT 114
8335: PUSH
8336: LD_INT 116
8338: PUSH
8339: LD_INT 117
8341: PUSH
8342: LD_INT 118
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: ST_TO_ADDR
8363: GO 10462
8365: LD_INT 10
8367: DOUBLE
8368: EQUAL
8369: IFTRUE 8373
8371: GO 8569
8373: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8374: LD_ADDR_VAR 0 2
8378: PUSH
8379: LD_INT 2
8381: PUSH
8382: LD_INT 4
8384: PUSH
8385: LD_INT 5
8387: PUSH
8388: LD_INT 6
8390: PUSH
8391: LD_INT 7
8393: PUSH
8394: LD_INT 8
8396: PUSH
8397: LD_INT 9
8399: PUSH
8400: LD_INT 10
8402: PUSH
8403: LD_INT 11
8405: PUSH
8406: LD_INT 12
8408: PUSH
8409: LD_INT 13
8411: PUSH
8412: LD_INT 14
8414: PUSH
8415: LD_INT 15
8417: PUSH
8418: LD_INT 16
8420: PUSH
8421: LD_INT 17
8423: PUSH
8424: LD_INT 18
8426: PUSH
8427: LD_INT 19
8429: PUSH
8430: LD_INT 20
8432: PUSH
8433: LD_INT 21
8435: PUSH
8436: LD_INT 22
8438: PUSH
8439: LD_INT 23
8441: PUSH
8442: LD_INT 24
8444: PUSH
8445: LD_INT 25
8447: PUSH
8448: LD_INT 26
8450: PUSH
8451: LD_INT 28
8453: PUSH
8454: LD_INT 30
8456: PUSH
8457: LD_INT 31
8459: PUSH
8460: LD_INT 32
8462: PUSH
8463: LD_INT 36
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 101
8499: PUSH
8500: LD_INT 102
8502: PUSH
8503: LD_INT 103
8505: PUSH
8506: LD_INT 104
8508: PUSH
8509: LD_INT 105
8511: PUSH
8512: LD_INT 106
8514: PUSH
8515: LD_INT 107
8517: PUSH
8518: LD_INT 108
8520: PUSH
8521: LD_INT 109
8523: PUSH
8524: LD_INT 110
8526: PUSH
8527: LD_INT 111
8529: PUSH
8530: LD_INT 112
8532: PUSH
8533: LD_INT 114
8535: PUSH
8536: LD_INT 116
8538: PUSH
8539: LD_INT 117
8541: PUSH
8542: LD_INT 118
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: ST_TO_ADDR
8567: GO 10462
8569: LD_INT 11
8571: DOUBLE
8572: EQUAL
8573: IFTRUE 8577
8575: GO 8781
8577: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8578: LD_ADDR_VAR 0 2
8582: PUSH
8583: LD_INT 2
8585: PUSH
8586: LD_INT 3
8588: PUSH
8589: LD_INT 4
8591: PUSH
8592: LD_INT 5
8594: PUSH
8595: LD_INT 6
8597: PUSH
8598: LD_INT 7
8600: PUSH
8601: LD_INT 8
8603: PUSH
8604: LD_INT 9
8606: PUSH
8607: LD_INT 10
8609: PUSH
8610: LD_INT 11
8612: PUSH
8613: LD_INT 12
8615: PUSH
8616: LD_INT 13
8618: PUSH
8619: LD_INT 14
8621: PUSH
8622: LD_INT 15
8624: PUSH
8625: LD_INT 16
8627: PUSH
8628: LD_INT 17
8630: PUSH
8631: LD_INT 18
8633: PUSH
8634: LD_INT 19
8636: PUSH
8637: LD_INT 20
8639: PUSH
8640: LD_INT 21
8642: PUSH
8643: LD_INT 22
8645: PUSH
8646: LD_INT 23
8648: PUSH
8649: LD_INT 24
8651: PUSH
8652: LD_INT 25
8654: PUSH
8655: LD_INT 26
8657: PUSH
8658: LD_INT 28
8660: PUSH
8661: LD_INT 30
8663: PUSH
8664: LD_INT 31
8666: PUSH
8667: LD_INT 32
8669: PUSH
8670: LD_INT 34
8672: PUSH
8673: LD_INT 36
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 101
8711: PUSH
8712: LD_INT 102
8714: PUSH
8715: LD_INT 103
8717: PUSH
8718: LD_INT 104
8720: PUSH
8721: LD_INT 105
8723: PUSH
8724: LD_INT 106
8726: PUSH
8727: LD_INT 107
8729: PUSH
8730: LD_INT 108
8732: PUSH
8733: LD_INT 109
8735: PUSH
8736: LD_INT 110
8738: PUSH
8739: LD_INT 111
8741: PUSH
8742: LD_INT 112
8744: PUSH
8745: LD_INT 114
8747: PUSH
8748: LD_INT 116
8750: PUSH
8751: LD_INT 117
8753: PUSH
8754: LD_INT 118
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: ST_TO_ADDR
8779: GO 10462
8781: LD_INT 12
8783: DOUBLE
8784: EQUAL
8785: IFTRUE 8789
8787: GO 9009
8789: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8790: LD_ADDR_VAR 0 2
8794: PUSH
8795: LD_INT 1
8797: PUSH
8798: LD_INT 2
8800: PUSH
8801: LD_INT 3
8803: PUSH
8804: LD_INT 4
8806: PUSH
8807: LD_INT 5
8809: PUSH
8810: LD_INT 6
8812: PUSH
8813: LD_INT 7
8815: PUSH
8816: LD_INT 8
8818: PUSH
8819: LD_INT 9
8821: PUSH
8822: LD_INT 10
8824: PUSH
8825: LD_INT 11
8827: PUSH
8828: LD_INT 12
8830: PUSH
8831: LD_INT 13
8833: PUSH
8834: LD_INT 14
8836: PUSH
8837: LD_INT 15
8839: PUSH
8840: LD_INT 16
8842: PUSH
8843: LD_INT 17
8845: PUSH
8846: LD_INT 18
8848: PUSH
8849: LD_INT 19
8851: PUSH
8852: LD_INT 20
8854: PUSH
8855: LD_INT 21
8857: PUSH
8858: LD_INT 22
8860: PUSH
8861: LD_INT 23
8863: PUSH
8864: LD_INT 24
8866: PUSH
8867: LD_INT 25
8869: PUSH
8870: LD_INT 26
8872: PUSH
8873: LD_INT 27
8875: PUSH
8876: LD_INT 28
8878: PUSH
8879: LD_INT 30
8881: PUSH
8882: LD_INT 31
8884: PUSH
8885: LD_INT 32
8887: PUSH
8888: LD_INT 33
8890: PUSH
8891: LD_INT 34
8893: PUSH
8894: LD_INT 36
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 101
8935: PUSH
8936: LD_INT 102
8938: PUSH
8939: LD_INT 103
8941: PUSH
8942: LD_INT 104
8944: PUSH
8945: LD_INT 105
8947: PUSH
8948: LD_INT 106
8950: PUSH
8951: LD_INT 107
8953: PUSH
8954: LD_INT 108
8956: PUSH
8957: LD_INT 109
8959: PUSH
8960: LD_INT 110
8962: PUSH
8963: LD_INT 111
8965: PUSH
8966: LD_INT 112
8968: PUSH
8969: LD_INT 113
8971: PUSH
8972: LD_INT 114
8974: PUSH
8975: LD_INT 116
8977: PUSH
8978: LD_INT 117
8980: PUSH
8981: LD_INT 118
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: ST_TO_ADDR
9007: GO 10462
9009: LD_INT 13
9011: DOUBLE
9012: EQUAL
9013: IFTRUE 9017
9015: GO 9225
9017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9018: LD_ADDR_VAR 0 2
9022: PUSH
9023: LD_INT 1
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: LD_INT 3
9031: PUSH
9032: LD_INT 4
9034: PUSH
9035: LD_INT 5
9037: PUSH
9038: LD_INT 8
9040: PUSH
9041: LD_INT 9
9043: PUSH
9044: LD_INT 10
9046: PUSH
9047: LD_INT 11
9049: PUSH
9050: LD_INT 12
9052: PUSH
9053: LD_INT 14
9055: PUSH
9056: LD_INT 15
9058: PUSH
9059: LD_INT 16
9061: PUSH
9062: LD_INT 17
9064: PUSH
9065: LD_INT 18
9067: PUSH
9068: LD_INT 19
9070: PUSH
9071: LD_INT 20
9073: PUSH
9074: LD_INT 21
9076: PUSH
9077: LD_INT 22
9079: PUSH
9080: LD_INT 23
9082: PUSH
9083: LD_INT 24
9085: PUSH
9086: LD_INT 25
9088: PUSH
9089: LD_INT 26
9091: PUSH
9092: LD_INT 27
9094: PUSH
9095: LD_INT 28
9097: PUSH
9098: LD_INT 30
9100: PUSH
9101: LD_INT 31
9103: PUSH
9104: LD_INT 32
9106: PUSH
9107: LD_INT 33
9109: PUSH
9110: LD_INT 34
9112: PUSH
9113: LD_INT 36
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 101
9151: PUSH
9152: LD_INT 102
9154: PUSH
9155: LD_INT 103
9157: PUSH
9158: LD_INT 104
9160: PUSH
9161: LD_INT 105
9163: PUSH
9164: LD_INT 106
9166: PUSH
9167: LD_INT 107
9169: PUSH
9170: LD_INT 108
9172: PUSH
9173: LD_INT 109
9175: PUSH
9176: LD_INT 110
9178: PUSH
9179: LD_INT 111
9181: PUSH
9182: LD_INT 112
9184: PUSH
9185: LD_INT 113
9187: PUSH
9188: LD_INT 114
9190: PUSH
9191: LD_INT 116
9193: PUSH
9194: LD_INT 117
9196: PUSH
9197: LD_INT 118
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: ST_TO_ADDR
9223: GO 10462
9225: LD_INT 14
9227: DOUBLE
9228: EQUAL
9229: IFTRUE 9233
9231: GO 9457
9233: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9234: LD_ADDR_VAR 0 2
9238: PUSH
9239: LD_INT 1
9241: PUSH
9242: LD_INT 2
9244: PUSH
9245: LD_INT 3
9247: PUSH
9248: LD_INT 4
9250: PUSH
9251: LD_INT 5
9253: PUSH
9254: LD_INT 6
9256: PUSH
9257: LD_INT 7
9259: PUSH
9260: LD_INT 8
9262: PUSH
9263: LD_INT 9
9265: PUSH
9266: LD_INT 10
9268: PUSH
9269: LD_INT 11
9271: PUSH
9272: LD_INT 12
9274: PUSH
9275: LD_INT 13
9277: PUSH
9278: LD_INT 14
9280: PUSH
9281: LD_INT 15
9283: PUSH
9284: LD_INT 16
9286: PUSH
9287: LD_INT 17
9289: PUSH
9290: LD_INT 18
9292: PUSH
9293: LD_INT 19
9295: PUSH
9296: LD_INT 20
9298: PUSH
9299: LD_INT 21
9301: PUSH
9302: LD_INT 22
9304: PUSH
9305: LD_INT 23
9307: PUSH
9308: LD_INT 24
9310: PUSH
9311: LD_INT 25
9313: PUSH
9314: LD_INT 26
9316: PUSH
9317: LD_INT 27
9319: PUSH
9320: LD_INT 28
9322: PUSH
9323: LD_INT 29
9325: PUSH
9326: LD_INT 30
9328: PUSH
9329: LD_INT 31
9331: PUSH
9332: LD_INT 32
9334: PUSH
9335: LD_INT 33
9337: PUSH
9338: LD_INT 34
9340: PUSH
9341: LD_INT 36
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 101
9383: PUSH
9384: LD_INT 102
9386: PUSH
9387: LD_INT 103
9389: PUSH
9390: LD_INT 104
9392: PUSH
9393: LD_INT 105
9395: PUSH
9396: LD_INT 106
9398: PUSH
9399: LD_INT 107
9401: PUSH
9402: LD_INT 108
9404: PUSH
9405: LD_INT 109
9407: PUSH
9408: LD_INT 110
9410: PUSH
9411: LD_INT 111
9413: PUSH
9414: LD_INT 112
9416: PUSH
9417: LD_INT 113
9419: PUSH
9420: LD_INT 114
9422: PUSH
9423: LD_INT 116
9425: PUSH
9426: LD_INT 117
9428: PUSH
9429: LD_INT 118
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: ST_TO_ADDR
9455: GO 10462
9457: LD_INT 15
9459: DOUBLE
9460: EQUAL
9461: IFTRUE 9465
9463: GO 9689
9465: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9466: LD_ADDR_VAR 0 2
9470: PUSH
9471: LD_INT 1
9473: PUSH
9474: LD_INT 2
9476: PUSH
9477: LD_INT 3
9479: PUSH
9480: LD_INT 4
9482: PUSH
9483: LD_INT 5
9485: PUSH
9486: LD_INT 6
9488: PUSH
9489: LD_INT 7
9491: PUSH
9492: LD_INT 8
9494: PUSH
9495: LD_INT 9
9497: PUSH
9498: LD_INT 10
9500: PUSH
9501: LD_INT 11
9503: PUSH
9504: LD_INT 12
9506: PUSH
9507: LD_INT 13
9509: PUSH
9510: LD_INT 14
9512: PUSH
9513: LD_INT 15
9515: PUSH
9516: LD_INT 16
9518: PUSH
9519: LD_INT 17
9521: PUSH
9522: LD_INT 18
9524: PUSH
9525: LD_INT 19
9527: PUSH
9528: LD_INT 20
9530: PUSH
9531: LD_INT 21
9533: PUSH
9534: LD_INT 22
9536: PUSH
9537: LD_INT 23
9539: PUSH
9540: LD_INT 24
9542: PUSH
9543: LD_INT 25
9545: PUSH
9546: LD_INT 26
9548: PUSH
9549: LD_INT 27
9551: PUSH
9552: LD_INT 28
9554: PUSH
9555: LD_INT 29
9557: PUSH
9558: LD_INT 30
9560: PUSH
9561: LD_INT 31
9563: PUSH
9564: LD_INT 32
9566: PUSH
9567: LD_INT 33
9569: PUSH
9570: LD_INT 34
9572: PUSH
9573: LD_INT 36
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 101
9615: PUSH
9616: LD_INT 102
9618: PUSH
9619: LD_INT 103
9621: PUSH
9622: LD_INT 104
9624: PUSH
9625: LD_INT 105
9627: PUSH
9628: LD_INT 106
9630: PUSH
9631: LD_INT 107
9633: PUSH
9634: LD_INT 108
9636: PUSH
9637: LD_INT 109
9639: PUSH
9640: LD_INT 110
9642: PUSH
9643: LD_INT 111
9645: PUSH
9646: LD_INT 112
9648: PUSH
9649: LD_INT 113
9651: PUSH
9652: LD_INT 114
9654: PUSH
9655: LD_INT 116
9657: PUSH
9658: LD_INT 117
9660: PUSH
9661: LD_INT 118
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: ST_TO_ADDR
9687: GO 10462
9689: LD_INT 16
9691: DOUBLE
9692: EQUAL
9693: IFTRUE 9697
9695: GO 9833
9697: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9698: LD_ADDR_VAR 0 2
9702: PUSH
9703: LD_INT 2
9705: PUSH
9706: LD_INT 4
9708: PUSH
9709: LD_INT 5
9711: PUSH
9712: LD_INT 7
9714: PUSH
9715: LD_INT 11
9717: PUSH
9718: LD_INT 12
9720: PUSH
9721: LD_INT 15
9723: PUSH
9724: LD_INT 16
9726: PUSH
9727: LD_INT 20
9729: PUSH
9730: LD_INT 21
9732: PUSH
9733: LD_INT 22
9735: PUSH
9736: LD_INT 23
9738: PUSH
9739: LD_INT 25
9741: PUSH
9742: LD_INT 26
9744: PUSH
9745: LD_INT 30
9747: PUSH
9748: LD_INT 31
9750: PUSH
9751: LD_INT 32
9753: PUSH
9754: LD_INT 33
9756: PUSH
9757: LD_INT 34
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 101
9783: PUSH
9784: LD_INT 102
9786: PUSH
9787: LD_INT 103
9789: PUSH
9790: LD_INT 106
9792: PUSH
9793: LD_INT 108
9795: PUSH
9796: LD_INT 112
9798: PUSH
9799: LD_INT 113
9801: PUSH
9802: LD_INT 114
9804: PUSH
9805: LD_INT 116
9807: PUSH
9808: LD_INT 117
9810: PUSH
9811: LD_INT 118
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: ST_TO_ADDR
9831: GO 10462
9833: LD_INT 17
9835: DOUBLE
9836: EQUAL
9837: IFTRUE 9841
9839: GO 10065
9841: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9842: LD_ADDR_VAR 0 2
9846: PUSH
9847: LD_INT 1
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 3
9855: PUSH
9856: LD_INT 4
9858: PUSH
9859: LD_INT 5
9861: PUSH
9862: LD_INT 6
9864: PUSH
9865: LD_INT 7
9867: PUSH
9868: LD_INT 8
9870: PUSH
9871: LD_INT 9
9873: PUSH
9874: LD_INT 10
9876: PUSH
9877: LD_INT 11
9879: PUSH
9880: LD_INT 12
9882: PUSH
9883: LD_INT 13
9885: PUSH
9886: LD_INT 14
9888: PUSH
9889: LD_INT 15
9891: PUSH
9892: LD_INT 16
9894: PUSH
9895: LD_INT 17
9897: PUSH
9898: LD_INT 18
9900: PUSH
9901: LD_INT 19
9903: PUSH
9904: LD_INT 20
9906: PUSH
9907: LD_INT 21
9909: PUSH
9910: LD_INT 22
9912: PUSH
9913: LD_INT 23
9915: PUSH
9916: LD_INT 24
9918: PUSH
9919: LD_INT 25
9921: PUSH
9922: LD_INT 26
9924: PUSH
9925: LD_INT 27
9927: PUSH
9928: LD_INT 28
9930: PUSH
9931: LD_INT 29
9933: PUSH
9934: LD_INT 30
9936: PUSH
9937: LD_INT 31
9939: PUSH
9940: LD_INT 32
9942: PUSH
9943: LD_INT 33
9945: PUSH
9946: LD_INT 34
9948: PUSH
9949: LD_INT 36
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 101
9991: PUSH
9992: LD_INT 102
9994: PUSH
9995: LD_INT 103
9997: PUSH
9998: LD_INT 104
10000: PUSH
10001: LD_INT 105
10003: PUSH
10004: LD_INT 106
10006: PUSH
10007: LD_INT 107
10009: PUSH
10010: LD_INT 108
10012: PUSH
10013: LD_INT 109
10015: PUSH
10016: LD_INT 110
10018: PUSH
10019: LD_INT 111
10021: PUSH
10022: LD_INT 112
10024: PUSH
10025: LD_INT 113
10027: PUSH
10028: LD_INT 114
10030: PUSH
10031: LD_INT 116
10033: PUSH
10034: LD_INT 117
10036: PUSH
10037: LD_INT 118
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: ST_TO_ADDR
10063: GO 10462
10065: LD_INT 18
10067: DOUBLE
10068: EQUAL
10069: IFTRUE 10073
10071: GO 10221
10073: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10074: LD_ADDR_VAR 0 2
10078: PUSH
10079: LD_INT 2
10081: PUSH
10082: LD_INT 4
10084: PUSH
10085: LD_INT 5
10087: PUSH
10088: LD_INT 7
10090: PUSH
10091: LD_INT 11
10093: PUSH
10094: LD_INT 12
10096: PUSH
10097: LD_INT 15
10099: PUSH
10100: LD_INT 16
10102: PUSH
10103: LD_INT 20
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 22
10111: PUSH
10112: LD_INT 23
10114: PUSH
10115: LD_INT 25
10117: PUSH
10118: LD_INT 26
10120: PUSH
10121: LD_INT 30
10123: PUSH
10124: LD_INT 31
10126: PUSH
10127: LD_INT 32
10129: PUSH
10130: LD_INT 33
10132: PUSH
10133: LD_INT 34
10135: PUSH
10136: LD_INT 35
10138: PUSH
10139: LD_INT 36
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: PUSH
10165: LD_INT 101
10167: PUSH
10168: LD_INT 102
10170: PUSH
10171: LD_INT 103
10173: PUSH
10174: LD_INT 106
10176: PUSH
10177: LD_INT 108
10179: PUSH
10180: LD_INT 112
10182: PUSH
10183: LD_INT 113
10185: PUSH
10186: LD_INT 114
10188: PUSH
10189: LD_INT 115
10191: PUSH
10192: LD_INT 116
10194: PUSH
10195: LD_INT 117
10197: PUSH
10198: LD_INT 118
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: ST_TO_ADDR
10219: GO 10462
10221: LD_INT 19
10223: DOUBLE
10224: EQUAL
10225: IFTRUE 10229
10227: GO 10461
10229: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10230: LD_ADDR_VAR 0 2
10234: PUSH
10235: LD_INT 1
10237: PUSH
10238: LD_INT 2
10240: PUSH
10241: LD_INT 3
10243: PUSH
10244: LD_INT 4
10246: PUSH
10247: LD_INT 5
10249: PUSH
10250: LD_INT 6
10252: PUSH
10253: LD_INT 7
10255: PUSH
10256: LD_INT 8
10258: PUSH
10259: LD_INT 9
10261: PUSH
10262: LD_INT 10
10264: PUSH
10265: LD_INT 11
10267: PUSH
10268: LD_INT 12
10270: PUSH
10271: LD_INT 13
10273: PUSH
10274: LD_INT 14
10276: PUSH
10277: LD_INT 15
10279: PUSH
10280: LD_INT 16
10282: PUSH
10283: LD_INT 17
10285: PUSH
10286: LD_INT 18
10288: PUSH
10289: LD_INT 19
10291: PUSH
10292: LD_INT 20
10294: PUSH
10295: LD_INT 21
10297: PUSH
10298: LD_INT 22
10300: PUSH
10301: LD_INT 23
10303: PUSH
10304: LD_INT 24
10306: PUSH
10307: LD_INT 25
10309: PUSH
10310: LD_INT 26
10312: PUSH
10313: LD_INT 27
10315: PUSH
10316: LD_INT 28
10318: PUSH
10319: LD_INT 29
10321: PUSH
10322: LD_INT 30
10324: PUSH
10325: LD_INT 31
10327: PUSH
10328: LD_INT 32
10330: PUSH
10331: LD_INT 33
10333: PUSH
10334: LD_INT 34
10336: PUSH
10337: LD_INT 35
10339: PUSH
10340: LD_INT 36
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: PUSH
10381: LD_INT 101
10383: PUSH
10384: LD_INT 102
10386: PUSH
10387: LD_INT 103
10389: PUSH
10390: LD_INT 104
10392: PUSH
10393: LD_INT 105
10395: PUSH
10396: LD_INT 106
10398: PUSH
10399: LD_INT 107
10401: PUSH
10402: LD_INT 108
10404: PUSH
10405: LD_INT 109
10407: PUSH
10408: LD_INT 110
10410: PUSH
10411: LD_INT 111
10413: PUSH
10414: LD_INT 112
10416: PUSH
10417: LD_INT 113
10419: PUSH
10420: LD_INT 114
10422: PUSH
10423: LD_INT 115
10425: PUSH
10426: LD_INT 116
10428: PUSH
10429: LD_INT 117
10431: PUSH
10432: LD_INT 118
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: ST_TO_ADDR
10459: GO 10462
10461: POP
// end else
10462: GO 10693
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10464: LD_ADDR_VAR 0 2
10468: PUSH
10469: LD_INT 1
10471: PUSH
10472: LD_INT 2
10474: PUSH
10475: LD_INT 3
10477: PUSH
10478: LD_INT 4
10480: PUSH
10481: LD_INT 5
10483: PUSH
10484: LD_INT 6
10486: PUSH
10487: LD_INT 7
10489: PUSH
10490: LD_INT 8
10492: PUSH
10493: LD_INT 9
10495: PUSH
10496: LD_INT 10
10498: PUSH
10499: LD_INT 11
10501: PUSH
10502: LD_INT 12
10504: PUSH
10505: LD_INT 13
10507: PUSH
10508: LD_INT 14
10510: PUSH
10511: LD_INT 15
10513: PUSH
10514: LD_INT 16
10516: PUSH
10517: LD_INT 17
10519: PUSH
10520: LD_INT 18
10522: PUSH
10523: LD_INT 19
10525: PUSH
10526: LD_INT 20
10528: PUSH
10529: LD_INT 21
10531: PUSH
10532: LD_INT 22
10534: PUSH
10535: LD_INT 23
10537: PUSH
10538: LD_INT 24
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 26
10546: PUSH
10547: LD_INT 27
10549: PUSH
10550: LD_INT 28
10552: PUSH
10553: LD_INT 29
10555: PUSH
10556: LD_INT 30
10558: PUSH
10559: LD_INT 31
10561: PUSH
10562: LD_INT 32
10564: PUSH
10565: LD_INT 33
10567: PUSH
10568: LD_INT 34
10570: PUSH
10571: LD_INT 35
10573: PUSH
10574: LD_INT 36
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 101
10617: PUSH
10618: LD_INT 102
10620: PUSH
10621: LD_INT 103
10623: PUSH
10624: LD_INT 104
10626: PUSH
10627: LD_INT 105
10629: PUSH
10630: LD_INT 106
10632: PUSH
10633: LD_INT 107
10635: PUSH
10636: LD_INT 108
10638: PUSH
10639: LD_INT 109
10641: PUSH
10642: LD_INT 110
10644: PUSH
10645: LD_INT 111
10647: PUSH
10648: LD_INT 112
10650: PUSH
10651: LD_INT 113
10653: PUSH
10654: LD_INT 114
10656: PUSH
10657: LD_INT 115
10659: PUSH
10660: LD_INT 116
10662: PUSH
10663: LD_INT 117
10665: PUSH
10666: LD_INT 118
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: ST_TO_ADDR
// if result then
10693: LD_VAR 0 2
10697: IFFALSE 11483
// begin normal :=  ;
10699: LD_ADDR_VAR 0 5
10703: PUSH
10704: LD_STRING 
10706: ST_TO_ADDR
// hardcore :=  ;
10707: LD_ADDR_VAR 0 6
10711: PUSH
10712: LD_STRING 
10714: ST_TO_ADDR
// active :=  ;
10715: LD_ADDR_VAR 0 7
10719: PUSH
10720: LD_STRING 
10722: ST_TO_ADDR
// for i = 1 to normalCounter do
10723: LD_ADDR_VAR 0 8
10727: PUSH
10728: DOUBLE
10729: LD_INT 1
10731: DEC
10732: ST_TO_ADDR
10733: LD_EXP 26
10737: PUSH
10738: FOR_TO
10739: IFFALSE 10840
// begin tmp := 0 ;
10741: LD_ADDR_VAR 0 3
10745: PUSH
10746: LD_STRING 0
10748: ST_TO_ADDR
// if result [ 1 ] then
10749: LD_VAR 0 2
10753: PUSH
10754: LD_INT 1
10756: ARRAY
10757: IFFALSE 10822
// if result [ 1 ] [ 1 ] = i then
10759: LD_VAR 0 2
10763: PUSH
10764: LD_INT 1
10766: ARRAY
10767: PUSH
10768: LD_INT 1
10770: ARRAY
10771: PUSH
10772: LD_VAR 0 8
10776: EQUAL
10777: IFFALSE 10822
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10779: LD_ADDR_VAR 0 2
10783: PUSH
10784: LD_VAR 0 2
10788: PPUSH
10789: LD_INT 1
10791: PPUSH
10792: LD_VAR 0 2
10796: PUSH
10797: LD_INT 1
10799: ARRAY
10800: PPUSH
10801: LD_INT 1
10803: PPUSH
10804: CALL_OW 3
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
// tmp := 1 ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_STRING 1
10821: ST_TO_ADDR
// end ; normal := normal & tmp ;
10822: LD_ADDR_VAR 0 5
10826: PUSH
10827: LD_VAR 0 5
10831: PUSH
10832: LD_VAR 0 3
10836: STR
10837: ST_TO_ADDR
// end ;
10838: GO 10738
10840: POP
10841: POP
// for i = 1 to hardcoreCounter do
10842: LD_ADDR_VAR 0 8
10846: PUSH
10847: DOUBLE
10848: LD_INT 1
10850: DEC
10851: ST_TO_ADDR
10852: LD_EXP 27
10856: PUSH
10857: FOR_TO
10858: IFFALSE 10963
// begin tmp := 0 ;
10860: LD_ADDR_VAR 0 3
10864: PUSH
10865: LD_STRING 0
10867: ST_TO_ADDR
// if result [ 2 ] then
10868: LD_VAR 0 2
10872: PUSH
10873: LD_INT 2
10875: ARRAY
10876: IFFALSE 10945
// if result [ 2 ] [ 1 ] = 100 + i then
10878: LD_VAR 0 2
10882: PUSH
10883: LD_INT 2
10885: ARRAY
10886: PUSH
10887: LD_INT 1
10889: ARRAY
10890: PUSH
10891: LD_INT 100
10893: PUSH
10894: LD_VAR 0 8
10898: PLUS
10899: EQUAL
10900: IFFALSE 10945
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10902: LD_ADDR_VAR 0 2
10906: PUSH
10907: LD_VAR 0 2
10911: PPUSH
10912: LD_INT 2
10914: PPUSH
10915: LD_VAR 0 2
10919: PUSH
10920: LD_INT 2
10922: ARRAY
10923: PPUSH
10924: LD_INT 1
10926: PPUSH
10927: CALL_OW 3
10931: PPUSH
10932: CALL_OW 1
10936: ST_TO_ADDR
// tmp := 1 ;
10937: LD_ADDR_VAR 0 3
10941: PUSH
10942: LD_STRING 1
10944: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10945: LD_ADDR_VAR 0 6
10949: PUSH
10950: LD_VAR 0 6
10954: PUSH
10955: LD_VAR 0 3
10959: STR
10960: ST_TO_ADDR
// end ;
10961: GO 10857
10963: POP
10964: POP
// if isGameLoad then
10965: LD_VAR 0 1
10969: IFFALSE 11444
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10971: LD_ADDR_VAR 0 4
10975: PUSH
10976: LD_EXP 30
10980: PUSH
10981: LD_EXP 29
10985: PUSH
10986: LD_EXP 31
10990: PUSH
10991: LD_EXP 28
10995: PUSH
10996: LD_EXP 32
11000: PUSH
11001: LD_EXP 33
11005: PUSH
11006: LD_EXP 34
11010: PUSH
11011: LD_EXP 35
11015: PUSH
11016: LD_EXP 36
11020: PUSH
11021: LD_EXP 37
11025: PUSH
11026: LD_EXP 38
11030: PUSH
11031: LD_EXP 39
11035: PUSH
11036: LD_EXP 40
11040: PUSH
11041: LD_EXP 41
11045: PUSH
11046: LD_EXP 49
11050: PUSH
11051: LD_EXP 50
11055: PUSH
11056: LD_EXP 51
11060: PUSH
11061: LD_EXP 52
11065: PUSH
11066: LD_EXP 54
11070: PUSH
11071: LD_EXP 55
11075: PUSH
11076: LD_EXP 56
11080: PUSH
11081: LD_EXP 59
11085: PUSH
11086: LD_EXP 61
11090: PUSH
11091: LD_EXP 62
11095: PUSH
11096: LD_EXP 63
11100: PUSH
11101: LD_EXP 65
11105: PUSH
11106: LD_EXP 66
11110: PUSH
11111: LD_EXP 69
11115: PUSH
11116: LD_EXP 70
11120: PUSH
11121: LD_EXP 71
11125: PUSH
11126: LD_EXP 72
11130: PUSH
11131: LD_EXP 73
11135: PUSH
11136: LD_EXP 74
11140: PUSH
11141: LD_EXP 75
11145: PUSH
11146: LD_EXP 76
11150: PUSH
11151: LD_EXP 77
11155: PUSH
11156: LD_EXP 42
11160: PUSH
11161: LD_EXP 43
11165: PUSH
11166: LD_EXP 46
11170: PUSH
11171: LD_EXP 47
11175: PUSH
11176: LD_EXP 48
11180: PUSH
11181: LD_EXP 44
11185: PUSH
11186: LD_EXP 45
11190: PUSH
11191: LD_EXP 53
11195: PUSH
11196: LD_EXP 57
11200: PUSH
11201: LD_EXP 58
11205: PUSH
11206: LD_EXP 60
11210: PUSH
11211: LD_EXP 64
11215: PUSH
11216: LD_EXP 67
11220: PUSH
11221: LD_EXP 68
11225: PUSH
11226: LD_EXP 78
11230: PUSH
11231: LD_EXP 79
11235: PUSH
11236: LD_EXP 80
11240: PUSH
11241: LD_EXP 81
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: ST_TO_ADDR
// tmp :=  ;
11302: LD_ADDR_VAR 0 3
11306: PUSH
11307: LD_STRING 
11309: ST_TO_ADDR
// for i = 1 to normalCounter do
11310: LD_ADDR_VAR 0 8
11314: PUSH
11315: DOUBLE
11316: LD_INT 1
11318: DEC
11319: ST_TO_ADDR
11320: LD_EXP 26
11324: PUSH
11325: FOR_TO
11326: IFFALSE 11362
// begin if flags [ i ] then
11328: LD_VAR 0 4
11332: PUSH
11333: LD_VAR 0 8
11337: ARRAY
11338: IFFALSE 11360
// tmp := tmp & i & ; ;
11340: LD_ADDR_VAR 0 3
11344: PUSH
11345: LD_VAR 0 3
11349: PUSH
11350: LD_VAR 0 8
11354: STR
11355: PUSH
11356: LD_STRING ;
11358: STR
11359: ST_TO_ADDR
// end ;
11360: GO 11325
11362: POP
11363: POP
// for i = 1 to hardcoreCounter do
11364: LD_ADDR_VAR 0 8
11368: PUSH
11369: DOUBLE
11370: LD_INT 1
11372: DEC
11373: ST_TO_ADDR
11374: LD_EXP 27
11378: PUSH
11379: FOR_TO
11380: IFFALSE 11426
// begin if flags [ normalCounter + i ] then
11382: LD_VAR 0 4
11386: PUSH
11387: LD_EXP 26
11391: PUSH
11392: LD_VAR 0 8
11396: PLUS
11397: ARRAY
11398: IFFALSE 11424
// tmp := tmp & ( 100 + i ) & ; ;
11400: LD_ADDR_VAR 0 3
11404: PUSH
11405: LD_VAR 0 3
11409: PUSH
11410: LD_INT 100
11412: PUSH
11413: LD_VAR 0 8
11417: PLUS
11418: STR
11419: PUSH
11420: LD_STRING ;
11422: STR
11423: ST_TO_ADDR
// end ;
11424: GO 11379
11426: POP
11427: POP
// if tmp then
11428: LD_VAR 0 3
11432: IFFALSE 11444
// active := tmp ;
11434: LD_ADDR_VAR 0 7
11438: PUSH
11439: LD_VAR 0 3
11443: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11444: LD_STRING getStreamItemsFromMission("
11446: PUSH
11447: LD_VAR 0 5
11451: STR
11452: PUSH
11453: LD_STRING ","
11455: STR
11456: PUSH
11457: LD_VAR 0 6
11461: STR
11462: PUSH
11463: LD_STRING ","
11465: STR
11466: PUSH
11467: LD_VAR 0 7
11471: STR
11472: PUSH
11473: LD_STRING ")
11475: STR
11476: PPUSH
11477: CALL_OW 559
// end else
11481: GO 11490
// ToLua ( getStreamItemsFromMission("","","") ) ;
11483: LD_STRING getStreamItemsFromMission("","","")
11485: PPUSH
11486: CALL_OW 559
// end ;
11490: LD_VAR 0 2
11494: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11495: LD_EXP 25
11499: PUSH
11500: LD_EXP 30
11504: AND
11505: IFFALSE 11629
11507: GO 11509
11509: DISABLE
11510: LD_INT 0
11512: PPUSH
11513: PPUSH
// begin enable ;
11514: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11515: LD_ADDR_VAR 0 2
11519: PUSH
11520: LD_INT 22
11522: PUSH
11523: LD_OWVAR 2
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 2
11534: PUSH
11535: LD_INT 34
11537: PUSH
11538: LD_INT 7
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 34
11547: PUSH
11548: LD_INT 45
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 34
11557: PUSH
11558: LD_INT 28
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 34
11567: PUSH
11568: LD_INT 47
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PPUSH
11586: CALL_OW 69
11590: ST_TO_ADDR
// if not tmp then
11591: LD_VAR 0 2
11595: NOT
11596: IFFALSE 11600
// exit ;
11598: GO 11629
// for i in tmp do
11600: LD_ADDR_VAR 0 1
11604: PUSH
11605: LD_VAR 0 2
11609: PUSH
11610: FOR_IN
11611: IFFALSE 11627
// begin SetLives ( i , 0 ) ;
11613: LD_VAR 0 1
11617: PPUSH
11618: LD_INT 0
11620: PPUSH
11621: CALL_OW 234
// end ;
11625: GO 11610
11627: POP
11628: POP
// end ;
11629: PPOPN 2
11631: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11632: LD_EXP 25
11636: PUSH
11637: LD_EXP 31
11641: AND
11642: IFFALSE 11726
11644: GO 11646
11646: DISABLE
11647: LD_INT 0
11649: PPUSH
11650: PPUSH
// begin enable ;
11651: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11652: LD_ADDR_VAR 0 2
11656: PUSH
11657: LD_INT 22
11659: PUSH
11660: LD_OWVAR 2
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 32
11671: PUSH
11672: LD_INT 3
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PPUSH
11683: CALL_OW 69
11687: ST_TO_ADDR
// if not tmp then
11688: LD_VAR 0 2
11692: NOT
11693: IFFALSE 11697
// exit ;
11695: GO 11726
// for i in tmp do
11697: LD_ADDR_VAR 0 1
11701: PUSH
11702: LD_VAR 0 2
11706: PUSH
11707: FOR_IN
11708: IFFALSE 11724
// begin SetLives ( i , 0 ) ;
11710: LD_VAR 0 1
11714: PPUSH
11715: LD_INT 0
11717: PPUSH
11718: CALL_OW 234
// end ;
11722: GO 11707
11724: POP
11725: POP
// end ;
11726: PPOPN 2
11728: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11729: LD_EXP 25
11733: PUSH
11734: LD_EXP 28
11738: AND
11739: IFFALSE 11832
11741: GO 11743
11743: DISABLE
11744: LD_INT 0
11746: PPUSH
// begin enable ;
11747: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11748: LD_ADDR_VAR 0 1
11752: PUSH
11753: LD_INT 22
11755: PUSH
11756: LD_OWVAR 2
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 2
11767: PUSH
11768: LD_INT 25
11770: PUSH
11771: LD_INT 5
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 25
11780: PUSH
11781: LD_INT 9
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 25
11790: PUSH
11791: LD_INT 8
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PPUSH
11808: CALL_OW 69
11812: PUSH
11813: FOR_IN
11814: IFFALSE 11830
// begin SetClass ( i , 1 ) ;
11816: LD_VAR 0 1
11820: PPUSH
11821: LD_INT 1
11823: PPUSH
11824: CALL_OW 336
// end ;
11828: GO 11813
11830: POP
11831: POP
// end ;
11832: PPOPN 1
11834: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11835: LD_EXP 25
11839: PUSH
11840: LD_EXP 29
11844: AND
11845: PUSH
11846: LD_OWVAR 65
11850: PUSH
11851: LD_INT 7
11853: LESS
11854: AND
11855: IFFALSE 11869
11857: GO 11859
11859: DISABLE
// begin enable ;
11860: ENABLE
// game_speed := 7 ;
11861: LD_ADDR_OWVAR 65
11865: PUSH
11866: LD_INT 7
11868: ST_TO_ADDR
// end ;
11869: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11870: LD_EXP 25
11874: PUSH
11875: LD_EXP 32
11879: AND
11880: IFFALSE 12082
11882: GO 11884
11884: DISABLE
11885: LD_INT 0
11887: PPUSH
11888: PPUSH
11889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: LD_INT 81
11897: PUSH
11898: LD_OWVAR 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 21
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PPUSH
11921: CALL_OW 69
11925: ST_TO_ADDR
// if not tmp then
11926: LD_VAR 0 3
11930: NOT
11931: IFFALSE 11935
// exit ;
11933: GO 12082
// if tmp > 5 then
11935: LD_VAR 0 3
11939: PUSH
11940: LD_INT 5
11942: GREATER
11943: IFFALSE 11955
// k := 5 else
11945: LD_ADDR_VAR 0 2
11949: PUSH
11950: LD_INT 5
11952: ST_TO_ADDR
11953: GO 11965
// k := tmp ;
11955: LD_ADDR_VAR 0 2
11959: PUSH
11960: LD_VAR 0 3
11964: ST_TO_ADDR
// for i := 1 to k do
11965: LD_ADDR_VAR 0 1
11969: PUSH
11970: DOUBLE
11971: LD_INT 1
11973: DEC
11974: ST_TO_ADDR
11975: LD_VAR 0 2
11979: PUSH
11980: FOR_TO
11981: IFFALSE 12080
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11983: LD_VAR 0 3
11987: PUSH
11988: LD_VAR 0 1
11992: ARRAY
11993: PPUSH
11994: LD_VAR 0 1
11998: PUSH
11999: LD_INT 4
12001: MOD
12002: PUSH
12003: LD_INT 1
12005: PLUS
12006: PPUSH
12007: CALL_OW 259
12011: PUSH
12012: LD_INT 10
12014: LESS
12015: IFFALSE 12078
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12017: LD_VAR 0 3
12021: PUSH
12022: LD_VAR 0 1
12026: ARRAY
12027: PPUSH
12028: LD_VAR 0 1
12032: PUSH
12033: LD_INT 4
12035: MOD
12036: PUSH
12037: LD_INT 1
12039: PLUS
12040: PPUSH
12041: LD_VAR 0 3
12045: PUSH
12046: LD_VAR 0 1
12050: ARRAY
12051: PPUSH
12052: LD_VAR 0 1
12056: PUSH
12057: LD_INT 4
12059: MOD
12060: PUSH
12061: LD_INT 1
12063: PLUS
12064: PPUSH
12065: CALL_OW 259
12069: PUSH
12070: LD_INT 1
12072: PLUS
12073: PPUSH
12074: CALL_OW 237
12078: GO 11980
12080: POP
12081: POP
// end ;
12082: PPOPN 3
12084: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12085: LD_EXP 25
12089: PUSH
12090: LD_EXP 33
12094: AND
12095: IFFALSE 12115
12097: GO 12099
12099: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12100: LD_INT 4
12102: PPUSH
12103: LD_OWVAR 2
12107: PPUSH
12108: LD_INT 0
12110: PPUSH
12111: CALL_OW 324
12115: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12116: LD_EXP 25
12120: PUSH
12121: LD_EXP 62
12125: AND
12126: IFFALSE 12146
12128: GO 12130
12130: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12131: LD_INT 19
12133: PPUSH
12134: LD_OWVAR 2
12138: PPUSH
12139: LD_INT 0
12141: PPUSH
12142: CALL_OW 324
12146: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12147: LD_EXP 25
12151: PUSH
12152: LD_EXP 34
12156: AND
12157: IFFALSE 12259
12159: GO 12161
12161: DISABLE
12162: LD_INT 0
12164: PPUSH
12165: PPUSH
// begin enable ;
12166: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12167: LD_ADDR_VAR 0 2
12171: PUSH
12172: LD_INT 22
12174: PUSH
12175: LD_OWVAR 2
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 2
12186: PUSH
12187: LD_INT 34
12189: PUSH
12190: LD_INT 11
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 34
12199: PUSH
12200: LD_INT 30
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: LIST
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PPUSH
12216: CALL_OW 69
12220: ST_TO_ADDR
// if not tmp then
12221: LD_VAR 0 2
12225: NOT
12226: IFFALSE 12230
// exit ;
12228: GO 12259
// for i in tmp do
12230: LD_ADDR_VAR 0 1
12234: PUSH
12235: LD_VAR 0 2
12239: PUSH
12240: FOR_IN
12241: IFFALSE 12257
// begin SetLives ( i , 0 ) ;
12243: LD_VAR 0 1
12247: PPUSH
12248: LD_INT 0
12250: PPUSH
12251: CALL_OW 234
// end ;
12255: GO 12240
12257: POP
12258: POP
// end ;
12259: PPOPN 2
12261: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12262: LD_EXP 25
12266: PUSH
12267: LD_EXP 35
12271: AND
12272: IFFALSE 12292
12274: GO 12276
12276: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12277: LD_INT 32
12279: PPUSH
12280: LD_OWVAR 2
12284: PPUSH
12285: LD_INT 0
12287: PPUSH
12288: CALL_OW 324
12292: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12293: LD_EXP 25
12297: PUSH
12298: LD_EXP 36
12302: AND
12303: IFFALSE 12484
12305: GO 12307
12307: DISABLE
12308: LD_INT 0
12310: PPUSH
12311: PPUSH
12312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12313: LD_ADDR_VAR 0 2
12317: PUSH
12318: LD_INT 22
12320: PUSH
12321: LD_OWVAR 2
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 33
12332: PUSH
12333: LD_INT 3
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PPUSH
12344: CALL_OW 69
12348: ST_TO_ADDR
// if not tmp then
12349: LD_VAR 0 2
12353: NOT
12354: IFFALSE 12358
// exit ;
12356: GO 12484
// side := 0 ;
12358: LD_ADDR_VAR 0 3
12362: PUSH
12363: LD_INT 0
12365: ST_TO_ADDR
// for i := 1 to 8 do
12366: LD_ADDR_VAR 0 1
12370: PUSH
12371: DOUBLE
12372: LD_INT 1
12374: DEC
12375: ST_TO_ADDR
12376: LD_INT 8
12378: PUSH
12379: FOR_TO
12380: IFFALSE 12428
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12382: LD_OWVAR 2
12386: PUSH
12387: LD_VAR 0 1
12391: NONEQUAL
12392: PUSH
12393: LD_OWVAR 2
12397: PPUSH
12398: LD_VAR 0 1
12402: PPUSH
12403: CALL_OW 81
12407: PUSH
12408: LD_INT 2
12410: EQUAL
12411: AND
12412: IFFALSE 12426
// begin side := i ;
12414: LD_ADDR_VAR 0 3
12418: PUSH
12419: LD_VAR 0 1
12423: ST_TO_ADDR
// break ;
12424: GO 12428
// end ;
12426: GO 12379
12428: POP
12429: POP
// if not side then
12430: LD_VAR 0 3
12434: NOT
12435: IFFALSE 12439
// exit ;
12437: GO 12484
// for i := 1 to tmp do
12439: LD_ADDR_VAR 0 1
12443: PUSH
12444: DOUBLE
12445: LD_INT 1
12447: DEC
12448: ST_TO_ADDR
12449: LD_VAR 0 2
12453: PUSH
12454: FOR_TO
12455: IFFALSE 12482
// if Prob ( 60 ) then
12457: LD_INT 60
12459: PPUSH
12460: CALL_OW 13
12464: IFFALSE 12480
// SetSide ( i , side ) ;
12466: LD_VAR 0 1
12470: PPUSH
12471: LD_VAR 0 3
12475: PPUSH
12476: CALL_OW 235
12480: GO 12454
12482: POP
12483: POP
// end ;
12484: PPOPN 3
12486: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12487: LD_EXP 25
12491: PUSH
12492: LD_EXP 38
12496: AND
12497: IFFALSE 12616
12499: GO 12501
12501: DISABLE
12502: LD_INT 0
12504: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12505: LD_ADDR_VAR 0 1
12509: PUSH
12510: LD_INT 22
12512: PUSH
12513: LD_OWVAR 2
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 21
12524: PUSH
12525: LD_INT 1
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 3
12534: PUSH
12535: LD_INT 23
12537: PUSH
12538: LD_INT 0
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: LIST
12553: PPUSH
12554: CALL_OW 69
12558: PUSH
12559: FOR_IN
12560: IFFALSE 12614
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12562: LD_VAR 0 1
12566: PPUSH
12567: CALL_OW 257
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: LD_INT 2
12577: PUSH
12578: LD_INT 3
12580: PUSH
12581: LD_INT 4
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: IN
12590: IFFALSE 12612
// SetClass ( un , rand ( 1 , 4 ) ) ;
12592: LD_VAR 0 1
12596: PPUSH
12597: LD_INT 1
12599: PPUSH
12600: LD_INT 4
12602: PPUSH
12603: CALL_OW 12
12607: PPUSH
12608: CALL_OW 336
12612: GO 12559
12614: POP
12615: POP
// end ;
12616: PPOPN 1
12618: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12619: LD_EXP 25
12623: PUSH
12624: LD_EXP 37
12628: AND
12629: IFFALSE 12708
12631: GO 12633
12633: DISABLE
12634: LD_INT 0
12636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12637: LD_ADDR_VAR 0 1
12641: PUSH
12642: LD_INT 22
12644: PUSH
12645: LD_OWVAR 2
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PUSH
12654: LD_INT 21
12656: PUSH
12657: LD_INT 3
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PPUSH
12668: CALL_OW 69
12672: ST_TO_ADDR
// if not tmp then
12673: LD_VAR 0 1
12677: NOT
12678: IFFALSE 12682
// exit ;
12680: GO 12708
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12682: LD_VAR 0 1
12686: PUSH
12687: LD_INT 1
12689: PPUSH
12690: LD_VAR 0 1
12694: PPUSH
12695: CALL_OW 12
12699: ARRAY
12700: PPUSH
12701: LD_INT 100
12703: PPUSH
12704: CALL_OW 234
// end ;
12708: PPOPN 1
12710: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12711: LD_EXP 25
12715: PUSH
12716: LD_EXP 39
12720: AND
12721: IFFALSE 12819
12723: GO 12725
12725: DISABLE
12726: LD_INT 0
12728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12729: LD_ADDR_VAR 0 1
12733: PUSH
12734: LD_INT 22
12736: PUSH
12737: LD_OWVAR 2
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 21
12748: PUSH
12749: LD_INT 1
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PPUSH
12760: CALL_OW 69
12764: ST_TO_ADDR
// if not tmp then
12765: LD_VAR 0 1
12769: NOT
12770: IFFALSE 12774
// exit ;
12772: GO 12819
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12774: LD_VAR 0 1
12778: PUSH
12779: LD_INT 1
12781: PPUSH
12782: LD_VAR 0 1
12786: PPUSH
12787: CALL_OW 12
12791: ARRAY
12792: PPUSH
12793: LD_INT 1
12795: PPUSH
12796: LD_INT 4
12798: PPUSH
12799: CALL_OW 12
12803: PPUSH
12804: LD_INT 3000
12806: PPUSH
12807: LD_INT 9000
12809: PPUSH
12810: CALL_OW 12
12814: PPUSH
12815: CALL_OW 492
// end ;
12819: PPOPN 1
12821: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12822: LD_EXP 25
12826: PUSH
12827: LD_EXP 40
12831: AND
12832: IFFALSE 12852
12834: GO 12836
12836: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12837: LD_INT 1
12839: PPUSH
12840: LD_OWVAR 2
12844: PPUSH
12845: LD_INT 0
12847: PPUSH
12848: CALL_OW 324
12852: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12853: LD_EXP 25
12857: PUSH
12858: LD_EXP 41
12862: AND
12863: IFFALSE 12946
12865: GO 12867
12867: DISABLE
12868: LD_INT 0
12870: PPUSH
12871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12872: LD_ADDR_VAR 0 2
12876: PUSH
12877: LD_INT 22
12879: PUSH
12880: LD_OWVAR 2
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: LD_INT 21
12891: PUSH
12892: LD_INT 3
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PPUSH
12903: CALL_OW 69
12907: ST_TO_ADDR
// if not tmp then
12908: LD_VAR 0 2
12912: NOT
12913: IFFALSE 12917
// exit ;
12915: GO 12946
// for i in tmp do
12917: LD_ADDR_VAR 0 1
12921: PUSH
12922: LD_VAR 0 2
12926: PUSH
12927: FOR_IN
12928: IFFALSE 12944
// SetBLevel ( i , 10 ) ;
12930: LD_VAR 0 1
12934: PPUSH
12935: LD_INT 10
12937: PPUSH
12938: CALL_OW 241
12942: GO 12927
12944: POP
12945: POP
// end ;
12946: PPOPN 2
12948: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12949: LD_EXP 25
12953: PUSH
12954: LD_EXP 42
12958: AND
12959: IFFALSE 13070
12961: GO 12963
12963: DISABLE
12964: LD_INT 0
12966: PPUSH
12967: PPUSH
12968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12969: LD_ADDR_VAR 0 3
12973: PUSH
12974: LD_INT 22
12976: PUSH
12977: LD_OWVAR 2
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: LD_INT 25
12988: PUSH
12989: LD_INT 1
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PPUSH
13000: CALL_OW 69
13004: ST_TO_ADDR
// if not tmp then
13005: LD_VAR 0 3
13009: NOT
13010: IFFALSE 13014
// exit ;
13012: GO 13070
// un := tmp [ rand ( 1 , tmp ) ] ;
13014: LD_ADDR_VAR 0 2
13018: PUSH
13019: LD_VAR 0 3
13023: PUSH
13024: LD_INT 1
13026: PPUSH
13027: LD_VAR 0 3
13031: PPUSH
13032: CALL_OW 12
13036: ARRAY
13037: ST_TO_ADDR
// if Crawls ( un ) then
13038: LD_VAR 0 2
13042: PPUSH
13043: CALL_OW 318
13047: IFFALSE 13058
// ComWalk ( un ) ;
13049: LD_VAR 0 2
13053: PPUSH
13054: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13058: LD_VAR 0 2
13062: PPUSH
13063: LD_INT 5
13065: PPUSH
13066: CALL_OW 336
// end ;
13070: PPOPN 3
13072: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13073: LD_EXP 25
13077: PUSH
13078: LD_EXP 43
13082: AND
13083: PUSH
13084: LD_OWVAR 67
13088: PUSH
13089: LD_INT 4
13091: LESS
13092: AND
13093: IFFALSE 13112
13095: GO 13097
13097: DISABLE
// begin Difficulty := Difficulty + 1 ;
13098: LD_ADDR_OWVAR 67
13102: PUSH
13103: LD_OWVAR 67
13107: PUSH
13108: LD_INT 1
13110: PLUS
13111: ST_TO_ADDR
// end ;
13112: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13113: LD_EXP 25
13117: PUSH
13118: LD_EXP 44
13122: AND
13123: IFFALSE 13226
13125: GO 13127
13127: DISABLE
13128: LD_INT 0
13130: PPUSH
// begin for i := 1 to 5 do
13131: LD_ADDR_VAR 0 1
13135: PUSH
13136: DOUBLE
13137: LD_INT 1
13139: DEC
13140: ST_TO_ADDR
13141: LD_INT 5
13143: PUSH
13144: FOR_TO
13145: IFFALSE 13224
// begin uc_nation := nation_nature ;
13147: LD_ADDR_OWVAR 21
13151: PUSH
13152: LD_INT 0
13154: ST_TO_ADDR
// uc_side := 0 ;
13155: LD_ADDR_OWVAR 20
13159: PUSH
13160: LD_INT 0
13162: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13163: LD_ADDR_OWVAR 29
13167: PUSH
13168: LD_INT 12
13170: PUSH
13171: LD_INT 12
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: ST_TO_ADDR
// hc_agressivity := 20 ;
13178: LD_ADDR_OWVAR 35
13182: PUSH
13183: LD_INT 20
13185: ST_TO_ADDR
// hc_class := class_tiger ;
13186: LD_ADDR_OWVAR 28
13190: PUSH
13191: LD_INT 14
13193: ST_TO_ADDR
// hc_gallery :=  ;
13194: LD_ADDR_OWVAR 33
13198: PUSH
13199: LD_STRING 
13201: ST_TO_ADDR
// hc_name :=  ;
13202: LD_ADDR_OWVAR 26
13206: PUSH
13207: LD_STRING 
13209: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13210: CALL_OW 44
13214: PPUSH
13215: LD_INT 0
13217: PPUSH
13218: CALL_OW 51
// end ;
13222: GO 13144
13224: POP
13225: POP
// end ;
13226: PPOPN 1
13228: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13229: LD_EXP 25
13233: PUSH
13234: LD_EXP 45
13238: AND
13239: IFFALSE 13248
13241: GO 13243
13243: DISABLE
// StreamSibBomb ;
13244: CALL 13249 0 0
13248: END
// export function StreamSibBomb ; var i , x , y ; begin
13249: LD_INT 0
13251: PPUSH
13252: PPUSH
13253: PPUSH
13254: PPUSH
// result := false ;
13255: LD_ADDR_VAR 0 1
13259: PUSH
13260: LD_INT 0
13262: ST_TO_ADDR
// for i := 1 to 16 do
13263: LD_ADDR_VAR 0 2
13267: PUSH
13268: DOUBLE
13269: LD_INT 1
13271: DEC
13272: ST_TO_ADDR
13273: LD_INT 16
13275: PUSH
13276: FOR_TO
13277: IFFALSE 13476
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13279: LD_ADDR_VAR 0 3
13283: PUSH
13284: LD_INT 10
13286: PUSH
13287: LD_INT 20
13289: PUSH
13290: LD_INT 30
13292: PUSH
13293: LD_INT 40
13295: PUSH
13296: LD_INT 50
13298: PUSH
13299: LD_INT 60
13301: PUSH
13302: LD_INT 70
13304: PUSH
13305: LD_INT 80
13307: PUSH
13308: LD_INT 90
13310: PUSH
13311: LD_INT 100
13313: PUSH
13314: LD_INT 110
13316: PUSH
13317: LD_INT 120
13319: PUSH
13320: LD_INT 130
13322: PUSH
13323: LD_INT 140
13325: PUSH
13326: LD_INT 150
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 1
13348: PPUSH
13349: LD_INT 15
13351: PPUSH
13352: CALL_OW 12
13356: ARRAY
13357: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13358: LD_ADDR_VAR 0 4
13362: PUSH
13363: LD_INT 10
13365: PUSH
13366: LD_INT 20
13368: PUSH
13369: LD_INT 30
13371: PUSH
13372: LD_INT 40
13374: PUSH
13375: LD_INT 50
13377: PUSH
13378: LD_INT 60
13380: PUSH
13381: LD_INT 70
13383: PUSH
13384: LD_INT 80
13386: PUSH
13387: LD_INT 90
13389: PUSH
13390: LD_INT 100
13392: PUSH
13393: LD_INT 110
13395: PUSH
13396: LD_INT 120
13398: PUSH
13399: LD_INT 130
13401: PUSH
13402: LD_INT 140
13404: PUSH
13405: LD_INT 150
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 1
13427: PPUSH
13428: LD_INT 15
13430: PPUSH
13431: CALL_OW 12
13435: ARRAY
13436: ST_TO_ADDR
// if ValidHex ( x , y ) then
13437: LD_VAR 0 3
13441: PPUSH
13442: LD_VAR 0 4
13446: PPUSH
13447: CALL_OW 488
13451: IFFALSE 13474
// begin result := [ x , y ] ;
13453: LD_ADDR_VAR 0 1
13457: PUSH
13458: LD_VAR 0 3
13462: PUSH
13463: LD_VAR 0 4
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: ST_TO_ADDR
// break ;
13472: GO 13476
// end ; end ;
13474: GO 13276
13476: POP
13477: POP
// if result then
13478: LD_VAR 0 1
13482: IFFALSE 13542
// begin ToLua ( playSibBomb() ) ;
13484: LD_STRING playSibBomb()
13486: PPUSH
13487: CALL_OW 559
// wait ( 0 0$14 ) ;
13491: LD_INT 490
13493: PPUSH
13494: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13498: LD_VAR 0 1
13502: PUSH
13503: LD_INT 1
13505: ARRAY
13506: PPUSH
13507: LD_VAR 0 1
13511: PUSH
13512: LD_INT 2
13514: ARRAY
13515: PPUSH
13516: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13520: LD_VAR 0 1
13524: PUSH
13525: LD_INT 1
13527: ARRAY
13528: PPUSH
13529: LD_VAR 0 1
13533: PUSH
13534: LD_INT 2
13536: ARRAY
13537: PPUSH
13538: CALL_OW 429
// end ; end ;
13542: LD_VAR 0 1
13546: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13547: LD_EXP 25
13551: PUSH
13552: LD_EXP 47
13556: AND
13557: IFFALSE 13569
13559: GO 13561
13561: DISABLE
// YouLost (  ) ;
13562: LD_STRING 
13564: PPUSH
13565: CALL_OW 104
13569: END
// every 0 0$1 trigger StreamModeActive and sFog do
13570: LD_EXP 25
13574: PUSH
13575: LD_EXP 46
13579: AND
13580: IFFALSE 13594
13582: GO 13584
13584: DISABLE
// FogOff ( your_side ) ;
13585: LD_OWVAR 2
13589: PPUSH
13590: CALL_OW 344
13594: END
// every 0 0$1 trigger StreamModeActive and sSun do
13595: LD_EXP 25
13599: PUSH
13600: LD_EXP 48
13604: AND
13605: IFFALSE 13633
13607: GO 13609
13609: DISABLE
// begin solar_recharge_percent := 0 ;
13610: LD_ADDR_OWVAR 79
13614: PUSH
13615: LD_INT 0
13617: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13618: LD_INT 10500
13620: PPUSH
13621: CALL_OW 67
// solar_recharge_percent := 100 ;
13625: LD_ADDR_OWVAR 79
13629: PUSH
13630: LD_INT 100
13632: ST_TO_ADDR
// end ;
13633: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13634: LD_EXP 25
13638: PUSH
13639: LD_EXP 49
13643: AND
13644: IFFALSE 13883
13646: GO 13648
13648: DISABLE
13649: LD_INT 0
13651: PPUSH
13652: PPUSH
13653: PPUSH
// begin tmp := [ ] ;
13654: LD_ADDR_VAR 0 3
13658: PUSH
13659: EMPTY
13660: ST_TO_ADDR
// for i := 1 to 6 do
13661: LD_ADDR_VAR 0 1
13665: PUSH
13666: DOUBLE
13667: LD_INT 1
13669: DEC
13670: ST_TO_ADDR
13671: LD_INT 6
13673: PUSH
13674: FOR_TO
13675: IFFALSE 13780
// begin uc_nation := nation_nature ;
13677: LD_ADDR_OWVAR 21
13681: PUSH
13682: LD_INT 0
13684: ST_TO_ADDR
// uc_side := 0 ;
13685: LD_ADDR_OWVAR 20
13689: PUSH
13690: LD_INT 0
13692: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13693: LD_ADDR_OWVAR 29
13697: PUSH
13698: LD_INT 12
13700: PUSH
13701: LD_INT 12
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: ST_TO_ADDR
// hc_agressivity := 20 ;
13708: LD_ADDR_OWVAR 35
13712: PUSH
13713: LD_INT 20
13715: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13716: LD_ADDR_OWVAR 28
13720: PUSH
13721: LD_INT 17
13723: ST_TO_ADDR
// hc_gallery :=  ;
13724: LD_ADDR_OWVAR 33
13728: PUSH
13729: LD_STRING 
13731: ST_TO_ADDR
// hc_name :=  ;
13732: LD_ADDR_OWVAR 26
13736: PUSH
13737: LD_STRING 
13739: ST_TO_ADDR
// un := CreateHuman ;
13740: LD_ADDR_VAR 0 2
13744: PUSH
13745: CALL_OW 44
13749: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13750: LD_VAR 0 2
13754: PPUSH
13755: LD_INT 1
13757: PPUSH
13758: CALL_OW 51
// tmp := tmp ^ un ;
13762: LD_ADDR_VAR 0 3
13766: PUSH
13767: LD_VAR 0 3
13771: PUSH
13772: LD_VAR 0 2
13776: ADD
13777: ST_TO_ADDR
// end ;
13778: GO 13674
13780: POP
13781: POP
// repeat wait ( 0 0$1 ) ;
13782: LD_INT 35
13784: PPUSH
13785: CALL_OW 67
// for un in tmp do
13789: LD_ADDR_VAR 0 2
13793: PUSH
13794: LD_VAR 0 3
13798: PUSH
13799: FOR_IN
13800: IFFALSE 13874
// begin if IsDead ( un ) then
13802: LD_VAR 0 2
13806: PPUSH
13807: CALL_OW 301
13811: IFFALSE 13831
// begin tmp := tmp diff un ;
13813: LD_ADDR_VAR 0 3
13817: PUSH
13818: LD_VAR 0 3
13822: PUSH
13823: LD_VAR 0 2
13827: DIFF
13828: ST_TO_ADDR
// continue ;
13829: GO 13799
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13831: LD_VAR 0 2
13835: PPUSH
13836: LD_INT 3
13838: PUSH
13839: LD_INT 22
13841: PUSH
13842: LD_INT 0
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PPUSH
13853: CALL_OW 69
13857: PPUSH
13858: LD_VAR 0 2
13862: PPUSH
13863: CALL_OW 74
13867: PPUSH
13868: CALL_OW 115
// end ;
13872: GO 13799
13874: POP
13875: POP
// until not tmp ;
13876: LD_VAR 0 3
13880: NOT
13881: IFFALSE 13782
// end ;
13883: PPOPN 3
13885: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13886: LD_EXP 25
13890: PUSH
13891: LD_EXP 50
13895: AND
13896: IFFALSE 13950
13898: GO 13900
13900: DISABLE
// begin ToLua ( displayTroll(); ) ;
13901: LD_STRING displayTroll();
13903: PPUSH
13904: CALL_OW 559
// wait ( 3 3$00 ) ;
13908: LD_INT 6300
13910: PPUSH
13911: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13915: LD_STRING hideTroll();
13917: PPUSH
13918: CALL_OW 559
// wait ( 1 1$00 ) ;
13922: LD_INT 2100
13924: PPUSH
13925: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13929: LD_STRING displayTroll();
13931: PPUSH
13932: CALL_OW 559
// wait ( 1 1$00 ) ;
13936: LD_INT 2100
13938: PPUSH
13939: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13943: LD_STRING hideTroll();
13945: PPUSH
13946: CALL_OW 559
// end ;
13950: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13951: LD_EXP 25
13955: PUSH
13956: LD_EXP 51
13960: AND
13961: IFFALSE 14024
13963: GO 13965
13965: DISABLE
13966: LD_INT 0
13968: PPUSH
// begin p := 0 ;
13969: LD_ADDR_VAR 0 1
13973: PUSH
13974: LD_INT 0
13976: ST_TO_ADDR
// repeat game_speed := 1 ;
13977: LD_ADDR_OWVAR 65
13981: PUSH
13982: LD_INT 1
13984: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13985: LD_INT 35
13987: PPUSH
13988: CALL_OW 67
// p := p + 1 ;
13992: LD_ADDR_VAR 0 1
13996: PUSH
13997: LD_VAR 0 1
14001: PUSH
14002: LD_INT 1
14004: PLUS
14005: ST_TO_ADDR
// until p >= 60 ;
14006: LD_VAR 0 1
14010: PUSH
14011: LD_INT 60
14013: GREATEREQUAL
14014: IFFALSE 13977
// game_speed := 4 ;
14016: LD_ADDR_OWVAR 65
14020: PUSH
14021: LD_INT 4
14023: ST_TO_ADDR
// end ;
14024: PPOPN 1
14026: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14027: LD_EXP 25
14031: PUSH
14032: LD_EXP 52
14036: AND
14037: IFFALSE 14183
14039: GO 14041
14041: DISABLE
14042: LD_INT 0
14044: PPUSH
14045: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14046: LD_ADDR_VAR 0 1
14050: PUSH
14051: LD_INT 22
14053: PUSH
14054: LD_OWVAR 2
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: LD_INT 2
14065: PUSH
14066: LD_INT 30
14068: PUSH
14069: LD_INT 0
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 30
14078: PUSH
14079: LD_INT 1
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: ST_TO_ADDR
// if not depot then
14100: LD_VAR 0 1
14104: NOT
14105: IFFALSE 14109
// exit ;
14107: GO 14183
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14109: LD_ADDR_VAR 0 2
14113: PUSH
14114: LD_VAR 0 1
14118: PUSH
14119: LD_INT 1
14121: PPUSH
14122: LD_VAR 0 1
14126: PPUSH
14127: CALL_OW 12
14131: ARRAY
14132: PPUSH
14133: CALL_OW 274
14137: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14138: LD_VAR 0 2
14142: PPUSH
14143: LD_INT 1
14145: PPUSH
14146: LD_INT 0
14148: PPUSH
14149: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14153: LD_VAR 0 2
14157: PPUSH
14158: LD_INT 2
14160: PPUSH
14161: LD_INT 0
14163: PPUSH
14164: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14168: LD_VAR 0 2
14172: PPUSH
14173: LD_INT 3
14175: PPUSH
14176: LD_INT 0
14178: PPUSH
14179: CALL_OW 277
// end ;
14183: PPOPN 2
14185: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14186: LD_EXP 25
14190: PUSH
14191: LD_EXP 53
14195: AND
14196: IFFALSE 14293
14198: GO 14200
14200: DISABLE
14201: LD_INT 0
14203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14204: LD_ADDR_VAR 0 1
14208: PUSH
14209: LD_INT 22
14211: PUSH
14212: LD_OWVAR 2
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 21
14223: PUSH
14224: LD_INT 1
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 3
14233: PUSH
14234: LD_INT 23
14236: PUSH
14237: LD_INT 0
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: LIST
14252: PPUSH
14253: CALL_OW 69
14257: ST_TO_ADDR
// if not tmp then
14258: LD_VAR 0 1
14262: NOT
14263: IFFALSE 14267
// exit ;
14265: GO 14293
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14267: LD_VAR 0 1
14271: PUSH
14272: LD_INT 1
14274: PPUSH
14275: LD_VAR 0 1
14279: PPUSH
14280: CALL_OW 12
14284: ARRAY
14285: PPUSH
14286: LD_INT 200
14288: PPUSH
14289: CALL_OW 234
// end ;
14293: PPOPN 1
14295: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14296: LD_EXP 25
14300: PUSH
14301: LD_EXP 54
14305: AND
14306: IFFALSE 14385
14308: GO 14310
14310: DISABLE
14311: LD_INT 0
14313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14314: LD_ADDR_VAR 0 1
14318: PUSH
14319: LD_INT 22
14321: PUSH
14322: LD_OWVAR 2
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 21
14333: PUSH
14334: LD_INT 2
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PPUSH
14345: CALL_OW 69
14349: ST_TO_ADDR
// if not tmp then
14350: LD_VAR 0 1
14354: NOT
14355: IFFALSE 14359
// exit ;
14357: GO 14385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14359: LD_VAR 0 1
14363: PUSH
14364: LD_INT 1
14366: PPUSH
14367: LD_VAR 0 1
14371: PPUSH
14372: CALL_OW 12
14376: ARRAY
14377: PPUSH
14378: LD_INT 60
14380: PPUSH
14381: CALL_OW 234
// end ;
14385: PPOPN 1
14387: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14388: LD_EXP 25
14392: PUSH
14393: LD_EXP 55
14397: AND
14398: IFFALSE 14497
14400: GO 14402
14402: DISABLE
14403: LD_INT 0
14405: PPUSH
14406: PPUSH
// begin enable ;
14407: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14408: LD_ADDR_VAR 0 1
14412: PUSH
14413: LD_INT 22
14415: PUSH
14416: LD_OWVAR 2
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 61
14427: PUSH
14428: EMPTY
14429: LIST
14430: PUSH
14431: LD_INT 33
14433: PUSH
14434: LD_INT 2
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: LIST
14445: PPUSH
14446: CALL_OW 69
14450: ST_TO_ADDR
// if not tmp then
14451: LD_VAR 0 1
14455: NOT
14456: IFFALSE 14460
// exit ;
14458: GO 14497
// for i in tmp do
14460: LD_ADDR_VAR 0 2
14464: PUSH
14465: LD_VAR 0 1
14469: PUSH
14470: FOR_IN
14471: IFFALSE 14495
// if IsControledBy ( i ) then
14473: LD_VAR 0 2
14477: PPUSH
14478: CALL_OW 312
14482: IFFALSE 14493
// ComUnlink ( i ) ;
14484: LD_VAR 0 2
14488: PPUSH
14489: CALL_OW 136
14493: GO 14470
14495: POP
14496: POP
// end ;
14497: PPOPN 2
14499: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14500: LD_EXP 25
14504: PUSH
14505: LD_EXP 56
14509: AND
14510: IFFALSE 14650
14512: GO 14514
14514: DISABLE
14515: LD_INT 0
14517: PPUSH
14518: PPUSH
// begin ToLua ( displayPowell(); ) ;
14519: LD_STRING displayPowell();
14521: PPUSH
14522: CALL_OW 559
// uc_side := 0 ;
14526: LD_ADDR_OWVAR 20
14530: PUSH
14531: LD_INT 0
14533: ST_TO_ADDR
// uc_nation := 2 ;
14534: LD_ADDR_OWVAR 21
14538: PUSH
14539: LD_INT 2
14541: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14542: LD_ADDR_OWVAR 37
14546: PUSH
14547: LD_INT 14
14549: ST_TO_ADDR
// vc_engine := engine_siberite ;
14550: LD_ADDR_OWVAR 39
14554: PUSH
14555: LD_INT 3
14557: ST_TO_ADDR
// vc_control := control_apeman ;
14558: LD_ADDR_OWVAR 38
14562: PUSH
14563: LD_INT 5
14565: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14566: LD_ADDR_OWVAR 40
14570: PUSH
14571: LD_INT 29
14573: ST_TO_ADDR
// un := CreateVehicle ;
14574: LD_ADDR_VAR 0 2
14578: PUSH
14579: CALL_OW 45
14583: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14584: LD_VAR 0 2
14588: PPUSH
14589: LD_INT 1
14591: PPUSH
14592: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14596: LD_INT 35
14598: PPUSH
14599: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14603: LD_VAR 0 2
14607: PPUSH
14608: LD_INT 22
14610: PUSH
14611: LD_OWVAR 2
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PPUSH
14620: CALL_OW 69
14624: PPUSH
14625: LD_VAR 0 2
14629: PPUSH
14630: CALL_OW 74
14634: PPUSH
14635: CALL_OW 115
// until IsDead ( un ) ;
14639: LD_VAR 0 2
14643: PPUSH
14644: CALL_OW 301
14648: IFFALSE 14596
// end ;
14650: PPOPN 2
14652: END
// every 0 0$1 trigger StreamModeActive and sStu do
14653: LD_EXP 25
14657: PUSH
14658: LD_EXP 64
14662: AND
14663: IFFALSE 14679
14665: GO 14667
14667: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14668: LD_STRING displayStucuk();
14670: PPUSH
14671: CALL_OW 559
// ResetFog ;
14675: CALL_OW 335
// end ;
14679: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14680: LD_EXP 25
14684: PUSH
14685: LD_EXP 57
14689: AND
14690: IFFALSE 14831
14692: GO 14694
14694: DISABLE
14695: LD_INT 0
14697: PPUSH
14698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14699: LD_ADDR_VAR 0 2
14703: PUSH
14704: LD_INT 22
14706: PUSH
14707: LD_OWVAR 2
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 21
14718: PUSH
14719: LD_INT 1
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PPUSH
14730: CALL_OW 69
14734: ST_TO_ADDR
// if not tmp then
14735: LD_VAR 0 2
14739: NOT
14740: IFFALSE 14744
// exit ;
14742: GO 14831
// un := tmp [ rand ( 1 , tmp ) ] ;
14744: LD_ADDR_VAR 0 1
14748: PUSH
14749: LD_VAR 0 2
14753: PUSH
14754: LD_INT 1
14756: PPUSH
14757: LD_VAR 0 2
14761: PPUSH
14762: CALL_OW 12
14766: ARRAY
14767: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14768: LD_VAR 0 1
14772: PPUSH
14773: LD_INT 0
14775: PPUSH
14776: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14780: LD_VAR 0 1
14784: PPUSH
14785: LD_OWVAR 3
14789: PUSH
14790: LD_VAR 0 1
14794: DIFF
14795: PPUSH
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 74
14805: PPUSH
14806: CALL_OW 115
// wait ( 0 0$20 ) ;
14810: LD_INT 700
14812: PPUSH
14813: CALL_OW 67
// SetSide ( un , your_side ) ;
14817: LD_VAR 0 1
14821: PPUSH
14822: LD_OWVAR 2
14826: PPUSH
14827: CALL_OW 235
// end ;
14831: PPOPN 2
14833: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14834: LD_EXP 25
14838: PUSH
14839: LD_EXP 58
14843: AND
14844: IFFALSE 14950
14846: GO 14848
14848: DISABLE
14849: LD_INT 0
14851: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14852: LD_ADDR_VAR 0 1
14856: PUSH
14857: LD_INT 22
14859: PUSH
14860: LD_OWVAR 2
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 2
14871: PUSH
14872: LD_INT 30
14874: PUSH
14875: LD_INT 0
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 30
14884: PUSH
14885: LD_INT 1
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PPUSH
14901: CALL_OW 69
14905: ST_TO_ADDR
// if not depot then
14906: LD_VAR 0 1
14910: NOT
14911: IFFALSE 14915
// exit ;
14913: GO 14950
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14915: LD_VAR 0 1
14919: PUSH
14920: LD_INT 1
14922: ARRAY
14923: PPUSH
14924: CALL_OW 250
14928: PPUSH
14929: LD_VAR 0 1
14933: PUSH
14934: LD_INT 1
14936: ARRAY
14937: PPUSH
14938: CALL_OW 251
14942: PPUSH
14943: LD_INT 70
14945: PPUSH
14946: CALL_OW 495
// end ;
14950: PPOPN 1
14952: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14953: LD_EXP 25
14957: PUSH
14958: LD_EXP 59
14962: AND
14963: IFFALSE 15174
14965: GO 14967
14967: DISABLE
14968: LD_INT 0
14970: PPUSH
14971: PPUSH
14972: PPUSH
14973: PPUSH
14974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14975: LD_ADDR_VAR 0 5
14979: PUSH
14980: LD_INT 22
14982: PUSH
14983: LD_OWVAR 2
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 21
14994: PUSH
14995: LD_INT 1
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PPUSH
15006: CALL_OW 69
15010: ST_TO_ADDR
// if not tmp then
15011: LD_VAR 0 5
15015: NOT
15016: IFFALSE 15020
// exit ;
15018: GO 15174
// for i in tmp do
15020: LD_ADDR_VAR 0 1
15024: PUSH
15025: LD_VAR 0 5
15029: PUSH
15030: FOR_IN
15031: IFFALSE 15172
// begin d := rand ( 0 , 5 ) ;
15033: LD_ADDR_VAR 0 4
15037: PUSH
15038: LD_INT 0
15040: PPUSH
15041: LD_INT 5
15043: PPUSH
15044: CALL_OW 12
15048: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15049: LD_ADDR_VAR 0 2
15053: PUSH
15054: LD_VAR 0 1
15058: PPUSH
15059: CALL_OW 250
15063: PPUSH
15064: LD_VAR 0 4
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: LD_INT 12
15074: PPUSH
15075: CALL_OW 12
15079: PPUSH
15080: CALL_OW 272
15084: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15085: LD_ADDR_VAR 0 3
15089: PUSH
15090: LD_VAR 0 1
15094: PPUSH
15095: CALL_OW 251
15099: PPUSH
15100: LD_VAR 0 4
15104: PPUSH
15105: LD_INT 3
15107: PPUSH
15108: LD_INT 12
15110: PPUSH
15111: CALL_OW 12
15115: PPUSH
15116: CALL_OW 273
15120: ST_TO_ADDR
// if ValidHex ( x , y ) then
15121: LD_VAR 0 2
15125: PPUSH
15126: LD_VAR 0 3
15130: PPUSH
15131: CALL_OW 488
15135: IFFALSE 15170
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15137: LD_VAR 0 1
15141: PPUSH
15142: LD_VAR 0 2
15146: PPUSH
15147: LD_VAR 0 3
15151: PPUSH
15152: LD_INT 3
15154: PPUSH
15155: LD_INT 6
15157: PPUSH
15158: CALL_OW 12
15162: PPUSH
15163: LD_INT 1
15165: PPUSH
15166: CALL_OW 483
// end ;
15170: GO 15030
15172: POP
15173: POP
// end ;
15174: PPOPN 5
15176: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15177: LD_EXP 25
15181: PUSH
15182: LD_EXP 60
15186: AND
15187: IFFALSE 15281
15189: GO 15191
15191: DISABLE
15192: LD_INT 0
15194: PPUSH
15195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15196: LD_ADDR_VAR 0 2
15200: PUSH
15201: LD_INT 22
15203: PUSH
15204: LD_OWVAR 2
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 32
15215: PUSH
15216: LD_INT 1
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 21
15225: PUSH
15226: LD_INT 2
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: LIST
15237: PPUSH
15238: CALL_OW 69
15242: ST_TO_ADDR
// if not tmp then
15243: LD_VAR 0 2
15247: NOT
15248: IFFALSE 15252
// exit ;
15250: GO 15281
// for i in tmp do
15252: LD_ADDR_VAR 0 1
15256: PUSH
15257: LD_VAR 0 2
15261: PUSH
15262: FOR_IN
15263: IFFALSE 15279
// SetFuel ( i , 0 ) ;
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 0
15272: PPUSH
15273: CALL_OW 240
15277: GO 15262
15279: POP
15280: POP
// end ;
15281: PPOPN 2
15283: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15284: LD_EXP 25
15288: PUSH
15289: LD_EXP 61
15293: AND
15294: IFFALSE 15360
15296: GO 15298
15298: DISABLE
15299: LD_INT 0
15301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15302: LD_ADDR_VAR 0 1
15306: PUSH
15307: LD_INT 22
15309: PUSH
15310: LD_OWVAR 2
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 30
15321: PUSH
15322: LD_INT 29
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PPUSH
15333: CALL_OW 69
15337: ST_TO_ADDR
// if not tmp then
15338: LD_VAR 0 1
15342: NOT
15343: IFFALSE 15347
// exit ;
15345: GO 15360
// DestroyUnit ( tmp [ 1 ] ) ;
15347: LD_VAR 0 1
15351: PUSH
15352: LD_INT 1
15354: ARRAY
15355: PPUSH
15356: CALL_OW 65
// end ;
15360: PPOPN 1
15362: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15363: LD_EXP 25
15367: PUSH
15368: LD_EXP 63
15372: AND
15373: IFFALSE 15502
15375: GO 15377
15377: DISABLE
15378: LD_INT 0
15380: PPUSH
// begin uc_side := 0 ;
15381: LD_ADDR_OWVAR 20
15385: PUSH
15386: LD_INT 0
15388: ST_TO_ADDR
// uc_nation := nation_arabian ;
15389: LD_ADDR_OWVAR 21
15393: PUSH
15394: LD_INT 2
15396: ST_TO_ADDR
// hc_gallery :=  ;
15397: LD_ADDR_OWVAR 33
15401: PUSH
15402: LD_STRING 
15404: ST_TO_ADDR
// hc_name :=  ;
15405: LD_ADDR_OWVAR 26
15409: PUSH
15410: LD_STRING 
15412: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15413: LD_INT 1
15415: PPUSH
15416: LD_INT 11
15418: PPUSH
15419: LD_INT 10
15421: PPUSH
15422: CALL_OW 380
// un := CreateHuman ;
15426: LD_ADDR_VAR 0 1
15430: PUSH
15431: CALL_OW 44
15435: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15436: LD_VAR 0 1
15440: PPUSH
15441: LD_INT 1
15443: PPUSH
15444: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15448: LD_INT 35
15450: PPUSH
15451: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15455: LD_VAR 0 1
15459: PPUSH
15460: LD_INT 22
15462: PUSH
15463: LD_OWVAR 2
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PPUSH
15472: CALL_OW 69
15476: PPUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 74
15486: PPUSH
15487: CALL_OW 115
// until IsDead ( un ) ;
15491: LD_VAR 0 1
15495: PPUSH
15496: CALL_OW 301
15500: IFFALSE 15448
// end ;
15502: PPOPN 1
15504: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15505: LD_EXP 25
15509: PUSH
15510: LD_EXP 65
15514: AND
15515: IFFALSE 15527
15517: GO 15519
15519: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15520: LD_STRING earthquake(getX(game), 0, 32)
15522: PPUSH
15523: CALL_OW 559
15527: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15528: LD_EXP 25
15532: PUSH
15533: LD_EXP 66
15537: AND
15538: IFFALSE 15629
15540: GO 15542
15542: DISABLE
15543: LD_INT 0
15545: PPUSH
// begin enable ;
15546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15547: LD_ADDR_VAR 0 1
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_OWVAR 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 21
15566: PUSH
15567: LD_INT 2
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 33
15576: PUSH
15577: LD_INT 3
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: ST_TO_ADDR
// if not tmp then
15594: LD_VAR 0 1
15598: NOT
15599: IFFALSE 15603
// exit ;
15601: GO 15629
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15603: LD_VAR 0 1
15607: PUSH
15608: LD_INT 1
15610: PPUSH
15611: LD_VAR 0 1
15615: PPUSH
15616: CALL_OW 12
15620: ARRAY
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 234
// end ;
15629: PPOPN 1
15631: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15632: LD_EXP 25
15636: PUSH
15637: LD_EXP 67
15641: AND
15642: IFFALSE 15783
15644: GO 15646
15646: DISABLE
15647: LD_INT 0
15649: PPUSH
15650: PPUSH
15651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15652: LD_ADDR_VAR 0 3
15656: PUSH
15657: LD_INT 22
15659: PUSH
15660: LD_OWVAR 2
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 25
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PPUSH
15683: CALL_OW 69
15687: ST_TO_ADDR
// if not tmp then
15688: LD_VAR 0 3
15692: NOT
15693: IFFALSE 15697
// exit ;
15695: GO 15783
// un := tmp [ rand ( 1 , tmp ) ] ;
15697: LD_ADDR_VAR 0 2
15701: PUSH
15702: LD_VAR 0 3
15706: PUSH
15707: LD_INT 1
15709: PPUSH
15710: LD_VAR 0 3
15714: PPUSH
15715: CALL_OW 12
15719: ARRAY
15720: ST_TO_ADDR
// if Crawls ( un ) then
15721: LD_VAR 0 2
15725: PPUSH
15726: CALL_OW 318
15730: IFFALSE 15741
// ComWalk ( un ) ;
15732: LD_VAR 0 2
15736: PPUSH
15737: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15741: LD_VAR 0 2
15745: PPUSH
15746: LD_INT 9
15748: PPUSH
15749: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15753: LD_INT 28
15755: PPUSH
15756: LD_OWVAR 2
15760: PPUSH
15761: LD_INT 2
15763: PPUSH
15764: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15768: LD_INT 29
15770: PPUSH
15771: LD_OWVAR 2
15775: PPUSH
15776: LD_INT 2
15778: PPUSH
15779: CALL_OW 322
// end ;
15783: PPOPN 3
15785: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15786: LD_EXP 25
15790: PUSH
15791: LD_EXP 68
15795: AND
15796: IFFALSE 15907
15798: GO 15800
15800: DISABLE
15801: LD_INT 0
15803: PPUSH
15804: PPUSH
15805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15806: LD_ADDR_VAR 0 3
15810: PUSH
15811: LD_INT 22
15813: PUSH
15814: LD_OWVAR 2
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: LD_INT 25
15825: PUSH
15826: LD_INT 1
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: ST_TO_ADDR
// if not tmp then
15842: LD_VAR 0 3
15846: NOT
15847: IFFALSE 15851
// exit ;
15849: GO 15907
// un := tmp [ rand ( 1 , tmp ) ] ;
15851: LD_ADDR_VAR 0 2
15855: PUSH
15856: LD_VAR 0 3
15860: PUSH
15861: LD_INT 1
15863: PPUSH
15864: LD_VAR 0 3
15868: PPUSH
15869: CALL_OW 12
15873: ARRAY
15874: ST_TO_ADDR
// if Crawls ( un ) then
15875: LD_VAR 0 2
15879: PPUSH
15880: CALL_OW 318
15884: IFFALSE 15895
// ComWalk ( un ) ;
15886: LD_VAR 0 2
15890: PPUSH
15891: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15895: LD_VAR 0 2
15899: PPUSH
15900: LD_INT 8
15902: PPUSH
15903: CALL_OW 336
// end ;
15907: PPOPN 3
15909: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15910: LD_EXP 25
15914: PUSH
15915: LD_EXP 69
15919: AND
15920: IFFALSE 16064
15922: GO 15924
15924: DISABLE
15925: LD_INT 0
15927: PPUSH
15928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15929: LD_ADDR_VAR 0 2
15933: PUSH
15934: LD_INT 22
15936: PUSH
15937: LD_OWVAR 2
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 21
15948: PUSH
15949: LD_INT 2
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: LD_INT 2
15958: PUSH
15959: LD_INT 34
15961: PUSH
15962: LD_INT 12
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 34
15971: PUSH
15972: LD_INT 51
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 34
15981: PUSH
15982: LD_INT 32
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: LIST
15999: PPUSH
16000: CALL_OW 69
16004: ST_TO_ADDR
// if not tmp then
16005: LD_VAR 0 2
16009: NOT
16010: IFFALSE 16014
// exit ;
16012: GO 16064
// for i in tmp do
16014: LD_ADDR_VAR 0 1
16018: PUSH
16019: LD_VAR 0 2
16023: PUSH
16024: FOR_IN
16025: IFFALSE 16062
// if GetCargo ( i , mat_artifact ) = 0 then
16027: LD_VAR 0 1
16031: PPUSH
16032: LD_INT 4
16034: PPUSH
16035: CALL_OW 289
16039: PUSH
16040: LD_INT 0
16042: EQUAL
16043: IFFALSE 16060
// SetCargo ( i , mat_siberit , 100 ) ;
16045: LD_VAR 0 1
16049: PPUSH
16050: LD_INT 3
16052: PPUSH
16053: LD_INT 100
16055: PPUSH
16056: CALL_OW 290
16060: GO 16024
16062: POP
16063: POP
// end ;
16064: PPOPN 2
16066: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16067: LD_EXP 25
16071: PUSH
16072: LD_EXP 70
16076: AND
16077: IFFALSE 16260
16079: GO 16081
16081: DISABLE
16082: LD_INT 0
16084: PPUSH
16085: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16086: LD_ADDR_VAR 0 2
16090: PUSH
16091: LD_INT 22
16093: PUSH
16094: LD_OWVAR 2
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PPUSH
16103: CALL_OW 69
16107: ST_TO_ADDR
// if not tmp then
16108: LD_VAR 0 2
16112: NOT
16113: IFFALSE 16117
// exit ;
16115: GO 16260
// for i := 1 to 2 do
16117: LD_ADDR_VAR 0 1
16121: PUSH
16122: DOUBLE
16123: LD_INT 1
16125: DEC
16126: ST_TO_ADDR
16127: LD_INT 2
16129: PUSH
16130: FOR_TO
16131: IFFALSE 16258
// begin uc_side := your_side ;
16133: LD_ADDR_OWVAR 20
16137: PUSH
16138: LD_OWVAR 2
16142: ST_TO_ADDR
// uc_nation := nation_american ;
16143: LD_ADDR_OWVAR 21
16147: PUSH
16148: LD_INT 1
16150: ST_TO_ADDR
// vc_chassis := us_morphling ;
16151: LD_ADDR_OWVAR 37
16155: PUSH
16156: LD_INT 5
16158: ST_TO_ADDR
// vc_engine := engine_siberite ;
16159: LD_ADDR_OWVAR 39
16163: PUSH
16164: LD_INT 3
16166: ST_TO_ADDR
// vc_control := control_computer ;
16167: LD_ADDR_OWVAR 38
16171: PUSH
16172: LD_INT 3
16174: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16175: LD_ADDR_OWVAR 40
16179: PUSH
16180: LD_INT 10
16182: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16183: LD_VAR 0 2
16187: PUSH
16188: LD_INT 1
16190: ARRAY
16191: PPUSH
16192: CALL_OW 310
16196: NOT
16197: IFFALSE 16244
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16199: CALL_OW 45
16203: PPUSH
16204: LD_VAR 0 2
16208: PUSH
16209: LD_INT 1
16211: ARRAY
16212: PPUSH
16213: CALL_OW 250
16217: PPUSH
16218: LD_VAR 0 2
16222: PUSH
16223: LD_INT 1
16225: ARRAY
16226: PPUSH
16227: CALL_OW 251
16231: PPUSH
16232: LD_INT 12
16234: PPUSH
16235: LD_INT 1
16237: PPUSH
16238: CALL_OW 50
16242: GO 16256
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16244: CALL_OW 45
16248: PPUSH
16249: LD_INT 1
16251: PPUSH
16252: CALL_OW 51
// end ;
16256: GO 16130
16258: POP
16259: POP
// end ;
16260: PPOPN 2
16262: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16263: LD_EXP 25
16267: PUSH
16268: LD_EXP 71
16272: AND
16273: IFFALSE 16495
16275: GO 16277
16277: DISABLE
16278: LD_INT 0
16280: PPUSH
16281: PPUSH
16282: PPUSH
16283: PPUSH
16284: PPUSH
16285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16286: LD_ADDR_VAR 0 6
16290: PUSH
16291: LD_INT 22
16293: PUSH
16294: LD_OWVAR 2
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 21
16305: PUSH
16306: LD_INT 1
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 3
16315: PUSH
16316: LD_INT 23
16318: PUSH
16319: LD_INT 0
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: PPUSH
16335: CALL_OW 69
16339: ST_TO_ADDR
// if not tmp then
16340: LD_VAR 0 6
16344: NOT
16345: IFFALSE 16349
// exit ;
16347: GO 16495
// s1 := rand ( 1 , 4 ) ;
16349: LD_ADDR_VAR 0 2
16353: PUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_INT 4
16359: PPUSH
16360: CALL_OW 12
16364: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16365: LD_ADDR_VAR 0 4
16369: PUSH
16370: LD_VAR 0 6
16374: PUSH
16375: LD_INT 1
16377: ARRAY
16378: PPUSH
16379: LD_VAR 0 2
16383: PPUSH
16384: CALL_OW 259
16388: ST_TO_ADDR
// if s1 = 1 then
16389: LD_VAR 0 2
16393: PUSH
16394: LD_INT 1
16396: EQUAL
16397: IFFALSE 16417
// s2 := rand ( 2 , 4 ) else
16399: LD_ADDR_VAR 0 3
16403: PUSH
16404: LD_INT 2
16406: PPUSH
16407: LD_INT 4
16409: PPUSH
16410: CALL_OW 12
16414: ST_TO_ADDR
16415: GO 16425
// s2 := 1 ;
16417: LD_ADDR_VAR 0 3
16421: PUSH
16422: LD_INT 1
16424: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16425: LD_ADDR_VAR 0 5
16429: PUSH
16430: LD_VAR 0 6
16434: PUSH
16435: LD_INT 1
16437: ARRAY
16438: PPUSH
16439: LD_VAR 0 3
16443: PPUSH
16444: CALL_OW 259
16448: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16449: LD_VAR 0 6
16453: PUSH
16454: LD_INT 1
16456: ARRAY
16457: PPUSH
16458: LD_VAR 0 2
16462: PPUSH
16463: LD_VAR 0 5
16467: PPUSH
16468: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16472: LD_VAR 0 6
16476: PUSH
16477: LD_INT 1
16479: ARRAY
16480: PPUSH
16481: LD_VAR 0 3
16485: PPUSH
16486: LD_VAR 0 4
16490: PPUSH
16491: CALL_OW 237
// end ;
16495: PPOPN 6
16497: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16498: LD_EXP 25
16502: PUSH
16503: LD_EXP 72
16507: AND
16508: IFFALSE 16587
16510: GO 16512
16512: DISABLE
16513: LD_INT 0
16515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16516: LD_ADDR_VAR 0 1
16520: PUSH
16521: LD_INT 22
16523: PUSH
16524: LD_OWVAR 2
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 30
16535: PUSH
16536: LD_INT 3
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PPUSH
16547: CALL_OW 69
16551: ST_TO_ADDR
// if not tmp then
16552: LD_VAR 0 1
16556: NOT
16557: IFFALSE 16561
// exit ;
16559: GO 16587
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16561: LD_VAR 0 1
16565: PUSH
16566: LD_INT 1
16568: PPUSH
16569: LD_VAR 0 1
16573: PPUSH
16574: CALL_OW 12
16578: ARRAY
16579: PPUSH
16580: LD_INT 1
16582: PPUSH
16583: CALL_OW 234
// end ;
16587: PPOPN 1
16589: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16590: LD_EXP 25
16594: PUSH
16595: LD_EXP 73
16599: AND
16600: IFFALSE 16712
16602: GO 16604
16604: DISABLE
16605: LD_INT 0
16607: PPUSH
16608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16609: LD_ADDR_VAR 0 2
16613: PUSH
16614: LD_INT 22
16616: PUSH
16617: LD_OWVAR 2
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 30
16631: PUSH
16632: LD_INT 27
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 30
16641: PUSH
16642: LD_INT 26
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 30
16651: PUSH
16652: LD_INT 28
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PPUSH
16669: CALL_OW 69
16673: ST_TO_ADDR
// if not tmp then
16674: LD_VAR 0 2
16678: NOT
16679: IFFALSE 16683
// exit ;
16681: GO 16712
// for i in tmp do
16683: LD_ADDR_VAR 0 1
16687: PUSH
16688: LD_VAR 0 2
16692: PUSH
16693: FOR_IN
16694: IFFALSE 16710
// SetLives ( i , 1 ) ;
16696: LD_VAR 0 1
16700: PPUSH
16701: LD_INT 1
16703: PPUSH
16704: CALL_OW 234
16708: GO 16693
16710: POP
16711: POP
// end ;
16712: PPOPN 2
16714: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16715: LD_EXP 25
16719: PUSH
16720: LD_EXP 74
16724: AND
16725: IFFALSE 17012
16727: GO 16729
16729: DISABLE
16730: LD_INT 0
16732: PPUSH
16733: PPUSH
16734: PPUSH
// begin i := rand ( 1 , 7 ) ;
16735: LD_ADDR_VAR 0 1
16739: PUSH
16740: LD_INT 1
16742: PPUSH
16743: LD_INT 7
16745: PPUSH
16746: CALL_OW 12
16750: ST_TO_ADDR
// case i of 1 :
16751: LD_VAR 0 1
16755: PUSH
16756: LD_INT 1
16758: DOUBLE
16759: EQUAL
16760: IFTRUE 16764
16762: GO 16774
16764: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16765: LD_STRING earthquake(getX(game), 0, 32)
16767: PPUSH
16768: CALL_OW 559
16772: GO 17012
16774: LD_INT 2
16776: DOUBLE
16777: EQUAL
16778: IFTRUE 16782
16780: GO 16796
16782: POP
// begin ToLua ( displayStucuk(); ) ;
16783: LD_STRING displayStucuk();
16785: PPUSH
16786: CALL_OW 559
// ResetFog ;
16790: CALL_OW 335
// end ; 3 :
16794: GO 17012
16796: LD_INT 3
16798: DOUBLE
16799: EQUAL
16800: IFTRUE 16804
16802: GO 16908
16804: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16805: LD_ADDR_VAR 0 2
16809: PUSH
16810: LD_INT 22
16812: PUSH
16813: LD_OWVAR 2
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 25
16824: PUSH
16825: LD_INT 1
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PPUSH
16836: CALL_OW 69
16840: ST_TO_ADDR
// if not tmp then
16841: LD_VAR 0 2
16845: NOT
16846: IFFALSE 16850
// exit ;
16848: GO 17012
// un := tmp [ rand ( 1 , tmp ) ] ;
16850: LD_ADDR_VAR 0 3
16854: PUSH
16855: LD_VAR 0 2
16859: PUSH
16860: LD_INT 1
16862: PPUSH
16863: LD_VAR 0 2
16867: PPUSH
16868: CALL_OW 12
16872: ARRAY
16873: ST_TO_ADDR
// if Crawls ( un ) then
16874: LD_VAR 0 3
16878: PPUSH
16879: CALL_OW 318
16883: IFFALSE 16894
// ComWalk ( un ) ;
16885: LD_VAR 0 3
16889: PPUSH
16890: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16894: LD_VAR 0 3
16898: PPUSH
16899: LD_INT 8
16901: PPUSH
16902: CALL_OW 336
// end ; 4 :
16906: GO 17012
16908: LD_INT 4
16910: DOUBLE
16911: EQUAL
16912: IFTRUE 16916
16914: GO 16990
16916: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16917: LD_ADDR_VAR 0 2
16921: PUSH
16922: LD_INT 22
16924: PUSH
16925: LD_OWVAR 2
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 30
16936: PUSH
16937: LD_INT 29
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PPUSH
16948: CALL_OW 69
16952: ST_TO_ADDR
// if not tmp then
16953: LD_VAR 0 2
16957: NOT
16958: IFFALSE 16962
// exit ;
16960: GO 17012
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16962: LD_VAR 0 2
16966: PUSH
16967: LD_INT 1
16969: ARRAY
16970: PPUSH
16971: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16975: LD_VAR 0 2
16979: PUSH
16980: LD_INT 1
16982: ARRAY
16983: PPUSH
16984: CALL_OW 65
// end ; 5 .. 7 :
16988: GO 17012
16990: LD_INT 5
16992: DOUBLE
16993: GREATEREQUAL
16994: IFFALSE 17002
16996: LD_INT 7
16998: DOUBLE
16999: LESSEQUAL
17000: IFTRUE 17004
17002: GO 17011
17004: POP
// StreamSibBomb ; end ;
17005: CALL 13249 0 0
17009: GO 17012
17011: POP
// end ;
17012: PPOPN 3
17014: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17015: LD_EXP 25
17019: PUSH
17020: LD_EXP 75
17024: AND
17025: IFFALSE 17181
17027: GO 17029
17029: DISABLE
17030: LD_INT 0
17032: PPUSH
17033: PPUSH
17034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17035: LD_ADDR_VAR 0 2
17039: PUSH
17040: LD_INT 81
17042: PUSH
17043: LD_OWVAR 2
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 2
17054: PUSH
17055: LD_INT 21
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 21
17067: PUSH
17068: LD_INT 2
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PPUSH
17084: CALL_OW 69
17088: ST_TO_ADDR
// if not tmp then
17089: LD_VAR 0 2
17093: NOT
17094: IFFALSE 17098
// exit ;
17096: GO 17181
// p := 0 ;
17098: LD_ADDR_VAR 0 3
17102: PUSH
17103: LD_INT 0
17105: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17106: LD_INT 35
17108: PPUSH
17109: CALL_OW 67
// p := p + 1 ;
17113: LD_ADDR_VAR 0 3
17117: PUSH
17118: LD_VAR 0 3
17122: PUSH
17123: LD_INT 1
17125: PLUS
17126: ST_TO_ADDR
// for i in tmp do
17127: LD_ADDR_VAR 0 1
17131: PUSH
17132: LD_VAR 0 2
17136: PUSH
17137: FOR_IN
17138: IFFALSE 17169
// if GetLives ( i ) < 1000 then
17140: LD_VAR 0 1
17144: PPUSH
17145: CALL_OW 256
17149: PUSH
17150: LD_INT 1000
17152: LESS
17153: IFFALSE 17167
// SetLives ( i , 1000 ) ;
17155: LD_VAR 0 1
17159: PPUSH
17160: LD_INT 1000
17162: PPUSH
17163: CALL_OW 234
17167: GO 17137
17169: POP
17170: POP
// until p > 20 ;
17171: LD_VAR 0 3
17175: PUSH
17176: LD_INT 20
17178: GREATER
17179: IFFALSE 17106
// end ;
17181: PPOPN 3
17183: END
// every 0 0$1 trigger StreamModeActive and sTime do
17184: LD_EXP 25
17188: PUSH
17189: LD_EXP 76
17193: AND
17194: IFFALSE 17229
17196: GO 17198
17198: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17199: LD_INT 28
17201: PPUSH
17202: LD_OWVAR 2
17206: PPUSH
17207: LD_INT 2
17209: PPUSH
17210: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17214: LD_INT 30
17216: PPUSH
17217: LD_OWVAR 2
17221: PPUSH
17222: LD_INT 2
17224: PPUSH
17225: CALL_OW 322
// end ;
17229: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17230: LD_EXP 25
17234: PUSH
17235: LD_EXP 77
17239: AND
17240: IFFALSE 17361
17242: GO 17244
17244: DISABLE
17245: LD_INT 0
17247: PPUSH
17248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17249: LD_ADDR_VAR 0 2
17253: PUSH
17254: LD_INT 22
17256: PUSH
17257: LD_OWVAR 2
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 21
17268: PUSH
17269: LD_INT 1
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 3
17278: PUSH
17279: LD_INT 23
17281: PUSH
17282: LD_INT 0
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: PPUSH
17298: CALL_OW 69
17302: ST_TO_ADDR
// if not tmp then
17303: LD_VAR 0 2
17307: NOT
17308: IFFALSE 17312
// exit ;
17310: GO 17361
// for i in tmp do
17312: LD_ADDR_VAR 0 1
17316: PUSH
17317: LD_VAR 0 2
17321: PUSH
17322: FOR_IN
17323: IFFALSE 17359
// begin if Crawls ( i ) then
17325: LD_VAR 0 1
17329: PPUSH
17330: CALL_OW 318
17334: IFFALSE 17345
// ComWalk ( i ) ;
17336: LD_VAR 0 1
17340: PPUSH
17341: CALL_OW 138
// SetClass ( i , 2 ) ;
17345: LD_VAR 0 1
17349: PPUSH
17350: LD_INT 2
17352: PPUSH
17353: CALL_OW 336
// end ;
17357: GO 17322
17359: POP
17360: POP
// end ;
17361: PPOPN 2
17363: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17364: LD_EXP 25
17368: PUSH
17369: LD_EXP 78
17373: AND
17374: IFFALSE 17662
17376: GO 17378
17378: DISABLE
17379: LD_INT 0
17381: PPUSH
17382: PPUSH
17383: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17384: LD_OWVAR 2
17388: PPUSH
17389: LD_INT 9
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: LD_INT 1
17397: PPUSH
17398: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17402: LD_INT 9
17404: PPUSH
17405: LD_OWVAR 2
17409: PPUSH
17410: CALL_OW 343
// uc_side := 9 ;
17414: LD_ADDR_OWVAR 20
17418: PUSH
17419: LD_INT 9
17421: ST_TO_ADDR
// uc_nation := 2 ;
17422: LD_ADDR_OWVAR 21
17426: PUSH
17427: LD_INT 2
17429: ST_TO_ADDR
// hc_name := Dark Warrior ;
17430: LD_ADDR_OWVAR 26
17434: PUSH
17435: LD_STRING Dark Warrior
17437: ST_TO_ADDR
// hc_gallery :=  ;
17438: LD_ADDR_OWVAR 33
17442: PUSH
17443: LD_STRING 
17445: ST_TO_ADDR
// hc_noskilllimit := true ;
17446: LD_ADDR_OWVAR 76
17450: PUSH
17451: LD_INT 1
17453: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17454: LD_ADDR_OWVAR 31
17458: PUSH
17459: LD_INT 30
17461: PUSH
17462: LD_INT 30
17464: PUSH
17465: LD_INT 30
17467: PUSH
17468: LD_INT 30
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: ST_TO_ADDR
// un := CreateHuman ;
17477: LD_ADDR_VAR 0 3
17481: PUSH
17482: CALL_OW 44
17486: ST_TO_ADDR
// hc_noskilllimit := false ;
17487: LD_ADDR_OWVAR 76
17491: PUSH
17492: LD_INT 0
17494: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17495: LD_VAR 0 3
17499: PPUSH
17500: LD_INT 1
17502: PPUSH
17503: CALL_OW 51
// ToLua ( playRanger() ) ;
17507: LD_STRING playRanger()
17509: PPUSH
17510: CALL_OW 559
// p := 0 ;
17514: LD_ADDR_VAR 0 2
17518: PUSH
17519: LD_INT 0
17521: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17522: LD_INT 35
17524: PPUSH
17525: CALL_OW 67
// p := p + 1 ;
17529: LD_ADDR_VAR 0 2
17533: PUSH
17534: LD_VAR 0 2
17538: PUSH
17539: LD_INT 1
17541: PLUS
17542: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17543: LD_VAR 0 3
17547: PPUSH
17548: CALL_OW 256
17552: PUSH
17553: LD_INT 1000
17555: LESS
17556: IFFALSE 17570
// SetLives ( un , 1000 ) ;
17558: LD_VAR 0 3
17562: PPUSH
17563: LD_INT 1000
17565: PPUSH
17566: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17570: LD_VAR 0 3
17574: PPUSH
17575: LD_INT 81
17577: PUSH
17578: LD_OWVAR 2
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 91
17589: PUSH
17590: LD_VAR 0 3
17594: PUSH
17595: LD_INT 30
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PPUSH
17607: CALL_OW 69
17611: PPUSH
17612: LD_VAR 0 3
17616: PPUSH
17617: CALL_OW 74
17621: PPUSH
17622: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17626: LD_VAR 0 2
17630: PUSH
17631: LD_INT 80
17633: GREATER
17634: PUSH
17635: LD_VAR 0 3
17639: PPUSH
17640: CALL_OW 301
17644: OR
17645: IFFALSE 17522
// if un then
17647: LD_VAR 0 3
17651: IFFALSE 17662
// RemoveUnit ( un ) ;
17653: LD_VAR 0 3
17657: PPUSH
17658: CALL_OW 64
// end ;
17662: PPOPN 3
17664: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17665: LD_EXP 79
17669: IFFALSE 17785
17671: GO 17673
17673: DISABLE
17674: LD_INT 0
17676: PPUSH
17677: PPUSH
17678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17679: LD_ADDR_VAR 0 2
17683: PUSH
17684: LD_INT 81
17686: PUSH
17687: LD_OWVAR 2
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 21
17698: PUSH
17699: LD_INT 1
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PPUSH
17710: CALL_OW 69
17714: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17715: LD_STRING playComputer()
17717: PPUSH
17718: CALL_OW 559
// if not tmp then
17722: LD_VAR 0 2
17726: NOT
17727: IFFALSE 17731
// exit ;
17729: GO 17785
// for i in tmp do
17731: LD_ADDR_VAR 0 1
17735: PUSH
17736: LD_VAR 0 2
17740: PUSH
17741: FOR_IN
17742: IFFALSE 17783
// for j := 1 to 4 do
17744: LD_ADDR_VAR 0 3
17748: PUSH
17749: DOUBLE
17750: LD_INT 1
17752: DEC
17753: ST_TO_ADDR
17754: LD_INT 4
17756: PUSH
17757: FOR_TO
17758: IFFALSE 17779
// SetSkill ( i , j , 10 ) ;
17760: LD_VAR 0 1
17764: PPUSH
17765: LD_VAR 0 3
17769: PPUSH
17770: LD_INT 10
17772: PPUSH
17773: CALL_OW 237
17777: GO 17757
17779: POP
17780: POP
17781: GO 17741
17783: POP
17784: POP
// end ;
17785: PPOPN 3
17787: END
// every 0 0$1 trigger s30 do var i , tmp ;
17788: LD_EXP 80
17792: IFFALSE 17861
17794: GO 17796
17796: DISABLE
17797: LD_INT 0
17799: PPUSH
17800: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17801: LD_ADDR_VAR 0 2
17805: PUSH
17806: LD_INT 22
17808: PUSH
17809: LD_OWVAR 2
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PPUSH
17818: CALL_OW 69
17822: ST_TO_ADDR
// if not tmp then
17823: LD_VAR 0 2
17827: NOT
17828: IFFALSE 17832
// exit ;
17830: GO 17861
// for i in tmp do
17832: LD_ADDR_VAR 0 1
17836: PUSH
17837: LD_VAR 0 2
17841: PUSH
17842: FOR_IN
17843: IFFALSE 17859
// SetLives ( i , 300 ) ;
17845: LD_VAR 0 1
17849: PPUSH
17850: LD_INT 300
17852: PPUSH
17853: CALL_OW 234
17857: GO 17842
17859: POP
17860: POP
// end ;
17861: PPOPN 2
17863: END
// every 0 0$1 trigger s60 do var i , tmp ;
17864: LD_EXP 81
17868: IFFALSE 17937
17870: GO 17872
17872: DISABLE
17873: LD_INT 0
17875: PPUSH
17876: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17877: LD_ADDR_VAR 0 2
17881: PUSH
17882: LD_INT 22
17884: PUSH
17885: LD_OWVAR 2
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PPUSH
17894: CALL_OW 69
17898: ST_TO_ADDR
// if not tmp then
17899: LD_VAR 0 2
17903: NOT
17904: IFFALSE 17908
// exit ;
17906: GO 17937
// for i in tmp do
17908: LD_ADDR_VAR 0 1
17912: PUSH
17913: LD_VAR 0 2
17917: PUSH
17918: FOR_IN
17919: IFFALSE 17935
// SetLives ( i , 600 ) ;
17921: LD_VAR 0 1
17925: PPUSH
17926: LD_INT 600
17928: PPUSH
17929: CALL_OW 234
17933: GO 17918
17935: POP
17936: POP
// end ;
17937: PPOPN 2
17939: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17940: LD_INT 0
17942: PPUSH
// case cmd of 301 :
17943: LD_VAR 0 1
17947: PUSH
17948: LD_INT 301
17950: DOUBLE
17951: EQUAL
17952: IFTRUE 17956
17954: GO 17988
17956: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17957: LD_VAR 0 6
17961: PPUSH
17962: LD_VAR 0 7
17966: PPUSH
17967: LD_VAR 0 8
17971: PPUSH
17972: LD_VAR 0 4
17976: PPUSH
17977: LD_VAR 0 5
17981: PPUSH
17982: CALL 19189 0 5
17986: GO 18109
17988: LD_INT 302
17990: DOUBLE
17991: EQUAL
17992: IFTRUE 17996
17994: GO 18033
17996: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17997: LD_VAR 0 6
18001: PPUSH
18002: LD_VAR 0 7
18006: PPUSH
18007: LD_VAR 0 8
18011: PPUSH
18012: LD_VAR 0 9
18016: PPUSH
18017: LD_VAR 0 4
18021: PPUSH
18022: LD_VAR 0 5
18026: PPUSH
18027: CALL 19280 0 6
18031: GO 18109
18033: LD_INT 303
18035: DOUBLE
18036: EQUAL
18037: IFTRUE 18041
18039: GO 18078
18041: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18042: LD_VAR 0 6
18046: PPUSH
18047: LD_VAR 0 7
18051: PPUSH
18052: LD_VAR 0 8
18056: PPUSH
18057: LD_VAR 0 9
18061: PPUSH
18062: LD_VAR 0 4
18066: PPUSH
18067: LD_VAR 0 5
18071: PPUSH
18072: CALL 18114 0 6
18076: GO 18109
18078: LD_INT 304
18080: DOUBLE
18081: EQUAL
18082: IFTRUE 18086
18084: GO 18108
18086: POP
// hHackTeleport ( unit , x , y ) ; end ;
18087: LD_VAR 0 2
18091: PPUSH
18092: LD_VAR 0 4
18096: PPUSH
18097: LD_VAR 0 5
18101: PPUSH
18102: CALL 19873 0 3
18106: GO 18109
18108: POP
// end ;
18109: LD_VAR 0 12
18113: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18114: LD_INT 0
18116: PPUSH
18117: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18118: LD_VAR 0 1
18122: PUSH
18123: LD_INT 1
18125: LESS
18126: PUSH
18127: LD_VAR 0 1
18131: PUSH
18132: LD_INT 3
18134: GREATER
18135: OR
18136: PUSH
18137: LD_VAR 0 5
18141: PPUSH
18142: LD_VAR 0 6
18146: PPUSH
18147: CALL_OW 428
18151: OR
18152: IFFALSE 18156
// exit ;
18154: GO 18876
// uc_side := your_side ;
18156: LD_ADDR_OWVAR 20
18160: PUSH
18161: LD_OWVAR 2
18165: ST_TO_ADDR
// uc_nation := nation ;
18166: LD_ADDR_OWVAR 21
18170: PUSH
18171: LD_VAR 0 1
18175: ST_TO_ADDR
// bc_level = 1 ;
18176: LD_ADDR_OWVAR 43
18180: PUSH
18181: LD_INT 1
18183: ST_TO_ADDR
// case btype of 1 :
18184: LD_VAR 0 2
18188: PUSH
18189: LD_INT 1
18191: DOUBLE
18192: EQUAL
18193: IFTRUE 18197
18195: GO 18208
18197: POP
// bc_type := b_depot ; 2 :
18198: LD_ADDR_OWVAR 42
18202: PUSH
18203: LD_INT 0
18205: ST_TO_ADDR
18206: GO 18820
18208: LD_INT 2
18210: DOUBLE
18211: EQUAL
18212: IFTRUE 18216
18214: GO 18227
18216: POP
// bc_type := b_warehouse ; 3 :
18217: LD_ADDR_OWVAR 42
18221: PUSH
18222: LD_INT 1
18224: ST_TO_ADDR
18225: GO 18820
18227: LD_INT 3
18229: DOUBLE
18230: EQUAL
18231: IFTRUE 18235
18233: GO 18246
18235: POP
// bc_type := b_lab ; 4 .. 9 :
18236: LD_ADDR_OWVAR 42
18240: PUSH
18241: LD_INT 6
18243: ST_TO_ADDR
18244: GO 18820
18246: LD_INT 4
18248: DOUBLE
18249: GREATEREQUAL
18250: IFFALSE 18258
18252: LD_INT 9
18254: DOUBLE
18255: LESSEQUAL
18256: IFTRUE 18260
18258: GO 18312
18260: POP
// begin bc_type := b_lab_half ;
18261: LD_ADDR_OWVAR 42
18265: PUSH
18266: LD_INT 7
18268: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18269: LD_ADDR_OWVAR 44
18273: PUSH
18274: LD_INT 10
18276: PUSH
18277: LD_INT 11
18279: PUSH
18280: LD_INT 12
18282: PUSH
18283: LD_INT 15
18285: PUSH
18286: LD_INT 14
18288: PUSH
18289: LD_INT 13
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: LD_VAR 0 2
18304: PUSH
18305: LD_INT 3
18307: MINUS
18308: ARRAY
18309: ST_TO_ADDR
// end ; 10 .. 13 :
18310: GO 18820
18312: LD_INT 10
18314: DOUBLE
18315: GREATEREQUAL
18316: IFFALSE 18324
18318: LD_INT 13
18320: DOUBLE
18321: LESSEQUAL
18322: IFTRUE 18326
18324: GO 18403
18326: POP
// begin bc_type := b_lab_full ;
18327: LD_ADDR_OWVAR 42
18331: PUSH
18332: LD_INT 8
18334: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18335: LD_ADDR_OWVAR 44
18339: PUSH
18340: LD_INT 10
18342: PUSH
18343: LD_INT 12
18345: PUSH
18346: LD_INT 14
18348: PUSH
18349: LD_INT 13
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: PUSH
18358: LD_VAR 0 2
18362: PUSH
18363: LD_INT 9
18365: MINUS
18366: ARRAY
18367: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18368: LD_ADDR_OWVAR 45
18372: PUSH
18373: LD_INT 11
18375: PUSH
18376: LD_INT 15
18378: PUSH
18379: LD_INT 12
18381: PUSH
18382: LD_INT 15
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: PUSH
18391: LD_VAR 0 2
18395: PUSH
18396: LD_INT 9
18398: MINUS
18399: ARRAY
18400: ST_TO_ADDR
// end ; 14 :
18401: GO 18820
18403: LD_INT 14
18405: DOUBLE
18406: EQUAL
18407: IFTRUE 18411
18409: GO 18422
18411: POP
// bc_type := b_workshop ; 15 :
18412: LD_ADDR_OWVAR 42
18416: PUSH
18417: LD_INT 2
18419: ST_TO_ADDR
18420: GO 18820
18422: LD_INT 15
18424: DOUBLE
18425: EQUAL
18426: IFTRUE 18430
18428: GO 18441
18430: POP
// bc_type := b_factory ; 16 :
18431: LD_ADDR_OWVAR 42
18435: PUSH
18436: LD_INT 3
18438: ST_TO_ADDR
18439: GO 18820
18441: LD_INT 16
18443: DOUBLE
18444: EQUAL
18445: IFTRUE 18449
18447: GO 18460
18449: POP
// bc_type := b_ext_gun ; 17 :
18450: LD_ADDR_OWVAR 42
18454: PUSH
18455: LD_INT 17
18457: ST_TO_ADDR
18458: GO 18820
18460: LD_INT 17
18462: DOUBLE
18463: EQUAL
18464: IFTRUE 18468
18466: GO 18496
18468: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18469: LD_ADDR_OWVAR 42
18473: PUSH
18474: LD_INT 19
18476: PUSH
18477: LD_INT 23
18479: PUSH
18480: LD_INT 19
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: PUSH
18488: LD_VAR 0 1
18492: ARRAY
18493: ST_TO_ADDR
18494: GO 18820
18496: LD_INT 18
18498: DOUBLE
18499: EQUAL
18500: IFTRUE 18504
18502: GO 18515
18504: POP
// bc_type := b_ext_radar ; 19 :
18505: LD_ADDR_OWVAR 42
18509: PUSH
18510: LD_INT 20
18512: ST_TO_ADDR
18513: GO 18820
18515: LD_INT 19
18517: DOUBLE
18518: EQUAL
18519: IFTRUE 18523
18521: GO 18534
18523: POP
// bc_type := b_ext_radio ; 20 :
18524: LD_ADDR_OWVAR 42
18528: PUSH
18529: LD_INT 22
18531: ST_TO_ADDR
18532: GO 18820
18534: LD_INT 20
18536: DOUBLE
18537: EQUAL
18538: IFTRUE 18542
18540: GO 18553
18542: POP
// bc_type := b_ext_siberium ; 21 :
18543: LD_ADDR_OWVAR 42
18547: PUSH
18548: LD_INT 21
18550: ST_TO_ADDR
18551: GO 18820
18553: LD_INT 21
18555: DOUBLE
18556: EQUAL
18557: IFTRUE 18561
18559: GO 18572
18561: POP
// bc_type := b_ext_computer ; 22 :
18562: LD_ADDR_OWVAR 42
18566: PUSH
18567: LD_INT 24
18569: ST_TO_ADDR
18570: GO 18820
18572: LD_INT 22
18574: DOUBLE
18575: EQUAL
18576: IFTRUE 18580
18578: GO 18591
18580: POP
// bc_type := b_ext_track ; 23 :
18581: LD_ADDR_OWVAR 42
18585: PUSH
18586: LD_INT 16
18588: ST_TO_ADDR
18589: GO 18820
18591: LD_INT 23
18593: DOUBLE
18594: EQUAL
18595: IFTRUE 18599
18597: GO 18610
18599: POP
// bc_type := b_ext_laser ; 24 :
18600: LD_ADDR_OWVAR 42
18604: PUSH
18605: LD_INT 25
18607: ST_TO_ADDR
18608: GO 18820
18610: LD_INT 24
18612: DOUBLE
18613: EQUAL
18614: IFTRUE 18618
18616: GO 18629
18618: POP
// bc_type := b_control_tower ; 25 :
18619: LD_ADDR_OWVAR 42
18623: PUSH
18624: LD_INT 36
18626: ST_TO_ADDR
18627: GO 18820
18629: LD_INT 25
18631: DOUBLE
18632: EQUAL
18633: IFTRUE 18637
18635: GO 18648
18637: POP
// bc_type := b_breastwork ; 26 :
18638: LD_ADDR_OWVAR 42
18642: PUSH
18643: LD_INT 31
18645: ST_TO_ADDR
18646: GO 18820
18648: LD_INT 26
18650: DOUBLE
18651: EQUAL
18652: IFTRUE 18656
18654: GO 18667
18656: POP
// bc_type := b_bunker ; 27 :
18657: LD_ADDR_OWVAR 42
18661: PUSH
18662: LD_INT 32
18664: ST_TO_ADDR
18665: GO 18820
18667: LD_INT 27
18669: DOUBLE
18670: EQUAL
18671: IFTRUE 18675
18673: GO 18686
18675: POP
// bc_type := b_turret ; 28 :
18676: LD_ADDR_OWVAR 42
18680: PUSH
18681: LD_INT 33
18683: ST_TO_ADDR
18684: GO 18820
18686: LD_INT 28
18688: DOUBLE
18689: EQUAL
18690: IFTRUE 18694
18692: GO 18705
18694: POP
// bc_type := b_armoury ; 29 :
18695: LD_ADDR_OWVAR 42
18699: PUSH
18700: LD_INT 4
18702: ST_TO_ADDR
18703: GO 18820
18705: LD_INT 29
18707: DOUBLE
18708: EQUAL
18709: IFTRUE 18713
18711: GO 18724
18713: POP
// bc_type := b_barracks ; 30 :
18714: LD_ADDR_OWVAR 42
18718: PUSH
18719: LD_INT 5
18721: ST_TO_ADDR
18722: GO 18820
18724: LD_INT 30
18726: DOUBLE
18727: EQUAL
18728: IFTRUE 18732
18730: GO 18743
18732: POP
// bc_type := b_solar_power ; 31 :
18733: LD_ADDR_OWVAR 42
18737: PUSH
18738: LD_INT 27
18740: ST_TO_ADDR
18741: GO 18820
18743: LD_INT 31
18745: DOUBLE
18746: EQUAL
18747: IFTRUE 18751
18749: GO 18762
18751: POP
// bc_type := b_oil_power ; 32 :
18752: LD_ADDR_OWVAR 42
18756: PUSH
18757: LD_INT 26
18759: ST_TO_ADDR
18760: GO 18820
18762: LD_INT 32
18764: DOUBLE
18765: EQUAL
18766: IFTRUE 18770
18768: GO 18781
18770: POP
// bc_type := b_siberite_power ; 33 :
18771: LD_ADDR_OWVAR 42
18775: PUSH
18776: LD_INT 28
18778: ST_TO_ADDR
18779: GO 18820
18781: LD_INT 33
18783: DOUBLE
18784: EQUAL
18785: IFTRUE 18789
18787: GO 18800
18789: POP
// bc_type := b_oil_mine ; 34 :
18790: LD_ADDR_OWVAR 42
18794: PUSH
18795: LD_INT 29
18797: ST_TO_ADDR
18798: GO 18820
18800: LD_INT 34
18802: DOUBLE
18803: EQUAL
18804: IFTRUE 18808
18806: GO 18819
18808: POP
// bc_type := b_siberite_mine ; end ;
18809: LD_ADDR_OWVAR 42
18813: PUSH
18814: LD_INT 30
18816: ST_TO_ADDR
18817: GO 18820
18819: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18820: LD_ADDR_VAR 0 8
18824: PUSH
18825: LD_VAR 0 5
18829: PPUSH
18830: LD_VAR 0 6
18834: PPUSH
18835: LD_VAR 0 3
18839: PPUSH
18840: CALL_OW 47
18844: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18845: LD_OWVAR 42
18849: PUSH
18850: LD_INT 32
18852: PUSH
18853: LD_INT 33
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: IN
18860: IFFALSE 18876
// PlaceWeaponTurret ( b , weapon ) ;
18862: LD_VAR 0 8
18866: PPUSH
18867: LD_VAR 0 4
18871: PPUSH
18872: CALL_OW 431
// end ;
18876: LD_VAR 0 7
18880: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18881: LD_INT 0
18883: PPUSH
18884: PPUSH
18885: PPUSH
18886: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18887: LD_ADDR_VAR 0 4
18891: PUSH
18892: LD_INT 22
18894: PUSH
18895: LD_OWVAR 2
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: LD_INT 30
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 30
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: LIST
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PPUSH
18936: CALL_OW 69
18940: ST_TO_ADDR
// if not tmp then
18941: LD_VAR 0 4
18945: NOT
18946: IFFALSE 18950
// exit ;
18948: GO 19009
// for i in tmp do
18950: LD_ADDR_VAR 0 2
18954: PUSH
18955: LD_VAR 0 4
18959: PUSH
18960: FOR_IN
18961: IFFALSE 19007
// for j = 1 to 3 do
18963: LD_ADDR_VAR 0 3
18967: PUSH
18968: DOUBLE
18969: LD_INT 1
18971: DEC
18972: ST_TO_ADDR
18973: LD_INT 3
18975: PUSH
18976: FOR_TO
18977: IFFALSE 19003
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18979: LD_VAR 0 2
18983: PPUSH
18984: CALL_OW 274
18988: PPUSH
18989: LD_VAR 0 3
18993: PPUSH
18994: LD_INT 99999
18996: PPUSH
18997: CALL_OW 277
19001: GO 18976
19003: POP
19004: POP
19005: GO 18960
19007: POP
19008: POP
// end ;
19009: LD_VAR 0 1
19013: RET
// export function hHackSetLevel10 ; var i , j ; begin
19014: LD_INT 0
19016: PPUSH
19017: PPUSH
19018: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19019: LD_ADDR_VAR 0 2
19023: PUSH
19024: LD_INT 21
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PPUSH
19034: CALL_OW 69
19038: PUSH
19039: FOR_IN
19040: IFFALSE 19092
// if IsSelected ( i ) then
19042: LD_VAR 0 2
19046: PPUSH
19047: CALL_OW 306
19051: IFFALSE 19090
// begin for j := 1 to 4 do
19053: LD_ADDR_VAR 0 3
19057: PUSH
19058: DOUBLE
19059: LD_INT 1
19061: DEC
19062: ST_TO_ADDR
19063: LD_INT 4
19065: PUSH
19066: FOR_TO
19067: IFFALSE 19088
// SetSkill ( i , j , 10 ) ;
19069: LD_VAR 0 2
19073: PPUSH
19074: LD_VAR 0 3
19078: PPUSH
19079: LD_INT 10
19081: PPUSH
19082: CALL_OW 237
19086: GO 19066
19088: POP
19089: POP
// end ;
19090: GO 19039
19092: POP
19093: POP
// end ;
19094: LD_VAR 0 1
19098: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19099: LD_INT 0
19101: PPUSH
19102: PPUSH
19103: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19104: LD_ADDR_VAR 0 2
19108: PUSH
19109: LD_INT 22
19111: PUSH
19112: LD_OWVAR 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 21
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PPUSH
19135: CALL_OW 69
19139: PUSH
19140: FOR_IN
19141: IFFALSE 19182
// begin for j := 1 to 4 do
19143: LD_ADDR_VAR 0 3
19147: PUSH
19148: DOUBLE
19149: LD_INT 1
19151: DEC
19152: ST_TO_ADDR
19153: LD_INT 4
19155: PUSH
19156: FOR_TO
19157: IFFALSE 19178
// SetSkill ( i , j , 10 ) ;
19159: LD_VAR 0 2
19163: PPUSH
19164: LD_VAR 0 3
19168: PPUSH
19169: LD_INT 10
19171: PPUSH
19172: CALL_OW 237
19176: GO 19156
19178: POP
19179: POP
// end ;
19180: GO 19140
19182: POP
19183: POP
// end ;
19184: LD_VAR 0 1
19188: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19189: LD_INT 0
19191: PPUSH
// uc_side := your_side ;
19192: LD_ADDR_OWVAR 20
19196: PUSH
19197: LD_OWVAR 2
19201: ST_TO_ADDR
// uc_nation := nation ;
19202: LD_ADDR_OWVAR 21
19206: PUSH
19207: LD_VAR 0 1
19211: ST_TO_ADDR
// InitHc ;
19212: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19216: LD_INT 0
19218: PPUSH
19219: LD_VAR 0 2
19223: PPUSH
19224: LD_VAR 0 3
19228: PPUSH
19229: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19233: LD_VAR 0 4
19237: PPUSH
19238: LD_VAR 0 5
19242: PPUSH
19243: CALL_OW 428
19247: PUSH
19248: LD_INT 0
19250: EQUAL
19251: IFFALSE 19275
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19253: CALL_OW 44
19257: PPUSH
19258: LD_VAR 0 4
19262: PPUSH
19263: LD_VAR 0 5
19267: PPUSH
19268: LD_INT 1
19270: PPUSH
19271: CALL_OW 48
// end ;
19275: LD_VAR 0 6
19279: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19280: LD_INT 0
19282: PPUSH
19283: PPUSH
// uc_side := your_side ;
19284: LD_ADDR_OWVAR 20
19288: PUSH
19289: LD_OWVAR 2
19293: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19294: LD_VAR 0 1
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 3
19307: PUSH
19308: LD_INT 4
19310: PUSH
19311: LD_INT 5
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: IN
19321: IFFALSE 19333
// uc_nation := nation_american else
19323: LD_ADDR_OWVAR 21
19327: PUSH
19328: LD_INT 1
19330: ST_TO_ADDR
19331: GO 19376
// if chassis in [ 11 , 12 , 13 , 14 ] then
19333: LD_VAR 0 1
19337: PUSH
19338: LD_INT 11
19340: PUSH
19341: LD_INT 12
19343: PUSH
19344: LD_INT 13
19346: PUSH
19347: LD_INT 14
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: IN
19356: IFFALSE 19368
// uc_nation := nation_arabian else
19358: LD_ADDR_OWVAR 21
19362: PUSH
19363: LD_INT 2
19365: ST_TO_ADDR
19366: GO 19376
// uc_nation := nation_russian ;
19368: LD_ADDR_OWVAR 21
19372: PUSH
19373: LD_INT 3
19375: ST_TO_ADDR
// vc_chassis := chassis ;
19376: LD_ADDR_OWVAR 37
19380: PUSH
19381: LD_VAR 0 1
19385: ST_TO_ADDR
// vc_engine := engine ;
19386: LD_ADDR_OWVAR 39
19390: PUSH
19391: LD_VAR 0 2
19395: ST_TO_ADDR
// vc_control := control ;
19396: LD_ADDR_OWVAR 38
19400: PUSH
19401: LD_VAR 0 3
19405: ST_TO_ADDR
// vc_weapon := weapon ;
19406: LD_ADDR_OWVAR 40
19410: PUSH
19411: LD_VAR 0 4
19415: ST_TO_ADDR
// un := CreateVehicle ;
19416: LD_ADDR_VAR 0 8
19420: PUSH
19421: CALL_OW 45
19425: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19426: LD_VAR 0 8
19430: PPUSH
19431: LD_INT 0
19433: PPUSH
19434: LD_INT 5
19436: PPUSH
19437: CALL_OW 12
19441: PPUSH
19442: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19446: LD_VAR 0 8
19450: PPUSH
19451: LD_VAR 0 5
19455: PPUSH
19456: LD_VAR 0 6
19460: PPUSH
19461: LD_INT 1
19463: PPUSH
19464: CALL_OW 48
// end ;
19468: LD_VAR 0 7
19472: RET
// export hInvincible ; every 1 do
19473: GO 19475
19475: DISABLE
// hInvincible := [ ] ;
19476: LD_ADDR_EXP 82
19480: PUSH
19481: EMPTY
19482: ST_TO_ADDR
19483: END
// every 10 do var i ;
19484: GO 19486
19486: DISABLE
19487: LD_INT 0
19489: PPUSH
// begin enable ;
19490: ENABLE
// if not hInvincible then
19491: LD_EXP 82
19495: NOT
19496: IFFALSE 19500
// exit ;
19498: GO 19544
// for i in hInvincible do
19500: LD_ADDR_VAR 0 1
19504: PUSH
19505: LD_EXP 82
19509: PUSH
19510: FOR_IN
19511: IFFALSE 19542
// if GetLives ( i ) < 1000 then
19513: LD_VAR 0 1
19517: PPUSH
19518: CALL_OW 256
19522: PUSH
19523: LD_INT 1000
19525: LESS
19526: IFFALSE 19540
// SetLives ( i , 1000 ) ;
19528: LD_VAR 0 1
19532: PPUSH
19533: LD_INT 1000
19535: PPUSH
19536: CALL_OW 234
19540: GO 19510
19542: POP
19543: POP
// end ;
19544: PPOPN 1
19546: END
// export function hHackInvincible ; var i ; begin
19547: LD_INT 0
19549: PPUSH
19550: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19551: LD_ADDR_VAR 0 2
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: LD_INT 21
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 21
19571: PUSH
19572: LD_INT 2
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: LIST
19583: PPUSH
19584: CALL_OW 69
19588: PUSH
19589: FOR_IN
19590: IFFALSE 19651
// if IsSelected ( i ) then
19592: LD_VAR 0 2
19596: PPUSH
19597: CALL_OW 306
19601: IFFALSE 19649
// begin if i in hInvincible then
19603: LD_VAR 0 2
19607: PUSH
19608: LD_EXP 82
19612: IN
19613: IFFALSE 19633
// hInvincible := hInvincible diff i else
19615: LD_ADDR_EXP 82
19619: PUSH
19620: LD_EXP 82
19624: PUSH
19625: LD_VAR 0 2
19629: DIFF
19630: ST_TO_ADDR
19631: GO 19649
// hInvincible := hInvincible union i ;
19633: LD_ADDR_EXP 82
19637: PUSH
19638: LD_EXP 82
19642: PUSH
19643: LD_VAR 0 2
19647: UNION
19648: ST_TO_ADDR
// end ;
19649: GO 19589
19651: POP
19652: POP
// end ;
19653: LD_VAR 0 1
19657: RET
// export function hHackInvisible ; var i , j ; begin
19658: LD_INT 0
19660: PPUSH
19661: PPUSH
19662: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19663: LD_ADDR_VAR 0 2
19667: PUSH
19668: LD_INT 21
19670: PUSH
19671: LD_INT 1
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PPUSH
19678: CALL_OW 69
19682: PUSH
19683: FOR_IN
19684: IFFALSE 19708
// if IsSelected ( i ) then
19686: LD_VAR 0 2
19690: PPUSH
19691: CALL_OW 306
19695: IFFALSE 19706
// ComForceInvisible ( i ) ;
19697: LD_VAR 0 2
19701: PPUSH
19702: CALL_OW 496
19706: GO 19683
19708: POP
19709: POP
// end ;
19710: LD_VAR 0 1
19714: RET
// export function hHackChangeYourSide ; begin
19715: LD_INT 0
19717: PPUSH
// if your_side = 8 then
19718: LD_OWVAR 2
19722: PUSH
19723: LD_INT 8
19725: EQUAL
19726: IFFALSE 19738
// your_side := 0 else
19728: LD_ADDR_OWVAR 2
19732: PUSH
19733: LD_INT 0
19735: ST_TO_ADDR
19736: GO 19752
// your_side := your_side + 1 ;
19738: LD_ADDR_OWVAR 2
19742: PUSH
19743: LD_OWVAR 2
19747: PUSH
19748: LD_INT 1
19750: PLUS
19751: ST_TO_ADDR
// end ;
19752: LD_VAR 0 1
19756: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19757: LD_INT 0
19759: PPUSH
19760: PPUSH
19761: PPUSH
// for i in all_units do
19762: LD_ADDR_VAR 0 2
19766: PUSH
19767: LD_OWVAR 3
19771: PUSH
19772: FOR_IN
19773: IFFALSE 19851
// if IsSelected ( i ) then
19775: LD_VAR 0 2
19779: PPUSH
19780: CALL_OW 306
19784: IFFALSE 19849
// begin j := GetSide ( i ) ;
19786: LD_ADDR_VAR 0 3
19790: PUSH
19791: LD_VAR 0 2
19795: PPUSH
19796: CALL_OW 255
19800: ST_TO_ADDR
// if j = 8 then
19801: LD_VAR 0 3
19805: PUSH
19806: LD_INT 8
19808: EQUAL
19809: IFFALSE 19821
// j := 0 else
19811: LD_ADDR_VAR 0 3
19815: PUSH
19816: LD_INT 0
19818: ST_TO_ADDR
19819: GO 19835
// j := j + 1 ;
19821: LD_ADDR_VAR 0 3
19825: PUSH
19826: LD_VAR 0 3
19830: PUSH
19831: LD_INT 1
19833: PLUS
19834: ST_TO_ADDR
// SetSide ( i , j ) ;
19835: LD_VAR 0 2
19839: PPUSH
19840: LD_VAR 0 3
19844: PPUSH
19845: CALL_OW 235
// end ;
19849: GO 19772
19851: POP
19852: POP
// end ;
19853: LD_VAR 0 1
19857: RET
// export function hHackFog ; begin
19858: LD_INT 0
19860: PPUSH
// FogOff ( true ) ;
19861: LD_INT 1
19863: PPUSH
19864: CALL_OW 344
// end ;
19868: LD_VAR 0 1
19872: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19873: LD_INT 0
19875: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_VAR 0 2
19885: PPUSH
19886: LD_VAR 0 3
19890: PPUSH
19891: LD_INT 1
19893: PPUSH
19894: LD_INT 1
19896: PPUSH
19897: CALL_OW 483
// CenterOnXY ( x , y ) ;
19901: LD_VAR 0 2
19905: PPUSH
19906: LD_VAR 0 3
19910: PPUSH
19911: CALL_OW 84
// end ;
19915: LD_VAR 0 4
19919: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19920: LD_INT 0
19922: PPUSH
19923: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19924: LD_VAR 0 1
19928: NOT
19929: PUSH
19930: LD_VAR 0 2
19934: PPUSH
19935: LD_VAR 0 3
19939: PPUSH
19940: CALL_OW 488
19944: NOT
19945: OR
19946: PUSH
19947: LD_VAR 0 1
19951: PPUSH
19952: CALL_OW 266
19956: PUSH
19957: LD_INT 3
19959: NONEQUAL
19960: PUSH
19961: LD_VAR 0 1
19965: PPUSH
19966: CALL_OW 247
19970: PUSH
19971: LD_INT 1
19973: EQUAL
19974: NOT
19975: AND
19976: OR
19977: IFFALSE 19981
// exit ;
19979: GO 20130
// if GetType ( factory ) = unit_human then
19981: LD_VAR 0 1
19985: PPUSH
19986: CALL_OW 247
19990: PUSH
19991: LD_INT 1
19993: EQUAL
19994: IFFALSE 20011
// factory := IsInUnit ( factory ) ;
19996: LD_ADDR_VAR 0 1
20000: PUSH
20001: LD_VAR 0 1
20005: PPUSH
20006: CALL_OW 310
20010: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20011: LD_VAR 0 1
20015: PPUSH
20016: CALL_OW 266
20020: PUSH
20021: LD_INT 3
20023: NONEQUAL
20024: IFFALSE 20028
// exit ;
20026: GO 20130
// if HexInfo ( x , y ) = factory then
20028: LD_VAR 0 2
20032: PPUSH
20033: LD_VAR 0 3
20037: PPUSH
20038: CALL_OW 428
20042: PUSH
20043: LD_VAR 0 1
20047: EQUAL
20048: IFFALSE 20075
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20050: LD_ADDR_EXP 83
20054: PUSH
20055: LD_EXP 83
20059: PPUSH
20060: LD_VAR 0 1
20064: PPUSH
20065: LD_INT 0
20067: PPUSH
20068: CALL_OW 1
20072: ST_TO_ADDR
20073: GO 20126
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20075: LD_ADDR_EXP 83
20079: PUSH
20080: LD_EXP 83
20084: PPUSH
20085: LD_VAR 0 1
20089: PPUSH
20090: LD_VAR 0 1
20094: PPUSH
20095: CALL_OW 255
20099: PUSH
20100: LD_VAR 0 1
20104: PUSH
20105: LD_VAR 0 2
20109: PUSH
20110: LD_VAR 0 3
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: PPUSH
20121: CALL_OW 1
20125: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20126: CALL 20135 0 0
// end ;
20130: LD_VAR 0 4
20134: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20135: LD_INT 0
20137: PPUSH
20138: PPUSH
20139: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20140: LD_STRING resetFactoryWaypoint();
20142: PPUSH
20143: CALL_OW 559
// if factoryWaypoints then
20147: LD_EXP 83
20151: IFFALSE 20277
// begin list := PrepareArray ( factoryWaypoints ) ;
20153: LD_ADDR_VAR 0 3
20157: PUSH
20158: LD_EXP 83
20162: PPUSH
20163: CALL 66968 0 1
20167: ST_TO_ADDR
// for i := 1 to list do
20168: LD_ADDR_VAR 0 2
20172: PUSH
20173: DOUBLE
20174: LD_INT 1
20176: DEC
20177: ST_TO_ADDR
20178: LD_VAR 0 3
20182: PUSH
20183: FOR_TO
20184: IFFALSE 20275
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20186: LD_STRING setFactoryWaypointXY(
20188: PUSH
20189: LD_VAR 0 3
20193: PUSH
20194: LD_VAR 0 2
20198: ARRAY
20199: PUSH
20200: LD_INT 1
20202: ARRAY
20203: STR
20204: PUSH
20205: LD_STRING ,
20207: STR
20208: PUSH
20209: LD_VAR 0 3
20213: PUSH
20214: LD_VAR 0 2
20218: ARRAY
20219: PUSH
20220: LD_INT 2
20222: ARRAY
20223: STR
20224: PUSH
20225: LD_STRING ,
20227: STR
20228: PUSH
20229: LD_VAR 0 3
20233: PUSH
20234: LD_VAR 0 2
20238: ARRAY
20239: PUSH
20240: LD_INT 3
20242: ARRAY
20243: STR
20244: PUSH
20245: LD_STRING ,
20247: STR
20248: PUSH
20249: LD_VAR 0 3
20253: PUSH
20254: LD_VAR 0 2
20258: ARRAY
20259: PUSH
20260: LD_INT 4
20262: ARRAY
20263: STR
20264: PUSH
20265: LD_STRING )
20267: STR
20268: PPUSH
20269: CALL_OW 559
20273: GO 20183
20275: POP
20276: POP
// end ; end ;
20277: LD_VAR 0 1
20281: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20282: LD_INT 0
20284: PPUSH
// if HexInfo ( x , y ) = warehouse then
20285: LD_VAR 0 2
20289: PPUSH
20290: LD_VAR 0 3
20294: PPUSH
20295: CALL_OW 428
20299: PUSH
20300: LD_VAR 0 1
20304: EQUAL
20305: IFFALSE 20332
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20307: LD_ADDR_EXP 84
20311: PUSH
20312: LD_EXP 84
20316: PPUSH
20317: LD_VAR 0 1
20321: PPUSH
20322: LD_INT 0
20324: PPUSH
20325: CALL_OW 1
20329: ST_TO_ADDR
20330: GO 20383
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20332: LD_ADDR_EXP 84
20336: PUSH
20337: LD_EXP 84
20341: PPUSH
20342: LD_VAR 0 1
20346: PPUSH
20347: LD_VAR 0 1
20351: PPUSH
20352: CALL_OW 255
20356: PUSH
20357: LD_VAR 0 1
20361: PUSH
20362: LD_VAR 0 2
20366: PUSH
20367: LD_VAR 0 3
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: PPUSH
20378: CALL_OW 1
20382: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20383: CALL 20392 0 0
// end ;
20387: LD_VAR 0 4
20391: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20392: LD_INT 0
20394: PPUSH
20395: PPUSH
20396: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20397: LD_STRING resetWarehouseGatheringPoints();
20399: PPUSH
20400: CALL_OW 559
// if warehouseGatheringPoints then
20404: LD_EXP 84
20408: IFFALSE 20534
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20410: LD_ADDR_VAR 0 3
20414: PUSH
20415: LD_EXP 84
20419: PPUSH
20420: CALL 66968 0 1
20424: ST_TO_ADDR
// for i := 1 to list do
20425: LD_ADDR_VAR 0 2
20429: PUSH
20430: DOUBLE
20431: LD_INT 1
20433: DEC
20434: ST_TO_ADDR
20435: LD_VAR 0 3
20439: PUSH
20440: FOR_TO
20441: IFFALSE 20532
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20443: LD_STRING setWarehouseGatheringPointXY(
20445: PUSH
20446: LD_VAR 0 3
20450: PUSH
20451: LD_VAR 0 2
20455: ARRAY
20456: PUSH
20457: LD_INT 1
20459: ARRAY
20460: STR
20461: PUSH
20462: LD_STRING ,
20464: STR
20465: PUSH
20466: LD_VAR 0 3
20470: PUSH
20471: LD_VAR 0 2
20475: ARRAY
20476: PUSH
20477: LD_INT 2
20479: ARRAY
20480: STR
20481: PUSH
20482: LD_STRING ,
20484: STR
20485: PUSH
20486: LD_VAR 0 3
20490: PUSH
20491: LD_VAR 0 2
20495: ARRAY
20496: PUSH
20497: LD_INT 3
20499: ARRAY
20500: STR
20501: PUSH
20502: LD_STRING ,
20504: STR
20505: PUSH
20506: LD_VAR 0 3
20510: PUSH
20511: LD_VAR 0 2
20515: ARRAY
20516: PUSH
20517: LD_INT 4
20519: ARRAY
20520: STR
20521: PUSH
20522: LD_STRING )
20524: STR
20525: PPUSH
20526: CALL_OW 559
20530: GO 20440
20532: POP
20533: POP
// end ; end ;
20534: LD_VAR 0 1
20538: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20539: LD_EXP 84
20543: IFFALSE 21228
20545: GO 20547
20547: DISABLE
20548: LD_INT 0
20550: PPUSH
20551: PPUSH
20552: PPUSH
20553: PPUSH
20554: PPUSH
20555: PPUSH
20556: PPUSH
20557: PPUSH
20558: PPUSH
// begin enable ;
20559: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: LD_EXP 84
20569: PPUSH
20570: CALL 66968 0 1
20574: ST_TO_ADDR
// if not list then
20575: LD_VAR 0 3
20579: NOT
20580: IFFALSE 20584
// exit ;
20582: GO 21228
// for i := 1 to list do
20584: LD_ADDR_VAR 0 1
20588: PUSH
20589: DOUBLE
20590: LD_INT 1
20592: DEC
20593: ST_TO_ADDR
20594: LD_VAR 0 3
20598: PUSH
20599: FOR_TO
20600: IFFALSE 21226
// begin depot := list [ i ] [ 2 ] ;
20602: LD_ADDR_VAR 0 8
20606: PUSH
20607: LD_VAR 0 3
20611: PUSH
20612: LD_VAR 0 1
20616: ARRAY
20617: PUSH
20618: LD_INT 2
20620: ARRAY
20621: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20622: LD_ADDR_VAR 0 5
20626: PUSH
20627: LD_VAR 0 3
20631: PUSH
20632: LD_VAR 0 1
20636: ARRAY
20637: PUSH
20638: LD_INT 1
20640: ARRAY
20641: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20642: LD_VAR 0 8
20646: PPUSH
20647: CALL_OW 301
20651: PUSH
20652: LD_VAR 0 5
20656: PUSH
20657: LD_VAR 0 8
20661: PPUSH
20662: CALL_OW 255
20666: NONEQUAL
20667: OR
20668: IFFALSE 20697
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20670: LD_ADDR_EXP 84
20674: PUSH
20675: LD_EXP 84
20679: PPUSH
20680: LD_VAR 0 8
20684: PPUSH
20685: LD_INT 0
20687: PPUSH
20688: CALL_OW 1
20692: ST_TO_ADDR
// exit ;
20693: POP
20694: POP
20695: GO 21228
// end ; x := list [ i ] [ 3 ] ;
20697: LD_ADDR_VAR 0 6
20701: PUSH
20702: LD_VAR 0 3
20706: PUSH
20707: LD_VAR 0 1
20711: ARRAY
20712: PUSH
20713: LD_INT 3
20715: ARRAY
20716: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20717: LD_ADDR_VAR 0 7
20721: PUSH
20722: LD_VAR 0 3
20726: PUSH
20727: LD_VAR 0 1
20731: ARRAY
20732: PUSH
20733: LD_INT 4
20735: ARRAY
20736: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20737: LD_ADDR_VAR 0 9
20741: PUSH
20742: LD_VAR 0 6
20746: PPUSH
20747: LD_VAR 0 7
20751: PPUSH
20752: LD_INT 16
20754: PPUSH
20755: CALL 65556 0 3
20759: ST_TO_ADDR
// if not cratesNearbyPoint then
20760: LD_VAR 0 9
20764: NOT
20765: IFFALSE 20771
// exit ;
20767: POP
20768: POP
20769: GO 21228
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20771: LD_ADDR_VAR 0 4
20775: PUSH
20776: LD_INT 22
20778: PUSH
20779: LD_VAR 0 5
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 3
20790: PUSH
20791: LD_INT 60
20793: PUSH
20794: EMPTY
20795: LIST
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 91
20803: PUSH
20804: LD_VAR 0 8
20808: PUSH
20809: LD_INT 6
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 2
20819: PUSH
20820: LD_INT 25
20822: PUSH
20823: LD_INT 2
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 25
20832: PUSH
20833: LD_INT 16
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: LIST
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: PPUSH
20851: CALL_OW 69
20855: PUSH
20856: LD_VAR 0 8
20860: PPUSH
20861: CALL_OW 313
20865: PPUSH
20866: LD_INT 3
20868: PUSH
20869: LD_INT 60
20871: PUSH
20872: EMPTY
20873: LIST
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 2
20881: PUSH
20882: LD_INT 25
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 25
20894: PUSH
20895: LD_INT 16
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: LIST
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PPUSH
20911: CALL_OW 72
20915: UNION
20916: ST_TO_ADDR
// if tmp then
20917: LD_VAR 0 4
20921: IFFALSE 21001
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20923: LD_ADDR_VAR 0 4
20927: PUSH
20928: LD_VAR 0 4
20932: PPUSH
20933: LD_INT 3
20935: PPUSH
20936: CALL 63525 0 2
20940: ST_TO_ADDR
// for j in tmp do
20941: LD_ADDR_VAR 0 2
20945: PUSH
20946: LD_VAR 0 4
20950: PUSH
20951: FOR_IN
20952: IFFALSE 20995
// begin if IsInUnit ( j ) then
20954: LD_VAR 0 2
20958: PPUSH
20959: CALL_OW 310
20963: IFFALSE 20974
// ComExit ( j ) ;
20965: LD_VAR 0 2
20969: PPUSH
20970: CALL 63608 0 1
// AddComCollect ( j , x , y ) ;
20974: LD_VAR 0 2
20978: PPUSH
20979: LD_VAR 0 6
20983: PPUSH
20984: LD_VAR 0 7
20988: PPUSH
20989: CALL_OW 177
// end ;
20993: GO 20951
20995: POP
20996: POP
// exit ;
20997: POP
20998: POP
20999: GO 21228
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21001: LD_ADDR_VAR 0 4
21005: PUSH
21006: LD_INT 22
21008: PUSH
21009: LD_VAR 0 5
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 91
21020: PUSH
21021: LD_VAR 0 8
21025: PUSH
21026: LD_INT 8
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 2
21036: PUSH
21037: LD_INT 34
21039: PUSH
21040: LD_INT 12
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 34
21049: PUSH
21050: LD_INT 51
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 34
21059: PUSH
21060: LD_INT 32
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 34
21069: PUSH
21070: LD_INT 89
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: PPUSH
21089: CALL_OW 69
21093: ST_TO_ADDR
// if tmp then
21094: LD_VAR 0 4
21098: IFFALSE 21224
// begin for j in tmp do
21100: LD_ADDR_VAR 0 2
21104: PUSH
21105: LD_VAR 0 4
21109: PUSH
21110: FOR_IN
21111: IFFALSE 21222
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21113: LD_VAR 0 2
21117: PPUSH
21118: CALL_OW 262
21122: PUSH
21123: LD_INT 3
21125: EQUAL
21126: PUSH
21127: LD_VAR 0 2
21131: PPUSH
21132: CALL_OW 261
21136: PUSH
21137: LD_INT 20
21139: GREATER
21140: OR
21141: PUSH
21142: LD_VAR 0 2
21146: PPUSH
21147: CALL_OW 314
21151: NOT
21152: AND
21153: PUSH
21154: LD_VAR 0 2
21158: PPUSH
21159: CALL_OW 263
21163: PUSH
21164: LD_INT 1
21166: NONEQUAL
21167: PUSH
21168: LD_VAR 0 2
21172: PPUSH
21173: CALL_OW 311
21177: OR
21178: AND
21179: IFFALSE 21220
// begin ComCollect ( j , x , y ) ;
21181: LD_VAR 0 2
21185: PPUSH
21186: LD_VAR 0 6
21190: PPUSH
21191: LD_VAR 0 7
21195: PPUSH
21196: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21200: LD_VAR 0 2
21204: PPUSH
21205: LD_VAR 0 8
21209: PPUSH
21210: CALL_OW 172
// exit ;
21214: POP
21215: POP
21216: POP
21217: POP
21218: GO 21228
// end ;
21220: GO 21110
21222: POP
21223: POP
// end ; end ;
21224: GO 20599
21226: POP
21227: POP
// end ; end_of_file
21228: PPOPN 9
21230: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21231: LD_INT 0
21233: PPUSH
21234: PPUSH
21235: PPUSH
21236: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21237: LD_VAR 0 1
21241: PPUSH
21242: CALL_OW 264
21246: PUSH
21247: LD_INT 91
21249: EQUAL
21250: IFFALSE 21322
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21252: LD_INT 68
21254: PPUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL_OW 255
21264: PPUSH
21265: CALL_OW 321
21269: PUSH
21270: LD_INT 2
21272: EQUAL
21273: IFFALSE 21285
// eff := 70 else
21275: LD_ADDR_VAR 0 4
21279: PUSH
21280: LD_INT 70
21282: ST_TO_ADDR
21283: GO 21293
// eff := 30 ;
21285: LD_ADDR_VAR 0 4
21289: PUSH
21290: LD_INT 30
21292: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21293: LD_VAR 0 1
21297: PPUSH
21298: CALL_OW 250
21302: PPUSH
21303: LD_VAR 0 1
21307: PPUSH
21308: CALL_OW 251
21312: PPUSH
21313: LD_VAR 0 4
21317: PPUSH
21318: CALL_OW 495
// end ; end ;
21322: LD_VAR 0 2
21326: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21327: LD_INT 0
21329: PPUSH
// end ;
21330: LD_VAR 0 4
21334: RET
// export function SOS_Command ( cmd ) ; begin
21335: LD_INT 0
21337: PPUSH
// end ;
21338: LD_VAR 0 2
21342: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21343: LD_INT 0
21345: PPUSH
// end ;
21346: LD_VAR 0 6
21350: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21351: LD_INT 0
21353: PPUSH
21354: PPUSH
// if not vehicle or not factory then
21355: LD_VAR 0 1
21359: NOT
21360: PUSH
21361: LD_VAR 0 2
21365: NOT
21366: OR
21367: IFFALSE 21371
// exit ;
21369: GO 21602
// if factoryWaypoints >= factory then
21371: LD_EXP 83
21375: PUSH
21376: LD_VAR 0 2
21380: GREATEREQUAL
21381: IFFALSE 21602
// if factoryWaypoints [ factory ] then
21383: LD_EXP 83
21387: PUSH
21388: LD_VAR 0 2
21392: ARRAY
21393: IFFALSE 21602
// begin if GetControl ( vehicle ) = control_manual then
21395: LD_VAR 0 1
21399: PPUSH
21400: CALL_OW 263
21404: PUSH
21405: LD_INT 1
21407: EQUAL
21408: IFFALSE 21489
// begin driver := IsDrivenBy ( vehicle ) ;
21410: LD_ADDR_VAR 0 4
21414: PUSH
21415: LD_VAR 0 1
21419: PPUSH
21420: CALL_OW 311
21424: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21425: LD_VAR 0 4
21429: PPUSH
21430: LD_EXP 83
21434: PUSH
21435: LD_VAR 0 2
21439: ARRAY
21440: PUSH
21441: LD_INT 3
21443: ARRAY
21444: PPUSH
21445: LD_EXP 83
21449: PUSH
21450: LD_VAR 0 2
21454: ARRAY
21455: PUSH
21456: LD_INT 4
21458: ARRAY
21459: PPUSH
21460: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21464: LD_VAR 0 4
21468: PPUSH
21469: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21473: LD_VAR 0 4
21477: PPUSH
21478: LD_VAR 0 2
21482: PPUSH
21483: CALL_OW 180
// end else
21487: GO 21602
// if GetControl ( vehicle ) = control_remote then
21489: LD_VAR 0 1
21493: PPUSH
21494: CALL_OW 263
21498: PUSH
21499: LD_INT 2
21501: EQUAL
21502: IFFALSE 21563
// begin wait ( 0 0$2 ) ;
21504: LD_INT 70
21506: PPUSH
21507: CALL_OW 67
// if Connect ( vehicle ) then
21511: LD_VAR 0 1
21515: PPUSH
21516: CALL 33848 0 1
21520: IFFALSE 21561
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21522: LD_VAR 0 1
21526: PPUSH
21527: LD_EXP 83
21531: PUSH
21532: LD_VAR 0 2
21536: ARRAY
21537: PUSH
21538: LD_INT 3
21540: ARRAY
21541: PPUSH
21542: LD_EXP 83
21546: PUSH
21547: LD_VAR 0 2
21551: ARRAY
21552: PUSH
21553: LD_INT 4
21555: ARRAY
21556: PPUSH
21557: CALL_OW 171
// end else
21561: GO 21602
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21563: LD_VAR 0 1
21567: PPUSH
21568: LD_EXP 83
21572: PUSH
21573: LD_VAR 0 2
21577: ARRAY
21578: PUSH
21579: LD_INT 3
21581: ARRAY
21582: PPUSH
21583: LD_EXP 83
21587: PUSH
21588: LD_VAR 0 2
21592: ARRAY
21593: PUSH
21594: LD_INT 4
21596: ARRAY
21597: PPUSH
21598: CALL_OW 171
// end ; end ;
21602: LD_VAR 0 3
21606: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21607: LD_INT 0
21609: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21610: LD_VAR 0 1
21614: PUSH
21615: LD_INT 250
21617: EQUAL
21618: PUSH
21619: LD_VAR 0 2
21623: PPUSH
21624: CALL_OW 264
21628: PUSH
21629: LD_INT 81
21631: EQUAL
21632: AND
21633: IFFALSE 21654
// MinerPlaceMine ( unit , x , y ) ;
21635: LD_VAR 0 2
21639: PPUSH
21640: LD_VAR 0 4
21644: PPUSH
21645: LD_VAR 0 5
21649: PPUSH
21650: CALL 24039 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21654: LD_VAR 0 1
21658: PUSH
21659: LD_INT 251
21661: EQUAL
21662: PUSH
21663: LD_VAR 0 2
21667: PPUSH
21668: CALL_OW 264
21672: PUSH
21673: LD_INT 81
21675: EQUAL
21676: AND
21677: IFFALSE 21698
// MinerDetonateMine ( unit , x , y ) ;
21679: LD_VAR 0 2
21683: PPUSH
21684: LD_VAR 0 4
21688: PPUSH
21689: LD_VAR 0 5
21693: PPUSH
21694: CALL 24314 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21698: LD_VAR 0 1
21702: PUSH
21703: LD_INT 252
21705: EQUAL
21706: PUSH
21707: LD_VAR 0 2
21711: PPUSH
21712: CALL_OW 264
21716: PUSH
21717: LD_INT 81
21719: EQUAL
21720: AND
21721: IFFALSE 21742
// MinerCreateMinefield ( unit , x , y ) ;
21723: LD_VAR 0 2
21727: PPUSH
21728: LD_VAR 0 4
21732: PPUSH
21733: LD_VAR 0 5
21737: PPUSH
21738: CALL 24731 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21742: LD_VAR 0 1
21746: PUSH
21747: LD_INT 253
21749: EQUAL
21750: PUSH
21751: LD_VAR 0 2
21755: PPUSH
21756: CALL_OW 257
21760: PUSH
21761: LD_INT 5
21763: EQUAL
21764: AND
21765: IFFALSE 21786
// ComBinocular ( unit , x , y ) ;
21767: LD_VAR 0 2
21771: PPUSH
21772: LD_VAR 0 4
21776: PPUSH
21777: LD_VAR 0 5
21781: PPUSH
21782: CALL 25100 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21786: LD_VAR 0 1
21790: PUSH
21791: LD_INT 254
21793: EQUAL
21794: PUSH
21795: LD_VAR 0 2
21799: PPUSH
21800: CALL_OW 264
21804: PUSH
21805: LD_INT 99
21807: EQUAL
21808: AND
21809: PUSH
21810: LD_VAR 0 3
21814: PPUSH
21815: CALL_OW 263
21819: PUSH
21820: LD_INT 3
21822: EQUAL
21823: AND
21824: IFFALSE 21840
// HackDestroyVehicle ( unit , selectedUnit ) ;
21826: LD_VAR 0 2
21830: PPUSH
21831: LD_VAR 0 3
21835: PPUSH
21836: CALL 23403 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21840: LD_VAR 0 1
21844: PUSH
21845: LD_INT 255
21847: EQUAL
21848: PUSH
21849: LD_VAR 0 2
21853: PPUSH
21854: CALL_OW 264
21858: PUSH
21859: LD_INT 14
21861: PUSH
21862: LD_INT 53
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: IN
21869: AND
21870: PUSH
21871: LD_VAR 0 4
21875: PPUSH
21876: LD_VAR 0 5
21880: PPUSH
21881: CALL_OW 488
21885: AND
21886: IFFALSE 21910
// CutTreeXYR ( unit , x , y , 12 ) ;
21888: LD_VAR 0 2
21892: PPUSH
21893: LD_VAR 0 4
21897: PPUSH
21898: LD_VAR 0 5
21902: PPUSH
21903: LD_INT 12
21905: PPUSH
21906: CALL 21973 0 4
// if cmd = 256 then
21910: LD_VAR 0 1
21914: PUSH
21915: LD_INT 256
21917: EQUAL
21918: IFFALSE 21939
// SetFactoryWaypoint ( unit , x , y ) ;
21920: LD_VAR 0 2
21924: PPUSH
21925: LD_VAR 0 4
21929: PPUSH
21930: LD_VAR 0 5
21934: PPUSH
21935: CALL 19920 0 3
// if cmd = 257 then
21939: LD_VAR 0 1
21943: PUSH
21944: LD_INT 257
21946: EQUAL
21947: IFFALSE 21968
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21949: LD_VAR 0 2
21953: PPUSH
21954: LD_VAR 0 4
21958: PPUSH
21959: LD_VAR 0 5
21963: PPUSH
21964: CALL 20282 0 3
// end ;
21968: LD_VAR 0 6
21972: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21973: LD_INT 0
21975: PPUSH
21976: PPUSH
21977: PPUSH
21978: PPUSH
21979: PPUSH
21980: PPUSH
21981: PPUSH
21982: PPUSH
21983: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21984: LD_VAR 0 1
21988: NOT
21989: PUSH
21990: LD_VAR 0 2
21994: PPUSH
21995: LD_VAR 0 3
21999: PPUSH
22000: CALL_OW 488
22004: NOT
22005: OR
22006: PUSH
22007: LD_VAR 0 4
22011: NOT
22012: OR
22013: IFFALSE 22017
// exit ;
22015: GO 22357
// list := [ ] ;
22017: LD_ADDR_VAR 0 13
22021: PUSH
22022: EMPTY
22023: ST_TO_ADDR
// if x - r < 0 then
22024: LD_VAR 0 2
22028: PUSH
22029: LD_VAR 0 4
22033: MINUS
22034: PUSH
22035: LD_INT 0
22037: LESS
22038: IFFALSE 22050
// min_x := 0 else
22040: LD_ADDR_VAR 0 7
22044: PUSH
22045: LD_INT 0
22047: ST_TO_ADDR
22048: GO 22066
// min_x := x - r ;
22050: LD_ADDR_VAR 0 7
22054: PUSH
22055: LD_VAR 0 2
22059: PUSH
22060: LD_VAR 0 4
22064: MINUS
22065: ST_TO_ADDR
// if y - r < 0 then
22066: LD_VAR 0 3
22070: PUSH
22071: LD_VAR 0 4
22075: MINUS
22076: PUSH
22077: LD_INT 0
22079: LESS
22080: IFFALSE 22092
// min_y := 0 else
22082: LD_ADDR_VAR 0 8
22086: PUSH
22087: LD_INT 0
22089: ST_TO_ADDR
22090: GO 22108
// min_y := y - r ;
22092: LD_ADDR_VAR 0 8
22096: PUSH
22097: LD_VAR 0 3
22101: PUSH
22102: LD_VAR 0 4
22106: MINUS
22107: ST_TO_ADDR
// max_x := x + r ;
22108: LD_ADDR_VAR 0 9
22112: PUSH
22113: LD_VAR 0 2
22117: PUSH
22118: LD_VAR 0 4
22122: PLUS
22123: ST_TO_ADDR
// max_y := y + r ;
22124: LD_ADDR_VAR 0 10
22128: PUSH
22129: LD_VAR 0 3
22133: PUSH
22134: LD_VAR 0 4
22138: PLUS
22139: ST_TO_ADDR
// for _x = min_x to max_x do
22140: LD_ADDR_VAR 0 11
22144: PUSH
22145: DOUBLE
22146: LD_VAR 0 7
22150: DEC
22151: ST_TO_ADDR
22152: LD_VAR 0 9
22156: PUSH
22157: FOR_TO
22158: IFFALSE 22275
// for _y = min_y to max_y do
22160: LD_ADDR_VAR 0 12
22164: PUSH
22165: DOUBLE
22166: LD_VAR 0 8
22170: DEC
22171: ST_TO_ADDR
22172: LD_VAR 0 10
22176: PUSH
22177: FOR_TO
22178: IFFALSE 22271
// begin if not ValidHex ( _x , _y ) then
22180: LD_VAR 0 11
22184: PPUSH
22185: LD_VAR 0 12
22189: PPUSH
22190: CALL_OW 488
22194: NOT
22195: IFFALSE 22199
// continue ;
22197: GO 22177
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22199: LD_VAR 0 11
22203: PPUSH
22204: LD_VAR 0 12
22208: PPUSH
22209: CALL_OW 351
22213: PUSH
22214: LD_VAR 0 11
22218: PPUSH
22219: LD_VAR 0 12
22223: PPUSH
22224: CALL_OW 554
22228: AND
22229: IFFALSE 22269
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22231: LD_ADDR_VAR 0 13
22235: PUSH
22236: LD_VAR 0 13
22240: PPUSH
22241: LD_VAR 0 13
22245: PUSH
22246: LD_INT 1
22248: PLUS
22249: PPUSH
22250: LD_VAR 0 11
22254: PUSH
22255: LD_VAR 0 12
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PPUSH
22264: CALL_OW 2
22268: ST_TO_ADDR
// end ;
22269: GO 22177
22271: POP
22272: POP
22273: GO 22157
22275: POP
22276: POP
// if not list then
22277: LD_VAR 0 13
22281: NOT
22282: IFFALSE 22286
// exit ;
22284: GO 22357
// for i in list do
22286: LD_ADDR_VAR 0 6
22290: PUSH
22291: LD_VAR 0 13
22295: PUSH
22296: FOR_IN
22297: IFFALSE 22355
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22299: LD_VAR 0 1
22303: PPUSH
22304: LD_STRING M
22306: PUSH
22307: LD_VAR 0 6
22311: PUSH
22312: LD_INT 1
22314: ARRAY
22315: PUSH
22316: LD_VAR 0 6
22320: PUSH
22321: LD_INT 2
22323: ARRAY
22324: PUSH
22325: LD_INT 0
22327: PUSH
22328: LD_INT 0
22330: PUSH
22331: LD_INT 0
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: PUSH
22346: EMPTY
22347: LIST
22348: PPUSH
22349: CALL_OW 447
22353: GO 22296
22355: POP
22356: POP
// end ;
22357: LD_VAR 0 5
22361: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22362: LD_EXP 86
22366: NOT
22367: IFFALSE 22417
22369: GO 22371
22371: DISABLE
// begin initHack := true ;
22372: LD_ADDR_EXP 86
22376: PUSH
22377: LD_INT 1
22379: ST_TO_ADDR
// hackTanks := [ ] ;
22380: LD_ADDR_EXP 87
22384: PUSH
22385: EMPTY
22386: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22387: LD_ADDR_EXP 88
22391: PUSH
22392: EMPTY
22393: ST_TO_ADDR
// hackLimit := 3 ;
22394: LD_ADDR_EXP 89
22398: PUSH
22399: LD_INT 3
22401: ST_TO_ADDR
// hackDist := 12 ;
22402: LD_ADDR_EXP 90
22406: PUSH
22407: LD_INT 12
22409: ST_TO_ADDR
// hackCounter := [ ] ;
22410: LD_ADDR_EXP 91
22414: PUSH
22415: EMPTY
22416: ST_TO_ADDR
// end ;
22417: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22418: LD_EXP 86
22422: PUSH
22423: LD_INT 34
22425: PUSH
22426: LD_INT 99
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PPUSH
22433: CALL_OW 69
22437: AND
22438: IFFALSE 22691
22440: GO 22442
22442: DISABLE
22443: LD_INT 0
22445: PPUSH
22446: PPUSH
// begin enable ;
22447: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22448: LD_ADDR_VAR 0 1
22452: PUSH
22453: LD_INT 34
22455: PUSH
22456: LD_INT 99
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PPUSH
22463: CALL_OW 69
22467: PUSH
22468: FOR_IN
22469: IFFALSE 22689
// begin if not i in hackTanks then
22471: LD_VAR 0 1
22475: PUSH
22476: LD_EXP 87
22480: IN
22481: NOT
22482: IFFALSE 22565
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22484: LD_ADDR_EXP 87
22488: PUSH
22489: LD_EXP 87
22493: PPUSH
22494: LD_EXP 87
22498: PUSH
22499: LD_INT 1
22501: PLUS
22502: PPUSH
22503: LD_VAR 0 1
22507: PPUSH
22508: CALL_OW 1
22512: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22513: LD_ADDR_EXP 88
22517: PUSH
22518: LD_EXP 88
22522: PPUSH
22523: LD_EXP 88
22527: PUSH
22528: LD_INT 1
22530: PLUS
22531: PPUSH
22532: EMPTY
22533: PPUSH
22534: CALL_OW 1
22538: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22539: LD_ADDR_EXP 91
22543: PUSH
22544: LD_EXP 91
22548: PPUSH
22549: LD_EXP 91
22553: PUSH
22554: LD_INT 1
22556: PLUS
22557: PPUSH
22558: EMPTY
22559: PPUSH
22560: CALL_OW 1
22564: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22565: LD_VAR 0 1
22569: PPUSH
22570: CALL_OW 302
22574: NOT
22575: IFFALSE 22588
// begin HackUnlinkAll ( i ) ;
22577: LD_VAR 0 1
22581: PPUSH
22582: CALL 22694 0 1
// continue ;
22586: GO 22468
// end ; HackCheckCapturedStatus ( i ) ;
22588: LD_VAR 0 1
22592: PPUSH
22593: CALL 23137 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22597: LD_ADDR_VAR 0 2
22601: PUSH
22602: LD_INT 81
22604: PUSH
22605: LD_VAR 0 1
22609: PPUSH
22610: CALL_OW 255
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 33
22621: PUSH
22622: LD_INT 3
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 91
22631: PUSH
22632: LD_VAR 0 1
22636: PUSH
22637: LD_EXP 90
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 50
22649: PUSH
22650: EMPTY
22651: LIST
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: PPUSH
22659: CALL_OW 69
22663: ST_TO_ADDR
// if not tmp then
22664: LD_VAR 0 2
22668: NOT
22669: IFFALSE 22673
// continue ;
22671: GO 22468
// HackLink ( i , tmp ) ;
22673: LD_VAR 0 1
22677: PPUSH
22678: LD_VAR 0 2
22682: PPUSH
22683: CALL 22830 0 2
// end ;
22687: GO 22468
22689: POP
22690: POP
// end ;
22691: PPOPN 2
22693: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22694: LD_INT 0
22696: PPUSH
22697: PPUSH
22698: PPUSH
// if not hack in hackTanks then
22699: LD_VAR 0 1
22703: PUSH
22704: LD_EXP 87
22708: IN
22709: NOT
22710: IFFALSE 22714
// exit ;
22712: GO 22825
// index := GetElementIndex ( hackTanks , hack ) ;
22714: LD_ADDR_VAR 0 4
22718: PUSH
22719: LD_EXP 87
22723: PPUSH
22724: LD_VAR 0 1
22728: PPUSH
22729: CALL 30664 0 2
22733: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22734: LD_EXP 88
22738: PUSH
22739: LD_VAR 0 4
22743: ARRAY
22744: IFFALSE 22825
// begin for i in hackTanksCaptured [ index ] do
22746: LD_ADDR_VAR 0 3
22750: PUSH
22751: LD_EXP 88
22755: PUSH
22756: LD_VAR 0 4
22760: ARRAY
22761: PUSH
22762: FOR_IN
22763: IFFALSE 22789
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22765: LD_VAR 0 3
22769: PUSH
22770: LD_INT 1
22772: ARRAY
22773: PPUSH
22774: LD_VAR 0 3
22778: PUSH
22779: LD_INT 2
22781: ARRAY
22782: PPUSH
22783: CALL_OW 235
22787: GO 22762
22789: POP
22790: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22791: LD_ADDR_EXP 88
22795: PUSH
22796: LD_EXP 88
22800: PPUSH
22801: LD_VAR 0 4
22805: PPUSH
22806: EMPTY
22807: PPUSH
22808: CALL_OW 1
22812: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22813: LD_VAR 0 1
22817: PPUSH
22818: LD_INT 0
22820: PPUSH
22821: CALL_OW 505
// end ; end ;
22825: LD_VAR 0 2
22829: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22830: LD_INT 0
22832: PPUSH
22833: PPUSH
22834: PPUSH
// if not hack in hackTanks or not vehicles then
22835: LD_VAR 0 1
22839: PUSH
22840: LD_EXP 87
22844: IN
22845: NOT
22846: PUSH
22847: LD_VAR 0 2
22851: NOT
22852: OR
22853: IFFALSE 22857
// exit ;
22855: GO 23132
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22857: LD_ADDR_VAR 0 2
22861: PUSH
22862: LD_VAR 0 1
22866: PPUSH
22867: LD_VAR 0 2
22871: PPUSH
22872: LD_INT 1
22874: PPUSH
22875: LD_INT 1
22877: PPUSH
22878: CALL 31314 0 4
22882: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22883: LD_ADDR_VAR 0 5
22887: PUSH
22888: LD_EXP 87
22892: PPUSH
22893: LD_VAR 0 1
22897: PPUSH
22898: CALL 30664 0 2
22902: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22903: LD_EXP 88
22907: PUSH
22908: LD_VAR 0 5
22912: ARRAY
22913: PUSH
22914: LD_EXP 89
22918: LESS
22919: IFFALSE 23108
// begin for i := 1 to vehicles do
22921: LD_ADDR_VAR 0 4
22925: PUSH
22926: DOUBLE
22927: LD_INT 1
22929: DEC
22930: ST_TO_ADDR
22931: LD_VAR 0 2
22935: PUSH
22936: FOR_TO
22937: IFFALSE 23106
// begin if hackTanksCaptured [ index ] = hackLimit then
22939: LD_EXP 88
22943: PUSH
22944: LD_VAR 0 5
22948: ARRAY
22949: PUSH
22950: LD_EXP 89
22954: EQUAL
22955: IFFALSE 22959
// break ;
22957: GO 23106
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22959: LD_ADDR_EXP 91
22963: PUSH
22964: LD_EXP 91
22968: PPUSH
22969: LD_VAR 0 5
22973: PPUSH
22974: LD_EXP 91
22978: PUSH
22979: LD_VAR 0 5
22983: ARRAY
22984: PUSH
22985: LD_INT 1
22987: PLUS
22988: PPUSH
22989: CALL_OW 1
22993: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22994: LD_ADDR_EXP 88
22998: PUSH
22999: LD_EXP 88
23003: PPUSH
23004: LD_VAR 0 5
23008: PUSH
23009: LD_EXP 88
23013: PUSH
23014: LD_VAR 0 5
23018: ARRAY
23019: PUSH
23020: LD_INT 1
23022: PLUS
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PPUSH
23028: LD_VAR 0 2
23032: PUSH
23033: LD_VAR 0 4
23037: ARRAY
23038: PUSH
23039: LD_VAR 0 2
23043: PUSH
23044: LD_VAR 0 4
23048: ARRAY
23049: PPUSH
23050: CALL_OW 255
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PPUSH
23059: CALL 30879 0 3
23063: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23064: LD_VAR 0 2
23068: PUSH
23069: LD_VAR 0 4
23073: ARRAY
23074: PPUSH
23075: LD_VAR 0 1
23079: PPUSH
23080: CALL_OW 255
23084: PPUSH
23085: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23089: LD_VAR 0 2
23093: PUSH
23094: LD_VAR 0 4
23098: ARRAY
23099: PPUSH
23100: CALL_OW 141
// end ;
23104: GO 22936
23106: POP
23107: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23108: LD_VAR 0 1
23112: PPUSH
23113: LD_EXP 88
23117: PUSH
23118: LD_VAR 0 5
23122: ARRAY
23123: PUSH
23124: LD_INT 0
23126: PLUS
23127: PPUSH
23128: CALL_OW 505
// end ;
23132: LD_VAR 0 3
23136: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23137: LD_INT 0
23139: PPUSH
23140: PPUSH
23141: PPUSH
23142: PPUSH
// if not hack in hackTanks then
23143: LD_VAR 0 1
23147: PUSH
23148: LD_EXP 87
23152: IN
23153: NOT
23154: IFFALSE 23158
// exit ;
23156: GO 23398
// index := GetElementIndex ( hackTanks , hack ) ;
23158: LD_ADDR_VAR 0 4
23162: PUSH
23163: LD_EXP 87
23167: PPUSH
23168: LD_VAR 0 1
23172: PPUSH
23173: CALL 30664 0 2
23177: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23178: LD_ADDR_VAR 0 3
23182: PUSH
23183: DOUBLE
23184: LD_EXP 88
23188: PUSH
23189: LD_VAR 0 4
23193: ARRAY
23194: INC
23195: ST_TO_ADDR
23196: LD_INT 1
23198: PUSH
23199: FOR_DOWNTO
23200: IFFALSE 23372
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23202: LD_ADDR_VAR 0 5
23206: PUSH
23207: LD_EXP 88
23211: PUSH
23212: LD_VAR 0 4
23216: ARRAY
23217: PUSH
23218: LD_VAR 0 3
23222: ARRAY
23223: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23224: LD_VAR 0 5
23228: PUSH
23229: LD_INT 1
23231: ARRAY
23232: PPUSH
23233: CALL_OW 302
23237: NOT
23238: PUSH
23239: LD_VAR 0 5
23243: PUSH
23244: LD_INT 1
23246: ARRAY
23247: PPUSH
23248: CALL_OW 255
23252: PUSH
23253: LD_VAR 0 1
23257: PPUSH
23258: CALL_OW 255
23262: NONEQUAL
23263: OR
23264: IFFALSE 23370
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23266: LD_VAR 0 5
23270: PUSH
23271: LD_INT 1
23273: ARRAY
23274: PPUSH
23275: CALL_OW 305
23279: PUSH
23280: LD_VAR 0 5
23284: PUSH
23285: LD_INT 1
23287: ARRAY
23288: PPUSH
23289: CALL_OW 255
23293: PUSH
23294: LD_VAR 0 1
23298: PPUSH
23299: CALL_OW 255
23303: EQUAL
23304: AND
23305: IFFALSE 23329
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23307: LD_VAR 0 5
23311: PUSH
23312: LD_INT 1
23314: ARRAY
23315: PPUSH
23316: LD_VAR 0 5
23320: PUSH
23321: LD_INT 2
23323: ARRAY
23324: PPUSH
23325: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23329: LD_ADDR_EXP 88
23333: PUSH
23334: LD_EXP 88
23338: PPUSH
23339: LD_VAR 0 4
23343: PPUSH
23344: LD_EXP 88
23348: PUSH
23349: LD_VAR 0 4
23353: ARRAY
23354: PPUSH
23355: LD_VAR 0 3
23359: PPUSH
23360: CALL_OW 3
23364: PPUSH
23365: CALL_OW 1
23369: ST_TO_ADDR
// end ; end ;
23370: GO 23199
23372: POP
23373: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23374: LD_VAR 0 1
23378: PPUSH
23379: LD_EXP 88
23383: PUSH
23384: LD_VAR 0 4
23388: ARRAY
23389: PUSH
23390: LD_INT 0
23392: PLUS
23393: PPUSH
23394: CALL_OW 505
// end ;
23398: LD_VAR 0 2
23402: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23403: LD_INT 0
23405: PPUSH
23406: PPUSH
23407: PPUSH
23408: PPUSH
// if not hack in hackTanks then
23409: LD_VAR 0 1
23413: PUSH
23414: LD_EXP 87
23418: IN
23419: NOT
23420: IFFALSE 23424
// exit ;
23422: GO 23509
// index := GetElementIndex ( hackTanks , hack ) ;
23424: LD_ADDR_VAR 0 5
23428: PUSH
23429: LD_EXP 87
23433: PPUSH
23434: LD_VAR 0 1
23438: PPUSH
23439: CALL 30664 0 2
23443: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23444: LD_ADDR_VAR 0 4
23448: PUSH
23449: DOUBLE
23450: LD_INT 1
23452: DEC
23453: ST_TO_ADDR
23454: LD_EXP 88
23458: PUSH
23459: LD_VAR 0 5
23463: ARRAY
23464: PUSH
23465: FOR_TO
23466: IFFALSE 23507
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23468: LD_EXP 88
23472: PUSH
23473: LD_VAR 0 5
23477: ARRAY
23478: PUSH
23479: LD_VAR 0 4
23483: ARRAY
23484: PUSH
23485: LD_INT 1
23487: ARRAY
23488: PUSH
23489: LD_VAR 0 2
23493: EQUAL
23494: IFFALSE 23505
// KillUnit ( vehicle ) ;
23496: LD_VAR 0 2
23500: PPUSH
23501: CALL_OW 66
23505: GO 23465
23507: POP
23508: POP
// end ;
23509: LD_VAR 0 3
23513: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23514: LD_EXP 92
23518: NOT
23519: IFFALSE 23554
23521: GO 23523
23523: DISABLE
// begin initMiner := true ;
23524: LD_ADDR_EXP 92
23528: PUSH
23529: LD_INT 1
23531: ST_TO_ADDR
// minersList := [ ] ;
23532: LD_ADDR_EXP 93
23536: PUSH
23537: EMPTY
23538: ST_TO_ADDR
// minerMinesList := [ ] ;
23539: LD_ADDR_EXP 94
23543: PUSH
23544: EMPTY
23545: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23546: LD_ADDR_EXP 95
23550: PUSH
23551: LD_INT 5
23553: ST_TO_ADDR
// end ;
23554: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23555: LD_EXP 92
23559: PUSH
23560: LD_INT 34
23562: PUSH
23563: LD_INT 81
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PPUSH
23570: CALL_OW 69
23574: AND
23575: IFFALSE 24036
23577: GO 23579
23579: DISABLE
23580: LD_INT 0
23582: PPUSH
23583: PPUSH
23584: PPUSH
23585: PPUSH
// begin enable ;
23586: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23587: LD_ADDR_VAR 0 1
23591: PUSH
23592: LD_INT 34
23594: PUSH
23595: LD_INT 81
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PPUSH
23602: CALL_OW 69
23606: PUSH
23607: FOR_IN
23608: IFFALSE 23680
// begin if not i in minersList then
23610: LD_VAR 0 1
23614: PUSH
23615: LD_EXP 93
23619: IN
23620: NOT
23621: IFFALSE 23678
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23623: LD_ADDR_EXP 93
23627: PUSH
23628: LD_EXP 93
23632: PPUSH
23633: LD_EXP 93
23637: PUSH
23638: LD_INT 1
23640: PLUS
23641: PPUSH
23642: LD_VAR 0 1
23646: PPUSH
23647: CALL_OW 1
23651: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23652: LD_ADDR_EXP 94
23656: PUSH
23657: LD_EXP 94
23661: PPUSH
23662: LD_EXP 94
23666: PUSH
23667: LD_INT 1
23669: PLUS
23670: PPUSH
23671: EMPTY
23672: PPUSH
23673: CALL_OW 1
23677: ST_TO_ADDR
// end end ;
23678: GO 23607
23680: POP
23681: POP
// for i := minerMinesList downto 1 do
23682: LD_ADDR_VAR 0 1
23686: PUSH
23687: DOUBLE
23688: LD_EXP 94
23692: INC
23693: ST_TO_ADDR
23694: LD_INT 1
23696: PUSH
23697: FOR_DOWNTO
23698: IFFALSE 24034
// begin if IsLive ( minersList [ i ] ) then
23700: LD_EXP 93
23704: PUSH
23705: LD_VAR 0 1
23709: ARRAY
23710: PPUSH
23711: CALL_OW 300
23715: IFFALSE 23743
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23717: LD_EXP 93
23721: PUSH
23722: LD_VAR 0 1
23726: ARRAY
23727: PPUSH
23728: LD_EXP 94
23732: PUSH
23733: LD_VAR 0 1
23737: ARRAY
23738: PPUSH
23739: CALL_OW 505
// if not minerMinesList [ i ] then
23743: LD_EXP 94
23747: PUSH
23748: LD_VAR 0 1
23752: ARRAY
23753: NOT
23754: IFFALSE 23758
// continue ;
23756: GO 23697
// for j := minerMinesList [ i ] downto 1 do
23758: LD_ADDR_VAR 0 2
23762: PUSH
23763: DOUBLE
23764: LD_EXP 94
23768: PUSH
23769: LD_VAR 0 1
23773: ARRAY
23774: INC
23775: ST_TO_ADDR
23776: LD_INT 1
23778: PUSH
23779: FOR_DOWNTO
23780: IFFALSE 24030
// begin side := GetSide ( minersList [ i ] ) ;
23782: LD_ADDR_VAR 0 3
23786: PUSH
23787: LD_EXP 93
23791: PUSH
23792: LD_VAR 0 1
23796: ARRAY
23797: PPUSH
23798: CALL_OW 255
23802: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23803: LD_ADDR_VAR 0 4
23807: PUSH
23808: LD_EXP 94
23812: PUSH
23813: LD_VAR 0 1
23817: ARRAY
23818: PUSH
23819: LD_VAR 0 2
23823: ARRAY
23824: PUSH
23825: LD_INT 1
23827: ARRAY
23828: PPUSH
23829: LD_EXP 94
23833: PUSH
23834: LD_VAR 0 1
23838: ARRAY
23839: PUSH
23840: LD_VAR 0 2
23844: ARRAY
23845: PUSH
23846: LD_INT 2
23848: ARRAY
23849: PPUSH
23850: CALL_OW 428
23854: ST_TO_ADDR
// if not tmp then
23855: LD_VAR 0 4
23859: NOT
23860: IFFALSE 23864
// continue ;
23862: GO 23779
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23864: LD_VAR 0 4
23868: PUSH
23869: LD_INT 81
23871: PUSH
23872: LD_VAR 0 3
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PPUSH
23881: CALL_OW 69
23885: IN
23886: PUSH
23887: LD_EXP 94
23891: PUSH
23892: LD_VAR 0 1
23896: ARRAY
23897: PUSH
23898: LD_VAR 0 2
23902: ARRAY
23903: PUSH
23904: LD_INT 1
23906: ARRAY
23907: PPUSH
23908: LD_EXP 94
23912: PUSH
23913: LD_VAR 0 1
23917: ARRAY
23918: PUSH
23919: LD_VAR 0 2
23923: ARRAY
23924: PUSH
23925: LD_INT 2
23927: ARRAY
23928: PPUSH
23929: CALL_OW 458
23933: AND
23934: IFFALSE 24028
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23936: LD_EXP 94
23940: PUSH
23941: LD_VAR 0 1
23945: ARRAY
23946: PUSH
23947: LD_VAR 0 2
23951: ARRAY
23952: PUSH
23953: LD_INT 1
23955: ARRAY
23956: PPUSH
23957: LD_EXP 94
23961: PUSH
23962: LD_VAR 0 1
23966: ARRAY
23967: PUSH
23968: LD_VAR 0 2
23972: ARRAY
23973: PUSH
23974: LD_INT 2
23976: ARRAY
23977: PPUSH
23978: LD_VAR 0 3
23982: PPUSH
23983: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23987: LD_ADDR_EXP 94
23991: PUSH
23992: LD_EXP 94
23996: PPUSH
23997: LD_VAR 0 1
24001: PPUSH
24002: LD_EXP 94
24006: PUSH
24007: LD_VAR 0 1
24011: ARRAY
24012: PPUSH
24013: LD_VAR 0 2
24017: PPUSH
24018: CALL_OW 3
24022: PPUSH
24023: CALL_OW 1
24027: ST_TO_ADDR
// end ; end ;
24028: GO 23779
24030: POP
24031: POP
// end ;
24032: GO 23697
24034: POP
24035: POP
// end ;
24036: PPOPN 4
24038: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24039: LD_INT 0
24041: PPUSH
24042: PPUSH
// result := false ;
24043: LD_ADDR_VAR 0 4
24047: PUSH
24048: LD_INT 0
24050: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 264
24060: PUSH
24061: LD_INT 81
24063: EQUAL
24064: NOT
24065: IFFALSE 24069
// exit ;
24067: GO 24309
// index := GetElementIndex ( minersList , unit ) ;
24069: LD_ADDR_VAR 0 5
24073: PUSH
24074: LD_EXP 93
24078: PPUSH
24079: LD_VAR 0 1
24083: PPUSH
24084: CALL 30664 0 2
24088: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24089: LD_EXP 94
24093: PUSH
24094: LD_VAR 0 5
24098: ARRAY
24099: PUSH
24100: LD_EXP 95
24104: GREATEREQUAL
24105: IFFALSE 24109
// exit ;
24107: GO 24309
// ComMoveXY ( unit , x , y ) ;
24109: LD_VAR 0 1
24113: PPUSH
24114: LD_VAR 0 2
24118: PPUSH
24119: LD_VAR 0 3
24123: PPUSH
24124: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24128: LD_INT 35
24130: PPUSH
24131: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24135: LD_VAR 0 1
24139: PPUSH
24140: LD_VAR 0 2
24144: PPUSH
24145: LD_VAR 0 3
24149: PPUSH
24150: CALL 62019 0 3
24154: NOT
24155: PUSH
24156: LD_VAR 0 1
24160: PPUSH
24161: CALL_OW 314
24165: AND
24166: IFFALSE 24170
// exit ;
24168: GO 24309
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24170: LD_VAR 0 2
24174: PPUSH
24175: LD_VAR 0 3
24179: PPUSH
24180: CALL_OW 428
24184: PUSH
24185: LD_VAR 0 1
24189: EQUAL
24190: PUSH
24191: LD_VAR 0 1
24195: PPUSH
24196: CALL_OW 314
24200: NOT
24201: AND
24202: IFFALSE 24128
// PlaySoundXY ( x , y , PlantMine ) ;
24204: LD_VAR 0 2
24208: PPUSH
24209: LD_VAR 0 3
24213: PPUSH
24214: LD_STRING PlantMine
24216: PPUSH
24217: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24221: LD_VAR 0 2
24225: PPUSH
24226: LD_VAR 0 3
24230: PPUSH
24231: LD_VAR 0 1
24235: PPUSH
24236: CALL_OW 255
24240: PPUSH
24241: LD_INT 0
24243: PPUSH
24244: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24248: LD_ADDR_EXP 94
24252: PUSH
24253: LD_EXP 94
24257: PPUSH
24258: LD_VAR 0 5
24262: PUSH
24263: LD_EXP 94
24267: PUSH
24268: LD_VAR 0 5
24272: ARRAY
24273: PUSH
24274: LD_INT 1
24276: PLUS
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PPUSH
24282: LD_VAR 0 2
24286: PUSH
24287: LD_VAR 0 3
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PPUSH
24296: CALL 30879 0 3
24300: ST_TO_ADDR
// result := true ;
24301: LD_ADDR_VAR 0 4
24305: PUSH
24306: LD_INT 1
24308: ST_TO_ADDR
// end ;
24309: LD_VAR 0 4
24313: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24314: LD_INT 0
24316: PPUSH
24317: PPUSH
24318: PPUSH
// if not unit in minersList then
24319: LD_VAR 0 1
24323: PUSH
24324: LD_EXP 93
24328: IN
24329: NOT
24330: IFFALSE 24334
// exit ;
24332: GO 24726
// index := GetElementIndex ( minersList , unit ) ;
24334: LD_ADDR_VAR 0 6
24338: PUSH
24339: LD_EXP 93
24343: PPUSH
24344: LD_VAR 0 1
24348: PPUSH
24349: CALL 30664 0 2
24353: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24354: LD_ADDR_VAR 0 5
24358: PUSH
24359: DOUBLE
24360: LD_EXP 94
24364: PUSH
24365: LD_VAR 0 6
24369: ARRAY
24370: INC
24371: ST_TO_ADDR
24372: LD_INT 1
24374: PUSH
24375: FOR_DOWNTO
24376: IFFALSE 24537
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24378: LD_EXP 94
24382: PUSH
24383: LD_VAR 0 6
24387: ARRAY
24388: PUSH
24389: LD_VAR 0 5
24393: ARRAY
24394: PUSH
24395: LD_INT 1
24397: ARRAY
24398: PUSH
24399: LD_VAR 0 2
24403: EQUAL
24404: PUSH
24405: LD_EXP 94
24409: PUSH
24410: LD_VAR 0 6
24414: ARRAY
24415: PUSH
24416: LD_VAR 0 5
24420: ARRAY
24421: PUSH
24422: LD_INT 2
24424: ARRAY
24425: PUSH
24426: LD_VAR 0 3
24430: EQUAL
24431: AND
24432: IFFALSE 24535
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24434: LD_EXP 94
24438: PUSH
24439: LD_VAR 0 6
24443: ARRAY
24444: PUSH
24445: LD_VAR 0 5
24449: ARRAY
24450: PUSH
24451: LD_INT 1
24453: ARRAY
24454: PPUSH
24455: LD_EXP 94
24459: PUSH
24460: LD_VAR 0 6
24464: ARRAY
24465: PUSH
24466: LD_VAR 0 5
24470: ARRAY
24471: PUSH
24472: LD_INT 2
24474: ARRAY
24475: PPUSH
24476: LD_VAR 0 1
24480: PPUSH
24481: CALL_OW 255
24485: PPUSH
24486: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24490: LD_ADDR_EXP 94
24494: PUSH
24495: LD_EXP 94
24499: PPUSH
24500: LD_VAR 0 6
24504: PPUSH
24505: LD_EXP 94
24509: PUSH
24510: LD_VAR 0 6
24514: ARRAY
24515: PPUSH
24516: LD_VAR 0 5
24520: PPUSH
24521: CALL_OW 3
24525: PPUSH
24526: CALL_OW 1
24530: ST_TO_ADDR
// exit ;
24531: POP
24532: POP
24533: GO 24726
// end ; end ;
24535: GO 24375
24537: POP
24538: POP
// for i := minerMinesList [ index ] downto 1 do
24539: LD_ADDR_VAR 0 5
24543: PUSH
24544: DOUBLE
24545: LD_EXP 94
24549: PUSH
24550: LD_VAR 0 6
24554: ARRAY
24555: INC
24556: ST_TO_ADDR
24557: LD_INT 1
24559: PUSH
24560: FOR_DOWNTO
24561: IFFALSE 24724
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24563: LD_EXP 94
24567: PUSH
24568: LD_VAR 0 6
24572: ARRAY
24573: PUSH
24574: LD_VAR 0 5
24578: ARRAY
24579: PUSH
24580: LD_INT 1
24582: ARRAY
24583: PPUSH
24584: LD_EXP 94
24588: PUSH
24589: LD_VAR 0 6
24593: ARRAY
24594: PUSH
24595: LD_VAR 0 5
24599: ARRAY
24600: PUSH
24601: LD_INT 2
24603: ARRAY
24604: PPUSH
24605: LD_VAR 0 2
24609: PPUSH
24610: LD_VAR 0 3
24614: PPUSH
24615: CALL_OW 298
24619: PUSH
24620: LD_INT 6
24622: LESS
24623: IFFALSE 24722
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24625: LD_EXP 94
24629: PUSH
24630: LD_VAR 0 6
24634: ARRAY
24635: PUSH
24636: LD_VAR 0 5
24640: ARRAY
24641: PUSH
24642: LD_INT 1
24644: ARRAY
24645: PPUSH
24646: LD_EXP 94
24650: PUSH
24651: LD_VAR 0 6
24655: ARRAY
24656: PUSH
24657: LD_VAR 0 5
24661: ARRAY
24662: PUSH
24663: LD_INT 2
24665: ARRAY
24666: PPUSH
24667: LD_VAR 0 1
24671: PPUSH
24672: CALL_OW 255
24676: PPUSH
24677: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24681: LD_ADDR_EXP 94
24685: PUSH
24686: LD_EXP 94
24690: PPUSH
24691: LD_VAR 0 6
24695: PPUSH
24696: LD_EXP 94
24700: PUSH
24701: LD_VAR 0 6
24705: ARRAY
24706: PPUSH
24707: LD_VAR 0 5
24711: PPUSH
24712: CALL_OW 3
24716: PPUSH
24717: CALL_OW 1
24721: ST_TO_ADDR
// end ; end ;
24722: GO 24560
24724: POP
24725: POP
// end ;
24726: LD_VAR 0 4
24730: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24731: LD_INT 0
24733: PPUSH
24734: PPUSH
24735: PPUSH
24736: PPUSH
24737: PPUSH
24738: PPUSH
24739: PPUSH
24740: PPUSH
24741: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24742: LD_VAR 0 1
24746: PPUSH
24747: CALL_OW 264
24751: PUSH
24752: LD_INT 81
24754: EQUAL
24755: NOT
24756: PUSH
24757: LD_VAR 0 1
24761: PUSH
24762: LD_EXP 93
24766: IN
24767: NOT
24768: OR
24769: IFFALSE 24773
// exit ;
24771: GO 25095
// index := GetElementIndex ( minersList , unit ) ;
24773: LD_ADDR_VAR 0 6
24777: PUSH
24778: LD_EXP 93
24782: PPUSH
24783: LD_VAR 0 1
24787: PPUSH
24788: CALL 30664 0 2
24792: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24793: LD_ADDR_VAR 0 8
24797: PUSH
24798: LD_EXP 95
24802: PUSH
24803: LD_EXP 94
24807: PUSH
24808: LD_VAR 0 6
24812: ARRAY
24813: MINUS
24814: ST_TO_ADDR
// if not minesFreeAmount then
24815: LD_VAR 0 8
24819: NOT
24820: IFFALSE 24824
// exit ;
24822: GO 25095
// tmp := [ ] ;
24824: LD_ADDR_VAR 0 7
24828: PUSH
24829: EMPTY
24830: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24831: LD_ADDR_VAR 0 5
24835: PUSH
24836: DOUBLE
24837: LD_INT 1
24839: DEC
24840: ST_TO_ADDR
24841: LD_VAR 0 8
24845: PUSH
24846: FOR_TO
24847: IFFALSE 25042
// begin _d := rand ( 0 , 5 ) ;
24849: LD_ADDR_VAR 0 11
24853: PUSH
24854: LD_INT 0
24856: PPUSH
24857: LD_INT 5
24859: PPUSH
24860: CALL_OW 12
24864: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24865: LD_ADDR_VAR 0 12
24869: PUSH
24870: LD_INT 2
24872: PPUSH
24873: LD_INT 6
24875: PPUSH
24876: CALL_OW 12
24880: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24881: LD_ADDR_VAR 0 9
24885: PUSH
24886: LD_VAR 0 2
24890: PPUSH
24891: LD_VAR 0 11
24895: PPUSH
24896: LD_VAR 0 12
24900: PPUSH
24901: CALL_OW 272
24905: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24906: LD_ADDR_VAR 0 10
24910: PUSH
24911: LD_VAR 0 3
24915: PPUSH
24916: LD_VAR 0 11
24920: PPUSH
24921: LD_VAR 0 12
24925: PPUSH
24926: CALL_OW 273
24930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24931: LD_VAR 0 9
24935: PPUSH
24936: LD_VAR 0 10
24940: PPUSH
24941: CALL_OW 488
24945: PUSH
24946: LD_VAR 0 9
24950: PUSH
24951: LD_VAR 0 10
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_VAR 0 7
24964: IN
24965: NOT
24966: AND
24967: PUSH
24968: LD_VAR 0 9
24972: PPUSH
24973: LD_VAR 0 10
24977: PPUSH
24978: CALL_OW 458
24982: NOT
24983: AND
24984: IFFALSE 25026
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24986: LD_ADDR_VAR 0 7
24990: PUSH
24991: LD_VAR 0 7
24995: PPUSH
24996: LD_VAR 0 7
25000: PUSH
25001: LD_INT 1
25003: PLUS
25004: PPUSH
25005: LD_VAR 0 9
25009: PUSH
25010: LD_VAR 0 10
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PPUSH
25019: CALL_OW 1
25023: ST_TO_ADDR
25024: GO 25040
// i := i - 1 ;
25026: LD_ADDR_VAR 0 5
25030: PUSH
25031: LD_VAR 0 5
25035: PUSH
25036: LD_INT 1
25038: MINUS
25039: ST_TO_ADDR
// end ;
25040: GO 24846
25042: POP
25043: POP
// for i in tmp do
25044: LD_ADDR_VAR 0 5
25048: PUSH
25049: LD_VAR 0 7
25053: PUSH
25054: FOR_IN
25055: IFFALSE 25093
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25057: LD_VAR 0 1
25061: PPUSH
25062: LD_VAR 0 5
25066: PUSH
25067: LD_INT 1
25069: ARRAY
25070: PPUSH
25071: LD_VAR 0 5
25075: PUSH
25076: LD_INT 2
25078: ARRAY
25079: PPUSH
25080: CALL 24039 0 3
25084: NOT
25085: IFFALSE 25091
// exit ;
25087: POP
25088: POP
25089: GO 25095
25091: GO 25054
25093: POP
25094: POP
// end ;
25095: LD_VAR 0 4
25099: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25100: LD_INT 0
25102: PPUSH
25103: PPUSH
25104: PPUSH
25105: PPUSH
25106: PPUSH
25107: PPUSH
25108: PPUSH
// if not GetClass ( unit ) = class_sniper then
25109: LD_VAR 0 1
25113: PPUSH
25114: CALL_OW 257
25118: PUSH
25119: LD_INT 5
25121: EQUAL
25122: NOT
25123: IFFALSE 25127
// exit ;
25125: GO 25515
// dist := 8 ;
25127: LD_ADDR_VAR 0 5
25131: PUSH
25132: LD_INT 8
25134: ST_TO_ADDR
// viewRange := 12 ;
25135: LD_ADDR_VAR 0 7
25139: PUSH
25140: LD_INT 12
25142: ST_TO_ADDR
// side := GetSide ( unit ) ;
25143: LD_ADDR_VAR 0 6
25147: PUSH
25148: LD_VAR 0 1
25152: PPUSH
25153: CALL_OW 255
25157: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25158: LD_INT 61
25160: PPUSH
25161: LD_VAR 0 6
25165: PPUSH
25166: CALL_OW 321
25170: PUSH
25171: LD_INT 2
25173: EQUAL
25174: IFFALSE 25184
// viewRange := 16 ;
25176: LD_ADDR_VAR 0 7
25180: PUSH
25181: LD_INT 16
25183: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25184: LD_VAR 0 1
25188: PPUSH
25189: LD_VAR 0 2
25193: PPUSH
25194: LD_VAR 0 3
25198: PPUSH
25199: CALL_OW 297
25203: PUSH
25204: LD_VAR 0 5
25208: GREATER
25209: IFFALSE 25288
// begin ComMoveXY ( unit , x , y ) ;
25211: LD_VAR 0 1
25215: PPUSH
25216: LD_VAR 0 2
25220: PPUSH
25221: LD_VAR 0 3
25225: PPUSH
25226: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25230: LD_INT 35
25232: PPUSH
25233: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25237: LD_VAR 0 1
25241: PPUSH
25242: LD_VAR 0 2
25246: PPUSH
25247: LD_VAR 0 3
25251: PPUSH
25252: CALL 62019 0 3
25256: NOT
25257: IFFALSE 25261
// exit ;
25259: GO 25515
// until GetDistUnitXY ( unit , x , y ) < dist ;
25261: LD_VAR 0 1
25265: PPUSH
25266: LD_VAR 0 2
25270: PPUSH
25271: LD_VAR 0 3
25275: PPUSH
25276: CALL_OW 297
25280: PUSH
25281: LD_VAR 0 5
25285: LESS
25286: IFFALSE 25230
// end ; ComTurnXY ( unit , x , y ) ;
25288: LD_VAR 0 1
25292: PPUSH
25293: LD_VAR 0 2
25297: PPUSH
25298: LD_VAR 0 3
25302: PPUSH
25303: CALL_OW 118
// wait ( 5 ) ;
25307: LD_INT 5
25309: PPUSH
25310: CALL_OW 67
// _d := GetDir ( unit ) ;
25314: LD_ADDR_VAR 0 10
25318: PUSH
25319: LD_VAR 0 1
25323: PPUSH
25324: CALL_OW 254
25328: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25329: LD_ADDR_VAR 0 8
25333: PUSH
25334: LD_VAR 0 1
25338: PPUSH
25339: CALL_OW 250
25343: PPUSH
25344: LD_VAR 0 10
25348: PPUSH
25349: LD_VAR 0 5
25353: PPUSH
25354: CALL_OW 272
25358: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25359: LD_ADDR_VAR 0 9
25363: PUSH
25364: LD_VAR 0 1
25368: PPUSH
25369: CALL_OW 251
25373: PPUSH
25374: LD_VAR 0 10
25378: PPUSH
25379: LD_VAR 0 5
25383: PPUSH
25384: CALL_OW 273
25388: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25389: LD_VAR 0 8
25393: PPUSH
25394: LD_VAR 0 9
25398: PPUSH
25399: CALL_OW 488
25403: NOT
25404: IFFALSE 25408
// exit ;
25406: GO 25515
// ComAnimCustom ( unit , 1 ) ;
25408: LD_VAR 0 1
25412: PPUSH
25413: LD_INT 1
25415: PPUSH
25416: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25420: LD_VAR 0 8
25424: PPUSH
25425: LD_VAR 0 9
25429: PPUSH
25430: LD_VAR 0 6
25434: PPUSH
25435: LD_VAR 0 7
25439: PPUSH
25440: CALL_OW 330
// repeat wait ( 1 ) ;
25444: LD_INT 1
25446: PPUSH
25447: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25451: LD_VAR 0 1
25455: PPUSH
25456: CALL_OW 316
25460: PUSH
25461: LD_VAR 0 1
25465: PPUSH
25466: CALL_OW 314
25470: OR
25471: PUSH
25472: LD_VAR 0 1
25476: PPUSH
25477: CALL_OW 302
25481: NOT
25482: OR
25483: PUSH
25484: LD_VAR 0 1
25488: PPUSH
25489: CALL_OW 301
25493: OR
25494: IFFALSE 25444
// RemoveSeeing ( _x , _y , side ) ;
25496: LD_VAR 0 8
25500: PPUSH
25501: LD_VAR 0 9
25505: PPUSH
25506: LD_VAR 0 6
25510: PPUSH
25511: CALL_OW 331
// end ; end_of_file
25515: LD_VAR 0 4
25519: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25520: LD_VAR 0 1
25524: PUSH
25525: LD_INT 200
25527: DOUBLE
25528: GREATEREQUAL
25529: IFFALSE 25537
25531: LD_INT 299
25533: DOUBLE
25534: LESSEQUAL
25535: IFTRUE 25539
25537: GO 25571
25539: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25540: LD_VAR 0 1
25544: PPUSH
25545: LD_VAR 0 2
25549: PPUSH
25550: LD_VAR 0 3
25554: PPUSH
25555: LD_VAR 0 4
25559: PPUSH
25560: LD_VAR 0 5
25564: PPUSH
25565: CALL 21607 0 5
25569: GO 25648
25571: LD_INT 300
25573: DOUBLE
25574: GREATEREQUAL
25575: IFFALSE 25583
25577: LD_INT 399
25579: DOUBLE
25580: LESSEQUAL
25581: IFTRUE 25585
25583: GO 25647
25585: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25586: LD_VAR 0 1
25590: PPUSH
25591: LD_VAR 0 2
25595: PPUSH
25596: LD_VAR 0 3
25600: PPUSH
25601: LD_VAR 0 4
25605: PPUSH
25606: LD_VAR 0 5
25610: PPUSH
25611: LD_VAR 0 6
25615: PPUSH
25616: LD_VAR 0 7
25620: PPUSH
25621: LD_VAR 0 8
25625: PPUSH
25626: LD_VAR 0 9
25630: PPUSH
25631: LD_VAR 0 10
25635: PPUSH
25636: LD_VAR 0 11
25640: PPUSH
25641: CALL 17940 0 11
25645: GO 25648
25647: POP
// end ;
25648: PPOPN 11
25650: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25651: LD_VAR 0 1
25655: PPUSH
25656: LD_VAR 0 2
25660: PPUSH
25661: LD_VAR 0 3
25665: PPUSH
25666: LD_VAR 0 4
25670: PPUSH
25671: LD_VAR 0 5
25675: PPUSH
25676: CALL 21343 0 5
// end ; end_of_file
25680: PPOPN 5
25682: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
25683: LD_VAR 0 1
25687: PPUSH
25688: LD_VAR 0 2
25692: PPUSH
25693: LD_VAR 0 3
25697: PPUSH
25698: LD_VAR 0 4
25702: PPUSH
25703: LD_VAR 0 5
25707: PPUSH
25708: LD_VAR 0 6
25712: PPUSH
25713: CALL 5592 0 6
// end ;
25717: PPOPN 6
25719: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
25720: LD_INT 0
25722: PPUSH
// begin if not units then
25723: LD_VAR 0 1
25727: NOT
25728: IFFALSE 25732
// exit ;
25730: GO 25732
// end ;
25732: PPOPN 7
25734: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
25735: CALL 5496 0 0
// end ; end_of_file end_of_file
25739: PPOPN 1
25741: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25742: LD_INT 0
25744: PPUSH
25745: PPUSH
// if exist_mode then
25746: LD_VAR 0 2
25750: IFFALSE 25775
// unit := CreateCharacter ( prefix & ident ) else
25752: LD_ADDR_VAR 0 5
25756: PUSH
25757: LD_VAR 0 3
25761: PUSH
25762: LD_VAR 0 1
25766: STR
25767: PPUSH
25768: CALL_OW 34
25772: ST_TO_ADDR
25773: GO 25790
// unit := NewCharacter ( ident ) ;
25775: LD_ADDR_VAR 0 5
25779: PUSH
25780: LD_VAR 0 1
25784: PPUSH
25785: CALL_OW 25
25789: ST_TO_ADDR
// result := unit ;
25790: LD_ADDR_VAR 0 4
25794: PUSH
25795: LD_VAR 0 5
25799: ST_TO_ADDR
// end ;
25800: LD_VAR 0 4
25804: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25805: LD_INT 0
25807: PPUSH
25808: PPUSH
// if not side or not nation then
25809: LD_VAR 0 1
25813: NOT
25814: PUSH
25815: LD_VAR 0 2
25819: NOT
25820: OR
25821: IFFALSE 25825
// exit ;
25823: GO 26593
// case nation of nation_american :
25825: LD_VAR 0 2
25829: PUSH
25830: LD_INT 1
25832: DOUBLE
25833: EQUAL
25834: IFTRUE 25838
25836: GO 26052
25838: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25839: LD_ADDR_VAR 0 4
25843: PUSH
25844: LD_INT 35
25846: PUSH
25847: LD_INT 45
25849: PUSH
25850: LD_INT 46
25852: PUSH
25853: LD_INT 47
25855: PUSH
25856: LD_INT 82
25858: PUSH
25859: LD_INT 83
25861: PUSH
25862: LD_INT 84
25864: PUSH
25865: LD_INT 85
25867: PUSH
25868: LD_INT 86
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: LD_INT 2
25876: PUSH
25877: LD_INT 6
25879: PUSH
25880: LD_INT 15
25882: PUSH
25883: LD_INT 16
25885: PUSH
25886: LD_INT 7
25888: PUSH
25889: LD_INT 12
25891: PUSH
25892: LD_INT 13
25894: PUSH
25895: LD_INT 10
25897: PUSH
25898: LD_INT 14
25900: PUSH
25901: LD_INT 20
25903: PUSH
25904: LD_INT 21
25906: PUSH
25907: LD_INT 22
25909: PUSH
25910: LD_INT 25
25912: PUSH
25913: LD_INT 32
25915: PUSH
25916: LD_INT 27
25918: PUSH
25919: LD_INT 36
25921: PUSH
25922: LD_INT 69
25924: PUSH
25925: LD_INT 39
25927: PUSH
25928: LD_INT 34
25930: PUSH
25931: LD_INT 40
25933: PUSH
25934: LD_INT 48
25936: PUSH
25937: LD_INT 49
25939: PUSH
25940: LD_INT 50
25942: PUSH
25943: LD_INT 51
25945: PUSH
25946: LD_INT 52
25948: PUSH
25949: LD_INT 53
25951: PUSH
25952: LD_INT 54
25954: PUSH
25955: LD_INT 55
25957: PUSH
25958: LD_INT 56
25960: PUSH
25961: LD_INT 57
25963: PUSH
25964: LD_INT 58
25966: PUSH
25967: LD_INT 59
25969: PUSH
25970: LD_INT 60
25972: PUSH
25973: LD_INT 61
25975: PUSH
25976: LD_INT 62
25978: PUSH
25979: LD_INT 80
25981: PUSH
25982: LD_INT 82
25984: PUSH
25985: LD_INT 83
25987: PUSH
25988: LD_INT 84
25990: PUSH
25991: LD_INT 85
25993: PUSH
25994: LD_INT 86
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: ST_TO_ADDR
26050: GO 26517
26052: LD_INT 2
26054: DOUBLE
26055: EQUAL
26056: IFTRUE 26060
26058: GO 26286
26060: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26061: LD_ADDR_VAR 0 4
26065: PUSH
26066: LD_INT 35
26068: PUSH
26069: LD_INT 45
26071: PUSH
26072: LD_INT 46
26074: PUSH
26075: LD_INT 47
26077: PUSH
26078: LD_INT 82
26080: PUSH
26081: LD_INT 83
26083: PUSH
26084: LD_INT 84
26086: PUSH
26087: LD_INT 85
26089: PUSH
26090: LD_INT 87
26092: PUSH
26093: LD_INT 70
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: LD_INT 11
26101: PUSH
26102: LD_INT 3
26104: PUSH
26105: LD_INT 4
26107: PUSH
26108: LD_INT 5
26110: PUSH
26111: LD_INT 6
26113: PUSH
26114: LD_INT 15
26116: PUSH
26117: LD_INT 18
26119: PUSH
26120: LD_INT 7
26122: PUSH
26123: LD_INT 17
26125: PUSH
26126: LD_INT 8
26128: PUSH
26129: LD_INT 20
26131: PUSH
26132: LD_INT 21
26134: PUSH
26135: LD_INT 22
26137: PUSH
26138: LD_INT 72
26140: PUSH
26141: LD_INT 26
26143: PUSH
26144: LD_INT 69
26146: PUSH
26147: LD_INT 39
26149: PUSH
26150: LD_INT 40
26152: PUSH
26153: LD_INT 41
26155: PUSH
26156: LD_INT 42
26158: PUSH
26159: LD_INT 43
26161: PUSH
26162: LD_INT 48
26164: PUSH
26165: LD_INT 49
26167: PUSH
26168: LD_INT 50
26170: PUSH
26171: LD_INT 51
26173: PUSH
26174: LD_INT 52
26176: PUSH
26177: LD_INT 53
26179: PUSH
26180: LD_INT 54
26182: PUSH
26183: LD_INT 55
26185: PUSH
26186: LD_INT 56
26188: PUSH
26189: LD_INT 60
26191: PUSH
26192: LD_INT 61
26194: PUSH
26195: LD_INT 62
26197: PUSH
26198: LD_INT 66
26200: PUSH
26201: LD_INT 67
26203: PUSH
26204: LD_INT 68
26206: PUSH
26207: LD_INT 81
26209: PUSH
26210: LD_INT 82
26212: PUSH
26213: LD_INT 83
26215: PUSH
26216: LD_INT 84
26218: PUSH
26219: LD_INT 85
26221: PUSH
26222: LD_INT 87
26224: PUSH
26225: LD_INT 88
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: ST_TO_ADDR
26284: GO 26517
26286: LD_INT 3
26288: DOUBLE
26289: EQUAL
26290: IFTRUE 26294
26292: GO 26516
26294: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26295: LD_ADDR_VAR 0 4
26299: PUSH
26300: LD_INT 46
26302: PUSH
26303: LD_INT 47
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: LD_INT 2
26311: PUSH
26312: LD_INT 82
26314: PUSH
26315: LD_INT 83
26317: PUSH
26318: LD_INT 84
26320: PUSH
26321: LD_INT 85
26323: PUSH
26324: LD_INT 86
26326: PUSH
26327: LD_INT 11
26329: PUSH
26330: LD_INT 9
26332: PUSH
26333: LD_INT 20
26335: PUSH
26336: LD_INT 19
26338: PUSH
26339: LD_INT 21
26341: PUSH
26342: LD_INT 24
26344: PUSH
26345: LD_INT 22
26347: PUSH
26348: LD_INT 25
26350: PUSH
26351: LD_INT 28
26353: PUSH
26354: LD_INT 29
26356: PUSH
26357: LD_INT 30
26359: PUSH
26360: LD_INT 31
26362: PUSH
26363: LD_INT 37
26365: PUSH
26366: LD_INT 38
26368: PUSH
26369: LD_INT 32
26371: PUSH
26372: LD_INT 27
26374: PUSH
26375: LD_INT 33
26377: PUSH
26378: LD_INT 69
26380: PUSH
26381: LD_INT 39
26383: PUSH
26384: LD_INT 34
26386: PUSH
26387: LD_INT 40
26389: PUSH
26390: LD_INT 71
26392: PUSH
26393: LD_INT 23
26395: PUSH
26396: LD_INT 44
26398: PUSH
26399: LD_INT 48
26401: PUSH
26402: LD_INT 49
26404: PUSH
26405: LD_INT 50
26407: PUSH
26408: LD_INT 51
26410: PUSH
26411: LD_INT 52
26413: PUSH
26414: LD_INT 53
26416: PUSH
26417: LD_INT 54
26419: PUSH
26420: LD_INT 55
26422: PUSH
26423: LD_INT 56
26425: PUSH
26426: LD_INT 57
26428: PUSH
26429: LD_INT 58
26431: PUSH
26432: LD_INT 59
26434: PUSH
26435: LD_INT 63
26437: PUSH
26438: LD_INT 64
26440: PUSH
26441: LD_INT 65
26443: PUSH
26444: LD_INT 82
26446: PUSH
26447: LD_INT 83
26449: PUSH
26450: LD_INT 84
26452: PUSH
26453: LD_INT 85
26455: PUSH
26456: LD_INT 86
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: ST_TO_ADDR
26514: GO 26517
26516: POP
// if state > - 1 and state < 3 then
26517: LD_VAR 0 3
26521: PUSH
26522: LD_INT 1
26524: NEG
26525: GREATER
26526: PUSH
26527: LD_VAR 0 3
26531: PUSH
26532: LD_INT 3
26534: LESS
26535: AND
26536: IFFALSE 26593
// for i in result do
26538: LD_ADDR_VAR 0 5
26542: PUSH
26543: LD_VAR 0 4
26547: PUSH
26548: FOR_IN
26549: IFFALSE 26591
// if GetTech ( i , side ) <> state then
26551: LD_VAR 0 5
26555: PPUSH
26556: LD_VAR 0 1
26560: PPUSH
26561: CALL_OW 321
26565: PUSH
26566: LD_VAR 0 3
26570: NONEQUAL
26571: IFFALSE 26589
// result := result diff i ;
26573: LD_ADDR_VAR 0 4
26577: PUSH
26578: LD_VAR 0 4
26582: PUSH
26583: LD_VAR 0 5
26587: DIFF
26588: ST_TO_ADDR
26589: GO 26548
26591: POP
26592: POP
// end ;
26593: LD_VAR 0 4
26597: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26598: LD_INT 0
26600: PPUSH
26601: PPUSH
26602: PPUSH
// result := true ;
26603: LD_ADDR_VAR 0 3
26607: PUSH
26608: LD_INT 1
26610: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26611: LD_ADDR_VAR 0 5
26615: PUSH
26616: LD_VAR 0 2
26620: PPUSH
26621: CALL_OW 480
26625: ST_TO_ADDR
// if not tmp then
26626: LD_VAR 0 5
26630: NOT
26631: IFFALSE 26635
// exit ;
26633: GO 26684
// for i in tmp do
26635: LD_ADDR_VAR 0 4
26639: PUSH
26640: LD_VAR 0 5
26644: PUSH
26645: FOR_IN
26646: IFFALSE 26682
// if GetTech ( i , side ) <> state_researched then
26648: LD_VAR 0 4
26652: PPUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 321
26662: PUSH
26663: LD_INT 2
26665: NONEQUAL
26666: IFFALSE 26680
// begin result := false ;
26668: LD_ADDR_VAR 0 3
26672: PUSH
26673: LD_INT 0
26675: ST_TO_ADDR
// exit ;
26676: POP
26677: POP
26678: GO 26684
// end ;
26680: GO 26645
26682: POP
26683: POP
// end ;
26684: LD_VAR 0 3
26688: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26689: LD_INT 0
26691: PPUSH
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26704: LD_VAR 0 1
26708: NOT
26709: PUSH
26710: LD_VAR 0 1
26714: PPUSH
26715: CALL_OW 257
26719: PUSH
26720: LD_INT 9
26722: NONEQUAL
26723: OR
26724: IFFALSE 26728
// exit ;
26726: GO 27301
// side := GetSide ( unit ) ;
26728: LD_ADDR_VAR 0 9
26732: PUSH
26733: LD_VAR 0 1
26737: PPUSH
26738: CALL_OW 255
26742: ST_TO_ADDR
// tech_space := tech_spacanom ;
26743: LD_ADDR_VAR 0 12
26747: PUSH
26748: LD_INT 29
26750: ST_TO_ADDR
// tech_time := tech_taurad ;
26751: LD_ADDR_VAR 0 13
26755: PUSH
26756: LD_INT 28
26758: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26759: LD_ADDR_VAR 0 11
26763: PUSH
26764: LD_VAR 0 1
26768: PPUSH
26769: CALL_OW 310
26773: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26774: LD_VAR 0 11
26778: PPUSH
26779: CALL_OW 247
26783: PUSH
26784: LD_INT 2
26786: EQUAL
26787: IFFALSE 26791
// exit ;
26789: GO 27301
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26791: LD_ADDR_VAR 0 8
26795: PUSH
26796: LD_INT 81
26798: PUSH
26799: LD_VAR 0 9
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 3
26810: PUSH
26811: LD_INT 21
26813: PUSH
26814: LD_INT 3
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PPUSH
26829: CALL_OW 69
26833: ST_TO_ADDR
// if not tmp then
26834: LD_VAR 0 8
26838: NOT
26839: IFFALSE 26843
// exit ;
26841: GO 27301
// if in_unit then
26843: LD_VAR 0 11
26847: IFFALSE 26871
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26849: LD_ADDR_VAR 0 10
26853: PUSH
26854: LD_VAR 0 8
26858: PPUSH
26859: LD_VAR 0 11
26863: PPUSH
26864: CALL_OW 74
26868: ST_TO_ADDR
26869: GO 26891
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26871: LD_ADDR_VAR 0 10
26875: PUSH
26876: LD_VAR 0 8
26880: PPUSH
26881: LD_VAR 0 1
26885: PPUSH
26886: CALL_OW 74
26890: ST_TO_ADDR
// if not enemy then
26891: LD_VAR 0 10
26895: NOT
26896: IFFALSE 26900
// exit ;
26898: GO 27301
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26900: LD_VAR 0 11
26904: PUSH
26905: LD_VAR 0 11
26909: PPUSH
26910: LD_VAR 0 10
26914: PPUSH
26915: CALL_OW 296
26919: PUSH
26920: LD_INT 13
26922: GREATER
26923: AND
26924: PUSH
26925: LD_VAR 0 1
26929: PPUSH
26930: LD_VAR 0 10
26934: PPUSH
26935: CALL_OW 296
26939: PUSH
26940: LD_INT 12
26942: GREATER
26943: OR
26944: IFFALSE 26948
// exit ;
26946: GO 27301
// missile := [ 1 ] ;
26948: LD_ADDR_VAR 0 14
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: EMPTY
26957: LIST
26958: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26959: LD_VAR 0 9
26963: PPUSH
26964: LD_VAR 0 12
26968: PPUSH
26969: CALL_OW 325
26973: IFFALSE 27002
// missile := Replace ( missile , missile + 1 , 2 ) ;
26975: LD_ADDR_VAR 0 14
26979: PUSH
26980: LD_VAR 0 14
26984: PPUSH
26985: LD_VAR 0 14
26989: PUSH
26990: LD_INT 1
26992: PLUS
26993: PPUSH
26994: LD_INT 2
26996: PPUSH
26997: CALL_OW 1
27001: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27002: LD_VAR 0 9
27006: PPUSH
27007: LD_VAR 0 13
27011: PPUSH
27012: CALL_OW 325
27016: PUSH
27017: LD_VAR 0 10
27021: PPUSH
27022: CALL_OW 255
27026: PPUSH
27027: LD_VAR 0 13
27031: PPUSH
27032: CALL_OW 325
27036: NOT
27037: AND
27038: IFFALSE 27067
// missile := Replace ( missile , missile + 1 , 3 ) ;
27040: LD_ADDR_VAR 0 14
27044: PUSH
27045: LD_VAR 0 14
27049: PPUSH
27050: LD_VAR 0 14
27054: PUSH
27055: LD_INT 1
27057: PLUS
27058: PPUSH
27059: LD_INT 3
27061: PPUSH
27062: CALL_OW 1
27066: ST_TO_ADDR
// if missile < 2 then
27067: LD_VAR 0 14
27071: PUSH
27072: LD_INT 2
27074: LESS
27075: IFFALSE 27079
// exit ;
27077: GO 27301
// x := GetX ( enemy ) ;
27079: LD_ADDR_VAR 0 4
27083: PUSH
27084: LD_VAR 0 10
27088: PPUSH
27089: CALL_OW 250
27093: ST_TO_ADDR
// y := GetY ( enemy ) ;
27094: LD_ADDR_VAR 0 5
27098: PUSH
27099: LD_VAR 0 10
27103: PPUSH
27104: CALL_OW 251
27108: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27109: LD_ADDR_VAR 0 6
27113: PUSH
27114: LD_VAR 0 4
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PPUSH
27123: LD_INT 1
27125: PPUSH
27126: CALL_OW 12
27130: PLUS
27131: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27132: LD_ADDR_VAR 0 7
27136: PUSH
27137: LD_VAR 0 5
27141: PUSH
27142: LD_INT 1
27144: NEG
27145: PPUSH
27146: LD_INT 1
27148: PPUSH
27149: CALL_OW 12
27153: PLUS
27154: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27155: LD_VAR 0 6
27159: PPUSH
27160: LD_VAR 0 7
27164: PPUSH
27165: CALL_OW 488
27169: NOT
27170: IFFALSE 27192
// begin _x := x ;
27172: LD_ADDR_VAR 0 6
27176: PUSH
27177: LD_VAR 0 4
27181: ST_TO_ADDR
// _y := y ;
27182: LD_ADDR_VAR 0 7
27186: PUSH
27187: LD_VAR 0 5
27191: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27192: LD_ADDR_VAR 0 3
27196: PUSH
27197: LD_INT 1
27199: PPUSH
27200: LD_VAR 0 14
27204: PPUSH
27205: CALL_OW 12
27209: ST_TO_ADDR
// case i of 1 :
27210: LD_VAR 0 3
27214: PUSH
27215: LD_INT 1
27217: DOUBLE
27218: EQUAL
27219: IFTRUE 27223
27221: GO 27240
27223: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27224: LD_VAR 0 1
27228: PPUSH
27229: LD_VAR 0 10
27233: PPUSH
27234: CALL_OW 115
27238: GO 27301
27240: LD_INT 2
27242: DOUBLE
27243: EQUAL
27244: IFTRUE 27248
27246: GO 27270
27248: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27249: LD_VAR 0 1
27253: PPUSH
27254: LD_VAR 0 6
27258: PPUSH
27259: LD_VAR 0 7
27263: PPUSH
27264: CALL_OW 153
27268: GO 27301
27270: LD_INT 3
27272: DOUBLE
27273: EQUAL
27274: IFTRUE 27278
27276: GO 27300
27278: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27279: LD_VAR 0 1
27283: PPUSH
27284: LD_VAR 0 6
27288: PPUSH
27289: LD_VAR 0 7
27293: PPUSH
27294: CALL_OW 154
27298: GO 27301
27300: POP
// end ;
27301: LD_VAR 0 2
27305: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27306: LD_INT 0
27308: PPUSH
27309: PPUSH
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
// if not unit or not building then
27314: LD_VAR 0 1
27318: NOT
27319: PUSH
27320: LD_VAR 0 2
27324: NOT
27325: OR
27326: IFFALSE 27330
// exit ;
27328: GO 27488
// x := GetX ( building ) ;
27330: LD_ADDR_VAR 0 5
27334: PUSH
27335: LD_VAR 0 2
27339: PPUSH
27340: CALL_OW 250
27344: ST_TO_ADDR
// y := GetY ( building ) ;
27345: LD_ADDR_VAR 0 6
27349: PUSH
27350: LD_VAR 0 2
27354: PPUSH
27355: CALL_OW 251
27359: ST_TO_ADDR
// for i = 0 to 5 do
27360: LD_ADDR_VAR 0 4
27364: PUSH
27365: DOUBLE
27366: LD_INT 0
27368: DEC
27369: ST_TO_ADDR
27370: LD_INT 5
27372: PUSH
27373: FOR_TO
27374: IFFALSE 27486
// begin _x := ShiftX ( x , i , 3 ) ;
27376: LD_ADDR_VAR 0 7
27380: PUSH
27381: LD_VAR 0 5
27385: PPUSH
27386: LD_VAR 0 4
27390: PPUSH
27391: LD_INT 3
27393: PPUSH
27394: CALL_OW 272
27398: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27399: LD_ADDR_VAR 0 8
27403: PUSH
27404: LD_VAR 0 6
27408: PPUSH
27409: LD_VAR 0 4
27413: PPUSH
27414: LD_INT 3
27416: PPUSH
27417: CALL_OW 273
27421: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27422: LD_VAR 0 7
27426: PPUSH
27427: LD_VAR 0 8
27431: PPUSH
27432: CALL_OW 488
27436: NOT
27437: IFFALSE 27441
// continue ;
27439: GO 27373
// if HexInfo ( _x , _y ) = 0 then
27441: LD_VAR 0 7
27445: PPUSH
27446: LD_VAR 0 8
27450: PPUSH
27451: CALL_OW 428
27455: PUSH
27456: LD_INT 0
27458: EQUAL
27459: IFFALSE 27484
// begin ComMoveXY ( unit , _x , _y ) ;
27461: LD_VAR 0 1
27465: PPUSH
27466: LD_VAR 0 7
27470: PPUSH
27471: LD_VAR 0 8
27475: PPUSH
27476: CALL_OW 111
// exit ;
27480: POP
27481: POP
27482: GO 27488
// end ; end ;
27484: GO 27373
27486: POP
27487: POP
// end ;
27488: LD_VAR 0 3
27492: RET
// export function ScanBase ( side , base_area ) ; begin
27493: LD_INT 0
27495: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27496: LD_ADDR_VAR 0 3
27500: PUSH
27501: LD_VAR 0 2
27505: PPUSH
27506: LD_INT 81
27508: PUSH
27509: LD_VAR 0 1
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PPUSH
27518: CALL_OW 70
27522: ST_TO_ADDR
// end ;
27523: LD_VAR 0 3
27527: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27528: LD_INT 0
27530: PPUSH
27531: PPUSH
27532: PPUSH
27533: PPUSH
// result := false ;
27534: LD_ADDR_VAR 0 2
27538: PUSH
27539: LD_INT 0
27541: ST_TO_ADDR
// side := GetSide ( unit ) ;
27542: LD_ADDR_VAR 0 3
27546: PUSH
27547: LD_VAR 0 1
27551: PPUSH
27552: CALL_OW 255
27556: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27557: LD_ADDR_VAR 0 4
27561: PUSH
27562: LD_VAR 0 1
27566: PPUSH
27567: CALL_OW 248
27571: ST_TO_ADDR
// case nat of 1 :
27572: LD_VAR 0 4
27576: PUSH
27577: LD_INT 1
27579: DOUBLE
27580: EQUAL
27581: IFTRUE 27585
27583: GO 27596
27585: POP
// tech := tech_lassight ; 2 :
27586: LD_ADDR_VAR 0 5
27590: PUSH
27591: LD_INT 12
27593: ST_TO_ADDR
27594: GO 27635
27596: LD_INT 2
27598: DOUBLE
27599: EQUAL
27600: IFTRUE 27604
27602: GO 27615
27604: POP
// tech := tech_mortar ; 3 :
27605: LD_ADDR_VAR 0 5
27609: PUSH
27610: LD_INT 41
27612: ST_TO_ADDR
27613: GO 27635
27615: LD_INT 3
27617: DOUBLE
27618: EQUAL
27619: IFTRUE 27623
27621: GO 27634
27623: POP
// tech := tech_bazooka ; end ;
27624: LD_ADDR_VAR 0 5
27628: PUSH
27629: LD_INT 44
27631: ST_TO_ADDR
27632: GO 27635
27634: POP
// if Researched ( side , tech ) then
27635: LD_VAR 0 3
27639: PPUSH
27640: LD_VAR 0 5
27644: PPUSH
27645: CALL_OW 325
27649: IFFALSE 27676
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27651: LD_ADDR_VAR 0 2
27655: PUSH
27656: LD_INT 5
27658: PUSH
27659: LD_INT 8
27661: PUSH
27662: LD_INT 9
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: PUSH
27670: LD_VAR 0 4
27674: ARRAY
27675: ST_TO_ADDR
// end ;
27676: LD_VAR 0 2
27680: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27681: LD_INT 0
27683: PPUSH
27684: PPUSH
27685: PPUSH
// if not mines then
27686: LD_VAR 0 2
27690: NOT
27691: IFFALSE 27695
// exit ;
27693: GO 27839
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27695: LD_ADDR_VAR 0 5
27699: PUSH
27700: LD_INT 81
27702: PUSH
27703: LD_VAR 0 1
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 3
27714: PUSH
27715: LD_INT 21
27717: PUSH
27718: LD_INT 3
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PPUSH
27733: CALL_OW 69
27737: ST_TO_ADDR
// for i in mines do
27738: LD_ADDR_VAR 0 4
27742: PUSH
27743: LD_VAR 0 2
27747: PUSH
27748: FOR_IN
27749: IFFALSE 27837
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27751: LD_VAR 0 4
27755: PUSH
27756: LD_INT 1
27758: ARRAY
27759: PPUSH
27760: LD_VAR 0 4
27764: PUSH
27765: LD_INT 2
27767: ARRAY
27768: PPUSH
27769: CALL_OW 458
27773: NOT
27774: IFFALSE 27778
// continue ;
27776: GO 27748
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27778: LD_VAR 0 4
27782: PUSH
27783: LD_INT 1
27785: ARRAY
27786: PPUSH
27787: LD_VAR 0 4
27791: PUSH
27792: LD_INT 2
27794: ARRAY
27795: PPUSH
27796: CALL_OW 428
27800: PUSH
27801: LD_VAR 0 5
27805: IN
27806: IFFALSE 27835
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27808: LD_VAR 0 4
27812: PUSH
27813: LD_INT 1
27815: ARRAY
27816: PPUSH
27817: LD_VAR 0 4
27821: PUSH
27822: LD_INT 2
27824: ARRAY
27825: PPUSH
27826: LD_VAR 0 1
27830: PPUSH
27831: CALL_OW 456
// end ;
27835: GO 27748
27837: POP
27838: POP
// end ;
27839: LD_VAR 0 3
27843: RET
// export function Count ( array ) ; var i ; begin
27844: LD_INT 0
27846: PPUSH
27847: PPUSH
// result := 0 ;
27848: LD_ADDR_VAR 0 2
27852: PUSH
27853: LD_INT 0
27855: ST_TO_ADDR
// for i in array do
27856: LD_ADDR_VAR 0 3
27860: PUSH
27861: LD_VAR 0 1
27865: PUSH
27866: FOR_IN
27867: IFFALSE 27891
// if i then
27869: LD_VAR 0 3
27873: IFFALSE 27889
// result := result + 1 ;
27875: LD_ADDR_VAR 0 2
27879: PUSH
27880: LD_VAR 0 2
27884: PUSH
27885: LD_INT 1
27887: PLUS
27888: ST_TO_ADDR
27889: GO 27866
27891: POP
27892: POP
// end ;
27893: LD_VAR 0 2
27897: RET
// export function IsEmpty ( building ) ; begin
27898: LD_INT 0
27900: PPUSH
// if not building then
27901: LD_VAR 0 1
27905: NOT
27906: IFFALSE 27910
// exit ;
27908: GO 27953
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27910: LD_ADDR_VAR 0 2
27914: PUSH
27915: LD_VAR 0 1
27919: PUSH
27920: LD_INT 22
27922: PUSH
27923: LD_VAR 0 1
27927: PPUSH
27928: CALL_OW 255
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 58
27939: PUSH
27940: EMPTY
27941: LIST
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PPUSH
27947: CALL_OW 69
27951: IN
27952: ST_TO_ADDR
// end ;
27953: LD_VAR 0 2
27957: RET
// export function IsNotFull ( building ) ; var places ; begin
27958: LD_INT 0
27960: PPUSH
27961: PPUSH
// if not building then
27962: LD_VAR 0 1
27966: NOT
27967: IFFALSE 27971
// exit ;
27969: GO 28142
// result := false ;
27971: LD_ADDR_VAR 0 2
27975: PUSH
27976: LD_INT 0
27978: ST_TO_ADDR
// places := 0 ;
27979: LD_ADDR_VAR 0 3
27983: PUSH
27984: LD_INT 0
27986: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27987: LD_VAR 0 1
27991: PPUSH
27992: CALL_OW 266
27996: PUSH
27997: LD_INT 0
27999: DOUBLE
28000: EQUAL
28001: IFTRUE 28059
28003: LD_INT 1
28005: DOUBLE
28006: EQUAL
28007: IFTRUE 28059
28009: LD_INT 6
28011: DOUBLE
28012: EQUAL
28013: IFTRUE 28059
28015: LD_INT 7
28017: DOUBLE
28018: EQUAL
28019: IFTRUE 28059
28021: LD_INT 8
28023: DOUBLE
28024: EQUAL
28025: IFTRUE 28059
28027: LD_INT 4
28029: DOUBLE
28030: EQUAL
28031: IFTRUE 28059
28033: LD_INT 5
28035: DOUBLE
28036: EQUAL
28037: IFTRUE 28059
28039: LD_INT 2
28041: DOUBLE
28042: EQUAL
28043: IFTRUE 28059
28045: LD_INT 3
28047: DOUBLE
28048: EQUAL
28049: IFTRUE 28059
28051: LD_INT 35
28053: DOUBLE
28054: EQUAL
28055: IFTRUE 28059
28057: GO 28070
28059: POP
// places := 6 ; b_bunker , b_breastwork :
28060: LD_ADDR_VAR 0 3
28064: PUSH
28065: LD_INT 6
28067: ST_TO_ADDR
28068: GO 28115
28070: LD_INT 32
28072: DOUBLE
28073: EQUAL
28074: IFTRUE 28084
28076: LD_INT 31
28078: DOUBLE
28079: EQUAL
28080: IFTRUE 28084
28082: GO 28095
28084: POP
// places := 1 ; b_control_tower :
28085: LD_ADDR_VAR 0 3
28089: PUSH
28090: LD_INT 1
28092: ST_TO_ADDR
28093: GO 28115
28095: LD_INT 36
28097: DOUBLE
28098: EQUAL
28099: IFTRUE 28103
28101: GO 28114
28103: POP
// places := 3 ; end ;
28104: LD_ADDR_VAR 0 3
28108: PUSH
28109: LD_INT 3
28111: ST_TO_ADDR
28112: GO 28115
28114: POP
// if places then
28115: LD_VAR 0 3
28119: IFFALSE 28142
// result := UnitsInside ( building ) < places ;
28121: LD_ADDR_VAR 0 2
28125: PUSH
28126: LD_VAR 0 1
28130: PPUSH
28131: CALL_OW 313
28135: PUSH
28136: LD_VAR 0 3
28140: LESS
28141: ST_TO_ADDR
// end ;
28142: LD_VAR 0 2
28146: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28147: LD_INT 0
28149: PPUSH
28150: PPUSH
28151: PPUSH
28152: PPUSH
// tmp := [ ] ;
28153: LD_ADDR_VAR 0 3
28157: PUSH
28158: EMPTY
28159: ST_TO_ADDR
// list := [ ] ;
28160: LD_ADDR_VAR 0 5
28164: PUSH
28165: EMPTY
28166: ST_TO_ADDR
// for i = 16 to 25 do
28167: LD_ADDR_VAR 0 4
28171: PUSH
28172: DOUBLE
28173: LD_INT 16
28175: DEC
28176: ST_TO_ADDR
28177: LD_INT 25
28179: PUSH
28180: FOR_TO
28181: IFFALSE 28254
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28183: LD_ADDR_VAR 0 3
28187: PUSH
28188: LD_VAR 0 3
28192: PUSH
28193: LD_INT 22
28195: PUSH
28196: LD_VAR 0 1
28200: PPUSH
28201: CALL_OW 255
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 91
28212: PUSH
28213: LD_VAR 0 1
28217: PUSH
28218: LD_INT 6
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 30
28228: PUSH
28229: LD_VAR 0 4
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: LIST
28242: PUSH
28243: EMPTY
28244: LIST
28245: PPUSH
28246: CALL_OW 69
28250: ADD
28251: ST_TO_ADDR
28252: GO 28180
28254: POP
28255: POP
// for i = 1 to tmp do
28256: LD_ADDR_VAR 0 4
28260: PUSH
28261: DOUBLE
28262: LD_INT 1
28264: DEC
28265: ST_TO_ADDR
28266: LD_VAR 0 3
28270: PUSH
28271: FOR_TO
28272: IFFALSE 28360
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28274: LD_ADDR_VAR 0 5
28278: PUSH
28279: LD_VAR 0 5
28283: PUSH
28284: LD_VAR 0 3
28288: PUSH
28289: LD_VAR 0 4
28293: ARRAY
28294: PPUSH
28295: CALL_OW 266
28299: PUSH
28300: LD_VAR 0 3
28304: PUSH
28305: LD_VAR 0 4
28309: ARRAY
28310: PPUSH
28311: CALL_OW 250
28315: PUSH
28316: LD_VAR 0 3
28320: PUSH
28321: LD_VAR 0 4
28325: ARRAY
28326: PPUSH
28327: CALL_OW 251
28331: PUSH
28332: LD_VAR 0 3
28336: PUSH
28337: LD_VAR 0 4
28341: ARRAY
28342: PPUSH
28343: CALL_OW 254
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: PUSH
28354: EMPTY
28355: LIST
28356: ADD
28357: ST_TO_ADDR
28358: GO 28271
28360: POP
28361: POP
// result := list ;
28362: LD_ADDR_VAR 0 2
28366: PUSH
28367: LD_VAR 0 5
28371: ST_TO_ADDR
// end ;
28372: LD_VAR 0 2
28376: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28377: LD_INT 0
28379: PPUSH
28380: PPUSH
28381: PPUSH
28382: PPUSH
28383: PPUSH
28384: PPUSH
28385: PPUSH
// if not factory then
28386: LD_VAR 0 1
28390: NOT
28391: IFFALSE 28395
// exit ;
28393: GO 28988
// if control = control_apeman then
28395: LD_VAR 0 4
28399: PUSH
28400: LD_INT 5
28402: EQUAL
28403: IFFALSE 28512
// begin tmp := UnitsInside ( factory ) ;
28405: LD_ADDR_VAR 0 8
28409: PUSH
28410: LD_VAR 0 1
28414: PPUSH
28415: CALL_OW 313
28419: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28420: LD_VAR 0 8
28424: PPUSH
28425: LD_INT 25
28427: PUSH
28428: LD_INT 12
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PPUSH
28435: CALL_OW 72
28439: NOT
28440: IFFALSE 28450
// control := control_manual ;
28442: LD_ADDR_VAR 0 4
28446: PUSH
28447: LD_INT 1
28449: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28450: LD_ADDR_VAR 0 8
28454: PUSH
28455: LD_VAR 0 1
28459: PPUSH
28460: CALL 28147 0 1
28464: ST_TO_ADDR
// if tmp then
28465: LD_VAR 0 8
28469: IFFALSE 28512
// begin for i in tmp do
28471: LD_ADDR_VAR 0 7
28475: PUSH
28476: LD_VAR 0 8
28480: PUSH
28481: FOR_IN
28482: IFFALSE 28510
// if i [ 1 ] = b_ext_radio then
28484: LD_VAR 0 7
28488: PUSH
28489: LD_INT 1
28491: ARRAY
28492: PUSH
28493: LD_INT 22
28495: EQUAL
28496: IFFALSE 28508
// begin control := control_remote ;
28498: LD_ADDR_VAR 0 4
28502: PUSH
28503: LD_INT 2
28505: ST_TO_ADDR
// break ;
28506: GO 28510
// end ;
28508: GO 28481
28510: POP
28511: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28512: LD_VAR 0 1
28516: PPUSH
28517: LD_VAR 0 2
28521: PPUSH
28522: LD_VAR 0 3
28526: PPUSH
28527: LD_VAR 0 4
28531: PPUSH
28532: LD_VAR 0 5
28536: PPUSH
28537: CALL_OW 448
28541: IFFALSE 28576
// begin result := [ chassis , engine , control , weapon ] ;
28543: LD_ADDR_VAR 0 6
28547: PUSH
28548: LD_VAR 0 2
28552: PUSH
28553: LD_VAR 0 3
28557: PUSH
28558: LD_VAR 0 4
28562: PUSH
28563: LD_VAR 0 5
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: ST_TO_ADDR
// exit ;
28574: GO 28988
// end ; _chassis := AvailableChassisList ( factory ) ;
28576: LD_ADDR_VAR 0 9
28580: PUSH
28581: LD_VAR 0 1
28585: PPUSH
28586: CALL_OW 475
28590: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28591: LD_ADDR_VAR 0 11
28595: PUSH
28596: LD_VAR 0 1
28600: PPUSH
28601: CALL_OW 476
28605: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28606: LD_ADDR_VAR 0 12
28610: PUSH
28611: LD_VAR 0 1
28615: PPUSH
28616: CALL_OW 477
28620: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28621: LD_ADDR_VAR 0 10
28625: PUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL_OW 478
28635: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28636: LD_VAR 0 9
28640: NOT
28641: PUSH
28642: LD_VAR 0 11
28646: NOT
28647: OR
28648: PUSH
28649: LD_VAR 0 12
28653: NOT
28654: OR
28655: PUSH
28656: LD_VAR 0 10
28660: NOT
28661: OR
28662: IFFALSE 28697
// begin result := [ chassis , engine , control , weapon ] ;
28664: LD_ADDR_VAR 0 6
28668: PUSH
28669: LD_VAR 0 2
28673: PUSH
28674: LD_VAR 0 3
28678: PUSH
28679: LD_VAR 0 4
28683: PUSH
28684: LD_VAR 0 5
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: ST_TO_ADDR
// exit ;
28695: GO 28988
// end ; if not chassis in _chassis then
28697: LD_VAR 0 2
28701: PUSH
28702: LD_VAR 0 9
28706: IN
28707: NOT
28708: IFFALSE 28734
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28710: LD_ADDR_VAR 0 2
28714: PUSH
28715: LD_VAR 0 9
28719: PUSH
28720: LD_INT 1
28722: PPUSH
28723: LD_VAR 0 9
28727: PPUSH
28728: CALL_OW 12
28732: ARRAY
28733: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28734: LD_VAR 0 2
28738: PPUSH
28739: LD_VAR 0 3
28743: PPUSH
28744: CALL 28993 0 2
28748: NOT
28749: IFFALSE 28808
// repeat engine := _engine [ 1 ] ;
28751: LD_ADDR_VAR 0 3
28755: PUSH
28756: LD_VAR 0 11
28760: PUSH
28761: LD_INT 1
28763: ARRAY
28764: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28765: LD_ADDR_VAR 0 11
28769: PUSH
28770: LD_VAR 0 11
28774: PPUSH
28775: LD_INT 1
28777: PPUSH
28778: CALL_OW 3
28782: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28783: LD_VAR 0 2
28787: PPUSH
28788: LD_VAR 0 3
28792: PPUSH
28793: CALL 28993 0 2
28797: PUSH
28798: LD_VAR 0 11
28802: PUSH
28803: EMPTY
28804: EQUAL
28805: OR
28806: IFFALSE 28751
// if not control in _control then
28808: LD_VAR 0 4
28812: PUSH
28813: LD_VAR 0 12
28817: IN
28818: NOT
28819: IFFALSE 28845
// control := _control [ rand ( 1 , _control ) ] ;
28821: LD_ADDR_VAR 0 4
28825: PUSH
28826: LD_VAR 0 12
28830: PUSH
28831: LD_INT 1
28833: PPUSH
28834: LD_VAR 0 12
28838: PPUSH
28839: CALL_OW 12
28843: ARRAY
28844: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28845: LD_VAR 0 2
28849: PPUSH
28850: LD_VAR 0 5
28854: PPUSH
28855: CALL 29213 0 2
28859: NOT
28860: IFFALSE 28919
// repeat weapon := _weapon [ 1 ] ;
28862: LD_ADDR_VAR 0 5
28866: PUSH
28867: LD_VAR 0 10
28871: PUSH
28872: LD_INT 1
28874: ARRAY
28875: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28876: LD_ADDR_VAR 0 10
28880: PUSH
28881: LD_VAR 0 10
28885: PPUSH
28886: LD_INT 1
28888: PPUSH
28889: CALL_OW 3
28893: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28894: LD_VAR 0 2
28898: PPUSH
28899: LD_VAR 0 5
28903: PPUSH
28904: CALL 29213 0 2
28908: PUSH
28909: LD_VAR 0 10
28913: PUSH
28914: EMPTY
28915: EQUAL
28916: OR
28917: IFFALSE 28862
// result := [ ] ;
28919: LD_ADDR_VAR 0 6
28923: PUSH
28924: EMPTY
28925: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28926: LD_VAR 0 1
28930: PPUSH
28931: LD_VAR 0 2
28935: PPUSH
28936: LD_VAR 0 3
28940: PPUSH
28941: LD_VAR 0 4
28945: PPUSH
28946: LD_VAR 0 5
28950: PPUSH
28951: CALL_OW 448
28955: IFFALSE 28988
// result := [ chassis , engine , control , weapon ] ;
28957: LD_ADDR_VAR 0 6
28961: PUSH
28962: LD_VAR 0 2
28966: PUSH
28967: LD_VAR 0 3
28971: PUSH
28972: LD_VAR 0 4
28976: PUSH
28977: LD_VAR 0 5
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: ST_TO_ADDR
// end ;
28988: LD_VAR 0 6
28992: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28993: LD_INT 0
28995: PPUSH
// if not chassis or not engine then
28996: LD_VAR 0 1
29000: NOT
29001: PUSH
29002: LD_VAR 0 2
29006: NOT
29007: OR
29008: IFFALSE 29012
// exit ;
29010: GO 29208
// case engine of engine_solar :
29012: LD_VAR 0 2
29016: PUSH
29017: LD_INT 2
29019: DOUBLE
29020: EQUAL
29021: IFTRUE 29025
29023: GO 29063
29025: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29026: LD_ADDR_VAR 0 3
29030: PUSH
29031: LD_INT 11
29033: PUSH
29034: LD_INT 12
29036: PUSH
29037: LD_INT 13
29039: PUSH
29040: LD_INT 14
29042: PUSH
29043: LD_INT 1
29045: PUSH
29046: LD_INT 2
29048: PUSH
29049: LD_INT 3
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: ST_TO_ADDR
29061: GO 29192
29063: LD_INT 1
29065: DOUBLE
29066: EQUAL
29067: IFTRUE 29071
29069: GO 29133
29071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29072: LD_ADDR_VAR 0 3
29076: PUSH
29077: LD_INT 11
29079: PUSH
29080: LD_INT 12
29082: PUSH
29083: LD_INT 13
29085: PUSH
29086: LD_INT 14
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: LD_INT 2
29094: PUSH
29095: LD_INT 3
29097: PUSH
29098: LD_INT 4
29100: PUSH
29101: LD_INT 5
29103: PUSH
29104: LD_INT 21
29106: PUSH
29107: LD_INT 23
29109: PUSH
29110: LD_INT 22
29112: PUSH
29113: LD_INT 24
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: ST_TO_ADDR
29131: GO 29192
29133: LD_INT 3
29135: DOUBLE
29136: EQUAL
29137: IFTRUE 29141
29139: GO 29191
29141: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29142: LD_ADDR_VAR 0 3
29146: PUSH
29147: LD_INT 13
29149: PUSH
29150: LD_INT 14
29152: PUSH
29153: LD_INT 2
29155: PUSH
29156: LD_INT 3
29158: PUSH
29159: LD_INT 4
29161: PUSH
29162: LD_INT 5
29164: PUSH
29165: LD_INT 21
29167: PUSH
29168: LD_INT 22
29170: PUSH
29171: LD_INT 23
29173: PUSH
29174: LD_INT 24
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: ST_TO_ADDR
29189: GO 29192
29191: POP
// result := ( chassis in result ) ;
29192: LD_ADDR_VAR 0 3
29196: PUSH
29197: LD_VAR 0 1
29201: PUSH
29202: LD_VAR 0 3
29206: IN
29207: ST_TO_ADDR
// end ;
29208: LD_VAR 0 3
29212: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29213: LD_INT 0
29215: PPUSH
// if not chassis or not weapon then
29216: LD_VAR 0 1
29220: NOT
29221: PUSH
29222: LD_VAR 0 2
29226: NOT
29227: OR
29228: IFFALSE 29232
// exit ;
29230: GO 30292
// case weapon of us_machine_gun :
29232: LD_VAR 0 2
29236: PUSH
29237: LD_INT 2
29239: DOUBLE
29240: EQUAL
29241: IFTRUE 29245
29243: GO 29275
29245: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29246: LD_ADDR_VAR 0 3
29250: PUSH
29251: LD_INT 1
29253: PUSH
29254: LD_INT 2
29256: PUSH
29257: LD_INT 3
29259: PUSH
29260: LD_INT 4
29262: PUSH
29263: LD_INT 5
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: ST_TO_ADDR
29273: GO 30276
29275: LD_INT 3
29277: DOUBLE
29278: EQUAL
29279: IFTRUE 29283
29281: GO 29313
29283: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29284: LD_ADDR_VAR 0 3
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: LD_INT 2
29294: PUSH
29295: LD_INT 3
29297: PUSH
29298: LD_INT 4
29300: PUSH
29301: LD_INT 5
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: ST_TO_ADDR
29311: GO 30276
29313: LD_INT 11
29315: DOUBLE
29316: EQUAL
29317: IFTRUE 29321
29319: GO 29351
29321: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29322: LD_ADDR_VAR 0 3
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: LD_INT 2
29332: PUSH
29333: LD_INT 3
29335: PUSH
29336: LD_INT 4
29338: PUSH
29339: LD_INT 5
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: ST_TO_ADDR
29349: GO 30276
29351: LD_INT 4
29353: DOUBLE
29354: EQUAL
29355: IFTRUE 29359
29357: GO 29385
29359: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29360: LD_ADDR_VAR 0 3
29364: PUSH
29365: LD_INT 2
29367: PUSH
29368: LD_INT 3
29370: PUSH
29371: LD_INT 4
29373: PUSH
29374: LD_INT 5
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: ST_TO_ADDR
29383: GO 30276
29385: LD_INT 5
29387: DOUBLE
29388: EQUAL
29389: IFTRUE 29393
29391: GO 29419
29393: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29394: LD_ADDR_VAR 0 3
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: LD_INT 3
29404: PUSH
29405: LD_INT 4
29407: PUSH
29408: LD_INT 5
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: ST_TO_ADDR
29417: GO 30276
29419: LD_INT 9
29421: DOUBLE
29422: EQUAL
29423: IFTRUE 29427
29425: GO 29453
29427: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29428: LD_ADDR_VAR 0 3
29432: PUSH
29433: LD_INT 2
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: LD_INT 4
29441: PUSH
29442: LD_INT 5
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: ST_TO_ADDR
29451: GO 30276
29453: LD_INT 7
29455: DOUBLE
29456: EQUAL
29457: IFTRUE 29461
29459: GO 29487
29461: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29462: LD_ADDR_VAR 0 3
29466: PUSH
29467: LD_INT 2
29469: PUSH
29470: LD_INT 3
29472: PUSH
29473: LD_INT 4
29475: PUSH
29476: LD_INT 5
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: ST_TO_ADDR
29485: GO 30276
29487: LD_INT 12
29489: DOUBLE
29490: EQUAL
29491: IFTRUE 29495
29493: GO 29521
29495: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29496: LD_ADDR_VAR 0 3
29500: PUSH
29501: LD_INT 2
29503: PUSH
29504: LD_INT 3
29506: PUSH
29507: LD_INT 4
29509: PUSH
29510: LD_INT 5
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: ST_TO_ADDR
29519: GO 30276
29521: LD_INT 13
29523: DOUBLE
29524: EQUAL
29525: IFTRUE 29529
29527: GO 29555
29529: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29530: LD_ADDR_VAR 0 3
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: LD_INT 3
29540: PUSH
29541: LD_INT 4
29543: PUSH
29544: LD_INT 5
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: ST_TO_ADDR
29553: GO 30276
29555: LD_INT 14
29557: DOUBLE
29558: EQUAL
29559: IFTRUE 29563
29561: GO 29581
29563: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29564: LD_ADDR_VAR 0 3
29568: PUSH
29569: LD_INT 4
29571: PUSH
29572: LD_INT 5
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: ST_TO_ADDR
29579: GO 30276
29581: LD_INT 6
29583: DOUBLE
29584: EQUAL
29585: IFTRUE 29589
29587: GO 29607
29589: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29590: LD_ADDR_VAR 0 3
29594: PUSH
29595: LD_INT 4
29597: PUSH
29598: LD_INT 5
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: ST_TO_ADDR
29605: GO 30276
29607: LD_INT 10
29609: DOUBLE
29610: EQUAL
29611: IFTRUE 29615
29613: GO 29633
29615: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29616: LD_ADDR_VAR 0 3
29620: PUSH
29621: LD_INT 4
29623: PUSH
29624: LD_INT 5
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: ST_TO_ADDR
29631: GO 30276
29633: LD_INT 22
29635: DOUBLE
29636: EQUAL
29637: IFTRUE 29641
29639: GO 29667
29641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29642: LD_ADDR_VAR 0 3
29646: PUSH
29647: LD_INT 11
29649: PUSH
29650: LD_INT 12
29652: PUSH
29653: LD_INT 13
29655: PUSH
29656: LD_INT 14
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: ST_TO_ADDR
29665: GO 30276
29667: LD_INT 23
29669: DOUBLE
29670: EQUAL
29671: IFTRUE 29675
29673: GO 29701
29675: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29676: LD_ADDR_VAR 0 3
29680: PUSH
29681: LD_INT 11
29683: PUSH
29684: LD_INT 12
29686: PUSH
29687: LD_INT 13
29689: PUSH
29690: LD_INT 14
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: ST_TO_ADDR
29699: GO 30276
29701: LD_INT 24
29703: DOUBLE
29704: EQUAL
29705: IFTRUE 29709
29707: GO 29735
29709: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29710: LD_ADDR_VAR 0 3
29714: PUSH
29715: LD_INT 11
29717: PUSH
29718: LD_INT 12
29720: PUSH
29721: LD_INT 13
29723: PUSH
29724: LD_INT 14
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: ST_TO_ADDR
29733: GO 30276
29735: LD_INT 30
29737: DOUBLE
29738: EQUAL
29739: IFTRUE 29743
29741: GO 29769
29743: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29744: LD_ADDR_VAR 0 3
29748: PUSH
29749: LD_INT 11
29751: PUSH
29752: LD_INT 12
29754: PUSH
29755: LD_INT 13
29757: PUSH
29758: LD_INT 14
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: ST_TO_ADDR
29767: GO 30276
29769: LD_INT 25
29771: DOUBLE
29772: EQUAL
29773: IFTRUE 29777
29775: GO 29795
29777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29778: LD_ADDR_VAR 0 3
29782: PUSH
29783: LD_INT 13
29785: PUSH
29786: LD_INT 14
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: ST_TO_ADDR
29793: GO 30276
29795: LD_INT 27
29797: DOUBLE
29798: EQUAL
29799: IFTRUE 29803
29801: GO 29821
29803: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29804: LD_ADDR_VAR 0 3
29808: PUSH
29809: LD_INT 13
29811: PUSH
29812: LD_INT 14
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: ST_TO_ADDR
29819: GO 30276
29821: LD_INT 92
29823: DOUBLE
29824: EQUAL
29825: IFTRUE 29829
29827: GO 29855
29829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29830: LD_ADDR_VAR 0 3
29834: PUSH
29835: LD_INT 11
29837: PUSH
29838: LD_INT 12
29840: PUSH
29841: LD_INT 13
29843: PUSH
29844: LD_INT 14
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: ST_TO_ADDR
29853: GO 30276
29855: LD_INT 28
29857: DOUBLE
29858: EQUAL
29859: IFTRUE 29863
29861: GO 29881
29863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29864: LD_ADDR_VAR 0 3
29868: PUSH
29869: LD_INT 13
29871: PUSH
29872: LD_INT 14
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: ST_TO_ADDR
29879: GO 30276
29881: LD_INT 29
29883: DOUBLE
29884: EQUAL
29885: IFTRUE 29889
29887: GO 29907
29889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29890: LD_ADDR_VAR 0 3
29894: PUSH
29895: LD_INT 13
29897: PUSH
29898: LD_INT 14
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: ST_TO_ADDR
29905: GO 30276
29907: LD_INT 31
29909: DOUBLE
29910: EQUAL
29911: IFTRUE 29915
29913: GO 29933
29915: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29916: LD_ADDR_VAR 0 3
29920: PUSH
29921: LD_INT 13
29923: PUSH
29924: LD_INT 14
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: ST_TO_ADDR
29931: GO 30276
29933: LD_INT 26
29935: DOUBLE
29936: EQUAL
29937: IFTRUE 29941
29939: GO 29959
29941: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29942: LD_ADDR_VAR 0 3
29946: PUSH
29947: LD_INT 13
29949: PUSH
29950: LD_INT 14
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: ST_TO_ADDR
29957: GO 30276
29959: LD_INT 42
29961: DOUBLE
29962: EQUAL
29963: IFTRUE 29967
29965: GO 29993
29967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29968: LD_ADDR_VAR 0 3
29972: PUSH
29973: LD_INT 21
29975: PUSH
29976: LD_INT 22
29978: PUSH
29979: LD_INT 23
29981: PUSH
29982: LD_INT 24
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: ST_TO_ADDR
29991: GO 30276
29993: LD_INT 43
29995: DOUBLE
29996: EQUAL
29997: IFTRUE 30001
29999: GO 30027
30001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30002: LD_ADDR_VAR 0 3
30006: PUSH
30007: LD_INT 21
30009: PUSH
30010: LD_INT 22
30012: PUSH
30013: LD_INT 23
30015: PUSH
30016: LD_INT 24
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: ST_TO_ADDR
30025: GO 30276
30027: LD_INT 44
30029: DOUBLE
30030: EQUAL
30031: IFTRUE 30035
30033: GO 30061
30035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30036: LD_ADDR_VAR 0 3
30040: PUSH
30041: LD_INT 21
30043: PUSH
30044: LD_INT 22
30046: PUSH
30047: LD_INT 23
30049: PUSH
30050: LD_INT 24
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: ST_TO_ADDR
30059: GO 30276
30061: LD_INT 45
30063: DOUBLE
30064: EQUAL
30065: IFTRUE 30069
30067: GO 30095
30069: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30070: LD_ADDR_VAR 0 3
30074: PUSH
30075: LD_INT 21
30077: PUSH
30078: LD_INT 22
30080: PUSH
30081: LD_INT 23
30083: PUSH
30084: LD_INT 24
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: ST_TO_ADDR
30093: GO 30276
30095: LD_INT 49
30097: DOUBLE
30098: EQUAL
30099: IFTRUE 30103
30101: GO 30129
30103: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30104: LD_ADDR_VAR 0 3
30108: PUSH
30109: LD_INT 21
30111: PUSH
30112: LD_INT 22
30114: PUSH
30115: LD_INT 23
30117: PUSH
30118: LD_INT 24
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: ST_TO_ADDR
30127: GO 30276
30129: LD_INT 51
30131: DOUBLE
30132: EQUAL
30133: IFTRUE 30137
30135: GO 30163
30137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30138: LD_ADDR_VAR 0 3
30142: PUSH
30143: LD_INT 21
30145: PUSH
30146: LD_INT 22
30148: PUSH
30149: LD_INT 23
30151: PUSH
30152: LD_INT 24
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: ST_TO_ADDR
30161: GO 30276
30163: LD_INT 52
30165: DOUBLE
30166: EQUAL
30167: IFTRUE 30171
30169: GO 30197
30171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30172: LD_ADDR_VAR 0 3
30176: PUSH
30177: LD_INT 21
30179: PUSH
30180: LD_INT 22
30182: PUSH
30183: LD_INT 23
30185: PUSH
30186: LD_INT 24
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: ST_TO_ADDR
30195: GO 30276
30197: LD_INT 53
30199: DOUBLE
30200: EQUAL
30201: IFTRUE 30205
30203: GO 30223
30205: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30206: LD_ADDR_VAR 0 3
30210: PUSH
30211: LD_INT 23
30213: PUSH
30214: LD_INT 24
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: ST_TO_ADDR
30221: GO 30276
30223: LD_INT 46
30225: DOUBLE
30226: EQUAL
30227: IFTRUE 30231
30229: GO 30249
30231: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30232: LD_ADDR_VAR 0 3
30236: PUSH
30237: LD_INT 23
30239: PUSH
30240: LD_INT 24
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: ST_TO_ADDR
30247: GO 30276
30249: LD_INT 47
30251: DOUBLE
30252: EQUAL
30253: IFTRUE 30257
30255: GO 30275
30257: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30258: LD_ADDR_VAR 0 3
30262: PUSH
30263: LD_INT 23
30265: PUSH
30266: LD_INT 24
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: ST_TO_ADDR
30273: GO 30276
30275: POP
// result := ( chassis in result ) ;
30276: LD_ADDR_VAR 0 3
30280: PUSH
30281: LD_VAR 0 1
30285: PUSH
30286: LD_VAR 0 3
30290: IN
30291: ST_TO_ADDR
// end ;
30292: LD_VAR 0 3
30296: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30297: LD_INT 0
30299: PPUSH
30300: PPUSH
30301: PPUSH
30302: PPUSH
30303: PPUSH
30304: PPUSH
30305: PPUSH
// result := array ;
30306: LD_ADDR_VAR 0 5
30310: PUSH
30311: LD_VAR 0 1
30315: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30316: LD_VAR 0 1
30320: NOT
30321: PUSH
30322: LD_VAR 0 2
30326: NOT
30327: OR
30328: PUSH
30329: LD_VAR 0 3
30333: NOT
30334: OR
30335: PUSH
30336: LD_VAR 0 2
30340: PUSH
30341: LD_VAR 0 1
30345: GREATER
30346: OR
30347: PUSH
30348: LD_VAR 0 3
30352: PUSH
30353: LD_VAR 0 1
30357: GREATER
30358: OR
30359: IFFALSE 30363
// exit ;
30361: GO 30659
// if direction then
30363: LD_VAR 0 4
30367: IFFALSE 30431
// begin d := 1 ;
30369: LD_ADDR_VAR 0 9
30373: PUSH
30374: LD_INT 1
30376: ST_TO_ADDR
// if i_from > i_to then
30377: LD_VAR 0 2
30381: PUSH
30382: LD_VAR 0 3
30386: GREATER
30387: IFFALSE 30413
// length := ( array - i_from ) + i_to else
30389: LD_ADDR_VAR 0 11
30393: PUSH
30394: LD_VAR 0 1
30398: PUSH
30399: LD_VAR 0 2
30403: MINUS
30404: PUSH
30405: LD_VAR 0 3
30409: PLUS
30410: ST_TO_ADDR
30411: GO 30429
// length := i_to - i_from ;
30413: LD_ADDR_VAR 0 11
30417: PUSH
30418: LD_VAR 0 3
30422: PUSH
30423: LD_VAR 0 2
30427: MINUS
30428: ST_TO_ADDR
// end else
30429: GO 30492
// begin d := - 1 ;
30431: LD_ADDR_VAR 0 9
30435: PUSH
30436: LD_INT 1
30438: NEG
30439: ST_TO_ADDR
// if i_from > i_to then
30440: LD_VAR 0 2
30444: PUSH
30445: LD_VAR 0 3
30449: GREATER
30450: IFFALSE 30470
// length := i_from - i_to else
30452: LD_ADDR_VAR 0 11
30456: PUSH
30457: LD_VAR 0 2
30461: PUSH
30462: LD_VAR 0 3
30466: MINUS
30467: ST_TO_ADDR
30468: GO 30492
// length := ( array - i_to ) + i_from ;
30470: LD_ADDR_VAR 0 11
30474: PUSH
30475: LD_VAR 0 1
30479: PUSH
30480: LD_VAR 0 3
30484: MINUS
30485: PUSH
30486: LD_VAR 0 2
30490: PLUS
30491: ST_TO_ADDR
// end ; if not length then
30492: LD_VAR 0 11
30496: NOT
30497: IFFALSE 30501
// exit ;
30499: GO 30659
// tmp := array ;
30501: LD_ADDR_VAR 0 10
30505: PUSH
30506: LD_VAR 0 1
30510: ST_TO_ADDR
// for i = 1 to length do
30511: LD_ADDR_VAR 0 6
30515: PUSH
30516: DOUBLE
30517: LD_INT 1
30519: DEC
30520: ST_TO_ADDR
30521: LD_VAR 0 11
30525: PUSH
30526: FOR_TO
30527: IFFALSE 30647
// begin for j = 1 to array do
30529: LD_ADDR_VAR 0 7
30533: PUSH
30534: DOUBLE
30535: LD_INT 1
30537: DEC
30538: ST_TO_ADDR
30539: LD_VAR 0 1
30543: PUSH
30544: FOR_TO
30545: IFFALSE 30633
// begin k := j + d ;
30547: LD_ADDR_VAR 0 8
30551: PUSH
30552: LD_VAR 0 7
30556: PUSH
30557: LD_VAR 0 9
30561: PLUS
30562: ST_TO_ADDR
// if k > array then
30563: LD_VAR 0 8
30567: PUSH
30568: LD_VAR 0 1
30572: GREATER
30573: IFFALSE 30583
// k := 1 ;
30575: LD_ADDR_VAR 0 8
30579: PUSH
30580: LD_INT 1
30582: ST_TO_ADDR
// if not k then
30583: LD_VAR 0 8
30587: NOT
30588: IFFALSE 30600
// k := array ;
30590: LD_ADDR_VAR 0 8
30594: PUSH
30595: LD_VAR 0 1
30599: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30600: LD_ADDR_VAR 0 10
30604: PUSH
30605: LD_VAR 0 10
30609: PPUSH
30610: LD_VAR 0 8
30614: PPUSH
30615: LD_VAR 0 1
30619: PUSH
30620: LD_VAR 0 7
30624: ARRAY
30625: PPUSH
30626: CALL_OW 1
30630: ST_TO_ADDR
// end ;
30631: GO 30544
30633: POP
30634: POP
// array := tmp ;
30635: LD_ADDR_VAR 0 1
30639: PUSH
30640: LD_VAR 0 10
30644: ST_TO_ADDR
// end ;
30645: GO 30526
30647: POP
30648: POP
// result := array ;
30649: LD_ADDR_VAR 0 5
30653: PUSH
30654: LD_VAR 0 1
30658: ST_TO_ADDR
// end ;
30659: LD_VAR 0 5
30663: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30664: LD_INT 0
30666: PPUSH
30667: PPUSH
// result := 0 ;
30668: LD_ADDR_VAR 0 3
30672: PUSH
30673: LD_INT 0
30675: ST_TO_ADDR
// if not array or not value in array then
30676: LD_VAR 0 1
30680: NOT
30681: PUSH
30682: LD_VAR 0 2
30686: PUSH
30687: LD_VAR 0 1
30691: IN
30692: NOT
30693: OR
30694: IFFALSE 30698
// exit ;
30696: GO 30752
// for i = 1 to array do
30698: LD_ADDR_VAR 0 4
30702: PUSH
30703: DOUBLE
30704: LD_INT 1
30706: DEC
30707: ST_TO_ADDR
30708: LD_VAR 0 1
30712: PUSH
30713: FOR_TO
30714: IFFALSE 30750
// if value = array [ i ] then
30716: LD_VAR 0 2
30720: PUSH
30721: LD_VAR 0 1
30725: PUSH
30726: LD_VAR 0 4
30730: ARRAY
30731: EQUAL
30732: IFFALSE 30748
// begin result := i ;
30734: LD_ADDR_VAR 0 3
30738: PUSH
30739: LD_VAR 0 4
30743: ST_TO_ADDR
// exit ;
30744: POP
30745: POP
30746: GO 30752
// end ;
30748: GO 30713
30750: POP
30751: POP
// end ;
30752: LD_VAR 0 3
30756: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30757: LD_INT 0
30759: PPUSH
// vc_chassis := chassis ;
30760: LD_ADDR_OWVAR 37
30764: PUSH
30765: LD_VAR 0 1
30769: ST_TO_ADDR
// vc_engine := engine ;
30770: LD_ADDR_OWVAR 39
30774: PUSH
30775: LD_VAR 0 2
30779: ST_TO_ADDR
// vc_control := control ;
30780: LD_ADDR_OWVAR 38
30784: PUSH
30785: LD_VAR 0 3
30789: ST_TO_ADDR
// vc_weapon := weapon ;
30790: LD_ADDR_OWVAR 40
30794: PUSH
30795: LD_VAR 0 4
30799: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30800: LD_ADDR_OWVAR 41
30804: PUSH
30805: LD_VAR 0 5
30809: ST_TO_ADDR
// end ;
30810: LD_VAR 0 6
30814: RET
// export function WantPlant ( unit ) ; var task ; begin
30815: LD_INT 0
30817: PPUSH
30818: PPUSH
// result := false ;
30819: LD_ADDR_VAR 0 2
30823: PUSH
30824: LD_INT 0
30826: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30827: LD_ADDR_VAR 0 3
30831: PUSH
30832: LD_VAR 0 1
30836: PPUSH
30837: CALL_OW 437
30841: ST_TO_ADDR
// if task then
30842: LD_VAR 0 3
30846: IFFALSE 30874
// if task [ 1 ] [ 1 ] = p then
30848: LD_VAR 0 3
30852: PUSH
30853: LD_INT 1
30855: ARRAY
30856: PUSH
30857: LD_INT 1
30859: ARRAY
30860: PUSH
30861: LD_STRING p
30863: EQUAL
30864: IFFALSE 30874
// result := true ;
30866: LD_ADDR_VAR 0 2
30870: PUSH
30871: LD_INT 1
30873: ST_TO_ADDR
// end ;
30874: LD_VAR 0 2
30878: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30879: LD_INT 0
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
// if pos < 1 then
30885: LD_VAR 0 2
30889: PUSH
30890: LD_INT 1
30892: LESS
30893: IFFALSE 30897
// exit ;
30895: GO 31200
// if pos = 1 then
30897: LD_VAR 0 2
30901: PUSH
30902: LD_INT 1
30904: EQUAL
30905: IFFALSE 30938
// result := Replace ( arr , pos [ 1 ] , value ) else
30907: LD_ADDR_VAR 0 4
30911: PUSH
30912: LD_VAR 0 1
30916: PPUSH
30917: LD_VAR 0 2
30921: PUSH
30922: LD_INT 1
30924: ARRAY
30925: PPUSH
30926: LD_VAR 0 3
30930: PPUSH
30931: CALL_OW 1
30935: ST_TO_ADDR
30936: GO 31200
// begin tmp := arr ;
30938: LD_ADDR_VAR 0 6
30942: PUSH
30943: LD_VAR 0 1
30947: ST_TO_ADDR
// s_arr := [ tmp ] ;
30948: LD_ADDR_VAR 0 7
30952: PUSH
30953: LD_VAR 0 6
30957: PUSH
30958: EMPTY
30959: LIST
30960: ST_TO_ADDR
// for i = 1 to pos - 1 do
30961: LD_ADDR_VAR 0 5
30965: PUSH
30966: DOUBLE
30967: LD_INT 1
30969: DEC
30970: ST_TO_ADDR
30971: LD_VAR 0 2
30975: PUSH
30976: LD_INT 1
30978: MINUS
30979: PUSH
30980: FOR_TO
30981: IFFALSE 31026
// begin tmp := tmp [ pos [ i ] ] ;
30983: LD_ADDR_VAR 0 6
30987: PUSH
30988: LD_VAR 0 6
30992: PUSH
30993: LD_VAR 0 2
30997: PUSH
30998: LD_VAR 0 5
31002: ARRAY
31003: ARRAY
31004: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31005: LD_ADDR_VAR 0 7
31009: PUSH
31010: LD_VAR 0 7
31014: PUSH
31015: LD_VAR 0 6
31019: PUSH
31020: EMPTY
31021: LIST
31022: ADD
31023: ST_TO_ADDR
// end ;
31024: GO 30980
31026: POP
31027: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31028: LD_ADDR_VAR 0 6
31032: PUSH
31033: LD_VAR 0 6
31037: PPUSH
31038: LD_VAR 0 2
31042: PUSH
31043: LD_VAR 0 2
31047: ARRAY
31048: PPUSH
31049: LD_VAR 0 3
31053: PPUSH
31054: CALL_OW 1
31058: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31059: LD_ADDR_VAR 0 7
31063: PUSH
31064: LD_VAR 0 7
31068: PPUSH
31069: LD_VAR 0 7
31073: PPUSH
31074: LD_VAR 0 6
31078: PPUSH
31079: CALL_OW 1
31083: ST_TO_ADDR
// for i = s_arr downto 2 do
31084: LD_ADDR_VAR 0 5
31088: PUSH
31089: DOUBLE
31090: LD_VAR 0 7
31094: INC
31095: ST_TO_ADDR
31096: LD_INT 2
31098: PUSH
31099: FOR_DOWNTO
31100: IFFALSE 31184
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31102: LD_ADDR_VAR 0 6
31106: PUSH
31107: LD_VAR 0 7
31111: PUSH
31112: LD_VAR 0 5
31116: PUSH
31117: LD_INT 1
31119: MINUS
31120: ARRAY
31121: PPUSH
31122: LD_VAR 0 2
31126: PUSH
31127: LD_VAR 0 5
31131: PUSH
31132: LD_INT 1
31134: MINUS
31135: ARRAY
31136: PPUSH
31137: LD_VAR 0 7
31141: PUSH
31142: LD_VAR 0 5
31146: ARRAY
31147: PPUSH
31148: CALL_OW 1
31152: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31153: LD_ADDR_VAR 0 7
31157: PUSH
31158: LD_VAR 0 7
31162: PPUSH
31163: LD_VAR 0 5
31167: PUSH
31168: LD_INT 1
31170: MINUS
31171: PPUSH
31172: LD_VAR 0 6
31176: PPUSH
31177: CALL_OW 1
31181: ST_TO_ADDR
// end ;
31182: GO 31099
31184: POP
31185: POP
// result := s_arr [ 1 ] ;
31186: LD_ADDR_VAR 0 4
31190: PUSH
31191: LD_VAR 0 7
31195: PUSH
31196: LD_INT 1
31198: ARRAY
31199: ST_TO_ADDR
// end ; end ;
31200: LD_VAR 0 4
31204: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31205: LD_INT 0
31207: PPUSH
31208: PPUSH
// if not list then
31209: LD_VAR 0 1
31213: NOT
31214: IFFALSE 31218
// exit ;
31216: GO 31309
// i := list [ pos1 ] ;
31218: LD_ADDR_VAR 0 5
31222: PUSH
31223: LD_VAR 0 1
31227: PUSH
31228: LD_VAR 0 2
31232: ARRAY
31233: ST_TO_ADDR
// if not i then
31234: LD_VAR 0 5
31238: NOT
31239: IFFALSE 31243
// exit ;
31241: GO 31309
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31243: LD_ADDR_VAR 0 1
31247: PUSH
31248: LD_VAR 0 1
31252: PPUSH
31253: LD_VAR 0 2
31257: PPUSH
31258: LD_VAR 0 1
31262: PUSH
31263: LD_VAR 0 3
31267: ARRAY
31268: PPUSH
31269: CALL_OW 1
31273: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31274: LD_ADDR_VAR 0 1
31278: PUSH
31279: LD_VAR 0 1
31283: PPUSH
31284: LD_VAR 0 3
31288: PPUSH
31289: LD_VAR 0 5
31293: PPUSH
31294: CALL_OW 1
31298: ST_TO_ADDR
// result := list ;
31299: LD_ADDR_VAR 0 4
31303: PUSH
31304: LD_VAR 0 1
31308: ST_TO_ADDR
// end ;
31309: LD_VAR 0 4
31313: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31314: LD_INT 0
31316: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31317: LD_ADDR_VAR 0 5
31321: PUSH
31322: LD_VAR 0 1
31326: PPUSH
31327: CALL_OW 250
31331: PPUSH
31332: LD_VAR 0 1
31336: PPUSH
31337: CALL_OW 251
31341: PPUSH
31342: LD_VAR 0 2
31346: PPUSH
31347: LD_VAR 0 3
31351: PPUSH
31352: LD_VAR 0 4
31356: PPUSH
31357: CALL 31367 0 5
31361: ST_TO_ADDR
// end ;
31362: LD_VAR 0 5
31366: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31367: LD_INT 0
31369: PPUSH
31370: PPUSH
31371: PPUSH
31372: PPUSH
// if not list then
31373: LD_VAR 0 3
31377: NOT
31378: IFFALSE 31382
// exit ;
31380: GO 31770
// result := [ ] ;
31382: LD_ADDR_VAR 0 6
31386: PUSH
31387: EMPTY
31388: ST_TO_ADDR
// for i in list do
31389: LD_ADDR_VAR 0 7
31393: PUSH
31394: LD_VAR 0 3
31398: PUSH
31399: FOR_IN
31400: IFFALSE 31602
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31402: LD_ADDR_VAR 0 9
31406: PUSH
31407: LD_VAR 0 7
31411: PPUSH
31412: LD_VAR 0 1
31416: PPUSH
31417: LD_VAR 0 2
31421: PPUSH
31422: CALL_OW 297
31426: ST_TO_ADDR
// if not result then
31427: LD_VAR 0 6
31431: NOT
31432: IFFALSE 31458
// result := [ [ i , tmp ] ] else
31434: LD_ADDR_VAR 0 6
31438: PUSH
31439: LD_VAR 0 7
31443: PUSH
31444: LD_VAR 0 9
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: EMPTY
31454: LIST
31455: ST_TO_ADDR
31456: GO 31600
// begin if result [ result ] [ 2 ] < tmp then
31458: LD_VAR 0 6
31462: PUSH
31463: LD_VAR 0 6
31467: ARRAY
31468: PUSH
31469: LD_INT 2
31471: ARRAY
31472: PUSH
31473: LD_VAR 0 9
31477: LESS
31478: IFFALSE 31520
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31480: LD_ADDR_VAR 0 6
31484: PUSH
31485: LD_VAR 0 6
31489: PPUSH
31490: LD_VAR 0 6
31494: PUSH
31495: LD_INT 1
31497: PLUS
31498: PPUSH
31499: LD_VAR 0 7
31503: PUSH
31504: LD_VAR 0 9
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PPUSH
31513: CALL_OW 2
31517: ST_TO_ADDR
31518: GO 31600
// for j = 1 to result do
31520: LD_ADDR_VAR 0 8
31524: PUSH
31525: DOUBLE
31526: LD_INT 1
31528: DEC
31529: ST_TO_ADDR
31530: LD_VAR 0 6
31534: PUSH
31535: FOR_TO
31536: IFFALSE 31598
// begin if tmp < result [ j ] [ 2 ] then
31538: LD_VAR 0 9
31542: PUSH
31543: LD_VAR 0 6
31547: PUSH
31548: LD_VAR 0 8
31552: ARRAY
31553: PUSH
31554: LD_INT 2
31556: ARRAY
31557: LESS
31558: IFFALSE 31596
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31560: LD_ADDR_VAR 0 6
31564: PUSH
31565: LD_VAR 0 6
31569: PPUSH
31570: LD_VAR 0 8
31574: PPUSH
31575: LD_VAR 0 7
31579: PUSH
31580: LD_VAR 0 9
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PPUSH
31589: CALL_OW 2
31593: ST_TO_ADDR
// break ;
31594: GO 31598
// end ; end ;
31596: GO 31535
31598: POP
31599: POP
// end ; end ;
31600: GO 31399
31602: POP
31603: POP
// if result and not asc then
31604: LD_VAR 0 6
31608: PUSH
31609: LD_VAR 0 4
31613: NOT
31614: AND
31615: IFFALSE 31690
// begin tmp := result ;
31617: LD_ADDR_VAR 0 9
31621: PUSH
31622: LD_VAR 0 6
31626: ST_TO_ADDR
// for i = tmp downto 1 do
31627: LD_ADDR_VAR 0 7
31631: PUSH
31632: DOUBLE
31633: LD_VAR 0 9
31637: INC
31638: ST_TO_ADDR
31639: LD_INT 1
31641: PUSH
31642: FOR_DOWNTO
31643: IFFALSE 31688
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31645: LD_ADDR_VAR 0 6
31649: PUSH
31650: LD_VAR 0 6
31654: PPUSH
31655: LD_VAR 0 9
31659: PUSH
31660: LD_VAR 0 7
31664: MINUS
31665: PUSH
31666: LD_INT 1
31668: PLUS
31669: PPUSH
31670: LD_VAR 0 9
31674: PUSH
31675: LD_VAR 0 7
31679: ARRAY
31680: PPUSH
31681: CALL_OW 1
31685: ST_TO_ADDR
31686: GO 31642
31688: POP
31689: POP
// end ; tmp := [ ] ;
31690: LD_ADDR_VAR 0 9
31694: PUSH
31695: EMPTY
31696: ST_TO_ADDR
// if mode then
31697: LD_VAR 0 5
31701: IFFALSE 31770
// begin for i = 1 to result do
31703: LD_ADDR_VAR 0 7
31707: PUSH
31708: DOUBLE
31709: LD_INT 1
31711: DEC
31712: ST_TO_ADDR
31713: LD_VAR 0 6
31717: PUSH
31718: FOR_TO
31719: IFFALSE 31758
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31721: LD_ADDR_VAR 0 9
31725: PUSH
31726: LD_VAR 0 9
31730: PPUSH
31731: LD_VAR 0 7
31735: PPUSH
31736: LD_VAR 0 6
31740: PUSH
31741: LD_VAR 0 7
31745: ARRAY
31746: PUSH
31747: LD_INT 1
31749: ARRAY
31750: PPUSH
31751: CALL_OW 1
31755: ST_TO_ADDR
31756: GO 31718
31758: POP
31759: POP
// result := tmp ;
31760: LD_ADDR_VAR 0 6
31764: PUSH
31765: LD_VAR 0 9
31769: ST_TO_ADDR
// end ; end ;
31770: LD_VAR 0 6
31774: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31775: LD_INT 0
31777: PPUSH
31778: PPUSH
31779: PPUSH
31780: PPUSH
31781: PPUSH
31782: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31783: LD_ADDR_VAR 0 5
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: EMPTY
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: ST_TO_ADDR
// if not x or not y then
31805: LD_VAR 0 2
31809: NOT
31810: PUSH
31811: LD_VAR 0 3
31815: NOT
31816: OR
31817: IFFALSE 31821
// exit ;
31819: GO 33471
// if not range then
31821: LD_VAR 0 4
31825: NOT
31826: IFFALSE 31836
// range := 10 ;
31828: LD_ADDR_VAR 0 4
31832: PUSH
31833: LD_INT 10
31835: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31836: LD_ADDR_VAR 0 8
31840: PUSH
31841: LD_INT 81
31843: PUSH
31844: LD_VAR 0 1
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 92
31855: PUSH
31856: LD_VAR 0 2
31860: PUSH
31861: LD_VAR 0 3
31865: PUSH
31866: LD_VAR 0 4
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 3
31879: PUSH
31880: LD_INT 21
31882: PUSH
31883: LD_INT 3
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: PPUSH
31899: CALL_OW 69
31903: ST_TO_ADDR
// if not tmp then
31904: LD_VAR 0 8
31908: NOT
31909: IFFALSE 31913
// exit ;
31911: GO 33471
// for i in tmp do
31913: LD_ADDR_VAR 0 6
31917: PUSH
31918: LD_VAR 0 8
31922: PUSH
31923: FOR_IN
31924: IFFALSE 33446
// begin points := [ 0 , 0 , 0 ] ;
31926: LD_ADDR_VAR 0 9
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: LIST
31944: ST_TO_ADDR
// bpoints := 1 ;
31945: LD_ADDR_VAR 0 10
31949: PUSH
31950: LD_INT 1
31952: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31953: LD_VAR 0 6
31957: PPUSH
31958: CALL_OW 247
31962: PUSH
31963: LD_INT 1
31965: DOUBLE
31966: EQUAL
31967: IFTRUE 31971
31969: GO 32549
31971: POP
// begin if GetClass ( i ) = 1 then
31972: LD_VAR 0 6
31976: PPUSH
31977: CALL_OW 257
31981: PUSH
31982: LD_INT 1
31984: EQUAL
31985: IFFALSE 32006
// points := [ 10 , 5 , 3 ] ;
31987: LD_ADDR_VAR 0 9
31991: PUSH
31992: LD_INT 10
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: LD_INT 3
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32006: LD_VAR 0 6
32010: PPUSH
32011: CALL_OW 257
32015: PUSH
32016: LD_INT 2
32018: PUSH
32019: LD_INT 3
32021: PUSH
32022: LD_INT 4
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: IN
32030: IFFALSE 32051
// points := [ 3 , 2 , 1 ] ;
32032: LD_ADDR_VAR 0 9
32036: PUSH
32037: LD_INT 3
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: LIST
32050: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32051: LD_VAR 0 6
32055: PPUSH
32056: CALL_OW 257
32060: PUSH
32061: LD_INT 5
32063: EQUAL
32064: IFFALSE 32085
// points := [ 130 , 5 , 2 ] ;
32066: LD_ADDR_VAR 0 9
32070: PUSH
32071: LD_INT 130
32073: PUSH
32074: LD_INT 5
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32085: LD_VAR 0 6
32089: PPUSH
32090: CALL_OW 257
32094: PUSH
32095: LD_INT 8
32097: EQUAL
32098: IFFALSE 32119
// points := [ 35 , 35 , 30 ] ;
32100: LD_ADDR_VAR 0 9
32104: PUSH
32105: LD_INT 35
32107: PUSH
32108: LD_INT 35
32110: PUSH
32111: LD_INT 30
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: LIST
32118: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32119: LD_VAR 0 6
32123: PPUSH
32124: CALL_OW 257
32128: PUSH
32129: LD_INT 9
32131: EQUAL
32132: IFFALSE 32153
// points := [ 20 , 55 , 40 ] ;
32134: LD_ADDR_VAR 0 9
32138: PUSH
32139: LD_INT 20
32141: PUSH
32142: LD_INT 55
32144: PUSH
32145: LD_INT 40
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32153: LD_VAR 0 6
32157: PPUSH
32158: CALL_OW 257
32162: PUSH
32163: LD_INT 12
32165: PUSH
32166: LD_INT 16
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: IN
32173: IFFALSE 32194
// points := [ 5 , 3 , 2 ] ;
32175: LD_ADDR_VAR 0 9
32179: PUSH
32180: LD_INT 5
32182: PUSH
32183: LD_INT 3
32185: PUSH
32186: LD_INT 2
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32194: LD_VAR 0 6
32198: PPUSH
32199: CALL_OW 257
32203: PUSH
32204: LD_INT 17
32206: EQUAL
32207: IFFALSE 32228
// points := [ 100 , 50 , 75 ] ;
32209: LD_ADDR_VAR 0 9
32213: PUSH
32214: LD_INT 100
32216: PUSH
32217: LD_INT 50
32219: PUSH
32220: LD_INT 75
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: LIST
32227: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32228: LD_VAR 0 6
32232: PPUSH
32233: CALL_OW 257
32237: PUSH
32238: LD_INT 15
32240: EQUAL
32241: IFFALSE 32262
// points := [ 10 , 5 , 3 ] ;
32243: LD_ADDR_VAR 0 9
32247: PUSH
32248: LD_INT 10
32250: PUSH
32251: LD_INT 5
32253: PUSH
32254: LD_INT 3
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32262: LD_VAR 0 6
32266: PPUSH
32267: CALL_OW 257
32271: PUSH
32272: LD_INT 14
32274: EQUAL
32275: IFFALSE 32296
// points := [ 10 , 0 , 0 ] ;
32277: LD_ADDR_VAR 0 9
32281: PUSH
32282: LD_INT 10
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 0
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32296: LD_VAR 0 6
32300: PPUSH
32301: CALL_OW 257
32305: PUSH
32306: LD_INT 11
32308: EQUAL
32309: IFFALSE 32330
// points := [ 30 , 10 , 5 ] ;
32311: LD_ADDR_VAR 0 9
32315: PUSH
32316: LD_INT 30
32318: PUSH
32319: LD_INT 10
32321: PUSH
32322: LD_INT 5
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32330: LD_VAR 0 1
32334: PPUSH
32335: LD_INT 5
32337: PPUSH
32338: CALL_OW 321
32342: PUSH
32343: LD_INT 2
32345: EQUAL
32346: IFFALSE 32363
// bpoints := bpoints * 1.8 ;
32348: LD_ADDR_VAR 0 10
32352: PUSH
32353: LD_VAR 0 10
32357: PUSH
32358: LD_REAL  1.80000000000000E+0000
32361: MUL
32362: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32363: LD_VAR 0 6
32367: PPUSH
32368: CALL_OW 257
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: LD_INT 2
32378: PUSH
32379: LD_INT 3
32381: PUSH
32382: LD_INT 4
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: IN
32391: PUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: LD_INT 51
32399: PPUSH
32400: CALL_OW 321
32404: PUSH
32405: LD_INT 2
32407: EQUAL
32408: AND
32409: IFFALSE 32426
// bpoints := bpoints * 1.2 ;
32411: LD_ADDR_VAR 0 10
32415: PUSH
32416: LD_VAR 0 10
32420: PUSH
32421: LD_REAL  1.20000000000000E+0000
32424: MUL
32425: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32426: LD_VAR 0 6
32430: PPUSH
32431: CALL_OW 257
32435: PUSH
32436: LD_INT 5
32438: PUSH
32439: LD_INT 7
32441: PUSH
32442: LD_INT 9
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: LIST
32449: IN
32450: PUSH
32451: LD_VAR 0 1
32455: PPUSH
32456: LD_INT 52
32458: PPUSH
32459: CALL_OW 321
32463: PUSH
32464: LD_INT 2
32466: EQUAL
32467: AND
32468: IFFALSE 32485
// bpoints := bpoints * 1.5 ;
32470: LD_ADDR_VAR 0 10
32474: PUSH
32475: LD_VAR 0 10
32479: PUSH
32480: LD_REAL  1.50000000000000E+0000
32483: MUL
32484: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32485: LD_VAR 0 1
32489: PPUSH
32490: LD_INT 66
32492: PPUSH
32493: CALL_OW 321
32497: PUSH
32498: LD_INT 2
32500: EQUAL
32501: IFFALSE 32518
// bpoints := bpoints * 1.1 ;
32503: LD_ADDR_VAR 0 10
32507: PUSH
32508: LD_VAR 0 10
32512: PUSH
32513: LD_REAL  1.10000000000000E+0000
32516: MUL
32517: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32518: LD_ADDR_VAR 0 10
32522: PUSH
32523: LD_VAR 0 10
32527: PUSH
32528: LD_VAR 0 6
32532: PPUSH
32533: LD_INT 1
32535: PPUSH
32536: CALL_OW 259
32540: PUSH
32541: LD_REAL  1.15000000000000E+0000
32544: MUL
32545: MUL
32546: ST_TO_ADDR
// end ; unit_vehicle :
32547: GO 33375
32549: LD_INT 2
32551: DOUBLE
32552: EQUAL
32553: IFTRUE 32557
32555: GO 33363
32557: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32558: LD_VAR 0 6
32562: PPUSH
32563: CALL_OW 264
32567: PUSH
32568: LD_INT 2
32570: PUSH
32571: LD_INT 42
32573: PUSH
32574: LD_INT 24
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: LIST
32581: IN
32582: IFFALSE 32603
// points := [ 25 , 5 , 3 ] ;
32584: LD_ADDR_VAR 0 9
32588: PUSH
32589: LD_INT 25
32591: PUSH
32592: LD_INT 5
32594: PUSH
32595: LD_INT 3
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32603: LD_VAR 0 6
32607: PPUSH
32608: CALL_OW 264
32612: PUSH
32613: LD_INT 4
32615: PUSH
32616: LD_INT 43
32618: PUSH
32619: LD_INT 25
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: IN
32627: IFFALSE 32648
// points := [ 40 , 15 , 5 ] ;
32629: LD_ADDR_VAR 0 9
32633: PUSH
32634: LD_INT 40
32636: PUSH
32637: LD_INT 15
32639: PUSH
32640: LD_INT 5
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: LIST
32647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32648: LD_VAR 0 6
32652: PPUSH
32653: CALL_OW 264
32657: PUSH
32658: LD_INT 3
32660: PUSH
32661: LD_INT 23
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: IN
32668: IFFALSE 32689
// points := [ 7 , 25 , 8 ] ;
32670: LD_ADDR_VAR 0 9
32674: PUSH
32675: LD_INT 7
32677: PUSH
32678: LD_INT 25
32680: PUSH
32681: LD_INT 8
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32689: LD_VAR 0 6
32693: PPUSH
32694: CALL_OW 264
32698: PUSH
32699: LD_INT 5
32701: PUSH
32702: LD_INT 27
32704: PUSH
32705: LD_INT 44
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: IN
32713: IFFALSE 32734
// points := [ 14 , 50 , 16 ] ;
32715: LD_ADDR_VAR 0 9
32719: PUSH
32720: LD_INT 14
32722: PUSH
32723: LD_INT 50
32725: PUSH
32726: LD_INT 16
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: LIST
32733: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32734: LD_VAR 0 6
32738: PPUSH
32739: CALL_OW 264
32743: PUSH
32744: LD_INT 6
32746: PUSH
32747: LD_INT 46
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: IN
32754: IFFALSE 32775
// points := [ 32 , 120 , 70 ] ;
32756: LD_ADDR_VAR 0 9
32760: PUSH
32761: LD_INT 32
32763: PUSH
32764: LD_INT 120
32766: PUSH
32767: LD_INT 70
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32775: LD_VAR 0 6
32779: PPUSH
32780: CALL_OW 264
32784: PUSH
32785: LD_INT 7
32787: PUSH
32788: LD_INT 28
32790: PUSH
32791: LD_INT 45
32793: PUSH
32794: LD_INT 92
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: IN
32803: IFFALSE 32824
// points := [ 35 , 20 , 45 ] ;
32805: LD_ADDR_VAR 0 9
32809: PUSH
32810: LD_INT 35
32812: PUSH
32813: LD_INT 20
32815: PUSH
32816: LD_INT 45
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: LIST
32823: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32824: LD_VAR 0 6
32828: PPUSH
32829: CALL_OW 264
32833: PUSH
32834: LD_INT 47
32836: PUSH
32837: EMPTY
32838: LIST
32839: IN
32840: IFFALSE 32861
// points := [ 67 , 45 , 75 ] ;
32842: LD_ADDR_VAR 0 9
32846: PUSH
32847: LD_INT 67
32849: PUSH
32850: LD_INT 45
32852: PUSH
32853: LD_INT 75
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: LIST
32860: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32861: LD_VAR 0 6
32865: PPUSH
32866: CALL_OW 264
32870: PUSH
32871: LD_INT 26
32873: PUSH
32874: EMPTY
32875: LIST
32876: IN
32877: IFFALSE 32898
// points := [ 120 , 30 , 80 ] ;
32879: LD_ADDR_VAR 0 9
32883: PUSH
32884: LD_INT 120
32886: PUSH
32887: LD_INT 30
32889: PUSH
32890: LD_INT 80
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32898: LD_VAR 0 6
32902: PPUSH
32903: CALL_OW 264
32907: PUSH
32908: LD_INT 22
32910: PUSH
32911: EMPTY
32912: LIST
32913: IN
32914: IFFALSE 32935
// points := [ 40 , 1 , 1 ] ;
32916: LD_ADDR_VAR 0 9
32920: PUSH
32921: LD_INT 40
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: LIST
32934: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32935: LD_VAR 0 6
32939: PPUSH
32940: CALL_OW 264
32944: PUSH
32945: LD_INT 29
32947: PUSH
32948: EMPTY
32949: LIST
32950: IN
32951: IFFALSE 32972
// points := [ 70 , 200 , 400 ] ;
32953: LD_ADDR_VAR 0 9
32957: PUSH
32958: LD_INT 70
32960: PUSH
32961: LD_INT 200
32963: PUSH
32964: LD_INT 400
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32972: LD_VAR 0 6
32976: PPUSH
32977: CALL_OW 264
32981: PUSH
32982: LD_INT 14
32984: PUSH
32985: LD_INT 53
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: IN
32992: IFFALSE 33013
// points := [ 40 , 10 , 20 ] ;
32994: LD_ADDR_VAR 0 9
32998: PUSH
32999: LD_INT 40
33001: PUSH
33002: LD_INT 10
33004: PUSH
33005: LD_INT 20
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: LIST
33012: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33013: LD_VAR 0 6
33017: PPUSH
33018: CALL_OW 264
33022: PUSH
33023: LD_INT 9
33025: PUSH
33026: EMPTY
33027: LIST
33028: IN
33029: IFFALSE 33050
// points := [ 5 , 70 , 20 ] ;
33031: LD_ADDR_VAR 0 9
33035: PUSH
33036: LD_INT 5
33038: PUSH
33039: LD_INT 70
33041: PUSH
33042: LD_INT 20
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33050: LD_VAR 0 6
33054: PPUSH
33055: CALL_OW 264
33059: PUSH
33060: LD_INT 10
33062: PUSH
33063: EMPTY
33064: LIST
33065: IN
33066: IFFALSE 33087
// points := [ 35 , 110 , 70 ] ;
33068: LD_ADDR_VAR 0 9
33072: PUSH
33073: LD_INT 35
33075: PUSH
33076: LD_INT 110
33078: PUSH
33079: LD_INT 70
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: LIST
33086: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33087: LD_VAR 0 6
33091: PPUSH
33092: CALL_OW 265
33096: PUSH
33097: LD_INT 25
33099: EQUAL
33100: IFFALSE 33121
// points := [ 80 , 65 , 100 ] ;
33102: LD_ADDR_VAR 0 9
33106: PUSH
33107: LD_INT 80
33109: PUSH
33110: LD_INT 65
33112: PUSH
33113: LD_INT 100
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: LIST
33120: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33121: LD_VAR 0 6
33125: PPUSH
33126: CALL_OW 263
33130: PUSH
33131: LD_INT 1
33133: EQUAL
33134: IFFALSE 33169
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33136: LD_ADDR_VAR 0 10
33140: PUSH
33141: LD_VAR 0 10
33145: PUSH
33146: LD_VAR 0 6
33150: PPUSH
33151: CALL_OW 311
33155: PPUSH
33156: LD_INT 3
33158: PPUSH
33159: CALL_OW 259
33163: PUSH
33164: LD_INT 4
33166: MUL
33167: MUL
33168: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33169: LD_VAR 0 6
33173: PPUSH
33174: CALL_OW 263
33178: PUSH
33179: LD_INT 2
33181: EQUAL
33182: IFFALSE 33233
// begin j := IsControledBy ( i ) ;
33184: LD_ADDR_VAR 0 7
33188: PUSH
33189: LD_VAR 0 6
33193: PPUSH
33194: CALL_OW 312
33198: ST_TO_ADDR
// if j then
33199: LD_VAR 0 7
33203: IFFALSE 33233
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33205: LD_ADDR_VAR 0 10
33209: PUSH
33210: LD_VAR 0 10
33214: PUSH
33215: LD_VAR 0 7
33219: PPUSH
33220: LD_INT 3
33222: PPUSH
33223: CALL_OW 259
33227: PUSH
33228: LD_INT 3
33230: MUL
33231: MUL
33232: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33233: LD_VAR 0 6
33237: PPUSH
33238: CALL_OW 264
33242: PUSH
33243: LD_INT 5
33245: PUSH
33246: LD_INT 6
33248: PUSH
33249: LD_INT 46
33251: PUSH
33252: LD_INT 44
33254: PUSH
33255: LD_INT 47
33257: PUSH
33258: LD_INT 45
33260: PUSH
33261: LD_INT 28
33263: PUSH
33264: LD_INT 7
33266: PUSH
33267: LD_INT 27
33269: PUSH
33270: LD_INT 29
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: IN
33285: PUSH
33286: LD_VAR 0 1
33290: PPUSH
33291: LD_INT 52
33293: PPUSH
33294: CALL_OW 321
33298: PUSH
33299: LD_INT 2
33301: EQUAL
33302: AND
33303: IFFALSE 33320
// bpoints := bpoints * 1.2 ;
33305: LD_ADDR_VAR 0 10
33309: PUSH
33310: LD_VAR 0 10
33314: PUSH
33315: LD_REAL  1.20000000000000E+0000
33318: MUL
33319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33320: LD_VAR 0 6
33324: PPUSH
33325: CALL_OW 264
33329: PUSH
33330: LD_INT 6
33332: PUSH
33333: LD_INT 46
33335: PUSH
33336: LD_INT 47
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: LIST
33343: IN
33344: IFFALSE 33361
// bpoints := bpoints * 1.2 ;
33346: LD_ADDR_VAR 0 10
33350: PUSH
33351: LD_VAR 0 10
33355: PUSH
33356: LD_REAL  1.20000000000000E+0000
33359: MUL
33360: ST_TO_ADDR
// end ; unit_building :
33361: GO 33375
33363: LD_INT 3
33365: DOUBLE
33366: EQUAL
33367: IFTRUE 33371
33369: GO 33374
33371: POP
// ; end ;
33372: GO 33375
33374: POP
// for j = 1 to 3 do
33375: LD_ADDR_VAR 0 7
33379: PUSH
33380: DOUBLE
33381: LD_INT 1
33383: DEC
33384: ST_TO_ADDR
33385: LD_INT 3
33387: PUSH
33388: FOR_TO
33389: IFFALSE 33442
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33391: LD_ADDR_VAR 0 5
33395: PUSH
33396: LD_VAR 0 5
33400: PPUSH
33401: LD_VAR 0 7
33405: PPUSH
33406: LD_VAR 0 5
33410: PUSH
33411: LD_VAR 0 7
33415: ARRAY
33416: PUSH
33417: LD_VAR 0 9
33421: PUSH
33422: LD_VAR 0 7
33426: ARRAY
33427: PUSH
33428: LD_VAR 0 10
33432: MUL
33433: PLUS
33434: PPUSH
33435: CALL_OW 1
33439: ST_TO_ADDR
33440: GO 33388
33442: POP
33443: POP
// end ;
33444: GO 31923
33446: POP
33447: POP
// result := Replace ( result , 4 , tmp ) ;
33448: LD_ADDR_VAR 0 5
33452: PUSH
33453: LD_VAR 0 5
33457: PPUSH
33458: LD_INT 4
33460: PPUSH
33461: LD_VAR 0 8
33465: PPUSH
33466: CALL_OW 1
33470: ST_TO_ADDR
// end ;
33471: LD_VAR 0 5
33475: RET
// export function DangerAtRange ( unit , range ) ; begin
33476: LD_INT 0
33478: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33479: LD_ADDR_VAR 0 3
33483: PUSH
33484: LD_VAR 0 1
33488: PPUSH
33489: CALL_OW 255
33493: PPUSH
33494: LD_VAR 0 1
33498: PPUSH
33499: CALL_OW 250
33503: PPUSH
33504: LD_VAR 0 1
33508: PPUSH
33509: CALL_OW 251
33513: PPUSH
33514: LD_VAR 0 2
33518: PPUSH
33519: CALL 31775 0 4
33523: ST_TO_ADDR
// end ;
33524: LD_VAR 0 3
33528: RET
// export function DangerInArea ( side , area ) ; begin
33529: LD_INT 0
33531: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33532: LD_ADDR_VAR 0 3
33536: PUSH
33537: LD_VAR 0 2
33541: PPUSH
33542: LD_INT 81
33544: PUSH
33545: LD_VAR 0 1
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PPUSH
33554: CALL_OW 70
33558: ST_TO_ADDR
// end ;
33559: LD_VAR 0 3
33563: RET
// export function IsExtension ( b ) ; begin
33564: LD_INT 0
33566: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33567: LD_ADDR_VAR 0 2
33571: PUSH
33572: LD_VAR 0 1
33576: PUSH
33577: LD_INT 23
33579: PUSH
33580: LD_INT 20
33582: PUSH
33583: LD_INT 22
33585: PUSH
33586: LD_INT 17
33588: PUSH
33589: LD_INT 24
33591: PUSH
33592: LD_INT 21
33594: PUSH
33595: LD_INT 19
33597: PUSH
33598: LD_INT 16
33600: PUSH
33601: LD_INT 25
33603: PUSH
33604: LD_INT 18
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: IN
33619: ST_TO_ADDR
// end ;
33620: LD_VAR 0 2
33624: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33625: LD_INT 0
33627: PPUSH
33628: PPUSH
33629: PPUSH
// result := [ ] ;
33630: LD_ADDR_VAR 0 4
33634: PUSH
33635: EMPTY
33636: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33637: LD_ADDR_VAR 0 5
33641: PUSH
33642: LD_VAR 0 2
33646: PPUSH
33647: LD_INT 21
33649: PUSH
33650: LD_INT 3
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PPUSH
33657: CALL_OW 70
33661: ST_TO_ADDR
// if not tmp then
33662: LD_VAR 0 5
33666: NOT
33667: IFFALSE 33671
// exit ;
33669: GO 33735
// if checkLink then
33671: LD_VAR 0 3
33675: IFFALSE 33725
// begin for i in tmp do
33677: LD_ADDR_VAR 0 6
33681: PUSH
33682: LD_VAR 0 5
33686: PUSH
33687: FOR_IN
33688: IFFALSE 33723
// if GetBase ( i ) <> base then
33690: LD_VAR 0 6
33694: PPUSH
33695: CALL_OW 274
33699: PUSH
33700: LD_VAR 0 1
33704: NONEQUAL
33705: IFFALSE 33721
// ComLinkToBase ( base , i ) ;
33707: LD_VAR 0 1
33711: PPUSH
33712: LD_VAR 0 6
33716: PPUSH
33717: CALL_OW 169
33721: GO 33687
33723: POP
33724: POP
// end ; result := tmp ;
33725: LD_ADDR_VAR 0 4
33729: PUSH
33730: LD_VAR 0 5
33734: ST_TO_ADDR
// end ;
33735: LD_VAR 0 4
33739: RET
// export function ComComplete ( units , b ) ; var i ; begin
33740: LD_INT 0
33742: PPUSH
33743: PPUSH
// if not units then
33744: LD_VAR 0 1
33748: NOT
33749: IFFALSE 33753
// exit ;
33751: GO 33843
// for i in units do
33753: LD_ADDR_VAR 0 4
33757: PUSH
33758: LD_VAR 0 1
33762: PUSH
33763: FOR_IN
33764: IFFALSE 33841
// if BuildingStatus ( b ) = bs_build then
33766: LD_VAR 0 2
33770: PPUSH
33771: CALL_OW 461
33775: PUSH
33776: LD_INT 1
33778: EQUAL
33779: IFFALSE 33839
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33781: LD_VAR 0 4
33785: PPUSH
33786: LD_STRING h
33788: PUSH
33789: LD_VAR 0 2
33793: PPUSH
33794: CALL_OW 250
33798: PUSH
33799: LD_VAR 0 2
33803: PPUSH
33804: CALL_OW 251
33808: PUSH
33809: LD_VAR 0 2
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: LD_INT 0
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: PUSH
33832: EMPTY
33833: LIST
33834: PPUSH
33835: CALL_OW 446
33839: GO 33763
33841: POP
33842: POP
// end ;
33843: LD_VAR 0 3
33847: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33848: LD_INT 0
33850: PPUSH
33851: PPUSH
33852: PPUSH
33853: PPUSH
33854: PPUSH
33855: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33856: LD_VAR 0 1
33860: NOT
33861: PUSH
33862: LD_VAR 0 1
33866: PPUSH
33867: CALL_OW 263
33871: PUSH
33872: LD_INT 2
33874: NONEQUAL
33875: OR
33876: IFFALSE 33880
// exit ;
33878: GO 34196
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33880: LD_ADDR_VAR 0 6
33884: PUSH
33885: LD_INT 22
33887: PUSH
33888: LD_VAR 0 1
33892: PPUSH
33893: CALL_OW 255
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: LD_INT 30
33907: PUSH
33908: LD_INT 36
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 34
33917: PUSH
33918: LD_INT 31
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: LIST
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PPUSH
33934: CALL_OW 69
33938: ST_TO_ADDR
// if not tmp then
33939: LD_VAR 0 6
33943: NOT
33944: IFFALSE 33948
// exit ;
33946: GO 34196
// result := [ ] ;
33948: LD_ADDR_VAR 0 2
33952: PUSH
33953: EMPTY
33954: ST_TO_ADDR
// for i in tmp do
33955: LD_ADDR_VAR 0 3
33959: PUSH
33960: LD_VAR 0 6
33964: PUSH
33965: FOR_IN
33966: IFFALSE 34037
// begin t := UnitsInside ( i ) ;
33968: LD_ADDR_VAR 0 4
33972: PUSH
33973: LD_VAR 0 3
33977: PPUSH
33978: CALL_OW 313
33982: ST_TO_ADDR
// if t then
33983: LD_VAR 0 4
33987: IFFALSE 34035
// for j in t do
33989: LD_ADDR_VAR 0 7
33993: PUSH
33994: LD_VAR 0 4
33998: PUSH
33999: FOR_IN
34000: IFFALSE 34033
// result := Replace ( result , result + 1 , j ) ;
34002: LD_ADDR_VAR 0 2
34006: PUSH
34007: LD_VAR 0 2
34011: PPUSH
34012: LD_VAR 0 2
34016: PUSH
34017: LD_INT 1
34019: PLUS
34020: PPUSH
34021: LD_VAR 0 7
34025: PPUSH
34026: CALL_OW 1
34030: ST_TO_ADDR
34031: GO 33999
34033: POP
34034: POP
// end ;
34035: GO 33965
34037: POP
34038: POP
// if not result then
34039: LD_VAR 0 2
34043: NOT
34044: IFFALSE 34048
// exit ;
34046: GO 34196
// mech := result [ 1 ] ;
34048: LD_ADDR_VAR 0 5
34052: PUSH
34053: LD_VAR 0 2
34057: PUSH
34058: LD_INT 1
34060: ARRAY
34061: ST_TO_ADDR
// if result > 1 then
34062: LD_VAR 0 2
34066: PUSH
34067: LD_INT 1
34069: GREATER
34070: IFFALSE 34182
// begin for i = 2 to result do
34072: LD_ADDR_VAR 0 3
34076: PUSH
34077: DOUBLE
34078: LD_INT 2
34080: DEC
34081: ST_TO_ADDR
34082: LD_VAR 0 2
34086: PUSH
34087: FOR_TO
34088: IFFALSE 34180
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34090: LD_ADDR_VAR 0 4
34094: PUSH
34095: LD_VAR 0 2
34099: PUSH
34100: LD_VAR 0 3
34104: ARRAY
34105: PPUSH
34106: LD_INT 3
34108: PPUSH
34109: CALL_OW 259
34113: PUSH
34114: LD_VAR 0 2
34118: PUSH
34119: LD_VAR 0 3
34123: ARRAY
34124: PPUSH
34125: CALL_OW 432
34129: MINUS
34130: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34131: LD_VAR 0 4
34135: PUSH
34136: LD_VAR 0 5
34140: PPUSH
34141: LD_INT 3
34143: PPUSH
34144: CALL_OW 259
34148: PUSH
34149: LD_VAR 0 5
34153: PPUSH
34154: CALL_OW 432
34158: MINUS
34159: GREATEREQUAL
34160: IFFALSE 34178
// mech := result [ i ] ;
34162: LD_ADDR_VAR 0 5
34166: PUSH
34167: LD_VAR 0 2
34171: PUSH
34172: LD_VAR 0 3
34176: ARRAY
34177: ST_TO_ADDR
// end ;
34178: GO 34087
34180: POP
34181: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34182: LD_VAR 0 1
34186: PPUSH
34187: LD_VAR 0 5
34191: PPUSH
34192: CALL_OW 135
// end ;
34196: LD_VAR 0 2
34200: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34201: LD_INT 0
34203: PPUSH
34204: PPUSH
34205: PPUSH
34206: PPUSH
34207: PPUSH
34208: PPUSH
34209: PPUSH
34210: PPUSH
34211: PPUSH
34212: PPUSH
34213: PPUSH
34214: PPUSH
34215: PPUSH
// result := [ ] ;
34216: LD_ADDR_VAR 0 7
34220: PUSH
34221: EMPTY
34222: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34223: LD_VAR 0 1
34227: PPUSH
34228: CALL_OW 266
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: IN
34243: NOT
34244: IFFALSE 34248
// exit ;
34246: GO 35882
// if name then
34248: LD_VAR 0 3
34252: IFFALSE 34268
// SetBName ( base_dep , name ) ;
34254: LD_VAR 0 1
34258: PPUSH
34259: LD_VAR 0 3
34263: PPUSH
34264: CALL_OW 500
// base := GetBase ( base_dep ) ;
34268: LD_ADDR_VAR 0 15
34272: PUSH
34273: LD_VAR 0 1
34277: PPUSH
34278: CALL_OW 274
34282: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34283: LD_ADDR_VAR 0 16
34287: PUSH
34288: LD_VAR 0 1
34292: PPUSH
34293: CALL_OW 255
34297: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34298: LD_ADDR_VAR 0 17
34302: PUSH
34303: LD_VAR 0 1
34307: PPUSH
34308: CALL_OW 248
34312: ST_TO_ADDR
// if sources then
34313: LD_VAR 0 5
34317: IFFALSE 34364
// for i = 1 to 3 do
34319: LD_ADDR_VAR 0 8
34323: PUSH
34324: DOUBLE
34325: LD_INT 1
34327: DEC
34328: ST_TO_ADDR
34329: LD_INT 3
34331: PUSH
34332: FOR_TO
34333: IFFALSE 34362
// AddResourceType ( base , i , sources [ i ] ) ;
34335: LD_VAR 0 15
34339: PPUSH
34340: LD_VAR 0 8
34344: PPUSH
34345: LD_VAR 0 5
34349: PUSH
34350: LD_VAR 0 8
34354: ARRAY
34355: PPUSH
34356: CALL_OW 276
34360: GO 34332
34362: POP
34363: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34364: LD_ADDR_VAR 0 18
34368: PUSH
34369: LD_VAR 0 15
34373: PPUSH
34374: LD_VAR 0 2
34378: PPUSH
34379: LD_INT 1
34381: PPUSH
34382: CALL 33625 0 3
34386: ST_TO_ADDR
// InitHc ;
34387: CALL_OW 19
// InitUc ;
34391: CALL_OW 18
// uc_side := side ;
34395: LD_ADDR_OWVAR 20
34399: PUSH
34400: LD_VAR 0 16
34404: ST_TO_ADDR
// uc_nation := nation ;
34405: LD_ADDR_OWVAR 21
34409: PUSH
34410: LD_VAR 0 17
34414: ST_TO_ADDR
// if buildings then
34415: LD_VAR 0 18
34419: IFFALSE 35741
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34421: LD_ADDR_VAR 0 19
34425: PUSH
34426: LD_VAR 0 18
34430: PPUSH
34431: LD_INT 2
34433: PUSH
34434: LD_INT 30
34436: PUSH
34437: LD_INT 29
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 30
34446: PUSH
34447: LD_INT 30
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: PPUSH
34459: CALL_OW 72
34463: ST_TO_ADDR
// if tmp then
34464: LD_VAR 0 19
34468: IFFALSE 34516
// for i in tmp do
34470: LD_ADDR_VAR 0 8
34474: PUSH
34475: LD_VAR 0 19
34479: PUSH
34480: FOR_IN
34481: IFFALSE 34514
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34483: LD_VAR 0 8
34487: PPUSH
34488: CALL_OW 250
34492: PPUSH
34493: LD_VAR 0 8
34497: PPUSH
34498: CALL_OW 251
34502: PPUSH
34503: LD_VAR 0 16
34507: PPUSH
34508: CALL_OW 441
34512: GO 34480
34514: POP
34515: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34516: LD_VAR 0 18
34520: PPUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 30
34526: PUSH
34527: LD_INT 32
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 30
34536: PUSH
34537: LD_INT 33
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: PPUSH
34549: CALL_OW 72
34553: IFFALSE 34641
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34555: LD_ADDR_VAR 0 8
34559: PUSH
34560: LD_VAR 0 18
34564: PPUSH
34565: LD_INT 2
34567: PUSH
34568: LD_INT 30
34570: PUSH
34571: LD_INT 32
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 30
34580: PUSH
34581: LD_INT 33
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: LIST
34592: PPUSH
34593: CALL_OW 72
34597: PUSH
34598: FOR_IN
34599: IFFALSE 34639
// begin if not GetBWeapon ( i ) then
34601: LD_VAR 0 8
34605: PPUSH
34606: CALL_OW 269
34610: NOT
34611: IFFALSE 34637
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34613: LD_VAR 0 8
34617: PPUSH
34618: LD_VAR 0 8
34622: PPUSH
34623: LD_VAR 0 2
34627: PPUSH
34628: CALL 35887 0 2
34632: PPUSH
34633: CALL_OW 431
// end ;
34637: GO 34598
34639: POP
34640: POP
// end ; for i = 1 to personel do
34641: LD_ADDR_VAR 0 8
34645: PUSH
34646: DOUBLE
34647: LD_INT 1
34649: DEC
34650: ST_TO_ADDR
34651: LD_VAR 0 6
34655: PUSH
34656: FOR_TO
34657: IFFALSE 35721
// begin if i > 4 then
34659: LD_VAR 0 8
34663: PUSH
34664: LD_INT 4
34666: GREATER
34667: IFFALSE 34671
// break ;
34669: GO 35721
// case i of 1 :
34671: LD_VAR 0 8
34675: PUSH
34676: LD_INT 1
34678: DOUBLE
34679: EQUAL
34680: IFTRUE 34684
34682: GO 34764
34684: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34685: LD_ADDR_VAR 0 12
34689: PUSH
34690: LD_VAR 0 18
34694: PPUSH
34695: LD_INT 22
34697: PUSH
34698: LD_VAR 0 16
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 58
34709: PUSH
34710: EMPTY
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: LD_INT 30
34718: PUSH
34719: LD_INT 32
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 30
34728: PUSH
34729: LD_INT 4
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 30
34738: PUSH
34739: LD_INT 5
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: LIST
34756: PPUSH
34757: CALL_OW 72
34761: ST_TO_ADDR
34762: GO 34986
34764: LD_INT 2
34766: DOUBLE
34767: EQUAL
34768: IFTRUE 34772
34770: GO 34834
34772: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34773: LD_ADDR_VAR 0 12
34777: PUSH
34778: LD_VAR 0 18
34782: PPUSH
34783: LD_INT 22
34785: PUSH
34786: LD_VAR 0 16
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 30
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 30
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PPUSH
34827: CALL_OW 72
34831: ST_TO_ADDR
34832: GO 34986
34834: LD_INT 3
34836: DOUBLE
34837: EQUAL
34838: IFTRUE 34842
34840: GO 34904
34842: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34843: LD_ADDR_VAR 0 12
34847: PUSH
34848: LD_VAR 0 18
34852: PPUSH
34853: LD_INT 22
34855: PUSH
34856: LD_VAR 0 16
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: LD_INT 30
34870: PUSH
34871: LD_INT 2
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 30
34880: PUSH
34881: LD_INT 3
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PPUSH
34897: CALL_OW 72
34901: ST_TO_ADDR
34902: GO 34986
34904: LD_INT 4
34906: DOUBLE
34907: EQUAL
34908: IFTRUE 34912
34910: GO 34985
34912: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34913: LD_ADDR_VAR 0 12
34917: PUSH
34918: LD_VAR 0 18
34922: PPUSH
34923: LD_INT 22
34925: PUSH
34926: LD_VAR 0 16
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 2
34937: PUSH
34938: LD_INT 30
34940: PUSH
34941: LD_INT 6
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 30
34950: PUSH
34951: LD_INT 7
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 30
34960: PUSH
34961: LD_INT 8
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PPUSH
34978: CALL_OW 72
34982: ST_TO_ADDR
34983: GO 34986
34985: POP
// if i = 1 then
34986: LD_VAR 0 8
34990: PUSH
34991: LD_INT 1
34993: EQUAL
34994: IFFALSE 35105
// begin tmp := [ ] ;
34996: LD_ADDR_VAR 0 19
35000: PUSH
35001: EMPTY
35002: ST_TO_ADDR
// for j in f do
35003: LD_ADDR_VAR 0 9
35007: PUSH
35008: LD_VAR 0 12
35012: PUSH
35013: FOR_IN
35014: IFFALSE 35087
// if GetBType ( j ) = b_bunker then
35016: LD_VAR 0 9
35020: PPUSH
35021: CALL_OW 266
35025: PUSH
35026: LD_INT 32
35028: EQUAL
35029: IFFALSE 35056
// tmp := Insert ( tmp , 1 , j ) else
35031: LD_ADDR_VAR 0 19
35035: PUSH
35036: LD_VAR 0 19
35040: PPUSH
35041: LD_INT 1
35043: PPUSH
35044: LD_VAR 0 9
35048: PPUSH
35049: CALL_OW 2
35053: ST_TO_ADDR
35054: GO 35085
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35056: LD_ADDR_VAR 0 19
35060: PUSH
35061: LD_VAR 0 19
35065: PPUSH
35066: LD_VAR 0 19
35070: PUSH
35071: LD_INT 1
35073: PLUS
35074: PPUSH
35075: LD_VAR 0 9
35079: PPUSH
35080: CALL_OW 2
35084: ST_TO_ADDR
35085: GO 35013
35087: POP
35088: POP
// if tmp then
35089: LD_VAR 0 19
35093: IFFALSE 35105
// f := tmp ;
35095: LD_ADDR_VAR 0 12
35099: PUSH
35100: LD_VAR 0 19
35104: ST_TO_ADDR
// end ; x := personel [ i ] ;
35105: LD_ADDR_VAR 0 13
35109: PUSH
35110: LD_VAR 0 6
35114: PUSH
35115: LD_VAR 0 8
35119: ARRAY
35120: ST_TO_ADDR
// if x = - 1 then
35121: LD_VAR 0 13
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: EQUAL
35130: IFFALSE 35339
// begin for j in f do
35132: LD_ADDR_VAR 0 9
35136: PUSH
35137: LD_VAR 0 12
35141: PUSH
35142: FOR_IN
35143: IFFALSE 35335
// repeat InitHc ;
35145: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35149: LD_VAR 0 9
35153: PPUSH
35154: CALL_OW 266
35158: PUSH
35159: LD_INT 5
35161: EQUAL
35162: IFFALSE 35232
// begin if UnitsInside ( j ) < 3 then
35164: LD_VAR 0 9
35168: PPUSH
35169: CALL_OW 313
35173: PUSH
35174: LD_INT 3
35176: LESS
35177: IFFALSE 35213
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35179: LD_INT 0
35181: PPUSH
35182: LD_INT 5
35184: PUSH
35185: LD_INT 8
35187: PUSH
35188: LD_INT 9
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: LIST
35195: PUSH
35196: LD_VAR 0 17
35200: ARRAY
35201: PPUSH
35202: LD_VAR 0 4
35206: PPUSH
35207: CALL_OW 380
35211: GO 35230
// PrepareHuman ( false , i , skill ) ;
35213: LD_INT 0
35215: PPUSH
35216: LD_VAR 0 8
35220: PPUSH
35221: LD_VAR 0 4
35225: PPUSH
35226: CALL_OW 380
// end else
35230: GO 35249
// PrepareHuman ( false , i , skill ) ;
35232: LD_INT 0
35234: PPUSH
35235: LD_VAR 0 8
35239: PPUSH
35240: LD_VAR 0 4
35244: PPUSH
35245: CALL_OW 380
// un := CreateHuman ;
35249: LD_ADDR_VAR 0 14
35253: PUSH
35254: CALL_OW 44
35258: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35259: LD_ADDR_VAR 0 7
35263: PUSH
35264: LD_VAR 0 7
35268: PPUSH
35269: LD_INT 1
35271: PPUSH
35272: LD_VAR 0 14
35276: PPUSH
35277: CALL_OW 2
35281: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35282: LD_VAR 0 14
35286: PPUSH
35287: LD_VAR 0 9
35291: PPUSH
35292: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35296: LD_VAR 0 9
35300: PPUSH
35301: CALL_OW 313
35305: PUSH
35306: LD_INT 6
35308: EQUAL
35309: PUSH
35310: LD_VAR 0 9
35314: PPUSH
35315: CALL_OW 266
35319: PUSH
35320: LD_INT 32
35322: PUSH
35323: LD_INT 31
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: IN
35330: OR
35331: IFFALSE 35145
35333: GO 35142
35335: POP
35336: POP
// end else
35337: GO 35719
// for j = 1 to x do
35339: LD_ADDR_VAR 0 9
35343: PUSH
35344: DOUBLE
35345: LD_INT 1
35347: DEC
35348: ST_TO_ADDR
35349: LD_VAR 0 13
35353: PUSH
35354: FOR_TO
35355: IFFALSE 35717
// begin InitHc ;
35357: CALL_OW 19
// if not f then
35361: LD_VAR 0 12
35365: NOT
35366: IFFALSE 35455
// begin PrepareHuman ( false , i , skill ) ;
35368: LD_INT 0
35370: PPUSH
35371: LD_VAR 0 8
35375: PPUSH
35376: LD_VAR 0 4
35380: PPUSH
35381: CALL_OW 380
// un := CreateHuman ;
35385: LD_ADDR_VAR 0 14
35389: PUSH
35390: CALL_OW 44
35394: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35395: LD_ADDR_VAR 0 7
35399: PUSH
35400: LD_VAR 0 7
35404: PPUSH
35405: LD_INT 1
35407: PPUSH
35408: LD_VAR 0 14
35412: PPUSH
35413: CALL_OW 2
35417: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35418: LD_VAR 0 14
35422: PPUSH
35423: LD_VAR 0 1
35427: PPUSH
35428: CALL_OW 250
35432: PPUSH
35433: LD_VAR 0 1
35437: PPUSH
35438: CALL_OW 251
35442: PPUSH
35443: LD_INT 10
35445: PPUSH
35446: LD_INT 0
35448: PPUSH
35449: CALL_OW 50
// continue ;
35453: GO 35354
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35455: LD_VAR 0 12
35459: PUSH
35460: LD_INT 1
35462: ARRAY
35463: PPUSH
35464: CALL_OW 313
35468: PUSH
35469: LD_VAR 0 12
35473: PUSH
35474: LD_INT 1
35476: ARRAY
35477: PPUSH
35478: CALL_OW 266
35482: PUSH
35483: LD_INT 32
35485: PUSH
35486: LD_INT 31
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: IN
35493: AND
35494: PUSH
35495: LD_VAR 0 12
35499: PUSH
35500: LD_INT 1
35502: ARRAY
35503: PPUSH
35504: CALL_OW 313
35508: PUSH
35509: LD_INT 6
35511: EQUAL
35512: OR
35513: IFFALSE 35533
// f := Delete ( f , 1 ) ;
35515: LD_ADDR_VAR 0 12
35519: PUSH
35520: LD_VAR 0 12
35524: PPUSH
35525: LD_INT 1
35527: PPUSH
35528: CALL_OW 3
35532: ST_TO_ADDR
// if not f then
35533: LD_VAR 0 12
35537: NOT
35538: IFFALSE 35556
// begin x := x + 2 ;
35540: LD_ADDR_VAR 0 13
35544: PUSH
35545: LD_VAR 0 13
35549: PUSH
35550: LD_INT 2
35552: PLUS
35553: ST_TO_ADDR
// continue ;
35554: GO 35354
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35556: LD_VAR 0 12
35560: PUSH
35561: LD_INT 1
35563: ARRAY
35564: PPUSH
35565: CALL_OW 266
35569: PUSH
35570: LD_INT 5
35572: EQUAL
35573: IFFALSE 35647
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35575: LD_VAR 0 12
35579: PUSH
35580: LD_INT 1
35582: ARRAY
35583: PPUSH
35584: CALL_OW 313
35588: PUSH
35589: LD_INT 3
35591: LESS
35592: IFFALSE 35628
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35594: LD_INT 0
35596: PPUSH
35597: LD_INT 5
35599: PUSH
35600: LD_INT 8
35602: PUSH
35603: LD_INT 9
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: LIST
35610: PUSH
35611: LD_VAR 0 17
35615: ARRAY
35616: PPUSH
35617: LD_VAR 0 4
35621: PPUSH
35622: CALL_OW 380
35626: GO 35645
// PrepareHuman ( false , i , skill ) ;
35628: LD_INT 0
35630: PPUSH
35631: LD_VAR 0 8
35635: PPUSH
35636: LD_VAR 0 4
35640: PPUSH
35641: CALL_OW 380
// end else
35645: GO 35664
// PrepareHuman ( false , i , skill ) ;
35647: LD_INT 0
35649: PPUSH
35650: LD_VAR 0 8
35654: PPUSH
35655: LD_VAR 0 4
35659: PPUSH
35660: CALL_OW 380
// un := CreateHuman ;
35664: LD_ADDR_VAR 0 14
35668: PUSH
35669: CALL_OW 44
35673: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35674: LD_ADDR_VAR 0 7
35678: PUSH
35679: LD_VAR 0 7
35683: PPUSH
35684: LD_INT 1
35686: PPUSH
35687: LD_VAR 0 14
35691: PPUSH
35692: CALL_OW 2
35696: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35697: LD_VAR 0 14
35701: PPUSH
35702: LD_VAR 0 12
35706: PUSH
35707: LD_INT 1
35709: ARRAY
35710: PPUSH
35711: CALL_OW 52
// end ;
35715: GO 35354
35717: POP
35718: POP
// end ;
35719: GO 34656
35721: POP
35722: POP
// result := result ^ buildings ;
35723: LD_ADDR_VAR 0 7
35727: PUSH
35728: LD_VAR 0 7
35732: PUSH
35733: LD_VAR 0 18
35737: ADD
35738: ST_TO_ADDR
// end else
35739: GO 35882
// begin for i = 1 to personel do
35741: LD_ADDR_VAR 0 8
35745: PUSH
35746: DOUBLE
35747: LD_INT 1
35749: DEC
35750: ST_TO_ADDR
35751: LD_VAR 0 6
35755: PUSH
35756: FOR_TO
35757: IFFALSE 35880
// begin if i > 4 then
35759: LD_VAR 0 8
35763: PUSH
35764: LD_INT 4
35766: GREATER
35767: IFFALSE 35771
// break ;
35769: GO 35880
// x := personel [ i ] ;
35771: LD_ADDR_VAR 0 13
35775: PUSH
35776: LD_VAR 0 6
35780: PUSH
35781: LD_VAR 0 8
35785: ARRAY
35786: ST_TO_ADDR
// if x = - 1 then
35787: LD_VAR 0 13
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: EQUAL
35796: IFFALSE 35800
// continue ;
35798: GO 35756
// PrepareHuman ( false , i , skill ) ;
35800: LD_INT 0
35802: PPUSH
35803: LD_VAR 0 8
35807: PPUSH
35808: LD_VAR 0 4
35812: PPUSH
35813: CALL_OW 380
// un := CreateHuman ;
35817: LD_ADDR_VAR 0 14
35821: PUSH
35822: CALL_OW 44
35826: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35827: LD_VAR 0 14
35831: PPUSH
35832: LD_VAR 0 1
35836: PPUSH
35837: CALL_OW 250
35841: PPUSH
35842: LD_VAR 0 1
35846: PPUSH
35847: CALL_OW 251
35851: PPUSH
35852: LD_INT 10
35854: PPUSH
35855: LD_INT 0
35857: PPUSH
35858: CALL_OW 50
// result := result ^ un ;
35862: LD_ADDR_VAR 0 7
35866: PUSH
35867: LD_VAR 0 7
35871: PUSH
35872: LD_VAR 0 14
35876: ADD
35877: ST_TO_ADDR
// end ;
35878: GO 35756
35880: POP
35881: POP
// end ; end ;
35882: LD_VAR 0 7
35886: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35887: LD_INT 0
35889: PPUSH
35890: PPUSH
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
35896: PPUSH
35897: PPUSH
35898: PPUSH
35899: PPUSH
35900: PPUSH
35901: PPUSH
35902: PPUSH
35903: PPUSH
35904: PPUSH
// result := false ;
35905: LD_ADDR_VAR 0 3
35909: PUSH
35910: LD_INT 0
35912: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35913: LD_VAR 0 1
35917: NOT
35918: PUSH
35919: LD_VAR 0 1
35923: PPUSH
35924: CALL_OW 266
35928: PUSH
35929: LD_INT 32
35931: PUSH
35932: LD_INT 33
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: IN
35939: NOT
35940: OR
35941: IFFALSE 35945
// exit ;
35943: GO 37054
// nat := GetNation ( tower ) ;
35945: LD_ADDR_VAR 0 12
35949: PUSH
35950: LD_VAR 0 1
35954: PPUSH
35955: CALL_OW 248
35959: ST_TO_ADDR
// side := GetSide ( tower ) ;
35960: LD_ADDR_VAR 0 16
35964: PUSH
35965: LD_VAR 0 1
35969: PPUSH
35970: CALL_OW 255
35974: ST_TO_ADDR
// x := GetX ( tower ) ;
35975: LD_ADDR_VAR 0 10
35979: PUSH
35980: LD_VAR 0 1
35984: PPUSH
35985: CALL_OW 250
35989: ST_TO_ADDR
// y := GetY ( tower ) ;
35990: LD_ADDR_VAR 0 11
35994: PUSH
35995: LD_VAR 0 1
35999: PPUSH
36000: CALL_OW 251
36004: ST_TO_ADDR
// if not x or not y then
36005: LD_VAR 0 10
36009: NOT
36010: PUSH
36011: LD_VAR 0 11
36015: NOT
36016: OR
36017: IFFALSE 36021
// exit ;
36019: GO 37054
// weapon := 0 ;
36021: LD_ADDR_VAR 0 18
36025: PUSH
36026: LD_INT 0
36028: ST_TO_ADDR
// fac_list := [ ] ;
36029: LD_ADDR_VAR 0 17
36033: PUSH
36034: EMPTY
36035: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36036: LD_ADDR_VAR 0 6
36040: PUSH
36041: LD_VAR 0 1
36045: PPUSH
36046: CALL_OW 274
36050: PPUSH
36051: LD_VAR 0 2
36055: PPUSH
36056: LD_INT 0
36058: PPUSH
36059: CALL 33625 0 3
36063: PPUSH
36064: LD_INT 30
36066: PUSH
36067: LD_INT 3
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PPUSH
36074: CALL_OW 72
36078: ST_TO_ADDR
// if not factories then
36079: LD_VAR 0 6
36083: NOT
36084: IFFALSE 36088
// exit ;
36086: GO 37054
// for i in factories do
36088: LD_ADDR_VAR 0 8
36092: PUSH
36093: LD_VAR 0 6
36097: PUSH
36098: FOR_IN
36099: IFFALSE 36124
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36101: LD_ADDR_VAR 0 17
36105: PUSH
36106: LD_VAR 0 17
36110: PUSH
36111: LD_VAR 0 8
36115: PPUSH
36116: CALL_OW 478
36120: UNION
36121: ST_TO_ADDR
36122: GO 36098
36124: POP
36125: POP
// if not fac_list then
36126: LD_VAR 0 17
36130: NOT
36131: IFFALSE 36135
// exit ;
36133: GO 37054
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36135: LD_ADDR_VAR 0 5
36139: PUSH
36140: LD_INT 4
36142: PUSH
36143: LD_INT 5
36145: PUSH
36146: LD_INT 9
36148: PUSH
36149: LD_INT 10
36151: PUSH
36152: LD_INT 6
36154: PUSH
36155: LD_INT 7
36157: PUSH
36158: LD_INT 11
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 27
36172: PUSH
36173: LD_INT 28
36175: PUSH
36176: LD_INT 26
36178: PUSH
36179: LD_INT 30
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 43
36190: PUSH
36191: LD_INT 44
36193: PUSH
36194: LD_INT 46
36196: PUSH
36197: LD_INT 45
36199: PUSH
36200: LD_INT 47
36202: PUSH
36203: LD_INT 49
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: LIST
36218: PUSH
36219: LD_VAR 0 12
36223: ARRAY
36224: ST_TO_ADDR
// list := list isect fac_list ;
36225: LD_ADDR_VAR 0 5
36229: PUSH
36230: LD_VAR 0 5
36234: PUSH
36235: LD_VAR 0 17
36239: ISECT
36240: ST_TO_ADDR
// if not list then
36241: LD_VAR 0 5
36245: NOT
36246: IFFALSE 36250
// exit ;
36248: GO 37054
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36250: LD_VAR 0 12
36254: PUSH
36255: LD_INT 3
36257: EQUAL
36258: PUSH
36259: LD_INT 49
36261: PUSH
36262: LD_VAR 0 5
36266: IN
36267: AND
36268: PUSH
36269: LD_INT 31
36271: PPUSH
36272: LD_VAR 0 16
36276: PPUSH
36277: CALL_OW 321
36281: PUSH
36282: LD_INT 2
36284: EQUAL
36285: AND
36286: IFFALSE 36346
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36288: LD_INT 22
36290: PUSH
36291: LD_VAR 0 16
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 35
36302: PUSH
36303: LD_INT 49
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 91
36312: PUSH
36313: LD_VAR 0 1
36317: PUSH
36318: LD_INT 10
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: PPUSH
36331: CALL_OW 69
36335: NOT
36336: IFFALSE 36346
// weapon := ru_time_lapser ;
36338: LD_ADDR_VAR 0 18
36342: PUSH
36343: LD_INT 49
36345: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36346: LD_VAR 0 12
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: IN
36361: PUSH
36362: LD_INT 11
36364: PUSH
36365: LD_VAR 0 5
36369: IN
36370: PUSH
36371: LD_INT 30
36373: PUSH
36374: LD_VAR 0 5
36378: IN
36379: OR
36380: AND
36381: PUSH
36382: LD_INT 6
36384: PPUSH
36385: LD_VAR 0 16
36389: PPUSH
36390: CALL_OW 321
36394: PUSH
36395: LD_INT 2
36397: EQUAL
36398: AND
36399: IFFALSE 36564
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36401: LD_INT 22
36403: PUSH
36404: LD_VAR 0 16
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 2
36415: PUSH
36416: LD_INT 35
36418: PUSH
36419: LD_INT 11
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 35
36428: PUSH
36429: LD_INT 30
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 91
36443: PUSH
36444: LD_VAR 0 1
36448: PUSH
36449: LD_INT 18
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: LIST
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: LIST
36461: PPUSH
36462: CALL_OW 69
36466: NOT
36467: PUSH
36468: LD_INT 22
36470: PUSH
36471: LD_VAR 0 16
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 2
36482: PUSH
36483: LD_INT 30
36485: PUSH
36486: LD_INT 32
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 30
36495: PUSH
36496: LD_INT 33
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 91
36510: PUSH
36511: LD_VAR 0 1
36515: PUSH
36516: LD_INT 12
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: LIST
36528: PUSH
36529: EMPTY
36530: LIST
36531: PPUSH
36532: CALL_OW 69
36536: PUSH
36537: LD_INT 2
36539: GREATER
36540: AND
36541: IFFALSE 36564
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36543: LD_ADDR_VAR 0 18
36547: PUSH
36548: LD_INT 11
36550: PUSH
36551: LD_INT 30
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_VAR 0 12
36562: ARRAY
36563: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36564: LD_VAR 0 18
36568: NOT
36569: PUSH
36570: LD_INT 40
36572: PPUSH
36573: LD_VAR 0 16
36577: PPUSH
36578: CALL_OW 321
36582: PUSH
36583: LD_INT 2
36585: EQUAL
36586: AND
36587: PUSH
36588: LD_INT 7
36590: PUSH
36591: LD_VAR 0 5
36595: IN
36596: PUSH
36597: LD_INT 28
36599: PUSH
36600: LD_VAR 0 5
36604: IN
36605: OR
36606: PUSH
36607: LD_INT 45
36609: PUSH
36610: LD_VAR 0 5
36614: IN
36615: OR
36616: AND
36617: IFFALSE 36871
// begin hex := GetHexInfo ( x , y ) ;
36619: LD_ADDR_VAR 0 4
36623: PUSH
36624: LD_VAR 0 10
36628: PPUSH
36629: LD_VAR 0 11
36633: PPUSH
36634: CALL_OW 546
36638: ST_TO_ADDR
// if hex [ 1 ] then
36639: LD_VAR 0 4
36643: PUSH
36644: LD_INT 1
36646: ARRAY
36647: IFFALSE 36651
// exit ;
36649: GO 37054
// height := hex [ 2 ] ;
36651: LD_ADDR_VAR 0 15
36655: PUSH
36656: LD_VAR 0 4
36660: PUSH
36661: LD_INT 2
36663: ARRAY
36664: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36665: LD_ADDR_VAR 0 14
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: LD_INT 2
36675: PUSH
36676: LD_INT 3
36678: PUSH
36679: LD_INT 5
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: ST_TO_ADDR
// for i in tmp do
36688: LD_ADDR_VAR 0 8
36692: PUSH
36693: LD_VAR 0 14
36697: PUSH
36698: FOR_IN
36699: IFFALSE 36869
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36701: LD_ADDR_VAR 0 9
36705: PUSH
36706: LD_VAR 0 10
36710: PPUSH
36711: LD_VAR 0 8
36715: PPUSH
36716: LD_INT 5
36718: PPUSH
36719: CALL_OW 272
36723: PUSH
36724: LD_VAR 0 11
36728: PPUSH
36729: LD_VAR 0 8
36733: PPUSH
36734: LD_INT 5
36736: PPUSH
36737: CALL_OW 273
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36746: LD_VAR 0 9
36750: PUSH
36751: LD_INT 1
36753: ARRAY
36754: PPUSH
36755: LD_VAR 0 9
36759: PUSH
36760: LD_INT 2
36762: ARRAY
36763: PPUSH
36764: CALL_OW 488
36768: IFFALSE 36867
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36770: LD_ADDR_VAR 0 4
36774: PUSH
36775: LD_VAR 0 9
36779: PUSH
36780: LD_INT 1
36782: ARRAY
36783: PPUSH
36784: LD_VAR 0 9
36788: PUSH
36789: LD_INT 2
36791: ARRAY
36792: PPUSH
36793: CALL_OW 546
36797: ST_TO_ADDR
// if hex [ 1 ] then
36798: LD_VAR 0 4
36802: PUSH
36803: LD_INT 1
36805: ARRAY
36806: IFFALSE 36810
// continue ;
36808: GO 36698
// h := hex [ 2 ] ;
36810: LD_ADDR_VAR 0 13
36814: PUSH
36815: LD_VAR 0 4
36819: PUSH
36820: LD_INT 2
36822: ARRAY
36823: ST_TO_ADDR
// if h + 7 < height then
36824: LD_VAR 0 13
36828: PUSH
36829: LD_INT 7
36831: PLUS
36832: PUSH
36833: LD_VAR 0 15
36837: LESS
36838: IFFALSE 36867
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36840: LD_ADDR_VAR 0 18
36844: PUSH
36845: LD_INT 7
36847: PUSH
36848: LD_INT 28
36850: PUSH
36851: LD_INT 45
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: LIST
36858: PUSH
36859: LD_VAR 0 12
36863: ARRAY
36864: ST_TO_ADDR
// break ;
36865: GO 36869
// end ; end ; end ;
36867: GO 36698
36869: POP
36870: POP
// end ; if not weapon then
36871: LD_VAR 0 18
36875: NOT
36876: IFFALSE 36936
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36878: LD_ADDR_VAR 0 5
36882: PUSH
36883: LD_VAR 0 5
36887: PUSH
36888: LD_INT 11
36890: PUSH
36891: LD_INT 30
36893: PUSH
36894: LD_INT 49
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: DIFF
36902: ST_TO_ADDR
// if not list then
36903: LD_VAR 0 5
36907: NOT
36908: IFFALSE 36912
// exit ;
36910: GO 37054
// weapon := list [ rand ( 1 , list ) ] ;
36912: LD_ADDR_VAR 0 18
36916: PUSH
36917: LD_VAR 0 5
36921: PUSH
36922: LD_INT 1
36924: PPUSH
36925: LD_VAR 0 5
36929: PPUSH
36930: CALL_OW 12
36934: ARRAY
36935: ST_TO_ADDR
// end ; if weapon then
36936: LD_VAR 0 18
36940: IFFALSE 37054
// begin tmp := CostOfWeapon ( weapon ) ;
36942: LD_ADDR_VAR 0 14
36946: PUSH
36947: LD_VAR 0 18
36951: PPUSH
36952: CALL_OW 451
36956: ST_TO_ADDR
// j := GetBase ( tower ) ;
36957: LD_ADDR_VAR 0 9
36961: PUSH
36962: LD_VAR 0 1
36966: PPUSH
36967: CALL_OW 274
36971: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36972: LD_VAR 0 9
36976: PPUSH
36977: LD_INT 1
36979: PPUSH
36980: CALL_OW 275
36984: PUSH
36985: LD_VAR 0 14
36989: PUSH
36990: LD_INT 1
36992: ARRAY
36993: GREATEREQUAL
36994: PUSH
36995: LD_VAR 0 9
36999: PPUSH
37000: LD_INT 2
37002: PPUSH
37003: CALL_OW 275
37007: PUSH
37008: LD_VAR 0 14
37012: PUSH
37013: LD_INT 2
37015: ARRAY
37016: GREATEREQUAL
37017: AND
37018: PUSH
37019: LD_VAR 0 9
37023: PPUSH
37024: LD_INT 3
37026: PPUSH
37027: CALL_OW 275
37031: PUSH
37032: LD_VAR 0 14
37036: PUSH
37037: LD_INT 3
37039: ARRAY
37040: GREATEREQUAL
37041: AND
37042: IFFALSE 37054
// result := weapon ;
37044: LD_ADDR_VAR 0 3
37048: PUSH
37049: LD_VAR 0 18
37053: ST_TO_ADDR
// end ; end ;
37054: LD_VAR 0 3
37058: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37059: LD_INT 0
37061: PPUSH
37062: PPUSH
// result := true ;
37063: LD_ADDR_VAR 0 3
37067: PUSH
37068: LD_INT 1
37070: ST_TO_ADDR
// if array1 = array2 then
37071: LD_VAR 0 1
37075: PUSH
37076: LD_VAR 0 2
37080: EQUAL
37081: IFFALSE 37141
// begin for i = 1 to array1 do
37083: LD_ADDR_VAR 0 4
37087: PUSH
37088: DOUBLE
37089: LD_INT 1
37091: DEC
37092: ST_TO_ADDR
37093: LD_VAR 0 1
37097: PUSH
37098: FOR_TO
37099: IFFALSE 37137
// if array1 [ i ] <> array2 [ i ] then
37101: LD_VAR 0 1
37105: PUSH
37106: LD_VAR 0 4
37110: ARRAY
37111: PUSH
37112: LD_VAR 0 2
37116: PUSH
37117: LD_VAR 0 4
37121: ARRAY
37122: NONEQUAL
37123: IFFALSE 37135
// begin result := false ;
37125: LD_ADDR_VAR 0 3
37129: PUSH
37130: LD_INT 0
37132: ST_TO_ADDR
// break ;
37133: GO 37137
// end ;
37135: GO 37098
37137: POP
37138: POP
// end else
37139: GO 37149
// result := false ;
37141: LD_ADDR_VAR 0 3
37145: PUSH
37146: LD_INT 0
37148: ST_TO_ADDR
// end ;
37149: LD_VAR 0 3
37153: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37154: LD_INT 0
37156: PPUSH
37157: PPUSH
// if not array1 or not array2 then
37158: LD_VAR 0 1
37162: NOT
37163: PUSH
37164: LD_VAR 0 2
37168: NOT
37169: OR
37170: IFFALSE 37174
// exit ;
37172: GO 37238
// result := true ;
37174: LD_ADDR_VAR 0 3
37178: PUSH
37179: LD_INT 1
37181: ST_TO_ADDR
// for i = 1 to array1 do
37182: LD_ADDR_VAR 0 4
37186: PUSH
37187: DOUBLE
37188: LD_INT 1
37190: DEC
37191: ST_TO_ADDR
37192: LD_VAR 0 1
37196: PUSH
37197: FOR_TO
37198: IFFALSE 37236
// if array1 [ i ] <> array2 [ i ] then
37200: LD_VAR 0 1
37204: PUSH
37205: LD_VAR 0 4
37209: ARRAY
37210: PUSH
37211: LD_VAR 0 2
37215: PUSH
37216: LD_VAR 0 4
37220: ARRAY
37221: NONEQUAL
37222: IFFALSE 37234
// begin result := false ;
37224: LD_ADDR_VAR 0 3
37228: PUSH
37229: LD_INT 0
37231: ST_TO_ADDR
// break ;
37232: GO 37236
// end ;
37234: GO 37197
37236: POP
37237: POP
// end ;
37238: LD_VAR 0 3
37242: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37243: LD_INT 0
37245: PPUSH
37246: PPUSH
37247: PPUSH
// pom := GetBase ( fac ) ;
37248: LD_ADDR_VAR 0 5
37252: PUSH
37253: LD_VAR 0 1
37257: PPUSH
37258: CALL_OW 274
37262: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37263: LD_ADDR_VAR 0 4
37267: PUSH
37268: LD_VAR 0 2
37272: PUSH
37273: LD_INT 1
37275: ARRAY
37276: PPUSH
37277: LD_VAR 0 2
37281: PUSH
37282: LD_INT 2
37284: ARRAY
37285: PPUSH
37286: LD_VAR 0 2
37290: PUSH
37291: LD_INT 3
37293: ARRAY
37294: PPUSH
37295: LD_VAR 0 2
37299: PUSH
37300: LD_INT 4
37302: ARRAY
37303: PPUSH
37304: CALL_OW 449
37308: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37309: LD_ADDR_VAR 0 3
37313: PUSH
37314: LD_VAR 0 5
37318: PPUSH
37319: LD_INT 1
37321: PPUSH
37322: CALL_OW 275
37326: PUSH
37327: LD_VAR 0 4
37331: PUSH
37332: LD_INT 1
37334: ARRAY
37335: GREATEREQUAL
37336: PUSH
37337: LD_VAR 0 5
37341: PPUSH
37342: LD_INT 2
37344: PPUSH
37345: CALL_OW 275
37349: PUSH
37350: LD_VAR 0 4
37354: PUSH
37355: LD_INT 2
37357: ARRAY
37358: GREATEREQUAL
37359: AND
37360: PUSH
37361: LD_VAR 0 5
37365: PPUSH
37366: LD_INT 3
37368: PPUSH
37369: CALL_OW 275
37373: PUSH
37374: LD_VAR 0 4
37378: PUSH
37379: LD_INT 3
37381: ARRAY
37382: GREATEREQUAL
37383: AND
37384: ST_TO_ADDR
// end ;
37385: LD_VAR 0 3
37389: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37390: LD_INT 0
37392: PPUSH
37393: PPUSH
37394: PPUSH
37395: PPUSH
// pom := GetBase ( building ) ;
37396: LD_ADDR_VAR 0 3
37400: PUSH
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 274
37410: ST_TO_ADDR
// if not pom then
37411: LD_VAR 0 3
37415: NOT
37416: IFFALSE 37420
// exit ;
37418: GO 37590
// btype := GetBType ( building ) ;
37420: LD_ADDR_VAR 0 5
37424: PUSH
37425: LD_VAR 0 1
37429: PPUSH
37430: CALL_OW 266
37434: ST_TO_ADDR
// if btype = b_armoury then
37435: LD_VAR 0 5
37439: PUSH
37440: LD_INT 4
37442: EQUAL
37443: IFFALSE 37453
// btype := b_barracks ;
37445: LD_ADDR_VAR 0 5
37449: PUSH
37450: LD_INT 5
37452: ST_TO_ADDR
// if btype = b_depot then
37453: LD_VAR 0 5
37457: PUSH
37458: LD_INT 0
37460: EQUAL
37461: IFFALSE 37471
// btype := b_warehouse ;
37463: LD_ADDR_VAR 0 5
37467: PUSH
37468: LD_INT 1
37470: ST_TO_ADDR
// if btype = b_workshop then
37471: LD_VAR 0 5
37475: PUSH
37476: LD_INT 2
37478: EQUAL
37479: IFFALSE 37489
// btype := b_factory ;
37481: LD_ADDR_VAR 0 5
37485: PUSH
37486: LD_INT 3
37488: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37489: LD_ADDR_VAR 0 4
37493: PUSH
37494: LD_VAR 0 5
37498: PPUSH
37499: LD_VAR 0 1
37503: PPUSH
37504: CALL_OW 248
37508: PPUSH
37509: CALL_OW 450
37513: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37514: LD_ADDR_VAR 0 2
37518: PUSH
37519: LD_VAR 0 3
37523: PPUSH
37524: LD_INT 1
37526: PPUSH
37527: CALL_OW 275
37531: PUSH
37532: LD_VAR 0 4
37536: PUSH
37537: LD_INT 1
37539: ARRAY
37540: GREATEREQUAL
37541: PUSH
37542: LD_VAR 0 3
37546: PPUSH
37547: LD_INT 2
37549: PPUSH
37550: CALL_OW 275
37554: PUSH
37555: LD_VAR 0 4
37559: PUSH
37560: LD_INT 2
37562: ARRAY
37563: GREATEREQUAL
37564: AND
37565: PUSH
37566: LD_VAR 0 3
37570: PPUSH
37571: LD_INT 3
37573: PPUSH
37574: CALL_OW 275
37578: PUSH
37579: LD_VAR 0 4
37583: PUSH
37584: LD_INT 3
37586: ARRAY
37587: GREATEREQUAL
37588: AND
37589: ST_TO_ADDR
// end ;
37590: LD_VAR 0 2
37594: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37595: LD_INT 0
37597: PPUSH
37598: PPUSH
37599: PPUSH
// pom := GetBase ( building ) ;
37600: LD_ADDR_VAR 0 4
37604: PUSH
37605: LD_VAR 0 1
37609: PPUSH
37610: CALL_OW 274
37614: ST_TO_ADDR
// if not pom then
37615: LD_VAR 0 4
37619: NOT
37620: IFFALSE 37624
// exit ;
37622: GO 37725
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37624: LD_ADDR_VAR 0 5
37628: PUSH
37629: LD_VAR 0 2
37633: PPUSH
37634: LD_VAR 0 1
37638: PPUSH
37639: CALL_OW 248
37643: PPUSH
37644: CALL_OW 450
37648: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37649: LD_ADDR_VAR 0 3
37653: PUSH
37654: LD_VAR 0 4
37658: PPUSH
37659: LD_INT 1
37661: PPUSH
37662: CALL_OW 275
37666: PUSH
37667: LD_VAR 0 5
37671: PUSH
37672: LD_INT 1
37674: ARRAY
37675: GREATEREQUAL
37676: PUSH
37677: LD_VAR 0 4
37681: PPUSH
37682: LD_INT 2
37684: PPUSH
37685: CALL_OW 275
37689: PUSH
37690: LD_VAR 0 5
37694: PUSH
37695: LD_INT 2
37697: ARRAY
37698: GREATEREQUAL
37699: AND
37700: PUSH
37701: LD_VAR 0 4
37705: PPUSH
37706: LD_INT 3
37708: PPUSH
37709: CALL_OW 275
37713: PUSH
37714: LD_VAR 0 5
37718: PUSH
37719: LD_INT 3
37721: ARRAY
37722: GREATEREQUAL
37723: AND
37724: ST_TO_ADDR
// end ;
37725: LD_VAR 0 3
37729: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37730: LD_INT 0
37732: PPUSH
37733: PPUSH
37734: PPUSH
37735: PPUSH
37736: PPUSH
37737: PPUSH
37738: PPUSH
37739: PPUSH
37740: PPUSH
37741: PPUSH
37742: PPUSH
// result := false ;
37743: LD_ADDR_VAR 0 8
37747: PUSH
37748: LD_INT 0
37750: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37751: LD_VAR 0 5
37755: NOT
37756: PUSH
37757: LD_VAR 0 1
37761: NOT
37762: OR
37763: PUSH
37764: LD_VAR 0 2
37768: NOT
37769: OR
37770: PUSH
37771: LD_VAR 0 3
37775: NOT
37776: OR
37777: IFFALSE 37781
// exit ;
37779: GO 38595
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37781: LD_ADDR_VAR 0 14
37785: PUSH
37786: LD_VAR 0 1
37790: PPUSH
37791: LD_VAR 0 2
37795: PPUSH
37796: LD_VAR 0 3
37800: PPUSH
37801: LD_VAR 0 4
37805: PPUSH
37806: LD_VAR 0 5
37810: PUSH
37811: LD_INT 1
37813: ARRAY
37814: PPUSH
37815: CALL_OW 248
37819: PPUSH
37820: LD_INT 0
37822: PPUSH
37823: CALL 39828 0 6
37827: ST_TO_ADDR
// if not hexes then
37828: LD_VAR 0 14
37832: NOT
37833: IFFALSE 37837
// exit ;
37835: GO 38595
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37837: LD_ADDR_VAR 0 17
37841: PUSH
37842: LD_VAR 0 5
37846: PPUSH
37847: LD_INT 22
37849: PUSH
37850: LD_VAR 0 13
37854: PPUSH
37855: CALL_OW 255
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: LD_INT 30
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 30
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: LIST
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PPUSH
37896: CALL_OW 72
37900: ST_TO_ADDR
// for i = 1 to hexes do
37901: LD_ADDR_VAR 0 9
37905: PUSH
37906: DOUBLE
37907: LD_INT 1
37909: DEC
37910: ST_TO_ADDR
37911: LD_VAR 0 14
37915: PUSH
37916: FOR_TO
37917: IFFALSE 38593
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37919: LD_ADDR_VAR 0 13
37923: PUSH
37924: LD_VAR 0 14
37928: PUSH
37929: LD_VAR 0 9
37933: ARRAY
37934: PUSH
37935: LD_INT 1
37937: ARRAY
37938: PPUSH
37939: LD_VAR 0 14
37943: PUSH
37944: LD_VAR 0 9
37948: ARRAY
37949: PUSH
37950: LD_INT 2
37952: ARRAY
37953: PPUSH
37954: CALL_OW 428
37958: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37959: LD_VAR 0 14
37963: PUSH
37964: LD_VAR 0 9
37968: ARRAY
37969: PUSH
37970: LD_INT 1
37972: ARRAY
37973: PPUSH
37974: LD_VAR 0 14
37978: PUSH
37979: LD_VAR 0 9
37983: ARRAY
37984: PUSH
37985: LD_INT 2
37987: ARRAY
37988: PPUSH
37989: CALL_OW 351
37993: PUSH
37994: LD_VAR 0 14
37998: PUSH
37999: LD_VAR 0 9
38003: ARRAY
38004: PUSH
38005: LD_INT 1
38007: ARRAY
38008: PPUSH
38009: LD_VAR 0 14
38013: PUSH
38014: LD_VAR 0 9
38018: ARRAY
38019: PUSH
38020: LD_INT 2
38022: ARRAY
38023: PPUSH
38024: CALL_OW 488
38028: NOT
38029: OR
38030: PUSH
38031: LD_VAR 0 13
38035: PPUSH
38036: CALL_OW 247
38040: PUSH
38041: LD_INT 3
38043: EQUAL
38044: OR
38045: IFFALSE 38051
// exit ;
38047: POP
38048: POP
38049: GO 38595
// if not tmp then
38051: LD_VAR 0 13
38055: NOT
38056: IFFALSE 38060
// continue ;
38058: GO 37916
// result := true ;
38060: LD_ADDR_VAR 0 8
38064: PUSH
38065: LD_INT 1
38067: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38068: LD_VAR 0 6
38072: PUSH
38073: LD_VAR 0 13
38077: PPUSH
38078: CALL_OW 247
38082: PUSH
38083: LD_INT 2
38085: EQUAL
38086: AND
38087: PUSH
38088: LD_VAR 0 13
38092: PPUSH
38093: CALL_OW 263
38097: PUSH
38098: LD_INT 1
38100: EQUAL
38101: AND
38102: IFFALSE 38266
// begin if IsDrivenBy ( tmp ) then
38104: LD_VAR 0 13
38108: PPUSH
38109: CALL_OW 311
38113: IFFALSE 38117
// continue ;
38115: GO 37916
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38117: LD_VAR 0 6
38121: PPUSH
38122: LD_INT 3
38124: PUSH
38125: LD_INT 60
38127: PUSH
38128: EMPTY
38129: LIST
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 3
38137: PUSH
38138: LD_INT 55
38140: PUSH
38141: EMPTY
38142: LIST
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PPUSH
38152: CALL_OW 72
38156: IFFALSE 38264
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38158: LD_ADDR_VAR 0 18
38162: PUSH
38163: LD_VAR 0 6
38167: PPUSH
38168: LD_INT 3
38170: PUSH
38171: LD_INT 60
38173: PUSH
38174: EMPTY
38175: LIST
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: LD_INT 55
38186: PUSH
38187: EMPTY
38188: LIST
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PPUSH
38198: CALL_OW 72
38202: PUSH
38203: LD_INT 1
38205: ARRAY
38206: ST_TO_ADDR
// if IsInUnit ( driver ) then
38207: LD_VAR 0 18
38211: PPUSH
38212: CALL_OW 310
38216: IFFALSE 38227
// ComExit ( driver ) ;
38218: LD_VAR 0 18
38222: PPUSH
38223: CALL 63608 0 1
// AddComEnterUnit ( driver , tmp ) ;
38227: LD_VAR 0 18
38231: PPUSH
38232: LD_VAR 0 13
38236: PPUSH
38237: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38241: LD_VAR 0 18
38245: PPUSH
38246: LD_VAR 0 7
38250: PPUSH
38251: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38255: LD_VAR 0 18
38259: PPUSH
38260: CALL_OW 181
// end ; continue ;
38264: GO 37916
// end ; if not cleaners or not tmp in cleaners then
38266: LD_VAR 0 6
38270: NOT
38271: PUSH
38272: LD_VAR 0 13
38276: PUSH
38277: LD_VAR 0 6
38281: IN
38282: NOT
38283: OR
38284: IFFALSE 38591
// begin if dep then
38286: LD_VAR 0 17
38290: IFFALSE 38426
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38292: LD_ADDR_VAR 0 16
38296: PUSH
38297: LD_VAR 0 17
38301: PUSH
38302: LD_INT 1
38304: ARRAY
38305: PPUSH
38306: CALL_OW 250
38310: PPUSH
38311: LD_VAR 0 17
38315: PUSH
38316: LD_INT 1
38318: ARRAY
38319: PPUSH
38320: CALL_OW 254
38324: PPUSH
38325: LD_INT 5
38327: PPUSH
38328: CALL_OW 272
38332: PUSH
38333: LD_VAR 0 17
38337: PUSH
38338: LD_INT 1
38340: ARRAY
38341: PPUSH
38342: CALL_OW 251
38346: PPUSH
38347: LD_VAR 0 17
38351: PUSH
38352: LD_INT 1
38354: ARRAY
38355: PPUSH
38356: CALL_OW 254
38360: PPUSH
38361: LD_INT 5
38363: PPUSH
38364: CALL_OW 273
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38373: LD_VAR 0 16
38377: PUSH
38378: LD_INT 1
38380: ARRAY
38381: PPUSH
38382: LD_VAR 0 16
38386: PUSH
38387: LD_INT 2
38389: ARRAY
38390: PPUSH
38391: CALL_OW 488
38395: IFFALSE 38426
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38397: LD_VAR 0 13
38401: PPUSH
38402: LD_VAR 0 16
38406: PUSH
38407: LD_INT 1
38409: ARRAY
38410: PPUSH
38411: LD_VAR 0 16
38415: PUSH
38416: LD_INT 2
38418: ARRAY
38419: PPUSH
38420: CALL_OW 111
// continue ;
38424: GO 37916
// end ; end ; r := GetDir ( tmp ) ;
38426: LD_ADDR_VAR 0 15
38430: PUSH
38431: LD_VAR 0 13
38435: PPUSH
38436: CALL_OW 254
38440: ST_TO_ADDR
// if r = 5 then
38441: LD_VAR 0 15
38445: PUSH
38446: LD_INT 5
38448: EQUAL
38449: IFFALSE 38459
// r := 0 ;
38451: LD_ADDR_VAR 0 15
38455: PUSH
38456: LD_INT 0
38458: ST_TO_ADDR
// for j = r to 5 do
38459: LD_ADDR_VAR 0 10
38463: PUSH
38464: DOUBLE
38465: LD_VAR 0 15
38469: DEC
38470: ST_TO_ADDR
38471: LD_INT 5
38473: PUSH
38474: FOR_TO
38475: IFFALSE 38589
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38477: LD_ADDR_VAR 0 11
38481: PUSH
38482: LD_VAR 0 13
38486: PPUSH
38487: CALL_OW 250
38491: PPUSH
38492: LD_VAR 0 10
38496: PPUSH
38497: LD_INT 2
38499: PPUSH
38500: CALL_OW 272
38504: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38505: LD_ADDR_VAR 0 12
38509: PUSH
38510: LD_VAR 0 13
38514: PPUSH
38515: CALL_OW 251
38519: PPUSH
38520: LD_VAR 0 10
38524: PPUSH
38525: LD_INT 2
38527: PPUSH
38528: CALL_OW 273
38532: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38533: LD_VAR 0 11
38537: PPUSH
38538: LD_VAR 0 12
38542: PPUSH
38543: CALL_OW 488
38547: PUSH
38548: LD_VAR 0 11
38552: PPUSH
38553: LD_VAR 0 12
38557: PPUSH
38558: CALL_OW 428
38562: NOT
38563: AND
38564: IFFALSE 38587
// begin ComMoveXY ( tmp , _x , _y ) ;
38566: LD_VAR 0 13
38570: PPUSH
38571: LD_VAR 0 11
38575: PPUSH
38576: LD_VAR 0 12
38580: PPUSH
38581: CALL_OW 111
// break ;
38585: GO 38589
// end ; end ;
38587: GO 38474
38589: POP
38590: POP
// end ; end ;
38591: GO 37916
38593: POP
38594: POP
// end ;
38595: LD_VAR 0 8
38599: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38600: LD_INT 0
38602: PPUSH
// result := true ;
38603: LD_ADDR_VAR 0 3
38607: PUSH
38608: LD_INT 1
38610: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38611: LD_VAR 0 2
38615: PUSH
38616: LD_INT 24
38618: DOUBLE
38619: EQUAL
38620: IFTRUE 38630
38622: LD_INT 33
38624: DOUBLE
38625: EQUAL
38626: IFTRUE 38630
38628: GO 38655
38630: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38631: LD_ADDR_VAR 0 3
38635: PUSH
38636: LD_INT 32
38638: PPUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL_OW 321
38648: PUSH
38649: LD_INT 2
38651: EQUAL
38652: ST_TO_ADDR
38653: GO 38971
38655: LD_INT 20
38657: DOUBLE
38658: EQUAL
38659: IFTRUE 38663
38661: GO 38688
38663: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38664: LD_ADDR_VAR 0 3
38668: PUSH
38669: LD_INT 6
38671: PPUSH
38672: LD_VAR 0 1
38676: PPUSH
38677: CALL_OW 321
38681: PUSH
38682: LD_INT 2
38684: EQUAL
38685: ST_TO_ADDR
38686: GO 38971
38688: LD_INT 22
38690: DOUBLE
38691: EQUAL
38692: IFTRUE 38702
38694: LD_INT 36
38696: DOUBLE
38697: EQUAL
38698: IFTRUE 38702
38700: GO 38727
38702: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38703: LD_ADDR_VAR 0 3
38707: PUSH
38708: LD_INT 15
38710: PPUSH
38711: LD_VAR 0 1
38715: PPUSH
38716: CALL_OW 321
38720: PUSH
38721: LD_INT 2
38723: EQUAL
38724: ST_TO_ADDR
38725: GO 38971
38727: LD_INT 30
38729: DOUBLE
38730: EQUAL
38731: IFTRUE 38735
38733: GO 38760
38735: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38736: LD_ADDR_VAR 0 3
38740: PUSH
38741: LD_INT 20
38743: PPUSH
38744: LD_VAR 0 1
38748: PPUSH
38749: CALL_OW 321
38753: PUSH
38754: LD_INT 2
38756: EQUAL
38757: ST_TO_ADDR
38758: GO 38971
38760: LD_INT 28
38762: DOUBLE
38763: EQUAL
38764: IFTRUE 38774
38766: LD_INT 21
38768: DOUBLE
38769: EQUAL
38770: IFTRUE 38774
38772: GO 38799
38774: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38775: LD_ADDR_VAR 0 3
38779: PUSH
38780: LD_INT 21
38782: PPUSH
38783: LD_VAR 0 1
38787: PPUSH
38788: CALL_OW 321
38792: PUSH
38793: LD_INT 2
38795: EQUAL
38796: ST_TO_ADDR
38797: GO 38971
38799: LD_INT 16
38801: DOUBLE
38802: EQUAL
38803: IFTRUE 38807
38805: GO 38832
38807: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38808: LD_ADDR_VAR 0 3
38812: PUSH
38813: LD_INT 84
38815: PPUSH
38816: LD_VAR 0 1
38820: PPUSH
38821: CALL_OW 321
38825: PUSH
38826: LD_INT 2
38828: EQUAL
38829: ST_TO_ADDR
38830: GO 38971
38832: LD_INT 19
38834: DOUBLE
38835: EQUAL
38836: IFTRUE 38846
38838: LD_INT 23
38840: DOUBLE
38841: EQUAL
38842: IFTRUE 38846
38844: GO 38871
38846: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38847: LD_ADDR_VAR 0 3
38851: PUSH
38852: LD_INT 83
38854: PPUSH
38855: LD_VAR 0 1
38859: PPUSH
38860: CALL_OW 321
38864: PUSH
38865: LD_INT 2
38867: EQUAL
38868: ST_TO_ADDR
38869: GO 38971
38871: LD_INT 17
38873: DOUBLE
38874: EQUAL
38875: IFTRUE 38879
38877: GO 38904
38879: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38880: LD_ADDR_VAR 0 3
38884: PUSH
38885: LD_INT 39
38887: PPUSH
38888: LD_VAR 0 1
38892: PPUSH
38893: CALL_OW 321
38897: PUSH
38898: LD_INT 2
38900: EQUAL
38901: ST_TO_ADDR
38902: GO 38971
38904: LD_INT 18
38906: DOUBLE
38907: EQUAL
38908: IFTRUE 38912
38910: GO 38937
38912: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38913: LD_ADDR_VAR 0 3
38917: PUSH
38918: LD_INT 40
38920: PPUSH
38921: LD_VAR 0 1
38925: PPUSH
38926: CALL_OW 321
38930: PUSH
38931: LD_INT 2
38933: EQUAL
38934: ST_TO_ADDR
38935: GO 38971
38937: LD_INT 27
38939: DOUBLE
38940: EQUAL
38941: IFTRUE 38945
38943: GO 38970
38945: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38946: LD_ADDR_VAR 0 3
38950: PUSH
38951: LD_INT 35
38953: PPUSH
38954: LD_VAR 0 1
38958: PPUSH
38959: CALL_OW 321
38963: PUSH
38964: LD_INT 2
38966: EQUAL
38967: ST_TO_ADDR
38968: GO 38971
38970: POP
// end ;
38971: LD_VAR 0 3
38975: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38976: LD_INT 0
38978: PPUSH
38979: PPUSH
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
// result := false ;
38989: LD_ADDR_VAR 0 6
38993: PUSH
38994: LD_INT 0
38996: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38997: LD_VAR 0 1
39001: NOT
39002: PUSH
39003: LD_VAR 0 1
39007: PPUSH
39008: CALL_OW 266
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: IN
39023: NOT
39024: OR
39025: PUSH
39026: LD_VAR 0 2
39030: NOT
39031: OR
39032: PUSH
39033: LD_VAR 0 5
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: LD_INT 2
39046: PUSH
39047: LD_INT 3
39049: PUSH
39050: LD_INT 4
39052: PUSH
39053: LD_INT 5
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: IN
39064: NOT
39065: OR
39066: PUSH
39067: LD_VAR 0 3
39071: PPUSH
39072: LD_VAR 0 4
39076: PPUSH
39077: CALL_OW 488
39081: NOT
39082: OR
39083: IFFALSE 39087
// exit ;
39085: GO 39823
// side := GetSide ( depot ) ;
39087: LD_ADDR_VAR 0 9
39091: PUSH
39092: LD_VAR 0 1
39096: PPUSH
39097: CALL_OW 255
39101: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39102: LD_VAR 0 9
39106: PPUSH
39107: LD_VAR 0 2
39111: PPUSH
39112: CALL 38600 0 2
39116: NOT
39117: IFFALSE 39121
// exit ;
39119: GO 39823
// pom := GetBase ( depot ) ;
39121: LD_ADDR_VAR 0 10
39125: PUSH
39126: LD_VAR 0 1
39130: PPUSH
39131: CALL_OW 274
39135: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39136: LD_ADDR_VAR 0 11
39140: PUSH
39141: LD_VAR 0 2
39145: PPUSH
39146: LD_VAR 0 1
39150: PPUSH
39151: CALL_OW 248
39155: PPUSH
39156: CALL_OW 450
39160: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39161: LD_VAR 0 10
39165: PPUSH
39166: LD_INT 1
39168: PPUSH
39169: CALL_OW 275
39173: PUSH
39174: LD_VAR 0 11
39178: PUSH
39179: LD_INT 1
39181: ARRAY
39182: GREATEREQUAL
39183: PUSH
39184: LD_VAR 0 10
39188: PPUSH
39189: LD_INT 2
39191: PPUSH
39192: CALL_OW 275
39196: PUSH
39197: LD_VAR 0 11
39201: PUSH
39202: LD_INT 2
39204: ARRAY
39205: GREATEREQUAL
39206: AND
39207: PUSH
39208: LD_VAR 0 10
39212: PPUSH
39213: LD_INT 3
39215: PPUSH
39216: CALL_OW 275
39220: PUSH
39221: LD_VAR 0 11
39225: PUSH
39226: LD_INT 3
39228: ARRAY
39229: GREATEREQUAL
39230: AND
39231: NOT
39232: IFFALSE 39236
// exit ;
39234: GO 39823
// if GetBType ( depot ) = b_depot then
39236: LD_VAR 0 1
39240: PPUSH
39241: CALL_OW 266
39245: PUSH
39246: LD_INT 0
39248: EQUAL
39249: IFFALSE 39261
// dist := 28 else
39251: LD_ADDR_VAR 0 14
39255: PUSH
39256: LD_INT 28
39258: ST_TO_ADDR
39259: GO 39269
// dist := 36 ;
39261: LD_ADDR_VAR 0 14
39265: PUSH
39266: LD_INT 36
39268: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39269: LD_VAR 0 1
39273: PPUSH
39274: LD_VAR 0 3
39278: PPUSH
39279: LD_VAR 0 4
39283: PPUSH
39284: CALL_OW 297
39288: PUSH
39289: LD_VAR 0 14
39293: GREATER
39294: IFFALSE 39298
// exit ;
39296: GO 39823
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39298: LD_ADDR_VAR 0 12
39302: PUSH
39303: LD_VAR 0 2
39307: PPUSH
39308: LD_VAR 0 3
39312: PPUSH
39313: LD_VAR 0 4
39317: PPUSH
39318: LD_VAR 0 5
39322: PPUSH
39323: LD_VAR 0 1
39327: PPUSH
39328: CALL_OW 248
39332: PPUSH
39333: LD_INT 0
39335: PPUSH
39336: CALL 39828 0 6
39340: ST_TO_ADDR
// if not hexes then
39341: LD_VAR 0 12
39345: NOT
39346: IFFALSE 39350
// exit ;
39348: GO 39823
// hex := GetHexInfo ( x , y ) ;
39350: LD_ADDR_VAR 0 15
39354: PUSH
39355: LD_VAR 0 3
39359: PPUSH
39360: LD_VAR 0 4
39364: PPUSH
39365: CALL_OW 546
39369: ST_TO_ADDR
// if hex [ 1 ] then
39370: LD_VAR 0 15
39374: PUSH
39375: LD_INT 1
39377: ARRAY
39378: IFFALSE 39382
// exit ;
39380: GO 39823
// height := hex [ 2 ] ;
39382: LD_ADDR_VAR 0 13
39386: PUSH
39387: LD_VAR 0 15
39391: PUSH
39392: LD_INT 2
39394: ARRAY
39395: ST_TO_ADDR
// for i = 1 to hexes do
39396: LD_ADDR_VAR 0 7
39400: PUSH
39401: DOUBLE
39402: LD_INT 1
39404: DEC
39405: ST_TO_ADDR
39406: LD_VAR 0 12
39410: PUSH
39411: FOR_TO
39412: IFFALSE 39742
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39414: LD_VAR 0 12
39418: PUSH
39419: LD_VAR 0 7
39423: ARRAY
39424: PUSH
39425: LD_INT 1
39427: ARRAY
39428: PPUSH
39429: LD_VAR 0 12
39433: PUSH
39434: LD_VAR 0 7
39438: ARRAY
39439: PUSH
39440: LD_INT 2
39442: ARRAY
39443: PPUSH
39444: CALL_OW 488
39448: NOT
39449: PUSH
39450: LD_VAR 0 12
39454: PUSH
39455: LD_VAR 0 7
39459: ARRAY
39460: PUSH
39461: LD_INT 1
39463: ARRAY
39464: PPUSH
39465: LD_VAR 0 12
39469: PUSH
39470: LD_VAR 0 7
39474: ARRAY
39475: PUSH
39476: LD_INT 2
39478: ARRAY
39479: PPUSH
39480: CALL_OW 428
39484: PUSH
39485: LD_INT 0
39487: GREATER
39488: OR
39489: PUSH
39490: LD_VAR 0 12
39494: PUSH
39495: LD_VAR 0 7
39499: ARRAY
39500: PUSH
39501: LD_INT 1
39503: ARRAY
39504: PPUSH
39505: LD_VAR 0 12
39509: PUSH
39510: LD_VAR 0 7
39514: ARRAY
39515: PUSH
39516: LD_INT 2
39518: ARRAY
39519: PPUSH
39520: CALL_OW 351
39524: OR
39525: IFFALSE 39531
// exit ;
39527: POP
39528: POP
39529: GO 39823
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39531: LD_ADDR_VAR 0 8
39535: PUSH
39536: LD_VAR 0 12
39540: PUSH
39541: LD_VAR 0 7
39545: ARRAY
39546: PUSH
39547: LD_INT 1
39549: ARRAY
39550: PPUSH
39551: LD_VAR 0 12
39555: PUSH
39556: LD_VAR 0 7
39560: ARRAY
39561: PUSH
39562: LD_INT 2
39564: ARRAY
39565: PPUSH
39566: CALL_OW 546
39570: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39571: LD_VAR 0 8
39575: PUSH
39576: LD_INT 1
39578: ARRAY
39579: PUSH
39580: LD_VAR 0 8
39584: PUSH
39585: LD_INT 2
39587: ARRAY
39588: PUSH
39589: LD_VAR 0 13
39593: PUSH
39594: LD_INT 2
39596: PLUS
39597: GREATER
39598: OR
39599: PUSH
39600: LD_VAR 0 8
39604: PUSH
39605: LD_INT 2
39607: ARRAY
39608: PUSH
39609: LD_VAR 0 13
39613: PUSH
39614: LD_INT 2
39616: MINUS
39617: LESS
39618: OR
39619: PUSH
39620: LD_VAR 0 8
39624: PUSH
39625: LD_INT 3
39627: ARRAY
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 8
39634: PUSH
39635: LD_INT 9
39637: PUSH
39638: LD_INT 10
39640: PUSH
39641: LD_INT 11
39643: PUSH
39644: LD_INT 12
39646: PUSH
39647: LD_INT 13
39649: PUSH
39650: LD_INT 16
39652: PUSH
39653: LD_INT 17
39655: PUSH
39656: LD_INT 18
39658: PUSH
39659: LD_INT 19
39661: PUSH
39662: LD_INT 20
39664: PUSH
39665: LD_INT 21
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: IN
39683: NOT
39684: OR
39685: PUSH
39686: LD_VAR 0 8
39690: PUSH
39691: LD_INT 5
39693: ARRAY
39694: NOT
39695: OR
39696: PUSH
39697: LD_VAR 0 8
39701: PUSH
39702: LD_INT 6
39704: ARRAY
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: LD_INT 7
39714: PUSH
39715: LD_INT 9
39717: PUSH
39718: LD_INT 10
39720: PUSH
39721: LD_INT 11
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: IN
39732: NOT
39733: OR
39734: IFFALSE 39740
// exit ;
39736: POP
39737: POP
39738: GO 39823
// end ;
39740: GO 39411
39742: POP
39743: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39744: LD_VAR 0 9
39748: PPUSH
39749: LD_VAR 0 3
39753: PPUSH
39754: LD_VAR 0 4
39758: PPUSH
39759: LD_INT 20
39761: PPUSH
39762: CALL 31775 0 4
39766: PUSH
39767: LD_INT 4
39769: ARRAY
39770: IFFALSE 39774
// exit ;
39772: GO 39823
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39774: LD_VAR 0 2
39778: PUSH
39779: LD_INT 29
39781: PUSH
39782: LD_INT 30
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: IN
39789: PUSH
39790: LD_VAR 0 3
39794: PPUSH
39795: LD_VAR 0 4
39799: PPUSH
39800: LD_VAR 0 9
39804: PPUSH
39805: CALL_OW 440
39809: NOT
39810: AND
39811: IFFALSE 39815
// exit ;
39813: GO 39823
// result := true ;
39815: LD_ADDR_VAR 0 6
39819: PUSH
39820: LD_INT 1
39822: ST_TO_ADDR
// end ;
39823: LD_VAR 0 6
39827: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39828: LD_INT 0
39830: PPUSH
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
39849: PPUSH
39850: PPUSH
39851: PPUSH
39852: PPUSH
39853: PPUSH
39854: PPUSH
39855: PPUSH
39856: PPUSH
39857: PPUSH
39858: PPUSH
39859: PPUSH
39860: PPUSH
39861: PPUSH
39862: PPUSH
39863: PPUSH
39864: PPUSH
39865: PPUSH
39866: PPUSH
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
39884: PPUSH
39885: PPUSH
39886: PPUSH
39887: PPUSH
// result = [ ] ;
39888: LD_ADDR_VAR 0 7
39892: PUSH
39893: EMPTY
39894: ST_TO_ADDR
// temp_list = [ ] ;
39895: LD_ADDR_VAR 0 9
39899: PUSH
39900: EMPTY
39901: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39902: LD_VAR 0 4
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: LD_INT 3
39918: PUSH
39919: LD_INT 4
39921: PUSH
39922: LD_INT 5
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: IN
39933: NOT
39934: PUSH
39935: LD_VAR 0 1
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: IN
39950: PUSH
39951: LD_VAR 0 5
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: LD_INT 3
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: IN
39970: NOT
39971: AND
39972: OR
39973: IFFALSE 39977
// exit ;
39975: GO 58368
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39977: LD_VAR 0 1
39981: PUSH
39982: LD_INT 6
39984: PUSH
39985: LD_INT 7
39987: PUSH
39988: LD_INT 8
39990: PUSH
39991: LD_INT 13
39993: PUSH
39994: LD_INT 12
39996: PUSH
39997: LD_INT 15
39999: PUSH
40000: LD_INT 11
40002: PUSH
40003: LD_INT 14
40005: PUSH
40006: LD_INT 10
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: IN
40020: IFFALSE 40030
// btype = b_lab ;
40022: LD_ADDR_VAR 0 1
40026: PUSH
40027: LD_INT 6
40029: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40030: LD_VAR 0 6
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: IN
40049: NOT
40050: PUSH
40051: LD_VAR 0 1
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: LD_INT 2
40064: PUSH
40065: LD_INT 3
40067: PUSH
40068: LD_INT 6
40070: PUSH
40071: LD_INT 36
40073: PUSH
40074: LD_INT 4
40076: PUSH
40077: LD_INT 5
40079: PUSH
40080: LD_INT 31
40082: PUSH
40083: LD_INT 32
40085: PUSH
40086: LD_INT 33
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: IN
40102: NOT
40103: PUSH
40104: LD_VAR 0 6
40108: PUSH
40109: LD_INT 1
40111: EQUAL
40112: AND
40113: OR
40114: PUSH
40115: LD_VAR 0 1
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: LD_INT 3
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: IN
40130: NOT
40131: PUSH
40132: LD_VAR 0 6
40136: PUSH
40137: LD_INT 2
40139: EQUAL
40140: AND
40141: OR
40142: IFFALSE 40152
// mode = 0 ;
40144: LD_ADDR_VAR 0 6
40148: PUSH
40149: LD_INT 0
40151: ST_TO_ADDR
// case mode of 0 :
40152: LD_VAR 0 6
40156: PUSH
40157: LD_INT 0
40159: DOUBLE
40160: EQUAL
40161: IFTRUE 40165
40163: GO 51618
40165: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40166: LD_ADDR_VAR 0 11
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: LD_INT 2
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: LD_INT 3
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: LD_INT 3
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: LD_INT 2
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40359: LD_ADDR_VAR 0 12
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 2
40482: NEG
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 2
40493: NEG
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 2
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 3
40516: NEG
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 3
40527: NEG
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40555: LD_ADDR_VAR 0 13
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: LD_INT 2
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: LD_INT 3
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 3
40714: NEG
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 3
40726: NEG
40727: PUSH
40728: LD_INT 3
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40754: LD_ADDR_VAR 0 14
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: LD_INT 2
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: LD_INT 2
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 3
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 3
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 2
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40950: LD_ADDR_VAR 0 15
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 3
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 3
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41143: LD_ADDR_VAR 0 16
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: LD_INT 2
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 3
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 3
41300: PUSH
41301: LD_INT 3
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: LD_INT 3
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41336: LD_ADDR_VAR 0 17
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: NEG
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: LD_INT 2
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 2
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: LD_INT 2
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 2
41512: NEG
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 2
41523: NEG
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: NEG
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41566: LD_ADDR_VAR 0 18
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: LD_INT 2
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: NEG
41766: PUSH
41767: LD_INT 2
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41796: LD_ADDR_VAR 0 19
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: NEG
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 2
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: NEG
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 2
41972: NEG
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: LD_INT 2
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42026: LD_ADDR_VAR 0 20
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: LD_INT 1
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: NEG
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 2
42213: NEG
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: LD_INT 2
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42256: LD_ADDR_VAR 0 21
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: LD_INT 2
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: LD_INT 2
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42486: LD_ADDR_VAR 0 22
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: NEG
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42716: LD_ADDR_VAR 0 23
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: NEG
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: NEG
42928: PUSH
42929: LD_INT 3
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 3
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 2
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42996: LD_ADDR_VAR 0 24
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: LD_INT 2
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: NEG
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 2
43183: NEG
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 2
43195: NEG
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 3
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 3
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43272: LD_ADDR_VAR 0 25
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 3
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 3
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: LD_INT 3
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 3
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43546: LD_ADDR_VAR 0 26
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 2
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 2
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 2
43722: NEG
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 2
43733: NEG
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: NEG
43746: PUSH
43747: LD_INT 2
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 3
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: LD_INT 3
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43822: LD_ADDR_VAR 0 27
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 2
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 2
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 2
43998: NEG
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 2
44009: NEG
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: LD_INT 2
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 2
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 3
44055: NEG
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 3
44067: NEG
44068: PUSH
44069: LD_INT 2
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44102: LD_ADDR_VAR 0 28
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 2
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: NEG
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: NEG
44314: PUSH
44315: LD_INT 3
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: LD_INT 3
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 3
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 3
44349: NEG
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44384: LD_ADDR_VAR 0 29
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: LD_INT 2
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: NEG
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: LD_INT 3
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 3
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 3
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 3
44628: NEG
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44663: LD_ADDR_VAR 0 30
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 2
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: NEG
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 3
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 3
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 3
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 3
44906: NEG
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44941: LD_ADDR_VAR 0 31
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 2
45106: NEG
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: LD_INT 3
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 3
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: LD_INT 3
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 3
45184: NEG
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45219: LD_ADDR_VAR 0 32
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 2
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 3
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 3
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: LD_INT 3
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 3
45462: NEG
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45497: LD_ADDR_VAR 0 33
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: LD_INT 3
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 3
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 3
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 3
45741: NEG
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45776: LD_ADDR_VAR 0 34
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 3
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 3
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: NEG
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 3
46021: NEG
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46056: LD_ADDR_VAR 0 35
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46168: LD_ADDR_VAR 0 36
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46280: LD_ADDR_VAR 0 37
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46392: LD_ADDR_VAR 0 38
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46504: LD_ADDR_VAR 0 39
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46616: LD_ADDR_VAR 0 40
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46728: LD_ADDR_VAR 0 41
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: LD_INT 3
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 3
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 3
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 3
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: PUSH
46972: LD_INT 3
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 3
47002: NEG
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 3
47013: NEG
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 3
47025: NEG
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 3
47037: NEG
47038: PUSH
47039: LD_INT 3
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47078: LD_ADDR_VAR 0 42
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 2
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: LD_INT 3
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 3
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 3
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 3
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 3
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: LD_INT 3
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 3
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 3
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 3
47375: NEG
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: LD_INT 3
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47428: LD_ADDR_VAR 0 43
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 3
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 3
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 2
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 3
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 3
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 3
47724: NEG
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 3
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47776: LD_ADDR_VAR 0 44
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: LD_INT 3
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 3
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 3
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 3
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 3
48019: PUSH
48020: LD_INT 3
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: LD_INT 3
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 3
48050: NEG
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 3
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 3
48073: NEG
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 3
48085: NEG
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48126: LD_ADDR_VAR 0 45
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 2
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: LD_INT 3
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: LD_INT 3
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 3
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 3
48372: PUSH
48373: LD_INT 3
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 3
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: LD_INT 3
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 3
48423: NEG
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 3
48435: NEG
48436: PUSH
48437: LD_INT 3
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48476: LD_ADDR_VAR 0 46
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 3
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 3
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 3
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 3
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 3
48772: NEG
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48824: LD_ADDR_VAR 0 47
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48975: LD_ADDR_VAR 0 48
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 2
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49122: LD_ADDR_VAR 0 49
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49266: LD_ADDR_VAR 0 50
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49410: LD_ADDR_VAR 0 51
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 2
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49557: LD_ADDR_VAR 0 52
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49708: LD_ADDR_VAR 0 53
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 2
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: LD_INT 2
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49938: LD_ADDR_VAR 0 54
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: NEG
50138: PUSH
50139: LD_INT 2
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50168: LD_ADDR_VAR 0 55
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50398: LD_ADDR_VAR 0 56
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50628: LD_ADDR_VAR 0 57
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50858: LD_ADDR_VAR 0 58
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 2
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51088: LD_ADDR_VAR 0 59
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51176: LD_ADDR_VAR 0 60
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51264: LD_ADDR_VAR 0 61
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51352: LD_ADDR_VAR 0 62
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51440: LD_ADDR_VAR 0 63
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51528: LD_ADDR_VAR 0 64
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: ST_TO_ADDR
// end ; 1 :
51616: GO 57513
51618: LD_INT 1
51620: DOUBLE
51621: EQUAL
51622: IFTRUE 51626
51624: GO 54249
51626: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51627: LD_ADDR_VAR 0 11
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 3
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 3
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: LIST
51670: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51671: LD_ADDR_VAR 0 12
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: LIST
51711: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51712: LD_ADDR_VAR 0 13
51716: PUSH
51717: LD_INT 3
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: LD_INT 3
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51752: LD_ADDR_VAR 0 14
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: LIST
51792: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51793: LD_ADDR_VAR 0 15
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 3
51811: NEG
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: LIST
51836: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51837: LD_ADDR_VAR 0 16
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: LD_INT 2
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 3
51868: NEG
51869: PUSH
51870: LD_INT 3
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: LIST
51882: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51883: LD_ADDR_VAR 0 17
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: LD_INT 3
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 3
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51927: LD_ADDR_VAR 0 18
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 3
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 3
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51968: LD_ADDR_VAR 0 19
51972: PUSH
51973: LD_INT 3
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 3
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52008: LD_ADDR_VAR 0 20
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 3
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 3
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: LIST
52048: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52049: LD_ADDR_VAR 0 21
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 3
52067: NEG
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52093: LD_ADDR_VAR 0 22
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 3
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 3
52112: NEG
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 3
52124: NEG
52125: PUSH
52126: LD_INT 3
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52139: LD_ADDR_VAR 0 23
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 3
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: LD_INT 4
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 3
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: LIST
52182: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52183: LD_ADDR_VAR 0 24
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 4
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: LIST
52223: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52224: LD_ADDR_VAR 0 25
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: LD_INT 3
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 4
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: LD_INT 4
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52264: LD_ADDR_VAR 0 26
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 4
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52305: LD_ADDR_VAR 0 27
52309: PUSH
52310: LD_INT 3
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 3
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 4
52334: NEG
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52349: LD_ADDR_VAR 0 28
52353: PUSH
52354: LD_INT 3
52356: NEG
52357: PUSH
52358: LD_INT 3
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 3
52368: NEG
52369: PUSH
52370: LD_INT 4
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 4
52380: NEG
52381: PUSH
52382: LD_INT 3
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52395: LD_ADDR_VAR 0 29
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 3
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 3
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 4
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 4
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 3
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: LD_INT 5
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 5
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 4
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 6
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 6
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 5
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52550: LD_ADDR_VAR 0 30
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 3
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 3
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 3
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 4
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 4
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 4
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 5
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 5
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 5
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 6
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 6
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52693: LD_ADDR_VAR 0 31
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: LD_INT 3
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: LD_INT 3
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 4
52730: PUSH
52731: LD_INT 3
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 4
52740: PUSH
52741: LD_INT 4
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 3
52750: PUSH
52751: LD_INT 4
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 5
52760: PUSH
52761: LD_INT 4
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 5
52770: PUSH
52771: LD_INT 5
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 4
52780: PUSH
52781: LD_INT 5
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 6
52790: PUSH
52791: LD_INT 5
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 6
52800: PUSH
52801: LD_INT 6
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 5
52810: PUSH
52811: LD_INT 6
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52832: LD_ADDR_VAR 0 32
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 3
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 3
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 4
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 4
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 3
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 5
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 5
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 4
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: LD_INT 6
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: LD_INT 6
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: LD_INT 5
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52975: LD_ADDR_VAR 0 33
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 3
52993: NEG
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 3
53004: NEG
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 4
53027: NEG
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 4
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 4
53050: NEG
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 5
53061: NEG
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 5
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 5
53084: NEG
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 6
53095: NEG
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 6
53106: NEG
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53130: LD_ADDR_VAR 0 34
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: LD_INT 3
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 3
53149: NEG
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 3
53161: NEG
53162: PUSH
53163: LD_INT 3
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 3
53173: NEG
53174: PUSH
53175: LD_INT 4
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 4
53185: NEG
53186: PUSH
53187: LD_INT 3
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 4
53197: NEG
53198: PUSH
53199: LD_INT 4
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 4
53209: NEG
53210: PUSH
53211: LD_INT 5
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 5
53221: NEG
53222: PUSH
53223: LD_INT 4
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 5
53233: NEG
53234: PUSH
53235: LD_INT 5
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 5
53245: NEG
53246: PUSH
53247: LD_INT 6
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 6
53257: NEG
53258: PUSH
53259: LD_INT 5
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 6
53269: NEG
53270: PUSH
53271: LD_INT 6
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53293: LD_ADDR_VAR 0 41
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: LIST
53336: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53337: LD_ADDR_VAR 0 42
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 3
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: LIST
53377: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53378: LD_ADDR_VAR 0 43
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: LIST
53417: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53418: LD_ADDR_VAR 0 44
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: LD_INT 3
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: LIST
53458: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53459: LD_ADDR_VAR 0 45
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 3
53488: NEG
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53503: LD_ADDR_VAR 0 46
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: LD_INT 3
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 3
53534: NEG
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: LIST
53548: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53549: LD_ADDR_VAR 0 47
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: LD_INT 3
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 3
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53582: LD_ADDR_VAR 0 48
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53613: LD_ADDR_VAR 0 49
53617: PUSH
53618: LD_INT 3
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53642: LD_ADDR_VAR 0 50
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 3
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53671: LD_ADDR_VAR 0 51
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53702: LD_ADDR_VAR 0 52
53706: PUSH
53707: LD_INT 3
53709: NEG
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53735: LD_ADDR_VAR 0 53
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 3
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 3
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: LIST
53778: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53779: LD_ADDR_VAR 0 54
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 3
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: LIST
53819: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53820: LD_ADDR_VAR 0 55
53824: PUSH
53825: LD_INT 3
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: PUSH
53848: LD_INT 3
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: LIST
53859: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53860: LD_ADDR_VAR 0 56
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 3
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 3
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: LIST
53900: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53901: LD_ADDR_VAR 0 57
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 3
53919: NEG
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: LIST
53944: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53945: LD_ADDR_VAR 0 58
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: LD_INT 3
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: LD_INT 3
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53991: LD_ADDR_VAR 0 59
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 2
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54035: LD_ADDR_VAR 0 60
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54076: LD_ADDR_VAR 0 61
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54116: LD_ADDR_VAR 0 62
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: LIST
54156: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54157: LD_ADDR_VAR 0 63
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54201: LD_ADDR_VAR 0 64
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: LIST
54246: ST_TO_ADDR
// end ; 2 :
54247: GO 57513
54249: LD_INT 2
54251: DOUBLE
54252: EQUAL
54253: IFTRUE 54257
54255: GO 57512
54257: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54258: LD_ADDR_VAR 0 29
54262: PUSH
54263: LD_INT 4
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 4
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 5
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 5
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 4
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 3
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 3
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 5
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: LD_INT 3
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 4
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 4
54388: PUSH
54389: LD_INT 4
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 3
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: LD_INT 3
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 4
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: LD_INT 4
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 4
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 3
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: LD_INT 4
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: LD_INT 5
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 5
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: LD_INT 4
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 3
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: LD_INT 5
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: LD_INT 3
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: NEG
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 3
54586: NEG
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 4
54597: NEG
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 4
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 4
54620: NEG
54621: PUSH
54622: LD_INT 2
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: NEG
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 4
54643: NEG
54644: PUSH
54645: LD_INT 4
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 4
54655: NEG
54656: PUSH
54657: LD_INT 5
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 3
54667: NEG
54668: PUSH
54669: LD_INT 4
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 3
54679: NEG
54680: PUSH
54681: LD_INT 3
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 4
54691: NEG
54692: PUSH
54693: LD_INT 3
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 5
54703: NEG
54704: PUSH
54705: LD_INT 4
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 5
54715: NEG
54716: PUSH
54717: LD_INT 5
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 3
54727: NEG
54728: PUSH
54729: LD_INT 5
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 5
54739: NEG
54740: PUSH
54741: LD_INT 3
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54796: LD_ADDR_VAR 0 30
54800: PUSH
54801: LD_INT 4
54803: PUSH
54804: LD_INT 4
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 4
54813: PUSH
54814: LD_INT 3
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 5
54823: PUSH
54824: LD_INT 4
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 5
54833: PUSH
54834: LD_INT 5
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 4
54843: PUSH
54844: LD_INT 5
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: LD_INT 4
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 5
54873: PUSH
54874: LD_INT 3
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: LD_INT 5
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 3
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 4
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 4
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: LD_INT 3
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: LD_INT 2
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: LD_INT 4
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 4
54986: NEG
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 4
54997: NEG
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 3
55009: NEG
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 3
55020: NEG
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 4
55031: NEG
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 5
55042: NEG
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 5
55053: NEG
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 5
55065: NEG
55066: PUSH
55067: LD_INT 2
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: NEG
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 3
55088: NEG
55089: PUSH
55090: LD_INT 3
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 3
55100: NEG
55101: PUSH
55102: LD_INT 4
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: LD_INT 3
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 3
55136: NEG
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 4
55148: NEG
55149: PUSH
55150: LD_INT 3
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 4
55160: NEG
55161: PUSH
55162: LD_INT 4
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: LD_INT 4
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 4
55184: NEG
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 4
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 5
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 4
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 3
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 4
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: LD_INT 5
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 3
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: LD_INT 5
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55343: LD_ADDR_VAR 0 31
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 4
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 3
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 4
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: LD_INT 5
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 5
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: LD_INT 4
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 3
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: LD_INT 5
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: LD_INT 3
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 3
55443: NEG
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 3
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 3
55488: NEG
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 4
55499: NEG
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 4
55510: NEG
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 4
55522: NEG
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 4
55545: NEG
55546: PUSH
55547: LD_INT 4
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 4
55557: NEG
55558: PUSH
55559: LD_INT 5
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 3
55569: NEG
55570: PUSH
55571: LD_INT 4
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 3
55581: NEG
55582: PUSH
55583: LD_INT 3
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 4
55593: NEG
55594: PUSH
55595: LD_INT 3
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 5
55605: NEG
55606: PUSH
55607: LD_INT 4
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 5
55617: NEG
55618: PUSH
55619: LD_INT 5
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 3
55629: NEG
55630: PUSH
55631: LD_INT 5
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 5
55641: NEG
55642: PUSH
55643: LD_INT 3
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 4
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 3
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 2
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 3
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: LD_INT 4
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: LD_INT 2
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 4
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 4
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 4
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 5
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 5
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 4
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 3
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 5
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55893: LD_ADDR_VAR 0 32
55897: PUSH
55898: LD_INT 4
55900: NEG
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 4
55911: NEG
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 4
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 5
55956: NEG
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 5
55967: NEG
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 5
55979: NEG
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: NEG
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: LD_INT 4
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: LD_INT 3
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 3
56050: NEG
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 4
56062: NEG
56063: PUSH
56064: LD_INT 3
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 4
56074: NEG
56075: PUSH
56076: LD_INT 4
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 4
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 4
56098: NEG
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 4
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 5
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: LD_INT 4
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 3
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: LD_INT 4
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: LD_INT 5
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: PUSH
56190: LD_INT 3
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: LD_INT 5
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 4
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 4
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 3
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 4
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 4
56305: PUSH
56306: LD_INT 4
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 4
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 5
56325: PUSH
56326: LD_INT 4
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 5
56335: PUSH
56336: LD_INT 5
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 4
56345: PUSH
56346: LD_INT 5
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 3
56355: PUSH
56356: LD_INT 4
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 3
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 5
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: LD_INT 5
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56440: LD_ADDR_VAR 0 33
56444: PUSH
56445: LD_INT 4
56447: NEG
56448: PUSH
56449: LD_INT 4
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 4
56459: NEG
56460: PUSH
56461: LD_INT 5
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 3
56471: NEG
56472: PUSH
56473: LD_INT 4
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: LD_INT 3
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 4
56495: NEG
56496: PUSH
56497: LD_INT 3
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 5
56507: NEG
56508: PUSH
56509: LD_INT 4
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 5
56519: NEG
56520: PUSH
56521: LD_INT 5
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: LD_INT 5
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 5
56543: NEG
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 4
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 2
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 3
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 4
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: LD_INT 4
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 4
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 4
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 5
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 5
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 4
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 3
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 5
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 3
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 3
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 4
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 4
56780: PUSH
56781: LD_INT 4
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 3
56790: PUSH
56791: LD_INT 4
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 4
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: LD_INT 4
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: LD_INT 4
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 3
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 4
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: LD_INT 5
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 5
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 4
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: LD_INT 5
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56978: LD_ADDR_VAR 0 34
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 4
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: LD_INT 5
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: LD_INT 4
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 3
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 4
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: LD_INT 5
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: LD_INT 3
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: LD_INT 5
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 4
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 4
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 3
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 4
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 4
57180: PUSH
57181: LD_INT 4
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 4
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 5
57200: PUSH
57201: LD_INT 4
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 5
57210: PUSH
57211: LD_INT 5
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 4
57220: PUSH
57221: LD_INT 5
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 3
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 5
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: PUSH
57261: LD_INT 5
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: LD_INT 3
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 4
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: LD_INT 4
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 4
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 4
57363: NEG
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 4
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 3
57386: NEG
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 3
57397: NEG
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 4
57408: NEG
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 5
57419: NEG
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 5
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 5
57442: NEG
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 3
57454: NEG
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// end ; end ;
57510: GO 57513
57512: POP
// case btype of b_depot , b_warehouse :
57513: LD_VAR 0 1
57517: PUSH
57518: LD_INT 0
57520: DOUBLE
57521: EQUAL
57522: IFTRUE 57532
57524: LD_INT 1
57526: DOUBLE
57527: EQUAL
57528: IFTRUE 57532
57530: GO 57733
57532: POP
// case nation of nation_american :
57533: LD_VAR 0 5
57537: PUSH
57538: LD_INT 1
57540: DOUBLE
57541: EQUAL
57542: IFTRUE 57546
57544: GO 57602
57546: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57547: LD_ADDR_VAR 0 9
57551: PUSH
57552: LD_VAR 0 11
57556: PUSH
57557: LD_VAR 0 12
57561: PUSH
57562: LD_VAR 0 13
57566: PUSH
57567: LD_VAR 0 14
57571: PUSH
57572: LD_VAR 0 15
57576: PUSH
57577: LD_VAR 0 16
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: PUSH
57590: LD_VAR 0 4
57594: PUSH
57595: LD_INT 1
57597: PLUS
57598: ARRAY
57599: ST_TO_ADDR
57600: GO 57731
57602: LD_INT 2
57604: DOUBLE
57605: EQUAL
57606: IFTRUE 57610
57608: GO 57666
57610: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57611: LD_ADDR_VAR 0 9
57615: PUSH
57616: LD_VAR 0 17
57620: PUSH
57621: LD_VAR 0 18
57625: PUSH
57626: LD_VAR 0 19
57630: PUSH
57631: LD_VAR 0 20
57635: PUSH
57636: LD_VAR 0 21
57640: PUSH
57641: LD_VAR 0 22
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: PUSH
57654: LD_VAR 0 4
57658: PUSH
57659: LD_INT 1
57661: PLUS
57662: ARRAY
57663: ST_TO_ADDR
57664: GO 57731
57666: LD_INT 3
57668: DOUBLE
57669: EQUAL
57670: IFTRUE 57674
57672: GO 57730
57674: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57675: LD_ADDR_VAR 0 9
57679: PUSH
57680: LD_VAR 0 23
57684: PUSH
57685: LD_VAR 0 24
57689: PUSH
57690: LD_VAR 0 25
57694: PUSH
57695: LD_VAR 0 26
57699: PUSH
57700: LD_VAR 0 27
57704: PUSH
57705: LD_VAR 0 28
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: PUSH
57718: LD_VAR 0 4
57722: PUSH
57723: LD_INT 1
57725: PLUS
57726: ARRAY
57727: ST_TO_ADDR
57728: GO 57731
57730: POP
57731: GO 58286
57733: LD_INT 2
57735: DOUBLE
57736: EQUAL
57737: IFTRUE 57747
57739: LD_INT 3
57741: DOUBLE
57742: EQUAL
57743: IFTRUE 57747
57745: GO 57803
57747: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57748: LD_ADDR_VAR 0 9
57752: PUSH
57753: LD_VAR 0 29
57757: PUSH
57758: LD_VAR 0 30
57762: PUSH
57763: LD_VAR 0 31
57767: PUSH
57768: LD_VAR 0 32
57772: PUSH
57773: LD_VAR 0 33
57777: PUSH
57778: LD_VAR 0 34
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: PUSH
57791: LD_VAR 0 4
57795: PUSH
57796: LD_INT 1
57798: PLUS
57799: ARRAY
57800: ST_TO_ADDR
57801: GO 58286
57803: LD_INT 16
57805: DOUBLE
57806: EQUAL
57807: IFTRUE 57865
57809: LD_INT 17
57811: DOUBLE
57812: EQUAL
57813: IFTRUE 57865
57815: LD_INT 18
57817: DOUBLE
57818: EQUAL
57819: IFTRUE 57865
57821: LD_INT 19
57823: DOUBLE
57824: EQUAL
57825: IFTRUE 57865
57827: LD_INT 22
57829: DOUBLE
57830: EQUAL
57831: IFTRUE 57865
57833: LD_INT 20
57835: DOUBLE
57836: EQUAL
57837: IFTRUE 57865
57839: LD_INT 21
57841: DOUBLE
57842: EQUAL
57843: IFTRUE 57865
57845: LD_INT 23
57847: DOUBLE
57848: EQUAL
57849: IFTRUE 57865
57851: LD_INT 24
57853: DOUBLE
57854: EQUAL
57855: IFTRUE 57865
57857: LD_INT 25
57859: DOUBLE
57860: EQUAL
57861: IFTRUE 57865
57863: GO 57921
57865: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57866: LD_ADDR_VAR 0 9
57870: PUSH
57871: LD_VAR 0 35
57875: PUSH
57876: LD_VAR 0 36
57880: PUSH
57881: LD_VAR 0 37
57885: PUSH
57886: LD_VAR 0 38
57890: PUSH
57891: LD_VAR 0 39
57895: PUSH
57896: LD_VAR 0 40
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: PUSH
57909: LD_VAR 0 4
57913: PUSH
57914: LD_INT 1
57916: PLUS
57917: ARRAY
57918: ST_TO_ADDR
57919: GO 58286
57921: LD_INT 6
57923: DOUBLE
57924: EQUAL
57925: IFTRUE 57977
57927: LD_INT 7
57929: DOUBLE
57930: EQUAL
57931: IFTRUE 57977
57933: LD_INT 8
57935: DOUBLE
57936: EQUAL
57937: IFTRUE 57977
57939: LD_INT 13
57941: DOUBLE
57942: EQUAL
57943: IFTRUE 57977
57945: LD_INT 12
57947: DOUBLE
57948: EQUAL
57949: IFTRUE 57977
57951: LD_INT 15
57953: DOUBLE
57954: EQUAL
57955: IFTRUE 57977
57957: LD_INT 11
57959: DOUBLE
57960: EQUAL
57961: IFTRUE 57977
57963: LD_INT 14
57965: DOUBLE
57966: EQUAL
57967: IFTRUE 57977
57969: LD_INT 10
57971: DOUBLE
57972: EQUAL
57973: IFTRUE 57977
57975: GO 58033
57977: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57978: LD_ADDR_VAR 0 9
57982: PUSH
57983: LD_VAR 0 41
57987: PUSH
57988: LD_VAR 0 42
57992: PUSH
57993: LD_VAR 0 43
57997: PUSH
57998: LD_VAR 0 44
58002: PUSH
58003: LD_VAR 0 45
58007: PUSH
58008: LD_VAR 0 46
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: PUSH
58021: LD_VAR 0 4
58025: PUSH
58026: LD_INT 1
58028: PLUS
58029: ARRAY
58030: ST_TO_ADDR
58031: GO 58286
58033: LD_INT 36
58035: DOUBLE
58036: EQUAL
58037: IFTRUE 58041
58039: GO 58097
58041: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58042: LD_ADDR_VAR 0 9
58046: PUSH
58047: LD_VAR 0 47
58051: PUSH
58052: LD_VAR 0 48
58056: PUSH
58057: LD_VAR 0 49
58061: PUSH
58062: LD_VAR 0 50
58066: PUSH
58067: LD_VAR 0 51
58071: PUSH
58072: LD_VAR 0 52
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: PUSH
58085: LD_VAR 0 4
58089: PUSH
58090: LD_INT 1
58092: PLUS
58093: ARRAY
58094: ST_TO_ADDR
58095: GO 58286
58097: LD_INT 4
58099: DOUBLE
58100: EQUAL
58101: IFTRUE 58123
58103: LD_INT 5
58105: DOUBLE
58106: EQUAL
58107: IFTRUE 58123
58109: LD_INT 34
58111: DOUBLE
58112: EQUAL
58113: IFTRUE 58123
58115: LD_INT 37
58117: DOUBLE
58118: EQUAL
58119: IFTRUE 58123
58121: GO 58179
58123: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58124: LD_ADDR_VAR 0 9
58128: PUSH
58129: LD_VAR 0 53
58133: PUSH
58134: LD_VAR 0 54
58138: PUSH
58139: LD_VAR 0 55
58143: PUSH
58144: LD_VAR 0 56
58148: PUSH
58149: LD_VAR 0 57
58153: PUSH
58154: LD_VAR 0 58
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: PUSH
58167: LD_VAR 0 4
58171: PUSH
58172: LD_INT 1
58174: PLUS
58175: ARRAY
58176: ST_TO_ADDR
58177: GO 58286
58179: LD_INT 31
58181: DOUBLE
58182: EQUAL
58183: IFTRUE 58229
58185: LD_INT 32
58187: DOUBLE
58188: EQUAL
58189: IFTRUE 58229
58191: LD_INT 33
58193: DOUBLE
58194: EQUAL
58195: IFTRUE 58229
58197: LD_INT 27
58199: DOUBLE
58200: EQUAL
58201: IFTRUE 58229
58203: LD_INT 26
58205: DOUBLE
58206: EQUAL
58207: IFTRUE 58229
58209: LD_INT 28
58211: DOUBLE
58212: EQUAL
58213: IFTRUE 58229
58215: LD_INT 29
58217: DOUBLE
58218: EQUAL
58219: IFTRUE 58229
58221: LD_INT 30
58223: DOUBLE
58224: EQUAL
58225: IFTRUE 58229
58227: GO 58285
58229: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58230: LD_ADDR_VAR 0 9
58234: PUSH
58235: LD_VAR 0 59
58239: PUSH
58240: LD_VAR 0 60
58244: PUSH
58245: LD_VAR 0 61
58249: PUSH
58250: LD_VAR 0 62
58254: PUSH
58255: LD_VAR 0 63
58259: PUSH
58260: LD_VAR 0 64
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: PUSH
58273: LD_VAR 0 4
58277: PUSH
58278: LD_INT 1
58280: PLUS
58281: ARRAY
58282: ST_TO_ADDR
58283: GO 58286
58285: POP
// temp_list2 = [ ] ;
58286: LD_ADDR_VAR 0 10
58290: PUSH
58291: EMPTY
58292: ST_TO_ADDR
// for i in temp_list do
58293: LD_ADDR_VAR 0 8
58297: PUSH
58298: LD_VAR 0 9
58302: PUSH
58303: FOR_IN
58304: IFFALSE 58356
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58306: LD_ADDR_VAR 0 10
58310: PUSH
58311: LD_VAR 0 10
58315: PUSH
58316: LD_VAR 0 8
58320: PUSH
58321: LD_INT 1
58323: ARRAY
58324: PUSH
58325: LD_VAR 0 2
58329: PLUS
58330: PUSH
58331: LD_VAR 0 8
58335: PUSH
58336: LD_INT 2
58338: ARRAY
58339: PUSH
58340: LD_VAR 0 3
58344: PLUS
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: EMPTY
58351: LIST
58352: ADD
58353: ST_TO_ADDR
58354: GO 58303
58356: POP
58357: POP
// result = temp_list2 ;
58358: LD_ADDR_VAR 0 7
58362: PUSH
58363: LD_VAR 0 10
58367: ST_TO_ADDR
// end ;
58368: LD_VAR 0 7
58372: RET
// export function EnemyInRange ( unit , dist ) ; begin
58373: LD_INT 0
58375: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58376: LD_ADDR_VAR 0 3
58380: PUSH
58381: LD_VAR 0 1
58385: PPUSH
58386: CALL_OW 255
58390: PPUSH
58391: LD_VAR 0 1
58395: PPUSH
58396: CALL_OW 250
58400: PPUSH
58401: LD_VAR 0 1
58405: PPUSH
58406: CALL_OW 251
58410: PPUSH
58411: LD_VAR 0 2
58415: PPUSH
58416: CALL 31775 0 4
58420: PUSH
58421: LD_INT 4
58423: ARRAY
58424: ST_TO_ADDR
// end ;
58425: LD_VAR 0 3
58429: RET
// export function PlayerSeeMe ( unit ) ; begin
58430: LD_INT 0
58432: PPUSH
// result := See ( your_side , unit ) ;
58433: LD_ADDR_VAR 0 2
58437: PUSH
58438: LD_OWVAR 2
58442: PPUSH
58443: LD_VAR 0 1
58447: PPUSH
58448: CALL_OW 292
58452: ST_TO_ADDR
// end ;
58453: LD_VAR 0 2
58457: RET
// export function ReverseDir ( unit ) ; begin
58458: LD_INT 0
58460: PPUSH
// if not unit then
58461: LD_VAR 0 1
58465: NOT
58466: IFFALSE 58470
// exit ;
58468: GO 58493
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58470: LD_ADDR_VAR 0 2
58474: PUSH
58475: LD_VAR 0 1
58479: PPUSH
58480: CALL_OW 254
58484: PUSH
58485: LD_INT 3
58487: PLUS
58488: PUSH
58489: LD_INT 6
58491: MOD
58492: ST_TO_ADDR
// end ;
58493: LD_VAR 0 2
58497: RET
// export function ReverseArray ( array ) ; var i ; begin
58498: LD_INT 0
58500: PPUSH
58501: PPUSH
// if not array then
58502: LD_VAR 0 1
58506: NOT
58507: IFFALSE 58511
// exit ;
58509: GO 58566
// result := [ ] ;
58511: LD_ADDR_VAR 0 2
58515: PUSH
58516: EMPTY
58517: ST_TO_ADDR
// for i := array downto 1 do
58518: LD_ADDR_VAR 0 3
58522: PUSH
58523: DOUBLE
58524: LD_VAR 0 1
58528: INC
58529: ST_TO_ADDR
58530: LD_INT 1
58532: PUSH
58533: FOR_DOWNTO
58534: IFFALSE 58564
// result := Join ( result , array [ i ] ) ;
58536: LD_ADDR_VAR 0 2
58540: PUSH
58541: LD_VAR 0 2
58545: PPUSH
58546: LD_VAR 0 1
58550: PUSH
58551: LD_VAR 0 3
58555: ARRAY
58556: PPUSH
58557: CALL 63210 0 2
58561: ST_TO_ADDR
58562: GO 58533
58564: POP
58565: POP
// end ;
58566: LD_VAR 0 2
58570: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58571: LD_INT 0
58573: PPUSH
58574: PPUSH
58575: PPUSH
58576: PPUSH
58577: PPUSH
58578: PPUSH
// if not unit or not hexes then
58579: LD_VAR 0 1
58583: NOT
58584: PUSH
58585: LD_VAR 0 2
58589: NOT
58590: OR
58591: IFFALSE 58595
// exit ;
58593: GO 58718
// dist := 9999 ;
58595: LD_ADDR_VAR 0 5
58599: PUSH
58600: LD_INT 9999
58602: ST_TO_ADDR
// for i = 1 to hexes do
58603: LD_ADDR_VAR 0 4
58607: PUSH
58608: DOUBLE
58609: LD_INT 1
58611: DEC
58612: ST_TO_ADDR
58613: LD_VAR 0 2
58617: PUSH
58618: FOR_TO
58619: IFFALSE 58706
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58621: LD_ADDR_VAR 0 6
58625: PUSH
58626: LD_VAR 0 1
58630: PPUSH
58631: LD_VAR 0 2
58635: PUSH
58636: LD_VAR 0 4
58640: ARRAY
58641: PUSH
58642: LD_INT 1
58644: ARRAY
58645: PPUSH
58646: LD_VAR 0 2
58650: PUSH
58651: LD_VAR 0 4
58655: ARRAY
58656: PUSH
58657: LD_INT 2
58659: ARRAY
58660: PPUSH
58661: CALL_OW 297
58665: ST_TO_ADDR
// if tdist < dist then
58666: LD_VAR 0 6
58670: PUSH
58671: LD_VAR 0 5
58675: LESS
58676: IFFALSE 58704
// begin hex := hexes [ i ] ;
58678: LD_ADDR_VAR 0 8
58682: PUSH
58683: LD_VAR 0 2
58687: PUSH
58688: LD_VAR 0 4
58692: ARRAY
58693: ST_TO_ADDR
// dist := tdist ;
58694: LD_ADDR_VAR 0 5
58698: PUSH
58699: LD_VAR 0 6
58703: ST_TO_ADDR
// end ; end ;
58704: GO 58618
58706: POP
58707: POP
// result := hex ;
58708: LD_ADDR_VAR 0 3
58712: PUSH
58713: LD_VAR 0 8
58717: ST_TO_ADDR
// end ;
58718: LD_VAR 0 3
58722: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58723: LD_INT 0
58725: PPUSH
58726: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58727: LD_VAR 0 1
58731: NOT
58732: PUSH
58733: LD_VAR 0 1
58737: PUSH
58738: LD_INT 21
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 23
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PPUSH
58762: CALL_OW 69
58766: IN
58767: NOT
58768: OR
58769: IFFALSE 58773
// exit ;
58771: GO 58820
// for i = 1 to 3 do
58773: LD_ADDR_VAR 0 3
58777: PUSH
58778: DOUBLE
58779: LD_INT 1
58781: DEC
58782: ST_TO_ADDR
58783: LD_INT 3
58785: PUSH
58786: FOR_TO
58787: IFFALSE 58818
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58789: LD_VAR 0 1
58793: PPUSH
58794: CALL_OW 250
58798: PPUSH
58799: LD_VAR 0 1
58803: PPUSH
58804: CALL_OW 251
58808: PPUSH
58809: LD_INT 1
58811: PPUSH
58812: CALL_OW 453
58816: GO 58786
58818: POP
58819: POP
// end ;
58820: LD_VAR 0 2
58824: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58825: LD_INT 0
58827: PPUSH
58828: PPUSH
58829: PPUSH
58830: PPUSH
58831: PPUSH
58832: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58833: LD_VAR 0 1
58837: NOT
58838: PUSH
58839: LD_VAR 0 2
58843: NOT
58844: OR
58845: PUSH
58846: LD_VAR 0 1
58850: PPUSH
58851: CALL_OW 314
58855: OR
58856: IFFALSE 58860
// exit ;
58858: GO 59327
// if GetLives ( i ) < 250 then
58860: LD_VAR 0 4
58864: PPUSH
58865: CALL_OW 256
58869: PUSH
58870: LD_INT 250
58872: LESS
58873: IFFALSE 58886
// begin ComAutodestruct ( i ) ;
58875: LD_VAR 0 4
58879: PPUSH
58880: CALL 58723 0 1
// exit ;
58884: GO 59327
// end ; x := GetX ( enemy_unit ) ;
58886: LD_ADDR_VAR 0 7
58890: PUSH
58891: LD_VAR 0 2
58895: PPUSH
58896: CALL_OW 250
58900: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58901: LD_ADDR_VAR 0 8
58905: PUSH
58906: LD_VAR 0 2
58910: PPUSH
58911: CALL_OW 251
58915: ST_TO_ADDR
// if not x or not y then
58916: LD_VAR 0 7
58920: NOT
58921: PUSH
58922: LD_VAR 0 8
58926: NOT
58927: OR
58928: IFFALSE 58932
// exit ;
58930: GO 59327
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58932: LD_ADDR_VAR 0 6
58936: PUSH
58937: LD_VAR 0 7
58941: PPUSH
58942: LD_INT 0
58944: PPUSH
58945: LD_INT 4
58947: PPUSH
58948: CALL_OW 272
58952: PUSH
58953: LD_VAR 0 8
58957: PPUSH
58958: LD_INT 0
58960: PPUSH
58961: LD_INT 4
58963: PPUSH
58964: CALL_OW 273
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_VAR 0 7
58977: PPUSH
58978: LD_INT 1
58980: PPUSH
58981: LD_INT 4
58983: PPUSH
58984: CALL_OW 272
58988: PUSH
58989: LD_VAR 0 8
58993: PPUSH
58994: LD_INT 1
58996: PPUSH
58997: LD_INT 4
58999: PPUSH
59000: CALL_OW 273
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_VAR 0 7
59013: PPUSH
59014: LD_INT 2
59016: PPUSH
59017: LD_INT 4
59019: PPUSH
59020: CALL_OW 272
59024: PUSH
59025: LD_VAR 0 8
59029: PPUSH
59030: LD_INT 2
59032: PPUSH
59033: LD_INT 4
59035: PPUSH
59036: CALL_OW 273
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_VAR 0 7
59049: PPUSH
59050: LD_INT 3
59052: PPUSH
59053: LD_INT 4
59055: PPUSH
59056: CALL_OW 272
59060: PUSH
59061: LD_VAR 0 8
59065: PPUSH
59066: LD_INT 3
59068: PPUSH
59069: LD_INT 4
59071: PPUSH
59072: CALL_OW 273
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_VAR 0 7
59085: PPUSH
59086: LD_INT 4
59088: PPUSH
59089: LD_INT 4
59091: PPUSH
59092: CALL_OW 272
59096: PUSH
59097: LD_VAR 0 8
59101: PPUSH
59102: LD_INT 4
59104: PPUSH
59105: LD_INT 4
59107: PPUSH
59108: CALL_OW 273
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_VAR 0 7
59121: PPUSH
59122: LD_INT 5
59124: PPUSH
59125: LD_INT 4
59127: PPUSH
59128: CALL_OW 272
59132: PUSH
59133: LD_VAR 0 8
59137: PPUSH
59138: LD_INT 5
59140: PPUSH
59141: LD_INT 4
59143: PPUSH
59144: CALL_OW 273
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: ST_TO_ADDR
// for i = tmp downto 1 do
59161: LD_ADDR_VAR 0 4
59165: PUSH
59166: DOUBLE
59167: LD_VAR 0 6
59171: INC
59172: ST_TO_ADDR
59173: LD_INT 1
59175: PUSH
59176: FOR_DOWNTO
59177: IFFALSE 59278
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59179: LD_VAR 0 6
59183: PUSH
59184: LD_VAR 0 4
59188: ARRAY
59189: PUSH
59190: LD_INT 1
59192: ARRAY
59193: PPUSH
59194: LD_VAR 0 6
59198: PUSH
59199: LD_VAR 0 4
59203: ARRAY
59204: PUSH
59205: LD_INT 2
59207: ARRAY
59208: PPUSH
59209: CALL_OW 488
59213: NOT
59214: PUSH
59215: LD_VAR 0 6
59219: PUSH
59220: LD_VAR 0 4
59224: ARRAY
59225: PUSH
59226: LD_INT 1
59228: ARRAY
59229: PPUSH
59230: LD_VAR 0 6
59234: PUSH
59235: LD_VAR 0 4
59239: ARRAY
59240: PUSH
59241: LD_INT 2
59243: ARRAY
59244: PPUSH
59245: CALL_OW 428
59249: PUSH
59250: LD_INT 0
59252: NONEQUAL
59253: OR
59254: IFFALSE 59276
// tmp := Delete ( tmp , i ) ;
59256: LD_ADDR_VAR 0 6
59260: PUSH
59261: LD_VAR 0 6
59265: PPUSH
59266: LD_VAR 0 4
59270: PPUSH
59271: CALL_OW 3
59275: ST_TO_ADDR
59276: GO 59176
59278: POP
59279: POP
// j := GetClosestHex ( unit , tmp ) ;
59280: LD_ADDR_VAR 0 5
59284: PUSH
59285: LD_VAR 0 1
59289: PPUSH
59290: LD_VAR 0 6
59294: PPUSH
59295: CALL 58571 0 2
59299: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59300: LD_VAR 0 1
59304: PPUSH
59305: LD_VAR 0 5
59309: PUSH
59310: LD_INT 1
59312: ARRAY
59313: PPUSH
59314: LD_VAR 0 5
59318: PUSH
59319: LD_INT 2
59321: ARRAY
59322: PPUSH
59323: CALL_OW 111
// end ;
59327: LD_VAR 0 3
59331: RET
// export function PrepareApemanSoldier ( ) ; begin
59332: LD_INT 0
59334: PPUSH
// uc_nation := 0 ;
59335: LD_ADDR_OWVAR 21
59339: PUSH
59340: LD_INT 0
59342: ST_TO_ADDR
// hc_sex := sex_male ;
59343: LD_ADDR_OWVAR 27
59347: PUSH
59348: LD_INT 1
59350: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59351: LD_ADDR_OWVAR 28
59355: PUSH
59356: LD_INT 15
59358: ST_TO_ADDR
// hc_gallery :=  ;
59359: LD_ADDR_OWVAR 33
59363: PUSH
59364: LD_STRING 
59366: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59367: LD_ADDR_OWVAR 31
59371: PUSH
59372: LD_INT 0
59374: PPUSH
59375: LD_INT 3
59377: PPUSH
59378: CALL_OW 12
59382: PUSH
59383: LD_INT 0
59385: PPUSH
59386: LD_INT 3
59388: PPUSH
59389: CALL_OW 12
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: ST_TO_ADDR
// end ;
59406: LD_VAR 0 1
59410: RET
// export function PrepareApemanEngineer ( ) ; begin
59411: LD_INT 0
59413: PPUSH
// uc_nation := 0 ;
59414: LD_ADDR_OWVAR 21
59418: PUSH
59419: LD_INT 0
59421: ST_TO_ADDR
// hc_sex := sex_male ;
59422: LD_ADDR_OWVAR 27
59426: PUSH
59427: LD_INT 1
59429: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59430: LD_ADDR_OWVAR 28
59434: PUSH
59435: LD_INT 16
59437: ST_TO_ADDR
// hc_gallery :=  ;
59438: LD_ADDR_OWVAR 33
59442: PUSH
59443: LD_STRING 
59445: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59446: LD_ADDR_OWVAR 31
59450: PUSH
59451: LD_INT 0
59453: PPUSH
59454: LD_INT 3
59456: PPUSH
59457: CALL_OW 12
59461: PUSH
59462: LD_INT 0
59464: PPUSH
59465: LD_INT 3
59467: PPUSH
59468: CALL_OW 12
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: ST_TO_ADDR
// end ;
59485: LD_VAR 0 1
59489: RET
// export function PrepareApeman ( agressivity ) ; begin
59490: LD_INT 0
59492: PPUSH
// uc_side := 0 ;
59493: LD_ADDR_OWVAR 20
59497: PUSH
59498: LD_INT 0
59500: ST_TO_ADDR
// uc_nation := 0 ;
59501: LD_ADDR_OWVAR 21
59505: PUSH
59506: LD_INT 0
59508: ST_TO_ADDR
// hc_sex := sex_male ;
59509: LD_ADDR_OWVAR 27
59513: PUSH
59514: LD_INT 1
59516: ST_TO_ADDR
// hc_class := class_apeman ;
59517: LD_ADDR_OWVAR 28
59521: PUSH
59522: LD_INT 12
59524: ST_TO_ADDR
// hc_gallery :=  ;
59525: LD_ADDR_OWVAR 33
59529: PUSH
59530: LD_STRING 
59532: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59533: LD_ADDR_OWVAR 35
59537: PUSH
59538: LD_VAR 0 1
59542: NEG
59543: PPUSH
59544: LD_VAR 0 1
59548: PPUSH
59549: CALL_OW 12
59553: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59554: LD_ADDR_OWVAR 31
59558: PUSH
59559: LD_INT 0
59561: PPUSH
59562: LD_INT 3
59564: PPUSH
59565: CALL_OW 12
59569: PUSH
59570: LD_INT 0
59572: PPUSH
59573: LD_INT 3
59575: PPUSH
59576: CALL_OW 12
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: ST_TO_ADDR
// end ;
59593: LD_VAR 0 2
59597: RET
// export function PrepareTiger ( agressivity ) ; begin
59598: LD_INT 0
59600: PPUSH
// uc_side := 0 ;
59601: LD_ADDR_OWVAR 20
59605: PUSH
59606: LD_INT 0
59608: ST_TO_ADDR
// uc_nation := 0 ;
59609: LD_ADDR_OWVAR 21
59613: PUSH
59614: LD_INT 0
59616: ST_TO_ADDR
// hc_class := class_tiger ;
59617: LD_ADDR_OWVAR 28
59621: PUSH
59622: LD_INT 14
59624: ST_TO_ADDR
// hc_gallery :=  ;
59625: LD_ADDR_OWVAR 33
59629: PUSH
59630: LD_STRING 
59632: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59633: LD_ADDR_OWVAR 35
59637: PUSH
59638: LD_VAR 0 1
59642: NEG
59643: PPUSH
59644: LD_VAR 0 1
59648: PPUSH
59649: CALL_OW 12
59653: ST_TO_ADDR
// end ;
59654: LD_VAR 0 2
59658: RET
// export function PrepareEnchidna ( ) ; begin
59659: LD_INT 0
59661: PPUSH
// uc_side := 0 ;
59662: LD_ADDR_OWVAR 20
59666: PUSH
59667: LD_INT 0
59669: ST_TO_ADDR
// uc_nation := 0 ;
59670: LD_ADDR_OWVAR 21
59674: PUSH
59675: LD_INT 0
59677: ST_TO_ADDR
// hc_class := class_baggie ;
59678: LD_ADDR_OWVAR 28
59682: PUSH
59683: LD_INT 13
59685: ST_TO_ADDR
// hc_gallery :=  ;
59686: LD_ADDR_OWVAR 33
59690: PUSH
59691: LD_STRING 
59693: ST_TO_ADDR
// end ;
59694: LD_VAR 0 1
59698: RET
// export function PrepareFrog ( ) ; begin
59699: LD_INT 0
59701: PPUSH
// uc_side := 0 ;
59702: LD_ADDR_OWVAR 20
59706: PUSH
59707: LD_INT 0
59709: ST_TO_ADDR
// uc_nation := 0 ;
59710: LD_ADDR_OWVAR 21
59714: PUSH
59715: LD_INT 0
59717: ST_TO_ADDR
// hc_class := class_frog ;
59718: LD_ADDR_OWVAR 28
59722: PUSH
59723: LD_INT 19
59725: ST_TO_ADDR
// hc_gallery :=  ;
59726: LD_ADDR_OWVAR 33
59730: PUSH
59731: LD_STRING 
59733: ST_TO_ADDR
// end ;
59734: LD_VAR 0 1
59738: RET
// export function PrepareFish ( ) ; begin
59739: LD_INT 0
59741: PPUSH
// uc_side := 0 ;
59742: LD_ADDR_OWVAR 20
59746: PUSH
59747: LD_INT 0
59749: ST_TO_ADDR
// uc_nation := 0 ;
59750: LD_ADDR_OWVAR 21
59754: PUSH
59755: LD_INT 0
59757: ST_TO_ADDR
// hc_class := class_fish ;
59758: LD_ADDR_OWVAR 28
59762: PUSH
59763: LD_INT 20
59765: ST_TO_ADDR
// hc_gallery :=  ;
59766: LD_ADDR_OWVAR 33
59770: PUSH
59771: LD_STRING 
59773: ST_TO_ADDR
// end ;
59774: LD_VAR 0 1
59778: RET
// export function PrepareBird ( ) ; begin
59779: LD_INT 0
59781: PPUSH
// uc_side := 0 ;
59782: LD_ADDR_OWVAR 20
59786: PUSH
59787: LD_INT 0
59789: ST_TO_ADDR
// uc_nation := 0 ;
59790: LD_ADDR_OWVAR 21
59794: PUSH
59795: LD_INT 0
59797: ST_TO_ADDR
// hc_class := class_phororhacos ;
59798: LD_ADDR_OWVAR 28
59802: PUSH
59803: LD_INT 18
59805: ST_TO_ADDR
// hc_gallery :=  ;
59806: LD_ADDR_OWVAR 33
59810: PUSH
59811: LD_STRING 
59813: ST_TO_ADDR
// end ;
59814: LD_VAR 0 1
59818: RET
// export function PrepareHorse ( ) ; begin
59819: LD_INT 0
59821: PPUSH
// uc_side := 0 ;
59822: LD_ADDR_OWVAR 20
59826: PUSH
59827: LD_INT 0
59829: ST_TO_ADDR
// uc_nation := 0 ;
59830: LD_ADDR_OWVAR 21
59834: PUSH
59835: LD_INT 0
59837: ST_TO_ADDR
// hc_class := class_horse ;
59838: LD_ADDR_OWVAR 28
59842: PUSH
59843: LD_INT 21
59845: ST_TO_ADDR
// hc_gallery :=  ;
59846: LD_ADDR_OWVAR 33
59850: PUSH
59851: LD_STRING 
59853: ST_TO_ADDR
// end ;
59854: LD_VAR 0 1
59858: RET
// export function PrepareMastodont ( ) ; begin
59859: LD_INT 0
59861: PPUSH
// uc_side := 0 ;
59862: LD_ADDR_OWVAR 20
59866: PUSH
59867: LD_INT 0
59869: ST_TO_ADDR
// uc_nation := 0 ;
59870: LD_ADDR_OWVAR 21
59874: PUSH
59875: LD_INT 0
59877: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59878: LD_ADDR_OWVAR 37
59882: PUSH
59883: LD_INT 31
59885: ST_TO_ADDR
// vc_control := control_rider ;
59886: LD_ADDR_OWVAR 38
59890: PUSH
59891: LD_INT 4
59893: ST_TO_ADDR
// end ;
59894: LD_VAR 0 1
59898: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59899: LD_INT 0
59901: PPUSH
59902: PPUSH
59903: PPUSH
// uc_side = 0 ;
59904: LD_ADDR_OWVAR 20
59908: PUSH
59909: LD_INT 0
59911: ST_TO_ADDR
// uc_nation = 0 ;
59912: LD_ADDR_OWVAR 21
59916: PUSH
59917: LD_INT 0
59919: ST_TO_ADDR
// InitHc_All ( ) ;
59920: CALL_OW 584
// InitVc ;
59924: CALL_OW 20
// if mastodonts then
59928: LD_VAR 0 6
59932: IFFALSE 59999
// for i = 1 to mastodonts do
59934: LD_ADDR_VAR 0 11
59938: PUSH
59939: DOUBLE
59940: LD_INT 1
59942: DEC
59943: ST_TO_ADDR
59944: LD_VAR 0 6
59948: PUSH
59949: FOR_TO
59950: IFFALSE 59997
// begin vc_chassis := 31 ;
59952: LD_ADDR_OWVAR 37
59956: PUSH
59957: LD_INT 31
59959: ST_TO_ADDR
// vc_control := control_rider ;
59960: LD_ADDR_OWVAR 38
59964: PUSH
59965: LD_INT 4
59967: ST_TO_ADDR
// animal := CreateVehicle ;
59968: LD_ADDR_VAR 0 12
59972: PUSH
59973: CALL_OW 45
59977: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59978: LD_VAR 0 12
59982: PPUSH
59983: LD_VAR 0 8
59987: PPUSH
59988: LD_INT 0
59990: PPUSH
59991: CALL 62127 0 3
// end ;
59995: GO 59949
59997: POP
59998: POP
// if horses then
59999: LD_VAR 0 5
60003: IFFALSE 60070
// for i = 1 to horses do
60005: LD_ADDR_VAR 0 11
60009: PUSH
60010: DOUBLE
60011: LD_INT 1
60013: DEC
60014: ST_TO_ADDR
60015: LD_VAR 0 5
60019: PUSH
60020: FOR_TO
60021: IFFALSE 60068
// begin hc_class := 21 ;
60023: LD_ADDR_OWVAR 28
60027: PUSH
60028: LD_INT 21
60030: ST_TO_ADDR
// hc_gallery :=  ;
60031: LD_ADDR_OWVAR 33
60035: PUSH
60036: LD_STRING 
60038: ST_TO_ADDR
// animal := CreateHuman ;
60039: LD_ADDR_VAR 0 12
60043: PUSH
60044: CALL_OW 44
60048: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60049: LD_VAR 0 12
60053: PPUSH
60054: LD_VAR 0 8
60058: PPUSH
60059: LD_INT 0
60061: PPUSH
60062: CALL 62127 0 3
// end ;
60066: GO 60020
60068: POP
60069: POP
// if birds then
60070: LD_VAR 0 1
60074: IFFALSE 60141
// for i = 1 to birds do
60076: LD_ADDR_VAR 0 11
60080: PUSH
60081: DOUBLE
60082: LD_INT 1
60084: DEC
60085: ST_TO_ADDR
60086: LD_VAR 0 1
60090: PUSH
60091: FOR_TO
60092: IFFALSE 60139
// begin hc_class = 18 ;
60094: LD_ADDR_OWVAR 28
60098: PUSH
60099: LD_INT 18
60101: ST_TO_ADDR
// hc_gallery =  ;
60102: LD_ADDR_OWVAR 33
60106: PUSH
60107: LD_STRING 
60109: ST_TO_ADDR
// animal := CreateHuman ;
60110: LD_ADDR_VAR 0 12
60114: PUSH
60115: CALL_OW 44
60119: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60120: LD_VAR 0 12
60124: PPUSH
60125: LD_VAR 0 8
60129: PPUSH
60130: LD_INT 0
60132: PPUSH
60133: CALL 62127 0 3
// end ;
60137: GO 60091
60139: POP
60140: POP
// if tigers then
60141: LD_VAR 0 2
60145: IFFALSE 60229
// for i = 1 to tigers do
60147: LD_ADDR_VAR 0 11
60151: PUSH
60152: DOUBLE
60153: LD_INT 1
60155: DEC
60156: ST_TO_ADDR
60157: LD_VAR 0 2
60161: PUSH
60162: FOR_TO
60163: IFFALSE 60227
// begin hc_class = class_tiger ;
60165: LD_ADDR_OWVAR 28
60169: PUSH
60170: LD_INT 14
60172: ST_TO_ADDR
// hc_gallery =  ;
60173: LD_ADDR_OWVAR 33
60177: PUSH
60178: LD_STRING 
60180: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60181: LD_ADDR_OWVAR 35
60185: PUSH
60186: LD_INT 7
60188: NEG
60189: PPUSH
60190: LD_INT 7
60192: PPUSH
60193: CALL_OW 12
60197: ST_TO_ADDR
// animal := CreateHuman ;
60198: LD_ADDR_VAR 0 12
60202: PUSH
60203: CALL_OW 44
60207: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60208: LD_VAR 0 12
60212: PPUSH
60213: LD_VAR 0 8
60217: PPUSH
60218: LD_INT 0
60220: PPUSH
60221: CALL 62127 0 3
// end ;
60225: GO 60162
60227: POP
60228: POP
// if apemans then
60229: LD_VAR 0 3
60233: IFFALSE 60356
// for i = 1 to apemans do
60235: LD_ADDR_VAR 0 11
60239: PUSH
60240: DOUBLE
60241: LD_INT 1
60243: DEC
60244: ST_TO_ADDR
60245: LD_VAR 0 3
60249: PUSH
60250: FOR_TO
60251: IFFALSE 60354
// begin hc_class = class_apeman ;
60253: LD_ADDR_OWVAR 28
60257: PUSH
60258: LD_INT 12
60260: ST_TO_ADDR
// hc_gallery =  ;
60261: LD_ADDR_OWVAR 33
60265: PUSH
60266: LD_STRING 
60268: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60269: LD_ADDR_OWVAR 35
60273: PUSH
60274: LD_INT 2
60276: NEG
60277: PPUSH
60278: LD_INT 2
60280: PPUSH
60281: CALL_OW 12
60285: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60286: LD_ADDR_OWVAR 31
60290: PUSH
60291: LD_INT 1
60293: PPUSH
60294: LD_INT 3
60296: PPUSH
60297: CALL_OW 12
60301: PUSH
60302: LD_INT 1
60304: PPUSH
60305: LD_INT 3
60307: PPUSH
60308: CALL_OW 12
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: ST_TO_ADDR
// animal := CreateHuman ;
60325: LD_ADDR_VAR 0 12
60329: PUSH
60330: CALL_OW 44
60334: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60335: LD_VAR 0 12
60339: PPUSH
60340: LD_VAR 0 8
60344: PPUSH
60345: LD_INT 0
60347: PPUSH
60348: CALL 62127 0 3
// end ;
60352: GO 60250
60354: POP
60355: POP
// if enchidnas then
60356: LD_VAR 0 4
60360: IFFALSE 60427
// for i = 1 to enchidnas do
60362: LD_ADDR_VAR 0 11
60366: PUSH
60367: DOUBLE
60368: LD_INT 1
60370: DEC
60371: ST_TO_ADDR
60372: LD_VAR 0 4
60376: PUSH
60377: FOR_TO
60378: IFFALSE 60425
// begin hc_class = 13 ;
60380: LD_ADDR_OWVAR 28
60384: PUSH
60385: LD_INT 13
60387: ST_TO_ADDR
// hc_gallery =  ;
60388: LD_ADDR_OWVAR 33
60392: PUSH
60393: LD_STRING 
60395: ST_TO_ADDR
// animal := CreateHuman ;
60396: LD_ADDR_VAR 0 12
60400: PUSH
60401: CALL_OW 44
60405: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60406: LD_VAR 0 12
60410: PPUSH
60411: LD_VAR 0 8
60415: PPUSH
60416: LD_INT 0
60418: PPUSH
60419: CALL 62127 0 3
// end ;
60423: GO 60377
60425: POP
60426: POP
// if fishes then
60427: LD_VAR 0 7
60431: IFFALSE 60498
// for i = 1 to fishes do
60433: LD_ADDR_VAR 0 11
60437: PUSH
60438: DOUBLE
60439: LD_INT 1
60441: DEC
60442: ST_TO_ADDR
60443: LD_VAR 0 7
60447: PUSH
60448: FOR_TO
60449: IFFALSE 60496
// begin hc_class = 20 ;
60451: LD_ADDR_OWVAR 28
60455: PUSH
60456: LD_INT 20
60458: ST_TO_ADDR
// hc_gallery =  ;
60459: LD_ADDR_OWVAR 33
60463: PUSH
60464: LD_STRING 
60466: ST_TO_ADDR
// animal := CreateHuman ;
60467: LD_ADDR_VAR 0 12
60471: PUSH
60472: CALL_OW 44
60476: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60477: LD_VAR 0 12
60481: PPUSH
60482: LD_VAR 0 9
60486: PPUSH
60487: LD_INT 0
60489: PPUSH
60490: CALL 62127 0 3
// end ;
60494: GO 60448
60496: POP
60497: POP
// end ;
60498: LD_VAR 0 10
60502: RET
// export function WantHeal ( sci , unit ) ; begin
60503: LD_INT 0
60505: PPUSH
// if GetTaskList ( sci ) > 0 then
60506: LD_VAR 0 1
60510: PPUSH
60511: CALL_OW 437
60515: PUSH
60516: LD_INT 0
60518: GREATER
60519: IFFALSE 60589
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60521: LD_VAR 0 1
60525: PPUSH
60526: CALL_OW 437
60530: PUSH
60531: LD_INT 1
60533: ARRAY
60534: PUSH
60535: LD_INT 1
60537: ARRAY
60538: PUSH
60539: LD_STRING l
60541: EQUAL
60542: PUSH
60543: LD_VAR 0 1
60547: PPUSH
60548: CALL_OW 437
60552: PUSH
60553: LD_INT 1
60555: ARRAY
60556: PUSH
60557: LD_INT 4
60559: ARRAY
60560: PUSH
60561: LD_VAR 0 2
60565: EQUAL
60566: AND
60567: IFFALSE 60579
// result := true else
60569: LD_ADDR_VAR 0 3
60573: PUSH
60574: LD_INT 1
60576: ST_TO_ADDR
60577: GO 60587
// result := false ;
60579: LD_ADDR_VAR 0 3
60583: PUSH
60584: LD_INT 0
60586: ST_TO_ADDR
// end else
60587: GO 60597
// result := false ;
60589: LD_ADDR_VAR 0 3
60593: PUSH
60594: LD_INT 0
60596: ST_TO_ADDR
// end ;
60597: LD_VAR 0 3
60601: RET
// export function HealTarget ( sci ) ; begin
60602: LD_INT 0
60604: PPUSH
// if not sci then
60605: LD_VAR 0 1
60609: NOT
60610: IFFALSE 60614
// exit ;
60612: GO 60679
// result := 0 ;
60614: LD_ADDR_VAR 0 2
60618: PUSH
60619: LD_INT 0
60621: ST_TO_ADDR
// if GetTaskList ( sci ) then
60622: LD_VAR 0 1
60626: PPUSH
60627: CALL_OW 437
60631: IFFALSE 60679
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60633: LD_VAR 0 1
60637: PPUSH
60638: CALL_OW 437
60642: PUSH
60643: LD_INT 1
60645: ARRAY
60646: PUSH
60647: LD_INT 1
60649: ARRAY
60650: PUSH
60651: LD_STRING l
60653: EQUAL
60654: IFFALSE 60679
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60656: LD_ADDR_VAR 0 2
60660: PUSH
60661: LD_VAR 0 1
60665: PPUSH
60666: CALL_OW 437
60670: PUSH
60671: LD_INT 1
60673: ARRAY
60674: PUSH
60675: LD_INT 4
60677: ARRAY
60678: ST_TO_ADDR
// end ;
60679: LD_VAR 0 2
60683: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60684: LD_INT 0
60686: PPUSH
60687: PPUSH
60688: PPUSH
60689: PPUSH
// if not base_units then
60690: LD_VAR 0 1
60694: NOT
60695: IFFALSE 60699
// exit ;
60697: GO 60786
// result := false ;
60699: LD_ADDR_VAR 0 2
60703: PUSH
60704: LD_INT 0
60706: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60707: LD_ADDR_VAR 0 5
60711: PUSH
60712: LD_VAR 0 1
60716: PPUSH
60717: LD_INT 21
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PPUSH
60727: CALL_OW 72
60731: ST_TO_ADDR
// if not tmp then
60732: LD_VAR 0 5
60736: NOT
60737: IFFALSE 60741
// exit ;
60739: GO 60786
// for i in tmp do
60741: LD_ADDR_VAR 0 3
60745: PUSH
60746: LD_VAR 0 5
60750: PUSH
60751: FOR_IN
60752: IFFALSE 60784
// begin result := EnemyInRange ( i , 22 ) ;
60754: LD_ADDR_VAR 0 2
60758: PUSH
60759: LD_VAR 0 3
60763: PPUSH
60764: LD_INT 22
60766: PPUSH
60767: CALL 58373 0 2
60771: ST_TO_ADDR
// if result then
60772: LD_VAR 0 2
60776: IFFALSE 60782
// exit ;
60778: POP
60779: POP
60780: GO 60786
// end ;
60782: GO 60751
60784: POP
60785: POP
// end ;
60786: LD_VAR 0 2
60790: RET
// export function FilterByTag ( units , tag ) ; begin
60791: LD_INT 0
60793: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60794: LD_ADDR_VAR 0 3
60798: PUSH
60799: LD_VAR 0 1
60803: PPUSH
60804: LD_INT 120
60806: PUSH
60807: LD_VAR 0 2
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PPUSH
60816: CALL_OW 72
60820: ST_TO_ADDR
// end ;
60821: LD_VAR 0 3
60825: RET
// export function IsDriver ( un ) ; begin
60826: LD_INT 0
60828: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60829: LD_ADDR_VAR 0 2
60833: PUSH
60834: LD_VAR 0 1
60838: PUSH
60839: LD_INT 55
60841: PUSH
60842: EMPTY
60843: LIST
60844: PPUSH
60845: CALL_OW 69
60849: IN
60850: ST_TO_ADDR
// end ;
60851: LD_VAR 0 2
60855: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60856: LD_INT 0
60858: PPUSH
60859: PPUSH
// list := [ ] ;
60860: LD_ADDR_VAR 0 5
60864: PUSH
60865: EMPTY
60866: ST_TO_ADDR
// case d of 0 :
60867: LD_VAR 0 3
60871: PUSH
60872: LD_INT 0
60874: DOUBLE
60875: EQUAL
60876: IFTRUE 60880
60878: GO 61013
60880: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60881: LD_ADDR_VAR 0 5
60885: PUSH
60886: LD_VAR 0 1
60890: PUSH
60891: LD_INT 4
60893: MINUS
60894: PUSH
60895: LD_VAR 0 2
60899: PUSH
60900: LD_INT 4
60902: MINUS
60903: PUSH
60904: LD_INT 2
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: LIST
60911: PUSH
60912: LD_VAR 0 1
60916: PUSH
60917: LD_INT 3
60919: MINUS
60920: PUSH
60921: LD_VAR 0 2
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: LIST
60933: PUSH
60934: LD_VAR 0 1
60938: PUSH
60939: LD_INT 4
60941: PLUS
60942: PUSH
60943: LD_VAR 0 2
60947: PUSH
60948: LD_INT 4
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: LIST
60955: PUSH
60956: LD_VAR 0 1
60960: PUSH
60961: LD_INT 3
60963: PLUS
60964: PUSH
60965: LD_VAR 0 2
60969: PUSH
60970: LD_INT 3
60972: PLUS
60973: PUSH
60974: LD_INT 5
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: LIST
60981: PUSH
60982: LD_VAR 0 1
60986: PUSH
60987: LD_VAR 0 2
60991: PUSH
60992: LD_INT 4
60994: PLUS
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: LIST
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: ST_TO_ADDR
// end ; 1 :
61011: GO 61711
61013: LD_INT 1
61015: DOUBLE
61016: EQUAL
61017: IFTRUE 61021
61019: GO 61154
61021: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61022: LD_ADDR_VAR 0 5
61026: PUSH
61027: LD_VAR 0 1
61031: PUSH
61032: LD_VAR 0 2
61036: PUSH
61037: LD_INT 4
61039: MINUS
61040: PUSH
61041: LD_INT 3
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: LIST
61048: PUSH
61049: LD_VAR 0 1
61053: PUSH
61054: LD_INT 3
61056: MINUS
61057: PUSH
61058: LD_VAR 0 2
61062: PUSH
61063: LD_INT 3
61065: MINUS
61066: PUSH
61067: LD_INT 2
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: LIST
61074: PUSH
61075: LD_VAR 0 1
61079: PUSH
61080: LD_INT 4
61082: MINUS
61083: PUSH
61084: LD_VAR 0 2
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: LIST
61096: PUSH
61097: LD_VAR 0 1
61101: PUSH
61102: LD_VAR 0 2
61106: PUSH
61107: LD_INT 3
61109: PLUS
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: LIST
61118: PUSH
61119: LD_VAR 0 1
61123: PUSH
61124: LD_INT 4
61126: PLUS
61127: PUSH
61128: LD_VAR 0 2
61132: PUSH
61133: LD_INT 4
61135: PLUS
61136: PUSH
61137: LD_INT 5
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: LIST
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: ST_TO_ADDR
// end ; 2 :
61152: GO 61711
61154: LD_INT 2
61156: DOUBLE
61157: EQUAL
61158: IFTRUE 61162
61160: GO 61291
61162: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61163: LD_ADDR_VAR 0 5
61167: PUSH
61168: LD_VAR 0 1
61172: PUSH
61173: LD_VAR 0 2
61177: PUSH
61178: LD_INT 3
61180: MINUS
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: LIST
61189: PUSH
61190: LD_VAR 0 1
61194: PUSH
61195: LD_INT 4
61197: PLUS
61198: PUSH
61199: LD_VAR 0 2
61203: PUSH
61204: LD_INT 4
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: LIST
61211: PUSH
61212: LD_VAR 0 1
61216: PUSH
61217: LD_VAR 0 2
61221: PUSH
61222: LD_INT 4
61224: PLUS
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: LIST
61233: PUSH
61234: LD_VAR 0 1
61238: PUSH
61239: LD_INT 3
61241: MINUS
61242: PUSH
61243: LD_VAR 0 2
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: LIST
61255: PUSH
61256: LD_VAR 0 1
61260: PUSH
61261: LD_INT 4
61263: MINUS
61264: PUSH
61265: LD_VAR 0 2
61269: PUSH
61270: LD_INT 4
61272: MINUS
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: LIST
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: ST_TO_ADDR
// end ; 3 :
61289: GO 61711
61291: LD_INT 3
61293: DOUBLE
61294: EQUAL
61295: IFTRUE 61299
61297: GO 61432
61299: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61300: LD_ADDR_VAR 0 5
61304: PUSH
61305: LD_VAR 0 1
61309: PUSH
61310: LD_INT 3
61312: PLUS
61313: PUSH
61314: LD_VAR 0 2
61318: PUSH
61319: LD_INT 4
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: LIST
61326: PUSH
61327: LD_VAR 0 1
61331: PUSH
61332: LD_INT 4
61334: PLUS
61335: PUSH
61336: LD_VAR 0 2
61340: PUSH
61341: LD_INT 4
61343: PLUS
61344: PUSH
61345: LD_INT 5
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: PUSH
61353: LD_VAR 0 1
61357: PUSH
61358: LD_INT 4
61360: MINUS
61361: PUSH
61362: LD_VAR 0 2
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: LIST
61374: PUSH
61375: LD_VAR 0 1
61379: PUSH
61380: LD_VAR 0 2
61384: PUSH
61385: LD_INT 4
61387: MINUS
61388: PUSH
61389: LD_INT 3
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: LIST
61396: PUSH
61397: LD_VAR 0 1
61401: PUSH
61402: LD_INT 3
61404: MINUS
61405: PUSH
61406: LD_VAR 0 2
61410: PUSH
61411: LD_INT 3
61413: MINUS
61414: PUSH
61415: LD_INT 2
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: LIST
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: ST_TO_ADDR
// end ; 4 :
61430: GO 61711
61432: LD_INT 4
61434: DOUBLE
61435: EQUAL
61436: IFTRUE 61440
61438: GO 61573
61440: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61441: LD_ADDR_VAR 0 5
61445: PUSH
61446: LD_VAR 0 1
61450: PUSH
61451: LD_VAR 0 2
61455: PUSH
61456: LD_INT 4
61458: PLUS
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: LIST
61467: PUSH
61468: LD_VAR 0 1
61472: PUSH
61473: LD_INT 3
61475: PLUS
61476: PUSH
61477: LD_VAR 0 2
61481: PUSH
61482: LD_INT 3
61484: PLUS
61485: PUSH
61486: LD_INT 5
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: LIST
61493: PUSH
61494: LD_VAR 0 1
61498: PUSH
61499: LD_INT 4
61501: PLUS
61502: PUSH
61503: LD_VAR 0 2
61507: PUSH
61508: LD_INT 4
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: LIST
61515: PUSH
61516: LD_VAR 0 1
61520: PUSH
61521: LD_VAR 0 2
61525: PUSH
61526: LD_INT 3
61528: MINUS
61529: PUSH
61530: LD_INT 3
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: LIST
61537: PUSH
61538: LD_VAR 0 1
61542: PUSH
61543: LD_INT 4
61545: MINUS
61546: PUSH
61547: LD_VAR 0 2
61551: PUSH
61552: LD_INT 4
61554: MINUS
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: LIST
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: ST_TO_ADDR
// end ; 5 :
61571: GO 61711
61573: LD_INT 5
61575: DOUBLE
61576: EQUAL
61577: IFTRUE 61581
61579: GO 61710
61581: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61582: LD_ADDR_VAR 0 5
61586: PUSH
61587: LD_VAR 0 1
61591: PUSH
61592: LD_INT 4
61594: MINUS
61595: PUSH
61596: LD_VAR 0 2
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: PUSH
61609: LD_VAR 0 1
61613: PUSH
61614: LD_VAR 0 2
61618: PUSH
61619: LD_INT 4
61621: MINUS
61622: PUSH
61623: LD_INT 3
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: LIST
61630: PUSH
61631: LD_VAR 0 1
61635: PUSH
61636: LD_INT 4
61638: PLUS
61639: PUSH
61640: LD_VAR 0 2
61644: PUSH
61645: LD_INT 4
61647: PLUS
61648: PUSH
61649: LD_INT 5
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: LIST
61656: PUSH
61657: LD_VAR 0 1
61661: PUSH
61662: LD_INT 3
61664: PLUS
61665: PUSH
61666: LD_VAR 0 2
61670: PUSH
61671: LD_INT 4
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: LIST
61678: PUSH
61679: LD_VAR 0 1
61683: PUSH
61684: LD_VAR 0 2
61688: PUSH
61689: LD_INT 3
61691: PLUS
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: LIST
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: ST_TO_ADDR
// end ; end ;
61708: GO 61711
61710: POP
// result := list ;
61711: LD_ADDR_VAR 0 4
61715: PUSH
61716: LD_VAR 0 5
61720: ST_TO_ADDR
// end ;
61721: LD_VAR 0 4
61725: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61726: LD_INT 0
61728: PPUSH
61729: PPUSH
61730: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61731: LD_VAR 0 1
61735: NOT
61736: PUSH
61737: LD_VAR 0 2
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: LD_INT 3
61750: PUSH
61751: LD_INT 4
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: IN
61760: NOT
61761: OR
61762: IFFALSE 61766
// exit ;
61764: GO 61849
// tmp := [ ] ;
61766: LD_ADDR_VAR 0 5
61770: PUSH
61771: EMPTY
61772: ST_TO_ADDR
// for i in units do
61773: LD_ADDR_VAR 0 4
61777: PUSH
61778: LD_VAR 0 1
61782: PUSH
61783: FOR_IN
61784: IFFALSE 61818
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61786: LD_ADDR_VAR 0 5
61790: PUSH
61791: LD_VAR 0 5
61795: PPUSH
61796: LD_VAR 0 4
61800: PPUSH
61801: LD_VAR 0 2
61805: PPUSH
61806: CALL_OW 259
61810: PPUSH
61811: CALL 63210 0 2
61815: ST_TO_ADDR
61816: GO 61783
61818: POP
61819: POP
// if not tmp then
61820: LD_VAR 0 5
61824: NOT
61825: IFFALSE 61829
// exit ;
61827: GO 61849
// result := SortListByListDesc ( units , tmp ) ;
61829: LD_ADDR_VAR 0 3
61833: PUSH
61834: LD_VAR 0 1
61838: PPUSH
61839: LD_VAR 0 5
61843: PPUSH
61844: CALL_OW 77
61848: ST_TO_ADDR
// end ;
61849: LD_VAR 0 3
61853: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61854: LD_INT 0
61856: PPUSH
61857: PPUSH
61858: PPUSH
// result := false ;
61859: LD_ADDR_VAR 0 3
61863: PUSH
61864: LD_INT 0
61866: ST_TO_ADDR
// if not building then
61867: LD_VAR 0 2
61871: NOT
61872: IFFALSE 61876
// exit ;
61874: GO 62014
// x := GetX ( building ) ;
61876: LD_ADDR_VAR 0 4
61880: PUSH
61881: LD_VAR 0 2
61885: PPUSH
61886: CALL_OW 250
61890: ST_TO_ADDR
// y := GetY ( building ) ;
61891: LD_ADDR_VAR 0 5
61895: PUSH
61896: LD_VAR 0 2
61900: PPUSH
61901: CALL_OW 251
61905: ST_TO_ADDR
// if not x or not y then
61906: LD_VAR 0 4
61910: NOT
61911: PUSH
61912: LD_VAR 0 5
61916: NOT
61917: OR
61918: IFFALSE 61922
// exit ;
61920: GO 62014
// if GetTaskList ( unit ) then
61922: LD_VAR 0 1
61926: PPUSH
61927: CALL_OW 437
61931: IFFALSE 62014
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61933: LD_STRING e
61935: PUSH
61936: LD_VAR 0 1
61940: PPUSH
61941: CALL_OW 437
61945: PUSH
61946: LD_INT 1
61948: ARRAY
61949: PUSH
61950: LD_INT 1
61952: ARRAY
61953: EQUAL
61954: PUSH
61955: LD_VAR 0 4
61959: PUSH
61960: LD_VAR 0 1
61964: PPUSH
61965: CALL_OW 437
61969: PUSH
61970: LD_INT 1
61972: ARRAY
61973: PUSH
61974: LD_INT 2
61976: ARRAY
61977: EQUAL
61978: AND
61979: PUSH
61980: LD_VAR 0 5
61984: PUSH
61985: LD_VAR 0 1
61989: PPUSH
61990: CALL_OW 437
61994: PUSH
61995: LD_INT 1
61997: ARRAY
61998: PUSH
61999: LD_INT 3
62001: ARRAY
62002: EQUAL
62003: AND
62004: IFFALSE 62014
// result := true end ;
62006: LD_ADDR_VAR 0 3
62010: PUSH
62011: LD_INT 1
62013: ST_TO_ADDR
// end ;
62014: LD_VAR 0 3
62018: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62019: LD_INT 0
62021: PPUSH
// result := false ;
62022: LD_ADDR_VAR 0 4
62026: PUSH
62027: LD_INT 0
62029: ST_TO_ADDR
// if GetTaskList ( unit ) then
62030: LD_VAR 0 1
62034: PPUSH
62035: CALL_OW 437
62039: IFFALSE 62122
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62041: LD_STRING M
62043: PUSH
62044: LD_VAR 0 1
62048: PPUSH
62049: CALL_OW 437
62053: PUSH
62054: LD_INT 1
62056: ARRAY
62057: PUSH
62058: LD_INT 1
62060: ARRAY
62061: EQUAL
62062: PUSH
62063: LD_VAR 0 2
62067: PUSH
62068: LD_VAR 0 1
62072: PPUSH
62073: CALL_OW 437
62077: PUSH
62078: LD_INT 1
62080: ARRAY
62081: PUSH
62082: LD_INT 2
62084: ARRAY
62085: EQUAL
62086: AND
62087: PUSH
62088: LD_VAR 0 3
62092: PUSH
62093: LD_VAR 0 1
62097: PPUSH
62098: CALL_OW 437
62102: PUSH
62103: LD_INT 1
62105: ARRAY
62106: PUSH
62107: LD_INT 3
62109: ARRAY
62110: EQUAL
62111: AND
62112: IFFALSE 62122
// result := true ;
62114: LD_ADDR_VAR 0 4
62118: PUSH
62119: LD_INT 1
62121: ST_TO_ADDR
// end ; end ;
62122: LD_VAR 0 4
62126: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62127: LD_INT 0
62129: PPUSH
62130: PPUSH
62131: PPUSH
62132: PPUSH
// if not unit or not area then
62133: LD_VAR 0 1
62137: NOT
62138: PUSH
62139: LD_VAR 0 2
62143: NOT
62144: OR
62145: IFFALSE 62149
// exit ;
62147: GO 62313
// tmp := AreaToList ( area , i ) ;
62149: LD_ADDR_VAR 0 6
62153: PUSH
62154: LD_VAR 0 2
62158: PPUSH
62159: LD_VAR 0 5
62163: PPUSH
62164: CALL_OW 517
62168: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62169: LD_ADDR_VAR 0 5
62173: PUSH
62174: DOUBLE
62175: LD_INT 1
62177: DEC
62178: ST_TO_ADDR
62179: LD_VAR 0 6
62183: PUSH
62184: LD_INT 1
62186: ARRAY
62187: PUSH
62188: FOR_TO
62189: IFFALSE 62311
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62191: LD_ADDR_VAR 0 7
62195: PUSH
62196: LD_VAR 0 6
62200: PUSH
62201: LD_INT 1
62203: ARRAY
62204: PUSH
62205: LD_VAR 0 5
62209: ARRAY
62210: PUSH
62211: LD_VAR 0 6
62215: PUSH
62216: LD_INT 2
62218: ARRAY
62219: PUSH
62220: LD_VAR 0 5
62224: ARRAY
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62230: LD_VAR 0 7
62234: PUSH
62235: LD_INT 1
62237: ARRAY
62238: PPUSH
62239: LD_VAR 0 7
62243: PUSH
62244: LD_INT 2
62246: ARRAY
62247: PPUSH
62248: CALL_OW 428
62252: PUSH
62253: LD_INT 0
62255: EQUAL
62256: IFFALSE 62309
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62258: LD_VAR 0 1
62262: PPUSH
62263: LD_VAR 0 7
62267: PUSH
62268: LD_INT 1
62270: ARRAY
62271: PPUSH
62272: LD_VAR 0 7
62276: PUSH
62277: LD_INT 2
62279: ARRAY
62280: PPUSH
62281: LD_VAR 0 3
62285: PPUSH
62286: CALL_OW 48
// result := IsPlaced ( unit ) ;
62290: LD_ADDR_VAR 0 4
62294: PUSH
62295: LD_VAR 0 1
62299: PPUSH
62300: CALL_OW 305
62304: ST_TO_ADDR
// exit ;
62305: POP
62306: POP
62307: GO 62313
// end ; end ;
62309: GO 62188
62311: POP
62312: POP
// end ;
62313: LD_VAR 0 4
62317: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62318: LD_INT 0
62320: PPUSH
62321: PPUSH
62322: PPUSH
// if not side or side > 8 then
62323: LD_VAR 0 1
62327: NOT
62328: PUSH
62329: LD_VAR 0 1
62333: PUSH
62334: LD_INT 8
62336: GREATER
62337: OR
62338: IFFALSE 62342
// exit ;
62340: GO 62529
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62342: LD_ADDR_VAR 0 4
62346: PUSH
62347: LD_INT 22
62349: PUSH
62350: LD_VAR 0 1
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 21
62361: PUSH
62362: LD_INT 3
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PPUSH
62373: CALL_OW 69
62377: ST_TO_ADDR
// if not tmp then
62378: LD_VAR 0 4
62382: NOT
62383: IFFALSE 62387
// exit ;
62385: GO 62529
// enable_addtolog := true ;
62387: LD_ADDR_OWVAR 81
62391: PUSH
62392: LD_INT 1
62394: ST_TO_ADDR
// AddToLog ( [ ) ;
62395: LD_STRING [
62397: PPUSH
62398: CALL_OW 561
// for i in tmp do
62402: LD_ADDR_VAR 0 3
62406: PUSH
62407: LD_VAR 0 4
62411: PUSH
62412: FOR_IN
62413: IFFALSE 62520
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62415: LD_STRING [
62417: PUSH
62418: LD_VAR 0 3
62422: PPUSH
62423: CALL_OW 266
62427: STR
62428: PUSH
62429: LD_STRING , 
62431: STR
62432: PUSH
62433: LD_VAR 0 3
62437: PPUSH
62438: CALL_OW 250
62442: STR
62443: PUSH
62444: LD_STRING , 
62446: STR
62447: PUSH
62448: LD_VAR 0 3
62452: PPUSH
62453: CALL_OW 251
62457: STR
62458: PUSH
62459: LD_STRING , 
62461: STR
62462: PUSH
62463: LD_VAR 0 3
62467: PPUSH
62468: CALL_OW 254
62472: STR
62473: PUSH
62474: LD_STRING , 
62476: STR
62477: PUSH
62478: LD_VAR 0 3
62482: PPUSH
62483: LD_INT 1
62485: PPUSH
62486: CALL_OW 268
62490: STR
62491: PUSH
62492: LD_STRING , 
62494: STR
62495: PUSH
62496: LD_VAR 0 3
62500: PPUSH
62501: LD_INT 2
62503: PPUSH
62504: CALL_OW 268
62508: STR
62509: PUSH
62510: LD_STRING ],
62512: STR
62513: PPUSH
62514: CALL_OW 561
// end ;
62518: GO 62412
62520: POP
62521: POP
// AddToLog ( ]; ) ;
62522: LD_STRING ];
62524: PPUSH
62525: CALL_OW 561
// end ;
62529: LD_VAR 0 2
62533: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62534: LD_INT 0
62536: PPUSH
62537: PPUSH
62538: PPUSH
62539: PPUSH
62540: PPUSH
// if not area or not rate or not max then
62541: LD_VAR 0 1
62545: NOT
62546: PUSH
62547: LD_VAR 0 2
62551: NOT
62552: OR
62553: PUSH
62554: LD_VAR 0 4
62558: NOT
62559: OR
62560: IFFALSE 62564
// exit ;
62562: GO 62753
// while 1 do
62564: LD_INT 1
62566: IFFALSE 62753
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62568: LD_ADDR_VAR 0 9
62572: PUSH
62573: LD_VAR 0 1
62577: PPUSH
62578: LD_INT 1
62580: PPUSH
62581: CALL_OW 287
62585: PUSH
62586: LD_INT 10
62588: MUL
62589: ST_TO_ADDR
// r := rate / 10 ;
62590: LD_ADDR_VAR 0 7
62594: PUSH
62595: LD_VAR 0 2
62599: PUSH
62600: LD_INT 10
62602: DIVREAL
62603: ST_TO_ADDR
// time := 1 1$00 ;
62604: LD_ADDR_VAR 0 8
62608: PUSH
62609: LD_INT 2100
62611: ST_TO_ADDR
// if amount < min then
62612: LD_VAR 0 9
62616: PUSH
62617: LD_VAR 0 3
62621: LESS
62622: IFFALSE 62640
// r := r * 2 else
62624: LD_ADDR_VAR 0 7
62628: PUSH
62629: LD_VAR 0 7
62633: PUSH
62634: LD_INT 2
62636: MUL
62637: ST_TO_ADDR
62638: GO 62666
// if amount > max then
62640: LD_VAR 0 9
62644: PUSH
62645: LD_VAR 0 4
62649: GREATER
62650: IFFALSE 62666
// r := r / 2 ;
62652: LD_ADDR_VAR 0 7
62656: PUSH
62657: LD_VAR 0 7
62661: PUSH
62662: LD_INT 2
62664: DIVREAL
62665: ST_TO_ADDR
// time := time / r ;
62666: LD_ADDR_VAR 0 8
62670: PUSH
62671: LD_VAR 0 8
62675: PUSH
62676: LD_VAR 0 7
62680: DIVREAL
62681: ST_TO_ADDR
// if time < 0 then
62682: LD_VAR 0 8
62686: PUSH
62687: LD_INT 0
62689: LESS
62690: IFFALSE 62707
// time := time * - 1 ;
62692: LD_ADDR_VAR 0 8
62696: PUSH
62697: LD_VAR 0 8
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: MUL
62706: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62707: LD_VAR 0 8
62711: PUSH
62712: LD_INT 35
62714: PPUSH
62715: LD_INT 875
62717: PPUSH
62718: CALL_OW 12
62722: PLUS
62723: PPUSH
62724: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62728: LD_INT 1
62730: PPUSH
62731: LD_INT 5
62733: PPUSH
62734: CALL_OW 12
62738: PPUSH
62739: LD_VAR 0 1
62743: PPUSH
62744: LD_INT 1
62746: PPUSH
62747: CALL_OW 55
// end ;
62751: GO 62564
// end ;
62753: LD_VAR 0 5
62757: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62758: LD_INT 0
62760: PPUSH
62761: PPUSH
62762: PPUSH
62763: PPUSH
62764: PPUSH
62765: PPUSH
62766: PPUSH
62767: PPUSH
// if not turrets or not factories then
62768: LD_VAR 0 1
62772: NOT
62773: PUSH
62774: LD_VAR 0 2
62778: NOT
62779: OR
62780: IFFALSE 62784
// exit ;
62782: GO 63091
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62784: LD_ADDR_VAR 0 10
62788: PUSH
62789: LD_INT 5
62791: PUSH
62792: LD_INT 6
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 2
62801: PUSH
62802: LD_INT 4
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 3
62811: PUSH
62812: LD_INT 5
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 24
62826: PUSH
62827: LD_INT 25
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 23
62836: PUSH
62837: LD_INT 27
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 42
62850: PUSH
62851: LD_INT 43
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 44
62860: PUSH
62861: LD_INT 46
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 45
62870: PUSH
62871: LD_INT 47
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: LIST
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: LIST
62887: ST_TO_ADDR
// result := [ ] ;
62888: LD_ADDR_VAR 0 3
62892: PUSH
62893: EMPTY
62894: ST_TO_ADDR
// for i in turrets do
62895: LD_ADDR_VAR 0 4
62899: PUSH
62900: LD_VAR 0 1
62904: PUSH
62905: FOR_IN
62906: IFFALSE 63089
// begin nat := GetNation ( i ) ;
62908: LD_ADDR_VAR 0 7
62912: PUSH
62913: LD_VAR 0 4
62917: PPUSH
62918: CALL_OW 248
62922: ST_TO_ADDR
// weapon := 0 ;
62923: LD_ADDR_VAR 0 8
62927: PUSH
62928: LD_INT 0
62930: ST_TO_ADDR
// if not nat then
62931: LD_VAR 0 7
62935: NOT
62936: IFFALSE 62940
// continue ;
62938: GO 62905
// for j in list [ nat ] do
62940: LD_ADDR_VAR 0 5
62944: PUSH
62945: LD_VAR 0 10
62949: PUSH
62950: LD_VAR 0 7
62954: ARRAY
62955: PUSH
62956: FOR_IN
62957: IFFALSE 62998
// if GetBWeapon ( i ) = j [ 1 ] then
62959: LD_VAR 0 4
62963: PPUSH
62964: CALL_OW 269
62968: PUSH
62969: LD_VAR 0 5
62973: PUSH
62974: LD_INT 1
62976: ARRAY
62977: EQUAL
62978: IFFALSE 62996
// begin weapon := j [ 2 ] ;
62980: LD_ADDR_VAR 0 8
62984: PUSH
62985: LD_VAR 0 5
62989: PUSH
62990: LD_INT 2
62992: ARRAY
62993: ST_TO_ADDR
// break ;
62994: GO 62998
// end ;
62996: GO 62956
62998: POP
62999: POP
// if not weapon then
63000: LD_VAR 0 8
63004: NOT
63005: IFFALSE 63009
// continue ;
63007: GO 62905
// for k in factories do
63009: LD_ADDR_VAR 0 6
63013: PUSH
63014: LD_VAR 0 2
63018: PUSH
63019: FOR_IN
63020: IFFALSE 63085
// begin weapons := AvailableWeaponList ( k ) ;
63022: LD_ADDR_VAR 0 9
63026: PUSH
63027: LD_VAR 0 6
63031: PPUSH
63032: CALL_OW 478
63036: ST_TO_ADDR
// if not weapons then
63037: LD_VAR 0 9
63041: NOT
63042: IFFALSE 63046
// continue ;
63044: GO 63019
// if weapon in weapons then
63046: LD_VAR 0 8
63050: PUSH
63051: LD_VAR 0 9
63055: IN
63056: IFFALSE 63083
// begin result := [ i , weapon ] ;
63058: LD_ADDR_VAR 0 3
63062: PUSH
63063: LD_VAR 0 4
63067: PUSH
63068: LD_VAR 0 8
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: ST_TO_ADDR
// exit ;
63077: POP
63078: POP
63079: POP
63080: POP
63081: GO 63091
// end ; end ;
63083: GO 63019
63085: POP
63086: POP
// end ;
63087: GO 62905
63089: POP
63090: POP
// end ;
63091: LD_VAR 0 3
63095: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63096: LD_INT 0
63098: PPUSH
// if not side or side > 8 then
63099: LD_VAR 0 3
63103: NOT
63104: PUSH
63105: LD_VAR 0 3
63109: PUSH
63110: LD_INT 8
63112: GREATER
63113: OR
63114: IFFALSE 63118
// exit ;
63116: GO 63177
// if not range then
63118: LD_VAR 0 4
63122: NOT
63123: IFFALSE 63134
// range := - 12 ;
63125: LD_ADDR_VAR 0 4
63129: PUSH
63130: LD_INT 12
63132: NEG
63133: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63134: LD_VAR 0 1
63138: PPUSH
63139: LD_VAR 0 2
63143: PPUSH
63144: LD_VAR 0 3
63148: PPUSH
63149: LD_VAR 0 4
63153: PPUSH
63154: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63158: LD_VAR 0 1
63162: PPUSH
63163: LD_VAR 0 2
63167: PPUSH
63168: LD_VAR 0 3
63172: PPUSH
63173: CALL_OW 331
// end ;
63177: LD_VAR 0 5
63181: RET
// export function Video ( mode ) ; begin
63182: LD_INT 0
63184: PPUSH
// ingame_video = mode ;
63185: LD_ADDR_OWVAR 52
63189: PUSH
63190: LD_VAR 0 1
63194: ST_TO_ADDR
// interface_hidden = mode ;
63195: LD_ADDR_OWVAR 54
63199: PUSH
63200: LD_VAR 0 1
63204: ST_TO_ADDR
// end ;
63205: LD_VAR 0 2
63209: RET
// export function Join ( array , element ) ; begin
63210: LD_INT 0
63212: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63213: LD_ADDR_VAR 0 3
63217: PUSH
63218: LD_VAR 0 1
63222: PPUSH
63223: LD_VAR 0 1
63227: PUSH
63228: LD_INT 1
63230: PLUS
63231: PPUSH
63232: LD_VAR 0 2
63236: PPUSH
63237: CALL_OW 1
63241: ST_TO_ADDR
// end ;
63242: LD_VAR 0 3
63246: RET
// export function JoinUnion ( array , element ) ; begin
63247: LD_INT 0
63249: PPUSH
// result := array union element ;
63250: LD_ADDR_VAR 0 3
63254: PUSH
63255: LD_VAR 0 1
63259: PUSH
63260: LD_VAR 0 2
63264: UNION
63265: ST_TO_ADDR
// end ;
63266: LD_VAR 0 3
63270: RET
// export function GetBehemoths ( side ) ; begin
63271: LD_INT 0
63273: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63274: LD_ADDR_VAR 0 2
63278: PUSH
63279: LD_INT 22
63281: PUSH
63282: LD_VAR 0 1
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 31
63293: PUSH
63294: LD_INT 25
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PPUSH
63305: CALL_OW 69
63309: ST_TO_ADDR
// end ;
63310: LD_VAR 0 2
63314: RET
// export function Shuffle ( array ) ; var i , index ; begin
63315: LD_INT 0
63317: PPUSH
63318: PPUSH
63319: PPUSH
// result := [ ] ;
63320: LD_ADDR_VAR 0 2
63324: PUSH
63325: EMPTY
63326: ST_TO_ADDR
// if not array then
63327: LD_VAR 0 1
63331: NOT
63332: IFFALSE 63336
// exit ;
63334: GO 63435
// Randomize ;
63336: CALL_OW 10
// for i = array downto 1 do
63340: LD_ADDR_VAR 0 3
63344: PUSH
63345: DOUBLE
63346: LD_VAR 0 1
63350: INC
63351: ST_TO_ADDR
63352: LD_INT 1
63354: PUSH
63355: FOR_DOWNTO
63356: IFFALSE 63433
// begin index := rand ( 1 , array ) ;
63358: LD_ADDR_VAR 0 4
63362: PUSH
63363: LD_INT 1
63365: PPUSH
63366: LD_VAR 0 1
63370: PPUSH
63371: CALL_OW 12
63375: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63376: LD_ADDR_VAR 0 2
63380: PUSH
63381: LD_VAR 0 2
63385: PPUSH
63386: LD_VAR 0 2
63390: PUSH
63391: LD_INT 1
63393: PLUS
63394: PPUSH
63395: LD_VAR 0 1
63399: PUSH
63400: LD_VAR 0 4
63404: ARRAY
63405: PPUSH
63406: CALL_OW 2
63410: ST_TO_ADDR
// array := Delete ( array , index ) ;
63411: LD_ADDR_VAR 0 1
63415: PUSH
63416: LD_VAR 0 1
63420: PPUSH
63421: LD_VAR 0 4
63425: PPUSH
63426: CALL_OW 3
63430: ST_TO_ADDR
// end ;
63431: GO 63355
63433: POP
63434: POP
// end ;
63435: LD_VAR 0 2
63439: RET
// export function GetBaseMaterials ( base ) ; begin
63440: LD_INT 0
63442: PPUSH
// result := [ 0 , 0 , 0 ] ;
63443: LD_ADDR_VAR 0 2
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: LIST
63461: ST_TO_ADDR
// if not base then
63462: LD_VAR 0 1
63466: NOT
63467: IFFALSE 63471
// exit ;
63469: GO 63520
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63471: LD_ADDR_VAR 0 2
63475: PUSH
63476: LD_VAR 0 1
63480: PPUSH
63481: LD_INT 1
63483: PPUSH
63484: CALL_OW 275
63488: PUSH
63489: LD_VAR 0 1
63493: PPUSH
63494: LD_INT 2
63496: PPUSH
63497: CALL_OW 275
63501: PUSH
63502: LD_VAR 0 1
63506: PPUSH
63507: LD_INT 3
63509: PPUSH
63510: CALL_OW 275
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: LIST
63519: ST_TO_ADDR
// end ;
63520: LD_VAR 0 2
63524: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63525: LD_INT 0
63527: PPUSH
63528: PPUSH
// result := array ;
63529: LD_ADDR_VAR 0 3
63533: PUSH
63534: LD_VAR 0 1
63538: ST_TO_ADDR
// if size >= result then
63539: LD_VAR 0 2
63543: PUSH
63544: LD_VAR 0 3
63548: GREATEREQUAL
63549: IFFALSE 63553
// exit ;
63551: GO 63603
// if size then
63553: LD_VAR 0 2
63557: IFFALSE 63603
// for i := array downto size do
63559: LD_ADDR_VAR 0 4
63563: PUSH
63564: DOUBLE
63565: LD_VAR 0 1
63569: INC
63570: ST_TO_ADDR
63571: LD_VAR 0 2
63575: PUSH
63576: FOR_DOWNTO
63577: IFFALSE 63601
// result := Delete ( result , result ) ;
63579: LD_ADDR_VAR 0 3
63583: PUSH
63584: LD_VAR 0 3
63588: PPUSH
63589: LD_VAR 0 3
63593: PPUSH
63594: CALL_OW 3
63598: ST_TO_ADDR
63599: GO 63576
63601: POP
63602: POP
// end ;
63603: LD_VAR 0 3
63607: RET
// export function ComExit ( unit ) ; var tmp ; begin
63608: LD_INT 0
63610: PPUSH
63611: PPUSH
// if not IsInUnit ( unit ) then
63612: LD_VAR 0 1
63616: PPUSH
63617: CALL_OW 310
63621: NOT
63622: IFFALSE 63626
// exit ;
63624: GO 63686
// tmp := IsInUnit ( unit ) ;
63626: LD_ADDR_VAR 0 3
63630: PUSH
63631: LD_VAR 0 1
63635: PPUSH
63636: CALL_OW 310
63640: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63641: LD_VAR 0 3
63645: PPUSH
63646: CALL_OW 247
63650: PUSH
63651: LD_INT 2
63653: EQUAL
63654: IFFALSE 63667
// ComExitVehicle ( unit ) else
63656: LD_VAR 0 1
63660: PPUSH
63661: CALL_OW 121
63665: GO 63676
// ComExitBuilding ( unit ) ;
63667: LD_VAR 0 1
63671: PPUSH
63672: CALL_OW 122
// result := tmp ;
63676: LD_ADDR_VAR 0 2
63680: PUSH
63681: LD_VAR 0 3
63685: ST_TO_ADDR
// end ;
63686: LD_VAR 0 2
63690: RET
// export function ComExitAll ( units ) ; var i ; begin
63691: LD_INT 0
63693: PPUSH
63694: PPUSH
// if not units then
63695: LD_VAR 0 1
63699: NOT
63700: IFFALSE 63704
// exit ;
63702: GO 63730
// for i in units do
63704: LD_ADDR_VAR 0 3
63708: PUSH
63709: LD_VAR 0 1
63713: PUSH
63714: FOR_IN
63715: IFFALSE 63728
// ComExit ( i ) ;
63717: LD_VAR 0 3
63721: PPUSH
63722: CALL 63608 0 1
63726: GO 63714
63728: POP
63729: POP
// end ;
63730: LD_VAR 0 2
63734: RET
// export function ResetHc ; begin
63735: LD_INT 0
63737: PPUSH
// InitHc ;
63738: CALL_OW 19
// hc_importance := 0 ;
63742: LD_ADDR_OWVAR 32
63746: PUSH
63747: LD_INT 0
63749: ST_TO_ADDR
// end ;
63750: LD_VAR 0 1
63754: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63755: LD_INT 0
63757: PPUSH
63758: PPUSH
63759: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63760: LD_ADDR_VAR 0 6
63764: PUSH
63765: LD_VAR 0 1
63769: PUSH
63770: LD_VAR 0 3
63774: PLUS
63775: PUSH
63776: LD_INT 2
63778: DIV
63779: ST_TO_ADDR
// if _x < 0 then
63780: LD_VAR 0 6
63784: PUSH
63785: LD_INT 0
63787: LESS
63788: IFFALSE 63805
// _x := _x * - 1 ;
63790: LD_ADDR_VAR 0 6
63794: PUSH
63795: LD_VAR 0 6
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: MUL
63804: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63805: LD_ADDR_VAR 0 7
63809: PUSH
63810: LD_VAR 0 2
63814: PUSH
63815: LD_VAR 0 4
63819: PLUS
63820: PUSH
63821: LD_INT 2
63823: DIV
63824: ST_TO_ADDR
// if _y < 0 then
63825: LD_VAR 0 7
63829: PUSH
63830: LD_INT 0
63832: LESS
63833: IFFALSE 63850
// _y := _y * - 1 ;
63835: LD_ADDR_VAR 0 7
63839: PUSH
63840: LD_VAR 0 7
63844: PUSH
63845: LD_INT 1
63847: NEG
63848: MUL
63849: ST_TO_ADDR
// result := [ _x , _y ] ;
63850: LD_ADDR_VAR 0 5
63854: PUSH
63855: LD_VAR 0 6
63859: PUSH
63860: LD_VAR 0 7
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: ST_TO_ADDR
// end ;
63869: LD_VAR 0 5
63873: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63874: LD_INT 0
63876: PPUSH
63877: PPUSH
63878: PPUSH
63879: PPUSH
// task := GetTaskList ( unit ) ;
63880: LD_ADDR_VAR 0 7
63884: PUSH
63885: LD_VAR 0 1
63889: PPUSH
63890: CALL_OW 437
63894: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63895: LD_VAR 0 7
63899: NOT
63900: PUSH
63901: LD_VAR 0 1
63905: PPUSH
63906: LD_VAR 0 2
63910: PPUSH
63911: CALL_OW 308
63915: NOT
63916: AND
63917: IFFALSE 63921
// exit ;
63919: GO 64039
// if IsInArea ( unit , area ) then
63921: LD_VAR 0 1
63925: PPUSH
63926: LD_VAR 0 2
63930: PPUSH
63931: CALL_OW 308
63935: IFFALSE 63953
// begin ComMoveToArea ( unit , goAway ) ;
63937: LD_VAR 0 1
63941: PPUSH
63942: LD_VAR 0 3
63946: PPUSH
63947: CALL_OW 113
// exit ;
63951: GO 64039
// end ; if task [ 1 ] [ 1 ] <> M then
63953: LD_VAR 0 7
63957: PUSH
63958: LD_INT 1
63960: ARRAY
63961: PUSH
63962: LD_INT 1
63964: ARRAY
63965: PUSH
63966: LD_STRING M
63968: NONEQUAL
63969: IFFALSE 63973
// exit ;
63971: GO 64039
// x := task [ 1 ] [ 2 ] ;
63973: LD_ADDR_VAR 0 5
63977: PUSH
63978: LD_VAR 0 7
63982: PUSH
63983: LD_INT 1
63985: ARRAY
63986: PUSH
63987: LD_INT 2
63989: ARRAY
63990: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63991: LD_ADDR_VAR 0 6
63995: PUSH
63996: LD_VAR 0 7
64000: PUSH
64001: LD_INT 1
64003: ARRAY
64004: PUSH
64005: LD_INT 3
64007: ARRAY
64008: ST_TO_ADDR
// if InArea ( x , y , area ) then
64009: LD_VAR 0 5
64013: PPUSH
64014: LD_VAR 0 6
64018: PPUSH
64019: LD_VAR 0 2
64023: PPUSH
64024: CALL_OW 309
64028: IFFALSE 64039
// ComStop ( unit ) ;
64030: LD_VAR 0 1
64034: PPUSH
64035: CALL_OW 141
// end ;
64039: LD_VAR 0 4
64043: RET
// export function Abs ( value ) ; begin
64044: LD_INT 0
64046: PPUSH
// result := value ;
64047: LD_ADDR_VAR 0 2
64051: PUSH
64052: LD_VAR 0 1
64056: ST_TO_ADDR
// if value < 0 then
64057: LD_VAR 0 1
64061: PUSH
64062: LD_INT 0
64064: LESS
64065: IFFALSE 64082
// result := value * - 1 ;
64067: LD_ADDR_VAR 0 2
64071: PUSH
64072: LD_VAR 0 1
64076: PUSH
64077: LD_INT 1
64079: NEG
64080: MUL
64081: ST_TO_ADDR
// end ;
64082: LD_VAR 0 2
64086: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64087: LD_INT 0
64089: PPUSH
64090: PPUSH
64091: PPUSH
64092: PPUSH
64093: PPUSH
64094: PPUSH
64095: PPUSH
64096: PPUSH
// if not unit or not building then
64097: LD_VAR 0 1
64101: NOT
64102: PUSH
64103: LD_VAR 0 2
64107: NOT
64108: OR
64109: IFFALSE 64113
// exit ;
64111: GO 64339
// x := GetX ( building ) ;
64113: LD_ADDR_VAR 0 4
64117: PUSH
64118: LD_VAR 0 2
64122: PPUSH
64123: CALL_OW 250
64127: ST_TO_ADDR
// y := GetY ( building ) ;
64128: LD_ADDR_VAR 0 6
64132: PUSH
64133: LD_VAR 0 2
64137: PPUSH
64138: CALL_OW 251
64142: ST_TO_ADDR
// d := GetDir ( building ) ;
64143: LD_ADDR_VAR 0 8
64147: PUSH
64148: LD_VAR 0 2
64152: PPUSH
64153: CALL_OW 254
64157: ST_TO_ADDR
// r := 4 ;
64158: LD_ADDR_VAR 0 9
64162: PUSH
64163: LD_INT 4
64165: ST_TO_ADDR
// for i := 1 to 5 do
64166: LD_ADDR_VAR 0 10
64170: PUSH
64171: DOUBLE
64172: LD_INT 1
64174: DEC
64175: ST_TO_ADDR
64176: LD_INT 5
64178: PUSH
64179: FOR_TO
64180: IFFALSE 64337
// begin _x := ShiftX ( x , d , r + i ) ;
64182: LD_ADDR_VAR 0 5
64186: PUSH
64187: LD_VAR 0 4
64191: PPUSH
64192: LD_VAR 0 8
64196: PPUSH
64197: LD_VAR 0 9
64201: PUSH
64202: LD_VAR 0 10
64206: PLUS
64207: PPUSH
64208: CALL_OW 272
64212: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64213: LD_ADDR_VAR 0 7
64217: PUSH
64218: LD_VAR 0 6
64222: PPUSH
64223: LD_VAR 0 8
64227: PPUSH
64228: LD_VAR 0 9
64232: PUSH
64233: LD_VAR 0 10
64237: PLUS
64238: PPUSH
64239: CALL_OW 273
64243: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64244: LD_VAR 0 5
64248: PPUSH
64249: LD_VAR 0 7
64253: PPUSH
64254: CALL_OW 488
64258: PUSH
64259: LD_VAR 0 5
64263: PPUSH
64264: LD_VAR 0 7
64268: PPUSH
64269: CALL_OW 428
64273: PPUSH
64274: CALL_OW 247
64278: PUSH
64279: LD_INT 3
64281: PUSH
64282: LD_INT 2
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: IN
64289: NOT
64290: AND
64291: IFFALSE 64335
// begin ComMoveXY ( unit , _x , _y ) ;
64293: LD_VAR 0 1
64297: PPUSH
64298: LD_VAR 0 5
64302: PPUSH
64303: LD_VAR 0 7
64307: PPUSH
64308: CALL_OW 111
// result := [ _x , _y ] ;
64312: LD_ADDR_VAR 0 3
64316: PUSH
64317: LD_VAR 0 5
64321: PUSH
64322: LD_VAR 0 7
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: ST_TO_ADDR
// exit ;
64331: POP
64332: POP
64333: GO 64339
// end ; end ;
64335: GO 64179
64337: POP
64338: POP
// end ;
64339: LD_VAR 0 3
64343: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64344: LD_INT 0
64346: PPUSH
64347: PPUSH
64348: PPUSH
// result := 0 ;
64349: LD_ADDR_VAR 0 3
64353: PUSH
64354: LD_INT 0
64356: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64357: LD_VAR 0 1
64361: PUSH
64362: LD_INT 0
64364: LESS
64365: PUSH
64366: LD_VAR 0 1
64370: PUSH
64371: LD_INT 8
64373: GREATER
64374: OR
64375: PUSH
64376: LD_VAR 0 2
64380: PUSH
64381: LD_INT 0
64383: LESS
64384: OR
64385: PUSH
64386: LD_VAR 0 2
64390: PUSH
64391: LD_INT 8
64393: GREATER
64394: OR
64395: IFFALSE 64399
// exit ;
64397: GO 64474
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64399: LD_ADDR_VAR 0 4
64403: PUSH
64404: LD_INT 22
64406: PUSH
64407: LD_VAR 0 2
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PPUSH
64416: CALL_OW 69
64420: PUSH
64421: FOR_IN
64422: IFFALSE 64472
// begin un := UnitShoot ( i ) ;
64424: LD_ADDR_VAR 0 5
64428: PUSH
64429: LD_VAR 0 4
64433: PPUSH
64434: CALL_OW 504
64438: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64439: LD_VAR 0 5
64443: PPUSH
64444: CALL_OW 255
64448: PUSH
64449: LD_VAR 0 1
64453: EQUAL
64454: IFFALSE 64470
// begin result := un ;
64456: LD_ADDR_VAR 0 3
64460: PUSH
64461: LD_VAR 0 5
64465: ST_TO_ADDR
// exit ;
64466: POP
64467: POP
64468: GO 64474
// end ; end ;
64470: GO 64421
64472: POP
64473: POP
// end ;
64474: LD_VAR 0 3
64478: RET
// export function GetCargoBay ( units ) ; begin
64479: LD_INT 0
64481: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64482: LD_ADDR_VAR 0 2
64486: PUSH
64487: LD_VAR 0 1
64491: PPUSH
64492: LD_INT 2
64494: PUSH
64495: LD_INT 34
64497: PUSH
64498: LD_INT 12
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 34
64507: PUSH
64508: LD_INT 51
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 34
64517: PUSH
64518: LD_INT 32
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 34
64527: PUSH
64528: LD_INT 89
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: PPUSH
64542: CALL_OW 72
64546: ST_TO_ADDR
// end ;
64547: LD_VAR 0 2
64551: RET
// export function Negate ( value ) ; begin
64552: LD_INT 0
64554: PPUSH
// result := not value ;
64555: LD_ADDR_VAR 0 2
64559: PUSH
64560: LD_VAR 0 1
64564: NOT
64565: ST_TO_ADDR
// end ;
64566: LD_VAR 0 2
64570: RET
// export function Inc ( value ) ; begin
64571: LD_INT 0
64573: PPUSH
// result := value + 1 ;
64574: LD_ADDR_VAR 0 2
64578: PUSH
64579: LD_VAR 0 1
64583: PUSH
64584: LD_INT 1
64586: PLUS
64587: ST_TO_ADDR
// end ;
64588: LD_VAR 0 2
64592: RET
// export function Dec ( value ) ; begin
64593: LD_INT 0
64595: PPUSH
// result := value - 1 ;
64596: LD_ADDR_VAR 0 2
64600: PUSH
64601: LD_VAR 0 1
64605: PUSH
64606: LD_INT 1
64608: MINUS
64609: ST_TO_ADDR
// end ;
64610: LD_VAR 0 2
64614: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64615: LD_INT 0
64617: PPUSH
64618: PPUSH
64619: PPUSH
64620: PPUSH
64621: PPUSH
64622: PPUSH
64623: PPUSH
64624: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64625: LD_VAR 0 1
64629: PPUSH
64630: LD_VAR 0 2
64634: PPUSH
64635: CALL_OW 488
64639: NOT
64640: PUSH
64641: LD_VAR 0 3
64645: PPUSH
64646: LD_VAR 0 4
64650: PPUSH
64651: CALL_OW 488
64655: NOT
64656: OR
64657: IFFALSE 64670
// begin result := - 1 ;
64659: LD_ADDR_VAR 0 5
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: ST_TO_ADDR
// exit ;
64668: GO 64905
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64670: LD_ADDR_VAR 0 12
64674: PUSH
64675: LD_VAR 0 1
64679: PPUSH
64680: LD_VAR 0 2
64684: PPUSH
64685: LD_VAR 0 3
64689: PPUSH
64690: LD_VAR 0 4
64694: PPUSH
64695: CALL 63755 0 4
64699: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64700: LD_ADDR_VAR 0 11
64704: PUSH
64705: LD_VAR 0 1
64709: PPUSH
64710: LD_VAR 0 2
64714: PPUSH
64715: LD_VAR 0 12
64719: PUSH
64720: LD_INT 1
64722: ARRAY
64723: PPUSH
64724: LD_VAR 0 12
64728: PUSH
64729: LD_INT 2
64731: ARRAY
64732: PPUSH
64733: CALL_OW 298
64737: ST_TO_ADDR
// distance := 9999 ;
64738: LD_ADDR_VAR 0 10
64742: PUSH
64743: LD_INT 9999
64745: ST_TO_ADDR
// for i := 0 to 5 do
64746: LD_ADDR_VAR 0 6
64750: PUSH
64751: DOUBLE
64752: LD_INT 0
64754: DEC
64755: ST_TO_ADDR
64756: LD_INT 5
64758: PUSH
64759: FOR_TO
64760: IFFALSE 64903
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64762: LD_ADDR_VAR 0 7
64766: PUSH
64767: LD_VAR 0 1
64771: PPUSH
64772: LD_VAR 0 6
64776: PPUSH
64777: LD_VAR 0 11
64781: PPUSH
64782: CALL_OW 272
64786: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64787: LD_ADDR_VAR 0 8
64791: PUSH
64792: LD_VAR 0 2
64796: PPUSH
64797: LD_VAR 0 6
64801: PPUSH
64802: LD_VAR 0 11
64806: PPUSH
64807: CALL_OW 273
64811: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64812: LD_VAR 0 7
64816: PPUSH
64817: LD_VAR 0 8
64821: PPUSH
64822: CALL_OW 488
64826: NOT
64827: IFFALSE 64831
// continue ;
64829: GO 64759
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64831: LD_ADDR_VAR 0 9
64835: PUSH
64836: LD_VAR 0 12
64840: PUSH
64841: LD_INT 1
64843: ARRAY
64844: PPUSH
64845: LD_VAR 0 12
64849: PUSH
64850: LD_INT 2
64852: ARRAY
64853: PPUSH
64854: LD_VAR 0 7
64858: PPUSH
64859: LD_VAR 0 8
64863: PPUSH
64864: CALL_OW 298
64868: ST_TO_ADDR
// if tmp < distance then
64869: LD_VAR 0 9
64873: PUSH
64874: LD_VAR 0 10
64878: LESS
64879: IFFALSE 64901
// begin result := i ;
64881: LD_ADDR_VAR 0 5
64885: PUSH
64886: LD_VAR 0 6
64890: ST_TO_ADDR
// distance := tmp ;
64891: LD_ADDR_VAR 0 10
64895: PUSH
64896: LD_VAR 0 9
64900: ST_TO_ADDR
// end ; end ;
64901: GO 64759
64903: POP
64904: POP
// end ;
64905: LD_VAR 0 5
64909: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64910: LD_INT 0
64912: PPUSH
64913: PPUSH
// if not driver or not IsInUnit ( driver ) then
64914: LD_VAR 0 1
64918: NOT
64919: PUSH
64920: LD_VAR 0 1
64924: PPUSH
64925: CALL_OW 310
64929: NOT
64930: OR
64931: IFFALSE 64935
// exit ;
64933: GO 65025
// vehicle := IsInUnit ( driver ) ;
64935: LD_ADDR_VAR 0 3
64939: PUSH
64940: LD_VAR 0 1
64944: PPUSH
64945: CALL_OW 310
64949: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64950: LD_VAR 0 1
64954: PPUSH
64955: LD_STRING \
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: PUSH
64985: LD_STRING E
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: LD_VAR 0 3
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PPUSH
65021: CALL_OW 446
// end ;
65025: LD_VAR 0 2
65029: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65030: LD_INT 0
65032: PPUSH
65033: PPUSH
// if not driver or not IsInUnit ( driver ) then
65034: LD_VAR 0 1
65038: NOT
65039: PUSH
65040: LD_VAR 0 1
65044: PPUSH
65045: CALL_OW 310
65049: NOT
65050: OR
65051: IFFALSE 65055
// exit ;
65053: GO 65145
// vehicle := IsInUnit ( driver ) ;
65055: LD_ADDR_VAR 0 3
65059: PUSH
65060: LD_VAR 0 1
65064: PPUSH
65065: CALL_OW 310
65069: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65070: LD_VAR 0 1
65074: PPUSH
65075: LD_STRING \
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: PUSH
65105: LD_STRING E
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: LD_VAR 0 3
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PPUSH
65141: CALL_OW 447
// end ;
65145: LD_VAR 0 2
65149: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65150: LD_INT 0
65152: PPUSH
65153: PPUSH
65154: PPUSH
// tmp := [ ] ;
65155: LD_ADDR_VAR 0 5
65159: PUSH
65160: EMPTY
65161: ST_TO_ADDR
// for i in units do
65162: LD_ADDR_VAR 0 4
65166: PUSH
65167: LD_VAR 0 1
65171: PUSH
65172: FOR_IN
65173: IFFALSE 65211
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65175: LD_ADDR_VAR 0 5
65179: PUSH
65180: LD_VAR 0 5
65184: PPUSH
65185: LD_VAR 0 5
65189: PUSH
65190: LD_INT 1
65192: PLUS
65193: PPUSH
65194: LD_VAR 0 4
65198: PPUSH
65199: CALL_OW 256
65203: PPUSH
65204: CALL_OW 2
65208: ST_TO_ADDR
65209: GO 65172
65211: POP
65212: POP
// if not tmp then
65213: LD_VAR 0 5
65217: NOT
65218: IFFALSE 65222
// exit ;
65220: GO 65270
// if asc then
65222: LD_VAR 0 2
65226: IFFALSE 65250
// result := SortListByListAsc ( units , tmp ) else
65228: LD_ADDR_VAR 0 3
65232: PUSH
65233: LD_VAR 0 1
65237: PPUSH
65238: LD_VAR 0 5
65242: PPUSH
65243: CALL_OW 76
65247: ST_TO_ADDR
65248: GO 65270
// result := SortListByListDesc ( units , tmp ) ;
65250: LD_ADDR_VAR 0 3
65254: PUSH
65255: LD_VAR 0 1
65259: PPUSH
65260: LD_VAR 0 5
65264: PPUSH
65265: CALL_OW 77
65269: ST_TO_ADDR
// end ;
65270: LD_VAR 0 3
65274: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65275: LD_INT 0
65277: PPUSH
65278: PPUSH
// task := GetTaskList ( mech ) ;
65279: LD_ADDR_VAR 0 4
65283: PUSH
65284: LD_VAR 0 1
65288: PPUSH
65289: CALL_OW 437
65293: ST_TO_ADDR
// if not task then
65294: LD_VAR 0 4
65298: NOT
65299: IFFALSE 65303
// exit ;
65301: GO 65345
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65303: LD_ADDR_VAR 0 3
65307: PUSH
65308: LD_VAR 0 4
65312: PUSH
65313: LD_INT 1
65315: ARRAY
65316: PUSH
65317: LD_INT 1
65319: ARRAY
65320: PUSH
65321: LD_STRING r
65323: EQUAL
65324: PUSH
65325: LD_VAR 0 4
65329: PUSH
65330: LD_INT 1
65332: ARRAY
65333: PUSH
65334: LD_INT 4
65336: ARRAY
65337: PUSH
65338: LD_VAR 0 2
65342: EQUAL
65343: AND
65344: ST_TO_ADDR
// end ;
65345: LD_VAR 0 3
65349: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65350: LD_INT 0
65352: PPUSH
// SetDir ( unit , d ) ;
65353: LD_VAR 0 1
65357: PPUSH
65358: LD_VAR 0 4
65362: PPUSH
65363: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65367: LD_VAR 0 1
65371: PPUSH
65372: LD_VAR 0 2
65376: PPUSH
65377: LD_VAR 0 3
65381: PPUSH
65382: LD_VAR 0 5
65386: PPUSH
65387: CALL_OW 48
// end ;
65391: LD_VAR 0 6
65395: RET
// export function ToNaturalNumber ( number ) ; begin
65396: LD_INT 0
65398: PPUSH
// result := number div 1 ;
65399: LD_ADDR_VAR 0 2
65403: PUSH
65404: LD_VAR 0 1
65408: PUSH
65409: LD_INT 1
65411: DIV
65412: ST_TO_ADDR
// if number < 0 then
65413: LD_VAR 0 1
65417: PUSH
65418: LD_INT 0
65420: LESS
65421: IFFALSE 65431
// result := 0 ;
65423: LD_ADDR_VAR 0 2
65427: PUSH
65428: LD_INT 0
65430: ST_TO_ADDR
// end ;
65431: LD_VAR 0 2
65435: RET
// export function SortByClass ( units , class ) ; var un ; begin
65436: LD_INT 0
65438: PPUSH
65439: PPUSH
// if not units or not class then
65440: LD_VAR 0 1
65444: NOT
65445: PUSH
65446: LD_VAR 0 2
65450: NOT
65451: OR
65452: IFFALSE 65456
// exit ;
65454: GO 65551
// result := [ ] ;
65456: LD_ADDR_VAR 0 3
65460: PUSH
65461: EMPTY
65462: ST_TO_ADDR
// for un in units do
65463: LD_ADDR_VAR 0 4
65467: PUSH
65468: LD_VAR 0 1
65472: PUSH
65473: FOR_IN
65474: IFFALSE 65549
// if GetClass ( un ) = class then
65476: LD_VAR 0 4
65480: PPUSH
65481: CALL_OW 257
65485: PUSH
65486: LD_VAR 0 2
65490: EQUAL
65491: IFFALSE 65518
// result := Insert ( result , 1 , un ) else
65493: LD_ADDR_VAR 0 3
65497: PUSH
65498: LD_VAR 0 3
65502: PPUSH
65503: LD_INT 1
65505: PPUSH
65506: LD_VAR 0 4
65510: PPUSH
65511: CALL_OW 2
65515: ST_TO_ADDR
65516: GO 65547
// result := Replace ( result , result + 1 , un ) ;
65518: LD_ADDR_VAR 0 3
65522: PUSH
65523: LD_VAR 0 3
65527: PPUSH
65528: LD_VAR 0 3
65532: PUSH
65533: LD_INT 1
65535: PLUS
65536: PPUSH
65537: LD_VAR 0 4
65541: PPUSH
65542: CALL_OW 1
65546: ST_TO_ADDR
65547: GO 65473
65549: POP
65550: POP
// end ;
65551: LD_VAR 0 3
65555: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65556: LD_INT 0
65558: PPUSH
65559: PPUSH
65560: PPUSH
65561: PPUSH
65562: PPUSH
65563: PPUSH
65564: PPUSH
// result := [ ] ;
65565: LD_ADDR_VAR 0 4
65569: PUSH
65570: EMPTY
65571: ST_TO_ADDR
// if x - r < 0 then
65572: LD_VAR 0 1
65576: PUSH
65577: LD_VAR 0 3
65581: MINUS
65582: PUSH
65583: LD_INT 0
65585: LESS
65586: IFFALSE 65598
// min_x := 0 else
65588: LD_ADDR_VAR 0 8
65592: PUSH
65593: LD_INT 0
65595: ST_TO_ADDR
65596: GO 65614
// min_x := x - r ;
65598: LD_ADDR_VAR 0 8
65602: PUSH
65603: LD_VAR 0 1
65607: PUSH
65608: LD_VAR 0 3
65612: MINUS
65613: ST_TO_ADDR
// if y - r < 0 then
65614: LD_VAR 0 2
65618: PUSH
65619: LD_VAR 0 3
65623: MINUS
65624: PUSH
65625: LD_INT 0
65627: LESS
65628: IFFALSE 65640
// min_y := 0 else
65630: LD_ADDR_VAR 0 7
65634: PUSH
65635: LD_INT 0
65637: ST_TO_ADDR
65638: GO 65656
// min_y := y - r ;
65640: LD_ADDR_VAR 0 7
65644: PUSH
65645: LD_VAR 0 2
65649: PUSH
65650: LD_VAR 0 3
65654: MINUS
65655: ST_TO_ADDR
// max_x := x + r ;
65656: LD_ADDR_VAR 0 9
65660: PUSH
65661: LD_VAR 0 1
65665: PUSH
65666: LD_VAR 0 3
65670: PLUS
65671: ST_TO_ADDR
// max_y := y + r ;
65672: LD_ADDR_VAR 0 10
65676: PUSH
65677: LD_VAR 0 2
65681: PUSH
65682: LD_VAR 0 3
65686: PLUS
65687: ST_TO_ADDR
// for _x = min_x to max_x do
65688: LD_ADDR_VAR 0 5
65692: PUSH
65693: DOUBLE
65694: LD_VAR 0 8
65698: DEC
65699: ST_TO_ADDR
65700: LD_VAR 0 9
65704: PUSH
65705: FOR_TO
65706: IFFALSE 65807
// for _y = min_y to max_y do
65708: LD_ADDR_VAR 0 6
65712: PUSH
65713: DOUBLE
65714: LD_VAR 0 7
65718: DEC
65719: ST_TO_ADDR
65720: LD_VAR 0 10
65724: PUSH
65725: FOR_TO
65726: IFFALSE 65803
// begin if not ValidHex ( _x , _y ) then
65728: LD_VAR 0 5
65732: PPUSH
65733: LD_VAR 0 6
65737: PPUSH
65738: CALL_OW 488
65742: NOT
65743: IFFALSE 65747
// continue ;
65745: GO 65725
// if GetResourceTypeXY ( _x , _y ) then
65747: LD_VAR 0 5
65751: PPUSH
65752: LD_VAR 0 6
65756: PPUSH
65757: CALL_OW 283
65761: IFFALSE 65801
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65763: LD_ADDR_VAR 0 4
65767: PUSH
65768: LD_VAR 0 4
65772: PPUSH
65773: LD_VAR 0 4
65777: PUSH
65778: LD_INT 1
65780: PLUS
65781: PPUSH
65782: LD_VAR 0 5
65786: PUSH
65787: LD_VAR 0 6
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PPUSH
65796: CALL_OW 1
65800: ST_TO_ADDR
// end ;
65801: GO 65725
65803: POP
65804: POP
65805: GO 65705
65807: POP
65808: POP
// end ;
65809: LD_VAR 0 4
65813: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65814: LD_INT 0
65816: PPUSH
65817: PPUSH
65818: PPUSH
65819: PPUSH
65820: PPUSH
65821: PPUSH
65822: PPUSH
65823: PPUSH
// if not units then
65824: LD_VAR 0 1
65828: NOT
65829: IFFALSE 65833
// exit ;
65831: GO 66357
// result := UnitFilter ( units , [ f_ok ] ) ;
65833: LD_ADDR_VAR 0 3
65837: PUSH
65838: LD_VAR 0 1
65842: PPUSH
65843: LD_INT 50
65845: PUSH
65846: EMPTY
65847: LIST
65848: PPUSH
65849: CALL_OW 72
65853: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65854: LD_ADDR_VAR 0 8
65858: PUSH
65859: LD_VAR 0 1
65863: PUSH
65864: LD_INT 1
65866: ARRAY
65867: PPUSH
65868: CALL_OW 255
65872: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65873: LD_ADDR_VAR 0 10
65877: PUSH
65878: LD_INT 29
65880: PUSH
65881: LD_INT 91
65883: PUSH
65884: LD_INT 49
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: LIST
65891: ST_TO_ADDR
// if not result then
65892: LD_VAR 0 3
65896: NOT
65897: IFFALSE 65901
// exit ;
65899: GO 66357
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65901: LD_ADDR_VAR 0 5
65905: PUSH
65906: LD_INT 81
65908: PUSH
65909: LD_VAR 0 8
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PPUSH
65918: CALL_OW 69
65922: ST_TO_ADDR
// for i in result do
65923: LD_ADDR_VAR 0 4
65927: PUSH
65928: LD_VAR 0 3
65932: PUSH
65933: FOR_IN
65934: IFFALSE 66355
// begin tag := GetTag ( i ) + 1 ;
65936: LD_ADDR_VAR 0 9
65940: PUSH
65941: LD_VAR 0 4
65945: PPUSH
65946: CALL_OW 110
65950: PUSH
65951: LD_INT 1
65953: PLUS
65954: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65955: LD_ADDR_VAR 0 7
65959: PUSH
65960: LD_VAR 0 4
65964: PPUSH
65965: CALL_OW 250
65969: PPUSH
65970: LD_VAR 0 4
65974: PPUSH
65975: CALL_OW 251
65979: PPUSH
65980: LD_INT 6
65982: PPUSH
65983: CALL 65556 0 3
65987: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65988: LD_VAR 0 4
65992: PPUSH
65993: CALL_OW 247
65997: PUSH
65998: LD_INT 2
66000: EQUAL
66001: PUSH
66002: LD_VAR 0 7
66006: AND
66007: PUSH
66008: LD_VAR 0 4
66012: PPUSH
66013: CALL_OW 264
66017: PUSH
66018: LD_VAR 0 10
66022: IN
66023: NOT
66024: AND
66025: IFFALSE 66064
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66027: LD_VAR 0 4
66031: PPUSH
66032: LD_VAR 0 7
66036: PUSH
66037: LD_INT 1
66039: ARRAY
66040: PUSH
66041: LD_INT 1
66043: ARRAY
66044: PPUSH
66045: LD_VAR 0 7
66049: PUSH
66050: LD_INT 1
66052: ARRAY
66053: PUSH
66054: LD_INT 2
66056: ARRAY
66057: PPUSH
66058: CALL_OW 116
66062: GO 66353
// if path > tag then
66064: LD_VAR 0 2
66068: PUSH
66069: LD_VAR 0 9
66073: GREATER
66074: IFFALSE 66282
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66076: LD_ADDR_VAR 0 6
66080: PUSH
66081: LD_VAR 0 5
66085: PPUSH
66086: LD_INT 91
66088: PUSH
66089: LD_VAR 0 4
66093: PUSH
66094: LD_INT 8
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: LIST
66101: PPUSH
66102: CALL_OW 72
66106: ST_TO_ADDR
// if nearEnemy then
66107: LD_VAR 0 6
66111: IFFALSE 66180
// begin if GetWeapon ( i ) = ru_time_lapser then
66113: LD_VAR 0 4
66117: PPUSH
66118: CALL_OW 264
66122: PUSH
66123: LD_INT 49
66125: EQUAL
66126: IFFALSE 66154
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66128: LD_VAR 0 4
66132: PPUSH
66133: LD_VAR 0 6
66137: PPUSH
66138: LD_VAR 0 4
66142: PPUSH
66143: CALL_OW 74
66147: PPUSH
66148: CALL_OW 112
66152: GO 66178
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66154: LD_VAR 0 4
66158: PPUSH
66159: LD_VAR 0 6
66163: PPUSH
66164: LD_VAR 0 4
66168: PPUSH
66169: CALL_OW 74
66173: PPUSH
66174: CALL_OW 115
// end else
66178: GO 66280
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66180: LD_VAR 0 4
66184: PPUSH
66185: LD_VAR 0 2
66189: PUSH
66190: LD_VAR 0 9
66194: ARRAY
66195: PUSH
66196: LD_INT 1
66198: ARRAY
66199: PPUSH
66200: LD_VAR 0 2
66204: PUSH
66205: LD_VAR 0 9
66209: ARRAY
66210: PUSH
66211: LD_INT 2
66213: ARRAY
66214: PPUSH
66215: CALL_OW 297
66219: PUSH
66220: LD_INT 6
66222: GREATER
66223: IFFALSE 66266
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66225: LD_VAR 0 4
66229: PPUSH
66230: LD_VAR 0 2
66234: PUSH
66235: LD_VAR 0 9
66239: ARRAY
66240: PUSH
66241: LD_INT 1
66243: ARRAY
66244: PPUSH
66245: LD_VAR 0 2
66249: PUSH
66250: LD_VAR 0 9
66254: ARRAY
66255: PUSH
66256: LD_INT 2
66258: ARRAY
66259: PPUSH
66260: CALL_OW 114
66264: GO 66280
// SetTag ( i , tag ) ;
66266: LD_VAR 0 4
66270: PPUSH
66271: LD_VAR 0 9
66275: PPUSH
66276: CALL_OW 109
// end else
66280: GO 66353
// if enemy then
66282: LD_VAR 0 5
66286: IFFALSE 66353
// begin if GetWeapon ( i ) = ru_time_lapser then
66288: LD_VAR 0 4
66292: PPUSH
66293: CALL_OW 264
66297: PUSH
66298: LD_INT 49
66300: EQUAL
66301: IFFALSE 66329
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66303: LD_VAR 0 4
66307: PPUSH
66308: LD_VAR 0 5
66312: PPUSH
66313: LD_VAR 0 4
66317: PPUSH
66318: CALL_OW 74
66322: PPUSH
66323: CALL_OW 112
66327: GO 66353
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66329: LD_VAR 0 4
66333: PPUSH
66334: LD_VAR 0 5
66338: PPUSH
66339: LD_VAR 0 4
66343: PPUSH
66344: CALL_OW 74
66348: PPUSH
66349: CALL_OW 115
// end ; end ;
66353: GO 65933
66355: POP
66356: POP
// end ;
66357: LD_VAR 0 3
66361: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66362: LD_INT 0
66364: PPUSH
66365: PPUSH
66366: PPUSH
// if not unit or IsInUnit ( unit ) then
66367: LD_VAR 0 1
66371: NOT
66372: PUSH
66373: LD_VAR 0 1
66377: PPUSH
66378: CALL_OW 310
66382: OR
66383: IFFALSE 66387
// exit ;
66385: GO 66478
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66387: LD_ADDR_VAR 0 4
66391: PUSH
66392: LD_VAR 0 1
66396: PPUSH
66397: CALL_OW 250
66401: PPUSH
66402: LD_VAR 0 2
66406: PPUSH
66407: LD_INT 1
66409: PPUSH
66410: CALL_OW 272
66414: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66415: LD_ADDR_VAR 0 5
66419: PUSH
66420: LD_VAR 0 1
66424: PPUSH
66425: CALL_OW 251
66429: PPUSH
66430: LD_VAR 0 2
66434: PPUSH
66435: LD_INT 1
66437: PPUSH
66438: CALL_OW 273
66442: ST_TO_ADDR
// if ValidHex ( x , y ) then
66443: LD_VAR 0 4
66447: PPUSH
66448: LD_VAR 0 5
66452: PPUSH
66453: CALL_OW 488
66457: IFFALSE 66478
// ComTurnXY ( unit , x , y ) ;
66459: LD_VAR 0 1
66463: PPUSH
66464: LD_VAR 0 4
66468: PPUSH
66469: LD_VAR 0 5
66473: PPUSH
66474: CALL_OW 118
// end ;
66478: LD_VAR 0 3
66482: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66483: LD_INT 0
66485: PPUSH
66486: PPUSH
// result := false ;
66487: LD_ADDR_VAR 0 3
66491: PUSH
66492: LD_INT 0
66494: ST_TO_ADDR
// if not units then
66495: LD_VAR 0 2
66499: NOT
66500: IFFALSE 66504
// exit ;
66502: GO 66549
// for i in units do
66504: LD_ADDR_VAR 0 4
66508: PUSH
66509: LD_VAR 0 2
66513: PUSH
66514: FOR_IN
66515: IFFALSE 66547
// if See ( side , i ) then
66517: LD_VAR 0 1
66521: PPUSH
66522: LD_VAR 0 4
66526: PPUSH
66527: CALL_OW 292
66531: IFFALSE 66545
// begin result := true ;
66533: LD_ADDR_VAR 0 3
66537: PUSH
66538: LD_INT 1
66540: ST_TO_ADDR
// exit ;
66541: POP
66542: POP
66543: GO 66549
// end ;
66545: GO 66514
66547: POP
66548: POP
// end ;
66549: LD_VAR 0 3
66553: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66554: LD_INT 0
66556: PPUSH
66557: PPUSH
66558: PPUSH
66559: PPUSH
// if not unit or not points then
66560: LD_VAR 0 1
66564: NOT
66565: PUSH
66566: LD_VAR 0 2
66570: NOT
66571: OR
66572: IFFALSE 66576
// exit ;
66574: GO 66666
// dist := 99999 ;
66576: LD_ADDR_VAR 0 5
66580: PUSH
66581: LD_INT 99999
66583: ST_TO_ADDR
// for i in points do
66584: LD_ADDR_VAR 0 4
66588: PUSH
66589: LD_VAR 0 2
66593: PUSH
66594: FOR_IN
66595: IFFALSE 66664
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66597: LD_ADDR_VAR 0 6
66601: PUSH
66602: LD_VAR 0 1
66606: PPUSH
66607: LD_VAR 0 4
66611: PUSH
66612: LD_INT 1
66614: ARRAY
66615: PPUSH
66616: LD_VAR 0 4
66620: PUSH
66621: LD_INT 2
66623: ARRAY
66624: PPUSH
66625: CALL_OW 297
66629: ST_TO_ADDR
// if tmpDist < dist then
66630: LD_VAR 0 6
66634: PUSH
66635: LD_VAR 0 5
66639: LESS
66640: IFFALSE 66662
// begin result := i ;
66642: LD_ADDR_VAR 0 3
66646: PUSH
66647: LD_VAR 0 4
66651: ST_TO_ADDR
// dist := tmpDist ;
66652: LD_ADDR_VAR 0 5
66656: PUSH
66657: LD_VAR 0 6
66661: ST_TO_ADDR
// end ; end ;
66662: GO 66594
66664: POP
66665: POP
// end ;
66666: LD_VAR 0 3
66670: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66671: LD_INT 0
66673: PPUSH
// uc_side := side ;
66674: LD_ADDR_OWVAR 20
66678: PUSH
66679: LD_VAR 0 1
66683: ST_TO_ADDR
// uc_nation := 3 ;
66684: LD_ADDR_OWVAR 21
66688: PUSH
66689: LD_INT 3
66691: ST_TO_ADDR
// vc_chassis := 25 ;
66692: LD_ADDR_OWVAR 37
66696: PUSH
66697: LD_INT 25
66699: ST_TO_ADDR
// vc_engine := engine_siberite ;
66700: LD_ADDR_OWVAR 39
66704: PUSH
66705: LD_INT 3
66707: ST_TO_ADDR
// vc_control := control_computer ;
66708: LD_ADDR_OWVAR 38
66712: PUSH
66713: LD_INT 3
66715: ST_TO_ADDR
// vc_weapon := 59 ;
66716: LD_ADDR_OWVAR 40
66720: PUSH
66721: LD_INT 59
66723: ST_TO_ADDR
// result := CreateVehicle ;
66724: LD_ADDR_VAR 0 5
66728: PUSH
66729: CALL_OW 45
66733: ST_TO_ADDR
// SetDir ( result , d ) ;
66734: LD_VAR 0 5
66738: PPUSH
66739: LD_VAR 0 4
66743: PPUSH
66744: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66748: LD_VAR 0 5
66752: PPUSH
66753: LD_VAR 0 2
66757: PPUSH
66758: LD_VAR 0 3
66762: PPUSH
66763: LD_INT 0
66765: PPUSH
66766: CALL_OW 48
// end ;
66770: LD_VAR 0 5
66774: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66775: LD_INT 0
66777: PPUSH
66778: PPUSH
66779: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66780: LD_ADDR_VAR 0 2
66784: PUSH
66785: LD_INT 0
66787: PUSH
66788: LD_INT 0
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: LD_INT 0
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66803: LD_VAR 0 1
66807: NOT
66808: PUSH
66809: LD_VAR 0 1
66813: PPUSH
66814: CALL_OW 264
66818: PUSH
66819: LD_INT 12
66821: PUSH
66822: LD_INT 51
66824: PUSH
66825: LD_INT 32
66827: PUSH
66828: LD_INT 89
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: IN
66837: NOT
66838: OR
66839: IFFALSE 66843
// exit ;
66841: GO 66941
// for i := 1 to 3 do
66843: LD_ADDR_VAR 0 3
66847: PUSH
66848: DOUBLE
66849: LD_INT 1
66851: DEC
66852: ST_TO_ADDR
66853: LD_INT 3
66855: PUSH
66856: FOR_TO
66857: IFFALSE 66939
// begin tmp := GetCargo ( cargo , i ) ;
66859: LD_ADDR_VAR 0 4
66863: PUSH
66864: LD_VAR 0 1
66868: PPUSH
66869: LD_VAR 0 3
66873: PPUSH
66874: CALL_OW 289
66878: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66879: LD_ADDR_VAR 0 2
66883: PUSH
66884: LD_VAR 0 2
66888: PPUSH
66889: LD_VAR 0 3
66893: PPUSH
66894: LD_VAR 0 4
66898: PPUSH
66899: CALL_OW 1
66903: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66904: LD_ADDR_VAR 0 2
66908: PUSH
66909: LD_VAR 0 2
66913: PPUSH
66914: LD_INT 4
66916: PPUSH
66917: LD_VAR 0 2
66921: PUSH
66922: LD_INT 4
66924: ARRAY
66925: PUSH
66926: LD_VAR 0 4
66930: PLUS
66931: PPUSH
66932: CALL_OW 1
66936: ST_TO_ADDR
// end ;
66937: GO 66856
66939: POP
66940: POP
// end ;
66941: LD_VAR 0 2
66945: RET
// export function Length ( array ) ; begin
66946: LD_INT 0
66948: PPUSH
// result := array + 0 ;
66949: LD_ADDR_VAR 0 2
66953: PUSH
66954: LD_VAR 0 1
66958: PUSH
66959: LD_INT 0
66961: PLUS
66962: ST_TO_ADDR
// end ;
66963: LD_VAR 0 2
66967: RET
// export function PrepareArray ( array ) ; begin
66968: LD_INT 0
66970: PPUSH
// result := array diff 0 ;
66971: LD_ADDR_VAR 0 2
66975: PUSH
66976: LD_VAR 0 1
66980: PUSH
66981: LD_INT 0
66983: DIFF
66984: ST_TO_ADDR
// if not result [ 1 ] then
66985: LD_VAR 0 2
66989: PUSH
66990: LD_INT 1
66992: ARRAY
66993: NOT
66994: IFFALSE 67014
// result := Delete ( result , 1 ) ;
66996: LD_ADDR_VAR 0 2
67000: PUSH
67001: LD_VAR 0 2
67005: PPUSH
67006: LD_INT 1
67008: PPUSH
67009: CALL_OW 3
67013: ST_TO_ADDR
// end ;
67014: LD_VAR 0 2
67018: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67019: LD_INT 0
67021: PPUSH
67022: PPUSH
67023: PPUSH
67024: PPUSH
// sibRocketRange := 25 ;
67025: LD_ADDR_VAR 0 6
67029: PUSH
67030: LD_INT 25
67032: ST_TO_ADDR
// result := false ;
67033: LD_ADDR_VAR 0 4
67037: PUSH
67038: LD_INT 0
67040: ST_TO_ADDR
// for i := 0 to 5 do
67041: LD_ADDR_VAR 0 5
67045: PUSH
67046: DOUBLE
67047: LD_INT 0
67049: DEC
67050: ST_TO_ADDR
67051: LD_INT 5
67053: PUSH
67054: FOR_TO
67055: IFFALSE 67122
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67057: LD_VAR 0 1
67061: PPUSH
67062: LD_VAR 0 5
67066: PPUSH
67067: LD_VAR 0 6
67071: PPUSH
67072: CALL_OW 272
67076: PPUSH
67077: LD_VAR 0 2
67081: PPUSH
67082: LD_VAR 0 5
67086: PPUSH
67087: LD_VAR 0 6
67091: PPUSH
67092: CALL_OW 273
67096: PPUSH
67097: LD_VAR 0 3
67101: PPUSH
67102: CALL_OW 309
67106: IFFALSE 67120
// begin result := true ;
67108: LD_ADDR_VAR 0 4
67112: PUSH
67113: LD_INT 1
67115: ST_TO_ADDR
// exit ;
67116: POP
67117: POP
67118: GO 67124
// end ;
67120: GO 67054
67122: POP
67123: POP
// end ;
67124: LD_VAR 0 4
67128: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67129: LD_INT 0
67131: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67132: LD_VAR 0 1
67136: PPUSH
67137: LD_VAR 0 2
67141: PPUSH
67142: LD_INT 0
67144: PPUSH
67145: LD_INT 0
67147: PPUSH
67148: LD_INT 1
67150: PPUSH
67151: LD_INT 0
67153: PPUSH
67154: CALL_OW 587
// end ;
67158: LD_VAR 0 3
67162: RET
