// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles = [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources = [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon = [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 1069 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// InGameOn ;
  70: CALL_OW 8
// mission_prefix_prev = 12_ ;
  74: LD_ADDR_EXP 21
  78: PUSH
  79: LD_STRING 12_
  81: ST_TO_ADDR
// PrepareEpsilonBase ;
  82: CALL 2408 0 0
// PrepareHeroes ;
  86: CALL 1249 0 0
// PrepareRandoms ;
  90: CALL 3521 0 0
// CenterNowOnUnits ( JMM ) ;
  94: LD_EXP 1
  98: PPUSH
  99: CALL_OW 87
// DialogueOn ;
 103: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
 107: LD_EXP 1
 111: PPUSH
 112: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
 116: LD_EXP 1
 120: PPUSH
 121: LD_STRING D1-JMM-1
 123: PPUSH
 124: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
 128: LD_EXP 2
 132: PPUSH
 133: LD_STRING D1-Pow-1
 135: PPUSH
 136: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
 140: LD_EXP 2
 144: PPUSH
 145: LD_STRING D1-Pow-1a
 147: PPUSH
 148: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
 152: LD_EXP 2
 156: PPUSH
 157: LD_STRING D1-Pow-1b
 159: PPUSH
 160: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
 164: LD_EXP 2
 168: PPUSH
 169: LD_STRING D1-Pow-1c
 171: PPUSH
 172: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 176: LD_EXP 1
 180: PPUSH
 181: LD_STRING D1-JMM-2
 183: PPUSH
 184: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 188: LD_EXP 2
 192: PPUSH
 193: LD_STRING D1-Pow-2
 195: PPUSH
 196: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 200: LD_EXP 1
 204: PPUSH
 205: LD_STRING D1-JMM-3
 207: PPUSH
 208: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 212: LD_EXP 2
 216: PPUSH
 217: LD_STRING D1-Pow-3
 219: PPUSH
 220: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 224: LD_EXP 1
 228: PPUSH
 229: LD_STRING D1-JMM-4
 231: PPUSH
 232: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 236: LD_EXP 2
 240: PPUSH
 241: LD_STRING D1-Pow-4
 243: PPUSH
 244: CALL_OW 94
// DialogueOff ;
 248: CALL_OW 7
// SelectAndSaveCharacters ;
 252: CALL 4117 0 0
// InGameOff ;
 256: CALL_OW 9
// Query ( Q1 ) ;
 260: LD_STRING Q1
 262: PPUSH
 263: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
 267: LD_INT 1
 269: PPUSH
 270: LD_INT 1
 272: PPUSH
 273: CALL_OW 424
// end ;
 277: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 22
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: LD_INT 21
 293: PUSH
 294: LD_INT 1
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 71
 309: PUSH
 310: LD_INT 0
 312: EQUAL
 313: PUSH
 314: LD_INT 1
 316: PPUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 21
 329: PUSH
 330: LD_INT 2
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 32
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: LD_INT 33
 349: PUSH
 350: LD_INT 1
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PUSH
 357: LD_INT 3
 359: PUSH
 360: LD_INT 58
 362: PUSH
 363: EMPTY
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: PPUSH
 377: CALL_OW 70
 381: PUSH
 382: LD_INT 8
 384: EQUAL
 385: AND
 386: IFFALSE 966
 388: GO 390
 390: DISABLE
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 21
 400: PUSH
 401: LD_INT 2
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 33
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: LD_INT 58
 423: PUSH
 424: EMPTY
 425: LIST
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: LIST
 435: PPUSH
 436: CALL_OW 70
 440: PUSH
 441: LD_INT 0
 443: GREATER
 444: IFFALSE 712
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 446: LD_ADDR_VAR 0 1
 450: PUSH
 451: LD_INT 1
 453: PPUSH
 454: LD_INT 21
 456: PUSH
 457: LD_INT 2
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 33
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 3
 476: PUSH
 477: LD_INT 58
 479: PUSH
 480: EMPTY
 481: LIST
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PPUSH
 492: CALL_OW 70
 496: PUSH
 497: FOR_IN
 498: IFFALSE 698
// begin cargoType = GetCargoType ( i ) ;
 500: LD_ADDR_VAR 0 2
 504: PUSH
 505: LD_VAR 0 1
 509: PPUSH
 510: CALL_OW 288
 514: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 515: LD_VAR 0 1
 519: PPUSH
 520: CALL_OW 264
 524: PUSH
 525: LD_INT 12
 527: EQUAL
 528: IFFALSE 625
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
 530: LD_ADDR_EXP 19
 534: PUSH
 535: LD_EXP 19
 539: PUSH
 540: LD_VAR 0 1
 544: PPUSH
 545: CALL_OW 248
 549: PUSH
 550: LD_VAR 0 1
 554: PPUSH
 555: CALL_OW 265
 559: PUSH
 560: LD_VAR 0 1
 564: PPUSH
 565: CALL_OW 262
 569: PUSH
 570: LD_VAR 0 1
 574: PPUSH
 575: CALL_OW 263
 579: PUSH
 580: LD_VAR 0 1
 584: PPUSH
 585: CALL_OW 264
 589: PUSH
 590: LD_VAR 0 2
 594: PUSH
 595: LD_VAR 0 1
 599: PPUSH
 600: LD_VAR 0 2
 604: PPUSH
 605: CALL_OW 289
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: PUSH
 619: EMPTY
 620: LIST
 621: ADD
 622: ST_TO_ADDR
// end else
 623: GO 696
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
 625: LD_ADDR_EXP 19
 629: PUSH
 630: LD_EXP 19
 634: PUSH
 635: LD_VAR 0 1
 639: PPUSH
 640: CALL_OW 248
 644: PUSH
 645: LD_VAR 0 1
 649: PPUSH
 650: CALL_OW 265
 654: PUSH
 655: LD_VAR 0 1
 659: PPUSH
 660: CALL_OW 262
 664: PUSH
 665: LD_VAR 0 1
 669: PPUSH
 670: CALL_OW 263
 674: PUSH
 675: LD_VAR 0 1
 679: PPUSH
 680: CALL_OW 264
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: ADD
 695: ST_TO_ADDR
// end ; end ;
 696: GO 497
 698: POP
 699: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 700: LD_EXP 19
 704: PPUSH
 705: LD_STRING 13_VehiclesIn13_1
 707: PPUSH
 708: CALL_OW 39
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 712: LD_EXP 23
 716: PPUSH
 717: LD_STRING 13c_others
 719: PPUSH
 720: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 724: LD_EXP 1
 728: PPUSH
 729: LD_STRING 13c_JMM
 731: PPUSH
 732: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 736: LD_EXP 15
 740: PPUSH
 741: LD_STRING 13c_Stevens
 743: PPUSH
 744: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 748: LD_EXP 3
 752: PPUSH
 753: LD_STRING Lisa
 755: PPUSH
 756: LD_EXP 22
 760: PPUSH
 761: CALL 4059 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 765: LD_EXP 8
 769: PPUSH
 770: LD_STRING Brown
 772: PPUSH
 773: LD_EXP 22
 777: PPUSH
 778: CALL 4059 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 782: LD_EXP 4
 786: PPUSH
 787: LD_STRING Donaldson
 789: PPUSH
 790: LD_EXP 22
 794: PPUSH
 795: CALL 4059 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 799: LD_EXP 5
 803: PPUSH
 804: LD_STRING Bobby
 806: PPUSH
 807: LD_EXP 22
 811: PPUSH
 812: CALL 4059 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 816: LD_EXP 6
 820: PPUSH
 821: LD_STRING Cyrus
 823: PPUSH
 824: LD_EXP 22
 828: PPUSH
 829: CALL 4059 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 833: LD_EXP 7
 837: PPUSH
 838: LD_STRING Denis
 840: PPUSH
 841: LD_EXP 22
 845: PPUSH
 846: CALL 4059 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 850: LD_EXP 9
 854: PPUSH
 855: LD_STRING Gladstone
 857: PPUSH
 858: LD_EXP 22
 862: PPUSH
 863: CALL 4059 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 867: LD_EXP 10
 871: PPUSH
 872: LD_STRING Houten
 874: PPUSH
 875: LD_EXP 22
 879: PPUSH
 880: CALL 4059 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 884: LD_EXP 11
 888: PPUSH
 889: LD_STRING Cornel
 891: PPUSH
 892: LD_EXP 22
 896: PPUSH
 897: CALL 4059 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 901: LD_EXP 12
 905: PPUSH
 906: LD_STRING Gary
 908: PPUSH
 909: LD_EXP 22
 913: PPUSH
 914: CALL 4059 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 918: LD_EXP 13
 922: PPUSH
 923: LD_STRING Frank
 925: PPUSH
 926: LD_EXP 22
 930: PPUSH
 931: CALL 4059 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 935: LD_EXP 14
 939: PPUSH
 940: LD_STRING Kikuchi
 942: PPUSH
 943: LD_EXP 22
 947: PPUSH
 948: CALL 4059 0 3
// SaveCargos ;
 952: CALL 969 0 0
// ChangeMap ( 13 , %_cont ) ;
 956: LD_INT 13
 958: PPUSH
 959: LD_STRING %_cont
 961: PPUSH
 962: CALL_OW 340
// end ;
 966: PPOPN 2
 968: END
// export function SaveCargos ; var i ; begin
 969: LD_INT 0
 971: PPUSH
 972: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 973: LD_ADDR_VAR 0 2
 977: PUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 22
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 33
 993: PUSH
 994: LD_INT 1
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 34
1003: PUSH
1004: LD_INT 12
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: PPUSH
1016: CALL_OW 70
1020: PUSH
1021: FOR_IN
1022: IFFALSE 1050
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
1024: LD_ADDR_EXP 20
1028: PUSH
1029: LD_EXP 20
1033: PUSH
1034: LD_VAR 0 2
1038: PPUSH
1039: CALL 4715 0 1
1043: PUSH
1044: EMPTY
1045: LIST
1046: ADD
1047: ST_TO_ADDR
1048: GO 1021
1050: POP
1051: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
1052: LD_EXP 20
1056: PPUSH
1057: LD_STRING 13_ResourcesInCargo13_1
1059: PPUSH
1060: CALL_OW 39
// end ;
1064: LD_VAR 0 1
1068: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
1069: LD_INT 0
1071: PPUSH
1072: PPUSH
1073: PPUSH
1074: PPUSH
1075: PPUSH
1076: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: LD_STRING 10_EpsilonEnv
1084: PPUSH
1085: EMPTY
1086: PPUSH
1087: CALL_OW 30
1091: ST_TO_ADDR
// if not tmp then
1092: LD_VAR 0 2
1096: NOT
1097: IFFALSE 1101
// exit ;
1099: GO 1244
// list := ListEnvironmentArea ( epsilonTerrain ) ;
1101: LD_ADDR_VAR 0 3
1105: PUSH
1106: LD_INT 2
1108: PPUSH
1109: CALL_OW 353
1113: ST_TO_ADDR
// if not list then
1114: LD_VAR 0 3
1118: NOT
1119: IFFALSE 1123
// exit ;
1121: GO 1244
// for i in list do
1123: LD_ADDR_VAR 0 4
1127: PUSH
1128: LD_VAR 0 3
1132: PUSH
1133: FOR_IN
1134: IFFALSE 1242
// begin exist := false ;
1136: LD_ADDR_VAR 0 6
1140: PUSH
1141: LD_INT 0
1143: ST_TO_ADDR
// for j in tmp do
1144: LD_ADDR_VAR 0 5
1148: PUSH
1149: LD_VAR 0 2
1153: PUSH
1154: FOR_IN
1155: IFFALSE 1209
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
1157: LD_VAR 0 4
1161: PUSH
1162: LD_INT 1
1164: ARRAY
1165: PUSH
1166: LD_VAR 0 5
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: EQUAL
1175: PUSH
1176: LD_VAR 0 4
1180: PUSH
1181: LD_INT 2
1183: ARRAY
1184: PUSH
1185: LD_VAR 0 5
1189: PUSH
1190: LD_INT 2
1192: ARRAY
1193: EQUAL
1194: AND
1195: IFFALSE 1207
// begin exist := true ;
1197: LD_ADDR_VAR 0 6
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// break ;
1205: GO 1209
// end ;
1207: GO 1154
1209: POP
1210: POP
// if not exist then
1211: LD_VAR 0 6
1215: NOT
1216: IFFALSE 1240
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1218: LD_VAR 0 4
1222: PUSH
1223: LD_INT 1
1225: ARRAY
1226: PPUSH
1227: LD_VAR 0 4
1231: PUSH
1232: LD_INT 2
1234: ARRAY
1235: PPUSH
1236: CALL_OW 347
// end ;
1240: GO 1133
1242: POP
1243: POP
// end ; end_of_file
1244: LD_VAR 0 1
1248: RET
// export function PrepareHeroes ; var i , others , tmp ; begin
1249: LD_INT 0
1251: PPUSH
1252: PPUSH
1253: PPUSH
1254: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
1255: LD_ADDR_VAR 0 4
1259: PUSH
1260: LD_INT 22
1262: PUSH
1263: LD_INT 1
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 2
1272: PUSH
1273: LD_INT 30
1275: PUSH
1276: LD_INT 0
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PUSH
1283: LD_INT 30
1285: PUSH
1286: LD_INT 1
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PPUSH
1302: CALL_OW 69
1306: ST_TO_ADDR
// uc_side = 1 ;
1307: LD_ADDR_OWVAR 20
1311: PUSH
1312: LD_INT 1
1314: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true ) ;
1315: LD_ADDR_EXP 1
1319: PUSH
1320: LD_STRING JMM
1322: PPUSH
1323: LD_INT 1
1325: PPUSH
1326: CALL 3874 0 2
1330: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , true ) ;
1331: LD_ADDR_EXP 3
1335: PUSH
1336: LD_STRING Lisa
1338: PPUSH
1339: LD_INT 1
1341: PPUSH
1342: CALL 3874 0 2
1346: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , true ) ;
1347: LD_ADDR_EXP 4
1351: PUSH
1352: LD_STRING Donaldson
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: CALL 3874 0 2
1362: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
1363: LD_ADDR_EXP 5
1367: PUSH
1368: LD_STRING Bobby
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: CALL 3874 0 2
1378: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
1379: LD_ADDR_EXP 6
1383: PUSH
1384: LD_STRING Cyrus
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 3874 0 2
1394: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true ) ;
1395: LD_ADDR_EXP 7
1399: PUSH
1400: LD_STRING Denis
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: CALL 3874 0 2
1410: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , true ) ;
1411: LD_ADDR_EXP 8
1415: PUSH
1416: LD_STRING Brown
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: CALL 3874 0 2
1426: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true ) ;
1427: LD_ADDR_EXP 9
1431: PUSH
1432: LD_STRING Gladstone
1434: PPUSH
1435: LD_INT 1
1437: PPUSH
1438: CALL 3874 0 2
1442: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true ) ;
1443: LD_ADDR_EXP 10
1447: PUSH
1448: LD_STRING Houten
1450: PPUSH
1451: LD_INT 1
1453: PPUSH
1454: CALL 3874 0 2
1458: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , true ) ;
1459: LD_ADDR_EXP 11
1463: PUSH
1464: LD_STRING Cornell
1466: PPUSH
1467: LD_INT 1
1469: PPUSH
1470: CALL 3874 0 2
1474: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true ) ;
1475: LD_ADDR_EXP 12
1479: PUSH
1480: LD_STRING Gary
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: CALL 3874 0 2
1490: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true ) ;
1491: LD_ADDR_EXP 13
1495: PUSH
1496: LD_STRING Frank
1498: PPUSH
1499: LD_INT 1
1501: PPUSH
1502: CALL 3874 0 2
1506: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true ) ;
1507: LD_ADDR_EXP 14
1511: PUSH
1512: LD_STRING Kikuchi
1514: PPUSH
1515: LD_INT 1
1517: PPUSH
1518: CALL 3874 0 2
1522: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
1523: LD_ADDR_EXP 15
1527: PUSH
1528: LD_STRING Stevens
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL 3874 0 2
1538: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1539: LD_ADDR_EXP 2
1543: PUSH
1544: LD_STRING Powell
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: CALL 3874 0 2
1554: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1555: LD_EXP 1
1559: PPUSH
1560: LD_VAR 0 4
1564: PUSH
1565: LD_INT 1
1567: ARRAY
1568: PPUSH
1569: CALL_OW 250
1573: PPUSH
1574: LD_VAR 0 4
1578: PUSH
1579: LD_INT 1
1581: ARRAY
1582: PPUSH
1583: CALL_OW 251
1587: PPUSH
1588: LD_INT 4
1590: PPUSH
1591: LD_INT 0
1593: PPUSH
1594: CALL_OW 50
// PlaceUnitXYR ( Stevens , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1598: LD_EXP 15
1602: PPUSH
1603: LD_VAR 0 4
1607: PUSH
1608: LD_INT 1
1610: ARRAY
1611: PPUSH
1612: CALL_OW 250
1616: PPUSH
1617: LD_VAR 0 4
1621: PUSH
1622: LD_INT 1
1624: ARRAY
1625: PPUSH
1626: CALL_OW 251
1630: PPUSH
1631: LD_INT 4
1633: PPUSH
1634: LD_INT 0
1636: PPUSH
1637: CALL_OW 50
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1641: LD_EXP 3
1645: PPUSH
1646: LD_VAR 0 4
1650: PUSH
1651: LD_INT 1
1653: ARRAY
1654: PPUSH
1655: CALL_OW 250
1659: PPUSH
1660: LD_VAR 0 4
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: PPUSH
1669: CALL_OW 251
1673: PPUSH
1674: LD_INT 35
1676: PPUSH
1677: LD_INT 0
1679: PPUSH
1680: CALL_OW 50
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1684: LD_EXP 4
1688: PPUSH
1689: LD_VAR 0 4
1693: PUSH
1694: LD_INT 1
1696: ARRAY
1697: PPUSH
1698: CALL_OW 250
1702: PPUSH
1703: LD_VAR 0 4
1707: PUSH
1708: LD_INT 1
1710: ARRAY
1711: PPUSH
1712: CALL_OW 251
1716: PPUSH
1717: LD_INT 35
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 50
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1727: LD_EXP 5
1731: PPUSH
1732: LD_VAR 0 4
1736: PUSH
1737: LD_INT 1
1739: ARRAY
1740: PPUSH
1741: CALL_OW 250
1745: PPUSH
1746: LD_VAR 0 4
1750: PUSH
1751: LD_INT 1
1753: ARRAY
1754: PPUSH
1755: CALL_OW 251
1759: PPUSH
1760: LD_INT 35
1762: PPUSH
1763: LD_INT 0
1765: PPUSH
1766: CALL_OW 50
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1770: LD_EXP 6
1774: PPUSH
1775: LD_VAR 0 4
1779: PUSH
1780: LD_INT 1
1782: ARRAY
1783: PPUSH
1784: CALL_OW 250
1788: PPUSH
1789: LD_VAR 0 4
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: CALL_OW 251
1802: PPUSH
1803: LD_INT 35
1805: PPUSH
1806: LD_INT 0
1808: PPUSH
1809: CALL_OW 50
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1813: LD_EXP 7
1817: PPUSH
1818: LD_VAR 0 4
1822: PUSH
1823: LD_INT 1
1825: ARRAY
1826: PPUSH
1827: CALL_OW 250
1831: PPUSH
1832: LD_VAR 0 4
1836: PUSH
1837: LD_INT 1
1839: ARRAY
1840: PPUSH
1841: CALL_OW 251
1845: PPUSH
1846: LD_INT 35
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL_OW 50
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1856: LD_EXP 8
1860: PPUSH
1861: LD_VAR 0 4
1865: PUSH
1866: LD_INT 1
1868: ARRAY
1869: PPUSH
1870: CALL_OW 250
1874: PPUSH
1875: LD_VAR 0 4
1879: PUSH
1880: LD_INT 1
1882: ARRAY
1883: PPUSH
1884: CALL_OW 251
1888: PPUSH
1889: LD_INT 35
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 50
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1899: LD_EXP 9
1903: PPUSH
1904: LD_VAR 0 4
1908: PUSH
1909: LD_INT 1
1911: ARRAY
1912: PPUSH
1913: CALL_OW 250
1917: PPUSH
1918: LD_VAR 0 4
1922: PUSH
1923: LD_INT 1
1925: ARRAY
1926: PPUSH
1927: CALL_OW 251
1931: PPUSH
1932: LD_INT 35
1934: PPUSH
1935: LD_INT 0
1937: PPUSH
1938: CALL_OW 50
// PlaceUnitXYR ( Houten , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1942: LD_EXP 10
1946: PPUSH
1947: LD_VAR 0 4
1951: PUSH
1952: LD_INT 1
1954: ARRAY
1955: PPUSH
1956: CALL_OW 250
1960: PPUSH
1961: LD_VAR 0 4
1965: PUSH
1966: LD_INT 1
1968: ARRAY
1969: PPUSH
1970: CALL_OW 251
1974: PPUSH
1975: LD_INT 35
1977: PPUSH
1978: LD_INT 0
1980: PPUSH
1981: CALL_OW 50
// PlaceUnitXYR ( Cornel , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1985: LD_EXP 11
1989: PPUSH
1990: LD_VAR 0 4
1994: PUSH
1995: LD_INT 1
1997: ARRAY
1998: PPUSH
1999: CALL_OW 250
2003: PPUSH
2004: LD_VAR 0 4
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: PPUSH
2013: CALL_OW 251
2017: PPUSH
2018: LD_INT 35
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 50
// PlaceUnitXYR ( Gary , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
2028: LD_EXP 12
2032: PPUSH
2033: LD_VAR 0 4
2037: PUSH
2038: LD_INT 1
2040: ARRAY
2041: PPUSH
2042: CALL_OW 250
2046: PPUSH
2047: LD_VAR 0 4
2051: PUSH
2052: LD_INT 1
2054: ARRAY
2055: PPUSH
2056: CALL_OW 251
2060: PPUSH
2061: LD_INT 35
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 50
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
2071: LD_EXP 13
2075: PPUSH
2076: LD_VAR 0 4
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: CALL_OW 250
2089: PPUSH
2090: LD_VAR 0 4
2094: PUSH
2095: LD_INT 1
2097: ARRAY
2098: PPUSH
2099: CALL_OW 251
2103: PPUSH
2104: LD_INT 35
2106: PPUSH
2107: LD_INT 0
2109: PPUSH
2110: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
2114: LD_EXP 14
2118: PPUSH
2119: LD_VAR 0 4
2123: PUSH
2124: LD_INT 1
2126: ARRAY
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 4
2137: PUSH
2138: LD_INT 1
2140: ARRAY
2141: PPUSH
2142: CALL_OW 251
2146: PPUSH
2147: LD_INT 35
2149: PPUSH
2150: LD_INT 0
2152: PPUSH
2153: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
2157: LD_VAR 0 4
2161: PUSH
2162: LD_INT 1
2164: ARRAY
2165: PPUSH
2166: LD_STRING epsilon
2168: PPUSH
2169: CALL_OW 500
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 1 , 3000 ) ;
2173: LD_VAR 0 4
2177: PUSH
2178: LD_INT 1
2180: ARRAY
2181: PPUSH
2182: CALL_OW 274
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: LD_INT 3000
2192: PPUSH
2193: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 2 , 500 ) ;
2197: LD_VAR 0 4
2201: PUSH
2202: LD_INT 1
2204: ARRAY
2205: PPUSH
2206: CALL_OW 274
2210: PPUSH
2211: LD_INT 2
2213: PPUSH
2214: LD_INT 500
2216: PPUSH
2217: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 3 , 200 ) ;
2221: LD_VAR 0 4
2225: PUSH
2226: LD_INT 1
2228: ARRAY
2229: PPUSH
2230: CALL_OW 274
2234: PPUSH
2235: LD_INT 3
2237: PPUSH
2238: LD_INT 200
2240: PPUSH
2241: CALL_OW 277
// SetClass ( JMM , 1 ) ;
2245: LD_EXP 1
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
2257: LD_ADDR_EXP 16
2261: PUSH
2262: LD_STRING 12_other_survivors
2264: PPUSH
2265: CALL_OW 31
2269: ST_TO_ADDR
// others11 = CreateCharacterSet ( 12_others ) ;
2270: LD_ADDR_EXP 17
2274: PUSH
2275: LD_STRING 12_others
2277: PPUSH
2278: CALL_OW 31
2282: ST_TO_ADDR
// for i in others11 do
2283: LD_ADDR_VAR 0 2
2287: PUSH
2288: LD_EXP 17
2292: PUSH
2293: FOR_IN
2294: IFFALSE 2341
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2296: LD_VAR 0 2
2300: PPUSH
2301: LD_VAR 0 4
2305: PUSH
2306: LD_INT 1
2308: ARRAY
2309: PPUSH
2310: CALL_OW 250
2314: PPUSH
2315: LD_VAR 0 4
2319: PUSH
2320: LD_INT 1
2322: ARRAY
2323: PPUSH
2324: CALL_OW 251
2328: PPUSH
2329: LD_INT 15
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 50
2339: GO 2293
2341: POP
2342: POP
// for i in others12 do
2343: LD_ADDR_VAR 0 2
2347: PUSH
2348: LD_EXP 16
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2401
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2356: LD_VAR 0 2
2360: PPUSH
2361: LD_VAR 0 4
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PPUSH
2370: CALL_OW 250
2374: PPUSH
2375: LD_VAR 0 4
2379: PUSH
2380: LD_INT 1
2382: ARRAY
2383: PPUSH
2384: CALL_OW 251
2388: PPUSH
2389: LD_INT 15
2391: PPUSH
2392: LD_INT 0
2394: PPUSH
2395: CALL_OW 50
2399: GO 2353
2401: POP
2402: POP
// end ;
2403: LD_VAR 0 1
2407: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2417: LD_INT 113
2419: PPUSH
2420: LD_INT 50
2422: PPUSH
2423: LD_INT 1
2425: PPUSH
2426: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2430: LD_INT 104
2432: PPUSH
2433: LD_INT 24
2435: PPUSH
2436: LD_INT 1
2438: PPUSH
2439: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2443: LD_INT 43
2445: PPUSH
2446: LD_INT 79
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2456: LD_INT 43
2458: PPUSH
2459: LD_INT 68
2461: PPUSH
2462: LD_INT 1
2464: PPUSH
2465: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2469: LD_INT 99
2471: PPUSH
2472: LD_INT 114
2474: PPUSH
2475: LD_INT 1
2477: PPUSH
2478: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2482: LD_INT 103
2484: PPUSH
2485: LD_INT 114
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2495: LD_INT 152
2497: PPUSH
2498: LD_INT 85
2500: PPUSH
2501: LD_INT 1
2503: PPUSH
2504: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2508: LD_INT 156
2510: PPUSH
2511: LD_INT 92
2513: PPUSH
2514: LD_INT 1
2516: PPUSH
2517: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2521: LD_ADDR_VAR 0 2
2525: PUSH
2526: LD_STRING 10_EpsilonBase
2528: PPUSH
2529: EMPTY
2530: PPUSH
2531: CALL_OW 30
2535: ST_TO_ADDR
// if not blist then
2536: LD_VAR 0 2
2540: NOT
2541: IFFALSE 2545
// exit ;
2543: GO 3516
// for i in blist do
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: LD_VAR 0 2
2554: PUSH
2555: FOR_IN
2556: IFFALSE 2596
// if i [ 1 ] = 0 or i [ 1 ] = 1 then
2558: LD_VAR 0 3
2562: PUSH
2563: LD_INT 1
2565: ARRAY
2566: PUSH
2567: LD_INT 0
2569: EQUAL
2570: PUSH
2571: LD_VAR 0 3
2575: PUSH
2576: LD_INT 1
2578: ARRAY
2579: PUSH
2580: LD_INT 1
2582: EQUAL
2583: OR
2584: IFFALSE 2594
// baseCorrect = 1 ;
2586: LD_ADDR_VAR 0 6
2590: PUSH
2591: LD_INT 1
2593: ST_TO_ADDR
2594: GO 2555
2596: POP
2597: POP
// if baseCorrect = 0 then
2598: LD_VAR 0 6
2602: PUSH
2603: LD_INT 0
2605: EQUAL
2606: IFFALSE 3311
// begin uc_side = 1 ;
2608: LD_ADDR_OWVAR 20
2612: PUSH
2613: LD_INT 1
2615: ST_TO_ADDR
// uc_nation = 1 ;
2616: LD_ADDR_OWVAR 21
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// bc_level = 10 ;
2624: LD_ADDR_OWVAR 43
2628: PUSH
2629: LD_INT 10
2631: ST_TO_ADDR
// bc_type = b_warehouse ;
2632: LD_ADDR_OWVAR 42
2636: PUSH
2637: LD_INT 1
2639: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2640: LD_INT 99
2642: PPUSH
2643: LD_INT 24
2645: PPUSH
2646: LD_INT 2
2648: PPUSH
2649: CALL_OW 47
// bc_type = b_bunker ;
2653: LD_ADDR_OWVAR 42
2657: PUSH
2658: LD_INT 32
2660: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2661: LD_ADDR_VAR 0 7
2665: PUSH
2666: LD_INT 124
2668: PPUSH
2669: LD_INT 42
2671: PPUSH
2672: LD_INT 4
2674: PPUSH
2675: CALL_OW 47
2679: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2680: LD_VAR 0 7
2684: PPUSH
2685: LD_INT 4
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: LD_INT 6
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 1
2701: PPUSH
2702: LD_INT 3
2704: PPUSH
2705: CALL_OW 12
2709: ARRAY
2710: PPUSH
2711: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2715: LD_ADDR_VAR 0 7
2719: PUSH
2720: LD_INT 111
2722: PPUSH
2723: LD_INT 16
2725: PPUSH
2726: LD_INT 4
2728: PPUSH
2729: CALL_OW 47
2733: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2734: LD_VAR 0 7
2738: PPUSH
2739: LD_INT 4
2741: PUSH
2742: LD_INT 5
2744: PUSH
2745: LD_INT 6
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 1
2755: PPUSH
2756: LD_INT 3
2758: PPUSH
2759: CALL_OW 12
2763: ARRAY
2764: PPUSH
2765: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2769: LD_ADDR_VAR 0 7
2773: PUSH
2774: LD_INT 113
2776: PPUSH
2777: LD_INT 21
2779: PPUSH
2780: LD_INT 4
2782: PPUSH
2783: CALL_OW 47
2787: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2788: LD_VAR 0 7
2792: PPUSH
2793: LD_INT 4
2795: PUSH
2796: LD_INT 5
2798: PUSH
2799: LD_INT 6
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 1
2809: PPUSH
2810: LD_INT 3
2812: PPUSH
2813: CALL_OW 12
2817: ARRAY
2818: PPUSH
2819: CALL_OW 431
// bc_type = 33 ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 33
2830: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2831: LD_ADDR_VAR 0 7
2835: PUSH
2836: LD_INT 95
2838: PPUSH
2839: LD_INT 41
2841: PPUSH
2842: LD_INT 1
2844: PPUSH
2845: CALL_OW 47
2849: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2850: LD_VAR 0 7
2854: PPUSH
2855: LD_INT 4
2857: PUSH
2858: LD_INT 5
2860: PUSH
2861: LD_INT 6
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: LD_INT 1
2871: PPUSH
2872: LD_INT 3
2874: PPUSH
2875: CALL_OW 12
2879: ARRAY
2880: PPUSH
2881: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2885: LD_ADDR_VAR 0 7
2889: PUSH
2890: LD_INT 97
2892: PPUSH
2893: LD_INT 48
2895: PPUSH
2896: LD_INT 1
2898: PPUSH
2899: CALL_OW 47
2903: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2904: LD_VAR 0 7
2908: PPUSH
2909: LD_INT 4
2911: PUSH
2912: LD_INT 5
2914: PUSH
2915: LD_INT 6
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 1
2925: PPUSH
2926: LD_INT 3
2928: PPUSH
2929: CALL_OW 12
2933: ARRAY
2934: PPUSH
2935: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2939: LD_ADDR_VAR 0 7
2943: PUSH
2944: LD_INT 86
2946: PPUSH
2947: LD_INT 19
2949: PPUSH
2950: LD_INT 1
2952: PPUSH
2953: CALL_OW 47
2957: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2958: LD_VAR 0 7
2962: PPUSH
2963: LD_INT 4
2965: PUSH
2966: LD_INT 5
2968: PUSH
2969: LD_INT 6
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: LIST
2976: PUSH
2977: LD_INT 1
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: CALL_OW 12
2987: ARRAY
2988: PPUSH
2989: CALL_OW 431
// bc_type = 30 ;
2993: LD_ADDR_OWVAR 42
2997: PUSH
2998: LD_INT 30
3000: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
3001: LD_INT 104
3003: PPUSH
3004: LD_INT 24
3006: PPUSH
3007: LD_INT 1
3009: PPUSH
3010: CALL_OW 47
// bc_type = 29 ;
3014: LD_ADDR_OWVAR 42
3018: PUSH
3019: LD_INT 29
3021: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
3022: LD_INT 113
3024: PPUSH
3025: LD_INT 50
3027: PPUSH
3028: LD_INT 3
3030: PPUSH
3031: CALL_OW 47
// bc_type = 27 ;
3035: LD_ADDR_OWVAR 42
3039: PUSH
3040: LD_INT 27
3042: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
3043: LD_INT 98
3045: PPUSH
3046: LD_INT 26
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
3056: LD_INT 95
3058: PPUSH
3059: LD_INT 23
3061: PPUSH
3062: LD_INT 3
3064: PPUSH
3065: CALL_OW 47
// bc_type = 28 ;
3069: LD_ADDR_OWVAR 42
3073: PUSH
3074: LD_INT 28
3076: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
3077: LD_INT 107
3079: PPUSH
3080: LD_INT 32
3082: PPUSH
3083: LD_INT 1
3085: PPUSH
3086: CALL_OW 47
// bc_type = 3 ;
3090: LD_ADDR_OWVAR 42
3094: PUSH
3095: LD_INT 3
3097: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
3098: LD_INT 106
3100: PPUSH
3101: LD_INT 42
3103: PPUSH
3104: LD_INT 0
3106: PPUSH
3107: CALL_OW 47
// bc_type = 16 ;
3111: LD_ADDR_OWVAR 42
3115: PUSH
3116: LD_INT 16
3118: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
3119: LD_INT 109
3121: PPUSH
3122: LD_INT 45
3124: PPUSH
3125: LD_INT 5
3127: PPUSH
3128: CALL_OW 47
// bc_type = 17 ;
3132: LD_ADDR_OWVAR 42
3136: PUSH
3137: LD_INT 17
3139: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
3140: LD_INT 106
3142: PPUSH
3143: LD_INT 46
3145: PPUSH
3146: LD_INT 0
3148: PPUSH
3149: CALL_OW 47
// bc_type = 19 ;
3153: LD_ADDR_OWVAR 42
3157: PUSH
3158: LD_INT 19
3160: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
3161: LD_INT 103
3163: PPUSH
3164: LD_INT 42
3166: PPUSH
3167: LD_INT 1
3169: PPUSH
3170: CALL_OW 47
// bc_type = 21 ;
3174: LD_ADDR_OWVAR 42
3178: PUSH
3179: LD_INT 21
3181: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
3182: LD_INT 110
3184: PPUSH
3185: LD_INT 42
3187: PPUSH
3188: LD_INT 4
3190: PPUSH
3191: CALL_OW 47
// bc_type = 5 ;
3195: LD_ADDR_OWVAR 42
3199: PUSH
3200: LD_INT 5
3202: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
3203: LD_INT 114
3205: PPUSH
3206: LD_INT 55
3208: PPUSH
3209: LD_INT 5
3211: PPUSH
3212: CALL_OW 47
// bc_type = 36 ;
3216: LD_ADDR_OWVAR 42
3220: PUSH
3221: LD_INT 36
3223: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
3224: LD_INT 96
3226: PPUSH
3227: LD_INT 28
3229: PPUSH
3230: LD_INT 2
3232: PPUSH
3233: CALL_OW 47
// bc_type = b_lab_full ;
3237: LD_ADDR_OWVAR 42
3241: PUSH
3242: LD_INT 8
3244: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3245: LD_ADDR_OWVAR 44
3249: PUSH
3250: LD_INT 15
3252: ST_TO_ADDR
// bc_kind2 = b_lab_siberium ;
3253: LD_ADDR_OWVAR 45
3257: PUSH
3258: LD_INT 11
3260: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
3261: LD_INT 116
3263: PPUSH
3264: LD_INT 38
3266: PPUSH
3267: LD_INT 4
3269: PPUSH
3270: CALL_OW 47
// bc_type = b_lab_full ;
3274: LD_ADDR_OWVAR 42
3278: PUSH
3279: LD_INT 8
3281: ST_TO_ADDR
// bc_kind1 = b_lab_weapon ;
3282: LD_ADDR_OWVAR 44
3286: PUSH
3287: LD_INT 10
3289: ST_TO_ADDR
// bc_kind2 = b_lab_computer ;
3290: LD_ADDR_OWVAR 45
3294: PUSH
3295: LD_INT 12
3297: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
3298: LD_INT 112
3300: PPUSH
3301: LD_INT 29
3303: PPUSH
3304: LD_INT 4
3306: PPUSH
3307: CALL_OW 47
// end ; if baseCorrect = 1 then
3311: LD_VAR 0 6
3315: PUSH
3316: LD_INT 1
3318: EQUAL
3319: IFFALSE 3516
// begin uc_side := 1 ;
3321: LD_ADDR_OWVAR 20
3325: PUSH
3326: LD_INT 1
3328: ST_TO_ADDR
// uc_nation := 1 ;
3329: LD_ADDR_OWVAR 21
3333: PUSH
3334: LD_INT 1
3336: ST_TO_ADDR
// for i in blist do
3337: LD_ADDR_VAR 0 3
3341: PUSH
3342: LD_VAR 0 2
3346: PUSH
3347: FOR_IN
3348: IFFALSE 3514
// begin bc_type := i [ 1 ] ;
3350: LD_ADDR_OWVAR 42
3354: PUSH
3355: LD_VAR 0 3
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3364: LD_ADDR_OWVAR 43
3368: PUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 5
3376: ARRAY
3377: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3378: LD_VAR 0 3
3382: PUSH
3383: LD_INT 1
3385: ARRAY
3386: PUSH
3387: LD_INT 7
3389: PUSH
3390: LD_INT 8
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: IN
3397: IFFALSE 3427
// begin bc_kind1 := i [ 7 ] ;
3399: LD_ADDR_OWVAR 44
3403: PUSH
3404: LD_VAR 0 3
3408: PUSH
3409: LD_INT 7
3411: ARRAY
3412: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3413: LD_ADDR_OWVAR 45
3417: PUSH
3418: LD_VAR 0 3
3422: PUSH
3423: LD_INT 8
3425: ARRAY
3426: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3427: LD_ADDR_VAR 0 4
3431: PUSH
3432: LD_VAR 0 3
3436: PUSH
3437: LD_INT 2
3439: ARRAY
3440: PPUSH
3441: LD_VAR 0 3
3445: PUSH
3446: LD_INT 3
3448: ARRAY
3449: PPUSH
3450: LD_VAR 0 3
3454: PUSH
3455: LD_INT 4
3457: ARRAY
3458: PPUSH
3459: CALL_OW 47
3463: ST_TO_ADDR
// if GetBType ( b ) = b_bunker or GetBType ( b ) = b_turret then
3464: LD_VAR 0 4
3468: PPUSH
3469: CALL_OW 266
3473: PUSH
3474: LD_INT 32
3476: EQUAL
3477: PUSH
3478: LD_VAR 0 4
3482: PPUSH
3483: CALL_OW 266
3487: PUSH
3488: LD_INT 33
3490: EQUAL
3491: OR
3492: IFFALSE 3512
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
3494: LD_VAR 0 4
3498: PPUSH
3499: LD_VAR 0 3
3503: PUSH
3504: LD_INT 7
3506: ARRAY
3507: PPUSH
3508: CALL_OW 431
// end ; end ;
3512: GO 3347
3514: POP
3515: POP
// end ; end ;
3516: LD_VAR 0 1
3520: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3521: LD_INT 0
3523: PPUSH
3524: PPUSH
3525: PPUSH
3526: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Stevens ] < 6 then
3527: LD_INT 22
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 21
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PPUSH
3551: CALL_OW 69
3555: PUSH
3556: LD_EXP 1
3560: PUSH
3561: LD_EXP 3
3565: PUSH
3566: LD_EXP 4
3570: PUSH
3571: LD_EXP 5
3575: PUSH
3576: LD_EXP 6
3580: PUSH
3581: LD_EXP 7
3585: PUSH
3586: LD_EXP 8
3590: PUSH
3591: LD_EXP 9
3595: PUSH
3596: LD_EXP 10
3600: PUSH
3601: LD_EXP 11
3605: PUSH
3606: LD_EXP 12
3610: PUSH
3611: LD_EXP 13
3615: PUSH
3616: LD_EXP 14
3620: PUSH
3621: LD_EXP 15
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: PUSH
3642: LD_INT 6
3644: LESS
3645: DIFF
3646: IFFALSE 3869
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
3648: LD_ADDR_VAR 0 4
3652: PUSH
3653: LD_INT 22
3655: PUSH
3656: LD_INT 1
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 2
3665: PUSH
3666: LD_INT 30
3668: PUSH
3669: LD_INT 0
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: PUSH
3676: LD_INT 30
3678: PUSH
3679: LD_INT 1
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PPUSH
3695: CALL_OW 69
3699: ST_TO_ADDR
// uc_side = 1 ;
3700: LD_ADDR_OWVAR 20
3704: PUSH
3705: LD_INT 1
3707: ST_TO_ADDR
// uc_nation = 1 ;
3708: LD_ADDR_OWVAR 21
3712: PUSH
3713: LD_INT 1
3715: ST_TO_ADDR
// for i = 1 to 6 do
3716: LD_ADDR_VAR 0 2
3720: PUSH
3721: DOUBLE
3722: LD_INT 1
3724: DEC
3725: ST_TO_ADDR
3726: LD_INT 6
3728: PUSH
3729: FOR_TO
3730: IFFALSE 3867
// begin hc_gallery =  ;
3732: LD_ADDR_OWVAR 33
3736: PUSH
3737: LD_STRING 
3739: ST_TO_ADDR
// hc_name =  ;
3740: LD_ADDR_OWVAR 26
3744: PUSH
3745: LD_STRING 
3747: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3748: LD_INT 0
3750: PPUSH
3751: LD_INT 1
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: LD_INT 3
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 1
3771: PPUSH
3772: LD_INT 4
3774: PPUSH
3775: CALL_OW 12
3779: ARRAY
3780: PPUSH
3781: LD_INT 5
3783: PPUSH
3784: LD_INT 8
3786: PPUSH
3787: CALL_OW 12
3791: PPUSH
3792: CALL_OW 380
// un = CreateHuman ;
3796: LD_ADDR_VAR 0 3
3800: PUSH
3801: CALL_OW 44
3805: ST_TO_ADDR
// randomsEpsilon = randomsEpsilon ^ un ;
3806: LD_ADDR_EXP 18
3810: PUSH
3811: LD_EXP 18
3815: PUSH
3816: LD_VAR 0 3
3820: ADD
3821: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3822: LD_VAR 0 3
3826: PPUSH
3827: LD_VAR 0 4
3831: PUSH
3832: LD_INT 1
3834: ARRAY
3835: PPUSH
3836: CALL_OW 250
3840: PPUSH
3841: LD_VAR 0 4
3845: PUSH
3846: LD_INT 1
3848: ARRAY
3849: PPUSH
3850: CALL_OW 251
3854: PPUSH
3855: LD_INT 15
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: CALL_OW 50
// end ;
3865: GO 3729
3867: POP
3868: POP
// end ; end ; end_of_file
3869: LD_VAR 0 1
3873: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3874: LD_INT 0
3876: PPUSH
3877: PPUSH
// if exist_mode then
3878: LD_VAR 0 2
3882: IFFALSE 4029
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
3884: LD_EXP 21
3888: PUSH
3889: LD_VAR 0 1
3893: STR
3894: PPUSH
3895: CALL_OW 28
3899: PUSH
3900: LD_INT 1
3902: EQUAL
3903: IFFALSE 3928
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3905: LD_ADDR_VAR 0 4
3909: PUSH
3910: LD_EXP 21
3914: PUSH
3915: LD_VAR 0 1
3919: STR
3920: PPUSH
3921: CALL_OW 34
3925: ST_TO_ADDR
// end else
3926: GO 4027
// begin if TestCharacters ( 11_ & ident ) = true then
3928: LD_STRING 11_
3930: PUSH
3931: LD_VAR 0 1
3935: STR
3936: PPUSH
3937: CALL_OW 28
3941: PUSH
3942: LD_INT 1
3944: EQUAL
3945: IFFALSE 3968
// begin unit := CreateCharacter ( 11_ & ident ) ;
3947: LD_ADDR_VAR 0 4
3951: PUSH
3952: LD_STRING 11_
3954: PUSH
3955: LD_VAR 0 1
3959: STR
3960: PPUSH
3961: CALL_OW 34
3965: ST_TO_ADDR
// end else
3966: GO 4027
// begin if TestCharacters ( 10c_ & ident ) = true then
3968: LD_STRING 10c_
3970: PUSH
3971: LD_VAR 0 1
3975: STR
3976: PPUSH
3977: CALL_OW 28
3981: PUSH
3982: LD_INT 1
3984: EQUAL
3985: IFFALSE 4008
// unit := CreateCharacter ( 10c_ & ident ) else
3987: LD_ADDR_VAR 0 4
3991: PUSH
3992: LD_STRING 10c_
3994: PUSH
3995: LD_VAR 0 1
3999: STR
4000: PPUSH
4001: CALL_OW 34
4005: ST_TO_ADDR
4006: GO 4027
// unit := CreateCharacter ( 10_ & ident ) ;
4008: LD_ADDR_VAR 0 4
4012: PUSH
4013: LD_STRING 10_
4015: PUSH
4016: LD_VAR 0 1
4020: STR
4021: PPUSH
4022: CALL_OW 34
4026: ST_TO_ADDR
// end ; end ; end else
4027: GO 4044
// begin unit := NewCharacter ( ident ) ;
4029: LD_ADDR_VAR 0 4
4033: PUSH
4034: LD_VAR 0 1
4038: PPUSH
4039: CALL_OW 25
4043: ST_TO_ADDR
// end ; result := unit ;
4044: LD_ADDR_VAR 0 3
4048: PUSH
4049: LD_VAR 0 4
4053: ST_TO_ADDR
// end ;
4054: LD_VAR 0 3
4058: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4059: LD_INT 0
4061: PPUSH
// if unit in selectedTab then
4062: LD_VAR 0 1
4066: PUSH
4067: LD_VAR 0 3
4071: IN
4072: IFFALSE 4094
// SaveCharacters ( unit , 13c_ & unitString ) else
4074: LD_VAR 0 1
4078: PPUSH
4079: LD_STRING 13c_
4081: PUSH
4082: LD_VAR 0 2
4086: STR
4087: PPUSH
4088: CALL_OW 38
4092: GO 4112
// SaveCharacters ( unit , 13s_ & unitString ) ;
4094: LD_VAR 0 1
4098: PPUSH
4099: LD_STRING 13s_
4101: PUSH
4102: LD_VAR 0 2
4106: STR
4107: PPUSH
4108: CALL_OW 38
// end ;
4112: LD_VAR 0 4
4116: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
4121: PPUSH
4122: PPUSH
// selected := [ ] ;
4123: LD_ADDR_EXP 22
4127: PUSH
4128: EMPTY
4129: ST_TO_ADDR
// othersSelect := [ ] ;
4130: LD_ADDR_EXP 23
4134: PUSH
4135: EMPTY
4136: ST_TO_ADDR
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4137: LD_ADDR_VAR 0 3
4141: PUSH
4142: LD_EXP 3
4146: PUSH
4147: LD_EXP 4
4151: PUSH
4152: LD_EXP 5
4156: PUSH
4157: LD_EXP 6
4161: PUSH
4162: LD_EXP 8
4166: PUSH
4167: LD_EXP 9
4171: PUSH
4172: LD_EXP 10
4176: PUSH
4177: LD_EXP 11
4181: PUSH
4182: LD_EXP 12
4186: PUSH
4187: LD_EXP 13
4191: PUSH
4192: LD_EXP 14
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: ST_TO_ADDR
// tmp = tmp ^ others11 ;
4210: LD_ADDR_VAR 0 3
4214: PUSH
4215: LD_VAR 0 3
4219: PUSH
4220: LD_EXP 17
4224: ADD
4225: ST_TO_ADDR
// tmp = tmp ^ others12 ;
4226: LD_ADDR_VAR 0 3
4230: PUSH
4231: LD_VAR 0 3
4235: PUSH
4236: LD_EXP 16
4240: ADD
4241: ST_TO_ADDR
// tmp = tmp ^ randomsEpsilon ;
4242: LD_ADDR_VAR 0 3
4246: PUSH
4247: LD_VAR 0 3
4251: PUSH
4252: LD_EXP 18
4256: ADD
4257: ST_TO_ADDR
// for i in tmp do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_VAR 0 3
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4308
// if GetClass ( i ) = 8 then
4271: LD_VAR 0 2
4275: PPUSH
4276: CALL_OW 257
4280: PUSH
4281: LD_INT 8
4283: EQUAL
4284: IFFALSE 4306
// SetClass ( i , rand ( 1 , 4 ) ) ;
4286: LD_VAR 0 2
4290: PPUSH
4291: LD_INT 1
4293: PPUSH
4294: LD_INT 4
4296: PPUSH
4297: CALL_OW 12
4301: PPUSH
4302: CALL_OW 336
4306: GO 4268
4308: POP
4309: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4310: LD_ADDR_EXP 22
4314: PUSH
4315: LD_STRING 1
4317: PPUSH
4318: LD_INT 6
4320: PPUSH
4321: LD_INT 6
4323: PPUSH
4324: LD_INT -5
4326: PUSH
4327: LD_EXP 1
4331: PUSH
4332: LD_EXP 15
4336: PUSH
4337: LD_INT -2
4339: PUSH
4340: LD_INT -3
4342: PUSH
4343: LD_INT -5
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: PUSH
4354: LD_VAR 0 3
4358: ADD
4359: PUSH
4360: LD_INT -6
4362: PUSH
4363: LD_INT -4
4365: PUSH
4366: LD_EXP 2
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: LIST
4375: ADD
4376: PPUSH
4377: LD_INT 1
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: LD_INT 2
4389: PUSH
4390: LD_INT 1
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 3
4399: PUSH
4400: LD_INT 0
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: LD_INT 4
4409: PUSH
4410: LD_INT 2
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 5
4419: PUSH
4420: LD_INT 0
4422: PUSH
4423: LD_INT 2
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PPUSH
4438: CALL_OW 42
4442: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4443: LD_ADDR_EXP 23
4447: PUSH
4448: LD_EXP 22
4452: PUSH
4453: LD_EXP 3
4457: PUSH
4458: LD_EXP 4
4462: PUSH
4463: LD_EXP 5
4467: PUSH
4468: LD_EXP 6
4472: PUSH
4473: LD_EXP 7
4477: PUSH
4478: LD_EXP 8
4482: PUSH
4483: LD_EXP 9
4487: PUSH
4488: LD_EXP 10
4492: PUSH
4493: LD_EXP 11
4497: PUSH
4498: LD_EXP 12
4502: PUSH
4503: LD_EXP 13
4507: PUSH
4508: LD_EXP 14
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: DIFF
4527: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4528: LD_ADDR_VAR 0 4
4532: PUSH
4533: LD_VAR 0 3
4537: PUSH
4538: LD_EXP 22
4542: DIFF
4543: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4544: LD_ADDR_VAR 0 4
4548: PUSH
4549: LD_VAR 0 4
4553: PUSH
4554: LD_EXP 3
4558: PUSH
4559: LD_EXP 4
4563: PUSH
4564: LD_EXP 5
4568: PUSH
4569: LD_EXP 6
4573: PUSH
4574: LD_EXP 7
4578: PUSH
4579: LD_EXP 8
4583: PUSH
4584: LD_EXP 9
4588: PUSH
4589: LD_EXP 10
4593: PUSH
4594: LD_EXP 11
4598: PUSH
4599: LD_EXP 12
4603: PUSH
4604: LD_EXP 13
4608: PUSH
4609: LD_EXP 14
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: DIFF
4628: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4629: LD_VAR 0 4
4633: PPUSH
4634: LD_STRING 13s_others
4636: PPUSH
4637: CALL_OW 38
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4641: LD_INT 22
4643: PUSH
4644: LD_INT 1
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 21
4653: PUSH
4654: LD_INT 1
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 69
4669: PPUSH
4670: LD_INT 4
4672: PPUSH
4673: CALL_OW 235
// SetSide ( selected , 1 ) ;
4677: LD_EXP 22
4681: PPUSH
4682: LD_INT 1
4684: PPUSH
4685: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
4689: LD_EXP 1
4693: PUSH
4694: LD_EXP 15
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: LD_INT 1
4705: PPUSH
4706: CALL_OW 235
// end ;
4710: LD_VAR 0 1
4714: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
4715: LD_INT 0
4717: PPUSH
4718: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
4719: LD_ADDR_VAR 0 2
4723: PUSH
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_INT 1
4731: PPUSH
4732: CALL_OW 289
4736: PUSH
4737: LD_VAR 0 1
4741: PPUSH
4742: LD_INT 2
4744: PPUSH
4745: CALL_OW 289
4749: PUSH
4750: LD_VAR 0 1
4754: PPUSH
4755: LD_INT 3
4757: PPUSH
4758: CALL_OW 289
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: ST_TO_ADDR
// end ; end_of_file
4768: LD_VAR 0 2
4772: RET
// on Command ( comandid ) do var i ;
4773: LD_INT 0
4775: PPUSH
// begin if comandid = 65 then
4776: LD_VAR 0 1
4780: PUSH
4781: LD_INT 65
4783: EQUAL
4784: IFFALSE 4825
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4786: LD_ADDR_VAR 0 2
4790: PUSH
4791: LD_INT 22
4793: PUSH
4794: LD_INT 1
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: EMPTY
4802: LIST
4803: PPUSH
4804: CALL_OW 69
4808: PUSH
4809: FOR_IN
4810: IFFALSE 4823
// ComStop ( i ) ;
4812: LD_VAR 0 2
4816: PPUSH
4817: CALL_OW 141
4821: GO 4809
4823: POP
4824: POP
// end ;
4825: PPOPN 2
4827: END
// on UnitDestroyed ( un ) do begin if un = JMM then
4828: LD_VAR 0 1
4832: PUSH
4833: LD_EXP 1
4837: EQUAL
4838: IFFALSE 4847
// YouLost ( JMM ) ;
4840: LD_STRING JMM
4842: PPUSH
4843: CALL_OW 104
// end ;
4847: PPOPN 1
4849: END
