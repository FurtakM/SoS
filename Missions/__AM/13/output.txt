// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 902 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2057 0 0
// PrepareHeroes ;
  82: CALL 1082 0 0
// PrepareRandoms ;
  86: CALL 3349 0 0
// Action ;
  90: CALL 4786 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 799
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_STRING Lisa
 588: PPUSH
 589: LD_EXP 22
 593: PPUSH
 594: CALL 3792 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 598: LD_EXP 8
 602: PPUSH
 603: LD_STRING Brown
 605: PPUSH
 606: LD_EXP 22
 610: PPUSH
 611: CALL 3792 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 615: LD_EXP 4
 619: PPUSH
 620: LD_STRING Donaldson
 622: PPUSH
 623: LD_EXP 22
 627: PPUSH
 628: CALL 3792 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 632: LD_EXP 5
 636: PPUSH
 637: LD_STRING Bobby
 639: PPUSH
 640: LD_EXP 22
 644: PPUSH
 645: CALL 3792 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 649: LD_EXP 6
 653: PPUSH
 654: LD_STRING Cyrus
 656: PPUSH
 657: LD_EXP 22
 661: PPUSH
 662: CALL 3792 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 666: LD_EXP 7
 670: PPUSH
 671: LD_STRING Denis
 673: PPUSH
 674: LD_EXP 22
 678: PPUSH
 679: CALL 3792 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 683: LD_EXP 9
 687: PPUSH
 688: LD_STRING Gladstone
 690: PPUSH
 691: LD_EXP 22
 695: PPUSH
 696: CALL 3792 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 700: LD_EXP 10
 704: PPUSH
 705: LD_STRING Houten
 707: PPUSH
 708: LD_EXP 22
 712: PPUSH
 713: CALL 3792 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 717: LD_EXP 11
 721: PPUSH
 722: LD_STRING Cornel
 724: PPUSH
 725: LD_EXP 22
 729: PPUSH
 730: CALL 3792 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 734: LD_EXP 12
 738: PPUSH
 739: LD_STRING Gary
 741: PPUSH
 742: LD_EXP 22
 746: PPUSH
 747: CALL 3792 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_STRING Frank
 758: PPUSH
 759: LD_EXP 22
 763: PPUSH
 764: CALL 3792 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 768: LD_EXP 14
 772: PPUSH
 773: LD_STRING Kikuchi
 775: PPUSH
 776: LD_EXP 22
 780: PPUSH
 781: CALL 3792 0 3
// SaveCargos ;
 785: CALL 802 0 0
// ChangeMap ( 13 , %_cont ) ;
 789: LD_INT 13
 791: PPUSH
 792: LD_STRING %_cont
 794: PPUSH
 795: CALL_OW 340
// end ;
 799: PPOPN 2
 801: END
// export function SaveCargos ; var i ; begin
 802: LD_INT 0
 804: PPUSH
 805: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 806: LD_ADDR_VAR 0 2
 810: PUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 22
 816: PUSH
 817: LD_INT 1
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 33
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 34
 836: PUSH
 837: LD_INT 12
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PPUSH
 849: CALL_OW 70
 853: PUSH
 854: FOR_IN
 855: IFFALSE 883
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 857: LD_ADDR_EXP 20
 861: PUSH
 862: LD_EXP 20
 866: PUSH
 867: LD_VAR 0 2
 871: PPUSH
 872: CALL 64656 0 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: ADD
 880: ST_TO_ADDR
 881: GO 854
 883: POP
 884: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 885: LD_EXP 20
 889: PPUSH
 890: LD_STRING 13_ResourcesInCargo13_1
 892: PPUSH
 893: CALL_OW 39
// end ;
 897: LD_VAR 0 1
 901: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 902: LD_INT 0
 904: PPUSH
 905: PPUSH
 906: PPUSH
 907: PPUSH
 908: PPUSH
 909: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_STRING 10_EpsilonEnv
 917: PPUSH
 918: EMPTY
 919: PPUSH
 920: CALL_OW 30
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 2
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1077
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: CALL_OW 353
 946: ST_TO_ADDR
// if not list then
 947: LD_VAR 0 3
 951: NOT
 952: IFFALSE 956
// exit ;
 954: GO 1077
// for i in list do
 956: LD_ADDR_VAR 0 4
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: FOR_IN
 967: IFFALSE 1075
// begin exist := false ;
 969: LD_ADDR_VAR 0 6
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// for j in tmp do
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: FOR_IN
 988: IFFALSE 1042
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 990: LD_VAR 0 4
 994: PUSH
 995: LD_INT 1
 997: ARRAY
 998: PUSH
 999: LD_VAR 0 5
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: EQUAL
1008: PUSH
1009: LD_VAR 0 4
1013: PUSH
1014: LD_INT 2
1016: ARRAY
1017: PUSH
1018: LD_VAR 0 5
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: EQUAL
1027: AND
1028: IFFALSE 1040
// begin exist := true ;
1030: LD_ADDR_VAR 0 6
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// break ;
1038: GO 1042
// end ;
1040: GO 987
1042: POP
1043: POP
// if not exist then
1044: LD_VAR 0 6
1048: NOT
1049: IFFALSE 1073
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1051: LD_VAR 0 4
1055: PUSH
1056: LD_INT 1
1058: ARRAY
1059: PPUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_INT 2
1067: ARRAY
1068: PPUSH
1069: CALL_OW 347
// end ;
1073: GO 966
1075: POP
1076: POP
// end ; end_of_file
1077: LD_VAR 0 1
1081: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1082: LD_INT 0
1084: PPUSH
1085: PPUSH
1086: PPUSH
1087: PPUSH
1088: PPUSH
1089: PPUSH
1090: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1091: LD_ADDR_VAR 0 4
1095: PUSH
1096: LD_INT 22
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 23
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: LD_INT 30
1121: PUSH
1122: LD_INT 0
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 30
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PPUSH
1149: CALL_OW 69
1153: ST_TO_ADDR
// if tmp then
1154: LD_VAR 0 4
1158: IFFALSE 1280
// begin x := GetX ( tmp [ 1 ] ) ;
1160: LD_ADDR_VAR 0 5
1164: PUSH
1165: LD_VAR 0 4
1169: PUSH
1170: LD_INT 1
1172: ARRAY
1173: PPUSH
1174: CALL_OW 250
1178: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1179: LD_ADDR_VAR 0 6
1183: PUSH
1184: LD_VAR 0 4
1188: PUSH
1189: LD_INT 1
1191: ARRAY
1192: PPUSH
1193: CALL_OW 251
1197: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1198: LD_VAR 0 4
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: LD_STRING epsilon
1209: PPUSH
1210: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1214: LD_ADDR_VAR 0 7
1218: PUSH
1219: LD_VAR 0 4
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: PPUSH
1228: CALL_OW 274
1232: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1233: LD_VAR 0 7
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_INT 3000
1243: PPUSH
1244: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1248: LD_VAR 0 7
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: LD_INT 500
1258: PPUSH
1259: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1263: LD_VAR 0 7
1267: PPUSH
1268: LD_INT 3
1270: PPUSH
1271: LD_INT 200
1273: PPUSH
1274: CALL_OW 277
// end else
1278: GO 1296
// begin x := 104 ;
1280: LD_ADDR_VAR 0 5
1284: PUSH
1285: LD_INT 104
1287: ST_TO_ADDR
// y := 32 ;
1288: LD_ADDR_VAR 0 6
1292: PUSH
1293: LD_INT 32
1295: ST_TO_ADDR
// end ; uc_side := 1 ;
1296: LD_ADDR_OWVAR 20
1300: PUSH
1301: LD_INT 1
1303: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1304: LD_ADDR_EXP 1
1308: PUSH
1309: LD_STRING JMM
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: CALL 3619 0 2
1319: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1320: LD_ADDR_EXP 3
1324: PUSH
1325: LD_STRING Lisa
1327: PPUSH
1328: LD_INT 1
1330: PPUSH
1331: CALL 3619 0 2
1335: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1336: LD_ADDR_EXP 4
1340: PUSH
1341: LD_STRING Donaldson
1343: PPUSH
1344: LD_INT 1
1346: PPUSH
1347: CALL 3619 0 2
1351: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1352: LD_ADDR_EXP 5
1356: PUSH
1357: LD_STRING Bobby
1359: PPUSH
1360: LD_INT 1
1362: PPUSH
1363: CALL 3619 0 2
1367: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1368: LD_ADDR_EXP 6
1372: PUSH
1373: LD_STRING Cyrus
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 3619 0 2
1383: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1384: LD_ADDR_EXP 7
1388: PUSH
1389: LD_STRING Denis
1391: PPUSH
1392: LD_INT 1
1394: PPUSH
1395: CALL 3619 0 2
1399: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1400: LD_ADDR_EXP 8
1404: PUSH
1405: LD_STRING Brown
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: CALL 3619 0 2
1415: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1416: LD_ADDR_EXP 9
1420: PUSH
1421: LD_STRING Gladstone
1423: PPUSH
1424: LD_INT 1
1426: PPUSH
1427: CALL 3619 0 2
1431: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1432: LD_ADDR_EXP 10
1436: PUSH
1437: LD_STRING Houten
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL 3619 0 2
1447: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1448: LD_ADDR_EXP 11
1452: PUSH
1453: LD_STRING Cornell
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: CALL 3619 0 2
1463: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1464: LD_ADDR_EXP 12
1468: PUSH
1469: LD_STRING Gary
1471: PPUSH
1472: LD_INT 1
1474: PPUSH
1475: CALL 3619 0 2
1479: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1480: LD_ADDR_EXP 13
1484: PUSH
1485: LD_STRING Frank
1487: PPUSH
1488: LD_INT 1
1490: PPUSH
1491: CALL 3619 0 2
1495: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1496: LD_ADDR_EXP 14
1500: PUSH
1501: LD_STRING Kikuchi
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: CALL 3619 0 2
1511: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1512: LD_ADDR_EXP 15
1516: PUSH
1517: LD_STRING Stevens
1519: PPUSH
1520: LD_INT 0
1522: PPUSH
1523: CALL 3619 0 2
1527: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1528: LD_ADDR_EXP 2
1532: PUSH
1533: LD_STRING Powell
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL 3619 0 2
1543: ST_TO_ADDR
// PlaceUnitXYR ( JMM , x , y , 4 , false ) ;
1544: LD_EXP 1
1548: PPUSH
1549: LD_VAR 0 5
1553: PPUSH
1554: LD_VAR 0 6
1558: PPUSH
1559: LD_INT 4
1561: PPUSH
1562: LD_INT 0
1564: PPUSH
1565: CALL_OW 50
// PlaceUnitXYR ( Stevens , x , y , 4 , false ) ;
1569: LD_EXP 15
1573: PPUSH
1574: LD_VAR 0 5
1578: PPUSH
1579: LD_VAR 0 6
1583: PPUSH
1584: LD_INT 4
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL_OW 50
// PlaceUnitXYR ( Lisa , x , y , 35 , false ) ;
1594: LD_EXP 3
1598: PPUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: LD_VAR 0 6
1608: PPUSH
1609: LD_INT 35
1611: PPUSH
1612: LD_INT 0
1614: PPUSH
1615: CALL_OW 50
// PlaceUnitXYR ( Donaldson , x , y , 35 , false ) ;
1619: LD_EXP 4
1623: PPUSH
1624: LD_VAR 0 5
1628: PPUSH
1629: LD_VAR 0 6
1633: PPUSH
1634: LD_INT 35
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL_OW 50
// PlaceUnitXYR ( Bobby , x , y , 35 , false ) ;
1644: LD_EXP 5
1648: PPUSH
1649: LD_VAR 0 5
1653: PPUSH
1654: LD_VAR 0 6
1658: PPUSH
1659: LD_INT 35
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 50
// PlaceUnitXYR ( Cyrus , x , y , 35 , false ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_VAR 0 5
1678: PPUSH
1679: LD_VAR 0 6
1683: PPUSH
1684: LD_INT 35
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: CALL_OW 50
// PlaceUnitXYR ( Denis , x , y , 35 , false ) ;
1694: LD_EXP 7
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: LD_VAR 0 6
1708: PPUSH
1709: LD_INT 35
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL_OW 50
// PlaceUnitXYR ( Brown , x , y , 35 , false ) ;
1719: LD_EXP 8
1723: PPUSH
1724: LD_VAR 0 5
1728: PPUSH
1729: LD_VAR 0 6
1733: PPUSH
1734: LD_INT 35
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: CALL_OW 50
// PlaceUnitXYR ( Gladstone , x , y , 35 , false ) ;
1744: LD_EXP 9
1748: PPUSH
1749: LD_VAR 0 5
1753: PPUSH
1754: LD_VAR 0 6
1758: PPUSH
1759: LD_INT 35
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL_OW 50
// PlaceUnitXYR ( Houten , x , y , 35 , false ) ;
1769: LD_EXP 10
1773: PPUSH
1774: LD_VAR 0 5
1778: PPUSH
1779: LD_VAR 0 6
1783: PPUSH
1784: LD_INT 35
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 50
// PlaceUnitXYR ( Cornel , x , y , 35 , false ) ;
1794: LD_EXP 11
1798: PPUSH
1799: LD_VAR 0 5
1803: PPUSH
1804: LD_VAR 0 6
1808: PPUSH
1809: LD_INT 35
1811: PPUSH
1812: LD_INT 0
1814: PPUSH
1815: CALL_OW 50
// PlaceUnitXYR ( Gary , x , y , 35 , false ) ;
1819: LD_EXP 12
1823: PPUSH
1824: LD_VAR 0 5
1828: PPUSH
1829: LD_VAR 0 6
1833: PPUSH
1834: LD_INT 35
1836: PPUSH
1837: LD_INT 0
1839: PPUSH
1840: CALL_OW 50
// PlaceUnitXYR ( Frank , x , y , 35 , false ) ;
1844: LD_EXP 13
1848: PPUSH
1849: LD_VAR 0 5
1853: PPUSH
1854: LD_VAR 0 6
1858: PPUSH
1859: LD_INT 35
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , x , y , 35 , false ) ;
1869: LD_EXP 14
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: LD_VAR 0 6
1883: PPUSH
1884: LD_INT 35
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL_OW 50
// SetClass ( JMM , 1 ) ;
1894: LD_EXP 1
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1906: LD_ADDR_EXP 16
1910: PUSH
1911: LD_STRING 12_other_survivors
1913: PPUSH
1914: CALL_OW 31
1918: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1919: LD_ADDR_EXP 17
1923: PUSH
1924: LD_STRING 12_others
1926: PPUSH
1927: CALL_OW 31
1931: ST_TO_ADDR
// for i in others11 do
1932: LD_ADDR_VAR 0 2
1936: PUSH
1937: LD_EXP 17
1941: PUSH
1942: FOR_IN
1943: IFFALSE 1990
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1945: LD_VAR 0 2
1949: PPUSH
1950: LD_VAR 0 4
1954: PUSH
1955: LD_INT 1
1957: ARRAY
1958: PPUSH
1959: CALL_OW 250
1963: PPUSH
1964: LD_VAR 0 4
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 251
1977: PPUSH
1978: LD_INT 15
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL_OW 50
1988: GO 1942
1990: POP
1991: POP
// for i in others12 do
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_EXP 16
2001: PUSH
2002: FOR_IN
2003: IFFALSE 2050
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2005: LD_VAR 0 2
2009: PPUSH
2010: LD_VAR 0 4
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PPUSH
2019: CALL_OW 250
2023: PPUSH
2024: LD_VAR 0 4
2028: PUSH
2029: LD_INT 1
2031: ARRAY
2032: PPUSH
2033: CALL_OW 251
2037: PPUSH
2038: LD_INT 15
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL_OW 50
2048: GO 2002
2050: POP
2051: POP
// end ;
2052: LD_VAR 0 1
2056: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2057: LD_INT 0
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
2063: PPUSH
2064: PPUSH
2065: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2066: LD_INT 113
2068: PPUSH
2069: LD_INT 50
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2079: LD_INT 104
2081: PPUSH
2082: LD_INT 24
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2092: LD_INT 43
2094: PPUSH
2095: LD_INT 79
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2105: LD_INT 43
2107: PPUSH
2108: LD_INT 68
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2118: LD_INT 99
2120: PPUSH
2121: LD_INT 114
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2131: LD_INT 103
2133: PPUSH
2134: LD_INT 114
2136: PPUSH
2137: LD_INT 1
2139: PPUSH
2140: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2144: LD_INT 152
2146: PPUSH
2147: LD_INT 85
2149: PPUSH
2150: LD_INT 1
2152: PPUSH
2153: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2157: LD_INT 156
2159: PPUSH
2160: LD_INT 92
2162: PPUSH
2163: LD_INT 1
2165: PPUSH
2166: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2170: LD_ADDR_VAR 0 2
2174: PUSH
2175: LD_STRING 10_EpsilonBase
2177: PPUSH
2178: EMPTY
2179: PPUSH
2180: CALL_OW 30
2184: ST_TO_ADDR
// if not blist then
2185: LD_VAR 0 2
2189: NOT
2190: IFFALSE 2194
// exit ;
2192: GO 3344
// for i in blist do
2194: LD_ADDR_VAR 0 3
2198: PUSH
2199: LD_VAR 0 2
2203: PUSH
2204: FOR_IN
2205: IFFALSE 2247
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2207: LD_VAR 0 3
2211: PUSH
2212: LD_INT 1
2214: ARRAY
2215: PUSH
2216: LD_INT 0
2218: EQUAL
2219: PUSH
2220: LD_VAR 0 3
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PUSH
2229: LD_INT 1
2231: EQUAL
2232: OR
2233: IFFALSE 2245
// begin baseCorrect := 1 ;
2235: LD_ADDR_VAR 0 6
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// break ;
2243: GO 2247
// end ;
2245: GO 2204
2247: POP
2248: POP
// if baseCorrect = 0 then
2249: LD_VAR 0 6
2253: PUSH
2254: LD_INT 0
2256: EQUAL
2257: IFFALSE 2964
// begin uc_side := 1 ;
2259: LD_ADDR_OWVAR 20
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// uc_nation := 1 ;
2267: LD_ADDR_OWVAR 21
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// bc_level := 10 ;
2275: LD_ADDR_OWVAR 43
2279: PUSH
2280: LD_INT 10
2282: ST_TO_ADDR
// bc_type := b_warehouse ;
2283: LD_ADDR_OWVAR 42
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2291: LD_INT 99
2293: PPUSH
2294: LD_INT 24
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: CALL_OW 47
// bc_type := b_bunker ;
2304: LD_ADDR_OWVAR 42
2308: PUSH
2309: LD_INT 32
2311: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2312: LD_ADDR_VAR 0 7
2316: PUSH
2317: LD_INT 124
2319: PPUSH
2320: LD_INT 42
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: CALL_OW 47
2330: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2331: LD_VAR 0 7
2335: PPUSH
2336: LD_INT 4
2338: PUSH
2339: LD_INT 5
2341: PUSH
2342: LD_INT 6
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 3
2355: PPUSH
2356: CALL_OW 12
2360: ARRAY
2361: PPUSH
2362: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2366: LD_ADDR_VAR 0 7
2370: PUSH
2371: LD_INT 111
2373: PPUSH
2374: LD_INT 16
2376: PPUSH
2377: LD_INT 4
2379: PPUSH
2380: CALL_OW 47
2384: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2385: LD_VAR 0 7
2389: PPUSH
2390: LD_INT 4
2392: PUSH
2393: LD_INT 5
2395: PUSH
2396: LD_INT 6
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 1
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 12
2414: ARRAY
2415: PPUSH
2416: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2420: LD_ADDR_VAR 0 7
2424: PUSH
2425: LD_INT 113
2427: PPUSH
2428: LD_INT 21
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 47
2438: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2439: LD_VAR 0 7
2443: PPUSH
2444: LD_INT 4
2446: PUSH
2447: LD_INT 5
2449: PUSH
2450: LD_INT 6
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 3
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: PPUSH
2470: CALL_OW 431
// bc_type := 33 ;
2474: LD_ADDR_OWVAR 42
2478: PUSH
2479: LD_INT 33
2481: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2482: LD_ADDR_VAR 0 7
2486: PUSH
2487: LD_INT 95
2489: PPUSH
2490: LD_INT 41
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: CALL_OW 47
2500: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2501: LD_VAR 0 7
2505: PPUSH
2506: LD_INT 4
2508: PUSH
2509: LD_INT 5
2511: PUSH
2512: LD_INT 6
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 1
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: CALL_OW 12
2530: ARRAY
2531: PPUSH
2532: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2536: LD_ADDR_VAR 0 7
2540: PUSH
2541: LD_INT 97
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 47
2554: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2555: LD_VAR 0 7
2559: PPUSH
2560: LD_INT 4
2562: PUSH
2563: LD_INT 5
2565: PUSH
2566: LD_INT 6
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 3
2579: PPUSH
2580: CALL_OW 12
2584: ARRAY
2585: PPUSH
2586: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2590: LD_ADDR_VAR 0 7
2594: PUSH
2595: LD_INT 86
2597: PPUSH
2598: LD_INT 19
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: CALL_OW 47
2608: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2609: LD_VAR 0 7
2613: PPUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 5
2619: PUSH
2620: LD_INT 6
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 3
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: PPUSH
2640: CALL_OW 431
// bc_type := 30 ;
2644: LD_ADDR_OWVAR 42
2648: PUSH
2649: LD_INT 30
2651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2652: LD_INT 104
2654: PPUSH
2655: LD_INT 24
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: CALL_OW 47
// bc_type := 29 ;
2665: LD_ADDR_OWVAR 42
2669: PUSH
2670: LD_INT 29
2672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2673: LD_INT 113
2675: PPUSH
2676: LD_INT 50
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: CALL_OW 47
// bc_type := 27 ;
2686: LD_ADDR_OWVAR 42
2690: PUSH
2691: LD_INT 27
2693: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2694: LD_INT 98
2696: PPUSH
2697: LD_INT 26
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2707: LD_INT 95
2709: PPUSH
2710: LD_INT 23
2712: PPUSH
2713: LD_INT 3
2715: PPUSH
2716: CALL_OW 47
// bc_type := 28 ;
2720: LD_ADDR_OWVAR 42
2724: PUSH
2725: LD_INT 28
2727: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2728: LD_INT 107
2730: PPUSH
2731: LD_INT 32
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 47
// bc_type := 3 ;
2741: LD_ADDR_OWVAR 42
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2749: LD_INT 106
2751: PPUSH
2752: LD_INT 42
2754: PPUSH
2755: LD_INT 0
2757: PPUSH
2758: CALL_OW 47
// bc_type := 16 ;
2762: LD_ADDR_OWVAR 42
2766: PUSH
2767: LD_INT 16
2769: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2770: LD_INT 109
2772: PPUSH
2773: LD_INT 45
2775: PPUSH
2776: LD_INT 5
2778: PPUSH
2779: CALL_OW 47
// bc_type := 17 ;
2783: LD_ADDR_OWVAR 42
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2791: LD_INT 106
2793: PPUSH
2794: LD_INT 46
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: CALL_OW 47
// bc_type := 19 ;
2804: LD_ADDR_OWVAR 42
2808: PUSH
2809: LD_INT 19
2811: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2812: LD_INT 103
2814: PPUSH
2815: LD_INT 42
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 47
// bc_type := 21 ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 21
2832: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2833: LD_INT 110
2835: PPUSH
2836: LD_INT 42
2838: PPUSH
2839: LD_INT 4
2841: PPUSH
2842: CALL_OW 47
// bc_type := 5 ;
2846: LD_ADDR_OWVAR 42
2850: PUSH
2851: LD_INT 5
2853: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2854: LD_INT 114
2856: PPUSH
2857: LD_INT 55
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 47
// bc_type := 36 ;
2867: LD_ADDR_OWVAR 42
2871: PUSH
2872: LD_INT 36
2874: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2875: LD_INT 96
2877: PPUSH
2878: LD_INT 28
2880: PPUSH
2881: LD_INT 2
2883: PPUSH
2884: CALL_OW 47
// bc_type := b_lab_full ;
2888: LD_ADDR_OWVAR 42
2892: PUSH
2893: LD_INT 8
2895: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2896: LD_ADDR_OWVAR 44
2900: PUSH
2901: LD_INT 15
2903: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2904: LD_ADDR_OWVAR 45
2908: PUSH
2909: LD_INT 11
2911: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2912: LD_INT 116
2914: PPUSH
2915: LD_INT 38
2917: PPUSH
2918: LD_INT 4
2920: PPUSH
2921: CALL_OW 47
// bc_type := b_lab_full ;
2925: LD_ADDR_OWVAR 42
2929: PUSH
2930: LD_INT 8
2932: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2933: LD_ADDR_OWVAR 44
2937: PUSH
2938: LD_INT 10
2940: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2941: LD_ADDR_OWVAR 45
2945: PUSH
2946: LD_INT 12
2948: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2949: LD_INT 112
2951: PPUSH
2952: LD_INT 29
2954: PPUSH
2955: LD_INT 4
2957: PPUSH
2958: CALL_OW 47
// end else
2962: GO 3165
// begin uc_side := 1 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 1
2971: ST_TO_ADDR
// for i in blist do
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: LD_VAR 0 2
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3163
// begin uc_nation := i [ 6 ] ;
2985: LD_ADDR_OWVAR 21
2989: PUSH
2990: LD_VAR 0 3
2994: PUSH
2995: LD_INT 6
2997: ARRAY
2998: ST_TO_ADDR
// bc_type := i [ 1 ] ;
2999: LD_ADDR_OWVAR 42
3003: PUSH
3004: LD_VAR 0 3
3008: PUSH
3009: LD_INT 1
3011: ARRAY
3012: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3013: LD_ADDR_OWVAR 43
3017: PUSH
3018: LD_VAR 0 3
3022: PUSH
3023: LD_INT 5
3025: ARRAY
3026: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3027: LD_VAR 0 3
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: PUSH
3036: LD_INT 7
3038: PUSH
3039: LD_INT 8
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: IN
3046: IFFALSE 3076
// begin bc_kind1 := i [ 7 ] ;
3048: LD_ADDR_OWVAR 44
3052: PUSH
3053: LD_VAR 0 3
3057: PUSH
3058: LD_INT 7
3060: ARRAY
3061: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3062: LD_ADDR_OWVAR 45
3066: PUSH
3067: LD_VAR 0 3
3071: PUSH
3072: LD_INT 8
3074: ARRAY
3075: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_VAR 0 3
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: LD_VAR 0 3
3094: PUSH
3095: LD_INT 3
3097: ARRAY
3098: PPUSH
3099: LD_VAR 0 3
3103: PUSH
3104: LD_INT 4
3106: ARRAY
3107: PPUSH
3108: CALL_OW 47
3112: ST_TO_ADDR
// if GetBType ( b ) = b_bunker or GetBType ( b ) = b_turret then
3113: LD_VAR 0 4
3117: PPUSH
3118: CALL_OW 266
3122: PUSH
3123: LD_INT 32
3125: EQUAL
3126: PUSH
3127: LD_VAR 0 4
3131: PPUSH
3132: CALL_OW 266
3136: PUSH
3137: LD_INT 33
3139: EQUAL
3140: OR
3141: IFFALSE 3161
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3143: LD_VAR 0 4
3147: PPUSH
3148: LD_VAR 0 3
3152: PUSH
3153: LD_INT 7
3155: ARRAY
3156: PPUSH
3157: CALL_OW 431
// end ;
3161: GO 2982
3163: POP
3164: POP
// end ; uc_side := 1 ;
3165: LD_ADDR_OWVAR 20
3169: PUSH
3170: LD_INT 1
3172: ST_TO_ADDR
// uc_nation := 1 ;
3173: LD_ADDR_OWVAR 21
3177: PUSH
3178: LD_INT 1
3180: ST_TO_ADDR
// for i := 1 to 8 do
3181: LD_ADDR_VAR 0 3
3185: PUSH
3186: DOUBLE
3187: LD_INT 1
3189: DEC
3190: ST_TO_ADDR
3191: LD_INT 8
3193: PUSH
3194: FOR_TO
3195: IFFALSE 3342
// begin vc_chassis := [ us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3197: LD_ADDR_OWVAR 37
3201: PUSH
3202: LD_INT 5
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 4
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 1
3218: PPUSH
3219: LD_INT 3
3221: PPUSH
3222: CALL_OW 12
3226: ARRAY
3227: ST_TO_ADDR
// vc_engine := engine_siberite ;
3228: LD_ADDR_OWVAR 39
3232: PUSH
3233: LD_INT 3
3235: ST_TO_ADDR
// vc_control := control_manual ;
3236: LD_ADDR_OWVAR 38
3240: PUSH
3241: LD_INT 1
3243: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_double_gun , us_laser ] [ i mod 6 + 1 ] ;
3244: LD_ADDR_OWVAR 40
3248: PUSH
3249: LD_INT 7
3251: PUSH
3252: LD_INT 9
3254: PUSH
3255: LD_INT 12
3257: PUSH
3258: LD_INT 13
3260: PUSH
3261: LD_INT 5
3263: PUSH
3264: LD_INT 9
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: LD_VAR 0 3
3279: PUSH
3280: LD_INT 6
3282: MOD
3283: PUSH
3284: LD_INT 1
3286: PLUS
3287: ARRAY
3288: ST_TO_ADDR
// un := CreateVehicle ;
3289: LD_ADDR_VAR 0 5
3293: PUSH
3294: CALL_OW 45
3298: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3299: LD_VAR 0 5
3303: PPUSH
3304: LD_INT 0
3306: PPUSH
3307: LD_INT 5
3309: PPUSH
3310: CALL_OW 12
3314: PPUSH
3315: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3319: LD_VAR 0 5
3323: PPUSH
3324: LD_INT 78
3326: PPUSH
3327: LD_INT 31
3329: PPUSH
3330: LD_INT 8
3332: PPUSH
3333: LD_INT 0
3335: PPUSH
3336: CALL_OW 50
// end ;
3340: GO 3194
3342: POP
3343: POP
// end ;
3344: LD_VAR 0 1
3348: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3349: LD_INT 0
3351: PPUSH
3352: PPUSH
3353: PPUSH
3354: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3355: LD_INT 22
3357: PUSH
3358: LD_INT 1
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PUSH
3365: LD_INT 21
3367: PUSH
3368: LD_INT 1
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PPUSH
3379: CALL_OW 69
3383: PUSH
3384: LD_INT 6
3386: LESS
3387: IFFALSE 3614
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
3389: LD_ADDR_VAR 0 4
3393: PUSH
3394: LD_INT 22
3396: PUSH
3397: LD_INT 1
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 2
3406: PUSH
3407: LD_INT 30
3409: PUSH
3410: LD_INT 0
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PUSH
3417: LD_INT 30
3419: PUSH
3420: LD_INT 1
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PPUSH
3436: CALL_OW 69
3440: ST_TO_ADDR
// uc_side := 1 ;
3441: LD_ADDR_OWVAR 20
3445: PUSH
3446: LD_INT 1
3448: ST_TO_ADDR
// uc_nation := 1 ;
3449: LD_ADDR_OWVAR 21
3453: PUSH
3454: LD_INT 1
3456: ST_TO_ADDR
// for i := 1 to 6 do
3457: LD_ADDR_VAR 0 2
3461: PUSH
3462: DOUBLE
3463: LD_INT 1
3465: DEC
3466: ST_TO_ADDR
3467: LD_INT 6
3469: PUSH
3470: FOR_TO
3471: IFFALSE 3612
// begin hc_gallery :=  ;
3473: LD_ADDR_OWVAR 33
3477: PUSH
3478: LD_STRING 
3480: ST_TO_ADDR
// hc_name :=  ;
3481: LD_ADDR_OWVAR 26
3485: PUSH
3486: LD_STRING 
3488: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3489: LD_INT 0
3491: PPUSH
3492: LD_INT 1
3494: PUSH
3495: LD_INT 2
3497: PUSH
3498: LD_INT 3
3500: PUSH
3501: LD_INT 4
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 1
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: CALL_OW 12
3520: ARRAY
3521: PPUSH
3522: LD_INT 5
3524: PPUSH
3525: LD_INT 8
3527: PPUSH
3528: CALL_OW 12
3532: PPUSH
3533: CALL_OW 380
// un := CreateHuman ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 44
3546: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3547: LD_ADDR_EXP 18
3551: PUSH
3552: LD_EXP 18
3556: PPUSH
3557: LD_VAR 0 3
3561: PPUSH
3562: CALL 61112 0 2
3566: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3567: LD_VAR 0 3
3571: PPUSH
3572: LD_VAR 0 4
3576: PUSH
3577: LD_INT 1
3579: ARRAY
3580: PPUSH
3581: CALL_OW 250
3585: PPUSH
3586: LD_VAR 0 4
3590: PUSH
3591: LD_INT 1
3593: ARRAY
3594: PPUSH
3595: CALL_OW 251
3599: PPUSH
3600: LD_INT 15
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL_OW 50
// end ;
3610: GO 3470
3612: POP
3613: POP
// end ; end ; end_of_file
3614: LD_VAR 0 1
3618: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3619: LD_INT 0
3621: PPUSH
3622: PPUSH
// if existMode then
3623: LD_VAR 0 2
3627: IFFALSE 3762
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3629: LD_EXP 21
3633: PUSH
3634: LD_VAR 0 1
3638: STR
3639: PPUSH
3640: CALL_OW 28
3644: IFFALSE 3669
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3646: LD_ADDR_VAR 0 4
3650: PUSH
3651: LD_EXP 21
3655: PUSH
3656: LD_VAR 0 1
3660: STR
3661: PPUSH
3662: CALL_OW 34
3666: ST_TO_ADDR
3667: GO 3760
// begin if TestCharacters ( 11_ & ident ) then
3669: LD_STRING 11_
3671: PUSH
3672: LD_VAR 0 1
3676: STR
3677: PPUSH
3678: CALL_OW 28
3682: IFFALSE 3705
// unit := CreateCharacter ( 11_ & ident ) else
3684: LD_ADDR_VAR 0 4
3688: PUSH
3689: LD_STRING 11_
3691: PUSH
3692: LD_VAR 0 1
3696: STR
3697: PPUSH
3698: CALL_OW 34
3702: ST_TO_ADDR
3703: GO 3760
// if TestCharacters ( 10c_ & ident ) then
3705: LD_STRING 10c_
3707: PUSH
3708: LD_VAR 0 1
3712: STR
3713: PPUSH
3714: CALL_OW 28
3718: IFFALSE 3741
// unit := CreateCharacter ( 10c_ & ident ) else
3720: LD_ADDR_VAR 0 4
3724: PUSH
3725: LD_STRING 10c_
3727: PUSH
3728: LD_VAR 0 1
3732: STR
3733: PPUSH
3734: CALL_OW 34
3738: ST_TO_ADDR
3739: GO 3760
// unit := CreateCharacter ( 10_ & ident ) ;
3741: LD_ADDR_VAR 0 4
3745: PUSH
3746: LD_STRING 10_
3748: PUSH
3749: LD_VAR 0 1
3753: STR
3754: PPUSH
3755: CALL_OW 34
3759: ST_TO_ADDR
// end ; end else
3760: GO 3777
// unit := NewCharacter ( ident ) ;
3762: LD_ADDR_VAR 0 4
3766: PUSH
3767: LD_VAR 0 1
3771: PPUSH
3772: CALL_OW 25
3776: ST_TO_ADDR
// result := unit ;
3777: LD_ADDR_VAR 0 3
3781: PUSH
3782: LD_VAR 0 4
3786: ST_TO_ADDR
// end ;
3787: LD_VAR 0 3
3791: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
3792: LD_INT 0
3794: PPUSH
// if unit in selectedTab then
3795: LD_VAR 0 1
3799: PUSH
3800: LD_VAR 0 3
3804: IN
3805: IFFALSE 3827
// SaveCharacters ( unit , 13c_ & unitString ) else
3807: LD_VAR 0 1
3811: PPUSH
3812: LD_STRING 13c_
3814: PUSH
3815: LD_VAR 0 2
3819: STR
3820: PPUSH
3821: CALL_OW 38
3825: GO 3845
// SaveCharacters ( unit , 13s_ & unitString ) ;
3827: LD_VAR 0 1
3831: PPUSH
3832: LD_STRING 13s_
3834: PUSH
3835: LD_VAR 0 2
3839: STR
3840: PPUSH
3841: CALL_OW 38
// end ;
3845: LD_VAR 0 4
3849: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
3850: LD_INT 0
3852: PPUSH
3853: PPUSH
3854: PPUSH
3855: PPUSH
// selected := [ ] ;
3856: LD_ADDR_EXP 22
3860: PUSH
3861: EMPTY
3862: ST_TO_ADDR
// othersSelect := [ ] ;
3863: LD_ADDR_EXP 23
3867: PUSH
3868: EMPTY
3869: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3870: LD_ADDR_VAR 0 3
3874: PUSH
3875: LD_EXP 3
3879: PUSH
3880: LD_EXP 4
3884: PUSH
3885: LD_EXP 5
3889: PUSH
3890: LD_EXP 6
3894: PUSH
3895: LD_EXP 8
3899: PUSH
3900: LD_EXP 9
3904: PUSH
3905: LD_EXP 10
3909: PUSH
3910: LD_EXP 11
3914: PUSH
3915: LD_EXP 12
3919: PUSH
3920: LD_EXP 13
3924: PUSH
3925: LD_EXP 14
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: ST_TO_ADDR
// tmp := tmp ^ others11 ;
3943: LD_ADDR_VAR 0 3
3947: PUSH
3948: LD_VAR 0 3
3952: PUSH
3953: LD_EXP 17
3957: ADD
3958: ST_TO_ADDR
// tmp := tmp ^ others12 ;
3959: LD_ADDR_VAR 0 3
3963: PUSH
3964: LD_VAR 0 3
3968: PUSH
3969: LD_EXP 16
3973: ADD
3974: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
3975: LD_ADDR_VAR 0 3
3979: PUSH
3980: LD_VAR 0 3
3984: PUSH
3985: LD_EXP 18
3989: ADD
3990: ST_TO_ADDR
// for i in tmp do
3991: LD_ADDR_VAR 0 2
3995: PUSH
3996: LD_VAR 0 3
4000: PUSH
4001: FOR_IN
4002: IFFALSE 4041
// if GetClass ( i ) = 8 then
4004: LD_VAR 0 2
4008: PPUSH
4009: CALL_OW 257
4013: PUSH
4014: LD_INT 8
4016: EQUAL
4017: IFFALSE 4039
// SetClass ( i , rand ( 1 , 4 ) ) ;
4019: LD_VAR 0 2
4023: PPUSH
4024: LD_INT 1
4026: PPUSH
4027: LD_INT 4
4029: PPUSH
4030: CALL_OW 12
4034: PPUSH
4035: CALL_OW 336
4039: GO 4001
4041: POP
4042: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4043: LD_ADDR_EXP 22
4047: PUSH
4048: LD_STRING 1
4050: PPUSH
4051: LD_INT 6
4053: PPUSH
4054: LD_INT 6
4056: PPUSH
4057: LD_INT -5
4059: PUSH
4060: LD_EXP 1
4064: PUSH
4065: LD_EXP 15
4069: PUSH
4070: LD_INT -2
4072: PUSH
4073: LD_INT -3
4075: PUSH
4076: LD_INT -5
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: PUSH
4087: LD_VAR 0 3
4091: ADD
4092: PUSH
4093: LD_INT -6
4095: PUSH
4096: LD_INT -4
4098: PUSH
4099: LD_EXP 2
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: ADD
4109: PPUSH
4110: LD_INT 1
4112: PUSH
4113: LD_INT 0
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PUSH
4120: LD_INT 2
4122: PUSH
4123: LD_INT 1
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: LD_INT 0
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 4
4142: PUSH
4143: LD_INT 2
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: LD_INT 5
4152: PUSH
4153: LD_INT 0
4155: PUSH
4156: LD_INT 2
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: PPUSH
4171: CALL_OW 42
4175: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4176: LD_ADDR_EXP 23
4180: PUSH
4181: LD_EXP 22
4185: PUSH
4186: LD_EXP 3
4190: PUSH
4191: LD_EXP 4
4195: PUSH
4196: LD_EXP 5
4200: PUSH
4201: LD_EXP 6
4205: PUSH
4206: LD_EXP 7
4210: PUSH
4211: LD_EXP 8
4215: PUSH
4216: LD_EXP 9
4220: PUSH
4221: LD_EXP 10
4225: PUSH
4226: LD_EXP 11
4230: PUSH
4231: LD_EXP 12
4235: PUSH
4236: LD_EXP 13
4240: PUSH
4241: LD_EXP 14
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: DIFF
4260: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4261: LD_ADDR_VAR 0 4
4265: PUSH
4266: LD_VAR 0 3
4270: PUSH
4271: LD_EXP 22
4275: DIFF
4276: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4277: LD_ADDR_VAR 0 4
4281: PUSH
4282: LD_VAR 0 4
4286: PUSH
4287: LD_EXP 3
4291: PUSH
4292: LD_EXP 4
4296: PUSH
4297: LD_EXP 5
4301: PUSH
4302: LD_EXP 6
4306: PUSH
4307: LD_EXP 7
4311: PUSH
4312: LD_EXP 8
4316: PUSH
4317: LD_EXP 9
4321: PUSH
4322: LD_EXP 10
4326: PUSH
4327: LD_EXP 11
4331: PUSH
4332: LD_EXP 12
4336: PUSH
4337: LD_EXP 13
4341: PUSH
4342: LD_EXP 14
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: DIFF
4361: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4362: LD_VAR 0 4
4366: PPUSH
4367: LD_STRING 13s_others
4369: PPUSH
4370: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4374: LD_EXP 23
4378: PPUSH
4379: LD_STRING 13c_others
4381: PPUSH
4382: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4386: LD_EXP 1
4390: PPUSH
4391: LD_STRING 13c_JMM
4393: PPUSH
4394: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4398: LD_EXP 15
4402: PPUSH
4403: LD_STRING 13c_Stevens
4405: PPUSH
4406: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4410: LD_EXP 3
4414: PPUSH
4415: LD_STRING Lisa
4417: PPUSH
4418: LD_EXP 22
4422: PPUSH
4423: CALL 3792 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4427: LD_EXP 8
4431: PPUSH
4432: LD_STRING Brown
4434: PPUSH
4435: LD_EXP 22
4439: PPUSH
4440: CALL 3792 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4444: LD_EXP 4
4448: PPUSH
4449: LD_STRING Donaldson
4451: PPUSH
4452: LD_EXP 22
4456: PPUSH
4457: CALL 3792 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4461: LD_EXP 5
4465: PPUSH
4466: LD_STRING Bobby
4468: PPUSH
4469: LD_EXP 22
4473: PPUSH
4474: CALL 3792 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4478: LD_EXP 6
4482: PPUSH
4483: LD_STRING Cyrus
4485: PPUSH
4486: LD_EXP 22
4490: PPUSH
4491: CALL 3792 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4495: LD_EXP 7
4499: PPUSH
4500: LD_STRING Denis
4502: PPUSH
4503: LD_EXP 22
4507: PPUSH
4508: CALL 3792 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4512: LD_EXP 9
4516: PPUSH
4517: LD_STRING Gladstone
4519: PPUSH
4520: LD_EXP 22
4524: PPUSH
4525: CALL 3792 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4529: LD_EXP 10
4533: PPUSH
4534: LD_STRING Houten
4536: PPUSH
4537: LD_EXP 22
4541: PPUSH
4542: CALL 3792 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4546: LD_EXP 11
4550: PPUSH
4551: LD_STRING Cornel
4553: PPUSH
4554: LD_EXP 22
4558: PPUSH
4559: CALL 3792 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4563: LD_EXP 12
4567: PPUSH
4568: LD_STRING Gary
4570: PPUSH
4571: LD_EXP 22
4575: PPUSH
4576: CALL 3792 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
4580: LD_EXP 13
4584: PPUSH
4585: LD_STRING Frank
4587: PPUSH
4588: LD_EXP 22
4592: PPUSH
4593: CALL 3792 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
4597: LD_EXP 14
4601: PPUSH
4602: LD_STRING Kikuchi
4604: PPUSH
4605: LD_EXP 22
4609: PPUSH
4610: CALL 3792 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4614: LD_INT 22
4616: PUSH
4617: LD_INT 1
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PUSH
4624: LD_INT 21
4626: PUSH
4627: LD_INT 1
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PPUSH
4638: CALL_OW 69
4642: PPUSH
4643: LD_INT 4
4645: PPUSH
4646: CALL_OW 235
// SetSide ( selected , 1 ) ;
4650: LD_EXP 22
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
4662: LD_EXP 1
4666: PUSH
4667: LD_EXP 15
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PPUSH
4676: LD_INT 1
4678: PPUSH
4679: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , 4 ] ] ) do
4683: LD_ADDR_VAR 0 2
4687: PUSH
4688: LD_INT 21
4690: PUSH
4691: LD_INT 1
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: LD_INT 22
4700: PUSH
4701: LD_INT 4
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PPUSH
4712: CALL_OW 69
4716: PUSH
4717: FOR_IN
4718: IFFALSE 4731
// RemoveUnit ( i ) ;
4720: LD_VAR 0 2
4724: PPUSH
4725: CALL_OW 64
4729: GO 4717
4731: POP
4732: POP
// end ; end_of_file
4733: LD_VAR 0 1
4737: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4738: LD_VAR 0 1
4742: PPUSH
4743: CALL 19305 0 1
// if un = JMM then
4747: LD_VAR 0 1
4751: PUSH
4752: LD_EXP 1
4756: EQUAL
4757: IFFALSE 4766
// YouLost ( JMM ) ;
4759: LD_STRING JMM
4761: PPUSH
4762: CALL_OW 104
// end ;
4766: PPOPN 1
4768: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
4769: LD_VAR 0 1
4773: PPUSH
4774: LD_VAR 0 2
4778: PPUSH
4779: CALL 19427 0 2
// end ; end_of_file
4783: PPOPN 2
4785: END
// export function Action ; begin
4786: LD_INT 0
4788: PPUSH
// InGameOn ;
4789: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
4793: LD_EXP 1
4797: PPUSH
4798: CALL_OW 87
// wait ( 0 0$1 ) ;
4802: LD_INT 35
4804: PPUSH
4805: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
4809: LD_EXP 1
4813: PPUSH
4814: LD_STRING D1-JMM-1
4816: PPUSH
4817: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
4821: LD_EXP 2
4825: PPUSH
4826: LD_STRING D1-Pow-1
4828: PPUSH
4829: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
4833: LD_EXP 2
4837: PPUSH
4838: LD_STRING D1-Pow-1a
4840: PPUSH
4841: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
4845: LD_EXP 2
4849: PPUSH
4850: LD_STRING D1-Pow-1b
4852: PPUSH
4853: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
4857: LD_EXP 2
4861: PPUSH
4862: LD_STRING D1-Pow-1c
4864: PPUSH
4865: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
4869: LD_EXP 1
4873: PPUSH
4874: LD_STRING D1-JMM-2
4876: PPUSH
4877: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
4881: LD_EXP 2
4885: PPUSH
4886: LD_STRING D1-Pow-2
4888: PPUSH
4889: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
4893: LD_EXP 1
4897: PPUSH
4898: LD_STRING D1-JMM-3
4900: PPUSH
4901: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
4905: LD_EXP 2
4909: PPUSH
4910: LD_STRING D1-Pow-3
4912: PPUSH
4913: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
4917: LD_EXP 1
4921: PPUSH
4922: LD_STRING D1-JMM-4
4924: PPUSH
4925: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
4929: LD_EXP 2
4933: PPUSH
4934: LD_STRING D1-Pow-4
4936: PPUSH
4937: CALL_OW 94
// SelectAndSaveCharacters ;
4941: CALL 3850 0 0
// InGameOff ;
4945: CALL_OW 9
// Query ( Q1 ) ;
4949: LD_STRING Q1
4951: PPUSH
4952: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4956: LD_INT 2
4958: PPUSH
4959: LD_INT 1
4961: PPUSH
4962: CALL_OW 424
// end ; end_of_file
4966: LD_VAR 0 1
4970: RET
// every 0 0$1 do
4971: GO 4973
4973: DISABLE
// begin enable ;
4974: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4975: LD_STRING updateTimer(
4977: PUSH
4978: LD_OWVAR 1
4982: STR
4983: PUSH
4984: LD_STRING );
4986: STR
4987: PPUSH
4988: CALL_OW 559
// end ;
4992: END
// export function SOS_MapStart ( ) ; begin
4993: LD_INT 0
4995: PPUSH
// if streamModeActive then
4996: LD_EXP 24
5000: IFFALSE 5009
// DefineStreamItems ( true ) ;
5002: LD_INT 1
5004: PPUSH
5005: CALL 6659 0 1
// UpdateFactoryWaypoints ( ) ;
5009: CALL 20243 0 0
// end ;
5013: LD_VAR 0 1
5017: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5018: LD_INT 0
5020: PPUSH
// if p2 = 100 then
5021: LD_VAR 0 2
5025: PUSH
5026: LD_INT 100
5028: EQUAL
5029: IFFALSE 6032
// begin if not StreamModeActive then
5031: LD_EXP 24
5035: NOT
5036: IFFALSE 5046
// StreamModeActive := true ;
5038: LD_ADDR_EXP 24
5042: PUSH
5043: LD_INT 1
5045: ST_TO_ADDR
// if p3 = 0 then
5046: LD_VAR 0 3
5050: PUSH
5051: LD_INT 0
5053: EQUAL
5054: IFFALSE 5060
// InitStreamMode ;
5056: CALL 6195 0 0
// if p3 = 1 then
5060: LD_VAR 0 3
5064: PUSH
5065: LD_INT 1
5067: EQUAL
5068: IFFALSE 5078
// sRocket := true ;
5070: LD_ADDR_EXP 29
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// if p3 = 2 then
5078: LD_VAR 0 3
5082: PUSH
5083: LD_INT 2
5085: EQUAL
5086: IFFALSE 5096
// sSpeed := true ;
5088: LD_ADDR_EXP 28
5092: PUSH
5093: LD_INT 1
5095: ST_TO_ADDR
// if p3 = 3 then
5096: LD_VAR 0 3
5100: PUSH
5101: LD_INT 3
5103: EQUAL
5104: IFFALSE 5114
// sEngine := true ;
5106: LD_ADDR_EXP 30
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// if p3 = 4 then
5114: LD_VAR 0 3
5118: PUSH
5119: LD_INT 4
5121: EQUAL
5122: IFFALSE 5132
// sSpec := true ;
5124: LD_ADDR_EXP 27
5128: PUSH
5129: LD_INT 1
5131: ST_TO_ADDR
// if p3 = 5 then
5132: LD_VAR 0 3
5136: PUSH
5137: LD_INT 5
5139: EQUAL
5140: IFFALSE 5150
// sLevel := true ;
5142: LD_ADDR_EXP 31
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// if p3 = 6 then
5150: LD_VAR 0 3
5154: PUSH
5155: LD_INT 6
5157: EQUAL
5158: IFFALSE 5168
// sArmoury := true ;
5160: LD_ADDR_EXP 32
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// if p3 = 7 then
5168: LD_VAR 0 3
5172: PUSH
5173: LD_INT 7
5175: EQUAL
5176: IFFALSE 5186
// sRadar := true ;
5178: LD_ADDR_EXP 33
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// if p3 = 8 then
5186: LD_VAR 0 3
5190: PUSH
5191: LD_INT 8
5193: EQUAL
5194: IFFALSE 5204
// sBunker := true ;
5196: LD_ADDR_EXP 34
5200: PUSH
5201: LD_INT 1
5203: ST_TO_ADDR
// if p3 = 9 then
5204: LD_VAR 0 3
5208: PUSH
5209: LD_INT 9
5211: EQUAL
5212: IFFALSE 5222
// sHack := true ;
5214: LD_ADDR_EXP 35
5218: PUSH
5219: LD_INT 1
5221: ST_TO_ADDR
// if p3 = 10 then
5222: LD_VAR 0 3
5226: PUSH
5227: LD_INT 10
5229: EQUAL
5230: IFFALSE 5240
// sFire := true ;
5232: LD_ADDR_EXP 36
5236: PUSH
5237: LD_INT 1
5239: ST_TO_ADDR
// if p3 = 11 then
5240: LD_VAR 0 3
5244: PUSH
5245: LD_INT 11
5247: EQUAL
5248: IFFALSE 5258
// sRefresh := true ;
5250: LD_ADDR_EXP 37
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// if p3 = 12 then
5258: LD_VAR 0 3
5262: PUSH
5263: LD_INT 12
5265: EQUAL
5266: IFFALSE 5276
// sExp := true ;
5268: LD_ADDR_EXP 38
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// if p3 = 13 then
5276: LD_VAR 0 3
5280: PUSH
5281: LD_INT 13
5283: EQUAL
5284: IFFALSE 5294
// sDepot := true ;
5286: LD_ADDR_EXP 39
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// if p3 = 14 then
5294: LD_VAR 0 3
5298: PUSH
5299: LD_INT 14
5301: EQUAL
5302: IFFALSE 5312
// sFlag := true ;
5304: LD_ADDR_EXP 40
5308: PUSH
5309: LD_INT 1
5311: ST_TO_ADDR
// if p3 = 15 then
5312: LD_VAR 0 3
5316: PUSH
5317: LD_INT 15
5319: EQUAL
5320: IFFALSE 5330
// sKamikadze := true ;
5322: LD_ADDR_EXP 48
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// if p3 = 16 then
5330: LD_VAR 0 3
5334: PUSH
5335: LD_INT 16
5337: EQUAL
5338: IFFALSE 5348
// sTroll := true ;
5340: LD_ADDR_EXP 49
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if p3 = 17 then
5348: LD_VAR 0 3
5352: PUSH
5353: LD_INT 17
5355: EQUAL
5356: IFFALSE 5366
// sSlow := true ;
5358: LD_ADDR_EXP 50
5362: PUSH
5363: LD_INT 1
5365: ST_TO_ADDR
// if p3 = 18 then
5366: LD_VAR 0 3
5370: PUSH
5371: LD_INT 18
5373: EQUAL
5374: IFFALSE 5384
// sLack := true ;
5376: LD_ADDR_EXP 51
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// if p3 = 19 then
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 19
5391: EQUAL
5392: IFFALSE 5402
// sTank := true ;
5394: LD_ADDR_EXP 53
5398: PUSH
5399: LD_INT 1
5401: ST_TO_ADDR
// if p3 = 20 then
5402: LD_VAR 0 3
5406: PUSH
5407: LD_INT 20
5409: EQUAL
5410: IFFALSE 5420
// sRemote := true ;
5412: LD_ADDR_EXP 54
5416: PUSH
5417: LD_INT 1
5419: ST_TO_ADDR
// if p3 = 21 then
5420: LD_VAR 0 3
5424: PUSH
5425: LD_INT 21
5427: EQUAL
5428: IFFALSE 5438
// sPowell := true ;
5430: LD_ADDR_EXP 55
5434: PUSH
5435: LD_INT 1
5437: ST_TO_ADDR
// if p3 = 22 then
5438: LD_VAR 0 3
5442: PUSH
5443: LD_INT 22
5445: EQUAL
5446: IFFALSE 5456
// sTeleport := true ;
5448: LD_ADDR_EXP 58
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// if p3 = 23 then
5456: LD_VAR 0 3
5460: PUSH
5461: LD_INT 23
5463: EQUAL
5464: IFFALSE 5474
// sOilTower := true ;
5466: LD_ADDR_EXP 60
5470: PUSH
5471: LD_INT 1
5473: ST_TO_ADDR
// if p3 = 24 then
5474: LD_VAR 0 3
5478: PUSH
5479: LD_INT 24
5481: EQUAL
5482: IFFALSE 5492
// sShovel := true ;
5484: LD_ADDR_EXP 61
5488: PUSH
5489: LD_INT 1
5491: ST_TO_ADDR
// if p3 = 25 then
5492: LD_VAR 0 3
5496: PUSH
5497: LD_INT 25
5499: EQUAL
5500: IFFALSE 5510
// sSheik := true ;
5502: LD_ADDR_EXP 62
5506: PUSH
5507: LD_INT 1
5509: ST_TO_ADDR
// if p3 = 26 then
5510: LD_VAR 0 3
5514: PUSH
5515: LD_INT 26
5517: EQUAL
5518: IFFALSE 5528
// sEarthquake := true ;
5520: LD_ADDR_EXP 64
5524: PUSH
5525: LD_INT 1
5527: ST_TO_ADDR
// if p3 = 27 then
5528: LD_VAR 0 3
5532: PUSH
5533: LD_INT 27
5535: EQUAL
5536: IFFALSE 5546
// sAI := true ;
5538: LD_ADDR_EXP 65
5542: PUSH
5543: LD_INT 1
5545: ST_TO_ADDR
// if p3 = 28 then
5546: LD_VAR 0 3
5550: PUSH
5551: LD_INT 28
5553: EQUAL
5554: IFFALSE 5564
// sCargo := true ;
5556: LD_ADDR_EXP 68
5560: PUSH
5561: LD_INT 1
5563: ST_TO_ADDR
// if p3 = 29 then
5564: LD_VAR 0 3
5568: PUSH
5569: LD_INT 29
5571: EQUAL
5572: IFFALSE 5582
// sDLaser := true ;
5574: LD_ADDR_EXP 69
5578: PUSH
5579: LD_INT 1
5581: ST_TO_ADDR
// if p3 = 30 then
5582: LD_VAR 0 3
5586: PUSH
5587: LD_INT 30
5589: EQUAL
5590: IFFALSE 5600
// sExchange := true ;
5592: LD_ADDR_EXP 70
5596: PUSH
5597: LD_INT 1
5599: ST_TO_ADDR
// if p3 = 31 then
5600: LD_VAR 0 3
5604: PUSH
5605: LD_INT 31
5607: EQUAL
5608: IFFALSE 5618
// sFac := true ;
5610: LD_ADDR_EXP 71
5614: PUSH
5615: LD_INT 1
5617: ST_TO_ADDR
// if p3 = 32 then
5618: LD_VAR 0 3
5622: PUSH
5623: LD_INT 32
5625: EQUAL
5626: IFFALSE 5636
// sPower := true ;
5628: LD_ADDR_EXP 72
5632: PUSH
5633: LD_INT 1
5635: ST_TO_ADDR
// if p3 = 33 then
5636: LD_VAR 0 3
5640: PUSH
5641: LD_INT 33
5643: EQUAL
5644: IFFALSE 5654
// sRandom := true ;
5646: LD_ADDR_EXP 73
5650: PUSH
5651: LD_INT 1
5653: ST_TO_ADDR
// if p3 = 34 then
5654: LD_VAR 0 3
5658: PUSH
5659: LD_INT 34
5661: EQUAL
5662: IFFALSE 5672
// sShield := true ;
5664: LD_ADDR_EXP 74
5668: PUSH
5669: LD_INT 1
5671: ST_TO_ADDR
// if p3 = 35 then
5672: LD_VAR 0 3
5676: PUSH
5677: LD_INT 35
5679: EQUAL
5680: IFFALSE 5690
// sTime := true ;
5682: LD_ADDR_EXP 75
5686: PUSH
5687: LD_INT 1
5689: ST_TO_ADDR
// if p3 = 36 then
5690: LD_VAR 0 3
5694: PUSH
5695: LD_INT 36
5697: EQUAL
5698: IFFALSE 5708
// sTools := true ;
5700: LD_ADDR_EXP 76
5704: PUSH
5705: LD_INT 1
5707: ST_TO_ADDR
// if p3 = 101 then
5708: LD_VAR 0 3
5712: PUSH
5713: LD_INT 101
5715: EQUAL
5716: IFFALSE 5726
// sSold := true ;
5718: LD_ADDR_EXP 41
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// if p3 = 102 then
5726: LD_VAR 0 3
5730: PUSH
5731: LD_INT 102
5733: EQUAL
5734: IFFALSE 5744
// sDiff := true ;
5736: LD_ADDR_EXP 42
5740: PUSH
5741: LD_INT 1
5743: ST_TO_ADDR
// if p3 = 103 then
5744: LD_VAR 0 3
5748: PUSH
5749: LD_INT 103
5751: EQUAL
5752: IFFALSE 5762
// sFog := true ;
5754: LD_ADDR_EXP 45
5758: PUSH
5759: LD_INT 1
5761: ST_TO_ADDR
// if p3 = 104 then
5762: LD_VAR 0 3
5766: PUSH
5767: LD_INT 104
5769: EQUAL
5770: IFFALSE 5780
// sReset := true ;
5772: LD_ADDR_EXP 46
5776: PUSH
5777: LD_INT 1
5779: ST_TO_ADDR
// if p3 = 105 then
5780: LD_VAR 0 3
5784: PUSH
5785: LD_INT 105
5787: EQUAL
5788: IFFALSE 5798
// sSun := true ;
5790: LD_ADDR_EXP 47
5794: PUSH
5795: LD_INT 1
5797: ST_TO_ADDR
// if p3 = 106 then
5798: LD_VAR 0 3
5802: PUSH
5803: LD_INT 106
5805: EQUAL
5806: IFFALSE 5816
// sTiger := true ;
5808: LD_ADDR_EXP 43
5812: PUSH
5813: LD_INT 1
5815: ST_TO_ADDR
// if p3 = 107 then
5816: LD_VAR 0 3
5820: PUSH
5821: LD_INT 107
5823: EQUAL
5824: IFFALSE 5834
// sBomb := true ;
5826: LD_ADDR_EXP 44
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// if p3 = 108 then
5834: LD_VAR 0 3
5838: PUSH
5839: LD_INT 108
5841: EQUAL
5842: IFFALSE 5852
// sWound := true ;
5844: LD_ADDR_EXP 52
5848: PUSH
5849: LD_INT 1
5851: ST_TO_ADDR
// if p3 = 109 then
5852: LD_VAR 0 3
5856: PUSH
5857: LD_INT 109
5859: EQUAL
5860: IFFALSE 5870
// sBetray := true ;
5862: LD_ADDR_EXP 56
5866: PUSH
5867: LD_INT 1
5869: ST_TO_ADDR
// if p3 = 110 then
5870: LD_VAR 0 3
5874: PUSH
5875: LD_INT 110
5877: EQUAL
5878: IFFALSE 5888
// sContamin := true ;
5880: LD_ADDR_EXP 57
5884: PUSH
5885: LD_INT 1
5887: ST_TO_ADDR
// if p3 = 111 then
5888: LD_VAR 0 3
5892: PUSH
5893: LD_INT 111
5895: EQUAL
5896: IFFALSE 5906
// sOil := true ;
5898: LD_ADDR_EXP 59
5902: PUSH
5903: LD_INT 1
5905: ST_TO_ADDR
// if p3 = 112 then
5906: LD_VAR 0 3
5910: PUSH
5911: LD_INT 112
5913: EQUAL
5914: IFFALSE 5924
// sStu := true ;
5916: LD_ADDR_EXP 63
5920: PUSH
5921: LD_INT 1
5923: ST_TO_ADDR
// if p3 = 113 then
5924: LD_VAR 0 3
5928: PUSH
5929: LD_INT 113
5931: EQUAL
5932: IFFALSE 5942
// sBazooka := true ;
5934: LD_ADDR_EXP 66
5938: PUSH
5939: LD_INT 1
5941: ST_TO_ADDR
// if p3 = 114 then
5942: LD_VAR 0 3
5946: PUSH
5947: LD_INT 114
5949: EQUAL
5950: IFFALSE 5960
// sMortar := true ;
5952: LD_ADDR_EXP 67
5956: PUSH
5957: LD_INT 1
5959: ST_TO_ADDR
// if p3 = 115 then
5960: LD_VAR 0 3
5964: PUSH
5965: LD_INT 115
5967: EQUAL
5968: IFFALSE 5978
// sRanger := true ;
5970: LD_ADDR_EXP 77
5974: PUSH
5975: LD_INT 1
5977: ST_TO_ADDR
// if p3 = 116 then
5978: LD_VAR 0 3
5982: PUSH
5983: LD_INT 116
5985: EQUAL
5986: IFFALSE 5996
// sComputer := true ;
5988: LD_ADDR_EXP 78
5992: PUSH
5993: LD_INT 1
5995: ST_TO_ADDR
// if p3 = 117 then
5996: LD_VAR 0 3
6000: PUSH
6001: LD_INT 117
6003: EQUAL
6004: IFFALSE 6014
// s30 := true ;
6006: LD_ADDR_EXP 79
6010: PUSH
6011: LD_INT 1
6013: ST_TO_ADDR
// if p3 = 118 then
6014: LD_VAR 0 3
6018: PUSH
6019: LD_INT 118
6021: EQUAL
6022: IFFALSE 6032
// s60 := true ;
6024: LD_ADDR_EXP 80
6028: PUSH
6029: LD_INT 1
6031: ST_TO_ADDR
// end ; if p2 = 101 then
6032: LD_VAR 0 2
6036: PUSH
6037: LD_INT 101
6039: EQUAL
6040: IFFALSE 6168
// begin case p3 of 1 :
6042: LD_VAR 0 3
6046: PUSH
6047: LD_INT 1
6049: DOUBLE
6050: EQUAL
6051: IFTRUE 6055
6053: GO 6062
6055: POP
// hHackUnlimitedResources ; 2 :
6056: CALL 18266 0 0
6060: GO 6168
6062: LD_INT 2
6064: DOUBLE
6065: EQUAL
6066: IFTRUE 6070
6068: GO 6077
6070: POP
// hHackSetLevel10 ; 3 :
6071: CALL 18399 0 0
6075: GO 6168
6077: LD_INT 3
6079: DOUBLE
6080: EQUAL
6081: IFTRUE 6085
6083: GO 6092
6085: POP
// hHackSetLevel10YourUnits ; 4 :
6086: CALL 18484 0 0
6090: GO 6168
6092: LD_INT 4
6094: DOUBLE
6095: EQUAL
6096: IFTRUE 6100
6098: GO 6107
6100: POP
// hHackInvincible ; 5 :
6101: CALL 18932 0 0
6105: GO 6168
6107: LD_INT 5
6109: DOUBLE
6110: EQUAL
6111: IFTRUE 6115
6113: GO 6122
6115: POP
// hHackInvisible ; 6 :
6116: CALL 19043 0 0
6120: GO 6168
6122: LD_INT 6
6124: DOUBLE
6125: EQUAL
6126: IFTRUE 6130
6128: GO 6137
6130: POP
// hHackChangeYourSide ; 7 :
6131: CALL 19100 0 0
6135: GO 6168
6137: LD_INT 7
6139: DOUBLE
6140: EQUAL
6141: IFTRUE 6145
6143: GO 6152
6145: POP
// hHackChangeUnitSide ; 8 :
6146: CALL 19142 0 0
6150: GO 6168
6152: LD_INT 8
6154: DOUBLE
6155: EQUAL
6156: IFTRUE 6160
6158: GO 6167
6160: POP
// hHackFog ; end ;
6161: CALL 19243 0 0
6165: GO 6168
6167: POP
// end ; end ;
6168: LD_VAR 0 7
6172: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6173: GO 6175
6175: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6176: LD_STRING initStreamRollete();
6178: PPUSH
6179: CALL_OW 559
// InitStreamMode ;
6183: CALL 6195 0 0
// DefineStreamItems ( false ) ;
6187: LD_INT 0
6189: PPUSH
6190: CALL 6659 0 1
// end ;
6194: END
// function InitStreamMode ; begin
6195: LD_INT 0
6197: PPUSH
// streamModeActive := false ;
6198: LD_ADDR_EXP 24
6202: PUSH
6203: LD_INT 0
6205: ST_TO_ADDR
// normalCounter := 36 ;
6206: LD_ADDR_EXP 25
6210: PUSH
6211: LD_INT 36
6213: ST_TO_ADDR
// hardcoreCounter := 18 ;
6214: LD_ADDR_EXP 26
6218: PUSH
6219: LD_INT 18
6221: ST_TO_ADDR
// sRocket := false ;
6222: LD_ADDR_EXP 29
6226: PUSH
6227: LD_INT 0
6229: ST_TO_ADDR
// sSpeed := false ;
6230: LD_ADDR_EXP 28
6234: PUSH
6235: LD_INT 0
6237: ST_TO_ADDR
// sEngine := false ;
6238: LD_ADDR_EXP 30
6242: PUSH
6243: LD_INT 0
6245: ST_TO_ADDR
// sSpec := false ;
6246: LD_ADDR_EXP 27
6250: PUSH
6251: LD_INT 0
6253: ST_TO_ADDR
// sLevel := false ;
6254: LD_ADDR_EXP 31
6258: PUSH
6259: LD_INT 0
6261: ST_TO_ADDR
// sArmoury := false ;
6262: LD_ADDR_EXP 32
6266: PUSH
6267: LD_INT 0
6269: ST_TO_ADDR
// sRadar := false ;
6270: LD_ADDR_EXP 33
6274: PUSH
6275: LD_INT 0
6277: ST_TO_ADDR
// sBunker := false ;
6278: LD_ADDR_EXP 34
6282: PUSH
6283: LD_INT 0
6285: ST_TO_ADDR
// sHack := false ;
6286: LD_ADDR_EXP 35
6290: PUSH
6291: LD_INT 0
6293: ST_TO_ADDR
// sFire := false ;
6294: LD_ADDR_EXP 36
6298: PUSH
6299: LD_INT 0
6301: ST_TO_ADDR
// sRefresh := false ;
6302: LD_ADDR_EXP 37
6306: PUSH
6307: LD_INT 0
6309: ST_TO_ADDR
// sExp := false ;
6310: LD_ADDR_EXP 38
6314: PUSH
6315: LD_INT 0
6317: ST_TO_ADDR
// sDepot := false ;
6318: LD_ADDR_EXP 39
6322: PUSH
6323: LD_INT 0
6325: ST_TO_ADDR
// sFlag := false ;
6326: LD_ADDR_EXP 40
6330: PUSH
6331: LD_INT 0
6333: ST_TO_ADDR
// sKamikadze := false ;
6334: LD_ADDR_EXP 48
6338: PUSH
6339: LD_INT 0
6341: ST_TO_ADDR
// sTroll := false ;
6342: LD_ADDR_EXP 49
6346: PUSH
6347: LD_INT 0
6349: ST_TO_ADDR
// sSlow := false ;
6350: LD_ADDR_EXP 50
6354: PUSH
6355: LD_INT 0
6357: ST_TO_ADDR
// sLack := false ;
6358: LD_ADDR_EXP 51
6362: PUSH
6363: LD_INT 0
6365: ST_TO_ADDR
// sTank := false ;
6366: LD_ADDR_EXP 53
6370: PUSH
6371: LD_INT 0
6373: ST_TO_ADDR
// sRemote := false ;
6374: LD_ADDR_EXP 54
6378: PUSH
6379: LD_INT 0
6381: ST_TO_ADDR
// sPowell := false ;
6382: LD_ADDR_EXP 55
6386: PUSH
6387: LD_INT 0
6389: ST_TO_ADDR
// sTeleport := false ;
6390: LD_ADDR_EXP 58
6394: PUSH
6395: LD_INT 0
6397: ST_TO_ADDR
// sOilTower := false ;
6398: LD_ADDR_EXP 60
6402: PUSH
6403: LD_INT 0
6405: ST_TO_ADDR
// sShovel := false ;
6406: LD_ADDR_EXP 61
6410: PUSH
6411: LD_INT 0
6413: ST_TO_ADDR
// sSheik := false ;
6414: LD_ADDR_EXP 62
6418: PUSH
6419: LD_INT 0
6421: ST_TO_ADDR
// sEarthquake := false ;
6422: LD_ADDR_EXP 64
6426: PUSH
6427: LD_INT 0
6429: ST_TO_ADDR
// sAI := false ;
6430: LD_ADDR_EXP 65
6434: PUSH
6435: LD_INT 0
6437: ST_TO_ADDR
// sCargo := false ;
6438: LD_ADDR_EXP 68
6442: PUSH
6443: LD_INT 0
6445: ST_TO_ADDR
// sDLaser := false ;
6446: LD_ADDR_EXP 69
6450: PUSH
6451: LD_INT 0
6453: ST_TO_ADDR
// sExchange := false ;
6454: LD_ADDR_EXP 70
6458: PUSH
6459: LD_INT 0
6461: ST_TO_ADDR
// sFac := false ;
6462: LD_ADDR_EXP 71
6466: PUSH
6467: LD_INT 0
6469: ST_TO_ADDR
// sPower := false ;
6470: LD_ADDR_EXP 72
6474: PUSH
6475: LD_INT 0
6477: ST_TO_ADDR
// sRandom := false ;
6478: LD_ADDR_EXP 73
6482: PUSH
6483: LD_INT 0
6485: ST_TO_ADDR
// sShield := false ;
6486: LD_ADDR_EXP 74
6490: PUSH
6491: LD_INT 0
6493: ST_TO_ADDR
// sTime := false ;
6494: LD_ADDR_EXP 75
6498: PUSH
6499: LD_INT 0
6501: ST_TO_ADDR
// sTools := false ;
6502: LD_ADDR_EXP 76
6506: PUSH
6507: LD_INT 0
6509: ST_TO_ADDR
// sSold := false ;
6510: LD_ADDR_EXP 41
6514: PUSH
6515: LD_INT 0
6517: ST_TO_ADDR
// sDiff := false ;
6518: LD_ADDR_EXP 42
6522: PUSH
6523: LD_INT 0
6525: ST_TO_ADDR
// sFog := false ;
6526: LD_ADDR_EXP 45
6530: PUSH
6531: LD_INT 0
6533: ST_TO_ADDR
// sReset := false ;
6534: LD_ADDR_EXP 46
6538: PUSH
6539: LD_INT 0
6541: ST_TO_ADDR
// sSun := false ;
6542: LD_ADDR_EXP 47
6546: PUSH
6547: LD_INT 0
6549: ST_TO_ADDR
// sTiger := false ;
6550: LD_ADDR_EXP 43
6554: PUSH
6555: LD_INT 0
6557: ST_TO_ADDR
// sBomb := false ;
6558: LD_ADDR_EXP 44
6562: PUSH
6563: LD_INT 0
6565: ST_TO_ADDR
// sWound := false ;
6566: LD_ADDR_EXP 52
6570: PUSH
6571: LD_INT 0
6573: ST_TO_ADDR
// sBetray := false ;
6574: LD_ADDR_EXP 56
6578: PUSH
6579: LD_INT 0
6581: ST_TO_ADDR
// sContamin := false ;
6582: LD_ADDR_EXP 57
6586: PUSH
6587: LD_INT 0
6589: ST_TO_ADDR
// sOil := false ;
6590: LD_ADDR_EXP 59
6594: PUSH
6595: LD_INT 0
6597: ST_TO_ADDR
// sStu := false ;
6598: LD_ADDR_EXP 63
6602: PUSH
6603: LD_INT 0
6605: ST_TO_ADDR
// sBazooka := false ;
6606: LD_ADDR_EXP 66
6610: PUSH
6611: LD_INT 0
6613: ST_TO_ADDR
// sMortar := false ;
6614: LD_ADDR_EXP 67
6618: PUSH
6619: LD_INT 0
6621: ST_TO_ADDR
// sRanger := false ;
6622: LD_ADDR_EXP 77
6626: PUSH
6627: LD_INT 0
6629: ST_TO_ADDR
// sComputer := false ;
6630: LD_ADDR_EXP 78
6634: PUSH
6635: LD_INT 0
6637: ST_TO_ADDR
// s30 := false ;
6638: LD_ADDR_EXP 79
6642: PUSH
6643: LD_INT 0
6645: ST_TO_ADDR
// s60 := false ;
6646: LD_ADDR_EXP 80
6650: PUSH
6651: LD_INT 0
6653: ST_TO_ADDR
// end ;
6654: LD_VAR 0 1
6658: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6659: LD_INT 0
6661: PPUSH
6662: PPUSH
6663: PPUSH
6664: PPUSH
6665: PPUSH
6666: PPUSH
6667: PPUSH
// result := [ ] ;
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: EMPTY
6674: ST_TO_ADDR
// if campaign_id = 1 then
6675: LD_OWVAR 69
6679: PUSH
6680: LD_INT 1
6682: EQUAL
6683: IFFALSE 9849
// begin case mission_number of 1 :
6685: LD_OWVAR 70
6689: PUSH
6690: LD_INT 1
6692: DOUBLE
6693: EQUAL
6694: IFTRUE 6698
6696: GO 6774
6698: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6699: LD_ADDR_VAR 0 2
6703: PUSH
6704: LD_INT 2
6706: PUSH
6707: LD_INT 4
6709: PUSH
6710: LD_INT 11
6712: PUSH
6713: LD_INT 12
6715: PUSH
6716: LD_INT 15
6718: PUSH
6719: LD_INT 16
6721: PUSH
6722: LD_INT 22
6724: PUSH
6725: LD_INT 23
6727: PUSH
6728: LD_INT 26
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 101
6744: PUSH
6745: LD_INT 102
6747: PUSH
6748: LD_INT 106
6750: PUSH
6751: LD_INT 116
6753: PUSH
6754: LD_INT 117
6756: PUSH
6757: LD_INT 118
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: ST_TO_ADDR
6772: GO 9847
6774: LD_INT 2
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6866
6782: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6783: LD_ADDR_VAR 0 2
6787: PUSH
6788: LD_INT 2
6790: PUSH
6791: LD_INT 4
6793: PUSH
6794: LD_INT 11
6796: PUSH
6797: LD_INT 12
6799: PUSH
6800: LD_INT 15
6802: PUSH
6803: LD_INT 16
6805: PUSH
6806: LD_INT 22
6808: PUSH
6809: LD_INT 23
6811: PUSH
6812: LD_INT 26
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 101
6828: PUSH
6829: LD_INT 102
6831: PUSH
6832: LD_INT 105
6834: PUSH
6835: LD_INT 106
6837: PUSH
6838: LD_INT 108
6840: PUSH
6841: LD_INT 116
6843: PUSH
6844: LD_INT 117
6846: PUSH
6847: LD_INT 118
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: ST_TO_ADDR
6864: GO 9847
6866: LD_INT 3
6868: DOUBLE
6869: EQUAL
6870: IFTRUE 6874
6872: GO 6962
6874: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6875: LD_ADDR_VAR 0 2
6879: PUSH
6880: LD_INT 2
6882: PUSH
6883: LD_INT 4
6885: PUSH
6886: LD_INT 5
6888: PUSH
6889: LD_INT 11
6891: PUSH
6892: LD_INT 12
6894: PUSH
6895: LD_INT 15
6897: PUSH
6898: LD_INT 16
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 26
6906: PUSH
6907: LD_INT 36
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 101
6924: PUSH
6925: LD_INT 102
6927: PUSH
6928: LD_INT 105
6930: PUSH
6931: LD_INT 106
6933: PUSH
6934: LD_INT 108
6936: PUSH
6937: LD_INT 116
6939: PUSH
6940: LD_INT 117
6942: PUSH
6943: LD_INT 118
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: ST_TO_ADDR
6960: GO 9847
6962: LD_INT 4
6964: DOUBLE
6965: EQUAL
6966: IFTRUE 6970
6968: GO 7066
6970: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6971: LD_ADDR_VAR 0 2
6975: PUSH
6976: LD_INT 2
6978: PUSH
6979: LD_INT 4
6981: PUSH
6982: LD_INT 5
6984: PUSH
6985: LD_INT 8
6987: PUSH
6988: LD_INT 11
6990: PUSH
6991: LD_INT 12
6993: PUSH
6994: LD_INT 15
6996: PUSH
6997: LD_INT 16
6999: PUSH
7000: LD_INT 22
7002: PUSH
7003: LD_INT 23
7005: PUSH
7006: LD_INT 26
7008: PUSH
7009: LD_INT 36
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 101
7028: PUSH
7029: LD_INT 102
7031: PUSH
7032: LD_INT 105
7034: PUSH
7035: LD_INT 106
7037: PUSH
7038: LD_INT 108
7040: PUSH
7041: LD_INT 116
7043: PUSH
7044: LD_INT 117
7046: PUSH
7047: LD_INT 118
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: ST_TO_ADDR
7064: GO 9847
7066: LD_INT 5
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7186
7074: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7075: LD_ADDR_VAR 0 2
7079: PUSH
7080: LD_INT 2
7082: PUSH
7083: LD_INT 4
7085: PUSH
7086: LD_INT 5
7088: PUSH
7089: LD_INT 6
7091: PUSH
7092: LD_INT 8
7094: PUSH
7095: LD_INT 11
7097: PUSH
7098: LD_INT 12
7100: PUSH
7101: LD_INT 15
7103: PUSH
7104: LD_INT 16
7106: PUSH
7107: LD_INT 22
7109: PUSH
7110: LD_INT 23
7112: PUSH
7113: LD_INT 25
7115: PUSH
7116: LD_INT 26
7118: PUSH
7119: LD_INT 36
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 101
7140: PUSH
7141: LD_INT 102
7143: PUSH
7144: LD_INT 105
7146: PUSH
7147: LD_INT 106
7149: PUSH
7150: LD_INT 108
7152: PUSH
7153: LD_INT 109
7155: PUSH
7156: LD_INT 112
7158: PUSH
7159: LD_INT 116
7161: PUSH
7162: LD_INT 117
7164: PUSH
7165: LD_INT 118
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: ST_TO_ADDR
7184: GO 9847
7186: LD_INT 6
7188: DOUBLE
7189: EQUAL
7190: IFTRUE 7194
7192: GO 7326
7194: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7195: LD_ADDR_VAR 0 2
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: LD_INT 4
7205: PUSH
7206: LD_INT 5
7208: PUSH
7209: LD_INT 6
7211: PUSH
7212: LD_INT 8
7214: PUSH
7215: LD_INT 11
7217: PUSH
7218: LD_INT 12
7220: PUSH
7221: LD_INT 15
7223: PUSH
7224: LD_INT 16
7226: PUSH
7227: LD_INT 20
7229: PUSH
7230: LD_INT 21
7232: PUSH
7233: LD_INT 22
7235: PUSH
7236: LD_INT 23
7238: PUSH
7239: LD_INT 25
7241: PUSH
7242: LD_INT 26
7244: PUSH
7245: LD_INT 30
7247: PUSH
7248: LD_INT 31
7250: PUSH
7251: LD_INT 32
7253: PUSH
7254: LD_INT 36
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 101
7280: PUSH
7281: LD_INT 102
7283: PUSH
7284: LD_INT 105
7286: PUSH
7287: LD_INT 106
7289: PUSH
7290: LD_INT 108
7292: PUSH
7293: LD_INT 109
7295: PUSH
7296: LD_INT 112
7298: PUSH
7299: LD_INT 116
7301: PUSH
7302: LD_INT 117
7304: PUSH
7305: LD_INT 118
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: ST_TO_ADDR
7324: GO 9847
7326: LD_INT 7
7328: DOUBLE
7329: EQUAL
7330: IFTRUE 7334
7332: GO 7446
7334: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7335: LD_ADDR_VAR 0 2
7339: PUSH
7340: LD_INT 2
7342: PUSH
7343: LD_INT 4
7345: PUSH
7346: LD_INT 5
7348: PUSH
7349: LD_INT 7
7351: PUSH
7352: LD_INT 11
7354: PUSH
7355: LD_INT 12
7357: PUSH
7358: LD_INT 15
7360: PUSH
7361: LD_INT 16
7363: PUSH
7364: LD_INT 20
7366: PUSH
7367: LD_INT 21
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 23
7375: PUSH
7376: LD_INT 25
7378: PUSH
7379: LD_INT 26
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 101
7400: PUSH
7401: LD_INT 102
7403: PUSH
7404: LD_INT 103
7406: PUSH
7407: LD_INT 105
7409: PUSH
7410: LD_INT 106
7412: PUSH
7413: LD_INT 108
7415: PUSH
7416: LD_INT 112
7418: PUSH
7419: LD_INT 116
7421: PUSH
7422: LD_INT 117
7424: PUSH
7425: LD_INT 118
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: ST_TO_ADDR
7444: GO 9847
7446: LD_INT 8
7448: DOUBLE
7449: EQUAL
7450: IFTRUE 7454
7452: GO 7594
7454: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7455: LD_ADDR_VAR 0 2
7459: PUSH
7460: LD_INT 2
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 5
7468: PUSH
7469: LD_INT 6
7471: PUSH
7472: LD_INT 7
7474: PUSH
7475: LD_INT 8
7477: PUSH
7478: LD_INT 11
7480: PUSH
7481: LD_INT 12
7483: PUSH
7484: LD_INT 15
7486: PUSH
7487: LD_INT 16
7489: PUSH
7490: LD_INT 20
7492: PUSH
7493: LD_INT 21
7495: PUSH
7496: LD_INT 22
7498: PUSH
7499: LD_INT 23
7501: PUSH
7502: LD_INT 25
7504: PUSH
7505: LD_INT 26
7507: PUSH
7508: LD_INT 30
7510: PUSH
7511: LD_INT 31
7513: PUSH
7514: LD_INT 32
7516: PUSH
7517: LD_INT 36
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: PUSH
7542: LD_INT 101
7544: PUSH
7545: LD_INT 102
7547: PUSH
7548: LD_INT 103
7550: PUSH
7551: LD_INT 105
7553: PUSH
7554: LD_INT 106
7556: PUSH
7557: LD_INT 108
7559: PUSH
7560: LD_INT 109
7562: PUSH
7563: LD_INT 112
7565: PUSH
7566: LD_INT 116
7568: PUSH
7569: LD_INT 117
7571: PUSH
7572: LD_INT 118
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: ST_TO_ADDR
7592: GO 9847
7594: LD_INT 9
7596: DOUBLE
7597: EQUAL
7598: IFTRUE 7602
7600: GO 7750
7602: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7603: LD_ADDR_VAR 0 2
7607: PUSH
7608: LD_INT 2
7610: PUSH
7611: LD_INT 4
7613: PUSH
7614: LD_INT 5
7616: PUSH
7617: LD_INT 6
7619: PUSH
7620: LD_INT 7
7622: PUSH
7623: LD_INT 8
7625: PUSH
7626: LD_INT 11
7628: PUSH
7629: LD_INT 12
7631: PUSH
7632: LD_INT 15
7634: PUSH
7635: LD_INT 16
7637: PUSH
7638: LD_INT 20
7640: PUSH
7641: LD_INT 21
7643: PUSH
7644: LD_INT 22
7646: PUSH
7647: LD_INT 23
7649: PUSH
7650: LD_INT 25
7652: PUSH
7653: LD_INT 26
7655: PUSH
7656: LD_INT 28
7658: PUSH
7659: LD_INT 30
7661: PUSH
7662: LD_INT 31
7664: PUSH
7665: LD_INT 32
7667: PUSH
7668: LD_INT 36
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 101
7696: PUSH
7697: LD_INT 102
7699: PUSH
7700: LD_INT 103
7702: PUSH
7703: LD_INT 105
7705: PUSH
7706: LD_INT 106
7708: PUSH
7709: LD_INT 108
7711: PUSH
7712: LD_INT 109
7714: PUSH
7715: LD_INT 112
7717: PUSH
7718: LD_INT 114
7720: PUSH
7721: LD_INT 116
7723: PUSH
7724: LD_INT 117
7726: PUSH
7727: LD_INT 118
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: ST_TO_ADDR
7748: GO 9847
7750: LD_INT 10
7752: DOUBLE
7753: EQUAL
7754: IFTRUE 7758
7756: GO 7954
7758: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7759: LD_ADDR_VAR 0 2
7763: PUSH
7764: LD_INT 2
7766: PUSH
7767: LD_INT 4
7769: PUSH
7770: LD_INT 5
7772: PUSH
7773: LD_INT 6
7775: PUSH
7776: LD_INT 7
7778: PUSH
7779: LD_INT 8
7781: PUSH
7782: LD_INT 9
7784: PUSH
7785: LD_INT 10
7787: PUSH
7788: LD_INT 11
7790: PUSH
7791: LD_INT 12
7793: PUSH
7794: LD_INT 13
7796: PUSH
7797: LD_INT 14
7799: PUSH
7800: LD_INT 15
7802: PUSH
7803: LD_INT 16
7805: PUSH
7806: LD_INT 17
7808: PUSH
7809: LD_INT 18
7811: PUSH
7812: LD_INT 19
7814: PUSH
7815: LD_INT 20
7817: PUSH
7818: LD_INT 21
7820: PUSH
7821: LD_INT 22
7823: PUSH
7824: LD_INT 23
7826: PUSH
7827: LD_INT 24
7829: PUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 26
7835: PUSH
7836: LD_INT 28
7838: PUSH
7839: LD_INT 30
7841: PUSH
7842: LD_INT 31
7844: PUSH
7845: LD_INT 32
7847: PUSH
7848: LD_INT 36
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 101
7884: PUSH
7885: LD_INT 102
7887: PUSH
7888: LD_INT 103
7890: PUSH
7891: LD_INT 104
7893: PUSH
7894: LD_INT 105
7896: PUSH
7897: LD_INT 106
7899: PUSH
7900: LD_INT 107
7902: PUSH
7903: LD_INT 108
7905: PUSH
7906: LD_INT 109
7908: PUSH
7909: LD_INT 110
7911: PUSH
7912: LD_INT 111
7914: PUSH
7915: LD_INT 112
7917: PUSH
7918: LD_INT 114
7920: PUSH
7921: LD_INT 116
7923: PUSH
7924: LD_INT 117
7926: PUSH
7927: LD_INT 118
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: ST_TO_ADDR
7952: GO 9847
7954: LD_INT 11
7956: DOUBLE
7957: EQUAL
7958: IFTRUE 7962
7960: GO 8166
7962: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7963: LD_ADDR_VAR 0 2
7967: PUSH
7968: LD_INT 2
7970: PUSH
7971: LD_INT 3
7973: PUSH
7974: LD_INT 4
7976: PUSH
7977: LD_INT 5
7979: PUSH
7980: LD_INT 6
7982: PUSH
7983: LD_INT 7
7985: PUSH
7986: LD_INT 8
7988: PUSH
7989: LD_INT 9
7991: PUSH
7992: LD_INT 10
7994: PUSH
7995: LD_INT 11
7997: PUSH
7998: LD_INT 12
8000: PUSH
8001: LD_INT 13
8003: PUSH
8004: LD_INT 14
8006: PUSH
8007: LD_INT 15
8009: PUSH
8010: LD_INT 16
8012: PUSH
8013: LD_INT 17
8015: PUSH
8016: LD_INT 18
8018: PUSH
8019: LD_INT 19
8021: PUSH
8022: LD_INT 20
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 22
8030: PUSH
8031: LD_INT 23
8033: PUSH
8034: LD_INT 24
8036: PUSH
8037: LD_INT 25
8039: PUSH
8040: LD_INT 26
8042: PUSH
8043: LD_INT 28
8045: PUSH
8046: LD_INT 30
8048: PUSH
8049: LD_INT 31
8051: PUSH
8052: LD_INT 32
8054: PUSH
8055: LD_INT 34
8057: PUSH
8058: LD_INT 36
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 101
8096: PUSH
8097: LD_INT 102
8099: PUSH
8100: LD_INT 103
8102: PUSH
8103: LD_INT 104
8105: PUSH
8106: LD_INT 105
8108: PUSH
8109: LD_INT 106
8111: PUSH
8112: LD_INT 107
8114: PUSH
8115: LD_INT 108
8117: PUSH
8118: LD_INT 109
8120: PUSH
8121: LD_INT 110
8123: PUSH
8124: LD_INT 111
8126: PUSH
8127: LD_INT 112
8129: PUSH
8130: LD_INT 114
8132: PUSH
8133: LD_INT 116
8135: PUSH
8136: LD_INT 117
8138: PUSH
8139: LD_INT 118
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: ST_TO_ADDR
8164: GO 9847
8166: LD_INT 12
8168: DOUBLE
8169: EQUAL
8170: IFTRUE 8174
8172: GO 8394
8174: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8175: LD_ADDR_VAR 0 2
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: LD_INT 2
8185: PUSH
8186: LD_INT 3
8188: PUSH
8189: LD_INT 4
8191: PUSH
8192: LD_INT 5
8194: PUSH
8195: LD_INT 6
8197: PUSH
8198: LD_INT 7
8200: PUSH
8201: LD_INT 8
8203: PUSH
8204: LD_INT 9
8206: PUSH
8207: LD_INT 10
8209: PUSH
8210: LD_INT 11
8212: PUSH
8213: LD_INT 12
8215: PUSH
8216: LD_INT 13
8218: PUSH
8219: LD_INT 14
8221: PUSH
8222: LD_INT 15
8224: PUSH
8225: LD_INT 16
8227: PUSH
8228: LD_INT 17
8230: PUSH
8231: LD_INT 18
8233: PUSH
8234: LD_INT 19
8236: PUSH
8237: LD_INT 20
8239: PUSH
8240: LD_INT 21
8242: PUSH
8243: LD_INT 22
8245: PUSH
8246: LD_INT 23
8248: PUSH
8249: LD_INT 24
8251: PUSH
8252: LD_INT 25
8254: PUSH
8255: LD_INT 26
8257: PUSH
8258: LD_INT 27
8260: PUSH
8261: LD_INT 28
8263: PUSH
8264: LD_INT 30
8266: PUSH
8267: LD_INT 31
8269: PUSH
8270: LD_INT 32
8272: PUSH
8273: LD_INT 33
8275: PUSH
8276: LD_INT 34
8278: PUSH
8279: LD_INT 36
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 101
8320: PUSH
8321: LD_INT 102
8323: PUSH
8324: LD_INT 103
8326: PUSH
8327: LD_INT 104
8329: PUSH
8330: LD_INT 105
8332: PUSH
8333: LD_INT 106
8335: PUSH
8336: LD_INT 107
8338: PUSH
8339: LD_INT 108
8341: PUSH
8342: LD_INT 109
8344: PUSH
8345: LD_INT 110
8347: PUSH
8348: LD_INT 111
8350: PUSH
8351: LD_INT 112
8353: PUSH
8354: LD_INT 113
8356: PUSH
8357: LD_INT 114
8359: PUSH
8360: LD_INT 116
8362: PUSH
8363: LD_INT 117
8365: PUSH
8366: LD_INT 118
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: ST_TO_ADDR
8392: GO 9847
8394: LD_INT 13
8396: DOUBLE
8397: EQUAL
8398: IFTRUE 8402
8400: GO 8610
8402: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8403: LD_ADDR_VAR 0 2
8407: PUSH
8408: LD_INT 1
8410: PUSH
8411: LD_INT 2
8413: PUSH
8414: LD_INT 3
8416: PUSH
8417: LD_INT 4
8419: PUSH
8420: LD_INT 5
8422: PUSH
8423: LD_INT 8
8425: PUSH
8426: LD_INT 9
8428: PUSH
8429: LD_INT 10
8431: PUSH
8432: LD_INT 11
8434: PUSH
8435: LD_INT 12
8437: PUSH
8438: LD_INT 14
8440: PUSH
8441: LD_INT 15
8443: PUSH
8444: LD_INT 16
8446: PUSH
8447: LD_INT 17
8449: PUSH
8450: LD_INT 18
8452: PUSH
8453: LD_INT 19
8455: PUSH
8456: LD_INT 20
8458: PUSH
8459: LD_INT 21
8461: PUSH
8462: LD_INT 22
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 24
8470: PUSH
8471: LD_INT 25
8473: PUSH
8474: LD_INT 26
8476: PUSH
8477: LD_INT 27
8479: PUSH
8480: LD_INT 28
8482: PUSH
8483: LD_INT 30
8485: PUSH
8486: LD_INT 31
8488: PUSH
8489: LD_INT 32
8491: PUSH
8492: LD_INT 33
8494: PUSH
8495: LD_INT 34
8497: PUSH
8498: LD_INT 36
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 101
8536: PUSH
8537: LD_INT 102
8539: PUSH
8540: LD_INT 103
8542: PUSH
8543: LD_INT 104
8545: PUSH
8546: LD_INT 105
8548: PUSH
8549: LD_INT 106
8551: PUSH
8552: LD_INT 107
8554: PUSH
8555: LD_INT 108
8557: PUSH
8558: LD_INT 109
8560: PUSH
8561: LD_INT 110
8563: PUSH
8564: LD_INT 111
8566: PUSH
8567: LD_INT 112
8569: PUSH
8570: LD_INT 113
8572: PUSH
8573: LD_INT 114
8575: PUSH
8576: LD_INT 116
8578: PUSH
8579: LD_INT 117
8581: PUSH
8582: LD_INT 118
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: ST_TO_ADDR
8608: GO 9847
8610: LD_INT 14
8612: DOUBLE
8613: EQUAL
8614: IFTRUE 8618
8616: GO 8842
8618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 1
8626: PUSH
8627: LD_INT 2
8629: PUSH
8630: LD_INT 3
8632: PUSH
8633: LD_INT 4
8635: PUSH
8636: LD_INT 5
8638: PUSH
8639: LD_INT 6
8641: PUSH
8642: LD_INT 7
8644: PUSH
8645: LD_INT 8
8647: PUSH
8648: LD_INT 9
8650: PUSH
8651: LD_INT 10
8653: PUSH
8654: LD_INT 11
8656: PUSH
8657: LD_INT 12
8659: PUSH
8660: LD_INT 13
8662: PUSH
8663: LD_INT 14
8665: PUSH
8666: LD_INT 15
8668: PUSH
8669: LD_INT 16
8671: PUSH
8672: LD_INT 17
8674: PUSH
8675: LD_INT 18
8677: PUSH
8678: LD_INT 19
8680: PUSH
8681: LD_INT 20
8683: PUSH
8684: LD_INT 21
8686: PUSH
8687: LD_INT 22
8689: PUSH
8690: LD_INT 23
8692: PUSH
8693: LD_INT 24
8695: PUSH
8696: LD_INT 25
8698: PUSH
8699: LD_INT 26
8701: PUSH
8702: LD_INT 27
8704: PUSH
8705: LD_INT 28
8707: PUSH
8708: LD_INT 29
8710: PUSH
8711: LD_INT 30
8713: PUSH
8714: LD_INT 31
8716: PUSH
8717: LD_INT 32
8719: PUSH
8720: LD_INT 33
8722: PUSH
8723: LD_INT 34
8725: PUSH
8726: LD_INT 36
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 101
8768: PUSH
8769: LD_INT 102
8771: PUSH
8772: LD_INT 103
8774: PUSH
8775: LD_INT 104
8777: PUSH
8778: LD_INT 105
8780: PUSH
8781: LD_INT 106
8783: PUSH
8784: LD_INT 107
8786: PUSH
8787: LD_INT 108
8789: PUSH
8790: LD_INT 109
8792: PUSH
8793: LD_INT 110
8795: PUSH
8796: LD_INT 111
8798: PUSH
8799: LD_INT 112
8801: PUSH
8802: LD_INT 113
8804: PUSH
8805: LD_INT 114
8807: PUSH
8808: LD_INT 116
8810: PUSH
8811: LD_INT 117
8813: PUSH
8814: LD_INT 118
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: ST_TO_ADDR
8840: GO 9847
8842: LD_INT 15
8844: DOUBLE
8845: EQUAL
8846: IFTRUE 8850
8848: GO 9074
8850: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8851: LD_ADDR_VAR 0 2
8855: PUSH
8856: LD_INT 1
8858: PUSH
8859: LD_INT 2
8861: PUSH
8862: LD_INT 3
8864: PUSH
8865: LD_INT 4
8867: PUSH
8868: LD_INT 5
8870: PUSH
8871: LD_INT 6
8873: PUSH
8874: LD_INT 7
8876: PUSH
8877: LD_INT 8
8879: PUSH
8880: LD_INT 9
8882: PUSH
8883: LD_INT 10
8885: PUSH
8886: LD_INT 11
8888: PUSH
8889: LD_INT 12
8891: PUSH
8892: LD_INT 13
8894: PUSH
8895: LD_INT 14
8897: PUSH
8898: LD_INT 15
8900: PUSH
8901: LD_INT 16
8903: PUSH
8904: LD_INT 17
8906: PUSH
8907: LD_INT 18
8909: PUSH
8910: LD_INT 19
8912: PUSH
8913: LD_INT 20
8915: PUSH
8916: LD_INT 21
8918: PUSH
8919: LD_INT 22
8921: PUSH
8922: LD_INT 23
8924: PUSH
8925: LD_INT 24
8927: PUSH
8928: LD_INT 25
8930: PUSH
8931: LD_INT 26
8933: PUSH
8934: LD_INT 27
8936: PUSH
8937: LD_INT 28
8939: PUSH
8940: LD_INT 29
8942: PUSH
8943: LD_INT 30
8945: PUSH
8946: LD_INT 31
8948: PUSH
8949: LD_INT 32
8951: PUSH
8952: LD_INT 33
8954: PUSH
8955: LD_INT 34
8957: PUSH
8958: LD_INT 36
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 101
9000: PUSH
9001: LD_INT 102
9003: PUSH
9004: LD_INT 103
9006: PUSH
9007: LD_INT 104
9009: PUSH
9010: LD_INT 105
9012: PUSH
9013: LD_INT 106
9015: PUSH
9016: LD_INT 107
9018: PUSH
9019: LD_INT 108
9021: PUSH
9022: LD_INT 109
9024: PUSH
9025: LD_INT 110
9027: PUSH
9028: LD_INT 111
9030: PUSH
9031: LD_INT 112
9033: PUSH
9034: LD_INT 113
9036: PUSH
9037: LD_INT 114
9039: PUSH
9040: LD_INT 116
9042: PUSH
9043: LD_INT 117
9045: PUSH
9046: LD_INT 118
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: ST_TO_ADDR
9072: GO 9847
9074: LD_INT 16
9076: DOUBLE
9077: EQUAL
9078: IFTRUE 9082
9080: GO 9218
9082: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9083: LD_ADDR_VAR 0 2
9087: PUSH
9088: LD_INT 2
9090: PUSH
9091: LD_INT 4
9093: PUSH
9094: LD_INT 5
9096: PUSH
9097: LD_INT 7
9099: PUSH
9100: LD_INT 11
9102: PUSH
9103: LD_INT 12
9105: PUSH
9106: LD_INT 15
9108: PUSH
9109: LD_INT 16
9111: PUSH
9112: LD_INT 20
9114: PUSH
9115: LD_INT 21
9117: PUSH
9118: LD_INT 22
9120: PUSH
9121: LD_INT 23
9123: PUSH
9124: LD_INT 25
9126: PUSH
9127: LD_INT 26
9129: PUSH
9130: LD_INT 30
9132: PUSH
9133: LD_INT 31
9135: PUSH
9136: LD_INT 32
9138: PUSH
9139: LD_INT 33
9141: PUSH
9142: LD_INT 34
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: PUSH
9166: LD_INT 101
9168: PUSH
9169: LD_INT 102
9171: PUSH
9172: LD_INT 103
9174: PUSH
9175: LD_INT 106
9177: PUSH
9178: LD_INT 108
9180: PUSH
9181: LD_INT 112
9183: PUSH
9184: LD_INT 113
9186: PUSH
9187: LD_INT 114
9189: PUSH
9190: LD_INT 116
9192: PUSH
9193: LD_INT 117
9195: PUSH
9196: LD_INT 118
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: ST_TO_ADDR
9216: GO 9847
9218: LD_INT 17
9220: DOUBLE
9221: EQUAL
9222: IFTRUE 9226
9224: GO 9450
9226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9227: LD_ADDR_VAR 0 2
9231: PUSH
9232: LD_INT 1
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: LD_INT 3
9240: PUSH
9241: LD_INT 4
9243: PUSH
9244: LD_INT 5
9246: PUSH
9247: LD_INT 6
9249: PUSH
9250: LD_INT 7
9252: PUSH
9253: LD_INT 8
9255: PUSH
9256: LD_INT 9
9258: PUSH
9259: LD_INT 10
9261: PUSH
9262: LD_INT 11
9264: PUSH
9265: LD_INT 12
9267: PUSH
9268: LD_INT 13
9270: PUSH
9271: LD_INT 14
9273: PUSH
9274: LD_INT 15
9276: PUSH
9277: LD_INT 16
9279: PUSH
9280: LD_INT 17
9282: PUSH
9283: LD_INT 18
9285: PUSH
9286: LD_INT 19
9288: PUSH
9289: LD_INT 20
9291: PUSH
9292: LD_INT 21
9294: PUSH
9295: LD_INT 22
9297: PUSH
9298: LD_INT 23
9300: PUSH
9301: LD_INT 24
9303: PUSH
9304: LD_INT 25
9306: PUSH
9307: LD_INT 26
9309: PUSH
9310: LD_INT 27
9312: PUSH
9313: LD_INT 28
9315: PUSH
9316: LD_INT 29
9318: PUSH
9319: LD_INT 30
9321: PUSH
9322: LD_INT 31
9324: PUSH
9325: LD_INT 32
9327: PUSH
9328: LD_INT 33
9330: PUSH
9331: LD_INT 34
9333: PUSH
9334: LD_INT 36
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 101
9376: PUSH
9377: LD_INT 102
9379: PUSH
9380: LD_INT 103
9382: PUSH
9383: LD_INT 104
9385: PUSH
9386: LD_INT 105
9388: PUSH
9389: LD_INT 106
9391: PUSH
9392: LD_INT 107
9394: PUSH
9395: LD_INT 108
9397: PUSH
9398: LD_INT 109
9400: PUSH
9401: LD_INT 110
9403: PUSH
9404: LD_INT 111
9406: PUSH
9407: LD_INT 112
9409: PUSH
9410: LD_INT 113
9412: PUSH
9413: LD_INT 114
9415: PUSH
9416: LD_INT 116
9418: PUSH
9419: LD_INT 117
9421: PUSH
9422: LD_INT 118
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: ST_TO_ADDR
9448: GO 9847
9450: LD_INT 18
9452: DOUBLE
9453: EQUAL
9454: IFTRUE 9458
9456: GO 9606
9458: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9459: LD_ADDR_VAR 0 2
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: LD_INT 4
9469: PUSH
9470: LD_INT 5
9472: PUSH
9473: LD_INT 7
9475: PUSH
9476: LD_INT 11
9478: PUSH
9479: LD_INT 12
9481: PUSH
9482: LD_INT 15
9484: PUSH
9485: LD_INT 16
9487: PUSH
9488: LD_INT 20
9490: PUSH
9491: LD_INT 21
9493: PUSH
9494: LD_INT 22
9496: PUSH
9497: LD_INT 23
9499: PUSH
9500: LD_INT 25
9502: PUSH
9503: LD_INT 26
9505: PUSH
9506: LD_INT 30
9508: PUSH
9509: LD_INT 31
9511: PUSH
9512: LD_INT 32
9514: PUSH
9515: LD_INT 33
9517: PUSH
9518: LD_INT 34
9520: PUSH
9521: LD_INT 35
9523: PUSH
9524: LD_INT 36
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 101
9552: PUSH
9553: LD_INT 102
9555: PUSH
9556: LD_INT 103
9558: PUSH
9559: LD_INT 106
9561: PUSH
9562: LD_INT 108
9564: PUSH
9565: LD_INT 112
9567: PUSH
9568: LD_INT 113
9570: PUSH
9571: LD_INT 114
9573: PUSH
9574: LD_INT 115
9576: PUSH
9577: LD_INT 116
9579: PUSH
9580: LD_INT 117
9582: PUSH
9583: LD_INT 118
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: ST_TO_ADDR
9604: GO 9847
9606: LD_INT 19
9608: DOUBLE
9609: EQUAL
9610: IFTRUE 9614
9612: GO 9846
9614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9615: LD_ADDR_VAR 0 2
9619: PUSH
9620: LD_INT 1
9622: PUSH
9623: LD_INT 2
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 4
9631: PUSH
9632: LD_INT 5
9634: PUSH
9635: LD_INT 6
9637: PUSH
9638: LD_INT 7
9640: PUSH
9641: LD_INT 8
9643: PUSH
9644: LD_INT 9
9646: PUSH
9647: LD_INT 10
9649: PUSH
9650: LD_INT 11
9652: PUSH
9653: LD_INT 12
9655: PUSH
9656: LD_INT 13
9658: PUSH
9659: LD_INT 14
9661: PUSH
9662: LD_INT 15
9664: PUSH
9665: LD_INT 16
9667: PUSH
9668: LD_INT 17
9670: PUSH
9671: LD_INT 18
9673: PUSH
9674: LD_INT 19
9676: PUSH
9677: LD_INT 20
9679: PUSH
9680: LD_INT 21
9682: PUSH
9683: LD_INT 22
9685: PUSH
9686: LD_INT 23
9688: PUSH
9689: LD_INT 24
9691: PUSH
9692: LD_INT 25
9694: PUSH
9695: LD_INT 26
9697: PUSH
9698: LD_INT 27
9700: PUSH
9701: LD_INT 28
9703: PUSH
9704: LD_INT 29
9706: PUSH
9707: LD_INT 30
9709: PUSH
9710: LD_INT 31
9712: PUSH
9713: LD_INT 32
9715: PUSH
9716: LD_INT 33
9718: PUSH
9719: LD_INT 34
9721: PUSH
9722: LD_INT 35
9724: PUSH
9725: LD_INT 36
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 101
9768: PUSH
9769: LD_INT 102
9771: PUSH
9772: LD_INT 103
9774: PUSH
9775: LD_INT 104
9777: PUSH
9778: LD_INT 105
9780: PUSH
9781: LD_INT 106
9783: PUSH
9784: LD_INT 107
9786: PUSH
9787: LD_INT 108
9789: PUSH
9790: LD_INT 109
9792: PUSH
9793: LD_INT 110
9795: PUSH
9796: LD_INT 111
9798: PUSH
9799: LD_INT 112
9801: PUSH
9802: LD_INT 113
9804: PUSH
9805: LD_INT 114
9807: PUSH
9808: LD_INT 115
9810: PUSH
9811: LD_INT 116
9813: PUSH
9814: LD_INT 117
9816: PUSH
9817: LD_INT 118
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: ST_TO_ADDR
9844: GO 9847
9846: POP
// end else
9847: GO 10078
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9849: LD_ADDR_VAR 0 2
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: LD_INT 2
9859: PUSH
9860: LD_INT 3
9862: PUSH
9863: LD_INT 4
9865: PUSH
9866: LD_INT 5
9868: PUSH
9869: LD_INT 6
9871: PUSH
9872: LD_INT 7
9874: PUSH
9875: LD_INT 8
9877: PUSH
9878: LD_INT 9
9880: PUSH
9881: LD_INT 10
9883: PUSH
9884: LD_INT 11
9886: PUSH
9887: LD_INT 12
9889: PUSH
9890: LD_INT 13
9892: PUSH
9893: LD_INT 14
9895: PUSH
9896: LD_INT 15
9898: PUSH
9899: LD_INT 16
9901: PUSH
9902: LD_INT 17
9904: PUSH
9905: LD_INT 18
9907: PUSH
9908: LD_INT 19
9910: PUSH
9911: LD_INT 20
9913: PUSH
9914: LD_INT 21
9916: PUSH
9917: LD_INT 22
9919: PUSH
9920: LD_INT 23
9922: PUSH
9923: LD_INT 24
9925: PUSH
9926: LD_INT 25
9928: PUSH
9929: LD_INT 26
9931: PUSH
9932: LD_INT 27
9934: PUSH
9935: LD_INT 28
9937: PUSH
9938: LD_INT 29
9940: PUSH
9941: LD_INT 30
9943: PUSH
9944: LD_INT 31
9946: PUSH
9947: LD_INT 32
9949: PUSH
9950: LD_INT 33
9952: PUSH
9953: LD_INT 34
9955: PUSH
9956: LD_INT 35
9958: PUSH
9959: LD_INT 36
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 101
10002: PUSH
10003: LD_INT 102
10005: PUSH
10006: LD_INT 103
10008: PUSH
10009: LD_INT 104
10011: PUSH
10012: LD_INT 105
10014: PUSH
10015: LD_INT 106
10017: PUSH
10018: LD_INT 107
10020: PUSH
10021: LD_INT 108
10023: PUSH
10024: LD_INT 109
10026: PUSH
10027: LD_INT 110
10029: PUSH
10030: LD_INT 111
10032: PUSH
10033: LD_INT 112
10035: PUSH
10036: LD_INT 113
10038: PUSH
10039: LD_INT 114
10041: PUSH
10042: LD_INT 115
10044: PUSH
10045: LD_INT 116
10047: PUSH
10048: LD_INT 117
10050: PUSH
10051: LD_INT 118
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: ST_TO_ADDR
// if result then
10078: LD_VAR 0 2
10082: IFFALSE 10868
// begin normal :=  ;
10084: LD_ADDR_VAR 0 5
10088: PUSH
10089: LD_STRING 
10091: ST_TO_ADDR
// hardcore :=  ;
10092: LD_ADDR_VAR 0 6
10096: PUSH
10097: LD_STRING 
10099: ST_TO_ADDR
// active :=  ;
10100: LD_ADDR_VAR 0 7
10104: PUSH
10105: LD_STRING 
10107: ST_TO_ADDR
// for i = 1 to normalCounter do
10108: LD_ADDR_VAR 0 8
10112: PUSH
10113: DOUBLE
10114: LD_INT 1
10116: DEC
10117: ST_TO_ADDR
10118: LD_EXP 25
10122: PUSH
10123: FOR_TO
10124: IFFALSE 10225
// begin tmp := 0 ;
10126: LD_ADDR_VAR 0 3
10130: PUSH
10131: LD_STRING 0
10133: ST_TO_ADDR
// if result [ 1 ] then
10134: LD_VAR 0 2
10138: PUSH
10139: LD_INT 1
10141: ARRAY
10142: IFFALSE 10207
// if result [ 1 ] [ 1 ] = i then
10144: LD_VAR 0 2
10148: PUSH
10149: LD_INT 1
10151: ARRAY
10152: PUSH
10153: LD_INT 1
10155: ARRAY
10156: PUSH
10157: LD_VAR 0 8
10161: EQUAL
10162: IFFALSE 10207
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10164: LD_ADDR_VAR 0 2
10168: PUSH
10169: LD_VAR 0 2
10173: PPUSH
10174: LD_INT 1
10176: PPUSH
10177: LD_VAR 0 2
10181: PUSH
10182: LD_INT 1
10184: ARRAY
10185: PPUSH
10186: LD_INT 1
10188: PPUSH
10189: CALL_OW 3
10193: PPUSH
10194: CALL_OW 1
10198: ST_TO_ADDR
// tmp := 1 ;
10199: LD_ADDR_VAR 0 3
10203: PUSH
10204: LD_STRING 1
10206: ST_TO_ADDR
// end ; normal := normal & tmp ;
10207: LD_ADDR_VAR 0 5
10211: PUSH
10212: LD_VAR 0 5
10216: PUSH
10217: LD_VAR 0 3
10221: STR
10222: ST_TO_ADDR
// end ;
10223: GO 10123
10225: POP
10226: POP
// for i = 1 to hardcoreCounter do
10227: LD_ADDR_VAR 0 8
10231: PUSH
10232: DOUBLE
10233: LD_INT 1
10235: DEC
10236: ST_TO_ADDR
10237: LD_EXP 26
10241: PUSH
10242: FOR_TO
10243: IFFALSE 10348
// begin tmp := 0 ;
10245: LD_ADDR_VAR 0 3
10249: PUSH
10250: LD_STRING 0
10252: ST_TO_ADDR
// if result [ 2 ] then
10253: LD_VAR 0 2
10257: PUSH
10258: LD_INT 2
10260: ARRAY
10261: IFFALSE 10330
// if result [ 2 ] [ 1 ] = 100 + i then
10263: LD_VAR 0 2
10267: PUSH
10268: LD_INT 2
10270: ARRAY
10271: PUSH
10272: LD_INT 1
10274: ARRAY
10275: PUSH
10276: LD_INT 100
10278: PUSH
10279: LD_VAR 0 8
10283: PLUS
10284: EQUAL
10285: IFFALSE 10330
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10287: LD_ADDR_VAR 0 2
10291: PUSH
10292: LD_VAR 0 2
10296: PPUSH
10297: LD_INT 2
10299: PPUSH
10300: LD_VAR 0 2
10304: PUSH
10305: LD_INT 2
10307: ARRAY
10308: PPUSH
10309: LD_INT 1
10311: PPUSH
10312: CALL_OW 3
10316: PPUSH
10317: CALL_OW 1
10321: ST_TO_ADDR
// tmp := 1 ;
10322: LD_ADDR_VAR 0 3
10326: PUSH
10327: LD_STRING 1
10329: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10330: LD_ADDR_VAR 0 6
10334: PUSH
10335: LD_VAR 0 6
10339: PUSH
10340: LD_VAR 0 3
10344: STR
10345: ST_TO_ADDR
// end ;
10346: GO 10242
10348: POP
10349: POP
// if isGameLoad then
10350: LD_VAR 0 1
10354: IFFALSE 10829
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10356: LD_ADDR_VAR 0 4
10360: PUSH
10361: LD_EXP 29
10365: PUSH
10366: LD_EXP 28
10370: PUSH
10371: LD_EXP 30
10375: PUSH
10376: LD_EXP 27
10380: PUSH
10381: LD_EXP 31
10385: PUSH
10386: LD_EXP 32
10390: PUSH
10391: LD_EXP 33
10395: PUSH
10396: LD_EXP 34
10400: PUSH
10401: LD_EXP 35
10405: PUSH
10406: LD_EXP 36
10410: PUSH
10411: LD_EXP 37
10415: PUSH
10416: LD_EXP 38
10420: PUSH
10421: LD_EXP 39
10425: PUSH
10426: LD_EXP 40
10430: PUSH
10431: LD_EXP 48
10435: PUSH
10436: LD_EXP 49
10440: PUSH
10441: LD_EXP 50
10445: PUSH
10446: LD_EXP 51
10450: PUSH
10451: LD_EXP 53
10455: PUSH
10456: LD_EXP 54
10460: PUSH
10461: LD_EXP 55
10465: PUSH
10466: LD_EXP 58
10470: PUSH
10471: LD_EXP 60
10475: PUSH
10476: LD_EXP 61
10480: PUSH
10481: LD_EXP 62
10485: PUSH
10486: LD_EXP 64
10490: PUSH
10491: LD_EXP 65
10495: PUSH
10496: LD_EXP 68
10500: PUSH
10501: LD_EXP 69
10505: PUSH
10506: LD_EXP 70
10510: PUSH
10511: LD_EXP 71
10515: PUSH
10516: LD_EXP 72
10520: PUSH
10521: LD_EXP 73
10525: PUSH
10526: LD_EXP 74
10530: PUSH
10531: LD_EXP 75
10535: PUSH
10536: LD_EXP 76
10540: PUSH
10541: LD_EXP 41
10545: PUSH
10546: LD_EXP 42
10550: PUSH
10551: LD_EXP 45
10555: PUSH
10556: LD_EXP 46
10560: PUSH
10561: LD_EXP 47
10565: PUSH
10566: LD_EXP 43
10570: PUSH
10571: LD_EXP 44
10575: PUSH
10576: LD_EXP 52
10580: PUSH
10581: LD_EXP 56
10585: PUSH
10586: LD_EXP 57
10590: PUSH
10591: LD_EXP 59
10595: PUSH
10596: LD_EXP 63
10600: PUSH
10601: LD_EXP 66
10605: PUSH
10606: LD_EXP 67
10610: PUSH
10611: LD_EXP 77
10615: PUSH
10616: LD_EXP 78
10620: PUSH
10621: LD_EXP 79
10625: PUSH
10626: LD_EXP 80
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: ST_TO_ADDR
// tmp :=  ;
10687: LD_ADDR_VAR 0 3
10691: PUSH
10692: LD_STRING 
10694: ST_TO_ADDR
// for i = 1 to normalCounter do
10695: LD_ADDR_VAR 0 8
10699: PUSH
10700: DOUBLE
10701: LD_INT 1
10703: DEC
10704: ST_TO_ADDR
10705: LD_EXP 25
10709: PUSH
10710: FOR_TO
10711: IFFALSE 10747
// begin if flags [ i ] then
10713: LD_VAR 0 4
10717: PUSH
10718: LD_VAR 0 8
10722: ARRAY
10723: IFFALSE 10745
// tmp := tmp & i & ; ;
10725: LD_ADDR_VAR 0 3
10729: PUSH
10730: LD_VAR 0 3
10734: PUSH
10735: LD_VAR 0 8
10739: STR
10740: PUSH
10741: LD_STRING ;
10743: STR
10744: ST_TO_ADDR
// end ;
10745: GO 10710
10747: POP
10748: POP
// for i = 1 to hardcoreCounter do
10749: LD_ADDR_VAR 0 8
10753: PUSH
10754: DOUBLE
10755: LD_INT 1
10757: DEC
10758: ST_TO_ADDR
10759: LD_EXP 26
10763: PUSH
10764: FOR_TO
10765: IFFALSE 10811
// begin if flags [ normalCounter + i ] then
10767: LD_VAR 0 4
10771: PUSH
10772: LD_EXP 25
10776: PUSH
10777: LD_VAR 0 8
10781: PLUS
10782: ARRAY
10783: IFFALSE 10809
// tmp := tmp & ( 100 + i ) & ; ;
10785: LD_ADDR_VAR 0 3
10789: PUSH
10790: LD_VAR 0 3
10794: PUSH
10795: LD_INT 100
10797: PUSH
10798: LD_VAR 0 8
10802: PLUS
10803: STR
10804: PUSH
10805: LD_STRING ;
10807: STR
10808: ST_TO_ADDR
// end ;
10809: GO 10764
10811: POP
10812: POP
// if tmp then
10813: LD_VAR 0 3
10817: IFFALSE 10829
// active := tmp ;
10819: LD_ADDR_VAR 0 7
10823: PUSH
10824: LD_VAR 0 3
10828: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10829: LD_STRING getStreamItemsFromMission("
10831: PUSH
10832: LD_VAR 0 5
10836: STR
10837: PUSH
10838: LD_STRING ","
10840: STR
10841: PUSH
10842: LD_VAR 0 6
10846: STR
10847: PUSH
10848: LD_STRING ","
10850: STR
10851: PUSH
10852: LD_VAR 0 7
10856: STR
10857: PUSH
10858: LD_STRING ")
10860: STR
10861: PPUSH
10862: CALL_OW 559
// end else
10866: GO 10875
// ToLua ( getStreamItemsFromMission("","","") ) ;
10868: LD_STRING getStreamItemsFromMission("","","")
10870: PPUSH
10871: CALL_OW 559
// end ;
10875: LD_VAR 0 2
10879: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10880: LD_EXP 24
10884: PUSH
10885: LD_EXP 29
10889: AND
10890: IFFALSE 11014
10892: GO 10894
10894: DISABLE
10895: LD_INT 0
10897: PPUSH
10898: PPUSH
// begin enable ;
10899: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10900: LD_ADDR_VAR 0 2
10904: PUSH
10905: LD_INT 22
10907: PUSH
10908: LD_OWVAR 2
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 2
10919: PUSH
10920: LD_INT 34
10922: PUSH
10923: LD_INT 7
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 34
10932: PUSH
10933: LD_INT 45
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 34
10942: PUSH
10943: LD_INT 28
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: LD_INT 34
10952: PUSH
10953: LD_INT 47
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PPUSH
10971: CALL_OW 69
10975: ST_TO_ADDR
// if not tmp then
10976: LD_VAR 0 2
10980: NOT
10981: IFFALSE 10985
// exit ;
10983: GO 11014
// for i in tmp do
10985: LD_ADDR_VAR 0 1
10989: PUSH
10990: LD_VAR 0 2
10994: PUSH
10995: FOR_IN
10996: IFFALSE 11012
// begin SetLives ( i , 0 ) ;
10998: LD_VAR 0 1
11002: PPUSH
11003: LD_INT 0
11005: PPUSH
11006: CALL_OW 234
// end ;
11010: GO 10995
11012: POP
11013: POP
// end ;
11014: PPOPN 2
11016: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11017: LD_EXP 24
11021: PUSH
11022: LD_EXP 30
11026: AND
11027: IFFALSE 11111
11029: GO 11031
11031: DISABLE
11032: LD_INT 0
11034: PPUSH
11035: PPUSH
// begin enable ;
11036: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11037: LD_ADDR_VAR 0 2
11041: PUSH
11042: LD_INT 22
11044: PUSH
11045: LD_OWVAR 2
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 32
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PPUSH
11068: CALL_OW 69
11072: ST_TO_ADDR
// if not tmp then
11073: LD_VAR 0 2
11077: NOT
11078: IFFALSE 11082
// exit ;
11080: GO 11111
// for i in tmp do
11082: LD_ADDR_VAR 0 1
11086: PUSH
11087: LD_VAR 0 2
11091: PUSH
11092: FOR_IN
11093: IFFALSE 11109
// begin SetLives ( i , 0 ) ;
11095: LD_VAR 0 1
11099: PPUSH
11100: LD_INT 0
11102: PPUSH
11103: CALL_OW 234
// end ;
11107: GO 11092
11109: POP
11110: POP
// end ;
11111: PPOPN 2
11113: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11114: LD_EXP 24
11118: PUSH
11119: LD_EXP 27
11123: AND
11124: IFFALSE 11217
11126: GO 11128
11128: DISABLE
11129: LD_INT 0
11131: PPUSH
// begin enable ;
11132: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11133: LD_ADDR_VAR 0 1
11137: PUSH
11138: LD_INT 22
11140: PUSH
11141: LD_OWVAR 2
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 2
11152: PUSH
11153: LD_INT 25
11155: PUSH
11156: LD_INT 5
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 25
11165: PUSH
11166: LD_INT 9
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 25
11175: PUSH
11176: LD_INT 8
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PPUSH
11193: CALL_OW 69
11197: PUSH
11198: FOR_IN
11199: IFFALSE 11215
// begin SetClass ( i , 1 ) ;
11201: LD_VAR 0 1
11205: PPUSH
11206: LD_INT 1
11208: PPUSH
11209: CALL_OW 336
// end ;
11213: GO 11198
11215: POP
11216: POP
// end ;
11217: PPOPN 1
11219: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11220: LD_EXP 24
11224: PUSH
11225: LD_EXP 28
11229: AND
11230: PUSH
11231: LD_OWVAR 65
11235: PUSH
11236: LD_INT 7
11238: LESS
11239: AND
11240: IFFALSE 11254
11242: GO 11244
11244: DISABLE
// begin enable ;
11245: ENABLE
// game_speed := 7 ;
11246: LD_ADDR_OWVAR 65
11250: PUSH
11251: LD_INT 7
11253: ST_TO_ADDR
// end ;
11254: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11255: LD_EXP 24
11259: PUSH
11260: LD_EXP 31
11264: AND
11265: IFFALSE 11467
11267: GO 11269
11269: DISABLE
11270: LD_INT 0
11272: PPUSH
11273: PPUSH
11274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11275: LD_ADDR_VAR 0 3
11279: PUSH
11280: LD_INT 81
11282: PUSH
11283: LD_OWVAR 2
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: LD_INT 21
11294: PUSH
11295: LD_INT 1
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PPUSH
11306: CALL_OW 69
11310: ST_TO_ADDR
// if not tmp then
11311: LD_VAR 0 3
11315: NOT
11316: IFFALSE 11320
// exit ;
11318: GO 11467
// if tmp > 5 then
11320: LD_VAR 0 3
11324: PUSH
11325: LD_INT 5
11327: GREATER
11328: IFFALSE 11340
// k := 5 else
11330: LD_ADDR_VAR 0 2
11334: PUSH
11335: LD_INT 5
11337: ST_TO_ADDR
11338: GO 11350
// k := tmp ;
11340: LD_ADDR_VAR 0 2
11344: PUSH
11345: LD_VAR 0 3
11349: ST_TO_ADDR
// for i := 1 to k do
11350: LD_ADDR_VAR 0 1
11354: PUSH
11355: DOUBLE
11356: LD_INT 1
11358: DEC
11359: ST_TO_ADDR
11360: LD_VAR 0 2
11364: PUSH
11365: FOR_TO
11366: IFFALSE 11465
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11368: LD_VAR 0 3
11372: PUSH
11373: LD_VAR 0 1
11377: ARRAY
11378: PPUSH
11379: LD_VAR 0 1
11383: PUSH
11384: LD_INT 4
11386: MOD
11387: PUSH
11388: LD_INT 1
11390: PLUS
11391: PPUSH
11392: CALL_OW 259
11396: PUSH
11397: LD_INT 10
11399: LESS
11400: IFFALSE 11463
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11402: LD_VAR 0 3
11406: PUSH
11407: LD_VAR 0 1
11411: ARRAY
11412: PPUSH
11413: LD_VAR 0 1
11417: PUSH
11418: LD_INT 4
11420: MOD
11421: PUSH
11422: LD_INT 1
11424: PLUS
11425: PPUSH
11426: LD_VAR 0 3
11430: PUSH
11431: LD_VAR 0 1
11435: ARRAY
11436: PPUSH
11437: LD_VAR 0 1
11441: PUSH
11442: LD_INT 4
11444: MOD
11445: PUSH
11446: LD_INT 1
11448: PLUS
11449: PPUSH
11450: CALL_OW 259
11454: PUSH
11455: LD_INT 1
11457: PLUS
11458: PPUSH
11459: CALL_OW 237
11463: GO 11365
11465: POP
11466: POP
// end ;
11467: PPOPN 3
11469: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11470: LD_EXP 24
11474: PUSH
11475: LD_EXP 32
11479: AND
11480: IFFALSE 11500
11482: GO 11484
11484: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11485: LD_INT 4
11487: PPUSH
11488: LD_OWVAR 2
11492: PPUSH
11493: LD_INT 0
11495: PPUSH
11496: CALL_OW 324
11500: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11501: LD_EXP 24
11505: PUSH
11506: LD_EXP 61
11510: AND
11511: IFFALSE 11531
11513: GO 11515
11515: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11516: LD_INT 19
11518: PPUSH
11519: LD_OWVAR 2
11523: PPUSH
11524: LD_INT 0
11526: PPUSH
11527: CALL_OW 324
11531: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11532: LD_EXP 24
11536: PUSH
11537: LD_EXP 33
11541: AND
11542: IFFALSE 11644
11544: GO 11546
11546: DISABLE
11547: LD_INT 0
11549: PPUSH
11550: PPUSH
// begin enable ;
11551: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11552: LD_ADDR_VAR 0 2
11556: PUSH
11557: LD_INT 22
11559: PUSH
11560: LD_OWVAR 2
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 2
11571: PUSH
11572: LD_INT 34
11574: PUSH
11575: LD_INT 11
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: LD_INT 34
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PPUSH
11601: CALL_OW 69
11605: ST_TO_ADDR
// if not tmp then
11606: LD_VAR 0 2
11610: NOT
11611: IFFALSE 11615
// exit ;
11613: GO 11644
// for i in tmp do
11615: LD_ADDR_VAR 0 1
11619: PUSH
11620: LD_VAR 0 2
11624: PUSH
11625: FOR_IN
11626: IFFALSE 11642
// begin SetLives ( i , 0 ) ;
11628: LD_VAR 0 1
11632: PPUSH
11633: LD_INT 0
11635: PPUSH
11636: CALL_OW 234
// end ;
11640: GO 11625
11642: POP
11643: POP
// end ;
11644: PPOPN 2
11646: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11647: LD_EXP 24
11651: PUSH
11652: LD_EXP 34
11656: AND
11657: IFFALSE 11677
11659: GO 11661
11661: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11662: LD_INT 32
11664: PPUSH
11665: LD_OWVAR 2
11669: PPUSH
11670: LD_INT 0
11672: PPUSH
11673: CALL_OW 324
11677: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11678: LD_EXP 24
11682: PUSH
11683: LD_EXP 35
11687: AND
11688: IFFALSE 11869
11690: GO 11692
11692: DISABLE
11693: LD_INT 0
11695: PPUSH
11696: PPUSH
11697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11698: LD_ADDR_VAR 0 2
11702: PUSH
11703: LD_INT 22
11705: PUSH
11706: LD_OWVAR 2
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: LD_INT 33
11717: PUSH
11718: LD_INT 3
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 69
11733: ST_TO_ADDR
// if not tmp then
11734: LD_VAR 0 2
11738: NOT
11739: IFFALSE 11743
// exit ;
11741: GO 11869
// side := 0 ;
11743: LD_ADDR_VAR 0 3
11747: PUSH
11748: LD_INT 0
11750: ST_TO_ADDR
// for i := 1 to 8 do
11751: LD_ADDR_VAR 0 1
11755: PUSH
11756: DOUBLE
11757: LD_INT 1
11759: DEC
11760: ST_TO_ADDR
11761: LD_INT 8
11763: PUSH
11764: FOR_TO
11765: IFFALSE 11813
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11767: LD_OWVAR 2
11771: PUSH
11772: LD_VAR 0 1
11776: NONEQUAL
11777: PUSH
11778: LD_OWVAR 2
11782: PPUSH
11783: LD_VAR 0 1
11787: PPUSH
11788: CALL_OW 81
11792: PUSH
11793: LD_INT 2
11795: EQUAL
11796: AND
11797: IFFALSE 11811
// begin side := i ;
11799: LD_ADDR_VAR 0 3
11803: PUSH
11804: LD_VAR 0 1
11808: ST_TO_ADDR
// break ;
11809: GO 11813
// end ;
11811: GO 11764
11813: POP
11814: POP
// if not side then
11815: LD_VAR 0 3
11819: NOT
11820: IFFALSE 11824
// exit ;
11822: GO 11869
// for i := 1 to tmp do
11824: LD_ADDR_VAR 0 1
11828: PUSH
11829: DOUBLE
11830: LD_INT 1
11832: DEC
11833: ST_TO_ADDR
11834: LD_VAR 0 2
11838: PUSH
11839: FOR_TO
11840: IFFALSE 11867
// if Prob ( 60 ) then
11842: LD_INT 60
11844: PPUSH
11845: CALL_OW 13
11849: IFFALSE 11865
// SetSide ( i , side ) ;
11851: LD_VAR 0 1
11855: PPUSH
11856: LD_VAR 0 3
11860: PPUSH
11861: CALL_OW 235
11865: GO 11839
11867: POP
11868: POP
// end ;
11869: PPOPN 3
11871: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11872: LD_EXP 24
11876: PUSH
11877: LD_EXP 37
11881: AND
11882: IFFALSE 12001
11884: GO 11886
11886: DISABLE
11887: LD_INT 0
11889: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11890: LD_ADDR_VAR 0 1
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_OWVAR 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 21
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 3
11919: PUSH
11920: LD_INT 23
11922: PUSH
11923: LD_INT 0
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: LIST
11938: PPUSH
11939: CALL_OW 69
11943: PUSH
11944: FOR_IN
11945: IFFALSE 11999
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11947: LD_VAR 0 1
11951: PPUSH
11952: CALL_OW 257
11956: PUSH
11957: LD_INT 1
11959: PUSH
11960: LD_INT 2
11962: PUSH
11963: LD_INT 3
11965: PUSH
11966: LD_INT 4
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: IN
11975: IFFALSE 11997
// SetClass ( un , rand ( 1 , 4 ) ) ;
11977: LD_VAR 0 1
11981: PPUSH
11982: LD_INT 1
11984: PPUSH
11985: LD_INT 4
11987: PPUSH
11988: CALL_OW 12
11992: PPUSH
11993: CALL_OW 336
11997: GO 11944
11999: POP
12000: POP
// end ;
12001: PPOPN 1
12003: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12004: LD_EXP 24
12008: PUSH
12009: LD_EXP 36
12013: AND
12014: IFFALSE 12093
12016: GO 12018
12018: DISABLE
12019: LD_INT 0
12021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12022: LD_ADDR_VAR 0 1
12026: PUSH
12027: LD_INT 22
12029: PUSH
12030: LD_OWVAR 2
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 21
12041: PUSH
12042: LD_INT 3
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: ST_TO_ADDR
// if not tmp then
12058: LD_VAR 0 1
12062: NOT
12063: IFFALSE 12067
// exit ;
12065: GO 12093
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12067: LD_VAR 0 1
12071: PUSH
12072: LD_INT 1
12074: PPUSH
12075: LD_VAR 0 1
12079: PPUSH
12080: CALL_OW 12
12084: ARRAY
12085: PPUSH
12086: LD_INT 100
12088: PPUSH
12089: CALL_OW 234
// end ;
12093: PPOPN 1
12095: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12096: LD_EXP 24
12100: PUSH
12101: LD_EXP 38
12105: AND
12106: IFFALSE 12204
12108: GO 12110
12110: DISABLE
12111: LD_INT 0
12113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12114: LD_ADDR_VAR 0 1
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_OWVAR 2
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 21
12133: PUSH
12134: LD_INT 1
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PPUSH
12145: CALL_OW 69
12149: ST_TO_ADDR
// if not tmp then
12150: LD_VAR 0 1
12154: NOT
12155: IFFALSE 12159
// exit ;
12157: GO 12204
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12159: LD_VAR 0 1
12163: PUSH
12164: LD_INT 1
12166: PPUSH
12167: LD_VAR 0 1
12171: PPUSH
12172: CALL_OW 12
12176: ARRAY
12177: PPUSH
12178: LD_INT 1
12180: PPUSH
12181: LD_INT 4
12183: PPUSH
12184: CALL_OW 12
12188: PPUSH
12189: LD_INT 3000
12191: PPUSH
12192: LD_INT 9000
12194: PPUSH
12195: CALL_OW 12
12199: PPUSH
12200: CALL_OW 492
// end ;
12204: PPOPN 1
12206: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12207: LD_EXP 24
12211: PUSH
12212: LD_EXP 39
12216: AND
12217: IFFALSE 12237
12219: GO 12221
12221: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12222: LD_INT 1
12224: PPUSH
12225: LD_OWVAR 2
12229: PPUSH
12230: LD_INT 0
12232: PPUSH
12233: CALL_OW 324
12237: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12238: LD_EXP 24
12242: PUSH
12243: LD_EXP 40
12247: AND
12248: IFFALSE 12331
12250: GO 12252
12252: DISABLE
12253: LD_INT 0
12255: PPUSH
12256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12257: LD_ADDR_VAR 0 2
12261: PUSH
12262: LD_INT 22
12264: PUSH
12265: LD_OWVAR 2
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 21
12276: PUSH
12277: LD_INT 3
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 69
12292: ST_TO_ADDR
// if not tmp then
12293: LD_VAR 0 2
12297: NOT
12298: IFFALSE 12302
// exit ;
12300: GO 12331
// for i in tmp do
12302: LD_ADDR_VAR 0 1
12306: PUSH
12307: LD_VAR 0 2
12311: PUSH
12312: FOR_IN
12313: IFFALSE 12329
// SetBLevel ( i , 10 ) ;
12315: LD_VAR 0 1
12319: PPUSH
12320: LD_INT 10
12322: PPUSH
12323: CALL_OW 241
12327: GO 12312
12329: POP
12330: POP
// end ;
12331: PPOPN 2
12333: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12334: LD_EXP 24
12338: PUSH
12339: LD_EXP 41
12343: AND
12344: IFFALSE 12455
12346: GO 12348
12348: DISABLE
12349: LD_INT 0
12351: PPUSH
12352: PPUSH
12353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12354: LD_ADDR_VAR 0 3
12358: PUSH
12359: LD_INT 22
12361: PUSH
12362: LD_OWVAR 2
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: LD_INT 25
12373: PUSH
12374: LD_INT 1
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PPUSH
12385: CALL_OW 69
12389: ST_TO_ADDR
// if not tmp then
12390: LD_VAR 0 3
12394: NOT
12395: IFFALSE 12399
// exit ;
12397: GO 12455
// un := tmp [ rand ( 1 , tmp ) ] ;
12399: LD_ADDR_VAR 0 2
12403: PUSH
12404: LD_VAR 0 3
12408: PUSH
12409: LD_INT 1
12411: PPUSH
12412: LD_VAR 0 3
12416: PPUSH
12417: CALL_OW 12
12421: ARRAY
12422: ST_TO_ADDR
// if Crawls ( un ) then
12423: LD_VAR 0 2
12427: PPUSH
12428: CALL_OW 318
12432: IFFALSE 12443
// ComWalk ( un ) ;
12434: LD_VAR 0 2
12438: PPUSH
12439: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12443: LD_VAR 0 2
12447: PPUSH
12448: LD_INT 5
12450: PPUSH
12451: CALL_OW 336
// end ;
12455: PPOPN 3
12457: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12458: LD_EXP 24
12462: PUSH
12463: LD_EXP 42
12467: AND
12468: PUSH
12469: LD_OWVAR 67
12473: PUSH
12474: LD_INT 4
12476: LESS
12477: AND
12478: IFFALSE 12497
12480: GO 12482
12482: DISABLE
// begin Difficulty := Difficulty + 1 ;
12483: LD_ADDR_OWVAR 67
12487: PUSH
12488: LD_OWVAR 67
12492: PUSH
12493: LD_INT 1
12495: PLUS
12496: ST_TO_ADDR
// end ;
12497: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12498: LD_EXP 24
12502: PUSH
12503: LD_EXP 43
12507: AND
12508: IFFALSE 12611
12510: GO 12512
12512: DISABLE
12513: LD_INT 0
12515: PPUSH
// begin for i := 1 to 5 do
12516: LD_ADDR_VAR 0 1
12520: PUSH
12521: DOUBLE
12522: LD_INT 1
12524: DEC
12525: ST_TO_ADDR
12526: LD_INT 5
12528: PUSH
12529: FOR_TO
12530: IFFALSE 12609
// begin uc_nation := nation_nature ;
12532: LD_ADDR_OWVAR 21
12536: PUSH
12537: LD_INT 0
12539: ST_TO_ADDR
// uc_side := 0 ;
12540: LD_ADDR_OWVAR 20
12544: PUSH
12545: LD_INT 0
12547: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12548: LD_ADDR_OWVAR 29
12552: PUSH
12553: LD_INT 12
12555: PUSH
12556: LD_INT 12
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: ST_TO_ADDR
// hc_agressivity := 20 ;
12563: LD_ADDR_OWVAR 35
12567: PUSH
12568: LD_INT 20
12570: ST_TO_ADDR
// hc_class := class_tiger ;
12571: LD_ADDR_OWVAR 28
12575: PUSH
12576: LD_INT 14
12578: ST_TO_ADDR
// hc_gallery :=  ;
12579: LD_ADDR_OWVAR 33
12583: PUSH
12584: LD_STRING 
12586: ST_TO_ADDR
// hc_name :=  ;
12587: LD_ADDR_OWVAR 26
12591: PUSH
12592: LD_STRING 
12594: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12595: CALL_OW 44
12599: PPUSH
12600: LD_INT 0
12602: PPUSH
12603: CALL_OW 51
// end ;
12607: GO 12529
12609: POP
12610: POP
// end ;
12611: PPOPN 1
12613: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12614: LD_EXP 24
12618: PUSH
12619: LD_EXP 44
12623: AND
12624: IFFALSE 12633
12626: GO 12628
12628: DISABLE
// StreamSibBomb ;
12629: CALL 12634 0 0
12633: END
// export function StreamSibBomb ; var i , x , y ; begin
12634: LD_INT 0
12636: PPUSH
12637: PPUSH
12638: PPUSH
12639: PPUSH
// result := false ;
12640: LD_ADDR_VAR 0 1
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// for i := 1 to 16 do
12648: LD_ADDR_VAR 0 2
12652: PUSH
12653: DOUBLE
12654: LD_INT 1
12656: DEC
12657: ST_TO_ADDR
12658: LD_INT 16
12660: PUSH
12661: FOR_TO
12662: IFFALSE 12861
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12664: LD_ADDR_VAR 0 3
12668: PUSH
12669: LD_INT 10
12671: PUSH
12672: LD_INT 20
12674: PUSH
12675: LD_INT 30
12677: PUSH
12678: LD_INT 40
12680: PUSH
12681: LD_INT 50
12683: PUSH
12684: LD_INT 60
12686: PUSH
12687: LD_INT 70
12689: PUSH
12690: LD_INT 80
12692: PUSH
12693: LD_INT 90
12695: PUSH
12696: LD_INT 100
12698: PUSH
12699: LD_INT 110
12701: PUSH
12702: LD_INT 120
12704: PUSH
12705: LD_INT 130
12707: PUSH
12708: LD_INT 140
12710: PUSH
12711: LD_INT 150
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 1
12733: PPUSH
12734: LD_INT 15
12736: PPUSH
12737: CALL_OW 12
12741: ARRAY
12742: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12743: LD_ADDR_VAR 0 4
12747: PUSH
12748: LD_INT 10
12750: PUSH
12751: LD_INT 20
12753: PUSH
12754: LD_INT 30
12756: PUSH
12757: LD_INT 40
12759: PUSH
12760: LD_INT 50
12762: PUSH
12763: LD_INT 60
12765: PUSH
12766: LD_INT 70
12768: PUSH
12769: LD_INT 80
12771: PUSH
12772: LD_INT 90
12774: PUSH
12775: LD_INT 100
12777: PUSH
12778: LD_INT 110
12780: PUSH
12781: LD_INT 120
12783: PUSH
12784: LD_INT 130
12786: PUSH
12787: LD_INT 140
12789: PUSH
12790: LD_INT 150
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 1
12812: PPUSH
12813: LD_INT 15
12815: PPUSH
12816: CALL_OW 12
12820: ARRAY
12821: ST_TO_ADDR
// if ValidHex ( x , y ) then
12822: LD_VAR 0 3
12826: PPUSH
12827: LD_VAR 0 4
12831: PPUSH
12832: CALL_OW 488
12836: IFFALSE 12859
// begin result := [ x , y ] ;
12838: LD_ADDR_VAR 0 1
12842: PUSH
12843: LD_VAR 0 3
12847: PUSH
12848: LD_VAR 0 4
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: ST_TO_ADDR
// break ;
12857: GO 12861
// end ; end ;
12859: GO 12661
12861: POP
12862: POP
// if result then
12863: LD_VAR 0 1
12867: IFFALSE 12927
// begin ToLua ( playSibBomb() ) ;
12869: LD_STRING playSibBomb()
12871: PPUSH
12872: CALL_OW 559
// wait ( 0 0$14 ) ;
12876: LD_INT 490
12878: PPUSH
12879: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12883: LD_VAR 0 1
12887: PUSH
12888: LD_INT 1
12890: ARRAY
12891: PPUSH
12892: LD_VAR 0 1
12896: PUSH
12897: LD_INT 2
12899: ARRAY
12900: PPUSH
12901: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12905: LD_VAR 0 1
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: LD_VAR 0 1
12918: PUSH
12919: LD_INT 2
12921: ARRAY
12922: PPUSH
12923: CALL_OW 429
// end ; end ;
12927: LD_VAR 0 1
12931: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12932: LD_EXP 24
12936: PUSH
12937: LD_EXP 46
12941: AND
12942: IFFALSE 12954
12944: GO 12946
12946: DISABLE
// YouLost (  ) ;
12947: LD_STRING 
12949: PPUSH
12950: CALL_OW 104
12954: END
// every 0 0$1 trigger StreamModeActive and sFog do
12955: LD_EXP 24
12959: PUSH
12960: LD_EXP 45
12964: AND
12965: IFFALSE 12979
12967: GO 12969
12969: DISABLE
// FogOff ( your_side ) ;
12970: LD_OWVAR 2
12974: PPUSH
12975: CALL_OW 344
12979: END
// every 0 0$1 trigger StreamModeActive and sSun do
12980: LD_EXP 24
12984: PUSH
12985: LD_EXP 47
12989: AND
12990: IFFALSE 13018
12992: GO 12994
12994: DISABLE
// begin solar_recharge_percent := 0 ;
12995: LD_ADDR_OWVAR 79
12999: PUSH
13000: LD_INT 0
13002: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13003: LD_INT 10500
13005: PPUSH
13006: CALL_OW 67
// solar_recharge_percent := 100 ;
13010: LD_ADDR_OWVAR 79
13014: PUSH
13015: LD_INT 100
13017: ST_TO_ADDR
// end ;
13018: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13019: LD_EXP 24
13023: PUSH
13024: LD_EXP 48
13028: AND
13029: IFFALSE 13268
13031: GO 13033
13033: DISABLE
13034: LD_INT 0
13036: PPUSH
13037: PPUSH
13038: PPUSH
// begin tmp := [ ] ;
13039: LD_ADDR_VAR 0 3
13043: PUSH
13044: EMPTY
13045: ST_TO_ADDR
// for i := 1 to 6 do
13046: LD_ADDR_VAR 0 1
13050: PUSH
13051: DOUBLE
13052: LD_INT 1
13054: DEC
13055: ST_TO_ADDR
13056: LD_INT 6
13058: PUSH
13059: FOR_TO
13060: IFFALSE 13165
// begin uc_nation := nation_nature ;
13062: LD_ADDR_OWVAR 21
13066: PUSH
13067: LD_INT 0
13069: ST_TO_ADDR
// uc_side := 0 ;
13070: LD_ADDR_OWVAR 20
13074: PUSH
13075: LD_INT 0
13077: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13078: LD_ADDR_OWVAR 29
13082: PUSH
13083: LD_INT 12
13085: PUSH
13086: LD_INT 12
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: ST_TO_ADDR
// hc_agressivity := 20 ;
13093: LD_ADDR_OWVAR 35
13097: PUSH
13098: LD_INT 20
13100: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13101: LD_ADDR_OWVAR 28
13105: PUSH
13106: LD_INT 17
13108: ST_TO_ADDR
// hc_gallery :=  ;
13109: LD_ADDR_OWVAR 33
13113: PUSH
13114: LD_STRING 
13116: ST_TO_ADDR
// hc_name :=  ;
13117: LD_ADDR_OWVAR 26
13121: PUSH
13122: LD_STRING 
13124: ST_TO_ADDR
// un := CreateHuman ;
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: CALL_OW 44
13134: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13135: LD_VAR 0 2
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 51
// tmp := tmp ^ un ;
13147: LD_ADDR_VAR 0 3
13151: PUSH
13152: LD_VAR 0 3
13156: PUSH
13157: LD_VAR 0 2
13161: ADD
13162: ST_TO_ADDR
// end ;
13163: GO 13059
13165: POP
13166: POP
// repeat wait ( 0 0$1 ) ;
13167: LD_INT 35
13169: PPUSH
13170: CALL_OW 67
// for un in tmp do
13174: LD_ADDR_VAR 0 2
13178: PUSH
13179: LD_VAR 0 3
13183: PUSH
13184: FOR_IN
13185: IFFALSE 13259
// begin if IsDead ( un ) then
13187: LD_VAR 0 2
13191: PPUSH
13192: CALL_OW 301
13196: IFFALSE 13216
// begin tmp := tmp diff un ;
13198: LD_ADDR_VAR 0 3
13202: PUSH
13203: LD_VAR 0 3
13207: PUSH
13208: LD_VAR 0 2
13212: DIFF
13213: ST_TO_ADDR
// continue ;
13214: GO 13184
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13216: LD_VAR 0 2
13220: PPUSH
13221: LD_INT 3
13223: PUSH
13224: LD_INT 22
13226: PUSH
13227: LD_INT 0
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PPUSH
13238: CALL_OW 69
13242: PPUSH
13243: LD_VAR 0 2
13247: PPUSH
13248: CALL_OW 74
13252: PPUSH
13253: CALL_OW 115
// end ;
13257: GO 13184
13259: POP
13260: POP
// until not tmp ;
13261: LD_VAR 0 3
13265: NOT
13266: IFFALSE 13167
// end ;
13268: PPOPN 3
13270: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13271: LD_EXP 24
13275: PUSH
13276: LD_EXP 49
13280: AND
13281: IFFALSE 13335
13283: GO 13285
13285: DISABLE
// begin ToLua ( displayTroll(); ) ;
13286: LD_STRING displayTroll();
13288: PPUSH
13289: CALL_OW 559
// wait ( 3 3$00 ) ;
13293: LD_INT 6300
13295: PPUSH
13296: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13300: LD_STRING hideTroll();
13302: PPUSH
13303: CALL_OW 559
// wait ( 1 1$00 ) ;
13307: LD_INT 2100
13309: PPUSH
13310: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13314: LD_STRING displayTroll();
13316: PPUSH
13317: CALL_OW 559
// wait ( 1 1$00 ) ;
13321: LD_INT 2100
13323: PPUSH
13324: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13328: LD_STRING hideTroll();
13330: PPUSH
13331: CALL_OW 559
// end ;
13335: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13336: LD_EXP 24
13340: PUSH
13341: LD_EXP 50
13345: AND
13346: IFFALSE 13409
13348: GO 13350
13350: DISABLE
13351: LD_INT 0
13353: PPUSH
// begin p := 0 ;
13354: LD_ADDR_VAR 0 1
13358: PUSH
13359: LD_INT 0
13361: ST_TO_ADDR
// repeat game_speed := 1 ;
13362: LD_ADDR_OWVAR 65
13366: PUSH
13367: LD_INT 1
13369: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13370: LD_INT 35
13372: PPUSH
13373: CALL_OW 67
// p := p + 1 ;
13377: LD_ADDR_VAR 0 1
13381: PUSH
13382: LD_VAR 0 1
13386: PUSH
13387: LD_INT 1
13389: PLUS
13390: ST_TO_ADDR
// until p >= 60 ;
13391: LD_VAR 0 1
13395: PUSH
13396: LD_INT 60
13398: GREATEREQUAL
13399: IFFALSE 13362
// game_speed := 4 ;
13401: LD_ADDR_OWVAR 65
13405: PUSH
13406: LD_INT 4
13408: ST_TO_ADDR
// end ;
13409: PPOPN 1
13411: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13412: LD_EXP 24
13416: PUSH
13417: LD_EXP 51
13421: AND
13422: IFFALSE 13568
13424: GO 13426
13426: DISABLE
13427: LD_INT 0
13429: PPUSH
13430: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13431: LD_ADDR_VAR 0 1
13435: PUSH
13436: LD_INT 22
13438: PUSH
13439: LD_OWVAR 2
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 2
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 0
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: LD_INT 1
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: ST_TO_ADDR
// if not depot then
13485: LD_VAR 0 1
13489: NOT
13490: IFFALSE 13494
// exit ;
13492: GO 13568
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13494: LD_ADDR_VAR 0 2
13498: PUSH
13499: LD_VAR 0 1
13503: PUSH
13504: LD_INT 1
13506: PPUSH
13507: LD_VAR 0 1
13511: PPUSH
13512: CALL_OW 12
13516: ARRAY
13517: PPUSH
13518: CALL_OW 274
13522: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13523: LD_VAR 0 2
13527: PPUSH
13528: LD_INT 1
13530: PPUSH
13531: LD_INT 0
13533: PPUSH
13534: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13538: LD_VAR 0 2
13542: PPUSH
13543: LD_INT 2
13545: PPUSH
13546: LD_INT 0
13548: PPUSH
13549: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13553: LD_VAR 0 2
13557: PPUSH
13558: LD_INT 3
13560: PPUSH
13561: LD_INT 0
13563: PPUSH
13564: CALL_OW 277
// end ;
13568: PPOPN 2
13570: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13571: LD_EXP 24
13575: PUSH
13576: LD_EXP 52
13580: AND
13581: IFFALSE 13678
13583: GO 13585
13585: DISABLE
13586: LD_INT 0
13588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13589: LD_ADDR_VAR 0 1
13593: PUSH
13594: LD_INT 22
13596: PUSH
13597: LD_OWVAR 2
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 21
13608: PUSH
13609: LD_INT 1
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 3
13618: PUSH
13619: LD_INT 23
13621: PUSH
13622: LD_INT 0
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: PPUSH
13638: CALL_OW 69
13642: ST_TO_ADDR
// if not tmp then
13643: LD_VAR 0 1
13647: NOT
13648: IFFALSE 13652
// exit ;
13650: GO 13678
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13652: LD_VAR 0 1
13656: PUSH
13657: LD_INT 1
13659: PPUSH
13660: LD_VAR 0 1
13664: PPUSH
13665: CALL_OW 12
13669: ARRAY
13670: PPUSH
13671: LD_INT 200
13673: PPUSH
13674: CALL_OW 234
// end ;
13678: PPOPN 1
13680: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13681: LD_EXP 24
13685: PUSH
13686: LD_EXP 53
13690: AND
13691: IFFALSE 13770
13693: GO 13695
13695: DISABLE
13696: LD_INT 0
13698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13699: LD_ADDR_VAR 0 1
13703: PUSH
13704: LD_INT 22
13706: PUSH
13707: LD_OWVAR 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 21
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: ST_TO_ADDR
// if not tmp then
13735: LD_VAR 0 1
13739: NOT
13740: IFFALSE 13744
// exit ;
13742: GO 13770
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13744: LD_VAR 0 1
13748: PUSH
13749: LD_INT 1
13751: PPUSH
13752: LD_VAR 0 1
13756: PPUSH
13757: CALL_OW 12
13761: ARRAY
13762: PPUSH
13763: LD_INT 60
13765: PPUSH
13766: CALL_OW 234
// end ;
13770: PPOPN 1
13772: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13773: LD_EXP 24
13777: PUSH
13778: LD_EXP 54
13782: AND
13783: IFFALSE 13882
13785: GO 13787
13787: DISABLE
13788: LD_INT 0
13790: PPUSH
13791: PPUSH
// begin enable ;
13792: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13793: LD_ADDR_VAR 0 1
13797: PUSH
13798: LD_INT 22
13800: PUSH
13801: LD_OWVAR 2
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 61
13812: PUSH
13813: EMPTY
13814: LIST
13815: PUSH
13816: LD_INT 33
13818: PUSH
13819: LD_INT 2
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: PPUSH
13831: CALL_OW 69
13835: ST_TO_ADDR
// if not tmp then
13836: LD_VAR 0 1
13840: NOT
13841: IFFALSE 13845
// exit ;
13843: GO 13882
// for i in tmp do
13845: LD_ADDR_VAR 0 2
13849: PUSH
13850: LD_VAR 0 1
13854: PUSH
13855: FOR_IN
13856: IFFALSE 13880
// if IsControledBy ( i ) then
13858: LD_VAR 0 2
13862: PPUSH
13863: CALL_OW 312
13867: IFFALSE 13878
// ComUnlink ( i ) ;
13869: LD_VAR 0 2
13873: PPUSH
13874: CALL_OW 136
13878: GO 13855
13880: POP
13881: POP
// end ;
13882: PPOPN 2
13884: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13885: LD_EXP 24
13889: PUSH
13890: LD_EXP 55
13894: AND
13895: IFFALSE 14035
13897: GO 13899
13899: DISABLE
13900: LD_INT 0
13902: PPUSH
13903: PPUSH
// begin ToLua ( displayPowell(); ) ;
13904: LD_STRING displayPowell();
13906: PPUSH
13907: CALL_OW 559
// uc_side := 0 ;
13911: LD_ADDR_OWVAR 20
13915: PUSH
13916: LD_INT 0
13918: ST_TO_ADDR
// uc_nation := 2 ;
13919: LD_ADDR_OWVAR 21
13923: PUSH
13924: LD_INT 2
13926: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13927: LD_ADDR_OWVAR 37
13931: PUSH
13932: LD_INT 14
13934: ST_TO_ADDR
// vc_engine := engine_siberite ;
13935: LD_ADDR_OWVAR 39
13939: PUSH
13940: LD_INT 3
13942: ST_TO_ADDR
// vc_control := control_apeman ;
13943: LD_ADDR_OWVAR 38
13947: PUSH
13948: LD_INT 5
13950: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13951: LD_ADDR_OWVAR 40
13955: PUSH
13956: LD_INT 29
13958: ST_TO_ADDR
// un := CreateVehicle ;
13959: LD_ADDR_VAR 0 2
13963: PUSH
13964: CALL_OW 45
13968: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13969: LD_VAR 0 2
13973: PPUSH
13974: LD_INT 1
13976: PPUSH
13977: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13981: LD_INT 35
13983: PPUSH
13984: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13988: LD_VAR 0 2
13992: PPUSH
13993: LD_INT 22
13995: PUSH
13996: LD_OWVAR 2
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PPUSH
14005: CALL_OW 69
14009: PPUSH
14010: LD_VAR 0 2
14014: PPUSH
14015: CALL_OW 74
14019: PPUSH
14020: CALL_OW 115
// until IsDead ( un ) ;
14024: LD_VAR 0 2
14028: PPUSH
14029: CALL_OW 301
14033: IFFALSE 13981
// end ;
14035: PPOPN 2
14037: END
// every 0 0$1 trigger StreamModeActive and sStu do
14038: LD_EXP 24
14042: PUSH
14043: LD_EXP 63
14047: AND
14048: IFFALSE 14064
14050: GO 14052
14052: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14053: LD_STRING displayStucuk();
14055: PPUSH
14056: CALL_OW 559
// ResetFog ;
14060: CALL_OW 335
// end ;
14064: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14065: LD_EXP 24
14069: PUSH
14070: LD_EXP 56
14074: AND
14075: IFFALSE 14216
14077: GO 14079
14079: DISABLE
14080: LD_INT 0
14082: PPUSH
14083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: LD_INT 22
14091: PUSH
14092: LD_OWVAR 2
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 21
14103: PUSH
14104: LD_INT 1
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PPUSH
14115: CALL_OW 69
14119: ST_TO_ADDR
// if not tmp then
14120: LD_VAR 0 2
14124: NOT
14125: IFFALSE 14129
// exit ;
14127: GO 14216
// un := tmp [ rand ( 1 , tmp ) ] ;
14129: LD_ADDR_VAR 0 1
14133: PUSH
14134: LD_VAR 0 2
14138: PUSH
14139: LD_INT 1
14141: PPUSH
14142: LD_VAR 0 2
14146: PPUSH
14147: CALL_OW 12
14151: ARRAY
14152: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14153: LD_VAR 0 1
14157: PPUSH
14158: LD_INT 0
14160: PPUSH
14161: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14165: LD_VAR 0 1
14169: PPUSH
14170: LD_OWVAR 3
14174: PUSH
14175: LD_VAR 0 1
14179: DIFF
14180: PPUSH
14181: LD_VAR 0 1
14185: PPUSH
14186: CALL_OW 74
14190: PPUSH
14191: CALL_OW 115
// wait ( 0 0$20 ) ;
14195: LD_INT 700
14197: PPUSH
14198: CALL_OW 67
// SetSide ( un , your_side ) ;
14202: LD_VAR 0 1
14206: PPUSH
14207: LD_OWVAR 2
14211: PPUSH
14212: CALL_OW 235
// end ;
14216: PPOPN 2
14218: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14219: LD_EXP 24
14223: PUSH
14224: LD_EXP 57
14228: AND
14229: IFFALSE 14335
14231: GO 14233
14233: DISABLE
14234: LD_INT 0
14236: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14237: LD_ADDR_VAR 0 1
14241: PUSH
14242: LD_INT 22
14244: PUSH
14245: LD_OWVAR 2
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 2
14256: PUSH
14257: LD_INT 30
14259: PUSH
14260: LD_INT 0
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 30
14269: PUSH
14270: LD_INT 1
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PPUSH
14286: CALL_OW 69
14290: ST_TO_ADDR
// if not depot then
14291: LD_VAR 0 1
14295: NOT
14296: IFFALSE 14300
// exit ;
14298: GO 14335
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14300: LD_VAR 0 1
14304: PUSH
14305: LD_INT 1
14307: ARRAY
14308: PPUSH
14309: CALL_OW 250
14313: PPUSH
14314: LD_VAR 0 1
14318: PUSH
14319: LD_INT 1
14321: ARRAY
14322: PPUSH
14323: CALL_OW 251
14327: PPUSH
14328: LD_INT 70
14330: PPUSH
14331: CALL_OW 495
// end ;
14335: PPOPN 1
14337: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14338: LD_EXP 24
14342: PUSH
14343: LD_EXP 58
14347: AND
14348: IFFALSE 14559
14350: GO 14352
14352: DISABLE
14353: LD_INT 0
14355: PPUSH
14356: PPUSH
14357: PPUSH
14358: PPUSH
14359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14360: LD_ADDR_VAR 0 5
14364: PUSH
14365: LD_INT 22
14367: PUSH
14368: LD_OWVAR 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 21
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PPUSH
14391: CALL_OW 69
14395: ST_TO_ADDR
// if not tmp then
14396: LD_VAR 0 5
14400: NOT
14401: IFFALSE 14405
// exit ;
14403: GO 14559
// for i in tmp do
14405: LD_ADDR_VAR 0 1
14409: PUSH
14410: LD_VAR 0 5
14414: PUSH
14415: FOR_IN
14416: IFFALSE 14557
// begin d := rand ( 0 , 5 ) ;
14418: LD_ADDR_VAR 0 4
14422: PUSH
14423: LD_INT 0
14425: PPUSH
14426: LD_INT 5
14428: PPUSH
14429: CALL_OW 12
14433: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14434: LD_ADDR_VAR 0 2
14438: PUSH
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 250
14448: PPUSH
14449: LD_VAR 0 4
14453: PPUSH
14454: LD_INT 3
14456: PPUSH
14457: LD_INT 12
14459: PPUSH
14460: CALL_OW 12
14464: PPUSH
14465: CALL_OW 272
14469: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14470: LD_ADDR_VAR 0 3
14474: PUSH
14475: LD_VAR 0 1
14479: PPUSH
14480: CALL_OW 251
14484: PPUSH
14485: LD_VAR 0 4
14489: PPUSH
14490: LD_INT 3
14492: PPUSH
14493: LD_INT 12
14495: PPUSH
14496: CALL_OW 12
14500: PPUSH
14501: CALL_OW 273
14505: ST_TO_ADDR
// if ValidHex ( x , y ) then
14506: LD_VAR 0 2
14510: PPUSH
14511: LD_VAR 0 3
14515: PPUSH
14516: CALL_OW 488
14520: IFFALSE 14555
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14522: LD_VAR 0 1
14526: PPUSH
14527: LD_VAR 0 2
14531: PPUSH
14532: LD_VAR 0 3
14536: PPUSH
14537: LD_INT 3
14539: PPUSH
14540: LD_INT 6
14542: PPUSH
14543: CALL_OW 12
14547: PPUSH
14548: LD_INT 1
14550: PPUSH
14551: CALL_OW 483
// end ;
14555: GO 14415
14557: POP
14558: POP
// end ;
14559: PPOPN 5
14561: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14562: LD_EXP 24
14566: PUSH
14567: LD_EXP 59
14571: AND
14572: IFFALSE 14666
14574: GO 14576
14576: DISABLE
14577: LD_INT 0
14579: PPUSH
14580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: LD_INT 22
14588: PUSH
14589: LD_OWVAR 2
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: LD_INT 32
14600: PUSH
14601: LD_INT 1
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 21
14610: PUSH
14611: LD_INT 2
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: PPUSH
14623: CALL_OW 69
14627: ST_TO_ADDR
// if not tmp then
14628: LD_VAR 0 2
14632: NOT
14633: IFFALSE 14637
// exit ;
14635: GO 14666
// for i in tmp do
14637: LD_ADDR_VAR 0 1
14641: PUSH
14642: LD_VAR 0 2
14646: PUSH
14647: FOR_IN
14648: IFFALSE 14664
// SetFuel ( i , 0 ) ;
14650: LD_VAR 0 1
14654: PPUSH
14655: LD_INT 0
14657: PPUSH
14658: CALL_OW 240
14662: GO 14647
14664: POP
14665: POP
// end ;
14666: PPOPN 2
14668: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14669: LD_EXP 24
14673: PUSH
14674: LD_EXP 60
14678: AND
14679: IFFALSE 14745
14681: GO 14683
14683: DISABLE
14684: LD_INT 0
14686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_INT 22
14694: PUSH
14695: LD_OWVAR 2
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 30
14706: PUSH
14707: LD_INT 29
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PPUSH
14718: CALL_OW 69
14722: ST_TO_ADDR
// if not tmp then
14723: LD_VAR 0 1
14727: NOT
14728: IFFALSE 14732
// exit ;
14730: GO 14745
// DestroyUnit ( tmp [ 1 ] ) ;
14732: LD_VAR 0 1
14736: PUSH
14737: LD_INT 1
14739: ARRAY
14740: PPUSH
14741: CALL_OW 65
// end ;
14745: PPOPN 1
14747: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14748: LD_EXP 24
14752: PUSH
14753: LD_EXP 62
14757: AND
14758: IFFALSE 14887
14760: GO 14762
14762: DISABLE
14763: LD_INT 0
14765: PPUSH
// begin uc_side := 0 ;
14766: LD_ADDR_OWVAR 20
14770: PUSH
14771: LD_INT 0
14773: ST_TO_ADDR
// uc_nation := nation_arabian ;
14774: LD_ADDR_OWVAR 21
14778: PUSH
14779: LD_INT 2
14781: ST_TO_ADDR
// hc_gallery :=  ;
14782: LD_ADDR_OWVAR 33
14786: PUSH
14787: LD_STRING 
14789: ST_TO_ADDR
// hc_name :=  ;
14790: LD_ADDR_OWVAR 26
14794: PUSH
14795: LD_STRING 
14797: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14798: LD_INT 1
14800: PPUSH
14801: LD_INT 11
14803: PPUSH
14804: LD_INT 10
14806: PPUSH
14807: CALL_OW 380
// un := CreateHuman ;
14811: LD_ADDR_VAR 0 1
14815: PUSH
14816: CALL_OW 44
14820: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14821: LD_VAR 0 1
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14833: LD_INT 35
14835: PPUSH
14836: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14840: LD_VAR 0 1
14844: PPUSH
14845: LD_INT 22
14847: PUSH
14848: LD_OWVAR 2
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PPUSH
14857: CALL_OW 69
14861: PPUSH
14862: LD_VAR 0 1
14866: PPUSH
14867: CALL_OW 74
14871: PPUSH
14872: CALL_OW 115
// until IsDead ( un ) ;
14876: LD_VAR 0 1
14880: PPUSH
14881: CALL_OW 301
14885: IFFALSE 14833
// end ;
14887: PPOPN 1
14889: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14890: LD_EXP 24
14894: PUSH
14895: LD_EXP 64
14899: AND
14900: IFFALSE 14912
14902: GO 14904
14904: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14905: LD_STRING earthquake(getX(game), 0, 32)
14907: PPUSH
14908: CALL_OW 559
14912: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14913: LD_EXP 24
14917: PUSH
14918: LD_EXP 65
14922: AND
14923: IFFALSE 15014
14925: GO 14927
14927: DISABLE
14928: LD_INT 0
14930: PPUSH
// begin enable ;
14931: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14932: LD_ADDR_VAR 0 1
14936: PUSH
14937: LD_INT 22
14939: PUSH
14940: LD_OWVAR 2
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 21
14951: PUSH
14952: LD_INT 2
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 33
14961: PUSH
14962: LD_INT 3
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: LIST
14973: PPUSH
14974: CALL_OW 69
14978: ST_TO_ADDR
// if not tmp then
14979: LD_VAR 0 1
14983: NOT
14984: IFFALSE 14988
// exit ;
14986: GO 15014
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14988: LD_VAR 0 1
14992: PUSH
14993: LD_INT 1
14995: PPUSH
14996: LD_VAR 0 1
15000: PPUSH
15001: CALL_OW 12
15005: ARRAY
15006: PPUSH
15007: LD_INT 1
15009: PPUSH
15010: CALL_OW 234
// end ;
15014: PPOPN 1
15016: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15017: LD_EXP 24
15021: PUSH
15022: LD_EXP 66
15026: AND
15027: IFFALSE 15168
15029: GO 15031
15031: DISABLE
15032: LD_INT 0
15034: PPUSH
15035: PPUSH
15036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15037: LD_ADDR_VAR 0 3
15041: PUSH
15042: LD_INT 22
15044: PUSH
15045: LD_OWVAR 2
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 25
15056: PUSH
15057: LD_INT 1
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PPUSH
15068: CALL_OW 69
15072: ST_TO_ADDR
// if not tmp then
15073: LD_VAR 0 3
15077: NOT
15078: IFFALSE 15082
// exit ;
15080: GO 15168
// un := tmp [ rand ( 1 , tmp ) ] ;
15082: LD_ADDR_VAR 0 2
15086: PUSH
15087: LD_VAR 0 3
15091: PUSH
15092: LD_INT 1
15094: PPUSH
15095: LD_VAR 0 3
15099: PPUSH
15100: CALL_OW 12
15104: ARRAY
15105: ST_TO_ADDR
// if Crawls ( un ) then
15106: LD_VAR 0 2
15110: PPUSH
15111: CALL_OW 318
15115: IFFALSE 15126
// ComWalk ( un ) ;
15117: LD_VAR 0 2
15121: PPUSH
15122: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15126: LD_VAR 0 2
15130: PPUSH
15131: LD_INT 9
15133: PPUSH
15134: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15138: LD_INT 28
15140: PPUSH
15141: LD_OWVAR 2
15145: PPUSH
15146: LD_INT 2
15148: PPUSH
15149: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15153: LD_INT 29
15155: PPUSH
15156: LD_OWVAR 2
15160: PPUSH
15161: LD_INT 2
15163: PPUSH
15164: CALL_OW 322
// end ;
15168: PPOPN 3
15170: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15171: LD_EXP 24
15175: PUSH
15176: LD_EXP 67
15180: AND
15181: IFFALSE 15292
15183: GO 15185
15185: DISABLE
15186: LD_INT 0
15188: PPUSH
15189: PPUSH
15190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15191: LD_ADDR_VAR 0 3
15195: PUSH
15196: LD_INT 22
15198: PUSH
15199: LD_OWVAR 2
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 25
15210: PUSH
15211: LD_INT 1
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PPUSH
15222: CALL_OW 69
15226: ST_TO_ADDR
// if not tmp then
15227: LD_VAR 0 3
15231: NOT
15232: IFFALSE 15236
// exit ;
15234: GO 15292
// un := tmp [ rand ( 1 , tmp ) ] ;
15236: LD_ADDR_VAR 0 2
15240: PUSH
15241: LD_VAR 0 3
15245: PUSH
15246: LD_INT 1
15248: PPUSH
15249: LD_VAR 0 3
15253: PPUSH
15254: CALL_OW 12
15258: ARRAY
15259: ST_TO_ADDR
// if Crawls ( un ) then
15260: LD_VAR 0 2
15264: PPUSH
15265: CALL_OW 318
15269: IFFALSE 15280
// ComWalk ( un ) ;
15271: LD_VAR 0 2
15275: PPUSH
15276: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15280: LD_VAR 0 2
15284: PPUSH
15285: LD_INT 8
15287: PPUSH
15288: CALL_OW 336
// end ;
15292: PPOPN 3
15294: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15295: LD_EXP 24
15299: PUSH
15300: LD_EXP 68
15304: AND
15305: IFFALSE 15449
15307: GO 15309
15309: DISABLE
15310: LD_INT 0
15312: PPUSH
15313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15314: LD_ADDR_VAR 0 2
15318: PUSH
15319: LD_INT 22
15321: PUSH
15322: LD_OWVAR 2
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 21
15333: PUSH
15334: LD_INT 2
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 2
15343: PUSH
15344: LD_INT 34
15346: PUSH
15347: LD_INT 12
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 34
15356: PUSH
15357: LD_INT 51
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: LD_INT 34
15366: PUSH
15367: LD_INT 32
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: LIST
15384: PPUSH
15385: CALL_OW 69
15389: ST_TO_ADDR
// if not tmp then
15390: LD_VAR 0 2
15394: NOT
15395: IFFALSE 15399
// exit ;
15397: GO 15449
// for i in tmp do
15399: LD_ADDR_VAR 0 1
15403: PUSH
15404: LD_VAR 0 2
15408: PUSH
15409: FOR_IN
15410: IFFALSE 15447
// if GetCargo ( i , mat_artifact ) = 0 then
15412: LD_VAR 0 1
15416: PPUSH
15417: LD_INT 4
15419: PPUSH
15420: CALL_OW 289
15424: PUSH
15425: LD_INT 0
15427: EQUAL
15428: IFFALSE 15445
// SetCargo ( i , mat_siberit , 100 ) ;
15430: LD_VAR 0 1
15434: PPUSH
15435: LD_INT 3
15437: PPUSH
15438: LD_INT 100
15440: PPUSH
15441: CALL_OW 290
15445: GO 15409
15447: POP
15448: POP
// end ;
15449: PPOPN 2
15451: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15452: LD_EXP 24
15456: PUSH
15457: LD_EXP 69
15461: AND
15462: IFFALSE 15645
15464: GO 15466
15466: DISABLE
15467: LD_INT 0
15469: PPUSH
15470: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: LD_OWVAR 2
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PPUSH
15488: CALL_OW 69
15492: ST_TO_ADDR
// if not tmp then
15493: LD_VAR 0 2
15497: NOT
15498: IFFALSE 15502
// exit ;
15500: GO 15645
// for i := 1 to 2 do
15502: LD_ADDR_VAR 0 1
15506: PUSH
15507: DOUBLE
15508: LD_INT 1
15510: DEC
15511: ST_TO_ADDR
15512: LD_INT 2
15514: PUSH
15515: FOR_TO
15516: IFFALSE 15643
// begin uc_side := your_side ;
15518: LD_ADDR_OWVAR 20
15522: PUSH
15523: LD_OWVAR 2
15527: ST_TO_ADDR
// uc_nation := nation_american ;
15528: LD_ADDR_OWVAR 21
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// vc_chassis := us_morphling ;
15536: LD_ADDR_OWVAR 37
15540: PUSH
15541: LD_INT 5
15543: ST_TO_ADDR
// vc_engine := engine_siberite ;
15544: LD_ADDR_OWVAR 39
15548: PUSH
15549: LD_INT 3
15551: ST_TO_ADDR
// vc_control := control_computer ;
15552: LD_ADDR_OWVAR 38
15556: PUSH
15557: LD_INT 3
15559: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15560: LD_ADDR_OWVAR 40
15564: PUSH
15565: LD_INT 10
15567: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15568: LD_VAR 0 2
15572: PUSH
15573: LD_INT 1
15575: ARRAY
15576: PPUSH
15577: CALL_OW 310
15581: NOT
15582: IFFALSE 15629
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15584: CALL_OW 45
15588: PPUSH
15589: LD_VAR 0 2
15593: PUSH
15594: LD_INT 1
15596: ARRAY
15597: PPUSH
15598: CALL_OW 250
15602: PPUSH
15603: LD_VAR 0 2
15607: PUSH
15608: LD_INT 1
15610: ARRAY
15611: PPUSH
15612: CALL_OW 251
15616: PPUSH
15617: LD_INT 12
15619: PPUSH
15620: LD_INT 1
15622: PPUSH
15623: CALL_OW 50
15627: GO 15641
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15629: CALL_OW 45
15633: PPUSH
15634: LD_INT 1
15636: PPUSH
15637: CALL_OW 51
// end ;
15641: GO 15515
15643: POP
15644: POP
// end ;
15645: PPOPN 2
15647: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15648: LD_EXP 24
15652: PUSH
15653: LD_EXP 70
15657: AND
15658: IFFALSE 15880
15660: GO 15662
15662: DISABLE
15663: LD_INT 0
15665: PPUSH
15666: PPUSH
15667: PPUSH
15668: PPUSH
15669: PPUSH
15670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15671: LD_ADDR_VAR 0 6
15675: PUSH
15676: LD_INT 22
15678: PUSH
15679: LD_OWVAR 2
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 21
15690: PUSH
15691: LD_INT 1
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 3
15700: PUSH
15701: LD_INT 23
15703: PUSH
15704: LD_INT 0
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: PPUSH
15720: CALL_OW 69
15724: ST_TO_ADDR
// if not tmp then
15725: LD_VAR 0 6
15729: NOT
15730: IFFALSE 15734
// exit ;
15732: GO 15880
// s1 := rand ( 1 , 4 ) ;
15734: LD_ADDR_VAR 0 2
15738: PUSH
15739: LD_INT 1
15741: PPUSH
15742: LD_INT 4
15744: PPUSH
15745: CALL_OW 12
15749: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15750: LD_ADDR_VAR 0 4
15754: PUSH
15755: LD_VAR 0 6
15759: PUSH
15760: LD_INT 1
15762: ARRAY
15763: PPUSH
15764: LD_VAR 0 2
15768: PPUSH
15769: CALL_OW 259
15773: ST_TO_ADDR
// if s1 = 1 then
15774: LD_VAR 0 2
15778: PUSH
15779: LD_INT 1
15781: EQUAL
15782: IFFALSE 15802
// s2 := rand ( 2 , 4 ) else
15784: LD_ADDR_VAR 0 3
15788: PUSH
15789: LD_INT 2
15791: PPUSH
15792: LD_INT 4
15794: PPUSH
15795: CALL_OW 12
15799: ST_TO_ADDR
15800: GO 15810
// s2 := 1 ;
15802: LD_ADDR_VAR 0 3
15806: PUSH
15807: LD_INT 1
15809: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15810: LD_ADDR_VAR 0 5
15814: PUSH
15815: LD_VAR 0 6
15819: PUSH
15820: LD_INT 1
15822: ARRAY
15823: PPUSH
15824: LD_VAR 0 3
15828: PPUSH
15829: CALL_OW 259
15833: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15834: LD_VAR 0 6
15838: PUSH
15839: LD_INT 1
15841: ARRAY
15842: PPUSH
15843: LD_VAR 0 2
15847: PPUSH
15848: LD_VAR 0 5
15852: PPUSH
15853: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15857: LD_VAR 0 6
15861: PUSH
15862: LD_INT 1
15864: ARRAY
15865: PPUSH
15866: LD_VAR 0 3
15870: PPUSH
15871: LD_VAR 0 4
15875: PPUSH
15876: CALL_OW 237
// end ;
15880: PPOPN 6
15882: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15883: LD_EXP 24
15887: PUSH
15888: LD_EXP 71
15892: AND
15893: IFFALSE 15972
15895: GO 15897
15897: DISABLE
15898: LD_INT 0
15900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15901: LD_ADDR_VAR 0 1
15905: PUSH
15906: LD_INT 22
15908: PUSH
15909: LD_OWVAR 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 30
15920: PUSH
15921: LD_INT 3
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PPUSH
15932: CALL_OW 69
15936: ST_TO_ADDR
// if not tmp then
15937: LD_VAR 0 1
15941: NOT
15942: IFFALSE 15946
// exit ;
15944: GO 15972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15946: LD_VAR 0 1
15950: PUSH
15951: LD_INT 1
15953: PPUSH
15954: LD_VAR 0 1
15958: PPUSH
15959: CALL_OW 12
15963: ARRAY
15964: PPUSH
15965: LD_INT 1
15967: PPUSH
15968: CALL_OW 234
// end ;
15972: PPOPN 1
15974: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15975: LD_EXP 24
15979: PUSH
15980: LD_EXP 72
15984: AND
15985: IFFALSE 16097
15987: GO 15989
15989: DISABLE
15990: LD_INT 0
15992: PPUSH
15993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: LD_INT 22
16001: PUSH
16002: LD_OWVAR 2
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 2
16013: PUSH
16014: LD_INT 30
16016: PUSH
16017: LD_INT 27
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 30
16026: PUSH
16027: LD_INT 26
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 30
16036: PUSH
16037: LD_INT 28
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PPUSH
16054: CALL_OW 69
16058: ST_TO_ADDR
// if not tmp then
16059: LD_VAR 0 2
16063: NOT
16064: IFFALSE 16068
// exit ;
16066: GO 16097
// for i in tmp do
16068: LD_ADDR_VAR 0 1
16072: PUSH
16073: LD_VAR 0 2
16077: PUSH
16078: FOR_IN
16079: IFFALSE 16095
// SetLives ( i , 1 ) ;
16081: LD_VAR 0 1
16085: PPUSH
16086: LD_INT 1
16088: PPUSH
16089: CALL_OW 234
16093: GO 16078
16095: POP
16096: POP
// end ;
16097: PPOPN 2
16099: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16100: LD_EXP 24
16104: PUSH
16105: LD_EXP 73
16109: AND
16110: IFFALSE 16397
16112: GO 16114
16114: DISABLE
16115: LD_INT 0
16117: PPUSH
16118: PPUSH
16119: PPUSH
// begin i := rand ( 1 , 7 ) ;
16120: LD_ADDR_VAR 0 1
16124: PUSH
16125: LD_INT 1
16127: PPUSH
16128: LD_INT 7
16130: PPUSH
16131: CALL_OW 12
16135: ST_TO_ADDR
// case i of 1 :
16136: LD_VAR 0 1
16140: PUSH
16141: LD_INT 1
16143: DOUBLE
16144: EQUAL
16145: IFTRUE 16149
16147: GO 16159
16149: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16150: LD_STRING earthquake(getX(game), 0, 32)
16152: PPUSH
16153: CALL_OW 559
16157: GO 16397
16159: LD_INT 2
16161: DOUBLE
16162: EQUAL
16163: IFTRUE 16167
16165: GO 16181
16167: POP
// begin ToLua ( displayStucuk(); ) ;
16168: LD_STRING displayStucuk();
16170: PPUSH
16171: CALL_OW 559
// ResetFog ;
16175: CALL_OW 335
// end ; 3 :
16179: GO 16397
16181: LD_INT 3
16183: DOUBLE
16184: EQUAL
16185: IFTRUE 16189
16187: GO 16293
16189: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16190: LD_ADDR_VAR 0 2
16194: PUSH
16195: LD_INT 22
16197: PUSH
16198: LD_OWVAR 2
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 25
16209: PUSH
16210: LD_INT 1
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: ST_TO_ADDR
// if not tmp then
16226: LD_VAR 0 2
16230: NOT
16231: IFFALSE 16235
// exit ;
16233: GO 16397
// un := tmp [ rand ( 1 , tmp ) ] ;
16235: LD_ADDR_VAR 0 3
16239: PUSH
16240: LD_VAR 0 2
16244: PUSH
16245: LD_INT 1
16247: PPUSH
16248: LD_VAR 0 2
16252: PPUSH
16253: CALL_OW 12
16257: ARRAY
16258: ST_TO_ADDR
// if Crawls ( un ) then
16259: LD_VAR 0 3
16263: PPUSH
16264: CALL_OW 318
16268: IFFALSE 16279
// ComWalk ( un ) ;
16270: LD_VAR 0 3
16274: PPUSH
16275: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16279: LD_VAR 0 3
16283: PPUSH
16284: LD_INT 8
16286: PPUSH
16287: CALL_OW 336
// end ; 4 :
16291: GO 16397
16293: LD_INT 4
16295: DOUBLE
16296: EQUAL
16297: IFTRUE 16301
16299: GO 16375
16301: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16302: LD_ADDR_VAR 0 2
16306: PUSH
16307: LD_INT 22
16309: PUSH
16310: LD_OWVAR 2
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 30
16321: PUSH
16322: LD_INT 29
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PPUSH
16333: CALL_OW 69
16337: ST_TO_ADDR
// if not tmp then
16338: LD_VAR 0 2
16342: NOT
16343: IFFALSE 16347
// exit ;
16345: GO 16397
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16347: LD_VAR 0 2
16351: PUSH
16352: LD_INT 1
16354: ARRAY
16355: PPUSH
16356: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16360: LD_VAR 0 2
16364: PUSH
16365: LD_INT 1
16367: ARRAY
16368: PPUSH
16369: CALL_OW 65
// end ; 5 .. 7 :
16373: GO 16397
16375: LD_INT 5
16377: DOUBLE
16378: GREATEREQUAL
16379: IFFALSE 16387
16381: LD_INT 7
16383: DOUBLE
16384: LESSEQUAL
16385: IFTRUE 16389
16387: GO 16396
16389: POP
// StreamSibBomb ; end ;
16390: CALL 12634 0 0
16394: GO 16397
16396: POP
// end ;
16397: PPOPN 3
16399: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16400: LD_EXP 24
16404: PUSH
16405: LD_EXP 74
16409: AND
16410: IFFALSE 16566
16412: GO 16414
16414: DISABLE
16415: LD_INT 0
16417: PPUSH
16418: PPUSH
16419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16420: LD_ADDR_VAR 0 2
16424: PUSH
16425: LD_INT 81
16427: PUSH
16428: LD_OWVAR 2
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 2
16439: PUSH
16440: LD_INT 21
16442: PUSH
16443: LD_INT 1
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 21
16452: PUSH
16453: LD_INT 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PPUSH
16469: CALL_OW 69
16473: ST_TO_ADDR
// if not tmp then
16474: LD_VAR 0 2
16478: NOT
16479: IFFALSE 16483
// exit ;
16481: GO 16566
// p := 0 ;
16483: LD_ADDR_VAR 0 3
16487: PUSH
16488: LD_INT 0
16490: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16491: LD_INT 35
16493: PPUSH
16494: CALL_OW 67
// p := p + 1 ;
16498: LD_ADDR_VAR 0 3
16502: PUSH
16503: LD_VAR 0 3
16507: PUSH
16508: LD_INT 1
16510: PLUS
16511: ST_TO_ADDR
// for i in tmp do
16512: LD_ADDR_VAR 0 1
16516: PUSH
16517: LD_VAR 0 2
16521: PUSH
16522: FOR_IN
16523: IFFALSE 16554
// if GetLives ( i ) < 1000 then
16525: LD_VAR 0 1
16529: PPUSH
16530: CALL_OW 256
16534: PUSH
16535: LD_INT 1000
16537: LESS
16538: IFFALSE 16552
// SetLives ( i , 1000 ) ;
16540: LD_VAR 0 1
16544: PPUSH
16545: LD_INT 1000
16547: PPUSH
16548: CALL_OW 234
16552: GO 16522
16554: POP
16555: POP
// until p > 20 ;
16556: LD_VAR 0 3
16560: PUSH
16561: LD_INT 20
16563: GREATER
16564: IFFALSE 16491
// end ;
16566: PPOPN 3
16568: END
// every 0 0$1 trigger StreamModeActive and sTime do
16569: LD_EXP 24
16573: PUSH
16574: LD_EXP 75
16578: AND
16579: IFFALSE 16614
16581: GO 16583
16583: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16584: LD_INT 28
16586: PPUSH
16587: LD_OWVAR 2
16591: PPUSH
16592: LD_INT 2
16594: PPUSH
16595: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16599: LD_INT 30
16601: PPUSH
16602: LD_OWVAR 2
16606: PPUSH
16607: LD_INT 2
16609: PPUSH
16610: CALL_OW 322
// end ;
16614: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16615: LD_EXP 24
16619: PUSH
16620: LD_EXP 76
16624: AND
16625: IFFALSE 16746
16627: GO 16629
16629: DISABLE
16630: LD_INT 0
16632: PPUSH
16633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16634: LD_ADDR_VAR 0 2
16638: PUSH
16639: LD_INT 22
16641: PUSH
16642: LD_OWVAR 2
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 21
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 3
16663: PUSH
16664: LD_INT 23
16666: PUSH
16667: LD_INT 0
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: LIST
16682: PPUSH
16683: CALL_OW 69
16687: ST_TO_ADDR
// if not tmp then
16688: LD_VAR 0 2
16692: NOT
16693: IFFALSE 16697
// exit ;
16695: GO 16746
// for i in tmp do
16697: LD_ADDR_VAR 0 1
16701: PUSH
16702: LD_VAR 0 2
16706: PUSH
16707: FOR_IN
16708: IFFALSE 16744
// begin if Crawls ( i ) then
16710: LD_VAR 0 1
16714: PPUSH
16715: CALL_OW 318
16719: IFFALSE 16730
// ComWalk ( i ) ;
16721: LD_VAR 0 1
16725: PPUSH
16726: CALL_OW 138
// SetClass ( i , 2 ) ;
16730: LD_VAR 0 1
16734: PPUSH
16735: LD_INT 2
16737: PPUSH
16738: CALL_OW 336
// end ;
16742: GO 16707
16744: POP
16745: POP
// end ;
16746: PPOPN 2
16748: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16749: LD_EXP 24
16753: PUSH
16754: LD_EXP 77
16758: AND
16759: IFFALSE 17047
16761: GO 16763
16763: DISABLE
16764: LD_INT 0
16766: PPUSH
16767: PPUSH
16768: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16769: LD_OWVAR 2
16773: PPUSH
16774: LD_INT 9
16776: PPUSH
16777: LD_INT 1
16779: PPUSH
16780: LD_INT 1
16782: PPUSH
16783: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16787: LD_INT 9
16789: PPUSH
16790: LD_OWVAR 2
16794: PPUSH
16795: CALL_OW 343
// uc_side := 9 ;
16799: LD_ADDR_OWVAR 20
16803: PUSH
16804: LD_INT 9
16806: ST_TO_ADDR
// uc_nation := 2 ;
16807: LD_ADDR_OWVAR 21
16811: PUSH
16812: LD_INT 2
16814: ST_TO_ADDR
// hc_name := Dark Warrior ;
16815: LD_ADDR_OWVAR 26
16819: PUSH
16820: LD_STRING Dark Warrior
16822: ST_TO_ADDR
// hc_gallery :=  ;
16823: LD_ADDR_OWVAR 33
16827: PUSH
16828: LD_STRING 
16830: ST_TO_ADDR
// hc_noskilllimit := true ;
16831: LD_ADDR_OWVAR 76
16835: PUSH
16836: LD_INT 1
16838: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16839: LD_ADDR_OWVAR 31
16843: PUSH
16844: LD_INT 30
16846: PUSH
16847: LD_INT 30
16849: PUSH
16850: LD_INT 30
16852: PUSH
16853: LD_INT 30
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: ST_TO_ADDR
// un := CreateHuman ;
16862: LD_ADDR_VAR 0 3
16866: PUSH
16867: CALL_OW 44
16871: ST_TO_ADDR
// hc_noskilllimit := false ;
16872: LD_ADDR_OWVAR 76
16876: PUSH
16877: LD_INT 0
16879: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16880: LD_VAR 0 3
16884: PPUSH
16885: LD_INT 1
16887: PPUSH
16888: CALL_OW 51
// ToLua ( playRanger() ) ;
16892: LD_STRING playRanger()
16894: PPUSH
16895: CALL_OW 559
// p := 0 ;
16899: LD_ADDR_VAR 0 2
16903: PUSH
16904: LD_INT 0
16906: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16907: LD_INT 35
16909: PPUSH
16910: CALL_OW 67
// p := p + 1 ;
16914: LD_ADDR_VAR 0 2
16918: PUSH
16919: LD_VAR 0 2
16923: PUSH
16924: LD_INT 1
16926: PLUS
16927: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16928: LD_VAR 0 3
16932: PPUSH
16933: CALL_OW 256
16937: PUSH
16938: LD_INT 1000
16940: LESS
16941: IFFALSE 16955
// SetLives ( un , 1000 ) ;
16943: LD_VAR 0 3
16947: PPUSH
16948: LD_INT 1000
16950: PPUSH
16951: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16955: LD_VAR 0 3
16959: PPUSH
16960: LD_INT 81
16962: PUSH
16963: LD_OWVAR 2
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 91
16974: PUSH
16975: LD_VAR 0 3
16979: PUSH
16980: LD_INT 30
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PPUSH
16992: CALL_OW 69
16996: PPUSH
16997: LD_VAR 0 3
17001: PPUSH
17002: CALL_OW 74
17006: PPUSH
17007: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17011: LD_VAR 0 2
17015: PUSH
17016: LD_INT 80
17018: GREATER
17019: PUSH
17020: LD_VAR 0 3
17024: PPUSH
17025: CALL_OW 301
17029: OR
17030: IFFALSE 16907
// if un then
17032: LD_VAR 0 3
17036: IFFALSE 17047
// RemoveUnit ( un ) ;
17038: LD_VAR 0 3
17042: PPUSH
17043: CALL_OW 64
// end ;
17047: PPOPN 3
17049: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17050: LD_EXP 78
17054: IFFALSE 17170
17056: GO 17058
17058: DISABLE
17059: LD_INT 0
17061: PPUSH
17062: PPUSH
17063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17064: LD_ADDR_VAR 0 2
17068: PUSH
17069: LD_INT 81
17071: PUSH
17072: LD_OWVAR 2
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 21
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PPUSH
17095: CALL_OW 69
17099: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17100: LD_STRING playComputer()
17102: PPUSH
17103: CALL_OW 559
// if not tmp then
17107: LD_VAR 0 2
17111: NOT
17112: IFFALSE 17116
// exit ;
17114: GO 17170
// for i in tmp do
17116: LD_ADDR_VAR 0 1
17120: PUSH
17121: LD_VAR 0 2
17125: PUSH
17126: FOR_IN
17127: IFFALSE 17168
// for j := 1 to 4 do
17129: LD_ADDR_VAR 0 3
17133: PUSH
17134: DOUBLE
17135: LD_INT 1
17137: DEC
17138: ST_TO_ADDR
17139: LD_INT 4
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17164
// SetSkill ( i , j , 10 ) ;
17145: LD_VAR 0 1
17149: PPUSH
17150: LD_VAR 0 3
17154: PPUSH
17155: LD_INT 10
17157: PPUSH
17158: CALL_OW 237
17162: GO 17142
17164: POP
17165: POP
17166: GO 17126
17168: POP
17169: POP
// end ;
17170: PPOPN 3
17172: END
// every 0 0$1 trigger s30 do var i , tmp ;
17173: LD_EXP 79
17177: IFFALSE 17246
17179: GO 17181
17181: DISABLE
17182: LD_INT 0
17184: PPUSH
17185: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17186: LD_ADDR_VAR 0 2
17190: PUSH
17191: LD_INT 22
17193: PUSH
17194: LD_OWVAR 2
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PPUSH
17203: CALL_OW 69
17207: ST_TO_ADDR
// if not tmp then
17208: LD_VAR 0 2
17212: NOT
17213: IFFALSE 17217
// exit ;
17215: GO 17246
// for i in tmp do
17217: LD_ADDR_VAR 0 1
17221: PUSH
17222: LD_VAR 0 2
17226: PUSH
17227: FOR_IN
17228: IFFALSE 17244
// SetLives ( i , 300 ) ;
17230: LD_VAR 0 1
17234: PPUSH
17235: LD_INT 300
17237: PPUSH
17238: CALL_OW 234
17242: GO 17227
17244: POP
17245: POP
// end ;
17246: PPOPN 2
17248: END
// every 0 0$1 trigger s60 do var i , tmp ;
17249: LD_EXP 80
17253: IFFALSE 17322
17255: GO 17257
17257: DISABLE
17258: LD_INT 0
17260: PPUSH
17261: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17262: LD_ADDR_VAR 0 2
17266: PUSH
17267: LD_INT 22
17269: PUSH
17270: LD_OWVAR 2
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PPUSH
17279: CALL_OW 69
17283: ST_TO_ADDR
// if not tmp then
17284: LD_VAR 0 2
17288: NOT
17289: IFFALSE 17293
// exit ;
17291: GO 17322
// for i in tmp do
17293: LD_ADDR_VAR 0 1
17297: PUSH
17298: LD_VAR 0 2
17302: PUSH
17303: FOR_IN
17304: IFFALSE 17320
// SetLives ( i , 600 ) ;
17306: LD_VAR 0 1
17310: PPUSH
17311: LD_INT 600
17313: PPUSH
17314: CALL_OW 234
17318: GO 17303
17320: POP
17321: POP
// end ;
17322: PPOPN 2
17324: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17325: LD_INT 0
17327: PPUSH
// case cmd of 301 :
17328: LD_VAR 0 1
17332: PUSH
17333: LD_INT 301
17335: DOUBLE
17336: EQUAL
17337: IFTRUE 17341
17339: GO 17373
17341: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17342: LD_VAR 0 6
17346: PPUSH
17347: LD_VAR 0 7
17351: PPUSH
17352: LD_VAR 0 8
17356: PPUSH
17357: LD_VAR 0 4
17361: PPUSH
17362: LD_VAR 0 5
17366: PPUSH
17367: CALL 18574 0 5
17371: GO 17494
17373: LD_INT 302
17375: DOUBLE
17376: EQUAL
17377: IFTRUE 17381
17379: GO 17418
17381: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17382: LD_VAR 0 6
17386: PPUSH
17387: LD_VAR 0 7
17391: PPUSH
17392: LD_VAR 0 8
17396: PPUSH
17397: LD_VAR 0 9
17401: PPUSH
17402: LD_VAR 0 4
17406: PPUSH
17407: LD_VAR 0 5
17411: PPUSH
17412: CALL 18665 0 6
17416: GO 17494
17418: LD_INT 303
17420: DOUBLE
17421: EQUAL
17422: IFTRUE 17426
17424: GO 17463
17426: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17427: LD_VAR 0 6
17431: PPUSH
17432: LD_VAR 0 7
17436: PPUSH
17437: LD_VAR 0 8
17441: PPUSH
17442: LD_VAR 0 9
17446: PPUSH
17447: LD_VAR 0 4
17451: PPUSH
17452: LD_VAR 0 5
17456: PPUSH
17457: CALL 17499 0 6
17461: GO 17494
17463: LD_INT 304
17465: DOUBLE
17466: EQUAL
17467: IFTRUE 17471
17469: GO 17493
17471: POP
// hHackTeleport ( unit , x , y ) ; end ;
17472: LD_VAR 0 2
17476: PPUSH
17477: LD_VAR 0 4
17481: PPUSH
17482: LD_VAR 0 5
17486: PPUSH
17487: CALL 19258 0 3
17491: GO 17494
17493: POP
// end ;
17494: LD_VAR 0 12
17498: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17499: LD_INT 0
17501: PPUSH
17502: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17503: LD_VAR 0 1
17507: PUSH
17508: LD_INT 1
17510: LESS
17511: PUSH
17512: LD_VAR 0 1
17516: PUSH
17517: LD_INT 3
17519: GREATER
17520: OR
17521: PUSH
17522: LD_VAR 0 5
17526: PPUSH
17527: LD_VAR 0 6
17531: PPUSH
17532: CALL_OW 428
17536: OR
17537: IFFALSE 17541
// exit ;
17539: GO 18261
// uc_side := your_side ;
17541: LD_ADDR_OWVAR 20
17545: PUSH
17546: LD_OWVAR 2
17550: ST_TO_ADDR
// uc_nation := nation ;
17551: LD_ADDR_OWVAR 21
17555: PUSH
17556: LD_VAR 0 1
17560: ST_TO_ADDR
// bc_level = 1 ;
17561: LD_ADDR_OWVAR 43
17565: PUSH
17566: LD_INT 1
17568: ST_TO_ADDR
// case btype of 1 :
17569: LD_VAR 0 2
17573: PUSH
17574: LD_INT 1
17576: DOUBLE
17577: EQUAL
17578: IFTRUE 17582
17580: GO 17593
17582: POP
// bc_type := b_depot ; 2 :
17583: LD_ADDR_OWVAR 42
17587: PUSH
17588: LD_INT 0
17590: ST_TO_ADDR
17591: GO 18205
17593: LD_INT 2
17595: DOUBLE
17596: EQUAL
17597: IFTRUE 17601
17599: GO 17612
17601: POP
// bc_type := b_warehouse ; 3 :
17602: LD_ADDR_OWVAR 42
17606: PUSH
17607: LD_INT 1
17609: ST_TO_ADDR
17610: GO 18205
17612: LD_INT 3
17614: DOUBLE
17615: EQUAL
17616: IFTRUE 17620
17618: GO 17631
17620: POP
// bc_type := b_lab ; 4 .. 9 :
17621: LD_ADDR_OWVAR 42
17625: PUSH
17626: LD_INT 6
17628: ST_TO_ADDR
17629: GO 18205
17631: LD_INT 4
17633: DOUBLE
17634: GREATEREQUAL
17635: IFFALSE 17643
17637: LD_INT 9
17639: DOUBLE
17640: LESSEQUAL
17641: IFTRUE 17645
17643: GO 17697
17645: POP
// begin bc_type := b_lab_half ;
17646: LD_ADDR_OWVAR 42
17650: PUSH
17651: LD_INT 7
17653: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17654: LD_ADDR_OWVAR 44
17658: PUSH
17659: LD_INT 10
17661: PUSH
17662: LD_INT 11
17664: PUSH
17665: LD_INT 12
17667: PUSH
17668: LD_INT 15
17670: PUSH
17671: LD_INT 14
17673: PUSH
17674: LD_INT 13
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: PUSH
17685: LD_VAR 0 2
17689: PUSH
17690: LD_INT 3
17692: MINUS
17693: ARRAY
17694: ST_TO_ADDR
// end ; 10 .. 13 :
17695: GO 18205
17697: LD_INT 10
17699: DOUBLE
17700: GREATEREQUAL
17701: IFFALSE 17709
17703: LD_INT 13
17705: DOUBLE
17706: LESSEQUAL
17707: IFTRUE 17711
17709: GO 17788
17711: POP
// begin bc_type := b_lab_full ;
17712: LD_ADDR_OWVAR 42
17716: PUSH
17717: LD_INT 8
17719: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17720: LD_ADDR_OWVAR 44
17724: PUSH
17725: LD_INT 10
17727: PUSH
17728: LD_INT 12
17730: PUSH
17731: LD_INT 14
17733: PUSH
17734: LD_INT 13
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: PUSH
17743: LD_VAR 0 2
17747: PUSH
17748: LD_INT 9
17750: MINUS
17751: ARRAY
17752: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17753: LD_ADDR_OWVAR 45
17757: PUSH
17758: LD_INT 11
17760: PUSH
17761: LD_INT 15
17763: PUSH
17764: LD_INT 12
17766: PUSH
17767: LD_INT 15
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: PUSH
17776: LD_VAR 0 2
17780: PUSH
17781: LD_INT 9
17783: MINUS
17784: ARRAY
17785: ST_TO_ADDR
// end ; 14 :
17786: GO 18205
17788: LD_INT 14
17790: DOUBLE
17791: EQUAL
17792: IFTRUE 17796
17794: GO 17807
17796: POP
// bc_type := b_workshop ; 15 :
17797: LD_ADDR_OWVAR 42
17801: PUSH
17802: LD_INT 2
17804: ST_TO_ADDR
17805: GO 18205
17807: LD_INT 15
17809: DOUBLE
17810: EQUAL
17811: IFTRUE 17815
17813: GO 17826
17815: POP
// bc_type := b_factory ; 16 :
17816: LD_ADDR_OWVAR 42
17820: PUSH
17821: LD_INT 3
17823: ST_TO_ADDR
17824: GO 18205
17826: LD_INT 16
17828: DOUBLE
17829: EQUAL
17830: IFTRUE 17834
17832: GO 17845
17834: POP
// bc_type := b_ext_gun ; 17 :
17835: LD_ADDR_OWVAR 42
17839: PUSH
17840: LD_INT 17
17842: ST_TO_ADDR
17843: GO 18205
17845: LD_INT 17
17847: DOUBLE
17848: EQUAL
17849: IFTRUE 17853
17851: GO 17881
17853: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17854: LD_ADDR_OWVAR 42
17858: PUSH
17859: LD_INT 19
17861: PUSH
17862: LD_INT 23
17864: PUSH
17865: LD_INT 19
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: LIST
17872: PUSH
17873: LD_VAR 0 1
17877: ARRAY
17878: ST_TO_ADDR
17879: GO 18205
17881: LD_INT 18
17883: DOUBLE
17884: EQUAL
17885: IFTRUE 17889
17887: GO 17900
17889: POP
// bc_type := b_ext_radar ; 19 :
17890: LD_ADDR_OWVAR 42
17894: PUSH
17895: LD_INT 20
17897: ST_TO_ADDR
17898: GO 18205
17900: LD_INT 19
17902: DOUBLE
17903: EQUAL
17904: IFTRUE 17908
17906: GO 17919
17908: POP
// bc_type := b_ext_radio ; 20 :
17909: LD_ADDR_OWVAR 42
17913: PUSH
17914: LD_INT 22
17916: ST_TO_ADDR
17917: GO 18205
17919: LD_INT 20
17921: DOUBLE
17922: EQUAL
17923: IFTRUE 17927
17925: GO 17938
17927: POP
// bc_type := b_ext_siberium ; 21 :
17928: LD_ADDR_OWVAR 42
17932: PUSH
17933: LD_INT 21
17935: ST_TO_ADDR
17936: GO 18205
17938: LD_INT 21
17940: DOUBLE
17941: EQUAL
17942: IFTRUE 17946
17944: GO 17957
17946: POP
// bc_type := b_ext_computer ; 22 :
17947: LD_ADDR_OWVAR 42
17951: PUSH
17952: LD_INT 24
17954: ST_TO_ADDR
17955: GO 18205
17957: LD_INT 22
17959: DOUBLE
17960: EQUAL
17961: IFTRUE 17965
17963: GO 17976
17965: POP
// bc_type := b_ext_track ; 23 :
17966: LD_ADDR_OWVAR 42
17970: PUSH
17971: LD_INT 16
17973: ST_TO_ADDR
17974: GO 18205
17976: LD_INT 23
17978: DOUBLE
17979: EQUAL
17980: IFTRUE 17984
17982: GO 17995
17984: POP
// bc_type := b_ext_laser ; 24 :
17985: LD_ADDR_OWVAR 42
17989: PUSH
17990: LD_INT 25
17992: ST_TO_ADDR
17993: GO 18205
17995: LD_INT 24
17997: DOUBLE
17998: EQUAL
17999: IFTRUE 18003
18001: GO 18014
18003: POP
// bc_type := b_control_tower ; 25 :
18004: LD_ADDR_OWVAR 42
18008: PUSH
18009: LD_INT 36
18011: ST_TO_ADDR
18012: GO 18205
18014: LD_INT 25
18016: DOUBLE
18017: EQUAL
18018: IFTRUE 18022
18020: GO 18033
18022: POP
// bc_type := b_breastwork ; 26 :
18023: LD_ADDR_OWVAR 42
18027: PUSH
18028: LD_INT 31
18030: ST_TO_ADDR
18031: GO 18205
18033: LD_INT 26
18035: DOUBLE
18036: EQUAL
18037: IFTRUE 18041
18039: GO 18052
18041: POP
// bc_type := b_bunker ; 27 :
18042: LD_ADDR_OWVAR 42
18046: PUSH
18047: LD_INT 32
18049: ST_TO_ADDR
18050: GO 18205
18052: LD_INT 27
18054: DOUBLE
18055: EQUAL
18056: IFTRUE 18060
18058: GO 18071
18060: POP
// bc_type := b_turret ; 28 :
18061: LD_ADDR_OWVAR 42
18065: PUSH
18066: LD_INT 33
18068: ST_TO_ADDR
18069: GO 18205
18071: LD_INT 28
18073: DOUBLE
18074: EQUAL
18075: IFTRUE 18079
18077: GO 18090
18079: POP
// bc_type := b_armoury ; 29 :
18080: LD_ADDR_OWVAR 42
18084: PUSH
18085: LD_INT 4
18087: ST_TO_ADDR
18088: GO 18205
18090: LD_INT 29
18092: DOUBLE
18093: EQUAL
18094: IFTRUE 18098
18096: GO 18109
18098: POP
// bc_type := b_barracks ; 30 :
18099: LD_ADDR_OWVAR 42
18103: PUSH
18104: LD_INT 5
18106: ST_TO_ADDR
18107: GO 18205
18109: LD_INT 30
18111: DOUBLE
18112: EQUAL
18113: IFTRUE 18117
18115: GO 18128
18117: POP
// bc_type := b_solar_power ; 31 :
18118: LD_ADDR_OWVAR 42
18122: PUSH
18123: LD_INT 27
18125: ST_TO_ADDR
18126: GO 18205
18128: LD_INT 31
18130: DOUBLE
18131: EQUAL
18132: IFTRUE 18136
18134: GO 18147
18136: POP
// bc_type := b_oil_power ; 32 :
18137: LD_ADDR_OWVAR 42
18141: PUSH
18142: LD_INT 26
18144: ST_TO_ADDR
18145: GO 18205
18147: LD_INT 32
18149: DOUBLE
18150: EQUAL
18151: IFTRUE 18155
18153: GO 18166
18155: POP
// bc_type := b_siberite_power ; 33 :
18156: LD_ADDR_OWVAR 42
18160: PUSH
18161: LD_INT 28
18163: ST_TO_ADDR
18164: GO 18205
18166: LD_INT 33
18168: DOUBLE
18169: EQUAL
18170: IFTRUE 18174
18172: GO 18185
18174: POP
// bc_type := b_oil_mine ; 34 :
18175: LD_ADDR_OWVAR 42
18179: PUSH
18180: LD_INT 29
18182: ST_TO_ADDR
18183: GO 18205
18185: LD_INT 34
18187: DOUBLE
18188: EQUAL
18189: IFTRUE 18193
18191: GO 18204
18193: POP
// bc_type := b_siberite_mine ; end ;
18194: LD_ADDR_OWVAR 42
18198: PUSH
18199: LD_INT 30
18201: ST_TO_ADDR
18202: GO 18205
18204: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18205: LD_ADDR_VAR 0 8
18209: PUSH
18210: LD_VAR 0 5
18214: PPUSH
18215: LD_VAR 0 6
18219: PPUSH
18220: LD_VAR 0 3
18224: PPUSH
18225: CALL_OW 47
18229: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18230: LD_OWVAR 42
18234: PUSH
18235: LD_INT 32
18237: PUSH
18238: LD_INT 33
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: IN
18245: IFFALSE 18261
// PlaceWeaponTurret ( b , weapon ) ;
18247: LD_VAR 0 8
18251: PPUSH
18252: LD_VAR 0 4
18256: PPUSH
18257: CALL_OW 431
// end ;
18261: LD_VAR 0 7
18265: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18266: LD_INT 0
18268: PPUSH
18269: PPUSH
18270: PPUSH
18271: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18272: LD_ADDR_VAR 0 4
18276: PUSH
18277: LD_INT 22
18279: PUSH
18280: LD_OWVAR 2
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 2
18291: PUSH
18292: LD_INT 30
18294: PUSH
18295: LD_INT 0
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 30
18304: PUSH
18305: LD_INT 1
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PPUSH
18321: CALL_OW 69
18325: ST_TO_ADDR
// if not tmp then
18326: LD_VAR 0 4
18330: NOT
18331: IFFALSE 18335
// exit ;
18333: GO 18394
// for i in tmp do
18335: LD_ADDR_VAR 0 2
18339: PUSH
18340: LD_VAR 0 4
18344: PUSH
18345: FOR_IN
18346: IFFALSE 18392
// for j = 1 to 3 do
18348: LD_ADDR_VAR 0 3
18352: PUSH
18353: DOUBLE
18354: LD_INT 1
18356: DEC
18357: ST_TO_ADDR
18358: LD_INT 3
18360: PUSH
18361: FOR_TO
18362: IFFALSE 18388
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18364: LD_VAR 0 2
18368: PPUSH
18369: CALL_OW 274
18373: PPUSH
18374: LD_VAR 0 3
18378: PPUSH
18379: LD_INT 99999
18381: PPUSH
18382: CALL_OW 277
18386: GO 18361
18388: POP
18389: POP
18390: GO 18345
18392: POP
18393: POP
// end ;
18394: LD_VAR 0 1
18398: RET
// export function hHackSetLevel10 ; var i , j ; begin
18399: LD_INT 0
18401: PPUSH
18402: PPUSH
18403: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18404: LD_ADDR_VAR 0 2
18408: PUSH
18409: LD_INT 21
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PPUSH
18419: CALL_OW 69
18423: PUSH
18424: FOR_IN
18425: IFFALSE 18477
// if IsSelected ( i ) then
18427: LD_VAR 0 2
18431: PPUSH
18432: CALL_OW 306
18436: IFFALSE 18475
// begin for j := 1 to 4 do
18438: LD_ADDR_VAR 0 3
18442: PUSH
18443: DOUBLE
18444: LD_INT 1
18446: DEC
18447: ST_TO_ADDR
18448: LD_INT 4
18450: PUSH
18451: FOR_TO
18452: IFFALSE 18473
// SetSkill ( i , j , 10 ) ;
18454: LD_VAR 0 2
18458: PPUSH
18459: LD_VAR 0 3
18463: PPUSH
18464: LD_INT 10
18466: PPUSH
18467: CALL_OW 237
18471: GO 18451
18473: POP
18474: POP
// end ;
18475: GO 18424
18477: POP
18478: POP
// end ;
18479: LD_VAR 0 1
18483: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18484: LD_INT 0
18486: PPUSH
18487: PPUSH
18488: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18489: LD_ADDR_VAR 0 2
18493: PUSH
18494: LD_INT 22
18496: PUSH
18497: LD_OWVAR 2
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 21
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PPUSH
18520: CALL_OW 69
18524: PUSH
18525: FOR_IN
18526: IFFALSE 18567
// begin for j := 1 to 4 do
18528: LD_ADDR_VAR 0 3
18532: PUSH
18533: DOUBLE
18534: LD_INT 1
18536: DEC
18537: ST_TO_ADDR
18538: LD_INT 4
18540: PUSH
18541: FOR_TO
18542: IFFALSE 18563
// SetSkill ( i , j , 10 ) ;
18544: LD_VAR 0 2
18548: PPUSH
18549: LD_VAR 0 3
18553: PPUSH
18554: LD_INT 10
18556: PPUSH
18557: CALL_OW 237
18561: GO 18541
18563: POP
18564: POP
// end ;
18565: GO 18525
18567: POP
18568: POP
// end ;
18569: LD_VAR 0 1
18573: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18574: LD_INT 0
18576: PPUSH
// uc_side := your_side ;
18577: LD_ADDR_OWVAR 20
18581: PUSH
18582: LD_OWVAR 2
18586: ST_TO_ADDR
// uc_nation := nation ;
18587: LD_ADDR_OWVAR 21
18591: PUSH
18592: LD_VAR 0 1
18596: ST_TO_ADDR
// InitHc ;
18597: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18601: LD_INT 0
18603: PPUSH
18604: LD_VAR 0 2
18608: PPUSH
18609: LD_VAR 0 3
18613: PPUSH
18614: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18618: LD_VAR 0 4
18622: PPUSH
18623: LD_VAR 0 5
18627: PPUSH
18628: CALL_OW 428
18632: PUSH
18633: LD_INT 0
18635: EQUAL
18636: IFFALSE 18660
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18638: CALL_OW 44
18642: PPUSH
18643: LD_VAR 0 4
18647: PPUSH
18648: LD_VAR 0 5
18652: PPUSH
18653: LD_INT 1
18655: PPUSH
18656: CALL_OW 48
// end ;
18660: LD_VAR 0 6
18664: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18665: LD_INT 0
18667: PPUSH
18668: PPUSH
// uc_side := your_side ;
18669: LD_ADDR_OWVAR 20
18673: PUSH
18674: LD_OWVAR 2
18678: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18679: LD_VAR 0 1
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: LD_INT 2
18689: PUSH
18690: LD_INT 3
18692: PUSH
18693: LD_INT 4
18695: PUSH
18696: LD_INT 5
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: IN
18706: IFFALSE 18718
// uc_nation := nation_american else
18708: LD_ADDR_OWVAR 21
18712: PUSH
18713: LD_INT 1
18715: ST_TO_ADDR
18716: GO 18761
// if chassis in [ 11 , 12 , 13 , 14 ] then
18718: LD_VAR 0 1
18722: PUSH
18723: LD_INT 11
18725: PUSH
18726: LD_INT 12
18728: PUSH
18729: LD_INT 13
18731: PUSH
18732: LD_INT 14
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: IN
18741: IFFALSE 18753
// uc_nation := nation_arabian else
18743: LD_ADDR_OWVAR 21
18747: PUSH
18748: LD_INT 2
18750: ST_TO_ADDR
18751: GO 18761
// uc_nation := nation_russian ;
18753: LD_ADDR_OWVAR 21
18757: PUSH
18758: LD_INT 3
18760: ST_TO_ADDR
// vc_chassis := chassis ;
18761: LD_ADDR_OWVAR 37
18765: PUSH
18766: LD_VAR 0 1
18770: ST_TO_ADDR
// vc_engine := engine ;
18771: LD_ADDR_OWVAR 39
18775: PUSH
18776: LD_VAR 0 2
18780: ST_TO_ADDR
// vc_control := control ;
18781: LD_ADDR_OWVAR 38
18785: PUSH
18786: LD_VAR 0 3
18790: ST_TO_ADDR
// vc_weapon := weapon ;
18791: LD_ADDR_OWVAR 40
18795: PUSH
18796: LD_VAR 0 4
18800: ST_TO_ADDR
// un := CreateVehicle ;
18801: LD_ADDR_VAR 0 8
18805: PUSH
18806: CALL_OW 45
18810: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18811: LD_VAR 0 8
18815: PPUSH
18816: LD_INT 0
18818: PPUSH
18819: LD_INT 5
18821: PPUSH
18822: CALL_OW 12
18826: PPUSH
18827: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18831: LD_VAR 0 8
18835: PPUSH
18836: LD_VAR 0 5
18840: PPUSH
18841: LD_VAR 0 6
18845: PPUSH
18846: LD_INT 1
18848: PPUSH
18849: CALL_OW 48
// end ;
18853: LD_VAR 0 7
18857: RET
// export hInvincible ; every 1 do
18858: GO 18860
18860: DISABLE
// hInvincible := [ ] ;
18861: LD_ADDR_EXP 81
18865: PUSH
18866: EMPTY
18867: ST_TO_ADDR
18868: END
// every 10 do var i ;
18869: GO 18871
18871: DISABLE
18872: LD_INT 0
18874: PPUSH
// begin enable ;
18875: ENABLE
// if not hInvincible then
18876: LD_EXP 81
18880: NOT
18881: IFFALSE 18885
// exit ;
18883: GO 18929
// for i in hInvincible do
18885: LD_ADDR_VAR 0 1
18889: PUSH
18890: LD_EXP 81
18894: PUSH
18895: FOR_IN
18896: IFFALSE 18927
// if GetLives ( i ) < 1000 then
18898: LD_VAR 0 1
18902: PPUSH
18903: CALL_OW 256
18907: PUSH
18908: LD_INT 1000
18910: LESS
18911: IFFALSE 18925
// SetLives ( i , 1000 ) ;
18913: LD_VAR 0 1
18917: PPUSH
18918: LD_INT 1000
18920: PPUSH
18921: CALL_OW 234
18925: GO 18895
18927: POP
18928: POP
// end ;
18929: PPOPN 1
18931: END
// export function hHackInvincible ; var i ; begin
18932: LD_INT 0
18934: PPUSH
18935: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18936: LD_ADDR_VAR 0 2
18940: PUSH
18941: LD_INT 2
18943: PUSH
18944: LD_INT 21
18946: PUSH
18947: LD_INT 1
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 21
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: LIST
18968: PPUSH
18969: CALL_OW 69
18973: PUSH
18974: FOR_IN
18975: IFFALSE 19036
// if IsSelected ( i ) then
18977: LD_VAR 0 2
18981: PPUSH
18982: CALL_OW 306
18986: IFFALSE 19034
// begin if i in hInvincible then
18988: LD_VAR 0 2
18992: PUSH
18993: LD_EXP 81
18997: IN
18998: IFFALSE 19018
// hInvincible := hInvincible diff i else
19000: LD_ADDR_EXP 81
19004: PUSH
19005: LD_EXP 81
19009: PUSH
19010: LD_VAR 0 2
19014: DIFF
19015: ST_TO_ADDR
19016: GO 19034
// hInvincible := hInvincible union i ;
19018: LD_ADDR_EXP 81
19022: PUSH
19023: LD_EXP 81
19027: PUSH
19028: LD_VAR 0 2
19032: UNION
19033: ST_TO_ADDR
// end ;
19034: GO 18974
19036: POP
19037: POP
// end ;
19038: LD_VAR 0 1
19042: RET
// export function hHackInvisible ; var i , j ; begin
19043: LD_INT 0
19045: PPUSH
19046: PPUSH
19047: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19048: LD_ADDR_VAR 0 2
19052: PUSH
19053: LD_INT 21
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PPUSH
19063: CALL_OW 69
19067: PUSH
19068: FOR_IN
19069: IFFALSE 19093
// if IsSelected ( i ) then
19071: LD_VAR 0 2
19075: PPUSH
19076: CALL_OW 306
19080: IFFALSE 19091
// ComForceInvisible ( i ) ;
19082: LD_VAR 0 2
19086: PPUSH
19087: CALL_OW 496
19091: GO 19068
19093: POP
19094: POP
// end ;
19095: LD_VAR 0 1
19099: RET
// export function hHackChangeYourSide ; begin
19100: LD_INT 0
19102: PPUSH
// if your_side = 8 then
19103: LD_OWVAR 2
19107: PUSH
19108: LD_INT 8
19110: EQUAL
19111: IFFALSE 19123
// your_side := 0 else
19113: LD_ADDR_OWVAR 2
19117: PUSH
19118: LD_INT 0
19120: ST_TO_ADDR
19121: GO 19137
// your_side := your_side + 1 ;
19123: LD_ADDR_OWVAR 2
19127: PUSH
19128: LD_OWVAR 2
19132: PUSH
19133: LD_INT 1
19135: PLUS
19136: ST_TO_ADDR
// end ;
19137: LD_VAR 0 1
19141: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19142: LD_INT 0
19144: PPUSH
19145: PPUSH
19146: PPUSH
// for i in all_units do
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: LD_OWVAR 3
19156: PUSH
19157: FOR_IN
19158: IFFALSE 19236
// if IsSelected ( i ) then
19160: LD_VAR 0 2
19164: PPUSH
19165: CALL_OW 306
19169: IFFALSE 19234
// begin j := GetSide ( i ) ;
19171: LD_ADDR_VAR 0 3
19175: PUSH
19176: LD_VAR 0 2
19180: PPUSH
19181: CALL_OW 255
19185: ST_TO_ADDR
// if j = 8 then
19186: LD_VAR 0 3
19190: PUSH
19191: LD_INT 8
19193: EQUAL
19194: IFFALSE 19206
// j := 0 else
19196: LD_ADDR_VAR 0 3
19200: PUSH
19201: LD_INT 0
19203: ST_TO_ADDR
19204: GO 19220
// j := j + 1 ;
19206: LD_ADDR_VAR 0 3
19210: PUSH
19211: LD_VAR 0 3
19215: PUSH
19216: LD_INT 1
19218: PLUS
19219: ST_TO_ADDR
// SetSide ( i , j ) ;
19220: LD_VAR 0 2
19224: PPUSH
19225: LD_VAR 0 3
19229: PPUSH
19230: CALL_OW 235
// end ;
19234: GO 19157
19236: POP
19237: POP
// end ;
19238: LD_VAR 0 1
19242: RET
// export function hHackFog ; begin
19243: LD_INT 0
19245: PPUSH
// FogOff ( true ) ;
19246: LD_INT 1
19248: PPUSH
19249: CALL_OW 344
// end ;
19253: LD_VAR 0 1
19257: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19258: LD_INT 0
19260: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19261: LD_VAR 0 1
19265: PPUSH
19266: LD_VAR 0 2
19270: PPUSH
19271: LD_VAR 0 3
19275: PPUSH
19276: LD_INT 1
19278: PPUSH
19279: LD_INT 1
19281: PPUSH
19282: CALL_OW 483
// CenterOnXY ( x , y ) ;
19286: LD_VAR 0 2
19290: PPUSH
19291: LD_VAR 0 3
19295: PPUSH
19296: CALL_OW 84
// end ; end_of_file
19300: LD_VAR 0 4
19304: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19305: LD_INT 0
19307: PPUSH
19308: PPUSH
19309: PPUSH
19310: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19311: LD_VAR 0 1
19315: PPUSH
19316: CALL_OW 264
19320: PUSH
19321: LD_EXP 97
19325: EQUAL
19326: IFFALSE 19398
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19328: LD_INT 68
19330: PPUSH
19331: LD_VAR 0 1
19335: PPUSH
19336: CALL_OW 255
19340: PPUSH
19341: CALL_OW 321
19345: PUSH
19346: LD_INT 2
19348: EQUAL
19349: IFFALSE 19361
// eff := 70 else
19351: LD_ADDR_VAR 0 4
19355: PUSH
19356: LD_INT 70
19358: ST_TO_ADDR
19359: GO 19369
// eff := 30 ;
19361: LD_ADDR_VAR 0 4
19365: PUSH
19366: LD_INT 30
19368: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19369: LD_VAR 0 1
19373: PPUSH
19374: CALL_OW 250
19378: PPUSH
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 251
19388: PPUSH
19389: LD_VAR 0 4
19393: PPUSH
19394: CALL_OW 495
// end ; end ;
19398: LD_VAR 0 2
19402: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19403: LD_INT 0
19405: PPUSH
// end ;
19406: LD_VAR 0 4
19410: RET
// export function SOS_Command ( cmd ) ; begin
19411: LD_INT 0
19413: PPUSH
// end ;
19414: LD_VAR 0 2
19418: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19419: LD_INT 0
19421: PPUSH
// end ;
19422: LD_VAR 0 6
19426: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
19427: LD_INT 0
19429: PPUSH
19430: PPUSH
// if not vehicle or not factory then
19431: LD_VAR 0 1
19435: NOT
19436: PUSH
19437: LD_VAR 0 2
19441: NOT
19442: OR
19443: IFFALSE 19447
// exit ;
19445: GO 19678
// if factoryWaypoints >= factory then
19447: LD_EXP 82
19451: PUSH
19452: LD_VAR 0 2
19456: GREATEREQUAL
19457: IFFALSE 19678
// if factoryWaypoints [ factory ] then
19459: LD_EXP 82
19463: PUSH
19464: LD_VAR 0 2
19468: ARRAY
19469: IFFALSE 19678
// begin if GetControl ( vehicle ) = control_manual then
19471: LD_VAR 0 1
19475: PPUSH
19476: CALL_OW 263
19480: PUSH
19481: LD_INT 1
19483: EQUAL
19484: IFFALSE 19565
// begin driver := IsDrivenBy ( vehicle ) ;
19486: LD_ADDR_VAR 0 4
19490: PUSH
19491: LD_VAR 0 1
19495: PPUSH
19496: CALL_OW 311
19500: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19501: LD_VAR 0 4
19505: PPUSH
19506: LD_EXP 82
19510: PUSH
19511: LD_VAR 0 2
19515: ARRAY
19516: PUSH
19517: LD_INT 3
19519: ARRAY
19520: PPUSH
19521: LD_EXP 82
19525: PUSH
19526: LD_VAR 0 2
19530: ARRAY
19531: PUSH
19532: LD_INT 4
19534: ARRAY
19535: PPUSH
19536: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19540: LD_VAR 0 4
19544: PPUSH
19545: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
19549: LD_VAR 0 4
19553: PPUSH
19554: LD_VAR 0 2
19558: PPUSH
19559: CALL_OW 180
// end else
19563: GO 19678
// if GetControl ( vehicle ) = control_remote then
19565: LD_VAR 0 1
19569: PPUSH
19570: CALL_OW 263
19574: PUSH
19575: LD_INT 2
19577: EQUAL
19578: IFFALSE 19639
// begin wait ( 0 0$2 ) ;
19580: LD_INT 70
19582: PPUSH
19583: CALL_OW 67
// if Connect ( vehicle ) then
19587: LD_VAR 0 1
19591: PPUSH
19592: CALL 32388 0 1
19596: IFFALSE 19637
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19598: LD_VAR 0 1
19602: PPUSH
19603: LD_EXP 82
19607: PUSH
19608: LD_VAR 0 2
19612: ARRAY
19613: PUSH
19614: LD_INT 3
19616: ARRAY
19617: PPUSH
19618: LD_EXP 82
19622: PUSH
19623: LD_VAR 0 2
19627: ARRAY
19628: PUSH
19629: LD_INT 4
19631: ARRAY
19632: PPUSH
19633: CALL_OW 171
// end else
19637: GO 19678
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19639: LD_VAR 0 1
19643: PPUSH
19644: LD_EXP 82
19648: PUSH
19649: LD_VAR 0 2
19653: ARRAY
19654: PUSH
19655: LD_INT 3
19657: ARRAY
19658: PPUSH
19659: LD_EXP 82
19663: PUSH
19664: LD_VAR 0 2
19668: ARRAY
19669: PUSH
19670: LD_INT 4
19672: ARRAY
19673: PPUSH
19674: CALL_OW 171
// end ; end ;
19678: LD_VAR 0 3
19682: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19683: LD_INT 0
19685: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19686: LD_VAR 0 1
19690: PUSH
19691: LD_INT 250
19693: EQUAL
19694: PUSH
19695: LD_VAR 0 2
19699: PPUSH
19700: CALL_OW 264
19704: PUSH
19705: LD_EXP 100
19709: EQUAL
19710: AND
19711: IFFALSE 19732
// MinerPlaceMine ( unit , x , y ) ;
19713: LD_VAR 0 2
19717: PPUSH
19718: LD_VAR 0 4
19722: PPUSH
19723: LD_VAR 0 5
19727: PPUSH
19728: CALL 22460 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19732: LD_VAR 0 1
19736: PUSH
19737: LD_INT 251
19739: EQUAL
19740: PUSH
19741: LD_VAR 0 2
19745: PPUSH
19746: CALL_OW 264
19750: PUSH
19751: LD_EXP 100
19755: EQUAL
19756: AND
19757: IFFALSE 19778
// MinerDetonateMine ( unit , x , y ) ;
19759: LD_VAR 0 2
19763: PPUSH
19764: LD_VAR 0 4
19768: PPUSH
19769: LD_VAR 0 5
19773: PPUSH
19774: CALL 22737 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19778: LD_VAR 0 1
19782: PUSH
19783: LD_INT 252
19785: EQUAL
19786: PUSH
19787: LD_VAR 0 2
19791: PPUSH
19792: CALL_OW 264
19796: PUSH
19797: LD_EXP 100
19801: EQUAL
19802: AND
19803: IFFALSE 19824
// MinerCreateMinefield ( unit , x , y ) ;
19805: LD_VAR 0 2
19809: PPUSH
19810: LD_VAR 0 4
19814: PPUSH
19815: LD_VAR 0 5
19819: PPUSH
19820: CALL 23154 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19824: LD_VAR 0 1
19828: PUSH
19829: LD_INT 253
19831: EQUAL
19832: PUSH
19833: LD_VAR 0 2
19837: PPUSH
19838: CALL_OW 257
19842: PUSH
19843: LD_INT 5
19845: EQUAL
19846: AND
19847: IFFALSE 19868
// ComBinocular ( unit , x , y ) ;
19849: LD_VAR 0 2
19853: PPUSH
19854: LD_VAR 0 4
19858: PPUSH
19859: LD_VAR 0 5
19863: PPUSH
19864: CALL 23525 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19868: LD_VAR 0 1
19872: PUSH
19873: LD_INT 254
19875: EQUAL
19876: PUSH
19877: LD_VAR 0 2
19881: PPUSH
19882: CALL_OW 264
19886: PUSH
19887: LD_EXP 95
19891: EQUAL
19892: AND
19893: PUSH
19894: LD_VAR 0 3
19898: PPUSH
19899: CALL_OW 263
19903: PUSH
19904: LD_INT 3
19906: EQUAL
19907: AND
19908: IFFALSE 19924
// HackDestroyVehicle ( unit , selectedUnit ) ;
19910: LD_VAR 0 2
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL 21820 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19924: LD_VAR 0 1
19928: PUSH
19929: LD_INT 255
19931: EQUAL
19932: PUSH
19933: LD_VAR 0 2
19937: PPUSH
19938: CALL_OW 264
19942: PUSH
19943: LD_INT 14
19945: PUSH
19946: LD_INT 53
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: IN
19953: AND
19954: PUSH
19955: LD_VAR 0 4
19959: PPUSH
19960: LD_VAR 0 5
19964: PPUSH
19965: CALL_OW 488
19969: AND
19970: IFFALSE 19994
// CutTreeXYR ( unit , x , y , 12 ) ;
19972: LD_VAR 0 2
19976: PPUSH
19977: LD_VAR 0 4
19981: PPUSH
19982: LD_VAR 0 5
19986: PPUSH
19987: LD_INT 12
19989: PPUSH
19990: CALL 20386 0 4
// if cmd = 256 then
19994: LD_VAR 0 1
19998: PUSH
19999: LD_INT 256
20001: EQUAL
20002: IFFALSE 20023
// SetFactoryWaypoint ( unit , x , y ) ;
20004: LD_VAR 0 2
20008: PPUSH
20009: LD_VAR 0 4
20013: PPUSH
20014: LD_VAR 0 5
20018: PPUSH
20019: CALL 20028 0 3
// end ;
20023: LD_VAR 0 6
20027: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20028: LD_INT 0
20030: PPUSH
20031: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20032: LD_VAR 0 1
20036: NOT
20037: PUSH
20038: LD_VAR 0 2
20042: PPUSH
20043: LD_VAR 0 3
20047: PPUSH
20048: CALL_OW 488
20052: NOT
20053: OR
20054: PUSH
20055: LD_VAR 0 1
20059: PPUSH
20060: CALL_OW 266
20064: PUSH
20065: LD_INT 3
20067: NONEQUAL
20068: PUSH
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 247
20078: PUSH
20079: LD_INT 1
20081: EQUAL
20082: NOT
20083: AND
20084: OR
20085: IFFALSE 20089
// exit ;
20087: GO 20238
// if GetType ( factory ) = unit_human then
20089: LD_VAR 0 1
20093: PPUSH
20094: CALL_OW 247
20098: PUSH
20099: LD_INT 1
20101: EQUAL
20102: IFFALSE 20119
// factory := IsInUnit ( factory ) ;
20104: LD_ADDR_VAR 0 1
20108: PUSH
20109: LD_VAR 0 1
20113: PPUSH
20114: CALL_OW 310
20118: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20119: LD_VAR 0 1
20123: PPUSH
20124: CALL_OW 266
20128: PUSH
20129: LD_INT 3
20131: NONEQUAL
20132: IFFALSE 20136
// exit ;
20134: GO 20238
// if HexInfo ( x , y ) = factory then
20136: LD_VAR 0 2
20140: PPUSH
20141: LD_VAR 0 3
20145: PPUSH
20146: CALL_OW 428
20150: PUSH
20151: LD_VAR 0 1
20155: EQUAL
20156: IFFALSE 20183
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20158: LD_ADDR_EXP 82
20162: PUSH
20163: LD_EXP 82
20167: PPUSH
20168: LD_VAR 0 1
20172: PPUSH
20173: LD_INT 0
20175: PPUSH
20176: CALL_OW 1
20180: ST_TO_ADDR
20181: GO 20234
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20183: LD_ADDR_EXP 82
20187: PUSH
20188: LD_EXP 82
20192: PPUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: LD_VAR 0 1
20202: PPUSH
20203: CALL_OW 255
20207: PUSH
20208: LD_VAR 0 1
20212: PUSH
20213: LD_VAR 0 2
20217: PUSH
20218: LD_VAR 0 3
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: PPUSH
20229: CALL_OW 1
20233: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20234: CALL 20243 0 0
// end ;
20238: LD_VAR 0 4
20242: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
20243: LD_INT 0
20245: PPUSH
20246: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20247: LD_STRING resetFactoryWaypoint();
20249: PPUSH
20250: CALL_OW 559
// if factoryWaypoints then
20254: LD_EXP 82
20258: IFFALSE 20381
// begin for i := 1 to factoryWaypoints do
20260: LD_ADDR_VAR 0 2
20264: PUSH
20265: DOUBLE
20266: LD_INT 1
20268: DEC
20269: ST_TO_ADDR
20270: LD_EXP 82
20274: PUSH
20275: FOR_TO
20276: IFFALSE 20379
// if factoryWaypoints [ i ] then
20278: LD_EXP 82
20282: PUSH
20283: LD_VAR 0 2
20287: ARRAY
20288: IFFALSE 20377
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
20290: LD_STRING setFactoryWaypointXY(
20292: PUSH
20293: LD_EXP 82
20297: PUSH
20298: LD_VAR 0 2
20302: ARRAY
20303: PUSH
20304: LD_INT 1
20306: ARRAY
20307: STR
20308: PUSH
20309: LD_STRING ,
20311: STR
20312: PUSH
20313: LD_EXP 82
20317: PUSH
20318: LD_VAR 0 2
20322: ARRAY
20323: PUSH
20324: LD_INT 2
20326: ARRAY
20327: STR
20328: PUSH
20329: LD_STRING ,
20331: STR
20332: PUSH
20333: LD_EXP 82
20337: PUSH
20338: LD_VAR 0 2
20342: ARRAY
20343: PUSH
20344: LD_INT 3
20346: ARRAY
20347: STR
20348: PUSH
20349: LD_STRING ,
20351: STR
20352: PUSH
20353: LD_EXP 82
20357: PUSH
20358: LD_VAR 0 2
20362: ARRAY
20363: PUSH
20364: LD_INT 4
20366: ARRAY
20367: STR
20368: PUSH
20369: LD_STRING )
20371: STR
20372: PPUSH
20373: CALL_OW 559
20377: GO 20275
20379: POP
20380: POP
// end ; end ;
20381: LD_VAR 0 1
20385: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20386: LD_INT 0
20388: PPUSH
20389: PPUSH
20390: PPUSH
20391: PPUSH
20392: PPUSH
20393: PPUSH
20394: PPUSH
20395: PPUSH
20396: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20397: LD_VAR 0 1
20401: NOT
20402: PUSH
20403: LD_VAR 0 2
20407: PPUSH
20408: LD_VAR 0 3
20412: PPUSH
20413: CALL_OW 488
20417: NOT
20418: OR
20419: PUSH
20420: LD_VAR 0 4
20424: NOT
20425: OR
20426: IFFALSE 20430
// exit ;
20428: GO 20770
// list := [ ] ;
20430: LD_ADDR_VAR 0 13
20434: PUSH
20435: EMPTY
20436: ST_TO_ADDR
// if x - r < 0 then
20437: LD_VAR 0 2
20441: PUSH
20442: LD_VAR 0 4
20446: MINUS
20447: PUSH
20448: LD_INT 0
20450: LESS
20451: IFFALSE 20463
// min_x := 0 else
20453: LD_ADDR_VAR 0 7
20457: PUSH
20458: LD_INT 0
20460: ST_TO_ADDR
20461: GO 20479
// min_x := x - r ;
20463: LD_ADDR_VAR 0 7
20467: PUSH
20468: LD_VAR 0 2
20472: PUSH
20473: LD_VAR 0 4
20477: MINUS
20478: ST_TO_ADDR
// if y - r < 0 then
20479: LD_VAR 0 3
20483: PUSH
20484: LD_VAR 0 4
20488: MINUS
20489: PUSH
20490: LD_INT 0
20492: LESS
20493: IFFALSE 20505
// min_y := 0 else
20495: LD_ADDR_VAR 0 8
20499: PUSH
20500: LD_INT 0
20502: ST_TO_ADDR
20503: GO 20521
// min_y := y - r ;
20505: LD_ADDR_VAR 0 8
20509: PUSH
20510: LD_VAR 0 3
20514: PUSH
20515: LD_VAR 0 4
20519: MINUS
20520: ST_TO_ADDR
// max_x := x + r ;
20521: LD_ADDR_VAR 0 9
20525: PUSH
20526: LD_VAR 0 2
20530: PUSH
20531: LD_VAR 0 4
20535: PLUS
20536: ST_TO_ADDR
// max_y := y + r ;
20537: LD_ADDR_VAR 0 10
20541: PUSH
20542: LD_VAR 0 3
20546: PUSH
20547: LD_VAR 0 4
20551: PLUS
20552: ST_TO_ADDR
// for _x = min_x to max_x do
20553: LD_ADDR_VAR 0 11
20557: PUSH
20558: DOUBLE
20559: LD_VAR 0 7
20563: DEC
20564: ST_TO_ADDR
20565: LD_VAR 0 9
20569: PUSH
20570: FOR_TO
20571: IFFALSE 20688
// for _y = min_y to max_y do
20573: LD_ADDR_VAR 0 12
20577: PUSH
20578: DOUBLE
20579: LD_VAR 0 8
20583: DEC
20584: ST_TO_ADDR
20585: LD_VAR 0 10
20589: PUSH
20590: FOR_TO
20591: IFFALSE 20684
// begin if not ValidHex ( _x , _y ) then
20593: LD_VAR 0 11
20597: PPUSH
20598: LD_VAR 0 12
20602: PPUSH
20603: CALL_OW 488
20607: NOT
20608: IFFALSE 20612
// continue ;
20610: GO 20590
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20612: LD_VAR 0 11
20616: PPUSH
20617: LD_VAR 0 12
20621: PPUSH
20622: CALL_OW 351
20626: PUSH
20627: LD_VAR 0 11
20631: PPUSH
20632: LD_VAR 0 12
20636: PPUSH
20637: CALL_OW 554
20641: AND
20642: IFFALSE 20682
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20644: LD_ADDR_VAR 0 13
20648: PUSH
20649: LD_VAR 0 13
20653: PPUSH
20654: LD_VAR 0 13
20658: PUSH
20659: LD_INT 1
20661: PLUS
20662: PPUSH
20663: LD_VAR 0 11
20667: PUSH
20668: LD_VAR 0 12
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PPUSH
20677: CALL_OW 2
20681: ST_TO_ADDR
// end ;
20682: GO 20590
20684: POP
20685: POP
20686: GO 20570
20688: POP
20689: POP
// if not list then
20690: LD_VAR 0 13
20694: NOT
20695: IFFALSE 20699
// exit ;
20697: GO 20770
// for i in list do
20699: LD_ADDR_VAR 0 6
20703: PUSH
20704: LD_VAR 0 13
20708: PUSH
20709: FOR_IN
20710: IFFALSE 20768
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20712: LD_VAR 0 1
20716: PPUSH
20717: LD_STRING M
20719: PUSH
20720: LD_VAR 0 6
20724: PUSH
20725: LD_INT 1
20727: ARRAY
20728: PUSH
20729: LD_VAR 0 6
20733: PUSH
20734: LD_INT 2
20736: ARRAY
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: LD_INT 0
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: PUSH
20759: EMPTY
20760: LIST
20761: PPUSH
20762: CALL_OW 447
20766: GO 20709
20768: POP
20769: POP
// end ;
20770: LD_VAR 0 5
20774: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20775: LD_EXP 83
20779: NOT
20780: IFFALSE 20830
20782: GO 20784
20784: DISABLE
// begin initHack := true ;
20785: LD_ADDR_EXP 83
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// hackTanks := [ ] ;
20793: LD_ADDR_EXP 84
20797: PUSH
20798: EMPTY
20799: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20800: LD_ADDR_EXP 85
20804: PUSH
20805: EMPTY
20806: ST_TO_ADDR
// hackLimit := 3 ;
20807: LD_ADDR_EXP 86
20811: PUSH
20812: LD_INT 3
20814: ST_TO_ADDR
// hackDist := 12 ;
20815: LD_ADDR_EXP 87
20819: PUSH
20820: LD_INT 12
20822: ST_TO_ADDR
// hackCounter := [ ] ;
20823: LD_ADDR_EXP 88
20827: PUSH
20828: EMPTY
20829: ST_TO_ADDR
// end ;
20830: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20831: LD_EXP 83
20835: PUSH
20836: LD_INT 34
20838: PUSH
20839: LD_EXP 95
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PPUSH
20848: CALL_OW 69
20852: AND
20853: IFFALSE 21108
20855: GO 20857
20857: DISABLE
20858: LD_INT 0
20860: PPUSH
20861: PPUSH
// begin enable ;
20862: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20863: LD_ADDR_VAR 0 1
20867: PUSH
20868: LD_INT 34
20870: PUSH
20871: LD_EXP 95
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PPUSH
20880: CALL_OW 69
20884: PUSH
20885: FOR_IN
20886: IFFALSE 21106
// begin if not i in hackTanks then
20888: LD_VAR 0 1
20892: PUSH
20893: LD_EXP 84
20897: IN
20898: NOT
20899: IFFALSE 20982
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20901: LD_ADDR_EXP 84
20905: PUSH
20906: LD_EXP 84
20910: PPUSH
20911: LD_EXP 84
20915: PUSH
20916: LD_INT 1
20918: PLUS
20919: PPUSH
20920: LD_VAR 0 1
20924: PPUSH
20925: CALL_OW 1
20929: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20930: LD_ADDR_EXP 85
20934: PUSH
20935: LD_EXP 85
20939: PPUSH
20940: LD_EXP 85
20944: PUSH
20945: LD_INT 1
20947: PLUS
20948: PPUSH
20949: EMPTY
20950: PPUSH
20951: CALL_OW 1
20955: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20956: LD_ADDR_EXP 88
20960: PUSH
20961: LD_EXP 88
20965: PPUSH
20966: LD_EXP 88
20970: PUSH
20971: LD_INT 1
20973: PLUS
20974: PPUSH
20975: EMPTY
20976: PPUSH
20977: CALL_OW 1
20981: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20982: LD_VAR 0 1
20986: PPUSH
20987: CALL_OW 302
20991: NOT
20992: IFFALSE 21005
// begin HackUnlinkAll ( i ) ;
20994: LD_VAR 0 1
20998: PPUSH
20999: CALL 21111 0 1
// continue ;
21003: GO 20885
// end ; HackCheckCapturedStatus ( i ) ;
21005: LD_VAR 0 1
21009: PPUSH
21010: CALL 21554 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21014: LD_ADDR_VAR 0 2
21018: PUSH
21019: LD_INT 81
21021: PUSH
21022: LD_VAR 0 1
21026: PPUSH
21027: CALL_OW 255
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 33
21038: PUSH
21039: LD_INT 3
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 91
21048: PUSH
21049: LD_VAR 0 1
21053: PUSH
21054: LD_EXP 87
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 50
21066: PUSH
21067: EMPTY
21068: LIST
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: PPUSH
21076: CALL_OW 69
21080: ST_TO_ADDR
// if not tmp then
21081: LD_VAR 0 2
21085: NOT
21086: IFFALSE 21090
// continue ;
21088: GO 20885
// HackLink ( i , tmp ) ;
21090: LD_VAR 0 1
21094: PPUSH
21095: LD_VAR 0 2
21099: PPUSH
21100: CALL 21247 0 2
// end ;
21104: GO 20885
21106: POP
21107: POP
// end ;
21108: PPOPN 2
21110: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21111: LD_INT 0
21113: PPUSH
21114: PPUSH
21115: PPUSH
// if not hack in hackTanks then
21116: LD_VAR 0 1
21120: PUSH
21121: LD_EXP 84
21125: IN
21126: NOT
21127: IFFALSE 21131
// exit ;
21129: GO 21242
// index := GetElementIndex ( hackTanks , hack ) ;
21131: LD_ADDR_VAR 0 4
21135: PUSH
21136: LD_EXP 84
21140: PPUSH
21141: LD_VAR 0 1
21145: PPUSH
21146: CALL 29202 0 2
21150: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21151: LD_EXP 85
21155: PUSH
21156: LD_VAR 0 4
21160: ARRAY
21161: IFFALSE 21242
// begin for i in hackTanksCaptured [ index ] do
21163: LD_ADDR_VAR 0 3
21167: PUSH
21168: LD_EXP 85
21172: PUSH
21173: LD_VAR 0 4
21177: ARRAY
21178: PUSH
21179: FOR_IN
21180: IFFALSE 21206
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21182: LD_VAR 0 3
21186: PUSH
21187: LD_INT 1
21189: ARRAY
21190: PPUSH
21191: LD_VAR 0 3
21195: PUSH
21196: LD_INT 2
21198: ARRAY
21199: PPUSH
21200: CALL_OW 235
21204: GO 21179
21206: POP
21207: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21208: LD_ADDR_EXP 85
21212: PUSH
21213: LD_EXP 85
21217: PPUSH
21218: LD_VAR 0 4
21222: PPUSH
21223: EMPTY
21224: PPUSH
21225: CALL_OW 1
21229: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21230: LD_VAR 0 1
21234: PPUSH
21235: LD_INT 0
21237: PPUSH
21238: CALL_OW 505
// end ; end ;
21242: LD_VAR 0 2
21246: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21247: LD_INT 0
21249: PPUSH
21250: PPUSH
21251: PPUSH
// if not hack in hackTanks or not vehicles then
21252: LD_VAR 0 1
21256: PUSH
21257: LD_EXP 84
21261: IN
21262: NOT
21263: PUSH
21264: LD_VAR 0 2
21268: NOT
21269: OR
21270: IFFALSE 21274
// exit ;
21272: GO 21549
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21274: LD_ADDR_VAR 0 2
21278: PUSH
21279: LD_VAR 0 1
21283: PPUSH
21284: LD_VAR 0 2
21288: PPUSH
21289: LD_INT 1
21291: PPUSH
21292: LD_INT 1
21294: PPUSH
21295: CALL 29852 0 4
21299: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21300: LD_ADDR_VAR 0 5
21304: PUSH
21305: LD_EXP 84
21309: PPUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL 29202 0 2
21319: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21320: LD_EXP 85
21324: PUSH
21325: LD_VAR 0 5
21329: ARRAY
21330: PUSH
21331: LD_EXP 86
21335: LESS
21336: IFFALSE 21525
// begin for i := 1 to vehicles do
21338: LD_ADDR_VAR 0 4
21342: PUSH
21343: DOUBLE
21344: LD_INT 1
21346: DEC
21347: ST_TO_ADDR
21348: LD_VAR 0 2
21352: PUSH
21353: FOR_TO
21354: IFFALSE 21523
// begin if hackTanksCaptured [ index ] = hackLimit then
21356: LD_EXP 85
21360: PUSH
21361: LD_VAR 0 5
21365: ARRAY
21366: PUSH
21367: LD_EXP 86
21371: EQUAL
21372: IFFALSE 21376
// break ;
21374: GO 21523
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21376: LD_ADDR_EXP 88
21380: PUSH
21381: LD_EXP 88
21385: PPUSH
21386: LD_VAR 0 5
21390: PPUSH
21391: LD_EXP 88
21395: PUSH
21396: LD_VAR 0 5
21400: ARRAY
21401: PUSH
21402: LD_INT 1
21404: PLUS
21405: PPUSH
21406: CALL_OW 1
21410: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21411: LD_ADDR_EXP 85
21415: PUSH
21416: LD_EXP 85
21420: PPUSH
21421: LD_VAR 0 5
21425: PUSH
21426: LD_EXP 85
21430: PUSH
21431: LD_VAR 0 5
21435: ARRAY
21436: PUSH
21437: LD_INT 1
21439: PLUS
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PPUSH
21445: LD_VAR 0 2
21449: PUSH
21450: LD_VAR 0 4
21454: ARRAY
21455: PUSH
21456: LD_VAR 0 2
21460: PUSH
21461: LD_VAR 0 4
21465: ARRAY
21466: PPUSH
21467: CALL_OW 255
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PPUSH
21476: CALL 29417 0 3
21480: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21481: LD_VAR 0 2
21485: PUSH
21486: LD_VAR 0 4
21490: ARRAY
21491: PPUSH
21492: LD_VAR 0 1
21496: PPUSH
21497: CALL_OW 255
21501: PPUSH
21502: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21506: LD_VAR 0 2
21510: PUSH
21511: LD_VAR 0 4
21515: ARRAY
21516: PPUSH
21517: CALL_OW 141
// end ;
21521: GO 21353
21523: POP
21524: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21525: LD_VAR 0 1
21529: PPUSH
21530: LD_EXP 85
21534: PUSH
21535: LD_VAR 0 5
21539: ARRAY
21540: PUSH
21541: LD_INT 0
21543: PLUS
21544: PPUSH
21545: CALL_OW 505
// end ;
21549: LD_VAR 0 3
21553: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21554: LD_INT 0
21556: PPUSH
21557: PPUSH
21558: PPUSH
21559: PPUSH
// if not hack in hackTanks then
21560: LD_VAR 0 1
21564: PUSH
21565: LD_EXP 84
21569: IN
21570: NOT
21571: IFFALSE 21575
// exit ;
21573: GO 21815
// index := GetElementIndex ( hackTanks , hack ) ;
21575: LD_ADDR_VAR 0 4
21579: PUSH
21580: LD_EXP 84
21584: PPUSH
21585: LD_VAR 0 1
21589: PPUSH
21590: CALL 29202 0 2
21594: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21595: LD_ADDR_VAR 0 3
21599: PUSH
21600: DOUBLE
21601: LD_EXP 85
21605: PUSH
21606: LD_VAR 0 4
21610: ARRAY
21611: INC
21612: ST_TO_ADDR
21613: LD_INT 1
21615: PUSH
21616: FOR_DOWNTO
21617: IFFALSE 21789
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21619: LD_ADDR_VAR 0 5
21623: PUSH
21624: LD_EXP 85
21628: PUSH
21629: LD_VAR 0 4
21633: ARRAY
21634: PUSH
21635: LD_VAR 0 3
21639: ARRAY
21640: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21641: LD_VAR 0 5
21645: PUSH
21646: LD_INT 1
21648: ARRAY
21649: PPUSH
21650: CALL_OW 302
21654: NOT
21655: PUSH
21656: LD_VAR 0 5
21660: PUSH
21661: LD_INT 1
21663: ARRAY
21664: PPUSH
21665: CALL_OW 255
21669: PUSH
21670: LD_VAR 0 1
21674: PPUSH
21675: CALL_OW 255
21679: NONEQUAL
21680: OR
21681: IFFALSE 21787
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21683: LD_VAR 0 5
21687: PUSH
21688: LD_INT 1
21690: ARRAY
21691: PPUSH
21692: CALL_OW 305
21696: PUSH
21697: LD_VAR 0 5
21701: PUSH
21702: LD_INT 1
21704: ARRAY
21705: PPUSH
21706: CALL_OW 255
21710: PUSH
21711: LD_VAR 0 1
21715: PPUSH
21716: CALL_OW 255
21720: EQUAL
21721: AND
21722: IFFALSE 21746
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21724: LD_VAR 0 5
21728: PUSH
21729: LD_INT 1
21731: ARRAY
21732: PPUSH
21733: LD_VAR 0 5
21737: PUSH
21738: LD_INT 2
21740: ARRAY
21741: PPUSH
21742: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21746: LD_ADDR_EXP 85
21750: PUSH
21751: LD_EXP 85
21755: PPUSH
21756: LD_VAR 0 4
21760: PPUSH
21761: LD_EXP 85
21765: PUSH
21766: LD_VAR 0 4
21770: ARRAY
21771: PPUSH
21772: LD_VAR 0 3
21776: PPUSH
21777: CALL_OW 3
21781: PPUSH
21782: CALL_OW 1
21786: ST_TO_ADDR
// end ; end ;
21787: GO 21616
21789: POP
21790: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21791: LD_VAR 0 1
21795: PPUSH
21796: LD_EXP 85
21800: PUSH
21801: LD_VAR 0 4
21805: ARRAY
21806: PUSH
21807: LD_INT 0
21809: PLUS
21810: PPUSH
21811: CALL_OW 505
// end ;
21815: LD_VAR 0 2
21819: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21820: LD_INT 0
21822: PPUSH
21823: PPUSH
21824: PPUSH
21825: PPUSH
// if not hack in hackTanks then
21826: LD_VAR 0 1
21830: PUSH
21831: LD_EXP 84
21835: IN
21836: NOT
21837: IFFALSE 21841
// exit ;
21839: GO 21926
// index := GetElementIndex ( hackTanks , hack ) ;
21841: LD_ADDR_VAR 0 5
21845: PUSH
21846: LD_EXP 84
21850: PPUSH
21851: LD_VAR 0 1
21855: PPUSH
21856: CALL 29202 0 2
21860: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21861: LD_ADDR_VAR 0 4
21865: PUSH
21866: DOUBLE
21867: LD_INT 1
21869: DEC
21870: ST_TO_ADDR
21871: LD_EXP 85
21875: PUSH
21876: LD_VAR 0 5
21880: ARRAY
21881: PUSH
21882: FOR_TO
21883: IFFALSE 21924
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21885: LD_EXP 85
21889: PUSH
21890: LD_VAR 0 5
21894: ARRAY
21895: PUSH
21896: LD_VAR 0 4
21900: ARRAY
21901: PUSH
21902: LD_INT 1
21904: ARRAY
21905: PUSH
21906: LD_VAR 0 2
21910: EQUAL
21911: IFFALSE 21922
// KillUnit ( vehicle ) ;
21913: LD_VAR 0 2
21917: PPUSH
21918: CALL_OW 66
21922: GO 21882
21924: POP
21925: POP
// end ;
21926: LD_VAR 0 3
21930: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21931: LD_EXP 89
21935: NOT
21936: IFFALSE 21971
21938: GO 21940
21940: DISABLE
// begin initMiner := true ;
21941: LD_ADDR_EXP 89
21945: PUSH
21946: LD_INT 1
21948: ST_TO_ADDR
// minersList := [ ] ;
21949: LD_ADDR_EXP 90
21953: PUSH
21954: EMPTY
21955: ST_TO_ADDR
// minerMinesList := [ ] ;
21956: LD_ADDR_EXP 91
21960: PUSH
21961: EMPTY
21962: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21963: LD_ADDR_EXP 92
21967: PUSH
21968: LD_INT 5
21970: ST_TO_ADDR
// end ;
21971: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21972: LD_EXP 89
21976: PUSH
21977: LD_INT 34
21979: PUSH
21980: LD_EXP 100
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PPUSH
21989: CALL_OW 69
21993: AND
21994: IFFALSE 22457
21996: GO 21998
21998: DISABLE
21999: LD_INT 0
22001: PPUSH
22002: PPUSH
22003: PPUSH
22004: PPUSH
// begin enable ;
22005: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22006: LD_ADDR_VAR 0 1
22010: PUSH
22011: LD_INT 34
22013: PUSH
22014: LD_EXP 100
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PPUSH
22023: CALL_OW 69
22027: PUSH
22028: FOR_IN
22029: IFFALSE 22101
// begin if not i in minersList then
22031: LD_VAR 0 1
22035: PUSH
22036: LD_EXP 90
22040: IN
22041: NOT
22042: IFFALSE 22099
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22044: LD_ADDR_EXP 90
22048: PUSH
22049: LD_EXP 90
22053: PPUSH
22054: LD_EXP 90
22058: PUSH
22059: LD_INT 1
22061: PLUS
22062: PPUSH
22063: LD_VAR 0 1
22067: PPUSH
22068: CALL_OW 1
22072: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22073: LD_ADDR_EXP 91
22077: PUSH
22078: LD_EXP 91
22082: PPUSH
22083: LD_EXP 91
22087: PUSH
22088: LD_INT 1
22090: PLUS
22091: PPUSH
22092: EMPTY
22093: PPUSH
22094: CALL_OW 1
22098: ST_TO_ADDR
// end end ;
22099: GO 22028
22101: POP
22102: POP
// for i := minerMinesList downto 1 do
22103: LD_ADDR_VAR 0 1
22107: PUSH
22108: DOUBLE
22109: LD_EXP 91
22113: INC
22114: ST_TO_ADDR
22115: LD_INT 1
22117: PUSH
22118: FOR_DOWNTO
22119: IFFALSE 22455
// begin if IsLive ( minersList [ i ] ) then
22121: LD_EXP 90
22125: PUSH
22126: LD_VAR 0 1
22130: ARRAY
22131: PPUSH
22132: CALL_OW 300
22136: IFFALSE 22164
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22138: LD_EXP 90
22142: PUSH
22143: LD_VAR 0 1
22147: ARRAY
22148: PPUSH
22149: LD_EXP 91
22153: PUSH
22154: LD_VAR 0 1
22158: ARRAY
22159: PPUSH
22160: CALL_OW 505
// if not minerMinesList [ i ] then
22164: LD_EXP 91
22168: PUSH
22169: LD_VAR 0 1
22173: ARRAY
22174: NOT
22175: IFFALSE 22179
// continue ;
22177: GO 22118
// for j := minerMinesList [ i ] downto 1 do
22179: LD_ADDR_VAR 0 2
22183: PUSH
22184: DOUBLE
22185: LD_EXP 91
22189: PUSH
22190: LD_VAR 0 1
22194: ARRAY
22195: INC
22196: ST_TO_ADDR
22197: LD_INT 1
22199: PUSH
22200: FOR_DOWNTO
22201: IFFALSE 22451
// begin side := GetSide ( minersList [ i ] ) ;
22203: LD_ADDR_VAR 0 3
22207: PUSH
22208: LD_EXP 90
22212: PUSH
22213: LD_VAR 0 1
22217: ARRAY
22218: PPUSH
22219: CALL_OW 255
22223: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22224: LD_ADDR_VAR 0 4
22228: PUSH
22229: LD_EXP 91
22233: PUSH
22234: LD_VAR 0 1
22238: ARRAY
22239: PUSH
22240: LD_VAR 0 2
22244: ARRAY
22245: PUSH
22246: LD_INT 1
22248: ARRAY
22249: PPUSH
22250: LD_EXP 91
22254: PUSH
22255: LD_VAR 0 1
22259: ARRAY
22260: PUSH
22261: LD_VAR 0 2
22265: ARRAY
22266: PUSH
22267: LD_INT 2
22269: ARRAY
22270: PPUSH
22271: CALL_OW 428
22275: ST_TO_ADDR
// if not tmp then
22276: LD_VAR 0 4
22280: NOT
22281: IFFALSE 22285
// continue ;
22283: GO 22200
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22285: LD_VAR 0 4
22289: PUSH
22290: LD_INT 81
22292: PUSH
22293: LD_VAR 0 3
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PPUSH
22302: CALL_OW 69
22306: IN
22307: PUSH
22308: LD_EXP 91
22312: PUSH
22313: LD_VAR 0 1
22317: ARRAY
22318: PUSH
22319: LD_VAR 0 2
22323: ARRAY
22324: PUSH
22325: LD_INT 1
22327: ARRAY
22328: PPUSH
22329: LD_EXP 91
22333: PUSH
22334: LD_VAR 0 1
22338: ARRAY
22339: PUSH
22340: LD_VAR 0 2
22344: ARRAY
22345: PUSH
22346: LD_INT 2
22348: ARRAY
22349: PPUSH
22350: CALL_OW 458
22354: AND
22355: IFFALSE 22449
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22357: LD_EXP 91
22361: PUSH
22362: LD_VAR 0 1
22366: ARRAY
22367: PUSH
22368: LD_VAR 0 2
22372: ARRAY
22373: PUSH
22374: LD_INT 1
22376: ARRAY
22377: PPUSH
22378: LD_EXP 91
22382: PUSH
22383: LD_VAR 0 1
22387: ARRAY
22388: PUSH
22389: LD_VAR 0 2
22393: ARRAY
22394: PUSH
22395: LD_INT 2
22397: ARRAY
22398: PPUSH
22399: LD_VAR 0 3
22403: PPUSH
22404: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22408: LD_ADDR_EXP 91
22412: PUSH
22413: LD_EXP 91
22417: PPUSH
22418: LD_VAR 0 1
22422: PPUSH
22423: LD_EXP 91
22427: PUSH
22428: LD_VAR 0 1
22432: ARRAY
22433: PPUSH
22434: LD_VAR 0 2
22438: PPUSH
22439: CALL_OW 3
22443: PPUSH
22444: CALL_OW 1
22448: ST_TO_ADDR
// end ; end ;
22449: GO 22200
22451: POP
22452: POP
// end ;
22453: GO 22118
22455: POP
22456: POP
// end ;
22457: PPOPN 4
22459: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22460: LD_INT 0
22462: PPUSH
22463: PPUSH
// result := false ;
22464: LD_ADDR_VAR 0 4
22468: PUSH
22469: LD_INT 0
22471: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL_OW 264
22481: PUSH
22482: LD_EXP 100
22486: EQUAL
22487: NOT
22488: IFFALSE 22492
// exit ;
22490: GO 22732
// index := GetElementIndex ( minersList , unit ) ;
22492: LD_ADDR_VAR 0 5
22496: PUSH
22497: LD_EXP 90
22501: PPUSH
22502: LD_VAR 0 1
22506: PPUSH
22507: CALL 29202 0 2
22511: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22512: LD_EXP 91
22516: PUSH
22517: LD_VAR 0 5
22521: ARRAY
22522: PUSH
22523: LD_EXP 92
22527: GREATEREQUAL
22528: IFFALSE 22532
// exit ;
22530: GO 22732
// ComMoveXY ( unit , x , y ) ;
22532: LD_VAR 0 1
22536: PPUSH
22537: LD_VAR 0 2
22541: PPUSH
22542: LD_VAR 0 3
22546: PPUSH
22547: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22551: LD_INT 35
22553: PPUSH
22554: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22558: LD_VAR 0 1
22562: PPUSH
22563: LD_VAR 0 2
22567: PPUSH
22568: LD_VAR 0 3
22572: PPUSH
22573: CALL 59921 0 3
22577: NOT
22578: PUSH
22579: LD_VAR 0 1
22583: PPUSH
22584: CALL_OW 314
22588: AND
22589: IFFALSE 22593
// exit ;
22591: GO 22732
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22593: LD_VAR 0 2
22597: PPUSH
22598: LD_VAR 0 3
22602: PPUSH
22603: CALL_OW 428
22607: PUSH
22608: LD_VAR 0 1
22612: EQUAL
22613: PUSH
22614: LD_VAR 0 1
22618: PPUSH
22619: CALL_OW 314
22623: NOT
22624: AND
22625: IFFALSE 22551
// PlaySoundXY ( x , y , PlantMine ) ;
22627: LD_VAR 0 2
22631: PPUSH
22632: LD_VAR 0 3
22636: PPUSH
22637: LD_STRING PlantMine
22639: PPUSH
22640: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22644: LD_VAR 0 2
22648: PPUSH
22649: LD_VAR 0 3
22653: PPUSH
22654: LD_VAR 0 1
22658: PPUSH
22659: CALL_OW 255
22663: PPUSH
22664: LD_INT 0
22666: PPUSH
22667: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22671: LD_ADDR_EXP 91
22675: PUSH
22676: LD_EXP 91
22680: PPUSH
22681: LD_VAR 0 5
22685: PUSH
22686: LD_EXP 91
22690: PUSH
22691: LD_VAR 0 5
22695: ARRAY
22696: PUSH
22697: LD_INT 1
22699: PLUS
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PPUSH
22705: LD_VAR 0 2
22709: PUSH
22710: LD_VAR 0 3
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PPUSH
22719: CALL 29417 0 3
22723: ST_TO_ADDR
// result := true ;
22724: LD_ADDR_VAR 0 4
22728: PUSH
22729: LD_INT 1
22731: ST_TO_ADDR
// end ;
22732: LD_VAR 0 4
22736: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22737: LD_INT 0
22739: PPUSH
22740: PPUSH
22741: PPUSH
// if not unit in minersList then
22742: LD_VAR 0 1
22746: PUSH
22747: LD_EXP 90
22751: IN
22752: NOT
22753: IFFALSE 22757
// exit ;
22755: GO 23149
// index := GetElementIndex ( minersList , unit ) ;
22757: LD_ADDR_VAR 0 6
22761: PUSH
22762: LD_EXP 90
22766: PPUSH
22767: LD_VAR 0 1
22771: PPUSH
22772: CALL 29202 0 2
22776: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22777: LD_ADDR_VAR 0 5
22781: PUSH
22782: DOUBLE
22783: LD_EXP 91
22787: PUSH
22788: LD_VAR 0 6
22792: ARRAY
22793: INC
22794: ST_TO_ADDR
22795: LD_INT 1
22797: PUSH
22798: FOR_DOWNTO
22799: IFFALSE 22960
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22801: LD_EXP 91
22805: PUSH
22806: LD_VAR 0 6
22810: ARRAY
22811: PUSH
22812: LD_VAR 0 5
22816: ARRAY
22817: PUSH
22818: LD_INT 1
22820: ARRAY
22821: PUSH
22822: LD_VAR 0 2
22826: EQUAL
22827: PUSH
22828: LD_EXP 91
22832: PUSH
22833: LD_VAR 0 6
22837: ARRAY
22838: PUSH
22839: LD_VAR 0 5
22843: ARRAY
22844: PUSH
22845: LD_INT 2
22847: ARRAY
22848: PUSH
22849: LD_VAR 0 3
22853: EQUAL
22854: AND
22855: IFFALSE 22958
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22857: LD_EXP 91
22861: PUSH
22862: LD_VAR 0 6
22866: ARRAY
22867: PUSH
22868: LD_VAR 0 5
22872: ARRAY
22873: PUSH
22874: LD_INT 1
22876: ARRAY
22877: PPUSH
22878: LD_EXP 91
22882: PUSH
22883: LD_VAR 0 6
22887: ARRAY
22888: PUSH
22889: LD_VAR 0 5
22893: ARRAY
22894: PUSH
22895: LD_INT 2
22897: ARRAY
22898: PPUSH
22899: LD_VAR 0 1
22903: PPUSH
22904: CALL_OW 255
22908: PPUSH
22909: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22913: LD_ADDR_EXP 91
22917: PUSH
22918: LD_EXP 91
22922: PPUSH
22923: LD_VAR 0 6
22927: PPUSH
22928: LD_EXP 91
22932: PUSH
22933: LD_VAR 0 6
22937: ARRAY
22938: PPUSH
22939: LD_VAR 0 5
22943: PPUSH
22944: CALL_OW 3
22948: PPUSH
22949: CALL_OW 1
22953: ST_TO_ADDR
// exit ;
22954: POP
22955: POP
22956: GO 23149
// end ; end ;
22958: GO 22798
22960: POP
22961: POP
// for i := minerMinesList [ index ] downto 1 do
22962: LD_ADDR_VAR 0 5
22966: PUSH
22967: DOUBLE
22968: LD_EXP 91
22972: PUSH
22973: LD_VAR 0 6
22977: ARRAY
22978: INC
22979: ST_TO_ADDR
22980: LD_INT 1
22982: PUSH
22983: FOR_DOWNTO
22984: IFFALSE 23147
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22986: LD_EXP 91
22990: PUSH
22991: LD_VAR 0 6
22995: ARRAY
22996: PUSH
22997: LD_VAR 0 5
23001: ARRAY
23002: PUSH
23003: LD_INT 1
23005: ARRAY
23006: PPUSH
23007: LD_EXP 91
23011: PUSH
23012: LD_VAR 0 6
23016: ARRAY
23017: PUSH
23018: LD_VAR 0 5
23022: ARRAY
23023: PUSH
23024: LD_INT 2
23026: ARRAY
23027: PPUSH
23028: LD_VAR 0 2
23032: PPUSH
23033: LD_VAR 0 3
23037: PPUSH
23038: CALL_OW 298
23042: PUSH
23043: LD_INT 6
23045: LESS
23046: IFFALSE 23145
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23048: LD_EXP 91
23052: PUSH
23053: LD_VAR 0 6
23057: ARRAY
23058: PUSH
23059: LD_VAR 0 5
23063: ARRAY
23064: PUSH
23065: LD_INT 1
23067: ARRAY
23068: PPUSH
23069: LD_EXP 91
23073: PUSH
23074: LD_VAR 0 6
23078: ARRAY
23079: PUSH
23080: LD_VAR 0 5
23084: ARRAY
23085: PUSH
23086: LD_INT 2
23088: ARRAY
23089: PPUSH
23090: LD_VAR 0 1
23094: PPUSH
23095: CALL_OW 255
23099: PPUSH
23100: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23104: LD_ADDR_EXP 91
23108: PUSH
23109: LD_EXP 91
23113: PPUSH
23114: LD_VAR 0 6
23118: PPUSH
23119: LD_EXP 91
23123: PUSH
23124: LD_VAR 0 6
23128: ARRAY
23129: PPUSH
23130: LD_VAR 0 5
23134: PPUSH
23135: CALL_OW 3
23139: PPUSH
23140: CALL_OW 1
23144: ST_TO_ADDR
// end ; end ;
23145: GO 22983
23147: POP
23148: POP
// end ;
23149: LD_VAR 0 4
23153: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23154: LD_INT 0
23156: PPUSH
23157: PPUSH
23158: PPUSH
23159: PPUSH
23160: PPUSH
23161: PPUSH
23162: PPUSH
23163: PPUSH
23164: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 264
23174: PUSH
23175: LD_EXP 100
23179: EQUAL
23180: NOT
23181: PUSH
23182: LD_VAR 0 1
23186: PUSH
23187: LD_EXP 90
23191: IN
23192: NOT
23193: OR
23194: IFFALSE 23198
// exit ;
23196: GO 23520
// index := GetElementIndex ( minersList , unit ) ;
23198: LD_ADDR_VAR 0 6
23202: PUSH
23203: LD_EXP 90
23207: PPUSH
23208: LD_VAR 0 1
23212: PPUSH
23213: CALL 29202 0 2
23217: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23218: LD_ADDR_VAR 0 8
23222: PUSH
23223: LD_EXP 92
23227: PUSH
23228: LD_EXP 91
23232: PUSH
23233: LD_VAR 0 6
23237: ARRAY
23238: MINUS
23239: ST_TO_ADDR
// if not minesFreeAmount then
23240: LD_VAR 0 8
23244: NOT
23245: IFFALSE 23249
// exit ;
23247: GO 23520
// tmp := [ ] ;
23249: LD_ADDR_VAR 0 7
23253: PUSH
23254: EMPTY
23255: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23256: LD_ADDR_VAR 0 5
23260: PUSH
23261: DOUBLE
23262: LD_INT 1
23264: DEC
23265: ST_TO_ADDR
23266: LD_VAR 0 8
23270: PUSH
23271: FOR_TO
23272: IFFALSE 23467
// begin _d := rand ( 0 , 5 ) ;
23274: LD_ADDR_VAR 0 11
23278: PUSH
23279: LD_INT 0
23281: PPUSH
23282: LD_INT 5
23284: PPUSH
23285: CALL_OW 12
23289: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23290: LD_ADDR_VAR 0 12
23294: PUSH
23295: LD_INT 2
23297: PPUSH
23298: LD_INT 6
23300: PPUSH
23301: CALL_OW 12
23305: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23306: LD_ADDR_VAR 0 9
23310: PUSH
23311: LD_VAR 0 2
23315: PPUSH
23316: LD_VAR 0 11
23320: PPUSH
23321: LD_VAR 0 12
23325: PPUSH
23326: CALL_OW 272
23330: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23331: LD_ADDR_VAR 0 10
23335: PUSH
23336: LD_VAR 0 3
23340: PPUSH
23341: LD_VAR 0 11
23345: PPUSH
23346: LD_VAR 0 12
23350: PPUSH
23351: CALL_OW 273
23355: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23356: LD_VAR 0 9
23360: PPUSH
23361: LD_VAR 0 10
23365: PPUSH
23366: CALL_OW 488
23370: PUSH
23371: LD_VAR 0 9
23375: PUSH
23376: LD_VAR 0 10
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_VAR 0 7
23389: IN
23390: NOT
23391: AND
23392: PUSH
23393: LD_VAR 0 9
23397: PPUSH
23398: LD_VAR 0 10
23402: PPUSH
23403: CALL_OW 458
23407: NOT
23408: AND
23409: IFFALSE 23451
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23411: LD_ADDR_VAR 0 7
23415: PUSH
23416: LD_VAR 0 7
23420: PPUSH
23421: LD_VAR 0 7
23425: PUSH
23426: LD_INT 1
23428: PLUS
23429: PPUSH
23430: LD_VAR 0 9
23434: PUSH
23435: LD_VAR 0 10
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PPUSH
23444: CALL_OW 1
23448: ST_TO_ADDR
23449: GO 23465
// i := i - 1 ;
23451: LD_ADDR_VAR 0 5
23455: PUSH
23456: LD_VAR 0 5
23460: PUSH
23461: LD_INT 1
23463: MINUS
23464: ST_TO_ADDR
// end ;
23465: GO 23271
23467: POP
23468: POP
// for i in tmp do
23469: LD_ADDR_VAR 0 5
23473: PUSH
23474: LD_VAR 0 7
23478: PUSH
23479: FOR_IN
23480: IFFALSE 23518
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23482: LD_VAR 0 1
23486: PPUSH
23487: LD_VAR 0 5
23491: PUSH
23492: LD_INT 1
23494: ARRAY
23495: PPUSH
23496: LD_VAR 0 5
23500: PUSH
23501: LD_INT 2
23503: ARRAY
23504: PPUSH
23505: CALL 22460 0 3
23509: NOT
23510: IFFALSE 23516
// exit ;
23512: POP
23513: POP
23514: GO 23520
23516: GO 23479
23518: POP
23519: POP
// end ;
23520: LD_VAR 0 4
23524: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23525: LD_INT 0
23527: PPUSH
23528: PPUSH
23529: PPUSH
23530: PPUSH
23531: PPUSH
23532: PPUSH
23533: PPUSH
// if not GetClass ( unit ) = class_sniper then
23534: LD_VAR 0 1
23538: PPUSH
23539: CALL_OW 257
23543: PUSH
23544: LD_INT 5
23546: EQUAL
23547: NOT
23548: IFFALSE 23552
// exit ;
23550: GO 23940
// dist := 8 ;
23552: LD_ADDR_VAR 0 5
23556: PUSH
23557: LD_INT 8
23559: ST_TO_ADDR
// viewRange := 12 ;
23560: LD_ADDR_VAR 0 7
23564: PUSH
23565: LD_INT 12
23567: ST_TO_ADDR
// side := GetSide ( unit ) ;
23568: LD_ADDR_VAR 0 6
23572: PUSH
23573: LD_VAR 0 1
23577: PPUSH
23578: CALL_OW 255
23582: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23583: LD_INT 61
23585: PPUSH
23586: LD_VAR 0 6
23590: PPUSH
23591: CALL_OW 321
23595: PUSH
23596: LD_INT 2
23598: EQUAL
23599: IFFALSE 23609
// viewRange := 16 ;
23601: LD_ADDR_VAR 0 7
23605: PUSH
23606: LD_INT 16
23608: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23609: LD_VAR 0 1
23613: PPUSH
23614: LD_VAR 0 2
23618: PPUSH
23619: LD_VAR 0 3
23623: PPUSH
23624: CALL_OW 297
23628: PUSH
23629: LD_VAR 0 5
23633: GREATER
23634: IFFALSE 23713
// begin ComMoveXY ( unit , x , y ) ;
23636: LD_VAR 0 1
23640: PPUSH
23641: LD_VAR 0 2
23645: PPUSH
23646: LD_VAR 0 3
23650: PPUSH
23651: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23655: LD_INT 35
23657: PPUSH
23658: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23662: LD_VAR 0 1
23666: PPUSH
23667: LD_VAR 0 2
23671: PPUSH
23672: LD_VAR 0 3
23676: PPUSH
23677: CALL 59921 0 3
23681: NOT
23682: IFFALSE 23686
// exit ;
23684: GO 23940
// until GetDistUnitXY ( unit , x , y ) < dist ;
23686: LD_VAR 0 1
23690: PPUSH
23691: LD_VAR 0 2
23695: PPUSH
23696: LD_VAR 0 3
23700: PPUSH
23701: CALL_OW 297
23705: PUSH
23706: LD_VAR 0 5
23710: LESS
23711: IFFALSE 23655
// end ; ComTurnXY ( unit , x , y ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_VAR 0 2
23722: PPUSH
23723: LD_VAR 0 3
23727: PPUSH
23728: CALL_OW 118
// wait ( 5 ) ;
23732: LD_INT 5
23734: PPUSH
23735: CALL_OW 67
// _d := GetDir ( unit ) ;
23739: LD_ADDR_VAR 0 10
23743: PUSH
23744: LD_VAR 0 1
23748: PPUSH
23749: CALL_OW 254
23753: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23754: LD_ADDR_VAR 0 8
23758: PUSH
23759: LD_VAR 0 1
23763: PPUSH
23764: CALL_OW 250
23768: PPUSH
23769: LD_VAR 0 10
23773: PPUSH
23774: LD_VAR 0 5
23778: PPUSH
23779: CALL_OW 272
23783: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23784: LD_ADDR_VAR 0 9
23788: PUSH
23789: LD_VAR 0 1
23793: PPUSH
23794: CALL_OW 251
23798: PPUSH
23799: LD_VAR 0 10
23803: PPUSH
23804: LD_VAR 0 5
23808: PPUSH
23809: CALL_OW 273
23813: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23814: LD_VAR 0 8
23818: PPUSH
23819: LD_VAR 0 9
23823: PPUSH
23824: CALL_OW 488
23828: NOT
23829: IFFALSE 23833
// exit ;
23831: GO 23940
// ComAnimCustom ( unit , 1 ) ;
23833: LD_VAR 0 1
23837: PPUSH
23838: LD_INT 1
23840: PPUSH
23841: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23845: LD_VAR 0 8
23849: PPUSH
23850: LD_VAR 0 9
23854: PPUSH
23855: LD_VAR 0 6
23859: PPUSH
23860: LD_VAR 0 7
23864: PPUSH
23865: CALL_OW 330
// repeat wait ( 1 ) ;
23869: LD_INT 1
23871: PPUSH
23872: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23876: LD_VAR 0 1
23880: PPUSH
23881: CALL_OW 316
23885: PUSH
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 314
23895: OR
23896: PUSH
23897: LD_VAR 0 1
23901: PPUSH
23902: CALL_OW 302
23906: NOT
23907: OR
23908: PUSH
23909: LD_VAR 0 1
23913: PPUSH
23914: CALL_OW 301
23918: OR
23919: IFFALSE 23869
// RemoveSeeing ( _x , _y , side ) ;
23921: LD_VAR 0 8
23925: PPUSH
23926: LD_VAR 0 9
23930: PPUSH
23931: LD_VAR 0 6
23935: PPUSH
23936: CALL_OW 331
// end ; end_of_file
23940: LD_VAR 0 4
23944: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
23945: LD_VAR 0 1
23949: PUSH
23950: LD_INT 200
23952: DOUBLE
23953: GREATEREQUAL
23954: IFFALSE 23962
23956: LD_INT 299
23958: DOUBLE
23959: LESSEQUAL
23960: IFTRUE 23964
23962: GO 23996
23964: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
23965: LD_VAR 0 1
23969: PPUSH
23970: LD_VAR 0 2
23974: PPUSH
23975: LD_VAR 0 3
23979: PPUSH
23980: LD_VAR 0 4
23984: PPUSH
23985: LD_VAR 0 5
23989: PPUSH
23990: CALL 19683 0 5
23994: GO 24073
23996: LD_INT 300
23998: DOUBLE
23999: GREATEREQUAL
24000: IFFALSE 24008
24002: LD_INT 399
24004: DOUBLE
24005: LESSEQUAL
24006: IFTRUE 24010
24008: GO 24072
24010: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
24011: LD_VAR 0 1
24015: PPUSH
24016: LD_VAR 0 2
24020: PPUSH
24021: LD_VAR 0 3
24025: PPUSH
24026: LD_VAR 0 4
24030: PPUSH
24031: LD_VAR 0 5
24035: PPUSH
24036: LD_VAR 0 6
24040: PPUSH
24041: LD_VAR 0 7
24045: PPUSH
24046: LD_VAR 0 8
24050: PPUSH
24051: LD_VAR 0 9
24055: PPUSH
24056: LD_VAR 0 10
24060: PPUSH
24061: LD_VAR 0 11
24065: PPUSH
24066: CALL 17325 0 11
24070: GO 24073
24072: POP
// end ;
24073: PPOPN 11
24075: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
24076: LD_VAR 0 1
24080: PPUSH
24081: LD_VAR 0 2
24085: PPUSH
24086: LD_VAR 0 3
24090: PPUSH
24091: LD_VAR 0 4
24095: PPUSH
24096: LD_VAR 0 5
24100: PPUSH
24101: CALL 19419 0 5
// end ; end_of_file
24105: PPOPN 5
24107: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
24108: LD_VAR 0 1
24112: PPUSH
24113: LD_VAR 0 2
24117: PPUSH
24118: LD_VAR 0 3
24122: PPUSH
24123: LD_VAR 0 4
24127: PPUSH
24128: LD_VAR 0 5
24132: PPUSH
24133: LD_VAR 0 6
24137: PPUSH
24138: CALL 5018 0 6
// end ;
24142: PPOPN 6
24144: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
24145: LD_INT 0
24147: PPUSH
// begin if not units then
24148: LD_VAR 0 1
24152: NOT
24153: IFFALSE 24157
// exit ;
24155: GO 24245
// if p1 = 1 then
24157: LD_VAR 0 2
24161: PUSH
24162: LD_INT 1
24164: EQUAL
24165: IFFALSE 24245
// begin if p2 = 1 then
24167: LD_VAR 0 3
24171: PUSH
24172: LD_INT 1
24174: EQUAL
24175: IFFALSE 24206
// begin for i in units do
24177: LD_ADDR_VAR 0 7
24181: PUSH
24182: LD_VAR 0 1
24186: PUSH
24187: FOR_IN
24188: IFFALSE 24204
// begin SetUnitAttackType ( i , 3 ) ;
24190: LD_VAR 0 7
24194: PPUSH
24195: LD_INT 3
24197: PPUSH
24198: CALL_OW 603
// end ;
24202: GO 24187
24204: POP
24205: POP
// end ; if p2 = 2 then
24206: LD_VAR 0 3
24210: PUSH
24211: LD_INT 2
24213: EQUAL
24214: IFFALSE 24245
// begin for i in units do
24216: LD_ADDR_VAR 0 7
24220: PUSH
24221: LD_VAR 0 1
24225: PUSH
24226: FOR_IN
24227: IFFALSE 24243
// begin SetUnitAttackType ( i , 1 ) ;
24229: LD_VAR 0 7
24233: PPUSH
24234: LD_INT 1
24236: PPUSH
24237: CALL_OW 603
// end ;
24241: GO 24226
24243: POP
24244: POP
// end ; end ; end ;
24245: PPOPN 7
24247: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
24248: CALL 4993 0 0
// end ; end_of_file end_of_file
24252: PPOPN 1
24254: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24255: LD_INT 0
24257: PPUSH
// ar_miner := 81 ;
24258: LD_ADDR_EXP 100
24262: PUSH
24263: LD_INT 81
24265: ST_TO_ADDR
// ar_crane := 88 ;
24266: LD_ADDR_EXP 99
24270: PUSH
24271: LD_INT 88
24273: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24274: LD_ADDR_EXP 94
24278: PUSH
24279: LD_INT 89
24281: ST_TO_ADDR
// us_hack := 99 ;
24282: LD_ADDR_EXP 95
24286: PUSH
24287: LD_INT 99
24289: ST_TO_ADDR
// us_artillery := 97 ;
24290: LD_ADDR_EXP 96
24294: PUSH
24295: LD_INT 97
24297: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24298: LD_ADDR_EXP 97
24302: PUSH
24303: LD_INT 91
24305: ST_TO_ADDR
// ar_mortar := 92 ;
24306: LD_ADDR_EXP 98
24310: PUSH
24311: LD_INT 92
24313: ST_TO_ADDR
// ru_flamethrower := 93 ;
24314: LD_ADDR_EXP 101
24318: PUSH
24319: LD_INT 93
24321: ST_TO_ADDR
// ru_radar := 98 ;
24322: LD_ADDR_EXP 93
24326: PUSH
24327: LD_INT 98
24329: ST_TO_ADDR
// tech_Artillery := 80 ;
24330: LD_ADDR_EXP 102
24334: PUSH
24335: LD_INT 80
24337: ST_TO_ADDR
// tech_RadMat := 81 ;
24338: LD_ADDR_EXP 103
24342: PUSH
24343: LD_INT 81
24345: ST_TO_ADDR
// tech_BasicTools := 82 ;
24346: LD_ADDR_EXP 104
24350: PUSH
24351: LD_INT 82
24353: ST_TO_ADDR
// tech_Cargo := 83 ;
24354: LD_ADDR_EXP 105
24358: PUSH
24359: LD_INT 83
24361: ST_TO_ADDR
// tech_Track := 84 ;
24362: LD_ADDR_EXP 106
24366: PUSH
24367: LD_INT 84
24369: ST_TO_ADDR
// tech_Crane := 85 ;
24370: LD_ADDR_EXP 107
24374: PUSH
24375: LD_INT 85
24377: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24378: LD_ADDR_EXP 108
24382: PUSH
24383: LD_INT 86
24385: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24386: LD_ADDR_EXP 109
24390: PUSH
24391: LD_INT 87
24393: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24394: LD_ADDR_EXP 110
24398: PUSH
24399: LD_INT 88
24401: ST_TO_ADDR
// class_mastodont := 31 ;
24402: LD_ADDR_EXP 111
24406: PUSH
24407: LD_INT 31
24409: ST_TO_ADDR
// class_horse := 21 ;
24410: LD_ADDR_EXP 112
24414: PUSH
24415: LD_INT 21
24417: ST_TO_ADDR
// end ;
24418: LD_VAR 0 1
24422: RET
// every 1 do
24423: GO 24425
24425: DISABLE
// InitGlobalVariables ; end_of_file
24426: CALL 24255 0 0
24430: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24431: LD_INT 0
24433: PPUSH
24434: PPUSH
// if exist_mode then
24435: LD_VAR 0 2
24439: IFFALSE 24464
// unit := CreateCharacter ( prefix & ident ) else
24441: LD_ADDR_VAR 0 5
24445: PUSH
24446: LD_VAR 0 3
24450: PUSH
24451: LD_VAR 0 1
24455: STR
24456: PPUSH
24457: CALL_OW 34
24461: ST_TO_ADDR
24462: GO 24479
// unit := NewCharacter ( ident ) ;
24464: LD_ADDR_VAR 0 5
24468: PUSH
24469: LD_VAR 0 1
24473: PPUSH
24474: CALL_OW 25
24478: ST_TO_ADDR
// result := unit ;
24479: LD_ADDR_VAR 0 4
24483: PUSH
24484: LD_VAR 0 5
24488: ST_TO_ADDR
// end ;
24489: LD_VAR 0 4
24493: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24494: LD_INT 0
24496: PPUSH
24497: PPUSH
// if not side or not nation then
24498: LD_VAR 0 1
24502: NOT
24503: PUSH
24504: LD_VAR 0 2
24508: NOT
24509: OR
24510: IFFALSE 24514
// exit ;
24512: GO 25282
// case nation of nation_american :
24514: LD_VAR 0 2
24518: PUSH
24519: LD_INT 1
24521: DOUBLE
24522: EQUAL
24523: IFTRUE 24527
24525: GO 24741
24527: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24528: LD_ADDR_VAR 0 4
24532: PUSH
24533: LD_INT 35
24535: PUSH
24536: LD_INT 45
24538: PUSH
24539: LD_INT 46
24541: PUSH
24542: LD_INT 47
24544: PUSH
24545: LD_INT 82
24547: PUSH
24548: LD_INT 83
24550: PUSH
24551: LD_INT 84
24553: PUSH
24554: LD_INT 85
24556: PUSH
24557: LD_INT 86
24559: PUSH
24560: LD_INT 1
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: LD_INT 6
24568: PUSH
24569: LD_INT 15
24571: PUSH
24572: LD_INT 16
24574: PUSH
24575: LD_INT 7
24577: PUSH
24578: LD_INT 12
24580: PUSH
24581: LD_INT 13
24583: PUSH
24584: LD_INT 10
24586: PUSH
24587: LD_INT 14
24589: PUSH
24590: LD_INT 20
24592: PUSH
24593: LD_INT 21
24595: PUSH
24596: LD_INT 22
24598: PUSH
24599: LD_INT 25
24601: PUSH
24602: LD_INT 32
24604: PUSH
24605: LD_INT 27
24607: PUSH
24608: LD_INT 36
24610: PUSH
24611: LD_INT 69
24613: PUSH
24614: LD_INT 39
24616: PUSH
24617: LD_INT 34
24619: PUSH
24620: LD_INT 40
24622: PUSH
24623: LD_INT 48
24625: PUSH
24626: LD_INT 49
24628: PUSH
24629: LD_INT 50
24631: PUSH
24632: LD_INT 51
24634: PUSH
24635: LD_INT 52
24637: PUSH
24638: LD_INT 53
24640: PUSH
24641: LD_INT 54
24643: PUSH
24644: LD_INT 55
24646: PUSH
24647: LD_INT 56
24649: PUSH
24650: LD_INT 57
24652: PUSH
24653: LD_INT 58
24655: PUSH
24656: LD_INT 59
24658: PUSH
24659: LD_INT 60
24661: PUSH
24662: LD_INT 61
24664: PUSH
24665: LD_INT 62
24667: PUSH
24668: LD_INT 80
24670: PUSH
24671: LD_INT 82
24673: PUSH
24674: LD_INT 83
24676: PUSH
24677: LD_INT 84
24679: PUSH
24680: LD_INT 85
24682: PUSH
24683: LD_INT 86
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: ST_TO_ADDR
24739: GO 25206
24741: LD_INT 2
24743: DOUBLE
24744: EQUAL
24745: IFTRUE 24749
24747: GO 24975
24749: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24750: LD_ADDR_VAR 0 4
24754: PUSH
24755: LD_INT 35
24757: PUSH
24758: LD_INT 45
24760: PUSH
24761: LD_INT 46
24763: PUSH
24764: LD_INT 47
24766: PUSH
24767: LD_INT 82
24769: PUSH
24770: LD_INT 83
24772: PUSH
24773: LD_INT 84
24775: PUSH
24776: LD_INT 85
24778: PUSH
24779: LD_INT 87
24781: PUSH
24782: LD_INT 70
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: LD_INT 11
24790: PUSH
24791: LD_INT 3
24793: PUSH
24794: LD_INT 4
24796: PUSH
24797: LD_INT 5
24799: PUSH
24800: LD_INT 6
24802: PUSH
24803: LD_INT 15
24805: PUSH
24806: LD_INT 18
24808: PUSH
24809: LD_INT 7
24811: PUSH
24812: LD_INT 17
24814: PUSH
24815: LD_INT 8
24817: PUSH
24818: LD_INT 20
24820: PUSH
24821: LD_INT 21
24823: PUSH
24824: LD_INT 22
24826: PUSH
24827: LD_INT 72
24829: PUSH
24830: LD_INT 26
24832: PUSH
24833: LD_INT 69
24835: PUSH
24836: LD_INT 39
24838: PUSH
24839: LD_INT 40
24841: PUSH
24842: LD_INT 41
24844: PUSH
24845: LD_INT 42
24847: PUSH
24848: LD_INT 43
24850: PUSH
24851: LD_INT 48
24853: PUSH
24854: LD_INT 49
24856: PUSH
24857: LD_INT 50
24859: PUSH
24860: LD_INT 51
24862: PUSH
24863: LD_INT 52
24865: PUSH
24866: LD_INT 53
24868: PUSH
24869: LD_INT 54
24871: PUSH
24872: LD_INT 55
24874: PUSH
24875: LD_INT 56
24877: PUSH
24878: LD_INT 60
24880: PUSH
24881: LD_INT 61
24883: PUSH
24884: LD_INT 62
24886: PUSH
24887: LD_INT 66
24889: PUSH
24890: LD_INT 67
24892: PUSH
24893: LD_INT 68
24895: PUSH
24896: LD_INT 81
24898: PUSH
24899: LD_INT 82
24901: PUSH
24902: LD_INT 83
24904: PUSH
24905: LD_INT 84
24907: PUSH
24908: LD_INT 85
24910: PUSH
24911: LD_INT 87
24913: PUSH
24914: LD_INT 88
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: ST_TO_ADDR
24973: GO 25206
24975: LD_INT 3
24977: DOUBLE
24978: EQUAL
24979: IFTRUE 24983
24981: GO 25205
24983: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24984: LD_ADDR_VAR 0 4
24988: PUSH
24989: LD_INT 46
24991: PUSH
24992: LD_INT 47
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: LD_INT 2
25000: PUSH
25001: LD_INT 82
25003: PUSH
25004: LD_INT 83
25006: PUSH
25007: LD_INT 84
25009: PUSH
25010: LD_INT 85
25012: PUSH
25013: LD_INT 86
25015: PUSH
25016: LD_INT 11
25018: PUSH
25019: LD_INT 9
25021: PUSH
25022: LD_INT 20
25024: PUSH
25025: LD_INT 19
25027: PUSH
25028: LD_INT 21
25030: PUSH
25031: LD_INT 24
25033: PUSH
25034: LD_INT 22
25036: PUSH
25037: LD_INT 25
25039: PUSH
25040: LD_INT 28
25042: PUSH
25043: LD_INT 29
25045: PUSH
25046: LD_INT 30
25048: PUSH
25049: LD_INT 31
25051: PUSH
25052: LD_INT 37
25054: PUSH
25055: LD_INT 38
25057: PUSH
25058: LD_INT 32
25060: PUSH
25061: LD_INT 27
25063: PUSH
25064: LD_INT 33
25066: PUSH
25067: LD_INT 69
25069: PUSH
25070: LD_INT 39
25072: PUSH
25073: LD_INT 34
25075: PUSH
25076: LD_INT 40
25078: PUSH
25079: LD_INT 71
25081: PUSH
25082: LD_INT 23
25084: PUSH
25085: LD_INT 44
25087: PUSH
25088: LD_INT 48
25090: PUSH
25091: LD_INT 49
25093: PUSH
25094: LD_INT 50
25096: PUSH
25097: LD_INT 51
25099: PUSH
25100: LD_INT 52
25102: PUSH
25103: LD_INT 53
25105: PUSH
25106: LD_INT 54
25108: PUSH
25109: LD_INT 55
25111: PUSH
25112: LD_INT 56
25114: PUSH
25115: LD_INT 57
25117: PUSH
25118: LD_INT 58
25120: PUSH
25121: LD_INT 59
25123: PUSH
25124: LD_INT 63
25126: PUSH
25127: LD_INT 64
25129: PUSH
25130: LD_INT 65
25132: PUSH
25133: LD_INT 82
25135: PUSH
25136: LD_INT 83
25138: PUSH
25139: LD_INT 84
25141: PUSH
25142: LD_INT 85
25144: PUSH
25145: LD_INT 86
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: ST_TO_ADDR
25203: GO 25206
25205: POP
// if state > - 1 and state < 3 then
25206: LD_VAR 0 3
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: GREATER
25215: PUSH
25216: LD_VAR 0 3
25220: PUSH
25221: LD_INT 3
25223: LESS
25224: AND
25225: IFFALSE 25282
// for i in result do
25227: LD_ADDR_VAR 0 5
25231: PUSH
25232: LD_VAR 0 4
25236: PUSH
25237: FOR_IN
25238: IFFALSE 25280
// if GetTech ( i , side ) <> state then
25240: LD_VAR 0 5
25244: PPUSH
25245: LD_VAR 0 1
25249: PPUSH
25250: CALL_OW 321
25254: PUSH
25255: LD_VAR 0 3
25259: NONEQUAL
25260: IFFALSE 25278
// result := result diff i ;
25262: LD_ADDR_VAR 0 4
25266: PUSH
25267: LD_VAR 0 4
25271: PUSH
25272: LD_VAR 0 5
25276: DIFF
25277: ST_TO_ADDR
25278: GO 25237
25280: POP
25281: POP
// end ;
25282: LD_VAR 0 4
25286: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25287: LD_INT 0
25289: PPUSH
25290: PPUSH
25291: PPUSH
// result := true ;
25292: LD_ADDR_VAR 0 3
25296: PUSH
25297: LD_INT 1
25299: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25300: LD_ADDR_VAR 0 5
25304: PUSH
25305: LD_VAR 0 2
25309: PPUSH
25310: CALL_OW 480
25314: ST_TO_ADDR
// if not tmp then
25315: LD_VAR 0 5
25319: NOT
25320: IFFALSE 25324
// exit ;
25322: GO 25373
// for i in tmp do
25324: LD_ADDR_VAR 0 4
25328: PUSH
25329: LD_VAR 0 5
25333: PUSH
25334: FOR_IN
25335: IFFALSE 25371
// if GetTech ( i , side ) <> state_researched then
25337: LD_VAR 0 4
25341: PPUSH
25342: LD_VAR 0 1
25346: PPUSH
25347: CALL_OW 321
25351: PUSH
25352: LD_INT 2
25354: NONEQUAL
25355: IFFALSE 25369
// begin result := false ;
25357: LD_ADDR_VAR 0 3
25361: PUSH
25362: LD_INT 0
25364: ST_TO_ADDR
// exit ;
25365: POP
25366: POP
25367: GO 25373
// end ;
25369: GO 25334
25371: POP
25372: POP
// end ;
25373: LD_VAR 0 3
25377: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25378: LD_INT 0
25380: PPUSH
25381: PPUSH
25382: PPUSH
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
25387: PPUSH
25388: PPUSH
25389: PPUSH
25390: PPUSH
25391: PPUSH
25392: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25393: LD_VAR 0 1
25397: NOT
25398: PUSH
25399: LD_VAR 0 1
25403: PPUSH
25404: CALL_OW 257
25408: PUSH
25409: LD_INT 9
25411: NONEQUAL
25412: OR
25413: IFFALSE 25417
// exit ;
25415: GO 25990
// side := GetSide ( unit ) ;
25417: LD_ADDR_VAR 0 9
25421: PUSH
25422: LD_VAR 0 1
25426: PPUSH
25427: CALL_OW 255
25431: ST_TO_ADDR
// tech_space := tech_spacanom ;
25432: LD_ADDR_VAR 0 12
25436: PUSH
25437: LD_INT 29
25439: ST_TO_ADDR
// tech_time := tech_taurad ;
25440: LD_ADDR_VAR 0 13
25444: PUSH
25445: LD_INT 28
25447: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25448: LD_ADDR_VAR 0 11
25452: PUSH
25453: LD_VAR 0 1
25457: PPUSH
25458: CALL_OW 310
25462: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25463: LD_VAR 0 11
25467: PPUSH
25468: CALL_OW 247
25472: PUSH
25473: LD_INT 2
25475: EQUAL
25476: IFFALSE 25480
// exit ;
25478: GO 25990
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25480: LD_ADDR_VAR 0 8
25484: PUSH
25485: LD_INT 81
25487: PUSH
25488: LD_VAR 0 9
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 3
25499: PUSH
25500: LD_INT 21
25502: PUSH
25503: LD_INT 3
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PPUSH
25518: CALL_OW 69
25522: ST_TO_ADDR
// if not tmp then
25523: LD_VAR 0 8
25527: NOT
25528: IFFALSE 25532
// exit ;
25530: GO 25990
// if in_unit then
25532: LD_VAR 0 11
25536: IFFALSE 25560
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25538: LD_ADDR_VAR 0 10
25542: PUSH
25543: LD_VAR 0 8
25547: PPUSH
25548: LD_VAR 0 11
25552: PPUSH
25553: CALL_OW 74
25557: ST_TO_ADDR
25558: GO 25580
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25560: LD_ADDR_VAR 0 10
25564: PUSH
25565: LD_VAR 0 8
25569: PPUSH
25570: LD_VAR 0 1
25574: PPUSH
25575: CALL_OW 74
25579: ST_TO_ADDR
// if not enemy then
25580: LD_VAR 0 10
25584: NOT
25585: IFFALSE 25589
// exit ;
25587: GO 25990
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25589: LD_VAR 0 11
25593: PUSH
25594: LD_VAR 0 11
25598: PPUSH
25599: LD_VAR 0 10
25603: PPUSH
25604: CALL_OW 296
25608: PUSH
25609: LD_INT 13
25611: GREATER
25612: AND
25613: PUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: LD_VAR 0 10
25623: PPUSH
25624: CALL_OW 296
25628: PUSH
25629: LD_INT 12
25631: GREATER
25632: OR
25633: IFFALSE 25637
// exit ;
25635: GO 25990
// missile := [ 1 ] ;
25637: LD_ADDR_VAR 0 14
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: EMPTY
25646: LIST
25647: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25648: LD_VAR 0 9
25652: PPUSH
25653: LD_VAR 0 12
25657: PPUSH
25658: CALL_OW 325
25662: IFFALSE 25691
// missile := Replace ( missile , missile + 1 , 2 ) ;
25664: LD_ADDR_VAR 0 14
25668: PUSH
25669: LD_VAR 0 14
25673: PPUSH
25674: LD_VAR 0 14
25678: PUSH
25679: LD_INT 1
25681: PLUS
25682: PPUSH
25683: LD_INT 2
25685: PPUSH
25686: CALL_OW 1
25690: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25691: LD_VAR 0 9
25695: PPUSH
25696: LD_VAR 0 13
25700: PPUSH
25701: CALL_OW 325
25705: PUSH
25706: LD_VAR 0 10
25710: PPUSH
25711: CALL_OW 255
25715: PPUSH
25716: LD_VAR 0 13
25720: PPUSH
25721: CALL_OW 325
25725: NOT
25726: AND
25727: IFFALSE 25756
// missile := Replace ( missile , missile + 1 , 3 ) ;
25729: LD_ADDR_VAR 0 14
25733: PUSH
25734: LD_VAR 0 14
25738: PPUSH
25739: LD_VAR 0 14
25743: PUSH
25744: LD_INT 1
25746: PLUS
25747: PPUSH
25748: LD_INT 3
25750: PPUSH
25751: CALL_OW 1
25755: ST_TO_ADDR
// if missile < 2 then
25756: LD_VAR 0 14
25760: PUSH
25761: LD_INT 2
25763: LESS
25764: IFFALSE 25768
// exit ;
25766: GO 25990
// x := GetX ( enemy ) ;
25768: LD_ADDR_VAR 0 4
25772: PUSH
25773: LD_VAR 0 10
25777: PPUSH
25778: CALL_OW 250
25782: ST_TO_ADDR
// y := GetY ( enemy ) ;
25783: LD_ADDR_VAR 0 5
25787: PUSH
25788: LD_VAR 0 10
25792: PPUSH
25793: CALL_OW 251
25797: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25798: LD_ADDR_VAR 0 6
25802: PUSH
25803: LD_VAR 0 4
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PPUSH
25812: LD_INT 1
25814: PPUSH
25815: CALL_OW 12
25819: PLUS
25820: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25821: LD_ADDR_VAR 0 7
25825: PUSH
25826: LD_VAR 0 5
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PPUSH
25835: LD_INT 1
25837: PPUSH
25838: CALL_OW 12
25842: PLUS
25843: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25844: LD_VAR 0 6
25848: PPUSH
25849: LD_VAR 0 7
25853: PPUSH
25854: CALL_OW 488
25858: NOT
25859: IFFALSE 25881
// begin _x := x ;
25861: LD_ADDR_VAR 0 6
25865: PUSH
25866: LD_VAR 0 4
25870: ST_TO_ADDR
// _y := y ;
25871: LD_ADDR_VAR 0 7
25875: PUSH
25876: LD_VAR 0 5
25880: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25881: LD_ADDR_VAR 0 3
25885: PUSH
25886: LD_INT 1
25888: PPUSH
25889: LD_VAR 0 14
25893: PPUSH
25894: CALL_OW 12
25898: ST_TO_ADDR
// case i of 1 :
25899: LD_VAR 0 3
25903: PUSH
25904: LD_INT 1
25906: DOUBLE
25907: EQUAL
25908: IFTRUE 25912
25910: GO 25929
25912: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25913: LD_VAR 0 1
25917: PPUSH
25918: LD_VAR 0 10
25922: PPUSH
25923: CALL_OW 115
25927: GO 25990
25929: LD_INT 2
25931: DOUBLE
25932: EQUAL
25933: IFTRUE 25937
25935: GO 25959
25937: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25938: LD_VAR 0 1
25942: PPUSH
25943: LD_VAR 0 6
25947: PPUSH
25948: LD_VAR 0 7
25952: PPUSH
25953: CALL_OW 153
25957: GO 25990
25959: LD_INT 3
25961: DOUBLE
25962: EQUAL
25963: IFTRUE 25967
25965: GO 25989
25967: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25968: LD_VAR 0 1
25972: PPUSH
25973: LD_VAR 0 6
25977: PPUSH
25978: LD_VAR 0 7
25982: PPUSH
25983: CALL_OW 154
25987: GO 25990
25989: POP
// end ;
25990: LD_VAR 0 2
25994: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25995: LD_INT 0
25997: PPUSH
25998: PPUSH
25999: PPUSH
26000: PPUSH
26001: PPUSH
26002: PPUSH
// if not unit or not building then
26003: LD_VAR 0 1
26007: NOT
26008: PUSH
26009: LD_VAR 0 2
26013: NOT
26014: OR
26015: IFFALSE 26019
// exit ;
26017: GO 26177
// x := GetX ( building ) ;
26019: LD_ADDR_VAR 0 5
26023: PUSH
26024: LD_VAR 0 2
26028: PPUSH
26029: CALL_OW 250
26033: ST_TO_ADDR
// y := GetY ( building ) ;
26034: LD_ADDR_VAR 0 6
26038: PUSH
26039: LD_VAR 0 2
26043: PPUSH
26044: CALL_OW 251
26048: ST_TO_ADDR
// for i = 0 to 5 do
26049: LD_ADDR_VAR 0 4
26053: PUSH
26054: DOUBLE
26055: LD_INT 0
26057: DEC
26058: ST_TO_ADDR
26059: LD_INT 5
26061: PUSH
26062: FOR_TO
26063: IFFALSE 26175
// begin _x := ShiftX ( x , i , 3 ) ;
26065: LD_ADDR_VAR 0 7
26069: PUSH
26070: LD_VAR 0 5
26074: PPUSH
26075: LD_VAR 0 4
26079: PPUSH
26080: LD_INT 3
26082: PPUSH
26083: CALL_OW 272
26087: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26088: LD_ADDR_VAR 0 8
26092: PUSH
26093: LD_VAR 0 6
26097: PPUSH
26098: LD_VAR 0 4
26102: PPUSH
26103: LD_INT 3
26105: PPUSH
26106: CALL_OW 273
26110: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26111: LD_VAR 0 7
26115: PPUSH
26116: LD_VAR 0 8
26120: PPUSH
26121: CALL_OW 488
26125: NOT
26126: IFFALSE 26130
// continue ;
26128: GO 26062
// if HexInfo ( _x , _y ) = 0 then
26130: LD_VAR 0 7
26134: PPUSH
26135: LD_VAR 0 8
26139: PPUSH
26140: CALL_OW 428
26144: PUSH
26145: LD_INT 0
26147: EQUAL
26148: IFFALSE 26173
// begin ComMoveXY ( unit , _x , _y ) ;
26150: LD_VAR 0 1
26154: PPUSH
26155: LD_VAR 0 7
26159: PPUSH
26160: LD_VAR 0 8
26164: PPUSH
26165: CALL_OW 111
// exit ;
26169: POP
26170: POP
26171: GO 26177
// end ; end ;
26173: GO 26062
26175: POP
26176: POP
// end ;
26177: LD_VAR 0 3
26181: RET
// export function ScanBase ( side , base_area ) ; begin
26182: LD_INT 0
26184: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26185: LD_ADDR_VAR 0 3
26189: PUSH
26190: LD_VAR 0 2
26194: PPUSH
26195: LD_INT 81
26197: PUSH
26198: LD_VAR 0 1
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PPUSH
26207: CALL_OW 70
26211: ST_TO_ADDR
// end ;
26212: LD_VAR 0 3
26216: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26217: LD_INT 0
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
// result := false ;
26223: LD_ADDR_VAR 0 2
26227: PUSH
26228: LD_INT 0
26230: ST_TO_ADDR
// side := GetSide ( unit ) ;
26231: LD_ADDR_VAR 0 3
26235: PUSH
26236: LD_VAR 0 1
26240: PPUSH
26241: CALL_OW 255
26245: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26246: LD_ADDR_VAR 0 4
26250: PUSH
26251: LD_VAR 0 1
26255: PPUSH
26256: CALL_OW 248
26260: ST_TO_ADDR
// case nat of 1 :
26261: LD_VAR 0 4
26265: PUSH
26266: LD_INT 1
26268: DOUBLE
26269: EQUAL
26270: IFTRUE 26274
26272: GO 26285
26274: POP
// tech := tech_lassight ; 2 :
26275: LD_ADDR_VAR 0 5
26279: PUSH
26280: LD_INT 12
26282: ST_TO_ADDR
26283: GO 26324
26285: LD_INT 2
26287: DOUBLE
26288: EQUAL
26289: IFTRUE 26293
26291: GO 26304
26293: POP
// tech := tech_mortar ; 3 :
26294: LD_ADDR_VAR 0 5
26298: PUSH
26299: LD_INT 41
26301: ST_TO_ADDR
26302: GO 26324
26304: LD_INT 3
26306: DOUBLE
26307: EQUAL
26308: IFTRUE 26312
26310: GO 26323
26312: POP
// tech := tech_bazooka ; end ;
26313: LD_ADDR_VAR 0 5
26317: PUSH
26318: LD_INT 44
26320: ST_TO_ADDR
26321: GO 26324
26323: POP
// if Researched ( side , tech ) then
26324: LD_VAR 0 3
26328: PPUSH
26329: LD_VAR 0 5
26333: PPUSH
26334: CALL_OW 325
26338: IFFALSE 26365
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26340: LD_ADDR_VAR 0 2
26344: PUSH
26345: LD_INT 5
26347: PUSH
26348: LD_INT 8
26350: PUSH
26351: LD_INT 9
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: LIST
26358: PUSH
26359: LD_VAR 0 4
26363: ARRAY
26364: ST_TO_ADDR
// end ;
26365: LD_VAR 0 2
26369: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26370: LD_INT 0
26372: PPUSH
26373: PPUSH
26374: PPUSH
// if not mines then
26375: LD_VAR 0 2
26379: NOT
26380: IFFALSE 26384
// exit ;
26382: GO 26528
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26384: LD_ADDR_VAR 0 5
26388: PUSH
26389: LD_INT 81
26391: PUSH
26392: LD_VAR 0 1
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 3
26403: PUSH
26404: LD_INT 21
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PPUSH
26422: CALL_OW 69
26426: ST_TO_ADDR
// for i in mines do
26427: LD_ADDR_VAR 0 4
26431: PUSH
26432: LD_VAR 0 2
26436: PUSH
26437: FOR_IN
26438: IFFALSE 26526
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26440: LD_VAR 0 4
26444: PUSH
26445: LD_INT 1
26447: ARRAY
26448: PPUSH
26449: LD_VAR 0 4
26453: PUSH
26454: LD_INT 2
26456: ARRAY
26457: PPUSH
26458: CALL_OW 458
26462: NOT
26463: IFFALSE 26467
// continue ;
26465: GO 26437
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26467: LD_VAR 0 4
26471: PUSH
26472: LD_INT 1
26474: ARRAY
26475: PPUSH
26476: LD_VAR 0 4
26480: PUSH
26481: LD_INT 2
26483: ARRAY
26484: PPUSH
26485: CALL_OW 428
26489: PUSH
26490: LD_VAR 0 5
26494: IN
26495: IFFALSE 26524
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26497: LD_VAR 0 4
26501: PUSH
26502: LD_INT 1
26504: ARRAY
26505: PPUSH
26506: LD_VAR 0 4
26510: PUSH
26511: LD_INT 2
26513: ARRAY
26514: PPUSH
26515: LD_VAR 0 1
26519: PPUSH
26520: CALL_OW 456
// end ;
26524: GO 26437
26526: POP
26527: POP
// end ;
26528: LD_VAR 0 3
26532: RET
// export function Count ( array ) ; var i ; begin
26533: LD_INT 0
26535: PPUSH
26536: PPUSH
// result := 0 ;
26537: LD_ADDR_VAR 0 2
26541: PUSH
26542: LD_INT 0
26544: ST_TO_ADDR
// for i in array do
26545: LD_ADDR_VAR 0 3
26549: PUSH
26550: LD_VAR 0 1
26554: PUSH
26555: FOR_IN
26556: IFFALSE 26580
// if i then
26558: LD_VAR 0 3
26562: IFFALSE 26578
// result := result + 1 ;
26564: LD_ADDR_VAR 0 2
26568: PUSH
26569: LD_VAR 0 2
26573: PUSH
26574: LD_INT 1
26576: PLUS
26577: ST_TO_ADDR
26578: GO 26555
26580: POP
26581: POP
// end ;
26582: LD_VAR 0 2
26586: RET
// export function IsEmpty ( building ) ; begin
26587: LD_INT 0
26589: PPUSH
// if not building then
26590: LD_VAR 0 1
26594: NOT
26595: IFFALSE 26599
// exit ;
26597: GO 26642
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26599: LD_ADDR_VAR 0 2
26603: PUSH
26604: LD_VAR 0 1
26608: PUSH
26609: LD_INT 22
26611: PUSH
26612: LD_VAR 0 1
26616: PPUSH
26617: CALL_OW 255
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 58
26628: PUSH
26629: EMPTY
26630: LIST
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PPUSH
26636: CALL_OW 69
26640: IN
26641: ST_TO_ADDR
// end ;
26642: LD_VAR 0 2
26646: RET
// export function IsNotFull ( building ) ; begin
26647: LD_INT 0
26649: PPUSH
// if not building then
26650: LD_VAR 0 1
26654: NOT
26655: IFFALSE 26659
// exit ;
26657: GO 26678
// result := UnitsInside ( building ) < 6 ;
26659: LD_ADDR_VAR 0 2
26663: PUSH
26664: LD_VAR 0 1
26668: PPUSH
26669: CALL_OW 313
26673: PUSH
26674: LD_INT 6
26676: LESS
26677: ST_TO_ADDR
// end ;
26678: LD_VAR 0 2
26682: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26683: LD_INT 0
26685: PPUSH
26686: PPUSH
26687: PPUSH
26688: PPUSH
// tmp := [ ] ;
26689: LD_ADDR_VAR 0 3
26693: PUSH
26694: EMPTY
26695: ST_TO_ADDR
// list := [ ] ;
26696: LD_ADDR_VAR 0 5
26700: PUSH
26701: EMPTY
26702: ST_TO_ADDR
// for i = 16 to 25 do
26703: LD_ADDR_VAR 0 4
26707: PUSH
26708: DOUBLE
26709: LD_INT 16
26711: DEC
26712: ST_TO_ADDR
26713: LD_INT 25
26715: PUSH
26716: FOR_TO
26717: IFFALSE 26790
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26719: LD_ADDR_VAR 0 3
26723: PUSH
26724: LD_VAR 0 3
26728: PUSH
26729: LD_INT 22
26731: PUSH
26732: LD_VAR 0 1
26736: PPUSH
26737: CALL_OW 255
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 91
26748: PUSH
26749: LD_VAR 0 1
26753: PUSH
26754: LD_INT 6
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 30
26764: PUSH
26765: LD_VAR 0 4
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: PUSH
26779: EMPTY
26780: LIST
26781: PPUSH
26782: CALL_OW 69
26786: ADD
26787: ST_TO_ADDR
26788: GO 26716
26790: POP
26791: POP
// for i = 1 to tmp do
26792: LD_ADDR_VAR 0 4
26796: PUSH
26797: DOUBLE
26798: LD_INT 1
26800: DEC
26801: ST_TO_ADDR
26802: LD_VAR 0 3
26806: PUSH
26807: FOR_TO
26808: IFFALSE 26896
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26810: LD_ADDR_VAR 0 5
26814: PUSH
26815: LD_VAR 0 5
26819: PUSH
26820: LD_VAR 0 3
26824: PUSH
26825: LD_VAR 0 4
26829: ARRAY
26830: PPUSH
26831: CALL_OW 266
26835: PUSH
26836: LD_VAR 0 3
26840: PUSH
26841: LD_VAR 0 4
26845: ARRAY
26846: PPUSH
26847: CALL_OW 250
26851: PUSH
26852: LD_VAR 0 3
26856: PUSH
26857: LD_VAR 0 4
26861: ARRAY
26862: PPUSH
26863: CALL_OW 251
26867: PUSH
26868: LD_VAR 0 3
26872: PUSH
26873: LD_VAR 0 4
26877: ARRAY
26878: PPUSH
26879: CALL_OW 254
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: PUSH
26890: EMPTY
26891: LIST
26892: ADD
26893: ST_TO_ADDR
26894: GO 26807
26896: POP
26897: POP
// result := list ;
26898: LD_ADDR_VAR 0 2
26902: PUSH
26903: LD_VAR 0 5
26907: ST_TO_ADDR
// end ;
26908: LD_VAR 0 2
26912: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26913: LD_INT 0
26915: PPUSH
26916: PPUSH
26917: PPUSH
26918: PPUSH
26919: PPUSH
26920: PPUSH
26921: PPUSH
// if not factory then
26922: LD_VAR 0 1
26926: NOT
26927: IFFALSE 26931
// exit ;
26929: GO 27524
// if control = control_apeman then
26931: LD_VAR 0 4
26935: PUSH
26936: LD_INT 5
26938: EQUAL
26939: IFFALSE 27048
// begin tmp := UnitsInside ( factory ) ;
26941: LD_ADDR_VAR 0 8
26945: PUSH
26946: LD_VAR 0 1
26950: PPUSH
26951: CALL_OW 313
26955: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26956: LD_VAR 0 8
26960: PPUSH
26961: LD_INT 25
26963: PUSH
26964: LD_INT 12
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PPUSH
26971: CALL_OW 72
26975: NOT
26976: IFFALSE 26986
// control := control_manual ;
26978: LD_ADDR_VAR 0 4
26982: PUSH
26983: LD_INT 1
26985: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26986: LD_ADDR_VAR 0 8
26990: PUSH
26991: LD_VAR 0 1
26995: PPUSH
26996: CALL 26683 0 1
27000: ST_TO_ADDR
// if tmp then
27001: LD_VAR 0 8
27005: IFFALSE 27048
// begin for i in tmp do
27007: LD_ADDR_VAR 0 7
27011: PUSH
27012: LD_VAR 0 8
27016: PUSH
27017: FOR_IN
27018: IFFALSE 27046
// if i [ 1 ] = b_ext_radio then
27020: LD_VAR 0 7
27024: PUSH
27025: LD_INT 1
27027: ARRAY
27028: PUSH
27029: LD_INT 22
27031: EQUAL
27032: IFFALSE 27044
// begin control := control_remote ;
27034: LD_ADDR_VAR 0 4
27038: PUSH
27039: LD_INT 2
27041: ST_TO_ADDR
// break ;
27042: GO 27046
// end ;
27044: GO 27017
27046: POP
27047: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27048: LD_VAR 0 1
27052: PPUSH
27053: LD_VAR 0 2
27057: PPUSH
27058: LD_VAR 0 3
27062: PPUSH
27063: LD_VAR 0 4
27067: PPUSH
27068: LD_VAR 0 5
27072: PPUSH
27073: CALL_OW 448
27077: IFFALSE 27112
// begin result := [ chassis , engine , control , weapon ] ;
27079: LD_ADDR_VAR 0 6
27083: PUSH
27084: LD_VAR 0 2
27088: PUSH
27089: LD_VAR 0 3
27093: PUSH
27094: LD_VAR 0 4
27098: PUSH
27099: LD_VAR 0 5
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: ST_TO_ADDR
// exit ;
27110: GO 27524
// end ; _chassis := AvailableChassisList ( factory ) ;
27112: LD_ADDR_VAR 0 9
27116: PUSH
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 475
27126: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27127: LD_ADDR_VAR 0 11
27131: PUSH
27132: LD_VAR 0 1
27136: PPUSH
27137: CALL_OW 476
27141: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27142: LD_ADDR_VAR 0 12
27146: PUSH
27147: LD_VAR 0 1
27151: PPUSH
27152: CALL_OW 477
27156: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27157: LD_ADDR_VAR 0 10
27161: PUSH
27162: LD_VAR 0 1
27166: PPUSH
27167: CALL_OW 478
27171: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27172: LD_VAR 0 9
27176: NOT
27177: PUSH
27178: LD_VAR 0 11
27182: NOT
27183: OR
27184: PUSH
27185: LD_VAR 0 12
27189: NOT
27190: OR
27191: PUSH
27192: LD_VAR 0 10
27196: NOT
27197: OR
27198: IFFALSE 27233
// begin result := [ chassis , engine , control , weapon ] ;
27200: LD_ADDR_VAR 0 6
27204: PUSH
27205: LD_VAR 0 2
27209: PUSH
27210: LD_VAR 0 3
27214: PUSH
27215: LD_VAR 0 4
27219: PUSH
27220: LD_VAR 0 5
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: ST_TO_ADDR
// exit ;
27231: GO 27524
// end ; if not chassis in _chassis then
27233: LD_VAR 0 2
27237: PUSH
27238: LD_VAR 0 9
27242: IN
27243: NOT
27244: IFFALSE 27270
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27246: LD_ADDR_VAR 0 2
27250: PUSH
27251: LD_VAR 0 9
27255: PUSH
27256: LD_INT 1
27258: PPUSH
27259: LD_VAR 0 9
27263: PPUSH
27264: CALL_OW 12
27268: ARRAY
27269: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27270: LD_VAR 0 2
27274: PPUSH
27275: LD_VAR 0 3
27279: PPUSH
27280: CALL 27529 0 2
27284: NOT
27285: IFFALSE 27344
// repeat engine := _engine [ 1 ] ;
27287: LD_ADDR_VAR 0 3
27291: PUSH
27292: LD_VAR 0 11
27296: PUSH
27297: LD_INT 1
27299: ARRAY
27300: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27301: LD_ADDR_VAR 0 11
27305: PUSH
27306: LD_VAR 0 11
27310: PPUSH
27311: LD_INT 1
27313: PPUSH
27314: CALL_OW 3
27318: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27319: LD_VAR 0 2
27323: PPUSH
27324: LD_VAR 0 3
27328: PPUSH
27329: CALL 27529 0 2
27333: PUSH
27334: LD_VAR 0 11
27338: PUSH
27339: EMPTY
27340: EQUAL
27341: OR
27342: IFFALSE 27287
// if not control in _control then
27344: LD_VAR 0 4
27348: PUSH
27349: LD_VAR 0 12
27353: IN
27354: NOT
27355: IFFALSE 27381
// control := _control [ rand ( 1 , _control ) ] ;
27357: LD_ADDR_VAR 0 4
27361: PUSH
27362: LD_VAR 0 12
27366: PUSH
27367: LD_INT 1
27369: PPUSH
27370: LD_VAR 0 12
27374: PPUSH
27375: CALL_OW 12
27379: ARRAY
27380: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27381: LD_VAR 0 2
27385: PPUSH
27386: LD_VAR 0 5
27390: PPUSH
27391: CALL 27749 0 2
27395: NOT
27396: IFFALSE 27455
// repeat weapon := _weapon [ 1 ] ;
27398: LD_ADDR_VAR 0 5
27402: PUSH
27403: LD_VAR 0 10
27407: PUSH
27408: LD_INT 1
27410: ARRAY
27411: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27412: LD_ADDR_VAR 0 10
27416: PUSH
27417: LD_VAR 0 10
27421: PPUSH
27422: LD_INT 1
27424: PPUSH
27425: CALL_OW 3
27429: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27430: LD_VAR 0 2
27434: PPUSH
27435: LD_VAR 0 5
27439: PPUSH
27440: CALL 27749 0 2
27444: PUSH
27445: LD_VAR 0 10
27449: PUSH
27450: EMPTY
27451: EQUAL
27452: OR
27453: IFFALSE 27398
// result := [ ] ;
27455: LD_ADDR_VAR 0 6
27459: PUSH
27460: EMPTY
27461: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27462: LD_VAR 0 1
27466: PPUSH
27467: LD_VAR 0 2
27471: PPUSH
27472: LD_VAR 0 3
27476: PPUSH
27477: LD_VAR 0 4
27481: PPUSH
27482: LD_VAR 0 5
27486: PPUSH
27487: CALL_OW 448
27491: IFFALSE 27524
// result := [ chassis , engine , control , weapon ] ;
27493: LD_ADDR_VAR 0 6
27497: PUSH
27498: LD_VAR 0 2
27502: PUSH
27503: LD_VAR 0 3
27507: PUSH
27508: LD_VAR 0 4
27512: PUSH
27513: LD_VAR 0 5
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: ST_TO_ADDR
// end ;
27524: LD_VAR 0 6
27528: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27529: LD_INT 0
27531: PPUSH
// if not chassis or not engine then
27532: LD_VAR 0 1
27536: NOT
27537: PUSH
27538: LD_VAR 0 2
27542: NOT
27543: OR
27544: IFFALSE 27548
// exit ;
27546: GO 27744
// case engine of engine_solar :
27548: LD_VAR 0 2
27552: PUSH
27553: LD_INT 2
27555: DOUBLE
27556: EQUAL
27557: IFTRUE 27561
27559: GO 27599
27561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27562: LD_ADDR_VAR 0 3
27566: PUSH
27567: LD_INT 11
27569: PUSH
27570: LD_INT 12
27572: PUSH
27573: LD_INT 13
27575: PUSH
27576: LD_INT 14
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: LD_INT 3
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: ST_TO_ADDR
27597: GO 27728
27599: LD_INT 1
27601: DOUBLE
27602: EQUAL
27603: IFTRUE 27607
27605: GO 27669
27607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27608: LD_ADDR_VAR 0 3
27612: PUSH
27613: LD_INT 11
27615: PUSH
27616: LD_INT 12
27618: PUSH
27619: LD_INT 13
27621: PUSH
27622: LD_INT 14
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: LD_INT 2
27630: PUSH
27631: LD_INT 3
27633: PUSH
27634: LD_INT 4
27636: PUSH
27637: LD_INT 5
27639: PUSH
27640: LD_INT 21
27642: PUSH
27643: LD_INT 23
27645: PUSH
27646: LD_INT 22
27648: PUSH
27649: LD_INT 24
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: ST_TO_ADDR
27667: GO 27728
27669: LD_INT 3
27671: DOUBLE
27672: EQUAL
27673: IFTRUE 27677
27675: GO 27727
27677: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27678: LD_ADDR_VAR 0 3
27682: PUSH
27683: LD_INT 13
27685: PUSH
27686: LD_INT 14
27688: PUSH
27689: LD_INT 2
27691: PUSH
27692: LD_INT 3
27694: PUSH
27695: LD_INT 4
27697: PUSH
27698: LD_INT 5
27700: PUSH
27701: LD_INT 21
27703: PUSH
27704: LD_INT 22
27706: PUSH
27707: LD_INT 23
27709: PUSH
27710: LD_INT 24
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: ST_TO_ADDR
27725: GO 27728
27727: POP
// result := ( chassis in result ) ;
27728: LD_ADDR_VAR 0 3
27732: PUSH
27733: LD_VAR 0 1
27737: PUSH
27738: LD_VAR 0 3
27742: IN
27743: ST_TO_ADDR
// end ;
27744: LD_VAR 0 3
27748: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27749: LD_INT 0
27751: PPUSH
// if not chassis or not weapon then
27752: LD_VAR 0 1
27756: NOT
27757: PUSH
27758: LD_VAR 0 2
27762: NOT
27763: OR
27764: IFFALSE 27768
// exit ;
27766: GO 28830
// case weapon of us_machine_gun :
27768: LD_VAR 0 2
27772: PUSH
27773: LD_INT 2
27775: DOUBLE
27776: EQUAL
27777: IFTRUE 27781
27779: GO 27811
27781: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27782: LD_ADDR_VAR 0 3
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: LD_INT 2
27792: PUSH
27793: LD_INT 3
27795: PUSH
27796: LD_INT 4
27798: PUSH
27799: LD_INT 5
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: ST_TO_ADDR
27809: GO 28814
27811: LD_INT 3
27813: DOUBLE
27814: EQUAL
27815: IFTRUE 27819
27817: GO 27849
27819: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27820: LD_ADDR_VAR 0 3
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: LD_INT 4
27836: PUSH
27837: LD_INT 5
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: ST_TO_ADDR
27847: GO 28814
27849: LD_INT 11
27851: DOUBLE
27852: EQUAL
27853: IFTRUE 27857
27855: GO 27887
27857: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27858: LD_ADDR_VAR 0 3
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: LD_INT 3
27871: PUSH
27872: LD_INT 4
27874: PUSH
27875: LD_INT 5
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: ST_TO_ADDR
27885: GO 28814
27887: LD_INT 4
27889: DOUBLE
27890: EQUAL
27891: IFTRUE 27895
27893: GO 27921
27895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27896: LD_ADDR_VAR 0 3
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: LD_INT 3
27906: PUSH
27907: LD_INT 4
27909: PUSH
27910: LD_INT 5
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: ST_TO_ADDR
27919: GO 28814
27921: LD_INT 5
27923: DOUBLE
27924: EQUAL
27925: IFTRUE 27929
27927: GO 27955
27929: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27930: LD_ADDR_VAR 0 3
27934: PUSH
27935: LD_INT 2
27937: PUSH
27938: LD_INT 3
27940: PUSH
27941: LD_INT 4
27943: PUSH
27944: LD_INT 5
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: ST_TO_ADDR
27953: GO 28814
27955: LD_INT 9
27957: DOUBLE
27958: EQUAL
27959: IFTRUE 27963
27961: GO 27989
27963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27964: LD_ADDR_VAR 0 3
27968: PUSH
27969: LD_INT 2
27971: PUSH
27972: LD_INT 3
27974: PUSH
27975: LD_INT 4
27977: PUSH
27978: LD_INT 5
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: ST_TO_ADDR
27987: GO 28814
27989: LD_INT 7
27991: DOUBLE
27992: EQUAL
27993: IFTRUE 27997
27995: GO 28023
27997: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27998: LD_ADDR_VAR 0 3
28002: PUSH
28003: LD_INT 2
28005: PUSH
28006: LD_INT 3
28008: PUSH
28009: LD_INT 4
28011: PUSH
28012: LD_INT 5
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: ST_TO_ADDR
28021: GO 28814
28023: LD_INT 12
28025: DOUBLE
28026: EQUAL
28027: IFTRUE 28031
28029: GO 28057
28031: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28032: LD_ADDR_VAR 0 3
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: LD_INT 3
28042: PUSH
28043: LD_INT 4
28045: PUSH
28046: LD_INT 5
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: ST_TO_ADDR
28055: GO 28814
28057: LD_INT 13
28059: DOUBLE
28060: EQUAL
28061: IFTRUE 28065
28063: GO 28091
28065: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28066: LD_ADDR_VAR 0 3
28070: PUSH
28071: LD_INT 2
28073: PUSH
28074: LD_INT 3
28076: PUSH
28077: LD_INT 4
28079: PUSH
28080: LD_INT 5
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: ST_TO_ADDR
28089: GO 28814
28091: LD_INT 14
28093: DOUBLE
28094: EQUAL
28095: IFTRUE 28099
28097: GO 28117
28099: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28100: LD_ADDR_VAR 0 3
28104: PUSH
28105: LD_INT 4
28107: PUSH
28108: LD_INT 5
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: ST_TO_ADDR
28115: GO 28814
28117: LD_INT 6
28119: DOUBLE
28120: EQUAL
28121: IFTRUE 28125
28123: GO 28143
28125: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28126: LD_ADDR_VAR 0 3
28130: PUSH
28131: LD_INT 4
28133: PUSH
28134: LD_INT 5
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: ST_TO_ADDR
28141: GO 28814
28143: LD_INT 10
28145: DOUBLE
28146: EQUAL
28147: IFTRUE 28151
28149: GO 28169
28151: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28152: LD_ADDR_VAR 0 3
28156: PUSH
28157: LD_INT 4
28159: PUSH
28160: LD_INT 5
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: ST_TO_ADDR
28167: GO 28814
28169: LD_INT 22
28171: DOUBLE
28172: EQUAL
28173: IFTRUE 28177
28175: GO 28203
28177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28178: LD_ADDR_VAR 0 3
28182: PUSH
28183: LD_INT 11
28185: PUSH
28186: LD_INT 12
28188: PUSH
28189: LD_INT 13
28191: PUSH
28192: LD_INT 14
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: ST_TO_ADDR
28201: GO 28814
28203: LD_INT 23
28205: DOUBLE
28206: EQUAL
28207: IFTRUE 28211
28209: GO 28237
28211: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28212: LD_ADDR_VAR 0 3
28216: PUSH
28217: LD_INT 11
28219: PUSH
28220: LD_INT 12
28222: PUSH
28223: LD_INT 13
28225: PUSH
28226: LD_INT 14
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: ST_TO_ADDR
28235: GO 28814
28237: LD_INT 24
28239: DOUBLE
28240: EQUAL
28241: IFTRUE 28245
28243: GO 28271
28245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28246: LD_ADDR_VAR 0 3
28250: PUSH
28251: LD_INT 11
28253: PUSH
28254: LD_INT 12
28256: PUSH
28257: LD_INT 13
28259: PUSH
28260: LD_INT 14
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: ST_TO_ADDR
28269: GO 28814
28271: LD_INT 30
28273: DOUBLE
28274: EQUAL
28275: IFTRUE 28279
28277: GO 28305
28279: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28280: LD_ADDR_VAR 0 3
28284: PUSH
28285: LD_INT 11
28287: PUSH
28288: LD_INT 12
28290: PUSH
28291: LD_INT 13
28293: PUSH
28294: LD_INT 14
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: ST_TO_ADDR
28303: GO 28814
28305: LD_INT 25
28307: DOUBLE
28308: EQUAL
28309: IFTRUE 28313
28311: GO 28331
28313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28314: LD_ADDR_VAR 0 3
28318: PUSH
28319: LD_INT 13
28321: PUSH
28322: LD_INT 14
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: ST_TO_ADDR
28329: GO 28814
28331: LD_INT 27
28333: DOUBLE
28334: EQUAL
28335: IFTRUE 28339
28337: GO 28357
28339: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28340: LD_ADDR_VAR 0 3
28344: PUSH
28345: LD_INT 13
28347: PUSH
28348: LD_INT 14
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: ST_TO_ADDR
28355: GO 28814
28357: LD_EXP 98
28361: DOUBLE
28362: EQUAL
28363: IFTRUE 28367
28365: GO 28393
28367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28368: LD_ADDR_VAR 0 3
28372: PUSH
28373: LD_INT 11
28375: PUSH
28376: LD_INT 12
28378: PUSH
28379: LD_INT 13
28381: PUSH
28382: LD_INT 14
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: ST_TO_ADDR
28391: GO 28814
28393: LD_INT 28
28395: DOUBLE
28396: EQUAL
28397: IFTRUE 28401
28399: GO 28419
28401: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28402: LD_ADDR_VAR 0 3
28406: PUSH
28407: LD_INT 13
28409: PUSH
28410: LD_INT 14
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: ST_TO_ADDR
28417: GO 28814
28419: LD_INT 29
28421: DOUBLE
28422: EQUAL
28423: IFTRUE 28427
28425: GO 28445
28427: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28428: LD_ADDR_VAR 0 3
28432: PUSH
28433: LD_INT 13
28435: PUSH
28436: LD_INT 14
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: ST_TO_ADDR
28443: GO 28814
28445: LD_INT 31
28447: DOUBLE
28448: EQUAL
28449: IFTRUE 28453
28451: GO 28471
28453: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28454: LD_ADDR_VAR 0 3
28458: PUSH
28459: LD_INT 13
28461: PUSH
28462: LD_INT 14
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: ST_TO_ADDR
28469: GO 28814
28471: LD_INT 26
28473: DOUBLE
28474: EQUAL
28475: IFTRUE 28479
28477: GO 28497
28479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28480: LD_ADDR_VAR 0 3
28484: PUSH
28485: LD_INT 13
28487: PUSH
28488: LD_INT 14
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: ST_TO_ADDR
28495: GO 28814
28497: LD_INT 42
28499: DOUBLE
28500: EQUAL
28501: IFTRUE 28505
28503: GO 28531
28505: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28506: LD_ADDR_VAR 0 3
28510: PUSH
28511: LD_INT 21
28513: PUSH
28514: LD_INT 22
28516: PUSH
28517: LD_INT 23
28519: PUSH
28520: LD_INT 24
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: ST_TO_ADDR
28529: GO 28814
28531: LD_INT 43
28533: DOUBLE
28534: EQUAL
28535: IFTRUE 28539
28537: GO 28565
28539: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28540: LD_ADDR_VAR 0 3
28544: PUSH
28545: LD_INT 21
28547: PUSH
28548: LD_INT 22
28550: PUSH
28551: LD_INT 23
28553: PUSH
28554: LD_INT 24
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: ST_TO_ADDR
28563: GO 28814
28565: LD_INT 44
28567: DOUBLE
28568: EQUAL
28569: IFTRUE 28573
28571: GO 28599
28573: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28574: LD_ADDR_VAR 0 3
28578: PUSH
28579: LD_INT 21
28581: PUSH
28582: LD_INT 22
28584: PUSH
28585: LD_INT 23
28587: PUSH
28588: LD_INT 24
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: ST_TO_ADDR
28597: GO 28814
28599: LD_INT 45
28601: DOUBLE
28602: EQUAL
28603: IFTRUE 28607
28605: GO 28633
28607: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28608: LD_ADDR_VAR 0 3
28612: PUSH
28613: LD_INT 21
28615: PUSH
28616: LD_INT 22
28618: PUSH
28619: LD_INT 23
28621: PUSH
28622: LD_INT 24
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: ST_TO_ADDR
28631: GO 28814
28633: LD_INT 49
28635: DOUBLE
28636: EQUAL
28637: IFTRUE 28641
28639: GO 28667
28641: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28642: LD_ADDR_VAR 0 3
28646: PUSH
28647: LD_INT 21
28649: PUSH
28650: LD_INT 22
28652: PUSH
28653: LD_INT 23
28655: PUSH
28656: LD_INT 24
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: ST_TO_ADDR
28665: GO 28814
28667: LD_INT 51
28669: DOUBLE
28670: EQUAL
28671: IFTRUE 28675
28673: GO 28701
28675: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28676: LD_ADDR_VAR 0 3
28680: PUSH
28681: LD_INT 21
28683: PUSH
28684: LD_INT 22
28686: PUSH
28687: LD_INT 23
28689: PUSH
28690: LD_INT 24
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: ST_TO_ADDR
28699: GO 28814
28701: LD_INT 52
28703: DOUBLE
28704: EQUAL
28705: IFTRUE 28709
28707: GO 28735
28709: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28710: LD_ADDR_VAR 0 3
28714: PUSH
28715: LD_INT 21
28717: PUSH
28718: LD_INT 22
28720: PUSH
28721: LD_INT 23
28723: PUSH
28724: LD_INT 24
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: ST_TO_ADDR
28733: GO 28814
28735: LD_INT 53
28737: DOUBLE
28738: EQUAL
28739: IFTRUE 28743
28741: GO 28761
28743: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28744: LD_ADDR_VAR 0 3
28748: PUSH
28749: LD_INT 23
28751: PUSH
28752: LD_INT 24
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: ST_TO_ADDR
28759: GO 28814
28761: LD_INT 46
28763: DOUBLE
28764: EQUAL
28765: IFTRUE 28769
28767: GO 28787
28769: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28770: LD_ADDR_VAR 0 3
28774: PUSH
28775: LD_INT 23
28777: PUSH
28778: LD_INT 24
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: ST_TO_ADDR
28785: GO 28814
28787: LD_INT 47
28789: DOUBLE
28790: EQUAL
28791: IFTRUE 28795
28793: GO 28813
28795: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28796: LD_ADDR_VAR 0 3
28800: PUSH
28801: LD_INT 23
28803: PUSH
28804: LD_INT 24
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: ST_TO_ADDR
28811: GO 28814
28813: POP
// result := ( chassis in result ) ;
28814: LD_ADDR_VAR 0 3
28818: PUSH
28819: LD_VAR 0 1
28823: PUSH
28824: LD_VAR 0 3
28828: IN
28829: ST_TO_ADDR
// end ;
28830: LD_VAR 0 3
28834: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28835: LD_INT 0
28837: PPUSH
28838: PPUSH
28839: PPUSH
28840: PPUSH
28841: PPUSH
28842: PPUSH
28843: PPUSH
// result := array ;
28844: LD_ADDR_VAR 0 5
28848: PUSH
28849: LD_VAR 0 1
28853: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28854: LD_VAR 0 1
28858: NOT
28859: PUSH
28860: LD_VAR 0 2
28864: NOT
28865: OR
28866: PUSH
28867: LD_VAR 0 3
28871: NOT
28872: OR
28873: PUSH
28874: LD_VAR 0 2
28878: PUSH
28879: LD_VAR 0 1
28883: GREATER
28884: OR
28885: PUSH
28886: LD_VAR 0 3
28890: PUSH
28891: LD_VAR 0 1
28895: GREATER
28896: OR
28897: IFFALSE 28901
// exit ;
28899: GO 29197
// if direction then
28901: LD_VAR 0 4
28905: IFFALSE 28969
// begin d := 1 ;
28907: LD_ADDR_VAR 0 9
28911: PUSH
28912: LD_INT 1
28914: ST_TO_ADDR
// if i_from > i_to then
28915: LD_VAR 0 2
28919: PUSH
28920: LD_VAR 0 3
28924: GREATER
28925: IFFALSE 28951
// length := ( array - i_from ) + i_to else
28927: LD_ADDR_VAR 0 11
28931: PUSH
28932: LD_VAR 0 1
28936: PUSH
28937: LD_VAR 0 2
28941: MINUS
28942: PUSH
28943: LD_VAR 0 3
28947: PLUS
28948: ST_TO_ADDR
28949: GO 28967
// length := i_to - i_from ;
28951: LD_ADDR_VAR 0 11
28955: PUSH
28956: LD_VAR 0 3
28960: PUSH
28961: LD_VAR 0 2
28965: MINUS
28966: ST_TO_ADDR
// end else
28967: GO 29030
// begin d := - 1 ;
28969: LD_ADDR_VAR 0 9
28973: PUSH
28974: LD_INT 1
28976: NEG
28977: ST_TO_ADDR
// if i_from > i_to then
28978: LD_VAR 0 2
28982: PUSH
28983: LD_VAR 0 3
28987: GREATER
28988: IFFALSE 29008
// length := i_from - i_to else
28990: LD_ADDR_VAR 0 11
28994: PUSH
28995: LD_VAR 0 2
28999: PUSH
29000: LD_VAR 0 3
29004: MINUS
29005: ST_TO_ADDR
29006: GO 29030
// length := ( array - i_to ) + i_from ;
29008: LD_ADDR_VAR 0 11
29012: PUSH
29013: LD_VAR 0 1
29017: PUSH
29018: LD_VAR 0 3
29022: MINUS
29023: PUSH
29024: LD_VAR 0 2
29028: PLUS
29029: ST_TO_ADDR
// end ; if not length then
29030: LD_VAR 0 11
29034: NOT
29035: IFFALSE 29039
// exit ;
29037: GO 29197
// tmp := array ;
29039: LD_ADDR_VAR 0 10
29043: PUSH
29044: LD_VAR 0 1
29048: ST_TO_ADDR
// for i = 1 to length do
29049: LD_ADDR_VAR 0 6
29053: PUSH
29054: DOUBLE
29055: LD_INT 1
29057: DEC
29058: ST_TO_ADDR
29059: LD_VAR 0 11
29063: PUSH
29064: FOR_TO
29065: IFFALSE 29185
// begin for j = 1 to array do
29067: LD_ADDR_VAR 0 7
29071: PUSH
29072: DOUBLE
29073: LD_INT 1
29075: DEC
29076: ST_TO_ADDR
29077: LD_VAR 0 1
29081: PUSH
29082: FOR_TO
29083: IFFALSE 29171
// begin k := j + d ;
29085: LD_ADDR_VAR 0 8
29089: PUSH
29090: LD_VAR 0 7
29094: PUSH
29095: LD_VAR 0 9
29099: PLUS
29100: ST_TO_ADDR
// if k > array then
29101: LD_VAR 0 8
29105: PUSH
29106: LD_VAR 0 1
29110: GREATER
29111: IFFALSE 29121
// k := 1 ;
29113: LD_ADDR_VAR 0 8
29117: PUSH
29118: LD_INT 1
29120: ST_TO_ADDR
// if not k then
29121: LD_VAR 0 8
29125: NOT
29126: IFFALSE 29138
// k := array ;
29128: LD_ADDR_VAR 0 8
29132: PUSH
29133: LD_VAR 0 1
29137: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29138: LD_ADDR_VAR 0 10
29142: PUSH
29143: LD_VAR 0 10
29147: PPUSH
29148: LD_VAR 0 8
29152: PPUSH
29153: LD_VAR 0 1
29157: PUSH
29158: LD_VAR 0 7
29162: ARRAY
29163: PPUSH
29164: CALL_OW 1
29168: ST_TO_ADDR
// end ;
29169: GO 29082
29171: POP
29172: POP
// array := tmp ;
29173: LD_ADDR_VAR 0 1
29177: PUSH
29178: LD_VAR 0 10
29182: ST_TO_ADDR
// end ;
29183: GO 29064
29185: POP
29186: POP
// result := array ;
29187: LD_ADDR_VAR 0 5
29191: PUSH
29192: LD_VAR 0 1
29196: ST_TO_ADDR
// end ;
29197: LD_VAR 0 5
29201: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29202: LD_INT 0
29204: PPUSH
29205: PPUSH
// result := 0 ;
29206: LD_ADDR_VAR 0 3
29210: PUSH
29211: LD_INT 0
29213: ST_TO_ADDR
// if not array or not value in array then
29214: LD_VAR 0 1
29218: NOT
29219: PUSH
29220: LD_VAR 0 2
29224: PUSH
29225: LD_VAR 0 1
29229: IN
29230: NOT
29231: OR
29232: IFFALSE 29236
// exit ;
29234: GO 29290
// for i = 1 to array do
29236: LD_ADDR_VAR 0 4
29240: PUSH
29241: DOUBLE
29242: LD_INT 1
29244: DEC
29245: ST_TO_ADDR
29246: LD_VAR 0 1
29250: PUSH
29251: FOR_TO
29252: IFFALSE 29288
// if value = array [ i ] then
29254: LD_VAR 0 2
29258: PUSH
29259: LD_VAR 0 1
29263: PUSH
29264: LD_VAR 0 4
29268: ARRAY
29269: EQUAL
29270: IFFALSE 29286
// begin result := i ;
29272: LD_ADDR_VAR 0 3
29276: PUSH
29277: LD_VAR 0 4
29281: ST_TO_ADDR
// exit ;
29282: POP
29283: POP
29284: GO 29290
// end ;
29286: GO 29251
29288: POP
29289: POP
// end ;
29290: LD_VAR 0 3
29294: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29295: LD_INT 0
29297: PPUSH
// vc_chassis := chassis ;
29298: LD_ADDR_OWVAR 37
29302: PUSH
29303: LD_VAR 0 1
29307: ST_TO_ADDR
// vc_engine := engine ;
29308: LD_ADDR_OWVAR 39
29312: PUSH
29313: LD_VAR 0 2
29317: ST_TO_ADDR
// vc_control := control ;
29318: LD_ADDR_OWVAR 38
29322: PUSH
29323: LD_VAR 0 3
29327: ST_TO_ADDR
// vc_weapon := weapon ;
29328: LD_ADDR_OWVAR 40
29332: PUSH
29333: LD_VAR 0 4
29337: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29338: LD_ADDR_OWVAR 41
29342: PUSH
29343: LD_VAR 0 5
29347: ST_TO_ADDR
// end ;
29348: LD_VAR 0 6
29352: RET
// export function WantPlant ( unit ) ; var task ; begin
29353: LD_INT 0
29355: PPUSH
29356: PPUSH
// result := false ;
29357: LD_ADDR_VAR 0 2
29361: PUSH
29362: LD_INT 0
29364: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29365: LD_ADDR_VAR 0 3
29369: PUSH
29370: LD_VAR 0 1
29374: PPUSH
29375: CALL_OW 437
29379: ST_TO_ADDR
// if task then
29380: LD_VAR 0 3
29384: IFFALSE 29412
// if task [ 1 ] [ 1 ] = p then
29386: LD_VAR 0 3
29390: PUSH
29391: LD_INT 1
29393: ARRAY
29394: PUSH
29395: LD_INT 1
29397: ARRAY
29398: PUSH
29399: LD_STRING p
29401: EQUAL
29402: IFFALSE 29412
// result := true ;
29404: LD_ADDR_VAR 0 2
29408: PUSH
29409: LD_INT 1
29411: ST_TO_ADDR
// end ;
29412: LD_VAR 0 2
29416: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29417: LD_INT 0
29419: PPUSH
29420: PPUSH
29421: PPUSH
29422: PPUSH
// if pos < 1 then
29423: LD_VAR 0 2
29427: PUSH
29428: LD_INT 1
29430: LESS
29431: IFFALSE 29435
// exit ;
29433: GO 29738
// if pos = 1 then
29435: LD_VAR 0 2
29439: PUSH
29440: LD_INT 1
29442: EQUAL
29443: IFFALSE 29476
// result := Replace ( arr , pos [ 1 ] , value ) else
29445: LD_ADDR_VAR 0 4
29449: PUSH
29450: LD_VAR 0 1
29454: PPUSH
29455: LD_VAR 0 2
29459: PUSH
29460: LD_INT 1
29462: ARRAY
29463: PPUSH
29464: LD_VAR 0 3
29468: PPUSH
29469: CALL_OW 1
29473: ST_TO_ADDR
29474: GO 29738
// begin tmp := arr ;
29476: LD_ADDR_VAR 0 6
29480: PUSH
29481: LD_VAR 0 1
29485: ST_TO_ADDR
// s_arr := [ tmp ] ;
29486: LD_ADDR_VAR 0 7
29490: PUSH
29491: LD_VAR 0 6
29495: PUSH
29496: EMPTY
29497: LIST
29498: ST_TO_ADDR
// for i = 1 to pos - 1 do
29499: LD_ADDR_VAR 0 5
29503: PUSH
29504: DOUBLE
29505: LD_INT 1
29507: DEC
29508: ST_TO_ADDR
29509: LD_VAR 0 2
29513: PUSH
29514: LD_INT 1
29516: MINUS
29517: PUSH
29518: FOR_TO
29519: IFFALSE 29564
// begin tmp := tmp [ pos [ i ] ] ;
29521: LD_ADDR_VAR 0 6
29525: PUSH
29526: LD_VAR 0 6
29530: PUSH
29531: LD_VAR 0 2
29535: PUSH
29536: LD_VAR 0 5
29540: ARRAY
29541: ARRAY
29542: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29543: LD_ADDR_VAR 0 7
29547: PUSH
29548: LD_VAR 0 7
29552: PUSH
29553: LD_VAR 0 6
29557: PUSH
29558: EMPTY
29559: LIST
29560: ADD
29561: ST_TO_ADDR
// end ;
29562: GO 29518
29564: POP
29565: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29566: LD_ADDR_VAR 0 6
29570: PUSH
29571: LD_VAR 0 6
29575: PPUSH
29576: LD_VAR 0 2
29580: PUSH
29581: LD_VAR 0 2
29585: ARRAY
29586: PPUSH
29587: LD_VAR 0 3
29591: PPUSH
29592: CALL_OW 1
29596: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29597: LD_ADDR_VAR 0 7
29601: PUSH
29602: LD_VAR 0 7
29606: PPUSH
29607: LD_VAR 0 7
29611: PPUSH
29612: LD_VAR 0 6
29616: PPUSH
29617: CALL_OW 1
29621: ST_TO_ADDR
// for i = s_arr downto 2 do
29622: LD_ADDR_VAR 0 5
29626: PUSH
29627: DOUBLE
29628: LD_VAR 0 7
29632: INC
29633: ST_TO_ADDR
29634: LD_INT 2
29636: PUSH
29637: FOR_DOWNTO
29638: IFFALSE 29722
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29640: LD_ADDR_VAR 0 6
29644: PUSH
29645: LD_VAR 0 7
29649: PUSH
29650: LD_VAR 0 5
29654: PUSH
29655: LD_INT 1
29657: MINUS
29658: ARRAY
29659: PPUSH
29660: LD_VAR 0 2
29664: PUSH
29665: LD_VAR 0 5
29669: PUSH
29670: LD_INT 1
29672: MINUS
29673: ARRAY
29674: PPUSH
29675: LD_VAR 0 7
29679: PUSH
29680: LD_VAR 0 5
29684: ARRAY
29685: PPUSH
29686: CALL_OW 1
29690: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29691: LD_ADDR_VAR 0 7
29695: PUSH
29696: LD_VAR 0 7
29700: PPUSH
29701: LD_VAR 0 5
29705: PUSH
29706: LD_INT 1
29708: MINUS
29709: PPUSH
29710: LD_VAR 0 6
29714: PPUSH
29715: CALL_OW 1
29719: ST_TO_ADDR
// end ;
29720: GO 29637
29722: POP
29723: POP
// result := s_arr [ 1 ] ;
29724: LD_ADDR_VAR 0 4
29728: PUSH
29729: LD_VAR 0 7
29733: PUSH
29734: LD_INT 1
29736: ARRAY
29737: ST_TO_ADDR
// end ; end ;
29738: LD_VAR 0 4
29742: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29743: LD_INT 0
29745: PPUSH
29746: PPUSH
// if not list then
29747: LD_VAR 0 1
29751: NOT
29752: IFFALSE 29756
// exit ;
29754: GO 29847
// i := list [ pos1 ] ;
29756: LD_ADDR_VAR 0 5
29760: PUSH
29761: LD_VAR 0 1
29765: PUSH
29766: LD_VAR 0 2
29770: ARRAY
29771: ST_TO_ADDR
// if not i then
29772: LD_VAR 0 5
29776: NOT
29777: IFFALSE 29781
// exit ;
29779: GO 29847
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29781: LD_ADDR_VAR 0 1
29785: PUSH
29786: LD_VAR 0 1
29790: PPUSH
29791: LD_VAR 0 2
29795: PPUSH
29796: LD_VAR 0 1
29800: PUSH
29801: LD_VAR 0 3
29805: ARRAY
29806: PPUSH
29807: CALL_OW 1
29811: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29812: LD_ADDR_VAR 0 1
29816: PUSH
29817: LD_VAR 0 1
29821: PPUSH
29822: LD_VAR 0 3
29826: PPUSH
29827: LD_VAR 0 5
29831: PPUSH
29832: CALL_OW 1
29836: ST_TO_ADDR
// result := list ;
29837: LD_ADDR_VAR 0 4
29841: PUSH
29842: LD_VAR 0 1
29846: ST_TO_ADDR
// end ;
29847: LD_VAR 0 4
29851: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29852: LD_INT 0
29854: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29855: LD_ADDR_VAR 0 5
29859: PUSH
29860: LD_VAR 0 1
29864: PPUSH
29865: CALL_OW 250
29869: PPUSH
29870: LD_VAR 0 1
29874: PPUSH
29875: CALL_OW 251
29879: PPUSH
29880: LD_VAR 0 2
29884: PPUSH
29885: LD_VAR 0 3
29889: PPUSH
29890: LD_VAR 0 4
29894: PPUSH
29895: CALL 29905 0 5
29899: ST_TO_ADDR
// end ;
29900: LD_VAR 0 5
29904: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29905: LD_INT 0
29907: PPUSH
29908: PPUSH
29909: PPUSH
29910: PPUSH
// if not list then
29911: LD_VAR 0 3
29915: NOT
29916: IFFALSE 29920
// exit ;
29918: GO 30308
// result := [ ] ;
29920: LD_ADDR_VAR 0 6
29924: PUSH
29925: EMPTY
29926: ST_TO_ADDR
// for i in list do
29927: LD_ADDR_VAR 0 7
29931: PUSH
29932: LD_VAR 0 3
29936: PUSH
29937: FOR_IN
29938: IFFALSE 30140
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29940: LD_ADDR_VAR 0 9
29944: PUSH
29945: LD_VAR 0 7
29949: PPUSH
29950: LD_VAR 0 1
29954: PPUSH
29955: LD_VAR 0 2
29959: PPUSH
29960: CALL_OW 297
29964: ST_TO_ADDR
// if not result then
29965: LD_VAR 0 6
29969: NOT
29970: IFFALSE 29996
// result := [ [ i , tmp ] ] else
29972: LD_ADDR_VAR 0 6
29976: PUSH
29977: LD_VAR 0 7
29981: PUSH
29982: LD_VAR 0 9
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: EMPTY
29992: LIST
29993: ST_TO_ADDR
29994: GO 30138
// begin if result [ result ] [ 2 ] < tmp then
29996: LD_VAR 0 6
30000: PUSH
30001: LD_VAR 0 6
30005: ARRAY
30006: PUSH
30007: LD_INT 2
30009: ARRAY
30010: PUSH
30011: LD_VAR 0 9
30015: LESS
30016: IFFALSE 30058
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30018: LD_ADDR_VAR 0 6
30022: PUSH
30023: LD_VAR 0 6
30027: PPUSH
30028: LD_VAR 0 6
30032: PUSH
30033: LD_INT 1
30035: PLUS
30036: PPUSH
30037: LD_VAR 0 7
30041: PUSH
30042: LD_VAR 0 9
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PPUSH
30051: CALL_OW 2
30055: ST_TO_ADDR
30056: GO 30138
// for j = 1 to result do
30058: LD_ADDR_VAR 0 8
30062: PUSH
30063: DOUBLE
30064: LD_INT 1
30066: DEC
30067: ST_TO_ADDR
30068: LD_VAR 0 6
30072: PUSH
30073: FOR_TO
30074: IFFALSE 30136
// begin if tmp < result [ j ] [ 2 ] then
30076: LD_VAR 0 9
30080: PUSH
30081: LD_VAR 0 6
30085: PUSH
30086: LD_VAR 0 8
30090: ARRAY
30091: PUSH
30092: LD_INT 2
30094: ARRAY
30095: LESS
30096: IFFALSE 30134
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30098: LD_ADDR_VAR 0 6
30102: PUSH
30103: LD_VAR 0 6
30107: PPUSH
30108: LD_VAR 0 8
30112: PPUSH
30113: LD_VAR 0 7
30117: PUSH
30118: LD_VAR 0 9
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PPUSH
30127: CALL_OW 2
30131: ST_TO_ADDR
// break ;
30132: GO 30136
// end ; end ;
30134: GO 30073
30136: POP
30137: POP
// end ; end ;
30138: GO 29937
30140: POP
30141: POP
// if result and not asc then
30142: LD_VAR 0 6
30146: PUSH
30147: LD_VAR 0 4
30151: NOT
30152: AND
30153: IFFALSE 30228
// begin tmp := result ;
30155: LD_ADDR_VAR 0 9
30159: PUSH
30160: LD_VAR 0 6
30164: ST_TO_ADDR
// for i = tmp downto 1 do
30165: LD_ADDR_VAR 0 7
30169: PUSH
30170: DOUBLE
30171: LD_VAR 0 9
30175: INC
30176: ST_TO_ADDR
30177: LD_INT 1
30179: PUSH
30180: FOR_DOWNTO
30181: IFFALSE 30226
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30183: LD_ADDR_VAR 0 6
30187: PUSH
30188: LD_VAR 0 6
30192: PPUSH
30193: LD_VAR 0 9
30197: PUSH
30198: LD_VAR 0 7
30202: MINUS
30203: PUSH
30204: LD_INT 1
30206: PLUS
30207: PPUSH
30208: LD_VAR 0 9
30212: PUSH
30213: LD_VAR 0 7
30217: ARRAY
30218: PPUSH
30219: CALL_OW 1
30223: ST_TO_ADDR
30224: GO 30180
30226: POP
30227: POP
// end ; tmp := [ ] ;
30228: LD_ADDR_VAR 0 9
30232: PUSH
30233: EMPTY
30234: ST_TO_ADDR
// if mode then
30235: LD_VAR 0 5
30239: IFFALSE 30308
// begin for i = 1 to result do
30241: LD_ADDR_VAR 0 7
30245: PUSH
30246: DOUBLE
30247: LD_INT 1
30249: DEC
30250: ST_TO_ADDR
30251: LD_VAR 0 6
30255: PUSH
30256: FOR_TO
30257: IFFALSE 30296
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30259: LD_ADDR_VAR 0 9
30263: PUSH
30264: LD_VAR 0 9
30268: PPUSH
30269: LD_VAR 0 7
30273: PPUSH
30274: LD_VAR 0 6
30278: PUSH
30279: LD_VAR 0 7
30283: ARRAY
30284: PUSH
30285: LD_INT 1
30287: ARRAY
30288: PPUSH
30289: CALL_OW 1
30293: ST_TO_ADDR
30294: GO 30256
30296: POP
30297: POP
// result := tmp ;
30298: LD_ADDR_VAR 0 6
30302: PUSH
30303: LD_VAR 0 9
30307: ST_TO_ADDR
// end ; end ;
30308: LD_VAR 0 6
30312: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30313: LD_INT 0
30315: PPUSH
30316: PPUSH
30317: PPUSH
30318: PPUSH
30319: PPUSH
30320: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30321: LD_ADDR_VAR 0 5
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: EMPTY
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: ST_TO_ADDR
// if not x or not y then
30343: LD_VAR 0 2
30347: NOT
30348: PUSH
30349: LD_VAR 0 3
30353: NOT
30354: OR
30355: IFFALSE 30359
// exit ;
30357: GO 32011
// if not range then
30359: LD_VAR 0 4
30363: NOT
30364: IFFALSE 30374
// range := 10 ;
30366: LD_ADDR_VAR 0 4
30370: PUSH
30371: LD_INT 10
30373: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30374: LD_ADDR_VAR 0 8
30378: PUSH
30379: LD_INT 81
30381: PUSH
30382: LD_VAR 0 1
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 92
30393: PUSH
30394: LD_VAR 0 2
30398: PUSH
30399: LD_VAR 0 3
30403: PUSH
30404: LD_VAR 0 4
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 3
30417: PUSH
30418: LD_INT 21
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: LIST
30436: PPUSH
30437: CALL_OW 69
30441: ST_TO_ADDR
// if not tmp then
30442: LD_VAR 0 8
30446: NOT
30447: IFFALSE 30451
// exit ;
30449: GO 32011
// for i in tmp do
30451: LD_ADDR_VAR 0 6
30455: PUSH
30456: LD_VAR 0 8
30460: PUSH
30461: FOR_IN
30462: IFFALSE 31986
// begin points := [ 0 , 0 , 0 ] ;
30464: LD_ADDR_VAR 0 9
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: LD_INT 0
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: LIST
30482: ST_TO_ADDR
// bpoints := 1 ;
30483: LD_ADDR_VAR 0 10
30487: PUSH
30488: LD_INT 1
30490: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30491: LD_VAR 0 6
30495: PPUSH
30496: CALL_OW 247
30500: PUSH
30501: LD_INT 1
30503: DOUBLE
30504: EQUAL
30505: IFTRUE 30509
30507: GO 31087
30509: POP
// begin if GetClass ( i ) = 1 then
30510: LD_VAR 0 6
30514: PPUSH
30515: CALL_OW 257
30519: PUSH
30520: LD_INT 1
30522: EQUAL
30523: IFFALSE 30544
// points := [ 10 , 5 , 3 ] ;
30525: LD_ADDR_VAR 0 9
30529: PUSH
30530: LD_INT 10
30532: PUSH
30533: LD_INT 5
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30544: LD_VAR 0 6
30548: PPUSH
30549: CALL_OW 257
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: LD_INT 3
30559: PUSH
30560: LD_INT 4
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: LIST
30567: IN
30568: IFFALSE 30589
// points := [ 3 , 2 , 1 ] ;
30570: LD_ADDR_VAR 0 9
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: LD_INT 2
30580: PUSH
30581: LD_INT 1
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: LIST
30588: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30589: LD_VAR 0 6
30593: PPUSH
30594: CALL_OW 257
30598: PUSH
30599: LD_INT 5
30601: EQUAL
30602: IFFALSE 30623
// points := [ 130 , 5 , 2 ] ;
30604: LD_ADDR_VAR 0 9
30608: PUSH
30609: LD_INT 130
30611: PUSH
30612: LD_INT 5
30614: PUSH
30615: LD_INT 2
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30623: LD_VAR 0 6
30627: PPUSH
30628: CALL_OW 257
30632: PUSH
30633: LD_INT 8
30635: EQUAL
30636: IFFALSE 30657
// points := [ 35 , 35 , 30 ] ;
30638: LD_ADDR_VAR 0 9
30642: PUSH
30643: LD_INT 35
30645: PUSH
30646: LD_INT 35
30648: PUSH
30649: LD_INT 30
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30657: LD_VAR 0 6
30661: PPUSH
30662: CALL_OW 257
30666: PUSH
30667: LD_INT 9
30669: EQUAL
30670: IFFALSE 30691
// points := [ 20 , 55 , 40 ] ;
30672: LD_ADDR_VAR 0 9
30676: PUSH
30677: LD_INT 20
30679: PUSH
30680: LD_INT 55
30682: PUSH
30683: LD_INT 40
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30691: LD_VAR 0 6
30695: PPUSH
30696: CALL_OW 257
30700: PUSH
30701: LD_INT 12
30703: PUSH
30704: LD_INT 16
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: IN
30711: IFFALSE 30732
// points := [ 5 , 3 , 2 ] ;
30713: LD_ADDR_VAR 0 9
30717: PUSH
30718: LD_INT 5
30720: PUSH
30721: LD_INT 3
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: LIST
30731: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30732: LD_VAR 0 6
30736: PPUSH
30737: CALL_OW 257
30741: PUSH
30742: LD_INT 17
30744: EQUAL
30745: IFFALSE 30766
// points := [ 100 , 50 , 75 ] ;
30747: LD_ADDR_VAR 0 9
30751: PUSH
30752: LD_INT 100
30754: PUSH
30755: LD_INT 50
30757: PUSH
30758: LD_INT 75
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30766: LD_VAR 0 6
30770: PPUSH
30771: CALL_OW 257
30775: PUSH
30776: LD_INT 15
30778: EQUAL
30779: IFFALSE 30800
// points := [ 10 , 5 , 3 ] ;
30781: LD_ADDR_VAR 0 9
30785: PUSH
30786: LD_INT 10
30788: PUSH
30789: LD_INT 5
30791: PUSH
30792: LD_INT 3
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30800: LD_VAR 0 6
30804: PPUSH
30805: CALL_OW 257
30809: PUSH
30810: LD_INT 14
30812: EQUAL
30813: IFFALSE 30834
// points := [ 10 , 0 , 0 ] ;
30815: LD_ADDR_VAR 0 9
30819: PUSH
30820: LD_INT 10
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: LIST
30833: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30834: LD_VAR 0 6
30838: PPUSH
30839: CALL_OW 257
30843: PUSH
30844: LD_INT 11
30846: EQUAL
30847: IFFALSE 30868
// points := [ 30 , 10 , 5 ] ;
30849: LD_ADDR_VAR 0 9
30853: PUSH
30854: LD_INT 30
30856: PUSH
30857: LD_INT 10
30859: PUSH
30860: LD_INT 5
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: LIST
30867: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30868: LD_VAR 0 1
30872: PPUSH
30873: LD_INT 5
30875: PPUSH
30876: CALL_OW 321
30880: PUSH
30881: LD_INT 2
30883: EQUAL
30884: IFFALSE 30901
// bpoints := bpoints * 1.8 ;
30886: LD_ADDR_VAR 0 10
30890: PUSH
30891: LD_VAR 0 10
30895: PUSH
30896: LD_REAL  1.80000000000000E+0000
30899: MUL
30900: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30901: LD_VAR 0 6
30905: PPUSH
30906: CALL_OW 257
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 2
30916: PUSH
30917: LD_INT 3
30919: PUSH
30920: LD_INT 4
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: IN
30929: PUSH
30930: LD_VAR 0 1
30934: PPUSH
30935: LD_INT 51
30937: PPUSH
30938: CALL_OW 321
30942: PUSH
30943: LD_INT 2
30945: EQUAL
30946: AND
30947: IFFALSE 30964
// bpoints := bpoints * 1.2 ;
30949: LD_ADDR_VAR 0 10
30953: PUSH
30954: LD_VAR 0 10
30958: PUSH
30959: LD_REAL  1.20000000000000E+0000
30962: MUL
30963: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30964: LD_VAR 0 6
30968: PPUSH
30969: CALL_OW 257
30973: PUSH
30974: LD_INT 5
30976: PUSH
30977: LD_INT 7
30979: PUSH
30980: LD_INT 9
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: LIST
30987: IN
30988: PUSH
30989: LD_VAR 0 1
30993: PPUSH
30994: LD_INT 52
30996: PPUSH
30997: CALL_OW 321
31001: PUSH
31002: LD_INT 2
31004: EQUAL
31005: AND
31006: IFFALSE 31023
// bpoints := bpoints * 1.5 ;
31008: LD_ADDR_VAR 0 10
31012: PUSH
31013: LD_VAR 0 10
31017: PUSH
31018: LD_REAL  1.50000000000000E+0000
31021: MUL
31022: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31023: LD_VAR 0 1
31027: PPUSH
31028: LD_INT 66
31030: PPUSH
31031: CALL_OW 321
31035: PUSH
31036: LD_INT 2
31038: EQUAL
31039: IFFALSE 31056
// bpoints := bpoints * 1.1 ;
31041: LD_ADDR_VAR 0 10
31045: PUSH
31046: LD_VAR 0 10
31050: PUSH
31051: LD_REAL  1.10000000000000E+0000
31054: MUL
31055: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31056: LD_ADDR_VAR 0 10
31060: PUSH
31061: LD_VAR 0 10
31065: PUSH
31066: LD_VAR 0 6
31070: PPUSH
31071: LD_INT 1
31073: PPUSH
31074: CALL_OW 259
31078: PUSH
31079: LD_REAL  1.15000000000000E+0000
31082: MUL
31083: MUL
31084: ST_TO_ADDR
// end ; unit_vehicle :
31085: GO 31915
31087: LD_INT 2
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31903
31095: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31096: LD_VAR 0 6
31100: PPUSH
31101: CALL_OW 264
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: LD_INT 42
31111: PUSH
31112: LD_INT 24
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: LIST
31119: IN
31120: IFFALSE 31141
// points := [ 25 , 5 , 3 ] ;
31122: LD_ADDR_VAR 0 9
31126: PUSH
31127: LD_INT 25
31129: PUSH
31130: LD_INT 5
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31141: LD_VAR 0 6
31145: PPUSH
31146: CALL_OW 264
31150: PUSH
31151: LD_INT 4
31153: PUSH
31154: LD_INT 43
31156: PUSH
31157: LD_INT 25
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: LIST
31164: IN
31165: IFFALSE 31186
// points := [ 40 , 15 , 5 ] ;
31167: LD_ADDR_VAR 0 9
31171: PUSH
31172: LD_INT 40
31174: PUSH
31175: LD_INT 15
31177: PUSH
31178: LD_INT 5
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31186: LD_VAR 0 6
31190: PPUSH
31191: CALL_OW 264
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 23
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: IN
31206: IFFALSE 31227
// points := [ 7 , 25 , 8 ] ;
31208: LD_ADDR_VAR 0 9
31212: PUSH
31213: LD_INT 7
31215: PUSH
31216: LD_INT 25
31218: PUSH
31219: LD_INT 8
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: LIST
31226: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31227: LD_VAR 0 6
31231: PPUSH
31232: CALL_OW 264
31236: PUSH
31237: LD_INT 5
31239: PUSH
31240: LD_INT 27
31242: PUSH
31243: LD_INT 44
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: IN
31251: IFFALSE 31272
// points := [ 14 , 50 , 16 ] ;
31253: LD_ADDR_VAR 0 9
31257: PUSH
31258: LD_INT 14
31260: PUSH
31261: LD_INT 50
31263: PUSH
31264: LD_INT 16
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31272: LD_VAR 0 6
31276: PPUSH
31277: CALL_OW 264
31281: PUSH
31282: LD_INT 6
31284: PUSH
31285: LD_INT 46
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: IN
31292: IFFALSE 31313
// points := [ 32 , 120 , 70 ] ;
31294: LD_ADDR_VAR 0 9
31298: PUSH
31299: LD_INT 32
31301: PUSH
31302: LD_INT 120
31304: PUSH
31305: LD_INT 70
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: LIST
31312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31313: LD_VAR 0 6
31317: PPUSH
31318: CALL_OW 264
31322: PUSH
31323: LD_INT 7
31325: PUSH
31326: LD_INT 28
31328: PUSH
31329: LD_INT 45
31331: PUSH
31332: LD_EXP 98
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: IN
31343: IFFALSE 31364
// points := [ 35 , 20 , 45 ] ;
31345: LD_ADDR_VAR 0 9
31349: PUSH
31350: LD_INT 35
31352: PUSH
31353: LD_INT 20
31355: PUSH
31356: LD_INT 45
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31364: LD_VAR 0 6
31368: PPUSH
31369: CALL_OW 264
31373: PUSH
31374: LD_INT 47
31376: PUSH
31377: EMPTY
31378: LIST
31379: IN
31380: IFFALSE 31401
// points := [ 67 , 45 , 75 ] ;
31382: LD_ADDR_VAR 0 9
31386: PUSH
31387: LD_INT 67
31389: PUSH
31390: LD_INT 45
31392: PUSH
31393: LD_INT 75
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: LIST
31400: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31401: LD_VAR 0 6
31405: PPUSH
31406: CALL_OW 264
31410: PUSH
31411: LD_INT 26
31413: PUSH
31414: EMPTY
31415: LIST
31416: IN
31417: IFFALSE 31438
// points := [ 120 , 30 , 80 ] ;
31419: LD_ADDR_VAR 0 9
31423: PUSH
31424: LD_INT 120
31426: PUSH
31427: LD_INT 30
31429: PUSH
31430: LD_INT 80
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31438: LD_VAR 0 6
31442: PPUSH
31443: CALL_OW 264
31447: PUSH
31448: LD_INT 22
31450: PUSH
31451: EMPTY
31452: LIST
31453: IN
31454: IFFALSE 31475
// points := [ 40 , 1 , 1 ] ;
31456: LD_ADDR_VAR 0 9
31460: PUSH
31461: LD_INT 40
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: LIST
31474: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31475: LD_VAR 0 6
31479: PPUSH
31480: CALL_OW 264
31484: PUSH
31485: LD_INT 29
31487: PUSH
31488: EMPTY
31489: LIST
31490: IN
31491: IFFALSE 31512
// points := [ 70 , 200 , 400 ] ;
31493: LD_ADDR_VAR 0 9
31497: PUSH
31498: LD_INT 70
31500: PUSH
31501: LD_INT 200
31503: PUSH
31504: LD_INT 400
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31512: LD_VAR 0 6
31516: PPUSH
31517: CALL_OW 264
31521: PUSH
31522: LD_INT 14
31524: PUSH
31525: LD_INT 53
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: IN
31532: IFFALSE 31553
// points := [ 40 , 10 , 20 ] ;
31534: LD_ADDR_VAR 0 9
31538: PUSH
31539: LD_INT 40
31541: PUSH
31542: LD_INT 10
31544: PUSH
31545: LD_INT 20
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31553: LD_VAR 0 6
31557: PPUSH
31558: CALL_OW 264
31562: PUSH
31563: LD_INT 9
31565: PUSH
31566: EMPTY
31567: LIST
31568: IN
31569: IFFALSE 31590
// points := [ 5 , 70 , 20 ] ;
31571: LD_ADDR_VAR 0 9
31575: PUSH
31576: LD_INT 5
31578: PUSH
31579: LD_INT 70
31581: PUSH
31582: LD_INT 20
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: LIST
31589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31590: LD_VAR 0 6
31594: PPUSH
31595: CALL_OW 264
31599: PUSH
31600: LD_INT 10
31602: PUSH
31603: EMPTY
31604: LIST
31605: IN
31606: IFFALSE 31627
// points := [ 35 , 110 , 70 ] ;
31608: LD_ADDR_VAR 0 9
31612: PUSH
31613: LD_INT 35
31615: PUSH
31616: LD_INT 110
31618: PUSH
31619: LD_INT 70
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: LIST
31626: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31627: LD_VAR 0 6
31631: PPUSH
31632: CALL_OW 265
31636: PUSH
31637: LD_INT 25
31639: EQUAL
31640: IFFALSE 31661
// points := [ 80 , 65 , 100 ] ;
31642: LD_ADDR_VAR 0 9
31646: PUSH
31647: LD_INT 80
31649: PUSH
31650: LD_INT 65
31652: PUSH
31653: LD_INT 100
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: LIST
31660: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31661: LD_VAR 0 6
31665: PPUSH
31666: CALL_OW 263
31670: PUSH
31671: LD_INT 1
31673: EQUAL
31674: IFFALSE 31709
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31676: LD_ADDR_VAR 0 10
31680: PUSH
31681: LD_VAR 0 10
31685: PUSH
31686: LD_VAR 0 6
31690: PPUSH
31691: CALL_OW 311
31695: PPUSH
31696: LD_INT 3
31698: PPUSH
31699: CALL_OW 259
31703: PUSH
31704: LD_INT 4
31706: MUL
31707: MUL
31708: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31709: LD_VAR 0 6
31713: PPUSH
31714: CALL_OW 263
31718: PUSH
31719: LD_INT 2
31721: EQUAL
31722: IFFALSE 31773
// begin j := IsControledBy ( i ) ;
31724: LD_ADDR_VAR 0 7
31728: PUSH
31729: LD_VAR 0 6
31733: PPUSH
31734: CALL_OW 312
31738: ST_TO_ADDR
// if j then
31739: LD_VAR 0 7
31743: IFFALSE 31773
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31745: LD_ADDR_VAR 0 10
31749: PUSH
31750: LD_VAR 0 10
31754: PUSH
31755: LD_VAR 0 7
31759: PPUSH
31760: LD_INT 3
31762: PPUSH
31763: CALL_OW 259
31767: PUSH
31768: LD_INT 3
31770: MUL
31771: MUL
31772: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31773: LD_VAR 0 6
31777: PPUSH
31778: CALL_OW 264
31782: PUSH
31783: LD_INT 5
31785: PUSH
31786: LD_INT 6
31788: PUSH
31789: LD_INT 46
31791: PUSH
31792: LD_INT 44
31794: PUSH
31795: LD_INT 47
31797: PUSH
31798: LD_INT 45
31800: PUSH
31801: LD_INT 28
31803: PUSH
31804: LD_INT 7
31806: PUSH
31807: LD_INT 27
31809: PUSH
31810: LD_INT 29
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: IN
31825: PUSH
31826: LD_VAR 0 1
31830: PPUSH
31831: LD_INT 52
31833: PPUSH
31834: CALL_OW 321
31838: PUSH
31839: LD_INT 2
31841: EQUAL
31842: AND
31843: IFFALSE 31860
// bpoints := bpoints * 1.2 ;
31845: LD_ADDR_VAR 0 10
31849: PUSH
31850: LD_VAR 0 10
31854: PUSH
31855: LD_REAL  1.20000000000000E+0000
31858: MUL
31859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31860: LD_VAR 0 6
31864: PPUSH
31865: CALL_OW 264
31869: PUSH
31870: LD_INT 6
31872: PUSH
31873: LD_INT 46
31875: PUSH
31876: LD_INT 47
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: IN
31884: IFFALSE 31901
// bpoints := bpoints * 1.2 ;
31886: LD_ADDR_VAR 0 10
31890: PUSH
31891: LD_VAR 0 10
31895: PUSH
31896: LD_REAL  1.20000000000000E+0000
31899: MUL
31900: ST_TO_ADDR
// end ; unit_building :
31901: GO 31915
31903: LD_INT 3
31905: DOUBLE
31906: EQUAL
31907: IFTRUE 31911
31909: GO 31914
31911: POP
// ; end ;
31912: GO 31915
31914: POP
// for j = 1 to 3 do
31915: LD_ADDR_VAR 0 7
31919: PUSH
31920: DOUBLE
31921: LD_INT 1
31923: DEC
31924: ST_TO_ADDR
31925: LD_INT 3
31927: PUSH
31928: FOR_TO
31929: IFFALSE 31982
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31931: LD_ADDR_VAR 0 5
31935: PUSH
31936: LD_VAR 0 5
31940: PPUSH
31941: LD_VAR 0 7
31945: PPUSH
31946: LD_VAR 0 5
31950: PUSH
31951: LD_VAR 0 7
31955: ARRAY
31956: PUSH
31957: LD_VAR 0 9
31961: PUSH
31962: LD_VAR 0 7
31966: ARRAY
31967: PUSH
31968: LD_VAR 0 10
31972: MUL
31973: PLUS
31974: PPUSH
31975: CALL_OW 1
31979: ST_TO_ADDR
31980: GO 31928
31982: POP
31983: POP
// end ;
31984: GO 30461
31986: POP
31987: POP
// result := Replace ( result , 4 , tmp ) ;
31988: LD_ADDR_VAR 0 5
31992: PUSH
31993: LD_VAR 0 5
31997: PPUSH
31998: LD_INT 4
32000: PPUSH
32001: LD_VAR 0 8
32005: PPUSH
32006: CALL_OW 1
32010: ST_TO_ADDR
// end ;
32011: LD_VAR 0 5
32015: RET
// export function DangerAtRange ( unit , range ) ; begin
32016: LD_INT 0
32018: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32019: LD_ADDR_VAR 0 3
32023: PUSH
32024: LD_VAR 0 1
32028: PPUSH
32029: CALL_OW 255
32033: PPUSH
32034: LD_VAR 0 1
32038: PPUSH
32039: CALL_OW 250
32043: PPUSH
32044: LD_VAR 0 1
32048: PPUSH
32049: CALL_OW 251
32053: PPUSH
32054: LD_VAR 0 2
32058: PPUSH
32059: CALL 30313 0 4
32063: ST_TO_ADDR
// end ;
32064: LD_VAR 0 3
32068: RET
// export function DangerInArea ( side , area ) ; begin
32069: LD_INT 0
32071: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32072: LD_ADDR_VAR 0 3
32076: PUSH
32077: LD_VAR 0 2
32081: PPUSH
32082: LD_INT 81
32084: PUSH
32085: LD_VAR 0 1
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PPUSH
32094: CALL_OW 70
32098: ST_TO_ADDR
// end ;
32099: LD_VAR 0 3
32103: RET
// export function IsExtension ( b ) ; begin
32104: LD_INT 0
32106: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32107: LD_ADDR_VAR 0 2
32111: PUSH
32112: LD_VAR 0 1
32116: PUSH
32117: LD_INT 23
32119: PUSH
32120: LD_INT 20
32122: PUSH
32123: LD_INT 22
32125: PUSH
32126: LD_INT 17
32128: PUSH
32129: LD_INT 24
32131: PUSH
32132: LD_INT 21
32134: PUSH
32135: LD_INT 19
32137: PUSH
32138: LD_INT 16
32140: PUSH
32141: LD_INT 25
32143: PUSH
32144: LD_INT 18
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: IN
32159: ST_TO_ADDR
// end ;
32160: LD_VAR 0 2
32164: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32165: LD_INT 0
32167: PPUSH
32168: PPUSH
32169: PPUSH
// result := [ ] ;
32170: LD_ADDR_VAR 0 4
32174: PUSH
32175: EMPTY
32176: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32177: LD_ADDR_VAR 0 5
32181: PUSH
32182: LD_VAR 0 2
32186: PPUSH
32187: LD_INT 21
32189: PUSH
32190: LD_INT 3
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PPUSH
32197: CALL_OW 70
32201: ST_TO_ADDR
// if not tmp then
32202: LD_VAR 0 5
32206: NOT
32207: IFFALSE 32211
// exit ;
32209: GO 32275
// if checkLink then
32211: LD_VAR 0 3
32215: IFFALSE 32265
// begin for i in tmp do
32217: LD_ADDR_VAR 0 6
32221: PUSH
32222: LD_VAR 0 5
32226: PUSH
32227: FOR_IN
32228: IFFALSE 32263
// if GetBase ( i ) <> base then
32230: LD_VAR 0 6
32234: PPUSH
32235: CALL_OW 274
32239: PUSH
32240: LD_VAR 0 1
32244: NONEQUAL
32245: IFFALSE 32261
// ComLinkToBase ( base , i ) ;
32247: LD_VAR 0 1
32251: PPUSH
32252: LD_VAR 0 6
32256: PPUSH
32257: CALL_OW 169
32261: GO 32227
32263: POP
32264: POP
// end ; result := tmp ;
32265: LD_ADDR_VAR 0 4
32269: PUSH
32270: LD_VAR 0 5
32274: ST_TO_ADDR
// end ;
32275: LD_VAR 0 4
32279: RET
// export function ComComplete ( units , b ) ; var i ; begin
32280: LD_INT 0
32282: PPUSH
32283: PPUSH
// if not units then
32284: LD_VAR 0 1
32288: NOT
32289: IFFALSE 32293
// exit ;
32291: GO 32383
// for i in units do
32293: LD_ADDR_VAR 0 4
32297: PUSH
32298: LD_VAR 0 1
32302: PUSH
32303: FOR_IN
32304: IFFALSE 32381
// if BuildingStatus ( b ) = bs_build then
32306: LD_VAR 0 2
32310: PPUSH
32311: CALL_OW 461
32315: PUSH
32316: LD_INT 1
32318: EQUAL
32319: IFFALSE 32379
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32321: LD_VAR 0 4
32325: PPUSH
32326: LD_STRING h
32328: PUSH
32329: LD_VAR 0 2
32333: PPUSH
32334: CALL_OW 250
32338: PUSH
32339: LD_VAR 0 2
32343: PPUSH
32344: CALL_OW 251
32348: PUSH
32349: LD_VAR 0 2
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: PUSH
32372: EMPTY
32373: LIST
32374: PPUSH
32375: CALL_OW 446
32379: GO 32303
32381: POP
32382: POP
// end ;
32383: LD_VAR 0 3
32387: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32388: LD_INT 0
32390: PPUSH
32391: PPUSH
32392: PPUSH
32393: PPUSH
32394: PPUSH
32395: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32396: LD_VAR 0 1
32400: NOT
32401: PUSH
32402: LD_VAR 0 1
32406: PPUSH
32407: CALL_OW 263
32411: PUSH
32412: LD_INT 2
32414: NONEQUAL
32415: OR
32416: IFFALSE 32420
// exit ;
32418: GO 32736
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32420: LD_ADDR_VAR 0 6
32424: PUSH
32425: LD_INT 22
32427: PUSH
32428: LD_VAR 0 1
32432: PPUSH
32433: CALL_OW 255
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: LD_INT 30
32447: PUSH
32448: LD_INT 36
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 34
32457: PUSH
32458: LD_INT 31
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: LIST
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PPUSH
32474: CALL_OW 69
32478: ST_TO_ADDR
// if not tmp then
32479: LD_VAR 0 6
32483: NOT
32484: IFFALSE 32488
// exit ;
32486: GO 32736
// result := [ ] ;
32488: LD_ADDR_VAR 0 2
32492: PUSH
32493: EMPTY
32494: ST_TO_ADDR
// for i in tmp do
32495: LD_ADDR_VAR 0 3
32499: PUSH
32500: LD_VAR 0 6
32504: PUSH
32505: FOR_IN
32506: IFFALSE 32577
// begin t := UnitsInside ( i ) ;
32508: LD_ADDR_VAR 0 4
32512: PUSH
32513: LD_VAR 0 3
32517: PPUSH
32518: CALL_OW 313
32522: ST_TO_ADDR
// if t then
32523: LD_VAR 0 4
32527: IFFALSE 32575
// for j in t do
32529: LD_ADDR_VAR 0 7
32533: PUSH
32534: LD_VAR 0 4
32538: PUSH
32539: FOR_IN
32540: IFFALSE 32573
// result := Replace ( result , result + 1 , j ) ;
32542: LD_ADDR_VAR 0 2
32546: PUSH
32547: LD_VAR 0 2
32551: PPUSH
32552: LD_VAR 0 2
32556: PUSH
32557: LD_INT 1
32559: PLUS
32560: PPUSH
32561: LD_VAR 0 7
32565: PPUSH
32566: CALL_OW 1
32570: ST_TO_ADDR
32571: GO 32539
32573: POP
32574: POP
// end ;
32575: GO 32505
32577: POP
32578: POP
// if not result then
32579: LD_VAR 0 2
32583: NOT
32584: IFFALSE 32588
// exit ;
32586: GO 32736
// mech := result [ 1 ] ;
32588: LD_ADDR_VAR 0 5
32592: PUSH
32593: LD_VAR 0 2
32597: PUSH
32598: LD_INT 1
32600: ARRAY
32601: ST_TO_ADDR
// if result > 1 then
32602: LD_VAR 0 2
32606: PUSH
32607: LD_INT 1
32609: GREATER
32610: IFFALSE 32722
// begin for i = 2 to result do
32612: LD_ADDR_VAR 0 3
32616: PUSH
32617: DOUBLE
32618: LD_INT 2
32620: DEC
32621: ST_TO_ADDR
32622: LD_VAR 0 2
32626: PUSH
32627: FOR_TO
32628: IFFALSE 32720
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32630: LD_ADDR_VAR 0 4
32634: PUSH
32635: LD_VAR 0 2
32639: PUSH
32640: LD_VAR 0 3
32644: ARRAY
32645: PPUSH
32646: LD_INT 3
32648: PPUSH
32649: CALL_OW 259
32653: PUSH
32654: LD_VAR 0 2
32658: PUSH
32659: LD_VAR 0 3
32663: ARRAY
32664: PPUSH
32665: CALL_OW 432
32669: MINUS
32670: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32671: LD_VAR 0 4
32675: PUSH
32676: LD_VAR 0 5
32680: PPUSH
32681: LD_INT 3
32683: PPUSH
32684: CALL_OW 259
32688: PUSH
32689: LD_VAR 0 5
32693: PPUSH
32694: CALL_OW 432
32698: MINUS
32699: GREATEREQUAL
32700: IFFALSE 32718
// mech := result [ i ] ;
32702: LD_ADDR_VAR 0 5
32706: PUSH
32707: LD_VAR 0 2
32711: PUSH
32712: LD_VAR 0 3
32716: ARRAY
32717: ST_TO_ADDR
// end ;
32718: GO 32627
32720: POP
32721: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32722: LD_VAR 0 1
32726: PPUSH
32727: LD_VAR 0 5
32731: PPUSH
32732: CALL_OW 135
// end ;
32736: LD_VAR 0 2
32740: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32741: LD_INT 0
32743: PPUSH
32744: PPUSH
32745: PPUSH
32746: PPUSH
32747: PPUSH
32748: PPUSH
32749: PPUSH
32750: PPUSH
32751: PPUSH
32752: PPUSH
32753: PPUSH
32754: PPUSH
32755: PPUSH
// result := [ ] ;
32756: LD_ADDR_VAR 0 7
32760: PUSH
32761: EMPTY
32762: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32763: LD_VAR 0 1
32767: PPUSH
32768: CALL_OW 266
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: IN
32783: NOT
32784: IFFALSE 32788
// exit ;
32786: GO 34422
// if name then
32788: LD_VAR 0 3
32792: IFFALSE 32808
// SetBName ( base_dep , name ) ;
32794: LD_VAR 0 1
32798: PPUSH
32799: LD_VAR 0 3
32803: PPUSH
32804: CALL_OW 500
// base := GetBase ( base_dep ) ;
32808: LD_ADDR_VAR 0 15
32812: PUSH
32813: LD_VAR 0 1
32817: PPUSH
32818: CALL_OW 274
32822: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32823: LD_ADDR_VAR 0 16
32827: PUSH
32828: LD_VAR 0 1
32832: PPUSH
32833: CALL_OW 255
32837: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32838: LD_ADDR_VAR 0 17
32842: PUSH
32843: LD_VAR 0 1
32847: PPUSH
32848: CALL_OW 248
32852: ST_TO_ADDR
// if sources then
32853: LD_VAR 0 5
32857: IFFALSE 32904
// for i = 1 to 3 do
32859: LD_ADDR_VAR 0 8
32863: PUSH
32864: DOUBLE
32865: LD_INT 1
32867: DEC
32868: ST_TO_ADDR
32869: LD_INT 3
32871: PUSH
32872: FOR_TO
32873: IFFALSE 32902
// AddResourceType ( base , i , sources [ i ] ) ;
32875: LD_VAR 0 15
32879: PPUSH
32880: LD_VAR 0 8
32884: PPUSH
32885: LD_VAR 0 5
32889: PUSH
32890: LD_VAR 0 8
32894: ARRAY
32895: PPUSH
32896: CALL_OW 276
32900: GO 32872
32902: POP
32903: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32904: LD_ADDR_VAR 0 18
32908: PUSH
32909: LD_VAR 0 15
32913: PPUSH
32914: LD_VAR 0 2
32918: PPUSH
32919: LD_INT 1
32921: PPUSH
32922: CALL 32165 0 3
32926: ST_TO_ADDR
// InitHc ;
32927: CALL_OW 19
// InitUc ;
32931: CALL_OW 18
// uc_side := side ;
32935: LD_ADDR_OWVAR 20
32939: PUSH
32940: LD_VAR 0 16
32944: ST_TO_ADDR
// uc_nation := nation ;
32945: LD_ADDR_OWVAR 21
32949: PUSH
32950: LD_VAR 0 17
32954: ST_TO_ADDR
// if buildings then
32955: LD_VAR 0 18
32959: IFFALSE 34281
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32961: LD_ADDR_VAR 0 19
32965: PUSH
32966: LD_VAR 0 18
32970: PPUSH
32971: LD_INT 2
32973: PUSH
32974: LD_INT 30
32976: PUSH
32977: LD_INT 29
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 30
32986: PUSH
32987: LD_INT 30
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: PPUSH
32999: CALL_OW 72
33003: ST_TO_ADDR
// if tmp then
33004: LD_VAR 0 19
33008: IFFALSE 33056
// for i in tmp do
33010: LD_ADDR_VAR 0 8
33014: PUSH
33015: LD_VAR 0 19
33019: PUSH
33020: FOR_IN
33021: IFFALSE 33054
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33023: LD_VAR 0 8
33027: PPUSH
33028: CALL_OW 250
33032: PPUSH
33033: LD_VAR 0 8
33037: PPUSH
33038: CALL_OW 251
33042: PPUSH
33043: LD_VAR 0 16
33047: PPUSH
33048: CALL_OW 441
33052: GO 33020
33054: POP
33055: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33056: LD_VAR 0 18
33060: PPUSH
33061: LD_INT 2
33063: PUSH
33064: LD_INT 30
33066: PUSH
33067: LD_INT 32
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 30
33076: PUSH
33077: LD_INT 33
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: PPUSH
33089: CALL_OW 72
33093: IFFALSE 33181
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33095: LD_ADDR_VAR 0 8
33099: PUSH
33100: LD_VAR 0 18
33104: PPUSH
33105: LD_INT 2
33107: PUSH
33108: LD_INT 30
33110: PUSH
33111: LD_INT 32
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 30
33120: PUSH
33121: LD_INT 33
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: PPUSH
33133: CALL_OW 72
33137: PUSH
33138: FOR_IN
33139: IFFALSE 33179
// begin if not GetBWeapon ( i ) then
33141: LD_VAR 0 8
33145: PPUSH
33146: CALL_OW 269
33150: NOT
33151: IFFALSE 33177
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33153: LD_VAR 0 8
33157: PPUSH
33158: LD_VAR 0 8
33162: PPUSH
33163: LD_VAR 0 2
33167: PPUSH
33168: CALL 34427 0 2
33172: PPUSH
33173: CALL_OW 431
// end ;
33177: GO 33138
33179: POP
33180: POP
// end ; for i = 1 to personel do
33181: LD_ADDR_VAR 0 8
33185: PUSH
33186: DOUBLE
33187: LD_INT 1
33189: DEC
33190: ST_TO_ADDR
33191: LD_VAR 0 6
33195: PUSH
33196: FOR_TO
33197: IFFALSE 34261
// begin if i > 4 then
33199: LD_VAR 0 8
33203: PUSH
33204: LD_INT 4
33206: GREATER
33207: IFFALSE 33211
// break ;
33209: GO 34261
// case i of 1 :
33211: LD_VAR 0 8
33215: PUSH
33216: LD_INT 1
33218: DOUBLE
33219: EQUAL
33220: IFTRUE 33224
33222: GO 33304
33224: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33225: LD_ADDR_VAR 0 12
33229: PUSH
33230: LD_VAR 0 18
33234: PPUSH
33235: LD_INT 22
33237: PUSH
33238: LD_VAR 0 16
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 58
33249: PUSH
33250: EMPTY
33251: LIST
33252: PUSH
33253: LD_INT 2
33255: PUSH
33256: LD_INT 30
33258: PUSH
33259: LD_INT 32
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 30
33268: PUSH
33269: LD_INT 4
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 30
33278: PUSH
33279: LD_INT 5
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: PPUSH
33297: CALL_OW 72
33301: ST_TO_ADDR
33302: GO 33526
33304: LD_INT 2
33306: DOUBLE
33307: EQUAL
33308: IFTRUE 33312
33310: GO 33374
33312: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33313: LD_ADDR_VAR 0 12
33317: PUSH
33318: LD_VAR 0 18
33322: PPUSH
33323: LD_INT 22
33325: PUSH
33326: LD_VAR 0 16
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: LD_INT 30
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 30
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: LIST
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PPUSH
33367: CALL_OW 72
33371: ST_TO_ADDR
33372: GO 33526
33374: LD_INT 3
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33382
33380: GO 33444
33382: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33383: LD_ADDR_VAR 0 12
33387: PUSH
33388: LD_VAR 0 18
33392: PPUSH
33393: LD_INT 22
33395: PUSH
33396: LD_VAR 0 16
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 2
33407: PUSH
33408: LD_INT 30
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 30
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PPUSH
33437: CALL_OW 72
33441: ST_TO_ADDR
33442: GO 33526
33444: LD_INT 4
33446: DOUBLE
33447: EQUAL
33448: IFTRUE 33452
33450: GO 33525
33452: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33453: LD_ADDR_VAR 0 12
33457: PUSH
33458: LD_VAR 0 18
33462: PPUSH
33463: LD_INT 22
33465: PUSH
33466: LD_VAR 0 16
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 2
33477: PUSH
33478: LD_INT 30
33480: PUSH
33481: LD_INT 6
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 30
33490: PUSH
33491: LD_INT 7
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 30
33500: PUSH
33501: LD_INT 8
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PPUSH
33518: CALL_OW 72
33522: ST_TO_ADDR
33523: GO 33526
33525: POP
// if i = 1 then
33526: LD_VAR 0 8
33530: PUSH
33531: LD_INT 1
33533: EQUAL
33534: IFFALSE 33645
// begin tmp := [ ] ;
33536: LD_ADDR_VAR 0 19
33540: PUSH
33541: EMPTY
33542: ST_TO_ADDR
// for j in f do
33543: LD_ADDR_VAR 0 9
33547: PUSH
33548: LD_VAR 0 12
33552: PUSH
33553: FOR_IN
33554: IFFALSE 33627
// if GetBType ( j ) = b_bunker then
33556: LD_VAR 0 9
33560: PPUSH
33561: CALL_OW 266
33565: PUSH
33566: LD_INT 32
33568: EQUAL
33569: IFFALSE 33596
// tmp := Insert ( tmp , 1 , j ) else
33571: LD_ADDR_VAR 0 19
33575: PUSH
33576: LD_VAR 0 19
33580: PPUSH
33581: LD_INT 1
33583: PPUSH
33584: LD_VAR 0 9
33588: PPUSH
33589: CALL_OW 2
33593: ST_TO_ADDR
33594: GO 33625
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33596: LD_ADDR_VAR 0 19
33600: PUSH
33601: LD_VAR 0 19
33605: PPUSH
33606: LD_VAR 0 19
33610: PUSH
33611: LD_INT 1
33613: PLUS
33614: PPUSH
33615: LD_VAR 0 9
33619: PPUSH
33620: CALL_OW 2
33624: ST_TO_ADDR
33625: GO 33553
33627: POP
33628: POP
// if tmp then
33629: LD_VAR 0 19
33633: IFFALSE 33645
// f := tmp ;
33635: LD_ADDR_VAR 0 12
33639: PUSH
33640: LD_VAR 0 19
33644: ST_TO_ADDR
// end ; x := personel [ i ] ;
33645: LD_ADDR_VAR 0 13
33649: PUSH
33650: LD_VAR 0 6
33654: PUSH
33655: LD_VAR 0 8
33659: ARRAY
33660: ST_TO_ADDR
// if x = - 1 then
33661: LD_VAR 0 13
33665: PUSH
33666: LD_INT 1
33668: NEG
33669: EQUAL
33670: IFFALSE 33879
// begin for j in f do
33672: LD_ADDR_VAR 0 9
33676: PUSH
33677: LD_VAR 0 12
33681: PUSH
33682: FOR_IN
33683: IFFALSE 33875
// repeat InitHc ;
33685: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33689: LD_VAR 0 9
33693: PPUSH
33694: CALL_OW 266
33698: PUSH
33699: LD_INT 5
33701: EQUAL
33702: IFFALSE 33772
// begin if UnitsInside ( j ) < 3 then
33704: LD_VAR 0 9
33708: PPUSH
33709: CALL_OW 313
33713: PUSH
33714: LD_INT 3
33716: LESS
33717: IFFALSE 33753
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33719: LD_INT 0
33721: PPUSH
33722: LD_INT 5
33724: PUSH
33725: LD_INT 8
33727: PUSH
33728: LD_INT 9
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: LIST
33735: PUSH
33736: LD_VAR 0 17
33740: ARRAY
33741: PPUSH
33742: LD_VAR 0 4
33746: PPUSH
33747: CALL_OW 380
33751: GO 33770
// PrepareHuman ( false , i , skill ) ;
33753: LD_INT 0
33755: PPUSH
33756: LD_VAR 0 8
33760: PPUSH
33761: LD_VAR 0 4
33765: PPUSH
33766: CALL_OW 380
// end else
33770: GO 33789
// PrepareHuman ( false , i , skill ) ;
33772: LD_INT 0
33774: PPUSH
33775: LD_VAR 0 8
33779: PPUSH
33780: LD_VAR 0 4
33784: PPUSH
33785: CALL_OW 380
// un := CreateHuman ;
33789: LD_ADDR_VAR 0 14
33793: PUSH
33794: CALL_OW 44
33798: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33799: LD_ADDR_VAR 0 7
33803: PUSH
33804: LD_VAR 0 7
33808: PPUSH
33809: LD_INT 1
33811: PPUSH
33812: LD_VAR 0 14
33816: PPUSH
33817: CALL_OW 2
33821: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33822: LD_VAR 0 14
33826: PPUSH
33827: LD_VAR 0 9
33831: PPUSH
33832: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33836: LD_VAR 0 9
33840: PPUSH
33841: CALL_OW 313
33845: PUSH
33846: LD_INT 6
33848: EQUAL
33849: PUSH
33850: LD_VAR 0 9
33854: PPUSH
33855: CALL_OW 266
33859: PUSH
33860: LD_INT 32
33862: PUSH
33863: LD_INT 31
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: IN
33870: OR
33871: IFFALSE 33685
33873: GO 33682
33875: POP
33876: POP
// end else
33877: GO 34259
// for j = 1 to x do
33879: LD_ADDR_VAR 0 9
33883: PUSH
33884: DOUBLE
33885: LD_INT 1
33887: DEC
33888: ST_TO_ADDR
33889: LD_VAR 0 13
33893: PUSH
33894: FOR_TO
33895: IFFALSE 34257
// begin InitHc ;
33897: CALL_OW 19
// if not f then
33901: LD_VAR 0 12
33905: NOT
33906: IFFALSE 33995
// begin PrepareHuman ( false , i , skill ) ;
33908: LD_INT 0
33910: PPUSH
33911: LD_VAR 0 8
33915: PPUSH
33916: LD_VAR 0 4
33920: PPUSH
33921: CALL_OW 380
// un := CreateHuman ;
33925: LD_ADDR_VAR 0 14
33929: PUSH
33930: CALL_OW 44
33934: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33935: LD_ADDR_VAR 0 7
33939: PUSH
33940: LD_VAR 0 7
33944: PPUSH
33945: LD_INT 1
33947: PPUSH
33948: LD_VAR 0 14
33952: PPUSH
33953: CALL_OW 2
33957: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33958: LD_VAR 0 14
33962: PPUSH
33963: LD_VAR 0 1
33967: PPUSH
33968: CALL_OW 250
33972: PPUSH
33973: LD_VAR 0 1
33977: PPUSH
33978: CALL_OW 251
33982: PPUSH
33983: LD_INT 10
33985: PPUSH
33986: LD_INT 0
33988: PPUSH
33989: CALL_OW 50
// continue ;
33993: GO 33894
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33995: LD_VAR 0 12
33999: PUSH
34000: LD_INT 1
34002: ARRAY
34003: PPUSH
34004: CALL_OW 313
34008: PUSH
34009: LD_VAR 0 12
34013: PUSH
34014: LD_INT 1
34016: ARRAY
34017: PPUSH
34018: CALL_OW 266
34022: PUSH
34023: LD_INT 32
34025: PUSH
34026: LD_INT 31
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: IN
34033: AND
34034: PUSH
34035: LD_VAR 0 12
34039: PUSH
34040: LD_INT 1
34042: ARRAY
34043: PPUSH
34044: CALL_OW 313
34048: PUSH
34049: LD_INT 6
34051: EQUAL
34052: OR
34053: IFFALSE 34073
// f := Delete ( f , 1 ) ;
34055: LD_ADDR_VAR 0 12
34059: PUSH
34060: LD_VAR 0 12
34064: PPUSH
34065: LD_INT 1
34067: PPUSH
34068: CALL_OW 3
34072: ST_TO_ADDR
// if not f then
34073: LD_VAR 0 12
34077: NOT
34078: IFFALSE 34096
// begin x := x + 2 ;
34080: LD_ADDR_VAR 0 13
34084: PUSH
34085: LD_VAR 0 13
34089: PUSH
34090: LD_INT 2
34092: PLUS
34093: ST_TO_ADDR
// continue ;
34094: GO 33894
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34096: LD_VAR 0 12
34100: PUSH
34101: LD_INT 1
34103: ARRAY
34104: PPUSH
34105: CALL_OW 266
34109: PUSH
34110: LD_INT 5
34112: EQUAL
34113: IFFALSE 34187
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34115: LD_VAR 0 12
34119: PUSH
34120: LD_INT 1
34122: ARRAY
34123: PPUSH
34124: CALL_OW 313
34128: PUSH
34129: LD_INT 3
34131: LESS
34132: IFFALSE 34168
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34134: LD_INT 0
34136: PPUSH
34137: LD_INT 5
34139: PUSH
34140: LD_INT 8
34142: PUSH
34143: LD_INT 9
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: PUSH
34151: LD_VAR 0 17
34155: ARRAY
34156: PPUSH
34157: LD_VAR 0 4
34161: PPUSH
34162: CALL_OW 380
34166: GO 34185
// PrepareHuman ( false , i , skill ) ;
34168: LD_INT 0
34170: PPUSH
34171: LD_VAR 0 8
34175: PPUSH
34176: LD_VAR 0 4
34180: PPUSH
34181: CALL_OW 380
// end else
34185: GO 34204
// PrepareHuman ( false , i , skill ) ;
34187: LD_INT 0
34189: PPUSH
34190: LD_VAR 0 8
34194: PPUSH
34195: LD_VAR 0 4
34199: PPUSH
34200: CALL_OW 380
// un := CreateHuman ;
34204: LD_ADDR_VAR 0 14
34208: PUSH
34209: CALL_OW 44
34213: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34214: LD_ADDR_VAR 0 7
34218: PUSH
34219: LD_VAR 0 7
34223: PPUSH
34224: LD_INT 1
34226: PPUSH
34227: LD_VAR 0 14
34231: PPUSH
34232: CALL_OW 2
34236: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34237: LD_VAR 0 14
34241: PPUSH
34242: LD_VAR 0 12
34246: PUSH
34247: LD_INT 1
34249: ARRAY
34250: PPUSH
34251: CALL_OW 52
// end ;
34255: GO 33894
34257: POP
34258: POP
// end ;
34259: GO 33196
34261: POP
34262: POP
// result := result ^ buildings ;
34263: LD_ADDR_VAR 0 7
34267: PUSH
34268: LD_VAR 0 7
34272: PUSH
34273: LD_VAR 0 18
34277: ADD
34278: ST_TO_ADDR
// end else
34279: GO 34422
// begin for i = 1 to personel do
34281: LD_ADDR_VAR 0 8
34285: PUSH
34286: DOUBLE
34287: LD_INT 1
34289: DEC
34290: ST_TO_ADDR
34291: LD_VAR 0 6
34295: PUSH
34296: FOR_TO
34297: IFFALSE 34420
// begin if i > 4 then
34299: LD_VAR 0 8
34303: PUSH
34304: LD_INT 4
34306: GREATER
34307: IFFALSE 34311
// break ;
34309: GO 34420
// x := personel [ i ] ;
34311: LD_ADDR_VAR 0 13
34315: PUSH
34316: LD_VAR 0 6
34320: PUSH
34321: LD_VAR 0 8
34325: ARRAY
34326: ST_TO_ADDR
// if x = - 1 then
34327: LD_VAR 0 13
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: EQUAL
34336: IFFALSE 34340
// continue ;
34338: GO 34296
// PrepareHuman ( false , i , skill ) ;
34340: LD_INT 0
34342: PPUSH
34343: LD_VAR 0 8
34347: PPUSH
34348: LD_VAR 0 4
34352: PPUSH
34353: CALL_OW 380
// un := CreateHuman ;
34357: LD_ADDR_VAR 0 14
34361: PUSH
34362: CALL_OW 44
34366: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34367: LD_VAR 0 14
34371: PPUSH
34372: LD_VAR 0 1
34376: PPUSH
34377: CALL_OW 250
34381: PPUSH
34382: LD_VAR 0 1
34386: PPUSH
34387: CALL_OW 251
34391: PPUSH
34392: LD_INT 10
34394: PPUSH
34395: LD_INT 0
34397: PPUSH
34398: CALL_OW 50
// result := result ^ un ;
34402: LD_ADDR_VAR 0 7
34406: PUSH
34407: LD_VAR 0 7
34411: PUSH
34412: LD_VAR 0 14
34416: ADD
34417: ST_TO_ADDR
// end ;
34418: GO 34296
34420: POP
34421: POP
// end ; end ;
34422: LD_VAR 0 7
34426: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34427: LD_INT 0
34429: PPUSH
34430: PPUSH
34431: PPUSH
34432: PPUSH
34433: PPUSH
34434: PPUSH
34435: PPUSH
34436: PPUSH
34437: PPUSH
34438: PPUSH
34439: PPUSH
34440: PPUSH
34441: PPUSH
34442: PPUSH
34443: PPUSH
34444: PPUSH
// result := false ;
34445: LD_ADDR_VAR 0 3
34449: PUSH
34450: LD_INT 0
34452: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34453: LD_VAR 0 1
34457: NOT
34458: PUSH
34459: LD_VAR 0 1
34463: PPUSH
34464: CALL_OW 266
34468: PUSH
34469: LD_INT 32
34471: PUSH
34472: LD_INT 33
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: IN
34479: NOT
34480: OR
34481: IFFALSE 34485
// exit ;
34483: GO 35594
// nat := GetNation ( tower ) ;
34485: LD_ADDR_VAR 0 12
34489: PUSH
34490: LD_VAR 0 1
34494: PPUSH
34495: CALL_OW 248
34499: ST_TO_ADDR
// side := GetSide ( tower ) ;
34500: LD_ADDR_VAR 0 16
34504: PUSH
34505: LD_VAR 0 1
34509: PPUSH
34510: CALL_OW 255
34514: ST_TO_ADDR
// x := GetX ( tower ) ;
34515: LD_ADDR_VAR 0 10
34519: PUSH
34520: LD_VAR 0 1
34524: PPUSH
34525: CALL_OW 250
34529: ST_TO_ADDR
// y := GetY ( tower ) ;
34530: LD_ADDR_VAR 0 11
34534: PUSH
34535: LD_VAR 0 1
34539: PPUSH
34540: CALL_OW 251
34544: ST_TO_ADDR
// if not x or not y then
34545: LD_VAR 0 10
34549: NOT
34550: PUSH
34551: LD_VAR 0 11
34555: NOT
34556: OR
34557: IFFALSE 34561
// exit ;
34559: GO 35594
// weapon := 0 ;
34561: LD_ADDR_VAR 0 18
34565: PUSH
34566: LD_INT 0
34568: ST_TO_ADDR
// fac_list := [ ] ;
34569: LD_ADDR_VAR 0 17
34573: PUSH
34574: EMPTY
34575: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34576: LD_ADDR_VAR 0 6
34580: PUSH
34581: LD_VAR 0 1
34585: PPUSH
34586: CALL_OW 274
34590: PPUSH
34591: LD_VAR 0 2
34595: PPUSH
34596: LD_INT 0
34598: PPUSH
34599: CALL 32165 0 3
34603: PPUSH
34604: LD_INT 30
34606: PUSH
34607: LD_INT 3
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PPUSH
34614: CALL_OW 72
34618: ST_TO_ADDR
// if not factories then
34619: LD_VAR 0 6
34623: NOT
34624: IFFALSE 34628
// exit ;
34626: GO 35594
// for i in factories do
34628: LD_ADDR_VAR 0 8
34632: PUSH
34633: LD_VAR 0 6
34637: PUSH
34638: FOR_IN
34639: IFFALSE 34664
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34641: LD_ADDR_VAR 0 17
34645: PUSH
34646: LD_VAR 0 17
34650: PUSH
34651: LD_VAR 0 8
34655: PPUSH
34656: CALL_OW 478
34660: UNION
34661: ST_TO_ADDR
34662: GO 34638
34664: POP
34665: POP
// if not fac_list then
34666: LD_VAR 0 17
34670: NOT
34671: IFFALSE 34675
// exit ;
34673: GO 35594
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34675: LD_ADDR_VAR 0 5
34679: PUSH
34680: LD_INT 4
34682: PUSH
34683: LD_INT 5
34685: PUSH
34686: LD_INT 9
34688: PUSH
34689: LD_INT 10
34691: PUSH
34692: LD_INT 6
34694: PUSH
34695: LD_INT 7
34697: PUSH
34698: LD_INT 11
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 27
34712: PUSH
34713: LD_INT 28
34715: PUSH
34716: LD_INT 26
34718: PUSH
34719: LD_INT 30
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 43
34730: PUSH
34731: LD_INT 44
34733: PUSH
34734: LD_INT 46
34736: PUSH
34737: LD_INT 45
34739: PUSH
34740: LD_INT 47
34742: PUSH
34743: LD_INT 49
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: LIST
34758: PUSH
34759: LD_VAR 0 12
34763: ARRAY
34764: ST_TO_ADDR
// list := list isect fac_list ;
34765: LD_ADDR_VAR 0 5
34769: PUSH
34770: LD_VAR 0 5
34774: PUSH
34775: LD_VAR 0 17
34779: ISECT
34780: ST_TO_ADDR
// if not list then
34781: LD_VAR 0 5
34785: NOT
34786: IFFALSE 34790
// exit ;
34788: GO 35594
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34790: LD_VAR 0 12
34794: PUSH
34795: LD_INT 3
34797: EQUAL
34798: PUSH
34799: LD_INT 49
34801: PUSH
34802: LD_VAR 0 5
34806: IN
34807: AND
34808: PUSH
34809: LD_INT 31
34811: PPUSH
34812: LD_VAR 0 16
34816: PPUSH
34817: CALL_OW 321
34821: PUSH
34822: LD_INT 2
34824: EQUAL
34825: AND
34826: IFFALSE 34886
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34828: LD_INT 22
34830: PUSH
34831: LD_VAR 0 16
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 35
34842: PUSH
34843: LD_INT 49
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 91
34852: PUSH
34853: LD_VAR 0 1
34857: PUSH
34858: LD_INT 10
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: LIST
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: LIST
34870: PPUSH
34871: CALL_OW 69
34875: NOT
34876: IFFALSE 34886
// weapon := ru_time_lapser ;
34878: LD_ADDR_VAR 0 18
34882: PUSH
34883: LD_INT 49
34885: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34886: LD_VAR 0 12
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: LD_INT 2
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: IN
34901: PUSH
34902: LD_INT 11
34904: PUSH
34905: LD_VAR 0 5
34909: IN
34910: PUSH
34911: LD_INT 30
34913: PUSH
34914: LD_VAR 0 5
34918: IN
34919: OR
34920: AND
34921: PUSH
34922: LD_INT 6
34924: PPUSH
34925: LD_VAR 0 16
34929: PPUSH
34930: CALL_OW 321
34934: PUSH
34935: LD_INT 2
34937: EQUAL
34938: AND
34939: IFFALSE 35104
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34941: LD_INT 22
34943: PUSH
34944: LD_VAR 0 16
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 2
34955: PUSH
34956: LD_INT 35
34958: PUSH
34959: LD_INT 11
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 35
34968: PUSH
34969: LD_INT 30
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 91
34983: PUSH
34984: LD_VAR 0 1
34988: PUSH
34989: LD_INT 18
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: LIST
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: LIST
35001: PPUSH
35002: CALL_OW 69
35006: NOT
35007: PUSH
35008: LD_INT 22
35010: PUSH
35011: LD_VAR 0 16
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 30
35025: PUSH
35026: LD_INT 32
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 30
35035: PUSH
35036: LD_INT 33
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 91
35050: PUSH
35051: LD_VAR 0 1
35055: PUSH
35056: LD_INT 12
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: LIST
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: LIST
35068: PUSH
35069: EMPTY
35070: LIST
35071: PPUSH
35072: CALL_OW 69
35076: PUSH
35077: LD_INT 2
35079: GREATER
35080: AND
35081: IFFALSE 35104
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35083: LD_ADDR_VAR 0 18
35087: PUSH
35088: LD_INT 11
35090: PUSH
35091: LD_INT 30
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_VAR 0 12
35102: ARRAY
35103: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35104: LD_VAR 0 18
35108: NOT
35109: PUSH
35110: LD_INT 40
35112: PPUSH
35113: LD_VAR 0 16
35117: PPUSH
35118: CALL_OW 321
35122: PUSH
35123: LD_INT 2
35125: EQUAL
35126: AND
35127: PUSH
35128: LD_INT 7
35130: PUSH
35131: LD_VAR 0 5
35135: IN
35136: PUSH
35137: LD_INT 28
35139: PUSH
35140: LD_VAR 0 5
35144: IN
35145: OR
35146: PUSH
35147: LD_INT 45
35149: PUSH
35150: LD_VAR 0 5
35154: IN
35155: OR
35156: AND
35157: IFFALSE 35411
// begin hex := GetHexInfo ( x , y ) ;
35159: LD_ADDR_VAR 0 4
35163: PUSH
35164: LD_VAR 0 10
35168: PPUSH
35169: LD_VAR 0 11
35173: PPUSH
35174: CALL_OW 546
35178: ST_TO_ADDR
// if hex [ 1 ] then
35179: LD_VAR 0 4
35183: PUSH
35184: LD_INT 1
35186: ARRAY
35187: IFFALSE 35191
// exit ;
35189: GO 35594
// height := hex [ 2 ] ;
35191: LD_ADDR_VAR 0 15
35195: PUSH
35196: LD_VAR 0 4
35200: PUSH
35201: LD_INT 2
35203: ARRAY
35204: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35205: LD_ADDR_VAR 0 14
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: LD_INT 2
35215: PUSH
35216: LD_INT 3
35218: PUSH
35219: LD_INT 5
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: ST_TO_ADDR
// for i in tmp do
35228: LD_ADDR_VAR 0 8
35232: PUSH
35233: LD_VAR 0 14
35237: PUSH
35238: FOR_IN
35239: IFFALSE 35409
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35241: LD_ADDR_VAR 0 9
35245: PUSH
35246: LD_VAR 0 10
35250: PPUSH
35251: LD_VAR 0 8
35255: PPUSH
35256: LD_INT 5
35258: PPUSH
35259: CALL_OW 272
35263: PUSH
35264: LD_VAR 0 11
35268: PPUSH
35269: LD_VAR 0 8
35273: PPUSH
35274: LD_INT 5
35276: PPUSH
35277: CALL_OW 273
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35286: LD_VAR 0 9
35290: PUSH
35291: LD_INT 1
35293: ARRAY
35294: PPUSH
35295: LD_VAR 0 9
35299: PUSH
35300: LD_INT 2
35302: ARRAY
35303: PPUSH
35304: CALL_OW 488
35308: IFFALSE 35407
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35310: LD_ADDR_VAR 0 4
35314: PUSH
35315: LD_VAR 0 9
35319: PUSH
35320: LD_INT 1
35322: ARRAY
35323: PPUSH
35324: LD_VAR 0 9
35328: PUSH
35329: LD_INT 2
35331: ARRAY
35332: PPUSH
35333: CALL_OW 546
35337: ST_TO_ADDR
// if hex [ 1 ] then
35338: LD_VAR 0 4
35342: PUSH
35343: LD_INT 1
35345: ARRAY
35346: IFFALSE 35350
// continue ;
35348: GO 35238
// h := hex [ 2 ] ;
35350: LD_ADDR_VAR 0 13
35354: PUSH
35355: LD_VAR 0 4
35359: PUSH
35360: LD_INT 2
35362: ARRAY
35363: ST_TO_ADDR
// if h + 7 < height then
35364: LD_VAR 0 13
35368: PUSH
35369: LD_INT 7
35371: PLUS
35372: PUSH
35373: LD_VAR 0 15
35377: LESS
35378: IFFALSE 35407
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35380: LD_ADDR_VAR 0 18
35384: PUSH
35385: LD_INT 7
35387: PUSH
35388: LD_INT 28
35390: PUSH
35391: LD_INT 45
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: PUSH
35399: LD_VAR 0 12
35403: ARRAY
35404: ST_TO_ADDR
// break ;
35405: GO 35409
// end ; end ; end ;
35407: GO 35238
35409: POP
35410: POP
// end ; if not weapon then
35411: LD_VAR 0 18
35415: NOT
35416: IFFALSE 35476
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35418: LD_ADDR_VAR 0 5
35422: PUSH
35423: LD_VAR 0 5
35427: PUSH
35428: LD_INT 11
35430: PUSH
35431: LD_INT 30
35433: PUSH
35434: LD_INT 49
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: DIFF
35442: ST_TO_ADDR
// if not list then
35443: LD_VAR 0 5
35447: NOT
35448: IFFALSE 35452
// exit ;
35450: GO 35594
// weapon := list [ rand ( 1 , list ) ] ;
35452: LD_ADDR_VAR 0 18
35456: PUSH
35457: LD_VAR 0 5
35461: PUSH
35462: LD_INT 1
35464: PPUSH
35465: LD_VAR 0 5
35469: PPUSH
35470: CALL_OW 12
35474: ARRAY
35475: ST_TO_ADDR
// end ; if weapon then
35476: LD_VAR 0 18
35480: IFFALSE 35594
// begin tmp := CostOfWeapon ( weapon ) ;
35482: LD_ADDR_VAR 0 14
35486: PUSH
35487: LD_VAR 0 18
35491: PPUSH
35492: CALL_OW 451
35496: ST_TO_ADDR
// j := GetBase ( tower ) ;
35497: LD_ADDR_VAR 0 9
35501: PUSH
35502: LD_VAR 0 1
35506: PPUSH
35507: CALL_OW 274
35511: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35512: LD_VAR 0 9
35516: PPUSH
35517: LD_INT 1
35519: PPUSH
35520: CALL_OW 275
35524: PUSH
35525: LD_VAR 0 14
35529: PUSH
35530: LD_INT 1
35532: ARRAY
35533: GREATEREQUAL
35534: PUSH
35535: LD_VAR 0 9
35539: PPUSH
35540: LD_INT 2
35542: PPUSH
35543: CALL_OW 275
35547: PUSH
35548: LD_VAR 0 14
35552: PUSH
35553: LD_INT 2
35555: ARRAY
35556: GREATEREQUAL
35557: AND
35558: PUSH
35559: LD_VAR 0 9
35563: PPUSH
35564: LD_INT 3
35566: PPUSH
35567: CALL_OW 275
35571: PUSH
35572: LD_VAR 0 14
35576: PUSH
35577: LD_INT 3
35579: ARRAY
35580: GREATEREQUAL
35581: AND
35582: IFFALSE 35594
// result := weapon ;
35584: LD_ADDR_VAR 0 3
35588: PUSH
35589: LD_VAR 0 18
35593: ST_TO_ADDR
// end ; end ;
35594: LD_VAR 0 3
35598: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35599: LD_INT 0
35601: PPUSH
35602: PPUSH
// result := true ;
35603: LD_ADDR_VAR 0 3
35607: PUSH
35608: LD_INT 1
35610: ST_TO_ADDR
// if array1 = array2 then
35611: LD_VAR 0 1
35615: PUSH
35616: LD_VAR 0 2
35620: EQUAL
35621: IFFALSE 35681
// begin for i = 1 to array1 do
35623: LD_ADDR_VAR 0 4
35627: PUSH
35628: DOUBLE
35629: LD_INT 1
35631: DEC
35632: ST_TO_ADDR
35633: LD_VAR 0 1
35637: PUSH
35638: FOR_TO
35639: IFFALSE 35677
// if array1 [ i ] <> array2 [ i ] then
35641: LD_VAR 0 1
35645: PUSH
35646: LD_VAR 0 4
35650: ARRAY
35651: PUSH
35652: LD_VAR 0 2
35656: PUSH
35657: LD_VAR 0 4
35661: ARRAY
35662: NONEQUAL
35663: IFFALSE 35675
// begin result := false ;
35665: LD_ADDR_VAR 0 3
35669: PUSH
35670: LD_INT 0
35672: ST_TO_ADDR
// break ;
35673: GO 35677
// end ;
35675: GO 35638
35677: POP
35678: POP
// end else
35679: GO 35689
// result := false ;
35681: LD_ADDR_VAR 0 3
35685: PUSH
35686: LD_INT 0
35688: ST_TO_ADDR
// end ;
35689: LD_VAR 0 3
35693: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35694: LD_INT 0
35696: PPUSH
35697: PPUSH
// if not array1 or not array2 then
35698: LD_VAR 0 1
35702: NOT
35703: PUSH
35704: LD_VAR 0 2
35708: NOT
35709: OR
35710: IFFALSE 35714
// exit ;
35712: GO 35778
// result := true ;
35714: LD_ADDR_VAR 0 3
35718: PUSH
35719: LD_INT 1
35721: ST_TO_ADDR
// for i = 1 to array1 do
35722: LD_ADDR_VAR 0 4
35726: PUSH
35727: DOUBLE
35728: LD_INT 1
35730: DEC
35731: ST_TO_ADDR
35732: LD_VAR 0 1
35736: PUSH
35737: FOR_TO
35738: IFFALSE 35776
// if array1 [ i ] <> array2 [ i ] then
35740: LD_VAR 0 1
35744: PUSH
35745: LD_VAR 0 4
35749: ARRAY
35750: PUSH
35751: LD_VAR 0 2
35755: PUSH
35756: LD_VAR 0 4
35760: ARRAY
35761: NONEQUAL
35762: IFFALSE 35774
// begin result := false ;
35764: LD_ADDR_VAR 0 3
35768: PUSH
35769: LD_INT 0
35771: ST_TO_ADDR
// break ;
35772: GO 35776
// end ;
35774: GO 35737
35776: POP
35777: POP
// end ;
35778: LD_VAR 0 3
35782: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35783: LD_INT 0
35785: PPUSH
35786: PPUSH
35787: PPUSH
// pom := GetBase ( fac ) ;
35788: LD_ADDR_VAR 0 5
35792: PUSH
35793: LD_VAR 0 1
35797: PPUSH
35798: CALL_OW 274
35802: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35803: LD_ADDR_VAR 0 4
35807: PUSH
35808: LD_VAR 0 2
35812: PUSH
35813: LD_INT 1
35815: ARRAY
35816: PPUSH
35817: LD_VAR 0 2
35821: PUSH
35822: LD_INT 2
35824: ARRAY
35825: PPUSH
35826: LD_VAR 0 2
35830: PUSH
35831: LD_INT 3
35833: ARRAY
35834: PPUSH
35835: LD_VAR 0 2
35839: PUSH
35840: LD_INT 4
35842: ARRAY
35843: PPUSH
35844: CALL_OW 449
35848: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35849: LD_ADDR_VAR 0 3
35853: PUSH
35854: LD_VAR 0 5
35858: PPUSH
35859: LD_INT 1
35861: PPUSH
35862: CALL_OW 275
35866: PUSH
35867: LD_VAR 0 4
35871: PUSH
35872: LD_INT 1
35874: ARRAY
35875: GREATEREQUAL
35876: PUSH
35877: LD_VAR 0 5
35881: PPUSH
35882: LD_INT 2
35884: PPUSH
35885: CALL_OW 275
35889: PUSH
35890: LD_VAR 0 4
35894: PUSH
35895: LD_INT 2
35897: ARRAY
35898: GREATEREQUAL
35899: AND
35900: PUSH
35901: LD_VAR 0 5
35905: PPUSH
35906: LD_INT 3
35908: PPUSH
35909: CALL_OW 275
35913: PUSH
35914: LD_VAR 0 4
35918: PUSH
35919: LD_INT 3
35921: ARRAY
35922: GREATEREQUAL
35923: AND
35924: ST_TO_ADDR
// end ;
35925: LD_VAR 0 3
35929: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35930: LD_INT 0
35932: PPUSH
35933: PPUSH
35934: PPUSH
35935: PPUSH
// pom := GetBase ( building ) ;
35936: LD_ADDR_VAR 0 3
35940: PUSH
35941: LD_VAR 0 1
35945: PPUSH
35946: CALL_OW 274
35950: ST_TO_ADDR
// if not pom then
35951: LD_VAR 0 3
35955: NOT
35956: IFFALSE 35960
// exit ;
35958: GO 36130
// btype := GetBType ( building ) ;
35960: LD_ADDR_VAR 0 5
35964: PUSH
35965: LD_VAR 0 1
35969: PPUSH
35970: CALL_OW 266
35974: ST_TO_ADDR
// if btype = b_armoury then
35975: LD_VAR 0 5
35979: PUSH
35980: LD_INT 4
35982: EQUAL
35983: IFFALSE 35993
// btype := b_barracks ;
35985: LD_ADDR_VAR 0 5
35989: PUSH
35990: LD_INT 5
35992: ST_TO_ADDR
// if btype = b_depot then
35993: LD_VAR 0 5
35997: PUSH
35998: LD_INT 0
36000: EQUAL
36001: IFFALSE 36011
// btype := b_warehouse ;
36003: LD_ADDR_VAR 0 5
36007: PUSH
36008: LD_INT 1
36010: ST_TO_ADDR
// if btype = b_workshop then
36011: LD_VAR 0 5
36015: PUSH
36016: LD_INT 2
36018: EQUAL
36019: IFFALSE 36029
// btype := b_factory ;
36021: LD_ADDR_VAR 0 5
36025: PUSH
36026: LD_INT 3
36028: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36029: LD_ADDR_VAR 0 4
36033: PUSH
36034: LD_VAR 0 5
36038: PPUSH
36039: LD_VAR 0 1
36043: PPUSH
36044: CALL_OW 248
36048: PPUSH
36049: CALL_OW 450
36053: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36054: LD_ADDR_VAR 0 2
36058: PUSH
36059: LD_VAR 0 3
36063: PPUSH
36064: LD_INT 1
36066: PPUSH
36067: CALL_OW 275
36071: PUSH
36072: LD_VAR 0 4
36076: PUSH
36077: LD_INT 1
36079: ARRAY
36080: GREATEREQUAL
36081: PUSH
36082: LD_VAR 0 3
36086: PPUSH
36087: LD_INT 2
36089: PPUSH
36090: CALL_OW 275
36094: PUSH
36095: LD_VAR 0 4
36099: PUSH
36100: LD_INT 2
36102: ARRAY
36103: GREATEREQUAL
36104: AND
36105: PUSH
36106: LD_VAR 0 3
36110: PPUSH
36111: LD_INT 3
36113: PPUSH
36114: CALL_OW 275
36118: PUSH
36119: LD_VAR 0 4
36123: PUSH
36124: LD_INT 3
36126: ARRAY
36127: GREATEREQUAL
36128: AND
36129: ST_TO_ADDR
// end ;
36130: LD_VAR 0 2
36134: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36135: LD_INT 0
36137: PPUSH
36138: PPUSH
36139: PPUSH
// pom := GetBase ( building ) ;
36140: LD_ADDR_VAR 0 4
36144: PUSH
36145: LD_VAR 0 1
36149: PPUSH
36150: CALL_OW 274
36154: ST_TO_ADDR
// if not pom then
36155: LD_VAR 0 4
36159: NOT
36160: IFFALSE 36164
// exit ;
36162: GO 36265
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36164: LD_ADDR_VAR 0 5
36168: PUSH
36169: LD_VAR 0 2
36173: PPUSH
36174: LD_VAR 0 1
36178: PPUSH
36179: CALL_OW 248
36183: PPUSH
36184: CALL_OW 450
36188: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36189: LD_ADDR_VAR 0 3
36193: PUSH
36194: LD_VAR 0 4
36198: PPUSH
36199: LD_INT 1
36201: PPUSH
36202: CALL_OW 275
36206: PUSH
36207: LD_VAR 0 5
36211: PUSH
36212: LD_INT 1
36214: ARRAY
36215: GREATEREQUAL
36216: PUSH
36217: LD_VAR 0 4
36221: PPUSH
36222: LD_INT 2
36224: PPUSH
36225: CALL_OW 275
36229: PUSH
36230: LD_VAR 0 5
36234: PUSH
36235: LD_INT 2
36237: ARRAY
36238: GREATEREQUAL
36239: AND
36240: PUSH
36241: LD_VAR 0 4
36245: PPUSH
36246: LD_INT 3
36248: PPUSH
36249: CALL_OW 275
36253: PUSH
36254: LD_VAR 0 5
36258: PUSH
36259: LD_INT 3
36261: ARRAY
36262: GREATEREQUAL
36263: AND
36264: ST_TO_ADDR
// end ;
36265: LD_VAR 0 3
36269: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36270: LD_INT 0
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
// result := false ;
36283: LD_ADDR_VAR 0 8
36287: PUSH
36288: LD_INT 0
36290: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36291: LD_VAR 0 5
36295: NOT
36296: PUSH
36297: LD_VAR 0 1
36301: NOT
36302: OR
36303: PUSH
36304: LD_VAR 0 2
36308: NOT
36309: OR
36310: PUSH
36311: LD_VAR 0 3
36315: NOT
36316: OR
36317: IFFALSE 36321
// exit ;
36319: GO 37135
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36321: LD_ADDR_VAR 0 14
36325: PUSH
36326: LD_VAR 0 1
36330: PPUSH
36331: LD_VAR 0 2
36335: PPUSH
36336: LD_VAR 0 3
36340: PPUSH
36341: LD_VAR 0 4
36345: PPUSH
36346: LD_VAR 0 5
36350: PUSH
36351: LD_INT 1
36353: ARRAY
36354: PPUSH
36355: CALL_OW 248
36359: PPUSH
36360: LD_INT 0
36362: PPUSH
36363: CALL 38372 0 6
36367: ST_TO_ADDR
// if not hexes then
36368: LD_VAR 0 14
36372: NOT
36373: IFFALSE 36377
// exit ;
36375: GO 37135
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36377: LD_ADDR_VAR 0 17
36381: PUSH
36382: LD_VAR 0 5
36386: PPUSH
36387: LD_INT 22
36389: PUSH
36390: LD_VAR 0 13
36394: PPUSH
36395: CALL_OW 255
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: LD_INT 30
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 30
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: LIST
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PPUSH
36436: CALL_OW 72
36440: ST_TO_ADDR
// for i = 1 to hexes do
36441: LD_ADDR_VAR 0 9
36445: PUSH
36446: DOUBLE
36447: LD_INT 1
36449: DEC
36450: ST_TO_ADDR
36451: LD_VAR 0 14
36455: PUSH
36456: FOR_TO
36457: IFFALSE 37133
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36459: LD_ADDR_VAR 0 13
36463: PUSH
36464: LD_VAR 0 14
36468: PUSH
36469: LD_VAR 0 9
36473: ARRAY
36474: PUSH
36475: LD_INT 1
36477: ARRAY
36478: PPUSH
36479: LD_VAR 0 14
36483: PUSH
36484: LD_VAR 0 9
36488: ARRAY
36489: PUSH
36490: LD_INT 2
36492: ARRAY
36493: PPUSH
36494: CALL_OW 428
36498: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36499: LD_VAR 0 14
36503: PUSH
36504: LD_VAR 0 9
36508: ARRAY
36509: PUSH
36510: LD_INT 1
36512: ARRAY
36513: PPUSH
36514: LD_VAR 0 14
36518: PUSH
36519: LD_VAR 0 9
36523: ARRAY
36524: PUSH
36525: LD_INT 2
36527: ARRAY
36528: PPUSH
36529: CALL_OW 351
36533: PUSH
36534: LD_VAR 0 14
36538: PUSH
36539: LD_VAR 0 9
36543: ARRAY
36544: PUSH
36545: LD_INT 1
36547: ARRAY
36548: PPUSH
36549: LD_VAR 0 14
36553: PUSH
36554: LD_VAR 0 9
36558: ARRAY
36559: PUSH
36560: LD_INT 2
36562: ARRAY
36563: PPUSH
36564: CALL_OW 488
36568: NOT
36569: OR
36570: PUSH
36571: LD_VAR 0 13
36575: PPUSH
36576: CALL_OW 247
36580: PUSH
36581: LD_INT 3
36583: EQUAL
36584: OR
36585: IFFALSE 36591
// exit ;
36587: POP
36588: POP
36589: GO 37135
// if not tmp then
36591: LD_VAR 0 13
36595: NOT
36596: IFFALSE 36600
// continue ;
36598: GO 36456
// result := true ;
36600: LD_ADDR_VAR 0 8
36604: PUSH
36605: LD_INT 1
36607: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36608: LD_VAR 0 6
36612: PUSH
36613: LD_VAR 0 13
36617: PPUSH
36618: CALL_OW 247
36622: PUSH
36623: LD_INT 2
36625: EQUAL
36626: AND
36627: PUSH
36628: LD_VAR 0 13
36632: PPUSH
36633: CALL_OW 263
36637: PUSH
36638: LD_INT 1
36640: EQUAL
36641: AND
36642: IFFALSE 36806
// begin if IsDrivenBy ( tmp ) then
36644: LD_VAR 0 13
36648: PPUSH
36649: CALL_OW 311
36653: IFFALSE 36657
// continue ;
36655: GO 36456
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36657: LD_VAR 0 6
36661: PPUSH
36662: LD_INT 3
36664: PUSH
36665: LD_INT 60
36667: PUSH
36668: EMPTY
36669: LIST
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 3
36677: PUSH
36678: LD_INT 55
36680: PUSH
36681: EMPTY
36682: LIST
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PPUSH
36692: CALL_OW 72
36696: IFFALSE 36804
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36698: LD_ADDR_VAR 0 18
36702: PUSH
36703: LD_VAR 0 6
36707: PPUSH
36708: LD_INT 3
36710: PUSH
36711: LD_INT 60
36713: PUSH
36714: EMPTY
36715: LIST
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 3
36723: PUSH
36724: LD_INT 55
36726: PUSH
36727: EMPTY
36728: LIST
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PPUSH
36738: CALL_OW 72
36742: PUSH
36743: LD_INT 1
36745: ARRAY
36746: ST_TO_ADDR
// if IsInUnit ( driver ) then
36747: LD_VAR 0 18
36751: PPUSH
36752: CALL_OW 310
36756: IFFALSE 36767
// ComExit ( driver ) ;
36758: LD_VAR 0 18
36762: PPUSH
36763: CALL 61500 0 1
// AddComEnterUnit ( driver , tmp ) ;
36767: LD_VAR 0 18
36771: PPUSH
36772: LD_VAR 0 13
36776: PPUSH
36777: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36781: LD_VAR 0 18
36785: PPUSH
36786: LD_VAR 0 7
36790: PPUSH
36791: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36795: LD_VAR 0 18
36799: PPUSH
36800: CALL_OW 181
// end ; continue ;
36804: GO 36456
// end ; if not cleaners or not tmp in cleaners then
36806: LD_VAR 0 6
36810: NOT
36811: PUSH
36812: LD_VAR 0 13
36816: PUSH
36817: LD_VAR 0 6
36821: IN
36822: NOT
36823: OR
36824: IFFALSE 37131
// begin if dep then
36826: LD_VAR 0 17
36830: IFFALSE 36966
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36832: LD_ADDR_VAR 0 16
36836: PUSH
36837: LD_VAR 0 17
36841: PUSH
36842: LD_INT 1
36844: ARRAY
36845: PPUSH
36846: CALL_OW 250
36850: PPUSH
36851: LD_VAR 0 17
36855: PUSH
36856: LD_INT 1
36858: ARRAY
36859: PPUSH
36860: CALL_OW 254
36864: PPUSH
36865: LD_INT 5
36867: PPUSH
36868: CALL_OW 272
36872: PUSH
36873: LD_VAR 0 17
36877: PUSH
36878: LD_INT 1
36880: ARRAY
36881: PPUSH
36882: CALL_OW 251
36886: PPUSH
36887: LD_VAR 0 17
36891: PUSH
36892: LD_INT 1
36894: ARRAY
36895: PPUSH
36896: CALL_OW 254
36900: PPUSH
36901: LD_INT 5
36903: PPUSH
36904: CALL_OW 273
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36913: LD_VAR 0 16
36917: PUSH
36918: LD_INT 1
36920: ARRAY
36921: PPUSH
36922: LD_VAR 0 16
36926: PUSH
36927: LD_INT 2
36929: ARRAY
36930: PPUSH
36931: CALL_OW 488
36935: IFFALSE 36966
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36937: LD_VAR 0 13
36941: PPUSH
36942: LD_VAR 0 16
36946: PUSH
36947: LD_INT 1
36949: ARRAY
36950: PPUSH
36951: LD_VAR 0 16
36955: PUSH
36956: LD_INT 2
36958: ARRAY
36959: PPUSH
36960: CALL_OW 111
// continue ;
36964: GO 36456
// end ; end ; r := GetDir ( tmp ) ;
36966: LD_ADDR_VAR 0 15
36970: PUSH
36971: LD_VAR 0 13
36975: PPUSH
36976: CALL_OW 254
36980: ST_TO_ADDR
// if r = 5 then
36981: LD_VAR 0 15
36985: PUSH
36986: LD_INT 5
36988: EQUAL
36989: IFFALSE 36999
// r := 0 ;
36991: LD_ADDR_VAR 0 15
36995: PUSH
36996: LD_INT 0
36998: ST_TO_ADDR
// for j = r to 5 do
36999: LD_ADDR_VAR 0 10
37003: PUSH
37004: DOUBLE
37005: LD_VAR 0 15
37009: DEC
37010: ST_TO_ADDR
37011: LD_INT 5
37013: PUSH
37014: FOR_TO
37015: IFFALSE 37129
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37017: LD_ADDR_VAR 0 11
37021: PUSH
37022: LD_VAR 0 13
37026: PPUSH
37027: CALL_OW 250
37031: PPUSH
37032: LD_VAR 0 10
37036: PPUSH
37037: LD_INT 2
37039: PPUSH
37040: CALL_OW 272
37044: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37045: LD_ADDR_VAR 0 12
37049: PUSH
37050: LD_VAR 0 13
37054: PPUSH
37055: CALL_OW 251
37059: PPUSH
37060: LD_VAR 0 10
37064: PPUSH
37065: LD_INT 2
37067: PPUSH
37068: CALL_OW 273
37072: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37073: LD_VAR 0 11
37077: PPUSH
37078: LD_VAR 0 12
37082: PPUSH
37083: CALL_OW 488
37087: PUSH
37088: LD_VAR 0 11
37092: PPUSH
37093: LD_VAR 0 12
37097: PPUSH
37098: CALL_OW 428
37102: NOT
37103: AND
37104: IFFALSE 37127
// begin ComMoveXY ( tmp , _x , _y ) ;
37106: LD_VAR 0 13
37110: PPUSH
37111: LD_VAR 0 11
37115: PPUSH
37116: LD_VAR 0 12
37120: PPUSH
37121: CALL_OW 111
// break ;
37125: GO 37129
// end ; end ;
37127: GO 37014
37129: POP
37130: POP
// end ; end ;
37131: GO 36456
37133: POP
37134: POP
// end ;
37135: LD_VAR 0 8
37139: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37140: LD_INT 0
37142: PPUSH
// result := true ;
37143: LD_ADDR_VAR 0 3
37147: PUSH
37148: LD_INT 1
37150: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37151: LD_VAR 0 2
37155: PUSH
37156: LD_INT 24
37158: DOUBLE
37159: EQUAL
37160: IFTRUE 37170
37162: LD_INT 33
37164: DOUBLE
37165: EQUAL
37166: IFTRUE 37170
37168: GO 37195
37170: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37171: LD_ADDR_VAR 0 3
37175: PUSH
37176: LD_INT 32
37178: PPUSH
37179: LD_VAR 0 1
37183: PPUSH
37184: CALL_OW 321
37188: PUSH
37189: LD_INT 2
37191: EQUAL
37192: ST_TO_ADDR
37193: GO 37515
37195: LD_INT 20
37197: DOUBLE
37198: EQUAL
37199: IFTRUE 37203
37201: GO 37228
37203: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37204: LD_ADDR_VAR 0 3
37208: PUSH
37209: LD_INT 6
37211: PPUSH
37212: LD_VAR 0 1
37216: PPUSH
37217: CALL_OW 321
37221: PUSH
37222: LD_INT 2
37224: EQUAL
37225: ST_TO_ADDR
37226: GO 37515
37228: LD_INT 22
37230: DOUBLE
37231: EQUAL
37232: IFTRUE 37242
37234: LD_INT 36
37236: DOUBLE
37237: EQUAL
37238: IFTRUE 37242
37240: GO 37267
37242: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37243: LD_ADDR_VAR 0 3
37247: PUSH
37248: LD_INT 15
37250: PPUSH
37251: LD_VAR 0 1
37255: PPUSH
37256: CALL_OW 321
37260: PUSH
37261: LD_INT 2
37263: EQUAL
37264: ST_TO_ADDR
37265: GO 37515
37267: LD_INT 30
37269: DOUBLE
37270: EQUAL
37271: IFTRUE 37275
37273: GO 37300
37275: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37276: LD_ADDR_VAR 0 3
37280: PUSH
37281: LD_INT 20
37283: PPUSH
37284: LD_VAR 0 1
37288: PPUSH
37289: CALL_OW 321
37293: PUSH
37294: LD_INT 2
37296: EQUAL
37297: ST_TO_ADDR
37298: GO 37515
37300: LD_INT 28
37302: DOUBLE
37303: EQUAL
37304: IFTRUE 37314
37306: LD_INT 21
37308: DOUBLE
37309: EQUAL
37310: IFTRUE 37314
37312: GO 37339
37314: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37315: LD_ADDR_VAR 0 3
37319: PUSH
37320: LD_INT 21
37322: PPUSH
37323: LD_VAR 0 1
37327: PPUSH
37328: CALL_OW 321
37332: PUSH
37333: LD_INT 2
37335: EQUAL
37336: ST_TO_ADDR
37337: GO 37515
37339: LD_INT 16
37341: DOUBLE
37342: EQUAL
37343: IFTRUE 37347
37345: GO 37374
37347: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37348: LD_ADDR_VAR 0 3
37352: PUSH
37353: LD_EXP 106
37357: PPUSH
37358: LD_VAR 0 1
37362: PPUSH
37363: CALL_OW 321
37367: PUSH
37368: LD_INT 2
37370: EQUAL
37371: ST_TO_ADDR
37372: GO 37515
37374: LD_INT 19
37376: DOUBLE
37377: EQUAL
37378: IFTRUE 37388
37380: LD_INT 23
37382: DOUBLE
37383: EQUAL
37384: IFTRUE 37388
37386: GO 37415
37388: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37389: LD_ADDR_VAR 0 3
37393: PUSH
37394: LD_EXP 105
37398: PPUSH
37399: LD_VAR 0 1
37403: PPUSH
37404: CALL_OW 321
37408: PUSH
37409: LD_INT 2
37411: EQUAL
37412: ST_TO_ADDR
37413: GO 37515
37415: LD_INT 17
37417: DOUBLE
37418: EQUAL
37419: IFTRUE 37423
37421: GO 37448
37423: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37424: LD_ADDR_VAR 0 3
37428: PUSH
37429: LD_INT 39
37431: PPUSH
37432: LD_VAR 0 1
37436: PPUSH
37437: CALL_OW 321
37441: PUSH
37442: LD_INT 2
37444: EQUAL
37445: ST_TO_ADDR
37446: GO 37515
37448: LD_INT 18
37450: DOUBLE
37451: EQUAL
37452: IFTRUE 37456
37454: GO 37481
37456: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37457: LD_ADDR_VAR 0 3
37461: PUSH
37462: LD_INT 40
37464: PPUSH
37465: LD_VAR 0 1
37469: PPUSH
37470: CALL_OW 321
37474: PUSH
37475: LD_INT 2
37477: EQUAL
37478: ST_TO_ADDR
37479: GO 37515
37481: LD_INT 27
37483: DOUBLE
37484: EQUAL
37485: IFTRUE 37489
37487: GO 37514
37489: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37490: LD_ADDR_VAR 0 3
37494: PUSH
37495: LD_INT 35
37497: PPUSH
37498: LD_VAR 0 1
37502: PPUSH
37503: CALL_OW 321
37507: PUSH
37508: LD_INT 2
37510: EQUAL
37511: ST_TO_ADDR
37512: GO 37515
37514: POP
// end ;
37515: LD_VAR 0 3
37519: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37520: LD_INT 0
37522: PPUSH
37523: PPUSH
37524: PPUSH
37525: PPUSH
37526: PPUSH
37527: PPUSH
37528: PPUSH
37529: PPUSH
37530: PPUSH
37531: PPUSH
37532: PPUSH
// result := false ;
37533: LD_ADDR_VAR 0 6
37537: PUSH
37538: LD_INT 0
37540: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37541: LD_VAR 0 1
37545: NOT
37546: PUSH
37547: LD_VAR 0 1
37551: PPUSH
37552: CALL_OW 266
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: IN
37567: NOT
37568: OR
37569: PUSH
37570: LD_VAR 0 2
37574: NOT
37575: OR
37576: PUSH
37577: LD_VAR 0 5
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: LD_INT 2
37590: PUSH
37591: LD_INT 3
37593: PUSH
37594: LD_INT 4
37596: PUSH
37597: LD_INT 5
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: IN
37608: NOT
37609: OR
37610: PUSH
37611: LD_VAR 0 3
37615: PPUSH
37616: LD_VAR 0 4
37620: PPUSH
37621: CALL_OW 488
37625: NOT
37626: OR
37627: IFFALSE 37631
// exit ;
37629: GO 38367
// side := GetSide ( depot ) ;
37631: LD_ADDR_VAR 0 9
37635: PUSH
37636: LD_VAR 0 1
37640: PPUSH
37641: CALL_OW 255
37645: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37646: LD_VAR 0 9
37650: PPUSH
37651: LD_VAR 0 2
37655: PPUSH
37656: CALL 37140 0 2
37660: NOT
37661: IFFALSE 37665
// exit ;
37663: GO 38367
// pom := GetBase ( depot ) ;
37665: LD_ADDR_VAR 0 10
37669: PUSH
37670: LD_VAR 0 1
37674: PPUSH
37675: CALL_OW 274
37679: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37680: LD_ADDR_VAR 0 11
37684: PUSH
37685: LD_VAR 0 2
37689: PPUSH
37690: LD_VAR 0 1
37694: PPUSH
37695: CALL_OW 248
37699: PPUSH
37700: CALL_OW 450
37704: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37705: LD_VAR 0 10
37709: PPUSH
37710: LD_INT 1
37712: PPUSH
37713: CALL_OW 275
37717: PUSH
37718: LD_VAR 0 11
37722: PUSH
37723: LD_INT 1
37725: ARRAY
37726: GREATEREQUAL
37727: PUSH
37728: LD_VAR 0 10
37732: PPUSH
37733: LD_INT 2
37735: PPUSH
37736: CALL_OW 275
37740: PUSH
37741: LD_VAR 0 11
37745: PUSH
37746: LD_INT 2
37748: ARRAY
37749: GREATEREQUAL
37750: AND
37751: PUSH
37752: LD_VAR 0 10
37756: PPUSH
37757: LD_INT 3
37759: PPUSH
37760: CALL_OW 275
37764: PUSH
37765: LD_VAR 0 11
37769: PUSH
37770: LD_INT 3
37772: ARRAY
37773: GREATEREQUAL
37774: AND
37775: NOT
37776: IFFALSE 37780
// exit ;
37778: GO 38367
// if GetBType ( depot ) = b_depot then
37780: LD_VAR 0 1
37784: PPUSH
37785: CALL_OW 266
37789: PUSH
37790: LD_INT 0
37792: EQUAL
37793: IFFALSE 37805
// dist := 28 else
37795: LD_ADDR_VAR 0 14
37799: PUSH
37800: LD_INT 28
37802: ST_TO_ADDR
37803: GO 37813
// dist := 36 ;
37805: LD_ADDR_VAR 0 14
37809: PUSH
37810: LD_INT 36
37812: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37813: LD_VAR 0 1
37817: PPUSH
37818: LD_VAR 0 3
37822: PPUSH
37823: LD_VAR 0 4
37827: PPUSH
37828: CALL_OW 297
37832: PUSH
37833: LD_VAR 0 14
37837: GREATER
37838: IFFALSE 37842
// exit ;
37840: GO 38367
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37842: LD_ADDR_VAR 0 12
37846: PUSH
37847: LD_VAR 0 2
37851: PPUSH
37852: LD_VAR 0 3
37856: PPUSH
37857: LD_VAR 0 4
37861: PPUSH
37862: LD_VAR 0 5
37866: PPUSH
37867: LD_VAR 0 1
37871: PPUSH
37872: CALL_OW 248
37876: PPUSH
37877: LD_INT 0
37879: PPUSH
37880: CALL 38372 0 6
37884: ST_TO_ADDR
// if not hexes then
37885: LD_VAR 0 12
37889: NOT
37890: IFFALSE 37894
// exit ;
37892: GO 38367
// hex := GetHexInfo ( x , y ) ;
37894: LD_ADDR_VAR 0 15
37898: PUSH
37899: LD_VAR 0 3
37903: PPUSH
37904: LD_VAR 0 4
37908: PPUSH
37909: CALL_OW 546
37913: ST_TO_ADDR
// if hex [ 1 ] then
37914: LD_VAR 0 15
37918: PUSH
37919: LD_INT 1
37921: ARRAY
37922: IFFALSE 37926
// exit ;
37924: GO 38367
// height := hex [ 2 ] ;
37926: LD_ADDR_VAR 0 13
37930: PUSH
37931: LD_VAR 0 15
37935: PUSH
37936: LD_INT 2
37938: ARRAY
37939: ST_TO_ADDR
// for i = 1 to hexes do
37940: LD_ADDR_VAR 0 7
37944: PUSH
37945: DOUBLE
37946: LD_INT 1
37948: DEC
37949: ST_TO_ADDR
37950: LD_VAR 0 12
37954: PUSH
37955: FOR_TO
37956: IFFALSE 38286
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37958: LD_VAR 0 12
37962: PUSH
37963: LD_VAR 0 7
37967: ARRAY
37968: PUSH
37969: LD_INT 1
37971: ARRAY
37972: PPUSH
37973: LD_VAR 0 12
37977: PUSH
37978: LD_VAR 0 7
37982: ARRAY
37983: PUSH
37984: LD_INT 2
37986: ARRAY
37987: PPUSH
37988: CALL_OW 488
37992: NOT
37993: PUSH
37994: LD_VAR 0 12
37998: PUSH
37999: LD_VAR 0 7
38003: ARRAY
38004: PUSH
38005: LD_INT 1
38007: ARRAY
38008: PPUSH
38009: LD_VAR 0 12
38013: PUSH
38014: LD_VAR 0 7
38018: ARRAY
38019: PUSH
38020: LD_INT 2
38022: ARRAY
38023: PPUSH
38024: CALL_OW 428
38028: PUSH
38029: LD_INT 0
38031: GREATER
38032: OR
38033: PUSH
38034: LD_VAR 0 12
38038: PUSH
38039: LD_VAR 0 7
38043: ARRAY
38044: PUSH
38045: LD_INT 1
38047: ARRAY
38048: PPUSH
38049: LD_VAR 0 12
38053: PUSH
38054: LD_VAR 0 7
38058: ARRAY
38059: PUSH
38060: LD_INT 2
38062: ARRAY
38063: PPUSH
38064: CALL_OW 351
38068: OR
38069: IFFALSE 38075
// exit ;
38071: POP
38072: POP
38073: GO 38367
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38075: LD_ADDR_VAR 0 8
38079: PUSH
38080: LD_VAR 0 12
38084: PUSH
38085: LD_VAR 0 7
38089: ARRAY
38090: PUSH
38091: LD_INT 1
38093: ARRAY
38094: PPUSH
38095: LD_VAR 0 12
38099: PUSH
38100: LD_VAR 0 7
38104: ARRAY
38105: PUSH
38106: LD_INT 2
38108: ARRAY
38109: PPUSH
38110: CALL_OW 546
38114: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38115: LD_VAR 0 8
38119: PUSH
38120: LD_INT 1
38122: ARRAY
38123: PUSH
38124: LD_VAR 0 8
38128: PUSH
38129: LD_INT 2
38131: ARRAY
38132: PUSH
38133: LD_VAR 0 13
38137: PUSH
38138: LD_INT 2
38140: PLUS
38141: GREATER
38142: OR
38143: PUSH
38144: LD_VAR 0 8
38148: PUSH
38149: LD_INT 2
38151: ARRAY
38152: PUSH
38153: LD_VAR 0 13
38157: PUSH
38158: LD_INT 2
38160: MINUS
38161: LESS
38162: OR
38163: PUSH
38164: LD_VAR 0 8
38168: PUSH
38169: LD_INT 3
38171: ARRAY
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 8
38178: PUSH
38179: LD_INT 9
38181: PUSH
38182: LD_INT 10
38184: PUSH
38185: LD_INT 11
38187: PUSH
38188: LD_INT 12
38190: PUSH
38191: LD_INT 13
38193: PUSH
38194: LD_INT 16
38196: PUSH
38197: LD_INT 17
38199: PUSH
38200: LD_INT 18
38202: PUSH
38203: LD_INT 19
38205: PUSH
38206: LD_INT 20
38208: PUSH
38209: LD_INT 21
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: IN
38227: NOT
38228: OR
38229: PUSH
38230: LD_VAR 0 8
38234: PUSH
38235: LD_INT 5
38237: ARRAY
38238: NOT
38239: OR
38240: PUSH
38241: LD_VAR 0 8
38245: PUSH
38246: LD_INT 6
38248: ARRAY
38249: PUSH
38250: LD_INT 1
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: LD_INT 7
38258: PUSH
38259: LD_INT 9
38261: PUSH
38262: LD_INT 10
38264: PUSH
38265: LD_INT 11
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: IN
38276: NOT
38277: OR
38278: IFFALSE 38284
// exit ;
38280: POP
38281: POP
38282: GO 38367
// end ;
38284: GO 37955
38286: POP
38287: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38288: LD_VAR 0 9
38292: PPUSH
38293: LD_VAR 0 3
38297: PPUSH
38298: LD_VAR 0 4
38302: PPUSH
38303: LD_INT 20
38305: PPUSH
38306: CALL 30313 0 4
38310: PUSH
38311: LD_INT 4
38313: ARRAY
38314: IFFALSE 38318
// exit ;
38316: GO 38367
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38318: LD_VAR 0 2
38322: PUSH
38323: LD_INT 29
38325: PUSH
38326: LD_INT 30
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: IN
38333: PUSH
38334: LD_VAR 0 3
38338: PPUSH
38339: LD_VAR 0 4
38343: PPUSH
38344: LD_VAR 0 9
38348: PPUSH
38349: CALL_OW 440
38353: NOT
38354: AND
38355: IFFALSE 38359
// exit ;
38357: GO 38367
// result := true ;
38359: LD_ADDR_VAR 0 6
38363: PUSH
38364: LD_INT 1
38366: ST_TO_ADDR
// end ;
38367: LD_VAR 0 6
38371: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38372: LD_INT 0
38374: PPUSH
38375: PPUSH
38376: PPUSH
38377: PPUSH
38378: PPUSH
38379: PPUSH
38380: PPUSH
38381: PPUSH
38382: PPUSH
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
38394: PPUSH
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
38399: PPUSH
38400: PPUSH
38401: PPUSH
38402: PPUSH
38403: PPUSH
38404: PPUSH
38405: PPUSH
38406: PPUSH
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
38415: PPUSH
38416: PPUSH
38417: PPUSH
38418: PPUSH
38419: PPUSH
38420: PPUSH
38421: PPUSH
38422: PPUSH
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
38427: PPUSH
38428: PPUSH
38429: PPUSH
38430: PPUSH
38431: PPUSH
// result = [ ] ;
38432: LD_ADDR_VAR 0 7
38436: PUSH
38437: EMPTY
38438: ST_TO_ADDR
// temp_list = [ ] ;
38439: LD_ADDR_VAR 0 9
38443: PUSH
38444: EMPTY
38445: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38446: LD_VAR 0 4
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: LD_INT 1
38456: PUSH
38457: LD_INT 2
38459: PUSH
38460: LD_INT 3
38462: PUSH
38463: LD_INT 4
38465: PUSH
38466: LD_INT 5
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: IN
38477: NOT
38478: PUSH
38479: LD_VAR 0 1
38483: PUSH
38484: LD_INT 0
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: IN
38494: PUSH
38495: LD_VAR 0 5
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: LD_INT 3
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: IN
38514: NOT
38515: AND
38516: OR
38517: IFFALSE 38521
// exit ;
38519: GO 56912
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38521: LD_VAR 0 1
38525: PUSH
38526: LD_INT 6
38528: PUSH
38529: LD_INT 7
38531: PUSH
38532: LD_INT 8
38534: PUSH
38535: LD_INT 13
38537: PUSH
38538: LD_INT 12
38540: PUSH
38541: LD_INT 15
38543: PUSH
38544: LD_INT 11
38546: PUSH
38547: LD_INT 14
38549: PUSH
38550: LD_INT 10
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: IN
38564: IFFALSE 38574
// btype = b_lab ;
38566: LD_ADDR_VAR 0 1
38570: PUSH
38571: LD_INT 6
38573: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38574: LD_VAR 0 6
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: IN
38593: NOT
38594: PUSH
38595: LD_VAR 0 1
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 2
38608: PUSH
38609: LD_INT 3
38611: PUSH
38612: LD_INT 6
38614: PUSH
38615: LD_INT 36
38617: PUSH
38618: LD_INT 4
38620: PUSH
38621: LD_INT 5
38623: PUSH
38624: LD_INT 31
38626: PUSH
38627: LD_INT 32
38629: PUSH
38630: LD_INT 33
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: IN
38646: NOT
38647: PUSH
38648: LD_VAR 0 6
38652: PUSH
38653: LD_INT 1
38655: EQUAL
38656: AND
38657: OR
38658: PUSH
38659: LD_VAR 0 1
38663: PUSH
38664: LD_INT 2
38666: PUSH
38667: LD_INT 3
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: IN
38674: NOT
38675: PUSH
38676: LD_VAR 0 6
38680: PUSH
38681: LD_INT 2
38683: EQUAL
38684: AND
38685: OR
38686: IFFALSE 38696
// mode = 0 ;
38688: LD_ADDR_VAR 0 6
38692: PUSH
38693: LD_INT 0
38695: ST_TO_ADDR
// case mode of 0 :
38696: LD_VAR 0 6
38700: PUSH
38701: LD_INT 0
38703: DOUBLE
38704: EQUAL
38705: IFTRUE 38709
38707: GO 50162
38709: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38710: LD_ADDR_VAR 0 11
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: PUSH
38793: LD_INT 2
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: LD_INT 2
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: LD_INT 3
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: LD_INT 3
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38903: LD_ADDR_VAR 0 12
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 3
39060: NEG
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 3
39071: NEG
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39099: LD_ADDR_VAR 0 13
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: LD_INT 2
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 2
39234: NEG
39235: PUSH
39236: LD_INT 2
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 2
39246: NEG
39247: PUSH
39248: LD_INT 3
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 3
39258: NEG
39259: PUSH
39260: LD_INT 2
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 3
39270: NEG
39271: PUSH
39272: LD_INT 3
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39298: LD_ADDR_VAR 0 14
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: LD_INT 2
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 3
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: LD_INT 3
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: LD_INT 2
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39494: LD_ADDR_VAR 0 15
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 1
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 2
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 2
39617: NEG
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: NEG
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 3
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 3
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39687: LD_ADDR_VAR 0 16
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: NEG
39769: PUSH
39770: LD_INT 2
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: LD_INT 2
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 2
39822: NEG
39823: PUSH
39824: LD_INT 2
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 3
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 3
39844: PUSH
39845: LD_INT 3
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 2
39854: PUSH
39855: LD_INT 3
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39880: LD_ADDR_VAR 0 17
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: NEG
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40110: LD_ADDR_VAR 0 18
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: LD_INT 2
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: LD_INT 2
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 2
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 2
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 2
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 2
40286: NEG
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: NEG
40310: PUSH
40311: LD_INT 2
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40340: LD_ADDR_VAR 0 19
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 2
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 2
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: NEG
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40570: LD_ADDR_VAR 0 20
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 1
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 2
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 2
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: NEG
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40800: LD_ADDR_VAR 0 21
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 1
40858: NEG
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: LD_INT 2
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 2
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: LD_INT 2
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 2
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 2
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41030: LD_ADDR_VAR 0 22
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 2
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 2
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 2
41206: NEG
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41260: LD_ADDR_VAR 0 23
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: LD_INT 2
41345: NEG
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 2
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: LD_INT 2
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 2
41459: NEG
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: LD_INT 3
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: LD_INT 3
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41540: LD_ADDR_VAR 0 24
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 2
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: LD_INT 2
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: NEG
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 3
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 3
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41816: LD_ADDR_VAR 0 25
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: LD_INT 2
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 2
41992: NEG
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: NEG
42016: PUSH
42017: LD_INT 2
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 3
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 3
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: PUSH
42048: LD_INT 3
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: LD_INT 3
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42090: LD_ADDR_VAR 0 26
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 1
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: LD_INT 2
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 2
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: LD_INT 2
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: LD_INT 2
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: LD_INT 3
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42366: LD_ADDR_VAR 0 27
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 2
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 2
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 2
42542: NEG
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: NEG
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: LD_INT 2
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 2
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 2
42588: NEG
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 3
42599: NEG
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 3
42611: NEG
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42646: LD_ADDR_VAR 0 28
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: LD_INT 3
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: LD_INT 3
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 3
42881: NEG
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 3
42893: NEG
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42928: LD_ADDR_VAR 0 29
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 2
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: LD_INT 2
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 2
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 2
43118: NEG
43119: PUSH
43120: LD_INT 3
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: LD_INT 3
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 3
43172: NEG
43173: PUSH
43174: LD_INT 2
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43207: LD_ADDR_VAR 0 30
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: LD_INT 2
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: LD_INT 3
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 3
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: LD_INT 3
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 3
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43485: LD_ADDR_VAR 0 31
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: LD_INT 2
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 2
43650: NEG
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: LD_INT 2
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: LD_INT 3
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 3
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 3
43728: NEG
43729: PUSH
43730: LD_INT 2
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43763: LD_ADDR_VAR 0 32
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 2
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 2
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: LD_INT 2
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 2
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 2
43929: NEG
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: LD_INT 1
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: LD_INT 3
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: LD_INT 2
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 3
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: LD_INT 3
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: NEG
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 3
44006: NEG
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44041: LD_ADDR_VAR 0 33
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: NEG
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: LD_INT 3
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 3
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 3
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 3
44285: NEG
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44320: LD_ADDR_VAR 0 34
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: LD_INT 2
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: LD_INT 3
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 3
44565: NEG
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44600: LD_ADDR_VAR 0 35
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44712: LD_ADDR_VAR 0 36
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44824: LD_ADDR_VAR 0 37
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44936: LD_ADDR_VAR 0 38
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45048: LD_ADDR_VAR 0 39
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45160: LD_ADDR_VAR 0 40
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45272: LD_ADDR_VAR 0 41
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: LD_INT 3
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 3
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 3
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 3
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 3
45515: PUSH
45516: LD_INT 3
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 3
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 3
45546: NEG
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 3
45557: NEG
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 3
45569: NEG
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 3
45581: NEG
45582: PUSH
45583: LD_INT 3
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45622: LD_ADDR_VAR 0 42
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 2
45800: NEG
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 3
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 3
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 3
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 3
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: LD_INT 3
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 3
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 3
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 3
45919: NEG
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 3
45931: NEG
45932: PUSH
45933: LD_INT 3
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45972: LD_ADDR_VAR 0 43
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 2
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 3
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 3
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 3
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 3
46268: NEG
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 3
46279: NEG
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46320: LD_ADDR_VAR 0 44
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: LD_INT 3
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 3
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 3
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: LD_INT 3
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 3
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 3
46605: NEG
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 3
46617: NEG
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 3
46629: NEG
46630: PUSH
46631: LD_INT 3
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46670: LD_ADDR_VAR 0 45
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: LD_INT 3
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 3
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 3
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 3
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: PUSH
46917: LD_INT 3
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 3
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 3
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 3
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: LD_INT 3
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47020: LD_ADDR_VAR 0 46
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: NEG
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 3
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 3
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 3
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: LD_INT 3
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 3
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: NEG
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 3
47327: NEG
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47368: LD_ADDR_VAR 0 47
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47519: LD_ADDR_VAR 0 48
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47666: LD_ADDR_VAR 0 49
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47810: LD_ADDR_VAR 0 50
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47954: LD_ADDR_VAR 0 51
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48101: LD_ADDR_VAR 0 52
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48252: LD_ADDR_VAR 0 53
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: NEG
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48482: LD_ADDR_VAR 0 54
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48712: LD_ADDR_VAR 0 55
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 2
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48942: LD_ADDR_VAR 0 56
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: LD_INT 2
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49172: LD_ADDR_VAR 0 57
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49402: LD_ADDR_VAR 0 58
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49632: LD_ADDR_VAR 0 59
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49720: LD_ADDR_VAR 0 60
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49808: LD_ADDR_VAR 0 61
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49896: LD_ADDR_VAR 0 62
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49984: LD_ADDR_VAR 0 63
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50072: LD_ADDR_VAR 0 64
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: ST_TO_ADDR
// end ; 1 :
50160: GO 56057
50162: LD_INT 1
50164: DOUBLE
50165: EQUAL
50166: IFTRUE 50170
50168: GO 52793
50170: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50171: LD_ADDR_VAR 0 11
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 3
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: LIST
50214: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50215: LD_ADDR_VAR 0 12
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 3
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 3
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: LIST
50255: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50256: LD_ADDR_VAR 0 13
50260: PUSH
50261: LD_INT 3
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 3
50273: PUSH
50274: LD_INT 3
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50296: LD_ADDR_VAR 0 14
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 3
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 3
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: LIST
50336: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50337: LD_ADDR_VAR 0 15
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 3
50355: NEG
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 3
50366: NEG
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50381: LD_ADDR_VAR 0 16
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 3
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 3
50400: NEG
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: NEG
50413: PUSH
50414: LD_INT 3
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: LIST
50426: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50427: LD_ADDR_VAR 0 17
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: LD_INT 3
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: LD_INT 3
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: LIST
50470: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50471: LD_ADDR_VAR 0 18
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 3
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 3
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: LIST
50511: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50512: LD_ADDR_VAR 0 19
50516: PUSH
50517: LD_INT 3
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 3
50529: PUSH
50530: LD_INT 3
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: LD_INT 3
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50552: LD_ADDR_VAR 0 20
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 3
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 3
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50593: LD_ADDR_VAR 0 21
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 3
50611: NEG
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: LIST
50636: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50637: LD_ADDR_VAR 0 22
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: LD_INT 3
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: LD_INT 3
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50683: LD_ADDR_VAR 0 23
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 3
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 4
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50727: LD_ADDR_VAR 0 24
50731: PUSH
50732: LD_INT 3
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 3
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 4
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: LIST
50767: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50768: LD_ADDR_VAR 0 25
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 4
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 3
50795: PUSH
50796: LD_INT 4
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50808: LD_ADDR_VAR 0 26
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 4
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 3
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: LIST
50848: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50849: LD_ADDR_VAR 0 27
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 3
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 4
50878: NEG
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: LIST
50892: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50893: LD_ADDR_VAR 0 28
50897: PUSH
50898: LD_INT 3
50900: NEG
50901: PUSH
50902: LD_INT 3
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 3
50912: NEG
50913: PUSH
50914: LD_INT 4
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 4
50924: NEG
50925: PUSH
50926: LD_INT 3
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: LIST
50938: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50939: LD_ADDR_VAR 0 29
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 3
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: LD_INT 3
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 4
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 4
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 5
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 5
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 4
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 6
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 6
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: LD_INT 5
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51094: LD_ADDR_VAR 0 30
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 3
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 3
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 3
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 4
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 4
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 4
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 5
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 5
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 5
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 6
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 6
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51237: LD_ADDR_VAR 0 31
51241: PUSH
51242: LD_INT 3
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 3
51254: PUSH
51255: LD_INT 3
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: LD_INT 3
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 4
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 4
51284: PUSH
51285: LD_INT 4
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: PUSH
51295: LD_INT 4
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 5
51304: PUSH
51305: LD_INT 4
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 5
51314: PUSH
51315: LD_INT 5
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 4
51324: PUSH
51325: LD_INT 5
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 6
51334: PUSH
51335: LD_INT 5
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 6
51344: PUSH
51345: LD_INT 6
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 5
51354: PUSH
51355: LD_INT 6
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51376: LD_ADDR_VAR 0 32
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 4
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 4
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 3
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 5
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 5
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 4
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: LD_INT 6
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 6
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: LD_INT 5
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51519: LD_ADDR_VAR 0 33
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 3
51548: NEG
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 4
51571: NEG
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 4
51582: NEG
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 4
51594: NEG
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 5
51605: NEG
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 5
51616: NEG
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 5
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 6
51639: NEG
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 6
51650: NEG
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51674: LD_ADDR_VAR 0 34
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: LD_INT 3
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 3
51693: NEG
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 3
51705: NEG
51706: PUSH
51707: LD_INT 3
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: LD_INT 4
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 4
51729: NEG
51730: PUSH
51731: LD_INT 3
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 4
51741: NEG
51742: PUSH
51743: LD_INT 4
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 4
51753: NEG
51754: PUSH
51755: LD_INT 5
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 5
51765: NEG
51766: PUSH
51767: LD_INT 4
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 5
51777: NEG
51778: PUSH
51779: LD_INT 5
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 5
51789: NEG
51790: PUSH
51791: LD_INT 6
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 6
51801: NEG
51802: PUSH
51803: LD_INT 5
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 6
51813: NEG
51814: PUSH
51815: LD_INT 6
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51837: LD_ADDR_VAR 0 41
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: LIST
51880: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51881: LD_ADDR_VAR 0 42
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51922: LD_ADDR_VAR 0 43
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 3
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: LD_INT 3
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51962: LD_ADDR_VAR 0 44
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 3
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52003: LD_ADDR_VAR 0 45
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 3
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52047: LD_ADDR_VAR 0 46
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: LD_INT 3
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52093: LD_ADDR_VAR 0 47
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 3
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: LD_INT 3
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52126: LD_ADDR_VAR 0 48
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52157: LD_ADDR_VAR 0 49
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52186: LD_ADDR_VAR 0 50
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: LD_INT 3
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52215: LD_ADDR_VAR 0 51
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52246: LD_ADDR_VAR 0 52
52250: PUSH
52251: LD_INT 3
52253: NEG
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 3
52265: NEG
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52279: LD_ADDR_VAR 0 53
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: LD_INT 3
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 3
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: LIST
52322: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52323: LD_ADDR_VAR 0 54
52327: PUSH
52328: LD_INT 2
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 3
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 3
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: LIST
52363: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52364: LD_ADDR_VAR 0 55
52368: PUSH
52369: LD_INT 3
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 3
52381: PUSH
52382: LD_INT 3
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52404: LD_ADDR_VAR 0 56
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: LD_INT 3
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: LIST
52444: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52445: LD_ADDR_VAR 0 57
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 3
52463: NEG
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 3
52474: NEG
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52489: LD_ADDR_VAR 0 58
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 3
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 3
52508: NEG
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: LD_INT 3
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52535: LD_ADDR_VAR 0 59
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: LD_INT 2
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: LIST
52578: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52579: LD_ADDR_VAR 0 60
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: LIST
52619: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52620: LD_ADDR_VAR 0 61
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52660: LD_ADDR_VAR 0 62
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52701: LD_ADDR_VAR 0 63
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: LIST
52744: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52745: LD_ADDR_VAR 0 64
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 2
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: LD_INT 2
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: LIST
52790: ST_TO_ADDR
// end ; 2 :
52791: GO 56057
52793: LD_INT 2
52795: DOUBLE
52796: EQUAL
52797: IFTRUE 52801
52799: GO 56056
52801: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52802: LD_ADDR_VAR 0 29
52806: PUSH
52807: LD_INT 4
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 4
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 5
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 5
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 4
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 3
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 5
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 4
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 4
52932: PUSH
52933: LD_INT 4
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: LD_INT 4
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 4
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 2
52982: PUSH
52983: LD_INT 4
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: LD_INT 4
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 3
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 4
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: LD_INT 5
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 5
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 4
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: LD_INT 5
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 2
53074: NEG
53075: PUSH
53076: LD_INT 3
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 3
53085: NEG
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 3
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 3
53130: NEG
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 4
53141: NEG
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 4
53152: NEG
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 4
53164: NEG
53165: PUSH
53166: LD_INT 2
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 4
53187: NEG
53188: PUSH
53189: LD_INT 4
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 4
53199: NEG
53200: PUSH
53201: LD_INT 5
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 3
53211: NEG
53212: PUSH
53213: LD_INT 4
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 4
53235: NEG
53236: PUSH
53237: LD_INT 3
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 5
53247: NEG
53248: PUSH
53249: LD_INT 4
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 5
53259: NEG
53260: PUSH
53261: LD_INT 5
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: LD_INT 5
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 5
53283: NEG
53284: PUSH
53285: LD_INT 3
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53340: LD_ADDR_VAR 0 30
53344: PUSH
53345: LD_INT 4
53347: PUSH
53348: LD_INT 4
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 4
53357: PUSH
53358: LD_INT 3
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 5
53367: PUSH
53368: LD_INT 4
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 5
53377: PUSH
53378: LD_INT 5
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 4
53387: PUSH
53388: LD_INT 5
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: LD_INT 4
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 5
53417: PUSH
53418: LD_INT 3
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: LD_INT 5
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 3
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 3
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 4
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 4
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: LD_INT 4
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: NEG
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 4
53530: NEG
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 4
53541: NEG
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 3
53553: NEG
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 3
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 4
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 5
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 5
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 5
53609: NEG
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 3
53621: NEG
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 3
53632: NEG
53633: PUSH
53634: LD_INT 3
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: NEG
53645: PUSH
53646: LD_INT 4
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: LD_INT 3
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: NEG
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 4
53692: NEG
53693: PUSH
53694: LD_INT 3
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 4
53704: NEG
53705: PUSH
53706: LD_INT 4
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: LD_INT 4
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 4
53728: NEG
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 4
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 5
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 4
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 3
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 3
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: LD_INT 4
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 5
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 3
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: LD_INT 5
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53887: LD_ADDR_VAR 0 31
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 4
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 3
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 4
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 5
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 5
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: LD_INT 4
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 3
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: LD_INT 5
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 3
53987: NEG
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 3
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 3
54032: NEG
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 4
54043: NEG
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 4
54054: NEG
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 4
54066: NEG
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 4
54089: NEG
54090: PUSH
54091: LD_INT 4
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 4
54101: NEG
54102: PUSH
54103: LD_INT 5
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 3
54113: NEG
54114: PUSH
54115: LD_INT 4
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 3
54125: NEG
54126: PUSH
54127: LD_INT 3
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 4
54137: NEG
54138: PUSH
54139: LD_INT 3
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 5
54149: NEG
54150: PUSH
54151: LD_INT 4
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 5
54161: NEG
54162: PUSH
54163: LD_INT 5
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 3
54173: NEG
54174: PUSH
54175: LD_INT 5
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 5
54185: NEG
54186: PUSH
54187: LD_INT 3
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 4
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 3
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 3
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: LD_INT 4
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: LD_INT 4
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 4
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 4
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 5
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 5
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 4
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 3
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 5
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54437: LD_ADDR_VAR 0 32
54441: PUSH
54442: LD_INT 4
54444: NEG
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 4
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 3
54467: NEG
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 3
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 4
54489: NEG
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 5
54500: NEG
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 5
54511: NEG
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 5
54523: NEG
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 3
54535: NEG
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: NEG
54547: PUSH
54548: LD_INT 3
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: LD_INT 4
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: LD_INT 3
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 3
54594: NEG
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 4
54606: NEG
54607: PUSH
54608: LD_INT 3
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 4
54618: NEG
54619: PUSH
54620: LD_INT 4
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: LD_INT 4
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 4
54642: NEG
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: LD_INT 4
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 5
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 4
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 3
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 3
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: LD_INT 4
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: LD_INT 5
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 2
54733: PUSH
54734: LD_INT 3
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: LD_INT 5
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 3
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 3
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 4
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 4
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 3
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 4
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 4
54849: PUSH
54850: LD_INT 4
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 4
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 5
54869: PUSH
54870: LD_INT 4
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 5
54879: PUSH
54880: LD_INT 5
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 4
54889: PUSH
54890: LD_INT 5
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 3
54899: PUSH
54900: LD_INT 4
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 3
54909: PUSH
54910: LD_INT 3
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 5
54919: PUSH
54920: LD_INT 3
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 3
54929: PUSH
54930: LD_INT 5
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54984: LD_ADDR_VAR 0 33
54988: PUSH
54989: LD_INT 4
54991: NEG
54992: PUSH
54993: LD_INT 4
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 4
55003: NEG
55004: PUSH
55005: LD_INT 5
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 3
55015: NEG
55016: PUSH
55017: LD_INT 4
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: LD_INT 3
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 4
55039: NEG
55040: PUSH
55041: LD_INT 3
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 5
55051: NEG
55052: PUSH
55053: LD_INT 4
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 5
55063: NEG
55064: PUSH
55065: LD_INT 5
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: LD_INT 5
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 5
55087: NEG
55088: PUSH
55089: LD_INT 3
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 4
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: LD_INT 3
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 4
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: LD_INT 4
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 4
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 4
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 5
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 5
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 4
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 3
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 3
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 5
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 3
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 3
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 4
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 4
55324: PUSH
55325: LD_INT 4
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 3
55334: PUSH
55335: LD_INT 4
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: PUSH
55345: LD_INT 3
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 4
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 4
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 4
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 4
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: LD_INT 5
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 5
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 4
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 3
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: PUSH
55457: LD_INT 5
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: LD_INT 3
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55522: LD_ADDR_VAR 0 34
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 4
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 5
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: LD_INT 4
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 3
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 3
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 4
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: LD_INT 5
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: LD_INT 3
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: LD_INT 5
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 4
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 4
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 3
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 4
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 4
55724: PUSH
55725: LD_INT 4
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 4
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 5
55744: PUSH
55745: LD_INT 4
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 5
55754: PUSH
55755: LD_INT 5
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 4
55764: PUSH
55765: LD_INT 5
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 3
55774: PUSH
55775: LD_INT 4
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 3
55784: PUSH
55785: LD_INT 3
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 5
55794: PUSH
55795: LD_INT 3
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 3
55804: PUSH
55805: LD_INT 5
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 3
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 4
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 4
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: LD_INT 4
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: LD_INT 2
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 4
55907: NEG
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 4
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 3
55930: NEG
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 4
55952: NEG
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 5
55963: NEG
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 5
55974: NEG
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 5
55986: NEG
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 3
55998: NEG
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: ST_TO_ADDR
// end ; end ;
56054: GO 56057
56056: POP
// case btype of b_depot , b_warehouse :
56057: LD_VAR 0 1
56061: PUSH
56062: LD_INT 0
56064: DOUBLE
56065: EQUAL
56066: IFTRUE 56076
56068: LD_INT 1
56070: DOUBLE
56071: EQUAL
56072: IFTRUE 56076
56074: GO 56277
56076: POP
// case nation of nation_american :
56077: LD_VAR 0 5
56081: PUSH
56082: LD_INT 1
56084: DOUBLE
56085: EQUAL
56086: IFTRUE 56090
56088: GO 56146
56090: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56091: LD_ADDR_VAR 0 9
56095: PUSH
56096: LD_VAR 0 11
56100: PUSH
56101: LD_VAR 0 12
56105: PUSH
56106: LD_VAR 0 13
56110: PUSH
56111: LD_VAR 0 14
56115: PUSH
56116: LD_VAR 0 15
56120: PUSH
56121: LD_VAR 0 16
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: PUSH
56134: LD_VAR 0 4
56138: PUSH
56139: LD_INT 1
56141: PLUS
56142: ARRAY
56143: ST_TO_ADDR
56144: GO 56275
56146: LD_INT 2
56148: DOUBLE
56149: EQUAL
56150: IFTRUE 56154
56152: GO 56210
56154: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56155: LD_ADDR_VAR 0 9
56159: PUSH
56160: LD_VAR 0 17
56164: PUSH
56165: LD_VAR 0 18
56169: PUSH
56170: LD_VAR 0 19
56174: PUSH
56175: LD_VAR 0 20
56179: PUSH
56180: LD_VAR 0 21
56184: PUSH
56185: LD_VAR 0 22
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: PUSH
56198: LD_VAR 0 4
56202: PUSH
56203: LD_INT 1
56205: PLUS
56206: ARRAY
56207: ST_TO_ADDR
56208: GO 56275
56210: LD_INT 3
56212: DOUBLE
56213: EQUAL
56214: IFTRUE 56218
56216: GO 56274
56218: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56219: LD_ADDR_VAR 0 9
56223: PUSH
56224: LD_VAR 0 23
56228: PUSH
56229: LD_VAR 0 24
56233: PUSH
56234: LD_VAR 0 25
56238: PUSH
56239: LD_VAR 0 26
56243: PUSH
56244: LD_VAR 0 27
56248: PUSH
56249: LD_VAR 0 28
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: PUSH
56262: LD_VAR 0 4
56266: PUSH
56267: LD_INT 1
56269: PLUS
56270: ARRAY
56271: ST_TO_ADDR
56272: GO 56275
56274: POP
56275: GO 56830
56277: LD_INT 2
56279: DOUBLE
56280: EQUAL
56281: IFTRUE 56291
56283: LD_INT 3
56285: DOUBLE
56286: EQUAL
56287: IFTRUE 56291
56289: GO 56347
56291: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56292: LD_ADDR_VAR 0 9
56296: PUSH
56297: LD_VAR 0 29
56301: PUSH
56302: LD_VAR 0 30
56306: PUSH
56307: LD_VAR 0 31
56311: PUSH
56312: LD_VAR 0 32
56316: PUSH
56317: LD_VAR 0 33
56321: PUSH
56322: LD_VAR 0 34
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: PUSH
56335: LD_VAR 0 4
56339: PUSH
56340: LD_INT 1
56342: PLUS
56343: ARRAY
56344: ST_TO_ADDR
56345: GO 56830
56347: LD_INT 16
56349: DOUBLE
56350: EQUAL
56351: IFTRUE 56409
56353: LD_INT 17
56355: DOUBLE
56356: EQUAL
56357: IFTRUE 56409
56359: LD_INT 18
56361: DOUBLE
56362: EQUAL
56363: IFTRUE 56409
56365: LD_INT 19
56367: DOUBLE
56368: EQUAL
56369: IFTRUE 56409
56371: LD_INT 22
56373: DOUBLE
56374: EQUAL
56375: IFTRUE 56409
56377: LD_INT 20
56379: DOUBLE
56380: EQUAL
56381: IFTRUE 56409
56383: LD_INT 21
56385: DOUBLE
56386: EQUAL
56387: IFTRUE 56409
56389: LD_INT 23
56391: DOUBLE
56392: EQUAL
56393: IFTRUE 56409
56395: LD_INT 24
56397: DOUBLE
56398: EQUAL
56399: IFTRUE 56409
56401: LD_INT 25
56403: DOUBLE
56404: EQUAL
56405: IFTRUE 56409
56407: GO 56465
56409: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56410: LD_ADDR_VAR 0 9
56414: PUSH
56415: LD_VAR 0 35
56419: PUSH
56420: LD_VAR 0 36
56424: PUSH
56425: LD_VAR 0 37
56429: PUSH
56430: LD_VAR 0 38
56434: PUSH
56435: LD_VAR 0 39
56439: PUSH
56440: LD_VAR 0 40
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: PUSH
56453: LD_VAR 0 4
56457: PUSH
56458: LD_INT 1
56460: PLUS
56461: ARRAY
56462: ST_TO_ADDR
56463: GO 56830
56465: LD_INT 6
56467: DOUBLE
56468: EQUAL
56469: IFTRUE 56521
56471: LD_INT 7
56473: DOUBLE
56474: EQUAL
56475: IFTRUE 56521
56477: LD_INT 8
56479: DOUBLE
56480: EQUAL
56481: IFTRUE 56521
56483: LD_INT 13
56485: DOUBLE
56486: EQUAL
56487: IFTRUE 56521
56489: LD_INT 12
56491: DOUBLE
56492: EQUAL
56493: IFTRUE 56521
56495: LD_INT 15
56497: DOUBLE
56498: EQUAL
56499: IFTRUE 56521
56501: LD_INT 11
56503: DOUBLE
56504: EQUAL
56505: IFTRUE 56521
56507: LD_INT 14
56509: DOUBLE
56510: EQUAL
56511: IFTRUE 56521
56513: LD_INT 10
56515: DOUBLE
56516: EQUAL
56517: IFTRUE 56521
56519: GO 56577
56521: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56522: LD_ADDR_VAR 0 9
56526: PUSH
56527: LD_VAR 0 41
56531: PUSH
56532: LD_VAR 0 42
56536: PUSH
56537: LD_VAR 0 43
56541: PUSH
56542: LD_VAR 0 44
56546: PUSH
56547: LD_VAR 0 45
56551: PUSH
56552: LD_VAR 0 46
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: PUSH
56565: LD_VAR 0 4
56569: PUSH
56570: LD_INT 1
56572: PLUS
56573: ARRAY
56574: ST_TO_ADDR
56575: GO 56830
56577: LD_INT 36
56579: DOUBLE
56580: EQUAL
56581: IFTRUE 56585
56583: GO 56641
56585: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56586: LD_ADDR_VAR 0 9
56590: PUSH
56591: LD_VAR 0 47
56595: PUSH
56596: LD_VAR 0 48
56600: PUSH
56601: LD_VAR 0 49
56605: PUSH
56606: LD_VAR 0 50
56610: PUSH
56611: LD_VAR 0 51
56615: PUSH
56616: LD_VAR 0 52
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: PUSH
56629: LD_VAR 0 4
56633: PUSH
56634: LD_INT 1
56636: PLUS
56637: ARRAY
56638: ST_TO_ADDR
56639: GO 56830
56641: LD_INT 4
56643: DOUBLE
56644: EQUAL
56645: IFTRUE 56667
56647: LD_INT 5
56649: DOUBLE
56650: EQUAL
56651: IFTRUE 56667
56653: LD_INT 34
56655: DOUBLE
56656: EQUAL
56657: IFTRUE 56667
56659: LD_INT 37
56661: DOUBLE
56662: EQUAL
56663: IFTRUE 56667
56665: GO 56723
56667: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56668: LD_ADDR_VAR 0 9
56672: PUSH
56673: LD_VAR 0 53
56677: PUSH
56678: LD_VAR 0 54
56682: PUSH
56683: LD_VAR 0 55
56687: PUSH
56688: LD_VAR 0 56
56692: PUSH
56693: LD_VAR 0 57
56697: PUSH
56698: LD_VAR 0 58
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: PUSH
56711: LD_VAR 0 4
56715: PUSH
56716: LD_INT 1
56718: PLUS
56719: ARRAY
56720: ST_TO_ADDR
56721: GO 56830
56723: LD_INT 31
56725: DOUBLE
56726: EQUAL
56727: IFTRUE 56773
56729: LD_INT 32
56731: DOUBLE
56732: EQUAL
56733: IFTRUE 56773
56735: LD_INT 33
56737: DOUBLE
56738: EQUAL
56739: IFTRUE 56773
56741: LD_INT 27
56743: DOUBLE
56744: EQUAL
56745: IFTRUE 56773
56747: LD_INT 26
56749: DOUBLE
56750: EQUAL
56751: IFTRUE 56773
56753: LD_INT 28
56755: DOUBLE
56756: EQUAL
56757: IFTRUE 56773
56759: LD_INT 29
56761: DOUBLE
56762: EQUAL
56763: IFTRUE 56773
56765: LD_INT 30
56767: DOUBLE
56768: EQUAL
56769: IFTRUE 56773
56771: GO 56829
56773: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56774: LD_ADDR_VAR 0 9
56778: PUSH
56779: LD_VAR 0 59
56783: PUSH
56784: LD_VAR 0 60
56788: PUSH
56789: LD_VAR 0 61
56793: PUSH
56794: LD_VAR 0 62
56798: PUSH
56799: LD_VAR 0 63
56803: PUSH
56804: LD_VAR 0 64
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: PUSH
56817: LD_VAR 0 4
56821: PUSH
56822: LD_INT 1
56824: PLUS
56825: ARRAY
56826: ST_TO_ADDR
56827: GO 56830
56829: POP
// temp_list2 = [ ] ;
56830: LD_ADDR_VAR 0 10
56834: PUSH
56835: EMPTY
56836: ST_TO_ADDR
// for i in temp_list do
56837: LD_ADDR_VAR 0 8
56841: PUSH
56842: LD_VAR 0 9
56846: PUSH
56847: FOR_IN
56848: IFFALSE 56900
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56850: LD_ADDR_VAR 0 10
56854: PUSH
56855: LD_VAR 0 10
56859: PUSH
56860: LD_VAR 0 8
56864: PUSH
56865: LD_INT 1
56867: ARRAY
56868: PUSH
56869: LD_VAR 0 2
56873: PLUS
56874: PUSH
56875: LD_VAR 0 8
56879: PUSH
56880: LD_INT 2
56882: ARRAY
56883: PUSH
56884: LD_VAR 0 3
56888: PLUS
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: EMPTY
56895: LIST
56896: ADD
56897: ST_TO_ADDR
56898: GO 56847
56900: POP
56901: POP
// result = temp_list2 ;
56902: LD_ADDR_VAR 0 7
56906: PUSH
56907: LD_VAR 0 10
56911: ST_TO_ADDR
// end ;
56912: LD_VAR 0 7
56916: RET
// export function EnemyInRange ( unit , dist ) ; begin
56917: LD_INT 0
56919: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56920: LD_ADDR_VAR 0 3
56924: PUSH
56925: LD_VAR 0 1
56929: PPUSH
56930: CALL_OW 255
56934: PPUSH
56935: LD_VAR 0 1
56939: PPUSH
56940: CALL_OW 250
56944: PPUSH
56945: LD_VAR 0 1
56949: PPUSH
56950: CALL_OW 251
56954: PPUSH
56955: LD_VAR 0 2
56959: PPUSH
56960: CALL 30313 0 4
56964: PUSH
56965: LD_INT 4
56967: ARRAY
56968: ST_TO_ADDR
// end ;
56969: LD_VAR 0 3
56973: RET
// export function PlayerSeeMe ( unit ) ; begin
56974: LD_INT 0
56976: PPUSH
// result := See ( your_side , unit ) ;
56977: LD_ADDR_VAR 0 2
56981: PUSH
56982: LD_OWVAR 2
56986: PPUSH
56987: LD_VAR 0 1
56991: PPUSH
56992: CALL_OW 292
56996: ST_TO_ADDR
// end ;
56997: LD_VAR 0 2
57001: RET
// export function ReverseDir ( unit ) ; begin
57002: LD_INT 0
57004: PPUSH
// if not unit then
57005: LD_VAR 0 1
57009: NOT
57010: IFFALSE 57014
// exit ;
57012: GO 57037
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57014: LD_ADDR_VAR 0 2
57018: PUSH
57019: LD_VAR 0 1
57023: PPUSH
57024: CALL_OW 254
57028: PUSH
57029: LD_INT 3
57031: PLUS
57032: PUSH
57033: LD_INT 6
57035: MOD
57036: ST_TO_ADDR
// end ;
57037: LD_VAR 0 2
57041: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57042: LD_INT 0
57044: PPUSH
57045: PPUSH
57046: PPUSH
57047: PPUSH
57048: PPUSH
// if not hexes then
57049: LD_VAR 0 2
57053: NOT
57054: IFFALSE 57058
// exit ;
57056: GO 57206
// dist := 9999 ;
57058: LD_ADDR_VAR 0 5
57062: PUSH
57063: LD_INT 9999
57065: ST_TO_ADDR
// for i = 1 to hexes do
57066: LD_ADDR_VAR 0 4
57070: PUSH
57071: DOUBLE
57072: LD_INT 1
57074: DEC
57075: ST_TO_ADDR
57076: LD_VAR 0 2
57080: PUSH
57081: FOR_TO
57082: IFFALSE 57194
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57084: LD_VAR 0 1
57088: PPUSH
57089: LD_VAR 0 2
57093: PUSH
57094: LD_VAR 0 4
57098: ARRAY
57099: PUSH
57100: LD_INT 1
57102: ARRAY
57103: PPUSH
57104: LD_VAR 0 2
57108: PUSH
57109: LD_VAR 0 4
57113: ARRAY
57114: PUSH
57115: LD_INT 2
57117: ARRAY
57118: PPUSH
57119: CALL_OW 297
57123: PUSH
57124: LD_VAR 0 5
57128: LESS
57129: IFFALSE 57192
// begin hex := hexes [ i ] ;
57131: LD_ADDR_VAR 0 7
57135: PUSH
57136: LD_VAR 0 2
57140: PUSH
57141: LD_VAR 0 4
57145: ARRAY
57146: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57147: LD_ADDR_VAR 0 5
57151: PUSH
57152: LD_VAR 0 1
57156: PPUSH
57157: LD_VAR 0 2
57161: PUSH
57162: LD_VAR 0 4
57166: ARRAY
57167: PUSH
57168: LD_INT 1
57170: ARRAY
57171: PPUSH
57172: LD_VAR 0 2
57176: PUSH
57177: LD_VAR 0 4
57181: ARRAY
57182: PUSH
57183: LD_INT 2
57185: ARRAY
57186: PPUSH
57187: CALL_OW 297
57191: ST_TO_ADDR
// end ; end ;
57192: GO 57081
57194: POP
57195: POP
// result := hex ;
57196: LD_ADDR_VAR 0 3
57200: PUSH
57201: LD_VAR 0 7
57205: ST_TO_ADDR
// end ;
57206: LD_VAR 0 3
57210: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57211: LD_INT 0
57213: PPUSH
57214: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57215: LD_VAR 0 1
57219: NOT
57220: PUSH
57221: LD_VAR 0 1
57225: PUSH
57226: LD_INT 21
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 23
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PPUSH
57250: CALL_OW 69
57254: IN
57255: NOT
57256: OR
57257: IFFALSE 57261
// exit ;
57259: GO 57308
// for i = 1 to 3 do
57261: LD_ADDR_VAR 0 3
57265: PUSH
57266: DOUBLE
57267: LD_INT 1
57269: DEC
57270: ST_TO_ADDR
57271: LD_INT 3
57273: PUSH
57274: FOR_TO
57275: IFFALSE 57306
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57277: LD_VAR 0 1
57281: PPUSH
57282: CALL_OW 250
57286: PPUSH
57287: LD_VAR 0 1
57291: PPUSH
57292: CALL_OW 251
57296: PPUSH
57297: LD_INT 1
57299: PPUSH
57300: CALL_OW 453
57304: GO 57274
57306: POP
57307: POP
// end ;
57308: LD_VAR 0 2
57312: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57313: LD_INT 0
57315: PPUSH
57316: PPUSH
57317: PPUSH
57318: PPUSH
57319: PPUSH
57320: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57321: LD_VAR 0 1
57325: NOT
57326: PUSH
57327: LD_VAR 0 2
57331: NOT
57332: OR
57333: PUSH
57334: LD_VAR 0 1
57338: PPUSH
57339: CALL_OW 314
57343: OR
57344: IFFALSE 57348
// exit ;
57346: GO 57789
// x := GetX ( enemy_unit ) ;
57348: LD_ADDR_VAR 0 7
57352: PUSH
57353: LD_VAR 0 2
57357: PPUSH
57358: CALL_OW 250
57362: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57363: LD_ADDR_VAR 0 8
57367: PUSH
57368: LD_VAR 0 2
57372: PPUSH
57373: CALL_OW 251
57377: ST_TO_ADDR
// if not x or not y then
57378: LD_VAR 0 7
57382: NOT
57383: PUSH
57384: LD_VAR 0 8
57388: NOT
57389: OR
57390: IFFALSE 57394
// exit ;
57392: GO 57789
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57394: LD_ADDR_VAR 0 6
57398: PUSH
57399: LD_VAR 0 7
57403: PPUSH
57404: LD_INT 0
57406: PPUSH
57407: LD_INT 4
57409: PPUSH
57410: CALL_OW 272
57414: PUSH
57415: LD_VAR 0 8
57419: PPUSH
57420: LD_INT 0
57422: PPUSH
57423: LD_INT 4
57425: PPUSH
57426: CALL_OW 273
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_VAR 0 7
57439: PPUSH
57440: LD_INT 1
57442: PPUSH
57443: LD_INT 4
57445: PPUSH
57446: CALL_OW 272
57450: PUSH
57451: LD_VAR 0 8
57455: PPUSH
57456: LD_INT 1
57458: PPUSH
57459: LD_INT 4
57461: PPUSH
57462: CALL_OW 273
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_VAR 0 7
57475: PPUSH
57476: LD_INT 2
57478: PPUSH
57479: LD_INT 4
57481: PPUSH
57482: CALL_OW 272
57486: PUSH
57487: LD_VAR 0 8
57491: PPUSH
57492: LD_INT 2
57494: PPUSH
57495: LD_INT 4
57497: PPUSH
57498: CALL_OW 273
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_VAR 0 7
57511: PPUSH
57512: LD_INT 3
57514: PPUSH
57515: LD_INT 4
57517: PPUSH
57518: CALL_OW 272
57522: PUSH
57523: LD_VAR 0 8
57527: PPUSH
57528: LD_INT 3
57530: PPUSH
57531: LD_INT 4
57533: PPUSH
57534: CALL_OW 273
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_VAR 0 7
57547: PPUSH
57548: LD_INT 4
57550: PPUSH
57551: LD_INT 4
57553: PPUSH
57554: CALL_OW 272
57558: PUSH
57559: LD_VAR 0 8
57563: PPUSH
57564: LD_INT 4
57566: PPUSH
57567: LD_INT 4
57569: PPUSH
57570: CALL_OW 273
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_VAR 0 7
57583: PPUSH
57584: LD_INT 5
57586: PPUSH
57587: LD_INT 4
57589: PPUSH
57590: CALL_OW 272
57594: PUSH
57595: LD_VAR 0 8
57599: PPUSH
57600: LD_INT 5
57602: PPUSH
57603: LD_INT 4
57605: PPUSH
57606: CALL_OW 273
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: ST_TO_ADDR
// for i = tmp downto 1 do
57623: LD_ADDR_VAR 0 4
57627: PUSH
57628: DOUBLE
57629: LD_VAR 0 6
57633: INC
57634: ST_TO_ADDR
57635: LD_INT 1
57637: PUSH
57638: FOR_DOWNTO
57639: IFFALSE 57740
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57641: LD_VAR 0 6
57645: PUSH
57646: LD_VAR 0 4
57650: ARRAY
57651: PUSH
57652: LD_INT 1
57654: ARRAY
57655: PPUSH
57656: LD_VAR 0 6
57660: PUSH
57661: LD_VAR 0 4
57665: ARRAY
57666: PUSH
57667: LD_INT 2
57669: ARRAY
57670: PPUSH
57671: CALL_OW 488
57675: NOT
57676: PUSH
57677: LD_VAR 0 6
57681: PUSH
57682: LD_VAR 0 4
57686: ARRAY
57687: PUSH
57688: LD_INT 1
57690: ARRAY
57691: PPUSH
57692: LD_VAR 0 6
57696: PUSH
57697: LD_VAR 0 4
57701: ARRAY
57702: PUSH
57703: LD_INT 2
57705: ARRAY
57706: PPUSH
57707: CALL_OW 428
57711: PUSH
57712: LD_INT 0
57714: NONEQUAL
57715: OR
57716: IFFALSE 57738
// tmp := Delete ( tmp , i ) ;
57718: LD_ADDR_VAR 0 6
57722: PUSH
57723: LD_VAR 0 6
57727: PPUSH
57728: LD_VAR 0 4
57732: PPUSH
57733: CALL_OW 3
57737: ST_TO_ADDR
57738: GO 57638
57740: POP
57741: POP
// j := GetClosestHex ( unit , tmp ) ;
57742: LD_ADDR_VAR 0 5
57746: PUSH
57747: LD_VAR 0 1
57751: PPUSH
57752: LD_VAR 0 6
57756: PPUSH
57757: CALL 57042 0 2
57761: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57762: LD_VAR 0 1
57766: PPUSH
57767: LD_VAR 0 5
57771: PUSH
57772: LD_INT 1
57774: ARRAY
57775: PPUSH
57776: LD_VAR 0 5
57780: PUSH
57781: LD_INT 2
57783: ARRAY
57784: PPUSH
57785: CALL_OW 111
// end ;
57789: LD_VAR 0 3
57793: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57794: LD_INT 0
57796: PPUSH
57797: PPUSH
57798: PPUSH
// uc_side = 0 ;
57799: LD_ADDR_OWVAR 20
57803: PUSH
57804: LD_INT 0
57806: ST_TO_ADDR
// uc_nation = 0 ;
57807: LD_ADDR_OWVAR 21
57811: PUSH
57812: LD_INT 0
57814: ST_TO_ADDR
// InitHc_All ( ) ;
57815: CALL_OW 584
// InitVc ;
57819: CALL_OW 20
// if mastodonts then
57823: LD_VAR 0 6
57827: IFFALSE 57894
// for i = 1 to mastodonts do
57829: LD_ADDR_VAR 0 11
57833: PUSH
57834: DOUBLE
57835: LD_INT 1
57837: DEC
57838: ST_TO_ADDR
57839: LD_VAR 0 6
57843: PUSH
57844: FOR_TO
57845: IFFALSE 57892
// begin vc_chassis := 31 ;
57847: LD_ADDR_OWVAR 37
57851: PUSH
57852: LD_INT 31
57854: ST_TO_ADDR
// vc_control := control_rider ;
57855: LD_ADDR_OWVAR 38
57859: PUSH
57860: LD_INT 4
57862: ST_TO_ADDR
// animal := CreateVehicle ;
57863: LD_ADDR_VAR 0 12
57867: PUSH
57868: CALL_OW 45
57872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57873: LD_VAR 0 12
57877: PPUSH
57878: LD_VAR 0 8
57882: PPUSH
57883: LD_INT 0
57885: PPUSH
57886: CALL 60029 0 3
// end ;
57890: GO 57844
57892: POP
57893: POP
// if horses then
57894: LD_VAR 0 5
57898: IFFALSE 57965
// for i = 1 to horses do
57900: LD_ADDR_VAR 0 11
57904: PUSH
57905: DOUBLE
57906: LD_INT 1
57908: DEC
57909: ST_TO_ADDR
57910: LD_VAR 0 5
57914: PUSH
57915: FOR_TO
57916: IFFALSE 57963
// begin hc_class := 21 ;
57918: LD_ADDR_OWVAR 28
57922: PUSH
57923: LD_INT 21
57925: ST_TO_ADDR
// hc_gallery :=  ;
57926: LD_ADDR_OWVAR 33
57930: PUSH
57931: LD_STRING 
57933: ST_TO_ADDR
// animal := CreateHuman ;
57934: LD_ADDR_VAR 0 12
57938: PUSH
57939: CALL_OW 44
57943: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57944: LD_VAR 0 12
57948: PPUSH
57949: LD_VAR 0 8
57953: PPUSH
57954: LD_INT 0
57956: PPUSH
57957: CALL 60029 0 3
// end ;
57961: GO 57915
57963: POP
57964: POP
// if birds then
57965: LD_VAR 0 1
57969: IFFALSE 58036
// for i = 1 to birds do
57971: LD_ADDR_VAR 0 11
57975: PUSH
57976: DOUBLE
57977: LD_INT 1
57979: DEC
57980: ST_TO_ADDR
57981: LD_VAR 0 1
57985: PUSH
57986: FOR_TO
57987: IFFALSE 58034
// begin hc_class = 18 ;
57989: LD_ADDR_OWVAR 28
57993: PUSH
57994: LD_INT 18
57996: ST_TO_ADDR
// hc_gallery =  ;
57997: LD_ADDR_OWVAR 33
58001: PUSH
58002: LD_STRING 
58004: ST_TO_ADDR
// animal := CreateHuman ;
58005: LD_ADDR_VAR 0 12
58009: PUSH
58010: CALL_OW 44
58014: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58015: LD_VAR 0 12
58019: PPUSH
58020: LD_VAR 0 8
58024: PPUSH
58025: LD_INT 0
58027: PPUSH
58028: CALL 60029 0 3
// end ;
58032: GO 57986
58034: POP
58035: POP
// if tigers then
58036: LD_VAR 0 2
58040: IFFALSE 58124
// for i = 1 to tigers do
58042: LD_ADDR_VAR 0 11
58046: PUSH
58047: DOUBLE
58048: LD_INT 1
58050: DEC
58051: ST_TO_ADDR
58052: LD_VAR 0 2
58056: PUSH
58057: FOR_TO
58058: IFFALSE 58122
// begin hc_class = class_tiger ;
58060: LD_ADDR_OWVAR 28
58064: PUSH
58065: LD_INT 14
58067: ST_TO_ADDR
// hc_gallery =  ;
58068: LD_ADDR_OWVAR 33
58072: PUSH
58073: LD_STRING 
58075: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58076: LD_ADDR_OWVAR 35
58080: PUSH
58081: LD_INT 7
58083: NEG
58084: PPUSH
58085: LD_INT 7
58087: PPUSH
58088: CALL_OW 12
58092: ST_TO_ADDR
// animal := CreateHuman ;
58093: LD_ADDR_VAR 0 12
58097: PUSH
58098: CALL_OW 44
58102: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58103: LD_VAR 0 12
58107: PPUSH
58108: LD_VAR 0 8
58112: PPUSH
58113: LD_INT 0
58115: PPUSH
58116: CALL 60029 0 3
// end ;
58120: GO 58057
58122: POP
58123: POP
// if apemans then
58124: LD_VAR 0 3
58128: IFFALSE 58251
// for i = 1 to apemans do
58130: LD_ADDR_VAR 0 11
58134: PUSH
58135: DOUBLE
58136: LD_INT 1
58138: DEC
58139: ST_TO_ADDR
58140: LD_VAR 0 3
58144: PUSH
58145: FOR_TO
58146: IFFALSE 58249
// begin hc_class = class_apeman ;
58148: LD_ADDR_OWVAR 28
58152: PUSH
58153: LD_INT 12
58155: ST_TO_ADDR
// hc_gallery =  ;
58156: LD_ADDR_OWVAR 33
58160: PUSH
58161: LD_STRING 
58163: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58164: LD_ADDR_OWVAR 35
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PPUSH
58173: LD_INT 2
58175: PPUSH
58176: CALL_OW 12
58180: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58181: LD_ADDR_OWVAR 31
58185: PUSH
58186: LD_INT 1
58188: PPUSH
58189: LD_INT 3
58191: PPUSH
58192: CALL_OW 12
58196: PUSH
58197: LD_INT 1
58199: PPUSH
58200: LD_INT 3
58202: PPUSH
58203: CALL_OW 12
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// animal := CreateHuman ;
58220: LD_ADDR_VAR 0 12
58224: PUSH
58225: CALL_OW 44
58229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58230: LD_VAR 0 12
58234: PPUSH
58235: LD_VAR 0 8
58239: PPUSH
58240: LD_INT 0
58242: PPUSH
58243: CALL 60029 0 3
// end ;
58247: GO 58145
58249: POP
58250: POP
// if enchidnas then
58251: LD_VAR 0 4
58255: IFFALSE 58322
// for i = 1 to enchidnas do
58257: LD_ADDR_VAR 0 11
58261: PUSH
58262: DOUBLE
58263: LD_INT 1
58265: DEC
58266: ST_TO_ADDR
58267: LD_VAR 0 4
58271: PUSH
58272: FOR_TO
58273: IFFALSE 58320
// begin hc_class = 13 ;
58275: LD_ADDR_OWVAR 28
58279: PUSH
58280: LD_INT 13
58282: ST_TO_ADDR
// hc_gallery =  ;
58283: LD_ADDR_OWVAR 33
58287: PUSH
58288: LD_STRING 
58290: ST_TO_ADDR
// animal := CreateHuman ;
58291: LD_ADDR_VAR 0 12
58295: PUSH
58296: CALL_OW 44
58300: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58301: LD_VAR 0 12
58305: PPUSH
58306: LD_VAR 0 8
58310: PPUSH
58311: LD_INT 0
58313: PPUSH
58314: CALL 60029 0 3
// end ;
58318: GO 58272
58320: POP
58321: POP
// if fishes then
58322: LD_VAR 0 7
58326: IFFALSE 58393
// for i = 1 to fishes do
58328: LD_ADDR_VAR 0 11
58332: PUSH
58333: DOUBLE
58334: LD_INT 1
58336: DEC
58337: ST_TO_ADDR
58338: LD_VAR 0 7
58342: PUSH
58343: FOR_TO
58344: IFFALSE 58391
// begin hc_class = 20 ;
58346: LD_ADDR_OWVAR 28
58350: PUSH
58351: LD_INT 20
58353: ST_TO_ADDR
// hc_gallery =  ;
58354: LD_ADDR_OWVAR 33
58358: PUSH
58359: LD_STRING 
58361: ST_TO_ADDR
// animal := CreateHuman ;
58362: LD_ADDR_VAR 0 12
58366: PUSH
58367: CALL_OW 44
58371: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58372: LD_VAR 0 12
58376: PPUSH
58377: LD_VAR 0 9
58381: PPUSH
58382: LD_INT 0
58384: PPUSH
58385: CALL 60029 0 3
// end ;
58389: GO 58343
58391: POP
58392: POP
// end ;
58393: LD_VAR 0 10
58397: RET
// export function WantHeal ( sci , unit ) ; begin
58398: LD_INT 0
58400: PPUSH
// if GetTaskList ( sci ) > 0 then
58401: LD_VAR 0 1
58405: PPUSH
58406: CALL_OW 437
58410: PUSH
58411: LD_INT 0
58413: GREATER
58414: IFFALSE 58484
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58416: LD_VAR 0 1
58420: PPUSH
58421: CALL_OW 437
58425: PUSH
58426: LD_INT 1
58428: ARRAY
58429: PUSH
58430: LD_INT 1
58432: ARRAY
58433: PUSH
58434: LD_STRING l
58436: EQUAL
58437: PUSH
58438: LD_VAR 0 1
58442: PPUSH
58443: CALL_OW 437
58447: PUSH
58448: LD_INT 1
58450: ARRAY
58451: PUSH
58452: LD_INT 4
58454: ARRAY
58455: PUSH
58456: LD_VAR 0 2
58460: EQUAL
58461: AND
58462: IFFALSE 58474
// result := true else
58464: LD_ADDR_VAR 0 3
58468: PUSH
58469: LD_INT 1
58471: ST_TO_ADDR
58472: GO 58482
// result := false ;
58474: LD_ADDR_VAR 0 3
58478: PUSH
58479: LD_INT 0
58481: ST_TO_ADDR
// end else
58482: GO 58492
// result := false ;
58484: LD_ADDR_VAR 0 3
58488: PUSH
58489: LD_INT 0
58491: ST_TO_ADDR
// end ;
58492: LD_VAR 0 3
58496: RET
// export function HealTarget ( sci ) ; begin
58497: LD_INT 0
58499: PPUSH
// if not sci then
58500: LD_VAR 0 1
58504: NOT
58505: IFFALSE 58509
// exit ;
58507: GO 58574
// result := 0 ;
58509: LD_ADDR_VAR 0 2
58513: PUSH
58514: LD_INT 0
58516: ST_TO_ADDR
// if GetTaskList ( sci ) then
58517: LD_VAR 0 1
58521: PPUSH
58522: CALL_OW 437
58526: IFFALSE 58574
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58528: LD_VAR 0 1
58532: PPUSH
58533: CALL_OW 437
58537: PUSH
58538: LD_INT 1
58540: ARRAY
58541: PUSH
58542: LD_INT 1
58544: ARRAY
58545: PUSH
58546: LD_STRING l
58548: EQUAL
58549: IFFALSE 58574
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58551: LD_ADDR_VAR 0 2
58555: PUSH
58556: LD_VAR 0 1
58560: PPUSH
58561: CALL_OW 437
58565: PUSH
58566: LD_INT 1
58568: ARRAY
58569: PUSH
58570: LD_INT 4
58572: ARRAY
58573: ST_TO_ADDR
// end ;
58574: LD_VAR 0 2
58578: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58579: LD_INT 0
58581: PPUSH
58582: PPUSH
58583: PPUSH
58584: PPUSH
// if not base_units then
58585: LD_VAR 0 1
58589: NOT
58590: IFFALSE 58594
// exit ;
58592: GO 58681
// result := false ;
58594: LD_ADDR_VAR 0 2
58598: PUSH
58599: LD_INT 0
58601: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58602: LD_ADDR_VAR 0 5
58606: PUSH
58607: LD_VAR 0 1
58611: PPUSH
58612: LD_INT 21
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PPUSH
58622: CALL_OW 72
58626: ST_TO_ADDR
// if not tmp then
58627: LD_VAR 0 5
58631: NOT
58632: IFFALSE 58636
// exit ;
58634: GO 58681
// for i in tmp do
58636: LD_ADDR_VAR 0 3
58640: PUSH
58641: LD_VAR 0 5
58645: PUSH
58646: FOR_IN
58647: IFFALSE 58679
// begin result := EnemyInRange ( i , 22 ) ;
58649: LD_ADDR_VAR 0 2
58653: PUSH
58654: LD_VAR 0 3
58658: PPUSH
58659: LD_INT 22
58661: PPUSH
58662: CALL 56917 0 2
58666: ST_TO_ADDR
// if result then
58667: LD_VAR 0 2
58671: IFFALSE 58677
// exit ;
58673: POP
58674: POP
58675: GO 58681
// end ;
58677: GO 58646
58679: POP
58680: POP
// end ;
58681: LD_VAR 0 2
58685: RET
// export function FilterByTag ( units , tag ) ; begin
58686: LD_INT 0
58688: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58689: LD_ADDR_VAR 0 3
58693: PUSH
58694: LD_VAR 0 1
58698: PPUSH
58699: LD_INT 120
58701: PUSH
58702: LD_VAR 0 2
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PPUSH
58711: CALL_OW 72
58715: ST_TO_ADDR
// end ;
58716: LD_VAR 0 3
58720: RET
// export function IsDriver ( un ) ; begin
58721: LD_INT 0
58723: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58724: LD_ADDR_VAR 0 2
58728: PUSH
58729: LD_VAR 0 1
58733: PUSH
58734: LD_INT 55
58736: PUSH
58737: EMPTY
58738: LIST
58739: PPUSH
58740: CALL_OW 69
58744: IN
58745: ST_TO_ADDR
// end ;
58746: LD_VAR 0 2
58750: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58751: LD_INT 0
58753: PPUSH
58754: PPUSH
// list := [ ] ;
58755: LD_ADDR_VAR 0 5
58759: PUSH
58760: EMPTY
58761: ST_TO_ADDR
// case d of 0 :
58762: LD_VAR 0 3
58766: PUSH
58767: LD_INT 0
58769: DOUBLE
58770: EQUAL
58771: IFTRUE 58775
58773: GO 58908
58775: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58776: LD_ADDR_VAR 0 5
58780: PUSH
58781: LD_VAR 0 1
58785: PUSH
58786: LD_INT 4
58788: MINUS
58789: PUSH
58790: LD_VAR 0 2
58794: PUSH
58795: LD_INT 4
58797: MINUS
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: PUSH
58807: LD_VAR 0 1
58811: PUSH
58812: LD_INT 3
58814: MINUS
58815: PUSH
58816: LD_VAR 0 2
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: LIST
58828: PUSH
58829: LD_VAR 0 1
58833: PUSH
58834: LD_INT 4
58836: PLUS
58837: PUSH
58838: LD_VAR 0 2
58842: PUSH
58843: LD_INT 4
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: LIST
58850: PUSH
58851: LD_VAR 0 1
58855: PUSH
58856: LD_INT 3
58858: PLUS
58859: PUSH
58860: LD_VAR 0 2
58864: PUSH
58865: LD_INT 3
58867: PLUS
58868: PUSH
58869: LD_INT 5
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: PUSH
58877: LD_VAR 0 1
58881: PUSH
58882: LD_VAR 0 2
58886: PUSH
58887: LD_INT 4
58889: PLUS
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: ST_TO_ADDR
// end ; 1 :
58906: GO 59606
58908: LD_INT 1
58910: DOUBLE
58911: EQUAL
58912: IFTRUE 58916
58914: GO 59049
58916: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58917: LD_ADDR_VAR 0 5
58921: PUSH
58922: LD_VAR 0 1
58926: PUSH
58927: LD_VAR 0 2
58931: PUSH
58932: LD_INT 4
58934: MINUS
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: LIST
58943: PUSH
58944: LD_VAR 0 1
58948: PUSH
58949: LD_INT 3
58951: MINUS
58952: PUSH
58953: LD_VAR 0 2
58957: PUSH
58958: LD_INT 3
58960: MINUS
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: PUSH
58970: LD_VAR 0 1
58974: PUSH
58975: LD_INT 4
58977: MINUS
58978: PUSH
58979: LD_VAR 0 2
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: PUSH
58992: LD_VAR 0 1
58996: PUSH
58997: LD_VAR 0 2
59001: PUSH
59002: LD_INT 3
59004: PLUS
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: LIST
59013: PUSH
59014: LD_VAR 0 1
59018: PUSH
59019: LD_INT 4
59021: PLUS
59022: PUSH
59023: LD_VAR 0 2
59027: PUSH
59028: LD_INT 4
59030: PLUS
59031: PUSH
59032: LD_INT 5
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: LIST
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: ST_TO_ADDR
// end ; 2 :
59047: GO 59606
59049: LD_INT 2
59051: DOUBLE
59052: EQUAL
59053: IFTRUE 59057
59055: GO 59186
59057: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59058: LD_ADDR_VAR 0 5
59062: PUSH
59063: LD_VAR 0 1
59067: PUSH
59068: LD_VAR 0 2
59072: PUSH
59073: LD_INT 3
59075: MINUS
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: LIST
59084: PUSH
59085: LD_VAR 0 1
59089: PUSH
59090: LD_INT 4
59092: PLUS
59093: PUSH
59094: LD_VAR 0 2
59098: PUSH
59099: LD_INT 4
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: PUSH
59107: LD_VAR 0 1
59111: PUSH
59112: LD_VAR 0 2
59116: PUSH
59117: LD_INT 4
59119: PLUS
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: PUSH
59129: LD_VAR 0 1
59133: PUSH
59134: LD_INT 3
59136: MINUS
59137: PUSH
59138: LD_VAR 0 2
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: LIST
59150: PUSH
59151: LD_VAR 0 1
59155: PUSH
59156: LD_INT 4
59158: MINUS
59159: PUSH
59160: LD_VAR 0 2
59164: PUSH
59165: LD_INT 4
59167: MINUS
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: LIST
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: ST_TO_ADDR
// end ; 3 :
59184: GO 59606
59186: LD_INT 3
59188: DOUBLE
59189: EQUAL
59190: IFTRUE 59194
59192: GO 59327
59194: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59195: LD_ADDR_VAR 0 5
59199: PUSH
59200: LD_VAR 0 1
59204: PUSH
59205: LD_INT 3
59207: PLUS
59208: PUSH
59209: LD_VAR 0 2
59213: PUSH
59214: LD_INT 4
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: LIST
59221: PUSH
59222: LD_VAR 0 1
59226: PUSH
59227: LD_INT 4
59229: PLUS
59230: PUSH
59231: LD_VAR 0 2
59235: PUSH
59236: LD_INT 4
59238: PLUS
59239: PUSH
59240: LD_INT 5
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: PUSH
59248: LD_VAR 0 1
59252: PUSH
59253: LD_INT 4
59255: MINUS
59256: PUSH
59257: LD_VAR 0 2
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: LIST
59269: PUSH
59270: LD_VAR 0 1
59274: PUSH
59275: LD_VAR 0 2
59279: PUSH
59280: LD_INT 4
59282: MINUS
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: LIST
59291: PUSH
59292: LD_VAR 0 1
59296: PUSH
59297: LD_INT 3
59299: MINUS
59300: PUSH
59301: LD_VAR 0 2
59305: PUSH
59306: LD_INT 3
59308: MINUS
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: LIST
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: ST_TO_ADDR
// end ; 4 :
59325: GO 59606
59327: LD_INT 4
59329: DOUBLE
59330: EQUAL
59331: IFTRUE 59335
59333: GO 59468
59335: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59336: LD_ADDR_VAR 0 5
59340: PUSH
59341: LD_VAR 0 1
59345: PUSH
59346: LD_VAR 0 2
59350: PUSH
59351: LD_INT 4
59353: PLUS
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: PUSH
59363: LD_VAR 0 1
59367: PUSH
59368: LD_INT 3
59370: PLUS
59371: PUSH
59372: LD_VAR 0 2
59376: PUSH
59377: LD_INT 3
59379: PLUS
59380: PUSH
59381: LD_INT 5
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: LIST
59388: PUSH
59389: LD_VAR 0 1
59393: PUSH
59394: LD_INT 4
59396: PLUS
59397: PUSH
59398: LD_VAR 0 2
59402: PUSH
59403: LD_INT 4
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: PUSH
59411: LD_VAR 0 1
59415: PUSH
59416: LD_VAR 0 2
59420: PUSH
59421: LD_INT 3
59423: MINUS
59424: PUSH
59425: LD_INT 3
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: LIST
59432: PUSH
59433: LD_VAR 0 1
59437: PUSH
59438: LD_INT 4
59440: MINUS
59441: PUSH
59442: LD_VAR 0 2
59446: PUSH
59447: LD_INT 4
59449: MINUS
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: LIST
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: ST_TO_ADDR
// end ; 5 :
59466: GO 59606
59468: LD_INT 5
59470: DOUBLE
59471: EQUAL
59472: IFTRUE 59476
59474: GO 59605
59476: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59477: LD_ADDR_VAR 0 5
59481: PUSH
59482: LD_VAR 0 1
59486: PUSH
59487: LD_INT 4
59489: MINUS
59490: PUSH
59491: LD_VAR 0 2
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: LIST
59503: PUSH
59504: LD_VAR 0 1
59508: PUSH
59509: LD_VAR 0 2
59513: PUSH
59514: LD_INT 4
59516: MINUS
59517: PUSH
59518: LD_INT 3
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: LIST
59525: PUSH
59526: LD_VAR 0 1
59530: PUSH
59531: LD_INT 4
59533: PLUS
59534: PUSH
59535: LD_VAR 0 2
59539: PUSH
59540: LD_INT 4
59542: PLUS
59543: PUSH
59544: LD_INT 5
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: LIST
59551: PUSH
59552: LD_VAR 0 1
59556: PUSH
59557: LD_INT 3
59559: PLUS
59560: PUSH
59561: LD_VAR 0 2
59565: PUSH
59566: LD_INT 4
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: PUSH
59574: LD_VAR 0 1
59578: PUSH
59579: LD_VAR 0 2
59583: PUSH
59584: LD_INT 3
59586: PLUS
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: LIST
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: ST_TO_ADDR
// end ; end ;
59603: GO 59606
59605: POP
// result := list ;
59606: LD_ADDR_VAR 0 4
59610: PUSH
59611: LD_VAR 0 5
59615: ST_TO_ADDR
// end ;
59616: LD_VAR 0 4
59620: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59621: LD_INT 0
59623: PPUSH
59624: PPUSH
59625: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59626: LD_VAR 0 1
59630: NOT
59631: PUSH
59632: LD_VAR 0 2
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: LD_INT 3
59645: PUSH
59646: LD_INT 4
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: IN
59655: NOT
59656: OR
59657: IFFALSE 59661
// exit ;
59659: GO 59753
// tmp := [ ] ;
59661: LD_ADDR_VAR 0 5
59665: PUSH
59666: EMPTY
59667: ST_TO_ADDR
// for i in units do
59668: LD_ADDR_VAR 0 4
59672: PUSH
59673: LD_VAR 0 1
59677: PUSH
59678: FOR_IN
59679: IFFALSE 59722
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59681: LD_ADDR_VAR 0 5
59685: PUSH
59686: LD_VAR 0 5
59690: PPUSH
59691: LD_VAR 0 5
59695: PUSH
59696: LD_INT 1
59698: PLUS
59699: PPUSH
59700: LD_VAR 0 4
59704: PPUSH
59705: LD_VAR 0 2
59709: PPUSH
59710: CALL_OW 259
59714: PPUSH
59715: CALL_OW 2
59719: ST_TO_ADDR
59720: GO 59678
59722: POP
59723: POP
// if not tmp then
59724: LD_VAR 0 5
59728: NOT
59729: IFFALSE 59733
// exit ;
59731: GO 59753
// result := SortListByListDesc ( units , tmp ) ;
59733: LD_ADDR_VAR 0 3
59737: PUSH
59738: LD_VAR 0 1
59742: PPUSH
59743: LD_VAR 0 5
59747: PPUSH
59748: CALL_OW 77
59752: ST_TO_ADDR
// end ;
59753: LD_VAR 0 3
59757: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59758: LD_INT 0
59760: PPUSH
59761: PPUSH
59762: PPUSH
// result := false ;
59763: LD_ADDR_VAR 0 3
59767: PUSH
59768: LD_INT 0
59770: ST_TO_ADDR
// x := GetX ( building ) ;
59771: LD_ADDR_VAR 0 4
59775: PUSH
59776: LD_VAR 0 2
59780: PPUSH
59781: CALL_OW 250
59785: ST_TO_ADDR
// y := GetY ( building ) ;
59786: LD_ADDR_VAR 0 5
59790: PUSH
59791: LD_VAR 0 2
59795: PPUSH
59796: CALL_OW 251
59800: ST_TO_ADDR
// if not building or not x or not y then
59801: LD_VAR 0 2
59805: NOT
59806: PUSH
59807: LD_VAR 0 4
59811: NOT
59812: OR
59813: PUSH
59814: LD_VAR 0 5
59818: NOT
59819: OR
59820: IFFALSE 59824
// exit ;
59822: GO 59916
// if GetTaskList ( unit ) then
59824: LD_VAR 0 1
59828: PPUSH
59829: CALL_OW 437
59833: IFFALSE 59916
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59835: LD_STRING e
59837: PUSH
59838: LD_VAR 0 1
59842: PPUSH
59843: CALL_OW 437
59847: PUSH
59848: LD_INT 1
59850: ARRAY
59851: PUSH
59852: LD_INT 1
59854: ARRAY
59855: EQUAL
59856: PUSH
59857: LD_VAR 0 4
59861: PUSH
59862: LD_VAR 0 1
59866: PPUSH
59867: CALL_OW 437
59871: PUSH
59872: LD_INT 1
59874: ARRAY
59875: PUSH
59876: LD_INT 2
59878: ARRAY
59879: EQUAL
59880: AND
59881: PUSH
59882: LD_VAR 0 5
59886: PUSH
59887: LD_VAR 0 1
59891: PPUSH
59892: CALL_OW 437
59896: PUSH
59897: LD_INT 1
59899: ARRAY
59900: PUSH
59901: LD_INT 3
59903: ARRAY
59904: EQUAL
59905: AND
59906: IFFALSE 59916
// result := true end ;
59908: LD_ADDR_VAR 0 3
59912: PUSH
59913: LD_INT 1
59915: ST_TO_ADDR
// end ;
59916: LD_VAR 0 3
59920: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59921: LD_INT 0
59923: PPUSH
// result := false ;
59924: LD_ADDR_VAR 0 4
59928: PUSH
59929: LD_INT 0
59931: ST_TO_ADDR
// if GetTaskList ( unit ) then
59932: LD_VAR 0 1
59936: PPUSH
59937: CALL_OW 437
59941: IFFALSE 60024
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59943: LD_STRING M
59945: PUSH
59946: LD_VAR 0 1
59950: PPUSH
59951: CALL_OW 437
59955: PUSH
59956: LD_INT 1
59958: ARRAY
59959: PUSH
59960: LD_INT 1
59962: ARRAY
59963: EQUAL
59964: PUSH
59965: LD_VAR 0 2
59969: PUSH
59970: LD_VAR 0 1
59974: PPUSH
59975: CALL_OW 437
59979: PUSH
59980: LD_INT 1
59982: ARRAY
59983: PUSH
59984: LD_INT 2
59986: ARRAY
59987: EQUAL
59988: AND
59989: PUSH
59990: LD_VAR 0 3
59994: PUSH
59995: LD_VAR 0 1
59999: PPUSH
60000: CALL_OW 437
60004: PUSH
60005: LD_INT 1
60007: ARRAY
60008: PUSH
60009: LD_INT 3
60011: ARRAY
60012: EQUAL
60013: AND
60014: IFFALSE 60024
// result := true ;
60016: LD_ADDR_VAR 0 4
60020: PUSH
60021: LD_INT 1
60023: ST_TO_ADDR
// end ; end ;
60024: LD_VAR 0 4
60028: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60029: LD_INT 0
60031: PPUSH
60032: PPUSH
60033: PPUSH
60034: PPUSH
// if not unit or not area then
60035: LD_VAR 0 1
60039: NOT
60040: PUSH
60041: LD_VAR 0 2
60045: NOT
60046: OR
60047: IFFALSE 60051
// exit ;
60049: GO 60215
// tmp := AreaToList ( area , i ) ;
60051: LD_ADDR_VAR 0 6
60055: PUSH
60056: LD_VAR 0 2
60060: PPUSH
60061: LD_VAR 0 5
60065: PPUSH
60066: CALL_OW 517
60070: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60071: LD_ADDR_VAR 0 5
60075: PUSH
60076: DOUBLE
60077: LD_INT 1
60079: DEC
60080: ST_TO_ADDR
60081: LD_VAR 0 6
60085: PUSH
60086: LD_INT 1
60088: ARRAY
60089: PUSH
60090: FOR_TO
60091: IFFALSE 60213
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60093: LD_ADDR_VAR 0 7
60097: PUSH
60098: LD_VAR 0 6
60102: PUSH
60103: LD_INT 1
60105: ARRAY
60106: PUSH
60107: LD_VAR 0 5
60111: ARRAY
60112: PUSH
60113: LD_VAR 0 6
60117: PUSH
60118: LD_INT 2
60120: ARRAY
60121: PUSH
60122: LD_VAR 0 5
60126: ARRAY
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60132: LD_VAR 0 7
60136: PUSH
60137: LD_INT 1
60139: ARRAY
60140: PPUSH
60141: LD_VAR 0 7
60145: PUSH
60146: LD_INT 2
60148: ARRAY
60149: PPUSH
60150: CALL_OW 428
60154: PUSH
60155: LD_INT 0
60157: EQUAL
60158: IFFALSE 60211
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60160: LD_VAR 0 1
60164: PPUSH
60165: LD_VAR 0 7
60169: PUSH
60170: LD_INT 1
60172: ARRAY
60173: PPUSH
60174: LD_VAR 0 7
60178: PUSH
60179: LD_INT 2
60181: ARRAY
60182: PPUSH
60183: LD_VAR 0 3
60187: PPUSH
60188: CALL_OW 48
// result := IsPlaced ( unit ) ;
60192: LD_ADDR_VAR 0 4
60196: PUSH
60197: LD_VAR 0 1
60201: PPUSH
60202: CALL_OW 305
60206: ST_TO_ADDR
// exit ;
60207: POP
60208: POP
60209: GO 60215
// end ; end ;
60211: GO 60090
60213: POP
60214: POP
// end ;
60215: LD_VAR 0 4
60219: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60220: LD_INT 0
60222: PPUSH
60223: PPUSH
60224: PPUSH
// if not side or side > 8 then
60225: LD_VAR 0 1
60229: NOT
60230: PUSH
60231: LD_VAR 0 1
60235: PUSH
60236: LD_INT 8
60238: GREATER
60239: OR
60240: IFFALSE 60244
// exit ;
60242: GO 60431
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60244: LD_ADDR_VAR 0 4
60248: PUSH
60249: LD_INT 22
60251: PUSH
60252: LD_VAR 0 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 21
60263: PUSH
60264: LD_INT 3
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PPUSH
60275: CALL_OW 69
60279: ST_TO_ADDR
// if not tmp then
60280: LD_VAR 0 4
60284: NOT
60285: IFFALSE 60289
// exit ;
60287: GO 60431
// enable_addtolog := true ;
60289: LD_ADDR_OWVAR 81
60293: PUSH
60294: LD_INT 1
60296: ST_TO_ADDR
// AddToLog ( [ ) ;
60297: LD_STRING [
60299: PPUSH
60300: CALL_OW 561
// for i in tmp do
60304: LD_ADDR_VAR 0 3
60308: PUSH
60309: LD_VAR 0 4
60313: PUSH
60314: FOR_IN
60315: IFFALSE 60422
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60317: LD_STRING [
60319: PUSH
60320: LD_VAR 0 3
60324: PPUSH
60325: CALL_OW 266
60329: STR
60330: PUSH
60331: LD_STRING , 
60333: STR
60334: PUSH
60335: LD_VAR 0 3
60339: PPUSH
60340: CALL_OW 250
60344: STR
60345: PUSH
60346: LD_STRING , 
60348: STR
60349: PUSH
60350: LD_VAR 0 3
60354: PPUSH
60355: CALL_OW 251
60359: STR
60360: PUSH
60361: LD_STRING , 
60363: STR
60364: PUSH
60365: LD_VAR 0 3
60369: PPUSH
60370: CALL_OW 254
60374: STR
60375: PUSH
60376: LD_STRING , 
60378: STR
60379: PUSH
60380: LD_VAR 0 3
60384: PPUSH
60385: LD_INT 1
60387: PPUSH
60388: CALL_OW 268
60392: STR
60393: PUSH
60394: LD_STRING , 
60396: STR
60397: PUSH
60398: LD_VAR 0 3
60402: PPUSH
60403: LD_INT 2
60405: PPUSH
60406: CALL_OW 268
60410: STR
60411: PUSH
60412: LD_STRING ],
60414: STR
60415: PPUSH
60416: CALL_OW 561
// end ;
60420: GO 60314
60422: POP
60423: POP
// AddToLog ( ]; ) ;
60424: LD_STRING ];
60426: PPUSH
60427: CALL_OW 561
// end ;
60431: LD_VAR 0 2
60435: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60436: LD_INT 0
60438: PPUSH
60439: PPUSH
60440: PPUSH
60441: PPUSH
60442: PPUSH
// if not area or not rate or not max then
60443: LD_VAR 0 1
60447: NOT
60448: PUSH
60449: LD_VAR 0 2
60453: NOT
60454: OR
60455: PUSH
60456: LD_VAR 0 4
60460: NOT
60461: OR
60462: IFFALSE 60466
// exit ;
60464: GO 60655
// while 1 do
60466: LD_INT 1
60468: IFFALSE 60655
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60470: LD_ADDR_VAR 0 9
60474: PUSH
60475: LD_VAR 0 1
60479: PPUSH
60480: LD_INT 1
60482: PPUSH
60483: CALL_OW 287
60487: PUSH
60488: LD_INT 10
60490: MUL
60491: ST_TO_ADDR
// r := rate / 10 ;
60492: LD_ADDR_VAR 0 7
60496: PUSH
60497: LD_VAR 0 2
60501: PUSH
60502: LD_INT 10
60504: DIVREAL
60505: ST_TO_ADDR
// time := 1 1$00 ;
60506: LD_ADDR_VAR 0 8
60510: PUSH
60511: LD_INT 2100
60513: ST_TO_ADDR
// if amount < min then
60514: LD_VAR 0 9
60518: PUSH
60519: LD_VAR 0 3
60523: LESS
60524: IFFALSE 60542
// r := r * 2 else
60526: LD_ADDR_VAR 0 7
60530: PUSH
60531: LD_VAR 0 7
60535: PUSH
60536: LD_INT 2
60538: MUL
60539: ST_TO_ADDR
60540: GO 60568
// if amount > max then
60542: LD_VAR 0 9
60546: PUSH
60547: LD_VAR 0 4
60551: GREATER
60552: IFFALSE 60568
// r := r / 2 ;
60554: LD_ADDR_VAR 0 7
60558: PUSH
60559: LD_VAR 0 7
60563: PUSH
60564: LD_INT 2
60566: DIVREAL
60567: ST_TO_ADDR
// time := time / r ;
60568: LD_ADDR_VAR 0 8
60572: PUSH
60573: LD_VAR 0 8
60577: PUSH
60578: LD_VAR 0 7
60582: DIVREAL
60583: ST_TO_ADDR
// if time < 0 then
60584: LD_VAR 0 8
60588: PUSH
60589: LD_INT 0
60591: LESS
60592: IFFALSE 60609
// time := time * - 1 ;
60594: LD_ADDR_VAR 0 8
60598: PUSH
60599: LD_VAR 0 8
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: MUL
60608: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60609: LD_VAR 0 8
60613: PUSH
60614: LD_INT 35
60616: PPUSH
60617: LD_INT 875
60619: PPUSH
60620: CALL_OW 12
60624: PLUS
60625: PPUSH
60626: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60630: LD_INT 1
60632: PPUSH
60633: LD_INT 5
60635: PPUSH
60636: CALL_OW 12
60640: PPUSH
60641: LD_VAR 0 1
60645: PPUSH
60646: LD_INT 1
60648: PPUSH
60649: CALL_OW 55
// end ;
60653: GO 60466
// end ;
60655: LD_VAR 0 5
60659: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60660: LD_INT 0
60662: PPUSH
60663: PPUSH
60664: PPUSH
60665: PPUSH
60666: PPUSH
60667: PPUSH
60668: PPUSH
60669: PPUSH
// if not turrets or not factories then
60670: LD_VAR 0 1
60674: NOT
60675: PUSH
60676: LD_VAR 0 2
60680: NOT
60681: OR
60682: IFFALSE 60686
// exit ;
60684: GO 60993
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60686: LD_ADDR_VAR 0 10
60690: PUSH
60691: LD_INT 5
60693: PUSH
60694: LD_INT 6
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 2
60703: PUSH
60704: LD_INT 4
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: LD_INT 5
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 24
60728: PUSH
60729: LD_INT 25
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 23
60738: PUSH
60739: LD_INT 27
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 42
60752: PUSH
60753: LD_INT 43
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 44
60762: PUSH
60763: LD_INT 46
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 45
60772: PUSH
60773: LD_INT 47
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: LIST
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: LIST
60789: ST_TO_ADDR
// result := [ ] ;
60790: LD_ADDR_VAR 0 3
60794: PUSH
60795: EMPTY
60796: ST_TO_ADDR
// for i in turrets do
60797: LD_ADDR_VAR 0 4
60801: PUSH
60802: LD_VAR 0 1
60806: PUSH
60807: FOR_IN
60808: IFFALSE 60991
// begin nat := GetNation ( i ) ;
60810: LD_ADDR_VAR 0 7
60814: PUSH
60815: LD_VAR 0 4
60819: PPUSH
60820: CALL_OW 248
60824: ST_TO_ADDR
// weapon := 0 ;
60825: LD_ADDR_VAR 0 8
60829: PUSH
60830: LD_INT 0
60832: ST_TO_ADDR
// if not nat then
60833: LD_VAR 0 7
60837: NOT
60838: IFFALSE 60842
// continue ;
60840: GO 60807
// for j in list [ nat ] do
60842: LD_ADDR_VAR 0 5
60846: PUSH
60847: LD_VAR 0 10
60851: PUSH
60852: LD_VAR 0 7
60856: ARRAY
60857: PUSH
60858: FOR_IN
60859: IFFALSE 60900
// if GetBWeapon ( i ) = j [ 1 ] then
60861: LD_VAR 0 4
60865: PPUSH
60866: CALL_OW 269
60870: PUSH
60871: LD_VAR 0 5
60875: PUSH
60876: LD_INT 1
60878: ARRAY
60879: EQUAL
60880: IFFALSE 60898
// begin weapon := j [ 2 ] ;
60882: LD_ADDR_VAR 0 8
60886: PUSH
60887: LD_VAR 0 5
60891: PUSH
60892: LD_INT 2
60894: ARRAY
60895: ST_TO_ADDR
// break ;
60896: GO 60900
// end ;
60898: GO 60858
60900: POP
60901: POP
// if not weapon then
60902: LD_VAR 0 8
60906: NOT
60907: IFFALSE 60911
// continue ;
60909: GO 60807
// for k in factories do
60911: LD_ADDR_VAR 0 6
60915: PUSH
60916: LD_VAR 0 2
60920: PUSH
60921: FOR_IN
60922: IFFALSE 60987
// begin weapons := AvailableWeaponList ( k ) ;
60924: LD_ADDR_VAR 0 9
60928: PUSH
60929: LD_VAR 0 6
60933: PPUSH
60934: CALL_OW 478
60938: ST_TO_ADDR
// if not weapons then
60939: LD_VAR 0 9
60943: NOT
60944: IFFALSE 60948
// continue ;
60946: GO 60921
// if weapon in weapons then
60948: LD_VAR 0 8
60952: PUSH
60953: LD_VAR 0 9
60957: IN
60958: IFFALSE 60985
// begin result := [ i , weapon ] ;
60960: LD_ADDR_VAR 0 3
60964: PUSH
60965: LD_VAR 0 4
60969: PUSH
60970: LD_VAR 0 8
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: ST_TO_ADDR
// exit ;
60979: POP
60980: POP
60981: POP
60982: POP
60983: GO 60993
// end ; end ;
60985: GO 60921
60987: POP
60988: POP
// end ;
60989: GO 60807
60991: POP
60992: POP
// end ;
60993: LD_VAR 0 3
60997: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60998: LD_INT 0
61000: PPUSH
// if not side or side > 8 then
61001: LD_VAR 0 3
61005: NOT
61006: PUSH
61007: LD_VAR 0 3
61011: PUSH
61012: LD_INT 8
61014: GREATER
61015: OR
61016: IFFALSE 61020
// exit ;
61018: GO 61079
// if not range then
61020: LD_VAR 0 4
61024: NOT
61025: IFFALSE 61036
// range := - 12 ;
61027: LD_ADDR_VAR 0 4
61031: PUSH
61032: LD_INT 12
61034: NEG
61035: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61036: LD_VAR 0 1
61040: PPUSH
61041: LD_VAR 0 2
61045: PPUSH
61046: LD_VAR 0 3
61050: PPUSH
61051: LD_VAR 0 4
61055: PPUSH
61056: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61060: LD_VAR 0 1
61064: PPUSH
61065: LD_VAR 0 2
61069: PPUSH
61070: LD_VAR 0 3
61074: PPUSH
61075: CALL_OW 331
// end ;
61079: LD_VAR 0 5
61083: RET
// export function Video ( mode ) ; begin
61084: LD_INT 0
61086: PPUSH
// ingame_video = mode ;
61087: LD_ADDR_OWVAR 52
61091: PUSH
61092: LD_VAR 0 1
61096: ST_TO_ADDR
// interface_hidden = mode ;
61097: LD_ADDR_OWVAR 54
61101: PUSH
61102: LD_VAR 0 1
61106: ST_TO_ADDR
// end ;
61107: LD_VAR 0 2
61111: RET
// export function Join ( array , element ) ; begin
61112: LD_INT 0
61114: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61115: LD_ADDR_VAR 0 3
61119: PUSH
61120: LD_VAR 0 1
61124: PPUSH
61125: LD_VAR 0 1
61129: PUSH
61130: LD_INT 1
61132: PLUS
61133: PPUSH
61134: LD_VAR 0 2
61138: PPUSH
61139: CALL_OW 1
61143: ST_TO_ADDR
// end ;
61144: LD_VAR 0 3
61148: RET
// export function JoinUnion ( array , element ) ; begin
61149: LD_INT 0
61151: PPUSH
// result := array union element ;
61152: LD_ADDR_VAR 0 3
61156: PUSH
61157: LD_VAR 0 1
61161: PUSH
61162: LD_VAR 0 2
61166: UNION
61167: ST_TO_ADDR
// end ;
61168: LD_VAR 0 3
61172: RET
// export function GetBehemoths ( side ) ; begin
61173: LD_INT 0
61175: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61176: LD_ADDR_VAR 0 2
61180: PUSH
61181: LD_INT 22
61183: PUSH
61184: LD_VAR 0 1
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 31
61195: PUSH
61196: LD_INT 25
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PPUSH
61207: CALL_OW 69
61211: ST_TO_ADDR
// end ;
61212: LD_VAR 0 2
61216: RET
// export function Shuffle ( array ) ; var i , index ; begin
61217: LD_INT 0
61219: PPUSH
61220: PPUSH
61221: PPUSH
// result := [ ] ;
61222: LD_ADDR_VAR 0 2
61226: PUSH
61227: EMPTY
61228: ST_TO_ADDR
// if not array then
61229: LD_VAR 0 1
61233: NOT
61234: IFFALSE 61238
// exit ;
61236: GO 61337
// Randomize ;
61238: CALL_OW 10
// for i = array downto 1 do
61242: LD_ADDR_VAR 0 3
61246: PUSH
61247: DOUBLE
61248: LD_VAR 0 1
61252: INC
61253: ST_TO_ADDR
61254: LD_INT 1
61256: PUSH
61257: FOR_DOWNTO
61258: IFFALSE 61335
// begin index := rand ( 1 , array ) ;
61260: LD_ADDR_VAR 0 4
61264: PUSH
61265: LD_INT 1
61267: PPUSH
61268: LD_VAR 0 1
61272: PPUSH
61273: CALL_OW 12
61277: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61278: LD_ADDR_VAR 0 2
61282: PUSH
61283: LD_VAR 0 2
61287: PPUSH
61288: LD_VAR 0 2
61292: PUSH
61293: LD_INT 1
61295: PLUS
61296: PPUSH
61297: LD_VAR 0 1
61301: PUSH
61302: LD_VAR 0 4
61306: ARRAY
61307: PPUSH
61308: CALL_OW 2
61312: ST_TO_ADDR
// array := Delete ( array , index ) ;
61313: LD_ADDR_VAR 0 1
61317: PUSH
61318: LD_VAR 0 1
61322: PPUSH
61323: LD_VAR 0 4
61327: PPUSH
61328: CALL_OW 3
61332: ST_TO_ADDR
// end ;
61333: GO 61257
61335: POP
61336: POP
// end ;
61337: LD_VAR 0 2
61341: RET
// export function GetBaseMaterials ( base ) ; begin
61342: LD_INT 0
61344: PPUSH
// result := [ 0 , 0 , 0 ] ;
61345: LD_ADDR_VAR 0 2
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: LIST
61363: ST_TO_ADDR
// if not base then
61364: LD_VAR 0 1
61368: NOT
61369: IFFALSE 61373
// exit ;
61371: GO 61422
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61373: LD_ADDR_VAR 0 2
61377: PUSH
61378: LD_VAR 0 1
61382: PPUSH
61383: LD_INT 1
61385: PPUSH
61386: CALL_OW 275
61390: PUSH
61391: LD_VAR 0 1
61395: PPUSH
61396: LD_INT 2
61398: PPUSH
61399: CALL_OW 275
61403: PUSH
61404: LD_VAR 0 1
61408: PPUSH
61409: LD_INT 3
61411: PPUSH
61412: CALL_OW 275
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: LIST
61421: ST_TO_ADDR
// end ;
61422: LD_VAR 0 2
61426: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61427: LD_INT 0
61429: PPUSH
61430: PPUSH
// result := array ;
61431: LD_ADDR_VAR 0 3
61435: PUSH
61436: LD_VAR 0 1
61440: ST_TO_ADDR
// if size > 0 then
61441: LD_VAR 0 2
61445: PUSH
61446: LD_INT 0
61448: GREATER
61449: IFFALSE 61495
// for i := array downto size do
61451: LD_ADDR_VAR 0 4
61455: PUSH
61456: DOUBLE
61457: LD_VAR 0 1
61461: INC
61462: ST_TO_ADDR
61463: LD_VAR 0 2
61467: PUSH
61468: FOR_DOWNTO
61469: IFFALSE 61493
// result := Delete ( result , result ) ;
61471: LD_ADDR_VAR 0 3
61475: PUSH
61476: LD_VAR 0 3
61480: PPUSH
61481: LD_VAR 0 3
61485: PPUSH
61486: CALL_OW 3
61490: ST_TO_ADDR
61491: GO 61468
61493: POP
61494: POP
// end ;
61495: LD_VAR 0 3
61499: RET
// export function ComExit ( unit ) ; var tmp ; begin
61500: LD_INT 0
61502: PPUSH
61503: PPUSH
// if not IsInUnit ( unit ) then
61504: LD_VAR 0 1
61508: PPUSH
61509: CALL_OW 310
61513: NOT
61514: IFFALSE 61518
// exit ;
61516: GO 61578
// tmp := IsInUnit ( unit ) ;
61518: LD_ADDR_VAR 0 3
61522: PUSH
61523: LD_VAR 0 1
61527: PPUSH
61528: CALL_OW 310
61532: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61533: LD_VAR 0 3
61537: PPUSH
61538: CALL_OW 247
61542: PUSH
61543: LD_INT 2
61545: EQUAL
61546: IFFALSE 61559
// ComExitVehicle ( unit ) else
61548: LD_VAR 0 1
61552: PPUSH
61553: CALL_OW 121
61557: GO 61568
// ComExitBuilding ( unit ) ;
61559: LD_VAR 0 1
61563: PPUSH
61564: CALL_OW 122
// result := tmp ;
61568: LD_ADDR_VAR 0 2
61572: PUSH
61573: LD_VAR 0 3
61577: ST_TO_ADDR
// end ;
61578: LD_VAR 0 2
61582: RET
// export function ComExitAll ( units ) ; var i ; begin
61583: LD_INT 0
61585: PPUSH
61586: PPUSH
// if not units then
61587: LD_VAR 0 1
61591: NOT
61592: IFFALSE 61596
// exit ;
61594: GO 61622
// for i in units do
61596: LD_ADDR_VAR 0 3
61600: PUSH
61601: LD_VAR 0 1
61605: PUSH
61606: FOR_IN
61607: IFFALSE 61620
// ComExit ( i ) ;
61609: LD_VAR 0 3
61613: PPUSH
61614: CALL 61500 0 1
61618: GO 61606
61620: POP
61621: POP
// end ;
61622: LD_VAR 0 2
61626: RET
// export function ResetHc ; begin
61627: LD_INT 0
61629: PPUSH
// InitHc ;
61630: CALL_OW 19
// hc_importance := 0 ;
61634: LD_ADDR_OWVAR 32
61638: PUSH
61639: LD_INT 0
61641: ST_TO_ADDR
// end ;
61642: LD_VAR 0 1
61646: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61647: LD_INT 0
61649: PPUSH
61650: PPUSH
61651: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61652: LD_ADDR_VAR 0 6
61656: PUSH
61657: LD_VAR 0 1
61661: PUSH
61662: LD_VAR 0 3
61666: PLUS
61667: PUSH
61668: LD_INT 2
61670: DIV
61671: ST_TO_ADDR
// if _x < 0 then
61672: LD_VAR 0 6
61676: PUSH
61677: LD_INT 0
61679: LESS
61680: IFFALSE 61697
// _x := _x * - 1 ;
61682: LD_ADDR_VAR 0 6
61686: PUSH
61687: LD_VAR 0 6
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: MUL
61696: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61697: LD_ADDR_VAR 0 7
61701: PUSH
61702: LD_VAR 0 2
61706: PUSH
61707: LD_VAR 0 4
61711: PLUS
61712: PUSH
61713: LD_INT 2
61715: DIV
61716: ST_TO_ADDR
// if _y < 0 then
61717: LD_VAR 0 7
61721: PUSH
61722: LD_INT 0
61724: LESS
61725: IFFALSE 61742
// _y := _y * - 1 ;
61727: LD_ADDR_VAR 0 7
61731: PUSH
61732: LD_VAR 0 7
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: MUL
61741: ST_TO_ADDR
// result := [ _x , _y ] ;
61742: LD_ADDR_VAR 0 5
61746: PUSH
61747: LD_VAR 0 6
61751: PUSH
61752: LD_VAR 0 7
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: ST_TO_ADDR
// end ;
61761: LD_VAR 0 5
61765: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61766: LD_INT 0
61768: PPUSH
61769: PPUSH
61770: PPUSH
61771: PPUSH
// task := GetTaskList ( unit ) ;
61772: LD_ADDR_VAR 0 7
61776: PUSH
61777: LD_VAR 0 1
61781: PPUSH
61782: CALL_OW 437
61786: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61787: LD_VAR 0 7
61791: NOT
61792: PUSH
61793: LD_VAR 0 1
61797: PPUSH
61798: LD_VAR 0 2
61802: PPUSH
61803: CALL_OW 308
61807: NOT
61808: AND
61809: IFFALSE 61813
// exit ;
61811: GO 61931
// if IsInArea ( unit , area ) then
61813: LD_VAR 0 1
61817: PPUSH
61818: LD_VAR 0 2
61822: PPUSH
61823: CALL_OW 308
61827: IFFALSE 61845
// begin ComMoveToArea ( unit , goAway ) ;
61829: LD_VAR 0 1
61833: PPUSH
61834: LD_VAR 0 3
61838: PPUSH
61839: CALL_OW 113
// exit ;
61843: GO 61931
// end ; if task [ 1 ] [ 1 ] <> M then
61845: LD_VAR 0 7
61849: PUSH
61850: LD_INT 1
61852: ARRAY
61853: PUSH
61854: LD_INT 1
61856: ARRAY
61857: PUSH
61858: LD_STRING M
61860: NONEQUAL
61861: IFFALSE 61865
// exit ;
61863: GO 61931
// x := task [ 1 ] [ 2 ] ;
61865: LD_ADDR_VAR 0 5
61869: PUSH
61870: LD_VAR 0 7
61874: PUSH
61875: LD_INT 1
61877: ARRAY
61878: PUSH
61879: LD_INT 2
61881: ARRAY
61882: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61883: LD_ADDR_VAR 0 6
61887: PUSH
61888: LD_VAR 0 7
61892: PUSH
61893: LD_INT 1
61895: ARRAY
61896: PUSH
61897: LD_INT 3
61899: ARRAY
61900: ST_TO_ADDR
// if InArea ( x , y , area ) then
61901: LD_VAR 0 5
61905: PPUSH
61906: LD_VAR 0 6
61910: PPUSH
61911: LD_VAR 0 2
61915: PPUSH
61916: CALL_OW 309
61920: IFFALSE 61931
// ComStop ( unit ) ;
61922: LD_VAR 0 1
61926: PPUSH
61927: CALL_OW 141
// end ;
61931: LD_VAR 0 4
61935: RET
// export function Abs ( value ) ; begin
61936: LD_INT 0
61938: PPUSH
// result := value ;
61939: LD_ADDR_VAR 0 2
61943: PUSH
61944: LD_VAR 0 1
61948: ST_TO_ADDR
// if value < 0 then
61949: LD_VAR 0 1
61953: PUSH
61954: LD_INT 0
61956: LESS
61957: IFFALSE 61974
// result := value * - 1 ;
61959: LD_ADDR_VAR 0 2
61963: PUSH
61964: LD_VAR 0 1
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: MUL
61973: ST_TO_ADDR
// end ;
61974: LD_VAR 0 2
61978: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61979: LD_INT 0
61981: PPUSH
61982: PPUSH
61983: PPUSH
61984: PPUSH
61985: PPUSH
61986: PPUSH
61987: PPUSH
61988: PPUSH
// if not unit or not building then
61989: LD_VAR 0 1
61993: NOT
61994: PUSH
61995: LD_VAR 0 2
61999: NOT
62000: OR
62001: IFFALSE 62005
// exit ;
62003: GO 62231
// x := GetX ( building ) ;
62005: LD_ADDR_VAR 0 4
62009: PUSH
62010: LD_VAR 0 2
62014: PPUSH
62015: CALL_OW 250
62019: ST_TO_ADDR
// y := GetY ( building ) ;
62020: LD_ADDR_VAR 0 6
62024: PUSH
62025: LD_VAR 0 2
62029: PPUSH
62030: CALL_OW 251
62034: ST_TO_ADDR
// d := GetDir ( building ) ;
62035: LD_ADDR_VAR 0 8
62039: PUSH
62040: LD_VAR 0 2
62044: PPUSH
62045: CALL_OW 254
62049: ST_TO_ADDR
// r := 4 ;
62050: LD_ADDR_VAR 0 9
62054: PUSH
62055: LD_INT 4
62057: ST_TO_ADDR
// for i := 1 to 5 do
62058: LD_ADDR_VAR 0 10
62062: PUSH
62063: DOUBLE
62064: LD_INT 1
62066: DEC
62067: ST_TO_ADDR
62068: LD_INT 5
62070: PUSH
62071: FOR_TO
62072: IFFALSE 62229
// begin _x := ShiftX ( x , d , r + i ) ;
62074: LD_ADDR_VAR 0 5
62078: PUSH
62079: LD_VAR 0 4
62083: PPUSH
62084: LD_VAR 0 8
62088: PPUSH
62089: LD_VAR 0 9
62093: PUSH
62094: LD_VAR 0 10
62098: PLUS
62099: PPUSH
62100: CALL_OW 272
62104: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62105: LD_ADDR_VAR 0 7
62109: PUSH
62110: LD_VAR 0 6
62114: PPUSH
62115: LD_VAR 0 8
62119: PPUSH
62120: LD_VAR 0 9
62124: PUSH
62125: LD_VAR 0 10
62129: PLUS
62130: PPUSH
62131: CALL_OW 273
62135: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62136: LD_VAR 0 5
62140: PPUSH
62141: LD_VAR 0 7
62145: PPUSH
62146: CALL_OW 488
62150: PUSH
62151: LD_VAR 0 5
62155: PPUSH
62156: LD_VAR 0 7
62160: PPUSH
62161: CALL_OW 428
62165: PPUSH
62166: CALL_OW 247
62170: PUSH
62171: LD_INT 3
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: IN
62181: NOT
62182: AND
62183: IFFALSE 62227
// begin ComMoveXY ( unit , _x , _y ) ;
62185: LD_VAR 0 1
62189: PPUSH
62190: LD_VAR 0 5
62194: PPUSH
62195: LD_VAR 0 7
62199: PPUSH
62200: CALL_OW 111
// result := [ _x , _y ] ;
62204: LD_ADDR_VAR 0 3
62208: PUSH
62209: LD_VAR 0 5
62213: PUSH
62214: LD_VAR 0 7
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: ST_TO_ADDR
// exit ;
62223: POP
62224: POP
62225: GO 62231
// end ; end ;
62227: GO 62071
62229: POP
62230: POP
// end ;
62231: LD_VAR 0 3
62235: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62236: LD_INT 0
62238: PPUSH
62239: PPUSH
62240: PPUSH
// result := 0 ;
62241: LD_ADDR_VAR 0 3
62245: PUSH
62246: LD_INT 0
62248: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62249: LD_VAR 0 1
62253: PUSH
62254: LD_INT 0
62256: LESS
62257: PUSH
62258: LD_VAR 0 1
62262: PUSH
62263: LD_INT 8
62265: GREATER
62266: OR
62267: PUSH
62268: LD_VAR 0 2
62272: PUSH
62273: LD_INT 0
62275: LESS
62276: OR
62277: PUSH
62278: LD_VAR 0 2
62282: PUSH
62283: LD_INT 8
62285: GREATER
62286: OR
62287: IFFALSE 62291
// exit ;
62289: GO 62366
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62291: LD_ADDR_VAR 0 4
62295: PUSH
62296: LD_INT 22
62298: PUSH
62299: LD_VAR 0 2
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PPUSH
62308: CALL_OW 69
62312: PUSH
62313: FOR_IN
62314: IFFALSE 62364
// begin un := UnitShoot ( i ) ;
62316: LD_ADDR_VAR 0 5
62320: PUSH
62321: LD_VAR 0 4
62325: PPUSH
62326: CALL_OW 504
62330: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62331: LD_VAR 0 5
62335: PPUSH
62336: CALL_OW 255
62340: PUSH
62341: LD_VAR 0 1
62345: EQUAL
62346: IFFALSE 62362
// begin result := un ;
62348: LD_ADDR_VAR 0 3
62352: PUSH
62353: LD_VAR 0 5
62357: ST_TO_ADDR
// exit ;
62358: POP
62359: POP
62360: GO 62366
// end ; end ;
62362: GO 62313
62364: POP
62365: POP
// end ;
62366: LD_VAR 0 3
62370: RET
// export function GetCargoBay ( units ) ; begin
62371: LD_INT 0
62373: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62374: LD_ADDR_VAR 0 2
62378: PUSH
62379: LD_VAR 0 1
62383: PPUSH
62384: LD_INT 2
62386: PUSH
62387: LD_INT 34
62389: PUSH
62390: LD_INT 12
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 34
62399: PUSH
62400: LD_INT 51
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 34
62409: PUSH
62410: LD_INT 32
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 34
62419: PUSH
62420: LD_EXP 94
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: PPUSH
62436: CALL_OW 72
62440: ST_TO_ADDR
// end ;
62441: LD_VAR 0 2
62445: RET
// export function Negate ( value ) ; begin
62446: LD_INT 0
62448: PPUSH
// result := not value ;
62449: LD_ADDR_VAR 0 2
62453: PUSH
62454: LD_VAR 0 1
62458: NOT
62459: ST_TO_ADDR
// end ;
62460: LD_VAR 0 2
62464: RET
// export function Inc ( value ) ; begin
62465: LD_INT 0
62467: PPUSH
// result := value + 1 ;
62468: LD_ADDR_VAR 0 2
62472: PUSH
62473: LD_VAR 0 1
62477: PUSH
62478: LD_INT 1
62480: PLUS
62481: ST_TO_ADDR
// end ;
62482: LD_VAR 0 2
62486: RET
// export function Dec ( value ) ; begin
62487: LD_INT 0
62489: PPUSH
// result := value - 1 ;
62490: LD_ADDR_VAR 0 2
62494: PUSH
62495: LD_VAR 0 1
62499: PUSH
62500: LD_INT 1
62502: MINUS
62503: ST_TO_ADDR
// end ;
62504: LD_VAR 0 2
62508: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62509: LD_INT 0
62511: PPUSH
62512: PPUSH
62513: PPUSH
62514: PPUSH
62515: PPUSH
62516: PPUSH
62517: PPUSH
62518: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62519: LD_VAR 0 1
62523: PPUSH
62524: LD_VAR 0 2
62528: PPUSH
62529: CALL_OW 488
62533: NOT
62534: PUSH
62535: LD_VAR 0 3
62539: PPUSH
62540: LD_VAR 0 4
62544: PPUSH
62545: CALL_OW 488
62549: NOT
62550: OR
62551: IFFALSE 62564
// begin result := - 1 ;
62553: LD_ADDR_VAR 0 5
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: ST_TO_ADDR
// exit ;
62562: GO 62799
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62564: LD_ADDR_VAR 0 12
62568: PUSH
62569: LD_VAR 0 1
62573: PPUSH
62574: LD_VAR 0 2
62578: PPUSH
62579: LD_VAR 0 3
62583: PPUSH
62584: LD_VAR 0 4
62588: PPUSH
62589: CALL 61647 0 4
62593: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62594: LD_ADDR_VAR 0 11
62598: PUSH
62599: LD_VAR 0 1
62603: PPUSH
62604: LD_VAR 0 2
62608: PPUSH
62609: LD_VAR 0 12
62613: PUSH
62614: LD_INT 1
62616: ARRAY
62617: PPUSH
62618: LD_VAR 0 12
62622: PUSH
62623: LD_INT 2
62625: ARRAY
62626: PPUSH
62627: CALL_OW 298
62631: ST_TO_ADDR
// distance := 9999 ;
62632: LD_ADDR_VAR 0 10
62636: PUSH
62637: LD_INT 9999
62639: ST_TO_ADDR
// for i := 0 to 5 do
62640: LD_ADDR_VAR 0 6
62644: PUSH
62645: DOUBLE
62646: LD_INT 0
62648: DEC
62649: ST_TO_ADDR
62650: LD_INT 5
62652: PUSH
62653: FOR_TO
62654: IFFALSE 62797
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62656: LD_ADDR_VAR 0 7
62660: PUSH
62661: LD_VAR 0 1
62665: PPUSH
62666: LD_VAR 0 6
62670: PPUSH
62671: LD_VAR 0 11
62675: PPUSH
62676: CALL_OW 272
62680: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62681: LD_ADDR_VAR 0 8
62685: PUSH
62686: LD_VAR 0 2
62690: PPUSH
62691: LD_VAR 0 6
62695: PPUSH
62696: LD_VAR 0 11
62700: PPUSH
62701: CALL_OW 273
62705: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62706: LD_VAR 0 7
62710: PPUSH
62711: LD_VAR 0 8
62715: PPUSH
62716: CALL_OW 488
62720: NOT
62721: IFFALSE 62725
// continue ;
62723: GO 62653
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62725: LD_ADDR_VAR 0 9
62729: PUSH
62730: LD_VAR 0 12
62734: PUSH
62735: LD_INT 1
62737: ARRAY
62738: PPUSH
62739: LD_VAR 0 12
62743: PUSH
62744: LD_INT 2
62746: ARRAY
62747: PPUSH
62748: LD_VAR 0 7
62752: PPUSH
62753: LD_VAR 0 8
62757: PPUSH
62758: CALL_OW 298
62762: ST_TO_ADDR
// if tmp < distance then
62763: LD_VAR 0 9
62767: PUSH
62768: LD_VAR 0 10
62772: LESS
62773: IFFALSE 62795
// begin result := i ;
62775: LD_ADDR_VAR 0 5
62779: PUSH
62780: LD_VAR 0 6
62784: ST_TO_ADDR
// distance := tmp ;
62785: LD_ADDR_VAR 0 10
62789: PUSH
62790: LD_VAR 0 9
62794: ST_TO_ADDR
// end ; end ;
62795: GO 62653
62797: POP
62798: POP
// end ;
62799: LD_VAR 0 5
62803: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62804: LD_INT 0
62806: PPUSH
62807: PPUSH
// if not driver or not IsInUnit ( driver ) then
62808: LD_VAR 0 1
62812: NOT
62813: PUSH
62814: LD_VAR 0 1
62818: PPUSH
62819: CALL_OW 310
62823: NOT
62824: OR
62825: IFFALSE 62829
// exit ;
62827: GO 62919
// vehicle := IsInUnit ( driver ) ;
62829: LD_ADDR_VAR 0 3
62833: PUSH
62834: LD_VAR 0 1
62838: PPUSH
62839: CALL_OW 310
62843: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62844: LD_VAR 0 1
62848: PPUSH
62849: LD_STRING \
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: PUSH
62879: LD_STRING E
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: LD_VAR 0 3
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PPUSH
62915: CALL_OW 446
// end ;
62919: LD_VAR 0 2
62923: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62924: LD_INT 0
62926: PPUSH
62927: PPUSH
// if not driver or not IsInUnit ( driver ) then
62928: LD_VAR 0 1
62932: NOT
62933: PUSH
62934: LD_VAR 0 1
62938: PPUSH
62939: CALL_OW 310
62943: NOT
62944: OR
62945: IFFALSE 62949
// exit ;
62947: GO 63039
// vehicle := IsInUnit ( driver ) ;
62949: LD_ADDR_VAR 0 3
62953: PUSH
62954: LD_VAR 0 1
62958: PPUSH
62959: CALL_OW 310
62963: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62964: LD_VAR 0 1
62968: PPUSH
62969: LD_STRING \
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: PUSH
62999: LD_STRING E
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: LD_VAR 0 3
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PPUSH
63035: CALL_OW 447
// end ;
63039: LD_VAR 0 2
63043: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63044: LD_INT 0
63046: PPUSH
63047: PPUSH
63048: PPUSH
// tmp := [ ] ;
63049: LD_ADDR_VAR 0 5
63053: PUSH
63054: EMPTY
63055: ST_TO_ADDR
// for i in units do
63056: LD_ADDR_VAR 0 4
63060: PUSH
63061: LD_VAR 0 1
63065: PUSH
63066: FOR_IN
63067: IFFALSE 63105
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63069: LD_ADDR_VAR 0 5
63073: PUSH
63074: LD_VAR 0 5
63078: PPUSH
63079: LD_VAR 0 5
63083: PUSH
63084: LD_INT 1
63086: PLUS
63087: PPUSH
63088: LD_VAR 0 4
63092: PPUSH
63093: CALL_OW 256
63097: PPUSH
63098: CALL_OW 2
63102: ST_TO_ADDR
63103: GO 63066
63105: POP
63106: POP
// if not tmp then
63107: LD_VAR 0 5
63111: NOT
63112: IFFALSE 63116
// exit ;
63114: GO 63164
// if asc then
63116: LD_VAR 0 2
63120: IFFALSE 63144
// result := SortListByListAsc ( units , tmp ) else
63122: LD_ADDR_VAR 0 3
63126: PUSH
63127: LD_VAR 0 1
63131: PPUSH
63132: LD_VAR 0 5
63136: PPUSH
63137: CALL_OW 76
63141: ST_TO_ADDR
63142: GO 63164
// result := SortListByListDesc ( units , tmp ) ;
63144: LD_ADDR_VAR 0 3
63148: PUSH
63149: LD_VAR 0 1
63153: PPUSH
63154: LD_VAR 0 5
63158: PPUSH
63159: CALL_OW 77
63163: ST_TO_ADDR
// end ;
63164: LD_VAR 0 3
63168: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63169: LD_INT 0
63171: PPUSH
63172: PPUSH
// task := GetTaskList ( mech ) ;
63173: LD_ADDR_VAR 0 4
63177: PUSH
63178: LD_VAR 0 1
63182: PPUSH
63183: CALL_OW 437
63187: ST_TO_ADDR
// if not task then
63188: LD_VAR 0 4
63192: NOT
63193: IFFALSE 63197
// exit ;
63195: GO 63239
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63197: LD_ADDR_VAR 0 3
63201: PUSH
63202: LD_VAR 0 4
63206: PUSH
63207: LD_INT 1
63209: ARRAY
63210: PUSH
63211: LD_INT 1
63213: ARRAY
63214: PUSH
63215: LD_STRING r
63217: EQUAL
63218: PUSH
63219: LD_VAR 0 4
63223: PUSH
63224: LD_INT 1
63226: ARRAY
63227: PUSH
63228: LD_INT 4
63230: ARRAY
63231: PUSH
63232: LD_VAR 0 2
63236: EQUAL
63237: AND
63238: ST_TO_ADDR
// end ;
63239: LD_VAR 0 3
63243: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63244: LD_INT 0
63246: PPUSH
// SetDir ( unit , d ) ;
63247: LD_VAR 0 1
63251: PPUSH
63252: LD_VAR 0 4
63256: PPUSH
63257: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63261: LD_VAR 0 1
63265: PPUSH
63266: LD_VAR 0 2
63270: PPUSH
63271: LD_VAR 0 3
63275: PPUSH
63276: LD_VAR 0 5
63280: PPUSH
63281: CALL_OW 48
// end ;
63285: LD_VAR 0 6
63289: RET
// export function ToNaturalNumber ( number ) ; begin
63290: LD_INT 0
63292: PPUSH
// result := number div 1 ;
63293: LD_ADDR_VAR 0 2
63297: PUSH
63298: LD_VAR 0 1
63302: PUSH
63303: LD_INT 1
63305: DIV
63306: ST_TO_ADDR
// if number < 0 then
63307: LD_VAR 0 1
63311: PUSH
63312: LD_INT 0
63314: LESS
63315: IFFALSE 63325
// result := 0 ;
63317: LD_ADDR_VAR 0 2
63321: PUSH
63322: LD_INT 0
63324: ST_TO_ADDR
// end ;
63325: LD_VAR 0 2
63329: RET
// export function SortByClass ( units , class ) ; var un ; begin
63330: LD_INT 0
63332: PPUSH
63333: PPUSH
// if not units or not class then
63334: LD_VAR 0 1
63338: NOT
63339: PUSH
63340: LD_VAR 0 2
63344: NOT
63345: OR
63346: IFFALSE 63350
// exit ;
63348: GO 63445
// result := [ ] ;
63350: LD_ADDR_VAR 0 3
63354: PUSH
63355: EMPTY
63356: ST_TO_ADDR
// for un in units do
63357: LD_ADDR_VAR 0 4
63361: PUSH
63362: LD_VAR 0 1
63366: PUSH
63367: FOR_IN
63368: IFFALSE 63443
// if GetClass ( un ) = class then
63370: LD_VAR 0 4
63374: PPUSH
63375: CALL_OW 257
63379: PUSH
63380: LD_VAR 0 2
63384: EQUAL
63385: IFFALSE 63412
// result := Insert ( result , 1 , un ) else
63387: LD_ADDR_VAR 0 3
63391: PUSH
63392: LD_VAR 0 3
63396: PPUSH
63397: LD_INT 1
63399: PPUSH
63400: LD_VAR 0 4
63404: PPUSH
63405: CALL_OW 2
63409: ST_TO_ADDR
63410: GO 63441
// result := Replace ( result , result + 1 , un ) ;
63412: LD_ADDR_VAR 0 3
63416: PUSH
63417: LD_VAR 0 3
63421: PPUSH
63422: LD_VAR 0 3
63426: PUSH
63427: LD_INT 1
63429: PLUS
63430: PPUSH
63431: LD_VAR 0 4
63435: PPUSH
63436: CALL_OW 1
63440: ST_TO_ADDR
63441: GO 63367
63443: POP
63444: POP
// end ;
63445: LD_VAR 0 3
63449: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63450: LD_INT 0
63452: PPUSH
63453: PPUSH
63454: PPUSH
63455: PPUSH
63456: PPUSH
63457: PPUSH
63458: PPUSH
// result := [ ] ;
63459: LD_ADDR_VAR 0 4
63463: PUSH
63464: EMPTY
63465: ST_TO_ADDR
// if x - r < 0 then
63466: LD_VAR 0 1
63470: PUSH
63471: LD_VAR 0 3
63475: MINUS
63476: PUSH
63477: LD_INT 0
63479: LESS
63480: IFFALSE 63492
// min_x := 0 else
63482: LD_ADDR_VAR 0 8
63486: PUSH
63487: LD_INT 0
63489: ST_TO_ADDR
63490: GO 63508
// min_x := x - r ;
63492: LD_ADDR_VAR 0 8
63496: PUSH
63497: LD_VAR 0 1
63501: PUSH
63502: LD_VAR 0 3
63506: MINUS
63507: ST_TO_ADDR
// if y - r < 0 then
63508: LD_VAR 0 2
63512: PUSH
63513: LD_VAR 0 3
63517: MINUS
63518: PUSH
63519: LD_INT 0
63521: LESS
63522: IFFALSE 63534
// min_y := 0 else
63524: LD_ADDR_VAR 0 7
63528: PUSH
63529: LD_INT 0
63531: ST_TO_ADDR
63532: GO 63550
// min_y := y - r ;
63534: LD_ADDR_VAR 0 7
63538: PUSH
63539: LD_VAR 0 2
63543: PUSH
63544: LD_VAR 0 3
63548: MINUS
63549: ST_TO_ADDR
// max_x := x + r ;
63550: LD_ADDR_VAR 0 9
63554: PUSH
63555: LD_VAR 0 1
63559: PUSH
63560: LD_VAR 0 3
63564: PLUS
63565: ST_TO_ADDR
// max_y := y + r ;
63566: LD_ADDR_VAR 0 10
63570: PUSH
63571: LD_VAR 0 2
63575: PUSH
63576: LD_VAR 0 3
63580: PLUS
63581: ST_TO_ADDR
// for _x = min_x to max_x do
63582: LD_ADDR_VAR 0 5
63586: PUSH
63587: DOUBLE
63588: LD_VAR 0 8
63592: DEC
63593: ST_TO_ADDR
63594: LD_VAR 0 9
63598: PUSH
63599: FOR_TO
63600: IFFALSE 63701
// for _y = min_y to max_y do
63602: LD_ADDR_VAR 0 6
63606: PUSH
63607: DOUBLE
63608: LD_VAR 0 7
63612: DEC
63613: ST_TO_ADDR
63614: LD_VAR 0 10
63618: PUSH
63619: FOR_TO
63620: IFFALSE 63697
// begin if not ValidHex ( _x , _y ) then
63622: LD_VAR 0 5
63626: PPUSH
63627: LD_VAR 0 6
63631: PPUSH
63632: CALL_OW 488
63636: NOT
63637: IFFALSE 63641
// continue ;
63639: GO 63619
// if GetResourceTypeXY ( _x , _y ) then
63641: LD_VAR 0 5
63645: PPUSH
63646: LD_VAR 0 6
63650: PPUSH
63651: CALL_OW 283
63655: IFFALSE 63695
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63657: LD_ADDR_VAR 0 4
63661: PUSH
63662: LD_VAR 0 4
63666: PPUSH
63667: LD_VAR 0 4
63671: PUSH
63672: LD_INT 1
63674: PLUS
63675: PPUSH
63676: LD_VAR 0 5
63680: PUSH
63681: LD_VAR 0 6
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PPUSH
63690: CALL_OW 1
63694: ST_TO_ADDR
// end ;
63695: GO 63619
63697: POP
63698: POP
63699: GO 63599
63701: POP
63702: POP
// end ;
63703: LD_VAR 0 4
63707: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63708: LD_INT 0
63710: PPUSH
63711: PPUSH
63712: PPUSH
63713: PPUSH
63714: PPUSH
63715: PPUSH
63716: PPUSH
63717: PPUSH
// if not units then
63718: LD_VAR 0 1
63722: NOT
63723: IFFALSE 63727
// exit ;
63725: GO 64238
// result := UnitFilter ( units , [ f_ok ] ) ;
63727: LD_ADDR_VAR 0 3
63731: PUSH
63732: LD_VAR 0 1
63736: PPUSH
63737: LD_INT 50
63739: PUSH
63740: EMPTY
63741: LIST
63742: PPUSH
63743: CALL_OW 72
63747: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63748: LD_ADDR_VAR 0 8
63752: PUSH
63753: LD_VAR 0 1
63757: PUSH
63758: LD_INT 1
63760: ARRAY
63761: PPUSH
63762: CALL_OW 255
63766: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63767: LD_ADDR_VAR 0 10
63771: PUSH
63772: LD_INT 29
63774: PUSH
63775: LD_EXP 97
63779: PUSH
63780: LD_INT 49
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: ST_TO_ADDR
// if not result then
63788: LD_VAR 0 3
63792: NOT
63793: IFFALSE 63797
// exit ;
63795: GO 64238
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63797: LD_ADDR_VAR 0 5
63801: PUSH
63802: LD_INT 81
63804: PUSH
63805: LD_VAR 0 8
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PPUSH
63814: CALL_OW 69
63818: ST_TO_ADDR
// for i in result do
63819: LD_ADDR_VAR 0 4
63823: PUSH
63824: LD_VAR 0 3
63828: PUSH
63829: FOR_IN
63830: IFFALSE 64236
// begin tag := GetTag ( i ) + 1 ;
63832: LD_ADDR_VAR 0 9
63836: PUSH
63837: LD_VAR 0 4
63841: PPUSH
63842: CALL_OW 110
63846: PUSH
63847: LD_INT 1
63849: PLUS
63850: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63851: LD_ADDR_VAR 0 7
63855: PUSH
63856: LD_VAR 0 4
63860: PPUSH
63861: CALL_OW 250
63865: PPUSH
63866: LD_VAR 0 4
63870: PPUSH
63871: CALL_OW 251
63875: PPUSH
63876: LD_INT 6
63878: PPUSH
63879: CALL 63450 0 3
63883: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63884: LD_VAR 0 7
63888: PUSH
63889: LD_VAR 0 4
63893: PPUSH
63894: CALL_OW 264
63898: PUSH
63899: LD_VAR 0 10
63903: IN
63904: NOT
63905: AND
63906: IFFALSE 63945
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63908: LD_VAR 0 4
63912: PPUSH
63913: LD_VAR 0 7
63917: PUSH
63918: LD_INT 1
63920: ARRAY
63921: PUSH
63922: LD_INT 1
63924: ARRAY
63925: PPUSH
63926: LD_VAR 0 7
63930: PUSH
63931: LD_INT 1
63933: ARRAY
63934: PUSH
63935: LD_INT 2
63937: ARRAY
63938: PPUSH
63939: CALL_OW 116
63943: GO 64234
// if path > tag then
63945: LD_VAR 0 2
63949: PUSH
63950: LD_VAR 0 9
63954: GREATER
63955: IFFALSE 64163
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
63957: LD_ADDR_VAR 0 6
63961: PUSH
63962: LD_VAR 0 5
63966: PPUSH
63967: LD_INT 91
63969: PUSH
63970: LD_VAR 0 4
63974: PUSH
63975: LD_INT 12
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: LIST
63982: PPUSH
63983: CALL_OW 72
63987: ST_TO_ADDR
// if nearEnemy then
63988: LD_VAR 0 6
63992: IFFALSE 64061
// begin if GetWeapon ( i ) = ru_time_lapser then
63994: LD_VAR 0 4
63998: PPUSH
63999: CALL_OW 264
64003: PUSH
64004: LD_INT 49
64006: EQUAL
64007: IFFALSE 64035
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64009: LD_VAR 0 4
64013: PPUSH
64014: LD_VAR 0 6
64018: PPUSH
64019: LD_VAR 0 4
64023: PPUSH
64024: CALL_OW 74
64028: PPUSH
64029: CALL_OW 112
64033: GO 64059
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64035: LD_VAR 0 4
64039: PPUSH
64040: LD_VAR 0 6
64044: PPUSH
64045: LD_VAR 0 4
64049: PPUSH
64050: CALL_OW 74
64054: PPUSH
64055: CALL_OW 115
// end else
64059: GO 64161
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64061: LD_VAR 0 4
64065: PPUSH
64066: LD_VAR 0 2
64070: PUSH
64071: LD_VAR 0 9
64075: ARRAY
64076: PUSH
64077: LD_INT 1
64079: ARRAY
64080: PPUSH
64081: LD_VAR 0 2
64085: PUSH
64086: LD_VAR 0 9
64090: ARRAY
64091: PUSH
64092: LD_INT 2
64094: ARRAY
64095: PPUSH
64096: CALL_OW 297
64100: PUSH
64101: LD_INT 6
64103: GREATER
64104: IFFALSE 64147
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64106: LD_VAR 0 4
64110: PPUSH
64111: LD_VAR 0 2
64115: PUSH
64116: LD_VAR 0 9
64120: ARRAY
64121: PUSH
64122: LD_INT 1
64124: ARRAY
64125: PPUSH
64126: LD_VAR 0 2
64130: PUSH
64131: LD_VAR 0 9
64135: ARRAY
64136: PUSH
64137: LD_INT 2
64139: ARRAY
64140: PPUSH
64141: CALL_OW 114
64145: GO 64161
// SetTag ( i , tag ) ;
64147: LD_VAR 0 4
64151: PPUSH
64152: LD_VAR 0 9
64156: PPUSH
64157: CALL_OW 109
// end else
64161: GO 64234
// if enemy then
64163: LD_VAR 0 5
64167: IFFALSE 64234
// begin if GetWeapon ( i ) = ru_time_lapser then
64169: LD_VAR 0 4
64173: PPUSH
64174: CALL_OW 264
64178: PUSH
64179: LD_INT 49
64181: EQUAL
64182: IFFALSE 64210
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64184: LD_VAR 0 4
64188: PPUSH
64189: LD_VAR 0 5
64193: PPUSH
64194: LD_VAR 0 4
64198: PPUSH
64199: CALL_OW 74
64203: PPUSH
64204: CALL_OW 112
64208: GO 64234
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64210: LD_VAR 0 4
64214: PPUSH
64215: LD_VAR 0 5
64219: PPUSH
64220: LD_VAR 0 4
64224: PPUSH
64225: CALL_OW 74
64229: PPUSH
64230: CALL_OW 115
// end ; end ;
64234: GO 63829
64236: POP
64237: POP
// end ;
64238: LD_VAR 0 3
64242: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64243: LD_INT 0
64245: PPUSH
64246: PPUSH
64247: PPUSH
// if not unit or IsInUnit ( unit ) then
64248: LD_VAR 0 1
64252: NOT
64253: PUSH
64254: LD_VAR 0 1
64258: PPUSH
64259: CALL_OW 310
64263: OR
64264: IFFALSE 64268
// exit ;
64266: GO 64359
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64268: LD_ADDR_VAR 0 4
64272: PUSH
64273: LD_VAR 0 1
64277: PPUSH
64278: CALL_OW 250
64282: PPUSH
64283: LD_VAR 0 2
64287: PPUSH
64288: LD_INT 1
64290: PPUSH
64291: CALL_OW 272
64295: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64296: LD_ADDR_VAR 0 5
64300: PUSH
64301: LD_VAR 0 1
64305: PPUSH
64306: CALL_OW 251
64310: PPUSH
64311: LD_VAR 0 2
64315: PPUSH
64316: LD_INT 1
64318: PPUSH
64319: CALL_OW 273
64323: ST_TO_ADDR
// if ValidHex ( x , y ) then
64324: LD_VAR 0 4
64328: PPUSH
64329: LD_VAR 0 5
64333: PPUSH
64334: CALL_OW 488
64338: IFFALSE 64359
// ComTurnXY ( unit , x , y ) ;
64340: LD_VAR 0 1
64344: PPUSH
64345: LD_VAR 0 4
64349: PPUSH
64350: LD_VAR 0 5
64354: PPUSH
64355: CALL_OW 118
// end ;
64359: LD_VAR 0 3
64363: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64364: LD_INT 0
64366: PPUSH
64367: PPUSH
// result := false ;
64368: LD_ADDR_VAR 0 3
64372: PUSH
64373: LD_INT 0
64375: ST_TO_ADDR
// if not units then
64376: LD_VAR 0 2
64380: NOT
64381: IFFALSE 64385
// exit ;
64383: GO 64430
// for i in units do
64385: LD_ADDR_VAR 0 4
64389: PUSH
64390: LD_VAR 0 2
64394: PUSH
64395: FOR_IN
64396: IFFALSE 64428
// if See ( side , i ) then
64398: LD_VAR 0 1
64402: PPUSH
64403: LD_VAR 0 4
64407: PPUSH
64408: CALL_OW 292
64412: IFFALSE 64426
// begin result := true ;
64414: LD_ADDR_VAR 0 3
64418: PUSH
64419: LD_INT 1
64421: ST_TO_ADDR
// exit ;
64422: POP
64423: POP
64424: GO 64430
// end ;
64426: GO 64395
64428: POP
64429: POP
// end ;
64430: LD_VAR 0 3
64434: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64435: LD_INT 0
64437: PPUSH
64438: PPUSH
64439: PPUSH
64440: PPUSH
// if not unit or not points then
64441: LD_VAR 0 1
64445: NOT
64446: PUSH
64447: LD_VAR 0 2
64451: NOT
64452: OR
64453: IFFALSE 64457
// exit ;
64455: GO 64547
// dist := 99999 ;
64457: LD_ADDR_VAR 0 5
64461: PUSH
64462: LD_INT 99999
64464: ST_TO_ADDR
// for i in points do
64465: LD_ADDR_VAR 0 4
64469: PUSH
64470: LD_VAR 0 2
64474: PUSH
64475: FOR_IN
64476: IFFALSE 64545
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64478: LD_ADDR_VAR 0 6
64482: PUSH
64483: LD_VAR 0 1
64487: PPUSH
64488: LD_VAR 0 4
64492: PUSH
64493: LD_INT 1
64495: ARRAY
64496: PPUSH
64497: LD_VAR 0 4
64501: PUSH
64502: LD_INT 2
64504: ARRAY
64505: PPUSH
64506: CALL_OW 297
64510: ST_TO_ADDR
// if tmpDist < dist then
64511: LD_VAR 0 6
64515: PUSH
64516: LD_VAR 0 5
64520: LESS
64521: IFFALSE 64543
// begin result := i ;
64523: LD_ADDR_VAR 0 3
64527: PUSH
64528: LD_VAR 0 4
64532: ST_TO_ADDR
// dist := tmpDist ;
64533: LD_ADDR_VAR 0 5
64537: PUSH
64538: LD_VAR 0 6
64542: ST_TO_ADDR
// end ; end ;
64543: GO 64475
64545: POP
64546: POP
// end ;
64547: LD_VAR 0 3
64551: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64552: LD_INT 0
64554: PPUSH
// uc_side := side ;
64555: LD_ADDR_OWVAR 20
64559: PUSH
64560: LD_VAR 0 1
64564: ST_TO_ADDR
// uc_nation := 3 ;
64565: LD_ADDR_OWVAR 21
64569: PUSH
64570: LD_INT 3
64572: ST_TO_ADDR
// vc_chassis := 25 ;
64573: LD_ADDR_OWVAR 37
64577: PUSH
64578: LD_INT 25
64580: ST_TO_ADDR
// vc_engine := engine_siberite ;
64581: LD_ADDR_OWVAR 39
64585: PUSH
64586: LD_INT 3
64588: ST_TO_ADDR
// vc_control := control_computer ;
64589: LD_ADDR_OWVAR 38
64593: PUSH
64594: LD_INT 3
64596: ST_TO_ADDR
// vc_weapon := 59 ;
64597: LD_ADDR_OWVAR 40
64601: PUSH
64602: LD_INT 59
64604: ST_TO_ADDR
// result := CreateVehicle ;
64605: LD_ADDR_VAR 0 5
64609: PUSH
64610: CALL_OW 45
64614: ST_TO_ADDR
// SetDir ( result , d ) ;
64615: LD_VAR 0 5
64619: PPUSH
64620: LD_VAR 0 4
64624: PPUSH
64625: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64629: LD_VAR 0 5
64633: PPUSH
64634: LD_VAR 0 2
64638: PPUSH
64639: LD_VAR 0 3
64643: PPUSH
64644: LD_INT 0
64646: PPUSH
64647: CALL_OW 48
// end ;
64651: LD_VAR 0 5
64655: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64656: LD_INT 0
64658: PPUSH
64659: PPUSH
64660: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64661: LD_ADDR_VAR 0 2
64665: PUSH
64666: LD_INT 0
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64684: LD_VAR 0 1
64688: NOT
64689: PUSH
64690: LD_VAR 0 1
64694: PPUSH
64695: CALL_OW 264
64699: PUSH
64700: LD_INT 12
64702: PUSH
64703: LD_INT 51
64705: PUSH
64706: LD_INT 32
64708: PUSH
64709: LD_EXP 94
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: IN
64720: NOT
64721: OR
64722: IFFALSE 64726
// exit ;
64724: GO 64824
// for i := 1 to 3 do
64726: LD_ADDR_VAR 0 3
64730: PUSH
64731: DOUBLE
64732: LD_INT 1
64734: DEC
64735: ST_TO_ADDR
64736: LD_INT 3
64738: PUSH
64739: FOR_TO
64740: IFFALSE 64822
// begin tmp := GetCargo ( cargo , i ) ;
64742: LD_ADDR_VAR 0 4
64746: PUSH
64747: LD_VAR 0 1
64751: PPUSH
64752: LD_VAR 0 3
64756: PPUSH
64757: CALL_OW 289
64761: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64762: LD_ADDR_VAR 0 2
64766: PUSH
64767: LD_VAR 0 2
64771: PPUSH
64772: LD_VAR 0 3
64776: PPUSH
64777: LD_VAR 0 4
64781: PPUSH
64782: CALL_OW 1
64786: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64787: LD_ADDR_VAR 0 2
64791: PUSH
64792: LD_VAR 0 2
64796: PPUSH
64797: LD_INT 4
64799: PPUSH
64800: LD_VAR 0 2
64804: PUSH
64805: LD_INT 4
64807: ARRAY
64808: PUSH
64809: LD_VAR 0 4
64813: PLUS
64814: PPUSH
64815: CALL_OW 1
64819: ST_TO_ADDR
// end ;
64820: GO 64739
64822: POP
64823: POP
// end ;
64824: LD_VAR 0 2
64828: RET
