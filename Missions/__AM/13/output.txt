// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 902 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2057 0 0
// PrepareHeroes ;
  82: CALL 1082 0 0
// PrepareRandoms ;
  86: CALL 3416 0 0
// Action ;
  90: CALL 5206 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 799
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_STRING Lisa
 588: PPUSH
 589: LD_EXP 22
 593: PPUSH
 594: CALL 4212 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 598: LD_EXP 8
 602: PPUSH
 603: LD_STRING Brown
 605: PPUSH
 606: LD_EXP 22
 610: PPUSH
 611: CALL 4212 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 615: LD_EXP 4
 619: PPUSH
 620: LD_STRING Donaldson
 622: PPUSH
 623: LD_EXP 22
 627: PPUSH
 628: CALL 4212 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 632: LD_EXP 5
 636: PPUSH
 637: LD_STRING Bobby
 639: PPUSH
 640: LD_EXP 22
 644: PPUSH
 645: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 649: LD_EXP 6
 653: PPUSH
 654: LD_STRING Cyrus
 656: PPUSH
 657: LD_EXP 22
 661: PPUSH
 662: CALL 4212 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 666: LD_EXP 7
 670: PPUSH
 671: LD_STRING Denis
 673: PPUSH
 674: LD_EXP 22
 678: PPUSH
 679: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 683: LD_EXP 9
 687: PPUSH
 688: LD_STRING Gladstone
 690: PPUSH
 691: LD_EXP 22
 695: PPUSH
 696: CALL 4212 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 700: LD_EXP 10
 704: PPUSH
 705: LD_STRING Houten
 707: PPUSH
 708: LD_EXP 22
 712: PPUSH
 713: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 717: LD_EXP 11
 721: PPUSH
 722: LD_STRING Cornel
 724: PPUSH
 725: LD_EXP 22
 729: PPUSH
 730: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 734: LD_EXP 12
 738: PPUSH
 739: LD_STRING Gary
 741: PPUSH
 742: LD_EXP 22
 746: PPUSH
 747: CALL 4212 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_STRING Frank
 758: PPUSH
 759: LD_EXP 22
 763: PPUSH
 764: CALL 4212 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 768: LD_EXP 14
 772: PPUSH
 773: LD_STRING Kikuchi
 775: PPUSH
 776: LD_EXP 22
 780: PPUSH
 781: CALL 4212 0 3
// SaveCargos ;
 785: CALL 802 0 0
// ChangeMap ( 13 , %_cont ) ;
 789: LD_INT 13
 791: PPUSH
 792: LD_STRING %_cont
 794: PPUSH
 795: CALL_OW 340
// end ;
 799: PPOPN 2
 801: END
// export function SaveCargos ; var i ; begin
 802: LD_INT 0
 804: PPUSH
 805: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 806: LD_ADDR_VAR 0 2
 810: PUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 22
 816: PUSH
 817: LD_INT 1
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 33
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 34
 836: PUSH
 837: LD_INT 12
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PPUSH
 849: CALL_OW 70
 853: PUSH
 854: FOR_IN
 855: IFFALSE 883
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 857: LD_ADDR_EXP 20
 861: PUSH
 862: LD_EXP 20
 866: PUSH
 867: LD_VAR 0 2
 871: PPUSH
 872: CALL 66534 0 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: ADD
 880: ST_TO_ADDR
 881: GO 854
 883: POP
 884: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 885: LD_EXP 20
 889: PPUSH
 890: LD_STRING 13_ResourcesInCargo13_1
 892: PPUSH
 893: CALL_OW 39
// end ;
 897: LD_VAR 0 1
 901: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 902: LD_INT 0
 904: PPUSH
 905: PPUSH
 906: PPUSH
 907: PPUSH
 908: PPUSH
 909: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_STRING 10_EpsilonEnv
 917: PPUSH
 918: EMPTY
 919: PPUSH
 920: CALL_OW 30
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 2
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1077
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: CALL_OW 353
 946: ST_TO_ADDR
// if not list then
 947: LD_VAR 0 3
 951: NOT
 952: IFFALSE 956
// exit ;
 954: GO 1077
// for i in list do
 956: LD_ADDR_VAR 0 4
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: FOR_IN
 967: IFFALSE 1075
// begin exist := false ;
 969: LD_ADDR_VAR 0 6
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// for j in tmp do
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: FOR_IN
 988: IFFALSE 1042
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 990: LD_VAR 0 4
 994: PUSH
 995: LD_INT 1
 997: ARRAY
 998: PUSH
 999: LD_VAR 0 5
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: EQUAL
1008: PUSH
1009: LD_VAR 0 4
1013: PUSH
1014: LD_INT 2
1016: ARRAY
1017: PUSH
1018: LD_VAR 0 5
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: EQUAL
1027: AND
1028: IFFALSE 1040
// begin exist := true ;
1030: LD_ADDR_VAR 0 6
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// break ;
1038: GO 1042
// end ;
1040: GO 987
1042: POP
1043: POP
// if not exist then
1044: LD_VAR 0 6
1048: NOT
1049: IFFALSE 1073
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1051: LD_VAR 0 4
1055: PUSH
1056: LD_INT 1
1058: ARRAY
1059: PPUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_INT 2
1067: ARRAY
1068: PPUSH
1069: CALL_OW 347
// end ;
1073: GO 966
1075: POP
1076: POP
// end ; end_of_file
1077: LD_VAR 0 1
1081: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1082: LD_INT 0
1084: PPUSH
1085: PPUSH
1086: PPUSH
1087: PPUSH
1088: PPUSH
1089: PPUSH
1090: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1091: LD_ADDR_VAR 0 4
1095: PUSH
1096: LD_INT 22
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 23
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: LD_INT 30
1121: PUSH
1122: LD_INT 0
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 30
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PPUSH
1149: CALL_OW 69
1153: ST_TO_ADDR
// if tmp then
1154: LD_VAR 0 4
1158: IFFALSE 1280
// begin x := GetX ( tmp [ 1 ] ) ;
1160: LD_ADDR_VAR 0 5
1164: PUSH
1165: LD_VAR 0 4
1169: PUSH
1170: LD_INT 1
1172: ARRAY
1173: PPUSH
1174: CALL_OW 250
1178: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1179: LD_ADDR_VAR 0 6
1183: PUSH
1184: LD_VAR 0 4
1188: PUSH
1189: LD_INT 1
1191: ARRAY
1192: PPUSH
1193: CALL_OW 251
1197: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1198: LD_VAR 0 4
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: LD_STRING epsilon
1209: PPUSH
1210: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1214: LD_ADDR_VAR 0 7
1218: PUSH
1219: LD_VAR 0 4
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: PPUSH
1228: CALL_OW 274
1232: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1233: LD_VAR 0 7
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_INT 3000
1243: PPUSH
1244: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1248: LD_VAR 0 7
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: LD_INT 500
1258: PPUSH
1259: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1263: LD_VAR 0 7
1267: PPUSH
1268: LD_INT 3
1270: PPUSH
1271: LD_INT 200
1273: PPUSH
1274: CALL_OW 277
// end else
1278: GO 1296
// begin x := 104 ;
1280: LD_ADDR_VAR 0 5
1284: PUSH
1285: LD_INT 104
1287: ST_TO_ADDR
// y := 32 ;
1288: LD_ADDR_VAR 0 6
1292: PUSH
1293: LD_INT 32
1295: ST_TO_ADDR
// end ; uc_side := 1 ;
1296: LD_ADDR_OWVAR 20
1300: PUSH
1301: LD_INT 1
1303: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1304: LD_ADDR_EXP 1
1308: PUSH
1309: LD_STRING JMM
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: CALL 3686 0 2
1319: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1320: LD_ADDR_EXP 3
1324: PUSH
1325: LD_STRING Lisa
1327: PPUSH
1328: LD_INT 1
1330: PPUSH
1331: CALL 3686 0 2
1335: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1336: LD_ADDR_EXP 4
1340: PUSH
1341: LD_STRING Donaldson
1343: PPUSH
1344: LD_INT 1
1346: PPUSH
1347: CALL 3686 0 2
1351: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1352: LD_ADDR_EXP 5
1356: PUSH
1357: LD_STRING Bobby
1359: PPUSH
1360: LD_INT 1
1362: PPUSH
1363: CALL 3686 0 2
1367: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1368: LD_ADDR_EXP 6
1372: PUSH
1373: LD_STRING Cyrus
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 3686 0 2
1383: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1384: LD_ADDR_EXP 7
1388: PUSH
1389: LD_STRING Denis
1391: PPUSH
1392: LD_INT 1
1394: PPUSH
1395: CALL 3686 0 2
1399: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1400: LD_ADDR_EXP 8
1404: PUSH
1405: LD_STRING Brown
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: CALL 3686 0 2
1415: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1416: LD_ADDR_EXP 9
1420: PUSH
1421: LD_STRING Gladstone
1423: PPUSH
1424: LD_INT 1
1426: PPUSH
1427: CALL 3686 0 2
1431: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1432: LD_ADDR_EXP 10
1436: PUSH
1437: LD_STRING Houten
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL 3686 0 2
1447: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1448: LD_ADDR_EXP 11
1452: PUSH
1453: LD_STRING Cornell
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: CALL 3686 0 2
1463: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1464: LD_ADDR_EXP 12
1468: PUSH
1469: LD_STRING Gary
1471: PPUSH
1472: LD_INT 1
1474: PPUSH
1475: CALL 3686 0 2
1479: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1480: LD_ADDR_EXP 13
1484: PUSH
1485: LD_STRING Frank
1487: PPUSH
1488: LD_INT 1
1490: PPUSH
1491: CALL 3686 0 2
1495: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1496: LD_ADDR_EXP 14
1500: PUSH
1501: LD_STRING Kikuchi
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: CALL 3686 0 2
1511: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1512: LD_ADDR_EXP 15
1516: PUSH
1517: LD_STRING Stevens
1519: PPUSH
1520: LD_INT 0
1522: PPUSH
1523: CALL 3686 0 2
1527: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1528: LD_ADDR_EXP 2
1532: PUSH
1533: LD_STRING Powell
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL 3686 0 2
1543: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1544: LD_EXP 1
1548: PPUSH
1549: LD_VAR 0 5
1553: PPUSH
1554: LD_VAR 0 6
1558: PPUSH
1559: LD_INT 4
1561: PPUSH
1562: LD_INT 0
1564: PPUSH
1565: CALL 3859 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1569: LD_EXP 15
1573: PPUSH
1574: LD_VAR 0 5
1578: PPUSH
1579: LD_VAR 0 6
1583: PPUSH
1584: LD_INT 4
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL 3859 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1594: LD_EXP 3
1598: PPUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: LD_VAR 0 6
1608: PPUSH
1609: LD_INT 35
1611: PPUSH
1612: LD_INT 0
1614: PPUSH
1615: CALL 3859 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1619: LD_EXP 4
1623: PPUSH
1624: LD_VAR 0 5
1628: PPUSH
1629: LD_VAR 0 6
1633: PPUSH
1634: LD_INT 35
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL 3859 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1644: LD_EXP 5
1648: PPUSH
1649: LD_VAR 0 5
1653: PPUSH
1654: LD_VAR 0 6
1658: PPUSH
1659: LD_INT 35
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL 3859 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_VAR 0 5
1678: PPUSH
1679: LD_VAR 0 6
1683: PPUSH
1684: LD_INT 35
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: CALL 3859 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1694: LD_EXP 7
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: LD_VAR 0 6
1708: PPUSH
1709: LD_INT 35
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL 3859 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1719: LD_EXP 8
1723: PPUSH
1724: LD_VAR 0 5
1728: PPUSH
1729: LD_VAR 0 6
1733: PPUSH
1734: LD_INT 35
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: CALL 3859 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1744: LD_EXP 9
1748: PPUSH
1749: LD_VAR 0 5
1753: PPUSH
1754: LD_VAR 0 6
1758: PPUSH
1759: LD_INT 35
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 3859 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1769: LD_EXP 10
1773: PPUSH
1774: LD_VAR 0 5
1778: PPUSH
1779: LD_VAR 0 6
1783: PPUSH
1784: LD_INT 35
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL 3859 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1794: LD_EXP 11
1798: PPUSH
1799: LD_VAR 0 5
1803: PPUSH
1804: LD_VAR 0 6
1808: PPUSH
1809: LD_INT 35
1811: PPUSH
1812: LD_INT 0
1814: PPUSH
1815: CALL 3859 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1819: LD_EXP 12
1823: PPUSH
1824: LD_VAR 0 5
1828: PPUSH
1829: LD_VAR 0 6
1833: PPUSH
1834: LD_INT 35
1836: PPUSH
1837: LD_INT 0
1839: PPUSH
1840: CALL 3859 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1844: LD_EXP 13
1848: PPUSH
1849: LD_VAR 0 5
1853: PPUSH
1854: LD_VAR 0 6
1858: PPUSH
1859: LD_INT 35
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL 3859 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1869: LD_EXP 14
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: LD_VAR 0 6
1883: PPUSH
1884: LD_INT 35
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL 3859 0 5
// SetClass ( JMM , 1 ) ;
1894: LD_EXP 1
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1906: LD_ADDR_EXP 16
1910: PUSH
1911: LD_STRING 12_other_survivors
1913: PPUSH
1914: CALL_OW 31
1918: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1919: LD_ADDR_EXP 17
1923: PUSH
1924: LD_STRING 12_others
1926: PPUSH
1927: CALL_OW 31
1931: ST_TO_ADDR
// for i in others11 do
1932: LD_ADDR_VAR 0 2
1936: PUSH
1937: LD_EXP 17
1941: PUSH
1942: FOR_IN
1943: IFFALSE 1990
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1945: LD_VAR 0 2
1949: PPUSH
1950: LD_VAR 0 4
1954: PUSH
1955: LD_INT 1
1957: ARRAY
1958: PPUSH
1959: CALL_OW 250
1963: PPUSH
1964: LD_VAR 0 4
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 251
1977: PPUSH
1978: LD_INT 15
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL 3859 0 5
1988: GO 1942
1990: POP
1991: POP
// for i in others12 do
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_EXP 16
2001: PUSH
2002: FOR_IN
2003: IFFALSE 2050
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2005: LD_VAR 0 2
2009: PPUSH
2010: LD_VAR 0 4
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PPUSH
2019: CALL_OW 250
2023: PPUSH
2024: LD_VAR 0 4
2028: PUSH
2029: LD_INT 1
2031: ARRAY
2032: PPUSH
2033: CALL_OW 251
2037: PPUSH
2038: LD_INT 15
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL 3859 0 5
2048: GO 2002
2050: POP
2051: POP
// end ;
2052: LD_VAR 0 1
2056: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2057: LD_INT 0
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
2063: PPUSH
2064: PPUSH
2065: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2066: LD_INT 113
2068: PPUSH
2069: LD_INT 50
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2079: LD_INT 104
2081: PPUSH
2082: LD_INT 24
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2092: LD_INT 43
2094: PPUSH
2095: LD_INT 79
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2105: LD_INT 43
2107: PPUSH
2108: LD_INT 68
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2118: LD_INT 99
2120: PPUSH
2121: LD_INT 114
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2131: LD_INT 103
2133: PPUSH
2134: LD_INT 114
2136: PPUSH
2137: LD_INT 1
2139: PPUSH
2140: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2144: LD_INT 152
2146: PPUSH
2147: LD_INT 85
2149: PPUSH
2150: LD_INT 1
2152: PPUSH
2153: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2157: LD_INT 156
2159: PPUSH
2160: LD_INT 92
2162: PPUSH
2163: LD_INT 1
2165: PPUSH
2166: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2170: LD_ADDR_VAR 0 2
2174: PUSH
2175: LD_STRING 10_EpsilonBase
2177: PPUSH
2178: EMPTY
2179: PPUSH
2180: CALL_OW 30
2184: ST_TO_ADDR
// if not blist then
2185: LD_VAR 0 2
2189: NOT
2190: IFFALSE 2194
// exit ;
2192: GO 3411
// for i in blist do
2194: LD_ADDR_VAR 0 3
2198: PUSH
2199: LD_VAR 0 2
2203: PUSH
2204: FOR_IN
2205: IFFALSE 2247
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2207: LD_VAR 0 3
2211: PUSH
2212: LD_INT 1
2214: ARRAY
2215: PUSH
2216: LD_INT 0
2218: EQUAL
2219: PUSH
2220: LD_VAR 0 3
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PUSH
2229: LD_INT 1
2231: EQUAL
2232: OR
2233: IFFALSE 2245
// begin baseCorrect := 1 ;
2235: LD_ADDR_VAR 0 6
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// break ;
2243: GO 2247
// end ;
2245: GO 2204
2247: POP
2248: POP
// if baseCorrect = 0 then
2249: LD_VAR 0 6
2253: PUSH
2254: LD_INT 0
2256: EQUAL
2257: IFFALSE 2964
// begin uc_side := 1 ;
2259: LD_ADDR_OWVAR 20
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// uc_nation := 1 ;
2267: LD_ADDR_OWVAR 21
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// bc_level := 10 ;
2275: LD_ADDR_OWVAR 43
2279: PUSH
2280: LD_INT 10
2282: ST_TO_ADDR
// bc_type := b_warehouse ;
2283: LD_ADDR_OWVAR 42
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2291: LD_INT 99
2293: PPUSH
2294: LD_INT 24
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: CALL_OW 47
// bc_type := b_bunker ;
2304: LD_ADDR_OWVAR 42
2308: PUSH
2309: LD_INT 32
2311: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2312: LD_ADDR_VAR 0 7
2316: PUSH
2317: LD_INT 124
2319: PPUSH
2320: LD_INT 42
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: CALL_OW 47
2330: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2331: LD_VAR 0 7
2335: PPUSH
2336: LD_INT 4
2338: PUSH
2339: LD_INT 5
2341: PUSH
2342: LD_INT 6
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 3
2355: PPUSH
2356: CALL_OW 12
2360: ARRAY
2361: PPUSH
2362: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2366: LD_ADDR_VAR 0 7
2370: PUSH
2371: LD_INT 111
2373: PPUSH
2374: LD_INT 16
2376: PPUSH
2377: LD_INT 4
2379: PPUSH
2380: CALL_OW 47
2384: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2385: LD_VAR 0 7
2389: PPUSH
2390: LD_INT 4
2392: PUSH
2393: LD_INT 5
2395: PUSH
2396: LD_INT 6
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 1
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 12
2414: ARRAY
2415: PPUSH
2416: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2420: LD_ADDR_VAR 0 7
2424: PUSH
2425: LD_INT 113
2427: PPUSH
2428: LD_INT 21
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 47
2438: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2439: LD_VAR 0 7
2443: PPUSH
2444: LD_INT 4
2446: PUSH
2447: LD_INT 5
2449: PUSH
2450: LD_INT 6
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 3
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: PPUSH
2470: CALL_OW 431
// bc_type := 33 ;
2474: LD_ADDR_OWVAR 42
2478: PUSH
2479: LD_INT 33
2481: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2482: LD_ADDR_VAR 0 7
2486: PUSH
2487: LD_INT 95
2489: PPUSH
2490: LD_INT 41
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: CALL_OW 47
2500: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2501: LD_VAR 0 7
2505: PPUSH
2506: LD_INT 4
2508: PUSH
2509: LD_INT 5
2511: PUSH
2512: LD_INT 6
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 1
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: CALL_OW 12
2530: ARRAY
2531: PPUSH
2532: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2536: LD_ADDR_VAR 0 7
2540: PUSH
2541: LD_INT 97
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 47
2554: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2555: LD_VAR 0 7
2559: PPUSH
2560: LD_INT 4
2562: PUSH
2563: LD_INT 5
2565: PUSH
2566: LD_INT 6
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 3
2579: PPUSH
2580: CALL_OW 12
2584: ARRAY
2585: PPUSH
2586: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2590: LD_ADDR_VAR 0 7
2594: PUSH
2595: LD_INT 86
2597: PPUSH
2598: LD_INT 19
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: CALL_OW 47
2608: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2609: LD_VAR 0 7
2613: PPUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 5
2619: PUSH
2620: LD_INT 6
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 3
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: PPUSH
2640: CALL_OW 431
// bc_type := 30 ;
2644: LD_ADDR_OWVAR 42
2648: PUSH
2649: LD_INT 30
2651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2652: LD_INT 104
2654: PPUSH
2655: LD_INT 24
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: CALL_OW 47
// bc_type := 29 ;
2665: LD_ADDR_OWVAR 42
2669: PUSH
2670: LD_INT 29
2672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2673: LD_INT 113
2675: PPUSH
2676: LD_INT 50
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: CALL_OW 47
// bc_type := 27 ;
2686: LD_ADDR_OWVAR 42
2690: PUSH
2691: LD_INT 27
2693: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2694: LD_INT 98
2696: PPUSH
2697: LD_INT 26
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2707: LD_INT 95
2709: PPUSH
2710: LD_INT 23
2712: PPUSH
2713: LD_INT 3
2715: PPUSH
2716: CALL_OW 47
// bc_type := 28 ;
2720: LD_ADDR_OWVAR 42
2724: PUSH
2725: LD_INT 28
2727: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2728: LD_INT 107
2730: PPUSH
2731: LD_INT 32
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 47
// bc_type := 3 ;
2741: LD_ADDR_OWVAR 42
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2749: LD_INT 106
2751: PPUSH
2752: LD_INT 42
2754: PPUSH
2755: LD_INT 0
2757: PPUSH
2758: CALL_OW 47
// bc_type := 16 ;
2762: LD_ADDR_OWVAR 42
2766: PUSH
2767: LD_INT 16
2769: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2770: LD_INT 109
2772: PPUSH
2773: LD_INT 45
2775: PPUSH
2776: LD_INT 5
2778: PPUSH
2779: CALL_OW 47
// bc_type := 17 ;
2783: LD_ADDR_OWVAR 42
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2791: LD_INT 106
2793: PPUSH
2794: LD_INT 46
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: CALL_OW 47
// bc_type := 19 ;
2804: LD_ADDR_OWVAR 42
2808: PUSH
2809: LD_INT 19
2811: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2812: LD_INT 103
2814: PPUSH
2815: LD_INT 42
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 47
// bc_type := 21 ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 21
2832: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2833: LD_INT 110
2835: PPUSH
2836: LD_INT 42
2838: PPUSH
2839: LD_INT 4
2841: PPUSH
2842: CALL_OW 47
// bc_type := 5 ;
2846: LD_ADDR_OWVAR 42
2850: PUSH
2851: LD_INT 5
2853: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2854: LD_INT 114
2856: PPUSH
2857: LD_INT 55
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 47
// bc_type := 36 ;
2867: LD_ADDR_OWVAR 42
2871: PUSH
2872: LD_INT 36
2874: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2875: LD_INT 96
2877: PPUSH
2878: LD_INT 28
2880: PPUSH
2881: LD_INT 2
2883: PPUSH
2884: CALL_OW 47
// bc_type := b_lab_full ;
2888: LD_ADDR_OWVAR 42
2892: PUSH
2893: LD_INT 8
2895: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2896: LD_ADDR_OWVAR 44
2900: PUSH
2901: LD_INT 15
2903: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2904: LD_ADDR_OWVAR 45
2908: PUSH
2909: LD_INT 11
2911: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2912: LD_INT 116
2914: PPUSH
2915: LD_INT 38
2917: PPUSH
2918: LD_INT 4
2920: PPUSH
2921: CALL_OW 47
// bc_type := b_lab_full ;
2925: LD_ADDR_OWVAR 42
2929: PUSH
2930: LD_INT 8
2932: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2933: LD_ADDR_OWVAR 44
2937: PUSH
2938: LD_INT 10
2940: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2941: LD_ADDR_OWVAR 45
2945: PUSH
2946: LD_INT 12
2948: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2949: LD_INT 112
2951: PPUSH
2952: LD_INT 29
2954: PPUSH
2955: LD_INT 4
2957: PPUSH
2958: CALL_OW 47
// end else
2962: GO 3208
// begin uc_side := 1 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 1
2971: ST_TO_ADDR
// for i in blist do
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: LD_VAR 0 2
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3206
// begin uc_nation := i [ 6 ] ;
2985: LD_ADDR_OWVAR 21
2989: PUSH
2990: LD_VAR 0 3
2994: PUSH
2995: LD_INT 6
2997: ARRAY
2998: ST_TO_ADDR
// bc_type := i [ 1 ] ;
2999: LD_ADDR_OWVAR 42
3003: PUSH
3004: LD_VAR 0 3
3008: PUSH
3009: LD_INT 1
3011: ARRAY
3012: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3013: LD_ADDR_OWVAR 43
3017: PUSH
3018: LD_VAR 0 3
3022: PUSH
3023: LD_INT 5
3025: ARRAY
3026: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3027: LD_VAR 0 3
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: PUSH
3036: LD_INT 7
3038: PUSH
3039: LD_INT 8
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: IN
3046: IFFALSE 3076
// begin bc_kind1 := i [ 7 ] ;
3048: LD_ADDR_OWVAR 44
3052: PUSH
3053: LD_VAR 0 3
3057: PUSH
3058: LD_INT 7
3060: ARRAY
3061: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3062: LD_ADDR_OWVAR 45
3066: PUSH
3067: LD_VAR 0 3
3071: PUSH
3072: LD_INT 8
3074: ARRAY
3075: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_VAR 0 3
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: LD_VAR 0 3
3094: PUSH
3095: LD_INT 3
3097: ARRAY
3098: PPUSH
3099: LD_VAR 0 3
3103: PUSH
3104: LD_INT 4
3106: ARRAY
3107: PPUSH
3108: CALL_OW 47
3112: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3113: LD_VAR 0 4
3117: PPUSH
3118: CALL_OW 266
3122: PUSH
3123: LD_INT 32
3125: PUSH
3126: LD_INT 33
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: IN
3133: IFFALSE 3204
// if i [ 7 ] then
3135: LD_VAR 0 3
3139: PUSH
3140: LD_INT 7
3142: ARRAY
3143: IFFALSE 3165
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_VAR 0 3
3154: PUSH
3155: LD_INT 7
3157: ARRAY
3158: PPUSH
3159: CALL_OW 431
3163: GO 3204
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3165: LD_VAR 0 4
3169: PPUSH
3170: LD_INT 11
3172: PUSH
3173: LD_INT 7
3175: PUSH
3176: LD_INT 4
3178: PUSH
3179: LD_INT 5
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 1
3190: PPUSH
3191: LD_INT 4
3193: PPUSH
3194: CALL_OW 12
3198: ARRAY
3199: PPUSH
3200: CALL_OW 431
// end ;
3204: GO 2982
3206: POP
3207: POP
// end ; uc_side := 1 ;
3208: LD_ADDR_OWVAR 20
3212: PUSH
3213: LD_INT 1
3215: ST_TO_ADDR
// uc_nation := 1 ;
3216: LD_ADDR_OWVAR 21
3220: PUSH
3221: LD_INT 1
3223: ST_TO_ADDR
// for i := 1 to 8 do
3224: LD_ADDR_VAR 0 3
3228: PUSH
3229: DOUBLE
3230: LD_INT 1
3232: DEC
3233: ST_TO_ADDR
3234: LD_INT 8
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3409
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3240: LD_ADDR_OWVAR 37
3244: PUSH
3245: LD_INT 5
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: LD_INT 3
3253: PUSH
3254: LD_INT 4
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_INT 1
3265: PPUSH
3266: LD_INT 4
3268: PPUSH
3269: CALL_OW 12
3273: ARRAY
3274: ST_TO_ADDR
// vc_engine := engine_siberite ;
3275: LD_ADDR_OWVAR 39
3279: PUSH
3280: LD_INT 3
3282: ST_TO_ADDR
// vc_control := control_manual ;
3283: LD_ADDR_OWVAR 38
3287: PUSH
3288: LD_INT 1
3290: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3291: LD_OWVAR 37
3295: PUSH
3296: LD_INT 4
3298: EQUAL
3299: IFFALSE 3311
// vc_weapon := us_heavy_gun else
3301: LD_ADDR_OWVAR 40
3305: PUSH
3306: LD_INT 6
3308: ST_TO_ADDR
3309: GO 3356
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3311: LD_ADDR_OWVAR 40
3315: PUSH
3316: LD_INT 7
3318: PUSH
3319: LD_INT 9
3321: PUSH
3322: LD_INT 12
3324: PUSH
3325: LD_INT 13
3327: PUSH
3328: LD_INT 9
3330: PUSH
3331: LD_INT 9
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: PUSH
3342: LD_VAR 0 3
3346: PUSH
3347: LD_INT 6
3349: MOD
3350: PUSH
3351: LD_INT 1
3353: PLUS
3354: ARRAY
3355: ST_TO_ADDR
// un := CreateVehicle ;
3356: LD_ADDR_VAR 0 5
3360: PUSH
3361: CALL_OW 45
3365: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3366: LD_VAR 0 5
3370: PPUSH
3371: LD_INT 0
3373: PPUSH
3374: LD_INT 5
3376: PPUSH
3377: CALL_OW 12
3381: PPUSH
3382: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3386: LD_VAR 0 5
3390: PPUSH
3391: LD_INT 78
3393: PPUSH
3394: LD_INT 31
3396: PPUSH
3397: LD_INT 8
3399: PPUSH
3400: LD_INT 0
3402: PPUSH
3403: CALL_OW 50
// end ;
3407: GO 3237
3409: POP
3410: POP
// end ;
3411: LD_VAR 0 1
3415: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3416: LD_INT 0
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3422: LD_INT 22
3424: PUSH
3425: LD_INT 1
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 21
3434: PUSH
3435: LD_INT 1
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: PPUSH
3446: CALL_OW 69
3450: PUSH
3451: LD_INT 6
3453: LESS
3454: IFFALSE 3681
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3456: LD_ADDR_VAR 0 4
3460: PUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 2
3473: PUSH
3474: LD_INT 30
3476: PUSH
3477: LD_INT 0
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 30
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: ST_TO_ADDR
// uc_side := 1 ;
3508: LD_ADDR_OWVAR 20
3512: PUSH
3513: LD_INT 1
3515: ST_TO_ADDR
// uc_nation := 1 ;
3516: LD_ADDR_OWVAR 21
3520: PUSH
3521: LD_INT 1
3523: ST_TO_ADDR
// for i := 1 to 6 do
3524: LD_ADDR_VAR 0 2
3528: PUSH
3529: DOUBLE
3530: LD_INT 1
3532: DEC
3533: ST_TO_ADDR
3534: LD_INT 6
3536: PUSH
3537: FOR_TO
3538: IFFALSE 3679
// begin hc_gallery :=  ;
3540: LD_ADDR_OWVAR 33
3544: PUSH
3545: LD_STRING 
3547: ST_TO_ADDR
// hc_name :=  ;
3548: LD_ADDR_OWVAR 26
3552: PUSH
3553: LD_STRING 
3555: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3556: LD_INT 0
3558: PPUSH
3559: LD_INT 1
3561: PUSH
3562: LD_INT 2
3564: PUSH
3565: LD_INT 3
3567: PUSH
3568: LD_INT 4
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: LD_INT 1
3579: PPUSH
3580: LD_INT 4
3582: PPUSH
3583: CALL_OW 12
3587: ARRAY
3588: PPUSH
3589: LD_INT 5
3591: PPUSH
3592: LD_INT 8
3594: PPUSH
3595: CALL_OW 12
3599: PPUSH
3600: CALL_OW 380
// un := CreateHuman ;
3604: LD_ADDR_VAR 0 3
3608: PUSH
3609: CALL_OW 44
3613: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3614: LD_ADDR_EXP 18
3618: PUSH
3619: LD_EXP 18
3623: PPUSH
3624: LD_VAR 0 3
3628: PPUSH
3629: CALL 62969 0 2
3633: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3634: LD_VAR 0 3
3638: PPUSH
3639: LD_VAR 0 4
3643: PUSH
3644: LD_INT 1
3646: ARRAY
3647: PPUSH
3648: CALL_OW 250
3652: PPUSH
3653: LD_VAR 0 4
3657: PUSH
3658: LD_INT 1
3660: ARRAY
3661: PPUSH
3662: CALL_OW 251
3666: PPUSH
3667: LD_INT 15
3669: PPUSH
3670: LD_INT 0
3672: PPUSH
3673: CALL 3859 0 5
// end ;
3677: GO 3537
3679: POP
3680: POP
// end ; end ; end_of_file
3681: LD_VAR 0 1
3685: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
// if existMode then
3690: LD_VAR 0 2
3694: IFFALSE 3829
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3696: LD_EXP 21
3700: PUSH
3701: LD_VAR 0 1
3705: STR
3706: PPUSH
3707: CALL_OW 28
3711: IFFALSE 3736
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3713: LD_ADDR_VAR 0 4
3717: PUSH
3718: LD_EXP 21
3722: PUSH
3723: LD_VAR 0 1
3727: STR
3728: PPUSH
3729: CALL_OW 34
3733: ST_TO_ADDR
3734: GO 3827
// begin if TestCharacters ( 11_ & ident ) then
3736: LD_STRING 11_
3738: PUSH
3739: LD_VAR 0 1
3743: STR
3744: PPUSH
3745: CALL_OW 28
3749: IFFALSE 3772
// unit := CreateCharacter ( 11_ & ident ) else
3751: LD_ADDR_VAR 0 4
3755: PUSH
3756: LD_STRING 11_
3758: PUSH
3759: LD_VAR 0 1
3763: STR
3764: PPUSH
3765: CALL_OW 34
3769: ST_TO_ADDR
3770: GO 3827
// if TestCharacters ( 10c_ & ident ) then
3772: LD_STRING 10c_
3774: PUSH
3775: LD_VAR 0 1
3779: STR
3780: PPUSH
3781: CALL_OW 28
3785: IFFALSE 3808
// unit := CreateCharacter ( 10c_ & ident ) else
3787: LD_ADDR_VAR 0 4
3791: PUSH
3792: LD_STRING 10c_
3794: PUSH
3795: LD_VAR 0 1
3799: STR
3800: PPUSH
3801: CALL_OW 34
3805: ST_TO_ADDR
3806: GO 3827
// unit := CreateCharacter ( 10_ & ident ) ;
3808: LD_ADDR_VAR 0 4
3812: PUSH
3813: LD_STRING 10_
3815: PUSH
3816: LD_VAR 0 1
3820: STR
3821: PPUSH
3822: CALL_OW 34
3826: ST_TO_ADDR
// end ; end else
3827: GO 3844
// unit := NewCharacter ( ident ) ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 25
3843: ST_TO_ADDR
// result := unit ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: LD_VAR 0 4
3853: ST_TO_ADDR
// end ;
3854: LD_VAR 0 3
3858: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3859: LD_INT 0
3861: PPUSH
3862: PPUSH
3863: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3864: LD_ADDR_VAR 0 8
3868: PUSH
3869: LD_INT 22
3871: PUSH
3872: LD_VAR 0 1
3876: PPUSH
3877: CALL_OW 255
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: LD_INT 21
3888: PUSH
3889: LD_INT 3
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 3
3898: PUSH
3899: LD_INT 30
3901: PUSH
3902: LD_INT 3
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 69
3922: ST_TO_ADDR
// if not tmp then
3923: LD_VAR 0 8
3927: NOT
3928: IFFALSE 3961
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3930: LD_VAR 0 1
3934: PPUSH
3935: LD_VAR 0 2
3939: PPUSH
3940: LD_VAR 0 3
3944: PPUSH
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_VAR 0 5
3954: PPUSH
3955: CALL_OW 50
// exit ;
3959: GO 4207
// end ; for i in tmp do
3961: LD_ADDR_VAR 0 7
3965: PUSH
3966: LD_VAR 0 8
3970: PUSH
3971: FOR_IN
3972: IFFALSE 4176
// if IsNotFull ( i ) then
3974: LD_VAR 0 7
3978: PPUSH
3979: CALL 27809 0 1
3983: IFFALSE 4174
// begin PlaceHumanInUnit ( unit , i ) ;
3985: LD_VAR 0 1
3989: PPUSH
3990: LD_VAR 0 7
3994: PPUSH
3995: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
3999: LD_VAR 0 7
4003: PPUSH
4004: CALL_OW 266
4008: PUSH
4009: LD_INT 5
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 31
4017: PUSH
4018: LD_INT 32
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: IN
4027: IFFALSE 4060
// begin SetClass ( unit , class_soldier ) ;
4029: LD_VAR 0 1
4033: PPUSH
4034: LD_INT 1
4036: PPUSH
4037: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4041: LD_VAR 0 1
4045: PPUSH
4046: LD_VAR 0 7
4050: PPUSH
4051: CALL 58309 0 1
4055: PPUSH
4056: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4060: LD_VAR 0 7
4064: PPUSH
4065: CALL_OW 266
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: LD_INT 3
4075: PUSH
4076: LD_INT 36
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: IN
4084: IFFALSE 4098
// SetClass ( unit , class_mechanic ) ;
4086: LD_VAR 0 1
4090: PPUSH
4091: LD_INT 3
4093: PPUSH
4094: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4098: LD_VAR 0 7
4102: PPUSH
4103: CALL_OW 266
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: LD_INT 1
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: IN
4118: IFFALSE 4132
// SetClass ( unit , class_engineer ) ;
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4132: LD_VAR 0 7
4136: PPUSH
4137: CALL_OW 266
4141: PUSH
4142: LD_INT 6
4144: PUSH
4145: LD_INT 7
4147: PUSH
4148: LD_INT 8
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: IN
4156: IFFALSE 4170
// SetClass ( unit , class_scientistic ) ;
4158: LD_VAR 0 1
4162: PPUSH
4163: LD_INT 4
4165: PPUSH
4166: CALL_OW 336
// exit ;
4170: POP
4171: POP
4172: GO 4207
// end ;
4174: GO 3971
4176: POP
4177: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4178: LD_VAR 0 1
4182: PPUSH
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_VAR 0 3
4192: PPUSH
4193: LD_VAR 0 4
4197: PPUSH
4198: LD_VAR 0 5
4202: PPUSH
4203: CALL_OW 50
// end ;
4207: LD_VAR 0 6
4211: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4212: LD_INT 0
4214: PPUSH
// if unit in selectedTab then
4215: LD_VAR 0 1
4219: PUSH
4220: LD_VAR 0 3
4224: IN
4225: IFFALSE 4247
// SaveCharacters ( unit , 13c_ & unitString ) else
4227: LD_VAR 0 1
4231: PPUSH
4232: LD_STRING 13c_
4234: PUSH
4235: LD_VAR 0 2
4239: STR
4240: PPUSH
4241: CALL_OW 38
4245: GO 4265
// SaveCharacters ( unit , 13s_ & unitString ) ;
4247: LD_VAR 0 1
4251: PPUSH
4252: LD_STRING 13s_
4254: PUSH
4255: LD_VAR 0 2
4259: STR
4260: PPUSH
4261: CALL_OW 38
// end ;
4265: LD_VAR 0 4
4269: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
4275: PPUSH
// selected := [ ] ;
4276: LD_ADDR_EXP 22
4280: PUSH
4281: EMPTY
4282: ST_TO_ADDR
// othersSelect := [ ] ;
4283: LD_ADDR_EXP 23
4287: PUSH
4288: EMPTY
4289: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: LD_EXP 3
4299: PUSH
4300: LD_EXP 4
4304: PUSH
4305: LD_EXP 5
4309: PUSH
4310: LD_EXP 6
4314: PUSH
4315: LD_EXP 8
4319: PUSH
4320: LD_EXP 9
4324: PUSH
4325: LD_EXP 10
4329: PUSH
4330: LD_EXP 11
4334: PUSH
4335: LD_EXP 12
4339: PUSH
4340: LD_EXP 13
4344: PUSH
4345: LD_EXP 14
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4363: LD_ADDR_VAR 0 3
4367: PUSH
4368: LD_VAR 0 3
4372: PUSH
4373: LD_EXP 17
4377: ADD
4378: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: LD_VAR 0 3
4388: PUSH
4389: LD_EXP 16
4393: ADD
4394: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4395: LD_ADDR_VAR 0 3
4399: PUSH
4400: LD_VAR 0 3
4404: PUSH
4405: LD_EXP 18
4409: ADD
4410: ST_TO_ADDR
// for i in tmp do
4411: LD_ADDR_VAR 0 2
4415: PUSH
4416: LD_VAR 0 3
4420: PUSH
4421: FOR_IN
4422: IFFALSE 4461
// if GetClass ( i ) = 8 then
4424: LD_VAR 0 2
4428: PPUSH
4429: CALL_OW 257
4433: PUSH
4434: LD_INT 8
4436: EQUAL
4437: IFFALSE 4459
// SetClass ( i , rand ( 1 , 4 ) ) ;
4439: LD_VAR 0 2
4443: PPUSH
4444: LD_INT 1
4446: PPUSH
4447: LD_INT 4
4449: PPUSH
4450: CALL_OW 12
4454: PPUSH
4455: CALL_OW 336
4459: GO 4421
4461: POP
4462: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4463: LD_ADDR_EXP 22
4467: PUSH
4468: LD_STRING 1
4470: PPUSH
4471: LD_INT 6
4473: PPUSH
4474: LD_INT 6
4476: PPUSH
4477: LD_INT -5
4479: PUSH
4480: LD_EXP 1
4484: PUSH
4485: LD_EXP 15
4489: PUSH
4490: LD_INT -2
4492: PUSH
4493: LD_INT -3
4495: PUSH
4496: LD_INT -5
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: PUSH
4507: LD_VAR 0 3
4511: ADD
4512: PUSH
4513: LD_INT -6
4515: PUSH
4516: LD_INT -4
4518: PUSH
4519: LD_EXP 2
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: ADD
4529: PPUSH
4530: LD_INT 1
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: PUSH
4540: LD_INT 2
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 4
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 5
4572: PUSH
4573: LD_INT 0
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 42
4595: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4596: LD_ADDR_EXP 23
4600: PUSH
4601: LD_EXP 22
4605: PUSH
4606: LD_EXP 3
4610: PUSH
4611: LD_EXP 4
4615: PUSH
4616: LD_EXP 5
4620: PUSH
4621: LD_EXP 6
4625: PUSH
4626: LD_EXP 7
4630: PUSH
4631: LD_EXP 8
4635: PUSH
4636: LD_EXP 9
4640: PUSH
4641: LD_EXP 10
4645: PUSH
4646: LD_EXP 11
4650: PUSH
4651: LD_EXP 12
4655: PUSH
4656: LD_EXP 13
4660: PUSH
4661: LD_EXP 14
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: DIFF
4680: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4681: LD_ADDR_VAR 0 4
4685: PUSH
4686: LD_VAR 0 3
4690: PUSH
4691: LD_EXP 22
4695: DIFF
4696: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4697: LD_ADDR_VAR 0 4
4701: PUSH
4702: LD_VAR 0 4
4706: PUSH
4707: LD_EXP 3
4711: PUSH
4712: LD_EXP 4
4716: PUSH
4717: LD_EXP 5
4721: PUSH
4722: LD_EXP 6
4726: PUSH
4727: LD_EXP 7
4731: PUSH
4732: LD_EXP 8
4736: PUSH
4737: LD_EXP 9
4741: PUSH
4742: LD_EXP 10
4746: PUSH
4747: LD_EXP 11
4751: PUSH
4752: LD_EXP 12
4756: PUSH
4757: LD_EXP 13
4761: PUSH
4762: LD_EXP 14
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: DIFF
4781: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4782: LD_VAR 0 4
4786: PPUSH
4787: LD_STRING 13s_others
4789: PPUSH
4790: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4794: LD_EXP 23
4798: PPUSH
4799: LD_STRING 13c_others
4801: PPUSH
4802: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4806: LD_EXP 1
4810: PPUSH
4811: LD_STRING 13c_JMM
4813: PPUSH
4814: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4818: LD_EXP 15
4822: PPUSH
4823: LD_STRING 13c_Stevens
4825: PPUSH
4826: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4830: LD_EXP 3
4834: PPUSH
4835: LD_STRING Lisa
4837: PPUSH
4838: LD_EXP 22
4842: PPUSH
4843: CALL 4212 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4847: LD_EXP 8
4851: PPUSH
4852: LD_STRING Brown
4854: PPUSH
4855: LD_EXP 22
4859: PPUSH
4860: CALL 4212 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4864: LD_EXP 4
4868: PPUSH
4869: LD_STRING Donaldson
4871: PPUSH
4872: LD_EXP 22
4876: PPUSH
4877: CALL 4212 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4881: LD_EXP 5
4885: PPUSH
4886: LD_STRING Bobby
4888: PPUSH
4889: LD_EXP 22
4893: PPUSH
4894: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4898: LD_EXP 6
4902: PPUSH
4903: LD_STRING Cyrus
4905: PPUSH
4906: LD_EXP 22
4910: PPUSH
4911: CALL 4212 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4915: LD_EXP 7
4919: PPUSH
4920: LD_STRING Denis
4922: PPUSH
4923: LD_EXP 22
4927: PPUSH
4928: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4932: LD_EXP 9
4936: PPUSH
4937: LD_STRING Gladstone
4939: PPUSH
4940: LD_EXP 22
4944: PPUSH
4945: CALL 4212 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4949: LD_EXP 10
4953: PPUSH
4954: LD_STRING Houten
4956: PPUSH
4957: LD_EXP 22
4961: PPUSH
4962: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4966: LD_EXP 11
4970: PPUSH
4971: LD_STRING Cornel
4973: PPUSH
4974: LD_EXP 22
4978: PPUSH
4979: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4983: LD_EXP 12
4987: PPUSH
4988: LD_STRING Gary
4990: PPUSH
4991: LD_EXP 22
4995: PPUSH
4996: CALL 4212 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5000: LD_EXP 13
5004: PPUSH
5005: LD_STRING Frank
5007: PPUSH
5008: LD_EXP 22
5012: PPUSH
5013: CALL 4212 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5017: LD_EXP 14
5021: PPUSH
5022: LD_STRING Kikuchi
5024: PPUSH
5025: LD_EXP 22
5029: PPUSH
5030: CALL 4212 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5034: LD_INT 22
5036: PUSH
5037: LD_INT 1
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 21
5046: PUSH
5047: LD_INT 1
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 69
5062: PPUSH
5063: LD_INT 4
5065: PPUSH
5066: CALL_OW 235
// SetSide ( selected , 1 ) ;
5070: LD_EXP 22
5074: PPUSH
5075: LD_INT 1
5077: PPUSH
5078: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5082: LD_EXP 1
5086: PUSH
5087: LD_EXP 15
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5103: LD_ADDR_VAR 0 2
5107: PUSH
5108: LD_INT 22
5110: PUSH
5111: LD_INT 1
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 21
5120: PUSH
5121: LD_INT 1
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PPUSH
5132: CALL_OW 69
5136: PUSH
5137: FOR_IN
5138: IFFALSE 5151
// ComExit ( i ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: CALL 63367 0 1
5149: GO 5137
5151: POP
5152: POP
// end ; end_of_file
5153: LD_VAR 0 1
5157: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL 21082 0 1
// if un = JMM then
5167: LD_VAR 0 1
5171: PUSH
5172: LD_EXP 1
5176: EQUAL
5177: IFFALSE 5186
// YouLost ( JMM ) ;
5179: LD_STRING JMM
5181: PPUSH
5182: CALL_OW 104
// end ;
5186: PPOPN 1
5188: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5189: LD_VAR 0 1
5193: PPUSH
5194: LD_VAR 0 2
5198: PPUSH
5199: CALL 21202 0 2
// end ; end_of_file
5203: PPOPN 2
5205: END
// export function Action ; begin
5206: LD_INT 0
5208: PPUSH
// InGameOn ;
5209: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5213: LD_INT 22
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: LD_INT 2
5225: PUSH
5226: LD_INT 30
5228: PUSH
5229: LD_INT 0
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 30
5238: PUSH
5239: LD_INT 1
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PPUSH
5255: CALL_OW 69
5259: PPUSH
5260: CALL_OW 87
// wait ( 0 0$1 ) ;
5264: LD_INT 35
5266: PPUSH
5267: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5271: LD_EXP 1
5275: PPUSH
5276: LD_STRING D1-JMM-1
5278: PPUSH
5279: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5283: LD_EXP 2
5287: PPUSH
5288: LD_STRING D1-Pow-1
5290: PPUSH
5291: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5295: LD_EXP 2
5299: PPUSH
5300: LD_STRING D1-Pow-1a
5302: PPUSH
5303: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5307: LD_EXP 2
5311: PPUSH
5312: LD_STRING D1-Pow-1b
5314: PPUSH
5315: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5319: LD_EXP 2
5323: PPUSH
5324: LD_STRING D1-Pow-1c
5326: PPUSH
5327: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5331: LD_EXP 1
5335: PPUSH
5336: LD_STRING D1-JMM-2
5338: PPUSH
5339: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5343: LD_EXP 2
5347: PPUSH
5348: LD_STRING D1-Pow-2
5350: PPUSH
5351: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5355: LD_EXP 1
5359: PPUSH
5360: LD_STRING D1-JMM-3
5362: PPUSH
5363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5367: LD_EXP 2
5371: PPUSH
5372: LD_STRING D1-Pow-3
5374: PPUSH
5375: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5379: LD_EXP 1
5383: PPUSH
5384: LD_STRING D1-JMM-4
5386: PPUSH
5387: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5391: LD_EXP 2
5395: PPUSH
5396: LD_STRING D1-Pow-4
5398: PPUSH
5399: CALL_OW 94
// SelectAndSaveCharacters ;
5403: CALL 4270 0 0
// InGameOff ;
5407: CALL_OW 9
// Query ( Q1 ) ;
5411: LD_STRING Q1
5413: PPUSH
5414: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5418: LD_INT 2
5420: PPUSH
5421: LD_INT 1
5423: PPUSH
5424: CALL_OW 424
// end ; end_of_file
5428: LD_VAR 0 1
5432: RET
// every 0 0$1 do
5433: GO 5435
5435: DISABLE
// begin enable ;
5436: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5437: LD_STRING updateTimer(
5439: PUSH
5440: LD_OWVAR 1
5444: STR
5445: PUSH
5446: LD_STRING );
5448: STR
5449: PPUSH
5450: CALL_OW 559
// end ;
5454: END
// export function SOS_MapStart ( ) ; begin
5455: LD_INT 0
5457: PPUSH
// if streamModeActive then
5458: LD_EXP 24
5462: IFFALSE 5471
// DefineStreamItems ( true ) ;
5464: LD_INT 1
5466: PPUSH
5467: CALL 7125 0 1
// UpdateFactoryWaypoints ( ) ;
5471: CALL 19986 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5475: CALL 20243 0 0
// end ;
5479: LD_VAR 0 1
5483: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5484: LD_INT 0
5486: PPUSH
// if p2 = 100 then
5487: LD_VAR 0 2
5491: PUSH
5492: LD_INT 100
5494: EQUAL
5495: IFFALSE 6498
// begin if not StreamModeActive then
5497: LD_EXP 24
5501: NOT
5502: IFFALSE 5512
// StreamModeActive := true ;
5504: LD_ADDR_EXP 24
5508: PUSH
5509: LD_INT 1
5511: ST_TO_ADDR
// if p3 = 0 then
5512: LD_VAR 0 3
5516: PUSH
5517: LD_INT 0
5519: EQUAL
5520: IFFALSE 5526
// InitStreamMode ;
5522: CALL 6661 0 0
// if p3 = 1 then
5526: LD_VAR 0 3
5530: PUSH
5531: LD_INT 1
5533: EQUAL
5534: IFFALSE 5544
// sRocket := true ;
5536: LD_ADDR_EXP 29
5540: PUSH
5541: LD_INT 1
5543: ST_TO_ADDR
// if p3 = 2 then
5544: LD_VAR 0 3
5548: PUSH
5549: LD_INT 2
5551: EQUAL
5552: IFFALSE 5562
// sSpeed := true ;
5554: LD_ADDR_EXP 28
5558: PUSH
5559: LD_INT 1
5561: ST_TO_ADDR
// if p3 = 3 then
5562: LD_VAR 0 3
5566: PUSH
5567: LD_INT 3
5569: EQUAL
5570: IFFALSE 5580
// sEngine := true ;
5572: LD_ADDR_EXP 30
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// if p3 = 4 then
5580: LD_VAR 0 3
5584: PUSH
5585: LD_INT 4
5587: EQUAL
5588: IFFALSE 5598
// sSpec := true ;
5590: LD_ADDR_EXP 27
5594: PUSH
5595: LD_INT 1
5597: ST_TO_ADDR
// if p3 = 5 then
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 5
5605: EQUAL
5606: IFFALSE 5616
// sLevel := true ;
5608: LD_ADDR_EXP 31
5612: PUSH
5613: LD_INT 1
5615: ST_TO_ADDR
// if p3 = 6 then
5616: LD_VAR 0 3
5620: PUSH
5621: LD_INT 6
5623: EQUAL
5624: IFFALSE 5634
// sArmoury := true ;
5626: LD_ADDR_EXP 32
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// if p3 = 7 then
5634: LD_VAR 0 3
5638: PUSH
5639: LD_INT 7
5641: EQUAL
5642: IFFALSE 5652
// sRadar := true ;
5644: LD_ADDR_EXP 33
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// if p3 = 8 then
5652: LD_VAR 0 3
5656: PUSH
5657: LD_INT 8
5659: EQUAL
5660: IFFALSE 5670
// sBunker := true ;
5662: LD_ADDR_EXP 34
5666: PUSH
5667: LD_INT 1
5669: ST_TO_ADDR
// if p3 = 9 then
5670: LD_VAR 0 3
5674: PUSH
5675: LD_INT 9
5677: EQUAL
5678: IFFALSE 5688
// sHack := true ;
5680: LD_ADDR_EXP 35
5684: PUSH
5685: LD_INT 1
5687: ST_TO_ADDR
// if p3 = 10 then
5688: LD_VAR 0 3
5692: PUSH
5693: LD_INT 10
5695: EQUAL
5696: IFFALSE 5706
// sFire := true ;
5698: LD_ADDR_EXP 36
5702: PUSH
5703: LD_INT 1
5705: ST_TO_ADDR
// if p3 = 11 then
5706: LD_VAR 0 3
5710: PUSH
5711: LD_INT 11
5713: EQUAL
5714: IFFALSE 5724
// sRefresh := true ;
5716: LD_ADDR_EXP 37
5720: PUSH
5721: LD_INT 1
5723: ST_TO_ADDR
// if p3 = 12 then
5724: LD_VAR 0 3
5728: PUSH
5729: LD_INT 12
5731: EQUAL
5732: IFFALSE 5742
// sExp := true ;
5734: LD_ADDR_EXP 38
5738: PUSH
5739: LD_INT 1
5741: ST_TO_ADDR
// if p3 = 13 then
5742: LD_VAR 0 3
5746: PUSH
5747: LD_INT 13
5749: EQUAL
5750: IFFALSE 5760
// sDepot := true ;
5752: LD_ADDR_EXP 39
5756: PUSH
5757: LD_INT 1
5759: ST_TO_ADDR
// if p3 = 14 then
5760: LD_VAR 0 3
5764: PUSH
5765: LD_INT 14
5767: EQUAL
5768: IFFALSE 5778
// sFlag := true ;
5770: LD_ADDR_EXP 40
5774: PUSH
5775: LD_INT 1
5777: ST_TO_ADDR
// if p3 = 15 then
5778: LD_VAR 0 3
5782: PUSH
5783: LD_INT 15
5785: EQUAL
5786: IFFALSE 5796
// sKamikadze := true ;
5788: LD_ADDR_EXP 48
5792: PUSH
5793: LD_INT 1
5795: ST_TO_ADDR
// if p3 = 16 then
5796: LD_VAR 0 3
5800: PUSH
5801: LD_INT 16
5803: EQUAL
5804: IFFALSE 5814
// sTroll := true ;
5806: LD_ADDR_EXP 49
5810: PUSH
5811: LD_INT 1
5813: ST_TO_ADDR
// if p3 = 17 then
5814: LD_VAR 0 3
5818: PUSH
5819: LD_INT 17
5821: EQUAL
5822: IFFALSE 5832
// sSlow := true ;
5824: LD_ADDR_EXP 50
5828: PUSH
5829: LD_INT 1
5831: ST_TO_ADDR
// if p3 = 18 then
5832: LD_VAR 0 3
5836: PUSH
5837: LD_INT 18
5839: EQUAL
5840: IFFALSE 5850
// sLack := true ;
5842: LD_ADDR_EXP 51
5846: PUSH
5847: LD_INT 1
5849: ST_TO_ADDR
// if p3 = 19 then
5850: LD_VAR 0 3
5854: PUSH
5855: LD_INT 19
5857: EQUAL
5858: IFFALSE 5868
// sTank := true ;
5860: LD_ADDR_EXP 53
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// if p3 = 20 then
5868: LD_VAR 0 3
5872: PUSH
5873: LD_INT 20
5875: EQUAL
5876: IFFALSE 5886
// sRemote := true ;
5878: LD_ADDR_EXP 54
5882: PUSH
5883: LD_INT 1
5885: ST_TO_ADDR
// if p3 = 21 then
5886: LD_VAR 0 3
5890: PUSH
5891: LD_INT 21
5893: EQUAL
5894: IFFALSE 5904
// sPowell := true ;
5896: LD_ADDR_EXP 55
5900: PUSH
5901: LD_INT 1
5903: ST_TO_ADDR
// if p3 = 22 then
5904: LD_VAR 0 3
5908: PUSH
5909: LD_INT 22
5911: EQUAL
5912: IFFALSE 5922
// sTeleport := true ;
5914: LD_ADDR_EXP 58
5918: PUSH
5919: LD_INT 1
5921: ST_TO_ADDR
// if p3 = 23 then
5922: LD_VAR 0 3
5926: PUSH
5927: LD_INT 23
5929: EQUAL
5930: IFFALSE 5940
// sOilTower := true ;
5932: LD_ADDR_EXP 60
5936: PUSH
5937: LD_INT 1
5939: ST_TO_ADDR
// if p3 = 24 then
5940: LD_VAR 0 3
5944: PUSH
5945: LD_INT 24
5947: EQUAL
5948: IFFALSE 5958
// sShovel := true ;
5950: LD_ADDR_EXP 61
5954: PUSH
5955: LD_INT 1
5957: ST_TO_ADDR
// if p3 = 25 then
5958: LD_VAR 0 3
5962: PUSH
5963: LD_INT 25
5965: EQUAL
5966: IFFALSE 5976
// sSheik := true ;
5968: LD_ADDR_EXP 62
5972: PUSH
5973: LD_INT 1
5975: ST_TO_ADDR
// if p3 = 26 then
5976: LD_VAR 0 3
5980: PUSH
5981: LD_INT 26
5983: EQUAL
5984: IFFALSE 5994
// sEarthquake := true ;
5986: LD_ADDR_EXP 64
5990: PUSH
5991: LD_INT 1
5993: ST_TO_ADDR
// if p3 = 27 then
5994: LD_VAR 0 3
5998: PUSH
5999: LD_INT 27
6001: EQUAL
6002: IFFALSE 6012
// sAI := true ;
6004: LD_ADDR_EXP 65
6008: PUSH
6009: LD_INT 1
6011: ST_TO_ADDR
// if p3 = 28 then
6012: LD_VAR 0 3
6016: PUSH
6017: LD_INT 28
6019: EQUAL
6020: IFFALSE 6030
// sCargo := true ;
6022: LD_ADDR_EXP 68
6026: PUSH
6027: LD_INT 1
6029: ST_TO_ADDR
// if p3 = 29 then
6030: LD_VAR 0 3
6034: PUSH
6035: LD_INT 29
6037: EQUAL
6038: IFFALSE 6048
// sDLaser := true ;
6040: LD_ADDR_EXP 69
6044: PUSH
6045: LD_INT 1
6047: ST_TO_ADDR
// if p3 = 30 then
6048: LD_VAR 0 3
6052: PUSH
6053: LD_INT 30
6055: EQUAL
6056: IFFALSE 6066
// sExchange := true ;
6058: LD_ADDR_EXP 70
6062: PUSH
6063: LD_INT 1
6065: ST_TO_ADDR
// if p3 = 31 then
6066: LD_VAR 0 3
6070: PUSH
6071: LD_INT 31
6073: EQUAL
6074: IFFALSE 6084
// sFac := true ;
6076: LD_ADDR_EXP 71
6080: PUSH
6081: LD_INT 1
6083: ST_TO_ADDR
// if p3 = 32 then
6084: LD_VAR 0 3
6088: PUSH
6089: LD_INT 32
6091: EQUAL
6092: IFFALSE 6102
// sPower := true ;
6094: LD_ADDR_EXP 72
6098: PUSH
6099: LD_INT 1
6101: ST_TO_ADDR
// if p3 = 33 then
6102: LD_VAR 0 3
6106: PUSH
6107: LD_INT 33
6109: EQUAL
6110: IFFALSE 6120
// sRandom := true ;
6112: LD_ADDR_EXP 73
6116: PUSH
6117: LD_INT 1
6119: ST_TO_ADDR
// if p3 = 34 then
6120: LD_VAR 0 3
6124: PUSH
6125: LD_INT 34
6127: EQUAL
6128: IFFALSE 6138
// sShield := true ;
6130: LD_ADDR_EXP 74
6134: PUSH
6135: LD_INT 1
6137: ST_TO_ADDR
// if p3 = 35 then
6138: LD_VAR 0 3
6142: PUSH
6143: LD_INT 35
6145: EQUAL
6146: IFFALSE 6156
// sTime := true ;
6148: LD_ADDR_EXP 75
6152: PUSH
6153: LD_INT 1
6155: ST_TO_ADDR
// if p3 = 36 then
6156: LD_VAR 0 3
6160: PUSH
6161: LD_INT 36
6163: EQUAL
6164: IFFALSE 6174
// sTools := true ;
6166: LD_ADDR_EXP 76
6170: PUSH
6171: LD_INT 1
6173: ST_TO_ADDR
// if p3 = 101 then
6174: LD_VAR 0 3
6178: PUSH
6179: LD_INT 101
6181: EQUAL
6182: IFFALSE 6192
// sSold := true ;
6184: LD_ADDR_EXP 41
6188: PUSH
6189: LD_INT 1
6191: ST_TO_ADDR
// if p3 = 102 then
6192: LD_VAR 0 3
6196: PUSH
6197: LD_INT 102
6199: EQUAL
6200: IFFALSE 6210
// sDiff := true ;
6202: LD_ADDR_EXP 42
6206: PUSH
6207: LD_INT 1
6209: ST_TO_ADDR
// if p3 = 103 then
6210: LD_VAR 0 3
6214: PUSH
6215: LD_INT 103
6217: EQUAL
6218: IFFALSE 6228
// sFog := true ;
6220: LD_ADDR_EXP 45
6224: PUSH
6225: LD_INT 1
6227: ST_TO_ADDR
// if p3 = 104 then
6228: LD_VAR 0 3
6232: PUSH
6233: LD_INT 104
6235: EQUAL
6236: IFFALSE 6246
// sReset := true ;
6238: LD_ADDR_EXP 46
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// if p3 = 105 then
6246: LD_VAR 0 3
6250: PUSH
6251: LD_INT 105
6253: EQUAL
6254: IFFALSE 6264
// sSun := true ;
6256: LD_ADDR_EXP 47
6260: PUSH
6261: LD_INT 1
6263: ST_TO_ADDR
// if p3 = 106 then
6264: LD_VAR 0 3
6268: PUSH
6269: LD_INT 106
6271: EQUAL
6272: IFFALSE 6282
// sTiger := true ;
6274: LD_ADDR_EXP 43
6278: PUSH
6279: LD_INT 1
6281: ST_TO_ADDR
// if p3 = 107 then
6282: LD_VAR 0 3
6286: PUSH
6287: LD_INT 107
6289: EQUAL
6290: IFFALSE 6300
// sBomb := true ;
6292: LD_ADDR_EXP 44
6296: PUSH
6297: LD_INT 1
6299: ST_TO_ADDR
// if p3 = 108 then
6300: LD_VAR 0 3
6304: PUSH
6305: LD_INT 108
6307: EQUAL
6308: IFFALSE 6318
// sWound := true ;
6310: LD_ADDR_EXP 52
6314: PUSH
6315: LD_INT 1
6317: ST_TO_ADDR
// if p3 = 109 then
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 109
6325: EQUAL
6326: IFFALSE 6336
// sBetray := true ;
6328: LD_ADDR_EXP 56
6332: PUSH
6333: LD_INT 1
6335: ST_TO_ADDR
// if p3 = 110 then
6336: LD_VAR 0 3
6340: PUSH
6341: LD_INT 110
6343: EQUAL
6344: IFFALSE 6354
// sContamin := true ;
6346: LD_ADDR_EXP 57
6350: PUSH
6351: LD_INT 1
6353: ST_TO_ADDR
// if p3 = 111 then
6354: LD_VAR 0 3
6358: PUSH
6359: LD_INT 111
6361: EQUAL
6362: IFFALSE 6372
// sOil := true ;
6364: LD_ADDR_EXP 59
6368: PUSH
6369: LD_INT 1
6371: ST_TO_ADDR
// if p3 = 112 then
6372: LD_VAR 0 3
6376: PUSH
6377: LD_INT 112
6379: EQUAL
6380: IFFALSE 6390
// sStu := true ;
6382: LD_ADDR_EXP 63
6386: PUSH
6387: LD_INT 1
6389: ST_TO_ADDR
// if p3 = 113 then
6390: LD_VAR 0 3
6394: PUSH
6395: LD_INT 113
6397: EQUAL
6398: IFFALSE 6408
// sBazooka := true ;
6400: LD_ADDR_EXP 66
6404: PUSH
6405: LD_INT 1
6407: ST_TO_ADDR
// if p3 = 114 then
6408: LD_VAR 0 3
6412: PUSH
6413: LD_INT 114
6415: EQUAL
6416: IFFALSE 6426
// sMortar := true ;
6418: LD_ADDR_EXP 67
6422: PUSH
6423: LD_INT 1
6425: ST_TO_ADDR
// if p3 = 115 then
6426: LD_VAR 0 3
6430: PUSH
6431: LD_INT 115
6433: EQUAL
6434: IFFALSE 6444
// sRanger := true ;
6436: LD_ADDR_EXP 77
6440: PUSH
6441: LD_INT 1
6443: ST_TO_ADDR
// if p3 = 116 then
6444: LD_VAR 0 3
6448: PUSH
6449: LD_INT 116
6451: EQUAL
6452: IFFALSE 6462
// sComputer := true ;
6454: LD_ADDR_EXP 78
6458: PUSH
6459: LD_INT 1
6461: ST_TO_ADDR
// if p3 = 117 then
6462: LD_VAR 0 3
6466: PUSH
6467: LD_INT 117
6469: EQUAL
6470: IFFALSE 6480
// s30 := true ;
6472: LD_ADDR_EXP 79
6476: PUSH
6477: LD_INT 1
6479: ST_TO_ADDR
// if p3 = 118 then
6480: LD_VAR 0 3
6484: PUSH
6485: LD_INT 118
6487: EQUAL
6488: IFFALSE 6498
// s60 := true ;
6490: LD_ADDR_EXP 80
6494: PUSH
6495: LD_INT 1
6497: ST_TO_ADDR
// end ; if p2 = 101 then
6498: LD_VAR 0 2
6502: PUSH
6503: LD_INT 101
6505: EQUAL
6506: IFFALSE 6634
// begin case p3 of 1 :
6508: LD_VAR 0 3
6512: PUSH
6513: LD_INT 1
6515: DOUBLE
6516: EQUAL
6517: IFTRUE 6521
6519: GO 6528
6521: POP
// hHackUnlimitedResources ; 2 :
6522: CALL 18732 0 0
6526: GO 6634
6528: LD_INT 2
6530: DOUBLE
6531: EQUAL
6532: IFTRUE 6536
6534: GO 6543
6536: POP
// hHackSetLevel10 ; 3 :
6537: CALL 18865 0 0
6541: GO 6634
6543: LD_INT 3
6545: DOUBLE
6546: EQUAL
6547: IFTRUE 6551
6549: GO 6558
6551: POP
// hHackSetLevel10YourUnits ; 4 :
6552: CALL 18950 0 0
6556: GO 6634
6558: LD_INT 4
6560: DOUBLE
6561: EQUAL
6562: IFTRUE 6566
6564: GO 6573
6566: POP
// hHackInvincible ; 5 :
6567: CALL 19398 0 0
6571: GO 6634
6573: LD_INT 5
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6588
6581: POP
// hHackInvisible ; 6 :
6582: CALL 19509 0 0
6586: GO 6634
6588: LD_INT 6
6590: DOUBLE
6591: EQUAL
6592: IFTRUE 6596
6594: GO 6603
6596: POP
// hHackChangeYourSide ; 7 :
6597: CALL 19566 0 0
6601: GO 6634
6603: LD_INT 7
6605: DOUBLE
6606: EQUAL
6607: IFTRUE 6611
6609: GO 6618
6611: POP
// hHackChangeUnitSide ; 8 :
6612: CALL 19608 0 0
6616: GO 6634
6618: LD_INT 8
6620: DOUBLE
6621: EQUAL
6622: IFTRUE 6626
6624: GO 6633
6626: POP
// hHackFog ; end ;
6627: CALL 19709 0 0
6631: GO 6634
6633: POP
// end ; end ;
6634: LD_VAR 0 7
6638: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6639: GO 6641
6641: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6642: LD_STRING initStreamRollete();
6644: PPUSH
6645: CALL_OW 559
// InitStreamMode ;
6649: CALL 6661 0 0
// DefineStreamItems ( false ) ;
6653: LD_INT 0
6655: PPUSH
6656: CALL 7125 0 1
// end ;
6660: END
// function InitStreamMode ; begin
6661: LD_INT 0
6663: PPUSH
// streamModeActive := false ;
6664: LD_ADDR_EXP 24
6668: PUSH
6669: LD_INT 0
6671: ST_TO_ADDR
// normalCounter := 36 ;
6672: LD_ADDR_EXP 25
6676: PUSH
6677: LD_INT 36
6679: ST_TO_ADDR
// hardcoreCounter := 18 ;
6680: LD_ADDR_EXP 26
6684: PUSH
6685: LD_INT 18
6687: ST_TO_ADDR
// sRocket := false ;
6688: LD_ADDR_EXP 29
6692: PUSH
6693: LD_INT 0
6695: ST_TO_ADDR
// sSpeed := false ;
6696: LD_ADDR_EXP 28
6700: PUSH
6701: LD_INT 0
6703: ST_TO_ADDR
// sEngine := false ;
6704: LD_ADDR_EXP 30
6708: PUSH
6709: LD_INT 0
6711: ST_TO_ADDR
// sSpec := false ;
6712: LD_ADDR_EXP 27
6716: PUSH
6717: LD_INT 0
6719: ST_TO_ADDR
// sLevel := false ;
6720: LD_ADDR_EXP 31
6724: PUSH
6725: LD_INT 0
6727: ST_TO_ADDR
// sArmoury := false ;
6728: LD_ADDR_EXP 32
6732: PUSH
6733: LD_INT 0
6735: ST_TO_ADDR
// sRadar := false ;
6736: LD_ADDR_EXP 33
6740: PUSH
6741: LD_INT 0
6743: ST_TO_ADDR
// sBunker := false ;
6744: LD_ADDR_EXP 34
6748: PUSH
6749: LD_INT 0
6751: ST_TO_ADDR
// sHack := false ;
6752: LD_ADDR_EXP 35
6756: PUSH
6757: LD_INT 0
6759: ST_TO_ADDR
// sFire := false ;
6760: LD_ADDR_EXP 36
6764: PUSH
6765: LD_INT 0
6767: ST_TO_ADDR
// sRefresh := false ;
6768: LD_ADDR_EXP 37
6772: PUSH
6773: LD_INT 0
6775: ST_TO_ADDR
// sExp := false ;
6776: LD_ADDR_EXP 38
6780: PUSH
6781: LD_INT 0
6783: ST_TO_ADDR
// sDepot := false ;
6784: LD_ADDR_EXP 39
6788: PUSH
6789: LD_INT 0
6791: ST_TO_ADDR
// sFlag := false ;
6792: LD_ADDR_EXP 40
6796: PUSH
6797: LD_INT 0
6799: ST_TO_ADDR
// sKamikadze := false ;
6800: LD_ADDR_EXP 48
6804: PUSH
6805: LD_INT 0
6807: ST_TO_ADDR
// sTroll := false ;
6808: LD_ADDR_EXP 49
6812: PUSH
6813: LD_INT 0
6815: ST_TO_ADDR
// sSlow := false ;
6816: LD_ADDR_EXP 50
6820: PUSH
6821: LD_INT 0
6823: ST_TO_ADDR
// sLack := false ;
6824: LD_ADDR_EXP 51
6828: PUSH
6829: LD_INT 0
6831: ST_TO_ADDR
// sTank := false ;
6832: LD_ADDR_EXP 53
6836: PUSH
6837: LD_INT 0
6839: ST_TO_ADDR
// sRemote := false ;
6840: LD_ADDR_EXP 54
6844: PUSH
6845: LD_INT 0
6847: ST_TO_ADDR
// sPowell := false ;
6848: LD_ADDR_EXP 55
6852: PUSH
6853: LD_INT 0
6855: ST_TO_ADDR
// sTeleport := false ;
6856: LD_ADDR_EXP 58
6860: PUSH
6861: LD_INT 0
6863: ST_TO_ADDR
// sOilTower := false ;
6864: LD_ADDR_EXP 60
6868: PUSH
6869: LD_INT 0
6871: ST_TO_ADDR
// sShovel := false ;
6872: LD_ADDR_EXP 61
6876: PUSH
6877: LD_INT 0
6879: ST_TO_ADDR
// sSheik := false ;
6880: LD_ADDR_EXP 62
6884: PUSH
6885: LD_INT 0
6887: ST_TO_ADDR
// sEarthquake := false ;
6888: LD_ADDR_EXP 64
6892: PUSH
6893: LD_INT 0
6895: ST_TO_ADDR
// sAI := false ;
6896: LD_ADDR_EXP 65
6900: PUSH
6901: LD_INT 0
6903: ST_TO_ADDR
// sCargo := false ;
6904: LD_ADDR_EXP 68
6908: PUSH
6909: LD_INT 0
6911: ST_TO_ADDR
// sDLaser := false ;
6912: LD_ADDR_EXP 69
6916: PUSH
6917: LD_INT 0
6919: ST_TO_ADDR
// sExchange := false ;
6920: LD_ADDR_EXP 70
6924: PUSH
6925: LD_INT 0
6927: ST_TO_ADDR
// sFac := false ;
6928: LD_ADDR_EXP 71
6932: PUSH
6933: LD_INT 0
6935: ST_TO_ADDR
// sPower := false ;
6936: LD_ADDR_EXP 72
6940: PUSH
6941: LD_INT 0
6943: ST_TO_ADDR
// sRandom := false ;
6944: LD_ADDR_EXP 73
6948: PUSH
6949: LD_INT 0
6951: ST_TO_ADDR
// sShield := false ;
6952: LD_ADDR_EXP 74
6956: PUSH
6957: LD_INT 0
6959: ST_TO_ADDR
// sTime := false ;
6960: LD_ADDR_EXP 75
6964: PUSH
6965: LD_INT 0
6967: ST_TO_ADDR
// sTools := false ;
6968: LD_ADDR_EXP 76
6972: PUSH
6973: LD_INT 0
6975: ST_TO_ADDR
// sSold := false ;
6976: LD_ADDR_EXP 41
6980: PUSH
6981: LD_INT 0
6983: ST_TO_ADDR
// sDiff := false ;
6984: LD_ADDR_EXP 42
6988: PUSH
6989: LD_INT 0
6991: ST_TO_ADDR
// sFog := false ;
6992: LD_ADDR_EXP 45
6996: PUSH
6997: LD_INT 0
6999: ST_TO_ADDR
// sReset := false ;
7000: LD_ADDR_EXP 46
7004: PUSH
7005: LD_INT 0
7007: ST_TO_ADDR
// sSun := false ;
7008: LD_ADDR_EXP 47
7012: PUSH
7013: LD_INT 0
7015: ST_TO_ADDR
// sTiger := false ;
7016: LD_ADDR_EXP 43
7020: PUSH
7021: LD_INT 0
7023: ST_TO_ADDR
// sBomb := false ;
7024: LD_ADDR_EXP 44
7028: PUSH
7029: LD_INT 0
7031: ST_TO_ADDR
// sWound := false ;
7032: LD_ADDR_EXP 52
7036: PUSH
7037: LD_INT 0
7039: ST_TO_ADDR
// sBetray := false ;
7040: LD_ADDR_EXP 56
7044: PUSH
7045: LD_INT 0
7047: ST_TO_ADDR
// sContamin := false ;
7048: LD_ADDR_EXP 57
7052: PUSH
7053: LD_INT 0
7055: ST_TO_ADDR
// sOil := false ;
7056: LD_ADDR_EXP 59
7060: PUSH
7061: LD_INT 0
7063: ST_TO_ADDR
// sStu := false ;
7064: LD_ADDR_EXP 63
7068: PUSH
7069: LD_INT 0
7071: ST_TO_ADDR
// sBazooka := false ;
7072: LD_ADDR_EXP 66
7076: PUSH
7077: LD_INT 0
7079: ST_TO_ADDR
// sMortar := false ;
7080: LD_ADDR_EXP 67
7084: PUSH
7085: LD_INT 0
7087: ST_TO_ADDR
// sRanger := false ;
7088: LD_ADDR_EXP 77
7092: PUSH
7093: LD_INT 0
7095: ST_TO_ADDR
// sComputer := false ;
7096: LD_ADDR_EXP 78
7100: PUSH
7101: LD_INT 0
7103: ST_TO_ADDR
// s30 := false ;
7104: LD_ADDR_EXP 79
7108: PUSH
7109: LD_INT 0
7111: ST_TO_ADDR
// s60 := false ;
7112: LD_ADDR_EXP 80
7116: PUSH
7117: LD_INT 0
7119: ST_TO_ADDR
// end ;
7120: LD_VAR 0 1
7124: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7125: LD_INT 0
7127: PPUSH
7128: PPUSH
7129: PPUSH
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// result := [ ] ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: EMPTY
7140: ST_TO_ADDR
// if campaign_id = 1 then
7141: LD_OWVAR 69
7145: PUSH
7146: LD_INT 1
7148: EQUAL
7149: IFFALSE 10315
// begin case mission_number of 1 :
7151: LD_OWVAR 70
7155: PUSH
7156: LD_INT 1
7158: DOUBLE
7159: EQUAL
7160: IFTRUE 7164
7162: GO 7240
7164: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: LD_INT 4
7175: PUSH
7176: LD_INT 11
7178: PUSH
7179: LD_INT 12
7181: PUSH
7182: LD_INT 15
7184: PUSH
7185: LD_INT 16
7187: PUSH
7188: LD_INT 22
7190: PUSH
7191: LD_INT 23
7193: PUSH
7194: LD_INT 26
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 101
7210: PUSH
7211: LD_INT 102
7213: PUSH
7214: LD_INT 106
7216: PUSH
7217: LD_INT 116
7219: PUSH
7220: LD_INT 117
7222: PUSH
7223: LD_INT 118
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: ST_TO_ADDR
7238: GO 10313
7240: LD_INT 2
7242: DOUBLE
7243: EQUAL
7244: IFTRUE 7248
7246: GO 7332
7248: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7249: LD_ADDR_VAR 0 2
7253: PUSH
7254: LD_INT 2
7256: PUSH
7257: LD_INT 4
7259: PUSH
7260: LD_INT 11
7262: PUSH
7263: LD_INT 12
7265: PUSH
7266: LD_INT 15
7268: PUSH
7269: LD_INT 16
7271: PUSH
7272: LD_INT 22
7274: PUSH
7275: LD_INT 23
7277: PUSH
7278: LD_INT 26
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: PUSH
7292: LD_INT 101
7294: PUSH
7295: LD_INT 102
7297: PUSH
7298: LD_INT 105
7300: PUSH
7301: LD_INT 106
7303: PUSH
7304: LD_INT 108
7306: PUSH
7307: LD_INT 116
7309: PUSH
7310: LD_INT 117
7312: PUSH
7313: LD_INT 118
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: ST_TO_ADDR
7330: GO 10313
7332: LD_INT 3
7334: DOUBLE
7335: EQUAL
7336: IFTRUE 7340
7338: GO 7428
7340: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7341: LD_ADDR_VAR 0 2
7345: PUSH
7346: LD_INT 2
7348: PUSH
7349: LD_INT 4
7351: PUSH
7352: LD_INT 5
7354: PUSH
7355: LD_INT 11
7357: PUSH
7358: LD_INT 12
7360: PUSH
7361: LD_INT 15
7363: PUSH
7364: LD_INT 16
7366: PUSH
7367: LD_INT 22
7369: PUSH
7370: LD_INT 26
7372: PUSH
7373: LD_INT 36
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 101
7390: PUSH
7391: LD_INT 102
7393: PUSH
7394: LD_INT 105
7396: PUSH
7397: LD_INT 106
7399: PUSH
7400: LD_INT 108
7402: PUSH
7403: LD_INT 116
7405: PUSH
7406: LD_INT 117
7408: PUSH
7409: LD_INT 118
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: ST_TO_ADDR
7426: GO 10313
7428: LD_INT 4
7430: DOUBLE
7431: EQUAL
7432: IFTRUE 7436
7434: GO 7532
7436: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7437: LD_ADDR_VAR 0 2
7441: PUSH
7442: LD_INT 2
7444: PUSH
7445: LD_INT 4
7447: PUSH
7448: LD_INT 5
7450: PUSH
7451: LD_INT 8
7453: PUSH
7454: LD_INT 11
7456: PUSH
7457: LD_INT 12
7459: PUSH
7460: LD_INT 15
7462: PUSH
7463: LD_INT 16
7465: PUSH
7466: LD_INT 22
7468: PUSH
7469: LD_INT 23
7471: PUSH
7472: LD_INT 26
7474: PUSH
7475: LD_INT 36
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 101
7494: PUSH
7495: LD_INT 102
7497: PUSH
7498: LD_INT 105
7500: PUSH
7501: LD_INT 106
7503: PUSH
7504: LD_INT 108
7506: PUSH
7507: LD_INT 116
7509: PUSH
7510: LD_INT 117
7512: PUSH
7513: LD_INT 118
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: ST_TO_ADDR
7530: GO 10313
7532: LD_INT 5
7534: DOUBLE
7535: EQUAL
7536: IFTRUE 7540
7538: GO 7652
7540: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7541: LD_ADDR_VAR 0 2
7545: PUSH
7546: LD_INT 2
7548: PUSH
7549: LD_INT 4
7551: PUSH
7552: LD_INT 5
7554: PUSH
7555: LD_INT 6
7557: PUSH
7558: LD_INT 8
7560: PUSH
7561: LD_INT 11
7563: PUSH
7564: LD_INT 12
7566: PUSH
7567: LD_INT 15
7569: PUSH
7570: LD_INT 16
7572: PUSH
7573: LD_INT 22
7575: PUSH
7576: LD_INT 23
7578: PUSH
7579: LD_INT 25
7581: PUSH
7582: LD_INT 26
7584: PUSH
7585: LD_INT 36
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: PUSH
7604: LD_INT 101
7606: PUSH
7607: LD_INT 102
7609: PUSH
7610: LD_INT 105
7612: PUSH
7613: LD_INT 106
7615: PUSH
7616: LD_INT 108
7618: PUSH
7619: LD_INT 109
7621: PUSH
7622: LD_INT 112
7624: PUSH
7625: LD_INT 116
7627: PUSH
7628: LD_INT 117
7630: PUSH
7631: LD_INT 118
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: ST_TO_ADDR
7650: GO 10313
7652: LD_INT 6
7654: DOUBLE
7655: EQUAL
7656: IFTRUE 7660
7658: GO 7792
7660: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7661: LD_ADDR_VAR 0 2
7665: PUSH
7666: LD_INT 2
7668: PUSH
7669: LD_INT 4
7671: PUSH
7672: LD_INT 5
7674: PUSH
7675: LD_INT 6
7677: PUSH
7678: LD_INT 8
7680: PUSH
7681: LD_INT 11
7683: PUSH
7684: LD_INT 12
7686: PUSH
7687: LD_INT 15
7689: PUSH
7690: LD_INT 16
7692: PUSH
7693: LD_INT 20
7695: PUSH
7696: LD_INT 21
7698: PUSH
7699: LD_INT 22
7701: PUSH
7702: LD_INT 23
7704: PUSH
7705: LD_INT 25
7707: PUSH
7708: LD_INT 26
7710: PUSH
7711: LD_INT 30
7713: PUSH
7714: LD_INT 31
7716: PUSH
7717: LD_INT 32
7719: PUSH
7720: LD_INT 36
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 101
7746: PUSH
7747: LD_INT 102
7749: PUSH
7750: LD_INT 105
7752: PUSH
7753: LD_INT 106
7755: PUSH
7756: LD_INT 108
7758: PUSH
7759: LD_INT 109
7761: PUSH
7762: LD_INT 112
7764: PUSH
7765: LD_INT 116
7767: PUSH
7768: LD_INT 117
7770: PUSH
7771: LD_INT 118
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: ST_TO_ADDR
7790: GO 10313
7792: LD_INT 7
7794: DOUBLE
7795: EQUAL
7796: IFTRUE 7800
7798: GO 7912
7800: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7801: LD_ADDR_VAR 0 2
7805: PUSH
7806: LD_INT 2
7808: PUSH
7809: LD_INT 4
7811: PUSH
7812: LD_INT 5
7814: PUSH
7815: LD_INT 7
7817: PUSH
7818: LD_INT 11
7820: PUSH
7821: LD_INT 12
7823: PUSH
7824: LD_INT 15
7826: PUSH
7827: LD_INT 16
7829: PUSH
7830: LD_INT 20
7832: PUSH
7833: LD_INT 21
7835: PUSH
7836: LD_INT 22
7838: PUSH
7839: LD_INT 23
7841: PUSH
7842: LD_INT 25
7844: PUSH
7845: LD_INT 26
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 101
7866: PUSH
7867: LD_INT 102
7869: PUSH
7870: LD_INT 103
7872: PUSH
7873: LD_INT 105
7875: PUSH
7876: LD_INT 106
7878: PUSH
7879: LD_INT 108
7881: PUSH
7882: LD_INT 112
7884: PUSH
7885: LD_INT 116
7887: PUSH
7888: LD_INT 117
7890: PUSH
7891: LD_INT 118
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: ST_TO_ADDR
7910: GO 10313
7912: LD_INT 8
7914: DOUBLE
7915: EQUAL
7916: IFTRUE 7920
7918: GO 8060
7920: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7921: LD_ADDR_VAR 0 2
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: LD_INT 4
7931: PUSH
7932: LD_INT 5
7934: PUSH
7935: LD_INT 6
7937: PUSH
7938: LD_INT 7
7940: PUSH
7941: LD_INT 8
7943: PUSH
7944: LD_INT 11
7946: PUSH
7947: LD_INT 12
7949: PUSH
7950: LD_INT 15
7952: PUSH
7953: LD_INT 16
7955: PUSH
7956: LD_INT 20
7958: PUSH
7959: LD_INT 21
7961: PUSH
7962: LD_INT 22
7964: PUSH
7965: LD_INT 23
7967: PUSH
7968: LD_INT 25
7970: PUSH
7971: LD_INT 26
7973: PUSH
7974: LD_INT 30
7976: PUSH
7977: LD_INT 31
7979: PUSH
7980: LD_INT 32
7982: PUSH
7983: LD_INT 36
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 101
8010: PUSH
8011: LD_INT 102
8013: PUSH
8014: LD_INT 103
8016: PUSH
8017: LD_INT 105
8019: PUSH
8020: LD_INT 106
8022: PUSH
8023: LD_INT 108
8025: PUSH
8026: LD_INT 109
8028: PUSH
8029: LD_INT 112
8031: PUSH
8032: LD_INT 116
8034: PUSH
8035: LD_INT 117
8037: PUSH
8038: LD_INT 118
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: ST_TO_ADDR
8058: GO 10313
8060: LD_INT 9
8062: DOUBLE
8063: EQUAL
8064: IFTRUE 8068
8066: GO 8216
8068: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8069: LD_ADDR_VAR 0 2
8073: PUSH
8074: LD_INT 2
8076: PUSH
8077: LD_INT 4
8079: PUSH
8080: LD_INT 5
8082: PUSH
8083: LD_INT 6
8085: PUSH
8086: LD_INT 7
8088: PUSH
8089: LD_INT 8
8091: PUSH
8092: LD_INT 11
8094: PUSH
8095: LD_INT 12
8097: PUSH
8098: LD_INT 15
8100: PUSH
8101: LD_INT 16
8103: PUSH
8104: LD_INT 20
8106: PUSH
8107: LD_INT 21
8109: PUSH
8110: LD_INT 22
8112: PUSH
8113: LD_INT 23
8115: PUSH
8116: LD_INT 25
8118: PUSH
8119: LD_INT 26
8121: PUSH
8122: LD_INT 28
8124: PUSH
8125: LD_INT 30
8127: PUSH
8128: LD_INT 31
8130: PUSH
8131: LD_INT 32
8133: PUSH
8134: LD_INT 36
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: PUSH
8160: LD_INT 101
8162: PUSH
8163: LD_INT 102
8165: PUSH
8166: LD_INT 103
8168: PUSH
8169: LD_INT 105
8171: PUSH
8172: LD_INT 106
8174: PUSH
8175: LD_INT 108
8177: PUSH
8178: LD_INT 109
8180: PUSH
8181: LD_INT 112
8183: PUSH
8184: LD_INT 114
8186: PUSH
8187: LD_INT 116
8189: PUSH
8190: LD_INT 117
8192: PUSH
8193: LD_INT 118
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: ST_TO_ADDR
8214: GO 10313
8216: LD_INT 10
8218: DOUBLE
8219: EQUAL
8220: IFTRUE 8224
8222: GO 8420
8224: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8225: LD_ADDR_VAR 0 2
8229: PUSH
8230: LD_INT 2
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: LD_INT 5
8238: PUSH
8239: LD_INT 6
8241: PUSH
8242: LD_INT 7
8244: PUSH
8245: LD_INT 8
8247: PUSH
8248: LD_INT 9
8250: PUSH
8251: LD_INT 10
8253: PUSH
8254: LD_INT 11
8256: PUSH
8257: LD_INT 12
8259: PUSH
8260: LD_INT 13
8262: PUSH
8263: LD_INT 14
8265: PUSH
8266: LD_INT 15
8268: PUSH
8269: LD_INT 16
8271: PUSH
8272: LD_INT 17
8274: PUSH
8275: LD_INT 18
8277: PUSH
8278: LD_INT 19
8280: PUSH
8281: LD_INT 20
8283: PUSH
8284: LD_INT 21
8286: PUSH
8287: LD_INT 22
8289: PUSH
8290: LD_INT 23
8292: PUSH
8293: LD_INT 24
8295: PUSH
8296: LD_INT 25
8298: PUSH
8299: LD_INT 26
8301: PUSH
8302: LD_INT 28
8304: PUSH
8305: LD_INT 30
8307: PUSH
8308: LD_INT 31
8310: PUSH
8311: LD_INT 32
8313: PUSH
8314: LD_INT 36
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 101
8350: PUSH
8351: LD_INT 102
8353: PUSH
8354: LD_INT 103
8356: PUSH
8357: LD_INT 104
8359: PUSH
8360: LD_INT 105
8362: PUSH
8363: LD_INT 106
8365: PUSH
8366: LD_INT 107
8368: PUSH
8369: LD_INT 108
8371: PUSH
8372: LD_INT 109
8374: PUSH
8375: LD_INT 110
8377: PUSH
8378: LD_INT 111
8380: PUSH
8381: LD_INT 112
8383: PUSH
8384: LD_INT 114
8386: PUSH
8387: LD_INT 116
8389: PUSH
8390: LD_INT 117
8392: PUSH
8393: LD_INT 118
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: ST_TO_ADDR
8418: GO 10313
8420: LD_INT 11
8422: DOUBLE
8423: EQUAL
8424: IFTRUE 8428
8426: GO 8632
8428: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8429: LD_ADDR_VAR 0 2
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: LD_INT 3
8439: PUSH
8440: LD_INT 4
8442: PUSH
8443: LD_INT 5
8445: PUSH
8446: LD_INT 6
8448: PUSH
8449: LD_INT 7
8451: PUSH
8452: LD_INT 8
8454: PUSH
8455: LD_INT 9
8457: PUSH
8458: LD_INT 10
8460: PUSH
8461: LD_INT 11
8463: PUSH
8464: LD_INT 12
8466: PUSH
8467: LD_INT 13
8469: PUSH
8470: LD_INT 14
8472: PUSH
8473: LD_INT 15
8475: PUSH
8476: LD_INT 16
8478: PUSH
8479: LD_INT 17
8481: PUSH
8482: LD_INT 18
8484: PUSH
8485: LD_INT 19
8487: PUSH
8488: LD_INT 20
8490: PUSH
8491: LD_INT 21
8493: PUSH
8494: LD_INT 22
8496: PUSH
8497: LD_INT 23
8499: PUSH
8500: LD_INT 24
8502: PUSH
8503: LD_INT 25
8505: PUSH
8506: LD_INT 26
8508: PUSH
8509: LD_INT 28
8511: PUSH
8512: LD_INT 30
8514: PUSH
8515: LD_INT 31
8517: PUSH
8518: LD_INT 32
8520: PUSH
8521: LD_INT 34
8523: PUSH
8524: LD_INT 36
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 101
8562: PUSH
8563: LD_INT 102
8565: PUSH
8566: LD_INT 103
8568: PUSH
8569: LD_INT 104
8571: PUSH
8572: LD_INT 105
8574: PUSH
8575: LD_INT 106
8577: PUSH
8578: LD_INT 107
8580: PUSH
8581: LD_INT 108
8583: PUSH
8584: LD_INT 109
8586: PUSH
8587: LD_INT 110
8589: PUSH
8590: LD_INT 111
8592: PUSH
8593: LD_INT 112
8595: PUSH
8596: LD_INT 114
8598: PUSH
8599: LD_INT 116
8601: PUSH
8602: LD_INT 117
8604: PUSH
8605: LD_INT 118
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: ST_TO_ADDR
8630: GO 10313
8632: LD_INT 12
8634: DOUBLE
8635: EQUAL
8636: IFTRUE 8640
8638: GO 8860
8640: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8641: LD_ADDR_VAR 0 2
8645: PUSH
8646: LD_INT 1
8648: PUSH
8649: LD_INT 2
8651: PUSH
8652: LD_INT 3
8654: PUSH
8655: LD_INT 4
8657: PUSH
8658: LD_INT 5
8660: PUSH
8661: LD_INT 6
8663: PUSH
8664: LD_INT 7
8666: PUSH
8667: LD_INT 8
8669: PUSH
8670: LD_INT 9
8672: PUSH
8673: LD_INT 10
8675: PUSH
8676: LD_INT 11
8678: PUSH
8679: LD_INT 12
8681: PUSH
8682: LD_INT 13
8684: PUSH
8685: LD_INT 14
8687: PUSH
8688: LD_INT 15
8690: PUSH
8691: LD_INT 16
8693: PUSH
8694: LD_INT 17
8696: PUSH
8697: LD_INT 18
8699: PUSH
8700: LD_INT 19
8702: PUSH
8703: LD_INT 20
8705: PUSH
8706: LD_INT 21
8708: PUSH
8709: LD_INT 22
8711: PUSH
8712: LD_INT 23
8714: PUSH
8715: LD_INT 24
8717: PUSH
8718: LD_INT 25
8720: PUSH
8721: LD_INT 26
8723: PUSH
8724: LD_INT 27
8726: PUSH
8727: LD_INT 28
8729: PUSH
8730: LD_INT 30
8732: PUSH
8733: LD_INT 31
8735: PUSH
8736: LD_INT 32
8738: PUSH
8739: LD_INT 33
8741: PUSH
8742: LD_INT 34
8744: PUSH
8745: LD_INT 36
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: PUSH
8784: LD_INT 101
8786: PUSH
8787: LD_INT 102
8789: PUSH
8790: LD_INT 103
8792: PUSH
8793: LD_INT 104
8795: PUSH
8796: LD_INT 105
8798: PUSH
8799: LD_INT 106
8801: PUSH
8802: LD_INT 107
8804: PUSH
8805: LD_INT 108
8807: PUSH
8808: LD_INT 109
8810: PUSH
8811: LD_INT 110
8813: PUSH
8814: LD_INT 111
8816: PUSH
8817: LD_INT 112
8819: PUSH
8820: LD_INT 113
8822: PUSH
8823: LD_INT 114
8825: PUSH
8826: LD_INT 116
8828: PUSH
8829: LD_INT 117
8831: PUSH
8832: LD_INT 118
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: ST_TO_ADDR
8858: GO 10313
8860: LD_INT 13
8862: DOUBLE
8863: EQUAL
8864: IFTRUE 8868
8866: GO 9076
8868: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8869: LD_ADDR_VAR 0 2
8873: PUSH
8874: LD_INT 1
8876: PUSH
8877: LD_INT 2
8879: PUSH
8880: LD_INT 3
8882: PUSH
8883: LD_INT 4
8885: PUSH
8886: LD_INT 5
8888: PUSH
8889: LD_INT 8
8891: PUSH
8892: LD_INT 9
8894: PUSH
8895: LD_INT 10
8897: PUSH
8898: LD_INT 11
8900: PUSH
8901: LD_INT 12
8903: PUSH
8904: LD_INT 14
8906: PUSH
8907: LD_INT 15
8909: PUSH
8910: LD_INT 16
8912: PUSH
8913: LD_INT 17
8915: PUSH
8916: LD_INT 18
8918: PUSH
8919: LD_INT 19
8921: PUSH
8922: LD_INT 20
8924: PUSH
8925: LD_INT 21
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_INT 23
8933: PUSH
8934: LD_INT 24
8936: PUSH
8937: LD_INT 25
8939: PUSH
8940: LD_INT 26
8942: PUSH
8943: LD_INT 27
8945: PUSH
8946: LD_INT 28
8948: PUSH
8949: LD_INT 30
8951: PUSH
8952: LD_INT 31
8954: PUSH
8955: LD_INT 32
8957: PUSH
8958: LD_INT 33
8960: PUSH
8961: LD_INT 34
8963: PUSH
8964: LD_INT 36
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_INT 101
9002: PUSH
9003: LD_INT 102
9005: PUSH
9006: LD_INT 103
9008: PUSH
9009: LD_INT 104
9011: PUSH
9012: LD_INT 105
9014: PUSH
9015: LD_INT 106
9017: PUSH
9018: LD_INT 107
9020: PUSH
9021: LD_INT 108
9023: PUSH
9024: LD_INT 109
9026: PUSH
9027: LD_INT 110
9029: PUSH
9030: LD_INT 111
9032: PUSH
9033: LD_INT 112
9035: PUSH
9036: LD_INT 113
9038: PUSH
9039: LD_INT 114
9041: PUSH
9042: LD_INT 116
9044: PUSH
9045: LD_INT 117
9047: PUSH
9048: LD_INT 118
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: ST_TO_ADDR
9074: GO 10313
9076: LD_INT 14
9078: DOUBLE
9079: EQUAL
9080: IFTRUE 9084
9082: GO 9308
9084: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9085: LD_ADDR_VAR 0 2
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: LD_INT 4
9101: PUSH
9102: LD_INT 5
9104: PUSH
9105: LD_INT 6
9107: PUSH
9108: LD_INT 7
9110: PUSH
9111: LD_INT 8
9113: PUSH
9114: LD_INT 9
9116: PUSH
9117: LD_INT 10
9119: PUSH
9120: LD_INT 11
9122: PUSH
9123: LD_INT 12
9125: PUSH
9126: LD_INT 13
9128: PUSH
9129: LD_INT 14
9131: PUSH
9132: LD_INT 15
9134: PUSH
9135: LD_INT 16
9137: PUSH
9138: LD_INT 17
9140: PUSH
9141: LD_INT 18
9143: PUSH
9144: LD_INT 19
9146: PUSH
9147: LD_INT 20
9149: PUSH
9150: LD_INT 21
9152: PUSH
9153: LD_INT 22
9155: PUSH
9156: LD_INT 23
9158: PUSH
9159: LD_INT 24
9161: PUSH
9162: LD_INT 25
9164: PUSH
9165: LD_INT 26
9167: PUSH
9168: LD_INT 27
9170: PUSH
9171: LD_INT 28
9173: PUSH
9174: LD_INT 29
9176: PUSH
9177: LD_INT 30
9179: PUSH
9180: LD_INT 31
9182: PUSH
9183: LD_INT 32
9185: PUSH
9186: LD_INT 33
9188: PUSH
9189: LD_INT 34
9191: PUSH
9192: LD_INT 36
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 101
9234: PUSH
9235: LD_INT 102
9237: PUSH
9238: LD_INT 103
9240: PUSH
9241: LD_INT 104
9243: PUSH
9244: LD_INT 105
9246: PUSH
9247: LD_INT 106
9249: PUSH
9250: LD_INT 107
9252: PUSH
9253: LD_INT 108
9255: PUSH
9256: LD_INT 109
9258: PUSH
9259: LD_INT 110
9261: PUSH
9262: LD_INT 111
9264: PUSH
9265: LD_INT 112
9267: PUSH
9268: LD_INT 113
9270: PUSH
9271: LD_INT 114
9273: PUSH
9274: LD_INT 116
9276: PUSH
9277: LD_INT 117
9279: PUSH
9280: LD_INT 118
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: ST_TO_ADDR
9306: GO 10313
9308: LD_INT 15
9310: DOUBLE
9311: EQUAL
9312: IFTRUE 9316
9314: GO 9540
9316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9317: LD_ADDR_VAR 0 2
9321: PUSH
9322: LD_INT 1
9324: PUSH
9325: LD_INT 2
9327: PUSH
9328: LD_INT 3
9330: PUSH
9331: LD_INT 4
9333: PUSH
9334: LD_INT 5
9336: PUSH
9337: LD_INT 6
9339: PUSH
9340: LD_INT 7
9342: PUSH
9343: LD_INT 8
9345: PUSH
9346: LD_INT 9
9348: PUSH
9349: LD_INT 10
9351: PUSH
9352: LD_INT 11
9354: PUSH
9355: LD_INT 12
9357: PUSH
9358: LD_INT 13
9360: PUSH
9361: LD_INT 14
9363: PUSH
9364: LD_INT 15
9366: PUSH
9367: LD_INT 16
9369: PUSH
9370: LD_INT 17
9372: PUSH
9373: LD_INT 18
9375: PUSH
9376: LD_INT 19
9378: PUSH
9379: LD_INT 20
9381: PUSH
9382: LD_INT 21
9384: PUSH
9385: LD_INT 22
9387: PUSH
9388: LD_INT 23
9390: PUSH
9391: LD_INT 24
9393: PUSH
9394: LD_INT 25
9396: PUSH
9397: LD_INT 26
9399: PUSH
9400: LD_INT 27
9402: PUSH
9403: LD_INT 28
9405: PUSH
9406: LD_INT 29
9408: PUSH
9409: LD_INT 30
9411: PUSH
9412: LD_INT 31
9414: PUSH
9415: LD_INT 32
9417: PUSH
9418: LD_INT 33
9420: PUSH
9421: LD_INT 34
9423: PUSH
9424: LD_INT 36
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 101
9466: PUSH
9467: LD_INT 102
9469: PUSH
9470: LD_INT 103
9472: PUSH
9473: LD_INT 104
9475: PUSH
9476: LD_INT 105
9478: PUSH
9479: LD_INT 106
9481: PUSH
9482: LD_INT 107
9484: PUSH
9485: LD_INT 108
9487: PUSH
9488: LD_INT 109
9490: PUSH
9491: LD_INT 110
9493: PUSH
9494: LD_INT 111
9496: PUSH
9497: LD_INT 112
9499: PUSH
9500: LD_INT 113
9502: PUSH
9503: LD_INT 114
9505: PUSH
9506: LD_INT 116
9508: PUSH
9509: LD_INT 117
9511: PUSH
9512: LD_INT 118
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: ST_TO_ADDR
9538: GO 10313
9540: LD_INT 16
9542: DOUBLE
9543: EQUAL
9544: IFTRUE 9548
9546: GO 9684
9548: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9549: LD_ADDR_VAR 0 2
9553: PUSH
9554: LD_INT 2
9556: PUSH
9557: LD_INT 4
9559: PUSH
9560: LD_INT 5
9562: PUSH
9563: LD_INT 7
9565: PUSH
9566: LD_INT 11
9568: PUSH
9569: LD_INT 12
9571: PUSH
9572: LD_INT 15
9574: PUSH
9575: LD_INT 16
9577: PUSH
9578: LD_INT 20
9580: PUSH
9581: LD_INT 21
9583: PUSH
9584: LD_INT 22
9586: PUSH
9587: LD_INT 23
9589: PUSH
9590: LD_INT 25
9592: PUSH
9593: LD_INT 26
9595: PUSH
9596: LD_INT 30
9598: PUSH
9599: LD_INT 31
9601: PUSH
9602: LD_INT 32
9604: PUSH
9605: LD_INT 33
9607: PUSH
9608: LD_INT 34
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 101
9634: PUSH
9635: LD_INT 102
9637: PUSH
9638: LD_INT 103
9640: PUSH
9641: LD_INT 106
9643: PUSH
9644: LD_INT 108
9646: PUSH
9647: LD_INT 112
9649: PUSH
9650: LD_INT 113
9652: PUSH
9653: LD_INT 114
9655: PUSH
9656: LD_INT 116
9658: PUSH
9659: LD_INT 117
9661: PUSH
9662: LD_INT 118
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: ST_TO_ADDR
9682: GO 10313
9684: LD_INT 17
9686: DOUBLE
9687: EQUAL
9688: IFTRUE 9692
9690: GO 9916
9692: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9693: LD_ADDR_VAR 0 2
9697: PUSH
9698: LD_INT 1
9700: PUSH
9701: LD_INT 2
9703: PUSH
9704: LD_INT 3
9706: PUSH
9707: LD_INT 4
9709: PUSH
9710: LD_INT 5
9712: PUSH
9713: LD_INT 6
9715: PUSH
9716: LD_INT 7
9718: PUSH
9719: LD_INT 8
9721: PUSH
9722: LD_INT 9
9724: PUSH
9725: LD_INT 10
9727: PUSH
9728: LD_INT 11
9730: PUSH
9731: LD_INT 12
9733: PUSH
9734: LD_INT 13
9736: PUSH
9737: LD_INT 14
9739: PUSH
9740: LD_INT 15
9742: PUSH
9743: LD_INT 16
9745: PUSH
9746: LD_INT 17
9748: PUSH
9749: LD_INT 18
9751: PUSH
9752: LD_INT 19
9754: PUSH
9755: LD_INT 20
9757: PUSH
9758: LD_INT 21
9760: PUSH
9761: LD_INT 22
9763: PUSH
9764: LD_INT 23
9766: PUSH
9767: LD_INT 24
9769: PUSH
9770: LD_INT 25
9772: PUSH
9773: LD_INT 26
9775: PUSH
9776: LD_INT 27
9778: PUSH
9779: LD_INT 28
9781: PUSH
9782: LD_INT 29
9784: PUSH
9785: LD_INT 30
9787: PUSH
9788: LD_INT 31
9790: PUSH
9791: LD_INT 32
9793: PUSH
9794: LD_INT 33
9796: PUSH
9797: LD_INT 34
9799: PUSH
9800: LD_INT 36
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 101
9842: PUSH
9843: LD_INT 102
9845: PUSH
9846: LD_INT 103
9848: PUSH
9849: LD_INT 104
9851: PUSH
9852: LD_INT 105
9854: PUSH
9855: LD_INT 106
9857: PUSH
9858: LD_INT 107
9860: PUSH
9861: LD_INT 108
9863: PUSH
9864: LD_INT 109
9866: PUSH
9867: LD_INT 110
9869: PUSH
9870: LD_INT 111
9872: PUSH
9873: LD_INT 112
9875: PUSH
9876: LD_INT 113
9878: PUSH
9879: LD_INT 114
9881: PUSH
9882: LD_INT 116
9884: PUSH
9885: LD_INT 117
9887: PUSH
9888: LD_INT 118
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: ST_TO_ADDR
9914: GO 10313
9916: LD_INT 18
9918: DOUBLE
9919: EQUAL
9920: IFTRUE 9924
9922: GO 10072
9924: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9925: LD_ADDR_VAR 0 2
9929: PUSH
9930: LD_INT 2
9932: PUSH
9933: LD_INT 4
9935: PUSH
9936: LD_INT 5
9938: PUSH
9939: LD_INT 7
9941: PUSH
9942: LD_INT 11
9944: PUSH
9945: LD_INT 12
9947: PUSH
9948: LD_INT 15
9950: PUSH
9951: LD_INT 16
9953: PUSH
9954: LD_INT 20
9956: PUSH
9957: LD_INT 21
9959: PUSH
9960: LD_INT 22
9962: PUSH
9963: LD_INT 23
9965: PUSH
9966: LD_INT 25
9968: PUSH
9969: LD_INT 26
9971: PUSH
9972: LD_INT 30
9974: PUSH
9975: LD_INT 31
9977: PUSH
9978: LD_INT 32
9980: PUSH
9981: LD_INT 33
9983: PUSH
9984: LD_INT 34
9986: PUSH
9987: LD_INT 35
9989: PUSH
9990: LD_INT 36
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 101
10018: PUSH
10019: LD_INT 102
10021: PUSH
10022: LD_INT 103
10024: PUSH
10025: LD_INT 106
10027: PUSH
10028: LD_INT 108
10030: PUSH
10031: LD_INT 112
10033: PUSH
10034: LD_INT 113
10036: PUSH
10037: LD_INT 114
10039: PUSH
10040: LD_INT 115
10042: PUSH
10043: LD_INT 116
10045: PUSH
10046: LD_INT 117
10048: PUSH
10049: LD_INT 118
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: ST_TO_ADDR
10070: GO 10313
10072: LD_INT 19
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10312
10080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10081: LD_ADDR_VAR 0 2
10085: PUSH
10086: LD_INT 1
10088: PUSH
10089: LD_INT 2
10091: PUSH
10092: LD_INT 3
10094: PUSH
10095: LD_INT 4
10097: PUSH
10098: LD_INT 5
10100: PUSH
10101: LD_INT 6
10103: PUSH
10104: LD_INT 7
10106: PUSH
10107: LD_INT 8
10109: PUSH
10110: LD_INT 9
10112: PUSH
10113: LD_INT 10
10115: PUSH
10116: LD_INT 11
10118: PUSH
10119: LD_INT 12
10121: PUSH
10122: LD_INT 13
10124: PUSH
10125: LD_INT 14
10127: PUSH
10128: LD_INT 15
10130: PUSH
10131: LD_INT 16
10133: PUSH
10134: LD_INT 17
10136: PUSH
10137: LD_INT 18
10139: PUSH
10140: LD_INT 19
10142: PUSH
10143: LD_INT 20
10145: PUSH
10146: LD_INT 21
10148: PUSH
10149: LD_INT 22
10151: PUSH
10152: LD_INT 23
10154: PUSH
10155: LD_INT 24
10157: PUSH
10158: LD_INT 25
10160: PUSH
10161: LD_INT 26
10163: PUSH
10164: LD_INT 27
10166: PUSH
10167: LD_INT 28
10169: PUSH
10170: LD_INT 29
10172: PUSH
10173: LD_INT 30
10175: PUSH
10176: LD_INT 31
10178: PUSH
10179: LD_INT 32
10181: PUSH
10182: LD_INT 33
10184: PUSH
10185: LD_INT 34
10187: PUSH
10188: LD_INT 35
10190: PUSH
10191: LD_INT 36
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 101
10234: PUSH
10235: LD_INT 102
10237: PUSH
10238: LD_INT 103
10240: PUSH
10241: LD_INT 104
10243: PUSH
10244: LD_INT 105
10246: PUSH
10247: LD_INT 106
10249: PUSH
10250: LD_INT 107
10252: PUSH
10253: LD_INT 108
10255: PUSH
10256: LD_INT 109
10258: PUSH
10259: LD_INT 110
10261: PUSH
10262: LD_INT 111
10264: PUSH
10265: LD_INT 112
10267: PUSH
10268: LD_INT 113
10270: PUSH
10271: LD_INT 114
10273: PUSH
10274: LD_INT 115
10276: PUSH
10277: LD_INT 116
10279: PUSH
10280: LD_INT 117
10282: PUSH
10283: LD_INT 118
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: ST_TO_ADDR
10310: GO 10313
10312: POP
// end else
10313: GO 10544
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10315: LD_ADDR_VAR 0 2
10319: PUSH
10320: LD_INT 1
10322: PUSH
10323: LD_INT 2
10325: PUSH
10326: LD_INT 3
10328: PUSH
10329: LD_INT 4
10331: PUSH
10332: LD_INT 5
10334: PUSH
10335: LD_INT 6
10337: PUSH
10338: LD_INT 7
10340: PUSH
10341: LD_INT 8
10343: PUSH
10344: LD_INT 9
10346: PUSH
10347: LD_INT 10
10349: PUSH
10350: LD_INT 11
10352: PUSH
10353: LD_INT 12
10355: PUSH
10356: LD_INT 13
10358: PUSH
10359: LD_INT 14
10361: PUSH
10362: LD_INT 15
10364: PUSH
10365: LD_INT 16
10367: PUSH
10368: LD_INT 17
10370: PUSH
10371: LD_INT 18
10373: PUSH
10374: LD_INT 19
10376: PUSH
10377: LD_INT 20
10379: PUSH
10380: LD_INT 21
10382: PUSH
10383: LD_INT 22
10385: PUSH
10386: LD_INT 23
10388: PUSH
10389: LD_INT 24
10391: PUSH
10392: LD_INT 25
10394: PUSH
10395: LD_INT 26
10397: PUSH
10398: LD_INT 27
10400: PUSH
10401: LD_INT 28
10403: PUSH
10404: LD_INT 29
10406: PUSH
10407: LD_INT 30
10409: PUSH
10410: LD_INT 31
10412: PUSH
10413: LD_INT 32
10415: PUSH
10416: LD_INT 33
10418: PUSH
10419: LD_INT 34
10421: PUSH
10422: LD_INT 35
10424: PUSH
10425: LD_INT 36
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 101
10468: PUSH
10469: LD_INT 102
10471: PUSH
10472: LD_INT 103
10474: PUSH
10475: LD_INT 104
10477: PUSH
10478: LD_INT 105
10480: PUSH
10481: LD_INT 106
10483: PUSH
10484: LD_INT 107
10486: PUSH
10487: LD_INT 108
10489: PUSH
10490: LD_INT 109
10492: PUSH
10493: LD_INT 110
10495: PUSH
10496: LD_INT 111
10498: PUSH
10499: LD_INT 112
10501: PUSH
10502: LD_INT 113
10504: PUSH
10505: LD_INT 114
10507: PUSH
10508: LD_INT 115
10510: PUSH
10511: LD_INT 116
10513: PUSH
10514: LD_INT 117
10516: PUSH
10517: LD_INT 118
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: ST_TO_ADDR
// if result then
10544: LD_VAR 0 2
10548: IFFALSE 11334
// begin normal :=  ;
10550: LD_ADDR_VAR 0 5
10554: PUSH
10555: LD_STRING 
10557: ST_TO_ADDR
// hardcore :=  ;
10558: LD_ADDR_VAR 0 6
10562: PUSH
10563: LD_STRING 
10565: ST_TO_ADDR
// active :=  ;
10566: LD_ADDR_VAR 0 7
10570: PUSH
10571: LD_STRING 
10573: ST_TO_ADDR
// for i = 1 to normalCounter do
10574: LD_ADDR_VAR 0 8
10578: PUSH
10579: DOUBLE
10580: LD_INT 1
10582: DEC
10583: ST_TO_ADDR
10584: LD_EXP 25
10588: PUSH
10589: FOR_TO
10590: IFFALSE 10691
// begin tmp := 0 ;
10592: LD_ADDR_VAR 0 3
10596: PUSH
10597: LD_STRING 0
10599: ST_TO_ADDR
// if result [ 1 ] then
10600: LD_VAR 0 2
10604: PUSH
10605: LD_INT 1
10607: ARRAY
10608: IFFALSE 10673
// if result [ 1 ] [ 1 ] = i then
10610: LD_VAR 0 2
10614: PUSH
10615: LD_INT 1
10617: ARRAY
10618: PUSH
10619: LD_INT 1
10621: ARRAY
10622: PUSH
10623: LD_VAR 0 8
10627: EQUAL
10628: IFFALSE 10673
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10630: LD_ADDR_VAR 0 2
10634: PUSH
10635: LD_VAR 0 2
10639: PPUSH
10640: LD_INT 1
10642: PPUSH
10643: LD_VAR 0 2
10647: PUSH
10648: LD_INT 1
10650: ARRAY
10651: PPUSH
10652: LD_INT 1
10654: PPUSH
10655: CALL_OW 3
10659: PPUSH
10660: CALL_OW 1
10664: ST_TO_ADDR
// tmp := 1 ;
10665: LD_ADDR_VAR 0 3
10669: PUSH
10670: LD_STRING 1
10672: ST_TO_ADDR
// end ; normal := normal & tmp ;
10673: LD_ADDR_VAR 0 5
10677: PUSH
10678: LD_VAR 0 5
10682: PUSH
10683: LD_VAR 0 3
10687: STR
10688: ST_TO_ADDR
// end ;
10689: GO 10589
10691: POP
10692: POP
// for i = 1 to hardcoreCounter do
10693: LD_ADDR_VAR 0 8
10697: PUSH
10698: DOUBLE
10699: LD_INT 1
10701: DEC
10702: ST_TO_ADDR
10703: LD_EXP 26
10707: PUSH
10708: FOR_TO
10709: IFFALSE 10814
// begin tmp := 0 ;
10711: LD_ADDR_VAR 0 3
10715: PUSH
10716: LD_STRING 0
10718: ST_TO_ADDR
// if result [ 2 ] then
10719: LD_VAR 0 2
10723: PUSH
10724: LD_INT 2
10726: ARRAY
10727: IFFALSE 10796
// if result [ 2 ] [ 1 ] = 100 + i then
10729: LD_VAR 0 2
10733: PUSH
10734: LD_INT 2
10736: ARRAY
10737: PUSH
10738: LD_INT 1
10740: ARRAY
10741: PUSH
10742: LD_INT 100
10744: PUSH
10745: LD_VAR 0 8
10749: PLUS
10750: EQUAL
10751: IFFALSE 10796
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10753: LD_ADDR_VAR 0 2
10757: PUSH
10758: LD_VAR 0 2
10762: PPUSH
10763: LD_INT 2
10765: PPUSH
10766: LD_VAR 0 2
10770: PUSH
10771: LD_INT 2
10773: ARRAY
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 3
10782: PPUSH
10783: CALL_OW 1
10787: ST_TO_ADDR
// tmp := 1 ;
10788: LD_ADDR_VAR 0 3
10792: PUSH
10793: LD_STRING 1
10795: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10796: LD_ADDR_VAR 0 6
10800: PUSH
10801: LD_VAR 0 6
10805: PUSH
10806: LD_VAR 0 3
10810: STR
10811: ST_TO_ADDR
// end ;
10812: GO 10708
10814: POP
10815: POP
// if isGameLoad then
10816: LD_VAR 0 1
10820: IFFALSE 11295
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10822: LD_ADDR_VAR 0 4
10826: PUSH
10827: LD_EXP 29
10831: PUSH
10832: LD_EXP 28
10836: PUSH
10837: LD_EXP 30
10841: PUSH
10842: LD_EXP 27
10846: PUSH
10847: LD_EXP 31
10851: PUSH
10852: LD_EXP 32
10856: PUSH
10857: LD_EXP 33
10861: PUSH
10862: LD_EXP 34
10866: PUSH
10867: LD_EXP 35
10871: PUSH
10872: LD_EXP 36
10876: PUSH
10877: LD_EXP 37
10881: PUSH
10882: LD_EXP 38
10886: PUSH
10887: LD_EXP 39
10891: PUSH
10892: LD_EXP 40
10896: PUSH
10897: LD_EXP 48
10901: PUSH
10902: LD_EXP 49
10906: PUSH
10907: LD_EXP 50
10911: PUSH
10912: LD_EXP 51
10916: PUSH
10917: LD_EXP 53
10921: PUSH
10922: LD_EXP 54
10926: PUSH
10927: LD_EXP 55
10931: PUSH
10932: LD_EXP 58
10936: PUSH
10937: LD_EXP 60
10941: PUSH
10942: LD_EXP 61
10946: PUSH
10947: LD_EXP 62
10951: PUSH
10952: LD_EXP 64
10956: PUSH
10957: LD_EXP 65
10961: PUSH
10962: LD_EXP 68
10966: PUSH
10967: LD_EXP 69
10971: PUSH
10972: LD_EXP 70
10976: PUSH
10977: LD_EXP 71
10981: PUSH
10982: LD_EXP 72
10986: PUSH
10987: LD_EXP 73
10991: PUSH
10992: LD_EXP 74
10996: PUSH
10997: LD_EXP 75
11001: PUSH
11002: LD_EXP 76
11006: PUSH
11007: LD_EXP 41
11011: PUSH
11012: LD_EXP 42
11016: PUSH
11017: LD_EXP 45
11021: PUSH
11022: LD_EXP 46
11026: PUSH
11027: LD_EXP 47
11031: PUSH
11032: LD_EXP 43
11036: PUSH
11037: LD_EXP 44
11041: PUSH
11042: LD_EXP 52
11046: PUSH
11047: LD_EXP 56
11051: PUSH
11052: LD_EXP 57
11056: PUSH
11057: LD_EXP 59
11061: PUSH
11062: LD_EXP 63
11066: PUSH
11067: LD_EXP 66
11071: PUSH
11072: LD_EXP 67
11076: PUSH
11077: LD_EXP 77
11081: PUSH
11082: LD_EXP 78
11086: PUSH
11087: LD_EXP 79
11091: PUSH
11092: LD_EXP 80
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: ST_TO_ADDR
// tmp :=  ;
11153: LD_ADDR_VAR 0 3
11157: PUSH
11158: LD_STRING 
11160: ST_TO_ADDR
// for i = 1 to normalCounter do
11161: LD_ADDR_VAR 0 8
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_EXP 25
11175: PUSH
11176: FOR_TO
11177: IFFALSE 11213
// begin if flags [ i ] then
11179: LD_VAR 0 4
11183: PUSH
11184: LD_VAR 0 8
11188: ARRAY
11189: IFFALSE 11211
// tmp := tmp & i & ; ;
11191: LD_ADDR_VAR 0 3
11195: PUSH
11196: LD_VAR 0 3
11200: PUSH
11201: LD_VAR 0 8
11205: STR
11206: PUSH
11207: LD_STRING ;
11209: STR
11210: ST_TO_ADDR
// end ;
11211: GO 11176
11213: POP
11214: POP
// for i = 1 to hardcoreCounter do
11215: LD_ADDR_VAR 0 8
11219: PUSH
11220: DOUBLE
11221: LD_INT 1
11223: DEC
11224: ST_TO_ADDR
11225: LD_EXP 26
11229: PUSH
11230: FOR_TO
11231: IFFALSE 11277
// begin if flags [ normalCounter + i ] then
11233: LD_VAR 0 4
11237: PUSH
11238: LD_EXP 25
11242: PUSH
11243: LD_VAR 0 8
11247: PLUS
11248: ARRAY
11249: IFFALSE 11275
// tmp := tmp & ( 100 + i ) & ; ;
11251: LD_ADDR_VAR 0 3
11255: PUSH
11256: LD_VAR 0 3
11260: PUSH
11261: LD_INT 100
11263: PUSH
11264: LD_VAR 0 8
11268: PLUS
11269: STR
11270: PUSH
11271: LD_STRING ;
11273: STR
11274: ST_TO_ADDR
// end ;
11275: GO 11230
11277: POP
11278: POP
// if tmp then
11279: LD_VAR 0 3
11283: IFFALSE 11295
// active := tmp ;
11285: LD_ADDR_VAR 0 7
11289: PUSH
11290: LD_VAR 0 3
11294: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11295: LD_STRING getStreamItemsFromMission("
11297: PUSH
11298: LD_VAR 0 5
11302: STR
11303: PUSH
11304: LD_STRING ","
11306: STR
11307: PUSH
11308: LD_VAR 0 6
11312: STR
11313: PUSH
11314: LD_STRING ","
11316: STR
11317: PUSH
11318: LD_VAR 0 7
11322: STR
11323: PUSH
11324: LD_STRING ")
11326: STR
11327: PPUSH
11328: CALL_OW 559
// end else
11332: GO 11341
// ToLua ( getStreamItemsFromMission("","","") ) ;
11334: LD_STRING getStreamItemsFromMission("","","")
11336: PPUSH
11337: CALL_OW 559
// end ;
11341: LD_VAR 0 2
11345: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11346: LD_EXP 24
11350: PUSH
11351: LD_EXP 29
11355: AND
11356: IFFALSE 11480
11358: GO 11360
11360: DISABLE
11361: LD_INT 0
11363: PPUSH
11364: PPUSH
// begin enable ;
11365: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11366: LD_ADDR_VAR 0 2
11370: PUSH
11371: LD_INT 22
11373: PUSH
11374: LD_OWVAR 2
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 2
11385: PUSH
11386: LD_INT 34
11388: PUSH
11389: LD_INT 7
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 34
11398: PUSH
11399: LD_INT 45
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 34
11408: PUSH
11409: LD_INT 28
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 34
11418: PUSH
11419: LD_INT 47
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PPUSH
11437: CALL_OW 69
11441: ST_TO_ADDR
// if not tmp then
11442: LD_VAR 0 2
11446: NOT
11447: IFFALSE 11451
// exit ;
11449: GO 11480
// for i in tmp do
11451: LD_ADDR_VAR 0 1
11455: PUSH
11456: LD_VAR 0 2
11460: PUSH
11461: FOR_IN
11462: IFFALSE 11478
// begin SetLives ( i , 0 ) ;
11464: LD_VAR 0 1
11468: PPUSH
11469: LD_INT 0
11471: PPUSH
11472: CALL_OW 234
// end ;
11476: GO 11461
11478: POP
11479: POP
// end ;
11480: PPOPN 2
11482: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11483: LD_EXP 24
11487: PUSH
11488: LD_EXP 30
11492: AND
11493: IFFALSE 11577
11495: GO 11497
11497: DISABLE
11498: LD_INT 0
11500: PPUSH
11501: PPUSH
// begin enable ;
11502: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: LD_INT 22
11510: PUSH
11511: LD_OWVAR 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 32
11522: PUSH
11523: LD_INT 3
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PPUSH
11534: CALL_OW 69
11538: ST_TO_ADDR
// if not tmp then
11539: LD_VAR 0 2
11543: NOT
11544: IFFALSE 11548
// exit ;
11546: GO 11577
// for i in tmp do
11548: LD_ADDR_VAR 0 1
11552: PUSH
11553: LD_VAR 0 2
11557: PUSH
11558: FOR_IN
11559: IFFALSE 11575
// begin SetLives ( i , 0 ) ;
11561: LD_VAR 0 1
11565: PPUSH
11566: LD_INT 0
11568: PPUSH
11569: CALL_OW 234
// end ;
11573: GO 11558
11575: POP
11576: POP
// end ;
11577: PPOPN 2
11579: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11580: LD_EXP 24
11584: PUSH
11585: LD_EXP 27
11589: AND
11590: IFFALSE 11683
11592: GO 11594
11594: DISABLE
11595: LD_INT 0
11597: PPUSH
// begin enable ;
11598: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11599: LD_ADDR_VAR 0 1
11603: PUSH
11604: LD_INT 22
11606: PUSH
11607: LD_OWVAR 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 2
11618: PUSH
11619: LD_INT 25
11621: PUSH
11622: LD_INT 5
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 25
11631: PUSH
11632: LD_INT 9
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 25
11641: PUSH
11642: LD_INT 8
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 69
11663: PUSH
11664: FOR_IN
11665: IFFALSE 11681
// begin SetClass ( i , 1 ) ;
11667: LD_VAR 0 1
11671: PPUSH
11672: LD_INT 1
11674: PPUSH
11675: CALL_OW 336
// end ;
11679: GO 11664
11681: POP
11682: POP
// end ;
11683: PPOPN 1
11685: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11686: LD_EXP 24
11690: PUSH
11691: LD_EXP 28
11695: AND
11696: PUSH
11697: LD_OWVAR 65
11701: PUSH
11702: LD_INT 7
11704: LESS
11705: AND
11706: IFFALSE 11720
11708: GO 11710
11710: DISABLE
// begin enable ;
11711: ENABLE
// game_speed := 7 ;
11712: LD_ADDR_OWVAR 65
11716: PUSH
11717: LD_INT 7
11719: ST_TO_ADDR
// end ;
11720: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11721: LD_EXP 24
11725: PUSH
11726: LD_EXP 31
11730: AND
11731: IFFALSE 11933
11733: GO 11735
11735: DISABLE
11736: LD_INT 0
11738: PPUSH
11739: PPUSH
11740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11741: LD_ADDR_VAR 0 3
11745: PUSH
11746: LD_INT 81
11748: PUSH
11749: LD_OWVAR 2
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: LD_INT 21
11760: PUSH
11761: LD_INT 1
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PPUSH
11772: CALL_OW 69
11776: ST_TO_ADDR
// if not tmp then
11777: LD_VAR 0 3
11781: NOT
11782: IFFALSE 11786
// exit ;
11784: GO 11933
// if tmp > 5 then
11786: LD_VAR 0 3
11790: PUSH
11791: LD_INT 5
11793: GREATER
11794: IFFALSE 11806
// k := 5 else
11796: LD_ADDR_VAR 0 2
11800: PUSH
11801: LD_INT 5
11803: ST_TO_ADDR
11804: GO 11816
// k := tmp ;
11806: LD_ADDR_VAR 0 2
11810: PUSH
11811: LD_VAR 0 3
11815: ST_TO_ADDR
// for i := 1 to k do
11816: LD_ADDR_VAR 0 1
11820: PUSH
11821: DOUBLE
11822: LD_INT 1
11824: DEC
11825: ST_TO_ADDR
11826: LD_VAR 0 2
11830: PUSH
11831: FOR_TO
11832: IFFALSE 11931
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11834: LD_VAR 0 3
11838: PUSH
11839: LD_VAR 0 1
11843: ARRAY
11844: PPUSH
11845: LD_VAR 0 1
11849: PUSH
11850: LD_INT 4
11852: MOD
11853: PUSH
11854: LD_INT 1
11856: PLUS
11857: PPUSH
11858: CALL_OW 259
11862: PUSH
11863: LD_INT 10
11865: LESS
11866: IFFALSE 11929
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11868: LD_VAR 0 3
11872: PUSH
11873: LD_VAR 0 1
11877: ARRAY
11878: PPUSH
11879: LD_VAR 0 1
11883: PUSH
11884: LD_INT 4
11886: MOD
11887: PUSH
11888: LD_INT 1
11890: PLUS
11891: PPUSH
11892: LD_VAR 0 3
11896: PUSH
11897: LD_VAR 0 1
11901: ARRAY
11902: PPUSH
11903: LD_VAR 0 1
11907: PUSH
11908: LD_INT 4
11910: MOD
11911: PUSH
11912: LD_INT 1
11914: PLUS
11915: PPUSH
11916: CALL_OW 259
11920: PUSH
11921: LD_INT 1
11923: PLUS
11924: PPUSH
11925: CALL_OW 237
11929: GO 11831
11931: POP
11932: POP
// end ;
11933: PPOPN 3
11935: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11936: LD_EXP 24
11940: PUSH
11941: LD_EXP 32
11945: AND
11946: IFFALSE 11966
11948: GO 11950
11950: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11951: LD_INT 4
11953: PPUSH
11954: LD_OWVAR 2
11958: PPUSH
11959: LD_INT 0
11961: PPUSH
11962: CALL_OW 324
11966: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11967: LD_EXP 24
11971: PUSH
11972: LD_EXP 61
11976: AND
11977: IFFALSE 11997
11979: GO 11981
11981: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11982: LD_INT 19
11984: PPUSH
11985: LD_OWVAR 2
11989: PPUSH
11990: LD_INT 0
11992: PPUSH
11993: CALL_OW 324
11997: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11998: LD_EXP 24
12002: PUSH
12003: LD_EXP 33
12007: AND
12008: IFFALSE 12110
12010: GO 12012
12012: DISABLE
12013: LD_INT 0
12015: PPUSH
12016: PPUSH
// begin enable ;
12017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12018: LD_ADDR_VAR 0 2
12022: PUSH
12023: LD_INT 22
12025: PUSH
12026: LD_OWVAR 2
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 2
12037: PUSH
12038: LD_INT 34
12040: PUSH
12041: LD_INT 11
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 34
12050: PUSH
12051: LD_INT 30
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PPUSH
12067: CALL_OW 69
12071: ST_TO_ADDR
// if not tmp then
12072: LD_VAR 0 2
12076: NOT
12077: IFFALSE 12081
// exit ;
12079: GO 12110
// for i in tmp do
12081: LD_ADDR_VAR 0 1
12085: PUSH
12086: LD_VAR 0 2
12090: PUSH
12091: FOR_IN
12092: IFFALSE 12108
// begin SetLives ( i , 0 ) ;
12094: LD_VAR 0 1
12098: PPUSH
12099: LD_INT 0
12101: PPUSH
12102: CALL_OW 234
// end ;
12106: GO 12091
12108: POP
12109: POP
// end ;
12110: PPOPN 2
12112: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12113: LD_EXP 24
12117: PUSH
12118: LD_EXP 34
12122: AND
12123: IFFALSE 12143
12125: GO 12127
12127: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12128: LD_INT 32
12130: PPUSH
12131: LD_OWVAR 2
12135: PPUSH
12136: LD_INT 0
12138: PPUSH
12139: CALL_OW 324
12143: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12144: LD_EXP 24
12148: PUSH
12149: LD_EXP 35
12153: AND
12154: IFFALSE 12335
12156: GO 12158
12158: DISABLE
12159: LD_INT 0
12161: PPUSH
12162: PPUSH
12163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12164: LD_ADDR_VAR 0 2
12168: PUSH
12169: LD_INT 22
12171: PUSH
12172: LD_OWVAR 2
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 33
12183: PUSH
12184: LD_INT 3
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PPUSH
12195: CALL_OW 69
12199: ST_TO_ADDR
// if not tmp then
12200: LD_VAR 0 2
12204: NOT
12205: IFFALSE 12209
// exit ;
12207: GO 12335
// side := 0 ;
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_INT 0
12216: ST_TO_ADDR
// for i := 1 to 8 do
12217: LD_ADDR_VAR 0 1
12221: PUSH
12222: DOUBLE
12223: LD_INT 1
12225: DEC
12226: ST_TO_ADDR
12227: LD_INT 8
12229: PUSH
12230: FOR_TO
12231: IFFALSE 12279
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12233: LD_OWVAR 2
12237: PUSH
12238: LD_VAR 0 1
12242: NONEQUAL
12243: PUSH
12244: LD_OWVAR 2
12248: PPUSH
12249: LD_VAR 0 1
12253: PPUSH
12254: CALL_OW 81
12258: PUSH
12259: LD_INT 2
12261: EQUAL
12262: AND
12263: IFFALSE 12277
// begin side := i ;
12265: LD_ADDR_VAR 0 3
12269: PUSH
12270: LD_VAR 0 1
12274: ST_TO_ADDR
// break ;
12275: GO 12279
// end ;
12277: GO 12230
12279: POP
12280: POP
// if not side then
12281: LD_VAR 0 3
12285: NOT
12286: IFFALSE 12290
// exit ;
12288: GO 12335
// for i := 1 to tmp do
12290: LD_ADDR_VAR 0 1
12294: PUSH
12295: DOUBLE
12296: LD_INT 1
12298: DEC
12299: ST_TO_ADDR
12300: LD_VAR 0 2
12304: PUSH
12305: FOR_TO
12306: IFFALSE 12333
// if Prob ( 60 ) then
12308: LD_INT 60
12310: PPUSH
12311: CALL_OW 13
12315: IFFALSE 12331
// SetSide ( i , side ) ;
12317: LD_VAR 0 1
12321: PPUSH
12322: LD_VAR 0 3
12326: PPUSH
12327: CALL_OW 235
12331: GO 12305
12333: POP
12334: POP
// end ;
12335: PPOPN 3
12337: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12338: LD_EXP 24
12342: PUSH
12343: LD_EXP 37
12347: AND
12348: IFFALSE 12467
12350: GO 12352
12352: DISABLE
12353: LD_INT 0
12355: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12356: LD_ADDR_VAR 0 1
12360: PUSH
12361: LD_INT 22
12363: PUSH
12364: LD_OWVAR 2
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 21
12375: PUSH
12376: LD_INT 1
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 3
12385: PUSH
12386: LD_INT 23
12388: PUSH
12389: LD_INT 0
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: PPUSH
12405: CALL_OW 69
12409: PUSH
12410: FOR_IN
12411: IFFALSE 12465
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12413: LD_VAR 0 1
12417: PPUSH
12418: CALL_OW 257
12422: PUSH
12423: LD_INT 1
12425: PUSH
12426: LD_INT 2
12428: PUSH
12429: LD_INT 3
12431: PUSH
12432: LD_INT 4
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: IN
12441: IFFALSE 12463
// SetClass ( un , rand ( 1 , 4 ) ) ;
12443: LD_VAR 0 1
12447: PPUSH
12448: LD_INT 1
12450: PPUSH
12451: LD_INT 4
12453: PPUSH
12454: CALL_OW 12
12458: PPUSH
12459: CALL_OW 336
12463: GO 12410
12465: POP
12466: POP
// end ;
12467: PPOPN 1
12469: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12470: LD_EXP 24
12474: PUSH
12475: LD_EXP 36
12479: AND
12480: IFFALSE 12559
12482: GO 12484
12484: DISABLE
12485: LD_INT 0
12487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12488: LD_ADDR_VAR 0 1
12492: PUSH
12493: LD_INT 22
12495: PUSH
12496: LD_OWVAR 2
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: LD_INT 21
12507: PUSH
12508: LD_INT 3
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PPUSH
12519: CALL_OW 69
12523: ST_TO_ADDR
// if not tmp then
12524: LD_VAR 0 1
12528: NOT
12529: IFFALSE 12533
// exit ;
12531: GO 12559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12533: LD_VAR 0 1
12537: PUSH
12538: LD_INT 1
12540: PPUSH
12541: LD_VAR 0 1
12545: PPUSH
12546: CALL_OW 12
12550: ARRAY
12551: PPUSH
12552: LD_INT 100
12554: PPUSH
12555: CALL_OW 234
// end ;
12559: PPOPN 1
12561: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12562: LD_EXP 24
12566: PUSH
12567: LD_EXP 38
12571: AND
12572: IFFALSE 12670
12574: GO 12576
12576: DISABLE
12577: LD_INT 0
12579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12580: LD_ADDR_VAR 0 1
12584: PUSH
12585: LD_INT 22
12587: PUSH
12588: LD_OWVAR 2
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 21
12599: PUSH
12600: LD_INT 1
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PPUSH
12611: CALL_OW 69
12615: ST_TO_ADDR
// if not tmp then
12616: LD_VAR 0 1
12620: NOT
12621: IFFALSE 12625
// exit ;
12623: GO 12670
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12625: LD_VAR 0 1
12629: PUSH
12630: LD_INT 1
12632: PPUSH
12633: LD_VAR 0 1
12637: PPUSH
12638: CALL_OW 12
12642: ARRAY
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: LD_INT 4
12649: PPUSH
12650: CALL_OW 12
12654: PPUSH
12655: LD_INT 3000
12657: PPUSH
12658: LD_INT 9000
12660: PPUSH
12661: CALL_OW 12
12665: PPUSH
12666: CALL_OW 492
// end ;
12670: PPOPN 1
12672: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12673: LD_EXP 24
12677: PUSH
12678: LD_EXP 39
12682: AND
12683: IFFALSE 12703
12685: GO 12687
12687: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12688: LD_INT 1
12690: PPUSH
12691: LD_OWVAR 2
12695: PPUSH
12696: LD_INT 0
12698: PPUSH
12699: CALL_OW 324
12703: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12704: LD_EXP 24
12708: PUSH
12709: LD_EXP 40
12713: AND
12714: IFFALSE 12797
12716: GO 12718
12718: DISABLE
12719: LD_INT 0
12721: PPUSH
12722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12723: LD_ADDR_VAR 0 2
12727: PUSH
12728: LD_INT 22
12730: PUSH
12731: LD_OWVAR 2
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 21
12742: PUSH
12743: LD_INT 3
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PPUSH
12754: CALL_OW 69
12758: ST_TO_ADDR
// if not tmp then
12759: LD_VAR 0 2
12763: NOT
12764: IFFALSE 12768
// exit ;
12766: GO 12797
// for i in tmp do
12768: LD_ADDR_VAR 0 1
12772: PUSH
12773: LD_VAR 0 2
12777: PUSH
12778: FOR_IN
12779: IFFALSE 12795
// SetBLevel ( i , 10 ) ;
12781: LD_VAR 0 1
12785: PPUSH
12786: LD_INT 10
12788: PPUSH
12789: CALL_OW 241
12793: GO 12778
12795: POP
12796: POP
// end ;
12797: PPOPN 2
12799: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12800: LD_EXP 24
12804: PUSH
12805: LD_EXP 41
12809: AND
12810: IFFALSE 12921
12812: GO 12814
12814: DISABLE
12815: LD_INT 0
12817: PPUSH
12818: PPUSH
12819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12820: LD_ADDR_VAR 0 3
12824: PUSH
12825: LD_INT 22
12827: PUSH
12828: LD_OWVAR 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 25
12839: PUSH
12840: LD_INT 1
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PPUSH
12851: CALL_OW 69
12855: ST_TO_ADDR
// if not tmp then
12856: LD_VAR 0 3
12860: NOT
12861: IFFALSE 12865
// exit ;
12863: GO 12921
// un := tmp [ rand ( 1 , tmp ) ] ;
12865: LD_ADDR_VAR 0 2
12869: PUSH
12870: LD_VAR 0 3
12874: PUSH
12875: LD_INT 1
12877: PPUSH
12878: LD_VAR 0 3
12882: PPUSH
12883: CALL_OW 12
12887: ARRAY
12888: ST_TO_ADDR
// if Crawls ( un ) then
12889: LD_VAR 0 2
12893: PPUSH
12894: CALL_OW 318
12898: IFFALSE 12909
// ComWalk ( un ) ;
12900: LD_VAR 0 2
12904: PPUSH
12905: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12909: LD_VAR 0 2
12913: PPUSH
12914: LD_INT 5
12916: PPUSH
12917: CALL_OW 336
// end ;
12921: PPOPN 3
12923: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12924: LD_EXP 24
12928: PUSH
12929: LD_EXP 42
12933: AND
12934: PUSH
12935: LD_OWVAR 67
12939: PUSH
12940: LD_INT 4
12942: LESS
12943: AND
12944: IFFALSE 12963
12946: GO 12948
12948: DISABLE
// begin Difficulty := Difficulty + 1 ;
12949: LD_ADDR_OWVAR 67
12953: PUSH
12954: LD_OWVAR 67
12958: PUSH
12959: LD_INT 1
12961: PLUS
12962: ST_TO_ADDR
// end ;
12963: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12964: LD_EXP 24
12968: PUSH
12969: LD_EXP 43
12973: AND
12974: IFFALSE 13077
12976: GO 12978
12978: DISABLE
12979: LD_INT 0
12981: PPUSH
// begin for i := 1 to 5 do
12982: LD_ADDR_VAR 0 1
12986: PUSH
12987: DOUBLE
12988: LD_INT 1
12990: DEC
12991: ST_TO_ADDR
12992: LD_INT 5
12994: PUSH
12995: FOR_TO
12996: IFFALSE 13075
// begin uc_nation := nation_nature ;
12998: LD_ADDR_OWVAR 21
13002: PUSH
13003: LD_INT 0
13005: ST_TO_ADDR
// uc_side := 0 ;
13006: LD_ADDR_OWVAR 20
13010: PUSH
13011: LD_INT 0
13013: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13014: LD_ADDR_OWVAR 29
13018: PUSH
13019: LD_INT 12
13021: PUSH
13022: LD_INT 12
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: ST_TO_ADDR
// hc_agressivity := 20 ;
13029: LD_ADDR_OWVAR 35
13033: PUSH
13034: LD_INT 20
13036: ST_TO_ADDR
// hc_class := class_tiger ;
13037: LD_ADDR_OWVAR 28
13041: PUSH
13042: LD_INT 14
13044: ST_TO_ADDR
// hc_gallery :=  ;
13045: LD_ADDR_OWVAR 33
13049: PUSH
13050: LD_STRING 
13052: ST_TO_ADDR
// hc_name :=  ;
13053: LD_ADDR_OWVAR 26
13057: PUSH
13058: LD_STRING 
13060: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13061: CALL_OW 44
13065: PPUSH
13066: LD_INT 0
13068: PPUSH
13069: CALL_OW 51
// end ;
13073: GO 12995
13075: POP
13076: POP
// end ;
13077: PPOPN 1
13079: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13080: LD_EXP 24
13084: PUSH
13085: LD_EXP 44
13089: AND
13090: IFFALSE 13099
13092: GO 13094
13094: DISABLE
// StreamSibBomb ;
13095: CALL 13100 0 0
13099: END
// export function StreamSibBomb ; var i , x , y ; begin
13100: LD_INT 0
13102: PPUSH
13103: PPUSH
13104: PPUSH
13105: PPUSH
// result := false ;
13106: LD_ADDR_VAR 0 1
13110: PUSH
13111: LD_INT 0
13113: ST_TO_ADDR
// for i := 1 to 16 do
13114: LD_ADDR_VAR 0 2
13118: PUSH
13119: DOUBLE
13120: LD_INT 1
13122: DEC
13123: ST_TO_ADDR
13124: LD_INT 16
13126: PUSH
13127: FOR_TO
13128: IFFALSE 13327
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13130: LD_ADDR_VAR 0 3
13134: PUSH
13135: LD_INT 10
13137: PUSH
13138: LD_INT 20
13140: PUSH
13141: LD_INT 30
13143: PUSH
13144: LD_INT 40
13146: PUSH
13147: LD_INT 50
13149: PUSH
13150: LD_INT 60
13152: PUSH
13153: LD_INT 70
13155: PUSH
13156: LD_INT 80
13158: PUSH
13159: LD_INT 90
13161: PUSH
13162: LD_INT 100
13164: PUSH
13165: LD_INT 110
13167: PUSH
13168: LD_INT 120
13170: PUSH
13171: LD_INT 130
13173: PUSH
13174: LD_INT 140
13176: PUSH
13177: LD_INT 150
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 1
13199: PPUSH
13200: LD_INT 15
13202: PPUSH
13203: CALL_OW 12
13207: ARRAY
13208: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13209: LD_ADDR_VAR 0 4
13213: PUSH
13214: LD_INT 10
13216: PUSH
13217: LD_INT 20
13219: PUSH
13220: LD_INT 30
13222: PUSH
13223: LD_INT 40
13225: PUSH
13226: LD_INT 50
13228: PUSH
13229: LD_INT 60
13231: PUSH
13232: LD_INT 70
13234: PUSH
13235: LD_INT 80
13237: PUSH
13238: LD_INT 90
13240: PUSH
13241: LD_INT 100
13243: PUSH
13244: LD_INT 110
13246: PUSH
13247: LD_INT 120
13249: PUSH
13250: LD_INT 130
13252: PUSH
13253: LD_INT 140
13255: PUSH
13256: LD_INT 150
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 1
13278: PPUSH
13279: LD_INT 15
13281: PPUSH
13282: CALL_OW 12
13286: ARRAY
13287: ST_TO_ADDR
// if ValidHex ( x , y ) then
13288: LD_VAR 0 3
13292: PPUSH
13293: LD_VAR 0 4
13297: PPUSH
13298: CALL_OW 488
13302: IFFALSE 13325
// begin result := [ x , y ] ;
13304: LD_ADDR_VAR 0 1
13308: PUSH
13309: LD_VAR 0 3
13313: PUSH
13314: LD_VAR 0 4
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: ST_TO_ADDR
// break ;
13323: GO 13327
// end ; end ;
13325: GO 13127
13327: POP
13328: POP
// if result then
13329: LD_VAR 0 1
13333: IFFALSE 13393
// begin ToLua ( playSibBomb() ) ;
13335: LD_STRING playSibBomb()
13337: PPUSH
13338: CALL_OW 559
// wait ( 0 0$14 ) ;
13342: LD_INT 490
13344: PPUSH
13345: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13349: LD_VAR 0 1
13353: PUSH
13354: LD_INT 1
13356: ARRAY
13357: PPUSH
13358: LD_VAR 0 1
13362: PUSH
13363: LD_INT 2
13365: ARRAY
13366: PPUSH
13367: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13371: LD_VAR 0 1
13375: PUSH
13376: LD_INT 1
13378: ARRAY
13379: PPUSH
13380: LD_VAR 0 1
13384: PUSH
13385: LD_INT 2
13387: ARRAY
13388: PPUSH
13389: CALL_OW 429
// end ; end ;
13393: LD_VAR 0 1
13397: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13398: LD_EXP 24
13402: PUSH
13403: LD_EXP 46
13407: AND
13408: IFFALSE 13420
13410: GO 13412
13412: DISABLE
// YouLost (  ) ;
13413: LD_STRING 
13415: PPUSH
13416: CALL_OW 104
13420: END
// every 0 0$1 trigger StreamModeActive and sFog do
13421: LD_EXP 24
13425: PUSH
13426: LD_EXP 45
13430: AND
13431: IFFALSE 13445
13433: GO 13435
13435: DISABLE
// FogOff ( your_side ) ;
13436: LD_OWVAR 2
13440: PPUSH
13441: CALL_OW 344
13445: END
// every 0 0$1 trigger StreamModeActive and sSun do
13446: LD_EXP 24
13450: PUSH
13451: LD_EXP 47
13455: AND
13456: IFFALSE 13484
13458: GO 13460
13460: DISABLE
// begin solar_recharge_percent := 0 ;
13461: LD_ADDR_OWVAR 79
13465: PUSH
13466: LD_INT 0
13468: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13469: LD_INT 10500
13471: PPUSH
13472: CALL_OW 67
// solar_recharge_percent := 100 ;
13476: LD_ADDR_OWVAR 79
13480: PUSH
13481: LD_INT 100
13483: ST_TO_ADDR
// end ;
13484: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13485: LD_EXP 24
13489: PUSH
13490: LD_EXP 48
13494: AND
13495: IFFALSE 13734
13497: GO 13499
13499: DISABLE
13500: LD_INT 0
13502: PPUSH
13503: PPUSH
13504: PPUSH
// begin tmp := [ ] ;
13505: LD_ADDR_VAR 0 3
13509: PUSH
13510: EMPTY
13511: ST_TO_ADDR
// for i := 1 to 6 do
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_INT 6
13524: PUSH
13525: FOR_TO
13526: IFFALSE 13631
// begin uc_nation := nation_nature ;
13528: LD_ADDR_OWVAR 21
13532: PUSH
13533: LD_INT 0
13535: ST_TO_ADDR
// uc_side := 0 ;
13536: LD_ADDR_OWVAR 20
13540: PUSH
13541: LD_INT 0
13543: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13544: LD_ADDR_OWVAR 29
13548: PUSH
13549: LD_INT 12
13551: PUSH
13552: LD_INT 12
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: ST_TO_ADDR
// hc_agressivity := 20 ;
13559: LD_ADDR_OWVAR 35
13563: PUSH
13564: LD_INT 20
13566: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13567: LD_ADDR_OWVAR 28
13571: PUSH
13572: LD_INT 17
13574: ST_TO_ADDR
// hc_gallery :=  ;
13575: LD_ADDR_OWVAR 33
13579: PUSH
13580: LD_STRING 
13582: ST_TO_ADDR
// hc_name :=  ;
13583: LD_ADDR_OWVAR 26
13587: PUSH
13588: LD_STRING 
13590: ST_TO_ADDR
// un := CreateHuman ;
13591: LD_ADDR_VAR 0 2
13595: PUSH
13596: CALL_OW 44
13600: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13601: LD_VAR 0 2
13605: PPUSH
13606: LD_INT 1
13608: PPUSH
13609: CALL_OW 51
// tmp := tmp ^ un ;
13613: LD_ADDR_VAR 0 3
13617: PUSH
13618: LD_VAR 0 3
13622: PUSH
13623: LD_VAR 0 2
13627: ADD
13628: ST_TO_ADDR
// end ;
13629: GO 13525
13631: POP
13632: POP
// repeat wait ( 0 0$1 ) ;
13633: LD_INT 35
13635: PPUSH
13636: CALL_OW 67
// for un in tmp do
13640: LD_ADDR_VAR 0 2
13644: PUSH
13645: LD_VAR 0 3
13649: PUSH
13650: FOR_IN
13651: IFFALSE 13725
// begin if IsDead ( un ) then
13653: LD_VAR 0 2
13657: PPUSH
13658: CALL_OW 301
13662: IFFALSE 13682
// begin tmp := tmp diff un ;
13664: LD_ADDR_VAR 0 3
13668: PUSH
13669: LD_VAR 0 3
13673: PUSH
13674: LD_VAR 0 2
13678: DIFF
13679: ST_TO_ADDR
// continue ;
13680: GO 13650
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13682: LD_VAR 0 2
13686: PPUSH
13687: LD_INT 3
13689: PUSH
13690: LD_INT 22
13692: PUSH
13693: LD_INT 0
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PPUSH
13704: CALL_OW 69
13708: PPUSH
13709: LD_VAR 0 2
13713: PPUSH
13714: CALL_OW 74
13718: PPUSH
13719: CALL_OW 115
// end ;
13723: GO 13650
13725: POP
13726: POP
// until not tmp ;
13727: LD_VAR 0 3
13731: NOT
13732: IFFALSE 13633
// end ;
13734: PPOPN 3
13736: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13737: LD_EXP 24
13741: PUSH
13742: LD_EXP 49
13746: AND
13747: IFFALSE 13801
13749: GO 13751
13751: DISABLE
// begin ToLua ( displayTroll(); ) ;
13752: LD_STRING displayTroll();
13754: PPUSH
13755: CALL_OW 559
// wait ( 3 3$00 ) ;
13759: LD_INT 6300
13761: PPUSH
13762: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13766: LD_STRING hideTroll();
13768: PPUSH
13769: CALL_OW 559
// wait ( 1 1$00 ) ;
13773: LD_INT 2100
13775: PPUSH
13776: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13780: LD_STRING displayTroll();
13782: PPUSH
13783: CALL_OW 559
// wait ( 1 1$00 ) ;
13787: LD_INT 2100
13789: PPUSH
13790: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13794: LD_STRING hideTroll();
13796: PPUSH
13797: CALL_OW 559
// end ;
13801: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13802: LD_EXP 24
13806: PUSH
13807: LD_EXP 50
13811: AND
13812: IFFALSE 13875
13814: GO 13816
13816: DISABLE
13817: LD_INT 0
13819: PPUSH
// begin p := 0 ;
13820: LD_ADDR_VAR 0 1
13824: PUSH
13825: LD_INT 0
13827: ST_TO_ADDR
// repeat game_speed := 1 ;
13828: LD_ADDR_OWVAR 65
13832: PUSH
13833: LD_INT 1
13835: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13836: LD_INT 35
13838: PPUSH
13839: CALL_OW 67
// p := p + 1 ;
13843: LD_ADDR_VAR 0 1
13847: PUSH
13848: LD_VAR 0 1
13852: PUSH
13853: LD_INT 1
13855: PLUS
13856: ST_TO_ADDR
// until p >= 60 ;
13857: LD_VAR 0 1
13861: PUSH
13862: LD_INT 60
13864: GREATEREQUAL
13865: IFFALSE 13828
// game_speed := 4 ;
13867: LD_ADDR_OWVAR 65
13871: PUSH
13872: LD_INT 4
13874: ST_TO_ADDR
// end ;
13875: PPOPN 1
13877: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13878: LD_EXP 24
13882: PUSH
13883: LD_EXP 51
13887: AND
13888: IFFALSE 14034
13890: GO 13892
13892: DISABLE
13893: LD_INT 0
13895: PPUSH
13896: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13897: LD_ADDR_VAR 0 1
13901: PUSH
13902: LD_INT 22
13904: PUSH
13905: LD_OWVAR 2
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: LD_INT 2
13916: PUSH
13917: LD_INT 30
13919: PUSH
13920: LD_INT 0
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 30
13929: PUSH
13930: LD_INT 1
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PPUSH
13946: CALL_OW 69
13950: ST_TO_ADDR
// if not depot then
13951: LD_VAR 0 1
13955: NOT
13956: IFFALSE 13960
// exit ;
13958: GO 14034
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13960: LD_ADDR_VAR 0 2
13964: PUSH
13965: LD_VAR 0 1
13969: PUSH
13970: LD_INT 1
13972: PPUSH
13973: LD_VAR 0 1
13977: PPUSH
13978: CALL_OW 12
13982: ARRAY
13983: PPUSH
13984: CALL_OW 274
13988: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13989: LD_VAR 0 2
13993: PPUSH
13994: LD_INT 1
13996: PPUSH
13997: LD_INT 0
13999: PPUSH
14000: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14004: LD_VAR 0 2
14008: PPUSH
14009: LD_INT 2
14011: PPUSH
14012: LD_INT 0
14014: PPUSH
14015: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14019: LD_VAR 0 2
14023: PPUSH
14024: LD_INT 3
14026: PPUSH
14027: LD_INT 0
14029: PPUSH
14030: CALL_OW 277
// end ;
14034: PPOPN 2
14036: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14037: LD_EXP 24
14041: PUSH
14042: LD_EXP 52
14046: AND
14047: IFFALSE 14144
14049: GO 14051
14051: DISABLE
14052: LD_INT 0
14054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14055: LD_ADDR_VAR 0 1
14059: PUSH
14060: LD_INT 22
14062: PUSH
14063: LD_OWVAR 2
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 3
14084: PUSH
14085: LD_INT 23
14087: PUSH
14088: LD_INT 0
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 69
14108: ST_TO_ADDR
// if not tmp then
14109: LD_VAR 0 1
14113: NOT
14114: IFFALSE 14118
// exit ;
14116: GO 14144
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14118: LD_VAR 0 1
14122: PUSH
14123: LD_INT 1
14125: PPUSH
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 12
14135: ARRAY
14136: PPUSH
14137: LD_INT 200
14139: PPUSH
14140: CALL_OW 234
// end ;
14144: PPOPN 1
14146: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14147: LD_EXP 24
14151: PUSH
14152: LD_EXP 53
14156: AND
14157: IFFALSE 14236
14159: GO 14161
14161: DISABLE
14162: LD_INT 0
14164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14165: LD_ADDR_VAR 0 1
14169: PUSH
14170: LD_INT 22
14172: PUSH
14173: LD_OWVAR 2
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 21
14184: PUSH
14185: LD_INT 2
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PPUSH
14196: CALL_OW 69
14200: ST_TO_ADDR
// if not tmp then
14201: LD_VAR 0 1
14205: NOT
14206: IFFALSE 14210
// exit ;
14208: GO 14236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14210: LD_VAR 0 1
14214: PUSH
14215: LD_INT 1
14217: PPUSH
14218: LD_VAR 0 1
14222: PPUSH
14223: CALL_OW 12
14227: ARRAY
14228: PPUSH
14229: LD_INT 60
14231: PPUSH
14232: CALL_OW 234
// end ;
14236: PPOPN 1
14238: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14239: LD_EXP 24
14243: PUSH
14244: LD_EXP 54
14248: AND
14249: IFFALSE 14348
14251: GO 14253
14253: DISABLE
14254: LD_INT 0
14256: PPUSH
14257: PPUSH
// begin enable ;
14258: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14259: LD_ADDR_VAR 0 1
14263: PUSH
14264: LD_INT 22
14266: PUSH
14267: LD_OWVAR 2
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 61
14278: PUSH
14279: EMPTY
14280: LIST
14281: PUSH
14282: LD_INT 33
14284: PUSH
14285: LD_INT 2
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: PPUSH
14297: CALL_OW 69
14301: ST_TO_ADDR
// if not tmp then
14302: LD_VAR 0 1
14306: NOT
14307: IFFALSE 14311
// exit ;
14309: GO 14348
// for i in tmp do
14311: LD_ADDR_VAR 0 2
14315: PUSH
14316: LD_VAR 0 1
14320: PUSH
14321: FOR_IN
14322: IFFALSE 14346
// if IsControledBy ( i ) then
14324: LD_VAR 0 2
14328: PPUSH
14329: CALL_OW 312
14333: IFFALSE 14344
// ComUnlink ( i ) ;
14335: LD_VAR 0 2
14339: PPUSH
14340: CALL_OW 136
14344: GO 14321
14346: POP
14347: POP
// end ;
14348: PPOPN 2
14350: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14351: LD_EXP 24
14355: PUSH
14356: LD_EXP 55
14360: AND
14361: IFFALSE 14501
14363: GO 14365
14365: DISABLE
14366: LD_INT 0
14368: PPUSH
14369: PPUSH
// begin ToLua ( displayPowell(); ) ;
14370: LD_STRING displayPowell();
14372: PPUSH
14373: CALL_OW 559
// uc_side := 0 ;
14377: LD_ADDR_OWVAR 20
14381: PUSH
14382: LD_INT 0
14384: ST_TO_ADDR
// uc_nation := 2 ;
14385: LD_ADDR_OWVAR 21
14389: PUSH
14390: LD_INT 2
14392: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14393: LD_ADDR_OWVAR 37
14397: PUSH
14398: LD_INT 14
14400: ST_TO_ADDR
// vc_engine := engine_siberite ;
14401: LD_ADDR_OWVAR 39
14405: PUSH
14406: LD_INT 3
14408: ST_TO_ADDR
// vc_control := control_apeman ;
14409: LD_ADDR_OWVAR 38
14413: PUSH
14414: LD_INT 5
14416: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14417: LD_ADDR_OWVAR 40
14421: PUSH
14422: LD_INT 29
14424: ST_TO_ADDR
// un := CreateVehicle ;
14425: LD_ADDR_VAR 0 2
14429: PUSH
14430: CALL_OW 45
14434: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14435: LD_VAR 0 2
14439: PPUSH
14440: LD_INT 1
14442: PPUSH
14443: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14447: LD_INT 35
14449: PPUSH
14450: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14454: LD_VAR 0 2
14458: PPUSH
14459: LD_INT 22
14461: PUSH
14462: LD_OWVAR 2
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PPUSH
14471: CALL_OW 69
14475: PPUSH
14476: LD_VAR 0 2
14480: PPUSH
14481: CALL_OW 74
14485: PPUSH
14486: CALL_OW 115
// until IsDead ( un ) ;
14490: LD_VAR 0 2
14494: PPUSH
14495: CALL_OW 301
14499: IFFALSE 14447
// end ;
14501: PPOPN 2
14503: END
// every 0 0$1 trigger StreamModeActive and sStu do
14504: LD_EXP 24
14508: PUSH
14509: LD_EXP 63
14513: AND
14514: IFFALSE 14530
14516: GO 14518
14518: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14519: LD_STRING displayStucuk();
14521: PPUSH
14522: CALL_OW 559
// ResetFog ;
14526: CALL_OW 335
// end ;
14530: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14531: LD_EXP 24
14535: PUSH
14536: LD_EXP 56
14540: AND
14541: IFFALSE 14682
14543: GO 14545
14545: DISABLE
14546: LD_INT 0
14548: PPUSH
14549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14550: LD_ADDR_VAR 0 2
14554: PUSH
14555: LD_INT 22
14557: PUSH
14558: LD_OWVAR 2
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 21
14569: PUSH
14570: LD_INT 1
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PPUSH
14581: CALL_OW 69
14585: ST_TO_ADDR
// if not tmp then
14586: LD_VAR 0 2
14590: NOT
14591: IFFALSE 14595
// exit ;
14593: GO 14682
// un := tmp [ rand ( 1 , tmp ) ] ;
14595: LD_ADDR_VAR 0 1
14599: PUSH
14600: LD_VAR 0 2
14604: PUSH
14605: LD_INT 1
14607: PPUSH
14608: LD_VAR 0 2
14612: PPUSH
14613: CALL_OW 12
14617: ARRAY
14618: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14619: LD_VAR 0 1
14623: PPUSH
14624: LD_INT 0
14626: PPUSH
14627: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14631: LD_VAR 0 1
14635: PPUSH
14636: LD_OWVAR 3
14640: PUSH
14641: LD_VAR 0 1
14645: DIFF
14646: PPUSH
14647: LD_VAR 0 1
14651: PPUSH
14652: CALL_OW 74
14656: PPUSH
14657: CALL_OW 115
// wait ( 0 0$20 ) ;
14661: LD_INT 700
14663: PPUSH
14664: CALL_OW 67
// SetSide ( un , your_side ) ;
14668: LD_VAR 0 1
14672: PPUSH
14673: LD_OWVAR 2
14677: PPUSH
14678: CALL_OW 235
// end ;
14682: PPOPN 2
14684: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14685: LD_EXP 24
14689: PUSH
14690: LD_EXP 57
14694: AND
14695: IFFALSE 14801
14697: GO 14699
14699: DISABLE
14700: LD_INT 0
14702: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14703: LD_ADDR_VAR 0 1
14707: PUSH
14708: LD_INT 22
14710: PUSH
14711: LD_OWVAR 2
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_INT 2
14722: PUSH
14723: LD_INT 30
14725: PUSH
14726: LD_INT 0
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 30
14735: PUSH
14736: LD_INT 1
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: LIST
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PPUSH
14752: CALL_OW 69
14756: ST_TO_ADDR
// if not depot then
14757: LD_VAR 0 1
14761: NOT
14762: IFFALSE 14766
// exit ;
14764: GO 14801
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14766: LD_VAR 0 1
14770: PUSH
14771: LD_INT 1
14773: ARRAY
14774: PPUSH
14775: CALL_OW 250
14779: PPUSH
14780: LD_VAR 0 1
14784: PUSH
14785: LD_INT 1
14787: ARRAY
14788: PPUSH
14789: CALL_OW 251
14793: PPUSH
14794: LD_INT 70
14796: PPUSH
14797: CALL_OW 495
// end ;
14801: PPOPN 1
14803: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14804: LD_EXP 24
14808: PUSH
14809: LD_EXP 58
14813: AND
14814: IFFALSE 15025
14816: GO 14818
14818: DISABLE
14819: LD_INT 0
14821: PPUSH
14822: PPUSH
14823: PPUSH
14824: PPUSH
14825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14826: LD_ADDR_VAR 0 5
14830: PUSH
14831: LD_INT 22
14833: PUSH
14834: LD_OWVAR 2
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 21
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PPUSH
14857: CALL_OW 69
14861: ST_TO_ADDR
// if not tmp then
14862: LD_VAR 0 5
14866: NOT
14867: IFFALSE 14871
// exit ;
14869: GO 15025
// for i in tmp do
14871: LD_ADDR_VAR 0 1
14875: PUSH
14876: LD_VAR 0 5
14880: PUSH
14881: FOR_IN
14882: IFFALSE 15023
// begin d := rand ( 0 , 5 ) ;
14884: LD_ADDR_VAR 0 4
14888: PUSH
14889: LD_INT 0
14891: PPUSH
14892: LD_INT 5
14894: PPUSH
14895: CALL_OW 12
14899: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14900: LD_ADDR_VAR 0 2
14904: PUSH
14905: LD_VAR 0 1
14909: PPUSH
14910: CALL_OW 250
14914: PPUSH
14915: LD_VAR 0 4
14919: PPUSH
14920: LD_INT 3
14922: PPUSH
14923: LD_INT 12
14925: PPUSH
14926: CALL_OW 12
14930: PPUSH
14931: CALL_OW 272
14935: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14936: LD_ADDR_VAR 0 3
14940: PUSH
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 251
14950: PPUSH
14951: LD_VAR 0 4
14955: PPUSH
14956: LD_INT 3
14958: PPUSH
14959: LD_INT 12
14961: PPUSH
14962: CALL_OW 12
14966: PPUSH
14967: CALL_OW 273
14971: ST_TO_ADDR
// if ValidHex ( x , y ) then
14972: LD_VAR 0 2
14976: PPUSH
14977: LD_VAR 0 3
14981: PPUSH
14982: CALL_OW 488
14986: IFFALSE 15021
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14988: LD_VAR 0 1
14992: PPUSH
14993: LD_VAR 0 2
14997: PPUSH
14998: LD_VAR 0 3
15002: PPUSH
15003: LD_INT 3
15005: PPUSH
15006: LD_INT 6
15008: PPUSH
15009: CALL_OW 12
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 483
// end ;
15021: GO 14881
15023: POP
15024: POP
// end ;
15025: PPOPN 5
15027: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15028: LD_EXP 24
15032: PUSH
15033: LD_EXP 59
15037: AND
15038: IFFALSE 15132
15040: GO 15042
15042: DISABLE
15043: LD_INT 0
15045: PPUSH
15046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15047: LD_ADDR_VAR 0 2
15051: PUSH
15052: LD_INT 22
15054: PUSH
15055: LD_OWVAR 2
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 32
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 21
15076: PUSH
15077: LD_INT 2
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: LIST
15088: PPUSH
15089: CALL_OW 69
15093: ST_TO_ADDR
// if not tmp then
15094: LD_VAR 0 2
15098: NOT
15099: IFFALSE 15103
// exit ;
15101: GO 15132
// for i in tmp do
15103: LD_ADDR_VAR 0 1
15107: PUSH
15108: LD_VAR 0 2
15112: PUSH
15113: FOR_IN
15114: IFFALSE 15130
// SetFuel ( i , 0 ) ;
15116: LD_VAR 0 1
15120: PPUSH
15121: LD_INT 0
15123: PPUSH
15124: CALL_OW 240
15128: GO 15113
15130: POP
15131: POP
// end ;
15132: PPOPN 2
15134: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15135: LD_EXP 24
15139: PUSH
15140: LD_EXP 60
15144: AND
15145: IFFALSE 15211
15147: GO 15149
15149: DISABLE
15150: LD_INT 0
15152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15153: LD_ADDR_VAR 0 1
15157: PUSH
15158: LD_INT 22
15160: PUSH
15161: LD_OWVAR 2
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 30
15172: PUSH
15173: LD_INT 29
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PPUSH
15184: CALL_OW 69
15188: ST_TO_ADDR
// if not tmp then
15189: LD_VAR 0 1
15193: NOT
15194: IFFALSE 15198
// exit ;
15196: GO 15211
// DestroyUnit ( tmp [ 1 ] ) ;
15198: LD_VAR 0 1
15202: PUSH
15203: LD_INT 1
15205: ARRAY
15206: PPUSH
15207: CALL_OW 65
// end ;
15211: PPOPN 1
15213: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15214: LD_EXP 24
15218: PUSH
15219: LD_EXP 62
15223: AND
15224: IFFALSE 15353
15226: GO 15228
15228: DISABLE
15229: LD_INT 0
15231: PPUSH
// begin uc_side := 0 ;
15232: LD_ADDR_OWVAR 20
15236: PUSH
15237: LD_INT 0
15239: ST_TO_ADDR
// uc_nation := nation_arabian ;
15240: LD_ADDR_OWVAR 21
15244: PUSH
15245: LD_INT 2
15247: ST_TO_ADDR
// hc_gallery :=  ;
15248: LD_ADDR_OWVAR 33
15252: PUSH
15253: LD_STRING 
15255: ST_TO_ADDR
// hc_name :=  ;
15256: LD_ADDR_OWVAR 26
15260: PUSH
15261: LD_STRING 
15263: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15264: LD_INT 1
15266: PPUSH
15267: LD_INT 11
15269: PPUSH
15270: LD_INT 10
15272: PPUSH
15273: CALL_OW 380
// un := CreateHuman ;
15277: LD_ADDR_VAR 0 1
15281: PUSH
15282: CALL_OW 44
15286: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15287: LD_VAR 0 1
15291: PPUSH
15292: LD_INT 1
15294: PPUSH
15295: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15299: LD_INT 35
15301: PPUSH
15302: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15306: LD_VAR 0 1
15310: PPUSH
15311: LD_INT 22
15313: PUSH
15314: LD_OWVAR 2
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PPUSH
15323: CALL_OW 69
15327: PPUSH
15328: LD_VAR 0 1
15332: PPUSH
15333: CALL_OW 74
15337: PPUSH
15338: CALL_OW 115
// until IsDead ( un ) ;
15342: LD_VAR 0 1
15346: PPUSH
15347: CALL_OW 301
15351: IFFALSE 15299
// end ;
15353: PPOPN 1
15355: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15356: LD_EXP 24
15360: PUSH
15361: LD_EXP 64
15365: AND
15366: IFFALSE 15378
15368: GO 15370
15370: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15371: LD_STRING earthquake(getX(game), 0, 32)
15373: PPUSH
15374: CALL_OW 559
15378: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15379: LD_EXP 24
15383: PUSH
15384: LD_EXP 65
15388: AND
15389: IFFALSE 15480
15391: GO 15393
15393: DISABLE
15394: LD_INT 0
15396: PPUSH
// begin enable ;
15397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15398: LD_ADDR_VAR 0 1
15402: PUSH
15403: LD_INT 22
15405: PUSH
15406: LD_OWVAR 2
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 21
15417: PUSH
15418: LD_INT 2
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 33
15427: PUSH
15428: LD_INT 3
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: PPUSH
15440: CALL_OW 69
15444: ST_TO_ADDR
// if not tmp then
15445: LD_VAR 0 1
15449: NOT
15450: IFFALSE 15454
// exit ;
15452: GO 15480
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15454: LD_VAR 0 1
15458: PUSH
15459: LD_INT 1
15461: PPUSH
15462: LD_VAR 0 1
15466: PPUSH
15467: CALL_OW 12
15471: ARRAY
15472: PPUSH
15473: LD_INT 1
15475: PPUSH
15476: CALL_OW 234
// end ;
15480: PPOPN 1
15482: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15483: LD_EXP 24
15487: PUSH
15488: LD_EXP 66
15492: AND
15493: IFFALSE 15634
15495: GO 15497
15497: DISABLE
15498: LD_INT 0
15500: PPUSH
15501: PPUSH
15502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15503: LD_ADDR_VAR 0 3
15507: PUSH
15508: LD_INT 22
15510: PUSH
15511: LD_OWVAR 2
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 25
15522: PUSH
15523: LD_INT 1
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 69
15538: ST_TO_ADDR
// if not tmp then
15539: LD_VAR 0 3
15543: NOT
15544: IFFALSE 15548
// exit ;
15546: GO 15634
// un := tmp [ rand ( 1 , tmp ) ] ;
15548: LD_ADDR_VAR 0 2
15552: PUSH
15553: LD_VAR 0 3
15557: PUSH
15558: LD_INT 1
15560: PPUSH
15561: LD_VAR 0 3
15565: PPUSH
15566: CALL_OW 12
15570: ARRAY
15571: ST_TO_ADDR
// if Crawls ( un ) then
15572: LD_VAR 0 2
15576: PPUSH
15577: CALL_OW 318
15581: IFFALSE 15592
// ComWalk ( un ) ;
15583: LD_VAR 0 2
15587: PPUSH
15588: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15592: LD_VAR 0 2
15596: PPUSH
15597: LD_INT 9
15599: PPUSH
15600: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15604: LD_INT 28
15606: PPUSH
15607: LD_OWVAR 2
15611: PPUSH
15612: LD_INT 2
15614: PPUSH
15615: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15619: LD_INT 29
15621: PPUSH
15622: LD_OWVAR 2
15626: PPUSH
15627: LD_INT 2
15629: PPUSH
15630: CALL_OW 322
// end ;
15634: PPOPN 3
15636: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15637: LD_EXP 24
15641: PUSH
15642: LD_EXP 67
15646: AND
15647: IFFALSE 15758
15649: GO 15651
15651: DISABLE
15652: LD_INT 0
15654: PPUSH
15655: PPUSH
15656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15657: LD_ADDR_VAR 0 3
15661: PUSH
15662: LD_INT 22
15664: PUSH
15665: LD_OWVAR 2
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 25
15676: PUSH
15677: LD_INT 1
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 69
15692: ST_TO_ADDR
// if not tmp then
15693: LD_VAR 0 3
15697: NOT
15698: IFFALSE 15702
// exit ;
15700: GO 15758
// un := tmp [ rand ( 1 , tmp ) ] ;
15702: LD_ADDR_VAR 0 2
15706: PUSH
15707: LD_VAR 0 3
15711: PUSH
15712: LD_INT 1
15714: PPUSH
15715: LD_VAR 0 3
15719: PPUSH
15720: CALL_OW 12
15724: ARRAY
15725: ST_TO_ADDR
// if Crawls ( un ) then
15726: LD_VAR 0 2
15730: PPUSH
15731: CALL_OW 318
15735: IFFALSE 15746
// ComWalk ( un ) ;
15737: LD_VAR 0 2
15741: PPUSH
15742: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15746: LD_VAR 0 2
15750: PPUSH
15751: LD_INT 8
15753: PPUSH
15754: CALL_OW 336
// end ;
15758: PPOPN 3
15760: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15761: LD_EXP 24
15765: PUSH
15766: LD_EXP 68
15770: AND
15771: IFFALSE 15915
15773: GO 15775
15775: DISABLE
15776: LD_INT 0
15778: PPUSH
15779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15780: LD_ADDR_VAR 0 2
15784: PUSH
15785: LD_INT 22
15787: PUSH
15788: LD_OWVAR 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 21
15799: PUSH
15800: LD_INT 2
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: LD_INT 2
15809: PUSH
15810: LD_INT 34
15812: PUSH
15813: LD_INT 12
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 34
15822: PUSH
15823: LD_INT 51
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 34
15832: PUSH
15833: LD_INT 32
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 69
15855: ST_TO_ADDR
// if not tmp then
15856: LD_VAR 0 2
15860: NOT
15861: IFFALSE 15865
// exit ;
15863: GO 15915
// for i in tmp do
15865: LD_ADDR_VAR 0 1
15869: PUSH
15870: LD_VAR 0 2
15874: PUSH
15875: FOR_IN
15876: IFFALSE 15913
// if GetCargo ( i , mat_artifact ) = 0 then
15878: LD_VAR 0 1
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 289
15890: PUSH
15891: LD_INT 0
15893: EQUAL
15894: IFFALSE 15911
// SetCargo ( i , mat_siberit , 100 ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_INT 3
15903: PPUSH
15904: LD_INT 100
15906: PPUSH
15907: CALL_OW 290
15911: GO 15875
15913: POP
15914: POP
// end ;
15915: PPOPN 2
15917: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15918: LD_EXP 24
15922: PUSH
15923: LD_EXP 69
15927: AND
15928: IFFALSE 16111
15930: GO 15932
15932: DISABLE
15933: LD_INT 0
15935: PPUSH
15936: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15937: LD_ADDR_VAR 0 2
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_OWVAR 2
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PPUSH
15954: CALL_OW 69
15958: ST_TO_ADDR
// if not tmp then
15959: LD_VAR 0 2
15963: NOT
15964: IFFALSE 15968
// exit ;
15966: GO 16111
// for i := 1 to 2 do
15968: LD_ADDR_VAR 0 1
15972: PUSH
15973: DOUBLE
15974: LD_INT 1
15976: DEC
15977: ST_TO_ADDR
15978: LD_INT 2
15980: PUSH
15981: FOR_TO
15982: IFFALSE 16109
// begin uc_side := your_side ;
15984: LD_ADDR_OWVAR 20
15988: PUSH
15989: LD_OWVAR 2
15993: ST_TO_ADDR
// uc_nation := nation_american ;
15994: LD_ADDR_OWVAR 21
15998: PUSH
15999: LD_INT 1
16001: ST_TO_ADDR
// vc_chassis := us_morphling ;
16002: LD_ADDR_OWVAR 37
16006: PUSH
16007: LD_INT 5
16009: ST_TO_ADDR
// vc_engine := engine_siberite ;
16010: LD_ADDR_OWVAR 39
16014: PUSH
16015: LD_INT 3
16017: ST_TO_ADDR
// vc_control := control_computer ;
16018: LD_ADDR_OWVAR 38
16022: PUSH
16023: LD_INT 3
16025: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16026: LD_ADDR_OWVAR 40
16030: PUSH
16031: LD_INT 10
16033: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16034: LD_VAR 0 2
16038: PUSH
16039: LD_INT 1
16041: ARRAY
16042: PPUSH
16043: CALL_OW 310
16047: NOT
16048: IFFALSE 16095
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16050: CALL_OW 45
16054: PPUSH
16055: LD_VAR 0 2
16059: PUSH
16060: LD_INT 1
16062: ARRAY
16063: PPUSH
16064: CALL_OW 250
16068: PPUSH
16069: LD_VAR 0 2
16073: PUSH
16074: LD_INT 1
16076: ARRAY
16077: PPUSH
16078: CALL_OW 251
16082: PPUSH
16083: LD_INT 12
16085: PPUSH
16086: LD_INT 1
16088: PPUSH
16089: CALL_OW 50
16093: GO 16107
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16095: CALL_OW 45
16099: PPUSH
16100: LD_INT 1
16102: PPUSH
16103: CALL_OW 51
// end ;
16107: GO 15981
16109: POP
16110: POP
// end ;
16111: PPOPN 2
16113: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16114: LD_EXP 24
16118: PUSH
16119: LD_EXP 70
16123: AND
16124: IFFALSE 16346
16126: GO 16128
16128: DISABLE
16129: LD_INT 0
16131: PPUSH
16132: PPUSH
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16137: LD_ADDR_VAR 0 6
16141: PUSH
16142: LD_INT 22
16144: PUSH
16145: LD_OWVAR 2
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 21
16156: PUSH
16157: LD_INT 1
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 3
16166: PUSH
16167: LD_INT 23
16169: PUSH
16170: LD_INT 0
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: LIST
16185: PPUSH
16186: CALL_OW 69
16190: ST_TO_ADDR
// if not tmp then
16191: LD_VAR 0 6
16195: NOT
16196: IFFALSE 16200
// exit ;
16198: GO 16346
// s1 := rand ( 1 , 4 ) ;
16200: LD_ADDR_VAR 0 2
16204: PUSH
16205: LD_INT 1
16207: PPUSH
16208: LD_INT 4
16210: PPUSH
16211: CALL_OW 12
16215: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16216: LD_ADDR_VAR 0 4
16220: PUSH
16221: LD_VAR 0 6
16225: PUSH
16226: LD_INT 1
16228: ARRAY
16229: PPUSH
16230: LD_VAR 0 2
16234: PPUSH
16235: CALL_OW 259
16239: ST_TO_ADDR
// if s1 = 1 then
16240: LD_VAR 0 2
16244: PUSH
16245: LD_INT 1
16247: EQUAL
16248: IFFALSE 16268
// s2 := rand ( 2 , 4 ) else
16250: LD_ADDR_VAR 0 3
16254: PUSH
16255: LD_INT 2
16257: PPUSH
16258: LD_INT 4
16260: PPUSH
16261: CALL_OW 12
16265: ST_TO_ADDR
16266: GO 16276
// s2 := 1 ;
16268: LD_ADDR_VAR 0 3
16272: PUSH
16273: LD_INT 1
16275: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16276: LD_ADDR_VAR 0 5
16280: PUSH
16281: LD_VAR 0 6
16285: PUSH
16286: LD_INT 1
16288: ARRAY
16289: PPUSH
16290: LD_VAR 0 3
16294: PPUSH
16295: CALL_OW 259
16299: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16300: LD_VAR 0 6
16304: PUSH
16305: LD_INT 1
16307: ARRAY
16308: PPUSH
16309: LD_VAR 0 2
16313: PPUSH
16314: LD_VAR 0 5
16318: PPUSH
16319: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16323: LD_VAR 0 6
16327: PUSH
16328: LD_INT 1
16330: ARRAY
16331: PPUSH
16332: LD_VAR 0 3
16336: PPUSH
16337: LD_VAR 0 4
16341: PPUSH
16342: CALL_OW 237
// end ;
16346: PPOPN 6
16348: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16349: LD_EXP 24
16353: PUSH
16354: LD_EXP 71
16358: AND
16359: IFFALSE 16438
16361: GO 16363
16363: DISABLE
16364: LD_INT 0
16366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16367: LD_ADDR_VAR 0 1
16371: PUSH
16372: LD_INT 22
16374: PUSH
16375: LD_OWVAR 2
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 30
16386: PUSH
16387: LD_INT 3
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL_OW 69
16402: ST_TO_ADDR
// if not tmp then
16403: LD_VAR 0 1
16407: NOT
16408: IFFALSE 16412
// exit ;
16410: GO 16438
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16412: LD_VAR 0 1
16416: PUSH
16417: LD_INT 1
16419: PPUSH
16420: LD_VAR 0 1
16424: PPUSH
16425: CALL_OW 12
16429: ARRAY
16430: PPUSH
16431: LD_INT 1
16433: PPUSH
16434: CALL_OW 234
// end ;
16438: PPOPN 1
16440: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16441: LD_EXP 24
16445: PUSH
16446: LD_EXP 72
16450: AND
16451: IFFALSE 16563
16453: GO 16455
16455: DISABLE
16456: LD_INT 0
16458: PPUSH
16459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16460: LD_ADDR_VAR 0 2
16464: PUSH
16465: LD_INT 22
16467: PUSH
16468: LD_OWVAR 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 2
16479: PUSH
16480: LD_INT 30
16482: PUSH
16483: LD_INT 27
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 30
16492: PUSH
16493: LD_INT 26
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 30
16502: PUSH
16503: LD_INT 28
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PPUSH
16520: CALL_OW 69
16524: ST_TO_ADDR
// if not tmp then
16525: LD_VAR 0 2
16529: NOT
16530: IFFALSE 16534
// exit ;
16532: GO 16563
// for i in tmp do
16534: LD_ADDR_VAR 0 1
16538: PUSH
16539: LD_VAR 0 2
16543: PUSH
16544: FOR_IN
16545: IFFALSE 16561
// SetLives ( i , 1 ) ;
16547: LD_VAR 0 1
16551: PPUSH
16552: LD_INT 1
16554: PPUSH
16555: CALL_OW 234
16559: GO 16544
16561: POP
16562: POP
// end ;
16563: PPOPN 2
16565: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16566: LD_EXP 24
16570: PUSH
16571: LD_EXP 73
16575: AND
16576: IFFALSE 16863
16578: GO 16580
16580: DISABLE
16581: LD_INT 0
16583: PPUSH
16584: PPUSH
16585: PPUSH
// begin i := rand ( 1 , 7 ) ;
16586: LD_ADDR_VAR 0 1
16590: PUSH
16591: LD_INT 1
16593: PPUSH
16594: LD_INT 7
16596: PPUSH
16597: CALL_OW 12
16601: ST_TO_ADDR
// case i of 1 :
16602: LD_VAR 0 1
16606: PUSH
16607: LD_INT 1
16609: DOUBLE
16610: EQUAL
16611: IFTRUE 16615
16613: GO 16625
16615: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16616: LD_STRING earthquake(getX(game), 0, 32)
16618: PPUSH
16619: CALL_OW 559
16623: GO 16863
16625: LD_INT 2
16627: DOUBLE
16628: EQUAL
16629: IFTRUE 16633
16631: GO 16647
16633: POP
// begin ToLua ( displayStucuk(); ) ;
16634: LD_STRING displayStucuk();
16636: PPUSH
16637: CALL_OW 559
// ResetFog ;
16641: CALL_OW 335
// end ; 3 :
16645: GO 16863
16647: LD_INT 3
16649: DOUBLE
16650: EQUAL
16651: IFTRUE 16655
16653: GO 16759
16655: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16656: LD_ADDR_VAR 0 2
16660: PUSH
16661: LD_INT 22
16663: PUSH
16664: LD_OWVAR 2
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 25
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PPUSH
16687: CALL_OW 69
16691: ST_TO_ADDR
// if not tmp then
16692: LD_VAR 0 2
16696: NOT
16697: IFFALSE 16701
// exit ;
16699: GO 16863
// un := tmp [ rand ( 1 , tmp ) ] ;
16701: LD_ADDR_VAR 0 3
16705: PUSH
16706: LD_VAR 0 2
16710: PUSH
16711: LD_INT 1
16713: PPUSH
16714: LD_VAR 0 2
16718: PPUSH
16719: CALL_OW 12
16723: ARRAY
16724: ST_TO_ADDR
// if Crawls ( un ) then
16725: LD_VAR 0 3
16729: PPUSH
16730: CALL_OW 318
16734: IFFALSE 16745
// ComWalk ( un ) ;
16736: LD_VAR 0 3
16740: PPUSH
16741: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16745: LD_VAR 0 3
16749: PPUSH
16750: LD_INT 8
16752: PPUSH
16753: CALL_OW 336
// end ; 4 :
16757: GO 16863
16759: LD_INT 4
16761: DOUBLE
16762: EQUAL
16763: IFTRUE 16767
16765: GO 16841
16767: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16768: LD_ADDR_VAR 0 2
16772: PUSH
16773: LD_INT 22
16775: PUSH
16776: LD_OWVAR 2
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 30
16787: PUSH
16788: LD_INT 29
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PPUSH
16799: CALL_OW 69
16803: ST_TO_ADDR
// if not tmp then
16804: LD_VAR 0 2
16808: NOT
16809: IFFALSE 16813
// exit ;
16811: GO 16863
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16813: LD_VAR 0 2
16817: PUSH
16818: LD_INT 1
16820: ARRAY
16821: PPUSH
16822: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16826: LD_VAR 0 2
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: PPUSH
16835: CALL_OW 65
// end ; 5 .. 7 :
16839: GO 16863
16841: LD_INT 5
16843: DOUBLE
16844: GREATEREQUAL
16845: IFFALSE 16853
16847: LD_INT 7
16849: DOUBLE
16850: LESSEQUAL
16851: IFTRUE 16855
16853: GO 16862
16855: POP
// StreamSibBomb ; end ;
16856: CALL 13100 0 0
16860: GO 16863
16862: POP
// end ;
16863: PPOPN 3
16865: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16866: LD_EXP 24
16870: PUSH
16871: LD_EXP 74
16875: AND
16876: IFFALSE 17032
16878: GO 16880
16880: DISABLE
16881: LD_INT 0
16883: PPUSH
16884: PPUSH
16885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16886: LD_ADDR_VAR 0 2
16890: PUSH
16891: LD_INT 81
16893: PUSH
16894: LD_OWVAR 2
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 2
16905: PUSH
16906: LD_INT 21
16908: PUSH
16909: LD_INT 1
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 21
16918: PUSH
16919: LD_INT 2
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: LIST
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PPUSH
16935: CALL_OW 69
16939: ST_TO_ADDR
// if not tmp then
16940: LD_VAR 0 2
16944: NOT
16945: IFFALSE 16949
// exit ;
16947: GO 17032
// p := 0 ;
16949: LD_ADDR_VAR 0 3
16953: PUSH
16954: LD_INT 0
16956: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16957: LD_INT 35
16959: PPUSH
16960: CALL_OW 67
// p := p + 1 ;
16964: LD_ADDR_VAR 0 3
16968: PUSH
16969: LD_VAR 0 3
16973: PUSH
16974: LD_INT 1
16976: PLUS
16977: ST_TO_ADDR
// for i in tmp do
16978: LD_ADDR_VAR 0 1
16982: PUSH
16983: LD_VAR 0 2
16987: PUSH
16988: FOR_IN
16989: IFFALSE 17020
// if GetLives ( i ) < 1000 then
16991: LD_VAR 0 1
16995: PPUSH
16996: CALL_OW 256
17000: PUSH
17001: LD_INT 1000
17003: LESS
17004: IFFALSE 17018
// SetLives ( i , 1000 ) ;
17006: LD_VAR 0 1
17010: PPUSH
17011: LD_INT 1000
17013: PPUSH
17014: CALL_OW 234
17018: GO 16988
17020: POP
17021: POP
// until p > 20 ;
17022: LD_VAR 0 3
17026: PUSH
17027: LD_INT 20
17029: GREATER
17030: IFFALSE 16957
// end ;
17032: PPOPN 3
17034: END
// every 0 0$1 trigger StreamModeActive and sTime do
17035: LD_EXP 24
17039: PUSH
17040: LD_EXP 75
17044: AND
17045: IFFALSE 17080
17047: GO 17049
17049: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17050: LD_INT 28
17052: PPUSH
17053: LD_OWVAR 2
17057: PPUSH
17058: LD_INT 2
17060: PPUSH
17061: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17065: LD_INT 30
17067: PPUSH
17068: LD_OWVAR 2
17072: PPUSH
17073: LD_INT 2
17075: PPUSH
17076: CALL_OW 322
// end ;
17080: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17081: LD_EXP 24
17085: PUSH
17086: LD_EXP 76
17090: AND
17091: IFFALSE 17212
17093: GO 17095
17095: DISABLE
17096: LD_INT 0
17098: PPUSH
17099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17100: LD_ADDR_VAR 0 2
17104: PUSH
17105: LD_INT 22
17107: PUSH
17108: LD_OWVAR 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 21
17119: PUSH
17120: LD_INT 1
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 3
17129: PUSH
17130: LD_INT 23
17132: PUSH
17133: LD_INT 0
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: PPUSH
17149: CALL_OW 69
17153: ST_TO_ADDR
// if not tmp then
17154: LD_VAR 0 2
17158: NOT
17159: IFFALSE 17163
// exit ;
17161: GO 17212
// for i in tmp do
17163: LD_ADDR_VAR 0 1
17167: PUSH
17168: LD_VAR 0 2
17172: PUSH
17173: FOR_IN
17174: IFFALSE 17210
// begin if Crawls ( i ) then
17176: LD_VAR 0 1
17180: PPUSH
17181: CALL_OW 318
17185: IFFALSE 17196
// ComWalk ( i ) ;
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 138
// SetClass ( i , 2 ) ;
17196: LD_VAR 0 1
17200: PPUSH
17201: LD_INT 2
17203: PPUSH
17204: CALL_OW 336
// end ;
17208: GO 17173
17210: POP
17211: POP
// end ;
17212: PPOPN 2
17214: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17215: LD_EXP 24
17219: PUSH
17220: LD_EXP 77
17224: AND
17225: IFFALSE 17513
17227: GO 17229
17229: DISABLE
17230: LD_INT 0
17232: PPUSH
17233: PPUSH
17234: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17235: LD_OWVAR 2
17239: PPUSH
17240: LD_INT 9
17242: PPUSH
17243: LD_INT 1
17245: PPUSH
17246: LD_INT 1
17248: PPUSH
17249: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17253: LD_INT 9
17255: PPUSH
17256: LD_OWVAR 2
17260: PPUSH
17261: CALL_OW 343
// uc_side := 9 ;
17265: LD_ADDR_OWVAR 20
17269: PUSH
17270: LD_INT 9
17272: ST_TO_ADDR
// uc_nation := 2 ;
17273: LD_ADDR_OWVAR 21
17277: PUSH
17278: LD_INT 2
17280: ST_TO_ADDR
// hc_name := Dark Warrior ;
17281: LD_ADDR_OWVAR 26
17285: PUSH
17286: LD_STRING Dark Warrior
17288: ST_TO_ADDR
// hc_gallery :=  ;
17289: LD_ADDR_OWVAR 33
17293: PUSH
17294: LD_STRING 
17296: ST_TO_ADDR
// hc_noskilllimit := true ;
17297: LD_ADDR_OWVAR 76
17301: PUSH
17302: LD_INT 1
17304: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17305: LD_ADDR_OWVAR 31
17309: PUSH
17310: LD_INT 30
17312: PUSH
17313: LD_INT 30
17315: PUSH
17316: LD_INT 30
17318: PUSH
17319: LD_INT 30
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: ST_TO_ADDR
// un := CreateHuman ;
17328: LD_ADDR_VAR 0 3
17332: PUSH
17333: CALL_OW 44
17337: ST_TO_ADDR
// hc_noskilllimit := false ;
17338: LD_ADDR_OWVAR 76
17342: PUSH
17343: LD_INT 0
17345: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17346: LD_VAR 0 3
17350: PPUSH
17351: LD_INT 1
17353: PPUSH
17354: CALL_OW 51
// ToLua ( playRanger() ) ;
17358: LD_STRING playRanger()
17360: PPUSH
17361: CALL_OW 559
// p := 0 ;
17365: LD_ADDR_VAR 0 2
17369: PUSH
17370: LD_INT 0
17372: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17373: LD_INT 35
17375: PPUSH
17376: CALL_OW 67
// p := p + 1 ;
17380: LD_ADDR_VAR 0 2
17384: PUSH
17385: LD_VAR 0 2
17389: PUSH
17390: LD_INT 1
17392: PLUS
17393: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17394: LD_VAR 0 3
17398: PPUSH
17399: CALL_OW 256
17403: PUSH
17404: LD_INT 1000
17406: LESS
17407: IFFALSE 17421
// SetLives ( un , 1000 ) ;
17409: LD_VAR 0 3
17413: PPUSH
17414: LD_INT 1000
17416: PPUSH
17417: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17421: LD_VAR 0 3
17425: PPUSH
17426: LD_INT 81
17428: PUSH
17429: LD_OWVAR 2
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 91
17440: PUSH
17441: LD_VAR 0 3
17445: PUSH
17446: LD_INT 30
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PPUSH
17458: CALL_OW 69
17462: PPUSH
17463: LD_VAR 0 3
17467: PPUSH
17468: CALL_OW 74
17472: PPUSH
17473: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17477: LD_VAR 0 2
17481: PUSH
17482: LD_INT 80
17484: GREATER
17485: PUSH
17486: LD_VAR 0 3
17490: PPUSH
17491: CALL_OW 301
17495: OR
17496: IFFALSE 17373
// if un then
17498: LD_VAR 0 3
17502: IFFALSE 17513
// RemoveUnit ( un ) ;
17504: LD_VAR 0 3
17508: PPUSH
17509: CALL_OW 64
// end ;
17513: PPOPN 3
17515: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17516: LD_EXP 78
17520: IFFALSE 17636
17522: GO 17524
17524: DISABLE
17525: LD_INT 0
17527: PPUSH
17528: PPUSH
17529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17530: LD_ADDR_VAR 0 2
17534: PUSH
17535: LD_INT 81
17537: PUSH
17538: LD_OWVAR 2
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 21
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PPUSH
17561: CALL_OW 69
17565: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17566: LD_STRING playComputer()
17568: PPUSH
17569: CALL_OW 559
// if not tmp then
17573: LD_VAR 0 2
17577: NOT
17578: IFFALSE 17582
// exit ;
17580: GO 17636
// for i in tmp do
17582: LD_ADDR_VAR 0 1
17586: PUSH
17587: LD_VAR 0 2
17591: PUSH
17592: FOR_IN
17593: IFFALSE 17634
// for j := 1 to 4 do
17595: LD_ADDR_VAR 0 3
17599: PUSH
17600: DOUBLE
17601: LD_INT 1
17603: DEC
17604: ST_TO_ADDR
17605: LD_INT 4
17607: PUSH
17608: FOR_TO
17609: IFFALSE 17630
// SetSkill ( i , j , 10 ) ;
17611: LD_VAR 0 1
17615: PPUSH
17616: LD_VAR 0 3
17620: PPUSH
17621: LD_INT 10
17623: PPUSH
17624: CALL_OW 237
17628: GO 17608
17630: POP
17631: POP
17632: GO 17592
17634: POP
17635: POP
// end ;
17636: PPOPN 3
17638: END
// every 0 0$1 trigger s30 do var i , tmp ;
17639: LD_EXP 79
17643: IFFALSE 17712
17645: GO 17647
17647: DISABLE
17648: LD_INT 0
17650: PPUSH
17651: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17652: LD_ADDR_VAR 0 2
17656: PUSH
17657: LD_INT 22
17659: PUSH
17660: LD_OWVAR 2
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PPUSH
17669: CALL_OW 69
17673: ST_TO_ADDR
// if not tmp then
17674: LD_VAR 0 2
17678: NOT
17679: IFFALSE 17683
// exit ;
17681: GO 17712
// for i in tmp do
17683: LD_ADDR_VAR 0 1
17687: PUSH
17688: LD_VAR 0 2
17692: PUSH
17693: FOR_IN
17694: IFFALSE 17710
// SetLives ( i , 300 ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 300
17703: PPUSH
17704: CALL_OW 234
17708: GO 17693
17710: POP
17711: POP
// end ;
17712: PPOPN 2
17714: END
// every 0 0$1 trigger s60 do var i , tmp ;
17715: LD_EXP 80
17719: IFFALSE 17788
17721: GO 17723
17723: DISABLE
17724: LD_INT 0
17726: PPUSH
17727: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17728: LD_ADDR_VAR 0 2
17732: PUSH
17733: LD_INT 22
17735: PUSH
17736: LD_OWVAR 2
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PPUSH
17745: CALL_OW 69
17749: ST_TO_ADDR
// if not tmp then
17750: LD_VAR 0 2
17754: NOT
17755: IFFALSE 17759
// exit ;
17757: GO 17788
// for i in tmp do
17759: LD_ADDR_VAR 0 1
17763: PUSH
17764: LD_VAR 0 2
17768: PUSH
17769: FOR_IN
17770: IFFALSE 17786
// SetLives ( i , 600 ) ;
17772: LD_VAR 0 1
17776: PPUSH
17777: LD_INT 600
17779: PPUSH
17780: CALL_OW 234
17784: GO 17769
17786: POP
17787: POP
// end ;
17788: PPOPN 2
17790: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17791: LD_INT 0
17793: PPUSH
// case cmd of 301 :
17794: LD_VAR 0 1
17798: PUSH
17799: LD_INT 301
17801: DOUBLE
17802: EQUAL
17803: IFTRUE 17807
17805: GO 17839
17807: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17808: LD_VAR 0 6
17812: PPUSH
17813: LD_VAR 0 7
17817: PPUSH
17818: LD_VAR 0 8
17822: PPUSH
17823: LD_VAR 0 4
17827: PPUSH
17828: LD_VAR 0 5
17832: PPUSH
17833: CALL 19040 0 5
17837: GO 17960
17839: LD_INT 302
17841: DOUBLE
17842: EQUAL
17843: IFTRUE 17847
17845: GO 17884
17847: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17848: LD_VAR 0 6
17852: PPUSH
17853: LD_VAR 0 7
17857: PPUSH
17858: LD_VAR 0 8
17862: PPUSH
17863: LD_VAR 0 9
17867: PPUSH
17868: LD_VAR 0 4
17872: PPUSH
17873: LD_VAR 0 5
17877: PPUSH
17878: CALL 19131 0 6
17882: GO 17960
17884: LD_INT 303
17886: DOUBLE
17887: EQUAL
17888: IFTRUE 17892
17890: GO 17929
17892: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17893: LD_VAR 0 6
17897: PPUSH
17898: LD_VAR 0 7
17902: PPUSH
17903: LD_VAR 0 8
17907: PPUSH
17908: LD_VAR 0 9
17912: PPUSH
17913: LD_VAR 0 4
17917: PPUSH
17918: LD_VAR 0 5
17922: PPUSH
17923: CALL 17965 0 6
17927: GO 17960
17929: LD_INT 304
17931: DOUBLE
17932: EQUAL
17933: IFTRUE 17937
17935: GO 17959
17937: POP
// hHackTeleport ( unit , x , y ) ; end ;
17938: LD_VAR 0 2
17942: PPUSH
17943: LD_VAR 0 4
17947: PPUSH
17948: LD_VAR 0 5
17952: PPUSH
17953: CALL 19724 0 3
17957: GO 17960
17959: POP
// end ;
17960: LD_VAR 0 12
17964: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17965: LD_INT 0
17967: PPUSH
17968: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17969: LD_VAR 0 1
17973: PUSH
17974: LD_INT 1
17976: LESS
17977: PUSH
17978: LD_VAR 0 1
17982: PUSH
17983: LD_INT 3
17985: GREATER
17986: OR
17987: PUSH
17988: LD_VAR 0 5
17992: PPUSH
17993: LD_VAR 0 6
17997: PPUSH
17998: CALL_OW 428
18002: OR
18003: IFFALSE 18007
// exit ;
18005: GO 18727
// uc_side := your_side ;
18007: LD_ADDR_OWVAR 20
18011: PUSH
18012: LD_OWVAR 2
18016: ST_TO_ADDR
// uc_nation := nation ;
18017: LD_ADDR_OWVAR 21
18021: PUSH
18022: LD_VAR 0 1
18026: ST_TO_ADDR
// bc_level = 1 ;
18027: LD_ADDR_OWVAR 43
18031: PUSH
18032: LD_INT 1
18034: ST_TO_ADDR
// case btype of 1 :
18035: LD_VAR 0 2
18039: PUSH
18040: LD_INT 1
18042: DOUBLE
18043: EQUAL
18044: IFTRUE 18048
18046: GO 18059
18048: POP
// bc_type := b_depot ; 2 :
18049: LD_ADDR_OWVAR 42
18053: PUSH
18054: LD_INT 0
18056: ST_TO_ADDR
18057: GO 18671
18059: LD_INT 2
18061: DOUBLE
18062: EQUAL
18063: IFTRUE 18067
18065: GO 18078
18067: POP
// bc_type := b_warehouse ; 3 :
18068: LD_ADDR_OWVAR 42
18072: PUSH
18073: LD_INT 1
18075: ST_TO_ADDR
18076: GO 18671
18078: LD_INT 3
18080: DOUBLE
18081: EQUAL
18082: IFTRUE 18086
18084: GO 18097
18086: POP
// bc_type := b_lab ; 4 .. 9 :
18087: LD_ADDR_OWVAR 42
18091: PUSH
18092: LD_INT 6
18094: ST_TO_ADDR
18095: GO 18671
18097: LD_INT 4
18099: DOUBLE
18100: GREATEREQUAL
18101: IFFALSE 18109
18103: LD_INT 9
18105: DOUBLE
18106: LESSEQUAL
18107: IFTRUE 18111
18109: GO 18163
18111: POP
// begin bc_type := b_lab_half ;
18112: LD_ADDR_OWVAR 42
18116: PUSH
18117: LD_INT 7
18119: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18120: LD_ADDR_OWVAR 44
18124: PUSH
18125: LD_INT 10
18127: PUSH
18128: LD_INT 11
18130: PUSH
18131: LD_INT 12
18133: PUSH
18134: LD_INT 15
18136: PUSH
18137: LD_INT 14
18139: PUSH
18140: LD_INT 13
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: PUSH
18151: LD_VAR 0 2
18155: PUSH
18156: LD_INT 3
18158: MINUS
18159: ARRAY
18160: ST_TO_ADDR
// end ; 10 .. 13 :
18161: GO 18671
18163: LD_INT 10
18165: DOUBLE
18166: GREATEREQUAL
18167: IFFALSE 18175
18169: LD_INT 13
18171: DOUBLE
18172: LESSEQUAL
18173: IFTRUE 18177
18175: GO 18254
18177: POP
// begin bc_type := b_lab_full ;
18178: LD_ADDR_OWVAR 42
18182: PUSH
18183: LD_INT 8
18185: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18186: LD_ADDR_OWVAR 44
18190: PUSH
18191: LD_INT 10
18193: PUSH
18194: LD_INT 12
18196: PUSH
18197: LD_INT 14
18199: PUSH
18200: LD_INT 13
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: PUSH
18209: LD_VAR 0 2
18213: PUSH
18214: LD_INT 9
18216: MINUS
18217: ARRAY
18218: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18219: LD_ADDR_OWVAR 45
18223: PUSH
18224: LD_INT 11
18226: PUSH
18227: LD_INT 15
18229: PUSH
18230: LD_INT 12
18232: PUSH
18233: LD_INT 15
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: PUSH
18242: LD_VAR 0 2
18246: PUSH
18247: LD_INT 9
18249: MINUS
18250: ARRAY
18251: ST_TO_ADDR
// end ; 14 :
18252: GO 18671
18254: LD_INT 14
18256: DOUBLE
18257: EQUAL
18258: IFTRUE 18262
18260: GO 18273
18262: POP
// bc_type := b_workshop ; 15 :
18263: LD_ADDR_OWVAR 42
18267: PUSH
18268: LD_INT 2
18270: ST_TO_ADDR
18271: GO 18671
18273: LD_INT 15
18275: DOUBLE
18276: EQUAL
18277: IFTRUE 18281
18279: GO 18292
18281: POP
// bc_type := b_factory ; 16 :
18282: LD_ADDR_OWVAR 42
18286: PUSH
18287: LD_INT 3
18289: ST_TO_ADDR
18290: GO 18671
18292: LD_INT 16
18294: DOUBLE
18295: EQUAL
18296: IFTRUE 18300
18298: GO 18311
18300: POP
// bc_type := b_ext_gun ; 17 :
18301: LD_ADDR_OWVAR 42
18305: PUSH
18306: LD_INT 17
18308: ST_TO_ADDR
18309: GO 18671
18311: LD_INT 17
18313: DOUBLE
18314: EQUAL
18315: IFTRUE 18319
18317: GO 18347
18319: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18320: LD_ADDR_OWVAR 42
18324: PUSH
18325: LD_INT 19
18327: PUSH
18328: LD_INT 23
18330: PUSH
18331: LD_INT 19
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: LIST
18338: PUSH
18339: LD_VAR 0 1
18343: ARRAY
18344: ST_TO_ADDR
18345: GO 18671
18347: LD_INT 18
18349: DOUBLE
18350: EQUAL
18351: IFTRUE 18355
18353: GO 18366
18355: POP
// bc_type := b_ext_radar ; 19 :
18356: LD_ADDR_OWVAR 42
18360: PUSH
18361: LD_INT 20
18363: ST_TO_ADDR
18364: GO 18671
18366: LD_INT 19
18368: DOUBLE
18369: EQUAL
18370: IFTRUE 18374
18372: GO 18385
18374: POP
// bc_type := b_ext_radio ; 20 :
18375: LD_ADDR_OWVAR 42
18379: PUSH
18380: LD_INT 22
18382: ST_TO_ADDR
18383: GO 18671
18385: LD_INT 20
18387: DOUBLE
18388: EQUAL
18389: IFTRUE 18393
18391: GO 18404
18393: POP
// bc_type := b_ext_siberium ; 21 :
18394: LD_ADDR_OWVAR 42
18398: PUSH
18399: LD_INT 21
18401: ST_TO_ADDR
18402: GO 18671
18404: LD_INT 21
18406: DOUBLE
18407: EQUAL
18408: IFTRUE 18412
18410: GO 18423
18412: POP
// bc_type := b_ext_computer ; 22 :
18413: LD_ADDR_OWVAR 42
18417: PUSH
18418: LD_INT 24
18420: ST_TO_ADDR
18421: GO 18671
18423: LD_INT 22
18425: DOUBLE
18426: EQUAL
18427: IFTRUE 18431
18429: GO 18442
18431: POP
// bc_type := b_ext_track ; 23 :
18432: LD_ADDR_OWVAR 42
18436: PUSH
18437: LD_INT 16
18439: ST_TO_ADDR
18440: GO 18671
18442: LD_INT 23
18444: DOUBLE
18445: EQUAL
18446: IFTRUE 18450
18448: GO 18461
18450: POP
// bc_type := b_ext_laser ; 24 :
18451: LD_ADDR_OWVAR 42
18455: PUSH
18456: LD_INT 25
18458: ST_TO_ADDR
18459: GO 18671
18461: LD_INT 24
18463: DOUBLE
18464: EQUAL
18465: IFTRUE 18469
18467: GO 18480
18469: POP
// bc_type := b_control_tower ; 25 :
18470: LD_ADDR_OWVAR 42
18474: PUSH
18475: LD_INT 36
18477: ST_TO_ADDR
18478: GO 18671
18480: LD_INT 25
18482: DOUBLE
18483: EQUAL
18484: IFTRUE 18488
18486: GO 18499
18488: POP
// bc_type := b_breastwork ; 26 :
18489: LD_ADDR_OWVAR 42
18493: PUSH
18494: LD_INT 31
18496: ST_TO_ADDR
18497: GO 18671
18499: LD_INT 26
18501: DOUBLE
18502: EQUAL
18503: IFTRUE 18507
18505: GO 18518
18507: POP
// bc_type := b_bunker ; 27 :
18508: LD_ADDR_OWVAR 42
18512: PUSH
18513: LD_INT 32
18515: ST_TO_ADDR
18516: GO 18671
18518: LD_INT 27
18520: DOUBLE
18521: EQUAL
18522: IFTRUE 18526
18524: GO 18537
18526: POP
// bc_type := b_turret ; 28 :
18527: LD_ADDR_OWVAR 42
18531: PUSH
18532: LD_INT 33
18534: ST_TO_ADDR
18535: GO 18671
18537: LD_INT 28
18539: DOUBLE
18540: EQUAL
18541: IFTRUE 18545
18543: GO 18556
18545: POP
// bc_type := b_armoury ; 29 :
18546: LD_ADDR_OWVAR 42
18550: PUSH
18551: LD_INT 4
18553: ST_TO_ADDR
18554: GO 18671
18556: LD_INT 29
18558: DOUBLE
18559: EQUAL
18560: IFTRUE 18564
18562: GO 18575
18564: POP
// bc_type := b_barracks ; 30 :
18565: LD_ADDR_OWVAR 42
18569: PUSH
18570: LD_INT 5
18572: ST_TO_ADDR
18573: GO 18671
18575: LD_INT 30
18577: DOUBLE
18578: EQUAL
18579: IFTRUE 18583
18581: GO 18594
18583: POP
// bc_type := b_solar_power ; 31 :
18584: LD_ADDR_OWVAR 42
18588: PUSH
18589: LD_INT 27
18591: ST_TO_ADDR
18592: GO 18671
18594: LD_INT 31
18596: DOUBLE
18597: EQUAL
18598: IFTRUE 18602
18600: GO 18613
18602: POP
// bc_type := b_oil_power ; 32 :
18603: LD_ADDR_OWVAR 42
18607: PUSH
18608: LD_INT 26
18610: ST_TO_ADDR
18611: GO 18671
18613: LD_INT 32
18615: DOUBLE
18616: EQUAL
18617: IFTRUE 18621
18619: GO 18632
18621: POP
// bc_type := b_siberite_power ; 33 :
18622: LD_ADDR_OWVAR 42
18626: PUSH
18627: LD_INT 28
18629: ST_TO_ADDR
18630: GO 18671
18632: LD_INT 33
18634: DOUBLE
18635: EQUAL
18636: IFTRUE 18640
18638: GO 18651
18640: POP
// bc_type := b_oil_mine ; 34 :
18641: LD_ADDR_OWVAR 42
18645: PUSH
18646: LD_INT 29
18648: ST_TO_ADDR
18649: GO 18671
18651: LD_INT 34
18653: DOUBLE
18654: EQUAL
18655: IFTRUE 18659
18657: GO 18670
18659: POP
// bc_type := b_siberite_mine ; end ;
18660: LD_ADDR_OWVAR 42
18664: PUSH
18665: LD_INT 30
18667: ST_TO_ADDR
18668: GO 18671
18670: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18671: LD_ADDR_VAR 0 8
18675: PUSH
18676: LD_VAR 0 5
18680: PPUSH
18681: LD_VAR 0 6
18685: PPUSH
18686: LD_VAR 0 3
18690: PPUSH
18691: CALL_OW 47
18695: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18696: LD_OWVAR 42
18700: PUSH
18701: LD_INT 32
18703: PUSH
18704: LD_INT 33
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: IN
18711: IFFALSE 18727
// PlaceWeaponTurret ( b , weapon ) ;
18713: LD_VAR 0 8
18717: PPUSH
18718: LD_VAR 0 4
18722: PPUSH
18723: CALL_OW 431
// end ;
18727: LD_VAR 0 7
18731: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18732: LD_INT 0
18734: PPUSH
18735: PPUSH
18736: PPUSH
18737: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18738: LD_ADDR_VAR 0 4
18742: PUSH
18743: LD_INT 22
18745: PUSH
18746: LD_OWVAR 2
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 2
18757: PUSH
18758: LD_INT 30
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 30
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PPUSH
18787: CALL_OW 69
18791: ST_TO_ADDR
// if not tmp then
18792: LD_VAR 0 4
18796: NOT
18797: IFFALSE 18801
// exit ;
18799: GO 18860
// for i in tmp do
18801: LD_ADDR_VAR 0 2
18805: PUSH
18806: LD_VAR 0 4
18810: PUSH
18811: FOR_IN
18812: IFFALSE 18858
// for j = 1 to 3 do
18814: LD_ADDR_VAR 0 3
18818: PUSH
18819: DOUBLE
18820: LD_INT 1
18822: DEC
18823: ST_TO_ADDR
18824: LD_INT 3
18826: PUSH
18827: FOR_TO
18828: IFFALSE 18854
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18830: LD_VAR 0 2
18834: PPUSH
18835: CALL_OW 274
18839: PPUSH
18840: LD_VAR 0 3
18844: PPUSH
18845: LD_INT 99999
18847: PPUSH
18848: CALL_OW 277
18852: GO 18827
18854: POP
18855: POP
18856: GO 18811
18858: POP
18859: POP
// end ;
18860: LD_VAR 0 1
18864: RET
// export function hHackSetLevel10 ; var i , j ; begin
18865: LD_INT 0
18867: PPUSH
18868: PPUSH
18869: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18870: LD_ADDR_VAR 0 2
18874: PUSH
18875: LD_INT 21
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PPUSH
18885: CALL_OW 69
18889: PUSH
18890: FOR_IN
18891: IFFALSE 18943
// if IsSelected ( i ) then
18893: LD_VAR 0 2
18897: PPUSH
18898: CALL_OW 306
18902: IFFALSE 18941
// begin for j := 1 to 4 do
18904: LD_ADDR_VAR 0 3
18908: PUSH
18909: DOUBLE
18910: LD_INT 1
18912: DEC
18913: ST_TO_ADDR
18914: LD_INT 4
18916: PUSH
18917: FOR_TO
18918: IFFALSE 18939
// SetSkill ( i , j , 10 ) ;
18920: LD_VAR 0 2
18924: PPUSH
18925: LD_VAR 0 3
18929: PPUSH
18930: LD_INT 10
18932: PPUSH
18933: CALL_OW 237
18937: GO 18917
18939: POP
18940: POP
// end ;
18941: GO 18890
18943: POP
18944: POP
// end ;
18945: LD_VAR 0 1
18949: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18950: LD_INT 0
18952: PPUSH
18953: PPUSH
18954: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18955: LD_ADDR_VAR 0 2
18959: PUSH
18960: LD_INT 22
18962: PUSH
18963: LD_OWVAR 2
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 21
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PPUSH
18986: CALL_OW 69
18990: PUSH
18991: FOR_IN
18992: IFFALSE 19033
// begin for j := 1 to 4 do
18994: LD_ADDR_VAR 0 3
18998: PUSH
18999: DOUBLE
19000: LD_INT 1
19002: DEC
19003: ST_TO_ADDR
19004: LD_INT 4
19006: PUSH
19007: FOR_TO
19008: IFFALSE 19029
// SetSkill ( i , j , 10 ) ;
19010: LD_VAR 0 2
19014: PPUSH
19015: LD_VAR 0 3
19019: PPUSH
19020: LD_INT 10
19022: PPUSH
19023: CALL_OW 237
19027: GO 19007
19029: POP
19030: POP
// end ;
19031: GO 18991
19033: POP
19034: POP
// end ;
19035: LD_VAR 0 1
19039: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19040: LD_INT 0
19042: PPUSH
// uc_side := your_side ;
19043: LD_ADDR_OWVAR 20
19047: PUSH
19048: LD_OWVAR 2
19052: ST_TO_ADDR
// uc_nation := nation ;
19053: LD_ADDR_OWVAR 21
19057: PUSH
19058: LD_VAR 0 1
19062: ST_TO_ADDR
// InitHc ;
19063: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19067: LD_INT 0
19069: PPUSH
19070: LD_VAR 0 2
19074: PPUSH
19075: LD_VAR 0 3
19079: PPUSH
19080: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19084: LD_VAR 0 4
19088: PPUSH
19089: LD_VAR 0 5
19093: PPUSH
19094: CALL_OW 428
19098: PUSH
19099: LD_INT 0
19101: EQUAL
19102: IFFALSE 19126
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19104: CALL_OW 44
19108: PPUSH
19109: LD_VAR 0 4
19113: PPUSH
19114: LD_VAR 0 5
19118: PPUSH
19119: LD_INT 1
19121: PPUSH
19122: CALL_OW 48
// end ;
19126: LD_VAR 0 6
19130: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19131: LD_INT 0
19133: PPUSH
19134: PPUSH
// uc_side := your_side ;
19135: LD_ADDR_OWVAR 20
19139: PUSH
19140: LD_OWVAR 2
19144: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19145: LD_VAR 0 1
19149: PUSH
19150: LD_INT 1
19152: PUSH
19153: LD_INT 2
19155: PUSH
19156: LD_INT 3
19158: PUSH
19159: LD_INT 4
19161: PUSH
19162: LD_INT 5
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: IN
19172: IFFALSE 19184
// uc_nation := nation_american else
19174: LD_ADDR_OWVAR 21
19178: PUSH
19179: LD_INT 1
19181: ST_TO_ADDR
19182: GO 19227
// if chassis in [ 11 , 12 , 13 , 14 ] then
19184: LD_VAR 0 1
19188: PUSH
19189: LD_INT 11
19191: PUSH
19192: LD_INT 12
19194: PUSH
19195: LD_INT 13
19197: PUSH
19198: LD_INT 14
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: IN
19207: IFFALSE 19219
// uc_nation := nation_arabian else
19209: LD_ADDR_OWVAR 21
19213: PUSH
19214: LD_INT 2
19216: ST_TO_ADDR
19217: GO 19227
// uc_nation := nation_russian ;
19219: LD_ADDR_OWVAR 21
19223: PUSH
19224: LD_INT 3
19226: ST_TO_ADDR
// vc_chassis := chassis ;
19227: LD_ADDR_OWVAR 37
19231: PUSH
19232: LD_VAR 0 1
19236: ST_TO_ADDR
// vc_engine := engine ;
19237: LD_ADDR_OWVAR 39
19241: PUSH
19242: LD_VAR 0 2
19246: ST_TO_ADDR
// vc_control := control ;
19247: LD_ADDR_OWVAR 38
19251: PUSH
19252: LD_VAR 0 3
19256: ST_TO_ADDR
// vc_weapon := weapon ;
19257: LD_ADDR_OWVAR 40
19261: PUSH
19262: LD_VAR 0 4
19266: ST_TO_ADDR
// un := CreateVehicle ;
19267: LD_ADDR_VAR 0 8
19271: PUSH
19272: CALL_OW 45
19276: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19277: LD_VAR 0 8
19281: PPUSH
19282: LD_INT 0
19284: PPUSH
19285: LD_INT 5
19287: PPUSH
19288: CALL_OW 12
19292: PPUSH
19293: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19297: LD_VAR 0 8
19301: PPUSH
19302: LD_VAR 0 5
19306: PPUSH
19307: LD_VAR 0 6
19311: PPUSH
19312: LD_INT 1
19314: PPUSH
19315: CALL_OW 48
// end ;
19319: LD_VAR 0 7
19323: RET
// export hInvincible ; every 1 do
19324: GO 19326
19326: DISABLE
// hInvincible := [ ] ;
19327: LD_ADDR_EXP 81
19331: PUSH
19332: EMPTY
19333: ST_TO_ADDR
19334: END
// every 10 do var i ;
19335: GO 19337
19337: DISABLE
19338: LD_INT 0
19340: PPUSH
// begin enable ;
19341: ENABLE
// if not hInvincible then
19342: LD_EXP 81
19346: NOT
19347: IFFALSE 19351
// exit ;
19349: GO 19395
// for i in hInvincible do
19351: LD_ADDR_VAR 0 1
19355: PUSH
19356: LD_EXP 81
19360: PUSH
19361: FOR_IN
19362: IFFALSE 19393
// if GetLives ( i ) < 1000 then
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 256
19373: PUSH
19374: LD_INT 1000
19376: LESS
19377: IFFALSE 19391
// SetLives ( i , 1000 ) ;
19379: LD_VAR 0 1
19383: PPUSH
19384: LD_INT 1000
19386: PPUSH
19387: CALL_OW 234
19391: GO 19361
19393: POP
19394: POP
// end ;
19395: PPOPN 1
19397: END
// export function hHackInvincible ; var i ; begin
19398: LD_INT 0
19400: PPUSH
19401: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19402: LD_ADDR_VAR 0 2
19406: PUSH
19407: LD_INT 2
19409: PUSH
19410: LD_INT 21
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 21
19422: PUSH
19423: LD_INT 2
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: PPUSH
19435: CALL_OW 69
19439: PUSH
19440: FOR_IN
19441: IFFALSE 19502
// if IsSelected ( i ) then
19443: LD_VAR 0 2
19447: PPUSH
19448: CALL_OW 306
19452: IFFALSE 19500
// begin if i in hInvincible then
19454: LD_VAR 0 2
19458: PUSH
19459: LD_EXP 81
19463: IN
19464: IFFALSE 19484
// hInvincible := hInvincible diff i else
19466: LD_ADDR_EXP 81
19470: PUSH
19471: LD_EXP 81
19475: PUSH
19476: LD_VAR 0 2
19480: DIFF
19481: ST_TO_ADDR
19482: GO 19500
// hInvincible := hInvincible union i ;
19484: LD_ADDR_EXP 81
19488: PUSH
19489: LD_EXP 81
19493: PUSH
19494: LD_VAR 0 2
19498: UNION
19499: ST_TO_ADDR
// end ;
19500: GO 19440
19502: POP
19503: POP
// end ;
19504: LD_VAR 0 1
19508: RET
// export function hHackInvisible ; var i , j ; begin
19509: LD_INT 0
19511: PPUSH
19512: PPUSH
19513: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19514: LD_ADDR_VAR 0 2
19518: PUSH
19519: LD_INT 21
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PPUSH
19529: CALL_OW 69
19533: PUSH
19534: FOR_IN
19535: IFFALSE 19559
// if IsSelected ( i ) then
19537: LD_VAR 0 2
19541: PPUSH
19542: CALL_OW 306
19546: IFFALSE 19557
// ComForceInvisible ( i ) ;
19548: LD_VAR 0 2
19552: PPUSH
19553: CALL_OW 496
19557: GO 19534
19559: POP
19560: POP
// end ;
19561: LD_VAR 0 1
19565: RET
// export function hHackChangeYourSide ; begin
19566: LD_INT 0
19568: PPUSH
// if your_side = 8 then
19569: LD_OWVAR 2
19573: PUSH
19574: LD_INT 8
19576: EQUAL
19577: IFFALSE 19589
// your_side := 0 else
19579: LD_ADDR_OWVAR 2
19583: PUSH
19584: LD_INT 0
19586: ST_TO_ADDR
19587: GO 19603
// your_side := your_side + 1 ;
19589: LD_ADDR_OWVAR 2
19593: PUSH
19594: LD_OWVAR 2
19598: PUSH
19599: LD_INT 1
19601: PLUS
19602: ST_TO_ADDR
// end ;
19603: LD_VAR 0 1
19607: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19608: LD_INT 0
19610: PPUSH
19611: PPUSH
19612: PPUSH
// for i in all_units do
19613: LD_ADDR_VAR 0 2
19617: PUSH
19618: LD_OWVAR 3
19622: PUSH
19623: FOR_IN
19624: IFFALSE 19702
// if IsSelected ( i ) then
19626: LD_VAR 0 2
19630: PPUSH
19631: CALL_OW 306
19635: IFFALSE 19700
// begin j := GetSide ( i ) ;
19637: LD_ADDR_VAR 0 3
19641: PUSH
19642: LD_VAR 0 2
19646: PPUSH
19647: CALL_OW 255
19651: ST_TO_ADDR
// if j = 8 then
19652: LD_VAR 0 3
19656: PUSH
19657: LD_INT 8
19659: EQUAL
19660: IFFALSE 19672
// j := 0 else
19662: LD_ADDR_VAR 0 3
19666: PUSH
19667: LD_INT 0
19669: ST_TO_ADDR
19670: GO 19686
// j := j + 1 ;
19672: LD_ADDR_VAR 0 3
19676: PUSH
19677: LD_VAR 0 3
19681: PUSH
19682: LD_INT 1
19684: PLUS
19685: ST_TO_ADDR
// SetSide ( i , j ) ;
19686: LD_VAR 0 2
19690: PPUSH
19691: LD_VAR 0 3
19695: PPUSH
19696: CALL_OW 235
// end ;
19700: GO 19623
19702: POP
19703: POP
// end ;
19704: LD_VAR 0 1
19708: RET
// export function hHackFog ; begin
19709: LD_INT 0
19711: PPUSH
// FogOff ( true ) ;
19712: LD_INT 1
19714: PPUSH
19715: CALL_OW 344
// end ;
19719: LD_VAR 0 1
19723: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19724: LD_INT 0
19726: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19727: LD_VAR 0 1
19731: PPUSH
19732: LD_VAR 0 2
19736: PPUSH
19737: LD_VAR 0 3
19741: PPUSH
19742: LD_INT 1
19744: PPUSH
19745: LD_INT 1
19747: PPUSH
19748: CALL_OW 483
// CenterOnXY ( x , y ) ;
19752: LD_VAR 0 2
19756: PPUSH
19757: LD_VAR 0 3
19761: PPUSH
19762: CALL_OW 84
// end ;
19766: LD_VAR 0 4
19770: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19771: LD_INT 0
19773: PPUSH
19774: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19775: LD_VAR 0 1
19779: NOT
19780: PUSH
19781: LD_VAR 0 2
19785: PPUSH
19786: LD_VAR 0 3
19790: PPUSH
19791: CALL_OW 488
19795: NOT
19796: OR
19797: PUSH
19798: LD_VAR 0 1
19802: PPUSH
19803: CALL_OW 266
19807: PUSH
19808: LD_INT 3
19810: NONEQUAL
19811: PUSH
19812: LD_VAR 0 1
19816: PPUSH
19817: CALL_OW 247
19821: PUSH
19822: LD_INT 1
19824: EQUAL
19825: NOT
19826: AND
19827: OR
19828: IFFALSE 19832
// exit ;
19830: GO 19981
// if GetType ( factory ) = unit_human then
19832: LD_VAR 0 1
19836: PPUSH
19837: CALL_OW 247
19841: PUSH
19842: LD_INT 1
19844: EQUAL
19845: IFFALSE 19862
// factory := IsInUnit ( factory ) ;
19847: LD_ADDR_VAR 0 1
19851: PUSH
19852: LD_VAR 0 1
19856: PPUSH
19857: CALL_OW 310
19861: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19862: LD_VAR 0 1
19866: PPUSH
19867: CALL_OW 266
19871: PUSH
19872: LD_INT 3
19874: NONEQUAL
19875: IFFALSE 19879
// exit ;
19877: GO 19981
// if HexInfo ( x , y ) = factory then
19879: LD_VAR 0 2
19883: PPUSH
19884: LD_VAR 0 3
19888: PPUSH
19889: CALL_OW 428
19893: PUSH
19894: LD_VAR 0 1
19898: EQUAL
19899: IFFALSE 19926
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19901: LD_ADDR_EXP 82
19905: PUSH
19906: LD_EXP 82
19910: PPUSH
19911: LD_VAR 0 1
19915: PPUSH
19916: LD_INT 0
19918: PPUSH
19919: CALL_OW 1
19923: ST_TO_ADDR
19924: GO 19977
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19926: LD_ADDR_EXP 82
19930: PUSH
19931: LD_EXP 82
19935: PPUSH
19936: LD_VAR 0 1
19940: PPUSH
19941: LD_VAR 0 1
19945: PPUSH
19946: CALL_OW 255
19950: PUSH
19951: LD_VAR 0 1
19955: PUSH
19956: LD_VAR 0 2
19960: PUSH
19961: LD_VAR 0 3
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: PPUSH
19972: CALL_OW 1
19976: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19977: CALL 19986 0 0
// end ;
19981: LD_VAR 0 4
19985: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19986: LD_INT 0
19988: PPUSH
19989: PPUSH
19990: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19991: LD_STRING resetFactoryWaypoint();
19993: PPUSH
19994: CALL_OW 559
// if factoryWaypoints then
19998: LD_EXP 82
20002: IFFALSE 20128
// begin list := PrepareArray ( factoryWaypoints ) ;
20004: LD_ADDR_VAR 0 3
20008: PUSH
20009: LD_EXP 82
20013: PPUSH
20014: CALL 66727 0 1
20018: ST_TO_ADDR
// for i := 1 to list do
20019: LD_ADDR_VAR 0 2
20023: PUSH
20024: DOUBLE
20025: LD_INT 1
20027: DEC
20028: ST_TO_ADDR
20029: LD_VAR 0 3
20033: PUSH
20034: FOR_TO
20035: IFFALSE 20126
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20037: LD_STRING setFactoryWaypointXY(
20039: PUSH
20040: LD_VAR 0 3
20044: PUSH
20045: LD_VAR 0 2
20049: ARRAY
20050: PUSH
20051: LD_INT 1
20053: ARRAY
20054: STR
20055: PUSH
20056: LD_STRING ,
20058: STR
20059: PUSH
20060: LD_VAR 0 3
20064: PUSH
20065: LD_VAR 0 2
20069: ARRAY
20070: PUSH
20071: LD_INT 2
20073: ARRAY
20074: STR
20075: PUSH
20076: LD_STRING ,
20078: STR
20079: PUSH
20080: LD_VAR 0 3
20084: PUSH
20085: LD_VAR 0 2
20089: ARRAY
20090: PUSH
20091: LD_INT 3
20093: ARRAY
20094: STR
20095: PUSH
20096: LD_STRING ,
20098: STR
20099: PUSH
20100: LD_VAR 0 3
20104: PUSH
20105: LD_VAR 0 2
20109: ARRAY
20110: PUSH
20111: LD_INT 4
20113: ARRAY
20114: STR
20115: PUSH
20116: LD_STRING )
20118: STR
20119: PPUSH
20120: CALL_OW 559
20124: GO 20034
20126: POP
20127: POP
// end ; end ;
20128: LD_VAR 0 1
20132: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20133: LD_INT 0
20135: PPUSH
// if HexInfo ( x , y ) = warehouse then
20136: LD_VAR 0 2
20140: PPUSH
20141: LD_VAR 0 3
20145: PPUSH
20146: CALL_OW 428
20150: PUSH
20151: LD_VAR 0 1
20155: EQUAL
20156: IFFALSE 20183
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20158: LD_ADDR_EXP 83
20162: PUSH
20163: LD_EXP 83
20167: PPUSH
20168: LD_VAR 0 1
20172: PPUSH
20173: LD_INT 0
20175: PPUSH
20176: CALL_OW 1
20180: ST_TO_ADDR
20181: GO 20234
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20183: LD_ADDR_EXP 83
20187: PUSH
20188: LD_EXP 83
20192: PPUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: LD_VAR 0 1
20202: PPUSH
20203: CALL_OW 255
20207: PUSH
20208: LD_VAR 0 1
20212: PUSH
20213: LD_VAR 0 2
20217: PUSH
20218: LD_VAR 0 3
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: PPUSH
20229: CALL_OW 1
20233: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20234: CALL 20243 0 0
// end ;
20238: LD_VAR 0 4
20242: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20243: LD_INT 0
20245: PPUSH
20246: PPUSH
20247: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20248: LD_STRING resetWarehouseGatheringPoints();
20250: PPUSH
20251: CALL_OW 559
// if warehouseGatheringPoints then
20255: LD_EXP 83
20259: IFFALSE 20385
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20261: LD_ADDR_VAR 0 3
20265: PUSH
20266: LD_EXP 83
20270: PPUSH
20271: CALL 66727 0 1
20275: ST_TO_ADDR
// for i := 1 to list do
20276: LD_ADDR_VAR 0 2
20280: PUSH
20281: DOUBLE
20282: LD_INT 1
20284: DEC
20285: ST_TO_ADDR
20286: LD_VAR 0 3
20290: PUSH
20291: FOR_TO
20292: IFFALSE 20383
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20294: LD_STRING setWarehouseGatheringPointXY(
20296: PUSH
20297: LD_VAR 0 3
20301: PUSH
20302: LD_VAR 0 2
20306: ARRAY
20307: PUSH
20308: LD_INT 1
20310: ARRAY
20311: STR
20312: PUSH
20313: LD_STRING ,
20315: STR
20316: PUSH
20317: LD_VAR 0 3
20321: PUSH
20322: LD_VAR 0 2
20326: ARRAY
20327: PUSH
20328: LD_INT 2
20330: ARRAY
20331: STR
20332: PUSH
20333: LD_STRING ,
20335: STR
20336: PUSH
20337: LD_VAR 0 3
20341: PUSH
20342: LD_VAR 0 2
20346: ARRAY
20347: PUSH
20348: LD_INT 3
20350: ARRAY
20351: STR
20352: PUSH
20353: LD_STRING ,
20355: STR
20356: PUSH
20357: LD_VAR 0 3
20361: PUSH
20362: LD_VAR 0 2
20366: ARRAY
20367: PUSH
20368: LD_INT 4
20370: ARRAY
20371: STR
20372: PUSH
20373: LD_STRING )
20375: STR
20376: PPUSH
20377: CALL_OW 559
20381: GO 20291
20383: POP
20384: POP
// end ; end ;
20385: LD_VAR 0 1
20389: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20390: LD_EXP 83
20394: IFFALSE 21079
20396: GO 20398
20398: DISABLE
20399: LD_INT 0
20401: PPUSH
20402: PPUSH
20403: PPUSH
20404: PPUSH
20405: PPUSH
20406: PPUSH
20407: PPUSH
20408: PPUSH
20409: PPUSH
// begin enable ;
20410: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20411: LD_ADDR_VAR 0 3
20415: PUSH
20416: LD_EXP 83
20420: PPUSH
20421: CALL 66727 0 1
20425: ST_TO_ADDR
// if not list then
20426: LD_VAR 0 3
20430: NOT
20431: IFFALSE 20435
// exit ;
20433: GO 21079
// for i := 1 to list do
20435: LD_ADDR_VAR 0 1
20439: PUSH
20440: DOUBLE
20441: LD_INT 1
20443: DEC
20444: ST_TO_ADDR
20445: LD_VAR 0 3
20449: PUSH
20450: FOR_TO
20451: IFFALSE 21077
// begin depot := list [ i ] [ 2 ] ;
20453: LD_ADDR_VAR 0 8
20457: PUSH
20458: LD_VAR 0 3
20462: PUSH
20463: LD_VAR 0 1
20467: ARRAY
20468: PUSH
20469: LD_INT 2
20471: ARRAY
20472: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20473: LD_ADDR_VAR 0 5
20477: PUSH
20478: LD_VAR 0 3
20482: PUSH
20483: LD_VAR 0 1
20487: ARRAY
20488: PUSH
20489: LD_INT 1
20491: ARRAY
20492: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20493: LD_VAR 0 8
20497: PPUSH
20498: CALL_OW 301
20502: PUSH
20503: LD_VAR 0 5
20507: PUSH
20508: LD_VAR 0 8
20512: PPUSH
20513: CALL_OW 255
20517: NONEQUAL
20518: OR
20519: IFFALSE 20548
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20521: LD_ADDR_EXP 83
20525: PUSH
20526: LD_EXP 83
20530: PPUSH
20531: LD_VAR 0 8
20535: PPUSH
20536: LD_INT 0
20538: PPUSH
20539: CALL_OW 1
20543: ST_TO_ADDR
// exit ;
20544: POP
20545: POP
20546: GO 21079
// end ; x := list [ i ] [ 3 ] ;
20548: LD_ADDR_VAR 0 6
20552: PUSH
20553: LD_VAR 0 3
20557: PUSH
20558: LD_VAR 0 1
20562: ARRAY
20563: PUSH
20564: LD_INT 3
20566: ARRAY
20567: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20568: LD_ADDR_VAR 0 7
20572: PUSH
20573: LD_VAR 0 3
20577: PUSH
20578: LD_VAR 0 1
20582: ARRAY
20583: PUSH
20584: LD_INT 4
20586: ARRAY
20587: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20588: LD_ADDR_VAR 0 9
20592: PUSH
20593: LD_VAR 0 6
20597: PPUSH
20598: LD_VAR 0 7
20602: PPUSH
20603: LD_INT 16
20605: PPUSH
20606: CALL 65315 0 3
20610: ST_TO_ADDR
// if not cratesNearbyPoint then
20611: LD_VAR 0 9
20615: NOT
20616: IFFALSE 20622
// exit ;
20618: POP
20619: POP
20620: GO 21079
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20622: LD_ADDR_VAR 0 4
20626: PUSH
20627: LD_INT 22
20629: PUSH
20630: LD_VAR 0 5
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 3
20641: PUSH
20642: LD_INT 60
20644: PUSH
20645: EMPTY
20646: LIST
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 91
20654: PUSH
20655: LD_VAR 0 8
20659: PUSH
20660: LD_INT 6
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: LD_INT 25
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 25
20683: PUSH
20684: LD_INT 16
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: PPUSH
20702: CALL_OW 69
20706: PUSH
20707: LD_VAR 0 8
20711: PPUSH
20712: CALL_OW 313
20716: PPUSH
20717: LD_INT 3
20719: PUSH
20720: LD_INT 60
20722: PUSH
20723: EMPTY
20724: LIST
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 25
20735: PUSH
20736: LD_INT 2
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 25
20745: PUSH
20746: LD_INT 16
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: LIST
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PPUSH
20762: CALL_OW 72
20766: UNION
20767: ST_TO_ADDR
// if tmp then
20768: LD_VAR 0 4
20772: IFFALSE 20852
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20774: LD_ADDR_VAR 0 4
20778: PUSH
20779: LD_VAR 0 4
20783: PPUSH
20784: LD_INT 3
20786: PPUSH
20787: CALL 63284 0 2
20791: ST_TO_ADDR
// for j in tmp do
20792: LD_ADDR_VAR 0 2
20796: PUSH
20797: LD_VAR 0 4
20801: PUSH
20802: FOR_IN
20803: IFFALSE 20846
// begin if IsInUnit ( j ) then
20805: LD_VAR 0 2
20809: PPUSH
20810: CALL_OW 310
20814: IFFALSE 20825
// ComExit ( j ) ;
20816: LD_VAR 0 2
20820: PPUSH
20821: CALL 63367 0 1
// AddComCollect ( j , x , y ) ;
20825: LD_VAR 0 2
20829: PPUSH
20830: LD_VAR 0 6
20834: PPUSH
20835: LD_VAR 0 7
20839: PPUSH
20840: CALL_OW 177
// end ;
20844: GO 20802
20846: POP
20847: POP
// exit ;
20848: POP
20849: POP
20850: GO 21079
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20852: LD_ADDR_VAR 0 4
20856: PUSH
20857: LD_INT 22
20859: PUSH
20860: LD_VAR 0 5
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 91
20871: PUSH
20872: LD_VAR 0 8
20876: PUSH
20877: LD_INT 8
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: LD_INT 34
20890: PUSH
20891: LD_INT 12
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 34
20900: PUSH
20901: LD_INT 51
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 34
20910: PUSH
20911: LD_INT 32
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 34
20920: PUSH
20921: LD_INT 89
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: PPUSH
20940: CALL_OW 69
20944: ST_TO_ADDR
// if tmp then
20945: LD_VAR 0 4
20949: IFFALSE 21075
// begin for j in tmp do
20951: LD_ADDR_VAR 0 2
20955: PUSH
20956: LD_VAR 0 4
20960: PUSH
20961: FOR_IN
20962: IFFALSE 21073
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20964: LD_VAR 0 2
20968: PPUSH
20969: CALL_OW 262
20973: PUSH
20974: LD_INT 3
20976: EQUAL
20977: PUSH
20978: LD_VAR 0 2
20982: PPUSH
20983: CALL_OW 261
20987: PUSH
20988: LD_INT 20
20990: GREATER
20991: OR
20992: PUSH
20993: LD_VAR 0 2
20997: PPUSH
20998: CALL_OW 314
21002: NOT
21003: AND
21004: PUSH
21005: LD_VAR 0 2
21009: PPUSH
21010: CALL_OW 263
21014: PUSH
21015: LD_INT 1
21017: NONEQUAL
21018: PUSH
21019: LD_VAR 0 2
21023: PPUSH
21024: CALL_OW 311
21028: OR
21029: AND
21030: IFFALSE 21071
// begin ComCollect ( j , x , y ) ;
21032: LD_VAR 0 2
21036: PPUSH
21037: LD_VAR 0 6
21041: PPUSH
21042: LD_VAR 0 7
21046: PPUSH
21047: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21051: LD_VAR 0 2
21055: PPUSH
21056: LD_VAR 0 8
21060: PPUSH
21061: CALL_OW 172
// exit ;
21065: POP
21066: POP
21067: POP
21068: POP
21069: GO 21079
// end ;
21071: GO 20961
21073: POP
21074: POP
// end ; end ;
21075: GO 20450
21077: POP
21078: POP
// end ; end_of_file
21079: PPOPN 9
21081: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21082: LD_INT 0
21084: PPUSH
21085: PPUSH
21086: PPUSH
21087: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21088: LD_VAR 0 1
21092: PPUSH
21093: CALL_OW 264
21097: PUSH
21098: LD_INT 91
21100: EQUAL
21101: IFFALSE 21173
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21103: LD_INT 68
21105: PPUSH
21106: LD_VAR 0 1
21110: PPUSH
21111: CALL_OW 255
21115: PPUSH
21116: CALL_OW 321
21120: PUSH
21121: LD_INT 2
21123: EQUAL
21124: IFFALSE 21136
// eff := 70 else
21126: LD_ADDR_VAR 0 4
21130: PUSH
21131: LD_INT 70
21133: ST_TO_ADDR
21134: GO 21144
// eff := 30 ;
21136: LD_ADDR_VAR 0 4
21140: PUSH
21141: LD_INT 30
21143: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21144: LD_VAR 0 1
21148: PPUSH
21149: CALL_OW 250
21153: PPUSH
21154: LD_VAR 0 1
21158: PPUSH
21159: CALL_OW 251
21163: PPUSH
21164: LD_VAR 0 4
21168: PPUSH
21169: CALL_OW 495
// end ; end ;
21173: LD_VAR 0 2
21177: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21178: LD_INT 0
21180: PPUSH
// end ;
21181: LD_VAR 0 4
21185: RET
// export function SOS_Command ( cmd ) ; begin
21186: LD_INT 0
21188: PPUSH
// end ;
21189: LD_VAR 0 2
21193: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21194: LD_INT 0
21196: PPUSH
// end ;
21197: LD_VAR 0 6
21201: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21202: LD_INT 0
21204: PPUSH
21205: PPUSH
// if not vehicle or not factory then
21206: LD_VAR 0 1
21210: NOT
21211: PUSH
21212: LD_VAR 0 2
21216: NOT
21217: OR
21218: IFFALSE 21222
// exit ;
21220: GO 21453
// if factoryWaypoints >= factory then
21222: LD_EXP 82
21226: PUSH
21227: LD_VAR 0 2
21231: GREATEREQUAL
21232: IFFALSE 21453
// if factoryWaypoints [ factory ] then
21234: LD_EXP 82
21238: PUSH
21239: LD_VAR 0 2
21243: ARRAY
21244: IFFALSE 21453
// begin if GetControl ( vehicle ) = control_manual then
21246: LD_VAR 0 1
21250: PPUSH
21251: CALL_OW 263
21255: PUSH
21256: LD_INT 1
21258: EQUAL
21259: IFFALSE 21340
// begin driver := IsDrivenBy ( vehicle ) ;
21261: LD_ADDR_VAR 0 4
21265: PUSH
21266: LD_VAR 0 1
21270: PPUSH
21271: CALL_OW 311
21275: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21276: LD_VAR 0 4
21280: PPUSH
21281: LD_EXP 82
21285: PUSH
21286: LD_VAR 0 2
21290: ARRAY
21291: PUSH
21292: LD_INT 3
21294: ARRAY
21295: PPUSH
21296: LD_EXP 82
21300: PUSH
21301: LD_VAR 0 2
21305: ARRAY
21306: PUSH
21307: LD_INT 4
21309: ARRAY
21310: PPUSH
21311: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21315: LD_VAR 0 4
21319: PPUSH
21320: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21324: LD_VAR 0 4
21328: PPUSH
21329: LD_VAR 0 2
21333: PPUSH
21334: CALL_OW 180
// end else
21338: GO 21453
// if GetControl ( vehicle ) = control_remote then
21340: LD_VAR 0 1
21344: PPUSH
21345: CALL_OW 263
21349: PUSH
21350: LD_INT 2
21352: EQUAL
21353: IFFALSE 21414
// begin wait ( 0 0$2 ) ;
21355: LD_INT 70
21357: PPUSH
21358: CALL_OW 67
// if Connect ( vehicle ) then
21362: LD_VAR 0 1
21366: PPUSH
21367: CALL 33699 0 1
21371: IFFALSE 21412
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21373: LD_VAR 0 1
21377: PPUSH
21378: LD_EXP 82
21382: PUSH
21383: LD_VAR 0 2
21387: ARRAY
21388: PUSH
21389: LD_INT 3
21391: ARRAY
21392: PPUSH
21393: LD_EXP 82
21397: PUSH
21398: LD_VAR 0 2
21402: ARRAY
21403: PUSH
21404: LD_INT 4
21406: ARRAY
21407: PPUSH
21408: CALL_OW 171
// end else
21412: GO 21453
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21414: LD_VAR 0 1
21418: PPUSH
21419: LD_EXP 82
21423: PUSH
21424: LD_VAR 0 2
21428: ARRAY
21429: PUSH
21430: LD_INT 3
21432: ARRAY
21433: PPUSH
21434: LD_EXP 82
21438: PUSH
21439: LD_VAR 0 2
21443: ARRAY
21444: PUSH
21445: LD_INT 4
21447: ARRAY
21448: PPUSH
21449: CALL_OW 171
// end ; end ;
21453: LD_VAR 0 3
21457: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21458: LD_INT 0
21460: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21461: LD_VAR 0 1
21465: PUSH
21466: LD_INT 250
21468: EQUAL
21469: PUSH
21470: LD_VAR 0 2
21474: PPUSH
21475: CALL_OW 264
21479: PUSH
21480: LD_INT 81
21482: EQUAL
21483: AND
21484: IFFALSE 21505
// MinerPlaceMine ( unit , x , y ) ;
21486: LD_VAR 0 2
21490: PPUSH
21491: LD_VAR 0 4
21495: PPUSH
21496: LD_VAR 0 5
21500: PPUSH
21501: CALL 23890 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21505: LD_VAR 0 1
21509: PUSH
21510: LD_INT 251
21512: EQUAL
21513: PUSH
21514: LD_VAR 0 2
21518: PPUSH
21519: CALL_OW 264
21523: PUSH
21524: LD_INT 81
21526: EQUAL
21527: AND
21528: IFFALSE 21549
// MinerDetonateMine ( unit , x , y ) ;
21530: LD_VAR 0 2
21534: PPUSH
21535: LD_VAR 0 4
21539: PPUSH
21540: LD_VAR 0 5
21544: PPUSH
21545: CALL 24165 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21549: LD_VAR 0 1
21553: PUSH
21554: LD_INT 252
21556: EQUAL
21557: PUSH
21558: LD_VAR 0 2
21562: PPUSH
21563: CALL_OW 264
21567: PUSH
21568: LD_INT 81
21570: EQUAL
21571: AND
21572: IFFALSE 21593
// MinerCreateMinefield ( unit , x , y ) ;
21574: LD_VAR 0 2
21578: PPUSH
21579: LD_VAR 0 4
21583: PPUSH
21584: LD_VAR 0 5
21588: PPUSH
21589: CALL 24582 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21593: LD_VAR 0 1
21597: PUSH
21598: LD_INT 253
21600: EQUAL
21601: PUSH
21602: LD_VAR 0 2
21606: PPUSH
21607: CALL_OW 257
21611: PUSH
21612: LD_INT 5
21614: EQUAL
21615: AND
21616: IFFALSE 21637
// ComBinocular ( unit , x , y ) ;
21618: LD_VAR 0 2
21622: PPUSH
21623: LD_VAR 0 4
21627: PPUSH
21628: LD_VAR 0 5
21632: PPUSH
21633: CALL 24951 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21637: LD_VAR 0 1
21641: PUSH
21642: LD_INT 254
21644: EQUAL
21645: PUSH
21646: LD_VAR 0 2
21650: PPUSH
21651: CALL_OW 264
21655: PUSH
21656: LD_INT 99
21658: EQUAL
21659: AND
21660: PUSH
21661: LD_VAR 0 3
21665: PPUSH
21666: CALL_OW 263
21670: PUSH
21671: LD_INT 3
21673: EQUAL
21674: AND
21675: IFFALSE 21691
// HackDestroyVehicle ( unit , selectedUnit ) ;
21677: LD_VAR 0 2
21681: PPUSH
21682: LD_VAR 0 3
21686: PPUSH
21687: CALL 23254 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21691: LD_VAR 0 1
21695: PUSH
21696: LD_INT 255
21698: EQUAL
21699: PUSH
21700: LD_VAR 0 2
21704: PPUSH
21705: CALL_OW 264
21709: PUSH
21710: LD_INT 14
21712: PUSH
21713: LD_INT 53
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: IN
21720: AND
21721: PUSH
21722: LD_VAR 0 4
21726: PPUSH
21727: LD_VAR 0 5
21731: PPUSH
21732: CALL_OW 488
21736: AND
21737: IFFALSE 21761
// CutTreeXYR ( unit , x , y , 12 ) ;
21739: LD_VAR 0 2
21743: PPUSH
21744: LD_VAR 0 4
21748: PPUSH
21749: LD_VAR 0 5
21753: PPUSH
21754: LD_INT 12
21756: PPUSH
21757: CALL 21824 0 4
// if cmd = 256 then
21761: LD_VAR 0 1
21765: PUSH
21766: LD_INT 256
21768: EQUAL
21769: IFFALSE 21790
// SetFactoryWaypoint ( unit , x , y ) ;
21771: LD_VAR 0 2
21775: PPUSH
21776: LD_VAR 0 4
21780: PPUSH
21781: LD_VAR 0 5
21785: PPUSH
21786: CALL 19771 0 3
// if cmd = 257 then
21790: LD_VAR 0 1
21794: PUSH
21795: LD_INT 257
21797: EQUAL
21798: IFFALSE 21819
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21800: LD_VAR 0 2
21804: PPUSH
21805: LD_VAR 0 4
21809: PPUSH
21810: LD_VAR 0 5
21814: PPUSH
21815: CALL 20133 0 3
// end ;
21819: LD_VAR 0 6
21823: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21824: LD_INT 0
21826: PPUSH
21827: PPUSH
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21835: LD_VAR 0 1
21839: NOT
21840: PUSH
21841: LD_VAR 0 2
21845: PPUSH
21846: LD_VAR 0 3
21850: PPUSH
21851: CALL_OW 488
21855: NOT
21856: OR
21857: PUSH
21858: LD_VAR 0 4
21862: NOT
21863: OR
21864: IFFALSE 21868
// exit ;
21866: GO 22208
// list := [ ] ;
21868: LD_ADDR_VAR 0 13
21872: PUSH
21873: EMPTY
21874: ST_TO_ADDR
// if x - r < 0 then
21875: LD_VAR 0 2
21879: PUSH
21880: LD_VAR 0 4
21884: MINUS
21885: PUSH
21886: LD_INT 0
21888: LESS
21889: IFFALSE 21901
// min_x := 0 else
21891: LD_ADDR_VAR 0 7
21895: PUSH
21896: LD_INT 0
21898: ST_TO_ADDR
21899: GO 21917
// min_x := x - r ;
21901: LD_ADDR_VAR 0 7
21905: PUSH
21906: LD_VAR 0 2
21910: PUSH
21911: LD_VAR 0 4
21915: MINUS
21916: ST_TO_ADDR
// if y - r < 0 then
21917: LD_VAR 0 3
21921: PUSH
21922: LD_VAR 0 4
21926: MINUS
21927: PUSH
21928: LD_INT 0
21930: LESS
21931: IFFALSE 21943
// min_y := 0 else
21933: LD_ADDR_VAR 0 8
21937: PUSH
21938: LD_INT 0
21940: ST_TO_ADDR
21941: GO 21959
// min_y := y - r ;
21943: LD_ADDR_VAR 0 8
21947: PUSH
21948: LD_VAR 0 3
21952: PUSH
21953: LD_VAR 0 4
21957: MINUS
21958: ST_TO_ADDR
// max_x := x + r ;
21959: LD_ADDR_VAR 0 9
21963: PUSH
21964: LD_VAR 0 2
21968: PUSH
21969: LD_VAR 0 4
21973: PLUS
21974: ST_TO_ADDR
// max_y := y + r ;
21975: LD_ADDR_VAR 0 10
21979: PUSH
21980: LD_VAR 0 3
21984: PUSH
21985: LD_VAR 0 4
21989: PLUS
21990: ST_TO_ADDR
// for _x = min_x to max_x do
21991: LD_ADDR_VAR 0 11
21995: PUSH
21996: DOUBLE
21997: LD_VAR 0 7
22001: DEC
22002: ST_TO_ADDR
22003: LD_VAR 0 9
22007: PUSH
22008: FOR_TO
22009: IFFALSE 22126
// for _y = min_y to max_y do
22011: LD_ADDR_VAR 0 12
22015: PUSH
22016: DOUBLE
22017: LD_VAR 0 8
22021: DEC
22022: ST_TO_ADDR
22023: LD_VAR 0 10
22027: PUSH
22028: FOR_TO
22029: IFFALSE 22122
// begin if not ValidHex ( _x , _y ) then
22031: LD_VAR 0 11
22035: PPUSH
22036: LD_VAR 0 12
22040: PPUSH
22041: CALL_OW 488
22045: NOT
22046: IFFALSE 22050
// continue ;
22048: GO 22028
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22050: LD_VAR 0 11
22054: PPUSH
22055: LD_VAR 0 12
22059: PPUSH
22060: CALL_OW 351
22064: PUSH
22065: LD_VAR 0 11
22069: PPUSH
22070: LD_VAR 0 12
22074: PPUSH
22075: CALL_OW 554
22079: AND
22080: IFFALSE 22120
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22082: LD_ADDR_VAR 0 13
22086: PUSH
22087: LD_VAR 0 13
22091: PPUSH
22092: LD_VAR 0 13
22096: PUSH
22097: LD_INT 1
22099: PLUS
22100: PPUSH
22101: LD_VAR 0 11
22105: PUSH
22106: LD_VAR 0 12
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PPUSH
22115: CALL_OW 2
22119: ST_TO_ADDR
// end ;
22120: GO 22028
22122: POP
22123: POP
22124: GO 22008
22126: POP
22127: POP
// if not list then
22128: LD_VAR 0 13
22132: NOT
22133: IFFALSE 22137
// exit ;
22135: GO 22208
// for i in list do
22137: LD_ADDR_VAR 0 6
22141: PUSH
22142: LD_VAR 0 13
22146: PUSH
22147: FOR_IN
22148: IFFALSE 22206
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22150: LD_VAR 0 1
22154: PPUSH
22155: LD_STRING M
22157: PUSH
22158: LD_VAR 0 6
22162: PUSH
22163: LD_INT 1
22165: ARRAY
22166: PUSH
22167: LD_VAR 0 6
22171: PUSH
22172: LD_INT 2
22174: ARRAY
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: LD_INT 0
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: PUSH
22197: EMPTY
22198: LIST
22199: PPUSH
22200: CALL_OW 447
22204: GO 22147
22206: POP
22207: POP
// end ;
22208: LD_VAR 0 5
22212: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22213: LD_EXP 85
22217: NOT
22218: IFFALSE 22268
22220: GO 22222
22222: DISABLE
// begin initHack := true ;
22223: LD_ADDR_EXP 85
22227: PUSH
22228: LD_INT 1
22230: ST_TO_ADDR
// hackTanks := [ ] ;
22231: LD_ADDR_EXP 86
22235: PUSH
22236: EMPTY
22237: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22238: LD_ADDR_EXP 87
22242: PUSH
22243: EMPTY
22244: ST_TO_ADDR
// hackLimit := 3 ;
22245: LD_ADDR_EXP 88
22249: PUSH
22250: LD_INT 3
22252: ST_TO_ADDR
// hackDist := 12 ;
22253: LD_ADDR_EXP 89
22257: PUSH
22258: LD_INT 12
22260: ST_TO_ADDR
// hackCounter := [ ] ;
22261: LD_ADDR_EXP 90
22265: PUSH
22266: EMPTY
22267: ST_TO_ADDR
// end ;
22268: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22269: LD_EXP 85
22273: PUSH
22274: LD_INT 34
22276: PUSH
22277: LD_INT 99
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PPUSH
22284: CALL_OW 69
22288: AND
22289: IFFALSE 22542
22291: GO 22293
22293: DISABLE
22294: LD_INT 0
22296: PPUSH
22297: PPUSH
// begin enable ;
22298: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22299: LD_ADDR_VAR 0 1
22303: PUSH
22304: LD_INT 34
22306: PUSH
22307: LD_INT 99
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PPUSH
22314: CALL_OW 69
22318: PUSH
22319: FOR_IN
22320: IFFALSE 22540
// begin if not i in hackTanks then
22322: LD_VAR 0 1
22326: PUSH
22327: LD_EXP 86
22331: IN
22332: NOT
22333: IFFALSE 22416
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22335: LD_ADDR_EXP 86
22339: PUSH
22340: LD_EXP 86
22344: PPUSH
22345: LD_EXP 86
22349: PUSH
22350: LD_INT 1
22352: PLUS
22353: PPUSH
22354: LD_VAR 0 1
22358: PPUSH
22359: CALL_OW 1
22363: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22364: LD_ADDR_EXP 87
22368: PUSH
22369: LD_EXP 87
22373: PPUSH
22374: LD_EXP 87
22378: PUSH
22379: LD_INT 1
22381: PLUS
22382: PPUSH
22383: EMPTY
22384: PPUSH
22385: CALL_OW 1
22389: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22390: LD_ADDR_EXP 90
22394: PUSH
22395: LD_EXP 90
22399: PPUSH
22400: LD_EXP 90
22404: PUSH
22405: LD_INT 1
22407: PLUS
22408: PPUSH
22409: EMPTY
22410: PPUSH
22411: CALL_OW 1
22415: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22416: LD_VAR 0 1
22420: PPUSH
22421: CALL_OW 302
22425: NOT
22426: IFFALSE 22439
// begin HackUnlinkAll ( i ) ;
22428: LD_VAR 0 1
22432: PPUSH
22433: CALL 22545 0 1
// continue ;
22437: GO 22319
// end ; HackCheckCapturedStatus ( i ) ;
22439: LD_VAR 0 1
22443: PPUSH
22444: CALL 22988 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22448: LD_ADDR_VAR 0 2
22452: PUSH
22453: LD_INT 81
22455: PUSH
22456: LD_VAR 0 1
22460: PPUSH
22461: CALL_OW 255
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 33
22472: PUSH
22473: LD_INT 3
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 91
22482: PUSH
22483: LD_VAR 0 1
22487: PUSH
22488: LD_EXP 89
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 50
22500: PUSH
22501: EMPTY
22502: LIST
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: PPUSH
22510: CALL_OW 69
22514: ST_TO_ADDR
// if not tmp then
22515: LD_VAR 0 2
22519: NOT
22520: IFFALSE 22524
// continue ;
22522: GO 22319
// HackLink ( i , tmp ) ;
22524: LD_VAR 0 1
22528: PPUSH
22529: LD_VAR 0 2
22533: PPUSH
22534: CALL 22681 0 2
// end ;
22538: GO 22319
22540: POP
22541: POP
// end ;
22542: PPOPN 2
22544: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22545: LD_INT 0
22547: PPUSH
22548: PPUSH
22549: PPUSH
// if not hack in hackTanks then
22550: LD_VAR 0 1
22554: PUSH
22555: LD_EXP 86
22559: IN
22560: NOT
22561: IFFALSE 22565
// exit ;
22563: GO 22676
// index := GetElementIndex ( hackTanks , hack ) ;
22565: LD_ADDR_VAR 0 4
22569: PUSH
22570: LD_EXP 86
22574: PPUSH
22575: LD_VAR 0 1
22579: PPUSH
22580: CALL 30515 0 2
22584: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22585: LD_EXP 87
22589: PUSH
22590: LD_VAR 0 4
22594: ARRAY
22595: IFFALSE 22676
// begin for i in hackTanksCaptured [ index ] do
22597: LD_ADDR_VAR 0 3
22601: PUSH
22602: LD_EXP 87
22606: PUSH
22607: LD_VAR 0 4
22611: ARRAY
22612: PUSH
22613: FOR_IN
22614: IFFALSE 22640
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22616: LD_VAR 0 3
22620: PUSH
22621: LD_INT 1
22623: ARRAY
22624: PPUSH
22625: LD_VAR 0 3
22629: PUSH
22630: LD_INT 2
22632: ARRAY
22633: PPUSH
22634: CALL_OW 235
22638: GO 22613
22640: POP
22641: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22642: LD_ADDR_EXP 87
22646: PUSH
22647: LD_EXP 87
22651: PPUSH
22652: LD_VAR 0 4
22656: PPUSH
22657: EMPTY
22658: PPUSH
22659: CALL_OW 1
22663: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22664: LD_VAR 0 1
22668: PPUSH
22669: LD_INT 0
22671: PPUSH
22672: CALL_OW 505
// end ; end ;
22676: LD_VAR 0 2
22680: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22681: LD_INT 0
22683: PPUSH
22684: PPUSH
22685: PPUSH
// if not hack in hackTanks or not vehicles then
22686: LD_VAR 0 1
22690: PUSH
22691: LD_EXP 86
22695: IN
22696: NOT
22697: PUSH
22698: LD_VAR 0 2
22702: NOT
22703: OR
22704: IFFALSE 22708
// exit ;
22706: GO 22983
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22708: LD_ADDR_VAR 0 2
22712: PUSH
22713: LD_VAR 0 1
22717: PPUSH
22718: LD_VAR 0 2
22722: PPUSH
22723: LD_INT 1
22725: PPUSH
22726: LD_INT 1
22728: PPUSH
22729: CALL 31165 0 4
22733: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22734: LD_ADDR_VAR 0 5
22738: PUSH
22739: LD_EXP 86
22743: PPUSH
22744: LD_VAR 0 1
22748: PPUSH
22749: CALL 30515 0 2
22753: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22754: LD_EXP 87
22758: PUSH
22759: LD_VAR 0 5
22763: ARRAY
22764: PUSH
22765: LD_EXP 88
22769: LESS
22770: IFFALSE 22959
// begin for i := 1 to vehicles do
22772: LD_ADDR_VAR 0 4
22776: PUSH
22777: DOUBLE
22778: LD_INT 1
22780: DEC
22781: ST_TO_ADDR
22782: LD_VAR 0 2
22786: PUSH
22787: FOR_TO
22788: IFFALSE 22957
// begin if hackTanksCaptured [ index ] = hackLimit then
22790: LD_EXP 87
22794: PUSH
22795: LD_VAR 0 5
22799: ARRAY
22800: PUSH
22801: LD_EXP 88
22805: EQUAL
22806: IFFALSE 22810
// break ;
22808: GO 22957
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22810: LD_ADDR_EXP 90
22814: PUSH
22815: LD_EXP 90
22819: PPUSH
22820: LD_VAR 0 5
22824: PPUSH
22825: LD_EXP 90
22829: PUSH
22830: LD_VAR 0 5
22834: ARRAY
22835: PUSH
22836: LD_INT 1
22838: PLUS
22839: PPUSH
22840: CALL_OW 1
22844: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22845: LD_ADDR_EXP 87
22849: PUSH
22850: LD_EXP 87
22854: PPUSH
22855: LD_VAR 0 5
22859: PUSH
22860: LD_EXP 87
22864: PUSH
22865: LD_VAR 0 5
22869: ARRAY
22870: PUSH
22871: LD_INT 1
22873: PLUS
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PPUSH
22879: LD_VAR 0 2
22883: PUSH
22884: LD_VAR 0 4
22888: ARRAY
22889: PUSH
22890: LD_VAR 0 2
22894: PUSH
22895: LD_VAR 0 4
22899: ARRAY
22900: PPUSH
22901: CALL_OW 255
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PPUSH
22910: CALL 30730 0 3
22914: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22915: LD_VAR 0 2
22919: PUSH
22920: LD_VAR 0 4
22924: ARRAY
22925: PPUSH
22926: LD_VAR 0 1
22930: PPUSH
22931: CALL_OW 255
22935: PPUSH
22936: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22940: LD_VAR 0 2
22944: PUSH
22945: LD_VAR 0 4
22949: ARRAY
22950: PPUSH
22951: CALL_OW 141
// end ;
22955: GO 22787
22957: POP
22958: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22959: LD_VAR 0 1
22963: PPUSH
22964: LD_EXP 87
22968: PUSH
22969: LD_VAR 0 5
22973: ARRAY
22974: PUSH
22975: LD_INT 0
22977: PLUS
22978: PPUSH
22979: CALL_OW 505
// end ;
22983: LD_VAR 0 3
22987: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22988: LD_INT 0
22990: PPUSH
22991: PPUSH
22992: PPUSH
22993: PPUSH
// if not hack in hackTanks then
22994: LD_VAR 0 1
22998: PUSH
22999: LD_EXP 86
23003: IN
23004: NOT
23005: IFFALSE 23009
// exit ;
23007: GO 23249
// index := GetElementIndex ( hackTanks , hack ) ;
23009: LD_ADDR_VAR 0 4
23013: PUSH
23014: LD_EXP 86
23018: PPUSH
23019: LD_VAR 0 1
23023: PPUSH
23024: CALL 30515 0 2
23028: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23029: LD_ADDR_VAR 0 3
23033: PUSH
23034: DOUBLE
23035: LD_EXP 87
23039: PUSH
23040: LD_VAR 0 4
23044: ARRAY
23045: INC
23046: ST_TO_ADDR
23047: LD_INT 1
23049: PUSH
23050: FOR_DOWNTO
23051: IFFALSE 23223
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23053: LD_ADDR_VAR 0 5
23057: PUSH
23058: LD_EXP 87
23062: PUSH
23063: LD_VAR 0 4
23067: ARRAY
23068: PUSH
23069: LD_VAR 0 3
23073: ARRAY
23074: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23075: LD_VAR 0 5
23079: PUSH
23080: LD_INT 1
23082: ARRAY
23083: PPUSH
23084: CALL_OW 302
23088: NOT
23089: PUSH
23090: LD_VAR 0 5
23094: PUSH
23095: LD_INT 1
23097: ARRAY
23098: PPUSH
23099: CALL_OW 255
23103: PUSH
23104: LD_VAR 0 1
23108: PPUSH
23109: CALL_OW 255
23113: NONEQUAL
23114: OR
23115: IFFALSE 23221
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23117: LD_VAR 0 5
23121: PUSH
23122: LD_INT 1
23124: ARRAY
23125: PPUSH
23126: CALL_OW 305
23130: PUSH
23131: LD_VAR 0 5
23135: PUSH
23136: LD_INT 1
23138: ARRAY
23139: PPUSH
23140: CALL_OW 255
23144: PUSH
23145: LD_VAR 0 1
23149: PPUSH
23150: CALL_OW 255
23154: EQUAL
23155: AND
23156: IFFALSE 23180
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23158: LD_VAR 0 5
23162: PUSH
23163: LD_INT 1
23165: ARRAY
23166: PPUSH
23167: LD_VAR 0 5
23171: PUSH
23172: LD_INT 2
23174: ARRAY
23175: PPUSH
23176: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23180: LD_ADDR_EXP 87
23184: PUSH
23185: LD_EXP 87
23189: PPUSH
23190: LD_VAR 0 4
23194: PPUSH
23195: LD_EXP 87
23199: PUSH
23200: LD_VAR 0 4
23204: ARRAY
23205: PPUSH
23206: LD_VAR 0 3
23210: PPUSH
23211: CALL_OW 3
23215: PPUSH
23216: CALL_OW 1
23220: ST_TO_ADDR
// end ; end ;
23221: GO 23050
23223: POP
23224: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23225: LD_VAR 0 1
23229: PPUSH
23230: LD_EXP 87
23234: PUSH
23235: LD_VAR 0 4
23239: ARRAY
23240: PUSH
23241: LD_INT 0
23243: PLUS
23244: PPUSH
23245: CALL_OW 505
// end ;
23249: LD_VAR 0 2
23253: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23254: LD_INT 0
23256: PPUSH
23257: PPUSH
23258: PPUSH
23259: PPUSH
// if not hack in hackTanks then
23260: LD_VAR 0 1
23264: PUSH
23265: LD_EXP 86
23269: IN
23270: NOT
23271: IFFALSE 23275
// exit ;
23273: GO 23360
// index := GetElementIndex ( hackTanks , hack ) ;
23275: LD_ADDR_VAR 0 5
23279: PUSH
23280: LD_EXP 86
23284: PPUSH
23285: LD_VAR 0 1
23289: PPUSH
23290: CALL 30515 0 2
23294: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23295: LD_ADDR_VAR 0 4
23299: PUSH
23300: DOUBLE
23301: LD_INT 1
23303: DEC
23304: ST_TO_ADDR
23305: LD_EXP 87
23309: PUSH
23310: LD_VAR 0 5
23314: ARRAY
23315: PUSH
23316: FOR_TO
23317: IFFALSE 23358
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23319: LD_EXP 87
23323: PUSH
23324: LD_VAR 0 5
23328: ARRAY
23329: PUSH
23330: LD_VAR 0 4
23334: ARRAY
23335: PUSH
23336: LD_INT 1
23338: ARRAY
23339: PUSH
23340: LD_VAR 0 2
23344: EQUAL
23345: IFFALSE 23356
// KillUnit ( vehicle ) ;
23347: LD_VAR 0 2
23351: PPUSH
23352: CALL_OW 66
23356: GO 23316
23358: POP
23359: POP
// end ;
23360: LD_VAR 0 3
23364: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23365: LD_EXP 91
23369: NOT
23370: IFFALSE 23405
23372: GO 23374
23374: DISABLE
// begin initMiner := true ;
23375: LD_ADDR_EXP 91
23379: PUSH
23380: LD_INT 1
23382: ST_TO_ADDR
// minersList := [ ] ;
23383: LD_ADDR_EXP 92
23387: PUSH
23388: EMPTY
23389: ST_TO_ADDR
// minerMinesList := [ ] ;
23390: LD_ADDR_EXP 93
23394: PUSH
23395: EMPTY
23396: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23397: LD_ADDR_EXP 94
23401: PUSH
23402: LD_INT 5
23404: ST_TO_ADDR
// end ;
23405: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23406: LD_EXP 91
23410: PUSH
23411: LD_INT 34
23413: PUSH
23414: LD_INT 81
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PPUSH
23421: CALL_OW 69
23425: AND
23426: IFFALSE 23887
23428: GO 23430
23430: DISABLE
23431: LD_INT 0
23433: PPUSH
23434: PPUSH
23435: PPUSH
23436: PPUSH
// begin enable ;
23437: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23438: LD_ADDR_VAR 0 1
23442: PUSH
23443: LD_INT 34
23445: PUSH
23446: LD_INT 81
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PPUSH
23453: CALL_OW 69
23457: PUSH
23458: FOR_IN
23459: IFFALSE 23531
// begin if not i in minersList then
23461: LD_VAR 0 1
23465: PUSH
23466: LD_EXP 92
23470: IN
23471: NOT
23472: IFFALSE 23529
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23474: LD_ADDR_EXP 92
23478: PUSH
23479: LD_EXP 92
23483: PPUSH
23484: LD_EXP 92
23488: PUSH
23489: LD_INT 1
23491: PLUS
23492: PPUSH
23493: LD_VAR 0 1
23497: PPUSH
23498: CALL_OW 1
23502: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23503: LD_ADDR_EXP 93
23507: PUSH
23508: LD_EXP 93
23512: PPUSH
23513: LD_EXP 93
23517: PUSH
23518: LD_INT 1
23520: PLUS
23521: PPUSH
23522: EMPTY
23523: PPUSH
23524: CALL_OW 1
23528: ST_TO_ADDR
// end end ;
23529: GO 23458
23531: POP
23532: POP
// for i := minerMinesList downto 1 do
23533: LD_ADDR_VAR 0 1
23537: PUSH
23538: DOUBLE
23539: LD_EXP 93
23543: INC
23544: ST_TO_ADDR
23545: LD_INT 1
23547: PUSH
23548: FOR_DOWNTO
23549: IFFALSE 23885
// begin if IsLive ( minersList [ i ] ) then
23551: LD_EXP 92
23555: PUSH
23556: LD_VAR 0 1
23560: ARRAY
23561: PPUSH
23562: CALL_OW 300
23566: IFFALSE 23594
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23568: LD_EXP 92
23572: PUSH
23573: LD_VAR 0 1
23577: ARRAY
23578: PPUSH
23579: LD_EXP 93
23583: PUSH
23584: LD_VAR 0 1
23588: ARRAY
23589: PPUSH
23590: CALL_OW 505
// if not minerMinesList [ i ] then
23594: LD_EXP 93
23598: PUSH
23599: LD_VAR 0 1
23603: ARRAY
23604: NOT
23605: IFFALSE 23609
// continue ;
23607: GO 23548
// for j := minerMinesList [ i ] downto 1 do
23609: LD_ADDR_VAR 0 2
23613: PUSH
23614: DOUBLE
23615: LD_EXP 93
23619: PUSH
23620: LD_VAR 0 1
23624: ARRAY
23625: INC
23626: ST_TO_ADDR
23627: LD_INT 1
23629: PUSH
23630: FOR_DOWNTO
23631: IFFALSE 23881
// begin side := GetSide ( minersList [ i ] ) ;
23633: LD_ADDR_VAR 0 3
23637: PUSH
23638: LD_EXP 92
23642: PUSH
23643: LD_VAR 0 1
23647: ARRAY
23648: PPUSH
23649: CALL_OW 255
23653: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23654: LD_ADDR_VAR 0 4
23658: PUSH
23659: LD_EXP 93
23663: PUSH
23664: LD_VAR 0 1
23668: ARRAY
23669: PUSH
23670: LD_VAR 0 2
23674: ARRAY
23675: PUSH
23676: LD_INT 1
23678: ARRAY
23679: PPUSH
23680: LD_EXP 93
23684: PUSH
23685: LD_VAR 0 1
23689: ARRAY
23690: PUSH
23691: LD_VAR 0 2
23695: ARRAY
23696: PUSH
23697: LD_INT 2
23699: ARRAY
23700: PPUSH
23701: CALL_OW 428
23705: ST_TO_ADDR
// if not tmp then
23706: LD_VAR 0 4
23710: NOT
23711: IFFALSE 23715
// continue ;
23713: GO 23630
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23715: LD_VAR 0 4
23719: PUSH
23720: LD_INT 81
23722: PUSH
23723: LD_VAR 0 3
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PPUSH
23732: CALL_OW 69
23736: IN
23737: PUSH
23738: LD_EXP 93
23742: PUSH
23743: LD_VAR 0 1
23747: ARRAY
23748: PUSH
23749: LD_VAR 0 2
23753: ARRAY
23754: PUSH
23755: LD_INT 1
23757: ARRAY
23758: PPUSH
23759: LD_EXP 93
23763: PUSH
23764: LD_VAR 0 1
23768: ARRAY
23769: PUSH
23770: LD_VAR 0 2
23774: ARRAY
23775: PUSH
23776: LD_INT 2
23778: ARRAY
23779: PPUSH
23780: CALL_OW 458
23784: AND
23785: IFFALSE 23879
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23787: LD_EXP 93
23791: PUSH
23792: LD_VAR 0 1
23796: ARRAY
23797: PUSH
23798: LD_VAR 0 2
23802: ARRAY
23803: PUSH
23804: LD_INT 1
23806: ARRAY
23807: PPUSH
23808: LD_EXP 93
23812: PUSH
23813: LD_VAR 0 1
23817: ARRAY
23818: PUSH
23819: LD_VAR 0 2
23823: ARRAY
23824: PUSH
23825: LD_INT 2
23827: ARRAY
23828: PPUSH
23829: LD_VAR 0 3
23833: PPUSH
23834: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23838: LD_ADDR_EXP 93
23842: PUSH
23843: LD_EXP 93
23847: PPUSH
23848: LD_VAR 0 1
23852: PPUSH
23853: LD_EXP 93
23857: PUSH
23858: LD_VAR 0 1
23862: ARRAY
23863: PPUSH
23864: LD_VAR 0 2
23868: PPUSH
23869: CALL_OW 3
23873: PPUSH
23874: CALL_OW 1
23878: ST_TO_ADDR
// end ; end ;
23879: GO 23630
23881: POP
23882: POP
// end ;
23883: GO 23548
23885: POP
23886: POP
// end ;
23887: PPOPN 4
23889: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23890: LD_INT 0
23892: PPUSH
23893: PPUSH
// result := false ;
23894: LD_ADDR_VAR 0 4
23898: PUSH
23899: LD_INT 0
23901: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23902: LD_VAR 0 1
23906: PPUSH
23907: CALL_OW 264
23911: PUSH
23912: LD_INT 81
23914: EQUAL
23915: NOT
23916: IFFALSE 23920
// exit ;
23918: GO 24160
// index := GetElementIndex ( minersList , unit ) ;
23920: LD_ADDR_VAR 0 5
23924: PUSH
23925: LD_EXP 92
23929: PPUSH
23930: LD_VAR 0 1
23934: PPUSH
23935: CALL 30515 0 2
23939: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23940: LD_EXP 93
23944: PUSH
23945: LD_VAR 0 5
23949: ARRAY
23950: PUSH
23951: LD_EXP 94
23955: GREATEREQUAL
23956: IFFALSE 23960
// exit ;
23958: GO 24160
// ComMoveXY ( unit , x , y ) ;
23960: LD_VAR 0 1
23964: PPUSH
23965: LD_VAR 0 2
23969: PPUSH
23970: LD_VAR 0 3
23974: PPUSH
23975: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23979: LD_INT 35
23981: PPUSH
23982: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23986: LD_VAR 0 1
23990: PPUSH
23991: LD_VAR 0 2
23995: PPUSH
23996: LD_VAR 0 3
24000: PPUSH
24001: CALL 61778 0 3
24005: NOT
24006: PUSH
24007: LD_VAR 0 1
24011: PPUSH
24012: CALL_OW 314
24016: AND
24017: IFFALSE 24021
// exit ;
24019: GO 24160
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24021: LD_VAR 0 2
24025: PPUSH
24026: LD_VAR 0 3
24030: PPUSH
24031: CALL_OW 428
24035: PUSH
24036: LD_VAR 0 1
24040: EQUAL
24041: PUSH
24042: LD_VAR 0 1
24046: PPUSH
24047: CALL_OW 314
24051: NOT
24052: AND
24053: IFFALSE 23979
// PlaySoundXY ( x , y , PlantMine ) ;
24055: LD_VAR 0 2
24059: PPUSH
24060: LD_VAR 0 3
24064: PPUSH
24065: LD_STRING PlantMine
24067: PPUSH
24068: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24072: LD_VAR 0 2
24076: PPUSH
24077: LD_VAR 0 3
24081: PPUSH
24082: LD_VAR 0 1
24086: PPUSH
24087: CALL_OW 255
24091: PPUSH
24092: LD_INT 0
24094: PPUSH
24095: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24099: LD_ADDR_EXP 93
24103: PUSH
24104: LD_EXP 93
24108: PPUSH
24109: LD_VAR 0 5
24113: PUSH
24114: LD_EXP 93
24118: PUSH
24119: LD_VAR 0 5
24123: ARRAY
24124: PUSH
24125: LD_INT 1
24127: PLUS
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PPUSH
24133: LD_VAR 0 2
24137: PUSH
24138: LD_VAR 0 3
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PPUSH
24147: CALL 30730 0 3
24151: ST_TO_ADDR
// result := true ;
24152: LD_ADDR_VAR 0 4
24156: PUSH
24157: LD_INT 1
24159: ST_TO_ADDR
// end ;
24160: LD_VAR 0 4
24164: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24165: LD_INT 0
24167: PPUSH
24168: PPUSH
24169: PPUSH
// if not unit in minersList then
24170: LD_VAR 0 1
24174: PUSH
24175: LD_EXP 92
24179: IN
24180: NOT
24181: IFFALSE 24185
// exit ;
24183: GO 24577
// index := GetElementIndex ( minersList , unit ) ;
24185: LD_ADDR_VAR 0 6
24189: PUSH
24190: LD_EXP 92
24194: PPUSH
24195: LD_VAR 0 1
24199: PPUSH
24200: CALL 30515 0 2
24204: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24205: LD_ADDR_VAR 0 5
24209: PUSH
24210: DOUBLE
24211: LD_EXP 93
24215: PUSH
24216: LD_VAR 0 6
24220: ARRAY
24221: INC
24222: ST_TO_ADDR
24223: LD_INT 1
24225: PUSH
24226: FOR_DOWNTO
24227: IFFALSE 24388
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24229: LD_EXP 93
24233: PUSH
24234: LD_VAR 0 6
24238: ARRAY
24239: PUSH
24240: LD_VAR 0 5
24244: ARRAY
24245: PUSH
24246: LD_INT 1
24248: ARRAY
24249: PUSH
24250: LD_VAR 0 2
24254: EQUAL
24255: PUSH
24256: LD_EXP 93
24260: PUSH
24261: LD_VAR 0 6
24265: ARRAY
24266: PUSH
24267: LD_VAR 0 5
24271: ARRAY
24272: PUSH
24273: LD_INT 2
24275: ARRAY
24276: PUSH
24277: LD_VAR 0 3
24281: EQUAL
24282: AND
24283: IFFALSE 24386
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24285: LD_EXP 93
24289: PUSH
24290: LD_VAR 0 6
24294: ARRAY
24295: PUSH
24296: LD_VAR 0 5
24300: ARRAY
24301: PUSH
24302: LD_INT 1
24304: ARRAY
24305: PPUSH
24306: LD_EXP 93
24310: PUSH
24311: LD_VAR 0 6
24315: ARRAY
24316: PUSH
24317: LD_VAR 0 5
24321: ARRAY
24322: PUSH
24323: LD_INT 2
24325: ARRAY
24326: PPUSH
24327: LD_VAR 0 1
24331: PPUSH
24332: CALL_OW 255
24336: PPUSH
24337: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24341: LD_ADDR_EXP 93
24345: PUSH
24346: LD_EXP 93
24350: PPUSH
24351: LD_VAR 0 6
24355: PPUSH
24356: LD_EXP 93
24360: PUSH
24361: LD_VAR 0 6
24365: ARRAY
24366: PPUSH
24367: LD_VAR 0 5
24371: PPUSH
24372: CALL_OW 3
24376: PPUSH
24377: CALL_OW 1
24381: ST_TO_ADDR
// exit ;
24382: POP
24383: POP
24384: GO 24577
// end ; end ;
24386: GO 24226
24388: POP
24389: POP
// for i := minerMinesList [ index ] downto 1 do
24390: LD_ADDR_VAR 0 5
24394: PUSH
24395: DOUBLE
24396: LD_EXP 93
24400: PUSH
24401: LD_VAR 0 6
24405: ARRAY
24406: INC
24407: ST_TO_ADDR
24408: LD_INT 1
24410: PUSH
24411: FOR_DOWNTO
24412: IFFALSE 24575
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24414: LD_EXP 93
24418: PUSH
24419: LD_VAR 0 6
24423: ARRAY
24424: PUSH
24425: LD_VAR 0 5
24429: ARRAY
24430: PUSH
24431: LD_INT 1
24433: ARRAY
24434: PPUSH
24435: LD_EXP 93
24439: PUSH
24440: LD_VAR 0 6
24444: ARRAY
24445: PUSH
24446: LD_VAR 0 5
24450: ARRAY
24451: PUSH
24452: LD_INT 2
24454: ARRAY
24455: PPUSH
24456: LD_VAR 0 2
24460: PPUSH
24461: LD_VAR 0 3
24465: PPUSH
24466: CALL_OW 298
24470: PUSH
24471: LD_INT 6
24473: LESS
24474: IFFALSE 24573
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24476: LD_EXP 93
24480: PUSH
24481: LD_VAR 0 6
24485: ARRAY
24486: PUSH
24487: LD_VAR 0 5
24491: ARRAY
24492: PUSH
24493: LD_INT 1
24495: ARRAY
24496: PPUSH
24497: LD_EXP 93
24501: PUSH
24502: LD_VAR 0 6
24506: ARRAY
24507: PUSH
24508: LD_VAR 0 5
24512: ARRAY
24513: PUSH
24514: LD_INT 2
24516: ARRAY
24517: PPUSH
24518: LD_VAR 0 1
24522: PPUSH
24523: CALL_OW 255
24527: PPUSH
24528: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24532: LD_ADDR_EXP 93
24536: PUSH
24537: LD_EXP 93
24541: PPUSH
24542: LD_VAR 0 6
24546: PPUSH
24547: LD_EXP 93
24551: PUSH
24552: LD_VAR 0 6
24556: ARRAY
24557: PPUSH
24558: LD_VAR 0 5
24562: PPUSH
24563: CALL_OW 3
24567: PPUSH
24568: CALL_OW 1
24572: ST_TO_ADDR
// end ; end ;
24573: GO 24411
24575: POP
24576: POP
// end ;
24577: LD_VAR 0 4
24581: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24582: LD_INT 0
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
24588: PPUSH
24589: PPUSH
24590: PPUSH
24591: PPUSH
24592: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24593: LD_VAR 0 1
24597: PPUSH
24598: CALL_OW 264
24602: PUSH
24603: LD_INT 81
24605: EQUAL
24606: NOT
24607: PUSH
24608: LD_VAR 0 1
24612: PUSH
24613: LD_EXP 92
24617: IN
24618: NOT
24619: OR
24620: IFFALSE 24624
// exit ;
24622: GO 24946
// index := GetElementIndex ( minersList , unit ) ;
24624: LD_ADDR_VAR 0 6
24628: PUSH
24629: LD_EXP 92
24633: PPUSH
24634: LD_VAR 0 1
24638: PPUSH
24639: CALL 30515 0 2
24643: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24644: LD_ADDR_VAR 0 8
24648: PUSH
24649: LD_EXP 94
24653: PUSH
24654: LD_EXP 93
24658: PUSH
24659: LD_VAR 0 6
24663: ARRAY
24664: MINUS
24665: ST_TO_ADDR
// if not minesFreeAmount then
24666: LD_VAR 0 8
24670: NOT
24671: IFFALSE 24675
// exit ;
24673: GO 24946
// tmp := [ ] ;
24675: LD_ADDR_VAR 0 7
24679: PUSH
24680: EMPTY
24681: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24682: LD_ADDR_VAR 0 5
24686: PUSH
24687: DOUBLE
24688: LD_INT 1
24690: DEC
24691: ST_TO_ADDR
24692: LD_VAR 0 8
24696: PUSH
24697: FOR_TO
24698: IFFALSE 24893
// begin _d := rand ( 0 , 5 ) ;
24700: LD_ADDR_VAR 0 11
24704: PUSH
24705: LD_INT 0
24707: PPUSH
24708: LD_INT 5
24710: PPUSH
24711: CALL_OW 12
24715: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24716: LD_ADDR_VAR 0 12
24720: PUSH
24721: LD_INT 2
24723: PPUSH
24724: LD_INT 6
24726: PPUSH
24727: CALL_OW 12
24731: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24732: LD_ADDR_VAR 0 9
24736: PUSH
24737: LD_VAR 0 2
24741: PPUSH
24742: LD_VAR 0 11
24746: PPUSH
24747: LD_VAR 0 12
24751: PPUSH
24752: CALL_OW 272
24756: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24757: LD_ADDR_VAR 0 10
24761: PUSH
24762: LD_VAR 0 3
24766: PPUSH
24767: LD_VAR 0 11
24771: PPUSH
24772: LD_VAR 0 12
24776: PPUSH
24777: CALL_OW 273
24781: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24782: LD_VAR 0 9
24786: PPUSH
24787: LD_VAR 0 10
24791: PPUSH
24792: CALL_OW 488
24796: PUSH
24797: LD_VAR 0 9
24801: PUSH
24802: LD_VAR 0 10
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_VAR 0 7
24815: IN
24816: NOT
24817: AND
24818: PUSH
24819: LD_VAR 0 9
24823: PPUSH
24824: LD_VAR 0 10
24828: PPUSH
24829: CALL_OW 458
24833: NOT
24834: AND
24835: IFFALSE 24877
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24837: LD_ADDR_VAR 0 7
24841: PUSH
24842: LD_VAR 0 7
24846: PPUSH
24847: LD_VAR 0 7
24851: PUSH
24852: LD_INT 1
24854: PLUS
24855: PPUSH
24856: LD_VAR 0 9
24860: PUSH
24861: LD_VAR 0 10
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PPUSH
24870: CALL_OW 1
24874: ST_TO_ADDR
24875: GO 24891
// i := i - 1 ;
24877: LD_ADDR_VAR 0 5
24881: PUSH
24882: LD_VAR 0 5
24886: PUSH
24887: LD_INT 1
24889: MINUS
24890: ST_TO_ADDR
// end ;
24891: GO 24697
24893: POP
24894: POP
// for i in tmp do
24895: LD_ADDR_VAR 0 5
24899: PUSH
24900: LD_VAR 0 7
24904: PUSH
24905: FOR_IN
24906: IFFALSE 24944
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24908: LD_VAR 0 1
24912: PPUSH
24913: LD_VAR 0 5
24917: PUSH
24918: LD_INT 1
24920: ARRAY
24921: PPUSH
24922: LD_VAR 0 5
24926: PUSH
24927: LD_INT 2
24929: ARRAY
24930: PPUSH
24931: CALL 23890 0 3
24935: NOT
24936: IFFALSE 24942
// exit ;
24938: POP
24939: POP
24940: GO 24946
24942: GO 24905
24944: POP
24945: POP
// end ;
24946: LD_VAR 0 4
24950: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24951: LD_INT 0
24953: PPUSH
24954: PPUSH
24955: PPUSH
24956: PPUSH
24957: PPUSH
24958: PPUSH
24959: PPUSH
// if not GetClass ( unit ) = class_sniper then
24960: LD_VAR 0 1
24964: PPUSH
24965: CALL_OW 257
24969: PUSH
24970: LD_INT 5
24972: EQUAL
24973: NOT
24974: IFFALSE 24978
// exit ;
24976: GO 25366
// dist := 8 ;
24978: LD_ADDR_VAR 0 5
24982: PUSH
24983: LD_INT 8
24985: ST_TO_ADDR
// viewRange := 12 ;
24986: LD_ADDR_VAR 0 7
24990: PUSH
24991: LD_INT 12
24993: ST_TO_ADDR
// side := GetSide ( unit ) ;
24994: LD_ADDR_VAR 0 6
24998: PUSH
24999: LD_VAR 0 1
25003: PPUSH
25004: CALL_OW 255
25008: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25009: LD_INT 61
25011: PPUSH
25012: LD_VAR 0 6
25016: PPUSH
25017: CALL_OW 321
25021: PUSH
25022: LD_INT 2
25024: EQUAL
25025: IFFALSE 25035
// viewRange := 16 ;
25027: LD_ADDR_VAR 0 7
25031: PUSH
25032: LD_INT 16
25034: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25035: LD_VAR 0 1
25039: PPUSH
25040: LD_VAR 0 2
25044: PPUSH
25045: LD_VAR 0 3
25049: PPUSH
25050: CALL_OW 297
25054: PUSH
25055: LD_VAR 0 5
25059: GREATER
25060: IFFALSE 25139
// begin ComMoveXY ( unit , x , y ) ;
25062: LD_VAR 0 1
25066: PPUSH
25067: LD_VAR 0 2
25071: PPUSH
25072: LD_VAR 0 3
25076: PPUSH
25077: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25081: LD_INT 35
25083: PPUSH
25084: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25088: LD_VAR 0 1
25092: PPUSH
25093: LD_VAR 0 2
25097: PPUSH
25098: LD_VAR 0 3
25102: PPUSH
25103: CALL 61778 0 3
25107: NOT
25108: IFFALSE 25112
// exit ;
25110: GO 25366
// until GetDistUnitXY ( unit , x , y ) < dist ;
25112: LD_VAR 0 1
25116: PPUSH
25117: LD_VAR 0 2
25121: PPUSH
25122: LD_VAR 0 3
25126: PPUSH
25127: CALL_OW 297
25131: PUSH
25132: LD_VAR 0 5
25136: LESS
25137: IFFALSE 25081
// end ; ComTurnXY ( unit , x , y ) ;
25139: LD_VAR 0 1
25143: PPUSH
25144: LD_VAR 0 2
25148: PPUSH
25149: LD_VAR 0 3
25153: PPUSH
25154: CALL_OW 118
// wait ( 5 ) ;
25158: LD_INT 5
25160: PPUSH
25161: CALL_OW 67
// _d := GetDir ( unit ) ;
25165: LD_ADDR_VAR 0 10
25169: PUSH
25170: LD_VAR 0 1
25174: PPUSH
25175: CALL_OW 254
25179: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25180: LD_ADDR_VAR 0 8
25184: PUSH
25185: LD_VAR 0 1
25189: PPUSH
25190: CALL_OW 250
25194: PPUSH
25195: LD_VAR 0 10
25199: PPUSH
25200: LD_VAR 0 5
25204: PPUSH
25205: CALL_OW 272
25209: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25210: LD_ADDR_VAR 0 9
25214: PUSH
25215: LD_VAR 0 1
25219: PPUSH
25220: CALL_OW 251
25224: PPUSH
25225: LD_VAR 0 10
25229: PPUSH
25230: LD_VAR 0 5
25234: PPUSH
25235: CALL_OW 273
25239: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25240: LD_VAR 0 8
25244: PPUSH
25245: LD_VAR 0 9
25249: PPUSH
25250: CALL_OW 488
25254: NOT
25255: IFFALSE 25259
// exit ;
25257: GO 25366
// ComAnimCustom ( unit , 1 ) ;
25259: LD_VAR 0 1
25263: PPUSH
25264: LD_INT 1
25266: PPUSH
25267: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25271: LD_VAR 0 8
25275: PPUSH
25276: LD_VAR 0 9
25280: PPUSH
25281: LD_VAR 0 6
25285: PPUSH
25286: LD_VAR 0 7
25290: PPUSH
25291: CALL_OW 330
// repeat wait ( 1 ) ;
25295: LD_INT 1
25297: PPUSH
25298: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25302: LD_VAR 0 1
25306: PPUSH
25307: CALL_OW 316
25311: PUSH
25312: LD_VAR 0 1
25316: PPUSH
25317: CALL_OW 314
25321: OR
25322: PUSH
25323: LD_VAR 0 1
25327: PPUSH
25328: CALL_OW 302
25332: NOT
25333: OR
25334: PUSH
25335: LD_VAR 0 1
25339: PPUSH
25340: CALL_OW 301
25344: OR
25345: IFFALSE 25295
// RemoveSeeing ( _x , _y , side ) ;
25347: LD_VAR 0 8
25351: PPUSH
25352: LD_VAR 0 9
25356: PPUSH
25357: LD_VAR 0 6
25361: PPUSH
25362: CALL_OW 331
// end ; end_of_file
25366: LD_VAR 0 4
25370: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25371: LD_VAR 0 1
25375: PUSH
25376: LD_INT 200
25378: DOUBLE
25379: GREATEREQUAL
25380: IFFALSE 25388
25382: LD_INT 299
25384: DOUBLE
25385: LESSEQUAL
25386: IFTRUE 25390
25388: GO 25422
25390: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25391: LD_VAR 0 1
25395: PPUSH
25396: LD_VAR 0 2
25400: PPUSH
25401: LD_VAR 0 3
25405: PPUSH
25406: LD_VAR 0 4
25410: PPUSH
25411: LD_VAR 0 5
25415: PPUSH
25416: CALL 21458 0 5
25420: GO 25499
25422: LD_INT 300
25424: DOUBLE
25425: GREATEREQUAL
25426: IFFALSE 25434
25428: LD_INT 399
25430: DOUBLE
25431: LESSEQUAL
25432: IFTRUE 25436
25434: GO 25498
25436: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25437: LD_VAR 0 1
25441: PPUSH
25442: LD_VAR 0 2
25446: PPUSH
25447: LD_VAR 0 3
25451: PPUSH
25452: LD_VAR 0 4
25456: PPUSH
25457: LD_VAR 0 5
25461: PPUSH
25462: LD_VAR 0 6
25466: PPUSH
25467: LD_VAR 0 7
25471: PPUSH
25472: LD_VAR 0 8
25476: PPUSH
25477: LD_VAR 0 9
25481: PPUSH
25482: LD_VAR 0 10
25486: PPUSH
25487: LD_VAR 0 11
25491: PPUSH
25492: CALL 17791 0 11
25496: GO 25499
25498: POP
// end ;
25499: PPOPN 11
25501: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25502: LD_VAR 0 1
25506: PPUSH
25507: LD_VAR 0 2
25511: PPUSH
25512: LD_VAR 0 3
25516: PPUSH
25517: LD_VAR 0 4
25521: PPUSH
25522: LD_VAR 0 5
25526: PPUSH
25527: CALL 21194 0 5
// end ; end_of_file
25531: PPOPN 5
25533: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
25534: LD_VAR 0 1
25538: PPUSH
25539: LD_VAR 0 2
25543: PPUSH
25544: LD_VAR 0 3
25548: PPUSH
25549: LD_VAR 0 4
25553: PPUSH
25554: LD_VAR 0 5
25558: PPUSH
25559: LD_VAR 0 6
25563: PPUSH
25564: CALL 5484 0 6
// end ;
25568: PPOPN 6
25570: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
25571: LD_INT 0
25573: PPUSH
// begin if not units then
25574: LD_VAR 0 1
25578: NOT
25579: IFFALSE 25583
// exit ;
25581: GO 25583
// end ;
25583: PPOPN 7
25585: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
25586: CALL 5455 0 0
// end ; end_of_file end_of_file
25590: PPOPN 1
25592: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25593: LD_INT 0
25595: PPUSH
25596: PPUSH
// if exist_mode then
25597: LD_VAR 0 2
25601: IFFALSE 25626
// unit := CreateCharacter ( prefix & ident ) else
25603: LD_ADDR_VAR 0 5
25607: PUSH
25608: LD_VAR 0 3
25612: PUSH
25613: LD_VAR 0 1
25617: STR
25618: PPUSH
25619: CALL_OW 34
25623: ST_TO_ADDR
25624: GO 25641
// unit := NewCharacter ( ident ) ;
25626: LD_ADDR_VAR 0 5
25630: PUSH
25631: LD_VAR 0 1
25635: PPUSH
25636: CALL_OW 25
25640: ST_TO_ADDR
// result := unit ;
25641: LD_ADDR_VAR 0 4
25645: PUSH
25646: LD_VAR 0 5
25650: ST_TO_ADDR
// end ;
25651: LD_VAR 0 4
25655: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25656: LD_INT 0
25658: PPUSH
25659: PPUSH
// if not side or not nation then
25660: LD_VAR 0 1
25664: NOT
25665: PUSH
25666: LD_VAR 0 2
25670: NOT
25671: OR
25672: IFFALSE 25676
// exit ;
25674: GO 26444
// case nation of nation_american :
25676: LD_VAR 0 2
25680: PUSH
25681: LD_INT 1
25683: DOUBLE
25684: EQUAL
25685: IFTRUE 25689
25687: GO 25903
25689: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25690: LD_ADDR_VAR 0 4
25694: PUSH
25695: LD_INT 35
25697: PUSH
25698: LD_INT 45
25700: PUSH
25701: LD_INT 46
25703: PUSH
25704: LD_INT 47
25706: PUSH
25707: LD_INT 82
25709: PUSH
25710: LD_INT 83
25712: PUSH
25713: LD_INT 84
25715: PUSH
25716: LD_INT 85
25718: PUSH
25719: LD_INT 86
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: LD_INT 6
25730: PUSH
25731: LD_INT 15
25733: PUSH
25734: LD_INT 16
25736: PUSH
25737: LD_INT 7
25739: PUSH
25740: LD_INT 12
25742: PUSH
25743: LD_INT 13
25745: PUSH
25746: LD_INT 10
25748: PUSH
25749: LD_INT 14
25751: PUSH
25752: LD_INT 20
25754: PUSH
25755: LD_INT 21
25757: PUSH
25758: LD_INT 22
25760: PUSH
25761: LD_INT 25
25763: PUSH
25764: LD_INT 32
25766: PUSH
25767: LD_INT 27
25769: PUSH
25770: LD_INT 36
25772: PUSH
25773: LD_INT 69
25775: PUSH
25776: LD_INT 39
25778: PUSH
25779: LD_INT 34
25781: PUSH
25782: LD_INT 40
25784: PUSH
25785: LD_INT 48
25787: PUSH
25788: LD_INT 49
25790: PUSH
25791: LD_INT 50
25793: PUSH
25794: LD_INT 51
25796: PUSH
25797: LD_INT 52
25799: PUSH
25800: LD_INT 53
25802: PUSH
25803: LD_INT 54
25805: PUSH
25806: LD_INT 55
25808: PUSH
25809: LD_INT 56
25811: PUSH
25812: LD_INT 57
25814: PUSH
25815: LD_INT 58
25817: PUSH
25818: LD_INT 59
25820: PUSH
25821: LD_INT 60
25823: PUSH
25824: LD_INT 61
25826: PUSH
25827: LD_INT 62
25829: PUSH
25830: LD_INT 80
25832: PUSH
25833: LD_INT 82
25835: PUSH
25836: LD_INT 83
25838: PUSH
25839: LD_INT 84
25841: PUSH
25842: LD_INT 85
25844: PUSH
25845: LD_INT 86
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: ST_TO_ADDR
25901: GO 26368
25903: LD_INT 2
25905: DOUBLE
25906: EQUAL
25907: IFTRUE 25911
25909: GO 26137
25911: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25912: LD_ADDR_VAR 0 4
25916: PUSH
25917: LD_INT 35
25919: PUSH
25920: LD_INT 45
25922: PUSH
25923: LD_INT 46
25925: PUSH
25926: LD_INT 47
25928: PUSH
25929: LD_INT 82
25931: PUSH
25932: LD_INT 83
25934: PUSH
25935: LD_INT 84
25937: PUSH
25938: LD_INT 85
25940: PUSH
25941: LD_INT 87
25943: PUSH
25944: LD_INT 70
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: LD_INT 11
25952: PUSH
25953: LD_INT 3
25955: PUSH
25956: LD_INT 4
25958: PUSH
25959: LD_INT 5
25961: PUSH
25962: LD_INT 6
25964: PUSH
25965: LD_INT 15
25967: PUSH
25968: LD_INT 18
25970: PUSH
25971: LD_INT 7
25973: PUSH
25974: LD_INT 17
25976: PUSH
25977: LD_INT 8
25979: PUSH
25980: LD_INT 20
25982: PUSH
25983: LD_INT 21
25985: PUSH
25986: LD_INT 22
25988: PUSH
25989: LD_INT 72
25991: PUSH
25992: LD_INT 26
25994: PUSH
25995: LD_INT 69
25997: PUSH
25998: LD_INT 39
26000: PUSH
26001: LD_INT 40
26003: PUSH
26004: LD_INT 41
26006: PUSH
26007: LD_INT 42
26009: PUSH
26010: LD_INT 43
26012: PUSH
26013: LD_INT 48
26015: PUSH
26016: LD_INT 49
26018: PUSH
26019: LD_INT 50
26021: PUSH
26022: LD_INT 51
26024: PUSH
26025: LD_INT 52
26027: PUSH
26028: LD_INT 53
26030: PUSH
26031: LD_INT 54
26033: PUSH
26034: LD_INT 55
26036: PUSH
26037: LD_INT 56
26039: PUSH
26040: LD_INT 60
26042: PUSH
26043: LD_INT 61
26045: PUSH
26046: LD_INT 62
26048: PUSH
26049: LD_INT 66
26051: PUSH
26052: LD_INT 67
26054: PUSH
26055: LD_INT 68
26057: PUSH
26058: LD_INT 81
26060: PUSH
26061: LD_INT 82
26063: PUSH
26064: LD_INT 83
26066: PUSH
26067: LD_INT 84
26069: PUSH
26070: LD_INT 85
26072: PUSH
26073: LD_INT 87
26075: PUSH
26076: LD_INT 88
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: ST_TO_ADDR
26135: GO 26368
26137: LD_INT 3
26139: DOUBLE
26140: EQUAL
26141: IFTRUE 26145
26143: GO 26367
26145: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26146: LD_ADDR_VAR 0 4
26150: PUSH
26151: LD_INT 46
26153: PUSH
26154: LD_INT 47
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: LD_INT 2
26162: PUSH
26163: LD_INT 82
26165: PUSH
26166: LD_INT 83
26168: PUSH
26169: LD_INT 84
26171: PUSH
26172: LD_INT 85
26174: PUSH
26175: LD_INT 86
26177: PUSH
26178: LD_INT 11
26180: PUSH
26181: LD_INT 9
26183: PUSH
26184: LD_INT 20
26186: PUSH
26187: LD_INT 19
26189: PUSH
26190: LD_INT 21
26192: PUSH
26193: LD_INT 24
26195: PUSH
26196: LD_INT 22
26198: PUSH
26199: LD_INT 25
26201: PUSH
26202: LD_INT 28
26204: PUSH
26205: LD_INT 29
26207: PUSH
26208: LD_INT 30
26210: PUSH
26211: LD_INT 31
26213: PUSH
26214: LD_INT 37
26216: PUSH
26217: LD_INT 38
26219: PUSH
26220: LD_INT 32
26222: PUSH
26223: LD_INT 27
26225: PUSH
26226: LD_INT 33
26228: PUSH
26229: LD_INT 69
26231: PUSH
26232: LD_INT 39
26234: PUSH
26235: LD_INT 34
26237: PUSH
26238: LD_INT 40
26240: PUSH
26241: LD_INT 71
26243: PUSH
26244: LD_INT 23
26246: PUSH
26247: LD_INT 44
26249: PUSH
26250: LD_INT 48
26252: PUSH
26253: LD_INT 49
26255: PUSH
26256: LD_INT 50
26258: PUSH
26259: LD_INT 51
26261: PUSH
26262: LD_INT 52
26264: PUSH
26265: LD_INT 53
26267: PUSH
26268: LD_INT 54
26270: PUSH
26271: LD_INT 55
26273: PUSH
26274: LD_INT 56
26276: PUSH
26277: LD_INT 57
26279: PUSH
26280: LD_INT 58
26282: PUSH
26283: LD_INT 59
26285: PUSH
26286: LD_INT 63
26288: PUSH
26289: LD_INT 64
26291: PUSH
26292: LD_INT 65
26294: PUSH
26295: LD_INT 82
26297: PUSH
26298: LD_INT 83
26300: PUSH
26301: LD_INT 84
26303: PUSH
26304: LD_INT 85
26306: PUSH
26307: LD_INT 86
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: ST_TO_ADDR
26365: GO 26368
26367: POP
// if state > - 1 and state < 3 then
26368: LD_VAR 0 3
26372: PUSH
26373: LD_INT 1
26375: NEG
26376: GREATER
26377: PUSH
26378: LD_VAR 0 3
26382: PUSH
26383: LD_INT 3
26385: LESS
26386: AND
26387: IFFALSE 26444
// for i in result do
26389: LD_ADDR_VAR 0 5
26393: PUSH
26394: LD_VAR 0 4
26398: PUSH
26399: FOR_IN
26400: IFFALSE 26442
// if GetTech ( i , side ) <> state then
26402: LD_VAR 0 5
26406: PPUSH
26407: LD_VAR 0 1
26411: PPUSH
26412: CALL_OW 321
26416: PUSH
26417: LD_VAR 0 3
26421: NONEQUAL
26422: IFFALSE 26440
// result := result diff i ;
26424: LD_ADDR_VAR 0 4
26428: PUSH
26429: LD_VAR 0 4
26433: PUSH
26434: LD_VAR 0 5
26438: DIFF
26439: ST_TO_ADDR
26440: GO 26399
26442: POP
26443: POP
// end ;
26444: LD_VAR 0 4
26448: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26449: LD_INT 0
26451: PPUSH
26452: PPUSH
26453: PPUSH
// result := true ;
26454: LD_ADDR_VAR 0 3
26458: PUSH
26459: LD_INT 1
26461: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26462: LD_ADDR_VAR 0 5
26466: PUSH
26467: LD_VAR 0 2
26471: PPUSH
26472: CALL_OW 480
26476: ST_TO_ADDR
// if not tmp then
26477: LD_VAR 0 5
26481: NOT
26482: IFFALSE 26486
// exit ;
26484: GO 26535
// for i in tmp do
26486: LD_ADDR_VAR 0 4
26490: PUSH
26491: LD_VAR 0 5
26495: PUSH
26496: FOR_IN
26497: IFFALSE 26533
// if GetTech ( i , side ) <> state_researched then
26499: LD_VAR 0 4
26503: PPUSH
26504: LD_VAR 0 1
26508: PPUSH
26509: CALL_OW 321
26513: PUSH
26514: LD_INT 2
26516: NONEQUAL
26517: IFFALSE 26531
// begin result := false ;
26519: LD_ADDR_VAR 0 3
26523: PUSH
26524: LD_INT 0
26526: ST_TO_ADDR
// exit ;
26527: POP
26528: POP
26529: GO 26535
// end ;
26531: GO 26496
26533: POP
26534: POP
// end ;
26535: LD_VAR 0 3
26539: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26540: LD_INT 0
26542: PPUSH
26543: PPUSH
26544: PPUSH
26545: PPUSH
26546: PPUSH
26547: PPUSH
26548: PPUSH
26549: PPUSH
26550: PPUSH
26551: PPUSH
26552: PPUSH
26553: PPUSH
26554: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26555: LD_VAR 0 1
26559: NOT
26560: PUSH
26561: LD_VAR 0 1
26565: PPUSH
26566: CALL_OW 257
26570: PUSH
26571: LD_INT 9
26573: NONEQUAL
26574: OR
26575: IFFALSE 26579
// exit ;
26577: GO 27152
// side := GetSide ( unit ) ;
26579: LD_ADDR_VAR 0 9
26583: PUSH
26584: LD_VAR 0 1
26588: PPUSH
26589: CALL_OW 255
26593: ST_TO_ADDR
// tech_space := tech_spacanom ;
26594: LD_ADDR_VAR 0 12
26598: PUSH
26599: LD_INT 29
26601: ST_TO_ADDR
// tech_time := tech_taurad ;
26602: LD_ADDR_VAR 0 13
26606: PUSH
26607: LD_INT 28
26609: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26610: LD_ADDR_VAR 0 11
26614: PUSH
26615: LD_VAR 0 1
26619: PPUSH
26620: CALL_OW 310
26624: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26625: LD_VAR 0 11
26629: PPUSH
26630: CALL_OW 247
26634: PUSH
26635: LD_INT 2
26637: EQUAL
26638: IFFALSE 26642
// exit ;
26640: GO 27152
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26642: LD_ADDR_VAR 0 8
26646: PUSH
26647: LD_INT 81
26649: PUSH
26650: LD_VAR 0 9
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 3
26661: PUSH
26662: LD_INT 21
26664: PUSH
26665: LD_INT 3
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PPUSH
26680: CALL_OW 69
26684: ST_TO_ADDR
// if not tmp then
26685: LD_VAR 0 8
26689: NOT
26690: IFFALSE 26694
// exit ;
26692: GO 27152
// if in_unit then
26694: LD_VAR 0 11
26698: IFFALSE 26722
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26700: LD_ADDR_VAR 0 10
26704: PUSH
26705: LD_VAR 0 8
26709: PPUSH
26710: LD_VAR 0 11
26714: PPUSH
26715: CALL_OW 74
26719: ST_TO_ADDR
26720: GO 26742
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26722: LD_ADDR_VAR 0 10
26726: PUSH
26727: LD_VAR 0 8
26731: PPUSH
26732: LD_VAR 0 1
26736: PPUSH
26737: CALL_OW 74
26741: ST_TO_ADDR
// if not enemy then
26742: LD_VAR 0 10
26746: NOT
26747: IFFALSE 26751
// exit ;
26749: GO 27152
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26751: LD_VAR 0 11
26755: PUSH
26756: LD_VAR 0 11
26760: PPUSH
26761: LD_VAR 0 10
26765: PPUSH
26766: CALL_OW 296
26770: PUSH
26771: LD_INT 13
26773: GREATER
26774: AND
26775: PUSH
26776: LD_VAR 0 1
26780: PPUSH
26781: LD_VAR 0 10
26785: PPUSH
26786: CALL_OW 296
26790: PUSH
26791: LD_INT 12
26793: GREATER
26794: OR
26795: IFFALSE 26799
// exit ;
26797: GO 27152
// missile := [ 1 ] ;
26799: LD_ADDR_VAR 0 14
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: EMPTY
26808: LIST
26809: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26810: LD_VAR 0 9
26814: PPUSH
26815: LD_VAR 0 12
26819: PPUSH
26820: CALL_OW 325
26824: IFFALSE 26853
// missile := Replace ( missile , missile + 1 , 2 ) ;
26826: LD_ADDR_VAR 0 14
26830: PUSH
26831: LD_VAR 0 14
26835: PPUSH
26836: LD_VAR 0 14
26840: PUSH
26841: LD_INT 1
26843: PLUS
26844: PPUSH
26845: LD_INT 2
26847: PPUSH
26848: CALL_OW 1
26852: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26853: LD_VAR 0 9
26857: PPUSH
26858: LD_VAR 0 13
26862: PPUSH
26863: CALL_OW 325
26867: PUSH
26868: LD_VAR 0 10
26872: PPUSH
26873: CALL_OW 255
26877: PPUSH
26878: LD_VAR 0 13
26882: PPUSH
26883: CALL_OW 325
26887: NOT
26888: AND
26889: IFFALSE 26918
// missile := Replace ( missile , missile + 1 , 3 ) ;
26891: LD_ADDR_VAR 0 14
26895: PUSH
26896: LD_VAR 0 14
26900: PPUSH
26901: LD_VAR 0 14
26905: PUSH
26906: LD_INT 1
26908: PLUS
26909: PPUSH
26910: LD_INT 3
26912: PPUSH
26913: CALL_OW 1
26917: ST_TO_ADDR
// if missile < 2 then
26918: LD_VAR 0 14
26922: PUSH
26923: LD_INT 2
26925: LESS
26926: IFFALSE 26930
// exit ;
26928: GO 27152
// x := GetX ( enemy ) ;
26930: LD_ADDR_VAR 0 4
26934: PUSH
26935: LD_VAR 0 10
26939: PPUSH
26940: CALL_OW 250
26944: ST_TO_ADDR
// y := GetY ( enemy ) ;
26945: LD_ADDR_VAR 0 5
26949: PUSH
26950: LD_VAR 0 10
26954: PPUSH
26955: CALL_OW 251
26959: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26960: LD_ADDR_VAR 0 6
26964: PUSH
26965: LD_VAR 0 4
26969: PUSH
26970: LD_INT 1
26972: NEG
26973: PPUSH
26974: LD_INT 1
26976: PPUSH
26977: CALL_OW 12
26981: PLUS
26982: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26983: LD_ADDR_VAR 0 7
26987: PUSH
26988: LD_VAR 0 5
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PPUSH
26997: LD_INT 1
26999: PPUSH
27000: CALL_OW 12
27004: PLUS
27005: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27006: LD_VAR 0 6
27010: PPUSH
27011: LD_VAR 0 7
27015: PPUSH
27016: CALL_OW 488
27020: NOT
27021: IFFALSE 27043
// begin _x := x ;
27023: LD_ADDR_VAR 0 6
27027: PUSH
27028: LD_VAR 0 4
27032: ST_TO_ADDR
// _y := y ;
27033: LD_ADDR_VAR 0 7
27037: PUSH
27038: LD_VAR 0 5
27042: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27043: LD_ADDR_VAR 0 3
27047: PUSH
27048: LD_INT 1
27050: PPUSH
27051: LD_VAR 0 14
27055: PPUSH
27056: CALL_OW 12
27060: ST_TO_ADDR
// case i of 1 :
27061: LD_VAR 0 3
27065: PUSH
27066: LD_INT 1
27068: DOUBLE
27069: EQUAL
27070: IFTRUE 27074
27072: GO 27091
27074: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27075: LD_VAR 0 1
27079: PPUSH
27080: LD_VAR 0 10
27084: PPUSH
27085: CALL_OW 115
27089: GO 27152
27091: LD_INT 2
27093: DOUBLE
27094: EQUAL
27095: IFTRUE 27099
27097: GO 27121
27099: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27100: LD_VAR 0 1
27104: PPUSH
27105: LD_VAR 0 6
27109: PPUSH
27110: LD_VAR 0 7
27114: PPUSH
27115: CALL_OW 153
27119: GO 27152
27121: LD_INT 3
27123: DOUBLE
27124: EQUAL
27125: IFTRUE 27129
27127: GO 27151
27129: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27130: LD_VAR 0 1
27134: PPUSH
27135: LD_VAR 0 6
27139: PPUSH
27140: LD_VAR 0 7
27144: PPUSH
27145: CALL_OW 154
27149: GO 27152
27151: POP
// end ;
27152: LD_VAR 0 2
27156: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27157: LD_INT 0
27159: PPUSH
27160: PPUSH
27161: PPUSH
27162: PPUSH
27163: PPUSH
27164: PPUSH
// if not unit or not building then
27165: LD_VAR 0 1
27169: NOT
27170: PUSH
27171: LD_VAR 0 2
27175: NOT
27176: OR
27177: IFFALSE 27181
// exit ;
27179: GO 27339
// x := GetX ( building ) ;
27181: LD_ADDR_VAR 0 5
27185: PUSH
27186: LD_VAR 0 2
27190: PPUSH
27191: CALL_OW 250
27195: ST_TO_ADDR
// y := GetY ( building ) ;
27196: LD_ADDR_VAR 0 6
27200: PUSH
27201: LD_VAR 0 2
27205: PPUSH
27206: CALL_OW 251
27210: ST_TO_ADDR
// for i = 0 to 5 do
27211: LD_ADDR_VAR 0 4
27215: PUSH
27216: DOUBLE
27217: LD_INT 0
27219: DEC
27220: ST_TO_ADDR
27221: LD_INT 5
27223: PUSH
27224: FOR_TO
27225: IFFALSE 27337
// begin _x := ShiftX ( x , i , 3 ) ;
27227: LD_ADDR_VAR 0 7
27231: PUSH
27232: LD_VAR 0 5
27236: PPUSH
27237: LD_VAR 0 4
27241: PPUSH
27242: LD_INT 3
27244: PPUSH
27245: CALL_OW 272
27249: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27250: LD_ADDR_VAR 0 8
27254: PUSH
27255: LD_VAR 0 6
27259: PPUSH
27260: LD_VAR 0 4
27264: PPUSH
27265: LD_INT 3
27267: PPUSH
27268: CALL_OW 273
27272: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27273: LD_VAR 0 7
27277: PPUSH
27278: LD_VAR 0 8
27282: PPUSH
27283: CALL_OW 488
27287: NOT
27288: IFFALSE 27292
// continue ;
27290: GO 27224
// if HexInfo ( _x , _y ) = 0 then
27292: LD_VAR 0 7
27296: PPUSH
27297: LD_VAR 0 8
27301: PPUSH
27302: CALL_OW 428
27306: PUSH
27307: LD_INT 0
27309: EQUAL
27310: IFFALSE 27335
// begin ComMoveXY ( unit , _x , _y ) ;
27312: LD_VAR 0 1
27316: PPUSH
27317: LD_VAR 0 7
27321: PPUSH
27322: LD_VAR 0 8
27326: PPUSH
27327: CALL_OW 111
// exit ;
27331: POP
27332: POP
27333: GO 27339
// end ; end ;
27335: GO 27224
27337: POP
27338: POP
// end ;
27339: LD_VAR 0 3
27343: RET
// export function ScanBase ( side , base_area ) ; begin
27344: LD_INT 0
27346: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27347: LD_ADDR_VAR 0 3
27351: PUSH
27352: LD_VAR 0 2
27356: PPUSH
27357: LD_INT 81
27359: PUSH
27360: LD_VAR 0 1
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PPUSH
27369: CALL_OW 70
27373: ST_TO_ADDR
// end ;
27374: LD_VAR 0 3
27378: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27379: LD_INT 0
27381: PPUSH
27382: PPUSH
27383: PPUSH
27384: PPUSH
// result := false ;
27385: LD_ADDR_VAR 0 2
27389: PUSH
27390: LD_INT 0
27392: ST_TO_ADDR
// side := GetSide ( unit ) ;
27393: LD_ADDR_VAR 0 3
27397: PUSH
27398: LD_VAR 0 1
27402: PPUSH
27403: CALL_OW 255
27407: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27408: LD_ADDR_VAR 0 4
27412: PUSH
27413: LD_VAR 0 1
27417: PPUSH
27418: CALL_OW 248
27422: ST_TO_ADDR
// case nat of 1 :
27423: LD_VAR 0 4
27427: PUSH
27428: LD_INT 1
27430: DOUBLE
27431: EQUAL
27432: IFTRUE 27436
27434: GO 27447
27436: POP
// tech := tech_lassight ; 2 :
27437: LD_ADDR_VAR 0 5
27441: PUSH
27442: LD_INT 12
27444: ST_TO_ADDR
27445: GO 27486
27447: LD_INT 2
27449: DOUBLE
27450: EQUAL
27451: IFTRUE 27455
27453: GO 27466
27455: POP
// tech := tech_mortar ; 3 :
27456: LD_ADDR_VAR 0 5
27460: PUSH
27461: LD_INT 41
27463: ST_TO_ADDR
27464: GO 27486
27466: LD_INT 3
27468: DOUBLE
27469: EQUAL
27470: IFTRUE 27474
27472: GO 27485
27474: POP
// tech := tech_bazooka ; end ;
27475: LD_ADDR_VAR 0 5
27479: PUSH
27480: LD_INT 44
27482: ST_TO_ADDR
27483: GO 27486
27485: POP
// if Researched ( side , tech ) then
27486: LD_VAR 0 3
27490: PPUSH
27491: LD_VAR 0 5
27495: PPUSH
27496: CALL_OW 325
27500: IFFALSE 27527
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27502: LD_ADDR_VAR 0 2
27506: PUSH
27507: LD_INT 5
27509: PUSH
27510: LD_INT 8
27512: PUSH
27513: LD_INT 9
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: PUSH
27521: LD_VAR 0 4
27525: ARRAY
27526: ST_TO_ADDR
// end ;
27527: LD_VAR 0 2
27531: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27532: LD_INT 0
27534: PPUSH
27535: PPUSH
27536: PPUSH
// if not mines then
27537: LD_VAR 0 2
27541: NOT
27542: IFFALSE 27546
// exit ;
27544: GO 27690
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27546: LD_ADDR_VAR 0 5
27550: PUSH
27551: LD_INT 81
27553: PUSH
27554: LD_VAR 0 1
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 3
27565: PUSH
27566: LD_INT 21
27568: PUSH
27569: LD_INT 3
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PPUSH
27584: CALL_OW 69
27588: ST_TO_ADDR
// for i in mines do
27589: LD_ADDR_VAR 0 4
27593: PUSH
27594: LD_VAR 0 2
27598: PUSH
27599: FOR_IN
27600: IFFALSE 27688
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27602: LD_VAR 0 4
27606: PUSH
27607: LD_INT 1
27609: ARRAY
27610: PPUSH
27611: LD_VAR 0 4
27615: PUSH
27616: LD_INT 2
27618: ARRAY
27619: PPUSH
27620: CALL_OW 458
27624: NOT
27625: IFFALSE 27629
// continue ;
27627: GO 27599
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27629: LD_VAR 0 4
27633: PUSH
27634: LD_INT 1
27636: ARRAY
27637: PPUSH
27638: LD_VAR 0 4
27642: PUSH
27643: LD_INT 2
27645: ARRAY
27646: PPUSH
27647: CALL_OW 428
27651: PUSH
27652: LD_VAR 0 5
27656: IN
27657: IFFALSE 27686
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27659: LD_VAR 0 4
27663: PUSH
27664: LD_INT 1
27666: ARRAY
27667: PPUSH
27668: LD_VAR 0 4
27672: PUSH
27673: LD_INT 2
27675: ARRAY
27676: PPUSH
27677: LD_VAR 0 1
27681: PPUSH
27682: CALL_OW 456
// end ;
27686: GO 27599
27688: POP
27689: POP
// end ;
27690: LD_VAR 0 3
27694: RET
// export function Count ( array ) ; var i ; begin
27695: LD_INT 0
27697: PPUSH
27698: PPUSH
// result := 0 ;
27699: LD_ADDR_VAR 0 2
27703: PUSH
27704: LD_INT 0
27706: ST_TO_ADDR
// for i in array do
27707: LD_ADDR_VAR 0 3
27711: PUSH
27712: LD_VAR 0 1
27716: PUSH
27717: FOR_IN
27718: IFFALSE 27742
// if i then
27720: LD_VAR 0 3
27724: IFFALSE 27740
// result := result + 1 ;
27726: LD_ADDR_VAR 0 2
27730: PUSH
27731: LD_VAR 0 2
27735: PUSH
27736: LD_INT 1
27738: PLUS
27739: ST_TO_ADDR
27740: GO 27717
27742: POP
27743: POP
// end ;
27744: LD_VAR 0 2
27748: RET
// export function IsEmpty ( building ) ; begin
27749: LD_INT 0
27751: PPUSH
// if not building then
27752: LD_VAR 0 1
27756: NOT
27757: IFFALSE 27761
// exit ;
27759: GO 27804
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27761: LD_ADDR_VAR 0 2
27765: PUSH
27766: LD_VAR 0 1
27770: PUSH
27771: LD_INT 22
27773: PUSH
27774: LD_VAR 0 1
27778: PPUSH
27779: CALL_OW 255
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 58
27790: PUSH
27791: EMPTY
27792: LIST
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PPUSH
27798: CALL_OW 69
27802: IN
27803: ST_TO_ADDR
// end ;
27804: LD_VAR 0 2
27808: RET
// export function IsNotFull ( building ) ; var places ; begin
27809: LD_INT 0
27811: PPUSH
27812: PPUSH
// if not building then
27813: LD_VAR 0 1
27817: NOT
27818: IFFALSE 27822
// exit ;
27820: GO 27993
// result := false ;
27822: LD_ADDR_VAR 0 2
27826: PUSH
27827: LD_INT 0
27829: ST_TO_ADDR
// places := 0 ;
27830: LD_ADDR_VAR 0 3
27834: PUSH
27835: LD_INT 0
27837: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27838: LD_VAR 0 1
27842: PPUSH
27843: CALL_OW 266
27847: PUSH
27848: LD_INT 0
27850: DOUBLE
27851: EQUAL
27852: IFTRUE 27910
27854: LD_INT 1
27856: DOUBLE
27857: EQUAL
27858: IFTRUE 27910
27860: LD_INT 6
27862: DOUBLE
27863: EQUAL
27864: IFTRUE 27910
27866: LD_INT 7
27868: DOUBLE
27869: EQUAL
27870: IFTRUE 27910
27872: LD_INT 8
27874: DOUBLE
27875: EQUAL
27876: IFTRUE 27910
27878: LD_INT 4
27880: DOUBLE
27881: EQUAL
27882: IFTRUE 27910
27884: LD_INT 5
27886: DOUBLE
27887: EQUAL
27888: IFTRUE 27910
27890: LD_INT 2
27892: DOUBLE
27893: EQUAL
27894: IFTRUE 27910
27896: LD_INT 3
27898: DOUBLE
27899: EQUAL
27900: IFTRUE 27910
27902: LD_INT 35
27904: DOUBLE
27905: EQUAL
27906: IFTRUE 27910
27908: GO 27921
27910: POP
// places := 6 ; b_bunker , b_breastwork :
27911: LD_ADDR_VAR 0 3
27915: PUSH
27916: LD_INT 6
27918: ST_TO_ADDR
27919: GO 27966
27921: LD_INT 32
27923: DOUBLE
27924: EQUAL
27925: IFTRUE 27935
27927: LD_INT 31
27929: DOUBLE
27930: EQUAL
27931: IFTRUE 27935
27933: GO 27946
27935: POP
// places := 1 ; b_control_tower :
27936: LD_ADDR_VAR 0 3
27940: PUSH
27941: LD_INT 1
27943: ST_TO_ADDR
27944: GO 27966
27946: LD_INT 36
27948: DOUBLE
27949: EQUAL
27950: IFTRUE 27954
27952: GO 27965
27954: POP
// places := 3 ; end ;
27955: LD_ADDR_VAR 0 3
27959: PUSH
27960: LD_INT 3
27962: ST_TO_ADDR
27963: GO 27966
27965: POP
// if places then
27966: LD_VAR 0 3
27970: IFFALSE 27993
// result := UnitsInside ( building ) < places ;
27972: LD_ADDR_VAR 0 2
27976: PUSH
27977: LD_VAR 0 1
27981: PPUSH
27982: CALL_OW 313
27986: PUSH
27987: LD_VAR 0 3
27991: LESS
27992: ST_TO_ADDR
// end ;
27993: LD_VAR 0 2
27997: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27998: LD_INT 0
28000: PPUSH
28001: PPUSH
28002: PPUSH
28003: PPUSH
// tmp := [ ] ;
28004: LD_ADDR_VAR 0 3
28008: PUSH
28009: EMPTY
28010: ST_TO_ADDR
// list := [ ] ;
28011: LD_ADDR_VAR 0 5
28015: PUSH
28016: EMPTY
28017: ST_TO_ADDR
// for i = 16 to 25 do
28018: LD_ADDR_VAR 0 4
28022: PUSH
28023: DOUBLE
28024: LD_INT 16
28026: DEC
28027: ST_TO_ADDR
28028: LD_INT 25
28030: PUSH
28031: FOR_TO
28032: IFFALSE 28105
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28034: LD_ADDR_VAR 0 3
28038: PUSH
28039: LD_VAR 0 3
28043: PUSH
28044: LD_INT 22
28046: PUSH
28047: LD_VAR 0 1
28051: PPUSH
28052: CALL_OW 255
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 91
28063: PUSH
28064: LD_VAR 0 1
28068: PUSH
28069: LD_INT 6
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 30
28079: PUSH
28080: LD_VAR 0 4
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: PUSH
28094: EMPTY
28095: LIST
28096: PPUSH
28097: CALL_OW 69
28101: ADD
28102: ST_TO_ADDR
28103: GO 28031
28105: POP
28106: POP
// for i = 1 to tmp do
28107: LD_ADDR_VAR 0 4
28111: PUSH
28112: DOUBLE
28113: LD_INT 1
28115: DEC
28116: ST_TO_ADDR
28117: LD_VAR 0 3
28121: PUSH
28122: FOR_TO
28123: IFFALSE 28211
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28125: LD_ADDR_VAR 0 5
28129: PUSH
28130: LD_VAR 0 5
28134: PUSH
28135: LD_VAR 0 3
28139: PUSH
28140: LD_VAR 0 4
28144: ARRAY
28145: PPUSH
28146: CALL_OW 266
28150: PUSH
28151: LD_VAR 0 3
28155: PUSH
28156: LD_VAR 0 4
28160: ARRAY
28161: PPUSH
28162: CALL_OW 250
28166: PUSH
28167: LD_VAR 0 3
28171: PUSH
28172: LD_VAR 0 4
28176: ARRAY
28177: PPUSH
28178: CALL_OW 251
28182: PUSH
28183: LD_VAR 0 3
28187: PUSH
28188: LD_VAR 0 4
28192: ARRAY
28193: PPUSH
28194: CALL_OW 254
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: PUSH
28205: EMPTY
28206: LIST
28207: ADD
28208: ST_TO_ADDR
28209: GO 28122
28211: POP
28212: POP
// result := list ;
28213: LD_ADDR_VAR 0 2
28217: PUSH
28218: LD_VAR 0 5
28222: ST_TO_ADDR
// end ;
28223: LD_VAR 0 2
28227: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28228: LD_INT 0
28230: PPUSH
28231: PPUSH
28232: PPUSH
28233: PPUSH
28234: PPUSH
28235: PPUSH
28236: PPUSH
// if not factory then
28237: LD_VAR 0 1
28241: NOT
28242: IFFALSE 28246
// exit ;
28244: GO 28839
// if control = control_apeman then
28246: LD_VAR 0 4
28250: PUSH
28251: LD_INT 5
28253: EQUAL
28254: IFFALSE 28363
// begin tmp := UnitsInside ( factory ) ;
28256: LD_ADDR_VAR 0 8
28260: PUSH
28261: LD_VAR 0 1
28265: PPUSH
28266: CALL_OW 313
28270: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28271: LD_VAR 0 8
28275: PPUSH
28276: LD_INT 25
28278: PUSH
28279: LD_INT 12
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PPUSH
28286: CALL_OW 72
28290: NOT
28291: IFFALSE 28301
// control := control_manual ;
28293: LD_ADDR_VAR 0 4
28297: PUSH
28298: LD_INT 1
28300: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28301: LD_ADDR_VAR 0 8
28305: PUSH
28306: LD_VAR 0 1
28310: PPUSH
28311: CALL 27998 0 1
28315: ST_TO_ADDR
// if tmp then
28316: LD_VAR 0 8
28320: IFFALSE 28363
// begin for i in tmp do
28322: LD_ADDR_VAR 0 7
28326: PUSH
28327: LD_VAR 0 8
28331: PUSH
28332: FOR_IN
28333: IFFALSE 28361
// if i [ 1 ] = b_ext_radio then
28335: LD_VAR 0 7
28339: PUSH
28340: LD_INT 1
28342: ARRAY
28343: PUSH
28344: LD_INT 22
28346: EQUAL
28347: IFFALSE 28359
// begin control := control_remote ;
28349: LD_ADDR_VAR 0 4
28353: PUSH
28354: LD_INT 2
28356: ST_TO_ADDR
// break ;
28357: GO 28361
// end ;
28359: GO 28332
28361: POP
28362: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28363: LD_VAR 0 1
28367: PPUSH
28368: LD_VAR 0 2
28372: PPUSH
28373: LD_VAR 0 3
28377: PPUSH
28378: LD_VAR 0 4
28382: PPUSH
28383: LD_VAR 0 5
28387: PPUSH
28388: CALL_OW 448
28392: IFFALSE 28427
// begin result := [ chassis , engine , control , weapon ] ;
28394: LD_ADDR_VAR 0 6
28398: PUSH
28399: LD_VAR 0 2
28403: PUSH
28404: LD_VAR 0 3
28408: PUSH
28409: LD_VAR 0 4
28413: PUSH
28414: LD_VAR 0 5
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: ST_TO_ADDR
// exit ;
28425: GO 28839
// end ; _chassis := AvailableChassisList ( factory ) ;
28427: LD_ADDR_VAR 0 9
28431: PUSH
28432: LD_VAR 0 1
28436: PPUSH
28437: CALL_OW 475
28441: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28442: LD_ADDR_VAR 0 11
28446: PUSH
28447: LD_VAR 0 1
28451: PPUSH
28452: CALL_OW 476
28456: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28457: LD_ADDR_VAR 0 12
28461: PUSH
28462: LD_VAR 0 1
28466: PPUSH
28467: CALL_OW 477
28471: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28472: LD_ADDR_VAR 0 10
28476: PUSH
28477: LD_VAR 0 1
28481: PPUSH
28482: CALL_OW 478
28486: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28487: LD_VAR 0 9
28491: NOT
28492: PUSH
28493: LD_VAR 0 11
28497: NOT
28498: OR
28499: PUSH
28500: LD_VAR 0 12
28504: NOT
28505: OR
28506: PUSH
28507: LD_VAR 0 10
28511: NOT
28512: OR
28513: IFFALSE 28548
// begin result := [ chassis , engine , control , weapon ] ;
28515: LD_ADDR_VAR 0 6
28519: PUSH
28520: LD_VAR 0 2
28524: PUSH
28525: LD_VAR 0 3
28529: PUSH
28530: LD_VAR 0 4
28534: PUSH
28535: LD_VAR 0 5
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: ST_TO_ADDR
// exit ;
28546: GO 28839
// end ; if not chassis in _chassis then
28548: LD_VAR 0 2
28552: PUSH
28553: LD_VAR 0 9
28557: IN
28558: NOT
28559: IFFALSE 28585
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28561: LD_ADDR_VAR 0 2
28565: PUSH
28566: LD_VAR 0 9
28570: PUSH
28571: LD_INT 1
28573: PPUSH
28574: LD_VAR 0 9
28578: PPUSH
28579: CALL_OW 12
28583: ARRAY
28584: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28585: LD_VAR 0 2
28589: PPUSH
28590: LD_VAR 0 3
28594: PPUSH
28595: CALL 28844 0 2
28599: NOT
28600: IFFALSE 28659
// repeat engine := _engine [ 1 ] ;
28602: LD_ADDR_VAR 0 3
28606: PUSH
28607: LD_VAR 0 11
28611: PUSH
28612: LD_INT 1
28614: ARRAY
28615: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28616: LD_ADDR_VAR 0 11
28620: PUSH
28621: LD_VAR 0 11
28625: PPUSH
28626: LD_INT 1
28628: PPUSH
28629: CALL_OW 3
28633: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28634: LD_VAR 0 2
28638: PPUSH
28639: LD_VAR 0 3
28643: PPUSH
28644: CALL 28844 0 2
28648: PUSH
28649: LD_VAR 0 11
28653: PUSH
28654: EMPTY
28655: EQUAL
28656: OR
28657: IFFALSE 28602
// if not control in _control then
28659: LD_VAR 0 4
28663: PUSH
28664: LD_VAR 0 12
28668: IN
28669: NOT
28670: IFFALSE 28696
// control := _control [ rand ( 1 , _control ) ] ;
28672: LD_ADDR_VAR 0 4
28676: PUSH
28677: LD_VAR 0 12
28681: PUSH
28682: LD_INT 1
28684: PPUSH
28685: LD_VAR 0 12
28689: PPUSH
28690: CALL_OW 12
28694: ARRAY
28695: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28696: LD_VAR 0 2
28700: PPUSH
28701: LD_VAR 0 5
28705: PPUSH
28706: CALL 29064 0 2
28710: NOT
28711: IFFALSE 28770
// repeat weapon := _weapon [ 1 ] ;
28713: LD_ADDR_VAR 0 5
28717: PUSH
28718: LD_VAR 0 10
28722: PUSH
28723: LD_INT 1
28725: ARRAY
28726: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28727: LD_ADDR_VAR 0 10
28731: PUSH
28732: LD_VAR 0 10
28736: PPUSH
28737: LD_INT 1
28739: PPUSH
28740: CALL_OW 3
28744: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28745: LD_VAR 0 2
28749: PPUSH
28750: LD_VAR 0 5
28754: PPUSH
28755: CALL 29064 0 2
28759: PUSH
28760: LD_VAR 0 10
28764: PUSH
28765: EMPTY
28766: EQUAL
28767: OR
28768: IFFALSE 28713
// result := [ ] ;
28770: LD_ADDR_VAR 0 6
28774: PUSH
28775: EMPTY
28776: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28777: LD_VAR 0 1
28781: PPUSH
28782: LD_VAR 0 2
28786: PPUSH
28787: LD_VAR 0 3
28791: PPUSH
28792: LD_VAR 0 4
28796: PPUSH
28797: LD_VAR 0 5
28801: PPUSH
28802: CALL_OW 448
28806: IFFALSE 28839
// result := [ chassis , engine , control , weapon ] ;
28808: LD_ADDR_VAR 0 6
28812: PUSH
28813: LD_VAR 0 2
28817: PUSH
28818: LD_VAR 0 3
28822: PUSH
28823: LD_VAR 0 4
28827: PUSH
28828: LD_VAR 0 5
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: ST_TO_ADDR
// end ;
28839: LD_VAR 0 6
28843: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28844: LD_INT 0
28846: PPUSH
// if not chassis or not engine then
28847: LD_VAR 0 1
28851: NOT
28852: PUSH
28853: LD_VAR 0 2
28857: NOT
28858: OR
28859: IFFALSE 28863
// exit ;
28861: GO 29059
// case engine of engine_solar :
28863: LD_VAR 0 2
28867: PUSH
28868: LD_INT 2
28870: DOUBLE
28871: EQUAL
28872: IFTRUE 28876
28874: GO 28914
28876: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28877: LD_ADDR_VAR 0 3
28881: PUSH
28882: LD_INT 11
28884: PUSH
28885: LD_INT 12
28887: PUSH
28888: LD_INT 13
28890: PUSH
28891: LD_INT 14
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: LD_INT 2
28899: PUSH
28900: LD_INT 3
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: ST_TO_ADDR
28912: GO 29043
28914: LD_INT 1
28916: DOUBLE
28917: EQUAL
28918: IFTRUE 28922
28920: GO 28984
28922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28923: LD_ADDR_VAR 0 3
28927: PUSH
28928: LD_INT 11
28930: PUSH
28931: LD_INT 12
28933: PUSH
28934: LD_INT 13
28936: PUSH
28937: LD_INT 14
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: LD_INT 2
28945: PUSH
28946: LD_INT 3
28948: PUSH
28949: LD_INT 4
28951: PUSH
28952: LD_INT 5
28954: PUSH
28955: LD_INT 21
28957: PUSH
28958: LD_INT 23
28960: PUSH
28961: LD_INT 22
28963: PUSH
28964: LD_INT 24
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: ST_TO_ADDR
28982: GO 29043
28984: LD_INT 3
28986: DOUBLE
28987: EQUAL
28988: IFTRUE 28992
28990: GO 29042
28992: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28993: LD_ADDR_VAR 0 3
28997: PUSH
28998: LD_INT 13
29000: PUSH
29001: LD_INT 14
29003: PUSH
29004: LD_INT 2
29006: PUSH
29007: LD_INT 3
29009: PUSH
29010: LD_INT 4
29012: PUSH
29013: LD_INT 5
29015: PUSH
29016: LD_INT 21
29018: PUSH
29019: LD_INT 22
29021: PUSH
29022: LD_INT 23
29024: PUSH
29025: LD_INT 24
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: ST_TO_ADDR
29040: GO 29043
29042: POP
// result := ( chassis in result ) ;
29043: LD_ADDR_VAR 0 3
29047: PUSH
29048: LD_VAR 0 1
29052: PUSH
29053: LD_VAR 0 3
29057: IN
29058: ST_TO_ADDR
// end ;
29059: LD_VAR 0 3
29063: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29064: LD_INT 0
29066: PPUSH
// if not chassis or not weapon then
29067: LD_VAR 0 1
29071: NOT
29072: PUSH
29073: LD_VAR 0 2
29077: NOT
29078: OR
29079: IFFALSE 29083
// exit ;
29081: GO 30143
// case weapon of us_machine_gun :
29083: LD_VAR 0 2
29087: PUSH
29088: LD_INT 2
29090: DOUBLE
29091: EQUAL
29092: IFTRUE 29096
29094: GO 29126
29096: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29097: LD_ADDR_VAR 0 3
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: LD_INT 2
29107: PUSH
29108: LD_INT 3
29110: PUSH
29111: LD_INT 4
29113: PUSH
29114: LD_INT 5
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: ST_TO_ADDR
29124: GO 30127
29126: LD_INT 3
29128: DOUBLE
29129: EQUAL
29130: IFTRUE 29134
29132: GO 29164
29134: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29135: LD_ADDR_VAR 0 3
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: LD_INT 3
29148: PUSH
29149: LD_INT 4
29151: PUSH
29152: LD_INT 5
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: ST_TO_ADDR
29162: GO 30127
29164: LD_INT 11
29166: DOUBLE
29167: EQUAL
29168: IFTRUE 29172
29170: GO 29202
29172: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29173: LD_ADDR_VAR 0 3
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: LD_INT 2
29183: PUSH
29184: LD_INT 3
29186: PUSH
29187: LD_INT 4
29189: PUSH
29190: LD_INT 5
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: ST_TO_ADDR
29200: GO 30127
29202: LD_INT 4
29204: DOUBLE
29205: EQUAL
29206: IFTRUE 29210
29208: GO 29236
29210: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29211: LD_ADDR_VAR 0 3
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 3
29221: PUSH
29222: LD_INT 4
29224: PUSH
29225: LD_INT 5
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: ST_TO_ADDR
29234: GO 30127
29236: LD_INT 5
29238: DOUBLE
29239: EQUAL
29240: IFTRUE 29244
29242: GO 29270
29244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29245: LD_ADDR_VAR 0 3
29249: PUSH
29250: LD_INT 2
29252: PUSH
29253: LD_INT 3
29255: PUSH
29256: LD_INT 4
29258: PUSH
29259: LD_INT 5
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: ST_TO_ADDR
29268: GO 30127
29270: LD_INT 9
29272: DOUBLE
29273: EQUAL
29274: IFTRUE 29278
29276: GO 29304
29278: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29279: LD_ADDR_VAR 0 3
29283: PUSH
29284: LD_INT 2
29286: PUSH
29287: LD_INT 3
29289: PUSH
29290: LD_INT 4
29292: PUSH
29293: LD_INT 5
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: ST_TO_ADDR
29302: GO 30127
29304: LD_INT 7
29306: DOUBLE
29307: EQUAL
29308: IFTRUE 29312
29310: GO 29338
29312: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29313: LD_ADDR_VAR 0 3
29317: PUSH
29318: LD_INT 2
29320: PUSH
29321: LD_INT 3
29323: PUSH
29324: LD_INT 4
29326: PUSH
29327: LD_INT 5
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: ST_TO_ADDR
29336: GO 30127
29338: LD_INT 12
29340: DOUBLE
29341: EQUAL
29342: IFTRUE 29346
29344: GO 29372
29346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29347: LD_ADDR_VAR 0 3
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: LD_INT 4
29360: PUSH
29361: LD_INT 5
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: ST_TO_ADDR
29370: GO 30127
29372: LD_INT 13
29374: DOUBLE
29375: EQUAL
29376: IFTRUE 29380
29378: GO 29406
29380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29381: LD_ADDR_VAR 0 3
29385: PUSH
29386: LD_INT 2
29388: PUSH
29389: LD_INT 3
29391: PUSH
29392: LD_INT 4
29394: PUSH
29395: LD_INT 5
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: ST_TO_ADDR
29404: GO 30127
29406: LD_INT 14
29408: DOUBLE
29409: EQUAL
29410: IFTRUE 29414
29412: GO 29432
29414: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29415: LD_ADDR_VAR 0 3
29419: PUSH
29420: LD_INT 4
29422: PUSH
29423: LD_INT 5
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: ST_TO_ADDR
29430: GO 30127
29432: LD_INT 6
29434: DOUBLE
29435: EQUAL
29436: IFTRUE 29440
29438: GO 29458
29440: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29441: LD_ADDR_VAR 0 3
29445: PUSH
29446: LD_INT 4
29448: PUSH
29449: LD_INT 5
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: ST_TO_ADDR
29456: GO 30127
29458: LD_INT 10
29460: DOUBLE
29461: EQUAL
29462: IFTRUE 29466
29464: GO 29484
29466: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29467: LD_ADDR_VAR 0 3
29471: PUSH
29472: LD_INT 4
29474: PUSH
29475: LD_INT 5
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: ST_TO_ADDR
29482: GO 30127
29484: LD_INT 22
29486: DOUBLE
29487: EQUAL
29488: IFTRUE 29492
29490: GO 29518
29492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29493: LD_ADDR_VAR 0 3
29497: PUSH
29498: LD_INT 11
29500: PUSH
29501: LD_INT 12
29503: PUSH
29504: LD_INT 13
29506: PUSH
29507: LD_INT 14
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: ST_TO_ADDR
29516: GO 30127
29518: LD_INT 23
29520: DOUBLE
29521: EQUAL
29522: IFTRUE 29526
29524: GO 29552
29526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29527: LD_ADDR_VAR 0 3
29531: PUSH
29532: LD_INT 11
29534: PUSH
29535: LD_INT 12
29537: PUSH
29538: LD_INT 13
29540: PUSH
29541: LD_INT 14
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: ST_TO_ADDR
29550: GO 30127
29552: LD_INT 24
29554: DOUBLE
29555: EQUAL
29556: IFTRUE 29560
29558: GO 29586
29560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29561: LD_ADDR_VAR 0 3
29565: PUSH
29566: LD_INT 11
29568: PUSH
29569: LD_INT 12
29571: PUSH
29572: LD_INT 13
29574: PUSH
29575: LD_INT 14
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: ST_TO_ADDR
29584: GO 30127
29586: LD_INT 30
29588: DOUBLE
29589: EQUAL
29590: IFTRUE 29594
29592: GO 29620
29594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29595: LD_ADDR_VAR 0 3
29599: PUSH
29600: LD_INT 11
29602: PUSH
29603: LD_INT 12
29605: PUSH
29606: LD_INT 13
29608: PUSH
29609: LD_INT 14
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: ST_TO_ADDR
29618: GO 30127
29620: LD_INT 25
29622: DOUBLE
29623: EQUAL
29624: IFTRUE 29628
29626: GO 29646
29628: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29629: LD_ADDR_VAR 0 3
29633: PUSH
29634: LD_INT 13
29636: PUSH
29637: LD_INT 14
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: ST_TO_ADDR
29644: GO 30127
29646: LD_INT 27
29648: DOUBLE
29649: EQUAL
29650: IFTRUE 29654
29652: GO 29672
29654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29655: LD_ADDR_VAR 0 3
29659: PUSH
29660: LD_INT 13
29662: PUSH
29663: LD_INT 14
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: ST_TO_ADDR
29670: GO 30127
29672: LD_INT 92
29674: DOUBLE
29675: EQUAL
29676: IFTRUE 29680
29678: GO 29706
29680: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29681: LD_ADDR_VAR 0 3
29685: PUSH
29686: LD_INT 11
29688: PUSH
29689: LD_INT 12
29691: PUSH
29692: LD_INT 13
29694: PUSH
29695: LD_INT 14
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: ST_TO_ADDR
29704: GO 30127
29706: LD_INT 28
29708: DOUBLE
29709: EQUAL
29710: IFTRUE 29714
29712: GO 29732
29714: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29715: LD_ADDR_VAR 0 3
29719: PUSH
29720: LD_INT 13
29722: PUSH
29723: LD_INT 14
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: ST_TO_ADDR
29730: GO 30127
29732: LD_INT 29
29734: DOUBLE
29735: EQUAL
29736: IFTRUE 29740
29738: GO 29758
29740: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_INT 13
29748: PUSH
29749: LD_INT 14
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: ST_TO_ADDR
29756: GO 30127
29758: LD_INT 31
29760: DOUBLE
29761: EQUAL
29762: IFTRUE 29766
29764: GO 29784
29766: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29767: LD_ADDR_VAR 0 3
29771: PUSH
29772: LD_INT 13
29774: PUSH
29775: LD_INT 14
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: ST_TO_ADDR
29782: GO 30127
29784: LD_INT 26
29786: DOUBLE
29787: EQUAL
29788: IFTRUE 29792
29790: GO 29810
29792: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29793: LD_ADDR_VAR 0 3
29797: PUSH
29798: LD_INT 13
29800: PUSH
29801: LD_INT 14
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: ST_TO_ADDR
29808: GO 30127
29810: LD_INT 42
29812: DOUBLE
29813: EQUAL
29814: IFTRUE 29818
29816: GO 29844
29818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29819: LD_ADDR_VAR 0 3
29823: PUSH
29824: LD_INT 21
29826: PUSH
29827: LD_INT 22
29829: PUSH
29830: LD_INT 23
29832: PUSH
29833: LD_INT 24
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: ST_TO_ADDR
29842: GO 30127
29844: LD_INT 43
29846: DOUBLE
29847: EQUAL
29848: IFTRUE 29852
29850: GO 29878
29852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29853: LD_ADDR_VAR 0 3
29857: PUSH
29858: LD_INT 21
29860: PUSH
29861: LD_INT 22
29863: PUSH
29864: LD_INT 23
29866: PUSH
29867: LD_INT 24
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: ST_TO_ADDR
29876: GO 30127
29878: LD_INT 44
29880: DOUBLE
29881: EQUAL
29882: IFTRUE 29886
29884: GO 29912
29886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29887: LD_ADDR_VAR 0 3
29891: PUSH
29892: LD_INT 21
29894: PUSH
29895: LD_INT 22
29897: PUSH
29898: LD_INT 23
29900: PUSH
29901: LD_INT 24
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: ST_TO_ADDR
29910: GO 30127
29912: LD_INT 45
29914: DOUBLE
29915: EQUAL
29916: IFTRUE 29920
29918: GO 29946
29920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29921: LD_ADDR_VAR 0 3
29925: PUSH
29926: LD_INT 21
29928: PUSH
29929: LD_INT 22
29931: PUSH
29932: LD_INT 23
29934: PUSH
29935: LD_INT 24
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: ST_TO_ADDR
29944: GO 30127
29946: LD_INT 49
29948: DOUBLE
29949: EQUAL
29950: IFTRUE 29954
29952: GO 29980
29954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29955: LD_ADDR_VAR 0 3
29959: PUSH
29960: LD_INT 21
29962: PUSH
29963: LD_INT 22
29965: PUSH
29966: LD_INT 23
29968: PUSH
29969: LD_INT 24
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: ST_TO_ADDR
29978: GO 30127
29980: LD_INT 51
29982: DOUBLE
29983: EQUAL
29984: IFTRUE 29988
29986: GO 30014
29988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29989: LD_ADDR_VAR 0 3
29993: PUSH
29994: LD_INT 21
29996: PUSH
29997: LD_INT 22
29999: PUSH
30000: LD_INT 23
30002: PUSH
30003: LD_INT 24
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: ST_TO_ADDR
30012: GO 30127
30014: LD_INT 52
30016: DOUBLE
30017: EQUAL
30018: IFTRUE 30022
30020: GO 30048
30022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30023: LD_ADDR_VAR 0 3
30027: PUSH
30028: LD_INT 21
30030: PUSH
30031: LD_INT 22
30033: PUSH
30034: LD_INT 23
30036: PUSH
30037: LD_INT 24
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: ST_TO_ADDR
30046: GO 30127
30048: LD_INT 53
30050: DOUBLE
30051: EQUAL
30052: IFTRUE 30056
30054: GO 30074
30056: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30057: LD_ADDR_VAR 0 3
30061: PUSH
30062: LD_INT 23
30064: PUSH
30065: LD_INT 24
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: ST_TO_ADDR
30072: GO 30127
30074: LD_INT 46
30076: DOUBLE
30077: EQUAL
30078: IFTRUE 30082
30080: GO 30100
30082: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30083: LD_ADDR_VAR 0 3
30087: PUSH
30088: LD_INT 23
30090: PUSH
30091: LD_INT 24
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: ST_TO_ADDR
30098: GO 30127
30100: LD_INT 47
30102: DOUBLE
30103: EQUAL
30104: IFTRUE 30108
30106: GO 30126
30108: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30109: LD_ADDR_VAR 0 3
30113: PUSH
30114: LD_INT 23
30116: PUSH
30117: LD_INT 24
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: ST_TO_ADDR
30124: GO 30127
30126: POP
// result := ( chassis in result ) ;
30127: LD_ADDR_VAR 0 3
30131: PUSH
30132: LD_VAR 0 1
30136: PUSH
30137: LD_VAR 0 3
30141: IN
30142: ST_TO_ADDR
// end ;
30143: LD_VAR 0 3
30147: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30148: LD_INT 0
30150: PPUSH
30151: PPUSH
30152: PPUSH
30153: PPUSH
30154: PPUSH
30155: PPUSH
30156: PPUSH
// result := array ;
30157: LD_ADDR_VAR 0 5
30161: PUSH
30162: LD_VAR 0 1
30166: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30167: LD_VAR 0 1
30171: NOT
30172: PUSH
30173: LD_VAR 0 2
30177: NOT
30178: OR
30179: PUSH
30180: LD_VAR 0 3
30184: NOT
30185: OR
30186: PUSH
30187: LD_VAR 0 2
30191: PUSH
30192: LD_VAR 0 1
30196: GREATER
30197: OR
30198: PUSH
30199: LD_VAR 0 3
30203: PUSH
30204: LD_VAR 0 1
30208: GREATER
30209: OR
30210: IFFALSE 30214
// exit ;
30212: GO 30510
// if direction then
30214: LD_VAR 0 4
30218: IFFALSE 30282
// begin d := 1 ;
30220: LD_ADDR_VAR 0 9
30224: PUSH
30225: LD_INT 1
30227: ST_TO_ADDR
// if i_from > i_to then
30228: LD_VAR 0 2
30232: PUSH
30233: LD_VAR 0 3
30237: GREATER
30238: IFFALSE 30264
// length := ( array - i_from ) + i_to else
30240: LD_ADDR_VAR 0 11
30244: PUSH
30245: LD_VAR 0 1
30249: PUSH
30250: LD_VAR 0 2
30254: MINUS
30255: PUSH
30256: LD_VAR 0 3
30260: PLUS
30261: ST_TO_ADDR
30262: GO 30280
// length := i_to - i_from ;
30264: LD_ADDR_VAR 0 11
30268: PUSH
30269: LD_VAR 0 3
30273: PUSH
30274: LD_VAR 0 2
30278: MINUS
30279: ST_TO_ADDR
// end else
30280: GO 30343
// begin d := - 1 ;
30282: LD_ADDR_VAR 0 9
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: ST_TO_ADDR
// if i_from > i_to then
30291: LD_VAR 0 2
30295: PUSH
30296: LD_VAR 0 3
30300: GREATER
30301: IFFALSE 30321
// length := i_from - i_to else
30303: LD_ADDR_VAR 0 11
30307: PUSH
30308: LD_VAR 0 2
30312: PUSH
30313: LD_VAR 0 3
30317: MINUS
30318: ST_TO_ADDR
30319: GO 30343
// length := ( array - i_to ) + i_from ;
30321: LD_ADDR_VAR 0 11
30325: PUSH
30326: LD_VAR 0 1
30330: PUSH
30331: LD_VAR 0 3
30335: MINUS
30336: PUSH
30337: LD_VAR 0 2
30341: PLUS
30342: ST_TO_ADDR
// end ; if not length then
30343: LD_VAR 0 11
30347: NOT
30348: IFFALSE 30352
// exit ;
30350: GO 30510
// tmp := array ;
30352: LD_ADDR_VAR 0 10
30356: PUSH
30357: LD_VAR 0 1
30361: ST_TO_ADDR
// for i = 1 to length do
30362: LD_ADDR_VAR 0 6
30366: PUSH
30367: DOUBLE
30368: LD_INT 1
30370: DEC
30371: ST_TO_ADDR
30372: LD_VAR 0 11
30376: PUSH
30377: FOR_TO
30378: IFFALSE 30498
// begin for j = 1 to array do
30380: LD_ADDR_VAR 0 7
30384: PUSH
30385: DOUBLE
30386: LD_INT 1
30388: DEC
30389: ST_TO_ADDR
30390: LD_VAR 0 1
30394: PUSH
30395: FOR_TO
30396: IFFALSE 30484
// begin k := j + d ;
30398: LD_ADDR_VAR 0 8
30402: PUSH
30403: LD_VAR 0 7
30407: PUSH
30408: LD_VAR 0 9
30412: PLUS
30413: ST_TO_ADDR
// if k > array then
30414: LD_VAR 0 8
30418: PUSH
30419: LD_VAR 0 1
30423: GREATER
30424: IFFALSE 30434
// k := 1 ;
30426: LD_ADDR_VAR 0 8
30430: PUSH
30431: LD_INT 1
30433: ST_TO_ADDR
// if not k then
30434: LD_VAR 0 8
30438: NOT
30439: IFFALSE 30451
// k := array ;
30441: LD_ADDR_VAR 0 8
30445: PUSH
30446: LD_VAR 0 1
30450: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30451: LD_ADDR_VAR 0 10
30455: PUSH
30456: LD_VAR 0 10
30460: PPUSH
30461: LD_VAR 0 8
30465: PPUSH
30466: LD_VAR 0 1
30470: PUSH
30471: LD_VAR 0 7
30475: ARRAY
30476: PPUSH
30477: CALL_OW 1
30481: ST_TO_ADDR
// end ;
30482: GO 30395
30484: POP
30485: POP
// array := tmp ;
30486: LD_ADDR_VAR 0 1
30490: PUSH
30491: LD_VAR 0 10
30495: ST_TO_ADDR
// end ;
30496: GO 30377
30498: POP
30499: POP
// result := array ;
30500: LD_ADDR_VAR 0 5
30504: PUSH
30505: LD_VAR 0 1
30509: ST_TO_ADDR
// end ;
30510: LD_VAR 0 5
30514: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30515: LD_INT 0
30517: PPUSH
30518: PPUSH
// result := 0 ;
30519: LD_ADDR_VAR 0 3
30523: PUSH
30524: LD_INT 0
30526: ST_TO_ADDR
// if not array or not value in array then
30527: LD_VAR 0 1
30531: NOT
30532: PUSH
30533: LD_VAR 0 2
30537: PUSH
30538: LD_VAR 0 1
30542: IN
30543: NOT
30544: OR
30545: IFFALSE 30549
// exit ;
30547: GO 30603
// for i = 1 to array do
30549: LD_ADDR_VAR 0 4
30553: PUSH
30554: DOUBLE
30555: LD_INT 1
30557: DEC
30558: ST_TO_ADDR
30559: LD_VAR 0 1
30563: PUSH
30564: FOR_TO
30565: IFFALSE 30601
// if value = array [ i ] then
30567: LD_VAR 0 2
30571: PUSH
30572: LD_VAR 0 1
30576: PUSH
30577: LD_VAR 0 4
30581: ARRAY
30582: EQUAL
30583: IFFALSE 30599
// begin result := i ;
30585: LD_ADDR_VAR 0 3
30589: PUSH
30590: LD_VAR 0 4
30594: ST_TO_ADDR
// exit ;
30595: POP
30596: POP
30597: GO 30603
// end ;
30599: GO 30564
30601: POP
30602: POP
// end ;
30603: LD_VAR 0 3
30607: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30608: LD_INT 0
30610: PPUSH
// vc_chassis := chassis ;
30611: LD_ADDR_OWVAR 37
30615: PUSH
30616: LD_VAR 0 1
30620: ST_TO_ADDR
// vc_engine := engine ;
30621: LD_ADDR_OWVAR 39
30625: PUSH
30626: LD_VAR 0 2
30630: ST_TO_ADDR
// vc_control := control ;
30631: LD_ADDR_OWVAR 38
30635: PUSH
30636: LD_VAR 0 3
30640: ST_TO_ADDR
// vc_weapon := weapon ;
30641: LD_ADDR_OWVAR 40
30645: PUSH
30646: LD_VAR 0 4
30650: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30651: LD_ADDR_OWVAR 41
30655: PUSH
30656: LD_VAR 0 5
30660: ST_TO_ADDR
// end ;
30661: LD_VAR 0 6
30665: RET
// export function WantPlant ( unit ) ; var task ; begin
30666: LD_INT 0
30668: PPUSH
30669: PPUSH
// result := false ;
30670: LD_ADDR_VAR 0 2
30674: PUSH
30675: LD_INT 0
30677: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30678: LD_ADDR_VAR 0 3
30682: PUSH
30683: LD_VAR 0 1
30687: PPUSH
30688: CALL_OW 437
30692: ST_TO_ADDR
// if task then
30693: LD_VAR 0 3
30697: IFFALSE 30725
// if task [ 1 ] [ 1 ] = p then
30699: LD_VAR 0 3
30703: PUSH
30704: LD_INT 1
30706: ARRAY
30707: PUSH
30708: LD_INT 1
30710: ARRAY
30711: PUSH
30712: LD_STRING p
30714: EQUAL
30715: IFFALSE 30725
// result := true ;
30717: LD_ADDR_VAR 0 2
30721: PUSH
30722: LD_INT 1
30724: ST_TO_ADDR
// end ;
30725: LD_VAR 0 2
30729: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30730: LD_INT 0
30732: PPUSH
30733: PPUSH
30734: PPUSH
30735: PPUSH
// if pos < 1 then
30736: LD_VAR 0 2
30740: PUSH
30741: LD_INT 1
30743: LESS
30744: IFFALSE 30748
// exit ;
30746: GO 31051
// if pos = 1 then
30748: LD_VAR 0 2
30752: PUSH
30753: LD_INT 1
30755: EQUAL
30756: IFFALSE 30789
// result := Replace ( arr , pos [ 1 ] , value ) else
30758: LD_ADDR_VAR 0 4
30762: PUSH
30763: LD_VAR 0 1
30767: PPUSH
30768: LD_VAR 0 2
30772: PUSH
30773: LD_INT 1
30775: ARRAY
30776: PPUSH
30777: LD_VAR 0 3
30781: PPUSH
30782: CALL_OW 1
30786: ST_TO_ADDR
30787: GO 31051
// begin tmp := arr ;
30789: LD_ADDR_VAR 0 6
30793: PUSH
30794: LD_VAR 0 1
30798: ST_TO_ADDR
// s_arr := [ tmp ] ;
30799: LD_ADDR_VAR 0 7
30803: PUSH
30804: LD_VAR 0 6
30808: PUSH
30809: EMPTY
30810: LIST
30811: ST_TO_ADDR
// for i = 1 to pos - 1 do
30812: LD_ADDR_VAR 0 5
30816: PUSH
30817: DOUBLE
30818: LD_INT 1
30820: DEC
30821: ST_TO_ADDR
30822: LD_VAR 0 2
30826: PUSH
30827: LD_INT 1
30829: MINUS
30830: PUSH
30831: FOR_TO
30832: IFFALSE 30877
// begin tmp := tmp [ pos [ i ] ] ;
30834: LD_ADDR_VAR 0 6
30838: PUSH
30839: LD_VAR 0 6
30843: PUSH
30844: LD_VAR 0 2
30848: PUSH
30849: LD_VAR 0 5
30853: ARRAY
30854: ARRAY
30855: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30856: LD_ADDR_VAR 0 7
30860: PUSH
30861: LD_VAR 0 7
30865: PUSH
30866: LD_VAR 0 6
30870: PUSH
30871: EMPTY
30872: LIST
30873: ADD
30874: ST_TO_ADDR
// end ;
30875: GO 30831
30877: POP
30878: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30879: LD_ADDR_VAR 0 6
30883: PUSH
30884: LD_VAR 0 6
30888: PPUSH
30889: LD_VAR 0 2
30893: PUSH
30894: LD_VAR 0 2
30898: ARRAY
30899: PPUSH
30900: LD_VAR 0 3
30904: PPUSH
30905: CALL_OW 1
30909: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30910: LD_ADDR_VAR 0 7
30914: PUSH
30915: LD_VAR 0 7
30919: PPUSH
30920: LD_VAR 0 7
30924: PPUSH
30925: LD_VAR 0 6
30929: PPUSH
30930: CALL_OW 1
30934: ST_TO_ADDR
// for i = s_arr downto 2 do
30935: LD_ADDR_VAR 0 5
30939: PUSH
30940: DOUBLE
30941: LD_VAR 0 7
30945: INC
30946: ST_TO_ADDR
30947: LD_INT 2
30949: PUSH
30950: FOR_DOWNTO
30951: IFFALSE 31035
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30953: LD_ADDR_VAR 0 6
30957: PUSH
30958: LD_VAR 0 7
30962: PUSH
30963: LD_VAR 0 5
30967: PUSH
30968: LD_INT 1
30970: MINUS
30971: ARRAY
30972: PPUSH
30973: LD_VAR 0 2
30977: PUSH
30978: LD_VAR 0 5
30982: PUSH
30983: LD_INT 1
30985: MINUS
30986: ARRAY
30987: PPUSH
30988: LD_VAR 0 7
30992: PUSH
30993: LD_VAR 0 5
30997: ARRAY
30998: PPUSH
30999: CALL_OW 1
31003: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31004: LD_ADDR_VAR 0 7
31008: PUSH
31009: LD_VAR 0 7
31013: PPUSH
31014: LD_VAR 0 5
31018: PUSH
31019: LD_INT 1
31021: MINUS
31022: PPUSH
31023: LD_VAR 0 6
31027: PPUSH
31028: CALL_OW 1
31032: ST_TO_ADDR
// end ;
31033: GO 30950
31035: POP
31036: POP
// result := s_arr [ 1 ] ;
31037: LD_ADDR_VAR 0 4
31041: PUSH
31042: LD_VAR 0 7
31046: PUSH
31047: LD_INT 1
31049: ARRAY
31050: ST_TO_ADDR
// end ; end ;
31051: LD_VAR 0 4
31055: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31056: LD_INT 0
31058: PPUSH
31059: PPUSH
// if not list then
31060: LD_VAR 0 1
31064: NOT
31065: IFFALSE 31069
// exit ;
31067: GO 31160
// i := list [ pos1 ] ;
31069: LD_ADDR_VAR 0 5
31073: PUSH
31074: LD_VAR 0 1
31078: PUSH
31079: LD_VAR 0 2
31083: ARRAY
31084: ST_TO_ADDR
// if not i then
31085: LD_VAR 0 5
31089: NOT
31090: IFFALSE 31094
// exit ;
31092: GO 31160
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31094: LD_ADDR_VAR 0 1
31098: PUSH
31099: LD_VAR 0 1
31103: PPUSH
31104: LD_VAR 0 2
31108: PPUSH
31109: LD_VAR 0 1
31113: PUSH
31114: LD_VAR 0 3
31118: ARRAY
31119: PPUSH
31120: CALL_OW 1
31124: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31125: LD_ADDR_VAR 0 1
31129: PUSH
31130: LD_VAR 0 1
31134: PPUSH
31135: LD_VAR 0 3
31139: PPUSH
31140: LD_VAR 0 5
31144: PPUSH
31145: CALL_OW 1
31149: ST_TO_ADDR
// result := list ;
31150: LD_ADDR_VAR 0 4
31154: PUSH
31155: LD_VAR 0 1
31159: ST_TO_ADDR
// end ;
31160: LD_VAR 0 4
31164: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31165: LD_INT 0
31167: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31168: LD_ADDR_VAR 0 5
31172: PUSH
31173: LD_VAR 0 1
31177: PPUSH
31178: CALL_OW 250
31182: PPUSH
31183: LD_VAR 0 1
31187: PPUSH
31188: CALL_OW 251
31192: PPUSH
31193: LD_VAR 0 2
31197: PPUSH
31198: LD_VAR 0 3
31202: PPUSH
31203: LD_VAR 0 4
31207: PPUSH
31208: CALL 31218 0 5
31212: ST_TO_ADDR
// end ;
31213: LD_VAR 0 5
31217: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31218: LD_INT 0
31220: PPUSH
31221: PPUSH
31222: PPUSH
31223: PPUSH
// if not list then
31224: LD_VAR 0 3
31228: NOT
31229: IFFALSE 31233
// exit ;
31231: GO 31621
// result := [ ] ;
31233: LD_ADDR_VAR 0 6
31237: PUSH
31238: EMPTY
31239: ST_TO_ADDR
// for i in list do
31240: LD_ADDR_VAR 0 7
31244: PUSH
31245: LD_VAR 0 3
31249: PUSH
31250: FOR_IN
31251: IFFALSE 31453
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31253: LD_ADDR_VAR 0 9
31257: PUSH
31258: LD_VAR 0 7
31262: PPUSH
31263: LD_VAR 0 1
31267: PPUSH
31268: LD_VAR 0 2
31272: PPUSH
31273: CALL_OW 297
31277: ST_TO_ADDR
// if not result then
31278: LD_VAR 0 6
31282: NOT
31283: IFFALSE 31309
// result := [ [ i , tmp ] ] else
31285: LD_ADDR_VAR 0 6
31289: PUSH
31290: LD_VAR 0 7
31294: PUSH
31295: LD_VAR 0 9
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: EMPTY
31305: LIST
31306: ST_TO_ADDR
31307: GO 31451
// begin if result [ result ] [ 2 ] < tmp then
31309: LD_VAR 0 6
31313: PUSH
31314: LD_VAR 0 6
31318: ARRAY
31319: PUSH
31320: LD_INT 2
31322: ARRAY
31323: PUSH
31324: LD_VAR 0 9
31328: LESS
31329: IFFALSE 31371
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31331: LD_ADDR_VAR 0 6
31335: PUSH
31336: LD_VAR 0 6
31340: PPUSH
31341: LD_VAR 0 6
31345: PUSH
31346: LD_INT 1
31348: PLUS
31349: PPUSH
31350: LD_VAR 0 7
31354: PUSH
31355: LD_VAR 0 9
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PPUSH
31364: CALL_OW 2
31368: ST_TO_ADDR
31369: GO 31451
// for j = 1 to result do
31371: LD_ADDR_VAR 0 8
31375: PUSH
31376: DOUBLE
31377: LD_INT 1
31379: DEC
31380: ST_TO_ADDR
31381: LD_VAR 0 6
31385: PUSH
31386: FOR_TO
31387: IFFALSE 31449
// begin if tmp < result [ j ] [ 2 ] then
31389: LD_VAR 0 9
31393: PUSH
31394: LD_VAR 0 6
31398: PUSH
31399: LD_VAR 0 8
31403: ARRAY
31404: PUSH
31405: LD_INT 2
31407: ARRAY
31408: LESS
31409: IFFALSE 31447
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31411: LD_ADDR_VAR 0 6
31415: PUSH
31416: LD_VAR 0 6
31420: PPUSH
31421: LD_VAR 0 8
31425: PPUSH
31426: LD_VAR 0 7
31430: PUSH
31431: LD_VAR 0 9
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PPUSH
31440: CALL_OW 2
31444: ST_TO_ADDR
// break ;
31445: GO 31449
// end ; end ;
31447: GO 31386
31449: POP
31450: POP
// end ; end ;
31451: GO 31250
31453: POP
31454: POP
// if result and not asc then
31455: LD_VAR 0 6
31459: PUSH
31460: LD_VAR 0 4
31464: NOT
31465: AND
31466: IFFALSE 31541
// begin tmp := result ;
31468: LD_ADDR_VAR 0 9
31472: PUSH
31473: LD_VAR 0 6
31477: ST_TO_ADDR
// for i = tmp downto 1 do
31478: LD_ADDR_VAR 0 7
31482: PUSH
31483: DOUBLE
31484: LD_VAR 0 9
31488: INC
31489: ST_TO_ADDR
31490: LD_INT 1
31492: PUSH
31493: FOR_DOWNTO
31494: IFFALSE 31539
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31496: LD_ADDR_VAR 0 6
31500: PUSH
31501: LD_VAR 0 6
31505: PPUSH
31506: LD_VAR 0 9
31510: PUSH
31511: LD_VAR 0 7
31515: MINUS
31516: PUSH
31517: LD_INT 1
31519: PLUS
31520: PPUSH
31521: LD_VAR 0 9
31525: PUSH
31526: LD_VAR 0 7
31530: ARRAY
31531: PPUSH
31532: CALL_OW 1
31536: ST_TO_ADDR
31537: GO 31493
31539: POP
31540: POP
// end ; tmp := [ ] ;
31541: LD_ADDR_VAR 0 9
31545: PUSH
31546: EMPTY
31547: ST_TO_ADDR
// if mode then
31548: LD_VAR 0 5
31552: IFFALSE 31621
// begin for i = 1 to result do
31554: LD_ADDR_VAR 0 7
31558: PUSH
31559: DOUBLE
31560: LD_INT 1
31562: DEC
31563: ST_TO_ADDR
31564: LD_VAR 0 6
31568: PUSH
31569: FOR_TO
31570: IFFALSE 31609
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31572: LD_ADDR_VAR 0 9
31576: PUSH
31577: LD_VAR 0 9
31581: PPUSH
31582: LD_VAR 0 7
31586: PPUSH
31587: LD_VAR 0 6
31591: PUSH
31592: LD_VAR 0 7
31596: ARRAY
31597: PUSH
31598: LD_INT 1
31600: ARRAY
31601: PPUSH
31602: CALL_OW 1
31606: ST_TO_ADDR
31607: GO 31569
31609: POP
31610: POP
// result := tmp ;
31611: LD_ADDR_VAR 0 6
31615: PUSH
31616: LD_VAR 0 9
31620: ST_TO_ADDR
// end ; end ;
31621: LD_VAR 0 6
31625: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31626: LD_INT 0
31628: PPUSH
31629: PPUSH
31630: PPUSH
31631: PPUSH
31632: PPUSH
31633: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31634: LD_ADDR_VAR 0 5
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: ST_TO_ADDR
// if not x or not y then
31656: LD_VAR 0 2
31660: NOT
31661: PUSH
31662: LD_VAR 0 3
31666: NOT
31667: OR
31668: IFFALSE 31672
// exit ;
31670: GO 33322
// if not range then
31672: LD_VAR 0 4
31676: NOT
31677: IFFALSE 31687
// range := 10 ;
31679: LD_ADDR_VAR 0 4
31683: PUSH
31684: LD_INT 10
31686: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31687: LD_ADDR_VAR 0 8
31691: PUSH
31692: LD_INT 81
31694: PUSH
31695: LD_VAR 0 1
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 92
31706: PUSH
31707: LD_VAR 0 2
31711: PUSH
31712: LD_VAR 0 3
31716: PUSH
31717: LD_VAR 0 4
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 3
31730: PUSH
31731: LD_INT 21
31733: PUSH
31734: LD_INT 3
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: LIST
31749: PPUSH
31750: CALL_OW 69
31754: ST_TO_ADDR
// if not tmp then
31755: LD_VAR 0 8
31759: NOT
31760: IFFALSE 31764
// exit ;
31762: GO 33322
// for i in tmp do
31764: LD_ADDR_VAR 0 6
31768: PUSH
31769: LD_VAR 0 8
31773: PUSH
31774: FOR_IN
31775: IFFALSE 33297
// begin points := [ 0 , 0 , 0 ] ;
31777: LD_ADDR_VAR 0 9
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: ST_TO_ADDR
// bpoints := 1 ;
31796: LD_ADDR_VAR 0 10
31800: PUSH
31801: LD_INT 1
31803: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31804: LD_VAR 0 6
31808: PPUSH
31809: CALL_OW 247
31813: PUSH
31814: LD_INT 1
31816: DOUBLE
31817: EQUAL
31818: IFTRUE 31822
31820: GO 32400
31822: POP
// begin if GetClass ( i ) = 1 then
31823: LD_VAR 0 6
31827: PPUSH
31828: CALL_OW 257
31832: PUSH
31833: LD_INT 1
31835: EQUAL
31836: IFFALSE 31857
// points := [ 10 , 5 , 3 ] ;
31838: LD_ADDR_VAR 0 9
31842: PUSH
31843: LD_INT 10
31845: PUSH
31846: LD_INT 5
31848: PUSH
31849: LD_INT 3
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: LIST
31856: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31857: LD_VAR 0 6
31861: PPUSH
31862: CALL_OW 257
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 3
31872: PUSH
31873: LD_INT 4
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: LIST
31880: IN
31881: IFFALSE 31902
// points := [ 3 , 2 , 1 ] ;
31883: LD_ADDR_VAR 0 9
31887: PUSH
31888: LD_INT 3
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: LIST
31901: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31902: LD_VAR 0 6
31906: PPUSH
31907: CALL_OW 257
31911: PUSH
31912: LD_INT 5
31914: EQUAL
31915: IFFALSE 31936
// points := [ 130 , 5 , 2 ] ;
31917: LD_ADDR_VAR 0 9
31921: PUSH
31922: LD_INT 130
31924: PUSH
31925: LD_INT 5
31927: PUSH
31928: LD_INT 2
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31936: LD_VAR 0 6
31940: PPUSH
31941: CALL_OW 257
31945: PUSH
31946: LD_INT 8
31948: EQUAL
31949: IFFALSE 31970
// points := [ 35 , 35 , 30 ] ;
31951: LD_ADDR_VAR 0 9
31955: PUSH
31956: LD_INT 35
31958: PUSH
31959: LD_INT 35
31961: PUSH
31962: LD_INT 30
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31970: LD_VAR 0 6
31974: PPUSH
31975: CALL_OW 257
31979: PUSH
31980: LD_INT 9
31982: EQUAL
31983: IFFALSE 32004
// points := [ 20 , 55 , 40 ] ;
31985: LD_ADDR_VAR 0 9
31989: PUSH
31990: LD_INT 20
31992: PUSH
31993: LD_INT 55
31995: PUSH
31996: LD_INT 40
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32004: LD_VAR 0 6
32008: PPUSH
32009: CALL_OW 257
32013: PUSH
32014: LD_INT 12
32016: PUSH
32017: LD_INT 16
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: IN
32024: IFFALSE 32045
// points := [ 5 , 3 , 2 ] ;
32026: LD_ADDR_VAR 0 9
32030: PUSH
32031: LD_INT 5
32033: PUSH
32034: LD_INT 3
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: LIST
32044: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32045: LD_VAR 0 6
32049: PPUSH
32050: CALL_OW 257
32054: PUSH
32055: LD_INT 17
32057: EQUAL
32058: IFFALSE 32079
// points := [ 100 , 50 , 75 ] ;
32060: LD_ADDR_VAR 0 9
32064: PUSH
32065: LD_INT 100
32067: PUSH
32068: LD_INT 50
32070: PUSH
32071: LD_INT 75
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: LIST
32078: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32079: LD_VAR 0 6
32083: PPUSH
32084: CALL_OW 257
32088: PUSH
32089: LD_INT 15
32091: EQUAL
32092: IFFALSE 32113
// points := [ 10 , 5 , 3 ] ;
32094: LD_ADDR_VAR 0 9
32098: PUSH
32099: LD_INT 10
32101: PUSH
32102: LD_INT 5
32104: PUSH
32105: LD_INT 3
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: LIST
32112: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32113: LD_VAR 0 6
32117: PPUSH
32118: CALL_OW 257
32122: PUSH
32123: LD_INT 14
32125: EQUAL
32126: IFFALSE 32147
// points := [ 10 , 0 , 0 ] ;
32128: LD_ADDR_VAR 0 9
32132: PUSH
32133: LD_INT 10
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32147: LD_VAR 0 6
32151: PPUSH
32152: CALL_OW 257
32156: PUSH
32157: LD_INT 11
32159: EQUAL
32160: IFFALSE 32181
// points := [ 30 , 10 , 5 ] ;
32162: LD_ADDR_VAR 0 9
32166: PUSH
32167: LD_INT 30
32169: PUSH
32170: LD_INT 10
32172: PUSH
32173: LD_INT 5
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32181: LD_VAR 0 1
32185: PPUSH
32186: LD_INT 5
32188: PPUSH
32189: CALL_OW 321
32193: PUSH
32194: LD_INT 2
32196: EQUAL
32197: IFFALSE 32214
// bpoints := bpoints * 1.8 ;
32199: LD_ADDR_VAR 0 10
32203: PUSH
32204: LD_VAR 0 10
32208: PUSH
32209: LD_REAL  1.80000000000000E+0000
32212: MUL
32213: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32214: LD_VAR 0 6
32218: PPUSH
32219: CALL_OW 257
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: LD_INT 4
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: IN
32242: PUSH
32243: LD_VAR 0 1
32247: PPUSH
32248: LD_INT 51
32250: PPUSH
32251: CALL_OW 321
32255: PUSH
32256: LD_INT 2
32258: EQUAL
32259: AND
32260: IFFALSE 32277
// bpoints := bpoints * 1.2 ;
32262: LD_ADDR_VAR 0 10
32266: PUSH
32267: LD_VAR 0 10
32271: PUSH
32272: LD_REAL  1.20000000000000E+0000
32275: MUL
32276: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32277: LD_VAR 0 6
32281: PPUSH
32282: CALL_OW 257
32286: PUSH
32287: LD_INT 5
32289: PUSH
32290: LD_INT 7
32292: PUSH
32293: LD_INT 9
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: IN
32301: PUSH
32302: LD_VAR 0 1
32306: PPUSH
32307: LD_INT 52
32309: PPUSH
32310: CALL_OW 321
32314: PUSH
32315: LD_INT 2
32317: EQUAL
32318: AND
32319: IFFALSE 32336
// bpoints := bpoints * 1.5 ;
32321: LD_ADDR_VAR 0 10
32325: PUSH
32326: LD_VAR 0 10
32330: PUSH
32331: LD_REAL  1.50000000000000E+0000
32334: MUL
32335: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32336: LD_VAR 0 1
32340: PPUSH
32341: LD_INT 66
32343: PPUSH
32344: CALL_OW 321
32348: PUSH
32349: LD_INT 2
32351: EQUAL
32352: IFFALSE 32369
// bpoints := bpoints * 1.1 ;
32354: LD_ADDR_VAR 0 10
32358: PUSH
32359: LD_VAR 0 10
32363: PUSH
32364: LD_REAL  1.10000000000000E+0000
32367: MUL
32368: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32369: LD_ADDR_VAR 0 10
32373: PUSH
32374: LD_VAR 0 10
32378: PUSH
32379: LD_VAR 0 6
32383: PPUSH
32384: LD_INT 1
32386: PPUSH
32387: CALL_OW 259
32391: PUSH
32392: LD_REAL  1.15000000000000E+0000
32395: MUL
32396: MUL
32397: ST_TO_ADDR
// end ; unit_vehicle :
32398: GO 33226
32400: LD_INT 2
32402: DOUBLE
32403: EQUAL
32404: IFTRUE 32408
32406: GO 33214
32408: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32409: LD_VAR 0 6
32413: PPUSH
32414: CALL_OW 264
32418: PUSH
32419: LD_INT 2
32421: PUSH
32422: LD_INT 42
32424: PUSH
32425: LD_INT 24
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: LIST
32432: IN
32433: IFFALSE 32454
// points := [ 25 , 5 , 3 ] ;
32435: LD_ADDR_VAR 0 9
32439: PUSH
32440: LD_INT 25
32442: PUSH
32443: LD_INT 5
32445: PUSH
32446: LD_INT 3
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: LIST
32453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32454: LD_VAR 0 6
32458: PPUSH
32459: CALL_OW 264
32463: PUSH
32464: LD_INT 4
32466: PUSH
32467: LD_INT 43
32469: PUSH
32470: LD_INT 25
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: LIST
32477: IN
32478: IFFALSE 32499
// points := [ 40 , 15 , 5 ] ;
32480: LD_ADDR_VAR 0 9
32484: PUSH
32485: LD_INT 40
32487: PUSH
32488: LD_INT 15
32490: PUSH
32491: LD_INT 5
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: LIST
32498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32499: LD_VAR 0 6
32503: PPUSH
32504: CALL_OW 264
32508: PUSH
32509: LD_INT 3
32511: PUSH
32512: LD_INT 23
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: IN
32519: IFFALSE 32540
// points := [ 7 , 25 , 8 ] ;
32521: LD_ADDR_VAR 0 9
32525: PUSH
32526: LD_INT 7
32528: PUSH
32529: LD_INT 25
32531: PUSH
32532: LD_INT 8
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: LIST
32539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32540: LD_VAR 0 6
32544: PPUSH
32545: CALL_OW 264
32549: PUSH
32550: LD_INT 5
32552: PUSH
32553: LD_INT 27
32555: PUSH
32556: LD_INT 44
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: LIST
32563: IN
32564: IFFALSE 32585
// points := [ 14 , 50 , 16 ] ;
32566: LD_ADDR_VAR 0 9
32570: PUSH
32571: LD_INT 14
32573: PUSH
32574: LD_INT 50
32576: PUSH
32577: LD_INT 16
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: LIST
32584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32585: LD_VAR 0 6
32589: PPUSH
32590: CALL_OW 264
32594: PUSH
32595: LD_INT 6
32597: PUSH
32598: LD_INT 46
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: IN
32605: IFFALSE 32626
// points := [ 32 , 120 , 70 ] ;
32607: LD_ADDR_VAR 0 9
32611: PUSH
32612: LD_INT 32
32614: PUSH
32615: LD_INT 120
32617: PUSH
32618: LD_INT 70
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32626: LD_VAR 0 6
32630: PPUSH
32631: CALL_OW 264
32635: PUSH
32636: LD_INT 7
32638: PUSH
32639: LD_INT 28
32641: PUSH
32642: LD_INT 45
32644: PUSH
32645: LD_INT 92
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: IN
32654: IFFALSE 32675
// points := [ 35 , 20 , 45 ] ;
32656: LD_ADDR_VAR 0 9
32660: PUSH
32661: LD_INT 35
32663: PUSH
32664: LD_INT 20
32666: PUSH
32667: LD_INT 45
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: LIST
32674: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32675: LD_VAR 0 6
32679: PPUSH
32680: CALL_OW 264
32684: PUSH
32685: LD_INT 47
32687: PUSH
32688: EMPTY
32689: LIST
32690: IN
32691: IFFALSE 32712
// points := [ 67 , 45 , 75 ] ;
32693: LD_ADDR_VAR 0 9
32697: PUSH
32698: LD_INT 67
32700: PUSH
32701: LD_INT 45
32703: PUSH
32704: LD_INT 75
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32712: LD_VAR 0 6
32716: PPUSH
32717: CALL_OW 264
32721: PUSH
32722: LD_INT 26
32724: PUSH
32725: EMPTY
32726: LIST
32727: IN
32728: IFFALSE 32749
// points := [ 120 , 30 , 80 ] ;
32730: LD_ADDR_VAR 0 9
32734: PUSH
32735: LD_INT 120
32737: PUSH
32738: LD_INT 30
32740: PUSH
32741: LD_INT 80
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: LIST
32748: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32749: LD_VAR 0 6
32753: PPUSH
32754: CALL_OW 264
32758: PUSH
32759: LD_INT 22
32761: PUSH
32762: EMPTY
32763: LIST
32764: IN
32765: IFFALSE 32786
// points := [ 40 , 1 , 1 ] ;
32767: LD_ADDR_VAR 0 9
32771: PUSH
32772: LD_INT 40
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: LIST
32785: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32786: LD_VAR 0 6
32790: PPUSH
32791: CALL_OW 264
32795: PUSH
32796: LD_INT 29
32798: PUSH
32799: EMPTY
32800: LIST
32801: IN
32802: IFFALSE 32823
// points := [ 70 , 200 , 400 ] ;
32804: LD_ADDR_VAR 0 9
32808: PUSH
32809: LD_INT 70
32811: PUSH
32812: LD_INT 200
32814: PUSH
32815: LD_INT 400
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32823: LD_VAR 0 6
32827: PPUSH
32828: CALL_OW 264
32832: PUSH
32833: LD_INT 14
32835: PUSH
32836: LD_INT 53
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: IN
32843: IFFALSE 32864
// points := [ 40 , 10 , 20 ] ;
32845: LD_ADDR_VAR 0 9
32849: PUSH
32850: LD_INT 40
32852: PUSH
32853: LD_INT 10
32855: PUSH
32856: LD_INT 20
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: LIST
32863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32864: LD_VAR 0 6
32868: PPUSH
32869: CALL_OW 264
32873: PUSH
32874: LD_INT 9
32876: PUSH
32877: EMPTY
32878: LIST
32879: IN
32880: IFFALSE 32901
// points := [ 5 , 70 , 20 ] ;
32882: LD_ADDR_VAR 0 9
32886: PUSH
32887: LD_INT 5
32889: PUSH
32890: LD_INT 70
32892: PUSH
32893: LD_INT 20
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: LIST
32900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32901: LD_VAR 0 6
32905: PPUSH
32906: CALL_OW 264
32910: PUSH
32911: LD_INT 10
32913: PUSH
32914: EMPTY
32915: LIST
32916: IN
32917: IFFALSE 32938
// points := [ 35 , 110 , 70 ] ;
32919: LD_ADDR_VAR 0 9
32923: PUSH
32924: LD_INT 35
32926: PUSH
32927: LD_INT 110
32929: PUSH
32930: LD_INT 70
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: LIST
32937: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32938: LD_VAR 0 6
32942: PPUSH
32943: CALL_OW 265
32947: PUSH
32948: LD_INT 25
32950: EQUAL
32951: IFFALSE 32972
// points := [ 80 , 65 , 100 ] ;
32953: LD_ADDR_VAR 0 9
32957: PUSH
32958: LD_INT 80
32960: PUSH
32961: LD_INT 65
32963: PUSH
32964: LD_INT 100
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32972: LD_VAR 0 6
32976: PPUSH
32977: CALL_OW 263
32981: PUSH
32982: LD_INT 1
32984: EQUAL
32985: IFFALSE 33020
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32987: LD_ADDR_VAR 0 10
32991: PUSH
32992: LD_VAR 0 10
32996: PUSH
32997: LD_VAR 0 6
33001: PPUSH
33002: CALL_OW 311
33006: PPUSH
33007: LD_INT 3
33009: PPUSH
33010: CALL_OW 259
33014: PUSH
33015: LD_INT 4
33017: MUL
33018: MUL
33019: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33020: LD_VAR 0 6
33024: PPUSH
33025: CALL_OW 263
33029: PUSH
33030: LD_INT 2
33032: EQUAL
33033: IFFALSE 33084
// begin j := IsControledBy ( i ) ;
33035: LD_ADDR_VAR 0 7
33039: PUSH
33040: LD_VAR 0 6
33044: PPUSH
33045: CALL_OW 312
33049: ST_TO_ADDR
// if j then
33050: LD_VAR 0 7
33054: IFFALSE 33084
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33056: LD_ADDR_VAR 0 10
33060: PUSH
33061: LD_VAR 0 10
33065: PUSH
33066: LD_VAR 0 7
33070: PPUSH
33071: LD_INT 3
33073: PPUSH
33074: CALL_OW 259
33078: PUSH
33079: LD_INT 3
33081: MUL
33082: MUL
33083: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33084: LD_VAR 0 6
33088: PPUSH
33089: CALL_OW 264
33093: PUSH
33094: LD_INT 5
33096: PUSH
33097: LD_INT 6
33099: PUSH
33100: LD_INT 46
33102: PUSH
33103: LD_INT 44
33105: PUSH
33106: LD_INT 47
33108: PUSH
33109: LD_INT 45
33111: PUSH
33112: LD_INT 28
33114: PUSH
33115: LD_INT 7
33117: PUSH
33118: LD_INT 27
33120: PUSH
33121: LD_INT 29
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: IN
33136: PUSH
33137: LD_VAR 0 1
33141: PPUSH
33142: LD_INT 52
33144: PPUSH
33145: CALL_OW 321
33149: PUSH
33150: LD_INT 2
33152: EQUAL
33153: AND
33154: IFFALSE 33171
// bpoints := bpoints * 1.2 ;
33156: LD_ADDR_VAR 0 10
33160: PUSH
33161: LD_VAR 0 10
33165: PUSH
33166: LD_REAL  1.20000000000000E+0000
33169: MUL
33170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33171: LD_VAR 0 6
33175: PPUSH
33176: CALL_OW 264
33180: PUSH
33181: LD_INT 6
33183: PUSH
33184: LD_INT 46
33186: PUSH
33187: LD_INT 47
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: IN
33195: IFFALSE 33212
// bpoints := bpoints * 1.2 ;
33197: LD_ADDR_VAR 0 10
33201: PUSH
33202: LD_VAR 0 10
33206: PUSH
33207: LD_REAL  1.20000000000000E+0000
33210: MUL
33211: ST_TO_ADDR
// end ; unit_building :
33212: GO 33226
33214: LD_INT 3
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33222
33220: GO 33225
33222: POP
// ; end ;
33223: GO 33226
33225: POP
// for j = 1 to 3 do
33226: LD_ADDR_VAR 0 7
33230: PUSH
33231: DOUBLE
33232: LD_INT 1
33234: DEC
33235: ST_TO_ADDR
33236: LD_INT 3
33238: PUSH
33239: FOR_TO
33240: IFFALSE 33293
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33242: LD_ADDR_VAR 0 5
33246: PUSH
33247: LD_VAR 0 5
33251: PPUSH
33252: LD_VAR 0 7
33256: PPUSH
33257: LD_VAR 0 5
33261: PUSH
33262: LD_VAR 0 7
33266: ARRAY
33267: PUSH
33268: LD_VAR 0 9
33272: PUSH
33273: LD_VAR 0 7
33277: ARRAY
33278: PUSH
33279: LD_VAR 0 10
33283: MUL
33284: PLUS
33285: PPUSH
33286: CALL_OW 1
33290: ST_TO_ADDR
33291: GO 33239
33293: POP
33294: POP
// end ;
33295: GO 31774
33297: POP
33298: POP
// result := Replace ( result , 4 , tmp ) ;
33299: LD_ADDR_VAR 0 5
33303: PUSH
33304: LD_VAR 0 5
33308: PPUSH
33309: LD_INT 4
33311: PPUSH
33312: LD_VAR 0 8
33316: PPUSH
33317: CALL_OW 1
33321: ST_TO_ADDR
// end ;
33322: LD_VAR 0 5
33326: RET
// export function DangerAtRange ( unit , range ) ; begin
33327: LD_INT 0
33329: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33330: LD_ADDR_VAR 0 3
33334: PUSH
33335: LD_VAR 0 1
33339: PPUSH
33340: CALL_OW 255
33344: PPUSH
33345: LD_VAR 0 1
33349: PPUSH
33350: CALL_OW 250
33354: PPUSH
33355: LD_VAR 0 1
33359: PPUSH
33360: CALL_OW 251
33364: PPUSH
33365: LD_VAR 0 2
33369: PPUSH
33370: CALL 31626 0 4
33374: ST_TO_ADDR
// end ;
33375: LD_VAR 0 3
33379: RET
// export function DangerInArea ( side , area ) ; begin
33380: LD_INT 0
33382: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33383: LD_ADDR_VAR 0 3
33387: PUSH
33388: LD_VAR 0 2
33392: PPUSH
33393: LD_INT 81
33395: PUSH
33396: LD_VAR 0 1
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PPUSH
33405: CALL_OW 70
33409: ST_TO_ADDR
// end ;
33410: LD_VAR 0 3
33414: RET
// export function IsExtension ( b ) ; begin
33415: LD_INT 0
33417: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33418: LD_ADDR_VAR 0 2
33422: PUSH
33423: LD_VAR 0 1
33427: PUSH
33428: LD_INT 23
33430: PUSH
33431: LD_INT 20
33433: PUSH
33434: LD_INT 22
33436: PUSH
33437: LD_INT 17
33439: PUSH
33440: LD_INT 24
33442: PUSH
33443: LD_INT 21
33445: PUSH
33446: LD_INT 19
33448: PUSH
33449: LD_INT 16
33451: PUSH
33452: LD_INT 25
33454: PUSH
33455: LD_INT 18
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: IN
33470: ST_TO_ADDR
// end ;
33471: LD_VAR 0 2
33475: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33476: LD_INT 0
33478: PPUSH
33479: PPUSH
33480: PPUSH
// result := [ ] ;
33481: LD_ADDR_VAR 0 4
33485: PUSH
33486: EMPTY
33487: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33488: LD_ADDR_VAR 0 5
33492: PUSH
33493: LD_VAR 0 2
33497: PPUSH
33498: LD_INT 21
33500: PUSH
33501: LD_INT 3
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PPUSH
33508: CALL_OW 70
33512: ST_TO_ADDR
// if not tmp then
33513: LD_VAR 0 5
33517: NOT
33518: IFFALSE 33522
// exit ;
33520: GO 33586
// if checkLink then
33522: LD_VAR 0 3
33526: IFFALSE 33576
// begin for i in tmp do
33528: LD_ADDR_VAR 0 6
33532: PUSH
33533: LD_VAR 0 5
33537: PUSH
33538: FOR_IN
33539: IFFALSE 33574
// if GetBase ( i ) <> base then
33541: LD_VAR 0 6
33545: PPUSH
33546: CALL_OW 274
33550: PUSH
33551: LD_VAR 0 1
33555: NONEQUAL
33556: IFFALSE 33572
// ComLinkToBase ( base , i ) ;
33558: LD_VAR 0 1
33562: PPUSH
33563: LD_VAR 0 6
33567: PPUSH
33568: CALL_OW 169
33572: GO 33538
33574: POP
33575: POP
// end ; result := tmp ;
33576: LD_ADDR_VAR 0 4
33580: PUSH
33581: LD_VAR 0 5
33585: ST_TO_ADDR
// end ;
33586: LD_VAR 0 4
33590: RET
// export function ComComplete ( units , b ) ; var i ; begin
33591: LD_INT 0
33593: PPUSH
33594: PPUSH
// if not units then
33595: LD_VAR 0 1
33599: NOT
33600: IFFALSE 33604
// exit ;
33602: GO 33694
// for i in units do
33604: LD_ADDR_VAR 0 4
33608: PUSH
33609: LD_VAR 0 1
33613: PUSH
33614: FOR_IN
33615: IFFALSE 33692
// if BuildingStatus ( b ) = bs_build then
33617: LD_VAR 0 2
33621: PPUSH
33622: CALL_OW 461
33626: PUSH
33627: LD_INT 1
33629: EQUAL
33630: IFFALSE 33690
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33632: LD_VAR 0 4
33636: PPUSH
33637: LD_STRING h
33639: PUSH
33640: LD_VAR 0 2
33644: PPUSH
33645: CALL_OW 250
33649: PUSH
33650: LD_VAR 0 2
33654: PPUSH
33655: CALL_OW 251
33659: PUSH
33660: LD_VAR 0 2
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: PUSH
33683: EMPTY
33684: LIST
33685: PPUSH
33686: CALL_OW 446
33690: GO 33614
33692: POP
33693: POP
// end ;
33694: LD_VAR 0 3
33698: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33699: LD_INT 0
33701: PPUSH
33702: PPUSH
33703: PPUSH
33704: PPUSH
33705: PPUSH
33706: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33707: LD_VAR 0 1
33711: NOT
33712: PUSH
33713: LD_VAR 0 1
33717: PPUSH
33718: CALL_OW 263
33722: PUSH
33723: LD_INT 2
33725: NONEQUAL
33726: OR
33727: IFFALSE 33731
// exit ;
33729: GO 34047
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33731: LD_ADDR_VAR 0 6
33735: PUSH
33736: LD_INT 22
33738: PUSH
33739: LD_VAR 0 1
33743: PPUSH
33744: CALL_OW 255
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 2
33755: PUSH
33756: LD_INT 30
33758: PUSH
33759: LD_INT 36
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 34
33768: PUSH
33769: LD_INT 31
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PPUSH
33785: CALL_OW 69
33789: ST_TO_ADDR
// if not tmp then
33790: LD_VAR 0 6
33794: NOT
33795: IFFALSE 33799
// exit ;
33797: GO 34047
// result := [ ] ;
33799: LD_ADDR_VAR 0 2
33803: PUSH
33804: EMPTY
33805: ST_TO_ADDR
// for i in tmp do
33806: LD_ADDR_VAR 0 3
33810: PUSH
33811: LD_VAR 0 6
33815: PUSH
33816: FOR_IN
33817: IFFALSE 33888
// begin t := UnitsInside ( i ) ;
33819: LD_ADDR_VAR 0 4
33823: PUSH
33824: LD_VAR 0 3
33828: PPUSH
33829: CALL_OW 313
33833: ST_TO_ADDR
// if t then
33834: LD_VAR 0 4
33838: IFFALSE 33886
// for j in t do
33840: LD_ADDR_VAR 0 7
33844: PUSH
33845: LD_VAR 0 4
33849: PUSH
33850: FOR_IN
33851: IFFALSE 33884
// result := Replace ( result , result + 1 , j ) ;
33853: LD_ADDR_VAR 0 2
33857: PUSH
33858: LD_VAR 0 2
33862: PPUSH
33863: LD_VAR 0 2
33867: PUSH
33868: LD_INT 1
33870: PLUS
33871: PPUSH
33872: LD_VAR 0 7
33876: PPUSH
33877: CALL_OW 1
33881: ST_TO_ADDR
33882: GO 33850
33884: POP
33885: POP
// end ;
33886: GO 33816
33888: POP
33889: POP
// if not result then
33890: LD_VAR 0 2
33894: NOT
33895: IFFALSE 33899
// exit ;
33897: GO 34047
// mech := result [ 1 ] ;
33899: LD_ADDR_VAR 0 5
33903: PUSH
33904: LD_VAR 0 2
33908: PUSH
33909: LD_INT 1
33911: ARRAY
33912: ST_TO_ADDR
// if result > 1 then
33913: LD_VAR 0 2
33917: PUSH
33918: LD_INT 1
33920: GREATER
33921: IFFALSE 34033
// begin for i = 2 to result do
33923: LD_ADDR_VAR 0 3
33927: PUSH
33928: DOUBLE
33929: LD_INT 2
33931: DEC
33932: ST_TO_ADDR
33933: LD_VAR 0 2
33937: PUSH
33938: FOR_TO
33939: IFFALSE 34031
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33941: LD_ADDR_VAR 0 4
33945: PUSH
33946: LD_VAR 0 2
33950: PUSH
33951: LD_VAR 0 3
33955: ARRAY
33956: PPUSH
33957: LD_INT 3
33959: PPUSH
33960: CALL_OW 259
33964: PUSH
33965: LD_VAR 0 2
33969: PUSH
33970: LD_VAR 0 3
33974: ARRAY
33975: PPUSH
33976: CALL_OW 432
33980: MINUS
33981: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33982: LD_VAR 0 4
33986: PUSH
33987: LD_VAR 0 5
33991: PPUSH
33992: LD_INT 3
33994: PPUSH
33995: CALL_OW 259
33999: PUSH
34000: LD_VAR 0 5
34004: PPUSH
34005: CALL_OW 432
34009: MINUS
34010: GREATEREQUAL
34011: IFFALSE 34029
// mech := result [ i ] ;
34013: LD_ADDR_VAR 0 5
34017: PUSH
34018: LD_VAR 0 2
34022: PUSH
34023: LD_VAR 0 3
34027: ARRAY
34028: ST_TO_ADDR
// end ;
34029: GO 33938
34031: POP
34032: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34033: LD_VAR 0 1
34037: PPUSH
34038: LD_VAR 0 5
34042: PPUSH
34043: CALL_OW 135
// end ;
34047: LD_VAR 0 2
34051: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34052: LD_INT 0
34054: PPUSH
34055: PPUSH
34056: PPUSH
34057: PPUSH
34058: PPUSH
34059: PPUSH
34060: PPUSH
34061: PPUSH
34062: PPUSH
34063: PPUSH
34064: PPUSH
34065: PPUSH
34066: PPUSH
// result := [ ] ;
34067: LD_ADDR_VAR 0 7
34071: PUSH
34072: EMPTY
34073: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34074: LD_VAR 0 1
34078: PPUSH
34079: CALL_OW 266
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: IN
34094: NOT
34095: IFFALSE 34099
// exit ;
34097: GO 35733
// if name then
34099: LD_VAR 0 3
34103: IFFALSE 34119
// SetBName ( base_dep , name ) ;
34105: LD_VAR 0 1
34109: PPUSH
34110: LD_VAR 0 3
34114: PPUSH
34115: CALL_OW 500
// base := GetBase ( base_dep ) ;
34119: LD_ADDR_VAR 0 15
34123: PUSH
34124: LD_VAR 0 1
34128: PPUSH
34129: CALL_OW 274
34133: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34134: LD_ADDR_VAR 0 16
34138: PUSH
34139: LD_VAR 0 1
34143: PPUSH
34144: CALL_OW 255
34148: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34149: LD_ADDR_VAR 0 17
34153: PUSH
34154: LD_VAR 0 1
34158: PPUSH
34159: CALL_OW 248
34163: ST_TO_ADDR
// if sources then
34164: LD_VAR 0 5
34168: IFFALSE 34215
// for i = 1 to 3 do
34170: LD_ADDR_VAR 0 8
34174: PUSH
34175: DOUBLE
34176: LD_INT 1
34178: DEC
34179: ST_TO_ADDR
34180: LD_INT 3
34182: PUSH
34183: FOR_TO
34184: IFFALSE 34213
// AddResourceType ( base , i , sources [ i ] ) ;
34186: LD_VAR 0 15
34190: PPUSH
34191: LD_VAR 0 8
34195: PPUSH
34196: LD_VAR 0 5
34200: PUSH
34201: LD_VAR 0 8
34205: ARRAY
34206: PPUSH
34207: CALL_OW 276
34211: GO 34183
34213: POP
34214: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34215: LD_ADDR_VAR 0 18
34219: PUSH
34220: LD_VAR 0 15
34224: PPUSH
34225: LD_VAR 0 2
34229: PPUSH
34230: LD_INT 1
34232: PPUSH
34233: CALL 33476 0 3
34237: ST_TO_ADDR
// InitHc ;
34238: CALL_OW 19
// InitUc ;
34242: CALL_OW 18
// uc_side := side ;
34246: LD_ADDR_OWVAR 20
34250: PUSH
34251: LD_VAR 0 16
34255: ST_TO_ADDR
// uc_nation := nation ;
34256: LD_ADDR_OWVAR 21
34260: PUSH
34261: LD_VAR 0 17
34265: ST_TO_ADDR
// if buildings then
34266: LD_VAR 0 18
34270: IFFALSE 35592
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34272: LD_ADDR_VAR 0 19
34276: PUSH
34277: LD_VAR 0 18
34281: PPUSH
34282: LD_INT 2
34284: PUSH
34285: LD_INT 30
34287: PUSH
34288: LD_INT 29
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 30
34297: PUSH
34298: LD_INT 30
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: LIST
34309: PPUSH
34310: CALL_OW 72
34314: ST_TO_ADDR
// if tmp then
34315: LD_VAR 0 19
34319: IFFALSE 34367
// for i in tmp do
34321: LD_ADDR_VAR 0 8
34325: PUSH
34326: LD_VAR 0 19
34330: PUSH
34331: FOR_IN
34332: IFFALSE 34365
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34334: LD_VAR 0 8
34338: PPUSH
34339: CALL_OW 250
34343: PPUSH
34344: LD_VAR 0 8
34348: PPUSH
34349: CALL_OW 251
34353: PPUSH
34354: LD_VAR 0 16
34358: PPUSH
34359: CALL_OW 441
34363: GO 34331
34365: POP
34366: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34367: LD_VAR 0 18
34371: PPUSH
34372: LD_INT 2
34374: PUSH
34375: LD_INT 30
34377: PUSH
34378: LD_INT 32
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 30
34387: PUSH
34388: LD_INT 33
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: PPUSH
34400: CALL_OW 72
34404: IFFALSE 34492
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34406: LD_ADDR_VAR 0 8
34410: PUSH
34411: LD_VAR 0 18
34415: PPUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 30
34421: PUSH
34422: LD_INT 32
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 30
34431: PUSH
34432: LD_INT 33
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: LIST
34443: PPUSH
34444: CALL_OW 72
34448: PUSH
34449: FOR_IN
34450: IFFALSE 34490
// begin if not GetBWeapon ( i ) then
34452: LD_VAR 0 8
34456: PPUSH
34457: CALL_OW 269
34461: NOT
34462: IFFALSE 34488
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34464: LD_VAR 0 8
34468: PPUSH
34469: LD_VAR 0 8
34473: PPUSH
34474: LD_VAR 0 2
34478: PPUSH
34479: CALL 35738 0 2
34483: PPUSH
34484: CALL_OW 431
// end ;
34488: GO 34449
34490: POP
34491: POP
// end ; for i = 1 to personel do
34492: LD_ADDR_VAR 0 8
34496: PUSH
34497: DOUBLE
34498: LD_INT 1
34500: DEC
34501: ST_TO_ADDR
34502: LD_VAR 0 6
34506: PUSH
34507: FOR_TO
34508: IFFALSE 35572
// begin if i > 4 then
34510: LD_VAR 0 8
34514: PUSH
34515: LD_INT 4
34517: GREATER
34518: IFFALSE 34522
// break ;
34520: GO 35572
// case i of 1 :
34522: LD_VAR 0 8
34526: PUSH
34527: LD_INT 1
34529: DOUBLE
34530: EQUAL
34531: IFTRUE 34535
34533: GO 34615
34535: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34536: LD_ADDR_VAR 0 12
34540: PUSH
34541: LD_VAR 0 18
34545: PPUSH
34546: LD_INT 22
34548: PUSH
34549: LD_VAR 0 16
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 58
34560: PUSH
34561: EMPTY
34562: LIST
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: LD_INT 30
34569: PUSH
34570: LD_INT 32
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 30
34579: PUSH
34580: LD_INT 4
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 30
34589: PUSH
34590: LD_INT 5
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: LIST
34607: PPUSH
34608: CALL_OW 72
34612: ST_TO_ADDR
34613: GO 34837
34615: LD_INT 2
34617: DOUBLE
34618: EQUAL
34619: IFTRUE 34623
34621: GO 34685
34623: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34624: LD_ADDR_VAR 0 12
34628: PUSH
34629: LD_VAR 0 18
34633: PPUSH
34634: LD_INT 22
34636: PUSH
34637: LD_VAR 0 16
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 2
34648: PUSH
34649: LD_INT 30
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 30
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: LIST
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PPUSH
34678: CALL_OW 72
34682: ST_TO_ADDR
34683: GO 34837
34685: LD_INT 3
34687: DOUBLE
34688: EQUAL
34689: IFTRUE 34693
34691: GO 34755
34693: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34694: LD_ADDR_VAR 0 12
34698: PUSH
34699: LD_VAR 0 18
34703: PPUSH
34704: LD_INT 22
34706: PUSH
34707: LD_VAR 0 16
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: LD_INT 30
34721: PUSH
34722: LD_INT 2
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 30
34731: PUSH
34732: LD_INT 3
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PPUSH
34748: CALL_OW 72
34752: ST_TO_ADDR
34753: GO 34837
34755: LD_INT 4
34757: DOUBLE
34758: EQUAL
34759: IFTRUE 34763
34761: GO 34836
34763: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34764: LD_ADDR_VAR 0 12
34768: PUSH
34769: LD_VAR 0 18
34773: PPUSH
34774: LD_INT 22
34776: PUSH
34777: LD_VAR 0 16
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 2
34788: PUSH
34789: LD_INT 30
34791: PUSH
34792: LD_INT 6
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 30
34801: PUSH
34802: LD_INT 7
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 30
34811: PUSH
34812: LD_INT 8
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PPUSH
34829: CALL_OW 72
34833: ST_TO_ADDR
34834: GO 34837
34836: POP
// if i = 1 then
34837: LD_VAR 0 8
34841: PUSH
34842: LD_INT 1
34844: EQUAL
34845: IFFALSE 34956
// begin tmp := [ ] ;
34847: LD_ADDR_VAR 0 19
34851: PUSH
34852: EMPTY
34853: ST_TO_ADDR
// for j in f do
34854: LD_ADDR_VAR 0 9
34858: PUSH
34859: LD_VAR 0 12
34863: PUSH
34864: FOR_IN
34865: IFFALSE 34938
// if GetBType ( j ) = b_bunker then
34867: LD_VAR 0 9
34871: PPUSH
34872: CALL_OW 266
34876: PUSH
34877: LD_INT 32
34879: EQUAL
34880: IFFALSE 34907
// tmp := Insert ( tmp , 1 , j ) else
34882: LD_ADDR_VAR 0 19
34886: PUSH
34887: LD_VAR 0 19
34891: PPUSH
34892: LD_INT 1
34894: PPUSH
34895: LD_VAR 0 9
34899: PPUSH
34900: CALL_OW 2
34904: ST_TO_ADDR
34905: GO 34936
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34907: LD_ADDR_VAR 0 19
34911: PUSH
34912: LD_VAR 0 19
34916: PPUSH
34917: LD_VAR 0 19
34921: PUSH
34922: LD_INT 1
34924: PLUS
34925: PPUSH
34926: LD_VAR 0 9
34930: PPUSH
34931: CALL_OW 2
34935: ST_TO_ADDR
34936: GO 34864
34938: POP
34939: POP
// if tmp then
34940: LD_VAR 0 19
34944: IFFALSE 34956
// f := tmp ;
34946: LD_ADDR_VAR 0 12
34950: PUSH
34951: LD_VAR 0 19
34955: ST_TO_ADDR
// end ; x := personel [ i ] ;
34956: LD_ADDR_VAR 0 13
34960: PUSH
34961: LD_VAR 0 6
34965: PUSH
34966: LD_VAR 0 8
34970: ARRAY
34971: ST_TO_ADDR
// if x = - 1 then
34972: LD_VAR 0 13
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: EQUAL
34981: IFFALSE 35190
// begin for j in f do
34983: LD_ADDR_VAR 0 9
34987: PUSH
34988: LD_VAR 0 12
34992: PUSH
34993: FOR_IN
34994: IFFALSE 35186
// repeat InitHc ;
34996: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35000: LD_VAR 0 9
35004: PPUSH
35005: CALL_OW 266
35009: PUSH
35010: LD_INT 5
35012: EQUAL
35013: IFFALSE 35083
// begin if UnitsInside ( j ) < 3 then
35015: LD_VAR 0 9
35019: PPUSH
35020: CALL_OW 313
35024: PUSH
35025: LD_INT 3
35027: LESS
35028: IFFALSE 35064
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35030: LD_INT 0
35032: PPUSH
35033: LD_INT 5
35035: PUSH
35036: LD_INT 8
35038: PUSH
35039: LD_INT 9
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: PUSH
35047: LD_VAR 0 17
35051: ARRAY
35052: PPUSH
35053: LD_VAR 0 4
35057: PPUSH
35058: CALL_OW 380
35062: GO 35081
// PrepareHuman ( false , i , skill ) ;
35064: LD_INT 0
35066: PPUSH
35067: LD_VAR 0 8
35071: PPUSH
35072: LD_VAR 0 4
35076: PPUSH
35077: CALL_OW 380
// end else
35081: GO 35100
// PrepareHuman ( false , i , skill ) ;
35083: LD_INT 0
35085: PPUSH
35086: LD_VAR 0 8
35090: PPUSH
35091: LD_VAR 0 4
35095: PPUSH
35096: CALL_OW 380
// un := CreateHuman ;
35100: LD_ADDR_VAR 0 14
35104: PUSH
35105: CALL_OW 44
35109: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35110: LD_ADDR_VAR 0 7
35114: PUSH
35115: LD_VAR 0 7
35119: PPUSH
35120: LD_INT 1
35122: PPUSH
35123: LD_VAR 0 14
35127: PPUSH
35128: CALL_OW 2
35132: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35133: LD_VAR 0 14
35137: PPUSH
35138: LD_VAR 0 9
35142: PPUSH
35143: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35147: LD_VAR 0 9
35151: PPUSH
35152: CALL_OW 313
35156: PUSH
35157: LD_INT 6
35159: EQUAL
35160: PUSH
35161: LD_VAR 0 9
35165: PPUSH
35166: CALL_OW 266
35170: PUSH
35171: LD_INT 32
35173: PUSH
35174: LD_INT 31
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: IN
35181: OR
35182: IFFALSE 34996
35184: GO 34993
35186: POP
35187: POP
// end else
35188: GO 35570
// for j = 1 to x do
35190: LD_ADDR_VAR 0 9
35194: PUSH
35195: DOUBLE
35196: LD_INT 1
35198: DEC
35199: ST_TO_ADDR
35200: LD_VAR 0 13
35204: PUSH
35205: FOR_TO
35206: IFFALSE 35568
// begin InitHc ;
35208: CALL_OW 19
// if not f then
35212: LD_VAR 0 12
35216: NOT
35217: IFFALSE 35306
// begin PrepareHuman ( false , i , skill ) ;
35219: LD_INT 0
35221: PPUSH
35222: LD_VAR 0 8
35226: PPUSH
35227: LD_VAR 0 4
35231: PPUSH
35232: CALL_OW 380
// un := CreateHuman ;
35236: LD_ADDR_VAR 0 14
35240: PUSH
35241: CALL_OW 44
35245: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35246: LD_ADDR_VAR 0 7
35250: PUSH
35251: LD_VAR 0 7
35255: PPUSH
35256: LD_INT 1
35258: PPUSH
35259: LD_VAR 0 14
35263: PPUSH
35264: CALL_OW 2
35268: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35269: LD_VAR 0 14
35273: PPUSH
35274: LD_VAR 0 1
35278: PPUSH
35279: CALL_OW 250
35283: PPUSH
35284: LD_VAR 0 1
35288: PPUSH
35289: CALL_OW 251
35293: PPUSH
35294: LD_INT 10
35296: PPUSH
35297: LD_INT 0
35299: PPUSH
35300: CALL_OW 50
// continue ;
35304: GO 35205
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35306: LD_VAR 0 12
35310: PUSH
35311: LD_INT 1
35313: ARRAY
35314: PPUSH
35315: CALL_OW 313
35319: PUSH
35320: LD_VAR 0 12
35324: PUSH
35325: LD_INT 1
35327: ARRAY
35328: PPUSH
35329: CALL_OW 266
35333: PUSH
35334: LD_INT 32
35336: PUSH
35337: LD_INT 31
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: IN
35344: AND
35345: PUSH
35346: LD_VAR 0 12
35350: PUSH
35351: LD_INT 1
35353: ARRAY
35354: PPUSH
35355: CALL_OW 313
35359: PUSH
35360: LD_INT 6
35362: EQUAL
35363: OR
35364: IFFALSE 35384
// f := Delete ( f , 1 ) ;
35366: LD_ADDR_VAR 0 12
35370: PUSH
35371: LD_VAR 0 12
35375: PPUSH
35376: LD_INT 1
35378: PPUSH
35379: CALL_OW 3
35383: ST_TO_ADDR
// if not f then
35384: LD_VAR 0 12
35388: NOT
35389: IFFALSE 35407
// begin x := x + 2 ;
35391: LD_ADDR_VAR 0 13
35395: PUSH
35396: LD_VAR 0 13
35400: PUSH
35401: LD_INT 2
35403: PLUS
35404: ST_TO_ADDR
// continue ;
35405: GO 35205
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35407: LD_VAR 0 12
35411: PUSH
35412: LD_INT 1
35414: ARRAY
35415: PPUSH
35416: CALL_OW 266
35420: PUSH
35421: LD_INT 5
35423: EQUAL
35424: IFFALSE 35498
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35426: LD_VAR 0 12
35430: PUSH
35431: LD_INT 1
35433: ARRAY
35434: PPUSH
35435: CALL_OW 313
35439: PUSH
35440: LD_INT 3
35442: LESS
35443: IFFALSE 35479
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35445: LD_INT 0
35447: PPUSH
35448: LD_INT 5
35450: PUSH
35451: LD_INT 8
35453: PUSH
35454: LD_INT 9
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: PUSH
35462: LD_VAR 0 17
35466: ARRAY
35467: PPUSH
35468: LD_VAR 0 4
35472: PPUSH
35473: CALL_OW 380
35477: GO 35496
// PrepareHuman ( false , i , skill ) ;
35479: LD_INT 0
35481: PPUSH
35482: LD_VAR 0 8
35486: PPUSH
35487: LD_VAR 0 4
35491: PPUSH
35492: CALL_OW 380
// end else
35496: GO 35515
// PrepareHuman ( false , i , skill ) ;
35498: LD_INT 0
35500: PPUSH
35501: LD_VAR 0 8
35505: PPUSH
35506: LD_VAR 0 4
35510: PPUSH
35511: CALL_OW 380
// un := CreateHuman ;
35515: LD_ADDR_VAR 0 14
35519: PUSH
35520: CALL_OW 44
35524: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35525: LD_ADDR_VAR 0 7
35529: PUSH
35530: LD_VAR 0 7
35534: PPUSH
35535: LD_INT 1
35537: PPUSH
35538: LD_VAR 0 14
35542: PPUSH
35543: CALL_OW 2
35547: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35548: LD_VAR 0 14
35552: PPUSH
35553: LD_VAR 0 12
35557: PUSH
35558: LD_INT 1
35560: ARRAY
35561: PPUSH
35562: CALL_OW 52
// end ;
35566: GO 35205
35568: POP
35569: POP
// end ;
35570: GO 34507
35572: POP
35573: POP
// result := result ^ buildings ;
35574: LD_ADDR_VAR 0 7
35578: PUSH
35579: LD_VAR 0 7
35583: PUSH
35584: LD_VAR 0 18
35588: ADD
35589: ST_TO_ADDR
// end else
35590: GO 35733
// begin for i = 1 to personel do
35592: LD_ADDR_VAR 0 8
35596: PUSH
35597: DOUBLE
35598: LD_INT 1
35600: DEC
35601: ST_TO_ADDR
35602: LD_VAR 0 6
35606: PUSH
35607: FOR_TO
35608: IFFALSE 35731
// begin if i > 4 then
35610: LD_VAR 0 8
35614: PUSH
35615: LD_INT 4
35617: GREATER
35618: IFFALSE 35622
// break ;
35620: GO 35731
// x := personel [ i ] ;
35622: LD_ADDR_VAR 0 13
35626: PUSH
35627: LD_VAR 0 6
35631: PUSH
35632: LD_VAR 0 8
35636: ARRAY
35637: ST_TO_ADDR
// if x = - 1 then
35638: LD_VAR 0 13
35642: PUSH
35643: LD_INT 1
35645: NEG
35646: EQUAL
35647: IFFALSE 35651
// continue ;
35649: GO 35607
// PrepareHuman ( false , i , skill ) ;
35651: LD_INT 0
35653: PPUSH
35654: LD_VAR 0 8
35658: PPUSH
35659: LD_VAR 0 4
35663: PPUSH
35664: CALL_OW 380
// un := CreateHuman ;
35668: LD_ADDR_VAR 0 14
35672: PUSH
35673: CALL_OW 44
35677: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35678: LD_VAR 0 14
35682: PPUSH
35683: LD_VAR 0 1
35687: PPUSH
35688: CALL_OW 250
35692: PPUSH
35693: LD_VAR 0 1
35697: PPUSH
35698: CALL_OW 251
35702: PPUSH
35703: LD_INT 10
35705: PPUSH
35706: LD_INT 0
35708: PPUSH
35709: CALL_OW 50
// result := result ^ un ;
35713: LD_ADDR_VAR 0 7
35717: PUSH
35718: LD_VAR 0 7
35722: PUSH
35723: LD_VAR 0 14
35727: ADD
35728: ST_TO_ADDR
// end ;
35729: GO 35607
35731: POP
35732: POP
// end ; end ;
35733: LD_VAR 0 7
35737: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35738: LD_INT 0
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
35746: PPUSH
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
35751: PPUSH
35752: PPUSH
35753: PPUSH
35754: PPUSH
35755: PPUSH
// result := false ;
35756: LD_ADDR_VAR 0 3
35760: PUSH
35761: LD_INT 0
35763: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35764: LD_VAR 0 1
35768: NOT
35769: PUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL_OW 266
35779: PUSH
35780: LD_INT 32
35782: PUSH
35783: LD_INT 33
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: IN
35790: NOT
35791: OR
35792: IFFALSE 35796
// exit ;
35794: GO 36905
// nat := GetNation ( tower ) ;
35796: LD_ADDR_VAR 0 12
35800: PUSH
35801: LD_VAR 0 1
35805: PPUSH
35806: CALL_OW 248
35810: ST_TO_ADDR
// side := GetSide ( tower ) ;
35811: LD_ADDR_VAR 0 16
35815: PUSH
35816: LD_VAR 0 1
35820: PPUSH
35821: CALL_OW 255
35825: ST_TO_ADDR
// x := GetX ( tower ) ;
35826: LD_ADDR_VAR 0 10
35830: PUSH
35831: LD_VAR 0 1
35835: PPUSH
35836: CALL_OW 250
35840: ST_TO_ADDR
// y := GetY ( tower ) ;
35841: LD_ADDR_VAR 0 11
35845: PUSH
35846: LD_VAR 0 1
35850: PPUSH
35851: CALL_OW 251
35855: ST_TO_ADDR
// if not x or not y then
35856: LD_VAR 0 10
35860: NOT
35861: PUSH
35862: LD_VAR 0 11
35866: NOT
35867: OR
35868: IFFALSE 35872
// exit ;
35870: GO 36905
// weapon := 0 ;
35872: LD_ADDR_VAR 0 18
35876: PUSH
35877: LD_INT 0
35879: ST_TO_ADDR
// fac_list := [ ] ;
35880: LD_ADDR_VAR 0 17
35884: PUSH
35885: EMPTY
35886: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35887: LD_ADDR_VAR 0 6
35891: PUSH
35892: LD_VAR 0 1
35896: PPUSH
35897: CALL_OW 274
35901: PPUSH
35902: LD_VAR 0 2
35906: PPUSH
35907: LD_INT 0
35909: PPUSH
35910: CALL 33476 0 3
35914: PPUSH
35915: LD_INT 30
35917: PUSH
35918: LD_INT 3
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PPUSH
35925: CALL_OW 72
35929: ST_TO_ADDR
// if not factories then
35930: LD_VAR 0 6
35934: NOT
35935: IFFALSE 35939
// exit ;
35937: GO 36905
// for i in factories do
35939: LD_ADDR_VAR 0 8
35943: PUSH
35944: LD_VAR 0 6
35948: PUSH
35949: FOR_IN
35950: IFFALSE 35975
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35952: LD_ADDR_VAR 0 17
35956: PUSH
35957: LD_VAR 0 17
35961: PUSH
35962: LD_VAR 0 8
35966: PPUSH
35967: CALL_OW 478
35971: UNION
35972: ST_TO_ADDR
35973: GO 35949
35975: POP
35976: POP
// if not fac_list then
35977: LD_VAR 0 17
35981: NOT
35982: IFFALSE 35986
// exit ;
35984: GO 36905
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35986: LD_ADDR_VAR 0 5
35990: PUSH
35991: LD_INT 4
35993: PUSH
35994: LD_INT 5
35996: PUSH
35997: LD_INT 9
35999: PUSH
36000: LD_INT 10
36002: PUSH
36003: LD_INT 6
36005: PUSH
36006: LD_INT 7
36008: PUSH
36009: LD_INT 11
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 27
36023: PUSH
36024: LD_INT 28
36026: PUSH
36027: LD_INT 26
36029: PUSH
36030: LD_INT 30
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 43
36041: PUSH
36042: LD_INT 44
36044: PUSH
36045: LD_INT 46
36047: PUSH
36048: LD_INT 45
36050: PUSH
36051: LD_INT 47
36053: PUSH
36054: LD_INT 49
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: LIST
36069: PUSH
36070: LD_VAR 0 12
36074: ARRAY
36075: ST_TO_ADDR
// list := list isect fac_list ;
36076: LD_ADDR_VAR 0 5
36080: PUSH
36081: LD_VAR 0 5
36085: PUSH
36086: LD_VAR 0 17
36090: ISECT
36091: ST_TO_ADDR
// if not list then
36092: LD_VAR 0 5
36096: NOT
36097: IFFALSE 36101
// exit ;
36099: GO 36905
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36101: LD_VAR 0 12
36105: PUSH
36106: LD_INT 3
36108: EQUAL
36109: PUSH
36110: LD_INT 49
36112: PUSH
36113: LD_VAR 0 5
36117: IN
36118: AND
36119: PUSH
36120: LD_INT 31
36122: PPUSH
36123: LD_VAR 0 16
36127: PPUSH
36128: CALL_OW 321
36132: PUSH
36133: LD_INT 2
36135: EQUAL
36136: AND
36137: IFFALSE 36197
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36139: LD_INT 22
36141: PUSH
36142: LD_VAR 0 16
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 35
36153: PUSH
36154: LD_INT 49
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 91
36163: PUSH
36164: LD_VAR 0 1
36168: PUSH
36169: LD_INT 10
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: LIST
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: LIST
36181: PPUSH
36182: CALL_OW 69
36186: NOT
36187: IFFALSE 36197
// weapon := ru_time_lapser ;
36189: LD_ADDR_VAR 0 18
36193: PUSH
36194: LD_INT 49
36196: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36197: LD_VAR 0 12
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 2
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: IN
36212: PUSH
36213: LD_INT 11
36215: PUSH
36216: LD_VAR 0 5
36220: IN
36221: PUSH
36222: LD_INT 30
36224: PUSH
36225: LD_VAR 0 5
36229: IN
36230: OR
36231: AND
36232: PUSH
36233: LD_INT 6
36235: PPUSH
36236: LD_VAR 0 16
36240: PPUSH
36241: CALL_OW 321
36245: PUSH
36246: LD_INT 2
36248: EQUAL
36249: AND
36250: IFFALSE 36415
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36252: LD_INT 22
36254: PUSH
36255: LD_VAR 0 16
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 2
36266: PUSH
36267: LD_INT 35
36269: PUSH
36270: LD_INT 11
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 35
36279: PUSH
36280: LD_INT 30
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 91
36294: PUSH
36295: LD_VAR 0 1
36299: PUSH
36300: LD_INT 18
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: PPUSH
36313: CALL_OW 69
36317: NOT
36318: PUSH
36319: LD_INT 22
36321: PUSH
36322: LD_VAR 0 16
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 2
36333: PUSH
36334: LD_INT 30
36336: PUSH
36337: LD_INT 32
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 30
36346: PUSH
36347: LD_INT 33
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 91
36361: PUSH
36362: LD_VAR 0 1
36366: PUSH
36367: LD_INT 12
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: LIST
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: LIST
36379: PUSH
36380: EMPTY
36381: LIST
36382: PPUSH
36383: CALL_OW 69
36387: PUSH
36388: LD_INT 2
36390: GREATER
36391: AND
36392: IFFALSE 36415
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36394: LD_ADDR_VAR 0 18
36398: PUSH
36399: LD_INT 11
36401: PUSH
36402: LD_INT 30
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_VAR 0 12
36413: ARRAY
36414: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36415: LD_VAR 0 18
36419: NOT
36420: PUSH
36421: LD_INT 40
36423: PPUSH
36424: LD_VAR 0 16
36428: PPUSH
36429: CALL_OW 321
36433: PUSH
36434: LD_INT 2
36436: EQUAL
36437: AND
36438: PUSH
36439: LD_INT 7
36441: PUSH
36442: LD_VAR 0 5
36446: IN
36447: PUSH
36448: LD_INT 28
36450: PUSH
36451: LD_VAR 0 5
36455: IN
36456: OR
36457: PUSH
36458: LD_INT 45
36460: PUSH
36461: LD_VAR 0 5
36465: IN
36466: OR
36467: AND
36468: IFFALSE 36722
// begin hex := GetHexInfo ( x , y ) ;
36470: LD_ADDR_VAR 0 4
36474: PUSH
36475: LD_VAR 0 10
36479: PPUSH
36480: LD_VAR 0 11
36484: PPUSH
36485: CALL_OW 546
36489: ST_TO_ADDR
// if hex [ 1 ] then
36490: LD_VAR 0 4
36494: PUSH
36495: LD_INT 1
36497: ARRAY
36498: IFFALSE 36502
// exit ;
36500: GO 36905
// height := hex [ 2 ] ;
36502: LD_ADDR_VAR 0 15
36506: PUSH
36507: LD_VAR 0 4
36511: PUSH
36512: LD_INT 2
36514: ARRAY
36515: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36516: LD_ADDR_VAR 0 14
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: LD_INT 2
36526: PUSH
36527: LD_INT 3
36529: PUSH
36530: LD_INT 5
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: ST_TO_ADDR
// for i in tmp do
36539: LD_ADDR_VAR 0 8
36543: PUSH
36544: LD_VAR 0 14
36548: PUSH
36549: FOR_IN
36550: IFFALSE 36720
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36552: LD_ADDR_VAR 0 9
36556: PUSH
36557: LD_VAR 0 10
36561: PPUSH
36562: LD_VAR 0 8
36566: PPUSH
36567: LD_INT 5
36569: PPUSH
36570: CALL_OW 272
36574: PUSH
36575: LD_VAR 0 11
36579: PPUSH
36580: LD_VAR 0 8
36584: PPUSH
36585: LD_INT 5
36587: PPUSH
36588: CALL_OW 273
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36597: LD_VAR 0 9
36601: PUSH
36602: LD_INT 1
36604: ARRAY
36605: PPUSH
36606: LD_VAR 0 9
36610: PUSH
36611: LD_INT 2
36613: ARRAY
36614: PPUSH
36615: CALL_OW 488
36619: IFFALSE 36718
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36621: LD_ADDR_VAR 0 4
36625: PUSH
36626: LD_VAR 0 9
36630: PUSH
36631: LD_INT 1
36633: ARRAY
36634: PPUSH
36635: LD_VAR 0 9
36639: PUSH
36640: LD_INT 2
36642: ARRAY
36643: PPUSH
36644: CALL_OW 546
36648: ST_TO_ADDR
// if hex [ 1 ] then
36649: LD_VAR 0 4
36653: PUSH
36654: LD_INT 1
36656: ARRAY
36657: IFFALSE 36661
// continue ;
36659: GO 36549
// h := hex [ 2 ] ;
36661: LD_ADDR_VAR 0 13
36665: PUSH
36666: LD_VAR 0 4
36670: PUSH
36671: LD_INT 2
36673: ARRAY
36674: ST_TO_ADDR
// if h + 7 < height then
36675: LD_VAR 0 13
36679: PUSH
36680: LD_INT 7
36682: PLUS
36683: PUSH
36684: LD_VAR 0 15
36688: LESS
36689: IFFALSE 36718
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36691: LD_ADDR_VAR 0 18
36695: PUSH
36696: LD_INT 7
36698: PUSH
36699: LD_INT 28
36701: PUSH
36702: LD_INT 45
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: PUSH
36710: LD_VAR 0 12
36714: ARRAY
36715: ST_TO_ADDR
// break ;
36716: GO 36720
// end ; end ; end ;
36718: GO 36549
36720: POP
36721: POP
// end ; if not weapon then
36722: LD_VAR 0 18
36726: NOT
36727: IFFALSE 36787
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36729: LD_ADDR_VAR 0 5
36733: PUSH
36734: LD_VAR 0 5
36738: PUSH
36739: LD_INT 11
36741: PUSH
36742: LD_INT 30
36744: PUSH
36745: LD_INT 49
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: DIFF
36753: ST_TO_ADDR
// if not list then
36754: LD_VAR 0 5
36758: NOT
36759: IFFALSE 36763
// exit ;
36761: GO 36905
// weapon := list [ rand ( 1 , list ) ] ;
36763: LD_ADDR_VAR 0 18
36767: PUSH
36768: LD_VAR 0 5
36772: PUSH
36773: LD_INT 1
36775: PPUSH
36776: LD_VAR 0 5
36780: PPUSH
36781: CALL_OW 12
36785: ARRAY
36786: ST_TO_ADDR
// end ; if weapon then
36787: LD_VAR 0 18
36791: IFFALSE 36905
// begin tmp := CostOfWeapon ( weapon ) ;
36793: LD_ADDR_VAR 0 14
36797: PUSH
36798: LD_VAR 0 18
36802: PPUSH
36803: CALL_OW 451
36807: ST_TO_ADDR
// j := GetBase ( tower ) ;
36808: LD_ADDR_VAR 0 9
36812: PUSH
36813: LD_VAR 0 1
36817: PPUSH
36818: CALL_OW 274
36822: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36823: LD_VAR 0 9
36827: PPUSH
36828: LD_INT 1
36830: PPUSH
36831: CALL_OW 275
36835: PUSH
36836: LD_VAR 0 14
36840: PUSH
36841: LD_INT 1
36843: ARRAY
36844: GREATEREQUAL
36845: PUSH
36846: LD_VAR 0 9
36850: PPUSH
36851: LD_INT 2
36853: PPUSH
36854: CALL_OW 275
36858: PUSH
36859: LD_VAR 0 14
36863: PUSH
36864: LD_INT 2
36866: ARRAY
36867: GREATEREQUAL
36868: AND
36869: PUSH
36870: LD_VAR 0 9
36874: PPUSH
36875: LD_INT 3
36877: PPUSH
36878: CALL_OW 275
36882: PUSH
36883: LD_VAR 0 14
36887: PUSH
36888: LD_INT 3
36890: ARRAY
36891: GREATEREQUAL
36892: AND
36893: IFFALSE 36905
// result := weapon ;
36895: LD_ADDR_VAR 0 3
36899: PUSH
36900: LD_VAR 0 18
36904: ST_TO_ADDR
// end ; end ;
36905: LD_VAR 0 3
36909: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36910: LD_INT 0
36912: PPUSH
36913: PPUSH
// result := true ;
36914: LD_ADDR_VAR 0 3
36918: PUSH
36919: LD_INT 1
36921: ST_TO_ADDR
// if array1 = array2 then
36922: LD_VAR 0 1
36926: PUSH
36927: LD_VAR 0 2
36931: EQUAL
36932: IFFALSE 36992
// begin for i = 1 to array1 do
36934: LD_ADDR_VAR 0 4
36938: PUSH
36939: DOUBLE
36940: LD_INT 1
36942: DEC
36943: ST_TO_ADDR
36944: LD_VAR 0 1
36948: PUSH
36949: FOR_TO
36950: IFFALSE 36988
// if array1 [ i ] <> array2 [ i ] then
36952: LD_VAR 0 1
36956: PUSH
36957: LD_VAR 0 4
36961: ARRAY
36962: PUSH
36963: LD_VAR 0 2
36967: PUSH
36968: LD_VAR 0 4
36972: ARRAY
36973: NONEQUAL
36974: IFFALSE 36986
// begin result := false ;
36976: LD_ADDR_VAR 0 3
36980: PUSH
36981: LD_INT 0
36983: ST_TO_ADDR
// break ;
36984: GO 36988
// end ;
36986: GO 36949
36988: POP
36989: POP
// end else
36990: GO 37000
// result := false ;
36992: LD_ADDR_VAR 0 3
36996: PUSH
36997: LD_INT 0
36999: ST_TO_ADDR
// end ;
37000: LD_VAR 0 3
37004: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37005: LD_INT 0
37007: PPUSH
37008: PPUSH
// if not array1 or not array2 then
37009: LD_VAR 0 1
37013: NOT
37014: PUSH
37015: LD_VAR 0 2
37019: NOT
37020: OR
37021: IFFALSE 37025
// exit ;
37023: GO 37089
// result := true ;
37025: LD_ADDR_VAR 0 3
37029: PUSH
37030: LD_INT 1
37032: ST_TO_ADDR
// for i = 1 to array1 do
37033: LD_ADDR_VAR 0 4
37037: PUSH
37038: DOUBLE
37039: LD_INT 1
37041: DEC
37042: ST_TO_ADDR
37043: LD_VAR 0 1
37047: PUSH
37048: FOR_TO
37049: IFFALSE 37087
// if array1 [ i ] <> array2 [ i ] then
37051: LD_VAR 0 1
37055: PUSH
37056: LD_VAR 0 4
37060: ARRAY
37061: PUSH
37062: LD_VAR 0 2
37066: PUSH
37067: LD_VAR 0 4
37071: ARRAY
37072: NONEQUAL
37073: IFFALSE 37085
// begin result := false ;
37075: LD_ADDR_VAR 0 3
37079: PUSH
37080: LD_INT 0
37082: ST_TO_ADDR
// break ;
37083: GO 37087
// end ;
37085: GO 37048
37087: POP
37088: POP
// end ;
37089: LD_VAR 0 3
37093: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37094: LD_INT 0
37096: PPUSH
37097: PPUSH
37098: PPUSH
// pom := GetBase ( fac ) ;
37099: LD_ADDR_VAR 0 5
37103: PUSH
37104: LD_VAR 0 1
37108: PPUSH
37109: CALL_OW 274
37113: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37114: LD_ADDR_VAR 0 4
37118: PUSH
37119: LD_VAR 0 2
37123: PUSH
37124: LD_INT 1
37126: ARRAY
37127: PPUSH
37128: LD_VAR 0 2
37132: PUSH
37133: LD_INT 2
37135: ARRAY
37136: PPUSH
37137: LD_VAR 0 2
37141: PUSH
37142: LD_INT 3
37144: ARRAY
37145: PPUSH
37146: LD_VAR 0 2
37150: PUSH
37151: LD_INT 4
37153: ARRAY
37154: PPUSH
37155: CALL_OW 449
37159: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37160: LD_ADDR_VAR 0 3
37164: PUSH
37165: LD_VAR 0 5
37169: PPUSH
37170: LD_INT 1
37172: PPUSH
37173: CALL_OW 275
37177: PUSH
37178: LD_VAR 0 4
37182: PUSH
37183: LD_INT 1
37185: ARRAY
37186: GREATEREQUAL
37187: PUSH
37188: LD_VAR 0 5
37192: PPUSH
37193: LD_INT 2
37195: PPUSH
37196: CALL_OW 275
37200: PUSH
37201: LD_VAR 0 4
37205: PUSH
37206: LD_INT 2
37208: ARRAY
37209: GREATEREQUAL
37210: AND
37211: PUSH
37212: LD_VAR 0 5
37216: PPUSH
37217: LD_INT 3
37219: PPUSH
37220: CALL_OW 275
37224: PUSH
37225: LD_VAR 0 4
37229: PUSH
37230: LD_INT 3
37232: ARRAY
37233: GREATEREQUAL
37234: AND
37235: ST_TO_ADDR
// end ;
37236: LD_VAR 0 3
37240: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37241: LD_INT 0
37243: PPUSH
37244: PPUSH
37245: PPUSH
37246: PPUSH
// pom := GetBase ( building ) ;
37247: LD_ADDR_VAR 0 3
37251: PUSH
37252: LD_VAR 0 1
37256: PPUSH
37257: CALL_OW 274
37261: ST_TO_ADDR
// if not pom then
37262: LD_VAR 0 3
37266: NOT
37267: IFFALSE 37271
// exit ;
37269: GO 37441
// btype := GetBType ( building ) ;
37271: LD_ADDR_VAR 0 5
37275: PUSH
37276: LD_VAR 0 1
37280: PPUSH
37281: CALL_OW 266
37285: ST_TO_ADDR
// if btype = b_armoury then
37286: LD_VAR 0 5
37290: PUSH
37291: LD_INT 4
37293: EQUAL
37294: IFFALSE 37304
// btype := b_barracks ;
37296: LD_ADDR_VAR 0 5
37300: PUSH
37301: LD_INT 5
37303: ST_TO_ADDR
// if btype = b_depot then
37304: LD_VAR 0 5
37308: PUSH
37309: LD_INT 0
37311: EQUAL
37312: IFFALSE 37322
// btype := b_warehouse ;
37314: LD_ADDR_VAR 0 5
37318: PUSH
37319: LD_INT 1
37321: ST_TO_ADDR
// if btype = b_workshop then
37322: LD_VAR 0 5
37326: PUSH
37327: LD_INT 2
37329: EQUAL
37330: IFFALSE 37340
// btype := b_factory ;
37332: LD_ADDR_VAR 0 5
37336: PUSH
37337: LD_INT 3
37339: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37340: LD_ADDR_VAR 0 4
37344: PUSH
37345: LD_VAR 0 5
37349: PPUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 248
37359: PPUSH
37360: CALL_OW 450
37364: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37365: LD_ADDR_VAR 0 2
37369: PUSH
37370: LD_VAR 0 3
37374: PPUSH
37375: LD_INT 1
37377: PPUSH
37378: CALL_OW 275
37382: PUSH
37383: LD_VAR 0 4
37387: PUSH
37388: LD_INT 1
37390: ARRAY
37391: GREATEREQUAL
37392: PUSH
37393: LD_VAR 0 3
37397: PPUSH
37398: LD_INT 2
37400: PPUSH
37401: CALL_OW 275
37405: PUSH
37406: LD_VAR 0 4
37410: PUSH
37411: LD_INT 2
37413: ARRAY
37414: GREATEREQUAL
37415: AND
37416: PUSH
37417: LD_VAR 0 3
37421: PPUSH
37422: LD_INT 3
37424: PPUSH
37425: CALL_OW 275
37429: PUSH
37430: LD_VAR 0 4
37434: PUSH
37435: LD_INT 3
37437: ARRAY
37438: GREATEREQUAL
37439: AND
37440: ST_TO_ADDR
// end ;
37441: LD_VAR 0 2
37445: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37446: LD_INT 0
37448: PPUSH
37449: PPUSH
37450: PPUSH
// pom := GetBase ( building ) ;
37451: LD_ADDR_VAR 0 4
37455: PUSH
37456: LD_VAR 0 1
37460: PPUSH
37461: CALL_OW 274
37465: ST_TO_ADDR
// if not pom then
37466: LD_VAR 0 4
37470: NOT
37471: IFFALSE 37475
// exit ;
37473: GO 37576
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37475: LD_ADDR_VAR 0 5
37479: PUSH
37480: LD_VAR 0 2
37484: PPUSH
37485: LD_VAR 0 1
37489: PPUSH
37490: CALL_OW 248
37494: PPUSH
37495: CALL_OW 450
37499: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37500: LD_ADDR_VAR 0 3
37504: PUSH
37505: LD_VAR 0 4
37509: PPUSH
37510: LD_INT 1
37512: PPUSH
37513: CALL_OW 275
37517: PUSH
37518: LD_VAR 0 5
37522: PUSH
37523: LD_INT 1
37525: ARRAY
37526: GREATEREQUAL
37527: PUSH
37528: LD_VAR 0 4
37532: PPUSH
37533: LD_INT 2
37535: PPUSH
37536: CALL_OW 275
37540: PUSH
37541: LD_VAR 0 5
37545: PUSH
37546: LD_INT 2
37548: ARRAY
37549: GREATEREQUAL
37550: AND
37551: PUSH
37552: LD_VAR 0 4
37556: PPUSH
37557: LD_INT 3
37559: PPUSH
37560: CALL_OW 275
37564: PUSH
37565: LD_VAR 0 5
37569: PUSH
37570: LD_INT 3
37572: ARRAY
37573: GREATEREQUAL
37574: AND
37575: ST_TO_ADDR
// end ;
37576: LD_VAR 0 3
37580: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37581: LD_INT 0
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
37592: PPUSH
37593: PPUSH
// result := false ;
37594: LD_ADDR_VAR 0 8
37598: PUSH
37599: LD_INT 0
37601: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37602: LD_VAR 0 5
37606: NOT
37607: PUSH
37608: LD_VAR 0 1
37612: NOT
37613: OR
37614: PUSH
37615: LD_VAR 0 2
37619: NOT
37620: OR
37621: PUSH
37622: LD_VAR 0 3
37626: NOT
37627: OR
37628: IFFALSE 37632
// exit ;
37630: GO 38446
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37632: LD_ADDR_VAR 0 14
37636: PUSH
37637: LD_VAR 0 1
37641: PPUSH
37642: LD_VAR 0 2
37646: PPUSH
37647: LD_VAR 0 3
37651: PPUSH
37652: LD_VAR 0 4
37656: PPUSH
37657: LD_VAR 0 5
37661: PUSH
37662: LD_INT 1
37664: ARRAY
37665: PPUSH
37666: CALL_OW 248
37670: PPUSH
37671: LD_INT 0
37673: PPUSH
37674: CALL 39679 0 6
37678: ST_TO_ADDR
// if not hexes then
37679: LD_VAR 0 14
37683: NOT
37684: IFFALSE 37688
// exit ;
37686: GO 38446
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37688: LD_ADDR_VAR 0 17
37692: PUSH
37693: LD_VAR 0 5
37697: PPUSH
37698: LD_INT 22
37700: PUSH
37701: LD_VAR 0 13
37705: PPUSH
37706: CALL_OW 255
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: LD_INT 30
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 30
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: LIST
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PPUSH
37747: CALL_OW 72
37751: ST_TO_ADDR
// for i = 1 to hexes do
37752: LD_ADDR_VAR 0 9
37756: PUSH
37757: DOUBLE
37758: LD_INT 1
37760: DEC
37761: ST_TO_ADDR
37762: LD_VAR 0 14
37766: PUSH
37767: FOR_TO
37768: IFFALSE 38444
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37770: LD_ADDR_VAR 0 13
37774: PUSH
37775: LD_VAR 0 14
37779: PUSH
37780: LD_VAR 0 9
37784: ARRAY
37785: PUSH
37786: LD_INT 1
37788: ARRAY
37789: PPUSH
37790: LD_VAR 0 14
37794: PUSH
37795: LD_VAR 0 9
37799: ARRAY
37800: PUSH
37801: LD_INT 2
37803: ARRAY
37804: PPUSH
37805: CALL_OW 428
37809: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37810: LD_VAR 0 14
37814: PUSH
37815: LD_VAR 0 9
37819: ARRAY
37820: PUSH
37821: LD_INT 1
37823: ARRAY
37824: PPUSH
37825: LD_VAR 0 14
37829: PUSH
37830: LD_VAR 0 9
37834: ARRAY
37835: PUSH
37836: LD_INT 2
37838: ARRAY
37839: PPUSH
37840: CALL_OW 351
37844: PUSH
37845: LD_VAR 0 14
37849: PUSH
37850: LD_VAR 0 9
37854: ARRAY
37855: PUSH
37856: LD_INT 1
37858: ARRAY
37859: PPUSH
37860: LD_VAR 0 14
37864: PUSH
37865: LD_VAR 0 9
37869: ARRAY
37870: PUSH
37871: LD_INT 2
37873: ARRAY
37874: PPUSH
37875: CALL_OW 488
37879: NOT
37880: OR
37881: PUSH
37882: LD_VAR 0 13
37886: PPUSH
37887: CALL_OW 247
37891: PUSH
37892: LD_INT 3
37894: EQUAL
37895: OR
37896: IFFALSE 37902
// exit ;
37898: POP
37899: POP
37900: GO 38446
// if not tmp then
37902: LD_VAR 0 13
37906: NOT
37907: IFFALSE 37911
// continue ;
37909: GO 37767
// result := true ;
37911: LD_ADDR_VAR 0 8
37915: PUSH
37916: LD_INT 1
37918: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37919: LD_VAR 0 6
37923: PUSH
37924: LD_VAR 0 13
37928: PPUSH
37929: CALL_OW 247
37933: PUSH
37934: LD_INT 2
37936: EQUAL
37937: AND
37938: PUSH
37939: LD_VAR 0 13
37943: PPUSH
37944: CALL_OW 263
37948: PUSH
37949: LD_INT 1
37951: EQUAL
37952: AND
37953: IFFALSE 38117
// begin if IsDrivenBy ( tmp ) then
37955: LD_VAR 0 13
37959: PPUSH
37960: CALL_OW 311
37964: IFFALSE 37968
// continue ;
37966: GO 37767
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37968: LD_VAR 0 6
37972: PPUSH
37973: LD_INT 3
37975: PUSH
37976: LD_INT 60
37978: PUSH
37979: EMPTY
37980: LIST
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 3
37988: PUSH
37989: LD_INT 55
37991: PUSH
37992: EMPTY
37993: LIST
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PPUSH
38003: CALL_OW 72
38007: IFFALSE 38115
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38009: LD_ADDR_VAR 0 18
38013: PUSH
38014: LD_VAR 0 6
38018: PPUSH
38019: LD_INT 3
38021: PUSH
38022: LD_INT 60
38024: PUSH
38025: EMPTY
38026: LIST
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 3
38034: PUSH
38035: LD_INT 55
38037: PUSH
38038: EMPTY
38039: LIST
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PPUSH
38049: CALL_OW 72
38053: PUSH
38054: LD_INT 1
38056: ARRAY
38057: ST_TO_ADDR
// if IsInUnit ( driver ) then
38058: LD_VAR 0 18
38062: PPUSH
38063: CALL_OW 310
38067: IFFALSE 38078
// ComExit ( driver ) ;
38069: LD_VAR 0 18
38073: PPUSH
38074: CALL 63367 0 1
// AddComEnterUnit ( driver , tmp ) ;
38078: LD_VAR 0 18
38082: PPUSH
38083: LD_VAR 0 13
38087: PPUSH
38088: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38092: LD_VAR 0 18
38096: PPUSH
38097: LD_VAR 0 7
38101: PPUSH
38102: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38106: LD_VAR 0 18
38110: PPUSH
38111: CALL_OW 181
// end ; continue ;
38115: GO 37767
// end ; if not cleaners or not tmp in cleaners then
38117: LD_VAR 0 6
38121: NOT
38122: PUSH
38123: LD_VAR 0 13
38127: PUSH
38128: LD_VAR 0 6
38132: IN
38133: NOT
38134: OR
38135: IFFALSE 38442
// begin if dep then
38137: LD_VAR 0 17
38141: IFFALSE 38277
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38143: LD_ADDR_VAR 0 16
38147: PUSH
38148: LD_VAR 0 17
38152: PUSH
38153: LD_INT 1
38155: ARRAY
38156: PPUSH
38157: CALL_OW 250
38161: PPUSH
38162: LD_VAR 0 17
38166: PUSH
38167: LD_INT 1
38169: ARRAY
38170: PPUSH
38171: CALL_OW 254
38175: PPUSH
38176: LD_INT 5
38178: PPUSH
38179: CALL_OW 272
38183: PUSH
38184: LD_VAR 0 17
38188: PUSH
38189: LD_INT 1
38191: ARRAY
38192: PPUSH
38193: CALL_OW 251
38197: PPUSH
38198: LD_VAR 0 17
38202: PUSH
38203: LD_INT 1
38205: ARRAY
38206: PPUSH
38207: CALL_OW 254
38211: PPUSH
38212: LD_INT 5
38214: PPUSH
38215: CALL_OW 273
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38224: LD_VAR 0 16
38228: PUSH
38229: LD_INT 1
38231: ARRAY
38232: PPUSH
38233: LD_VAR 0 16
38237: PUSH
38238: LD_INT 2
38240: ARRAY
38241: PPUSH
38242: CALL_OW 488
38246: IFFALSE 38277
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38248: LD_VAR 0 13
38252: PPUSH
38253: LD_VAR 0 16
38257: PUSH
38258: LD_INT 1
38260: ARRAY
38261: PPUSH
38262: LD_VAR 0 16
38266: PUSH
38267: LD_INT 2
38269: ARRAY
38270: PPUSH
38271: CALL_OW 111
// continue ;
38275: GO 37767
// end ; end ; r := GetDir ( tmp ) ;
38277: LD_ADDR_VAR 0 15
38281: PUSH
38282: LD_VAR 0 13
38286: PPUSH
38287: CALL_OW 254
38291: ST_TO_ADDR
// if r = 5 then
38292: LD_VAR 0 15
38296: PUSH
38297: LD_INT 5
38299: EQUAL
38300: IFFALSE 38310
// r := 0 ;
38302: LD_ADDR_VAR 0 15
38306: PUSH
38307: LD_INT 0
38309: ST_TO_ADDR
// for j = r to 5 do
38310: LD_ADDR_VAR 0 10
38314: PUSH
38315: DOUBLE
38316: LD_VAR 0 15
38320: DEC
38321: ST_TO_ADDR
38322: LD_INT 5
38324: PUSH
38325: FOR_TO
38326: IFFALSE 38440
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38328: LD_ADDR_VAR 0 11
38332: PUSH
38333: LD_VAR 0 13
38337: PPUSH
38338: CALL_OW 250
38342: PPUSH
38343: LD_VAR 0 10
38347: PPUSH
38348: LD_INT 2
38350: PPUSH
38351: CALL_OW 272
38355: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38356: LD_ADDR_VAR 0 12
38360: PUSH
38361: LD_VAR 0 13
38365: PPUSH
38366: CALL_OW 251
38370: PPUSH
38371: LD_VAR 0 10
38375: PPUSH
38376: LD_INT 2
38378: PPUSH
38379: CALL_OW 273
38383: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38384: LD_VAR 0 11
38388: PPUSH
38389: LD_VAR 0 12
38393: PPUSH
38394: CALL_OW 488
38398: PUSH
38399: LD_VAR 0 11
38403: PPUSH
38404: LD_VAR 0 12
38408: PPUSH
38409: CALL_OW 428
38413: NOT
38414: AND
38415: IFFALSE 38438
// begin ComMoveXY ( tmp , _x , _y ) ;
38417: LD_VAR 0 13
38421: PPUSH
38422: LD_VAR 0 11
38426: PPUSH
38427: LD_VAR 0 12
38431: PPUSH
38432: CALL_OW 111
// break ;
38436: GO 38440
// end ; end ;
38438: GO 38325
38440: POP
38441: POP
// end ; end ;
38442: GO 37767
38444: POP
38445: POP
// end ;
38446: LD_VAR 0 8
38450: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38451: LD_INT 0
38453: PPUSH
// result := true ;
38454: LD_ADDR_VAR 0 3
38458: PUSH
38459: LD_INT 1
38461: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38462: LD_VAR 0 2
38466: PUSH
38467: LD_INT 24
38469: DOUBLE
38470: EQUAL
38471: IFTRUE 38481
38473: LD_INT 33
38475: DOUBLE
38476: EQUAL
38477: IFTRUE 38481
38479: GO 38506
38481: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38482: LD_ADDR_VAR 0 3
38486: PUSH
38487: LD_INT 32
38489: PPUSH
38490: LD_VAR 0 1
38494: PPUSH
38495: CALL_OW 321
38499: PUSH
38500: LD_INT 2
38502: EQUAL
38503: ST_TO_ADDR
38504: GO 38822
38506: LD_INT 20
38508: DOUBLE
38509: EQUAL
38510: IFTRUE 38514
38512: GO 38539
38514: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38515: LD_ADDR_VAR 0 3
38519: PUSH
38520: LD_INT 6
38522: PPUSH
38523: LD_VAR 0 1
38527: PPUSH
38528: CALL_OW 321
38532: PUSH
38533: LD_INT 2
38535: EQUAL
38536: ST_TO_ADDR
38537: GO 38822
38539: LD_INT 22
38541: DOUBLE
38542: EQUAL
38543: IFTRUE 38553
38545: LD_INT 36
38547: DOUBLE
38548: EQUAL
38549: IFTRUE 38553
38551: GO 38578
38553: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38554: LD_ADDR_VAR 0 3
38558: PUSH
38559: LD_INT 15
38561: PPUSH
38562: LD_VAR 0 1
38566: PPUSH
38567: CALL_OW 321
38571: PUSH
38572: LD_INT 2
38574: EQUAL
38575: ST_TO_ADDR
38576: GO 38822
38578: LD_INT 30
38580: DOUBLE
38581: EQUAL
38582: IFTRUE 38586
38584: GO 38611
38586: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38587: LD_ADDR_VAR 0 3
38591: PUSH
38592: LD_INT 20
38594: PPUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: CALL_OW 321
38604: PUSH
38605: LD_INT 2
38607: EQUAL
38608: ST_TO_ADDR
38609: GO 38822
38611: LD_INT 28
38613: DOUBLE
38614: EQUAL
38615: IFTRUE 38625
38617: LD_INT 21
38619: DOUBLE
38620: EQUAL
38621: IFTRUE 38625
38623: GO 38650
38625: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38626: LD_ADDR_VAR 0 3
38630: PUSH
38631: LD_INT 21
38633: PPUSH
38634: LD_VAR 0 1
38638: PPUSH
38639: CALL_OW 321
38643: PUSH
38644: LD_INT 2
38646: EQUAL
38647: ST_TO_ADDR
38648: GO 38822
38650: LD_INT 16
38652: DOUBLE
38653: EQUAL
38654: IFTRUE 38658
38656: GO 38683
38658: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38659: LD_ADDR_VAR 0 3
38663: PUSH
38664: LD_INT 84
38666: PPUSH
38667: LD_VAR 0 1
38671: PPUSH
38672: CALL_OW 321
38676: PUSH
38677: LD_INT 2
38679: EQUAL
38680: ST_TO_ADDR
38681: GO 38822
38683: LD_INT 19
38685: DOUBLE
38686: EQUAL
38687: IFTRUE 38697
38689: LD_INT 23
38691: DOUBLE
38692: EQUAL
38693: IFTRUE 38697
38695: GO 38722
38697: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38698: LD_ADDR_VAR 0 3
38702: PUSH
38703: LD_INT 83
38705: PPUSH
38706: LD_VAR 0 1
38710: PPUSH
38711: CALL_OW 321
38715: PUSH
38716: LD_INT 2
38718: EQUAL
38719: ST_TO_ADDR
38720: GO 38822
38722: LD_INT 17
38724: DOUBLE
38725: EQUAL
38726: IFTRUE 38730
38728: GO 38755
38730: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38731: LD_ADDR_VAR 0 3
38735: PUSH
38736: LD_INT 39
38738: PPUSH
38739: LD_VAR 0 1
38743: PPUSH
38744: CALL_OW 321
38748: PUSH
38749: LD_INT 2
38751: EQUAL
38752: ST_TO_ADDR
38753: GO 38822
38755: LD_INT 18
38757: DOUBLE
38758: EQUAL
38759: IFTRUE 38763
38761: GO 38788
38763: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38764: LD_ADDR_VAR 0 3
38768: PUSH
38769: LD_INT 40
38771: PPUSH
38772: LD_VAR 0 1
38776: PPUSH
38777: CALL_OW 321
38781: PUSH
38782: LD_INT 2
38784: EQUAL
38785: ST_TO_ADDR
38786: GO 38822
38788: LD_INT 27
38790: DOUBLE
38791: EQUAL
38792: IFTRUE 38796
38794: GO 38821
38796: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: LD_INT 35
38804: PPUSH
38805: LD_VAR 0 1
38809: PPUSH
38810: CALL_OW 321
38814: PUSH
38815: LD_INT 2
38817: EQUAL
38818: ST_TO_ADDR
38819: GO 38822
38821: POP
// end ;
38822: LD_VAR 0 3
38826: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38827: LD_INT 0
38829: PPUSH
38830: PPUSH
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
38835: PPUSH
38836: PPUSH
38837: PPUSH
38838: PPUSH
38839: PPUSH
// result := false ;
38840: LD_ADDR_VAR 0 6
38844: PUSH
38845: LD_INT 0
38847: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38848: LD_VAR 0 1
38852: NOT
38853: PUSH
38854: LD_VAR 0 1
38858: PPUSH
38859: CALL_OW 266
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: IN
38874: NOT
38875: OR
38876: PUSH
38877: LD_VAR 0 2
38881: NOT
38882: OR
38883: PUSH
38884: LD_VAR 0 5
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: LD_INT 3
38900: PUSH
38901: LD_INT 4
38903: PUSH
38904: LD_INT 5
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: IN
38915: NOT
38916: OR
38917: PUSH
38918: LD_VAR 0 3
38922: PPUSH
38923: LD_VAR 0 4
38927: PPUSH
38928: CALL_OW 488
38932: NOT
38933: OR
38934: IFFALSE 38938
// exit ;
38936: GO 39674
// side := GetSide ( depot ) ;
38938: LD_ADDR_VAR 0 9
38942: PUSH
38943: LD_VAR 0 1
38947: PPUSH
38948: CALL_OW 255
38952: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38953: LD_VAR 0 9
38957: PPUSH
38958: LD_VAR 0 2
38962: PPUSH
38963: CALL 38451 0 2
38967: NOT
38968: IFFALSE 38972
// exit ;
38970: GO 39674
// pom := GetBase ( depot ) ;
38972: LD_ADDR_VAR 0 10
38976: PUSH
38977: LD_VAR 0 1
38981: PPUSH
38982: CALL_OW 274
38986: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38987: LD_ADDR_VAR 0 11
38991: PUSH
38992: LD_VAR 0 2
38996: PPUSH
38997: LD_VAR 0 1
39001: PPUSH
39002: CALL_OW 248
39006: PPUSH
39007: CALL_OW 450
39011: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39012: LD_VAR 0 10
39016: PPUSH
39017: LD_INT 1
39019: PPUSH
39020: CALL_OW 275
39024: PUSH
39025: LD_VAR 0 11
39029: PUSH
39030: LD_INT 1
39032: ARRAY
39033: GREATEREQUAL
39034: PUSH
39035: LD_VAR 0 10
39039: PPUSH
39040: LD_INT 2
39042: PPUSH
39043: CALL_OW 275
39047: PUSH
39048: LD_VAR 0 11
39052: PUSH
39053: LD_INT 2
39055: ARRAY
39056: GREATEREQUAL
39057: AND
39058: PUSH
39059: LD_VAR 0 10
39063: PPUSH
39064: LD_INT 3
39066: PPUSH
39067: CALL_OW 275
39071: PUSH
39072: LD_VAR 0 11
39076: PUSH
39077: LD_INT 3
39079: ARRAY
39080: GREATEREQUAL
39081: AND
39082: NOT
39083: IFFALSE 39087
// exit ;
39085: GO 39674
// if GetBType ( depot ) = b_depot then
39087: LD_VAR 0 1
39091: PPUSH
39092: CALL_OW 266
39096: PUSH
39097: LD_INT 0
39099: EQUAL
39100: IFFALSE 39112
// dist := 28 else
39102: LD_ADDR_VAR 0 14
39106: PUSH
39107: LD_INT 28
39109: ST_TO_ADDR
39110: GO 39120
// dist := 36 ;
39112: LD_ADDR_VAR 0 14
39116: PUSH
39117: LD_INT 36
39119: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39120: LD_VAR 0 1
39124: PPUSH
39125: LD_VAR 0 3
39129: PPUSH
39130: LD_VAR 0 4
39134: PPUSH
39135: CALL_OW 297
39139: PUSH
39140: LD_VAR 0 14
39144: GREATER
39145: IFFALSE 39149
// exit ;
39147: GO 39674
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39149: LD_ADDR_VAR 0 12
39153: PUSH
39154: LD_VAR 0 2
39158: PPUSH
39159: LD_VAR 0 3
39163: PPUSH
39164: LD_VAR 0 4
39168: PPUSH
39169: LD_VAR 0 5
39173: PPUSH
39174: LD_VAR 0 1
39178: PPUSH
39179: CALL_OW 248
39183: PPUSH
39184: LD_INT 0
39186: PPUSH
39187: CALL 39679 0 6
39191: ST_TO_ADDR
// if not hexes then
39192: LD_VAR 0 12
39196: NOT
39197: IFFALSE 39201
// exit ;
39199: GO 39674
// hex := GetHexInfo ( x , y ) ;
39201: LD_ADDR_VAR 0 15
39205: PUSH
39206: LD_VAR 0 3
39210: PPUSH
39211: LD_VAR 0 4
39215: PPUSH
39216: CALL_OW 546
39220: ST_TO_ADDR
// if hex [ 1 ] then
39221: LD_VAR 0 15
39225: PUSH
39226: LD_INT 1
39228: ARRAY
39229: IFFALSE 39233
// exit ;
39231: GO 39674
// height := hex [ 2 ] ;
39233: LD_ADDR_VAR 0 13
39237: PUSH
39238: LD_VAR 0 15
39242: PUSH
39243: LD_INT 2
39245: ARRAY
39246: ST_TO_ADDR
// for i = 1 to hexes do
39247: LD_ADDR_VAR 0 7
39251: PUSH
39252: DOUBLE
39253: LD_INT 1
39255: DEC
39256: ST_TO_ADDR
39257: LD_VAR 0 12
39261: PUSH
39262: FOR_TO
39263: IFFALSE 39593
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39265: LD_VAR 0 12
39269: PUSH
39270: LD_VAR 0 7
39274: ARRAY
39275: PUSH
39276: LD_INT 1
39278: ARRAY
39279: PPUSH
39280: LD_VAR 0 12
39284: PUSH
39285: LD_VAR 0 7
39289: ARRAY
39290: PUSH
39291: LD_INT 2
39293: ARRAY
39294: PPUSH
39295: CALL_OW 488
39299: NOT
39300: PUSH
39301: LD_VAR 0 12
39305: PUSH
39306: LD_VAR 0 7
39310: ARRAY
39311: PUSH
39312: LD_INT 1
39314: ARRAY
39315: PPUSH
39316: LD_VAR 0 12
39320: PUSH
39321: LD_VAR 0 7
39325: ARRAY
39326: PUSH
39327: LD_INT 2
39329: ARRAY
39330: PPUSH
39331: CALL_OW 428
39335: PUSH
39336: LD_INT 0
39338: GREATER
39339: OR
39340: PUSH
39341: LD_VAR 0 12
39345: PUSH
39346: LD_VAR 0 7
39350: ARRAY
39351: PUSH
39352: LD_INT 1
39354: ARRAY
39355: PPUSH
39356: LD_VAR 0 12
39360: PUSH
39361: LD_VAR 0 7
39365: ARRAY
39366: PUSH
39367: LD_INT 2
39369: ARRAY
39370: PPUSH
39371: CALL_OW 351
39375: OR
39376: IFFALSE 39382
// exit ;
39378: POP
39379: POP
39380: GO 39674
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39382: LD_ADDR_VAR 0 8
39386: PUSH
39387: LD_VAR 0 12
39391: PUSH
39392: LD_VAR 0 7
39396: ARRAY
39397: PUSH
39398: LD_INT 1
39400: ARRAY
39401: PPUSH
39402: LD_VAR 0 12
39406: PUSH
39407: LD_VAR 0 7
39411: ARRAY
39412: PUSH
39413: LD_INT 2
39415: ARRAY
39416: PPUSH
39417: CALL_OW 546
39421: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39422: LD_VAR 0 8
39426: PUSH
39427: LD_INT 1
39429: ARRAY
39430: PUSH
39431: LD_VAR 0 8
39435: PUSH
39436: LD_INT 2
39438: ARRAY
39439: PUSH
39440: LD_VAR 0 13
39444: PUSH
39445: LD_INT 2
39447: PLUS
39448: GREATER
39449: OR
39450: PUSH
39451: LD_VAR 0 8
39455: PUSH
39456: LD_INT 2
39458: ARRAY
39459: PUSH
39460: LD_VAR 0 13
39464: PUSH
39465: LD_INT 2
39467: MINUS
39468: LESS
39469: OR
39470: PUSH
39471: LD_VAR 0 8
39475: PUSH
39476: LD_INT 3
39478: ARRAY
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: LD_INT 8
39485: PUSH
39486: LD_INT 9
39488: PUSH
39489: LD_INT 10
39491: PUSH
39492: LD_INT 11
39494: PUSH
39495: LD_INT 12
39497: PUSH
39498: LD_INT 13
39500: PUSH
39501: LD_INT 16
39503: PUSH
39504: LD_INT 17
39506: PUSH
39507: LD_INT 18
39509: PUSH
39510: LD_INT 19
39512: PUSH
39513: LD_INT 20
39515: PUSH
39516: LD_INT 21
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: IN
39534: NOT
39535: OR
39536: PUSH
39537: LD_VAR 0 8
39541: PUSH
39542: LD_INT 5
39544: ARRAY
39545: NOT
39546: OR
39547: PUSH
39548: LD_VAR 0 8
39552: PUSH
39553: LD_INT 6
39555: ARRAY
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: LD_INT 7
39565: PUSH
39566: LD_INT 9
39568: PUSH
39569: LD_INT 10
39571: PUSH
39572: LD_INT 11
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: IN
39583: NOT
39584: OR
39585: IFFALSE 39591
// exit ;
39587: POP
39588: POP
39589: GO 39674
// end ;
39591: GO 39262
39593: POP
39594: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39595: LD_VAR 0 9
39599: PPUSH
39600: LD_VAR 0 3
39604: PPUSH
39605: LD_VAR 0 4
39609: PPUSH
39610: LD_INT 20
39612: PPUSH
39613: CALL 31626 0 4
39617: PUSH
39618: LD_INT 4
39620: ARRAY
39621: IFFALSE 39625
// exit ;
39623: GO 39674
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39625: LD_VAR 0 2
39629: PUSH
39630: LD_INT 29
39632: PUSH
39633: LD_INT 30
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: IN
39640: PUSH
39641: LD_VAR 0 3
39645: PPUSH
39646: LD_VAR 0 4
39650: PPUSH
39651: LD_VAR 0 9
39655: PPUSH
39656: CALL_OW 440
39660: NOT
39661: AND
39662: IFFALSE 39666
// exit ;
39664: GO 39674
// result := true ;
39666: LD_ADDR_VAR 0 6
39670: PUSH
39671: LD_INT 1
39673: ST_TO_ADDR
// end ;
39674: LD_VAR 0 6
39678: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39679: LD_INT 0
39681: PPUSH
39682: PPUSH
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
39687: PPUSH
39688: PPUSH
39689: PPUSH
39690: PPUSH
39691: PPUSH
39692: PPUSH
39693: PPUSH
39694: PPUSH
39695: PPUSH
39696: PPUSH
39697: PPUSH
39698: PPUSH
39699: PPUSH
39700: PPUSH
39701: PPUSH
39702: PPUSH
39703: PPUSH
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
39708: PPUSH
39709: PPUSH
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
39716: PPUSH
39717: PPUSH
39718: PPUSH
39719: PPUSH
39720: PPUSH
39721: PPUSH
39722: PPUSH
39723: PPUSH
39724: PPUSH
39725: PPUSH
39726: PPUSH
39727: PPUSH
39728: PPUSH
39729: PPUSH
39730: PPUSH
39731: PPUSH
39732: PPUSH
39733: PPUSH
39734: PPUSH
39735: PPUSH
39736: PPUSH
39737: PPUSH
39738: PPUSH
// result = [ ] ;
39739: LD_ADDR_VAR 0 7
39743: PUSH
39744: EMPTY
39745: ST_TO_ADDR
// temp_list = [ ] ;
39746: LD_ADDR_VAR 0 9
39750: PUSH
39751: EMPTY
39752: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39753: LD_VAR 0 4
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_INT 3
39769: PUSH
39770: LD_INT 4
39772: PUSH
39773: LD_INT 5
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: IN
39784: NOT
39785: PUSH
39786: LD_VAR 0 1
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: IN
39801: PUSH
39802: LD_VAR 0 5
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: LD_INT 2
39812: PUSH
39813: LD_INT 3
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: LIST
39820: IN
39821: NOT
39822: AND
39823: OR
39824: IFFALSE 39828
// exit ;
39826: GO 58219
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39828: LD_VAR 0 1
39832: PUSH
39833: LD_INT 6
39835: PUSH
39836: LD_INT 7
39838: PUSH
39839: LD_INT 8
39841: PUSH
39842: LD_INT 13
39844: PUSH
39845: LD_INT 12
39847: PUSH
39848: LD_INT 15
39850: PUSH
39851: LD_INT 11
39853: PUSH
39854: LD_INT 14
39856: PUSH
39857: LD_INT 10
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: IN
39871: IFFALSE 39881
// btype = b_lab ;
39873: LD_ADDR_VAR 0 1
39877: PUSH
39878: LD_INT 6
39880: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39881: LD_VAR 0 6
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: LD_INT 2
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: LIST
39899: IN
39900: NOT
39901: PUSH
39902: LD_VAR 0 1
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: LD_INT 3
39918: PUSH
39919: LD_INT 6
39921: PUSH
39922: LD_INT 36
39924: PUSH
39925: LD_INT 4
39927: PUSH
39928: LD_INT 5
39930: PUSH
39931: LD_INT 31
39933: PUSH
39934: LD_INT 32
39936: PUSH
39937: LD_INT 33
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: IN
39953: NOT
39954: PUSH
39955: LD_VAR 0 6
39959: PUSH
39960: LD_INT 1
39962: EQUAL
39963: AND
39964: OR
39965: PUSH
39966: LD_VAR 0 1
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: LD_INT 3
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: IN
39981: NOT
39982: PUSH
39983: LD_VAR 0 6
39987: PUSH
39988: LD_INT 2
39990: EQUAL
39991: AND
39992: OR
39993: IFFALSE 40003
// mode = 0 ;
39995: LD_ADDR_VAR 0 6
39999: PUSH
40000: LD_INT 0
40002: ST_TO_ADDR
// case mode of 0 :
40003: LD_VAR 0 6
40007: PUSH
40008: LD_INT 0
40010: DOUBLE
40011: EQUAL
40012: IFTRUE 40016
40014: GO 51469
40016: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40017: LD_ADDR_VAR 0 11
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_INT 2
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 3
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 3
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 2
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40210: LD_ADDR_VAR 0 12
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 2
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 2
40333: NEG
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 2
40344: NEG
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 3
40367: NEG
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 3
40378: NEG
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40406: LD_ADDR_VAR 0 13
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: NEG
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 2
40541: NEG
40542: PUSH
40543: LD_INT 2
40545: NEG
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: NEG
40554: PUSH
40555: LD_INT 3
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 3
40565: NEG
40566: PUSH
40567: LD_INT 2
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 3
40577: NEG
40578: PUSH
40579: LD_INT 3
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40605: LD_ADDR_VAR 0 14
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 0
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: LD_INT 2
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: PUSH
40721: LD_INT 2
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: LD_INT 2
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: LD_INT 3
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 3
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40801: LD_ADDR_VAR 0 15
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 3
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 3
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40994: LD_ADDR_VAR 0 16
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: LD_INT 2
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: LD_INT 2
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 2
41117: NEG
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: NEG
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 3
41141: PUSH
41142: LD_INT 2
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 3
41151: PUSH
41152: LD_INT 3
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: LD_INT 3
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41187: LD_ADDR_VAR 0 17
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41417: LD_ADDR_VAR 0 18
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 2
41593: NEG
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: NEG
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: NEG
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41647: LD_ADDR_VAR 0 19
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: LD_INT 2
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41877: LD_ADDR_VAR 0 20
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42107: LD_ADDR_VAR 0 21
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42337: LD_ADDR_VAR 0 22
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42567: LD_ADDR_VAR 0 23
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: LD_INT 3
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 3
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: LD_INT 2
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42847: LD_ADDR_VAR 0 24
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 1
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: LD_INT 2
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 2
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 2
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: NEG
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 3
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 3
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43123: LD_ADDR_VAR 0 25
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: LD_INT 2
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 2
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 2
43299: NEG
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 3
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 3
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: LD_INT 3
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: LD_INT 3
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43397: LD_ADDR_VAR 0 26
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: NEG
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 2
43608: PUSH
43609: LD_INT 3
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 3
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: LD_INT 2
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43673: LD_ADDR_VAR 0 27
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: NEG
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 3
43906: NEG
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 3
43918: NEG
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43953: LD_ADDR_VAR 0 28
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 3
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 3
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 3
44188: NEG
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 3
44200: NEG
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44235: LD_ADDR_VAR 0 29
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: LD_INT 2
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: LD_INT 3
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 3
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 3
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 3
44479: NEG
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44514: LD_ADDR_VAR 0 30
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: LD_INT 3
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: NEG
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 3
44757: NEG
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44792: LD_ADDR_VAR 0 31
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: NEG
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: LD_INT 3
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 3
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 3
45035: NEG
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45070: LD_ADDR_VAR 0 32
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 3
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: LD_INT 3
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 3
45313: NEG
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45348: LD_ADDR_VAR 0 33
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: LD_INT 3
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 3
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 3
45592: NEG
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45627: LD_ADDR_VAR 0 34
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: LD_INT 2
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 3
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: LD_INT 3
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 3
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45907: LD_ADDR_VAR 0 35
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46019: LD_ADDR_VAR 0 36
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 2
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46131: LD_ADDR_VAR 0 37
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46243: LD_ADDR_VAR 0 38
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46355: LD_ADDR_VAR 0 39
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 2
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46467: LD_ADDR_VAR 0 40
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46579: LD_ADDR_VAR 0 41
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: LD_INT 3
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 3
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 3
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 3
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 3
46822: PUSH
46823: LD_INT 3
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 3
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 3
46853: NEG
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 3
46864: NEG
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 3
46876: NEG
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 3
46888: NEG
46889: PUSH
46890: LD_INT 3
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46929: LD_ADDR_VAR 0 42
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 2
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 3
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: LD_INT 3
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 3
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 3
47175: PUSH
47176: LD_INT 3
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 3
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 3
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 3
47226: NEG
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 3
47238: NEG
47239: PUSH
47240: LD_INT 3
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47279: LD_ADDR_VAR 0 43
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: LD_INT 3
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 3
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 3
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 3
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 3
47575: NEG
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 3
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47627: LD_ADDR_VAR 0 44
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: LD_INT 3
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 3
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 3
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 3
47870: PUSH
47871: LD_INT 3
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 3
47901: NEG
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 3
47912: NEG
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 3
47924: NEG
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 3
47936: NEG
47937: PUSH
47938: LD_INT 3
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47977: LD_ADDR_VAR 0 45
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 2
48143: NEG
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: LD_INT 3
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 3
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 3
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: LD_INT 3
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 3
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: LD_INT 3
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 3
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: LD_INT 2
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: NEG
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 3
48286: NEG
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48327: LD_ADDR_VAR 0 46
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: LD_INT 3
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: LD_INT 3
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 3
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: LD_INT 3
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: NEG
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 3
48623: NEG
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 3
48634: NEG
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48675: LD_ADDR_VAR 0 47
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48826: LD_ADDR_VAR 0 48
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48973: LD_ADDR_VAR 0 49
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49117: LD_ADDR_VAR 0 50
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49261: LD_ADDR_VAR 0 51
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49408: LD_ADDR_VAR 0 52
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49559: LD_ADDR_VAR 0 53
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: LD_INT 2
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49789: LD_ADDR_VAR 0 54
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 2
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: NEG
49989: PUSH
49990: LD_INT 2
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50019: LD_ADDR_VAR 0 55
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 2
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 2
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: LD_INT 2
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50249: LD_ADDR_VAR 0 56
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: LD_INT 2
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: LD_INT 2
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50479: LD_ADDR_VAR 0 57
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50709: LD_ADDR_VAR 0 58
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: LD_INT 2
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50939: LD_ADDR_VAR 0 59
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51027: LD_ADDR_VAR 0 60
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51115: LD_ADDR_VAR 0 61
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51203: LD_ADDR_VAR 0 62
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51291: LD_ADDR_VAR 0 63
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51379: LD_ADDR_VAR 0 64
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: ST_TO_ADDR
// end ; 1 :
51467: GO 57364
51469: LD_INT 1
51471: DOUBLE
51472: EQUAL
51473: IFTRUE 51477
51475: GO 54100
51477: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51478: LD_ADDR_VAR 0 11
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51522: LD_ADDR_VAR 0 12
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 3
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: LIST
51562: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51563: LD_ADDR_VAR 0 13
51567: PUSH
51568: LD_INT 3
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 3
51580: PUSH
51581: LD_INT 3
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: LD_INT 3
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: LIST
51602: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51603: LD_ADDR_VAR 0 14
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 3
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 3
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: LIST
51643: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51644: LD_ADDR_VAR 0 15
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 3
51673: NEG
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: LIST
51687: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51688: LD_ADDR_VAR 0 16
51692: PUSH
51693: LD_INT 2
51695: NEG
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: NEG
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 3
51719: NEG
51720: PUSH
51721: LD_INT 3
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51734: LD_ADDR_VAR 0 17
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: LD_INT 3
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51778: LD_ADDR_VAR 0 18
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 3
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: LIST
51818: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51819: LD_ADDR_VAR 0 19
51823: PUSH
51824: LD_INT 3
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: LD_INT 3
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51859: LD_ADDR_VAR 0 20
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: LD_INT 3
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 3
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: LIST
51899: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51900: LD_ADDR_VAR 0 21
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: NEG
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 3
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: LIST
51943: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51944: LD_ADDR_VAR 0 22
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: LD_INT 3
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 3
51963: NEG
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 3
51975: NEG
51976: PUSH
51977: LD_INT 3
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: LIST
51989: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51990: LD_ADDR_VAR 0 23
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 3
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: LD_INT 4
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: LD_INT 3
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52034: LD_ADDR_VAR 0 24
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 3
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 4
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52075: LD_ADDR_VAR 0 25
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 4
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: LD_INT 4
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52115: LD_ADDR_VAR 0 26
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 3
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 4
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 3
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: LIST
52155: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52156: LD_ADDR_VAR 0 27
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 4
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: LIST
52199: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52200: LD_ADDR_VAR 0 28
52204: PUSH
52205: LD_INT 3
52207: NEG
52208: PUSH
52209: LD_INT 3
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 3
52219: NEG
52220: PUSH
52221: LD_INT 4
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 4
52231: NEG
52232: PUSH
52233: LD_INT 3
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52246: LD_ADDR_VAR 0 29
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: LD_INT 3
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: LD_INT 3
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: LD_INT 4
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: LD_INT 4
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 5
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 5
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 4
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 6
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 6
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 5
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52401: LD_ADDR_VAR 0 30
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 3
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 3
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 3
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 4
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 4
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 4
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 5
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 5
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 5
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 6
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 6
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52544: LD_ADDR_VAR 0 31
52548: PUSH
52549: LD_INT 3
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 4
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 4
52591: PUSH
52592: LD_INT 4
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: LD_INT 4
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 5
52611: PUSH
52612: LD_INT 4
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 5
52621: PUSH
52622: LD_INT 5
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 4
52631: PUSH
52632: LD_INT 5
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 6
52641: PUSH
52642: LD_INT 5
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 6
52651: PUSH
52652: LD_INT 6
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 5
52661: PUSH
52662: LD_INT 6
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52683: LD_ADDR_VAR 0 32
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 4
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 4
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 3
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 5
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 5
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 4
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 6
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 6
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: LD_INT 5
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52826: LD_ADDR_VAR 0 33
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 3
52844: NEG
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 3
52855: NEG
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 3
52867: NEG
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 4
52878: NEG
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 4
52889: NEG
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 4
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 5
52912: NEG
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 5
52923: NEG
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 5
52935: NEG
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 6
52946: NEG
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 6
52957: NEG
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52981: LD_ADDR_VAR 0 34
52985: PUSH
52986: LD_INT 2
52988: NEG
52989: PUSH
52990: LD_INT 3
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 3
53000: NEG
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: LD_INT 4
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 4
53036: NEG
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 4
53048: NEG
53049: PUSH
53050: LD_INT 4
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 4
53060: NEG
53061: PUSH
53062: LD_INT 5
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 5
53072: NEG
53073: PUSH
53074: LD_INT 4
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 5
53084: NEG
53085: PUSH
53086: LD_INT 5
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 5
53096: NEG
53097: PUSH
53098: LD_INT 6
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 6
53108: NEG
53109: PUSH
53110: LD_INT 5
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 6
53120: NEG
53121: PUSH
53122: LD_INT 6
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53144: LD_ADDR_VAR 0 41
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: LD_INT 3
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53188: LD_ADDR_VAR 0 42
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: LIST
53228: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53229: LD_ADDR_VAR 0 43
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 3
53246: PUSH
53247: LD_INT 2
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53269: LD_ADDR_VAR 0 44
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: LIST
53309: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53310: LD_ADDR_VAR 0 45
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 3
53339: NEG
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: LIST
53353: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53354: LD_ADDR_VAR 0 46
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 3
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53400: LD_ADDR_VAR 0 47
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 3
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53433: LD_ADDR_VAR 0 48
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53464: LD_ADDR_VAR 0 49
53468: PUSH
53469: LD_INT 3
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 3
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53493: LD_ADDR_VAR 0 50
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: LD_INT 3
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53522: LD_ADDR_VAR 0 51
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53553: LD_ADDR_VAR 0 52
53557: PUSH
53558: LD_INT 3
53560: NEG
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 3
53572: NEG
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53586: LD_ADDR_VAR 0 53
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 3
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53630: LD_ADDR_VAR 0 54
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 3
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 3
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53671: LD_ADDR_VAR 0 55
53675: PUSH
53676: LD_INT 3
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 3
53688: PUSH
53689: LD_INT 3
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: LIST
53710: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53711: LD_ADDR_VAR 0 56
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 3
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 3
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: LIST
53751: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53752: LD_ADDR_VAR 0 57
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 3
53770: NEG
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 3
53781: NEG
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53796: LD_ADDR_VAR 0 58
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 3
53815: NEG
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 3
53827: NEG
53828: PUSH
53829: LD_INT 3
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: LIST
53841: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53842: LD_ADDR_VAR 0 59
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: LIST
53885: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53886: LD_ADDR_VAR 0 60
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: LIST
53926: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53927: LD_ADDR_VAR 0 61
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: LIST
53966: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53967: LD_ADDR_VAR 0 62
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54008: LD_ADDR_VAR 0 63
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 2
54026: NEG
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54052: LD_ADDR_VAR 0 64
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: NEG
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: LIST
54097: ST_TO_ADDR
// end ; 2 :
54098: GO 57364
54100: LD_INT 2
54102: DOUBLE
54103: EQUAL
54104: IFTRUE 54108
54106: GO 57363
54108: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54109: LD_ADDR_VAR 0 29
54113: PUSH
54114: LD_INT 4
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 4
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 5
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 5
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 4
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 3
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 3
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: PUSH
54189: LD_INT 2
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 5
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 3
54209: PUSH
54210: LD_INT 3
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 3
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 4
54229: PUSH
54230: LD_INT 3
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 4
54239: PUSH
54240: LD_INT 4
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 3
54249: PUSH
54250: LD_INT 4
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: LD_INT 3
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 4
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: LD_INT 4
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: LD_INT 4
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 3
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: LD_INT 4
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 5
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 5
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 4
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 3
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: LD_INT 5
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 3
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 3
54392: NEG
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 3
54403: NEG
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 3
54437: NEG
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 4
54448: NEG
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 4
54459: NEG
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 4
54471: NEG
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 4
54494: NEG
54495: PUSH
54496: LD_INT 4
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 4
54506: NEG
54507: PUSH
54508: LD_INT 5
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: LD_INT 4
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: NEG
54531: PUSH
54532: LD_INT 3
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 4
54542: NEG
54543: PUSH
54544: LD_INT 3
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 5
54554: NEG
54555: PUSH
54556: LD_INT 4
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 5
54566: NEG
54567: PUSH
54568: LD_INT 5
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 3
54578: NEG
54579: PUSH
54580: LD_INT 5
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 5
54590: NEG
54591: PUSH
54592: LD_INT 3
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54647: LD_ADDR_VAR 0 30
54651: PUSH
54652: LD_INT 4
54654: PUSH
54655: LD_INT 4
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 4
54664: PUSH
54665: LD_INT 3
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 5
54674: PUSH
54675: LD_INT 4
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 5
54684: PUSH
54685: LD_INT 5
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 4
54694: PUSH
54695: LD_INT 5
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 3
54704: PUSH
54705: LD_INT 4
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 3
54714: PUSH
54715: LD_INT 3
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 5
54724: PUSH
54725: LD_INT 3
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: PUSH
54735: LD_INT 5
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 3
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: LD_INT 4
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 4
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 4
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 4
54837: NEG
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 4
54848: NEG
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 3
54860: NEG
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 3
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 4
54882: NEG
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 5
54893: NEG
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 5
54904: NEG
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 5
54916: NEG
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 3
54928: NEG
54929: PUSH
54930: LD_INT 2
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 3
54939: NEG
54940: PUSH
54941: LD_INT 3
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 3
54951: NEG
54952: PUSH
54953: LD_INT 4
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 4
54999: NEG
55000: PUSH
55001: LD_INT 3
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 4
55011: NEG
55012: PUSH
55013: LD_INT 4
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 4
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 4
55035: NEG
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 4
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 5
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 4
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: LD_INT 3
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 4
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: LD_INT 5
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 3
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 5
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55194: LD_ADDR_VAR 0 31
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 4
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: LD_INT 4
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: LD_INT 5
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 5
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 4
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: PUSH
55274: LD_INT 5
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: NEG
55284: PUSH
55285: LD_INT 3
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 3
55294: NEG
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: NEG
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 3
55339: NEG
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 4
55350: NEG
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 4
55361: NEG
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 4
55373: NEG
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 4
55396: NEG
55397: PUSH
55398: LD_INT 4
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 4
55408: NEG
55409: PUSH
55410: LD_INT 5
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 3
55420: NEG
55421: PUSH
55422: LD_INT 4
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 3
55432: NEG
55433: PUSH
55434: LD_INT 3
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 4
55444: NEG
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 5
55456: NEG
55457: PUSH
55458: LD_INT 4
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 5
55468: NEG
55469: PUSH
55470: LD_INT 5
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 3
55480: NEG
55481: PUSH
55482: LD_INT 5
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 5
55492: NEG
55493: PUSH
55494: LD_INT 3
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 3
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 4
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: LD_INT 3
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 3
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: LD_INT 4
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: LD_INT 4
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 4
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 4
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 5
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 5
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 4
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 3
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 5
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55744: LD_ADDR_VAR 0 32
55748: PUSH
55749: LD_INT 4
55751: NEG
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 4
55762: NEG
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 3
55774: NEG
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 3
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 4
55796: NEG
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 5
55807: NEG
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 5
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 5
55830: NEG
55831: PUSH
55832: LD_INT 2
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 3
55842: NEG
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 3
55853: NEG
55854: PUSH
55855: LD_INT 3
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 3
55865: NEG
55866: PUSH
55867: LD_INT 4
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: LD_INT 3
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 3
55901: NEG
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 4
55913: NEG
55914: PUSH
55915: LD_INT 3
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 4
55925: NEG
55926: PUSH
55927: LD_INT 4
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: LD_INT 4
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 4
55949: NEG
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 4
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 5
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 4
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 3
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 3
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 4
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 5
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: LD_INT 5
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 3
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 3
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 4
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 4
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 3
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 4
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 4
56156: PUSH
56157: LD_INT 4
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 4
56166: PUSH
56167: LD_INT 3
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 5
56176: PUSH
56177: LD_INT 4
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 5
56186: PUSH
56187: LD_INT 5
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 4
56196: PUSH
56197: LD_INT 5
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: LD_INT 4
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: LD_INT 3
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 5
56226: PUSH
56227: LD_INT 3
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 3
56236: PUSH
56237: LD_INT 5
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56291: LD_ADDR_VAR 0 33
56295: PUSH
56296: LD_INT 4
56298: NEG
56299: PUSH
56300: LD_INT 4
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 4
56310: NEG
56311: PUSH
56312: LD_INT 5
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 3
56322: NEG
56323: PUSH
56324: LD_INT 4
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 3
56334: NEG
56335: PUSH
56336: LD_INT 3
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 4
56346: NEG
56347: PUSH
56348: LD_INT 3
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 5
56358: NEG
56359: PUSH
56360: LD_INT 4
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 5
56370: NEG
56371: PUSH
56372: LD_INT 5
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 3
56382: NEG
56383: PUSH
56384: LD_INT 5
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 5
56394: NEG
56395: PUSH
56396: LD_INT 3
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 3
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: LD_INT 4
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: LD_INT 3
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: LD_INT 3
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 4
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: LD_INT 4
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 4
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 4
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 5
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 5
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 4
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 3
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 5
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 3
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 4
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 4
56631: PUSH
56632: LD_INT 4
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 3
56641: PUSH
56642: LD_INT 4
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: LD_INT 3
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 4
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: LD_INT 4
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 4
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 3
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: LD_INT 4
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: LD_INT 5
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 5
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: LD_INT 4
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: LD_INT 5
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 2
56773: NEG
56774: PUSH
56775: LD_INT 3
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56829: LD_ADDR_VAR 0 34
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 4
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: LD_INT 5
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: LD_INT 4
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 3
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 3
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: LD_INT 4
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 5
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: LD_INT 3
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: LD_INT 5
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 4
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 4
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 3
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 4
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 4
57031: PUSH
57032: LD_INT 4
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 4
57041: PUSH
57042: LD_INT 3
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 5
57051: PUSH
57052: LD_INT 4
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 5
57061: PUSH
57062: LD_INT 5
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 4
57071: PUSH
57072: LD_INT 5
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: LD_INT 4
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 3
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 5
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 3
57111: PUSH
57112: LD_INT 5
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: LD_INT 3
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: LD_INT 4
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 4
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: LD_INT 3
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 4
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: LD_INT 2
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 4
57214: NEG
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 4
57225: NEG
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 3
57248: NEG
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 4
57259: NEG
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 5
57270: NEG
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 5
57281: NEG
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 5
57293: NEG
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: NEG
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: ST_TO_ADDR
// end ; end ;
57361: GO 57364
57363: POP
// case btype of b_depot , b_warehouse :
57364: LD_VAR 0 1
57368: PUSH
57369: LD_INT 0
57371: DOUBLE
57372: EQUAL
57373: IFTRUE 57383
57375: LD_INT 1
57377: DOUBLE
57378: EQUAL
57379: IFTRUE 57383
57381: GO 57584
57383: POP
// case nation of nation_american :
57384: LD_VAR 0 5
57388: PUSH
57389: LD_INT 1
57391: DOUBLE
57392: EQUAL
57393: IFTRUE 57397
57395: GO 57453
57397: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57398: LD_ADDR_VAR 0 9
57402: PUSH
57403: LD_VAR 0 11
57407: PUSH
57408: LD_VAR 0 12
57412: PUSH
57413: LD_VAR 0 13
57417: PUSH
57418: LD_VAR 0 14
57422: PUSH
57423: LD_VAR 0 15
57427: PUSH
57428: LD_VAR 0 16
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: PUSH
57441: LD_VAR 0 4
57445: PUSH
57446: LD_INT 1
57448: PLUS
57449: ARRAY
57450: ST_TO_ADDR
57451: GO 57582
57453: LD_INT 2
57455: DOUBLE
57456: EQUAL
57457: IFTRUE 57461
57459: GO 57517
57461: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57462: LD_ADDR_VAR 0 9
57466: PUSH
57467: LD_VAR 0 17
57471: PUSH
57472: LD_VAR 0 18
57476: PUSH
57477: LD_VAR 0 19
57481: PUSH
57482: LD_VAR 0 20
57486: PUSH
57487: LD_VAR 0 21
57491: PUSH
57492: LD_VAR 0 22
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: PUSH
57505: LD_VAR 0 4
57509: PUSH
57510: LD_INT 1
57512: PLUS
57513: ARRAY
57514: ST_TO_ADDR
57515: GO 57582
57517: LD_INT 3
57519: DOUBLE
57520: EQUAL
57521: IFTRUE 57525
57523: GO 57581
57525: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57526: LD_ADDR_VAR 0 9
57530: PUSH
57531: LD_VAR 0 23
57535: PUSH
57536: LD_VAR 0 24
57540: PUSH
57541: LD_VAR 0 25
57545: PUSH
57546: LD_VAR 0 26
57550: PUSH
57551: LD_VAR 0 27
57555: PUSH
57556: LD_VAR 0 28
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: PUSH
57569: LD_VAR 0 4
57573: PUSH
57574: LD_INT 1
57576: PLUS
57577: ARRAY
57578: ST_TO_ADDR
57579: GO 57582
57581: POP
57582: GO 58137
57584: LD_INT 2
57586: DOUBLE
57587: EQUAL
57588: IFTRUE 57598
57590: LD_INT 3
57592: DOUBLE
57593: EQUAL
57594: IFTRUE 57598
57596: GO 57654
57598: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57599: LD_ADDR_VAR 0 9
57603: PUSH
57604: LD_VAR 0 29
57608: PUSH
57609: LD_VAR 0 30
57613: PUSH
57614: LD_VAR 0 31
57618: PUSH
57619: LD_VAR 0 32
57623: PUSH
57624: LD_VAR 0 33
57628: PUSH
57629: LD_VAR 0 34
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: PUSH
57642: LD_VAR 0 4
57646: PUSH
57647: LD_INT 1
57649: PLUS
57650: ARRAY
57651: ST_TO_ADDR
57652: GO 58137
57654: LD_INT 16
57656: DOUBLE
57657: EQUAL
57658: IFTRUE 57716
57660: LD_INT 17
57662: DOUBLE
57663: EQUAL
57664: IFTRUE 57716
57666: LD_INT 18
57668: DOUBLE
57669: EQUAL
57670: IFTRUE 57716
57672: LD_INT 19
57674: DOUBLE
57675: EQUAL
57676: IFTRUE 57716
57678: LD_INT 22
57680: DOUBLE
57681: EQUAL
57682: IFTRUE 57716
57684: LD_INT 20
57686: DOUBLE
57687: EQUAL
57688: IFTRUE 57716
57690: LD_INT 21
57692: DOUBLE
57693: EQUAL
57694: IFTRUE 57716
57696: LD_INT 23
57698: DOUBLE
57699: EQUAL
57700: IFTRUE 57716
57702: LD_INT 24
57704: DOUBLE
57705: EQUAL
57706: IFTRUE 57716
57708: LD_INT 25
57710: DOUBLE
57711: EQUAL
57712: IFTRUE 57716
57714: GO 57772
57716: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57717: LD_ADDR_VAR 0 9
57721: PUSH
57722: LD_VAR 0 35
57726: PUSH
57727: LD_VAR 0 36
57731: PUSH
57732: LD_VAR 0 37
57736: PUSH
57737: LD_VAR 0 38
57741: PUSH
57742: LD_VAR 0 39
57746: PUSH
57747: LD_VAR 0 40
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: PUSH
57760: LD_VAR 0 4
57764: PUSH
57765: LD_INT 1
57767: PLUS
57768: ARRAY
57769: ST_TO_ADDR
57770: GO 58137
57772: LD_INT 6
57774: DOUBLE
57775: EQUAL
57776: IFTRUE 57828
57778: LD_INT 7
57780: DOUBLE
57781: EQUAL
57782: IFTRUE 57828
57784: LD_INT 8
57786: DOUBLE
57787: EQUAL
57788: IFTRUE 57828
57790: LD_INT 13
57792: DOUBLE
57793: EQUAL
57794: IFTRUE 57828
57796: LD_INT 12
57798: DOUBLE
57799: EQUAL
57800: IFTRUE 57828
57802: LD_INT 15
57804: DOUBLE
57805: EQUAL
57806: IFTRUE 57828
57808: LD_INT 11
57810: DOUBLE
57811: EQUAL
57812: IFTRUE 57828
57814: LD_INT 14
57816: DOUBLE
57817: EQUAL
57818: IFTRUE 57828
57820: LD_INT 10
57822: DOUBLE
57823: EQUAL
57824: IFTRUE 57828
57826: GO 57884
57828: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57829: LD_ADDR_VAR 0 9
57833: PUSH
57834: LD_VAR 0 41
57838: PUSH
57839: LD_VAR 0 42
57843: PUSH
57844: LD_VAR 0 43
57848: PUSH
57849: LD_VAR 0 44
57853: PUSH
57854: LD_VAR 0 45
57858: PUSH
57859: LD_VAR 0 46
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: PUSH
57872: LD_VAR 0 4
57876: PUSH
57877: LD_INT 1
57879: PLUS
57880: ARRAY
57881: ST_TO_ADDR
57882: GO 58137
57884: LD_INT 36
57886: DOUBLE
57887: EQUAL
57888: IFTRUE 57892
57890: GO 57948
57892: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57893: LD_ADDR_VAR 0 9
57897: PUSH
57898: LD_VAR 0 47
57902: PUSH
57903: LD_VAR 0 48
57907: PUSH
57908: LD_VAR 0 49
57912: PUSH
57913: LD_VAR 0 50
57917: PUSH
57918: LD_VAR 0 51
57922: PUSH
57923: LD_VAR 0 52
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: PUSH
57936: LD_VAR 0 4
57940: PUSH
57941: LD_INT 1
57943: PLUS
57944: ARRAY
57945: ST_TO_ADDR
57946: GO 58137
57948: LD_INT 4
57950: DOUBLE
57951: EQUAL
57952: IFTRUE 57974
57954: LD_INT 5
57956: DOUBLE
57957: EQUAL
57958: IFTRUE 57974
57960: LD_INT 34
57962: DOUBLE
57963: EQUAL
57964: IFTRUE 57974
57966: LD_INT 37
57968: DOUBLE
57969: EQUAL
57970: IFTRUE 57974
57972: GO 58030
57974: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57975: LD_ADDR_VAR 0 9
57979: PUSH
57980: LD_VAR 0 53
57984: PUSH
57985: LD_VAR 0 54
57989: PUSH
57990: LD_VAR 0 55
57994: PUSH
57995: LD_VAR 0 56
57999: PUSH
58000: LD_VAR 0 57
58004: PUSH
58005: LD_VAR 0 58
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: PUSH
58018: LD_VAR 0 4
58022: PUSH
58023: LD_INT 1
58025: PLUS
58026: ARRAY
58027: ST_TO_ADDR
58028: GO 58137
58030: LD_INT 31
58032: DOUBLE
58033: EQUAL
58034: IFTRUE 58080
58036: LD_INT 32
58038: DOUBLE
58039: EQUAL
58040: IFTRUE 58080
58042: LD_INT 33
58044: DOUBLE
58045: EQUAL
58046: IFTRUE 58080
58048: LD_INT 27
58050: DOUBLE
58051: EQUAL
58052: IFTRUE 58080
58054: LD_INT 26
58056: DOUBLE
58057: EQUAL
58058: IFTRUE 58080
58060: LD_INT 28
58062: DOUBLE
58063: EQUAL
58064: IFTRUE 58080
58066: LD_INT 29
58068: DOUBLE
58069: EQUAL
58070: IFTRUE 58080
58072: LD_INT 30
58074: DOUBLE
58075: EQUAL
58076: IFTRUE 58080
58078: GO 58136
58080: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58081: LD_ADDR_VAR 0 9
58085: PUSH
58086: LD_VAR 0 59
58090: PUSH
58091: LD_VAR 0 60
58095: PUSH
58096: LD_VAR 0 61
58100: PUSH
58101: LD_VAR 0 62
58105: PUSH
58106: LD_VAR 0 63
58110: PUSH
58111: LD_VAR 0 64
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: PUSH
58124: LD_VAR 0 4
58128: PUSH
58129: LD_INT 1
58131: PLUS
58132: ARRAY
58133: ST_TO_ADDR
58134: GO 58137
58136: POP
// temp_list2 = [ ] ;
58137: LD_ADDR_VAR 0 10
58141: PUSH
58142: EMPTY
58143: ST_TO_ADDR
// for i in temp_list do
58144: LD_ADDR_VAR 0 8
58148: PUSH
58149: LD_VAR 0 9
58153: PUSH
58154: FOR_IN
58155: IFFALSE 58207
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58157: LD_ADDR_VAR 0 10
58161: PUSH
58162: LD_VAR 0 10
58166: PUSH
58167: LD_VAR 0 8
58171: PUSH
58172: LD_INT 1
58174: ARRAY
58175: PUSH
58176: LD_VAR 0 2
58180: PLUS
58181: PUSH
58182: LD_VAR 0 8
58186: PUSH
58187: LD_INT 2
58189: ARRAY
58190: PUSH
58191: LD_VAR 0 3
58195: PLUS
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: EMPTY
58202: LIST
58203: ADD
58204: ST_TO_ADDR
58205: GO 58154
58207: POP
58208: POP
// result = temp_list2 ;
58209: LD_ADDR_VAR 0 7
58213: PUSH
58214: LD_VAR 0 10
58218: ST_TO_ADDR
// end ;
58219: LD_VAR 0 7
58223: RET
// export function EnemyInRange ( unit , dist ) ; begin
58224: LD_INT 0
58226: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58227: LD_ADDR_VAR 0 3
58231: PUSH
58232: LD_VAR 0 1
58236: PPUSH
58237: CALL_OW 255
58241: PPUSH
58242: LD_VAR 0 1
58246: PPUSH
58247: CALL_OW 250
58251: PPUSH
58252: LD_VAR 0 1
58256: PPUSH
58257: CALL_OW 251
58261: PPUSH
58262: LD_VAR 0 2
58266: PPUSH
58267: CALL 31626 0 4
58271: PUSH
58272: LD_INT 4
58274: ARRAY
58275: ST_TO_ADDR
// end ;
58276: LD_VAR 0 3
58280: RET
// export function PlayerSeeMe ( unit ) ; begin
58281: LD_INT 0
58283: PPUSH
// result := See ( your_side , unit ) ;
58284: LD_ADDR_VAR 0 2
58288: PUSH
58289: LD_OWVAR 2
58293: PPUSH
58294: LD_VAR 0 1
58298: PPUSH
58299: CALL_OW 292
58303: ST_TO_ADDR
// end ;
58304: LD_VAR 0 2
58308: RET
// export function ReverseDir ( unit ) ; begin
58309: LD_INT 0
58311: PPUSH
// if not unit then
58312: LD_VAR 0 1
58316: NOT
58317: IFFALSE 58321
// exit ;
58319: GO 58344
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58321: LD_ADDR_VAR 0 2
58325: PUSH
58326: LD_VAR 0 1
58330: PPUSH
58331: CALL_OW 254
58335: PUSH
58336: LD_INT 3
58338: PLUS
58339: PUSH
58340: LD_INT 6
58342: MOD
58343: ST_TO_ADDR
// end ;
58344: LD_VAR 0 2
58348: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58349: LD_INT 0
58351: PPUSH
58352: PPUSH
58353: PPUSH
58354: PPUSH
58355: PPUSH
58356: PPUSH
// if not unit or not hexes then
58357: LD_VAR 0 1
58361: NOT
58362: PUSH
58363: LD_VAR 0 2
58367: NOT
58368: OR
58369: IFFALSE 58373
// exit ;
58371: GO 58496
// dist := 9999 ;
58373: LD_ADDR_VAR 0 5
58377: PUSH
58378: LD_INT 9999
58380: ST_TO_ADDR
// for i = 1 to hexes do
58381: LD_ADDR_VAR 0 4
58385: PUSH
58386: DOUBLE
58387: LD_INT 1
58389: DEC
58390: ST_TO_ADDR
58391: LD_VAR 0 2
58395: PUSH
58396: FOR_TO
58397: IFFALSE 58484
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58399: LD_ADDR_VAR 0 6
58403: PUSH
58404: LD_VAR 0 1
58408: PPUSH
58409: LD_VAR 0 2
58413: PUSH
58414: LD_VAR 0 4
58418: ARRAY
58419: PUSH
58420: LD_INT 1
58422: ARRAY
58423: PPUSH
58424: LD_VAR 0 2
58428: PUSH
58429: LD_VAR 0 4
58433: ARRAY
58434: PUSH
58435: LD_INT 2
58437: ARRAY
58438: PPUSH
58439: CALL_OW 297
58443: ST_TO_ADDR
// if tdist < dist then
58444: LD_VAR 0 6
58448: PUSH
58449: LD_VAR 0 5
58453: LESS
58454: IFFALSE 58482
// begin hex := hexes [ i ] ;
58456: LD_ADDR_VAR 0 8
58460: PUSH
58461: LD_VAR 0 2
58465: PUSH
58466: LD_VAR 0 4
58470: ARRAY
58471: ST_TO_ADDR
// dist := tdist ;
58472: LD_ADDR_VAR 0 5
58476: PUSH
58477: LD_VAR 0 6
58481: ST_TO_ADDR
// end ; end ;
58482: GO 58396
58484: POP
58485: POP
// result := hex ;
58486: LD_ADDR_VAR 0 3
58490: PUSH
58491: LD_VAR 0 8
58495: ST_TO_ADDR
// end ;
58496: LD_VAR 0 3
58500: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58501: LD_INT 0
58503: PPUSH
58504: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58505: LD_VAR 0 1
58509: NOT
58510: PUSH
58511: LD_VAR 0 1
58515: PUSH
58516: LD_INT 21
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 23
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PPUSH
58540: CALL_OW 69
58544: IN
58545: NOT
58546: OR
58547: IFFALSE 58551
// exit ;
58549: GO 58598
// for i = 1 to 3 do
58551: LD_ADDR_VAR 0 3
58555: PUSH
58556: DOUBLE
58557: LD_INT 1
58559: DEC
58560: ST_TO_ADDR
58561: LD_INT 3
58563: PUSH
58564: FOR_TO
58565: IFFALSE 58596
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58567: LD_VAR 0 1
58571: PPUSH
58572: CALL_OW 250
58576: PPUSH
58577: LD_VAR 0 1
58581: PPUSH
58582: CALL_OW 251
58586: PPUSH
58587: LD_INT 1
58589: PPUSH
58590: CALL_OW 453
58594: GO 58564
58596: POP
58597: POP
// end ;
58598: LD_VAR 0 2
58602: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58603: LD_INT 0
58605: PPUSH
58606: PPUSH
58607: PPUSH
58608: PPUSH
58609: PPUSH
58610: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58611: LD_VAR 0 1
58615: NOT
58616: PUSH
58617: LD_VAR 0 2
58621: NOT
58622: OR
58623: PUSH
58624: LD_VAR 0 1
58628: PPUSH
58629: CALL_OW 314
58633: OR
58634: IFFALSE 58638
// exit ;
58636: GO 59079
// x := GetX ( enemy_unit ) ;
58638: LD_ADDR_VAR 0 7
58642: PUSH
58643: LD_VAR 0 2
58647: PPUSH
58648: CALL_OW 250
58652: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58653: LD_ADDR_VAR 0 8
58657: PUSH
58658: LD_VAR 0 2
58662: PPUSH
58663: CALL_OW 251
58667: ST_TO_ADDR
// if not x or not y then
58668: LD_VAR 0 7
58672: NOT
58673: PUSH
58674: LD_VAR 0 8
58678: NOT
58679: OR
58680: IFFALSE 58684
// exit ;
58682: GO 59079
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58684: LD_ADDR_VAR 0 6
58688: PUSH
58689: LD_VAR 0 7
58693: PPUSH
58694: LD_INT 0
58696: PPUSH
58697: LD_INT 4
58699: PPUSH
58700: CALL_OW 272
58704: PUSH
58705: LD_VAR 0 8
58709: PPUSH
58710: LD_INT 0
58712: PPUSH
58713: LD_INT 4
58715: PPUSH
58716: CALL_OW 273
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_VAR 0 7
58729: PPUSH
58730: LD_INT 1
58732: PPUSH
58733: LD_INT 4
58735: PPUSH
58736: CALL_OW 272
58740: PUSH
58741: LD_VAR 0 8
58745: PPUSH
58746: LD_INT 1
58748: PPUSH
58749: LD_INT 4
58751: PPUSH
58752: CALL_OW 273
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_VAR 0 7
58765: PPUSH
58766: LD_INT 2
58768: PPUSH
58769: LD_INT 4
58771: PPUSH
58772: CALL_OW 272
58776: PUSH
58777: LD_VAR 0 8
58781: PPUSH
58782: LD_INT 2
58784: PPUSH
58785: LD_INT 4
58787: PPUSH
58788: CALL_OW 273
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_VAR 0 7
58801: PPUSH
58802: LD_INT 3
58804: PPUSH
58805: LD_INT 4
58807: PPUSH
58808: CALL_OW 272
58812: PUSH
58813: LD_VAR 0 8
58817: PPUSH
58818: LD_INT 3
58820: PPUSH
58821: LD_INT 4
58823: PPUSH
58824: CALL_OW 273
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_VAR 0 7
58837: PPUSH
58838: LD_INT 4
58840: PPUSH
58841: LD_INT 4
58843: PPUSH
58844: CALL_OW 272
58848: PUSH
58849: LD_VAR 0 8
58853: PPUSH
58854: LD_INT 4
58856: PPUSH
58857: LD_INT 4
58859: PPUSH
58860: CALL_OW 273
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_VAR 0 7
58873: PPUSH
58874: LD_INT 5
58876: PPUSH
58877: LD_INT 4
58879: PPUSH
58880: CALL_OW 272
58884: PUSH
58885: LD_VAR 0 8
58889: PPUSH
58890: LD_INT 5
58892: PPUSH
58893: LD_INT 4
58895: PPUSH
58896: CALL_OW 273
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: ST_TO_ADDR
// for i = tmp downto 1 do
58913: LD_ADDR_VAR 0 4
58917: PUSH
58918: DOUBLE
58919: LD_VAR 0 6
58923: INC
58924: ST_TO_ADDR
58925: LD_INT 1
58927: PUSH
58928: FOR_DOWNTO
58929: IFFALSE 59030
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58931: LD_VAR 0 6
58935: PUSH
58936: LD_VAR 0 4
58940: ARRAY
58941: PUSH
58942: LD_INT 1
58944: ARRAY
58945: PPUSH
58946: LD_VAR 0 6
58950: PUSH
58951: LD_VAR 0 4
58955: ARRAY
58956: PUSH
58957: LD_INT 2
58959: ARRAY
58960: PPUSH
58961: CALL_OW 488
58965: NOT
58966: PUSH
58967: LD_VAR 0 6
58971: PUSH
58972: LD_VAR 0 4
58976: ARRAY
58977: PUSH
58978: LD_INT 1
58980: ARRAY
58981: PPUSH
58982: LD_VAR 0 6
58986: PUSH
58987: LD_VAR 0 4
58991: ARRAY
58992: PUSH
58993: LD_INT 2
58995: ARRAY
58996: PPUSH
58997: CALL_OW 428
59001: PUSH
59002: LD_INT 0
59004: NONEQUAL
59005: OR
59006: IFFALSE 59028
// tmp := Delete ( tmp , i ) ;
59008: LD_ADDR_VAR 0 6
59012: PUSH
59013: LD_VAR 0 6
59017: PPUSH
59018: LD_VAR 0 4
59022: PPUSH
59023: CALL_OW 3
59027: ST_TO_ADDR
59028: GO 58928
59030: POP
59031: POP
// j := GetClosestHex ( unit , tmp ) ;
59032: LD_ADDR_VAR 0 5
59036: PUSH
59037: LD_VAR 0 1
59041: PPUSH
59042: LD_VAR 0 6
59046: PPUSH
59047: CALL 58349 0 2
59051: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59052: LD_VAR 0 1
59056: PPUSH
59057: LD_VAR 0 5
59061: PUSH
59062: LD_INT 1
59064: ARRAY
59065: PPUSH
59066: LD_VAR 0 5
59070: PUSH
59071: LD_INT 2
59073: ARRAY
59074: PPUSH
59075: CALL_OW 111
// end ;
59079: LD_VAR 0 3
59083: RET
// export function PrepareApemanSoldier ( ) ; begin
59084: LD_INT 0
59086: PPUSH
// uc_nation := 0 ;
59087: LD_ADDR_OWVAR 21
59091: PUSH
59092: LD_INT 0
59094: ST_TO_ADDR
// hc_sex := sex_male ;
59095: LD_ADDR_OWVAR 27
59099: PUSH
59100: LD_INT 1
59102: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59103: LD_ADDR_OWVAR 28
59107: PUSH
59108: LD_INT 15
59110: ST_TO_ADDR
// hc_gallery :=  ;
59111: LD_ADDR_OWVAR 33
59115: PUSH
59116: LD_STRING 
59118: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59119: LD_ADDR_OWVAR 31
59123: PUSH
59124: LD_INT 0
59126: PPUSH
59127: LD_INT 3
59129: PPUSH
59130: CALL_OW 12
59134: PUSH
59135: LD_INT 0
59137: PPUSH
59138: LD_INT 3
59140: PPUSH
59141: CALL_OW 12
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: ST_TO_ADDR
// end ;
59158: LD_VAR 0 1
59162: RET
// export function PrepareApemanEngineer ( ) ; begin
59163: LD_INT 0
59165: PPUSH
// uc_nation := 0 ;
59166: LD_ADDR_OWVAR 21
59170: PUSH
59171: LD_INT 0
59173: ST_TO_ADDR
// hc_sex := sex_male ;
59174: LD_ADDR_OWVAR 27
59178: PUSH
59179: LD_INT 1
59181: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59182: LD_ADDR_OWVAR 28
59186: PUSH
59187: LD_INT 16
59189: ST_TO_ADDR
// hc_gallery :=  ;
59190: LD_ADDR_OWVAR 33
59194: PUSH
59195: LD_STRING 
59197: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59198: LD_ADDR_OWVAR 31
59202: PUSH
59203: LD_INT 0
59205: PPUSH
59206: LD_INT 3
59208: PPUSH
59209: CALL_OW 12
59213: PUSH
59214: LD_INT 0
59216: PPUSH
59217: LD_INT 3
59219: PPUSH
59220: CALL_OW 12
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: ST_TO_ADDR
// end ;
59237: LD_VAR 0 1
59241: RET
// export function PrepareApeman ( agressivity ) ; begin
59242: LD_INT 0
59244: PPUSH
// uc_side := 0 ;
59245: LD_ADDR_OWVAR 20
59249: PUSH
59250: LD_INT 0
59252: ST_TO_ADDR
// uc_nation := 0 ;
59253: LD_ADDR_OWVAR 21
59257: PUSH
59258: LD_INT 0
59260: ST_TO_ADDR
// hc_sex := sex_male ;
59261: LD_ADDR_OWVAR 27
59265: PUSH
59266: LD_INT 1
59268: ST_TO_ADDR
// hc_class := class_apeman ;
59269: LD_ADDR_OWVAR 28
59273: PUSH
59274: LD_INT 12
59276: ST_TO_ADDR
// hc_gallery :=  ;
59277: LD_ADDR_OWVAR 33
59281: PUSH
59282: LD_STRING 
59284: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59285: LD_ADDR_OWVAR 35
59289: PUSH
59290: LD_VAR 0 1
59294: NEG
59295: PPUSH
59296: LD_VAR 0 1
59300: PPUSH
59301: CALL_OW 12
59305: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59306: LD_ADDR_OWVAR 31
59310: PUSH
59311: LD_INT 0
59313: PPUSH
59314: LD_INT 3
59316: PPUSH
59317: CALL_OW 12
59321: PUSH
59322: LD_INT 0
59324: PPUSH
59325: LD_INT 3
59327: PPUSH
59328: CALL_OW 12
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: ST_TO_ADDR
// end ;
59345: LD_VAR 0 2
59349: RET
// export function PrepareTiger ( agressivity ) ; begin
59350: LD_INT 0
59352: PPUSH
// uc_side := 0 ;
59353: LD_ADDR_OWVAR 20
59357: PUSH
59358: LD_INT 0
59360: ST_TO_ADDR
// uc_nation := 0 ;
59361: LD_ADDR_OWVAR 21
59365: PUSH
59366: LD_INT 0
59368: ST_TO_ADDR
// hc_class := class_tiger ;
59369: LD_ADDR_OWVAR 28
59373: PUSH
59374: LD_INT 14
59376: ST_TO_ADDR
// hc_gallery :=  ;
59377: LD_ADDR_OWVAR 33
59381: PUSH
59382: LD_STRING 
59384: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59385: LD_ADDR_OWVAR 35
59389: PUSH
59390: LD_VAR 0 1
59394: NEG
59395: PPUSH
59396: LD_VAR 0 1
59400: PPUSH
59401: CALL_OW 12
59405: ST_TO_ADDR
// end ;
59406: LD_VAR 0 2
59410: RET
// export function PrepareEnchidna ( ) ; begin
59411: LD_INT 0
59413: PPUSH
// uc_side := 0 ;
59414: LD_ADDR_OWVAR 20
59418: PUSH
59419: LD_INT 0
59421: ST_TO_ADDR
// uc_nation := 0 ;
59422: LD_ADDR_OWVAR 21
59426: PUSH
59427: LD_INT 0
59429: ST_TO_ADDR
// hc_class := class_baggie ;
59430: LD_ADDR_OWVAR 28
59434: PUSH
59435: LD_INT 13
59437: ST_TO_ADDR
// hc_gallery :=  ;
59438: LD_ADDR_OWVAR 33
59442: PUSH
59443: LD_STRING 
59445: ST_TO_ADDR
// end ;
59446: LD_VAR 0 1
59450: RET
// export function PrepareFrog ( ) ; begin
59451: LD_INT 0
59453: PPUSH
// uc_side := 0 ;
59454: LD_ADDR_OWVAR 20
59458: PUSH
59459: LD_INT 0
59461: ST_TO_ADDR
// uc_nation := 0 ;
59462: LD_ADDR_OWVAR 21
59466: PUSH
59467: LD_INT 0
59469: ST_TO_ADDR
// hc_class := class_frog ;
59470: LD_ADDR_OWVAR 28
59474: PUSH
59475: LD_INT 19
59477: ST_TO_ADDR
// hc_gallery :=  ;
59478: LD_ADDR_OWVAR 33
59482: PUSH
59483: LD_STRING 
59485: ST_TO_ADDR
// end ;
59486: LD_VAR 0 1
59490: RET
// export function PrepareFish ( ) ; begin
59491: LD_INT 0
59493: PPUSH
// uc_side := 0 ;
59494: LD_ADDR_OWVAR 20
59498: PUSH
59499: LD_INT 0
59501: ST_TO_ADDR
// uc_nation := 0 ;
59502: LD_ADDR_OWVAR 21
59506: PUSH
59507: LD_INT 0
59509: ST_TO_ADDR
// hc_class := class_fish ;
59510: LD_ADDR_OWVAR 28
59514: PUSH
59515: LD_INT 20
59517: ST_TO_ADDR
// hc_gallery :=  ;
59518: LD_ADDR_OWVAR 33
59522: PUSH
59523: LD_STRING 
59525: ST_TO_ADDR
// end ;
59526: LD_VAR 0 1
59530: RET
// export function PrepareBird ( ) ; begin
59531: LD_INT 0
59533: PPUSH
// uc_side := 0 ;
59534: LD_ADDR_OWVAR 20
59538: PUSH
59539: LD_INT 0
59541: ST_TO_ADDR
// uc_nation := 0 ;
59542: LD_ADDR_OWVAR 21
59546: PUSH
59547: LD_INT 0
59549: ST_TO_ADDR
// hc_class := class_phororhacos ;
59550: LD_ADDR_OWVAR 28
59554: PUSH
59555: LD_INT 18
59557: ST_TO_ADDR
// hc_gallery :=  ;
59558: LD_ADDR_OWVAR 33
59562: PUSH
59563: LD_STRING 
59565: ST_TO_ADDR
// end ;
59566: LD_VAR 0 1
59570: RET
// export function PrepareHorse ( ) ; begin
59571: LD_INT 0
59573: PPUSH
// uc_side := 0 ;
59574: LD_ADDR_OWVAR 20
59578: PUSH
59579: LD_INT 0
59581: ST_TO_ADDR
// uc_nation := 0 ;
59582: LD_ADDR_OWVAR 21
59586: PUSH
59587: LD_INT 0
59589: ST_TO_ADDR
// hc_class := class_horse ;
59590: LD_ADDR_OWVAR 28
59594: PUSH
59595: LD_INT 21
59597: ST_TO_ADDR
// hc_gallery :=  ;
59598: LD_ADDR_OWVAR 33
59602: PUSH
59603: LD_STRING 
59605: ST_TO_ADDR
// end ;
59606: LD_VAR 0 1
59610: RET
// export function PrepareMastodont ( ) ; begin
59611: LD_INT 0
59613: PPUSH
// uc_side := 0 ;
59614: LD_ADDR_OWVAR 20
59618: PUSH
59619: LD_INT 0
59621: ST_TO_ADDR
// uc_nation := 0 ;
59622: LD_ADDR_OWVAR 21
59626: PUSH
59627: LD_INT 0
59629: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59630: LD_ADDR_OWVAR 37
59634: PUSH
59635: LD_INT 31
59637: ST_TO_ADDR
// vc_control := control_rider ;
59638: LD_ADDR_OWVAR 38
59642: PUSH
59643: LD_INT 4
59645: ST_TO_ADDR
// end ;
59646: LD_VAR 0 1
59650: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59651: LD_INT 0
59653: PPUSH
59654: PPUSH
59655: PPUSH
// uc_side = 0 ;
59656: LD_ADDR_OWVAR 20
59660: PUSH
59661: LD_INT 0
59663: ST_TO_ADDR
// uc_nation = 0 ;
59664: LD_ADDR_OWVAR 21
59668: PUSH
59669: LD_INT 0
59671: ST_TO_ADDR
// InitHc_All ( ) ;
59672: CALL_OW 584
// InitVc ;
59676: CALL_OW 20
// if mastodonts then
59680: LD_VAR 0 6
59684: IFFALSE 59751
// for i = 1 to mastodonts do
59686: LD_ADDR_VAR 0 11
59690: PUSH
59691: DOUBLE
59692: LD_INT 1
59694: DEC
59695: ST_TO_ADDR
59696: LD_VAR 0 6
59700: PUSH
59701: FOR_TO
59702: IFFALSE 59749
// begin vc_chassis := 31 ;
59704: LD_ADDR_OWVAR 37
59708: PUSH
59709: LD_INT 31
59711: ST_TO_ADDR
// vc_control := control_rider ;
59712: LD_ADDR_OWVAR 38
59716: PUSH
59717: LD_INT 4
59719: ST_TO_ADDR
// animal := CreateVehicle ;
59720: LD_ADDR_VAR 0 12
59724: PUSH
59725: CALL_OW 45
59729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59730: LD_VAR 0 12
59734: PPUSH
59735: LD_VAR 0 8
59739: PPUSH
59740: LD_INT 0
59742: PPUSH
59743: CALL 61886 0 3
// end ;
59747: GO 59701
59749: POP
59750: POP
// if horses then
59751: LD_VAR 0 5
59755: IFFALSE 59822
// for i = 1 to horses do
59757: LD_ADDR_VAR 0 11
59761: PUSH
59762: DOUBLE
59763: LD_INT 1
59765: DEC
59766: ST_TO_ADDR
59767: LD_VAR 0 5
59771: PUSH
59772: FOR_TO
59773: IFFALSE 59820
// begin hc_class := 21 ;
59775: LD_ADDR_OWVAR 28
59779: PUSH
59780: LD_INT 21
59782: ST_TO_ADDR
// hc_gallery :=  ;
59783: LD_ADDR_OWVAR 33
59787: PUSH
59788: LD_STRING 
59790: ST_TO_ADDR
// animal := CreateHuman ;
59791: LD_ADDR_VAR 0 12
59795: PUSH
59796: CALL_OW 44
59800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59801: LD_VAR 0 12
59805: PPUSH
59806: LD_VAR 0 8
59810: PPUSH
59811: LD_INT 0
59813: PPUSH
59814: CALL 61886 0 3
// end ;
59818: GO 59772
59820: POP
59821: POP
// if birds then
59822: LD_VAR 0 1
59826: IFFALSE 59893
// for i = 1 to birds do
59828: LD_ADDR_VAR 0 11
59832: PUSH
59833: DOUBLE
59834: LD_INT 1
59836: DEC
59837: ST_TO_ADDR
59838: LD_VAR 0 1
59842: PUSH
59843: FOR_TO
59844: IFFALSE 59891
// begin hc_class = 18 ;
59846: LD_ADDR_OWVAR 28
59850: PUSH
59851: LD_INT 18
59853: ST_TO_ADDR
// hc_gallery =  ;
59854: LD_ADDR_OWVAR 33
59858: PUSH
59859: LD_STRING 
59861: ST_TO_ADDR
// animal := CreateHuman ;
59862: LD_ADDR_VAR 0 12
59866: PUSH
59867: CALL_OW 44
59871: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59872: LD_VAR 0 12
59876: PPUSH
59877: LD_VAR 0 8
59881: PPUSH
59882: LD_INT 0
59884: PPUSH
59885: CALL 61886 0 3
// end ;
59889: GO 59843
59891: POP
59892: POP
// if tigers then
59893: LD_VAR 0 2
59897: IFFALSE 59981
// for i = 1 to tigers do
59899: LD_ADDR_VAR 0 11
59903: PUSH
59904: DOUBLE
59905: LD_INT 1
59907: DEC
59908: ST_TO_ADDR
59909: LD_VAR 0 2
59913: PUSH
59914: FOR_TO
59915: IFFALSE 59979
// begin hc_class = class_tiger ;
59917: LD_ADDR_OWVAR 28
59921: PUSH
59922: LD_INT 14
59924: ST_TO_ADDR
// hc_gallery =  ;
59925: LD_ADDR_OWVAR 33
59929: PUSH
59930: LD_STRING 
59932: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59933: LD_ADDR_OWVAR 35
59937: PUSH
59938: LD_INT 7
59940: NEG
59941: PPUSH
59942: LD_INT 7
59944: PPUSH
59945: CALL_OW 12
59949: ST_TO_ADDR
// animal := CreateHuman ;
59950: LD_ADDR_VAR 0 12
59954: PUSH
59955: CALL_OW 44
59959: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59960: LD_VAR 0 12
59964: PPUSH
59965: LD_VAR 0 8
59969: PPUSH
59970: LD_INT 0
59972: PPUSH
59973: CALL 61886 0 3
// end ;
59977: GO 59914
59979: POP
59980: POP
// if apemans then
59981: LD_VAR 0 3
59985: IFFALSE 60108
// for i = 1 to apemans do
59987: LD_ADDR_VAR 0 11
59991: PUSH
59992: DOUBLE
59993: LD_INT 1
59995: DEC
59996: ST_TO_ADDR
59997: LD_VAR 0 3
60001: PUSH
60002: FOR_TO
60003: IFFALSE 60106
// begin hc_class = class_apeman ;
60005: LD_ADDR_OWVAR 28
60009: PUSH
60010: LD_INT 12
60012: ST_TO_ADDR
// hc_gallery =  ;
60013: LD_ADDR_OWVAR 33
60017: PUSH
60018: LD_STRING 
60020: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60021: LD_ADDR_OWVAR 35
60025: PUSH
60026: LD_INT 2
60028: NEG
60029: PPUSH
60030: LD_INT 2
60032: PPUSH
60033: CALL_OW 12
60037: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60038: LD_ADDR_OWVAR 31
60042: PUSH
60043: LD_INT 1
60045: PPUSH
60046: LD_INT 3
60048: PPUSH
60049: CALL_OW 12
60053: PUSH
60054: LD_INT 1
60056: PPUSH
60057: LD_INT 3
60059: PPUSH
60060: CALL_OW 12
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: ST_TO_ADDR
// animal := CreateHuman ;
60077: LD_ADDR_VAR 0 12
60081: PUSH
60082: CALL_OW 44
60086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60087: LD_VAR 0 12
60091: PPUSH
60092: LD_VAR 0 8
60096: PPUSH
60097: LD_INT 0
60099: PPUSH
60100: CALL 61886 0 3
// end ;
60104: GO 60002
60106: POP
60107: POP
// if enchidnas then
60108: LD_VAR 0 4
60112: IFFALSE 60179
// for i = 1 to enchidnas do
60114: LD_ADDR_VAR 0 11
60118: PUSH
60119: DOUBLE
60120: LD_INT 1
60122: DEC
60123: ST_TO_ADDR
60124: LD_VAR 0 4
60128: PUSH
60129: FOR_TO
60130: IFFALSE 60177
// begin hc_class = 13 ;
60132: LD_ADDR_OWVAR 28
60136: PUSH
60137: LD_INT 13
60139: ST_TO_ADDR
// hc_gallery =  ;
60140: LD_ADDR_OWVAR 33
60144: PUSH
60145: LD_STRING 
60147: ST_TO_ADDR
// animal := CreateHuman ;
60148: LD_ADDR_VAR 0 12
60152: PUSH
60153: CALL_OW 44
60157: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60158: LD_VAR 0 12
60162: PPUSH
60163: LD_VAR 0 8
60167: PPUSH
60168: LD_INT 0
60170: PPUSH
60171: CALL 61886 0 3
// end ;
60175: GO 60129
60177: POP
60178: POP
// if fishes then
60179: LD_VAR 0 7
60183: IFFALSE 60250
// for i = 1 to fishes do
60185: LD_ADDR_VAR 0 11
60189: PUSH
60190: DOUBLE
60191: LD_INT 1
60193: DEC
60194: ST_TO_ADDR
60195: LD_VAR 0 7
60199: PUSH
60200: FOR_TO
60201: IFFALSE 60248
// begin hc_class = 20 ;
60203: LD_ADDR_OWVAR 28
60207: PUSH
60208: LD_INT 20
60210: ST_TO_ADDR
// hc_gallery =  ;
60211: LD_ADDR_OWVAR 33
60215: PUSH
60216: LD_STRING 
60218: ST_TO_ADDR
// animal := CreateHuman ;
60219: LD_ADDR_VAR 0 12
60223: PUSH
60224: CALL_OW 44
60228: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60229: LD_VAR 0 12
60233: PPUSH
60234: LD_VAR 0 9
60238: PPUSH
60239: LD_INT 0
60241: PPUSH
60242: CALL 61886 0 3
// end ;
60246: GO 60200
60248: POP
60249: POP
// end ;
60250: LD_VAR 0 10
60254: RET
// export function WantHeal ( sci , unit ) ; begin
60255: LD_INT 0
60257: PPUSH
// if GetTaskList ( sci ) > 0 then
60258: LD_VAR 0 1
60262: PPUSH
60263: CALL_OW 437
60267: PUSH
60268: LD_INT 0
60270: GREATER
60271: IFFALSE 60341
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60273: LD_VAR 0 1
60277: PPUSH
60278: CALL_OW 437
60282: PUSH
60283: LD_INT 1
60285: ARRAY
60286: PUSH
60287: LD_INT 1
60289: ARRAY
60290: PUSH
60291: LD_STRING l
60293: EQUAL
60294: PUSH
60295: LD_VAR 0 1
60299: PPUSH
60300: CALL_OW 437
60304: PUSH
60305: LD_INT 1
60307: ARRAY
60308: PUSH
60309: LD_INT 4
60311: ARRAY
60312: PUSH
60313: LD_VAR 0 2
60317: EQUAL
60318: AND
60319: IFFALSE 60331
// result := true else
60321: LD_ADDR_VAR 0 3
60325: PUSH
60326: LD_INT 1
60328: ST_TO_ADDR
60329: GO 60339
// result := false ;
60331: LD_ADDR_VAR 0 3
60335: PUSH
60336: LD_INT 0
60338: ST_TO_ADDR
// end else
60339: GO 60349
// result := false ;
60341: LD_ADDR_VAR 0 3
60345: PUSH
60346: LD_INT 0
60348: ST_TO_ADDR
// end ;
60349: LD_VAR 0 3
60353: RET
// export function HealTarget ( sci ) ; begin
60354: LD_INT 0
60356: PPUSH
// if not sci then
60357: LD_VAR 0 1
60361: NOT
60362: IFFALSE 60366
// exit ;
60364: GO 60431
// result := 0 ;
60366: LD_ADDR_VAR 0 2
60370: PUSH
60371: LD_INT 0
60373: ST_TO_ADDR
// if GetTaskList ( sci ) then
60374: LD_VAR 0 1
60378: PPUSH
60379: CALL_OW 437
60383: IFFALSE 60431
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60385: LD_VAR 0 1
60389: PPUSH
60390: CALL_OW 437
60394: PUSH
60395: LD_INT 1
60397: ARRAY
60398: PUSH
60399: LD_INT 1
60401: ARRAY
60402: PUSH
60403: LD_STRING l
60405: EQUAL
60406: IFFALSE 60431
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60408: LD_ADDR_VAR 0 2
60412: PUSH
60413: LD_VAR 0 1
60417: PPUSH
60418: CALL_OW 437
60422: PUSH
60423: LD_INT 1
60425: ARRAY
60426: PUSH
60427: LD_INT 4
60429: ARRAY
60430: ST_TO_ADDR
// end ;
60431: LD_VAR 0 2
60435: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60436: LD_INT 0
60438: PPUSH
60439: PPUSH
60440: PPUSH
60441: PPUSH
// if not base_units then
60442: LD_VAR 0 1
60446: NOT
60447: IFFALSE 60451
// exit ;
60449: GO 60538
// result := false ;
60451: LD_ADDR_VAR 0 2
60455: PUSH
60456: LD_INT 0
60458: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60459: LD_ADDR_VAR 0 5
60463: PUSH
60464: LD_VAR 0 1
60468: PPUSH
60469: LD_INT 21
60471: PUSH
60472: LD_INT 3
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PPUSH
60479: CALL_OW 72
60483: ST_TO_ADDR
// if not tmp then
60484: LD_VAR 0 5
60488: NOT
60489: IFFALSE 60493
// exit ;
60491: GO 60538
// for i in tmp do
60493: LD_ADDR_VAR 0 3
60497: PUSH
60498: LD_VAR 0 5
60502: PUSH
60503: FOR_IN
60504: IFFALSE 60536
// begin result := EnemyInRange ( i , 22 ) ;
60506: LD_ADDR_VAR 0 2
60510: PUSH
60511: LD_VAR 0 3
60515: PPUSH
60516: LD_INT 22
60518: PPUSH
60519: CALL 58224 0 2
60523: ST_TO_ADDR
// if result then
60524: LD_VAR 0 2
60528: IFFALSE 60534
// exit ;
60530: POP
60531: POP
60532: GO 60538
// end ;
60534: GO 60503
60536: POP
60537: POP
// end ;
60538: LD_VAR 0 2
60542: RET
// export function FilterByTag ( units , tag ) ; begin
60543: LD_INT 0
60545: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60546: LD_ADDR_VAR 0 3
60550: PUSH
60551: LD_VAR 0 1
60555: PPUSH
60556: LD_INT 120
60558: PUSH
60559: LD_VAR 0 2
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PPUSH
60568: CALL_OW 72
60572: ST_TO_ADDR
// end ;
60573: LD_VAR 0 3
60577: RET
// export function IsDriver ( un ) ; begin
60578: LD_INT 0
60580: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60581: LD_ADDR_VAR 0 2
60585: PUSH
60586: LD_VAR 0 1
60590: PUSH
60591: LD_INT 55
60593: PUSH
60594: EMPTY
60595: LIST
60596: PPUSH
60597: CALL_OW 69
60601: IN
60602: ST_TO_ADDR
// end ;
60603: LD_VAR 0 2
60607: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60608: LD_INT 0
60610: PPUSH
60611: PPUSH
// list := [ ] ;
60612: LD_ADDR_VAR 0 5
60616: PUSH
60617: EMPTY
60618: ST_TO_ADDR
// case d of 0 :
60619: LD_VAR 0 3
60623: PUSH
60624: LD_INT 0
60626: DOUBLE
60627: EQUAL
60628: IFTRUE 60632
60630: GO 60765
60632: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60633: LD_ADDR_VAR 0 5
60637: PUSH
60638: LD_VAR 0 1
60642: PUSH
60643: LD_INT 4
60645: MINUS
60646: PUSH
60647: LD_VAR 0 2
60651: PUSH
60652: LD_INT 4
60654: MINUS
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: LIST
60663: PUSH
60664: LD_VAR 0 1
60668: PUSH
60669: LD_INT 3
60671: MINUS
60672: PUSH
60673: LD_VAR 0 2
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: LIST
60685: PUSH
60686: LD_VAR 0 1
60690: PUSH
60691: LD_INT 4
60693: PLUS
60694: PUSH
60695: LD_VAR 0 2
60699: PUSH
60700: LD_INT 4
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: LIST
60707: PUSH
60708: LD_VAR 0 1
60712: PUSH
60713: LD_INT 3
60715: PLUS
60716: PUSH
60717: LD_VAR 0 2
60721: PUSH
60722: LD_INT 3
60724: PLUS
60725: PUSH
60726: LD_INT 5
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: LIST
60733: PUSH
60734: LD_VAR 0 1
60738: PUSH
60739: LD_VAR 0 2
60743: PUSH
60744: LD_INT 4
60746: PLUS
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: ST_TO_ADDR
// end ; 1 :
60763: GO 61463
60765: LD_INT 1
60767: DOUBLE
60768: EQUAL
60769: IFTRUE 60773
60771: GO 60906
60773: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60774: LD_ADDR_VAR 0 5
60778: PUSH
60779: LD_VAR 0 1
60783: PUSH
60784: LD_VAR 0 2
60788: PUSH
60789: LD_INT 4
60791: MINUS
60792: PUSH
60793: LD_INT 3
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: LIST
60800: PUSH
60801: LD_VAR 0 1
60805: PUSH
60806: LD_INT 3
60808: MINUS
60809: PUSH
60810: LD_VAR 0 2
60814: PUSH
60815: LD_INT 3
60817: MINUS
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: LIST
60826: PUSH
60827: LD_VAR 0 1
60831: PUSH
60832: LD_INT 4
60834: MINUS
60835: PUSH
60836: LD_VAR 0 2
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: LIST
60848: PUSH
60849: LD_VAR 0 1
60853: PUSH
60854: LD_VAR 0 2
60858: PUSH
60859: LD_INT 3
60861: PLUS
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: LIST
60870: PUSH
60871: LD_VAR 0 1
60875: PUSH
60876: LD_INT 4
60878: PLUS
60879: PUSH
60880: LD_VAR 0 2
60884: PUSH
60885: LD_INT 4
60887: PLUS
60888: PUSH
60889: LD_INT 5
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: LIST
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: ST_TO_ADDR
// end ; 2 :
60904: GO 61463
60906: LD_INT 2
60908: DOUBLE
60909: EQUAL
60910: IFTRUE 60914
60912: GO 61043
60914: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60915: LD_ADDR_VAR 0 5
60919: PUSH
60920: LD_VAR 0 1
60924: PUSH
60925: LD_VAR 0 2
60929: PUSH
60930: LD_INT 3
60932: MINUS
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: LIST
60941: PUSH
60942: LD_VAR 0 1
60946: PUSH
60947: LD_INT 4
60949: PLUS
60950: PUSH
60951: LD_VAR 0 2
60955: PUSH
60956: LD_INT 4
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: LIST
60963: PUSH
60964: LD_VAR 0 1
60968: PUSH
60969: LD_VAR 0 2
60973: PUSH
60974: LD_INT 4
60976: PLUS
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: LIST
60985: PUSH
60986: LD_VAR 0 1
60990: PUSH
60991: LD_INT 3
60993: MINUS
60994: PUSH
60995: LD_VAR 0 2
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: LIST
61007: PUSH
61008: LD_VAR 0 1
61012: PUSH
61013: LD_INT 4
61015: MINUS
61016: PUSH
61017: LD_VAR 0 2
61021: PUSH
61022: LD_INT 4
61024: MINUS
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: LIST
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: ST_TO_ADDR
// end ; 3 :
61041: GO 61463
61043: LD_INT 3
61045: DOUBLE
61046: EQUAL
61047: IFTRUE 61051
61049: GO 61184
61051: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61052: LD_ADDR_VAR 0 5
61056: PUSH
61057: LD_VAR 0 1
61061: PUSH
61062: LD_INT 3
61064: PLUS
61065: PUSH
61066: LD_VAR 0 2
61070: PUSH
61071: LD_INT 4
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: LIST
61078: PUSH
61079: LD_VAR 0 1
61083: PUSH
61084: LD_INT 4
61086: PLUS
61087: PUSH
61088: LD_VAR 0 2
61092: PUSH
61093: LD_INT 4
61095: PLUS
61096: PUSH
61097: LD_INT 5
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: LIST
61104: PUSH
61105: LD_VAR 0 1
61109: PUSH
61110: LD_INT 4
61112: MINUS
61113: PUSH
61114: LD_VAR 0 2
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: LIST
61126: PUSH
61127: LD_VAR 0 1
61131: PUSH
61132: LD_VAR 0 2
61136: PUSH
61137: LD_INT 4
61139: MINUS
61140: PUSH
61141: LD_INT 3
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: LIST
61148: PUSH
61149: LD_VAR 0 1
61153: PUSH
61154: LD_INT 3
61156: MINUS
61157: PUSH
61158: LD_VAR 0 2
61162: PUSH
61163: LD_INT 3
61165: MINUS
61166: PUSH
61167: LD_INT 2
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: LIST
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: ST_TO_ADDR
// end ; 4 :
61182: GO 61463
61184: LD_INT 4
61186: DOUBLE
61187: EQUAL
61188: IFTRUE 61192
61190: GO 61325
61192: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61193: LD_ADDR_VAR 0 5
61197: PUSH
61198: LD_VAR 0 1
61202: PUSH
61203: LD_VAR 0 2
61207: PUSH
61208: LD_INT 4
61210: PLUS
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: LIST
61219: PUSH
61220: LD_VAR 0 1
61224: PUSH
61225: LD_INT 3
61227: PLUS
61228: PUSH
61229: LD_VAR 0 2
61233: PUSH
61234: LD_INT 3
61236: PLUS
61237: PUSH
61238: LD_INT 5
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: PUSH
61246: LD_VAR 0 1
61250: PUSH
61251: LD_INT 4
61253: PLUS
61254: PUSH
61255: LD_VAR 0 2
61259: PUSH
61260: LD_INT 4
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: LIST
61267: PUSH
61268: LD_VAR 0 1
61272: PUSH
61273: LD_VAR 0 2
61277: PUSH
61278: LD_INT 3
61280: MINUS
61281: PUSH
61282: LD_INT 3
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: LIST
61289: PUSH
61290: LD_VAR 0 1
61294: PUSH
61295: LD_INT 4
61297: MINUS
61298: PUSH
61299: LD_VAR 0 2
61303: PUSH
61304: LD_INT 4
61306: MINUS
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: LIST
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: ST_TO_ADDR
// end ; 5 :
61323: GO 61463
61325: LD_INT 5
61327: DOUBLE
61328: EQUAL
61329: IFTRUE 61333
61331: GO 61462
61333: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61334: LD_ADDR_VAR 0 5
61338: PUSH
61339: LD_VAR 0 1
61343: PUSH
61344: LD_INT 4
61346: MINUS
61347: PUSH
61348: LD_VAR 0 2
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: LIST
61360: PUSH
61361: LD_VAR 0 1
61365: PUSH
61366: LD_VAR 0 2
61370: PUSH
61371: LD_INT 4
61373: MINUS
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: LIST
61382: PUSH
61383: LD_VAR 0 1
61387: PUSH
61388: LD_INT 4
61390: PLUS
61391: PUSH
61392: LD_VAR 0 2
61396: PUSH
61397: LD_INT 4
61399: PLUS
61400: PUSH
61401: LD_INT 5
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: LIST
61408: PUSH
61409: LD_VAR 0 1
61413: PUSH
61414: LD_INT 3
61416: PLUS
61417: PUSH
61418: LD_VAR 0 2
61422: PUSH
61423: LD_INT 4
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: LIST
61430: PUSH
61431: LD_VAR 0 1
61435: PUSH
61436: LD_VAR 0 2
61440: PUSH
61441: LD_INT 3
61443: PLUS
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: ST_TO_ADDR
// end ; end ;
61460: GO 61463
61462: POP
// result := list ;
61463: LD_ADDR_VAR 0 4
61467: PUSH
61468: LD_VAR 0 5
61472: ST_TO_ADDR
// end ;
61473: LD_VAR 0 4
61477: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61478: LD_INT 0
61480: PPUSH
61481: PPUSH
61482: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61483: LD_VAR 0 1
61487: NOT
61488: PUSH
61489: LD_VAR 0 2
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: LD_INT 2
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: LD_INT 4
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: IN
61512: NOT
61513: OR
61514: IFFALSE 61518
// exit ;
61516: GO 61610
// tmp := [ ] ;
61518: LD_ADDR_VAR 0 5
61522: PUSH
61523: EMPTY
61524: ST_TO_ADDR
// for i in units do
61525: LD_ADDR_VAR 0 4
61529: PUSH
61530: LD_VAR 0 1
61534: PUSH
61535: FOR_IN
61536: IFFALSE 61579
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61538: LD_ADDR_VAR 0 5
61542: PUSH
61543: LD_VAR 0 5
61547: PPUSH
61548: LD_VAR 0 5
61552: PUSH
61553: LD_INT 1
61555: PLUS
61556: PPUSH
61557: LD_VAR 0 4
61561: PPUSH
61562: LD_VAR 0 2
61566: PPUSH
61567: CALL_OW 259
61571: PPUSH
61572: CALL_OW 2
61576: ST_TO_ADDR
61577: GO 61535
61579: POP
61580: POP
// if not tmp then
61581: LD_VAR 0 5
61585: NOT
61586: IFFALSE 61590
// exit ;
61588: GO 61610
// result := SortListByListDesc ( units , tmp ) ;
61590: LD_ADDR_VAR 0 3
61594: PUSH
61595: LD_VAR 0 1
61599: PPUSH
61600: LD_VAR 0 5
61604: PPUSH
61605: CALL_OW 77
61609: ST_TO_ADDR
// end ;
61610: LD_VAR 0 3
61614: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61615: LD_INT 0
61617: PPUSH
61618: PPUSH
61619: PPUSH
// result := false ;
61620: LD_ADDR_VAR 0 3
61624: PUSH
61625: LD_INT 0
61627: ST_TO_ADDR
// x := GetX ( building ) ;
61628: LD_ADDR_VAR 0 4
61632: PUSH
61633: LD_VAR 0 2
61637: PPUSH
61638: CALL_OW 250
61642: ST_TO_ADDR
// y := GetY ( building ) ;
61643: LD_ADDR_VAR 0 5
61647: PUSH
61648: LD_VAR 0 2
61652: PPUSH
61653: CALL_OW 251
61657: ST_TO_ADDR
// if not building or not x or not y then
61658: LD_VAR 0 2
61662: NOT
61663: PUSH
61664: LD_VAR 0 4
61668: NOT
61669: OR
61670: PUSH
61671: LD_VAR 0 5
61675: NOT
61676: OR
61677: IFFALSE 61681
// exit ;
61679: GO 61773
// if GetTaskList ( unit ) then
61681: LD_VAR 0 1
61685: PPUSH
61686: CALL_OW 437
61690: IFFALSE 61773
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61692: LD_STRING e
61694: PUSH
61695: LD_VAR 0 1
61699: PPUSH
61700: CALL_OW 437
61704: PUSH
61705: LD_INT 1
61707: ARRAY
61708: PUSH
61709: LD_INT 1
61711: ARRAY
61712: EQUAL
61713: PUSH
61714: LD_VAR 0 4
61718: PUSH
61719: LD_VAR 0 1
61723: PPUSH
61724: CALL_OW 437
61728: PUSH
61729: LD_INT 1
61731: ARRAY
61732: PUSH
61733: LD_INT 2
61735: ARRAY
61736: EQUAL
61737: AND
61738: PUSH
61739: LD_VAR 0 5
61743: PUSH
61744: LD_VAR 0 1
61748: PPUSH
61749: CALL_OW 437
61753: PUSH
61754: LD_INT 1
61756: ARRAY
61757: PUSH
61758: LD_INT 3
61760: ARRAY
61761: EQUAL
61762: AND
61763: IFFALSE 61773
// result := true end ;
61765: LD_ADDR_VAR 0 3
61769: PUSH
61770: LD_INT 1
61772: ST_TO_ADDR
// end ;
61773: LD_VAR 0 3
61777: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61778: LD_INT 0
61780: PPUSH
// result := false ;
61781: LD_ADDR_VAR 0 4
61785: PUSH
61786: LD_INT 0
61788: ST_TO_ADDR
// if GetTaskList ( unit ) then
61789: LD_VAR 0 1
61793: PPUSH
61794: CALL_OW 437
61798: IFFALSE 61881
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61800: LD_STRING M
61802: PUSH
61803: LD_VAR 0 1
61807: PPUSH
61808: CALL_OW 437
61812: PUSH
61813: LD_INT 1
61815: ARRAY
61816: PUSH
61817: LD_INT 1
61819: ARRAY
61820: EQUAL
61821: PUSH
61822: LD_VAR 0 2
61826: PUSH
61827: LD_VAR 0 1
61831: PPUSH
61832: CALL_OW 437
61836: PUSH
61837: LD_INT 1
61839: ARRAY
61840: PUSH
61841: LD_INT 2
61843: ARRAY
61844: EQUAL
61845: AND
61846: PUSH
61847: LD_VAR 0 3
61851: PUSH
61852: LD_VAR 0 1
61856: PPUSH
61857: CALL_OW 437
61861: PUSH
61862: LD_INT 1
61864: ARRAY
61865: PUSH
61866: LD_INT 3
61868: ARRAY
61869: EQUAL
61870: AND
61871: IFFALSE 61881
// result := true ;
61873: LD_ADDR_VAR 0 4
61877: PUSH
61878: LD_INT 1
61880: ST_TO_ADDR
// end ; end ;
61881: LD_VAR 0 4
61885: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61886: LD_INT 0
61888: PPUSH
61889: PPUSH
61890: PPUSH
61891: PPUSH
// if not unit or not area then
61892: LD_VAR 0 1
61896: NOT
61897: PUSH
61898: LD_VAR 0 2
61902: NOT
61903: OR
61904: IFFALSE 61908
// exit ;
61906: GO 62072
// tmp := AreaToList ( area , i ) ;
61908: LD_ADDR_VAR 0 6
61912: PUSH
61913: LD_VAR 0 2
61917: PPUSH
61918: LD_VAR 0 5
61922: PPUSH
61923: CALL_OW 517
61927: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61928: LD_ADDR_VAR 0 5
61932: PUSH
61933: DOUBLE
61934: LD_INT 1
61936: DEC
61937: ST_TO_ADDR
61938: LD_VAR 0 6
61942: PUSH
61943: LD_INT 1
61945: ARRAY
61946: PUSH
61947: FOR_TO
61948: IFFALSE 62070
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61950: LD_ADDR_VAR 0 7
61954: PUSH
61955: LD_VAR 0 6
61959: PUSH
61960: LD_INT 1
61962: ARRAY
61963: PUSH
61964: LD_VAR 0 5
61968: ARRAY
61969: PUSH
61970: LD_VAR 0 6
61974: PUSH
61975: LD_INT 2
61977: ARRAY
61978: PUSH
61979: LD_VAR 0 5
61983: ARRAY
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61989: LD_VAR 0 7
61993: PUSH
61994: LD_INT 1
61996: ARRAY
61997: PPUSH
61998: LD_VAR 0 7
62002: PUSH
62003: LD_INT 2
62005: ARRAY
62006: PPUSH
62007: CALL_OW 428
62011: PUSH
62012: LD_INT 0
62014: EQUAL
62015: IFFALSE 62068
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62017: LD_VAR 0 1
62021: PPUSH
62022: LD_VAR 0 7
62026: PUSH
62027: LD_INT 1
62029: ARRAY
62030: PPUSH
62031: LD_VAR 0 7
62035: PUSH
62036: LD_INT 2
62038: ARRAY
62039: PPUSH
62040: LD_VAR 0 3
62044: PPUSH
62045: CALL_OW 48
// result := IsPlaced ( unit ) ;
62049: LD_ADDR_VAR 0 4
62053: PUSH
62054: LD_VAR 0 1
62058: PPUSH
62059: CALL_OW 305
62063: ST_TO_ADDR
// exit ;
62064: POP
62065: POP
62066: GO 62072
// end ; end ;
62068: GO 61947
62070: POP
62071: POP
// end ;
62072: LD_VAR 0 4
62076: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62077: LD_INT 0
62079: PPUSH
62080: PPUSH
62081: PPUSH
// if not side or side > 8 then
62082: LD_VAR 0 1
62086: NOT
62087: PUSH
62088: LD_VAR 0 1
62092: PUSH
62093: LD_INT 8
62095: GREATER
62096: OR
62097: IFFALSE 62101
// exit ;
62099: GO 62288
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62101: LD_ADDR_VAR 0 4
62105: PUSH
62106: LD_INT 22
62108: PUSH
62109: LD_VAR 0 1
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 21
62120: PUSH
62121: LD_INT 3
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PPUSH
62132: CALL_OW 69
62136: ST_TO_ADDR
// if not tmp then
62137: LD_VAR 0 4
62141: NOT
62142: IFFALSE 62146
// exit ;
62144: GO 62288
// enable_addtolog := true ;
62146: LD_ADDR_OWVAR 81
62150: PUSH
62151: LD_INT 1
62153: ST_TO_ADDR
// AddToLog ( [ ) ;
62154: LD_STRING [
62156: PPUSH
62157: CALL_OW 561
// for i in tmp do
62161: LD_ADDR_VAR 0 3
62165: PUSH
62166: LD_VAR 0 4
62170: PUSH
62171: FOR_IN
62172: IFFALSE 62279
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62174: LD_STRING [
62176: PUSH
62177: LD_VAR 0 3
62181: PPUSH
62182: CALL_OW 266
62186: STR
62187: PUSH
62188: LD_STRING , 
62190: STR
62191: PUSH
62192: LD_VAR 0 3
62196: PPUSH
62197: CALL_OW 250
62201: STR
62202: PUSH
62203: LD_STRING , 
62205: STR
62206: PUSH
62207: LD_VAR 0 3
62211: PPUSH
62212: CALL_OW 251
62216: STR
62217: PUSH
62218: LD_STRING , 
62220: STR
62221: PUSH
62222: LD_VAR 0 3
62226: PPUSH
62227: CALL_OW 254
62231: STR
62232: PUSH
62233: LD_STRING , 
62235: STR
62236: PUSH
62237: LD_VAR 0 3
62241: PPUSH
62242: LD_INT 1
62244: PPUSH
62245: CALL_OW 268
62249: STR
62250: PUSH
62251: LD_STRING , 
62253: STR
62254: PUSH
62255: LD_VAR 0 3
62259: PPUSH
62260: LD_INT 2
62262: PPUSH
62263: CALL_OW 268
62267: STR
62268: PUSH
62269: LD_STRING ],
62271: STR
62272: PPUSH
62273: CALL_OW 561
// end ;
62277: GO 62171
62279: POP
62280: POP
// AddToLog ( ]; ) ;
62281: LD_STRING ];
62283: PPUSH
62284: CALL_OW 561
// end ;
62288: LD_VAR 0 2
62292: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62293: LD_INT 0
62295: PPUSH
62296: PPUSH
62297: PPUSH
62298: PPUSH
62299: PPUSH
// if not area or not rate or not max then
62300: LD_VAR 0 1
62304: NOT
62305: PUSH
62306: LD_VAR 0 2
62310: NOT
62311: OR
62312: PUSH
62313: LD_VAR 0 4
62317: NOT
62318: OR
62319: IFFALSE 62323
// exit ;
62321: GO 62512
// while 1 do
62323: LD_INT 1
62325: IFFALSE 62512
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62327: LD_ADDR_VAR 0 9
62331: PUSH
62332: LD_VAR 0 1
62336: PPUSH
62337: LD_INT 1
62339: PPUSH
62340: CALL_OW 287
62344: PUSH
62345: LD_INT 10
62347: MUL
62348: ST_TO_ADDR
// r := rate / 10 ;
62349: LD_ADDR_VAR 0 7
62353: PUSH
62354: LD_VAR 0 2
62358: PUSH
62359: LD_INT 10
62361: DIVREAL
62362: ST_TO_ADDR
// time := 1 1$00 ;
62363: LD_ADDR_VAR 0 8
62367: PUSH
62368: LD_INT 2100
62370: ST_TO_ADDR
// if amount < min then
62371: LD_VAR 0 9
62375: PUSH
62376: LD_VAR 0 3
62380: LESS
62381: IFFALSE 62399
// r := r * 2 else
62383: LD_ADDR_VAR 0 7
62387: PUSH
62388: LD_VAR 0 7
62392: PUSH
62393: LD_INT 2
62395: MUL
62396: ST_TO_ADDR
62397: GO 62425
// if amount > max then
62399: LD_VAR 0 9
62403: PUSH
62404: LD_VAR 0 4
62408: GREATER
62409: IFFALSE 62425
// r := r / 2 ;
62411: LD_ADDR_VAR 0 7
62415: PUSH
62416: LD_VAR 0 7
62420: PUSH
62421: LD_INT 2
62423: DIVREAL
62424: ST_TO_ADDR
// time := time / r ;
62425: LD_ADDR_VAR 0 8
62429: PUSH
62430: LD_VAR 0 8
62434: PUSH
62435: LD_VAR 0 7
62439: DIVREAL
62440: ST_TO_ADDR
// if time < 0 then
62441: LD_VAR 0 8
62445: PUSH
62446: LD_INT 0
62448: LESS
62449: IFFALSE 62466
// time := time * - 1 ;
62451: LD_ADDR_VAR 0 8
62455: PUSH
62456: LD_VAR 0 8
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: MUL
62465: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62466: LD_VAR 0 8
62470: PUSH
62471: LD_INT 35
62473: PPUSH
62474: LD_INT 875
62476: PPUSH
62477: CALL_OW 12
62481: PLUS
62482: PPUSH
62483: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62487: LD_INT 1
62489: PPUSH
62490: LD_INT 5
62492: PPUSH
62493: CALL_OW 12
62497: PPUSH
62498: LD_VAR 0 1
62502: PPUSH
62503: LD_INT 1
62505: PPUSH
62506: CALL_OW 55
// end ;
62510: GO 62323
// end ;
62512: LD_VAR 0 5
62516: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62517: LD_INT 0
62519: PPUSH
62520: PPUSH
62521: PPUSH
62522: PPUSH
62523: PPUSH
62524: PPUSH
62525: PPUSH
62526: PPUSH
// if not turrets or not factories then
62527: LD_VAR 0 1
62531: NOT
62532: PUSH
62533: LD_VAR 0 2
62537: NOT
62538: OR
62539: IFFALSE 62543
// exit ;
62541: GO 62850
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62543: LD_ADDR_VAR 0 10
62547: PUSH
62548: LD_INT 5
62550: PUSH
62551: LD_INT 6
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 2
62560: PUSH
62561: LD_INT 4
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 3
62570: PUSH
62571: LD_INT 5
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 24
62585: PUSH
62586: LD_INT 25
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 23
62595: PUSH
62596: LD_INT 27
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 42
62609: PUSH
62610: LD_INT 43
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 44
62619: PUSH
62620: LD_INT 46
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 45
62629: PUSH
62630: LD_INT 47
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: ST_TO_ADDR
// result := [ ] ;
62647: LD_ADDR_VAR 0 3
62651: PUSH
62652: EMPTY
62653: ST_TO_ADDR
// for i in turrets do
62654: LD_ADDR_VAR 0 4
62658: PUSH
62659: LD_VAR 0 1
62663: PUSH
62664: FOR_IN
62665: IFFALSE 62848
// begin nat := GetNation ( i ) ;
62667: LD_ADDR_VAR 0 7
62671: PUSH
62672: LD_VAR 0 4
62676: PPUSH
62677: CALL_OW 248
62681: ST_TO_ADDR
// weapon := 0 ;
62682: LD_ADDR_VAR 0 8
62686: PUSH
62687: LD_INT 0
62689: ST_TO_ADDR
// if not nat then
62690: LD_VAR 0 7
62694: NOT
62695: IFFALSE 62699
// continue ;
62697: GO 62664
// for j in list [ nat ] do
62699: LD_ADDR_VAR 0 5
62703: PUSH
62704: LD_VAR 0 10
62708: PUSH
62709: LD_VAR 0 7
62713: ARRAY
62714: PUSH
62715: FOR_IN
62716: IFFALSE 62757
// if GetBWeapon ( i ) = j [ 1 ] then
62718: LD_VAR 0 4
62722: PPUSH
62723: CALL_OW 269
62727: PUSH
62728: LD_VAR 0 5
62732: PUSH
62733: LD_INT 1
62735: ARRAY
62736: EQUAL
62737: IFFALSE 62755
// begin weapon := j [ 2 ] ;
62739: LD_ADDR_VAR 0 8
62743: PUSH
62744: LD_VAR 0 5
62748: PUSH
62749: LD_INT 2
62751: ARRAY
62752: ST_TO_ADDR
// break ;
62753: GO 62757
// end ;
62755: GO 62715
62757: POP
62758: POP
// if not weapon then
62759: LD_VAR 0 8
62763: NOT
62764: IFFALSE 62768
// continue ;
62766: GO 62664
// for k in factories do
62768: LD_ADDR_VAR 0 6
62772: PUSH
62773: LD_VAR 0 2
62777: PUSH
62778: FOR_IN
62779: IFFALSE 62844
// begin weapons := AvailableWeaponList ( k ) ;
62781: LD_ADDR_VAR 0 9
62785: PUSH
62786: LD_VAR 0 6
62790: PPUSH
62791: CALL_OW 478
62795: ST_TO_ADDR
// if not weapons then
62796: LD_VAR 0 9
62800: NOT
62801: IFFALSE 62805
// continue ;
62803: GO 62778
// if weapon in weapons then
62805: LD_VAR 0 8
62809: PUSH
62810: LD_VAR 0 9
62814: IN
62815: IFFALSE 62842
// begin result := [ i , weapon ] ;
62817: LD_ADDR_VAR 0 3
62821: PUSH
62822: LD_VAR 0 4
62826: PUSH
62827: LD_VAR 0 8
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: ST_TO_ADDR
// exit ;
62836: POP
62837: POP
62838: POP
62839: POP
62840: GO 62850
// end ; end ;
62842: GO 62778
62844: POP
62845: POP
// end ;
62846: GO 62664
62848: POP
62849: POP
// end ;
62850: LD_VAR 0 3
62854: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62855: LD_INT 0
62857: PPUSH
// if not side or side > 8 then
62858: LD_VAR 0 3
62862: NOT
62863: PUSH
62864: LD_VAR 0 3
62868: PUSH
62869: LD_INT 8
62871: GREATER
62872: OR
62873: IFFALSE 62877
// exit ;
62875: GO 62936
// if not range then
62877: LD_VAR 0 4
62881: NOT
62882: IFFALSE 62893
// range := - 12 ;
62884: LD_ADDR_VAR 0 4
62888: PUSH
62889: LD_INT 12
62891: NEG
62892: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62893: LD_VAR 0 1
62897: PPUSH
62898: LD_VAR 0 2
62902: PPUSH
62903: LD_VAR 0 3
62907: PPUSH
62908: LD_VAR 0 4
62912: PPUSH
62913: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62917: LD_VAR 0 1
62921: PPUSH
62922: LD_VAR 0 2
62926: PPUSH
62927: LD_VAR 0 3
62931: PPUSH
62932: CALL_OW 331
// end ;
62936: LD_VAR 0 5
62940: RET
// export function Video ( mode ) ; begin
62941: LD_INT 0
62943: PPUSH
// ingame_video = mode ;
62944: LD_ADDR_OWVAR 52
62948: PUSH
62949: LD_VAR 0 1
62953: ST_TO_ADDR
// interface_hidden = mode ;
62954: LD_ADDR_OWVAR 54
62958: PUSH
62959: LD_VAR 0 1
62963: ST_TO_ADDR
// end ;
62964: LD_VAR 0 2
62968: RET
// export function Join ( array , element ) ; begin
62969: LD_INT 0
62971: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62972: LD_ADDR_VAR 0 3
62976: PUSH
62977: LD_VAR 0 1
62981: PPUSH
62982: LD_VAR 0 1
62986: PUSH
62987: LD_INT 1
62989: PLUS
62990: PPUSH
62991: LD_VAR 0 2
62995: PPUSH
62996: CALL_OW 1
63000: ST_TO_ADDR
// end ;
63001: LD_VAR 0 3
63005: RET
// export function JoinUnion ( array , element ) ; begin
63006: LD_INT 0
63008: PPUSH
// result := array union element ;
63009: LD_ADDR_VAR 0 3
63013: PUSH
63014: LD_VAR 0 1
63018: PUSH
63019: LD_VAR 0 2
63023: UNION
63024: ST_TO_ADDR
// end ;
63025: LD_VAR 0 3
63029: RET
// export function GetBehemoths ( side ) ; begin
63030: LD_INT 0
63032: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63033: LD_ADDR_VAR 0 2
63037: PUSH
63038: LD_INT 22
63040: PUSH
63041: LD_VAR 0 1
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 31
63052: PUSH
63053: LD_INT 25
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PPUSH
63064: CALL_OW 69
63068: ST_TO_ADDR
// end ;
63069: LD_VAR 0 2
63073: RET
// export function Shuffle ( array ) ; var i , index ; begin
63074: LD_INT 0
63076: PPUSH
63077: PPUSH
63078: PPUSH
// result := [ ] ;
63079: LD_ADDR_VAR 0 2
63083: PUSH
63084: EMPTY
63085: ST_TO_ADDR
// if not array then
63086: LD_VAR 0 1
63090: NOT
63091: IFFALSE 63095
// exit ;
63093: GO 63194
// Randomize ;
63095: CALL_OW 10
// for i = array downto 1 do
63099: LD_ADDR_VAR 0 3
63103: PUSH
63104: DOUBLE
63105: LD_VAR 0 1
63109: INC
63110: ST_TO_ADDR
63111: LD_INT 1
63113: PUSH
63114: FOR_DOWNTO
63115: IFFALSE 63192
// begin index := rand ( 1 , array ) ;
63117: LD_ADDR_VAR 0 4
63121: PUSH
63122: LD_INT 1
63124: PPUSH
63125: LD_VAR 0 1
63129: PPUSH
63130: CALL_OW 12
63134: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63135: LD_ADDR_VAR 0 2
63139: PUSH
63140: LD_VAR 0 2
63144: PPUSH
63145: LD_VAR 0 2
63149: PUSH
63150: LD_INT 1
63152: PLUS
63153: PPUSH
63154: LD_VAR 0 1
63158: PUSH
63159: LD_VAR 0 4
63163: ARRAY
63164: PPUSH
63165: CALL_OW 2
63169: ST_TO_ADDR
// array := Delete ( array , index ) ;
63170: LD_ADDR_VAR 0 1
63174: PUSH
63175: LD_VAR 0 1
63179: PPUSH
63180: LD_VAR 0 4
63184: PPUSH
63185: CALL_OW 3
63189: ST_TO_ADDR
// end ;
63190: GO 63114
63192: POP
63193: POP
// end ;
63194: LD_VAR 0 2
63198: RET
// export function GetBaseMaterials ( base ) ; begin
63199: LD_INT 0
63201: PPUSH
// result := [ 0 , 0 , 0 ] ;
63202: LD_ADDR_VAR 0 2
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: LIST
63220: ST_TO_ADDR
// if not base then
63221: LD_VAR 0 1
63225: NOT
63226: IFFALSE 63230
// exit ;
63228: GO 63279
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63230: LD_ADDR_VAR 0 2
63234: PUSH
63235: LD_VAR 0 1
63239: PPUSH
63240: LD_INT 1
63242: PPUSH
63243: CALL_OW 275
63247: PUSH
63248: LD_VAR 0 1
63252: PPUSH
63253: LD_INT 2
63255: PPUSH
63256: CALL_OW 275
63260: PUSH
63261: LD_VAR 0 1
63265: PPUSH
63266: LD_INT 3
63268: PPUSH
63269: CALL_OW 275
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: LIST
63278: ST_TO_ADDR
// end ;
63279: LD_VAR 0 2
63283: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63284: LD_INT 0
63286: PPUSH
63287: PPUSH
// result := array ;
63288: LD_ADDR_VAR 0 3
63292: PUSH
63293: LD_VAR 0 1
63297: ST_TO_ADDR
// if size >= result then
63298: LD_VAR 0 2
63302: PUSH
63303: LD_VAR 0 3
63307: GREATEREQUAL
63308: IFFALSE 63312
// exit ;
63310: GO 63362
// if size then
63312: LD_VAR 0 2
63316: IFFALSE 63362
// for i := array downto size do
63318: LD_ADDR_VAR 0 4
63322: PUSH
63323: DOUBLE
63324: LD_VAR 0 1
63328: INC
63329: ST_TO_ADDR
63330: LD_VAR 0 2
63334: PUSH
63335: FOR_DOWNTO
63336: IFFALSE 63360
// result := Delete ( result , result ) ;
63338: LD_ADDR_VAR 0 3
63342: PUSH
63343: LD_VAR 0 3
63347: PPUSH
63348: LD_VAR 0 3
63352: PPUSH
63353: CALL_OW 3
63357: ST_TO_ADDR
63358: GO 63335
63360: POP
63361: POP
// end ;
63362: LD_VAR 0 3
63366: RET
// export function ComExit ( unit ) ; var tmp ; begin
63367: LD_INT 0
63369: PPUSH
63370: PPUSH
// if not IsInUnit ( unit ) then
63371: LD_VAR 0 1
63375: PPUSH
63376: CALL_OW 310
63380: NOT
63381: IFFALSE 63385
// exit ;
63383: GO 63445
// tmp := IsInUnit ( unit ) ;
63385: LD_ADDR_VAR 0 3
63389: PUSH
63390: LD_VAR 0 1
63394: PPUSH
63395: CALL_OW 310
63399: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63400: LD_VAR 0 3
63404: PPUSH
63405: CALL_OW 247
63409: PUSH
63410: LD_INT 2
63412: EQUAL
63413: IFFALSE 63426
// ComExitVehicle ( unit ) else
63415: LD_VAR 0 1
63419: PPUSH
63420: CALL_OW 121
63424: GO 63435
// ComExitBuilding ( unit ) ;
63426: LD_VAR 0 1
63430: PPUSH
63431: CALL_OW 122
// result := tmp ;
63435: LD_ADDR_VAR 0 2
63439: PUSH
63440: LD_VAR 0 3
63444: ST_TO_ADDR
// end ;
63445: LD_VAR 0 2
63449: RET
// export function ComExitAll ( units ) ; var i ; begin
63450: LD_INT 0
63452: PPUSH
63453: PPUSH
// if not units then
63454: LD_VAR 0 1
63458: NOT
63459: IFFALSE 63463
// exit ;
63461: GO 63489
// for i in units do
63463: LD_ADDR_VAR 0 3
63467: PUSH
63468: LD_VAR 0 1
63472: PUSH
63473: FOR_IN
63474: IFFALSE 63487
// ComExit ( i ) ;
63476: LD_VAR 0 3
63480: PPUSH
63481: CALL 63367 0 1
63485: GO 63473
63487: POP
63488: POP
// end ;
63489: LD_VAR 0 2
63493: RET
// export function ResetHc ; begin
63494: LD_INT 0
63496: PPUSH
// InitHc ;
63497: CALL_OW 19
// hc_importance := 0 ;
63501: LD_ADDR_OWVAR 32
63505: PUSH
63506: LD_INT 0
63508: ST_TO_ADDR
// end ;
63509: LD_VAR 0 1
63513: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63514: LD_INT 0
63516: PPUSH
63517: PPUSH
63518: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63519: LD_ADDR_VAR 0 6
63523: PUSH
63524: LD_VAR 0 1
63528: PUSH
63529: LD_VAR 0 3
63533: PLUS
63534: PUSH
63535: LD_INT 2
63537: DIV
63538: ST_TO_ADDR
// if _x < 0 then
63539: LD_VAR 0 6
63543: PUSH
63544: LD_INT 0
63546: LESS
63547: IFFALSE 63564
// _x := _x * - 1 ;
63549: LD_ADDR_VAR 0 6
63553: PUSH
63554: LD_VAR 0 6
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: MUL
63563: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63564: LD_ADDR_VAR 0 7
63568: PUSH
63569: LD_VAR 0 2
63573: PUSH
63574: LD_VAR 0 4
63578: PLUS
63579: PUSH
63580: LD_INT 2
63582: DIV
63583: ST_TO_ADDR
// if _y < 0 then
63584: LD_VAR 0 7
63588: PUSH
63589: LD_INT 0
63591: LESS
63592: IFFALSE 63609
// _y := _y * - 1 ;
63594: LD_ADDR_VAR 0 7
63598: PUSH
63599: LD_VAR 0 7
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: MUL
63608: ST_TO_ADDR
// result := [ _x , _y ] ;
63609: LD_ADDR_VAR 0 5
63613: PUSH
63614: LD_VAR 0 6
63618: PUSH
63619: LD_VAR 0 7
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: ST_TO_ADDR
// end ;
63628: LD_VAR 0 5
63632: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63633: LD_INT 0
63635: PPUSH
63636: PPUSH
63637: PPUSH
63638: PPUSH
// task := GetTaskList ( unit ) ;
63639: LD_ADDR_VAR 0 7
63643: PUSH
63644: LD_VAR 0 1
63648: PPUSH
63649: CALL_OW 437
63653: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63654: LD_VAR 0 7
63658: NOT
63659: PUSH
63660: LD_VAR 0 1
63664: PPUSH
63665: LD_VAR 0 2
63669: PPUSH
63670: CALL_OW 308
63674: NOT
63675: AND
63676: IFFALSE 63680
// exit ;
63678: GO 63798
// if IsInArea ( unit , area ) then
63680: LD_VAR 0 1
63684: PPUSH
63685: LD_VAR 0 2
63689: PPUSH
63690: CALL_OW 308
63694: IFFALSE 63712
// begin ComMoveToArea ( unit , goAway ) ;
63696: LD_VAR 0 1
63700: PPUSH
63701: LD_VAR 0 3
63705: PPUSH
63706: CALL_OW 113
// exit ;
63710: GO 63798
// end ; if task [ 1 ] [ 1 ] <> M then
63712: LD_VAR 0 7
63716: PUSH
63717: LD_INT 1
63719: ARRAY
63720: PUSH
63721: LD_INT 1
63723: ARRAY
63724: PUSH
63725: LD_STRING M
63727: NONEQUAL
63728: IFFALSE 63732
// exit ;
63730: GO 63798
// x := task [ 1 ] [ 2 ] ;
63732: LD_ADDR_VAR 0 5
63736: PUSH
63737: LD_VAR 0 7
63741: PUSH
63742: LD_INT 1
63744: ARRAY
63745: PUSH
63746: LD_INT 2
63748: ARRAY
63749: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63750: LD_ADDR_VAR 0 6
63754: PUSH
63755: LD_VAR 0 7
63759: PUSH
63760: LD_INT 1
63762: ARRAY
63763: PUSH
63764: LD_INT 3
63766: ARRAY
63767: ST_TO_ADDR
// if InArea ( x , y , area ) then
63768: LD_VAR 0 5
63772: PPUSH
63773: LD_VAR 0 6
63777: PPUSH
63778: LD_VAR 0 2
63782: PPUSH
63783: CALL_OW 309
63787: IFFALSE 63798
// ComStop ( unit ) ;
63789: LD_VAR 0 1
63793: PPUSH
63794: CALL_OW 141
// end ;
63798: LD_VAR 0 4
63802: RET
// export function Abs ( value ) ; begin
63803: LD_INT 0
63805: PPUSH
// result := value ;
63806: LD_ADDR_VAR 0 2
63810: PUSH
63811: LD_VAR 0 1
63815: ST_TO_ADDR
// if value < 0 then
63816: LD_VAR 0 1
63820: PUSH
63821: LD_INT 0
63823: LESS
63824: IFFALSE 63841
// result := value * - 1 ;
63826: LD_ADDR_VAR 0 2
63830: PUSH
63831: LD_VAR 0 1
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: MUL
63840: ST_TO_ADDR
// end ;
63841: LD_VAR 0 2
63845: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63846: LD_INT 0
63848: PPUSH
63849: PPUSH
63850: PPUSH
63851: PPUSH
63852: PPUSH
63853: PPUSH
63854: PPUSH
63855: PPUSH
// if not unit or not building then
63856: LD_VAR 0 1
63860: NOT
63861: PUSH
63862: LD_VAR 0 2
63866: NOT
63867: OR
63868: IFFALSE 63872
// exit ;
63870: GO 64098
// x := GetX ( building ) ;
63872: LD_ADDR_VAR 0 4
63876: PUSH
63877: LD_VAR 0 2
63881: PPUSH
63882: CALL_OW 250
63886: ST_TO_ADDR
// y := GetY ( building ) ;
63887: LD_ADDR_VAR 0 6
63891: PUSH
63892: LD_VAR 0 2
63896: PPUSH
63897: CALL_OW 251
63901: ST_TO_ADDR
// d := GetDir ( building ) ;
63902: LD_ADDR_VAR 0 8
63906: PUSH
63907: LD_VAR 0 2
63911: PPUSH
63912: CALL_OW 254
63916: ST_TO_ADDR
// r := 4 ;
63917: LD_ADDR_VAR 0 9
63921: PUSH
63922: LD_INT 4
63924: ST_TO_ADDR
// for i := 1 to 5 do
63925: LD_ADDR_VAR 0 10
63929: PUSH
63930: DOUBLE
63931: LD_INT 1
63933: DEC
63934: ST_TO_ADDR
63935: LD_INT 5
63937: PUSH
63938: FOR_TO
63939: IFFALSE 64096
// begin _x := ShiftX ( x , d , r + i ) ;
63941: LD_ADDR_VAR 0 5
63945: PUSH
63946: LD_VAR 0 4
63950: PPUSH
63951: LD_VAR 0 8
63955: PPUSH
63956: LD_VAR 0 9
63960: PUSH
63961: LD_VAR 0 10
63965: PLUS
63966: PPUSH
63967: CALL_OW 272
63971: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63972: LD_ADDR_VAR 0 7
63976: PUSH
63977: LD_VAR 0 6
63981: PPUSH
63982: LD_VAR 0 8
63986: PPUSH
63987: LD_VAR 0 9
63991: PUSH
63992: LD_VAR 0 10
63996: PLUS
63997: PPUSH
63998: CALL_OW 273
64002: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64003: LD_VAR 0 5
64007: PPUSH
64008: LD_VAR 0 7
64012: PPUSH
64013: CALL_OW 488
64017: PUSH
64018: LD_VAR 0 5
64022: PPUSH
64023: LD_VAR 0 7
64027: PPUSH
64028: CALL_OW 428
64032: PPUSH
64033: CALL_OW 247
64037: PUSH
64038: LD_INT 3
64040: PUSH
64041: LD_INT 2
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: IN
64048: NOT
64049: AND
64050: IFFALSE 64094
// begin ComMoveXY ( unit , _x , _y ) ;
64052: LD_VAR 0 1
64056: PPUSH
64057: LD_VAR 0 5
64061: PPUSH
64062: LD_VAR 0 7
64066: PPUSH
64067: CALL_OW 111
// result := [ _x , _y ] ;
64071: LD_ADDR_VAR 0 3
64075: PUSH
64076: LD_VAR 0 5
64080: PUSH
64081: LD_VAR 0 7
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: ST_TO_ADDR
// exit ;
64090: POP
64091: POP
64092: GO 64098
// end ; end ;
64094: GO 63938
64096: POP
64097: POP
// end ;
64098: LD_VAR 0 3
64102: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64103: LD_INT 0
64105: PPUSH
64106: PPUSH
64107: PPUSH
// result := 0 ;
64108: LD_ADDR_VAR 0 3
64112: PUSH
64113: LD_INT 0
64115: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64116: LD_VAR 0 1
64120: PUSH
64121: LD_INT 0
64123: LESS
64124: PUSH
64125: LD_VAR 0 1
64129: PUSH
64130: LD_INT 8
64132: GREATER
64133: OR
64134: PUSH
64135: LD_VAR 0 2
64139: PUSH
64140: LD_INT 0
64142: LESS
64143: OR
64144: PUSH
64145: LD_VAR 0 2
64149: PUSH
64150: LD_INT 8
64152: GREATER
64153: OR
64154: IFFALSE 64158
// exit ;
64156: GO 64233
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64158: LD_ADDR_VAR 0 4
64162: PUSH
64163: LD_INT 22
64165: PUSH
64166: LD_VAR 0 2
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PPUSH
64175: CALL_OW 69
64179: PUSH
64180: FOR_IN
64181: IFFALSE 64231
// begin un := UnitShoot ( i ) ;
64183: LD_ADDR_VAR 0 5
64187: PUSH
64188: LD_VAR 0 4
64192: PPUSH
64193: CALL_OW 504
64197: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64198: LD_VAR 0 5
64202: PPUSH
64203: CALL_OW 255
64207: PUSH
64208: LD_VAR 0 1
64212: EQUAL
64213: IFFALSE 64229
// begin result := un ;
64215: LD_ADDR_VAR 0 3
64219: PUSH
64220: LD_VAR 0 5
64224: ST_TO_ADDR
// exit ;
64225: POP
64226: POP
64227: GO 64233
// end ; end ;
64229: GO 64180
64231: POP
64232: POP
// end ;
64233: LD_VAR 0 3
64237: RET
// export function GetCargoBay ( units ) ; begin
64238: LD_INT 0
64240: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64241: LD_ADDR_VAR 0 2
64245: PUSH
64246: LD_VAR 0 1
64250: PPUSH
64251: LD_INT 2
64253: PUSH
64254: LD_INT 34
64256: PUSH
64257: LD_INT 12
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 34
64266: PUSH
64267: LD_INT 51
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 34
64276: PUSH
64277: LD_INT 32
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 34
64286: PUSH
64287: LD_INT 89
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: PPUSH
64301: CALL_OW 72
64305: ST_TO_ADDR
// end ;
64306: LD_VAR 0 2
64310: RET
// export function Negate ( value ) ; begin
64311: LD_INT 0
64313: PPUSH
// result := not value ;
64314: LD_ADDR_VAR 0 2
64318: PUSH
64319: LD_VAR 0 1
64323: NOT
64324: ST_TO_ADDR
// end ;
64325: LD_VAR 0 2
64329: RET
// export function Inc ( value ) ; begin
64330: LD_INT 0
64332: PPUSH
// result := value + 1 ;
64333: LD_ADDR_VAR 0 2
64337: PUSH
64338: LD_VAR 0 1
64342: PUSH
64343: LD_INT 1
64345: PLUS
64346: ST_TO_ADDR
// end ;
64347: LD_VAR 0 2
64351: RET
// export function Dec ( value ) ; begin
64352: LD_INT 0
64354: PPUSH
// result := value - 1 ;
64355: LD_ADDR_VAR 0 2
64359: PUSH
64360: LD_VAR 0 1
64364: PUSH
64365: LD_INT 1
64367: MINUS
64368: ST_TO_ADDR
// end ;
64369: LD_VAR 0 2
64373: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64374: LD_INT 0
64376: PPUSH
64377: PPUSH
64378: PPUSH
64379: PPUSH
64380: PPUSH
64381: PPUSH
64382: PPUSH
64383: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64384: LD_VAR 0 1
64388: PPUSH
64389: LD_VAR 0 2
64393: PPUSH
64394: CALL_OW 488
64398: NOT
64399: PUSH
64400: LD_VAR 0 3
64404: PPUSH
64405: LD_VAR 0 4
64409: PPUSH
64410: CALL_OW 488
64414: NOT
64415: OR
64416: IFFALSE 64429
// begin result := - 1 ;
64418: LD_ADDR_VAR 0 5
64422: PUSH
64423: LD_INT 1
64425: NEG
64426: ST_TO_ADDR
// exit ;
64427: GO 64664
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64429: LD_ADDR_VAR 0 12
64433: PUSH
64434: LD_VAR 0 1
64438: PPUSH
64439: LD_VAR 0 2
64443: PPUSH
64444: LD_VAR 0 3
64448: PPUSH
64449: LD_VAR 0 4
64453: PPUSH
64454: CALL 63514 0 4
64458: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64459: LD_ADDR_VAR 0 11
64463: PUSH
64464: LD_VAR 0 1
64468: PPUSH
64469: LD_VAR 0 2
64473: PPUSH
64474: LD_VAR 0 12
64478: PUSH
64479: LD_INT 1
64481: ARRAY
64482: PPUSH
64483: LD_VAR 0 12
64487: PUSH
64488: LD_INT 2
64490: ARRAY
64491: PPUSH
64492: CALL_OW 298
64496: ST_TO_ADDR
// distance := 9999 ;
64497: LD_ADDR_VAR 0 10
64501: PUSH
64502: LD_INT 9999
64504: ST_TO_ADDR
// for i := 0 to 5 do
64505: LD_ADDR_VAR 0 6
64509: PUSH
64510: DOUBLE
64511: LD_INT 0
64513: DEC
64514: ST_TO_ADDR
64515: LD_INT 5
64517: PUSH
64518: FOR_TO
64519: IFFALSE 64662
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64521: LD_ADDR_VAR 0 7
64525: PUSH
64526: LD_VAR 0 1
64530: PPUSH
64531: LD_VAR 0 6
64535: PPUSH
64536: LD_VAR 0 11
64540: PPUSH
64541: CALL_OW 272
64545: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64546: LD_ADDR_VAR 0 8
64550: PUSH
64551: LD_VAR 0 2
64555: PPUSH
64556: LD_VAR 0 6
64560: PPUSH
64561: LD_VAR 0 11
64565: PPUSH
64566: CALL_OW 273
64570: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64571: LD_VAR 0 7
64575: PPUSH
64576: LD_VAR 0 8
64580: PPUSH
64581: CALL_OW 488
64585: NOT
64586: IFFALSE 64590
// continue ;
64588: GO 64518
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64590: LD_ADDR_VAR 0 9
64594: PUSH
64595: LD_VAR 0 12
64599: PUSH
64600: LD_INT 1
64602: ARRAY
64603: PPUSH
64604: LD_VAR 0 12
64608: PUSH
64609: LD_INT 2
64611: ARRAY
64612: PPUSH
64613: LD_VAR 0 7
64617: PPUSH
64618: LD_VAR 0 8
64622: PPUSH
64623: CALL_OW 298
64627: ST_TO_ADDR
// if tmp < distance then
64628: LD_VAR 0 9
64632: PUSH
64633: LD_VAR 0 10
64637: LESS
64638: IFFALSE 64660
// begin result := i ;
64640: LD_ADDR_VAR 0 5
64644: PUSH
64645: LD_VAR 0 6
64649: ST_TO_ADDR
// distance := tmp ;
64650: LD_ADDR_VAR 0 10
64654: PUSH
64655: LD_VAR 0 9
64659: ST_TO_ADDR
// end ; end ;
64660: GO 64518
64662: POP
64663: POP
// end ;
64664: LD_VAR 0 5
64668: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64669: LD_INT 0
64671: PPUSH
64672: PPUSH
// if not driver or not IsInUnit ( driver ) then
64673: LD_VAR 0 1
64677: NOT
64678: PUSH
64679: LD_VAR 0 1
64683: PPUSH
64684: CALL_OW 310
64688: NOT
64689: OR
64690: IFFALSE 64694
// exit ;
64692: GO 64784
// vehicle := IsInUnit ( driver ) ;
64694: LD_ADDR_VAR 0 3
64698: PUSH
64699: LD_VAR 0 1
64703: PPUSH
64704: CALL_OW 310
64708: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64709: LD_VAR 0 1
64713: PPUSH
64714: LD_STRING \
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: PUSH
64744: LD_STRING E
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: LD_VAR 0 3
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PPUSH
64780: CALL_OW 446
// end ;
64784: LD_VAR 0 2
64788: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64789: LD_INT 0
64791: PPUSH
64792: PPUSH
// if not driver or not IsInUnit ( driver ) then
64793: LD_VAR 0 1
64797: NOT
64798: PUSH
64799: LD_VAR 0 1
64803: PPUSH
64804: CALL_OW 310
64808: NOT
64809: OR
64810: IFFALSE 64814
// exit ;
64812: GO 64904
// vehicle := IsInUnit ( driver ) ;
64814: LD_ADDR_VAR 0 3
64818: PUSH
64819: LD_VAR 0 1
64823: PPUSH
64824: CALL_OW 310
64828: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64829: LD_VAR 0 1
64833: PPUSH
64834: LD_STRING \
64836: PUSH
64837: LD_INT 0
64839: PUSH
64840: LD_INT 0
64842: PUSH
64843: LD_INT 0
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: PUSH
64864: LD_STRING E
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_VAR 0 3
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PPUSH
64900: CALL_OW 447
// end ;
64904: LD_VAR 0 2
64908: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64909: LD_INT 0
64911: PPUSH
64912: PPUSH
64913: PPUSH
// tmp := [ ] ;
64914: LD_ADDR_VAR 0 5
64918: PUSH
64919: EMPTY
64920: ST_TO_ADDR
// for i in units do
64921: LD_ADDR_VAR 0 4
64925: PUSH
64926: LD_VAR 0 1
64930: PUSH
64931: FOR_IN
64932: IFFALSE 64970
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64934: LD_ADDR_VAR 0 5
64938: PUSH
64939: LD_VAR 0 5
64943: PPUSH
64944: LD_VAR 0 5
64948: PUSH
64949: LD_INT 1
64951: PLUS
64952: PPUSH
64953: LD_VAR 0 4
64957: PPUSH
64958: CALL_OW 256
64962: PPUSH
64963: CALL_OW 2
64967: ST_TO_ADDR
64968: GO 64931
64970: POP
64971: POP
// if not tmp then
64972: LD_VAR 0 5
64976: NOT
64977: IFFALSE 64981
// exit ;
64979: GO 65029
// if asc then
64981: LD_VAR 0 2
64985: IFFALSE 65009
// result := SortListByListAsc ( units , tmp ) else
64987: LD_ADDR_VAR 0 3
64991: PUSH
64992: LD_VAR 0 1
64996: PPUSH
64997: LD_VAR 0 5
65001: PPUSH
65002: CALL_OW 76
65006: ST_TO_ADDR
65007: GO 65029
// result := SortListByListDesc ( units , tmp ) ;
65009: LD_ADDR_VAR 0 3
65013: PUSH
65014: LD_VAR 0 1
65018: PPUSH
65019: LD_VAR 0 5
65023: PPUSH
65024: CALL_OW 77
65028: ST_TO_ADDR
// end ;
65029: LD_VAR 0 3
65033: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65034: LD_INT 0
65036: PPUSH
65037: PPUSH
// task := GetTaskList ( mech ) ;
65038: LD_ADDR_VAR 0 4
65042: PUSH
65043: LD_VAR 0 1
65047: PPUSH
65048: CALL_OW 437
65052: ST_TO_ADDR
// if not task then
65053: LD_VAR 0 4
65057: NOT
65058: IFFALSE 65062
// exit ;
65060: GO 65104
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65062: LD_ADDR_VAR 0 3
65066: PUSH
65067: LD_VAR 0 4
65071: PUSH
65072: LD_INT 1
65074: ARRAY
65075: PUSH
65076: LD_INT 1
65078: ARRAY
65079: PUSH
65080: LD_STRING r
65082: EQUAL
65083: PUSH
65084: LD_VAR 0 4
65088: PUSH
65089: LD_INT 1
65091: ARRAY
65092: PUSH
65093: LD_INT 4
65095: ARRAY
65096: PUSH
65097: LD_VAR 0 2
65101: EQUAL
65102: AND
65103: ST_TO_ADDR
// end ;
65104: LD_VAR 0 3
65108: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65109: LD_INT 0
65111: PPUSH
// SetDir ( unit , d ) ;
65112: LD_VAR 0 1
65116: PPUSH
65117: LD_VAR 0 4
65121: PPUSH
65122: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65126: LD_VAR 0 1
65130: PPUSH
65131: LD_VAR 0 2
65135: PPUSH
65136: LD_VAR 0 3
65140: PPUSH
65141: LD_VAR 0 5
65145: PPUSH
65146: CALL_OW 48
// end ;
65150: LD_VAR 0 6
65154: RET
// export function ToNaturalNumber ( number ) ; begin
65155: LD_INT 0
65157: PPUSH
// result := number div 1 ;
65158: LD_ADDR_VAR 0 2
65162: PUSH
65163: LD_VAR 0 1
65167: PUSH
65168: LD_INT 1
65170: DIV
65171: ST_TO_ADDR
// if number < 0 then
65172: LD_VAR 0 1
65176: PUSH
65177: LD_INT 0
65179: LESS
65180: IFFALSE 65190
// result := 0 ;
65182: LD_ADDR_VAR 0 2
65186: PUSH
65187: LD_INT 0
65189: ST_TO_ADDR
// end ;
65190: LD_VAR 0 2
65194: RET
// export function SortByClass ( units , class ) ; var un ; begin
65195: LD_INT 0
65197: PPUSH
65198: PPUSH
// if not units or not class then
65199: LD_VAR 0 1
65203: NOT
65204: PUSH
65205: LD_VAR 0 2
65209: NOT
65210: OR
65211: IFFALSE 65215
// exit ;
65213: GO 65310
// result := [ ] ;
65215: LD_ADDR_VAR 0 3
65219: PUSH
65220: EMPTY
65221: ST_TO_ADDR
// for un in units do
65222: LD_ADDR_VAR 0 4
65226: PUSH
65227: LD_VAR 0 1
65231: PUSH
65232: FOR_IN
65233: IFFALSE 65308
// if GetClass ( un ) = class then
65235: LD_VAR 0 4
65239: PPUSH
65240: CALL_OW 257
65244: PUSH
65245: LD_VAR 0 2
65249: EQUAL
65250: IFFALSE 65277
// result := Insert ( result , 1 , un ) else
65252: LD_ADDR_VAR 0 3
65256: PUSH
65257: LD_VAR 0 3
65261: PPUSH
65262: LD_INT 1
65264: PPUSH
65265: LD_VAR 0 4
65269: PPUSH
65270: CALL_OW 2
65274: ST_TO_ADDR
65275: GO 65306
// result := Replace ( result , result + 1 , un ) ;
65277: LD_ADDR_VAR 0 3
65281: PUSH
65282: LD_VAR 0 3
65286: PPUSH
65287: LD_VAR 0 3
65291: PUSH
65292: LD_INT 1
65294: PLUS
65295: PPUSH
65296: LD_VAR 0 4
65300: PPUSH
65301: CALL_OW 1
65305: ST_TO_ADDR
65306: GO 65232
65308: POP
65309: POP
// end ;
65310: LD_VAR 0 3
65314: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65315: LD_INT 0
65317: PPUSH
65318: PPUSH
65319: PPUSH
65320: PPUSH
65321: PPUSH
65322: PPUSH
65323: PPUSH
// result := [ ] ;
65324: LD_ADDR_VAR 0 4
65328: PUSH
65329: EMPTY
65330: ST_TO_ADDR
// if x - r < 0 then
65331: LD_VAR 0 1
65335: PUSH
65336: LD_VAR 0 3
65340: MINUS
65341: PUSH
65342: LD_INT 0
65344: LESS
65345: IFFALSE 65357
// min_x := 0 else
65347: LD_ADDR_VAR 0 8
65351: PUSH
65352: LD_INT 0
65354: ST_TO_ADDR
65355: GO 65373
// min_x := x - r ;
65357: LD_ADDR_VAR 0 8
65361: PUSH
65362: LD_VAR 0 1
65366: PUSH
65367: LD_VAR 0 3
65371: MINUS
65372: ST_TO_ADDR
// if y - r < 0 then
65373: LD_VAR 0 2
65377: PUSH
65378: LD_VAR 0 3
65382: MINUS
65383: PUSH
65384: LD_INT 0
65386: LESS
65387: IFFALSE 65399
// min_y := 0 else
65389: LD_ADDR_VAR 0 7
65393: PUSH
65394: LD_INT 0
65396: ST_TO_ADDR
65397: GO 65415
// min_y := y - r ;
65399: LD_ADDR_VAR 0 7
65403: PUSH
65404: LD_VAR 0 2
65408: PUSH
65409: LD_VAR 0 3
65413: MINUS
65414: ST_TO_ADDR
// max_x := x + r ;
65415: LD_ADDR_VAR 0 9
65419: PUSH
65420: LD_VAR 0 1
65424: PUSH
65425: LD_VAR 0 3
65429: PLUS
65430: ST_TO_ADDR
// max_y := y + r ;
65431: LD_ADDR_VAR 0 10
65435: PUSH
65436: LD_VAR 0 2
65440: PUSH
65441: LD_VAR 0 3
65445: PLUS
65446: ST_TO_ADDR
// for _x = min_x to max_x do
65447: LD_ADDR_VAR 0 5
65451: PUSH
65452: DOUBLE
65453: LD_VAR 0 8
65457: DEC
65458: ST_TO_ADDR
65459: LD_VAR 0 9
65463: PUSH
65464: FOR_TO
65465: IFFALSE 65566
// for _y = min_y to max_y do
65467: LD_ADDR_VAR 0 6
65471: PUSH
65472: DOUBLE
65473: LD_VAR 0 7
65477: DEC
65478: ST_TO_ADDR
65479: LD_VAR 0 10
65483: PUSH
65484: FOR_TO
65485: IFFALSE 65562
// begin if not ValidHex ( _x , _y ) then
65487: LD_VAR 0 5
65491: PPUSH
65492: LD_VAR 0 6
65496: PPUSH
65497: CALL_OW 488
65501: NOT
65502: IFFALSE 65506
// continue ;
65504: GO 65484
// if GetResourceTypeXY ( _x , _y ) then
65506: LD_VAR 0 5
65510: PPUSH
65511: LD_VAR 0 6
65515: PPUSH
65516: CALL_OW 283
65520: IFFALSE 65560
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65522: LD_ADDR_VAR 0 4
65526: PUSH
65527: LD_VAR 0 4
65531: PPUSH
65532: LD_VAR 0 4
65536: PUSH
65537: LD_INT 1
65539: PLUS
65540: PPUSH
65541: LD_VAR 0 5
65545: PUSH
65546: LD_VAR 0 6
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PPUSH
65555: CALL_OW 1
65559: ST_TO_ADDR
// end ;
65560: GO 65484
65562: POP
65563: POP
65564: GO 65464
65566: POP
65567: POP
// end ;
65568: LD_VAR 0 4
65572: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65573: LD_INT 0
65575: PPUSH
65576: PPUSH
65577: PPUSH
65578: PPUSH
65579: PPUSH
65580: PPUSH
65581: PPUSH
65582: PPUSH
// if not units then
65583: LD_VAR 0 1
65587: NOT
65588: IFFALSE 65592
// exit ;
65590: GO 66116
// result := UnitFilter ( units , [ f_ok ] ) ;
65592: LD_ADDR_VAR 0 3
65596: PUSH
65597: LD_VAR 0 1
65601: PPUSH
65602: LD_INT 50
65604: PUSH
65605: EMPTY
65606: LIST
65607: PPUSH
65608: CALL_OW 72
65612: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65613: LD_ADDR_VAR 0 8
65617: PUSH
65618: LD_VAR 0 1
65622: PUSH
65623: LD_INT 1
65625: ARRAY
65626: PPUSH
65627: CALL_OW 255
65631: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65632: LD_ADDR_VAR 0 10
65636: PUSH
65637: LD_INT 29
65639: PUSH
65640: LD_INT 91
65642: PUSH
65643: LD_INT 49
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: LIST
65650: ST_TO_ADDR
// if not result then
65651: LD_VAR 0 3
65655: NOT
65656: IFFALSE 65660
// exit ;
65658: GO 66116
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65660: LD_ADDR_VAR 0 5
65664: PUSH
65665: LD_INT 81
65667: PUSH
65668: LD_VAR 0 8
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PPUSH
65677: CALL_OW 69
65681: ST_TO_ADDR
// for i in result do
65682: LD_ADDR_VAR 0 4
65686: PUSH
65687: LD_VAR 0 3
65691: PUSH
65692: FOR_IN
65693: IFFALSE 66114
// begin tag := GetTag ( i ) + 1 ;
65695: LD_ADDR_VAR 0 9
65699: PUSH
65700: LD_VAR 0 4
65704: PPUSH
65705: CALL_OW 110
65709: PUSH
65710: LD_INT 1
65712: PLUS
65713: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65714: LD_ADDR_VAR 0 7
65718: PUSH
65719: LD_VAR 0 4
65723: PPUSH
65724: CALL_OW 250
65728: PPUSH
65729: LD_VAR 0 4
65733: PPUSH
65734: CALL_OW 251
65738: PPUSH
65739: LD_INT 6
65741: PPUSH
65742: CALL 65315 0 3
65746: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65747: LD_VAR 0 4
65751: PPUSH
65752: CALL_OW 247
65756: PUSH
65757: LD_INT 2
65759: EQUAL
65760: PUSH
65761: LD_VAR 0 7
65765: AND
65766: PUSH
65767: LD_VAR 0 4
65771: PPUSH
65772: CALL_OW 264
65776: PUSH
65777: LD_VAR 0 10
65781: IN
65782: NOT
65783: AND
65784: IFFALSE 65823
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65786: LD_VAR 0 4
65790: PPUSH
65791: LD_VAR 0 7
65795: PUSH
65796: LD_INT 1
65798: ARRAY
65799: PUSH
65800: LD_INT 1
65802: ARRAY
65803: PPUSH
65804: LD_VAR 0 7
65808: PUSH
65809: LD_INT 1
65811: ARRAY
65812: PUSH
65813: LD_INT 2
65815: ARRAY
65816: PPUSH
65817: CALL_OW 116
65821: GO 66112
// if path > tag then
65823: LD_VAR 0 2
65827: PUSH
65828: LD_VAR 0 9
65832: GREATER
65833: IFFALSE 66041
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65835: LD_ADDR_VAR 0 6
65839: PUSH
65840: LD_VAR 0 5
65844: PPUSH
65845: LD_INT 91
65847: PUSH
65848: LD_VAR 0 4
65852: PUSH
65853: LD_INT 8
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: LIST
65860: PPUSH
65861: CALL_OW 72
65865: ST_TO_ADDR
// if nearEnemy then
65866: LD_VAR 0 6
65870: IFFALSE 65939
// begin if GetWeapon ( i ) = ru_time_lapser then
65872: LD_VAR 0 4
65876: PPUSH
65877: CALL_OW 264
65881: PUSH
65882: LD_INT 49
65884: EQUAL
65885: IFFALSE 65913
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65887: LD_VAR 0 4
65891: PPUSH
65892: LD_VAR 0 6
65896: PPUSH
65897: LD_VAR 0 4
65901: PPUSH
65902: CALL_OW 74
65906: PPUSH
65907: CALL_OW 112
65911: GO 65937
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65913: LD_VAR 0 4
65917: PPUSH
65918: LD_VAR 0 6
65922: PPUSH
65923: LD_VAR 0 4
65927: PPUSH
65928: CALL_OW 74
65932: PPUSH
65933: CALL_OW 115
// end else
65937: GO 66039
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65939: LD_VAR 0 4
65943: PPUSH
65944: LD_VAR 0 2
65948: PUSH
65949: LD_VAR 0 9
65953: ARRAY
65954: PUSH
65955: LD_INT 1
65957: ARRAY
65958: PPUSH
65959: LD_VAR 0 2
65963: PUSH
65964: LD_VAR 0 9
65968: ARRAY
65969: PUSH
65970: LD_INT 2
65972: ARRAY
65973: PPUSH
65974: CALL_OW 297
65978: PUSH
65979: LD_INT 6
65981: GREATER
65982: IFFALSE 66025
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65984: LD_VAR 0 4
65988: PPUSH
65989: LD_VAR 0 2
65993: PUSH
65994: LD_VAR 0 9
65998: ARRAY
65999: PUSH
66000: LD_INT 1
66002: ARRAY
66003: PPUSH
66004: LD_VAR 0 2
66008: PUSH
66009: LD_VAR 0 9
66013: ARRAY
66014: PUSH
66015: LD_INT 2
66017: ARRAY
66018: PPUSH
66019: CALL_OW 114
66023: GO 66039
// SetTag ( i , tag ) ;
66025: LD_VAR 0 4
66029: PPUSH
66030: LD_VAR 0 9
66034: PPUSH
66035: CALL_OW 109
// end else
66039: GO 66112
// if enemy then
66041: LD_VAR 0 5
66045: IFFALSE 66112
// begin if GetWeapon ( i ) = ru_time_lapser then
66047: LD_VAR 0 4
66051: PPUSH
66052: CALL_OW 264
66056: PUSH
66057: LD_INT 49
66059: EQUAL
66060: IFFALSE 66088
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66062: LD_VAR 0 4
66066: PPUSH
66067: LD_VAR 0 5
66071: PPUSH
66072: LD_VAR 0 4
66076: PPUSH
66077: CALL_OW 74
66081: PPUSH
66082: CALL_OW 112
66086: GO 66112
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66088: LD_VAR 0 4
66092: PPUSH
66093: LD_VAR 0 5
66097: PPUSH
66098: LD_VAR 0 4
66102: PPUSH
66103: CALL_OW 74
66107: PPUSH
66108: CALL_OW 115
// end ; end ;
66112: GO 65692
66114: POP
66115: POP
// end ;
66116: LD_VAR 0 3
66120: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66121: LD_INT 0
66123: PPUSH
66124: PPUSH
66125: PPUSH
// if not unit or IsInUnit ( unit ) then
66126: LD_VAR 0 1
66130: NOT
66131: PUSH
66132: LD_VAR 0 1
66136: PPUSH
66137: CALL_OW 310
66141: OR
66142: IFFALSE 66146
// exit ;
66144: GO 66237
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66146: LD_ADDR_VAR 0 4
66150: PUSH
66151: LD_VAR 0 1
66155: PPUSH
66156: CALL_OW 250
66160: PPUSH
66161: LD_VAR 0 2
66165: PPUSH
66166: LD_INT 1
66168: PPUSH
66169: CALL_OW 272
66173: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66174: LD_ADDR_VAR 0 5
66178: PUSH
66179: LD_VAR 0 1
66183: PPUSH
66184: CALL_OW 251
66188: PPUSH
66189: LD_VAR 0 2
66193: PPUSH
66194: LD_INT 1
66196: PPUSH
66197: CALL_OW 273
66201: ST_TO_ADDR
// if ValidHex ( x , y ) then
66202: LD_VAR 0 4
66206: PPUSH
66207: LD_VAR 0 5
66211: PPUSH
66212: CALL_OW 488
66216: IFFALSE 66237
// ComTurnXY ( unit , x , y ) ;
66218: LD_VAR 0 1
66222: PPUSH
66223: LD_VAR 0 4
66227: PPUSH
66228: LD_VAR 0 5
66232: PPUSH
66233: CALL_OW 118
// end ;
66237: LD_VAR 0 3
66241: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66242: LD_INT 0
66244: PPUSH
66245: PPUSH
// result := false ;
66246: LD_ADDR_VAR 0 3
66250: PUSH
66251: LD_INT 0
66253: ST_TO_ADDR
// if not units then
66254: LD_VAR 0 2
66258: NOT
66259: IFFALSE 66263
// exit ;
66261: GO 66308
// for i in units do
66263: LD_ADDR_VAR 0 4
66267: PUSH
66268: LD_VAR 0 2
66272: PUSH
66273: FOR_IN
66274: IFFALSE 66306
// if See ( side , i ) then
66276: LD_VAR 0 1
66280: PPUSH
66281: LD_VAR 0 4
66285: PPUSH
66286: CALL_OW 292
66290: IFFALSE 66304
// begin result := true ;
66292: LD_ADDR_VAR 0 3
66296: PUSH
66297: LD_INT 1
66299: ST_TO_ADDR
// exit ;
66300: POP
66301: POP
66302: GO 66308
// end ;
66304: GO 66273
66306: POP
66307: POP
// end ;
66308: LD_VAR 0 3
66312: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66313: LD_INT 0
66315: PPUSH
66316: PPUSH
66317: PPUSH
66318: PPUSH
// if not unit or not points then
66319: LD_VAR 0 1
66323: NOT
66324: PUSH
66325: LD_VAR 0 2
66329: NOT
66330: OR
66331: IFFALSE 66335
// exit ;
66333: GO 66425
// dist := 99999 ;
66335: LD_ADDR_VAR 0 5
66339: PUSH
66340: LD_INT 99999
66342: ST_TO_ADDR
// for i in points do
66343: LD_ADDR_VAR 0 4
66347: PUSH
66348: LD_VAR 0 2
66352: PUSH
66353: FOR_IN
66354: IFFALSE 66423
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66356: LD_ADDR_VAR 0 6
66360: PUSH
66361: LD_VAR 0 1
66365: PPUSH
66366: LD_VAR 0 4
66370: PUSH
66371: LD_INT 1
66373: ARRAY
66374: PPUSH
66375: LD_VAR 0 4
66379: PUSH
66380: LD_INT 2
66382: ARRAY
66383: PPUSH
66384: CALL_OW 297
66388: ST_TO_ADDR
// if tmpDist < dist then
66389: LD_VAR 0 6
66393: PUSH
66394: LD_VAR 0 5
66398: LESS
66399: IFFALSE 66421
// begin result := i ;
66401: LD_ADDR_VAR 0 3
66405: PUSH
66406: LD_VAR 0 4
66410: ST_TO_ADDR
// dist := tmpDist ;
66411: LD_ADDR_VAR 0 5
66415: PUSH
66416: LD_VAR 0 6
66420: ST_TO_ADDR
// end ; end ;
66421: GO 66353
66423: POP
66424: POP
// end ;
66425: LD_VAR 0 3
66429: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66430: LD_INT 0
66432: PPUSH
// uc_side := side ;
66433: LD_ADDR_OWVAR 20
66437: PUSH
66438: LD_VAR 0 1
66442: ST_TO_ADDR
// uc_nation := 3 ;
66443: LD_ADDR_OWVAR 21
66447: PUSH
66448: LD_INT 3
66450: ST_TO_ADDR
// vc_chassis := 25 ;
66451: LD_ADDR_OWVAR 37
66455: PUSH
66456: LD_INT 25
66458: ST_TO_ADDR
// vc_engine := engine_siberite ;
66459: LD_ADDR_OWVAR 39
66463: PUSH
66464: LD_INT 3
66466: ST_TO_ADDR
// vc_control := control_computer ;
66467: LD_ADDR_OWVAR 38
66471: PUSH
66472: LD_INT 3
66474: ST_TO_ADDR
// vc_weapon := 59 ;
66475: LD_ADDR_OWVAR 40
66479: PUSH
66480: LD_INT 59
66482: ST_TO_ADDR
// result := CreateVehicle ;
66483: LD_ADDR_VAR 0 5
66487: PUSH
66488: CALL_OW 45
66492: ST_TO_ADDR
// SetDir ( result , d ) ;
66493: LD_VAR 0 5
66497: PPUSH
66498: LD_VAR 0 4
66502: PPUSH
66503: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66507: LD_VAR 0 5
66511: PPUSH
66512: LD_VAR 0 2
66516: PPUSH
66517: LD_VAR 0 3
66521: PPUSH
66522: LD_INT 0
66524: PPUSH
66525: CALL_OW 48
// end ;
66529: LD_VAR 0 5
66533: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66534: LD_INT 0
66536: PPUSH
66537: PPUSH
66538: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66539: LD_ADDR_VAR 0 2
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66562: LD_VAR 0 1
66566: NOT
66567: PUSH
66568: LD_VAR 0 1
66572: PPUSH
66573: CALL_OW 264
66577: PUSH
66578: LD_INT 12
66580: PUSH
66581: LD_INT 51
66583: PUSH
66584: LD_INT 32
66586: PUSH
66587: LD_INT 89
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: IN
66596: NOT
66597: OR
66598: IFFALSE 66602
// exit ;
66600: GO 66700
// for i := 1 to 3 do
66602: LD_ADDR_VAR 0 3
66606: PUSH
66607: DOUBLE
66608: LD_INT 1
66610: DEC
66611: ST_TO_ADDR
66612: LD_INT 3
66614: PUSH
66615: FOR_TO
66616: IFFALSE 66698
// begin tmp := GetCargo ( cargo , i ) ;
66618: LD_ADDR_VAR 0 4
66622: PUSH
66623: LD_VAR 0 1
66627: PPUSH
66628: LD_VAR 0 3
66632: PPUSH
66633: CALL_OW 289
66637: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66638: LD_ADDR_VAR 0 2
66642: PUSH
66643: LD_VAR 0 2
66647: PPUSH
66648: LD_VAR 0 3
66652: PPUSH
66653: LD_VAR 0 4
66657: PPUSH
66658: CALL_OW 1
66662: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66663: LD_ADDR_VAR 0 2
66667: PUSH
66668: LD_VAR 0 2
66672: PPUSH
66673: LD_INT 4
66675: PPUSH
66676: LD_VAR 0 2
66680: PUSH
66681: LD_INT 4
66683: ARRAY
66684: PUSH
66685: LD_VAR 0 4
66689: PLUS
66690: PPUSH
66691: CALL_OW 1
66695: ST_TO_ADDR
// end ;
66696: GO 66615
66698: POP
66699: POP
// end ;
66700: LD_VAR 0 2
66704: RET
// export function Length ( array ) ; begin
66705: LD_INT 0
66707: PPUSH
// result := array + 0 ;
66708: LD_ADDR_VAR 0 2
66712: PUSH
66713: LD_VAR 0 1
66717: PUSH
66718: LD_INT 0
66720: PLUS
66721: ST_TO_ADDR
// end ;
66722: LD_VAR 0 2
66726: RET
// export function PrepareArray ( array ) ; begin
66727: LD_INT 0
66729: PPUSH
// result := array diff 0 ;
66730: LD_ADDR_VAR 0 2
66734: PUSH
66735: LD_VAR 0 1
66739: PUSH
66740: LD_INT 0
66742: DIFF
66743: ST_TO_ADDR
// if not result [ 1 ] then
66744: LD_VAR 0 2
66748: PUSH
66749: LD_INT 1
66751: ARRAY
66752: NOT
66753: IFFALSE 66773
// result := Delete ( result , 1 ) ;
66755: LD_ADDR_VAR 0 2
66759: PUSH
66760: LD_VAR 0 2
66764: PPUSH
66765: LD_INT 1
66767: PPUSH
66768: CALL_OW 3
66772: ST_TO_ADDR
// end ;
66773: LD_VAR 0 2
66777: RET
