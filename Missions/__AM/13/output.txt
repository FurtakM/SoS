// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 902 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2057 0 0
// PrepareHeroes ;
  82: CALL 1082 0 0
// PrepareRandoms ;
  86: CALL 3416 0 0
// Action ;
  90: CALL 5206 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 799
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_STRING Lisa
 588: PPUSH
 589: LD_EXP 22
 593: PPUSH
 594: CALL 4212 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 598: LD_EXP 8
 602: PPUSH
 603: LD_STRING Brown
 605: PPUSH
 606: LD_EXP 22
 610: PPUSH
 611: CALL 4212 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 615: LD_EXP 4
 619: PPUSH
 620: LD_STRING Donaldson
 622: PPUSH
 623: LD_EXP 22
 627: PPUSH
 628: CALL 4212 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 632: LD_EXP 5
 636: PPUSH
 637: LD_STRING Bobby
 639: PPUSH
 640: LD_EXP 22
 644: PPUSH
 645: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 649: LD_EXP 6
 653: PPUSH
 654: LD_STRING Cyrus
 656: PPUSH
 657: LD_EXP 22
 661: PPUSH
 662: CALL 4212 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 666: LD_EXP 7
 670: PPUSH
 671: LD_STRING Denis
 673: PPUSH
 674: LD_EXP 22
 678: PPUSH
 679: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 683: LD_EXP 9
 687: PPUSH
 688: LD_STRING Gladstone
 690: PPUSH
 691: LD_EXP 22
 695: PPUSH
 696: CALL 4212 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 700: LD_EXP 10
 704: PPUSH
 705: LD_STRING Houten
 707: PPUSH
 708: LD_EXP 22
 712: PPUSH
 713: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 717: LD_EXP 11
 721: PPUSH
 722: LD_STRING Cornel
 724: PPUSH
 725: LD_EXP 22
 729: PPUSH
 730: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 734: LD_EXP 12
 738: PPUSH
 739: LD_STRING Gary
 741: PPUSH
 742: LD_EXP 22
 746: PPUSH
 747: CALL 4212 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_STRING Frank
 758: PPUSH
 759: LD_EXP 22
 763: PPUSH
 764: CALL 4212 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 768: LD_EXP 14
 772: PPUSH
 773: LD_STRING Kikuchi
 775: PPUSH
 776: LD_EXP 22
 780: PPUSH
 781: CALL 4212 0 3
// SaveCargos ;
 785: CALL 802 0 0
// ChangeMap ( 13 , %_cont ) ;
 789: LD_INT 13
 791: PPUSH
 792: LD_STRING %_cont
 794: PPUSH
 795: CALL_OW 340
// end ;
 799: PPOPN 2
 801: END
// export function SaveCargos ; var i ; begin
 802: LD_INT 0
 804: PPUSH
 805: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 806: LD_ADDR_VAR 0 2
 810: PUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 22
 816: PUSH
 817: LD_INT 1
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 33
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 34
 836: PUSH
 837: LD_INT 12
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PPUSH
 849: CALL_OW 70
 853: PUSH
 854: FOR_IN
 855: IFFALSE 883
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 857: LD_ADDR_EXP 20
 861: PUSH
 862: LD_EXP 20
 866: PUSH
 867: LD_VAR 0 2
 871: PPUSH
 872: CALL 65286 0 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: ADD
 880: ST_TO_ADDR
 881: GO 854
 883: POP
 884: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 885: LD_EXP 20
 889: PPUSH
 890: LD_STRING 13_ResourcesInCargo13_1
 892: PPUSH
 893: CALL_OW 39
// end ;
 897: LD_VAR 0 1
 901: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 902: LD_INT 0
 904: PPUSH
 905: PPUSH
 906: PPUSH
 907: PPUSH
 908: PPUSH
 909: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_STRING 10_EpsilonEnv
 917: PPUSH
 918: EMPTY
 919: PPUSH
 920: CALL_OW 30
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 2
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1077
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: CALL_OW 353
 946: ST_TO_ADDR
// if not list then
 947: LD_VAR 0 3
 951: NOT
 952: IFFALSE 956
// exit ;
 954: GO 1077
// for i in list do
 956: LD_ADDR_VAR 0 4
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: FOR_IN
 967: IFFALSE 1075
// begin exist := false ;
 969: LD_ADDR_VAR 0 6
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// for j in tmp do
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: FOR_IN
 988: IFFALSE 1042
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 990: LD_VAR 0 4
 994: PUSH
 995: LD_INT 1
 997: ARRAY
 998: PUSH
 999: LD_VAR 0 5
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: EQUAL
1008: PUSH
1009: LD_VAR 0 4
1013: PUSH
1014: LD_INT 2
1016: ARRAY
1017: PUSH
1018: LD_VAR 0 5
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: EQUAL
1027: AND
1028: IFFALSE 1040
// begin exist := true ;
1030: LD_ADDR_VAR 0 6
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// break ;
1038: GO 1042
// end ;
1040: GO 987
1042: POP
1043: POP
// if not exist then
1044: LD_VAR 0 6
1048: NOT
1049: IFFALSE 1073
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1051: LD_VAR 0 4
1055: PUSH
1056: LD_INT 1
1058: ARRAY
1059: PPUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_INT 2
1067: ARRAY
1068: PPUSH
1069: CALL_OW 347
// end ;
1073: GO 966
1075: POP
1076: POP
// end ; end_of_file
1077: LD_VAR 0 1
1081: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1082: LD_INT 0
1084: PPUSH
1085: PPUSH
1086: PPUSH
1087: PPUSH
1088: PPUSH
1089: PPUSH
1090: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1091: LD_ADDR_VAR 0 4
1095: PUSH
1096: LD_INT 22
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 23
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: LD_INT 30
1121: PUSH
1122: LD_INT 0
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 30
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PPUSH
1149: CALL_OW 69
1153: ST_TO_ADDR
// if tmp then
1154: LD_VAR 0 4
1158: IFFALSE 1280
// begin x := GetX ( tmp [ 1 ] ) ;
1160: LD_ADDR_VAR 0 5
1164: PUSH
1165: LD_VAR 0 4
1169: PUSH
1170: LD_INT 1
1172: ARRAY
1173: PPUSH
1174: CALL_OW 250
1178: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1179: LD_ADDR_VAR 0 6
1183: PUSH
1184: LD_VAR 0 4
1188: PUSH
1189: LD_INT 1
1191: ARRAY
1192: PPUSH
1193: CALL_OW 251
1197: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1198: LD_VAR 0 4
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: LD_STRING epsilon
1209: PPUSH
1210: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1214: LD_ADDR_VAR 0 7
1218: PUSH
1219: LD_VAR 0 4
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: PPUSH
1228: CALL_OW 274
1232: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1233: LD_VAR 0 7
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_INT 3000
1243: PPUSH
1244: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1248: LD_VAR 0 7
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: LD_INT 500
1258: PPUSH
1259: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1263: LD_VAR 0 7
1267: PPUSH
1268: LD_INT 3
1270: PPUSH
1271: LD_INT 200
1273: PPUSH
1274: CALL_OW 277
// end else
1278: GO 1296
// begin x := 104 ;
1280: LD_ADDR_VAR 0 5
1284: PUSH
1285: LD_INT 104
1287: ST_TO_ADDR
// y := 32 ;
1288: LD_ADDR_VAR 0 6
1292: PUSH
1293: LD_INT 32
1295: ST_TO_ADDR
// end ; uc_side := 1 ;
1296: LD_ADDR_OWVAR 20
1300: PUSH
1301: LD_INT 1
1303: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1304: LD_ADDR_EXP 1
1308: PUSH
1309: LD_STRING JMM
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: CALL 3686 0 2
1319: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1320: LD_ADDR_EXP 3
1324: PUSH
1325: LD_STRING Lisa
1327: PPUSH
1328: LD_INT 1
1330: PPUSH
1331: CALL 3686 0 2
1335: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1336: LD_ADDR_EXP 4
1340: PUSH
1341: LD_STRING Donaldson
1343: PPUSH
1344: LD_INT 1
1346: PPUSH
1347: CALL 3686 0 2
1351: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1352: LD_ADDR_EXP 5
1356: PUSH
1357: LD_STRING Bobby
1359: PPUSH
1360: LD_INT 1
1362: PPUSH
1363: CALL 3686 0 2
1367: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1368: LD_ADDR_EXP 6
1372: PUSH
1373: LD_STRING Cyrus
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 3686 0 2
1383: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1384: LD_ADDR_EXP 7
1388: PUSH
1389: LD_STRING Denis
1391: PPUSH
1392: LD_INT 1
1394: PPUSH
1395: CALL 3686 0 2
1399: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1400: LD_ADDR_EXP 8
1404: PUSH
1405: LD_STRING Brown
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: CALL 3686 0 2
1415: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1416: LD_ADDR_EXP 9
1420: PUSH
1421: LD_STRING Gladstone
1423: PPUSH
1424: LD_INT 1
1426: PPUSH
1427: CALL 3686 0 2
1431: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1432: LD_ADDR_EXP 10
1436: PUSH
1437: LD_STRING Houten
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL 3686 0 2
1447: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1448: LD_ADDR_EXP 11
1452: PUSH
1453: LD_STRING Cornell
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: CALL 3686 0 2
1463: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1464: LD_ADDR_EXP 12
1468: PUSH
1469: LD_STRING Gary
1471: PPUSH
1472: LD_INT 1
1474: PPUSH
1475: CALL 3686 0 2
1479: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1480: LD_ADDR_EXP 13
1484: PUSH
1485: LD_STRING Frank
1487: PPUSH
1488: LD_INT 1
1490: PPUSH
1491: CALL 3686 0 2
1495: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1496: LD_ADDR_EXP 14
1500: PUSH
1501: LD_STRING Kikuchi
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: CALL 3686 0 2
1511: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1512: LD_ADDR_EXP 15
1516: PUSH
1517: LD_STRING Stevens
1519: PPUSH
1520: LD_INT 0
1522: PPUSH
1523: CALL 3686 0 2
1527: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1528: LD_ADDR_EXP 2
1532: PUSH
1533: LD_STRING Powell
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL 3686 0 2
1543: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1544: LD_EXP 1
1548: PPUSH
1549: LD_VAR 0 5
1553: PPUSH
1554: LD_VAR 0 6
1558: PPUSH
1559: LD_INT 4
1561: PPUSH
1562: LD_INT 0
1564: PPUSH
1565: CALL 3859 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1569: LD_EXP 15
1573: PPUSH
1574: LD_VAR 0 5
1578: PPUSH
1579: LD_VAR 0 6
1583: PPUSH
1584: LD_INT 4
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL 3859 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1594: LD_EXP 3
1598: PPUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: LD_VAR 0 6
1608: PPUSH
1609: LD_INT 35
1611: PPUSH
1612: LD_INT 0
1614: PPUSH
1615: CALL 3859 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1619: LD_EXP 4
1623: PPUSH
1624: LD_VAR 0 5
1628: PPUSH
1629: LD_VAR 0 6
1633: PPUSH
1634: LD_INT 35
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL 3859 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1644: LD_EXP 5
1648: PPUSH
1649: LD_VAR 0 5
1653: PPUSH
1654: LD_VAR 0 6
1658: PPUSH
1659: LD_INT 35
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL 3859 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_VAR 0 5
1678: PPUSH
1679: LD_VAR 0 6
1683: PPUSH
1684: LD_INT 35
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: CALL 3859 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1694: LD_EXP 7
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: LD_VAR 0 6
1708: PPUSH
1709: LD_INT 35
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL 3859 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1719: LD_EXP 8
1723: PPUSH
1724: LD_VAR 0 5
1728: PPUSH
1729: LD_VAR 0 6
1733: PPUSH
1734: LD_INT 35
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: CALL 3859 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1744: LD_EXP 9
1748: PPUSH
1749: LD_VAR 0 5
1753: PPUSH
1754: LD_VAR 0 6
1758: PPUSH
1759: LD_INT 35
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 3859 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1769: LD_EXP 10
1773: PPUSH
1774: LD_VAR 0 5
1778: PPUSH
1779: LD_VAR 0 6
1783: PPUSH
1784: LD_INT 35
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL 3859 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1794: LD_EXP 11
1798: PPUSH
1799: LD_VAR 0 5
1803: PPUSH
1804: LD_VAR 0 6
1808: PPUSH
1809: LD_INT 35
1811: PPUSH
1812: LD_INT 0
1814: PPUSH
1815: CALL 3859 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1819: LD_EXP 12
1823: PPUSH
1824: LD_VAR 0 5
1828: PPUSH
1829: LD_VAR 0 6
1833: PPUSH
1834: LD_INT 35
1836: PPUSH
1837: LD_INT 0
1839: PPUSH
1840: CALL 3859 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1844: LD_EXP 13
1848: PPUSH
1849: LD_VAR 0 5
1853: PPUSH
1854: LD_VAR 0 6
1858: PPUSH
1859: LD_INT 35
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL 3859 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1869: LD_EXP 14
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: LD_VAR 0 6
1883: PPUSH
1884: LD_INT 35
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL 3859 0 5
// SetClass ( JMM , 1 ) ;
1894: LD_EXP 1
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1906: LD_ADDR_EXP 16
1910: PUSH
1911: LD_STRING 12_other_survivors
1913: PPUSH
1914: CALL_OW 31
1918: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1919: LD_ADDR_EXP 17
1923: PUSH
1924: LD_STRING 12_others
1926: PPUSH
1927: CALL_OW 31
1931: ST_TO_ADDR
// for i in others11 do
1932: LD_ADDR_VAR 0 2
1936: PUSH
1937: LD_EXP 17
1941: PUSH
1942: FOR_IN
1943: IFFALSE 1990
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1945: LD_VAR 0 2
1949: PPUSH
1950: LD_VAR 0 4
1954: PUSH
1955: LD_INT 1
1957: ARRAY
1958: PPUSH
1959: CALL_OW 250
1963: PPUSH
1964: LD_VAR 0 4
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 251
1977: PPUSH
1978: LD_INT 15
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL 3859 0 5
1988: GO 1942
1990: POP
1991: POP
// for i in others12 do
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_EXP 16
2001: PUSH
2002: FOR_IN
2003: IFFALSE 2050
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2005: LD_VAR 0 2
2009: PPUSH
2010: LD_VAR 0 4
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PPUSH
2019: CALL_OW 250
2023: PPUSH
2024: LD_VAR 0 4
2028: PUSH
2029: LD_INT 1
2031: ARRAY
2032: PPUSH
2033: CALL_OW 251
2037: PPUSH
2038: LD_INT 15
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL 3859 0 5
2048: GO 2002
2050: POP
2051: POP
// end ;
2052: LD_VAR 0 1
2056: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2057: LD_INT 0
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
2063: PPUSH
2064: PPUSH
2065: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2066: LD_INT 113
2068: PPUSH
2069: LD_INT 50
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2079: LD_INT 104
2081: PPUSH
2082: LD_INT 24
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2092: LD_INT 43
2094: PPUSH
2095: LD_INT 79
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2105: LD_INT 43
2107: PPUSH
2108: LD_INT 68
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2118: LD_INT 99
2120: PPUSH
2121: LD_INT 114
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2131: LD_INT 103
2133: PPUSH
2134: LD_INT 114
2136: PPUSH
2137: LD_INT 1
2139: PPUSH
2140: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2144: LD_INT 152
2146: PPUSH
2147: LD_INT 85
2149: PPUSH
2150: LD_INT 1
2152: PPUSH
2153: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2157: LD_INT 156
2159: PPUSH
2160: LD_INT 92
2162: PPUSH
2163: LD_INT 1
2165: PPUSH
2166: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2170: LD_ADDR_VAR 0 2
2174: PUSH
2175: LD_STRING 10_EpsilonBase
2177: PPUSH
2178: EMPTY
2179: PPUSH
2180: CALL_OW 30
2184: ST_TO_ADDR
// if not blist then
2185: LD_VAR 0 2
2189: NOT
2190: IFFALSE 2194
// exit ;
2192: GO 3411
// for i in blist do
2194: LD_ADDR_VAR 0 3
2198: PUSH
2199: LD_VAR 0 2
2203: PUSH
2204: FOR_IN
2205: IFFALSE 2247
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2207: LD_VAR 0 3
2211: PUSH
2212: LD_INT 1
2214: ARRAY
2215: PUSH
2216: LD_INT 0
2218: EQUAL
2219: PUSH
2220: LD_VAR 0 3
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PUSH
2229: LD_INT 1
2231: EQUAL
2232: OR
2233: IFFALSE 2245
// begin baseCorrect := 1 ;
2235: LD_ADDR_VAR 0 6
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// break ;
2243: GO 2247
// end ;
2245: GO 2204
2247: POP
2248: POP
// if baseCorrect = 0 then
2249: LD_VAR 0 6
2253: PUSH
2254: LD_INT 0
2256: EQUAL
2257: IFFALSE 2964
// begin uc_side := 1 ;
2259: LD_ADDR_OWVAR 20
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// uc_nation := 1 ;
2267: LD_ADDR_OWVAR 21
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// bc_level := 10 ;
2275: LD_ADDR_OWVAR 43
2279: PUSH
2280: LD_INT 10
2282: ST_TO_ADDR
// bc_type := b_warehouse ;
2283: LD_ADDR_OWVAR 42
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2291: LD_INT 99
2293: PPUSH
2294: LD_INT 24
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: CALL_OW 47
// bc_type := b_bunker ;
2304: LD_ADDR_OWVAR 42
2308: PUSH
2309: LD_INT 32
2311: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2312: LD_ADDR_VAR 0 7
2316: PUSH
2317: LD_INT 124
2319: PPUSH
2320: LD_INT 42
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: CALL_OW 47
2330: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2331: LD_VAR 0 7
2335: PPUSH
2336: LD_INT 4
2338: PUSH
2339: LD_INT 5
2341: PUSH
2342: LD_INT 6
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 3
2355: PPUSH
2356: CALL_OW 12
2360: ARRAY
2361: PPUSH
2362: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2366: LD_ADDR_VAR 0 7
2370: PUSH
2371: LD_INT 111
2373: PPUSH
2374: LD_INT 16
2376: PPUSH
2377: LD_INT 4
2379: PPUSH
2380: CALL_OW 47
2384: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2385: LD_VAR 0 7
2389: PPUSH
2390: LD_INT 4
2392: PUSH
2393: LD_INT 5
2395: PUSH
2396: LD_INT 6
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 1
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 12
2414: ARRAY
2415: PPUSH
2416: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2420: LD_ADDR_VAR 0 7
2424: PUSH
2425: LD_INT 113
2427: PPUSH
2428: LD_INT 21
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 47
2438: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2439: LD_VAR 0 7
2443: PPUSH
2444: LD_INT 4
2446: PUSH
2447: LD_INT 5
2449: PUSH
2450: LD_INT 6
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 3
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: PPUSH
2470: CALL_OW 431
// bc_type := 33 ;
2474: LD_ADDR_OWVAR 42
2478: PUSH
2479: LD_INT 33
2481: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2482: LD_ADDR_VAR 0 7
2486: PUSH
2487: LD_INT 95
2489: PPUSH
2490: LD_INT 41
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: CALL_OW 47
2500: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2501: LD_VAR 0 7
2505: PPUSH
2506: LD_INT 4
2508: PUSH
2509: LD_INT 5
2511: PUSH
2512: LD_INT 6
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 1
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: CALL_OW 12
2530: ARRAY
2531: PPUSH
2532: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2536: LD_ADDR_VAR 0 7
2540: PUSH
2541: LD_INT 97
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 47
2554: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2555: LD_VAR 0 7
2559: PPUSH
2560: LD_INT 4
2562: PUSH
2563: LD_INT 5
2565: PUSH
2566: LD_INT 6
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 3
2579: PPUSH
2580: CALL_OW 12
2584: ARRAY
2585: PPUSH
2586: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2590: LD_ADDR_VAR 0 7
2594: PUSH
2595: LD_INT 86
2597: PPUSH
2598: LD_INT 19
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: CALL_OW 47
2608: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2609: LD_VAR 0 7
2613: PPUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 5
2619: PUSH
2620: LD_INT 6
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 3
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: PPUSH
2640: CALL_OW 431
// bc_type := 30 ;
2644: LD_ADDR_OWVAR 42
2648: PUSH
2649: LD_INT 30
2651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2652: LD_INT 104
2654: PPUSH
2655: LD_INT 24
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: CALL_OW 47
// bc_type := 29 ;
2665: LD_ADDR_OWVAR 42
2669: PUSH
2670: LD_INT 29
2672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2673: LD_INT 113
2675: PPUSH
2676: LD_INT 50
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: CALL_OW 47
// bc_type := 27 ;
2686: LD_ADDR_OWVAR 42
2690: PUSH
2691: LD_INT 27
2693: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2694: LD_INT 98
2696: PPUSH
2697: LD_INT 26
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2707: LD_INT 95
2709: PPUSH
2710: LD_INT 23
2712: PPUSH
2713: LD_INT 3
2715: PPUSH
2716: CALL_OW 47
// bc_type := 28 ;
2720: LD_ADDR_OWVAR 42
2724: PUSH
2725: LD_INT 28
2727: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2728: LD_INT 107
2730: PPUSH
2731: LD_INT 32
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 47
// bc_type := 3 ;
2741: LD_ADDR_OWVAR 42
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2749: LD_INT 106
2751: PPUSH
2752: LD_INT 42
2754: PPUSH
2755: LD_INT 0
2757: PPUSH
2758: CALL_OW 47
// bc_type := 16 ;
2762: LD_ADDR_OWVAR 42
2766: PUSH
2767: LD_INT 16
2769: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2770: LD_INT 109
2772: PPUSH
2773: LD_INT 45
2775: PPUSH
2776: LD_INT 5
2778: PPUSH
2779: CALL_OW 47
// bc_type := 17 ;
2783: LD_ADDR_OWVAR 42
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2791: LD_INT 106
2793: PPUSH
2794: LD_INT 46
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: CALL_OW 47
// bc_type := 19 ;
2804: LD_ADDR_OWVAR 42
2808: PUSH
2809: LD_INT 19
2811: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2812: LD_INT 103
2814: PPUSH
2815: LD_INT 42
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 47
// bc_type := 21 ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 21
2832: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2833: LD_INT 110
2835: PPUSH
2836: LD_INT 42
2838: PPUSH
2839: LD_INT 4
2841: PPUSH
2842: CALL_OW 47
// bc_type := 5 ;
2846: LD_ADDR_OWVAR 42
2850: PUSH
2851: LD_INT 5
2853: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2854: LD_INT 114
2856: PPUSH
2857: LD_INT 55
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 47
// bc_type := 36 ;
2867: LD_ADDR_OWVAR 42
2871: PUSH
2872: LD_INT 36
2874: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2875: LD_INT 96
2877: PPUSH
2878: LD_INT 28
2880: PPUSH
2881: LD_INT 2
2883: PPUSH
2884: CALL_OW 47
// bc_type := b_lab_full ;
2888: LD_ADDR_OWVAR 42
2892: PUSH
2893: LD_INT 8
2895: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2896: LD_ADDR_OWVAR 44
2900: PUSH
2901: LD_INT 15
2903: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2904: LD_ADDR_OWVAR 45
2908: PUSH
2909: LD_INT 11
2911: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2912: LD_INT 116
2914: PPUSH
2915: LD_INT 38
2917: PPUSH
2918: LD_INT 4
2920: PPUSH
2921: CALL_OW 47
// bc_type := b_lab_full ;
2925: LD_ADDR_OWVAR 42
2929: PUSH
2930: LD_INT 8
2932: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2933: LD_ADDR_OWVAR 44
2937: PUSH
2938: LD_INT 10
2940: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2941: LD_ADDR_OWVAR 45
2945: PUSH
2946: LD_INT 12
2948: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2949: LD_INT 112
2951: PPUSH
2952: LD_INT 29
2954: PPUSH
2955: LD_INT 4
2957: PPUSH
2958: CALL_OW 47
// end else
2962: GO 3208
// begin uc_side := 1 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 1
2971: ST_TO_ADDR
// for i in blist do
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: LD_VAR 0 2
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3206
// begin uc_nation := i [ 6 ] ;
2985: LD_ADDR_OWVAR 21
2989: PUSH
2990: LD_VAR 0 3
2994: PUSH
2995: LD_INT 6
2997: ARRAY
2998: ST_TO_ADDR
// bc_type := i [ 1 ] ;
2999: LD_ADDR_OWVAR 42
3003: PUSH
3004: LD_VAR 0 3
3008: PUSH
3009: LD_INT 1
3011: ARRAY
3012: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3013: LD_ADDR_OWVAR 43
3017: PUSH
3018: LD_VAR 0 3
3022: PUSH
3023: LD_INT 5
3025: ARRAY
3026: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3027: LD_VAR 0 3
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: PUSH
3036: LD_INT 7
3038: PUSH
3039: LD_INT 8
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: IN
3046: IFFALSE 3076
// begin bc_kind1 := i [ 7 ] ;
3048: LD_ADDR_OWVAR 44
3052: PUSH
3053: LD_VAR 0 3
3057: PUSH
3058: LD_INT 7
3060: ARRAY
3061: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3062: LD_ADDR_OWVAR 45
3066: PUSH
3067: LD_VAR 0 3
3071: PUSH
3072: LD_INT 8
3074: ARRAY
3075: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_VAR 0 3
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: LD_VAR 0 3
3094: PUSH
3095: LD_INT 3
3097: ARRAY
3098: PPUSH
3099: LD_VAR 0 3
3103: PUSH
3104: LD_INT 4
3106: ARRAY
3107: PPUSH
3108: CALL_OW 47
3112: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3113: LD_VAR 0 4
3117: PPUSH
3118: CALL_OW 266
3122: PUSH
3123: LD_INT 32
3125: PUSH
3126: LD_INT 33
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: IN
3133: IFFALSE 3204
// if i [ 7 ] then
3135: LD_VAR 0 3
3139: PUSH
3140: LD_INT 7
3142: ARRAY
3143: IFFALSE 3165
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_VAR 0 3
3154: PUSH
3155: LD_INT 7
3157: ARRAY
3158: PPUSH
3159: CALL_OW 431
3163: GO 3204
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3165: LD_VAR 0 4
3169: PPUSH
3170: LD_INT 11
3172: PUSH
3173: LD_INT 7
3175: PUSH
3176: LD_INT 4
3178: PUSH
3179: LD_INT 5
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 1
3190: PPUSH
3191: LD_INT 4
3193: PPUSH
3194: CALL_OW 12
3198: ARRAY
3199: PPUSH
3200: CALL_OW 431
// end ;
3204: GO 2982
3206: POP
3207: POP
// end ; uc_side := 1 ;
3208: LD_ADDR_OWVAR 20
3212: PUSH
3213: LD_INT 1
3215: ST_TO_ADDR
// uc_nation := 1 ;
3216: LD_ADDR_OWVAR 21
3220: PUSH
3221: LD_INT 1
3223: ST_TO_ADDR
// for i := 1 to 8 do
3224: LD_ADDR_VAR 0 3
3228: PUSH
3229: DOUBLE
3230: LD_INT 1
3232: DEC
3233: ST_TO_ADDR
3234: LD_INT 8
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3409
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3240: LD_ADDR_OWVAR 37
3244: PUSH
3245: LD_INT 5
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: LD_INT 3
3253: PUSH
3254: LD_INT 4
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_INT 1
3265: PPUSH
3266: LD_INT 4
3268: PPUSH
3269: CALL_OW 12
3273: ARRAY
3274: ST_TO_ADDR
// vc_engine := engine_siberite ;
3275: LD_ADDR_OWVAR 39
3279: PUSH
3280: LD_INT 3
3282: ST_TO_ADDR
// vc_control := control_manual ;
3283: LD_ADDR_OWVAR 38
3287: PUSH
3288: LD_INT 1
3290: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3291: LD_OWVAR 37
3295: PUSH
3296: LD_INT 4
3298: EQUAL
3299: IFFALSE 3311
// vc_weapon := us_heavy_gun else
3301: LD_ADDR_OWVAR 40
3305: PUSH
3306: LD_INT 6
3308: ST_TO_ADDR
3309: GO 3356
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3311: LD_ADDR_OWVAR 40
3315: PUSH
3316: LD_INT 7
3318: PUSH
3319: LD_INT 9
3321: PUSH
3322: LD_INT 12
3324: PUSH
3325: LD_INT 13
3327: PUSH
3328: LD_INT 9
3330: PUSH
3331: LD_INT 9
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: PUSH
3342: LD_VAR 0 3
3346: PUSH
3347: LD_INT 6
3349: MOD
3350: PUSH
3351: LD_INT 1
3353: PLUS
3354: ARRAY
3355: ST_TO_ADDR
// un := CreateVehicle ;
3356: LD_ADDR_VAR 0 5
3360: PUSH
3361: CALL_OW 45
3365: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3366: LD_VAR 0 5
3370: PPUSH
3371: LD_INT 0
3373: PPUSH
3374: LD_INT 5
3376: PPUSH
3377: CALL_OW 12
3381: PPUSH
3382: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3386: LD_VAR 0 5
3390: PPUSH
3391: LD_INT 78
3393: PPUSH
3394: LD_INT 31
3396: PPUSH
3397: LD_INT 8
3399: PPUSH
3400: LD_INT 0
3402: PPUSH
3403: CALL_OW 50
// end ;
3407: GO 3237
3409: POP
3410: POP
// end ;
3411: LD_VAR 0 1
3415: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3416: LD_INT 0
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3422: LD_INT 22
3424: PUSH
3425: LD_INT 1
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 21
3434: PUSH
3435: LD_INT 1
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: PPUSH
3446: CALL_OW 69
3450: PUSH
3451: LD_INT 6
3453: LESS
3454: IFFALSE 3681
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3456: LD_ADDR_VAR 0 4
3460: PUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 2
3473: PUSH
3474: LD_INT 30
3476: PUSH
3477: LD_INT 0
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 30
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: ST_TO_ADDR
// uc_side := 1 ;
3508: LD_ADDR_OWVAR 20
3512: PUSH
3513: LD_INT 1
3515: ST_TO_ADDR
// uc_nation := 1 ;
3516: LD_ADDR_OWVAR 21
3520: PUSH
3521: LD_INT 1
3523: ST_TO_ADDR
// for i := 1 to 6 do
3524: LD_ADDR_VAR 0 2
3528: PUSH
3529: DOUBLE
3530: LD_INT 1
3532: DEC
3533: ST_TO_ADDR
3534: LD_INT 6
3536: PUSH
3537: FOR_TO
3538: IFFALSE 3679
// begin hc_gallery :=  ;
3540: LD_ADDR_OWVAR 33
3544: PUSH
3545: LD_STRING 
3547: ST_TO_ADDR
// hc_name :=  ;
3548: LD_ADDR_OWVAR 26
3552: PUSH
3553: LD_STRING 
3555: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3556: LD_INT 0
3558: PPUSH
3559: LD_INT 1
3561: PUSH
3562: LD_INT 2
3564: PUSH
3565: LD_INT 3
3567: PUSH
3568: LD_INT 4
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: LD_INT 1
3579: PPUSH
3580: LD_INT 4
3582: PPUSH
3583: CALL_OW 12
3587: ARRAY
3588: PPUSH
3589: LD_INT 5
3591: PPUSH
3592: LD_INT 8
3594: PPUSH
3595: CALL_OW 12
3599: PPUSH
3600: CALL_OW 380
// un := CreateHuman ;
3604: LD_ADDR_VAR 0 3
3608: PUSH
3609: CALL_OW 44
3613: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3614: LD_ADDR_EXP 18
3618: PUSH
3619: LD_EXP 18
3623: PPUSH
3624: LD_VAR 0 3
3628: PPUSH
3629: CALL 61727 0 2
3633: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3634: LD_VAR 0 3
3638: PPUSH
3639: LD_VAR 0 4
3643: PUSH
3644: LD_INT 1
3646: ARRAY
3647: PPUSH
3648: CALL_OW 250
3652: PPUSH
3653: LD_VAR 0 4
3657: PUSH
3658: LD_INT 1
3660: ARRAY
3661: PPUSH
3662: CALL_OW 251
3666: PPUSH
3667: LD_INT 15
3669: PPUSH
3670: LD_INT 0
3672: PPUSH
3673: CALL 3859 0 5
// end ;
3677: GO 3537
3679: POP
3680: POP
// end ; end ; end_of_file
3681: LD_VAR 0 1
3685: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
// if existMode then
3690: LD_VAR 0 2
3694: IFFALSE 3829
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3696: LD_EXP 21
3700: PUSH
3701: LD_VAR 0 1
3705: STR
3706: PPUSH
3707: CALL_OW 28
3711: IFFALSE 3736
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3713: LD_ADDR_VAR 0 4
3717: PUSH
3718: LD_EXP 21
3722: PUSH
3723: LD_VAR 0 1
3727: STR
3728: PPUSH
3729: CALL_OW 34
3733: ST_TO_ADDR
3734: GO 3827
// begin if TestCharacters ( 11_ & ident ) then
3736: LD_STRING 11_
3738: PUSH
3739: LD_VAR 0 1
3743: STR
3744: PPUSH
3745: CALL_OW 28
3749: IFFALSE 3772
// unit := CreateCharacter ( 11_ & ident ) else
3751: LD_ADDR_VAR 0 4
3755: PUSH
3756: LD_STRING 11_
3758: PUSH
3759: LD_VAR 0 1
3763: STR
3764: PPUSH
3765: CALL_OW 34
3769: ST_TO_ADDR
3770: GO 3827
// if TestCharacters ( 10c_ & ident ) then
3772: LD_STRING 10c_
3774: PUSH
3775: LD_VAR 0 1
3779: STR
3780: PPUSH
3781: CALL_OW 28
3785: IFFALSE 3808
// unit := CreateCharacter ( 10c_ & ident ) else
3787: LD_ADDR_VAR 0 4
3791: PUSH
3792: LD_STRING 10c_
3794: PUSH
3795: LD_VAR 0 1
3799: STR
3800: PPUSH
3801: CALL_OW 34
3805: ST_TO_ADDR
3806: GO 3827
// unit := CreateCharacter ( 10_ & ident ) ;
3808: LD_ADDR_VAR 0 4
3812: PUSH
3813: LD_STRING 10_
3815: PUSH
3816: LD_VAR 0 1
3820: STR
3821: PPUSH
3822: CALL_OW 34
3826: ST_TO_ADDR
// end ; end else
3827: GO 3844
// unit := NewCharacter ( ident ) ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 25
3843: ST_TO_ADDR
// result := unit ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: LD_VAR 0 4
3853: ST_TO_ADDR
// end ;
3854: LD_VAR 0 3
3858: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3859: LD_INT 0
3861: PPUSH
3862: PPUSH
3863: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3864: LD_ADDR_VAR 0 8
3868: PUSH
3869: LD_INT 22
3871: PUSH
3872: LD_VAR 0 1
3876: PPUSH
3877: CALL_OW 255
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: LD_INT 21
3888: PUSH
3889: LD_INT 3
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 3
3898: PUSH
3899: LD_INT 30
3901: PUSH
3902: LD_INT 3
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 69
3922: ST_TO_ADDR
// if not tmp then
3923: LD_VAR 0 8
3927: NOT
3928: IFFALSE 3961
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3930: LD_VAR 0 1
3934: PPUSH
3935: LD_VAR 0 2
3939: PPUSH
3940: LD_VAR 0 3
3944: PPUSH
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_VAR 0 5
3954: PPUSH
3955: CALL_OW 50
// exit ;
3959: GO 4207
// end ; for i in tmp do
3961: LD_ADDR_VAR 0 7
3965: PUSH
3966: LD_VAR 0 8
3970: PUSH
3971: FOR_IN
3972: IFFALSE 4176
// if IsNotFull ( i ) then
3974: LD_VAR 0 7
3978: PPUSH
3979: CALL 27109 0 1
3983: IFFALSE 4174
// begin PlaceHumanInUnit ( unit , i ) ;
3985: LD_VAR 0 1
3989: PPUSH
3990: LD_VAR 0 7
3994: PPUSH
3995: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
3999: LD_VAR 0 7
4003: PPUSH
4004: CALL_OW 266
4008: PUSH
4009: LD_INT 5
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 31
4017: PUSH
4018: LD_INT 32
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: IN
4027: IFFALSE 4060
// begin SetClass ( unit , class_soldier ) ;
4029: LD_VAR 0 1
4033: PPUSH
4034: LD_INT 1
4036: PPUSH
4037: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4041: LD_VAR 0 1
4045: PPUSH
4046: LD_VAR 0 7
4050: PPUSH
4051: CALL 57617 0 1
4055: PPUSH
4056: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4060: LD_VAR 0 7
4064: PPUSH
4065: CALL_OW 266
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: LD_INT 3
4075: PUSH
4076: LD_INT 36
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: IN
4084: IFFALSE 4098
// SetClass ( unit , class_mechanic ) ;
4086: LD_VAR 0 1
4090: PPUSH
4091: LD_INT 3
4093: PPUSH
4094: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4098: LD_VAR 0 7
4102: PPUSH
4103: CALL_OW 266
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: LD_INT 1
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: IN
4118: IFFALSE 4132
// SetClass ( unit , class_engineer ) ;
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4132: LD_VAR 0 7
4136: PPUSH
4137: CALL_OW 266
4141: PUSH
4142: LD_INT 6
4144: PUSH
4145: LD_INT 7
4147: PUSH
4148: LD_INT 8
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: IN
4156: IFFALSE 4170
// SetClass ( unit , class_scientistic ) ;
4158: LD_VAR 0 1
4162: PPUSH
4163: LD_INT 4
4165: PPUSH
4166: CALL_OW 336
// exit ;
4170: POP
4171: POP
4172: GO 4207
// end ;
4174: GO 3971
4176: POP
4177: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4178: LD_VAR 0 1
4182: PPUSH
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_VAR 0 3
4192: PPUSH
4193: LD_VAR 0 4
4197: PPUSH
4198: LD_VAR 0 5
4202: PPUSH
4203: CALL_OW 50
// end ;
4207: LD_VAR 0 6
4211: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4212: LD_INT 0
4214: PPUSH
// if unit in selectedTab then
4215: LD_VAR 0 1
4219: PUSH
4220: LD_VAR 0 3
4224: IN
4225: IFFALSE 4247
// SaveCharacters ( unit , 13c_ & unitString ) else
4227: LD_VAR 0 1
4231: PPUSH
4232: LD_STRING 13c_
4234: PUSH
4235: LD_VAR 0 2
4239: STR
4240: PPUSH
4241: CALL_OW 38
4245: GO 4265
// SaveCharacters ( unit , 13s_ & unitString ) ;
4247: LD_VAR 0 1
4251: PPUSH
4252: LD_STRING 13s_
4254: PUSH
4255: LD_VAR 0 2
4259: STR
4260: PPUSH
4261: CALL_OW 38
// end ;
4265: LD_VAR 0 4
4269: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
4275: PPUSH
// selected := [ ] ;
4276: LD_ADDR_EXP 22
4280: PUSH
4281: EMPTY
4282: ST_TO_ADDR
// othersSelect := [ ] ;
4283: LD_ADDR_EXP 23
4287: PUSH
4288: EMPTY
4289: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: LD_EXP 3
4299: PUSH
4300: LD_EXP 4
4304: PUSH
4305: LD_EXP 5
4309: PUSH
4310: LD_EXP 6
4314: PUSH
4315: LD_EXP 8
4319: PUSH
4320: LD_EXP 9
4324: PUSH
4325: LD_EXP 10
4329: PUSH
4330: LD_EXP 11
4334: PUSH
4335: LD_EXP 12
4339: PUSH
4340: LD_EXP 13
4344: PUSH
4345: LD_EXP 14
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4363: LD_ADDR_VAR 0 3
4367: PUSH
4368: LD_VAR 0 3
4372: PUSH
4373: LD_EXP 17
4377: ADD
4378: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: LD_VAR 0 3
4388: PUSH
4389: LD_EXP 16
4393: ADD
4394: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4395: LD_ADDR_VAR 0 3
4399: PUSH
4400: LD_VAR 0 3
4404: PUSH
4405: LD_EXP 18
4409: ADD
4410: ST_TO_ADDR
// for i in tmp do
4411: LD_ADDR_VAR 0 2
4415: PUSH
4416: LD_VAR 0 3
4420: PUSH
4421: FOR_IN
4422: IFFALSE 4461
// if GetClass ( i ) = 8 then
4424: LD_VAR 0 2
4428: PPUSH
4429: CALL_OW 257
4433: PUSH
4434: LD_INT 8
4436: EQUAL
4437: IFFALSE 4459
// SetClass ( i , rand ( 1 , 4 ) ) ;
4439: LD_VAR 0 2
4443: PPUSH
4444: LD_INT 1
4446: PPUSH
4447: LD_INT 4
4449: PPUSH
4450: CALL_OW 12
4454: PPUSH
4455: CALL_OW 336
4459: GO 4421
4461: POP
4462: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4463: LD_ADDR_EXP 22
4467: PUSH
4468: LD_STRING 1
4470: PPUSH
4471: LD_INT 6
4473: PPUSH
4474: LD_INT 6
4476: PPUSH
4477: LD_INT -5
4479: PUSH
4480: LD_EXP 1
4484: PUSH
4485: LD_EXP 15
4489: PUSH
4490: LD_INT -2
4492: PUSH
4493: LD_INT -3
4495: PUSH
4496: LD_INT -5
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: PUSH
4507: LD_VAR 0 3
4511: ADD
4512: PUSH
4513: LD_INT -6
4515: PUSH
4516: LD_INT -4
4518: PUSH
4519: LD_EXP 2
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: ADD
4529: PPUSH
4530: LD_INT 1
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: PUSH
4540: LD_INT 2
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 4
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 5
4572: PUSH
4573: LD_INT 0
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 42
4595: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4596: LD_ADDR_EXP 23
4600: PUSH
4601: LD_EXP 22
4605: PUSH
4606: LD_EXP 3
4610: PUSH
4611: LD_EXP 4
4615: PUSH
4616: LD_EXP 5
4620: PUSH
4621: LD_EXP 6
4625: PUSH
4626: LD_EXP 7
4630: PUSH
4631: LD_EXP 8
4635: PUSH
4636: LD_EXP 9
4640: PUSH
4641: LD_EXP 10
4645: PUSH
4646: LD_EXP 11
4650: PUSH
4651: LD_EXP 12
4655: PUSH
4656: LD_EXP 13
4660: PUSH
4661: LD_EXP 14
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: DIFF
4680: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4681: LD_ADDR_VAR 0 4
4685: PUSH
4686: LD_VAR 0 3
4690: PUSH
4691: LD_EXP 22
4695: DIFF
4696: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4697: LD_ADDR_VAR 0 4
4701: PUSH
4702: LD_VAR 0 4
4706: PUSH
4707: LD_EXP 3
4711: PUSH
4712: LD_EXP 4
4716: PUSH
4717: LD_EXP 5
4721: PUSH
4722: LD_EXP 6
4726: PUSH
4727: LD_EXP 7
4731: PUSH
4732: LD_EXP 8
4736: PUSH
4737: LD_EXP 9
4741: PUSH
4742: LD_EXP 10
4746: PUSH
4747: LD_EXP 11
4751: PUSH
4752: LD_EXP 12
4756: PUSH
4757: LD_EXP 13
4761: PUSH
4762: LD_EXP 14
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: DIFF
4781: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4782: LD_VAR 0 4
4786: PPUSH
4787: LD_STRING 13s_others
4789: PPUSH
4790: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4794: LD_EXP 23
4798: PPUSH
4799: LD_STRING 13c_others
4801: PPUSH
4802: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4806: LD_EXP 1
4810: PPUSH
4811: LD_STRING 13c_JMM
4813: PPUSH
4814: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4818: LD_EXP 15
4822: PPUSH
4823: LD_STRING 13c_Stevens
4825: PPUSH
4826: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4830: LD_EXP 3
4834: PPUSH
4835: LD_STRING Lisa
4837: PPUSH
4838: LD_EXP 22
4842: PPUSH
4843: CALL 4212 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4847: LD_EXP 8
4851: PPUSH
4852: LD_STRING Brown
4854: PPUSH
4855: LD_EXP 22
4859: PPUSH
4860: CALL 4212 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4864: LD_EXP 4
4868: PPUSH
4869: LD_STRING Donaldson
4871: PPUSH
4872: LD_EXP 22
4876: PPUSH
4877: CALL 4212 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4881: LD_EXP 5
4885: PPUSH
4886: LD_STRING Bobby
4888: PPUSH
4889: LD_EXP 22
4893: PPUSH
4894: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4898: LD_EXP 6
4902: PPUSH
4903: LD_STRING Cyrus
4905: PPUSH
4906: LD_EXP 22
4910: PPUSH
4911: CALL 4212 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4915: LD_EXP 7
4919: PPUSH
4920: LD_STRING Denis
4922: PPUSH
4923: LD_EXP 22
4927: PPUSH
4928: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4932: LD_EXP 9
4936: PPUSH
4937: LD_STRING Gladstone
4939: PPUSH
4940: LD_EXP 22
4944: PPUSH
4945: CALL 4212 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4949: LD_EXP 10
4953: PPUSH
4954: LD_STRING Houten
4956: PPUSH
4957: LD_EXP 22
4961: PPUSH
4962: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4966: LD_EXP 11
4970: PPUSH
4971: LD_STRING Cornel
4973: PPUSH
4974: LD_EXP 22
4978: PPUSH
4979: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4983: LD_EXP 12
4987: PPUSH
4988: LD_STRING Gary
4990: PPUSH
4991: LD_EXP 22
4995: PPUSH
4996: CALL 4212 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5000: LD_EXP 13
5004: PPUSH
5005: LD_STRING Frank
5007: PPUSH
5008: LD_EXP 22
5012: PPUSH
5013: CALL 4212 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5017: LD_EXP 14
5021: PPUSH
5022: LD_STRING Kikuchi
5024: PPUSH
5025: LD_EXP 22
5029: PPUSH
5030: CALL 4212 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5034: LD_INT 22
5036: PUSH
5037: LD_INT 1
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 21
5046: PUSH
5047: LD_INT 1
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 69
5062: PPUSH
5063: LD_INT 4
5065: PPUSH
5066: CALL_OW 235
// SetSide ( selected , 1 ) ;
5070: LD_EXP 22
5074: PPUSH
5075: LD_INT 1
5077: PPUSH
5078: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5082: LD_EXP 1
5086: PUSH
5087: LD_EXP 15
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5103: LD_ADDR_VAR 0 2
5107: PUSH
5108: LD_INT 22
5110: PUSH
5111: LD_INT 1
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 21
5120: PUSH
5121: LD_INT 1
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PPUSH
5132: CALL_OW 69
5136: PUSH
5137: FOR_IN
5138: IFFALSE 5151
// ComExit ( i ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: CALL 62115 0 1
5149: GO 5137
5151: POP
5152: POP
// end ; end_of_file
5153: LD_VAR 0 1
5157: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL 19767 0 1
// if un = JMM then
5167: LD_VAR 0 1
5171: PUSH
5172: LD_EXP 1
5176: EQUAL
5177: IFFALSE 5186
// YouLost ( JMM ) ;
5179: LD_STRING JMM
5181: PPUSH
5182: CALL_OW 104
// end ;
5186: PPOPN 1
5188: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5189: LD_VAR 0 1
5193: PPUSH
5194: LD_VAR 0 2
5198: PPUSH
5199: CALL 19889 0 2
// end ; end_of_file
5203: PPOPN 2
5205: END
// export function Action ; begin
5206: LD_INT 0
5208: PPUSH
// InGameOn ;
5209: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5213: LD_INT 22
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: LD_INT 2
5225: PUSH
5226: LD_INT 30
5228: PUSH
5229: LD_INT 0
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 30
5238: PUSH
5239: LD_INT 1
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PPUSH
5255: CALL_OW 69
5259: PPUSH
5260: CALL_OW 87
// wait ( 0 0$1 ) ;
5264: LD_INT 35
5266: PPUSH
5267: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5271: LD_EXP 1
5275: PPUSH
5276: LD_STRING D1-JMM-1
5278: PPUSH
5279: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5283: LD_EXP 2
5287: PPUSH
5288: LD_STRING D1-Pow-1
5290: PPUSH
5291: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5295: LD_EXP 2
5299: PPUSH
5300: LD_STRING D1-Pow-1a
5302: PPUSH
5303: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5307: LD_EXP 2
5311: PPUSH
5312: LD_STRING D1-Pow-1b
5314: PPUSH
5315: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5319: LD_EXP 2
5323: PPUSH
5324: LD_STRING D1-Pow-1c
5326: PPUSH
5327: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5331: LD_EXP 1
5335: PPUSH
5336: LD_STRING D1-JMM-2
5338: PPUSH
5339: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5343: LD_EXP 2
5347: PPUSH
5348: LD_STRING D1-Pow-2
5350: PPUSH
5351: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5355: LD_EXP 1
5359: PPUSH
5360: LD_STRING D1-JMM-3
5362: PPUSH
5363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5367: LD_EXP 2
5371: PPUSH
5372: LD_STRING D1-Pow-3
5374: PPUSH
5375: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5379: LD_EXP 1
5383: PPUSH
5384: LD_STRING D1-JMM-4
5386: PPUSH
5387: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5391: LD_EXP 2
5395: PPUSH
5396: LD_STRING D1-Pow-4
5398: PPUSH
5399: CALL_OW 94
// SelectAndSaveCharacters ;
5403: CALL 4270 0 0
// InGameOff ;
5407: CALL_OW 9
// Query ( Q1 ) ;
5411: LD_STRING Q1
5413: PPUSH
5414: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5418: LD_INT 2
5420: PPUSH
5421: LD_INT 1
5423: PPUSH
5424: CALL_OW 424
// end ; end_of_file
5428: LD_VAR 0 1
5432: RET
// every 0 0$1 do
5433: GO 5435
5435: DISABLE
// begin enable ;
5436: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5437: LD_STRING updateTimer(
5439: PUSH
5440: LD_OWVAR 1
5444: STR
5445: PUSH
5446: LD_STRING );
5448: STR
5449: PPUSH
5450: CALL_OW 559
// end ;
5454: END
// export function SOS_MapStart ( ) ; begin
5455: LD_INT 0
5457: PPUSH
// if streamModeActive then
5458: LD_EXP 24
5462: IFFALSE 5471
// DefineStreamItems ( true ) ;
5464: LD_INT 1
5466: PPUSH
5467: CALL 7121 0 1
// UpdateFactoryWaypoints ( ) ;
5471: CALL 20705 0 0
// end ;
5475: LD_VAR 0 1
5479: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5480: LD_INT 0
5482: PPUSH
// if p2 = 100 then
5483: LD_VAR 0 2
5487: PUSH
5488: LD_INT 100
5490: EQUAL
5491: IFFALSE 6494
// begin if not StreamModeActive then
5493: LD_EXP 24
5497: NOT
5498: IFFALSE 5508
// StreamModeActive := true ;
5500: LD_ADDR_EXP 24
5504: PUSH
5505: LD_INT 1
5507: ST_TO_ADDR
// if p3 = 0 then
5508: LD_VAR 0 3
5512: PUSH
5513: LD_INT 0
5515: EQUAL
5516: IFFALSE 5522
// InitStreamMode ;
5518: CALL 6657 0 0
// if p3 = 1 then
5522: LD_VAR 0 3
5526: PUSH
5527: LD_INT 1
5529: EQUAL
5530: IFFALSE 5540
// sRocket := true ;
5532: LD_ADDR_EXP 29
5536: PUSH
5537: LD_INT 1
5539: ST_TO_ADDR
// if p3 = 2 then
5540: LD_VAR 0 3
5544: PUSH
5545: LD_INT 2
5547: EQUAL
5548: IFFALSE 5558
// sSpeed := true ;
5550: LD_ADDR_EXP 28
5554: PUSH
5555: LD_INT 1
5557: ST_TO_ADDR
// if p3 = 3 then
5558: LD_VAR 0 3
5562: PUSH
5563: LD_INT 3
5565: EQUAL
5566: IFFALSE 5576
// sEngine := true ;
5568: LD_ADDR_EXP 30
5572: PUSH
5573: LD_INT 1
5575: ST_TO_ADDR
// if p3 = 4 then
5576: LD_VAR 0 3
5580: PUSH
5581: LD_INT 4
5583: EQUAL
5584: IFFALSE 5594
// sSpec := true ;
5586: LD_ADDR_EXP 27
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// if p3 = 5 then
5594: LD_VAR 0 3
5598: PUSH
5599: LD_INT 5
5601: EQUAL
5602: IFFALSE 5612
// sLevel := true ;
5604: LD_ADDR_EXP 31
5608: PUSH
5609: LD_INT 1
5611: ST_TO_ADDR
// if p3 = 6 then
5612: LD_VAR 0 3
5616: PUSH
5617: LD_INT 6
5619: EQUAL
5620: IFFALSE 5630
// sArmoury := true ;
5622: LD_ADDR_EXP 32
5626: PUSH
5627: LD_INT 1
5629: ST_TO_ADDR
// if p3 = 7 then
5630: LD_VAR 0 3
5634: PUSH
5635: LD_INT 7
5637: EQUAL
5638: IFFALSE 5648
// sRadar := true ;
5640: LD_ADDR_EXP 33
5644: PUSH
5645: LD_INT 1
5647: ST_TO_ADDR
// if p3 = 8 then
5648: LD_VAR 0 3
5652: PUSH
5653: LD_INT 8
5655: EQUAL
5656: IFFALSE 5666
// sBunker := true ;
5658: LD_ADDR_EXP 34
5662: PUSH
5663: LD_INT 1
5665: ST_TO_ADDR
// if p3 = 9 then
5666: LD_VAR 0 3
5670: PUSH
5671: LD_INT 9
5673: EQUAL
5674: IFFALSE 5684
// sHack := true ;
5676: LD_ADDR_EXP 35
5680: PUSH
5681: LD_INT 1
5683: ST_TO_ADDR
// if p3 = 10 then
5684: LD_VAR 0 3
5688: PUSH
5689: LD_INT 10
5691: EQUAL
5692: IFFALSE 5702
// sFire := true ;
5694: LD_ADDR_EXP 36
5698: PUSH
5699: LD_INT 1
5701: ST_TO_ADDR
// if p3 = 11 then
5702: LD_VAR 0 3
5706: PUSH
5707: LD_INT 11
5709: EQUAL
5710: IFFALSE 5720
// sRefresh := true ;
5712: LD_ADDR_EXP 37
5716: PUSH
5717: LD_INT 1
5719: ST_TO_ADDR
// if p3 = 12 then
5720: LD_VAR 0 3
5724: PUSH
5725: LD_INT 12
5727: EQUAL
5728: IFFALSE 5738
// sExp := true ;
5730: LD_ADDR_EXP 38
5734: PUSH
5735: LD_INT 1
5737: ST_TO_ADDR
// if p3 = 13 then
5738: LD_VAR 0 3
5742: PUSH
5743: LD_INT 13
5745: EQUAL
5746: IFFALSE 5756
// sDepot := true ;
5748: LD_ADDR_EXP 39
5752: PUSH
5753: LD_INT 1
5755: ST_TO_ADDR
// if p3 = 14 then
5756: LD_VAR 0 3
5760: PUSH
5761: LD_INT 14
5763: EQUAL
5764: IFFALSE 5774
// sFlag := true ;
5766: LD_ADDR_EXP 40
5770: PUSH
5771: LD_INT 1
5773: ST_TO_ADDR
// if p3 = 15 then
5774: LD_VAR 0 3
5778: PUSH
5779: LD_INT 15
5781: EQUAL
5782: IFFALSE 5792
// sKamikadze := true ;
5784: LD_ADDR_EXP 48
5788: PUSH
5789: LD_INT 1
5791: ST_TO_ADDR
// if p3 = 16 then
5792: LD_VAR 0 3
5796: PUSH
5797: LD_INT 16
5799: EQUAL
5800: IFFALSE 5810
// sTroll := true ;
5802: LD_ADDR_EXP 49
5806: PUSH
5807: LD_INT 1
5809: ST_TO_ADDR
// if p3 = 17 then
5810: LD_VAR 0 3
5814: PUSH
5815: LD_INT 17
5817: EQUAL
5818: IFFALSE 5828
// sSlow := true ;
5820: LD_ADDR_EXP 50
5824: PUSH
5825: LD_INT 1
5827: ST_TO_ADDR
// if p3 = 18 then
5828: LD_VAR 0 3
5832: PUSH
5833: LD_INT 18
5835: EQUAL
5836: IFFALSE 5846
// sLack := true ;
5838: LD_ADDR_EXP 51
5842: PUSH
5843: LD_INT 1
5845: ST_TO_ADDR
// if p3 = 19 then
5846: LD_VAR 0 3
5850: PUSH
5851: LD_INT 19
5853: EQUAL
5854: IFFALSE 5864
// sTank := true ;
5856: LD_ADDR_EXP 53
5860: PUSH
5861: LD_INT 1
5863: ST_TO_ADDR
// if p3 = 20 then
5864: LD_VAR 0 3
5868: PUSH
5869: LD_INT 20
5871: EQUAL
5872: IFFALSE 5882
// sRemote := true ;
5874: LD_ADDR_EXP 54
5878: PUSH
5879: LD_INT 1
5881: ST_TO_ADDR
// if p3 = 21 then
5882: LD_VAR 0 3
5886: PUSH
5887: LD_INT 21
5889: EQUAL
5890: IFFALSE 5900
// sPowell := true ;
5892: LD_ADDR_EXP 55
5896: PUSH
5897: LD_INT 1
5899: ST_TO_ADDR
// if p3 = 22 then
5900: LD_VAR 0 3
5904: PUSH
5905: LD_INT 22
5907: EQUAL
5908: IFFALSE 5918
// sTeleport := true ;
5910: LD_ADDR_EXP 58
5914: PUSH
5915: LD_INT 1
5917: ST_TO_ADDR
// if p3 = 23 then
5918: LD_VAR 0 3
5922: PUSH
5923: LD_INT 23
5925: EQUAL
5926: IFFALSE 5936
// sOilTower := true ;
5928: LD_ADDR_EXP 60
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// if p3 = 24 then
5936: LD_VAR 0 3
5940: PUSH
5941: LD_INT 24
5943: EQUAL
5944: IFFALSE 5954
// sShovel := true ;
5946: LD_ADDR_EXP 61
5950: PUSH
5951: LD_INT 1
5953: ST_TO_ADDR
// if p3 = 25 then
5954: LD_VAR 0 3
5958: PUSH
5959: LD_INT 25
5961: EQUAL
5962: IFFALSE 5972
// sSheik := true ;
5964: LD_ADDR_EXP 62
5968: PUSH
5969: LD_INT 1
5971: ST_TO_ADDR
// if p3 = 26 then
5972: LD_VAR 0 3
5976: PUSH
5977: LD_INT 26
5979: EQUAL
5980: IFFALSE 5990
// sEarthquake := true ;
5982: LD_ADDR_EXP 64
5986: PUSH
5987: LD_INT 1
5989: ST_TO_ADDR
// if p3 = 27 then
5990: LD_VAR 0 3
5994: PUSH
5995: LD_INT 27
5997: EQUAL
5998: IFFALSE 6008
// sAI := true ;
6000: LD_ADDR_EXP 65
6004: PUSH
6005: LD_INT 1
6007: ST_TO_ADDR
// if p3 = 28 then
6008: LD_VAR 0 3
6012: PUSH
6013: LD_INT 28
6015: EQUAL
6016: IFFALSE 6026
// sCargo := true ;
6018: LD_ADDR_EXP 68
6022: PUSH
6023: LD_INT 1
6025: ST_TO_ADDR
// if p3 = 29 then
6026: LD_VAR 0 3
6030: PUSH
6031: LD_INT 29
6033: EQUAL
6034: IFFALSE 6044
// sDLaser := true ;
6036: LD_ADDR_EXP 69
6040: PUSH
6041: LD_INT 1
6043: ST_TO_ADDR
// if p3 = 30 then
6044: LD_VAR 0 3
6048: PUSH
6049: LD_INT 30
6051: EQUAL
6052: IFFALSE 6062
// sExchange := true ;
6054: LD_ADDR_EXP 70
6058: PUSH
6059: LD_INT 1
6061: ST_TO_ADDR
// if p3 = 31 then
6062: LD_VAR 0 3
6066: PUSH
6067: LD_INT 31
6069: EQUAL
6070: IFFALSE 6080
// sFac := true ;
6072: LD_ADDR_EXP 71
6076: PUSH
6077: LD_INT 1
6079: ST_TO_ADDR
// if p3 = 32 then
6080: LD_VAR 0 3
6084: PUSH
6085: LD_INT 32
6087: EQUAL
6088: IFFALSE 6098
// sPower := true ;
6090: LD_ADDR_EXP 72
6094: PUSH
6095: LD_INT 1
6097: ST_TO_ADDR
// if p3 = 33 then
6098: LD_VAR 0 3
6102: PUSH
6103: LD_INT 33
6105: EQUAL
6106: IFFALSE 6116
// sRandom := true ;
6108: LD_ADDR_EXP 73
6112: PUSH
6113: LD_INT 1
6115: ST_TO_ADDR
// if p3 = 34 then
6116: LD_VAR 0 3
6120: PUSH
6121: LD_INT 34
6123: EQUAL
6124: IFFALSE 6134
// sShield := true ;
6126: LD_ADDR_EXP 74
6130: PUSH
6131: LD_INT 1
6133: ST_TO_ADDR
// if p3 = 35 then
6134: LD_VAR 0 3
6138: PUSH
6139: LD_INT 35
6141: EQUAL
6142: IFFALSE 6152
// sTime := true ;
6144: LD_ADDR_EXP 75
6148: PUSH
6149: LD_INT 1
6151: ST_TO_ADDR
// if p3 = 36 then
6152: LD_VAR 0 3
6156: PUSH
6157: LD_INT 36
6159: EQUAL
6160: IFFALSE 6170
// sTools := true ;
6162: LD_ADDR_EXP 76
6166: PUSH
6167: LD_INT 1
6169: ST_TO_ADDR
// if p3 = 101 then
6170: LD_VAR 0 3
6174: PUSH
6175: LD_INT 101
6177: EQUAL
6178: IFFALSE 6188
// sSold := true ;
6180: LD_ADDR_EXP 41
6184: PUSH
6185: LD_INT 1
6187: ST_TO_ADDR
// if p3 = 102 then
6188: LD_VAR 0 3
6192: PUSH
6193: LD_INT 102
6195: EQUAL
6196: IFFALSE 6206
// sDiff := true ;
6198: LD_ADDR_EXP 42
6202: PUSH
6203: LD_INT 1
6205: ST_TO_ADDR
// if p3 = 103 then
6206: LD_VAR 0 3
6210: PUSH
6211: LD_INT 103
6213: EQUAL
6214: IFFALSE 6224
// sFog := true ;
6216: LD_ADDR_EXP 45
6220: PUSH
6221: LD_INT 1
6223: ST_TO_ADDR
// if p3 = 104 then
6224: LD_VAR 0 3
6228: PUSH
6229: LD_INT 104
6231: EQUAL
6232: IFFALSE 6242
// sReset := true ;
6234: LD_ADDR_EXP 46
6238: PUSH
6239: LD_INT 1
6241: ST_TO_ADDR
// if p3 = 105 then
6242: LD_VAR 0 3
6246: PUSH
6247: LD_INT 105
6249: EQUAL
6250: IFFALSE 6260
// sSun := true ;
6252: LD_ADDR_EXP 47
6256: PUSH
6257: LD_INT 1
6259: ST_TO_ADDR
// if p3 = 106 then
6260: LD_VAR 0 3
6264: PUSH
6265: LD_INT 106
6267: EQUAL
6268: IFFALSE 6278
// sTiger := true ;
6270: LD_ADDR_EXP 43
6274: PUSH
6275: LD_INT 1
6277: ST_TO_ADDR
// if p3 = 107 then
6278: LD_VAR 0 3
6282: PUSH
6283: LD_INT 107
6285: EQUAL
6286: IFFALSE 6296
// sBomb := true ;
6288: LD_ADDR_EXP 44
6292: PUSH
6293: LD_INT 1
6295: ST_TO_ADDR
// if p3 = 108 then
6296: LD_VAR 0 3
6300: PUSH
6301: LD_INT 108
6303: EQUAL
6304: IFFALSE 6314
// sWound := true ;
6306: LD_ADDR_EXP 52
6310: PUSH
6311: LD_INT 1
6313: ST_TO_ADDR
// if p3 = 109 then
6314: LD_VAR 0 3
6318: PUSH
6319: LD_INT 109
6321: EQUAL
6322: IFFALSE 6332
// sBetray := true ;
6324: LD_ADDR_EXP 56
6328: PUSH
6329: LD_INT 1
6331: ST_TO_ADDR
// if p3 = 110 then
6332: LD_VAR 0 3
6336: PUSH
6337: LD_INT 110
6339: EQUAL
6340: IFFALSE 6350
// sContamin := true ;
6342: LD_ADDR_EXP 57
6346: PUSH
6347: LD_INT 1
6349: ST_TO_ADDR
// if p3 = 111 then
6350: LD_VAR 0 3
6354: PUSH
6355: LD_INT 111
6357: EQUAL
6358: IFFALSE 6368
// sOil := true ;
6360: LD_ADDR_EXP 59
6364: PUSH
6365: LD_INT 1
6367: ST_TO_ADDR
// if p3 = 112 then
6368: LD_VAR 0 3
6372: PUSH
6373: LD_INT 112
6375: EQUAL
6376: IFFALSE 6386
// sStu := true ;
6378: LD_ADDR_EXP 63
6382: PUSH
6383: LD_INT 1
6385: ST_TO_ADDR
// if p3 = 113 then
6386: LD_VAR 0 3
6390: PUSH
6391: LD_INT 113
6393: EQUAL
6394: IFFALSE 6404
// sBazooka := true ;
6396: LD_ADDR_EXP 66
6400: PUSH
6401: LD_INT 1
6403: ST_TO_ADDR
// if p3 = 114 then
6404: LD_VAR 0 3
6408: PUSH
6409: LD_INT 114
6411: EQUAL
6412: IFFALSE 6422
// sMortar := true ;
6414: LD_ADDR_EXP 67
6418: PUSH
6419: LD_INT 1
6421: ST_TO_ADDR
// if p3 = 115 then
6422: LD_VAR 0 3
6426: PUSH
6427: LD_INT 115
6429: EQUAL
6430: IFFALSE 6440
// sRanger := true ;
6432: LD_ADDR_EXP 77
6436: PUSH
6437: LD_INT 1
6439: ST_TO_ADDR
// if p3 = 116 then
6440: LD_VAR 0 3
6444: PUSH
6445: LD_INT 116
6447: EQUAL
6448: IFFALSE 6458
// sComputer := true ;
6450: LD_ADDR_EXP 78
6454: PUSH
6455: LD_INT 1
6457: ST_TO_ADDR
// if p3 = 117 then
6458: LD_VAR 0 3
6462: PUSH
6463: LD_INT 117
6465: EQUAL
6466: IFFALSE 6476
// s30 := true ;
6468: LD_ADDR_EXP 79
6472: PUSH
6473: LD_INT 1
6475: ST_TO_ADDR
// if p3 = 118 then
6476: LD_VAR 0 3
6480: PUSH
6481: LD_INT 118
6483: EQUAL
6484: IFFALSE 6494
// s60 := true ;
6486: LD_ADDR_EXP 80
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// end ; if p2 = 101 then
6494: LD_VAR 0 2
6498: PUSH
6499: LD_INT 101
6501: EQUAL
6502: IFFALSE 6630
// begin case p3 of 1 :
6504: LD_VAR 0 3
6508: PUSH
6509: LD_INT 1
6511: DOUBLE
6512: EQUAL
6513: IFTRUE 6517
6515: GO 6524
6517: POP
// hHackUnlimitedResources ; 2 :
6518: CALL 18728 0 0
6522: GO 6630
6524: LD_INT 2
6526: DOUBLE
6527: EQUAL
6528: IFTRUE 6532
6530: GO 6539
6532: POP
// hHackSetLevel10 ; 3 :
6533: CALL 18861 0 0
6537: GO 6630
6539: LD_INT 3
6541: DOUBLE
6542: EQUAL
6543: IFTRUE 6547
6545: GO 6554
6547: POP
// hHackSetLevel10YourUnits ; 4 :
6548: CALL 18946 0 0
6552: GO 6630
6554: LD_INT 4
6556: DOUBLE
6557: EQUAL
6558: IFTRUE 6562
6560: GO 6569
6562: POP
// hHackInvincible ; 5 :
6563: CALL 19394 0 0
6567: GO 6630
6569: LD_INT 5
6571: DOUBLE
6572: EQUAL
6573: IFTRUE 6577
6575: GO 6584
6577: POP
// hHackInvisible ; 6 :
6578: CALL 19505 0 0
6582: GO 6630
6584: LD_INT 6
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6599
6592: POP
// hHackChangeYourSide ; 7 :
6593: CALL 19562 0 0
6597: GO 6630
6599: LD_INT 7
6601: DOUBLE
6602: EQUAL
6603: IFTRUE 6607
6605: GO 6614
6607: POP
// hHackChangeUnitSide ; 8 :
6608: CALL 19604 0 0
6612: GO 6630
6614: LD_INT 8
6616: DOUBLE
6617: EQUAL
6618: IFTRUE 6622
6620: GO 6629
6622: POP
// hHackFog ; end ;
6623: CALL 19705 0 0
6627: GO 6630
6629: POP
// end ; end ;
6630: LD_VAR 0 7
6634: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6635: GO 6637
6637: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6638: LD_STRING initStreamRollete();
6640: PPUSH
6641: CALL_OW 559
// InitStreamMode ;
6645: CALL 6657 0 0
// DefineStreamItems ( false ) ;
6649: LD_INT 0
6651: PPUSH
6652: CALL 7121 0 1
// end ;
6656: END
// function InitStreamMode ; begin
6657: LD_INT 0
6659: PPUSH
// streamModeActive := false ;
6660: LD_ADDR_EXP 24
6664: PUSH
6665: LD_INT 0
6667: ST_TO_ADDR
// normalCounter := 36 ;
6668: LD_ADDR_EXP 25
6672: PUSH
6673: LD_INT 36
6675: ST_TO_ADDR
// hardcoreCounter := 18 ;
6676: LD_ADDR_EXP 26
6680: PUSH
6681: LD_INT 18
6683: ST_TO_ADDR
// sRocket := false ;
6684: LD_ADDR_EXP 29
6688: PUSH
6689: LD_INT 0
6691: ST_TO_ADDR
// sSpeed := false ;
6692: LD_ADDR_EXP 28
6696: PUSH
6697: LD_INT 0
6699: ST_TO_ADDR
// sEngine := false ;
6700: LD_ADDR_EXP 30
6704: PUSH
6705: LD_INT 0
6707: ST_TO_ADDR
// sSpec := false ;
6708: LD_ADDR_EXP 27
6712: PUSH
6713: LD_INT 0
6715: ST_TO_ADDR
// sLevel := false ;
6716: LD_ADDR_EXP 31
6720: PUSH
6721: LD_INT 0
6723: ST_TO_ADDR
// sArmoury := false ;
6724: LD_ADDR_EXP 32
6728: PUSH
6729: LD_INT 0
6731: ST_TO_ADDR
// sRadar := false ;
6732: LD_ADDR_EXP 33
6736: PUSH
6737: LD_INT 0
6739: ST_TO_ADDR
// sBunker := false ;
6740: LD_ADDR_EXP 34
6744: PUSH
6745: LD_INT 0
6747: ST_TO_ADDR
// sHack := false ;
6748: LD_ADDR_EXP 35
6752: PUSH
6753: LD_INT 0
6755: ST_TO_ADDR
// sFire := false ;
6756: LD_ADDR_EXP 36
6760: PUSH
6761: LD_INT 0
6763: ST_TO_ADDR
// sRefresh := false ;
6764: LD_ADDR_EXP 37
6768: PUSH
6769: LD_INT 0
6771: ST_TO_ADDR
// sExp := false ;
6772: LD_ADDR_EXP 38
6776: PUSH
6777: LD_INT 0
6779: ST_TO_ADDR
// sDepot := false ;
6780: LD_ADDR_EXP 39
6784: PUSH
6785: LD_INT 0
6787: ST_TO_ADDR
// sFlag := false ;
6788: LD_ADDR_EXP 40
6792: PUSH
6793: LD_INT 0
6795: ST_TO_ADDR
// sKamikadze := false ;
6796: LD_ADDR_EXP 48
6800: PUSH
6801: LD_INT 0
6803: ST_TO_ADDR
// sTroll := false ;
6804: LD_ADDR_EXP 49
6808: PUSH
6809: LD_INT 0
6811: ST_TO_ADDR
// sSlow := false ;
6812: LD_ADDR_EXP 50
6816: PUSH
6817: LD_INT 0
6819: ST_TO_ADDR
// sLack := false ;
6820: LD_ADDR_EXP 51
6824: PUSH
6825: LD_INT 0
6827: ST_TO_ADDR
// sTank := false ;
6828: LD_ADDR_EXP 53
6832: PUSH
6833: LD_INT 0
6835: ST_TO_ADDR
// sRemote := false ;
6836: LD_ADDR_EXP 54
6840: PUSH
6841: LD_INT 0
6843: ST_TO_ADDR
// sPowell := false ;
6844: LD_ADDR_EXP 55
6848: PUSH
6849: LD_INT 0
6851: ST_TO_ADDR
// sTeleport := false ;
6852: LD_ADDR_EXP 58
6856: PUSH
6857: LD_INT 0
6859: ST_TO_ADDR
// sOilTower := false ;
6860: LD_ADDR_EXP 60
6864: PUSH
6865: LD_INT 0
6867: ST_TO_ADDR
// sShovel := false ;
6868: LD_ADDR_EXP 61
6872: PUSH
6873: LD_INT 0
6875: ST_TO_ADDR
// sSheik := false ;
6876: LD_ADDR_EXP 62
6880: PUSH
6881: LD_INT 0
6883: ST_TO_ADDR
// sEarthquake := false ;
6884: LD_ADDR_EXP 64
6888: PUSH
6889: LD_INT 0
6891: ST_TO_ADDR
// sAI := false ;
6892: LD_ADDR_EXP 65
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// sCargo := false ;
6900: LD_ADDR_EXP 68
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// sDLaser := false ;
6908: LD_ADDR_EXP 69
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// sExchange := false ;
6916: LD_ADDR_EXP 70
6920: PUSH
6921: LD_INT 0
6923: ST_TO_ADDR
// sFac := false ;
6924: LD_ADDR_EXP 71
6928: PUSH
6929: LD_INT 0
6931: ST_TO_ADDR
// sPower := false ;
6932: LD_ADDR_EXP 72
6936: PUSH
6937: LD_INT 0
6939: ST_TO_ADDR
// sRandom := false ;
6940: LD_ADDR_EXP 73
6944: PUSH
6945: LD_INT 0
6947: ST_TO_ADDR
// sShield := false ;
6948: LD_ADDR_EXP 74
6952: PUSH
6953: LD_INT 0
6955: ST_TO_ADDR
// sTime := false ;
6956: LD_ADDR_EXP 75
6960: PUSH
6961: LD_INT 0
6963: ST_TO_ADDR
// sTools := false ;
6964: LD_ADDR_EXP 76
6968: PUSH
6969: LD_INT 0
6971: ST_TO_ADDR
// sSold := false ;
6972: LD_ADDR_EXP 41
6976: PUSH
6977: LD_INT 0
6979: ST_TO_ADDR
// sDiff := false ;
6980: LD_ADDR_EXP 42
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// sFog := false ;
6988: LD_ADDR_EXP 45
6992: PUSH
6993: LD_INT 0
6995: ST_TO_ADDR
// sReset := false ;
6996: LD_ADDR_EXP 46
7000: PUSH
7001: LD_INT 0
7003: ST_TO_ADDR
// sSun := false ;
7004: LD_ADDR_EXP 47
7008: PUSH
7009: LD_INT 0
7011: ST_TO_ADDR
// sTiger := false ;
7012: LD_ADDR_EXP 43
7016: PUSH
7017: LD_INT 0
7019: ST_TO_ADDR
// sBomb := false ;
7020: LD_ADDR_EXP 44
7024: PUSH
7025: LD_INT 0
7027: ST_TO_ADDR
// sWound := false ;
7028: LD_ADDR_EXP 52
7032: PUSH
7033: LD_INT 0
7035: ST_TO_ADDR
// sBetray := false ;
7036: LD_ADDR_EXP 56
7040: PUSH
7041: LD_INT 0
7043: ST_TO_ADDR
// sContamin := false ;
7044: LD_ADDR_EXP 57
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// sOil := false ;
7052: LD_ADDR_EXP 59
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// sStu := false ;
7060: LD_ADDR_EXP 63
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// sBazooka := false ;
7068: LD_ADDR_EXP 66
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// sMortar := false ;
7076: LD_ADDR_EXP 67
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// sRanger := false ;
7084: LD_ADDR_EXP 77
7088: PUSH
7089: LD_INT 0
7091: ST_TO_ADDR
// sComputer := false ;
7092: LD_ADDR_EXP 78
7096: PUSH
7097: LD_INT 0
7099: ST_TO_ADDR
// s30 := false ;
7100: LD_ADDR_EXP 79
7104: PUSH
7105: LD_INT 0
7107: ST_TO_ADDR
// s60 := false ;
7108: LD_ADDR_EXP 80
7112: PUSH
7113: LD_INT 0
7115: ST_TO_ADDR
// end ;
7116: LD_VAR 0 1
7120: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7121: LD_INT 0
7123: PPUSH
7124: PPUSH
7125: PPUSH
7126: PPUSH
7127: PPUSH
7128: PPUSH
7129: PPUSH
// result := [ ] ;
7130: LD_ADDR_VAR 0 2
7134: PUSH
7135: EMPTY
7136: ST_TO_ADDR
// if campaign_id = 1 then
7137: LD_OWVAR 69
7141: PUSH
7142: LD_INT 1
7144: EQUAL
7145: IFFALSE 10311
// begin case mission_number of 1 :
7147: LD_OWVAR 70
7151: PUSH
7152: LD_INT 1
7154: DOUBLE
7155: EQUAL
7156: IFTRUE 7160
7158: GO 7236
7160: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7161: LD_ADDR_VAR 0 2
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 4
7171: PUSH
7172: LD_INT 11
7174: PUSH
7175: LD_INT 12
7177: PUSH
7178: LD_INT 15
7180: PUSH
7181: LD_INT 16
7183: PUSH
7184: LD_INT 22
7186: PUSH
7187: LD_INT 23
7189: PUSH
7190: LD_INT 26
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: PUSH
7204: LD_INT 101
7206: PUSH
7207: LD_INT 102
7209: PUSH
7210: LD_INT 106
7212: PUSH
7213: LD_INT 116
7215: PUSH
7216: LD_INT 117
7218: PUSH
7219: LD_INT 118
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: ST_TO_ADDR
7234: GO 10309
7236: LD_INT 2
7238: DOUBLE
7239: EQUAL
7240: IFTRUE 7244
7242: GO 7328
7244: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7245: LD_ADDR_VAR 0 2
7249: PUSH
7250: LD_INT 2
7252: PUSH
7253: LD_INT 4
7255: PUSH
7256: LD_INT 11
7258: PUSH
7259: LD_INT 12
7261: PUSH
7262: LD_INT 15
7264: PUSH
7265: LD_INT 16
7267: PUSH
7268: LD_INT 22
7270: PUSH
7271: LD_INT 23
7273: PUSH
7274: LD_INT 26
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 101
7290: PUSH
7291: LD_INT 102
7293: PUSH
7294: LD_INT 105
7296: PUSH
7297: LD_INT 106
7299: PUSH
7300: LD_INT 108
7302: PUSH
7303: LD_INT 116
7305: PUSH
7306: LD_INT 117
7308: PUSH
7309: LD_INT 118
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: ST_TO_ADDR
7326: GO 10309
7328: LD_INT 3
7330: DOUBLE
7331: EQUAL
7332: IFTRUE 7336
7334: GO 7424
7336: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7337: LD_ADDR_VAR 0 2
7341: PUSH
7342: LD_INT 2
7344: PUSH
7345: LD_INT 4
7347: PUSH
7348: LD_INT 5
7350: PUSH
7351: LD_INT 11
7353: PUSH
7354: LD_INT 12
7356: PUSH
7357: LD_INT 15
7359: PUSH
7360: LD_INT 16
7362: PUSH
7363: LD_INT 22
7365: PUSH
7366: LD_INT 26
7368: PUSH
7369: LD_INT 36
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 101
7386: PUSH
7387: LD_INT 102
7389: PUSH
7390: LD_INT 105
7392: PUSH
7393: LD_INT 106
7395: PUSH
7396: LD_INT 108
7398: PUSH
7399: LD_INT 116
7401: PUSH
7402: LD_INT 117
7404: PUSH
7405: LD_INT 118
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: ST_TO_ADDR
7422: GO 10309
7424: LD_INT 4
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7528
7432: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7433: LD_ADDR_VAR 0 2
7437: PUSH
7438: LD_INT 2
7440: PUSH
7441: LD_INT 4
7443: PUSH
7444: LD_INT 5
7446: PUSH
7447: LD_INT 8
7449: PUSH
7450: LD_INT 11
7452: PUSH
7453: LD_INT 12
7455: PUSH
7456: LD_INT 15
7458: PUSH
7459: LD_INT 16
7461: PUSH
7462: LD_INT 22
7464: PUSH
7465: LD_INT 23
7467: PUSH
7468: LD_INT 26
7470: PUSH
7471: LD_INT 36
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: PUSH
7488: LD_INT 101
7490: PUSH
7491: LD_INT 102
7493: PUSH
7494: LD_INT 105
7496: PUSH
7497: LD_INT 106
7499: PUSH
7500: LD_INT 108
7502: PUSH
7503: LD_INT 116
7505: PUSH
7506: LD_INT 117
7508: PUSH
7509: LD_INT 118
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: ST_TO_ADDR
7526: GO 10309
7528: LD_INT 5
7530: DOUBLE
7531: EQUAL
7532: IFTRUE 7536
7534: GO 7648
7536: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7537: LD_ADDR_VAR 0 2
7541: PUSH
7542: LD_INT 2
7544: PUSH
7545: LD_INT 4
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: LD_INT 6
7553: PUSH
7554: LD_INT 8
7556: PUSH
7557: LD_INT 11
7559: PUSH
7560: LD_INT 12
7562: PUSH
7563: LD_INT 15
7565: PUSH
7566: LD_INT 16
7568: PUSH
7569: LD_INT 22
7571: PUSH
7572: LD_INT 23
7574: PUSH
7575: LD_INT 25
7577: PUSH
7578: LD_INT 26
7580: PUSH
7581: LD_INT 36
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 101
7602: PUSH
7603: LD_INT 102
7605: PUSH
7606: LD_INT 105
7608: PUSH
7609: LD_INT 106
7611: PUSH
7612: LD_INT 108
7614: PUSH
7615: LD_INT 109
7617: PUSH
7618: LD_INT 112
7620: PUSH
7621: LD_INT 116
7623: PUSH
7624: LD_INT 117
7626: PUSH
7627: LD_INT 118
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: ST_TO_ADDR
7646: GO 10309
7648: LD_INT 6
7650: DOUBLE
7651: EQUAL
7652: IFTRUE 7656
7654: GO 7788
7656: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7657: LD_ADDR_VAR 0 2
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: LD_INT 4
7667: PUSH
7668: LD_INT 5
7670: PUSH
7671: LD_INT 6
7673: PUSH
7674: LD_INT 8
7676: PUSH
7677: LD_INT 11
7679: PUSH
7680: LD_INT 12
7682: PUSH
7683: LD_INT 15
7685: PUSH
7686: LD_INT 16
7688: PUSH
7689: LD_INT 20
7691: PUSH
7692: LD_INT 21
7694: PUSH
7695: LD_INT 22
7697: PUSH
7698: LD_INT 23
7700: PUSH
7701: LD_INT 25
7703: PUSH
7704: LD_INT 26
7706: PUSH
7707: LD_INT 30
7709: PUSH
7710: LD_INT 31
7712: PUSH
7713: LD_INT 32
7715: PUSH
7716: LD_INT 36
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 101
7742: PUSH
7743: LD_INT 102
7745: PUSH
7746: LD_INT 105
7748: PUSH
7749: LD_INT 106
7751: PUSH
7752: LD_INT 108
7754: PUSH
7755: LD_INT 109
7757: PUSH
7758: LD_INT 112
7760: PUSH
7761: LD_INT 116
7763: PUSH
7764: LD_INT 117
7766: PUSH
7767: LD_INT 118
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: ST_TO_ADDR
7786: GO 10309
7788: LD_INT 7
7790: DOUBLE
7791: EQUAL
7792: IFTRUE 7796
7794: GO 7908
7796: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7797: LD_ADDR_VAR 0 2
7801: PUSH
7802: LD_INT 2
7804: PUSH
7805: LD_INT 4
7807: PUSH
7808: LD_INT 5
7810: PUSH
7811: LD_INT 7
7813: PUSH
7814: LD_INT 11
7816: PUSH
7817: LD_INT 12
7819: PUSH
7820: LD_INT 15
7822: PUSH
7823: LD_INT 16
7825: PUSH
7826: LD_INT 20
7828: PUSH
7829: LD_INT 21
7831: PUSH
7832: LD_INT 22
7834: PUSH
7835: LD_INT 23
7837: PUSH
7838: LD_INT 25
7840: PUSH
7841: LD_INT 26
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: PUSH
7860: LD_INT 101
7862: PUSH
7863: LD_INT 102
7865: PUSH
7866: LD_INT 103
7868: PUSH
7869: LD_INT 105
7871: PUSH
7872: LD_INT 106
7874: PUSH
7875: LD_INT 108
7877: PUSH
7878: LD_INT 112
7880: PUSH
7881: LD_INT 116
7883: PUSH
7884: LD_INT 117
7886: PUSH
7887: LD_INT 118
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: ST_TO_ADDR
7906: GO 10309
7908: LD_INT 8
7910: DOUBLE
7911: EQUAL
7912: IFTRUE 7916
7914: GO 8056
7916: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7917: LD_ADDR_VAR 0 2
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: LD_INT 4
7927: PUSH
7928: LD_INT 5
7930: PUSH
7931: LD_INT 6
7933: PUSH
7934: LD_INT 7
7936: PUSH
7937: LD_INT 8
7939: PUSH
7940: LD_INT 11
7942: PUSH
7943: LD_INT 12
7945: PUSH
7946: LD_INT 15
7948: PUSH
7949: LD_INT 16
7951: PUSH
7952: LD_INT 20
7954: PUSH
7955: LD_INT 21
7957: PUSH
7958: LD_INT 22
7960: PUSH
7961: LD_INT 23
7963: PUSH
7964: LD_INT 25
7966: PUSH
7967: LD_INT 26
7969: PUSH
7970: LD_INT 30
7972: PUSH
7973: LD_INT 31
7975: PUSH
7976: LD_INT 32
7978: PUSH
7979: LD_INT 36
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: LD_INT 101
8006: PUSH
8007: LD_INT 102
8009: PUSH
8010: LD_INT 103
8012: PUSH
8013: LD_INT 105
8015: PUSH
8016: LD_INT 106
8018: PUSH
8019: LD_INT 108
8021: PUSH
8022: LD_INT 109
8024: PUSH
8025: LD_INT 112
8027: PUSH
8028: LD_INT 116
8030: PUSH
8031: LD_INT 117
8033: PUSH
8034: LD_INT 118
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: ST_TO_ADDR
8054: GO 10309
8056: LD_INT 9
8058: DOUBLE
8059: EQUAL
8060: IFTRUE 8064
8062: GO 8212
8064: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8065: LD_ADDR_VAR 0 2
8069: PUSH
8070: LD_INT 2
8072: PUSH
8073: LD_INT 4
8075: PUSH
8076: LD_INT 5
8078: PUSH
8079: LD_INT 6
8081: PUSH
8082: LD_INT 7
8084: PUSH
8085: LD_INT 8
8087: PUSH
8088: LD_INT 11
8090: PUSH
8091: LD_INT 12
8093: PUSH
8094: LD_INT 15
8096: PUSH
8097: LD_INT 16
8099: PUSH
8100: LD_INT 20
8102: PUSH
8103: LD_INT 21
8105: PUSH
8106: LD_INT 22
8108: PUSH
8109: LD_INT 23
8111: PUSH
8112: LD_INT 25
8114: PUSH
8115: LD_INT 26
8117: PUSH
8118: LD_INT 28
8120: PUSH
8121: LD_INT 30
8123: PUSH
8124: LD_INT 31
8126: PUSH
8127: LD_INT 32
8129: PUSH
8130: LD_INT 36
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 101
8158: PUSH
8159: LD_INT 102
8161: PUSH
8162: LD_INT 103
8164: PUSH
8165: LD_INT 105
8167: PUSH
8168: LD_INT 106
8170: PUSH
8171: LD_INT 108
8173: PUSH
8174: LD_INT 109
8176: PUSH
8177: LD_INT 112
8179: PUSH
8180: LD_INT 114
8182: PUSH
8183: LD_INT 116
8185: PUSH
8186: LD_INT 117
8188: PUSH
8189: LD_INT 118
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: ST_TO_ADDR
8210: GO 10309
8212: LD_INT 10
8214: DOUBLE
8215: EQUAL
8216: IFTRUE 8220
8218: GO 8416
8220: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8221: LD_ADDR_VAR 0 2
8225: PUSH
8226: LD_INT 2
8228: PUSH
8229: LD_INT 4
8231: PUSH
8232: LD_INT 5
8234: PUSH
8235: LD_INT 6
8237: PUSH
8238: LD_INT 7
8240: PUSH
8241: LD_INT 8
8243: PUSH
8244: LD_INT 9
8246: PUSH
8247: LD_INT 10
8249: PUSH
8250: LD_INT 11
8252: PUSH
8253: LD_INT 12
8255: PUSH
8256: LD_INT 13
8258: PUSH
8259: LD_INT 14
8261: PUSH
8262: LD_INT 15
8264: PUSH
8265: LD_INT 16
8267: PUSH
8268: LD_INT 17
8270: PUSH
8271: LD_INT 18
8273: PUSH
8274: LD_INT 19
8276: PUSH
8277: LD_INT 20
8279: PUSH
8280: LD_INT 21
8282: PUSH
8283: LD_INT 22
8285: PUSH
8286: LD_INT 23
8288: PUSH
8289: LD_INT 24
8291: PUSH
8292: LD_INT 25
8294: PUSH
8295: LD_INT 26
8297: PUSH
8298: LD_INT 28
8300: PUSH
8301: LD_INT 30
8303: PUSH
8304: LD_INT 31
8306: PUSH
8307: LD_INT 32
8309: PUSH
8310: LD_INT 36
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: PUSH
8344: LD_INT 101
8346: PUSH
8347: LD_INT 102
8349: PUSH
8350: LD_INT 103
8352: PUSH
8353: LD_INT 104
8355: PUSH
8356: LD_INT 105
8358: PUSH
8359: LD_INT 106
8361: PUSH
8362: LD_INT 107
8364: PUSH
8365: LD_INT 108
8367: PUSH
8368: LD_INT 109
8370: PUSH
8371: LD_INT 110
8373: PUSH
8374: LD_INT 111
8376: PUSH
8377: LD_INT 112
8379: PUSH
8380: LD_INT 114
8382: PUSH
8383: LD_INT 116
8385: PUSH
8386: LD_INT 117
8388: PUSH
8389: LD_INT 118
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: ST_TO_ADDR
8414: GO 10309
8416: LD_INT 11
8418: DOUBLE
8419: EQUAL
8420: IFTRUE 8424
8422: GO 8628
8424: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8425: LD_ADDR_VAR 0 2
8429: PUSH
8430: LD_INT 2
8432: PUSH
8433: LD_INT 3
8435: PUSH
8436: LD_INT 4
8438: PUSH
8439: LD_INT 5
8441: PUSH
8442: LD_INT 6
8444: PUSH
8445: LD_INT 7
8447: PUSH
8448: LD_INT 8
8450: PUSH
8451: LD_INT 9
8453: PUSH
8454: LD_INT 10
8456: PUSH
8457: LD_INT 11
8459: PUSH
8460: LD_INT 12
8462: PUSH
8463: LD_INT 13
8465: PUSH
8466: LD_INT 14
8468: PUSH
8469: LD_INT 15
8471: PUSH
8472: LD_INT 16
8474: PUSH
8475: LD_INT 17
8477: PUSH
8478: LD_INT 18
8480: PUSH
8481: LD_INT 19
8483: PUSH
8484: LD_INT 20
8486: PUSH
8487: LD_INT 21
8489: PUSH
8490: LD_INT 22
8492: PUSH
8493: LD_INT 23
8495: PUSH
8496: LD_INT 24
8498: PUSH
8499: LD_INT 25
8501: PUSH
8502: LD_INT 26
8504: PUSH
8505: LD_INT 28
8507: PUSH
8508: LD_INT 30
8510: PUSH
8511: LD_INT 31
8513: PUSH
8514: LD_INT 32
8516: PUSH
8517: LD_INT 34
8519: PUSH
8520: LD_INT 36
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 101
8558: PUSH
8559: LD_INT 102
8561: PUSH
8562: LD_INT 103
8564: PUSH
8565: LD_INT 104
8567: PUSH
8568: LD_INT 105
8570: PUSH
8571: LD_INT 106
8573: PUSH
8574: LD_INT 107
8576: PUSH
8577: LD_INT 108
8579: PUSH
8580: LD_INT 109
8582: PUSH
8583: LD_INT 110
8585: PUSH
8586: LD_INT 111
8588: PUSH
8589: LD_INT 112
8591: PUSH
8592: LD_INT 114
8594: PUSH
8595: LD_INT 116
8597: PUSH
8598: LD_INT 117
8600: PUSH
8601: LD_INT 118
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: ST_TO_ADDR
8626: GO 10309
8628: LD_INT 12
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8856
8636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8637: LD_ADDR_VAR 0 2
8641: PUSH
8642: LD_INT 1
8644: PUSH
8645: LD_INT 2
8647: PUSH
8648: LD_INT 3
8650: PUSH
8651: LD_INT 4
8653: PUSH
8654: LD_INT 5
8656: PUSH
8657: LD_INT 6
8659: PUSH
8660: LD_INT 7
8662: PUSH
8663: LD_INT 8
8665: PUSH
8666: LD_INT 9
8668: PUSH
8669: LD_INT 10
8671: PUSH
8672: LD_INT 11
8674: PUSH
8675: LD_INT 12
8677: PUSH
8678: LD_INT 13
8680: PUSH
8681: LD_INT 14
8683: PUSH
8684: LD_INT 15
8686: PUSH
8687: LD_INT 16
8689: PUSH
8690: LD_INT 17
8692: PUSH
8693: LD_INT 18
8695: PUSH
8696: LD_INT 19
8698: PUSH
8699: LD_INT 20
8701: PUSH
8702: LD_INT 21
8704: PUSH
8705: LD_INT 22
8707: PUSH
8708: LD_INT 23
8710: PUSH
8711: LD_INT 24
8713: PUSH
8714: LD_INT 25
8716: PUSH
8717: LD_INT 26
8719: PUSH
8720: LD_INT 27
8722: PUSH
8723: LD_INT 28
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_INT 31
8731: PUSH
8732: LD_INT 32
8734: PUSH
8735: LD_INT 33
8737: PUSH
8738: LD_INT 34
8740: PUSH
8741: LD_INT 36
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 101
8782: PUSH
8783: LD_INT 102
8785: PUSH
8786: LD_INT 103
8788: PUSH
8789: LD_INT 104
8791: PUSH
8792: LD_INT 105
8794: PUSH
8795: LD_INT 106
8797: PUSH
8798: LD_INT 107
8800: PUSH
8801: LD_INT 108
8803: PUSH
8804: LD_INT 109
8806: PUSH
8807: LD_INT 110
8809: PUSH
8810: LD_INT 111
8812: PUSH
8813: LD_INT 112
8815: PUSH
8816: LD_INT 113
8818: PUSH
8819: LD_INT 114
8821: PUSH
8822: LD_INT 116
8824: PUSH
8825: LD_INT 117
8827: PUSH
8828: LD_INT 118
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: ST_TO_ADDR
8854: GO 10309
8856: LD_INT 13
8858: DOUBLE
8859: EQUAL
8860: IFTRUE 8864
8862: GO 9072
8864: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8865: LD_ADDR_VAR 0 2
8869: PUSH
8870: LD_INT 1
8872: PUSH
8873: LD_INT 2
8875: PUSH
8876: LD_INT 3
8878: PUSH
8879: LD_INT 4
8881: PUSH
8882: LD_INT 5
8884: PUSH
8885: LD_INT 8
8887: PUSH
8888: LD_INT 9
8890: PUSH
8891: LD_INT 10
8893: PUSH
8894: LD_INT 11
8896: PUSH
8897: LD_INT 12
8899: PUSH
8900: LD_INT 14
8902: PUSH
8903: LD_INT 15
8905: PUSH
8906: LD_INT 16
8908: PUSH
8909: LD_INT 17
8911: PUSH
8912: LD_INT 18
8914: PUSH
8915: LD_INT 19
8917: PUSH
8918: LD_INT 20
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 22
8926: PUSH
8927: LD_INT 23
8929: PUSH
8930: LD_INT 24
8932: PUSH
8933: LD_INT 25
8935: PUSH
8936: LD_INT 26
8938: PUSH
8939: LD_INT 27
8941: PUSH
8942: LD_INT 28
8944: PUSH
8945: LD_INT 30
8947: PUSH
8948: LD_INT 31
8950: PUSH
8951: LD_INT 32
8953: PUSH
8954: LD_INT 33
8956: PUSH
8957: LD_INT 34
8959: PUSH
8960: LD_INT 36
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 101
8998: PUSH
8999: LD_INT 102
9001: PUSH
9002: LD_INT 103
9004: PUSH
9005: LD_INT 104
9007: PUSH
9008: LD_INT 105
9010: PUSH
9011: LD_INT 106
9013: PUSH
9014: LD_INT 107
9016: PUSH
9017: LD_INT 108
9019: PUSH
9020: LD_INT 109
9022: PUSH
9023: LD_INT 110
9025: PUSH
9026: LD_INT 111
9028: PUSH
9029: LD_INT 112
9031: PUSH
9032: LD_INT 113
9034: PUSH
9035: LD_INT 114
9037: PUSH
9038: LD_INT 116
9040: PUSH
9041: LD_INT 117
9043: PUSH
9044: LD_INT 118
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: ST_TO_ADDR
9070: GO 10309
9072: LD_INT 14
9074: DOUBLE
9075: EQUAL
9076: IFTRUE 9080
9078: GO 9304
9080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_INT 1
9088: PUSH
9089: LD_INT 2
9091: PUSH
9092: LD_INT 3
9094: PUSH
9095: LD_INT 4
9097: PUSH
9098: LD_INT 5
9100: PUSH
9101: LD_INT 6
9103: PUSH
9104: LD_INT 7
9106: PUSH
9107: LD_INT 8
9109: PUSH
9110: LD_INT 9
9112: PUSH
9113: LD_INT 10
9115: PUSH
9116: LD_INT 11
9118: PUSH
9119: LD_INT 12
9121: PUSH
9122: LD_INT 13
9124: PUSH
9125: LD_INT 14
9127: PUSH
9128: LD_INT 15
9130: PUSH
9131: LD_INT 16
9133: PUSH
9134: LD_INT 17
9136: PUSH
9137: LD_INT 18
9139: PUSH
9140: LD_INT 19
9142: PUSH
9143: LD_INT 20
9145: PUSH
9146: LD_INT 21
9148: PUSH
9149: LD_INT 22
9151: PUSH
9152: LD_INT 23
9154: PUSH
9155: LD_INT 24
9157: PUSH
9158: LD_INT 25
9160: PUSH
9161: LD_INT 26
9163: PUSH
9164: LD_INT 27
9166: PUSH
9167: LD_INT 28
9169: PUSH
9170: LD_INT 29
9172: PUSH
9173: LD_INT 30
9175: PUSH
9176: LD_INT 31
9178: PUSH
9179: LD_INT 32
9181: PUSH
9182: LD_INT 33
9184: PUSH
9185: LD_INT 34
9187: PUSH
9188: LD_INT 36
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: PUSH
9228: LD_INT 101
9230: PUSH
9231: LD_INT 102
9233: PUSH
9234: LD_INT 103
9236: PUSH
9237: LD_INT 104
9239: PUSH
9240: LD_INT 105
9242: PUSH
9243: LD_INT 106
9245: PUSH
9246: LD_INT 107
9248: PUSH
9249: LD_INT 108
9251: PUSH
9252: LD_INT 109
9254: PUSH
9255: LD_INT 110
9257: PUSH
9258: LD_INT 111
9260: PUSH
9261: LD_INT 112
9263: PUSH
9264: LD_INT 113
9266: PUSH
9267: LD_INT 114
9269: PUSH
9270: LD_INT 116
9272: PUSH
9273: LD_INT 117
9275: PUSH
9276: LD_INT 118
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: ST_TO_ADDR
9302: GO 10309
9304: LD_INT 15
9306: DOUBLE
9307: EQUAL
9308: IFTRUE 9312
9310: GO 9536
9312: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_INT 1
9320: PUSH
9321: LD_INT 2
9323: PUSH
9324: LD_INT 3
9326: PUSH
9327: LD_INT 4
9329: PUSH
9330: LD_INT 5
9332: PUSH
9333: LD_INT 6
9335: PUSH
9336: LD_INT 7
9338: PUSH
9339: LD_INT 8
9341: PUSH
9342: LD_INT 9
9344: PUSH
9345: LD_INT 10
9347: PUSH
9348: LD_INT 11
9350: PUSH
9351: LD_INT 12
9353: PUSH
9354: LD_INT 13
9356: PUSH
9357: LD_INT 14
9359: PUSH
9360: LD_INT 15
9362: PUSH
9363: LD_INT 16
9365: PUSH
9366: LD_INT 17
9368: PUSH
9369: LD_INT 18
9371: PUSH
9372: LD_INT 19
9374: PUSH
9375: LD_INT 20
9377: PUSH
9378: LD_INT 21
9380: PUSH
9381: LD_INT 22
9383: PUSH
9384: LD_INT 23
9386: PUSH
9387: LD_INT 24
9389: PUSH
9390: LD_INT 25
9392: PUSH
9393: LD_INT 26
9395: PUSH
9396: LD_INT 27
9398: PUSH
9399: LD_INT 28
9401: PUSH
9402: LD_INT 29
9404: PUSH
9405: LD_INT 30
9407: PUSH
9408: LD_INT 31
9410: PUSH
9411: LD_INT 32
9413: PUSH
9414: LD_INT 33
9416: PUSH
9417: LD_INT 34
9419: PUSH
9420: LD_INT 36
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: PUSH
9460: LD_INT 101
9462: PUSH
9463: LD_INT 102
9465: PUSH
9466: LD_INT 103
9468: PUSH
9469: LD_INT 104
9471: PUSH
9472: LD_INT 105
9474: PUSH
9475: LD_INT 106
9477: PUSH
9478: LD_INT 107
9480: PUSH
9481: LD_INT 108
9483: PUSH
9484: LD_INT 109
9486: PUSH
9487: LD_INT 110
9489: PUSH
9490: LD_INT 111
9492: PUSH
9493: LD_INT 112
9495: PUSH
9496: LD_INT 113
9498: PUSH
9499: LD_INT 114
9501: PUSH
9502: LD_INT 116
9504: PUSH
9505: LD_INT 117
9507: PUSH
9508: LD_INT 118
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: ST_TO_ADDR
9534: GO 10309
9536: LD_INT 16
9538: DOUBLE
9539: EQUAL
9540: IFTRUE 9544
9542: GO 9680
9544: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9545: LD_ADDR_VAR 0 2
9549: PUSH
9550: LD_INT 2
9552: PUSH
9553: LD_INT 4
9555: PUSH
9556: LD_INT 5
9558: PUSH
9559: LD_INT 7
9561: PUSH
9562: LD_INT 11
9564: PUSH
9565: LD_INT 12
9567: PUSH
9568: LD_INT 15
9570: PUSH
9571: LD_INT 16
9573: PUSH
9574: LD_INT 20
9576: PUSH
9577: LD_INT 21
9579: PUSH
9580: LD_INT 22
9582: PUSH
9583: LD_INT 23
9585: PUSH
9586: LD_INT 25
9588: PUSH
9589: LD_INT 26
9591: PUSH
9592: LD_INT 30
9594: PUSH
9595: LD_INT 31
9597: PUSH
9598: LD_INT 32
9600: PUSH
9601: LD_INT 33
9603: PUSH
9604: LD_INT 34
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 101
9630: PUSH
9631: LD_INT 102
9633: PUSH
9634: LD_INT 103
9636: PUSH
9637: LD_INT 106
9639: PUSH
9640: LD_INT 108
9642: PUSH
9643: LD_INT 112
9645: PUSH
9646: LD_INT 113
9648: PUSH
9649: LD_INT 114
9651: PUSH
9652: LD_INT 116
9654: PUSH
9655: LD_INT 117
9657: PUSH
9658: LD_INT 118
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: ST_TO_ADDR
9678: GO 10309
9680: LD_INT 17
9682: DOUBLE
9683: EQUAL
9684: IFTRUE 9688
9686: GO 9912
9688: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_INT 1
9696: PUSH
9697: LD_INT 2
9699: PUSH
9700: LD_INT 3
9702: PUSH
9703: LD_INT 4
9705: PUSH
9706: LD_INT 5
9708: PUSH
9709: LD_INT 6
9711: PUSH
9712: LD_INT 7
9714: PUSH
9715: LD_INT 8
9717: PUSH
9718: LD_INT 9
9720: PUSH
9721: LD_INT 10
9723: PUSH
9724: LD_INT 11
9726: PUSH
9727: LD_INT 12
9729: PUSH
9730: LD_INT 13
9732: PUSH
9733: LD_INT 14
9735: PUSH
9736: LD_INT 15
9738: PUSH
9739: LD_INT 16
9741: PUSH
9742: LD_INT 17
9744: PUSH
9745: LD_INT 18
9747: PUSH
9748: LD_INT 19
9750: PUSH
9751: LD_INT 20
9753: PUSH
9754: LD_INT 21
9756: PUSH
9757: LD_INT 22
9759: PUSH
9760: LD_INT 23
9762: PUSH
9763: LD_INT 24
9765: PUSH
9766: LD_INT 25
9768: PUSH
9769: LD_INT 26
9771: PUSH
9772: LD_INT 27
9774: PUSH
9775: LD_INT 28
9777: PUSH
9778: LD_INT 29
9780: PUSH
9781: LD_INT 30
9783: PUSH
9784: LD_INT 31
9786: PUSH
9787: LD_INT 32
9789: PUSH
9790: LD_INT 33
9792: PUSH
9793: LD_INT 34
9795: PUSH
9796: LD_INT 36
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 101
9838: PUSH
9839: LD_INT 102
9841: PUSH
9842: LD_INT 103
9844: PUSH
9845: LD_INT 104
9847: PUSH
9848: LD_INT 105
9850: PUSH
9851: LD_INT 106
9853: PUSH
9854: LD_INT 107
9856: PUSH
9857: LD_INT 108
9859: PUSH
9860: LD_INT 109
9862: PUSH
9863: LD_INT 110
9865: PUSH
9866: LD_INT 111
9868: PUSH
9869: LD_INT 112
9871: PUSH
9872: LD_INT 113
9874: PUSH
9875: LD_INT 114
9877: PUSH
9878: LD_INT 116
9880: PUSH
9881: LD_INT 117
9883: PUSH
9884: LD_INT 118
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: ST_TO_ADDR
9910: GO 10309
9912: LD_INT 18
9914: DOUBLE
9915: EQUAL
9916: IFTRUE 9920
9918: GO 10068
9920: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9921: LD_ADDR_VAR 0 2
9925: PUSH
9926: LD_INT 2
9928: PUSH
9929: LD_INT 4
9931: PUSH
9932: LD_INT 5
9934: PUSH
9935: LD_INT 7
9937: PUSH
9938: LD_INT 11
9940: PUSH
9941: LD_INT 12
9943: PUSH
9944: LD_INT 15
9946: PUSH
9947: LD_INT 16
9949: PUSH
9950: LD_INT 20
9952: PUSH
9953: LD_INT 21
9955: PUSH
9956: LD_INT 22
9958: PUSH
9959: LD_INT 23
9961: PUSH
9962: LD_INT 25
9964: PUSH
9965: LD_INT 26
9967: PUSH
9968: LD_INT 30
9970: PUSH
9971: LD_INT 31
9973: PUSH
9974: LD_INT 32
9976: PUSH
9977: LD_INT 33
9979: PUSH
9980: LD_INT 34
9982: PUSH
9983: LD_INT 35
9985: PUSH
9986: LD_INT 36
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 101
10014: PUSH
10015: LD_INT 102
10017: PUSH
10018: LD_INT 103
10020: PUSH
10021: LD_INT 106
10023: PUSH
10024: LD_INT 108
10026: PUSH
10027: LD_INT 112
10029: PUSH
10030: LD_INT 113
10032: PUSH
10033: LD_INT 114
10035: PUSH
10036: LD_INT 115
10038: PUSH
10039: LD_INT 116
10041: PUSH
10042: LD_INT 117
10044: PUSH
10045: LD_INT 118
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: ST_TO_ADDR
10066: GO 10309
10068: LD_INT 19
10070: DOUBLE
10071: EQUAL
10072: IFTRUE 10076
10074: GO 10308
10076: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10077: LD_ADDR_VAR 0 2
10081: PUSH
10082: LD_INT 1
10084: PUSH
10085: LD_INT 2
10087: PUSH
10088: LD_INT 3
10090: PUSH
10091: LD_INT 4
10093: PUSH
10094: LD_INT 5
10096: PUSH
10097: LD_INT 6
10099: PUSH
10100: LD_INT 7
10102: PUSH
10103: LD_INT 8
10105: PUSH
10106: LD_INT 9
10108: PUSH
10109: LD_INT 10
10111: PUSH
10112: LD_INT 11
10114: PUSH
10115: LD_INT 12
10117: PUSH
10118: LD_INT 13
10120: PUSH
10121: LD_INT 14
10123: PUSH
10124: LD_INT 15
10126: PUSH
10127: LD_INT 16
10129: PUSH
10130: LD_INT 17
10132: PUSH
10133: LD_INT 18
10135: PUSH
10136: LD_INT 19
10138: PUSH
10139: LD_INT 20
10141: PUSH
10142: LD_INT 21
10144: PUSH
10145: LD_INT 22
10147: PUSH
10148: LD_INT 23
10150: PUSH
10151: LD_INT 24
10153: PUSH
10154: LD_INT 25
10156: PUSH
10157: LD_INT 26
10159: PUSH
10160: LD_INT 27
10162: PUSH
10163: LD_INT 28
10165: PUSH
10166: LD_INT 29
10168: PUSH
10169: LD_INT 30
10171: PUSH
10172: LD_INT 31
10174: PUSH
10175: LD_INT 32
10177: PUSH
10178: LD_INT 33
10180: PUSH
10181: LD_INT 34
10183: PUSH
10184: LD_INT 35
10186: PUSH
10187: LD_INT 36
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: PUSH
10228: LD_INT 101
10230: PUSH
10231: LD_INT 102
10233: PUSH
10234: LD_INT 103
10236: PUSH
10237: LD_INT 104
10239: PUSH
10240: LD_INT 105
10242: PUSH
10243: LD_INT 106
10245: PUSH
10246: LD_INT 107
10248: PUSH
10249: LD_INT 108
10251: PUSH
10252: LD_INT 109
10254: PUSH
10255: LD_INT 110
10257: PUSH
10258: LD_INT 111
10260: PUSH
10261: LD_INT 112
10263: PUSH
10264: LD_INT 113
10266: PUSH
10267: LD_INT 114
10269: PUSH
10270: LD_INT 115
10272: PUSH
10273: LD_INT 116
10275: PUSH
10276: LD_INT 117
10278: PUSH
10279: LD_INT 118
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: ST_TO_ADDR
10306: GO 10309
10308: POP
// end else
10309: GO 10540
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10311: LD_ADDR_VAR 0 2
10315: PUSH
10316: LD_INT 1
10318: PUSH
10319: LD_INT 2
10321: PUSH
10322: LD_INT 3
10324: PUSH
10325: LD_INT 4
10327: PUSH
10328: LD_INT 5
10330: PUSH
10331: LD_INT 6
10333: PUSH
10334: LD_INT 7
10336: PUSH
10337: LD_INT 8
10339: PUSH
10340: LD_INT 9
10342: PUSH
10343: LD_INT 10
10345: PUSH
10346: LD_INT 11
10348: PUSH
10349: LD_INT 12
10351: PUSH
10352: LD_INT 13
10354: PUSH
10355: LD_INT 14
10357: PUSH
10358: LD_INT 15
10360: PUSH
10361: LD_INT 16
10363: PUSH
10364: LD_INT 17
10366: PUSH
10367: LD_INT 18
10369: PUSH
10370: LD_INT 19
10372: PUSH
10373: LD_INT 20
10375: PUSH
10376: LD_INT 21
10378: PUSH
10379: LD_INT 22
10381: PUSH
10382: LD_INT 23
10384: PUSH
10385: LD_INT 24
10387: PUSH
10388: LD_INT 25
10390: PUSH
10391: LD_INT 26
10393: PUSH
10394: LD_INT 27
10396: PUSH
10397: LD_INT 28
10399: PUSH
10400: LD_INT 29
10402: PUSH
10403: LD_INT 30
10405: PUSH
10406: LD_INT 31
10408: PUSH
10409: LD_INT 32
10411: PUSH
10412: LD_INT 33
10414: PUSH
10415: LD_INT 34
10417: PUSH
10418: LD_INT 35
10420: PUSH
10421: LD_INT 36
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 101
10464: PUSH
10465: LD_INT 102
10467: PUSH
10468: LD_INT 103
10470: PUSH
10471: LD_INT 104
10473: PUSH
10474: LD_INT 105
10476: PUSH
10477: LD_INT 106
10479: PUSH
10480: LD_INT 107
10482: PUSH
10483: LD_INT 108
10485: PUSH
10486: LD_INT 109
10488: PUSH
10489: LD_INT 110
10491: PUSH
10492: LD_INT 111
10494: PUSH
10495: LD_INT 112
10497: PUSH
10498: LD_INT 113
10500: PUSH
10501: LD_INT 114
10503: PUSH
10504: LD_INT 115
10506: PUSH
10507: LD_INT 116
10509: PUSH
10510: LD_INT 117
10512: PUSH
10513: LD_INT 118
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: ST_TO_ADDR
// if result then
10540: LD_VAR 0 2
10544: IFFALSE 11330
// begin normal :=  ;
10546: LD_ADDR_VAR 0 5
10550: PUSH
10551: LD_STRING 
10553: ST_TO_ADDR
// hardcore :=  ;
10554: LD_ADDR_VAR 0 6
10558: PUSH
10559: LD_STRING 
10561: ST_TO_ADDR
// active :=  ;
10562: LD_ADDR_VAR 0 7
10566: PUSH
10567: LD_STRING 
10569: ST_TO_ADDR
// for i = 1 to normalCounter do
10570: LD_ADDR_VAR 0 8
10574: PUSH
10575: DOUBLE
10576: LD_INT 1
10578: DEC
10579: ST_TO_ADDR
10580: LD_EXP 25
10584: PUSH
10585: FOR_TO
10586: IFFALSE 10687
// begin tmp := 0 ;
10588: LD_ADDR_VAR 0 3
10592: PUSH
10593: LD_STRING 0
10595: ST_TO_ADDR
// if result [ 1 ] then
10596: LD_VAR 0 2
10600: PUSH
10601: LD_INT 1
10603: ARRAY
10604: IFFALSE 10669
// if result [ 1 ] [ 1 ] = i then
10606: LD_VAR 0 2
10610: PUSH
10611: LD_INT 1
10613: ARRAY
10614: PUSH
10615: LD_INT 1
10617: ARRAY
10618: PUSH
10619: LD_VAR 0 8
10623: EQUAL
10624: IFFALSE 10669
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10626: LD_ADDR_VAR 0 2
10630: PUSH
10631: LD_VAR 0 2
10635: PPUSH
10636: LD_INT 1
10638: PPUSH
10639: LD_VAR 0 2
10643: PUSH
10644: LD_INT 1
10646: ARRAY
10647: PPUSH
10648: LD_INT 1
10650: PPUSH
10651: CALL_OW 3
10655: PPUSH
10656: CALL_OW 1
10660: ST_TO_ADDR
// tmp := 1 ;
10661: LD_ADDR_VAR 0 3
10665: PUSH
10666: LD_STRING 1
10668: ST_TO_ADDR
// end ; normal := normal & tmp ;
10669: LD_ADDR_VAR 0 5
10673: PUSH
10674: LD_VAR 0 5
10678: PUSH
10679: LD_VAR 0 3
10683: STR
10684: ST_TO_ADDR
// end ;
10685: GO 10585
10687: POP
10688: POP
// for i = 1 to hardcoreCounter do
10689: LD_ADDR_VAR 0 8
10693: PUSH
10694: DOUBLE
10695: LD_INT 1
10697: DEC
10698: ST_TO_ADDR
10699: LD_EXP 26
10703: PUSH
10704: FOR_TO
10705: IFFALSE 10810
// begin tmp := 0 ;
10707: LD_ADDR_VAR 0 3
10711: PUSH
10712: LD_STRING 0
10714: ST_TO_ADDR
// if result [ 2 ] then
10715: LD_VAR 0 2
10719: PUSH
10720: LD_INT 2
10722: ARRAY
10723: IFFALSE 10792
// if result [ 2 ] [ 1 ] = 100 + i then
10725: LD_VAR 0 2
10729: PUSH
10730: LD_INT 2
10732: ARRAY
10733: PUSH
10734: LD_INT 1
10736: ARRAY
10737: PUSH
10738: LD_INT 100
10740: PUSH
10741: LD_VAR 0 8
10745: PLUS
10746: EQUAL
10747: IFFALSE 10792
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10749: LD_ADDR_VAR 0 2
10753: PUSH
10754: LD_VAR 0 2
10758: PPUSH
10759: LD_INT 2
10761: PPUSH
10762: LD_VAR 0 2
10766: PUSH
10767: LD_INT 2
10769: ARRAY
10770: PPUSH
10771: LD_INT 1
10773: PPUSH
10774: CALL_OW 3
10778: PPUSH
10779: CALL_OW 1
10783: ST_TO_ADDR
// tmp := 1 ;
10784: LD_ADDR_VAR 0 3
10788: PUSH
10789: LD_STRING 1
10791: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10792: LD_ADDR_VAR 0 6
10796: PUSH
10797: LD_VAR 0 6
10801: PUSH
10802: LD_VAR 0 3
10806: STR
10807: ST_TO_ADDR
// end ;
10808: GO 10704
10810: POP
10811: POP
// if isGameLoad then
10812: LD_VAR 0 1
10816: IFFALSE 11291
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10818: LD_ADDR_VAR 0 4
10822: PUSH
10823: LD_EXP 29
10827: PUSH
10828: LD_EXP 28
10832: PUSH
10833: LD_EXP 30
10837: PUSH
10838: LD_EXP 27
10842: PUSH
10843: LD_EXP 31
10847: PUSH
10848: LD_EXP 32
10852: PUSH
10853: LD_EXP 33
10857: PUSH
10858: LD_EXP 34
10862: PUSH
10863: LD_EXP 35
10867: PUSH
10868: LD_EXP 36
10872: PUSH
10873: LD_EXP 37
10877: PUSH
10878: LD_EXP 38
10882: PUSH
10883: LD_EXP 39
10887: PUSH
10888: LD_EXP 40
10892: PUSH
10893: LD_EXP 48
10897: PUSH
10898: LD_EXP 49
10902: PUSH
10903: LD_EXP 50
10907: PUSH
10908: LD_EXP 51
10912: PUSH
10913: LD_EXP 53
10917: PUSH
10918: LD_EXP 54
10922: PUSH
10923: LD_EXP 55
10927: PUSH
10928: LD_EXP 58
10932: PUSH
10933: LD_EXP 60
10937: PUSH
10938: LD_EXP 61
10942: PUSH
10943: LD_EXP 62
10947: PUSH
10948: LD_EXP 64
10952: PUSH
10953: LD_EXP 65
10957: PUSH
10958: LD_EXP 68
10962: PUSH
10963: LD_EXP 69
10967: PUSH
10968: LD_EXP 70
10972: PUSH
10973: LD_EXP 71
10977: PUSH
10978: LD_EXP 72
10982: PUSH
10983: LD_EXP 73
10987: PUSH
10988: LD_EXP 74
10992: PUSH
10993: LD_EXP 75
10997: PUSH
10998: LD_EXP 76
11002: PUSH
11003: LD_EXP 41
11007: PUSH
11008: LD_EXP 42
11012: PUSH
11013: LD_EXP 45
11017: PUSH
11018: LD_EXP 46
11022: PUSH
11023: LD_EXP 47
11027: PUSH
11028: LD_EXP 43
11032: PUSH
11033: LD_EXP 44
11037: PUSH
11038: LD_EXP 52
11042: PUSH
11043: LD_EXP 56
11047: PUSH
11048: LD_EXP 57
11052: PUSH
11053: LD_EXP 59
11057: PUSH
11058: LD_EXP 63
11062: PUSH
11063: LD_EXP 66
11067: PUSH
11068: LD_EXP 67
11072: PUSH
11073: LD_EXP 77
11077: PUSH
11078: LD_EXP 78
11082: PUSH
11083: LD_EXP 79
11087: PUSH
11088: LD_EXP 80
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: ST_TO_ADDR
// tmp :=  ;
11149: LD_ADDR_VAR 0 3
11153: PUSH
11154: LD_STRING 
11156: ST_TO_ADDR
// for i = 1 to normalCounter do
11157: LD_ADDR_VAR 0 8
11161: PUSH
11162: DOUBLE
11163: LD_INT 1
11165: DEC
11166: ST_TO_ADDR
11167: LD_EXP 25
11171: PUSH
11172: FOR_TO
11173: IFFALSE 11209
// begin if flags [ i ] then
11175: LD_VAR 0 4
11179: PUSH
11180: LD_VAR 0 8
11184: ARRAY
11185: IFFALSE 11207
// tmp := tmp & i & ; ;
11187: LD_ADDR_VAR 0 3
11191: PUSH
11192: LD_VAR 0 3
11196: PUSH
11197: LD_VAR 0 8
11201: STR
11202: PUSH
11203: LD_STRING ;
11205: STR
11206: ST_TO_ADDR
// end ;
11207: GO 11172
11209: POP
11210: POP
// for i = 1 to hardcoreCounter do
11211: LD_ADDR_VAR 0 8
11215: PUSH
11216: DOUBLE
11217: LD_INT 1
11219: DEC
11220: ST_TO_ADDR
11221: LD_EXP 26
11225: PUSH
11226: FOR_TO
11227: IFFALSE 11273
// begin if flags [ normalCounter + i ] then
11229: LD_VAR 0 4
11233: PUSH
11234: LD_EXP 25
11238: PUSH
11239: LD_VAR 0 8
11243: PLUS
11244: ARRAY
11245: IFFALSE 11271
// tmp := tmp & ( 100 + i ) & ; ;
11247: LD_ADDR_VAR 0 3
11251: PUSH
11252: LD_VAR 0 3
11256: PUSH
11257: LD_INT 100
11259: PUSH
11260: LD_VAR 0 8
11264: PLUS
11265: STR
11266: PUSH
11267: LD_STRING ;
11269: STR
11270: ST_TO_ADDR
// end ;
11271: GO 11226
11273: POP
11274: POP
// if tmp then
11275: LD_VAR 0 3
11279: IFFALSE 11291
// active := tmp ;
11281: LD_ADDR_VAR 0 7
11285: PUSH
11286: LD_VAR 0 3
11290: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11291: LD_STRING getStreamItemsFromMission("
11293: PUSH
11294: LD_VAR 0 5
11298: STR
11299: PUSH
11300: LD_STRING ","
11302: STR
11303: PUSH
11304: LD_VAR 0 6
11308: STR
11309: PUSH
11310: LD_STRING ","
11312: STR
11313: PUSH
11314: LD_VAR 0 7
11318: STR
11319: PUSH
11320: LD_STRING ")
11322: STR
11323: PPUSH
11324: CALL_OW 559
// end else
11328: GO 11337
// ToLua ( getStreamItemsFromMission("","","") ) ;
11330: LD_STRING getStreamItemsFromMission("","","")
11332: PPUSH
11333: CALL_OW 559
// end ;
11337: LD_VAR 0 2
11341: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11342: LD_EXP 24
11346: PUSH
11347: LD_EXP 29
11351: AND
11352: IFFALSE 11476
11354: GO 11356
11356: DISABLE
11357: LD_INT 0
11359: PPUSH
11360: PPUSH
// begin enable ;
11361: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11362: LD_ADDR_VAR 0 2
11366: PUSH
11367: LD_INT 22
11369: PUSH
11370: LD_OWVAR 2
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: LD_INT 2
11381: PUSH
11382: LD_INT 34
11384: PUSH
11385: LD_INT 7
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 34
11394: PUSH
11395: LD_INT 45
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 34
11404: PUSH
11405: LD_INT 28
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 34
11414: PUSH
11415: LD_INT 47
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PPUSH
11433: CALL_OW 69
11437: ST_TO_ADDR
// if not tmp then
11438: LD_VAR 0 2
11442: NOT
11443: IFFALSE 11447
// exit ;
11445: GO 11476
// for i in tmp do
11447: LD_ADDR_VAR 0 1
11451: PUSH
11452: LD_VAR 0 2
11456: PUSH
11457: FOR_IN
11458: IFFALSE 11474
// begin SetLives ( i , 0 ) ;
11460: LD_VAR 0 1
11464: PPUSH
11465: LD_INT 0
11467: PPUSH
11468: CALL_OW 234
// end ;
11472: GO 11457
11474: POP
11475: POP
// end ;
11476: PPOPN 2
11478: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11479: LD_EXP 24
11483: PUSH
11484: LD_EXP 30
11488: AND
11489: IFFALSE 11573
11491: GO 11493
11493: DISABLE
11494: LD_INT 0
11496: PPUSH
11497: PPUSH
// begin enable ;
11498: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11499: LD_ADDR_VAR 0 2
11503: PUSH
11504: LD_INT 22
11506: PUSH
11507: LD_OWVAR 2
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 32
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 69
11534: ST_TO_ADDR
// if not tmp then
11535: LD_VAR 0 2
11539: NOT
11540: IFFALSE 11544
// exit ;
11542: GO 11573
// for i in tmp do
11544: LD_ADDR_VAR 0 1
11548: PUSH
11549: LD_VAR 0 2
11553: PUSH
11554: FOR_IN
11555: IFFALSE 11571
// begin SetLives ( i , 0 ) ;
11557: LD_VAR 0 1
11561: PPUSH
11562: LD_INT 0
11564: PPUSH
11565: CALL_OW 234
// end ;
11569: GO 11554
11571: POP
11572: POP
// end ;
11573: PPOPN 2
11575: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11576: LD_EXP 24
11580: PUSH
11581: LD_EXP 27
11585: AND
11586: IFFALSE 11679
11588: GO 11590
11590: DISABLE
11591: LD_INT 0
11593: PPUSH
// begin enable ;
11594: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: LD_INT 22
11602: PUSH
11603: LD_OWVAR 2
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 2
11614: PUSH
11615: LD_INT 25
11617: PUSH
11618: LD_INT 5
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 25
11627: PUSH
11628: LD_INT 9
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 25
11637: PUSH
11638: LD_INT 8
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PPUSH
11655: CALL_OW 69
11659: PUSH
11660: FOR_IN
11661: IFFALSE 11677
// begin SetClass ( i , 1 ) ;
11663: LD_VAR 0 1
11667: PPUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 336
// end ;
11675: GO 11660
11677: POP
11678: POP
// end ;
11679: PPOPN 1
11681: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11682: LD_EXP 24
11686: PUSH
11687: LD_EXP 28
11691: AND
11692: PUSH
11693: LD_OWVAR 65
11697: PUSH
11698: LD_INT 7
11700: LESS
11701: AND
11702: IFFALSE 11716
11704: GO 11706
11706: DISABLE
// begin enable ;
11707: ENABLE
// game_speed := 7 ;
11708: LD_ADDR_OWVAR 65
11712: PUSH
11713: LD_INT 7
11715: ST_TO_ADDR
// end ;
11716: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11717: LD_EXP 24
11721: PUSH
11722: LD_EXP 31
11726: AND
11727: IFFALSE 11929
11729: GO 11731
11731: DISABLE
11732: LD_INT 0
11734: PPUSH
11735: PPUSH
11736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11737: LD_ADDR_VAR 0 3
11741: PUSH
11742: LD_INT 81
11744: PUSH
11745: LD_OWVAR 2
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 21
11756: PUSH
11757: LD_INT 1
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PPUSH
11768: CALL_OW 69
11772: ST_TO_ADDR
// if not tmp then
11773: LD_VAR 0 3
11777: NOT
11778: IFFALSE 11782
// exit ;
11780: GO 11929
// if tmp > 5 then
11782: LD_VAR 0 3
11786: PUSH
11787: LD_INT 5
11789: GREATER
11790: IFFALSE 11802
// k := 5 else
11792: LD_ADDR_VAR 0 2
11796: PUSH
11797: LD_INT 5
11799: ST_TO_ADDR
11800: GO 11812
// k := tmp ;
11802: LD_ADDR_VAR 0 2
11806: PUSH
11807: LD_VAR 0 3
11811: ST_TO_ADDR
// for i := 1 to k do
11812: LD_ADDR_VAR 0 1
11816: PUSH
11817: DOUBLE
11818: LD_INT 1
11820: DEC
11821: ST_TO_ADDR
11822: LD_VAR 0 2
11826: PUSH
11827: FOR_TO
11828: IFFALSE 11927
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11830: LD_VAR 0 3
11834: PUSH
11835: LD_VAR 0 1
11839: ARRAY
11840: PPUSH
11841: LD_VAR 0 1
11845: PUSH
11846: LD_INT 4
11848: MOD
11849: PUSH
11850: LD_INT 1
11852: PLUS
11853: PPUSH
11854: CALL_OW 259
11858: PUSH
11859: LD_INT 10
11861: LESS
11862: IFFALSE 11925
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11864: LD_VAR 0 3
11868: PUSH
11869: LD_VAR 0 1
11873: ARRAY
11874: PPUSH
11875: LD_VAR 0 1
11879: PUSH
11880: LD_INT 4
11882: MOD
11883: PUSH
11884: LD_INT 1
11886: PLUS
11887: PPUSH
11888: LD_VAR 0 3
11892: PUSH
11893: LD_VAR 0 1
11897: ARRAY
11898: PPUSH
11899: LD_VAR 0 1
11903: PUSH
11904: LD_INT 4
11906: MOD
11907: PUSH
11908: LD_INT 1
11910: PLUS
11911: PPUSH
11912: CALL_OW 259
11916: PUSH
11917: LD_INT 1
11919: PLUS
11920: PPUSH
11921: CALL_OW 237
11925: GO 11827
11927: POP
11928: POP
// end ;
11929: PPOPN 3
11931: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11932: LD_EXP 24
11936: PUSH
11937: LD_EXP 32
11941: AND
11942: IFFALSE 11962
11944: GO 11946
11946: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11947: LD_INT 4
11949: PPUSH
11950: LD_OWVAR 2
11954: PPUSH
11955: LD_INT 0
11957: PPUSH
11958: CALL_OW 324
11962: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11963: LD_EXP 24
11967: PUSH
11968: LD_EXP 61
11972: AND
11973: IFFALSE 11993
11975: GO 11977
11977: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11978: LD_INT 19
11980: PPUSH
11981: LD_OWVAR 2
11985: PPUSH
11986: LD_INT 0
11988: PPUSH
11989: CALL_OW 324
11993: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11994: LD_EXP 24
11998: PUSH
11999: LD_EXP 33
12003: AND
12004: IFFALSE 12106
12006: GO 12008
12008: DISABLE
12009: LD_INT 0
12011: PPUSH
12012: PPUSH
// begin enable ;
12013: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12014: LD_ADDR_VAR 0 2
12018: PUSH
12019: LD_INT 22
12021: PUSH
12022: LD_OWVAR 2
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 2
12033: PUSH
12034: LD_INT 34
12036: PUSH
12037: LD_INT 11
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 34
12046: PUSH
12047: LD_INT 30
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PPUSH
12063: CALL_OW 69
12067: ST_TO_ADDR
// if not tmp then
12068: LD_VAR 0 2
12072: NOT
12073: IFFALSE 12077
// exit ;
12075: GO 12106
// for i in tmp do
12077: LD_ADDR_VAR 0 1
12081: PUSH
12082: LD_VAR 0 2
12086: PUSH
12087: FOR_IN
12088: IFFALSE 12104
// begin SetLives ( i , 0 ) ;
12090: LD_VAR 0 1
12094: PPUSH
12095: LD_INT 0
12097: PPUSH
12098: CALL_OW 234
// end ;
12102: GO 12087
12104: POP
12105: POP
// end ;
12106: PPOPN 2
12108: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12109: LD_EXP 24
12113: PUSH
12114: LD_EXP 34
12118: AND
12119: IFFALSE 12139
12121: GO 12123
12123: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12124: LD_INT 32
12126: PPUSH
12127: LD_OWVAR 2
12131: PPUSH
12132: LD_INT 0
12134: PPUSH
12135: CALL_OW 324
12139: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12140: LD_EXP 24
12144: PUSH
12145: LD_EXP 35
12149: AND
12150: IFFALSE 12331
12152: GO 12154
12154: DISABLE
12155: LD_INT 0
12157: PPUSH
12158: PPUSH
12159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12160: LD_ADDR_VAR 0 2
12164: PUSH
12165: LD_INT 22
12167: PUSH
12168: LD_OWVAR 2
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 33
12179: PUSH
12180: LD_INT 3
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PPUSH
12191: CALL_OW 69
12195: ST_TO_ADDR
// if not tmp then
12196: LD_VAR 0 2
12200: NOT
12201: IFFALSE 12205
// exit ;
12203: GO 12331
// side := 0 ;
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_INT 0
12212: ST_TO_ADDR
// for i := 1 to 8 do
12213: LD_ADDR_VAR 0 1
12217: PUSH
12218: DOUBLE
12219: LD_INT 1
12221: DEC
12222: ST_TO_ADDR
12223: LD_INT 8
12225: PUSH
12226: FOR_TO
12227: IFFALSE 12275
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12229: LD_OWVAR 2
12233: PUSH
12234: LD_VAR 0 1
12238: NONEQUAL
12239: PUSH
12240: LD_OWVAR 2
12244: PPUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 81
12254: PUSH
12255: LD_INT 2
12257: EQUAL
12258: AND
12259: IFFALSE 12273
// begin side := i ;
12261: LD_ADDR_VAR 0 3
12265: PUSH
12266: LD_VAR 0 1
12270: ST_TO_ADDR
// break ;
12271: GO 12275
// end ;
12273: GO 12226
12275: POP
12276: POP
// if not side then
12277: LD_VAR 0 3
12281: NOT
12282: IFFALSE 12286
// exit ;
12284: GO 12331
// for i := 1 to tmp do
12286: LD_ADDR_VAR 0 1
12290: PUSH
12291: DOUBLE
12292: LD_INT 1
12294: DEC
12295: ST_TO_ADDR
12296: LD_VAR 0 2
12300: PUSH
12301: FOR_TO
12302: IFFALSE 12329
// if Prob ( 60 ) then
12304: LD_INT 60
12306: PPUSH
12307: CALL_OW 13
12311: IFFALSE 12327
// SetSide ( i , side ) ;
12313: LD_VAR 0 1
12317: PPUSH
12318: LD_VAR 0 3
12322: PPUSH
12323: CALL_OW 235
12327: GO 12301
12329: POP
12330: POP
// end ;
12331: PPOPN 3
12333: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12334: LD_EXP 24
12338: PUSH
12339: LD_EXP 37
12343: AND
12344: IFFALSE 12463
12346: GO 12348
12348: DISABLE
12349: LD_INT 0
12351: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12352: LD_ADDR_VAR 0 1
12356: PUSH
12357: LD_INT 22
12359: PUSH
12360: LD_OWVAR 2
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 21
12371: PUSH
12372: LD_INT 1
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: LD_INT 3
12381: PUSH
12382: LD_INT 23
12384: PUSH
12385: LD_INT 0
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 69
12405: PUSH
12406: FOR_IN
12407: IFFALSE 12461
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12409: LD_VAR 0 1
12413: PPUSH
12414: CALL_OW 257
12418: PUSH
12419: LD_INT 1
12421: PUSH
12422: LD_INT 2
12424: PUSH
12425: LD_INT 3
12427: PUSH
12428: LD_INT 4
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: IN
12437: IFFALSE 12459
// SetClass ( un , rand ( 1 , 4 ) ) ;
12439: LD_VAR 0 1
12443: PPUSH
12444: LD_INT 1
12446: PPUSH
12447: LD_INT 4
12449: PPUSH
12450: CALL_OW 12
12454: PPUSH
12455: CALL_OW 336
12459: GO 12406
12461: POP
12462: POP
// end ;
12463: PPOPN 1
12465: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12466: LD_EXP 24
12470: PUSH
12471: LD_EXP 36
12475: AND
12476: IFFALSE 12555
12478: GO 12480
12480: DISABLE
12481: LD_INT 0
12483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12484: LD_ADDR_VAR 0 1
12488: PUSH
12489: LD_INT 22
12491: PUSH
12492: LD_OWVAR 2
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 21
12503: PUSH
12504: LD_INT 3
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PPUSH
12515: CALL_OW 69
12519: ST_TO_ADDR
// if not tmp then
12520: LD_VAR 0 1
12524: NOT
12525: IFFALSE 12529
// exit ;
12527: GO 12555
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12529: LD_VAR 0 1
12533: PUSH
12534: LD_INT 1
12536: PPUSH
12537: LD_VAR 0 1
12541: PPUSH
12542: CALL_OW 12
12546: ARRAY
12547: PPUSH
12548: LD_INT 100
12550: PPUSH
12551: CALL_OW 234
// end ;
12555: PPOPN 1
12557: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12558: LD_EXP 24
12562: PUSH
12563: LD_EXP 38
12567: AND
12568: IFFALSE 12666
12570: GO 12572
12572: DISABLE
12573: LD_INT 0
12575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12576: LD_ADDR_VAR 0 1
12580: PUSH
12581: LD_INT 22
12583: PUSH
12584: LD_OWVAR 2
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 21
12595: PUSH
12596: LD_INT 1
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PPUSH
12607: CALL_OW 69
12611: ST_TO_ADDR
// if not tmp then
12612: LD_VAR 0 1
12616: NOT
12617: IFFALSE 12621
// exit ;
12619: GO 12666
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12621: LD_VAR 0 1
12625: PUSH
12626: LD_INT 1
12628: PPUSH
12629: LD_VAR 0 1
12633: PPUSH
12634: CALL_OW 12
12638: ARRAY
12639: PPUSH
12640: LD_INT 1
12642: PPUSH
12643: LD_INT 4
12645: PPUSH
12646: CALL_OW 12
12650: PPUSH
12651: LD_INT 3000
12653: PPUSH
12654: LD_INT 9000
12656: PPUSH
12657: CALL_OW 12
12661: PPUSH
12662: CALL_OW 492
// end ;
12666: PPOPN 1
12668: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12669: LD_EXP 24
12673: PUSH
12674: LD_EXP 39
12678: AND
12679: IFFALSE 12699
12681: GO 12683
12683: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12684: LD_INT 1
12686: PPUSH
12687: LD_OWVAR 2
12691: PPUSH
12692: LD_INT 0
12694: PPUSH
12695: CALL_OW 324
12699: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12700: LD_EXP 24
12704: PUSH
12705: LD_EXP 40
12709: AND
12710: IFFALSE 12793
12712: GO 12714
12714: DISABLE
12715: LD_INT 0
12717: PPUSH
12718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12719: LD_ADDR_VAR 0 2
12723: PUSH
12724: LD_INT 22
12726: PUSH
12727: LD_OWVAR 2
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 21
12738: PUSH
12739: LD_INT 3
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PPUSH
12750: CALL_OW 69
12754: ST_TO_ADDR
// if not tmp then
12755: LD_VAR 0 2
12759: NOT
12760: IFFALSE 12764
// exit ;
12762: GO 12793
// for i in tmp do
12764: LD_ADDR_VAR 0 1
12768: PUSH
12769: LD_VAR 0 2
12773: PUSH
12774: FOR_IN
12775: IFFALSE 12791
// SetBLevel ( i , 10 ) ;
12777: LD_VAR 0 1
12781: PPUSH
12782: LD_INT 10
12784: PPUSH
12785: CALL_OW 241
12789: GO 12774
12791: POP
12792: POP
// end ;
12793: PPOPN 2
12795: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12796: LD_EXP 24
12800: PUSH
12801: LD_EXP 41
12805: AND
12806: IFFALSE 12917
12808: GO 12810
12810: DISABLE
12811: LD_INT 0
12813: PPUSH
12814: PPUSH
12815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12816: LD_ADDR_VAR 0 3
12820: PUSH
12821: LD_INT 22
12823: PUSH
12824: LD_OWVAR 2
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 25
12835: PUSH
12836: LD_INT 1
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PPUSH
12847: CALL_OW 69
12851: ST_TO_ADDR
// if not tmp then
12852: LD_VAR 0 3
12856: NOT
12857: IFFALSE 12861
// exit ;
12859: GO 12917
// un := tmp [ rand ( 1 , tmp ) ] ;
12861: LD_ADDR_VAR 0 2
12865: PUSH
12866: LD_VAR 0 3
12870: PUSH
12871: LD_INT 1
12873: PPUSH
12874: LD_VAR 0 3
12878: PPUSH
12879: CALL_OW 12
12883: ARRAY
12884: ST_TO_ADDR
// if Crawls ( un ) then
12885: LD_VAR 0 2
12889: PPUSH
12890: CALL_OW 318
12894: IFFALSE 12905
// ComWalk ( un ) ;
12896: LD_VAR 0 2
12900: PPUSH
12901: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12905: LD_VAR 0 2
12909: PPUSH
12910: LD_INT 5
12912: PPUSH
12913: CALL_OW 336
// end ;
12917: PPOPN 3
12919: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12920: LD_EXP 24
12924: PUSH
12925: LD_EXP 42
12929: AND
12930: PUSH
12931: LD_OWVAR 67
12935: PUSH
12936: LD_INT 4
12938: LESS
12939: AND
12940: IFFALSE 12959
12942: GO 12944
12944: DISABLE
// begin Difficulty := Difficulty + 1 ;
12945: LD_ADDR_OWVAR 67
12949: PUSH
12950: LD_OWVAR 67
12954: PUSH
12955: LD_INT 1
12957: PLUS
12958: ST_TO_ADDR
// end ;
12959: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12960: LD_EXP 24
12964: PUSH
12965: LD_EXP 43
12969: AND
12970: IFFALSE 13073
12972: GO 12974
12974: DISABLE
12975: LD_INT 0
12977: PPUSH
// begin for i := 1 to 5 do
12978: LD_ADDR_VAR 0 1
12982: PUSH
12983: DOUBLE
12984: LD_INT 1
12986: DEC
12987: ST_TO_ADDR
12988: LD_INT 5
12990: PUSH
12991: FOR_TO
12992: IFFALSE 13071
// begin uc_nation := nation_nature ;
12994: LD_ADDR_OWVAR 21
12998: PUSH
12999: LD_INT 0
13001: ST_TO_ADDR
// uc_side := 0 ;
13002: LD_ADDR_OWVAR 20
13006: PUSH
13007: LD_INT 0
13009: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13010: LD_ADDR_OWVAR 29
13014: PUSH
13015: LD_INT 12
13017: PUSH
13018: LD_INT 12
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: ST_TO_ADDR
// hc_agressivity := 20 ;
13025: LD_ADDR_OWVAR 35
13029: PUSH
13030: LD_INT 20
13032: ST_TO_ADDR
// hc_class := class_tiger ;
13033: LD_ADDR_OWVAR 28
13037: PUSH
13038: LD_INT 14
13040: ST_TO_ADDR
// hc_gallery :=  ;
13041: LD_ADDR_OWVAR 33
13045: PUSH
13046: LD_STRING 
13048: ST_TO_ADDR
// hc_name :=  ;
13049: LD_ADDR_OWVAR 26
13053: PUSH
13054: LD_STRING 
13056: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13057: CALL_OW 44
13061: PPUSH
13062: LD_INT 0
13064: PPUSH
13065: CALL_OW 51
// end ;
13069: GO 12991
13071: POP
13072: POP
// end ;
13073: PPOPN 1
13075: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13076: LD_EXP 24
13080: PUSH
13081: LD_EXP 44
13085: AND
13086: IFFALSE 13095
13088: GO 13090
13090: DISABLE
// StreamSibBomb ;
13091: CALL 13096 0 0
13095: END
// export function StreamSibBomb ; var i , x , y ; begin
13096: LD_INT 0
13098: PPUSH
13099: PPUSH
13100: PPUSH
13101: PPUSH
// result := false ;
13102: LD_ADDR_VAR 0 1
13106: PUSH
13107: LD_INT 0
13109: ST_TO_ADDR
// for i := 1 to 16 do
13110: LD_ADDR_VAR 0 2
13114: PUSH
13115: DOUBLE
13116: LD_INT 1
13118: DEC
13119: ST_TO_ADDR
13120: LD_INT 16
13122: PUSH
13123: FOR_TO
13124: IFFALSE 13323
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13126: LD_ADDR_VAR 0 3
13130: PUSH
13131: LD_INT 10
13133: PUSH
13134: LD_INT 20
13136: PUSH
13137: LD_INT 30
13139: PUSH
13140: LD_INT 40
13142: PUSH
13143: LD_INT 50
13145: PUSH
13146: LD_INT 60
13148: PUSH
13149: LD_INT 70
13151: PUSH
13152: LD_INT 80
13154: PUSH
13155: LD_INT 90
13157: PUSH
13158: LD_INT 100
13160: PUSH
13161: LD_INT 110
13163: PUSH
13164: LD_INT 120
13166: PUSH
13167: LD_INT 130
13169: PUSH
13170: LD_INT 140
13172: PUSH
13173: LD_INT 150
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 1
13195: PPUSH
13196: LD_INT 15
13198: PPUSH
13199: CALL_OW 12
13203: ARRAY
13204: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13205: LD_ADDR_VAR 0 4
13209: PUSH
13210: LD_INT 10
13212: PUSH
13213: LD_INT 20
13215: PUSH
13216: LD_INT 30
13218: PUSH
13219: LD_INT 40
13221: PUSH
13222: LD_INT 50
13224: PUSH
13225: LD_INT 60
13227: PUSH
13228: LD_INT 70
13230: PUSH
13231: LD_INT 80
13233: PUSH
13234: LD_INT 90
13236: PUSH
13237: LD_INT 100
13239: PUSH
13240: LD_INT 110
13242: PUSH
13243: LD_INT 120
13245: PUSH
13246: LD_INT 130
13248: PUSH
13249: LD_INT 140
13251: PUSH
13252: LD_INT 150
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 1
13274: PPUSH
13275: LD_INT 15
13277: PPUSH
13278: CALL_OW 12
13282: ARRAY
13283: ST_TO_ADDR
// if ValidHex ( x , y ) then
13284: LD_VAR 0 3
13288: PPUSH
13289: LD_VAR 0 4
13293: PPUSH
13294: CALL_OW 488
13298: IFFALSE 13321
// begin result := [ x , y ] ;
13300: LD_ADDR_VAR 0 1
13304: PUSH
13305: LD_VAR 0 3
13309: PUSH
13310: LD_VAR 0 4
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: ST_TO_ADDR
// break ;
13319: GO 13323
// end ; end ;
13321: GO 13123
13323: POP
13324: POP
// if result then
13325: LD_VAR 0 1
13329: IFFALSE 13389
// begin ToLua ( playSibBomb() ) ;
13331: LD_STRING playSibBomb()
13333: PPUSH
13334: CALL_OW 559
// wait ( 0 0$14 ) ;
13338: LD_INT 490
13340: PPUSH
13341: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13345: LD_VAR 0 1
13349: PUSH
13350: LD_INT 1
13352: ARRAY
13353: PPUSH
13354: LD_VAR 0 1
13358: PUSH
13359: LD_INT 2
13361: ARRAY
13362: PPUSH
13363: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13367: LD_VAR 0 1
13371: PUSH
13372: LD_INT 1
13374: ARRAY
13375: PPUSH
13376: LD_VAR 0 1
13380: PUSH
13381: LD_INT 2
13383: ARRAY
13384: PPUSH
13385: CALL_OW 429
// end ; end ;
13389: LD_VAR 0 1
13393: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13394: LD_EXP 24
13398: PUSH
13399: LD_EXP 46
13403: AND
13404: IFFALSE 13416
13406: GO 13408
13408: DISABLE
// YouLost (  ) ;
13409: LD_STRING 
13411: PPUSH
13412: CALL_OW 104
13416: END
// every 0 0$1 trigger StreamModeActive and sFog do
13417: LD_EXP 24
13421: PUSH
13422: LD_EXP 45
13426: AND
13427: IFFALSE 13441
13429: GO 13431
13431: DISABLE
// FogOff ( your_side ) ;
13432: LD_OWVAR 2
13436: PPUSH
13437: CALL_OW 344
13441: END
// every 0 0$1 trigger StreamModeActive and sSun do
13442: LD_EXP 24
13446: PUSH
13447: LD_EXP 47
13451: AND
13452: IFFALSE 13480
13454: GO 13456
13456: DISABLE
// begin solar_recharge_percent := 0 ;
13457: LD_ADDR_OWVAR 79
13461: PUSH
13462: LD_INT 0
13464: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13465: LD_INT 10500
13467: PPUSH
13468: CALL_OW 67
// solar_recharge_percent := 100 ;
13472: LD_ADDR_OWVAR 79
13476: PUSH
13477: LD_INT 100
13479: ST_TO_ADDR
// end ;
13480: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13481: LD_EXP 24
13485: PUSH
13486: LD_EXP 48
13490: AND
13491: IFFALSE 13730
13493: GO 13495
13495: DISABLE
13496: LD_INT 0
13498: PPUSH
13499: PPUSH
13500: PPUSH
// begin tmp := [ ] ;
13501: LD_ADDR_VAR 0 3
13505: PUSH
13506: EMPTY
13507: ST_TO_ADDR
// for i := 1 to 6 do
13508: LD_ADDR_VAR 0 1
13512: PUSH
13513: DOUBLE
13514: LD_INT 1
13516: DEC
13517: ST_TO_ADDR
13518: LD_INT 6
13520: PUSH
13521: FOR_TO
13522: IFFALSE 13627
// begin uc_nation := nation_nature ;
13524: LD_ADDR_OWVAR 21
13528: PUSH
13529: LD_INT 0
13531: ST_TO_ADDR
// uc_side := 0 ;
13532: LD_ADDR_OWVAR 20
13536: PUSH
13537: LD_INT 0
13539: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13540: LD_ADDR_OWVAR 29
13544: PUSH
13545: LD_INT 12
13547: PUSH
13548: LD_INT 12
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: ST_TO_ADDR
// hc_agressivity := 20 ;
13555: LD_ADDR_OWVAR 35
13559: PUSH
13560: LD_INT 20
13562: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13563: LD_ADDR_OWVAR 28
13567: PUSH
13568: LD_INT 17
13570: ST_TO_ADDR
// hc_gallery :=  ;
13571: LD_ADDR_OWVAR 33
13575: PUSH
13576: LD_STRING 
13578: ST_TO_ADDR
// hc_name :=  ;
13579: LD_ADDR_OWVAR 26
13583: PUSH
13584: LD_STRING 
13586: ST_TO_ADDR
// un := CreateHuman ;
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: CALL_OW 44
13596: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13597: LD_VAR 0 2
13601: PPUSH
13602: LD_INT 1
13604: PPUSH
13605: CALL_OW 51
// tmp := tmp ^ un ;
13609: LD_ADDR_VAR 0 3
13613: PUSH
13614: LD_VAR 0 3
13618: PUSH
13619: LD_VAR 0 2
13623: ADD
13624: ST_TO_ADDR
// end ;
13625: GO 13521
13627: POP
13628: POP
// repeat wait ( 0 0$1 ) ;
13629: LD_INT 35
13631: PPUSH
13632: CALL_OW 67
// for un in tmp do
13636: LD_ADDR_VAR 0 2
13640: PUSH
13641: LD_VAR 0 3
13645: PUSH
13646: FOR_IN
13647: IFFALSE 13721
// begin if IsDead ( un ) then
13649: LD_VAR 0 2
13653: PPUSH
13654: CALL_OW 301
13658: IFFALSE 13678
// begin tmp := tmp diff un ;
13660: LD_ADDR_VAR 0 3
13664: PUSH
13665: LD_VAR 0 3
13669: PUSH
13670: LD_VAR 0 2
13674: DIFF
13675: ST_TO_ADDR
// continue ;
13676: GO 13646
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13678: LD_VAR 0 2
13682: PPUSH
13683: LD_INT 3
13685: PUSH
13686: LD_INT 22
13688: PUSH
13689: LD_INT 0
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PPUSH
13700: CALL_OW 69
13704: PPUSH
13705: LD_VAR 0 2
13709: PPUSH
13710: CALL_OW 74
13714: PPUSH
13715: CALL_OW 115
// end ;
13719: GO 13646
13721: POP
13722: POP
// until not tmp ;
13723: LD_VAR 0 3
13727: NOT
13728: IFFALSE 13629
// end ;
13730: PPOPN 3
13732: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13733: LD_EXP 24
13737: PUSH
13738: LD_EXP 49
13742: AND
13743: IFFALSE 13797
13745: GO 13747
13747: DISABLE
// begin ToLua ( displayTroll(); ) ;
13748: LD_STRING displayTroll();
13750: PPUSH
13751: CALL_OW 559
// wait ( 3 3$00 ) ;
13755: LD_INT 6300
13757: PPUSH
13758: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13762: LD_STRING hideTroll();
13764: PPUSH
13765: CALL_OW 559
// wait ( 1 1$00 ) ;
13769: LD_INT 2100
13771: PPUSH
13772: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13776: LD_STRING displayTroll();
13778: PPUSH
13779: CALL_OW 559
// wait ( 1 1$00 ) ;
13783: LD_INT 2100
13785: PPUSH
13786: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13790: LD_STRING hideTroll();
13792: PPUSH
13793: CALL_OW 559
// end ;
13797: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13798: LD_EXP 24
13802: PUSH
13803: LD_EXP 50
13807: AND
13808: IFFALSE 13871
13810: GO 13812
13812: DISABLE
13813: LD_INT 0
13815: PPUSH
// begin p := 0 ;
13816: LD_ADDR_VAR 0 1
13820: PUSH
13821: LD_INT 0
13823: ST_TO_ADDR
// repeat game_speed := 1 ;
13824: LD_ADDR_OWVAR 65
13828: PUSH
13829: LD_INT 1
13831: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13832: LD_INT 35
13834: PPUSH
13835: CALL_OW 67
// p := p + 1 ;
13839: LD_ADDR_VAR 0 1
13843: PUSH
13844: LD_VAR 0 1
13848: PUSH
13849: LD_INT 1
13851: PLUS
13852: ST_TO_ADDR
// until p >= 60 ;
13853: LD_VAR 0 1
13857: PUSH
13858: LD_INT 60
13860: GREATEREQUAL
13861: IFFALSE 13824
// game_speed := 4 ;
13863: LD_ADDR_OWVAR 65
13867: PUSH
13868: LD_INT 4
13870: ST_TO_ADDR
// end ;
13871: PPOPN 1
13873: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13874: LD_EXP 24
13878: PUSH
13879: LD_EXP 51
13883: AND
13884: IFFALSE 14030
13886: GO 13888
13888: DISABLE
13889: LD_INT 0
13891: PPUSH
13892: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13893: LD_ADDR_VAR 0 1
13897: PUSH
13898: LD_INT 22
13900: PUSH
13901: LD_OWVAR 2
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: LD_INT 30
13915: PUSH
13916: LD_INT 0
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 1
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PPUSH
13942: CALL_OW 69
13946: ST_TO_ADDR
// if not depot then
13947: LD_VAR 0 1
13951: NOT
13952: IFFALSE 13956
// exit ;
13954: GO 14030
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13956: LD_ADDR_VAR 0 2
13960: PUSH
13961: LD_VAR 0 1
13965: PUSH
13966: LD_INT 1
13968: PPUSH
13969: LD_VAR 0 1
13973: PPUSH
13974: CALL_OW 12
13978: ARRAY
13979: PPUSH
13980: CALL_OW 274
13984: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13985: LD_VAR 0 2
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: LD_INT 0
13995: PPUSH
13996: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14000: LD_VAR 0 2
14004: PPUSH
14005: LD_INT 2
14007: PPUSH
14008: LD_INT 0
14010: PPUSH
14011: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14015: LD_VAR 0 2
14019: PPUSH
14020: LD_INT 3
14022: PPUSH
14023: LD_INT 0
14025: PPUSH
14026: CALL_OW 277
// end ;
14030: PPOPN 2
14032: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14033: LD_EXP 24
14037: PUSH
14038: LD_EXP 52
14042: AND
14043: IFFALSE 14140
14045: GO 14047
14047: DISABLE
14048: LD_INT 0
14050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14051: LD_ADDR_VAR 0 1
14055: PUSH
14056: LD_INT 22
14058: PUSH
14059: LD_OWVAR 2
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 21
14070: PUSH
14071: LD_INT 1
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 3
14080: PUSH
14081: LD_INT 23
14083: PUSH
14084: LD_INT 0
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: PPUSH
14100: CALL_OW 69
14104: ST_TO_ADDR
// if not tmp then
14105: LD_VAR 0 1
14109: NOT
14110: IFFALSE 14114
// exit ;
14112: GO 14140
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14114: LD_VAR 0 1
14118: PUSH
14119: LD_INT 1
14121: PPUSH
14122: LD_VAR 0 1
14126: PPUSH
14127: CALL_OW 12
14131: ARRAY
14132: PPUSH
14133: LD_INT 200
14135: PPUSH
14136: CALL_OW 234
// end ;
14140: PPOPN 1
14142: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14143: LD_EXP 24
14147: PUSH
14148: LD_EXP 53
14152: AND
14153: IFFALSE 14232
14155: GO 14157
14157: DISABLE
14158: LD_INT 0
14160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14161: LD_ADDR_VAR 0 1
14165: PUSH
14166: LD_INT 22
14168: PUSH
14169: LD_OWVAR 2
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 21
14180: PUSH
14181: LD_INT 2
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PPUSH
14192: CALL_OW 69
14196: ST_TO_ADDR
// if not tmp then
14197: LD_VAR 0 1
14201: NOT
14202: IFFALSE 14206
// exit ;
14204: GO 14232
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14206: LD_VAR 0 1
14210: PUSH
14211: LD_INT 1
14213: PPUSH
14214: LD_VAR 0 1
14218: PPUSH
14219: CALL_OW 12
14223: ARRAY
14224: PPUSH
14225: LD_INT 60
14227: PPUSH
14228: CALL_OW 234
// end ;
14232: PPOPN 1
14234: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14235: LD_EXP 24
14239: PUSH
14240: LD_EXP 54
14244: AND
14245: IFFALSE 14344
14247: GO 14249
14249: DISABLE
14250: LD_INT 0
14252: PPUSH
14253: PPUSH
// begin enable ;
14254: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14255: LD_ADDR_VAR 0 1
14259: PUSH
14260: LD_INT 22
14262: PUSH
14263: LD_OWVAR 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 61
14274: PUSH
14275: EMPTY
14276: LIST
14277: PUSH
14278: LD_INT 33
14280: PUSH
14281: LD_INT 2
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: LIST
14292: PPUSH
14293: CALL_OW 69
14297: ST_TO_ADDR
// if not tmp then
14298: LD_VAR 0 1
14302: NOT
14303: IFFALSE 14307
// exit ;
14305: GO 14344
// for i in tmp do
14307: LD_ADDR_VAR 0 2
14311: PUSH
14312: LD_VAR 0 1
14316: PUSH
14317: FOR_IN
14318: IFFALSE 14342
// if IsControledBy ( i ) then
14320: LD_VAR 0 2
14324: PPUSH
14325: CALL_OW 312
14329: IFFALSE 14340
// ComUnlink ( i ) ;
14331: LD_VAR 0 2
14335: PPUSH
14336: CALL_OW 136
14340: GO 14317
14342: POP
14343: POP
// end ;
14344: PPOPN 2
14346: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14347: LD_EXP 24
14351: PUSH
14352: LD_EXP 55
14356: AND
14357: IFFALSE 14497
14359: GO 14361
14361: DISABLE
14362: LD_INT 0
14364: PPUSH
14365: PPUSH
// begin ToLua ( displayPowell(); ) ;
14366: LD_STRING displayPowell();
14368: PPUSH
14369: CALL_OW 559
// uc_side := 0 ;
14373: LD_ADDR_OWVAR 20
14377: PUSH
14378: LD_INT 0
14380: ST_TO_ADDR
// uc_nation := 2 ;
14381: LD_ADDR_OWVAR 21
14385: PUSH
14386: LD_INT 2
14388: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14389: LD_ADDR_OWVAR 37
14393: PUSH
14394: LD_INT 14
14396: ST_TO_ADDR
// vc_engine := engine_siberite ;
14397: LD_ADDR_OWVAR 39
14401: PUSH
14402: LD_INT 3
14404: ST_TO_ADDR
// vc_control := control_apeman ;
14405: LD_ADDR_OWVAR 38
14409: PUSH
14410: LD_INT 5
14412: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14413: LD_ADDR_OWVAR 40
14417: PUSH
14418: LD_INT 29
14420: ST_TO_ADDR
// un := CreateVehicle ;
14421: LD_ADDR_VAR 0 2
14425: PUSH
14426: CALL_OW 45
14430: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14431: LD_VAR 0 2
14435: PPUSH
14436: LD_INT 1
14438: PPUSH
14439: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14443: LD_INT 35
14445: PPUSH
14446: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14450: LD_VAR 0 2
14454: PPUSH
14455: LD_INT 22
14457: PUSH
14458: LD_OWVAR 2
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 69
14471: PPUSH
14472: LD_VAR 0 2
14476: PPUSH
14477: CALL_OW 74
14481: PPUSH
14482: CALL_OW 115
// until IsDead ( un ) ;
14486: LD_VAR 0 2
14490: PPUSH
14491: CALL_OW 301
14495: IFFALSE 14443
// end ;
14497: PPOPN 2
14499: END
// every 0 0$1 trigger StreamModeActive and sStu do
14500: LD_EXP 24
14504: PUSH
14505: LD_EXP 63
14509: AND
14510: IFFALSE 14526
14512: GO 14514
14514: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14515: LD_STRING displayStucuk();
14517: PPUSH
14518: CALL_OW 559
// ResetFog ;
14522: CALL_OW 335
// end ;
14526: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14527: LD_EXP 24
14531: PUSH
14532: LD_EXP 56
14536: AND
14537: IFFALSE 14678
14539: GO 14541
14541: DISABLE
14542: LD_INT 0
14544: PPUSH
14545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14546: LD_ADDR_VAR 0 2
14550: PUSH
14551: LD_INT 22
14553: PUSH
14554: LD_OWVAR 2
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 21
14565: PUSH
14566: LD_INT 1
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 69
14581: ST_TO_ADDR
// if not tmp then
14582: LD_VAR 0 2
14586: NOT
14587: IFFALSE 14591
// exit ;
14589: GO 14678
// un := tmp [ rand ( 1 , tmp ) ] ;
14591: LD_ADDR_VAR 0 1
14595: PUSH
14596: LD_VAR 0 2
14600: PUSH
14601: LD_INT 1
14603: PPUSH
14604: LD_VAR 0 2
14608: PPUSH
14609: CALL_OW 12
14613: ARRAY
14614: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14615: LD_VAR 0 1
14619: PPUSH
14620: LD_INT 0
14622: PPUSH
14623: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14627: LD_VAR 0 1
14631: PPUSH
14632: LD_OWVAR 3
14636: PUSH
14637: LD_VAR 0 1
14641: DIFF
14642: PPUSH
14643: LD_VAR 0 1
14647: PPUSH
14648: CALL_OW 74
14652: PPUSH
14653: CALL_OW 115
// wait ( 0 0$20 ) ;
14657: LD_INT 700
14659: PPUSH
14660: CALL_OW 67
// SetSide ( un , your_side ) ;
14664: LD_VAR 0 1
14668: PPUSH
14669: LD_OWVAR 2
14673: PPUSH
14674: CALL_OW 235
// end ;
14678: PPOPN 2
14680: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14681: LD_EXP 24
14685: PUSH
14686: LD_EXP 57
14690: AND
14691: IFFALSE 14797
14693: GO 14695
14695: DISABLE
14696: LD_INT 0
14698: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14699: LD_ADDR_VAR 0 1
14703: PUSH
14704: LD_INT 22
14706: PUSH
14707: LD_OWVAR 2
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 2
14718: PUSH
14719: LD_INT 30
14721: PUSH
14722: LD_INT 0
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 1
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PPUSH
14748: CALL_OW 69
14752: ST_TO_ADDR
// if not depot then
14753: LD_VAR 0 1
14757: NOT
14758: IFFALSE 14762
// exit ;
14760: GO 14797
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14762: LD_VAR 0 1
14766: PUSH
14767: LD_INT 1
14769: ARRAY
14770: PPUSH
14771: CALL_OW 250
14775: PPUSH
14776: LD_VAR 0 1
14780: PUSH
14781: LD_INT 1
14783: ARRAY
14784: PPUSH
14785: CALL_OW 251
14789: PPUSH
14790: LD_INT 70
14792: PPUSH
14793: CALL_OW 495
// end ;
14797: PPOPN 1
14799: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14800: LD_EXP 24
14804: PUSH
14805: LD_EXP 58
14809: AND
14810: IFFALSE 15021
14812: GO 14814
14814: DISABLE
14815: LD_INT 0
14817: PPUSH
14818: PPUSH
14819: PPUSH
14820: PPUSH
14821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14822: LD_ADDR_VAR 0 5
14826: PUSH
14827: LD_INT 22
14829: PUSH
14830: LD_OWVAR 2
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 21
14841: PUSH
14842: LD_INT 1
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PPUSH
14853: CALL_OW 69
14857: ST_TO_ADDR
// if not tmp then
14858: LD_VAR 0 5
14862: NOT
14863: IFFALSE 14867
// exit ;
14865: GO 15021
// for i in tmp do
14867: LD_ADDR_VAR 0 1
14871: PUSH
14872: LD_VAR 0 5
14876: PUSH
14877: FOR_IN
14878: IFFALSE 15019
// begin d := rand ( 0 , 5 ) ;
14880: LD_ADDR_VAR 0 4
14884: PUSH
14885: LD_INT 0
14887: PPUSH
14888: LD_INT 5
14890: PPUSH
14891: CALL_OW 12
14895: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14896: LD_ADDR_VAR 0 2
14900: PUSH
14901: LD_VAR 0 1
14905: PPUSH
14906: CALL_OW 250
14910: PPUSH
14911: LD_VAR 0 4
14915: PPUSH
14916: LD_INT 3
14918: PPUSH
14919: LD_INT 12
14921: PPUSH
14922: CALL_OW 12
14926: PPUSH
14927: CALL_OW 272
14931: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14932: LD_ADDR_VAR 0 3
14936: PUSH
14937: LD_VAR 0 1
14941: PPUSH
14942: CALL_OW 251
14946: PPUSH
14947: LD_VAR 0 4
14951: PPUSH
14952: LD_INT 3
14954: PPUSH
14955: LD_INT 12
14957: PPUSH
14958: CALL_OW 12
14962: PPUSH
14963: CALL_OW 273
14967: ST_TO_ADDR
// if ValidHex ( x , y ) then
14968: LD_VAR 0 2
14972: PPUSH
14973: LD_VAR 0 3
14977: PPUSH
14978: CALL_OW 488
14982: IFFALSE 15017
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14984: LD_VAR 0 1
14988: PPUSH
14989: LD_VAR 0 2
14993: PPUSH
14994: LD_VAR 0 3
14998: PPUSH
14999: LD_INT 3
15001: PPUSH
15002: LD_INT 6
15004: PPUSH
15005: CALL_OW 12
15009: PPUSH
15010: LD_INT 1
15012: PPUSH
15013: CALL_OW 483
// end ;
15017: GO 14877
15019: POP
15020: POP
// end ;
15021: PPOPN 5
15023: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15024: LD_EXP 24
15028: PUSH
15029: LD_EXP 59
15033: AND
15034: IFFALSE 15128
15036: GO 15038
15038: DISABLE
15039: LD_INT 0
15041: PPUSH
15042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15043: LD_ADDR_VAR 0 2
15047: PUSH
15048: LD_INT 22
15050: PUSH
15051: LD_OWVAR 2
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 32
15062: PUSH
15063: LD_INT 1
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 21
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: LIST
15084: PPUSH
15085: CALL_OW 69
15089: ST_TO_ADDR
// if not tmp then
15090: LD_VAR 0 2
15094: NOT
15095: IFFALSE 15099
// exit ;
15097: GO 15128
// for i in tmp do
15099: LD_ADDR_VAR 0 1
15103: PUSH
15104: LD_VAR 0 2
15108: PUSH
15109: FOR_IN
15110: IFFALSE 15126
// SetFuel ( i , 0 ) ;
15112: LD_VAR 0 1
15116: PPUSH
15117: LD_INT 0
15119: PPUSH
15120: CALL_OW 240
15124: GO 15109
15126: POP
15127: POP
// end ;
15128: PPOPN 2
15130: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15131: LD_EXP 24
15135: PUSH
15136: LD_EXP 60
15140: AND
15141: IFFALSE 15207
15143: GO 15145
15145: DISABLE
15146: LD_INT 0
15148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15149: LD_ADDR_VAR 0 1
15153: PUSH
15154: LD_INT 22
15156: PUSH
15157: LD_OWVAR 2
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: LD_INT 30
15168: PUSH
15169: LD_INT 29
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PPUSH
15180: CALL_OW 69
15184: ST_TO_ADDR
// if not tmp then
15185: LD_VAR 0 1
15189: NOT
15190: IFFALSE 15194
// exit ;
15192: GO 15207
// DestroyUnit ( tmp [ 1 ] ) ;
15194: LD_VAR 0 1
15198: PUSH
15199: LD_INT 1
15201: ARRAY
15202: PPUSH
15203: CALL_OW 65
// end ;
15207: PPOPN 1
15209: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15210: LD_EXP 24
15214: PUSH
15215: LD_EXP 62
15219: AND
15220: IFFALSE 15349
15222: GO 15224
15224: DISABLE
15225: LD_INT 0
15227: PPUSH
// begin uc_side := 0 ;
15228: LD_ADDR_OWVAR 20
15232: PUSH
15233: LD_INT 0
15235: ST_TO_ADDR
// uc_nation := nation_arabian ;
15236: LD_ADDR_OWVAR 21
15240: PUSH
15241: LD_INT 2
15243: ST_TO_ADDR
// hc_gallery :=  ;
15244: LD_ADDR_OWVAR 33
15248: PUSH
15249: LD_STRING 
15251: ST_TO_ADDR
// hc_name :=  ;
15252: LD_ADDR_OWVAR 26
15256: PUSH
15257: LD_STRING 
15259: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15260: LD_INT 1
15262: PPUSH
15263: LD_INT 11
15265: PPUSH
15266: LD_INT 10
15268: PPUSH
15269: CALL_OW 380
// un := CreateHuman ;
15273: LD_ADDR_VAR 0 1
15277: PUSH
15278: CALL_OW 44
15282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15283: LD_VAR 0 1
15287: PPUSH
15288: LD_INT 1
15290: PPUSH
15291: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15295: LD_INT 35
15297: PPUSH
15298: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 22
15309: PUSH
15310: LD_OWVAR 2
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PPUSH
15319: CALL_OW 69
15323: PPUSH
15324: LD_VAR 0 1
15328: PPUSH
15329: CALL_OW 74
15333: PPUSH
15334: CALL_OW 115
// until IsDead ( un ) ;
15338: LD_VAR 0 1
15342: PPUSH
15343: CALL_OW 301
15347: IFFALSE 15295
// end ;
15349: PPOPN 1
15351: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15352: LD_EXP 24
15356: PUSH
15357: LD_EXP 64
15361: AND
15362: IFFALSE 15374
15364: GO 15366
15366: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15367: LD_STRING earthquake(getX(game), 0, 32)
15369: PPUSH
15370: CALL_OW 559
15374: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15375: LD_EXP 24
15379: PUSH
15380: LD_EXP 65
15384: AND
15385: IFFALSE 15476
15387: GO 15389
15389: DISABLE
15390: LD_INT 0
15392: PPUSH
// begin enable ;
15393: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15394: LD_ADDR_VAR 0 1
15398: PUSH
15399: LD_INT 22
15401: PUSH
15402: LD_OWVAR 2
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 21
15413: PUSH
15414: LD_INT 2
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 33
15423: PUSH
15424: LD_INT 3
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: PPUSH
15436: CALL_OW 69
15440: ST_TO_ADDR
// if not tmp then
15441: LD_VAR 0 1
15445: NOT
15446: IFFALSE 15450
// exit ;
15448: GO 15476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15450: LD_VAR 0 1
15454: PUSH
15455: LD_INT 1
15457: PPUSH
15458: LD_VAR 0 1
15462: PPUSH
15463: CALL_OW 12
15467: ARRAY
15468: PPUSH
15469: LD_INT 1
15471: PPUSH
15472: CALL_OW 234
// end ;
15476: PPOPN 1
15478: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15479: LD_EXP 24
15483: PUSH
15484: LD_EXP 66
15488: AND
15489: IFFALSE 15630
15491: GO 15493
15493: DISABLE
15494: LD_INT 0
15496: PPUSH
15497: PPUSH
15498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15499: LD_ADDR_VAR 0 3
15503: PUSH
15504: LD_INT 22
15506: PUSH
15507: LD_OWVAR 2
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 25
15518: PUSH
15519: LD_INT 1
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PPUSH
15530: CALL_OW 69
15534: ST_TO_ADDR
// if not tmp then
15535: LD_VAR 0 3
15539: NOT
15540: IFFALSE 15544
// exit ;
15542: GO 15630
// un := tmp [ rand ( 1 , tmp ) ] ;
15544: LD_ADDR_VAR 0 2
15548: PUSH
15549: LD_VAR 0 3
15553: PUSH
15554: LD_INT 1
15556: PPUSH
15557: LD_VAR 0 3
15561: PPUSH
15562: CALL_OW 12
15566: ARRAY
15567: ST_TO_ADDR
// if Crawls ( un ) then
15568: LD_VAR 0 2
15572: PPUSH
15573: CALL_OW 318
15577: IFFALSE 15588
// ComWalk ( un ) ;
15579: LD_VAR 0 2
15583: PPUSH
15584: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15588: LD_VAR 0 2
15592: PPUSH
15593: LD_INT 9
15595: PPUSH
15596: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15600: LD_INT 28
15602: PPUSH
15603: LD_OWVAR 2
15607: PPUSH
15608: LD_INT 2
15610: PPUSH
15611: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15615: LD_INT 29
15617: PPUSH
15618: LD_OWVAR 2
15622: PPUSH
15623: LD_INT 2
15625: PPUSH
15626: CALL_OW 322
// end ;
15630: PPOPN 3
15632: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15633: LD_EXP 24
15637: PUSH
15638: LD_EXP 67
15642: AND
15643: IFFALSE 15754
15645: GO 15647
15647: DISABLE
15648: LD_INT 0
15650: PPUSH
15651: PPUSH
15652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15653: LD_ADDR_VAR 0 3
15657: PUSH
15658: LD_INT 22
15660: PUSH
15661: LD_OWVAR 2
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 25
15672: PUSH
15673: LD_INT 1
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: ST_TO_ADDR
// if not tmp then
15689: LD_VAR 0 3
15693: NOT
15694: IFFALSE 15698
// exit ;
15696: GO 15754
// un := tmp [ rand ( 1 , tmp ) ] ;
15698: LD_ADDR_VAR 0 2
15702: PUSH
15703: LD_VAR 0 3
15707: PUSH
15708: LD_INT 1
15710: PPUSH
15711: LD_VAR 0 3
15715: PPUSH
15716: CALL_OW 12
15720: ARRAY
15721: ST_TO_ADDR
// if Crawls ( un ) then
15722: LD_VAR 0 2
15726: PPUSH
15727: CALL_OW 318
15731: IFFALSE 15742
// ComWalk ( un ) ;
15733: LD_VAR 0 2
15737: PPUSH
15738: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15742: LD_VAR 0 2
15746: PPUSH
15747: LD_INT 8
15749: PPUSH
15750: CALL_OW 336
// end ;
15754: PPOPN 3
15756: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15757: LD_EXP 24
15761: PUSH
15762: LD_EXP 68
15766: AND
15767: IFFALSE 15911
15769: GO 15771
15771: DISABLE
15772: LD_INT 0
15774: PPUSH
15775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15776: LD_ADDR_VAR 0 2
15780: PUSH
15781: LD_INT 22
15783: PUSH
15784: LD_OWVAR 2
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 21
15795: PUSH
15796: LD_INT 2
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 2
15805: PUSH
15806: LD_INT 34
15808: PUSH
15809: LD_INT 12
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 34
15818: PUSH
15819: LD_INT 51
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 34
15828: PUSH
15829: LD_INT 32
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: ST_TO_ADDR
// if not tmp then
15852: LD_VAR 0 2
15856: NOT
15857: IFFALSE 15861
// exit ;
15859: GO 15911
// for i in tmp do
15861: LD_ADDR_VAR 0 1
15865: PUSH
15866: LD_VAR 0 2
15870: PUSH
15871: FOR_IN
15872: IFFALSE 15909
// if GetCargo ( i , mat_artifact ) = 0 then
15874: LD_VAR 0 1
15878: PPUSH
15879: LD_INT 4
15881: PPUSH
15882: CALL_OW 289
15886: PUSH
15887: LD_INT 0
15889: EQUAL
15890: IFFALSE 15907
// SetCargo ( i , mat_siberit , 100 ) ;
15892: LD_VAR 0 1
15896: PPUSH
15897: LD_INT 3
15899: PPUSH
15900: LD_INT 100
15902: PPUSH
15903: CALL_OW 290
15907: GO 15871
15909: POP
15910: POP
// end ;
15911: PPOPN 2
15913: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15914: LD_EXP 24
15918: PUSH
15919: LD_EXP 69
15923: AND
15924: IFFALSE 16107
15926: GO 15928
15928: DISABLE
15929: LD_INT 0
15931: PPUSH
15932: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15933: LD_ADDR_VAR 0 2
15937: PUSH
15938: LD_INT 22
15940: PUSH
15941: LD_OWVAR 2
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PPUSH
15950: CALL_OW 69
15954: ST_TO_ADDR
// if not tmp then
15955: LD_VAR 0 2
15959: NOT
15960: IFFALSE 15964
// exit ;
15962: GO 16107
// for i := 1 to 2 do
15964: LD_ADDR_VAR 0 1
15968: PUSH
15969: DOUBLE
15970: LD_INT 1
15972: DEC
15973: ST_TO_ADDR
15974: LD_INT 2
15976: PUSH
15977: FOR_TO
15978: IFFALSE 16105
// begin uc_side := your_side ;
15980: LD_ADDR_OWVAR 20
15984: PUSH
15985: LD_OWVAR 2
15989: ST_TO_ADDR
// uc_nation := nation_american ;
15990: LD_ADDR_OWVAR 21
15994: PUSH
15995: LD_INT 1
15997: ST_TO_ADDR
// vc_chassis := us_morphling ;
15998: LD_ADDR_OWVAR 37
16002: PUSH
16003: LD_INT 5
16005: ST_TO_ADDR
// vc_engine := engine_siberite ;
16006: LD_ADDR_OWVAR 39
16010: PUSH
16011: LD_INT 3
16013: ST_TO_ADDR
// vc_control := control_computer ;
16014: LD_ADDR_OWVAR 38
16018: PUSH
16019: LD_INT 3
16021: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16022: LD_ADDR_OWVAR 40
16026: PUSH
16027: LD_INT 10
16029: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: ARRAY
16038: PPUSH
16039: CALL_OW 310
16043: NOT
16044: IFFALSE 16091
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16046: CALL_OW 45
16050: PPUSH
16051: LD_VAR 0 2
16055: PUSH
16056: LD_INT 1
16058: ARRAY
16059: PPUSH
16060: CALL_OW 250
16064: PPUSH
16065: LD_VAR 0 2
16069: PUSH
16070: LD_INT 1
16072: ARRAY
16073: PPUSH
16074: CALL_OW 251
16078: PPUSH
16079: LD_INT 12
16081: PPUSH
16082: LD_INT 1
16084: PPUSH
16085: CALL_OW 50
16089: GO 16103
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16091: CALL_OW 45
16095: PPUSH
16096: LD_INT 1
16098: PPUSH
16099: CALL_OW 51
// end ;
16103: GO 15977
16105: POP
16106: POP
// end ;
16107: PPOPN 2
16109: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16110: LD_EXP 24
16114: PUSH
16115: LD_EXP 70
16119: AND
16120: IFFALSE 16342
16122: GO 16124
16124: DISABLE
16125: LD_INT 0
16127: PPUSH
16128: PPUSH
16129: PPUSH
16130: PPUSH
16131: PPUSH
16132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16133: LD_ADDR_VAR 0 6
16137: PUSH
16138: LD_INT 22
16140: PUSH
16141: LD_OWVAR 2
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 21
16152: PUSH
16153: LD_INT 1
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 3
16162: PUSH
16163: LD_INT 23
16165: PUSH
16166: LD_INT 0
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: ST_TO_ADDR
// if not tmp then
16187: LD_VAR 0 6
16191: NOT
16192: IFFALSE 16196
// exit ;
16194: GO 16342
// s1 := rand ( 1 , 4 ) ;
16196: LD_ADDR_VAR 0 2
16200: PUSH
16201: LD_INT 1
16203: PPUSH
16204: LD_INT 4
16206: PPUSH
16207: CALL_OW 12
16211: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16212: LD_ADDR_VAR 0 4
16216: PUSH
16217: LD_VAR 0 6
16221: PUSH
16222: LD_INT 1
16224: ARRAY
16225: PPUSH
16226: LD_VAR 0 2
16230: PPUSH
16231: CALL_OW 259
16235: ST_TO_ADDR
// if s1 = 1 then
16236: LD_VAR 0 2
16240: PUSH
16241: LD_INT 1
16243: EQUAL
16244: IFFALSE 16264
// s2 := rand ( 2 , 4 ) else
16246: LD_ADDR_VAR 0 3
16250: PUSH
16251: LD_INT 2
16253: PPUSH
16254: LD_INT 4
16256: PPUSH
16257: CALL_OW 12
16261: ST_TO_ADDR
16262: GO 16272
// s2 := 1 ;
16264: LD_ADDR_VAR 0 3
16268: PUSH
16269: LD_INT 1
16271: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16272: LD_ADDR_VAR 0 5
16276: PUSH
16277: LD_VAR 0 6
16281: PUSH
16282: LD_INT 1
16284: ARRAY
16285: PPUSH
16286: LD_VAR 0 3
16290: PPUSH
16291: CALL_OW 259
16295: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16296: LD_VAR 0 6
16300: PUSH
16301: LD_INT 1
16303: ARRAY
16304: PPUSH
16305: LD_VAR 0 2
16309: PPUSH
16310: LD_VAR 0 5
16314: PPUSH
16315: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16319: LD_VAR 0 6
16323: PUSH
16324: LD_INT 1
16326: ARRAY
16327: PPUSH
16328: LD_VAR 0 3
16332: PPUSH
16333: LD_VAR 0 4
16337: PPUSH
16338: CALL_OW 237
// end ;
16342: PPOPN 6
16344: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16345: LD_EXP 24
16349: PUSH
16350: LD_EXP 71
16354: AND
16355: IFFALSE 16434
16357: GO 16359
16359: DISABLE
16360: LD_INT 0
16362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16363: LD_ADDR_VAR 0 1
16367: PUSH
16368: LD_INT 22
16370: PUSH
16371: LD_OWVAR 2
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 30
16382: PUSH
16383: LD_INT 3
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PPUSH
16394: CALL_OW 69
16398: ST_TO_ADDR
// if not tmp then
16399: LD_VAR 0 1
16403: NOT
16404: IFFALSE 16408
// exit ;
16406: GO 16434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16408: LD_VAR 0 1
16412: PUSH
16413: LD_INT 1
16415: PPUSH
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL_OW 12
16425: ARRAY
16426: PPUSH
16427: LD_INT 1
16429: PPUSH
16430: CALL_OW 234
// end ;
16434: PPOPN 1
16436: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16437: LD_EXP 24
16441: PUSH
16442: LD_EXP 72
16446: AND
16447: IFFALSE 16559
16449: GO 16451
16451: DISABLE
16452: LD_INT 0
16454: PPUSH
16455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16456: LD_ADDR_VAR 0 2
16460: PUSH
16461: LD_INT 22
16463: PUSH
16464: LD_OWVAR 2
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 2
16475: PUSH
16476: LD_INT 30
16478: PUSH
16479: LD_INT 27
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 30
16488: PUSH
16489: LD_INT 26
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 30
16498: PUSH
16499: LD_INT 28
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PPUSH
16516: CALL_OW 69
16520: ST_TO_ADDR
// if not tmp then
16521: LD_VAR 0 2
16525: NOT
16526: IFFALSE 16530
// exit ;
16528: GO 16559
// for i in tmp do
16530: LD_ADDR_VAR 0 1
16534: PUSH
16535: LD_VAR 0 2
16539: PUSH
16540: FOR_IN
16541: IFFALSE 16557
// SetLives ( i , 1 ) ;
16543: LD_VAR 0 1
16547: PPUSH
16548: LD_INT 1
16550: PPUSH
16551: CALL_OW 234
16555: GO 16540
16557: POP
16558: POP
// end ;
16559: PPOPN 2
16561: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16562: LD_EXP 24
16566: PUSH
16567: LD_EXP 73
16571: AND
16572: IFFALSE 16859
16574: GO 16576
16576: DISABLE
16577: LD_INT 0
16579: PPUSH
16580: PPUSH
16581: PPUSH
// begin i := rand ( 1 , 7 ) ;
16582: LD_ADDR_VAR 0 1
16586: PUSH
16587: LD_INT 1
16589: PPUSH
16590: LD_INT 7
16592: PPUSH
16593: CALL_OW 12
16597: ST_TO_ADDR
// case i of 1 :
16598: LD_VAR 0 1
16602: PUSH
16603: LD_INT 1
16605: DOUBLE
16606: EQUAL
16607: IFTRUE 16611
16609: GO 16621
16611: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16612: LD_STRING earthquake(getX(game), 0, 32)
16614: PPUSH
16615: CALL_OW 559
16619: GO 16859
16621: LD_INT 2
16623: DOUBLE
16624: EQUAL
16625: IFTRUE 16629
16627: GO 16643
16629: POP
// begin ToLua ( displayStucuk(); ) ;
16630: LD_STRING displayStucuk();
16632: PPUSH
16633: CALL_OW 559
// ResetFog ;
16637: CALL_OW 335
// end ; 3 :
16641: GO 16859
16643: LD_INT 3
16645: DOUBLE
16646: EQUAL
16647: IFTRUE 16651
16649: GO 16755
16651: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16652: LD_ADDR_VAR 0 2
16656: PUSH
16657: LD_INT 22
16659: PUSH
16660: LD_OWVAR 2
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 25
16671: PUSH
16672: LD_INT 1
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PPUSH
16683: CALL_OW 69
16687: ST_TO_ADDR
// if not tmp then
16688: LD_VAR 0 2
16692: NOT
16693: IFFALSE 16697
// exit ;
16695: GO 16859
// un := tmp [ rand ( 1 , tmp ) ] ;
16697: LD_ADDR_VAR 0 3
16701: PUSH
16702: LD_VAR 0 2
16706: PUSH
16707: LD_INT 1
16709: PPUSH
16710: LD_VAR 0 2
16714: PPUSH
16715: CALL_OW 12
16719: ARRAY
16720: ST_TO_ADDR
// if Crawls ( un ) then
16721: LD_VAR 0 3
16725: PPUSH
16726: CALL_OW 318
16730: IFFALSE 16741
// ComWalk ( un ) ;
16732: LD_VAR 0 3
16736: PPUSH
16737: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16741: LD_VAR 0 3
16745: PPUSH
16746: LD_INT 8
16748: PPUSH
16749: CALL_OW 336
// end ; 4 :
16753: GO 16859
16755: LD_INT 4
16757: DOUBLE
16758: EQUAL
16759: IFTRUE 16763
16761: GO 16837
16763: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16764: LD_ADDR_VAR 0 2
16768: PUSH
16769: LD_INT 22
16771: PUSH
16772: LD_OWVAR 2
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 30
16783: PUSH
16784: LD_INT 29
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PPUSH
16795: CALL_OW 69
16799: ST_TO_ADDR
// if not tmp then
16800: LD_VAR 0 2
16804: NOT
16805: IFFALSE 16809
// exit ;
16807: GO 16859
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16809: LD_VAR 0 2
16813: PUSH
16814: LD_INT 1
16816: ARRAY
16817: PPUSH
16818: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16822: LD_VAR 0 2
16826: PUSH
16827: LD_INT 1
16829: ARRAY
16830: PPUSH
16831: CALL_OW 65
// end ; 5 .. 7 :
16835: GO 16859
16837: LD_INT 5
16839: DOUBLE
16840: GREATEREQUAL
16841: IFFALSE 16849
16843: LD_INT 7
16845: DOUBLE
16846: LESSEQUAL
16847: IFTRUE 16851
16849: GO 16858
16851: POP
// StreamSibBomb ; end ;
16852: CALL 13096 0 0
16856: GO 16859
16858: POP
// end ;
16859: PPOPN 3
16861: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16862: LD_EXP 24
16866: PUSH
16867: LD_EXP 74
16871: AND
16872: IFFALSE 17028
16874: GO 16876
16876: DISABLE
16877: LD_INT 0
16879: PPUSH
16880: PPUSH
16881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16882: LD_ADDR_VAR 0 2
16886: PUSH
16887: LD_INT 81
16889: PUSH
16890: LD_OWVAR 2
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 2
16901: PUSH
16902: LD_INT 21
16904: PUSH
16905: LD_INT 1
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 21
16914: PUSH
16915: LD_INT 2
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: LIST
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PPUSH
16931: CALL_OW 69
16935: ST_TO_ADDR
// if not tmp then
16936: LD_VAR 0 2
16940: NOT
16941: IFFALSE 16945
// exit ;
16943: GO 17028
// p := 0 ;
16945: LD_ADDR_VAR 0 3
16949: PUSH
16950: LD_INT 0
16952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16953: LD_INT 35
16955: PPUSH
16956: CALL_OW 67
// p := p + 1 ;
16960: LD_ADDR_VAR 0 3
16964: PUSH
16965: LD_VAR 0 3
16969: PUSH
16970: LD_INT 1
16972: PLUS
16973: ST_TO_ADDR
// for i in tmp do
16974: LD_ADDR_VAR 0 1
16978: PUSH
16979: LD_VAR 0 2
16983: PUSH
16984: FOR_IN
16985: IFFALSE 17016
// if GetLives ( i ) < 1000 then
16987: LD_VAR 0 1
16991: PPUSH
16992: CALL_OW 256
16996: PUSH
16997: LD_INT 1000
16999: LESS
17000: IFFALSE 17014
// SetLives ( i , 1000 ) ;
17002: LD_VAR 0 1
17006: PPUSH
17007: LD_INT 1000
17009: PPUSH
17010: CALL_OW 234
17014: GO 16984
17016: POP
17017: POP
// until p > 20 ;
17018: LD_VAR 0 3
17022: PUSH
17023: LD_INT 20
17025: GREATER
17026: IFFALSE 16953
// end ;
17028: PPOPN 3
17030: END
// every 0 0$1 trigger StreamModeActive and sTime do
17031: LD_EXP 24
17035: PUSH
17036: LD_EXP 75
17040: AND
17041: IFFALSE 17076
17043: GO 17045
17045: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17046: LD_INT 28
17048: PPUSH
17049: LD_OWVAR 2
17053: PPUSH
17054: LD_INT 2
17056: PPUSH
17057: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17061: LD_INT 30
17063: PPUSH
17064: LD_OWVAR 2
17068: PPUSH
17069: LD_INT 2
17071: PPUSH
17072: CALL_OW 322
// end ;
17076: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17077: LD_EXP 24
17081: PUSH
17082: LD_EXP 76
17086: AND
17087: IFFALSE 17208
17089: GO 17091
17091: DISABLE
17092: LD_INT 0
17094: PPUSH
17095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17096: LD_ADDR_VAR 0 2
17100: PUSH
17101: LD_INT 22
17103: PUSH
17104: LD_OWVAR 2
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 21
17115: PUSH
17116: LD_INT 1
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 3
17125: PUSH
17126: LD_INT 23
17128: PUSH
17129: LD_INT 0
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: LIST
17144: PPUSH
17145: CALL_OW 69
17149: ST_TO_ADDR
// if not tmp then
17150: LD_VAR 0 2
17154: NOT
17155: IFFALSE 17159
// exit ;
17157: GO 17208
// for i in tmp do
17159: LD_ADDR_VAR 0 1
17163: PUSH
17164: LD_VAR 0 2
17168: PUSH
17169: FOR_IN
17170: IFFALSE 17206
// begin if Crawls ( i ) then
17172: LD_VAR 0 1
17176: PPUSH
17177: CALL_OW 318
17181: IFFALSE 17192
// ComWalk ( i ) ;
17183: LD_VAR 0 1
17187: PPUSH
17188: CALL_OW 138
// SetClass ( i , 2 ) ;
17192: LD_VAR 0 1
17196: PPUSH
17197: LD_INT 2
17199: PPUSH
17200: CALL_OW 336
// end ;
17204: GO 17169
17206: POP
17207: POP
// end ;
17208: PPOPN 2
17210: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17211: LD_EXP 24
17215: PUSH
17216: LD_EXP 77
17220: AND
17221: IFFALSE 17509
17223: GO 17225
17225: DISABLE
17226: LD_INT 0
17228: PPUSH
17229: PPUSH
17230: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17231: LD_OWVAR 2
17235: PPUSH
17236: LD_INT 9
17238: PPUSH
17239: LD_INT 1
17241: PPUSH
17242: LD_INT 1
17244: PPUSH
17245: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17249: LD_INT 9
17251: PPUSH
17252: LD_OWVAR 2
17256: PPUSH
17257: CALL_OW 343
// uc_side := 9 ;
17261: LD_ADDR_OWVAR 20
17265: PUSH
17266: LD_INT 9
17268: ST_TO_ADDR
// uc_nation := 2 ;
17269: LD_ADDR_OWVAR 21
17273: PUSH
17274: LD_INT 2
17276: ST_TO_ADDR
// hc_name := Dark Warrior ;
17277: LD_ADDR_OWVAR 26
17281: PUSH
17282: LD_STRING Dark Warrior
17284: ST_TO_ADDR
// hc_gallery :=  ;
17285: LD_ADDR_OWVAR 33
17289: PUSH
17290: LD_STRING 
17292: ST_TO_ADDR
// hc_noskilllimit := true ;
17293: LD_ADDR_OWVAR 76
17297: PUSH
17298: LD_INT 1
17300: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17301: LD_ADDR_OWVAR 31
17305: PUSH
17306: LD_INT 30
17308: PUSH
17309: LD_INT 30
17311: PUSH
17312: LD_INT 30
17314: PUSH
17315: LD_INT 30
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: ST_TO_ADDR
// un := CreateHuman ;
17324: LD_ADDR_VAR 0 3
17328: PUSH
17329: CALL_OW 44
17333: ST_TO_ADDR
// hc_noskilllimit := false ;
17334: LD_ADDR_OWVAR 76
17338: PUSH
17339: LD_INT 0
17341: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17342: LD_VAR 0 3
17346: PPUSH
17347: LD_INT 1
17349: PPUSH
17350: CALL_OW 51
// ToLua ( playRanger() ) ;
17354: LD_STRING playRanger()
17356: PPUSH
17357: CALL_OW 559
// p := 0 ;
17361: LD_ADDR_VAR 0 2
17365: PUSH
17366: LD_INT 0
17368: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17369: LD_INT 35
17371: PPUSH
17372: CALL_OW 67
// p := p + 1 ;
17376: LD_ADDR_VAR 0 2
17380: PUSH
17381: LD_VAR 0 2
17385: PUSH
17386: LD_INT 1
17388: PLUS
17389: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17390: LD_VAR 0 3
17394: PPUSH
17395: CALL_OW 256
17399: PUSH
17400: LD_INT 1000
17402: LESS
17403: IFFALSE 17417
// SetLives ( un , 1000 ) ;
17405: LD_VAR 0 3
17409: PPUSH
17410: LD_INT 1000
17412: PPUSH
17413: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17417: LD_VAR 0 3
17421: PPUSH
17422: LD_INT 81
17424: PUSH
17425: LD_OWVAR 2
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 91
17436: PUSH
17437: LD_VAR 0 3
17441: PUSH
17442: LD_INT 30
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PPUSH
17454: CALL_OW 69
17458: PPUSH
17459: LD_VAR 0 3
17463: PPUSH
17464: CALL_OW 74
17468: PPUSH
17469: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17473: LD_VAR 0 2
17477: PUSH
17478: LD_INT 80
17480: GREATER
17481: PUSH
17482: LD_VAR 0 3
17486: PPUSH
17487: CALL_OW 301
17491: OR
17492: IFFALSE 17369
// if un then
17494: LD_VAR 0 3
17498: IFFALSE 17509
// RemoveUnit ( un ) ;
17500: LD_VAR 0 3
17504: PPUSH
17505: CALL_OW 64
// end ;
17509: PPOPN 3
17511: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17512: LD_EXP 78
17516: IFFALSE 17632
17518: GO 17520
17520: DISABLE
17521: LD_INT 0
17523: PPUSH
17524: PPUSH
17525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17526: LD_ADDR_VAR 0 2
17530: PUSH
17531: LD_INT 81
17533: PUSH
17534: LD_OWVAR 2
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 21
17545: PUSH
17546: LD_INT 1
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17562: LD_STRING playComputer()
17564: PPUSH
17565: CALL_OW 559
// if not tmp then
17569: LD_VAR 0 2
17573: NOT
17574: IFFALSE 17578
// exit ;
17576: GO 17632
// for i in tmp do
17578: LD_ADDR_VAR 0 1
17582: PUSH
17583: LD_VAR 0 2
17587: PUSH
17588: FOR_IN
17589: IFFALSE 17630
// for j := 1 to 4 do
17591: LD_ADDR_VAR 0 3
17595: PUSH
17596: DOUBLE
17597: LD_INT 1
17599: DEC
17600: ST_TO_ADDR
17601: LD_INT 4
17603: PUSH
17604: FOR_TO
17605: IFFALSE 17626
// SetSkill ( i , j , 10 ) ;
17607: LD_VAR 0 1
17611: PPUSH
17612: LD_VAR 0 3
17616: PPUSH
17617: LD_INT 10
17619: PPUSH
17620: CALL_OW 237
17624: GO 17604
17626: POP
17627: POP
17628: GO 17588
17630: POP
17631: POP
// end ;
17632: PPOPN 3
17634: END
// every 0 0$1 trigger s30 do var i , tmp ;
17635: LD_EXP 79
17639: IFFALSE 17708
17641: GO 17643
17643: DISABLE
17644: LD_INT 0
17646: PPUSH
17647: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17648: LD_ADDR_VAR 0 2
17652: PUSH
17653: LD_INT 22
17655: PUSH
17656: LD_OWVAR 2
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PPUSH
17665: CALL_OW 69
17669: ST_TO_ADDR
// if not tmp then
17670: LD_VAR 0 2
17674: NOT
17675: IFFALSE 17679
// exit ;
17677: GO 17708
// for i in tmp do
17679: LD_ADDR_VAR 0 1
17683: PUSH
17684: LD_VAR 0 2
17688: PUSH
17689: FOR_IN
17690: IFFALSE 17706
// SetLives ( i , 300 ) ;
17692: LD_VAR 0 1
17696: PPUSH
17697: LD_INT 300
17699: PPUSH
17700: CALL_OW 234
17704: GO 17689
17706: POP
17707: POP
// end ;
17708: PPOPN 2
17710: END
// every 0 0$1 trigger s60 do var i , tmp ;
17711: LD_EXP 80
17715: IFFALSE 17784
17717: GO 17719
17719: DISABLE
17720: LD_INT 0
17722: PPUSH
17723: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17724: LD_ADDR_VAR 0 2
17728: PUSH
17729: LD_INT 22
17731: PUSH
17732: LD_OWVAR 2
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PPUSH
17741: CALL_OW 69
17745: ST_TO_ADDR
// if not tmp then
17746: LD_VAR 0 2
17750: NOT
17751: IFFALSE 17755
// exit ;
17753: GO 17784
// for i in tmp do
17755: LD_ADDR_VAR 0 1
17759: PUSH
17760: LD_VAR 0 2
17764: PUSH
17765: FOR_IN
17766: IFFALSE 17782
// SetLives ( i , 600 ) ;
17768: LD_VAR 0 1
17772: PPUSH
17773: LD_INT 600
17775: PPUSH
17776: CALL_OW 234
17780: GO 17765
17782: POP
17783: POP
// end ;
17784: PPOPN 2
17786: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17787: LD_INT 0
17789: PPUSH
// case cmd of 301 :
17790: LD_VAR 0 1
17794: PUSH
17795: LD_INT 301
17797: DOUBLE
17798: EQUAL
17799: IFTRUE 17803
17801: GO 17835
17803: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17804: LD_VAR 0 6
17808: PPUSH
17809: LD_VAR 0 7
17813: PPUSH
17814: LD_VAR 0 8
17818: PPUSH
17819: LD_VAR 0 4
17823: PPUSH
17824: LD_VAR 0 5
17828: PPUSH
17829: CALL 19036 0 5
17833: GO 17956
17835: LD_INT 302
17837: DOUBLE
17838: EQUAL
17839: IFTRUE 17843
17841: GO 17880
17843: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17844: LD_VAR 0 6
17848: PPUSH
17849: LD_VAR 0 7
17853: PPUSH
17854: LD_VAR 0 8
17858: PPUSH
17859: LD_VAR 0 9
17863: PPUSH
17864: LD_VAR 0 4
17868: PPUSH
17869: LD_VAR 0 5
17873: PPUSH
17874: CALL 19127 0 6
17878: GO 17956
17880: LD_INT 303
17882: DOUBLE
17883: EQUAL
17884: IFTRUE 17888
17886: GO 17925
17888: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17889: LD_VAR 0 6
17893: PPUSH
17894: LD_VAR 0 7
17898: PPUSH
17899: LD_VAR 0 8
17903: PPUSH
17904: LD_VAR 0 9
17908: PPUSH
17909: LD_VAR 0 4
17913: PPUSH
17914: LD_VAR 0 5
17918: PPUSH
17919: CALL 17961 0 6
17923: GO 17956
17925: LD_INT 304
17927: DOUBLE
17928: EQUAL
17929: IFTRUE 17933
17931: GO 17955
17933: POP
// hHackTeleport ( unit , x , y ) ; end ;
17934: LD_VAR 0 2
17938: PPUSH
17939: LD_VAR 0 4
17943: PPUSH
17944: LD_VAR 0 5
17948: PPUSH
17949: CALL 19720 0 3
17953: GO 17956
17955: POP
// end ;
17956: LD_VAR 0 12
17960: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17961: LD_INT 0
17963: PPUSH
17964: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17965: LD_VAR 0 1
17969: PUSH
17970: LD_INT 1
17972: LESS
17973: PUSH
17974: LD_VAR 0 1
17978: PUSH
17979: LD_INT 3
17981: GREATER
17982: OR
17983: PUSH
17984: LD_VAR 0 5
17988: PPUSH
17989: LD_VAR 0 6
17993: PPUSH
17994: CALL_OW 428
17998: OR
17999: IFFALSE 18003
// exit ;
18001: GO 18723
// uc_side := your_side ;
18003: LD_ADDR_OWVAR 20
18007: PUSH
18008: LD_OWVAR 2
18012: ST_TO_ADDR
// uc_nation := nation ;
18013: LD_ADDR_OWVAR 21
18017: PUSH
18018: LD_VAR 0 1
18022: ST_TO_ADDR
// bc_level = 1 ;
18023: LD_ADDR_OWVAR 43
18027: PUSH
18028: LD_INT 1
18030: ST_TO_ADDR
// case btype of 1 :
18031: LD_VAR 0 2
18035: PUSH
18036: LD_INT 1
18038: DOUBLE
18039: EQUAL
18040: IFTRUE 18044
18042: GO 18055
18044: POP
// bc_type := b_depot ; 2 :
18045: LD_ADDR_OWVAR 42
18049: PUSH
18050: LD_INT 0
18052: ST_TO_ADDR
18053: GO 18667
18055: LD_INT 2
18057: DOUBLE
18058: EQUAL
18059: IFTRUE 18063
18061: GO 18074
18063: POP
// bc_type := b_warehouse ; 3 :
18064: LD_ADDR_OWVAR 42
18068: PUSH
18069: LD_INT 1
18071: ST_TO_ADDR
18072: GO 18667
18074: LD_INT 3
18076: DOUBLE
18077: EQUAL
18078: IFTRUE 18082
18080: GO 18093
18082: POP
// bc_type := b_lab ; 4 .. 9 :
18083: LD_ADDR_OWVAR 42
18087: PUSH
18088: LD_INT 6
18090: ST_TO_ADDR
18091: GO 18667
18093: LD_INT 4
18095: DOUBLE
18096: GREATEREQUAL
18097: IFFALSE 18105
18099: LD_INT 9
18101: DOUBLE
18102: LESSEQUAL
18103: IFTRUE 18107
18105: GO 18159
18107: POP
// begin bc_type := b_lab_half ;
18108: LD_ADDR_OWVAR 42
18112: PUSH
18113: LD_INT 7
18115: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18116: LD_ADDR_OWVAR 44
18120: PUSH
18121: LD_INT 10
18123: PUSH
18124: LD_INT 11
18126: PUSH
18127: LD_INT 12
18129: PUSH
18130: LD_INT 15
18132: PUSH
18133: LD_INT 14
18135: PUSH
18136: LD_INT 13
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: PUSH
18147: LD_VAR 0 2
18151: PUSH
18152: LD_INT 3
18154: MINUS
18155: ARRAY
18156: ST_TO_ADDR
// end ; 10 .. 13 :
18157: GO 18667
18159: LD_INT 10
18161: DOUBLE
18162: GREATEREQUAL
18163: IFFALSE 18171
18165: LD_INT 13
18167: DOUBLE
18168: LESSEQUAL
18169: IFTRUE 18173
18171: GO 18250
18173: POP
// begin bc_type := b_lab_full ;
18174: LD_ADDR_OWVAR 42
18178: PUSH
18179: LD_INT 8
18181: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18182: LD_ADDR_OWVAR 44
18186: PUSH
18187: LD_INT 10
18189: PUSH
18190: LD_INT 12
18192: PUSH
18193: LD_INT 14
18195: PUSH
18196: LD_INT 13
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: LD_VAR 0 2
18209: PUSH
18210: LD_INT 9
18212: MINUS
18213: ARRAY
18214: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18215: LD_ADDR_OWVAR 45
18219: PUSH
18220: LD_INT 11
18222: PUSH
18223: LD_INT 15
18225: PUSH
18226: LD_INT 12
18228: PUSH
18229: LD_INT 15
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: PUSH
18238: LD_VAR 0 2
18242: PUSH
18243: LD_INT 9
18245: MINUS
18246: ARRAY
18247: ST_TO_ADDR
// end ; 14 :
18248: GO 18667
18250: LD_INT 14
18252: DOUBLE
18253: EQUAL
18254: IFTRUE 18258
18256: GO 18269
18258: POP
// bc_type := b_workshop ; 15 :
18259: LD_ADDR_OWVAR 42
18263: PUSH
18264: LD_INT 2
18266: ST_TO_ADDR
18267: GO 18667
18269: LD_INT 15
18271: DOUBLE
18272: EQUAL
18273: IFTRUE 18277
18275: GO 18288
18277: POP
// bc_type := b_factory ; 16 :
18278: LD_ADDR_OWVAR 42
18282: PUSH
18283: LD_INT 3
18285: ST_TO_ADDR
18286: GO 18667
18288: LD_INT 16
18290: DOUBLE
18291: EQUAL
18292: IFTRUE 18296
18294: GO 18307
18296: POP
// bc_type := b_ext_gun ; 17 :
18297: LD_ADDR_OWVAR 42
18301: PUSH
18302: LD_INT 17
18304: ST_TO_ADDR
18305: GO 18667
18307: LD_INT 17
18309: DOUBLE
18310: EQUAL
18311: IFTRUE 18315
18313: GO 18343
18315: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18316: LD_ADDR_OWVAR 42
18320: PUSH
18321: LD_INT 19
18323: PUSH
18324: LD_INT 23
18326: PUSH
18327: LD_INT 19
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: LIST
18334: PUSH
18335: LD_VAR 0 1
18339: ARRAY
18340: ST_TO_ADDR
18341: GO 18667
18343: LD_INT 18
18345: DOUBLE
18346: EQUAL
18347: IFTRUE 18351
18349: GO 18362
18351: POP
// bc_type := b_ext_radar ; 19 :
18352: LD_ADDR_OWVAR 42
18356: PUSH
18357: LD_INT 20
18359: ST_TO_ADDR
18360: GO 18667
18362: LD_INT 19
18364: DOUBLE
18365: EQUAL
18366: IFTRUE 18370
18368: GO 18381
18370: POP
// bc_type := b_ext_radio ; 20 :
18371: LD_ADDR_OWVAR 42
18375: PUSH
18376: LD_INT 22
18378: ST_TO_ADDR
18379: GO 18667
18381: LD_INT 20
18383: DOUBLE
18384: EQUAL
18385: IFTRUE 18389
18387: GO 18400
18389: POP
// bc_type := b_ext_siberium ; 21 :
18390: LD_ADDR_OWVAR 42
18394: PUSH
18395: LD_INT 21
18397: ST_TO_ADDR
18398: GO 18667
18400: LD_INT 21
18402: DOUBLE
18403: EQUAL
18404: IFTRUE 18408
18406: GO 18419
18408: POP
// bc_type := b_ext_computer ; 22 :
18409: LD_ADDR_OWVAR 42
18413: PUSH
18414: LD_INT 24
18416: ST_TO_ADDR
18417: GO 18667
18419: LD_INT 22
18421: DOUBLE
18422: EQUAL
18423: IFTRUE 18427
18425: GO 18438
18427: POP
// bc_type := b_ext_track ; 23 :
18428: LD_ADDR_OWVAR 42
18432: PUSH
18433: LD_INT 16
18435: ST_TO_ADDR
18436: GO 18667
18438: LD_INT 23
18440: DOUBLE
18441: EQUAL
18442: IFTRUE 18446
18444: GO 18457
18446: POP
// bc_type := b_ext_laser ; 24 :
18447: LD_ADDR_OWVAR 42
18451: PUSH
18452: LD_INT 25
18454: ST_TO_ADDR
18455: GO 18667
18457: LD_INT 24
18459: DOUBLE
18460: EQUAL
18461: IFTRUE 18465
18463: GO 18476
18465: POP
// bc_type := b_control_tower ; 25 :
18466: LD_ADDR_OWVAR 42
18470: PUSH
18471: LD_INT 36
18473: ST_TO_ADDR
18474: GO 18667
18476: LD_INT 25
18478: DOUBLE
18479: EQUAL
18480: IFTRUE 18484
18482: GO 18495
18484: POP
// bc_type := b_breastwork ; 26 :
18485: LD_ADDR_OWVAR 42
18489: PUSH
18490: LD_INT 31
18492: ST_TO_ADDR
18493: GO 18667
18495: LD_INT 26
18497: DOUBLE
18498: EQUAL
18499: IFTRUE 18503
18501: GO 18514
18503: POP
// bc_type := b_bunker ; 27 :
18504: LD_ADDR_OWVAR 42
18508: PUSH
18509: LD_INT 32
18511: ST_TO_ADDR
18512: GO 18667
18514: LD_INT 27
18516: DOUBLE
18517: EQUAL
18518: IFTRUE 18522
18520: GO 18533
18522: POP
// bc_type := b_turret ; 28 :
18523: LD_ADDR_OWVAR 42
18527: PUSH
18528: LD_INT 33
18530: ST_TO_ADDR
18531: GO 18667
18533: LD_INT 28
18535: DOUBLE
18536: EQUAL
18537: IFTRUE 18541
18539: GO 18552
18541: POP
// bc_type := b_armoury ; 29 :
18542: LD_ADDR_OWVAR 42
18546: PUSH
18547: LD_INT 4
18549: ST_TO_ADDR
18550: GO 18667
18552: LD_INT 29
18554: DOUBLE
18555: EQUAL
18556: IFTRUE 18560
18558: GO 18571
18560: POP
// bc_type := b_barracks ; 30 :
18561: LD_ADDR_OWVAR 42
18565: PUSH
18566: LD_INT 5
18568: ST_TO_ADDR
18569: GO 18667
18571: LD_INT 30
18573: DOUBLE
18574: EQUAL
18575: IFTRUE 18579
18577: GO 18590
18579: POP
// bc_type := b_solar_power ; 31 :
18580: LD_ADDR_OWVAR 42
18584: PUSH
18585: LD_INT 27
18587: ST_TO_ADDR
18588: GO 18667
18590: LD_INT 31
18592: DOUBLE
18593: EQUAL
18594: IFTRUE 18598
18596: GO 18609
18598: POP
// bc_type := b_oil_power ; 32 :
18599: LD_ADDR_OWVAR 42
18603: PUSH
18604: LD_INT 26
18606: ST_TO_ADDR
18607: GO 18667
18609: LD_INT 32
18611: DOUBLE
18612: EQUAL
18613: IFTRUE 18617
18615: GO 18628
18617: POP
// bc_type := b_siberite_power ; 33 :
18618: LD_ADDR_OWVAR 42
18622: PUSH
18623: LD_INT 28
18625: ST_TO_ADDR
18626: GO 18667
18628: LD_INT 33
18630: DOUBLE
18631: EQUAL
18632: IFTRUE 18636
18634: GO 18647
18636: POP
// bc_type := b_oil_mine ; 34 :
18637: LD_ADDR_OWVAR 42
18641: PUSH
18642: LD_INT 29
18644: ST_TO_ADDR
18645: GO 18667
18647: LD_INT 34
18649: DOUBLE
18650: EQUAL
18651: IFTRUE 18655
18653: GO 18666
18655: POP
// bc_type := b_siberite_mine ; end ;
18656: LD_ADDR_OWVAR 42
18660: PUSH
18661: LD_INT 30
18663: ST_TO_ADDR
18664: GO 18667
18666: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18667: LD_ADDR_VAR 0 8
18671: PUSH
18672: LD_VAR 0 5
18676: PPUSH
18677: LD_VAR 0 6
18681: PPUSH
18682: LD_VAR 0 3
18686: PPUSH
18687: CALL_OW 47
18691: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18692: LD_OWVAR 42
18696: PUSH
18697: LD_INT 32
18699: PUSH
18700: LD_INT 33
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: IN
18707: IFFALSE 18723
// PlaceWeaponTurret ( b , weapon ) ;
18709: LD_VAR 0 8
18713: PPUSH
18714: LD_VAR 0 4
18718: PPUSH
18719: CALL_OW 431
// end ;
18723: LD_VAR 0 7
18727: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18728: LD_INT 0
18730: PPUSH
18731: PPUSH
18732: PPUSH
18733: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18734: LD_ADDR_VAR 0 4
18738: PUSH
18739: LD_INT 22
18741: PUSH
18742: LD_OWVAR 2
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: LD_INT 30
18756: PUSH
18757: LD_INT 0
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 30
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PPUSH
18783: CALL_OW 69
18787: ST_TO_ADDR
// if not tmp then
18788: LD_VAR 0 4
18792: NOT
18793: IFFALSE 18797
// exit ;
18795: GO 18856
// for i in tmp do
18797: LD_ADDR_VAR 0 2
18801: PUSH
18802: LD_VAR 0 4
18806: PUSH
18807: FOR_IN
18808: IFFALSE 18854
// for j = 1 to 3 do
18810: LD_ADDR_VAR 0 3
18814: PUSH
18815: DOUBLE
18816: LD_INT 1
18818: DEC
18819: ST_TO_ADDR
18820: LD_INT 3
18822: PUSH
18823: FOR_TO
18824: IFFALSE 18850
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18826: LD_VAR 0 2
18830: PPUSH
18831: CALL_OW 274
18835: PPUSH
18836: LD_VAR 0 3
18840: PPUSH
18841: LD_INT 99999
18843: PPUSH
18844: CALL_OW 277
18848: GO 18823
18850: POP
18851: POP
18852: GO 18807
18854: POP
18855: POP
// end ;
18856: LD_VAR 0 1
18860: RET
// export function hHackSetLevel10 ; var i , j ; begin
18861: LD_INT 0
18863: PPUSH
18864: PPUSH
18865: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18866: LD_ADDR_VAR 0 2
18870: PUSH
18871: LD_INT 21
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PPUSH
18881: CALL_OW 69
18885: PUSH
18886: FOR_IN
18887: IFFALSE 18939
// if IsSelected ( i ) then
18889: LD_VAR 0 2
18893: PPUSH
18894: CALL_OW 306
18898: IFFALSE 18937
// begin for j := 1 to 4 do
18900: LD_ADDR_VAR 0 3
18904: PUSH
18905: DOUBLE
18906: LD_INT 1
18908: DEC
18909: ST_TO_ADDR
18910: LD_INT 4
18912: PUSH
18913: FOR_TO
18914: IFFALSE 18935
// SetSkill ( i , j , 10 ) ;
18916: LD_VAR 0 2
18920: PPUSH
18921: LD_VAR 0 3
18925: PPUSH
18926: LD_INT 10
18928: PPUSH
18929: CALL_OW 237
18933: GO 18913
18935: POP
18936: POP
// end ;
18937: GO 18886
18939: POP
18940: POP
// end ;
18941: LD_VAR 0 1
18945: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18946: LD_INT 0
18948: PPUSH
18949: PPUSH
18950: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18951: LD_ADDR_VAR 0 2
18955: PUSH
18956: LD_INT 22
18958: PUSH
18959: LD_OWVAR 2
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 21
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PPUSH
18982: CALL_OW 69
18986: PUSH
18987: FOR_IN
18988: IFFALSE 19029
// begin for j := 1 to 4 do
18990: LD_ADDR_VAR 0 3
18994: PUSH
18995: DOUBLE
18996: LD_INT 1
18998: DEC
18999: ST_TO_ADDR
19000: LD_INT 4
19002: PUSH
19003: FOR_TO
19004: IFFALSE 19025
// SetSkill ( i , j , 10 ) ;
19006: LD_VAR 0 2
19010: PPUSH
19011: LD_VAR 0 3
19015: PPUSH
19016: LD_INT 10
19018: PPUSH
19019: CALL_OW 237
19023: GO 19003
19025: POP
19026: POP
// end ;
19027: GO 18987
19029: POP
19030: POP
// end ;
19031: LD_VAR 0 1
19035: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19036: LD_INT 0
19038: PPUSH
// uc_side := your_side ;
19039: LD_ADDR_OWVAR 20
19043: PUSH
19044: LD_OWVAR 2
19048: ST_TO_ADDR
// uc_nation := nation ;
19049: LD_ADDR_OWVAR 21
19053: PUSH
19054: LD_VAR 0 1
19058: ST_TO_ADDR
// InitHc ;
19059: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19063: LD_INT 0
19065: PPUSH
19066: LD_VAR 0 2
19070: PPUSH
19071: LD_VAR 0 3
19075: PPUSH
19076: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19080: LD_VAR 0 4
19084: PPUSH
19085: LD_VAR 0 5
19089: PPUSH
19090: CALL_OW 428
19094: PUSH
19095: LD_INT 0
19097: EQUAL
19098: IFFALSE 19122
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19100: CALL_OW 44
19104: PPUSH
19105: LD_VAR 0 4
19109: PPUSH
19110: LD_VAR 0 5
19114: PPUSH
19115: LD_INT 1
19117: PPUSH
19118: CALL_OW 48
// end ;
19122: LD_VAR 0 6
19126: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19127: LD_INT 0
19129: PPUSH
19130: PPUSH
// uc_side := your_side ;
19131: LD_ADDR_OWVAR 20
19135: PUSH
19136: LD_OWVAR 2
19140: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19141: LD_VAR 0 1
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: LD_INT 3
19154: PUSH
19155: LD_INT 4
19157: PUSH
19158: LD_INT 5
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: IN
19168: IFFALSE 19180
// uc_nation := nation_american else
19170: LD_ADDR_OWVAR 21
19174: PUSH
19175: LD_INT 1
19177: ST_TO_ADDR
19178: GO 19223
// if chassis in [ 11 , 12 , 13 , 14 ] then
19180: LD_VAR 0 1
19184: PUSH
19185: LD_INT 11
19187: PUSH
19188: LD_INT 12
19190: PUSH
19191: LD_INT 13
19193: PUSH
19194: LD_INT 14
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: IN
19203: IFFALSE 19215
// uc_nation := nation_arabian else
19205: LD_ADDR_OWVAR 21
19209: PUSH
19210: LD_INT 2
19212: ST_TO_ADDR
19213: GO 19223
// uc_nation := nation_russian ;
19215: LD_ADDR_OWVAR 21
19219: PUSH
19220: LD_INT 3
19222: ST_TO_ADDR
// vc_chassis := chassis ;
19223: LD_ADDR_OWVAR 37
19227: PUSH
19228: LD_VAR 0 1
19232: ST_TO_ADDR
// vc_engine := engine ;
19233: LD_ADDR_OWVAR 39
19237: PUSH
19238: LD_VAR 0 2
19242: ST_TO_ADDR
// vc_control := control ;
19243: LD_ADDR_OWVAR 38
19247: PUSH
19248: LD_VAR 0 3
19252: ST_TO_ADDR
// vc_weapon := weapon ;
19253: LD_ADDR_OWVAR 40
19257: PUSH
19258: LD_VAR 0 4
19262: ST_TO_ADDR
// un := CreateVehicle ;
19263: LD_ADDR_VAR 0 8
19267: PUSH
19268: CALL_OW 45
19272: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19273: LD_VAR 0 8
19277: PPUSH
19278: LD_INT 0
19280: PPUSH
19281: LD_INT 5
19283: PPUSH
19284: CALL_OW 12
19288: PPUSH
19289: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19293: LD_VAR 0 8
19297: PPUSH
19298: LD_VAR 0 5
19302: PPUSH
19303: LD_VAR 0 6
19307: PPUSH
19308: LD_INT 1
19310: PPUSH
19311: CALL_OW 48
// end ;
19315: LD_VAR 0 7
19319: RET
// export hInvincible ; every 1 do
19320: GO 19322
19322: DISABLE
// hInvincible := [ ] ;
19323: LD_ADDR_EXP 81
19327: PUSH
19328: EMPTY
19329: ST_TO_ADDR
19330: END
// every 10 do var i ;
19331: GO 19333
19333: DISABLE
19334: LD_INT 0
19336: PPUSH
// begin enable ;
19337: ENABLE
// if not hInvincible then
19338: LD_EXP 81
19342: NOT
19343: IFFALSE 19347
// exit ;
19345: GO 19391
// for i in hInvincible do
19347: LD_ADDR_VAR 0 1
19351: PUSH
19352: LD_EXP 81
19356: PUSH
19357: FOR_IN
19358: IFFALSE 19389
// if GetLives ( i ) < 1000 then
19360: LD_VAR 0 1
19364: PPUSH
19365: CALL_OW 256
19369: PUSH
19370: LD_INT 1000
19372: LESS
19373: IFFALSE 19387
// SetLives ( i , 1000 ) ;
19375: LD_VAR 0 1
19379: PPUSH
19380: LD_INT 1000
19382: PPUSH
19383: CALL_OW 234
19387: GO 19357
19389: POP
19390: POP
// end ;
19391: PPOPN 1
19393: END
// export function hHackInvincible ; var i ; begin
19394: LD_INT 0
19396: PPUSH
19397: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19398: LD_ADDR_VAR 0 2
19402: PUSH
19403: LD_INT 2
19405: PUSH
19406: LD_INT 21
19408: PUSH
19409: LD_INT 1
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 21
19418: PUSH
19419: LD_INT 2
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: LIST
19430: PPUSH
19431: CALL_OW 69
19435: PUSH
19436: FOR_IN
19437: IFFALSE 19498
// if IsSelected ( i ) then
19439: LD_VAR 0 2
19443: PPUSH
19444: CALL_OW 306
19448: IFFALSE 19496
// begin if i in hInvincible then
19450: LD_VAR 0 2
19454: PUSH
19455: LD_EXP 81
19459: IN
19460: IFFALSE 19480
// hInvincible := hInvincible diff i else
19462: LD_ADDR_EXP 81
19466: PUSH
19467: LD_EXP 81
19471: PUSH
19472: LD_VAR 0 2
19476: DIFF
19477: ST_TO_ADDR
19478: GO 19496
// hInvincible := hInvincible union i ;
19480: LD_ADDR_EXP 81
19484: PUSH
19485: LD_EXP 81
19489: PUSH
19490: LD_VAR 0 2
19494: UNION
19495: ST_TO_ADDR
// end ;
19496: GO 19436
19498: POP
19499: POP
// end ;
19500: LD_VAR 0 1
19504: RET
// export function hHackInvisible ; var i , j ; begin
19505: LD_INT 0
19507: PPUSH
19508: PPUSH
19509: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19510: LD_ADDR_VAR 0 2
19514: PUSH
19515: LD_INT 21
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PPUSH
19525: CALL_OW 69
19529: PUSH
19530: FOR_IN
19531: IFFALSE 19555
// if IsSelected ( i ) then
19533: LD_VAR 0 2
19537: PPUSH
19538: CALL_OW 306
19542: IFFALSE 19553
// ComForceInvisible ( i ) ;
19544: LD_VAR 0 2
19548: PPUSH
19549: CALL_OW 496
19553: GO 19530
19555: POP
19556: POP
// end ;
19557: LD_VAR 0 1
19561: RET
// export function hHackChangeYourSide ; begin
19562: LD_INT 0
19564: PPUSH
// if your_side = 8 then
19565: LD_OWVAR 2
19569: PUSH
19570: LD_INT 8
19572: EQUAL
19573: IFFALSE 19585
// your_side := 0 else
19575: LD_ADDR_OWVAR 2
19579: PUSH
19580: LD_INT 0
19582: ST_TO_ADDR
19583: GO 19599
// your_side := your_side + 1 ;
19585: LD_ADDR_OWVAR 2
19589: PUSH
19590: LD_OWVAR 2
19594: PUSH
19595: LD_INT 1
19597: PLUS
19598: ST_TO_ADDR
// end ;
19599: LD_VAR 0 1
19603: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19604: LD_INT 0
19606: PPUSH
19607: PPUSH
19608: PPUSH
// for i in all_units do
19609: LD_ADDR_VAR 0 2
19613: PUSH
19614: LD_OWVAR 3
19618: PUSH
19619: FOR_IN
19620: IFFALSE 19698
// if IsSelected ( i ) then
19622: LD_VAR 0 2
19626: PPUSH
19627: CALL_OW 306
19631: IFFALSE 19696
// begin j := GetSide ( i ) ;
19633: LD_ADDR_VAR 0 3
19637: PUSH
19638: LD_VAR 0 2
19642: PPUSH
19643: CALL_OW 255
19647: ST_TO_ADDR
// if j = 8 then
19648: LD_VAR 0 3
19652: PUSH
19653: LD_INT 8
19655: EQUAL
19656: IFFALSE 19668
// j := 0 else
19658: LD_ADDR_VAR 0 3
19662: PUSH
19663: LD_INT 0
19665: ST_TO_ADDR
19666: GO 19682
// j := j + 1 ;
19668: LD_ADDR_VAR 0 3
19672: PUSH
19673: LD_VAR 0 3
19677: PUSH
19678: LD_INT 1
19680: PLUS
19681: ST_TO_ADDR
// SetSide ( i , j ) ;
19682: LD_VAR 0 2
19686: PPUSH
19687: LD_VAR 0 3
19691: PPUSH
19692: CALL_OW 235
// end ;
19696: GO 19619
19698: POP
19699: POP
// end ;
19700: LD_VAR 0 1
19704: RET
// export function hHackFog ; begin
19705: LD_INT 0
19707: PPUSH
// FogOff ( true ) ;
19708: LD_INT 1
19710: PPUSH
19711: CALL_OW 344
// end ;
19715: LD_VAR 0 1
19719: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19720: LD_INT 0
19722: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19723: LD_VAR 0 1
19727: PPUSH
19728: LD_VAR 0 2
19732: PPUSH
19733: LD_VAR 0 3
19737: PPUSH
19738: LD_INT 1
19740: PPUSH
19741: LD_INT 1
19743: PPUSH
19744: CALL_OW 483
// CenterOnXY ( x , y ) ;
19748: LD_VAR 0 2
19752: PPUSH
19753: LD_VAR 0 3
19757: PPUSH
19758: CALL_OW 84
// end ; end_of_file
19762: LD_VAR 0 4
19766: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19767: LD_INT 0
19769: PPUSH
19770: PPUSH
19771: PPUSH
19772: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19773: LD_VAR 0 1
19777: PPUSH
19778: CALL_OW 264
19782: PUSH
19783: LD_EXP 97
19787: EQUAL
19788: IFFALSE 19860
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19790: LD_INT 68
19792: PPUSH
19793: LD_VAR 0 1
19797: PPUSH
19798: CALL_OW 255
19802: PPUSH
19803: CALL_OW 321
19807: PUSH
19808: LD_INT 2
19810: EQUAL
19811: IFFALSE 19823
// eff := 70 else
19813: LD_ADDR_VAR 0 4
19817: PUSH
19818: LD_INT 70
19820: ST_TO_ADDR
19821: GO 19831
// eff := 30 ;
19823: LD_ADDR_VAR 0 4
19827: PUSH
19828: LD_INT 30
19830: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19831: LD_VAR 0 1
19835: PPUSH
19836: CALL_OW 250
19840: PPUSH
19841: LD_VAR 0 1
19845: PPUSH
19846: CALL_OW 251
19850: PPUSH
19851: LD_VAR 0 4
19855: PPUSH
19856: CALL_OW 495
// end ; end ;
19860: LD_VAR 0 2
19864: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19865: LD_INT 0
19867: PPUSH
// end ;
19868: LD_VAR 0 4
19872: RET
// export function SOS_Command ( cmd ) ; begin
19873: LD_INT 0
19875: PPUSH
// end ;
19876: LD_VAR 0 2
19880: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19881: LD_INT 0
19883: PPUSH
// end ;
19884: LD_VAR 0 6
19888: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
19889: LD_INT 0
19891: PPUSH
19892: PPUSH
// if not vehicle or not factory then
19893: LD_VAR 0 1
19897: NOT
19898: PUSH
19899: LD_VAR 0 2
19903: NOT
19904: OR
19905: IFFALSE 19909
// exit ;
19907: GO 20140
// if factoryWaypoints >= factory then
19909: LD_EXP 82
19913: PUSH
19914: LD_VAR 0 2
19918: GREATEREQUAL
19919: IFFALSE 20140
// if factoryWaypoints [ factory ] then
19921: LD_EXP 82
19925: PUSH
19926: LD_VAR 0 2
19930: ARRAY
19931: IFFALSE 20140
// begin if GetControl ( vehicle ) = control_manual then
19933: LD_VAR 0 1
19937: PPUSH
19938: CALL_OW 263
19942: PUSH
19943: LD_INT 1
19945: EQUAL
19946: IFFALSE 20027
// begin driver := IsDrivenBy ( vehicle ) ;
19948: LD_ADDR_VAR 0 4
19952: PUSH
19953: LD_VAR 0 1
19957: PPUSH
19958: CALL_OW 311
19962: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19963: LD_VAR 0 4
19967: PPUSH
19968: LD_EXP 82
19972: PUSH
19973: LD_VAR 0 2
19977: ARRAY
19978: PUSH
19979: LD_INT 3
19981: ARRAY
19982: PPUSH
19983: LD_EXP 82
19987: PUSH
19988: LD_VAR 0 2
19992: ARRAY
19993: PUSH
19994: LD_INT 4
19996: ARRAY
19997: PPUSH
19998: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20002: LD_VAR 0 4
20006: PPUSH
20007: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20011: LD_VAR 0 4
20015: PPUSH
20016: LD_VAR 0 2
20020: PPUSH
20021: CALL_OW 180
// end else
20025: GO 20140
// if GetControl ( vehicle ) = control_remote then
20027: LD_VAR 0 1
20031: PPUSH
20032: CALL_OW 263
20036: PUSH
20037: LD_INT 2
20039: EQUAL
20040: IFFALSE 20101
// begin wait ( 0 0$2 ) ;
20042: LD_INT 70
20044: PPUSH
20045: CALL_OW 67
// if Connect ( vehicle ) then
20049: LD_VAR 0 1
20053: PPUSH
20054: CALL 33003 0 1
20058: IFFALSE 20099
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20060: LD_VAR 0 1
20064: PPUSH
20065: LD_EXP 82
20069: PUSH
20070: LD_VAR 0 2
20074: ARRAY
20075: PUSH
20076: LD_INT 3
20078: ARRAY
20079: PPUSH
20080: LD_EXP 82
20084: PUSH
20085: LD_VAR 0 2
20089: ARRAY
20090: PUSH
20091: LD_INT 4
20093: ARRAY
20094: PPUSH
20095: CALL_OW 171
// end else
20099: GO 20140
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20101: LD_VAR 0 1
20105: PPUSH
20106: LD_EXP 82
20110: PUSH
20111: LD_VAR 0 2
20115: ARRAY
20116: PUSH
20117: LD_INT 3
20119: ARRAY
20120: PPUSH
20121: LD_EXP 82
20125: PUSH
20126: LD_VAR 0 2
20130: ARRAY
20131: PUSH
20132: LD_INT 4
20134: ARRAY
20135: PPUSH
20136: CALL_OW 171
// end ; end ;
20140: LD_VAR 0 3
20144: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20145: LD_INT 0
20147: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20148: LD_VAR 0 1
20152: PUSH
20153: LD_INT 250
20155: EQUAL
20156: PUSH
20157: LD_VAR 0 2
20161: PPUSH
20162: CALL_OW 264
20166: PUSH
20167: LD_EXP 100
20171: EQUAL
20172: AND
20173: IFFALSE 20194
// MinerPlaceMine ( unit , x , y ) ;
20175: LD_VAR 0 2
20179: PPUSH
20180: LD_VAR 0 4
20184: PPUSH
20185: LD_VAR 0 5
20189: PPUSH
20190: CALL 22922 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20194: LD_VAR 0 1
20198: PUSH
20199: LD_INT 251
20201: EQUAL
20202: PUSH
20203: LD_VAR 0 2
20207: PPUSH
20208: CALL_OW 264
20212: PUSH
20213: LD_EXP 100
20217: EQUAL
20218: AND
20219: IFFALSE 20240
// MinerDetonateMine ( unit , x , y ) ;
20221: LD_VAR 0 2
20225: PPUSH
20226: LD_VAR 0 4
20230: PPUSH
20231: LD_VAR 0 5
20235: PPUSH
20236: CALL 23199 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20240: LD_VAR 0 1
20244: PUSH
20245: LD_INT 252
20247: EQUAL
20248: PUSH
20249: LD_VAR 0 2
20253: PPUSH
20254: CALL_OW 264
20258: PUSH
20259: LD_EXP 100
20263: EQUAL
20264: AND
20265: IFFALSE 20286
// MinerCreateMinefield ( unit , x , y ) ;
20267: LD_VAR 0 2
20271: PPUSH
20272: LD_VAR 0 4
20276: PPUSH
20277: LD_VAR 0 5
20281: PPUSH
20282: CALL 23616 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20286: LD_VAR 0 1
20290: PUSH
20291: LD_INT 253
20293: EQUAL
20294: PUSH
20295: LD_VAR 0 2
20299: PPUSH
20300: CALL_OW 257
20304: PUSH
20305: LD_INT 5
20307: EQUAL
20308: AND
20309: IFFALSE 20330
// ComBinocular ( unit , x , y ) ;
20311: LD_VAR 0 2
20315: PPUSH
20316: LD_VAR 0 4
20320: PPUSH
20321: LD_VAR 0 5
20325: PPUSH
20326: CALL 23987 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20330: LD_VAR 0 1
20334: PUSH
20335: LD_INT 254
20337: EQUAL
20338: PUSH
20339: LD_VAR 0 2
20343: PPUSH
20344: CALL_OW 264
20348: PUSH
20349: LD_EXP 95
20353: EQUAL
20354: AND
20355: PUSH
20356: LD_VAR 0 3
20360: PPUSH
20361: CALL_OW 263
20365: PUSH
20366: LD_INT 3
20368: EQUAL
20369: AND
20370: IFFALSE 20386
// HackDestroyVehicle ( unit , selectedUnit ) ;
20372: LD_VAR 0 2
20376: PPUSH
20377: LD_VAR 0 3
20381: PPUSH
20382: CALL 22282 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20386: LD_VAR 0 1
20390: PUSH
20391: LD_INT 255
20393: EQUAL
20394: PUSH
20395: LD_VAR 0 2
20399: PPUSH
20400: CALL_OW 264
20404: PUSH
20405: LD_INT 14
20407: PUSH
20408: LD_INT 53
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: IN
20415: AND
20416: PUSH
20417: LD_VAR 0 4
20421: PPUSH
20422: LD_VAR 0 5
20426: PPUSH
20427: CALL_OW 488
20431: AND
20432: IFFALSE 20456
// CutTreeXYR ( unit , x , y , 12 ) ;
20434: LD_VAR 0 2
20438: PPUSH
20439: LD_VAR 0 4
20443: PPUSH
20444: LD_VAR 0 5
20448: PPUSH
20449: LD_INT 12
20451: PPUSH
20452: CALL 20848 0 4
// if cmd = 256 then
20456: LD_VAR 0 1
20460: PUSH
20461: LD_INT 256
20463: EQUAL
20464: IFFALSE 20485
// SetFactoryWaypoint ( unit , x , y ) ;
20466: LD_VAR 0 2
20470: PPUSH
20471: LD_VAR 0 4
20475: PPUSH
20476: LD_VAR 0 5
20480: PPUSH
20481: CALL 20490 0 3
// end ;
20485: LD_VAR 0 6
20489: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20490: LD_INT 0
20492: PPUSH
20493: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20494: LD_VAR 0 1
20498: NOT
20499: PUSH
20500: LD_VAR 0 2
20504: PPUSH
20505: LD_VAR 0 3
20509: PPUSH
20510: CALL_OW 488
20514: NOT
20515: OR
20516: PUSH
20517: LD_VAR 0 1
20521: PPUSH
20522: CALL_OW 266
20526: PUSH
20527: LD_INT 3
20529: NONEQUAL
20530: PUSH
20531: LD_VAR 0 1
20535: PPUSH
20536: CALL_OW 247
20540: PUSH
20541: LD_INT 1
20543: EQUAL
20544: NOT
20545: AND
20546: OR
20547: IFFALSE 20551
// exit ;
20549: GO 20700
// if GetType ( factory ) = unit_human then
20551: LD_VAR 0 1
20555: PPUSH
20556: CALL_OW 247
20560: PUSH
20561: LD_INT 1
20563: EQUAL
20564: IFFALSE 20581
// factory := IsInUnit ( factory ) ;
20566: LD_ADDR_VAR 0 1
20570: PUSH
20571: LD_VAR 0 1
20575: PPUSH
20576: CALL_OW 310
20580: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20581: LD_VAR 0 1
20585: PPUSH
20586: CALL_OW 266
20590: PUSH
20591: LD_INT 3
20593: NONEQUAL
20594: IFFALSE 20598
// exit ;
20596: GO 20700
// if HexInfo ( x , y ) = factory then
20598: LD_VAR 0 2
20602: PPUSH
20603: LD_VAR 0 3
20607: PPUSH
20608: CALL_OW 428
20612: PUSH
20613: LD_VAR 0 1
20617: EQUAL
20618: IFFALSE 20645
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20620: LD_ADDR_EXP 82
20624: PUSH
20625: LD_EXP 82
20629: PPUSH
20630: LD_VAR 0 1
20634: PPUSH
20635: LD_INT 0
20637: PPUSH
20638: CALL_OW 1
20642: ST_TO_ADDR
20643: GO 20696
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20645: LD_ADDR_EXP 82
20649: PUSH
20650: LD_EXP 82
20654: PPUSH
20655: LD_VAR 0 1
20659: PPUSH
20660: LD_VAR 0 1
20664: PPUSH
20665: CALL_OW 255
20669: PUSH
20670: LD_VAR 0 1
20674: PUSH
20675: LD_VAR 0 2
20679: PUSH
20680: LD_VAR 0 3
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: PPUSH
20691: CALL_OW 1
20695: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20696: CALL 20705 0 0
// end ;
20700: LD_VAR 0 4
20704: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
20705: LD_INT 0
20707: PPUSH
20708: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20709: LD_STRING resetFactoryWaypoint();
20711: PPUSH
20712: CALL_OW 559
// if factoryWaypoints then
20716: LD_EXP 82
20720: IFFALSE 20843
// begin for i := 1 to factoryWaypoints do
20722: LD_ADDR_VAR 0 2
20726: PUSH
20727: DOUBLE
20728: LD_INT 1
20730: DEC
20731: ST_TO_ADDR
20732: LD_EXP 82
20736: PUSH
20737: FOR_TO
20738: IFFALSE 20841
// if factoryWaypoints [ i ] then
20740: LD_EXP 82
20744: PUSH
20745: LD_VAR 0 2
20749: ARRAY
20750: IFFALSE 20839
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
20752: LD_STRING setFactoryWaypointXY(
20754: PUSH
20755: LD_EXP 82
20759: PUSH
20760: LD_VAR 0 2
20764: ARRAY
20765: PUSH
20766: LD_INT 1
20768: ARRAY
20769: STR
20770: PUSH
20771: LD_STRING ,
20773: STR
20774: PUSH
20775: LD_EXP 82
20779: PUSH
20780: LD_VAR 0 2
20784: ARRAY
20785: PUSH
20786: LD_INT 2
20788: ARRAY
20789: STR
20790: PUSH
20791: LD_STRING ,
20793: STR
20794: PUSH
20795: LD_EXP 82
20799: PUSH
20800: LD_VAR 0 2
20804: ARRAY
20805: PUSH
20806: LD_INT 3
20808: ARRAY
20809: STR
20810: PUSH
20811: LD_STRING ,
20813: STR
20814: PUSH
20815: LD_EXP 82
20819: PUSH
20820: LD_VAR 0 2
20824: ARRAY
20825: PUSH
20826: LD_INT 4
20828: ARRAY
20829: STR
20830: PUSH
20831: LD_STRING )
20833: STR
20834: PPUSH
20835: CALL_OW 559
20839: GO 20737
20841: POP
20842: POP
// end ; end ;
20843: LD_VAR 0 1
20847: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20848: LD_INT 0
20850: PPUSH
20851: PPUSH
20852: PPUSH
20853: PPUSH
20854: PPUSH
20855: PPUSH
20856: PPUSH
20857: PPUSH
20858: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20859: LD_VAR 0 1
20863: NOT
20864: PUSH
20865: LD_VAR 0 2
20869: PPUSH
20870: LD_VAR 0 3
20874: PPUSH
20875: CALL_OW 488
20879: NOT
20880: OR
20881: PUSH
20882: LD_VAR 0 4
20886: NOT
20887: OR
20888: IFFALSE 20892
// exit ;
20890: GO 21232
// list := [ ] ;
20892: LD_ADDR_VAR 0 13
20896: PUSH
20897: EMPTY
20898: ST_TO_ADDR
// if x - r < 0 then
20899: LD_VAR 0 2
20903: PUSH
20904: LD_VAR 0 4
20908: MINUS
20909: PUSH
20910: LD_INT 0
20912: LESS
20913: IFFALSE 20925
// min_x := 0 else
20915: LD_ADDR_VAR 0 7
20919: PUSH
20920: LD_INT 0
20922: ST_TO_ADDR
20923: GO 20941
// min_x := x - r ;
20925: LD_ADDR_VAR 0 7
20929: PUSH
20930: LD_VAR 0 2
20934: PUSH
20935: LD_VAR 0 4
20939: MINUS
20940: ST_TO_ADDR
// if y - r < 0 then
20941: LD_VAR 0 3
20945: PUSH
20946: LD_VAR 0 4
20950: MINUS
20951: PUSH
20952: LD_INT 0
20954: LESS
20955: IFFALSE 20967
// min_y := 0 else
20957: LD_ADDR_VAR 0 8
20961: PUSH
20962: LD_INT 0
20964: ST_TO_ADDR
20965: GO 20983
// min_y := y - r ;
20967: LD_ADDR_VAR 0 8
20971: PUSH
20972: LD_VAR 0 3
20976: PUSH
20977: LD_VAR 0 4
20981: MINUS
20982: ST_TO_ADDR
// max_x := x + r ;
20983: LD_ADDR_VAR 0 9
20987: PUSH
20988: LD_VAR 0 2
20992: PUSH
20993: LD_VAR 0 4
20997: PLUS
20998: ST_TO_ADDR
// max_y := y + r ;
20999: LD_ADDR_VAR 0 10
21003: PUSH
21004: LD_VAR 0 3
21008: PUSH
21009: LD_VAR 0 4
21013: PLUS
21014: ST_TO_ADDR
// for _x = min_x to max_x do
21015: LD_ADDR_VAR 0 11
21019: PUSH
21020: DOUBLE
21021: LD_VAR 0 7
21025: DEC
21026: ST_TO_ADDR
21027: LD_VAR 0 9
21031: PUSH
21032: FOR_TO
21033: IFFALSE 21150
// for _y = min_y to max_y do
21035: LD_ADDR_VAR 0 12
21039: PUSH
21040: DOUBLE
21041: LD_VAR 0 8
21045: DEC
21046: ST_TO_ADDR
21047: LD_VAR 0 10
21051: PUSH
21052: FOR_TO
21053: IFFALSE 21146
// begin if not ValidHex ( _x , _y ) then
21055: LD_VAR 0 11
21059: PPUSH
21060: LD_VAR 0 12
21064: PPUSH
21065: CALL_OW 488
21069: NOT
21070: IFFALSE 21074
// continue ;
21072: GO 21052
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21074: LD_VAR 0 11
21078: PPUSH
21079: LD_VAR 0 12
21083: PPUSH
21084: CALL_OW 351
21088: PUSH
21089: LD_VAR 0 11
21093: PPUSH
21094: LD_VAR 0 12
21098: PPUSH
21099: CALL_OW 554
21103: AND
21104: IFFALSE 21144
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21106: LD_ADDR_VAR 0 13
21110: PUSH
21111: LD_VAR 0 13
21115: PPUSH
21116: LD_VAR 0 13
21120: PUSH
21121: LD_INT 1
21123: PLUS
21124: PPUSH
21125: LD_VAR 0 11
21129: PUSH
21130: LD_VAR 0 12
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PPUSH
21139: CALL_OW 2
21143: ST_TO_ADDR
// end ;
21144: GO 21052
21146: POP
21147: POP
21148: GO 21032
21150: POP
21151: POP
// if not list then
21152: LD_VAR 0 13
21156: NOT
21157: IFFALSE 21161
// exit ;
21159: GO 21232
// for i in list do
21161: LD_ADDR_VAR 0 6
21165: PUSH
21166: LD_VAR 0 13
21170: PUSH
21171: FOR_IN
21172: IFFALSE 21230
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21174: LD_VAR 0 1
21178: PPUSH
21179: LD_STRING M
21181: PUSH
21182: LD_VAR 0 6
21186: PUSH
21187: LD_INT 1
21189: ARRAY
21190: PUSH
21191: LD_VAR 0 6
21195: PUSH
21196: LD_INT 2
21198: ARRAY
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: LD_INT 0
21208: PUSH
21209: LD_INT 0
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: PUSH
21221: EMPTY
21222: LIST
21223: PPUSH
21224: CALL_OW 447
21228: GO 21171
21230: POP
21231: POP
// end ;
21232: LD_VAR 0 5
21236: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21237: LD_EXP 83
21241: NOT
21242: IFFALSE 21292
21244: GO 21246
21246: DISABLE
// begin initHack := true ;
21247: LD_ADDR_EXP 83
21251: PUSH
21252: LD_INT 1
21254: ST_TO_ADDR
// hackTanks := [ ] ;
21255: LD_ADDR_EXP 84
21259: PUSH
21260: EMPTY
21261: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21262: LD_ADDR_EXP 85
21266: PUSH
21267: EMPTY
21268: ST_TO_ADDR
// hackLimit := 3 ;
21269: LD_ADDR_EXP 86
21273: PUSH
21274: LD_INT 3
21276: ST_TO_ADDR
// hackDist := 12 ;
21277: LD_ADDR_EXP 87
21281: PUSH
21282: LD_INT 12
21284: ST_TO_ADDR
// hackCounter := [ ] ;
21285: LD_ADDR_EXP 88
21289: PUSH
21290: EMPTY
21291: ST_TO_ADDR
// end ;
21292: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21293: LD_EXP 83
21297: PUSH
21298: LD_INT 34
21300: PUSH
21301: LD_EXP 95
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PPUSH
21310: CALL_OW 69
21314: AND
21315: IFFALSE 21570
21317: GO 21319
21319: DISABLE
21320: LD_INT 0
21322: PPUSH
21323: PPUSH
// begin enable ;
21324: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21325: LD_ADDR_VAR 0 1
21329: PUSH
21330: LD_INT 34
21332: PUSH
21333: LD_EXP 95
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PPUSH
21342: CALL_OW 69
21346: PUSH
21347: FOR_IN
21348: IFFALSE 21568
// begin if not i in hackTanks then
21350: LD_VAR 0 1
21354: PUSH
21355: LD_EXP 84
21359: IN
21360: NOT
21361: IFFALSE 21444
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21363: LD_ADDR_EXP 84
21367: PUSH
21368: LD_EXP 84
21372: PPUSH
21373: LD_EXP 84
21377: PUSH
21378: LD_INT 1
21380: PLUS
21381: PPUSH
21382: LD_VAR 0 1
21386: PPUSH
21387: CALL_OW 1
21391: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21392: LD_ADDR_EXP 85
21396: PUSH
21397: LD_EXP 85
21401: PPUSH
21402: LD_EXP 85
21406: PUSH
21407: LD_INT 1
21409: PLUS
21410: PPUSH
21411: EMPTY
21412: PPUSH
21413: CALL_OW 1
21417: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21418: LD_ADDR_EXP 88
21422: PUSH
21423: LD_EXP 88
21427: PPUSH
21428: LD_EXP 88
21432: PUSH
21433: LD_INT 1
21435: PLUS
21436: PPUSH
21437: EMPTY
21438: PPUSH
21439: CALL_OW 1
21443: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21444: LD_VAR 0 1
21448: PPUSH
21449: CALL_OW 302
21453: NOT
21454: IFFALSE 21467
// begin HackUnlinkAll ( i ) ;
21456: LD_VAR 0 1
21460: PPUSH
21461: CALL 21573 0 1
// continue ;
21465: GO 21347
// end ; HackCheckCapturedStatus ( i ) ;
21467: LD_VAR 0 1
21471: PPUSH
21472: CALL 22016 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21476: LD_ADDR_VAR 0 2
21480: PUSH
21481: LD_INT 81
21483: PUSH
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL_OW 255
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 33
21500: PUSH
21501: LD_INT 3
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 91
21510: PUSH
21511: LD_VAR 0 1
21515: PUSH
21516: LD_EXP 87
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 50
21528: PUSH
21529: EMPTY
21530: LIST
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: PPUSH
21538: CALL_OW 69
21542: ST_TO_ADDR
// if not tmp then
21543: LD_VAR 0 2
21547: NOT
21548: IFFALSE 21552
// continue ;
21550: GO 21347
// HackLink ( i , tmp ) ;
21552: LD_VAR 0 1
21556: PPUSH
21557: LD_VAR 0 2
21561: PPUSH
21562: CALL 21709 0 2
// end ;
21566: GO 21347
21568: POP
21569: POP
// end ;
21570: PPOPN 2
21572: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21573: LD_INT 0
21575: PPUSH
21576: PPUSH
21577: PPUSH
// if not hack in hackTanks then
21578: LD_VAR 0 1
21582: PUSH
21583: LD_EXP 84
21587: IN
21588: NOT
21589: IFFALSE 21593
// exit ;
21591: GO 21704
// index := GetElementIndex ( hackTanks , hack ) ;
21593: LD_ADDR_VAR 0 4
21597: PUSH
21598: LD_EXP 84
21602: PPUSH
21603: LD_VAR 0 1
21607: PPUSH
21608: CALL 29817 0 2
21612: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21613: LD_EXP 85
21617: PUSH
21618: LD_VAR 0 4
21622: ARRAY
21623: IFFALSE 21704
// begin for i in hackTanksCaptured [ index ] do
21625: LD_ADDR_VAR 0 3
21629: PUSH
21630: LD_EXP 85
21634: PUSH
21635: LD_VAR 0 4
21639: ARRAY
21640: PUSH
21641: FOR_IN
21642: IFFALSE 21668
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21644: LD_VAR 0 3
21648: PUSH
21649: LD_INT 1
21651: ARRAY
21652: PPUSH
21653: LD_VAR 0 3
21657: PUSH
21658: LD_INT 2
21660: ARRAY
21661: PPUSH
21662: CALL_OW 235
21666: GO 21641
21668: POP
21669: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21670: LD_ADDR_EXP 85
21674: PUSH
21675: LD_EXP 85
21679: PPUSH
21680: LD_VAR 0 4
21684: PPUSH
21685: EMPTY
21686: PPUSH
21687: CALL_OW 1
21691: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21692: LD_VAR 0 1
21696: PPUSH
21697: LD_INT 0
21699: PPUSH
21700: CALL_OW 505
// end ; end ;
21704: LD_VAR 0 2
21708: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21709: LD_INT 0
21711: PPUSH
21712: PPUSH
21713: PPUSH
// if not hack in hackTanks or not vehicles then
21714: LD_VAR 0 1
21718: PUSH
21719: LD_EXP 84
21723: IN
21724: NOT
21725: PUSH
21726: LD_VAR 0 2
21730: NOT
21731: OR
21732: IFFALSE 21736
// exit ;
21734: GO 22011
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21736: LD_ADDR_VAR 0 2
21740: PUSH
21741: LD_VAR 0 1
21745: PPUSH
21746: LD_VAR 0 2
21750: PPUSH
21751: LD_INT 1
21753: PPUSH
21754: LD_INT 1
21756: PPUSH
21757: CALL 30467 0 4
21761: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21762: LD_ADDR_VAR 0 5
21766: PUSH
21767: LD_EXP 84
21771: PPUSH
21772: LD_VAR 0 1
21776: PPUSH
21777: CALL 29817 0 2
21781: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21782: LD_EXP 85
21786: PUSH
21787: LD_VAR 0 5
21791: ARRAY
21792: PUSH
21793: LD_EXP 86
21797: LESS
21798: IFFALSE 21987
// begin for i := 1 to vehicles do
21800: LD_ADDR_VAR 0 4
21804: PUSH
21805: DOUBLE
21806: LD_INT 1
21808: DEC
21809: ST_TO_ADDR
21810: LD_VAR 0 2
21814: PUSH
21815: FOR_TO
21816: IFFALSE 21985
// begin if hackTanksCaptured [ index ] = hackLimit then
21818: LD_EXP 85
21822: PUSH
21823: LD_VAR 0 5
21827: ARRAY
21828: PUSH
21829: LD_EXP 86
21833: EQUAL
21834: IFFALSE 21838
// break ;
21836: GO 21985
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21838: LD_ADDR_EXP 88
21842: PUSH
21843: LD_EXP 88
21847: PPUSH
21848: LD_VAR 0 5
21852: PPUSH
21853: LD_EXP 88
21857: PUSH
21858: LD_VAR 0 5
21862: ARRAY
21863: PUSH
21864: LD_INT 1
21866: PLUS
21867: PPUSH
21868: CALL_OW 1
21872: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21873: LD_ADDR_EXP 85
21877: PUSH
21878: LD_EXP 85
21882: PPUSH
21883: LD_VAR 0 5
21887: PUSH
21888: LD_EXP 85
21892: PUSH
21893: LD_VAR 0 5
21897: ARRAY
21898: PUSH
21899: LD_INT 1
21901: PLUS
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PPUSH
21907: LD_VAR 0 2
21911: PUSH
21912: LD_VAR 0 4
21916: ARRAY
21917: PUSH
21918: LD_VAR 0 2
21922: PUSH
21923: LD_VAR 0 4
21927: ARRAY
21928: PPUSH
21929: CALL_OW 255
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PPUSH
21938: CALL 30032 0 3
21942: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21943: LD_VAR 0 2
21947: PUSH
21948: LD_VAR 0 4
21952: ARRAY
21953: PPUSH
21954: LD_VAR 0 1
21958: PPUSH
21959: CALL_OW 255
21963: PPUSH
21964: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21968: LD_VAR 0 2
21972: PUSH
21973: LD_VAR 0 4
21977: ARRAY
21978: PPUSH
21979: CALL_OW 141
// end ;
21983: GO 21815
21985: POP
21986: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21987: LD_VAR 0 1
21991: PPUSH
21992: LD_EXP 85
21996: PUSH
21997: LD_VAR 0 5
22001: ARRAY
22002: PUSH
22003: LD_INT 0
22005: PLUS
22006: PPUSH
22007: CALL_OW 505
// end ;
22011: LD_VAR 0 3
22015: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22016: LD_INT 0
22018: PPUSH
22019: PPUSH
22020: PPUSH
22021: PPUSH
// if not hack in hackTanks then
22022: LD_VAR 0 1
22026: PUSH
22027: LD_EXP 84
22031: IN
22032: NOT
22033: IFFALSE 22037
// exit ;
22035: GO 22277
// index := GetElementIndex ( hackTanks , hack ) ;
22037: LD_ADDR_VAR 0 4
22041: PUSH
22042: LD_EXP 84
22046: PPUSH
22047: LD_VAR 0 1
22051: PPUSH
22052: CALL 29817 0 2
22056: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22057: LD_ADDR_VAR 0 3
22061: PUSH
22062: DOUBLE
22063: LD_EXP 85
22067: PUSH
22068: LD_VAR 0 4
22072: ARRAY
22073: INC
22074: ST_TO_ADDR
22075: LD_INT 1
22077: PUSH
22078: FOR_DOWNTO
22079: IFFALSE 22251
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22081: LD_ADDR_VAR 0 5
22085: PUSH
22086: LD_EXP 85
22090: PUSH
22091: LD_VAR 0 4
22095: ARRAY
22096: PUSH
22097: LD_VAR 0 3
22101: ARRAY
22102: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22103: LD_VAR 0 5
22107: PUSH
22108: LD_INT 1
22110: ARRAY
22111: PPUSH
22112: CALL_OW 302
22116: NOT
22117: PUSH
22118: LD_VAR 0 5
22122: PUSH
22123: LD_INT 1
22125: ARRAY
22126: PPUSH
22127: CALL_OW 255
22131: PUSH
22132: LD_VAR 0 1
22136: PPUSH
22137: CALL_OW 255
22141: NONEQUAL
22142: OR
22143: IFFALSE 22249
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22145: LD_VAR 0 5
22149: PUSH
22150: LD_INT 1
22152: ARRAY
22153: PPUSH
22154: CALL_OW 305
22158: PUSH
22159: LD_VAR 0 5
22163: PUSH
22164: LD_INT 1
22166: ARRAY
22167: PPUSH
22168: CALL_OW 255
22172: PUSH
22173: LD_VAR 0 1
22177: PPUSH
22178: CALL_OW 255
22182: EQUAL
22183: AND
22184: IFFALSE 22208
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22186: LD_VAR 0 5
22190: PUSH
22191: LD_INT 1
22193: ARRAY
22194: PPUSH
22195: LD_VAR 0 5
22199: PUSH
22200: LD_INT 2
22202: ARRAY
22203: PPUSH
22204: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22208: LD_ADDR_EXP 85
22212: PUSH
22213: LD_EXP 85
22217: PPUSH
22218: LD_VAR 0 4
22222: PPUSH
22223: LD_EXP 85
22227: PUSH
22228: LD_VAR 0 4
22232: ARRAY
22233: PPUSH
22234: LD_VAR 0 3
22238: PPUSH
22239: CALL_OW 3
22243: PPUSH
22244: CALL_OW 1
22248: ST_TO_ADDR
// end ; end ;
22249: GO 22078
22251: POP
22252: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22253: LD_VAR 0 1
22257: PPUSH
22258: LD_EXP 85
22262: PUSH
22263: LD_VAR 0 4
22267: ARRAY
22268: PUSH
22269: LD_INT 0
22271: PLUS
22272: PPUSH
22273: CALL_OW 505
// end ;
22277: LD_VAR 0 2
22281: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22282: LD_INT 0
22284: PPUSH
22285: PPUSH
22286: PPUSH
22287: PPUSH
// if not hack in hackTanks then
22288: LD_VAR 0 1
22292: PUSH
22293: LD_EXP 84
22297: IN
22298: NOT
22299: IFFALSE 22303
// exit ;
22301: GO 22388
// index := GetElementIndex ( hackTanks , hack ) ;
22303: LD_ADDR_VAR 0 5
22307: PUSH
22308: LD_EXP 84
22312: PPUSH
22313: LD_VAR 0 1
22317: PPUSH
22318: CALL 29817 0 2
22322: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22323: LD_ADDR_VAR 0 4
22327: PUSH
22328: DOUBLE
22329: LD_INT 1
22331: DEC
22332: ST_TO_ADDR
22333: LD_EXP 85
22337: PUSH
22338: LD_VAR 0 5
22342: ARRAY
22343: PUSH
22344: FOR_TO
22345: IFFALSE 22386
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22347: LD_EXP 85
22351: PUSH
22352: LD_VAR 0 5
22356: ARRAY
22357: PUSH
22358: LD_VAR 0 4
22362: ARRAY
22363: PUSH
22364: LD_INT 1
22366: ARRAY
22367: PUSH
22368: LD_VAR 0 2
22372: EQUAL
22373: IFFALSE 22384
// KillUnit ( vehicle ) ;
22375: LD_VAR 0 2
22379: PPUSH
22380: CALL_OW 66
22384: GO 22344
22386: POP
22387: POP
// end ;
22388: LD_VAR 0 3
22392: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22393: LD_EXP 89
22397: NOT
22398: IFFALSE 22433
22400: GO 22402
22402: DISABLE
// begin initMiner := true ;
22403: LD_ADDR_EXP 89
22407: PUSH
22408: LD_INT 1
22410: ST_TO_ADDR
// minersList := [ ] ;
22411: LD_ADDR_EXP 90
22415: PUSH
22416: EMPTY
22417: ST_TO_ADDR
// minerMinesList := [ ] ;
22418: LD_ADDR_EXP 91
22422: PUSH
22423: EMPTY
22424: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22425: LD_ADDR_EXP 92
22429: PUSH
22430: LD_INT 5
22432: ST_TO_ADDR
// end ;
22433: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22434: LD_EXP 89
22438: PUSH
22439: LD_INT 34
22441: PUSH
22442: LD_EXP 100
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PPUSH
22451: CALL_OW 69
22455: AND
22456: IFFALSE 22919
22458: GO 22460
22460: DISABLE
22461: LD_INT 0
22463: PPUSH
22464: PPUSH
22465: PPUSH
22466: PPUSH
// begin enable ;
22467: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22468: LD_ADDR_VAR 0 1
22472: PUSH
22473: LD_INT 34
22475: PUSH
22476: LD_EXP 100
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PPUSH
22485: CALL_OW 69
22489: PUSH
22490: FOR_IN
22491: IFFALSE 22563
// begin if not i in minersList then
22493: LD_VAR 0 1
22497: PUSH
22498: LD_EXP 90
22502: IN
22503: NOT
22504: IFFALSE 22561
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22506: LD_ADDR_EXP 90
22510: PUSH
22511: LD_EXP 90
22515: PPUSH
22516: LD_EXP 90
22520: PUSH
22521: LD_INT 1
22523: PLUS
22524: PPUSH
22525: LD_VAR 0 1
22529: PPUSH
22530: CALL_OW 1
22534: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22535: LD_ADDR_EXP 91
22539: PUSH
22540: LD_EXP 91
22544: PPUSH
22545: LD_EXP 91
22549: PUSH
22550: LD_INT 1
22552: PLUS
22553: PPUSH
22554: EMPTY
22555: PPUSH
22556: CALL_OW 1
22560: ST_TO_ADDR
// end end ;
22561: GO 22490
22563: POP
22564: POP
// for i := minerMinesList downto 1 do
22565: LD_ADDR_VAR 0 1
22569: PUSH
22570: DOUBLE
22571: LD_EXP 91
22575: INC
22576: ST_TO_ADDR
22577: LD_INT 1
22579: PUSH
22580: FOR_DOWNTO
22581: IFFALSE 22917
// begin if IsLive ( minersList [ i ] ) then
22583: LD_EXP 90
22587: PUSH
22588: LD_VAR 0 1
22592: ARRAY
22593: PPUSH
22594: CALL_OW 300
22598: IFFALSE 22626
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22600: LD_EXP 90
22604: PUSH
22605: LD_VAR 0 1
22609: ARRAY
22610: PPUSH
22611: LD_EXP 91
22615: PUSH
22616: LD_VAR 0 1
22620: ARRAY
22621: PPUSH
22622: CALL_OW 505
// if not minerMinesList [ i ] then
22626: LD_EXP 91
22630: PUSH
22631: LD_VAR 0 1
22635: ARRAY
22636: NOT
22637: IFFALSE 22641
// continue ;
22639: GO 22580
// for j := minerMinesList [ i ] downto 1 do
22641: LD_ADDR_VAR 0 2
22645: PUSH
22646: DOUBLE
22647: LD_EXP 91
22651: PUSH
22652: LD_VAR 0 1
22656: ARRAY
22657: INC
22658: ST_TO_ADDR
22659: LD_INT 1
22661: PUSH
22662: FOR_DOWNTO
22663: IFFALSE 22913
// begin side := GetSide ( minersList [ i ] ) ;
22665: LD_ADDR_VAR 0 3
22669: PUSH
22670: LD_EXP 90
22674: PUSH
22675: LD_VAR 0 1
22679: ARRAY
22680: PPUSH
22681: CALL_OW 255
22685: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22686: LD_ADDR_VAR 0 4
22690: PUSH
22691: LD_EXP 91
22695: PUSH
22696: LD_VAR 0 1
22700: ARRAY
22701: PUSH
22702: LD_VAR 0 2
22706: ARRAY
22707: PUSH
22708: LD_INT 1
22710: ARRAY
22711: PPUSH
22712: LD_EXP 91
22716: PUSH
22717: LD_VAR 0 1
22721: ARRAY
22722: PUSH
22723: LD_VAR 0 2
22727: ARRAY
22728: PUSH
22729: LD_INT 2
22731: ARRAY
22732: PPUSH
22733: CALL_OW 428
22737: ST_TO_ADDR
// if not tmp then
22738: LD_VAR 0 4
22742: NOT
22743: IFFALSE 22747
// continue ;
22745: GO 22662
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22747: LD_VAR 0 4
22751: PUSH
22752: LD_INT 81
22754: PUSH
22755: LD_VAR 0 3
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PPUSH
22764: CALL_OW 69
22768: IN
22769: PUSH
22770: LD_EXP 91
22774: PUSH
22775: LD_VAR 0 1
22779: ARRAY
22780: PUSH
22781: LD_VAR 0 2
22785: ARRAY
22786: PUSH
22787: LD_INT 1
22789: ARRAY
22790: PPUSH
22791: LD_EXP 91
22795: PUSH
22796: LD_VAR 0 1
22800: ARRAY
22801: PUSH
22802: LD_VAR 0 2
22806: ARRAY
22807: PUSH
22808: LD_INT 2
22810: ARRAY
22811: PPUSH
22812: CALL_OW 458
22816: AND
22817: IFFALSE 22911
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22819: LD_EXP 91
22823: PUSH
22824: LD_VAR 0 1
22828: ARRAY
22829: PUSH
22830: LD_VAR 0 2
22834: ARRAY
22835: PUSH
22836: LD_INT 1
22838: ARRAY
22839: PPUSH
22840: LD_EXP 91
22844: PUSH
22845: LD_VAR 0 1
22849: ARRAY
22850: PUSH
22851: LD_VAR 0 2
22855: ARRAY
22856: PUSH
22857: LD_INT 2
22859: ARRAY
22860: PPUSH
22861: LD_VAR 0 3
22865: PPUSH
22866: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22870: LD_ADDR_EXP 91
22874: PUSH
22875: LD_EXP 91
22879: PPUSH
22880: LD_VAR 0 1
22884: PPUSH
22885: LD_EXP 91
22889: PUSH
22890: LD_VAR 0 1
22894: ARRAY
22895: PPUSH
22896: LD_VAR 0 2
22900: PPUSH
22901: CALL_OW 3
22905: PPUSH
22906: CALL_OW 1
22910: ST_TO_ADDR
// end ; end ;
22911: GO 22662
22913: POP
22914: POP
// end ;
22915: GO 22580
22917: POP
22918: POP
// end ;
22919: PPOPN 4
22921: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22922: LD_INT 0
22924: PPUSH
22925: PPUSH
// result := false ;
22926: LD_ADDR_VAR 0 4
22930: PUSH
22931: LD_INT 0
22933: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22934: LD_VAR 0 1
22938: PPUSH
22939: CALL_OW 264
22943: PUSH
22944: LD_EXP 100
22948: EQUAL
22949: NOT
22950: IFFALSE 22954
// exit ;
22952: GO 23194
// index := GetElementIndex ( minersList , unit ) ;
22954: LD_ADDR_VAR 0 5
22958: PUSH
22959: LD_EXP 90
22963: PPUSH
22964: LD_VAR 0 1
22968: PPUSH
22969: CALL 29817 0 2
22973: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22974: LD_EXP 91
22978: PUSH
22979: LD_VAR 0 5
22983: ARRAY
22984: PUSH
22985: LD_EXP 92
22989: GREATEREQUAL
22990: IFFALSE 22994
// exit ;
22992: GO 23194
// ComMoveXY ( unit , x , y ) ;
22994: LD_VAR 0 1
22998: PPUSH
22999: LD_VAR 0 2
23003: PPUSH
23004: LD_VAR 0 3
23008: PPUSH
23009: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23013: LD_INT 35
23015: PPUSH
23016: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23020: LD_VAR 0 1
23024: PPUSH
23025: LD_VAR 0 2
23029: PPUSH
23030: LD_VAR 0 3
23034: PPUSH
23035: CALL 60536 0 3
23039: NOT
23040: PUSH
23041: LD_VAR 0 1
23045: PPUSH
23046: CALL_OW 314
23050: AND
23051: IFFALSE 23055
// exit ;
23053: GO 23194
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23055: LD_VAR 0 2
23059: PPUSH
23060: LD_VAR 0 3
23064: PPUSH
23065: CALL_OW 428
23069: PUSH
23070: LD_VAR 0 1
23074: EQUAL
23075: PUSH
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 314
23085: NOT
23086: AND
23087: IFFALSE 23013
// PlaySoundXY ( x , y , PlantMine ) ;
23089: LD_VAR 0 2
23093: PPUSH
23094: LD_VAR 0 3
23098: PPUSH
23099: LD_STRING PlantMine
23101: PPUSH
23102: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23106: LD_VAR 0 2
23110: PPUSH
23111: LD_VAR 0 3
23115: PPUSH
23116: LD_VAR 0 1
23120: PPUSH
23121: CALL_OW 255
23125: PPUSH
23126: LD_INT 0
23128: PPUSH
23129: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23133: LD_ADDR_EXP 91
23137: PUSH
23138: LD_EXP 91
23142: PPUSH
23143: LD_VAR 0 5
23147: PUSH
23148: LD_EXP 91
23152: PUSH
23153: LD_VAR 0 5
23157: ARRAY
23158: PUSH
23159: LD_INT 1
23161: PLUS
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: LD_VAR 0 2
23171: PUSH
23172: LD_VAR 0 3
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PPUSH
23181: CALL 30032 0 3
23185: ST_TO_ADDR
// result := true ;
23186: LD_ADDR_VAR 0 4
23190: PUSH
23191: LD_INT 1
23193: ST_TO_ADDR
// end ;
23194: LD_VAR 0 4
23198: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23199: LD_INT 0
23201: PPUSH
23202: PPUSH
23203: PPUSH
// if not unit in minersList then
23204: LD_VAR 0 1
23208: PUSH
23209: LD_EXP 90
23213: IN
23214: NOT
23215: IFFALSE 23219
// exit ;
23217: GO 23611
// index := GetElementIndex ( minersList , unit ) ;
23219: LD_ADDR_VAR 0 6
23223: PUSH
23224: LD_EXP 90
23228: PPUSH
23229: LD_VAR 0 1
23233: PPUSH
23234: CALL 29817 0 2
23238: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23239: LD_ADDR_VAR 0 5
23243: PUSH
23244: DOUBLE
23245: LD_EXP 91
23249: PUSH
23250: LD_VAR 0 6
23254: ARRAY
23255: INC
23256: ST_TO_ADDR
23257: LD_INT 1
23259: PUSH
23260: FOR_DOWNTO
23261: IFFALSE 23422
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23263: LD_EXP 91
23267: PUSH
23268: LD_VAR 0 6
23272: ARRAY
23273: PUSH
23274: LD_VAR 0 5
23278: ARRAY
23279: PUSH
23280: LD_INT 1
23282: ARRAY
23283: PUSH
23284: LD_VAR 0 2
23288: EQUAL
23289: PUSH
23290: LD_EXP 91
23294: PUSH
23295: LD_VAR 0 6
23299: ARRAY
23300: PUSH
23301: LD_VAR 0 5
23305: ARRAY
23306: PUSH
23307: LD_INT 2
23309: ARRAY
23310: PUSH
23311: LD_VAR 0 3
23315: EQUAL
23316: AND
23317: IFFALSE 23420
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23319: LD_EXP 91
23323: PUSH
23324: LD_VAR 0 6
23328: ARRAY
23329: PUSH
23330: LD_VAR 0 5
23334: ARRAY
23335: PUSH
23336: LD_INT 1
23338: ARRAY
23339: PPUSH
23340: LD_EXP 91
23344: PUSH
23345: LD_VAR 0 6
23349: ARRAY
23350: PUSH
23351: LD_VAR 0 5
23355: ARRAY
23356: PUSH
23357: LD_INT 2
23359: ARRAY
23360: PPUSH
23361: LD_VAR 0 1
23365: PPUSH
23366: CALL_OW 255
23370: PPUSH
23371: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23375: LD_ADDR_EXP 91
23379: PUSH
23380: LD_EXP 91
23384: PPUSH
23385: LD_VAR 0 6
23389: PPUSH
23390: LD_EXP 91
23394: PUSH
23395: LD_VAR 0 6
23399: ARRAY
23400: PPUSH
23401: LD_VAR 0 5
23405: PPUSH
23406: CALL_OW 3
23410: PPUSH
23411: CALL_OW 1
23415: ST_TO_ADDR
// exit ;
23416: POP
23417: POP
23418: GO 23611
// end ; end ;
23420: GO 23260
23422: POP
23423: POP
// for i := minerMinesList [ index ] downto 1 do
23424: LD_ADDR_VAR 0 5
23428: PUSH
23429: DOUBLE
23430: LD_EXP 91
23434: PUSH
23435: LD_VAR 0 6
23439: ARRAY
23440: INC
23441: ST_TO_ADDR
23442: LD_INT 1
23444: PUSH
23445: FOR_DOWNTO
23446: IFFALSE 23609
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23448: LD_EXP 91
23452: PUSH
23453: LD_VAR 0 6
23457: ARRAY
23458: PUSH
23459: LD_VAR 0 5
23463: ARRAY
23464: PUSH
23465: LD_INT 1
23467: ARRAY
23468: PPUSH
23469: LD_EXP 91
23473: PUSH
23474: LD_VAR 0 6
23478: ARRAY
23479: PUSH
23480: LD_VAR 0 5
23484: ARRAY
23485: PUSH
23486: LD_INT 2
23488: ARRAY
23489: PPUSH
23490: LD_VAR 0 2
23494: PPUSH
23495: LD_VAR 0 3
23499: PPUSH
23500: CALL_OW 298
23504: PUSH
23505: LD_INT 6
23507: LESS
23508: IFFALSE 23607
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23510: LD_EXP 91
23514: PUSH
23515: LD_VAR 0 6
23519: ARRAY
23520: PUSH
23521: LD_VAR 0 5
23525: ARRAY
23526: PUSH
23527: LD_INT 1
23529: ARRAY
23530: PPUSH
23531: LD_EXP 91
23535: PUSH
23536: LD_VAR 0 6
23540: ARRAY
23541: PUSH
23542: LD_VAR 0 5
23546: ARRAY
23547: PUSH
23548: LD_INT 2
23550: ARRAY
23551: PPUSH
23552: LD_VAR 0 1
23556: PPUSH
23557: CALL_OW 255
23561: PPUSH
23562: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23566: LD_ADDR_EXP 91
23570: PUSH
23571: LD_EXP 91
23575: PPUSH
23576: LD_VAR 0 6
23580: PPUSH
23581: LD_EXP 91
23585: PUSH
23586: LD_VAR 0 6
23590: ARRAY
23591: PPUSH
23592: LD_VAR 0 5
23596: PPUSH
23597: CALL_OW 3
23601: PPUSH
23602: CALL_OW 1
23606: ST_TO_ADDR
// end ; end ;
23607: GO 23445
23609: POP
23610: POP
// end ;
23611: LD_VAR 0 4
23615: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23616: LD_INT 0
23618: PPUSH
23619: PPUSH
23620: PPUSH
23621: PPUSH
23622: PPUSH
23623: PPUSH
23624: PPUSH
23625: PPUSH
23626: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23627: LD_VAR 0 1
23631: PPUSH
23632: CALL_OW 264
23636: PUSH
23637: LD_EXP 100
23641: EQUAL
23642: NOT
23643: PUSH
23644: LD_VAR 0 1
23648: PUSH
23649: LD_EXP 90
23653: IN
23654: NOT
23655: OR
23656: IFFALSE 23660
// exit ;
23658: GO 23982
// index := GetElementIndex ( minersList , unit ) ;
23660: LD_ADDR_VAR 0 6
23664: PUSH
23665: LD_EXP 90
23669: PPUSH
23670: LD_VAR 0 1
23674: PPUSH
23675: CALL 29817 0 2
23679: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23680: LD_ADDR_VAR 0 8
23684: PUSH
23685: LD_EXP 92
23689: PUSH
23690: LD_EXP 91
23694: PUSH
23695: LD_VAR 0 6
23699: ARRAY
23700: MINUS
23701: ST_TO_ADDR
// if not minesFreeAmount then
23702: LD_VAR 0 8
23706: NOT
23707: IFFALSE 23711
// exit ;
23709: GO 23982
// tmp := [ ] ;
23711: LD_ADDR_VAR 0 7
23715: PUSH
23716: EMPTY
23717: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23718: LD_ADDR_VAR 0 5
23722: PUSH
23723: DOUBLE
23724: LD_INT 1
23726: DEC
23727: ST_TO_ADDR
23728: LD_VAR 0 8
23732: PUSH
23733: FOR_TO
23734: IFFALSE 23929
// begin _d := rand ( 0 , 5 ) ;
23736: LD_ADDR_VAR 0 11
23740: PUSH
23741: LD_INT 0
23743: PPUSH
23744: LD_INT 5
23746: PPUSH
23747: CALL_OW 12
23751: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23752: LD_ADDR_VAR 0 12
23756: PUSH
23757: LD_INT 2
23759: PPUSH
23760: LD_INT 6
23762: PPUSH
23763: CALL_OW 12
23767: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23768: LD_ADDR_VAR 0 9
23772: PUSH
23773: LD_VAR 0 2
23777: PPUSH
23778: LD_VAR 0 11
23782: PPUSH
23783: LD_VAR 0 12
23787: PPUSH
23788: CALL_OW 272
23792: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23793: LD_ADDR_VAR 0 10
23797: PUSH
23798: LD_VAR 0 3
23802: PPUSH
23803: LD_VAR 0 11
23807: PPUSH
23808: LD_VAR 0 12
23812: PPUSH
23813: CALL_OW 273
23817: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23818: LD_VAR 0 9
23822: PPUSH
23823: LD_VAR 0 10
23827: PPUSH
23828: CALL_OW 488
23832: PUSH
23833: LD_VAR 0 9
23837: PUSH
23838: LD_VAR 0 10
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_VAR 0 7
23851: IN
23852: NOT
23853: AND
23854: PUSH
23855: LD_VAR 0 9
23859: PPUSH
23860: LD_VAR 0 10
23864: PPUSH
23865: CALL_OW 458
23869: NOT
23870: AND
23871: IFFALSE 23913
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23873: LD_ADDR_VAR 0 7
23877: PUSH
23878: LD_VAR 0 7
23882: PPUSH
23883: LD_VAR 0 7
23887: PUSH
23888: LD_INT 1
23890: PLUS
23891: PPUSH
23892: LD_VAR 0 9
23896: PUSH
23897: LD_VAR 0 10
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PPUSH
23906: CALL_OW 1
23910: ST_TO_ADDR
23911: GO 23927
// i := i - 1 ;
23913: LD_ADDR_VAR 0 5
23917: PUSH
23918: LD_VAR 0 5
23922: PUSH
23923: LD_INT 1
23925: MINUS
23926: ST_TO_ADDR
// end ;
23927: GO 23733
23929: POP
23930: POP
// for i in tmp do
23931: LD_ADDR_VAR 0 5
23935: PUSH
23936: LD_VAR 0 7
23940: PUSH
23941: FOR_IN
23942: IFFALSE 23980
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23944: LD_VAR 0 1
23948: PPUSH
23949: LD_VAR 0 5
23953: PUSH
23954: LD_INT 1
23956: ARRAY
23957: PPUSH
23958: LD_VAR 0 5
23962: PUSH
23963: LD_INT 2
23965: ARRAY
23966: PPUSH
23967: CALL 22922 0 3
23971: NOT
23972: IFFALSE 23978
// exit ;
23974: POP
23975: POP
23976: GO 23982
23978: GO 23941
23980: POP
23981: POP
// end ;
23982: LD_VAR 0 4
23986: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23987: LD_INT 0
23989: PPUSH
23990: PPUSH
23991: PPUSH
23992: PPUSH
23993: PPUSH
23994: PPUSH
23995: PPUSH
// if not GetClass ( unit ) = class_sniper then
23996: LD_VAR 0 1
24000: PPUSH
24001: CALL_OW 257
24005: PUSH
24006: LD_INT 5
24008: EQUAL
24009: NOT
24010: IFFALSE 24014
// exit ;
24012: GO 24402
// dist := 8 ;
24014: LD_ADDR_VAR 0 5
24018: PUSH
24019: LD_INT 8
24021: ST_TO_ADDR
// viewRange := 12 ;
24022: LD_ADDR_VAR 0 7
24026: PUSH
24027: LD_INT 12
24029: ST_TO_ADDR
// side := GetSide ( unit ) ;
24030: LD_ADDR_VAR 0 6
24034: PUSH
24035: LD_VAR 0 1
24039: PPUSH
24040: CALL_OW 255
24044: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24045: LD_INT 61
24047: PPUSH
24048: LD_VAR 0 6
24052: PPUSH
24053: CALL_OW 321
24057: PUSH
24058: LD_INT 2
24060: EQUAL
24061: IFFALSE 24071
// viewRange := 16 ;
24063: LD_ADDR_VAR 0 7
24067: PUSH
24068: LD_INT 16
24070: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24071: LD_VAR 0 1
24075: PPUSH
24076: LD_VAR 0 2
24080: PPUSH
24081: LD_VAR 0 3
24085: PPUSH
24086: CALL_OW 297
24090: PUSH
24091: LD_VAR 0 5
24095: GREATER
24096: IFFALSE 24175
// begin ComMoveXY ( unit , x , y ) ;
24098: LD_VAR 0 1
24102: PPUSH
24103: LD_VAR 0 2
24107: PPUSH
24108: LD_VAR 0 3
24112: PPUSH
24113: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24117: LD_INT 35
24119: PPUSH
24120: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24124: LD_VAR 0 1
24128: PPUSH
24129: LD_VAR 0 2
24133: PPUSH
24134: LD_VAR 0 3
24138: PPUSH
24139: CALL 60536 0 3
24143: NOT
24144: IFFALSE 24148
// exit ;
24146: GO 24402
// until GetDistUnitXY ( unit , x , y ) < dist ;
24148: LD_VAR 0 1
24152: PPUSH
24153: LD_VAR 0 2
24157: PPUSH
24158: LD_VAR 0 3
24162: PPUSH
24163: CALL_OW 297
24167: PUSH
24168: LD_VAR 0 5
24172: LESS
24173: IFFALSE 24117
// end ; ComTurnXY ( unit , x , y ) ;
24175: LD_VAR 0 1
24179: PPUSH
24180: LD_VAR 0 2
24184: PPUSH
24185: LD_VAR 0 3
24189: PPUSH
24190: CALL_OW 118
// wait ( 5 ) ;
24194: LD_INT 5
24196: PPUSH
24197: CALL_OW 67
// _d := GetDir ( unit ) ;
24201: LD_ADDR_VAR 0 10
24205: PUSH
24206: LD_VAR 0 1
24210: PPUSH
24211: CALL_OW 254
24215: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24216: LD_ADDR_VAR 0 8
24220: PUSH
24221: LD_VAR 0 1
24225: PPUSH
24226: CALL_OW 250
24230: PPUSH
24231: LD_VAR 0 10
24235: PPUSH
24236: LD_VAR 0 5
24240: PPUSH
24241: CALL_OW 272
24245: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24246: LD_ADDR_VAR 0 9
24250: PUSH
24251: LD_VAR 0 1
24255: PPUSH
24256: CALL_OW 251
24260: PPUSH
24261: LD_VAR 0 10
24265: PPUSH
24266: LD_VAR 0 5
24270: PPUSH
24271: CALL_OW 273
24275: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24276: LD_VAR 0 8
24280: PPUSH
24281: LD_VAR 0 9
24285: PPUSH
24286: CALL_OW 488
24290: NOT
24291: IFFALSE 24295
// exit ;
24293: GO 24402
// ComAnimCustom ( unit , 1 ) ;
24295: LD_VAR 0 1
24299: PPUSH
24300: LD_INT 1
24302: PPUSH
24303: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24307: LD_VAR 0 8
24311: PPUSH
24312: LD_VAR 0 9
24316: PPUSH
24317: LD_VAR 0 6
24321: PPUSH
24322: LD_VAR 0 7
24326: PPUSH
24327: CALL_OW 330
// repeat wait ( 1 ) ;
24331: LD_INT 1
24333: PPUSH
24334: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24338: LD_VAR 0 1
24342: PPUSH
24343: CALL_OW 316
24347: PUSH
24348: LD_VAR 0 1
24352: PPUSH
24353: CALL_OW 314
24357: OR
24358: PUSH
24359: LD_VAR 0 1
24363: PPUSH
24364: CALL_OW 302
24368: NOT
24369: OR
24370: PUSH
24371: LD_VAR 0 1
24375: PPUSH
24376: CALL_OW 301
24380: OR
24381: IFFALSE 24331
// RemoveSeeing ( _x , _y , side ) ;
24383: LD_VAR 0 8
24387: PPUSH
24388: LD_VAR 0 9
24392: PPUSH
24393: LD_VAR 0 6
24397: PPUSH
24398: CALL_OW 331
// end ; end_of_file
24402: LD_VAR 0 4
24406: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
24407: LD_VAR 0 1
24411: PUSH
24412: LD_INT 200
24414: DOUBLE
24415: GREATEREQUAL
24416: IFFALSE 24424
24418: LD_INT 299
24420: DOUBLE
24421: LESSEQUAL
24422: IFTRUE 24426
24424: GO 24458
24426: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
24427: LD_VAR 0 1
24431: PPUSH
24432: LD_VAR 0 2
24436: PPUSH
24437: LD_VAR 0 3
24441: PPUSH
24442: LD_VAR 0 4
24446: PPUSH
24447: LD_VAR 0 5
24451: PPUSH
24452: CALL 20145 0 5
24456: GO 24535
24458: LD_INT 300
24460: DOUBLE
24461: GREATEREQUAL
24462: IFFALSE 24470
24464: LD_INT 399
24466: DOUBLE
24467: LESSEQUAL
24468: IFTRUE 24472
24470: GO 24534
24472: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
24473: LD_VAR 0 1
24477: PPUSH
24478: LD_VAR 0 2
24482: PPUSH
24483: LD_VAR 0 3
24487: PPUSH
24488: LD_VAR 0 4
24492: PPUSH
24493: LD_VAR 0 5
24497: PPUSH
24498: LD_VAR 0 6
24502: PPUSH
24503: LD_VAR 0 7
24507: PPUSH
24508: LD_VAR 0 8
24512: PPUSH
24513: LD_VAR 0 9
24517: PPUSH
24518: LD_VAR 0 10
24522: PPUSH
24523: LD_VAR 0 11
24527: PPUSH
24528: CALL 17787 0 11
24532: GO 24535
24534: POP
// end ;
24535: PPOPN 11
24537: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
24538: LD_VAR 0 1
24542: PPUSH
24543: LD_VAR 0 2
24547: PPUSH
24548: LD_VAR 0 3
24552: PPUSH
24553: LD_VAR 0 4
24557: PPUSH
24558: LD_VAR 0 5
24562: PPUSH
24563: CALL 19881 0 5
// end ; end_of_file
24567: PPOPN 5
24569: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
24570: LD_VAR 0 1
24574: PPUSH
24575: LD_VAR 0 2
24579: PPUSH
24580: LD_VAR 0 3
24584: PPUSH
24585: LD_VAR 0 4
24589: PPUSH
24590: LD_VAR 0 5
24594: PPUSH
24595: LD_VAR 0 6
24599: PPUSH
24600: CALL 5480 0 6
// end ;
24604: PPOPN 6
24606: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
24607: LD_INT 0
24609: PPUSH
// begin if not units then
24610: LD_VAR 0 1
24614: NOT
24615: IFFALSE 24619
// exit ;
24617: GO 24707
// if p1 = 1 then
24619: LD_VAR 0 2
24623: PUSH
24624: LD_INT 1
24626: EQUAL
24627: IFFALSE 24707
// begin if p2 = 1 then
24629: LD_VAR 0 3
24633: PUSH
24634: LD_INT 1
24636: EQUAL
24637: IFFALSE 24668
// begin for i in units do
24639: LD_ADDR_VAR 0 7
24643: PUSH
24644: LD_VAR 0 1
24648: PUSH
24649: FOR_IN
24650: IFFALSE 24666
// begin SetUnitAttackType ( i , 3 ) ;
24652: LD_VAR 0 7
24656: PPUSH
24657: LD_INT 3
24659: PPUSH
24660: CALL_OW 603
// end ;
24664: GO 24649
24666: POP
24667: POP
// end ; if p2 = 2 then
24668: LD_VAR 0 3
24672: PUSH
24673: LD_INT 2
24675: EQUAL
24676: IFFALSE 24707
// begin for i in units do
24678: LD_ADDR_VAR 0 7
24682: PUSH
24683: LD_VAR 0 1
24687: PUSH
24688: FOR_IN
24689: IFFALSE 24705
// begin SetUnitAttackType ( i , 1 ) ;
24691: LD_VAR 0 7
24695: PPUSH
24696: LD_INT 1
24698: PPUSH
24699: CALL_OW 603
// end ;
24703: GO 24688
24705: POP
24706: POP
// end ; end ; end ;
24707: PPOPN 7
24709: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
24710: CALL 5455 0 0
// end ; end_of_file end_of_file
24714: PPOPN 1
24716: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24717: LD_INT 0
24719: PPUSH
// ar_miner := 81 ;
24720: LD_ADDR_EXP 100
24724: PUSH
24725: LD_INT 81
24727: ST_TO_ADDR
// ar_crane := 88 ;
24728: LD_ADDR_EXP 99
24732: PUSH
24733: LD_INT 88
24735: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24736: LD_ADDR_EXP 94
24740: PUSH
24741: LD_INT 89
24743: ST_TO_ADDR
// us_hack := 99 ;
24744: LD_ADDR_EXP 95
24748: PUSH
24749: LD_INT 99
24751: ST_TO_ADDR
// us_artillery := 97 ;
24752: LD_ADDR_EXP 96
24756: PUSH
24757: LD_INT 97
24759: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24760: LD_ADDR_EXP 97
24764: PUSH
24765: LD_INT 91
24767: ST_TO_ADDR
// ar_mortar := 92 ;
24768: LD_ADDR_EXP 98
24772: PUSH
24773: LD_INT 92
24775: ST_TO_ADDR
// ru_flamethrower := 93 ;
24776: LD_ADDR_EXP 101
24780: PUSH
24781: LD_INT 93
24783: ST_TO_ADDR
// ru_radar := 98 ;
24784: LD_ADDR_EXP 93
24788: PUSH
24789: LD_INT 98
24791: ST_TO_ADDR
// tech_Artillery := 80 ;
24792: LD_ADDR_EXP 102
24796: PUSH
24797: LD_INT 80
24799: ST_TO_ADDR
// tech_RadMat := 81 ;
24800: LD_ADDR_EXP 103
24804: PUSH
24805: LD_INT 81
24807: ST_TO_ADDR
// tech_BasicTools := 82 ;
24808: LD_ADDR_EXP 104
24812: PUSH
24813: LD_INT 82
24815: ST_TO_ADDR
// tech_Cargo := 83 ;
24816: LD_ADDR_EXP 105
24820: PUSH
24821: LD_INT 83
24823: ST_TO_ADDR
// tech_Track := 84 ;
24824: LD_ADDR_EXP 106
24828: PUSH
24829: LD_INT 84
24831: ST_TO_ADDR
// tech_Crane := 85 ;
24832: LD_ADDR_EXP 107
24836: PUSH
24837: LD_INT 85
24839: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24840: LD_ADDR_EXP 108
24844: PUSH
24845: LD_INT 86
24847: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24848: LD_ADDR_EXP 109
24852: PUSH
24853: LD_INT 87
24855: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24856: LD_ADDR_EXP 110
24860: PUSH
24861: LD_INT 88
24863: ST_TO_ADDR
// class_mastodont := 31 ;
24864: LD_ADDR_EXP 111
24868: PUSH
24869: LD_INT 31
24871: ST_TO_ADDR
// class_horse := 21 ;
24872: LD_ADDR_EXP 112
24876: PUSH
24877: LD_INT 21
24879: ST_TO_ADDR
// end ;
24880: LD_VAR 0 1
24884: RET
// every 1 do
24885: GO 24887
24887: DISABLE
// InitGlobalVariables ; end_of_file
24888: CALL 24717 0 0
24892: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24893: LD_INT 0
24895: PPUSH
24896: PPUSH
// if exist_mode then
24897: LD_VAR 0 2
24901: IFFALSE 24926
// unit := CreateCharacter ( prefix & ident ) else
24903: LD_ADDR_VAR 0 5
24907: PUSH
24908: LD_VAR 0 3
24912: PUSH
24913: LD_VAR 0 1
24917: STR
24918: PPUSH
24919: CALL_OW 34
24923: ST_TO_ADDR
24924: GO 24941
// unit := NewCharacter ( ident ) ;
24926: LD_ADDR_VAR 0 5
24930: PUSH
24931: LD_VAR 0 1
24935: PPUSH
24936: CALL_OW 25
24940: ST_TO_ADDR
// result := unit ;
24941: LD_ADDR_VAR 0 4
24945: PUSH
24946: LD_VAR 0 5
24950: ST_TO_ADDR
// end ;
24951: LD_VAR 0 4
24955: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24956: LD_INT 0
24958: PPUSH
24959: PPUSH
// if not side or not nation then
24960: LD_VAR 0 1
24964: NOT
24965: PUSH
24966: LD_VAR 0 2
24970: NOT
24971: OR
24972: IFFALSE 24976
// exit ;
24974: GO 25744
// case nation of nation_american :
24976: LD_VAR 0 2
24980: PUSH
24981: LD_INT 1
24983: DOUBLE
24984: EQUAL
24985: IFTRUE 24989
24987: GO 25203
24989: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24990: LD_ADDR_VAR 0 4
24994: PUSH
24995: LD_INT 35
24997: PUSH
24998: LD_INT 45
25000: PUSH
25001: LD_INT 46
25003: PUSH
25004: LD_INT 47
25006: PUSH
25007: LD_INT 82
25009: PUSH
25010: LD_INT 83
25012: PUSH
25013: LD_INT 84
25015: PUSH
25016: LD_INT 85
25018: PUSH
25019: LD_INT 86
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: LD_INT 2
25027: PUSH
25028: LD_INT 6
25030: PUSH
25031: LD_INT 15
25033: PUSH
25034: LD_INT 16
25036: PUSH
25037: LD_INT 7
25039: PUSH
25040: LD_INT 12
25042: PUSH
25043: LD_INT 13
25045: PUSH
25046: LD_INT 10
25048: PUSH
25049: LD_INT 14
25051: PUSH
25052: LD_INT 20
25054: PUSH
25055: LD_INT 21
25057: PUSH
25058: LD_INT 22
25060: PUSH
25061: LD_INT 25
25063: PUSH
25064: LD_INT 32
25066: PUSH
25067: LD_INT 27
25069: PUSH
25070: LD_INT 36
25072: PUSH
25073: LD_INT 69
25075: PUSH
25076: LD_INT 39
25078: PUSH
25079: LD_INT 34
25081: PUSH
25082: LD_INT 40
25084: PUSH
25085: LD_INT 48
25087: PUSH
25088: LD_INT 49
25090: PUSH
25091: LD_INT 50
25093: PUSH
25094: LD_INT 51
25096: PUSH
25097: LD_INT 52
25099: PUSH
25100: LD_INT 53
25102: PUSH
25103: LD_INT 54
25105: PUSH
25106: LD_INT 55
25108: PUSH
25109: LD_INT 56
25111: PUSH
25112: LD_INT 57
25114: PUSH
25115: LD_INT 58
25117: PUSH
25118: LD_INT 59
25120: PUSH
25121: LD_INT 60
25123: PUSH
25124: LD_INT 61
25126: PUSH
25127: LD_INT 62
25129: PUSH
25130: LD_INT 80
25132: PUSH
25133: LD_INT 82
25135: PUSH
25136: LD_INT 83
25138: PUSH
25139: LD_INT 84
25141: PUSH
25142: LD_INT 85
25144: PUSH
25145: LD_INT 86
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: ST_TO_ADDR
25201: GO 25668
25203: LD_INT 2
25205: DOUBLE
25206: EQUAL
25207: IFTRUE 25211
25209: GO 25437
25211: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25212: LD_ADDR_VAR 0 4
25216: PUSH
25217: LD_INT 35
25219: PUSH
25220: LD_INT 45
25222: PUSH
25223: LD_INT 46
25225: PUSH
25226: LD_INT 47
25228: PUSH
25229: LD_INT 82
25231: PUSH
25232: LD_INT 83
25234: PUSH
25235: LD_INT 84
25237: PUSH
25238: LD_INT 85
25240: PUSH
25241: LD_INT 87
25243: PUSH
25244: LD_INT 70
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: LD_INT 11
25252: PUSH
25253: LD_INT 3
25255: PUSH
25256: LD_INT 4
25258: PUSH
25259: LD_INT 5
25261: PUSH
25262: LD_INT 6
25264: PUSH
25265: LD_INT 15
25267: PUSH
25268: LD_INT 18
25270: PUSH
25271: LD_INT 7
25273: PUSH
25274: LD_INT 17
25276: PUSH
25277: LD_INT 8
25279: PUSH
25280: LD_INT 20
25282: PUSH
25283: LD_INT 21
25285: PUSH
25286: LD_INT 22
25288: PUSH
25289: LD_INT 72
25291: PUSH
25292: LD_INT 26
25294: PUSH
25295: LD_INT 69
25297: PUSH
25298: LD_INT 39
25300: PUSH
25301: LD_INT 40
25303: PUSH
25304: LD_INT 41
25306: PUSH
25307: LD_INT 42
25309: PUSH
25310: LD_INT 43
25312: PUSH
25313: LD_INT 48
25315: PUSH
25316: LD_INT 49
25318: PUSH
25319: LD_INT 50
25321: PUSH
25322: LD_INT 51
25324: PUSH
25325: LD_INT 52
25327: PUSH
25328: LD_INT 53
25330: PUSH
25331: LD_INT 54
25333: PUSH
25334: LD_INT 55
25336: PUSH
25337: LD_INT 56
25339: PUSH
25340: LD_INT 60
25342: PUSH
25343: LD_INT 61
25345: PUSH
25346: LD_INT 62
25348: PUSH
25349: LD_INT 66
25351: PUSH
25352: LD_INT 67
25354: PUSH
25355: LD_INT 68
25357: PUSH
25358: LD_INT 81
25360: PUSH
25361: LD_INT 82
25363: PUSH
25364: LD_INT 83
25366: PUSH
25367: LD_INT 84
25369: PUSH
25370: LD_INT 85
25372: PUSH
25373: LD_INT 87
25375: PUSH
25376: LD_INT 88
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: ST_TO_ADDR
25435: GO 25668
25437: LD_INT 3
25439: DOUBLE
25440: EQUAL
25441: IFTRUE 25445
25443: GO 25667
25445: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25446: LD_ADDR_VAR 0 4
25450: PUSH
25451: LD_INT 46
25453: PUSH
25454: LD_INT 47
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: LD_INT 2
25462: PUSH
25463: LD_INT 82
25465: PUSH
25466: LD_INT 83
25468: PUSH
25469: LD_INT 84
25471: PUSH
25472: LD_INT 85
25474: PUSH
25475: LD_INT 86
25477: PUSH
25478: LD_INT 11
25480: PUSH
25481: LD_INT 9
25483: PUSH
25484: LD_INT 20
25486: PUSH
25487: LD_INT 19
25489: PUSH
25490: LD_INT 21
25492: PUSH
25493: LD_INT 24
25495: PUSH
25496: LD_INT 22
25498: PUSH
25499: LD_INT 25
25501: PUSH
25502: LD_INT 28
25504: PUSH
25505: LD_INT 29
25507: PUSH
25508: LD_INT 30
25510: PUSH
25511: LD_INT 31
25513: PUSH
25514: LD_INT 37
25516: PUSH
25517: LD_INT 38
25519: PUSH
25520: LD_INT 32
25522: PUSH
25523: LD_INT 27
25525: PUSH
25526: LD_INT 33
25528: PUSH
25529: LD_INT 69
25531: PUSH
25532: LD_INT 39
25534: PUSH
25535: LD_INT 34
25537: PUSH
25538: LD_INT 40
25540: PUSH
25541: LD_INT 71
25543: PUSH
25544: LD_INT 23
25546: PUSH
25547: LD_INT 44
25549: PUSH
25550: LD_INT 48
25552: PUSH
25553: LD_INT 49
25555: PUSH
25556: LD_INT 50
25558: PUSH
25559: LD_INT 51
25561: PUSH
25562: LD_INT 52
25564: PUSH
25565: LD_INT 53
25567: PUSH
25568: LD_INT 54
25570: PUSH
25571: LD_INT 55
25573: PUSH
25574: LD_INT 56
25576: PUSH
25577: LD_INT 57
25579: PUSH
25580: LD_INT 58
25582: PUSH
25583: LD_INT 59
25585: PUSH
25586: LD_INT 63
25588: PUSH
25589: LD_INT 64
25591: PUSH
25592: LD_INT 65
25594: PUSH
25595: LD_INT 82
25597: PUSH
25598: LD_INT 83
25600: PUSH
25601: LD_INT 84
25603: PUSH
25604: LD_INT 85
25606: PUSH
25607: LD_INT 86
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: ST_TO_ADDR
25665: GO 25668
25667: POP
// if state > - 1 and state < 3 then
25668: LD_VAR 0 3
25672: PUSH
25673: LD_INT 1
25675: NEG
25676: GREATER
25677: PUSH
25678: LD_VAR 0 3
25682: PUSH
25683: LD_INT 3
25685: LESS
25686: AND
25687: IFFALSE 25744
// for i in result do
25689: LD_ADDR_VAR 0 5
25693: PUSH
25694: LD_VAR 0 4
25698: PUSH
25699: FOR_IN
25700: IFFALSE 25742
// if GetTech ( i , side ) <> state then
25702: LD_VAR 0 5
25706: PPUSH
25707: LD_VAR 0 1
25711: PPUSH
25712: CALL_OW 321
25716: PUSH
25717: LD_VAR 0 3
25721: NONEQUAL
25722: IFFALSE 25740
// result := result diff i ;
25724: LD_ADDR_VAR 0 4
25728: PUSH
25729: LD_VAR 0 4
25733: PUSH
25734: LD_VAR 0 5
25738: DIFF
25739: ST_TO_ADDR
25740: GO 25699
25742: POP
25743: POP
// end ;
25744: LD_VAR 0 4
25748: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25749: LD_INT 0
25751: PPUSH
25752: PPUSH
25753: PPUSH
// result := true ;
25754: LD_ADDR_VAR 0 3
25758: PUSH
25759: LD_INT 1
25761: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25762: LD_ADDR_VAR 0 5
25766: PUSH
25767: LD_VAR 0 2
25771: PPUSH
25772: CALL_OW 480
25776: ST_TO_ADDR
// if not tmp then
25777: LD_VAR 0 5
25781: NOT
25782: IFFALSE 25786
// exit ;
25784: GO 25835
// for i in tmp do
25786: LD_ADDR_VAR 0 4
25790: PUSH
25791: LD_VAR 0 5
25795: PUSH
25796: FOR_IN
25797: IFFALSE 25833
// if GetTech ( i , side ) <> state_researched then
25799: LD_VAR 0 4
25803: PPUSH
25804: LD_VAR 0 1
25808: PPUSH
25809: CALL_OW 321
25813: PUSH
25814: LD_INT 2
25816: NONEQUAL
25817: IFFALSE 25831
// begin result := false ;
25819: LD_ADDR_VAR 0 3
25823: PUSH
25824: LD_INT 0
25826: ST_TO_ADDR
// exit ;
25827: POP
25828: POP
25829: GO 25835
// end ;
25831: GO 25796
25833: POP
25834: POP
// end ;
25835: LD_VAR 0 3
25839: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25840: LD_INT 0
25842: PPUSH
25843: PPUSH
25844: PPUSH
25845: PPUSH
25846: PPUSH
25847: PPUSH
25848: PPUSH
25849: PPUSH
25850: PPUSH
25851: PPUSH
25852: PPUSH
25853: PPUSH
25854: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25855: LD_VAR 0 1
25859: NOT
25860: PUSH
25861: LD_VAR 0 1
25865: PPUSH
25866: CALL_OW 257
25870: PUSH
25871: LD_INT 9
25873: NONEQUAL
25874: OR
25875: IFFALSE 25879
// exit ;
25877: GO 26452
// side := GetSide ( unit ) ;
25879: LD_ADDR_VAR 0 9
25883: PUSH
25884: LD_VAR 0 1
25888: PPUSH
25889: CALL_OW 255
25893: ST_TO_ADDR
// tech_space := tech_spacanom ;
25894: LD_ADDR_VAR 0 12
25898: PUSH
25899: LD_INT 29
25901: ST_TO_ADDR
// tech_time := tech_taurad ;
25902: LD_ADDR_VAR 0 13
25906: PUSH
25907: LD_INT 28
25909: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25910: LD_ADDR_VAR 0 11
25914: PUSH
25915: LD_VAR 0 1
25919: PPUSH
25920: CALL_OW 310
25924: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25925: LD_VAR 0 11
25929: PPUSH
25930: CALL_OW 247
25934: PUSH
25935: LD_INT 2
25937: EQUAL
25938: IFFALSE 25942
// exit ;
25940: GO 26452
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25942: LD_ADDR_VAR 0 8
25946: PUSH
25947: LD_INT 81
25949: PUSH
25950: LD_VAR 0 9
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 3
25961: PUSH
25962: LD_INT 21
25964: PUSH
25965: LD_INT 3
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PPUSH
25980: CALL_OW 69
25984: ST_TO_ADDR
// if not tmp then
25985: LD_VAR 0 8
25989: NOT
25990: IFFALSE 25994
// exit ;
25992: GO 26452
// if in_unit then
25994: LD_VAR 0 11
25998: IFFALSE 26022
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26000: LD_ADDR_VAR 0 10
26004: PUSH
26005: LD_VAR 0 8
26009: PPUSH
26010: LD_VAR 0 11
26014: PPUSH
26015: CALL_OW 74
26019: ST_TO_ADDR
26020: GO 26042
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26022: LD_ADDR_VAR 0 10
26026: PUSH
26027: LD_VAR 0 8
26031: PPUSH
26032: LD_VAR 0 1
26036: PPUSH
26037: CALL_OW 74
26041: ST_TO_ADDR
// if not enemy then
26042: LD_VAR 0 10
26046: NOT
26047: IFFALSE 26051
// exit ;
26049: GO 26452
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26051: LD_VAR 0 11
26055: PUSH
26056: LD_VAR 0 11
26060: PPUSH
26061: LD_VAR 0 10
26065: PPUSH
26066: CALL_OW 296
26070: PUSH
26071: LD_INT 13
26073: GREATER
26074: AND
26075: PUSH
26076: LD_VAR 0 1
26080: PPUSH
26081: LD_VAR 0 10
26085: PPUSH
26086: CALL_OW 296
26090: PUSH
26091: LD_INT 12
26093: GREATER
26094: OR
26095: IFFALSE 26099
// exit ;
26097: GO 26452
// missile := [ 1 ] ;
26099: LD_ADDR_VAR 0 14
26103: PUSH
26104: LD_INT 1
26106: PUSH
26107: EMPTY
26108: LIST
26109: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26110: LD_VAR 0 9
26114: PPUSH
26115: LD_VAR 0 12
26119: PPUSH
26120: CALL_OW 325
26124: IFFALSE 26153
// missile := Replace ( missile , missile + 1 , 2 ) ;
26126: LD_ADDR_VAR 0 14
26130: PUSH
26131: LD_VAR 0 14
26135: PPUSH
26136: LD_VAR 0 14
26140: PUSH
26141: LD_INT 1
26143: PLUS
26144: PPUSH
26145: LD_INT 2
26147: PPUSH
26148: CALL_OW 1
26152: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26153: LD_VAR 0 9
26157: PPUSH
26158: LD_VAR 0 13
26162: PPUSH
26163: CALL_OW 325
26167: PUSH
26168: LD_VAR 0 10
26172: PPUSH
26173: CALL_OW 255
26177: PPUSH
26178: LD_VAR 0 13
26182: PPUSH
26183: CALL_OW 325
26187: NOT
26188: AND
26189: IFFALSE 26218
// missile := Replace ( missile , missile + 1 , 3 ) ;
26191: LD_ADDR_VAR 0 14
26195: PUSH
26196: LD_VAR 0 14
26200: PPUSH
26201: LD_VAR 0 14
26205: PUSH
26206: LD_INT 1
26208: PLUS
26209: PPUSH
26210: LD_INT 3
26212: PPUSH
26213: CALL_OW 1
26217: ST_TO_ADDR
// if missile < 2 then
26218: LD_VAR 0 14
26222: PUSH
26223: LD_INT 2
26225: LESS
26226: IFFALSE 26230
// exit ;
26228: GO 26452
// x := GetX ( enemy ) ;
26230: LD_ADDR_VAR 0 4
26234: PUSH
26235: LD_VAR 0 10
26239: PPUSH
26240: CALL_OW 250
26244: ST_TO_ADDR
// y := GetY ( enemy ) ;
26245: LD_ADDR_VAR 0 5
26249: PUSH
26250: LD_VAR 0 10
26254: PPUSH
26255: CALL_OW 251
26259: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26260: LD_ADDR_VAR 0 6
26264: PUSH
26265: LD_VAR 0 4
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PPUSH
26274: LD_INT 1
26276: PPUSH
26277: CALL_OW 12
26281: PLUS
26282: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26283: LD_ADDR_VAR 0 7
26287: PUSH
26288: LD_VAR 0 5
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PPUSH
26297: LD_INT 1
26299: PPUSH
26300: CALL_OW 12
26304: PLUS
26305: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26306: LD_VAR 0 6
26310: PPUSH
26311: LD_VAR 0 7
26315: PPUSH
26316: CALL_OW 488
26320: NOT
26321: IFFALSE 26343
// begin _x := x ;
26323: LD_ADDR_VAR 0 6
26327: PUSH
26328: LD_VAR 0 4
26332: ST_TO_ADDR
// _y := y ;
26333: LD_ADDR_VAR 0 7
26337: PUSH
26338: LD_VAR 0 5
26342: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26343: LD_ADDR_VAR 0 3
26347: PUSH
26348: LD_INT 1
26350: PPUSH
26351: LD_VAR 0 14
26355: PPUSH
26356: CALL_OW 12
26360: ST_TO_ADDR
// case i of 1 :
26361: LD_VAR 0 3
26365: PUSH
26366: LD_INT 1
26368: DOUBLE
26369: EQUAL
26370: IFTRUE 26374
26372: GO 26391
26374: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26375: LD_VAR 0 1
26379: PPUSH
26380: LD_VAR 0 10
26384: PPUSH
26385: CALL_OW 115
26389: GO 26452
26391: LD_INT 2
26393: DOUBLE
26394: EQUAL
26395: IFTRUE 26399
26397: GO 26421
26399: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26400: LD_VAR 0 1
26404: PPUSH
26405: LD_VAR 0 6
26409: PPUSH
26410: LD_VAR 0 7
26414: PPUSH
26415: CALL_OW 153
26419: GO 26452
26421: LD_INT 3
26423: DOUBLE
26424: EQUAL
26425: IFTRUE 26429
26427: GO 26451
26429: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26430: LD_VAR 0 1
26434: PPUSH
26435: LD_VAR 0 6
26439: PPUSH
26440: LD_VAR 0 7
26444: PPUSH
26445: CALL_OW 154
26449: GO 26452
26451: POP
// end ;
26452: LD_VAR 0 2
26456: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26457: LD_INT 0
26459: PPUSH
26460: PPUSH
26461: PPUSH
26462: PPUSH
26463: PPUSH
26464: PPUSH
// if not unit or not building then
26465: LD_VAR 0 1
26469: NOT
26470: PUSH
26471: LD_VAR 0 2
26475: NOT
26476: OR
26477: IFFALSE 26481
// exit ;
26479: GO 26639
// x := GetX ( building ) ;
26481: LD_ADDR_VAR 0 5
26485: PUSH
26486: LD_VAR 0 2
26490: PPUSH
26491: CALL_OW 250
26495: ST_TO_ADDR
// y := GetY ( building ) ;
26496: LD_ADDR_VAR 0 6
26500: PUSH
26501: LD_VAR 0 2
26505: PPUSH
26506: CALL_OW 251
26510: ST_TO_ADDR
// for i = 0 to 5 do
26511: LD_ADDR_VAR 0 4
26515: PUSH
26516: DOUBLE
26517: LD_INT 0
26519: DEC
26520: ST_TO_ADDR
26521: LD_INT 5
26523: PUSH
26524: FOR_TO
26525: IFFALSE 26637
// begin _x := ShiftX ( x , i , 3 ) ;
26527: LD_ADDR_VAR 0 7
26531: PUSH
26532: LD_VAR 0 5
26536: PPUSH
26537: LD_VAR 0 4
26541: PPUSH
26542: LD_INT 3
26544: PPUSH
26545: CALL_OW 272
26549: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26550: LD_ADDR_VAR 0 8
26554: PUSH
26555: LD_VAR 0 6
26559: PPUSH
26560: LD_VAR 0 4
26564: PPUSH
26565: LD_INT 3
26567: PPUSH
26568: CALL_OW 273
26572: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26573: LD_VAR 0 7
26577: PPUSH
26578: LD_VAR 0 8
26582: PPUSH
26583: CALL_OW 488
26587: NOT
26588: IFFALSE 26592
// continue ;
26590: GO 26524
// if HexInfo ( _x , _y ) = 0 then
26592: LD_VAR 0 7
26596: PPUSH
26597: LD_VAR 0 8
26601: PPUSH
26602: CALL_OW 428
26606: PUSH
26607: LD_INT 0
26609: EQUAL
26610: IFFALSE 26635
// begin ComMoveXY ( unit , _x , _y ) ;
26612: LD_VAR 0 1
26616: PPUSH
26617: LD_VAR 0 7
26621: PPUSH
26622: LD_VAR 0 8
26626: PPUSH
26627: CALL_OW 111
// exit ;
26631: POP
26632: POP
26633: GO 26639
// end ; end ;
26635: GO 26524
26637: POP
26638: POP
// end ;
26639: LD_VAR 0 3
26643: RET
// export function ScanBase ( side , base_area ) ; begin
26644: LD_INT 0
26646: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26647: LD_ADDR_VAR 0 3
26651: PUSH
26652: LD_VAR 0 2
26656: PPUSH
26657: LD_INT 81
26659: PUSH
26660: LD_VAR 0 1
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PPUSH
26669: CALL_OW 70
26673: ST_TO_ADDR
// end ;
26674: LD_VAR 0 3
26678: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26679: LD_INT 0
26681: PPUSH
26682: PPUSH
26683: PPUSH
26684: PPUSH
// result := false ;
26685: LD_ADDR_VAR 0 2
26689: PUSH
26690: LD_INT 0
26692: ST_TO_ADDR
// side := GetSide ( unit ) ;
26693: LD_ADDR_VAR 0 3
26697: PUSH
26698: LD_VAR 0 1
26702: PPUSH
26703: CALL_OW 255
26707: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26708: LD_ADDR_VAR 0 4
26712: PUSH
26713: LD_VAR 0 1
26717: PPUSH
26718: CALL_OW 248
26722: ST_TO_ADDR
// case nat of 1 :
26723: LD_VAR 0 4
26727: PUSH
26728: LD_INT 1
26730: DOUBLE
26731: EQUAL
26732: IFTRUE 26736
26734: GO 26747
26736: POP
// tech := tech_lassight ; 2 :
26737: LD_ADDR_VAR 0 5
26741: PUSH
26742: LD_INT 12
26744: ST_TO_ADDR
26745: GO 26786
26747: LD_INT 2
26749: DOUBLE
26750: EQUAL
26751: IFTRUE 26755
26753: GO 26766
26755: POP
// tech := tech_mortar ; 3 :
26756: LD_ADDR_VAR 0 5
26760: PUSH
26761: LD_INT 41
26763: ST_TO_ADDR
26764: GO 26786
26766: LD_INT 3
26768: DOUBLE
26769: EQUAL
26770: IFTRUE 26774
26772: GO 26785
26774: POP
// tech := tech_bazooka ; end ;
26775: LD_ADDR_VAR 0 5
26779: PUSH
26780: LD_INT 44
26782: ST_TO_ADDR
26783: GO 26786
26785: POP
// if Researched ( side , tech ) then
26786: LD_VAR 0 3
26790: PPUSH
26791: LD_VAR 0 5
26795: PPUSH
26796: CALL_OW 325
26800: IFFALSE 26827
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26802: LD_ADDR_VAR 0 2
26806: PUSH
26807: LD_INT 5
26809: PUSH
26810: LD_INT 8
26812: PUSH
26813: LD_INT 9
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: LIST
26820: PUSH
26821: LD_VAR 0 4
26825: ARRAY
26826: ST_TO_ADDR
// end ;
26827: LD_VAR 0 2
26831: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26832: LD_INT 0
26834: PPUSH
26835: PPUSH
26836: PPUSH
// if not mines then
26837: LD_VAR 0 2
26841: NOT
26842: IFFALSE 26846
// exit ;
26844: GO 26990
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26846: LD_ADDR_VAR 0 5
26850: PUSH
26851: LD_INT 81
26853: PUSH
26854: LD_VAR 0 1
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 3
26865: PUSH
26866: LD_INT 21
26868: PUSH
26869: LD_INT 3
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PPUSH
26884: CALL_OW 69
26888: ST_TO_ADDR
// for i in mines do
26889: LD_ADDR_VAR 0 4
26893: PUSH
26894: LD_VAR 0 2
26898: PUSH
26899: FOR_IN
26900: IFFALSE 26988
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26902: LD_VAR 0 4
26906: PUSH
26907: LD_INT 1
26909: ARRAY
26910: PPUSH
26911: LD_VAR 0 4
26915: PUSH
26916: LD_INT 2
26918: ARRAY
26919: PPUSH
26920: CALL_OW 458
26924: NOT
26925: IFFALSE 26929
// continue ;
26927: GO 26899
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26929: LD_VAR 0 4
26933: PUSH
26934: LD_INT 1
26936: ARRAY
26937: PPUSH
26938: LD_VAR 0 4
26942: PUSH
26943: LD_INT 2
26945: ARRAY
26946: PPUSH
26947: CALL_OW 428
26951: PUSH
26952: LD_VAR 0 5
26956: IN
26957: IFFALSE 26986
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26959: LD_VAR 0 4
26963: PUSH
26964: LD_INT 1
26966: ARRAY
26967: PPUSH
26968: LD_VAR 0 4
26972: PUSH
26973: LD_INT 2
26975: ARRAY
26976: PPUSH
26977: LD_VAR 0 1
26981: PPUSH
26982: CALL_OW 456
// end ;
26986: GO 26899
26988: POP
26989: POP
// end ;
26990: LD_VAR 0 3
26994: RET
// export function Count ( array ) ; var i ; begin
26995: LD_INT 0
26997: PPUSH
26998: PPUSH
// result := 0 ;
26999: LD_ADDR_VAR 0 2
27003: PUSH
27004: LD_INT 0
27006: ST_TO_ADDR
// for i in array do
27007: LD_ADDR_VAR 0 3
27011: PUSH
27012: LD_VAR 0 1
27016: PUSH
27017: FOR_IN
27018: IFFALSE 27042
// if i then
27020: LD_VAR 0 3
27024: IFFALSE 27040
// result := result + 1 ;
27026: LD_ADDR_VAR 0 2
27030: PUSH
27031: LD_VAR 0 2
27035: PUSH
27036: LD_INT 1
27038: PLUS
27039: ST_TO_ADDR
27040: GO 27017
27042: POP
27043: POP
// end ;
27044: LD_VAR 0 2
27048: RET
// export function IsEmpty ( building ) ; begin
27049: LD_INT 0
27051: PPUSH
// if not building then
27052: LD_VAR 0 1
27056: NOT
27057: IFFALSE 27061
// exit ;
27059: GO 27104
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27061: LD_ADDR_VAR 0 2
27065: PUSH
27066: LD_VAR 0 1
27070: PUSH
27071: LD_INT 22
27073: PUSH
27074: LD_VAR 0 1
27078: PPUSH
27079: CALL_OW 255
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 58
27090: PUSH
27091: EMPTY
27092: LIST
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PPUSH
27098: CALL_OW 69
27102: IN
27103: ST_TO_ADDR
// end ;
27104: LD_VAR 0 2
27108: RET
// export function IsNotFull ( building ) ; var places ; begin
27109: LD_INT 0
27111: PPUSH
27112: PPUSH
// if not building then
27113: LD_VAR 0 1
27117: NOT
27118: IFFALSE 27122
// exit ;
27120: GO 27293
// result := false ;
27122: LD_ADDR_VAR 0 2
27126: PUSH
27127: LD_INT 0
27129: ST_TO_ADDR
// places := 0 ;
27130: LD_ADDR_VAR 0 3
27134: PUSH
27135: LD_INT 0
27137: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27138: LD_VAR 0 1
27142: PPUSH
27143: CALL_OW 266
27147: PUSH
27148: LD_INT 0
27150: DOUBLE
27151: EQUAL
27152: IFTRUE 27210
27154: LD_INT 1
27156: DOUBLE
27157: EQUAL
27158: IFTRUE 27210
27160: LD_INT 6
27162: DOUBLE
27163: EQUAL
27164: IFTRUE 27210
27166: LD_INT 7
27168: DOUBLE
27169: EQUAL
27170: IFTRUE 27210
27172: LD_INT 8
27174: DOUBLE
27175: EQUAL
27176: IFTRUE 27210
27178: LD_INT 4
27180: DOUBLE
27181: EQUAL
27182: IFTRUE 27210
27184: LD_INT 5
27186: DOUBLE
27187: EQUAL
27188: IFTRUE 27210
27190: LD_INT 2
27192: DOUBLE
27193: EQUAL
27194: IFTRUE 27210
27196: LD_INT 3
27198: DOUBLE
27199: EQUAL
27200: IFTRUE 27210
27202: LD_INT 35
27204: DOUBLE
27205: EQUAL
27206: IFTRUE 27210
27208: GO 27221
27210: POP
// places := 6 ; b_bunker , b_breastwork :
27211: LD_ADDR_VAR 0 3
27215: PUSH
27216: LD_INT 6
27218: ST_TO_ADDR
27219: GO 27266
27221: LD_INT 32
27223: DOUBLE
27224: EQUAL
27225: IFTRUE 27235
27227: LD_INT 31
27229: DOUBLE
27230: EQUAL
27231: IFTRUE 27235
27233: GO 27246
27235: POP
// places := 1 ; b_control_tower :
27236: LD_ADDR_VAR 0 3
27240: PUSH
27241: LD_INT 1
27243: ST_TO_ADDR
27244: GO 27266
27246: LD_INT 36
27248: DOUBLE
27249: EQUAL
27250: IFTRUE 27254
27252: GO 27265
27254: POP
// places := 3 ; end ;
27255: LD_ADDR_VAR 0 3
27259: PUSH
27260: LD_INT 3
27262: ST_TO_ADDR
27263: GO 27266
27265: POP
// if places then
27266: LD_VAR 0 3
27270: IFFALSE 27293
// result := UnitsInside ( building ) < places ;
27272: LD_ADDR_VAR 0 2
27276: PUSH
27277: LD_VAR 0 1
27281: PPUSH
27282: CALL_OW 313
27286: PUSH
27287: LD_VAR 0 3
27291: LESS
27292: ST_TO_ADDR
// end ;
27293: LD_VAR 0 2
27297: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27298: LD_INT 0
27300: PPUSH
27301: PPUSH
27302: PPUSH
27303: PPUSH
// tmp := [ ] ;
27304: LD_ADDR_VAR 0 3
27308: PUSH
27309: EMPTY
27310: ST_TO_ADDR
// list := [ ] ;
27311: LD_ADDR_VAR 0 5
27315: PUSH
27316: EMPTY
27317: ST_TO_ADDR
// for i = 16 to 25 do
27318: LD_ADDR_VAR 0 4
27322: PUSH
27323: DOUBLE
27324: LD_INT 16
27326: DEC
27327: ST_TO_ADDR
27328: LD_INT 25
27330: PUSH
27331: FOR_TO
27332: IFFALSE 27405
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27334: LD_ADDR_VAR 0 3
27338: PUSH
27339: LD_VAR 0 3
27343: PUSH
27344: LD_INT 22
27346: PUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL_OW 255
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 91
27363: PUSH
27364: LD_VAR 0 1
27368: PUSH
27369: LD_INT 6
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 30
27379: PUSH
27380: LD_VAR 0 4
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: LIST
27393: PUSH
27394: EMPTY
27395: LIST
27396: PPUSH
27397: CALL_OW 69
27401: ADD
27402: ST_TO_ADDR
27403: GO 27331
27405: POP
27406: POP
// for i = 1 to tmp do
27407: LD_ADDR_VAR 0 4
27411: PUSH
27412: DOUBLE
27413: LD_INT 1
27415: DEC
27416: ST_TO_ADDR
27417: LD_VAR 0 3
27421: PUSH
27422: FOR_TO
27423: IFFALSE 27511
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27425: LD_ADDR_VAR 0 5
27429: PUSH
27430: LD_VAR 0 5
27434: PUSH
27435: LD_VAR 0 3
27439: PUSH
27440: LD_VAR 0 4
27444: ARRAY
27445: PPUSH
27446: CALL_OW 266
27450: PUSH
27451: LD_VAR 0 3
27455: PUSH
27456: LD_VAR 0 4
27460: ARRAY
27461: PPUSH
27462: CALL_OW 250
27466: PUSH
27467: LD_VAR 0 3
27471: PUSH
27472: LD_VAR 0 4
27476: ARRAY
27477: PPUSH
27478: CALL_OW 251
27482: PUSH
27483: LD_VAR 0 3
27487: PUSH
27488: LD_VAR 0 4
27492: ARRAY
27493: PPUSH
27494: CALL_OW 254
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: PUSH
27505: EMPTY
27506: LIST
27507: ADD
27508: ST_TO_ADDR
27509: GO 27422
27511: POP
27512: POP
// result := list ;
27513: LD_ADDR_VAR 0 2
27517: PUSH
27518: LD_VAR 0 5
27522: ST_TO_ADDR
// end ;
27523: LD_VAR 0 2
27527: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27528: LD_INT 0
27530: PPUSH
27531: PPUSH
27532: PPUSH
27533: PPUSH
27534: PPUSH
27535: PPUSH
27536: PPUSH
// if not factory then
27537: LD_VAR 0 1
27541: NOT
27542: IFFALSE 27546
// exit ;
27544: GO 28139
// if control = control_apeman then
27546: LD_VAR 0 4
27550: PUSH
27551: LD_INT 5
27553: EQUAL
27554: IFFALSE 27663
// begin tmp := UnitsInside ( factory ) ;
27556: LD_ADDR_VAR 0 8
27560: PUSH
27561: LD_VAR 0 1
27565: PPUSH
27566: CALL_OW 313
27570: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27571: LD_VAR 0 8
27575: PPUSH
27576: LD_INT 25
27578: PUSH
27579: LD_INT 12
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PPUSH
27586: CALL_OW 72
27590: NOT
27591: IFFALSE 27601
// control := control_manual ;
27593: LD_ADDR_VAR 0 4
27597: PUSH
27598: LD_INT 1
27600: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27601: LD_ADDR_VAR 0 8
27605: PUSH
27606: LD_VAR 0 1
27610: PPUSH
27611: CALL 27298 0 1
27615: ST_TO_ADDR
// if tmp then
27616: LD_VAR 0 8
27620: IFFALSE 27663
// begin for i in tmp do
27622: LD_ADDR_VAR 0 7
27626: PUSH
27627: LD_VAR 0 8
27631: PUSH
27632: FOR_IN
27633: IFFALSE 27661
// if i [ 1 ] = b_ext_radio then
27635: LD_VAR 0 7
27639: PUSH
27640: LD_INT 1
27642: ARRAY
27643: PUSH
27644: LD_INT 22
27646: EQUAL
27647: IFFALSE 27659
// begin control := control_remote ;
27649: LD_ADDR_VAR 0 4
27653: PUSH
27654: LD_INT 2
27656: ST_TO_ADDR
// break ;
27657: GO 27661
// end ;
27659: GO 27632
27661: POP
27662: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27663: LD_VAR 0 1
27667: PPUSH
27668: LD_VAR 0 2
27672: PPUSH
27673: LD_VAR 0 3
27677: PPUSH
27678: LD_VAR 0 4
27682: PPUSH
27683: LD_VAR 0 5
27687: PPUSH
27688: CALL_OW 448
27692: IFFALSE 27727
// begin result := [ chassis , engine , control , weapon ] ;
27694: LD_ADDR_VAR 0 6
27698: PUSH
27699: LD_VAR 0 2
27703: PUSH
27704: LD_VAR 0 3
27708: PUSH
27709: LD_VAR 0 4
27713: PUSH
27714: LD_VAR 0 5
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: ST_TO_ADDR
// exit ;
27725: GO 28139
// end ; _chassis := AvailableChassisList ( factory ) ;
27727: LD_ADDR_VAR 0 9
27731: PUSH
27732: LD_VAR 0 1
27736: PPUSH
27737: CALL_OW 475
27741: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27742: LD_ADDR_VAR 0 11
27746: PUSH
27747: LD_VAR 0 1
27751: PPUSH
27752: CALL_OW 476
27756: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27757: LD_ADDR_VAR 0 12
27761: PUSH
27762: LD_VAR 0 1
27766: PPUSH
27767: CALL_OW 477
27771: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27772: LD_ADDR_VAR 0 10
27776: PUSH
27777: LD_VAR 0 1
27781: PPUSH
27782: CALL_OW 478
27786: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27787: LD_VAR 0 9
27791: NOT
27792: PUSH
27793: LD_VAR 0 11
27797: NOT
27798: OR
27799: PUSH
27800: LD_VAR 0 12
27804: NOT
27805: OR
27806: PUSH
27807: LD_VAR 0 10
27811: NOT
27812: OR
27813: IFFALSE 27848
// begin result := [ chassis , engine , control , weapon ] ;
27815: LD_ADDR_VAR 0 6
27819: PUSH
27820: LD_VAR 0 2
27824: PUSH
27825: LD_VAR 0 3
27829: PUSH
27830: LD_VAR 0 4
27834: PUSH
27835: LD_VAR 0 5
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: ST_TO_ADDR
// exit ;
27846: GO 28139
// end ; if not chassis in _chassis then
27848: LD_VAR 0 2
27852: PUSH
27853: LD_VAR 0 9
27857: IN
27858: NOT
27859: IFFALSE 27885
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27861: LD_ADDR_VAR 0 2
27865: PUSH
27866: LD_VAR 0 9
27870: PUSH
27871: LD_INT 1
27873: PPUSH
27874: LD_VAR 0 9
27878: PPUSH
27879: CALL_OW 12
27883: ARRAY
27884: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27885: LD_VAR 0 2
27889: PPUSH
27890: LD_VAR 0 3
27894: PPUSH
27895: CALL 28144 0 2
27899: NOT
27900: IFFALSE 27959
// repeat engine := _engine [ 1 ] ;
27902: LD_ADDR_VAR 0 3
27906: PUSH
27907: LD_VAR 0 11
27911: PUSH
27912: LD_INT 1
27914: ARRAY
27915: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27916: LD_ADDR_VAR 0 11
27920: PUSH
27921: LD_VAR 0 11
27925: PPUSH
27926: LD_INT 1
27928: PPUSH
27929: CALL_OW 3
27933: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27934: LD_VAR 0 2
27938: PPUSH
27939: LD_VAR 0 3
27943: PPUSH
27944: CALL 28144 0 2
27948: PUSH
27949: LD_VAR 0 11
27953: PUSH
27954: EMPTY
27955: EQUAL
27956: OR
27957: IFFALSE 27902
// if not control in _control then
27959: LD_VAR 0 4
27963: PUSH
27964: LD_VAR 0 12
27968: IN
27969: NOT
27970: IFFALSE 27996
// control := _control [ rand ( 1 , _control ) ] ;
27972: LD_ADDR_VAR 0 4
27976: PUSH
27977: LD_VAR 0 12
27981: PUSH
27982: LD_INT 1
27984: PPUSH
27985: LD_VAR 0 12
27989: PPUSH
27990: CALL_OW 12
27994: ARRAY
27995: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27996: LD_VAR 0 2
28000: PPUSH
28001: LD_VAR 0 5
28005: PPUSH
28006: CALL 28364 0 2
28010: NOT
28011: IFFALSE 28070
// repeat weapon := _weapon [ 1 ] ;
28013: LD_ADDR_VAR 0 5
28017: PUSH
28018: LD_VAR 0 10
28022: PUSH
28023: LD_INT 1
28025: ARRAY
28026: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28027: LD_ADDR_VAR 0 10
28031: PUSH
28032: LD_VAR 0 10
28036: PPUSH
28037: LD_INT 1
28039: PPUSH
28040: CALL_OW 3
28044: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28045: LD_VAR 0 2
28049: PPUSH
28050: LD_VAR 0 5
28054: PPUSH
28055: CALL 28364 0 2
28059: PUSH
28060: LD_VAR 0 10
28064: PUSH
28065: EMPTY
28066: EQUAL
28067: OR
28068: IFFALSE 28013
// result := [ ] ;
28070: LD_ADDR_VAR 0 6
28074: PUSH
28075: EMPTY
28076: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28077: LD_VAR 0 1
28081: PPUSH
28082: LD_VAR 0 2
28086: PPUSH
28087: LD_VAR 0 3
28091: PPUSH
28092: LD_VAR 0 4
28096: PPUSH
28097: LD_VAR 0 5
28101: PPUSH
28102: CALL_OW 448
28106: IFFALSE 28139
// result := [ chassis , engine , control , weapon ] ;
28108: LD_ADDR_VAR 0 6
28112: PUSH
28113: LD_VAR 0 2
28117: PUSH
28118: LD_VAR 0 3
28122: PUSH
28123: LD_VAR 0 4
28127: PUSH
28128: LD_VAR 0 5
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
// end ;
28139: LD_VAR 0 6
28143: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28144: LD_INT 0
28146: PPUSH
// if not chassis or not engine then
28147: LD_VAR 0 1
28151: NOT
28152: PUSH
28153: LD_VAR 0 2
28157: NOT
28158: OR
28159: IFFALSE 28163
// exit ;
28161: GO 28359
// case engine of engine_solar :
28163: LD_VAR 0 2
28167: PUSH
28168: LD_INT 2
28170: DOUBLE
28171: EQUAL
28172: IFTRUE 28176
28174: GO 28214
28176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28177: LD_ADDR_VAR 0 3
28181: PUSH
28182: LD_INT 11
28184: PUSH
28185: LD_INT 12
28187: PUSH
28188: LD_INT 13
28190: PUSH
28191: LD_INT 14
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: LD_INT 2
28199: PUSH
28200: LD_INT 3
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: ST_TO_ADDR
28212: GO 28343
28214: LD_INT 1
28216: DOUBLE
28217: EQUAL
28218: IFTRUE 28222
28220: GO 28284
28222: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28223: LD_ADDR_VAR 0 3
28227: PUSH
28228: LD_INT 11
28230: PUSH
28231: LD_INT 12
28233: PUSH
28234: LD_INT 13
28236: PUSH
28237: LD_INT 14
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: LD_INT 2
28245: PUSH
28246: LD_INT 3
28248: PUSH
28249: LD_INT 4
28251: PUSH
28252: LD_INT 5
28254: PUSH
28255: LD_INT 21
28257: PUSH
28258: LD_INT 23
28260: PUSH
28261: LD_INT 22
28263: PUSH
28264: LD_INT 24
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: ST_TO_ADDR
28282: GO 28343
28284: LD_INT 3
28286: DOUBLE
28287: EQUAL
28288: IFTRUE 28292
28290: GO 28342
28292: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28293: LD_ADDR_VAR 0 3
28297: PUSH
28298: LD_INT 13
28300: PUSH
28301: LD_INT 14
28303: PUSH
28304: LD_INT 2
28306: PUSH
28307: LD_INT 3
28309: PUSH
28310: LD_INT 4
28312: PUSH
28313: LD_INT 5
28315: PUSH
28316: LD_INT 21
28318: PUSH
28319: LD_INT 22
28321: PUSH
28322: LD_INT 23
28324: PUSH
28325: LD_INT 24
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: ST_TO_ADDR
28340: GO 28343
28342: POP
// result := ( chassis in result ) ;
28343: LD_ADDR_VAR 0 3
28347: PUSH
28348: LD_VAR 0 1
28352: PUSH
28353: LD_VAR 0 3
28357: IN
28358: ST_TO_ADDR
// end ;
28359: LD_VAR 0 3
28363: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28364: LD_INT 0
28366: PPUSH
// if not chassis or not weapon then
28367: LD_VAR 0 1
28371: NOT
28372: PUSH
28373: LD_VAR 0 2
28377: NOT
28378: OR
28379: IFFALSE 28383
// exit ;
28381: GO 29445
// case weapon of us_machine_gun :
28383: LD_VAR 0 2
28387: PUSH
28388: LD_INT 2
28390: DOUBLE
28391: EQUAL
28392: IFTRUE 28396
28394: GO 28426
28396: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28397: LD_ADDR_VAR 0 3
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: LD_INT 2
28407: PUSH
28408: LD_INT 3
28410: PUSH
28411: LD_INT 4
28413: PUSH
28414: LD_INT 5
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: ST_TO_ADDR
28424: GO 29429
28426: LD_INT 3
28428: DOUBLE
28429: EQUAL
28430: IFTRUE 28434
28432: GO 28464
28434: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28435: LD_ADDR_VAR 0 3
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: LD_INT 3
28448: PUSH
28449: LD_INT 4
28451: PUSH
28452: LD_INT 5
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: ST_TO_ADDR
28462: GO 29429
28464: LD_INT 11
28466: DOUBLE
28467: EQUAL
28468: IFTRUE 28472
28470: GO 28502
28472: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28473: LD_ADDR_VAR 0 3
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: LD_INT 3
28486: PUSH
28487: LD_INT 4
28489: PUSH
28490: LD_INT 5
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: ST_TO_ADDR
28500: GO 29429
28502: LD_INT 4
28504: DOUBLE
28505: EQUAL
28506: IFTRUE 28510
28508: GO 28536
28510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28511: LD_ADDR_VAR 0 3
28515: PUSH
28516: LD_INT 2
28518: PUSH
28519: LD_INT 3
28521: PUSH
28522: LD_INT 4
28524: PUSH
28525: LD_INT 5
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: ST_TO_ADDR
28534: GO 29429
28536: LD_INT 5
28538: DOUBLE
28539: EQUAL
28540: IFTRUE 28544
28542: GO 28570
28544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28545: LD_ADDR_VAR 0 3
28549: PUSH
28550: LD_INT 2
28552: PUSH
28553: LD_INT 3
28555: PUSH
28556: LD_INT 4
28558: PUSH
28559: LD_INT 5
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: ST_TO_ADDR
28568: GO 29429
28570: LD_INT 9
28572: DOUBLE
28573: EQUAL
28574: IFTRUE 28578
28576: GO 28604
28578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28579: LD_ADDR_VAR 0 3
28583: PUSH
28584: LD_INT 2
28586: PUSH
28587: LD_INT 3
28589: PUSH
28590: LD_INT 4
28592: PUSH
28593: LD_INT 5
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: ST_TO_ADDR
28602: GO 29429
28604: LD_INT 7
28606: DOUBLE
28607: EQUAL
28608: IFTRUE 28612
28610: GO 28638
28612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28613: LD_ADDR_VAR 0 3
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: LD_INT 3
28623: PUSH
28624: LD_INT 4
28626: PUSH
28627: LD_INT 5
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: ST_TO_ADDR
28636: GO 29429
28638: LD_INT 12
28640: DOUBLE
28641: EQUAL
28642: IFTRUE 28646
28644: GO 28672
28646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28647: LD_ADDR_VAR 0 3
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: LD_INT 3
28657: PUSH
28658: LD_INT 4
28660: PUSH
28661: LD_INT 5
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: ST_TO_ADDR
28670: GO 29429
28672: LD_INT 13
28674: DOUBLE
28675: EQUAL
28676: IFTRUE 28680
28678: GO 28706
28680: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28681: LD_ADDR_VAR 0 3
28685: PUSH
28686: LD_INT 2
28688: PUSH
28689: LD_INT 3
28691: PUSH
28692: LD_INT 4
28694: PUSH
28695: LD_INT 5
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: ST_TO_ADDR
28704: GO 29429
28706: LD_INT 14
28708: DOUBLE
28709: EQUAL
28710: IFTRUE 28714
28712: GO 28732
28714: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28715: LD_ADDR_VAR 0 3
28719: PUSH
28720: LD_INT 4
28722: PUSH
28723: LD_INT 5
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: ST_TO_ADDR
28730: GO 29429
28732: LD_INT 6
28734: DOUBLE
28735: EQUAL
28736: IFTRUE 28740
28738: GO 28758
28740: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28741: LD_ADDR_VAR 0 3
28745: PUSH
28746: LD_INT 4
28748: PUSH
28749: LD_INT 5
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: ST_TO_ADDR
28756: GO 29429
28758: LD_INT 10
28760: DOUBLE
28761: EQUAL
28762: IFTRUE 28766
28764: GO 28784
28766: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28767: LD_ADDR_VAR 0 3
28771: PUSH
28772: LD_INT 4
28774: PUSH
28775: LD_INT 5
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: ST_TO_ADDR
28782: GO 29429
28784: LD_INT 22
28786: DOUBLE
28787: EQUAL
28788: IFTRUE 28792
28790: GO 28818
28792: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28793: LD_ADDR_VAR 0 3
28797: PUSH
28798: LD_INT 11
28800: PUSH
28801: LD_INT 12
28803: PUSH
28804: LD_INT 13
28806: PUSH
28807: LD_INT 14
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
28816: GO 29429
28818: LD_INT 23
28820: DOUBLE
28821: EQUAL
28822: IFTRUE 28826
28824: GO 28852
28826: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28827: LD_ADDR_VAR 0 3
28831: PUSH
28832: LD_INT 11
28834: PUSH
28835: LD_INT 12
28837: PUSH
28838: LD_INT 13
28840: PUSH
28841: LD_INT 14
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
28850: GO 29429
28852: LD_INT 24
28854: DOUBLE
28855: EQUAL
28856: IFTRUE 28860
28858: GO 28886
28860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28861: LD_ADDR_VAR 0 3
28865: PUSH
28866: LD_INT 11
28868: PUSH
28869: LD_INT 12
28871: PUSH
28872: LD_INT 13
28874: PUSH
28875: LD_INT 14
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
28884: GO 29429
28886: LD_INT 30
28888: DOUBLE
28889: EQUAL
28890: IFTRUE 28894
28892: GO 28920
28894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28895: LD_ADDR_VAR 0 3
28899: PUSH
28900: LD_INT 11
28902: PUSH
28903: LD_INT 12
28905: PUSH
28906: LD_INT 13
28908: PUSH
28909: LD_INT 14
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: ST_TO_ADDR
28918: GO 29429
28920: LD_INT 25
28922: DOUBLE
28923: EQUAL
28924: IFTRUE 28928
28926: GO 28946
28928: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28929: LD_ADDR_VAR 0 3
28933: PUSH
28934: LD_INT 13
28936: PUSH
28937: LD_INT 14
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: ST_TO_ADDR
28944: GO 29429
28946: LD_INT 27
28948: DOUBLE
28949: EQUAL
28950: IFTRUE 28954
28952: GO 28972
28954: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28955: LD_ADDR_VAR 0 3
28959: PUSH
28960: LD_INT 13
28962: PUSH
28963: LD_INT 14
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: ST_TO_ADDR
28970: GO 29429
28972: LD_EXP 98
28976: DOUBLE
28977: EQUAL
28978: IFTRUE 28982
28980: GO 29008
28982: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28983: LD_ADDR_VAR 0 3
28987: PUSH
28988: LD_INT 11
28990: PUSH
28991: LD_INT 12
28993: PUSH
28994: LD_INT 13
28996: PUSH
28997: LD_INT 14
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: ST_TO_ADDR
29006: GO 29429
29008: LD_INT 28
29010: DOUBLE
29011: EQUAL
29012: IFTRUE 29016
29014: GO 29034
29016: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29017: LD_ADDR_VAR 0 3
29021: PUSH
29022: LD_INT 13
29024: PUSH
29025: LD_INT 14
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: ST_TO_ADDR
29032: GO 29429
29034: LD_INT 29
29036: DOUBLE
29037: EQUAL
29038: IFTRUE 29042
29040: GO 29060
29042: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29043: LD_ADDR_VAR 0 3
29047: PUSH
29048: LD_INT 13
29050: PUSH
29051: LD_INT 14
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: ST_TO_ADDR
29058: GO 29429
29060: LD_INT 31
29062: DOUBLE
29063: EQUAL
29064: IFTRUE 29068
29066: GO 29086
29068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: LD_INT 13
29076: PUSH
29077: LD_INT 14
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: ST_TO_ADDR
29084: GO 29429
29086: LD_INT 26
29088: DOUBLE
29089: EQUAL
29090: IFTRUE 29094
29092: GO 29112
29094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29095: LD_ADDR_VAR 0 3
29099: PUSH
29100: LD_INT 13
29102: PUSH
29103: LD_INT 14
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: ST_TO_ADDR
29110: GO 29429
29112: LD_INT 42
29114: DOUBLE
29115: EQUAL
29116: IFTRUE 29120
29118: GO 29146
29120: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29121: LD_ADDR_VAR 0 3
29125: PUSH
29126: LD_INT 21
29128: PUSH
29129: LD_INT 22
29131: PUSH
29132: LD_INT 23
29134: PUSH
29135: LD_INT 24
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: ST_TO_ADDR
29144: GO 29429
29146: LD_INT 43
29148: DOUBLE
29149: EQUAL
29150: IFTRUE 29154
29152: GO 29180
29154: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29155: LD_ADDR_VAR 0 3
29159: PUSH
29160: LD_INT 21
29162: PUSH
29163: LD_INT 22
29165: PUSH
29166: LD_INT 23
29168: PUSH
29169: LD_INT 24
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: ST_TO_ADDR
29178: GO 29429
29180: LD_INT 44
29182: DOUBLE
29183: EQUAL
29184: IFTRUE 29188
29186: GO 29214
29188: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29189: LD_ADDR_VAR 0 3
29193: PUSH
29194: LD_INT 21
29196: PUSH
29197: LD_INT 22
29199: PUSH
29200: LD_INT 23
29202: PUSH
29203: LD_INT 24
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: ST_TO_ADDR
29212: GO 29429
29214: LD_INT 45
29216: DOUBLE
29217: EQUAL
29218: IFTRUE 29222
29220: GO 29248
29222: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29223: LD_ADDR_VAR 0 3
29227: PUSH
29228: LD_INT 21
29230: PUSH
29231: LD_INT 22
29233: PUSH
29234: LD_INT 23
29236: PUSH
29237: LD_INT 24
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: ST_TO_ADDR
29246: GO 29429
29248: LD_INT 49
29250: DOUBLE
29251: EQUAL
29252: IFTRUE 29256
29254: GO 29282
29256: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29257: LD_ADDR_VAR 0 3
29261: PUSH
29262: LD_INT 21
29264: PUSH
29265: LD_INT 22
29267: PUSH
29268: LD_INT 23
29270: PUSH
29271: LD_INT 24
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: ST_TO_ADDR
29280: GO 29429
29282: LD_INT 51
29284: DOUBLE
29285: EQUAL
29286: IFTRUE 29290
29288: GO 29316
29290: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29291: LD_ADDR_VAR 0 3
29295: PUSH
29296: LD_INT 21
29298: PUSH
29299: LD_INT 22
29301: PUSH
29302: LD_INT 23
29304: PUSH
29305: LD_INT 24
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: ST_TO_ADDR
29314: GO 29429
29316: LD_INT 52
29318: DOUBLE
29319: EQUAL
29320: IFTRUE 29324
29322: GO 29350
29324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29325: LD_ADDR_VAR 0 3
29329: PUSH
29330: LD_INT 21
29332: PUSH
29333: LD_INT 22
29335: PUSH
29336: LD_INT 23
29338: PUSH
29339: LD_INT 24
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: ST_TO_ADDR
29348: GO 29429
29350: LD_INT 53
29352: DOUBLE
29353: EQUAL
29354: IFTRUE 29358
29356: GO 29376
29358: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29359: LD_ADDR_VAR 0 3
29363: PUSH
29364: LD_INT 23
29366: PUSH
29367: LD_INT 24
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: ST_TO_ADDR
29374: GO 29429
29376: LD_INT 46
29378: DOUBLE
29379: EQUAL
29380: IFTRUE 29384
29382: GO 29402
29384: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29385: LD_ADDR_VAR 0 3
29389: PUSH
29390: LD_INT 23
29392: PUSH
29393: LD_INT 24
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: ST_TO_ADDR
29400: GO 29429
29402: LD_INT 47
29404: DOUBLE
29405: EQUAL
29406: IFTRUE 29410
29408: GO 29428
29410: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29411: LD_ADDR_VAR 0 3
29415: PUSH
29416: LD_INT 23
29418: PUSH
29419: LD_INT 24
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: ST_TO_ADDR
29426: GO 29429
29428: POP
// result := ( chassis in result ) ;
29429: LD_ADDR_VAR 0 3
29433: PUSH
29434: LD_VAR 0 1
29438: PUSH
29439: LD_VAR 0 3
29443: IN
29444: ST_TO_ADDR
// end ;
29445: LD_VAR 0 3
29449: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29450: LD_INT 0
29452: PPUSH
29453: PPUSH
29454: PPUSH
29455: PPUSH
29456: PPUSH
29457: PPUSH
29458: PPUSH
// result := array ;
29459: LD_ADDR_VAR 0 5
29463: PUSH
29464: LD_VAR 0 1
29468: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29469: LD_VAR 0 1
29473: NOT
29474: PUSH
29475: LD_VAR 0 2
29479: NOT
29480: OR
29481: PUSH
29482: LD_VAR 0 3
29486: NOT
29487: OR
29488: PUSH
29489: LD_VAR 0 2
29493: PUSH
29494: LD_VAR 0 1
29498: GREATER
29499: OR
29500: PUSH
29501: LD_VAR 0 3
29505: PUSH
29506: LD_VAR 0 1
29510: GREATER
29511: OR
29512: IFFALSE 29516
// exit ;
29514: GO 29812
// if direction then
29516: LD_VAR 0 4
29520: IFFALSE 29584
// begin d := 1 ;
29522: LD_ADDR_VAR 0 9
29526: PUSH
29527: LD_INT 1
29529: ST_TO_ADDR
// if i_from > i_to then
29530: LD_VAR 0 2
29534: PUSH
29535: LD_VAR 0 3
29539: GREATER
29540: IFFALSE 29566
// length := ( array - i_from ) + i_to else
29542: LD_ADDR_VAR 0 11
29546: PUSH
29547: LD_VAR 0 1
29551: PUSH
29552: LD_VAR 0 2
29556: MINUS
29557: PUSH
29558: LD_VAR 0 3
29562: PLUS
29563: ST_TO_ADDR
29564: GO 29582
// length := i_to - i_from ;
29566: LD_ADDR_VAR 0 11
29570: PUSH
29571: LD_VAR 0 3
29575: PUSH
29576: LD_VAR 0 2
29580: MINUS
29581: ST_TO_ADDR
// end else
29582: GO 29645
// begin d := - 1 ;
29584: LD_ADDR_VAR 0 9
29588: PUSH
29589: LD_INT 1
29591: NEG
29592: ST_TO_ADDR
// if i_from > i_to then
29593: LD_VAR 0 2
29597: PUSH
29598: LD_VAR 0 3
29602: GREATER
29603: IFFALSE 29623
// length := i_from - i_to else
29605: LD_ADDR_VAR 0 11
29609: PUSH
29610: LD_VAR 0 2
29614: PUSH
29615: LD_VAR 0 3
29619: MINUS
29620: ST_TO_ADDR
29621: GO 29645
// length := ( array - i_to ) + i_from ;
29623: LD_ADDR_VAR 0 11
29627: PUSH
29628: LD_VAR 0 1
29632: PUSH
29633: LD_VAR 0 3
29637: MINUS
29638: PUSH
29639: LD_VAR 0 2
29643: PLUS
29644: ST_TO_ADDR
// end ; if not length then
29645: LD_VAR 0 11
29649: NOT
29650: IFFALSE 29654
// exit ;
29652: GO 29812
// tmp := array ;
29654: LD_ADDR_VAR 0 10
29658: PUSH
29659: LD_VAR 0 1
29663: ST_TO_ADDR
// for i = 1 to length do
29664: LD_ADDR_VAR 0 6
29668: PUSH
29669: DOUBLE
29670: LD_INT 1
29672: DEC
29673: ST_TO_ADDR
29674: LD_VAR 0 11
29678: PUSH
29679: FOR_TO
29680: IFFALSE 29800
// begin for j = 1 to array do
29682: LD_ADDR_VAR 0 7
29686: PUSH
29687: DOUBLE
29688: LD_INT 1
29690: DEC
29691: ST_TO_ADDR
29692: LD_VAR 0 1
29696: PUSH
29697: FOR_TO
29698: IFFALSE 29786
// begin k := j + d ;
29700: LD_ADDR_VAR 0 8
29704: PUSH
29705: LD_VAR 0 7
29709: PUSH
29710: LD_VAR 0 9
29714: PLUS
29715: ST_TO_ADDR
// if k > array then
29716: LD_VAR 0 8
29720: PUSH
29721: LD_VAR 0 1
29725: GREATER
29726: IFFALSE 29736
// k := 1 ;
29728: LD_ADDR_VAR 0 8
29732: PUSH
29733: LD_INT 1
29735: ST_TO_ADDR
// if not k then
29736: LD_VAR 0 8
29740: NOT
29741: IFFALSE 29753
// k := array ;
29743: LD_ADDR_VAR 0 8
29747: PUSH
29748: LD_VAR 0 1
29752: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29753: LD_ADDR_VAR 0 10
29757: PUSH
29758: LD_VAR 0 10
29762: PPUSH
29763: LD_VAR 0 8
29767: PPUSH
29768: LD_VAR 0 1
29772: PUSH
29773: LD_VAR 0 7
29777: ARRAY
29778: PPUSH
29779: CALL_OW 1
29783: ST_TO_ADDR
// end ;
29784: GO 29697
29786: POP
29787: POP
// array := tmp ;
29788: LD_ADDR_VAR 0 1
29792: PUSH
29793: LD_VAR 0 10
29797: ST_TO_ADDR
// end ;
29798: GO 29679
29800: POP
29801: POP
// result := array ;
29802: LD_ADDR_VAR 0 5
29806: PUSH
29807: LD_VAR 0 1
29811: ST_TO_ADDR
// end ;
29812: LD_VAR 0 5
29816: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29817: LD_INT 0
29819: PPUSH
29820: PPUSH
// result := 0 ;
29821: LD_ADDR_VAR 0 3
29825: PUSH
29826: LD_INT 0
29828: ST_TO_ADDR
// if not array or not value in array then
29829: LD_VAR 0 1
29833: NOT
29834: PUSH
29835: LD_VAR 0 2
29839: PUSH
29840: LD_VAR 0 1
29844: IN
29845: NOT
29846: OR
29847: IFFALSE 29851
// exit ;
29849: GO 29905
// for i = 1 to array do
29851: LD_ADDR_VAR 0 4
29855: PUSH
29856: DOUBLE
29857: LD_INT 1
29859: DEC
29860: ST_TO_ADDR
29861: LD_VAR 0 1
29865: PUSH
29866: FOR_TO
29867: IFFALSE 29903
// if value = array [ i ] then
29869: LD_VAR 0 2
29873: PUSH
29874: LD_VAR 0 1
29878: PUSH
29879: LD_VAR 0 4
29883: ARRAY
29884: EQUAL
29885: IFFALSE 29901
// begin result := i ;
29887: LD_ADDR_VAR 0 3
29891: PUSH
29892: LD_VAR 0 4
29896: ST_TO_ADDR
// exit ;
29897: POP
29898: POP
29899: GO 29905
// end ;
29901: GO 29866
29903: POP
29904: POP
// end ;
29905: LD_VAR 0 3
29909: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29910: LD_INT 0
29912: PPUSH
// vc_chassis := chassis ;
29913: LD_ADDR_OWVAR 37
29917: PUSH
29918: LD_VAR 0 1
29922: ST_TO_ADDR
// vc_engine := engine ;
29923: LD_ADDR_OWVAR 39
29927: PUSH
29928: LD_VAR 0 2
29932: ST_TO_ADDR
// vc_control := control ;
29933: LD_ADDR_OWVAR 38
29937: PUSH
29938: LD_VAR 0 3
29942: ST_TO_ADDR
// vc_weapon := weapon ;
29943: LD_ADDR_OWVAR 40
29947: PUSH
29948: LD_VAR 0 4
29952: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29953: LD_ADDR_OWVAR 41
29957: PUSH
29958: LD_VAR 0 5
29962: ST_TO_ADDR
// end ;
29963: LD_VAR 0 6
29967: RET
// export function WantPlant ( unit ) ; var task ; begin
29968: LD_INT 0
29970: PPUSH
29971: PPUSH
// result := false ;
29972: LD_ADDR_VAR 0 2
29976: PUSH
29977: LD_INT 0
29979: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29980: LD_ADDR_VAR 0 3
29984: PUSH
29985: LD_VAR 0 1
29989: PPUSH
29990: CALL_OW 437
29994: ST_TO_ADDR
// if task then
29995: LD_VAR 0 3
29999: IFFALSE 30027
// if task [ 1 ] [ 1 ] = p then
30001: LD_VAR 0 3
30005: PUSH
30006: LD_INT 1
30008: ARRAY
30009: PUSH
30010: LD_INT 1
30012: ARRAY
30013: PUSH
30014: LD_STRING p
30016: EQUAL
30017: IFFALSE 30027
// result := true ;
30019: LD_ADDR_VAR 0 2
30023: PUSH
30024: LD_INT 1
30026: ST_TO_ADDR
// end ;
30027: LD_VAR 0 2
30031: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30032: LD_INT 0
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
// if pos < 1 then
30038: LD_VAR 0 2
30042: PUSH
30043: LD_INT 1
30045: LESS
30046: IFFALSE 30050
// exit ;
30048: GO 30353
// if pos = 1 then
30050: LD_VAR 0 2
30054: PUSH
30055: LD_INT 1
30057: EQUAL
30058: IFFALSE 30091
// result := Replace ( arr , pos [ 1 ] , value ) else
30060: LD_ADDR_VAR 0 4
30064: PUSH
30065: LD_VAR 0 1
30069: PPUSH
30070: LD_VAR 0 2
30074: PUSH
30075: LD_INT 1
30077: ARRAY
30078: PPUSH
30079: LD_VAR 0 3
30083: PPUSH
30084: CALL_OW 1
30088: ST_TO_ADDR
30089: GO 30353
// begin tmp := arr ;
30091: LD_ADDR_VAR 0 6
30095: PUSH
30096: LD_VAR 0 1
30100: ST_TO_ADDR
// s_arr := [ tmp ] ;
30101: LD_ADDR_VAR 0 7
30105: PUSH
30106: LD_VAR 0 6
30110: PUSH
30111: EMPTY
30112: LIST
30113: ST_TO_ADDR
// for i = 1 to pos - 1 do
30114: LD_ADDR_VAR 0 5
30118: PUSH
30119: DOUBLE
30120: LD_INT 1
30122: DEC
30123: ST_TO_ADDR
30124: LD_VAR 0 2
30128: PUSH
30129: LD_INT 1
30131: MINUS
30132: PUSH
30133: FOR_TO
30134: IFFALSE 30179
// begin tmp := tmp [ pos [ i ] ] ;
30136: LD_ADDR_VAR 0 6
30140: PUSH
30141: LD_VAR 0 6
30145: PUSH
30146: LD_VAR 0 2
30150: PUSH
30151: LD_VAR 0 5
30155: ARRAY
30156: ARRAY
30157: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30158: LD_ADDR_VAR 0 7
30162: PUSH
30163: LD_VAR 0 7
30167: PUSH
30168: LD_VAR 0 6
30172: PUSH
30173: EMPTY
30174: LIST
30175: ADD
30176: ST_TO_ADDR
// end ;
30177: GO 30133
30179: POP
30180: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30181: LD_ADDR_VAR 0 6
30185: PUSH
30186: LD_VAR 0 6
30190: PPUSH
30191: LD_VAR 0 2
30195: PUSH
30196: LD_VAR 0 2
30200: ARRAY
30201: PPUSH
30202: LD_VAR 0 3
30206: PPUSH
30207: CALL_OW 1
30211: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30212: LD_ADDR_VAR 0 7
30216: PUSH
30217: LD_VAR 0 7
30221: PPUSH
30222: LD_VAR 0 7
30226: PPUSH
30227: LD_VAR 0 6
30231: PPUSH
30232: CALL_OW 1
30236: ST_TO_ADDR
// for i = s_arr downto 2 do
30237: LD_ADDR_VAR 0 5
30241: PUSH
30242: DOUBLE
30243: LD_VAR 0 7
30247: INC
30248: ST_TO_ADDR
30249: LD_INT 2
30251: PUSH
30252: FOR_DOWNTO
30253: IFFALSE 30337
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30255: LD_ADDR_VAR 0 6
30259: PUSH
30260: LD_VAR 0 7
30264: PUSH
30265: LD_VAR 0 5
30269: PUSH
30270: LD_INT 1
30272: MINUS
30273: ARRAY
30274: PPUSH
30275: LD_VAR 0 2
30279: PUSH
30280: LD_VAR 0 5
30284: PUSH
30285: LD_INT 1
30287: MINUS
30288: ARRAY
30289: PPUSH
30290: LD_VAR 0 7
30294: PUSH
30295: LD_VAR 0 5
30299: ARRAY
30300: PPUSH
30301: CALL_OW 1
30305: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30306: LD_ADDR_VAR 0 7
30310: PUSH
30311: LD_VAR 0 7
30315: PPUSH
30316: LD_VAR 0 5
30320: PUSH
30321: LD_INT 1
30323: MINUS
30324: PPUSH
30325: LD_VAR 0 6
30329: PPUSH
30330: CALL_OW 1
30334: ST_TO_ADDR
// end ;
30335: GO 30252
30337: POP
30338: POP
// result := s_arr [ 1 ] ;
30339: LD_ADDR_VAR 0 4
30343: PUSH
30344: LD_VAR 0 7
30348: PUSH
30349: LD_INT 1
30351: ARRAY
30352: ST_TO_ADDR
// end ; end ;
30353: LD_VAR 0 4
30357: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30358: LD_INT 0
30360: PPUSH
30361: PPUSH
// if not list then
30362: LD_VAR 0 1
30366: NOT
30367: IFFALSE 30371
// exit ;
30369: GO 30462
// i := list [ pos1 ] ;
30371: LD_ADDR_VAR 0 5
30375: PUSH
30376: LD_VAR 0 1
30380: PUSH
30381: LD_VAR 0 2
30385: ARRAY
30386: ST_TO_ADDR
// if not i then
30387: LD_VAR 0 5
30391: NOT
30392: IFFALSE 30396
// exit ;
30394: GO 30462
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30396: LD_ADDR_VAR 0 1
30400: PUSH
30401: LD_VAR 0 1
30405: PPUSH
30406: LD_VAR 0 2
30410: PPUSH
30411: LD_VAR 0 1
30415: PUSH
30416: LD_VAR 0 3
30420: ARRAY
30421: PPUSH
30422: CALL_OW 1
30426: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30427: LD_ADDR_VAR 0 1
30431: PUSH
30432: LD_VAR 0 1
30436: PPUSH
30437: LD_VAR 0 3
30441: PPUSH
30442: LD_VAR 0 5
30446: PPUSH
30447: CALL_OW 1
30451: ST_TO_ADDR
// result := list ;
30452: LD_ADDR_VAR 0 4
30456: PUSH
30457: LD_VAR 0 1
30461: ST_TO_ADDR
// end ;
30462: LD_VAR 0 4
30466: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30467: LD_INT 0
30469: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30470: LD_ADDR_VAR 0 5
30474: PUSH
30475: LD_VAR 0 1
30479: PPUSH
30480: CALL_OW 250
30484: PPUSH
30485: LD_VAR 0 1
30489: PPUSH
30490: CALL_OW 251
30494: PPUSH
30495: LD_VAR 0 2
30499: PPUSH
30500: LD_VAR 0 3
30504: PPUSH
30505: LD_VAR 0 4
30509: PPUSH
30510: CALL 30520 0 5
30514: ST_TO_ADDR
// end ;
30515: LD_VAR 0 5
30519: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30520: LD_INT 0
30522: PPUSH
30523: PPUSH
30524: PPUSH
30525: PPUSH
// if not list then
30526: LD_VAR 0 3
30530: NOT
30531: IFFALSE 30535
// exit ;
30533: GO 30923
// result := [ ] ;
30535: LD_ADDR_VAR 0 6
30539: PUSH
30540: EMPTY
30541: ST_TO_ADDR
// for i in list do
30542: LD_ADDR_VAR 0 7
30546: PUSH
30547: LD_VAR 0 3
30551: PUSH
30552: FOR_IN
30553: IFFALSE 30755
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30555: LD_ADDR_VAR 0 9
30559: PUSH
30560: LD_VAR 0 7
30564: PPUSH
30565: LD_VAR 0 1
30569: PPUSH
30570: LD_VAR 0 2
30574: PPUSH
30575: CALL_OW 297
30579: ST_TO_ADDR
// if not result then
30580: LD_VAR 0 6
30584: NOT
30585: IFFALSE 30611
// result := [ [ i , tmp ] ] else
30587: LD_ADDR_VAR 0 6
30591: PUSH
30592: LD_VAR 0 7
30596: PUSH
30597: LD_VAR 0 9
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: ST_TO_ADDR
30609: GO 30753
// begin if result [ result ] [ 2 ] < tmp then
30611: LD_VAR 0 6
30615: PUSH
30616: LD_VAR 0 6
30620: ARRAY
30621: PUSH
30622: LD_INT 2
30624: ARRAY
30625: PUSH
30626: LD_VAR 0 9
30630: LESS
30631: IFFALSE 30673
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30633: LD_ADDR_VAR 0 6
30637: PUSH
30638: LD_VAR 0 6
30642: PPUSH
30643: LD_VAR 0 6
30647: PUSH
30648: LD_INT 1
30650: PLUS
30651: PPUSH
30652: LD_VAR 0 7
30656: PUSH
30657: LD_VAR 0 9
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PPUSH
30666: CALL_OW 2
30670: ST_TO_ADDR
30671: GO 30753
// for j = 1 to result do
30673: LD_ADDR_VAR 0 8
30677: PUSH
30678: DOUBLE
30679: LD_INT 1
30681: DEC
30682: ST_TO_ADDR
30683: LD_VAR 0 6
30687: PUSH
30688: FOR_TO
30689: IFFALSE 30751
// begin if tmp < result [ j ] [ 2 ] then
30691: LD_VAR 0 9
30695: PUSH
30696: LD_VAR 0 6
30700: PUSH
30701: LD_VAR 0 8
30705: ARRAY
30706: PUSH
30707: LD_INT 2
30709: ARRAY
30710: LESS
30711: IFFALSE 30749
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30713: LD_ADDR_VAR 0 6
30717: PUSH
30718: LD_VAR 0 6
30722: PPUSH
30723: LD_VAR 0 8
30727: PPUSH
30728: LD_VAR 0 7
30732: PUSH
30733: LD_VAR 0 9
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PPUSH
30742: CALL_OW 2
30746: ST_TO_ADDR
// break ;
30747: GO 30751
// end ; end ;
30749: GO 30688
30751: POP
30752: POP
// end ; end ;
30753: GO 30552
30755: POP
30756: POP
// if result and not asc then
30757: LD_VAR 0 6
30761: PUSH
30762: LD_VAR 0 4
30766: NOT
30767: AND
30768: IFFALSE 30843
// begin tmp := result ;
30770: LD_ADDR_VAR 0 9
30774: PUSH
30775: LD_VAR 0 6
30779: ST_TO_ADDR
// for i = tmp downto 1 do
30780: LD_ADDR_VAR 0 7
30784: PUSH
30785: DOUBLE
30786: LD_VAR 0 9
30790: INC
30791: ST_TO_ADDR
30792: LD_INT 1
30794: PUSH
30795: FOR_DOWNTO
30796: IFFALSE 30841
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30798: LD_ADDR_VAR 0 6
30802: PUSH
30803: LD_VAR 0 6
30807: PPUSH
30808: LD_VAR 0 9
30812: PUSH
30813: LD_VAR 0 7
30817: MINUS
30818: PUSH
30819: LD_INT 1
30821: PLUS
30822: PPUSH
30823: LD_VAR 0 9
30827: PUSH
30828: LD_VAR 0 7
30832: ARRAY
30833: PPUSH
30834: CALL_OW 1
30838: ST_TO_ADDR
30839: GO 30795
30841: POP
30842: POP
// end ; tmp := [ ] ;
30843: LD_ADDR_VAR 0 9
30847: PUSH
30848: EMPTY
30849: ST_TO_ADDR
// if mode then
30850: LD_VAR 0 5
30854: IFFALSE 30923
// begin for i = 1 to result do
30856: LD_ADDR_VAR 0 7
30860: PUSH
30861: DOUBLE
30862: LD_INT 1
30864: DEC
30865: ST_TO_ADDR
30866: LD_VAR 0 6
30870: PUSH
30871: FOR_TO
30872: IFFALSE 30911
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30874: LD_ADDR_VAR 0 9
30878: PUSH
30879: LD_VAR 0 9
30883: PPUSH
30884: LD_VAR 0 7
30888: PPUSH
30889: LD_VAR 0 6
30893: PUSH
30894: LD_VAR 0 7
30898: ARRAY
30899: PUSH
30900: LD_INT 1
30902: ARRAY
30903: PPUSH
30904: CALL_OW 1
30908: ST_TO_ADDR
30909: GO 30871
30911: POP
30912: POP
// result := tmp ;
30913: LD_ADDR_VAR 0 6
30917: PUSH
30918: LD_VAR 0 9
30922: ST_TO_ADDR
// end ; end ;
30923: LD_VAR 0 6
30927: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30928: LD_INT 0
30930: PPUSH
30931: PPUSH
30932: PPUSH
30933: PPUSH
30934: PPUSH
30935: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30936: LD_ADDR_VAR 0 5
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: EMPTY
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: ST_TO_ADDR
// if not x or not y then
30958: LD_VAR 0 2
30962: NOT
30963: PUSH
30964: LD_VAR 0 3
30968: NOT
30969: OR
30970: IFFALSE 30974
// exit ;
30972: GO 32626
// if not range then
30974: LD_VAR 0 4
30978: NOT
30979: IFFALSE 30989
// range := 10 ;
30981: LD_ADDR_VAR 0 4
30985: PUSH
30986: LD_INT 10
30988: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30989: LD_ADDR_VAR 0 8
30993: PUSH
30994: LD_INT 81
30996: PUSH
30997: LD_VAR 0 1
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 92
31008: PUSH
31009: LD_VAR 0 2
31013: PUSH
31014: LD_VAR 0 3
31018: PUSH
31019: LD_VAR 0 4
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 3
31032: PUSH
31033: LD_INT 21
31035: PUSH
31036: LD_INT 3
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: LIST
31051: PPUSH
31052: CALL_OW 69
31056: ST_TO_ADDR
// if not tmp then
31057: LD_VAR 0 8
31061: NOT
31062: IFFALSE 31066
// exit ;
31064: GO 32626
// for i in tmp do
31066: LD_ADDR_VAR 0 6
31070: PUSH
31071: LD_VAR 0 8
31075: PUSH
31076: FOR_IN
31077: IFFALSE 32601
// begin points := [ 0 , 0 , 0 ] ;
31079: LD_ADDR_VAR 0 9
31083: PUSH
31084: LD_INT 0
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: LIST
31097: ST_TO_ADDR
// bpoints := 1 ;
31098: LD_ADDR_VAR 0 10
31102: PUSH
31103: LD_INT 1
31105: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31106: LD_VAR 0 6
31110: PPUSH
31111: CALL_OW 247
31115: PUSH
31116: LD_INT 1
31118: DOUBLE
31119: EQUAL
31120: IFTRUE 31124
31122: GO 31702
31124: POP
// begin if GetClass ( i ) = 1 then
31125: LD_VAR 0 6
31129: PPUSH
31130: CALL_OW 257
31134: PUSH
31135: LD_INT 1
31137: EQUAL
31138: IFFALSE 31159
// points := [ 10 , 5 , 3 ] ;
31140: LD_ADDR_VAR 0 9
31144: PUSH
31145: LD_INT 10
31147: PUSH
31148: LD_INT 5
31150: PUSH
31151: LD_INT 3
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: LIST
31158: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31159: LD_VAR 0 6
31163: PPUSH
31164: CALL_OW 257
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: LD_INT 3
31174: PUSH
31175: LD_INT 4
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: IN
31183: IFFALSE 31204
// points := [ 3 , 2 , 1 ] ;
31185: LD_ADDR_VAR 0 9
31189: PUSH
31190: LD_INT 3
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: LD_INT 1
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: LIST
31203: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31204: LD_VAR 0 6
31208: PPUSH
31209: CALL_OW 257
31213: PUSH
31214: LD_INT 5
31216: EQUAL
31217: IFFALSE 31238
// points := [ 130 , 5 , 2 ] ;
31219: LD_ADDR_VAR 0 9
31223: PUSH
31224: LD_INT 130
31226: PUSH
31227: LD_INT 5
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: LIST
31237: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31238: LD_VAR 0 6
31242: PPUSH
31243: CALL_OW 257
31247: PUSH
31248: LD_INT 8
31250: EQUAL
31251: IFFALSE 31272
// points := [ 35 , 35 , 30 ] ;
31253: LD_ADDR_VAR 0 9
31257: PUSH
31258: LD_INT 35
31260: PUSH
31261: LD_INT 35
31263: PUSH
31264: LD_INT 30
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31272: LD_VAR 0 6
31276: PPUSH
31277: CALL_OW 257
31281: PUSH
31282: LD_INT 9
31284: EQUAL
31285: IFFALSE 31306
// points := [ 20 , 55 , 40 ] ;
31287: LD_ADDR_VAR 0 9
31291: PUSH
31292: LD_INT 20
31294: PUSH
31295: LD_INT 55
31297: PUSH
31298: LD_INT 40
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31306: LD_VAR 0 6
31310: PPUSH
31311: CALL_OW 257
31315: PUSH
31316: LD_INT 12
31318: PUSH
31319: LD_INT 16
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: IN
31326: IFFALSE 31347
// points := [ 5 , 3 , 2 ] ;
31328: LD_ADDR_VAR 0 9
31332: PUSH
31333: LD_INT 5
31335: PUSH
31336: LD_INT 3
31338: PUSH
31339: LD_INT 2
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: LIST
31346: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31347: LD_VAR 0 6
31351: PPUSH
31352: CALL_OW 257
31356: PUSH
31357: LD_INT 17
31359: EQUAL
31360: IFFALSE 31381
// points := [ 100 , 50 , 75 ] ;
31362: LD_ADDR_VAR 0 9
31366: PUSH
31367: LD_INT 100
31369: PUSH
31370: LD_INT 50
31372: PUSH
31373: LD_INT 75
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31381: LD_VAR 0 6
31385: PPUSH
31386: CALL_OW 257
31390: PUSH
31391: LD_INT 15
31393: EQUAL
31394: IFFALSE 31415
// points := [ 10 , 5 , 3 ] ;
31396: LD_ADDR_VAR 0 9
31400: PUSH
31401: LD_INT 10
31403: PUSH
31404: LD_INT 5
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: LIST
31414: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31415: LD_VAR 0 6
31419: PPUSH
31420: CALL_OW 257
31424: PUSH
31425: LD_INT 14
31427: EQUAL
31428: IFFALSE 31449
// points := [ 10 , 0 , 0 ] ;
31430: LD_ADDR_VAR 0 9
31434: PUSH
31435: LD_INT 10
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: LIST
31448: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31449: LD_VAR 0 6
31453: PPUSH
31454: CALL_OW 257
31458: PUSH
31459: LD_INT 11
31461: EQUAL
31462: IFFALSE 31483
// points := [ 30 , 10 , 5 ] ;
31464: LD_ADDR_VAR 0 9
31468: PUSH
31469: LD_INT 30
31471: PUSH
31472: LD_INT 10
31474: PUSH
31475: LD_INT 5
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: LIST
31482: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31483: LD_VAR 0 1
31487: PPUSH
31488: LD_INT 5
31490: PPUSH
31491: CALL_OW 321
31495: PUSH
31496: LD_INT 2
31498: EQUAL
31499: IFFALSE 31516
// bpoints := bpoints * 1.8 ;
31501: LD_ADDR_VAR 0 10
31505: PUSH
31506: LD_VAR 0 10
31510: PUSH
31511: LD_REAL  1.80000000000000E+0000
31514: MUL
31515: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31516: LD_VAR 0 6
31520: PPUSH
31521: CALL_OW 257
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: LD_INT 3
31534: PUSH
31535: LD_INT 4
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: IN
31544: PUSH
31545: LD_VAR 0 1
31549: PPUSH
31550: LD_INT 51
31552: PPUSH
31553: CALL_OW 321
31557: PUSH
31558: LD_INT 2
31560: EQUAL
31561: AND
31562: IFFALSE 31579
// bpoints := bpoints * 1.2 ;
31564: LD_ADDR_VAR 0 10
31568: PUSH
31569: LD_VAR 0 10
31573: PUSH
31574: LD_REAL  1.20000000000000E+0000
31577: MUL
31578: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31579: LD_VAR 0 6
31583: PPUSH
31584: CALL_OW 257
31588: PUSH
31589: LD_INT 5
31591: PUSH
31592: LD_INT 7
31594: PUSH
31595: LD_INT 9
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: IN
31603: PUSH
31604: LD_VAR 0 1
31608: PPUSH
31609: LD_INT 52
31611: PPUSH
31612: CALL_OW 321
31616: PUSH
31617: LD_INT 2
31619: EQUAL
31620: AND
31621: IFFALSE 31638
// bpoints := bpoints * 1.5 ;
31623: LD_ADDR_VAR 0 10
31627: PUSH
31628: LD_VAR 0 10
31632: PUSH
31633: LD_REAL  1.50000000000000E+0000
31636: MUL
31637: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31638: LD_VAR 0 1
31642: PPUSH
31643: LD_INT 66
31645: PPUSH
31646: CALL_OW 321
31650: PUSH
31651: LD_INT 2
31653: EQUAL
31654: IFFALSE 31671
// bpoints := bpoints * 1.1 ;
31656: LD_ADDR_VAR 0 10
31660: PUSH
31661: LD_VAR 0 10
31665: PUSH
31666: LD_REAL  1.10000000000000E+0000
31669: MUL
31670: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31671: LD_ADDR_VAR 0 10
31675: PUSH
31676: LD_VAR 0 10
31680: PUSH
31681: LD_VAR 0 6
31685: PPUSH
31686: LD_INT 1
31688: PPUSH
31689: CALL_OW 259
31693: PUSH
31694: LD_REAL  1.15000000000000E+0000
31697: MUL
31698: MUL
31699: ST_TO_ADDR
// end ; unit_vehicle :
31700: GO 32530
31702: LD_INT 2
31704: DOUBLE
31705: EQUAL
31706: IFTRUE 31710
31708: GO 32518
31710: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31711: LD_VAR 0 6
31715: PPUSH
31716: CALL_OW 264
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: LD_INT 42
31726: PUSH
31727: LD_INT 24
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: IN
31735: IFFALSE 31756
// points := [ 25 , 5 , 3 ] ;
31737: LD_ADDR_VAR 0 9
31741: PUSH
31742: LD_INT 25
31744: PUSH
31745: LD_INT 5
31747: PUSH
31748: LD_INT 3
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: LIST
31755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31756: LD_VAR 0 6
31760: PPUSH
31761: CALL_OW 264
31765: PUSH
31766: LD_INT 4
31768: PUSH
31769: LD_INT 43
31771: PUSH
31772: LD_INT 25
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: IN
31780: IFFALSE 31801
// points := [ 40 , 15 , 5 ] ;
31782: LD_ADDR_VAR 0 9
31786: PUSH
31787: LD_INT 40
31789: PUSH
31790: LD_INT 15
31792: PUSH
31793: LD_INT 5
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: LIST
31800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31801: LD_VAR 0 6
31805: PPUSH
31806: CALL_OW 264
31810: PUSH
31811: LD_INT 3
31813: PUSH
31814: LD_INT 23
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: IN
31821: IFFALSE 31842
// points := [ 7 , 25 , 8 ] ;
31823: LD_ADDR_VAR 0 9
31827: PUSH
31828: LD_INT 7
31830: PUSH
31831: LD_INT 25
31833: PUSH
31834: LD_INT 8
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31842: LD_VAR 0 6
31846: PPUSH
31847: CALL_OW 264
31851: PUSH
31852: LD_INT 5
31854: PUSH
31855: LD_INT 27
31857: PUSH
31858: LD_INT 44
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: LIST
31865: IN
31866: IFFALSE 31887
// points := [ 14 , 50 , 16 ] ;
31868: LD_ADDR_VAR 0 9
31872: PUSH
31873: LD_INT 14
31875: PUSH
31876: LD_INT 50
31878: PUSH
31879: LD_INT 16
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31887: LD_VAR 0 6
31891: PPUSH
31892: CALL_OW 264
31896: PUSH
31897: LD_INT 6
31899: PUSH
31900: LD_INT 46
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: IN
31907: IFFALSE 31928
// points := [ 32 , 120 , 70 ] ;
31909: LD_ADDR_VAR 0 9
31913: PUSH
31914: LD_INT 32
31916: PUSH
31917: LD_INT 120
31919: PUSH
31920: LD_INT 70
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: LIST
31927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31928: LD_VAR 0 6
31932: PPUSH
31933: CALL_OW 264
31937: PUSH
31938: LD_INT 7
31940: PUSH
31941: LD_INT 28
31943: PUSH
31944: LD_INT 45
31946: PUSH
31947: LD_EXP 98
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: IN
31958: IFFALSE 31979
// points := [ 35 , 20 , 45 ] ;
31960: LD_ADDR_VAR 0 9
31964: PUSH
31965: LD_INT 35
31967: PUSH
31968: LD_INT 20
31970: PUSH
31971: LD_INT 45
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: LIST
31978: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31979: LD_VAR 0 6
31983: PPUSH
31984: CALL_OW 264
31988: PUSH
31989: LD_INT 47
31991: PUSH
31992: EMPTY
31993: LIST
31994: IN
31995: IFFALSE 32016
// points := [ 67 , 45 , 75 ] ;
31997: LD_ADDR_VAR 0 9
32001: PUSH
32002: LD_INT 67
32004: PUSH
32005: LD_INT 45
32007: PUSH
32008: LD_INT 75
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32016: LD_VAR 0 6
32020: PPUSH
32021: CALL_OW 264
32025: PUSH
32026: LD_INT 26
32028: PUSH
32029: EMPTY
32030: LIST
32031: IN
32032: IFFALSE 32053
// points := [ 120 , 30 , 80 ] ;
32034: LD_ADDR_VAR 0 9
32038: PUSH
32039: LD_INT 120
32041: PUSH
32042: LD_INT 30
32044: PUSH
32045: LD_INT 80
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32053: LD_VAR 0 6
32057: PPUSH
32058: CALL_OW 264
32062: PUSH
32063: LD_INT 22
32065: PUSH
32066: EMPTY
32067: LIST
32068: IN
32069: IFFALSE 32090
// points := [ 40 , 1 , 1 ] ;
32071: LD_ADDR_VAR 0 9
32075: PUSH
32076: LD_INT 40
32078: PUSH
32079: LD_INT 1
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: LIST
32089: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32090: LD_VAR 0 6
32094: PPUSH
32095: CALL_OW 264
32099: PUSH
32100: LD_INT 29
32102: PUSH
32103: EMPTY
32104: LIST
32105: IN
32106: IFFALSE 32127
// points := [ 70 , 200 , 400 ] ;
32108: LD_ADDR_VAR 0 9
32112: PUSH
32113: LD_INT 70
32115: PUSH
32116: LD_INT 200
32118: PUSH
32119: LD_INT 400
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: LIST
32126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32127: LD_VAR 0 6
32131: PPUSH
32132: CALL_OW 264
32136: PUSH
32137: LD_INT 14
32139: PUSH
32140: LD_INT 53
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: IN
32147: IFFALSE 32168
// points := [ 40 , 10 , 20 ] ;
32149: LD_ADDR_VAR 0 9
32153: PUSH
32154: LD_INT 40
32156: PUSH
32157: LD_INT 10
32159: PUSH
32160: LD_INT 20
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: LIST
32167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32168: LD_VAR 0 6
32172: PPUSH
32173: CALL_OW 264
32177: PUSH
32178: LD_INT 9
32180: PUSH
32181: EMPTY
32182: LIST
32183: IN
32184: IFFALSE 32205
// points := [ 5 , 70 , 20 ] ;
32186: LD_ADDR_VAR 0 9
32190: PUSH
32191: LD_INT 5
32193: PUSH
32194: LD_INT 70
32196: PUSH
32197: LD_INT 20
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32205: LD_VAR 0 6
32209: PPUSH
32210: CALL_OW 264
32214: PUSH
32215: LD_INT 10
32217: PUSH
32218: EMPTY
32219: LIST
32220: IN
32221: IFFALSE 32242
// points := [ 35 , 110 , 70 ] ;
32223: LD_ADDR_VAR 0 9
32227: PUSH
32228: LD_INT 35
32230: PUSH
32231: LD_INT 110
32233: PUSH
32234: LD_INT 70
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32242: LD_VAR 0 6
32246: PPUSH
32247: CALL_OW 265
32251: PUSH
32252: LD_INT 25
32254: EQUAL
32255: IFFALSE 32276
// points := [ 80 , 65 , 100 ] ;
32257: LD_ADDR_VAR 0 9
32261: PUSH
32262: LD_INT 80
32264: PUSH
32265: LD_INT 65
32267: PUSH
32268: LD_INT 100
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: LIST
32275: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32276: LD_VAR 0 6
32280: PPUSH
32281: CALL_OW 263
32285: PUSH
32286: LD_INT 1
32288: EQUAL
32289: IFFALSE 32324
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32291: LD_ADDR_VAR 0 10
32295: PUSH
32296: LD_VAR 0 10
32300: PUSH
32301: LD_VAR 0 6
32305: PPUSH
32306: CALL_OW 311
32310: PPUSH
32311: LD_INT 3
32313: PPUSH
32314: CALL_OW 259
32318: PUSH
32319: LD_INT 4
32321: MUL
32322: MUL
32323: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32324: LD_VAR 0 6
32328: PPUSH
32329: CALL_OW 263
32333: PUSH
32334: LD_INT 2
32336: EQUAL
32337: IFFALSE 32388
// begin j := IsControledBy ( i ) ;
32339: LD_ADDR_VAR 0 7
32343: PUSH
32344: LD_VAR 0 6
32348: PPUSH
32349: CALL_OW 312
32353: ST_TO_ADDR
// if j then
32354: LD_VAR 0 7
32358: IFFALSE 32388
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32360: LD_ADDR_VAR 0 10
32364: PUSH
32365: LD_VAR 0 10
32369: PUSH
32370: LD_VAR 0 7
32374: PPUSH
32375: LD_INT 3
32377: PPUSH
32378: CALL_OW 259
32382: PUSH
32383: LD_INT 3
32385: MUL
32386: MUL
32387: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32388: LD_VAR 0 6
32392: PPUSH
32393: CALL_OW 264
32397: PUSH
32398: LD_INT 5
32400: PUSH
32401: LD_INT 6
32403: PUSH
32404: LD_INT 46
32406: PUSH
32407: LD_INT 44
32409: PUSH
32410: LD_INT 47
32412: PUSH
32413: LD_INT 45
32415: PUSH
32416: LD_INT 28
32418: PUSH
32419: LD_INT 7
32421: PUSH
32422: LD_INT 27
32424: PUSH
32425: LD_INT 29
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: IN
32440: PUSH
32441: LD_VAR 0 1
32445: PPUSH
32446: LD_INT 52
32448: PPUSH
32449: CALL_OW 321
32453: PUSH
32454: LD_INT 2
32456: EQUAL
32457: AND
32458: IFFALSE 32475
// bpoints := bpoints * 1.2 ;
32460: LD_ADDR_VAR 0 10
32464: PUSH
32465: LD_VAR 0 10
32469: PUSH
32470: LD_REAL  1.20000000000000E+0000
32473: MUL
32474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32475: LD_VAR 0 6
32479: PPUSH
32480: CALL_OW 264
32484: PUSH
32485: LD_INT 6
32487: PUSH
32488: LD_INT 46
32490: PUSH
32491: LD_INT 47
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: LIST
32498: IN
32499: IFFALSE 32516
// bpoints := bpoints * 1.2 ;
32501: LD_ADDR_VAR 0 10
32505: PUSH
32506: LD_VAR 0 10
32510: PUSH
32511: LD_REAL  1.20000000000000E+0000
32514: MUL
32515: ST_TO_ADDR
// end ; unit_building :
32516: GO 32530
32518: LD_INT 3
32520: DOUBLE
32521: EQUAL
32522: IFTRUE 32526
32524: GO 32529
32526: POP
// ; end ;
32527: GO 32530
32529: POP
// for j = 1 to 3 do
32530: LD_ADDR_VAR 0 7
32534: PUSH
32535: DOUBLE
32536: LD_INT 1
32538: DEC
32539: ST_TO_ADDR
32540: LD_INT 3
32542: PUSH
32543: FOR_TO
32544: IFFALSE 32597
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32546: LD_ADDR_VAR 0 5
32550: PUSH
32551: LD_VAR 0 5
32555: PPUSH
32556: LD_VAR 0 7
32560: PPUSH
32561: LD_VAR 0 5
32565: PUSH
32566: LD_VAR 0 7
32570: ARRAY
32571: PUSH
32572: LD_VAR 0 9
32576: PUSH
32577: LD_VAR 0 7
32581: ARRAY
32582: PUSH
32583: LD_VAR 0 10
32587: MUL
32588: PLUS
32589: PPUSH
32590: CALL_OW 1
32594: ST_TO_ADDR
32595: GO 32543
32597: POP
32598: POP
// end ;
32599: GO 31076
32601: POP
32602: POP
// result := Replace ( result , 4 , tmp ) ;
32603: LD_ADDR_VAR 0 5
32607: PUSH
32608: LD_VAR 0 5
32612: PPUSH
32613: LD_INT 4
32615: PPUSH
32616: LD_VAR 0 8
32620: PPUSH
32621: CALL_OW 1
32625: ST_TO_ADDR
// end ;
32626: LD_VAR 0 5
32630: RET
// export function DangerAtRange ( unit , range ) ; begin
32631: LD_INT 0
32633: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32634: LD_ADDR_VAR 0 3
32638: PUSH
32639: LD_VAR 0 1
32643: PPUSH
32644: CALL_OW 255
32648: PPUSH
32649: LD_VAR 0 1
32653: PPUSH
32654: CALL_OW 250
32658: PPUSH
32659: LD_VAR 0 1
32663: PPUSH
32664: CALL_OW 251
32668: PPUSH
32669: LD_VAR 0 2
32673: PPUSH
32674: CALL 30928 0 4
32678: ST_TO_ADDR
// end ;
32679: LD_VAR 0 3
32683: RET
// export function DangerInArea ( side , area ) ; begin
32684: LD_INT 0
32686: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32687: LD_ADDR_VAR 0 3
32691: PUSH
32692: LD_VAR 0 2
32696: PPUSH
32697: LD_INT 81
32699: PUSH
32700: LD_VAR 0 1
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PPUSH
32709: CALL_OW 70
32713: ST_TO_ADDR
// end ;
32714: LD_VAR 0 3
32718: RET
// export function IsExtension ( b ) ; begin
32719: LD_INT 0
32721: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32722: LD_ADDR_VAR 0 2
32726: PUSH
32727: LD_VAR 0 1
32731: PUSH
32732: LD_INT 23
32734: PUSH
32735: LD_INT 20
32737: PUSH
32738: LD_INT 22
32740: PUSH
32741: LD_INT 17
32743: PUSH
32744: LD_INT 24
32746: PUSH
32747: LD_INT 21
32749: PUSH
32750: LD_INT 19
32752: PUSH
32753: LD_INT 16
32755: PUSH
32756: LD_INT 25
32758: PUSH
32759: LD_INT 18
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: IN
32774: ST_TO_ADDR
// end ;
32775: LD_VAR 0 2
32779: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32780: LD_INT 0
32782: PPUSH
32783: PPUSH
32784: PPUSH
// result := [ ] ;
32785: LD_ADDR_VAR 0 4
32789: PUSH
32790: EMPTY
32791: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32792: LD_ADDR_VAR 0 5
32796: PUSH
32797: LD_VAR 0 2
32801: PPUSH
32802: LD_INT 21
32804: PUSH
32805: LD_INT 3
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PPUSH
32812: CALL_OW 70
32816: ST_TO_ADDR
// if not tmp then
32817: LD_VAR 0 5
32821: NOT
32822: IFFALSE 32826
// exit ;
32824: GO 32890
// if checkLink then
32826: LD_VAR 0 3
32830: IFFALSE 32880
// begin for i in tmp do
32832: LD_ADDR_VAR 0 6
32836: PUSH
32837: LD_VAR 0 5
32841: PUSH
32842: FOR_IN
32843: IFFALSE 32878
// if GetBase ( i ) <> base then
32845: LD_VAR 0 6
32849: PPUSH
32850: CALL_OW 274
32854: PUSH
32855: LD_VAR 0 1
32859: NONEQUAL
32860: IFFALSE 32876
// ComLinkToBase ( base , i ) ;
32862: LD_VAR 0 1
32866: PPUSH
32867: LD_VAR 0 6
32871: PPUSH
32872: CALL_OW 169
32876: GO 32842
32878: POP
32879: POP
// end ; result := tmp ;
32880: LD_ADDR_VAR 0 4
32884: PUSH
32885: LD_VAR 0 5
32889: ST_TO_ADDR
// end ;
32890: LD_VAR 0 4
32894: RET
// export function ComComplete ( units , b ) ; var i ; begin
32895: LD_INT 0
32897: PPUSH
32898: PPUSH
// if not units then
32899: LD_VAR 0 1
32903: NOT
32904: IFFALSE 32908
// exit ;
32906: GO 32998
// for i in units do
32908: LD_ADDR_VAR 0 4
32912: PUSH
32913: LD_VAR 0 1
32917: PUSH
32918: FOR_IN
32919: IFFALSE 32996
// if BuildingStatus ( b ) = bs_build then
32921: LD_VAR 0 2
32925: PPUSH
32926: CALL_OW 461
32930: PUSH
32931: LD_INT 1
32933: EQUAL
32934: IFFALSE 32994
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32936: LD_VAR 0 4
32940: PPUSH
32941: LD_STRING h
32943: PUSH
32944: LD_VAR 0 2
32948: PPUSH
32949: CALL_OW 250
32953: PUSH
32954: LD_VAR 0 2
32958: PPUSH
32959: CALL_OW 251
32963: PUSH
32964: LD_VAR 0 2
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: PUSH
32987: EMPTY
32988: LIST
32989: PPUSH
32990: CALL_OW 446
32994: GO 32918
32996: POP
32997: POP
// end ;
32998: LD_VAR 0 3
33002: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33003: LD_INT 0
33005: PPUSH
33006: PPUSH
33007: PPUSH
33008: PPUSH
33009: PPUSH
33010: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33011: LD_VAR 0 1
33015: NOT
33016: PUSH
33017: LD_VAR 0 1
33021: PPUSH
33022: CALL_OW 263
33026: PUSH
33027: LD_INT 2
33029: NONEQUAL
33030: OR
33031: IFFALSE 33035
// exit ;
33033: GO 33351
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33035: LD_ADDR_VAR 0 6
33039: PUSH
33040: LD_INT 22
33042: PUSH
33043: LD_VAR 0 1
33047: PPUSH
33048: CALL_OW 255
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 2
33059: PUSH
33060: LD_INT 30
33062: PUSH
33063: LD_INT 36
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 34
33072: PUSH
33073: LD_INT 31
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: LIST
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PPUSH
33089: CALL_OW 69
33093: ST_TO_ADDR
// if not tmp then
33094: LD_VAR 0 6
33098: NOT
33099: IFFALSE 33103
// exit ;
33101: GO 33351
// result := [ ] ;
33103: LD_ADDR_VAR 0 2
33107: PUSH
33108: EMPTY
33109: ST_TO_ADDR
// for i in tmp do
33110: LD_ADDR_VAR 0 3
33114: PUSH
33115: LD_VAR 0 6
33119: PUSH
33120: FOR_IN
33121: IFFALSE 33192
// begin t := UnitsInside ( i ) ;
33123: LD_ADDR_VAR 0 4
33127: PUSH
33128: LD_VAR 0 3
33132: PPUSH
33133: CALL_OW 313
33137: ST_TO_ADDR
// if t then
33138: LD_VAR 0 4
33142: IFFALSE 33190
// for j in t do
33144: LD_ADDR_VAR 0 7
33148: PUSH
33149: LD_VAR 0 4
33153: PUSH
33154: FOR_IN
33155: IFFALSE 33188
// result := Replace ( result , result + 1 , j ) ;
33157: LD_ADDR_VAR 0 2
33161: PUSH
33162: LD_VAR 0 2
33166: PPUSH
33167: LD_VAR 0 2
33171: PUSH
33172: LD_INT 1
33174: PLUS
33175: PPUSH
33176: LD_VAR 0 7
33180: PPUSH
33181: CALL_OW 1
33185: ST_TO_ADDR
33186: GO 33154
33188: POP
33189: POP
// end ;
33190: GO 33120
33192: POP
33193: POP
// if not result then
33194: LD_VAR 0 2
33198: NOT
33199: IFFALSE 33203
// exit ;
33201: GO 33351
// mech := result [ 1 ] ;
33203: LD_ADDR_VAR 0 5
33207: PUSH
33208: LD_VAR 0 2
33212: PUSH
33213: LD_INT 1
33215: ARRAY
33216: ST_TO_ADDR
// if result > 1 then
33217: LD_VAR 0 2
33221: PUSH
33222: LD_INT 1
33224: GREATER
33225: IFFALSE 33337
// begin for i = 2 to result do
33227: LD_ADDR_VAR 0 3
33231: PUSH
33232: DOUBLE
33233: LD_INT 2
33235: DEC
33236: ST_TO_ADDR
33237: LD_VAR 0 2
33241: PUSH
33242: FOR_TO
33243: IFFALSE 33335
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33245: LD_ADDR_VAR 0 4
33249: PUSH
33250: LD_VAR 0 2
33254: PUSH
33255: LD_VAR 0 3
33259: ARRAY
33260: PPUSH
33261: LD_INT 3
33263: PPUSH
33264: CALL_OW 259
33268: PUSH
33269: LD_VAR 0 2
33273: PUSH
33274: LD_VAR 0 3
33278: ARRAY
33279: PPUSH
33280: CALL_OW 432
33284: MINUS
33285: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33286: LD_VAR 0 4
33290: PUSH
33291: LD_VAR 0 5
33295: PPUSH
33296: LD_INT 3
33298: PPUSH
33299: CALL_OW 259
33303: PUSH
33304: LD_VAR 0 5
33308: PPUSH
33309: CALL_OW 432
33313: MINUS
33314: GREATEREQUAL
33315: IFFALSE 33333
// mech := result [ i ] ;
33317: LD_ADDR_VAR 0 5
33321: PUSH
33322: LD_VAR 0 2
33326: PUSH
33327: LD_VAR 0 3
33331: ARRAY
33332: ST_TO_ADDR
// end ;
33333: GO 33242
33335: POP
33336: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33337: LD_VAR 0 1
33341: PPUSH
33342: LD_VAR 0 5
33346: PPUSH
33347: CALL_OW 135
// end ;
33351: LD_VAR 0 2
33355: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33356: LD_INT 0
33358: PPUSH
33359: PPUSH
33360: PPUSH
33361: PPUSH
33362: PPUSH
33363: PPUSH
33364: PPUSH
33365: PPUSH
33366: PPUSH
33367: PPUSH
33368: PPUSH
33369: PPUSH
33370: PPUSH
// result := [ ] ;
33371: LD_ADDR_VAR 0 7
33375: PUSH
33376: EMPTY
33377: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33378: LD_VAR 0 1
33382: PPUSH
33383: CALL_OW 266
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: IN
33398: NOT
33399: IFFALSE 33403
// exit ;
33401: GO 35037
// if name then
33403: LD_VAR 0 3
33407: IFFALSE 33423
// SetBName ( base_dep , name ) ;
33409: LD_VAR 0 1
33413: PPUSH
33414: LD_VAR 0 3
33418: PPUSH
33419: CALL_OW 500
// base := GetBase ( base_dep ) ;
33423: LD_ADDR_VAR 0 15
33427: PUSH
33428: LD_VAR 0 1
33432: PPUSH
33433: CALL_OW 274
33437: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33438: LD_ADDR_VAR 0 16
33442: PUSH
33443: LD_VAR 0 1
33447: PPUSH
33448: CALL_OW 255
33452: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33453: LD_ADDR_VAR 0 17
33457: PUSH
33458: LD_VAR 0 1
33462: PPUSH
33463: CALL_OW 248
33467: ST_TO_ADDR
// if sources then
33468: LD_VAR 0 5
33472: IFFALSE 33519
// for i = 1 to 3 do
33474: LD_ADDR_VAR 0 8
33478: PUSH
33479: DOUBLE
33480: LD_INT 1
33482: DEC
33483: ST_TO_ADDR
33484: LD_INT 3
33486: PUSH
33487: FOR_TO
33488: IFFALSE 33517
// AddResourceType ( base , i , sources [ i ] ) ;
33490: LD_VAR 0 15
33494: PPUSH
33495: LD_VAR 0 8
33499: PPUSH
33500: LD_VAR 0 5
33504: PUSH
33505: LD_VAR 0 8
33509: ARRAY
33510: PPUSH
33511: CALL_OW 276
33515: GO 33487
33517: POP
33518: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33519: LD_ADDR_VAR 0 18
33523: PUSH
33524: LD_VAR 0 15
33528: PPUSH
33529: LD_VAR 0 2
33533: PPUSH
33534: LD_INT 1
33536: PPUSH
33537: CALL 32780 0 3
33541: ST_TO_ADDR
// InitHc ;
33542: CALL_OW 19
// InitUc ;
33546: CALL_OW 18
// uc_side := side ;
33550: LD_ADDR_OWVAR 20
33554: PUSH
33555: LD_VAR 0 16
33559: ST_TO_ADDR
// uc_nation := nation ;
33560: LD_ADDR_OWVAR 21
33564: PUSH
33565: LD_VAR 0 17
33569: ST_TO_ADDR
// if buildings then
33570: LD_VAR 0 18
33574: IFFALSE 34896
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33576: LD_ADDR_VAR 0 19
33580: PUSH
33581: LD_VAR 0 18
33585: PPUSH
33586: LD_INT 2
33588: PUSH
33589: LD_INT 30
33591: PUSH
33592: LD_INT 29
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 30
33601: PUSH
33602: LD_INT 30
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: PPUSH
33614: CALL_OW 72
33618: ST_TO_ADDR
// if tmp then
33619: LD_VAR 0 19
33623: IFFALSE 33671
// for i in tmp do
33625: LD_ADDR_VAR 0 8
33629: PUSH
33630: LD_VAR 0 19
33634: PUSH
33635: FOR_IN
33636: IFFALSE 33669
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33638: LD_VAR 0 8
33642: PPUSH
33643: CALL_OW 250
33647: PPUSH
33648: LD_VAR 0 8
33652: PPUSH
33653: CALL_OW 251
33657: PPUSH
33658: LD_VAR 0 16
33662: PPUSH
33663: CALL_OW 441
33667: GO 33635
33669: POP
33670: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33671: LD_VAR 0 18
33675: PPUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 30
33681: PUSH
33682: LD_INT 32
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 30
33691: PUSH
33692: LD_INT 33
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: LIST
33703: PPUSH
33704: CALL_OW 72
33708: IFFALSE 33796
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33710: LD_ADDR_VAR 0 8
33714: PUSH
33715: LD_VAR 0 18
33719: PPUSH
33720: LD_INT 2
33722: PUSH
33723: LD_INT 30
33725: PUSH
33726: LD_INT 32
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 30
33735: PUSH
33736: LD_INT 33
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: LIST
33747: PPUSH
33748: CALL_OW 72
33752: PUSH
33753: FOR_IN
33754: IFFALSE 33794
// begin if not GetBWeapon ( i ) then
33756: LD_VAR 0 8
33760: PPUSH
33761: CALL_OW 269
33765: NOT
33766: IFFALSE 33792
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33768: LD_VAR 0 8
33772: PPUSH
33773: LD_VAR 0 8
33777: PPUSH
33778: LD_VAR 0 2
33782: PPUSH
33783: CALL 35042 0 2
33787: PPUSH
33788: CALL_OW 431
// end ;
33792: GO 33753
33794: POP
33795: POP
// end ; for i = 1 to personel do
33796: LD_ADDR_VAR 0 8
33800: PUSH
33801: DOUBLE
33802: LD_INT 1
33804: DEC
33805: ST_TO_ADDR
33806: LD_VAR 0 6
33810: PUSH
33811: FOR_TO
33812: IFFALSE 34876
// begin if i > 4 then
33814: LD_VAR 0 8
33818: PUSH
33819: LD_INT 4
33821: GREATER
33822: IFFALSE 33826
// break ;
33824: GO 34876
// case i of 1 :
33826: LD_VAR 0 8
33830: PUSH
33831: LD_INT 1
33833: DOUBLE
33834: EQUAL
33835: IFTRUE 33839
33837: GO 33919
33839: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33840: LD_ADDR_VAR 0 12
33844: PUSH
33845: LD_VAR 0 18
33849: PPUSH
33850: LD_INT 22
33852: PUSH
33853: LD_VAR 0 16
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 58
33864: PUSH
33865: EMPTY
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: LD_INT 30
33873: PUSH
33874: LD_INT 32
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 30
33883: PUSH
33884: LD_INT 4
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 30
33893: PUSH
33894: LD_INT 5
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: LIST
33911: PPUSH
33912: CALL_OW 72
33916: ST_TO_ADDR
33917: GO 34141
33919: LD_INT 2
33921: DOUBLE
33922: EQUAL
33923: IFTRUE 33927
33925: GO 33989
33927: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33928: LD_ADDR_VAR 0 12
33932: PUSH
33933: LD_VAR 0 18
33937: PPUSH
33938: LD_INT 22
33940: PUSH
33941: LD_VAR 0 16
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: LD_INT 30
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 30
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: LIST
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PPUSH
33982: CALL_OW 72
33986: ST_TO_ADDR
33987: GO 34141
33989: LD_INT 3
33991: DOUBLE
33992: EQUAL
33993: IFTRUE 33997
33995: GO 34059
33997: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33998: LD_ADDR_VAR 0 12
34002: PUSH
34003: LD_VAR 0 18
34007: PPUSH
34008: LD_INT 22
34010: PUSH
34011: LD_VAR 0 16
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: LD_INT 30
34025: PUSH
34026: LD_INT 2
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 30
34035: PUSH
34036: LD_INT 3
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: LIST
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PPUSH
34052: CALL_OW 72
34056: ST_TO_ADDR
34057: GO 34141
34059: LD_INT 4
34061: DOUBLE
34062: EQUAL
34063: IFTRUE 34067
34065: GO 34140
34067: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34068: LD_ADDR_VAR 0 12
34072: PUSH
34073: LD_VAR 0 18
34077: PPUSH
34078: LD_INT 22
34080: PUSH
34081: LD_VAR 0 16
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: LD_INT 30
34095: PUSH
34096: LD_INT 6
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 30
34105: PUSH
34106: LD_INT 7
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 30
34115: PUSH
34116: LD_INT 8
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PPUSH
34133: CALL_OW 72
34137: ST_TO_ADDR
34138: GO 34141
34140: POP
// if i = 1 then
34141: LD_VAR 0 8
34145: PUSH
34146: LD_INT 1
34148: EQUAL
34149: IFFALSE 34260
// begin tmp := [ ] ;
34151: LD_ADDR_VAR 0 19
34155: PUSH
34156: EMPTY
34157: ST_TO_ADDR
// for j in f do
34158: LD_ADDR_VAR 0 9
34162: PUSH
34163: LD_VAR 0 12
34167: PUSH
34168: FOR_IN
34169: IFFALSE 34242
// if GetBType ( j ) = b_bunker then
34171: LD_VAR 0 9
34175: PPUSH
34176: CALL_OW 266
34180: PUSH
34181: LD_INT 32
34183: EQUAL
34184: IFFALSE 34211
// tmp := Insert ( tmp , 1 , j ) else
34186: LD_ADDR_VAR 0 19
34190: PUSH
34191: LD_VAR 0 19
34195: PPUSH
34196: LD_INT 1
34198: PPUSH
34199: LD_VAR 0 9
34203: PPUSH
34204: CALL_OW 2
34208: ST_TO_ADDR
34209: GO 34240
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34211: LD_ADDR_VAR 0 19
34215: PUSH
34216: LD_VAR 0 19
34220: PPUSH
34221: LD_VAR 0 19
34225: PUSH
34226: LD_INT 1
34228: PLUS
34229: PPUSH
34230: LD_VAR 0 9
34234: PPUSH
34235: CALL_OW 2
34239: ST_TO_ADDR
34240: GO 34168
34242: POP
34243: POP
// if tmp then
34244: LD_VAR 0 19
34248: IFFALSE 34260
// f := tmp ;
34250: LD_ADDR_VAR 0 12
34254: PUSH
34255: LD_VAR 0 19
34259: ST_TO_ADDR
// end ; x := personel [ i ] ;
34260: LD_ADDR_VAR 0 13
34264: PUSH
34265: LD_VAR 0 6
34269: PUSH
34270: LD_VAR 0 8
34274: ARRAY
34275: ST_TO_ADDR
// if x = - 1 then
34276: LD_VAR 0 13
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: EQUAL
34285: IFFALSE 34494
// begin for j in f do
34287: LD_ADDR_VAR 0 9
34291: PUSH
34292: LD_VAR 0 12
34296: PUSH
34297: FOR_IN
34298: IFFALSE 34490
// repeat InitHc ;
34300: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34304: LD_VAR 0 9
34308: PPUSH
34309: CALL_OW 266
34313: PUSH
34314: LD_INT 5
34316: EQUAL
34317: IFFALSE 34387
// begin if UnitsInside ( j ) < 3 then
34319: LD_VAR 0 9
34323: PPUSH
34324: CALL_OW 313
34328: PUSH
34329: LD_INT 3
34331: LESS
34332: IFFALSE 34368
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34334: LD_INT 0
34336: PPUSH
34337: LD_INT 5
34339: PUSH
34340: LD_INT 8
34342: PUSH
34343: LD_INT 9
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: PUSH
34351: LD_VAR 0 17
34355: ARRAY
34356: PPUSH
34357: LD_VAR 0 4
34361: PPUSH
34362: CALL_OW 380
34366: GO 34385
// PrepareHuman ( false , i , skill ) ;
34368: LD_INT 0
34370: PPUSH
34371: LD_VAR 0 8
34375: PPUSH
34376: LD_VAR 0 4
34380: PPUSH
34381: CALL_OW 380
// end else
34385: GO 34404
// PrepareHuman ( false , i , skill ) ;
34387: LD_INT 0
34389: PPUSH
34390: LD_VAR 0 8
34394: PPUSH
34395: LD_VAR 0 4
34399: PPUSH
34400: CALL_OW 380
// un := CreateHuman ;
34404: LD_ADDR_VAR 0 14
34408: PUSH
34409: CALL_OW 44
34413: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34414: LD_ADDR_VAR 0 7
34418: PUSH
34419: LD_VAR 0 7
34423: PPUSH
34424: LD_INT 1
34426: PPUSH
34427: LD_VAR 0 14
34431: PPUSH
34432: CALL_OW 2
34436: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34437: LD_VAR 0 14
34441: PPUSH
34442: LD_VAR 0 9
34446: PPUSH
34447: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34451: LD_VAR 0 9
34455: PPUSH
34456: CALL_OW 313
34460: PUSH
34461: LD_INT 6
34463: EQUAL
34464: PUSH
34465: LD_VAR 0 9
34469: PPUSH
34470: CALL_OW 266
34474: PUSH
34475: LD_INT 32
34477: PUSH
34478: LD_INT 31
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: IN
34485: OR
34486: IFFALSE 34300
34488: GO 34297
34490: POP
34491: POP
// end else
34492: GO 34874
// for j = 1 to x do
34494: LD_ADDR_VAR 0 9
34498: PUSH
34499: DOUBLE
34500: LD_INT 1
34502: DEC
34503: ST_TO_ADDR
34504: LD_VAR 0 13
34508: PUSH
34509: FOR_TO
34510: IFFALSE 34872
// begin InitHc ;
34512: CALL_OW 19
// if not f then
34516: LD_VAR 0 12
34520: NOT
34521: IFFALSE 34610
// begin PrepareHuman ( false , i , skill ) ;
34523: LD_INT 0
34525: PPUSH
34526: LD_VAR 0 8
34530: PPUSH
34531: LD_VAR 0 4
34535: PPUSH
34536: CALL_OW 380
// un := CreateHuman ;
34540: LD_ADDR_VAR 0 14
34544: PUSH
34545: CALL_OW 44
34549: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34550: LD_ADDR_VAR 0 7
34554: PUSH
34555: LD_VAR 0 7
34559: PPUSH
34560: LD_INT 1
34562: PPUSH
34563: LD_VAR 0 14
34567: PPUSH
34568: CALL_OW 2
34572: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34573: LD_VAR 0 14
34577: PPUSH
34578: LD_VAR 0 1
34582: PPUSH
34583: CALL_OW 250
34587: PPUSH
34588: LD_VAR 0 1
34592: PPUSH
34593: CALL_OW 251
34597: PPUSH
34598: LD_INT 10
34600: PPUSH
34601: LD_INT 0
34603: PPUSH
34604: CALL_OW 50
// continue ;
34608: GO 34509
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34610: LD_VAR 0 12
34614: PUSH
34615: LD_INT 1
34617: ARRAY
34618: PPUSH
34619: CALL_OW 313
34623: PUSH
34624: LD_VAR 0 12
34628: PUSH
34629: LD_INT 1
34631: ARRAY
34632: PPUSH
34633: CALL_OW 266
34637: PUSH
34638: LD_INT 32
34640: PUSH
34641: LD_INT 31
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: IN
34648: AND
34649: PUSH
34650: LD_VAR 0 12
34654: PUSH
34655: LD_INT 1
34657: ARRAY
34658: PPUSH
34659: CALL_OW 313
34663: PUSH
34664: LD_INT 6
34666: EQUAL
34667: OR
34668: IFFALSE 34688
// f := Delete ( f , 1 ) ;
34670: LD_ADDR_VAR 0 12
34674: PUSH
34675: LD_VAR 0 12
34679: PPUSH
34680: LD_INT 1
34682: PPUSH
34683: CALL_OW 3
34687: ST_TO_ADDR
// if not f then
34688: LD_VAR 0 12
34692: NOT
34693: IFFALSE 34711
// begin x := x + 2 ;
34695: LD_ADDR_VAR 0 13
34699: PUSH
34700: LD_VAR 0 13
34704: PUSH
34705: LD_INT 2
34707: PLUS
34708: ST_TO_ADDR
// continue ;
34709: GO 34509
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34711: LD_VAR 0 12
34715: PUSH
34716: LD_INT 1
34718: ARRAY
34719: PPUSH
34720: CALL_OW 266
34724: PUSH
34725: LD_INT 5
34727: EQUAL
34728: IFFALSE 34802
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34730: LD_VAR 0 12
34734: PUSH
34735: LD_INT 1
34737: ARRAY
34738: PPUSH
34739: CALL_OW 313
34743: PUSH
34744: LD_INT 3
34746: LESS
34747: IFFALSE 34783
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34749: LD_INT 0
34751: PPUSH
34752: LD_INT 5
34754: PUSH
34755: LD_INT 8
34757: PUSH
34758: LD_INT 9
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: LIST
34765: PUSH
34766: LD_VAR 0 17
34770: ARRAY
34771: PPUSH
34772: LD_VAR 0 4
34776: PPUSH
34777: CALL_OW 380
34781: GO 34800
// PrepareHuman ( false , i , skill ) ;
34783: LD_INT 0
34785: PPUSH
34786: LD_VAR 0 8
34790: PPUSH
34791: LD_VAR 0 4
34795: PPUSH
34796: CALL_OW 380
// end else
34800: GO 34819
// PrepareHuman ( false , i , skill ) ;
34802: LD_INT 0
34804: PPUSH
34805: LD_VAR 0 8
34809: PPUSH
34810: LD_VAR 0 4
34814: PPUSH
34815: CALL_OW 380
// un := CreateHuman ;
34819: LD_ADDR_VAR 0 14
34823: PUSH
34824: CALL_OW 44
34828: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34829: LD_ADDR_VAR 0 7
34833: PUSH
34834: LD_VAR 0 7
34838: PPUSH
34839: LD_INT 1
34841: PPUSH
34842: LD_VAR 0 14
34846: PPUSH
34847: CALL_OW 2
34851: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34852: LD_VAR 0 14
34856: PPUSH
34857: LD_VAR 0 12
34861: PUSH
34862: LD_INT 1
34864: ARRAY
34865: PPUSH
34866: CALL_OW 52
// end ;
34870: GO 34509
34872: POP
34873: POP
// end ;
34874: GO 33811
34876: POP
34877: POP
// result := result ^ buildings ;
34878: LD_ADDR_VAR 0 7
34882: PUSH
34883: LD_VAR 0 7
34887: PUSH
34888: LD_VAR 0 18
34892: ADD
34893: ST_TO_ADDR
// end else
34894: GO 35037
// begin for i = 1 to personel do
34896: LD_ADDR_VAR 0 8
34900: PUSH
34901: DOUBLE
34902: LD_INT 1
34904: DEC
34905: ST_TO_ADDR
34906: LD_VAR 0 6
34910: PUSH
34911: FOR_TO
34912: IFFALSE 35035
// begin if i > 4 then
34914: LD_VAR 0 8
34918: PUSH
34919: LD_INT 4
34921: GREATER
34922: IFFALSE 34926
// break ;
34924: GO 35035
// x := personel [ i ] ;
34926: LD_ADDR_VAR 0 13
34930: PUSH
34931: LD_VAR 0 6
34935: PUSH
34936: LD_VAR 0 8
34940: ARRAY
34941: ST_TO_ADDR
// if x = - 1 then
34942: LD_VAR 0 13
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: EQUAL
34951: IFFALSE 34955
// continue ;
34953: GO 34911
// PrepareHuman ( false , i , skill ) ;
34955: LD_INT 0
34957: PPUSH
34958: LD_VAR 0 8
34962: PPUSH
34963: LD_VAR 0 4
34967: PPUSH
34968: CALL_OW 380
// un := CreateHuman ;
34972: LD_ADDR_VAR 0 14
34976: PUSH
34977: CALL_OW 44
34981: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34982: LD_VAR 0 14
34986: PPUSH
34987: LD_VAR 0 1
34991: PPUSH
34992: CALL_OW 250
34996: PPUSH
34997: LD_VAR 0 1
35001: PPUSH
35002: CALL_OW 251
35006: PPUSH
35007: LD_INT 10
35009: PPUSH
35010: LD_INT 0
35012: PPUSH
35013: CALL_OW 50
// result := result ^ un ;
35017: LD_ADDR_VAR 0 7
35021: PUSH
35022: LD_VAR 0 7
35026: PUSH
35027: LD_VAR 0 14
35031: ADD
35032: ST_TO_ADDR
// end ;
35033: GO 34911
35035: POP
35036: POP
// end ; end ;
35037: LD_VAR 0 7
35041: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35042: LD_INT 0
35044: PPUSH
35045: PPUSH
35046: PPUSH
35047: PPUSH
35048: PPUSH
35049: PPUSH
35050: PPUSH
35051: PPUSH
35052: PPUSH
35053: PPUSH
35054: PPUSH
35055: PPUSH
35056: PPUSH
35057: PPUSH
35058: PPUSH
35059: PPUSH
// result := false ;
35060: LD_ADDR_VAR 0 3
35064: PUSH
35065: LD_INT 0
35067: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35068: LD_VAR 0 1
35072: NOT
35073: PUSH
35074: LD_VAR 0 1
35078: PPUSH
35079: CALL_OW 266
35083: PUSH
35084: LD_INT 32
35086: PUSH
35087: LD_INT 33
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: IN
35094: NOT
35095: OR
35096: IFFALSE 35100
// exit ;
35098: GO 36209
// nat := GetNation ( tower ) ;
35100: LD_ADDR_VAR 0 12
35104: PUSH
35105: LD_VAR 0 1
35109: PPUSH
35110: CALL_OW 248
35114: ST_TO_ADDR
// side := GetSide ( tower ) ;
35115: LD_ADDR_VAR 0 16
35119: PUSH
35120: LD_VAR 0 1
35124: PPUSH
35125: CALL_OW 255
35129: ST_TO_ADDR
// x := GetX ( tower ) ;
35130: LD_ADDR_VAR 0 10
35134: PUSH
35135: LD_VAR 0 1
35139: PPUSH
35140: CALL_OW 250
35144: ST_TO_ADDR
// y := GetY ( tower ) ;
35145: LD_ADDR_VAR 0 11
35149: PUSH
35150: LD_VAR 0 1
35154: PPUSH
35155: CALL_OW 251
35159: ST_TO_ADDR
// if not x or not y then
35160: LD_VAR 0 10
35164: NOT
35165: PUSH
35166: LD_VAR 0 11
35170: NOT
35171: OR
35172: IFFALSE 35176
// exit ;
35174: GO 36209
// weapon := 0 ;
35176: LD_ADDR_VAR 0 18
35180: PUSH
35181: LD_INT 0
35183: ST_TO_ADDR
// fac_list := [ ] ;
35184: LD_ADDR_VAR 0 17
35188: PUSH
35189: EMPTY
35190: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35191: LD_ADDR_VAR 0 6
35195: PUSH
35196: LD_VAR 0 1
35200: PPUSH
35201: CALL_OW 274
35205: PPUSH
35206: LD_VAR 0 2
35210: PPUSH
35211: LD_INT 0
35213: PPUSH
35214: CALL 32780 0 3
35218: PPUSH
35219: LD_INT 30
35221: PUSH
35222: LD_INT 3
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PPUSH
35229: CALL_OW 72
35233: ST_TO_ADDR
// if not factories then
35234: LD_VAR 0 6
35238: NOT
35239: IFFALSE 35243
// exit ;
35241: GO 36209
// for i in factories do
35243: LD_ADDR_VAR 0 8
35247: PUSH
35248: LD_VAR 0 6
35252: PUSH
35253: FOR_IN
35254: IFFALSE 35279
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35256: LD_ADDR_VAR 0 17
35260: PUSH
35261: LD_VAR 0 17
35265: PUSH
35266: LD_VAR 0 8
35270: PPUSH
35271: CALL_OW 478
35275: UNION
35276: ST_TO_ADDR
35277: GO 35253
35279: POP
35280: POP
// if not fac_list then
35281: LD_VAR 0 17
35285: NOT
35286: IFFALSE 35290
// exit ;
35288: GO 36209
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35290: LD_ADDR_VAR 0 5
35294: PUSH
35295: LD_INT 4
35297: PUSH
35298: LD_INT 5
35300: PUSH
35301: LD_INT 9
35303: PUSH
35304: LD_INT 10
35306: PUSH
35307: LD_INT 6
35309: PUSH
35310: LD_INT 7
35312: PUSH
35313: LD_INT 11
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 27
35327: PUSH
35328: LD_INT 28
35330: PUSH
35331: LD_INT 26
35333: PUSH
35334: LD_INT 30
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 43
35345: PUSH
35346: LD_INT 44
35348: PUSH
35349: LD_INT 46
35351: PUSH
35352: LD_INT 45
35354: PUSH
35355: LD_INT 47
35357: PUSH
35358: LD_INT 49
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: PUSH
35374: LD_VAR 0 12
35378: ARRAY
35379: ST_TO_ADDR
// list := list isect fac_list ;
35380: LD_ADDR_VAR 0 5
35384: PUSH
35385: LD_VAR 0 5
35389: PUSH
35390: LD_VAR 0 17
35394: ISECT
35395: ST_TO_ADDR
// if not list then
35396: LD_VAR 0 5
35400: NOT
35401: IFFALSE 35405
// exit ;
35403: GO 36209
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35405: LD_VAR 0 12
35409: PUSH
35410: LD_INT 3
35412: EQUAL
35413: PUSH
35414: LD_INT 49
35416: PUSH
35417: LD_VAR 0 5
35421: IN
35422: AND
35423: PUSH
35424: LD_INT 31
35426: PPUSH
35427: LD_VAR 0 16
35431: PPUSH
35432: CALL_OW 321
35436: PUSH
35437: LD_INT 2
35439: EQUAL
35440: AND
35441: IFFALSE 35501
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35443: LD_INT 22
35445: PUSH
35446: LD_VAR 0 16
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 35
35457: PUSH
35458: LD_INT 49
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 91
35467: PUSH
35468: LD_VAR 0 1
35472: PUSH
35473: LD_INT 10
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: LIST
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: PPUSH
35486: CALL_OW 69
35490: NOT
35491: IFFALSE 35501
// weapon := ru_time_lapser ;
35493: LD_ADDR_VAR 0 18
35497: PUSH
35498: LD_INT 49
35500: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35501: LD_VAR 0 12
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: IN
35516: PUSH
35517: LD_INT 11
35519: PUSH
35520: LD_VAR 0 5
35524: IN
35525: PUSH
35526: LD_INT 30
35528: PUSH
35529: LD_VAR 0 5
35533: IN
35534: OR
35535: AND
35536: PUSH
35537: LD_INT 6
35539: PPUSH
35540: LD_VAR 0 16
35544: PPUSH
35545: CALL_OW 321
35549: PUSH
35550: LD_INT 2
35552: EQUAL
35553: AND
35554: IFFALSE 35719
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35556: LD_INT 22
35558: PUSH
35559: LD_VAR 0 16
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: LD_INT 35
35573: PUSH
35574: LD_INT 11
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 35
35583: PUSH
35584: LD_INT 30
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 91
35598: PUSH
35599: LD_VAR 0 1
35603: PUSH
35604: LD_INT 18
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: PPUSH
35617: CALL_OW 69
35621: NOT
35622: PUSH
35623: LD_INT 22
35625: PUSH
35626: LD_VAR 0 16
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: LD_INT 30
35640: PUSH
35641: LD_INT 32
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 30
35650: PUSH
35651: LD_INT 33
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 91
35665: PUSH
35666: LD_VAR 0 1
35670: PUSH
35671: LD_INT 12
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: PPUSH
35687: CALL_OW 69
35691: PUSH
35692: LD_INT 2
35694: GREATER
35695: AND
35696: IFFALSE 35719
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35698: LD_ADDR_VAR 0 18
35702: PUSH
35703: LD_INT 11
35705: PUSH
35706: LD_INT 30
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_VAR 0 12
35717: ARRAY
35718: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35719: LD_VAR 0 18
35723: NOT
35724: PUSH
35725: LD_INT 40
35727: PPUSH
35728: LD_VAR 0 16
35732: PPUSH
35733: CALL_OW 321
35737: PUSH
35738: LD_INT 2
35740: EQUAL
35741: AND
35742: PUSH
35743: LD_INT 7
35745: PUSH
35746: LD_VAR 0 5
35750: IN
35751: PUSH
35752: LD_INT 28
35754: PUSH
35755: LD_VAR 0 5
35759: IN
35760: OR
35761: PUSH
35762: LD_INT 45
35764: PUSH
35765: LD_VAR 0 5
35769: IN
35770: OR
35771: AND
35772: IFFALSE 36026
// begin hex := GetHexInfo ( x , y ) ;
35774: LD_ADDR_VAR 0 4
35778: PUSH
35779: LD_VAR 0 10
35783: PPUSH
35784: LD_VAR 0 11
35788: PPUSH
35789: CALL_OW 546
35793: ST_TO_ADDR
// if hex [ 1 ] then
35794: LD_VAR 0 4
35798: PUSH
35799: LD_INT 1
35801: ARRAY
35802: IFFALSE 35806
// exit ;
35804: GO 36209
// height := hex [ 2 ] ;
35806: LD_ADDR_VAR 0 15
35810: PUSH
35811: LD_VAR 0 4
35815: PUSH
35816: LD_INT 2
35818: ARRAY
35819: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35820: LD_ADDR_VAR 0 14
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: LD_INT 3
35833: PUSH
35834: LD_INT 5
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: ST_TO_ADDR
// for i in tmp do
35843: LD_ADDR_VAR 0 8
35847: PUSH
35848: LD_VAR 0 14
35852: PUSH
35853: FOR_IN
35854: IFFALSE 36024
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35856: LD_ADDR_VAR 0 9
35860: PUSH
35861: LD_VAR 0 10
35865: PPUSH
35866: LD_VAR 0 8
35870: PPUSH
35871: LD_INT 5
35873: PPUSH
35874: CALL_OW 272
35878: PUSH
35879: LD_VAR 0 11
35883: PPUSH
35884: LD_VAR 0 8
35888: PPUSH
35889: LD_INT 5
35891: PPUSH
35892: CALL_OW 273
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35901: LD_VAR 0 9
35905: PUSH
35906: LD_INT 1
35908: ARRAY
35909: PPUSH
35910: LD_VAR 0 9
35914: PUSH
35915: LD_INT 2
35917: ARRAY
35918: PPUSH
35919: CALL_OW 488
35923: IFFALSE 36022
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35925: LD_ADDR_VAR 0 4
35929: PUSH
35930: LD_VAR 0 9
35934: PUSH
35935: LD_INT 1
35937: ARRAY
35938: PPUSH
35939: LD_VAR 0 9
35943: PUSH
35944: LD_INT 2
35946: ARRAY
35947: PPUSH
35948: CALL_OW 546
35952: ST_TO_ADDR
// if hex [ 1 ] then
35953: LD_VAR 0 4
35957: PUSH
35958: LD_INT 1
35960: ARRAY
35961: IFFALSE 35965
// continue ;
35963: GO 35853
// h := hex [ 2 ] ;
35965: LD_ADDR_VAR 0 13
35969: PUSH
35970: LD_VAR 0 4
35974: PUSH
35975: LD_INT 2
35977: ARRAY
35978: ST_TO_ADDR
// if h + 7 < height then
35979: LD_VAR 0 13
35983: PUSH
35984: LD_INT 7
35986: PLUS
35987: PUSH
35988: LD_VAR 0 15
35992: LESS
35993: IFFALSE 36022
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35995: LD_ADDR_VAR 0 18
35999: PUSH
36000: LD_INT 7
36002: PUSH
36003: LD_INT 28
36005: PUSH
36006: LD_INT 45
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: LIST
36013: PUSH
36014: LD_VAR 0 12
36018: ARRAY
36019: ST_TO_ADDR
// break ;
36020: GO 36024
// end ; end ; end ;
36022: GO 35853
36024: POP
36025: POP
// end ; if not weapon then
36026: LD_VAR 0 18
36030: NOT
36031: IFFALSE 36091
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36033: LD_ADDR_VAR 0 5
36037: PUSH
36038: LD_VAR 0 5
36042: PUSH
36043: LD_INT 11
36045: PUSH
36046: LD_INT 30
36048: PUSH
36049: LD_INT 49
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: DIFF
36057: ST_TO_ADDR
// if not list then
36058: LD_VAR 0 5
36062: NOT
36063: IFFALSE 36067
// exit ;
36065: GO 36209
// weapon := list [ rand ( 1 , list ) ] ;
36067: LD_ADDR_VAR 0 18
36071: PUSH
36072: LD_VAR 0 5
36076: PUSH
36077: LD_INT 1
36079: PPUSH
36080: LD_VAR 0 5
36084: PPUSH
36085: CALL_OW 12
36089: ARRAY
36090: ST_TO_ADDR
// end ; if weapon then
36091: LD_VAR 0 18
36095: IFFALSE 36209
// begin tmp := CostOfWeapon ( weapon ) ;
36097: LD_ADDR_VAR 0 14
36101: PUSH
36102: LD_VAR 0 18
36106: PPUSH
36107: CALL_OW 451
36111: ST_TO_ADDR
// j := GetBase ( tower ) ;
36112: LD_ADDR_VAR 0 9
36116: PUSH
36117: LD_VAR 0 1
36121: PPUSH
36122: CALL_OW 274
36126: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36127: LD_VAR 0 9
36131: PPUSH
36132: LD_INT 1
36134: PPUSH
36135: CALL_OW 275
36139: PUSH
36140: LD_VAR 0 14
36144: PUSH
36145: LD_INT 1
36147: ARRAY
36148: GREATEREQUAL
36149: PUSH
36150: LD_VAR 0 9
36154: PPUSH
36155: LD_INT 2
36157: PPUSH
36158: CALL_OW 275
36162: PUSH
36163: LD_VAR 0 14
36167: PUSH
36168: LD_INT 2
36170: ARRAY
36171: GREATEREQUAL
36172: AND
36173: PUSH
36174: LD_VAR 0 9
36178: PPUSH
36179: LD_INT 3
36181: PPUSH
36182: CALL_OW 275
36186: PUSH
36187: LD_VAR 0 14
36191: PUSH
36192: LD_INT 3
36194: ARRAY
36195: GREATEREQUAL
36196: AND
36197: IFFALSE 36209
// result := weapon ;
36199: LD_ADDR_VAR 0 3
36203: PUSH
36204: LD_VAR 0 18
36208: ST_TO_ADDR
// end ; end ;
36209: LD_VAR 0 3
36213: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36214: LD_INT 0
36216: PPUSH
36217: PPUSH
// result := true ;
36218: LD_ADDR_VAR 0 3
36222: PUSH
36223: LD_INT 1
36225: ST_TO_ADDR
// if array1 = array2 then
36226: LD_VAR 0 1
36230: PUSH
36231: LD_VAR 0 2
36235: EQUAL
36236: IFFALSE 36296
// begin for i = 1 to array1 do
36238: LD_ADDR_VAR 0 4
36242: PUSH
36243: DOUBLE
36244: LD_INT 1
36246: DEC
36247: ST_TO_ADDR
36248: LD_VAR 0 1
36252: PUSH
36253: FOR_TO
36254: IFFALSE 36292
// if array1 [ i ] <> array2 [ i ] then
36256: LD_VAR 0 1
36260: PUSH
36261: LD_VAR 0 4
36265: ARRAY
36266: PUSH
36267: LD_VAR 0 2
36271: PUSH
36272: LD_VAR 0 4
36276: ARRAY
36277: NONEQUAL
36278: IFFALSE 36290
// begin result := false ;
36280: LD_ADDR_VAR 0 3
36284: PUSH
36285: LD_INT 0
36287: ST_TO_ADDR
// break ;
36288: GO 36292
// end ;
36290: GO 36253
36292: POP
36293: POP
// end else
36294: GO 36304
// result := false ;
36296: LD_ADDR_VAR 0 3
36300: PUSH
36301: LD_INT 0
36303: ST_TO_ADDR
// end ;
36304: LD_VAR 0 3
36308: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36309: LD_INT 0
36311: PPUSH
36312: PPUSH
// if not array1 or not array2 then
36313: LD_VAR 0 1
36317: NOT
36318: PUSH
36319: LD_VAR 0 2
36323: NOT
36324: OR
36325: IFFALSE 36329
// exit ;
36327: GO 36393
// result := true ;
36329: LD_ADDR_VAR 0 3
36333: PUSH
36334: LD_INT 1
36336: ST_TO_ADDR
// for i = 1 to array1 do
36337: LD_ADDR_VAR 0 4
36341: PUSH
36342: DOUBLE
36343: LD_INT 1
36345: DEC
36346: ST_TO_ADDR
36347: LD_VAR 0 1
36351: PUSH
36352: FOR_TO
36353: IFFALSE 36391
// if array1 [ i ] <> array2 [ i ] then
36355: LD_VAR 0 1
36359: PUSH
36360: LD_VAR 0 4
36364: ARRAY
36365: PUSH
36366: LD_VAR 0 2
36370: PUSH
36371: LD_VAR 0 4
36375: ARRAY
36376: NONEQUAL
36377: IFFALSE 36389
// begin result := false ;
36379: LD_ADDR_VAR 0 3
36383: PUSH
36384: LD_INT 0
36386: ST_TO_ADDR
// break ;
36387: GO 36391
// end ;
36389: GO 36352
36391: POP
36392: POP
// end ;
36393: LD_VAR 0 3
36397: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36398: LD_INT 0
36400: PPUSH
36401: PPUSH
36402: PPUSH
// pom := GetBase ( fac ) ;
36403: LD_ADDR_VAR 0 5
36407: PUSH
36408: LD_VAR 0 1
36412: PPUSH
36413: CALL_OW 274
36417: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36418: LD_ADDR_VAR 0 4
36422: PUSH
36423: LD_VAR 0 2
36427: PUSH
36428: LD_INT 1
36430: ARRAY
36431: PPUSH
36432: LD_VAR 0 2
36436: PUSH
36437: LD_INT 2
36439: ARRAY
36440: PPUSH
36441: LD_VAR 0 2
36445: PUSH
36446: LD_INT 3
36448: ARRAY
36449: PPUSH
36450: LD_VAR 0 2
36454: PUSH
36455: LD_INT 4
36457: ARRAY
36458: PPUSH
36459: CALL_OW 449
36463: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36464: LD_ADDR_VAR 0 3
36468: PUSH
36469: LD_VAR 0 5
36473: PPUSH
36474: LD_INT 1
36476: PPUSH
36477: CALL_OW 275
36481: PUSH
36482: LD_VAR 0 4
36486: PUSH
36487: LD_INT 1
36489: ARRAY
36490: GREATEREQUAL
36491: PUSH
36492: LD_VAR 0 5
36496: PPUSH
36497: LD_INT 2
36499: PPUSH
36500: CALL_OW 275
36504: PUSH
36505: LD_VAR 0 4
36509: PUSH
36510: LD_INT 2
36512: ARRAY
36513: GREATEREQUAL
36514: AND
36515: PUSH
36516: LD_VAR 0 5
36520: PPUSH
36521: LD_INT 3
36523: PPUSH
36524: CALL_OW 275
36528: PUSH
36529: LD_VAR 0 4
36533: PUSH
36534: LD_INT 3
36536: ARRAY
36537: GREATEREQUAL
36538: AND
36539: ST_TO_ADDR
// end ;
36540: LD_VAR 0 3
36544: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36545: LD_INT 0
36547: PPUSH
36548: PPUSH
36549: PPUSH
36550: PPUSH
// pom := GetBase ( building ) ;
36551: LD_ADDR_VAR 0 3
36555: PUSH
36556: LD_VAR 0 1
36560: PPUSH
36561: CALL_OW 274
36565: ST_TO_ADDR
// if not pom then
36566: LD_VAR 0 3
36570: NOT
36571: IFFALSE 36575
// exit ;
36573: GO 36745
// btype := GetBType ( building ) ;
36575: LD_ADDR_VAR 0 5
36579: PUSH
36580: LD_VAR 0 1
36584: PPUSH
36585: CALL_OW 266
36589: ST_TO_ADDR
// if btype = b_armoury then
36590: LD_VAR 0 5
36594: PUSH
36595: LD_INT 4
36597: EQUAL
36598: IFFALSE 36608
// btype := b_barracks ;
36600: LD_ADDR_VAR 0 5
36604: PUSH
36605: LD_INT 5
36607: ST_TO_ADDR
// if btype = b_depot then
36608: LD_VAR 0 5
36612: PUSH
36613: LD_INT 0
36615: EQUAL
36616: IFFALSE 36626
// btype := b_warehouse ;
36618: LD_ADDR_VAR 0 5
36622: PUSH
36623: LD_INT 1
36625: ST_TO_ADDR
// if btype = b_workshop then
36626: LD_VAR 0 5
36630: PUSH
36631: LD_INT 2
36633: EQUAL
36634: IFFALSE 36644
// btype := b_factory ;
36636: LD_ADDR_VAR 0 5
36640: PUSH
36641: LD_INT 3
36643: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36644: LD_ADDR_VAR 0 4
36648: PUSH
36649: LD_VAR 0 5
36653: PPUSH
36654: LD_VAR 0 1
36658: PPUSH
36659: CALL_OW 248
36663: PPUSH
36664: CALL_OW 450
36668: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36669: LD_ADDR_VAR 0 2
36673: PUSH
36674: LD_VAR 0 3
36678: PPUSH
36679: LD_INT 1
36681: PPUSH
36682: CALL_OW 275
36686: PUSH
36687: LD_VAR 0 4
36691: PUSH
36692: LD_INT 1
36694: ARRAY
36695: GREATEREQUAL
36696: PUSH
36697: LD_VAR 0 3
36701: PPUSH
36702: LD_INT 2
36704: PPUSH
36705: CALL_OW 275
36709: PUSH
36710: LD_VAR 0 4
36714: PUSH
36715: LD_INT 2
36717: ARRAY
36718: GREATEREQUAL
36719: AND
36720: PUSH
36721: LD_VAR 0 3
36725: PPUSH
36726: LD_INT 3
36728: PPUSH
36729: CALL_OW 275
36733: PUSH
36734: LD_VAR 0 4
36738: PUSH
36739: LD_INT 3
36741: ARRAY
36742: GREATEREQUAL
36743: AND
36744: ST_TO_ADDR
// end ;
36745: LD_VAR 0 2
36749: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36750: LD_INT 0
36752: PPUSH
36753: PPUSH
36754: PPUSH
// pom := GetBase ( building ) ;
36755: LD_ADDR_VAR 0 4
36759: PUSH
36760: LD_VAR 0 1
36764: PPUSH
36765: CALL_OW 274
36769: ST_TO_ADDR
// if not pom then
36770: LD_VAR 0 4
36774: NOT
36775: IFFALSE 36779
// exit ;
36777: GO 36880
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36779: LD_ADDR_VAR 0 5
36783: PUSH
36784: LD_VAR 0 2
36788: PPUSH
36789: LD_VAR 0 1
36793: PPUSH
36794: CALL_OW 248
36798: PPUSH
36799: CALL_OW 450
36803: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36804: LD_ADDR_VAR 0 3
36808: PUSH
36809: LD_VAR 0 4
36813: PPUSH
36814: LD_INT 1
36816: PPUSH
36817: CALL_OW 275
36821: PUSH
36822: LD_VAR 0 5
36826: PUSH
36827: LD_INT 1
36829: ARRAY
36830: GREATEREQUAL
36831: PUSH
36832: LD_VAR 0 4
36836: PPUSH
36837: LD_INT 2
36839: PPUSH
36840: CALL_OW 275
36844: PUSH
36845: LD_VAR 0 5
36849: PUSH
36850: LD_INT 2
36852: ARRAY
36853: GREATEREQUAL
36854: AND
36855: PUSH
36856: LD_VAR 0 4
36860: PPUSH
36861: LD_INT 3
36863: PPUSH
36864: CALL_OW 275
36868: PUSH
36869: LD_VAR 0 5
36873: PUSH
36874: LD_INT 3
36876: ARRAY
36877: GREATEREQUAL
36878: AND
36879: ST_TO_ADDR
// end ;
36880: LD_VAR 0 3
36884: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36885: LD_INT 0
36887: PPUSH
36888: PPUSH
36889: PPUSH
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
36894: PPUSH
36895: PPUSH
36896: PPUSH
36897: PPUSH
// result := false ;
36898: LD_ADDR_VAR 0 8
36902: PUSH
36903: LD_INT 0
36905: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36906: LD_VAR 0 5
36910: NOT
36911: PUSH
36912: LD_VAR 0 1
36916: NOT
36917: OR
36918: PUSH
36919: LD_VAR 0 2
36923: NOT
36924: OR
36925: PUSH
36926: LD_VAR 0 3
36930: NOT
36931: OR
36932: IFFALSE 36936
// exit ;
36934: GO 37750
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36936: LD_ADDR_VAR 0 14
36940: PUSH
36941: LD_VAR 0 1
36945: PPUSH
36946: LD_VAR 0 2
36950: PPUSH
36951: LD_VAR 0 3
36955: PPUSH
36956: LD_VAR 0 4
36960: PPUSH
36961: LD_VAR 0 5
36965: PUSH
36966: LD_INT 1
36968: ARRAY
36969: PPUSH
36970: CALL_OW 248
36974: PPUSH
36975: LD_INT 0
36977: PPUSH
36978: CALL 38987 0 6
36982: ST_TO_ADDR
// if not hexes then
36983: LD_VAR 0 14
36987: NOT
36988: IFFALSE 36992
// exit ;
36990: GO 37750
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36992: LD_ADDR_VAR 0 17
36996: PUSH
36997: LD_VAR 0 5
37001: PPUSH
37002: LD_INT 22
37004: PUSH
37005: LD_VAR 0 13
37009: PPUSH
37010: CALL_OW 255
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: PUSH
37022: LD_INT 30
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 30
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: LIST
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PPUSH
37051: CALL_OW 72
37055: ST_TO_ADDR
// for i = 1 to hexes do
37056: LD_ADDR_VAR 0 9
37060: PUSH
37061: DOUBLE
37062: LD_INT 1
37064: DEC
37065: ST_TO_ADDR
37066: LD_VAR 0 14
37070: PUSH
37071: FOR_TO
37072: IFFALSE 37748
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37074: LD_ADDR_VAR 0 13
37078: PUSH
37079: LD_VAR 0 14
37083: PUSH
37084: LD_VAR 0 9
37088: ARRAY
37089: PUSH
37090: LD_INT 1
37092: ARRAY
37093: PPUSH
37094: LD_VAR 0 14
37098: PUSH
37099: LD_VAR 0 9
37103: ARRAY
37104: PUSH
37105: LD_INT 2
37107: ARRAY
37108: PPUSH
37109: CALL_OW 428
37113: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37114: LD_VAR 0 14
37118: PUSH
37119: LD_VAR 0 9
37123: ARRAY
37124: PUSH
37125: LD_INT 1
37127: ARRAY
37128: PPUSH
37129: LD_VAR 0 14
37133: PUSH
37134: LD_VAR 0 9
37138: ARRAY
37139: PUSH
37140: LD_INT 2
37142: ARRAY
37143: PPUSH
37144: CALL_OW 351
37148: PUSH
37149: LD_VAR 0 14
37153: PUSH
37154: LD_VAR 0 9
37158: ARRAY
37159: PUSH
37160: LD_INT 1
37162: ARRAY
37163: PPUSH
37164: LD_VAR 0 14
37168: PUSH
37169: LD_VAR 0 9
37173: ARRAY
37174: PUSH
37175: LD_INT 2
37177: ARRAY
37178: PPUSH
37179: CALL_OW 488
37183: NOT
37184: OR
37185: PUSH
37186: LD_VAR 0 13
37190: PPUSH
37191: CALL_OW 247
37195: PUSH
37196: LD_INT 3
37198: EQUAL
37199: OR
37200: IFFALSE 37206
// exit ;
37202: POP
37203: POP
37204: GO 37750
// if not tmp then
37206: LD_VAR 0 13
37210: NOT
37211: IFFALSE 37215
// continue ;
37213: GO 37071
// result := true ;
37215: LD_ADDR_VAR 0 8
37219: PUSH
37220: LD_INT 1
37222: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37223: LD_VAR 0 6
37227: PUSH
37228: LD_VAR 0 13
37232: PPUSH
37233: CALL_OW 247
37237: PUSH
37238: LD_INT 2
37240: EQUAL
37241: AND
37242: PUSH
37243: LD_VAR 0 13
37247: PPUSH
37248: CALL_OW 263
37252: PUSH
37253: LD_INT 1
37255: EQUAL
37256: AND
37257: IFFALSE 37421
// begin if IsDrivenBy ( tmp ) then
37259: LD_VAR 0 13
37263: PPUSH
37264: CALL_OW 311
37268: IFFALSE 37272
// continue ;
37270: GO 37071
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37272: LD_VAR 0 6
37276: PPUSH
37277: LD_INT 3
37279: PUSH
37280: LD_INT 60
37282: PUSH
37283: EMPTY
37284: LIST
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 3
37292: PUSH
37293: LD_INT 55
37295: PUSH
37296: EMPTY
37297: LIST
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PPUSH
37307: CALL_OW 72
37311: IFFALSE 37419
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37313: LD_ADDR_VAR 0 18
37317: PUSH
37318: LD_VAR 0 6
37322: PPUSH
37323: LD_INT 3
37325: PUSH
37326: LD_INT 60
37328: PUSH
37329: EMPTY
37330: LIST
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 3
37338: PUSH
37339: LD_INT 55
37341: PUSH
37342: EMPTY
37343: LIST
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PPUSH
37353: CALL_OW 72
37357: PUSH
37358: LD_INT 1
37360: ARRAY
37361: ST_TO_ADDR
// if IsInUnit ( driver ) then
37362: LD_VAR 0 18
37366: PPUSH
37367: CALL_OW 310
37371: IFFALSE 37382
// ComExit ( driver ) ;
37373: LD_VAR 0 18
37377: PPUSH
37378: CALL 62115 0 1
// AddComEnterUnit ( driver , tmp ) ;
37382: LD_VAR 0 18
37386: PPUSH
37387: LD_VAR 0 13
37391: PPUSH
37392: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37396: LD_VAR 0 18
37400: PPUSH
37401: LD_VAR 0 7
37405: PPUSH
37406: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37410: LD_VAR 0 18
37414: PPUSH
37415: CALL_OW 181
// end ; continue ;
37419: GO 37071
// end ; if not cleaners or not tmp in cleaners then
37421: LD_VAR 0 6
37425: NOT
37426: PUSH
37427: LD_VAR 0 13
37431: PUSH
37432: LD_VAR 0 6
37436: IN
37437: NOT
37438: OR
37439: IFFALSE 37746
// begin if dep then
37441: LD_VAR 0 17
37445: IFFALSE 37581
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37447: LD_ADDR_VAR 0 16
37451: PUSH
37452: LD_VAR 0 17
37456: PUSH
37457: LD_INT 1
37459: ARRAY
37460: PPUSH
37461: CALL_OW 250
37465: PPUSH
37466: LD_VAR 0 17
37470: PUSH
37471: LD_INT 1
37473: ARRAY
37474: PPUSH
37475: CALL_OW 254
37479: PPUSH
37480: LD_INT 5
37482: PPUSH
37483: CALL_OW 272
37487: PUSH
37488: LD_VAR 0 17
37492: PUSH
37493: LD_INT 1
37495: ARRAY
37496: PPUSH
37497: CALL_OW 251
37501: PPUSH
37502: LD_VAR 0 17
37506: PUSH
37507: LD_INT 1
37509: ARRAY
37510: PPUSH
37511: CALL_OW 254
37515: PPUSH
37516: LD_INT 5
37518: PPUSH
37519: CALL_OW 273
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37528: LD_VAR 0 16
37532: PUSH
37533: LD_INT 1
37535: ARRAY
37536: PPUSH
37537: LD_VAR 0 16
37541: PUSH
37542: LD_INT 2
37544: ARRAY
37545: PPUSH
37546: CALL_OW 488
37550: IFFALSE 37581
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37552: LD_VAR 0 13
37556: PPUSH
37557: LD_VAR 0 16
37561: PUSH
37562: LD_INT 1
37564: ARRAY
37565: PPUSH
37566: LD_VAR 0 16
37570: PUSH
37571: LD_INT 2
37573: ARRAY
37574: PPUSH
37575: CALL_OW 111
// continue ;
37579: GO 37071
// end ; end ; r := GetDir ( tmp ) ;
37581: LD_ADDR_VAR 0 15
37585: PUSH
37586: LD_VAR 0 13
37590: PPUSH
37591: CALL_OW 254
37595: ST_TO_ADDR
// if r = 5 then
37596: LD_VAR 0 15
37600: PUSH
37601: LD_INT 5
37603: EQUAL
37604: IFFALSE 37614
// r := 0 ;
37606: LD_ADDR_VAR 0 15
37610: PUSH
37611: LD_INT 0
37613: ST_TO_ADDR
// for j = r to 5 do
37614: LD_ADDR_VAR 0 10
37618: PUSH
37619: DOUBLE
37620: LD_VAR 0 15
37624: DEC
37625: ST_TO_ADDR
37626: LD_INT 5
37628: PUSH
37629: FOR_TO
37630: IFFALSE 37744
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37632: LD_ADDR_VAR 0 11
37636: PUSH
37637: LD_VAR 0 13
37641: PPUSH
37642: CALL_OW 250
37646: PPUSH
37647: LD_VAR 0 10
37651: PPUSH
37652: LD_INT 2
37654: PPUSH
37655: CALL_OW 272
37659: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37660: LD_ADDR_VAR 0 12
37664: PUSH
37665: LD_VAR 0 13
37669: PPUSH
37670: CALL_OW 251
37674: PPUSH
37675: LD_VAR 0 10
37679: PPUSH
37680: LD_INT 2
37682: PPUSH
37683: CALL_OW 273
37687: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37688: LD_VAR 0 11
37692: PPUSH
37693: LD_VAR 0 12
37697: PPUSH
37698: CALL_OW 488
37702: PUSH
37703: LD_VAR 0 11
37707: PPUSH
37708: LD_VAR 0 12
37712: PPUSH
37713: CALL_OW 428
37717: NOT
37718: AND
37719: IFFALSE 37742
// begin ComMoveXY ( tmp , _x , _y ) ;
37721: LD_VAR 0 13
37725: PPUSH
37726: LD_VAR 0 11
37730: PPUSH
37731: LD_VAR 0 12
37735: PPUSH
37736: CALL_OW 111
// break ;
37740: GO 37744
// end ; end ;
37742: GO 37629
37744: POP
37745: POP
// end ; end ;
37746: GO 37071
37748: POP
37749: POP
// end ;
37750: LD_VAR 0 8
37754: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37755: LD_INT 0
37757: PPUSH
// result := true ;
37758: LD_ADDR_VAR 0 3
37762: PUSH
37763: LD_INT 1
37765: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37766: LD_VAR 0 2
37770: PUSH
37771: LD_INT 24
37773: DOUBLE
37774: EQUAL
37775: IFTRUE 37785
37777: LD_INT 33
37779: DOUBLE
37780: EQUAL
37781: IFTRUE 37785
37783: GO 37810
37785: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37786: LD_ADDR_VAR 0 3
37790: PUSH
37791: LD_INT 32
37793: PPUSH
37794: LD_VAR 0 1
37798: PPUSH
37799: CALL_OW 321
37803: PUSH
37804: LD_INT 2
37806: EQUAL
37807: ST_TO_ADDR
37808: GO 38130
37810: LD_INT 20
37812: DOUBLE
37813: EQUAL
37814: IFTRUE 37818
37816: GO 37843
37818: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37819: LD_ADDR_VAR 0 3
37823: PUSH
37824: LD_INT 6
37826: PPUSH
37827: LD_VAR 0 1
37831: PPUSH
37832: CALL_OW 321
37836: PUSH
37837: LD_INT 2
37839: EQUAL
37840: ST_TO_ADDR
37841: GO 38130
37843: LD_INT 22
37845: DOUBLE
37846: EQUAL
37847: IFTRUE 37857
37849: LD_INT 36
37851: DOUBLE
37852: EQUAL
37853: IFTRUE 37857
37855: GO 37882
37857: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37858: LD_ADDR_VAR 0 3
37862: PUSH
37863: LD_INT 15
37865: PPUSH
37866: LD_VAR 0 1
37870: PPUSH
37871: CALL_OW 321
37875: PUSH
37876: LD_INT 2
37878: EQUAL
37879: ST_TO_ADDR
37880: GO 38130
37882: LD_INT 30
37884: DOUBLE
37885: EQUAL
37886: IFTRUE 37890
37888: GO 37915
37890: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37891: LD_ADDR_VAR 0 3
37895: PUSH
37896: LD_INT 20
37898: PPUSH
37899: LD_VAR 0 1
37903: PPUSH
37904: CALL_OW 321
37908: PUSH
37909: LD_INT 2
37911: EQUAL
37912: ST_TO_ADDR
37913: GO 38130
37915: LD_INT 28
37917: DOUBLE
37918: EQUAL
37919: IFTRUE 37929
37921: LD_INT 21
37923: DOUBLE
37924: EQUAL
37925: IFTRUE 37929
37927: GO 37954
37929: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37930: LD_ADDR_VAR 0 3
37934: PUSH
37935: LD_INT 21
37937: PPUSH
37938: LD_VAR 0 1
37942: PPUSH
37943: CALL_OW 321
37947: PUSH
37948: LD_INT 2
37950: EQUAL
37951: ST_TO_ADDR
37952: GO 38130
37954: LD_INT 16
37956: DOUBLE
37957: EQUAL
37958: IFTRUE 37962
37960: GO 37989
37962: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37963: LD_ADDR_VAR 0 3
37967: PUSH
37968: LD_EXP 106
37972: PPUSH
37973: LD_VAR 0 1
37977: PPUSH
37978: CALL_OW 321
37982: PUSH
37983: LD_INT 2
37985: EQUAL
37986: ST_TO_ADDR
37987: GO 38130
37989: LD_INT 19
37991: DOUBLE
37992: EQUAL
37993: IFTRUE 38003
37995: LD_INT 23
37997: DOUBLE
37998: EQUAL
37999: IFTRUE 38003
38001: GO 38030
38003: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38004: LD_ADDR_VAR 0 3
38008: PUSH
38009: LD_EXP 105
38013: PPUSH
38014: LD_VAR 0 1
38018: PPUSH
38019: CALL_OW 321
38023: PUSH
38024: LD_INT 2
38026: EQUAL
38027: ST_TO_ADDR
38028: GO 38130
38030: LD_INT 17
38032: DOUBLE
38033: EQUAL
38034: IFTRUE 38038
38036: GO 38063
38038: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38039: LD_ADDR_VAR 0 3
38043: PUSH
38044: LD_INT 39
38046: PPUSH
38047: LD_VAR 0 1
38051: PPUSH
38052: CALL_OW 321
38056: PUSH
38057: LD_INT 2
38059: EQUAL
38060: ST_TO_ADDR
38061: GO 38130
38063: LD_INT 18
38065: DOUBLE
38066: EQUAL
38067: IFTRUE 38071
38069: GO 38096
38071: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38072: LD_ADDR_VAR 0 3
38076: PUSH
38077: LD_INT 40
38079: PPUSH
38080: LD_VAR 0 1
38084: PPUSH
38085: CALL_OW 321
38089: PUSH
38090: LD_INT 2
38092: EQUAL
38093: ST_TO_ADDR
38094: GO 38130
38096: LD_INT 27
38098: DOUBLE
38099: EQUAL
38100: IFTRUE 38104
38102: GO 38129
38104: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38105: LD_ADDR_VAR 0 3
38109: PUSH
38110: LD_INT 35
38112: PPUSH
38113: LD_VAR 0 1
38117: PPUSH
38118: CALL_OW 321
38122: PUSH
38123: LD_INT 2
38125: EQUAL
38126: ST_TO_ADDR
38127: GO 38130
38129: POP
// end ;
38130: LD_VAR 0 3
38134: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38135: LD_INT 0
38137: PPUSH
38138: PPUSH
38139: PPUSH
38140: PPUSH
38141: PPUSH
38142: PPUSH
38143: PPUSH
38144: PPUSH
38145: PPUSH
38146: PPUSH
38147: PPUSH
// result := false ;
38148: LD_ADDR_VAR 0 6
38152: PUSH
38153: LD_INT 0
38155: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38156: LD_VAR 0 1
38160: NOT
38161: PUSH
38162: LD_VAR 0 1
38166: PPUSH
38167: CALL_OW 266
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: IN
38182: NOT
38183: OR
38184: PUSH
38185: LD_VAR 0 2
38189: NOT
38190: OR
38191: PUSH
38192: LD_VAR 0 5
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: LD_INT 2
38205: PUSH
38206: LD_INT 3
38208: PUSH
38209: LD_INT 4
38211: PUSH
38212: LD_INT 5
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: IN
38223: NOT
38224: OR
38225: PUSH
38226: LD_VAR 0 3
38230: PPUSH
38231: LD_VAR 0 4
38235: PPUSH
38236: CALL_OW 488
38240: NOT
38241: OR
38242: IFFALSE 38246
// exit ;
38244: GO 38982
// side := GetSide ( depot ) ;
38246: LD_ADDR_VAR 0 9
38250: PUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: CALL_OW 255
38260: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38261: LD_VAR 0 9
38265: PPUSH
38266: LD_VAR 0 2
38270: PPUSH
38271: CALL 37755 0 2
38275: NOT
38276: IFFALSE 38280
// exit ;
38278: GO 38982
// pom := GetBase ( depot ) ;
38280: LD_ADDR_VAR 0 10
38284: PUSH
38285: LD_VAR 0 1
38289: PPUSH
38290: CALL_OW 274
38294: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38295: LD_ADDR_VAR 0 11
38299: PUSH
38300: LD_VAR 0 2
38304: PPUSH
38305: LD_VAR 0 1
38309: PPUSH
38310: CALL_OW 248
38314: PPUSH
38315: CALL_OW 450
38319: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38320: LD_VAR 0 10
38324: PPUSH
38325: LD_INT 1
38327: PPUSH
38328: CALL_OW 275
38332: PUSH
38333: LD_VAR 0 11
38337: PUSH
38338: LD_INT 1
38340: ARRAY
38341: GREATEREQUAL
38342: PUSH
38343: LD_VAR 0 10
38347: PPUSH
38348: LD_INT 2
38350: PPUSH
38351: CALL_OW 275
38355: PUSH
38356: LD_VAR 0 11
38360: PUSH
38361: LD_INT 2
38363: ARRAY
38364: GREATEREQUAL
38365: AND
38366: PUSH
38367: LD_VAR 0 10
38371: PPUSH
38372: LD_INT 3
38374: PPUSH
38375: CALL_OW 275
38379: PUSH
38380: LD_VAR 0 11
38384: PUSH
38385: LD_INT 3
38387: ARRAY
38388: GREATEREQUAL
38389: AND
38390: NOT
38391: IFFALSE 38395
// exit ;
38393: GO 38982
// if GetBType ( depot ) = b_depot then
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL_OW 266
38404: PUSH
38405: LD_INT 0
38407: EQUAL
38408: IFFALSE 38420
// dist := 28 else
38410: LD_ADDR_VAR 0 14
38414: PUSH
38415: LD_INT 28
38417: ST_TO_ADDR
38418: GO 38428
// dist := 36 ;
38420: LD_ADDR_VAR 0 14
38424: PUSH
38425: LD_INT 36
38427: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38428: LD_VAR 0 1
38432: PPUSH
38433: LD_VAR 0 3
38437: PPUSH
38438: LD_VAR 0 4
38442: PPUSH
38443: CALL_OW 297
38447: PUSH
38448: LD_VAR 0 14
38452: GREATER
38453: IFFALSE 38457
// exit ;
38455: GO 38982
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38457: LD_ADDR_VAR 0 12
38461: PUSH
38462: LD_VAR 0 2
38466: PPUSH
38467: LD_VAR 0 3
38471: PPUSH
38472: LD_VAR 0 4
38476: PPUSH
38477: LD_VAR 0 5
38481: PPUSH
38482: LD_VAR 0 1
38486: PPUSH
38487: CALL_OW 248
38491: PPUSH
38492: LD_INT 0
38494: PPUSH
38495: CALL 38987 0 6
38499: ST_TO_ADDR
// if not hexes then
38500: LD_VAR 0 12
38504: NOT
38505: IFFALSE 38509
// exit ;
38507: GO 38982
// hex := GetHexInfo ( x , y ) ;
38509: LD_ADDR_VAR 0 15
38513: PUSH
38514: LD_VAR 0 3
38518: PPUSH
38519: LD_VAR 0 4
38523: PPUSH
38524: CALL_OW 546
38528: ST_TO_ADDR
// if hex [ 1 ] then
38529: LD_VAR 0 15
38533: PUSH
38534: LD_INT 1
38536: ARRAY
38537: IFFALSE 38541
// exit ;
38539: GO 38982
// height := hex [ 2 ] ;
38541: LD_ADDR_VAR 0 13
38545: PUSH
38546: LD_VAR 0 15
38550: PUSH
38551: LD_INT 2
38553: ARRAY
38554: ST_TO_ADDR
// for i = 1 to hexes do
38555: LD_ADDR_VAR 0 7
38559: PUSH
38560: DOUBLE
38561: LD_INT 1
38563: DEC
38564: ST_TO_ADDR
38565: LD_VAR 0 12
38569: PUSH
38570: FOR_TO
38571: IFFALSE 38901
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38573: LD_VAR 0 12
38577: PUSH
38578: LD_VAR 0 7
38582: ARRAY
38583: PUSH
38584: LD_INT 1
38586: ARRAY
38587: PPUSH
38588: LD_VAR 0 12
38592: PUSH
38593: LD_VAR 0 7
38597: ARRAY
38598: PUSH
38599: LD_INT 2
38601: ARRAY
38602: PPUSH
38603: CALL_OW 488
38607: NOT
38608: PUSH
38609: LD_VAR 0 12
38613: PUSH
38614: LD_VAR 0 7
38618: ARRAY
38619: PUSH
38620: LD_INT 1
38622: ARRAY
38623: PPUSH
38624: LD_VAR 0 12
38628: PUSH
38629: LD_VAR 0 7
38633: ARRAY
38634: PUSH
38635: LD_INT 2
38637: ARRAY
38638: PPUSH
38639: CALL_OW 428
38643: PUSH
38644: LD_INT 0
38646: GREATER
38647: OR
38648: PUSH
38649: LD_VAR 0 12
38653: PUSH
38654: LD_VAR 0 7
38658: ARRAY
38659: PUSH
38660: LD_INT 1
38662: ARRAY
38663: PPUSH
38664: LD_VAR 0 12
38668: PUSH
38669: LD_VAR 0 7
38673: ARRAY
38674: PUSH
38675: LD_INT 2
38677: ARRAY
38678: PPUSH
38679: CALL_OW 351
38683: OR
38684: IFFALSE 38690
// exit ;
38686: POP
38687: POP
38688: GO 38982
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38690: LD_ADDR_VAR 0 8
38694: PUSH
38695: LD_VAR 0 12
38699: PUSH
38700: LD_VAR 0 7
38704: ARRAY
38705: PUSH
38706: LD_INT 1
38708: ARRAY
38709: PPUSH
38710: LD_VAR 0 12
38714: PUSH
38715: LD_VAR 0 7
38719: ARRAY
38720: PUSH
38721: LD_INT 2
38723: ARRAY
38724: PPUSH
38725: CALL_OW 546
38729: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38730: LD_VAR 0 8
38734: PUSH
38735: LD_INT 1
38737: ARRAY
38738: PUSH
38739: LD_VAR 0 8
38743: PUSH
38744: LD_INT 2
38746: ARRAY
38747: PUSH
38748: LD_VAR 0 13
38752: PUSH
38753: LD_INT 2
38755: PLUS
38756: GREATER
38757: OR
38758: PUSH
38759: LD_VAR 0 8
38763: PUSH
38764: LD_INT 2
38766: ARRAY
38767: PUSH
38768: LD_VAR 0 13
38772: PUSH
38773: LD_INT 2
38775: MINUS
38776: LESS
38777: OR
38778: PUSH
38779: LD_VAR 0 8
38783: PUSH
38784: LD_INT 3
38786: ARRAY
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: LD_INT 8
38793: PUSH
38794: LD_INT 9
38796: PUSH
38797: LD_INT 10
38799: PUSH
38800: LD_INT 11
38802: PUSH
38803: LD_INT 12
38805: PUSH
38806: LD_INT 13
38808: PUSH
38809: LD_INT 16
38811: PUSH
38812: LD_INT 17
38814: PUSH
38815: LD_INT 18
38817: PUSH
38818: LD_INT 19
38820: PUSH
38821: LD_INT 20
38823: PUSH
38824: LD_INT 21
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: IN
38842: NOT
38843: OR
38844: PUSH
38845: LD_VAR 0 8
38849: PUSH
38850: LD_INT 5
38852: ARRAY
38853: NOT
38854: OR
38855: PUSH
38856: LD_VAR 0 8
38860: PUSH
38861: LD_INT 6
38863: ARRAY
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: LD_INT 7
38873: PUSH
38874: LD_INT 9
38876: PUSH
38877: LD_INT 10
38879: PUSH
38880: LD_INT 11
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: IN
38891: NOT
38892: OR
38893: IFFALSE 38899
// exit ;
38895: POP
38896: POP
38897: GO 38982
// end ;
38899: GO 38570
38901: POP
38902: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38903: LD_VAR 0 9
38907: PPUSH
38908: LD_VAR 0 3
38912: PPUSH
38913: LD_VAR 0 4
38917: PPUSH
38918: LD_INT 20
38920: PPUSH
38921: CALL 30928 0 4
38925: PUSH
38926: LD_INT 4
38928: ARRAY
38929: IFFALSE 38933
// exit ;
38931: GO 38982
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38933: LD_VAR 0 2
38937: PUSH
38938: LD_INT 29
38940: PUSH
38941: LD_INT 30
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: IN
38948: PUSH
38949: LD_VAR 0 3
38953: PPUSH
38954: LD_VAR 0 4
38958: PPUSH
38959: LD_VAR 0 9
38963: PPUSH
38964: CALL_OW 440
38968: NOT
38969: AND
38970: IFFALSE 38974
// exit ;
38972: GO 38982
// result := true ;
38974: LD_ADDR_VAR 0 6
38978: PUSH
38979: LD_INT 1
38981: ST_TO_ADDR
// end ;
38982: LD_VAR 0 6
38986: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38987: LD_INT 0
38989: PPUSH
38990: PPUSH
38991: PPUSH
38992: PPUSH
38993: PPUSH
38994: PPUSH
38995: PPUSH
38996: PPUSH
38997: PPUSH
38998: PPUSH
38999: PPUSH
39000: PPUSH
39001: PPUSH
39002: PPUSH
39003: PPUSH
39004: PPUSH
39005: PPUSH
39006: PPUSH
39007: PPUSH
39008: PPUSH
39009: PPUSH
39010: PPUSH
39011: PPUSH
39012: PPUSH
39013: PPUSH
39014: PPUSH
39015: PPUSH
39016: PPUSH
39017: PPUSH
39018: PPUSH
39019: PPUSH
39020: PPUSH
39021: PPUSH
39022: PPUSH
39023: PPUSH
39024: PPUSH
39025: PPUSH
39026: PPUSH
39027: PPUSH
39028: PPUSH
39029: PPUSH
39030: PPUSH
39031: PPUSH
39032: PPUSH
39033: PPUSH
39034: PPUSH
39035: PPUSH
39036: PPUSH
39037: PPUSH
39038: PPUSH
39039: PPUSH
39040: PPUSH
39041: PPUSH
39042: PPUSH
39043: PPUSH
39044: PPUSH
39045: PPUSH
39046: PPUSH
// result = [ ] ;
39047: LD_ADDR_VAR 0 7
39051: PUSH
39052: EMPTY
39053: ST_TO_ADDR
// temp_list = [ ] ;
39054: LD_ADDR_VAR 0 9
39058: PUSH
39059: EMPTY
39060: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39061: LD_VAR 0 4
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: LD_INT 3
39077: PUSH
39078: LD_INT 4
39080: PUSH
39081: LD_INT 5
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: IN
39092: NOT
39093: PUSH
39094: LD_VAR 0 1
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: IN
39109: PUSH
39110: LD_VAR 0 5
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: LD_INT 3
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: IN
39129: NOT
39130: AND
39131: OR
39132: IFFALSE 39136
// exit ;
39134: GO 57527
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39136: LD_VAR 0 1
39140: PUSH
39141: LD_INT 6
39143: PUSH
39144: LD_INT 7
39146: PUSH
39147: LD_INT 8
39149: PUSH
39150: LD_INT 13
39152: PUSH
39153: LD_INT 12
39155: PUSH
39156: LD_INT 15
39158: PUSH
39159: LD_INT 11
39161: PUSH
39162: LD_INT 14
39164: PUSH
39165: LD_INT 10
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: IN
39179: IFFALSE 39189
// btype = b_lab ;
39181: LD_ADDR_VAR 0 1
39185: PUSH
39186: LD_INT 6
39188: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39189: LD_VAR 0 6
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: LIST
39207: IN
39208: NOT
39209: PUSH
39210: LD_VAR 0 1
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: LD_INT 3
39226: PUSH
39227: LD_INT 6
39229: PUSH
39230: LD_INT 36
39232: PUSH
39233: LD_INT 4
39235: PUSH
39236: LD_INT 5
39238: PUSH
39239: LD_INT 31
39241: PUSH
39242: LD_INT 32
39244: PUSH
39245: LD_INT 33
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: IN
39261: NOT
39262: PUSH
39263: LD_VAR 0 6
39267: PUSH
39268: LD_INT 1
39270: EQUAL
39271: AND
39272: OR
39273: PUSH
39274: LD_VAR 0 1
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: LD_INT 3
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: IN
39289: NOT
39290: PUSH
39291: LD_VAR 0 6
39295: PUSH
39296: LD_INT 2
39298: EQUAL
39299: AND
39300: OR
39301: IFFALSE 39311
// mode = 0 ;
39303: LD_ADDR_VAR 0 6
39307: PUSH
39308: LD_INT 0
39310: ST_TO_ADDR
// case mode of 0 :
39311: LD_VAR 0 6
39315: PUSH
39316: LD_INT 0
39318: DOUBLE
39319: EQUAL
39320: IFTRUE 39324
39322: GO 50777
39324: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39325: LD_ADDR_VAR 0 11
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: LD_INT 2
39421: NEG
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: LD_INT 3
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: LD_INT 3
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: LD_INT 2
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39518: LD_ADDR_VAR 0 12
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: LD_INT 0
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 2
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 2
39641: NEG
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: NEG
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 3
39675: NEG
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 3
39686: NEG
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39714: LD_ADDR_VAR 0 13
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: LD_INT 2
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 2
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: LD_INT 2
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 2
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: NEG
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: LD_INT 2
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 2
39861: NEG
39862: PUSH
39863: LD_INT 3
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 3
39873: NEG
39874: PUSH
39875: LD_INT 2
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 3
39885: NEG
39886: PUSH
39887: LD_INT 3
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39913: LD_ADDR_VAR 0 14
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: LD_INT 2
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 2
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: NEG
40060: PUSH
40061: LD_INT 3
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 3
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: LD_INT 2
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40109: LD_ADDR_VAR 0 15
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 2
40232: NEG
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: LD_INT 1
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 3
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 3
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40302: LD_ADDR_VAR 0 16
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: LD_INT 2
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 3
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 3
40459: PUSH
40460: LD_INT 3
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: PUSH
40470: LD_INT 3
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40495: LD_ADDR_VAR 0 17
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 2
40694: NEG
40695: PUSH
40696: LD_INT 2
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40725: LD_ADDR_VAR 0 18
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 2
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 2
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: NEG
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 2
40901: NEG
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40955: LD_ADDR_VAR 0 19
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 2
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 2
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: LD_INT 2
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 2
41154: NEG
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41185: LD_ADDR_VAR 0 20
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 2
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 2
41361: NEG
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41415: LD_ADDR_VAR 0 21
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 2
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 2
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41645: LD_ADDR_VAR 0 22
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 2
41821: NEG
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41875: LD_ADDR_VAR 0 23
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: LD_INT 3
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 3
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42155: LD_ADDR_VAR 0 24
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: LD_INT 2
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 2
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 2
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: LD_INT 2
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 2
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 2
42354: NEG
42355: PUSH
42356: LD_INT 2
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 3
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 3
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42431: LD_ADDR_VAR 0 25
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 2
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 2
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 2
42607: NEG
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 2
42618: NEG
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 2
42630: NEG
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 3
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 3
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: LD_INT 3
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 3
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42705: LD_ADDR_VAR 0 26
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 2
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: LD_INT 3
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: LD_INT 3
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42981: LD_ADDR_VAR 0 27
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: LD_INT 2
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: LD_INT 2
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 2
43157: NEG
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 2
43180: NEG
43181: PUSH
43182: LD_INT 2
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 2
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 3
43214: NEG
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 3
43226: NEG
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43261: LD_ADDR_VAR 0 28
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 2
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: LD_INT 3
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: LD_INT 3
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 3
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 3
43508: NEG
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43543: LD_ADDR_VAR 0 29
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 2
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: NEG
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 2
43721: NEG
43722: PUSH
43723: LD_INT 2
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 2
43733: NEG
43734: PUSH
43735: LD_INT 3
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: LD_INT 3
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 3
43787: NEG
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43822: LD_ADDR_VAR 0 30
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 2
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 2
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 2
43988: NEG
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: LD_INT 3
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 3
44034: PUSH
44035: LD_INT 2
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 2
44044: PUSH
44045: LD_INT 3
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 3
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44100: LD_ADDR_VAR 0 31
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: LD_INT 3
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 3
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 3
44343: NEG
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44378: LD_ADDR_VAR 0 32
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: LD_INT 2
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 3
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 3
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: LD_INT 3
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 3
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44656: LD_ADDR_VAR 0 33
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: NEG
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: LD_INT 3
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 3
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 3
44900: NEG
44901: PUSH
44902: LD_INT 2
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44935: LD_ADDR_VAR 0 34
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 2
45091: NEG
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: NEG
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 3
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 3
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: LD_INT 3
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 3
45180: NEG
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45215: LD_ADDR_VAR 0 35
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45327: LD_ADDR_VAR 0 36
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45439: LD_ADDR_VAR 0 37
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45551: LD_ADDR_VAR 0 38
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45663: LD_ADDR_VAR 0 39
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45775: LD_ADDR_VAR 0 40
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45887: LD_ADDR_VAR 0 41
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 2
46065: NEG
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: LD_INT 3
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 3
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 3
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 3
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 3
46130: PUSH
46131: LD_INT 3
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: LD_INT 3
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 3
46161: NEG
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 3
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 3
46184: NEG
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 3
46196: NEG
46197: PUSH
46198: LD_INT 3
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46237: LD_ADDR_VAR 0 42
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: LD_INT 3
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 3
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 3
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 2
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 3
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 3
46483: PUSH
46484: LD_INT 3
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 3
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 3
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 3
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 3
46534: NEG
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 3
46546: NEG
46547: PUSH
46548: LD_INT 3
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46587: LD_ADDR_VAR 0 43
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 3
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 3
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 3
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 3
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 3
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 3
46883: NEG
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 3
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46935: LD_ADDR_VAR 0 44
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: LD_INT 3
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 3
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 3
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 3
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: LD_INT 3
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 3
47209: NEG
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 3
47220: NEG
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 3
47232: NEG
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 3
47244: NEG
47245: PUSH
47246: LD_INT 3
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47285: LD_ADDR_VAR 0 45
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 2
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: LD_INT 3
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 3
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: LD_INT 3
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: LD_INT 3
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 3
47582: NEG
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 3
47594: NEG
47595: PUSH
47596: LD_INT 3
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47635: LD_ADDR_VAR 0 46
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 3
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 3
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 3
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 3
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 3
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 3
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 3
47931: NEG
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 3
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47983: LD_ADDR_VAR 0 47
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48134: LD_ADDR_VAR 0 48
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48281: LD_ADDR_VAR 0 49
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48425: LD_ADDR_VAR 0 50
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48569: LD_ADDR_VAR 0 51
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48716: LD_ADDR_VAR 0 52
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: LD_INT 2
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48867: LD_ADDR_VAR 0 53
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49097: LD_ADDR_VAR 0 54
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 2
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: NEG
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49327: LD_ADDR_VAR 0 55
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: LD_INT 2
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49557: LD_ADDR_VAR 0 56
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49787: LD_ADDR_VAR 0 57
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 2
49963: NEG
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: LD_INT 2
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50017: LD_ADDR_VAR 0 58
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: NEG
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: NEG
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50247: LD_ADDR_VAR 0 59
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50335: LD_ADDR_VAR 0 60
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50423: LD_ADDR_VAR 0 61
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50511: LD_ADDR_VAR 0 62
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50599: LD_ADDR_VAR 0 63
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50687: LD_ADDR_VAR 0 64
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: ST_TO_ADDR
// end ; 1 :
50775: GO 56672
50777: LD_INT 1
50779: DOUBLE
50780: EQUAL
50781: IFTRUE 50785
50783: GO 53408
50785: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50786: LD_ADDR_VAR 0 11
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 3
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: LIST
50829: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50830: LD_ADDR_VAR 0 12
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 3
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50871: LD_ADDR_VAR 0 13
50875: PUSH
50876: LD_INT 3
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 3
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: LD_INT 3
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50911: LD_ADDR_VAR 0 14
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 3
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: LIST
50951: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50952: LD_ADDR_VAR 0 15
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 3
50970: NEG
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 3
50981: NEG
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: LIST
50995: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50996: LD_ADDR_VAR 0 16
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: LD_INT 3
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: NEG
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 3
51027: NEG
51028: PUSH
51029: LD_INT 3
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: LIST
51041: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51042: LD_ADDR_VAR 0 17
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 3
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 3
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: LIST
51085: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51086: LD_ADDR_VAR 0 18
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 3
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 3
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: LIST
51126: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51127: LD_ADDR_VAR 0 19
51131: PUSH
51132: LD_INT 3
51134: PUSH
51135: LD_INT 2
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 3
51144: PUSH
51145: LD_INT 3
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: LD_INT 3
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51167: LD_ADDR_VAR 0 20
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 3
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 3
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: LIST
51207: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51208: LD_ADDR_VAR 0 21
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 3
51226: NEG
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 3
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: LIST
51251: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51252: LD_ADDR_VAR 0 22
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: LD_INT 3
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: NEG
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 3
51283: NEG
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: LIST
51297: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51298: LD_ADDR_VAR 0 23
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 3
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 4
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 3
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51342: LD_ADDR_VAR 0 24
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 3
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 4
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51383: LD_ADDR_VAR 0 25
51387: PUSH
51388: LD_INT 3
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 4
51400: PUSH
51401: LD_INT 3
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 3
51410: PUSH
51411: LD_INT 4
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51423: LD_ADDR_VAR 0 26
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 4
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 3
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51464: LD_ADDR_VAR 0 27
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 3
51482: NEG
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 4
51493: NEG
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51508: LD_ADDR_VAR 0 28
51512: PUSH
51513: LD_INT 3
51515: NEG
51516: PUSH
51517: LD_INT 3
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 3
51527: NEG
51528: PUSH
51529: LD_INT 4
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 4
51539: NEG
51540: PUSH
51541: LD_INT 3
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51554: LD_ADDR_VAR 0 29
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: LD_INT 3
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 4
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 4
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 3
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 5
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 5
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 4
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 6
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 6
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 5
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51709: LD_ADDR_VAR 0 30
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 4
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 4
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 4
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 5
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 5
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 5
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 6
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 6
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51852: LD_ADDR_VAR 0 31
51856: PUSH
51857: LD_INT 3
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 3
51869: PUSH
51870: LD_INT 3
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: LD_INT 3
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 4
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 4
51899: PUSH
51900: LD_INT 4
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: LD_INT 4
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 5
51919: PUSH
51920: LD_INT 4
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 5
51929: PUSH
51930: LD_INT 5
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 4
51939: PUSH
51940: LD_INT 5
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 6
51949: PUSH
51950: LD_INT 5
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 6
51959: PUSH
51960: LD_INT 6
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 5
51969: PUSH
51970: LD_INT 6
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51991: LD_ADDR_VAR 0 32
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: LD_INT 3
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 4
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 4
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 5
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 5
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: LD_INT 4
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 6
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 6
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 5
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52134: LD_ADDR_VAR 0 33
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 3
52152: NEG
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 4
52186: NEG
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 4
52197: NEG
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 4
52209: NEG
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 5
52220: NEG
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 5
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 5
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 6
52254: NEG
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 6
52265: NEG
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52289: LD_ADDR_VAR 0 34
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: LD_INT 3
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 3
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: NEG
52321: PUSH
52322: LD_INT 3
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: LD_INT 4
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 4
52344: NEG
52345: PUSH
52346: LD_INT 3
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 4
52356: NEG
52357: PUSH
52358: LD_INT 4
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 4
52368: NEG
52369: PUSH
52370: LD_INT 5
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 5
52380: NEG
52381: PUSH
52382: LD_INT 4
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 5
52392: NEG
52393: PUSH
52394: LD_INT 5
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 5
52404: NEG
52405: PUSH
52406: LD_INT 6
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 6
52416: NEG
52417: PUSH
52418: LD_INT 5
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 6
52428: NEG
52429: PUSH
52430: LD_INT 6
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52452: LD_ADDR_VAR 0 41
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: LD_INT 3
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 2
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: LIST
52495: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52496: LD_ADDR_VAR 0 42
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52537: LD_ADDR_VAR 0 43
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 3
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: LD_INT 3
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52577: LD_ADDR_VAR 0 44
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 3
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52618: LD_ADDR_VAR 0 45
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: LIST
52661: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52662: LD_ADDR_VAR 0 46
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: LD_INT 3
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: NEG
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52708: LD_ADDR_VAR 0 47
52712: PUSH
52713: LD_INT 2
52715: NEG
52716: PUSH
52717: LD_INT 3
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 3
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52741: LD_ADDR_VAR 0 48
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 2
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52772: LD_ADDR_VAR 0 49
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 3
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52801: LD_ADDR_VAR 0 50
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 3
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52830: LD_ADDR_VAR 0 51
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52861: LD_ADDR_VAR 0 52
52865: PUSH
52866: LD_INT 3
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52894: LD_ADDR_VAR 0 53
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 3
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 3
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52938: LD_ADDR_VAR 0 54
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 3
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 3
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52979: LD_ADDR_VAR 0 55
52983: PUSH
52984: LD_INT 3
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 3
52996: PUSH
52997: LD_INT 3
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: LD_INT 3
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53019: LD_ADDR_VAR 0 56
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 3
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 3
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53060: LD_ADDR_VAR 0 57
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 3
53078: NEG
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 3
53089: NEG
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: LIST
53103: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53104: LD_ADDR_VAR 0 58
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: LD_INT 3
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: LD_INT 2
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 3
53135: NEG
53136: PUSH
53137: LD_INT 3
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: LIST
53149: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53150: LD_ADDR_VAR 0 59
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: LIST
53193: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53194: LD_ADDR_VAR 0 60
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53235: LD_ADDR_VAR 0 61
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: LIST
53274: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53275: LD_ADDR_VAR 0 62
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53316: LD_ADDR_VAR 0 63
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53360: LD_ADDR_VAR 0 64
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: NEG
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: LIST
53405: ST_TO_ADDR
// end ; 2 :
53406: GO 56672
53408: LD_INT 2
53410: DOUBLE
53411: EQUAL
53412: IFTRUE 53416
53414: GO 56671
53416: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53417: LD_ADDR_VAR 0 29
53421: PUSH
53422: LD_INT 4
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 4
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 5
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 5
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 4
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 3
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 3
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 3
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 5
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 3
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 3
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 4
53537: PUSH
53538: LD_INT 3
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 4
53547: PUSH
53548: LD_INT 4
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: LD_INT 4
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: LD_INT 3
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: LD_INT 2
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 4
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: LD_INT 4
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 4
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 3
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 4
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 5
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 5
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 4
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 3
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: LD_INT 5
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 3
53700: NEG
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 4
53756: NEG
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 4
53767: NEG
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 4
53779: NEG
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 4
53802: NEG
53803: PUSH
53804: LD_INT 4
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 4
53814: NEG
53815: PUSH
53816: LD_INT 5
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: LD_INT 4
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 3
53838: NEG
53839: PUSH
53840: LD_INT 3
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 4
53850: NEG
53851: PUSH
53852: LD_INT 3
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 5
53862: NEG
53863: PUSH
53864: LD_INT 4
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 5
53874: NEG
53875: PUSH
53876: LD_INT 5
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 3
53886: NEG
53887: PUSH
53888: LD_INT 5
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 5
53898: NEG
53899: PUSH
53900: LD_INT 3
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53955: LD_ADDR_VAR 0 30
53959: PUSH
53960: LD_INT 4
53962: PUSH
53963: LD_INT 4
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 4
53972: PUSH
53973: LD_INT 3
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 5
53982: PUSH
53983: LD_INT 4
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 5
53992: PUSH
53993: LD_INT 5
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 4
54002: PUSH
54003: LD_INT 5
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: LD_INT 4
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: LD_INT 3
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 5
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 3
54042: PUSH
54043: LD_INT 5
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 4
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 4
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: LD_INT 4
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 4
54145: NEG
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 4
54156: NEG
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 3
54168: NEG
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 3
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 4
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 5
54201: NEG
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 5
54212: NEG
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 5
54224: NEG
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 3
54247: NEG
54248: PUSH
54249: LD_INT 3
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 3
54259: NEG
54260: PUSH
54261: LD_INT 4
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 3
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 3
54295: NEG
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 4
54307: NEG
54308: PUSH
54309: LD_INT 3
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 4
54319: NEG
54320: PUSH
54321: LD_INT 4
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: LD_INT 4
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 4
54343: NEG
54344: PUSH
54345: LD_INT 2
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 4
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 5
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 4
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 3
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 3
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 4
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 5
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: LD_INT 3
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: LD_INT 5
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54502: LD_ADDR_VAR 0 31
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: LD_INT 4
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: LD_INT 3
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: LD_INT 4
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 5
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 5
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 4
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 3
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: LD_INT 5
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 3
54613: NEG
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 3
54647: NEG
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 4
54658: NEG
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 4
54669: NEG
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 4
54681: NEG
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 4
54704: NEG
54705: PUSH
54706: LD_INT 4
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 4
54716: NEG
54717: PUSH
54718: LD_INT 5
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: NEG
54729: PUSH
54730: LD_INT 4
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: LD_INT 3
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 4
54752: NEG
54753: PUSH
54754: LD_INT 3
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 5
54764: NEG
54765: PUSH
54766: LD_INT 4
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 5
54776: NEG
54777: PUSH
54778: LD_INT 5
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 3
54788: NEG
54789: PUSH
54790: LD_INT 5
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 5
54800: NEG
54801: PUSH
54802: LD_INT 3
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 4
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 3
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 4
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 4
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 4
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 4
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 5
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 5
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 4
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 3
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 5
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55052: LD_ADDR_VAR 0 32
55056: PUSH
55057: LD_INT 4
55059: NEG
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 4
55070: NEG
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 3
55082: NEG
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 4
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 5
55115: NEG
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 5
55126: NEG
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 5
55138: NEG
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 3
55150: NEG
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 3
55161: NEG
55162: PUSH
55163: LD_INT 3
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 3
55173: NEG
55174: PUSH
55175: LD_INT 4
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: LD_INT 3
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 3
55209: NEG
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 4
55221: NEG
55222: PUSH
55223: LD_INT 3
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 4
55233: NEG
55234: PUSH
55235: LD_INT 4
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: LD_INT 4
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 4
55257: NEG
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 4
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 5
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 4
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: LD_INT 3
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 3
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: LD_INT 4
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 5
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: LD_INT 3
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: LD_INT 5
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 3
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 4
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 4
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 4
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 4
55464: PUSH
55465: LD_INT 4
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 4
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 5
55484: PUSH
55485: LD_INT 4
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 5
55494: PUSH
55495: LD_INT 5
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 4
55504: PUSH
55505: LD_INT 5
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: LD_INT 4
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 3
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 5
55534: PUSH
55535: LD_INT 3
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 3
55544: PUSH
55545: LD_INT 5
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55599: LD_ADDR_VAR 0 33
55603: PUSH
55604: LD_INT 4
55606: NEG
55607: PUSH
55608: LD_INT 4
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 4
55618: NEG
55619: PUSH
55620: LD_INT 5
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 3
55630: NEG
55631: PUSH
55632: LD_INT 4
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 3
55642: NEG
55643: PUSH
55644: LD_INT 3
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 4
55654: NEG
55655: PUSH
55656: LD_INT 3
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 5
55666: NEG
55667: PUSH
55668: LD_INT 4
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 5
55678: NEG
55679: PUSH
55680: LD_INT 5
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 3
55690: NEG
55691: PUSH
55692: LD_INT 5
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 5
55702: NEG
55703: PUSH
55704: LD_INT 3
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: LD_INT 3
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 4
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 3
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 4
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: LD_INT 4
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 4
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 4
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 5
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 5
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 4
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 3
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 3
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 3
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 5
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: LD_INT 3
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 4
55929: PUSH
55930: LD_INT 3
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 4
55939: PUSH
55940: LD_INT 4
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 3
55949: PUSH
55950: LD_INT 4
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 4
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: LD_INT 4
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 4
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 3
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 4
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: LD_INT 5
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 5
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 4
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: LD_INT 5
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 3
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56137: LD_ADDR_VAR 0 34
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 4
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 5
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: LD_INT 4
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 3
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 4
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 5
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 3
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: LD_INT 5
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 3
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 4
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 4
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 4
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 4
56339: PUSH
56340: LD_INT 4
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 4
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 5
56359: PUSH
56360: LD_INT 4
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 5
56369: PUSH
56370: LD_INT 5
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 4
56379: PUSH
56380: LD_INT 5
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: LD_INT 4
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 5
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: LD_INT 5
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 3
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: LD_INT 4
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 4
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: LD_INT 3
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: LD_INT 4
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 4
56522: NEG
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 4
56533: NEG
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 3
56545: NEG
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: NEG
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 4
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 5
56578: NEG
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 5
56589: NEG
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 5
56601: NEG
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: ST_TO_ADDR
// end ; end ;
56669: GO 56672
56671: POP
// case btype of b_depot , b_warehouse :
56672: LD_VAR 0 1
56676: PUSH
56677: LD_INT 0
56679: DOUBLE
56680: EQUAL
56681: IFTRUE 56691
56683: LD_INT 1
56685: DOUBLE
56686: EQUAL
56687: IFTRUE 56691
56689: GO 56892
56691: POP
// case nation of nation_american :
56692: LD_VAR 0 5
56696: PUSH
56697: LD_INT 1
56699: DOUBLE
56700: EQUAL
56701: IFTRUE 56705
56703: GO 56761
56705: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56706: LD_ADDR_VAR 0 9
56710: PUSH
56711: LD_VAR 0 11
56715: PUSH
56716: LD_VAR 0 12
56720: PUSH
56721: LD_VAR 0 13
56725: PUSH
56726: LD_VAR 0 14
56730: PUSH
56731: LD_VAR 0 15
56735: PUSH
56736: LD_VAR 0 16
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: PUSH
56749: LD_VAR 0 4
56753: PUSH
56754: LD_INT 1
56756: PLUS
56757: ARRAY
56758: ST_TO_ADDR
56759: GO 56890
56761: LD_INT 2
56763: DOUBLE
56764: EQUAL
56765: IFTRUE 56769
56767: GO 56825
56769: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56770: LD_ADDR_VAR 0 9
56774: PUSH
56775: LD_VAR 0 17
56779: PUSH
56780: LD_VAR 0 18
56784: PUSH
56785: LD_VAR 0 19
56789: PUSH
56790: LD_VAR 0 20
56794: PUSH
56795: LD_VAR 0 21
56799: PUSH
56800: LD_VAR 0 22
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: PUSH
56813: LD_VAR 0 4
56817: PUSH
56818: LD_INT 1
56820: PLUS
56821: ARRAY
56822: ST_TO_ADDR
56823: GO 56890
56825: LD_INT 3
56827: DOUBLE
56828: EQUAL
56829: IFTRUE 56833
56831: GO 56889
56833: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56834: LD_ADDR_VAR 0 9
56838: PUSH
56839: LD_VAR 0 23
56843: PUSH
56844: LD_VAR 0 24
56848: PUSH
56849: LD_VAR 0 25
56853: PUSH
56854: LD_VAR 0 26
56858: PUSH
56859: LD_VAR 0 27
56863: PUSH
56864: LD_VAR 0 28
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: PUSH
56877: LD_VAR 0 4
56881: PUSH
56882: LD_INT 1
56884: PLUS
56885: ARRAY
56886: ST_TO_ADDR
56887: GO 56890
56889: POP
56890: GO 57445
56892: LD_INT 2
56894: DOUBLE
56895: EQUAL
56896: IFTRUE 56906
56898: LD_INT 3
56900: DOUBLE
56901: EQUAL
56902: IFTRUE 56906
56904: GO 56962
56906: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56907: LD_ADDR_VAR 0 9
56911: PUSH
56912: LD_VAR 0 29
56916: PUSH
56917: LD_VAR 0 30
56921: PUSH
56922: LD_VAR 0 31
56926: PUSH
56927: LD_VAR 0 32
56931: PUSH
56932: LD_VAR 0 33
56936: PUSH
56937: LD_VAR 0 34
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: PUSH
56950: LD_VAR 0 4
56954: PUSH
56955: LD_INT 1
56957: PLUS
56958: ARRAY
56959: ST_TO_ADDR
56960: GO 57445
56962: LD_INT 16
56964: DOUBLE
56965: EQUAL
56966: IFTRUE 57024
56968: LD_INT 17
56970: DOUBLE
56971: EQUAL
56972: IFTRUE 57024
56974: LD_INT 18
56976: DOUBLE
56977: EQUAL
56978: IFTRUE 57024
56980: LD_INT 19
56982: DOUBLE
56983: EQUAL
56984: IFTRUE 57024
56986: LD_INT 22
56988: DOUBLE
56989: EQUAL
56990: IFTRUE 57024
56992: LD_INT 20
56994: DOUBLE
56995: EQUAL
56996: IFTRUE 57024
56998: LD_INT 21
57000: DOUBLE
57001: EQUAL
57002: IFTRUE 57024
57004: LD_INT 23
57006: DOUBLE
57007: EQUAL
57008: IFTRUE 57024
57010: LD_INT 24
57012: DOUBLE
57013: EQUAL
57014: IFTRUE 57024
57016: LD_INT 25
57018: DOUBLE
57019: EQUAL
57020: IFTRUE 57024
57022: GO 57080
57024: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57025: LD_ADDR_VAR 0 9
57029: PUSH
57030: LD_VAR 0 35
57034: PUSH
57035: LD_VAR 0 36
57039: PUSH
57040: LD_VAR 0 37
57044: PUSH
57045: LD_VAR 0 38
57049: PUSH
57050: LD_VAR 0 39
57054: PUSH
57055: LD_VAR 0 40
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: PUSH
57068: LD_VAR 0 4
57072: PUSH
57073: LD_INT 1
57075: PLUS
57076: ARRAY
57077: ST_TO_ADDR
57078: GO 57445
57080: LD_INT 6
57082: DOUBLE
57083: EQUAL
57084: IFTRUE 57136
57086: LD_INT 7
57088: DOUBLE
57089: EQUAL
57090: IFTRUE 57136
57092: LD_INT 8
57094: DOUBLE
57095: EQUAL
57096: IFTRUE 57136
57098: LD_INT 13
57100: DOUBLE
57101: EQUAL
57102: IFTRUE 57136
57104: LD_INT 12
57106: DOUBLE
57107: EQUAL
57108: IFTRUE 57136
57110: LD_INT 15
57112: DOUBLE
57113: EQUAL
57114: IFTRUE 57136
57116: LD_INT 11
57118: DOUBLE
57119: EQUAL
57120: IFTRUE 57136
57122: LD_INT 14
57124: DOUBLE
57125: EQUAL
57126: IFTRUE 57136
57128: LD_INT 10
57130: DOUBLE
57131: EQUAL
57132: IFTRUE 57136
57134: GO 57192
57136: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57137: LD_ADDR_VAR 0 9
57141: PUSH
57142: LD_VAR 0 41
57146: PUSH
57147: LD_VAR 0 42
57151: PUSH
57152: LD_VAR 0 43
57156: PUSH
57157: LD_VAR 0 44
57161: PUSH
57162: LD_VAR 0 45
57166: PUSH
57167: LD_VAR 0 46
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: PUSH
57180: LD_VAR 0 4
57184: PUSH
57185: LD_INT 1
57187: PLUS
57188: ARRAY
57189: ST_TO_ADDR
57190: GO 57445
57192: LD_INT 36
57194: DOUBLE
57195: EQUAL
57196: IFTRUE 57200
57198: GO 57256
57200: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57201: LD_ADDR_VAR 0 9
57205: PUSH
57206: LD_VAR 0 47
57210: PUSH
57211: LD_VAR 0 48
57215: PUSH
57216: LD_VAR 0 49
57220: PUSH
57221: LD_VAR 0 50
57225: PUSH
57226: LD_VAR 0 51
57230: PUSH
57231: LD_VAR 0 52
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: PUSH
57244: LD_VAR 0 4
57248: PUSH
57249: LD_INT 1
57251: PLUS
57252: ARRAY
57253: ST_TO_ADDR
57254: GO 57445
57256: LD_INT 4
57258: DOUBLE
57259: EQUAL
57260: IFTRUE 57282
57262: LD_INT 5
57264: DOUBLE
57265: EQUAL
57266: IFTRUE 57282
57268: LD_INT 34
57270: DOUBLE
57271: EQUAL
57272: IFTRUE 57282
57274: LD_INT 37
57276: DOUBLE
57277: EQUAL
57278: IFTRUE 57282
57280: GO 57338
57282: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57283: LD_ADDR_VAR 0 9
57287: PUSH
57288: LD_VAR 0 53
57292: PUSH
57293: LD_VAR 0 54
57297: PUSH
57298: LD_VAR 0 55
57302: PUSH
57303: LD_VAR 0 56
57307: PUSH
57308: LD_VAR 0 57
57312: PUSH
57313: LD_VAR 0 58
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: PUSH
57326: LD_VAR 0 4
57330: PUSH
57331: LD_INT 1
57333: PLUS
57334: ARRAY
57335: ST_TO_ADDR
57336: GO 57445
57338: LD_INT 31
57340: DOUBLE
57341: EQUAL
57342: IFTRUE 57388
57344: LD_INT 32
57346: DOUBLE
57347: EQUAL
57348: IFTRUE 57388
57350: LD_INT 33
57352: DOUBLE
57353: EQUAL
57354: IFTRUE 57388
57356: LD_INT 27
57358: DOUBLE
57359: EQUAL
57360: IFTRUE 57388
57362: LD_INT 26
57364: DOUBLE
57365: EQUAL
57366: IFTRUE 57388
57368: LD_INT 28
57370: DOUBLE
57371: EQUAL
57372: IFTRUE 57388
57374: LD_INT 29
57376: DOUBLE
57377: EQUAL
57378: IFTRUE 57388
57380: LD_INT 30
57382: DOUBLE
57383: EQUAL
57384: IFTRUE 57388
57386: GO 57444
57388: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57389: LD_ADDR_VAR 0 9
57393: PUSH
57394: LD_VAR 0 59
57398: PUSH
57399: LD_VAR 0 60
57403: PUSH
57404: LD_VAR 0 61
57408: PUSH
57409: LD_VAR 0 62
57413: PUSH
57414: LD_VAR 0 63
57418: PUSH
57419: LD_VAR 0 64
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: PUSH
57432: LD_VAR 0 4
57436: PUSH
57437: LD_INT 1
57439: PLUS
57440: ARRAY
57441: ST_TO_ADDR
57442: GO 57445
57444: POP
// temp_list2 = [ ] ;
57445: LD_ADDR_VAR 0 10
57449: PUSH
57450: EMPTY
57451: ST_TO_ADDR
// for i in temp_list do
57452: LD_ADDR_VAR 0 8
57456: PUSH
57457: LD_VAR 0 9
57461: PUSH
57462: FOR_IN
57463: IFFALSE 57515
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57465: LD_ADDR_VAR 0 10
57469: PUSH
57470: LD_VAR 0 10
57474: PUSH
57475: LD_VAR 0 8
57479: PUSH
57480: LD_INT 1
57482: ARRAY
57483: PUSH
57484: LD_VAR 0 2
57488: PLUS
57489: PUSH
57490: LD_VAR 0 8
57494: PUSH
57495: LD_INT 2
57497: ARRAY
57498: PUSH
57499: LD_VAR 0 3
57503: PLUS
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: EMPTY
57510: LIST
57511: ADD
57512: ST_TO_ADDR
57513: GO 57462
57515: POP
57516: POP
// result = temp_list2 ;
57517: LD_ADDR_VAR 0 7
57521: PUSH
57522: LD_VAR 0 10
57526: ST_TO_ADDR
// end ;
57527: LD_VAR 0 7
57531: RET
// export function EnemyInRange ( unit , dist ) ; begin
57532: LD_INT 0
57534: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57535: LD_ADDR_VAR 0 3
57539: PUSH
57540: LD_VAR 0 1
57544: PPUSH
57545: CALL_OW 255
57549: PPUSH
57550: LD_VAR 0 1
57554: PPUSH
57555: CALL_OW 250
57559: PPUSH
57560: LD_VAR 0 1
57564: PPUSH
57565: CALL_OW 251
57569: PPUSH
57570: LD_VAR 0 2
57574: PPUSH
57575: CALL 30928 0 4
57579: PUSH
57580: LD_INT 4
57582: ARRAY
57583: ST_TO_ADDR
// end ;
57584: LD_VAR 0 3
57588: RET
// export function PlayerSeeMe ( unit ) ; begin
57589: LD_INT 0
57591: PPUSH
// result := See ( your_side , unit ) ;
57592: LD_ADDR_VAR 0 2
57596: PUSH
57597: LD_OWVAR 2
57601: PPUSH
57602: LD_VAR 0 1
57606: PPUSH
57607: CALL_OW 292
57611: ST_TO_ADDR
// end ;
57612: LD_VAR 0 2
57616: RET
// export function ReverseDir ( unit ) ; begin
57617: LD_INT 0
57619: PPUSH
// if not unit then
57620: LD_VAR 0 1
57624: NOT
57625: IFFALSE 57629
// exit ;
57627: GO 57652
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57629: LD_ADDR_VAR 0 2
57633: PUSH
57634: LD_VAR 0 1
57638: PPUSH
57639: CALL_OW 254
57643: PUSH
57644: LD_INT 3
57646: PLUS
57647: PUSH
57648: LD_INT 6
57650: MOD
57651: ST_TO_ADDR
// end ;
57652: LD_VAR 0 2
57656: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57657: LD_INT 0
57659: PPUSH
57660: PPUSH
57661: PPUSH
57662: PPUSH
57663: PPUSH
// if not hexes then
57664: LD_VAR 0 2
57668: NOT
57669: IFFALSE 57673
// exit ;
57671: GO 57821
// dist := 9999 ;
57673: LD_ADDR_VAR 0 5
57677: PUSH
57678: LD_INT 9999
57680: ST_TO_ADDR
// for i = 1 to hexes do
57681: LD_ADDR_VAR 0 4
57685: PUSH
57686: DOUBLE
57687: LD_INT 1
57689: DEC
57690: ST_TO_ADDR
57691: LD_VAR 0 2
57695: PUSH
57696: FOR_TO
57697: IFFALSE 57809
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57699: LD_VAR 0 1
57703: PPUSH
57704: LD_VAR 0 2
57708: PUSH
57709: LD_VAR 0 4
57713: ARRAY
57714: PUSH
57715: LD_INT 1
57717: ARRAY
57718: PPUSH
57719: LD_VAR 0 2
57723: PUSH
57724: LD_VAR 0 4
57728: ARRAY
57729: PUSH
57730: LD_INT 2
57732: ARRAY
57733: PPUSH
57734: CALL_OW 297
57738: PUSH
57739: LD_VAR 0 5
57743: LESS
57744: IFFALSE 57807
// begin hex := hexes [ i ] ;
57746: LD_ADDR_VAR 0 7
57750: PUSH
57751: LD_VAR 0 2
57755: PUSH
57756: LD_VAR 0 4
57760: ARRAY
57761: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57762: LD_ADDR_VAR 0 5
57766: PUSH
57767: LD_VAR 0 1
57771: PPUSH
57772: LD_VAR 0 2
57776: PUSH
57777: LD_VAR 0 4
57781: ARRAY
57782: PUSH
57783: LD_INT 1
57785: ARRAY
57786: PPUSH
57787: LD_VAR 0 2
57791: PUSH
57792: LD_VAR 0 4
57796: ARRAY
57797: PUSH
57798: LD_INT 2
57800: ARRAY
57801: PPUSH
57802: CALL_OW 297
57806: ST_TO_ADDR
// end ; end ;
57807: GO 57696
57809: POP
57810: POP
// result := hex ;
57811: LD_ADDR_VAR 0 3
57815: PUSH
57816: LD_VAR 0 7
57820: ST_TO_ADDR
// end ;
57821: LD_VAR 0 3
57825: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57826: LD_INT 0
57828: PPUSH
57829: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57830: LD_VAR 0 1
57834: NOT
57835: PUSH
57836: LD_VAR 0 1
57840: PUSH
57841: LD_INT 21
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 23
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PPUSH
57865: CALL_OW 69
57869: IN
57870: NOT
57871: OR
57872: IFFALSE 57876
// exit ;
57874: GO 57923
// for i = 1 to 3 do
57876: LD_ADDR_VAR 0 3
57880: PUSH
57881: DOUBLE
57882: LD_INT 1
57884: DEC
57885: ST_TO_ADDR
57886: LD_INT 3
57888: PUSH
57889: FOR_TO
57890: IFFALSE 57921
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57892: LD_VAR 0 1
57896: PPUSH
57897: CALL_OW 250
57901: PPUSH
57902: LD_VAR 0 1
57906: PPUSH
57907: CALL_OW 251
57911: PPUSH
57912: LD_INT 1
57914: PPUSH
57915: CALL_OW 453
57919: GO 57889
57921: POP
57922: POP
// end ;
57923: LD_VAR 0 2
57927: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57928: LD_INT 0
57930: PPUSH
57931: PPUSH
57932: PPUSH
57933: PPUSH
57934: PPUSH
57935: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57936: LD_VAR 0 1
57940: NOT
57941: PUSH
57942: LD_VAR 0 2
57946: NOT
57947: OR
57948: PUSH
57949: LD_VAR 0 1
57953: PPUSH
57954: CALL_OW 314
57958: OR
57959: IFFALSE 57963
// exit ;
57961: GO 58404
// x := GetX ( enemy_unit ) ;
57963: LD_ADDR_VAR 0 7
57967: PUSH
57968: LD_VAR 0 2
57972: PPUSH
57973: CALL_OW 250
57977: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57978: LD_ADDR_VAR 0 8
57982: PUSH
57983: LD_VAR 0 2
57987: PPUSH
57988: CALL_OW 251
57992: ST_TO_ADDR
// if not x or not y then
57993: LD_VAR 0 7
57997: NOT
57998: PUSH
57999: LD_VAR 0 8
58003: NOT
58004: OR
58005: IFFALSE 58009
// exit ;
58007: GO 58404
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58009: LD_ADDR_VAR 0 6
58013: PUSH
58014: LD_VAR 0 7
58018: PPUSH
58019: LD_INT 0
58021: PPUSH
58022: LD_INT 4
58024: PPUSH
58025: CALL_OW 272
58029: PUSH
58030: LD_VAR 0 8
58034: PPUSH
58035: LD_INT 0
58037: PPUSH
58038: LD_INT 4
58040: PPUSH
58041: CALL_OW 273
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_VAR 0 7
58054: PPUSH
58055: LD_INT 1
58057: PPUSH
58058: LD_INT 4
58060: PPUSH
58061: CALL_OW 272
58065: PUSH
58066: LD_VAR 0 8
58070: PPUSH
58071: LD_INT 1
58073: PPUSH
58074: LD_INT 4
58076: PPUSH
58077: CALL_OW 273
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_VAR 0 7
58090: PPUSH
58091: LD_INT 2
58093: PPUSH
58094: LD_INT 4
58096: PPUSH
58097: CALL_OW 272
58101: PUSH
58102: LD_VAR 0 8
58106: PPUSH
58107: LD_INT 2
58109: PPUSH
58110: LD_INT 4
58112: PPUSH
58113: CALL_OW 273
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_VAR 0 7
58126: PPUSH
58127: LD_INT 3
58129: PPUSH
58130: LD_INT 4
58132: PPUSH
58133: CALL_OW 272
58137: PUSH
58138: LD_VAR 0 8
58142: PPUSH
58143: LD_INT 3
58145: PPUSH
58146: LD_INT 4
58148: PPUSH
58149: CALL_OW 273
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_VAR 0 7
58162: PPUSH
58163: LD_INT 4
58165: PPUSH
58166: LD_INT 4
58168: PPUSH
58169: CALL_OW 272
58173: PUSH
58174: LD_VAR 0 8
58178: PPUSH
58179: LD_INT 4
58181: PPUSH
58182: LD_INT 4
58184: PPUSH
58185: CALL_OW 273
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_VAR 0 7
58198: PPUSH
58199: LD_INT 5
58201: PPUSH
58202: LD_INT 4
58204: PPUSH
58205: CALL_OW 272
58209: PUSH
58210: LD_VAR 0 8
58214: PPUSH
58215: LD_INT 5
58217: PPUSH
58218: LD_INT 4
58220: PPUSH
58221: CALL_OW 273
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: ST_TO_ADDR
// for i = tmp downto 1 do
58238: LD_ADDR_VAR 0 4
58242: PUSH
58243: DOUBLE
58244: LD_VAR 0 6
58248: INC
58249: ST_TO_ADDR
58250: LD_INT 1
58252: PUSH
58253: FOR_DOWNTO
58254: IFFALSE 58355
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58256: LD_VAR 0 6
58260: PUSH
58261: LD_VAR 0 4
58265: ARRAY
58266: PUSH
58267: LD_INT 1
58269: ARRAY
58270: PPUSH
58271: LD_VAR 0 6
58275: PUSH
58276: LD_VAR 0 4
58280: ARRAY
58281: PUSH
58282: LD_INT 2
58284: ARRAY
58285: PPUSH
58286: CALL_OW 488
58290: NOT
58291: PUSH
58292: LD_VAR 0 6
58296: PUSH
58297: LD_VAR 0 4
58301: ARRAY
58302: PUSH
58303: LD_INT 1
58305: ARRAY
58306: PPUSH
58307: LD_VAR 0 6
58311: PUSH
58312: LD_VAR 0 4
58316: ARRAY
58317: PUSH
58318: LD_INT 2
58320: ARRAY
58321: PPUSH
58322: CALL_OW 428
58326: PUSH
58327: LD_INT 0
58329: NONEQUAL
58330: OR
58331: IFFALSE 58353
// tmp := Delete ( tmp , i ) ;
58333: LD_ADDR_VAR 0 6
58337: PUSH
58338: LD_VAR 0 6
58342: PPUSH
58343: LD_VAR 0 4
58347: PPUSH
58348: CALL_OW 3
58352: ST_TO_ADDR
58353: GO 58253
58355: POP
58356: POP
// j := GetClosestHex ( unit , tmp ) ;
58357: LD_ADDR_VAR 0 5
58361: PUSH
58362: LD_VAR 0 1
58366: PPUSH
58367: LD_VAR 0 6
58371: PPUSH
58372: CALL 57657 0 2
58376: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58377: LD_VAR 0 1
58381: PPUSH
58382: LD_VAR 0 5
58386: PUSH
58387: LD_INT 1
58389: ARRAY
58390: PPUSH
58391: LD_VAR 0 5
58395: PUSH
58396: LD_INT 2
58398: ARRAY
58399: PPUSH
58400: CALL_OW 111
// end ;
58404: LD_VAR 0 3
58408: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58409: LD_INT 0
58411: PPUSH
58412: PPUSH
58413: PPUSH
// uc_side = 0 ;
58414: LD_ADDR_OWVAR 20
58418: PUSH
58419: LD_INT 0
58421: ST_TO_ADDR
// uc_nation = 0 ;
58422: LD_ADDR_OWVAR 21
58426: PUSH
58427: LD_INT 0
58429: ST_TO_ADDR
// InitHc_All ( ) ;
58430: CALL_OW 584
// InitVc ;
58434: CALL_OW 20
// if mastodonts then
58438: LD_VAR 0 6
58442: IFFALSE 58509
// for i = 1 to mastodonts do
58444: LD_ADDR_VAR 0 11
58448: PUSH
58449: DOUBLE
58450: LD_INT 1
58452: DEC
58453: ST_TO_ADDR
58454: LD_VAR 0 6
58458: PUSH
58459: FOR_TO
58460: IFFALSE 58507
// begin vc_chassis := 31 ;
58462: LD_ADDR_OWVAR 37
58466: PUSH
58467: LD_INT 31
58469: ST_TO_ADDR
// vc_control := control_rider ;
58470: LD_ADDR_OWVAR 38
58474: PUSH
58475: LD_INT 4
58477: ST_TO_ADDR
// animal := CreateVehicle ;
58478: LD_ADDR_VAR 0 12
58482: PUSH
58483: CALL_OW 45
58487: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58488: LD_VAR 0 12
58492: PPUSH
58493: LD_VAR 0 8
58497: PPUSH
58498: LD_INT 0
58500: PPUSH
58501: CALL 60644 0 3
// end ;
58505: GO 58459
58507: POP
58508: POP
// if horses then
58509: LD_VAR 0 5
58513: IFFALSE 58580
// for i = 1 to horses do
58515: LD_ADDR_VAR 0 11
58519: PUSH
58520: DOUBLE
58521: LD_INT 1
58523: DEC
58524: ST_TO_ADDR
58525: LD_VAR 0 5
58529: PUSH
58530: FOR_TO
58531: IFFALSE 58578
// begin hc_class := 21 ;
58533: LD_ADDR_OWVAR 28
58537: PUSH
58538: LD_INT 21
58540: ST_TO_ADDR
// hc_gallery :=  ;
58541: LD_ADDR_OWVAR 33
58545: PUSH
58546: LD_STRING 
58548: ST_TO_ADDR
// animal := CreateHuman ;
58549: LD_ADDR_VAR 0 12
58553: PUSH
58554: CALL_OW 44
58558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58559: LD_VAR 0 12
58563: PPUSH
58564: LD_VAR 0 8
58568: PPUSH
58569: LD_INT 0
58571: PPUSH
58572: CALL 60644 0 3
// end ;
58576: GO 58530
58578: POP
58579: POP
// if birds then
58580: LD_VAR 0 1
58584: IFFALSE 58651
// for i = 1 to birds do
58586: LD_ADDR_VAR 0 11
58590: PUSH
58591: DOUBLE
58592: LD_INT 1
58594: DEC
58595: ST_TO_ADDR
58596: LD_VAR 0 1
58600: PUSH
58601: FOR_TO
58602: IFFALSE 58649
// begin hc_class = 18 ;
58604: LD_ADDR_OWVAR 28
58608: PUSH
58609: LD_INT 18
58611: ST_TO_ADDR
// hc_gallery =  ;
58612: LD_ADDR_OWVAR 33
58616: PUSH
58617: LD_STRING 
58619: ST_TO_ADDR
// animal := CreateHuman ;
58620: LD_ADDR_VAR 0 12
58624: PUSH
58625: CALL_OW 44
58629: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58630: LD_VAR 0 12
58634: PPUSH
58635: LD_VAR 0 8
58639: PPUSH
58640: LD_INT 0
58642: PPUSH
58643: CALL 60644 0 3
// end ;
58647: GO 58601
58649: POP
58650: POP
// if tigers then
58651: LD_VAR 0 2
58655: IFFALSE 58739
// for i = 1 to tigers do
58657: LD_ADDR_VAR 0 11
58661: PUSH
58662: DOUBLE
58663: LD_INT 1
58665: DEC
58666: ST_TO_ADDR
58667: LD_VAR 0 2
58671: PUSH
58672: FOR_TO
58673: IFFALSE 58737
// begin hc_class = class_tiger ;
58675: LD_ADDR_OWVAR 28
58679: PUSH
58680: LD_INT 14
58682: ST_TO_ADDR
// hc_gallery =  ;
58683: LD_ADDR_OWVAR 33
58687: PUSH
58688: LD_STRING 
58690: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58691: LD_ADDR_OWVAR 35
58695: PUSH
58696: LD_INT 7
58698: NEG
58699: PPUSH
58700: LD_INT 7
58702: PPUSH
58703: CALL_OW 12
58707: ST_TO_ADDR
// animal := CreateHuman ;
58708: LD_ADDR_VAR 0 12
58712: PUSH
58713: CALL_OW 44
58717: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58718: LD_VAR 0 12
58722: PPUSH
58723: LD_VAR 0 8
58727: PPUSH
58728: LD_INT 0
58730: PPUSH
58731: CALL 60644 0 3
// end ;
58735: GO 58672
58737: POP
58738: POP
// if apemans then
58739: LD_VAR 0 3
58743: IFFALSE 58866
// for i = 1 to apemans do
58745: LD_ADDR_VAR 0 11
58749: PUSH
58750: DOUBLE
58751: LD_INT 1
58753: DEC
58754: ST_TO_ADDR
58755: LD_VAR 0 3
58759: PUSH
58760: FOR_TO
58761: IFFALSE 58864
// begin hc_class = class_apeman ;
58763: LD_ADDR_OWVAR 28
58767: PUSH
58768: LD_INT 12
58770: ST_TO_ADDR
// hc_gallery =  ;
58771: LD_ADDR_OWVAR 33
58775: PUSH
58776: LD_STRING 
58778: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58779: LD_ADDR_OWVAR 35
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PPUSH
58788: LD_INT 2
58790: PPUSH
58791: CALL_OW 12
58795: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58796: LD_ADDR_OWVAR 31
58800: PUSH
58801: LD_INT 1
58803: PPUSH
58804: LD_INT 3
58806: PPUSH
58807: CALL_OW 12
58811: PUSH
58812: LD_INT 1
58814: PPUSH
58815: LD_INT 3
58817: PPUSH
58818: CALL_OW 12
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: ST_TO_ADDR
// animal := CreateHuman ;
58835: LD_ADDR_VAR 0 12
58839: PUSH
58840: CALL_OW 44
58844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58845: LD_VAR 0 12
58849: PPUSH
58850: LD_VAR 0 8
58854: PPUSH
58855: LD_INT 0
58857: PPUSH
58858: CALL 60644 0 3
// end ;
58862: GO 58760
58864: POP
58865: POP
// if enchidnas then
58866: LD_VAR 0 4
58870: IFFALSE 58937
// for i = 1 to enchidnas do
58872: LD_ADDR_VAR 0 11
58876: PUSH
58877: DOUBLE
58878: LD_INT 1
58880: DEC
58881: ST_TO_ADDR
58882: LD_VAR 0 4
58886: PUSH
58887: FOR_TO
58888: IFFALSE 58935
// begin hc_class = 13 ;
58890: LD_ADDR_OWVAR 28
58894: PUSH
58895: LD_INT 13
58897: ST_TO_ADDR
// hc_gallery =  ;
58898: LD_ADDR_OWVAR 33
58902: PUSH
58903: LD_STRING 
58905: ST_TO_ADDR
// animal := CreateHuman ;
58906: LD_ADDR_VAR 0 12
58910: PUSH
58911: CALL_OW 44
58915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58916: LD_VAR 0 12
58920: PPUSH
58921: LD_VAR 0 8
58925: PPUSH
58926: LD_INT 0
58928: PPUSH
58929: CALL 60644 0 3
// end ;
58933: GO 58887
58935: POP
58936: POP
// if fishes then
58937: LD_VAR 0 7
58941: IFFALSE 59008
// for i = 1 to fishes do
58943: LD_ADDR_VAR 0 11
58947: PUSH
58948: DOUBLE
58949: LD_INT 1
58951: DEC
58952: ST_TO_ADDR
58953: LD_VAR 0 7
58957: PUSH
58958: FOR_TO
58959: IFFALSE 59006
// begin hc_class = 20 ;
58961: LD_ADDR_OWVAR 28
58965: PUSH
58966: LD_INT 20
58968: ST_TO_ADDR
// hc_gallery =  ;
58969: LD_ADDR_OWVAR 33
58973: PUSH
58974: LD_STRING 
58976: ST_TO_ADDR
// animal := CreateHuman ;
58977: LD_ADDR_VAR 0 12
58981: PUSH
58982: CALL_OW 44
58986: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58987: LD_VAR 0 12
58991: PPUSH
58992: LD_VAR 0 9
58996: PPUSH
58997: LD_INT 0
58999: PPUSH
59000: CALL 60644 0 3
// end ;
59004: GO 58958
59006: POP
59007: POP
// end ;
59008: LD_VAR 0 10
59012: RET
// export function WantHeal ( sci , unit ) ; begin
59013: LD_INT 0
59015: PPUSH
// if GetTaskList ( sci ) > 0 then
59016: LD_VAR 0 1
59020: PPUSH
59021: CALL_OW 437
59025: PUSH
59026: LD_INT 0
59028: GREATER
59029: IFFALSE 59099
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59031: LD_VAR 0 1
59035: PPUSH
59036: CALL_OW 437
59040: PUSH
59041: LD_INT 1
59043: ARRAY
59044: PUSH
59045: LD_INT 1
59047: ARRAY
59048: PUSH
59049: LD_STRING l
59051: EQUAL
59052: PUSH
59053: LD_VAR 0 1
59057: PPUSH
59058: CALL_OW 437
59062: PUSH
59063: LD_INT 1
59065: ARRAY
59066: PUSH
59067: LD_INT 4
59069: ARRAY
59070: PUSH
59071: LD_VAR 0 2
59075: EQUAL
59076: AND
59077: IFFALSE 59089
// result := true else
59079: LD_ADDR_VAR 0 3
59083: PUSH
59084: LD_INT 1
59086: ST_TO_ADDR
59087: GO 59097
// result := false ;
59089: LD_ADDR_VAR 0 3
59093: PUSH
59094: LD_INT 0
59096: ST_TO_ADDR
// end else
59097: GO 59107
// result := false ;
59099: LD_ADDR_VAR 0 3
59103: PUSH
59104: LD_INT 0
59106: ST_TO_ADDR
// end ;
59107: LD_VAR 0 3
59111: RET
// export function HealTarget ( sci ) ; begin
59112: LD_INT 0
59114: PPUSH
// if not sci then
59115: LD_VAR 0 1
59119: NOT
59120: IFFALSE 59124
// exit ;
59122: GO 59189
// result := 0 ;
59124: LD_ADDR_VAR 0 2
59128: PUSH
59129: LD_INT 0
59131: ST_TO_ADDR
// if GetTaskList ( sci ) then
59132: LD_VAR 0 1
59136: PPUSH
59137: CALL_OW 437
59141: IFFALSE 59189
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59143: LD_VAR 0 1
59147: PPUSH
59148: CALL_OW 437
59152: PUSH
59153: LD_INT 1
59155: ARRAY
59156: PUSH
59157: LD_INT 1
59159: ARRAY
59160: PUSH
59161: LD_STRING l
59163: EQUAL
59164: IFFALSE 59189
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59166: LD_ADDR_VAR 0 2
59170: PUSH
59171: LD_VAR 0 1
59175: PPUSH
59176: CALL_OW 437
59180: PUSH
59181: LD_INT 1
59183: ARRAY
59184: PUSH
59185: LD_INT 4
59187: ARRAY
59188: ST_TO_ADDR
// end ;
59189: LD_VAR 0 2
59193: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59194: LD_INT 0
59196: PPUSH
59197: PPUSH
59198: PPUSH
59199: PPUSH
// if not base_units then
59200: LD_VAR 0 1
59204: NOT
59205: IFFALSE 59209
// exit ;
59207: GO 59296
// result := false ;
59209: LD_ADDR_VAR 0 2
59213: PUSH
59214: LD_INT 0
59216: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59217: LD_ADDR_VAR 0 5
59221: PUSH
59222: LD_VAR 0 1
59226: PPUSH
59227: LD_INT 21
59229: PUSH
59230: LD_INT 3
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PPUSH
59237: CALL_OW 72
59241: ST_TO_ADDR
// if not tmp then
59242: LD_VAR 0 5
59246: NOT
59247: IFFALSE 59251
// exit ;
59249: GO 59296
// for i in tmp do
59251: LD_ADDR_VAR 0 3
59255: PUSH
59256: LD_VAR 0 5
59260: PUSH
59261: FOR_IN
59262: IFFALSE 59294
// begin result := EnemyInRange ( i , 22 ) ;
59264: LD_ADDR_VAR 0 2
59268: PUSH
59269: LD_VAR 0 3
59273: PPUSH
59274: LD_INT 22
59276: PPUSH
59277: CALL 57532 0 2
59281: ST_TO_ADDR
// if result then
59282: LD_VAR 0 2
59286: IFFALSE 59292
// exit ;
59288: POP
59289: POP
59290: GO 59296
// end ;
59292: GO 59261
59294: POP
59295: POP
// end ;
59296: LD_VAR 0 2
59300: RET
// export function FilterByTag ( units , tag ) ; begin
59301: LD_INT 0
59303: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59304: LD_ADDR_VAR 0 3
59308: PUSH
59309: LD_VAR 0 1
59313: PPUSH
59314: LD_INT 120
59316: PUSH
59317: LD_VAR 0 2
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PPUSH
59326: CALL_OW 72
59330: ST_TO_ADDR
// end ;
59331: LD_VAR 0 3
59335: RET
// export function IsDriver ( un ) ; begin
59336: LD_INT 0
59338: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59339: LD_ADDR_VAR 0 2
59343: PUSH
59344: LD_VAR 0 1
59348: PUSH
59349: LD_INT 55
59351: PUSH
59352: EMPTY
59353: LIST
59354: PPUSH
59355: CALL_OW 69
59359: IN
59360: ST_TO_ADDR
// end ;
59361: LD_VAR 0 2
59365: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59366: LD_INT 0
59368: PPUSH
59369: PPUSH
// list := [ ] ;
59370: LD_ADDR_VAR 0 5
59374: PUSH
59375: EMPTY
59376: ST_TO_ADDR
// case d of 0 :
59377: LD_VAR 0 3
59381: PUSH
59382: LD_INT 0
59384: DOUBLE
59385: EQUAL
59386: IFTRUE 59390
59388: GO 59523
59390: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59391: LD_ADDR_VAR 0 5
59395: PUSH
59396: LD_VAR 0 1
59400: PUSH
59401: LD_INT 4
59403: MINUS
59404: PUSH
59405: LD_VAR 0 2
59409: PUSH
59410: LD_INT 4
59412: MINUS
59413: PUSH
59414: LD_INT 2
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: PUSH
59422: LD_VAR 0 1
59426: PUSH
59427: LD_INT 3
59429: MINUS
59430: PUSH
59431: LD_VAR 0 2
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: LIST
59443: PUSH
59444: LD_VAR 0 1
59448: PUSH
59449: LD_INT 4
59451: PLUS
59452: PUSH
59453: LD_VAR 0 2
59457: PUSH
59458: LD_INT 4
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: PUSH
59466: LD_VAR 0 1
59470: PUSH
59471: LD_INT 3
59473: PLUS
59474: PUSH
59475: LD_VAR 0 2
59479: PUSH
59480: LD_INT 3
59482: PLUS
59483: PUSH
59484: LD_INT 5
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: LIST
59491: PUSH
59492: LD_VAR 0 1
59496: PUSH
59497: LD_VAR 0 2
59501: PUSH
59502: LD_INT 4
59504: PLUS
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: LIST
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: ST_TO_ADDR
// end ; 1 :
59521: GO 60221
59523: LD_INT 1
59525: DOUBLE
59526: EQUAL
59527: IFTRUE 59531
59529: GO 59664
59531: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59532: LD_ADDR_VAR 0 5
59536: PUSH
59537: LD_VAR 0 1
59541: PUSH
59542: LD_VAR 0 2
59546: PUSH
59547: LD_INT 4
59549: MINUS
59550: PUSH
59551: LD_INT 3
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: LIST
59558: PUSH
59559: LD_VAR 0 1
59563: PUSH
59564: LD_INT 3
59566: MINUS
59567: PUSH
59568: LD_VAR 0 2
59572: PUSH
59573: LD_INT 3
59575: MINUS
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: LIST
59584: PUSH
59585: LD_VAR 0 1
59589: PUSH
59590: LD_INT 4
59592: MINUS
59593: PUSH
59594: LD_VAR 0 2
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: LIST
59606: PUSH
59607: LD_VAR 0 1
59611: PUSH
59612: LD_VAR 0 2
59616: PUSH
59617: LD_INT 3
59619: PLUS
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: LIST
59628: PUSH
59629: LD_VAR 0 1
59633: PUSH
59634: LD_INT 4
59636: PLUS
59637: PUSH
59638: LD_VAR 0 2
59642: PUSH
59643: LD_INT 4
59645: PLUS
59646: PUSH
59647: LD_INT 5
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: LIST
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: ST_TO_ADDR
// end ; 2 :
59662: GO 60221
59664: LD_INT 2
59666: DOUBLE
59667: EQUAL
59668: IFTRUE 59672
59670: GO 59801
59672: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59673: LD_ADDR_VAR 0 5
59677: PUSH
59678: LD_VAR 0 1
59682: PUSH
59683: LD_VAR 0 2
59687: PUSH
59688: LD_INT 3
59690: MINUS
59691: PUSH
59692: LD_INT 3
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: LIST
59699: PUSH
59700: LD_VAR 0 1
59704: PUSH
59705: LD_INT 4
59707: PLUS
59708: PUSH
59709: LD_VAR 0 2
59713: PUSH
59714: LD_INT 4
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: LIST
59721: PUSH
59722: LD_VAR 0 1
59726: PUSH
59727: LD_VAR 0 2
59731: PUSH
59732: LD_INT 4
59734: PLUS
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: PUSH
59744: LD_VAR 0 1
59748: PUSH
59749: LD_INT 3
59751: MINUS
59752: PUSH
59753: LD_VAR 0 2
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: LIST
59765: PUSH
59766: LD_VAR 0 1
59770: PUSH
59771: LD_INT 4
59773: MINUS
59774: PUSH
59775: LD_VAR 0 2
59779: PUSH
59780: LD_INT 4
59782: MINUS
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: LIST
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: ST_TO_ADDR
// end ; 3 :
59799: GO 60221
59801: LD_INT 3
59803: DOUBLE
59804: EQUAL
59805: IFTRUE 59809
59807: GO 59942
59809: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59810: LD_ADDR_VAR 0 5
59814: PUSH
59815: LD_VAR 0 1
59819: PUSH
59820: LD_INT 3
59822: PLUS
59823: PUSH
59824: LD_VAR 0 2
59828: PUSH
59829: LD_INT 4
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: LIST
59836: PUSH
59837: LD_VAR 0 1
59841: PUSH
59842: LD_INT 4
59844: PLUS
59845: PUSH
59846: LD_VAR 0 2
59850: PUSH
59851: LD_INT 4
59853: PLUS
59854: PUSH
59855: LD_INT 5
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: LIST
59862: PUSH
59863: LD_VAR 0 1
59867: PUSH
59868: LD_INT 4
59870: MINUS
59871: PUSH
59872: LD_VAR 0 2
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: LIST
59884: PUSH
59885: LD_VAR 0 1
59889: PUSH
59890: LD_VAR 0 2
59894: PUSH
59895: LD_INT 4
59897: MINUS
59898: PUSH
59899: LD_INT 3
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: PUSH
59907: LD_VAR 0 1
59911: PUSH
59912: LD_INT 3
59914: MINUS
59915: PUSH
59916: LD_VAR 0 2
59920: PUSH
59921: LD_INT 3
59923: MINUS
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: LIST
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: ST_TO_ADDR
// end ; 4 :
59940: GO 60221
59942: LD_INT 4
59944: DOUBLE
59945: EQUAL
59946: IFTRUE 59950
59948: GO 60083
59950: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59951: LD_ADDR_VAR 0 5
59955: PUSH
59956: LD_VAR 0 1
59960: PUSH
59961: LD_VAR 0 2
59965: PUSH
59966: LD_INT 4
59968: PLUS
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: LIST
59977: PUSH
59978: LD_VAR 0 1
59982: PUSH
59983: LD_INT 3
59985: PLUS
59986: PUSH
59987: LD_VAR 0 2
59991: PUSH
59992: LD_INT 3
59994: PLUS
59995: PUSH
59996: LD_INT 5
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: LIST
60003: PUSH
60004: LD_VAR 0 1
60008: PUSH
60009: LD_INT 4
60011: PLUS
60012: PUSH
60013: LD_VAR 0 2
60017: PUSH
60018: LD_INT 4
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: LIST
60025: PUSH
60026: LD_VAR 0 1
60030: PUSH
60031: LD_VAR 0 2
60035: PUSH
60036: LD_INT 3
60038: MINUS
60039: PUSH
60040: LD_INT 3
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: PUSH
60048: LD_VAR 0 1
60052: PUSH
60053: LD_INT 4
60055: MINUS
60056: PUSH
60057: LD_VAR 0 2
60061: PUSH
60062: LD_INT 4
60064: MINUS
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: LIST
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: ST_TO_ADDR
// end ; 5 :
60081: GO 60221
60083: LD_INT 5
60085: DOUBLE
60086: EQUAL
60087: IFTRUE 60091
60089: GO 60220
60091: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60092: LD_ADDR_VAR 0 5
60096: PUSH
60097: LD_VAR 0 1
60101: PUSH
60102: LD_INT 4
60104: MINUS
60105: PUSH
60106: LD_VAR 0 2
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: LIST
60118: PUSH
60119: LD_VAR 0 1
60123: PUSH
60124: LD_VAR 0 2
60128: PUSH
60129: LD_INT 4
60131: MINUS
60132: PUSH
60133: LD_INT 3
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: LIST
60140: PUSH
60141: LD_VAR 0 1
60145: PUSH
60146: LD_INT 4
60148: PLUS
60149: PUSH
60150: LD_VAR 0 2
60154: PUSH
60155: LD_INT 4
60157: PLUS
60158: PUSH
60159: LD_INT 5
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: LIST
60166: PUSH
60167: LD_VAR 0 1
60171: PUSH
60172: LD_INT 3
60174: PLUS
60175: PUSH
60176: LD_VAR 0 2
60180: PUSH
60181: LD_INT 4
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: LIST
60188: PUSH
60189: LD_VAR 0 1
60193: PUSH
60194: LD_VAR 0 2
60198: PUSH
60199: LD_INT 3
60201: PLUS
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: LIST
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: ST_TO_ADDR
// end ; end ;
60218: GO 60221
60220: POP
// result := list ;
60221: LD_ADDR_VAR 0 4
60225: PUSH
60226: LD_VAR 0 5
60230: ST_TO_ADDR
// end ;
60231: LD_VAR 0 4
60235: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60236: LD_INT 0
60238: PPUSH
60239: PPUSH
60240: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60241: LD_VAR 0 1
60245: NOT
60246: PUSH
60247: LD_VAR 0 2
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: LD_INT 3
60260: PUSH
60261: LD_INT 4
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: IN
60270: NOT
60271: OR
60272: IFFALSE 60276
// exit ;
60274: GO 60368
// tmp := [ ] ;
60276: LD_ADDR_VAR 0 5
60280: PUSH
60281: EMPTY
60282: ST_TO_ADDR
// for i in units do
60283: LD_ADDR_VAR 0 4
60287: PUSH
60288: LD_VAR 0 1
60292: PUSH
60293: FOR_IN
60294: IFFALSE 60337
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60296: LD_ADDR_VAR 0 5
60300: PUSH
60301: LD_VAR 0 5
60305: PPUSH
60306: LD_VAR 0 5
60310: PUSH
60311: LD_INT 1
60313: PLUS
60314: PPUSH
60315: LD_VAR 0 4
60319: PPUSH
60320: LD_VAR 0 2
60324: PPUSH
60325: CALL_OW 259
60329: PPUSH
60330: CALL_OW 2
60334: ST_TO_ADDR
60335: GO 60293
60337: POP
60338: POP
// if not tmp then
60339: LD_VAR 0 5
60343: NOT
60344: IFFALSE 60348
// exit ;
60346: GO 60368
// result := SortListByListDesc ( units , tmp ) ;
60348: LD_ADDR_VAR 0 3
60352: PUSH
60353: LD_VAR 0 1
60357: PPUSH
60358: LD_VAR 0 5
60362: PPUSH
60363: CALL_OW 77
60367: ST_TO_ADDR
// end ;
60368: LD_VAR 0 3
60372: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60373: LD_INT 0
60375: PPUSH
60376: PPUSH
60377: PPUSH
// result := false ;
60378: LD_ADDR_VAR 0 3
60382: PUSH
60383: LD_INT 0
60385: ST_TO_ADDR
// x := GetX ( building ) ;
60386: LD_ADDR_VAR 0 4
60390: PUSH
60391: LD_VAR 0 2
60395: PPUSH
60396: CALL_OW 250
60400: ST_TO_ADDR
// y := GetY ( building ) ;
60401: LD_ADDR_VAR 0 5
60405: PUSH
60406: LD_VAR 0 2
60410: PPUSH
60411: CALL_OW 251
60415: ST_TO_ADDR
// if not building or not x or not y then
60416: LD_VAR 0 2
60420: NOT
60421: PUSH
60422: LD_VAR 0 4
60426: NOT
60427: OR
60428: PUSH
60429: LD_VAR 0 5
60433: NOT
60434: OR
60435: IFFALSE 60439
// exit ;
60437: GO 60531
// if GetTaskList ( unit ) then
60439: LD_VAR 0 1
60443: PPUSH
60444: CALL_OW 437
60448: IFFALSE 60531
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60450: LD_STRING e
60452: PUSH
60453: LD_VAR 0 1
60457: PPUSH
60458: CALL_OW 437
60462: PUSH
60463: LD_INT 1
60465: ARRAY
60466: PUSH
60467: LD_INT 1
60469: ARRAY
60470: EQUAL
60471: PUSH
60472: LD_VAR 0 4
60476: PUSH
60477: LD_VAR 0 1
60481: PPUSH
60482: CALL_OW 437
60486: PUSH
60487: LD_INT 1
60489: ARRAY
60490: PUSH
60491: LD_INT 2
60493: ARRAY
60494: EQUAL
60495: AND
60496: PUSH
60497: LD_VAR 0 5
60501: PUSH
60502: LD_VAR 0 1
60506: PPUSH
60507: CALL_OW 437
60511: PUSH
60512: LD_INT 1
60514: ARRAY
60515: PUSH
60516: LD_INT 3
60518: ARRAY
60519: EQUAL
60520: AND
60521: IFFALSE 60531
// result := true end ;
60523: LD_ADDR_VAR 0 3
60527: PUSH
60528: LD_INT 1
60530: ST_TO_ADDR
// end ;
60531: LD_VAR 0 3
60535: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60536: LD_INT 0
60538: PPUSH
// result := false ;
60539: LD_ADDR_VAR 0 4
60543: PUSH
60544: LD_INT 0
60546: ST_TO_ADDR
// if GetTaskList ( unit ) then
60547: LD_VAR 0 1
60551: PPUSH
60552: CALL_OW 437
60556: IFFALSE 60639
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60558: LD_STRING M
60560: PUSH
60561: LD_VAR 0 1
60565: PPUSH
60566: CALL_OW 437
60570: PUSH
60571: LD_INT 1
60573: ARRAY
60574: PUSH
60575: LD_INT 1
60577: ARRAY
60578: EQUAL
60579: PUSH
60580: LD_VAR 0 2
60584: PUSH
60585: LD_VAR 0 1
60589: PPUSH
60590: CALL_OW 437
60594: PUSH
60595: LD_INT 1
60597: ARRAY
60598: PUSH
60599: LD_INT 2
60601: ARRAY
60602: EQUAL
60603: AND
60604: PUSH
60605: LD_VAR 0 3
60609: PUSH
60610: LD_VAR 0 1
60614: PPUSH
60615: CALL_OW 437
60619: PUSH
60620: LD_INT 1
60622: ARRAY
60623: PUSH
60624: LD_INT 3
60626: ARRAY
60627: EQUAL
60628: AND
60629: IFFALSE 60639
// result := true ;
60631: LD_ADDR_VAR 0 4
60635: PUSH
60636: LD_INT 1
60638: ST_TO_ADDR
// end ; end ;
60639: LD_VAR 0 4
60643: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60644: LD_INT 0
60646: PPUSH
60647: PPUSH
60648: PPUSH
60649: PPUSH
// if not unit or not area then
60650: LD_VAR 0 1
60654: NOT
60655: PUSH
60656: LD_VAR 0 2
60660: NOT
60661: OR
60662: IFFALSE 60666
// exit ;
60664: GO 60830
// tmp := AreaToList ( area , i ) ;
60666: LD_ADDR_VAR 0 6
60670: PUSH
60671: LD_VAR 0 2
60675: PPUSH
60676: LD_VAR 0 5
60680: PPUSH
60681: CALL_OW 517
60685: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60686: LD_ADDR_VAR 0 5
60690: PUSH
60691: DOUBLE
60692: LD_INT 1
60694: DEC
60695: ST_TO_ADDR
60696: LD_VAR 0 6
60700: PUSH
60701: LD_INT 1
60703: ARRAY
60704: PUSH
60705: FOR_TO
60706: IFFALSE 60828
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60708: LD_ADDR_VAR 0 7
60712: PUSH
60713: LD_VAR 0 6
60717: PUSH
60718: LD_INT 1
60720: ARRAY
60721: PUSH
60722: LD_VAR 0 5
60726: ARRAY
60727: PUSH
60728: LD_VAR 0 6
60732: PUSH
60733: LD_INT 2
60735: ARRAY
60736: PUSH
60737: LD_VAR 0 5
60741: ARRAY
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60747: LD_VAR 0 7
60751: PUSH
60752: LD_INT 1
60754: ARRAY
60755: PPUSH
60756: LD_VAR 0 7
60760: PUSH
60761: LD_INT 2
60763: ARRAY
60764: PPUSH
60765: CALL_OW 428
60769: PUSH
60770: LD_INT 0
60772: EQUAL
60773: IFFALSE 60826
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60775: LD_VAR 0 1
60779: PPUSH
60780: LD_VAR 0 7
60784: PUSH
60785: LD_INT 1
60787: ARRAY
60788: PPUSH
60789: LD_VAR 0 7
60793: PUSH
60794: LD_INT 2
60796: ARRAY
60797: PPUSH
60798: LD_VAR 0 3
60802: PPUSH
60803: CALL_OW 48
// result := IsPlaced ( unit ) ;
60807: LD_ADDR_VAR 0 4
60811: PUSH
60812: LD_VAR 0 1
60816: PPUSH
60817: CALL_OW 305
60821: ST_TO_ADDR
// exit ;
60822: POP
60823: POP
60824: GO 60830
// end ; end ;
60826: GO 60705
60828: POP
60829: POP
// end ;
60830: LD_VAR 0 4
60834: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60835: LD_INT 0
60837: PPUSH
60838: PPUSH
60839: PPUSH
// if not side or side > 8 then
60840: LD_VAR 0 1
60844: NOT
60845: PUSH
60846: LD_VAR 0 1
60850: PUSH
60851: LD_INT 8
60853: GREATER
60854: OR
60855: IFFALSE 60859
// exit ;
60857: GO 61046
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60859: LD_ADDR_VAR 0 4
60863: PUSH
60864: LD_INT 22
60866: PUSH
60867: LD_VAR 0 1
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 21
60878: PUSH
60879: LD_INT 3
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PPUSH
60890: CALL_OW 69
60894: ST_TO_ADDR
// if not tmp then
60895: LD_VAR 0 4
60899: NOT
60900: IFFALSE 60904
// exit ;
60902: GO 61046
// enable_addtolog := true ;
60904: LD_ADDR_OWVAR 81
60908: PUSH
60909: LD_INT 1
60911: ST_TO_ADDR
// AddToLog ( [ ) ;
60912: LD_STRING [
60914: PPUSH
60915: CALL_OW 561
// for i in tmp do
60919: LD_ADDR_VAR 0 3
60923: PUSH
60924: LD_VAR 0 4
60928: PUSH
60929: FOR_IN
60930: IFFALSE 61037
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60932: LD_STRING [
60934: PUSH
60935: LD_VAR 0 3
60939: PPUSH
60940: CALL_OW 266
60944: STR
60945: PUSH
60946: LD_STRING , 
60948: STR
60949: PUSH
60950: LD_VAR 0 3
60954: PPUSH
60955: CALL_OW 250
60959: STR
60960: PUSH
60961: LD_STRING , 
60963: STR
60964: PUSH
60965: LD_VAR 0 3
60969: PPUSH
60970: CALL_OW 251
60974: STR
60975: PUSH
60976: LD_STRING , 
60978: STR
60979: PUSH
60980: LD_VAR 0 3
60984: PPUSH
60985: CALL_OW 254
60989: STR
60990: PUSH
60991: LD_STRING , 
60993: STR
60994: PUSH
60995: LD_VAR 0 3
60999: PPUSH
61000: LD_INT 1
61002: PPUSH
61003: CALL_OW 268
61007: STR
61008: PUSH
61009: LD_STRING , 
61011: STR
61012: PUSH
61013: LD_VAR 0 3
61017: PPUSH
61018: LD_INT 2
61020: PPUSH
61021: CALL_OW 268
61025: STR
61026: PUSH
61027: LD_STRING ],
61029: STR
61030: PPUSH
61031: CALL_OW 561
// end ;
61035: GO 60929
61037: POP
61038: POP
// AddToLog ( ]; ) ;
61039: LD_STRING ];
61041: PPUSH
61042: CALL_OW 561
// end ;
61046: LD_VAR 0 2
61050: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61051: LD_INT 0
61053: PPUSH
61054: PPUSH
61055: PPUSH
61056: PPUSH
61057: PPUSH
// if not area or not rate or not max then
61058: LD_VAR 0 1
61062: NOT
61063: PUSH
61064: LD_VAR 0 2
61068: NOT
61069: OR
61070: PUSH
61071: LD_VAR 0 4
61075: NOT
61076: OR
61077: IFFALSE 61081
// exit ;
61079: GO 61270
// while 1 do
61081: LD_INT 1
61083: IFFALSE 61270
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61085: LD_ADDR_VAR 0 9
61089: PUSH
61090: LD_VAR 0 1
61094: PPUSH
61095: LD_INT 1
61097: PPUSH
61098: CALL_OW 287
61102: PUSH
61103: LD_INT 10
61105: MUL
61106: ST_TO_ADDR
// r := rate / 10 ;
61107: LD_ADDR_VAR 0 7
61111: PUSH
61112: LD_VAR 0 2
61116: PUSH
61117: LD_INT 10
61119: DIVREAL
61120: ST_TO_ADDR
// time := 1 1$00 ;
61121: LD_ADDR_VAR 0 8
61125: PUSH
61126: LD_INT 2100
61128: ST_TO_ADDR
// if amount < min then
61129: LD_VAR 0 9
61133: PUSH
61134: LD_VAR 0 3
61138: LESS
61139: IFFALSE 61157
// r := r * 2 else
61141: LD_ADDR_VAR 0 7
61145: PUSH
61146: LD_VAR 0 7
61150: PUSH
61151: LD_INT 2
61153: MUL
61154: ST_TO_ADDR
61155: GO 61183
// if amount > max then
61157: LD_VAR 0 9
61161: PUSH
61162: LD_VAR 0 4
61166: GREATER
61167: IFFALSE 61183
// r := r / 2 ;
61169: LD_ADDR_VAR 0 7
61173: PUSH
61174: LD_VAR 0 7
61178: PUSH
61179: LD_INT 2
61181: DIVREAL
61182: ST_TO_ADDR
// time := time / r ;
61183: LD_ADDR_VAR 0 8
61187: PUSH
61188: LD_VAR 0 8
61192: PUSH
61193: LD_VAR 0 7
61197: DIVREAL
61198: ST_TO_ADDR
// if time < 0 then
61199: LD_VAR 0 8
61203: PUSH
61204: LD_INT 0
61206: LESS
61207: IFFALSE 61224
// time := time * - 1 ;
61209: LD_ADDR_VAR 0 8
61213: PUSH
61214: LD_VAR 0 8
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: MUL
61223: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61224: LD_VAR 0 8
61228: PUSH
61229: LD_INT 35
61231: PPUSH
61232: LD_INT 875
61234: PPUSH
61235: CALL_OW 12
61239: PLUS
61240: PPUSH
61241: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61245: LD_INT 1
61247: PPUSH
61248: LD_INT 5
61250: PPUSH
61251: CALL_OW 12
61255: PPUSH
61256: LD_VAR 0 1
61260: PPUSH
61261: LD_INT 1
61263: PPUSH
61264: CALL_OW 55
// end ;
61268: GO 61081
// end ;
61270: LD_VAR 0 5
61274: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61275: LD_INT 0
61277: PPUSH
61278: PPUSH
61279: PPUSH
61280: PPUSH
61281: PPUSH
61282: PPUSH
61283: PPUSH
61284: PPUSH
// if not turrets or not factories then
61285: LD_VAR 0 1
61289: NOT
61290: PUSH
61291: LD_VAR 0 2
61295: NOT
61296: OR
61297: IFFALSE 61301
// exit ;
61299: GO 61608
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61301: LD_ADDR_VAR 0 10
61305: PUSH
61306: LD_INT 5
61308: PUSH
61309: LD_INT 6
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 2
61318: PUSH
61319: LD_INT 4
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 3
61328: PUSH
61329: LD_INT 5
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 24
61343: PUSH
61344: LD_INT 25
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 23
61353: PUSH
61354: LD_INT 27
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 42
61367: PUSH
61368: LD_INT 43
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 44
61377: PUSH
61378: LD_INT 46
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 45
61387: PUSH
61388: LD_INT 47
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: LIST
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: LIST
61404: ST_TO_ADDR
// result := [ ] ;
61405: LD_ADDR_VAR 0 3
61409: PUSH
61410: EMPTY
61411: ST_TO_ADDR
// for i in turrets do
61412: LD_ADDR_VAR 0 4
61416: PUSH
61417: LD_VAR 0 1
61421: PUSH
61422: FOR_IN
61423: IFFALSE 61606
// begin nat := GetNation ( i ) ;
61425: LD_ADDR_VAR 0 7
61429: PUSH
61430: LD_VAR 0 4
61434: PPUSH
61435: CALL_OW 248
61439: ST_TO_ADDR
// weapon := 0 ;
61440: LD_ADDR_VAR 0 8
61444: PUSH
61445: LD_INT 0
61447: ST_TO_ADDR
// if not nat then
61448: LD_VAR 0 7
61452: NOT
61453: IFFALSE 61457
// continue ;
61455: GO 61422
// for j in list [ nat ] do
61457: LD_ADDR_VAR 0 5
61461: PUSH
61462: LD_VAR 0 10
61466: PUSH
61467: LD_VAR 0 7
61471: ARRAY
61472: PUSH
61473: FOR_IN
61474: IFFALSE 61515
// if GetBWeapon ( i ) = j [ 1 ] then
61476: LD_VAR 0 4
61480: PPUSH
61481: CALL_OW 269
61485: PUSH
61486: LD_VAR 0 5
61490: PUSH
61491: LD_INT 1
61493: ARRAY
61494: EQUAL
61495: IFFALSE 61513
// begin weapon := j [ 2 ] ;
61497: LD_ADDR_VAR 0 8
61501: PUSH
61502: LD_VAR 0 5
61506: PUSH
61507: LD_INT 2
61509: ARRAY
61510: ST_TO_ADDR
// break ;
61511: GO 61515
// end ;
61513: GO 61473
61515: POP
61516: POP
// if not weapon then
61517: LD_VAR 0 8
61521: NOT
61522: IFFALSE 61526
// continue ;
61524: GO 61422
// for k in factories do
61526: LD_ADDR_VAR 0 6
61530: PUSH
61531: LD_VAR 0 2
61535: PUSH
61536: FOR_IN
61537: IFFALSE 61602
// begin weapons := AvailableWeaponList ( k ) ;
61539: LD_ADDR_VAR 0 9
61543: PUSH
61544: LD_VAR 0 6
61548: PPUSH
61549: CALL_OW 478
61553: ST_TO_ADDR
// if not weapons then
61554: LD_VAR 0 9
61558: NOT
61559: IFFALSE 61563
// continue ;
61561: GO 61536
// if weapon in weapons then
61563: LD_VAR 0 8
61567: PUSH
61568: LD_VAR 0 9
61572: IN
61573: IFFALSE 61600
// begin result := [ i , weapon ] ;
61575: LD_ADDR_VAR 0 3
61579: PUSH
61580: LD_VAR 0 4
61584: PUSH
61585: LD_VAR 0 8
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: ST_TO_ADDR
// exit ;
61594: POP
61595: POP
61596: POP
61597: POP
61598: GO 61608
// end ; end ;
61600: GO 61536
61602: POP
61603: POP
// end ;
61604: GO 61422
61606: POP
61607: POP
// end ;
61608: LD_VAR 0 3
61612: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61613: LD_INT 0
61615: PPUSH
// if not side or side > 8 then
61616: LD_VAR 0 3
61620: NOT
61621: PUSH
61622: LD_VAR 0 3
61626: PUSH
61627: LD_INT 8
61629: GREATER
61630: OR
61631: IFFALSE 61635
// exit ;
61633: GO 61694
// if not range then
61635: LD_VAR 0 4
61639: NOT
61640: IFFALSE 61651
// range := - 12 ;
61642: LD_ADDR_VAR 0 4
61646: PUSH
61647: LD_INT 12
61649: NEG
61650: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61651: LD_VAR 0 1
61655: PPUSH
61656: LD_VAR 0 2
61660: PPUSH
61661: LD_VAR 0 3
61665: PPUSH
61666: LD_VAR 0 4
61670: PPUSH
61671: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61675: LD_VAR 0 1
61679: PPUSH
61680: LD_VAR 0 2
61684: PPUSH
61685: LD_VAR 0 3
61689: PPUSH
61690: CALL_OW 331
// end ;
61694: LD_VAR 0 5
61698: RET
// export function Video ( mode ) ; begin
61699: LD_INT 0
61701: PPUSH
// ingame_video = mode ;
61702: LD_ADDR_OWVAR 52
61706: PUSH
61707: LD_VAR 0 1
61711: ST_TO_ADDR
// interface_hidden = mode ;
61712: LD_ADDR_OWVAR 54
61716: PUSH
61717: LD_VAR 0 1
61721: ST_TO_ADDR
// end ;
61722: LD_VAR 0 2
61726: RET
// export function Join ( array , element ) ; begin
61727: LD_INT 0
61729: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61730: LD_ADDR_VAR 0 3
61734: PUSH
61735: LD_VAR 0 1
61739: PPUSH
61740: LD_VAR 0 1
61744: PUSH
61745: LD_INT 1
61747: PLUS
61748: PPUSH
61749: LD_VAR 0 2
61753: PPUSH
61754: CALL_OW 1
61758: ST_TO_ADDR
// end ;
61759: LD_VAR 0 3
61763: RET
// export function JoinUnion ( array , element ) ; begin
61764: LD_INT 0
61766: PPUSH
// result := array union element ;
61767: LD_ADDR_VAR 0 3
61771: PUSH
61772: LD_VAR 0 1
61776: PUSH
61777: LD_VAR 0 2
61781: UNION
61782: ST_TO_ADDR
// end ;
61783: LD_VAR 0 3
61787: RET
// export function GetBehemoths ( side ) ; begin
61788: LD_INT 0
61790: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61791: LD_ADDR_VAR 0 2
61795: PUSH
61796: LD_INT 22
61798: PUSH
61799: LD_VAR 0 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 31
61810: PUSH
61811: LD_INT 25
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PPUSH
61822: CALL_OW 69
61826: ST_TO_ADDR
// end ;
61827: LD_VAR 0 2
61831: RET
// export function Shuffle ( array ) ; var i , index ; begin
61832: LD_INT 0
61834: PPUSH
61835: PPUSH
61836: PPUSH
// result := [ ] ;
61837: LD_ADDR_VAR 0 2
61841: PUSH
61842: EMPTY
61843: ST_TO_ADDR
// if not array then
61844: LD_VAR 0 1
61848: NOT
61849: IFFALSE 61853
// exit ;
61851: GO 61952
// Randomize ;
61853: CALL_OW 10
// for i = array downto 1 do
61857: LD_ADDR_VAR 0 3
61861: PUSH
61862: DOUBLE
61863: LD_VAR 0 1
61867: INC
61868: ST_TO_ADDR
61869: LD_INT 1
61871: PUSH
61872: FOR_DOWNTO
61873: IFFALSE 61950
// begin index := rand ( 1 , array ) ;
61875: LD_ADDR_VAR 0 4
61879: PUSH
61880: LD_INT 1
61882: PPUSH
61883: LD_VAR 0 1
61887: PPUSH
61888: CALL_OW 12
61892: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61893: LD_ADDR_VAR 0 2
61897: PUSH
61898: LD_VAR 0 2
61902: PPUSH
61903: LD_VAR 0 2
61907: PUSH
61908: LD_INT 1
61910: PLUS
61911: PPUSH
61912: LD_VAR 0 1
61916: PUSH
61917: LD_VAR 0 4
61921: ARRAY
61922: PPUSH
61923: CALL_OW 2
61927: ST_TO_ADDR
// array := Delete ( array , index ) ;
61928: LD_ADDR_VAR 0 1
61932: PUSH
61933: LD_VAR 0 1
61937: PPUSH
61938: LD_VAR 0 4
61942: PPUSH
61943: CALL_OW 3
61947: ST_TO_ADDR
// end ;
61948: GO 61872
61950: POP
61951: POP
// end ;
61952: LD_VAR 0 2
61956: RET
// export function GetBaseMaterials ( base ) ; begin
61957: LD_INT 0
61959: PPUSH
// result := [ 0 , 0 , 0 ] ;
61960: LD_ADDR_VAR 0 2
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: LIST
61978: ST_TO_ADDR
// if not base then
61979: LD_VAR 0 1
61983: NOT
61984: IFFALSE 61988
// exit ;
61986: GO 62037
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61988: LD_ADDR_VAR 0 2
61992: PUSH
61993: LD_VAR 0 1
61997: PPUSH
61998: LD_INT 1
62000: PPUSH
62001: CALL_OW 275
62005: PUSH
62006: LD_VAR 0 1
62010: PPUSH
62011: LD_INT 2
62013: PPUSH
62014: CALL_OW 275
62018: PUSH
62019: LD_VAR 0 1
62023: PPUSH
62024: LD_INT 3
62026: PPUSH
62027: CALL_OW 275
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: LIST
62036: ST_TO_ADDR
// end ;
62037: LD_VAR 0 2
62041: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62042: LD_INT 0
62044: PPUSH
62045: PPUSH
// result := array ;
62046: LD_ADDR_VAR 0 3
62050: PUSH
62051: LD_VAR 0 1
62055: ST_TO_ADDR
// if size > 0 then
62056: LD_VAR 0 2
62060: PUSH
62061: LD_INT 0
62063: GREATER
62064: IFFALSE 62110
// for i := array downto size do
62066: LD_ADDR_VAR 0 4
62070: PUSH
62071: DOUBLE
62072: LD_VAR 0 1
62076: INC
62077: ST_TO_ADDR
62078: LD_VAR 0 2
62082: PUSH
62083: FOR_DOWNTO
62084: IFFALSE 62108
// result := Delete ( result , result ) ;
62086: LD_ADDR_VAR 0 3
62090: PUSH
62091: LD_VAR 0 3
62095: PPUSH
62096: LD_VAR 0 3
62100: PPUSH
62101: CALL_OW 3
62105: ST_TO_ADDR
62106: GO 62083
62108: POP
62109: POP
// end ;
62110: LD_VAR 0 3
62114: RET
// export function ComExit ( unit ) ; var tmp ; begin
62115: LD_INT 0
62117: PPUSH
62118: PPUSH
// if not IsInUnit ( unit ) then
62119: LD_VAR 0 1
62123: PPUSH
62124: CALL_OW 310
62128: NOT
62129: IFFALSE 62133
// exit ;
62131: GO 62193
// tmp := IsInUnit ( unit ) ;
62133: LD_ADDR_VAR 0 3
62137: PUSH
62138: LD_VAR 0 1
62142: PPUSH
62143: CALL_OW 310
62147: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62148: LD_VAR 0 3
62152: PPUSH
62153: CALL_OW 247
62157: PUSH
62158: LD_INT 2
62160: EQUAL
62161: IFFALSE 62174
// ComExitVehicle ( unit ) else
62163: LD_VAR 0 1
62167: PPUSH
62168: CALL_OW 121
62172: GO 62183
// ComExitBuilding ( unit ) ;
62174: LD_VAR 0 1
62178: PPUSH
62179: CALL_OW 122
// result := tmp ;
62183: LD_ADDR_VAR 0 2
62187: PUSH
62188: LD_VAR 0 3
62192: ST_TO_ADDR
// end ;
62193: LD_VAR 0 2
62197: RET
// export function ComExitAll ( units ) ; var i ; begin
62198: LD_INT 0
62200: PPUSH
62201: PPUSH
// if not units then
62202: LD_VAR 0 1
62206: NOT
62207: IFFALSE 62211
// exit ;
62209: GO 62237
// for i in units do
62211: LD_ADDR_VAR 0 3
62215: PUSH
62216: LD_VAR 0 1
62220: PUSH
62221: FOR_IN
62222: IFFALSE 62235
// ComExit ( i ) ;
62224: LD_VAR 0 3
62228: PPUSH
62229: CALL 62115 0 1
62233: GO 62221
62235: POP
62236: POP
// end ;
62237: LD_VAR 0 2
62241: RET
// export function ResetHc ; begin
62242: LD_INT 0
62244: PPUSH
// InitHc ;
62245: CALL_OW 19
// hc_importance := 0 ;
62249: LD_ADDR_OWVAR 32
62253: PUSH
62254: LD_INT 0
62256: ST_TO_ADDR
// end ;
62257: LD_VAR 0 1
62261: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62262: LD_INT 0
62264: PPUSH
62265: PPUSH
62266: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62267: LD_ADDR_VAR 0 6
62271: PUSH
62272: LD_VAR 0 1
62276: PUSH
62277: LD_VAR 0 3
62281: PLUS
62282: PUSH
62283: LD_INT 2
62285: DIV
62286: ST_TO_ADDR
// if _x < 0 then
62287: LD_VAR 0 6
62291: PUSH
62292: LD_INT 0
62294: LESS
62295: IFFALSE 62312
// _x := _x * - 1 ;
62297: LD_ADDR_VAR 0 6
62301: PUSH
62302: LD_VAR 0 6
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: MUL
62311: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62312: LD_ADDR_VAR 0 7
62316: PUSH
62317: LD_VAR 0 2
62321: PUSH
62322: LD_VAR 0 4
62326: PLUS
62327: PUSH
62328: LD_INT 2
62330: DIV
62331: ST_TO_ADDR
// if _y < 0 then
62332: LD_VAR 0 7
62336: PUSH
62337: LD_INT 0
62339: LESS
62340: IFFALSE 62357
// _y := _y * - 1 ;
62342: LD_ADDR_VAR 0 7
62346: PUSH
62347: LD_VAR 0 7
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: MUL
62356: ST_TO_ADDR
// result := [ _x , _y ] ;
62357: LD_ADDR_VAR 0 5
62361: PUSH
62362: LD_VAR 0 6
62366: PUSH
62367: LD_VAR 0 7
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: ST_TO_ADDR
// end ;
62376: LD_VAR 0 5
62380: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62381: LD_INT 0
62383: PPUSH
62384: PPUSH
62385: PPUSH
62386: PPUSH
// task := GetTaskList ( unit ) ;
62387: LD_ADDR_VAR 0 7
62391: PUSH
62392: LD_VAR 0 1
62396: PPUSH
62397: CALL_OW 437
62401: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62402: LD_VAR 0 7
62406: NOT
62407: PUSH
62408: LD_VAR 0 1
62412: PPUSH
62413: LD_VAR 0 2
62417: PPUSH
62418: CALL_OW 308
62422: NOT
62423: AND
62424: IFFALSE 62428
// exit ;
62426: GO 62546
// if IsInArea ( unit , area ) then
62428: LD_VAR 0 1
62432: PPUSH
62433: LD_VAR 0 2
62437: PPUSH
62438: CALL_OW 308
62442: IFFALSE 62460
// begin ComMoveToArea ( unit , goAway ) ;
62444: LD_VAR 0 1
62448: PPUSH
62449: LD_VAR 0 3
62453: PPUSH
62454: CALL_OW 113
// exit ;
62458: GO 62546
// end ; if task [ 1 ] [ 1 ] <> M then
62460: LD_VAR 0 7
62464: PUSH
62465: LD_INT 1
62467: ARRAY
62468: PUSH
62469: LD_INT 1
62471: ARRAY
62472: PUSH
62473: LD_STRING M
62475: NONEQUAL
62476: IFFALSE 62480
// exit ;
62478: GO 62546
// x := task [ 1 ] [ 2 ] ;
62480: LD_ADDR_VAR 0 5
62484: PUSH
62485: LD_VAR 0 7
62489: PUSH
62490: LD_INT 1
62492: ARRAY
62493: PUSH
62494: LD_INT 2
62496: ARRAY
62497: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62498: LD_ADDR_VAR 0 6
62502: PUSH
62503: LD_VAR 0 7
62507: PUSH
62508: LD_INT 1
62510: ARRAY
62511: PUSH
62512: LD_INT 3
62514: ARRAY
62515: ST_TO_ADDR
// if InArea ( x , y , area ) then
62516: LD_VAR 0 5
62520: PPUSH
62521: LD_VAR 0 6
62525: PPUSH
62526: LD_VAR 0 2
62530: PPUSH
62531: CALL_OW 309
62535: IFFALSE 62546
// ComStop ( unit ) ;
62537: LD_VAR 0 1
62541: PPUSH
62542: CALL_OW 141
// end ;
62546: LD_VAR 0 4
62550: RET
// export function Abs ( value ) ; begin
62551: LD_INT 0
62553: PPUSH
// result := value ;
62554: LD_ADDR_VAR 0 2
62558: PUSH
62559: LD_VAR 0 1
62563: ST_TO_ADDR
// if value < 0 then
62564: LD_VAR 0 1
62568: PUSH
62569: LD_INT 0
62571: LESS
62572: IFFALSE 62589
// result := value * - 1 ;
62574: LD_ADDR_VAR 0 2
62578: PUSH
62579: LD_VAR 0 1
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: MUL
62588: ST_TO_ADDR
// end ;
62589: LD_VAR 0 2
62593: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62594: LD_INT 0
62596: PPUSH
62597: PPUSH
62598: PPUSH
62599: PPUSH
62600: PPUSH
62601: PPUSH
62602: PPUSH
62603: PPUSH
// if not unit or not building then
62604: LD_VAR 0 1
62608: NOT
62609: PUSH
62610: LD_VAR 0 2
62614: NOT
62615: OR
62616: IFFALSE 62620
// exit ;
62618: GO 62846
// x := GetX ( building ) ;
62620: LD_ADDR_VAR 0 4
62624: PUSH
62625: LD_VAR 0 2
62629: PPUSH
62630: CALL_OW 250
62634: ST_TO_ADDR
// y := GetY ( building ) ;
62635: LD_ADDR_VAR 0 6
62639: PUSH
62640: LD_VAR 0 2
62644: PPUSH
62645: CALL_OW 251
62649: ST_TO_ADDR
// d := GetDir ( building ) ;
62650: LD_ADDR_VAR 0 8
62654: PUSH
62655: LD_VAR 0 2
62659: PPUSH
62660: CALL_OW 254
62664: ST_TO_ADDR
// r := 4 ;
62665: LD_ADDR_VAR 0 9
62669: PUSH
62670: LD_INT 4
62672: ST_TO_ADDR
// for i := 1 to 5 do
62673: LD_ADDR_VAR 0 10
62677: PUSH
62678: DOUBLE
62679: LD_INT 1
62681: DEC
62682: ST_TO_ADDR
62683: LD_INT 5
62685: PUSH
62686: FOR_TO
62687: IFFALSE 62844
// begin _x := ShiftX ( x , d , r + i ) ;
62689: LD_ADDR_VAR 0 5
62693: PUSH
62694: LD_VAR 0 4
62698: PPUSH
62699: LD_VAR 0 8
62703: PPUSH
62704: LD_VAR 0 9
62708: PUSH
62709: LD_VAR 0 10
62713: PLUS
62714: PPUSH
62715: CALL_OW 272
62719: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62720: LD_ADDR_VAR 0 7
62724: PUSH
62725: LD_VAR 0 6
62729: PPUSH
62730: LD_VAR 0 8
62734: PPUSH
62735: LD_VAR 0 9
62739: PUSH
62740: LD_VAR 0 10
62744: PLUS
62745: PPUSH
62746: CALL_OW 273
62750: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62751: LD_VAR 0 5
62755: PPUSH
62756: LD_VAR 0 7
62760: PPUSH
62761: CALL_OW 488
62765: PUSH
62766: LD_VAR 0 5
62770: PPUSH
62771: LD_VAR 0 7
62775: PPUSH
62776: CALL_OW 428
62780: PPUSH
62781: CALL_OW 247
62785: PUSH
62786: LD_INT 3
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: IN
62796: NOT
62797: AND
62798: IFFALSE 62842
// begin ComMoveXY ( unit , _x , _y ) ;
62800: LD_VAR 0 1
62804: PPUSH
62805: LD_VAR 0 5
62809: PPUSH
62810: LD_VAR 0 7
62814: PPUSH
62815: CALL_OW 111
// result := [ _x , _y ] ;
62819: LD_ADDR_VAR 0 3
62823: PUSH
62824: LD_VAR 0 5
62828: PUSH
62829: LD_VAR 0 7
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: ST_TO_ADDR
// exit ;
62838: POP
62839: POP
62840: GO 62846
// end ; end ;
62842: GO 62686
62844: POP
62845: POP
// end ;
62846: LD_VAR 0 3
62850: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62851: LD_INT 0
62853: PPUSH
62854: PPUSH
62855: PPUSH
// result := 0 ;
62856: LD_ADDR_VAR 0 3
62860: PUSH
62861: LD_INT 0
62863: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62864: LD_VAR 0 1
62868: PUSH
62869: LD_INT 0
62871: LESS
62872: PUSH
62873: LD_VAR 0 1
62877: PUSH
62878: LD_INT 8
62880: GREATER
62881: OR
62882: PUSH
62883: LD_VAR 0 2
62887: PUSH
62888: LD_INT 0
62890: LESS
62891: OR
62892: PUSH
62893: LD_VAR 0 2
62897: PUSH
62898: LD_INT 8
62900: GREATER
62901: OR
62902: IFFALSE 62906
// exit ;
62904: GO 62981
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62906: LD_ADDR_VAR 0 4
62910: PUSH
62911: LD_INT 22
62913: PUSH
62914: LD_VAR 0 2
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PPUSH
62923: CALL_OW 69
62927: PUSH
62928: FOR_IN
62929: IFFALSE 62979
// begin un := UnitShoot ( i ) ;
62931: LD_ADDR_VAR 0 5
62935: PUSH
62936: LD_VAR 0 4
62940: PPUSH
62941: CALL_OW 504
62945: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62946: LD_VAR 0 5
62950: PPUSH
62951: CALL_OW 255
62955: PUSH
62956: LD_VAR 0 1
62960: EQUAL
62961: IFFALSE 62977
// begin result := un ;
62963: LD_ADDR_VAR 0 3
62967: PUSH
62968: LD_VAR 0 5
62972: ST_TO_ADDR
// exit ;
62973: POP
62974: POP
62975: GO 62981
// end ; end ;
62977: GO 62928
62979: POP
62980: POP
// end ;
62981: LD_VAR 0 3
62985: RET
// export function GetCargoBay ( units ) ; begin
62986: LD_INT 0
62988: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62989: LD_ADDR_VAR 0 2
62993: PUSH
62994: LD_VAR 0 1
62998: PPUSH
62999: LD_INT 2
63001: PUSH
63002: LD_INT 34
63004: PUSH
63005: LD_INT 12
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 34
63014: PUSH
63015: LD_INT 51
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 34
63024: PUSH
63025: LD_INT 32
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 34
63034: PUSH
63035: LD_EXP 94
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: PPUSH
63051: CALL_OW 72
63055: ST_TO_ADDR
// end ;
63056: LD_VAR 0 2
63060: RET
// export function Negate ( value ) ; begin
63061: LD_INT 0
63063: PPUSH
// result := not value ;
63064: LD_ADDR_VAR 0 2
63068: PUSH
63069: LD_VAR 0 1
63073: NOT
63074: ST_TO_ADDR
// end ;
63075: LD_VAR 0 2
63079: RET
// export function Inc ( value ) ; begin
63080: LD_INT 0
63082: PPUSH
// result := value + 1 ;
63083: LD_ADDR_VAR 0 2
63087: PUSH
63088: LD_VAR 0 1
63092: PUSH
63093: LD_INT 1
63095: PLUS
63096: ST_TO_ADDR
// end ;
63097: LD_VAR 0 2
63101: RET
// export function Dec ( value ) ; begin
63102: LD_INT 0
63104: PPUSH
// result := value - 1 ;
63105: LD_ADDR_VAR 0 2
63109: PUSH
63110: LD_VAR 0 1
63114: PUSH
63115: LD_INT 1
63117: MINUS
63118: ST_TO_ADDR
// end ;
63119: LD_VAR 0 2
63123: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63124: LD_INT 0
63126: PPUSH
63127: PPUSH
63128: PPUSH
63129: PPUSH
63130: PPUSH
63131: PPUSH
63132: PPUSH
63133: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63134: LD_VAR 0 1
63138: PPUSH
63139: LD_VAR 0 2
63143: PPUSH
63144: CALL_OW 488
63148: NOT
63149: PUSH
63150: LD_VAR 0 3
63154: PPUSH
63155: LD_VAR 0 4
63159: PPUSH
63160: CALL_OW 488
63164: NOT
63165: OR
63166: IFFALSE 63179
// begin result := - 1 ;
63168: LD_ADDR_VAR 0 5
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: ST_TO_ADDR
// exit ;
63177: GO 63414
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63179: LD_ADDR_VAR 0 12
63183: PUSH
63184: LD_VAR 0 1
63188: PPUSH
63189: LD_VAR 0 2
63193: PPUSH
63194: LD_VAR 0 3
63198: PPUSH
63199: LD_VAR 0 4
63203: PPUSH
63204: CALL 62262 0 4
63208: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63209: LD_ADDR_VAR 0 11
63213: PUSH
63214: LD_VAR 0 1
63218: PPUSH
63219: LD_VAR 0 2
63223: PPUSH
63224: LD_VAR 0 12
63228: PUSH
63229: LD_INT 1
63231: ARRAY
63232: PPUSH
63233: LD_VAR 0 12
63237: PUSH
63238: LD_INT 2
63240: ARRAY
63241: PPUSH
63242: CALL_OW 298
63246: ST_TO_ADDR
// distance := 9999 ;
63247: LD_ADDR_VAR 0 10
63251: PUSH
63252: LD_INT 9999
63254: ST_TO_ADDR
// for i := 0 to 5 do
63255: LD_ADDR_VAR 0 6
63259: PUSH
63260: DOUBLE
63261: LD_INT 0
63263: DEC
63264: ST_TO_ADDR
63265: LD_INT 5
63267: PUSH
63268: FOR_TO
63269: IFFALSE 63412
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63271: LD_ADDR_VAR 0 7
63275: PUSH
63276: LD_VAR 0 1
63280: PPUSH
63281: LD_VAR 0 6
63285: PPUSH
63286: LD_VAR 0 11
63290: PPUSH
63291: CALL_OW 272
63295: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63296: LD_ADDR_VAR 0 8
63300: PUSH
63301: LD_VAR 0 2
63305: PPUSH
63306: LD_VAR 0 6
63310: PPUSH
63311: LD_VAR 0 11
63315: PPUSH
63316: CALL_OW 273
63320: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63321: LD_VAR 0 7
63325: PPUSH
63326: LD_VAR 0 8
63330: PPUSH
63331: CALL_OW 488
63335: NOT
63336: IFFALSE 63340
// continue ;
63338: GO 63268
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63340: LD_ADDR_VAR 0 9
63344: PUSH
63345: LD_VAR 0 12
63349: PUSH
63350: LD_INT 1
63352: ARRAY
63353: PPUSH
63354: LD_VAR 0 12
63358: PUSH
63359: LD_INT 2
63361: ARRAY
63362: PPUSH
63363: LD_VAR 0 7
63367: PPUSH
63368: LD_VAR 0 8
63372: PPUSH
63373: CALL_OW 298
63377: ST_TO_ADDR
// if tmp < distance then
63378: LD_VAR 0 9
63382: PUSH
63383: LD_VAR 0 10
63387: LESS
63388: IFFALSE 63410
// begin result := i ;
63390: LD_ADDR_VAR 0 5
63394: PUSH
63395: LD_VAR 0 6
63399: ST_TO_ADDR
// distance := tmp ;
63400: LD_ADDR_VAR 0 10
63404: PUSH
63405: LD_VAR 0 9
63409: ST_TO_ADDR
// end ; end ;
63410: GO 63268
63412: POP
63413: POP
// end ;
63414: LD_VAR 0 5
63418: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63419: LD_INT 0
63421: PPUSH
63422: PPUSH
// if not driver or not IsInUnit ( driver ) then
63423: LD_VAR 0 1
63427: NOT
63428: PUSH
63429: LD_VAR 0 1
63433: PPUSH
63434: CALL_OW 310
63438: NOT
63439: OR
63440: IFFALSE 63444
// exit ;
63442: GO 63534
// vehicle := IsInUnit ( driver ) ;
63444: LD_ADDR_VAR 0 3
63448: PUSH
63449: LD_VAR 0 1
63453: PPUSH
63454: CALL_OW 310
63458: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63459: LD_VAR 0 1
63463: PPUSH
63464: LD_STRING \
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: PUSH
63494: LD_STRING E
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: LD_VAR 0 3
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PPUSH
63530: CALL_OW 446
// end ;
63534: LD_VAR 0 2
63538: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63539: LD_INT 0
63541: PPUSH
63542: PPUSH
// if not driver or not IsInUnit ( driver ) then
63543: LD_VAR 0 1
63547: NOT
63548: PUSH
63549: LD_VAR 0 1
63553: PPUSH
63554: CALL_OW 310
63558: NOT
63559: OR
63560: IFFALSE 63564
// exit ;
63562: GO 63654
// vehicle := IsInUnit ( driver ) ;
63564: LD_ADDR_VAR 0 3
63568: PUSH
63569: LD_VAR 0 1
63573: PPUSH
63574: CALL_OW 310
63578: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63579: LD_VAR 0 1
63583: PPUSH
63584: LD_STRING \
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: PUSH
63614: LD_STRING E
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_VAR 0 3
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PPUSH
63650: CALL_OW 447
// end ;
63654: LD_VAR 0 2
63658: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63659: LD_INT 0
63661: PPUSH
63662: PPUSH
63663: PPUSH
// tmp := [ ] ;
63664: LD_ADDR_VAR 0 5
63668: PUSH
63669: EMPTY
63670: ST_TO_ADDR
// for i in units do
63671: LD_ADDR_VAR 0 4
63675: PUSH
63676: LD_VAR 0 1
63680: PUSH
63681: FOR_IN
63682: IFFALSE 63720
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63684: LD_ADDR_VAR 0 5
63688: PUSH
63689: LD_VAR 0 5
63693: PPUSH
63694: LD_VAR 0 5
63698: PUSH
63699: LD_INT 1
63701: PLUS
63702: PPUSH
63703: LD_VAR 0 4
63707: PPUSH
63708: CALL_OW 256
63712: PPUSH
63713: CALL_OW 2
63717: ST_TO_ADDR
63718: GO 63681
63720: POP
63721: POP
// if not tmp then
63722: LD_VAR 0 5
63726: NOT
63727: IFFALSE 63731
// exit ;
63729: GO 63779
// if asc then
63731: LD_VAR 0 2
63735: IFFALSE 63759
// result := SortListByListAsc ( units , tmp ) else
63737: LD_ADDR_VAR 0 3
63741: PUSH
63742: LD_VAR 0 1
63746: PPUSH
63747: LD_VAR 0 5
63751: PPUSH
63752: CALL_OW 76
63756: ST_TO_ADDR
63757: GO 63779
// result := SortListByListDesc ( units , tmp ) ;
63759: LD_ADDR_VAR 0 3
63763: PUSH
63764: LD_VAR 0 1
63768: PPUSH
63769: LD_VAR 0 5
63773: PPUSH
63774: CALL_OW 77
63778: ST_TO_ADDR
// end ;
63779: LD_VAR 0 3
63783: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63784: LD_INT 0
63786: PPUSH
63787: PPUSH
// task := GetTaskList ( mech ) ;
63788: LD_ADDR_VAR 0 4
63792: PUSH
63793: LD_VAR 0 1
63797: PPUSH
63798: CALL_OW 437
63802: ST_TO_ADDR
// if not task then
63803: LD_VAR 0 4
63807: NOT
63808: IFFALSE 63812
// exit ;
63810: GO 63854
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63812: LD_ADDR_VAR 0 3
63816: PUSH
63817: LD_VAR 0 4
63821: PUSH
63822: LD_INT 1
63824: ARRAY
63825: PUSH
63826: LD_INT 1
63828: ARRAY
63829: PUSH
63830: LD_STRING r
63832: EQUAL
63833: PUSH
63834: LD_VAR 0 4
63838: PUSH
63839: LD_INT 1
63841: ARRAY
63842: PUSH
63843: LD_INT 4
63845: ARRAY
63846: PUSH
63847: LD_VAR 0 2
63851: EQUAL
63852: AND
63853: ST_TO_ADDR
// end ;
63854: LD_VAR 0 3
63858: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63859: LD_INT 0
63861: PPUSH
// SetDir ( unit , d ) ;
63862: LD_VAR 0 1
63866: PPUSH
63867: LD_VAR 0 4
63871: PPUSH
63872: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63876: LD_VAR 0 1
63880: PPUSH
63881: LD_VAR 0 2
63885: PPUSH
63886: LD_VAR 0 3
63890: PPUSH
63891: LD_VAR 0 5
63895: PPUSH
63896: CALL_OW 48
// end ;
63900: LD_VAR 0 6
63904: RET
// export function ToNaturalNumber ( number ) ; begin
63905: LD_INT 0
63907: PPUSH
// result := number div 1 ;
63908: LD_ADDR_VAR 0 2
63912: PUSH
63913: LD_VAR 0 1
63917: PUSH
63918: LD_INT 1
63920: DIV
63921: ST_TO_ADDR
// if number < 0 then
63922: LD_VAR 0 1
63926: PUSH
63927: LD_INT 0
63929: LESS
63930: IFFALSE 63940
// result := 0 ;
63932: LD_ADDR_VAR 0 2
63936: PUSH
63937: LD_INT 0
63939: ST_TO_ADDR
// end ;
63940: LD_VAR 0 2
63944: RET
// export function SortByClass ( units , class ) ; var un ; begin
63945: LD_INT 0
63947: PPUSH
63948: PPUSH
// if not units or not class then
63949: LD_VAR 0 1
63953: NOT
63954: PUSH
63955: LD_VAR 0 2
63959: NOT
63960: OR
63961: IFFALSE 63965
// exit ;
63963: GO 64060
// result := [ ] ;
63965: LD_ADDR_VAR 0 3
63969: PUSH
63970: EMPTY
63971: ST_TO_ADDR
// for un in units do
63972: LD_ADDR_VAR 0 4
63976: PUSH
63977: LD_VAR 0 1
63981: PUSH
63982: FOR_IN
63983: IFFALSE 64058
// if GetClass ( un ) = class then
63985: LD_VAR 0 4
63989: PPUSH
63990: CALL_OW 257
63994: PUSH
63995: LD_VAR 0 2
63999: EQUAL
64000: IFFALSE 64027
// result := Insert ( result , 1 , un ) else
64002: LD_ADDR_VAR 0 3
64006: PUSH
64007: LD_VAR 0 3
64011: PPUSH
64012: LD_INT 1
64014: PPUSH
64015: LD_VAR 0 4
64019: PPUSH
64020: CALL_OW 2
64024: ST_TO_ADDR
64025: GO 64056
// result := Replace ( result , result + 1 , un ) ;
64027: LD_ADDR_VAR 0 3
64031: PUSH
64032: LD_VAR 0 3
64036: PPUSH
64037: LD_VAR 0 3
64041: PUSH
64042: LD_INT 1
64044: PLUS
64045: PPUSH
64046: LD_VAR 0 4
64050: PPUSH
64051: CALL_OW 1
64055: ST_TO_ADDR
64056: GO 63982
64058: POP
64059: POP
// end ;
64060: LD_VAR 0 3
64064: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64065: LD_INT 0
64067: PPUSH
64068: PPUSH
64069: PPUSH
64070: PPUSH
64071: PPUSH
64072: PPUSH
64073: PPUSH
// result := [ ] ;
64074: LD_ADDR_VAR 0 4
64078: PUSH
64079: EMPTY
64080: ST_TO_ADDR
// if x - r < 0 then
64081: LD_VAR 0 1
64085: PUSH
64086: LD_VAR 0 3
64090: MINUS
64091: PUSH
64092: LD_INT 0
64094: LESS
64095: IFFALSE 64107
// min_x := 0 else
64097: LD_ADDR_VAR 0 8
64101: PUSH
64102: LD_INT 0
64104: ST_TO_ADDR
64105: GO 64123
// min_x := x - r ;
64107: LD_ADDR_VAR 0 8
64111: PUSH
64112: LD_VAR 0 1
64116: PUSH
64117: LD_VAR 0 3
64121: MINUS
64122: ST_TO_ADDR
// if y - r < 0 then
64123: LD_VAR 0 2
64127: PUSH
64128: LD_VAR 0 3
64132: MINUS
64133: PUSH
64134: LD_INT 0
64136: LESS
64137: IFFALSE 64149
// min_y := 0 else
64139: LD_ADDR_VAR 0 7
64143: PUSH
64144: LD_INT 0
64146: ST_TO_ADDR
64147: GO 64165
// min_y := y - r ;
64149: LD_ADDR_VAR 0 7
64153: PUSH
64154: LD_VAR 0 2
64158: PUSH
64159: LD_VAR 0 3
64163: MINUS
64164: ST_TO_ADDR
// max_x := x + r ;
64165: LD_ADDR_VAR 0 9
64169: PUSH
64170: LD_VAR 0 1
64174: PUSH
64175: LD_VAR 0 3
64179: PLUS
64180: ST_TO_ADDR
// max_y := y + r ;
64181: LD_ADDR_VAR 0 10
64185: PUSH
64186: LD_VAR 0 2
64190: PUSH
64191: LD_VAR 0 3
64195: PLUS
64196: ST_TO_ADDR
// for _x = min_x to max_x do
64197: LD_ADDR_VAR 0 5
64201: PUSH
64202: DOUBLE
64203: LD_VAR 0 8
64207: DEC
64208: ST_TO_ADDR
64209: LD_VAR 0 9
64213: PUSH
64214: FOR_TO
64215: IFFALSE 64316
// for _y = min_y to max_y do
64217: LD_ADDR_VAR 0 6
64221: PUSH
64222: DOUBLE
64223: LD_VAR 0 7
64227: DEC
64228: ST_TO_ADDR
64229: LD_VAR 0 10
64233: PUSH
64234: FOR_TO
64235: IFFALSE 64312
// begin if not ValidHex ( _x , _y ) then
64237: LD_VAR 0 5
64241: PPUSH
64242: LD_VAR 0 6
64246: PPUSH
64247: CALL_OW 488
64251: NOT
64252: IFFALSE 64256
// continue ;
64254: GO 64234
// if GetResourceTypeXY ( _x , _y ) then
64256: LD_VAR 0 5
64260: PPUSH
64261: LD_VAR 0 6
64265: PPUSH
64266: CALL_OW 283
64270: IFFALSE 64310
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64272: LD_ADDR_VAR 0 4
64276: PUSH
64277: LD_VAR 0 4
64281: PPUSH
64282: LD_VAR 0 4
64286: PUSH
64287: LD_INT 1
64289: PLUS
64290: PPUSH
64291: LD_VAR 0 5
64295: PUSH
64296: LD_VAR 0 6
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PPUSH
64305: CALL_OW 1
64309: ST_TO_ADDR
// end ;
64310: GO 64234
64312: POP
64313: POP
64314: GO 64214
64316: POP
64317: POP
// end ;
64318: LD_VAR 0 4
64322: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64323: LD_INT 0
64325: PPUSH
64326: PPUSH
64327: PPUSH
64328: PPUSH
64329: PPUSH
64330: PPUSH
64331: PPUSH
64332: PPUSH
// if not units then
64333: LD_VAR 0 1
64337: NOT
64338: IFFALSE 64342
// exit ;
64340: GO 64868
// result := UnitFilter ( units , [ f_ok ] ) ;
64342: LD_ADDR_VAR 0 3
64346: PUSH
64347: LD_VAR 0 1
64351: PPUSH
64352: LD_INT 50
64354: PUSH
64355: EMPTY
64356: LIST
64357: PPUSH
64358: CALL_OW 72
64362: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64363: LD_ADDR_VAR 0 8
64367: PUSH
64368: LD_VAR 0 1
64372: PUSH
64373: LD_INT 1
64375: ARRAY
64376: PPUSH
64377: CALL_OW 255
64381: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64382: LD_ADDR_VAR 0 10
64386: PUSH
64387: LD_INT 29
64389: PUSH
64390: LD_EXP 97
64394: PUSH
64395: LD_INT 49
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: LIST
64402: ST_TO_ADDR
// if not result then
64403: LD_VAR 0 3
64407: NOT
64408: IFFALSE 64412
// exit ;
64410: GO 64868
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64412: LD_ADDR_VAR 0 5
64416: PUSH
64417: LD_INT 81
64419: PUSH
64420: LD_VAR 0 8
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PPUSH
64429: CALL_OW 69
64433: ST_TO_ADDR
// for i in result do
64434: LD_ADDR_VAR 0 4
64438: PUSH
64439: LD_VAR 0 3
64443: PUSH
64444: FOR_IN
64445: IFFALSE 64866
// begin tag := GetTag ( i ) + 1 ;
64447: LD_ADDR_VAR 0 9
64451: PUSH
64452: LD_VAR 0 4
64456: PPUSH
64457: CALL_OW 110
64461: PUSH
64462: LD_INT 1
64464: PLUS
64465: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64466: LD_ADDR_VAR 0 7
64470: PUSH
64471: LD_VAR 0 4
64475: PPUSH
64476: CALL_OW 250
64480: PPUSH
64481: LD_VAR 0 4
64485: PPUSH
64486: CALL_OW 251
64490: PPUSH
64491: LD_INT 6
64493: PPUSH
64494: CALL 64065 0 3
64498: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64499: LD_VAR 0 4
64503: PPUSH
64504: CALL_OW 247
64508: PUSH
64509: LD_INT 2
64511: EQUAL
64512: PUSH
64513: LD_VAR 0 7
64517: AND
64518: PUSH
64519: LD_VAR 0 4
64523: PPUSH
64524: CALL_OW 264
64528: PUSH
64529: LD_VAR 0 10
64533: IN
64534: NOT
64535: AND
64536: IFFALSE 64575
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64538: LD_VAR 0 4
64542: PPUSH
64543: LD_VAR 0 7
64547: PUSH
64548: LD_INT 1
64550: ARRAY
64551: PUSH
64552: LD_INT 1
64554: ARRAY
64555: PPUSH
64556: LD_VAR 0 7
64560: PUSH
64561: LD_INT 1
64563: ARRAY
64564: PUSH
64565: LD_INT 2
64567: ARRAY
64568: PPUSH
64569: CALL_OW 116
64573: GO 64864
// if path > tag then
64575: LD_VAR 0 2
64579: PUSH
64580: LD_VAR 0 9
64584: GREATER
64585: IFFALSE 64793
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
64587: LD_ADDR_VAR 0 6
64591: PUSH
64592: LD_VAR 0 5
64596: PPUSH
64597: LD_INT 91
64599: PUSH
64600: LD_VAR 0 4
64604: PUSH
64605: LD_INT 12
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: PPUSH
64613: CALL_OW 72
64617: ST_TO_ADDR
// if nearEnemy then
64618: LD_VAR 0 6
64622: IFFALSE 64691
// begin if GetWeapon ( i ) = ru_time_lapser then
64624: LD_VAR 0 4
64628: PPUSH
64629: CALL_OW 264
64633: PUSH
64634: LD_INT 49
64636: EQUAL
64637: IFFALSE 64665
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64639: LD_VAR 0 4
64643: PPUSH
64644: LD_VAR 0 6
64648: PPUSH
64649: LD_VAR 0 4
64653: PPUSH
64654: CALL_OW 74
64658: PPUSH
64659: CALL_OW 112
64663: GO 64689
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64665: LD_VAR 0 4
64669: PPUSH
64670: LD_VAR 0 6
64674: PPUSH
64675: LD_VAR 0 4
64679: PPUSH
64680: CALL_OW 74
64684: PPUSH
64685: CALL_OW 115
// end else
64689: GO 64791
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64691: LD_VAR 0 4
64695: PPUSH
64696: LD_VAR 0 2
64700: PUSH
64701: LD_VAR 0 9
64705: ARRAY
64706: PUSH
64707: LD_INT 1
64709: ARRAY
64710: PPUSH
64711: LD_VAR 0 2
64715: PUSH
64716: LD_VAR 0 9
64720: ARRAY
64721: PUSH
64722: LD_INT 2
64724: ARRAY
64725: PPUSH
64726: CALL_OW 297
64730: PUSH
64731: LD_INT 6
64733: GREATER
64734: IFFALSE 64777
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64736: LD_VAR 0 4
64740: PPUSH
64741: LD_VAR 0 2
64745: PUSH
64746: LD_VAR 0 9
64750: ARRAY
64751: PUSH
64752: LD_INT 1
64754: ARRAY
64755: PPUSH
64756: LD_VAR 0 2
64760: PUSH
64761: LD_VAR 0 9
64765: ARRAY
64766: PUSH
64767: LD_INT 2
64769: ARRAY
64770: PPUSH
64771: CALL_OW 114
64775: GO 64791
// SetTag ( i , tag ) ;
64777: LD_VAR 0 4
64781: PPUSH
64782: LD_VAR 0 9
64786: PPUSH
64787: CALL_OW 109
// end else
64791: GO 64864
// if enemy then
64793: LD_VAR 0 5
64797: IFFALSE 64864
// begin if GetWeapon ( i ) = ru_time_lapser then
64799: LD_VAR 0 4
64803: PPUSH
64804: CALL_OW 264
64808: PUSH
64809: LD_INT 49
64811: EQUAL
64812: IFFALSE 64840
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64814: LD_VAR 0 4
64818: PPUSH
64819: LD_VAR 0 5
64823: PPUSH
64824: LD_VAR 0 4
64828: PPUSH
64829: CALL_OW 74
64833: PPUSH
64834: CALL_OW 112
64838: GO 64864
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64840: LD_VAR 0 4
64844: PPUSH
64845: LD_VAR 0 5
64849: PPUSH
64850: LD_VAR 0 4
64854: PPUSH
64855: CALL_OW 74
64859: PPUSH
64860: CALL_OW 115
// end ; end ;
64864: GO 64444
64866: POP
64867: POP
// end ;
64868: LD_VAR 0 3
64872: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64873: LD_INT 0
64875: PPUSH
64876: PPUSH
64877: PPUSH
// if not unit or IsInUnit ( unit ) then
64878: LD_VAR 0 1
64882: NOT
64883: PUSH
64884: LD_VAR 0 1
64888: PPUSH
64889: CALL_OW 310
64893: OR
64894: IFFALSE 64898
// exit ;
64896: GO 64989
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64898: LD_ADDR_VAR 0 4
64902: PUSH
64903: LD_VAR 0 1
64907: PPUSH
64908: CALL_OW 250
64912: PPUSH
64913: LD_VAR 0 2
64917: PPUSH
64918: LD_INT 1
64920: PPUSH
64921: CALL_OW 272
64925: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64926: LD_ADDR_VAR 0 5
64930: PUSH
64931: LD_VAR 0 1
64935: PPUSH
64936: CALL_OW 251
64940: PPUSH
64941: LD_VAR 0 2
64945: PPUSH
64946: LD_INT 1
64948: PPUSH
64949: CALL_OW 273
64953: ST_TO_ADDR
// if ValidHex ( x , y ) then
64954: LD_VAR 0 4
64958: PPUSH
64959: LD_VAR 0 5
64963: PPUSH
64964: CALL_OW 488
64968: IFFALSE 64989
// ComTurnXY ( unit , x , y ) ;
64970: LD_VAR 0 1
64974: PPUSH
64975: LD_VAR 0 4
64979: PPUSH
64980: LD_VAR 0 5
64984: PPUSH
64985: CALL_OW 118
// end ;
64989: LD_VAR 0 3
64993: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64994: LD_INT 0
64996: PPUSH
64997: PPUSH
// result := false ;
64998: LD_ADDR_VAR 0 3
65002: PUSH
65003: LD_INT 0
65005: ST_TO_ADDR
// if not units then
65006: LD_VAR 0 2
65010: NOT
65011: IFFALSE 65015
// exit ;
65013: GO 65060
// for i in units do
65015: LD_ADDR_VAR 0 4
65019: PUSH
65020: LD_VAR 0 2
65024: PUSH
65025: FOR_IN
65026: IFFALSE 65058
// if See ( side , i ) then
65028: LD_VAR 0 1
65032: PPUSH
65033: LD_VAR 0 4
65037: PPUSH
65038: CALL_OW 292
65042: IFFALSE 65056
// begin result := true ;
65044: LD_ADDR_VAR 0 3
65048: PUSH
65049: LD_INT 1
65051: ST_TO_ADDR
// exit ;
65052: POP
65053: POP
65054: GO 65060
// end ;
65056: GO 65025
65058: POP
65059: POP
// end ;
65060: LD_VAR 0 3
65064: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65065: LD_INT 0
65067: PPUSH
65068: PPUSH
65069: PPUSH
65070: PPUSH
// if not unit or not points then
65071: LD_VAR 0 1
65075: NOT
65076: PUSH
65077: LD_VAR 0 2
65081: NOT
65082: OR
65083: IFFALSE 65087
// exit ;
65085: GO 65177
// dist := 99999 ;
65087: LD_ADDR_VAR 0 5
65091: PUSH
65092: LD_INT 99999
65094: ST_TO_ADDR
// for i in points do
65095: LD_ADDR_VAR 0 4
65099: PUSH
65100: LD_VAR 0 2
65104: PUSH
65105: FOR_IN
65106: IFFALSE 65175
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65108: LD_ADDR_VAR 0 6
65112: PUSH
65113: LD_VAR 0 1
65117: PPUSH
65118: LD_VAR 0 4
65122: PUSH
65123: LD_INT 1
65125: ARRAY
65126: PPUSH
65127: LD_VAR 0 4
65131: PUSH
65132: LD_INT 2
65134: ARRAY
65135: PPUSH
65136: CALL_OW 297
65140: ST_TO_ADDR
// if tmpDist < dist then
65141: LD_VAR 0 6
65145: PUSH
65146: LD_VAR 0 5
65150: LESS
65151: IFFALSE 65173
// begin result := i ;
65153: LD_ADDR_VAR 0 3
65157: PUSH
65158: LD_VAR 0 4
65162: ST_TO_ADDR
// dist := tmpDist ;
65163: LD_ADDR_VAR 0 5
65167: PUSH
65168: LD_VAR 0 6
65172: ST_TO_ADDR
// end ; end ;
65173: GO 65105
65175: POP
65176: POP
// end ;
65177: LD_VAR 0 3
65181: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65182: LD_INT 0
65184: PPUSH
// uc_side := side ;
65185: LD_ADDR_OWVAR 20
65189: PUSH
65190: LD_VAR 0 1
65194: ST_TO_ADDR
// uc_nation := 3 ;
65195: LD_ADDR_OWVAR 21
65199: PUSH
65200: LD_INT 3
65202: ST_TO_ADDR
// vc_chassis := 25 ;
65203: LD_ADDR_OWVAR 37
65207: PUSH
65208: LD_INT 25
65210: ST_TO_ADDR
// vc_engine := engine_siberite ;
65211: LD_ADDR_OWVAR 39
65215: PUSH
65216: LD_INT 3
65218: ST_TO_ADDR
// vc_control := control_computer ;
65219: LD_ADDR_OWVAR 38
65223: PUSH
65224: LD_INT 3
65226: ST_TO_ADDR
// vc_weapon := 59 ;
65227: LD_ADDR_OWVAR 40
65231: PUSH
65232: LD_INT 59
65234: ST_TO_ADDR
// result := CreateVehicle ;
65235: LD_ADDR_VAR 0 5
65239: PUSH
65240: CALL_OW 45
65244: ST_TO_ADDR
// SetDir ( result , d ) ;
65245: LD_VAR 0 5
65249: PPUSH
65250: LD_VAR 0 4
65254: PPUSH
65255: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65259: LD_VAR 0 5
65263: PPUSH
65264: LD_VAR 0 2
65268: PPUSH
65269: LD_VAR 0 3
65273: PPUSH
65274: LD_INT 0
65276: PPUSH
65277: CALL_OW 48
// end ;
65281: LD_VAR 0 5
65285: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65286: LD_INT 0
65288: PPUSH
65289: PPUSH
65290: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65291: LD_ADDR_VAR 0 2
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65314: LD_VAR 0 1
65318: NOT
65319: PUSH
65320: LD_VAR 0 1
65324: PPUSH
65325: CALL_OW 264
65329: PUSH
65330: LD_INT 12
65332: PUSH
65333: LD_INT 51
65335: PUSH
65336: LD_INT 32
65338: PUSH
65339: LD_EXP 94
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: IN
65350: NOT
65351: OR
65352: IFFALSE 65356
// exit ;
65354: GO 65454
// for i := 1 to 3 do
65356: LD_ADDR_VAR 0 3
65360: PUSH
65361: DOUBLE
65362: LD_INT 1
65364: DEC
65365: ST_TO_ADDR
65366: LD_INT 3
65368: PUSH
65369: FOR_TO
65370: IFFALSE 65452
// begin tmp := GetCargo ( cargo , i ) ;
65372: LD_ADDR_VAR 0 4
65376: PUSH
65377: LD_VAR 0 1
65381: PPUSH
65382: LD_VAR 0 3
65386: PPUSH
65387: CALL_OW 289
65391: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65392: LD_ADDR_VAR 0 2
65396: PUSH
65397: LD_VAR 0 2
65401: PPUSH
65402: LD_VAR 0 3
65406: PPUSH
65407: LD_VAR 0 4
65411: PPUSH
65412: CALL_OW 1
65416: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65417: LD_ADDR_VAR 0 2
65421: PUSH
65422: LD_VAR 0 2
65426: PPUSH
65427: LD_INT 4
65429: PPUSH
65430: LD_VAR 0 2
65434: PUSH
65435: LD_INT 4
65437: ARRAY
65438: PUSH
65439: LD_VAR 0 4
65443: PLUS
65444: PPUSH
65445: CALL_OW 1
65449: ST_TO_ADDR
// end ;
65450: GO 65369
65452: POP
65453: POP
// end ;
65454: LD_VAR 0 2
65458: RET
// export function Length ( array ) ; begin
65459: LD_INT 0
65461: PPUSH
// result := array + 0 ;
65462: LD_ADDR_VAR 0 2
65466: PUSH
65467: LD_VAR 0 1
65471: PUSH
65472: LD_INT 0
65474: PLUS
65475: ST_TO_ADDR
// end ;
65476: LD_VAR 0 2
65480: RET
