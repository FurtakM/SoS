// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 20
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 21
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 19
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 911 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 22
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2084 0 0
// PrepareHeroes ;
  82: CALL 1093 0 0
// PrepareRandoms ;
  86: CALL 3457 0 0
// Action ;
  90: CALL 5264 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: IFFALSE 205
 132: PUSH
 133: LD_INT 2
 135: PPUSH
 136: LD_INT 22
 138: PUSH
 139: LD_INT 1
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: PUSH
 146: LD_INT 21
 148: PUSH
 149: LD_INT 2
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: PUSH
 156: LD_INT 32
 158: PUSH
 159: LD_INT 3
 161: PUSH
 162: EMPTY
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 33
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: EMPTY
 173: LIST
 174: LIST
 175: PUSH
 176: LD_INT 3
 178: PUSH
 179: LD_INT 58
 181: PUSH
 182: EMPTY
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: PPUSH
 196: CALL_OW 70
 200: PUSH
 201: LD_INT 8
 203: EQUAL
 204: AND
 205: IFFALSE 808
 207: GO 209
 209: DISABLE
 210: LD_INT 0
 212: PPUSH
 213: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 21
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PUSH
 227: LD_INT 33
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: PUSH
 237: LD_INT 3
 239: PUSH
 240: LD_INT 58
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PPUSH
 255: CALL_OW 70
 259: IFFALSE 547
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 261: LD_ADDR_VAR 0 1
 265: PUSH
 266: LD_INT 2
 268: PPUSH
 269: LD_INT 21
 271: PUSH
 272: LD_INT 2
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 33
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: LD_INT 3
 291: PUSH
 292: LD_INT 58
 294: PUSH
 295: EMPTY
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 70
 311: PUSH
 312: FOR_IN
 313: IFFALSE 533
// begin cargoType := GetCargoType ( i ) ;
 315: LD_ADDR_VAR 0 2
 319: PUSH
 320: LD_VAR 0 1
 324: PPUSH
 325: CALL_OW 288
 329: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 330: LD_VAR 0 1
 334: PPUSH
 335: CALL_OW 264
 339: PUSH
 340: LD_INT 12
 342: EQUAL
 343: IFFALSE 450
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 345: LD_ADDR_EXP 20
 349: PUSH
 350: LD_EXP 20
 354: PPUSH
 355: LD_EXP 20
 359: PUSH
 360: LD_INT 1
 362: PLUS
 363: PPUSH
 364: LD_VAR 0 1
 368: PPUSH
 369: CALL_OW 248
 373: PUSH
 374: LD_VAR 0 1
 378: PPUSH
 379: CALL_OW 265
 383: PUSH
 384: LD_VAR 0 1
 388: PPUSH
 389: CALL_OW 262
 393: PUSH
 394: LD_VAR 0 1
 398: PPUSH
 399: CALL_OW 263
 403: PUSH
 404: LD_VAR 0 1
 408: PPUSH
 409: CALL_OW 264
 413: PUSH
 414: LD_VAR 0 2
 418: PUSH
 419: LD_VAR 0 1
 423: PPUSH
 424: LD_VAR 0 2
 428: PPUSH
 429: CALL_OW 289
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 1
 447: ST_TO_ADDR
 448: GO 531
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 450: LD_ADDR_EXP 20
 454: PUSH
 455: LD_EXP 20
 459: PPUSH
 460: LD_EXP 20
 464: PUSH
 465: LD_INT 1
 467: PLUS
 468: PPUSH
 469: LD_VAR 0 1
 473: PPUSH
 474: CALL_OW 248
 478: PUSH
 479: LD_VAR 0 1
 483: PPUSH
 484: CALL_OW 265
 488: PUSH
 489: LD_VAR 0 1
 493: PPUSH
 494: CALL_OW 262
 498: PUSH
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 263
 508: PUSH
 509: LD_VAR 0 1
 513: PPUSH
 514: CALL_OW 264
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: PPUSH
 526: CALL_OW 1
 530: ST_TO_ADDR
// end ;
 531: GO 312
 533: POP
 534: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 535: LD_EXP 20
 539: PPUSH
 540: LD_STRING 13_VehiclesIn13_1
 542: PPUSH
 543: CALL_OW 39
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 547: LD_EXP 24
 551: PPUSH
 552: LD_STRING 13c_others
 554: PPUSH
 555: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 559: LD_EXP 1
 563: PPUSH
 564: LD_STRING 13c_JMM
 566: PPUSH
 567: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 571: LD_EXP 16
 575: PPUSH
 576: LD_STRING 13c_Stevens
 578: PPUSH
 579: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
 583: LD_STRING enableBioCharacter(BIO_HUGH)
 585: PPUSH
 586: CALL_OW 559
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 590: LD_EXP 3
 594: PPUSH
 595: LD_STRING Lisa
 597: PPUSH
 598: LD_EXP 23
 602: PPUSH
 603: CALL 4253 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 607: LD_EXP 8
 611: PPUSH
 612: LD_STRING Brown
 614: PPUSH
 615: LD_EXP 23
 619: PPUSH
 620: CALL 4253 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 624: LD_EXP 4
 628: PPUSH
 629: LD_STRING Donaldson
 631: PPUSH
 632: LD_EXP 23
 636: PPUSH
 637: CALL 4253 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 641: LD_EXP 5
 645: PPUSH
 646: LD_STRING Bobby
 648: PPUSH
 649: LD_EXP 23
 653: PPUSH
 654: CALL 4253 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 658: LD_EXP 6
 662: PPUSH
 663: LD_STRING Cyrus
 665: PPUSH
 666: LD_EXP 23
 670: PPUSH
 671: CALL 4253 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 675: LD_EXP 7
 679: PPUSH
 680: LD_STRING Denis
 682: PPUSH
 683: LD_EXP 23
 687: PPUSH
 688: CALL 4253 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 692: LD_EXP 9
 696: PPUSH
 697: LD_STRING Gladstone
 699: PPUSH
 700: LD_EXP 23
 704: PPUSH
 705: CALL 4253 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 709: LD_EXP 10
 713: PPUSH
 714: LD_STRING Houten
 716: PPUSH
 717: LD_EXP 23
 721: PPUSH
 722: CALL 4253 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 726: LD_EXP 11
 730: PPUSH
 731: LD_STRING Cornel
 733: PPUSH
 734: LD_EXP 23
 738: PPUSH
 739: CALL 4253 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 743: LD_EXP 12
 747: PPUSH
 748: LD_STRING Gary
 750: PPUSH
 751: LD_EXP 23
 755: PPUSH
 756: CALL 4253 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 760: LD_EXP 13
 764: PPUSH
 765: LD_STRING Frank
 767: PPUSH
 768: LD_EXP 23
 772: PPUSH
 773: CALL 4253 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 777: LD_EXP 14
 781: PPUSH
 782: LD_STRING Kikuchi
 784: PPUSH
 785: LD_EXP 23
 789: PPUSH
 790: CALL 4253 0 3
// SaveCargos ;
 794: CALL 811 0 0
// ChangeMap ( 13 , %_cont ) ;
 798: LD_INT 13
 800: PPUSH
 801: LD_STRING %_cont
 803: PPUSH
 804: CALL_OW 340
// end ;
 808: PPOPN 2
 810: END
// export function SaveCargos ; var i ; begin
 811: LD_INT 0
 813: PPUSH
 814: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 815: LD_ADDR_VAR 0 2
 819: PUSH
 820: LD_INT 2
 822: PPUSH
 823: LD_INT 22
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 33
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: LD_INT 34
 845: PUSH
 846: LD_INT 12
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: PPUSH
 858: CALL_OW 70
 862: PUSH
 863: FOR_IN
 864: IFFALSE 892
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 866: LD_ADDR_EXP 21
 870: PUSH
 871: LD_EXP 21
 875: PUSH
 876: LD_VAR 0 2
 880: PPUSH
 881: CALL 70246 0 1
 885: PUSH
 886: EMPTY
 887: LIST
 888: ADD
 889: ST_TO_ADDR
 890: GO 863
 892: POP
 893: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 894: LD_EXP 21
 898: PPUSH
 899: LD_STRING 13_ResourcesInCargo13_1
 901: PPUSH
 902: CALL_OW 39
// end ;
 906: LD_VAR 0 1
 910: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
 917: PPUSH
 918: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 919: LD_ADDR_VAR 0 2
 923: PUSH
 924: LD_STRING 10_EpsilonEnv
 926: PPUSH
 927: EMPTY
 928: PPUSH
 929: CALL_OW 30
 933: ST_TO_ADDR
// if not tmp then
 934: LD_VAR 0 2
 938: NOT
 939: IFFALSE 943
// exit ;
 941: GO 1088
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_INT 1
 950: PPUSH
 951: CALL_OW 353
 955: ST_TO_ADDR
// if not list then
 956: LD_VAR 0 3
 960: NOT
 961: IFFALSE 965
// exit ;
 963: GO 1088
// for i in list do
 965: LD_ADDR_VAR 0 4
 969: PUSH
 970: LD_VAR 0 3
 974: PUSH
 975: FOR_IN
 976: IFFALSE 1086
// begin exist := false ;
 978: LD_ADDR_VAR 0 6
 982: PUSH
 983: LD_INT 0
 985: ST_TO_ADDR
// for j in tmp do
 986: LD_ADDR_VAR 0 5
 990: PUSH
 991: LD_VAR 0 2
 995: PUSH
 996: FOR_IN
 997: IFFALSE 1053
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 999: LD_VAR 0 4
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: PUSH
1008: LD_VAR 0 5
1012: PUSH
1013: LD_INT 1
1015: ARRAY
1016: EQUAL
1017: IFFALSE 1039
1019: PUSH
1020: LD_VAR 0 4
1024: PUSH
1025: LD_INT 2
1027: ARRAY
1028: PUSH
1029: LD_VAR 0 5
1033: PUSH
1034: LD_INT 2
1036: ARRAY
1037: EQUAL
1038: AND
1039: IFFALSE 1051
// begin exist := true ;
1041: LD_ADDR_VAR 0 6
1045: PUSH
1046: LD_INT 1
1048: ST_TO_ADDR
// break ;
1049: GO 1053
// end ;
1051: GO 996
1053: POP
1054: POP
// if not exist then
1055: LD_VAR 0 6
1059: NOT
1060: IFFALSE 1084
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1062: LD_VAR 0 4
1066: PUSH
1067: LD_INT 1
1069: ARRAY
1070: PPUSH
1071: LD_VAR 0 4
1075: PUSH
1076: LD_INT 2
1078: ARRAY
1079: PPUSH
1080: CALL_OW 347
// end ;
1084: GO 975
1086: POP
1087: POP
// end ; end_of_file
1088: LD_VAR 0 1
1092: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1093: LD_INT 0
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
1099: PPUSH
1100: PPUSH
1101: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: LD_INT 22
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: LD_INT 23
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 2
1129: PUSH
1130: LD_INT 30
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 30
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PPUSH
1160: CALL_OW 69
1164: ST_TO_ADDR
// if tmp then
1165: LD_VAR 0 4
1169: IFFALSE 1291
// begin x := GetX ( tmp [ 1 ] ) ;
1171: LD_ADDR_VAR 0 5
1175: PUSH
1176: LD_VAR 0 4
1180: PUSH
1181: LD_INT 1
1183: ARRAY
1184: PPUSH
1185: CALL_OW 250
1189: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_VAR 0 4
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1209: LD_VAR 0 4
1213: PUSH
1214: LD_INT 1
1216: ARRAY
1217: PPUSH
1218: LD_STRING epsilon
1220: PPUSH
1221: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1225: LD_ADDR_VAR 0 7
1229: PUSH
1230: LD_VAR 0 4
1234: PUSH
1235: LD_INT 1
1237: ARRAY
1238: PPUSH
1239: CALL_OW 274
1243: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1244: LD_VAR 0 7
1248: PPUSH
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 3000
1254: PPUSH
1255: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1259: LD_VAR 0 7
1263: PPUSH
1264: LD_INT 2
1266: PPUSH
1267: LD_INT 500
1269: PPUSH
1270: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1274: LD_VAR 0 7
1278: PPUSH
1279: LD_INT 3
1281: PPUSH
1282: LD_INT 200
1284: PPUSH
1285: CALL_OW 277
// end else
1289: GO 1307
// begin x := 104 ;
1291: LD_ADDR_VAR 0 5
1295: PUSH
1296: LD_INT 104
1298: ST_TO_ADDR
// y := 32 ;
1299: LD_ADDR_VAR 0 6
1303: PUSH
1304: LD_INT 32
1306: ST_TO_ADDR
// end ; uc_side := 1 ;
1307: LD_ADDR_OWVAR 20
1311: PUSH
1312: LD_INT 1
1314: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1315: LD_ADDR_EXP 1
1319: PUSH
1320: LD_STRING JMM
1322: PPUSH
1323: LD_INT 1
1325: PPUSH
1326: CALL 3727 0 2
1330: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1331: LD_ADDR_EXP 3
1335: PUSH
1336: LD_STRING Lisa
1338: PPUSH
1339: LD_INT 1
1341: PPUSH
1342: CALL 3727 0 2
1346: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1347: LD_ADDR_EXP 4
1351: PUSH
1352: LD_STRING Donaldson
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: CALL 3727 0 2
1362: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1363: LD_ADDR_EXP 5
1367: PUSH
1368: LD_STRING Bobby
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: CALL 3727 0 2
1378: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1379: LD_ADDR_EXP 6
1383: PUSH
1384: LD_STRING Cyrus
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 3727 0 2
1394: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1395: LD_ADDR_EXP 7
1399: PUSH
1400: LD_STRING Denis
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: CALL 3727 0 2
1410: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1411: LD_ADDR_EXP 8
1415: PUSH
1416: LD_STRING Brown
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: CALL 3727 0 2
1426: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1427: LD_ADDR_EXP 9
1431: PUSH
1432: LD_STRING Gladstone
1434: PPUSH
1435: LD_INT 1
1437: PPUSH
1438: CALL 3727 0 2
1442: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1443: LD_ADDR_EXP 10
1447: PUSH
1448: LD_STRING Houten
1450: PPUSH
1451: LD_INT 1
1453: PPUSH
1454: CALL 3727 0 2
1458: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1459: LD_ADDR_EXP 11
1463: PUSH
1464: LD_STRING Cornell
1466: PPUSH
1467: LD_INT 1
1469: PPUSH
1470: CALL 3727 0 2
1474: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1475: LD_ADDR_EXP 12
1479: PUSH
1480: LD_STRING Gary
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: CALL 3727 0 2
1490: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1491: LD_ADDR_EXP 13
1495: PUSH
1496: LD_STRING Frank
1498: PPUSH
1499: LD_INT 1
1501: PPUSH
1502: CALL 3727 0 2
1506: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1507: LD_ADDR_EXP 14
1511: PUSH
1512: LD_STRING Kikuchi
1514: PPUSH
1515: LD_INT 1
1517: PPUSH
1518: CALL 3727 0 2
1522: ST_TO_ADDR
// DeltaDoctor := PrepareUnit2 ( DeltaDoctor , true ) ;
1523: LD_ADDR_EXP 15
1527: PUSH
1528: LD_STRING DeltaDoctor
1530: PPUSH
1531: LD_INT 1
1533: PPUSH
1534: CALL 3727 0 2
1538: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1539: LD_ADDR_EXP 16
1543: PUSH
1544: LD_STRING Stevens
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: CALL 3727 0 2
1554: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1555: LD_ADDR_EXP 2
1559: PUSH
1560: LD_STRING Powell
1562: PPUSH
1563: LD_INT 0
1565: PPUSH
1566: CALL 3727 0 2
1570: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1571: LD_EXP 1
1575: PPUSH
1576: LD_VAR 0 5
1580: PPUSH
1581: LD_VAR 0 6
1585: PPUSH
1586: LD_INT 4
1588: PPUSH
1589: LD_INT 0
1591: PPUSH
1592: CALL 3900 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1596: LD_EXP 16
1600: PPUSH
1601: LD_VAR 0 5
1605: PPUSH
1606: LD_VAR 0 6
1610: PPUSH
1611: LD_INT 4
1613: PPUSH
1614: LD_INT 0
1616: PPUSH
1617: CALL 3900 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1621: LD_EXP 3
1625: PPUSH
1626: LD_VAR 0 5
1630: PPUSH
1631: LD_VAR 0 6
1635: PPUSH
1636: LD_INT 35
1638: PPUSH
1639: LD_INT 0
1641: PPUSH
1642: CALL 3900 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1646: LD_EXP 4
1650: PPUSH
1651: LD_VAR 0 5
1655: PPUSH
1656: LD_VAR 0 6
1660: PPUSH
1661: LD_INT 35
1663: PPUSH
1664: LD_INT 0
1666: PPUSH
1667: CALL 3900 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1671: LD_EXP 5
1675: PPUSH
1676: LD_VAR 0 5
1680: PPUSH
1681: LD_VAR 0 6
1685: PPUSH
1686: LD_INT 35
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL 3900 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1696: LD_EXP 6
1700: PPUSH
1701: LD_VAR 0 5
1705: PPUSH
1706: LD_VAR 0 6
1710: PPUSH
1711: LD_INT 35
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL 3900 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1721: LD_EXP 7
1725: PPUSH
1726: LD_VAR 0 5
1730: PPUSH
1731: LD_VAR 0 6
1735: PPUSH
1736: LD_INT 35
1738: PPUSH
1739: LD_INT 0
1741: PPUSH
1742: CALL 3900 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1746: LD_EXP 8
1750: PPUSH
1751: LD_VAR 0 5
1755: PPUSH
1756: LD_VAR 0 6
1760: PPUSH
1761: LD_INT 35
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: CALL 3900 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1771: LD_EXP 9
1775: PPUSH
1776: LD_VAR 0 5
1780: PPUSH
1781: LD_VAR 0 6
1785: PPUSH
1786: LD_INT 35
1788: PPUSH
1789: LD_INT 0
1791: PPUSH
1792: CALL 3900 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1796: LD_EXP 10
1800: PPUSH
1801: LD_VAR 0 5
1805: PPUSH
1806: LD_VAR 0 6
1810: PPUSH
1811: LD_INT 35
1813: PPUSH
1814: LD_INT 0
1816: PPUSH
1817: CALL 3900 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1821: LD_EXP 11
1825: PPUSH
1826: LD_VAR 0 5
1830: PPUSH
1831: LD_VAR 0 6
1835: PPUSH
1836: LD_INT 35
1838: PPUSH
1839: LD_INT 0
1841: PPUSH
1842: CALL 3900 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1846: LD_EXP 12
1850: PPUSH
1851: LD_VAR 0 5
1855: PPUSH
1856: LD_VAR 0 6
1860: PPUSH
1861: LD_INT 35
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL 3900 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1871: LD_EXP 13
1875: PPUSH
1876: LD_VAR 0 5
1880: PPUSH
1881: LD_VAR 0 6
1885: PPUSH
1886: LD_INT 35
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL 3900 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1896: LD_EXP 14
1900: PPUSH
1901: LD_VAR 0 5
1905: PPUSH
1906: LD_VAR 0 6
1910: PPUSH
1911: LD_INT 35
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL 3900 0 5
// SetClass ( JMM , 1 ) ;
1921: LD_EXP 1
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1933: LD_ADDR_EXP 17
1937: PUSH
1938: LD_STRING 12_other_survivors
1940: PPUSH
1941: CALL_OW 31
1945: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1946: LD_ADDR_EXP 18
1950: PUSH
1951: LD_STRING 12_others
1953: PPUSH
1954: CALL_OW 31
1958: ST_TO_ADDR
// for i in others11 do
1959: LD_ADDR_VAR 0 2
1963: PUSH
1964: LD_EXP 18
1968: PUSH
1969: FOR_IN
1970: IFFALSE 2017
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1972: LD_VAR 0 2
1976: PPUSH
1977: LD_VAR 0 4
1981: PUSH
1982: LD_INT 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 250
1990: PPUSH
1991: LD_VAR 0 4
1995: PUSH
1996: LD_INT 1
1998: ARRAY
1999: PPUSH
2000: CALL_OW 251
2004: PPUSH
2005: LD_INT 15
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL 3900 0 5
2015: GO 1969
2017: POP
2018: POP
// for i in others12 do
2019: LD_ADDR_VAR 0 2
2023: PUSH
2024: LD_EXP 17
2028: PUSH
2029: FOR_IN
2030: IFFALSE 2077
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2032: LD_VAR 0 2
2036: PPUSH
2037: LD_VAR 0 4
2041: PUSH
2042: LD_INT 1
2044: ARRAY
2045: PPUSH
2046: CALL_OW 250
2050: PPUSH
2051: LD_VAR 0 4
2055: PUSH
2056: LD_INT 1
2058: ARRAY
2059: PPUSH
2060: CALL_OW 251
2064: PPUSH
2065: LD_INT 15
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 3900 0 5
2075: GO 2029
2077: POP
2078: POP
// end ;
2079: LD_VAR 0 1
2083: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2084: LD_INT 0
2086: PPUSH
2087: PPUSH
2088: PPUSH
2089: PPUSH
2090: PPUSH
2091: PPUSH
2092: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2093: LD_INT 113
2095: PPUSH
2096: LD_INT 50
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 441
// SetResourceVisibility ( 99 , 19 , 1 ) ;
2106: LD_INT 99
2108: PPUSH
2109: LD_INT 19
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2119: LD_INT 43
2121: PPUSH
2122: LD_INT 79
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2132: LD_INT 43
2134: PPUSH
2135: LD_INT 68
2137: PPUSH
2138: LD_INT 1
2140: PPUSH
2141: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2145: LD_INT 99
2147: PPUSH
2148: LD_INT 114
2150: PPUSH
2151: LD_INT 1
2153: PPUSH
2154: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2158: LD_INT 103
2160: PPUSH
2161: LD_INT 114
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2171: LD_INT 152
2173: PPUSH
2174: LD_INT 85
2176: PPUSH
2177: LD_INT 1
2179: PPUSH
2180: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2184: LD_INT 156
2186: PPUSH
2187: LD_INT 92
2189: PPUSH
2190: LD_INT 1
2192: PPUSH
2193: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2197: LD_ADDR_VAR 0 2
2201: PUSH
2202: LD_STRING 10_EpsilonBase
2204: PPUSH
2205: EMPTY
2206: PPUSH
2207: CALL_OW 30
2211: ST_TO_ADDR
// if not blist then
2212: LD_VAR 0 2
2216: NOT
2217: IFFALSE 2229
// begin baseCorrect := 0 ;
2219: LD_ADDR_VAR 0 6
2223: PUSH
2224: LD_INT 0
2226: ST_TO_ADDR
// end else
2227: GO 2286
// begin for i in blist do
2229: LD_ADDR_VAR 0 3
2233: PUSH
2234: LD_VAR 0 2
2238: PUSH
2239: FOR_IN
2240: IFFALSE 2284
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2242: LD_VAR 0 3
2246: PUSH
2247: LD_INT 1
2249: ARRAY
2250: PUSH
2251: LD_INT 0
2253: EQUAL
2254: IFTRUE 2270
2256: PUSH
2257: LD_VAR 0 3
2261: PUSH
2262: LD_INT 1
2264: ARRAY
2265: PUSH
2266: LD_INT 1
2268: EQUAL
2269: OR
2270: IFFALSE 2282
// begin baseCorrect := 1 ;
2272: LD_ADDR_VAR 0 6
2276: PUSH
2277: LD_INT 1
2279: ST_TO_ADDR
// break ;
2280: GO 2284
// end ;
2282: GO 2239
2284: POP
2285: POP
// end ; if baseCorrect = 0 then
2286: LD_VAR 0 6
2290: PUSH
2291: LD_INT 0
2293: EQUAL
2294: IFFALSE 3001
// begin uc_side := 1 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// uc_nation := 1 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 1
2311: ST_TO_ADDR
// bc_level := 10 ;
2312: LD_ADDR_OWVAR 43
2316: PUSH
2317: LD_INT 10
2319: ST_TO_ADDR
// bc_type := b_warehouse ;
2320: LD_ADDR_OWVAR 42
2324: PUSH
2325: LD_INT 1
2327: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2328: LD_INT 99
2330: PPUSH
2331: LD_INT 24
2333: PPUSH
2334: LD_INT 2
2336: PPUSH
2337: CALL_OW 47
// bc_type := b_bunker ;
2341: LD_ADDR_OWVAR 42
2345: PUSH
2346: LD_INT 32
2348: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2349: LD_ADDR_VAR 0 7
2353: PUSH
2354: LD_INT 124
2356: PPUSH
2357: LD_INT 42
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: CALL_OW 47
2367: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2368: LD_VAR 0 7
2372: PPUSH
2373: LD_INT 4
2375: PUSH
2376: LD_INT 5
2378: PUSH
2379: LD_INT 6
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: PUSH
2387: LD_INT 1
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: CALL_OW 12
2397: ARRAY
2398: PPUSH
2399: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2403: LD_ADDR_VAR 0 7
2407: PUSH
2408: LD_INT 111
2410: PPUSH
2411: LD_INT 16
2413: PPUSH
2414: LD_INT 4
2416: PPUSH
2417: CALL_OW 47
2421: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2422: LD_VAR 0 7
2426: PPUSH
2427: LD_INT 4
2429: PUSH
2430: LD_INT 5
2432: PUSH
2433: LD_INT 6
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 1
2443: PPUSH
2444: LD_INT 3
2446: PPUSH
2447: CALL_OW 12
2451: ARRAY
2452: PPUSH
2453: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2457: LD_ADDR_VAR 0 7
2461: PUSH
2462: LD_INT 113
2464: PPUSH
2465: LD_INT 21
2467: PPUSH
2468: LD_INT 4
2470: PPUSH
2471: CALL_OW 47
2475: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2476: LD_VAR 0 7
2480: PPUSH
2481: LD_INT 4
2483: PUSH
2484: LD_INT 5
2486: PUSH
2487: LD_INT 6
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: LIST
2494: PUSH
2495: LD_INT 1
2497: PPUSH
2498: LD_INT 3
2500: PPUSH
2501: CALL_OW 12
2505: ARRAY
2506: PPUSH
2507: CALL_OW 431
// bc_type := 33 ;
2511: LD_ADDR_OWVAR 42
2515: PUSH
2516: LD_INT 33
2518: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2519: LD_ADDR_VAR 0 7
2523: PUSH
2524: LD_INT 95
2526: PPUSH
2527: LD_INT 41
2529: PPUSH
2530: LD_INT 1
2532: PPUSH
2533: CALL_OW 47
2537: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2538: LD_VAR 0 7
2542: PPUSH
2543: LD_INT 4
2545: PUSH
2546: LD_INT 5
2548: PUSH
2549: LD_INT 6
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 1
2559: PPUSH
2560: LD_INT 3
2562: PPUSH
2563: CALL_OW 12
2567: ARRAY
2568: PPUSH
2569: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2573: LD_ADDR_VAR 0 7
2577: PUSH
2578: LD_INT 97
2580: PPUSH
2581: LD_INT 48
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 47
2591: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2592: LD_VAR 0 7
2596: PPUSH
2597: LD_INT 4
2599: PUSH
2600: LD_INT 5
2602: PUSH
2603: LD_INT 6
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 1
2613: PPUSH
2614: LD_INT 3
2616: PPUSH
2617: CALL_OW 12
2621: ARRAY
2622: PPUSH
2623: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2627: LD_ADDR_VAR 0 7
2631: PUSH
2632: LD_INT 86
2634: PPUSH
2635: LD_INT 19
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: CALL_OW 47
2645: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2646: LD_VAR 0 7
2650: PPUSH
2651: LD_INT 4
2653: PUSH
2654: LD_INT 5
2656: PUSH
2657: LD_INT 6
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 1
2667: PPUSH
2668: LD_INT 3
2670: PPUSH
2671: CALL_OW 12
2675: ARRAY
2676: PPUSH
2677: CALL_OW 431
// bc_type := 30 ;
2681: LD_ADDR_OWVAR 42
2685: PUSH
2686: LD_INT 30
2688: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2689: LD_INT 104
2691: PPUSH
2692: LD_INT 24
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: CALL_OW 47
// bc_type := 29 ;
2702: LD_ADDR_OWVAR 42
2706: PUSH
2707: LD_INT 29
2709: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2710: LD_INT 113
2712: PPUSH
2713: LD_INT 50
2715: PPUSH
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 47
// bc_type := 27 ;
2723: LD_ADDR_OWVAR 42
2727: PUSH
2728: LD_INT 27
2730: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2731: LD_INT 98
2733: PPUSH
2734: LD_INT 26
2736: PPUSH
2737: LD_INT 2
2739: PPUSH
2740: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2744: LD_INT 95
2746: PPUSH
2747: LD_INT 23
2749: PPUSH
2750: LD_INT 3
2752: PPUSH
2753: CALL_OW 47
// bc_type := 28 ;
2757: LD_ADDR_OWVAR 42
2761: PUSH
2762: LD_INT 28
2764: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2765: LD_INT 107
2767: PPUSH
2768: LD_INT 32
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: CALL_OW 47
// bc_type := 3 ;
2778: LD_ADDR_OWVAR 42
2782: PUSH
2783: LD_INT 3
2785: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2786: LD_INT 106
2788: PPUSH
2789: LD_INT 42
2791: PPUSH
2792: LD_INT 0
2794: PPUSH
2795: CALL_OW 47
// bc_type := 16 ;
2799: LD_ADDR_OWVAR 42
2803: PUSH
2804: LD_INT 16
2806: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2807: LD_INT 109
2809: PPUSH
2810: LD_INT 45
2812: PPUSH
2813: LD_INT 5
2815: PPUSH
2816: CALL_OW 47
// bc_type := 17 ;
2820: LD_ADDR_OWVAR 42
2824: PUSH
2825: LD_INT 17
2827: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2828: LD_INT 106
2830: PPUSH
2831: LD_INT 46
2833: PPUSH
2834: LD_INT 0
2836: PPUSH
2837: CALL_OW 47
// bc_type := 19 ;
2841: LD_ADDR_OWVAR 42
2845: PUSH
2846: LD_INT 19
2848: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2849: LD_INT 103
2851: PPUSH
2852: LD_INT 42
2854: PPUSH
2855: LD_INT 1
2857: PPUSH
2858: CALL_OW 47
// bc_type := 21 ;
2862: LD_ADDR_OWVAR 42
2866: PUSH
2867: LD_INT 21
2869: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2870: LD_INT 110
2872: PPUSH
2873: LD_INT 42
2875: PPUSH
2876: LD_INT 4
2878: PPUSH
2879: CALL_OW 47
// bc_type := 5 ;
2883: LD_ADDR_OWVAR 42
2887: PUSH
2888: LD_INT 5
2890: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2891: LD_INT 114
2893: PPUSH
2894: LD_INT 55
2896: PPUSH
2897: LD_INT 5
2899: PPUSH
2900: CALL_OW 47
// bc_type := 36 ;
2904: LD_ADDR_OWVAR 42
2908: PUSH
2909: LD_INT 36
2911: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2912: LD_INT 96
2914: PPUSH
2915: LD_INT 28
2917: PPUSH
2918: LD_INT 2
2920: PPUSH
2921: CALL_OW 47
// bc_type := b_lab_full ;
2925: LD_ADDR_OWVAR 42
2929: PUSH
2930: LD_INT 8
2932: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2933: LD_ADDR_OWVAR 44
2937: PUSH
2938: LD_INT 15
2940: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2941: LD_ADDR_OWVAR 45
2945: PUSH
2946: LD_INT 11
2948: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2949: LD_INT 116
2951: PPUSH
2952: LD_INT 38
2954: PPUSH
2955: LD_INT 4
2957: PPUSH
2958: CALL_OW 47
// bc_type := b_lab_full ;
2962: LD_ADDR_OWVAR 42
2966: PUSH
2967: LD_INT 8
2969: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2970: LD_ADDR_OWVAR 44
2974: PUSH
2975: LD_INT 10
2977: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2978: LD_ADDR_OWVAR 45
2982: PUSH
2983: LD_INT 12
2985: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2986: LD_INT 112
2988: PPUSH
2989: LD_INT 29
2991: PPUSH
2992: LD_INT 4
2994: PPUSH
2995: CALL_OW 47
// end else
2999: GO 3249
// begin uc_side := 1 ;
3001: LD_ADDR_OWVAR 20
3005: PUSH
3006: LD_INT 1
3008: ST_TO_ADDR
// for i in blist do
3009: LD_ADDR_VAR 0 3
3013: PUSH
3014: LD_VAR 0 2
3018: PUSH
3019: FOR_IN
3020: IFFALSE 3247
// begin InitBc ;
3022: CALL_OW 21
// uc_nation := i [ 6 ] ;
3026: LD_ADDR_OWVAR 21
3030: PUSH
3031: LD_VAR 0 3
3035: PUSH
3036: LD_INT 6
3038: ARRAY
3039: ST_TO_ADDR
// bc_type := i [ 1 ] ;
3040: LD_ADDR_OWVAR 42
3044: PUSH
3045: LD_VAR 0 3
3049: PUSH
3050: LD_INT 1
3052: ARRAY
3053: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3054: LD_ADDR_OWVAR 43
3058: PUSH
3059: LD_VAR 0 3
3063: PUSH
3064: LD_INT 5
3066: ARRAY
3067: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3068: LD_VAR 0 3
3072: PUSH
3073: LD_INT 1
3075: ARRAY
3076: PUSH
3077: LD_INT 7
3079: PUSH
3080: LD_INT 8
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: IN
3087: IFFALSE 3117
// begin bc_kind1 := i [ 7 ] ;
3089: LD_ADDR_OWVAR 44
3093: PUSH
3094: LD_VAR 0 3
3098: PUSH
3099: LD_INT 7
3101: ARRAY
3102: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3103: LD_ADDR_OWVAR 45
3107: PUSH
3108: LD_VAR 0 3
3112: PUSH
3113: LD_INT 8
3115: ARRAY
3116: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3117: LD_ADDR_VAR 0 4
3121: PUSH
3122: LD_VAR 0 3
3126: PUSH
3127: LD_INT 2
3129: ARRAY
3130: PPUSH
3131: LD_VAR 0 3
3135: PUSH
3136: LD_INT 3
3138: ARRAY
3139: PPUSH
3140: LD_VAR 0 3
3144: PUSH
3145: LD_INT 4
3147: ARRAY
3148: PPUSH
3149: CALL_OW 47
3153: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3154: LD_VAR 0 4
3158: PPUSH
3159: CALL_OW 266
3163: PUSH
3164: LD_INT 32
3166: PUSH
3167: LD_INT 33
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: IN
3174: IFFALSE 3245
// if i [ 7 ] then
3176: LD_VAR 0 3
3180: PUSH
3181: LD_INT 7
3183: ARRAY
3184: IFFALSE 3206
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3186: LD_VAR 0 4
3190: PPUSH
3191: LD_VAR 0 3
3195: PUSH
3196: LD_INT 7
3198: ARRAY
3199: PPUSH
3200: CALL_OW 431
3204: GO 3245
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3206: LD_VAR 0 4
3210: PPUSH
3211: LD_INT 11
3213: PUSH
3214: LD_INT 7
3216: PUSH
3217: LD_INT 4
3219: PUSH
3220: LD_INT 5
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 1
3231: PPUSH
3232: LD_INT 4
3234: PPUSH
3235: CALL_OW 12
3239: ARRAY
3240: PPUSH
3241: CALL_OW 431
// end ;
3245: GO 3019
3247: POP
3248: POP
// end ; uc_side := 1 ;
3249: LD_ADDR_OWVAR 20
3253: PUSH
3254: LD_INT 1
3256: ST_TO_ADDR
// uc_nation := 1 ;
3257: LD_ADDR_OWVAR 21
3261: PUSH
3262: LD_INT 1
3264: ST_TO_ADDR
// for i := 1 to 8 do
3265: LD_ADDR_VAR 0 3
3269: PUSH
3270: DOUBLE
3271: LD_INT 1
3273: DEC
3274: ST_TO_ADDR
3275: LD_INT 8
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3450
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3281: LD_ADDR_OWVAR 37
3285: PUSH
3286: LD_INT 5
3288: PUSH
3289: LD_INT 5
3291: PUSH
3292: LD_INT 3
3294: PUSH
3295: LD_INT 4
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 1
3306: PPUSH
3307: LD_INT 4
3309: PPUSH
3310: CALL_OW 12
3314: ARRAY
3315: ST_TO_ADDR
// vc_engine := engine_siberite ;
3316: LD_ADDR_OWVAR 39
3320: PUSH
3321: LD_INT 3
3323: ST_TO_ADDR
// vc_control := control_manual ;
3324: LD_ADDR_OWVAR 38
3328: PUSH
3329: LD_INT 1
3331: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3332: LD_OWVAR 37
3336: PUSH
3337: LD_INT 4
3339: EQUAL
3340: IFFALSE 3352
// vc_weapon := us_heavy_gun else
3342: LD_ADDR_OWVAR 40
3346: PUSH
3347: LD_INT 6
3349: ST_TO_ADDR
3350: GO 3397
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3352: LD_ADDR_OWVAR 40
3356: PUSH
3357: LD_INT 7
3359: PUSH
3360: LD_INT 9
3362: PUSH
3363: LD_INT 12
3365: PUSH
3366: LD_INT 13
3368: PUSH
3369: LD_INT 9
3371: PUSH
3372: LD_INT 9
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: PUSH
3383: LD_VAR 0 3
3387: PUSH
3388: LD_INT 6
3390: MOD
3391: PUSH
3392: LD_INT 1
3394: PLUS
3395: ARRAY
3396: ST_TO_ADDR
// un := CreateVehicle ;
3397: LD_ADDR_VAR 0 5
3401: PUSH
3402: CALL_OW 45
3406: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3407: LD_VAR 0 5
3411: PPUSH
3412: LD_INT 0
3414: PPUSH
3415: LD_INT 5
3417: PPUSH
3418: CALL_OW 12
3422: PPUSH
3423: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3427: LD_VAR 0 5
3431: PPUSH
3432: LD_INT 78
3434: PPUSH
3435: LD_INT 31
3437: PPUSH
3438: LD_INT 8
3440: PPUSH
3441: LD_INT 0
3443: PPUSH
3444: CALL_OW 50
// end ;
3448: GO 3278
3450: POP
3451: POP
// end ;
3452: LD_VAR 0 1
3456: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3457: LD_INT 0
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3463: LD_INT 22
3465: PUSH
3466: LD_INT 1
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 21
3475: PUSH
3476: LD_INT 1
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PPUSH
3487: CALL_OW 69
3491: PUSH
3492: LD_INT 6
3494: LESS
3495: IFFALSE 3722
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3497: LD_ADDR_VAR 0 4
3501: PUSH
3502: LD_INT 22
3504: PUSH
3505: LD_INT 1
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: PUSH
3512: LD_INT 2
3514: PUSH
3515: LD_INT 30
3517: PUSH
3518: LD_INT 0
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: LD_INT 30
3527: PUSH
3528: LD_INT 1
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PPUSH
3544: CALL_OW 69
3548: ST_TO_ADDR
// uc_side := 1 ;
3549: LD_ADDR_OWVAR 20
3553: PUSH
3554: LD_INT 1
3556: ST_TO_ADDR
// uc_nation := 1 ;
3557: LD_ADDR_OWVAR 21
3561: PUSH
3562: LD_INT 1
3564: ST_TO_ADDR
// for i := 1 to 6 do
3565: LD_ADDR_VAR 0 2
3569: PUSH
3570: DOUBLE
3571: LD_INT 1
3573: DEC
3574: ST_TO_ADDR
3575: LD_INT 6
3577: PUSH
3578: FOR_TO
3579: IFFALSE 3720
// begin hc_gallery :=  ;
3581: LD_ADDR_OWVAR 33
3585: PUSH
3586: LD_STRING 
3588: ST_TO_ADDR
// hc_name :=  ;
3589: LD_ADDR_OWVAR 26
3593: PUSH
3594: LD_STRING 
3596: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3597: LD_INT 0
3599: PPUSH
3600: LD_INT 1
3602: PUSH
3603: LD_INT 2
3605: PUSH
3606: LD_INT 3
3608: PUSH
3609: LD_INT 4
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: PUSH
3618: LD_INT 1
3620: PPUSH
3621: LD_INT 4
3623: PPUSH
3624: CALL_OW 12
3628: ARRAY
3629: PPUSH
3630: LD_INT 5
3632: PPUSH
3633: LD_INT 8
3635: PPUSH
3636: CALL_OW 12
3640: PPUSH
3641: CALL_OW 380
// un := CreateHuman ;
3645: LD_ADDR_VAR 0 3
3649: PUSH
3650: CALL_OW 44
3654: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3655: LD_ADDR_EXP 19
3659: PUSH
3660: LD_EXP 19
3664: PPUSH
3665: LD_VAR 0 3
3669: PPUSH
3670: CALL 66507 0 2
3674: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3675: LD_VAR 0 3
3679: PPUSH
3680: LD_VAR 0 4
3684: PUSH
3685: LD_INT 1
3687: ARRAY
3688: PPUSH
3689: CALL_OW 250
3693: PPUSH
3694: LD_VAR 0 4
3698: PUSH
3699: LD_INT 1
3701: ARRAY
3702: PPUSH
3703: CALL_OW 251
3707: PPUSH
3708: LD_INT 15
3710: PPUSH
3711: LD_INT 0
3713: PPUSH
3714: CALL 3900 0 5
// end ;
3718: GO 3578
3720: POP
3721: POP
// end ; end ; end_of_file
3722: LD_VAR 0 1
3726: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3727: LD_INT 0
3729: PPUSH
3730: PPUSH
// if existMode then
3731: LD_VAR 0 2
3735: IFFALSE 3870
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3737: LD_EXP 22
3741: PUSH
3742: LD_VAR 0 1
3746: STR
3747: PPUSH
3748: CALL_OW 28
3752: IFFALSE 3777
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3754: LD_ADDR_VAR 0 4
3758: PUSH
3759: LD_EXP 22
3763: PUSH
3764: LD_VAR 0 1
3768: STR
3769: PPUSH
3770: CALL_OW 34
3774: ST_TO_ADDR
3775: GO 3868
// begin if TestCharacters ( 11_ & ident ) then
3777: LD_STRING 11_
3779: PUSH
3780: LD_VAR 0 1
3784: STR
3785: PPUSH
3786: CALL_OW 28
3790: IFFALSE 3813
// unit := CreateCharacter ( 11_ & ident ) else
3792: LD_ADDR_VAR 0 4
3796: PUSH
3797: LD_STRING 11_
3799: PUSH
3800: LD_VAR 0 1
3804: STR
3805: PPUSH
3806: CALL_OW 34
3810: ST_TO_ADDR
3811: GO 3868
// if TestCharacters ( 10c_ & ident ) then
3813: LD_STRING 10c_
3815: PUSH
3816: LD_VAR 0 1
3820: STR
3821: PPUSH
3822: CALL_OW 28
3826: IFFALSE 3849
// unit := CreateCharacter ( 10c_ & ident ) else
3828: LD_ADDR_VAR 0 4
3832: PUSH
3833: LD_STRING 10c_
3835: PUSH
3836: LD_VAR 0 1
3840: STR
3841: PPUSH
3842: CALL_OW 34
3846: ST_TO_ADDR
3847: GO 3868
// unit := CreateCharacter ( 10_ & ident ) ;
3849: LD_ADDR_VAR 0 4
3853: PUSH
3854: LD_STRING 10_
3856: PUSH
3857: LD_VAR 0 1
3861: STR
3862: PPUSH
3863: CALL_OW 34
3867: ST_TO_ADDR
// end ; end else
3868: GO 3885
// unit := NewCharacter ( ident ) ;
3870: LD_ADDR_VAR 0 4
3874: PUSH
3875: LD_VAR 0 1
3879: PPUSH
3880: CALL_OW 25
3884: ST_TO_ADDR
// result := unit ;
3885: LD_ADDR_VAR 0 3
3889: PUSH
3890: LD_VAR 0 4
3894: ST_TO_ADDR
// end ;
3895: LD_VAR 0 3
3899: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3900: LD_INT 0
3902: PPUSH
3903: PPUSH
3904: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3905: LD_ADDR_VAR 0 8
3909: PUSH
3910: LD_INT 22
3912: PUSH
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 255
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: LD_INT 21
3929: PUSH
3930: LD_INT 3
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_INT 3
3939: PUSH
3940: LD_INT 30
3942: PUSH
3943: LD_INT 3
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: LIST
3958: PPUSH
3959: CALL_OW 69
3963: ST_TO_ADDR
// if not tmp then
3964: LD_VAR 0 8
3968: NOT
3969: IFFALSE 4002
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3971: LD_VAR 0 1
3975: PPUSH
3976: LD_VAR 0 2
3980: PPUSH
3981: LD_VAR 0 3
3985: PPUSH
3986: LD_VAR 0 4
3990: PPUSH
3991: LD_VAR 0 5
3995: PPUSH
3996: CALL_OW 50
// exit ;
4000: GO 4248
// end ; for i in tmp do
4002: LD_ADDR_VAR 0 7
4006: PUSH
4007: LD_VAR 0 8
4011: PUSH
4012: FOR_IN
4013: IFFALSE 4217
// if IsNotFull ( i ) then
4015: LD_VAR 0 7
4019: PPUSH
4020: CALL 30613 0 1
4024: IFFALSE 4215
// begin PlaceHumanInUnit ( unit , i ) ;
4026: LD_VAR 0 1
4030: PPUSH
4031: LD_VAR 0 7
4035: PPUSH
4036: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
4040: LD_VAR 0 7
4044: PPUSH
4045: CALL_OW 266
4049: PUSH
4050: LD_INT 5
4052: PUSH
4053: LD_INT 4
4055: PUSH
4056: LD_INT 31
4058: PUSH
4059: LD_INT 32
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: IN
4068: IFFALSE 4101
// begin SetClass ( unit , class_soldier ) ;
4070: LD_VAR 0 1
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4082: LD_VAR 0 1
4086: PPUSH
4087: LD_VAR 0 7
4091: PPUSH
4092: CALL 61547 0 1
4096: PPUSH
4097: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4101: LD_VAR 0 7
4105: PPUSH
4106: CALL_OW 266
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: LD_INT 3
4116: PUSH
4117: LD_INT 36
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: IN
4125: IFFALSE 4139
// SetClass ( unit , class_mechanic ) ;
4127: LD_VAR 0 1
4131: PPUSH
4132: LD_INT 3
4134: PPUSH
4135: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4139: LD_VAR 0 7
4143: PPUSH
4144: CALL_OW 266
4148: PUSH
4149: LD_INT 0
4151: PUSH
4152: LD_INT 1
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: IN
4159: IFFALSE 4173
// SetClass ( unit , class_engineer ) ;
4161: LD_VAR 0 1
4165: PPUSH
4166: LD_INT 2
4168: PPUSH
4169: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4173: LD_VAR 0 7
4177: PPUSH
4178: CALL_OW 266
4182: PUSH
4183: LD_INT 6
4185: PUSH
4186: LD_INT 7
4188: PUSH
4189: LD_INT 8
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: IN
4197: IFFALSE 4211
// SetClass ( unit , class_scientistic ) ;
4199: LD_VAR 0 1
4203: PPUSH
4204: LD_INT 4
4206: PPUSH
4207: CALL_OW 336
// exit ;
4211: POP
4212: POP
4213: GO 4248
// end ;
4215: GO 4012
4217: POP
4218: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4219: LD_VAR 0 1
4223: PPUSH
4224: LD_VAR 0 2
4228: PPUSH
4229: LD_VAR 0 3
4233: PPUSH
4234: LD_VAR 0 4
4238: PPUSH
4239: LD_VAR 0 5
4243: PPUSH
4244: CALL_OW 50
// end ;
4248: LD_VAR 0 6
4252: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4253: LD_INT 0
4255: PPUSH
// if unit in selectedTab then
4256: LD_VAR 0 1
4260: PUSH
4261: LD_VAR 0 3
4265: IN
4266: IFFALSE 4288
// SaveCharacters ( unit , 13c_ & unitString ) else
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_STRING 13c_
4275: PUSH
4276: LD_VAR 0 2
4280: STR
4281: PPUSH
4282: CALL_OW 38
4286: GO 4306
// SaveCharacters ( unit , 13s_ & unitString ) ;
4288: LD_VAR 0 1
4292: PPUSH
4293: LD_STRING 13s_
4295: PUSH
4296: LD_VAR 0 2
4300: STR
4301: PPUSH
4302: CALL_OW 38
// end ;
4306: LD_VAR 0 4
4310: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4311: LD_INT 0
4313: PPUSH
4314: PPUSH
4315: PPUSH
4316: PPUSH
// selected := [ ] ;
4317: LD_ADDR_EXP 23
4321: PUSH
4322: EMPTY
4323: ST_TO_ADDR
// othersSelect := [ ] ;
4324: LD_ADDR_EXP 24
4328: PUSH
4329: EMPTY
4330: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4331: LD_ADDR_VAR 0 3
4335: PUSH
4336: LD_EXP 3
4340: PUSH
4341: LD_EXP 4
4345: PUSH
4346: LD_EXP 5
4350: PUSH
4351: LD_EXP 6
4355: PUSH
4356: LD_EXP 8
4360: PUSH
4361: LD_EXP 9
4365: PUSH
4366: LD_EXP 10
4370: PUSH
4371: LD_EXP 11
4375: PUSH
4376: LD_EXP 12
4380: PUSH
4381: LD_EXP 13
4385: PUSH
4386: LD_EXP 14
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4404: LD_ADDR_VAR 0 3
4408: PUSH
4409: LD_VAR 0 3
4413: PUSH
4414: LD_EXP 18
4418: ADD
4419: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4420: LD_ADDR_VAR 0 3
4424: PUSH
4425: LD_VAR 0 3
4429: PUSH
4430: LD_EXP 17
4434: ADD
4435: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4436: LD_ADDR_VAR 0 3
4440: PUSH
4441: LD_VAR 0 3
4445: PUSH
4446: LD_EXP 19
4450: ADD
4451: ST_TO_ADDR
// for i in tmp do
4452: LD_ADDR_VAR 0 2
4456: PUSH
4457: LD_VAR 0 3
4461: PUSH
4462: FOR_IN
4463: IFFALSE 4502
// if GetClass ( i ) = 8 then
4465: LD_VAR 0 2
4469: PPUSH
4470: CALL_OW 257
4474: PUSH
4475: LD_INT 8
4477: EQUAL
4478: IFFALSE 4500
// SetClass ( i , rand ( 1 , 4 ) ) ;
4480: LD_VAR 0 2
4484: PPUSH
4485: LD_INT 1
4487: PPUSH
4488: LD_INT 4
4490: PPUSH
4491: CALL_OW 12
4495: PPUSH
4496: CALL_OW 336
4500: GO 4462
4502: POP
4503: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4504: LD_ADDR_EXP 23
4508: PUSH
4509: LD_STRING 1
4511: PPUSH
4512: LD_INT 6
4514: PPUSH
4515: LD_INT 6
4517: PPUSH
4518: LD_INT -5
4520: PUSH
4521: LD_EXP 1
4525: PUSH
4526: LD_EXP 16
4530: PUSH
4531: LD_INT -2
4533: PUSH
4534: LD_INT -3
4536: PUSH
4537: LD_INT -5
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: PUSH
4548: LD_VAR 0 3
4552: ADD
4553: PUSH
4554: LD_INT -6
4556: PUSH
4557: LD_INT -4
4559: PUSH
4560: LD_EXP 2
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: LIST
4569: ADD
4570: PPUSH
4571: LD_INT 1
4573: PUSH
4574: LD_INT 0
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 2
4583: PUSH
4584: LD_INT 1
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 3
4593: PUSH
4594: LD_INT 0
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 4
4603: PUSH
4604: LD_INT 2
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 5
4613: PUSH
4614: LD_INT 0
4616: PUSH
4617: LD_INT 2
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: PPUSH
4632: CALL_OW 42
4636: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4637: LD_ADDR_EXP 24
4641: PUSH
4642: LD_EXP 23
4646: PUSH
4647: LD_EXP 3
4651: PUSH
4652: LD_EXP 4
4656: PUSH
4657: LD_EXP 5
4661: PUSH
4662: LD_EXP 6
4666: PUSH
4667: LD_EXP 7
4671: PUSH
4672: LD_EXP 8
4676: PUSH
4677: LD_EXP 9
4681: PUSH
4682: LD_EXP 10
4686: PUSH
4687: LD_EXP 11
4691: PUSH
4692: LD_EXP 12
4696: PUSH
4697: LD_EXP 13
4701: PUSH
4702: LD_EXP 14
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: DIFF
4721: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4722: LD_ADDR_VAR 0 4
4726: PUSH
4727: LD_VAR 0 3
4731: PUSH
4732: LD_EXP 23
4736: DIFF
4737: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4738: LD_ADDR_VAR 0 4
4742: PUSH
4743: LD_VAR 0 4
4747: PUSH
4748: LD_EXP 3
4752: PUSH
4753: LD_EXP 4
4757: PUSH
4758: LD_EXP 5
4762: PUSH
4763: LD_EXP 6
4767: PUSH
4768: LD_EXP 7
4772: PUSH
4773: LD_EXP 8
4777: PUSH
4778: LD_EXP 9
4782: PUSH
4783: LD_EXP 10
4787: PUSH
4788: LD_EXP 11
4792: PUSH
4793: LD_EXP 12
4797: PUSH
4798: LD_EXP 13
4802: PUSH
4803: LD_EXP 14
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: DIFF
4822: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4823: LD_VAR 0 4
4827: PPUSH
4828: LD_STRING 13s_others
4830: PPUSH
4831: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4835: LD_EXP 24
4839: PPUSH
4840: LD_STRING 13c_others
4842: PPUSH
4843: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4847: LD_EXP 1
4851: PPUSH
4852: LD_STRING 13c_JMM
4854: PPUSH
4855: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4859: LD_EXP 16
4863: PPUSH
4864: LD_STRING 13c_Stevens
4866: PPUSH
4867: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4871: LD_EXP 3
4875: PPUSH
4876: LD_STRING Lisa
4878: PPUSH
4879: LD_EXP 23
4883: PPUSH
4884: CALL 4253 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4888: LD_EXP 8
4892: PPUSH
4893: LD_STRING Brown
4895: PPUSH
4896: LD_EXP 23
4900: PPUSH
4901: CALL 4253 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4905: LD_EXP 4
4909: PPUSH
4910: LD_STRING Donaldson
4912: PPUSH
4913: LD_EXP 23
4917: PPUSH
4918: CALL 4253 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4922: LD_EXP 5
4926: PPUSH
4927: LD_STRING Bobby
4929: PPUSH
4930: LD_EXP 23
4934: PPUSH
4935: CALL 4253 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4939: LD_EXP 6
4943: PPUSH
4944: LD_STRING Cyrus
4946: PPUSH
4947: LD_EXP 23
4951: PPUSH
4952: CALL 4253 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4956: LD_EXP 7
4960: PPUSH
4961: LD_STRING Denis
4963: PPUSH
4964: LD_EXP 23
4968: PPUSH
4969: CALL 4253 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4973: LD_EXP 9
4977: PPUSH
4978: LD_STRING Gladstone
4980: PPUSH
4981: LD_EXP 23
4985: PPUSH
4986: CALL 4253 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4990: LD_EXP 10
4994: PPUSH
4995: LD_STRING Houten
4997: PPUSH
4998: LD_EXP 23
5002: PPUSH
5003: CALL 4253 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
5007: LD_EXP 11
5011: PPUSH
5012: LD_STRING Cornel
5014: PPUSH
5015: LD_EXP 23
5019: PPUSH
5020: CALL 4253 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
5024: LD_EXP 12
5028: PPUSH
5029: LD_STRING Gary
5031: PPUSH
5032: LD_EXP 23
5036: PPUSH
5037: CALL 4253 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5041: LD_EXP 13
5045: PPUSH
5046: LD_STRING Frank
5048: PPUSH
5049: LD_EXP 23
5053: PPUSH
5054: CALL 4253 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5058: LD_EXP 14
5062: PPUSH
5063: LD_STRING Kikuchi
5065: PPUSH
5066: LD_EXP 23
5070: PPUSH
5071: CALL 4253 0 3
// SaveCharactersAfterSelect ( DeltaDoctor , DeltaDoctor , selected ) ;
5075: LD_EXP 15
5079: PPUSH
5080: LD_STRING DeltaDoctor
5082: PPUSH
5083: LD_EXP 23
5087: PPUSH
5088: CALL 4253 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5092: LD_INT 22
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PUSH
5102: LD_INT 21
5104: PUSH
5105: LD_INT 1
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PPUSH
5116: CALL_OW 69
5120: PPUSH
5121: LD_INT 4
5123: PPUSH
5124: CALL_OW 235
// SetSide ( selected , 1 ) ;
5128: LD_EXP 23
5132: PPUSH
5133: LD_INT 1
5135: PPUSH
5136: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5140: LD_EXP 1
5144: PUSH
5145: LD_EXP 16
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PPUSH
5154: LD_INT 1
5156: PPUSH
5157: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5161: LD_ADDR_VAR 0 2
5165: PUSH
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 21
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: CALL_OW 69
5194: PUSH
5195: FOR_IN
5196: IFFALSE 5209
// ComExit ( i ) ;
5198: LD_VAR 0 2
5202: PPUSH
5203: CALL 66905 0 1
5207: GO 5195
5209: POP
5210: POP
// end ; end_of_file
5211: LD_VAR 0 1
5215: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5216: LD_VAR 0 1
5220: PPUSH
5221: CALL 21577 0 1
// if un = JMM then
5225: LD_VAR 0 1
5229: PUSH
5230: LD_EXP 1
5234: EQUAL
5235: IFFALSE 5244
// YouLost ( JMM ) ;
5237: LD_STRING JMM
5239: PPUSH
5240: CALL_OW 104
// end ;
5244: PPOPN 1
5246: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5247: LD_VAR 0 1
5251: PPUSH
5252: LD_VAR 0 2
5256: PPUSH
5257: CALL 21635 0 2
// end ; end_of_file
5261: PPOPN 2
5263: END
// export function Action ; begin
5264: LD_INT 0
5266: PPUSH
// InGameOn ;
5267: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5271: LD_INT 22
5273: PUSH
5274: LD_INT 1
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 2
5283: PUSH
5284: LD_INT 30
5286: PUSH
5287: LD_INT 0
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 30
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: LIST
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PPUSH
5313: CALL_OW 69
5317: PPUSH
5318: CALL_OW 87
// wait ( 0 0$1 ) ;
5322: LD_INT 35
5324: PPUSH
5325: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5329: LD_EXP 1
5333: PPUSH
5334: LD_STRING D1-JMM-1
5336: PPUSH
5337: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5341: LD_EXP 2
5345: PPUSH
5346: LD_STRING D1-Pow-1
5348: PPUSH
5349: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5353: LD_EXP 2
5357: PPUSH
5358: LD_STRING D1-Pow-1a
5360: PPUSH
5361: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5365: LD_EXP 2
5369: PPUSH
5370: LD_STRING D1-Pow-1b
5372: PPUSH
5373: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5377: LD_EXP 2
5381: PPUSH
5382: LD_STRING D1-Pow-1c
5384: PPUSH
5385: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5389: LD_EXP 1
5393: PPUSH
5394: LD_STRING D1-JMM-2
5396: PPUSH
5397: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5401: LD_EXP 2
5405: PPUSH
5406: LD_STRING D1-Pow-2
5408: PPUSH
5409: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5413: LD_EXP 1
5417: PPUSH
5418: LD_STRING D1-JMM-3
5420: PPUSH
5421: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5425: LD_EXP 2
5429: PPUSH
5430: LD_STRING D1-Pow-3
5432: PPUSH
5433: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5437: LD_EXP 1
5441: PPUSH
5442: LD_STRING D1-JMM-4
5444: PPUSH
5445: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5449: LD_EXP 2
5453: PPUSH
5454: LD_STRING D1-Pow-4
5456: PPUSH
5457: CALL_OW 94
// SelectAndSaveCharacters ;
5461: CALL 4311 0 0
// InGameOff ;
5465: CALL_OW 9
// Query ( Q1 ) ;
5469: LD_STRING Q1
5471: PPUSH
5472: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5476: LD_INT 2
5478: PPUSH
5479: LD_INT 1
5481: PPUSH
5482: CALL_OW 424
// end ; end_of_file
5486: LD_VAR 0 1
5490: RET
// export globalGameSaveCounter ; every 0 0$1 do
5491: GO 5493
5493: DISABLE
// begin enable ;
5494: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5495: LD_STRING updateTimer(
5497: PUSH
5498: LD_OWVAR 1
5502: STR
5503: PUSH
5504: LD_STRING );
5506: STR
5507: PPUSH
5508: CALL_OW 559
// end ;
5512: END
// every 0 0$1 do
5513: GO 5515
5515: DISABLE
// begin globalGameSaveCounter := 0 ;
5516: LD_ADDR_EXP 25
5520: PUSH
5521: LD_INT 0
5523: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5524: LD_STRING setGameSaveCounter(0)
5526: PPUSH
5527: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5531: LD_STRING initStreamRollete();
5533: PPUSH
5534: CALL_OW 559
// InitStreamMode ;
5538: CALL 6890 0 0
// DefineStreamItems ( false ) ;
5542: LD_INT 0
5544: PPUSH
5545: CALL 7354 0 1
// end ;
5549: END
// export function SOS_MapStart ( ) ; begin
5550: LD_INT 0
5552: PPUSH
// if streamModeActive then
5553: LD_EXP 26
5557: IFFALSE 5566
// DefineStreamItems ( true ) ;
5559: LD_INT 1
5561: PPUSH
5562: CALL 7354 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
5566: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
5568: PPUSH
5569: CALL_OW 559
// UpdateLuaVariables ( ) ;
5573: CALL 5590 0 0
// UpdateFactoryWaypoints ( ) ;
5577: CALL 20476 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5581: CALL 20728 0 0
// end ;
5585: LD_VAR 0 1
5589: RET
// function UpdateLuaVariables ( ) ; begin
5590: LD_INT 0
5592: PPUSH
// if globalGameSaveCounter then
5593: LD_EXP 25
5597: IFFALSE 5631
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5599: LD_ADDR_EXP 25
5603: PUSH
5604: LD_EXP 25
5608: PPUSH
5609: CALL 67880 0 1
5613: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5614: LD_STRING setGameSaveCounter(
5616: PUSH
5617: LD_EXP 25
5621: STR
5622: PUSH
5623: LD_STRING )
5625: STR
5626: PPUSH
5627: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5631: LD_STRING setGameDifficulty(
5633: PUSH
5634: LD_OWVAR 67
5638: STR
5639: PUSH
5640: LD_STRING )
5642: STR
5643: PPUSH
5644: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
5648: LD_STRING displayDifficulty(
5650: PUSH
5651: LD_OWVAR 67
5655: STR
5656: PUSH
5657: LD_STRING )
5659: STR
5660: PPUSH
5661: CALL_OW 559
// end ;
5665: LD_VAR 0 1
5669: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5670: LD_INT 0
5672: PPUSH
// if p2 = stream_mode then
5673: LD_VAR 0 2
5677: PUSH
5678: LD_INT 100
5680: EQUAL
5681: IFFALSE 6684
// begin if not StreamModeActive then
5683: LD_EXP 26
5687: NOT
5688: IFFALSE 5698
// StreamModeActive := true ;
5690: LD_ADDR_EXP 26
5694: PUSH
5695: LD_INT 1
5697: ST_TO_ADDR
// if p3 = 0 then
5698: LD_VAR 0 3
5702: PUSH
5703: LD_INT 0
5705: EQUAL
5706: IFFALSE 5712
// InitStreamMode ;
5708: CALL 6890 0 0
// if p3 = 1 then
5712: LD_VAR 0 3
5716: PUSH
5717: LD_INT 1
5719: EQUAL
5720: IFFALSE 5730
// sRocket := true ;
5722: LD_ADDR_EXP 31
5726: PUSH
5727: LD_INT 1
5729: ST_TO_ADDR
// if p3 = 2 then
5730: LD_VAR 0 3
5734: PUSH
5735: LD_INT 2
5737: EQUAL
5738: IFFALSE 5748
// sSpeed := true ;
5740: LD_ADDR_EXP 30
5744: PUSH
5745: LD_INT 1
5747: ST_TO_ADDR
// if p3 = 3 then
5748: LD_VAR 0 3
5752: PUSH
5753: LD_INT 3
5755: EQUAL
5756: IFFALSE 5766
// sEngine := true ;
5758: LD_ADDR_EXP 32
5762: PUSH
5763: LD_INT 1
5765: ST_TO_ADDR
// if p3 = 4 then
5766: LD_VAR 0 3
5770: PUSH
5771: LD_INT 4
5773: EQUAL
5774: IFFALSE 5784
// sSpec := true ;
5776: LD_ADDR_EXP 29
5780: PUSH
5781: LD_INT 1
5783: ST_TO_ADDR
// if p3 = 5 then
5784: LD_VAR 0 3
5788: PUSH
5789: LD_INT 5
5791: EQUAL
5792: IFFALSE 5802
// sLevel := true ;
5794: LD_ADDR_EXP 33
5798: PUSH
5799: LD_INT 1
5801: ST_TO_ADDR
// if p3 = 6 then
5802: LD_VAR 0 3
5806: PUSH
5807: LD_INT 6
5809: EQUAL
5810: IFFALSE 5820
// sArmoury := true ;
5812: LD_ADDR_EXP 34
5816: PUSH
5817: LD_INT 1
5819: ST_TO_ADDR
// if p3 = 7 then
5820: LD_VAR 0 3
5824: PUSH
5825: LD_INT 7
5827: EQUAL
5828: IFFALSE 5838
// sRadar := true ;
5830: LD_ADDR_EXP 35
5834: PUSH
5835: LD_INT 1
5837: ST_TO_ADDR
// if p3 = 8 then
5838: LD_VAR 0 3
5842: PUSH
5843: LD_INT 8
5845: EQUAL
5846: IFFALSE 5856
// sBunker := true ;
5848: LD_ADDR_EXP 36
5852: PUSH
5853: LD_INT 1
5855: ST_TO_ADDR
// if p3 = 9 then
5856: LD_VAR 0 3
5860: PUSH
5861: LD_INT 9
5863: EQUAL
5864: IFFALSE 5874
// sHack := true ;
5866: LD_ADDR_EXP 37
5870: PUSH
5871: LD_INT 1
5873: ST_TO_ADDR
// if p3 = 10 then
5874: LD_VAR 0 3
5878: PUSH
5879: LD_INT 10
5881: EQUAL
5882: IFFALSE 5892
// sFire := true ;
5884: LD_ADDR_EXP 38
5888: PUSH
5889: LD_INT 1
5891: ST_TO_ADDR
// if p3 = 11 then
5892: LD_VAR 0 3
5896: PUSH
5897: LD_INT 11
5899: EQUAL
5900: IFFALSE 5910
// sRefresh := true ;
5902: LD_ADDR_EXP 39
5906: PUSH
5907: LD_INT 1
5909: ST_TO_ADDR
// if p3 = 12 then
5910: LD_VAR 0 3
5914: PUSH
5915: LD_INT 12
5917: EQUAL
5918: IFFALSE 5928
// sExp := true ;
5920: LD_ADDR_EXP 40
5924: PUSH
5925: LD_INT 1
5927: ST_TO_ADDR
// if p3 = 13 then
5928: LD_VAR 0 3
5932: PUSH
5933: LD_INT 13
5935: EQUAL
5936: IFFALSE 5946
// sDepot := true ;
5938: LD_ADDR_EXP 41
5942: PUSH
5943: LD_INT 1
5945: ST_TO_ADDR
// if p3 = 14 then
5946: LD_VAR 0 3
5950: PUSH
5951: LD_INT 14
5953: EQUAL
5954: IFFALSE 5964
// sFlag := true ;
5956: LD_ADDR_EXP 42
5960: PUSH
5961: LD_INT 1
5963: ST_TO_ADDR
// if p3 = 15 then
5964: LD_VAR 0 3
5968: PUSH
5969: LD_INT 15
5971: EQUAL
5972: IFFALSE 5982
// sKamikadze := true ;
5974: LD_ADDR_EXP 50
5978: PUSH
5979: LD_INT 1
5981: ST_TO_ADDR
// if p3 = 16 then
5982: LD_VAR 0 3
5986: PUSH
5987: LD_INT 16
5989: EQUAL
5990: IFFALSE 6000
// sTroll := true ;
5992: LD_ADDR_EXP 51
5996: PUSH
5997: LD_INT 1
5999: ST_TO_ADDR
// if p3 = 17 then
6000: LD_VAR 0 3
6004: PUSH
6005: LD_INT 17
6007: EQUAL
6008: IFFALSE 6018
// sSlow := true ;
6010: LD_ADDR_EXP 52
6014: PUSH
6015: LD_INT 1
6017: ST_TO_ADDR
// if p3 = 18 then
6018: LD_VAR 0 3
6022: PUSH
6023: LD_INT 18
6025: EQUAL
6026: IFFALSE 6036
// sLack := true ;
6028: LD_ADDR_EXP 53
6032: PUSH
6033: LD_INT 1
6035: ST_TO_ADDR
// if p3 = 19 then
6036: LD_VAR 0 3
6040: PUSH
6041: LD_INT 19
6043: EQUAL
6044: IFFALSE 6054
// sTank := true ;
6046: LD_ADDR_EXP 55
6050: PUSH
6051: LD_INT 1
6053: ST_TO_ADDR
// if p3 = 20 then
6054: LD_VAR 0 3
6058: PUSH
6059: LD_INT 20
6061: EQUAL
6062: IFFALSE 6072
// sRemote := true ;
6064: LD_ADDR_EXP 56
6068: PUSH
6069: LD_INT 1
6071: ST_TO_ADDR
// if p3 = 21 then
6072: LD_VAR 0 3
6076: PUSH
6077: LD_INT 21
6079: EQUAL
6080: IFFALSE 6090
// sPowell := true ;
6082: LD_ADDR_EXP 57
6086: PUSH
6087: LD_INT 1
6089: ST_TO_ADDR
// if p3 = 22 then
6090: LD_VAR 0 3
6094: PUSH
6095: LD_INT 22
6097: EQUAL
6098: IFFALSE 6108
// sTeleport := true ;
6100: LD_ADDR_EXP 60
6104: PUSH
6105: LD_INT 1
6107: ST_TO_ADDR
// if p3 = 23 then
6108: LD_VAR 0 3
6112: PUSH
6113: LD_INT 23
6115: EQUAL
6116: IFFALSE 6126
// sOilTower := true ;
6118: LD_ADDR_EXP 62
6122: PUSH
6123: LD_INT 1
6125: ST_TO_ADDR
// if p3 = 24 then
6126: LD_VAR 0 3
6130: PUSH
6131: LD_INT 24
6133: EQUAL
6134: IFFALSE 6144
// sShovel := true ;
6136: LD_ADDR_EXP 63
6140: PUSH
6141: LD_INT 1
6143: ST_TO_ADDR
// if p3 = 25 then
6144: LD_VAR 0 3
6148: PUSH
6149: LD_INT 25
6151: EQUAL
6152: IFFALSE 6162
// sSheik := true ;
6154: LD_ADDR_EXP 64
6158: PUSH
6159: LD_INT 1
6161: ST_TO_ADDR
// if p3 = 26 then
6162: LD_VAR 0 3
6166: PUSH
6167: LD_INT 26
6169: EQUAL
6170: IFFALSE 6180
// sEarthquake := true ;
6172: LD_ADDR_EXP 66
6176: PUSH
6177: LD_INT 1
6179: ST_TO_ADDR
// if p3 = 27 then
6180: LD_VAR 0 3
6184: PUSH
6185: LD_INT 27
6187: EQUAL
6188: IFFALSE 6198
// sAI := true ;
6190: LD_ADDR_EXP 67
6194: PUSH
6195: LD_INT 1
6197: ST_TO_ADDR
// if p3 = 28 then
6198: LD_VAR 0 3
6202: PUSH
6203: LD_INT 28
6205: EQUAL
6206: IFFALSE 6216
// sCargo := true ;
6208: LD_ADDR_EXP 70
6212: PUSH
6213: LD_INT 1
6215: ST_TO_ADDR
// if p3 = 29 then
6216: LD_VAR 0 3
6220: PUSH
6221: LD_INT 29
6223: EQUAL
6224: IFFALSE 6234
// sDLaser := true ;
6226: LD_ADDR_EXP 71
6230: PUSH
6231: LD_INT 1
6233: ST_TO_ADDR
// if p3 = 30 then
6234: LD_VAR 0 3
6238: PUSH
6239: LD_INT 30
6241: EQUAL
6242: IFFALSE 6252
// sExchange := true ;
6244: LD_ADDR_EXP 72
6248: PUSH
6249: LD_INT 1
6251: ST_TO_ADDR
// if p3 = 31 then
6252: LD_VAR 0 3
6256: PUSH
6257: LD_INT 31
6259: EQUAL
6260: IFFALSE 6270
// sFac := true ;
6262: LD_ADDR_EXP 73
6266: PUSH
6267: LD_INT 1
6269: ST_TO_ADDR
// if p3 = 32 then
6270: LD_VAR 0 3
6274: PUSH
6275: LD_INT 32
6277: EQUAL
6278: IFFALSE 6288
// sPower := true ;
6280: LD_ADDR_EXP 74
6284: PUSH
6285: LD_INT 1
6287: ST_TO_ADDR
// if p3 = 33 then
6288: LD_VAR 0 3
6292: PUSH
6293: LD_INT 33
6295: EQUAL
6296: IFFALSE 6306
// sRandom := true ;
6298: LD_ADDR_EXP 75
6302: PUSH
6303: LD_INT 1
6305: ST_TO_ADDR
// if p3 = 34 then
6306: LD_VAR 0 3
6310: PUSH
6311: LD_INT 34
6313: EQUAL
6314: IFFALSE 6324
// sShield := true ;
6316: LD_ADDR_EXP 76
6320: PUSH
6321: LD_INT 1
6323: ST_TO_ADDR
// if p3 = 35 then
6324: LD_VAR 0 3
6328: PUSH
6329: LD_INT 35
6331: EQUAL
6332: IFFALSE 6342
// sTime := true ;
6334: LD_ADDR_EXP 77
6338: PUSH
6339: LD_INT 1
6341: ST_TO_ADDR
// if p3 = 36 then
6342: LD_VAR 0 3
6346: PUSH
6347: LD_INT 36
6349: EQUAL
6350: IFFALSE 6360
// sTools := true ;
6352: LD_ADDR_EXP 78
6356: PUSH
6357: LD_INT 1
6359: ST_TO_ADDR
// if p3 = 101 then
6360: LD_VAR 0 3
6364: PUSH
6365: LD_INT 101
6367: EQUAL
6368: IFFALSE 6378
// sSold := true ;
6370: LD_ADDR_EXP 43
6374: PUSH
6375: LD_INT 1
6377: ST_TO_ADDR
// if p3 = 102 then
6378: LD_VAR 0 3
6382: PUSH
6383: LD_INT 102
6385: EQUAL
6386: IFFALSE 6396
// sDiff := true ;
6388: LD_ADDR_EXP 44
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// if p3 = 103 then
6396: LD_VAR 0 3
6400: PUSH
6401: LD_INT 103
6403: EQUAL
6404: IFFALSE 6414
// sFog := true ;
6406: LD_ADDR_EXP 47
6410: PUSH
6411: LD_INT 1
6413: ST_TO_ADDR
// if p3 = 104 then
6414: LD_VAR 0 3
6418: PUSH
6419: LD_INT 104
6421: EQUAL
6422: IFFALSE 6432
// sReset := true ;
6424: LD_ADDR_EXP 48
6428: PUSH
6429: LD_INT 1
6431: ST_TO_ADDR
// if p3 = 105 then
6432: LD_VAR 0 3
6436: PUSH
6437: LD_INT 105
6439: EQUAL
6440: IFFALSE 6450
// sSun := true ;
6442: LD_ADDR_EXP 49
6446: PUSH
6447: LD_INT 1
6449: ST_TO_ADDR
// if p3 = 106 then
6450: LD_VAR 0 3
6454: PUSH
6455: LD_INT 106
6457: EQUAL
6458: IFFALSE 6468
// sTiger := true ;
6460: LD_ADDR_EXP 45
6464: PUSH
6465: LD_INT 1
6467: ST_TO_ADDR
// if p3 = 107 then
6468: LD_VAR 0 3
6472: PUSH
6473: LD_INT 107
6475: EQUAL
6476: IFFALSE 6486
// sBomb := true ;
6478: LD_ADDR_EXP 46
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// if p3 = 108 then
6486: LD_VAR 0 3
6490: PUSH
6491: LD_INT 108
6493: EQUAL
6494: IFFALSE 6504
// sWound := true ;
6496: LD_ADDR_EXP 54
6500: PUSH
6501: LD_INT 1
6503: ST_TO_ADDR
// if p3 = 109 then
6504: LD_VAR 0 3
6508: PUSH
6509: LD_INT 109
6511: EQUAL
6512: IFFALSE 6522
// sBetray := true ;
6514: LD_ADDR_EXP 58
6518: PUSH
6519: LD_INT 1
6521: ST_TO_ADDR
// if p3 = 110 then
6522: LD_VAR 0 3
6526: PUSH
6527: LD_INT 110
6529: EQUAL
6530: IFFALSE 6540
// sContamin := true ;
6532: LD_ADDR_EXP 59
6536: PUSH
6537: LD_INT 1
6539: ST_TO_ADDR
// if p3 = 111 then
6540: LD_VAR 0 3
6544: PUSH
6545: LD_INT 111
6547: EQUAL
6548: IFFALSE 6558
// sOil := true ;
6550: LD_ADDR_EXP 61
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// if p3 = 112 then
6558: LD_VAR 0 3
6562: PUSH
6563: LD_INT 112
6565: EQUAL
6566: IFFALSE 6576
// sStu := true ;
6568: LD_ADDR_EXP 65
6572: PUSH
6573: LD_INT 1
6575: ST_TO_ADDR
// if p3 = 113 then
6576: LD_VAR 0 3
6580: PUSH
6581: LD_INT 113
6583: EQUAL
6584: IFFALSE 6594
// sBazooka := true ;
6586: LD_ADDR_EXP 68
6590: PUSH
6591: LD_INT 1
6593: ST_TO_ADDR
// if p3 = 114 then
6594: LD_VAR 0 3
6598: PUSH
6599: LD_INT 114
6601: EQUAL
6602: IFFALSE 6612
// sMortar := true ;
6604: LD_ADDR_EXP 69
6608: PUSH
6609: LD_INT 1
6611: ST_TO_ADDR
// if p3 = 115 then
6612: LD_VAR 0 3
6616: PUSH
6617: LD_INT 115
6619: EQUAL
6620: IFFALSE 6630
// sRanger := true ;
6622: LD_ADDR_EXP 79
6626: PUSH
6627: LD_INT 1
6629: ST_TO_ADDR
// if p3 = 116 then
6630: LD_VAR 0 3
6634: PUSH
6635: LD_INT 116
6637: EQUAL
6638: IFFALSE 6648
// sComputer := true ;
6640: LD_ADDR_EXP 80
6644: PUSH
6645: LD_INT 1
6647: ST_TO_ADDR
// if p3 = 117 then
6648: LD_VAR 0 3
6652: PUSH
6653: LD_INT 117
6655: EQUAL
6656: IFFALSE 6666
// s30 := true ;
6658: LD_ADDR_EXP 81
6662: PUSH
6663: LD_INT 1
6665: ST_TO_ADDR
// if p3 = 118 then
6666: LD_VAR 0 3
6670: PUSH
6671: LD_INT 118
6673: EQUAL
6674: IFFALSE 6684
// s60 := true ;
6676: LD_ADDR_EXP 82
6680: PUSH
6681: LD_INT 1
6683: ST_TO_ADDR
// end ; if p2 = hack_mode then
6684: LD_VAR 0 2
6688: PUSH
6689: LD_INT 101
6691: EQUAL
6692: IFFALSE 6820
// begin case p3 of 1 :
6694: LD_VAR 0 3
6698: PUSH
6699: LD_INT 1
6701: DOUBLE
6702: EQUAL
6703: IFTRUE 6707
6705: GO 6714
6707: POP
// hHackUnlimitedResources ; 2 :
6708: CALL 19083 0 0
6712: GO 6820
6714: LD_INT 2
6716: DOUBLE
6717: EQUAL
6718: IFTRUE 6722
6720: GO 6729
6722: POP
// hHackSetLevel10 ; 3 :
6723: CALL 19216 0 0
6727: GO 6820
6729: LD_INT 3
6731: DOUBLE
6732: EQUAL
6733: IFTRUE 6737
6735: GO 6744
6737: POP
// hHackSetLevel10YourUnits ; 4 :
6738: CALL 19301 0 0
6742: GO 6820
6744: LD_INT 4
6746: DOUBLE
6747: EQUAL
6748: IFTRUE 6752
6750: GO 6759
6752: POP
// hHackInvincible ; 5 :
6753: CALL 19749 0 0
6757: GO 6820
6759: LD_INT 5
6761: DOUBLE
6762: EQUAL
6763: IFTRUE 6767
6765: GO 6774
6767: POP
// hHackInvisible ; 6 :
6768: CALL 19860 0 0
6772: GO 6820
6774: LD_INT 6
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6789
6782: POP
// hHackChangeYourSide ; 7 :
6783: CALL 19917 0 0
6787: GO 6820
6789: LD_INT 7
6791: DOUBLE
6792: EQUAL
6793: IFTRUE 6797
6795: GO 6804
6797: POP
// hHackChangeUnitSide ; 8 :
6798: CALL 19959 0 0
6802: GO 6820
6804: LD_INT 8
6806: DOUBLE
6807: EQUAL
6808: IFTRUE 6812
6810: GO 6819
6812: POP
// hHackFog ; end ;
6813: CALL 20060 0 0
6817: GO 6820
6819: POP
// end ; if p2 = game_save_mode then
6820: LD_VAR 0 2
6824: PUSH
6825: LD_INT 102
6827: EQUAL
6828: IFFALSE 6885
// begin if p3 = 1 then
6830: LD_VAR 0 3
6834: PUSH
6835: LD_INT 1
6837: EQUAL
6838: IFFALSE 6850
// globalGameSaveCounter := p4 ;
6840: LD_ADDR_EXP 25
6844: PUSH
6845: LD_VAR 0 4
6849: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6850: LD_VAR 0 3
6854: PUSH
6855: LD_INT 2
6857: EQUAL
6858: IFFALSE 6866
6860: PUSH
6861: LD_EXP 25
6865: AND
6866: IFFALSE 6885
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6868: LD_STRING setGameSaveCounter(
6870: PUSH
6871: LD_EXP 25
6875: STR
6876: PUSH
6877: LD_STRING )
6879: STR
6880: PPUSH
6881: CALL_OW 559
// end ; end ;
6885: LD_VAR 0 7
6889: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6890: LD_INT 0
6892: PPUSH
// streamModeActive := false ;
6893: LD_ADDR_EXP 26
6897: PUSH
6898: LD_INT 0
6900: ST_TO_ADDR
// normalCounter := 36 ;
6901: LD_ADDR_EXP 27
6905: PUSH
6906: LD_INT 36
6908: ST_TO_ADDR
// hardcoreCounter := 18 ;
6909: LD_ADDR_EXP 28
6913: PUSH
6914: LD_INT 18
6916: ST_TO_ADDR
// sRocket := false ;
6917: LD_ADDR_EXP 31
6921: PUSH
6922: LD_INT 0
6924: ST_TO_ADDR
// sSpeed := false ;
6925: LD_ADDR_EXP 30
6929: PUSH
6930: LD_INT 0
6932: ST_TO_ADDR
// sEngine := false ;
6933: LD_ADDR_EXP 32
6937: PUSH
6938: LD_INT 0
6940: ST_TO_ADDR
// sSpec := false ;
6941: LD_ADDR_EXP 29
6945: PUSH
6946: LD_INT 0
6948: ST_TO_ADDR
// sLevel := false ;
6949: LD_ADDR_EXP 33
6953: PUSH
6954: LD_INT 0
6956: ST_TO_ADDR
// sArmoury := false ;
6957: LD_ADDR_EXP 34
6961: PUSH
6962: LD_INT 0
6964: ST_TO_ADDR
// sRadar := false ;
6965: LD_ADDR_EXP 35
6969: PUSH
6970: LD_INT 0
6972: ST_TO_ADDR
// sBunker := false ;
6973: LD_ADDR_EXP 36
6977: PUSH
6978: LD_INT 0
6980: ST_TO_ADDR
// sHack := false ;
6981: LD_ADDR_EXP 37
6985: PUSH
6986: LD_INT 0
6988: ST_TO_ADDR
// sFire := false ;
6989: LD_ADDR_EXP 38
6993: PUSH
6994: LD_INT 0
6996: ST_TO_ADDR
// sRefresh := false ;
6997: LD_ADDR_EXP 39
7001: PUSH
7002: LD_INT 0
7004: ST_TO_ADDR
// sExp := false ;
7005: LD_ADDR_EXP 40
7009: PUSH
7010: LD_INT 0
7012: ST_TO_ADDR
// sDepot := false ;
7013: LD_ADDR_EXP 41
7017: PUSH
7018: LD_INT 0
7020: ST_TO_ADDR
// sFlag := false ;
7021: LD_ADDR_EXP 42
7025: PUSH
7026: LD_INT 0
7028: ST_TO_ADDR
// sKamikadze := false ;
7029: LD_ADDR_EXP 50
7033: PUSH
7034: LD_INT 0
7036: ST_TO_ADDR
// sTroll := false ;
7037: LD_ADDR_EXP 51
7041: PUSH
7042: LD_INT 0
7044: ST_TO_ADDR
// sSlow := false ;
7045: LD_ADDR_EXP 52
7049: PUSH
7050: LD_INT 0
7052: ST_TO_ADDR
// sLack := false ;
7053: LD_ADDR_EXP 53
7057: PUSH
7058: LD_INT 0
7060: ST_TO_ADDR
// sTank := false ;
7061: LD_ADDR_EXP 55
7065: PUSH
7066: LD_INT 0
7068: ST_TO_ADDR
// sRemote := false ;
7069: LD_ADDR_EXP 56
7073: PUSH
7074: LD_INT 0
7076: ST_TO_ADDR
// sPowell := false ;
7077: LD_ADDR_EXP 57
7081: PUSH
7082: LD_INT 0
7084: ST_TO_ADDR
// sTeleport := false ;
7085: LD_ADDR_EXP 60
7089: PUSH
7090: LD_INT 0
7092: ST_TO_ADDR
// sOilTower := false ;
7093: LD_ADDR_EXP 62
7097: PUSH
7098: LD_INT 0
7100: ST_TO_ADDR
// sShovel := false ;
7101: LD_ADDR_EXP 63
7105: PUSH
7106: LD_INT 0
7108: ST_TO_ADDR
// sSheik := false ;
7109: LD_ADDR_EXP 64
7113: PUSH
7114: LD_INT 0
7116: ST_TO_ADDR
// sEarthquake := false ;
7117: LD_ADDR_EXP 66
7121: PUSH
7122: LD_INT 0
7124: ST_TO_ADDR
// sAI := false ;
7125: LD_ADDR_EXP 67
7129: PUSH
7130: LD_INT 0
7132: ST_TO_ADDR
// sCargo := false ;
7133: LD_ADDR_EXP 70
7137: PUSH
7138: LD_INT 0
7140: ST_TO_ADDR
// sDLaser := false ;
7141: LD_ADDR_EXP 71
7145: PUSH
7146: LD_INT 0
7148: ST_TO_ADDR
// sExchange := false ;
7149: LD_ADDR_EXP 72
7153: PUSH
7154: LD_INT 0
7156: ST_TO_ADDR
// sFac := false ;
7157: LD_ADDR_EXP 73
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
// sPower := false ;
7165: LD_ADDR_EXP 74
7169: PUSH
7170: LD_INT 0
7172: ST_TO_ADDR
// sRandom := false ;
7173: LD_ADDR_EXP 75
7177: PUSH
7178: LD_INT 0
7180: ST_TO_ADDR
// sShield := false ;
7181: LD_ADDR_EXP 76
7185: PUSH
7186: LD_INT 0
7188: ST_TO_ADDR
// sTime := false ;
7189: LD_ADDR_EXP 77
7193: PUSH
7194: LD_INT 0
7196: ST_TO_ADDR
// sTools := false ;
7197: LD_ADDR_EXP 78
7201: PUSH
7202: LD_INT 0
7204: ST_TO_ADDR
// sSold := false ;
7205: LD_ADDR_EXP 43
7209: PUSH
7210: LD_INT 0
7212: ST_TO_ADDR
// sDiff := false ;
7213: LD_ADDR_EXP 44
7217: PUSH
7218: LD_INT 0
7220: ST_TO_ADDR
// sFog := false ;
7221: LD_ADDR_EXP 47
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// sReset := false ;
7229: LD_ADDR_EXP 48
7233: PUSH
7234: LD_INT 0
7236: ST_TO_ADDR
// sSun := false ;
7237: LD_ADDR_EXP 49
7241: PUSH
7242: LD_INT 0
7244: ST_TO_ADDR
// sTiger := false ;
7245: LD_ADDR_EXP 45
7249: PUSH
7250: LD_INT 0
7252: ST_TO_ADDR
// sBomb := false ;
7253: LD_ADDR_EXP 46
7257: PUSH
7258: LD_INT 0
7260: ST_TO_ADDR
// sWound := false ;
7261: LD_ADDR_EXP 54
7265: PUSH
7266: LD_INT 0
7268: ST_TO_ADDR
// sBetray := false ;
7269: LD_ADDR_EXP 58
7273: PUSH
7274: LD_INT 0
7276: ST_TO_ADDR
// sContamin := false ;
7277: LD_ADDR_EXP 59
7281: PUSH
7282: LD_INT 0
7284: ST_TO_ADDR
// sOil := false ;
7285: LD_ADDR_EXP 61
7289: PUSH
7290: LD_INT 0
7292: ST_TO_ADDR
// sStu := false ;
7293: LD_ADDR_EXP 65
7297: PUSH
7298: LD_INT 0
7300: ST_TO_ADDR
// sBazooka := false ;
7301: LD_ADDR_EXP 68
7305: PUSH
7306: LD_INT 0
7308: ST_TO_ADDR
// sMortar := false ;
7309: LD_ADDR_EXP 69
7313: PUSH
7314: LD_INT 0
7316: ST_TO_ADDR
// sRanger := false ;
7317: LD_ADDR_EXP 79
7321: PUSH
7322: LD_INT 0
7324: ST_TO_ADDR
// sComputer := false ;
7325: LD_ADDR_EXP 80
7329: PUSH
7330: LD_INT 0
7332: ST_TO_ADDR
// s30 := false ;
7333: LD_ADDR_EXP 81
7337: PUSH
7338: LD_INT 0
7340: ST_TO_ADDR
// s60 := false ;
7341: LD_ADDR_EXP 82
7345: PUSH
7346: LD_INT 0
7348: ST_TO_ADDR
// end ;
7349: LD_VAR 0 1
7353: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7354: LD_INT 0
7356: PPUSH
7357: PPUSH
7358: PPUSH
7359: PPUSH
7360: PPUSH
7361: PPUSH
7362: PPUSH
// result := [ ] ;
7363: LD_ADDR_VAR 0 2
7367: PUSH
7368: EMPTY
7369: ST_TO_ADDR
// if campaign_id = 1 then
7370: LD_OWVAR 69
7374: PUSH
7375: LD_INT 1
7377: EQUAL
7378: IFFALSE 10544
// begin case mission_number of 1 :
7380: LD_OWVAR 70
7384: PUSH
7385: LD_INT 1
7387: DOUBLE
7388: EQUAL
7389: IFTRUE 7393
7391: GO 7469
7393: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 2
7401: PUSH
7402: LD_INT 4
7404: PUSH
7405: LD_INT 11
7407: PUSH
7408: LD_INT 12
7410: PUSH
7411: LD_INT 15
7413: PUSH
7414: LD_INT 16
7416: PUSH
7417: LD_INT 22
7419: PUSH
7420: LD_INT 23
7422: PUSH
7423: LD_INT 26
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 101
7439: PUSH
7440: LD_INT 102
7442: PUSH
7443: LD_INT 106
7445: PUSH
7446: LD_INT 116
7448: PUSH
7449: LD_INT 117
7451: PUSH
7452: LD_INT 118
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: ST_TO_ADDR
7467: GO 10542
7469: LD_INT 2
7471: DOUBLE
7472: EQUAL
7473: IFTRUE 7477
7475: GO 7561
7477: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7478: LD_ADDR_VAR 0 2
7482: PUSH
7483: LD_INT 2
7485: PUSH
7486: LD_INT 4
7488: PUSH
7489: LD_INT 11
7491: PUSH
7492: LD_INT 12
7494: PUSH
7495: LD_INT 15
7497: PUSH
7498: LD_INT 16
7500: PUSH
7501: LD_INT 22
7503: PUSH
7504: LD_INT 23
7506: PUSH
7507: LD_INT 26
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 101
7523: PUSH
7524: LD_INT 102
7526: PUSH
7527: LD_INT 105
7529: PUSH
7530: LD_INT 106
7532: PUSH
7533: LD_INT 108
7535: PUSH
7536: LD_INT 116
7538: PUSH
7539: LD_INT 117
7541: PUSH
7542: LD_INT 118
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: ST_TO_ADDR
7559: GO 10542
7561: LD_INT 3
7563: DOUBLE
7564: EQUAL
7565: IFTRUE 7569
7567: GO 7657
7569: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7570: LD_ADDR_VAR 0 2
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: LD_INT 4
7580: PUSH
7581: LD_INT 5
7583: PUSH
7584: LD_INT 11
7586: PUSH
7587: LD_INT 12
7589: PUSH
7590: LD_INT 15
7592: PUSH
7593: LD_INT 16
7595: PUSH
7596: LD_INT 22
7598: PUSH
7599: LD_INT 26
7601: PUSH
7602: LD_INT 36
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 101
7619: PUSH
7620: LD_INT 102
7622: PUSH
7623: LD_INT 105
7625: PUSH
7626: LD_INT 106
7628: PUSH
7629: LD_INT 108
7631: PUSH
7632: LD_INT 116
7634: PUSH
7635: LD_INT 117
7637: PUSH
7638: LD_INT 118
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: ST_TO_ADDR
7655: GO 10542
7657: LD_INT 4
7659: DOUBLE
7660: EQUAL
7661: IFTRUE 7665
7663: GO 7761
7665: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7666: LD_ADDR_VAR 0 2
7670: PUSH
7671: LD_INT 2
7673: PUSH
7674: LD_INT 4
7676: PUSH
7677: LD_INT 5
7679: PUSH
7680: LD_INT 8
7682: PUSH
7683: LD_INT 11
7685: PUSH
7686: LD_INT 12
7688: PUSH
7689: LD_INT 15
7691: PUSH
7692: LD_INT 16
7694: PUSH
7695: LD_INT 22
7697: PUSH
7698: LD_INT 23
7700: PUSH
7701: LD_INT 26
7703: PUSH
7704: LD_INT 36
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 101
7723: PUSH
7724: LD_INT 102
7726: PUSH
7727: LD_INT 105
7729: PUSH
7730: LD_INT 106
7732: PUSH
7733: LD_INT 108
7735: PUSH
7736: LD_INT 116
7738: PUSH
7739: LD_INT 117
7741: PUSH
7742: LD_INT 118
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: ST_TO_ADDR
7759: GO 10542
7761: LD_INT 5
7763: DOUBLE
7764: EQUAL
7765: IFTRUE 7769
7767: GO 7881
7769: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7770: LD_ADDR_VAR 0 2
7774: PUSH
7775: LD_INT 2
7777: PUSH
7778: LD_INT 4
7780: PUSH
7781: LD_INT 5
7783: PUSH
7784: LD_INT 6
7786: PUSH
7787: LD_INT 8
7789: PUSH
7790: LD_INT 11
7792: PUSH
7793: LD_INT 12
7795: PUSH
7796: LD_INT 15
7798: PUSH
7799: LD_INT 16
7801: PUSH
7802: LD_INT 22
7804: PUSH
7805: LD_INT 23
7807: PUSH
7808: LD_INT 25
7810: PUSH
7811: LD_INT 26
7813: PUSH
7814: LD_INT 36
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 101
7835: PUSH
7836: LD_INT 102
7838: PUSH
7839: LD_INT 105
7841: PUSH
7842: LD_INT 106
7844: PUSH
7845: LD_INT 108
7847: PUSH
7848: LD_INT 109
7850: PUSH
7851: LD_INT 112
7853: PUSH
7854: LD_INT 116
7856: PUSH
7857: LD_INT 117
7859: PUSH
7860: LD_INT 118
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: ST_TO_ADDR
7879: GO 10542
7881: LD_INT 6
7883: DOUBLE
7884: EQUAL
7885: IFTRUE 7889
7887: GO 8021
7889: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7890: LD_ADDR_VAR 0 2
7894: PUSH
7895: LD_INT 2
7897: PUSH
7898: LD_INT 4
7900: PUSH
7901: LD_INT 5
7903: PUSH
7904: LD_INT 6
7906: PUSH
7907: LD_INT 8
7909: PUSH
7910: LD_INT 11
7912: PUSH
7913: LD_INT 12
7915: PUSH
7916: LD_INT 15
7918: PUSH
7919: LD_INT 16
7921: PUSH
7922: LD_INT 20
7924: PUSH
7925: LD_INT 21
7927: PUSH
7928: LD_INT 22
7930: PUSH
7931: LD_INT 23
7933: PUSH
7934: LD_INT 25
7936: PUSH
7937: LD_INT 26
7939: PUSH
7940: LD_INT 30
7942: PUSH
7943: LD_INT 31
7945: PUSH
7946: LD_INT 32
7948: PUSH
7949: LD_INT 36
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 101
7975: PUSH
7976: LD_INT 102
7978: PUSH
7979: LD_INT 105
7981: PUSH
7982: LD_INT 106
7984: PUSH
7985: LD_INT 108
7987: PUSH
7988: LD_INT 109
7990: PUSH
7991: LD_INT 112
7993: PUSH
7994: LD_INT 116
7996: PUSH
7997: LD_INT 117
7999: PUSH
8000: LD_INT 118
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: ST_TO_ADDR
8019: GO 10542
8021: LD_INT 7
8023: DOUBLE
8024: EQUAL
8025: IFTRUE 8029
8027: GO 8141
8029: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8030: LD_ADDR_VAR 0 2
8034: PUSH
8035: LD_INT 2
8037: PUSH
8038: LD_INT 4
8040: PUSH
8041: LD_INT 5
8043: PUSH
8044: LD_INT 7
8046: PUSH
8047: LD_INT 11
8049: PUSH
8050: LD_INT 12
8052: PUSH
8053: LD_INT 15
8055: PUSH
8056: LD_INT 16
8058: PUSH
8059: LD_INT 20
8061: PUSH
8062: LD_INT 21
8064: PUSH
8065: LD_INT 22
8067: PUSH
8068: LD_INT 23
8070: PUSH
8071: LD_INT 25
8073: PUSH
8074: LD_INT 26
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 101
8095: PUSH
8096: LD_INT 102
8098: PUSH
8099: LD_INT 103
8101: PUSH
8102: LD_INT 105
8104: PUSH
8105: LD_INT 106
8107: PUSH
8108: LD_INT 108
8110: PUSH
8111: LD_INT 112
8113: PUSH
8114: LD_INT 116
8116: PUSH
8117: LD_INT 117
8119: PUSH
8120: LD_INT 118
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: ST_TO_ADDR
8139: GO 10542
8141: LD_INT 8
8143: DOUBLE
8144: EQUAL
8145: IFTRUE 8149
8147: GO 8289
8149: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8150: LD_ADDR_VAR 0 2
8154: PUSH
8155: LD_INT 2
8157: PUSH
8158: LD_INT 4
8160: PUSH
8161: LD_INT 5
8163: PUSH
8164: LD_INT 6
8166: PUSH
8167: LD_INT 7
8169: PUSH
8170: LD_INT 8
8172: PUSH
8173: LD_INT 11
8175: PUSH
8176: LD_INT 12
8178: PUSH
8179: LD_INT 15
8181: PUSH
8182: LD_INT 16
8184: PUSH
8185: LD_INT 20
8187: PUSH
8188: LD_INT 21
8190: PUSH
8191: LD_INT 22
8193: PUSH
8194: LD_INT 23
8196: PUSH
8197: LD_INT 25
8199: PUSH
8200: LD_INT 26
8202: PUSH
8203: LD_INT 30
8205: PUSH
8206: LD_INT 31
8208: PUSH
8209: LD_INT 32
8211: PUSH
8212: LD_INT 36
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 101
8239: PUSH
8240: LD_INT 102
8242: PUSH
8243: LD_INT 103
8245: PUSH
8246: LD_INT 105
8248: PUSH
8249: LD_INT 106
8251: PUSH
8252: LD_INT 108
8254: PUSH
8255: LD_INT 109
8257: PUSH
8258: LD_INT 112
8260: PUSH
8261: LD_INT 116
8263: PUSH
8264: LD_INT 117
8266: PUSH
8267: LD_INT 118
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: ST_TO_ADDR
8287: GO 10542
8289: LD_INT 9
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8445
8297: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_INT 2
8305: PUSH
8306: LD_INT 4
8308: PUSH
8309: LD_INT 5
8311: PUSH
8312: LD_INT 6
8314: PUSH
8315: LD_INT 7
8317: PUSH
8318: LD_INT 8
8320: PUSH
8321: LD_INT 11
8323: PUSH
8324: LD_INT 12
8326: PUSH
8327: LD_INT 15
8329: PUSH
8330: LD_INT 16
8332: PUSH
8333: LD_INT 20
8335: PUSH
8336: LD_INT 21
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 23
8344: PUSH
8345: LD_INT 25
8347: PUSH
8348: LD_INT 26
8350: PUSH
8351: LD_INT 28
8353: PUSH
8354: LD_INT 30
8356: PUSH
8357: LD_INT 31
8359: PUSH
8360: LD_INT 32
8362: PUSH
8363: LD_INT 36
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 101
8391: PUSH
8392: LD_INT 102
8394: PUSH
8395: LD_INT 103
8397: PUSH
8398: LD_INT 105
8400: PUSH
8401: LD_INT 106
8403: PUSH
8404: LD_INT 108
8406: PUSH
8407: LD_INT 109
8409: PUSH
8410: LD_INT 112
8412: PUSH
8413: LD_INT 114
8415: PUSH
8416: LD_INT 116
8418: PUSH
8419: LD_INT 117
8421: PUSH
8422: LD_INT 118
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: ST_TO_ADDR
8443: GO 10542
8445: LD_INT 10
8447: DOUBLE
8448: EQUAL
8449: IFTRUE 8453
8451: GO 8649
8453: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8454: LD_ADDR_VAR 0 2
8458: PUSH
8459: LD_INT 2
8461: PUSH
8462: LD_INT 4
8464: PUSH
8465: LD_INT 5
8467: PUSH
8468: LD_INT 6
8470: PUSH
8471: LD_INT 7
8473: PUSH
8474: LD_INT 8
8476: PUSH
8477: LD_INT 9
8479: PUSH
8480: LD_INT 10
8482: PUSH
8483: LD_INT 11
8485: PUSH
8486: LD_INT 12
8488: PUSH
8489: LD_INT 13
8491: PUSH
8492: LD_INT 14
8494: PUSH
8495: LD_INT 15
8497: PUSH
8498: LD_INT 16
8500: PUSH
8501: LD_INT 17
8503: PUSH
8504: LD_INT 18
8506: PUSH
8507: LD_INT 19
8509: PUSH
8510: LD_INT 20
8512: PUSH
8513: LD_INT 21
8515: PUSH
8516: LD_INT 22
8518: PUSH
8519: LD_INT 23
8521: PUSH
8522: LD_INT 24
8524: PUSH
8525: LD_INT 25
8527: PUSH
8528: LD_INT 26
8530: PUSH
8531: LD_INT 28
8533: PUSH
8534: LD_INT 30
8536: PUSH
8537: LD_INT 31
8539: PUSH
8540: LD_INT 32
8542: PUSH
8543: LD_INT 36
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 101
8579: PUSH
8580: LD_INT 102
8582: PUSH
8583: LD_INT 103
8585: PUSH
8586: LD_INT 104
8588: PUSH
8589: LD_INT 105
8591: PUSH
8592: LD_INT 106
8594: PUSH
8595: LD_INT 107
8597: PUSH
8598: LD_INT 108
8600: PUSH
8601: LD_INT 109
8603: PUSH
8604: LD_INT 110
8606: PUSH
8607: LD_INT 111
8609: PUSH
8610: LD_INT 112
8612: PUSH
8613: LD_INT 114
8615: PUSH
8616: LD_INT 116
8618: PUSH
8619: LD_INT 117
8621: PUSH
8622: LD_INT 118
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: ST_TO_ADDR
8647: GO 10542
8649: LD_INT 11
8651: DOUBLE
8652: EQUAL
8653: IFTRUE 8657
8655: GO 8861
8657: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8658: LD_ADDR_VAR 0 2
8662: PUSH
8663: LD_INT 2
8665: PUSH
8666: LD_INT 3
8668: PUSH
8669: LD_INT 4
8671: PUSH
8672: LD_INT 5
8674: PUSH
8675: LD_INT 6
8677: PUSH
8678: LD_INT 7
8680: PUSH
8681: LD_INT 8
8683: PUSH
8684: LD_INT 9
8686: PUSH
8687: LD_INT 10
8689: PUSH
8690: LD_INT 11
8692: PUSH
8693: LD_INT 12
8695: PUSH
8696: LD_INT 13
8698: PUSH
8699: LD_INT 14
8701: PUSH
8702: LD_INT 15
8704: PUSH
8705: LD_INT 16
8707: PUSH
8708: LD_INT 17
8710: PUSH
8711: LD_INT 18
8713: PUSH
8714: LD_INT 19
8716: PUSH
8717: LD_INT 20
8719: PUSH
8720: LD_INT 21
8722: PUSH
8723: LD_INT 22
8725: PUSH
8726: LD_INT 23
8728: PUSH
8729: LD_INT 24
8731: PUSH
8732: LD_INT 25
8734: PUSH
8735: LD_INT 26
8737: PUSH
8738: LD_INT 28
8740: PUSH
8741: LD_INT 30
8743: PUSH
8744: LD_INT 31
8746: PUSH
8747: LD_INT 32
8749: PUSH
8750: LD_INT 34
8752: PUSH
8753: LD_INT 36
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 101
8791: PUSH
8792: LD_INT 102
8794: PUSH
8795: LD_INT 103
8797: PUSH
8798: LD_INT 104
8800: PUSH
8801: LD_INT 105
8803: PUSH
8804: LD_INT 106
8806: PUSH
8807: LD_INT 107
8809: PUSH
8810: LD_INT 108
8812: PUSH
8813: LD_INT 109
8815: PUSH
8816: LD_INT 110
8818: PUSH
8819: LD_INT 111
8821: PUSH
8822: LD_INT 112
8824: PUSH
8825: LD_INT 114
8827: PUSH
8828: LD_INT 116
8830: PUSH
8831: LD_INT 117
8833: PUSH
8834: LD_INT 118
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: ST_TO_ADDR
8859: GO 10542
8861: LD_INT 12
8863: DOUBLE
8864: EQUAL
8865: IFTRUE 8869
8867: GO 9089
8869: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8870: LD_ADDR_VAR 0 2
8874: PUSH
8875: LD_INT 1
8877: PUSH
8878: LD_INT 2
8880: PUSH
8881: LD_INT 3
8883: PUSH
8884: LD_INT 4
8886: PUSH
8887: LD_INT 5
8889: PUSH
8890: LD_INT 6
8892: PUSH
8893: LD_INT 7
8895: PUSH
8896: LD_INT 8
8898: PUSH
8899: LD_INT 9
8901: PUSH
8902: LD_INT 10
8904: PUSH
8905: LD_INT 11
8907: PUSH
8908: LD_INT 12
8910: PUSH
8911: LD_INT 13
8913: PUSH
8914: LD_INT 14
8916: PUSH
8917: LD_INT 15
8919: PUSH
8920: LD_INT 16
8922: PUSH
8923: LD_INT 17
8925: PUSH
8926: LD_INT 18
8928: PUSH
8929: LD_INT 19
8931: PUSH
8932: LD_INT 20
8934: PUSH
8935: LD_INT 21
8937: PUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 23
8943: PUSH
8944: LD_INT 24
8946: PUSH
8947: LD_INT 25
8949: PUSH
8950: LD_INT 26
8952: PUSH
8953: LD_INT 27
8955: PUSH
8956: LD_INT 28
8958: PUSH
8959: LD_INT 30
8961: PUSH
8962: LD_INT 31
8964: PUSH
8965: LD_INT 32
8967: PUSH
8968: LD_INT 33
8970: PUSH
8971: LD_INT 34
8973: PUSH
8974: LD_INT 36
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 101
9015: PUSH
9016: LD_INT 102
9018: PUSH
9019: LD_INT 103
9021: PUSH
9022: LD_INT 104
9024: PUSH
9025: LD_INT 105
9027: PUSH
9028: LD_INT 106
9030: PUSH
9031: LD_INT 107
9033: PUSH
9034: LD_INT 108
9036: PUSH
9037: LD_INT 109
9039: PUSH
9040: LD_INT 110
9042: PUSH
9043: LD_INT 111
9045: PUSH
9046: LD_INT 112
9048: PUSH
9049: LD_INT 113
9051: PUSH
9052: LD_INT 114
9054: PUSH
9055: LD_INT 116
9057: PUSH
9058: LD_INT 117
9060: PUSH
9061: LD_INT 118
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: ST_TO_ADDR
9087: GO 10542
9089: LD_INT 13
9091: DOUBLE
9092: EQUAL
9093: IFTRUE 9097
9095: GO 9305
9097: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9098: LD_ADDR_VAR 0 2
9102: PUSH
9103: LD_INT 1
9105: PUSH
9106: LD_INT 2
9108: PUSH
9109: LD_INT 3
9111: PUSH
9112: LD_INT 4
9114: PUSH
9115: LD_INT 5
9117: PUSH
9118: LD_INT 8
9120: PUSH
9121: LD_INT 9
9123: PUSH
9124: LD_INT 10
9126: PUSH
9127: LD_INT 11
9129: PUSH
9130: LD_INT 12
9132: PUSH
9133: LD_INT 14
9135: PUSH
9136: LD_INT 15
9138: PUSH
9139: LD_INT 16
9141: PUSH
9142: LD_INT 17
9144: PUSH
9145: LD_INT 18
9147: PUSH
9148: LD_INT 19
9150: PUSH
9151: LD_INT 20
9153: PUSH
9154: LD_INT 21
9156: PUSH
9157: LD_INT 22
9159: PUSH
9160: LD_INT 23
9162: PUSH
9163: LD_INT 24
9165: PUSH
9166: LD_INT 25
9168: PUSH
9169: LD_INT 26
9171: PUSH
9172: LD_INT 27
9174: PUSH
9175: LD_INT 28
9177: PUSH
9178: LD_INT 30
9180: PUSH
9181: LD_INT 31
9183: PUSH
9184: LD_INT 32
9186: PUSH
9187: LD_INT 33
9189: PUSH
9190: LD_INT 34
9192: PUSH
9193: LD_INT 36
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 101
9231: PUSH
9232: LD_INT 102
9234: PUSH
9235: LD_INT 103
9237: PUSH
9238: LD_INT 104
9240: PUSH
9241: LD_INT 105
9243: PUSH
9244: LD_INT 106
9246: PUSH
9247: LD_INT 107
9249: PUSH
9250: LD_INT 108
9252: PUSH
9253: LD_INT 109
9255: PUSH
9256: LD_INT 110
9258: PUSH
9259: LD_INT 111
9261: PUSH
9262: LD_INT 112
9264: PUSH
9265: LD_INT 113
9267: PUSH
9268: LD_INT 114
9270: PUSH
9271: LD_INT 116
9273: PUSH
9274: LD_INT 117
9276: PUSH
9277: LD_INT 118
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: ST_TO_ADDR
9303: GO 10542
9305: LD_INT 14
9307: DOUBLE
9308: EQUAL
9309: IFTRUE 9313
9311: GO 9537
9313: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9314: LD_ADDR_VAR 0 2
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: LD_INT 2
9324: PUSH
9325: LD_INT 3
9327: PUSH
9328: LD_INT 4
9330: PUSH
9331: LD_INT 5
9333: PUSH
9334: LD_INT 6
9336: PUSH
9337: LD_INT 7
9339: PUSH
9340: LD_INT 8
9342: PUSH
9343: LD_INT 9
9345: PUSH
9346: LD_INT 10
9348: PUSH
9349: LD_INT 11
9351: PUSH
9352: LD_INT 12
9354: PUSH
9355: LD_INT 13
9357: PUSH
9358: LD_INT 14
9360: PUSH
9361: LD_INT 15
9363: PUSH
9364: LD_INT 16
9366: PUSH
9367: LD_INT 17
9369: PUSH
9370: LD_INT 18
9372: PUSH
9373: LD_INT 19
9375: PUSH
9376: LD_INT 20
9378: PUSH
9379: LD_INT 21
9381: PUSH
9382: LD_INT 22
9384: PUSH
9385: LD_INT 23
9387: PUSH
9388: LD_INT 24
9390: PUSH
9391: LD_INT 25
9393: PUSH
9394: LD_INT 26
9396: PUSH
9397: LD_INT 27
9399: PUSH
9400: LD_INT 28
9402: PUSH
9403: LD_INT 29
9405: PUSH
9406: LD_INT 30
9408: PUSH
9409: LD_INT 31
9411: PUSH
9412: LD_INT 32
9414: PUSH
9415: LD_INT 33
9417: PUSH
9418: LD_INT 34
9420: PUSH
9421: LD_INT 36
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 101
9463: PUSH
9464: LD_INT 102
9466: PUSH
9467: LD_INT 103
9469: PUSH
9470: LD_INT 104
9472: PUSH
9473: LD_INT 105
9475: PUSH
9476: LD_INT 106
9478: PUSH
9479: LD_INT 107
9481: PUSH
9482: LD_INT 108
9484: PUSH
9485: LD_INT 109
9487: PUSH
9488: LD_INT 110
9490: PUSH
9491: LD_INT 111
9493: PUSH
9494: LD_INT 112
9496: PUSH
9497: LD_INT 113
9499: PUSH
9500: LD_INT 114
9502: PUSH
9503: LD_INT 116
9505: PUSH
9506: LD_INT 117
9508: PUSH
9509: LD_INT 118
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: ST_TO_ADDR
9535: GO 10542
9537: LD_INT 15
9539: DOUBLE
9540: EQUAL
9541: IFTRUE 9545
9543: GO 9769
9545: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9546: LD_ADDR_VAR 0 2
9550: PUSH
9551: LD_INT 1
9553: PUSH
9554: LD_INT 2
9556: PUSH
9557: LD_INT 3
9559: PUSH
9560: LD_INT 4
9562: PUSH
9563: LD_INT 5
9565: PUSH
9566: LD_INT 6
9568: PUSH
9569: LD_INT 7
9571: PUSH
9572: LD_INT 8
9574: PUSH
9575: LD_INT 9
9577: PUSH
9578: LD_INT 10
9580: PUSH
9581: LD_INT 11
9583: PUSH
9584: LD_INT 12
9586: PUSH
9587: LD_INT 13
9589: PUSH
9590: LD_INT 14
9592: PUSH
9593: LD_INT 15
9595: PUSH
9596: LD_INT 16
9598: PUSH
9599: LD_INT 17
9601: PUSH
9602: LD_INT 18
9604: PUSH
9605: LD_INT 19
9607: PUSH
9608: LD_INT 20
9610: PUSH
9611: LD_INT 21
9613: PUSH
9614: LD_INT 22
9616: PUSH
9617: LD_INT 23
9619: PUSH
9620: LD_INT 24
9622: PUSH
9623: LD_INT 25
9625: PUSH
9626: LD_INT 26
9628: PUSH
9629: LD_INT 27
9631: PUSH
9632: LD_INT 28
9634: PUSH
9635: LD_INT 29
9637: PUSH
9638: LD_INT 30
9640: PUSH
9641: LD_INT 31
9643: PUSH
9644: LD_INT 32
9646: PUSH
9647: LD_INT 33
9649: PUSH
9650: LD_INT 34
9652: PUSH
9653: LD_INT 36
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 101
9695: PUSH
9696: LD_INT 102
9698: PUSH
9699: LD_INT 103
9701: PUSH
9702: LD_INT 104
9704: PUSH
9705: LD_INT 105
9707: PUSH
9708: LD_INT 106
9710: PUSH
9711: LD_INT 107
9713: PUSH
9714: LD_INT 108
9716: PUSH
9717: LD_INT 109
9719: PUSH
9720: LD_INT 110
9722: PUSH
9723: LD_INT 111
9725: PUSH
9726: LD_INT 112
9728: PUSH
9729: LD_INT 113
9731: PUSH
9732: LD_INT 114
9734: PUSH
9735: LD_INT 116
9737: PUSH
9738: LD_INT 117
9740: PUSH
9741: LD_INT 118
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: ST_TO_ADDR
9767: GO 10542
9769: LD_INT 16
9771: DOUBLE
9772: EQUAL
9773: IFTRUE 9777
9775: GO 9913
9777: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9778: LD_ADDR_VAR 0 2
9782: PUSH
9783: LD_INT 2
9785: PUSH
9786: LD_INT 4
9788: PUSH
9789: LD_INT 5
9791: PUSH
9792: LD_INT 7
9794: PUSH
9795: LD_INT 11
9797: PUSH
9798: LD_INT 12
9800: PUSH
9801: LD_INT 15
9803: PUSH
9804: LD_INT 16
9806: PUSH
9807: LD_INT 20
9809: PUSH
9810: LD_INT 21
9812: PUSH
9813: LD_INT 22
9815: PUSH
9816: LD_INT 23
9818: PUSH
9819: LD_INT 25
9821: PUSH
9822: LD_INT 26
9824: PUSH
9825: LD_INT 30
9827: PUSH
9828: LD_INT 31
9830: PUSH
9831: LD_INT 32
9833: PUSH
9834: LD_INT 33
9836: PUSH
9837: LD_INT 34
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 101
9863: PUSH
9864: LD_INT 102
9866: PUSH
9867: LD_INT 103
9869: PUSH
9870: LD_INT 106
9872: PUSH
9873: LD_INT 108
9875: PUSH
9876: LD_INT 112
9878: PUSH
9879: LD_INT 113
9881: PUSH
9882: LD_INT 114
9884: PUSH
9885: LD_INT 116
9887: PUSH
9888: LD_INT 117
9890: PUSH
9891: LD_INT 118
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: ST_TO_ADDR
9911: GO 10542
9913: LD_INT 17
9915: DOUBLE
9916: EQUAL
9917: IFTRUE 9921
9919: GO 10145
9921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: LD_INT 1
9929: PUSH
9930: LD_INT 2
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: LD_INT 4
9938: PUSH
9939: LD_INT 5
9941: PUSH
9942: LD_INT 6
9944: PUSH
9945: LD_INT 7
9947: PUSH
9948: LD_INT 8
9950: PUSH
9951: LD_INT 9
9953: PUSH
9954: LD_INT 10
9956: PUSH
9957: LD_INT 11
9959: PUSH
9960: LD_INT 12
9962: PUSH
9963: LD_INT 13
9965: PUSH
9966: LD_INT 14
9968: PUSH
9969: LD_INT 15
9971: PUSH
9972: LD_INT 16
9974: PUSH
9975: LD_INT 17
9977: PUSH
9978: LD_INT 18
9980: PUSH
9981: LD_INT 19
9983: PUSH
9984: LD_INT 20
9986: PUSH
9987: LD_INT 21
9989: PUSH
9990: LD_INT 22
9992: PUSH
9993: LD_INT 23
9995: PUSH
9996: LD_INT 24
9998: PUSH
9999: LD_INT 25
10001: PUSH
10002: LD_INT 26
10004: PUSH
10005: LD_INT 27
10007: PUSH
10008: LD_INT 28
10010: PUSH
10011: LD_INT 29
10013: PUSH
10014: LD_INT 30
10016: PUSH
10017: LD_INT 31
10019: PUSH
10020: LD_INT 32
10022: PUSH
10023: LD_INT 33
10025: PUSH
10026: LD_INT 34
10028: PUSH
10029: LD_INT 36
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 101
10071: PUSH
10072: LD_INT 102
10074: PUSH
10075: LD_INT 103
10077: PUSH
10078: LD_INT 104
10080: PUSH
10081: LD_INT 105
10083: PUSH
10084: LD_INT 106
10086: PUSH
10087: LD_INT 107
10089: PUSH
10090: LD_INT 108
10092: PUSH
10093: LD_INT 109
10095: PUSH
10096: LD_INT 110
10098: PUSH
10099: LD_INT 111
10101: PUSH
10102: LD_INT 112
10104: PUSH
10105: LD_INT 113
10107: PUSH
10108: LD_INT 114
10110: PUSH
10111: LD_INT 116
10113: PUSH
10114: LD_INT 117
10116: PUSH
10117: LD_INT 118
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: ST_TO_ADDR
10143: GO 10542
10145: LD_INT 18
10147: DOUBLE
10148: EQUAL
10149: IFTRUE 10153
10151: GO 10301
10153: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10154: LD_ADDR_VAR 0 2
10158: PUSH
10159: LD_INT 2
10161: PUSH
10162: LD_INT 4
10164: PUSH
10165: LD_INT 5
10167: PUSH
10168: LD_INT 7
10170: PUSH
10171: LD_INT 11
10173: PUSH
10174: LD_INT 12
10176: PUSH
10177: LD_INT 15
10179: PUSH
10180: LD_INT 16
10182: PUSH
10183: LD_INT 20
10185: PUSH
10186: LD_INT 21
10188: PUSH
10189: LD_INT 22
10191: PUSH
10192: LD_INT 23
10194: PUSH
10195: LD_INT 25
10197: PUSH
10198: LD_INT 26
10200: PUSH
10201: LD_INT 30
10203: PUSH
10204: LD_INT 31
10206: PUSH
10207: LD_INT 32
10209: PUSH
10210: LD_INT 33
10212: PUSH
10213: LD_INT 34
10215: PUSH
10216: LD_INT 35
10218: PUSH
10219: LD_INT 36
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 101
10247: PUSH
10248: LD_INT 102
10250: PUSH
10251: LD_INT 103
10253: PUSH
10254: LD_INT 106
10256: PUSH
10257: LD_INT 108
10259: PUSH
10260: LD_INT 112
10262: PUSH
10263: LD_INT 113
10265: PUSH
10266: LD_INT 114
10268: PUSH
10269: LD_INT 115
10271: PUSH
10272: LD_INT 116
10274: PUSH
10275: LD_INT 117
10277: PUSH
10278: LD_INT 118
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: ST_TO_ADDR
10299: GO 10542
10301: LD_INT 19
10303: DOUBLE
10304: EQUAL
10305: IFTRUE 10309
10307: GO 10541
10309: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10310: LD_ADDR_VAR 0 2
10314: PUSH
10315: LD_INT 1
10317: PUSH
10318: LD_INT 2
10320: PUSH
10321: LD_INT 3
10323: PUSH
10324: LD_INT 4
10326: PUSH
10327: LD_INT 5
10329: PUSH
10330: LD_INT 6
10332: PUSH
10333: LD_INT 7
10335: PUSH
10336: LD_INT 8
10338: PUSH
10339: LD_INT 9
10341: PUSH
10342: LD_INT 10
10344: PUSH
10345: LD_INT 11
10347: PUSH
10348: LD_INT 12
10350: PUSH
10351: LD_INT 13
10353: PUSH
10354: LD_INT 14
10356: PUSH
10357: LD_INT 15
10359: PUSH
10360: LD_INT 16
10362: PUSH
10363: LD_INT 17
10365: PUSH
10366: LD_INT 18
10368: PUSH
10369: LD_INT 19
10371: PUSH
10372: LD_INT 20
10374: PUSH
10375: LD_INT 21
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 23
10383: PUSH
10384: LD_INT 24
10386: PUSH
10387: LD_INT 25
10389: PUSH
10390: LD_INT 26
10392: PUSH
10393: LD_INT 27
10395: PUSH
10396: LD_INT 28
10398: PUSH
10399: LD_INT 29
10401: PUSH
10402: LD_INT 30
10404: PUSH
10405: LD_INT 31
10407: PUSH
10408: LD_INT 32
10410: PUSH
10411: LD_INT 33
10413: PUSH
10414: LD_INT 34
10416: PUSH
10417: LD_INT 35
10419: PUSH
10420: LD_INT 36
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 101
10463: PUSH
10464: LD_INT 102
10466: PUSH
10467: LD_INT 103
10469: PUSH
10470: LD_INT 104
10472: PUSH
10473: LD_INT 105
10475: PUSH
10476: LD_INT 106
10478: PUSH
10479: LD_INT 107
10481: PUSH
10482: LD_INT 108
10484: PUSH
10485: LD_INT 109
10487: PUSH
10488: LD_INT 110
10490: PUSH
10491: LD_INT 111
10493: PUSH
10494: LD_INT 112
10496: PUSH
10497: LD_INT 113
10499: PUSH
10500: LD_INT 114
10502: PUSH
10503: LD_INT 115
10505: PUSH
10506: LD_INT 116
10508: PUSH
10509: LD_INT 117
10511: PUSH
10512: LD_INT 118
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: ST_TO_ADDR
10539: GO 10542
10541: POP
// end else
10542: GO 10773
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10544: LD_ADDR_VAR 0 2
10548: PUSH
10549: LD_INT 1
10551: PUSH
10552: LD_INT 2
10554: PUSH
10555: LD_INT 3
10557: PUSH
10558: LD_INT 4
10560: PUSH
10561: LD_INT 5
10563: PUSH
10564: LD_INT 6
10566: PUSH
10567: LD_INT 7
10569: PUSH
10570: LD_INT 8
10572: PUSH
10573: LD_INT 9
10575: PUSH
10576: LD_INT 10
10578: PUSH
10579: LD_INT 11
10581: PUSH
10582: LD_INT 12
10584: PUSH
10585: LD_INT 13
10587: PUSH
10588: LD_INT 14
10590: PUSH
10591: LD_INT 15
10593: PUSH
10594: LD_INT 16
10596: PUSH
10597: LD_INT 17
10599: PUSH
10600: LD_INT 18
10602: PUSH
10603: LD_INT 19
10605: PUSH
10606: LD_INT 20
10608: PUSH
10609: LD_INT 21
10611: PUSH
10612: LD_INT 22
10614: PUSH
10615: LD_INT 23
10617: PUSH
10618: LD_INT 24
10620: PUSH
10621: LD_INT 25
10623: PUSH
10624: LD_INT 26
10626: PUSH
10627: LD_INT 27
10629: PUSH
10630: LD_INT 28
10632: PUSH
10633: LD_INT 29
10635: PUSH
10636: LD_INT 30
10638: PUSH
10639: LD_INT 31
10641: PUSH
10642: LD_INT 32
10644: PUSH
10645: LD_INT 33
10647: PUSH
10648: LD_INT 34
10650: PUSH
10651: LD_INT 35
10653: PUSH
10654: LD_INT 36
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: PUSH
10695: LD_INT 101
10697: PUSH
10698: LD_INT 102
10700: PUSH
10701: LD_INT 103
10703: PUSH
10704: LD_INT 104
10706: PUSH
10707: LD_INT 105
10709: PUSH
10710: LD_INT 106
10712: PUSH
10713: LD_INT 107
10715: PUSH
10716: LD_INT 108
10718: PUSH
10719: LD_INT 109
10721: PUSH
10722: LD_INT 110
10724: PUSH
10725: LD_INT 111
10727: PUSH
10728: LD_INT 112
10730: PUSH
10731: LD_INT 113
10733: PUSH
10734: LD_INT 114
10736: PUSH
10737: LD_INT 115
10739: PUSH
10740: LD_INT 116
10742: PUSH
10743: LD_INT 117
10745: PUSH
10746: LD_INT 118
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: ST_TO_ADDR
// if result then
10773: LD_VAR 0 2
10777: IFFALSE 11563
// begin normal :=  ;
10779: LD_ADDR_VAR 0 5
10783: PUSH
10784: LD_STRING 
10786: ST_TO_ADDR
// hardcore :=  ;
10787: LD_ADDR_VAR 0 6
10791: PUSH
10792: LD_STRING 
10794: ST_TO_ADDR
// active :=  ;
10795: LD_ADDR_VAR 0 7
10799: PUSH
10800: LD_STRING 
10802: ST_TO_ADDR
// for i = 1 to normalCounter do
10803: LD_ADDR_VAR 0 8
10807: PUSH
10808: DOUBLE
10809: LD_INT 1
10811: DEC
10812: ST_TO_ADDR
10813: LD_EXP 27
10817: PUSH
10818: FOR_TO
10819: IFFALSE 10920
// begin tmp := 0 ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_STRING 0
10828: ST_TO_ADDR
// if result [ 1 ] then
10829: LD_VAR 0 2
10833: PUSH
10834: LD_INT 1
10836: ARRAY
10837: IFFALSE 10902
// if result [ 1 ] [ 1 ] = i then
10839: LD_VAR 0 2
10843: PUSH
10844: LD_INT 1
10846: ARRAY
10847: PUSH
10848: LD_INT 1
10850: ARRAY
10851: PUSH
10852: LD_VAR 0 8
10856: EQUAL
10857: IFFALSE 10902
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10859: LD_ADDR_VAR 0 2
10863: PUSH
10864: LD_VAR 0 2
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: LD_VAR 0 2
10876: PUSH
10877: LD_INT 1
10879: ARRAY
10880: PPUSH
10881: LD_INT 1
10883: PPUSH
10884: CALL_OW 3
10888: PPUSH
10889: CALL_OW 1
10893: ST_TO_ADDR
// tmp := 1 ;
10894: LD_ADDR_VAR 0 3
10898: PUSH
10899: LD_STRING 1
10901: ST_TO_ADDR
// end ; normal := normal & tmp ;
10902: LD_ADDR_VAR 0 5
10906: PUSH
10907: LD_VAR 0 5
10911: PUSH
10912: LD_VAR 0 3
10916: STR
10917: ST_TO_ADDR
// end ;
10918: GO 10818
10920: POP
10921: POP
// for i = 1 to hardcoreCounter do
10922: LD_ADDR_VAR 0 8
10926: PUSH
10927: DOUBLE
10928: LD_INT 1
10930: DEC
10931: ST_TO_ADDR
10932: LD_EXP 28
10936: PUSH
10937: FOR_TO
10938: IFFALSE 11043
// begin tmp := 0 ;
10940: LD_ADDR_VAR 0 3
10944: PUSH
10945: LD_STRING 0
10947: ST_TO_ADDR
// if result [ 2 ] then
10948: LD_VAR 0 2
10952: PUSH
10953: LD_INT 2
10955: ARRAY
10956: IFFALSE 11025
// if result [ 2 ] [ 1 ] = 100 + i then
10958: LD_VAR 0 2
10962: PUSH
10963: LD_INT 2
10965: ARRAY
10966: PUSH
10967: LD_INT 1
10969: ARRAY
10970: PUSH
10971: LD_INT 100
10973: PUSH
10974: LD_VAR 0 8
10978: PLUS
10979: EQUAL
10980: IFFALSE 11025
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10982: LD_ADDR_VAR 0 2
10986: PUSH
10987: LD_VAR 0 2
10991: PPUSH
10992: LD_INT 2
10994: PPUSH
10995: LD_VAR 0 2
10999: PUSH
11000: LD_INT 2
11002: ARRAY
11003: PPUSH
11004: LD_INT 1
11006: PPUSH
11007: CALL_OW 3
11011: PPUSH
11012: CALL_OW 1
11016: ST_TO_ADDR
// tmp := 1 ;
11017: LD_ADDR_VAR 0 3
11021: PUSH
11022: LD_STRING 1
11024: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11025: LD_ADDR_VAR 0 6
11029: PUSH
11030: LD_VAR 0 6
11034: PUSH
11035: LD_VAR 0 3
11039: STR
11040: ST_TO_ADDR
// end ;
11041: GO 10937
11043: POP
11044: POP
// if isGameLoad then
11045: LD_VAR 0 1
11049: IFFALSE 11524
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11051: LD_ADDR_VAR 0 4
11055: PUSH
11056: LD_EXP 31
11060: PUSH
11061: LD_EXP 30
11065: PUSH
11066: LD_EXP 32
11070: PUSH
11071: LD_EXP 29
11075: PUSH
11076: LD_EXP 33
11080: PUSH
11081: LD_EXP 34
11085: PUSH
11086: LD_EXP 35
11090: PUSH
11091: LD_EXP 36
11095: PUSH
11096: LD_EXP 37
11100: PUSH
11101: LD_EXP 38
11105: PUSH
11106: LD_EXP 39
11110: PUSH
11111: LD_EXP 40
11115: PUSH
11116: LD_EXP 41
11120: PUSH
11121: LD_EXP 42
11125: PUSH
11126: LD_EXP 50
11130: PUSH
11131: LD_EXP 51
11135: PUSH
11136: LD_EXP 52
11140: PUSH
11141: LD_EXP 53
11145: PUSH
11146: LD_EXP 55
11150: PUSH
11151: LD_EXP 56
11155: PUSH
11156: LD_EXP 57
11160: PUSH
11161: LD_EXP 60
11165: PUSH
11166: LD_EXP 62
11170: PUSH
11171: LD_EXP 63
11175: PUSH
11176: LD_EXP 64
11180: PUSH
11181: LD_EXP 66
11185: PUSH
11186: LD_EXP 67
11190: PUSH
11191: LD_EXP 70
11195: PUSH
11196: LD_EXP 71
11200: PUSH
11201: LD_EXP 72
11205: PUSH
11206: LD_EXP 73
11210: PUSH
11211: LD_EXP 74
11215: PUSH
11216: LD_EXP 75
11220: PUSH
11221: LD_EXP 76
11225: PUSH
11226: LD_EXP 77
11230: PUSH
11231: LD_EXP 78
11235: PUSH
11236: LD_EXP 43
11240: PUSH
11241: LD_EXP 44
11245: PUSH
11246: LD_EXP 47
11250: PUSH
11251: LD_EXP 48
11255: PUSH
11256: LD_EXP 49
11260: PUSH
11261: LD_EXP 45
11265: PUSH
11266: LD_EXP 46
11270: PUSH
11271: LD_EXP 54
11275: PUSH
11276: LD_EXP 58
11280: PUSH
11281: LD_EXP 59
11285: PUSH
11286: LD_EXP 61
11290: PUSH
11291: LD_EXP 65
11295: PUSH
11296: LD_EXP 68
11300: PUSH
11301: LD_EXP 69
11305: PUSH
11306: LD_EXP 79
11310: PUSH
11311: LD_EXP 80
11315: PUSH
11316: LD_EXP 81
11320: PUSH
11321: LD_EXP 82
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: ST_TO_ADDR
// tmp :=  ;
11382: LD_ADDR_VAR 0 3
11386: PUSH
11387: LD_STRING 
11389: ST_TO_ADDR
// for i = 1 to normalCounter do
11390: LD_ADDR_VAR 0 8
11394: PUSH
11395: DOUBLE
11396: LD_INT 1
11398: DEC
11399: ST_TO_ADDR
11400: LD_EXP 27
11404: PUSH
11405: FOR_TO
11406: IFFALSE 11442
// begin if flags [ i ] then
11408: LD_VAR 0 4
11412: PUSH
11413: LD_VAR 0 8
11417: ARRAY
11418: IFFALSE 11440
// tmp := tmp & i & ; ;
11420: LD_ADDR_VAR 0 3
11424: PUSH
11425: LD_VAR 0 3
11429: PUSH
11430: LD_VAR 0 8
11434: STR
11435: PUSH
11436: LD_STRING ;
11438: STR
11439: ST_TO_ADDR
// end ;
11440: GO 11405
11442: POP
11443: POP
// for i = 1 to hardcoreCounter do
11444: LD_ADDR_VAR 0 8
11448: PUSH
11449: DOUBLE
11450: LD_INT 1
11452: DEC
11453: ST_TO_ADDR
11454: LD_EXP 28
11458: PUSH
11459: FOR_TO
11460: IFFALSE 11506
// begin if flags [ normalCounter + i ] then
11462: LD_VAR 0 4
11466: PUSH
11467: LD_EXP 27
11471: PUSH
11472: LD_VAR 0 8
11476: PLUS
11477: ARRAY
11478: IFFALSE 11504
// tmp := tmp & ( 100 + i ) & ; ;
11480: LD_ADDR_VAR 0 3
11484: PUSH
11485: LD_VAR 0 3
11489: PUSH
11490: LD_INT 100
11492: PUSH
11493: LD_VAR 0 8
11497: PLUS
11498: STR
11499: PUSH
11500: LD_STRING ;
11502: STR
11503: ST_TO_ADDR
// end ;
11504: GO 11459
11506: POP
11507: POP
// if tmp then
11508: LD_VAR 0 3
11512: IFFALSE 11524
// active := tmp ;
11514: LD_ADDR_VAR 0 7
11518: PUSH
11519: LD_VAR 0 3
11523: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11524: LD_STRING getStreamItemsFromMission("
11526: PUSH
11527: LD_VAR 0 5
11531: STR
11532: PUSH
11533: LD_STRING ","
11535: STR
11536: PUSH
11537: LD_VAR 0 6
11541: STR
11542: PUSH
11543: LD_STRING ","
11545: STR
11546: PUSH
11547: LD_VAR 0 7
11551: STR
11552: PUSH
11553: LD_STRING ")
11555: STR
11556: PPUSH
11557: CALL_OW 559
// end else
11561: GO 11570
// ToLua ( getStreamItemsFromMission("","","") ) ;
11563: LD_STRING getStreamItemsFromMission("","","")
11565: PPUSH
11566: CALL_OW 559
// end ;
11570: LD_VAR 0 2
11574: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11575: LD_EXP 26
11579: IFFALSE 11587
11581: PUSH
11582: LD_EXP 31
11586: AND
11587: IFFALSE 11711
11589: GO 11591
11591: DISABLE
11592: LD_INT 0
11594: PPUSH
11595: PPUSH
// begin enable ;
11596: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11597: LD_ADDR_VAR 0 2
11601: PUSH
11602: LD_INT 22
11604: PUSH
11605: LD_OWVAR 2
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 2
11616: PUSH
11617: LD_INT 34
11619: PUSH
11620: LD_INT 7
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 34
11629: PUSH
11630: LD_INT 45
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: LD_INT 34
11639: PUSH
11640: LD_INT 28
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 34
11649: PUSH
11650: LD_INT 47
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 69
11672: ST_TO_ADDR
// if not tmp then
11673: LD_VAR 0 2
11677: NOT
11678: IFFALSE 11682
// exit ;
11680: GO 11711
// for i in tmp do
11682: LD_ADDR_VAR 0 1
11686: PUSH
11687: LD_VAR 0 2
11691: PUSH
11692: FOR_IN
11693: IFFALSE 11709
// begin SetLives ( i , 0 ) ;
11695: LD_VAR 0 1
11699: PPUSH
11700: LD_INT 0
11702: PPUSH
11703: CALL_OW 234
// end ;
11707: GO 11692
11709: POP
11710: POP
// end ;
11711: PPOPN 2
11713: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11714: LD_EXP 26
11718: IFFALSE 11726
11720: PUSH
11721: LD_EXP 32
11725: AND
11726: IFFALSE 11810
11728: GO 11730
11730: DISABLE
11731: LD_INT 0
11733: PPUSH
11734: PPUSH
// begin enable ;
11735: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11736: LD_ADDR_VAR 0 2
11740: PUSH
11741: LD_INT 22
11743: PUSH
11744: LD_OWVAR 2
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 32
11755: PUSH
11756: LD_INT 3
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL_OW 69
11771: ST_TO_ADDR
// if not tmp then
11772: LD_VAR 0 2
11776: NOT
11777: IFFALSE 11781
// exit ;
11779: GO 11810
// for i in tmp do
11781: LD_ADDR_VAR 0 1
11785: PUSH
11786: LD_VAR 0 2
11790: PUSH
11791: FOR_IN
11792: IFFALSE 11808
// begin SetLives ( i , 0 ) ;
11794: LD_VAR 0 1
11798: PPUSH
11799: LD_INT 0
11801: PPUSH
11802: CALL_OW 234
// end ;
11806: GO 11791
11808: POP
11809: POP
// end ;
11810: PPOPN 2
11812: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11813: LD_EXP 26
11817: IFFALSE 11825
11819: PUSH
11820: LD_EXP 29
11824: AND
11825: IFFALSE 11918
11827: GO 11829
11829: DISABLE
11830: LD_INT 0
11832: PPUSH
// begin enable ;
11833: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11834: LD_ADDR_VAR 0 1
11838: PUSH
11839: LD_INT 22
11841: PUSH
11842: LD_OWVAR 2
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 2
11853: PUSH
11854: LD_INT 25
11856: PUSH
11857: LD_INT 5
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 25
11866: PUSH
11867: LD_INT 9
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 25
11876: PUSH
11877: LD_INT 8
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PPUSH
11894: CALL_OW 69
11898: PUSH
11899: FOR_IN
11900: IFFALSE 11916
// begin SetClass ( i , 1 ) ;
11902: LD_VAR 0 1
11906: PPUSH
11907: LD_INT 1
11909: PPUSH
11910: CALL_OW 336
// end ;
11914: GO 11899
11916: POP
11917: POP
// end ;
11918: PPOPN 1
11920: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11921: LD_EXP 26
11925: IFFALSE 11933
11927: PUSH
11928: LD_EXP 30
11932: AND
11933: IFFALSE 11945
11935: PUSH
11936: LD_OWVAR 65
11940: PUSH
11941: LD_INT 7
11943: LESS
11944: AND
11945: IFFALSE 11959
11947: GO 11949
11949: DISABLE
// begin enable ;
11950: ENABLE
// game_speed := 7 ;
11951: LD_ADDR_OWVAR 65
11955: PUSH
11956: LD_INT 7
11958: ST_TO_ADDR
// end ;
11959: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11960: LD_EXP 26
11964: IFFALSE 11972
11966: PUSH
11967: LD_EXP 33
11971: AND
11972: IFFALSE 12174
11974: GO 11976
11976: DISABLE
11977: LD_INT 0
11979: PPUSH
11980: PPUSH
11981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11982: LD_ADDR_VAR 0 3
11986: PUSH
11987: LD_INT 81
11989: PUSH
11990: LD_OWVAR 2
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 21
12001: PUSH
12002: LD_INT 1
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PPUSH
12013: CALL_OW 69
12017: ST_TO_ADDR
// if not tmp then
12018: LD_VAR 0 3
12022: NOT
12023: IFFALSE 12027
// exit ;
12025: GO 12174
// if tmp > 5 then
12027: LD_VAR 0 3
12031: PUSH
12032: LD_INT 5
12034: GREATER
12035: IFFALSE 12047
// k := 5 else
12037: LD_ADDR_VAR 0 2
12041: PUSH
12042: LD_INT 5
12044: ST_TO_ADDR
12045: GO 12057
// k := tmp ;
12047: LD_ADDR_VAR 0 2
12051: PUSH
12052: LD_VAR 0 3
12056: ST_TO_ADDR
// for i := 1 to k do
12057: LD_ADDR_VAR 0 1
12061: PUSH
12062: DOUBLE
12063: LD_INT 1
12065: DEC
12066: ST_TO_ADDR
12067: LD_VAR 0 2
12071: PUSH
12072: FOR_TO
12073: IFFALSE 12172
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12075: LD_VAR 0 3
12079: PUSH
12080: LD_VAR 0 1
12084: ARRAY
12085: PPUSH
12086: LD_VAR 0 1
12090: PUSH
12091: LD_INT 4
12093: MOD
12094: PUSH
12095: LD_INT 1
12097: PLUS
12098: PPUSH
12099: CALL_OW 259
12103: PUSH
12104: LD_INT 10
12106: LESS
12107: IFFALSE 12170
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12109: LD_VAR 0 3
12113: PUSH
12114: LD_VAR 0 1
12118: ARRAY
12119: PPUSH
12120: LD_VAR 0 1
12124: PUSH
12125: LD_INT 4
12127: MOD
12128: PUSH
12129: LD_INT 1
12131: PLUS
12132: PPUSH
12133: LD_VAR 0 3
12137: PUSH
12138: LD_VAR 0 1
12142: ARRAY
12143: PPUSH
12144: LD_VAR 0 1
12148: PUSH
12149: LD_INT 4
12151: MOD
12152: PUSH
12153: LD_INT 1
12155: PLUS
12156: PPUSH
12157: CALL_OW 259
12161: PUSH
12162: LD_INT 1
12164: PLUS
12165: PPUSH
12166: CALL_OW 237
12170: GO 12072
12172: POP
12173: POP
// end ;
12174: PPOPN 3
12176: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12177: LD_EXP 26
12181: IFFALSE 12189
12183: PUSH
12184: LD_EXP 34
12188: AND
12189: IFFALSE 12209
12191: GO 12193
12193: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12194: LD_INT 4
12196: PPUSH
12197: LD_OWVAR 2
12201: PPUSH
12202: LD_INT 0
12204: PPUSH
12205: CALL_OW 324
12209: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12210: LD_EXP 26
12214: IFFALSE 12222
12216: PUSH
12217: LD_EXP 63
12221: AND
12222: IFFALSE 12242
12224: GO 12226
12226: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12227: LD_INT 19
12229: PPUSH
12230: LD_OWVAR 2
12234: PPUSH
12235: LD_INT 0
12237: PPUSH
12238: CALL_OW 324
12242: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12243: LD_EXP 26
12247: IFFALSE 12255
12249: PUSH
12250: LD_EXP 35
12254: AND
12255: IFFALSE 12357
12257: GO 12259
12259: DISABLE
12260: LD_INT 0
12262: PPUSH
12263: PPUSH
// begin enable ;
12264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12265: LD_ADDR_VAR 0 2
12269: PUSH
12270: LD_INT 22
12272: PUSH
12273: LD_OWVAR 2
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 2
12284: PUSH
12285: LD_INT 34
12287: PUSH
12288: LD_INT 11
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: LD_INT 34
12297: PUSH
12298: LD_INT 30
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: LIST
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PPUSH
12314: CALL_OW 69
12318: ST_TO_ADDR
// if not tmp then
12319: LD_VAR 0 2
12323: NOT
12324: IFFALSE 12328
// exit ;
12326: GO 12357
// for i in tmp do
12328: LD_ADDR_VAR 0 1
12332: PUSH
12333: LD_VAR 0 2
12337: PUSH
12338: FOR_IN
12339: IFFALSE 12355
// begin SetLives ( i , 0 ) ;
12341: LD_VAR 0 1
12345: PPUSH
12346: LD_INT 0
12348: PPUSH
12349: CALL_OW 234
// end ;
12353: GO 12338
12355: POP
12356: POP
// end ;
12357: PPOPN 2
12359: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12360: LD_EXP 26
12364: IFFALSE 12372
12366: PUSH
12367: LD_EXP 36
12371: AND
12372: IFFALSE 12392
12374: GO 12376
12376: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12377: LD_INT 32
12379: PPUSH
12380: LD_OWVAR 2
12384: PPUSH
12385: LD_INT 0
12387: PPUSH
12388: CALL_OW 324
12392: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12393: LD_EXP 26
12397: IFFALSE 12405
12399: PUSH
12400: LD_EXP 37
12404: AND
12405: IFFALSE 12588
12407: GO 12409
12409: DISABLE
12410: LD_INT 0
12412: PPUSH
12413: PPUSH
12414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12415: LD_ADDR_VAR 0 2
12419: PUSH
12420: LD_INT 22
12422: PUSH
12423: LD_OWVAR 2
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_INT 33
12434: PUSH
12435: LD_INT 3
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PPUSH
12446: CALL_OW 69
12450: ST_TO_ADDR
// if not tmp then
12451: LD_VAR 0 2
12455: NOT
12456: IFFALSE 12460
// exit ;
12458: GO 12588
// side := 0 ;
12460: LD_ADDR_VAR 0 3
12464: PUSH
12465: LD_INT 0
12467: ST_TO_ADDR
// for i := 1 to 8 do
12468: LD_ADDR_VAR 0 1
12472: PUSH
12473: DOUBLE
12474: LD_INT 1
12476: DEC
12477: ST_TO_ADDR
12478: LD_INT 8
12480: PUSH
12481: FOR_TO
12482: IFFALSE 12532
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12484: LD_OWVAR 2
12488: PUSH
12489: LD_VAR 0 1
12493: NONEQUAL
12494: IFFALSE 12516
12496: PUSH
12497: LD_OWVAR 2
12501: PPUSH
12502: LD_VAR 0 1
12506: PPUSH
12507: CALL_OW 81
12511: PUSH
12512: LD_INT 2
12514: EQUAL
12515: AND
12516: IFFALSE 12530
// begin side := i ;
12518: LD_ADDR_VAR 0 3
12522: PUSH
12523: LD_VAR 0 1
12527: ST_TO_ADDR
// break ;
12528: GO 12532
// end ;
12530: GO 12481
12532: POP
12533: POP
// if not side then
12534: LD_VAR 0 3
12538: NOT
12539: IFFALSE 12543
// exit ;
12541: GO 12588
// for i := 1 to tmp do
12543: LD_ADDR_VAR 0 1
12547: PUSH
12548: DOUBLE
12549: LD_INT 1
12551: DEC
12552: ST_TO_ADDR
12553: LD_VAR 0 2
12557: PUSH
12558: FOR_TO
12559: IFFALSE 12586
// if Prob ( 60 ) then
12561: LD_INT 60
12563: PPUSH
12564: CALL_OW 13
12568: IFFALSE 12584
// SetSide ( i , side ) ;
12570: LD_VAR 0 1
12574: PPUSH
12575: LD_VAR 0 3
12579: PPUSH
12580: CALL_OW 235
12584: GO 12558
12586: POP
12587: POP
// end ;
12588: PPOPN 3
12590: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12591: LD_EXP 26
12595: IFFALSE 12603
12597: PUSH
12598: LD_EXP 39
12602: AND
12603: IFFALSE 12722
12605: GO 12607
12607: DISABLE
12608: LD_INT 0
12610: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12611: LD_ADDR_VAR 0 1
12615: PUSH
12616: LD_INT 22
12618: PUSH
12619: LD_OWVAR 2
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: LD_INT 21
12630: PUSH
12631: LD_INT 1
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 3
12640: PUSH
12641: LD_INT 23
12643: PUSH
12644: LD_INT 0
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: PPUSH
12660: CALL_OW 69
12664: PUSH
12665: FOR_IN
12666: IFFALSE 12720
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12668: LD_VAR 0 1
12672: PPUSH
12673: CALL_OW 257
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: LD_INT 2
12683: PUSH
12684: LD_INT 3
12686: PUSH
12687: LD_INT 4
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: IN
12696: IFFALSE 12718
// SetClass ( un , rand ( 1 , 4 ) ) ;
12698: LD_VAR 0 1
12702: PPUSH
12703: LD_INT 1
12705: PPUSH
12706: LD_INT 4
12708: PPUSH
12709: CALL_OW 12
12713: PPUSH
12714: CALL_OW 336
12718: GO 12665
12720: POP
12721: POP
// end ;
12722: PPOPN 1
12724: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12725: LD_EXP 26
12729: IFFALSE 12737
12731: PUSH
12732: LD_EXP 38
12736: AND
12737: IFFALSE 12816
12739: GO 12741
12741: DISABLE
12742: LD_INT 0
12744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12745: LD_ADDR_VAR 0 1
12749: PUSH
12750: LD_INT 22
12752: PUSH
12753: LD_OWVAR 2
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 21
12764: PUSH
12765: LD_INT 3
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PPUSH
12776: CALL_OW 69
12780: ST_TO_ADDR
// if not tmp then
12781: LD_VAR 0 1
12785: NOT
12786: IFFALSE 12790
// exit ;
12788: GO 12816
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12790: LD_VAR 0 1
12794: PUSH
12795: LD_INT 1
12797: PPUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 12
12807: ARRAY
12808: PPUSH
12809: LD_INT 100
12811: PPUSH
12812: CALL_OW 234
// end ;
12816: PPOPN 1
12818: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12819: LD_EXP 26
12823: IFFALSE 12831
12825: PUSH
12826: LD_EXP 40
12830: AND
12831: IFFALSE 12929
12833: GO 12835
12835: DISABLE
12836: LD_INT 0
12838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12839: LD_ADDR_VAR 0 1
12843: PUSH
12844: LD_INT 22
12846: PUSH
12847: LD_OWVAR 2
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 21
12858: PUSH
12859: LD_INT 1
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PPUSH
12870: CALL_OW 69
12874: ST_TO_ADDR
// if not tmp then
12875: LD_VAR 0 1
12879: NOT
12880: IFFALSE 12884
// exit ;
12882: GO 12929
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12884: LD_VAR 0 1
12888: PUSH
12889: LD_INT 1
12891: PPUSH
12892: LD_VAR 0 1
12896: PPUSH
12897: CALL_OW 12
12901: ARRAY
12902: PPUSH
12903: LD_INT 1
12905: PPUSH
12906: LD_INT 4
12908: PPUSH
12909: CALL_OW 12
12913: PPUSH
12914: LD_INT 3000
12916: PPUSH
12917: LD_INT 9000
12919: PPUSH
12920: CALL_OW 12
12924: PPUSH
12925: CALL_OW 492
// end ;
12929: PPOPN 1
12931: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12932: LD_EXP 26
12936: IFFALSE 12944
12938: PUSH
12939: LD_EXP 41
12943: AND
12944: IFFALSE 12964
12946: GO 12948
12948: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12949: LD_INT 1
12951: PPUSH
12952: LD_OWVAR 2
12956: PPUSH
12957: LD_INT 0
12959: PPUSH
12960: CALL_OW 324
12964: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12965: LD_EXP 26
12969: IFFALSE 12977
12971: PUSH
12972: LD_EXP 42
12976: AND
12977: IFFALSE 13060
12979: GO 12981
12981: DISABLE
12982: LD_INT 0
12984: PPUSH
12985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12986: LD_ADDR_VAR 0 2
12990: PUSH
12991: LD_INT 22
12993: PUSH
12994: LD_OWVAR 2
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: LD_INT 21
13005: PUSH
13006: LD_INT 3
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: PPUSH
13017: CALL_OW 69
13021: ST_TO_ADDR
// if not tmp then
13022: LD_VAR 0 2
13026: NOT
13027: IFFALSE 13031
// exit ;
13029: GO 13060
// for i in tmp do
13031: LD_ADDR_VAR 0 1
13035: PUSH
13036: LD_VAR 0 2
13040: PUSH
13041: FOR_IN
13042: IFFALSE 13058
// SetBLevel ( i , 10 ) ;
13044: LD_VAR 0 1
13048: PPUSH
13049: LD_INT 10
13051: PPUSH
13052: CALL_OW 241
13056: GO 13041
13058: POP
13059: POP
// end ;
13060: PPOPN 2
13062: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13063: LD_EXP 26
13067: IFFALSE 13075
13069: PUSH
13070: LD_EXP 43
13074: AND
13075: IFFALSE 13186
13077: GO 13079
13079: DISABLE
13080: LD_INT 0
13082: PPUSH
13083: PPUSH
13084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13085: LD_ADDR_VAR 0 3
13089: PUSH
13090: LD_INT 22
13092: PUSH
13093: LD_OWVAR 2
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 25
13104: PUSH
13105: LD_INT 1
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PPUSH
13116: CALL_OW 69
13120: ST_TO_ADDR
// if not tmp then
13121: LD_VAR 0 3
13125: NOT
13126: IFFALSE 13130
// exit ;
13128: GO 13186
// un := tmp [ rand ( 1 , tmp ) ] ;
13130: LD_ADDR_VAR 0 2
13134: PUSH
13135: LD_VAR 0 3
13139: PUSH
13140: LD_INT 1
13142: PPUSH
13143: LD_VAR 0 3
13147: PPUSH
13148: CALL_OW 12
13152: ARRAY
13153: ST_TO_ADDR
// if Crawls ( un ) then
13154: LD_VAR 0 2
13158: PPUSH
13159: CALL_OW 318
13163: IFFALSE 13174
// ComWalk ( un ) ;
13165: LD_VAR 0 2
13169: PPUSH
13170: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13174: LD_VAR 0 2
13178: PPUSH
13179: LD_INT 5
13181: PPUSH
13182: CALL_OW 336
// end ;
13186: PPOPN 3
13188: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13189: LD_EXP 26
13193: IFFALSE 13201
13195: PUSH
13196: LD_EXP 44
13200: AND
13201: IFFALSE 13213
13203: PUSH
13204: LD_OWVAR 67
13208: PUSH
13209: LD_INT 4
13211: LESS
13212: AND
13213: IFFALSE 13232
13215: GO 13217
13217: DISABLE
// begin Difficulty := Difficulty + 1 ;
13218: LD_ADDR_OWVAR 67
13222: PUSH
13223: LD_OWVAR 67
13227: PUSH
13228: LD_INT 1
13230: PLUS
13231: ST_TO_ADDR
// end ;
13232: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13233: LD_EXP 26
13237: IFFALSE 13245
13239: PUSH
13240: LD_EXP 45
13244: AND
13245: IFFALSE 13348
13247: GO 13249
13249: DISABLE
13250: LD_INT 0
13252: PPUSH
// begin for i := 1 to 5 do
13253: LD_ADDR_VAR 0 1
13257: PUSH
13258: DOUBLE
13259: LD_INT 1
13261: DEC
13262: ST_TO_ADDR
13263: LD_INT 5
13265: PUSH
13266: FOR_TO
13267: IFFALSE 13346
// begin uc_nation := nation_nature ;
13269: LD_ADDR_OWVAR 21
13273: PUSH
13274: LD_INT 0
13276: ST_TO_ADDR
// uc_side := 0 ;
13277: LD_ADDR_OWVAR 20
13281: PUSH
13282: LD_INT 0
13284: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13285: LD_ADDR_OWVAR 29
13289: PUSH
13290: LD_INT 12
13292: PUSH
13293: LD_INT 12
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: ST_TO_ADDR
// hc_agressivity := 20 ;
13300: LD_ADDR_OWVAR 35
13304: PUSH
13305: LD_INT 20
13307: ST_TO_ADDR
// hc_class := class_tiger ;
13308: LD_ADDR_OWVAR 28
13312: PUSH
13313: LD_INT 14
13315: ST_TO_ADDR
// hc_gallery :=  ;
13316: LD_ADDR_OWVAR 33
13320: PUSH
13321: LD_STRING 
13323: ST_TO_ADDR
// hc_name :=  ;
13324: LD_ADDR_OWVAR 26
13328: PUSH
13329: LD_STRING 
13331: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13332: CALL_OW 44
13336: PPUSH
13337: LD_INT 0
13339: PPUSH
13340: CALL_OW 51
// end ;
13344: GO 13266
13346: POP
13347: POP
// end ;
13348: PPOPN 1
13350: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13351: LD_EXP 26
13355: IFFALSE 13363
13357: PUSH
13358: LD_EXP 46
13362: AND
13363: IFFALSE 13372
13365: GO 13367
13367: DISABLE
// StreamSibBomb ;
13368: CALL 13373 0 0
13372: END
// export function StreamSibBomb ; var i , x , y ; begin
13373: LD_INT 0
13375: PPUSH
13376: PPUSH
13377: PPUSH
13378: PPUSH
// result := false ;
13379: LD_ADDR_VAR 0 1
13383: PUSH
13384: LD_INT 0
13386: ST_TO_ADDR
// for i := 1 to 16 do
13387: LD_ADDR_VAR 0 2
13391: PUSH
13392: DOUBLE
13393: LD_INT 1
13395: DEC
13396: ST_TO_ADDR
13397: LD_INT 16
13399: PUSH
13400: FOR_TO
13401: IFFALSE 13600
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13403: LD_ADDR_VAR 0 3
13407: PUSH
13408: LD_INT 10
13410: PUSH
13411: LD_INT 20
13413: PUSH
13414: LD_INT 30
13416: PUSH
13417: LD_INT 40
13419: PUSH
13420: LD_INT 50
13422: PUSH
13423: LD_INT 60
13425: PUSH
13426: LD_INT 70
13428: PUSH
13429: LD_INT 80
13431: PUSH
13432: LD_INT 90
13434: PUSH
13435: LD_INT 100
13437: PUSH
13438: LD_INT 110
13440: PUSH
13441: LD_INT 120
13443: PUSH
13444: LD_INT 130
13446: PUSH
13447: LD_INT 140
13449: PUSH
13450: LD_INT 150
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_INT 15
13475: PPUSH
13476: CALL_OW 12
13480: ARRAY
13481: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13482: LD_ADDR_VAR 0 4
13486: PUSH
13487: LD_INT 10
13489: PUSH
13490: LD_INT 20
13492: PUSH
13493: LD_INT 30
13495: PUSH
13496: LD_INT 40
13498: PUSH
13499: LD_INT 50
13501: PUSH
13502: LD_INT 60
13504: PUSH
13505: LD_INT 70
13507: PUSH
13508: LD_INT 80
13510: PUSH
13511: LD_INT 90
13513: PUSH
13514: LD_INT 100
13516: PUSH
13517: LD_INT 110
13519: PUSH
13520: LD_INT 120
13522: PUSH
13523: LD_INT 130
13525: PUSH
13526: LD_INT 140
13528: PUSH
13529: LD_INT 150
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 1
13551: PPUSH
13552: LD_INT 15
13554: PPUSH
13555: CALL_OW 12
13559: ARRAY
13560: ST_TO_ADDR
// if ValidHex ( x , y ) then
13561: LD_VAR 0 3
13565: PPUSH
13566: LD_VAR 0 4
13570: PPUSH
13571: CALL_OW 488
13575: IFFALSE 13598
// begin result := [ x , y ] ;
13577: LD_ADDR_VAR 0 1
13581: PUSH
13582: LD_VAR 0 3
13586: PUSH
13587: LD_VAR 0 4
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: ST_TO_ADDR
// break ;
13596: GO 13600
// end ; end ;
13598: GO 13400
13600: POP
13601: POP
// if result then
13602: LD_VAR 0 1
13606: IFFALSE 13666
// begin ToLua ( playSibBomb() ) ;
13608: LD_STRING playSibBomb()
13610: PPUSH
13611: CALL_OW 559
// wait ( 0 0$14 ) ;
13615: LD_INT 490
13617: PPUSH
13618: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13622: LD_VAR 0 1
13626: PUSH
13627: LD_INT 1
13629: ARRAY
13630: PPUSH
13631: LD_VAR 0 1
13635: PUSH
13636: LD_INT 2
13638: ARRAY
13639: PPUSH
13640: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13644: LD_VAR 0 1
13648: PUSH
13649: LD_INT 1
13651: ARRAY
13652: PPUSH
13653: LD_VAR 0 1
13657: PUSH
13658: LD_INT 2
13660: ARRAY
13661: PPUSH
13662: CALL_OW 429
// end ; end ;
13666: LD_VAR 0 1
13670: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13671: LD_EXP 26
13675: IFFALSE 13683
13677: PUSH
13678: LD_EXP 48
13682: AND
13683: IFFALSE 13695
13685: GO 13687
13687: DISABLE
// YouLost (  ) ;
13688: LD_STRING 
13690: PPUSH
13691: CALL_OW 104
13695: END
// every 0 0$1 trigger StreamModeActive and sFog do
13696: LD_EXP 26
13700: IFFALSE 13708
13702: PUSH
13703: LD_EXP 47
13707: AND
13708: IFFALSE 13722
13710: GO 13712
13712: DISABLE
// FogOff ( your_side ) ;
13713: LD_OWVAR 2
13717: PPUSH
13718: CALL_OW 344
13722: END
// every 0 0$1 trigger StreamModeActive and sSun do
13723: LD_EXP 26
13727: IFFALSE 13735
13729: PUSH
13730: LD_EXP 49
13734: AND
13735: IFFALSE 13763
13737: GO 13739
13739: DISABLE
// begin solar_recharge_percent := 0 ;
13740: LD_ADDR_OWVAR 79
13744: PUSH
13745: LD_INT 0
13747: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13748: LD_INT 10500
13750: PPUSH
13751: CALL_OW 67
// solar_recharge_percent := 100 ;
13755: LD_ADDR_OWVAR 79
13759: PUSH
13760: LD_INT 100
13762: ST_TO_ADDR
// end ;
13763: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13764: LD_EXP 26
13768: IFFALSE 13776
13770: PUSH
13771: LD_EXP 50
13775: AND
13776: IFFALSE 14015
13778: GO 13780
13780: DISABLE
13781: LD_INT 0
13783: PPUSH
13784: PPUSH
13785: PPUSH
// begin tmp := [ ] ;
13786: LD_ADDR_VAR 0 3
13790: PUSH
13791: EMPTY
13792: ST_TO_ADDR
// for i := 1 to 6 do
13793: LD_ADDR_VAR 0 1
13797: PUSH
13798: DOUBLE
13799: LD_INT 1
13801: DEC
13802: ST_TO_ADDR
13803: LD_INT 6
13805: PUSH
13806: FOR_TO
13807: IFFALSE 13912
// begin uc_nation := nation_nature ;
13809: LD_ADDR_OWVAR 21
13813: PUSH
13814: LD_INT 0
13816: ST_TO_ADDR
// uc_side := 0 ;
13817: LD_ADDR_OWVAR 20
13821: PUSH
13822: LD_INT 0
13824: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13825: LD_ADDR_OWVAR 29
13829: PUSH
13830: LD_INT 12
13832: PUSH
13833: LD_INT 12
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: ST_TO_ADDR
// hc_agressivity := 20 ;
13840: LD_ADDR_OWVAR 35
13844: PUSH
13845: LD_INT 20
13847: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13848: LD_ADDR_OWVAR 28
13852: PUSH
13853: LD_INT 17
13855: ST_TO_ADDR
// hc_gallery :=  ;
13856: LD_ADDR_OWVAR 33
13860: PUSH
13861: LD_STRING 
13863: ST_TO_ADDR
// hc_name :=  ;
13864: LD_ADDR_OWVAR 26
13868: PUSH
13869: LD_STRING 
13871: ST_TO_ADDR
// un := CreateHuman ;
13872: LD_ADDR_VAR 0 2
13876: PUSH
13877: CALL_OW 44
13881: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13882: LD_VAR 0 2
13886: PPUSH
13887: LD_INT 1
13889: PPUSH
13890: CALL_OW 51
// tmp := tmp ^ un ;
13894: LD_ADDR_VAR 0 3
13898: PUSH
13899: LD_VAR 0 3
13903: PUSH
13904: LD_VAR 0 2
13908: ADD
13909: ST_TO_ADDR
// end ;
13910: GO 13806
13912: POP
13913: POP
// repeat wait ( 0 0$1 ) ;
13914: LD_INT 35
13916: PPUSH
13917: CALL_OW 67
// for un in tmp do
13921: LD_ADDR_VAR 0 2
13925: PUSH
13926: LD_VAR 0 3
13930: PUSH
13931: FOR_IN
13932: IFFALSE 14006
// begin if IsDead ( un ) then
13934: LD_VAR 0 2
13938: PPUSH
13939: CALL_OW 301
13943: IFFALSE 13963
// begin tmp := tmp diff un ;
13945: LD_ADDR_VAR 0 3
13949: PUSH
13950: LD_VAR 0 3
13954: PUSH
13955: LD_VAR 0 2
13959: DIFF
13960: ST_TO_ADDR
// continue ;
13961: GO 13931
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13963: LD_VAR 0 2
13967: PPUSH
13968: LD_INT 3
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_INT 0
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PPUSH
13985: CALL_OW 69
13989: PPUSH
13990: LD_VAR 0 2
13994: PPUSH
13995: CALL_OW 74
13999: PPUSH
14000: CALL_OW 115
// end ;
14004: GO 13931
14006: POP
14007: POP
// until not tmp ;
14008: LD_VAR 0 3
14012: NOT
14013: IFFALSE 13914
// end ;
14015: PPOPN 3
14017: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14018: LD_EXP 26
14022: IFFALSE 14030
14024: PUSH
14025: LD_EXP 51
14029: AND
14030: IFFALSE 14084
14032: GO 14034
14034: DISABLE
// begin ToLua ( displayTroll(); ) ;
14035: LD_STRING displayTroll();
14037: PPUSH
14038: CALL_OW 559
// wait ( 3 3$00 ) ;
14042: LD_INT 6300
14044: PPUSH
14045: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14049: LD_STRING hideTroll();
14051: PPUSH
14052: CALL_OW 559
// wait ( 1 1$00 ) ;
14056: LD_INT 2100
14058: PPUSH
14059: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14063: LD_STRING displayTroll();
14065: PPUSH
14066: CALL_OW 559
// wait ( 1 1$00 ) ;
14070: LD_INT 2100
14072: PPUSH
14073: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14077: LD_STRING hideTroll();
14079: PPUSH
14080: CALL_OW 559
// end ;
14084: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14085: LD_EXP 26
14089: IFFALSE 14097
14091: PUSH
14092: LD_EXP 52
14096: AND
14097: IFFALSE 14160
14099: GO 14101
14101: DISABLE
14102: LD_INT 0
14104: PPUSH
// begin p := 0 ;
14105: LD_ADDR_VAR 0 1
14109: PUSH
14110: LD_INT 0
14112: ST_TO_ADDR
// repeat game_speed := 1 ;
14113: LD_ADDR_OWVAR 65
14117: PUSH
14118: LD_INT 1
14120: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14121: LD_INT 35
14123: PPUSH
14124: CALL_OW 67
// p := p + 1 ;
14128: LD_ADDR_VAR 0 1
14132: PUSH
14133: LD_VAR 0 1
14137: PUSH
14138: LD_INT 1
14140: PLUS
14141: ST_TO_ADDR
// until p >= 60 ;
14142: LD_VAR 0 1
14146: PUSH
14147: LD_INT 60
14149: GREATEREQUAL
14150: IFFALSE 14113
// game_speed := 4 ;
14152: LD_ADDR_OWVAR 65
14156: PUSH
14157: LD_INT 4
14159: ST_TO_ADDR
// end ;
14160: PPOPN 1
14162: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14163: LD_EXP 26
14167: IFFALSE 14175
14169: PUSH
14170: LD_EXP 53
14174: AND
14175: IFFALSE 14321
14177: GO 14179
14179: DISABLE
14180: LD_INT 0
14182: PPUSH
14183: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14184: LD_ADDR_VAR 0 1
14188: PUSH
14189: LD_INT 22
14191: PUSH
14192: LD_OWVAR 2
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: LD_INT 2
14203: PUSH
14204: LD_INT 30
14206: PUSH
14207: LD_INT 0
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 30
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: LIST
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PPUSH
14233: CALL_OW 69
14237: ST_TO_ADDR
// if not depot then
14238: LD_VAR 0 1
14242: NOT
14243: IFFALSE 14247
// exit ;
14245: GO 14321
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14247: LD_ADDR_VAR 0 2
14251: PUSH
14252: LD_VAR 0 1
14256: PUSH
14257: LD_INT 1
14259: PPUSH
14260: LD_VAR 0 1
14264: PPUSH
14265: CALL_OW 12
14269: ARRAY
14270: PPUSH
14271: CALL_OW 274
14275: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14276: LD_VAR 0 2
14280: PPUSH
14281: LD_INT 1
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14291: LD_VAR 0 2
14295: PPUSH
14296: LD_INT 2
14298: PPUSH
14299: LD_INT 0
14301: PPUSH
14302: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14306: LD_VAR 0 2
14310: PPUSH
14311: LD_INT 3
14313: PPUSH
14314: LD_INT 0
14316: PPUSH
14317: CALL_OW 277
// end ;
14321: PPOPN 2
14323: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14324: LD_EXP 26
14328: IFFALSE 14336
14330: PUSH
14331: LD_EXP 54
14335: AND
14336: IFFALSE 14433
14338: GO 14340
14340: DISABLE
14341: LD_INT 0
14343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14344: LD_ADDR_VAR 0 1
14348: PUSH
14349: LD_INT 22
14351: PUSH
14352: LD_OWVAR 2
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 21
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 3
14373: PUSH
14374: LD_INT 23
14376: PUSH
14377: LD_INT 0
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: LIST
14392: PPUSH
14393: CALL_OW 69
14397: ST_TO_ADDR
// if not tmp then
14398: LD_VAR 0 1
14402: NOT
14403: IFFALSE 14407
// exit ;
14405: GO 14433
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14407: LD_VAR 0 1
14411: PUSH
14412: LD_INT 1
14414: PPUSH
14415: LD_VAR 0 1
14419: PPUSH
14420: CALL_OW 12
14424: ARRAY
14425: PPUSH
14426: LD_INT 200
14428: PPUSH
14429: CALL_OW 234
// end ;
14433: PPOPN 1
14435: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14436: LD_EXP 26
14440: IFFALSE 14448
14442: PUSH
14443: LD_EXP 55
14447: AND
14448: IFFALSE 14527
14450: GO 14452
14452: DISABLE
14453: LD_INT 0
14455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14456: LD_ADDR_VAR 0 1
14460: PUSH
14461: LD_INT 22
14463: PUSH
14464: LD_OWVAR 2
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 21
14475: PUSH
14476: LD_INT 2
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PPUSH
14487: CALL_OW 69
14491: ST_TO_ADDR
// if not tmp then
14492: LD_VAR 0 1
14496: NOT
14497: IFFALSE 14501
// exit ;
14499: GO 14527
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14501: LD_VAR 0 1
14505: PUSH
14506: LD_INT 1
14508: PPUSH
14509: LD_VAR 0 1
14513: PPUSH
14514: CALL_OW 12
14518: ARRAY
14519: PPUSH
14520: LD_INT 60
14522: PPUSH
14523: CALL_OW 234
// end ;
14527: PPOPN 1
14529: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14530: LD_EXP 26
14534: IFFALSE 14542
14536: PUSH
14537: LD_EXP 56
14541: AND
14542: IFFALSE 14641
14544: GO 14546
14546: DISABLE
14547: LD_INT 0
14549: PPUSH
14550: PPUSH
// begin enable ;
14551: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14552: LD_ADDR_VAR 0 1
14556: PUSH
14557: LD_INT 22
14559: PUSH
14560: LD_OWVAR 2
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 61
14571: PUSH
14572: EMPTY
14573: LIST
14574: PUSH
14575: LD_INT 33
14577: PUSH
14578: LD_INT 2
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: LIST
14589: PPUSH
14590: CALL_OW 69
14594: ST_TO_ADDR
// if not tmp then
14595: LD_VAR 0 1
14599: NOT
14600: IFFALSE 14604
// exit ;
14602: GO 14641
// for i in tmp do
14604: LD_ADDR_VAR 0 2
14608: PUSH
14609: LD_VAR 0 1
14613: PUSH
14614: FOR_IN
14615: IFFALSE 14639
// if IsControledBy ( i ) then
14617: LD_VAR 0 2
14621: PPUSH
14622: CALL_OW 312
14626: IFFALSE 14637
// ComUnlink ( i ) ;
14628: LD_VAR 0 2
14632: PPUSH
14633: CALL_OW 136
14637: GO 14614
14639: POP
14640: POP
// end ;
14641: PPOPN 2
14643: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14644: LD_EXP 26
14648: IFFALSE 14656
14650: PUSH
14651: LD_EXP 57
14655: AND
14656: IFFALSE 14796
14658: GO 14660
14660: DISABLE
14661: LD_INT 0
14663: PPUSH
14664: PPUSH
// begin ToLua ( displayPowell(); ) ;
14665: LD_STRING displayPowell();
14667: PPUSH
14668: CALL_OW 559
// uc_side := 0 ;
14672: LD_ADDR_OWVAR 20
14676: PUSH
14677: LD_INT 0
14679: ST_TO_ADDR
// uc_nation := 2 ;
14680: LD_ADDR_OWVAR 21
14684: PUSH
14685: LD_INT 2
14687: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14688: LD_ADDR_OWVAR 37
14692: PUSH
14693: LD_INT 14
14695: ST_TO_ADDR
// vc_engine := engine_siberite ;
14696: LD_ADDR_OWVAR 39
14700: PUSH
14701: LD_INT 3
14703: ST_TO_ADDR
// vc_control := control_apeman ;
14704: LD_ADDR_OWVAR 38
14708: PUSH
14709: LD_INT 5
14711: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14712: LD_ADDR_OWVAR 40
14716: PUSH
14717: LD_INT 29
14719: ST_TO_ADDR
// un := CreateVehicle ;
14720: LD_ADDR_VAR 0 2
14724: PUSH
14725: CALL_OW 45
14729: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14730: LD_VAR 0 2
14734: PPUSH
14735: LD_INT 1
14737: PPUSH
14738: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14742: LD_INT 35
14744: PPUSH
14745: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14749: LD_VAR 0 2
14753: PPUSH
14754: LD_INT 22
14756: PUSH
14757: LD_OWVAR 2
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PPUSH
14766: CALL_OW 69
14770: PPUSH
14771: LD_VAR 0 2
14775: PPUSH
14776: CALL_OW 74
14780: PPUSH
14781: CALL_OW 115
// until IsDead ( un ) ;
14785: LD_VAR 0 2
14789: PPUSH
14790: CALL_OW 301
14794: IFFALSE 14742
// end ;
14796: PPOPN 2
14798: END
// every 0 0$1 trigger StreamModeActive and sStu do
14799: LD_EXP 26
14803: IFFALSE 14811
14805: PUSH
14806: LD_EXP 65
14810: AND
14811: IFFALSE 14827
14813: GO 14815
14815: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14816: LD_STRING displayStucuk();
14818: PPUSH
14819: CALL_OW 559
// ResetFog ;
14823: CALL_OW 335
// end ;
14827: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14828: LD_EXP 26
14832: IFFALSE 14840
14834: PUSH
14835: LD_EXP 58
14839: AND
14840: IFFALSE 14981
14842: GO 14844
14844: DISABLE
14845: LD_INT 0
14847: PPUSH
14848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14849: LD_ADDR_VAR 0 2
14853: PUSH
14854: LD_INT 22
14856: PUSH
14857: LD_OWVAR 2
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 21
14868: PUSH
14869: LD_INT 1
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PPUSH
14880: CALL_OW 69
14884: ST_TO_ADDR
// if not tmp then
14885: LD_VAR 0 2
14889: NOT
14890: IFFALSE 14894
// exit ;
14892: GO 14981
// un := tmp [ rand ( 1 , tmp ) ] ;
14894: LD_ADDR_VAR 0 1
14898: PUSH
14899: LD_VAR 0 2
14903: PUSH
14904: LD_INT 1
14906: PPUSH
14907: LD_VAR 0 2
14911: PPUSH
14912: CALL_OW 12
14916: ARRAY
14917: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14918: LD_VAR 0 1
14922: PPUSH
14923: LD_INT 0
14925: PPUSH
14926: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14930: LD_VAR 0 1
14934: PPUSH
14935: LD_OWVAR 3
14939: PUSH
14940: LD_VAR 0 1
14944: DIFF
14945: PPUSH
14946: LD_VAR 0 1
14950: PPUSH
14951: CALL_OW 74
14955: PPUSH
14956: CALL_OW 115
// wait ( 0 0$20 ) ;
14960: LD_INT 700
14962: PPUSH
14963: CALL_OW 67
// SetSide ( un , your_side ) ;
14967: LD_VAR 0 1
14971: PPUSH
14972: LD_OWVAR 2
14976: PPUSH
14977: CALL_OW 235
// end ;
14981: PPOPN 2
14983: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14984: LD_EXP 26
14988: IFFALSE 14996
14990: PUSH
14991: LD_EXP 59
14995: AND
14996: IFFALSE 15102
14998: GO 15000
15000: DISABLE
15001: LD_INT 0
15003: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15004: LD_ADDR_VAR 0 1
15008: PUSH
15009: LD_INT 22
15011: PUSH
15012: LD_OWVAR 2
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 2
15023: PUSH
15024: LD_INT 30
15026: PUSH
15027: LD_INT 0
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 30
15036: PUSH
15037: LD_INT 1
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PPUSH
15053: CALL_OW 69
15057: ST_TO_ADDR
// if not depot then
15058: LD_VAR 0 1
15062: NOT
15063: IFFALSE 15067
// exit ;
15065: GO 15102
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15067: LD_VAR 0 1
15071: PUSH
15072: LD_INT 1
15074: ARRAY
15075: PPUSH
15076: CALL_OW 250
15080: PPUSH
15081: LD_VAR 0 1
15085: PUSH
15086: LD_INT 1
15088: ARRAY
15089: PPUSH
15090: CALL_OW 251
15094: PPUSH
15095: LD_INT 70
15097: PPUSH
15098: CALL_OW 495
// end ;
15102: PPOPN 1
15104: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15105: LD_EXP 26
15109: IFFALSE 15117
15111: PUSH
15112: LD_EXP 60
15116: AND
15117: IFFALSE 15328
15119: GO 15121
15121: DISABLE
15122: LD_INT 0
15124: PPUSH
15125: PPUSH
15126: PPUSH
15127: PPUSH
15128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15129: LD_ADDR_VAR 0 5
15133: PUSH
15134: LD_INT 22
15136: PUSH
15137: LD_OWVAR 2
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 21
15148: PUSH
15149: LD_INT 1
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PPUSH
15160: CALL_OW 69
15164: ST_TO_ADDR
// if not tmp then
15165: LD_VAR 0 5
15169: NOT
15170: IFFALSE 15174
// exit ;
15172: GO 15328
// for i in tmp do
15174: LD_ADDR_VAR 0 1
15178: PUSH
15179: LD_VAR 0 5
15183: PUSH
15184: FOR_IN
15185: IFFALSE 15326
// begin d := rand ( 0 , 5 ) ;
15187: LD_ADDR_VAR 0 4
15191: PUSH
15192: LD_INT 0
15194: PPUSH
15195: LD_INT 5
15197: PPUSH
15198: CALL_OW 12
15202: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15203: LD_ADDR_VAR 0 2
15207: PUSH
15208: LD_VAR 0 1
15212: PPUSH
15213: CALL_OW 250
15217: PPUSH
15218: LD_VAR 0 4
15222: PPUSH
15223: LD_INT 3
15225: PPUSH
15226: LD_INT 12
15228: PPUSH
15229: CALL_OW 12
15233: PPUSH
15234: CALL_OW 272
15238: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15239: LD_ADDR_VAR 0 3
15243: PUSH
15244: LD_VAR 0 1
15248: PPUSH
15249: CALL_OW 251
15253: PPUSH
15254: LD_VAR 0 4
15258: PPUSH
15259: LD_INT 3
15261: PPUSH
15262: LD_INT 12
15264: PPUSH
15265: CALL_OW 12
15269: PPUSH
15270: CALL_OW 273
15274: ST_TO_ADDR
// if ValidHex ( x , y ) then
15275: LD_VAR 0 2
15279: PPUSH
15280: LD_VAR 0 3
15284: PPUSH
15285: CALL_OW 488
15289: IFFALSE 15324
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15291: LD_VAR 0 1
15295: PPUSH
15296: LD_VAR 0 2
15300: PPUSH
15301: LD_VAR 0 3
15305: PPUSH
15306: LD_INT 3
15308: PPUSH
15309: LD_INT 6
15311: PPUSH
15312: CALL_OW 12
15316: PPUSH
15317: LD_INT 1
15319: PPUSH
15320: CALL_OW 483
// end ;
15324: GO 15184
15326: POP
15327: POP
// end ;
15328: PPOPN 5
15330: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15331: LD_EXP 26
15335: IFFALSE 15343
15337: PUSH
15338: LD_EXP 61
15342: AND
15343: IFFALSE 15437
15345: GO 15347
15347: DISABLE
15348: LD_INT 0
15350: PPUSH
15351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15352: LD_ADDR_VAR 0 2
15356: PUSH
15357: LD_INT 22
15359: PUSH
15360: LD_OWVAR 2
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 32
15371: PUSH
15372: LD_INT 1
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 21
15381: PUSH
15382: LD_INT 2
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: LIST
15393: PPUSH
15394: CALL_OW 69
15398: ST_TO_ADDR
// if not tmp then
15399: LD_VAR 0 2
15403: NOT
15404: IFFALSE 15408
// exit ;
15406: GO 15437
// for i in tmp do
15408: LD_ADDR_VAR 0 1
15412: PUSH
15413: LD_VAR 0 2
15417: PUSH
15418: FOR_IN
15419: IFFALSE 15435
// SetFuel ( i , 0 ) ;
15421: LD_VAR 0 1
15425: PPUSH
15426: LD_INT 0
15428: PPUSH
15429: CALL_OW 240
15433: GO 15418
15435: POP
15436: POP
// end ;
15437: PPOPN 2
15439: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15440: LD_EXP 26
15444: IFFALSE 15452
15446: PUSH
15447: LD_EXP 62
15451: AND
15452: IFFALSE 15518
15454: GO 15456
15456: DISABLE
15457: LD_INT 0
15459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15460: LD_ADDR_VAR 0 1
15464: PUSH
15465: LD_INT 22
15467: PUSH
15468: LD_OWVAR 2
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 30
15479: PUSH
15480: LD_INT 29
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PPUSH
15491: CALL_OW 69
15495: ST_TO_ADDR
// if not tmp then
15496: LD_VAR 0 1
15500: NOT
15501: IFFALSE 15505
// exit ;
15503: GO 15518
// DestroyUnit ( tmp [ 1 ] ) ;
15505: LD_VAR 0 1
15509: PUSH
15510: LD_INT 1
15512: ARRAY
15513: PPUSH
15514: CALL_OW 65
// end ;
15518: PPOPN 1
15520: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15521: LD_EXP 26
15525: IFFALSE 15533
15527: PUSH
15528: LD_EXP 64
15532: AND
15533: IFFALSE 15662
15535: GO 15537
15537: DISABLE
15538: LD_INT 0
15540: PPUSH
// begin uc_side := 0 ;
15541: LD_ADDR_OWVAR 20
15545: PUSH
15546: LD_INT 0
15548: ST_TO_ADDR
// uc_nation := nation_arabian ;
15549: LD_ADDR_OWVAR 21
15553: PUSH
15554: LD_INT 2
15556: ST_TO_ADDR
// hc_gallery :=  ;
15557: LD_ADDR_OWVAR 33
15561: PUSH
15562: LD_STRING 
15564: ST_TO_ADDR
// hc_name :=  ;
15565: LD_ADDR_OWVAR 26
15569: PUSH
15570: LD_STRING 
15572: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15573: LD_INT 1
15575: PPUSH
15576: LD_INT 11
15578: PPUSH
15579: LD_INT 10
15581: PPUSH
15582: CALL_OW 380
// un := CreateHuman ;
15586: LD_ADDR_VAR 0 1
15590: PUSH
15591: CALL_OW 44
15595: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15596: LD_VAR 0 1
15600: PPUSH
15601: LD_INT 1
15603: PPUSH
15604: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15608: LD_INT 35
15610: PPUSH
15611: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15615: LD_VAR 0 1
15619: PPUSH
15620: LD_INT 22
15622: PUSH
15623: LD_OWVAR 2
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PPUSH
15632: CALL_OW 69
15636: PPUSH
15637: LD_VAR 0 1
15641: PPUSH
15642: CALL_OW 74
15646: PPUSH
15647: CALL_OW 115
// until IsDead ( un ) ;
15651: LD_VAR 0 1
15655: PPUSH
15656: CALL_OW 301
15660: IFFALSE 15608
// end ;
15662: PPOPN 1
15664: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15665: LD_EXP 26
15669: IFFALSE 15677
15671: PUSH
15672: LD_EXP 66
15676: AND
15677: IFFALSE 15689
15679: GO 15681
15681: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15682: LD_STRING earthquake(getX(game), 0, 32)
15684: PPUSH
15685: CALL_OW 559
15689: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15690: LD_EXP 26
15694: IFFALSE 15702
15696: PUSH
15697: LD_EXP 67
15701: AND
15702: IFFALSE 15793
15704: GO 15706
15706: DISABLE
15707: LD_INT 0
15709: PPUSH
// begin enable ;
15710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15711: LD_ADDR_VAR 0 1
15715: PUSH
15716: LD_INT 22
15718: PUSH
15719: LD_OWVAR 2
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 21
15730: PUSH
15731: LD_INT 2
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 33
15740: PUSH
15741: LD_INT 3
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: PPUSH
15753: CALL_OW 69
15757: ST_TO_ADDR
// if not tmp then
15758: LD_VAR 0 1
15762: NOT
15763: IFFALSE 15767
// exit ;
15765: GO 15793
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15767: LD_VAR 0 1
15771: PUSH
15772: LD_INT 1
15774: PPUSH
15775: LD_VAR 0 1
15779: PPUSH
15780: CALL_OW 12
15784: ARRAY
15785: PPUSH
15786: LD_INT 1
15788: PPUSH
15789: CALL_OW 234
// end ;
15793: PPOPN 1
15795: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15796: LD_EXP 26
15800: IFFALSE 15808
15802: PUSH
15803: LD_EXP 68
15807: AND
15808: IFFALSE 15949
15810: GO 15812
15812: DISABLE
15813: LD_INT 0
15815: PPUSH
15816: PPUSH
15817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15818: LD_ADDR_VAR 0 3
15822: PUSH
15823: LD_INT 22
15825: PUSH
15826: LD_OWVAR 2
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 25
15837: PUSH
15838: LD_INT 1
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PPUSH
15849: CALL_OW 69
15853: ST_TO_ADDR
// if not tmp then
15854: LD_VAR 0 3
15858: NOT
15859: IFFALSE 15863
// exit ;
15861: GO 15949
// un := tmp [ rand ( 1 , tmp ) ] ;
15863: LD_ADDR_VAR 0 2
15867: PUSH
15868: LD_VAR 0 3
15872: PUSH
15873: LD_INT 1
15875: PPUSH
15876: LD_VAR 0 3
15880: PPUSH
15881: CALL_OW 12
15885: ARRAY
15886: ST_TO_ADDR
// if Crawls ( un ) then
15887: LD_VAR 0 2
15891: PPUSH
15892: CALL_OW 318
15896: IFFALSE 15907
// ComWalk ( un ) ;
15898: LD_VAR 0 2
15902: PPUSH
15903: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15907: LD_VAR 0 2
15911: PPUSH
15912: LD_INT 9
15914: PPUSH
15915: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15919: LD_INT 28
15921: PPUSH
15922: LD_OWVAR 2
15926: PPUSH
15927: LD_INT 2
15929: PPUSH
15930: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15934: LD_INT 29
15936: PPUSH
15937: LD_OWVAR 2
15941: PPUSH
15942: LD_INT 2
15944: PPUSH
15945: CALL_OW 322
// end ;
15949: PPOPN 3
15951: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15952: LD_EXP 26
15956: IFFALSE 15964
15958: PUSH
15959: LD_EXP 69
15963: AND
15964: IFFALSE 16075
15966: GO 15968
15968: DISABLE
15969: LD_INT 0
15971: PPUSH
15972: PPUSH
15973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15974: LD_ADDR_VAR 0 3
15978: PUSH
15979: LD_INT 22
15981: PUSH
15982: LD_OWVAR 2
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 25
15993: PUSH
15994: LD_INT 1
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: ST_TO_ADDR
// if not tmp then
16010: LD_VAR 0 3
16014: NOT
16015: IFFALSE 16019
// exit ;
16017: GO 16075
// un := tmp [ rand ( 1 , tmp ) ] ;
16019: LD_ADDR_VAR 0 2
16023: PUSH
16024: LD_VAR 0 3
16028: PUSH
16029: LD_INT 1
16031: PPUSH
16032: LD_VAR 0 3
16036: PPUSH
16037: CALL_OW 12
16041: ARRAY
16042: ST_TO_ADDR
// if Crawls ( un ) then
16043: LD_VAR 0 2
16047: PPUSH
16048: CALL_OW 318
16052: IFFALSE 16063
// ComWalk ( un ) ;
16054: LD_VAR 0 2
16058: PPUSH
16059: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16063: LD_VAR 0 2
16067: PPUSH
16068: LD_INT 8
16070: PPUSH
16071: CALL_OW 336
// end ;
16075: PPOPN 3
16077: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16078: LD_EXP 26
16082: IFFALSE 16090
16084: PUSH
16085: LD_EXP 70
16089: AND
16090: IFFALSE 16234
16092: GO 16094
16094: DISABLE
16095: LD_INT 0
16097: PPUSH
16098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16099: LD_ADDR_VAR 0 2
16103: PUSH
16104: LD_INT 22
16106: PUSH
16107: LD_OWVAR 2
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: LD_INT 21
16118: PUSH
16119: LD_INT 2
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 2
16128: PUSH
16129: LD_INT 34
16131: PUSH
16132: LD_INT 12
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 34
16141: PUSH
16142: LD_INT 51
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: LD_INT 34
16151: PUSH
16152: LD_INT 32
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: LIST
16169: PPUSH
16170: CALL_OW 69
16174: ST_TO_ADDR
// if not tmp then
16175: LD_VAR 0 2
16179: NOT
16180: IFFALSE 16184
// exit ;
16182: GO 16234
// for i in tmp do
16184: LD_ADDR_VAR 0 1
16188: PUSH
16189: LD_VAR 0 2
16193: PUSH
16194: FOR_IN
16195: IFFALSE 16232
// if GetCargo ( i , mat_artifact ) = 0 then
16197: LD_VAR 0 1
16201: PPUSH
16202: LD_INT 4
16204: PPUSH
16205: CALL_OW 289
16209: PUSH
16210: LD_INT 0
16212: EQUAL
16213: IFFALSE 16230
// SetCargo ( i , mat_siberit , 100 ) ;
16215: LD_VAR 0 1
16219: PPUSH
16220: LD_INT 3
16222: PPUSH
16223: LD_INT 100
16225: PPUSH
16226: CALL_OW 290
16230: GO 16194
16232: POP
16233: POP
// end ;
16234: PPOPN 2
16236: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16237: LD_EXP 26
16241: IFFALSE 16249
16243: PUSH
16244: LD_EXP 71
16248: AND
16249: IFFALSE 16432
16251: GO 16253
16253: DISABLE
16254: LD_INT 0
16256: PPUSH
16257: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16258: LD_ADDR_VAR 0 2
16262: PUSH
16263: LD_INT 22
16265: PUSH
16266: LD_OWVAR 2
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PPUSH
16275: CALL_OW 69
16279: ST_TO_ADDR
// if not tmp then
16280: LD_VAR 0 2
16284: NOT
16285: IFFALSE 16289
// exit ;
16287: GO 16432
// for i := 1 to 2 do
16289: LD_ADDR_VAR 0 1
16293: PUSH
16294: DOUBLE
16295: LD_INT 1
16297: DEC
16298: ST_TO_ADDR
16299: LD_INT 2
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16430
// begin uc_side := your_side ;
16305: LD_ADDR_OWVAR 20
16309: PUSH
16310: LD_OWVAR 2
16314: ST_TO_ADDR
// uc_nation := nation_american ;
16315: LD_ADDR_OWVAR 21
16319: PUSH
16320: LD_INT 1
16322: ST_TO_ADDR
// vc_chassis := us_morphling ;
16323: LD_ADDR_OWVAR 37
16327: PUSH
16328: LD_INT 5
16330: ST_TO_ADDR
// vc_engine := engine_siberite ;
16331: LD_ADDR_OWVAR 39
16335: PUSH
16336: LD_INT 3
16338: ST_TO_ADDR
// vc_control := control_computer ;
16339: LD_ADDR_OWVAR 38
16343: PUSH
16344: LD_INT 3
16346: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16347: LD_ADDR_OWVAR 40
16351: PUSH
16352: LD_INT 10
16354: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16355: LD_VAR 0 2
16359: PUSH
16360: LD_INT 1
16362: ARRAY
16363: PPUSH
16364: CALL_OW 310
16368: NOT
16369: IFFALSE 16416
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16371: CALL_OW 45
16375: PPUSH
16376: LD_VAR 0 2
16380: PUSH
16381: LD_INT 1
16383: ARRAY
16384: PPUSH
16385: CALL_OW 250
16389: PPUSH
16390: LD_VAR 0 2
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: PPUSH
16399: CALL_OW 251
16403: PPUSH
16404: LD_INT 12
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 50
16414: GO 16428
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16416: CALL_OW 45
16420: PPUSH
16421: LD_INT 1
16423: PPUSH
16424: CALL_OW 51
// end ;
16428: GO 16302
16430: POP
16431: POP
// end ;
16432: PPOPN 2
16434: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16435: LD_EXP 26
16439: IFFALSE 16447
16441: PUSH
16442: LD_EXP 72
16446: AND
16447: IFFALSE 16669
16449: GO 16451
16451: DISABLE
16452: LD_INT 0
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16460: LD_ADDR_VAR 0 6
16464: PUSH
16465: LD_INT 22
16467: PUSH
16468: LD_OWVAR 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 21
16479: PUSH
16480: LD_INT 1
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 3
16489: PUSH
16490: LD_INT 23
16492: PUSH
16493: LD_INT 0
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: LIST
16508: PPUSH
16509: CALL_OW 69
16513: ST_TO_ADDR
// if not tmp then
16514: LD_VAR 0 6
16518: NOT
16519: IFFALSE 16523
// exit ;
16521: GO 16669
// s1 := rand ( 1 , 4 ) ;
16523: LD_ADDR_VAR 0 2
16527: PUSH
16528: LD_INT 1
16530: PPUSH
16531: LD_INT 4
16533: PPUSH
16534: CALL_OW 12
16538: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16539: LD_ADDR_VAR 0 4
16543: PUSH
16544: LD_VAR 0 6
16548: PUSH
16549: LD_INT 1
16551: ARRAY
16552: PPUSH
16553: LD_VAR 0 2
16557: PPUSH
16558: CALL_OW 259
16562: ST_TO_ADDR
// if s1 = 1 then
16563: LD_VAR 0 2
16567: PUSH
16568: LD_INT 1
16570: EQUAL
16571: IFFALSE 16591
// s2 := rand ( 2 , 4 ) else
16573: LD_ADDR_VAR 0 3
16577: PUSH
16578: LD_INT 2
16580: PPUSH
16581: LD_INT 4
16583: PPUSH
16584: CALL_OW 12
16588: ST_TO_ADDR
16589: GO 16599
// s2 := 1 ;
16591: LD_ADDR_VAR 0 3
16595: PUSH
16596: LD_INT 1
16598: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16599: LD_ADDR_VAR 0 5
16603: PUSH
16604: LD_VAR 0 6
16608: PUSH
16609: LD_INT 1
16611: ARRAY
16612: PPUSH
16613: LD_VAR 0 3
16617: PPUSH
16618: CALL_OW 259
16622: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16623: LD_VAR 0 6
16627: PUSH
16628: LD_INT 1
16630: ARRAY
16631: PPUSH
16632: LD_VAR 0 2
16636: PPUSH
16637: LD_VAR 0 5
16641: PPUSH
16642: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16646: LD_VAR 0 6
16650: PUSH
16651: LD_INT 1
16653: ARRAY
16654: PPUSH
16655: LD_VAR 0 3
16659: PPUSH
16660: LD_VAR 0 4
16664: PPUSH
16665: CALL_OW 237
// end ;
16669: PPOPN 6
16671: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16672: LD_EXP 26
16676: IFFALSE 16684
16678: PUSH
16679: LD_EXP 73
16683: AND
16684: IFFALSE 16763
16686: GO 16688
16688: DISABLE
16689: LD_INT 0
16691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16692: LD_ADDR_VAR 0 1
16696: PUSH
16697: LD_INT 22
16699: PUSH
16700: LD_OWVAR 2
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 30
16711: PUSH
16712: LD_INT 3
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PPUSH
16723: CALL_OW 69
16727: ST_TO_ADDR
// if not tmp then
16728: LD_VAR 0 1
16732: NOT
16733: IFFALSE 16737
// exit ;
16735: GO 16763
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16737: LD_VAR 0 1
16741: PUSH
16742: LD_INT 1
16744: PPUSH
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 12
16754: ARRAY
16755: PPUSH
16756: LD_INT 1
16758: PPUSH
16759: CALL_OW 234
// end ;
16763: PPOPN 1
16765: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16766: LD_EXP 26
16770: IFFALSE 16778
16772: PUSH
16773: LD_EXP 74
16777: AND
16778: IFFALSE 16890
16780: GO 16782
16782: DISABLE
16783: LD_INT 0
16785: PPUSH
16786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16787: LD_ADDR_VAR 0 2
16791: PUSH
16792: LD_INT 22
16794: PUSH
16795: LD_OWVAR 2
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 2
16806: PUSH
16807: LD_INT 30
16809: PUSH
16810: LD_INT 27
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 30
16819: PUSH
16820: LD_INT 26
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 30
16829: PUSH
16830: LD_INT 28
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PPUSH
16847: CALL_OW 69
16851: ST_TO_ADDR
// if not tmp then
16852: LD_VAR 0 2
16856: NOT
16857: IFFALSE 16861
// exit ;
16859: GO 16890
// for i in tmp do
16861: LD_ADDR_VAR 0 1
16865: PUSH
16866: LD_VAR 0 2
16870: PUSH
16871: FOR_IN
16872: IFFALSE 16888
// SetLives ( i , 1 ) ;
16874: LD_VAR 0 1
16878: PPUSH
16879: LD_INT 1
16881: PPUSH
16882: CALL_OW 234
16886: GO 16871
16888: POP
16889: POP
// end ;
16890: PPOPN 2
16892: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16893: LD_EXP 26
16897: IFFALSE 16905
16899: PUSH
16900: LD_EXP 75
16904: AND
16905: IFFALSE 17192
16907: GO 16909
16909: DISABLE
16910: LD_INT 0
16912: PPUSH
16913: PPUSH
16914: PPUSH
// begin i := rand ( 1 , 7 ) ;
16915: LD_ADDR_VAR 0 1
16919: PUSH
16920: LD_INT 1
16922: PPUSH
16923: LD_INT 7
16925: PPUSH
16926: CALL_OW 12
16930: ST_TO_ADDR
// case i of 1 :
16931: LD_VAR 0 1
16935: PUSH
16936: LD_INT 1
16938: DOUBLE
16939: EQUAL
16940: IFTRUE 16944
16942: GO 16954
16944: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16945: LD_STRING earthquake(getX(game), 0, 32)
16947: PPUSH
16948: CALL_OW 559
16952: GO 17192
16954: LD_INT 2
16956: DOUBLE
16957: EQUAL
16958: IFTRUE 16962
16960: GO 16976
16962: POP
// begin ToLua ( displayStucuk(); ) ;
16963: LD_STRING displayStucuk();
16965: PPUSH
16966: CALL_OW 559
// ResetFog ;
16970: CALL_OW 335
// end ; 3 :
16974: GO 17192
16976: LD_INT 3
16978: DOUBLE
16979: EQUAL
16980: IFTRUE 16984
16982: GO 17088
16984: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16985: LD_ADDR_VAR 0 2
16989: PUSH
16990: LD_INT 22
16992: PUSH
16993: LD_OWVAR 2
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 25
17004: PUSH
17005: LD_INT 1
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PPUSH
17016: CALL_OW 69
17020: ST_TO_ADDR
// if not tmp then
17021: LD_VAR 0 2
17025: NOT
17026: IFFALSE 17030
// exit ;
17028: GO 17192
// un := tmp [ rand ( 1 , tmp ) ] ;
17030: LD_ADDR_VAR 0 3
17034: PUSH
17035: LD_VAR 0 2
17039: PUSH
17040: LD_INT 1
17042: PPUSH
17043: LD_VAR 0 2
17047: PPUSH
17048: CALL_OW 12
17052: ARRAY
17053: ST_TO_ADDR
// if Crawls ( un ) then
17054: LD_VAR 0 3
17058: PPUSH
17059: CALL_OW 318
17063: IFFALSE 17074
// ComWalk ( un ) ;
17065: LD_VAR 0 3
17069: PPUSH
17070: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17074: LD_VAR 0 3
17078: PPUSH
17079: LD_INT 8
17081: PPUSH
17082: CALL_OW 336
// end ; 4 :
17086: GO 17192
17088: LD_INT 4
17090: DOUBLE
17091: EQUAL
17092: IFTRUE 17096
17094: GO 17170
17096: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17097: LD_ADDR_VAR 0 2
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_OWVAR 2
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 30
17116: PUSH
17117: LD_INT 29
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PPUSH
17128: CALL_OW 69
17132: ST_TO_ADDR
// if not tmp then
17133: LD_VAR 0 2
17137: NOT
17138: IFFALSE 17142
// exit ;
17140: GO 17192
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17142: LD_VAR 0 2
17146: PUSH
17147: LD_INT 1
17149: ARRAY
17150: PPUSH
17151: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17155: LD_VAR 0 2
17159: PUSH
17160: LD_INT 1
17162: ARRAY
17163: PPUSH
17164: CALL_OW 65
// end ; 5 .. 7 :
17168: GO 17192
17170: LD_INT 5
17172: DOUBLE
17173: GREATEREQUAL
17174: IFFALSE 17182
17176: LD_INT 7
17178: DOUBLE
17179: LESSEQUAL
17180: IFTRUE 17184
17182: GO 17191
17184: POP
// StreamSibBomb ; end ;
17185: CALL 13373 0 0
17189: GO 17192
17191: POP
// end ;
17192: PPOPN 3
17194: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17195: LD_EXP 26
17199: IFFALSE 17207
17201: PUSH
17202: LD_EXP 76
17206: AND
17207: IFFALSE 17363
17209: GO 17211
17211: DISABLE
17212: LD_INT 0
17214: PPUSH
17215: PPUSH
17216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17217: LD_ADDR_VAR 0 2
17221: PUSH
17222: LD_INT 81
17224: PUSH
17225: LD_OWVAR 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 2
17236: PUSH
17237: LD_INT 21
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 21
17249: PUSH
17250: LD_INT 2
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: ST_TO_ADDR
// if not tmp then
17271: LD_VAR 0 2
17275: NOT
17276: IFFALSE 17280
// exit ;
17278: GO 17363
// p := 0 ;
17280: LD_ADDR_VAR 0 3
17284: PUSH
17285: LD_INT 0
17287: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17288: LD_INT 35
17290: PPUSH
17291: CALL_OW 67
// p := p + 1 ;
17295: LD_ADDR_VAR 0 3
17299: PUSH
17300: LD_VAR 0 3
17304: PUSH
17305: LD_INT 1
17307: PLUS
17308: ST_TO_ADDR
// for i in tmp do
17309: LD_ADDR_VAR 0 1
17313: PUSH
17314: LD_VAR 0 2
17318: PUSH
17319: FOR_IN
17320: IFFALSE 17351
// if GetLives ( i ) < 1000 then
17322: LD_VAR 0 1
17326: PPUSH
17327: CALL_OW 256
17331: PUSH
17332: LD_INT 1000
17334: LESS
17335: IFFALSE 17349
// SetLives ( i , 1000 ) ;
17337: LD_VAR 0 1
17341: PPUSH
17342: LD_INT 1000
17344: PPUSH
17345: CALL_OW 234
17349: GO 17319
17351: POP
17352: POP
// until p > 20 ;
17353: LD_VAR 0 3
17357: PUSH
17358: LD_INT 20
17360: GREATER
17361: IFFALSE 17288
// end ;
17363: PPOPN 3
17365: END
// every 0 0$1 trigger StreamModeActive and sTime do
17366: LD_EXP 26
17370: IFFALSE 17378
17372: PUSH
17373: LD_EXP 77
17377: AND
17378: IFFALSE 17413
17380: GO 17382
17382: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17383: LD_INT 28
17385: PPUSH
17386: LD_OWVAR 2
17390: PPUSH
17391: LD_INT 2
17393: PPUSH
17394: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17398: LD_INT 30
17400: PPUSH
17401: LD_OWVAR 2
17405: PPUSH
17406: LD_INT 2
17408: PPUSH
17409: CALL_OW 322
// end ;
17413: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17414: LD_EXP 26
17418: IFFALSE 17426
17420: PUSH
17421: LD_EXP 78
17425: AND
17426: IFFALSE 17547
17428: GO 17430
17430: DISABLE
17431: LD_INT 0
17433: PPUSH
17434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17435: LD_ADDR_VAR 0 2
17439: PUSH
17440: LD_INT 22
17442: PUSH
17443: LD_OWVAR 2
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 21
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 3
17464: PUSH
17465: LD_INT 23
17467: PUSH
17468: LD_INT 0
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: LIST
17483: PPUSH
17484: CALL_OW 69
17488: ST_TO_ADDR
// if not tmp then
17489: LD_VAR 0 2
17493: NOT
17494: IFFALSE 17498
// exit ;
17496: GO 17547
// for i in tmp do
17498: LD_ADDR_VAR 0 1
17502: PUSH
17503: LD_VAR 0 2
17507: PUSH
17508: FOR_IN
17509: IFFALSE 17545
// begin if Crawls ( i ) then
17511: LD_VAR 0 1
17515: PPUSH
17516: CALL_OW 318
17520: IFFALSE 17531
// ComWalk ( i ) ;
17522: LD_VAR 0 1
17526: PPUSH
17527: CALL_OW 138
// SetClass ( i , 2 ) ;
17531: LD_VAR 0 1
17535: PPUSH
17536: LD_INT 2
17538: PPUSH
17539: CALL_OW 336
// end ;
17543: GO 17508
17545: POP
17546: POP
// end ;
17547: PPOPN 2
17549: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17550: LD_EXP 26
17554: IFFALSE 17562
17556: PUSH
17557: LD_EXP 79
17561: AND
17562: IFFALSE 17852
17564: GO 17566
17566: DISABLE
17567: LD_INT 0
17569: PPUSH
17570: PPUSH
17571: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17572: LD_OWVAR 2
17576: PPUSH
17577: LD_INT 9
17579: PPUSH
17580: LD_INT 1
17582: PPUSH
17583: LD_INT 1
17585: PPUSH
17586: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17590: LD_INT 9
17592: PPUSH
17593: LD_OWVAR 2
17597: PPUSH
17598: CALL_OW 343
// uc_side := 9 ;
17602: LD_ADDR_OWVAR 20
17606: PUSH
17607: LD_INT 9
17609: ST_TO_ADDR
// uc_nation := 2 ;
17610: LD_ADDR_OWVAR 21
17614: PUSH
17615: LD_INT 2
17617: ST_TO_ADDR
// hc_name := Dark Warrior ;
17618: LD_ADDR_OWVAR 26
17622: PUSH
17623: LD_STRING Dark Warrior
17625: ST_TO_ADDR
// hc_gallery :=  ;
17626: LD_ADDR_OWVAR 33
17630: PUSH
17631: LD_STRING 
17633: ST_TO_ADDR
// hc_noskilllimit := true ;
17634: LD_ADDR_OWVAR 76
17638: PUSH
17639: LD_INT 1
17641: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17642: LD_ADDR_OWVAR 31
17646: PUSH
17647: LD_INT 30
17649: PUSH
17650: LD_INT 30
17652: PUSH
17653: LD_INT 30
17655: PUSH
17656: LD_INT 30
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: ST_TO_ADDR
// un := CreateHuman ;
17665: LD_ADDR_VAR 0 3
17669: PUSH
17670: CALL_OW 44
17674: ST_TO_ADDR
// hc_noskilllimit := false ;
17675: LD_ADDR_OWVAR 76
17679: PUSH
17680: LD_INT 0
17682: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17683: LD_VAR 0 3
17687: PPUSH
17688: LD_INT 1
17690: PPUSH
17691: CALL_OW 51
// ToLua ( playRanger() ) ;
17695: LD_STRING playRanger()
17697: PPUSH
17698: CALL_OW 559
// p := 0 ;
17702: LD_ADDR_VAR 0 2
17706: PUSH
17707: LD_INT 0
17709: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17710: LD_INT 35
17712: PPUSH
17713: CALL_OW 67
// p := p + 1 ;
17717: LD_ADDR_VAR 0 2
17721: PUSH
17722: LD_VAR 0 2
17726: PUSH
17727: LD_INT 1
17729: PLUS
17730: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17731: LD_VAR 0 3
17735: PPUSH
17736: CALL_OW 256
17740: PUSH
17741: LD_INT 1000
17743: LESS
17744: IFFALSE 17758
// SetLives ( un , 1000 ) ;
17746: LD_VAR 0 3
17750: PPUSH
17751: LD_INT 1000
17753: PPUSH
17754: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17758: LD_VAR 0 3
17762: PPUSH
17763: LD_INT 81
17765: PUSH
17766: LD_OWVAR 2
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 91
17777: PUSH
17778: LD_VAR 0 3
17782: PUSH
17783: LD_INT 30
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PPUSH
17795: CALL_OW 69
17799: PPUSH
17800: LD_VAR 0 3
17804: PPUSH
17805: CALL_OW 74
17809: PPUSH
17810: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17814: LD_VAR 0 2
17818: PUSH
17819: LD_INT 80
17821: GREATER
17822: IFTRUE 17835
17824: PUSH
17825: LD_VAR 0 3
17829: PPUSH
17830: CALL_OW 301
17834: OR
17835: IFFALSE 17710
// if un then
17837: LD_VAR 0 3
17841: IFFALSE 17852
// RemoveUnit ( un ) ;
17843: LD_VAR 0 3
17847: PPUSH
17848: CALL_OW 64
// end ;
17852: PPOPN 3
17854: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17855: LD_EXP 80
17859: IFFALSE 17975
17861: GO 17863
17863: DISABLE
17864: LD_INT 0
17866: PPUSH
17867: PPUSH
17868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17869: LD_ADDR_VAR 0 2
17873: PUSH
17874: LD_INT 81
17876: PUSH
17877: LD_OWVAR 2
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 21
17888: PUSH
17889: LD_INT 1
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 69
17904: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17905: LD_STRING playComputer()
17907: PPUSH
17908: CALL_OW 559
// if not tmp then
17912: LD_VAR 0 2
17916: NOT
17917: IFFALSE 17921
// exit ;
17919: GO 17975
// for i in tmp do
17921: LD_ADDR_VAR 0 1
17925: PUSH
17926: LD_VAR 0 2
17930: PUSH
17931: FOR_IN
17932: IFFALSE 17973
// for j := 1 to 4 do
17934: LD_ADDR_VAR 0 3
17938: PUSH
17939: DOUBLE
17940: LD_INT 1
17942: DEC
17943: ST_TO_ADDR
17944: LD_INT 4
17946: PUSH
17947: FOR_TO
17948: IFFALSE 17969
// SetSkill ( i , j , 10 ) ;
17950: LD_VAR 0 1
17954: PPUSH
17955: LD_VAR 0 3
17959: PPUSH
17960: LD_INT 10
17962: PPUSH
17963: CALL_OW 237
17967: GO 17947
17969: POP
17970: POP
17971: GO 17931
17973: POP
17974: POP
// end ;
17975: PPOPN 3
17977: END
// every 0 0$1 trigger s30 do var i , tmp ;
17978: LD_EXP 81
17982: IFFALSE 18051
17984: GO 17986
17986: DISABLE
17987: LD_INT 0
17989: PPUSH
17990: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17991: LD_ADDR_VAR 0 2
17995: PUSH
17996: LD_INT 22
17998: PUSH
17999: LD_OWVAR 2
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PPUSH
18008: CALL_OW 69
18012: ST_TO_ADDR
// if not tmp then
18013: LD_VAR 0 2
18017: NOT
18018: IFFALSE 18022
// exit ;
18020: GO 18051
// for i in tmp do
18022: LD_ADDR_VAR 0 1
18026: PUSH
18027: LD_VAR 0 2
18031: PUSH
18032: FOR_IN
18033: IFFALSE 18049
// SetLives ( i , 300 ) ;
18035: LD_VAR 0 1
18039: PPUSH
18040: LD_INT 300
18042: PPUSH
18043: CALL_OW 234
18047: GO 18032
18049: POP
18050: POP
// end ;
18051: PPOPN 2
18053: END
// every 0 0$1 trigger s60 do var i , tmp ;
18054: LD_EXP 82
18058: IFFALSE 18127
18060: GO 18062
18062: DISABLE
18063: LD_INT 0
18065: PPUSH
18066: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18067: LD_ADDR_VAR 0 2
18071: PUSH
18072: LD_INT 22
18074: PUSH
18075: LD_OWVAR 2
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PPUSH
18084: CALL_OW 69
18088: ST_TO_ADDR
// if not tmp then
18089: LD_VAR 0 2
18093: NOT
18094: IFFALSE 18098
// exit ;
18096: GO 18127
// for i in tmp do
18098: LD_ADDR_VAR 0 1
18102: PUSH
18103: LD_VAR 0 2
18107: PUSH
18108: FOR_IN
18109: IFFALSE 18125
// SetLives ( i , 600 ) ;
18111: LD_VAR 0 1
18115: PPUSH
18116: LD_INT 600
18118: PPUSH
18119: CALL_OW 234
18123: GO 18108
18125: POP
18126: POP
// end ;
18127: PPOPN 2
18129: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18130: LD_INT 0
18132: PPUSH
// case cmd of 301 :
18133: LD_VAR 0 1
18137: PUSH
18138: LD_INT 301
18140: DOUBLE
18141: EQUAL
18142: IFTRUE 18146
18144: GO 18178
18146: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18147: LD_VAR 0 6
18151: PPUSH
18152: LD_VAR 0 7
18156: PPUSH
18157: LD_VAR 0 8
18161: PPUSH
18162: LD_VAR 0 4
18166: PPUSH
18167: LD_VAR 0 5
18171: PPUSH
18172: CALL 19391 0 5
18176: GO 18299
18178: LD_INT 302
18180: DOUBLE
18181: EQUAL
18182: IFTRUE 18186
18184: GO 18223
18186: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18187: LD_VAR 0 6
18191: PPUSH
18192: LD_VAR 0 7
18196: PPUSH
18197: LD_VAR 0 8
18201: PPUSH
18202: LD_VAR 0 9
18206: PPUSH
18207: LD_VAR 0 4
18211: PPUSH
18212: LD_VAR 0 5
18216: PPUSH
18217: CALL 19482 0 6
18221: GO 18299
18223: LD_INT 303
18225: DOUBLE
18226: EQUAL
18227: IFTRUE 18231
18229: GO 18268
18231: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18232: LD_VAR 0 6
18236: PPUSH
18237: LD_VAR 0 7
18241: PPUSH
18242: LD_VAR 0 8
18246: PPUSH
18247: LD_VAR 0 9
18251: PPUSH
18252: LD_VAR 0 4
18256: PPUSH
18257: LD_VAR 0 5
18261: PPUSH
18262: CALL 18304 0 6
18266: GO 18299
18268: LD_INT 304
18270: DOUBLE
18271: EQUAL
18272: IFTRUE 18276
18274: GO 18298
18276: POP
// hHackTeleport ( unit , x , y ) ; end ;
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_VAR 0 4
18286: PPUSH
18287: LD_VAR 0 5
18291: PPUSH
18292: CALL 20075 0 3
18296: GO 18299
18298: POP
// end ;
18299: LD_VAR 0 12
18303: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18304: LD_INT 0
18306: PPUSH
18307: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18308: LD_VAR 0 1
18312: PUSH
18313: LD_INT 1
18315: LESS
18316: IFTRUE 18328
18318: PUSH
18319: LD_VAR 0 1
18323: PUSH
18324: LD_INT 3
18326: GREATER
18327: OR
18328: IFTRUE 18346
18330: PUSH
18331: LD_VAR 0 5
18335: PPUSH
18336: LD_VAR 0 6
18340: PPUSH
18341: CALL_OW 428
18345: OR
18346: IFFALSE 18350
// exit ;
18348: GO 19078
// uc_side := your_side ;
18350: LD_ADDR_OWVAR 20
18354: PUSH
18355: LD_OWVAR 2
18359: ST_TO_ADDR
// uc_nation := nation ;
18360: LD_ADDR_OWVAR 21
18364: PUSH
18365: LD_VAR 0 1
18369: ST_TO_ADDR
// bc_level = 1 ;
18370: LD_ADDR_OWVAR 43
18374: PUSH
18375: LD_INT 1
18377: ST_TO_ADDR
// case btype of 1 :
18378: LD_VAR 0 2
18382: PUSH
18383: LD_INT 1
18385: DOUBLE
18386: EQUAL
18387: IFTRUE 18391
18389: GO 18402
18391: POP
// bc_type := b_depot ; 2 :
18392: LD_ADDR_OWVAR 42
18396: PUSH
18397: LD_INT 0
18399: ST_TO_ADDR
18400: GO 19022
18402: LD_INT 2
18404: DOUBLE
18405: EQUAL
18406: IFTRUE 18410
18408: GO 18421
18410: POP
// bc_type := b_warehouse ; 3 :
18411: LD_ADDR_OWVAR 42
18415: PUSH
18416: LD_INT 1
18418: ST_TO_ADDR
18419: GO 19022
18421: LD_INT 3
18423: DOUBLE
18424: EQUAL
18425: IFTRUE 18429
18427: GO 18440
18429: POP
// bc_type := b_lab ; 4 .. 9 :
18430: LD_ADDR_OWVAR 42
18434: PUSH
18435: LD_INT 6
18437: ST_TO_ADDR
18438: GO 19022
18440: LD_INT 4
18442: DOUBLE
18443: GREATEREQUAL
18444: IFFALSE 18452
18446: LD_INT 9
18448: DOUBLE
18449: LESSEQUAL
18450: IFTRUE 18454
18452: GO 18514
18454: POP
// begin bc_type := b_lab_half ;
18455: LD_ADDR_OWVAR 42
18459: PUSH
18460: LD_INT 7
18462: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18463: LD_ADDR_OWVAR 44
18467: PUSH
18468: LD_INT 10
18470: PUSH
18471: LD_INT 11
18473: PUSH
18474: LD_INT 12
18476: PUSH
18477: LD_INT 15
18479: PUSH
18480: LD_INT 14
18482: PUSH
18483: LD_INT 13
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: PUSH
18494: LD_VAR 0 2
18498: PUSH
18499: LD_INT 3
18501: MINUS
18502: ARRAY
18503: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18504: LD_ADDR_OWVAR 45
18508: PUSH
18509: LD_INT 9
18511: ST_TO_ADDR
// end ; 10 .. 13 :
18512: GO 19022
18514: LD_INT 10
18516: DOUBLE
18517: GREATEREQUAL
18518: IFFALSE 18526
18520: LD_INT 13
18522: DOUBLE
18523: LESSEQUAL
18524: IFTRUE 18528
18526: GO 18605
18528: POP
// begin bc_type := b_lab_full ;
18529: LD_ADDR_OWVAR 42
18533: PUSH
18534: LD_INT 8
18536: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18537: LD_ADDR_OWVAR 44
18541: PUSH
18542: LD_INT 10
18544: PUSH
18545: LD_INT 12
18547: PUSH
18548: LD_INT 14
18550: PUSH
18551: LD_INT 13
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: PUSH
18560: LD_VAR 0 2
18564: PUSH
18565: LD_INT 9
18567: MINUS
18568: ARRAY
18569: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18570: LD_ADDR_OWVAR 45
18574: PUSH
18575: LD_INT 11
18577: PUSH
18578: LD_INT 15
18580: PUSH
18581: LD_INT 12
18583: PUSH
18584: LD_INT 15
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: PUSH
18593: LD_VAR 0 2
18597: PUSH
18598: LD_INT 9
18600: MINUS
18601: ARRAY
18602: ST_TO_ADDR
// end ; 14 :
18603: GO 19022
18605: LD_INT 14
18607: DOUBLE
18608: EQUAL
18609: IFTRUE 18613
18611: GO 18624
18613: POP
// bc_type := b_workshop ; 15 :
18614: LD_ADDR_OWVAR 42
18618: PUSH
18619: LD_INT 2
18621: ST_TO_ADDR
18622: GO 19022
18624: LD_INT 15
18626: DOUBLE
18627: EQUAL
18628: IFTRUE 18632
18630: GO 18643
18632: POP
// bc_type := b_factory ; 16 :
18633: LD_ADDR_OWVAR 42
18637: PUSH
18638: LD_INT 3
18640: ST_TO_ADDR
18641: GO 19022
18643: LD_INT 16
18645: DOUBLE
18646: EQUAL
18647: IFTRUE 18651
18649: GO 18662
18651: POP
// bc_type := b_ext_gun ; 17 :
18652: LD_ADDR_OWVAR 42
18656: PUSH
18657: LD_INT 17
18659: ST_TO_ADDR
18660: GO 19022
18662: LD_INT 17
18664: DOUBLE
18665: EQUAL
18666: IFTRUE 18670
18668: GO 18698
18670: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18671: LD_ADDR_OWVAR 42
18675: PUSH
18676: LD_INT 19
18678: PUSH
18679: LD_INT 23
18681: PUSH
18682: LD_INT 19
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: LIST
18689: PUSH
18690: LD_VAR 0 1
18694: ARRAY
18695: ST_TO_ADDR
18696: GO 19022
18698: LD_INT 18
18700: DOUBLE
18701: EQUAL
18702: IFTRUE 18706
18704: GO 18717
18706: POP
// bc_type := b_ext_radar ; 19 :
18707: LD_ADDR_OWVAR 42
18711: PUSH
18712: LD_INT 20
18714: ST_TO_ADDR
18715: GO 19022
18717: LD_INT 19
18719: DOUBLE
18720: EQUAL
18721: IFTRUE 18725
18723: GO 18736
18725: POP
// bc_type := b_ext_radio ; 20 :
18726: LD_ADDR_OWVAR 42
18730: PUSH
18731: LD_INT 22
18733: ST_TO_ADDR
18734: GO 19022
18736: LD_INT 20
18738: DOUBLE
18739: EQUAL
18740: IFTRUE 18744
18742: GO 18755
18744: POP
// bc_type := b_ext_siberium ; 21 :
18745: LD_ADDR_OWVAR 42
18749: PUSH
18750: LD_INT 21
18752: ST_TO_ADDR
18753: GO 19022
18755: LD_INT 21
18757: DOUBLE
18758: EQUAL
18759: IFTRUE 18763
18761: GO 18774
18763: POP
// bc_type := b_ext_computer ; 22 :
18764: LD_ADDR_OWVAR 42
18768: PUSH
18769: LD_INT 24
18771: ST_TO_ADDR
18772: GO 19022
18774: LD_INT 22
18776: DOUBLE
18777: EQUAL
18778: IFTRUE 18782
18780: GO 18793
18782: POP
// bc_type := b_ext_track ; 23 :
18783: LD_ADDR_OWVAR 42
18787: PUSH
18788: LD_INT 16
18790: ST_TO_ADDR
18791: GO 19022
18793: LD_INT 23
18795: DOUBLE
18796: EQUAL
18797: IFTRUE 18801
18799: GO 18812
18801: POP
// bc_type := b_ext_laser ; 24 :
18802: LD_ADDR_OWVAR 42
18806: PUSH
18807: LD_INT 25
18809: ST_TO_ADDR
18810: GO 19022
18812: LD_INT 24
18814: DOUBLE
18815: EQUAL
18816: IFTRUE 18820
18818: GO 18831
18820: POP
// bc_type := b_control_tower ; 25 :
18821: LD_ADDR_OWVAR 42
18825: PUSH
18826: LD_INT 36
18828: ST_TO_ADDR
18829: GO 19022
18831: LD_INT 25
18833: DOUBLE
18834: EQUAL
18835: IFTRUE 18839
18837: GO 18850
18839: POP
// bc_type := b_breastwork ; 26 :
18840: LD_ADDR_OWVAR 42
18844: PUSH
18845: LD_INT 31
18847: ST_TO_ADDR
18848: GO 19022
18850: LD_INT 26
18852: DOUBLE
18853: EQUAL
18854: IFTRUE 18858
18856: GO 18869
18858: POP
// bc_type := b_bunker ; 27 :
18859: LD_ADDR_OWVAR 42
18863: PUSH
18864: LD_INT 32
18866: ST_TO_ADDR
18867: GO 19022
18869: LD_INT 27
18871: DOUBLE
18872: EQUAL
18873: IFTRUE 18877
18875: GO 18888
18877: POP
// bc_type := b_turret ; 28 :
18878: LD_ADDR_OWVAR 42
18882: PUSH
18883: LD_INT 33
18885: ST_TO_ADDR
18886: GO 19022
18888: LD_INT 28
18890: DOUBLE
18891: EQUAL
18892: IFTRUE 18896
18894: GO 18907
18896: POP
// bc_type := b_armoury ; 29 :
18897: LD_ADDR_OWVAR 42
18901: PUSH
18902: LD_INT 4
18904: ST_TO_ADDR
18905: GO 19022
18907: LD_INT 29
18909: DOUBLE
18910: EQUAL
18911: IFTRUE 18915
18913: GO 18926
18915: POP
// bc_type := b_barracks ; 30 :
18916: LD_ADDR_OWVAR 42
18920: PUSH
18921: LD_INT 5
18923: ST_TO_ADDR
18924: GO 19022
18926: LD_INT 30
18928: DOUBLE
18929: EQUAL
18930: IFTRUE 18934
18932: GO 18945
18934: POP
// bc_type := b_solar_power ; 31 :
18935: LD_ADDR_OWVAR 42
18939: PUSH
18940: LD_INT 27
18942: ST_TO_ADDR
18943: GO 19022
18945: LD_INT 31
18947: DOUBLE
18948: EQUAL
18949: IFTRUE 18953
18951: GO 18964
18953: POP
// bc_type := b_oil_power ; 32 :
18954: LD_ADDR_OWVAR 42
18958: PUSH
18959: LD_INT 26
18961: ST_TO_ADDR
18962: GO 19022
18964: LD_INT 32
18966: DOUBLE
18967: EQUAL
18968: IFTRUE 18972
18970: GO 18983
18972: POP
// bc_type := b_siberite_power ; 33 :
18973: LD_ADDR_OWVAR 42
18977: PUSH
18978: LD_INT 28
18980: ST_TO_ADDR
18981: GO 19022
18983: LD_INT 33
18985: DOUBLE
18986: EQUAL
18987: IFTRUE 18991
18989: GO 19002
18991: POP
// bc_type := b_oil_mine ; 34 :
18992: LD_ADDR_OWVAR 42
18996: PUSH
18997: LD_INT 29
18999: ST_TO_ADDR
19000: GO 19022
19002: LD_INT 34
19004: DOUBLE
19005: EQUAL
19006: IFTRUE 19010
19008: GO 19021
19010: POP
// bc_type := b_siberite_mine ; end ;
19011: LD_ADDR_OWVAR 42
19015: PUSH
19016: LD_INT 30
19018: ST_TO_ADDR
19019: GO 19022
19021: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19022: LD_ADDR_VAR 0 8
19026: PUSH
19027: LD_VAR 0 5
19031: PPUSH
19032: LD_VAR 0 6
19036: PPUSH
19037: LD_VAR 0 3
19041: PPUSH
19042: CALL_OW 47
19046: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19047: LD_OWVAR 42
19051: PUSH
19052: LD_INT 32
19054: PUSH
19055: LD_INT 33
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: IN
19062: IFFALSE 19078
// PlaceWeaponTurret ( b , weapon ) ;
19064: LD_VAR 0 8
19068: PPUSH
19069: LD_VAR 0 4
19073: PPUSH
19074: CALL_OW 431
// end ;
19078: LD_VAR 0 7
19082: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19083: LD_INT 0
19085: PPUSH
19086: PPUSH
19087: PPUSH
19088: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19089: LD_ADDR_VAR 0 4
19093: PUSH
19094: LD_INT 22
19096: PUSH
19097: LD_OWVAR 2
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 30
19111: PUSH
19112: LD_INT 0
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 30
19121: PUSH
19122: LD_INT 1
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PPUSH
19138: CALL_OW 69
19142: ST_TO_ADDR
// if not tmp then
19143: LD_VAR 0 4
19147: NOT
19148: IFFALSE 19152
// exit ;
19150: GO 19211
// for i in tmp do
19152: LD_ADDR_VAR 0 2
19156: PUSH
19157: LD_VAR 0 4
19161: PUSH
19162: FOR_IN
19163: IFFALSE 19209
// for j = 1 to 3 do
19165: LD_ADDR_VAR 0 3
19169: PUSH
19170: DOUBLE
19171: LD_INT 1
19173: DEC
19174: ST_TO_ADDR
19175: LD_INT 3
19177: PUSH
19178: FOR_TO
19179: IFFALSE 19205
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19181: LD_VAR 0 2
19185: PPUSH
19186: CALL_OW 274
19190: PPUSH
19191: LD_VAR 0 3
19195: PPUSH
19196: LD_INT 99999
19198: PPUSH
19199: CALL_OW 277
19203: GO 19178
19205: POP
19206: POP
19207: GO 19162
19209: POP
19210: POP
// end ;
19211: LD_VAR 0 1
19215: RET
// export function hHackSetLevel10 ; var i , j ; begin
19216: LD_INT 0
19218: PPUSH
19219: PPUSH
19220: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19221: LD_ADDR_VAR 0 2
19225: PUSH
19226: LD_INT 21
19228: PUSH
19229: LD_INT 1
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PPUSH
19236: CALL_OW 69
19240: PUSH
19241: FOR_IN
19242: IFFALSE 19294
// if IsSelected ( i ) then
19244: LD_VAR 0 2
19248: PPUSH
19249: CALL_OW 306
19253: IFFALSE 19292
// begin for j := 1 to 4 do
19255: LD_ADDR_VAR 0 3
19259: PUSH
19260: DOUBLE
19261: LD_INT 1
19263: DEC
19264: ST_TO_ADDR
19265: LD_INT 4
19267: PUSH
19268: FOR_TO
19269: IFFALSE 19290
// SetSkill ( i , j , 10 ) ;
19271: LD_VAR 0 2
19275: PPUSH
19276: LD_VAR 0 3
19280: PPUSH
19281: LD_INT 10
19283: PPUSH
19284: CALL_OW 237
19288: GO 19268
19290: POP
19291: POP
// end ;
19292: GO 19241
19294: POP
19295: POP
// end ;
19296: LD_VAR 0 1
19300: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19301: LD_INT 0
19303: PPUSH
19304: PPUSH
19305: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19306: LD_ADDR_VAR 0 2
19310: PUSH
19311: LD_INT 22
19313: PUSH
19314: LD_OWVAR 2
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 21
19325: PUSH
19326: LD_INT 1
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PPUSH
19337: CALL_OW 69
19341: PUSH
19342: FOR_IN
19343: IFFALSE 19384
// begin for j := 1 to 4 do
19345: LD_ADDR_VAR 0 3
19349: PUSH
19350: DOUBLE
19351: LD_INT 1
19353: DEC
19354: ST_TO_ADDR
19355: LD_INT 4
19357: PUSH
19358: FOR_TO
19359: IFFALSE 19380
// SetSkill ( i , j , 10 ) ;
19361: LD_VAR 0 2
19365: PPUSH
19366: LD_VAR 0 3
19370: PPUSH
19371: LD_INT 10
19373: PPUSH
19374: CALL_OW 237
19378: GO 19358
19380: POP
19381: POP
// end ;
19382: GO 19342
19384: POP
19385: POP
// end ;
19386: LD_VAR 0 1
19390: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19391: LD_INT 0
19393: PPUSH
// uc_side := your_side ;
19394: LD_ADDR_OWVAR 20
19398: PUSH
19399: LD_OWVAR 2
19403: ST_TO_ADDR
// uc_nation := nation ;
19404: LD_ADDR_OWVAR 21
19408: PUSH
19409: LD_VAR 0 1
19413: ST_TO_ADDR
// InitHc ;
19414: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19418: LD_INT 0
19420: PPUSH
19421: LD_VAR 0 2
19425: PPUSH
19426: LD_VAR 0 3
19430: PPUSH
19431: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19435: LD_VAR 0 4
19439: PPUSH
19440: LD_VAR 0 5
19444: PPUSH
19445: CALL_OW 428
19449: PUSH
19450: LD_INT 0
19452: EQUAL
19453: IFFALSE 19477
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19455: CALL_OW 44
19459: PPUSH
19460: LD_VAR 0 4
19464: PPUSH
19465: LD_VAR 0 5
19469: PPUSH
19470: LD_INT 1
19472: PPUSH
19473: CALL_OW 48
// end ;
19477: LD_VAR 0 6
19481: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19482: LD_INT 0
19484: PPUSH
19485: PPUSH
// uc_side := your_side ;
19486: LD_ADDR_OWVAR 20
19490: PUSH
19491: LD_OWVAR 2
19495: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19496: LD_VAR 0 1
19500: PUSH
19501: LD_INT 1
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: LD_INT 3
19509: PUSH
19510: LD_INT 4
19512: PUSH
19513: LD_INT 5
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: IN
19523: IFFALSE 19535
// uc_nation := nation_american else
19525: LD_ADDR_OWVAR 21
19529: PUSH
19530: LD_INT 1
19532: ST_TO_ADDR
19533: GO 19578
// if chassis in [ 11 , 12 , 13 , 14 ] then
19535: LD_VAR 0 1
19539: PUSH
19540: LD_INT 11
19542: PUSH
19543: LD_INT 12
19545: PUSH
19546: LD_INT 13
19548: PUSH
19549: LD_INT 14
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: IN
19558: IFFALSE 19570
// uc_nation := nation_arabian else
19560: LD_ADDR_OWVAR 21
19564: PUSH
19565: LD_INT 2
19567: ST_TO_ADDR
19568: GO 19578
// uc_nation := nation_russian ;
19570: LD_ADDR_OWVAR 21
19574: PUSH
19575: LD_INT 3
19577: ST_TO_ADDR
// vc_chassis := chassis ;
19578: LD_ADDR_OWVAR 37
19582: PUSH
19583: LD_VAR 0 1
19587: ST_TO_ADDR
// vc_engine := engine ;
19588: LD_ADDR_OWVAR 39
19592: PUSH
19593: LD_VAR 0 2
19597: ST_TO_ADDR
// vc_control := control ;
19598: LD_ADDR_OWVAR 38
19602: PUSH
19603: LD_VAR 0 3
19607: ST_TO_ADDR
// vc_weapon := weapon ;
19608: LD_ADDR_OWVAR 40
19612: PUSH
19613: LD_VAR 0 4
19617: ST_TO_ADDR
// un := CreateVehicle ;
19618: LD_ADDR_VAR 0 8
19622: PUSH
19623: CALL_OW 45
19627: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19628: LD_VAR 0 8
19632: PPUSH
19633: LD_INT 0
19635: PPUSH
19636: LD_INT 5
19638: PPUSH
19639: CALL_OW 12
19643: PPUSH
19644: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19648: LD_VAR 0 8
19652: PPUSH
19653: LD_VAR 0 5
19657: PPUSH
19658: LD_VAR 0 6
19662: PPUSH
19663: LD_INT 1
19665: PPUSH
19666: CALL_OW 48
// end ;
19670: LD_VAR 0 7
19674: RET
// export hInvincible ; every 1 do
19675: GO 19677
19677: DISABLE
// hInvincible := [ ] ;
19678: LD_ADDR_EXP 83
19682: PUSH
19683: EMPTY
19684: ST_TO_ADDR
19685: END
// every 10 do var i ;
19686: GO 19688
19688: DISABLE
19689: LD_INT 0
19691: PPUSH
// begin enable ;
19692: ENABLE
// if not hInvincible then
19693: LD_EXP 83
19697: NOT
19698: IFFALSE 19702
// exit ;
19700: GO 19746
// for i in hInvincible do
19702: LD_ADDR_VAR 0 1
19706: PUSH
19707: LD_EXP 83
19711: PUSH
19712: FOR_IN
19713: IFFALSE 19744
// if GetLives ( i ) < 1000 then
19715: LD_VAR 0 1
19719: PPUSH
19720: CALL_OW 256
19724: PUSH
19725: LD_INT 1000
19727: LESS
19728: IFFALSE 19742
// SetLives ( i , 1000 ) ;
19730: LD_VAR 0 1
19734: PPUSH
19735: LD_INT 1000
19737: PPUSH
19738: CALL_OW 234
19742: GO 19712
19744: POP
19745: POP
// end ;
19746: PPOPN 1
19748: END
// export function hHackInvincible ; var i ; begin
19749: LD_INT 0
19751: PPUSH
19752: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19753: LD_ADDR_VAR 0 2
19757: PUSH
19758: LD_INT 2
19760: PUSH
19761: LD_INT 21
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 21
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: PPUSH
19786: CALL_OW 69
19790: PUSH
19791: FOR_IN
19792: IFFALSE 19853
// if IsSelected ( i ) then
19794: LD_VAR 0 2
19798: PPUSH
19799: CALL_OW 306
19803: IFFALSE 19851
// begin if i in hInvincible then
19805: LD_VAR 0 2
19809: PUSH
19810: LD_EXP 83
19814: IN
19815: IFFALSE 19835
// hInvincible := hInvincible diff i else
19817: LD_ADDR_EXP 83
19821: PUSH
19822: LD_EXP 83
19826: PUSH
19827: LD_VAR 0 2
19831: DIFF
19832: ST_TO_ADDR
19833: GO 19851
// hInvincible := hInvincible union i ;
19835: LD_ADDR_EXP 83
19839: PUSH
19840: LD_EXP 83
19844: PUSH
19845: LD_VAR 0 2
19849: UNION
19850: ST_TO_ADDR
// end ;
19851: GO 19791
19853: POP
19854: POP
// end ;
19855: LD_VAR 0 1
19859: RET
// export function hHackInvisible ; var i , j ; begin
19860: LD_INT 0
19862: PPUSH
19863: PPUSH
19864: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19865: LD_ADDR_VAR 0 2
19869: PUSH
19870: LD_INT 21
19872: PUSH
19873: LD_INT 1
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PPUSH
19880: CALL_OW 69
19884: PUSH
19885: FOR_IN
19886: IFFALSE 19910
// if IsSelected ( i ) then
19888: LD_VAR 0 2
19892: PPUSH
19893: CALL_OW 306
19897: IFFALSE 19908
// ComForceInvisible ( i ) ;
19899: LD_VAR 0 2
19903: PPUSH
19904: CALL_OW 496
19908: GO 19885
19910: POP
19911: POP
// end ;
19912: LD_VAR 0 1
19916: RET
// export function hHackChangeYourSide ; begin
19917: LD_INT 0
19919: PPUSH
// if your_side = 8 then
19920: LD_OWVAR 2
19924: PUSH
19925: LD_INT 8
19927: EQUAL
19928: IFFALSE 19940
// your_side := 0 else
19930: LD_ADDR_OWVAR 2
19934: PUSH
19935: LD_INT 0
19937: ST_TO_ADDR
19938: GO 19954
// your_side := your_side + 1 ;
19940: LD_ADDR_OWVAR 2
19944: PUSH
19945: LD_OWVAR 2
19949: PUSH
19950: LD_INT 1
19952: PLUS
19953: ST_TO_ADDR
// end ;
19954: LD_VAR 0 1
19958: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19959: LD_INT 0
19961: PPUSH
19962: PPUSH
19963: PPUSH
// for i in all_units do
19964: LD_ADDR_VAR 0 2
19968: PUSH
19969: LD_OWVAR 3
19973: PUSH
19974: FOR_IN
19975: IFFALSE 20053
// if IsSelected ( i ) then
19977: LD_VAR 0 2
19981: PPUSH
19982: CALL_OW 306
19986: IFFALSE 20051
// begin j := GetSide ( i ) ;
19988: LD_ADDR_VAR 0 3
19992: PUSH
19993: LD_VAR 0 2
19997: PPUSH
19998: CALL_OW 255
20002: ST_TO_ADDR
// if j = 8 then
20003: LD_VAR 0 3
20007: PUSH
20008: LD_INT 8
20010: EQUAL
20011: IFFALSE 20023
// j := 0 else
20013: LD_ADDR_VAR 0 3
20017: PUSH
20018: LD_INT 0
20020: ST_TO_ADDR
20021: GO 20037
// j := j + 1 ;
20023: LD_ADDR_VAR 0 3
20027: PUSH
20028: LD_VAR 0 3
20032: PUSH
20033: LD_INT 1
20035: PLUS
20036: ST_TO_ADDR
// SetSide ( i , j ) ;
20037: LD_VAR 0 2
20041: PPUSH
20042: LD_VAR 0 3
20046: PPUSH
20047: CALL_OW 235
// end ;
20051: GO 19974
20053: POP
20054: POP
// end ;
20055: LD_VAR 0 1
20059: RET
// export function hHackFog ; begin
20060: LD_INT 0
20062: PPUSH
// FogOff ( true ) ;
20063: LD_INT 1
20065: PPUSH
20066: CALL_OW 344
// end ;
20070: LD_VAR 0 1
20074: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20075: LD_INT 0
20077: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20078: LD_VAR 0 1
20082: PPUSH
20083: LD_VAR 0 2
20087: PPUSH
20088: LD_VAR 0 3
20092: PPUSH
20093: LD_INT 1
20095: PPUSH
20096: LD_INT 1
20098: PPUSH
20099: CALL_OW 483
// CenterOnXY ( x , y ) ;
20103: LD_VAR 0 2
20107: PPUSH
20108: LD_VAR 0 3
20112: PPUSH
20113: CALL_OW 84
// end ;
20117: LD_VAR 0 4
20121: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20122: LD_INT 0
20124: PPUSH
20125: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20126: LD_VAR 0 1
20130: NOT
20131: IFTRUE 20150
20133: PUSH
20134: LD_VAR 0 2
20138: PPUSH
20139: LD_VAR 0 3
20143: PPUSH
20144: CALL_OW 488
20148: NOT
20149: OR
20150: IFTRUE 20185
20152: PUSH
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 266
20162: PUSH
20163: LD_INT 3
20165: NONEQUAL
20166: IFFALSE 20184
20168: PUSH
20169: LD_VAR 0 1
20173: PPUSH
20174: CALL_OW 247
20178: PUSH
20179: LD_INT 1
20181: EQUAL
20182: NOT
20183: AND
20184: OR
20185: IFFALSE 20189
// exit ;
20187: GO 20471
// if GetType ( factory ) = unit_human then
20189: LD_VAR 0 1
20193: PPUSH
20194: CALL_OW 247
20198: PUSH
20199: LD_INT 1
20201: EQUAL
20202: IFFALSE 20219
// factory := IsInUnit ( factory ) ;
20204: LD_ADDR_VAR 0 1
20208: PUSH
20209: LD_VAR 0 1
20213: PPUSH
20214: CALL_OW 310
20218: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20219: LD_VAR 0 1
20223: PPUSH
20224: CALL_OW 266
20228: PUSH
20229: LD_INT 3
20231: NONEQUAL
20232: IFFALSE 20236
// exit ;
20234: GO 20471
// for i := 1 to Count ( factoryWaypoints ) do
20236: LD_ADDR_VAR 0 5
20240: PUSH
20241: DOUBLE
20242: LD_INT 1
20244: DEC
20245: ST_TO_ADDR
20246: LD_EXP 84
20250: PPUSH
20251: CALL 30531 0 1
20255: PUSH
20256: FOR_TO
20257: IFFALSE 20419
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
20259: LD_VAR 0 2
20263: PPUSH
20264: LD_VAR 0 3
20268: PPUSH
20269: CALL_OW 428
20273: PUSH
20274: LD_EXP 84
20278: PUSH
20279: LD_VAR 0 5
20283: ARRAY
20284: PUSH
20285: LD_INT 2
20287: ARRAY
20288: EQUAL
20289: IFFALSE 20321
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20291: LD_ADDR_EXP 84
20295: PUSH
20296: LD_EXP 84
20300: PPUSH
20301: LD_VAR 0 5
20305: PPUSH
20306: CALL_OW 3
20310: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20311: CALL 20476 0 0
// exit ;
20315: POP
20316: POP
20317: GO 20471
// end else
20319: GO 20417
// if factory = factoryWaypoints [ i ] [ 2 ] then
20321: LD_VAR 0 1
20325: PUSH
20326: LD_EXP 84
20330: PUSH
20331: LD_VAR 0 5
20335: ARRAY
20336: PUSH
20337: LD_INT 2
20339: ARRAY
20340: EQUAL
20341: IFFALSE 20417
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20343: LD_ADDR_EXP 84
20347: PUSH
20348: LD_EXP 84
20352: PPUSH
20353: LD_VAR 0 5
20357: PPUSH
20358: CALL_OW 3
20362: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20363: LD_ADDR_EXP 84
20367: PUSH
20368: LD_EXP 84
20372: PPUSH
20373: LD_VAR 0 1
20377: PPUSH
20378: CALL_OW 255
20382: PUSH
20383: LD_VAR 0 1
20387: PUSH
20388: LD_VAR 0 2
20392: PUSH
20393: LD_VAR 0 3
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: PPUSH
20404: CALL 66507 0 2
20408: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20409: CALL 20476 0 0
// exit ;
20413: POP
20414: POP
20415: GO 20471
// end ; end ;
20417: GO 20256
20419: POP
20420: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20421: LD_ADDR_EXP 84
20425: PUSH
20426: LD_EXP 84
20430: PPUSH
20431: LD_VAR 0 1
20435: PPUSH
20436: CALL_OW 255
20440: PUSH
20441: LD_VAR 0 1
20445: PUSH
20446: LD_VAR 0 2
20450: PUSH
20451: LD_VAR 0 3
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: PPUSH
20462: CALL 66507 0 2
20466: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20467: CALL 20476 0 0
// end ;
20471: LD_VAR 0 4
20475: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20476: LD_INT 0
20478: PPUSH
20479: PPUSH
20480: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20481: LD_STRING resetFactoryWaypoint();
20483: PPUSH
20484: CALL_OW 559
// if factoryWaypoints then
20488: LD_EXP 84
20492: IFFALSE 20613
// begin list := factoryWaypoints ;
20494: LD_ADDR_VAR 0 3
20498: PUSH
20499: LD_EXP 84
20503: ST_TO_ADDR
// for i := 1 to list do
20504: LD_ADDR_VAR 0 2
20508: PUSH
20509: DOUBLE
20510: LD_INT 1
20512: DEC
20513: ST_TO_ADDR
20514: LD_VAR 0 3
20518: PUSH
20519: FOR_TO
20520: IFFALSE 20611
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20522: LD_STRING setFactoryWaypointXY(
20524: PUSH
20525: LD_VAR 0 3
20529: PUSH
20530: LD_VAR 0 2
20534: ARRAY
20535: PUSH
20536: LD_INT 1
20538: ARRAY
20539: STR
20540: PUSH
20541: LD_STRING ,
20543: STR
20544: PUSH
20545: LD_VAR 0 3
20549: PUSH
20550: LD_VAR 0 2
20554: ARRAY
20555: PUSH
20556: LD_INT 2
20558: ARRAY
20559: STR
20560: PUSH
20561: LD_STRING ,
20563: STR
20564: PUSH
20565: LD_VAR 0 3
20569: PUSH
20570: LD_VAR 0 2
20574: ARRAY
20575: PUSH
20576: LD_INT 3
20578: ARRAY
20579: STR
20580: PUSH
20581: LD_STRING ,
20583: STR
20584: PUSH
20585: LD_VAR 0 3
20589: PUSH
20590: LD_VAR 0 2
20594: ARRAY
20595: PUSH
20596: LD_INT 4
20598: ARRAY
20599: STR
20600: PUSH
20601: LD_STRING )
20603: STR
20604: PPUSH
20605: CALL_OW 559
20609: GO 20519
20611: POP
20612: POP
// end ; end ;
20613: LD_VAR 0 1
20617: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20618: LD_INT 0
20620: PPUSH
// if HexInfo ( x , y ) = warehouse then
20621: LD_VAR 0 2
20625: PPUSH
20626: LD_VAR 0 3
20630: PPUSH
20631: CALL_OW 428
20635: PUSH
20636: LD_VAR 0 1
20640: EQUAL
20641: IFFALSE 20668
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20643: LD_ADDR_EXP 86
20647: PUSH
20648: LD_EXP 86
20652: PPUSH
20653: LD_VAR 0 1
20657: PPUSH
20658: LD_INT 0
20660: PPUSH
20661: CALL_OW 1
20665: ST_TO_ADDR
20666: GO 20719
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20668: LD_ADDR_EXP 86
20672: PUSH
20673: LD_EXP 86
20677: PPUSH
20678: LD_VAR 0 1
20682: PPUSH
20683: LD_VAR 0 1
20687: PPUSH
20688: CALL_OW 255
20692: PUSH
20693: LD_VAR 0 1
20697: PUSH
20698: LD_VAR 0 2
20702: PUSH
20703: LD_VAR 0 3
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: PPUSH
20714: CALL_OW 1
20718: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20719: CALL 20728 0 0
// end ;
20723: LD_VAR 0 4
20727: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20728: LD_INT 0
20730: PPUSH
20731: PPUSH
20732: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20733: LD_STRING resetWarehouseGatheringPoints();
20735: PPUSH
20736: CALL_OW 559
// if warehouseGatheringPoints then
20740: LD_EXP 86
20744: IFFALSE 20870
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20746: LD_ADDR_VAR 0 3
20750: PUSH
20751: LD_EXP 86
20755: PPUSH
20756: CALL 70441 0 1
20760: ST_TO_ADDR
// for i := 1 to list do
20761: LD_ADDR_VAR 0 2
20765: PUSH
20766: DOUBLE
20767: LD_INT 1
20769: DEC
20770: ST_TO_ADDR
20771: LD_VAR 0 3
20775: PUSH
20776: FOR_TO
20777: IFFALSE 20868
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20779: LD_STRING setWarehouseGatheringPointXY(
20781: PUSH
20782: LD_VAR 0 3
20786: PUSH
20787: LD_VAR 0 2
20791: ARRAY
20792: PUSH
20793: LD_INT 1
20795: ARRAY
20796: STR
20797: PUSH
20798: LD_STRING ,
20800: STR
20801: PUSH
20802: LD_VAR 0 3
20806: PUSH
20807: LD_VAR 0 2
20811: ARRAY
20812: PUSH
20813: LD_INT 2
20815: ARRAY
20816: STR
20817: PUSH
20818: LD_STRING ,
20820: STR
20821: PUSH
20822: LD_VAR 0 3
20826: PUSH
20827: LD_VAR 0 2
20831: ARRAY
20832: PUSH
20833: LD_INT 3
20835: ARRAY
20836: STR
20837: PUSH
20838: LD_STRING ,
20840: STR
20841: PUSH
20842: LD_VAR 0 3
20846: PUSH
20847: LD_VAR 0 2
20851: ARRAY
20852: PUSH
20853: LD_INT 4
20855: ARRAY
20856: STR
20857: PUSH
20858: LD_STRING )
20860: STR
20861: PPUSH
20862: CALL_OW 559
20866: GO 20776
20868: POP
20869: POP
// end ; end ;
20870: LD_VAR 0 1
20874: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20875: LD_EXP 86
20879: IFFALSE 21574
20881: GO 20883
20883: DISABLE
20884: LD_INT 0
20886: PPUSH
20887: PPUSH
20888: PPUSH
20889: PPUSH
20890: PPUSH
20891: PPUSH
20892: PPUSH
20893: PPUSH
20894: PPUSH
// begin enable ;
20895: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20896: LD_ADDR_VAR 0 3
20900: PUSH
20901: LD_EXP 86
20905: PPUSH
20906: CALL 70441 0 1
20910: ST_TO_ADDR
// if not list then
20911: LD_VAR 0 3
20915: NOT
20916: IFFALSE 20920
// exit ;
20918: GO 21574
// for i := 1 to list do
20920: LD_ADDR_VAR 0 1
20924: PUSH
20925: DOUBLE
20926: LD_INT 1
20928: DEC
20929: ST_TO_ADDR
20930: LD_VAR 0 3
20934: PUSH
20935: FOR_TO
20936: IFFALSE 21572
// begin depot := list [ i ] [ 2 ] ;
20938: LD_ADDR_VAR 0 8
20942: PUSH
20943: LD_VAR 0 3
20947: PUSH
20948: LD_VAR 0 1
20952: ARRAY
20953: PUSH
20954: LD_INT 2
20956: ARRAY
20957: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20958: LD_ADDR_VAR 0 5
20962: PUSH
20963: LD_VAR 0 3
20967: PUSH
20968: LD_VAR 0 1
20972: ARRAY
20973: PUSH
20974: LD_INT 1
20976: ARRAY
20977: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20978: LD_VAR 0 8
20982: PPUSH
20983: CALL_OW 301
20987: IFTRUE 21006
20989: PUSH
20990: LD_VAR 0 5
20994: PUSH
20995: LD_VAR 0 8
20999: PPUSH
21000: CALL_OW 255
21004: NONEQUAL
21005: OR
21006: IFFALSE 21035
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21008: LD_ADDR_EXP 86
21012: PUSH
21013: LD_EXP 86
21017: PPUSH
21018: LD_VAR 0 8
21022: PPUSH
21023: LD_INT 0
21025: PPUSH
21026: CALL_OW 1
21030: ST_TO_ADDR
// exit ;
21031: POP
21032: POP
21033: GO 21574
// end ; x := list [ i ] [ 3 ] ;
21035: LD_ADDR_VAR 0 6
21039: PUSH
21040: LD_VAR 0 3
21044: PUSH
21045: LD_VAR 0 1
21049: ARRAY
21050: PUSH
21051: LD_INT 3
21053: ARRAY
21054: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21055: LD_ADDR_VAR 0 7
21059: PUSH
21060: LD_VAR 0 3
21064: PUSH
21065: LD_VAR 0 1
21069: ARRAY
21070: PUSH
21071: LD_INT 4
21073: ARRAY
21074: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21075: LD_ADDR_VAR 0 9
21079: PUSH
21080: LD_VAR 0 6
21084: PPUSH
21085: LD_VAR 0 7
21089: PPUSH
21090: LD_INT 16
21092: PPUSH
21093: CALL 69015 0 3
21097: ST_TO_ADDR
// if not cratesNearbyPoint then
21098: LD_VAR 0 9
21102: NOT
21103: IFFALSE 21109
// exit ;
21105: POP
21106: POP
21107: GO 21574
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21109: LD_ADDR_VAR 0 4
21113: PUSH
21114: LD_INT 22
21116: PUSH
21117: LD_VAR 0 5
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 3
21128: PUSH
21129: LD_INT 60
21131: PUSH
21132: EMPTY
21133: LIST
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 91
21141: PUSH
21142: LD_VAR 0 8
21146: PUSH
21147: LD_INT 6
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 2
21157: PUSH
21158: LD_INT 25
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 25
21170: PUSH
21171: LD_INT 16
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: LIST
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: PPUSH
21189: CALL_OW 69
21193: PUSH
21194: LD_VAR 0 8
21198: PPUSH
21199: CALL_OW 313
21203: PPUSH
21204: LD_INT 3
21206: PUSH
21207: LD_INT 60
21209: PUSH
21210: EMPTY
21211: LIST
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 2
21219: PUSH
21220: LD_INT 25
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 25
21232: PUSH
21233: LD_INT 16
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: LIST
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PPUSH
21249: CALL_OW 72
21253: UNION
21254: ST_TO_ADDR
// if tmp then
21255: LD_VAR 0 4
21259: IFFALSE 21339
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21261: LD_ADDR_VAR 0 4
21265: PUSH
21266: LD_VAR 0 4
21270: PPUSH
21271: LD_INT 3
21273: PPUSH
21274: CALL 66822 0 2
21278: ST_TO_ADDR
// for j in tmp do
21279: LD_ADDR_VAR 0 2
21283: PUSH
21284: LD_VAR 0 4
21288: PUSH
21289: FOR_IN
21290: IFFALSE 21333
// begin if IsInUnit ( j ) then
21292: LD_VAR 0 2
21296: PPUSH
21297: CALL_OW 310
21301: IFFALSE 21312
// ComExit ( j ) ;
21303: LD_VAR 0 2
21307: PPUSH
21308: CALL 66905 0 1
// AddComCollect ( j , x , y ) ;
21312: LD_VAR 0 2
21316: PPUSH
21317: LD_VAR 0 6
21321: PPUSH
21322: LD_VAR 0 7
21326: PPUSH
21327: CALL_OW 177
// end ;
21331: GO 21289
21333: POP
21334: POP
// exit ;
21335: POP
21336: POP
21337: GO 21574
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21339: LD_ADDR_VAR 0 4
21343: PUSH
21344: LD_INT 22
21346: PUSH
21347: LD_VAR 0 5
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 91
21358: PUSH
21359: LD_VAR 0 8
21363: PUSH
21364: LD_INT 8
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 2
21374: PUSH
21375: LD_INT 34
21377: PUSH
21378: LD_INT 12
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 34
21387: PUSH
21388: LD_INT 51
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 34
21397: PUSH
21398: LD_INT 32
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 34
21407: PUSH
21408: LD_INT 89
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: PPUSH
21427: CALL_OW 69
21431: ST_TO_ADDR
// if tmp then
21432: LD_VAR 0 4
21436: IFFALSE 21570
// begin for j in tmp do
21438: LD_ADDR_VAR 0 2
21442: PUSH
21443: LD_VAR 0 4
21447: PUSH
21448: FOR_IN
21449: IFFALSE 21568
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21451: LD_VAR 0 2
21455: PPUSH
21456: CALL_OW 262
21460: PUSH
21461: LD_INT 3
21463: EQUAL
21464: IFTRUE 21481
21466: PUSH
21467: LD_VAR 0 2
21471: PPUSH
21472: CALL_OW 261
21476: PUSH
21477: LD_INT 20
21479: GREATER
21480: OR
21481: IFFALSE 21495
21483: PUSH
21484: LD_VAR 0 2
21488: PPUSH
21489: CALL_OW 314
21493: NOT
21494: AND
21495: IFFALSE 21525
21497: PUSH
21498: LD_VAR 0 2
21502: PPUSH
21503: CALL_OW 263
21507: PUSH
21508: LD_INT 1
21510: NONEQUAL
21511: IFTRUE 21524
21513: PUSH
21514: LD_VAR 0 2
21518: PPUSH
21519: CALL_OW 311
21523: OR
21524: AND
21525: IFFALSE 21566
// begin ComCollect ( j , x , y ) ;
21527: LD_VAR 0 2
21531: PPUSH
21532: LD_VAR 0 6
21536: PPUSH
21537: LD_VAR 0 7
21541: PPUSH
21542: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21546: LD_VAR 0 2
21550: PPUSH
21551: LD_VAR 0 8
21555: PPUSH
21556: CALL_OW 172
// exit ;
21560: POP
21561: POP
21562: POP
21563: POP
21564: GO 21574
// end ;
21566: GO 21448
21568: POP
21569: POP
// end ; end ;
21570: GO 20935
21572: POP
21573: POP
// end ; end_of_file
21574: PPOPN 9
21576: END
// export function SOS_UnitDestroyed ( un ) ; begin
21577: LD_INT 0
21579: PPUSH
// ComRadiation ( un ) ;
21580: LD_VAR 0 1
21584: PPUSH
21585: CALL 22747 0 1
// end ;
21589: LD_VAR 0 2
21593: RET
// export function SOS_UnitKamikazed ( un ) ; begin
21594: LD_INT 0
21596: PPUSH
// ComRadiation ( un ) ;
21597: LD_VAR 0 1
21601: PPUSH
21602: CALL 22747 0 1
// end ;
21606: LD_VAR 0 2
21610: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21611: LD_INT 0
21613: PPUSH
// end ;
21614: LD_VAR 0 4
21618: RET
// export function SOS_Command ( cmd ) ; begin
21619: LD_INT 0
21621: PPUSH
// end ;
21622: LD_VAR 0 2
21626: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21627: LD_INT 0
21629: PPUSH
// end ;
21630: LD_VAR 0 6
21634: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
21635: LD_INT 0
21637: PPUSH
21638: PPUSH
21639: PPUSH
21640: PPUSH
21641: PPUSH
// if not vehicle or not factory then
21642: LD_VAR 0 1
21646: NOT
21647: IFTRUE 21656
21649: PUSH
21650: LD_VAR 0 2
21654: NOT
21655: OR
21656: IFFALSE 21660
// exit ;
21658: GO 22322
// weapon := GetWeapon ( vehicle ) ;
21660: LD_ADDR_VAR 0 7
21664: PUSH
21665: LD_VAR 0 1
21669: PPUSH
21670: CALL_OW 264
21674: ST_TO_ADDR
// if weapon = ar_miner then
21675: LD_VAR 0 7
21679: PUSH
21680: LD_INT 81
21682: EQUAL
21683: IFFALSE 21740
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
21685: LD_ADDR_EXP 95
21689: PUSH
21690: LD_EXP 95
21694: PPUSH
21695: LD_EXP 95
21699: PUSH
21700: LD_INT 1
21702: PLUS
21703: PPUSH
21704: LD_VAR 0 1
21708: PPUSH
21709: CALL_OW 1
21713: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21714: LD_ADDR_EXP 96
21718: PUSH
21719: LD_EXP 96
21723: PPUSH
21724: LD_EXP 96
21728: PUSH
21729: LD_INT 1
21731: PLUS
21732: PPUSH
21733: EMPTY
21734: PPUSH
21735: CALL_OW 1
21739: ST_TO_ADDR
// end ; if not factoryWaypoints then
21740: LD_EXP 84
21744: NOT
21745: IFFALSE 21749
// exit ;
21747: GO 22322
// for i := 1 to Count ( factoryWaypoints ) do
21749: LD_ADDR_VAR 0 4
21753: PUSH
21754: DOUBLE
21755: LD_INT 1
21757: DEC
21758: ST_TO_ADDR
21759: LD_EXP 84
21763: PPUSH
21764: CALL 30531 0 1
21768: PUSH
21769: FOR_TO
21770: IFFALSE 22320
// if factoryWaypoints [ i ] [ 2 ] = factory then
21772: LD_EXP 84
21776: PUSH
21777: LD_VAR 0 4
21781: ARRAY
21782: PUSH
21783: LD_INT 2
21785: ARRAY
21786: PUSH
21787: LD_VAR 0 2
21791: EQUAL
21792: IFFALSE 22318
// begin if GetControl ( vehicle ) = control_manual then
21794: LD_VAR 0 1
21798: PPUSH
21799: CALL_OW 263
21803: PUSH
21804: LD_INT 1
21806: EQUAL
21807: IFFALSE 22171
// begin driver := IsDrivenBy ( vehicle ) ;
21809: LD_ADDR_VAR 0 5
21813: PUSH
21814: LD_VAR 0 1
21818: PPUSH
21819: CALL_OW 311
21823: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
21824: LD_VAR 0 5
21828: PUSH
21829: LD_EXP 85
21833: IN
21834: IFTRUE 21848
21836: PUSH
21837: LD_VAR 0 1
21841: PUSH
21842: LD_EXP 85
21846: IN
21847: OR
21848: IFFALSE 21854
// exit ;
21850: POP
21851: POP
21852: GO 22322
// if not HasTask ( driver ) then
21854: LD_VAR 0 5
21858: PPUSH
21859: CALL_OW 314
21863: NOT
21864: IFFALSE 22169
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
21866: LD_ADDR_EXP 85
21870: PUSH
21871: LD_EXP 85
21875: PPUSH
21876: LD_VAR 0 5
21880: PPUSH
21881: CALL 66507 0 2
21885: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
21886: LD_ADDR_EXP 85
21890: PUSH
21891: LD_EXP 85
21895: PPUSH
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL 66507 0 2
21905: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21906: LD_ADDR_VAR 0 6
21910: PUSH
21911: LD_EXP 84
21915: PUSH
21916: LD_VAR 0 4
21920: ARRAY
21921: PUSH
21922: LD_INT 3
21924: ARRAY
21925: PPUSH
21926: LD_EXP 84
21930: PUSH
21931: LD_VAR 0 4
21935: ARRAY
21936: PUSH
21937: LD_INT 4
21939: ARRAY
21940: PPUSH
21941: CALL_OW 428
21945: ST_TO_ADDR
// if hex then
21946: LD_VAR 0 6
21950: IFFALSE 21968
// ComMoveUnit ( driver , hex ) else
21952: LD_VAR 0 5
21956: PPUSH
21957: LD_VAR 0 6
21961: PPUSH
21962: CALL_OW 112
21966: GO 22052
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
21968: LD_VAR 0 1
21972: PPUSH
21973: LD_EXP 84
21977: PUSH
21978: LD_VAR 0 4
21982: ARRAY
21983: PUSH
21984: LD_INT 3
21986: ARRAY
21987: PPUSH
21988: LD_EXP 84
21992: PUSH
21993: LD_VAR 0 4
21997: ARRAY
21998: PUSH
21999: LD_INT 4
22001: ARRAY
22002: PPUSH
22003: CALL_OW 297
22007: PUSH
22008: LD_INT 0
22010: GREATER
22011: IFFALSE 22052
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22013: LD_VAR 0 5
22017: PPUSH
22018: LD_EXP 84
22022: PUSH
22023: LD_VAR 0 4
22027: ARRAY
22028: PUSH
22029: LD_INT 3
22031: ARRAY
22032: PPUSH
22033: LD_EXP 84
22037: PUSH
22038: LD_VAR 0 4
22042: ARRAY
22043: PUSH
22044: LD_INT 4
22046: ARRAY
22047: PPUSH
22048: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22052: LD_VAR 0 5
22056: PPUSH
22057: CALL_OW 181
// if Multiplayer then
22061: LD_OWVAR 4
22065: IFFALSE 22114
// begin repeat wait ( 10 ) ;
22067: LD_INT 10
22069: PPUSH
22070: CALL_OW 67
// until not IsInUnit ( driver ) ;
22074: LD_VAR 0 5
22078: PPUSH
22079: CALL_OW 310
22083: NOT
22084: IFFALSE 22067
// if not HasTask ( driver ) then
22086: LD_VAR 0 5
22090: PPUSH
22091: CALL_OW 314
22095: NOT
22096: IFFALSE 22112
// ComEnterUnit ( driver , factory ) ;
22098: LD_VAR 0 5
22102: PPUSH
22103: LD_VAR 0 2
22107: PPUSH
22108: CALL_OW 120
// end else
22112: GO 22128
// AddComEnterUnit ( driver , factory ) ;
22114: LD_VAR 0 5
22118: PPUSH
22119: LD_VAR 0 2
22123: PPUSH
22124: CALL_OW 180
// wait ( 0 0$1 ) ;
22128: LD_INT 35
22130: PPUSH
22131: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
22135: LD_ADDR_EXP 85
22139: PUSH
22140: LD_EXP 85
22144: PUSH
22145: LD_VAR 0 5
22149: DIFF
22150: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
22151: LD_ADDR_EXP 85
22155: PUSH
22156: LD_EXP 85
22160: PUSH
22161: LD_VAR 0 1
22165: DIFF
22166: ST_TO_ADDR
// break ;
22167: GO 22320
// end ; end else
22169: GO 22318
// if GetControl ( vehicle ) = control_remote then
22171: LD_VAR 0 1
22175: PPUSH
22176: CALL_OW 263
22180: PUSH
22181: LD_INT 2
22183: EQUAL
22184: IFFALSE 22270
// begin wait ( 0 0$2 ) ;
22186: LD_INT 70
22188: PPUSH
22189: CALL_OW 67
// repeat wait ( 10 ) ;
22193: LD_INT 10
22195: PPUSH
22196: CALL_OW 67
// Connect ( vehicle ) ;
22200: LD_VAR 0 1
22204: PPUSH
22205: CALL 36809 0 1
// until IsControledBy ( vehicle ) ;
22209: LD_VAR 0 1
22213: PPUSH
22214: CALL_OW 312
22218: IFFALSE 22193
// wait ( 10 ) ;
22220: LD_INT 10
22222: PPUSH
22223: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22227: LD_VAR 0 1
22231: PPUSH
22232: LD_EXP 84
22236: PUSH
22237: LD_VAR 0 4
22241: ARRAY
22242: PUSH
22243: LD_INT 3
22245: ARRAY
22246: PPUSH
22247: LD_EXP 84
22251: PUSH
22252: LD_VAR 0 4
22256: ARRAY
22257: PUSH
22258: LD_INT 4
22260: ARRAY
22261: PPUSH
22262: CALL_OW 111
// break ;
22266: GO 22320
// end else
22268: GO 22318
// begin wait ( 0 0$3 ) ;
22270: LD_INT 105
22272: PPUSH
22273: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22277: LD_VAR 0 1
22281: PPUSH
22282: LD_EXP 84
22286: PUSH
22287: LD_VAR 0 4
22291: ARRAY
22292: PUSH
22293: LD_INT 3
22295: ARRAY
22296: PPUSH
22297: LD_EXP 84
22301: PUSH
22302: LD_VAR 0 4
22306: ARRAY
22307: PUSH
22308: LD_INT 4
22310: ARRAY
22311: PPUSH
22312: CALL_OW 111
// break ;
22316: GO 22320
// end ; end ;
22318: GO 21769
22320: POP
22321: POP
// end ;
22322: LD_VAR 0 3
22326: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22327: LD_INT 0
22329: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22330: LD_VAR 0 1
22334: PUSH
22335: LD_INT 250
22337: EQUAL
22338: IFFALSE 22355
22340: PUSH
22341: LD_VAR 0 2
22345: PPUSH
22346: CALL_OW 264
22350: PUSH
22351: LD_INT 81
22353: EQUAL
22354: AND
22355: IFFALSE 22376
// MinerPlaceMine ( unit , x , y ) ;
22357: LD_VAR 0 2
22361: PPUSH
22362: LD_VAR 0 4
22366: PPUSH
22367: LD_VAR 0 5
22371: PPUSH
22372: CALL 25722 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22376: LD_VAR 0 1
22380: PUSH
22381: LD_INT 251
22383: EQUAL
22384: IFFALSE 22401
22386: PUSH
22387: LD_VAR 0 2
22391: PPUSH
22392: CALL_OW 264
22396: PUSH
22397: LD_INT 81
22399: EQUAL
22400: AND
22401: IFFALSE 22422
// MinerDetonateMine ( unit , x , y ) ;
22403: LD_VAR 0 2
22407: PPUSH
22408: LD_VAR 0 4
22412: PPUSH
22413: LD_VAR 0 5
22417: PPUSH
22418: CALL 26129 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22422: LD_VAR 0 1
22426: PUSH
22427: LD_INT 252
22429: EQUAL
22430: IFFALSE 22447
22432: PUSH
22433: LD_VAR 0 2
22437: PPUSH
22438: CALL_OW 264
22442: PUSH
22443: LD_INT 81
22445: EQUAL
22446: AND
22447: IFFALSE 22468
// MinerCreateMinefield ( unit , x , y ) ;
22449: LD_VAR 0 2
22453: PPUSH
22454: LD_VAR 0 4
22458: PPUSH
22459: LD_VAR 0 5
22463: PPUSH
22464: CALL 26361 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22468: LD_VAR 0 1
22472: PUSH
22473: LD_INT 253
22475: EQUAL
22476: IFFALSE 22493
22478: PUSH
22479: LD_VAR 0 2
22483: PPUSH
22484: CALL_OW 257
22488: PUSH
22489: LD_INT 5
22491: EQUAL
22492: AND
22493: IFFALSE 22514
// ComBinocular ( unit , x , y ) ;
22495: LD_VAR 0 2
22499: PPUSH
22500: LD_VAR 0 4
22504: PPUSH
22505: LD_VAR 0 5
22509: PPUSH
22510: CALL 26736 0 3
// if selectedUnit then
22514: LD_VAR 0 3
22518: IFFALSE 22578
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22520: LD_VAR 0 1
22524: PUSH
22525: LD_INT 254
22527: EQUAL
22528: IFFALSE 22545
22530: PUSH
22531: LD_VAR 0 2
22535: PPUSH
22536: CALL_OW 264
22540: PUSH
22541: LD_INT 99
22543: EQUAL
22544: AND
22545: IFFALSE 22562
22547: PUSH
22548: LD_VAR 0 3
22552: PPUSH
22553: CALL_OW 263
22557: PUSH
22558: LD_INT 3
22560: EQUAL
22561: AND
22562: IFFALSE 22578
// HackDestroyVehicle ( unit , selectedUnit ) ;
22564: LD_VAR 0 2
22568: PPUSH
22569: LD_VAR 0 3
22573: PPUSH
22574: CALL 24912 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22578: LD_VAR 0 1
22582: PUSH
22583: LD_INT 255
22585: EQUAL
22586: IFFALSE 22610
22588: PUSH
22589: LD_VAR 0 2
22593: PPUSH
22594: CALL_OW 264
22598: PUSH
22599: LD_INT 14
22601: PUSH
22602: LD_INT 53
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: IN
22609: AND
22610: IFFALSE 22628
22612: PUSH
22613: LD_VAR 0 4
22617: PPUSH
22618: LD_VAR 0 5
22622: PPUSH
22623: CALL_OW 488
22627: AND
22628: IFFALSE 22652
// CutTreeXYR ( unit , x , y , 12 ) ;
22630: LD_VAR 0 2
22634: PPUSH
22635: LD_VAR 0 4
22639: PPUSH
22640: LD_VAR 0 5
22644: PPUSH
22645: LD_INT 12
22647: PPUSH
22648: CALL 22843 0 4
// if cmd = 256 then
22652: LD_VAR 0 1
22656: PUSH
22657: LD_INT 256
22659: EQUAL
22660: IFFALSE 22681
// SetFactoryWaypoint ( unit , x , y ) ;
22662: LD_VAR 0 2
22666: PPUSH
22667: LD_VAR 0 4
22671: PPUSH
22672: LD_VAR 0 5
22676: PPUSH
22677: CALL 20122 0 3
// if cmd = 257 then
22681: LD_VAR 0 1
22685: PUSH
22686: LD_INT 257
22688: EQUAL
22689: IFFALSE 22710
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22691: LD_VAR 0 2
22695: PPUSH
22696: LD_VAR 0 4
22700: PPUSH
22701: LD_VAR 0 5
22705: PPUSH
22706: CALL 20618 0 3
// if cmd = 258 then
22710: LD_VAR 0 1
22714: PUSH
22715: LD_INT 258
22717: EQUAL
22718: IFFALSE 22742
// BurnTreeXYR ( unit , x , y , 8 ) ;
22720: LD_VAR 0 2
22724: PPUSH
22725: LD_VAR 0 4
22729: PPUSH
22730: LD_VAR 0 5
22734: PPUSH
22735: LD_INT 8
22737: PPUSH
22738: CALL 23265 0 4
// end ;
22742: LD_VAR 0 6
22746: RET
// export function ComRadiation ( un ) ; var eff ; begin
22747: LD_INT 0
22749: PPUSH
22750: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
22751: LD_VAR 0 1
22755: PPUSH
22756: CALL_OW 264
22760: PUSH
22761: LD_INT 91
22763: NONEQUAL
22764: IFFALSE 22768
// exit ;
22766: GO 22838
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22768: LD_INT 68
22770: PPUSH
22771: LD_VAR 0 1
22775: PPUSH
22776: CALL_OW 255
22780: PPUSH
22781: CALL_OW 321
22785: PUSH
22786: LD_INT 2
22788: EQUAL
22789: IFFALSE 22801
// eff := 50 else
22791: LD_ADDR_VAR 0 3
22795: PUSH
22796: LD_INT 50
22798: ST_TO_ADDR
22799: GO 22809
// eff := 25 ;
22801: LD_ADDR_VAR 0 3
22805: PUSH
22806: LD_INT 25
22808: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22809: LD_VAR 0 1
22813: PPUSH
22814: CALL_OW 250
22818: PPUSH
22819: LD_VAR 0 1
22823: PPUSH
22824: CALL_OW 251
22828: PPUSH
22829: LD_VAR 0 3
22833: PPUSH
22834: CALL_OW 495
// end ;
22838: LD_VAR 0 2
22842: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22843: LD_INT 0
22845: PPUSH
22846: PPUSH
22847: PPUSH
22848: PPUSH
22849: PPUSH
22850: PPUSH
22851: PPUSH
22852: PPUSH
22853: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22854: LD_VAR 0 1
22858: PPUSH
22859: CALL_OW 302
22863: NOT
22864: IFTRUE 22883
22866: PUSH
22867: LD_VAR 0 2
22871: PPUSH
22872: LD_VAR 0 3
22876: PPUSH
22877: CALL_OW 488
22881: NOT
22882: OR
22883: IFTRUE 22892
22885: PUSH
22886: LD_VAR 0 4
22890: NOT
22891: OR
22892: IFFALSE 22896
// exit ;
22894: GO 23260
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
22896: LD_VAR 0 1
22900: PPUSH
22901: CALL_OW 437
22905: PPUSH
22906: CALL 30531 0 1
22910: PUSH
22911: LD_INT 10
22913: GREATER
22914: IFFALSE 22918
// exit ;
22916: GO 23260
// list := [ ] ;
22918: LD_ADDR_VAR 0 13
22922: PUSH
22923: EMPTY
22924: ST_TO_ADDR
// if x - r < 0 then
22925: LD_VAR 0 2
22929: PUSH
22930: LD_VAR 0 4
22934: MINUS
22935: PUSH
22936: LD_INT 0
22938: LESS
22939: IFFALSE 22951
// min_x := 0 else
22941: LD_ADDR_VAR 0 7
22945: PUSH
22946: LD_INT 0
22948: ST_TO_ADDR
22949: GO 22967
// min_x := x - r ;
22951: LD_ADDR_VAR 0 7
22955: PUSH
22956: LD_VAR 0 2
22960: PUSH
22961: LD_VAR 0 4
22965: MINUS
22966: ST_TO_ADDR
// if y - r < 0 then
22967: LD_VAR 0 3
22971: PUSH
22972: LD_VAR 0 4
22976: MINUS
22977: PUSH
22978: LD_INT 0
22980: LESS
22981: IFFALSE 22993
// min_y := 0 else
22983: LD_ADDR_VAR 0 8
22987: PUSH
22988: LD_INT 0
22990: ST_TO_ADDR
22991: GO 23009
// min_y := y - r ;
22993: LD_ADDR_VAR 0 8
22997: PUSH
22998: LD_VAR 0 3
23002: PUSH
23003: LD_VAR 0 4
23007: MINUS
23008: ST_TO_ADDR
// max_x := x + r ;
23009: LD_ADDR_VAR 0 9
23013: PUSH
23014: LD_VAR 0 2
23018: PUSH
23019: LD_VAR 0 4
23023: PLUS
23024: ST_TO_ADDR
// max_y := y + r ;
23025: LD_ADDR_VAR 0 10
23029: PUSH
23030: LD_VAR 0 3
23034: PUSH
23035: LD_VAR 0 4
23039: PLUS
23040: ST_TO_ADDR
// for _x = min_x to max_x do
23041: LD_ADDR_VAR 0 11
23045: PUSH
23046: DOUBLE
23047: LD_VAR 0 7
23051: DEC
23052: ST_TO_ADDR
23053: LD_VAR 0 9
23057: PUSH
23058: FOR_TO
23059: IFFALSE 23178
// for _y = min_y to max_y do
23061: LD_ADDR_VAR 0 12
23065: PUSH
23066: DOUBLE
23067: LD_VAR 0 8
23071: DEC
23072: ST_TO_ADDR
23073: LD_VAR 0 10
23077: PUSH
23078: FOR_TO
23079: IFFALSE 23174
// begin if not ValidHex ( _x , _y ) then
23081: LD_VAR 0 11
23085: PPUSH
23086: LD_VAR 0 12
23090: PPUSH
23091: CALL_OW 488
23095: NOT
23096: IFFALSE 23100
// continue ;
23098: GO 23078
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23100: LD_VAR 0 11
23104: PPUSH
23105: LD_VAR 0 12
23109: PPUSH
23110: CALL_OW 351
23114: IFFALSE 23132
23116: PUSH
23117: LD_VAR 0 11
23121: PPUSH
23122: LD_VAR 0 12
23126: PPUSH
23127: CALL_OW 554
23131: AND
23132: IFFALSE 23172
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23134: LD_ADDR_VAR 0 13
23138: PUSH
23139: LD_VAR 0 13
23143: PPUSH
23144: LD_VAR 0 13
23148: PUSH
23149: LD_INT 1
23151: PLUS
23152: PPUSH
23153: LD_VAR 0 11
23157: PUSH
23158: LD_VAR 0 12
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: CALL_OW 2
23171: ST_TO_ADDR
// end ;
23172: GO 23078
23174: POP
23175: POP
23176: GO 23058
23178: POP
23179: POP
// if not list then
23180: LD_VAR 0 13
23184: NOT
23185: IFFALSE 23189
// exit ;
23187: GO 23260
// for i in list do
23189: LD_ADDR_VAR 0 6
23193: PUSH
23194: LD_VAR 0 13
23198: PUSH
23199: FOR_IN
23200: IFFALSE 23258
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23202: LD_VAR 0 1
23206: PPUSH
23207: LD_STRING M
23209: PUSH
23210: LD_VAR 0 6
23214: PUSH
23215: LD_INT 1
23217: ARRAY
23218: PUSH
23219: LD_VAR 0 6
23223: PUSH
23224: LD_INT 2
23226: ARRAY
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: LD_INT 0
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: LD_INT 0
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: PPUSH
23252: CALL_OW 447
23256: GO 23199
23258: POP
23259: POP
// end ;
23260: LD_VAR 0 5
23264: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23265: LD_INT 0
23267: PPUSH
23268: PPUSH
23269: PPUSH
23270: PPUSH
23271: PPUSH
23272: PPUSH
23273: PPUSH
23274: PPUSH
23275: PPUSH
23276: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23277: LD_VAR 0 1
23281: PPUSH
23282: CALL_OW 302
23286: NOT
23287: IFTRUE 23306
23289: PUSH
23290: LD_VAR 0 2
23294: PPUSH
23295: LD_VAR 0 3
23299: PPUSH
23300: CALL_OW 488
23304: NOT
23305: OR
23306: IFTRUE 23315
23308: PUSH
23309: LD_VAR 0 4
23313: NOT
23314: OR
23315: IFFALSE 23319
// exit ;
23317: GO 23858
// if Count ( GetTaskList ( flame ) ) > 10 then
23319: LD_VAR 0 1
23323: PPUSH
23324: CALL_OW 437
23328: PPUSH
23329: CALL 30531 0 1
23333: PUSH
23334: LD_INT 10
23336: GREATER
23337: IFFALSE 23341
// exit ;
23339: GO 23858
// list := [ ] ;
23341: LD_ADDR_VAR 0 13
23345: PUSH
23346: EMPTY
23347: ST_TO_ADDR
// if x - r < 0 then
23348: LD_VAR 0 2
23352: PUSH
23353: LD_VAR 0 4
23357: MINUS
23358: PUSH
23359: LD_INT 0
23361: LESS
23362: IFFALSE 23374
// min_x := 0 else
23364: LD_ADDR_VAR 0 7
23368: PUSH
23369: LD_INT 0
23371: ST_TO_ADDR
23372: GO 23390
// min_x := x - r ;
23374: LD_ADDR_VAR 0 7
23378: PUSH
23379: LD_VAR 0 2
23383: PUSH
23384: LD_VAR 0 4
23388: MINUS
23389: ST_TO_ADDR
// if y - r < 0 then
23390: LD_VAR 0 3
23394: PUSH
23395: LD_VAR 0 4
23399: MINUS
23400: PUSH
23401: LD_INT 0
23403: LESS
23404: IFFALSE 23416
// min_y := 0 else
23406: LD_ADDR_VAR 0 8
23410: PUSH
23411: LD_INT 0
23413: ST_TO_ADDR
23414: GO 23432
// min_y := y - r ;
23416: LD_ADDR_VAR 0 8
23420: PUSH
23421: LD_VAR 0 3
23425: PUSH
23426: LD_VAR 0 4
23430: MINUS
23431: ST_TO_ADDR
// max_x := x + r ;
23432: LD_ADDR_VAR 0 9
23436: PUSH
23437: LD_VAR 0 2
23441: PUSH
23442: LD_VAR 0 4
23446: PLUS
23447: ST_TO_ADDR
// max_y := y + r ;
23448: LD_ADDR_VAR 0 10
23452: PUSH
23453: LD_VAR 0 3
23457: PUSH
23458: LD_VAR 0 4
23462: PLUS
23463: ST_TO_ADDR
// for _x = min_x to max_x do
23464: LD_ADDR_VAR 0 11
23468: PUSH
23469: DOUBLE
23470: LD_VAR 0 7
23474: DEC
23475: ST_TO_ADDR
23476: LD_VAR 0 9
23480: PUSH
23481: FOR_TO
23482: IFFALSE 23601
// for _y = min_y to max_y do
23484: LD_ADDR_VAR 0 12
23488: PUSH
23489: DOUBLE
23490: LD_VAR 0 8
23494: DEC
23495: ST_TO_ADDR
23496: LD_VAR 0 10
23500: PUSH
23501: FOR_TO
23502: IFFALSE 23597
// begin if not ValidHex ( _x , _y ) then
23504: LD_VAR 0 11
23508: PPUSH
23509: LD_VAR 0 12
23513: PPUSH
23514: CALL_OW 488
23518: NOT
23519: IFFALSE 23523
// continue ;
23521: GO 23501
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23523: LD_VAR 0 11
23527: PPUSH
23528: LD_VAR 0 12
23532: PPUSH
23533: CALL_OW 351
23537: IFFALSE 23555
23539: PUSH
23540: LD_VAR 0 11
23544: PPUSH
23545: LD_VAR 0 12
23549: PPUSH
23550: CALL_OW 554
23554: AND
23555: IFFALSE 23595
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23557: LD_ADDR_VAR 0 13
23561: PUSH
23562: LD_VAR 0 13
23566: PPUSH
23567: LD_VAR 0 13
23571: PUSH
23572: LD_INT 1
23574: PLUS
23575: PPUSH
23576: LD_VAR 0 11
23580: PUSH
23581: LD_VAR 0 12
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PPUSH
23590: CALL_OW 2
23594: ST_TO_ADDR
// end ;
23595: GO 23501
23597: POP
23598: POP
23599: GO 23481
23601: POP
23602: POP
// if not list then
23603: LD_VAR 0 13
23607: NOT
23608: IFFALSE 23612
// exit ;
23610: GO 23858
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23612: LD_ADDR_VAR 0 13
23616: PUSH
23617: LD_VAR 0 1
23621: PPUSH
23622: LD_VAR 0 13
23626: PPUSH
23627: LD_INT 1
23629: PPUSH
23630: LD_INT 1
23632: PPUSH
23633: CALL 33937 0 4
23637: ST_TO_ADDR
// ComStop ( flame ) ;
23638: LD_VAR 0 1
23642: PPUSH
23643: CALL_OW 141
// for i in list do
23647: LD_ADDR_VAR 0 6
23651: PUSH
23652: LD_VAR 0 13
23656: PUSH
23657: FOR_IN
23658: IFFALSE 23689
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23660: LD_VAR 0 1
23664: PPUSH
23665: LD_VAR 0 6
23669: PUSH
23670: LD_INT 1
23672: ARRAY
23673: PPUSH
23674: LD_VAR 0 6
23678: PUSH
23679: LD_INT 2
23681: ARRAY
23682: PPUSH
23683: CALL_OW 176
23687: GO 23657
23689: POP
23690: POP
// repeat wait ( 0 0$1 ) ;
23691: LD_INT 35
23693: PPUSH
23694: CALL_OW 67
// task := GetTaskList ( flame ) ;
23698: LD_ADDR_VAR 0 14
23702: PUSH
23703: LD_VAR 0 1
23707: PPUSH
23708: CALL_OW 437
23712: ST_TO_ADDR
// if not task then
23713: LD_VAR 0 14
23717: NOT
23718: IFFALSE 23722
// exit ;
23720: GO 23858
// if task [ 1 ] [ 1 ] <> | then
23722: LD_VAR 0 14
23726: PUSH
23727: LD_INT 1
23729: ARRAY
23730: PUSH
23731: LD_INT 1
23733: ARRAY
23734: PUSH
23735: LD_STRING |
23737: NONEQUAL
23738: IFFALSE 23742
// exit ;
23740: GO 23858
// _x := task [ 1 ] [ 2 ] ;
23742: LD_ADDR_VAR 0 11
23746: PUSH
23747: LD_VAR 0 14
23751: PUSH
23752: LD_INT 1
23754: ARRAY
23755: PUSH
23756: LD_INT 2
23758: ARRAY
23759: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23760: LD_ADDR_VAR 0 12
23764: PUSH
23765: LD_VAR 0 14
23769: PUSH
23770: LD_INT 1
23772: ARRAY
23773: PUSH
23774: LD_INT 3
23776: ARRAY
23777: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23778: LD_VAR 0 11
23782: PPUSH
23783: LD_VAR 0 12
23787: PPUSH
23788: CALL_OW 351
23792: NOT
23793: IFTRUE 23812
23795: PUSH
23796: LD_VAR 0 11
23800: PPUSH
23801: LD_VAR 0 12
23805: PPUSH
23806: CALL_OW 554
23810: NOT
23811: OR
23812: IFFALSE 23846
// begin task := Delete ( task , 1 ) ;
23814: LD_ADDR_VAR 0 14
23818: PUSH
23819: LD_VAR 0 14
23823: PPUSH
23824: LD_INT 1
23826: PPUSH
23827: CALL_OW 3
23831: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23832: LD_VAR 0 1
23836: PPUSH
23837: LD_VAR 0 14
23841: PPUSH
23842: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23846: LD_VAR 0 1
23850: PPUSH
23851: CALL_OW 314
23855: NOT
23856: IFFALSE 23691
// end ;
23858: LD_VAR 0 5
23862: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23863: LD_EXP 88
23867: NOT
23868: IFFALSE 23918
23870: GO 23872
23872: DISABLE
// begin initHack := true ;
23873: LD_ADDR_EXP 88
23877: PUSH
23878: LD_INT 1
23880: ST_TO_ADDR
// hackTanks := [ ] ;
23881: LD_ADDR_EXP 89
23885: PUSH
23886: EMPTY
23887: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23888: LD_ADDR_EXP 90
23892: PUSH
23893: EMPTY
23894: ST_TO_ADDR
// hackLimit := 3 ;
23895: LD_ADDR_EXP 91
23899: PUSH
23900: LD_INT 3
23902: ST_TO_ADDR
// hackDist := 12 ;
23903: LD_ADDR_EXP 92
23907: PUSH
23908: LD_INT 12
23910: ST_TO_ADDR
// hackCounter := [ ] ;
23911: LD_ADDR_EXP 93
23915: PUSH
23916: EMPTY
23917: ST_TO_ADDR
// end ;
23918: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23919: LD_EXP 88
23923: IFFALSE 23941
23925: PUSH
23926: LD_INT 34
23928: PUSH
23929: LD_INT 99
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PPUSH
23936: CALL_OW 69
23940: AND
23941: IFFALSE 24194
23943: GO 23945
23945: DISABLE
23946: LD_INT 0
23948: PPUSH
23949: PPUSH
// begin enable ;
23950: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23951: LD_ADDR_VAR 0 1
23955: PUSH
23956: LD_INT 34
23958: PUSH
23959: LD_INT 99
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PPUSH
23966: CALL_OW 69
23970: PUSH
23971: FOR_IN
23972: IFFALSE 24192
// begin if not i in hackTanks then
23974: LD_VAR 0 1
23978: PUSH
23979: LD_EXP 89
23983: IN
23984: NOT
23985: IFFALSE 24068
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23987: LD_ADDR_EXP 89
23991: PUSH
23992: LD_EXP 89
23996: PPUSH
23997: LD_EXP 89
24001: PUSH
24002: LD_INT 1
24004: PLUS
24005: PPUSH
24006: LD_VAR 0 1
24010: PPUSH
24011: CALL_OW 1
24015: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24016: LD_ADDR_EXP 90
24020: PUSH
24021: LD_EXP 90
24025: PPUSH
24026: LD_EXP 90
24030: PUSH
24031: LD_INT 1
24033: PLUS
24034: PPUSH
24035: EMPTY
24036: PPUSH
24037: CALL_OW 1
24041: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24042: LD_ADDR_EXP 93
24046: PUSH
24047: LD_EXP 93
24051: PPUSH
24052: LD_EXP 93
24056: PUSH
24057: LD_INT 1
24059: PLUS
24060: PPUSH
24061: EMPTY
24062: PPUSH
24063: CALL_OW 1
24067: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24068: LD_VAR 0 1
24072: PPUSH
24073: CALL_OW 302
24077: NOT
24078: IFFALSE 24091
// begin HackUnlinkAll ( i ) ;
24080: LD_VAR 0 1
24084: PPUSH
24085: CALL 24197 0 1
// continue ;
24089: GO 23971
// end ; HackCheckCapturedStatus ( i ) ;
24091: LD_VAR 0 1
24095: PPUSH
24096: CALL 24642 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24100: LD_ADDR_VAR 0 2
24104: PUSH
24105: LD_INT 81
24107: PUSH
24108: LD_VAR 0 1
24112: PPUSH
24113: CALL_OW 255
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 33
24124: PUSH
24125: LD_INT 3
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 91
24134: PUSH
24135: LD_VAR 0 1
24139: PUSH
24140: LD_EXP 92
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 50
24152: PUSH
24153: EMPTY
24154: LIST
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: PPUSH
24162: CALL_OW 69
24166: ST_TO_ADDR
// if not tmp then
24167: LD_VAR 0 2
24171: NOT
24172: IFFALSE 24176
// continue ;
24174: GO 23971
// HackLink ( i , tmp ) ;
24176: LD_VAR 0 1
24180: PPUSH
24181: LD_VAR 0 2
24185: PPUSH
24186: CALL 24333 0 2
// end ;
24190: GO 23971
24192: POP
24193: POP
// end ;
24194: PPOPN 2
24196: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24197: LD_INT 0
24199: PPUSH
24200: PPUSH
24201: PPUSH
// if not hack in hackTanks then
24202: LD_VAR 0 1
24206: PUSH
24207: LD_EXP 89
24211: IN
24212: NOT
24213: IFFALSE 24217
// exit ;
24215: GO 24328
// index := GetElementIndex ( hackTanks , hack ) ;
24217: LD_ADDR_VAR 0 4
24221: PUSH
24222: LD_EXP 89
24226: PPUSH
24227: LD_VAR 0 1
24231: PPUSH
24232: CALL 33232 0 2
24236: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24237: LD_EXP 90
24241: PUSH
24242: LD_VAR 0 4
24246: ARRAY
24247: IFFALSE 24328
// begin for i in hackTanksCaptured [ index ] do
24249: LD_ADDR_VAR 0 3
24253: PUSH
24254: LD_EXP 90
24258: PUSH
24259: LD_VAR 0 4
24263: ARRAY
24264: PUSH
24265: FOR_IN
24266: IFFALSE 24292
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24268: LD_VAR 0 3
24272: PUSH
24273: LD_INT 1
24275: ARRAY
24276: PPUSH
24277: LD_VAR 0 3
24281: PUSH
24282: LD_INT 2
24284: ARRAY
24285: PPUSH
24286: CALL_OW 235
24290: GO 24265
24292: POP
24293: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24294: LD_ADDR_EXP 90
24298: PUSH
24299: LD_EXP 90
24303: PPUSH
24304: LD_VAR 0 4
24308: PPUSH
24309: EMPTY
24310: PPUSH
24311: CALL_OW 1
24315: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24316: LD_VAR 0 1
24320: PPUSH
24321: LD_INT 0
24323: PPUSH
24324: CALL_OW 505
// end ; end ;
24328: LD_VAR 0 2
24332: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24333: LD_INT 0
24335: PPUSH
24336: PPUSH
24337: PPUSH
// if not hack in hackTanks or not vehicles then
24338: LD_VAR 0 1
24342: PUSH
24343: LD_EXP 89
24347: IN
24348: NOT
24349: IFTRUE 24358
24351: PUSH
24352: LD_VAR 0 2
24356: NOT
24357: OR
24358: IFFALSE 24362
// exit ;
24360: GO 24637
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24362: LD_ADDR_VAR 0 2
24366: PUSH
24367: LD_VAR 0 1
24371: PPUSH
24372: LD_VAR 0 2
24376: PPUSH
24377: LD_INT 1
24379: PPUSH
24380: LD_INT 1
24382: PPUSH
24383: CALL 33884 0 4
24387: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24388: LD_ADDR_VAR 0 5
24392: PUSH
24393: LD_EXP 89
24397: PPUSH
24398: LD_VAR 0 1
24402: PPUSH
24403: CALL 33232 0 2
24407: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24408: LD_EXP 90
24412: PUSH
24413: LD_VAR 0 5
24417: ARRAY
24418: PUSH
24419: LD_EXP 91
24423: LESS
24424: IFFALSE 24613
// begin for i := 1 to vehicles do
24426: LD_ADDR_VAR 0 4
24430: PUSH
24431: DOUBLE
24432: LD_INT 1
24434: DEC
24435: ST_TO_ADDR
24436: LD_VAR 0 2
24440: PUSH
24441: FOR_TO
24442: IFFALSE 24611
// begin if hackTanksCaptured [ index ] = hackLimit then
24444: LD_EXP 90
24448: PUSH
24449: LD_VAR 0 5
24453: ARRAY
24454: PUSH
24455: LD_EXP 91
24459: EQUAL
24460: IFFALSE 24464
// break ;
24462: GO 24611
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24464: LD_ADDR_EXP 93
24468: PUSH
24469: LD_EXP 93
24473: PPUSH
24474: LD_VAR 0 5
24478: PPUSH
24479: LD_EXP 93
24483: PUSH
24484: LD_VAR 0 5
24488: ARRAY
24489: PUSH
24490: LD_INT 1
24492: PLUS
24493: PPUSH
24494: CALL_OW 1
24498: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24499: LD_ADDR_EXP 90
24503: PUSH
24504: LD_EXP 90
24508: PPUSH
24509: LD_VAR 0 5
24513: PUSH
24514: LD_EXP 90
24518: PUSH
24519: LD_VAR 0 5
24523: ARRAY
24524: PUSH
24525: LD_INT 1
24527: PLUS
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PPUSH
24533: LD_VAR 0 2
24537: PUSH
24538: LD_VAR 0 4
24542: ARRAY
24543: PUSH
24544: LD_VAR 0 2
24548: PUSH
24549: LD_VAR 0 4
24553: ARRAY
24554: PPUSH
24555: CALL_OW 255
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PPUSH
24564: CALL 33449 0 3
24568: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24569: LD_VAR 0 2
24573: PUSH
24574: LD_VAR 0 4
24578: ARRAY
24579: PPUSH
24580: LD_VAR 0 1
24584: PPUSH
24585: CALL_OW 255
24589: PPUSH
24590: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24594: LD_VAR 0 2
24598: PUSH
24599: LD_VAR 0 4
24603: ARRAY
24604: PPUSH
24605: CALL_OW 141
// end ;
24609: GO 24441
24611: POP
24612: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24613: LD_VAR 0 1
24617: PPUSH
24618: LD_EXP 90
24622: PUSH
24623: LD_VAR 0 5
24627: ARRAY
24628: PUSH
24629: LD_INT 0
24631: PLUS
24632: PPUSH
24633: CALL_OW 505
// end ;
24637: LD_VAR 0 3
24641: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24642: LD_INT 0
24644: PPUSH
24645: PPUSH
24646: PPUSH
24647: PPUSH
// if not hack in hackTanks then
24648: LD_VAR 0 1
24652: PUSH
24653: LD_EXP 89
24657: IN
24658: NOT
24659: IFFALSE 24663
// exit ;
24661: GO 24907
// index := GetElementIndex ( hackTanks , hack ) ;
24663: LD_ADDR_VAR 0 4
24667: PUSH
24668: LD_EXP 89
24672: PPUSH
24673: LD_VAR 0 1
24677: PPUSH
24678: CALL 33232 0 2
24682: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: DOUBLE
24689: LD_EXP 90
24693: PUSH
24694: LD_VAR 0 4
24698: ARRAY
24699: INC
24700: ST_TO_ADDR
24701: LD_INT 1
24703: PUSH
24704: FOR_DOWNTO
24705: IFFALSE 24881
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24707: LD_ADDR_VAR 0 5
24711: PUSH
24712: LD_EXP 90
24716: PUSH
24717: LD_VAR 0 4
24721: ARRAY
24722: PUSH
24723: LD_VAR 0 3
24727: ARRAY
24728: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24729: LD_VAR 0 5
24733: PUSH
24734: LD_INT 1
24736: ARRAY
24737: PPUSH
24738: CALL_OW 302
24742: NOT
24743: IFTRUE 24771
24745: PUSH
24746: LD_VAR 0 5
24750: PUSH
24751: LD_INT 1
24753: ARRAY
24754: PPUSH
24755: CALL_OW 255
24759: PUSH
24760: LD_VAR 0 1
24764: PPUSH
24765: CALL_OW 255
24769: NONEQUAL
24770: OR
24771: IFFALSE 24879
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24773: LD_VAR 0 5
24777: PUSH
24778: LD_INT 1
24780: ARRAY
24781: PPUSH
24782: CALL_OW 305
24786: IFFALSE 24814
24788: PUSH
24789: LD_VAR 0 5
24793: PUSH
24794: LD_INT 1
24796: ARRAY
24797: PPUSH
24798: CALL_OW 255
24802: PUSH
24803: LD_VAR 0 1
24807: PPUSH
24808: CALL_OW 255
24812: EQUAL
24813: AND
24814: IFFALSE 24838
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24816: LD_VAR 0 5
24820: PUSH
24821: LD_INT 1
24823: ARRAY
24824: PPUSH
24825: LD_VAR 0 5
24829: PUSH
24830: LD_INT 2
24832: ARRAY
24833: PPUSH
24834: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24838: LD_ADDR_EXP 90
24842: PUSH
24843: LD_EXP 90
24847: PPUSH
24848: LD_VAR 0 4
24852: PPUSH
24853: LD_EXP 90
24857: PUSH
24858: LD_VAR 0 4
24862: ARRAY
24863: PPUSH
24864: LD_VAR 0 3
24868: PPUSH
24869: CALL_OW 3
24873: PPUSH
24874: CALL_OW 1
24878: ST_TO_ADDR
// end ; end ;
24879: GO 24704
24881: POP
24882: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24883: LD_VAR 0 1
24887: PPUSH
24888: LD_EXP 90
24892: PUSH
24893: LD_VAR 0 4
24897: ARRAY
24898: PUSH
24899: LD_INT 0
24901: PLUS
24902: PPUSH
24903: CALL_OW 505
// end ;
24907: LD_VAR 0 2
24911: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24912: LD_INT 0
24914: PPUSH
24915: PPUSH
24916: PPUSH
24917: PPUSH
// if not hack in hackTanks then
24918: LD_VAR 0 1
24922: PUSH
24923: LD_EXP 89
24927: IN
24928: NOT
24929: IFFALSE 24933
// exit ;
24931: GO 25018
// index := GetElementIndex ( hackTanks , hack ) ;
24933: LD_ADDR_VAR 0 5
24937: PUSH
24938: LD_EXP 89
24942: PPUSH
24943: LD_VAR 0 1
24947: PPUSH
24948: CALL 33232 0 2
24952: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24953: LD_ADDR_VAR 0 4
24957: PUSH
24958: DOUBLE
24959: LD_INT 1
24961: DEC
24962: ST_TO_ADDR
24963: LD_EXP 90
24967: PUSH
24968: LD_VAR 0 5
24972: ARRAY
24973: PUSH
24974: FOR_TO
24975: IFFALSE 25016
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24977: LD_EXP 90
24981: PUSH
24982: LD_VAR 0 5
24986: ARRAY
24987: PUSH
24988: LD_VAR 0 4
24992: ARRAY
24993: PUSH
24994: LD_INT 1
24996: ARRAY
24997: PUSH
24998: LD_VAR 0 2
25002: EQUAL
25003: IFFALSE 25014
// KillUnit ( vehicle ) ;
25005: LD_VAR 0 2
25009: PPUSH
25010: CALL_OW 66
25014: GO 24974
25016: POP
25017: POP
// end ;
25018: LD_VAR 0 3
25022: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
25023: LD_EXP 94
25027: NOT
25028: IFFALSE 25161
25030: GO 25032
25032: DISABLE
25033: LD_INT 0
25035: PPUSH
// begin initMiner := true ;
25036: LD_ADDR_EXP 94
25040: PUSH
25041: LD_INT 1
25043: ST_TO_ADDR
// minersList := [ ] ;
25044: LD_ADDR_EXP 95
25048: PUSH
25049: EMPTY
25050: ST_TO_ADDR
// minerMinesList := [ ] ;
25051: LD_ADDR_EXP 96
25055: PUSH
25056: EMPTY
25057: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
25058: LD_ADDR_EXP 97
25062: PUSH
25063: LD_INT 10
25065: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25066: LD_ADDR_VAR 0 1
25070: PUSH
25071: LD_INT 34
25073: PUSH
25074: LD_INT 81
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PPUSH
25081: CALL_OW 69
25085: PUSH
25086: FOR_IN
25087: IFFALSE 25159
// begin if not i in minersList then
25089: LD_VAR 0 1
25093: PUSH
25094: LD_EXP 95
25098: IN
25099: NOT
25100: IFFALSE 25157
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25102: LD_ADDR_EXP 95
25106: PUSH
25107: LD_EXP 95
25111: PPUSH
25112: LD_EXP 95
25116: PUSH
25117: LD_INT 1
25119: PLUS
25120: PPUSH
25121: LD_VAR 0 1
25125: PPUSH
25126: CALL_OW 1
25130: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25131: LD_ADDR_EXP 96
25135: PUSH
25136: LD_EXP 96
25140: PPUSH
25141: LD_EXP 96
25145: PUSH
25146: LD_INT 1
25148: PLUS
25149: PPUSH
25150: EMPTY
25151: PPUSH
25152: CALL_OW 1
25156: ST_TO_ADDR
// end end ;
25157: GO 25086
25159: POP
25160: POP
// end ;
25161: PPOPN 1
25163: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
25164: LD_EXP 94
25168: IFFALSE 25199
25170: PUSH
25171: LD_EXP 96
25175: PPUSH
25176: CALL 30531 0 1
25180: IFTRUE 25198
25182: PUSH
25183: LD_INT 34
25185: PUSH
25186: LD_INT 81
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PPUSH
25193: CALL_OW 69
25197: OR
25198: AND
25199: IFFALSE 25719
25201: GO 25203
25203: DISABLE
25204: LD_INT 0
25206: PPUSH
25207: PPUSH
25208: PPUSH
25209: PPUSH
// begin enable ;
25210: ENABLE
// for i := minerMinesList downto 1 do
25211: LD_ADDR_VAR 0 1
25215: PUSH
25216: DOUBLE
25217: LD_EXP 96
25221: INC
25222: ST_TO_ADDR
25223: LD_INT 1
25225: PUSH
25226: FOR_DOWNTO
25227: IFFALSE 25717
// begin side := GetSide ( minersList [ i ] ) ;
25229: LD_ADDR_VAR 0 3
25233: PUSH
25234: LD_EXP 95
25238: PUSH
25239: LD_VAR 0 1
25243: ARRAY
25244: PPUSH
25245: CALL_OW 255
25249: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
25250: LD_EXP 95
25254: PUSH
25255: LD_VAR 0 1
25259: ARRAY
25260: PPUSH
25261: CALL_OW 300
25265: IFFALSE 25286
25267: PUSH
25268: LD_VAR 0 3
25272: PUSH
25273: LD_OWVAR 2
25277: PUSH
25278: LD_INT 9
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: IN
25285: AND
25286: IFFALSE 25319
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
25288: LD_EXP 95
25292: PUSH
25293: LD_VAR 0 1
25297: ARRAY
25298: PPUSH
25299: LD_EXP 96
25303: PUSH
25304: LD_VAR 0 1
25308: ARRAY
25309: PPUSH
25310: CALL 30531 0 1
25314: PPUSH
25315: CALL_OW 505
// if not minerMinesList [ i ] then
25319: LD_EXP 96
25323: PUSH
25324: LD_VAR 0 1
25328: ARRAY
25329: NOT
25330: IFFALSE 25334
// continue ;
25332: GO 25226
// for j := minerMinesList [ i ] downto 1 do
25334: LD_ADDR_VAR 0 2
25338: PUSH
25339: DOUBLE
25340: LD_EXP 96
25344: PUSH
25345: LD_VAR 0 1
25349: ARRAY
25350: INC
25351: ST_TO_ADDR
25352: LD_INT 1
25354: PUSH
25355: FOR_DOWNTO
25356: IFFALSE 25713
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
25358: LD_EXP 95
25362: PUSH
25363: LD_VAR 0 1
25367: ARRAY
25368: PPUSH
25369: CALL_OW 301
25373: IFTRUE 25393
25375: PUSH
25376: LD_EXP 95
25380: PUSH
25381: LD_VAR 0 1
25385: ARRAY
25386: PPUSH
25387: CALL_OW 305
25391: NOT
25392: OR
25393: IFFALSE 25484
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25395: LD_EXP 96
25399: PUSH
25400: LD_VAR 0 1
25404: ARRAY
25405: PUSH
25406: LD_VAR 0 2
25410: ARRAY
25411: PUSH
25412: LD_INT 1
25414: ARRAY
25415: PPUSH
25416: LD_EXP 96
25420: PUSH
25421: LD_VAR 0 1
25425: ARRAY
25426: PUSH
25427: LD_VAR 0 2
25431: ARRAY
25432: PUSH
25433: LD_INT 2
25435: ARRAY
25436: PPUSH
25437: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25441: LD_ADDR_EXP 96
25445: PUSH
25446: LD_EXP 96
25450: PPUSH
25451: LD_VAR 0 1
25455: PPUSH
25456: LD_EXP 96
25460: PUSH
25461: LD_VAR 0 1
25465: ARRAY
25466: PPUSH
25467: LD_VAR 0 2
25471: PPUSH
25472: CALL_OW 3
25476: PPUSH
25477: CALL_OW 1
25481: ST_TO_ADDR
// continue ;
25482: GO 25355
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25484: LD_ADDR_VAR 0 4
25488: PUSH
25489: LD_EXP 96
25493: PUSH
25494: LD_VAR 0 1
25498: ARRAY
25499: PUSH
25500: LD_VAR 0 2
25504: ARRAY
25505: PUSH
25506: LD_INT 1
25508: ARRAY
25509: PPUSH
25510: LD_EXP 96
25514: PUSH
25515: LD_VAR 0 1
25519: ARRAY
25520: PUSH
25521: LD_VAR 0 2
25525: ARRAY
25526: PUSH
25527: LD_INT 2
25529: ARRAY
25530: PPUSH
25531: CALL_OW 428
25535: ST_TO_ADDR
// if not tmp then
25536: LD_VAR 0 4
25540: NOT
25541: IFFALSE 25545
// continue ;
25543: GO 25355
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25545: LD_VAR 0 4
25549: PUSH
25550: LD_INT 81
25552: PUSH
25553: LD_VAR 0 3
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PPUSH
25562: CALL_OW 69
25566: IN
25567: IFFALSE 25617
25569: PUSH
25570: LD_EXP 96
25574: PUSH
25575: LD_VAR 0 1
25579: ARRAY
25580: PUSH
25581: LD_VAR 0 2
25585: ARRAY
25586: PUSH
25587: LD_INT 1
25589: ARRAY
25590: PPUSH
25591: LD_EXP 96
25595: PUSH
25596: LD_VAR 0 1
25600: ARRAY
25601: PUSH
25602: LD_VAR 0 2
25606: ARRAY
25607: PUSH
25608: LD_INT 2
25610: ARRAY
25611: PPUSH
25612: CALL_OW 458
25616: AND
25617: IFFALSE 25711
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25619: LD_EXP 96
25623: PUSH
25624: LD_VAR 0 1
25628: ARRAY
25629: PUSH
25630: LD_VAR 0 2
25634: ARRAY
25635: PUSH
25636: LD_INT 1
25638: ARRAY
25639: PPUSH
25640: LD_EXP 96
25644: PUSH
25645: LD_VAR 0 1
25649: ARRAY
25650: PUSH
25651: LD_VAR 0 2
25655: ARRAY
25656: PUSH
25657: LD_INT 2
25659: ARRAY
25660: PPUSH
25661: LD_VAR 0 3
25665: PPUSH
25666: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25670: LD_ADDR_EXP 96
25674: PUSH
25675: LD_EXP 96
25679: PPUSH
25680: LD_VAR 0 1
25684: PPUSH
25685: LD_EXP 96
25689: PUSH
25690: LD_VAR 0 1
25694: ARRAY
25695: PPUSH
25696: LD_VAR 0 2
25700: PPUSH
25701: CALL_OW 3
25705: PPUSH
25706: CALL_OW 1
25710: ST_TO_ADDR
// end ; end ;
25711: GO 25355
25713: POP
25714: POP
// end ;
25715: GO 25226
25717: POP
25718: POP
// end ;
25719: PPOPN 4
25721: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
25722: LD_INT 0
25724: PPUSH
25725: PPUSH
25726: PPUSH
25727: PPUSH
// result := false ;
25728: LD_ADDR_VAR 0 4
25732: PUSH
25733: LD_INT 0
25735: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25736: LD_VAR 0 1
25740: PPUSH
25741: CALL_OW 264
25745: PUSH
25746: LD_INT 81
25748: EQUAL
25749: NOT
25750: IFFALSE 25754
// exit ;
25752: GO 26124
// side := GetSide ( unit ) ;
25754: LD_ADDR_VAR 0 6
25758: PUSH
25759: LD_VAR 0 1
25763: PPUSH
25764: CALL_OW 255
25768: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
25769: LD_ADDR_VAR 0 5
25773: PUSH
25774: LD_EXP 95
25778: PPUSH
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL 33232 0 2
25788: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25789: LD_EXP 96
25793: PUSH
25794: LD_VAR 0 5
25798: ARRAY
25799: PUSH
25800: LD_EXP 97
25804: GREATEREQUAL
25805: IFFALSE 25809
// exit ;
25807: GO 26124
// ComMoveXY ( unit , x , y ) ;
25809: LD_VAR 0 1
25813: PPUSH
25814: LD_VAR 0 2
25818: PPUSH
25819: LD_VAR 0 3
25823: PPUSH
25824: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25828: LD_INT 35
25830: PPUSH
25831: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25835: LD_VAR 0 1
25839: PPUSH
25840: LD_VAR 0 2
25844: PPUSH
25845: LD_VAR 0 3
25849: PPUSH
25850: CALL 65288 0 3
25854: NOT
25855: IFFALSE 25868
25857: PUSH
25858: LD_VAR 0 1
25862: PPUSH
25863: CALL_OW 314
25867: AND
25868: IFFALSE 25872
// exit ;
25870: GO 26124
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25872: LD_VAR 0 2
25876: PPUSH
25877: LD_VAR 0 3
25881: PPUSH
25882: CALL_OW 428
25886: PUSH
25887: LD_VAR 0 1
25891: EQUAL
25892: IFFALSE 25906
25894: PUSH
25895: LD_VAR 0 1
25899: PPUSH
25900: CALL_OW 314
25904: NOT
25905: AND
25906: IFFALSE 25828
// if MineAtPos ( x , y ) then
25908: LD_VAR 0 2
25912: PPUSH
25913: LD_VAR 0 3
25917: PPUSH
25918: CALL_OW 458
25922: IFFALSE 25926
// exit ;
25924: GO 26124
// if your_side = side then
25926: LD_OWVAR 2
25930: PUSH
25931: LD_VAR 0 6
25935: EQUAL
25936: IFFALSE 25955
// PlaySoundXY ( x , y , PlantMine ) ;
25938: LD_VAR 0 2
25942: PPUSH
25943: LD_VAR 0 3
25947: PPUSH
25948: LD_STRING PlantMine
25950: PPUSH
25951: CALL_OW 366
// repeat wait ( 1 ) ;
25955: LD_INT 1
25957: PPUSH
25958: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
25962: LD_VAR 0 2
25966: PPUSH
25967: LD_VAR 0 3
25971: PPUSH
25972: LD_VAR 0 6
25976: PPUSH
25977: LD_INT 0
25979: PPUSH
25980: CALL_OW 454
25984: IFFALSE 25955
// if MineAtPos ( x , y ) then
25986: LD_VAR 0 2
25990: PPUSH
25991: LD_VAR 0 3
25995: PPUSH
25996: CALL_OW 458
26000: IFFALSE 26116
// begin for i in minerMinesList [ index ] do
26002: LD_ADDR_VAR 0 7
26006: PUSH
26007: LD_EXP 96
26011: PUSH
26012: LD_VAR 0 5
26016: ARRAY
26017: PUSH
26018: FOR_IN
26019: IFFALSE 26061
// if i [ 1 ] = x and i [ 2 ] = y then
26021: LD_VAR 0 7
26025: PUSH
26026: LD_INT 1
26028: ARRAY
26029: PUSH
26030: LD_VAR 0 2
26034: EQUAL
26035: IFFALSE 26053
26037: PUSH
26038: LD_VAR 0 7
26042: PUSH
26043: LD_INT 2
26045: ARRAY
26046: PUSH
26047: LD_VAR 0 3
26051: EQUAL
26052: AND
26053: IFFALSE 26059
// exit ;
26055: POP
26056: POP
26057: GO 26124
26059: GO 26018
26061: POP
26062: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26063: LD_ADDR_EXP 96
26067: PUSH
26068: LD_EXP 96
26072: PPUSH
26073: LD_VAR 0 5
26077: PUSH
26078: LD_EXP 96
26082: PUSH
26083: LD_VAR 0 5
26087: ARRAY
26088: PUSH
26089: LD_INT 1
26091: PLUS
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PPUSH
26097: LD_VAR 0 2
26101: PUSH
26102: LD_VAR 0 3
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PPUSH
26111: CALL 33449 0 3
26115: ST_TO_ADDR
// end ; result := true ;
26116: LD_ADDR_VAR 0 4
26120: PUSH
26121: LD_INT 1
26123: ST_TO_ADDR
// end ;
26124: LD_VAR 0 4
26128: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26129: LD_INT 0
26131: PPUSH
26132: PPUSH
26133: PPUSH
// if not unit in minersList then
26134: LD_VAR 0 1
26138: PUSH
26139: LD_EXP 95
26143: IN
26144: NOT
26145: IFFALSE 26149
// exit ;
26147: GO 26356
// index := GetElementIndex ( minersList , unit ) ;
26149: LD_ADDR_VAR 0 6
26153: PUSH
26154: LD_EXP 95
26158: PPUSH
26159: LD_VAR 0 1
26163: PPUSH
26164: CALL 33232 0 2
26168: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26169: LD_ADDR_VAR 0 5
26173: PUSH
26174: DOUBLE
26175: LD_EXP 96
26179: PUSH
26180: LD_VAR 0 6
26184: ARRAY
26185: INC
26186: ST_TO_ADDR
26187: LD_INT 1
26189: PUSH
26190: FOR_DOWNTO
26191: IFFALSE 26354
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26193: LD_EXP 96
26197: PUSH
26198: LD_VAR 0 6
26202: ARRAY
26203: PUSH
26204: LD_VAR 0 5
26208: ARRAY
26209: PUSH
26210: LD_INT 1
26212: ARRAY
26213: PPUSH
26214: LD_EXP 96
26218: PUSH
26219: LD_VAR 0 6
26223: ARRAY
26224: PUSH
26225: LD_VAR 0 5
26229: ARRAY
26230: PUSH
26231: LD_INT 2
26233: ARRAY
26234: PPUSH
26235: LD_VAR 0 2
26239: PPUSH
26240: LD_VAR 0 3
26244: PPUSH
26245: CALL_OW 298
26249: PUSH
26250: LD_INT 6
26252: LESS
26253: IFFALSE 26352
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26255: LD_EXP 96
26259: PUSH
26260: LD_VAR 0 6
26264: ARRAY
26265: PUSH
26266: LD_VAR 0 5
26270: ARRAY
26271: PUSH
26272: LD_INT 1
26274: ARRAY
26275: PPUSH
26276: LD_EXP 96
26280: PUSH
26281: LD_VAR 0 6
26285: ARRAY
26286: PUSH
26287: LD_VAR 0 5
26291: ARRAY
26292: PUSH
26293: LD_INT 2
26295: ARRAY
26296: PPUSH
26297: LD_VAR 0 1
26301: PPUSH
26302: CALL_OW 255
26306: PPUSH
26307: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26311: LD_ADDR_EXP 96
26315: PUSH
26316: LD_EXP 96
26320: PPUSH
26321: LD_VAR 0 6
26325: PPUSH
26326: LD_EXP 96
26330: PUSH
26331: LD_VAR 0 6
26335: ARRAY
26336: PPUSH
26337: LD_VAR 0 5
26341: PPUSH
26342: CALL_OW 3
26346: PPUSH
26347: CALL_OW 1
26351: ST_TO_ADDR
// end ; end ;
26352: GO 26190
26354: POP
26355: POP
// end ;
26356: LD_VAR 0 4
26360: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26361: LD_INT 0
26363: PPUSH
26364: PPUSH
26365: PPUSH
26366: PPUSH
26367: PPUSH
26368: PPUSH
26369: PPUSH
26370: PPUSH
26371: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26372: LD_VAR 0 1
26376: PPUSH
26377: CALL_OW 264
26381: PUSH
26382: LD_INT 81
26384: EQUAL
26385: NOT
26386: IFTRUE 26401
26388: PUSH
26389: LD_VAR 0 1
26393: PUSH
26394: LD_EXP 95
26398: IN
26399: NOT
26400: OR
26401: IFFALSE 26405
// exit ;
26403: GO 26731
// index := GetElementIndex ( minersList , unit ) ;
26405: LD_ADDR_VAR 0 6
26409: PUSH
26410: LD_EXP 95
26414: PPUSH
26415: LD_VAR 0 1
26419: PPUSH
26420: CALL 33232 0 2
26424: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26425: LD_ADDR_VAR 0 8
26429: PUSH
26430: LD_EXP 97
26434: PUSH
26435: LD_EXP 96
26439: PUSH
26440: LD_VAR 0 6
26444: ARRAY
26445: MINUS
26446: ST_TO_ADDR
// if not minesFreeAmount then
26447: LD_VAR 0 8
26451: NOT
26452: IFFALSE 26456
// exit ;
26454: GO 26731
// tmp := [ ] ;
26456: LD_ADDR_VAR 0 7
26460: PUSH
26461: EMPTY
26462: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26463: LD_ADDR_VAR 0 5
26467: PUSH
26468: DOUBLE
26469: LD_INT 1
26471: DEC
26472: ST_TO_ADDR
26473: LD_VAR 0 8
26477: PUSH
26478: FOR_TO
26479: IFFALSE 26678
// begin _d := rand ( 0 , 5 ) ;
26481: LD_ADDR_VAR 0 11
26485: PUSH
26486: LD_INT 0
26488: PPUSH
26489: LD_INT 5
26491: PPUSH
26492: CALL_OW 12
26496: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26497: LD_ADDR_VAR 0 12
26501: PUSH
26502: LD_INT 2
26504: PPUSH
26505: LD_INT 6
26507: PPUSH
26508: CALL_OW 12
26512: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26513: LD_ADDR_VAR 0 9
26517: PUSH
26518: LD_VAR 0 2
26522: PPUSH
26523: LD_VAR 0 11
26527: PPUSH
26528: LD_VAR 0 12
26532: PPUSH
26533: CALL_OW 272
26537: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26538: LD_ADDR_VAR 0 10
26542: PUSH
26543: LD_VAR 0 3
26547: PPUSH
26548: LD_VAR 0 11
26552: PPUSH
26553: LD_VAR 0 12
26557: PPUSH
26558: CALL_OW 273
26562: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26563: LD_VAR 0 9
26567: PPUSH
26568: LD_VAR 0 10
26572: PPUSH
26573: CALL_OW 488
26577: IFFALSE 26601
26579: PUSH
26580: LD_VAR 0 9
26584: PUSH
26585: LD_VAR 0 10
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_VAR 0 7
26598: IN
26599: NOT
26600: AND
26601: IFFALSE 26620
26603: PUSH
26604: LD_VAR 0 9
26608: PPUSH
26609: LD_VAR 0 10
26613: PPUSH
26614: CALL_OW 458
26618: NOT
26619: AND
26620: IFFALSE 26662
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26622: LD_ADDR_VAR 0 7
26626: PUSH
26627: LD_VAR 0 7
26631: PPUSH
26632: LD_VAR 0 7
26636: PUSH
26637: LD_INT 1
26639: PLUS
26640: PPUSH
26641: LD_VAR 0 9
26645: PUSH
26646: LD_VAR 0 10
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PPUSH
26655: CALL_OW 1
26659: ST_TO_ADDR
26660: GO 26676
// i := i - 1 ;
26662: LD_ADDR_VAR 0 5
26666: PUSH
26667: LD_VAR 0 5
26671: PUSH
26672: LD_INT 1
26674: MINUS
26675: ST_TO_ADDR
// end ;
26676: GO 26478
26678: POP
26679: POP
// for i in tmp do
26680: LD_ADDR_VAR 0 5
26684: PUSH
26685: LD_VAR 0 7
26689: PUSH
26690: FOR_IN
26691: IFFALSE 26729
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26693: LD_VAR 0 1
26697: PPUSH
26698: LD_VAR 0 5
26702: PUSH
26703: LD_INT 1
26705: ARRAY
26706: PPUSH
26707: LD_VAR 0 5
26711: PUSH
26712: LD_INT 2
26714: ARRAY
26715: PPUSH
26716: CALL 25722 0 3
26720: NOT
26721: IFFALSE 26727
// exit ;
26723: POP
26724: POP
26725: GO 26731
26727: GO 26690
26729: POP
26730: POP
// end ;
26731: LD_VAR 0 4
26735: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
26736: LD_INT 0
26738: PPUSH
26739: PPUSH
26740: PPUSH
26741: PPUSH
26742: PPUSH
26743: PPUSH
26744: PPUSH
26745: PPUSH
26746: PPUSH
// if GetClass ( unit ) <> class_sniper then
26747: LD_VAR 0 1
26751: PPUSH
26752: CALL_OW 257
26756: PUSH
26757: LD_INT 5
26759: NONEQUAL
26760: IFFALSE 26764
// exit ;
26762: GO 27234
// dist := 8 ;
26764: LD_ADDR_VAR 0 5
26768: PUSH
26769: LD_INT 8
26771: ST_TO_ADDR
// viewRange := 12 ;
26772: LD_ADDR_VAR 0 8
26776: PUSH
26777: LD_INT 12
26779: ST_TO_ADDR
// side := GetSide ( unit ) ;
26780: LD_ADDR_VAR 0 6
26784: PUSH
26785: LD_VAR 0 1
26789: PPUSH
26790: CALL_OW 255
26794: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26795: LD_INT 61
26797: PPUSH
26798: LD_VAR 0 6
26802: PPUSH
26803: CALL_OW 321
26807: PUSH
26808: LD_INT 2
26810: EQUAL
26811: IFFALSE 26821
// viewRange := 16 ;
26813: LD_ADDR_VAR 0 8
26817: PUSH
26818: LD_INT 16
26820: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26821: LD_VAR 0 1
26825: PPUSH
26826: LD_VAR 0 2
26830: PPUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: CALL_OW 297
26840: PUSH
26841: LD_VAR 0 5
26845: GREATER
26846: IFFALSE 26925
// begin ComMoveXY ( unit , x , y ) ;
26848: LD_VAR 0 1
26852: PPUSH
26853: LD_VAR 0 2
26857: PPUSH
26858: LD_VAR 0 3
26862: PPUSH
26863: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26867: LD_INT 35
26869: PPUSH
26870: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26874: LD_VAR 0 1
26878: PPUSH
26879: LD_VAR 0 2
26883: PPUSH
26884: LD_VAR 0 3
26888: PPUSH
26889: CALL 65288 0 3
26893: NOT
26894: IFFALSE 26898
// exit ;
26896: GO 27234
// until GetDistUnitXY ( unit , x , y ) < dist ;
26898: LD_VAR 0 1
26902: PPUSH
26903: LD_VAR 0 2
26907: PPUSH
26908: LD_VAR 0 3
26912: PPUSH
26913: CALL_OW 297
26917: PUSH
26918: LD_VAR 0 5
26922: LESS
26923: IFFALSE 26867
// end ; ComTurnXY ( unit , x , y ) ;
26925: LD_VAR 0 1
26929: PPUSH
26930: LD_VAR 0 2
26934: PPUSH
26935: LD_VAR 0 3
26939: PPUSH
26940: CALL_OW 118
// repeat if Multiplayer then
26944: LD_OWVAR 4
26948: IFFALSE 26959
// wait ( 35 ) else
26950: LD_INT 35
26952: PPUSH
26953: CALL_OW 67
26957: GO 26966
// wait ( 5 ) ;
26959: LD_INT 5
26961: PPUSH
26962: CALL_OW 67
// _d := GetDir ( unit ) ;
26966: LD_ADDR_VAR 0 11
26970: PUSH
26971: LD_VAR 0 1
26975: PPUSH
26976: CALL_OW 254
26980: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
26981: LD_ADDR_VAR 0 7
26985: PUSH
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL_OW 250
26995: PPUSH
26996: LD_VAR 0 1
27000: PPUSH
27001: CALL_OW 251
27005: PPUSH
27006: LD_VAR 0 2
27010: PPUSH
27011: LD_VAR 0 3
27015: PPUSH
27016: CALL 67924 0 4
27020: ST_TO_ADDR
// until dir = _d ;
27021: LD_VAR 0 7
27025: PUSH
27026: LD_VAR 0 11
27030: EQUAL
27031: IFFALSE 26944
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
27033: LD_ADDR_VAR 0 9
27037: PUSH
27038: LD_VAR 0 1
27042: PPUSH
27043: CALL_OW 250
27047: PPUSH
27048: LD_VAR 0 7
27052: PPUSH
27053: LD_VAR 0 5
27057: PPUSH
27058: CALL_OW 272
27062: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
27063: LD_ADDR_VAR 0 10
27067: PUSH
27068: LD_VAR 0 1
27072: PPUSH
27073: CALL_OW 251
27077: PPUSH
27078: LD_VAR 0 7
27082: PPUSH
27083: LD_VAR 0 5
27087: PPUSH
27088: CALL_OW 273
27092: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27093: LD_VAR 0 9
27097: PPUSH
27098: LD_VAR 0 10
27102: PPUSH
27103: CALL_OW 488
27107: NOT
27108: IFFALSE 27112
// exit ;
27110: GO 27234
// ComAnimCustom ( unit , 1 ) ;
27112: LD_VAR 0 1
27116: PPUSH
27117: LD_INT 1
27119: PPUSH
27120: CALL_OW 592
// p := 0 ;
27124: LD_ADDR_VAR 0 12
27128: PUSH
27129: LD_INT 0
27131: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27132: LD_VAR 0 9
27136: PPUSH
27137: LD_VAR 0 10
27141: PPUSH
27142: LD_VAR 0 6
27146: PPUSH
27147: LD_VAR 0 8
27151: PPUSH
27152: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
27156: LD_INT 35
27158: PPUSH
27159: CALL_OW 67
// p := Inc ( p ) ;
27163: LD_ADDR_VAR 0 12
27167: PUSH
27168: LD_VAR 0 12
27172: PPUSH
27173: CALL 67880 0 1
27177: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
27178: LD_VAR 0 12
27182: PUSH
27183: LD_INT 3
27185: EQUAL
27186: IFTRUE 27200
27188: PUSH
27189: LD_VAR 0 1
27193: PPUSH
27194: CALL_OW 302
27198: NOT
27199: OR
27200: IFTRUE 27213
27202: PUSH
27203: LD_VAR 0 1
27207: PPUSH
27208: CALL_OW 301
27212: OR
27213: IFFALSE 27156
// RemoveSeeing ( _x , _y , side ) ;
27215: LD_VAR 0 9
27219: PPUSH
27220: LD_VAR 0 10
27224: PPUSH
27225: LD_VAR 0 6
27229: PPUSH
27230: CALL_OW 331
// end ;
27234: LD_VAR 0 4
27238: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
27239: LD_INT 0
27241: PPUSH
27242: PPUSH
27243: PPUSH
27244: PPUSH
27245: PPUSH
27246: PPUSH
27247: PPUSH
27248: PPUSH
27249: PPUSH
27250: PPUSH
27251: PPUSH
// if not unit then
27252: LD_VAR 0 1
27256: NOT
27257: IFFALSE 27261
// exit ;
27259: GO 27532
// side := GetSide ( unit ) ;
27261: LD_ADDR_VAR 0 3
27265: PUSH
27266: LD_VAR 0 1
27270: PPUSH
27271: CALL_OW 255
27275: ST_TO_ADDR
// x := GetX ( unit ) ;
27276: LD_ADDR_VAR 0 5
27280: PUSH
27281: LD_VAR 0 1
27285: PPUSH
27286: CALL_OW 250
27290: ST_TO_ADDR
// y := GetY ( unit ) ;
27291: LD_ADDR_VAR 0 6
27295: PUSH
27296: LD_VAR 0 1
27300: PPUSH
27301: CALL_OW 251
27305: ST_TO_ADDR
// r := 8 ;
27306: LD_ADDR_VAR 0 4
27310: PUSH
27311: LD_INT 8
27313: ST_TO_ADDR
// if x - r < 0 then
27314: LD_VAR 0 5
27318: PUSH
27319: LD_VAR 0 4
27323: MINUS
27324: PUSH
27325: LD_INT 0
27327: LESS
27328: IFFALSE 27340
// min_x := 0 else
27330: LD_ADDR_VAR 0 7
27334: PUSH
27335: LD_INT 0
27337: ST_TO_ADDR
27338: GO 27356
// min_x := x - r ;
27340: LD_ADDR_VAR 0 7
27344: PUSH
27345: LD_VAR 0 5
27349: PUSH
27350: LD_VAR 0 4
27354: MINUS
27355: ST_TO_ADDR
// if y - r < 0 then
27356: LD_VAR 0 6
27360: PUSH
27361: LD_VAR 0 4
27365: MINUS
27366: PUSH
27367: LD_INT 0
27369: LESS
27370: IFFALSE 27382
// min_y := 0 else
27372: LD_ADDR_VAR 0 8
27376: PUSH
27377: LD_INT 0
27379: ST_TO_ADDR
27380: GO 27398
// min_y := y - r ;
27382: LD_ADDR_VAR 0 8
27386: PUSH
27387: LD_VAR 0 6
27391: PUSH
27392: LD_VAR 0 4
27396: MINUS
27397: ST_TO_ADDR
// max_x := x + r ;
27398: LD_ADDR_VAR 0 9
27402: PUSH
27403: LD_VAR 0 5
27407: PUSH
27408: LD_VAR 0 4
27412: PLUS
27413: ST_TO_ADDR
// max_y := y + r ;
27414: LD_ADDR_VAR 0 10
27418: PUSH
27419: LD_VAR 0 6
27423: PUSH
27424: LD_VAR 0 4
27428: PLUS
27429: ST_TO_ADDR
// for _x = min_x to max_x do
27430: LD_ADDR_VAR 0 11
27434: PUSH
27435: DOUBLE
27436: LD_VAR 0 7
27440: DEC
27441: ST_TO_ADDR
27442: LD_VAR 0 9
27446: PUSH
27447: FOR_TO
27448: IFFALSE 27530
// for _y = min_y to max_y do
27450: LD_ADDR_VAR 0 12
27454: PUSH
27455: DOUBLE
27456: LD_VAR 0 8
27460: DEC
27461: ST_TO_ADDR
27462: LD_VAR 0 10
27466: PUSH
27467: FOR_TO
27468: IFFALSE 27526
// begin if not ValidHex ( _x , _y ) then
27470: LD_VAR 0 11
27474: PPUSH
27475: LD_VAR 0 12
27479: PPUSH
27480: CALL_OW 488
27484: NOT
27485: IFFALSE 27489
// continue ;
27487: GO 27467
// if MineAtPos ( _x , _y ) then
27489: LD_VAR 0 11
27493: PPUSH
27494: LD_VAR 0 12
27498: PPUSH
27499: CALL_OW 458
27503: IFFALSE 27524
// ViewMineAtPos ( _x , _y , side ) ;
27505: LD_VAR 0 11
27509: PPUSH
27510: LD_VAR 0 12
27514: PPUSH
27515: LD_VAR 0 3
27519: PPUSH
27520: CALL_OW 457
// end ;
27524: GO 27467
27526: POP
27527: POP
27528: GO 27447
27530: POP
27531: POP
// end ;
27532: LD_VAR 0 2
27536: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
27537: LD_INT 0
27539: PPUSH
27540: PPUSH
27541: PPUSH
27542: PPUSH
27543: PPUSH
27544: PPUSH
27545: PPUSH
// if not units then
27546: LD_VAR 0 1
27550: NOT
27551: IFFALSE 27555
// exit ;
27553: GO 28019
// scaners := [ ] ;
27555: LD_ADDR_VAR 0 6
27559: PUSH
27560: EMPTY
27561: ST_TO_ADDR
// for i in units do
27562: LD_ADDR_VAR 0 3
27566: PUSH
27567: LD_VAR 0 1
27571: PUSH
27572: FOR_IN
27573: IFFALSE 27730
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
27575: LD_VAR 0 3
27579: PPUSH
27580: CALL_OW 264
27584: PUSH
27585: LD_INT 11
27587: NONEQUAL
27588: IFTRUE 27602
27590: PUSH
27591: LD_VAR 0 3
27595: PPUSH
27596: CALL_OW 302
27600: NOT
27601: OR
27602: IFTRUE 27619
27604: PUSH
27605: LD_VAR 0 3
27609: PPUSH
27610: CALL_OW 110
27614: PUSH
27615: LD_INT 502
27617: EQUAL
27618: OR
27619: IFFALSE 27623
// continue ;
27621: GO 27572
// ComStop ( i ) ;
27623: LD_VAR 0 3
27627: PPUSH
27628: CALL_OW 141
// x := GetX ( i ) ;
27632: LD_ADDR_VAR 0 4
27636: PUSH
27637: LD_VAR 0 3
27641: PPUSH
27642: CALL_OW 250
27646: ST_TO_ADDR
// y := GetY ( i ) ;
27647: LD_ADDR_VAR 0 5
27651: PUSH
27652: LD_VAR 0 3
27656: PPUSH
27657: CALL_OW 251
27661: ST_TO_ADDR
// if GetSide ( i ) = your_side then
27662: LD_VAR 0 3
27666: PPUSH
27667: CALL_OW 255
27671: PUSH
27672: LD_OWVAR 2
27676: EQUAL
27677: IFFALSE 27696
// PlaySoundXY ( x , y , mineDetector ) ;
27679: LD_VAR 0 4
27683: PPUSH
27684: LD_VAR 0 5
27688: PPUSH
27689: LD_STRING mineDetector
27691: PPUSH
27692: CALL_OW 366
// scaners := Join ( scaners , i ) ;
27696: LD_ADDR_VAR 0 6
27700: PUSH
27701: LD_VAR 0 6
27705: PPUSH
27706: LD_VAR 0 3
27710: PPUSH
27711: CALL 66507 0 2
27715: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
27716: LD_VAR 0 3
27720: PPUSH
27721: LD_INT 502
27723: PPUSH
27724: CALL_OW 109
// end ;
27728: GO 27572
27730: POP
27731: POP
// if not scaners then
27732: LD_VAR 0 6
27736: NOT
27737: IFFALSE 27741
// exit ;
27739: GO 28019
// wait ( 3 ) ;
27741: LD_INT 3
27743: PPUSH
27744: CALL_OW 67
// timer := 6 ;
27748: LD_ADDR_VAR 0 7
27752: PUSH
27753: LD_INT 6
27755: ST_TO_ADDR
// repeat for i in scaners do
27756: LD_ADDR_VAR 0 3
27760: PUSH
27761: LD_VAR 0 6
27765: PUSH
27766: FOR_IN
27767: IFFALSE 27917
// begin side := GetSide ( i ) ;
27769: LD_ADDR_VAR 0 8
27773: PUSH
27774: LD_VAR 0 3
27778: PPUSH
27779: CALL_OW 255
27783: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
27784: LD_VAR 0 3
27788: PPUSH
27789: CALL_OW 302
27793: NOT
27794: IFTRUE 27807
27796: PUSH
27797: LD_VAR 0 3
27801: PPUSH
27802: CALL_OW 314
27806: OR
27807: IFTRUE 27838
27809: PUSH
27810: LD_VAR 0 3
27814: PPUSH
27815: CALL_OW 263
27819: PUSH
27820: LD_INT 1
27822: EQUAL
27823: IFFALSE 27837
27825: PUSH
27826: LD_VAR 0 3
27830: PPUSH
27831: CALL_OW 311
27835: NOT
27836: AND
27837: OR
27838: IFFALSE 27882
// begin SetUnitDisplayNumber ( i , 0 ) ;
27840: LD_VAR 0 3
27844: PPUSH
27845: LD_INT 0
27847: PPUSH
27848: CALL_OW 505
// SetTag ( i , 0 ) ;
27852: LD_VAR 0 3
27856: PPUSH
27857: LD_INT 0
27859: PPUSH
27860: CALL_OW 109
// scaners := scaners diff i ;
27864: LD_ADDR_VAR 0 6
27868: PUSH
27869: LD_VAR 0 6
27873: PUSH
27874: LD_VAR 0 3
27878: DIFF
27879: ST_TO_ADDR
// continue ;
27880: GO 27766
// end ; if side in [ your_side , 9 ] then
27882: LD_VAR 0 8
27886: PUSH
27887: LD_OWVAR 2
27891: PUSH
27892: LD_INT 9
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: IN
27899: IFFALSE 27915
// SetUnitDisplayNumber ( i , timer ) ;
27901: LD_VAR 0 3
27905: PPUSH
27906: LD_VAR 0 7
27910: PPUSH
27911: CALL_OW 505
// end ;
27915: GO 27766
27917: POP
27918: POP
// if not scaners then
27919: LD_VAR 0 6
27923: NOT
27924: IFFALSE 27928
// exit ;
27926: GO 28019
// timer := Dec ( timer ) ;
27928: LD_ADDR_VAR 0 7
27932: PUSH
27933: LD_VAR 0 7
27937: PPUSH
27938: CALL 67902 0 1
27942: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27943: LD_INT 35
27945: PPUSH
27946: CALL_OW 67
// until timer = 0 ;
27950: LD_VAR 0 7
27954: PUSH
27955: LD_INT 0
27957: EQUAL
27958: IFFALSE 27756
// if not scaners then
27960: LD_VAR 0 6
27964: NOT
27965: IFFALSE 27969
// exit ;
27967: GO 28019
// for i in scaners do
27969: LD_ADDR_VAR 0 3
27973: PUSH
27974: LD_VAR 0 6
27978: PUSH
27979: FOR_IN
27980: IFFALSE 28017
// begin SetUnitDisplayNumber ( i , 0 ) ;
27982: LD_VAR 0 3
27986: PPUSH
27987: LD_INT 0
27989: PPUSH
27990: CALL_OW 505
// SetTag ( i , 0 ) ;
27994: LD_VAR 0 3
27998: PPUSH
27999: LD_INT 0
28001: PPUSH
28002: CALL_OW 109
// RevealDetectorMine ( i ) ;
28006: LD_VAR 0 3
28010: PPUSH
28011: CALL 27239 0 1
// end ;
28015: GO 27979
28017: POP
28018: POP
// end ;
28019: LD_VAR 0 2
28023: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
28024: LD_INT 0
28026: PPUSH
// if p1 = mine_detector_mode then
28027: LD_VAR 0 2
28031: PUSH
28032: LD_INT 103
28034: EQUAL
28035: IFFALSE 28046
// DetectMine ( units ) ;
28037: LD_VAR 0 1
28041: PPUSH
28042: CALL 27537 0 1
// end ; end_of_file
28046: LD_VAR 0 7
28050: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
28051: LD_VAR 0 1
28055: PUSH
28056: LD_INT 200
28058: DOUBLE
28059: GREATEREQUAL
28060: IFFALSE 28068
28062: LD_INT 299
28064: DOUBLE
28065: LESSEQUAL
28066: IFTRUE 28070
28068: GO 28102
28070: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
28071: LD_VAR 0 1
28075: PPUSH
28076: LD_VAR 0 2
28080: PPUSH
28081: LD_VAR 0 3
28085: PPUSH
28086: LD_VAR 0 4
28090: PPUSH
28091: LD_VAR 0 5
28095: PPUSH
28096: CALL 22327 0 5
28100: GO 28179
28102: LD_INT 300
28104: DOUBLE
28105: GREATEREQUAL
28106: IFFALSE 28114
28108: LD_INT 399
28110: DOUBLE
28111: LESSEQUAL
28112: IFTRUE 28116
28114: GO 28178
28116: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
28117: LD_VAR 0 1
28121: PPUSH
28122: LD_VAR 0 2
28126: PPUSH
28127: LD_VAR 0 3
28131: PPUSH
28132: LD_VAR 0 4
28136: PPUSH
28137: LD_VAR 0 5
28141: PPUSH
28142: LD_VAR 0 6
28146: PPUSH
28147: LD_VAR 0 7
28151: PPUSH
28152: LD_VAR 0 8
28156: PPUSH
28157: LD_VAR 0 9
28161: PPUSH
28162: LD_VAR 0 10
28166: PPUSH
28167: LD_VAR 0 11
28171: PPUSH
28172: CALL 18130 0 11
28176: GO 28179
28178: POP
// end ;
28179: PPOPN 11
28181: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
28182: LD_VAR 0 1
28186: PPUSH
28187: LD_VAR 0 2
28191: PPUSH
28192: LD_VAR 0 3
28196: PPUSH
28197: LD_VAR 0 4
28201: PPUSH
28202: LD_VAR 0 5
28206: PPUSH
28207: CALL 21627 0 5
// end ; end_of_file
28211: PPOPN 5
28213: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
28214: LD_VAR 0 1
28218: PPUSH
28219: LD_VAR 0 2
28223: PPUSH
28224: LD_VAR 0 3
28228: PPUSH
28229: LD_VAR 0 4
28233: PPUSH
28234: LD_VAR 0 5
28238: PPUSH
28239: LD_VAR 0 6
28243: PPUSH
28244: CALL 5670 0 6
// end ;
28248: PPOPN 6
28250: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
28251: LD_INT 0
28253: PPUSH
// begin if not units then
28254: LD_VAR 0 1
28258: NOT
28259: IFFALSE 28263
// exit ;
28261: GO 28297
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
28263: LD_VAR 0 1
28267: PPUSH
28268: LD_VAR 0 2
28272: PPUSH
28273: LD_VAR 0 3
28277: PPUSH
28278: LD_VAR 0 4
28282: PPUSH
28283: LD_VAR 0 5
28287: PPUSH
28288: LD_VAR 0 6
28292: PPUSH
28293: CALL 28024 0 6
// end ;
28297: PPOPN 7
28299: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
28300: CALL 5550 0 0
// end ; end_of_file end_of_file
28304: PPOPN 1
28306: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28307: LD_INT 0
28309: PPUSH
28310: PPUSH
// if exist_mode then
28311: LD_VAR 0 2
28315: IFFALSE 28361
// begin unit := CreateCharacter ( prefix & ident ) ;
28317: LD_ADDR_VAR 0 5
28321: PUSH
28322: LD_VAR 0 3
28326: PUSH
28327: LD_VAR 0 1
28331: STR
28332: PPUSH
28333: CALL_OW 34
28337: ST_TO_ADDR
// if unit then
28338: LD_VAR 0 5
28342: IFFALSE 28359
// DeleteCharacters ( prefix & ident ) ;
28344: LD_VAR 0 3
28348: PUSH
28349: LD_VAR 0 1
28353: STR
28354: PPUSH
28355: CALL_OW 40
// end else
28359: GO 28376
// unit := NewCharacter ( ident ) ;
28361: LD_ADDR_VAR 0 5
28365: PUSH
28366: LD_VAR 0 1
28370: PPUSH
28371: CALL_OW 25
28375: ST_TO_ADDR
// result := unit ;
28376: LD_ADDR_VAR 0 4
28380: PUSH
28381: LD_VAR 0 5
28385: ST_TO_ADDR
// end ;
28386: LD_VAR 0 4
28390: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
28391: LD_INT 0
28393: PPUSH
28394: PPUSH
// if exist_mode then
28395: LD_VAR 0 2
28399: IFFALSE 28424
// unit := CreateCharacter ( prefix & ident ) else
28401: LD_ADDR_VAR 0 5
28405: PUSH
28406: LD_VAR 0 3
28410: PUSH
28411: LD_VAR 0 1
28415: STR
28416: PPUSH
28417: CALL_OW 34
28421: ST_TO_ADDR
28422: GO 28439
// unit := NewCharacter ( ident ) ;
28424: LD_ADDR_VAR 0 5
28428: PUSH
28429: LD_VAR 0 1
28433: PPUSH
28434: CALL_OW 25
28438: ST_TO_ADDR
// result := unit ;
28439: LD_ADDR_VAR 0 4
28443: PUSH
28444: LD_VAR 0 5
28448: ST_TO_ADDR
// end ;
28449: LD_VAR 0 4
28453: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28454: LD_INT 0
28456: PPUSH
28457: PPUSH
// if not side or not nation then
28458: LD_VAR 0 1
28462: NOT
28463: IFTRUE 28472
28465: PUSH
28466: LD_VAR 0 2
28470: NOT
28471: OR
28472: IFFALSE 28476
// exit ;
28474: GO 29270
// case nation of nation_american :
28476: LD_VAR 0 2
28480: PUSH
28481: LD_INT 1
28483: DOUBLE
28484: EQUAL
28485: IFTRUE 28489
28487: GO 28711
28489: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
28490: LD_ADDR_VAR 0 4
28494: PUSH
28495: LD_INT 35
28497: PUSH
28498: LD_INT 45
28500: PUSH
28501: LD_INT 46
28503: PUSH
28504: LD_INT 47
28506: PUSH
28507: LD_INT 82
28509: PUSH
28510: LD_INT 83
28512: PUSH
28513: LD_INT 84
28515: PUSH
28516: LD_INT 85
28518: PUSH
28519: LD_INT 86
28521: PUSH
28522: LD_INT 1
28524: PUSH
28525: LD_INT 2
28527: PUSH
28528: LD_INT 6
28530: PUSH
28531: LD_INT 15
28533: PUSH
28534: LD_INT 16
28536: PUSH
28537: LD_INT 7
28539: PUSH
28540: LD_INT 12
28542: PUSH
28543: LD_INT 13
28545: PUSH
28546: LD_INT 10
28548: PUSH
28549: LD_INT 14
28551: PUSH
28552: LD_INT 20
28554: PUSH
28555: LD_INT 21
28557: PUSH
28558: LD_INT 22
28560: PUSH
28561: LD_INT 25
28563: PUSH
28564: LD_INT 32
28566: PUSH
28567: LD_INT 27
28569: PUSH
28570: LD_INT 36
28572: PUSH
28573: LD_INT 69
28575: PUSH
28576: LD_INT 39
28578: PUSH
28579: LD_INT 34
28581: PUSH
28582: LD_INT 40
28584: PUSH
28585: LD_INT 48
28587: PUSH
28588: LD_INT 49
28590: PUSH
28591: LD_INT 50
28593: PUSH
28594: LD_INT 51
28596: PUSH
28597: LD_INT 52
28599: PUSH
28600: LD_INT 53
28602: PUSH
28603: LD_INT 54
28605: PUSH
28606: LD_INT 55
28608: PUSH
28609: LD_INT 56
28611: PUSH
28612: LD_INT 57
28614: PUSH
28615: LD_INT 58
28617: PUSH
28618: LD_INT 59
28620: PUSH
28621: LD_INT 60
28623: PUSH
28624: LD_INT 61
28626: PUSH
28627: LD_INT 62
28629: PUSH
28630: LD_INT 80
28632: PUSH
28633: LD_INT 82
28635: PUSH
28636: LD_INT 83
28638: PUSH
28639: LD_INT 84
28641: PUSH
28642: LD_INT 85
28644: PUSH
28645: LD_INT 86
28647: PUSH
28648: LD_INT 90
28650: PUSH
28651: LD_INT 93
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: ST_TO_ADDR
28709: GO 29192
28711: LD_INT 2
28713: DOUBLE
28714: EQUAL
28715: IFTRUE 28719
28717: GO 28953
28719: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
28720: LD_ADDR_VAR 0 4
28724: PUSH
28725: LD_INT 35
28727: PUSH
28728: LD_INT 45
28730: PUSH
28731: LD_INT 46
28733: PUSH
28734: LD_INT 47
28736: PUSH
28737: LD_INT 82
28739: PUSH
28740: LD_INT 83
28742: PUSH
28743: LD_INT 84
28745: PUSH
28746: LD_INT 85
28748: PUSH
28749: LD_INT 87
28751: PUSH
28752: LD_INT 70
28754: PUSH
28755: LD_INT 1
28757: PUSH
28758: LD_INT 11
28760: PUSH
28761: LD_INT 3
28763: PUSH
28764: LD_INT 4
28766: PUSH
28767: LD_INT 5
28769: PUSH
28770: LD_INT 6
28772: PUSH
28773: LD_INT 15
28775: PUSH
28776: LD_INT 18
28778: PUSH
28779: LD_INT 7
28781: PUSH
28782: LD_INT 17
28784: PUSH
28785: LD_INT 8
28787: PUSH
28788: LD_INT 20
28790: PUSH
28791: LD_INT 21
28793: PUSH
28794: LD_INT 22
28796: PUSH
28797: LD_INT 72
28799: PUSH
28800: LD_INT 26
28802: PUSH
28803: LD_INT 69
28805: PUSH
28806: LD_INT 39
28808: PUSH
28809: LD_INT 40
28811: PUSH
28812: LD_INT 41
28814: PUSH
28815: LD_INT 42
28817: PUSH
28818: LD_INT 43
28820: PUSH
28821: LD_INT 48
28823: PUSH
28824: LD_INT 49
28826: PUSH
28827: LD_INT 50
28829: PUSH
28830: LD_INT 51
28832: PUSH
28833: LD_INT 52
28835: PUSH
28836: LD_INT 53
28838: PUSH
28839: LD_INT 54
28841: PUSH
28842: LD_INT 55
28844: PUSH
28845: LD_INT 56
28847: PUSH
28848: LD_INT 60
28850: PUSH
28851: LD_INT 61
28853: PUSH
28854: LD_INT 62
28856: PUSH
28857: LD_INT 66
28859: PUSH
28860: LD_INT 67
28862: PUSH
28863: LD_INT 68
28865: PUSH
28866: LD_INT 81
28868: PUSH
28869: LD_INT 82
28871: PUSH
28872: LD_INT 83
28874: PUSH
28875: LD_INT 84
28877: PUSH
28878: LD_INT 85
28880: PUSH
28881: LD_INT 87
28883: PUSH
28884: LD_INT 88
28886: PUSH
28887: LD_INT 92
28889: PUSH
28890: LD_INT 94
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: ST_TO_ADDR
28951: GO 29192
28953: LD_INT 3
28955: DOUBLE
28956: EQUAL
28957: IFTRUE 28961
28959: GO 29191
28961: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
28962: LD_ADDR_VAR 0 4
28966: PUSH
28967: LD_INT 46
28969: PUSH
28970: LD_INT 47
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: LD_INT 2
28978: PUSH
28979: LD_INT 82
28981: PUSH
28982: LD_INT 83
28984: PUSH
28985: LD_INT 84
28987: PUSH
28988: LD_INT 85
28990: PUSH
28991: LD_INT 86
28993: PUSH
28994: LD_INT 11
28996: PUSH
28997: LD_INT 9
28999: PUSH
29000: LD_INT 20
29002: PUSH
29003: LD_INT 19
29005: PUSH
29006: LD_INT 21
29008: PUSH
29009: LD_INT 24
29011: PUSH
29012: LD_INT 22
29014: PUSH
29015: LD_INT 25
29017: PUSH
29018: LD_INT 28
29020: PUSH
29021: LD_INT 29
29023: PUSH
29024: LD_INT 30
29026: PUSH
29027: LD_INT 31
29029: PUSH
29030: LD_INT 37
29032: PUSH
29033: LD_INT 38
29035: PUSH
29036: LD_INT 32
29038: PUSH
29039: LD_INT 27
29041: PUSH
29042: LD_INT 33
29044: PUSH
29045: LD_INT 69
29047: PUSH
29048: LD_INT 39
29050: PUSH
29051: LD_INT 34
29053: PUSH
29054: LD_INT 40
29056: PUSH
29057: LD_INT 71
29059: PUSH
29060: LD_INT 23
29062: PUSH
29063: LD_INT 44
29065: PUSH
29066: LD_INT 48
29068: PUSH
29069: LD_INT 49
29071: PUSH
29072: LD_INT 50
29074: PUSH
29075: LD_INT 51
29077: PUSH
29078: LD_INT 52
29080: PUSH
29081: LD_INT 53
29083: PUSH
29084: LD_INT 54
29086: PUSH
29087: LD_INT 55
29089: PUSH
29090: LD_INT 56
29092: PUSH
29093: LD_INT 57
29095: PUSH
29096: LD_INT 58
29098: PUSH
29099: LD_INT 59
29101: PUSH
29102: LD_INT 63
29104: PUSH
29105: LD_INT 64
29107: PUSH
29108: LD_INT 65
29110: PUSH
29111: LD_INT 82
29113: PUSH
29114: LD_INT 83
29116: PUSH
29117: LD_INT 84
29119: PUSH
29120: LD_INT 85
29122: PUSH
29123: LD_INT 86
29125: PUSH
29126: LD_INT 89
29128: PUSH
29129: LD_INT 91
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: ST_TO_ADDR
29189: GO 29192
29191: POP
// if state > - 1 and state < 3 then
29192: LD_VAR 0 3
29196: PUSH
29197: LD_INT 1
29199: NEG
29200: GREATER
29201: IFFALSE 29213
29203: PUSH
29204: LD_VAR 0 3
29208: PUSH
29209: LD_INT 3
29211: LESS
29212: AND
29213: IFFALSE 29270
// for i in result do
29215: LD_ADDR_VAR 0 5
29219: PUSH
29220: LD_VAR 0 4
29224: PUSH
29225: FOR_IN
29226: IFFALSE 29268
// if GetTech ( i , side ) <> state then
29228: LD_VAR 0 5
29232: PPUSH
29233: LD_VAR 0 1
29237: PPUSH
29238: CALL_OW 321
29242: PUSH
29243: LD_VAR 0 3
29247: NONEQUAL
29248: IFFALSE 29266
// result := result diff i ;
29250: LD_ADDR_VAR 0 4
29254: PUSH
29255: LD_VAR 0 4
29259: PUSH
29260: LD_VAR 0 5
29264: DIFF
29265: ST_TO_ADDR
29266: GO 29225
29268: POP
29269: POP
// end ;
29270: LD_VAR 0 4
29274: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29275: LD_INT 0
29277: PPUSH
29278: PPUSH
29279: PPUSH
// result := true ;
29280: LD_ADDR_VAR 0 3
29284: PUSH
29285: LD_INT 1
29287: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29288: LD_ADDR_VAR 0 5
29292: PUSH
29293: LD_VAR 0 2
29297: PPUSH
29298: CALL_OW 480
29302: ST_TO_ADDR
// if not tmp then
29303: LD_VAR 0 5
29307: NOT
29308: IFFALSE 29312
// exit ;
29310: GO 29361
// for i in tmp do
29312: LD_ADDR_VAR 0 4
29316: PUSH
29317: LD_VAR 0 5
29321: PUSH
29322: FOR_IN
29323: IFFALSE 29359
// if GetTech ( i , side ) <> state_researched then
29325: LD_VAR 0 4
29329: PPUSH
29330: LD_VAR 0 1
29334: PPUSH
29335: CALL_OW 321
29339: PUSH
29340: LD_INT 2
29342: NONEQUAL
29343: IFFALSE 29357
// begin result := false ;
29345: LD_ADDR_VAR 0 3
29349: PUSH
29350: LD_INT 0
29352: ST_TO_ADDR
// exit ;
29353: POP
29354: POP
29355: GO 29361
// end ;
29357: GO 29322
29359: POP
29360: POP
// end ;
29361: LD_VAR 0 3
29365: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29366: LD_INT 0
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
29377: PPUSH
29378: PPUSH
29379: PPUSH
29380: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29381: LD_VAR 0 1
29385: NOT
29386: IFTRUE 29403
29388: PUSH
29389: LD_VAR 0 1
29393: PPUSH
29394: CALL_OW 257
29398: PUSH
29399: LD_INT 9
29401: NONEQUAL
29402: OR
29403: IFFALSE 29407
// exit ;
29405: GO 29986
// side := GetSide ( unit ) ;
29407: LD_ADDR_VAR 0 9
29411: PUSH
29412: LD_VAR 0 1
29416: PPUSH
29417: CALL_OW 255
29421: ST_TO_ADDR
// tech_space := tech_spacanom ;
29422: LD_ADDR_VAR 0 12
29426: PUSH
29427: LD_INT 29
29429: ST_TO_ADDR
// tech_time := tech_taurad ;
29430: LD_ADDR_VAR 0 13
29434: PUSH
29435: LD_INT 28
29437: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29438: LD_ADDR_VAR 0 11
29442: PUSH
29443: LD_VAR 0 1
29447: PPUSH
29448: CALL_OW 310
29452: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29453: LD_VAR 0 11
29457: PPUSH
29458: CALL_OW 247
29462: PUSH
29463: LD_INT 2
29465: EQUAL
29466: IFFALSE 29470
// exit ;
29468: GO 29986
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29470: LD_ADDR_VAR 0 8
29474: PUSH
29475: LD_INT 81
29477: PUSH
29478: LD_VAR 0 9
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 3
29489: PUSH
29490: LD_INT 21
29492: PUSH
29493: LD_INT 3
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PPUSH
29508: CALL_OW 69
29512: ST_TO_ADDR
// if not tmp then
29513: LD_VAR 0 8
29517: NOT
29518: IFFALSE 29522
// exit ;
29520: GO 29986
// if in_unit then
29522: LD_VAR 0 11
29526: IFFALSE 29550
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29528: LD_ADDR_VAR 0 10
29532: PUSH
29533: LD_VAR 0 8
29537: PPUSH
29538: LD_VAR 0 11
29542: PPUSH
29543: CALL_OW 74
29547: ST_TO_ADDR
29548: GO 29570
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29550: LD_ADDR_VAR 0 10
29554: PUSH
29555: LD_VAR 0 8
29559: PPUSH
29560: LD_VAR 0 1
29564: PPUSH
29565: CALL_OW 74
29569: ST_TO_ADDR
// if not enemy then
29570: LD_VAR 0 10
29574: NOT
29575: IFFALSE 29579
// exit ;
29577: GO 29986
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29579: LD_VAR 0 11
29583: IFFALSE 29605
29585: PUSH
29586: LD_VAR 0 11
29590: PPUSH
29591: LD_VAR 0 10
29595: PPUSH
29596: CALL_OW 296
29600: PUSH
29601: LD_INT 13
29603: GREATER
29604: AND
29605: IFTRUE 29627
29607: PUSH
29608: LD_VAR 0 1
29612: PPUSH
29613: LD_VAR 0 10
29617: PPUSH
29618: CALL_OW 296
29622: PUSH
29623: LD_INT 12
29625: GREATER
29626: OR
29627: IFFALSE 29631
// exit ;
29629: GO 29986
// missile := [ 1 ] ;
29631: LD_ADDR_VAR 0 14
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: EMPTY
29640: LIST
29641: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29642: LD_VAR 0 9
29646: PPUSH
29647: LD_VAR 0 12
29651: PPUSH
29652: CALL_OW 325
29656: IFFALSE 29685
// missile := Replace ( missile , missile + 1 , 2 ) ;
29658: LD_ADDR_VAR 0 14
29662: PUSH
29663: LD_VAR 0 14
29667: PPUSH
29668: LD_VAR 0 14
29672: PUSH
29673: LD_INT 1
29675: PLUS
29676: PPUSH
29677: LD_INT 2
29679: PPUSH
29680: CALL_OW 1
29684: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29685: LD_VAR 0 9
29689: PPUSH
29690: LD_VAR 0 13
29694: PPUSH
29695: CALL_OW 325
29699: IFFALSE 29723
29701: PUSH
29702: LD_VAR 0 10
29706: PPUSH
29707: CALL_OW 255
29711: PPUSH
29712: LD_VAR 0 13
29716: PPUSH
29717: CALL_OW 325
29721: NOT
29722: AND
29723: IFFALSE 29752
// missile := Replace ( missile , missile + 1 , 3 ) ;
29725: LD_ADDR_VAR 0 14
29729: PUSH
29730: LD_VAR 0 14
29734: PPUSH
29735: LD_VAR 0 14
29739: PUSH
29740: LD_INT 1
29742: PLUS
29743: PPUSH
29744: LD_INT 3
29746: PPUSH
29747: CALL_OW 1
29751: ST_TO_ADDR
// if missile < 2 then
29752: LD_VAR 0 14
29756: PUSH
29757: LD_INT 2
29759: LESS
29760: IFFALSE 29764
// exit ;
29762: GO 29986
// x := GetX ( enemy ) ;
29764: LD_ADDR_VAR 0 4
29768: PUSH
29769: LD_VAR 0 10
29773: PPUSH
29774: CALL_OW 250
29778: ST_TO_ADDR
// y := GetY ( enemy ) ;
29779: LD_ADDR_VAR 0 5
29783: PUSH
29784: LD_VAR 0 10
29788: PPUSH
29789: CALL_OW 251
29793: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29794: LD_ADDR_VAR 0 6
29798: PUSH
29799: LD_VAR 0 4
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PPUSH
29808: LD_INT 1
29810: PPUSH
29811: CALL_OW 12
29815: PLUS
29816: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29817: LD_ADDR_VAR 0 7
29821: PUSH
29822: LD_VAR 0 5
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PPUSH
29831: LD_INT 1
29833: PPUSH
29834: CALL_OW 12
29838: PLUS
29839: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29840: LD_VAR 0 6
29844: PPUSH
29845: LD_VAR 0 7
29849: PPUSH
29850: CALL_OW 488
29854: NOT
29855: IFFALSE 29877
// begin _x := x ;
29857: LD_ADDR_VAR 0 6
29861: PUSH
29862: LD_VAR 0 4
29866: ST_TO_ADDR
// _y := y ;
29867: LD_ADDR_VAR 0 7
29871: PUSH
29872: LD_VAR 0 5
29876: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29877: LD_ADDR_VAR 0 3
29881: PUSH
29882: LD_INT 1
29884: PPUSH
29885: LD_VAR 0 14
29889: PPUSH
29890: CALL_OW 12
29894: ST_TO_ADDR
// case i of 1 :
29895: LD_VAR 0 3
29899: PUSH
29900: LD_INT 1
29902: DOUBLE
29903: EQUAL
29904: IFTRUE 29908
29906: GO 29925
29908: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29909: LD_VAR 0 1
29913: PPUSH
29914: LD_VAR 0 10
29918: PPUSH
29919: CALL_OW 115
29923: GO 29986
29925: LD_INT 2
29927: DOUBLE
29928: EQUAL
29929: IFTRUE 29933
29931: GO 29955
29933: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29934: LD_VAR 0 1
29938: PPUSH
29939: LD_VAR 0 6
29943: PPUSH
29944: LD_VAR 0 7
29948: PPUSH
29949: CALL_OW 153
29953: GO 29986
29955: LD_INT 3
29957: DOUBLE
29958: EQUAL
29959: IFTRUE 29963
29961: GO 29985
29963: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29964: LD_VAR 0 1
29968: PPUSH
29969: LD_VAR 0 6
29973: PPUSH
29974: LD_VAR 0 7
29978: PPUSH
29979: CALL_OW 154
29983: GO 29986
29985: POP
// end ;
29986: LD_VAR 0 2
29990: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29991: LD_INT 0
29993: PPUSH
29994: PPUSH
29995: PPUSH
29996: PPUSH
29997: PPUSH
29998: PPUSH
// if not unit or not building then
29999: LD_VAR 0 1
30003: NOT
30004: IFTRUE 30013
30006: PUSH
30007: LD_VAR 0 2
30011: NOT
30012: OR
30013: IFFALSE 30017
// exit ;
30015: GO 30175
// x := GetX ( building ) ;
30017: LD_ADDR_VAR 0 5
30021: PUSH
30022: LD_VAR 0 2
30026: PPUSH
30027: CALL_OW 250
30031: ST_TO_ADDR
// y := GetY ( building ) ;
30032: LD_ADDR_VAR 0 6
30036: PUSH
30037: LD_VAR 0 2
30041: PPUSH
30042: CALL_OW 251
30046: ST_TO_ADDR
// for i := 0 to 5 do
30047: LD_ADDR_VAR 0 4
30051: PUSH
30052: DOUBLE
30053: LD_INT 0
30055: DEC
30056: ST_TO_ADDR
30057: LD_INT 5
30059: PUSH
30060: FOR_TO
30061: IFFALSE 30173
// begin _x := ShiftX ( x , i , 3 ) ;
30063: LD_ADDR_VAR 0 7
30067: PUSH
30068: LD_VAR 0 5
30072: PPUSH
30073: LD_VAR 0 4
30077: PPUSH
30078: LD_INT 3
30080: PPUSH
30081: CALL_OW 272
30085: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30086: LD_ADDR_VAR 0 8
30090: PUSH
30091: LD_VAR 0 6
30095: PPUSH
30096: LD_VAR 0 4
30100: PPUSH
30101: LD_INT 3
30103: PPUSH
30104: CALL_OW 273
30108: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30109: LD_VAR 0 7
30113: PPUSH
30114: LD_VAR 0 8
30118: PPUSH
30119: CALL_OW 488
30123: NOT
30124: IFFALSE 30128
// continue ;
30126: GO 30060
// if HexInfo ( _x , _y ) = 0 then
30128: LD_VAR 0 7
30132: PPUSH
30133: LD_VAR 0 8
30137: PPUSH
30138: CALL_OW 428
30142: PUSH
30143: LD_INT 0
30145: EQUAL
30146: IFFALSE 30171
// begin ComMoveXY ( unit , _x , _y ) ;
30148: LD_VAR 0 1
30152: PPUSH
30153: LD_VAR 0 7
30157: PPUSH
30158: LD_VAR 0 8
30162: PPUSH
30163: CALL_OW 111
// exit ;
30167: POP
30168: POP
30169: GO 30175
// end ; end ;
30171: GO 30060
30173: POP
30174: POP
// end ;
30175: LD_VAR 0 3
30179: RET
// export function ScanBase ( side , base_area ) ; begin
30180: LD_INT 0
30182: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30183: LD_ADDR_VAR 0 3
30187: PUSH
30188: LD_VAR 0 2
30192: PPUSH
30193: LD_INT 81
30195: PUSH
30196: LD_VAR 0 1
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PPUSH
30205: CALL_OW 70
30209: ST_TO_ADDR
// end ;
30210: LD_VAR 0 3
30214: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30215: LD_INT 0
30217: PPUSH
30218: PPUSH
30219: PPUSH
30220: PPUSH
// result := false ;
30221: LD_ADDR_VAR 0 2
30225: PUSH
30226: LD_INT 0
30228: ST_TO_ADDR
// side := GetSide ( unit ) ;
30229: LD_ADDR_VAR 0 3
30233: PUSH
30234: LD_VAR 0 1
30238: PPUSH
30239: CALL_OW 255
30243: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30244: LD_ADDR_VAR 0 4
30248: PUSH
30249: LD_VAR 0 1
30253: PPUSH
30254: CALL_OW 248
30258: ST_TO_ADDR
// case nat of 1 :
30259: LD_VAR 0 4
30263: PUSH
30264: LD_INT 1
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 30283
30272: POP
// tech := tech_lassight ; 2 :
30273: LD_ADDR_VAR 0 5
30277: PUSH
30278: LD_INT 12
30280: ST_TO_ADDR
30281: GO 30322
30283: LD_INT 2
30285: DOUBLE
30286: EQUAL
30287: IFTRUE 30291
30289: GO 30302
30291: POP
// tech := tech_mortar ; 3 :
30292: LD_ADDR_VAR 0 5
30296: PUSH
30297: LD_INT 41
30299: ST_TO_ADDR
30300: GO 30322
30302: LD_INT 3
30304: DOUBLE
30305: EQUAL
30306: IFTRUE 30310
30308: GO 30321
30310: POP
// tech := tech_bazooka ; end ;
30311: LD_ADDR_VAR 0 5
30315: PUSH
30316: LD_INT 44
30318: ST_TO_ADDR
30319: GO 30322
30321: POP
// if Researched ( side , tech ) then
30322: LD_VAR 0 3
30326: PPUSH
30327: LD_VAR 0 5
30331: PPUSH
30332: CALL_OW 325
30336: IFFALSE 30363
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30338: LD_ADDR_VAR 0 2
30342: PUSH
30343: LD_INT 5
30345: PUSH
30346: LD_INT 8
30348: PUSH
30349: LD_INT 9
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: LIST
30356: PUSH
30357: LD_VAR 0 4
30361: ARRAY
30362: ST_TO_ADDR
// end ;
30363: LD_VAR 0 2
30367: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30368: LD_INT 0
30370: PPUSH
30371: PPUSH
30372: PPUSH
// if not mines then
30373: LD_VAR 0 2
30377: NOT
30378: IFFALSE 30382
// exit ;
30380: GO 30526
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30382: LD_ADDR_VAR 0 5
30386: PUSH
30387: LD_INT 81
30389: PUSH
30390: LD_VAR 0 1
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 3
30401: PUSH
30402: LD_INT 21
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PPUSH
30420: CALL_OW 69
30424: ST_TO_ADDR
// for i in mines do
30425: LD_ADDR_VAR 0 4
30429: PUSH
30430: LD_VAR 0 2
30434: PUSH
30435: FOR_IN
30436: IFFALSE 30524
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30438: LD_VAR 0 4
30442: PUSH
30443: LD_INT 1
30445: ARRAY
30446: PPUSH
30447: LD_VAR 0 4
30451: PUSH
30452: LD_INT 2
30454: ARRAY
30455: PPUSH
30456: CALL_OW 458
30460: NOT
30461: IFFALSE 30465
// continue ;
30463: GO 30435
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30465: LD_VAR 0 4
30469: PUSH
30470: LD_INT 1
30472: ARRAY
30473: PPUSH
30474: LD_VAR 0 4
30478: PUSH
30479: LD_INT 2
30481: ARRAY
30482: PPUSH
30483: CALL_OW 428
30487: PUSH
30488: LD_VAR 0 5
30492: IN
30493: IFFALSE 30522
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30495: LD_VAR 0 4
30499: PUSH
30500: LD_INT 1
30502: ARRAY
30503: PPUSH
30504: LD_VAR 0 4
30508: PUSH
30509: LD_INT 2
30511: ARRAY
30512: PPUSH
30513: LD_VAR 0 1
30517: PPUSH
30518: CALL_OW 456
// end ;
30522: GO 30435
30524: POP
30525: POP
// end ;
30526: LD_VAR 0 3
30530: RET
// export function Count ( array ) ; begin
30531: LD_INT 0
30533: PPUSH
// result := array + 0 ;
30534: LD_ADDR_VAR 0 2
30538: PUSH
30539: LD_VAR 0 1
30543: PUSH
30544: LD_INT 0
30546: PLUS
30547: ST_TO_ADDR
// end ;
30548: LD_VAR 0 2
30552: RET
// export function IsEmpty ( building ) ; begin
30553: LD_INT 0
30555: PPUSH
// if not building then
30556: LD_VAR 0 1
30560: NOT
30561: IFFALSE 30565
// exit ;
30563: GO 30608
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30565: LD_ADDR_VAR 0 2
30569: PUSH
30570: LD_VAR 0 1
30574: PUSH
30575: LD_INT 22
30577: PUSH
30578: LD_VAR 0 1
30582: PPUSH
30583: CALL_OW 255
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 58
30594: PUSH
30595: EMPTY
30596: LIST
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PPUSH
30602: CALL_OW 69
30606: IN
30607: ST_TO_ADDR
// end ;
30608: LD_VAR 0 2
30612: RET
// export function IsNotFull ( building ) ; var places ; begin
30613: LD_INT 0
30615: PPUSH
30616: PPUSH
// if not building then
30617: LD_VAR 0 1
30621: NOT
30622: IFFALSE 30626
// exit ;
30624: GO 30654
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30626: LD_ADDR_VAR 0 2
30630: PUSH
30631: LD_VAR 0 1
30635: PPUSH
30636: LD_INT 3
30638: PUSH
30639: LD_INT 62
30641: PUSH
30642: EMPTY
30643: LIST
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PPUSH
30649: CALL_OW 72
30653: ST_TO_ADDR
// end ;
30654: LD_VAR 0 2
30658: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30659: LD_INT 0
30661: PPUSH
30662: PPUSH
30663: PPUSH
30664: PPUSH
// tmp := [ ] ;
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: EMPTY
30671: ST_TO_ADDR
// list := [ ] ;
30672: LD_ADDR_VAR 0 5
30676: PUSH
30677: EMPTY
30678: ST_TO_ADDR
// for i = 16 to 25 do
30679: LD_ADDR_VAR 0 4
30683: PUSH
30684: DOUBLE
30685: LD_INT 16
30687: DEC
30688: ST_TO_ADDR
30689: LD_INT 25
30691: PUSH
30692: FOR_TO
30693: IFFALSE 30766
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30695: LD_ADDR_VAR 0 3
30699: PUSH
30700: LD_VAR 0 3
30704: PUSH
30705: LD_INT 22
30707: PUSH
30708: LD_VAR 0 1
30712: PPUSH
30713: CALL_OW 255
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 91
30724: PUSH
30725: LD_VAR 0 1
30729: PUSH
30730: LD_INT 6
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 30
30740: PUSH
30741: LD_VAR 0 4
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: LIST
30754: PUSH
30755: EMPTY
30756: LIST
30757: PPUSH
30758: CALL_OW 69
30762: ADD
30763: ST_TO_ADDR
30764: GO 30692
30766: POP
30767: POP
// for i = 1 to tmp do
30768: LD_ADDR_VAR 0 4
30772: PUSH
30773: DOUBLE
30774: LD_INT 1
30776: DEC
30777: ST_TO_ADDR
30778: LD_VAR 0 3
30782: PUSH
30783: FOR_TO
30784: IFFALSE 30872
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30786: LD_ADDR_VAR 0 5
30790: PUSH
30791: LD_VAR 0 5
30795: PUSH
30796: LD_VAR 0 3
30800: PUSH
30801: LD_VAR 0 4
30805: ARRAY
30806: PPUSH
30807: CALL_OW 266
30811: PUSH
30812: LD_VAR 0 3
30816: PUSH
30817: LD_VAR 0 4
30821: ARRAY
30822: PPUSH
30823: CALL_OW 250
30827: PUSH
30828: LD_VAR 0 3
30832: PUSH
30833: LD_VAR 0 4
30837: ARRAY
30838: PPUSH
30839: CALL_OW 251
30843: PUSH
30844: LD_VAR 0 3
30848: PUSH
30849: LD_VAR 0 4
30853: ARRAY
30854: PPUSH
30855: CALL_OW 254
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: PUSH
30866: EMPTY
30867: LIST
30868: ADD
30869: ST_TO_ADDR
30870: GO 30783
30872: POP
30873: POP
// result := list ;
30874: LD_ADDR_VAR 0 2
30878: PUSH
30879: LD_VAR 0 5
30883: ST_TO_ADDR
// end ;
30884: LD_VAR 0 2
30888: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30889: LD_INT 0
30891: PPUSH
30892: PPUSH
30893: PPUSH
30894: PPUSH
30895: PPUSH
30896: PPUSH
30897: PPUSH
// if not factory then
30898: LD_VAR 0 1
30902: NOT
30903: IFFALSE 30907
// exit ;
30905: GO 31510
// if control = control_apeman then
30907: LD_VAR 0 4
30911: PUSH
30912: LD_INT 5
30914: EQUAL
30915: IFFALSE 31024
// begin tmp := UnitsInside ( factory ) ;
30917: LD_ADDR_VAR 0 8
30921: PUSH
30922: LD_VAR 0 1
30926: PPUSH
30927: CALL_OW 313
30931: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30932: LD_VAR 0 8
30936: PPUSH
30937: LD_INT 25
30939: PUSH
30940: LD_INT 12
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PPUSH
30947: CALL_OW 72
30951: NOT
30952: IFFALSE 30962
// control := control_manual ;
30954: LD_ADDR_VAR 0 4
30958: PUSH
30959: LD_INT 1
30961: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30962: LD_ADDR_VAR 0 8
30966: PUSH
30967: LD_VAR 0 1
30971: PPUSH
30972: CALL 30659 0 1
30976: ST_TO_ADDR
// if tmp then
30977: LD_VAR 0 8
30981: IFFALSE 31024
// begin for i in tmp do
30983: LD_ADDR_VAR 0 7
30987: PUSH
30988: LD_VAR 0 8
30992: PUSH
30993: FOR_IN
30994: IFFALSE 31022
// if i [ 1 ] = b_ext_radio then
30996: LD_VAR 0 7
31000: PUSH
31001: LD_INT 1
31003: ARRAY
31004: PUSH
31005: LD_INT 22
31007: EQUAL
31008: IFFALSE 31020
// begin control := control_remote ;
31010: LD_ADDR_VAR 0 4
31014: PUSH
31015: LD_INT 2
31017: ST_TO_ADDR
// break ;
31018: GO 31022
// end ;
31020: GO 30993
31022: POP
31023: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31024: LD_VAR 0 1
31028: PPUSH
31029: LD_VAR 0 2
31033: PPUSH
31034: LD_VAR 0 3
31038: PPUSH
31039: LD_VAR 0 4
31043: PPUSH
31044: LD_VAR 0 5
31048: PPUSH
31049: CALL_OW 448
31053: IFFALSE 31088
// begin result := [ chassis , engine , control , weapon ] ;
31055: LD_ADDR_VAR 0 6
31059: PUSH
31060: LD_VAR 0 2
31064: PUSH
31065: LD_VAR 0 3
31069: PUSH
31070: LD_VAR 0 4
31074: PUSH
31075: LD_VAR 0 5
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: ST_TO_ADDR
// exit ;
31086: GO 31510
// end ; _chassis := AvailableChassisList ( factory ) ;
31088: LD_ADDR_VAR 0 9
31092: PUSH
31093: LD_VAR 0 1
31097: PPUSH
31098: CALL_OW 475
31102: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31103: LD_ADDR_VAR 0 11
31107: PUSH
31108: LD_VAR 0 1
31112: PPUSH
31113: CALL_OW 476
31117: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31118: LD_ADDR_VAR 0 12
31122: PUSH
31123: LD_VAR 0 1
31127: PPUSH
31128: CALL_OW 477
31132: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31133: LD_ADDR_VAR 0 10
31137: PUSH
31138: LD_VAR 0 1
31142: PPUSH
31143: CALL_OW 478
31147: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31148: LD_VAR 0 9
31152: NOT
31153: IFTRUE 31162
31155: PUSH
31156: LD_VAR 0 11
31160: NOT
31161: OR
31162: IFTRUE 31171
31164: PUSH
31165: LD_VAR 0 12
31169: NOT
31170: OR
31171: IFTRUE 31180
31173: PUSH
31174: LD_VAR 0 10
31178: NOT
31179: OR
31180: IFFALSE 31215
// begin result := [ chassis , engine , control , weapon ] ;
31182: LD_ADDR_VAR 0 6
31186: PUSH
31187: LD_VAR 0 2
31191: PUSH
31192: LD_VAR 0 3
31196: PUSH
31197: LD_VAR 0 4
31201: PUSH
31202: LD_VAR 0 5
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: ST_TO_ADDR
// exit ;
31213: GO 31510
// end ; if not chassis in _chassis then
31215: LD_VAR 0 2
31219: PUSH
31220: LD_VAR 0 9
31224: IN
31225: NOT
31226: IFFALSE 31252
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31228: LD_ADDR_VAR 0 2
31232: PUSH
31233: LD_VAR 0 9
31237: PUSH
31238: LD_INT 1
31240: PPUSH
31241: LD_VAR 0 9
31245: PPUSH
31246: CALL_OW 12
31250: ARRAY
31251: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31252: LD_VAR 0 2
31256: PPUSH
31257: LD_VAR 0 3
31261: PPUSH
31262: CALL 31515 0 2
31266: NOT
31267: IFFALSE 31328
// repeat engine := _engine [ 1 ] ;
31269: LD_ADDR_VAR 0 3
31273: PUSH
31274: LD_VAR 0 11
31278: PUSH
31279: LD_INT 1
31281: ARRAY
31282: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31283: LD_ADDR_VAR 0 11
31287: PUSH
31288: LD_VAR 0 11
31292: PPUSH
31293: LD_INT 1
31295: PPUSH
31296: CALL_OW 3
31300: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31301: LD_VAR 0 2
31305: PPUSH
31306: LD_VAR 0 3
31310: PPUSH
31311: CALL 31515 0 2
31315: IFTRUE 31326
31317: PUSH
31318: LD_VAR 0 11
31322: PUSH
31323: EMPTY
31324: EQUAL
31325: OR
31326: IFFALSE 31269
// if not control in _control then
31328: LD_VAR 0 4
31332: PUSH
31333: LD_VAR 0 12
31337: IN
31338: NOT
31339: IFFALSE 31365
// control := _control [ rand ( 1 , _control ) ] ;
31341: LD_ADDR_VAR 0 4
31345: PUSH
31346: LD_VAR 0 12
31350: PUSH
31351: LD_INT 1
31353: PPUSH
31354: LD_VAR 0 12
31358: PPUSH
31359: CALL_OW 12
31363: ARRAY
31364: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31365: LD_VAR 0 2
31369: PPUSH
31370: LD_VAR 0 5
31374: PPUSH
31375: CALL 31737 0 2
31379: NOT
31380: IFFALSE 31441
// repeat weapon := _weapon [ 1 ] ;
31382: LD_ADDR_VAR 0 5
31386: PUSH
31387: LD_VAR 0 10
31391: PUSH
31392: LD_INT 1
31394: ARRAY
31395: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31396: LD_ADDR_VAR 0 10
31400: PUSH
31401: LD_VAR 0 10
31405: PPUSH
31406: LD_INT 1
31408: PPUSH
31409: CALL_OW 3
31413: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31414: LD_VAR 0 2
31418: PPUSH
31419: LD_VAR 0 5
31423: PPUSH
31424: CALL 31737 0 2
31428: IFTRUE 31439
31430: PUSH
31431: LD_VAR 0 10
31435: PUSH
31436: EMPTY
31437: EQUAL
31438: OR
31439: IFFALSE 31382
// result := [ ] ;
31441: LD_ADDR_VAR 0 6
31445: PUSH
31446: EMPTY
31447: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31448: LD_VAR 0 1
31452: PPUSH
31453: LD_VAR 0 2
31457: PPUSH
31458: LD_VAR 0 3
31462: PPUSH
31463: LD_VAR 0 4
31467: PPUSH
31468: LD_VAR 0 5
31472: PPUSH
31473: CALL_OW 448
31477: IFFALSE 31510
// result := [ chassis , engine , control , weapon ] ;
31479: LD_ADDR_VAR 0 6
31483: PUSH
31484: LD_VAR 0 2
31488: PUSH
31489: LD_VAR 0 3
31493: PUSH
31494: LD_VAR 0 4
31498: PUSH
31499: LD_VAR 0 5
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: ST_TO_ADDR
// end ;
31510: LD_VAR 0 6
31514: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31515: LD_INT 0
31517: PPUSH
// if not chassis or not engine then
31518: LD_VAR 0 1
31522: NOT
31523: IFTRUE 31532
31525: PUSH
31526: LD_VAR 0 2
31530: NOT
31531: OR
31532: IFFALSE 31536
// exit ;
31534: GO 31732
// case engine of engine_solar :
31536: LD_VAR 0 2
31540: PUSH
31541: LD_INT 2
31543: DOUBLE
31544: EQUAL
31545: IFTRUE 31549
31547: GO 31587
31549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31550: LD_ADDR_VAR 0 3
31554: PUSH
31555: LD_INT 11
31557: PUSH
31558: LD_INT 12
31560: PUSH
31561: LD_INT 13
31563: PUSH
31564: LD_INT 14
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: LD_INT 2
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: ST_TO_ADDR
31585: GO 31716
31587: LD_INT 1
31589: DOUBLE
31590: EQUAL
31591: IFTRUE 31595
31593: GO 31657
31595: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31596: LD_ADDR_VAR 0 3
31600: PUSH
31601: LD_INT 11
31603: PUSH
31604: LD_INT 12
31606: PUSH
31607: LD_INT 13
31609: PUSH
31610: LD_INT 14
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: LD_INT 3
31621: PUSH
31622: LD_INT 4
31624: PUSH
31625: LD_INT 5
31627: PUSH
31628: LD_INT 21
31630: PUSH
31631: LD_INT 23
31633: PUSH
31634: LD_INT 22
31636: PUSH
31637: LD_INT 24
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: ST_TO_ADDR
31655: GO 31716
31657: LD_INT 3
31659: DOUBLE
31660: EQUAL
31661: IFTRUE 31665
31663: GO 31715
31665: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31666: LD_ADDR_VAR 0 3
31670: PUSH
31671: LD_INT 13
31673: PUSH
31674: LD_INT 14
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: LD_INT 3
31682: PUSH
31683: LD_INT 4
31685: PUSH
31686: LD_INT 5
31688: PUSH
31689: LD_INT 21
31691: PUSH
31692: LD_INT 22
31694: PUSH
31695: LD_INT 23
31697: PUSH
31698: LD_INT 24
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: ST_TO_ADDR
31713: GO 31716
31715: POP
// result := ( chassis in result ) ;
31716: LD_ADDR_VAR 0 3
31720: PUSH
31721: LD_VAR 0 1
31725: PUSH
31726: LD_VAR 0 3
31730: IN
31731: ST_TO_ADDR
// end ;
31732: LD_VAR 0 3
31736: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31737: LD_INT 0
31739: PPUSH
// if not chassis or not weapon then
31740: LD_VAR 0 1
31744: NOT
31745: IFTRUE 31754
31747: PUSH
31748: LD_VAR 0 2
31752: NOT
31753: OR
31754: IFFALSE 31758
// exit ;
31756: GO 32852
// case weapon of us_machine_gun :
31758: LD_VAR 0 2
31762: PUSH
31763: LD_INT 2
31765: DOUBLE
31766: EQUAL
31767: IFTRUE 31771
31769: GO 31801
31771: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31772: LD_ADDR_VAR 0 3
31776: PUSH
31777: LD_INT 1
31779: PUSH
31780: LD_INT 2
31782: PUSH
31783: LD_INT 3
31785: PUSH
31786: LD_INT 4
31788: PUSH
31789: LD_INT 5
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: ST_TO_ADDR
31799: GO 32836
31801: LD_INT 3
31803: DOUBLE
31804: EQUAL
31805: IFTRUE 31809
31807: GO 31839
31809: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31810: LD_ADDR_VAR 0 3
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: LD_INT 2
31820: PUSH
31821: LD_INT 3
31823: PUSH
31824: LD_INT 4
31826: PUSH
31827: LD_INT 5
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: ST_TO_ADDR
31837: GO 32836
31839: LD_INT 11
31841: DOUBLE
31842: EQUAL
31843: IFTRUE 31847
31845: GO 31877
31847: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31848: LD_ADDR_VAR 0 3
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: LD_INT 2
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: LD_INT 4
31864: PUSH
31865: LD_INT 5
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: ST_TO_ADDR
31875: GO 32836
31877: LD_INT 4
31879: DOUBLE
31880: EQUAL
31881: IFTRUE 31885
31883: GO 31911
31885: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31886: LD_ADDR_VAR 0 3
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 3
31896: PUSH
31897: LD_INT 4
31899: PUSH
31900: LD_INT 5
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: ST_TO_ADDR
31909: GO 32836
31911: LD_INT 5
31913: DOUBLE
31914: EQUAL
31915: IFTRUE 31919
31917: GO 31945
31919: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31920: LD_ADDR_VAR 0 3
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: LD_INT 3
31930: PUSH
31931: LD_INT 4
31933: PUSH
31934: LD_INT 5
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: ST_TO_ADDR
31943: GO 32836
31945: LD_INT 9
31947: DOUBLE
31948: EQUAL
31949: IFTRUE 31953
31951: GO 31979
31953: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31954: LD_ADDR_VAR 0 3
31958: PUSH
31959: LD_INT 2
31961: PUSH
31962: LD_INT 3
31964: PUSH
31965: LD_INT 4
31967: PUSH
31968: LD_INT 5
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: ST_TO_ADDR
31977: GO 32836
31979: LD_INT 7
31981: DOUBLE
31982: EQUAL
31983: IFTRUE 31987
31985: GO 32013
31987: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31988: LD_ADDR_VAR 0 3
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: LD_INT 3
31998: PUSH
31999: LD_INT 4
32001: PUSH
32002: LD_INT 5
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: ST_TO_ADDR
32011: GO 32836
32013: LD_INT 12
32015: DOUBLE
32016: EQUAL
32017: IFTRUE 32021
32019: GO 32047
32021: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32022: LD_ADDR_VAR 0 3
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: LD_INT 3
32032: PUSH
32033: LD_INT 4
32035: PUSH
32036: LD_INT 5
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: ST_TO_ADDR
32045: GO 32836
32047: LD_INT 13
32049: DOUBLE
32050: EQUAL
32051: IFTRUE 32055
32053: GO 32081
32055: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32056: LD_ADDR_VAR 0 3
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: LD_INT 4
32069: PUSH
32070: LD_INT 5
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: ST_TO_ADDR
32079: GO 32836
32081: LD_INT 14
32083: DOUBLE
32084: EQUAL
32085: IFTRUE 32089
32087: GO 32107
32089: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32090: LD_ADDR_VAR 0 3
32094: PUSH
32095: LD_INT 4
32097: PUSH
32098: LD_INT 5
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: ST_TO_ADDR
32105: GO 32836
32107: LD_INT 6
32109: DOUBLE
32110: EQUAL
32111: IFTRUE 32115
32113: GO 32133
32115: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32116: LD_ADDR_VAR 0 3
32120: PUSH
32121: LD_INT 4
32123: PUSH
32124: LD_INT 5
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: ST_TO_ADDR
32131: GO 32836
32133: LD_INT 10
32135: DOUBLE
32136: EQUAL
32137: IFTRUE 32141
32139: GO 32159
32141: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32142: LD_ADDR_VAR 0 3
32146: PUSH
32147: LD_INT 4
32149: PUSH
32150: LD_INT 5
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: ST_TO_ADDR
32157: GO 32836
32159: LD_INT 22
32161: DOUBLE
32162: EQUAL
32163: IFTRUE 32167
32165: GO 32193
32167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32168: LD_ADDR_VAR 0 3
32172: PUSH
32173: LD_INT 11
32175: PUSH
32176: LD_INT 12
32178: PUSH
32179: LD_INT 13
32181: PUSH
32182: LD_INT 14
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: ST_TO_ADDR
32191: GO 32836
32193: LD_INT 23
32195: DOUBLE
32196: EQUAL
32197: IFTRUE 32201
32199: GO 32227
32201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32202: LD_ADDR_VAR 0 3
32206: PUSH
32207: LD_INT 11
32209: PUSH
32210: LD_INT 12
32212: PUSH
32213: LD_INT 13
32215: PUSH
32216: LD_INT 14
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: ST_TO_ADDR
32225: GO 32836
32227: LD_INT 24
32229: DOUBLE
32230: EQUAL
32231: IFTRUE 32235
32233: GO 32261
32235: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32236: LD_ADDR_VAR 0 3
32240: PUSH
32241: LD_INT 11
32243: PUSH
32244: LD_INT 12
32246: PUSH
32247: LD_INT 13
32249: PUSH
32250: LD_INT 14
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: ST_TO_ADDR
32259: GO 32836
32261: LD_INT 30
32263: DOUBLE
32264: EQUAL
32265: IFTRUE 32269
32267: GO 32295
32269: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32270: LD_ADDR_VAR 0 3
32274: PUSH
32275: LD_INT 11
32277: PUSH
32278: LD_INT 12
32280: PUSH
32281: LD_INT 13
32283: PUSH
32284: LD_INT 14
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: ST_TO_ADDR
32293: GO 32836
32295: LD_INT 25
32297: DOUBLE
32298: EQUAL
32299: IFTRUE 32303
32301: GO 32321
32303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32304: LD_ADDR_VAR 0 3
32308: PUSH
32309: LD_INT 13
32311: PUSH
32312: LD_INT 14
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: ST_TO_ADDR
32319: GO 32836
32321: LD_INT 27
32323: DOUBLE
32324: EQUAL
32325: IFTRUE 32329
32327: GO 32347
32329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32330: LD_ADDR_VAR 0 3
32334: PUSH
32335: LD_INT 13
32337: PUSH
32338: LD_INT 14
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: ST_TO_ADDR
32345: GO 32836
32347: LD_INT 92
32349: DOUBLE
32350: EQUAL
32351: IFTRUE 32355
32353: GO 32381
32355: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32356: LD_ADDR_VAR 0 3
32360: PUSH
32361: LD_INT 11
32363: PUSH
32364: LD_INT 12
32366: PUSH
32367: LD_INT 13
32369: PUSH
32370: LD_INT 14
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: ST_TO_ADDR
32379: GO 32836
32381: LD_INT 28
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 32407
32389: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32390: LD_ADDR_VAR 0 3
32394: PUSH
32395: LD_INT 13
32397: PUSH
32398: LD_INT 14
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: ST_TO_ADDR
32405: GO 32836
32407: LD_INT 29
32409: DOUBLE
32410: EQUAL
32411: IFTRUE 32415
32413: GO 32433
32415: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32416: LD_ADDR_VAR 0 3
32420: PUSH
32421: LD_INT 13
32423: PUSH
32424: LD_INT 14
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: ST_TO_ADDR
32431: GO 32836
32433: LD_INT 31
32435: DOUBLE
32436: EQUAL
32437: IFTRUE 32441
32439: GO 32459
32441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32442: LD_ADDR_VAR 0 3
32446: PUSH
32447: LD_INT 13
32449: PUSH
32450: LD_INT 14
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: ST_TO_ADDR
32457: GO 32836
32459: LD_INT 26
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32485
32467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32468: LD_ADDR_VAR 0 3
32472: PUSH
32473: LD_INT 13
32475: PUSH
32476: LD_INT 14
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: ST_TO_ADDR
32483: GO 32836
32485: LD_INT 42
32487: DOUBLE
32488: EQUAL
32489: IFTRUE 32493
32491: GO 32519
32493: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32494: LD_ADDR_VAR 0 3
32498: PUSH
32499: LD_INT 21
32501: PUSH
32502: LD_INT 22
32504: PUSH
32505: LD_INT 23
32507: PUSH
32508: LD_INT 24
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: ST_TO_ADDR
32517: GO 32836
32519: LD_INT 43
32521: DOUBLE
32522: EQUAL
32523: IFTRUE 32527
32525: GO 32553
32527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32528: LD_ADDR_VAR 0 3
32532: PUSH
32533: LD_INT 21
32535: PUSH
32536: LD_INT 22
32538: PUSH
32539: LD_INT 23
32541: PUSH
32542: LD_INT 24
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: ST_TO_ADDR
32551: GO 32836
32553: LD_INT 44
32555: DOUBLE
32556: EQUAL
32557: IFTRUE 32561
32559: GO 32587
32561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32562: LD_ADDR_VAR 0 3
32566: PUSH
32567: LD_INT 21
32569: PUSH
32570: LD_INT 22
32572: PUSH
32573: LD_INT 23
32575: PUSH
32576: LD_INT 24
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: ST_TO_ADDR
32585: GO 32836
32587: LD_INT 45
32589: DOUBLE
32590: EQUAL
32591: IFTRUE 32595
32593: GO 32621
32595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32596: LD_ADDR_VAR 0 3
32600: PUSH
32601: LD_INT 21
32603: PUSH
32604: LD_INT 22
32606: PUSH
32607: LD_INT 23
32609: PUSH
32610: LD_INT 24
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: ST_TO_ADDR
32619: GO 32836
32621: LD_INT 49
32623: DOUBLE
32624: EQUAL
32625: IFTRUE 32629
32627: GO 32655
32629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32630: LD_ADDR_VAR 0 3
32634: PUSH
32635: LD_INT 21
32637: PUSH
32638: LD_INT 22
32640: PUSH
32641: LD_INT 23
32643: PUSH
32644: LD_INT 24
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
32653: GO 32836
32655: LD_INT 51
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 32689
32663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32664: LD_ADDR_VAR 0 3
32668: PUSH
32669: LD_INT 21
32671: PUSH
32672: LD_INT 22
32674: PUSH
32675: LD_INT 23
32677: PUSH
32678: LD_INT 24
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: ST_TO_ADDR
32687: GO 32836
32689: LD_INT 52
32691: DOUBLE
32692: EQUAL
32693: IFTRUE 32697
32695: GO 32723
32697: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32698: LD_ADDR_VAR 0 3
32702: PUSH
32703: LD_INT 21
32705: PUSH
32706: LD_INT 22
32708: PUSH
32709: LD_INT 23
32711: PUSH
32712: LD_INT 24
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: ST_TO_ADDR
32721: GO 32836
32723: LD_INT 53
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32749
32731: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32732: LD_ADDR_VAR 0 3
32736: PUSH
32737: LD_INT 23
32739: PUSH
32740: LD_INT 24
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: ST_TO_ADDR
32747: GO 32836
32749: LD_INT 46
32751: DOUBLE
32752: EQUAL
32753: IFTRUE 32757
32755: GO 32775
32757: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32758: LD_ADDR_VAR 0 3
32762: PUSH
32763: LD_INT 23
32765: PUSH
32766: LD_INT 24
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: ST_TO_ADDR
32773: GO 32836
32775: LD_INT 47
32777: DOUBLE
32778: EQUAL
32779: IFTRUE 32783
32781: GO 32801
32783: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
32784: LD_ADDR_VAR 0 3
32788: PUSH
32789: LD_INT 23
32791: PUSH
32792: LD_INT 24
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: ST_TO_ADDR
32799: GO 32836
32801: LD_INT 98
32803: DOUBLE
32804: EQUAL
32805: IFTRUE 32809
32807: GO 32835
32809: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32810: LD_ADDR_VAR 0 3
32814: PUSH
32815: LD_INT 21
32817: PUSH
32818: LD_INT 22
32820: PUSH
32821: LD_INT 23
32823: PUSH
32824: LD_INT 24
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: ST_TO_ADDR
32833: GO 32836
32835: POP
// result := ( chassis in result ) ;
32836: LD_ADDR_VAR 0 3
32840: PUSH
32841: LD_VAR 0 1
32845: PUSH
32846: LD_VAR 0 3
32850: IN
32851: ST_TO_ADDR
// end ;
32852: LD_VAR 0 3
32856: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32857: LD_INT 0
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
32864: PPUSH
32865: PPUSH
// result := array ;
32866: LD_ADDR_VAR 0 5
32870: PUSH
32871: LD_VAR 0 1
32875: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32876: LD_VAR 0 1
32880: NOT
32881: IFTRUE 32890
32883: PUSH
32884: LD_VAR 0 2
32888: NOT
32889: OR
32890: IFTRUE 32899
32892: PUSH
32893: LD_VAR 0 3
32897: NOT
32898: OR
32899: IFTRUE 32913
32901: PUSH
32902: LD_VAR 0 2
32906: PUSH
32907: LD_VAR 0 1
32911: GREATER
32912: OR
32913: IFTRUE 32927
32915: PUSH
32916: LD_VAR 0 3
32920: PUSH
32921: LD_VAR 0 1
32925: GREATER
32926: OR
32927: IFFALSE 32931
// exit ;
32929: GO 33227
// if direction then
32931: LD_VAR 0 4
32935: IFFALSE 32999
// begin d := 1 ;
32937: LD_ADDR_VAR 0 9
32941: PUSH
32942: LD_INT 1
32944: ST_TO_ADDR
// if i_from > i_to then
32945: LD_VAR 0 2
32949: PUSH
32950: LD_VAR 0 3
32954: GREATER
32955: IFFALSE 32981
// length := ( array - i_from ) + i_to else
32957: LD_ADDR_VAR 0 11
32961: PUSH
32962: LD_VAR 0 1
32966: PUSH
32967: LD_VAR 0 2
32971: MINUS
32972: PUSH
32973: LD_VAR 0 3
32977: PLUS
32978: ST_TO_ADDR
32979: GO 32997
// length := i_to - i_from ;
32981: LD_ADDR_VAR 0 11
32985: PUSH
32986: LD_VAR 0 3
32990: PUSH
32991: LD_VAR 0 2
32995: MINUS
32996: ST_TO_ADDR
// end else
32997: GO 33060
// begin d := - 1 ;
32999: LD_ADDR_VAR 0 9
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: ST_TO_ADDR
// if i_from > i_to then
33008: LD_VAR 0 2
33012: PUSH
33013: LD_VAR 0 3
33017: GREATER
33018: IFFALSE 33038
// length := i_from - i_to else
33020: LD_ADDR_VAR 0 11
33024: PUSH
33025: LD_VAR 0 2
33029: PUSH
33030: LD_VAR 0 3
33034: MINUS
33035: ST_TO_ADDR
33036: GO 33060
// length := ( array - i_to ) + i_from ;
33038: LD_ADDR_VAR 0 11
33042: PUSH
33043: LD_VAR 0 1
33047: PUSH
33048: LD_VAR 0 3
33052: MINUS
33053: PUSH
33054: LD_VAR 0 2
33058: PLUS
33059: ST_TO_ADDR
// end ; if not length then
33060: LD_VAR 0 11
33064: NOT
33065: IFFALSE 33069
// exit ;
33067: GO 33227
// tmp := array ;
33069: LD_ADDR_VAR 0 10
33073: PUSH
33074: LD_VAR 0 1
33078: ST_TO_ADDR
// for i = 1 to length do
33079: LD_ADDR_VAR 0 6
33083: PUSH
33084: DOUBLE
33085: LD_INT 1
33087: DEC
33088: ST_TO_ADDR
33089: LD_VAR 0 11
33093: PUSH
33094: FOR_TO
33095: IFFALSE 33215
// begin for j = 1 to array do
33097: LD_ADDR_VAR 0 7
33101: PUSH
33102: DOUBLE
33103: LD_INT 1
33105: DEC
33106: ST_TO_ADDR
33107: LD_VAR 0 1
33111: PUSH
33112: FOR_TO
33113: IFFALSE 33201
// begin k := j + d ;
33115: LD_ADDR_VAR 0 8
33119: PUSH
33120: LD_VAR 0 7
33124: PUSH
33125: LD_VAR 0 9
33129: PLUS
33130: ST_TO_ADDR
// if k > array then
33131: LD_VAR 0 8
33135: PUSH
33136: LD_VAR 0 1
33140: GREATER
33141: IFFALSE 33151
// k := 1 ;
33143: LD_ADDR_VAR 0 8
33147: PUSH
33148: LD_INT 1
33150: ST_TO_ADDR
// if not k then
33151: LD_VAR 0 8
33155: NOT
33156: IFFALSE 33168
// k := array ;
33158: LD_ADDR_VAR 0 8
33162: PUSH
33163: LD_VAR 0 1
33167: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33168: LD_ADDR_VAR 0 10
33172: PUSH
33173: LD_VAR 0 10
33177: PPUSH
33178: LD_VAR 0 8
33182: PPUSH
33183: LD_VAR 0 1
33187: PUSH
33188: LD_VAR 0 7
33192: ARRAY
33193: PPUSH
33194: CALL_OW 1
33198: ST_TO_ADDR
// end ;
33199: GO 33112
33201: POP
33202: POP
// array := tmp ;
33203: LD_ADDR_VAR 0 1
33207: PUSH
33208: LD_VAR 0 10
33212: ST_TO_ADDR
// end ;
33213: GO 33094
33215: POP
33216: POP
// result := array ;
33217: LD_ADDR_VAR 0 5
33221: PUSH
33222: LD_VAR 0 1
33226: ST_TO_ADDR
// end ;
33227: LD_VAR 0 5
33231: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33232: LD_INT 0
33234: PPUSH
33235: PPUSH
// result := 0 ;
33236: LD_ADDR_VAR 0 3
33240: PUSH
33241: LD_INT 0
33243: ST_TO_ADDR
// if not array or not value in array then
33244: LD_VAR 0 1
33248: NOT
33249: IFTRUE 33264
33251: PUSH
33252: LD_VAR 0 2
33256: PUSH
33257: LD_VAR 0 1
33261: IN
33262: NOT
33263: OR
33264: IFFALSE 33268
// exit ;
33266: GO 33322
// for i = 1 to array do
33268: LD_ADDR_VAR 0 4
33272: PUSH
33273: DOUBLE
33274: LD_INT 1
33276: DEC
33277: ST_TO_ADDR
33278: LD_VAR 0 1
33282: PUSH
33283: FOR_TO
33284: IFFALSE 33320
// if value = array [ i ] then
33286: LD_VAR 0 2
33290: PUSH
33291: LD_VAR 0 1
33295: PUSH
33296: LD_VAR 0 4
33300: ARRAY
33301: EQUAL
33302: IFFALSE 33318
// begin result := i ;
33304: LD_ADDR_VAR 0 3
33308: PUSH
33309: LD_VAR 0 4
33313: ST_TO_ADDR
// exit ;
33314: POP
33315: POP
33316: GO 33322
// end ;
33318: GO 33283
33320: POP
33321: POP
// end ;
33322: LD_VAR 0 3
33326: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33327: LD_INT 0
33329: PPUSH
// vc_chassis := chassis ;
33330: LD_ADDR_OWVAR 37
33334: PUSH
33335: LD_VAR 0 1
33339: ST_TO_ADDR
// vc_engine := engine ;
33340: LD_ADDR_OWVAR 39
33344: PUSH
33345: LD_VAR 0 2
33349: ST_TO_ADDR
// vc_control := control ;
33350: LD_ADDR_OWVAR 38
33354: PUSH
33355: LD_VAR 0 3
33359: ST_TO_ADDR
// vc_weapon := weapon ;
33360: LD_ADDR_OWVAR 40
33364: PUSH
33365: LD_VAR 0 4
33369: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33370: LD_ADDR_OWVAR 41
33374: PUSH
33375: LD_VAR 0 5
33379: ST_TO_ADDR
// end ;
33380: LD_VAR 0 6
33384: RET
// export function WantPlant ( unit ) ; var task ; begin
33385: LD_INT 0
33387: PPUSH
33388: PPUSH
// result := false ;
33389: LD_ADDR_VAR 0 2
33393: PUSH
33394: LD_INT 0
33396: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33397: LD_ADDR_VAR 0 3
33401: PUSH
33402: LD_VAR 0 1
33406: PPUSH
33407: CALL_OW 437
33411: ST_TO_ADDR
// if task then
33412: LD_VAR 0 3
33416: IFFALSE 33444
// if task [ 1 ] [ 1 ] = p then
33418: LD_VAR 0 3
33422: PUSH
33423: LD_INT 1
33425: ARRAY
33426: PUSH
33427: LD_INT 1
33429: ARRAY
33430: PUSH
33431: LD_STRING p
33433: EQUAL
33434: IFFALSE 33444
// result := true ;
33436: LD_ADDR_VAR 0 2
33440: PUSH
33441: LD_INT 1
33443: ST_TO_ADDR
// end ;
33444: LD_VAR 0 2
33448: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33449: LD_INT 0
33451: PPUSH
33452: PPUSH
33453: PPUSH
33454: PPUSH
// if pos < 1 then
33455: LD_VAR 0 2
33459: PUSH
33460: LD_INT 1
33462: LESS
33463: IFFALSE 33467
// exit ;
33465: GO 33770
// if pos = 1 then
33467: LD_VAR 0 2
33471: PUSH
33472: LD_INT 1
33474: EQUAL
33475: IFFALSE 33508
// result := Replace ( arr , pos [ 1 ] , value ) else
33477: LD_ADDR_VAR 0 4
33481: PUSH
33482: LD_VAR 0 1
33486: PPUSH
33487: LD_VAR 0 2
33491: PUSH
33492: LD_INT 1
33494: ARRAY
33495: PPUSH
33496: LD_VAR 0 3
33500: PPUSH
33501: CALL_OW 1
33505: ST_TO_ADDR
33506: GO 33770
// begin tmp := arr ;
33508: LD_ADDR_VAR 0 6
33512: PUSH
33513: LD_VAR 0 1
33517: ST_TO_ADDR
// s_arr := [ tmp ] ;
33518: LD_ADDR_VAR 0 7
33522: PUSH
33523: LD_VAR 0 6
33527: PUSH
33528: EMPTY
33529: LIST
33530: ST_TO_ADDR
// for i = 1 to pos - 1 do
33531: LD_ADDR_VAR 0 5
33535: PUSH
33536: DOUBLE
33537: LD_INT 1
33539: DEC
33540: ST_TO_ADDR
33541: LD_VAR 0 2
33545: PUSH
33546: LD_INT 1
33548: MINUS
33549: PUSH
33550: FOR_TO
33551: IFFALSE 33596
// begin tmp := tmp [ pos [ i ] ] ;
33553: LD_ADDR_VAR 0 6
33557: PUSH
33558: LD_VAR 0 6
33562: PUSH
33563: LD_VAR 0 2
33567: PUSH
33568: LD_VAR 0 5
33572: ARRAY
33573: ARRAY
33574: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33575: LD_ADDR_VAR 0 7
33579: PUSH
33580: LD_VAR 0 7
33584: PUSH
33585: LD_VAR 0 6
33589: PUSH
33590: EMPTY
33591: LIST
33592: ADD
33593: ST_TO_ADDR
// end ;
33594: GO 33550
33596: POP
33597: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33598: LD_ADDR_VAR 0 6
33602: PUSH
33603: LD_VAR 0 6
33607: PPUSH
33608: LD_VAR 0 2
33612: PUSH
33613: LD_VAR 0 2
33617: ARRAY
33618: PPUSH
33619: LD_VAR 0 3
33623: PPUSH
33624: CALL_OW 1
33628: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33629: LD_ADDR_VAR 0 7
33633: PUSH
33634: LD_VAR 0 7
33638: PPUSH
33639: LD_VAR 0 7
33643: PPUSH
33644: LD_VAR 0 6
33648: PPUSH
33649: CALL_OW 1
33653: ST_TO_ADDR
// for i = s_arr downto 2 do
33654: LD_ADDR_VAR 0 5
33658: PUSH
33659: DOUBLE
33660: LD_VAR 0 7
33664: INC
33665: ST_TO_ADDR
33666: LD_INT 2
33668: PUSH
33669: FOR_DOWNTO
33670: IFFALSE 33754
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33672: LD_ADDR_VAR 0 6
33676: PUSH
33677: LD_VAR 0 7
33681: PUSH
33682: LD_VAR 0 5
33686: PUSH
33687: LD_INT 1
33689: MINUS
33690: ARRAY
33691: PPUSH
33692: LD_VAR 0 2
33696: PUSH
33697: LD_VAR 0 5
33701: PUSH
33702: LD_INT 1
33704: MINUS
33705: ARRAY
33706: PPUSH
33707: LD_VAR 0 7
33711: PUSH
33712: LD_VAR 0 5
33716: ARRAY
33717: PPUSH
33718: CALL_OW 1
33722: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33723: LD_ADDR_VAR 0 7
33727: PUSH
33728: LD_VAR 0 7
33732: PPUSH
33733: LD_VAR 0 5
33737: PUSH
33738: LD_INT 1
33740: MINUS
33741: PPUSH
33742: LD_VAR 0 6
33746: PPUSH
33747: CALL_OW 1
33751: ST_TO_ADDR
// end ;
33752: GO 33669
33754: POP
33755: POP
// result := s_arr [ 1 ] ;
33756: LD_ADDR_VAR 0 4
33760: PUSH
33761: LD_VAR 0 7
33765: PUSH
33766: LD_INT 1
33768: ARRAY
33769: ST_TO_ADDR
// end ; end ;
33770: LD_VAR 0 4
33774: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33775: LD_INT 0
33777: PPUSH
33778: PPUSH
// if not list then
33779: LD_VAR 0 1
33783: NOT
33784: IFFALSE 33788
// exit ;
33786: GO 33879
// i := list [ pos1 ] ;
33788: LD_ADDR_VAR 0 5
33792: PUSH
33793: LD_VAR 0 1
33797: PUSH
33798: LD_VAR 0 2
33802: ARRAY
33803: ST_TO_ADDR
// if not i then
33804: LD_VAR 0 5
33808: NOT
33809: IFFALSE 33813
// exit ;
33811: GO 33879
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33813: LD_ADDR_VAR 0 1
33817: PUSH
33818: LD_VAR 0 1
33822: PPUSH
33823: LD_VAR 0 2
33827: PPUSH
33828: LD_VAR 0 1
33832: PUSH
33833: LD_VAR 0 3
33837: ARRAY
33838: PPUSH
33839: CALL_OW 1
33843: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33844: LD_ADDR_VAR 0 1
33848: PUSH
33849: LD_VAR 0 1
33853: PPUSH
33854: LD_VAR 0 3
33858: PPUSH
33859: LD_VAR 0 5
33863: PPUSH
33864: CALL_OW 1
33868: ST_TO_ADDR
// result := list ;
33869: LD_ADDR_VAR 0 4
33873: PUSH
33874: LD_VAR 0 1
33878: ST_TO_ADDR
// end ;
33879: LD_VAR 0 4
33883: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33884: LD_INT 0
33886: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33887: LD_ADDR_VAR 0 5
33891: PUSH
33892: LD_VAR 0 1
33896: PPUSH
33897: CALL_OW 250
33901: PPUSH
33902: LD_VAR 0 1
33906: PPUSH
33907: CALL_OW 251
33911: PPUSH
33912: LD_VAR 0 2
33916: PPUSH
33917: LD_VAR 0 3
33921: PPUSH
33922: LD_VAR 0 4
33926: PPUSH
33927: CALL 34309 0 5
33931: ST_TO_ADDR
// end ;
33932: LD_VAR 0 5
33936: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33937: LD_INT 0
33939: PPUSH
33940: PPUSH
33941: PPUSH
33942: PPUSH
// if not list or not unit then
33943: LD_VAR 0 2
33947: NOT
33948: IFTRUE 33957
33950: PUSH
33951: LD_VAR 0 1
33955: NOT
33956: OR
33957: IFFALSE 33961
// exit ;
33959: GO 34304
// result := [ ] ;
33961: LD_ADDR_VAR 0 5
33965: PUSH
33966: EMPTY
33967: ST_TO_ADDR
// for i in list do
33968: LD_ADDR_VAR 0 6
33972: PUSH
33973: LD_VAR 0 2
33977: PUSH
33978: FOR_IN
33979: IFFALSE 34197
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33981: LD_ADDR_VAR 0 8
33985: PUSH
33986: LD_VAR 0 1
33990: PPUSH
33991: LD_VAR 0 6
33995: PUSH
33996: LD_INT 1
33998: ARRAY
33999: PPUSH
34000: LD_VAR 0 6
34004: PUSH
34005: LD_INT 2
34007: ARRAY
34008: PPUSH
34009: CALL_OW 297
34013: ST_TO_ADDR
// if not Count ( result ) then
34014: LD_VAR 0 5
34018: PPUSH
34019: CALL 30531 0 1
34023: NOT
34024: IFFALSE 34057
// begin result := Join ( result , [ i , tmp ] ) ;
34026: LD_ADDR_VAR 0 5
34030: PUSH
34031: LD_VAR 0 5
34035: PPUSH
34036: LD_VAR 0 6
34040: PUSH
34041: LD_VAR 0 8
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PPUSH
34050: CALL 66507 0 2
34054: ST_TO_ADDR
// continue ;
34055: GO 33978
// end ; if result [ result ] [ 2 ] <= tmp then
34057: LD_VAR 0 5
34061: PUSH
34062: LD_VAR 0 5
34066: ARRAY
34067: PUSH
34068: LD_INT 2
34070: ARRAY
34071: PUSH
34072: LD_VAR 0 8
34076: LESSEQUAL
34077: IFFALSE 34110
// result := Join ( result , [ i , tmp ] ) else
34079: LD_ADDR_VAR 0 5
34083: PUSH
34084: LD_VAR 0 5
34088: PPUSH
34089: LD_VAR 0 6
34093: PUSH
34094: LD_VAR 0 8
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PPUSH
34103: CALL 66507 0 2
34107: ST_TO_ADDR
34108: GO 34195
// begin for j := 1 to Count ( result ) do
34110: LD_ADDR_VAR 0 7
34114: PUSH
34115: DOUBLE
34116: LD_INT 1
34118: DEC
34119: ST_TO_ADDR
34120: LD_VAR 0 5
34124: PPUSH
34125: CALL 30531 0 1
34129: PUSH
34130: FOR_TO
34131: IFFALSE 34193
// begin if tmp < result [ j ] [ 2 ] then
34133: LD_VAR 0 8
34137: PUSH
34138: LD_VAR 0 5
34142: PUSH
34143: LD_VAR 0 7
34147: ARRAY
34148: PUSH
34149: LD_INT 2
34151: ARRAY
34152: LESS
34153: IFFALSE 34191
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34155: LD_ADDR_VAR 0 5
34159: PUSH
34160: LD_VAR 0 5
34164: PPUSH
34165: LD_VAR 0 7
34169: PPUSH
34170: LD_VAR 0 6
34174: PUSH
34175: LD_VAR 0 8
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PPUSH
34184: CALL_OW 2
34188: ST_TO_ADDR
// break ;
34189: GO 34193
// end ; end ;
34191: GO 34130
34193: POP
34194: POP
// end ; end ;
34195: GO 33978
34197: POP
34198: POP
// if result and not asc then
34199: LD_VAR 0 5
34203: IFFALSE 34212
34205: PUSH
34206: LD_VAR 0 3
34210: NOT
34211: AND
34212: IFFALSE 34229
// result := ReverseArray ( result ) ;
34214: LD_ADDR_VAR 0 5
34218: PUSH
34219: LD_VAR 0 5
34223: PPUSH
34224: CALL 61587 0 1
34228: ST_TO_ADDR
// tmp := [ ] ;
34229: LD_ADDR_VAR 0 8
34233: PUSH
34234: EMPTY
34235: ST_TO_ADDR
// if mode then
34236: LD_VAR 0 4
34240: IFFALSE 34304
// begin for i := 1 to result do
34242: LD_ADDR_VAR 0 6
34246: PUSH
34247: DOUBLE
34248: LD_INT 1
34250: DEC
34251: ST_TO_ADDR
34252: LD_VAR 0 5
34256: PUSH
34257: FOR_TO
34258: IFFALSE 34292
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
34260: LD_ADDR_VAR 0 8
34264: PUSH
34265: LD_VAR 0 8
34269: PPUSH
34270: LD_VAR 0 5
34274: PUSH
34275: LD_VAR 0 6
34279: ARRAY
34280: PUSH
34281: LD_INT 1
34283: ARRAY
34284: PPUSH
34285: CALL 66507 0 2
34289: ST_TO_ADDR
34290: GO 34257
34292: POP
34293: POP
// result := tmp ;
34294: LD_ADDR_VAR 0 5
34298: PUSH
34299: LD_VAR 0 8
34303: ST_TO_ADDR
// end ; end ;
34304: LD_VAR 0 5
34308: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34309: LD_INT 0
34311: PPUSH
34312: PPUSH
34313: PPUSH
34314: PPUSH
// if not list then
34315: LD_VAR 0 3
34319: NOT
34320: IFFALSE 34324
// exit ;
34322: GO 34714
// result := [ ] ;
34324: LD_ADDR_VAR 0 6
34328: PUSH
34329: EMPTY
34330: ST_TO_ADDR
// for i in list do
34331: LD_ADDR_VAR 0 7
34335: PUSH
34336: LD_VAR 0 3
34340: PUSH
34341: FOR_IN
34342: IFFALSE 34544
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34344: LD_ADDR_VAR 0 9
34348: PUSH
34349: LD_VAR 0 7
34353: PPUSH
34354: LD_VAR 0 1
34358: PPUSH
34359: LD_VAR 0 2
34363: PPUSH
34364: CALL_OW 297
34368: ST_TO_ADDR
// if not result then
34369: LD_VAR 0 6
34373: NOT
34374: IFFALSE 34400
// result := [ [ i , tmp ] ] else
34376: LD_ADDR_VAR 0 6
34380: PUSH
34381: LD_VAR 0 7
34385: PUSH
34386: LD_VAR 0 9
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: EMPTY
34396: LIST
34397: ST_TO_ADDR
34398: GO 34542
// begin if result [ result ] [ 2 ] <= tmp then
34400: LD_VAR 0 6
34404: PUSH
34405: LD_VAR 0 6
34409: ARRAY
34410: PUSH
34411: LD_INT 2
34413: ARRAY
34414: PUSH
34415: LD_VAR 0 9
34419: LESSEQUAL
34420: IFFALSE 34462
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34422: LD_ADDR_VAR 0 6
34426: PUSH
34427: LD_VAR 0 6
34431: PPUSH
34432: LD_VAR 0 6
34436: PUSH
34437: LD_INT 1
34439: PLUS
34440: PPUSH
34441: LD_VAR 0 7
34445: PUSH
34446: LD_VAR 0 9
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PPUSH
34455: CALL_OW 2
34459: ST_TO_ADDR
34460: GO 34542
// for j := 1 to result do
34462: LD_ADDR_VAR 0 8
34466: PUSH
34467: DOUBLE
34468: LD_INT 1
34470: DEC
34471: ST_TO_ADDR
34472: LD_VAR 0 6
34476: PUSH
34477: FOR_TO
34478: IFFALSE 34540
// begin if tmp < result [ j ] [ 2 ] then
34480: LD_VAR 0 9
34484: PUSH
34485: LD_VAR 0 6
34489: PUSH
34490: LD_VAR 0 8
34494: ARRAY
34495: PUSH
34496: LD_INT 2
34498: ARRAY
34499: LESS
34500: IFFALSE 34538
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34502: LD_ADDR_VAR 0 6
34506: PUSH
34507: LD_VAR 0 6
34511: PPUSH
34512: LD_VAR 0 8
34516: PPUSH
34517: LD_VAR 0 7
34521: PUSH
34522: LD_VAR 0 9
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PPUSH
34531: CALL_OW 2
34535: ST_TO_ADDR
// break ;
34536: GO 34540
// end ; end ;
34538: GO 34477
34540: POP
34541: POP
// end ; end ;
34542: GO 34341
34544: POP
34545: POP
// if result and not asc then
34546: LD_VAR 0 6
34550: IFFALSE 34559
34552: PUSH
34553: LD_VAR 0 4
34557: NOT
34558: AND
34559: IFFALSE 34634
// begin tmp := result ;
34561: LD_ADDR_VAR 0 9
34565: PUSH
34566: LD_VAR 0 6
34570: ST_TO_ADDR
// for i = tmp downto 1 do
34571: LD_ADDR_VAR 0 7
34575: PUSH
34576: DOUBLE
34577: LD_VAR 0 9
34581: INC
34582: ST_TO_ADDR
34583: LD_INT 1
34585: PUSH
34586: FOR_DOWNTO
34587: IFFALSE 34632
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34589: LD_ADDR_VAR 0 6
34593: PUSH
34594: LD_VAR 0 6
34598: PPUSH
34599: LD_VAR 0 9
34603: PUSH
34604: LD_VAR 0 7
34608: MINUS
34609: PUSH
34610: LD_INT 1
34612: PLUS
34613: PPUSH
34614: LD_VAR 0 9
34618: PUSH
34619: LD_VAR 0 7
34623: ARRAY
34624: PPUSH
34625: CALL_OW 1
34629: ST_TO_ADDR
34630: GO 34586
34632: POP
34633: POP
// end ; tmp := [ ] ;
34634: LD_ADDR_VAR 0 9
34638: PUSH
34639: EMPTY
34640: ST_TO_ADDR
// if mode then
34641: LD_VAR 0 5
34645: IFFALSE 34714
// begin for i = 1 to result do
34647: LD_ADDR_VAR 0 7
34651: PUSH
34652: DOUBLE
34653: LD_INT 1
34655: DEC
34656: ST_TO_ADDR
34657: LD_VAR 0 6
34661: PUSH
34662: FOR_TO
34663: IFFALSE 34702
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34665: LD_ADDR_VAR 0 9
34669: PUSH
34670: LD_VAR 0 9
34674: PPUSH
34675: LD_VAR 0 7
34679: PPUSH
34680: LD_VAR 0 6
34684: PUSH
34685: LD_VAR 0 7
34689: ARRAY
34690: PUSH
34691: LD_INT 1
34693: ARRAY
34694: PPUSH
34695: CALL_OW 1
34699: ST_TO_ADDR
34700: GO 34662
34702: POP
34703: POP
// result := tmp ;
34704: LD_ADDR_VAR 0 6
34708: PUSH
34709: LD_VAR 0 9
34713: ST_TO_ADDR
// end ; end ;
34714: LD_VAR 0 6
34718: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34719: LD_INT 0
34721: PPUSH
34722: PPUSH
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34727: LD_ADDR_VAR 0 5
34731: PUSH
34732: LD_INT 0
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: EMPTY
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: ST_TO_ADDR
// if not x or not y then
34749: LD_VAR 0 2
34753: NOT
34754: IFTRUE 34763
34756: PUSH
34757: LD_VAR 0 3
34761: NOT
34762: OR
34763: IFFALSE 34767
// exit ;
34765: GO 36423
// if not range then
34767: LD_VAR 0 4
34771: NOT
34772: IFFALSE 34782
// range := 10 ;
34774: LD_ADDR_VAR 0 4
34778: PUSH
34779: LD_INT 10
34781: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34782: LD_ADDR_VAR 0 8
34786: PUSH
34787: LD_INT 81
34789: PUSH
34790: LD_VAR 0 1
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 92
34801: PUSH
34802: LD_VAR 0 2
34806: PUSH
34807: LD_VAR 0 3
34811: PUSH
34812: LD_VAR 0 4
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 3
34825: PUSH
34826: LD_INT 21
34828: PUSH
34829: LD_INT 3
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: LIST
34844: PPUSH
34845: CALL_OW 69
34849: ST_TO_ADDR
// if not tmp then
34850: LD_VAR 0 8
34854: NOT
34855: IFFALSE 34859
// exit ;
34857: GO 36423
// for i in tmp do
34859: LD_ADDR_VAR 0 6
34863: PUSH
34864: LD_VAR 0 8
34868: PUSH
34869: FOR_IN
34870: IFFALSE 36398
// begin points := [ 0 , 0 , 0 ] ;
34872: LD_ADDR_VAR 0 9
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: LIST
34890: ST_TO_ADDR
// bpoints := 1 ;
34891: LD_ADDR_VAR 0 10
34895: PUSH
34896: LD_INT 1
34898: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34899: LD_VAR 0 6
34903: PPUSH
34904: CALL_OW 247
34908: PUSH
34909: LD_INT 1
34911: DOUBLE
34912: EQUAL
34913: IFTRUE 34917
34915: GO 35499
34917: POP
// begin if GetClass ( i ) = 1 then
34918: LD_VAR 0 6
34922: PPUSH
34923: CALL_OW 257
34927: PUSH
34928: LD_INT 1
34930: EQUAL
34931: IFFALSE 34952
// points := [ 10 , 5 , 3 ] ;
34933: LD_ADDR_VAR 0 9
34937: PUSH
34938: LD_INT 10
34940: PUSH
34941: LD_INT 5
34943: PUSH
34944: LD_INT 3
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34952: LD_VAR 0 6
34956: PPUSH
34957: CALL_OW 257
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: LD_INT 3
34967: PUSH
34968: LD_INT 4
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: IN
34976: IFFALSE 34997
// points := [ 3 , 2 , 1 ] ;
34978: LD_ADDR_VAR 0 9
34982: PUSH
34983: LD_INT 3
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: LIST
34996: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34997: LD_VAR 0 6
35001: PPUSH
35002: CALL_OW 257
35006: PUSH
35007: LD_INT 5
35009: EQUAL
35010: IFFALSE 35031
// points := [ 130 , 5 , 2 ] ;
35012: LD_ADDR_VAR 0 9
35016: PUSH
35017: LD_INT 130
35019: PUSH
35020: LD_INT 5
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: LIST
35030: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35031: LD_VAR 0 6
35035: PPUSH
35036: CALL_OW 257
35040: PUSH
35041: LD_INT 8
35043: EQUAL
35044: IFFALSE 35065
// points := [ 35 , 35 , 30 ] ;
35046: LD_ADDR_VAR 0 9
35050: PUSH
35051: LD_INT 35
35053: PUSH
35054: LD_INT 35
35056: PUSH
35057: LD_INT 30
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: LIST
35064: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35065: LD_VAR 0 6
35069: PPUSH
35070: CALL_OW 257
35074: PUSH
35075: LD_INT 9
35077: EQUAL
35078: IFFALSE 35099
// points := [ 20 , 55 , 40 ] ;
35080: LD_ADDR_VAR 0 9
35084: PUSH
35085: LD_INT 20
35087: PUSH
35088: LD_INT 55
35090: PUSH
35091: LD_INT 40
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: LIST
35098: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35099: LD_VAR 0 6
35103: PPUSH
35104: CALL_OW 257
35108: PUSH
35109: LD_INT 12
35111: PUSH
35112: LD_INT 16
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: IN
35119: IFFALSE 35140
// points := [ 5 , 3 , 2 ] ;
35121: LD_ADDR_VAR 0 9
35125: PUSH
35126: LD_INT 5
35128: PUSH
35129: LD_INT 3
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35140: LD_VAR 0 6
35144: PPUSH
35145: CALL_OW 257
35149: PUSH
35150: LD_INT 17
35152: EQUAL
35153: IFFALSE 35174
// points := [ 100 , 50 , 75 ] ;
35155: LD_ADDR_VAR 0 9
35159: PUSH
35160: LD_INT 100
35162: PUSH
35163: LD_INT 50
35165: PUSH
35166: LD_INT 75
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35174: LD_VAR 0 6
35178: PPUSH
35179: CALL_OW 257
35183: PUSH
35184: LD_INT 15
35186: EQUAL
35187: IFFALSE 35208
// points := [ 10 , 5 , 3 ] ;
35189: LD_ADDR_VAR 0 9
35193: PUSH
35194: LD_INT 10
35196: PUSH
35197: LD_INT 5
35199: PUSH
35200: LD_INT 3
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35208: LD_VAR 0 6
35212: PPUSH
35213: CALL_OW 257
35217: PUSH
35218: LD_INT 14
35220: EQUAL
35221: IFFALSE 35242
// points := [ 10 , 0 , 0 ] ;
35223: LD_ADDR_VAR 0 9
35227: PUSH
35228: LD_INT 10
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: LIST
35241: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35242: LD_VAR 0 6
35246: PPUSH
35247: CALL_OW 257
35251: PUSH
35252: LD_INT 11
35254: EQUAL
35255: IFFALSE 35276
// points := [ 30 , 10 , 5 ] ;
35257: LD_ADDR_VAR 0 9
35261: PUSH
35262: LD_INT 30
35264: PUSH
35265: LD_INT 10
35267: PUSH
35268: LD_INT 5
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35276: LD_VAR 0 1
35280: PPUSH
35281: LD_INT 5
35283: PPUSH
35284: CALL_OW 321
35288: PUSH
35289: LD_INT 2
35291: EQUAL
35292: IFFALSE 35309
// bpoints := bpoints * 1.8 ;
35294: LD_ADDR_VAR 0 10
35298: PUSH
35299: LD_VAR 0 10
35303: PUSH
35304: LD_REAL  1.80000000000000E+0000
35307: MUL
35308: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35309: LD_VAR 0 6
35313: PPUSH
35314: CALL_OW 257
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: LD_INT 3
35327: PUSH
35328: LD_INT 4
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: IN
35337: IFFALSE 35357
35339: PUSH
35340: LD_VAR 0 1
35344: PPUSH
35345: LD_INT 51
35347: PPUSH
35348: CALL_OW 321
35352: PUSH
35353: LD_INT 2
35355: EQUAL
35356: AND
35357: IFFALSE 35374
// bpoints := bpoints * 1.2 ;
35359: LD_ADDR_VAR 0 10
35363: PUSH
35364: LD_VAR 0 10
35368: PUSH
35369: LD_REAL  1.20000000000000E+0000
35372: MUL
35373: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35374: LD_VAR 0 6
35378: PPUSH
35379: CALL_OW 257
35383: PUSH
35384: LD_INT 5
35386: PUSH
35387: LD_INT 7
35389: PUSH
35390: LD_INT 9
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: LIST
35397: IN
35398: IFFALSE 35418
35400: PUSH
35401: LD_VAR 0 1
35405: PPUSH
35406: LD_INT 52
35408: PPUSH
35409: CALL_OW 321
35413: PUSH
35414: LD_INT 2
35416: EQUAL
35417: AND
35418: IFFALSE 35435
// bpoints := bpoints * 1.5 ;
35420: LD_ADDR_VAR 0 10
35424: PUSH
35425: LD_VAR 0 10
35429: PUSH
35430: LD_REAL  1.50000000000000E+0000
35433: MUL
35434: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35435: LD_VAR 0 1
35439: PPUSH
35440: LD_INT 66
35442: PPUSH
35443: CALL_OW 321
35447: PUSH
35448: LD_INT 2
35450: EQUAL
35451: IFFALSE 35468
// bpoints := bpoints * 1.1 ;
35453: LD_ADDR_VAR 0 10
35457: PUSH
35458: LD_VAR 0 10
35462: PUSH
35463: LD_REAL  1.10000000000000E+0000
35466: MUL
35467: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35468: LD_ADDR_VAR 0 10
35472: PUSH
35473: LD_VAR 0 10
35477: PUSH
35478: LD_VAR 0 6
35482: PPUSH
35483: LD_INT 1
35485: PPUSH
35486: CALL_OW 259
35490: PUSH
35491: LD_REAL  1.15000000000000E+0000
35494: MUL
35495: MUL
35496: ST_TO_ADDR
// end ; unit_vehicle :
35497: GO 36327
35499: LD_INT 2
35501: DOUBLE
35502: EQUAL
35503: IFTRUE 35507
35505: GO 36315
35507: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35508: LD_VAR 0 6
35512: PPUSH
35513: CALL_OW 264
35517: PUSH
35518: LD_INT 2
35520: PUSH
35521: LD_INT 42
35523: PUSH
35524: LD_INT 24
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: IN
35532: IFFALSE 35553
// points := [ 25 , 5 , 3 ] ;
35534: LD_ADDR_VAR 0 9
35538: PUSH
35539: LD_INT 25
35541: PUSH
35542: LD_INT 5
35544: PUSH
35545: LD_INT 3
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: LIST
35552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35553: LD_VAR 0 6
35557: PPUSH
35558: CALL_OW 264
35562: PUSH
35563: LD_INT 4
35565: PUSH
35566: LD_INT 43
35568: PUSH
35569: LD_INT 25
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: LIST
35576: IN
35577: IFFALSE 35598
// points := [ 40 , 15 , 5 ] ;
35579: LD_ADDR_VAR 0 9
35583: PUSH
35584: LD_INT 40
35586: PUSH
35587: LD_INT 15
35589: PUSH
35590: LD_INT 5
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35598: LD_VAR 0 6
35602: PPUSH
35603: CALL_OW 264
35607: PUSH
35608: LD_INT 3
35610: PUSH
35611: LD_INT 23
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: IN
35618: IFFALSE 35639
// points := [ 7 , 25 , 8 ] ;
35620: LD_ADDR_VAR 0 9
35624: PUSH
35625: LD_INT 7
35627: PUSH
35628: LD_INT 25
35630: PUSH
35631: LD_INT 8
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35639: LD_VAR 0 6
35643: PPUSH
35644: CALL_OW 264
35648: PUSH
35649: LD_INT 5
35651: PUSH
35652: LD_INT 27
35654: PUSH
35655: LD_INT 44
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: LIST
35662: IN
35663: IFFALSE 35684
// points := [ 14 , 50 , 16 ] ;
35665: LD_ADDR_VAR 0 9
35669: PUSH
35670: LD_INT 14
35672: PUSH
35673: LD_INT 50
35675: PUSH
35676: LD_INT 16
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35684: LD_VAR 0 6
35688: PPUSH
35689: CALL_OW 264
35693: PUSH
35694: LD_INT 6
35696: PUSH
35697: LD_INT 46
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: IN
35704: IFFALSE 35725
// points := [ 32 , 120 , 70 ] ;
35706: LD_ADDR_VAR 0 9
35710: PUSH
35711: LD_INT 32
35713: PUSH
35714: LD_INT 120
35716: PUSH
35717: LD_INT 70
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35725: LD_VAR 0 6
35729: PPUSH
35730: CALL_OW 264
35734: PUSH
35735: LD_INT 7
35737: PUSH
35738: LD_INT 28
35740: PUSH
35741: LD_INT 45
35743: PUSH
35744: LD_INT 92
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: IN
35753: IFFALSE 35774
// points := [ 35 , 20 , 45 ] ;
35755: LD_ADDR_VAR 0 9
35759: PUSH
35760: LD_INT 35
35762: PUSH
35763: LD_INT 20
35765: PUSH
35766: LD_INT 45
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: LIST
35773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35774: LD_VAR 0 6
35778: PPUSH
35779: CALL_OW 264
35783: PUSH
35784: LD_INT 47
35786: PUSH
35787: EMPTY
35788: LIST
35789: IN
35790: IFFALSE 35811
// points := [ 67 , 45 , 75 ] ;
35792: LD_ADDR_VAR 0 9
35796: PUSH
35797: LD_INT 67
35799: PUSH
35800: LD_INT 45
35802: PUSH
35803: LD_INT 75
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35811: LD_VAR 0 6
35815: PPUSH
35816: CALL_OW 264
35820: PUSH
35821: LD_INT 26
35823: PUSH
35824: EMPTY
35825: LIST
35826: IN
35827: IFFALSE 35848
// points := [ 120 , 30 , 80 ] ;
35829: LD_ADDR_VAR 0 9
35833: PUSH
35834: LD_INT 120
35836: PUSH
35837: LD_INT 30
35839: PUSH
35840: LD_INT 80
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: LIST
35847: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35848: LD_VAR 0 6
35852: PPUSH
35853: CALL_OW 264
35857: PUSH
35858: LD_INT 22
35860: PUSH
35861: EMPTY
35862: LIST
35863: IN
35864: IFFALSE 35885
// points := [ 40 , 1 , 1 ] ;
35866: LD_ADDR_VAR 0 9
35870: PUSH
35871: LD_INT 40
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35885: LD_VAR 0 6
35889: PPUSH
35890: CALL_OW 264
35894: PUSH
35895: LD_INT 29
35897: PUSH
35898: EMPTY
35899: LIST
35900: IN
35901: IFFALSE 35922
// points := [ 70 , 200 , 400 ] ;
35903: LD_ADDR_VAR 0 9
35907: PUSH
35908: LD_INT 70
35910: PUSH
35911: LD_INT 200
35913: PUSH
35914: LD_INT 400
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35922: LD_VAR 0 6
35926: PPUSH
35927: CALL_OW 264
35931: PUSH
35932: LD_INT 14
35934: PUSH
35935: LD_INT 53
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: IN
35942: IFFALSE 35963
// points := [ 40 , 10 , 20 ] ;
35944: LD_ADDR_VAR 0 9
35948: PUSH
35949: LD_INT 40
35951: PUSH
35952: LD_INT 10
35954: PUSH
35955: LD_INT 20
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35963: LD_VAR 0 6
35967: PPUSH
35968: CALL_OW 264
35972: PUSH
35973: LD_INT 9
35975: PUSH
35976: EMPTY
35977: LIST
35978: IN
35979: IFFALSE 36000
// points := [ 5 , 70 , 20 ] ;
35981: LD_ADDR_VAR 0 9
35985: PUSH
35986: LD_INT 5
35988: PUSH
35989: LD_INT 70
35991: PUSH
35992: LD_INT 20
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36000: LD_VAR 0 6
36004: PPUSH
36005: CALL_OW 264
36009: PUSH
36010: LD_INT 10
36012: PUSH
36013: EMPTY
36014: LIST
36015: IN
36016: IFFALSE 36037
// points := [ 35 , 110 , 70 ] ;
36018: LD_ADDR_VAR 0 9
36022: PUSH
36023: LD_INT 35
36025: PUSH
36026: LD_INT 110
36028: PUSH
36029: LD_INT 70
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36037: LD_VAR 0 6
36041: PPUSH
36042: CALL_OW 265
36046: PUSH
36047: LD_INT 25
36049: EQUAL
36050: IFFALSE 36071
// points := [ 80 , 65 , 100 ] ;
36052: LD_ADDR_VAR 0 9
36056: PUSH
36057: LD_INT 80
36059: PUSH
36060: LD_INT 65
36062: PUSH
36063: LD_INT 100
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: LIST
36070: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36071: LD_VAR 0 6
36075: PPUSH
36076: CALL_OW 263
36080: PUSH
36081: LD_INT 1
36083: EQUAL
36084: IFFALSE 36119
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36086: LD_ADDR_VAR 0 10
36090: PUSH
36091: LD_VAR 0 10
36095: PUSH
36096: LD_VAR 0 6
36100: PPUSH
36101: CALL_OW 311
36105: PPUSH
36106: LD_INT 3
36108: PPUSH
36109: CALL_OW 259
36113: PUSH
36114: LD_INT 4
36116: MUL
36117: MUL
36118: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36119: LD_VAR 0 6
36123: PPUSH
36124: CALL_OW 263
36128: PUSH
36129: LD_INT 2
36131: EQUAL
36132: IFFALSE 36183
// begin j := IsControledBy ( i ) ;
36134: LD_ADDR_VAR 0 7
36138: PUSH
36139: LD_VAR 0 6
36143: PPUSH
36144: CALL_OW 312
36148: ST_TO_ADDR
// if j then
36149: LD_VAR 0 7
36153: IFFALSE 36183
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36155: LD_ADDR_VAR 0 10
36159: PUSH
36160: LD_VAR 0 10
36164: PUSH
36165: LD_VAR 0 7
36169: PPUSH
36170: LD_INT 3
36172: PPUSH
36173: CALL_OW 259
36177: PUSH
36178: LD_INT 3
36180: MUL
36181: MUL
36182: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36183: LD_VAR 0 6
36187: PPUSH
36188: CALL_OW 264
36192: PUSH
36193: LD_INT 5
36195: PUSH
36196: LD_INT 6
36198: PUSH
36199: LD_INT 46
36201: PUSH
36202: LD_INT 44
36204: PUSH
36205: LD_INT 47
36207: PUSH
36208: LD_INT 45
36210: PUSH
36211: LD_INT 28
36213: PUSH
36214: LD_INT 7
36216: PUSH
36217: LD_INT 27
36219: PUSH
36220: LD_INT 29
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: IN
36235: IFFALSE 36255
36237: PUSH
36238: LD_VAR 0 1
36242: PPUSH
36243: LD_INT 52
36245: PPUSH
36246: CALL_OW 321
36250: PUSH
36251: LD_INT 2
36253: EQUAL
36254: AND
36255: IFFALSE 36272
// bpoints := bpoints * 1.2 ;
36257: LD_ADDR_VAR 0 10
36261: PUSH
36262: LD_VAR 0 10
36266: PUSH
36267: LD_REAL  1.20000000000000E+0000
36270: MUL
36271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36272: LD_VAR 0 6
36276: PPUSH
36277: CALL_OW 264
36281: PUSH
36282: LD_INT 6
36284: PUSH
36285: LD_INT 46
36287: PUSH
36288: LD_INT 47
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: LIST
36295: IN
36296: IFFALSE 36313
// bpoints := bpoints * 1.2 ;
36298: LD_ADDR_VAR 0 10
36302: PUSH
36303: LD_VAR 0 10
36307: PUSH
36308: LD_REAL  1.20000000000000E+0000
36311: MUL
36312: ST_TO_ADDR
// end ; unit_building :
36313: GO 36327
36315: LD_INT 3
36317: DOUBLE
36318: EQUAL
36319: IFTRUE 36323
36321: GO 36326
36323: POP
// ; end ;
36324: GO 36327
36326: POP
// for j = 1 to 3 do
36327: LD_ADDR_VAR 0 7
36331: PUSH
36332: DOUBLE
36333: LD_INT 1
36335: DEC
36336: ST_TO_ADDR
36337: LD_INT 3
36339: PUSH
36340: FOR_TO
36341: IFFALSE 36394
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36343: LD_ADDR_VAR 0 5
36347: PUSH
36348: LD_VAR 0 5
36352: PPUSH
36353: LD_VAR 0 7
36357: PPUSH
36358: LD_VAR 0 5
36362: PUSH
36363: LD_VAR 0 7
36367: ARRAY
36368: PUSH
36369: LD_VAR 0 9
36373: PUSH
36374: LD_VAR 0 7
36378: ARRAY
36379: PUSH
36380: LD_VAR 0 10
36384: MUL
36385: PLUS
36386: PPUSH
36387: CALL_OW 1
36391: ST_TO_ADDR
36392: GO 36340
36394: POP
36395: POP
// end ;
36396: GO 34869
36398: POP
36399: POP
// result := Replace ( result , 4 , tmp ) ;
36400: LD_ADDR_VAR 0 5
36404: PUSH
36405: LD_VAR 0 5
36409: PPUSH
36410: LD_INT 4
36412: PPUSH
36413: LD_VAR 0 8
36417: PPUSH
36418: CALL_OW 1
36422: ST_TO_ADDR
// end ;
36423: LD_VAR 0 5
36427: RET
// export function DangerAtRange ( unit , range ) ; begin
36428: LD_INT 0
36430: PPUSH
// if not unit then
36431: LD_VAR 0 1
36435: NOT
36436: IFFALSE 36440
// exit ;
36438: GO 36485
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36440: LD_ADDR_VAR 0 3
36444: PUSH
36445: LD_VAR 0 1
36449: PPUSH
36450: CALL_OW 255
36454: PPUSH
36455: LD_VAR 0 1
36459: PPUSH
36460: CALL_OW 250
36464: PPUSH
36465: LD_VAR 0 1
36469: PPUSH
36470: CALL_OW 251
36474: PPUSH
36475: LD_VAR 0 2
36479: PPUSH
36480: CALL 34719 0 4
36484: ST_TO_ADDR
// end ;
36485: LD_VAR 0 3
36489: RET
// export function DangerInArea ( side , area ) ; begin
36490: LD_INT 0
36492: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36493: LD_ADDR_VAR 0 3
36497: PUSH
36498: LD_VAR 0 2
36502: PPUSH
36503: LD_INT 81
36505: PUSH
36506: LD_VAR 0 1
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PPUSH
36515: CALL_OW 70
36519: ST_TO_ADDR
// end ;
36520: LD_VAR 0 3
36524: RET
// export function IsExtension ( b ) ; begin
36525: LD_INT 0
36527: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36528: LD_ADDR_VAR 0 2
36532: PUSH
36533: LD_VAR 0 1
36537: PUSH
36538: LD_INT 23
36540: PUSH
36541: LD_INT 20
36543: PUSH
36544: LD_INT 22
36546: PUSH
36547: LD_INT 17
36549: PUSH
36550: LD_INT 24
36552: PUSH
36553: LD_INT 21
36555: PUSH
36556: LD_INT 19
36558: PUSH
36559: LD_INT 16
36561: PUSH
36562: LD_INT 25
36564: PUSH
36565: LD_INT 18
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: IN
36580: ST_TO_ADDR
// end ;
36581: LD_VAR 0 2
36585: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36586: LD_INT 0
36588: PPUSH
36589: PPUSH
36590: PPUSH
// result := [ ] ;
36591: LD_ADDR_VAR 0 4
36595: PUSH
36596: EMPTY
36597: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36598: LD_ADDR_VAR 0 5
36602: PUSH
36603: LD_VAR 0 2
36607: PPUSH
36608: LD_INT 21
36610: PUSH
36611: LD_INT 3
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PPUSH
36618: CALL_OW 70
36622: ST_TO_ADDR
// if not tmp then
36623: LD_VAR 0 5
36627: NOT
36628: IFFALSE 36632
// exit ;
36630: GO 36696
// if checkLink then
36632: LD_VAR 0 3
36636: IFFALSE 36686
// begin for i in tmp do
36638: LD_ADDR_VAR 0 6
36642: PUSH
36643: LD_VAR 0 5
36647: PUSH
36648: FOR_IN
36649: IFFALSE 36684
// if GetBase ( i ) <> base then
36651: LD_VAR 0 6
36655: PPUSH
36656: CALL_OW 274
36660: PUSH
36661: LD_VAR 0 1
36665: NONEQUAL
36666: IFFALSE 36682
// ComLinkToBase ( base , i ) ;
36668: LD_VAR 0 1
36672: PPUSH
36673: LD_VAR 0 6
36677: PPUSH
36678: CALL_OW 169
36682: GO 36648
36684: POP
36685: POP
// end ; result := tmp ;
36686: LD_ADDR_VAR 0 4
36690: PUSH
36691: LD_VAR 0 5
36695: ST_TO_ADDR
// end ;
36696: LD_VAR 0 4
36700: RET
// export function ComComplete ( units , b ) ; var i ; begin
36701: LD_INT 0
36703: PPUSH
36704: PPUSH
// if not units then
36705: LD_VAR 0 1
36709: NOT
36710: IFFALSE 36714
// exit ;
36712: GO 36804
// for i in units do
36714: LD_ADDR_VAR 0 4
36718: PUSH
36719: LD_VAR 0 1
36723: PUSH
36724: FOR_IN
36725: IFFALSE 36802
// if BuildingStatus ( b ) = bs_build then
36727: LD_VAR 0 2
36731: PPUSH
36732: CALL_OW 461
36736: PUSH
36737: LD_INT 1
36739: EQUAL
36740: IFFALSE 36800
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36742: LD_VAR 0 4
36746: PPUSH
36747: LD_STRING h
36749: PUSH
36750: LD_VAR 0 2
36754: PPUSH
36755: CALL_OW 250
36759: PUSH
36760: LD_VAR 0 2
36764: PPUSH
36765: CALL_OW 251
36769: PUSH
36770: LD_VAR 0 2
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: PUSH
36793: EMPTY
36794: LIST
36795: PPUSH
36796: CALL_OW 446
36800: GO 36724
36802: POP
36803: POP
// end ;
36804: LD_VAR 0 3
36808: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36809: LD_INT 0
36811: PPUSH
36812: PPUSH
36813: PPUSH
36814: PPUSH
36815: PPUSH
36816: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36817: LD_VAR 0 1
36821: NOT
36822: IFTRUE 36839
36824: PUSH
36825: LD_VAR 0 1
36829: PPUSH
36830: CALL_OW 263
36834: PUSH
36835: LD_INT 2
36837: NONEQUAL
36838: OR
36839: IFFALSE 36843
// exit ;
36841: GO 37159
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36843: LD_ADDR_VAR 0 6
36847: PUSH
36848: LD_INT 22
36850: PUSH
36851: LD_VAR 0 1
36855: PPUSH
36856: CALL_OW 255
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 2
36867: PUSH
36868: LD_INT 30
36870: PUSH
36871: LD_INT 36
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 34
36880: PUSH
36881: LD_INT 31
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: LIST
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PPUSH
36897: CALL_OW 69
36901: ST_TO_ADDR
// if not tmp then
36902: LD_VAR 0 6
36906: NOT
36907: IFFALSE 36911
// exit ;
36909: GO 37159
// result := [ ] ;
36911: LD_ADDR_VAR 0 2
36915: PUSH
36916: EMPTY
36917: ST_TO_ADDR
// for i in tmp do
36918: LD_ADDR_VAR 0 3
36922: PUSH
36923: LD_VAR 0 6
36927: PUSH
36928: FOR_IN
36929: IFFALSE 37000
// begin t := UnitsInside ( i ) ;
36931: LD_ADDR_VAR 0 4
36935: PUSH
36936: LD_VAR 0 3
36940: PPUSH
36941: CALL_OW 313
36945: ST_TO_ADDR
// if t then
36946: LD_VAR 0 4
36950: IFFALSE 36998
// for j in t do
36952: LD_ADDR_VAR 0 7
36956: PUSH
36957: LD_VAR 0 4
36961: PUSH
36962: FOR_IN
36963: IFFALSE 36996
// result := Replace ( result , result + 1 , j ) ;
36965: LD_ADDR_VAR 0 2
36969: PUSH
36970: LD_VAR 0 2
36974: PPUSH
36975: LD_VAR 0 2
36979: PUSH
36980: LD_INT 1
36982: PLUS
36983: PPUSH
36984: LD_VAR 0 7
36988: PPUSH
36989: CALL_OW 1
36993: ST_TO_ADDR
36994: GO 36962
36996: POP
36997: POP
// end ;
36998: GO 36928
37000: POP
37001: POP
// if not result then
37002: LD_VAR 0 2
37006: NOT
37007: IFFALSE 37011
// exit ;
37009: GO 37159
// mech := result [ 1 ] ;
37011: LD_ADDR_VAR 0 5
37015: PUSH
37016: LD_VAR 0 2
37020: PUSH
37021: LD_INT 1
37023: ARRAY
37024: ST_TO_ADDR
// if result > 1 then
37025: LD_VAR 0 2
37029: PUSH
37030: LD_INT 1
37032: GREATER
37033: IFFALSE 37145
// begin for i = 2 to result do
37035: LD_ADDR_VAR 0 3
37039: PUSH
37040: DOUBLE
37041: LD_INT 2
37043: DEC
37044: ST_TO_ADDR
37045: LD_VAR 0 2
37049: PUSH
37050: FOR_TO
37051: IFFALSE 37143
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37053: LD_ADDR_VAR 0 4
37057: PUSH
37058: LD_VAR 0 2
37062: PUSH
37063: LD_VAR 0 3
37067: ARRAY
37068: PPUSH
37069: LD_INT 3
37071: PPUSH
37072: CALL_OW 259
37076: PUSH
37077: LD_VAR 0 2
37081: PUSH
37082: LD_VAR 0 3
37086: ARRAY
37087: PPUSH
37088: CALL_OW 432
37092: MINUS
37093: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37094: LD_VAR 0 4
37098: PUSH
37099: LD_VAR 0 5
37103: PPUSH
37104: LD_INT 3
37106: PPUSH
37107: CALL_OW 259
37111: PUSH
37112: LD_VAR 0 5
37116: PPUSH
37117: CALL_OW 432
37121: MINUS
37122: GREATEREQUAL
37123: IFFALSE 37141
// mech := result [ i ] ;
37125: LD_ADDR_VAR 0 5
37129: PUSH
37130: LD_VAR 0 2
37134: PUSH
37135: LD_VAR 0 3
37139: ARRAY
37140: ST_TO_ADDR
// end ;
37141: GO 37050
37143: POP
37144: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37145: LD_VAR 0 1
37149: PPUSH
37150: LD_VAR 0 5
37154: PPUSH
37155: CALL_OW 135
// end ;
37159: LD_VAR 0 2
37163: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37164: LD_INT 0
37166: PPUSH
37167: PPUSH
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
37173: PPUSH
37174: PPUSH
37175: PPUSH
37176: PPUSH
37177: PPUSH
37178: PPUSH
// result := [ ] ;
37179: LD_ADDR_VAR 0 7
37183: PUSH
37184: EMPTY
37185: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37186: LD_VAR 0 1
37190: PPUSH
37191: CALL_OW 266
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: IN
37206: NOT
37207: IFFALSE 37211
// exit ;
37209: GO 38851
// if name then
37211: LD_VAR 0 3
37215: IFFALSE 37231
// SetBName ( base_dep , name ) ;
37217: LD_VAR 0 1
37221: PPUSH
37222: LD_VAR 0 3
37226: PPUSH
37227: CALL_OW 500
// base := GetBase ( base_dep ) ;
37231: LD_ADDR_VAR 0 15
37235: PUSH
37236: LD_VAR 0 1
37240: PPUSH
37241: CALL_OW 274
37245: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37246: LD_ADDR_VAR 0 16
37250: PUSH
37251: LD_VAR 0 1
37255: PPUSH
37256: CALL_OW 255
37260: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37261: LD_ADDR_VAR 0 17
37265: PUSH
37266: LD_VAR 0 1
37270: PPUSH
37271: CALL_OW 248
37275: ST_TO_ADDR
// if sources then
37276: LD_VAR 0 5
37280: IFFALSE 37327
// for i = 1 to 3 do
37282: LD_ADDR_VAR 0 8
37286: PUSH
37287: DOUBLE
37288: LD_INT 1
37290: DEC
37291: ST_TO_ADDR
37292: LD_INT 3
37294: PUSH
37295: FOR_TO
37296: IFFALSE 37325
// AddResourceType ( base , i , sources [ i ] ) ;
37298: LD_VAR 0 15
37302: PPUSH
37303: LD_VAR 0 8
37307: PPUSH
37308: LD_VAR 0 5
37312: PUSH
37313: LD_VAR 0 8
37317: ARRAY
37318: PPUSH
37319: CALL_OW 276
37323: GO 37295
37325: POP
37326: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37327: LD_ADDR_VAR 0 18
37331: PUSH
37332: LD_VAR 0 15
37336: PPUSH
37337: LD_VAR 0 2
37341: PPUSH
37342: LD_INT 1
37344: PPUSH
37345: CALL 36586 0 3
37349: ST_TO_ADDR
// InitHc ;
37350: CALL_OW 19
// InitUc ;
37354: CALL_OW 18
// uc_side := side ;
37358: LD_ADDR_OWVAR 20
37362: PUSH
37363: LD_VAR 0 16
37367: ST_TO_ADDR
// uc_nation := nation ;
37368: LD_ADDR_OWVAR 21
37372: PUSH
37373: LD_VAR 0 17
37377: ST_TO_ADDR
// if buildings then
37378: LD_VAR 0 18
37382: IFFALSE 38710
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37384: LD_ADDR_VAR 0 19
37388: PUSH
37389: LD_VAR 0 18
37393: PPUSH
37394: LD_INT 2
37396: PUSH
37397: LD_INT 30
37399: PUSH
37400: LD_INT 29
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 30
37409: PUSH
37410: LD_INT 30
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: PPUSH
37422: CALL_OW 72
37426: ST_TO_ADDR
// if tmp then
37427: LD_VAR 0 19
37431: IFFALSE 37479
// for i in tmp do
37433: LD_ADDR_VAR 0 8
37437: PUSH
37438: LD_VAR 0 19
37442: PUSH
37443: FOR_IN
37444: IFFALSE 37477
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37446: LD_VAR 0 8
37450: PPUSH
37451: CALL_OW 250
37455: PPUSH
37456: LD_VAR 0 8
37460: PPUSH
37461: CALL_OW 251
37465: PPUSH
37466: LD_VAR 0 16
37470: PPUSH
37471: CALL_OW 441
37475: GO 37443
37477: POP
37478: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37479: LD_VAR 0 18
37483: PPUSH
37484: LD_INT 2
37486: PUSH
37487: LD_INT 30
37489: PUSH
37490: LD_INT 32
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 30
37499: PUSH
37500: LD_INT 33
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: LIST
37511: PPUSH
37512: CALL_OW 72
37516: IFFALSE 37604
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37518: LD_ADDR_VAR 0 8
37522: PUSH
37523: LD_VAR 0 18
37527: PPUSH
37528: LD_INT 2
37530: PUSH
37531: LD_INT 30
37533: PUSH
37534: LD_INT 32
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 30
37543: PUSH
37544: LD_INT 33
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: LIST
37555: PPUSH
37556: CALL_OW 72
37560: PUSH
37561: FOR_IN
37562: IFFALSE 37602
// begin if not GetBWeapon ( i ) then
37564: LD_VAR 0 8
37568: PPUSH
37569: CALL_OW 269
37573: NOT
37574: IFFALSE 37600
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37576: LD_VAR 0 8
37580: PPUSH
37581: LD_VAR 0 8
37585: PPUSH
37586: LD_VAR 0 2
37590: PPUSH
37591: CALL 38856 0 2
37595: PPUSH
37596: CALL_OW 431
// end ;
37600: GO 37561
37602: POP
37603: POP
// end ; for i = 1 to personel do
37604: LD_ADDR_VAR 0 8
37608: PUSH
37609: DOUBLE
37610: LD_INT 1
37612: DEC
37613: ST_TO_ADDR
37614: LD_VAR 0 6
37618: PUSH
37619: FOR_TO
37620: IFFALSE 38690
// begin if i > 4 then
37622: LD_VAR 0 8
37626: PUSH
37627: LD_INT 4
37629: GREATER
37630: IFFALSE 37634
// break ;
37632: GO 38690
// case i of 1 :
37634: LD_VAR 0 8
37638: PUSH
37639: LD_INT 1
37641: DOUBLE
37642: EQUAL
37643: IFTRUE 37647
37645: GO 37727
37647: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37648: LD_ADDR_VAR 0 12
37652: PUSH
37653: LD_VAR 0 18
37657: PPUSH
37658: LD_INT 22
37660: PUSH
37661: LD_VAR 0 16
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 58
37672: PUSH
37673: EMPTY
37674: LIST
37675: PUSH
37676: LD_INT 2
37678: PUSH
37679: LD_INT 30
37681: PUSH
37682: LD_INT 32
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 30
37691: PUSH
37692: LD_INT 4
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 30
37701: PUSH
37702: LD_INT 5
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: PPUSH
37720: CALL_OW 72
37724: ST_TO_ADDR
37725: GO 37949
37727: LD_INT 2
37729: DOUBLE
37730: EQUAL
37731: IFTRUE 37735
37733: GO 37797
37735: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37736: LD_ADDR_VAR 0 12
37740: PUSH
37741: LD_VAR 0 18
37745: PPUSH
37746: LD_INT 22
37748: PUSH
37749: LD_VAR 0 16
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 2
37760: PUSH
37761: LD_INT 30
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 30
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PPUSH
37790: CALL_OW 72
37794: ST_TO_ADDR
37795: GO 37949
37797: LD_INT 3
37799: DOUBLE
37800: EQUAL
37801: IFTRUE 37805
37803: GO 37867
37805: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37806: LD_ADDR_VAR 0 12
37810: PUSH
37811: LD_VAR 0 18
37815: PPUSH
37816: LD_INT 22
37818: PUSH
37819: LD_VAR 0 16
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 2
37830: PUSH
37831: LD_INT 30
37833: PUSH
37834: LD_INT 2
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 30
37843: PUSH
37844: LD_INT 3
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PPUSH
37860: CALL_OW 72
37864: ST_TO_ADDR
37865: GO 37949
37867: LD_INT 4
37869: DOUBLE
37870: EQUAL
37871: IFTRUE 37875
37873: GO 37948
37875: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37876: LD_ADDR_VAR 0 12
37880: PUSH
37881: LD_VAR 0 18
37885: PPUSH
37886: LD_INT 22
37888: PUSH
37889: LD_VAR 0 16
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: LD_INT 30
37903: PUSH
37904: LD_INT 6
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 30
37913: PUSH
37914: LD_INT 7
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 30
37923: PUSH
37924: LD_INT 8
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PPUSH
37941: CALL_OW 72
37945: ST_TO_ADDR
37946: GO 37949
37948: POP
// if i = 1 then
37949: LD_VAR 0 8
37953: PUSH
37954: LD_INT 1
37956: EQUAL
37957: IFFALSE 38068
// begin tmp := [ ] ;
37959: LD_ADDR_VAR 0 19
37963: PUSH
37964: EMPTY
37965: ST_TO_ADDR
// for j in f do
37966: LD_ADDR_VAR 0 9
37970: PUSH
37971: LD_VAR 0 12
37975: PUSH
37976: FOR_IN
37977: IFFALSE 38050
// if GetBType ( j ) = b_bunker then
37979: LD_VAR 0 9
37983: PPUSH
37984: CALL_OW 266
37988: PUSH
37989: LD_INT 32
37991: EQUAL
37992: IFFALSE 38019
// tmp := Insert ( tmp , 1 , j ) else
37994: LD_ADDR_VAR 0 19
37998: PUSH
37999: LD_VAR 0 19
38003: PPUSH
38004: LD_INT 1
38006: PPUSH
38007: LD_VAR 0 9
38011: PPUSH
38012: CALL_OW 2
38016: ST_TO_ADDR
38017: GO 38048
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38019: LD_ADDR_VAR 0 19
38023: PUSH
38024: LD_VAR 0 19
38028: PPUSH
38029: LD_VAR 0 19
38033: PUSH
38034: LD_INT 1
38036: PLUS
38037: PPUSH
38038: LD_VAR 0 9
38042: PPUSH
38043: CALL_OW 2
38047: ST_TO_ADDR
38048: GO 37976
38050: POP
38051: POP
// if tmp then
38052: LD_VAR 0 19
38056: IFFALSE 38068
// f := tmp ;
38058: LD_ADDR_VAR 0 12
38062: PUSH
38063: LD_VAR 0 19
38067: ST_TO_ADDR
// end ; x := personel [ i ] ;
38068: LD_ADDR_VAR 0 13
38072: PUSH
38073: LD_VAR 0 6
38077: PUSH
38078: LD_VAR 0 8
38082: ARRAY
38083: ST_TO_ADDR
// if x = - 1 then
38084: LD_VAR 0 13
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: EQUAL
38093: IFFALSE 38304
// begin for j in f do
38095: LD_ADDR_VAR 0 9
38099: PUSH
38100: LD_VAR 0 12
38104: PUSH
38105: FOR_IN
38106: IFFALSE 38300
// repeat InitHc ;
38108: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38112: LD_VAR 0 9
38116: PPUSH
38117: CALL_OW 266
38121: PUSH
38122: LD_INT 5
38124: EQUAL
38125: IFFALSE 38195
// begin if UnitsInside ( j ) < 3 then
38127: LD_VAR 0 9
38131: PPUSH
38132: CALL_OW 313
38136: PUSH
38137: LD_INT 3
38139: LESS
38140: IFFALSE 38176
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38142: LD_INT 0
38144: PPUSH
38145: LD_INT 5
38147: PUSH
38148: LD_INT 8
38150: PUSH
38151: LD_INT 9
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: LIST
38158: PUSH
38159: LD_VAR 0 17
38163: ARRAY
38164: PPUSH
38165: LD_VAR 0 4
38169: PPUSH
38170: CALL_OW 380
38174: GO 38193
// PrepareHuman ( false , i , skill ) ;
38176: LD_INT 0
38178: PPUSH
38179: LD_VAR 0 8
38183: PPUSH
38184: LD_VAR 0 4
38188: PPUSH
38189: CALL_OW 380
// end else
38193: GO 38212
// PrepareHuman ( false , i , skill ) ;
38195: LD_INT 0
38197: PPUSH
38198: LD_VAR 0 8
38202: PPUSH
38203: LD_VAR 0 4
38207: PPUSH
38208: CALL_OW 380
// un := CreateHuman ;
38212: LD_ADDR_VAR 0 14
38216: PUSH
38217: CALL_OW 44
38221: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38222: LD_ADDR_VAR 0 7
38226: PUSH
38227: LD_VAR 0 7
38231: PPUSH
38232: LD_INT 1
38234: PPUSH
38235: LD_VAR 0 14
38239: PPUSH
38240: CALL_OW 2
38244: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38245: LD_VAR 0 14
38249: PPUSH
38250: LD_VAR 0 9
38254: PPUSH
38255: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38259: LD_VAR 0 9
38263: PPUSH
38264: CALL_OW 313
38268: PUSH
38269: LD_INT 6
38271: EQUAL
38272: IFTRUE 38296
38274: PUSH
38275: LD_VAR 0 9
38279: PPUSH
38280: CALL_OW 266
38284: PUSH
38285: LD_INT 32
38287: PUSH
38288: LD_INT 31
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: IN
38295: OR
38296: IFFALSE 38108
38298: GO 38105
38300: POP
38301: POP
// end else
38302: GO 38688
// for j = 1 to x do
38304: LD_ADDR_VAR 0 9
38308: PUSH
38309: DOUBLE
38310: LD_INT 1
38312: DEC
38313: ST_TO_ADDR
38314: LD_VAR 0 13
38318: PUSH
38319: FOR_TO
38320: IFFALSE 38686
// begin InitHc ;
38322: CALL_OW 19
// if not f then
38326: LD_VAR 0 12
38330: NOT
38331: IFFALSE 38420
// begin PrepareHuman ( false , i , skill ) ;
38333: LD_INT 0
38335: PPUSH
38336: LD_VAR 0 8
38340: PPUSH
38341: LD_VAR 0 4
38345: PPUSH
38346: CALL_OW 380
// un := CreateHuman ;
38350: LD_ADDR_VAR 0 14
38354: PUSH
38355: CALL_OW 44
38359: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38360: LD_ADDR_VAR 0 7
38364: PUSH
38365: LD_VAR 0 7
38369: PPUSH
38370: LD_INT 1
38372: PPUSH
38373: LD_VAR 0 14
38377: PPUSH
38378: CALL_OW 2
38382: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38383: LD_VAR 0 14
38387: PPUSH
38388: LD_VAR 0 1
38392: PPUSH
38393: CALL_OW 250
38397: PPUSH
38398: LD_VAR 0 1
38402: PPUSH
38403: CALL_OW 251
38407: PPUSH
38408: LD_INT 10
38410: PPUSH
38411: LD_INT 0
38413: PPUSH
38414: CALL_OW 50
// continue ;
38418: GO 38319
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38420: LD_VAR 0 12
38424: PUSH
38425: LD_INT 1
38427: ARRAY
38428: PPUSH
38429: CALL_OW 313
38433: IFFALSE 38461
38435: PUSH
38436: LD_VAR 0 12
38440: PUSH
38441: LD_INT 1
38443: ARRAY
38444: PPUSH
38445: CALL_OW 266
38449: PUSH
38450: LD_INT 32
38452: PUSH
38453: LD_INT 31
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: IN
38460: AND
38461: IFTRUE 38482
38463: PUSH
38464: LD_VAR 0 12
38468: PUSH
38469: LD_INT 1
38471: ARRAY
38472: PPUSH
38473: CALL_OW 313
38477: PUSH
38478: LD_INT 6
38480: EQUAL
38481: OR
38482: IFFALSE 38502
// f := Delete ( f , 1 ) ;
38484: LD_ADDR_VAR 0 12
38488: PUSH
38489: LD_VAR 0 12
38493: PPUSH
38494: LD_INT 1
38496: PPUSH
38497: CALL_OW 3
38501: ST_TO_ADDR
// if not f then
38502: LD_VAR 0 12
38506: NOT
38507: IFFALSE 38525
// begin x := x + 2 ;
38509: LD_ADDR_VAR 0 13
38513: PUSH
38514: LD_VAR 0 13
38518: PUSH
38519: LD_INT 2
38521: PLUS
38522: ST_TO_ADDR
// continue ;
38523: GO 38319
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38525: LD_VAR 0 12
38529: PUSH
38530: LD_INT 1
38532: ARRAY
38533: PPUSH
38534: CALL_OW 266
38538: PUSH
38539: LD_INT 5
38541: EQUAL
38542: IFFALSE 38616
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38544: LD_VAR 0 12
38548: PUSH
38549: LD_INT 1
38551: ARRAY
38552: PPUSH
38553: CALL_OW 313
38557: PUSH
38558: LD_INT 3
38560: LESS
38561: IFFALSE 38597
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38563: LD_INT 0
38565: PPUSH
38566: LD_INT 5
38568: PUSH
38569: LD_INT 8
38571: PUSH
38572: LD_INT 9
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: LIST
38579: PUSH
38580: LD_VAR 0 17
38584: ARRAY
38585: PPUSH
38586: LD_VAR 0 4
38590: PPUSH
38591: CALL_OW 380
38595: GO 38614
// PrepareHuman ( false , i , skill ) ;
38597: LD_INT 0
38599: PPUSH
38600: LD_VAR 0 8
38604: PPUSH
38605: LD_VAR 0 4
38609: PPUSH
38610: CALL_OW 380
// end else
38614: GO 38633
// PrepareHuman ( false , i , skill ) ;
38616: LD_INT 0
38618: PPUSH
38619: LD_VAR 0 8
38623: PPUSH
38624: LD_VAR 0 4
38628: PPUSH
38629: CALL_OW 380
// un := CreateHuman ;
38633: LD_ADDR_VAR 0 14
38637: PUSH
38638: CALL_OW 44
38642: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38643: LD_ADDR_VAR 0 7
38647: PUSH
38648: LD_VAR 0 7
38652: PPUSH
38653: LD_INT 1
38655: PPUSH
38656: LD_VAR 0 14
38660: PPUSH
38661: CALL_OW 2
38665: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38666: LD_VAR 0 14
38670: PPUSH
38671: LD_VAR 0 12
38675: PUSH
38676: LD_INT 1
38678: ARRAY
38679: PPUSH
38680: CALL_OW 52
// end ;
38684: GO 38319
38686: POP
38687: POP
// end ;
38688: GO 37619
38690: POP
38691: POP
// result := result ^ buildings ;
38692: LD_ADDR_VAR 0 7
38696: PUSH
38697: LD_VAR 0 7
38701: PUSH
38702: LD_VAR 0 18
38706: ADD
38707: ST_TO_ADDR
// end else
38708: GO 38851
// begin for i = 1 to personel do
38710: LD_ADDR_VAR 0 8
38714: PUSH
38715: DOUBLE
38716: LD_INT 1
38718: DEC
38719: ST_TO_ADDR
38720: LD_VAR 0 6
38724: PUSH
38725: FOR_TO
38726: IFFALSE 38849
// begin if i > 4 then
38728: LD_VAR 0 8
38732: PUSH
38733: LD_INT 4
38735: GREATER
38736: IFFALSE 38740
// break ;
38738: GO 38849
// x := personel [ i ] ;
38740: LD_ADDR_VAR 0 13
38744: PUSH
38745: LD_VAR 0 6
38749: PUSH
38750: LD_VAR 0 8
38754: ARRAY
38755: ST_TO_ADDR
// if x = - 1 then
38756: LD_VAR 0 13
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: EQUAL
38765: IFFALSE 38769
// continue ;
38767: GO 38725
// PrepareHuman ( false , i , skill ) ;
38769: LD_INT 0
38771: PPUSH
38772: LD_VAR 0 8
38776: PPUSH
38777: LD_VAR 0 4
38781: PPUSH
38782: CALL_OW 380
// un := CreateHuman ;
38786: LD_ADDR_VAR 0 14
38790: PUSH
38791: CALL_OW 44
38795: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38796: LD_VAR 0 14
38800: PPUSH
38801: LD_VAR 0 1
38805: PPUSH
38806: CALL_OW 250
38810: PPUSH
38811: LD_VAR 0 1
38815: PPUSH
38816: CALL_OW 251
38820: PPUSH
38821: LD_INT 10
38823: PPUSH
38824: LD_INT 0
38826: PPUSH
38827: CALL_OW 50
// result := result ^ un ;
38831: LD_ADDR_VAR 0 7
38835: PUSH
38836: LD_VAR 0 7
38840: PUSH
38841: LD_VAR 0 14
38845: ADD
38846: ST_TO_ADDR
// end ;
38847: GO 38725
38849: POP
38850: POP
// end ; end ;
38851: LD_VAR 0 7
38855: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38856: LD_INT 0
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
38870: PPUSH
38871: PPUSH
38872: PPUSH
38873: PPUSH
// result := false ;
38874: LD_ADDR_VAR 0 3
38878: PUSH
38879: LD_INT 0
38881: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38882: LD_VAR 0 1
38886: NOT
38887: IFTRUE 38912
38889: PUSH
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL_OW 266
38899: PUSH
38900: LD_INT 32
38902: PUSH
38903: LD_INT 33
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: IN
38910: NOT
38911: OR
38912: IFFALSE 38916
// exit ;
38914: GO 40051
// nat := GetNation ( tower ) ;
38916: LD_ADDR_VAR 0 12
38920: PUSH
38921: LD_VAR 0 1
38925: PPUSH
38926: CALL_OW 248
38930: ST_TO_ADDR
// side := GetSide ( tower ) ;
38931: LD_ADDR_VAR 0 16
38935: PUSH
38936: LD_VAR 0 1
38940: PPUSH
38941: CALL_OW 255
38945: ST_TO_ADDR
// x := GetX ( tower ) ;
38946: LD_ADDR_VAR 0 10
38950: PUSH
38951: LD_VAR 0 1
38955: PPUSH
38956: CALL_OW 250
38960: ST_TO_ADDR
// y := GetY ( tower ) ;
38961: LD_ADDR_VAR 0 11
38965: PUSH
38966: LD_VAR 0 1
38970: PPUSH
38971: CALL_OW 251
38975: ST_TO_ADDR
// if not x or not y then
38976: LD_VAR 0 10
38980: NOT
38981: IFTRUE 38990
38983: PUSH
38984: LD_VAR 0 11
38988: NOT
38989: OR
38990: IFFALSE 38994
// exit ;
38992: GO 40051
// weapon := 0 ;
38994: LD_ADDR_VAR 0 18
38998: PUSH
38999: LD_INT 0
39001: ST_TO_ADDR
// fac_list := [ ] ;
39002: LD_ADDR_VAR 0 17
39006: PUSH
39007: EMPTY
39008: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39009: LD_ADDR_VAR 0 6
39013: PUSH
39014: LD_VAR 0 1
39018: PPUSH
39019: CALL_OW 274
39023: PPUSH
39024: LD_VAR 0 2
39028: PPUSH
39029: LD_INT 0
39031: PPUSH
39032: CALL 36586 0 3
39036: PPUSH
39037: LD_INT 30
39039: PUSH
39040: LD_INT 3
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PPUSH
39047: CALL_OW 72
39051: ST_TO_ADDR
// if not factories then
39052: LD_VAR 0 6
39056: NOT
39057: IFFALSE 39061
// exit ;
39059: GO 40051
// for i in factories do
39061: LD_ADDR_VAR 0 8
39065: PUSH
39066: LD_VAR 0 6
39070: PUSH
39071: FOR_IN
39072: IFFALSE 39097
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39074: LD_ADDR_VAR 0 17
39078: PUSH
39079: LD_VAR 0 17
39083: PUSH
39084: LD_VAR 0 8
39088: PPUSH
39089: CALL_OW 478
39093: UNION
39094: ST_TO_ADDR
39095: GO 39071
39097: POP
39098: POP
// if not fac_list then
39099: LD_VAR 0 17
39103: NOT
39104: IFFALSE 39108
// exit ;
39106: GO 40051
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39108: LD_ADDR_VAR 0 5
39112: PUSH
39113: LD_INT 4
39115: PUSH
39116: LD_INT 5
39118: PUSH
39119: LD_INT 9
39121: PUSH
39122: LD_INT 10
39124: PUSH
39125: LD_INT 6
39127: PUSH
39128: LD_INT 7
39130: PUSH
39131: LD_INT 11
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 27
39145: PUSH
39146: LD_INT 28
39148: PUSH
39149: LD_INT 26
39151: PUSH
39152: LD_INT 30
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 43
39163: PUSH
39164: LD_INT 44
39166: PUSH
39167: LD_INT 46
39169: PUSH
39170: LD_INT 45
39172: PUSH
39173: LD_INT 47
39175: PUSH
39176: LD_INT 49
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: LIST
39191: PUSH
39192: LD_VAR 0 12
39196: ARRAY
39197: ST_TO_ADDR
// list := list isect fac_list ;
39198: LD_ADDR_VAR 0 5
39202: PUSH
39203: LD_VAR 0 5
39207: PUSH
39208: LD_VAR 0 17
39212: ISECT
39213: ST_TO_ADDR
// if not list then
39214: LD_VAR 0 5
39218: NOT
39219: IFFALSE 39223
// exit ;
39221: GO 40051
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39223: LD_VAR 0 12
39227: PUSH
39228: LD_INT 3
39230: EQUAL
39231: IFFALSE 39243
39233: PUSH
39234: LD_INT 49
39236: PUSH
39237: LD_VAR 0 5
39241: IN
39242: AND
39243: IFFALSE 39263
39245: PUSH
39246: LD_INT 31
39248: PPUSH
39249: LD_VAR 0 16
39253: PPUSH
39254: CALL_OW 321
39258: PUSH
39259: LD_INT 2
39261: EQUAL
39262: AND
39263: IFFALSE 39323
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39265: LD_INT 22
39267: PUSH
39268: LD_VAR 0 16
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 35
39279: PUSH
39280: LD_INT 49
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 91
39289: PUSH
39290: LD_VAR 0 1
39294: PUSH
39295: LD_INT 10
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: LIST
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: PPUSH
39308: CALL_OW 69
39312: NOT
39313: IFFALSE 39323
// weapon := ru_time_lapser ;
39315: LD_ADDR_VAR 0 18
39319: PUSH
39320: LD_INT 49
39322: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39323: LD_VAR 0 12
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: IN
39338: IFFALSE 39362
39340: PUSH
39341: LD_INT 11
39343: PUSH
39344: LD_VAR 0 5
39348: IN
39349: IFTRUE 39361
39351: PUSH
39352: LD_INT 30
39354: PUSH
39355: LD_VAR 0 5
39359: IN
39360: OR
39361: AND
39362: IFFALSE 39382
39364: PUSH
39365: LD_INT 6
39367: PPUSH
39368: LD_VAR 0 16
39372: PPUSH
39373: CALL_OW 321
39377: PUSH
39378: LD_INT 2
39380: EQUAL
39381: AND
39382: IFFALSE 39549
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39384: LD_INT 22
39386: PUSH
39387: LD_VAR 0 16
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: LD_INT 35
39401: PUSH
39402: LD_INT 11
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 35
39411: PUSH
39412: LD_INT 30
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 91
39426: PUSH
39427: LD_VAR 0 1
39431: PUSH
39432: LD_INT 18
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: LIST
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: PPUSH
39445: CALL_OW 69
39449: NOT
39450: IFFALSE 39526
39452: PUSH
39453: LD_INT 22
39455: PUSH
39456: LD_VAR 0 16
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: LD_INT 30
39470: PUSH
39471: LD_INT 32
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 30
39480: PUSH
39481: LD_INT 33
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 91
39495: PUSH
39496: LD_VAR 0 1
39500: PUSH
39501: LD_INT 12
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: LIST
39513: PUSH
39514: EMPTY
39515: LIST
39516: PPUSH
39517: CALL_OW 69
39521: PUSH
39522: LD_INT 2
39524: GREATER
39525: AND
39526: IFFALSE 39549
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39528: LD_ADDR_VAR 0 18
39532: PUSH
39533: LD_INT 11
39535: PUSH
39536: LD_INT 30
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_VAR 0 12
39547: ARRAY
39548: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39549: LD_VAR 0 18
39553: NOT
39554: IFFALSE 39574
39556: PUSH
39557: LD_INT 40
39559: PPUSH
39560: LD_VAR 0 16
39564: PPUSH
39565: CALL_OW 321
39569: PUSH
39570: LD_INT 2
39572: EQUAL
39573: AND
39574: IFFALSE 39610
39576: PUSH
39577: LD_INT 7
39579: PUSH
39580: LD_VAR 0 5
39584: IN
39585: IFTRUE 39597
39587: PUSH
39588: LD_INT 28
39590: PUSH
39591: LD_VAR 0 5
39595: IN
39596: OR
39597: IFTRUE 39609
39599: PUSH
39600: LD_INT 45
39602: PUSH
39603: LD_VAR 0 5
39607: IN
39608: OR
39609: AND
39610: IFFALSE 39864
// begin hex := GetHexInfo ( x , y ) ;
39612: LD_ADDR_VAR 0 4
39616: PUSH
39617: LD_VAR 0 10
39621: PPUSH
39622: LD_VAR 0 11
39626: PPUSH
39627: CALL_OW 546
39631: ST_TO_ADDR
// if hex [ 1 ] then
39632: LD_VAR 0 4
39636: PUSH
39637: LD_INT 1
39639: ARRAY
39640: IFFALSE 39644
// exit ;
39642: GO 40051
// height := hex [ 2 ] ;
39644: LD_ADDR_VAR 0 15
39648: PUSH
39649: LD_VAR 0 4
39653: PUSH
39654: LD_INT 2
39656: ARRAY
39657: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39658: LD_ADDR_VAR 0 14
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: LD_INT 2
39668: PUSH
39669: LD_INT 3
39671: PUSH
39672: LD_INT 5
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: ST_TO_ADDR
// for i in tmp do
39681: LD_ADDR_VAR 0 8
39685: PUSH
39686: LD_VAR 0 14
39690: PUSH
39691: FOR_IN
39692: IFFALSE 39862
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39694: LD_ADDR_VAR 0 9
39698: PUSH
39699: LD_VAR 0 10
39703: PPUSH
39704: LD_VAR 0 8
39708: PPUSH
39709: LD_INT 5
39711: PPUSH
39712: CALL_OW 272
39716: PUSH
39717: LD_VAR 0 11
39721: PPUSH
39722: LD_VAR 0 8
39726: PPUSH
39727: LD_INT 5
39729: PPUSH
39730: CALL_OW 273
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39739: LD_VAR 0 9
39743: PUSH
39744: LD_INT 1
39746: ARRAY
39747: PPUSH
39748: LD_VAR 0 9
39752: PUSH
39753: LD_INT 2
39755: ARRAY
39756: PPUSH
39757: CALL_OW 488
39761: IFFALSE 39860
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39763: LD_ADDR_VAR 0 4
39767: PUSH
39768: LD_VAR 0 9
39772: PUSH
39773: LD_INT 1
39775: ARRAY
39776: PPUSH
39777: LD_VAR 0 9
39781: PUSH
39782: LD_INT 2
39784: ARRAY
39785: PPUSH
39786: CALL_OW 546
39790: ST_TO_ADDR
// if hex [ 1 ] then
39791: LD_VAR 0 4
39795: PUSH
39796: LD_INT 1
39798: ARRAY
39799: IFFALSE 39803
// continue ;
39801: GO 39691
// h := hex [ 2 ] ;
39803: LD_ADDR_VAR 0 13
39807: PUSH
39808: LD_VAR 0 4
39812: PUSH
39813: LD_INT 2
39815: ARRAY
39816: ST_TO_ADDR
// if h + 7 < height then
39817: LD_VAR 0 13
39821: PUSH
39822: LD_INT 7
39824: PLUS
39825: PUSH
39826: LD_VAR 0 15
39830: LESS
39831: IFFALSE 39860
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39833: LD_ADDR_VAR 0 18
39837: PUSH
39838: LD_INT 7
39840: PUSH
39841: LD_INT 28
39843: PUSH
39844: LD_INT 45
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: LIST
39851: PUSH
39852: LD_VAR 0 12
39856: ARRAY
39857: ST_TO_ADDR
// break ;
39858: GO 39862
// end ; end ; end ;
39860: GO 39691
39862: POP
39863: POP
// end ; if not weapon then
39864: LD_VAR 0 18
39868: NOT
39869: IFFALSE 39929
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39871: LD_ADDR_VAR 0 5
39875: PUSH
39876: LD_VAR 0 5
39880: PUSH
39881: LD_INT 11
39883: PUSH
39884: LD_INT 30
39886: PUSH
39887: LD_INT 49
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: LIST
39894: DIFF
39895: ST_TO_ADDR
// if not list then
39896: LD_VAR 0 5
39900: NOT
39901: IFFALSE 39905
// exit ;
39903: GO 40051
// weapon := list [ rand ( 1 , list ) ] ;
39905: LD_ADDR_VAR 0 18
39909: PUSH
39910: LD_VAR 0 5
39914: PUSH
39915: LD_INT 1
39917: PPUSH
39918: LD_VAR 0 5
39922: PPUSH
39923: CALL_OW 12
39927: ARRAY
39928: ST_TO_ADDR
// end ; if weapon then
39929: LD_VAR 0 18
39933: IFFALSE 40051
// begin tmp := CostOfWeapon ( weapon ) ;
39935: LD_ADDR_VAR 0 14
39939: PUSH
39940: LD_VAR 0 18
39944: PPUSH
39945: CALL_OW 451
39949: ST_TO_ADDR
// j := GetBase ( tower ) ;
39950: LD_ADDR_VAR 0 9
39954: PUSH
39955: LD_VAR 0 1
39959: PPUSH
39960: CALL_OW 274
39964: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39965: LD_VAR 0 9
39969: PPUSH
39970: LD_INT 1
39972: PPUSH
39973: CALL_OW 275
39977: PUSH
39978: LD_VAR 0 14
39982: PUSH
39983: LD_INT 1
39985: ARRAY
39986: GREATEREQUAL
39987: IFFALSE 40013
39989: PUSH
39990: LD_VAR 0 9
39994: PPUSH
39995: LD_INT 2
39997: PPUSH
39998: CALL_OW 275
40002: PUSH
40003: LD_VAR 0 14
40007: PUSH
40008: LD_INT 2
40010: ARRAY
40011: GREATEREQUAL
40012: AND
40013: IFFALSE 40039
40015: PUSH
40016: LD_VAR 0 9
40020: PPUSH
40021: LD_INT 3
40023: PPUSH
40024: CALL_OW 275
40028: PUSH
40029: LD_VAR 0 14
40033: PUSH
40034: LD_INT 3
40036: ARRAY
40037: GREATEREQUAL
40038: AND
40039: IFFALSE 40051
// result := weapon ;
40041: LD_ADDR_VAR 0 3
40045: PUSH
40046: LD_VAR 0 18
40050: ST_TO_ADDR
// end ; end ;
40051: LD_VAR 0 3
40055: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40056: LD_INT 0
40058: PPUSH
40059: PPUSH
// result := true ;
40060: LD_ADDR_VAR 0 3
40064: PUSH
40065: LD_INT 1
40067: ST_TO_ADDR
// if array1 = array2 then
40068: LD_VAR 0 1
40072: PUSH
40073: LD_VAR 0 2
40077: EQUAL
40078: IFFALSE 40138
// begin for i = 1 to array1 do
40080: LD_ADDR_VAR 0 4
40084: PUSH
40085: DOUBLE
40086: LD_INT 1
40088: DEC
40089: ST_TO_ADDR
40090: LD_VAR 0 1
40094: PUSH
40095: FOR_TO
40096: IFFALSE 40134
// if array1 [ i ] <> array2 [ i ] then
40098: LD_VAR 0 1
40102: PUSH
40103: LD_VAR 0 4
40107: ARRAY
40108: PUSH
40109: LD_VAR 0 2
40113: PUSH
40114: LD_VAR 0 4
40118: ARRAY
40119: NONEQUAL
40120: IFFALSE 40132
// begin result := false ;
40122: LD_ADDR_VAR 0 3
40126: PUSH
40127: LD_INT 0
40129: ST_TO_ADDR
// break ;
40130: GO 40134
// end ;
40132: GO 40095
40134: POP
40135: POP
// end else
40136: GO 40146
// result := false ;
40138: LD_ADDR_VAR 0 3
40142: PUSH
40143: LD_INT 0
40145: ST_TO_ADDR
// end ;
40146: LD_VAR 0 3
40150: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40151: LD_INT 0
40153: PPUSH
40154: PPUSH
// if not array1 or not array2 then
40155: LD_VAR 0 1
40159: NOT
40160: IFTRUE 40169
40162: PUSH
40163: LD_VAR 0 2
40167: NOT
40168: OR
40169: IFFALSE 40173
// exit ;
40171: GO 40237
// result := true ;
40173: LD_ADDR_VAR 0 3
40177: PUSH
40178: LD_INT 1
40180: ST_TO_ADDR
// for i = 1 to array1 do
40181: LD_ADDR_VAR 0 4
40185: PUSH
40186: DOUBLE
40187: LD_INT 1
40189: DEC
40190: ST_TO_ADDR
40191: LD_VAR 0 1
40195: PUSH
40196: FOR_TO
40197: IFFALSE 40235
// if array1 [ i ] <> array2 [ i ] then
40199: LD_VAR 0 1
40203: PUSH
40204: LD_VAR 0 4
40208: ARRAY
40209: PUSH
40210: LD_VAR 0 2
40214: PUSH
40215: LD_VAR 0 4
40219: ARRAY
40220: NONEQUAL
40221: IFFALSE 40233
// begin result := false ;
40223: LD_ADDR_VAR 0 3
40227: PUSH
40228: LD_INT 0
40230: ST_TO_ADDR
// break ;
40231: GO 40235
// end ;
40233: GO 40196
40235: POP
40236: POP
// end ;
40237: LD_VAR 0 3
40241: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40242: LD_INT 0
40244: PPUSH
40245: PPUSH
40246: PPUSH
// pom := GetBase ( fac ) ;
40247: LD_ADDR_VAR 0 5
40251: PUSH
40252: LD_VAR 0 1
40256: PPUSH
40257: CALL_OW 274
40261: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40262: LD_ADDR_VAR 0 4
40266: PUSH
40267: LD_VAR 0 2
40271: PUSH
40272: LD_INT 1
40274: ARRAY
40275: PPUSH
40276: LD_VAR 0 2
40280: PUSH
40281: LD_INT 2
40283: ARRAY
40284: PPUSH
40285: LD_VAR 0 2
40289: PUSH
40290: LD_INT 3
40292: ARRAY
40293: PPUSH
40294: LD_VAR 0 2
40298: PUSH
40299: LD_INT 4
40301: ARRAY
40302: PPUSH
40303: CALL_OW 449
40307: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40308: LD_ADDR_VAR 0 3
40312: PUSH
40313: LD_VAR 0 5
40317: PPUSH
40318: LD_INT 1
40320: PPUSH
40321: CALL_OW 275
40325: PUSH
40326: LD_VAR 0 4
40330: PUSH
40331: LD_INT 1
40333: ARRAY
40334: GREATEREQUAL
40335: IFFALSE 40361
40337: PUSH
40338: LD_VAR 0 5
40342: PPUSH
40343: LD_INT 2
40345: PPUSH
40346: CALL_OW 275
40350: PUSH
40351: LD_VAR 0 4
40355: PUSH
40356: LD_INT 2
40358: ARRAY
40359: GREATEREQUAL
40360: AND
40361: IFFALSE 40387
40363: PUSH
40364: LD_VAR 0 5
40368: PPUSH
40369: LD_INT 3
40371: PPUSH
40372: CALL_OW 275
40376: PUSH
40377: LD_VAR 0 4
40381: PUSH
40382: LD_INT 3
40384: ARRAY
40385: GREATEREQUAL
40386: AND
40387: ST_TO_ADDR
// end ;
40388: LD_VAR 0 3
40392: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40393: LD_INT 0
40395: PPUSH
40396: PPUSH
40397: PPUSH
40398: PPUSH
// pom := GetBase ( building ) ;
40399: LD_ADDR_VAR 0 3
40403: PUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL_OW 274
40413: ST_TO_ADDR
// if not pom then
40414: LD_VAR 0 3
40418: NOT
40419: IFFALSE 40423
// exit ;
40421: GO 40597
// btype := GetBType ( building ) ;
40423: LD_ADDR_VAR 0 5
40427: PUSH
40428: LD_VAR 0 1
40432: PPUSH
40433: CALL_OW 266
40437: ST_TO_ADDR
// if btype = b_armoury then
40438: LD_VAR 0 5
40442: PUSH
40443: LD_INT 4
40445: EQUAL
40446: IFFALSE 40456
// btype := b_barracks ;
40448: LD_ADDR_VAR 0 5
40452: PUSH
40453: LD_INT 5
40455: ST_TO_ADDR
// if btype = b_depot then
40456: LD_VAR 0 5
40460: PUSH
40461: LD_INT 0
40463: EQUAL
40464: IFFALSE 40474
// btype := b_warehouse ;
40466: LD_ADDR_VAR 0 5
40470: PUSH
40471: LD_INT 1
40473: ST_TO_ADDR
// if btype = b_workshop then
40474: LD_VAR 0 5
40478: PUSH
40479: LD_INT 2
40481: EQUAL
40482: IFFALSE 40492
// btype := b_factory ;
40484: LD_ADDR_VAR 0 5
40488: PUSH
40489: LD_INT 3
40491: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40492: LD_ADDR_VAR 0 4
40496: PUSH
40497: LD_VAR 0 5
40501: PPUSH
40502: LD_VAR 0 1
40506: PPUSH
40507: CALL_OW 248
40511: PPUSH
40512: CALL_OW 450
40516: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40517: LD_ADDR_VAR 0 2
40521: PUSH
40522: LD_VAR 0 3
40526: PPUSH
40527: LD_INT 1
40529: PPUSH
40530: CALL_OW 275
40534: PUSH
40535: LD_VAR 0 4
40539: PUSH
40540: LD_INT 1
40542: ARRAY
40543: GREATEREQUAL
40544: IFFALSE 40570
40546: PUSH
40547: LD_VAR 0 3
40551: PPUSH
40552: LD_INT 2
40554: PPUSH
40555: CALL_OW 275
40559: PUSH
40560: LD_VAR 0 4
40564: PUSH
40565: LD_INT 2
40567: ARRAY
40568: GREATEREQUAL
40569: AND
40570: IFFALSE 40596
40572: PUSH
40573: LD_VAR 0 3
40577: PPUSH
40578: LD_INT 3
40580: PPUSH
40581: CALL_OW 275
40585: PUSH
40586: LD_VAR 0 4
40590: PUSH
40591: LD_INT 3
40593: ARRAY
40594: GREATEREQUAL
40595: AND
40596: ST_TO_ADDR
// end ;
40597: LD_VAR 0 2
40601: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40602: LD_INT 0
40604: PPUSH
40605: PPUSH
40606: PPUSH
// pom := GetBase ( building ) ;
40607: LD_ADDR_VAR 0 4
40611: PUSH
40612: LD_VAR 0 1
40616: PPUSH
40617: CALL_OW 274
40621: ST_TO_ADDR
// if not pom then
40622: LD_VAR 0 4
40626: NOT
40627: IFFALSE 40631
// exit ;
40629: GO 40736
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40631: LD_ADDR_VAR 0 5
40635: PUSH
40636: LD_VAR 0 2
40640: PPUSH
40641: LD_VAR 0 1
40645: PPUSH
40646: CALL_OW 248
40650: PPUSH
40651: CALL_OW 450
40655: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40656: LD_ADDR_VAR 0 3
40660: PUSH
40661: LD_VAR 0 4
40665: PPUSH
40666: LD_INT 1
40668: PPUSH
40669: CALL_OW 275
40673: PUSH
40674: LD_VAR 0 5
40678: PUSH
40679: LD_INT 1
40681: ARRAY
40682: GREATEREQUAL
40683: IFFALSE 40709
40685: PUSH
40686: LD_VAR 0 4
40690: PPUSH
40691: LD_INT 2
40693: PPUSH
40694: CALL_OW 275
40698: PUSH
40699: LD_VAR 0 5
40703: PUSH
40704: LD_INT 2
40706: ARRAY
40707: GREATEREQUAL
40708: AND
40709: IFFALSE 40735
40711: PUSH
40712: LD_VAR 0 4
40716: PPUSH
40717: LD_INT 3
40719: PPUSH
40720: CALL_OW 275
40724: PUSH
40725: LD_VAR 0 5
40729: PUSH
40730: LD_INT 3
40732: ARRAY
40733: GREATEREQUAL
40734: AND
40735: ST_TO_ADDR
// end ;
40736: LD_VAR 0 3
40740: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40741: LD_INT 0
40743: PPUSH
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
// result := false ;
40754: LD_ADDR_VAR 0 8
40758: PUSH
40759: LD_INT 0
40761: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40762: LD_VAR 0 5
40766: NOT
40767: IFTRUE 40776
40769: PUSH
40770: LD_VAR 0 1
40774: NOT
40775: OR
40776: IFTRUE 40785
40778: PUSH
40779: LD_VAR 0 2
40783: NOT
40784: OR
40785: IFTRUE 40794
40787: PUSH
40788: LD_VAR 0 3
40792: NOT
40793: OR
40794: IFFALSE 40798
// exit ;
40796: GO 41624
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40798: LD_ADDR_VAR 0 14
40802: PUSH
40803: LD_VAR 0 1
40807: PPUSH
40808: LD_VAR 0 2
40812: PPUSH
40813: LD_VAR 0 3
40817: PPUSH
40818: LD_VAR 0 4
40822: PPUSH
40823: LD_VAR 0 5
40827: PUSH
40828: LD_INT 1
40830: ARRAY
40831: PPUSH
40832: CALL_OW 248
40836: PPUSH
40837: LD_INT 0
40839: PPUSH
40840: CALL 42905 0 6
40844: ST_TO_ADDR
// if not hexes then
40845: LD_VAR 0 14
40849: NOT
40850: IFFALSE 40854
// exit ;
40852: GO 41624
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40854: LD_ADDR_VAR 0 17
40858: PUSH
40859: LD_VAR 0 5
40863: PPUSH
40864: LD_INT 22
40866: PUSH
40867: LD_VAR 0 13
40871: PPUSH
40872: CALL_OW 255
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 30
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 30
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PPUSH
40913: CALL_OW 72
40917: ST_TO_ADDR
// for i = 1 to hexes do
40918: LD_ADDR_VAR 0 9
40922: PUSH
40923: DOUBLE
40924: LD_INT 1
40926: DEC
40927: ST_TO_ADDR
40928: LD_VAR 0 14
40932: PUSH
40933: FOR_TO
40934: IFFALSE 41622
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40936: LD_ADDR_VAR 0 13
40940: PUSH
40941: LD_VAR 0 14
40945: PUSH
40946: LD_VAR 0 9
40950: ARRAY
40951: PUSH
40952: LD_INT 1
40954: ARRAY
40955: PPUSH
40956: LD_VAR 0 14
40960: PUSH
40961: LD_VAR 0 9
40965: ARRAY
40966: PUSH
40967: LD_INT 2
40969: ARRAY
40970: PPUSH
40971: CALL_OW 428
40975: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40976: LD_VAR 0 14
40980: PUSH
40981: LD_VAR 0 9
40985: ARRAY
40986: PUSH
40987: LD_INT 1
40989: ARRAY
40990: PPUSH
40991: LD_VAR 0 14
40995: PUSH
40996: LD_VAR 0 9
41000: ARRAY
41001: PUSH
41002: LD_INT 2
41004: ARRAY
41005: PPUSH
41006: CALL_OW 351
41010: IFTRUE 41049
41012: PUSH
41013: LD_VAR 0 14
41017: PUSH
41018: LD_VAR 0 9
41022: ARRAY
41023: PUSH
41024: LD_INT 1
41026: ARRAY
41027: PPUSH
41028: LD_VAR 0 14
41032: PUSH
41033: LD_VAR 0 9
41037: ARRAY
41038: PUSH
41039: LD_INT 2
41041: ARRAY
41042: PPUSH
41043: CALL_OW 488
41047: NOT
41048: OR
41049: IFTRUE 41066
41051: PUSH
41052: LD_VAR 0 13
41056: PPUSH
41057: CALL_OW 247
41061: PUSH
41062: LD_INT 3
41064: EQUAL
41065: OR
41066: IFFALSE 41072
// exit ;
41068: POP
41069: POP
41070: GO 41624
// if not tmp then
41072: LD_VAR 0 13
41076: NOT
41077: IFFALSE 41081
// continue ;
41079: GO 40933
// result := true ;
41081: LD_ADDR_VAR 0 8
41085: PUSH
41086: LD_INT 1
41088: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41089: LD_VAR 0 6
41093: IFFALSE 41110
41095: PUSH
41096: LD_VAR 0 13
41100: PPUSH
41101: CALL_OW 247
41105: PUSH
41106: LD_INT 2
41108: EQUAL
41109: AND
41110: IFFALSE 41127
41112: PUSH
41113: LD_VAR 0 13
41117: PPUSH
41118: CALL_OW 263
41122: PUSH
41123: LD_INT 1
41125: EQUAL
41126: AND
41127: IFFALSE 41291
// begin if IsDrivenBy ( tmp ) then
41129: LD_VAR 0 13
41133: PPUSH
41134: CALL_OW 311
41138: IFFALSE 41142
// continue ;
41140: GO 40933
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41142: LD_VAR 0 6
41146: PPUSH
41147: LD_INT 3
41149: PUSH
41150: LD_INT 60
41152: PUSH
41153: EMPTY
41154: LIST
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 3
41162: PUSH
41163: LD_INT 55
41165: PUSH
41166: EMPTY
41167: LIST
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PPUSH
41177: CALL_OW 72
41181: IFFALSE 41289
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41183: LD_ADDR_VAR 0 18
41187: PUSH
41188: LD_VAR 0 6
41192: PPUSH
41193: LD_INT 3
41195: PUSH
41196: LD_INT 60
41198: PUSH
41199: EMPTY
41200: LIST
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 3
41208: PUSH
41209: LD_INT 55
41211: PUSH
41212: EMPTY
41213: LIST
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PPUSH
41223: CALL_OW 72
41227: PUSH
41228: LD_INT 1
41230: ARRAY
41231: ST_TO_ADDR
// if IsInUnit ( driver ) then
41232: LD_VAR 0 18
41236: PPUSH
41237: CALL_OW 310
41241: IFFALSE 41252
// ComExit ( driver ) ;
41243: LD_VAR 0 18
41247: PPUSH
41248: CALL 66905 0 1
// AddComEnterUnit ( driver , tmp ) ;
41252: LD_VAR 0 18
41256: PPUSH
41257: LD_VAR 0 13
41261: PPUSH
41262: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41266: LD_VAR 0 18
41270: PPUSH
41271: LD_VAR 0 7
41275: PPUSH
41276: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41280: LD_VAR 0 18
41284: PPUSH
41285: CALL_OW 181
// end ; continue ;
41289: GO 40933
// end ; if not cleaners or not tmp in cleaners then
41291: LD_VAR 0 6
41295: NOT
41296: IFTRUE 41311
41298: PUSH
41299: LD_VAR 0 13
41303: PUSH
41304: LD_VAR 0 6
41308: IN
41309: NOT
41310: OR
41311: IFFALSE 41620
// begin if dep then
41313: LD_VAR 0 17
41317: IFFALSE 41453
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41319: LD_ADDR_VAR 0 16
41323: PUSH
41324: LD_VAR 0 17
41328: PUSH
41329: LD_INT 1
41331: ARRAY
41332: PPUSH
41333: CALL_OW 250
41337: PPUSH
41338: LD_VAR 0 17
41342: PUSH
41343: LD_INT 1
41345: ARRAY
41346: PPUSH
41347: CALL_OW 254
41351: PPUSH
41352: LD_INT 5
41354: PPUSH
41355: CALL_OW 272
41359: PUSH
41360: LD_VAR 0 17
41364: PUSH
41365: LD_INT 1
41367: ARRAY
41368: PPUSH
41369: CALL_OW 251
41373: PPUSH
41374: LD_VAR 0 17
41378: PUSH
41379: LD_INT 1
41381: ARRAY
41382: PPUSH
41383: CALL_OW 254
41387: PPUSH
41388: LD_INT 5
41390: PPUSH
41391: CALL_OW 273
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41400: LD_VAR 0 16
41404: PUSH
41405: LD_INT 1
41407: ARRAY
41408: PPUSH
41409: LD_VAR 0 16
41413: PUSH
41414: LD_INT 2
41416: ARRAY
41417: PPUSH
41418: CALL_OW 488
41422: IFFALSE 41453
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41424: LD_VAR 0 13
41428: PPUSH
41429: LD_VAR 0 16
41433: PUSH
41434: LD_INT 1
41436: ARRAY
41437: PPUSH
41438: LD_VAR 0 16
41442: PUSH
41443: LD_INT 2
41445: ARRAY
41446: PPUSH
41447: CALL_OW 111
// continue ;
41451: GO 40933
// end ; end ; r := GetDir ( tmp ) ;
41453: LD_ADDR_VAR 0 15
41457: PUSH
41458: LD_VAR 0 13
41462: PPUSH
41463: CALL_OW 254
41467: ST_TO_ADDR
// if r = 5 then
41468: LD_VAR 0 15
41472: PUSH
41473: LD_INT 5
41475: EQUAL
41476: IFFALSE 41486
// r := 0 ;
41478: LD_ADDR_VAR 0 15
41482: PUSH
41483: LD_INT 0
41485: ST_TO_ADDR
// for j = r to 5 do
41486: LD_ADDR_VAR 0 10
41490: PUSH
41491: DOUBLE
41492: LD_VAR 0 15
41496: DEC
41497: ST_TO_ADDR
41498: LD_INT 5
41500: PUSH
41501: FOR_TO
41502: IFFALSE 41618
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41504: LD_ADDR_VAR 0 11
41508: PUSH
41509: LD_VAR 0 13
41513: PPUSH
41514: CALL_OW 250
41518: PPUSH
41519: LD_VAR 0 10
41523: PPUSH
41524: LD_INT 2
41526: PPUSH
41527: CALL_OW 272
41531: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41532: LD_ADDR_VAR 0 12
41536: PUSH
41537: LD_VAR 0 13
41541: PPUSH
41542: CALL_OW 251
41546: PPUSH
41547: LD_VAR 0 10
41551: PPUSH
41552: LD_INT 2
41554: PPUSH
41555: CALL_OW 273
41559: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41560: LD_VAR 0 11
41564: PPUSH
41565: LD_VAR 0 12
41569: PPUSH
41570: CALL_OW 488
41574: IFFALSE 41593
41576: PUSH
41577: LD_VAR 0 11
41581: PPUSH
41582: LD_VAR 0 12
41586: PPUSH
41587: CALL_OW 428
41591: NOT
41592: AND
41593: IFFALSE 41616
// begin ComMoveXY ( tmp , _x , _y ) ;
41595: LD_VAR 0 13
41599: PPUSH
41600: LD_VAR 0 11
41604: PPUSH
41605: LD_VAR 0 12
41609: PPUSH
41610: CALL_OW 111
// break ;
41614: GO 41618
// end ; end ;
41616: GO 41501
41618: POP
41619: POP
// end ; end ;
41620: GO 40933
41622: POP
41623: POP
// end ;
41624: LD_VAR 0 8
41628: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41629: LD_INT 0
41631: PPUSH
// result := true ;
41632: LD_ADDR_VAR 0 3
41636: PUSH
41637: LD_INT 1
41639: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41640: LD_VAR 0 2
41644: PUSH
41645: LD_INT 24
41647: DOUBLE
41648: EQUAL
41649: IFTRUE 41659
41651: LD_INT 33
41653: DOUBLE
41654: EQUAL
41655: IFTRUE 41659
41657: GO 41684
41659: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_INT 32
41667: PPUSH
41668: LD_VAR 0 1
41672: PPUSH
41673: CALL_OW 321
41677: PUSH
41678: LD_INT 2
41680: EQUAL
41681: ST_TO_ADDR
41682: GO 42000
41684: LD_INT 20
41686: DOUBLE
41687: EQUAL
41688: IFTRUE 41692
41690: GO 41717
41692: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41693: LD_ADDR_VAR 0 3
41697: PUSH
41698: LD_INT 6
41700: PPUSH
41701: LD_VAR 0 1
41705: PPUSH
41706: CALL_OW 321
41710: PUSH
41711: LD_INT 2
41713: EQUAL
41714: ST_TO_ADDR
41715: GO 42000
41717: LD_INT 22
41719: DOUBLE
41720: EQUAL
41721: IFTRUE 41731
41723: LD_INT 36
41725: DOUBLE
41726: EQUAL
41727: IFTRUE 41731
41729: GO 41756
41731: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41732: LD_ADDR_VAR 0 3
41736: PUSH
41737: LD_INT 15
41739: PPUSH
41740: LD_VAR 0 1
41744: PPUSH
41745: CALL_OW 321
41749: PUSH
41750: LD_INT 2
41752: EQUAL
41753: ST_TO_ADDR
41754: GO 42000
41756: LD_INT 30
41758: DOUBLE
41759: EQUAL
41760: IFTRUE 41764
41762: GO 41789
41764: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41765: LD_ADDR_VAR 0 3
41769: PUSH
41770: LD_INT 20
41772: PPUSH
41773: LD_VAR 0 1
41777: PPUSH
41778: CALL_OW 321
41782: PUSH
41783: LD_INT 2
41785: EQUAL
41786: ST_TO_ADDR
41787: GO 42000
41789: LD_INT 28
41791: DOUBLE
41792: EQUAL
41793: IFTRUE 41803
41795: LD_INT 21
41797: DOUBLE
41798: EQUAL
41799: IFTRUE 41803
41801: GO 41828
41803: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41804: LD_ADDR_VAR 0 3
41808: PUSH
41809: LD_INT 21
41811: PPUSH
41812: LD_VAR 0 1
41816: PPUSH
41817: CALL_OW 321
41821: PUSH
41822: LD_INT 2
41824: EQUAL
41825: ST_TO_ADDR
41826: GO 42000
41828: LD_INT 16
41830: DOUBLE
41831: EQUAL
41832: IFTRUE 41836
41834: GO 41861
41836: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41837: LD_ADDR_VAR 0 3
41841: PUSH
41842: LD_INT 84
41844: PPUSH
41845: LD_VAR 0 1
41849: PPUSH
41850: CALL_OW 321
41854: PUSH
41855: LD_INT 2
41857: EQUAL
41858: ST_TO_ADDR
41859: GO 42000
41861: LD_INT 19
41863: DOUBLE
41864: EQUAL
41865: IFTRUE 41875
41867: LD_INT 23
41869: DOUBLE
41870: EQUAL
41871: IFTRUE 41875
41873: GO 41900
41875: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: LD_INT 83
41883: PPUSH
41884: LD_VAR 0 1
41888: PPUSH
41889: CALL_OW 321
41893: PUSH
41894: LD_INT 2
41896: EQUAL
41897: ST_TO_ADDR
41898: GO 42000
41900: LD_INT 17
41902: DOUBLE
41903: EQUAL
41904: IFTRUE 41908
41906: GO 41933
41908: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41909: LD_ADDR_VAR 0 3
41913: PUSH
41914: LD_INT 39
41916: PPUSH
41917: LD_VAR 0 1
41921: PPUSH
41922: CALL_OW 321
41926: PUSH
41927: LD_INT 2
41929: EQUAL
41930: ST_TO_ADDR
41931: GO 42000
41933: LD_INT 18
41935: DOUBLE
41936: EQUAL
41937: IFTRUE 41941
41939: GO 41966
41941: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41942: LD_ADDR_VAR 0 3
41946: PUSH
41947: LD_INT 40
41949: PPUSH
41950: LD_VAR 0 1
41954: PPUSH
41955: CALL_OW 321
41959: PUSH
41960: LD_INT 2
41962: EQUAL
41963: ST_TO_ADDR
41964: GO 42000
41966: LD_INT 27
41968: DOUBLE
41969: EQUAL
41970: IFTRUE 41974
41972: GO 41999
41974: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41975: LD_ADDR_VAR 0 3
41979: PUSH
41980: LD_INT 35
41982: PPUSH
41983: LD_VAR 0 1
41987: PPUSH
41988: CALL_OW 321
41992: PUSH
41993: LD_INT 2
41995: EQUAL
41996: ST_TO_ADDR
41997: GO 42000
41999: POP
// end ;
42000: LD_VAR 0 3
42004: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42005: LD_INT 0
42007: PPUSH
42008: PPUSH
42009: PPUSH
42010: PPUSH
42011: PPUSH
42012: PPUSH
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
// result := false ;
42018: LD_ADDR_VAR 0 6
42022: PUSH
42023: LD_INT 0
42025: ST_TO_ADDR
// if btype = b_depot then
42026: LD_VAR 0 2
42030: PUSH
42031: LD_INT 0
42033: EQUAL
42034: IFFALSE 42046
// begin result := true ;
42036: LD_ADDR_VAR 0 6
42040: PUSH
42041: LD_INT 1
42043: ST_TO_ADDR
// exit ;
42044: GO 42900
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42046: LD_VAR 0 1
42050: NOT
42051: IFTRUE 42076
42053: PUSH
42054: LD_VAR 0 1
42058: PPUSH
42059: CALL_OW 266
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: IN
42074: NOT
42075: OR
42076: IFTRUE 42085
42078: PUSH
42079: LD_VAR 0 2
42083: NOT
42084: OR
42085: IFTRUE 42121
42087: PUSH
42088: LD_VAR 0 5
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: LD_INT 2
42101: PUSH
42102: LD_INT 3
42104: PUSH
42105: LD_INT 4
42107: PUSH
42108: LD_INT 5
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: IN
42119: NOT
42120: OR
42121: IFTRUE 42140
42123: PUSH
42124: LD_VAR 0 3
42128: PPUSH
42129: LD_VAR 0 4
42133: PPUSH
42134: CALL_OW 488
42138: NOT
42139: OR
42140: IFFALSE 42144
// exit ;
42142: GO 42900
// side := GetSide ( depot ) ;
42144: LD_ADDR_VAR 0 9
42148: PUSH
42149: LD_VAR 0 1
42153: PPUSH
42154: CALL_OW 255
42158: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42159: LD_VAR 0 9
42163: PPUSH
42164: LD_VAR 0 2
42168: PPUSH
42169: CALL 41629 0 2
42173: NOT
42174: IFFALSE 42178
// exit ;
42176: GO 42900
// pom := GetBase ( depot ) ;
42178: LD_ADDR_VAR 0 10
42182: PUSH
42183: LD_VAR 0 1
42187: PPUSH
42188: CALL_OW 274
42192: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42193: LD_ADDR_VAR 0 11
42197: PUSH
42198: LD_VAR 0 2
42202: PPUSH
42203: LD_VAR 0 1
42207: PPUSH
42208: CALL_OW 248
42212: PPUSH
42213: CALL_OW 450
42217: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42218: LD_VAR 0 10
42222: PPUSH
42223: LD_INT 1
42225: PPUSH
42226: CALL_OW 275
42230: PUSH
42231: LD_VAR 0 11
42235: PUSH
42236: LD_INT 1
42238: ARRAY
42239: GREATEREQUAL
42240: IFFALSE 42266
42242: PUSH
42243: LD_VAR 0 10
42247: PPUSH
42248: LD_INT 2
42250: PPUSH
42251: CALL_OW 275
42255: PUSH
42256: LD_VAR 0 11
42260: PUSH
42261: LD_INT 2
42263: ARRAY
42264: GREATEREQUAL
42265: AND
42266: IFFALSE 42292
42268: PUSH
42269: LD_VAR 0 10
42273: PPUSH
42274: LD_INT 3
42276: PPUSH
42277: CALL_OW 275
42281: PUSH
42282: LD_VAR 0 11
42286: PUSH
42287: LD_INT 3
42289: ARRAY
42290: GREATEREQUAL
42291: AND
42292: NOT
42293: IFFALSE 42297
// exit ;
42295: GO 42900
// if GetBType ( depot ) = b_depot then
42297: LD_VAR 0 1
42301: PPUSH
42302: CALL_OW 266
42306: PUSH
42307: LD_INT 0
42309: EQUAL
42310: IFFALSE 42322
// dist := 28 else
42312: LD_ADDR_VAR 0 14
42316: PUSH
42317: LD_INT 28
42319: ST_TO_ADDR
42320: GO 42330
// dist := 36 ;
42322: LD_ADDR_VAR 0 14
42326: PUSH
42327: LD_INT 36
42329: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42330: LD_VAR 0 1
42334: PPUSH
42335: LD_VAR 0 3
42339: PPUSH
42340: LD_VAR 0 4
42344: PPUSH
42345: CALL_OW 297
42349: PUSH
42350: LD_VAR 0 14
42354: GREATER
42355: IFFALSE 42359
// exit ;
42357: GO 42900
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42359: LD_ADDR_VAR 0 12
42363: PUSH
42364: LD_VAR 0 2
42368: PPUSH
42369: LD_VAR 0 3
42373: PPUSH
42374: LD_VAR 0 4
42378: PPUSH
42379: LD_VAR 0 5
42383: PPUSH
42384: LD_VAR 0 1
42388: PPUSH
42389: CALL_OW 248
42393: PPUSH
42394: LD_INT 0
42396: PPUSH
42397: CALL 42905 0 6
42401: ST_TO_ADDR
// if not hexes then
42402: LD_VAR 0 12
42406: NOT
42407: IFFALSE 42411
// exit ;
42409: GO 42900
// hex := GetHexInfo ( x , y ) ;
42411: LD_ADDR_VAR 0 15
42415: PUSH
42416: LD_VAR 0 3
42420: PPUSH
42421: LD_VAR 0 4
42425: PPUSH
42426: CALL_OW 546
42430: ST_TO_ADDR
// if hex [ 1 ] then
42431: LD_VAR 0 15
42435: PUSH
42436: LD_INT 1
42438: ARRAY
42439: IFFALSE 42443
// exit ;
42441: GO 42900
// height := hex [ 2 ] ;
42443: LD_ADDR_VAR 0 13
42447: PUSH
42448: LD_VAR 0 15
42452: PUSH
42453: LD_INT 2
42455: ARRAY
42456: ST_TO_ADDR
// for i = 1 to hexes do
42457: LD_ADDR_VAR 0 7
42461: PUSH
42462: DOUBLE
42463: LD_INT 1
42465: DEC
42466: ST_TO_ADDR
42467: LD_VAR 0 12
42471: PUSH
42472: FOR_TO
42473: IFFALSE 42817
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42475: LD_VAR 0 12
42479: PUSH
42480: LD_VAR 0 7
42484: ARRAY
42485: PUSH
42486: LD_INT 1
42488: ARRAY
42489: PPUSH
42490: LD_VAR 0 12
42494: PUSH
42495: LD_VAR 0 7
42499: ARRAY
42500: PUSH
42501: LD_INT 2
42503: ARRAY
42504: PPUSH
42505: CALL_OW 488
42509: NOT
42510: IFTRUE 42552
42512: PUSH
42513: LD_VAR 0 12
42517: PUSH
42518: LD_VAR 0 7
42522: ARRAY
42523: PUSH
42524: LD_INT 1
42526: ARRAY
42527: PPUSH
42528: LD_VAR 0 12
42532: PUSH
42533: LD_VAR 0 7
42537: ARRAY
42538: PUSH
42539: LD_INT 2
42541: ARRAY
42542: PPUSH
42543: CALL_OW 428
42547: PUSH
42548: LD_INT 0
42550: GREATER
42551: OR
42552: IFTRUE 42590
42554: PUSH
42555: LD_VAR 0 12
42559: PUSH
42560: LD_VAR 0 7
42564: ARRAY
42565: PUSH
42566: LD_INT 1
42568: ARRAY
42569: PPUSH
42570: LD_VAR 0 12
42574: PUSH
42575: LD_VAR 0 7
42579: ARRAY
42580: PUSH
42581: LD_INT 2
42583: ARRAY
42584: PPUSH
42585: CALL_OW 351
42589: OR
42590: IFFALSE 42596
// exit ;
42592: POP
42593: POP
42594: GO 42900
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42596: LD_ADDR_VAR 0 8
42600: PUSH
42601: LD_VAR 0 12
42605: PUSH
42606: LD_VAR 0 7
42610: ARRAY
42611: PUSH
42612: LD_INT 1
42614: ARRAY
42615: PPUSH
42616: LD_VAR 0 12
42620: PUSH
42621: LD_VAR 0 7
42625: ARRAY
42626: PUSH
42627: LD_INT 2
42629: ARRAY
42630: PPUSH
42631: CALL_OW 546
42635: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42636: LD_VAR 0 8
42640: PUSH
42641: LD_INT 1
42643: ARRAY
42644: IFTRUE 42666
42646: PUSH
42647: LD_VAR 0 8
42651: PUSH
42652: LD_INT 2
42654: ARRAY
42655: PUSH
42656: LD_VAR 0 13
42660: PUSH
42661: LD_INT 2
42663: PLUS
42664: GREATER
42665: OR
42666: IFTRUE 42688
42668: PUSH
42669: LD_VAR 0 8
42673: PUSH
42674: LD_INT 2
42676: ARRAY
42677: PUSH
42678: LD_VAR 0 13
42682: PUSH
42683: LD_INT 2
42685: MINUS
42686: LESS
42687: OR
42688: IFTRUE 42756
42690: PUSH
42691: LD_VAR 0 8
42695: PUSH
42696: LD_INT 3
42698: ARRAY
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 8
42705: PUSH
42706: LD_INT 9
42708: PUSH
42709: LD_INT 10
42711: PUSH
42712: LD_INT 11
42714: PUSH
42715: LD_INT 12
42717: PUSH
42718: LD_INT 13
42720: PUSH
42721: LD_INT 16
42723: PUSH
42724: LD_INT 17
42726: PUSH
42727: LD_INT 18
42729: PUSH
42730: LD_INT 19
42732: PUSH
42733: LD_INT 20
42735: PUSH
42736: LD_INT 21
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: IN
42754: NOT
42755: OR
42756: IFTRUE 42769
42758: PUSH
42759: LD_VAR 0 8
42763: PUSH
42764: LD_INT 5
42766: ARRAY
42767: NOT
42768: OR
42769: IFTRUE 42809
42771: PUSH
42772: LD_VAR 0 8
42776: PUSH
42777: LD_INT 6
42779: ARRAY
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: LD_INT 7
42789: PUSH
42790: LD_INT 9
42792: PUSH
42793: LD_INT 10
42795: PUSH
42796: LD_INT 11
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: IN
42807: NOT
42808: OR
42809: IFFALSE 42815
// exit ;
42811: POP
42812: POP
42813: GO 42900
// end ;
42815: GO 42472
42817: POP
42818: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42819: LD_VAR 0 9
42823: PPUSH
42824: LD_VAR 0 3
42828: PPUSH
42829: LD_VAR 0 4
42833: PPUSH
42834: LD_INT 20
42836: PPUSH
42837: CALL 34719 0 4
42841: PUSH
42842: LD_INT 4
42844: ARRAY
42845: IFFALSE 42849
// exit ;
42847: GO 42900
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42849: LD_VAR 0 2
42853: PUSH
42854: LD_INT 29
42856: PUSH
42857: LD_INT 30
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: IN
42864: IFFALSE 42888
42866: PUSH
42867: LD_VAR 0 3
42871: PPUSH
42872: LD_VAR 0 4
42876: PPUSH
42877: LD_VAR 0 9
42881: PPUSH
42882: CALL_OW 440
42886: NOT
42887: AND
42888: IFFALSE 42892
// exit ;
42890: GO 42900
// result := true ;
42892: LD_ADDR_VAR 0 6
42896: PUSH
42897: LD_INT 1
42899: ST_TO_ADDR
// end ;
42900: LD_VAR 0 6
42904: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42905: LD_INT 0
42907: PPUSH
42908: PPUSH
42909: PPUSH
42910: PPUSH
42911: PPUSH
42912: PPUSH
42913: PPUSH
42914: PPUSH
42915: PPUSH
42916: PPUSH
42917: PPUSH
42918: PPUSH
42919: PPUSH
42920: PPUSH
42921: PPUSH
42922: PPUSH
42923: PPUSH
42924: PPUSH
42925: PPUSH
42926: PPUSH
42927: PPUSH
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
42935: PPUSH
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
42941: PPUSH
42942: PPUSH
42943: PPUSH
42944: PPUSH
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
42949: PPUSH
42950: PPUSH
42951: PPUSH
42952: PPUSH
42953: PPUSH
42954: PPUSH
42955: PPUSH
42956: PPUSH
42957: PPUSH
42958: PPUSH
42959: PPUSH
42960: PPUSH
42961: PPUSH
42962: PPUSH
42963: PPUSH
42964: PPUSH
// result = [ ] ;
42965: LD_ADDR_VAR 0 7
42969: PUSH
42970: EMPTY
42971: ST_TO_ADDR
// temp_list = [ ] ;
42972: LD_ADDR_VAR 0 9
42976: PUSH
42977: EMPTY
42978: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42979: LD_VAR 0 4
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: LD_INT 3
42995: PUSH
42996: LD_INT 4
42998: PUSH
42999: LD_INT 5
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: IN
43010: NOT
43011: IFTRUE 43054
43013: PUSH
43014: LD_VAR 0 1
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: IN
43029: IFFALSE 43053
43031: PUSH
43032: LD_VAR 0 5
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: LD_INT 3
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: LIST
43050: IN
43051: NOT
43052: AND
43053: OR
43054: IFFALSE 43058
// exit ;
43056: GO 61457
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43058: LD_VAR 0 1
43062: PUSH
43063: LD_INT 6
43065: PUSH
43066: LD_INT 7
43068: PUSH
43069: LD_INT 8
43071: PUSH
43072: LD_INT 13
43074: PUSH
43075: LD_INT 12
43077: PUSH
43078: LD_INT 15
43080: PUSH
43081: LD_INT 11
43083: PUSH
43084: LD_INT 14
43086: PUSH
43087: LD_INT 10
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: IN
43101: IFFALSE 43111
// btype = b_lab ;
43103: LD_ADDR_VAR 0 1
43107: PUSH
43108: LD_INT 6
43110: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43111: LD_VAR 0 6
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 2
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: LIST
43129: IN
43130: NOT
43131: IFTRUE 43199
43133: PUSH
43134: LD_VAR 0 1
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: LD_INT 3
43150: PUSH
43151: LD_INT 6
43153: PUSH
43154: LD_INT 36
43156: PUSH
43157: LD_INT 4
43159: PUSH
43160: LD_INT 5
43162: PUSH
43163: LD_INT 31
43165: PUSH
43166: LD_INT 32
43168: PUSH
43169: LD_INT 33
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: IN
43185: NOT
43186: IFFALSE 43198
43188: PUSH
43189: LD_VAR 0 6
43193: PUSH
43194: LD_INT 1
43196: EQUAL
43197: AND
43198: OR
43199: IFTRUE 43231
43201: PUSH
43202: LD_VAR 0 1
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: LD_INT 3
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: IN
43217: NOT
43218: IFFALSE 43230
43220: PUSH
43221: LD_VAR 0 6
43225: PUSH
43226: LD_INT 2
43228: EQUAL
43229: AND
43230: OR
43231: IFFALSE 43241
// mode = 0 ;
43233: LD_ADDR_VAR 0 6
43237: PUSH
43238: LD_INT 0
43240: ST_TO_ADDR
// case mode of 0 :
43241: LD_VAR 0 6
43245: PUSH
43246: LD_INT 0
43248: DOUBLE
43249: EQUAL
43250: IFTRUE 43254
43252: GO 54707
43254: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43255: LD_ADDR_VAR 0 11
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 2
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 3
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 3
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: LD_INT 2
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43448: LD_ADDR_VAR 0 12
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: NEG
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: NEG
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 3
43605: NEG
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 3
43616: NEG
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43644: LD_ADDR_VAR 0 13
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 2
43779: NEG
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: LD_INT 3
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 3
43803: NEG
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 3
43815: NEG
43816: PUSH
43817: LD_INT 3
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43843: LD_ADDR_VAR 0 14
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 2
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 3
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 3
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44039: LD_ADDR_VAR 0 15
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 2
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 2
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 3
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 3
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44232: LD_ADDR_VAR 0 16
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: LD_INT 2
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 3
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 3
44389: PUSH
44390: LD_INT 3
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 3
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44425: LD_ADDR_VAR 0 17
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: LD_INT 2
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44655: LD_ADDR_VAR 0 18
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44885: LD_ADDR_VAR 0 19
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45115: LD_ADDR_VAR 0 20
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: LD_INT 2
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45345: LD_ADDR_VAR 0 21
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45575: LD_ADDR_VAR 0 22
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 2
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45805: LD_ADDR_VAR 0 23
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: LD_INT 3
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 3
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46085: LD_ADDR_VAR 0 24
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 2
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 3
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46361: LD_ADDR_VAR 0 25
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 3
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 3
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 3
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46635: LD_ADDR_VAR 0 26
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: LD_INT 2
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: LD_INT 3
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 3
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46911: LD_ADDR_VAR 0 27
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 3
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 3
47156: NEG
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47191: LD_ADDR_VAR 0 28
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: NEG
47391: PUSH
47392: LD_INT 2
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: LD_INT 3
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: LD_INT 3
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 3
47426: NEG
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47473: LD_ADDR_VAR 0 29
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: LD_INT 2
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: NEG
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: LD_INT 3
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 3
47717: NEG
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47752: LD_ADDR_VAR 0 30
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 3
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 3
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 3
47995: NEG
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48030: LD_ADDR_VAR 0 31
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: LD_INT 3
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 3
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 3
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 3
48273: NEG
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48308: LD_ADDR_VAR 0 32
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: NEG
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 3
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 3
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: LD_INT 3
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48586: LD_ADDR_VAR 0 33
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: LD_INT 2
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: LD_INT 3
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 3
48830: NEG
48831: PUSH
48832: LD_INT 2
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48865: LD_ADDR_VAR 0 34
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 3
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: LD_INT 3
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 3
49110: NEG
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49145: LD_ADDR_VAR 0 35
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49257: LD_ADDR_VAR 0 36
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49369: LD_ADDR_VAR 0 37
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49481: LD_ADDR_VAR 0 38
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49593: LD_ADDR_VAR 0 39
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49705: LD_ADDR_VAR 0 40
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49817: LD_ADDR_VAR 0 41
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: LD_INT 2
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: LD_INT 3
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 3
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 3
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 3
50060: PUSH
50061: LD_INT 3
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: LD_INT 3
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 3
50091: NEG
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 3
50102: NEG
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 3
50114: NEG
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 3
50126: NEG
50127: PUSH
50128: LD_INT 3
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50167: LD_ADDR_VAR 0 42
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 3
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: LD_INT 3
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 3
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 2
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 3
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 3
50413: PUSH
50414: LD_INT 3
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: LD_INT 3
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 3
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 3
50464: NEG
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 3
50476: NEG
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50517: LD_ADDR_VAR 0 43
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: NEG
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 3
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 3
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 3
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 3
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_INT 3
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 3
50813: NEG
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 3
50824: NEG
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50865: LD_ADDR_VAR 0 44
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 3
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 3
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 3
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: LD_INT 3
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 3
51139: NEG
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 3
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 3
51174: NEG
51175: PUSH
51176: LD_INT 3
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51215: LD_ADDR_VAR 0 45
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 2
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: LD_INT 2
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 2
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 2
51405: NEG
51406: PUSH
51407: LD_INT 3
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 3
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 3
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 3
51461: PUSH
51462: LD_INT 3
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: LD_INT 3
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: LD_INT 3
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 3
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 3
51524: NEG
51525: PUSH
51526: LD_INT 3
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51565: LD_ADDR_VAR 0 46
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: LD_INT 3
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 3
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 2
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 3
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 3
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 2
51850: NEG
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: NEG
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 3
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51913: LD_ADDR_VAR 0 47
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52064: LD_ADDR_VAR 0 48
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 2
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 2
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 2
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52211: LD_ADDR_VAR 0 49
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52355: LD_ADDR_VAR 0 50
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52499: LD_ADDR_VAR 0 51
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 2
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: LD_INT 2
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: NEG
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52646: LD_ADDR_VAR 0 52
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52797: LD_ADDR_VAR 0 53
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53027: LD_ADDR_VAR 0 54
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 2
53226: NEG
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53257: LD_ADDR_VAR 0 55
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53487: LD_ADDR_VAR 0 56
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53717: LD_ADDR_VAR 0 57
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53947: LD_ADDR_VAR 0 58
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54177: LD_ADDR_VAR 0 59
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54265: LD_ADDR_VAR 0 60
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54353: LD_ADDR_VAR 0 61
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54441: LD_ADDR_VAR 0 62
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54529: LD_ADDR_VAR 0 63
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54617: LD_ADDR_VAR 0 64
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// end ; 1 :
54705: GO 60602
54707: LD_INT 1
54709: DOUBLE
54710: EQUAL
54711: IFTRUE 54715
54713: GO 57338
54715: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54716: LD_ADDR_VAR 0 11
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: LD_INT 3
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 3
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54760: LD_ADDR_VAR 0 12
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 3
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 3
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: LIST
54800: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54801: LD_ADDR_VAR 0 13
54805: PUSH
54806: LD_INT 3
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 3
54818: PUSH
54819: LD_INT 3
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: LD_INT 3
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: LIST
54840: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54841: LD_ADDR_VAR 0 14
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 3
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 3
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: LIST
54881: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54882: LD_ADDR_VAR 0 15
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 3
54900: NEG
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 3
54911: NEG
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: LIST
54925: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54926: LD_ADDR_VAR 0 16
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: LD_INT 3
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 3
54945: NEG
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54972: LD_ADDR_VAR 0 17
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: LD_INT 3
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: LD_INT 3
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: LIST
55015: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55016: LD_ADDR_VAR 0 18
55020: PUSH
55021: LD_INT 2
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 3
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 3
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: LIST
55056: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55057: LD_ADDR_VAR 0 19
55061: PUSH
55062: LD_INT 3
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 3
55074: PUSH
55075: LD_INT 3
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 3
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: LIST
55096: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55097: LD_ADDR_VAR 0 20
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: LD_INT 3
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 3
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: LIST
55137: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55138: LD_ADDR_VAR 0 21
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: NEG
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: LIST
55181: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55182: LD_ADDR_VAR 0 22
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: LD_INT 3
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 3
55201: NEG
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 3
55213: NEG
55214: PUSH
55215: LD_INT 3
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55228: LD_ADDR_VAR 0 23
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 3
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 4
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 3
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: LIST
55271: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55272: LD_ADDR_VAR 0 24
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 4
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: LIST
55312: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55313: LD_ADDR_VAR 0 25
55317: PUSH
55318: LD_INT 3
55320: PUSH
55321: LD_INT 3
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 4
55330: PUSH
55331: LD_INT 3
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 3
55340: PUSH
55341: LD_INT 4
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: LIST
55352: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55353: LD_ADDR_VAR 0 26
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 3
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 4
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: LD_INT 3
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: LIST
55393: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55394: LD_ADDR_VAR 0 27
55398: PUSH
55399: LD_INT 3
55401: NEG
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 3
55412: NEG
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 4
55423: NEG
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: LIST
55437: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55438: LD_ADDR_VAR 0 28
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: LD_INT 3
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 3
55457: NEG
55458: PUSH
55459: LD_INT 4
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 4
55469: NEG
55470: PUSH
55471: LD_INT 3
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55484: LD_ADDR_VAR 0 29
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 3
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 3
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 4
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 4
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 3
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 5
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 5
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: LD_INT 4
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: LD_INT 6
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 6
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 5
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55639: LD_ADDR_VAR 0 30
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 4
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 4
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 4
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 5
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 5
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 5
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 6
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 6
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55782: LD_ADDR_VAR 0 31
55786: PUSH
55787: LD_INT 3
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 4
55819: PUSH
55820: LD_INT 3
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 4
55829: PUSH
55830: LD_INT 4
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 3
55839: PUSH
55840: LD_INT 4
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 5
55849: PUSH
55850: LD_INT 4
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 5
55859: PUSH
55860: LD_INT 5
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 4
55869: PUSH
55870: LD_INT 5
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 6
55879: PUSH
55880: LD_INT 5
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 6
55889: PUSH
55890: LD_INT 6
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 5
55899: PUSH
55900: LD_INT 6
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55921: LD_ADDR_VAR 0 32
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 3
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 4
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 4
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 3
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 5
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 5
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 4
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: LD_INT 6
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 6
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: LD_INT 5
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56064: LD_ADDR_VAR 0 33
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 3
56082: NEG
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 3
56093: NEG
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 3
56105: NEG
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 4
56116: NEG
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 4
56127: NEG
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 4
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 5
56150: NEG
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 5
56161: NEG
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 5
56173: NEG
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 6
56184: NEG
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 6
56195: NEG
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56219: LD_ADDR_VAR 0 34
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 3
56238: NEG
56239: PUSH
56240: LD_INT 2
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 3
56250: NEG
56251: PUSH
56252: LD_INT 3
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 3
56262: NEG
56263: PUSH
56264: LD_INT 4
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 4
56274: NEG
56275: PUSH
56276: LD_INT 3
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 4
56286: NEG
56287: PUSH
56288: LD_INT 4
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 4
56298: NEG
56299: PUSH
56300: LD_INT 5
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 5
56310: NEG
56311: PUSH
56312: LD_INT 4
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 5
56322: NEG
56323: PUSH
56324: LD_INT 5
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 5
56334: NEG
56335: PUSH
56336: LD_INT 6
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 6
56346: NEG
56347: PUSH
56348: LD_INT 5
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 6
56358: NEG
56359: PUSH
56360: LD_INT 6
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56382: LD_ADDR_VAR 0 41
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: LIST
56425: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56426: LD_ADDR_VAR 0 42
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: LIST
56466: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56467: LD_ADDR_VAR 0 43
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 3
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: LIST
56506: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56507: LD_ADDR_VAR 0 44
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: LD_INT 3
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: LD_INT 2
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: LIST
56547: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56548: LD_ADDR_VAR 0 45
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: NEG
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56592: LD_ADDR_VAR 0 46
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 3
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 3
56623: NEG
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56638: LD_ADDR_VAR 0 47
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: LD_INT 3
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 3
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56671: LD_ADDR_VAR 0 48
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56702: LD_ADDR_VAR 0 49
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56731: LD_ADDR_VAR 0 50
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56760: LD_ADDR_VAR 0 51
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56791: LD_ADDR_VAR 0 52
56795: PUSH
56796: LD_INT 3
56798: NEG
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 3
56810: NEG
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56824: LD_ADDR_VAR 0 53
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 3
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 3
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: LIST
56867: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56868: LD_ADDR_VAR 0 54
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 3
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: LIST
56908: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56909: LD_ADDR_VAR 0 55
56913: PUSH
56914: LD_INT 3
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: LD_INT 3
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56949: LD_ADDR_VAR 0 56
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: LIST
56989: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56990: LD_ADDR_VAR 0 57
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 3
57008: NEG
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 3
57019: NEG
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: LIST
57033: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57034: LD_ADDR_VAR 0 58
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: LD_INT 3
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 3
57053: NEG
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 3
57065: NEG
57066: PUSH
57067: LD_INT 3
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57080: LD_ADDR_VAR 0 59
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 2
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57124: LD_ADDR_VAR 0 60
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: LIST
57164: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57165: LD_ADDR_VAR 0 61
57169: PUSH
57170: LD_INT 2
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57205: LD_ADDR_VAR 0 62
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: LIST
57245: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57246: LD_ADDR_VAR 0 63
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: LIST
57289: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57290: LD_ADDR_VAR 0 64
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: LD_INT 2
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: LIST
57335: ST_TO_ADDR
// end ; 2 :
57336: GO 60602
57338: LD_INT 2
57340: DOUBLE
57341: EQUAL
57342: IFTRUE 57346
57344: GO 60601
57346: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57347: LD_ADDR_VAR 0 29
57351: PUSH
57352: LD_INT 4
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 4
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 5
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 5
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 4
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 5
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 3
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 3
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 4
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 4
57477: PUSH
57478: LD_INT 4
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 3
57487: PUSH
57488: LD_INT 4
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: LD_INT 3
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 4
57517: PUSH
57518: LD_INT 2
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: PUSH
57528: LD_INT 4
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 4
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 4
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 5
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 5
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: LD_INT 4
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: LD_INT 3
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 5
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: LD_INT 3
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 3
57630: NEG
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 3
57675: NEG
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 4
57686: NEG
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 4
57697: NEG
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 4
57709: NEG
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 4
57732: NEG
57733: PUSH
57734: LD_INT 4
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 4
57744: NEG
57745: PUSH
57746: LD_INT 5
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: LD_INT 4
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: LD_INT 3
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 4
57780: NEG
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 5
57792: NEG
57793: PUSH
57794: LD_INT 4
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 5
57804: NEG
57805: PUSH
57806: LD_INT 5
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 3
57816: NEG
57817: PUSH
57818: LD_INT 5
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 5
57828: NEG
57829: PUSH
57830: LD_INT 3
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57885: LD_ADDR_VAR 0 30
57889: PUSH
57890: LD_INT 4
57892: PUSH
57893: LD_INT 4
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 4
57902: PUSH
57903: LD_INT 3
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 5
57912: PUSH
57913: LD_INT 4
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 5
57922: PUSH
57923: LD_INT 5
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 4
57932: PUSH
57933: LD_INT 5
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: LD_INT 4
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 5
57962: PUSH
57963: LD_INT 3
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: LD_INT 5
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 3
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 3
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 4
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: LD_INT 4
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 3
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: LD_INT 4
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 4
58075: NEG
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 4
58086: NEG
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 4
58120: NEG
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 5
58131: NEG
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 5
58142: NEG
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 5
58154: NEG
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 3
58177: NEG
58178: PUSH
58179: LD_INT 3
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 3
58189: NEG
58190: PUSH
58191: LD_INT 4
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 2
58201: NEG
58202: PUSH
58203: LD_INT 3
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 2
58213: NEG
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 4
58237: NEG
58238: PUSH
58239: LD_INT 3
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 4
58249: NEG
58250: PUSH
58251: LD_INT 4
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: NEG
58262: PUSH
58263: LD_INT 4
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 4
58273: NEG
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 4
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 5
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: LD_INT 4
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 3
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: LD_INT 4
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 5
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: LD_INT 3
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 5
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58432: LD_ADDR_VAR 0 31
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 4
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 3
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: LD_INT 4
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: LD_INT 5
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: LD_INT 5
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: LD_INT 4
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: LD_INT 5
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: LD_INT 3
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 3
58532: NEG
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 3
58543: NEG
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: NEG
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 4
58588: NEG
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 4
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 4
58611: NEG
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 4
58634: NEG
58635: PUSH
58636: LD_INT 4
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 4
58646: NEG
58647: PUSH
58648: LD_INT 5
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 3
58658: NEG
58659: PUSH
58660: LD_INT 4
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 3
58670: NEG
58671: PUSH
58672: LD_INT 3
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 4
58682: NEG
58683: PUSH
58684: LD_INT 3
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 5
58694: NEG
58695: PUSH
58696: LD_INT 4
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 5
58706: NEG
58707: PUSH
58708: LD_INT 5
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: LD_INT 5
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 5
58730: NEG
58731: PUSH
58732: LD_INT 3
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: LD_INT 3
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 4
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: LD_INT 3
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: LD_INT 3
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 4
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: LD_INT 4
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 4
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 4
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 5
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 5
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 4
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 3
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 3
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 3
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 5
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58982: LD_ADDR_VAR 0 32
58986: PUSH
58987: LD_INT 4
58989: NEG
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 4
59000: NEG
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 3
59012: NEG
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 3
59023: NEG
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 4
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 5
59045: NEG
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 5
59056: NEG
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 5
59068: NEG
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: NEG
59092: PUSH
59093: LD_INT 3
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: NEG
59104: PUSH
59105: LD_INT 4
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: LD_INT 3
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 3
59139: NEG
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 4
59151: NEG
59152: PUSH
59153: LD_INT 3
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 4
59163: NEG
59164: PUSH
59165: LD_INT 4
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: LD_INT 4
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 4
59187: NEG
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 4
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: LD_INT 5
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: LD_INT 4
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 3
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: LD_INT 4
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 5
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: LD_INT 3
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: LD_INT 5
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 3
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 4
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 4
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 2
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 4
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 4
59394: PUSH
59395: LD_INT 4
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 4
59404: PUSH
59405: LD_INT 3
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 5
59414: PUSH
59415: LD_INT 4
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 5
59424: PUSH
59425: LD_INT 5
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 4
59434: PUSH
59435: LD_INT 5
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 3
59444: PUSH
59445: LD_INT 4
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 3
59454: PUSH
59455: LD_INT 3
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 5
59464: PUSH
59465: LD_INT 3
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 3
59474: PUSH
59475: LD_INT 5
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59529: LD_ADDR_VAR 0 33
59533: PUSH
59534: LD_INT 4
59536: NEG
59537: PUSH
59538: LD_INT 4
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 4
59548: NEG
59549: PUSH
59550: LD_INT 5
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 3
59560: NEG
59561: PUSH
59562: LD_INT 4
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 3
59572: NEG
59573: PUSH
59574: LD_INT 3
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 4
59584: NEG
59585: PUSH
59586: LD_INT 3
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 5
59596: NEG
59597: PUSH
59598: LD_INT 4
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 5
59608: NEG
59609: PUSH
59610: LD_INT 5
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 3
59620: NEG
59621: PUSH
59622: LD_INT 5
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 5
59632: NEG
59633: PUSH
59634: LD_INT 3
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 3
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 4
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: LD_INT 3
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: LD_INT 2
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 3
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: LD_INT 4
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: LD_INT 4
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 4
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 4
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 5
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 5
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 4
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 3
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 3
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 3
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 5
59829: PUSH
59830: LD_INT 2
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 3
59839: PUSH
59840: LD_INT 3
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 4
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 4
59869: PUSH
59870: LD_INT 4
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 3
59879: PUSH
59880: LD_INT 4
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: LD_INT 3
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: PUSH
59900: LD_INT 2
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 4
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: PUSH
59920: LD_INT 4
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: LD_INT 4
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: LD_INT 3
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: LD_INT 4
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 5
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: LD_INT 5
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 4
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: LD_INT 5
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: LD_INT 3
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60067: LD_ADDR_VAR 0 34
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: LD_INT 4
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: LD_INT 5
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 4
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 3
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: LD_INT 4
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: LD_INT 5
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 2
60153: PUSH
60154: LD_INT 3
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: NEG
60165: PUSH
60166: LD_INT 5
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 3
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 4
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 4
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 4
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 4
60269: PUSH
60270: LD_INT 4
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 4
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 5
60289: PUSH
60290: LD_INT 4
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 5
60299: PUSH
60300: LD_INT 5
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 4
60309: PUSH
60310: LD_INT 5
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 3
60319: PUSH
60320: LD_INT 4
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: LD_INT 3
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 5
60339: PUSH
60340: LD_INT 3
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 3
60349: PUSH
60350: LD_INT 5
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 3
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: LD_INT 2
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: LD_INT 3
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: LD_INT 4
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: LD_INT 4
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: LD_INT 3
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: LD_INT 4
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 2
60441: NEG
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 4
60452: NEG
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 4
60463: NEG
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 3
60475: NEG
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 3
60486: NEG
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 4
60497: NEG
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 5
60508: NEG
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 5
60519: NEG
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 5
60531: NEG
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 3
60543: NEG
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: ST_TO_ADDR
// end ; end ;
60599: GO 60602
60601: POP
// case btype of b_depot , b_warehouse :
60602: LD_VAR 0 1
60606: PUSH
60607: LD_INT 0
60609: DOUBLE
60610: EQUAL
60611: IFTRUE 60621
60613: LD_INT 1
60615: DOUBLE
60616: EQUAL
60617: IFTRUE 60621
60619: GO 60822
60621: POP
// case nation of nation_american :
60622: LD_VAR 0 5
60626: PUSH
60627: LD_INT 1
60629: DOUBLE
60630: EQUAL
60631: IFTRUE 60635
60633: GO 60691
60635: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60636: LD_ADDR_VAR 0 9
60640: PUSH
60641: LD_VAR 0 11
60645: PUSH
60646: LD_VAR 0 12
60650: PUSH
60651: LD_VAR 0 13
60655: PUSH
60656: LD_VAR 0 14
60660: PUSH
60661: LD_VAR 0 15
60665: PUSH
60666: LD_VAR 0 16
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: PUSH
60679: LD_VAR 0 4
60683: PUSH
60684: LD_INT 1
60686: PLUS
60687: ARRAY
60688: ST_TO_ADDR
60689: GO 60820
60691: LD_INT 2
60693: DOUBLE
60694: EQUAL
60695: IFTRUE 60699
60697: GO 60755
60699: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60700: LD_ADDR_VAR 0 9
60704: PUSH
60705: LD_VAR 0 17
60709: PUSH
60710: LD_VAR 0 18
60714: PUSH
60715: LD_VAR 0 19
60719: PUSH
60720: LD_VAR 0 20
60724: PUSH
60725: LD_VAR 0 21
60729: PUSH
60730: LD_VAR 0 22
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: PUSH
60743: LD_VAR 0 4
60747: PUSH
60748: LD_INT 1
60750: PLUS
60751: ARRAY
60752: ST_TO_ADDR
60753: GO 60820
60755: LD_INT 3
60757: DOUBLE
60758: EQUAL
60759: IFTRUE 60763
60761: GO 60819
60763: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60764: LD_ADDR_VAR 0 9
60768: PUSH
60769: LD_VAR 0 23
60773: PUSH
60774: LD_VAR 0 24
60778: PUSH
60779: LD_VAR 0 25
60783: PUSH
60784: LD_VAR 0 26
60788: PUSH
60789: LD_VAR 0 27
60793: PUSH
60794: LD_VAR 0 28
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: PUSH
60807: LD_VAR 0 4
60811: PUSH
60812: LD_INT 1
60814: PLUS
60815: ARRAY
60816: ST_TO_ADDR
60817: GO 60820
60819: POP
60820: GO 61375
60822: LD_INT 2
60824: DOUBLE
60825: EQUAL
60826: IFTRUE 60836
60828: LD_INT 3
60830: DOUBLE
60831: EQUAL
60832: IFTRUE 60836
60834: GO 60892
60836: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60837: LD_ADDR_VAR 0 9
60841: PUSH
60842: LD_VAR 0 29
60846: PUSH
60847: LD_VAR 0 30
60851: PUSH
60852: LD_VAR 0 31
60856: PUSH
60857: LD_VAR 0 32
60861: PUSH
60862: LD_VAR 0 33
60866: PUSH
60867: LD_VAR 0 34
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: PUSH
60880: LD_VAR 0 4
60884: PUSH
60885: LD_INT 1
60887: PLUS
60888: ARRAY
60889: ST_TO_ADDR
60890: GO 61375
60892: LD_INT 16
60894: DOUBLE
60895: EQUAL
60896: IFTRUE 60954
60898: LD_INT 17
60900: DOUBLE
60901: EQUAL
60902: IFTRUE 60954
60904: LD_INT 18
60906: DOUBLE
60907: EQUAL
60908: IFTRUE 60954
60910: LD_INT 19
60912: DOUBLE
60913: EQUAL
60914: IFTRUE 60954
60916: LD_INT 22
60918: DOUBLE
60919: EQUAL
60920: IFTRUE 60954
60922: LD_INT 20
60924: DOUBLE
60925: EQUAL
60926: IFTRUE 60954
60928: LD_INT 21
60930: DOUBLE
60931: EQUAL
60932: IFTRUE 60954
60934: LD_INT 23
60936: DOUBLE
60937: EQUAL
60938: IFTRUE 60954
60940: LD_INT 24
60942: DOUBLE
60943: EQUAL
60944: IFTRUE 60954
60946: LD_INT 25
60948: DOUBLE
60949: EQUAL
60950: IFTRUE 60954
60952: GO 61010
60954: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60955: LD_ADDR_VAR 0 9
60959: PUSH
60960: LD_VAR 0 35
60964: PUSH
60965: LD_VAR 0 36
60969: PUSH
60970: LD_VAR 0 37
60974: PUSH
60975: LD_VAR 0 38
60979: PUSH
60980: LD_VAR 0 39
60984: PUSH
60985: LD_VAR 0 40
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: PUSH
60998: LD_VAR 0 4
61002: PUSH
61003: LD_INT 1
61005: PLUS
61006: ARRAY
61007: ST_TO_ADDR
61008: GO 61375
61010: LD_INT 6
61012: DOUBLE
61013: EQUAL
61014: IFTRUE 61066
61016: LD_INT 7
61018: DOUBLE
61019: EQUAL
61020: IFTRUE 61066
61022: LD_INT 8
61024: DOUBLE
61025: EQUAL
61026: IFTRUE 61066
61028: LD_INT 13
61030: DOUBLE
61031: EQUAL
61032: IFTRUE 61066
61034: LD_INT 12
61036: DOUBLE
61037: EQUAL
61038: IFTRUE 61066
61040: LD_INT 15
61042: DOUBLE
61043: EQUAL
61044: IFTRUE 61066
61046: LD_INT 11
61048: DOUBLE
61049: EQUAL
61050: IFTRUE 61066
61052: LD_INT 14
61054: DOUBLE
61055: EQUAL
61056: IFTRUE 61066
61058: LD_INT 10
61060: DOUBLE
61061: EQUAL
61062: IFTRUE 61066
61064: GO 61122
61066: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61067: LD_ADDR_VAR 0 9
61071: PUSH
61072: LD_VAR 0 41
61076: PUSH
61077: LD_VAR 0 42
61081: PUSH
61082: LD_VAR 0 43
61086: PUSH
61087: LD_VAR 0 44
61091: PUSH
61092: LD_VAR 0 45
61096: PUSH
61097: LD_VAR 0 46
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: PUSH
61110: LD_VAR 0 4
61114: PUSH
61115: LD_INT 1
61117: PLUS
61118: ARRAY
61119: ST_TO_ADDR
61120: GO 61375
61122: LD_INT 36
61124: DOUBLE
61125: EQUAL
61126: IFTRUE 61130
61128: GO 61186
61130: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61131: LD_ADDR_VAR 0 9
61135: PUSH
61136: LD_VAR 0 47
61140: PUSH
61141: LD_VAR 0 48
61145: PUSH
61146: LD_VAR 0 49
61150: PUSH
61151: LD_VAR 0 50
61155: PUSH
61156: LD_VAR 0 51
61160: PUSH
61161: LD_VAR 0 52
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: PUSH
61174: LD_VAR 0 4
61178: PUSH
61179: LD_INT 1
61181: PLUS
61182: ARRAY
61183: ST_TO_ADDR
61184: GO 61375
61186: LD_INT 4
61188: DOUBLE
61189: EQUAL
61190: IFTRUE 61212
61192: LD_INT 5
61194: DOUBLE
61195: EQUAL
61196: IFTRUE 61212
61198: LD_INT 34
61200: DOUBLE
61201: EQUAL
61202: IFTRUE 61212
61204: LD_INT 37
61206: DOUBLE
61207: EQUAL
61208: IFTRUE 61212
61210: GO 61268
61212: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61213: LD_ADDR_VAR 0 9
61217: PUSH
61218: LD_VAR 0 53
61222: PUSH
61223: LD_VAR 0 54
61227: PUSH
61228: LD_VAR 0 55
61232: PUSH
61233: LD_VAR 0 56
61237: PUSH
61238: LD_VAR 0 57
61242: PUSH
61243: LD_VAR 0 58
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: PUSH
61256: LD_VAR 0 4
61260: PUSH
61261: LD_INT 1
61263: PLUS
61264: ARRAY
61265: ST_TO_ADDR
61266: GO 61375
61268: LD_INT 31
61270: DOUBLE
61271: EQUAL
61272: IFTRUE 61318
61274: LD_INT 32
61276: DOUBLE
61277: EQUAL
61278: IFTRUE 61318
61280: LD_INT 33
61282: DOUBLE
61283: EQUAL
61284: IFTRUE 61318
61286: LD_INT 27
61288: DOUBLE
61289: EQUAL
61290: IFTRUE 61318
61292: LD_INT 26
61294: DOUBLE
61295: EQUAL
61296: IFTRUE 61318
61298: LD_INT 28
61300: DOUBLE
61301: EQUAL
61302: IFTRUE 61318
61304: LD_INT 29
61306: DOUBLE
61307: EQUAL
61308: IFTRUE 61318
61310: LD_INT 30
61312: DOUBLE
61313: EQUAL
61314: IFTRUE 61318
61316: GO 61374
61318: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61319: LD_ADDR_VAR 0 9
61323: PUSH
61324: LD_VAR 0 59
61328: PUSH
61329: LD_VAR 0 60
61333: PUSH
61334: LD_VAR 0 61
61338: PUSH
61339: LD_VAR 0 62
61343: PUSH
61344: LD_VAR 0 63
61348: PUSH
61349: LD_VAR 0 64
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: PUSH
61362: LD_VAR 0 4
61366: PUSH
61367: LD_INT 1
61369: PLUS
61370: ARRAY
61371: ST_TO_ADDR
61372: GO 61375
61374: POP
// temp_list2 = [ ] ;
61375: LD_ADDR_VAR 0 10
61379: PUSH
61380: EMPTY
61381: ST_TO_ADDR
// for i in temp_list do
61382: LD_ADDR_VAR 0 8
61386: PUSH
61387: LD_VAR 0 9
61391: PUSH
61392: FOR_IN
61393: IFFALSE 61445
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61395: LD_ADDR_VAR 0 10
61399: PUSH
61400: LD_VAR 0 10
61404: PUSH
61405: LD_VAR 0 8
61409: PUSH
61410: LD_INT 1
61412: ARRAY
61413: PUSH
61414: LD_VAR 0 2
61418: PLUS
61419: PUSH
61420: LD_VAR 0 8
61424: PUSH
61425: LD_INT 2
61427: ARRAY
61428: PUSH
61429: LD_VAR 0 3
61433: PLUS
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: EMPTY
61440: LIST
61441: ADD
61442: ST_TO_ADDR
61443: GO 61392
61445: POP
61446: POP
// result = temp_list2 ;
61447: LD_ADDR_VAR 0 7
61451: PUSH
61452: LD_VAR 0 10
61456: ST_TO_ADDR
// end ;
61457: LD_VAR 0 7
61461: RET
// export function EnemyInRange ( unit , dist ) ; begin
61462: LD_INT 0
61464: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61465: LD_ADDR_VAR 0 3
61469: PUSH
61470: LD_VAR 0 1
61474: PPUSH
61475: CALL_OW 255
61479: PPUSH
61480: LD_VAR 0 1
61484: PPUSH
61485: CALL_OW 250
61489: PPUSH
61490: LD_VAR 0 1
61494: PPUSH
61495: CALL_OW 251
61499: PPUSH
61500: LD_VAR 0 2
61504: PPUSH
61505: CALL 34719 0 4
61509: PUSH
61510: LD_INT 4
61512: ARRAY
61513: ST_TO_ADDR
// end ;
61514: LD_VAR 0 3
61518: RET
// export function PlayerSeeMe ( unit ) ; begin
61519: LD_INT 0
61521: PPUSH
// result := See ( your_side , unit ) ;
61522: LD_ADDR_VAR 0 2
61526: PUSH
61527: LD_OWVAR 2
61531: PPUSH
61532: LD_VAR 0 1
61536: PPUSH
61537: CALL_OW 292
61541: ST_TO_ADDR
// end ;
61542: LD_VAR 0 2
61546: RET
// export function ReverseDir ( unit ) ; begin
61547: LD_INT 0
61549: PPUSH
// if not unit then
61550: LD_VAR 0 1
61554: NOT
61555: IFFALSE 61559
// exit ;
61557: GO 61582
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61559: LD_ADDR_VAR 0 2
61563: PUSH
61564: LD_VAR 0 1
61568: PPUSH
61569: CALL_OW 254
61573: PUSH
61574: LD_INT 3
61576: PLUS
61577: PUSH
61578: LD_INT 6
61580: MOD
61581: ST_TO_ADDR
// end ;
61582: LD_VAR 0 2
61586: RET
// export function ReverseArray ( array ) ; var i ; begin
61587: LD_INT 0
61589: PPUSH
61590: PPUSH
// if not array then
61591: LD_VAR 0 1
61595: NOT
61596: IFFALSE 61600
// exit ;
61598: GO 61655
// result := [ ] ;
61600: LD_ADDR_VAR 0 2
61604: PUSH
61605: EMPTY
61606: ST_TO_ADDR
// for i := array downto 1 do
61607: LD_ADDR_VAR 0 3
61611: PUSH
61612: DOUBLE
61613: LD_VAR 0 1
61617: INC
61618: ST_TO_ADDR
61619: LD_INT 1
61621: PUSH
61622: FOR_DOWNTO
61623: IFFALSE 61653
// result := Join ( result , array [ i ] ) ;
61625: LD_ADDR_VAR 0 2
61629: PUSH
61630: LD_VAR 0 2
61634: PPUSH
61635: LD_VAR 0 1
61639: PUSH
61640: LD_VAR 0 3
61644: ARRAY
61645: PPUSH
61646: CALL 66507 0 2
61650: ST_TO_ADDR
61651: GO 61622
61653: POP
61654: POP
// end ;
61655: LD_VAR 0 2
61659: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61660: LD_INT 0
61662: PPUSH
61663: PPUSH
61664: PPUSH
61665: PPUSH
61666: PPUSH
61667: PPUSH
// if not unit or not hexes then
61668: LD_VAR 0 1
61672: NOT
61673: IFTRUE 61682
61675: PUSH
61676: LD_VAR 0 2
61680: NOT
61681: OR
61682: IFFALSE 61686
// exit ;
61684: GO 61809
// dist := 9999 ;
61686: LD_ADDR_VAR 0 5
61690: PUSH
61691: LD_INT 9999
61693: ST_TO_ADDR
// for i = 1 to hexes do
61694: LD_ADDR_VAR 0 4
61698: PUSH
61699: DOUBLE
61700: LD_INT 1
61702: DEC
61703: ST_TO_ADDR
61704: LD_VAR 0 2
61708: PUSH
61709: FOR_TO
61710: IFFALSE 61797
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61712: LD_ADDR_VAR 0 6
61716: PUSH
61717: LD_VAR 0 1
61721: PPUSH
61722: LD_VAR 0 2
61726: PUSH
61727: LD_VAR 0 4
61731: ARRAY
61732: PUSH
61733: LD_INT 1
61735: ARRAY
61736: PPUSH
61737: LD_VAR 0 2
61741: PUSH
61742: LD_VAR 0 4
61746: ARRAY
61747: PUSH
61748: LD_INT 2
61750: ARRAY
61751: PPUSH
61752: CALL_OW 297
61756: ST_TO_ADDR
// if tdist < dist then
61757: LD_VAR 0 6
61761: PUSH
61762: LD_VAR 0 5
61766: LESS
61767: IFFALSE 61795
// begin hex := hexes [ i ] ;
61769: LD_ADDR_VAR 0 8
61773: PUSH
61774: LD_VAR 0 2
61778: PUSH
61779: LD_VAR 0 4
61783: ARRAY
61784: ST_TO_ADDR
// dist := tdist ;
61785: LD_ADDR_VAR 0 5
61789: PUSH
61790: LD_VAR 0 6
61794: ST_TO_ADDR
// end ; end ;
61795: GO 61709
61797: POP
61798: POP
// result := hex ;
61799: LD_ADDR_VAR 0 3
61803: PUSH
61804: LD_VAR 0 8
61808: ST_TO_ADDR
// end ;
61809: LD_VAR 0 3
61813: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61814: LD_INT 0
61816: PPUSH
61817: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61818: LD_VAR 0 1
61822: NOT
61823: IFTRUE 61862
61825: PUSH
61826: LD_VAR 0 1
61830: PUSH
61831: LD_INT 21
61833: PUSH
61834: LD_INT 2
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 23
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PPUSH
61855: CALL_OW 69
61859: IN
61860: NOT
61861: OR
61862: IFFALSE 61866
// exit ;
61864: GO 61913
// for i = 1 to 3 do
61866: LD_ADDR_VAR 0 3
61870: PUSH
61871: DOUBLE
61872: LD_INT 1
61874: DEC
61875: ST_TO_ADDR
61876: LD_INT 3
61878: PUSH
61879: FOR_TO
61880: IFFALSE 61911
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61882: LD_VAR 0 1
61886: PPUSH
61887: CALL_OW 250
61891: PPUSH
61892: LD_VAR 0 1
61896: PPUSH
61897: CALL_OW 251
61901: PPUSH
61902: LD_INT 1
61904: PPUSH
61905: CALL_OW 453
61909: GO 61879
61911: POP
61912: POP
// end ;
61913: LD_VAR 0 2
61917: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61918: LD_INT 0
61920: PPUSH
61921: PPUSH
61922: PPUSH
61923: PPUSH
61924: PPUSH
61925: PPUSH
// if not unit or not enemy_unit then
61926: LD_VAR 0 1
61930: NOT
61931: IFTRUE 61940
61933: PUSH
61934: LD_VAR 0 2
61938: NOT
61939: OR
61940: IFFALSE 61944
// exit ;
61942: GO 62425
// if GetLives ( i ) < 250 then
61944: LD_VAR 0 4
61948: PPUSH
61949: CALL_OW 256
61953: PUSH
61954: LD_INT 250
61956: LESS
61957: IFFALSE 61970
// begin ComAutodestruct ( i ) ;
61959: LD_VAR 0 4
61963: PPUSH
61964: CALL 61814 0 1
// exit ;
61968: GO 62425
// end ; x := GetX ( enemy_unit ) ;
61970: LD_ADDR_VAR 0 7
61974: PUSH
61975: LD_VAR 0 2
61979: PPUSH
61980: CALL_OW 250
61984: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61985: LD_ADDR_VAR 0 8
61989: PUSH
61990: LD_VAR 0 2
61994: PPUSH
61995: CALL_OW 251
61999: ST_TO_ADDR
// if not x or not y then
62000: LD_VAR 0 7
62004: NOT
62005: IFTRUE 62014
62007: PUSH
62008: LD_VAR 0 8
62012: NOT
62013: OR
62014: IFFALSE 62018
// exit ;
62016: GO 62425
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62018: LD_ADDR_VAR 0 6
62022: PUSH
62023: LD_VAR 0 7
62027: PPUSH
62028: LD_INT 0
62030: PPUSH
62031: LD_INT 4
62033: PPUSH
62034: CALL_OW 272
62038: PUSH
62039: LD_VAR 0 8
62043: PPUSH
62044: LD_INT 0
62046: PPUSH
62047: LD_INT 4
62049: PPUSH
62050: CALL_OW 273
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_VAR 0 7
62063: PPUSH
62064: LD_INT 1
62066: PPUSH
62067: LD_INT 4
62069: PPUSH
62070: CALL_OW 272
62074: PUSH
62075: LD_VAR 0 8
62079: PPUSH
62080: LD_INT 1
62082: PPUSH
62083: LD_INT 4
62085: PPUSH
62086: CALL_OW 273
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_VAR 0 7
62099: PPUSH
62100: LD_INT 2
62102: PPUSH
62103: LD_INT 4
62105: PPUSH
62106: CALL_OW 272
62110: PUSH
62111: LD_VAR 0 8
62115: PPUSH
62116: LD_INT 2
62118: PPUSH
62119: LD_INT 4
62121: PPUSH
62122: CALL_OW 273
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_VAR 0 7
62135: PPUSH
62136: LD_INT 3
62138: PPUSH
62139: LD_INT 4
62141: PPUSH
62142: CALL_OW 272
62146: PUSH
62147: LD_VAR 0 8
62151: PPUSH
62152: LD_INT 3
62154: PPUSH
62155: LD_INT 4
62157: PPUSH
62158: CALL_OW 273
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_VAR 0 7
62171: PPUSH
62172: LD_INT 4
62174: PPUSH
62175: LD_INT 4
62177: PPUSH
62178: CALL_OW 272
62182: PUSH
62183: LD_VAR 0 8
62187: PPUSH
62188: LD_INT 4
62190: PPUSH
62191: LD_INT 4
62193: PPUSH
62194: CALL_OW 273
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_VAR 0 7
62207: PPUSH
62208: LD_INT 5
62210: PPUSH
62211: LD_INT 4
62213: PPUSH
62214: CALL_OW 272
62218: PUSH
62219: LD_VAR 0 8
62223: PPUSH
62224: LD_INT 5
62226: PPUSH
62227: LD_INT 4
62229: PPUSH
62230: CALL_OW 273
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: ST_TO_ADDR
// for i = tmp downto 1 do
62247: LD_ADDR_VAR 0 4
62251: PUSH
62252: DOUBLE
62253: LD_VAR 0 6
62257: INC
62258: ST_TO_ADDR
62259: LD_INT 1
62261: PUSH
62262: FOR_DOWNTO
62263: IFFALSE 62366
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62265: LD_VAR 0 6
62269: PUSH
62270: LD_VAR 0 4
62274: ARRAY
62275: PUSH
62276: LD_INT 1
62278: ARRAY
62279: PPUSH
62280: LD_VAR 0 6
62284: PUSH
62285: LD_VAR 0 4
62289: ARRAY
62290: PUSH
62291: LD_INT 2
62293: ARRAY
62294: PPUSH
62295: CALL_OW 488
62299: NOT
62300: IFTRUE 62342
62302: PUSH
62303: LD_VAR 0 6
62307: PUSH
62308: LD_VAR 0 4
62312: ARRAY
62313: PUSH
62314: LD_INT 1
62316: ARRAY
62317: PPUSH
62318: LD_VAR 0 6
62322: PUSH
62323: LD_VAR 0 4
62327: ARRAY
62328: PUSH
62329: LD_INT 2
62331: ARRAY
62332: PPUSH
62333: CALL_OW 428
62337: PUSH
62338: LD_INT 0
62340: NONEQUAL
62341: OR
62342: IFFALSE 62364
// tmp := Delete ( tmp , i ) ;
62344: LD_ADDR_VAR 0 6
62348: PUSH
62349: LD_VAR 0 6
62353: PPUSH
62354: LD_VAR 0 4
62358: PPUSH
62359: CALL_OW 3
62363: ST_TO_ADDR
62364: GO 62262
62366: POP
62367: POP
// j := GetClosestHex ( unit , tmp ) ;
62368: LD_ADDR_VAR 0 5
62372: PUSH
62373: LD_VAR 0 1
62377: PPUSH
62378: LD_VAR 0 6
62382: PPUSH
62383: CALL 61660 0 2
62387: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62388: LD_VAR 0 1
62392: PPUSH
62393: LD_VAR 0 5
62397: PUSH
62398: LD_INT 1
62400: ARRAY
62401: PPUSH
62402: LD_VAR 0 5
62406: PUSH
62407: LD_INT 2
62409: ARRAY
62410: PPUSH
62411: CALL_OW 111
// result := j ;
62415: LD_ADDR_VAR 0 3
62419: PUSH
62420: LD_VAR 0 5
62424: ST_TO_ADDR
// end ;
62425: LD_VAR 0 3
62429: RET
// export function PrepareApemanSoldier ( ) ; begin
62430: LD_INT 0
62432: PPUSH
// uc_nation := 0 ;
62433: LD_ADDR_OWVAR 21
62437: PUSH
62438: LD_INT 0
62440: ST_TO_ADDR
// hc_sex := sex_male ;
62441: LD_ADDR_OWVAR 27
62445: PUSH
62446: LD_INT 1
62448: ST_TO_ADDR
// hc_name :=  ;
62449: LD_ADDR_OWVAR 26
62453: PUSH
62454: LD_STRING 
62456: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62457: LD_ADDR_OWVAR 28
62461: PUSH
62462: LD_INT 15
62464: ST_TO_ADDR
// hc_gallery :=  ;
62465: LD_ADDR_OWVAR 33
62469: PUSH
62470: LD_STRING 
62472: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62473: LD_ADDR_OWVAR 31
62477: PUSH
62478: LD_INT 0
62480: PPUSH
62481: LD_INT 3
62483: PPUSH
62484: CALL_OW 12
62488: PUSH
62489: LD_INT 0
62491: PPUSH
62492: LD_INT 3
62494: PPUSH
62495: CALL_OW 12
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
62512: LD_ADDR_OWVAR 29
62516: PUSH
62517: LD_INT 10
62519: PUSH
62520: LD_INT 12
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: ST_TO_ADDR
// end ;
62527: LD_VAR 0 1
62531: RET
// export function PrepareApemanEngineer ( ) ; begin
62532: LD_INT 0
62534: PPUSH
// uc_nation := 0 ;
62535: LD_ADDR_OWVAR 21
62539: PUSH
62540: LD_INT 0
62542: ST_TO_ADDR
// hc_sex := sex_male ;
62543: LD_ADDR_OWVAR 27
62547: PUSH
62548: LD_INT 1
62550: ST_TO_ADDR
// hc_name :=  ;
62551: LD_ADDR_OWVAR 26
62555: PUSH
62556: LD_STRING 
62558: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62559: LD_ADDR_OWVAR 28
62563: PUSH
62564: LD_INT 16
62566: ST_TO_ADDR
// hc_gallery :=  ;
62567: LD_ADDR_OWVAR 33
62571: PUSH
62572: LD_STRING 
62574: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62575: LD_ADDR_OWVAR 31
62579: PUSH
62580: LD_INT 0
62582: PPUSH
62583: LD_INT 3
62585: PPUSH
62586: CALL_OW 12
62590: PUSH
62591: LD_INT 0
62593: PPUSH
62594: LD_INT 3
62596: PPUSH
62597: CALL_OW 12
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
62614: LD_ADDR_OWVAR 29
62618: PUSH
62619: LD_INT 10
62621: PUSH
62622: LD_INT 12
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: ST_TO_ADDR
// end ;
62629: LD_VAR 0 1
62633: RET
// export function PrepareApeman ( agressivity ) ; begin
62634: LD_INT 0
62636: PPUSH
// uc_side := 0 ;
62637: LD_ADDR_OWVAR 20
62641: PUSH
62642: LD_INT 0
62644: ST_TO_ADDR
// uc_nation := 0 ;
62645: LD_ADDR_OWVAR 21
62649: PUSH
62650: LD_INT 0
62652: ST_TO_ADDR
// hc_sex := sex_male ;
62653: LD_ADDR_OWVAR 27
62657: PUSH
62658: LD_INT 1
62660: ST_TO_ADDR
// hc_class := class_apeman ;
62661: LD_ADDR_OWVAR 28
62665: PUSH
62666: LD_INT 12
62668: ST_TO_ADDR
// hc_gallery :=  ;
62669: LD_ADDR_OWVAR 33
62673: PUSH
62674: LD_STRING 
62676: ST_TO_ADDR
// hc_name :=  ;
62677: LD_ADDR_OWVAR 26
62681: PUSH
62682: LD_STRING 
62684: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
62685: LD_ADDR_OWVAR 29
62689: PUSH
62690: LD_INT 10
62692: PUSH
62693: LD_INT 12
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: ST_TO_ADDR
// if agressivity = 0 then
62700: LD_VAR 0 1
62704: PUSH
62705: LD_INT 0
62707: EQUAL
62708: IFFALSE 62720
// hc_agressivity := 0 else
62710: LD_ADDR_OWVAR 35
62714: PUSH
62715: LD_INT 0
62717: ST_TO_ADDR
62718: GO 62741
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62720: LD_ADDR_OWVAR 35
62724: PUSH
62725: LD_VAR 0 1
62729: NEG
62730: PPUSH
62731: LD_VAR 0 1
62735: PPUSH
62736: CALL_OW 12
62740: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62741: LD_ADDR_OWVAR 31
62745: PUSH
62746: LD_INT 0
62748: PPUSH
62749: LD_INT 3
62751: PPUSH
62752: CALL_OW 12
62756: PUSH
62757: LD_INT 0
62759: PPUSH
62760: LD_INT 3
62762: PPUSH
62763: CALL_OW 12
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: ST_TO_ADDR
// end ;
62780: LD_VAR 0 2
62784: RET
// export function PrepareTiger ( agressivity ) ; begin
62785: LD_INT 0
62787: PPUSH
// uc_side := 0 ;
62788: LD_ADDR_OWVAR 20
62792: PUSH
62793: LD_INT 0
62795: ST_TO_ADDR
// uc_nation := 0 ;
62796: LD_ADDR_OWVAR 21
62800: PUSH
62801: LD_INT 0
62803: ST_TO_ADDR
// InitHc ;
62804: CALL_OW 19
// hc_class := class_tiger ;
62808: LD_ADDR_OWVAR 28
62812: PUSH
62813: LD_INT 14
62815: ST_TO_ADDR
// hc_gallery :=  ;
62816: LD_ADDR_OWVAR 33
62820: PUSH
62821: LD_STRING 
62823: ST_TO_ADDR
// hc_name :=  ;
62824: LD_ADDR_OWVAR 26
62828: PUSH
62829: LD_STRING 
62831: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62832: LD_ADDR_OWVAR 35
62836: PUSH
62837: LD_VAR 0 1
62841: NEG
62842: PPUSH
62843: LD_VAR 0 1
62847: PPUSH
62848: CALL_OW 12
62852: ST_TO_ADDR
// end ;
62853: LD_VAR 0 2
62857: RET
// export function PrepareEnchidna ( ) ; begin
62858: LD_INT 0
62860: PPUSH
// uc_side := 0 ;
62861: LD_ADDR_OWVAR 20
62865: PUSH
62866: LD_INT 0
62868: ST_TO_ADDR
// uc_nation := 0 ;
62869: LD_ADDR_OWVAR 21
62873: PUSH
62874: LD_INT 0
62876: ST_TO_ADDR
// InitHc ;
62877: CALL_OW 19
// hc_class := class_baggie ;
62881: LD_ADDR_OWVAR 28
62885: PUSH
62886: LD_INT 13
62888: ST_TO_ADDR
// hc_gallery :=  ;
62889: LD_ADDR_OWVAR 33
62893: PUSH
62894: LD_STRING 
62896: ST_TO_ADDR
// hc_name :=  ;
62897: LD_ADDR_OWVAR 26
62901: PUSH
62902: LD_STRING 
62904: ST_TO_ADDR
// end ;
62905: LD_VAR 0 1
62909: RET
// export function PrepareFrog ( ) ; begin
62910: LD_INT 0
62912: PPUSH
// uc_side := 0 ;
62913: LD_ADDR_OWVAR 20
62917: PUSH
62918: LD_INT 0
62920: ST_TO_ADDR
// uc_nation := 0 ;
62921: LD_ADDR_OWVAR 21
62925: PUSH
62926: LD_INT 0
62928: ST_TO_ADDR
// InitHc ;
62929: CALL_OW 19
// hc_class := class_frog ;
62933: LD_ADDR_OWVAR 28
62937: PUSH
62938: LD_INT 19
62940: ST_TO_ADDR
// hc_gallery :=  ;
62941: LD_ADDR_OWVAR 33
62945: PUSH
62946: LD_STRING 
62948: ST_TO_ADDR
// hc_name :=  ;
62949: LD_ADDR_OWVAR 26
62953: PUSH
62954: LD_STRING 
62956: ST_TO_ADDR
// end ;
62957: LD_VAR 0 1
62961: RET
// export function PrepareFish ( ) ; begin
62962: LD_INT 0
62964: PPUSH
// uc_side := 0 ;
62965: LD_ADDR_OWVAR 20
62969: PUSH
62970: LD_INT 0
62972: ST_TO_ADDR
// uc_nation := 0 ;
62973: LD_ADDR_OWVAR 21
62977: PUSH
62978: LD_INT 0
62980: ST_TO_ADDR
// InitHc ;
62981: CALL_OW 19
// hc_class := class_fish ;
62985: LD_ADDR_OWVAR 28
62989: PUSH
62990: LD_INT 20
62992: ST_TO_ADDR
// hc_gallery :=  ;
62993: LD_ADDR_OWVAR 33
62997: PUSH
62998: LD_STRING 
63000: ST_TO_ADDR
// hc_name :=  ;
63001: LD_ADDR_OWVAR 26
63005: PUSH
63006: LD_STRING 
63008: ST_TO_ADDR
// end ;
63009: LD_VAR 0 1
63013: RET
// export function PrepareBird ( ) ; begin
63014: LD_INT 0
63016: PPUSH
// uc_side := 0 ;
63017: LD_ADDR_OWVAR 20
63021: PUSH
63022: LD_INT 0
63024: ST_TO_ADDR
// uc_nation := 0 ;
63025: LD_ADDR_OWVAR 21
63029: PUSH
63030: LD_INT 0
63032: ST_TO_ADDR
// InitHc ;
63033: CALL_OW 19
// hc_class := class_phororhacos ;
63037: LD_ADDR_OWVAR 28
63041: PUSH
63042: LD_INT 18
63044: ST_TO_ADDR
// hc_gallery :=  ;
63045: LD_ADDR_OWVAR 33
63049: PUSH
63050: LD_STRING 
63052: ST_TO_ADDR
// hc_name :=  ;
63053: LD_ADDR_OWVAR 26
63057: PUSH
63058: LD_STRING 
63060: ST_TO_ADDR
// end ;
63061: LD_VAR 0 1
63065: RET
// export function PrepareHorse ( ) ; begin
63066: LD_INT 0
63068: PPUSH
// uc_side := 0 ;
63069: LD_ADDR_OWVAR 20
63073: PUSH
63074: LD_INT 0
63076: ST_TO_ADDR
// uc_nation := 0 ;
63077: LD_ADDR_OWVAR 21
63081: PUSH
63082: LD_INT 0
63084: ST_TO_ADDR
// InitHc ;
63085: CALL_OW 19
// hc_class := class_horse ;
63089: LD_ADDR_OWVAR 28
63093: PUSH
63094: LD_INT 21
63096: ST_TO_ADDR
// hc_gallery :=  ;
63097: LD_ADDR_OWVAR 33
63101: PUSH
63102: LD_STRING 
63104: ST_TO_ADDR
// hc_name :=  ;
63105: LD_ADDR_OWVAR 26
63109: PUSH
63110: LD_STRING 
63112: ST_TO_ADDR
// end ;
63113: LD_VAR 0 1
63117: RET
// export function PrepareMastodont ( ) ; begin
63118: LD_INT 0
63120: PPUSH
// uc_side := 0 ;
63121: LD_ADDR_OWVAR 20
63125: PUSH
63126: LD_INT 0
63128: ST_TO_ADDR
// uc_nation := 0 ;
63129: LD_ADDR_OWVAR 21
63133: PUSH
63134: LD_INT 0
63136: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63137: LD_ADDR_OWVAR 37
63141: PUSH
63142: LD_INT 31
63144: ST_TO_ADDR
// vc_control := control_rider ;
63145: LD_ADDR_OWVAR 38
63149: PUSH
63150: LD_INT 4
63152: ST_TO_ADDR
// end ;
63153: LD_VAR 0 1
63157: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63158: LD_INT 0
63160: PPUSH
63161: PPUSH
63162: PPUSH
// uc_side = 0 ;
63163: LD_ADDR_OWVAR 20
63167: PUSH
63168: LD_INT 0
63170: ST_TO_ADDR
// uc_nation = 0 ;
63171: LD_ADDR_OWVAR 21
63175: PUSH
63176: LD_INT 0
63178: ST_TO_ADDR
// InitHc_All ( ) ;
63179: CALL_OW 584
// InitVc ;
63183: CALL_OW 20
// if mastodonts then
63187: LD_VAR 0 6
63191: IFFALSE 63258
// for i = 1 to mastodonts do
63193: LD_ADDR_VAR 0 11
63197: PUSH
63198: DOUBLE
63199: LD_INT 1
63201: DEC
63202: ST_TO_ADDR
63203: LD_VAR 0 6
63207: PUSH
63208: FOR_TO
63209: IFFALSE 63256
// begin vc_chassis := 31 ;
63211: LD_ADDR_OWVAR 37
63215: PUSH
63216: LD_INT 31
63218: ST_TO_ADDR
// vc_control := control_rider ;
63219: LD_ADDR_OWVAR 38
63223: PUSH
63224: LD_INT 4
63226: ST_TO_ADDR
// animal := CreateVehicle ;
63227: LD_ADDR_VAR 0 12
63231: PUSH
63232: CALL_OW 45
63236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63237: LD_VAR 0 12
63241: PPUSH
63242: LD_VAR 0 8
63246: PPUSH
63247: LD_INT 0
63249: PPUSH
63250: CALL 65400 0 3
// end ;
63254: GO 63208
63256: POP
63257: POP
// if horses then
63258: LD_VAR 0 5
63262: IFFALSE 63329
// for i = 1 to horses do
63264: LD_ADDR_VAR 0 11
63268: PUSH
63269: DOUBLE
63270: LD_INT 1
63272: DEC
63273: ST_TO_ADDR
63274: LD_VAR 0 5
63278: PUSH
63279: FOR_TO
63280: IFFALSE 63327
// begin hc_class := 21 ;
63282: LD_ADDR_OWVAR 28
63286: PUSH
63287: LD_INT 21
63289: ST_TO_ADDR
// hc_gallery :=  ;
63290: LD_ADDR_OWVAR 33
63294: PUSH
63295: LD_STRING 
63297: ST_TO_ADDR
// animal := CreateHuman ;
63298: LD_ADDR_VAR 0 12
63302: PUSH
63303: CALL_OW 44
63307: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63308: LD_VAR 0 12
63312: PPUSH
63313: LD_VAR 0 8
63317: PPUSH
63318: LD_INT 0
63320: PPUSH
63321: CALL 65400 0 3
// end ;
63325: GO 63279
63327: POP
63328: POP
// if birds then
63329: LD_VAR 0 1
63333: IFFALSE 63400
// for i = 1 to birds do
63335: LD_ADDR_VAR 0 11
63339: PUSH
63340: DOUBLE
63341: LD_INT 1
63343: DEC
63344: ST_TO_ADDR
63345: LD_VAR 0 1
63349: PUSH
63350: FOR_TO
63351: IFFALSE 63398
// begin hc_class := 18 ;
63353: LD_ADDR_OWVAR 28
63357: PUSH
63358: LD_INT 18
63360: ST_TO_ADDR
// hc_gallery =  ;
63361: LD_ADDR_OWVAR 33
63365: PUSH
63366: LD_STRING 
63368: ST_TO_ADDR
// animal := CreateHuman ;
63369: LD_ADDR_VAR 0 12
63373: PUSH
63374: CALL_OW 44
63378: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63379: LD_VAR 0 12
63383: PPUSH
63384: LD_VAR 0 8
63388: PPUSH
63389: LD_INT 0
63391: PPUSH
63392: CALL 65400 0 3
// end ;
63396: GO 63350
63398: POP
63399: POP
// if tigers then
63400: LD_VAR 0 2
63404: IFFALSE 63488
// for i = 1 to tigers do
63406: LD_ADDR_VAR 0 11
63410: PUSH
63411: DOUBLE
63412: LD_INT 1
63414: DEC
63415: ST_TO_ADDR
63416: LD_VAR 0 2
63420: PUSH
63421: FOR_TO
63422: IFFALSE 63486
// begin hc_class = class_tiger ;
63424: LD_ADDR_OWVAR 28
63428: PUSH
63429: LD_INT 14
63431: ST_TO_ADDR
// hc_gallery =  ;
63432: LD_ADDR_OWVAR 33
63436: PUSH
63437: LD_STRING 
63439: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63440: LD_ADDR_OWVAR 35
63444: PUSH
63445: LD_INT 7
63447: NEG
63448: PPUSH
63449: LD_INT 7
63451: PPUSH
63452: CALL_OW 12
63456: ST_TO_ADDR
// animal := CreateHuman ;
63457: LD_ADDR_VAR 0 12
63461: PUSH
63462: CALL_OW 44
63466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63467: LD_VAR 0 12
63471: PPUSH
63472: LD_VAR 0 8
63476: PPUSH
63477: LD_INT 0
63479: PPUSH
63480: CALL 65400 0 3
// end ;
63484: GO 63421
63486: POP
63487: POP
// if apemans then
63488: LD_VAR 0 3
63492: IFFALSE 63615
// for i = 1 to apemans do
63494: LD_ADDR_VAR 0 11
63498: PUSH
63499: DOUBLE
63500: LD_INT 1
63502: DEC
63503: ST_TO_ADDR
63504: LD_VAR 0 3
63508: PUSH
63509: FOR_TO
63510: IFFALSE 63613
// begin hc_class = class_apeman ;
63512: LD_ADDR_OWVAR 28
63516: PUSH
63517: LD_INT 12
63519: ST_TO_ADDR
// hc_gallery =  ;
63520: LD_ADDR_OWVAR 33
63524: PUSH
63525: LD_STRING 
63527: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63528: LD_ADDR_OWVAR 35
63532: PUSH
63533: LD_INT 2
63535: NEG
63536: PPUSH
63537: LD_INT 2
63539: PPUSH
63540: CALL_OW 12
63544: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63545: LD_ADDR_OWVAR 31
63549: PUSH
63550: LD_INT 1
63552: PPUSH
63553: LD_INT 3
63555: PPUSH
63556: CALL_OW 12
63560: PUSH
63561: LD_INT 1
63563: PPUSH
63564: LD_INT 3
63566: PPUSH
63567: CALL_OW 12
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: LD_INT 0
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: ST_TO_ADDR
// animal := CreateHuman ;
63584: LD_ADDR_VAR 0 12
63588: PUSH
63589: CALL_OW 44
63593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63594: LD_VAR 0 12
63598: PPUSH
63599: LD_VAR 0 8
63603: PPUSH
63604: LD_INT 0
63606: PPUSH
63607: CALL 65400 0 3
// end ;
63611: GO 63509
63613: POP
63614: POP
// if enchidnas then
63615: LD_VAR 0 4
63619: IFFALSE 63686
// for i = 1 to enchidnas do
63621: LD_ADDR_VAR 0 11
63625: PUSH
63626: DOUBLE
63627: LD_INT 1
63629: DEC
63630: ST_TO_ADDR
63631: LD_VAR 0 4
63635: PUSH
63636: FOR_TO
63637: IFFALSE 63684
// begin hc_class = 13 ;
63639: LD_ADDR_OWVAR 28
63643: PUSH
63644: LD_INT 13
63646: ST_TO_ADDR
// hc_gallery =  ;
63647: LD_ADDR_OWVAR 33
63651: PUSH
63652: LD_STRING 
63654: ST_TO_ADDR
// animal := CreateHuman ;
63655: LD_ADDR_VAR 0 12
63659: PUSH
63660: CALL_OW 44
63664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63665: LD_VAR 0 12
63669: PPUSH
63670: LD_VAR 0 8
63674: PPUSH
63675: LD_INT 0
63677: PPUSH
63678: CALL 65400 0 3
// end ;
63682: GO 63636
63684: POP
63685: POP
// if fishes then
63686: LD_VAR 0 7
63690: IFFALSE 63757
// for i = 1 to fishes do
63692: LD_ADDR_VAR 0 11
63696: PUSH
63697: DOUBLE
63698: LD_INT 1
63700: DEC
63701: ST_TO_ADDR
63702: LD_VAR 0 7
63706: PUSH
63707: FOR_TO
63708: IFFALSE 63755
// begin hc_class = 20 ;
63710: LD_ADDR_OWVAR 28
63714: PUSH
63715: LD_INT 20
63717: ST_TO_ADDR
// hc_gallery =  ;
63718: LD_ADDR_OWVAR 33
63722: PUSH
63723: LD_STRING 
63725: ST_TO_ADDR
// animal := CreateHuman ;
63726: LD_ADDR_VAR 0 12
63730: PUSH
63731: CALL_OW 44
63735: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63736: LD_VAR 0 12
63740: PPUSH
63741: LD_VAR 0 9
63745: PPUSH
63746: LD_INT 0
63748: PPUSH
63749: CALL 65400 0 3
// end ;
63753: GO 63707
63755: POP
63756: POP
// end ;
63757: LD_VAR 0 10
63761: RET
// export function WantHeal ( sci , unit ) ; begin
63762: LD_INT 0
63764: PPUSH
// if GetTaskList ( sci ) > 0 then
63765: LD_VAR 0 1
63769: PPUSH
63770: CALL_OW 437
63774: PUSH
63775: LD_INT 0
63777: GREATER
63778: IFFALSE 63850
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63780: LD_VAR 0 1
63784: PPUSH
63785: CALL_OW 437
63789: PUSH
63790: LD_INT 1
63792: ARRAY
63793: PUSH
63794: LD_INT 1
63796: ARRAY
63797: PUSH
63798: LD_STRING l
63800: EQUAL
63801: IFFALSE 63828
63803: PUSH
63804: LD_VAR 0 1
63808: PPUSH
63809: CALL_OW 437
63813: PUSH
63814: LD_INT 1
63816: ARRAY
63817: PUSH
63818: LD_INT 4
63820: ARRAY
63821: PUSH
63822: LD_VAR 0 2
63826: EQUAL
63827: AND
63828: IFFALSE 63840
// result := true else
63830: LD_ADDR_VAR 0 3
63834: PUSH
63835: LD_INT 1
63837: ST_TO_ADDR
63838: GO 63848
// result := false ;
63840: LD_ADDR_VAR 0 3
63844: PUSH
63845: LD_INT 0
63847: ST_TO_ADDR
// end else
63848: GO 63858
// result := false ;
63850: LD_ADDR_VAR 0 3
63854: PUSH
63855: LD_INT 0
63857: ST_TO_ADDR
// end ;
63858: LD_VAR 0 3
63862: RET
// export function HealTarget ( sci ) ; begin
63863: LD_INT 0
63865: PPUSH
// if not sci then
63866: LD_VAR 0 1
63870: NOT
63871: IFFALSE 63875
// exit ;
63873: GO 63940
// result := 0 ;
63875: LD_ADDR_VAR 0 2
63879: PUSH
63880: LD_INT 0
63882: ST_TO_ADDR
// if GetTaskList ( sci ) then
63883: LD_VAR 0 1
63887: PPUSH
63888: CALL_OW 437
63892: IFFALSE 63940
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63894: LD_VAR 0 1
63898: PPUSH
63899: CALL_OW 437
63903: PUSH
63904: LD_INT 1
63906: ARRAY
63907: PUSH
63908: LD_INT 1
63910: ARRAY
63911: PUSH
63912: LD_STRING l
63914: EQUAL
63915: IFFALSE 63940
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63917: LD_ADDR_VAR 0 2
63921: PUSH
63922: LD_VAR 0 1
63926: PPUSH
63927: CALL_OW 437
63931: PUSH
63932: LD_INT 1
63934: ARRAY
63935: PUSH
63936: LD_INT 4
63938: ARRAY
63939: ST_TO_ADDR
// end ;
63940: LD_VAR 0 2
63944: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63945: LD_INT 0
63947: PPUSH
63948: PPUSH
63949: PPUSH
63950: PPUSH
// if not base_units then
63951: LD_VAR 0 1
63955: NOT
63956: IFFALSE 63960
// exit ;
63958: GO 64047
// result := false ;
63960: LD_ADDR_VAR 0 2
63964: PUSH
63965: LD_INT 0
63967: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63968: LD_ADDR_VAR 0 5
63972: PUSH
63973: LD_VAR 0 1
63977: PPUSH
63978: LD_INT 21
63980: PUSH
63981: LD_INT 3
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PPUSH
63988: CALL_OW 72
63992: ST_TO_ADDR
// if not tmp then
63993: LD_VAR 0 5
63997: NOT
63998: IFFALSE 64002
// exit ;
64000: GO 64047
// for i in tmp do
64002: LD_ADDR_VAR 0 3
64006: PUSH
64007: LD_VAR 0 5
64011: PUSH
64012: FOR_IN
64013: IFFALSE 64045
// begin result := EnemyInRange ( i , 22 ) ;
64015: LD_ADDR_VAR 0 2
64019: PUSH
64020: LD_VAR 0 3
64024: PPUSH
64025: LD_INT 22
64027: PPUSH
64028: CALL 61462 0 2
64032: ST_TO_ADDR
// if result then
64033: LD_VAR 0 2
64037: IFFALSE 64043
// exit ;
64039: POP
64040: POP
64041: GO 64047
// end ;
64043: GO 64012
64045: POP
64046: POP
// end ;
64047: LD_VAR 0 2
64051: RET
// export function FilterByTag ( units , tag ) ; begin
64052: LD_INT 0
64054: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64055: LD_ADDR_VAR 0 3
64059: PUSH
64060: LD_VAR 0 1
64064: PPUSH
64065: LD_INT 120
64067: PUSH
64068: LD_VAR 0 2
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PPUSH
64077: CALL_OW 72
64081: ST_TO_ADDR
// end ;
64082: LD_VAR 0 3
64086: RET
// export function IsDriver ( un ) ; begin
64087: LD_INT 0
64089: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64090: LD_ADDR_VAR 0 2
64094: PUSH
64095: LD_VAR 0 1
64099: PUSH
64100: LD_INT 55
64102: PUSH
64103: EMPTY
64104: LIST
64105: PPUSH
64106: CALL_OW 69
64110: IN
64111: ST_TO_ADDR
// end ;
64112: LD_VAR 0 2
64116: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64117: LD_INT 0
64119: PPUSH
64120: PPUSH
// list := [ ] ;
64121: LD_ADDR_VAR 0 5
64125: PUSH
64126: EMPTY
64127: ST_TO_ADDR
// case d of 0 :
64128: LD_VAR 0 3
64132: PUSH
64133: LD_INT 0
64135: DOUBLE
64136: EQUAL
64137: IFTRUE 64141
64139: GO 64274
64141: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64142: LD_ADDR_VAR 0 5
64146: PUSH
64147: LD_VAR 0 1
64151: PUSH
64152: LD_INT 4
64154: MINUS
64155: PUSH
64156: LD_VAR 0 2
64160: PUSH
64161: LD_INT 4
64163: MINUS
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: LIST
64172: PUSH
64173: LD_VAR 0 1
64177: PUSH
64178: LD_INT 3
64180: MINUS
64181: PUSH
64182: LD_VAR 0 2
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: LIST
64194: PUSH
64195: LD_VAR 0 1
64199: PUSH
64200: LD_INT 4
64202: PLUS
64203: PUSH
64204: LD_VAR 0 2
64208: PUSH
64209: LD_INT 4
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: PUSH
64217: LD_VAR 0 1
64221: PUSH
64222: LD_INT 3
64224: PLUS
64225: PUSH
64226: LD_VAR 0 2
64230: PUSH
64231: LD_INT 3
64233: PLUS
64234: PUSH
64235: LD_INT 5
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: PUSH
64243: LD_VAR 0 1
64247: PUSH
64248: LD_VAR 0 2
64252: PUSH
64253: LD_INT 4
64255: PLUS
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: LIST
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: ST_TO_ADDR
// end ; 1 :
64272: GO 64972
64274: LD_INT 1
64276: DOUBLE
64277: EQUAL
64278: IFTRUE 64282
64280: GO 64415
64282: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64283: LD_ADDR_VAR 0 5
64287: PUSH
64288: LD_VAR 0 1
64292: PUSH
64293: LD_VAR 0 2
64297: PUSH
64298: LD_INT 4
64300: MINUS
64301: PUSH
64302: LD_INT 3
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: LIST
64309: PUSH
64310: LD_VAR 0 1
64314: PUSH
64315: LD_INT 3
64317: MINUS
64318: PUSH
64319: LD_VAR 0 2
64323: PUSH
64324: LD_INT 3
64326: MINUS
64327: PUSH
64328: LD_INT 2
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: LIST
64335: PUSH
64336: LD_VAR 0 1
64340: PUSH
64341: LD_INT 4
64343: MINUS
64344: PUSH
64345: LD_VAR 0 2
64349: PUSH
64350: LD_INT 1
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: LIST
64357: PUSH
64358: LD_VAR 0 1
64362: PUSH
64363: LD_VAR 0 2
64367: PUSH
64368: LD_INT 3
64370: PLUS
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: LIST
64379: PUSH
64380: LD_VAR 0 1
64384: PUSH
64385: LD_INT 4
64387: PLUS
64388: PUSH
64389: LD_VAR 0 2
64393: PUSH
64394: LD_INT 4
64396: PLUS
64397: PUSH
64398: LD_INT 5
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: LIST
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: ST_TO_ADDR
// end ; 2 :
64413: GO 64972
64415: LD_INT 2
64417: DOUBLE
64418: EQUAL
64419: IFTRUE 64423
64421: GO 64552
64423: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64424: LD_ADDR_VAR 0 5
64428: PUSH
64429: LD_VAR 0 1
64433: PUSH
64434: LD_VAR 0 2
64438: PUSH
64439: LD_INT 3
64441: MINUS
64442: PUSH
64443: LD_INT 3
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: LIST
64450: PUSH
64451: LD_VAR 0 1
64455: PUSH
64456: LD_INT 4
64458: PLUS
64459: PUSH
64460: LD_VAR 0 2
64464: PUSH
64465: LD_INT 4
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: LIST
64472: PUSH
64473: LD_VAR 0 1
64477: PUSH
64478: LD_VAR 0 2
64482: PUSH
64483: LD_INT 4
64485: PLUS
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: LIST
64494: PUSH
64495: LD_VAR 0 1
64499: PUSH
64500: LD_INT 3
64502: MINUS
64503: PUSH
64504: LD_VAR 0 2
64508: PUSH
64509: LD_INT 1
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: PUSH
64517: LD_VAR 0 1
64521: PUSH
64522: LD_INT 4
64524: MINUS
64525: PUSH
64526: LD_VAR 0 2
64530: PUSH
64531: LD_INT 4
64533: MINUS
64534: PUSH
64535: LD_INT 2
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: LIST
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: ST_TO_ADDR
// end ; 3 :
64550: GO 64972
64552: LD_INT 3
64554: DOUBLE
64555: EQUAL
64556: IFTRUE 64560
64558: GO 64693
64560: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64561: LD_ADDR_VAR 0 5
64565: PUSH
64566: LD_VAR 0 1
64570: PUSH
64571: LD_INT 3
64573: PLUS
64574: PUSH
64575: LD_VAR 0 2
64579: PUSH
64580: LD_INT 4
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: LIST
64587: PUSH
64588: LD_VAR 0 1
64592: PUSH
64593: LD_INT 4
64595: PLUS
64596: PUSH
64597: LD_VAR 0 2
64601: PUSH
64602: LD_INT 4
64604: PLUS
64605: PUSH
64606: LD_INT 5
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: LIST
64613: PUSH
64614: LD_VAR 0 1
64618: PUSH
64619: LD_INT 4
64621: MINUS
64622: PUSH
64623: LD_VAR 0 2
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: LIST
64635: PUSH
64636: LD_VAR 0 1
64640: PUSH
64641: LD_VAR 0 2
64645: PUSH
64646: LD_INT 4
64648: MINUS
64649: PUSH
64650: LD_INT 3
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: LIST
64657: PUSH
64658: LD_VAR 0 1
64662: PUSH
64663: LD_INT 3
64665: MINUS
64666: PUSH
64667: LD_VAR 0 2
64671: PUSH
64672: LD_INT 3
64674: MINUS
64675: PUSH
64676: LD_INT 2
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: ST_TO_ADDR
// end ; 4 :
64691: GO 64972
64693: LD_INT 4
64695: DOUBLE
64696: EQUAL
64697: IFTRUE 64701
64699: GO 64834
64701: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64702: LD_ADDR_VAR 0 5
64706: PUSH
64707: LD_VAR 0 1
64711: PUSH
64712: LD_VAR 0 2
64716: PUSH
64717: LD_INT 4
64719: PLUS
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: LIST
64728: PUSH
64729: LD_VAR 0 1
64733: PUSH
64734: LD_INT 3
64736: PLUS
64737: PUSH
64738: LD_VAR 0 2
64742: PUSH
64743: LD_INT 3
64745: PLUS
64746: PUSH
64747: LD_INT 5
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: LIST
64754: PUSH
64755: LD_VAR 0 1
64759: PUSH
64760: LD_INT 4
64762: PLUS
64763: PUSH
64764: LD_VAR 0 2
64768: PUSH
64769: LD_INT 4
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: LIST
64776: PUSH
64777: LD_VAR 0 1
64781: PUSH
64782: LD_VAR 0 2
64786: PUSH
64787: LD_INT 3
64789: MINUS
64790: PUSH
64791: LD_INT 3
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: PUSH
64799: LD_VAR 0 1
64803: PUSH
64804: LD_INT 4
64806: MINUS
64807: PUSH
64808: LD_VAR 0 2
64812: PUSH
64813: LD_INT 4
64815: MINUS
64816: PUSH
64817: LD_INT 2
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: LIST
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: ST_TO_ADDR
// end ; 5 :
64832: GO 64972
64834: LD_INT 5
64836: DOUBLE
64837: EQUAL
64838: IFTRUE 64842
64840: GO 64971
64842: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64843: LD_ADDR_VAR 0 5
64847: PUSH
64848: LD_VAR 0 1
64852: PUSH
64853: LD_INT 4
64855: MINUS
64856: PUSH
64857: LD_VAR 0 2
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: LIST
64869: PUSH
64870: LD_VAR 0 1
64874: PUSH
64875: LD_VAR 0 2
64879: PUSH
64880: LD_INT 4
64882: MINUS
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: LIST
64891: PUSH
64892: LD_VAR 0 1
64896: PUSH
64897: LD_INT 4
64899: PLUS
64900: PUSH
64901: LD_VAR 0 2
64905: PUSH
64906: LD_INT 4
64908: PLUS
64909: PUSH
64910: LD_INT 5
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: LIST
64917: PUSH
64918: LD_VAR 0 1
64922: PUSH
64923: LD_INT 3
64925: PLUS
64926: PUSH
64927: LD_VAR 0 2
64931: PUSH
64932: LD_INT 4
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: LIST
64939: PUSH
64940: LD_VAR 0 1
64944: PUSH
64945: LD_VAR 0 2
64949: PUSH
64950: LD_INT 3
64952: PLUS
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: LIST
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: ST_TO_ADDR
// end ; end ;
64969: GO 64972
64971: POP
// result := list ;
64972: LD_ADDR_VAR 0 4
64976: PUSH
64977: LD_VAR 0 5
64981: ST_TO_ADDR
// end ;
64982: LD_VAR 0 4
64986: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64987: LD_INT 0
64989: PPUSH
64990: PPUSH
64991: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64992: LD_VAR 0 1
64996: NOT
64997: IFTRUE 65025
64999: PUSH
65000: LD_VAR 0 2
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: LD_INT 2
65010: PUSH
65011: LD_INT 3
65013: PUSH
65014: LD_INT 4
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: IN
65023: NOT
65024: OR
65025: IFFALSE 65029
// exit ;
65027: GO 65112
// tmp := [ ] ;
65029: LD_ADDR_VAR 0 5
65033: PUSH
65034: EMPTY
65035: ST_TO_ADDR
// for i in units do
65036: LD_ADDR_VAR 0 4
65040: PUSH
65041: LD_VAR 0 1
65045: PUSH
65046: FOR_IN
65047: IFFALSE 65081
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65049: LD_ADDR_VAR 0 5
65053: PUSH
65054: LD_VAR 0 5
65058: PPUSH
65059: LD_VAR 0 4
65063: PPUSH
65064: LD_VAR 0 2
65068: PPUSH
65069: CALL_OW 259
65073: PPUSH
65074: CALL 66507 0 2
65078: ST_TO_ADDR
65079: GO 65046
65081: POP
65082: POP
// if not tmp then
65083: LD_VAR 0 5
65087: NOT
65088: IFFALSE 65092
// exit ;
65090: GO 65112
// result := SortListByListDesc ( units , tmp ) ;
65092: LD_ADDR_VAR 0 3
65096: PUSH
65097: LD_VAR 0 1
65101: PPUSH
65102: LD_VAR 0 5
65106: PPUSH
65107: CALL_OW 77
65111: ST_TO_ADDR
// end ;
65112: LD_VAR 0 3
65116: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65117: LD_INT 0
65119: PPUSH
65120: PPUSH
65121: PPUSH
// result := false ;
65122: LD_ADDR_VAR 0 3
65126: PUSH
65127: LD_INT 0
65129: ST_TO_ADDR
// if not building then
65130: LD_VAR 0 2
65134: NOT
65135: IFFALSE 65139
// exit ;
65137: GO 65283
// x := GetX ( building ) ;
65139: LD_ADDR_VAR 0 4
65143: PUSH
65144: LD_VAR 0 2
65148: PPUSH
65149: CALL_OW 250
65153: ST_TO_ADDR
// y := GetY ( building ) ;
65154: LD_ADDR_VAR 0 5
65158: PUSH
65159: LD_VAR 0 2
65163: PPUSH
65164: CALL_OW 251
65168: ST_TO_ADDR
// if not x or not y then
65169: LD_VAR 0 4
65173: NOT
65174: IFTRUE 65183
65176: PUSH
65177: LD_VAR 0 5
65181: NOT
65182: OR
65183: IFFALSE 65187
// exit ;
65185: GO 65283
// if GetTaskList ( unit ) then
65187: LD_VAR 0 1
65191: PPUSH
65192: CALL_OW 437
65196: IFFALSE 65283
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65198: LD_STRING e
65200: PUSH
65201: LD_VAR 0 1
65205: PPUSH
65206: CALL_OW 437
65210: PUSH
65211: LD_INT 1
65213: ARRAY
65214: PUSH
65215: LD_INT 1
65217: ARRAY
65218: EQUAL
65219: IFFALSE 65246
65221: PUSH
65222: LD_VAR 0 4
65226: PUSH
65227: LD_VAR 0 1
65231: PPUSH
65232: CALL_OW 437
65236: PUSH
65237: LD_INT 1
65239: ARRAY
65240: PUSH
65241: LD_INT 2
65243: ARRAY
65244: EQUAL
65245: AND
65246: IFFALSE 65273
65248: PUSH
65249: LD_VAR 0 5
65253: PUSH
65254: LD_VAR 0 1
65258: PPUSH
65259: CALL_OW 437
65263: PUSH
65264: LD_INT 1
65266: ARRAY
65267: PUSH
65268: LD_INT 3
65270: ARRAY
65271: EQUAL
65272: AND
65273: IFFALSE 65283
// result := true end ;
65275: LD_ADDR_VAR 0 3
65279: PUSH
65280: LD_INT 1
65282: ST_TO_ADDR
// end ;
65283: LD_VAR 0 3
65287: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65288: LD_INT 0
65290: PPUSH
// result := false ;
65291: LD_ADDR_VAR 0 4
65295: PUSH
65296: LD_INT 0
65298: ST_TO_ADDR
// if GetTaskList ( unit ) then
65299: LD_VAR 0 1
65303: PPUSH
65304: CALL_OW 437
65308: IFFALSE 65395
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65310: LD_STRING M
65312: PUSH
65313: LD_VAR 0 1
65317: PPUSH
65318: CALL_OW 437
65322: PUSH
65323: LD_INT 1
65325: ARRAY
65326: PUSH
65327: LD_INT 1
65329: ARRAY
65330: EQUAL
65331: IFFALSE 65358
65333: PUSH
65334: LD_VAR 0 2
65338: PUSH
65339: LD_VAR 0 1
65343: PPUSH
65344: CALL_OW 437
65348: PUSH
65349: LD_INT 1
65351: ARRAY
65352: PUSH
65353: LD_INT 2
65355: ARRAY
65356: EQUAL
65357: AND
65358: IFFALSE 65385
65360: PUSH
65361: LD_VAR 0 3
65365: PUSH
65366: LD_VAR 0 1
65370: PPUSH
65371: CALL_OW 437
65375: PUSH
65376: LD_INT 1
65378: ARRAY
65379: PUSH
65380: LD_INT 3
65382: ARRAY
65383: EQUAL
65384: AND
65385: IFFALSE 65395
// result := true ;
65387: LD_ADDR_VAR 0 4
65391: PUSH
65392: LD_INT 1
65394: ST_TO_ADDR
// end ; end ;
65395: LD_VAR 0 4
65399: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65400: LD_INT 0
65402: PPUSH
65403: PPUSH
65404: PPUSH
65405: PPUSH
// if not unit or not area then
65406: LD_VAR 0 1
65410: NOT
65411: IFTRUE 65420
65413: PUSH
65414: LD_VAR 0 2
65418: NOT
65419: OR
65420: IFFALSE 65424
// exit ;
65422: GO 65600
// tmp := AreaToList ( area , i ) ;
65424: LD_ADDR_VAR 0 6
65428: PUSH
65429: LD_VAR 0 2
65433: PPUSH
65434: LD_VAR 0 5
65438: PPUSH
65439: CALL_OW 517
65443: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65444: LD_ADDR_VAR 0 5
65448: PUSH
65449: DOUBLE
65450: LD_INT 1
65452: DEC
65453: ST_TO_ADDR
65454: LD_VAR 0 6
65458: PUSH
65459: LD_INT 1
65461: ARRAY
65462: PUSH
65463: FOR_TO
65464: IFFALSE 65598
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65466: LD_ADDR_VAR 0 7
65470: PUSH
65471: LD_VAR 0 6
65475: PUSH
65476: LD_INT 1
65478: ARRAY
65479: PUSH
65480: LD_VAR 0 5
65484: ARRAY
65485: PUSH
65486: LD_VAR 0 6
65490: PUSH
65491: LD_INT 2
65493: ARRAY
65494: PUSH
65495: LD_VAR 0 5
65499: ARRAY
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65505: LD_INT 92
65507: PUSH
65508: LD_VAR 0 7
65512: PUSH
65513: LD_INT 1
65515: ARRAY
65516: PUSH
65517: LD_VAR 0 7
65521: PUSH
65522: LD_INT 2
65524: ARRAY
65525: PUSH
65526: LD_INT 2
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: PPUSH
65535: CALL_OW 69
65539: PUSH
65540: LD_INT 0
65542: EQUAL
65543: IFFALSE 65596
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65545: LD_VAR 0 1
65549: PPUSH
65550: LD_VAR 0 7
65554: PUSH
65555: LD_INT 1
65557: ARRAY
65558: PPUSH
65559: LD_VAR 0 7
65563: PUSH
65564: LD_INT 2
65566: ARRAY
65567: PPUSH
65568: LD_VAR 0 3
65572: PPUSH
65573: CALL_OW 48
// result := IsPlaced ( unit ) ;
65577: LD_ADDR_VAR 0 4
65581: PUSH
65582: LD_VAR 0 1
65586: PPUSH
65587: CALL_OW 305
65591: ST_TO_ADDR
// exit ;
65592: POP
65593: POP
65594: GO 65600
// end ; end ;
65596: GO 65463
65598: POP
65599: POP
// end ;
65600: LD_VAR 0 4
65604: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65605: LD_INT 0
65607: PPUSH
65608: PPUSH
65609: PPUSH
// if not side or side > 8 then
65610: LD_VAR 0 1
65614: NOT
65615: IFTRUE 65627
65617: PUSH
65618: LD_VAR 0 1
65622: PUSH
65623: LD_INT 8
65625: GREATER
65626: OR
65627: IFFALSE 65631
// exit ;
65629: GO 65818
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65631: LD_ADDR_VAR 0 4
65635: PUSH
65636: LD_INT 22
65638: PUSH
65639: LD_VAR 0 1
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 21
65650: PUSH
65651: LD_INT 3
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PPUSH
65662: CALL_OW 69
65666: ST_TO_ADDR
// if not tmp then
65667: LD_VAR 0 4
65671: NOT
65672: IFFALSE 65676
// exit ;
65674: GO 65818
// enable_addtolog := true ;
65676: LD_ADDR_OWVAR 81
65680: PUSH
65681: LD_INT 1
65683: ST_TO_ADDR
// AddToLog ( [ ) ;
65684: LD_STRING [
65686: PPUSH
65687: CALL_OW 561
// for i in tmp do
65691: LD_ADDR_VAR 0 3
65695: PUSH
65696: LD_VAR 0 4
65700: PUSH
65701: FOR_IN
65702: IFFALSE 65809
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65704: LD_STRING [
65706: PUSH
65707: LD_VAR 0 3
65711: PPUSH
65712: CALL_OW 266
65716: STR
65717: PUSH
65718: LD_STRING , 
65720: STR
65721: PUSH
65722: LD_VAR 0 3
65726: PPUSH
65727: CALL_OW 250
65731: STR
65732: PUSH
65733: LD_STRING , 
65735: STR
65736: PUSH
65737: LD_VAR 0 3
65741: PPUSH
65742: CALL_OW 251
65746: STR
65747: PUSH
65748: LD_STRING , 
65750: STR
65751: PUSH
65752: LD_VAR 0 3
65756: PPUSH
65757: CALL_OW 254
65761: STR
65762: PUSH
65763: LD_STRING , 
65765: STR
65766: PUSH
65767: LD_VAR 0 3
65771: PPUSH
65772: LD_INT 1
65774: PPUSH
65775: CALL_OW 268
65779: STR
65780: PUSH
65781: LD_STRING , 
65783: STR
65784: PUSH
65785: LD_VAR 0 3
65789: PPUSH
65790: LD_INT 2
65792: PPUSH
65793: CALL_OW 268
65797: STR
65798: PUSH
65799: LD_STRING ],
65801: STR
65802: PPUSH
65803: CALL_OW 561
// end ;
65807: GO 65701
65809: POP
65810: POP
// AddToLog ( ]; ) ;
65811: LD_STRING ];
65813: PPUSH
65814: CALL_OW 561
// end ;
65818: LD_VAR 0 2
65822: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65823: LD_INT 0
65825: PPUSH
65826: PPUSH
65827: PPUSH
65828: PPUSH
65829: PPUSH
// if not area or not rate or not max then
65830: LD_VAR 0 1
65834: NOT
65835: IFTRUE 65844
65837: PUSH
65838: LD_VAR 0 2
65842: NOT
65843: OR
65844: IFTRUE 65853
65846: PUSH
65847: LD_VAR 0 4
65851: NOT
65852: OR
65853: IFFALSE 65857
// exit ;
65855: GO 66046
// while 1 do
65857: LD_INT 1
65859: IFFALSE 66046
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65861: LD_ADDR_VAR 0 9
65865: PUSH
65866: LD_VAR 0 1
65870: PPUSH
65871: LD_INT 1
65873: PPUSH
65874: CALL_OW 287
65878: PUSH
65879: LD_INT 10
65881: MUL
65882: ST_TO_ADDR
// r := rate / 10 ;
65883: LD_ADDR_VAR 0 7
65887: PUSH
65888: LD_VAR 0 2
65892: PUSH
65893: LD_INT 10
65895: DIVREAL
65896: ST_TO_ADDR
// time := 1 1$00 ;
65897: LD_ADDR_VAR 0 8
65901: PUSH
65902: LD_INT 2100
65904: ST_TO_ADDR
// if amount < min then
65905: LD_VAR 0 9
65909: PUSH
65910: LD_VAR 0 3
65914: LESS
65915: IFFALSE 65933
// r := r * 2 else
65917: LD_ADDR_VAR 0 7
65921: PUSH
65922: LD_VAR 0 7
65926: PUSH
65927: LD_INT 2
65929: MUL
65930: ST_TO_ADDR
65931: GO 65959
// if amount > max then
65933: LD_VAR 0 9
65937: PUSH
65938: LD_VAR 0 4
65942: GREATER
65943: IFFALSE 65959
// r := r / 2 ;
65945: LD_ADDR_VAR 0 7
65949: PUSH
65950: LD_VAR 0 7
65954: PUSH
65955: LD_INT 2
65957: DIVREAL
65958: ST_TO_ADDR
// time := time / r ;
65959: LD_ADDR_VAR 0 8
65963: PUSH
65964: LD_VAR 0 8
65968: PUSH
65969: LD_VAR 0 7
65973: DIVREAL
65974: ST_TO_ADDR
// if time < 0 then
65975: LD_VAR 0 8
65979: PUSH
65980: LD_INT 0
65982: LESS
65983: IFFALSE 66000
// time := time * - 1 ;
65985: LD_ADDR_VAR 0 8
65989: PUSH
65990: LD_VAR 0 8
65994: PUSH
65995: LD_INT 1
65997: NEG
65998: MUL
65999: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66000: LD_VAR 0 8
66004: PUSH
66005: LD_INT 35
66007: PPUSH
66008: LD_INT 875
66010: PPUSH
66011: CALL_OW 12
66015: PLUS
66016: PPUSH
66017: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66021: LD_INT 1
66023: PPUSH
66024: LD_INT 5
66026: PPUSH
66027: CALL_OW 12
66031: PPUSH
66032: LD_VAR 0 1
66036: PPUSH
66037: LD_INT 1
66039: PPUSH
66040: CALL_OW 55
// end ;
66044: GO 65857
// end ;
66046: LD_VAR 0 5
66050: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66051: LD_INT 0
66053: PPUSH
66054: PPUSH
66055: PPUSH
66056: PPUSH
66057: PPUSH
66058: PPUSH
66059: PPUSH
66060: PPUSH
// if not turrets or not factories then
66061: LD_VAR 0 1
66065: NOT
66066: IFTRUE 66075
66068: PUSH
66069: LD_VAR 0 2
66073: NOT
66074: OR
66075: IFFALSE 66079
// exit ;
66077: GO 66386
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66079: LD_ADDR_VAR 0 10
66083: PUSH
66084: LD_INT 5
66086: PUSH
66087: LD_INT 6
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 2
66096: PUSH
66097: LD_INT 4
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 3
66106: PUSH
66107: LD_INT 5
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 24
66121: PUSH
66122: LD_INT 25
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 23
66131: PUSH
66132: LD_INT 27
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 42
66145: PUSH
66146: LD_INT 43
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 44
66155: PUSH
66156: LD_INT 46
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 45
66165: PUSH
66166: LD_INT 47
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: LIST
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: LIST
66182: ST_TO_ADDR
// result := [ ] ;
66183: LD_ADDR_VAR 0 3
66187: PUSH
66188: EMPTY
66189: ST_TO_ADDR
// for i in turrets do
66190: LD_ADDR_VAR 0 4
66194: PUSH
66195: LD_VAR 0 1
66199: PUSH
66200: FOR_IN
66201: IFFALSE 66384
// begin nat := GetNation ( i ) ;
66203: LD_ADDR_VAR 0 7
66207: PUSH
66208: LD_VAR 0 4
66212: PPUSH
66213: CALL_OW 248
66217: ST_TO_ADDR
// weapon := 0 ;
66218: LD_ADDR_VAR 0 8
66222: PUSH
66223: LD_INT 0
66225: ST_TO_ADDR
// if not nat then
66226: LD_VAR 0 7
66230: NOT
66231: IFFALSE 66235
// continue ;
66233: GO 66200
// for j in list [ nat ] do
66235: LD_ADDR_VAR 0 5
66239: PUSH
66240: LD_VAR 0 10
66244: PUSH
66245: LD_VAR 0 7
66249: ARRAY
66250: PUSH
66251: FOR_IN
66252: IFFALSE 66293
// if GetBWeapon ( i ) = j [ 1 ] then
66254: LD_VAR 0 4
66258: PPUSH
66259: CALL_OW 269
66263: PUSH
66264: LD_VAR 0 5
66268: PUSH
66269: LD_INT 1
66271: ARRAY
66272: EQUAL
66273: IFFALSE 66291
// begin weapon := j [ 2 ] ;
66275: LD_ADDR_VAR 0 8
66279: PUSH
66280: LD_VAR 0 5
66284: PUSH
66285: LD_INT 2
66287: ARRAY
66288: ST_TO_ADDR
// break ;
66289: GO 66293
// end ;
66291: GO 66251
66293: POP
66294: POP
// if not weapon then
66295: LD_VAR 0 8
66299: NOT
66300: IFFALSE 66304
// continue ;
66302: GO 66200
// for k in factories do
66304: LD_ADDR_VAR 0 6
66308: PUSH
66309: LD_VAR 0 2
66313: PUSH
66314: FOR_IN
66315: IFFALSE 66380
// begin weapons := AvailableWeaponList ( k ) ;
66317: LD_ADDR_VAR 0 9
66321: PUSH
66322: LD_VAR 0 6
66326: PPUSH
66327: CALL_OW 478
66331: ST_TO_ADDR
// if not weapons then
66332: LD_VAR 0 9
66336: NOT
66337: IFFALSE 66341
// continue ;
66339: GO 66314
// if weapon in weapons then
66341: LD_VAR 0 8
66345: PUSH
66346: LD_VAR 0 9
66350: IN
66351: IFFALSE 66378
// begin result := [ i , weapon ] ;
66353: LD_ADDR_VAR 0 3
66357: PUSH
66358: LD_VAR 0 4
66362: PUSH
66363: LD_VAR 0 8
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: ST_TO_ADDR
// exit ;
66372: POP
66373: POP
66374: POP
66375: POP
66376: GO 66386
// end ; end ;
66378: GO 66314
66380: POP
66381: POP
// end ;
66382: GO 66200
66384: POP
66385: POP
// end ;
66386: LD_VAR 0 3
66390: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66391: LD_INT 0
66393: PPUSH
// if not side or side > 8 then
66394: LD_VAR 0 3
66398: NOT
66399: IFTRUE 66411
66401: PUSH
66402: LD_VAR 0 3
66406: PUSH
66407: LD_INT 8
66409: GREATER
66410: OR
66411: IFFALSE 66415
// exit ;
66413: GO 66474
// if not range then
66415: LD_VAR 0 4
66419: NOT
66420: IFFALSE 66431
// range := - 12 ;
66422: LD_ADDR_VAR 0 4
66426: PUSH
66427: LD_INT 12
66429: NEG
66430: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66431: LD_VAR 0 1
66435: PPUSH
66436: LD_VAR 0 2
66440: PPUSH
66441: LD_VAR 0 3
66445: PPUSH
66446: LD_VAR 0 4
66450: PPUSH
66451: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66455: LD_VAR 0 1
66459: PPUSH
66460: LD_VAR 0 2
66464: PPUSH
66465: LD_VAR 0 3
66469: PPUSH
66470: CALL_OW 331
// end ;
66474: LD_VAR 0 5
66478: RET
// export function Video ( mode ) ; begin
66479: LD_INT 0
66481: PPUSH
// ingame_video = mode ;
66482: LD_ADDR_OWVAR 52
66486: PUSH
66487: LD_VAR 0 1
66491: ST_TO_ADDR
// interface_hidden = mode ;
66492: LD_ADDR_OWVAR 54
66496: PUSH
66497: LD_VAR 0 1
66501: ST_TO_ADDR
// end ;
66502: LD_VAR 0 2
66506: RET
// export function Join ( array , element ) ; begin
66507: LD_INT 0
66509: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66510: LD_ADDR_VAR 0 3
66514: PUSH
66515: LD_VAR 0 1
66519: PPUSH
66520: LD_VAR 0 1
66524: PUSH
66525: LD_INT 1
66527: PLUS
66528: PPUSH
66529: LD_VAR 0 2
66533: PPUSH
66534: CALL_OW 1
66538: ST_TO_ADDR
// end ;
66539: LD_VAR 0 3
66543: RET
// export function JoinUnion ( array , element ) ; begin
66544: LD_INT 0
66546: PPUSH
// result := array union element ;
66547: LD_ADDR_VAR 0 3
66551: PUSH
66552: LD_VAR 0 1
66556: PUSH
66557: LD_VAR 0 2
66561: UNION
66562: ST_TO_ADDR
// end ;
66563: LD_VAR 0 3
66567: RET
// export function GetBehemoths ( side ) ; begin
66568: LD_INT 0
66570: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66571: LD_ADDR_VAR 0 2
66575: PUSH
66576: LD_INT 22
66578: PUSH
66579: LD_VAR 0 1
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 31
66590: PUSH
66591: LD_INT 25
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PPUSH
66602: CALL_OW 69
66606: ST_TO_ADDR
// end ;
66607: LD_VAR 0 2
66611: RET
// export function Shuffle ( array ) ; var i , index ; begin
66612: LD_INT 0
66614: PPUSH
66615: PPUSH
66616: PPUSH
// result := [ ] ;
66617: LD_ADDR_VAR 0 2
66621: PUSH
66622: EMPTY
66623: ST_TO_ADDR
// if not array then
66624: LD_VAR 0 1
66628: NOT
66629: IFFALSE 66633
// exit ;
66631: GO 66732
// Randomize ;
66633: CALL_OW 10
// for i = array downto 1 do
66637: LD_ADDR_VAR 0 3
66641: PUSH
66642: DOUBLE
66643: LD_VAR 0 1
66647: INC
66648: ST_TO_ADDR
66649: LD_INT 1
66651: PUSH
66652: FOR_DOWNTO
66653: IFFALSE 66730
// begin index := rand ( 1 , array ) ;
66655: LD_ADDR_VAR 0 4
66659: PUSH
66660: LD_INT 1
66662: PPUSH
66663: LD_VAR 0 1
66667: PPUSH
66668: CALL_OW 12
66672: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66673: LD_ADDR_VAR 0 2
66677: PUSH
66678: LD_VAR 0 2
66682: PPUSH
66683: LD_VAR 0 2
66687: PUSH
66688: LD_INT 1
66690: PLUS
66691: PPUSH
66692: LD_VAR 0 1
66696: PUSH
66697: LD_VAR 0 4
66701: ARRAY
66702: PPUSH
66703: CALL_OW 2
66707: ST_TO_ADDR
// array := Delete ( array , index ) ;
66708: LD_ADDR_VAR 0 1
66712: PUSH
66713: LD_VAR 0 1
66717: PPUSH
66718: LD_VAR 0 4
66722: PPUSH
66723: CALL_OW 3
66727: ST_TO_ADDR
// end ;
66728: GO 66652
66730: POP
66731: POP
// end ;
66732: LD_VAR 0 2
66736: RET
// export function GetBaseMaterials ( base ) ; begin
66737: LD_INT 0
66739: PPUSH
// result := [ 0 , 0 , 0 ] ;
66740: LD_ADDR_VAR 0 2
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: LD_INT 0
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: LIST
66758: ST_TO_ADDR
// if not base then
66759: LD_VAR 0 1
66763: NOT
66764: IFFALSE 66768
// exit ;
66766: GO 66817
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66768: LD_ADDR_VAR 0 2
66772: PUSH
66773: LD_VAR 0 1
66777: PPUSH
66778: LD_INT 1
66780: PPUSH
66781: CALL_OW 275
66785: PUSH
66786: LD_VAR 0 1
66790: PPUSH
66791: LD_INT 2
66793: PPUSH
66794: CALL_OW 275
66798: PUSH
66799: LD_VAR 0 1
66803: PPUSH
66804: LD_INT 3
66806: PPUSH
66807: CALL_OW 275
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: LIST
66816: ST_TO_ADDR
// end ;
66817: LD_VAR 0 2
66821: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66822: LD_INT 0
66824: PPUSH
66825: PPUSH
// result := array ;
66826: LD_ADDR_VAR 0 3
66830: PUSH
66831: LD_VAR 0 1
66835: ST_TO_ADDR
// if size >= result then
66836: LD_VAR 0 2
66840: PUSH
66841: LD_VAR 0 3
66845: GREATEREQUAL
66846: IFFALSE 66850
// exit ;
66848: GO 66900
// if size then
66850: LD_VAR 0 2
66854: IFFALSE 66900
// for i := array downto size do
66856: LD_ADDR_VAR 0 4
66860: PUSH
66861: DOUBLE
66862: LD_VAR 0 1
66866: INC
66867: ST_TO_ADDR
66868: LD_VAR 0 2
66872: PUSH
66873: FOR_DOWNTO
66874: IFFALSE 66898
// result := Delete ( result , result ) ;
66876: LD_ADDR_VAR 0 3
66880: PUSH
66881: LD_VAR 0 3
66885: PPUSH
66886: LD_VAR 0 3
66890: PPUSH
66891: CALL_OW 3
66895: ST_TO_ADDR
66896: GO 66873
66898: POP
66899: POP
// end ;
66900: LD_VAR 0 3
66904: RET
// export function ComExit ( unit ) ; var tmp ; begin
66905: LD_INT 0
66907: PPUSH
66908: PPUSH
// if not IsInUnit ( unit ) then
66909: LD_VAR 0 1
66913: PPUSH
66914: CALL_OW 310
66918: NOT
66919: IFFALSE 66923
// exit ;
66921: GO 66983
// tmp := IsInUnit ( unit ) ;
66923: LD_ADDR_VAR 0 3
66927: PUSH
66928: LD_VAR 0 1
66932: PPUSH
66933: CALL_OW 310
66937: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66938: LD_VAR 0 3
66942: PPUSH
66943: CALL_OW 247
66947: PUSH
66948: LD_INT 2
66950: EQUAL
66951: IFFALSE 66964
// ComExitVehicle ( unit ) else
66953: LD_VAR 0 1
66957: PPUSH
66958: CALL_OW 121
66962: GO 66973
// ComExitBuilding ( unit ) ;
66964: LD_VAR 0 1
66968: PPUSH
66969: CALL_OW 122
// result := tmp ;
66973: LD_ADDR_VAR 0 2
66977: PUSH
66978: LD_VAR 0 3
66982: ST_TO_ADDR
// end ;
66983: LD_VAR 0 2
66987: RET
// export function ComExitAll ( units ) ; var i ; begin
66988: LD_INT 0
66990: PPUSH
66991: PPUSH
// if not units then
66992: LD_VAR 0 1
66996: NOT
66997: IFFALSE 67001
// exit ;
66999: GO 67027
// for i in units do
67001: LD_ADDR_VAR 0 3
67005: PUSH
67006: LD_VAR 0 1
67010: PUSH
67011: FOR_IN
67012: IFFALSE 67025
// ComExit ( i ) ;
67014: LD_VAR 0 3
67018: PPUSH
67019: CALL 66905 0 1
67023: GO 67011
67025: POP
67026: POP
// end ;
67027: LD_VAR 0 2
67031: RET
// export function ResetHc ; begin
67032: LD_INT 0
67034: PPUSH
// InitHc ;
67035: CALL_OW 19
// hc_importance := 0 ;
67039: LD_ADDR_OWVAR 32
67043: PUSH
67044: LD_INT 0
67046: ST_TO_ADDR
// end ;
67047: LD_VAR 0 1
67051: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67052: LD_INT 0
67054: PPUSH
67055: PPUSH
67056: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67057: LD_ADDR_VAR 0 6
67061: PUSH
67062: LD_VAR 0 1
67066: PUSH
67067: LD_VAR 0 3
67071: PLUS
67072: PUSH
67073: LD_INT 2
67075: DIV
67076: ST_TO_ADDR
// if _x < 0 then
67077: LD_VAR 0 6
67081: PUSH
67082: LD_INT 0
67084: LESS
67085: IFFALSE 67102
// _x := _x * - 1 ;
67087: LD_ADDR_VAR 0 6
67091: PUSH
67092: LD_VAR 0 6
67096: PUSH
67097: LD_INT 1
67099: NEG
67100: MUL
67101: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67102: LD_ADDR_VAR 0 7
67106: PUSH
67107: LD_VAR 0 2
67111: PUSH
67112: LD_VAR 0 4
67116: PLUS
67117: PUSH
67118: LD_INT 2
67120: DIV
67121: ST_TO_ADDR
// if _y < 0 then
67122: LD_VAR 0 7
67126: PUSH
67127: LD_INT 0
67129: LESS
67130: IFFALSE 67147
// _y := _y * - 1 ;
67132: LD_ADDR_VAR 0 7
67136: PUSH
67137: LD_VAR 0 7
67141: PUSH
67142: LD_INT 1
67144: NEG
67145: MUL
67146: ST_TO_ADDR
// result := [ _x , _y ] ;
67147: LD_ADDR_VAR 0 5
67151: PUSH
67152: LD_VAR 0 6
67156: PUSH
67157: LD_VAR 0 7
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: ST_TO_ADDR
// end ;
67166: LD_VAR 0 5
67170: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67171: LD_INT 0
67173: PPUSH
67174: PPUSH
67175: PPUSH
67176: PPUSH
// task := GetTaskList ( unit ) ;
67177: LD_ADDR_VAR 0 7
67181: PUSH
67182: LD_VAR 0 1
67186: PPUSH
67187: CALL_OW 437
67191: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67192: LD_VAR 0 7
67196: NOT
67197: IFFALSE 67216
67199: PUSH
67200: LD_VAR 0 1
67204: PPUSH
67205: LD_VAR 0 2
67209: PPUSH
67210: CALL_OW 308
67214: NOT
67215: AND
67216: IFFALSE 67220
// exit ;
67218: GO 67338
// if IsInArea ( unit , area ) then
67220: LD_VAR 0 1
67224: PPUSH
67225: LD_VAR 0 2
67229: PPUSH
67230: CALL_OW 308
67234: IFFALSE 67252
// begin ComMoveToArea ( unit , goAway ) ;
67236: LD_VAR 0 1
67240: PPUSH
67241: LD_VAR 0 3
67245: PPUSH
67246: CALL_OW 113
// exit ;
67250: GO 67338
// end ; if task [ 1 ] [ 1 ] <> M then
67252: LD_VAR 0 7
67256: PUSH
67257: LD_INT 1
67259: ARRAY
67260: PUSH
67261: LD_INT 1
67263: ARRAY
67264: PUSH
67265: LD_STRING M
67267: NONEQUAL
67268: IFFALSE 67272
// exit ;
67270: GO 67338
// x := task [ 1 ] [ 2 ] ;
67272: LD_ADDR_VAR 0 5
67276: PUSH
67277: LD_VAR 0 7
67281: PUSH
67282: LD_INT 1
67284: ARRAY
67285: PUSH
67286: LD_INT 2
67288: ARRAY
67289: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67290: LD_ADDR_VAR 0 6
67294: PUSH
67295: LD_VAR 0 7
67299: PUSH
67300: LD_INT 1
67302: ARRAY
67303: PUSH
67304: LD_INT 3
67306: ARRAY
67307: ST_TO_ADDR
// if InArea ( x , y , area ) then
67308: LD_VAR 0 5
67312: PPUSH
67313: LD_VAR 0 6
67317: PPUSH
67318: LD_VAR 0 2
67322: PPUSH
67323: CALL_OW 309
67327: IFFALSE 67338
// ComStop ( unit ) ;
67329: LD_VAR 0 1
67333: PPUSH
67334: CALL_OW 141
// end ;
67338: LD_VAR 0 4
67342: RET
// export function Abs ( value ) ; begin
67343: LD_INT 0
67345: PPUSH
// result := value ;
67346: LD_ADDR_VAR 0 2
67350: PUSH
67351: LD_VAR 0 1
67355: ST_TO_ADDR
// if value < 0 then
67356: LD_VAR 0 1
67360: PUSH
67361: LD_INT 0
67363: LESS
67364: IFFALSE 67381
// result := value * - 1 ;
67366: LD_ADDR_VAR 0 2
67370: PUSH
67371: LD_VAR 0 1
67375: PUSH
67376: LD_INT 1
67378: NEG
67379: MUL
67380: ST_TO_ADDR
// end ;
67381: LD_VAR 0 2
67385: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67386: LD_INT 0
67388: PPUSH
67389: PPUSH
67390: PPUSH
67391: PPUSH
67392: PPUSH
67393: PPUSH
67394: PPUSH
67395: PPUSH
// if not unit or not building then
67396: LD_VAR 0 1
67400: NOT
67401: IFTRUE 67410
67403: PUSH
67404: LD_VAR 0 2
67408: NOT
67409: OR
67410: IFFALSE 67414
// exit ;
67412: GO 67642
// x := GetX ( building ) ;
67414: LD_ADDR_VAR 0 4
67418: PUSH
67419: LD_VAR 0 2
67423: PPUSH
67424: CALL_OW 250
67428: ST_TO_ADDR
// y := GetY ( building ) ;
67429: LD_ADDR_VAR 0 6
67433: PUSH
67434: LD_VAR 0 2
67438: PPUSH
67439: CALL_OW 251
67443: ST_TO_ADDR
// d := GetDir ( building ) ;
67444: LD_ADDR_VAR 0 8
67448: PUSH
67449: LD_VAR 0 2
67453: PPUSH
67454: CALL_OW 254
67458: ST_TO_ADDR
// r := 4 ;
67459: LD_ADDR_VAR 0 9
67463: PUSH
67464: LD_INT 4
67466: ST_TO_ADDR
// for i := 1 to 5 do
67467: LD_ADDR_VAR 0 10
67471: PUSH
67472: DOUBLE
67473: LD_INT 1
67475: DEC
67476: ST_TO_ADDR
67477: LD_INT 5
67479: PUSH
67480: FOR_TO
67481: IFFALSE 67640
// begin _x := ShiftX ( x , d , r + i ) ;
67483: LD_ADDR_VAR 0 5
67487: PUSH
67488: LD_VAR 0 4
67492: PPUSH
67493: LD_VAR 0 8
67497: PPUSH
67498: LD_VAR 0 9
67502: PUSH
67503: LD_VAR 0 10
67507: PLUS
67508: PPUSH
67509: CALL_OW 272
67513: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67514: LD_ADDR_VAR 0 7
67518: PUSH
67519: LD_VAR 0 6
67523: PPUSH
67524: LD_VAR 0 8
67528: PPUSH
67529: LD_VAR 0 9
67533: PUSH
67534: LD_VAR 0 10
67538: PLUS
67539: PPUSH
67540: CALL_OW 273
67544: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67545: LD_VAR 0 5
67549: PPUSH
67550: LD_VAR 0 7
67554: PPUSH
67555: CALL_OW 488
67559: IFFALSE 67594
67561: PUSH
67562: LD_VAR 0 5
67566: PPUSH
67567: LD_VAR 0 7
67571: PPUSH
67572: CALL_OW 428
67576: PPUSH
67577: CALL_OW 247
67581: PUSH
67582: LD_INT 3
67584: PUSH
67585: LD_INT 2
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: IN
67592: NOT
67593: AND
67594: IFFALSE 67638
// begin ComMoveXY ( unit , _x , _y ) ;
67596: LD_VAR 0 1
67600: PPUSH
67601: LD_VAR 0 5
67605: PPUSH
67606: LD_VAR 0 7
67610: PPUSH
67611: CALL_OW 111
// result := [ _x , _y ] ;
67615: LD_ADDR_VAR 0 3
67619: PUSH
67620: LD_VAR 0 5
67624: PUSH
67625: LD_VAR 0 7
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: ST_TO_ADDR
// exit ;
67634: POP
67635: POP
67636: GO 67642
// end ; end ;
67638: GO 67480
67640: POP
67641: POP
// end ;
67642: LD_VAR 0 3
67646: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67647: LD_INT 0
67649: PPUSH
67650: PPUSH
67651: PPUSH
// result := 0 ;
67652: LD_ADDR_VAR 0 3
67656: PUSH
67657: LD_INT 0
67659: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67660: LD_VAR 0 1
67664: PUSH
67665: LD_INT 0
67667: LESS
67668: IFTRUE 67680
67670: PUSH
67671: LD_VAR 0 1
67675: PUSH
67676: LD_INT 8
67678: GREATER
67679: OR
67680: IFTRUE 67692
67682: PUSH
67683: LD_VAR 0 2
67687: PUSH
67688: LD_INT 0
67690: LESS
67691: OR
67692: IFTRUE 67704
67694: PUSH
67695: LD_VAR 0 2
67699: PUSH
67700: LD_INT 8
67702: GREATER
67703: OR
67704: IFFALSE 67708
// exit ;
67706: GO 67783
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67708: LD_ADDR_VAR 0 4
67712: PUSH
67713: LD_INT 22
67715: PUSH
67716: LD_VAR 0 2
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PPUSH
67725: CALL_OW 69
67729: PUSH
67730: FOR_IN
67731: IFFALSE 67781
// begin un := UnitShoot ( i ) ;
67733: LD_ADDR_VAR 0 5
67737: PUSH
67738: LD_VAR 0 4
67742: PPUSH
67743: CALL_OW 504
67747: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67748: LD_VAR 0 5
67752: PPUSH
67753: CALL_OW 255
67757: PUSH
67758: LD_VAR 0 1
67762: EQUAL
67763: IFFALSE 67779
// begin result := un ;
67765: LD_ADDR_VAR 0 3
67769: PUSH
67770: LD_VAR 0 5
67774: ST_TO_ADDR
// exit ;
67775: POP
67776: POP
67777: GO 67783
// end ; end ;
67779: GO 67730
67781: POP
67782: POP
// end ;
67783: LD_VAR 0 3
67787: RET
// export function GetCargoBay ( units ) ; begin
67788: LD_INT 0
67790: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67791: LD_ADDR_VAR 0 2
67795: PUSH
67796: LD_VAR 0 1
67800: PPUSH
67801: LD_INT 2
67803: PUSH
67804: LD_INT 34
67806: PUSH
67807: LD_INT 12
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 34
67816: PUSH
67817: LD_INT 51
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 34
67826: PUSH
67827: LD_INT 32
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 34
67836: PUSH
67837: LD_INT 89
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: PPUSH
67851: CALL_OW 72
67855: ST_TO_ADDR
// end ;
67856: LD_VAR 0 2
67860: RET
// export function Negate ( value ) ; begin
67861: LD_INT 0
67863: PPUSH
// result := not value ;
67864: LD_ADDR_VAR 0 2
67868: PUSH
67869: LD_VAR 0 1
67873: NOT
67874: ST_TO_ADDR
// end ;
67875: LD_VAR 0 2
67879: RET
// export function Inc ( value ) ; begin
67880: LD_INT 0
67882: PPUSH
// result := value + 1 ;
67883: LD_ADDR_VAR 0 2
67887: PUSH
67888: LD_VAR 0 1
67892: PUSH
67893: LD_INT 1
67895: PLUS
67896: ST_TO_ADDR
// end ;
67897: LD_VAR 0 2
67901: RET
// export function Dec ( value ) ; begin
67902: LD_INT 0
67904: PPUSH
// result := value - 1 ;
67905: LD_ADDR_VAR 0 2
67909: PUSH
67910: LD_VAR 0 1
67914: PUSH
67915: LD_INT 1
67917: MINUS
67918: ST_TO_ADDR
// end ;
67919: LD_VAR 0 2
67923: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67924: LD_INT 0
67926: PPUSH
67927: PPUSH
67928: PPUSH
67929: PPUSH
67930: PPUSH
67931: PPUSH
67932: PPUSH
67933: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67934: LD_VAR 0 1
67938: PPUSH
67939: LD_VAR 0 2
67943: PPUSH
67944: CALL_OW 488
67948: NOT
67949: IFTRUE 67968
67951: PUSH
67952: LD_VAR 0 3
67956: PPUSH
67957: LD_VAR 0 4
67961: PPUSH
67962: CALL_OW 488
67966: NOT
67967: OR
67968: IFFALSE 67981
// begin result := - 1 ;
67970: LD_ADDR_VAR 0 5
67974: PUSH
67975: LD_INT 1
67977: NEG
67978: ST_TO_ADDR
// exit ;
67979: GO 68216
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67981: LD_ADDR_VAR 0 12
67985: PUSH
67986: LD_VAR 0 1
67990: PPUSH
67991: LD_VAR 0 2
67995: PPUSH
67996: LD_VAR 0 3
68000: PPUSH
68001: LD_VAR 0 4
68005: PPUSH
68006: CALL 67052 0 4
68010: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68011: LD_ADDR_VAR 0 11
68015: PUSH
68016: LD_VAR 0 1
68020: PPUSH
68021: LD_VAR 0 2
68025: PPUSH
68026: LD_VAR 0 12
68030: PUSH
68031: LD_INT 1
68033: ARRAY
68034: PPUSH
68035: LD_VAR 0 12
68039: PUSH
68040: LD_INT 2
68042: ARRAY
68043: PPUSH
68044: CALL_OW 298
68048: ST_TO_ADDR
// distance := 9999 ;
68049: LD_ADDR_VAR 0 10
68053: PUSH
68054: LD_INT 9999
68056: ST_TO_ADDR
// for i := 0 to 5 do
68057: LD_ADDR_VAR 0 6
68061: PUSH
68062: DOUBLE
68063: LD_INT 0
68065: DEC
68066: ST_TO_ADDR
68067: LD_INT 5
68069: PUSH
68070: FOR_TO
68071: IFFALSE 68214
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68073: LD_ADDR_VAR 0 7
68077: PUSH
68078: LD_VAR 0 1
68082: PPUSH
68083: LD_VAR 0 6
68087: PPUSH
68088: LD_VAR 0 11
68092: PPUSH
68093: CALL_OW 272
68097: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68098: LD_ADDR_VAR 0 8
68102: PUSH
68103: LD_VAR 0 2
68107: PPUSH
68108: LD_VAR 0 6
68112: PPUSH
68113: LD_VAR 0 11
68117: PPUSH
68118: CALL_OW 273
68122: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68123: LD_VAR 0 7
68127: PPUSH
68128: LD_VAR 0 8
68132: PPUSH
68133: CALL_OW 488
68137: NOT
68138: IFFALSE 68142
// continue ;
68140: GO 68070
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68142: LD_ADDR_VAR 0 9
68146: PUSH
68147: LD_VAR 0 12
68151: PUSH
68152: LD_INT 1
68154: ARRAY
68155: PPUSH
68156: LD_VAR 0 12
68160: PUSH
68161: LD_INT 2
68163: ARRAY
68164: PPUSH
68165: LD_VAR 0 7
68169: PPUSH
68170: LD_VAR 0 8
68174: PPUSH
68175: CALL_OW 298
68179: ST_TO_ADDR
// if tmp < distance then
68180: LD_VAR 0 9
68184: PUSH
68185: LD_VAR 0 10
68189: LESS
68190: IFFALSE 68212
// begin result := i ;
68192: LD_ADDR_VAR 0 5
68196: PUSH
68197: LD_VAR 0 6
68201: ST_TO_ADDR
// distance := tmp ;
68202: LD_ADDR_VAR 0 10
68206: PUSH
68207: LD_VAR 0 9
68211: ST_TO_ADDR
// end ; end ;
68212: GO 68070
68214: POP
68215: POP
// end ;
68216: LD_VAR 0 5
68220: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68221: LD_INT 0
68223: PPUSH
68224: PPUSH
// if not driver or not IsInUnit ( driver ) then
68225: LD_VAR 0 1
68229: NOT
68230: IFTRUE 68244
68232: PUSH
68233: LD_VAR 0 1
68237: PPUSH
68238: CALL_OW 310
68242: NOT
68243: OR
68244: IFFALSE 68248
// exit ;
68246: GO 68338
// vehicle := IsInUnit ( driver ) ;
68248: LD_ADDR_VAR 0 3
68252: PUSH
68253: LD_VAR 0 1
68257: PPUSH
68258: CALL_OW 310
68262: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68263: LD_VAR 0 1
68267: PPUSH
68268: LD_STRING \
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: LD_INT 0
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: LD_INT 0
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: PUSH
68298: LD_STRING E
68300: PUSH
68301: LD_INT 0
68303: PUSH
68304: LD_INT 0
68306: PUSH
68307: LD_VAR 0 3
68311: PUSH
68312: LD_INT 0
68314: PUSH
68315: LD_INT 0
68317: PUSH
68318: LD_INT 0
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PPUSH
68334: CALL_OW 446
// end ;
68338: LD_VAR 0 2
68342: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68343: LD_INT 0
68345: PPUSH
68346: PPUSH
// if not driver or not IsInUnit ( driver ) then
68347: LD_VAR 0 1
68351: NOT
68352: IFTRUE 68366
68354: PUSH
68355: LD_VAR 0 1
68359: PPUSH
68360: CALL_OW 310
68364: NOT
68365: OR
68366: IFFALSE 68370
// exit ;
68368: GO 68460
// vehicle := IsInUnit ( driver ) ;
68370: LD_ADDR_VAR 0 3
68374: PUSH
68375: LD_VAR 0 1
68379: PPUSH
68380: CALL_OW 310
68384: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68385: LD_VAR 0 1
68389: PPUSH
68390: LD_STRING \
68392: PUSH
68393: LD_INT 0
68395: PUSH
68396: LD_INT 0
68398: PUSH
68399: LD_INT 0
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: LD_INT 0
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: PUSH
68420: LD_STRING E
68422: PUSH
68423: LD_INT 0
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: LD_VAR 0 3
68433: PUSH
68434: LD_INT 0
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PPUSH
68456: CALL_OW 447
// end ;
68460: LD_VAR 0 2
68464: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68465: LD_INT 0
68467: PPUSH
68468: PPUSH
68469: PPUSH
// tmp := [ ] ;
68470: LD_ADDR_VAR 0 5
68474: PUSH
68475: EMPTY
68476: ST_TO_ADDR
// for i in units do
68477: LD_ADDR_VAR 0 4
68481: PUSH
68482: LD_VAR 0 1
68486: PUSH
68487: FOR_IN
68488: IFFALSE 68526
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68490: LD_ADDR_VAR 0 5
68494: PUSH
68495: LD_VAR 0 5
68499: PPUSH
68500: LD_VAR 0 5
68504: PUSH
68505: LD_INT 1
68507: PLUS
68508: PPUSH
68509: LD_VAR 0 4
68513: PPUSH
68514: CALL_OW 256
68518: PPUSH
68519: CALL_OW 2
68523: ST_TO_ADDR
68524: GO 68487
68526: POP
68527: POP
// if not tmp then
68528: LD_VAR 0 5
68532: NOT
68533: IFFALSE 68537
// exit ;
68535: GO 68585
// if asc then
68537: LD_VAR 0 2
68541: IFFALSE 68565
// result := SortListByListAsc ( units , tmp ) else
68543: LD_ADDR_VAR 0 3
68547: PUSH
68548: LD_VAR 0 1
68552: PPUSH
68553: LD_VAR 0 5
68557: PPUSH
68558: CALL_OW 76
68562: ST_TO_ADDR
68563: GO 68585
// result := SortListByListDesc ( units , tmp ) ;
68565: LD_ADDR_VAR 0 3
68569: PUSH
68570: LD_VAR 0 1
68574: PPUSH
68575: LD_VAR 0 5
68579: PPUSH
68580: CALL_OW 77
68584: ST_TO_ADDR
// end ;
68585: LD_VAR 0 3
68589: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68590: LD_INT 0
68592: PPUSH
68593: PPUSH
// task := GetTaskList ( mech ) ;
68594: LD_ADDR_VAR 0 4
68598: PUSH
68599: LD_VAR 0 1
68603: PPUSH
68604: CALL_OW 437
68608: ST_TO_ADDR
// if not task then
68609: LD_VAR 0 4
68613: NOT
68614: IFFALSE 68618
// exit ;
68616: GO 68662
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68618: LD_ADDR_VAR 0 3
68622: PUSH
68623: LD_VAR 0 4
68627: PUSH
68628: LD_INT 1
68630: ARRAY
68631: PUSH
68632: LD_INT 1
68634: ARRAY
68635: PUSH
68636: LD_STRING r
68638: EQUAL
68639: IFFALSE 68661
68641: PUSH
68642: LD_VAR 0 4
68646: PUSH
68647: LD_INT 1
68649: ARRAY
68650: PUSH
68651: LD_INT 4
68653: ARRAY
68654: PUSH
68655: LD_VAR 0 2
68659: EQUAL
68660: AND
68661: ST_TO_ADDR
// end ;
68662: LD_VAR 0 3
68666: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68667: LD_INT 0
68669: PPUSH
// SetDir ( unit , d ) ;
68670: LD_VAR 0 1
68674: PPUSH
68675: LD_VAR 0 4
68679: PPUSH
68680: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
68684: LD_ADDR_VAR 0 6
68688: PUSH
68689: LD_VAR 0 1
68693: PPUSH
68694: LD_VAR 0 2
68698: PPUSH
68699: LD_VAR 0 3
68703: PPUSH
68704: LD_VAR 0 5
68708: PPUSH
68709: CALL_OW 48
68713: ST_TO_ADDR
// end ;
68714: LD_VAR 0 6
68718: RET
// export function ToNaturalNumber ( number ) ; begin
68719: LD_INT 0
68721: PPUSH
// result := number div 1 ;
68722: LD_ADDR_VAR 0 2
68726: PUSH
68727: LD_VAR 0 1
68731: PUSH
68732: LD_INT 1
68734: DIV
68735: ST_TO_ADDR
// if number < 0 then
68736: LD_VAR 0 1
68740: PUSH
68741: LD_INT 0
68743: LESS
68744: IFFALSE 68754
// result := 0 ;
68746: LD_ADDR_VAR 0 2
68750: PUSH
68751: LD_INT 0
68753: ST_TO_ADDR
// end ;
68754: LD_VAR 0 2
68758: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
68759: LD_INT 0
68761: PPUSH
68762: PPUSH
68763: PPUSH
// if not buildings then
68764: LD_VAR 0 1
68768: NOT
68769: IFFALSE 68773
// exit ;
68771: GO 68888
// tmp := [ ] ;
68773: LD_ADDR_VAR 0 5
68777: PUSH
68778: EMPTY
68779: ST_TO_ADDR
// for b in buildings do
68780: LD_ADDR_VAR 0 4
68784: PUSH
68785: LD_VAR 0 1
68789: PUSH
68790: FOR_IN
68791: IFFALSE 68829
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
68793: LD_ADDR_VAR 0 5
68797: PUSH
68798: LD_VAR 0 5
68802: PPUSH
68803: LD_VAR 0 5
68807: PUSH
68808: LD_INT 1
68810: PLUS
68811: PPUSH
68812: LD_VAR 0 4
68816: PPUSH
68817: CALL_OW 266
68821: PPUSH
68822: CALL_OW 1
68826: ST_TO_ADDR
68827: GO 68790
68829: POP
68830: POP
// if not tmp then
68831: LD_VAR 0 5
68835: NOT
68836: IFFALSE 68840
// exit ;
68838: GO 68888
// if asc then
68840: LD_VAR 0 2
68844: IFFALSE 68868
// result := SortListByListAsc ( buildings , tmp ) else
68846: LD_ADDR_VAR 0 3
68850: PUSH
68851: LD_VAR 0 1
68855: PPUSH
68856: LD_VAR 0 5
68860: PPUSH
68861: CALL_OW 76
68865: ST_TO_ADDR
68866: GO 68888
// result := SortListByListDesc ( buildings , tmp ) ;
68868: LD_ADDR_VAR 0 3
68872: PUSH
68873: LD_VAR 0 1
68877: PPUSH
68878: LD_VAR 0 5
68882: PPUSH
68883: CALL_OW 77
68887: ST_TO_ADDR
// end ;
68888: LD_VAR 0 3
68892: RET
// export function SortByClass ( units , class ) ; var un ; begin
68893: LD_INT 0
68895: PPUSH
68896: PPUSH
// if not units or not class then
68897: LD_VAR 0 1
68901: NOT
68902: IFTRUE 68911
68904: PUSH
68905: LD_VAR 0 2
68909: NOT
68910: OR
68911: IFFALSE 68915
// exit ;
68913: GO 69010
// result := [ ] ;
68915: LD_ADDR_VAR 0 3
68919: PUSH
68920: EMPTY
68921: ST_TO_ADDR
// for un in units do
68922: LD_ADDR_VAR 0 4
68926: PUSH
68927: LD_VAR 0 1
68931: PUSH
68932: FOR_IN
68933: IFFALSE 69008
// if GetClass ( un ) = class then
68935: LD_VAR 0 4
68939: PPUSH
68940: CALL_OW 257
68944: PUSH
68945: LD_VAR 0 2
68949: EQUAL
68950: IFFALSE 68977
// result := Insert ( result , 1 , un ) else
68952: LD_ADDR_VAR 0 3
68956: PUSH
68957: LD_VAR 0 3
68961: PPUSH
68962: LD_INT 1
68964: PPUSH
68965: LD_VAR 0 4
68969: PPUSH
68970: CALL_OW 2
68974: ST_TO_ADDR
68975: GO 69006
// result := Replace ( result , result + 1 , un ) ;
68977: LD_ADDR_VAR 0 3
68981: PUSH
68982: LD_VAR 0 3
68986: PPUSH
68987: LD_VAR 0 3
68991: PUSH
68992: LD_INT 1
68994: PLUS
68995: PPUSH
68996: LD_VAR 0 4
69000: PPUSH
69001: CALL_OW 1
69005: ST_TO_ADDR
69006: GO 68932
69008: POP
69009: POP
// end ;
69010: LD_VAR 0 3
69014: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69015: LD_INT 0
69017: PPUSH
69018: PPUSH
69019: PPUSH
69020: PPUSH
69021: PPUSH
69022: PPUSH
69023: PPUSH
// result := [ ] ;
69024: LD_ADDR_VAR 0 4
69028: PUSH
69029: EMPTY
69030: ST_TO_ADDR
// if x - r < 0 then
69031: LD_VAR 0 1
69035: PUSH
69036: LD_VAR 0 3
69040: MINUS
69041: PUSH
69042: LD_INT 0
69044: LESS
69045: IFFALSE 69057
// min_x := 0 else
69047: LD_ADDR_VAR 0 8
69051: PUSH
69052: LD_INT 0
69054: ST_TO_ADDR
69055: GO 69073
// min_x := x - r ;
69057: LD_ADDR_VAR 0 8
69061: PUSH
69062: LD_VAR 0 1
69066: PUSH
69067: LD_VAR 0 3
69071: MINUS
69072: ST_TO_ADDR
// if y - r < 0 then
69073: LD_VAR 0 2
69077: PUSH
69078: LD_VAR 0 3
69082: MINUS
69083: PUSH
69084: LD_INT 0
69086: LESS
69087: IFFALSE 69099
// min_y := 0 else
69089: LD_ADDR_VAR 0 7
69093: PUSH
69094: LD_INT 0
69096: ST_TO_ADDR
69097: GO 69115
// min_y := y - r ;
69099: LD_ADDR_VAR 0 7
69103: PUSH
69104: LD_VAR 0 2
69108: PUSH
69109: LD_VAR 0 3
69113: MINUS
69114: ST_TO_ADDR
// max_x := x + r ;
69115: LD_ADDR_VAR 0 9
69119: PUSH
69120: LD_VAR 0 1
69124: PUSH
69125: LD_VAR 0 3
69129: PLUS
69130: ST_TO_ADDR
// max_y := y + r ;
69131: LD_ADDR_VAR 0 10
69135: PUSH
69136: LD_VAR 0 2
69140: PUSH
69141: LD_VAR 0 3
69145: PLUS
69146: ST_TO_ADDR
// for _x = min_x to max_x do
69147: LD_ADDR_VAR 0 5
69151: PUSH
69152: DOUBLE
69153: LD_VAR 0 8
69157: DEC
69158: ST_TO_ADDR
69159: LD_VAR 0 9
69163: PUSH
69164: FOR_TO
69165: IFFALSE 69266
// for _y = min_y to max_y do
69167: LD_ADDR_VAR 0 6
69171: PUSH
69172: DOUBLE
69173: LD_VAR 0 7
69177: DEC
69178: ST_TO_ADDR
69179: LD_VAR 0 10
69183: PUSH
69184: FOR_TO
69185: IFFALSE 69262
// begin if not ValidHex ( _x , _y ) then
69187: LD_VAR 0 5
69191: PPUSH
69192: LD_VAR 0 6
69196: PPUSH
69197: CALL_OW 488
69201: NOT
69202: IFFALSE 69206
// continue ;
69204: GO 69184
// if GetResourceTypeXY ( _x , _y ) then
69206: LD_VAR 0 5
69210: PPUSH
69211: LD_VAR 0 6
69215: PPUSH
69216: CALL_OW 283
69220: IFFALSE 69260
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69222: LD_ADDR_VAR 0 4
69226: PUSH
69227: LD_VAR 0 4
69231: PPUSH
69232: LD_VAR 0 4
69236: PUSH
69237: LD_INT 1
69239: PLUS
69240: PPUSH
69241: LD_VAR 0 5
69245: PUSH
69246: LD_VAR 0 6
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PPUSH
69255: CALL_OW 1
69259: ST_TO_ADDR
// end ;
69260: GO 69184
69262: POP
69263: POP
69264: GO 69164
69266: POP
69267: POP
// end ;
69268: LD_VAR 0 4
69272: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69273: LD_INT 0
69275: PPUSH
69276: PPUSH
69277: PPUSH
69278: PPUSH
69279: PPUSH
69280: PPUSH
69281: PPUSH
69282: PPUSH
// if not units then
69283: LD_VAR 0 1
69287: NOT
69288: IFFALSE 69292
// exit ;
69290: GO 69824
// result := UnitFilter ( units , [ f_ok ] ) ;
69292: LD_ADDR_VAR 0 3
69296: PUSH
69297: LD_VAR 0 1
69301: PPUSH
69302: LD_INT 50
69304: PUSH
69305: EMPTY
69306: LIST
69307: PPUSH
69308: CALL_OW 72
69312: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69313: LD_ADDR_VAR 0 8
69317: PUSH
69318: LD_VAR 0 1
69322: PUSH
69323: LD_INT 1
69325: ARRAY
69326: PPUSH
69327: CALL_OW 255
69331: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69332: LD_ADDR_VAR 0 10
69336: PUSH
69337: LD_INT 29
69339: PUSH
69340: LD_INT 91
69342: PUSH
69343: LD_INT 49
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: LIST
69350: ST_TO_ADDR
// if not result then
69351: LD_VAR 0 3
69355: NOT
69356: IFFALSE 69360
// exit ;
69358: GO 69824
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69360: LD_ADDR_VAR 0 5
69364: PUSH
69365: LD_INT 81
69367: PUSH
69368: LD_VAR 0 8
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PPUSH
69377: CALL_OW 69
69381: ST_TO_ADDR
// for i in result do
69382: LD_ADDR_VAR 0 4
69386: PUSH
69387: LD_VAR 0 3
69391: PUSH
69392: FOR_IN
69393: IFFALSE 69822
// begin tag := GetTag ( i ) + 1 ;
69395: LD_ADDR_VAR 0 9
69399: PUSH
69400: LD_VAR 0 4
69404: PPUSH
69405: CALL_OW 110
69409: PUSH
69410: LD_INT 1
69412: PLUS
69413: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
69414: LD_ADDR_VAR 0 7
69418: PUSH
69419: LD_VAR 0 4
69423: PPUSH
69424: CALL_OW 250
69428: PPUSH
69429: LD_VAR 0 4
69433: PPUSH
69434: CALL_OW 251
69438: PPUSH
69439: LD_INT 4
69441: PPUSH
69442: CALL 69015 0 3
69446: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
69447: LD_VAR 0 4
69451: PPUSH
69452: CALL_OW 247
69456: PUSH
69457: LD_INT 2
69459: EQUAL
69460: IFFALSE 69472
69462: PUSH
69463: LD_VAR 0 7
69467: PUSH
69468: LD_INT 2
69470: GREATER
69471: AND
69472: IFFALSE 69492
69474: PUSH
69475: LD_VAR 0 4
69479: PPUSH
69480: CALL_OW 264
69484: PUSH
69485: LD_VAR 0 10
69489: IN
69490: NOT
69491: AND
69492: IFFALSE 69531
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69494: LD_VAR 0 4
69498: PPUSH
69499: LD_VAR 0 7
69503: PUSH
69504: LD_INT 1
69506: ARRAY
69507: PUSH
69508: LD_INT 1
69510: ARRAY
69511: PPUSH
69512: LD_VAR 0 7
69516: PUSH
69517: LD_INT 1
69519: ARRAY
69520: PUSH
69521: LD_INT 2
69523: ARRAY
69524: PPUSH
69525: CALL_OW 116
69529: GO 69820
// if path > tag then
69531: LD_VAR 0 2
69535: PUSH
69536: LD_VAR 0 9
69540: GREATER
69541: IFFALSE 69749
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69543: LD_ADDR_VAR 0 6
69547: PUSH
69548: LD_VAR 0 5
69552: PPUSH
69553: LD_INT 91
69555: PUSH
69556: LD_VAR 0 4
69560: PUSH
69561: LD_INT 8
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: LIST
69568: PPUSH
69569: CALL_OW 72
69573: ST_TO_ADDR
// if nearEnemy then
69574: LD_VAR 0 6
69578: IFFALSE 69647
// begin if GetWeapon ( i ) = ru_time_lapser then
69580: LD_VAR 0 4
69584: PPUSH
69585: CALL_OW 264
69589: PUSH
69590: LD_INT 49
69592: EQUAL
69593: IFFALSE 69621
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69595: LD_VAR 0 4
69599: PPUSH
69600: LD_VAR 0 6
69604: PPUSH
69605: LD_VAR 0 4
69609: PPUSH
69610: CALL_OW 74
69614: PPUSH
69615: CALL_OW 112
69619: GO 69645
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69621: LD_VAR 0 4
69625: PPUSH
69626: LD_VAR 0 6
69630: PPUSH
69631: LD_VAR 0 4
69635: PPUSH
69636: CALL_OW 74
69640: PPUSH
69641: CALL 70905 0 2
// end else
69645: GO 69747
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69647: LD_VAR 0 4
69651: PPUSH
69652: LD_VAR 0 2
69656: PUSH
69657: LD_VAR 0 9
69661: ARRAY
69662: PUSH
69663: LD_INT 1
69665: ARRAY
69666: PPUSH
69667: LD_VAR 0 2
69671: PUSH
69672: LD_VAR 0 9
69676: ARRAY
69677: PUSH
69678: LD_INT 2
69680: ARRAY
69681: PPUSH
69682: CALL_OW 297
69686: PUSH
69687: LD_INT 6
69689: GREATER
69690: IFFALSE 69733
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69692: LD_VAR 0 4
69696: PPUSH
69697: LD_VAR 0 2
69701: PUSH
69702: LD_VAR 0 9
69706: ARRAY
69707: PUSH
69708: LD_INT 1
69710: ARRAY
69711: PPUSH
69712: LD_VAR 0 2
69716: PUSH
69717: LD_VAR 0 9
69721: ARRAY
69722: PUSH
69723: LD_INT 2
69725: ARRAY
69726: PPUSH
69727: CALL_OW 114
69731: GO 69747
// SetTag ( i , tag ) ;
69733: LD_VAR 0 4
69737: PPUSH
69738: LD_VAR 0 9
69742: PPUSH
69743: CALL_OW 109
// end else
69747: GO 69820
// if enemy then
69749: LD_VAR 0 5
69753: IFFALSE 69820
// begin if GetWeapon ( i ) = ru_time_lapser then
69755: LD_VAR 0 4
69759: PPUSH
69760: CALL_OW 264
69764: PUSH
69765: LD_INT 49
69767: EQUAL
69768: IFFALSE 69796
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69770: LD_VAR 0 4
69774: PPUSH
69775: LD_VAR 0 5
69779: PPUSH
69780: LD_VAR 0 4
69784: PPUSH
69785: CALL_OW 74
69789: PPUSH
69790: CALL_OW 112
69794: GO 69820
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69796: LD_VAR 0 4
69800: PPUSH
69801: LD_VAR 0 5
69805: PPUSH
69806: LD_VAR 0 4
69810: PPUSH
69811: CALL_OW 74
69815: PPUSH
69816: CALL 70905 0 2
// end ; end ;
69820: GO 69392
69822: POP
69823: POP
// end ;
69824: LD_VAR 0 3
69828: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69829: LD_INT 0
69831: PPUSH
69832: PPUSH
69833: PPUSH
// if not unit or IsInUnit ( unit ) then
69834: LD_VAR 0 1
69838: NOT
69839: IFTRUE 69852
69841: PUSH
69842: LD_VAR 0 1
69846: PPUSH
69847: CALL_OW 310
69851: OR
69852: IFFALSE 69856
// exit ;
69854: GO 69947
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69856: LD_ADDR_VAR 0 4
69860: PUSH
69861: LD_VAR 0 1
69865: PPUSH
69866: CALL_OW 250
69870: PPUSH
69871: LD_VAR 0 2
69875: PPUSH
69876: LD_INT 1
69878: PPUSH
69879: CALL_OW 272
69883: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69884: LD_ADDR_VAR 0 5
69888: PUSH
69889: LD_VAR 0 1
69893: PPUSH
69894: CALL_OW 251
69898: PPUSH
69899: LD_VAR 0 2
69903: PPUSH
69904: LD_INT 1
69906: PPUSH
69907: CALL_OW 273
69911: ST_TO_ADDR
// if ValidHex ( x , y ) then
69912: LD_VAR 0 4
69916: PPUSH
69917: LD_VAR 0 5
69921: PPUSH
69922: CALL_OW 488
69926: IFFALSE 69947
// ComTurnXY ( unit , x , y ) ;
69928: LD_VAR 0 1
69932: PPUSH
69933: LD_VAR 0 4
69937: PPUSH
69938: LD_VAR 0 5
69942: PPUSH
69943: CALL_OW 118
// end ;
69947: LD_VAR 0 3
69951: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69952: LD_INT 0
69954: PPUSH
69955: PPUSH
// result := false ;
69956: LD_ADDR_VAR 0 3
69960: PUSH
69961: LD_INT 0
69963: ST_TO_ADDR
// if not units then
69964: LD_VAR 0 2
69968: NOT
69969: IFFALSE 69973
// exit ;
69971: GO 70018
// for i in units do
69973: LD_ADDR_VAR 0 4
69977: PUSH
69978: LD_VAR 0 2
69982: PUSH
69983: FOR_IN
69984: IFFALSE 70016
// if See ( side , i ) then
69986: LD_VAR 0 1
69990: PPUSH
69991: LD_VAR 0 4
69995: PPUSH
69996: CALL_OW 292
70000: IFFALSE 70014
// begin result := true ;
70002: LD_ADDR_VAR 0 3
70006: PUSH
70007: LD_INT 1
70009: ST_TO_ADDR
// exit ;
70010: POP
70011: POP
70012: GO 70018
// end ;
70014: GO 69983
70016: POP
70017: POP
// end ;
70018: LD_VAR 0 3
70022: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70023: LD_INT 0
70025: PPUSH
70026: PPUSH
70027: PPUSH
70028: PPUSH
// if not unit or not points then
70029: LD_VAR 0 1
70033: NOT
70034: IFTRUE 70043
70036: PUSH
70037: LD_VAR 0 2
70041: NOT
70042: OR
70043: IFFALSE 70047
// exit ;
70045: GO 70137
// dist := 99999 ;
70047: LD_ADDR_VAR 0 5
70051: PUSH
70052: LD_INT 99999
70054: ST_TO_ADDR
// for i in points do
70055: LD_ADDR_VAR 0 4
70059: PUSH
70060: LD_VAR 0 2
70064: PUSH
70065: FOR_IN
70066: IFFALSE 70135
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70068: LD_ADDR_VAR 0 6
70072: PUSH
70073: LD_VAR 0 1
70077: PPUSH
70078: LD_VAR 0 4
70082: PUSH
70083: LD_INT 1
70085: ARRAY
70086: PPUSH
70087: LD_VAR 0 4
70091: PUSH
70092: LD_INT 2
70094: ARRAY
70095: PPUSH
70096: CALL_OW 297
70100: ST_TO_ADDR
// if tmpDist < dist then
70101: LD_VAR 0 6
70105: PUSH
70106: LD_VAR 0 5
70110: LESS
70111: IFFALSE 70133
// begin result := i ;
70113: LD_ADDR_VAR 0 3
70117: PUSH
70118: LD_VAR 0 4
70122: ST_TO_ADDR
// dist := tmpDist ;
70123: LD_ADDR_VAR 0 5
70127: PUSH
70128: LD_VAR 0 6
70132: ST_TO_ADDR
// end ; end ;
70133: GO 70065
70135: POP
70136: POP
// end ;
70137: LD_VAR 0 3
70141: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70142: LD_INT 0
70144: PPUSH
// uc_side := side ;
70145: LD_ADDR_OWVAR 20
70149: PUSH
70150: LD_VAR 0 1
70154: ST_TO_ADDR
// uc_nation := 3 ;
70155: LD_ADDR_OWVAR 21
70159: PUSH
70160: LD_INT 3
70162: ST_TO_ADDR
// vc_chassis := 25 ;
70163: LD_ADDR_OWVAR 37
70167: PUSH
70168: LD_INT 25
70170: ST_TO_ADDR
// vc_engine := engine_siberite ;
70171: LD_ADDR_OWVAR 39
70175: PUSH
70176: LD_INT 3
70178: ST_TO_ADDR
// vc_control := control_computer ;
70179: LD_ADDR_OWVAR 38
70183: PUSH
70184: LD_INT 3
70186: ST_TO_ADDR
// vc_weapon := 59 ;
70187: LD_ADDR_OWVAR 40
70191: PUSH
70192: LD_INT 59
70194: ST_TO_ADDR
// result := CreateVehicle ;
70195: LD_ADDR_VAR 0 5
70199: PUSH
70200: CALL_OW 45
70204: ST_TO_ADDR
// SetDir ( result , d ) ;
70205: LD_VAR 0 5
70209: PPUSH
70210: LD_VAR 0 4
70214: PPUSH
70215: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70219: LD_VAR 0 5
70223: PPUSH
70224: LD_VAR 0 2
70228: PPUSH
70229: LD_VAR 0 3
70233: PPUSH
70234: LD_INT 0
70236: PPUSH
70237: CALL_OW 48
// end ;
70241: LD_VAR 0 5
70245: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70246: LD_INT 0
70248: PPUSH
70249: PPUSH
70250: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70251: LD_ADDR_VAR 0 2
70255: PUSH
70256: LD_INT 0
70258: PUSH
70259: LD_INT 0
70261: PUSH
70262: LD_INT 0
70264: PUSH
70265: LD_INT 0
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70274: LD_VAR 0 1
70278: NOT
70279: IFTRUE 70312
70281: PUSH
70282: LD_VAR 0 1
70286: PPUSH
70287: CALL_OW 264
70291: PUSH
70292: LD_INT 12
70294: PUSH
70295: LD_INT 51
70297: PUSH
70298: LD_INT 32
70300: PUSH
70301: LD_INT 89
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: IN
70310: NOT
70311: OR
70312: IFFALSE 70316
// exit ;
70314: GO 70414
// for i := 1 to 3 do
70316: LD_ADDR_VAR 0 3
70320: PUSH
70321: DOUBLE
70322: LD_INT 1
70324: DEC
70325: ST_TO_ADDR
70326: LD_INT 3
70328: PUSH
70329: FOR_TO
70330: IFFALSE 70412
// begin tmp := GetCargo ( cargo , i ) ;
70332: LD_ADDR_VAR 0 4
70336: PUSH
70337: LD_VAR 0 1
70341: PPUSH
70342: LD_VAR 0 3
70346: PPUSH
70347: CALL_OW 289
70351: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70352: LD_ADDR_VAR 0 2
70356: PUSH
70357: LD_VAR 0 2
70361: PPUSH
70362: LD_VAR 0 3
70366: PPUSH
70367: LD_VAR 0 4
70371: PPUSH
70372: CALL_OW 1
70376: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70377: LD_ADDR_VAR 0 2
70381: PUSH
70382: LD_VAR 0 2
70386: PPUSH
70387: LD_INT 4
70389: PPUSH
70390: LD_VAR 0 2
70394: PUSH
70395: LD_INT 4
70397: ARRAY
70398: PUSH
70399: LD_VAR 0 4
70403: PLUS
70404: PPUSH
70405: CALL_OW 1
70409: ST_TO_ADDR
// end ;
70410: GO 70329
70412: POP
70413: POP
// end ;
70414: LD_VAR 0 2
70418: RET
// export function Length ( array ) ; begin
70419: LD_INT 0
70421: PPUSH
// result := array + 0 ;
70422: LD_ADDR_VAR 0 2
70426: PUSH
70427: LD_VAR 0 1
70431: PUSH
70432: LD_INT 0
70434: PLUS
70435: ST_TO_ADDR
// end ;
70436: LD_VAR 0 2
70440: RET
// export function PrepareArray ( array ) ; begin
70441: LD_INT 0
70443: PPUSH
// result := array diff 0 ;
70444: LD_ADDR_VAR 0 2
70448: PUSH
70449: LD_VAR 0 1
70453: PUSH
70454: LD_INT 0
70456: DIFF
70457: ST_TO_ADDR
// if not result [ 1 ] then
70458: LD_VAR 0 2
70462: PUSH
70463: LD_INT 1
70465: ARRAY
70466: NOT
70467: IFFALSE 70487
// result := Delete ( result , 1 ) ;
70469: LD_ADDR_VAR 0 2
70473: PUSH
70474: LD_VAR 0 2
70478: PPUSH
70479: LD_INT 1
70481: PPUSH
70482: CALL_OW 3
70486: ST_TO_ADDR
// end ;
70487: LD_VAR 0 2
70491: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70492: LD_INT 0
70494: PPUSH
70495: PPUSH
70496: PPUSH
70497: PPUSH
// sibRocketRange := 25 ;
70498: LD_ADDR_VAR 0 6
70502: PUSH
70503: LD_INT 25
70505: ST_TO_ADDR
// result := false ;
70506: LD_ADDR_VAR 0 4
70510: PUSH
70511: LD_INT 0
70513: ST_TO_ADDR
// for i := 0 to 5 do
70514: LD_ADDR_VAR 0 5
70518: PUSH
70519: DOUBLE
70520: LD_INT 0
70522: DEC
70523: ST_TO_ADDR
70524: LD_INT 5
70526: PUSH
70527: FOR_TO
70528: IFFALSE 70595
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70530: LD_VAR 0 1
70534: PPUSH
70535: LD_VAR 0 5
70539: PPUSH
70540: LD_VAR 0 6
70544: PPUSH
70545: CALL_OW 272
70549: PPUSH
70550: LD_VAR 0 2
70554: PPUSH
70555: LD_VAR 0 5
70559: PPUSH
70560: LD_VAR 0 6
70564: PPUSH
70565: CALL_OW 273
70569: PPUSH
70570: LD_VAR 0 3
70574: PPUSH
70575: CALL_OW 309
70579: IFFALSE 70593
// begin result := true ;
70581: LD_ADDR_VAR 0 4
70585: PUSH
70586: LD_INT 1
70588: ST_TO_ADDR
// exit ;
70589: POP
70590: POP
70591: GO 70597
// end ;
70593: GO 70527
70595: POP
70596: POP
// end ;
70597: LD_VAR 0 4
70601: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70602: LD_INT 0
70604: PPUSH
70605: PPUSH
70606: PPUSH
// if btype = b_depot then
70607: LD_VAR 0 2
70611: PUSH
70612: LD_INT 0
70614: EQUAL
70615: IFFALSE 70627
// begin result := true ;
70617: LD_ADDR_VAR 0 3
70621: PUSH
70622: LD_INT 1
70624: ST_TO_ADDR
// exit ;
70625: GO 70747
// end ; pom := GetBase ( depot ) ;
70627: LD_ADDR_VAR 0 4
70631: PUSH
70632: LD_VAR 0 1
70636: PPUSH
70637: CALL_OW 274
70641: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70642: LD_ADDR_VAR 0 5
70646: PUSH
70647: LD_VAR 0 2
70651: PPUSH
70652: LD_VAR 0 1
70656: PPUSH
70657: CALL_OW 248
70661: PPUSH
70662: CALL_OW 450
70666: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70667: LD_ADDR_VAR 0 3
70671: PUSH
70672: LD_VAR 0 4
70676: PPUSH
70677: LD_INT 1
70679: PPUSH
70680: CALL_OW 275
70684: PUSH
70685: LD_VAR 0 5
70689: PUSH
70690: LD_INT 1
70692: ARRAY
70693: GREATEREQUAL
70694: IFFALSE 70720
70696: PUSH
70697: LD_VAR 0 4
70701: PPUSH
70702: LD_INT 2
70704: PPUSH
70705: CALL_OW 275
70709: PUSH
70710: LD_VAR 0 5
70714: PUSH
70715: LD_INT 2
70717: ARRAY
70718: GREATEREQUAL
70719: AND
70720: IFFALSE 70746
70722: PUSH
70723: LD_VAR 0 4
70727: PPUSH
70728: LD_INT 3
70730: PPUSH
70731: CALL_OW 275
70735: PUSH
70736: LD_VAR 0 5
70740: PUSH
70741: LD_INT 3
70743: ARRAY
70744: GREATEREQUAL
70745: AND
70746: ST_TO_ADDR
// end ;
70747: LD_VAR 0 3
70751: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70752: LD_INT 0
70754: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70755: LD_VAR 0 1
70759: PPUSH
70760: LD_VAR 0 2
70764: PPUSH
70765: LD_INT 0
70767: PPUSH
70768: LD_INT 0
70770: PPUSH
70771: LD_INT 1
70773: PPUSH
70774: LD_INT 0
70776: PPUSH
70777: CALL_OW 587
// end ;
70781: LD_VAR 0 3
70785: RET
// export function CenterOnNow ( unit ) ; begin
70786: LD_INT 0
70788: PPUSH
// result := IsInUnit ( unit ) ;
70789: LD_ADDR_VAR 0 2
70793: PUSH
70794: LD_VAR 0 1
70798: PPUSH
70799: CALL_OW 310
70803: ST_TO_ADDR
// if not result then
70804: LD_VAR 0 2
70808: NOT
70809: IFFALSE 70821
// result := unit ;
70811: LD_ADDR_VAR 0 2
70815: PUSH
70816: LD_VAR 0 1
70820: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70821: LD_VAR 0 1
70825: PPUSH
70826: CALL_OW 87
// end ;
70830: LD_VAR 0 2
70834: RET
// export function ComMoveHex ( unit , hex ) ; begin
70835: LD_INT 0
70837: PPUSH
// if not hex then
70838: LD_VAR 0 2
70842: NOT
70843: IFFALSE 70847
// exit ;
70845: GO 70900
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70847: LD_VAR 0 2
70851: PUSH
70852: LD_INT 1
70854: ARRAY
70855: PPUSH
70856: LD_VAR 0 2
70860: PUSH
70861: LD_INT 2
70863: ARRAY
70864: PPUSH
70865: CALL_OW 428
70869: IFFALSE 70873
// exit ;
70871: GO 70900
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70873: LD_VAR 0 1
70877: PPUSH
70878: LD_VAR 0 2
70882: PUSH
70883: LD_INT 1
70885: ARRAY
70886: PPUSH
70887: LD_VAR 0 2
70891: PUSH
70892: LD_INT 2
70894: ARRAY
70895: PPUSH
70896: CALL_OW 111
// end ;
70900: LD_VAR 0 3
70904: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70905: LD_INT 0
70907: PPUSH
70908: PPUSH
70909: PPUSH
// if not unit or not enemy then
70910: LD_VAR 0 1
70914: NOT
70915: IFTRUE 70924
70917: PUSH
70918: LD_VAR 0 2
70922: NOT
70923: OR
70924: IFFALSE 70928
// exit ;
70926: GO 71054
// x := GetX ( enemy ) ;
70928: LD_ADDR_VAR 0 4
70932: PUSH
70933: LD_VAR 0 2
70937: PPUSH
70938: CALL_OW 250
70942: ST_TO_ADDR
// y := GetY ( enemy ) ;
70943: LD_ADDR_VAR 0 5
70947: PUSH
70948: LD_VAR 0 2
70952: PPUSH
70953: CALL_OW 251
70957: ST_TO_ADDR
// if ValidHex ( x , y ) then
70958: LD_VAR 0 4
70962: PPUSH
70963: LD_VAR 0 5
70967: PPUSH
70968: CALL_OW 488
70972: IFFALSE 71054
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
70974: LD_VAR 0 2
70978: PPUSH
70979: CALL_OW 247
70983: PUSH
70984: LD_INT 3
70986: PUSH
70987: LD_INT 2
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: IN
70994: IFTRUE 71017
70996: PUSH
70997: LD_VAR 0 1
71001: PPUSH
71002: CALL_OW 255
71006: PPUSH
71007: LD_VAR 0 2
71011: PPUSH
71012: CALL_OW 292
71016: OR
71017: IFFALSE 71035
// ComAttackUnit ( unit , enemy ) else
71019: LD_VAR 0 1
71023: PPUSH
71024: LD_VAR 0 2
71028: PPUSH
71029: CALL_OW 115
71033: GO 71054
// ComAgressiveMove ( unit , x , y ) ;
71035: LD_VAR 0 1
71039: PPUSH
71040: LD_VAR 0 4
71044: PPUSH
71045: LD_VAR 0 5
71049: PPUSH
71050: CALL_OW 114
// end ;
71054: LD_VAR 0 3
71058: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71059: LD_INT 0
71061: PPUSH
71062: PPUSH
71063: PPUSH
// list := AreaToList ( area , 0 ) ;
71064: LD_ADDR_VAR 0 5
71068: PUSH
71069: LD_VAR 0 1
71073: PPUSH
71074: LD_INT 0
71076: PPUSH
71077: CALL_OW 517
71081: ST_TO_ADDR
// if not list then
71082: LD_VAR 0 5
71086: NOT
71087: IFFALSE 71091
// exit ;
71089: GO 71221
// if all then
71091: LD_VAR 0 2
71095: IFFALSE 71183
// begin for i := 1 to list [ 1 ] do
71097: LD_ADDR_VAR 0 4
71101: PUSH
71102: DOUBLE
71103: LD_INT 1
71105: DEC
71106: ST_TO_ADDR
71107: LD_VAR 0 5
71111: PUSH
71112: LD_INT 1
71114: ARRAY
71115: PUSH
71116: FOR_TO
71117: IFFALSE 71179
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71119: LD_ADDR_VAR 0 3
71123: PUSH
71124: LD_VAR 0 3
71128: PPUSH
71129: LD_VAR 0 3
71133: PUSH
71134: LD_INT 1
71136: PLUS
71137: PPUSH
71138: LD_VAR 0 5
71142: PUSH
71143: LD_INT 1
71145: ARRAY
71146: PUSH
71147: LD_VAR 0 4
71151: ARRAY
71152: PUSH
71153: LD_VAR 0 5
71157: PUSH
71158: LD_INT 2
71160: ARRAY
71161: PUSH
71162: LD_VAR 0 4
71166: ARRAY
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PPUSH
71172: CALL_OW 1
71176: ST_TO_ADDR
71177: GO 71116
71179: POP
71180: POP
// exit ;
71181: GO 71221
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71183: LD_ADDR_VAR 0 3
71187: PUSH
71188: LD_VAR 0 5
71192: PUSH
71193: LD_INT 1
71195: ARRAY
71196: PUSH
71197: LD_INT 1
71199: ARRAY
71200: PUSH
71201: LD_VAR 0 5
71205: PUSH
71206: LD_INT 2
71208: ARRAY
71209: PUSH
71210: LD_INT 1
71212: ARRAY
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: EMPTY
71219: LIST
71220: ST_TO_ADDR
// end ;
71221: LD_VAR 0 3
71225: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71226: LD_INT 0
71228: PPUSH
71229: PPUSH
// list := AreaToList ( area , 0 ) ;
71230: LD_ADDR_VAR 0 4
71234: PUSH
71235: LD_VAR 0 1
71239: PPUSH
71240: LD_INT 0
71242: PPUSH
71243: CALL_OW 517
71247: ST_TO_ADDR
// if not list then
71248: LD_VAR 0 4
71252: NOT
71253: IFFALSE 71257
// exit ;
71255: GO 71298
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71257: LD_ADDR_VAR 0 3
71261: PUSH
71262: LD_VAR 0 4
71266: PUSH
71267: LD_INT 1
71269: ARRAY
71270: PUSH
71271: LD_INT 1
71273: ARRAY
71274: PUSH
71275: LD_VAR 0 4
71279: PUSH
71280: LD_INT 2
71282: ARRAY
71283: PUSH
71284: LD_INT 1
71286: ARRAY
71287: PUSH
71288: LD_VAR 0 2
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: LIST
71297: ST_TO_ADDR
// end ;
71298: LD_VAR 0 3
71302: RET
// export function First ( array ) ; begin
71303: LD_INT 0
71305: PPUSH
// if not array then
71306: LD_VAR 0 1
71310: NOT
71311: IFFALSE 71315
// exit ;
71313: GO 71329
// result := array [ 1 ] ;
71315: LD_ADDR_VAR 0 2
71319: PUSH
71320: LD_VAR 0 1
71324: PUSH
71325: LD_INT 1
71327: ARRAY
71328: ST_TO_ADDR
// end ;
71329: LD_VAR 0 2
71333: RET
// export function Last ( array ) ; begin
71334: LD_INT 0
71336: PPUSH
// if not array then
71337: LD_VAR 0 1
71341: NOT
71342: IFFALSE 71346
// exit ;
71344: GO 71362
// result := array [ array ] ;
71346: LD_ADDR_VAR 0 2
71350: PUSH
71351: LD_VAR 0 1
71355: PUSH
71356: LD_VAR 0 1
71360: ARRAY
71361: ST_TO_ADDR
// end ;
71362: LD_VAR 0 2
71366: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71367: LD_INT 0
71369: PPUSH
71370: PPUSH
// result := [ ] ;
71371: LD_ADDR_VAR 0 5
71375: PUSH
71376: EMPTY
71377: ST_TO_ADDR
// if not array then
71378: LD_VAR 0 1
71382: NOT
71383: IFFALSE 71387
// exit ;
71385: GO 71499
// for i := 1 to array do
71387: LD_ADDR_VAR 0 6
71391: PUSH
71392: DOUBLE
71393: LD_INT 1
71395: DEC
71396: ST_TO_ADDR
71397: LD_VAR 0 1
71401: PUSH
71402: FOR_TO
71403: IFFALSE 71497
// if array [ i ] [ index ] = value then
71405: LD_VAR 0 1
71409: PUSH
71410: LD_VAR 0 6
71414: ARRAY
71415: PUSH
71416: LD_VAR 0 2
71420: ARRAY
71421: PUSH
71422: LD_VAR 0 3
71426: EQUAL
71427: IFFALSE 71495
// begin if indexColumn then
71429: LD_VAR 0 4
71433: IFFALSE 71469
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71435: LD_ADDR_VAR 0 5
71439: PUSH
71440: LD_VAR 0 5
71444: PPUSH
71445: LD_VAR 0 1
71449: PUSH
71450: LD_VAR 0 6
71454: ARRAY
71455: PUSH
71456: LD_VAR 0 4
71460: ARRAY
71461: PPUSH
71462: CALL 66507 0 2
71466: ST_TO_ADDR
71467: GO 71495
// result := Join ( result , array [ i ] ) ;
71469: LD_ADDR_VAR 0 5
71473: PUSH
71474: LD_VAR 0 5
71478: PPUSH
71479: LD_VAR 0 1
71483: PUSH
71484: LD_VAR 0 6
71488: ARRAY
71489: PPUSH
71490: CALL 66507 0 2
71494: ST_TO_ADDR
// end ;
71495: GO 71402
71497: POP
71498: POP
// end ;
71499: LD_VAR 0 5
71503: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71504: LD_INT 0
71506: PPUSH
// if not vehicles or not parkingPoint then
71507: LD_VAR 0 1
71511: NOT
71512: IFTRUE 71521
71514: PUSH
71515: LD_VAR 0 2
71519: NOT
71520: OR
71521: IFFALSE 71525
// exit ;
71523: GO 71623
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
71525: LD_ADDR_VAR 0 1
71529: PUSH
71530: LD_VAR 0 1
71534: PPUSH
71535: LD_INT 50
71537: PUSH
71538: EMPTY
71539: LIST
71540: PUSH
71541: LD_INT 3
71543: PUSH
71544: LD_INT 92
71546: PUSH
71547: LD_VAR 0 2
71551: PUSH
71552: LD_INT 1
71554: ARRAY
71555: PUSH
71556: LD_VAR 0 2
71560: PUSH
71561: LD_INT 2
71563: ARRAY
71564: PUSH
71565: LD_INT 8
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PPUSH
71582: CALL_OW 72
71586: ST_TO_ADDR
// if not vehicles then
71587: LD_VAR 0 1
71591: NOT
71592: IFFALSE 71596
// exit ;
71594: GO 71623
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
71596: LD_VAR 0 1
71600: PPUSH
71601: LD_VAR 0 2
71605: PUSH
71606: LD_INT 1
71608: ARRAY
71609: PPUSH
71610: LD_VAR 0 2
71614: PUSH
71615: LD_INT 2
71617: ARRAY
71618: PPUSH
71619: CALL_OW 111
// end ;
71623: LD_VAR 0 3
71627: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71628: LD_INT 0
71630: PPUSH
71631: PPUSH
71632: PPUSH
// if not side or not area then
71633: LD_VAR 0 1
71637: NOT
71638: IFTRUE 71647
71640: PUSH
71641: LD_VAR 0 2
71645: NOT
71646: OR
71647: IFFALSE 71651
// exit ;
71649: GO 71770
// tmp := AreaToList ( area , 0 ) ;
71651: LD_ADDR_VAR 0 5
71655: PUSH
71656: LD_VAR 0 2
71660: PPUSH
71661: LD_INT 0
71663: PPUSH
71664: CALL_OW 517
71668: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
71669: LD_ADDR_VAR 0 4
71673: PUSH
71674: DOUBLE
71675: LD_INT 1
71677: DEC
71678: ST_TO_ADDR
71679: LD_VAR 0 5
71683: PUSH
71684: LD_INT 1
71686: ARRAY
71687: PUSH
71688: FOR_TO
71689: IFFALSE 71768
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
71691: LD_VAR 0 5
71695: PUSH
71696: LD_INT 1
71698: ARRAY
71699: PUSH
71700: LD_VAR 0 4
71704: ARRAY
71705: PPUSH
71706: LD_VAR 0 5
71710: PUSH
71711: LD_INT 2
71713: ARRAY
71714: PUSH
71715: LD_VAR 0 4
71719: ARRAY
71720: PPUSH
71721: CALL_OW 351
71725: IFFALSE 71766
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
71727: LD_VAR 0 5
71731: PUSH
71732: LD_INT 1
71734: ARRAY
71735: PUSH
71736: LD_VAR 0 4
71740: ARRAY
71741: PPUSH
71742: LD_VAR 0 5
71746: PUSH
71747: LD_INT 2
71749: ARRAY
71750: PUSH
71751: LD_VAR 0 4
71755: ARRAY
71756: PPUSH
71757: LD_VAR 0 1
71761: PPUSH
71762: CALL_OW 244
// end ;
71766: GO 71688
71768: POP
71769: POP
// end ;
71770: LD_VAR 0 3
71774: RET
// export function UniqueArray ( array ) ; var i ; begin
71775: LD_INT 0
71777: PPUSH
71778: PPUSH
// result := [ ] ;
71779: LD_ADDR_VAR 0 2
71783: PUSH
71784: EMPTY
71785: ST_TO_ADDR
// if not array then
71786: LD_VAR 0 1
71790: NOT
71791: IFFALSE 71795
// exit ;
71793: GO 71856
// for i := 1 to array do
71795: LD_ADDR_VAR 0 3
71799: PUSH
71800: DOUBLE
71801: LD_INT 1
71803: DEC
71804: ST_TO_ADDR
71805: LD_VAR 0 1
71809: PUSH
71810: FOR_TO
71811: IFFALSE 71854
// if not array [ i ] in result then
71813: LD_VAR 0 1
71817: PUSH
71818: LD_VAR 0 3
71822: ARRAY
71823: PUSH
71824: LD_VAR 0 2
71828: IN
71829: NOT
71830: IFFALSE 71852
// result := Join ( result , i ) ;
71832: LD_ADDR_VAR 0 2
71836: PUSH
71837: LD_VAR 0 2
71841: PPUSH
71842: LD_VAR 0 3
71846: PPUSH
71847: CALL 66507 0 2
71851: ST_TO_ADDR
71852: GO 71810
71854: POP
71855: POP
// end ;
71856: LD_VAR 0 2
71860: RET
