// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles = [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources = [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon = [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 1059 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// InGameOn ;
  70: CALL_OW 8
// mission_prefix_prev = 12_ ;
  74: LD_ADDR_EXP 21
  78: PUSH
  79: LD_STRING 12_
  81: ST_TO_ADDR
// PrepareEpsilonBase ;
  82: CALL 2398 0 0
// PrepareHeroes ;
  86: CALL 1239 0 0
// PrepareRandoms ;
  90: CALL 3690 0 0
// CenterNowOnUnits ( JMM ) ;
  94: LD_EXP 1
  98: PPUSH
  99: CALL_OW 87
// wait ( 0 0$1 ) ;
 103: LD_INT 35
 105: PPUSH
 106: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
 110: LD_EXP 1
 114: PPUSH
 115: LD_STRING D1-JMM-1
 117: PPUSH
 118: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
 122: LD_EXP 2
 126: PPUSH
 127: LD_STRING D1-Pow-1
 129: PPUSH
 130: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
 134: LD_EXP 2
 138: PPUSH
 139: LD_STRING D1-Pow-1a
 141: PPUSH
 142: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
 146: LD_EXP 2
 150: PPUSH
 151: LD_STRING D1-Pow-1b
 153: PPUSH
 154: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
 158: LD_EXP 2
 162: PPUSH
 163: LD_STRING D1-Pow-1c
 165: PPUSH
 166: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING D1-JMM-2
 177: PPUSH
 178: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 182: LD_EXP 2
 186: PPUSH
 187: LD_STRING D1-Pow-2
 189: PPUSH
 190: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 194: LD_EXP 1
 198: PPUSH
 199: LD_STRING D1-JMM-3
 201: PPUSH
 202: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 206: LD_EXP 2
 210: PPUSH
 211: LD_STRING D1-Pow-3
 213: PPUSH
 214: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 218: LD_EXP 1
 222: PPUSH
 223: LD_STRING D1-JMM-4
 225: PPUSH
 226: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 230: LD_EXP 2
 234: PPUSH
 235: LD_STRING D1-Pow-4
 237: PPUSH
 238: CALL_OW 94
// SelectAndSaveCharacters ;
 242: CALL 4286 0 0
// InGameOff ;
 246: CALL_OW 9
// Query ( Q1 ) ;
 250: LD_STRING Q1
 252: PPUSH
 253: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
 257: LD_INT 2
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: CALL_OW 424
// end ;
 267: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
 268: LD_INT 2
 270: PPUSH
 271: LD_INT 22
 273: PUSH
 274: LD_INT 1
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 21
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PPUSH
 295: CALL_OW 71
 299: PUSH
 300: LD_INT 0
 302: EQUAL
 303: PUSH
 304: LD_INT 2
 306: PPUSH
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 21
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 32
 329: PUSH
 330: LD_INT 3
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 33
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: LD_INT 3
 349: PUSH
 350: LD_INT 58
 352: PUSH
 353: EMPTY
 354: LIST
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: LIST
 365: LIST
 366: PPUSH
 367: CALL_OW 70
 371: PUSH
 372: LD_INT 8
 374: EQUAL
 375: AND
 376: IFFALSE 956
 378: GO 380
 380: DISABLE
 381: LD_INT 0
 383: PPUSH
 384: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 385: LD_INT 2
 387: PPUSH
 388: LD_INT 21
 390: PUSH
 391: LD_INT 2
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: LD_INT 33
 400: PUSH
 401: LD_INT 1
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 3
 410: PUSH
 411: LD_INT 58
 413: PUSH
 414: EMPTY
 415: LIST
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 70
 430: PUSH
 431: LD_INT 0
 433: GREATER
 434: IFFALSE 702
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 436: LD_ADDR_VAR 0 1
 440: PUSH
 441: LD_INT 2
 443: PPUSH
 444: LD_INT 21
 446: PUSH
 447: LD_INT 2
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 33
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 3
 466: PUSH
 467: LD_INT 58
 469: PUSH
 470: EMPTY
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PPUSH
 482: CALL_OW 70
 486: PUSH
 487: FOR_IN
 488: IFFALSE 688
// begin cargoType = GetCargoType ( i ) ;
 490: LD_ADDR_VAR 0 2
 494: PUSH
 495: LD_VAR 0 1
 499: PPUSH
 500: CALL_OW 288
 504: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 505: LD_VAR 0 1
 509: PPUSH
 510: CALL_OW 264
 514: PUSH
 515: LD_INT 12
 517: EQUAL
 518: IFFALSE 615
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
 520: LD_ADDR_EXP 19
 524: PUSH
 525: LD_EXP 19
 529: PUSH
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 248
 539: PUSH
 540: LD_VAR 0 1
 544: PPUSH
 545: CALL_OW 265
 549: PUSH
 550: LD_VAR 0 1
 554: PPUSH
 555: CALL_OW 262
 559: PUSH
 560: LD_VAR 0 1
 564: PPUSH
 565: CALL_OW 263
 569: PUSH
 570: LD_VAR 0 1
 574: PPUSH
 575: CALL_OW 264
 579: PUSH
 580: LD_VAR 0 2
 584: PUSH
 585: LD_VAR 0 1
 589: PPUSH
 590: LD_VAR 0 2
 594: PPUSH
 595: CALL_OW 289
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: ADD
 612: ST_TO_ADDR
// end else
 613: GO 686
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
 615: LD_ADDR_EXP 19
 619: PUSH
 620: LD_EXP 19
 624: PUSH
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 248
 634: PUSH
 635: LD_VAR 0 1
 639: PPUSH
 640: CALL_OW 265
 644: PUSH
 645: LD_VAR 0 1
 649: PPUSH
 650: CALL_OW 262
 654: PUSH
 655: LD_VAR 0 1
 659: PPUSH
 660: CALL_OW 263
 664: PUSH
 665: LD_VAR 0 1
 669: PPUSH
 670: CALL_OW 264
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: PUSH
 682: EMPTY
 683: LIST
 684: ADD
 685: ST_TO_ADDR
// end ; end ;
 686: GO 487
 688: POP
 689: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 690: LD_EXP 19
 694: PPUSH
 695: LD_STRING 13_VehiclesIn13_1
 697: PPUSH
 698: CALL_OW 39
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 702: LD_EXP 23
 706: PPUSH
 707: LD_STRING 13c_others
 709: PPUSH
 710: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 714: LD_EXP 1
 718: PPUSH
 719: LD_STRING 13c_JMM
 721: PPUSH
 722: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 726: LD_EXP 15
 730: PPUSH
 731: LD_STRING 13c_Stevens
 733: PPUSH
 734: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 738: LD_EXP 3
 742: PPUSH
 743: LD_STRING Lisa
 745: PPUSH
 746: LD_EXP 22
 750: PPUSH
 751: CALL 4228 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 755: LD_EXP 8
 759: PPUSH
 760: LD_STRING Brown
 762: PPUSH
 763: LD_EXP 22
 767: PPUSH
 768: CALL 4228 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 772: LD_EXP 4
 776: PPUSH
 777: LD_STRING Donaldson
 779: PPUSH
 780: LD_EXP 22
 784: PPUSH
 785: CALL 4228 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 789: LD_EXP 5
 793: PPUSH
 794: LD_STRING Bobby
 796: PPUSH
 797: LD_EXP 22
 801: PPUSH
 802: CALL 4228 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 806: LD_EXP 6
 810: PPUSH
 811: LD_STRING Cyrus
 813: PPUSH
 814: LD_EXP 22
 818: PPUSH
 819: CALL 4228 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 823: LD_EXP 7
 827: PPUSH
 828: LD_STRING Denis
 830: PPUSH
 831: LD_EXP 22
 835: PPUSH
 836: CALL 4228 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 840: LD_EXP 9
 844: PPUSH
 845: LD_STRING Gladstone
 847: PPUSH
 848: LD_EXP 22
 852: PPUSH
 853: CALL 4228 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 857: LD_EXP 10
 861: PPUSH
 862: LD_STRING Houten
 864: PPUSH
 865: LD_EXP 22
 869: PPUSH
 870: CALL 4228 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 874: LD_EXP 11
 878: PPUSH
 879: LD_STRING Cornel
 881: PPUSH
 882: LD_EXP 22
 886: PPUSH
 887: CALL 4228 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 891: LD_EXP 12
 895: PPUSH
 896: LD_STRING Gary
 898: PPUSH
 899: LD_EXP 22
 903: PPUSH
 904: CALL 4228 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 908: LD_EXP 13
 912: PPUSH
 913: LD_STRING Frank
 915: PPUSH
 916: LD_EXP 22
 920: PPUSH
 921: CALL 4228 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 925: LD_EXP 14
 929: PPUSH
 930: LD_STRING Kikuchi
 932: PPUSH
 933: LD_EXP 22
 937: PPUSH
 938: CALL 4228 0 3
// SaveCargos ;
 942: CALL 959 0 0
// ChangeMap ( 13 , %_cont ) ;
 946: LD_INT 13
 948: PPUSH
 949: LD_STRING %_cont
 951: PPUSH
 952: CALL_OW 340
// end ;
 956: PPOPN 2
 958: END
// export function SaveCargos ; var i ; begin
 959: LD_INT 0
 961: PPUSH
 962: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 963: LD_ADDR_VAR 0 2
 967: PUSH
 968: LD_INT 2
 970: PPUSH
 971: LD_INT 22
 973: PUSH
 974: LD_INT 1
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 33
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 34
 993: PUSH
 994: LD_INT 12
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PPUSH
1006: CALL_OW 70
1010: PUSH
1011: FOR_IN
1012: IFFALSE 1040
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
1014: LD_ADDR_EXP 20
1018: PUSH
1019: LD_EXP 20
1023: PUSH
1024: LD_VAR 0 2
1028: PPUSH
1029: CALL 4884 0 1
1033: PUSH
1034: EMPTY
1035: LIST
1036: ADD
1037: ST_TO_ADDR
1038: GO 1011
1040: POP
1041: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
1042: LD_EXP 20
1046: PPUSH
1047: LD_STRING 13_ResourcesInCargo13_1
1049: PPUSH
1050: CALL_OW 39
// end ;
1054: LD_VAR 0 1
1058: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
1059: LD_INT 0
1061: PPUSH
1062: PPUSH
1063: PPUSH
1064: PPUSH
1065: PPUSH
1066: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_STRING 10_EpsilonEnv
1074: PPUSH
1075: EMPTY
1076: PPUSH
1077: CALL_OW 30
1081: ST_TO_ADDR
// if not tmp then
1082: LD_VAR 0 2
1086: NOT
1087: IFFALSE 1091
// exit ;
1089: GO 1234
// list := ListEnvironmentArea ( epsilonTerrain ) ;
1091: LD_ADDR_VAR 0 3
1095: PUSH
1096: LD_INT 1
1098: PPUSH
1099: CALL_OW 353
1103: ST_TO_ADDR
// if not list then
1104: LD_VAR 0 3
1108: NOT
1109: IFFALSE 1113
// exit ;
1111: GO 1234
// for i in list do
1113: LD_ADDR_VAR 0 4
1117: PUSH
1118: LD_VAR 0 3
1122: PUSH
1123: FOR_IN
1124: IFFALSE 1232
// begin exist := false ;
1126: LD_ADDR_VAR 0 6
1130: PUSH
1131: LD_INT 0
1133: ST_TO_ADDR
// for j in tmp do
1134: LD_ADDR_VAR 0 5
1138: PUSH
1139: LD_VAR 0 2
1143: PUSH
1144: FOR_IN
1145: IFFALSE 1199
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
1147: LD_VAR 0 4
1151: PUSH
1152: LD_INT 1
1154: ARRAY
1155: PUSH
1156: LD_VAR 0 5
1160: PUSH
1161: LD_INT 1
1163: ARRAY
1164: EQUAL
1165: PUSH
1166: LD_VAR 0 4
1170: PUSH
1171: LD_INT 2
1173: ARRAY
1174: PUSH
1175: LD_VAR 0 5
1179: PUSH
1180: LD_INT 2
1182: ARRAY
1183: EQUAL
1184: AND
1185: IFFALSE 1197
// begin exist := true ;
1187: LD_ADDR_VAR 0 6
1191: PUSH
1192: LD_INT 1
1194: ST_TO_ADDR
// break ;
1195: GO 1199
// end ;
1197: GO 1144
1199: POP
1200: POP
// if not exist then
1201: LD_VAR 0 6
1205: NOT
1206: IFFALSE 1230
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1208: LD_VAR 0 4
1212: PUSH
1213: LD_INT 1
1215: ARRAY
1216: PPUSH
1217: LD_VAR 0 4
1221: PUSH
1222: LD_INT 2
1224: ARRAY
1225: PPUSH
1226: CALL_OW 347
// end ;
1230: GO 1123
1232: POP
1233: POP
// end ; end_of_file
1234: LD_VAR 0 1
1238: RET
// export function PrepareHeroes ; var i , others , tmp ; begin
1239: LD_INT 0
1241: PPUSH
1242: PPUSH
1243: PPUSH
1244: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
1245: LD_ADDR_VAR 0 4
1249: PUSH
1250: LD_INT 22
1252: PUSH
1253: LD_INT 1
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 2
1262: PUSH
1263: LD_INT 30
1265: PUSH
1266: LD_INT 0
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PUSH
1273: LD_INT 30
1275: PUSH
1276: LD_INT 1
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: ST_TO_ADDR
// uc_side = 1 ;
1297: LD_ADDR_OWVAR 20
1301: PUSH
1302: LD_INT 1
1304: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true ) ;
1305: LD_ADDR_EXP 1
1309: PUSH
1310: LD_STRING JMM
1312: PPUSH
1313: LD_INT 1
1315: PPUSH
1316: CALL 4043 0 2
1320: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , true ) ;
1321: LD_ADDR_EXP 3
1325: PUSH
1326: LD_STRING Lisa
1328: PPUSH
1329: LD_INT 1
1331: PPUSH
1332: CALL 4043 0 2
1336: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , true ) ;
1337: LD_ADDR_EXP 4
1341: PUSH
1342: LD_STRING Donaldson
1344: PPUSH
1345: LD_INT 1
1347: PPUSH
1348: CALL 4043 0 2
1352: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
1353: LD_ADDR_EXP 5
1357: PUSH
1358: LD_STRING Bobby
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL 4043 0 2
1368: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
1369: LD_ADDR_EXP 6
1373: PUSH
1374: LD_STRING Cyrus
1376: PPUSH
1377: LD_INT 1
1379: PPUSH
1380: CALL 4043 0 2
1384: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true ) ;
1385: LD_ADDR_EXP 7
1389: PUSH
1390: LD_STRING Denis
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: CALL 4043 0 2
1400: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , true ) ;
1401: LD_ADDR_EXP 8
1405: PUSH
1406: LD_STRING Brown
1408: PPUSH
1409: LD_INT 1
1411: PPUSH
1412: CALL 4043 0 2
1416: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true ) ;
1417: LD_ADDR_EXP 9
1421: PUSH
1422: LD_STRING Gladstone
1424: PPUSH
1425: LD_INT 1
1427: PPUSH
1428: CALL 4043 0 2
1432: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true ) ;
1433: LD_ADDR_EXP 10
1437: PUSH
1438: LD_STRING Houten
1440: PPUSH
1441: LD_INT 1
1443: PPUSH
1444: CALL 4043 0 2
1448: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , true ) ;
1449: LD_ADDR_EXP 11
1453: PUSH
1454: LD_STRING Cornell
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: CALL 4043 0 2
1464: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true ) ;
1465: LD_ADDR_EXP 12
1469: PUSH
1470: LD_STRING Gary
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL 4043 0 2
1480: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true ) ;
1481: LD_ADDR_EXP 13
1485: PUSH
1486: LD_STRING Frank
1488: PPUSH
1489: LD_INT 1
1491: PPUSH
1492: CALL 4043 0 2
1496: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true ) ;
1497: LD_ADDR_EXP 14
1501: PUSH
1502: LD_STRING Kikuchi
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL 4043 0 2
1512: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
1513: LD_ADDR_EXP 15
1517: PUSH
1518: LD_STRING Stevens
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL 4043 0 2
1528: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1529: LD_ADDR_EXP 2
1533: PUSH
1534: LD_STRING Powell
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL 4043 0 2
1544: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1545: LD_EXP 1
1549: PPUSH
1550: LD_VAR 0 4
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 250
1563: PPUSH
1564: LD_VAR 0 4
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: CALL_OW 251
1577: PPUSH
1578: LD_INT 4
1580: PPUSH
1581: LD_INT 0
1583: PPUSH
1584: CALL_OW 50
// PlaceUnitXYR ( Stevens , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_VAR 0 4
1597: PUSH
1598: LD_INT 1
1600: ARRAY
1601: PPUSH
1602: CALL_OW 250
1606: PPUSH
1607: LD_VAR 0 4
1611: PUSH
1612: LD_INT 1
1614: ARRAY
1615: PPUSH
1616: CALL_OW 251
1620: PPUSH
1621: LD_INT 4
1623: PPUSH
1624: LD_INT 0
1626: PPUSH
1627: CALL_OW 50
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1631: LD_EXP 3
1635: PPUSH
1636: LD_VAR 0 4
1640: PUSH
1641: LD_INT 1
1643: ARRAY
1644: PPUSH
1645: CALL_OW 250
1649: PPUSH
1650: LD_VAR 0 4
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PPUSH
1659: CALL_OW 251
1663: PPUSH
1664: LD_INT 35
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 50
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1674: LD_EXP 4
1678: PPUSH
1679: LD_VAR 0 4
1683: PUSH
1684: LD_INT 1
1686: ARRAY
1687: PPUSH
1688: CALL_OW 250
1692: PPUSH
1693: LD_VAR 0 4
1697: PUSH
1698: LD_INT 1
1700: ARRAY
1701: PPUSH
1702: CALL_OW 251
1706: PPUSH
1707: LD_INT 35
1709: PPUSH
1710: LD_INT 0
1712: PPUSH
1713: CALL_OW 50
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1717: LD_EXP 5
1721: PPUSH
1722: LD_VAR 0 4
1726: PUSH
1727: LD_INT 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 250
1735: PPUSH
1736: LD_VAR 0 4
1740: PUSH
1741: LD_INT 1
1743: ARRAY
1744: PPUSH
1745: CALL_OW 251
1749: PPUSH
1750: LD_INT 35
1752: PPUSH
1753: LD_INT 0
1755: PPUSH
1756: CALL_OW 50
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1760: LD_EXP 6
1764: PPUSH
1765: LD_VAR 0 4
1769: PUSH
1770: LD_INT 1
1772: ARRAY
1773: PPUSH
1774: CALL_OW 250
1778: PPUSH
1779: LD_VAR 0 4
1783: PUSH
1784: LD_INT 1
1786: ARRAY
1787: PPUSH
1788: CALL_OW 251
1792: PPUSH
1793: LD_INT 35
1795: PPUSH
1796: LD_INT 0
1798: PPUSH
1799: CALL_OW 50
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1803: LD_EXP 7
1807: PPUSH
1808: LD_VAR 0 4
1812: PUSH
1813: LD_INT 1
1815: ARRAY
1816: PPUSH
1817: CALL_OW 250
1821: PPUSH
1822: LD_VAR 0 4
1826: PUSH
1827: LD_INT 1
1829: ARRAY
1830: PPUSH
1831: CALL_OW 251
1835: PPUSH
1836: LD_INT 35
1838: PPUSH
1839: LD_INT 0
1841: PPUSH
1842: CALL_OW 50
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1846: LD_EXP 8
1850: PPUSH
1851: LD_VAR 0 4
1855: PUSH
1856: LD_INT 1
1858: ARRAY
1859: PPUSH
1860: CALL_OW 250
1864: PPUSH
1865: LD_VAR 0 4
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: CALL_OW 251
1878: PPUSH
1879: LD_INT 35
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 50
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1889: LD_EXP 9
1893: PPUSH
1894: LD_VAR 0 4
1898: PUSH
1899: LD_INT 1
1901: ARRAY
1902: PPUSH
1903: CALL_OW 250
1907: PPUSH
1908: LD_VAR 0 4
1912: PUSH
1913: LD_INT 1
1915: ARRAY
1916: PPUSH
1917: CALL_OW 251
1921: PPUSH
1922: LD_INT 35
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 50
// PlaceUnitXYR ( Houten , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1932: LD_EXP 10
1936: PPUSH
1937: LD_VAR 0 4
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: CALL_OW 250
1950: PPUSH
1951: LD_VAR 0 4
1955: PUSH
1956: LD_INT 1
1958: ARRAY
1959: PPUSH
1960: CALL_OW 251
1964: PPUSH
1965: LD_INT 35
1967: PPUSH
1968: LD_INT 0
1970: PPUSH
1971: CALL_OW 50
// PlaceUnitXYR ( Cornel , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1975: LD_EXP 11
1979: PPUSH
1980: LD_VAR 0 4
1984: PUSH
1985: LD_INT 1
1987: ARRAY
1988: PPUSH
1989: CALL_OW 250
1993: PPUSH
1994: LD_VAR 0 4
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: PPUSH
2003: CALL_OW 251
2007: PPUSH
2008: LD_INT 35
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 50
// PlaceUnitXYR ( Gary , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
2018: LD_EXP 12
2022: PPUSH
2023: LD_VAR 0 4
2027: PUSH
2028: LD_INT 1
2030: ARRAY
2031: PPUSH
2032: CALL_OW 250
2036: PPUSH
2037: LD_VAR 0 4
2041: PUSH
2042: LD_INT 1
2044: ARRAY
2045: PPUSH
2046: CALL_OW 251
2050: PPUSH
2051: LD_INT 35
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 50
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
2061: LD_EXP 13
2065: PPUSH
2066: LD_VAR 0 4
2070: PUSH
2071: LD_INT 1
2073: ARRAY
2074: PPUSH
2075: CALL_OW 250
2079: PPUSH
2080: LD_VAR 0 4
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 251
2093: PPUSH
2094: LD_INT 35
2096: PPUSH
2097: LD_INT 0
2099: PPUSH
2100: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
2104: LD_EXP 14
2108: PPUSH
2109: LD_VAR 0 4
2113: PUSH
2114: LD_INT 1
2116: ARRAY
2117: PPUSH
2118: CALL_OW 250
2122: PPUSH
2123: LD_VAR 0 4
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: CALL_OW 251
2136: PPUSH
2137: LD_INT 35
2139: PPUSH
2140: LD_INT 0
2142: PPUSH
2143: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
2147: LD_VAR 0 4
2151: PUSH
2152: LD_INT 1
2154: ARRAY
2155: PPUSH
2156: LD_STRING epsilon
2158: PPUSH
2159: CALL_OW 500
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 1 , 3000 ) ;
2163: LD_VAR 0 4
2167: PUSH
2168: LD_INT 1
2170: ARRAY
2171: PPUSH
2172: CALL_OW 274
2176: PPUSH
2177: LD_INT 1
2179: PPUSH
2180: LD_INT 3000
2182: PPUSH
2183: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 2 , 500 ) ;
2187: LD_VAR 0 4
2191: PUSH
2192: LD_INT 1
2194: ARRAY
2195: PPUSH
2196: CALL_OW 274
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 500
2206: PPUSH
2207: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 3 , 200 ) ;
2211: LD_VAR 0 4
2215: PUSH
2216: LD_INT 1
2218: ARRAY
2219: PPUSH
2220: CALL_OW 274
2224: PPUSH
2225: LD_INT 3
2227: PPUSH
2228: LD_INT 200
2230: PPUSH
2231: CALL_OW 277
// SetClass ( JMM , 1 ) ;
2235: LD_EXP 1
2239: PPUSH
2240: LD_INT 1
2242: PPUSH
2243: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
2247: LD_ADDR_EXP 16
2251: PUSH
2252: LD_STRING 12_other_survivors
2254: PPUSH
2255: CALL_OW 31
2259: ST_TO_ADDR
// others11 = CreateCharacterSet ( 12_others ) ;
2260: LD_ADDR_EXP 17
2264: PUSH
2265: LD_STRING 12_others
2267: PPUSH
2268: CALL_OW 31
2272: ST_TO_ADDR
// for i in others11 do
2273: LD_ADDR_VAR 0 2
2277: PUSH
2278: LD_EXP 17
2282: PUSH
2283: FOR_IN
2284: IFFALSE 2331
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2286: LD_VAR 0 2
2290: PPUSH
2291: LD_VAR 0 4
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PPUSH
2300: CALL_OW 250
2304: PPUSH
2305: LD_VAR 0 4
2309: PUSH
2310: LD_INT 1
2312: ARRAY
2313: PPUSH
2314: CALL_OW 251
2318: PPUSH
2319: LD_INT 15
2321: PPUSH
2322: LD_INT 0
2324: PPUSH
2325: CALL_OW 50
2329: GO 2283
2331: POP
2332: POP
// for i in others12 do
2333: LD_ADDR_VAR 0 2
2337: PUSH
2338: LD_EXP 16
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2391
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 4
2355: PUSH
2356: LD_INT 1
2358: ARRAY
2359: PPUSH
2360: CALL_OW 250
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 251
2378: PPUSH
2379: LD_INT 15
2381: PPUSH
2382: LD_INT 0
2384: PPUSH
2385: CALL_OW 50
2389: GO 2343
2391: POP
2392: POP
// end ;
2393: LD_VAR 0 1
2397: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2398: LD_INT 0
2400: PPUSH
2401: PPUSH
2402: PPUSH
2403: PPUSH
2404: PPUSH
2405: PPUSH
2406: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2407: LD_INT 113
2409: PPUSH
2410: LD_INT 50
2412: PPUSH
2413: LD_INT 1
2415: PPUSH
2416: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2420: LD_INT 104
2422: PPUSH
2423: LD_INT 24
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2433: LD_INT 43
2435: PPUSH
2436: LD_INT 79
2438: PPUSH
2439: LD_INT 1
2441: PPUSH
2442: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2446: LD_INT 43
2448: PPUSH
2449: LD_INT 68
2451: PPUSH
2452: LD_INT 1
2454: PPUSH
2455: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2459: LD_INT 99
2461: PPUSH
2462: LD_INT 114
2464: PPUSH
2465: LD_INT 1
2467: PPUSH
2468: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2472: LD_INT 103
2474: PPUSH
2475: LD_INT 114
2477: PPUSH
2478: LD_INT 1
2480: PPUSH
2481: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2485: LD_INT 152
2487: PPUSH
2488: LD_INT 85
2490: PPUSH
2491: LD_INT 1
2493: PPUSH
2494: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2498: LD_INT 156
2500: PPUSH
2501: LD_INT 92
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2511: LD_ADDR_VAR 0 2
2515: PUSH
2516: LD_STRING 10_EpsilonBase
2518: PPUSH
2519: EMPTY
2520: PPUSH
2521: CALL_OW 30
2525: ST_TO_ADDR
// if not blist then
2526: LD_VAR 0 2
2530: NOT
2531: IFFALSE 2535
// exit ;
2533: GO 3685
// for i in blist do
2535: LD_ADDR_VAR 0 3
2539: PUSH
2540: LD_VAR 0 2
2544: PUSH
2545: FOR_IN
2546: IFFALSE 2586
// if i [ 1 ] = 0 or i [ 1 ] = 1 then
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 1
2555: ARRAY
2556: PUSH
2557: LD_INT 0
2559: EQUAL
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 1
2568: ARRAY
2569: PUSH
2570: LD_INT 1
2572: EQUAL
2573: OR
2574: IFFALSE 2584
// baseCorrect = 1 ;
2576: LD_ADDR_VAR 0 6
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
2584: GO 2545
2586: POP
2587: POP
// if baseCorrect = 0 then
2588: LD_VAR 0 6
2592: PUSH
2593: LD_INT 0
2595: EQUAL
2596: IFFALSE 3301
// begin uc_side = 1 ;
2598: LD_ADDR_OWVAR 20
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// uc_nation = 1 ;
2606: LD_ADDR_OWVAR 21
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// bc_level = 10 ;
2614: LD_ADDR_OWVAR 43
2618: PUSH
2619: LD_INT 10
2621: ST_TO_ADDR
// bc_type = b_warehouse ;
2622: LD_ADDR_OWVAR 42
2626: PUSH
2627: LD_INT 1
2629: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2630: LD_INT 99
2632: PPUSH
2633: LD_INT 24
2635: PPUSH
2636: LD_INT 2
2638: PPUSH
2639: CALL_OW 47
// bc_type = b_bunker ;
2643: LD_ADDR_OWVAR 42
2647: PUSH
2648: LD_INT 32
2650: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2651: LD_ADDR_VAR 0 7
2655: PUSH
2656: LD_INT 124
2658: PPUSH
2659: LD_INT 42
2661: PPUSH
2662: LD_INT 4
2664: PPUSH
2665: CALL_OW 47
2669: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2670: LD_VAR 0 7
2674: PPUSH
2675: LD_INT 4
2677: PUSH
2678: LD_INT 5
2680: PUSH
2681: LD_INT 6
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: LIST
2688: PUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 3
2694: PPUSH
2695: CALL_OW 12
2699: ARRAY
2700: PPUSH
2701: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2705: LD_ADDR_VAR 0 7
2709: PUSH
2710: LD_INT 111
2712: PPUSH
2713: LD_INT 16
2715: PPUSH
2716: LD_INT 4
2718: PPUSH
2719: CALL_OW 47
2723: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2724: LD_VAR 0 7
2728: PPUSH
2729: LD_INT 4
2731: PUSH
2732: LD_INT 5
2734: PUSH
2735: LD_INT 6
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: PUSH
2743: LD_INT 1
2745: PPUSH
2746: LD_INT 3
2748: PPUSH
2749: CALL_OW 12
2753: ARRAY
2754: PPUSH
2755: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2759: LD_ADDR_VAR 0 7
2763: PUSH
2764: LD_INT 113
2766: PPUSH
2767: LD_INT 21
2769: PPUSH
2770: LD_INT 4
2772: PPUSH
2773: CALL_OW 47
2777: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2778: LD_VAR 0 7
2782: PPUSH
2783: LD_INT 4
2785: PUSH
2786: LD_INT 5
2788: PUSH
2789: LD_INT 6
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: LIST
2796: PUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_INT 3
2802: PPUSH
2803: CALL_OW 12
2807: ARRAY
2808: PPUSH
2809: CALL_OW 431
// bc_type = 33 ;
2813: LD_ADDR_OWVAR 42
2817: PUSH
2818: LD_INT 33
2820: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2821: LD_ADDR_VAR 0 7
2825: PUSH
2826: LD_INT 95
2828: PPUSH
2829: LD_INT 41
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 47
2839: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2840: LD_VAR 0 7
2844: PPUSH
2845: LD_INT 4
2847: PUSH
2848: LD_INT 5
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 3
2864: PPUSH
2865: CALL_OW 12
2869: ARRAY
2870: PPUSH
2871: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2875: LD_ADDR_VAR 0 7
2879: PUSH
2880: LD_INT 97
2882: PPUSH
2883: LD_INT 48
2885: PPUSH
2886: LD_INT 1
2888: PPUSH
2889: CALL_OW 47
2893: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2894: LD_VAR 0 7
2898: PPUSH
2899: LD_INT 4
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 6
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 1
2915: PPUSH
2916: LD_INT 3
2918: PPUSH
2919: CALL_OW 12
2923: ARRAY
2924: PPUSH
2925: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2929: LD_ADDR_VAR 0 7
2933: PUSH
2934: LD_INT 86
2936: PPUSH
2937: LD_INT 19
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: CALL_OW 47
2947: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2948: LD_VAR 0 7
2952: PPUSH
2953: LD_INT 4
2955: PUSH
2956: LD_INT 5
2958: PUSH
2959: LD_INT 6
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 1
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 12
2977: ARRAY
2978: PPUSH
2979: CALL_OW 431
// bc_type = 30 ;
2983: LD_ADDR_OWVAR 42
2987: PUSH
2988: LD_INT 30
2990: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2991: LD_INT 104
2993: PPUSH
2994: LD_INT 24
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: CALL_OW 47
// bc_type = 29 ;
3004: LD_ADDR_OWVAR 42
3008: PUSH
3009: LD_INT 29
3011: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
3012: LD_INT 113
3014: PPUSH
3015: LD_INT 50
3017: PPUSH
3018: LD_INT 3
3020: PPUSH
3021: CALL_OW 47
// bc_type = 27 ;
3025: LD_ADDR_OWVAR 42
3029: PUSH
3030: LD_INT 27
3032: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
3033: LD_INT 98
3035: PPUSH
3036: LD_INT 26
3038: PPUSH
3039: LD_INT 2
3041: PPUSH
3042: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
3046: LD_INT 95
3048: PPUSH
3049: LD_INT 23
3051: PPUSH
3052: LD_INT 3
3054: PPUSH
3055: CALL_OW 47
// bc_type = 28 ;
3059: LD_ADDR_OWVAR 42
3063: PUSH
3064: LD_INT 28
3066: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
3067: LD_INT 107
3069: PPUSH
3070: LD_INT 32
3072: PPUSH
3073: LD_INT 1
3075: PPUSH
3076: CALL_OW 47
// bc_type = 3 ;
3080: LD_ADDR_OWVAR 42
3084: PUSH
3085: LD_INT 3
3087: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
3088: LD_INT 106
3090: PPUSH
3091: LD_INT 42
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: CALL_OW 47
// bc_type = 16 ;
3101: LD_ADDR_OWVAR 42
3105: PUSH
3106: LD_INT 16
3108: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
3109: LD_INT 109
3111: PPUSH
3112: LD_INT 45
3114: PPUSH
3115: LD_INT 5
3117: PPUSH
3118: CALL_OW 47
// bc_type = 17 ;
3122: LD_ADDR_OWVAR 42
3126: PUSH
3127: LD_INT 17
3129: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
3130: LD_INT 106
3132: PPUSH
3133: LD_INT 46
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL_OW 47
// bc_type = 19 ;
3143: LD_ADDR_OWVAR 42
3147: PUSH
3148: LD_INT 19
3150: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
3151: LD_INT 103
3153: PPUSH
3154: LD_INT 42
3156: PPUSH
3157: LD_INT 1
3159: PPUSH
3160: CALL_OW 47
// bc_type = 21 ;
3164: LD_ADDR_OWVAR 42
3168: PUSH
3169: LD_INT 21
3171: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
3172: LD_INT 110
3174: PPUSH
3175: LD_INT 42
3177: PPUSH
3178: LD_INT 4
3180: PPUSH
3181: CALL_OW 47
// bc_type = 5 ;
3185: LD_ADDR_OWVAR 42
3189: PUSH
3190: LD_INT 5
3192: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
3193: LD_INT 114
3195: PPUSH
3196: LD_INT 55
3198: PPUSH
3199: LD_INT 5
3201: PPUSH
3202: CALL_OW 47
// bc_type = 36 ;
3206: LD_ADDR_OWVAR 42
3210: PUSH
3211: LD_INT 36
3213: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
3214: LD_INT 96
3216: PPUSH
3217: LD_INT 28
3219: PPUSH
3220: LD_INT 2
3222: PPUSH
3223: CALL_OW 47
// bc_type = b_lab_full ;
3227: LD_ADDR_OWVAR 42
3231: PUSH
3232: LD_INT 8
3234: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3235: LD_ADDR_OWVAR 44
3239: PUSH
3240: LD_INT 15
3242: ST_TO_ADDR
// bc_kind2 = b_lab_siberium ;
3243: LD_ADDR_OWVAR 45
3247: PUSH
3248: LD_INT 11
3250: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
3251: LD_INT 116
3253: PPUSH
3254: LD_INT 38
3256: PPUSH
3257: LD_INT 4
3259: PPUSH
3260: CALL_OW 47
// bc_type = b_lab_full ;
3264: LD_ADDR_OWVAR 42
3268: PUSH
3269: LD_INT 8
3271: ST_TO_ADDR
// bc_kind1 = b_lab_weapon ;
3272: LD_ADDR_OWVAR 44
3276: PUSH
3277: LD_INT 10
3279: ST_TO_ADDR
// bc_kind2 = b_lab_computer ;
3280: LD_ADDR_OWVAR 45
3284: PUSH
3285: LD_INT 12
3287: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
3288: LD_INT 112
3290: PPUSH
3291: LD_INT 29
3293: PPUSH
3294: LD_INT 4
3296: PPUSH
3297: CALL_OW 47
// end ; if baseCorrect = 1 then
3301: LD_VAR 0 6
3305: PUSH
3306: LD_INT 1
3308: EQUAL
3309: IFFALSE 3506
// begin uc_side := 1 ;
3311: LD_ADDR_OWVAR 20
3315: PUSH
3316: LD_INT 1
3318: ST_TO_ADDR
// uc_nation := 1 ;
3319: LD_ADDR_OWVAR 21
3323: PUSH
3324: LD_INT 1
3326: ST_TO_ADDR
// for i in blist do
3327: LD_ADDR_VAR 0 3
3331: PUSH
3332: LD_VAR 0 2
3336: PUSH
3337: FOR_IN
3338: IFFALSE 3504
// begin bc_type := i [ 1 ] ;
3340: LD_ADDR_OWVAR 42
3344: PUSH
3345: LD_VAR 0 3
3349: PUSH
3350: LD_INT 1
3352: ARRAY
3353: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3354: LD_ADDR_OWVAR 43
3358: PUSH
3359: LD_VAR 0 3
3363: PUSH
3364: LD_INT 5
3366: ARRAY
3367: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3368: LD_VAR 0 3
3372: PUSH
3373: LD_INT 1
3375: ARRAY
3376: PUSH
3377: LD_INT 7
3379: PUSH
3380: LD_INT 8
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: IN
3387: IFFALSE 3417
// begin bc_kind1 := i [ 7 ] ;
3389: LD_ADDR_OWVAR 44
3393: PUSH
3394: LD_VAR 0 3
3398: PUSH
3399: LD_INT 7
3401: ARRAY
3402: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3403: LD_ADDR_OWVAR 45
3407: PUSH
3408: LD_VAR 0 3
3412: PUSH
3413: LD_INT 8
3415: ARRAY
3416: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3417: LD_ADDR_VAR 0 4
3421: PUSH
3422: LD_VAR 0 3
3426: PUSH
3427: LD_INT 2
3429: ARRAY
3430: PPUSH
3431: LD_VAR 0 3
3435: PUSH
3436: LD_INT 3
3438: ARRAY
3439: PPUSH
3440: LD_VAR 0 3
3444: PUSH
3445: LD_INT 4
3447: ARRAY
3448: PPUSH
3449: CALL_OW 47
3453: ST_TO_ADDR
// if GetBType ( b ) = b_bunker or GetBType ( b ) = b_turret then
3454: LD_VAR 0 4
3458: PPUSH
3459: CALL_OW 266
3463: PUSH
3464: LD_INT 32
3466: EQUAL
3467: PUSH
3468: LD_VAR 0 4
3472: PPUSH
3473: CALL_OW 266
3477: PUSH
3478: LD_INT 33
3480: EQUAL
3481: OR
3482: IFFALSE 3502
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
3484: LD_VAR 0 4
3488: PPUSH
3489: LD_VAR 0 3
3493: PUSH
3494: LD_INT 7
3496: ARRAY
3497: PPUSH
3498: CALL_OW 431
// end ; end ;
3502: GO 3337
3504: POP
3505: POP
// end ; uc_side := 1 ;
3506: LD_ADDR_OWVAR 20
3510: PUSH
3511: LD_INT 1
3513: ST_TO_ADDR
// uc_nation := 1 ;
3514: LD_ADDR_OWVAR 21
3518: PUSH
3519: LD_INT 1
3521: ST_TO_ADDR
// for i := 1 to 8 do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 8
3534: PUSH
3535: FOR_TO
3536: IFFALSE 3683
// begin vc_chassis := [ us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3538: LD_ADDR_OWVAR 37
3542: PUSH
3543: LD_INT 5
3545: PUSH
3546: LD_INT 3
3548: PUSH
3549: LD_INT 4
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 3
3562: PPUSH
3563: CALL_OW 12
3567: ARRAY
3568: ST_TO_ADDR
// vc_engine := engine_siberite ;
3569: LD_ADDR_OWVAR 39
3573: PUSH
3574: LD_INT 3
3576: ST_TO_ADDR
// vc_control := control_manual ;
3577: LD_ADDR_OWVAR 38
3581: PUSH
3582: LD_INT 1
3584: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_double_gun , us_laser ] [ i mod 6 + 1 ] ;
3585: LD_ADDR_OWVAR 40
3589: PUSH
3590: LD_INT 7
3592: PUSH
3593: LD_INT 9
3595: PUSH
3596: LD_INT 12
3598: PUSH
3599: LD_INT 13
3601: PUSH
3602: LD_INT 5
3604: PUSH
3605: LD_INT 9
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: PUSH
3616: LD_VAR 0 3
3620: PUSH
3621: LD_INT 6
3623: MOD
3624: PUSH
3625: LD_INT 1
3627: PLUS
3628: ARRAY
3629: ST_TO_ADDR
// un := CreateVehicle ;
3630: LD_ADDR_VAR 0 5
3634: PUSH
3635: CALL_OW 45
3639: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3640: LD_VAR 0 5
3644: PPUSH
3645: LD_INT 0
3647: PPUSH
3648: LD_INT 5
3650: PPUSH
3651: CALL_OW 12
3655: PPUSH
3656: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3660: LD_VAR 0 5
3664: PPUSH
3665: LD_INT 78
3667: PPUSH
3668: LD_INT 31
3670: PPUSH
3671: LD_INT 8
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 50
// end ;
3681: GO 3535
3683: POP
3684: POP
// end ;
3685: LD_VAR 0 1
3689: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3690: LD_INT 0
3692: PPUSH
3693: PPUSH
3694: PPUSH
3695: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Stevens ] < 6 then
3696: LD_INT 22
3698: PUSH
3699: LD_INT 1
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 21
3708: PUSH
3709: LD_INT 1
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: PUSH
3725: LD_EXP 1
3729: PUSH
3730: LD_EXP 3
3734: PUSH
3735: LD_EXP 4
3739: PUSH
3740: LD_EXP 5
3744: PUSH
3745: LD_EXP 6
3749: PUSH
3750: LD_EXP 7
3754: PUSH
3755: LD_EXP 8
3759: PUSH
3760: LD_EXP 9
3764: PUSH
3765: LD_EXP 10
3769: PUSH
3770: LD_EXP 11
3774: PUSH
3775: LD_EXP 12
3779: PUSH
3780: LD_EXP 13
3784: PUSH
3785: LD_EXP 14
3789: PUSH
3790: LD_EXP 15
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 6
3813: LESS
3814: DIFF
3815: IFFALSE 4038
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_INT 22
3824: PUSH
3825: LD_INT 1
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 2
3834: PUSH
3835: LD_INT 30
3837: PUSH
3838: LD_INT 0
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 30
3847: PUSH
3848: LD_INT 1
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: EMPTY
3856: LIST
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PPUSH
3864: CALL_OW 69
3868: ST_TO_ADDR
// uc_side = 1 ;
3869: LD_ADDR_OWVAR 20
3873: PUSH
3874: LD_INT 1
3876: ST_TO_ADDR
// uc_nation = 1 ;
3877: LD_ADDR_OWVAR 21
3881: PUSH
3882: LD_INT 1
3884: ST_TO_ADDR
// for i = 1 to 6 do
3885: LD_ADDR_VAR 0 2
3889: PUSH
3890: DOUBLE
3891: LD_INT 1
3893: DEC
3894: ST_TO_ADDR
3895: LD_INT 6
3897: PUSH
3898: FOR_TO
3899: IFFALSE 4036
// begin hc_gallery =  ;
3901: LD_ADDR_OWVAR 33
3905: PUSH
3906: LD_STRING 
3908: ST_TO_ADDR
// hc_name =  ;
3909: LD_ADDR_OWVAR 26
3913: PUSH
3914: LD_STRING 
3916: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3917: LD_INT 0
3919: PPUSH
3920: LD_INT 1
3922: PUSH
3923: LD_INT 2
3925: PUSH
3926: LD_INT 3
3928: PUSH
3929: LD_INT 4
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: PUSH
3938: LD_INT 1
3940: PPUSH
3941: LD_INT 4
3943: PPUSH
3944: CALL_OW 12
3948: ARRAY
3949: PPUSH
3950: LD_INT 5
3952: PPUSH
3953: LD_INT 8
3955: PPUSH
3956: CALL_OW 12
3960: PPUSH
3961: CALL_OW 380
// un = CreateHuman ;
3965: LD_ADDR_VAR 0 3
3969: PUSH
3970: CALL_OW 44
3974: ST_TO_ADDR
// randomsEpsilon = randomsEpsilon ^ un ;
3975: LD_ADDR_EXP 18
3979: PUSH
3980: LD_EXP 18
3984: PUSH
3985: LD_VAR 0 3
3989: ADD
3990: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3991: LD_VAR 0 3
3995: PPUSH
3996: LD_VAR 0 4
4000: PUSH
4001: LD_INT 1
4003: ARRAY
4004: PPUSH
4005: CALL_OW 250
4009: PPUSH
4010: LD_VAR 0 4
4014: PUSH
4015: LD_INT 1
4017: ARRAY
4018: PPUSH
4019: CALL_OW 251
4023: PPUSH
4024: LD_INT 15
4026: PPUSH
4027: LD_INT 0
4029: PPUSH
4030: CALL_OW 50
// end ;
4034: GO 3898
4036: POP
4037: POP
// end ; end ; end_of_file
4038: LD_VAR 0 1
4042: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4043: LD_INT 0
4045: PPUSH
4046: PPUSH
// if exist_mode then
4047: LD_VAR 0 2
4051: IFFALSE 4198
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
4053: LD_EXP 21
4057: PUSH
4058: LD_VAR 0 1
4062: STR
4063: PPUSH
4064: CALL_OW 28
4068: PUSH
4069: LD_INT 1
4071: EQUAL
4072: IFFALSE 4097
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4074: LD_ADDR_VAR 0 4
4078: PUSH
4079: LD_EXP 21
4083: PUSH
4084: LD_VAR 0 1
4088: STR
4089: PPUSH
4090: CALL_OW 34
4094: ST_TO_ADDR
// end else
4095: GO 4196
// begin if TestCharacters ( 11_ & ident ) = true then
4097: LD_STRING 11_
4099: PUSH
4100: LD_VAR 0 1
4104: STR
4105: PPUSH
4106: CALL_OW 28
4110: PUSH
4111: LD_INT 1
4113: EQUAL
4114: IFFALSE 4137
// begin unit := CreateCharacter ( 11_ & ident ) ;
4116: LD_ADDR_VAR 0 4
4120: PUSH
4121: LD_STRING 11_
4123: PUSH
4124: LD_VAR 0 1
4128: STR
4129: PPUSH
4130: CALL_OW 34
4134: ST_TO_ADDR
// end else
4135: GO 4196
// begin if TestCharacters ( 10c_ & ident ) = true then
4137: LD_STRING 10c_
4139: PUSH
4140: LD_VAR 0 1
4144: STR
4145: PPUSH
4146: CALL_OW 28
4150: PUSH
4151: LD_INT 1
4153: EQUAL
4154: IFFALSE 4177
// unit := CreateCharacter ( 10c_ & ident ) else
4156: LD_ADDR_VAR 0 4
4160: PUSH
4161: LD_STRING 10c_
4163: PUSH
4164: LD_VAR 0 1
4168: STR
4169: PPUSH
4170: CALL_OW 34
4174: ST_TO_ADDR
4175: GO 4196
// unit := CreateCharacter ( 10_ & ident ) ;
4177: LD_ADDR_VAR 0 4
4181: PUSH
4182: LD_STRING 10_
4184: PUSH
4185: LD_VAR 0 1
4189: STR
4190: PPUSH
4191: CALL_OW 34
4195: ST_TO_ADDR
// end ; end ; end else
4196: GO 4213
// begin unit := NewCharacter ( ident ) ;
4198: LD_ADDR_VAR 0 4
4202: PUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: CALL_OW 25
4212: ST_TO_ADDR
// end ; result := unit ;
4213: LD_ADDR_VAR 0 3
4217: PUSH
4218: LD_VAR 0 4
4222: ST_TO_ADDR
// end ;
4223: LD_VAR 0 3
4227: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4228: LD_INT 0
4230: PPUSH
// if unit in selectedTab then
4231: LD_VAR 0 1
4235: PUSH
4236: LD_VAR 0 3
4240: IN
4241: IFFALSE 4263
// SaveCharacters ( unit , 13c_ & unitString ) else
4243: LD_VAR 0 1
4247: PPUSH
4248: LD_STRING 13c_
4250: PUSH
4251: LD_VAR 0 2
4255: STR
4256: PPUSH
4257: CALL_OW 38
4261: GO 4281
// SaveCharacters ( unit , 13s_ & unitString ) ;
4263: LD_VAR 0 1
4267: PPUSH
4268: LD_STRING 13s_
4270: PUSH
4271: LD_VAR 0 2
4275: STR
4276: PPUSH
4277: CALL_OW 38
// end ;
4281: LD_VAR 0 4
4285: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4286: LD_INT 0
4288: PPUSH
4289: PPUSH
4290: PPUSH
4291: PPUSH
// selected := [ ] ;
4292: LD_ADDR_EXP 22
4296: PUSH
4297: EMPTY
4298: ST_TO_ADDR
// othersSelect := [ ] ;
4299: LD_ADDR_EXP 23
4303: PUSH
4304: EMPTY
4305: ST_TO_ADDR
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4306: LD_ADDR_VAR 0 3
4310: PUSH
4311: LD_EXP 3
4315: PUSH
4316: LD_EXP 4
4320: PUSH
4321: LD_EXP 5
4325: PUSH
4326: LD_EXP 6
4330: PUSH
4331: LD_EXP 8
4335: PUSH
4336: LD_EXP 9
4340: PUSH
4341: LD_EXP 10
4345: PUSH
4346: LD_EXP 11
4350: PUSH
4351: LD_EXP 12
4355: PUSH
4356: LD_EXP 13
4360: PUSH
4361: LD_EXP 14
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: ST_TO_ADDR
// tmp = tmp ^ others11 ;
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: LD_VAR 0 3
4388: PUSH
4389: LD_EXP 17
4393: ADD
4394: ST_TO_ADDR
// tmp = tmp ^ others12 ;
4395: LD_ADDR_VAR 0 3
4399: PUSH
4400: LD_VAR 0 3
4404: PUSH
4405: LD_EXP 16
4409: ADD
4410: ST_TO_ADDR
// tmp = tmp ^ randomsEpsilon ;
4411: LD_ADDR_VAR 0 3
4415: PUSH
4416: LD_VAR 0 3
4420: PUSH
4421: LD_EXP 18
4425: ADD
4426: ST_TO_ADDR
// for i in tmp do
4427: LD_ADDR_VAR 0 2
4431: PUSH
4432: LD_VAR 0 3
4436: PUSH
4437: FOR_IN
4438: IFFALSE 4477
// if GetClass ( i ) = 8 then
4440: LD_VAR 0 2
4444: PPUSH
4445: CALL_OW 257
4449: PUSH
4450: LD_INT 8
4452: EQUAL
4453: IFFALSE 4475
// SetClass ( i , rand ( 1 , 4 ) ) ;
4455: LD_VAR 0 2
4459: PPUSH
4460: LD_INT 1
4462: PPUSH
4463: LD_INT 4
4465: PPUSH
4466: CALL_OW 12
4470: PPUSH
4471: CALL_OW 336
4475: GO 4437
4477: POP
4478: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4479: LD_ADDR_EXP 22
4483: PUSH
4484: LD_STRING 1
4486: PPUSH
4487: LD_INT 6
4489: PPUSH
4490: LD_INT 6
4492: PPUSH
4493: LD_INT -5
4495: PUSH
4496: LD_EXP 1
4500: PUSH
4501: LD_EXP 15
4505: PUSH
4506: LD_INT -2
4508: PUSH
4509: LD_INT -3
4511: PUSH
4512: LD_INT -5
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: PUSH
4523: LD_VAR 0 3
4527: ADD
4528: PUSH
4529: LD_INT -6
4531: PUSH
4532: LD_INT -4
4534: PUSH
4535: LD_EXP 2
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: LIST
4544: ADD
4545: PPUSH
4546: LD_INT 1
4548: PUSH
4549: LD_INT 0
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 2
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 3
4568: PUSH
4569: LD_INT 0
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 4
4578: PUSH
4579: LD_INT 2
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PUSH
4586: LD_INT 5
4588: PUSH
4589: LD_INT 0
4591: PUSH
4592: LD_INT 2
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: PPUSH
4607: CALL_OW 42
4611: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4612: LD_ADDR_EXP 23
4616: PUSH
4617: LD_EXP 22
4621: PUSH
4622: LD_EXP 3
4626: PUSH
4627: LD_EXP 4
4631: PUSH
4632: LD_EXP 5
4636: PUSH
4637: LD_EXP 6
4641: PUSH
4642: LD_EXP 7
4646: PUSH
4647: LD_EXP 8
4651: PUSH
4652: LD_EXP 9
4656: PUSH
4657: LD_EXP 10
4661: PUSH
4662: LD_EXP 11
4666: PUSH
4667: LD_EXP 12
4671: PUSH
4672: LD_EXP 13
4676: PUSH
4677: LD_EXP 14
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: DIFF
4696: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4697: LD_ADDR_VAR 0 4
4701: PUSH
4702: LD_VAR 0 3
4706: PUSH
4707: LD_EXP 22
4711: DIFF
4712: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4713: LD_ADDR_VAR 0 4
4717: PUSH
4718: LD_VAR 0 4
4722: PUSH
4723: LD_EXP 3
4727: PUSH
4728: LD_EXP 4
4732: PUSH
4733: LD_EXP 5
4737: PUSH
4738: LD_EXP 6
4742: PUSH
4743: LD_EXP 7
4747: PUSH
4748: LD_EXP 8
4752: PUSH
4753: LD_EXP 9
4757: PUSH
4758: LD_EXP 10
4762: PUSH
4763: LD_EXP 11
4767: PUSH
4768: LD_EXP 12
4772: PUSH
4773: LD_EXP 13
4777: PUSH
4778: LD_EXP 14
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: DIFF
4797: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4798: LD_VAR 0 4
4802: PPUSH
4803: LD_STRING 13s_others
4805: PPUSH
4806: CALL_OW 38
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4810: LD_INT 22
4812: PUSH
4813: LD_INT 1
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PUSH
4820: LD_INT 21
4822: PUSH
4823: LD_INT 1
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PPUSH
4834: CALL_OW 69
4838: PPUSH
4839: LD_INT 4
4841: PPUSH
4842: CALL_OW 235
// SetSide ( selected , 1 ) ;
4846: LD_EXP 22
4850: PPUSH
4851: LD_INT 1
4853: PPUSH
4854: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
4858: LD_EXP 1
4862: PUSH
4863: LD_EXP 15
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PPUSH
4872: LD_INT 1
4874: PPUSH
4875: CALL_OW 235
// end ;
4879: LD_VAR 0 1
4883: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
4884: LD_INT 0
4886: PPUSH
4887: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
4888: LD_ADDR_VAR 0 2
4892: PUSH
4893: LD_VAR 0 1
4897: PPUSH
4898: LD_INT 1
4900: PPUSH
4901: CALL_OW 289
4905: PUSH
4906: LD_VAR 0 1
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 289
4918: PUSH
4919: LD_VAR 0 1
4923: PPUSH
4924: LD_INT 3
4926: PPUSH
4927: CALL_OW 289
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: LIST
4936: ST_TO_ADDR
// end ; end_of_file
4937: LD_VAR 0 2
4941: RET
// on Command ( comandid ) do var i ;
4942: LD_INT 0
4944: PPUSH
// begin if comandid = 65 then
4945: LD_VAR 0 1
4949: PUSH
4950: LD_INT 65
4952: EQUAL
4953: IFFALSE 4994
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4955: LD_ADDR_VAR 0 2
4959: PUSH
4960: LD_INT 22
4962: PUSH
4963: LD_INT 1
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: PPUSH
4973: CALL_OW 69
4977: PUSH
4978: FOR_IN
4979: IFFALSE 4992
// ComStop ( i ) ;
4981: LD_VAR 0 2
4985: PPUSH
4986: CALL_OW 141
4990: GO 4978
4992: POP
4993: POP
// end ;
4994: PPOPN 2
4996: END
// on UnitDestroyed ( un ) do begin if un = JMM then
4997: LD_VAR 0 1
5001: PUSH
5002: LD_EXP 1
5006: EQUAL
5007: IFFALSE 5016
// YouLost ( JMM ) ;
5009: LD_STRING JMM
5011: PPUSH
5012: CALL_OW 104
// end ;
5016: PPOPN 1
5018: END
