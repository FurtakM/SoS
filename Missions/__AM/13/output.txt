// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 20
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 21
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 19
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 911 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 22
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2084 0 0
// PrepareHeroes ;
  82: CALL 1093 0 0
// PrepareRandoms ;
  86: CALL 3457 0 0
// Action ;
  90: CALL 5264 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: IFFALSE 205
 132: PUSH
 133: LD_INT 2
 135: PPUSH
 136: LD_INT 22
 138: PUSH
 139: LD_INT 1
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: PUSH
 146: LD_INT 21
 148: PUSH
 149: LD_INT 2
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: PUSH
 156: LD_INT 32
 158: PUSH
 159: LD_INT 3
 161: PUSH
 162: EMPTY
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 33
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: EMPTY
 173: LIST
 174: LIST
 175: PUSH
 176: LD_INT 3
 178: PUSH
 179: LD_INT 58
 181: PUSH
 182: EMPTY
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: PPUSH
 196: CALL_OW 70
 200: PUSH
 201: LD_INT 8
 203: EQUAL
 204: AND
 205: IFFALSE 808
 207: GO 209
 209: DISABLE
 210: LD_INT 0
 212: PPUSH
 213: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 21
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PUSH
 227: LD_INT 33
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: PUSH
 237: LD_INT 3
 239: PUSH
 240: LD_INT 58
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PPUSH
 255: CALL_OW 70
 259: IFFALSE 547
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 261: LD_ADDR_VAR 0 1
 265: PUSH
 266: LD_INT 2
 268: PPUSH
 269: LD_INT 21
 271: PUSH
 272: LD_INT 2
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 33
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: LD_INT 3
 291: PUSH
 292: LD_INT 58
 294: PUSH
 295: EMPTY
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 70
 311: PUSH
 312: FOR_IN
 313: IFFALSE 533
// begin cargoType := GetCargoType ( i ) ;
 315: LD_ADDR_VAR 0 2
 319: PUSH
 320: LD_VAR 0 1
 324: PPUSH
 325: CALL_OW 288
 329: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 330: LD_VAR 0 1
 334: PPUSH
 335: CALL_OW 264
 339: PUSH
 340: LD_INT 12
 342: EQUAL
 343: IFFALSE 450
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 345: LD_ADDR_EXP 20
 349: PUSH
 350: LD_EXP 20
 354: PPUSH
 355: LD_EXP 20
 359: PUSH
 360: LD_INT 1
 362: PLUS
 363: PPUSH
 364: LD_VAR 0 1
 368: PPUSH
 369: CALL_OW 248
 373: PUSH
 374: LD_VAR 0 1
 378: PPUSH
 379: CALL_OW 265
 383: PUSH
 384: LD_VAR 0 1
 388: PPUSH
 389: CALL_OW 262
 393: PUSH
 394: LD_VAR 0 1
 398: PPUSH
 399: CALL_OW 263
 403: PUSH
 404: LD_VAR 0 1
 408: PPUSH
 409: CALL_OW 264
 413: PUSH
 414: LD_VAR 0 2
 418: PUSH
 419: LD_VAR 0 1
 423: PPUSH
 424: LD_VAR 0 2
 428: PPUSH
 429: CALL_OW 289
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 1
 447: ST_TO_ADDR
 448: GO 531
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 450: LD_ADDR_EXP 20
 454: PUSH
 455: LD_EXP 20
 459: PPUSH
 460: LD_EXP 20
 464: PUSH
 465: LD_INT 1
 467: PLUS
 468: PPUSH
 469: LD_VAR 0 1
 473: PPUSH
 474: CALL_OW 248
 478: PUSH
 479: LD_VAR 0 1
 483: PPUSH
 484: CALL_OW 265
 488: PUSH
 489: LD_VAR 0 1
 493: PPUSH
 494: CALL_OW 262
 498: PUSH
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 263
 508: PUSH
 509: LD_VAR 0 1
 513: PPUSH
 514: CALL_OW 264
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: PPUSH
 526: CALL_OW 1
 530: ST_TO_ADDR
// end ;
 531: GO 312
 533: POP
 534: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 535: LD_EXP 20
 539: PPUSH
 540: LD_STRING 13_VehiclesIn13_1
 542: PPUSH
 543: CALL_OW 39
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 547: LD_EXP 24
 551: PPUSH
 552: LD_STRING 13c_others
 554: PPUSH
 555: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 559: LD_EXP 1
 563: PPUSH
 564: LD_STRING 13c_JMM
 566: PPUSH
 567: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 571: LD_EXP 16
 575: PPUSH
 576: LD_STRING 13c_Stevens
 578: PPUSH
 579: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
 583: LD_STRING enableBioCharacter(BIO_HUGH)
 585: PPUSH
 586: CALL_OW 559
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 590: LD_EXP 3
 594: PPUSH
 595: LD_STRING Lisa
 597: PPUSH
 598: LD_EXP 23
 602: PPUSH
 603: CALL 4253 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 607: LD_EXP 8
 611: PPUSH
 612: LD_STRING Brown
 614: PPUSH
 615: LD_EXP 23
 619: PPUSH
 620: CALL 4253 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 624: LD_EXP 4
 628: PPUSH
 629: LD_STRING Donaldson
 631: PPUSH
 632: LD_EXP 23
 636: PPUSH
 637: CALL 4253 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 641: LD_EXP 5
 645: PPUSH
 646: LD_STRING Bobby
 648: PPUSH
 649: LD_EXP 23
 653: PPUSH
 654: CALL 4253 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 658: LD_EXP 6
 662: PPUSH
 663: LD_STRING Cyrus
 665: PPUSH
 666: LD_EXP 23
 670: PPUSH
 671: CALL 4253 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 675: LD_EXP 7
 679: PPUSH
 680: LD_STRING Denis
 682: PPUSH
 683: LD_EXP 23
 687: PPUSH
 688: CALL 4253 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 692: LD_EXP 9
 696: PPUSH
 697: LD_STRING Gladstone
 699: PPUSH
 700: LD_EXP 23
 704: PPUSH
 705: CALL 4253 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 709: LD_EXP 10
 713: PPUSH
 714: LD_STRING Houten
 716: PPUSH
 717: LD_EXP 23
 721: PPUSH
 722: CALL 4253 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 726: LD_EXP 11
 730: PPUSH
 731: LD_STRING Cornel
 733: PPUSH
 734: LD_EXP 23
 738: PPUSH
 739: CALL 4253 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 743: LD_EXP 12
 747: PPUSH
 748: LD_STRING Gary
 750: PPUSH
 751: LD_EXP 23
 755: PPUSH
 756: CALL 4253 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 760: LD_EXP 13
 764: PPUSH
 765: LD_STRING Frank
 767: PPUSH
 768: LD_EXP 23
 772: PPUSH
 773: CALL 4253 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 777: LD_EXP 14
 781: PPUSH
 782: LD_STRING Kikuchi
 784: PPUSH
 785: LD_EXP 23
 789: PPUSH
 790: CALL 4253 0 3
// SaveCargos ;
 794: CALL 811 0 0
// ChangeMap ( 13 , %_cont ) ;
 798: LD_INT 13
 800: PPUSH
 801: LD_STRING %_cont
 803: PPUSH
 804: CALL_OW 340
// end ;
 808: PPOPN 2
 810: END
// export function SaveCargos ; var i ; begin
 811: LD_INT 0
 813: PPUSH
 814: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 815: LD_ADDR_VAR 0 2
 819: PUSH
 820: LD_INT 2
 822: PPUSH
 823: LD_INT 22
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 33
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: LD_INT 34
 845: PUSH
 846: LD_INT 12
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: PPUSH
 858: CALL_OW 70
 862: PUSH
 863: FOR_IN
 864: IFFALSE 892
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 866: LD_ADDR_EXP 21
 870: PUSH
 871: LD_EXP 21
 875: PUSH
 876: LD_VAR 0 2
 880: PPUSH
 881: CALL 69924 0 1
 885: PUSH
 886: EMPTY
 887: LIST
 888: ADD
 889: ST_TO_ADDR
 890: GO 863
 892: POP
 893: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 894: LD_EXP 21
 898: PPUSH
 899: LD_STRING 13_ResourcesInCargo13_1
 901: PPUSH
 902: CALL_OW 39
// end ;
 906: LD_VAR 0 1
 910: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
 917: PPUSH
 918: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 919: LD_ADDR_VAR 0 2
 923: PUSH
 924: LD_STRING 10_EpsilonEnv
 926: PPUSH
 927: EMPTY
 928: PPUSH
 929: CALL_OW 30
 933: ST_TO_ADDR
// if not tmp then
 934: LD_VAR 0 2
 938: NOT
 939: IFFALSE 943
// exit ;
 941: GO 1088
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_INT 1
 950: PPUSH
 951: CALL_OW 353
 955: ST_TO_ADDR
// if not list then
 956: LD_VAR 0 3
 960: NOT
 961: IFFALSE 965
// exit ;
 963: GO 1088
// for i in list do
 965: LD_ADDR_VAR 0 4
 969: PUSH
 970: LD_VAR 0 3
 974: PUSH
 975: FOR_IN
 976: IFFALSE 1086
// begin exist := false ;
 978: LD_ADDR_VAR 0 6
 982: PUSH
 983: LD_INT 0
 985: ST_TO_ADDR
// for j in tmp do
 986: LD_ADDR_VAR 0 5
 990: PUSH
 991: LD_VAR 0 2
 995: PUSH
 996: FOR_IN
 997: IFFALSE 1053
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 999: LD_VAR 0 4
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: PUSH
1008: LD_VAR 0 5
1012: PUSH
1013: LD_INT 1
1015: ARRAY
1016: EQUAL
1017: IFFALSE 1039
1019: PUSH
1020: LD_VAR 0 4
1024: PUSH
1025: LD_INT 2
1027: ARRAY
1028: PUSH
1029: LD_VAR 0 5
1033: PUSH
1034: LD_INT 2
1036: ARRAY
1037: EQUAL
1038: AND
1039: IFFALSE 1051
// begin exist := true ;
1041: LD_ADDR_VAR 0 6
1045: PUSH
1046: LD_INT 1
1048: ST_TO_ADDR
// break ;
1049: GO 1053
// end ;
1051: GO 996
1053: POP
1054: POP
// if not exist then
1055: LD_VAR 0 6
1059: NOT
1060: IFFALSE 1084
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1062: LD_VAR 0 4
1066: PUSH
1067: LD_INT 1
1069: ARRAY
1070: PPUSH
1071: LD_VAR 0 4
1075: PUSH
1076: LD_INT 2
1078: ARRAY
1079: PPUSH
1080: CALL_OW 347
// end ;
1084: GO 975
1086: POP
1087: POP
// end ; end_of_file
1088: LD_VAR 0 1
1092: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1093: LD_INT 0
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
1099: PPUSH
1100: PPUSH
1101: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: LD_INT 22
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: LD_INT 23
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 2
1129: PUSH
1130: LD_INT 30
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 30
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PPUSH
1160: CALL_OW 69
1164: ST_TO_ADDR
// if tmp then
1165: LD_VAR 0 4
1169: IFFALSE 1291
// begin x := GetX ( tmp [ 1 ] ) ;
1171: LD_ADDR_VAR 0 5
1175: PUSH
1176: LD_VAR 0 4
1180: PUSH
1181: LD_INT 1
1183: ARRAY
1184: PPUSH
1185: CALL_OW 250
1189: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_VAR 0 4
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1209: LD_VAR 0 4
1213: PUSH
1214: LD_INT 1
1216: ARRAY
1217: PPUSH
1218: LD_STRING epsilon
1220: PPUSH
1221: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1225: LD_ADDR_VAR 0 7
1229: PUSH
1230: LD_VAR 0 4
1234: PUSH
1235: LD_INT 1
1237: ARRAY
1238: PPUSH
1239: CALL_OW 274
1243: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1244: LD_VAR 0 7
1248: PPUSH
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 3000
1254: PPUSH
1255: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1259: LD_VAR 0 7
1263: PPUSH
1264: LD_INT 2
1266: PPUSH
1267: LD_INT 500
1269: PPUSH
1270: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1274: LD_VAR 0 7
1278: PPUSH
1279: LD_INT 3
1281: PPUSH
1282: LD_INT 200
1284: PPUSH
1285: CALL_OW 277
// end else
1289: GO 1307
// begin x := 104 ;
1291: LD_ADDR_VAR 0 5
1295: PUSH
1296: LD_INT 104
1298: ST_TO_ADDR
// y := 32 ;
1299: LD_ADDR_VAR 0 6
1303: PUSH
1304: LD_INT 32
1306: ST_TO_ADDR
// end ; uc_side := 1 ;
1307: LD_ADDR_OWVAR 20
1311: PUSH
1312: LD_INT 1
1314: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1315: LD_ADDR_EXP 1
1319: PUSH
1320: LD_STRING JMM
1322: PPUSH
1323: LD_INT 1
1325: PPUSH
1326: CALL 3727 0 2
1330: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1331: LD_ADDR_EXP 3
1335: PUSH
1336: LD_STRING Lisa
1338: PPUSH
1339: LD_INT 1
1341: PPUSH
1342: CALL 3727 0 2
1346: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1347: LD_ADDR_EXP 4
1351: PUSH
1352: LD_STRING Donaldson
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: CALL 3727 0 2
1362: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1363: LD_ADDR_EXP 5
1367: PUSH
1368: LD_STRING Bobby
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: CALL 3727 0 2
1378: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1379: LD_ADDR_EXP 6
1383: PUSH
1384: LD_STRING Cyrus
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 3727 0 2
1394: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1395: LD_ADDR_EXP 7
1399: PUSH
1400: LD_STRING Denis
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: CALL 3727 0 2
1410: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1411: LD_ADDR_EXP 8
1415: PUSH
1416: LD_STRING Brown
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: CALL 3727 0 2
1426: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1427: LD_ADDR_EXP 9
1431: PUSH
1432: LD_STRING Gladstone
1434: PPUSH
1435: LD_INT 1
1437: PPUSH
1438: CALL 3727 0 2
1442: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1443: LD_ADDR_EXP 10
1447: PUSH
1448: LD_STRING Houten
1450: PPUSH
1451: LD_INT 1
1453: PPUSH
1454: CALL 3727 0 2
1458: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1459: LD_ADDR_EXP 11
1463: PUSH
1464: LD_STRING Cornell
1466: PPUSH
1467: LD_INT 1
1469: PPUSH
1470: CALL 3727 0 2
1474: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1475: LD_ADDR_EXP 12
1479: PUSH
1480: LD_STRING Gary
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: CALL 3727 0 2
1490: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1491: LD_ADDR_EXP 13
1495: PUSH
1496: LD_STRING Frank
1498: PPUSH
1499: LD_INT 1
1501: PPUSH
1502: CALL 3727 0 2
1506: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1507: LD_ADDR_EXP 14
1511: PUSH
1512: LD_STRING Kikuchi
1514: PPUSH
1515: LD_INT 1
1517: PPUSH
1518: CALL 3727 0 2
1522: ST_TO_ADDR
// DeltaDoctor := PrepareUnit2 ( DeltaDoctor , true ) ;
1523: LD_ADDR_EXP 15
1527: PUSH
1528: LD_STRING DeltaDoctor
1530: PPUSH
1531: LD_INT 1
1533: PPUSH
1534: CALL 3727 0 2
1538: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1539: LD_ADDR_EXP 16
1543: PUSH
1544: LD_STRING Stevens
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: CALL 3727 0 2
1554: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1555: LD_ADDR_EXP 2
1559: PUSH
1560: LD_STRING Powell
1562: PPUSH
1563: LD_INT 0
1565: PPUSH
1566: CALL 3727 0 2
1570: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1571: LD_EXP 1
1575: PPUSH
1576: LD_VAR 0 5
1580: PPUSH
1581: LD_VAR 0 6
1585: PPUSH
1586: LD_INT 4
1588: PPUSH
1589: LD_INT 0
1591: PPUSH
1592: CALL 3900 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1596: LD_EXP 16
1600: PPUSH
1601: LD_VAR 0 5
1605: PPUSH
1606: LD_VAR 0 6
1610: PPUSH
1611: LD_INT 4
1613: PPUSH
1614: LD_INT 0
1616: PPUSH
1617: CALL 3900 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1621: LD_EXP 3
1625: PPUSH
1626: LD_VAR 0 5
1630: PPUSH
1631: LD_VAR 0 6
1635: PPUSH
1636: LD_INT 35
1638: PPUSH
1639: LD_INT 0
1641: PPUSH
1642: CALL 3900 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1646: LD_EXP 4
1650: PPUSH
1651: LD_VAR 0 5
1655: PPUSH
1656: LD_VAR 0 6
1660: PPUSH
1661: LD_INT 35
1663: PPUSH
1664: LD_INT 0
1666: PPUSH
1667: CALL 3900 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1671: LD_EXP 5
1675: PPUSH
1676: LD_VAR 0 5
1680: PPUSH
1681: LD_VAR 0 6
1685: PPUSH
1686: LD_INT 35
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL 3900 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1696: LD_EXP 6
1700: PPUSH
1701: LD_VAR 0 5
1705: PPUSH
1706: LD_VAR 0 6
1710: PPUSH
1711: LD_INT 35
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL 3900 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1721: LD_EXP 7
1725: PPUSH
1726: LD_VAR 0 5
1730: PPUSH
1731: LD_VAR 0 6
1735: PPUSH
1736: LD_INT 35
1738: PPUSH
1739: LD_INT 0
1741: PPUSH
1742: CALL 3900 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1746: LD_EXP 8
1750: PPUSH
1751: LD_VAR 0 5
1755: PPUSH
1756: LD_VAR 0 6
1760: PPUSH
1761: LD_INT 35
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: CALL 3900 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1771: LD_EXP 9
1775: PPUSH
1776: LD_VAR 0 5
1780: PPUSH
1781: LD_VAR 0 6
1785: PPUSH
1786: LD_INT 35
1788: PPUSH
1789: LD_INT 0
1791: PPUSH
1792: CALL 3900 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1796: LD_EXP 10
1800: PPUSH
1801: LD_VAR 0 5
1805: PPUSH
1806: LD_VAR 0 6
1810: PPUSH
1811: LD_INT 35
1813: PPUSH
1814: LD_INT 0
1816: PPUSH
1817: CALL 3900 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1821: LD_EXP 11
1825: PPUSH
1826: LD_VAR 0 5
1830: PPUSH
1831: LD_VAR 0 6
1835: PPUSH
1836: LD_INT 35
1838: PPUSH
1839: LD_INT 0
1841: PPUSH
1842: CALL 3900 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1846: LD_EXP 12
1850: PPUSH
1851: LD_VAR 0 5
1855: PPUSH
1856: LD_VAR 0 6
1860: PPUSH
1861: LD_INT 35
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL 3900 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1871: LD_EXP 13
1875: PPUSH
1876: LD_VAR 0 5
1880: PPUSH
1881: LD_VAR 0 6
1885: PPUSH
1886: LD_INT 35
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL 3900 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1896: LD_EXP 14
1900: PPUSH
1901: LD_VAR 0 5
1905: PPUSH
1906: LD_VAR 0 6
1910: PPUSH
1911: LD_INT 35
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL 3900 0 5
// SetClass ( JMM , 1 ) ;
1921: LD_EXP 1
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1933: LD_ADDR_EXP 17
1937: PUSH
1938: LD_STRING 12_other_survivors
1940: PPUSH
1941: CALL_OW 31
1945: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1946: LD_ADDR_EXP 18
1950: PUSH
1951: LD_STRING 12_others
1953: PPUSH
1954: CALL_OW 31
1958: ST_TO_ADDR
// for i in others11 do
1959: LD_ADDR_VAR 0 2
1963: PUSH
1964: LD_EXP 18
1968: PUSH
1969: FOR_IN
1970: IFFALSE 2017
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1972: LD_VAR 0 2
1976: PPUSH
1977: LD_VAR 0 4
1981: PUSH
1982: LD_INT 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 250
1990: PPUSH
1991: LD_VAR 0 4
1995: PUSH
1996: LD_INT 1
1998: ARRAY
1999: PPUSH
2000: CALL_OW 251
2004: PPUSH
2005: LD_INT 15
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL 3900 0 5
2015: GO 1969
2017: POP
2018: POP
// for i in others12 do
2019: LD_ADDR_VAR 0 2
2023: PUSH
2024: LD_EXP 17
2028: PUSH
2029: FOR_IN
2030: IFFALSE 2077
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2032: LD_VAR 0 2
2036: PPUSH
2037: LD_VAR 0 4
2041: PUSH
2042: LD_INT 1
2044: ARRAY
2045: PPUSH
2046: CALL_OW 250
2050: PPUSH
2051: LD_VAR 0 4
2055: PUSH
2056: LD_INT 1
2058: ARRAY
2059: PPUSH
2060: CALL_OW 251
2064: PPUSH
2065: LD_INT 15
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 3900 0 5
2075: GO 2029
2077: POP
2078: POP
// end ;
2079: LD_VAR 0 1
2083: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2084: LD_INT 0
2086: PPUSH
2087: PPUSH
2088: PPUSH
2089: PPUSH
2090: PPUSH
2091: PPUSH
2092: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2093: LD_INT 113
2095: PPUSH
2096: LD_INT 50
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 441
// SetResourceVisibility ( 99 , 19 , 1 ) ;
2106: LD_INT 99
2108: PPUSH
2109: LD_INT 19
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2119: LD_INT 43
2121: PPUSH
2122: LD_INT 79
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2132: LD_INT 43
2134: PPUSH
2135: LD_INT 68
2137: PPUSH
2138: LD_INT 1
2140: PPUSH
2141: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2145: LD_INT 99
2147: PPUSH
2148: LD_INT 114
2150: PPUSH
2151: LD_INT 1
2153: PPUSH
2154: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2158: LD_INT 103
2160: PPUSH
2161: LD_INT 114
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2171: LD_INT 152
2173: PPUSH
2174: LD_INT 85
2176: PPUSH
2177: LD_INT 1
2179: PPUSH
2180: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2184: LD_INT 156
2186: PPUSH
2187: LD_INT 92
2189: PPUSH
2190: LD_INT 1
2192: PPUSH
2193: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2197: LD_ADDR_VAR 0 2
2201: PUSH
2202: LD_STRING 10_EpsilonBase
2204: PPUSH
2205: EMPTY
2206: PPUSH
2207: CALL_OW 30
2211: ST_TO_ADDR
// if not blist then
2212: LD_VAR 0 2
2216: NOT
2217: IFFALSE 2229
// begin baseCorrect := 0 ;
2219: LD_ADDR_VAR 0 6
2223: PUSH
2224: LD_INT 0
2226: ST_TO_ADDR
// end else
2227: GO 2286
// begin for i in blist do
2229: LD_ADDR_VAR 0 3
2233: PUSH
2234: LD_VAR 0 2
2238: PUSH
2239: FOR_IN
2240: IFFALSE 2284
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2242: LD_VAR 0 3
2246: PUSH
2247: LD_INT 1
2249: ARRAY
2250: PUSH
2251: LD_INT 0
2253: EQUAL
2254: IFTRUE 2270
2256: PUSH
2257: LD_VAR 0 3
2261: PUSH
2262: LD_INT 1
2264: ARRAY
2265: PUSH
2266: LD_INT 1
2268: EQUAL
2269: OR
2270: IFFALSE 2282
// begin baseCorrect := 1 ;
2272: LD_ADDR_VAR 0 6
2276: PUSH
2277: LD_INT 1
2279: ST_TO_ADDR
// break ;
2280: GO 2284
// end ;
2282: GO 2239
2284: POP
2285: POP
// end ; if baseCorrect = 0 then
2286: LD_VAR 0 6
2290: PUSH
2291: LD_INT 0
2293: EQUAL
2294: IFFALSE 3001
// begin uc_side := 1 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// uc_nation := 1 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 1
2311: ST_TO_ADDR
// bc_level := 10 ;
2312: LD_ADDR_OWVAR 43
2316: PUSH
2317: LD_INT 10
2319: ST_TO_ADDR
// bc_type := b_warehouse ;
2320: LD_ADDR_OWVAR 42
2324: PUSH
2325: LD_INT 1
2327: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2328: LD_INT 99
2330: PPUSH
2331: LD_INT 24
2333: PPUSH
2334: LD_INT 2
2336: PPUSH
2337: CALL_OW 47
// bc_type := b_bunker ;
2341: LD_ADDR_OWVAR 42
2345: PUSH
2346: LD_INT 32
2348: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2349: LD_ADDR_VAR 0 7
2353: PUSH
2354: LD_INT 124
2356: PPUSH
2357: LD_INT 42
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: CALL_OW 47
2367: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2368: LD_VAR 0 7
2372: PPUSH
2373: LD_INT 4
2375: PUSH
2376: LD_INT 5
2378: PUSH
2379: LD_INT 6
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: PUSH
2387: LD_INT 1
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: CALL_OW 12
2397: ARRAY
2398: PPUSH
2399: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2403: LD_ADDR_VAR 0 7
2407: PUSH
2408: LD_INT 111
2410: PPUSH
2411: LD_INT 16
2413: PPUSH
2414: LD_INT 4
2416: PPUSH
2417: CALL_OW 47
2421: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2422: LD_VAR 0 7
2426: PPUSH
2427: LD_INT 4
2429: PUSH
2430: LD_INT 5
2432: PUSH
2433: LD_INT 6
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 1
2443: PPUSH
2444: LD_INT 3
2446: PPUSH
2447: CALL_OW 12
2451: ARRAY
2452: PPUSH
2453: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2457: LD_ADDR_VAR 0 7
2461: PUSH
2462: LD_INT 113
2464: PPUSH
2465: LD_INT 21
2467: PPUSH
2468: LD_INT 4
2470: PPUSH
2471: CALL_OW 47
2475: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2476: LD_VAR 0 7
2480: PPUSH
2481: LD_INT 4
2483: PUSH
2484: LD_INT 5
2486: PUSH
2487: LD_INT 6
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: LIST
2494: PUSH
2495: LD_INT 1
2497: PPUSH
2498: LD_INT 3
2500: PPUSH
2501: CALL_OW 12
2505: ARRAY
2506: PPUSH
2507: CALL_OW 431
// bc_type := 33 ;
2511: LD_ADDR_OWVAR 42
2515: PUSH
2516: LD_INT 33
2518: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2519: LD_ADDR_VAR 0 7
2523: PUSH
2524: LD_INT 95
2526: PPUSH
2527: LD_INT 41
2529: PPUSH
2530: LD_INT 1
2532: PPUSH
2533: CALL_OW 47
2537: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2538: LD_VAR 0 7
2542: PPUSH
2543: LD_INT 4
2545: PUSH
2546: LD_INT 5
2548: PUSH
2549: LD_INT 6
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 1
2559: PPUSH
2560: LD_INT 3
2562: PPUSH
2563: CALL_OW 12
2567: ARRAY
2568: PPUSH
2569: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2573: LD_ADDR_VAR 0 7
2577: PUSH
2578: LD_INT 97
2580: PPUSH
2581: LD_INT 48
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 47
2591: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2592: LD_VAR 0 7
2596: PPUSH
2597: LD_INT 4
2599: PUSH
2600: LD_INT 5
2602: PUSH
2603: LD_INT 6
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 1
2613: PPUSH
2614: LD_INT 3
2616: PPUSH
2617: CALL_OW 12
2621: ARRAY
2622: PPUSH
2623: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2627: LD_ADDR_VAR 0 7
2631: PUSH
2632: LD_INT 86
2634: PPUSH
2635: LD_INT 19
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: CALL_OW 47
2645: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2646: LD_VAR 0 7
2650: PPUSH
2651: LD_INT 4
2653: PUSH
2654: LD_INT 5
2656: PUSH
2657: LD_INT 6
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 1
2667: PPUSH
2668: LD_INT 3
2670: PPUSH
2671: CALL_OW 12
2675: ARRAY
2676: PPUSH
2677: CALL_OW 431
// bc_type := 30 ;
2681: LD_ADDR_OWVAR 42
2685: PUSH
2686: LD_INT 30
2688: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2689: LD_INT 104
2691: PPUSH
2692: LD_INT 24
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: CALL_OW 47
// bc_type := 29 ;
2702: LD_ADDR_OWVAR 42
2706: PUSH
2707: LD_INT 29
2709: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2710: LD_INT 113
2712: PPUSH
2713: LD_INT 50
2715: PPUSH
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 47
// bc_type := 27 ;
2723: LD_ADDR_OWVAR 42
2727: PUSH
2728: LD_INT 27
2730: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2731: LD_INT 98
2733: PPUSH
2734: LD_INT 26
2736: PPUSH
2737: LD_INT 2
2739: PPUSH
2740: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2744: LD_INT 95
2746: PPUSH
2747: LD_INT 23
2749: PPUSH
2750: LD_INT 3
2752: PPUSH
2753: CALL_OW 47
// bc_type := 28 ;
2757: LD_ADDR_OWVAR 42
2761: PUSH
2762: LD_INT 28
2764: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2765: LD_INT 107
2767: PPUSH
2768: LD_INT 32
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: CALL_OW 47
// bc_type := 3 ;
2778: LD_ADDR_OWVAR 42
2782: PUSH
2783: LD_INT 3
2785: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2786: LD_INT 106
2788: PPUSH
2789: LD_INT 42
2791: PPUSH
2792: LD_INT 0
2794: PPUSH
2795: CALL_OW 47
// bc_type := 16 ;
2799: LD_ADDR_OWVAR 42
2803: PUSH
2804: LD_INT 16
2806: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2807: LD_INT 109
2809: PPUSH
2810: LD_INT 45
2812: PPUSH
2813: LD_INT 5
2815: PPUSH
2816: CALL_OW 47
// bc_type := 17 ;
2820: LD_ADDR_OWVAR 42
2824: PUSH
2825: LD_INT 17
2827: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2828: LD_INT 106
2830: PPUSH
2831: LD_INT 46
2833: PPUSH
2834: LD_INT 0
2836: PPUSH
2837: CALL_OW 47
// bc_type := 19 ;
2841: LD_ADDR_OWVAR 42
2845: PUSH
2846: LD_INT 19
2848: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2849: LD_INT 103
2851: PPUSH
2852: LD_INT 42
2854: PPUSH
2855: LD_INT 1
2857: PPUSH
2858: CALL_OW 47
// bc_type := 21 ;
2862: LD_ADDR_OWVAR 42
2866: PUSH
2867: LD_INT 21
2869: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2870: LD_INT 110
2872: PPUSH
2873: LD_INT 42
2875: PPUSH
2876: LD_INT 4
2878: PPUSH
2879: CALL_OW 47
// bc_type := 5 ;
2883: LD_ADDR_OWVAR 42
2887: PUSH
2888: LD_INT 5
2890: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2891: LD_INT 114
2893: PPUSH
2894: LD_INT 55
2896: PPUSH
2897: LD_INT 5
2899: PPUSH
2900: CALL_OW 47
// bc_type := 36 ;
2904: LD_ADDR_OWVAR 42
2908: PUSH
2909: LD_INT 36
2911: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2912: LD_INT 96
2914: PPUSH
2915: LD_INT 28
2917: PPUSH
2918: LD_INT 2
2920: PPUSH
2921: CALL_OW 47
// bc_type := b_lab_full ;
2925: LD_ADDR_OWVAR 42
2929: PUSH
2930: LD_INT 8
2932: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2933: LD_ADDR_OWVAR 44
2937: PUSH
2938: LD_INT 15
2940: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2941: LD_ADDR_OWVAR 45
2945: PUSH
2946: LD_INT 11
2948: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2949: LD_INT 116
2951: PPUSH
2952: LD_INT 38
2954: PPUSH
2955: LD_INT 4
2957: PPUSH
2958: CALL_OW 47
// bc_type := b_lab_full ;
2962: LD_ADDR_OWVAR 42
2966: PUSH
2967: LD_INT 8
2969: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2970: LD_ADDR_OWVAR 44
2974: PUSH
2975: LD_INT 10
2977: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2978: LD_ADDR_OWVAR 45
2982: PUSH
2983: LD_INT 12
2985: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2986: LD_INT 112
2988: PPUSH
2989: LD_INT 29
2991: PPUSH
2992: LD_INT 4
2994: PPUSH
2995: CALL_OW 47
// end else
2999: GO 3249
// begin uc_side := 1 ;
3001: LD_ADDR_OWVAR 20
3005: PUSH
3006: LD_INT 1
3008: ST_TO_ADDR
// for i in blist do
3009: LD_ADDR_VAR 0 3
3013: PUSH
3014: LD_VAR 0 2
3018: PUSH
3019: FOR_IN
3020: IFFALSE 3247
// begin InitBc ;
3022: CALL_OW 21
// uc_nation := i [ 6 ] ;
3026: LD_ADDR_OWVAR 21
3030: PUSH
3031: LD_VAR 0 3
3035: PUSH
3036: LD_INT 6
3038: ARRAY
3039: ST_TO_ADDR
// bc_type := i [ 1 ] ;
3040: LD_ADDR_OWVAR 42
3044: PUSH
3045: LD_VAR 0 3
3049: PUSH
3050: LD_INT 1
3052: ARRAY
3053: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3054: LD_ADDR_OWVAR 43
3058: PUSH
3059: LD_VAR 0 3
3063: PUSH
3064: LD_INT 5
3066: ARRAY
3067: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3068: LD_VAR 0 3
3072: PUSH
3073: LD_INT 1
3075: ARRAY
3076: PUSH
3077: LD_INT 7
3079: PUSH
3080: LD_INT 8
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: IN
3087: IFFALSE 3117
// begin bc_kind1 := i [ 7 ] ;
3089: LD_ADDR_OWVAR 44
3093: PUSH
3094: LD_VAR 0 3
3098: PUSH
3099: LD_INT 7
3101: ARRAY
3102: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3103: LD_ADDR_OWVAR 45
3107: PUSH
3108: LD_VAR 0 3
3112: PUSH
3113: LD_INT 8
3115: ARRAY
3116: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3117: LD_ADDR_VAR 0 4
3121: PUSH
3122: LD_VAR 0 3
3126: PUSH
3127: LD_INT 2
3129: ARRAY
3130: PPUSH
3131: LD_VAR 0 3
3135: PUSH
3136: LD_INT 3
3138: ARRAY
3139: PPUSH
3140: LD_VAR 0 3
3144: PUSH
3145: LD_INT 4
3147: ARRAY
3148: PPUSH
3149: CALL_OW 47
3153: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3154: LD_VAR 0 4
3158: PPUSH
3159: CALL_OW 266
3163: PUSH
3164: LD_INT 32
3166: PUSH
3167: LD_INT 33
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: IN
3174: IFFALSE 3245
// if i [ 7 ] then
3176: LD_VAR 0 3
3180: PUSH
3181: LD_INT 7
3183: ARRAY
3184: IFFALSE 3206
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3186: LD_VAR 0 4
3190: PPUSH
3191: LD_VAR 0 3
3195: PUSH
3196: LD_INT 7
3198: ARRAY
3199: PPUSH
3200: CALL_OW 431
3204: GO 3245
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3206: LD_VAR 0 4
3210: PPUSH
3211: LD_INT 11
3213: PUSH
3214: LD_INT 7
3216: PUSH
3217: LD_INT 4
3219: PUSH
3220: LD_INT 5
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 1
3231: PPUSH
3232: LD_INT 4
3234: PPUSH
3235: CALL_OW 12
3239: ARRAY
3240: PPUSH
3241: CALL_OW 431
// end ;
3245: GO 3019
3247: POP
3248: POP
// end ; uc_side := 1 ;
3249: LD_ADDR_OWVAR 20
3253: PUSH
3254: LD_INT 1
3256: ST_TO_ADDR
// uc_nation := 1 ;
3257: LD_ADDR_OWVAR 21
3261: PUSH
3262: LD_INT 1
3264: ST_TO_ADDR
// for i := 1 to 8 do
3265: LD_ADDR_VAR 0 3
3269: PUSH
3270: DOUBLE
3271: LD_INT 1
3273: DEC
3274: ST_TO_ADDR
3275: LD_INT 8
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3450
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3281: LD_ADDR_OWVAR 37
3285: PUSH
3286: LD_INT 5
3288: PUSH
3289: LD_INT 5
3291: PUSH
3292: LD_INT 3
3294: PUSH
3295: LD_INT 4
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 1
3306: PPUSH
3307: LD_INT 4
3309: PPUSH
3310: CALL_OW 12
3314: ARRAY
3315: ST_TO_ADDR
// vc_engine := engine_siberite ;
3316: LD_ADDR_OWVAR 39
3320: PUSH
3321: LD_INT 3
3323: ST_TO_ADDR
// vc_control := control_manual ;
3324: LD_ADDR_OWVAR 38
3328: PUSH
3329: LD_INT 1
3331: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3332: LD_OWVAR 37
3336: PUSH
3337: LD_INT 4
3339: EQUAL
3340: IFFALSE 3352
// vc_weapon := us_heavy_gun else
3342: LD_ADDR_OWVAR 40
3346: PUSH
3347: LD_INT 6
3349: ST_TO_ADDR
3350: GO 3397
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3352: LD_ADDR_OWVAR 40
3356: PUSH
3357: LD_INT 7
3359: PUSH
3360: LD_INT 9
3362: PUSH
3363: LD_INT 12
3365: PUSH
3366: LD_INT 13
3368: PUSH
3369: LD_INT 9
3371: PUSH
3372: LD_INT 9
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: PUSH
3383: LD_VAR 0 3
3387: PUSH
3388: LD_INT 6
3390: MOD
3391: PUSH
3392: LD_INT 1
3394: PLUS
3395: ARRAY
3396: ST_TO_ADDR
// un := CreateVehicle ;
3397: LD_ADDR_VAR 0 5
3401: PUSH
3402: CALL_OW 45
3406: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3407: LD_VAR 0 5
3411: PPUSH
3412: LD_INT 0
3414: PPUSH
3415: LD_INT 5
3417: PPUSH
3418: CALL_OW 12
3422: PPUSH
3423: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3427: LD_VAR 0 5
3431: PPUSH
3432: LD_INT 78
3434: PPUSH
3435: LD_INT 31
3437: PPUSH
3438: LD_INT 8
3440: PPUSH
3441: LD_INT 0
3443: PPUSH
3444: CALL_OW 50
// end ;
3448: GO 3278
3450: POP
3451: POP
// end ;
3452: LD_VAR 0 1
3456: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3457: LD_INT 0
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3463: LD_INT 22
3465: PUSH
3466: LD_INT 1
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 21
3475: PUSH
3476: LD_INT 1
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PPUSH
3487: CALL_OW 69
3491: PUSH
3492: LD_INT 6
3494: LESS
3495: IFFALSE 3722
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3497: LD_ADDR_VAR 0 4
3501: PUSH
3502: LD_INT 22
3504: PUSH
3505: LD_INT 1
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: PUSH
3512: LD_INT 2
3514: PUSH
3515: LD_INT 30
3517: PUSH
3518: LD_INT 0
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: LD_INT 30
3527: PUSH
3528: LD_INT 1
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PPUSH
3544: CALL_OW 69
3548: ST_TO_ADDR
// uc_side := 1 ;
3549: LD_ADDR_OWVAR 20
3553: PUSH
3554: LD_INT 1
3556: ST_TO_ADDR
// uc_nation := 1 ;
3557: LD_ADDR_OWVAR 21
3561: PUSH
3562: LD_INT 1
3564: ST_TO_ADDR
// for i := 1 to 6 do
3565: LD_ADDR_VAR 0 2
3569: PUSH
3570: DOUBLE
3571: LD_INT 1
3573: DEC
3574: ST_TO_ADDR
3575: LD_INT 6
3577: PUSH
3578: FOR_TO
3579: IFFALSE 3720
// begin hc_gallery :=  ;
3581: LD_ADDR_OWVAR 33
3585: PUSH
3586: LD_STRING 
3588: ST_TO_ADDR
// hc_name :=  ;
3589: LD_ADDR_OWVAR 26
3593: PUSH
3594: LD_STRING 
3596: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3597: LD_INT 0
3599: PPUSH
3600: LD_INT 1
3602: PUSH
3603: LD_INT 2
3605: PUSH
3606: LD_INT 3
3608: PUSH
3609: LD_INT 4
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: PUSH
3618: LD_INT 1
3620: PPUSH
3621: LD_INT 4
3623: PPUSH
3624: CALL_OW 12
3628: ARRAY
3629: PPUSH
3630: LD_INT 5
3632: PPUSH
3633: LD_INT 8
3635: PPUSH
3636: CALL_OW 12
3640: PPUSH
3641: CALL_OW 380
// un := CreateHuman ;
3645: LD_ADDR_VAR 0 3
3649: PUSH
3650: CALL_OW 44
3654: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3655: LD_ADDR_EXP 19
3659: PUSH
3660: LD_EXP 19
3664: PPUSH
3665: LD_VAR 0 3
3669: PPUSH
3670: CALL 66185 0 2
3674: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3675: LD_VAR 0 3
3679: PPUSH
3680: LD_VAR 0 4
3684: PUSH
3685: LD_INT 1
3687: ARRAY
3688: PPUSH
3689: CALL_OW 250
3693: PPUSH
3694: LD_VAR 0 4
3698: PUSH
3699: LD_INT 1
3701: ARRAY
3702: PPUSH
3703: CALL_OW 251
3707: PPUSH
3708: LD_INT 15
3710: PPUSH
3711: LD_INT 0
3713: PPUSH
3714: CALL 3900 0 5
// end ;
3718: GO 3578
3720: POP
3721: POP
// end ; end ; end_of_file
3722: LD_VAR 0 1
3726: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3727: LD_INT 0
3729: PPUSH
3730: PPUSH
// if existMode then
3731: LD_VAR 0 2
3735: IFFALSE 3870
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3737: LD_EXP 22
3741: PUSH
3742: LD_VAR 0 1
3746: STR
3747: PPUSH
3748: CALL_OW 28
3752: IFFALSE 3777
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3754: LD_ADDR_VAR 0 4
3758: PUSH
3759: LD_EXP 22
3763: PUSH
3764: LD_VAR 0 1
3768: STR
3769: PPUSH
3770: CALL_OW 34
3774: ST_TO_ADDR
3775: GO 3868
// begin if TestCharacters ( 11_ & ident ) then
3777: LD_STRING 11_
3779: PUSH
3780: LD_VAR 0 1
3784: STR
3785: PPUSH
3786: CALL_OW 28
3790: IFFALSE 3813
// unit := CreateCharacter ( 11_ & ident ) else
3792: LD_ADDR_VAR 0 4
3796: PUSH
3797: LD_STRING 11_
3799: PUSH
3800: LD_VAR 0 1
3804: STR
3805: PPUSH
3806: CALL_OW 34
3810: ST_TO_ADDR
3811: GO 3868
// if TestCharacters ( 10c_ & ident ) then
3813: LD_STRING 10c_
3815: PUSH
3816: LD_VAR 0 1
3820: STR
3821: PPUSH
3822: CALL_OW 28
3826: IFFALSE 3849
// unit := CreateCharacter ( 10c_ & ident ) else
3828: LD_ADDR_VAR 0 4
3832: PUSH
3833: LD_STRING 10c_
3835: PUSH
3836: LD_VAR 0 1
3840: STR
3841: PPUSH
3842: CALL_OW 34
3846: ST_TO_ADDR
3847: GO 3868
// unit := CreateCharacter ( 10_ & ident ) ;
3849: LD_ADDR_VAR 0 4
3853: PUSH
3854: LD_STRING 10_
3856: PUSH
3857: LD_VAR 0 1
3861: STR
3862: PPUSH
3863: CALL_OW 34
3867: ST_TO_ADDR
// end ; end else
3868: GO 3885
// unit := NewCharacter ( ident ) ;
3870: LD_ADDR_VAR 0 4
3874: PUSH
3875: LD_VAR 0 1
3879: PPUSH
3880: CALL_OW 25
3884: ST_TO_ADDR
// result := unit ;
3885: LD_ADDR_VAR 0 3
3889: PUSH
3890: LD_VAR 0 4
3894: ST_TO_ADDR
// end ;
3895: LD_VAR 0 3
3899: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3900: LD_INT 0
3902: PPUSH
3903: PPUSH
3904: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3905: LD_ADDR_VAR 0 8
3909: PUSH
3910: LD_INT 22
3912: PUSH
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 255
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: LD_INT 21
3929: PUSH
3930: LD_INT 3
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_INT 3
3939: PUSH
3940: LD_INT 30
3942: PUSH
3943: LD_INT 3
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: LIST
3958: PPUSH
3959: CALL_OW 69
3963: ST_TO_ADDR
// if not tmp then
3964: LD_VAR 0 8
3968: NOT
3969: IFFALSE 4002
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3971: LD_VAR 0 1
3975: PPUSH
3976: LD_VAR 0 2
3980: PPUSH
3981: LD_VAR 0 3
3985: PPUSH
3986: LD_VAR 0 4
3990: PPUSH
3991: LD_VAR 0 5
3995: PPUSH
3996: CALL_OW 50
// exit ;
4000: GO 4248
// end ; for i in tmp do
4002: LD_ADDR_VAR 0 7
4006: PUSH
4007: LD_VAR 0 8
4011: PUSH
4012: FOR_IN
4013: IFFALSE 4217
// if IsNotFull ( i ) then
4015: LD_VAR 0 7
4019: PPUSH
4020: CALL 30335 0 1
4024: IFFALSE 4215
// begin PlaceHumanInUnit ( unit , i ) ;
4026: LD_VAR 0 1
4030: PPUSH
4031: LD_VAR 0 7
4035: PPUSH
4036: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
4040: LD_VAR 0 7
4044: PPUSH
4045: CALL_OW 266
4049: PUSH
4050: LD_INT 5
4052: PUSH
4053: LD_INT 4
4055: PUSH
4056: LD_INT 31
4058: PUSH
4059: LD_INT 32
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: IN
4068: IFFALSE 4101
// begin SetClass ( unit , class_soldier ) ;
4070: LD_VAR 0 1
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4082: LD_VAR 0 1
4086: PPUSH
4087: LD_VAR 0 7
4091: PPUSH
4092: CALL 61235 0 1
4096: PPUSH
4097: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4101: LD_VAR 0 7
4105: PPUSH
4106: CALL_OW 266
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: LD_INT 3
4116: PUSH
4117: LD_INT 36
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: IN
4125: IFFALSE 4139
// SetClass ( unit , class_mechanic ) ;
4127: LD_VAR 0 1
4131: PPUSH
4132: LD_INT 3
4134: PPUSH
4135: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4139: LD_VAR 0 7
4143: PPUSH
4144: CALL_OW 266
4148: PUSH
4149: LD_INT 0
4151: PUSH
4152: LD_INT 1
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: IN
4159: IFFALSE 4173
// SetClass ( unit , class_engineer ) ;
4161: LD_VAR 0 1
4165: PPUSH
4166: LD_INT 2
4168: PPUSH
4169: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4173: LD_VAR 0 7
4177: PPUSH
4178: CALL_OW 266
4182: PUSH
4183: LD_INT 6
4185: PUSH
4186: LD_INT 7
4188: PUSH
4189: LD_INT 8
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: IN
4197: IFFALSE 4211
// SetClass ( unit , class_scientistic ) ;
4199: LD_VAR 0 1
4203: PPUSH
4204: LD_INT 4
4206: PPUSH
4207: CALL_OW 336
// exit ;
4211: POP
4212: POP
4213: GO 4248
// end ;
4215: GO 4012
4217: POP
4218: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4219: LD_VAR 0 1
4223: PPUSH
4224: LD_VAR 0 2
4228: PPUSH
4229: LD_VAR 0 3
4233: PPUSH
4234: LD_VAR 0 4
4238: PPUSH
4239: LD_VAR 0 5
4243: PPUSH
4244: CALL_OW 50
// end ;
4248: LD_VAR 0 6
4252: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4253: LD_INT 0
4255: PPUSH
// if unit in selectedTab then
4256: LD_VAR 0 1
4260: PUSH
4261: LD_VAR 0 3
4265: IN
4266: IFFALSE 4288
// SaveCharacters ( unit , 13c_ & unitString ) else
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_STRING 13c_
4275: PUSH
4276: LD_VAR 0 2
4280: STR
4281: PPUSH
4282: CALL_OW 38
4286: GO 4306
// SaveCharacters ( unit , 13s_ & unitString ) ;
4288: LD_VAR 0 1
4292: PPUSH
4293: LD_STRING 13s_
4295: PUSH
4296: LD_VAR 0 2
4300: STR
4301: PPUSH
4302: CALL_OW 38
// end ;
4306: LD_VAR 0 4
4310: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4311: LD_INT 0
4313: PPUSH
4314: PPUSH
4315: PPUSH
4316: PPUSH
// selected := [ ] ;
4317: LD_ADDR_EXP 23
4321: PUSH
4322: EMPTY
4323: ST_TO_ADDR
// othersSelect := [ ] ;
4324: LD_ADDR_EXP 24
4328: PUSH
4329: EMPTY
4330: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4331: LD_ADDR_VAR 0 3
4335: PUSH
4336: LD_EXP 3
4340: PUSH
4341: LD_EXP 4
4345: PUSH
4346: LD_EXP 5
4350: PUSH
4351: LD_EXP 6
4355: PUSH
4356: LD_EXP 8
4360: PUSH
4361: LD_EXP 9
4365: PUSH
4366: LD_EXP 10
4370: PUSH
4371: LD_EXP 11
4375: PUSH
4376: LD_EXP 12
4380: PUSH
4381: LD_EXP 13
4385: PUSH
4386: LD_EXP 14
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4404: LD_ADDR_VAR 0 3
4408: PUSH
4409: LD_VAR 0 3
4413: PUSH
4414: LD_EXP 18
4418: ADD
4419: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4420: LD_ADDR_VAR 0 3
4424: PUSH
4425: LD_VAR 0 3
4429: PUSH
4430: LD_EXP 17
4434: ADD
4435: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4436: LD_ADDR_VAR 0 3
4440: PUSH
4441: LD_VAR 0 3
4445: PUSH
4446: LD_EXP 19
4450: ADD
4451: ST_TO_ADDR
// for i in tmp do
4452: LD_ADDR_VAR 0 2
4456: PUSH
4457: LD_VAR 0 3
4461: PUSH
4462: FOR_IN
4463: IFFALSE 4502
// if GetClass ( i ) = 8 then
4465: LD_VAR 0 2
4469: PPUSH
4470: CALL_OW 257
4474: PUSH
4475: LD_INT 8
4477: EQUAL
4478: IFFALSE 4500
// SetClass ( i , rand ( 1 , 4 ) ) ;
4480: LD_VAR 0 2
4484: PPUSH
4485: LD_INT 1
4487: PPUSH
4488: LD_INT 4
4490: PPUSH
4491: CALL_OW 12
4495: PPUSH
4496: CALL_OW 336
4500: GO 4462
4502: POP
4503: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4504: LD_ADDR_EXP 23
4508: PUSH
4509: LD_STRING 1
4511: PPUSH
4512: LD_INT 6
4514: PPUSH
4515: LD_INT 6
4517: PPUSH
4518: LD_INT -5
4520: PUSH
4521: LD_EXP 1
4525: PUSH
4526: LD_EXP 16
4530: PUSH
4531: LD_INT -2
4533: PUSH
4534: LD_INT -3
4536: PUSH
4537: LD_INT -5
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: PUSH
4548: LD_VAR 0 3
4552: ADD
4553: PUSH
4554: LD_INT -6
4556: PUSH
4557: LD_INT -4
4559: PUSH
4560: LD_EXP 2
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: LIST
4569: ADD
4570: PPUSH
4571: LD_INT 1
4573: PUSH
4574: LD_INT 0
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 2
4583: PUSH
4584: LD_INT 1
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 3
4593: PUSH
4594: LD_INT 0
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 4
4603: PUSH
4604: LD_INT 2
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 5
4613: PUSH
4614: LD_INT 0
4616: PUSH
4617: LD_INT 2
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: PPUSH
4632: CALL_OW 42
4636: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4637: LD_ADDR_EXP 24
4641: PUSH
4642: LD_EXP 23
4646: PUSH
4647: LD_EXP 3
4651: PUSH
4652: LD_EXP 4
4656: PUSH
4657: LD_EXP 5
4661: PUSH
4662: LD_EXP 6
4666: PUSH
4667: LD_EXP 7
4671: PUSH
4672: LD_EXP 8
4676: PUSH
4677: LD_EXP 9
4681: PUSH
4682: LD_EXP 10
4686: PUSH
4687: LD_EXP 11
4691: PUSH
4692: LD_EXP 12
4696: PUSH
4697: LD_EXP 13
4701: PUSH
4702: LD_EXP 14
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: DIFF
4721: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4722: LD_ADDR_VAR 0 4
4726: PUSH
4727: LD_VAR 0 3
4731: PUSH
4732: LD_EXP 23
4736: DIFF
4737: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4738: LD_ADDR_VAR 0 4
4742: PUSH
4743: LD_VAR 0 4
4747: PUSH
4748: LD_EXP 3
4752: PUSH
4753: LD_EXP 4
4757: PUSH
4758: LD_EXP 5
4762: PUSH
4763: LD_EXP 6
4767: PUSH
4768: LD_EXP 7
4772: PUSH
4773: LD_EXP 8
4777: PUSH
4778: LD_EXP 9
4782: PUSH
4783: LD_EXP 10
4787: PUSH
4788: LD_EXP 11
4792: PUSH
4793: LD_EXP 12
4797: PUSH
4798: LD_EXP 13
4802: PUSH
4803: LD_EXP 14
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: DIFF
4822: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4823: LD_VAR 0 4
4827: PPUSH
4828: LD_STRING 13s_others
4830: PPUSH
4831: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4835: LD_EXP 24
4839: PPUSH
4840: LD_STRING 13c_others
4842: PPUSH
4843: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4847: LD_EXP 1
4851: PPUSH
4852: LD_STRING 13c_JMM
4854: PPUSH
4855: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4859: LD_EXP 16
4863: PPUSH
4864: LD_STRING 13c_Stevens
4866: PPUSH
4867: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4871: LD_EXP 3
4875: PPUSH
4876: LD_STRING Lisa
4878: PPUSH
4879: LD_EXP 23
4883: PPUSH
4884: CALL 4253 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4888: LD_EXP 8
4892: PPUSH
4893: LD_STRING Brown
4895: PPUSH
4896: LD_EXP 23
4900: PPUSH
4901: CALL 4253 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4905: LD_EXP 4
4909: PPUSH
4910: LD_STRING Donaldson
4912: PPUSH
4913: LD_EXP 23
4917: PPUSH
4918: CALL 4253 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4922: LD_EXP 5
4926: PPUSH
4927: LD_STRING Bobby
4929: PPUSH
4930: LD_EXP 23
4934: PPUSH
4935: CALL 4253 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4939: LD_EXP 6
4943: PPUSH
4944: LD_STRING Cyrus
4946: PPUSH
4947: LD_EXP 23
4951: PPUSH
4952: CALL 4253 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4956: LD_EXP 7
4960: PPUSH
4961: LD_STRING Denis
4963: PPUSH
4964: LD_EXP 23
4968: PPUSH
4969: CALL 4253 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4973: LD_EXP 9
4977: PPUSH
4978: LD_STRING Gladstone
4980: PPUSH
4981: LD_EXP 23
4985: PPUSH
4986: CALL 4253 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4990: LD_EXP 10
4994: PPUSH
4995: LD_STRING Houten
4997: PPUSH
4998: LD_EXP 23
5002: PPUSH
5003: CALL 4253 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
5007: LD_EXP 11
5011: PPUSH
5012: LD_STRING Cornel
5014: PPUSH
5015: LD_EXP 23
5019: PPUSH
5020: CALL 4253 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
5024: LD_EXP 12
5028: PPUSH
5029: LD_STRING Gary
5031: PPUSH
5032: LD_EXP 23
5036: PPUSH
5037: CALL 4253 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5041: LD_EXP 13
5045: PPUSH
5046: LD_STRING Frank
5048: PPUSH
5049: LD_EXP 23
5053: PPUSH
5054: CALL 4253 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5058: LD_EXP 14
5062: PPUSH
5063: LD_STRING Kikuchi
5065: PPUSH
5066: LD_EXP 23
5070: PPUSH
5071: CALL 4253 0 3
// SaveCharactersAfterSelect ( DeltaDoctor , DeltaDoctor , selected ) ;
5075: LD_EXP 15
5079: PPUSH
5080: LD_STRING DeltaDoctor
5082: PPUSH
5083: LD_EXP 23
5087: PPUSH
5088: CALL 4253 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5092: LD_INT 22
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PUSH
5102: LD_INT 21
5104: PUSH
5105: LD_INT 1
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PPUSH
5116: CALL_OW 69
5120: PPUSH
5121: LD_INT 4
5123: PPUSH
5124: CALL_OW 235
// SetSide ( selected , 1 ) ;
5128: LD_EXP 23
5132: PPUSH
5133: LD_INT 1
5135: PPUSH
5136: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5140: LD_EXP 1
5144: PUSH
5145: LD_EXP 16
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PPUSH
5154: LD_INT 1
5156: PPUSH
5157: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5161: LD_ADDR_VAR 0 2
5165: PUSH
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 21
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: CALL_OW 69
5194: PUSH
5195: FOR_IN
5196: IFFALSE 5209
// ComExit ( i ) ;
5198: LD_VAR 0 2
5202: PPUSH
5203: CALL 66583 0 1
5207: GO 5195
5209: POP
5210: POP
// end ; end_of_file
5211: LD_VAR 0 1
5215: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5216: LD_VAR 0 1
5220: PPUSH
5221: CALL 21570 0 1
// if un = JMM then
5225: LD_VAR 0 1
5229: PUSH
5230: LD_EXP 1
5234: EQUAL
5235: IFFALSE 5244
// YouLost ( JMM ) ;
5237: LD_STRING JMM
5239: PPUSH
5240: CALL_OW 104
// end ;
5244: PPOPN 1
5246: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5247: LD_VAR 0 1
5251: PPUSH
5252: LD_VAR 0 2
5256: PPUSH
5257: CALL 21628 0 2
// end ; end_of_file
5261: PPOPN 2
5263: END
// export function Action ; begin
5264: LD_INT 0
5266: PPUSH
// InGameOn ;
5267: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5271: LD_INT 22
5273: PUSH
5274: LD_INT 1
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 2
5283: PUSH
5284: LD_INT 30
5286: PUSH
5287: LD_INT 0
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 30
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: LIST
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PPUSH
5313: CALL_OW 69
5317: PPUSH
5318: CALL_OW 87
// wait ( 0 0$1 ) ;
5322: LD_INT 35
5324: PPUSH
5325: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5329: LD_EXP 1
5333: PPUSH
5334: LD_STRING D1-JMM-1
5336: PPUSH
5337: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5341: LD_EXP 2
5345: PPUSH
5346: LD_STRING D1-Pow-1
5348: PPUSH
5349: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5353: LD_EXP 2
5357: PPUSH
5358: LD_STRING D1-Pow-1a
5360: PPUSH
5361: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5365: LD_EXP 2
5369: PPUSH
5370: LD_STRING D1-Pow-1b
5372: PPUSH
5373: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5377: LD_EXP 2
5381: PPUSH
5382: LD_STRING D1-Pow-1c
5384: PPUSH
5385: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5389: LD_EXP 1
5393: PPUSH
5394: LD_STRING D1-JMM-2
5396: PPUSH
5397: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5401: LD_EXP 2
5405: PPUSH
5406: LD_STRING D1-Pow-2
5408: PPUSH
5409: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5413: LD_EXP 1
5417: PPUSH
5418: LD_STRING D1-JMM-3
5420: PPUSH
5421: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5425: LD_EXP 2
5429: PPUSH
5430: LD_STRING D1-Pow-3
5432: PPUSH
5433: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5437: LD_EXP 1
5441: PPUSH
5442: LD_STRING D1-JMM-4
5444: PPUSH
5445: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5449: LD_EXP 2
5453: PPUSH
5454: LD_STRING D1-Pow-4
5456: PPUSH
5457: CALL_OW 94
// SelectAndSaveCharacters ;
5461: CALL 4311 0 0
// InGameOff ;
5465: CALL_OW 9
// Query ( Q1 ) ;
5469: LD_STRING Q1
5471: PPUSH
5472: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5476: LD_INT 2
5478: PPUSH
5479: LD_INT 1
5481: PPUSH
5482: CALL_OW 424
// end ; end_of_file
5486: LD_VAR 0 1
5490: RET
// export globalGameSaveCounter ; every 0 0$1 do
5491: GO 5493
5493: DISABLE
// begin enable ;
5494: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5495: LD_STRING updateTimer(
5497: PUSH
5498: LD_OWVAR 1
5502: STR
5503: PUSH
5504: LD_STRING );
5506: STR
5507: PPUSH
5508: CALL_OW 559
// end ;
5512: END
// every 0 0$1 do
5513: GO 5515
5515: DISABLE
// begin globalGameSaveCounter := 0 ;
5516: LD_ADDR_EXP 25
5520: PUSH
5521: LD_INT 0
5523: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5524: LD_STRING setGameSaveCounter(0)
5526: PPUSH
5527: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5531: LD_STRING initStreamRollete();
5533: PPUSH
5534: CALL_OW 559
// InitStreamMode ;
5538: CALL 6883 0 0
// DefineStreamItems ( false ) ;
5542: LD_INT 0
5544: PPUSH
5545: CALL 7347 0 1
// end ;
5549: END
// export function SOS_MapStart ( ) ; begin
5550: LD_INT 0
5552: PPUSH
// if streamModeActive then
5553: LD_EXP 26
5557: IFFALSE 5566
// DefineStreamItems ( true ) ;
5559: LD_INT 1
5561: PPUSH
5562: CALL 7347 0 1
// UpdateLuaVariables ( ) ;
5566: CALL 5583 0 0
// UpdateFactoryWaypoints ( ) ;
5570: CALL 20469 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5574: CALL 20721 0 0
// end ;
5578: LD_VAR 0 1
5582: RET
// function UpdateLuaVariables ( ) ; begin
5583: LD_INT 0
5585: PPUSH
// if globalGameSaveCounter then
5586: LD_EXP 25
5590: IFFALSE 5624
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5592: LD_ADDR_EXP 25
5596: PUSH
5597: LD_EXP 25
5601: PPUSH
5602: CALL 67558 0 1
5606: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5607: LD_STRING setGameSaveCounter(
5609: PUSH
5610: LD_EXP 25
5614: STR
5615: PUSH
5616: LD_STRING )
5618: STR
5619: PPUSH
5620: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5624: LD_STRING setGameDifficulty(
5626: PUSH
5627: LD_OWVAR 67
5631: STR
5632: PUSH
5633: LD_STRING )
5635: STR
5636: PPUSH
5637: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
5641: LD_STRING displayDifficulty(
5643: PUSH
5644: LD_OWVAR 67
5648: STR
5649: PUSH
5650: LD_STRING )
5652: STR
5653: PPUSH
5654: CALL_OW 559
// end ;
5658: LD_VAR 0 1
5662: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5663: LD_INT 0
5665: PPUSH
// if p2 = stream_mode then
5666: LD_VAR 0 2
5670: PUSH
5671: LD_INT 100
5673: EQUAL
5674: IFFALSE 6677
// begin if not StreamModeActive then
5676: LD_EXP 26
5680: NOT
5681: IFFALSE 5691
// StreamModeActive := true ;
5683: LD_ADDR_EXP 26
5687: PUSH
5688: LD_INT 1
5690: ST_TO_ADDR
// if p3 = 0 then
5691: LD_VAR 0 3
5695: PUSH
5696: LD_INT 0
5698: EQUAL
5699: IFFALSE 5705
// InitStreamMode ;
5701: CALL 6883 0 0
// if p3 = 1 then
5705: LD_VAR 0 3
5709: PUSH
5710: LD_INT 1
5712: EQUAL
5713: IFFALSE 5723
// sRocket := true ;
5715: LD_ADDR_EXP 31
5719: PUSH
5720: LD_INT 1
5722: ST_TO_ADDR
// if p3 = 2 then
5723: LD_VAR 0 3
5727: PUSH
5728: LD_INT 2
5730: EQUAL
5731: IFFALSE 5741
// sSpeed := true ;
5733: LD_ADDR_EXP 30
5737: PUSH
5738: LD_INT 1
5740: ST_TO_ADDR
// if p3 = 3 then
5741: LD_VAR 0 3
5745: PUSH
5746: LD_INT 3
5748: EQUAL
5749: IFFALSE 5759
// sEngine := true ;
5751: LD_ADDR_EXP 32
5755: PUSH
5756: LD_INT 1
5758: ST_TO_ADDR
// if p3 = 4 then
5759: LD_VAR 0 3
5763: PUSH
5764: LD_INT 4
5766: EQUAL
5767: IFFALSE 5777
// sSpec := true ;
5769: LD_ADDR_EXP 29
5773: PUSH
5774: LD_INT 1
5776: ST_TO_ADDR
// if p3 = 5 then
5777: LD_VAR 0 3
5781: PUSH
5782: LD_INT 5
5784: EQUAL
5785: IFFALSE 5795
// sLevel := true ;
5787: LD_ADDR_EXP 33
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
// if p3 = 6 then
5795: LD_VAR 0 3
5799: PUSH
5800: LD_INT 6
5802: EQUAL
5803: IFFALSE 5813
// sArmoury := true ;
5805: LD_ADDR_EXP 34
5809: PUSH
5810: LD_INT 1
5812: ST_TO_ADDR
// if p3 = 7 then
5813: LD_VAR 0 3
5817: PUSH
5818: LD_INT 7
5820: EQUAL
5821: IFFALSE 5831
// sRadar := true ;
5823: LD_ADDR_EXP 35
5827: PUSH
5828: LD_INT 1
5830: ST_TO_ADDR
// if p3 = 8 then
5831: LD_VAR 0 3
5835: PUSH
5836: LD_INT 8
5838: EQUAL
5839: IFFALSE 5849
// sBunker := true ;
5841: LD_ADDR_EXP 36
5845: PUSH
5846: LD_INT 1
5848: ST_TO_ADDR
// if p3 = 9 then
5849: LD_VAR 0 3
5853: PUSH
5854: LD_INT 9
5856: EQUAL
5857: IFFALSE 5867
// sHack := true ;
5859: LD_ADDR_EXP 37
5863: PUSH
5864: LD_INT 1
5866: ST_TO_ADDR
// if p3 = 10 then
5867: LD_VAR 0 3
5871: PUSH
5872: LD_INT 10
5874: EQUAL
5875: IFFALSE 5885
// sFire := true ;
5877: LD_ADDR_EXP 38
5881: PUSH
5882: LD_INT 1
5884: ST_TO_ADDR
// if p3 = 11 then
5885: LD_VAR 0 3
5889: PUSH
5890: LD_INT 11
5892: EQUAL
5893: IFFALSE 5903
// sRefresh := true ;
5895: LD_ADDR_EXP 39
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// if p3 = 12 then
5903: LD_VAR 0 3
5907: PUSH
5908: LD_INT 12
5910: EQUAL
5911: IFFALSE 5921
// sExp := true ;
5913: LD_ADDR_EXP 40
5917: PUSH
5918: LD_INT 1
5920: ST_TO_ADDR
// if p3 = 13 then
5921: LD_VAR 0 3
5925: PUSH
5926: LD_INT 13
5928: EQUAL
5929: IFFALSE 5939
// sDepot := true ;
5931: LD_ADDR_EXP 41
5935: PUSH
5936: LD_INT 1
5938: ST_TO_ADDR
// if p3 = 14 then
5939: LD_VAR 0 3
5943: PUSH
5944: LD_INT 14
5946: EQUAL
5947: IFFALSE 5957
// sFlag := true ;
5949: LD_ADDR_EXP 42
5953: PUSH
5954: LD_INT 1
5956: ST_TO_ADDR
// if p3 = 15 then
5957: LD_VAR 0 3
5961: PUSH
5962: LD_INT 15
5964: EQUAL
5965: IFFALSE 5975
// sKamikadze := true ;
5967: LD_ADDR_EXP 50
5971: PUSH
5972: LD_INT 1
5974: ST_TO_ADDR
// if p3 = 16 then
5975: LD_VAR 0 3
5979: PUSH
5980: LD_INT 16
5982: EQUAL
5983: IFFALSE 5993
// sTroll := true ;
5985: LD_ADDR_EXP 51
5989: PUSH
5990: LD_INT 1
5992: ST_TO_ADDR
// if p3 = 17 then
5993: LD_VAR 0 3
5997: PUSH
5998: LD_INT 17
6000: EQUAL
6001: IFFALSE 6011
// sSlow := true ;
6003: LD_ADDR_EXP 52
6007: PUSH
6008: LD_INT 1
6010: ST_TO_ADDR
// if p3 = 18 then
6011: LD_VAR 0 3
6015: PUSH
6016: LD_INT 18
6018: EQUAL
6019: IFFALSE 6029
// sLack := true ;
6021: LD_ADDR_EXP 53
6025: PUSH
6026: LD_INT 1
6028: ST_TO_ADDR
// if p3 = 19 then
6029: LD_VAR 0 3
6033: PUSH
6034: LD_INT 19
6036: EQUAL
6037: IFFALSE 6047
// sTank := true ;
6039: LD_ADDR_EXP 55
6043: PUSH
6044: LD_INT 1
6046: ST_TO_ADDR
// if p3 = 20 then
6047: LD_VAR 0 3
6051: PUSH
6052: LD_INT 20
6054: EQUAL
6055: IFFALSE 6065
// sRemote := true ;
6057: LD_ADDR_EXP 56
6061: PUSH
6062: LD_INT 1
6064: ST_TO_ADDR
// if p3 = 21 then
6065: LD_VAR 0 3
6069: PUSH
6070: LD_INT 21
6072: EQUAL
6073: IFFALSE 6083
// sPowell := true ;
6075: LD_ADDR_EXP 57
6079: PUSH
6080: LD_INT 1
6082: ST_TO_ADDR
// if p3 = 22 then
6083: LD_VAR 0 3
6087: PUSH
6088: LD_INT 22
6090: EQUAL
6091: IFFALSE 6101
// sTeleport := true ;
6093: LD_ADDR_EXP 60
6097: PUSH
6098: LD_INT 1
6100: ST_TO_ADDR
// if p3 = 23 then
6101: LD_VAR 0 3
6105: PUSH
6106: LD_INT 23
6108: EQUAL
6109: IFFALSE 6119
// sOilTower := true ;
6111: LD_ADDR_EXP 62
6115: PUSH
6116: LD_INT 1
6118: ST_TO_ADDR
// if p3 = 24 then
6119: LD_VAR 0 3
6123: PUSH
6124: LD_INT 24
6126: EQUAL
6127: IFFALSE 6137
// sShovel := true ;
6129: LD_ADDR_EXP 63
6133: PUSH
6134: LD_INT 1
6136: ST_TO_ADDR
// if p3 = 25 then
6137: LD_VAR 0 3
6141: PUSH
6142: LD_INT 25
6144: EQUAL
6145: IFFALSE 6155
// sSheik := true ;
6147: LD_ADDR_EXP 64
6151: PUSH
6152: LD_INT 1
6154: ST_TO_ADDR
// if p3 = 26 then
6155: LD_VAR 0 3
6159: PUSH
6160: LD_INT 26
6162: EQUAL
6163: IFFALSE 6173
// sEarthquake := true ;
6165: LD_ADDR_EXP 66
6169: PUSH
6170: LD_INT 1
6172: ST_TO_ADDR
// if p3 = 27 then
6173: LD_VAR 0 3
6177: PUSH
6178: LD_INT 27
6180: EQUAL
6181: IFFALSE 6191
// sAI := true ;
6183: LD_ADDR_EXP 67
6187: PUSH
6188: LD_INT 1
6190: ST_TO_ADDR
// if p3 = 28 then
6191: LD_VAR 0 3
6195: PUSH
6196: LD_INT 28
6198: EQUAL
6199: IFFALSE 6209
// sCargo := true ;
6201: LD_ADDR_EXP 70
6205: PUSH
6206: LD_INT 1
6208: ST_TO_ADDR
// if p3 = 29 then
6209: LD_VAR 0 3
6213: PUSH
6214: LD_INT 29
6216: EQUAL
6217: IFFALSE 6227
// sDLaser := true ;
6219: LD_ADDR_EXP 71
6223: PUSH
6224: LD_INT 1
6226: ST_TO_ADDR
// if p3 = 30 then
6227: LD_VAR 0 3
6231: PUSH
6232: LD_INT 30
6234: EQUAL
6235: IFFALSE 6245
// sExchange := true ;
6237: LD_ADDR_EXP 72
6241: PUSH
6242: LD_INT 1
6244: ST_TO_ADDR
// if p3 = 31 then
6245: LD_VAR 0 3
6249: PUSH
6250: LD_INT 31
6252: EQUAL
6253: IFFALSE 6263
// sFac := true ;
6255: LD_ADDR_EXP 73
6259: PUSH
6260: LD_INT 1
6262: ST_TO_ADDR
// if p3 = 32 then
6263: LD_VAR 0 3
6267: PUSH
6268: LD_INT 32
6270: EQUAL
6271: IFFALSE 6281
// sPower := true ;
6273: LD_ADDR_EXP 74
6277: PUSH
6278: LD_INT 1
6280: ST_TO_ADDR
// if p3 = 33 then
6281: LD_VAR 0 3
6285: PUSH
6286: LD_INT 33
6288: EQUAL
6289: IFFALSE 6299
// sRandom := true ;
6291: LD_ADDR_EXP 75
6295: PUSH
6296: LD_INT 1
6298: ST_TO_ADDR
// if p3 = 34 then
6299: LD_VAR 0 3
6303: PUSH
6304: LD_INT 34
6306: EQUAL
6307: IFFALSE 6317
// sShield := true ;
6309: LD_ADDR_EXP 76
6313: PUSH
6314: LD_INT 1
6316: ST_TO_ADDR
// if p3 = 35 then
6317: LD_VAR 0 3
6321: PUSH
6322: LD_INT 35
6324: EQUAL
6325: IFFALSE 6335
// sTime := true ;
6327: LD_ADDR_EXP 77
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// if p3 = 36 then
6335: LD_VAR 0 3
6339: PUSH
6340: LD_INT 36
6342: EQUAL
6343: IFFALSE 6353
// sTools := true ;
6345: LD_ADDR_EXP 78
6349: PUSH
6350: LD_INT 1
6352: ST_TO_ADDR
// if p3 = 101 then
6353: LD_VAR 0 3
6357: PUSH
6358: LD_INT 101
6360: EQUAL
6361: IFFALSE 6371
// sSold := true ;
6363: LD_ADDR_EXP 43
6367: PUSH
6368: LD_INT 1
6370: ST_TO_ADDR
// if p3 = 102 then
6371: LD_VAR 0 3
6375: PUSH
6376: LD_INT 102
6378: EQUAL
6379: IFFALSE 6389
// sDiff := true ;
6381: LD_ADDR_EXP 44
6385: PUSH
6386: LD_INT 1
6388: ST_TO_ADDR
// if p3 = 103 then
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 103
6396: EQUAL
6397: IFFALSE 6407
// sFog := true ;
6399: LD_ADDR_EXP 47
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// if p3 = 104 then
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 104
6414: EQUAL
6415: IFFALSE 6425
// sReset := true ;
6417: LD_ADDR_EXP 48
6421: PUSH
6422: LD_INT 1
6424: ST_TO_ADDR
// if p3 = 105 then
6425: LD_VAR 0 3
6429: PUSH
6430: LD_INT 105
6432: EQUAL
6433: IFFALSE 6443
// sSun := true ;
6435: LD_ADDR_EXP 49
6439: PUSH
6440: LD_INT 1
6442: ST_TO_ADDR
// if p3 = 106 then
6443: LD_VAR 0 3
6447: PUSH
6448: LD_INT 106
6450: EQUAL
6451: IFFALSE 6461
// sTiger := true ;
6453: LD_ADDR_EXP 45
6457: PUSH
6458: LD_INT 1
6460: ST_TO_ADDR
// if p3 = 107 then
6461: LD_VAR 0 3
6465: PUSH
6466: LD_INT 107
6468: EQUAL
6469: IFFALSE 6479
// sBomb := true ;
6471: LD_ADDR_EXP 46
6475: PUSH
6476: LD_INT 1
6478: ST_TO_ADDR
// if p3 = 108 then
6479: LD_VAR 0 3
6483: PUSH
6484: LD_INT 108
6486: EQUAL
6487: IFFALSE 6497
// sWound := true ;
6489: LD_ADDR_EXP 54
6493: PUSH
6494: LD_INT 1
6496: ST_TO_ADDR
// if p3 = 109 then
6497: LD_VAR 0 3
6501: PUSH
6502: LD_INT 109
6504: EQUAL
6505: IFFALSE 6515
// sBetray := true ;
6507: LD_ADDR_EXP 58
6511: PUSH
6512: LD_INT 1
6514: ST_TO_ADDR
// if p3 = 110 then
6515: LD_VAR 0 3
6519: PUSH
6520: LD_INT 110
6522: EQUAL
6523: IFFALSE 6533
// sContamin := true ;
6525: LD_ADDR_EXP 59
6529: PUSH
6530: LD_INT 1
6532: ST_TO_ADDR
// if p3 = 111 then
6533: LD_VAR 0 3
6537: PUSH
6538: LD_INT 111
6540: EQUAL
6541: IFFALSE 6551
// sOil := true ;
6543: LD_ADDR_EXP 61
6547: PUSH
6548: LD_INT 1
6550: ST_TO_ADDR
// if p3 = 112 then
6551: LD_VAR 0 3
6555: PUSH
6556: LD_INT 112
6558: EQUAL
6559: IFFALSE 6569
// sStu := true ;
6561: LD_ADDR_EXP 65
6565: PUSH
6566: LD_INT 1
6568: ST_TO_ADDR
// if p3 = 113 then
6569: LD_VAR 0 3
6573: PUSH
6574: LD_INT 113
6576: EQUAL
6577: IFFALSE 6587
// sBazooka := true ;
6579: LD_ADDR_EXP 68
6583: PUSH
6584: LD_INT 1
6586: ST_TO_ADDR
// if p3 = 114 then
6587: LD_VAR 0 3
6591: PUSH
6592: LD_INT 114
6594: EQUAL
6595: IFFALSE 6605
// sMortar := true ;
6597: LD_ADDR_EXP 69
6601: PUSH
6602: LD_INT 1
6604: ST_TO_ADDR
// if p3 = 115 then
6605: LD_VAR 0 3
6609: PUSH
6610: LD_INT 115
6612: EQUAL
6613: IFFALSE 6623
// sRanger := true ;
6615: LD_ADDR_EXP 79
6619: PUSH
6620: LD_INT 1
6622: ST_TO_ADDR
// if p3 = 116 then
6623: LD_VAR 0 3
6627: PUSH
6628: LD_INT 116
6630: EQUAL
6631: IFFALSE 6641
// sComputer := true ;
6633: LD_ADDR_EXP 80
6637: PUSH
6638: LD_INT 1
6640: ST_TO_ADDR
// if p3 = 117 then
6641: LD_VAR 0 3
6645: PUSH
6646: LD_INT 117
6648: EQUAL
6649: IFFALSE 6659
// s30 := true ;
6651: LD_ADDR_EXP 81
6655: PUSH
6656: LD_INT 1
6658: ST_TO_ADDR
// if p3 = 118 then
6659: LD_VAR 0 3
6663: PUSH
6664: LD_INT 118
6666: EQUAL
6667: IFFALSE 6677
// s60 := true ;
6669: LD_ADDR_EXP 82
6673: PUSH
6674: LD_INT 1
6676: ST_TO_ADDR
// end ; if p2 = hack_mode then
6677: LD_VAR 0 2
6681: PUSH
6682: LD_INT 101
6684: EQUAL
6685: IFFALSE 6813
// begin case p3 of 1 :
6687: LD_VAR 0 3
6691: PUSH
6692: LD_INT 1
6694: DOUBLE
6695: EQUAL
6696: IFTRUE 6700
6698: GO 6707
6700: POP
// hHackUnlimitedResources ; 2 :
6701: CALL 19076 0 0
6705: GO 6813
6707: LD_INT 2
6709: DOUBLE
6710: EQUAL
6711: IFTRUE 6715
6713: GO 6722
6715: POP
// hHackSetLevel10 ; 3 :
6716: CALL 19209 0 0
6720: GO 6813
6722: LD_INT 3
6724: DOUBLE
6725: EQUAL
6726: IFTRUE 6730
6728: GO 6737
6730: POP
// hHackSetLevel10YourUnits ; 4 :
6731: CALL 19294 0 0
6735: GO 6813
6737: LD_INT 4
6739: DOUBLE
6740: EQUAL
6741: IFTRUE 6745
6743: GO 6752
6745: POP
// hHackInvincible ; 5 :
6746: CALL 19742 0 0
6750: GO 6813
6752: LD_INT 5
6754: DOUBLE
6755: EQUAL
6756: IFTRUE 6760
6758: GO 6767
6760: POP
// hHackInvisible ; 6 :
6761: CALL 19853 0 0
6765: GO 6813
6767: LD_INT 6
6769: DOUBLE
6770: EQUAL
6771: IFTRUE 6775
6773: GO 6782
6775: POP
// hHackChangeYourSide ; 7 :
6776: CALL 19910 0 0
6780: GO 6813
6782: LD_INT 7
6784: DOUBLE
6785: EQUAL
6786: IFTRUE 6790
6788: GO 6797
6790: POP
// hHackChangeUnitSide ; 8 :
6791: CALL 19952 0 0
6795: GO 6813
6797: LD_INT 8
6799: DOUBLE
6800: EQUAL
6801: IFTRUE 6805
6803: GO 6812
6805: POP
// hHackFog ; end ;
6806: CALL 20053 0 0
6810: GO 6813
6812: POP
// end ; if p2 = game_save_mode then
6813: LD_VAR 0 2
6817: PUSH
6818: LD_INT 102
6820: EQUAL
6821: IFFALSE 6878
// begin if p3 = 1 then
6823: LD_VAR 0 3
6827: PUSH
6828: LD_INT 1
6830: EQUAL
6831: IFFALSE 6843
// globalGameSaveCounter := p4 ;
6833: LD_ADDR_EXP 25
6837: PUSH
6838: LD_VAR 0 4
6842: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6843: LD_VAR 0 3
6847: PUSH
6848: LD_INT 2
6850: EQUAL
6851: IFFALSE 6859
6853: PUSH
6854: LD_EXP 25
6858: AND
6859: IFFALSE 6878
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6861: LD_STRING setGameSaveCounter(
6863: PUSH
6864: LD_EXP 25
6868: STR
6869: PUSH
6870: LD_STRING )
6872: STR
6873: PPUSH
6874: CALL_OW 559
// end ; end ;
6878: LD_VAR 0 7
6882: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6883: LD_INT 0
6885: PPUSH
// streamModeActive := false ;
6886: LD_ADDR_EXP 26
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// normalCounter := 36 ;
6894: LD_ADDR_EXP 27
6898: PUSH
6899: LD_INT 36
6901: ST_TO_ADDR
// hardcoreCounter := 18 ;
6902: LD_ADDR_EXP 28
6906: PUSH
6907: LD_INT 18
6909: ST_TO_ADDR
// sRocket := false ;
6910: LD_ADDR_EXP 31
6914: PUSH
6915: LD_INT 0
6917: ST_TO_ADDR
// sSpeed := false ;
6918: LD_ADDR_EXP 30
6922: PUSH
6923: LD_INT 0
6925: ST_TO_ADDR
// sEngine := false ;
6926: LD_ADDR_EXP 32
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// sSpec := false ;
6934: LD_ADDR_EXP 29
6938: PUSH
6939: LD_INT 0
6941: ST_TO_ADDR
// sLevel := false ;
6942: LD_ADDR_EXP 33
6946: PUSH
6947: LD_INT 0
6949: ST_TO_ADDR
// sArmoury := false ;
6950: LD_ADDR_EXP 34
6954: PUSH
6955: LD_INT 0
6957: ST_TO_ADDR
// sRadar := false ;
6958: LD_ADDR_EXP 35
6962: PUSH
6963: LD_INT 0
6965: ST_TO_ADDR
// sBunker := false ;
6966: LD_ADDR_EXP 36
6970: PUSH
6971: LD_INT 0
6973: ST_TO_ADDR
// sHack := false ;
6974: LD_ADDR_EXP 37
6978: PUSH
6979: LD_INT 0
6981: ST_TO_ADDR
// sFire := false ;
6982: LD_ADDR_EXP 38
6986: PUSH
6987: LD_INT 0
6989: ST_TO_ADDR
// sRefresh := false ;
6990: LD_ADDR_EXP 39
6994: PUSH
6995: LD_INT 0
6997: ST_TO_ADDR
// sExp := false ;
6998: LD_ADDR_EXP 40
7002: PUSH
7003: LD_INT 0
7005: ST_TO_ADDR
// sDepot := false ;
7006: LD_ADDR_EXP 41
7010: PUSH
7011: LD_INT 0
7013: ST_TO_ADDR
// sFlag := false ;
7014: LD_ADDR_EXP 42
7018: PUSH
7019: LD_INT 0
7021: ST_TO_ADDR
// sKamikadze := false ;
7022: LD_ADDR_EXP 50
7026: PUSH
7027: LD_INT 0
7029: ST_TO_ADDR
// sTroll := false ;
7030: LD_ADDR_EXP 51
7034: PUSH
7035: LD_INT 0
7037: ST_TO_ADDR
// sSlow := false ;
7038: LD_ADDR_EXP 52
7042: PUSH
7043: LD_INT 0
7045: ST_TO_ADDR
// sLack := false ;
7046: LD_ADDR_EXP 53
7050: PUSH
7051: LD_INT 0
7053: ST_TO_ADDR
// sTank := false ;
7054: LD_ADDR_EXP 55
7058: PUSH
7059: LD_INT 0
7061: ST_TO_ADDR
// sRemote := false ;
7062: LD_ADDR_EXP 56
7066: PUSH
7067: LD_INT 0
7069: ST_TO_ADDR
// sPowell := false ;
7070: LD_ADDR_EXP 57
7074: PUSH
7075: LD_INT 0
7077: ST_TO_ADDR
// sTeleport := false ;
7078: LD_ADDR_EXP 60
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// sOilTower := false ;
7086: LD_ADDR_EXP 62
7090: PUSH
7091: LD_INT 0
7093: ST_TO_ADDR
// sShovel := false ;
7094: LD_ADDR_EXP 63
7098: PUSH
7099: LD_INT 0
7101: ST_TO_ADDR
// sSheik := false ;
7102: LD_ADDR_EXP 64
7106: PUSH
7107: LD_INT 0
7109: ST_TO_ADDR
// sEarthquake := false ;
7110: LD_ADDR_EXP 66
7114: PUSH
7115: LD_INT 0
7117: ST_TO_ADDR
// sAI := false ;
7118: LD_ADDR_EXP 67
7122: PUSH
7123: LD_INT 0
7125: ST_TO_ADDR
// sCargo := false ;
7126: LD_ADDR_EXP 70
7130: PUSH
7131: LD_INT 0
7133: ST_TO_ADDR
// sDLaser := false ;
7134: LD_ADDR_EXP 71
7138: PUSH
7139: LD_INT 0
7141: ST_TO_ADDR
// sExchange := false ;
7142: LD_ADDR_EXP 72
7146: PUSH
7147: LD_INT 0
7149: ST_TO_ADDR
// sFac := false ;
7150: LD_ADDR_EXP 73
7154: PUSH
7155: LD_INT 0
7157: ST_TO_ADDR
// sPower := false ;
7158: LD_ADDR_EXP 74
7162: PUSH
7163: LD_INT 0
7165: ST_TO_ADDR
// sRandom := false ;
7166: LD_ADDR_EXP 75
7170: PUSH
7171: LD_INT 0
7173: ST_TO_ADDR
// sShield := false ;
7174: LD_ADDR_EXP 76
7178: PUSH
7179: LD_INT 0
7181: ST_TO_ADDR
// sTime := false ;
7182: LD_ADDR_EXP 77
7186: PUSH
7187: LD_INT 0
7189: ST_TO_ADDR
// sTools := false ;
7190: LD_ADDR_EXP 78
7194: PUSH
7195: LD_INT 0
7197: ST_TO_ADDR
// sSold := false ;
7198: LD_ADDR_EXP 43
7202: PUSH
7203: LD_INT 0
7205: ST_TO_ADDR
// sDiff := false ;
7206: LD_ADDR_EXP 44
7210: PUSH
7211: LD_INT 0
7213: ST_TO_ADDR
// sFog := false ;
7214: LD_ADDR_EXP 47
7218: PUSH
7219: LD_INT 0
7221: ST_TO_ADDR
// sReset := false ;
7222: LD_ADDR_EXP 48
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// sSun := false ;
7230: LD_ADDR_EXP 49
7234: PUSH
7235: LD_INT 0
7237: ST_TO_ADDR
// sTiger := false ;
7238: LD_ADDR_EXP 45
7242: PUSH
7243: LD_INT 0
7245: ST_TO_ADDR
// sBomb := false ;
7246: LD_ADDR_EXP 46
7250: PUSH
7251: LD_INT 0
7253: ST_TO_ADDR
// sWound := false ;
7254: LD_ADDR_EXP 54
7258: PUSH
7259: LD_INT 0
7261: ST_TO_ADDR
// sBetray := false ;
7262: LD_ADDR_EXP 58
7266: PUSH
7267: LD_INT 0
7269: ST_TO_ADDR
// sContamin := false ;
7270: LD_ADDR_EXP 59
7274: PUSH
7275: LD_INT 0
7277: ST_TO_ADDR
// sOil := false ;
7278: LD_ADDR_EXP 61
7282: PUSH
7283: LD_INT 0
7285: ST_TO_ADDR
// sStu := false ;
7286: LD_ADDR_EXP 65
7290: PUSH
7291: LD_INT 0
7293: ST_TO_ADDR
// sBazooka := false ;
7294: LD_ADDR_EXP 68
7298: PUSH
7299: LD_INT 0
7301: ST_TO_ADDR
// sMortar := false ;
7302: LD_ADDR_EXP 69
7306: PUSH
7307: LD_INT 0
7309: ST_TO_ADDR
// sRanger := false ;
7310: LD_ADDR_EXP 79
7314: PUSH
7315: LD_INT 0
7317: ST_TO_ADDR
// sComputer := false ;
7318: LD_ADDR_EXP 80
7322: PUSH
7323: LD_INT 0
7325: ST_TO_ADDR
// s30 := false ;
7326: LD_ADDR_EXP 81
7330: PUSH
7331: LD_INT 0
7333: ST_TO_ADDR
// s60 := false ;
7334: LD_ADDR_EXP 82
7338: PUSH
7339: LD_INT 0
7341: ST_TO_ADDR
// end ;
7342: LD_VAR 0 1
7346: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7347: LD_INT 0
7349: PPUSH
7350: PPUSH
7351: PPUSH
7352: PPUSH
7353: PPUSH
7354: PPUSH
7355: PPUSH
// result := [ ] ;
7356: LD_ADDR_VAR 0 2
7360: PUSH
7361: EMPTY
7362: ST_TO_ADDR
// if campaign_id = 1 then
7363: LD_OWVAR 69
7367: PUSH
7368: LD_INT 1
7370: EQUAL
7371: IFFALSE 10537
// begin case mission_number of 1 :
7373: LD_OWVAR 70
7377: PUSH
7378: LD_INT 1
7380: DOUBLE
7381: EQUAL
7382: IFTRUE 7386
7384: GO 7462
7386: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_INT 2
7394: PUSH
7395: LD_INT 4
7397: PUSH
7398: LD_INT 11
7400: PUSH
7401: LD_INT 12
7403: PUSH
7404: LD_INT 15
7406: PUSH
7407: LD_INT 16
7409: PUSH
7410: LD_INT 22
7412: PUSH
7413: LD_INT 23
7415: PUSH
7416: LD_INT 26
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: PUSH
7430: LD_INT 101
7432: PUSH
7433: LD_INT 102
7435: PUSH
7436: LD_INT 106
7438: PUSH
7439: LD_INT 116
7441: PUSH
7442: LD_INT 117
7444: PUSH
7445: LD_INT 118
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: ST_TO_ADDR
7460: GO 10535
7462: LD_INT 2
7464: DOUBLE
7465: EQUAL
7466: IFTRUE 7470
7468: GO 7554
7470: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7471: LD_ADDR_VAR 0 2
7475: PUSH
7476: LD_INT 2
7478: PUSH
7479: LD_INT 4
7481: PUSH
7482: LD_INT 11
7484: PUSH
7485: LD_INT 12
7487: PUSH
7488: LD_INT 15
7490: PUSH
7491: LD_INT 16
7493: PUSH
7494: LD_INT 22
7496: PUSH
7497: LD_INT 23
7499: PUSH
7500: LD_INT 26
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 101
7516: PUSH
7517: LD_INT 102
7519: PUSH
7520: LD_INT 105
7522: PUSH
7523: LD_INT 106
7525: PUSH
7526: LD_INT 108
7528: PUSH
7529: LD_INT 116
7531: PUSH
7532: LD_INT 117
7534: PUSH
7535: LD_INT 118
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: ST_TO_ADDR
7552: GO 10535
7554: LD_INT 3
7556: DOUBLE
7557: EQUAL
7558: IFTRUE 7562
7560: GO 7650
7562: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7563: LD_ADDR_VAR 0 2
7567: PUSH
7568: LD_INT 2
7570: PUSH
7571: LD_INT 4
7573: PUSH
7574: LD_INT 5
7576: PUSH
7577: LD_INT 11
7579: PUSH
7580: LD_INT 12
7582: PUSH
7583: LD_INT 15
7585: PUSH
7586: LD_INT 16
7588: PUSH
7589: LD_INT 22
7591: PUSH
7592: LD_INT 26
7594: PUSH
7595: LD_INT 36
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 101
7612: PUSH
7613: LD_INT 102
7615: PUSH
7616: LD_INT 105
7618: PUSH
7619: LD_INT 106
7621: PUSH
7622: LD_INT 108
7624: PUSH
7625: LD_INT 116
7627: PUSH
7628: LD_INT 117
7630: PUSH
7631: LD_INT 118
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: ST_TO_ADDR
7648: GO 10535
7650: LD_INT 4
7652: DOUBLE
7653: EQUAL
7654: IFTRUE 7658
7656: GO 7754
7658: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7659: LD_ADDR_VAR 0 2
7663: PUSH
7664: LD_INT 2
7666: PUSH
7667: LD_INT 4
7669: PUSH
7670: LD_INT 5
7672: PUSH
7673: LD_INT 8
7675: PUSH
7676: LD_INT 11
7678: PUSH
7679: LD_INT 12
7681: PUSH
7682: LD_INT 15
7684: PUSH
7685: LD_INT 16
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_INT 23
7693: PUSH
7694: LD_INT 26
7696: PUSH
7697: LD_INT 36
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 101
7716: PUSH
7717: LD_INT 102
7719: PUSH
7720: LD_INT 105
7722: PUSH
7723: LD_INT 106
7725: PUSH
7726: LD_INT 108
7728: PUSH
7729: LD_INT 116
7731: PUSH
7732: LD_INT 117
7734: PUSH
7735: LD_INT 118
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: ST_TO_ADDR
7752: GO 10535
7754: LD_INT 5
7756: DOUBLE
7757: EQUAL
7758: IFTRUE 7762
7760: GO 7874
7762: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7763: LD_ADDR_VAR 0 2
7767: PUSH
7768: LD_INT 2
7770: PUSH
7771: LD_INT 4
7773: PUSH
7774: LD_INT 5
7776: PUSH
7777: LD_INT 6
7779: PUSH
7780: LD_INT 8
7782: PUSH
7783: LD_INT 11
7785: PUSH
7786: LD_INT 12
7788: PUSH
7789: LD_INT 15
7791: PUSH
7792: LD_INT 16
7794: PUSH
7795: LD_INT 22
7797: PUSH
7798: LD_INT 23
7800: PUSH
7801: LD_INT 25
7803: PUSH
7804: LD_INT 26
7806: PUSH
7807: LD_INT 36
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: PUSH
7826: LD_INT 101
7828: PUSH
7829: LD_INT 102
7831: PUSH
7832: LD_INT 105
7834: PUSH
7835: LD_INT 106
7837: PUSH
7838: LD_INT 108
7840: PUSH
7841: LD_INT 109
7843: PUSH
7844: LD_INT 112
7846: PUSH
7847: LD_INT 116
7849: PUSH
7850: LD_INT 117
7852: PUSH
7853: LD_INT 118
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: ST_TO_ADDR
7872: GO 10535
7874: LD_INT 6
7876: DOUBLE
7877: EQUAL
7878: IFTRUE 7882
7880: GO 8014
7882: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7883: LD_ADDR_VAR 0 2
7887: PUSH
7888: LD_INT 2
7890: PUSH
7891: LD_INT 4
7893: PUSH
7894: LD_INT 5
7896: PUSH
7897: LD_INT 6
7899: PUSH
7900: LD_INT 8
7902: PUSH
7903: LD_INT 11
7905: PUSH
7906: LD_INT 12
7908: PUSH
7909: LD_INT 15
7911: PUSH
7912: LD_INT 16
7914: PUSH
7915: LD_INT 20
7917: PUSH
7918: LD_INT 21
7920: PUSH
7921: LD_INT 22
7923: PUSH
7924: LD_INT 23
7926: PUSH
7927: LD_INT 25
7929: PUSH
7930: LD_INT 26
7932: PUSH
7933: LD_INT 30
7935: PUSH
7936: LD_INT 31
7938: PUSH
7939: LD_INT 32
7941: PUSH
7942: LD_INT 36
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: PUSH
7966: LD_INT 101
7968: PUSH
7969: LD_INT 102
7971: PUSH
7972: LD_INT 105
7974: PUSH
7975: LD_INT 106
7977: PUSH
7978: LD_INT 108
7980: PUSH
7981: LD_INT 109
7983: PUSH
7984: LD_INT 112
7986: PUSH
7987: LD_INT 116
7989: PUSH
7990: LD_INT 117
7992: PUSH
7993: LD_INT 118
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: ST_TO_ADDR
8012: GO 10535
8014: LD_INT 7
8016: DOUBLE
8017: EQUAL
8018: IFTRUE 8022
8020: GO 8134
8022: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8023: LD_ADDR_VAR 0 2
8027: PUSH
8028: LD_INT 2
8030: PUSH
8031: LD_INT 4
8033: PUSH
8034: LD_INT 5
8036: PUSH
8037: LD_INT 7
8039: PUSH
8040: LD_INT 11
8042: PUSH
8043: LD_INT 12
8045: PUSH
8046: LD_INT 15
8048: PUSH
8049: LD_INT 16
8051: PUSH
8052: LD_INT 20
8054: PUSH
8055: LD_INT 21
8057: PUSH
8058: LD_INT 22
8060: PUSH
8061: LD_INT 23
8063: PUSH
8064: LD_INT 25
8066: PUSH
8067: LD_INT 26
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 101
8088: PUSH
8089: LD_INT 102
8091: PUSH
8092: LD_INT 103
8094: PUSH
8095: LD_INT 105
8097: PUSH
8098: LD_INT 106
8100: PUSH
8101: LD_INT 108
8103: PUSH
8104: LD_INT 112
8106: PUSH
8107: LD_INT 116
8109: PUSH
8110: LD_INT 117
8112: PUSH
8113: LD_INT 118
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: ST_TO_ADDR
8132: GO 10535
8134: LD_INT 8
8136: DOUBLE
8137: EQUAL
8138: IFTRUE 8142
8140: GO 8282
8142: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8143: LD_ADDR_VAR 0 2
8147: PUSH
8148: LD_INT 2
8150: PUSH
8151: LD_INT 4
8153: PUSH
8154: LD_INT 5
8156: PUSH
8157: LD_INT 6
8159: PUSH
8160: LD_INT 7
8162: PUSH
8163: LD_INT 8
8165: PUSH
8166: LD_INT 11
8168: PUSH
8169: LD_INT 12
8171: PUSH
8172: LD_INT 15
8174: PUSH
8175: LD_INT 16
8177: PUSH
8178: LD_INT 20
8180: PUSH
8181: LD_INT 21
8183: PUSH
8184: LD_INT 22
8186: PUSH
8187: LD_INT 23
8189: PUSH
8190: LD_INT 25
8192: PUSH
8193: LD_INT 26
8195: PUSH
8196: LD_INT 30
8198: PUSH
8199: LD_INT 31
8201: PUSH
8202: LD_INT 32
8204: PUSH
8205: LD_INT 36
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 101
8232: PUSH
8233: LD_INT 102
8235: PUSH
8236: LD_INT 103
8238: PUSH
8239: LD_INT 105
8241: PUSH
8242: LD_INT 106
8244: PUSH
8245: LD_INT 108
8247: PUSH
8248: LD_INT 109
8250: PUSH
8251: LD_INT 112
8253: PUSH
8254: LD_INT 116
8256: PUSH
8257: LD_INT 117
8259: PUSH
8260: LD_INT 118
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: ST_TO_ADDR
8280: GO 10535
8282: LD_INT 9
8284: DOUBLE
8285: EQUAL
8286: IFTRUE 8290
8288: GO 8438
8290: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8291: LD_ADDR_VAR 0 2
8295: PUSH
8296: LD_INT 2
8298: PUSH
8299: LD_INT 4
8301: PUSH
8302: LD_INT 5
8304: PUSH
8305: LD_INT 6
8307: PUSH
8308: LD_INT 7
8310: PUSH
8311: LD_INT 8
8313: PUSH
8314: LD_INT 11
8316: PUSH
8317: LD_INT 12
8319: PUSH
8320: LD_INT 15
8322: PUSH
8323: LD_INT 16
8325: PUSH
8326: LD_INT 20
8328: PUSH
8329: LD_INT 21
8331: PUSH
8332: LD_INT 22
8334: PUSH
8335: LD_INT 23
8337: PUSH
8338: LD_INT 25
8340: PUSH
8341: LD_INT 26
8343: PUSH
8344: LD_INT 28
8346: PUSH
8347: LD_INT 30
8349: PUSH
8350: LD_INT 31
8352: PUSH
8353: LD_INT 32
8355: PUSH
8356: LD_INT 36
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 101
8384: PUSH
8385: LD_INT 102
8387: PUSH
8388: LD_INT 103
8390: PUSH
8391: LD_INT 105
8393: PUSH
8394: LD_INT 106
8396: PUSH
8397: LD_INT 108
8399: PUSH
8400: LD_INT 109
8402: PUSH
8403: LD_INT 112
8405: PUSH
8406: LD_INT 114
8408: PUSH
8409: LD_INT 116
8411: PUSH
8412: LD_INT 117
8414: PUSH
8415: LD_INT 118
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: ST_TO_ADDR
8436: GO 10535
8438: LD_INT 10
8440: DOUBLE
8441: EQUAL
8442: IFTRUE 8446
8444: GO 8642
8446: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8447: LD_ADDR_VAR 0 2
8451: PUSH
8452: LD_INT 2
8454: PUSH
8455: LD_INT 4
8457: PUSH
8458: LD_INT 5
8460: PUSH
8461: LD_INT 6
8463: PUSH
8464: LD_INT 7
8466: PUSH
8467: LD_INT 8
8469: PUSH
8470: LD_INT 9
8472: PUSH
8473: LD_INT 10
8475: PUSH
8476: LD_INT 11
8478: PUSH
8479: LD_INT 12
8481: PUSH
8482: LD_INT 13
8484: PUSH
8485: LD_INT 14
8487: PUSH
8488: LD_INT 15
8490: PUSH
8491: LD_INT 16
8493: PUSH
8494: LD_INT 17
8496: PUSH
8497: LD_INT 18
8499: PUSH
8500: LD_INT 19
8502: PUSH
8503: LD_INT 20
8505: PUSH
8506: LD_INT 21
8508: PUSH
8509: LD_INT 22
8511: PUSH
8512: LD_INT 23
8514: PUSH
8515: LD_INT 24
8517: PUSH
8518: LD_INT 25
8520: PUSH
8521: LD_INT 26
8523: PUSH
8524: LD_INT 28
8526: PUSH
8527: LD_INT 30
8529: PUSH
8530: LD_INT 31
8532: PUSH
8533: LD_INT 32
8535: PUSH
8536: LD_INT 36
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 101
8572: PUSH
8573: LD_INT 102
8575: PUSH
8576: LD_INT 103
8578: PUSH
8579: LD_INT 104
8581: PUSH
8582: LD_INT 105
8584: PUSH
8585: LD_INT 106
8587: PUSH
8588: LD_INT 107
8590: PUSH
8591: LD_INT 108
8593: PUSH
8594: LD_INT 109
8596: PUSH
8597: LD_INT 110
8599: PUSH
8600: LD_INT 111
8602: PUSH
8603: LD_INT 112
8605: PUSH
8606: LD_INT 114
8608: PUSH
8609: LD_INT 116
8611: PUSH
8612: LD_INT 117
8614: PUSH
8615: LD_INT 118
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: ST_TO_ADDR
8640: GO 10535
8642: LD_INT 11
8644: DOUBLE
8645: EQUAL
8646: IFTRUE 8650
8648: GO 8854
8650: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8651: LD_ADDR_VAR 0 2
8655: PUSH
8656: LD_INT 2
8658: PUSH
8659: LD_INT 3
8661: PUSH
8662: LD_INT 4
8664: PUSH
8665: LD_INT 5
8667: PUSH
8668: LD_INT 6
8670: PUSH
8671: LD_INT 7
8673: PUSH
8674: LD_INT 8
8676: PUSH
8677: LD_INT 9
8679: PUSH
8680: LD_INT 10
8682: PUSH
8683: LD_INT 11
8685: PUSH
8686: LD_INT 12
8688: PUSH
8689: LD_INT 13
8691: PUSH
8692: LD_INT 14
8694: PUSH
8695: LD_INT 15
8697: PUSH
8698: LD_INT 16
8700: PUSH
8701: LD_INT 17
8703: PUSH
8704: LD_INT 18
8706: PUSH
8707: LD_INT 19
8709: PUSH
8710: LD_INT 20
8712: PUSH
8713: LD_INT 21
8715: PUSH
8716: LD_INT 22
8718: PUSH
8719: LD_INT 23
8721: PUSH
8722: LD_INT 24
8724: PUSH
8725: LD_INT 25
8727: PUSH
8728: LD_INT 26
8730: PUSH
8731: LD_INT 28
8733: PUSH
8734: LD_INT 30
8736: PUSH
8737: LD_INT 31
8739: PUSH
8740: LD_INT 32
8742: PUSH
8743: LD_INT 34
8745: PUSH
8746: LD_INT 36
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 101
8784: PUSH
8785: LD_INT 102
8787: PUSH
8788: LD_INT 103
8790: PUSH
8791: LD_INT 104
8793: PUSH
8794: LD_INT 105
8796: PUSH
8797: LD_INT 106
8799: PUSH
8800: LD_INT 107
8802: PUSH
8803: LD_INT 108
8805: PUSH
8806: LD_INT 109
8808: PUSH
8809: LD_INT 110
8811: PUSH
8812: LD_INT 111
8814: PUSH
8815: LD_INT 112
8817: PUSH
8818: LD_INT 114
8820: PUSH
8821: LD_INT 116
8823: PUSH
8824: LD_INT 117
8826: PUSH
8827: LD_INT 118
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: ST_TO_ADDR
8852: GO 10535
8854: LD_INT 12
8856: DOUBLE
8857: EQUAL
8858: IFTRUE 8862
8860: GO 9082
8862: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8863: LD_ADDR_VAR 0 2
8867: PUSH
8868: LD_INT 1
8870: PUSH
8871: LD_INT 2
8873: PUSH
8874: LD_INT 3
8876: PUSH
8877: LD_INT 4
8879: PUSH
8880: LD_INT 5
8882: PUSH
8883: LD_INT 6
8885: PUSH
8886: LD_INT 7
8888: PUSH
8889: LD_INT 8
8891: PUSH
8892: LD_INT 9
8894: PUSH
8895: LD_INT 10
8897: PUSH
8898: LD_INT 11
8900: PUSH
8901: LD_INT 12
8903: PUSH
8904: LD_INT 13
8906: PUSH
8907: LD_INT 14
8909: PUSH
8910: LD_INT 15
8912: PUSH
8913: LD_INT 16
8915: PUSH
8916: LD_INT 17
8918: PUSH
8919: LD_INT 18
8921: PUSH
8922: LD_INT 19
8924: PUSH
8925: LD_INT 20
8927: PUSH
8928: LD_INT 21
8930: PUSH
8931: LD_INT 22
8933: PUSH
8934: LD_INT 23
8936: PUSH
8937: LD_INT 24
8939: PUSH
8940: LD_INT 25
8942: PUSH
8943: LD_INT 26
8945: PUSH
8946: LD_INT 27
8948: PUSH
8949: LD_INT 28
8951: PUSH
8952: LD_INT 30
8954: PUSH
8955: LD_INT 31
8957: PUSH
8958: LD_INT 32
8960: PUSH
8961: LD_INT 33
8963: PUSH
8964: LD_INT 34
8966: PUSH
8967: LD_INT 36
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: PUSH
9006: LD_INT 101
9008: PUSH
9009: LD_INT 102
9011: PUSH
9012: LD_INT 103
9014: PUSH
9015: LD_INT 104
9017: PUSH
9018: LD_INT 105
9020: PUSH
9021: LD_INT 106
9023: PUSH
9024: LD_INT 107
9026: PUSH
9027: LD_INT 108
9029: PUSH
9030: LD_INT 109
9032: PUSH
9033: LD_INT 110
9035: PUSH
9036: LD_INT 111
9038: PUSH
9039: LD_INT 112
9041: PUSH
9042: LD_INT 113
9044: PUSH
9045: LD_INT 114
9047: PUSH
9048: LD_INT 116
9050: PUSH
9051: LD_INT 117
9053: PUSH
9054: LD_INT 118
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: ST_TO_ADDR
9080: GO 10535
9082: LD_INT 13
9084: DOUBLE
9085: EQUAL
9086: IFTRUE 9090
9088: GO 9298
9090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9091: LD_ADDR_VAR 0 2
9095: PUSH
9096: LD_INT 1
9098: PUSH
9099: LD_INT 2
9101: PUSH
9102: LD_INT 3
9104: PUSH
9105: LD_INT 4
9107: PUSH
9108: LD_INT 5
9110: PUSH
9111: LD_INT 8
9113: PUSH
9114: LD_INT 9
9116: PUSH
9117: LD_INT 10
9119: PUSH
9120: LD_INT 11
9122: PUSH
9123: LD_INT 12
9125: PUSH
9126: LD_INT 14
9128: PUSH
9129: LD_INT 15
9131: PUSH
9132: LD_INT 16
9134: PUSH
9135: LD_INT 17
9137: PUSH
9138: LD_INT 18
9140: PUSH
9141: LD_INT 19
9143: PUSH
9144: LD_INT 20
9146: PUSH
9147: LD_INT 21
9149: PUSH
9150: LD_INT 22
9152: PUSH
9153: LD_INT 23
9155: PUSH
9156: LD_INT 24
9158: PUSH
9159: LD_INT 25
9161: PUSH
9162: LD_INT 26
9164: PUSH
9165: LD_INT 27
9167: PUSH
9168: LD_INT 28
9170: PUSH
9171: LD_INT 30
9173: PUSH
9174: LD_INT 31
9176: PUSH
9177: LD_INT 32
9179: PUSH
9180: LD_INT 33
9182: PUSH
9183: LD_INT 34
9185: PUSH
9186: LD_INT 36
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 101
9224: PUSH
9225: LD_INT 102
9227: PUSH
9228: LD_INT 103
9230: PUSH
9231: LD_INT 104
9233: PUSH
9234: LD_INT 105
9236: PUSH
9237: LD_INT 106
9239: PUSH
9240: LD_INT 107
9242: PUSH
9243: LD_INT 108
9245: PUSH
9246: LD_INT 109
9248: PUSH
9249: LD_INT 110
9251: PUSH
9252: LD_INT 111
9254: PUSH
9255: LD_INT 112
9257: PUSH
9258: LD_INT 113
9260: PUSH
9261: LD_INT 114
9263: PUSH
9264: LD_INT 116
9266: PUSH
9267: LD_INT 117
9269: PUSH
9270: LD_INT 118
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: ST_TO_ADDR
9296: GO 10535
9298: LD_INT 14
9300: DOUBLE
9301: EQUAL
9302: IFTRUE 9306
9304: GO 9530
9306: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9307: LD_ADDR_VAR 0 2
9311: PUSH
9312: LD_INT 1
9314: PUSH
9315: LD_INT 2
9317: PUSH
9318: LD_INT 3
9320: PUSH
9321: LD_INT 4
9323: PUSH
9324: LD_INT 5
9326: PUSH
9327: LD_INT 6
9329: PUSH
9330: LD_INT 7
9332: PUSH
9333: LD_INT 8
9335: PUSH
9336: LD_INT 9
9338: PUSH
9339: LD_INT 10
9341: PUSH
9342: LD_INT 11
9344: PUSH
9345: LD_INT 12
9347: PUSH
9348: LD_INT 13
9350: PUSH
9351: LD_INT 14
9353: PUSH
9354: LD_INT 15
9356: PUSH
9357: LD_INT 16
9359: PUSH
9360: LD_INT 17
9362: PUSH
9363: LD_INT 18
9365: PUSH
9366: LD_INT 19
9368: PUSH
9369: LD_INT 20
9371: PUSH
9372: LD_INT 21
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_INT 23
9380: PUSH
9381: LD_INT 24
9383: PUSH
9384: LD_INT 25
9386: PUSH
9387: LD_INT 26
9389: PUSH
9390: LD_INT 27
9392: PUSH
9393: LD_INT 28
9395: PUSH
9396: LD_INT 29
9398: PUSH
9399: LD_INT 30
9401: PUSH
9402: LD_INT 31
9404: PUSH
9405: LD_INT 32
9407: PUSH
9408: LD_INT 33
9410: PUSH
9411: LD_INT 34
9413: PUSH
9414: LD_INT 36
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: PUSH
9454: LD_INT 101
9456: PUSH
9457: LD_INT 102
9459: PUSH
9460: LD_INT 103
9462: PUSH
9463: LD_INT 104
9465: PUSH
9466: LD_INT 105
9468: PUSH
9469: LD_INT 106
9471: PUSH
9472: LD_INT 107
9474: PUSH
9475: LD_INT 108
9477: PUSH
9478: LD_INT 109
9480: PUSH
9481: LD_INT 110
9483: PUSH
9484: LD_INT 111
9486: PUSH
9487: LD_INT 112
9489: PUSH
9490: LD_INT 113
9492: PUSH
9493: LD_INT 114
9495: PUSH
9496: LD_INT 116
9498: PUSH
9499: LD_INT 117
9501: PUSH
9502: LD_INT 118
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: ST_TO_ADDR
9528: GO 10535
9530: LD_INT 15
9532: DOUBLE
9533: EQUAL
9534: IFTRUE 9538
9536: GO 9762
9538: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9539: LD_ADDR_VAR 0 2
9543: PUSH
9544: LD_INT 1
9546: PUSH
9547: LD_INT 2
9549: PUSH
9550: LD_INT 3
9552: PUSH
9553: LD_INT 4
9555: PUSH
9556: LD_INT 5
9558: PUSH
9559: LD_INT 6
9561: PUSH
9562: LD_INT 7
9564: PUSH
9565: LD_INT 8
9567: PUSH
9568: LD_INT 9
9570: PUSH
9571: LD_INT 10
9573: PUSH
9574: LD_INT 11
9576: PUSH
9577: LD_INT 12
9579: PUSH
9580: LD_INT 13
9582: PUSH
9583: LD_INT 14
9585: PUSH
9586: LD_INT 15
9588: PUSH
9589: LD_INT 16
9591: PUSH
9592: LD_INT 17
9594: PUSH
9595: LD_INT 18
9597: PUSH
9598: LD_INT 19
9600: PUSH
9601: LD_INT 20
9603: PUSH
9604: LD_INT 21
9606: PUSH
9607: LD_INT 22
9609: PUSH
9610: LD_INT 23
9612: PUSH
9613: LD_INT 24
9615: PUSH
9616: LD_INT 25
9618: PUSH
9619: LD_INT 26
9621: PUSH
9622: LD_INT 27
9624: PUSH
9625: LD_INT 28
9627: PUSH
9628: LD_INT 29
9630: PUSH
9631: LD_INT 30
9633: PUSH
9634: LD_INT 31
9636: PUSH
9637: LD_INT 32
9639: PUSH
9640: LD_INT 33
9642: PUSH
9643: LD_INT 34
9645: PUSH
9646: LD_INT 36
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: PUSH
9686: LD_INT 101
9688: PUSH
9689: LD_INT 102
9691: PUSH
9692: LD_INT 103
9694: PUSH
9695: LD_INT 104
9697: PUSH
9698: LD_INT 105
9700: PUSH
9701: LD_INT 106
9703: PUSH
9704: LD_INT 107
9706: PUSH
9707: LD_INT 108
9709: PUSH
9710: LD_INT 109
9712: PUSH
9713: LD_INT 110
9715: PUSH
9716: LD_INT 111
9718: PUSH
9719: LD_INT 112
9721: PUSH
9722: LD_INT 113
9724: PUSH
9725: LD_INT 114
9727: PUSH
9728: LD_INT 116
9730: PUSH
9731: LD_INT 117
9733: PUSH
9734: LD_INT 118
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: ST_TO_ADDR
9760: GO 10535
9762: LD_INT 16
9764: DOUBLE
9765: EQUAL
9766: IFTRUE 9770
9768: GO 9906
9770: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9771: LD_ADDR_VAR 0 2
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: LD_INT 4
9781: PUSH
9782: LD_INT 5
9784: PUSH
9785: LD_INT 7
9787: PUSH
9788: LD_INT 11
9790: PUSH
9791: LD_INT 12
9793: PUSH
9794: LD_INT 15
9796: PUSH
9797: LD_INT 16
9799: PUSH
9800: LD_INT 20
9802: PUSH
9803: LD_INT 21
9805: PUSH
9806: LD_INT 22
9808: PUSH
9809: LD_INT 23
9811: PUSH
9812: LD_INT 25
9814: PUSH
9815: LD_INT 26
9817: PUSH
9818: LD_INT 30
9820: PUSH
9821: LD_INT 31
9823: PUSH
9824: LD_INT 32
9826: PUSH
9827: LD_INT 33
9829: PUSH
9830: LD_INT 34
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 101
9856: PUSH
9857: LD_INT 102
9859: PUSH
9860: LD_INT 103
9862: PUSH
9863: LD_INT 106
9865: PUSH
9866: LD_INT 108
9868: PUSH
9869: LD_INT 112
9871: PUSH
9872: LD_INT 113
9874: PUSH
9875: LD_INT 114
9877: PUSH
9878: LD_INT 116
9880: PUSH
9881: LD_INT 117
9883: PUSH
9884: LD_INT 118
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: ST_TO_ADDR
9904: GO 10535
9906: LD_INT 17
9908: DOUBLE
9909: EQUAL
9910: IFTRUE 9914
9912: GO 10138
9914: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9915: LD_ADDR_VAR 0 2
9919: PUSH
9920: LD_INT 1
9922: PUSH
9923: LD_INT 2
9925: PUSH
9926: LD_INT 3
9928: PUSH
9929: LD_INT 4
9931: PUSH
9932: LD_INT 5
9934: PUSH
9935: LD_INT 6
9937: PUSH
9938: LD_INT 7
9940: PUSH
9941: LD_INT 8
9943: PUSH
9944: LD_INT 9
9946: PUSH
9947: LD_INT 10
9949: PUSH
9950: LD_INT 11
9952: PUSH
9953: LD_INT 12
9955: PUSH
9956: LD_INT 13
9958: PUSH
9959: LD_INT 14
9961: PUSH
9962: LD_INT 15
9964: PUSH
9965: LD_INT 16
9967: PUSH
9968: LD_INT 17
9970: PUSH
9971: LD_INT 18
9973: PUSH
9974: LD_INT 19
9976: PUSH
9977: LD_INT 20
9979: PUSH
9980: LD_INT 21
9982: PUSH
9983: LD_INT 22
9985: PUSH
9986: LD_INT 23
9988: PUSH
9989: LD_INT 24
9991: PUSH
9992: LD_INT 25
9994: PUSH
9995: LD_INT 26
9997: PUSH
9998: LD_INT 27
10000: PUSH
10001: LD_INT 28
10003: PUSH
10004: LD_INT 29
10006: PUSH
10007: LD_INT 30
10009: PUSH
10010: LD_INT 31
10012: PUSH
10013: LD_INT 32
10015: PUSH
10016: LD_INT 33
10018: PUSH
10019: LD_INT 34
10021: PUSH
10022: LD_INT 36
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: PUSH
10062: LD_INT 101
10064: PUSH
10065: LD_INT 102
10067: PUSH
10068: LD_INT 103
10070: PUSH
10071: LD_INT 104
10073: PUSH
10074: LD_INT 105
10076: PUSH
10077: LD_INT 106
10079: PUSH
10080: LD_INT 107
10082: PUSH
10083: LD_INT 108
10085: PUSH
10086: LD_INT 109
10088: PUSH
10089: LD_INT 110
10091: PUSH
10092: LD_INT 111
10094: PUSH
10095: LD_INT 112
10097: PUSH
10098: LD_INT 113
10100: PUSH
10101: LD_INT 114
10103: PUSH
10104: LD_INT 116
10106: PUSH
10107: LD_INT 117
10109: PUSH
10110: LD_INT 118
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: ST_TO_ADDR
10136: GO 10535
10138: LD_INT 18
10140: DOUBLE
10141: EQUAL
10142: IFTRUE 10146
10144: GO 10294
10146: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10147: LD_ADDR_VAR 0 2
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: LD_INT 4
10157: PUSH
10158: LD_INT 5
10160: PUSH
10161: LD_INT 7
10163: PUSH
10164: LD_INT 11
10166: PUSH
10167: LD_INT 12
10169: PUSH
10170: LD_INT 15
10172: PUSH
10173: LD_INT 16
10175: PUSH
10176: LD_INT 20
10178: PUSH
10179: LD_INT 21
10181: PUSH
10182: LD_INT 22
10184: PUSH
10185: LD_INT 23
10187: PUSH
10188: LD_INT 25
10190: PUSH
10191: LD_INT 26
10193: PUSH
10194: LD_INT 30
10196: PUSH
10197: LD_INT 31
10199: PUSH
10200: LD_INT 32
10202: PUSH
10203: LD_INT 33
10205: PUSH
10206: LD_INT 34
10208: PUSH
10209: LD_INT 35
10211: PUSH
10212: LD_INT 36
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 101
10240: PUSH
10241: LD_INT 102
10243: PUSH
10244: LD_INT 103
10246: PUSH
10247: LD_INT 106
10249: PUSH
10250: LD_INT 108
10252: PUSH
10253: LD_INT 112
10255: PUSH
10256: LD_INT 113
10258: PUSH
10259: LD_INT 114
10261: PUSH
10262: LD_INT 115
10264: PUSH
10265: LD_INT 116
10267: PUSH
10268: LD_INT 117
10270: PUSH
10271: LD_INT 118
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: ST_TO_ADDR
10292: GO 10535
10294: LD_INT 19
10296: DOUBLE
10297: EQUAL
10298: IFTRUE 10302
10300: GO 10534
10302: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10303: LD_ADDR_VAR 0 2
10307: PUSH
10308: LD_INT 1
10310: PUSH
10311: LD_INT 2
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: LD_INT 4
10319: PUSH
10320: LD_INT 5
10322: PUSH
10323: LD_INT 6
10325: PUSH
10326: LD_INT 7
10328: PUSH
10329: LD_INT 8
10331: PUSH
10332: LD_INT 9
10334: PUSH
10335: LD_INT 10
10337: PUSH
10338: LD_INT 11
10340: PUSH
10341: LD_INT 12
10343: PUSH
10344: LD_INT 13
10346: PUSH
10347: LD_INT 14
10349: PUSH
10350: LD_INT 15
10352: PUSH
10353: LD_INT 16
10355: PUSH
10356: LD_INT 17
10358: PUSH
10359: LD_INT 18
10361: PUSH
10362: LD_INT 19
10364: PUSH
10365: LD_INT 20
10367: PUSH
10368: LD_INT 21
10370: PUSH
10371: LD_INT 22
10373: PUSH
10374: LD_INT 23
10376: PUSH
10377: LD_INT 24
10379: PUSH
10380: LD_INT 25
10382: PUSH
10383: LD_INT 26
10385: PUSH
10386: LD_INT 27
10388: PUSH
10389: LD_INT 28
10391: PUSH
10392: LD_INT 29
10394: PUSH
10395: LD_INT 30
10397: PUSH
10398: LD_INT 31
10400: PUSH
10401: LD_INT 32
10403: PUSH
10404: LD_INT 33
10406: PUSH
10407: LD_INT 34
10409: PUSH
10410: LD_INT 35
10412: PUSH
10413: LD_INT 36
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 101
10456: PUSH
10457: LD_INT 102
10459: PUSH
10460: LD_INT 103
10462: PUSH
10463: LD_INT 104
10465: PUSH
10466: LD_INT 105
10468: PUSH
10469: LD_INT 106
10471: PUSH
10472: LD_INT 107
10474: PUSH
10475: LD_INT 108
10477: PUSH
10478: LD_INT 109
10480: PUSH
10481: LD_INT 110
10483: PUSH
10484: LD_INT 111
10486: PUSH
10487: LD_INT 112
10489: PUSH
10490: LD_INT 113
10492: PUSH
10493: LD_INT 114
10495: PUSH
10496: LD_INT 115
10498: PUSH
10499: LD_INT 116
10501: PUSH
10502: LD_INT 117
10504: PUSH
10505: LD_INT 118
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: ST_TO_ADDR
10532: GO 10535
10534: POP
// end else
10535: GO 10766
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10537: LD_ADDR_VAR 0 2
10541: PUSH
10542: LD_INT 1
10544: PUSH
10545: LD_INT 2
10547: PUSH
10548: LD_INT 3
10550: PUSH
10551: LD_INT 4
10553: PUSH
10554: LD_INT 5
10556: PUSH
10557: LD_INT 6
10559: PUSH
10560: LD_INT 7
10562: PUSH
10563: LD_INT 8
10565: PUSH
10566: LD_INT 9
10568: PUSH
10569: LD_INT 10
10571: PUSH
10572: LD_INT 11
10574: PUSH
10575: LD_INT 12
10577: PUSH
10578: LD_INT 13
10580: PUSH
10581: LD_INT 14
10583: PUSH
10584: LD_INT 15
10586: PUSH
10587: LD_INT 16
10589: PUSH
10590: LD_INT 17
10592: PUSH
10593: LD_INT 18
10595: PUSH
10596: LD_INT 19
10598: PUSH
10599: LD_INT 20
10601: PUSH
10602: LD_INT 21
10604: PUSH
10605: LD_INT 22
10607: PUSH
10608: LD_INT 23
10610: PUSH
10611: LD_INT 24
10613: PUSH
10614: LD_INT 25
10616: PUSH
10617: LD_INT 26
10619: PUSH
10620: LD_INT 27
10622: PUSH
10623: LD_INT 28
10625: PUSH
10626: LD_INT 29
10628: PUSH
10629: LD_INT 30
10631: PUSH
10632: LD_INT 31
10634: PUSH
10635: LD_INT 32
10637: PUSH
10638: LD_INT 33
10640: PUSH
10641: LD_INT 34
10643: PUSH
10644: LD_INT 35
10646: PUSH
10647: LD_INT 36
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 101
10690: PUSH
10691: LD_INT 102
10693: PUSH
10694: LD_INT 103
10696: PUSH
10697: LD_INT 104
10699: PUSH
10700: LD_INT 105
10702: PUSH
10703: LD_INT 106
10705: PUSH
10706: LD_INT 107
10708: PUSH
10709: LD_INT 108
10711: PUSH
10712: LD_INT 109
10714: PUSH
10715: LD_INT 110
10717: PUSH
10718: LD_INT 111
10720: PUSH
10721: LD_INT 112
10723: PUSH
10724: LD_INT 113
10726: PUSH
10727: LD_INT 114
10729: PUSH
10730: LD_INT 115
10732: PUSH
10733: LD_INT 116
10735: PUSH
10736: LD_INT 117
10738: PUSH
10739: LD_INT 118
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: ST_TO_ADDR
// if result then
10766: LD_VAR 0 2
10770: IFFALSE 11556
// begin normal :=  ;
10772: LD_ADDR_VAR 0 5
10776: PUSH
10777: LD_STRING 
10779: ST_TO_ADDR
// hardcore :=  ;
10780: LD_ADDR_VAR 0 6
10784: PUSH
10785: LD_STRING 
10787: ST_TO_ADDR
// active :=  ;
10788: LD_ADDR_VAR 0 7
10792: PUSH
10793: LD_STRING 
10795: ST_TO_ADDR
// for i = 1 to normalCounter do
10796: LD_ADDR_VAR 0 8
10800: PUSH
10801: DOUBLE
10802: LD_INT 1
10804: DEC
10805: ST_TO_ADDR
10806: LD_EXP 27
10810: PUSH
10811: FOR_TO
10812: IFFALSE 10913
// begin tmp := 0 ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_STRING 0
10821: ST_TO_ADDR
// if result [ 1 ] then
10822: LD_VAR 0 2
10826: PUSH
10827: LD_INT 1
10829: ARRAY
10830: IFFALSE 10895
// if result [ 1 ] [ 1 ] = i then
10832: LD_VAR 0 2
10836: PUSH
10837: LD_INT 1
10839: ARRAY
10840: PUSH
10841: LD_INT 1
10843: ARRAY
10844: PUSH
10845: LD_VAR 0 8
10849: EQUAL
10850: IFFALSE 10895
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10852: LD_ADDR_VAR 0 2
10856: PUSH
10857: LD_VAR 0 2
10861: PPUSH
10862: LD_INT 1
10864: PPUSH
10865: LD_VAR 0 2
10869: PUSH
10870: LD_INT 1
10872: ARRAY
10873: PPUSH
10874: LD_INT 1
10876: PPUSH
10877: CALL_OW 3
10881: PPUSH
10882: CALL_OW 1
10886: ST_TO_ADDR
// tmp := 1 ;
10887: LD_ADDR_VAR 0 3
10891: PUSH
10892: LD_STRING 1
10894: ST_TO_ADDR
// end ; normal := normal & tmp ;
10895: LD_ADDR_VAR 0 5
10899: PUSH
10900: LD_VAR 0 5
10904: PUSH
10905: LD_VAR 0 3
10909: STR
10910: ST_TO_ADDR
// end ;
10911: GO 10811
10913: POP
10914: POP
// for i = 1 to hardcoreCounter do
10915: LD_ADDR_VAR 0 8
10919: PUSH
10920: DOUBLE
10921: LD_INT 1
10923: DEC
10924: ST_TO_ADDR
10925: LD_EXP 28
10929: PUSH
10930: FOR_TO
10931: IFFALSE 11036
// begin tmp := 0 ;
10933: LD_ADDR_VAR 0 3
10937: PUSH
10938: LD_STRING 0
10940: ST_TO_ADDR
// if result [ 2 ] then
10941: LD_VAR 0 2
10945: PUSH
10946: LD_INT 2
10948: ARRAY
10949: IFFALSE 11018
// if result [ 2 ] [ 1 ] = 100 + i then
10951: LD_VAR 0 2
10955: PUSH
10956: LD_INT 2
10958: ARRAY
10959: PUSH
10960: LD_INT 1
10962: ARRAY
10963: PUSH
10964: LD_INT 100
10966: PUSH
10967: LD_VAR 0 8
10971: PLUS
10972: EQUAL
10973: IFFALSE 11018
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10975: LD_ADDR_VAR 0 2
10979: PUSH
10980: LD_VAR 0 2
10984: PPUSH
10985: LD_INT 2
10987: PPUSH
10988: LD_VAR 0 2
10992: PUSH
10993: LD_INT 2
10995: ARRAY
10996: PPUSH
10997: LD_INT 1
10999: PPUSH
11000: CALL_OW 3
11004: PPUSH
11005: CALL_OW 1
11009: ST_TO_ADDR
// tmp := 1 ;
11010: LD_ADDR_VAR 0 3
11014: PUSH
11015: LD_STRING 1
11017: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11018: LD_ADDR_VAR 0 6
11022: PUSH
11023: LD_VAR 0 6
11027: PUSH
11028: LD_VAR 0 3
11032: STR
11033: ST_TO_ADDR
// end ;
11034: GO 10930
11036: POP
11037: POP
// if isGameLoad then
11038: LD_VAR 0 1
11042: IFFALSE 11517
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11044: LD_ADDR_VAR 0 4
11048: PUSH
11049: LD_EXP 31
11053: PUSH
11054: LD_EXP 30
11058: PUSH
11059: LD_EXP 32
11063: PUSH
11064: LD_EXP 29
11068: PUSH
11069: LD_EXP 33
11073: PUSH
11074: LD_EXP 34
11078: PUSH
11079: LD_EXP 35
11083: PUSH
11084: LD_EXP 36
11088: PUSH
11089: LD_EXP 37
11093: PUSH
11094: LD_EXP 38
11098: PUSH
11099: LD_EXP 39
11103: PUSH
11104: LD_EXP 40
11108: PUSH
11109: LD_EXP 41
11113: PUSH
11114: LD_EXP 42
11118: PUSH
11119: LD_EXP 50
11123: PUSH
11124: LD_EXP 51
11128: PUSH
11129: LD_EXP 52
11133: PUSH
11134: LD_EXP 53
11138: PUSH
11139: LD_EXP 55
11143: PUSH
11144: LD_EXP 56
11148: PUSH
11149: LD_EXP 57
11153: PUSH
11154: LD_EXP 60
11158: PUSH
11159: LD_EXP 62
11163: PUSH
11164: LD_EXP 63
11168: PUSH
11169: LD_EXP 64
11173: PUSH
11174: LD_EXP 66
11178: PUSH
11179: LD_EXP 67
11183: PUSH
11184: LD_EXP 70
11188: PUSH
11189: LD_EXP 71
11193: PUSH
11194: LD_EXP 72
11198: PUSH
11199: LD_EXP 73
11203: PUSH
11204: LD_EXP 74
11208: PUSH
11209: LD_EXP 75
11213: PUSH
11214: LD_EXP 76
11218: PUSH
11219: LD_EXP 77
11223: PUSH
11224: LD_EXP 78
11228: PUSH
11229: LD_EXP 43
11233: PUSH
11234: LD_EXP 44
11238: PUSH
11239: LD_EXP 47
11243: PUSH
11244: LD_EXP 48
11248: PUSH
11249: LD_EXP 49
11253: PUSH
11254: LD_EXP 45
11258: PUSH
11259: LD_EXP 46
11263: PUSH
11264: LD_EXP 54
11268: PUSH
11269: LD_EXP 58
11273: PUSH
11274: LD_EXP 59
11278: PUSH
11279: LD_EXP 61
11283: PUSH
11284: LD_EXP 65
11288: PUSH
11289: LD_EXP 68
11293: PUSH
11294: LD_EXP 69
11298: PUSH
11299: LD_EXP 79
11303: PUSH
11304: LD_EXP 80
11308: PUSH
11309: LD_EXP 81
11313: PUSH
11314: LD_EXP 82
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: ST_TO_ADDR
// tmp :=  ;
11375: LD_ADDR_VAR 0 3
11379: PUSH
11380: LD_STRING 
11382: ST_TO_ADDR
// for i = 1 to normalCounter do
11383: LD_ADDR_VAR 0 8
11387: PUSH
11388: DOUBLE
11389: LD_INT 1
11391: DEC
11392: ST_TO_ADDR
11393: LD_EXP 27
11397: PUSH
11398: FOR_TO
11399: IFFALSE 11435
// begin if flags [ i ] then
11401: LD_VAR 0 4
11405: PUSH
11406: LD_VAR 0 8
11410: ARRAY
11411: IFFALSE 11433
// tmp := tmp & i & ; ;
11413: LD_ADDR_VAR 0 3
11417: PUSH
11418: LD_VAR 0 3
11422: PUSH
11423: LD_VAR 0 8
11427: STR
11428: PUSH
11429: LD_STRING ;
11431: STR
11432: ST_TO_ADDR
// end ;
11433: GO 11398
11435: POP
11436: POP
// for i = 1 to hardcoreCounter do
11437: LD_ADDR_VAR 0 8
11441: PUSH
11442: DOUBLE
11443: LD_INT 1
11445: DEC
11446: ST_TO_ADDR
11447: LD_EXP 28
11451: PUSH
11452: FOR_TO
11453: IFFALSE 11499
// begin if flags [ normalCounter + i ] then
11455: LD_VAR 0 4
11459: PUSH
11460: LD_EXP 27
11464: PUSH
11465: LD_VAR 0 8
11469: PLUS
11470: ARRAY
11471: IFFALSE 11497
// tmp := tmp & ( 100 + i ) & ; ;
11473: LD_ADDR_VAR 0 3
11477: PUSH
11478: LD_VAR 0 3
11482: PUSH
11483: LD_INT 100
11485: PUSH
11486: LD_VAR 0 8
11490: PLUS
11491: STR
11492: PUSH
11493: LD_STRING ;
11495: STR
11496: ST_TO_ADDR
// end ;
11497: GO 11452
11499: POP
11500: POP
// if tmp then
11501: LD_VAR 0 3
11505: IFFALSE 11517
// active := tmp ;
11507: LD_ADDR_VAR 0 7
11511: PUSH
11512: LD_VAR 0 3
11516: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11517: LD_STRING getStreamItemsFromMission("
11519: PUSH
11520: LD_VAR 0 5
11524: STR
11525: PUSH
11526: LD_STRING ","
11528: STR
11529: PUSH
11530: LD_VAR 0 6
11534: STR
11535: PUSH
11536: LD_STRING ","
11538: STR
11539: PUSH
11540: LD_VAR 0 7
11544: STR
11545: PUSH
11546: LD_STRING ")
11548: STR
11549: PPUSH
11550: CALL_OW 559
// end else
11554: GO 11563
// ToLua ( getStreamItemsFromMission("","","") ) ;
11556: LD_STRING getStreamItemsFromMission("","","")
11558: PPUSH
11559: CALL_OW 559
// end ;
11563: LD_VAR 0 2
11567: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11568: LD_EXP 26
11572: IFFALSE 11580
11574: PUSH
11575: LD_EXP 31
11579: AND
11580: IFFALSE 11704
11582: GO 11584
11584: DISABLE
11585: LD_INT 0
11587: PPUSH
11588: PPUSH
// begin enable ;
11589: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11590: LD_ADDR_VAR 0 2
11594: PUSH
11595: LD_INT 22
11597: PUSH
11598: LD_OWVAR 2
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 2
11609: PUSH
11610: LD_INT 34
11612: PUSH
11613: LD_INT 7
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 34
11622: PUSH
11623: LD_INT 45
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 34
11632: PUSH
11633: LD_INT 28
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 34
11642: PUSH
11643: LD_INT 47
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 69
11665: ST_TO_ADDR
// if not tmp then
11666: LD_VAR 0 2
11670: NOT
11671: IFFALSE 11675
// exit ;
11673: GO 11704
// for i in tmp do
11675: LD_ADDR_VAR 0 1
11679: PUSH
11680: LD_VAR 0 2
11684: PUSH
11685: FOR_IN
11686: IFFALSE 11702
// begin SetLives ( i , 0 ) ;
11688: LD_VAR 0 1
11692: PPUSH
11693: LD_INT 0
11695: PPUSH
11696: CALL_OW 234
// end ;
11700: GO 11685
11702: POP
11703: POP
// end ;
11704: PPOPN 2
11706: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11707: LD_EXP 26
11711: IFFALSE 11719
11713: PUSH
11714: LD_EXP 32
11718: AND
11719: IFFALSE 11803
11721: GO 11723
11723: DISABLE
11724: LD_INT 0
11726: PPUSH
11727: PPUSH
// begin enable ;
11728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11729: LD_ADDR_VAR 0 2
11733: PUSH
11734: LD_INT 22
11736: PUSH
11737: LD_OWVAR 2
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 32
11748: PUSH
11749: LD_INT 3
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PPUSH
11760: CALL_OW 69
11764: ST_TO_ADDR
// if not tmp then
11765: LD_VAR 0 2
11769: NOT
11770: IFFALSE 11774
// exit ;
11772: GO 11803
// for i in tmp do
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_VAR 0 2
11783: PUSH
11784: FOR_IN
11785: IFFALSE 11801
// begin SetLives ( i , 0 ) ;
11787: LD_VAR 0 1
11791: PPUSH
11792: LD_INT 0
11794: PPUSH
11795: CALL_OW 234
// end ;
11799: GO 11784
11801: POP
11802: POP
// end ;
11803: PPOPN 2
11805: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11806: LD_EXP 26
11810: IFFALSE 11818
11812: PUSH
11813: LD_EXP 29
11817: AND
11818: IFFALSE 11911
11820: GO 11822
11822: DISABLE
11823: LD_INT 0
11825: PPUSH
// begin enable ;
11826: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11827: LD_ADDR_VAR 0 1
11831: PUSH
11832: LD_INT 22
11834: PUSH
11835: LD_OWVAR 2
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 2
11846: PUSH
11847: LD_INT 25
11849: PUSH
11850: LD_INT 5
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 25
11859: PUSH
11860: LD_INT 9
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 25
11869: PUSH
11870: LD_INT 8
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PPUSH
11887: CALL_OW 69
11891: PUSH
11892: FOR_IN
11893: IFFALSE 11909
// begin SetClass ( i , 1 ) ;
11895: LD_VAR 0 1
11899: PPUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL_OW 336
// end ;
11907: GO 11892
11909: POP
11910: POP
// end ;
11911: PPOPN 1
11913: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11914: LD_EXP 26
11918: IFFALSE 11926
11920: PUSH
11921: LD_EXP 30
11925: AND
11926: IFFALSE 11938
11928: PUSH
11929: LD_OWVAR 65
11933: PUSH
11934: LD_INT 7
11936: LESS
11937: AND
11938: IFFALSE 11952
11940: GO 11942
11942: DISABLE
// begin enable ;
11943: ENABLE
// game_speed := 7 ;
11944: LD_ADDR_OWVAR 65
11948: PUSH
11949: LD_INT 7
11951: ST_TO_ADDR
// end ;
11952: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11953: LD_EXP 26
11957: IFFALSE 11965
11959: PUSH
11960: LD_EXP 33
11964: AND
11965: IFFALSE 12167
11967: GO 11969
11969: DISABLE
11970: LD_INT 0
11972: PPUSH
11973: PPUSH
11974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11975: LD_ADDR_VAR 0 3
11979: PUSH
11980: LD_INT 81
11982: PUSH
11983: LD_OWVAR 2
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 21
11994: PUSH
11995: LD_INT 1
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PPUSH
12006: CALL_OW 69
12010: ST_TO_ADDR
// if not tmp then
12011: LD_VAR 0 3
12015: NOT
12016: IFFALSE 12020
// exit ;
12018: GO 12167
// if tmp > 5 then
12020: LD_VAR 0 3
12024: PUSH
12025: LD_INT 5
12027: GREATER
12028: IFFALSE 12040
// k := 5 else
12030: LD_ADDR_VAR 0 2
12034: PUSH
12035: LD_INT 5
12037: ST_TO_ADDR
12038: GO 12050
// k := tmp ;
12040: LD_ADDR_VAR 0 2
12044: PUSH
12045: LD_VAR 0 3
12049: ST_TO_ADDR
// for i := 1 to k do
12050: LD_ADDR_VAR 0 1
12054: PUSH
12055: DOUBLE
12056: LD_INT 1
12058: DEC
12059: ST_TO_ADDR
12060: LD_VAR 0 2
12064: PUSH
12065: FOR_TO
12066: IFFALSE 12165
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12068: LD_VAR 0 3
12072: PUSH
12073: LD_VAR 0 1
12077: ARRAY
12078: PPUSH
12079: LD_VAR 0 1
12083: PUSH
12084: LD_INT 4
12086: MOD
12087: PUSH
12088: LD_INT 1
12090: PLUS
12091: PPUSH
12092: CALL_OW 259
12096: PUSH
12097: LD_INT 10
12099: LESS
12100: IFFALSE 12163
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12102: LD_VAR 0 3
12106: PUSH
12107: LD_VAR 0 1
12111: ARRAY
12112: PPUSH
12113: LD_VAR 0 1
12117: PUSH
12118: LD_INT 4
12120: MOD
12121: PUSH
12122: LD_INT 1
12124: PLUS
12125: PPUSH
12126: LD_VAR 0 3
12130: PUSH
12131: LD_VAR 0 1
12135: ARRAY
12136: PPUSH
12137: LD_VAR 0 1
12141: PUSH
12142: LD_INT 4
12144: MOD
12145: PUSH
12146: LD_INT 1
12148: PLUS
12149: PPUSH
12150: CALL_OW 259
12154: PUSH
12155: LD_INT 1
12157: PLUS
12158: PPUSH
12159: CALL_OW 237
12163: GO 12065
12165: POP
12166: POP
// end ;
12167: PPOPN 3
12169: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12170: LD_EXP 26
12174: IFFALSE 12182
12176: PUSH
12177: LD_EXP 34
12181: AND
12182: IFFALSE 12202
12184: GO 12186
12186: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12187: LD_INT 4
12189: PPUSH
12190: LD_OWVAR 2
12194: PPUSH
12195: LD_INT 0
12197: PPUSH
12198: CALL_OW 324
12202: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12203: LD_EXP 26
12207: IFFALSE 12215
12209: PUSH
12210: LD_EXP 63
12214: AND
12215: IFFALSE 12235
12217: GO 12219
12219: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12220: LD_INT 19
12222: PPUSH
12223: LD_OWVAR 2
12227: PPUSH
12228: LD_INT 0
12230: PPUSH
12231: CALL_OW 324
12235: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12236: LD_EXP 26
12240: IFFALSE 12248
12242: PUSH
12243: LD_EXP 35
12247: AND
12248: IFFALSE 12350
12250: GO 12252
12252: DISABLE
12253: LD_INT 0
12255: PPUSH
12256: PPUSH
// begin enable ;
12257: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12258: LD_ADDR_VAR 0 2
12262: PUSH
12263: LD_INT 22
12265: PUSH
12266: LD_OWVAR 2
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 2
12277: PUSH
12278: LD_INT 34
12280: PUSH
12281: LD_INT 11
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 34
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 69
12311: ST_TO_ADDR
// if not tmp then
12312: LD_VAR 0 2
12316: NOT
12317: IFFALSE 12321
// exit ;
12319: GO 12350
// for i in tmp do
12321: LD_ADDR_VAR 0 1
12325: PUSH
12326: LD_VAR 0 2
12330: PUSH
12331: FOR_IN
12332: IFFALSE 12348
// begin SetLives ( i , 0 ) ;
12334: LD_VAR 0 1
12338: PPUSH
12339: LD_INT 0
12341: PPUSH
12342: CALL_OW 234
// end ;
12346: GO 12331
12348: POP
12349: POP
// end ;
12350: PPOPN 2
12352: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12353: LD_EXP 26
12357: IFFALSE 12365
12359: PUSH
12360: LD_EXP 36
12364: AND
12365: IFFALSE 12385
12367: GO 12369
12369: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12370: LD_INT 32
12372: PPUSH
12373: LD_OWVAR 2
12377: PPUSH
12378: LD_INT 0
12380: PPUSH
12381: CALL_OW 324
12385: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12386: LD_EXP 26
12390: IFFALSE 12398
12392: PUSH
12393: LD_EXP 37
12397: AND
12398: IFFALSE 12581
12400: GO 12402
12402: DISABLE
12403: LD_INT 0
12405: PPUSH
12406: PPUSH
12407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12408: LD_ADDR_VAR 0 2
12412: PUSH
12413: LD_INT 22
12415: PUSH
12416: LD_OWVAR 2
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 33
12427: PUSH
12428: LD_INT 3
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PPUSH
12439: CALL_OW 69
12443: ST_TO_ADDR
// if not tmp then
12444: LD_VAR 0 2
12448: NOT
12449: IFFALSE 12453
// exit ;
12451: GO 12581
// side := 0 ;
12453: LD_ADDR_VAR 0 3
12457: PUSH
12458: LD_INT 0
12460: ST_TO_ADDR
// for i := 1 to 8 do
12461: LD_ADDR_VAR 0 1
12465: PUSH
12466: DOUBLE
12467: LD_INT 1
12469: DEC
12470: ST_TO_ADDR
12471: LD_INT 8
12473: PUSH
12474: FOR_TO
12475: IFFALSE 12525
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12477: LD_OWVAR 2
12481: PUSH
12482: LD_VAR 0 1
12486: NONEQUAL
12487: IFFALSE 12509
12489: PUSH
12490: LD_OWVAR 2
12494: PPUSH
12495: LD_VAR 0 1
12499: PPUSH
12500: CALL_OW 81
12504: PUSH
12505: LD_INT 2
12507: EQUAL
12508: AND
12509: IFFALSE 12523
// begin side := i ;
12511: LD_ADDR_VAR 0 3
12515: PUSH
12516: LD_VAR 0 1
12520: ST_TO_ADDR
// break ;
12521: GO 12525
// end ;
12523: GO 12474
12525: POP
12526: POP
// if not side then
12527: LD_VAR 0 3
12531: NOT
12532: IFFALSE 12536
// exit ;
12534: GO 12581
// for i := 1 to tmp do
12536: LD_ADDR_VAR 0 1
12540: PUSH
12541: DOUBLE
12542: LD_INT 1
12544: DEC
12545: ST_TO_ADDR
12546: LD_VAR 0 2
12550: PUSH
12551: FOR_TO
12552: IFFALSE 12579
// if Prob ( 60 ) then
12554: LD_INT 60
12556: PPUSH
12557: CALL_OW 13
12561: IFFALSE 12577
// SetSide ( i , side ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: LD_VAR 0 3
12572: PPUSH
12573: CALL_OW 235
12577: GO 12551
12579: POP
12580: POP
// end ;
12581: PPOPN 3
12583: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12584: LD_EXP 26
12588: IFFALSE 12596
12590: PUSH
12591: LD_EXP 39
12595: AND
12596: IFFALSE 12715
12598: GO 12600
12600: DISABLE
12601: LD_INT 0
12603: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12604: LD_ADDR_VAR 0 1
12608: PUSH
12609: LD_INT 22
12611: PUSH
12612: LD_OWVAR 2
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 21
12623: PUSH
12624: LD_INT 1
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 3
12633: PUSH
12634: LD_INT 23
12636: PUSH
12637: LD_INT 0
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 69
12657: PUSH
12658: FOR_IN
12659: IFFALSE 12713
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12661: LD_VAR 0 1
12665: PPUSH
12666: CALL_OW 257
12670: PUSH
12671: LD_INT 1
12673: PUSH
12674: LD_INT 2
12676: PUSH
12677: LD_INT 3
12679: PUSH
12680: LD_INT 4
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: IN
12689: IFFALSE 12711
// SetClass ( un , rand ( 1 , 4 ) ) ;
12691: LD_VAR 0 1
12695: PPUSH
12696: LD_INT 1
12698: PPUSH
12699: LD_INT 4
12701: PPUSH
12702: CALL_OW 12
12706: PPUSH
12707: CALL_OW 336
12711: GO 12658
12713: POP
12714: POP
// end ;
12715: PPOPN 1
12717: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12718: LD_EXP 26
12722: IFFALSE 12730
12724: PUSH
12725: LD_EXP 38
12729: AND
12730: IFFALSE 12809
12732: GO 12734
12734: DISABLE
12735: LD_INT 0
12737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12738: LD_ADDR_VAR 0 1
12742: PUSH
12743: LD_INT 22
12745: PUSH
12746: LD_OWVAR 2
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 3
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PPUSH
12769: CALL_OW 69
12773: ST_TO_ADDR
// if not tmp then
12774: LD_VAR 0 1
12778: NOT
12779: IFFALSE 12783
// exit ;
12781: GO 12809
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12783: LD_VAR 0 1
12787: PUSH
12788: LD_INT 1
12790: PPUSH
12791: LD_VAR 0 1
12795: PPUSH
12796: CALL_OW 12
12800: ARRAY
12801: PPUSH
12802: LD_INT 100
12804: PPUSH
12805: CALL_OW 234
// end ;
12809: PPOPN 1
12811: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12812: LD_EXP 26
12816: IFFALSE 12824
12818: PUSH
12819: LD_EXP 40
12823: AND
12824: IFFALSE 12922
12826: GO 12828
12828: DISABLE
12829: LD_INT 0
12831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12832: LD_ADDR_VAR 0 1
12836: PUSH
12837: LD_INT 22
12839: PUSH
12840: LD_OWVAR 2
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PUSH
12849: LD_INT 21
12851: PUSH
12852: LD_INT 1
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: PPUSH
12863: CALL_OW 69
12867: ST_TO_ADDR
// if not tmp then
12868: LD_VAR 0 1
12872: NOT
12873: IFFALSE 12877
// exit ;
12875: GO 12922
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12877: LD_VAR 0 1
12881: PUSH
12882: LD_INT 1
12884: PPUSH
12885: LD_VAR 0 1
12889: PPUSH
12890: CALL_OW 12
12894: ARRAY
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: LD_INT 4
12901: PPUSH
12902: CALL_OW 12
12906: PPUSH
12907: LD_INT 3000
12909: PPUSH
12910: LD_INT 9000
12912: PPUSH
12913: CALL_OW 12
12917: PPUSH
12918: CALL_OW 492
// end ;
12922: PPOPN 1
12924: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12925: LD_EXP 26
12929: IFFALSE 12937
12931: PUSH
12932: LD_EXP 41
12936: AND
12937: IFFALSE 12957
12939: GO 12941
12941: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12942: LD_INT 1
12944: PPUSH
12945: LD_OWVAR 2
12949: PPUSH
12950: LD_INT 0
12952: PPUSH
12953: CALL_OW 324
12957: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12958: LD_EXP 26
12962: IFFALSE 12970
12964: PUSH
12965: LD_EXP 42
12969: AND
12970: IFFALSE 13053
12972: GO 12974
12974: DISABLE
12975: LD_INT 0
12977: PPUSH
12978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12979: LD_ADDR_VAR 0 2
12983: PUSH
12984: LD_INT 22
12986: PUSH
12987: LD_OWVAR 2
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PUSH
12996: LD_INT 21
12998: PUSH
12999: LD_INT 3
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PPUSH
13010: CALL_OW 69
13014: ST_TO_ADDR
// if not tmp then
13015: LD_VAR 0 2
13019: NOT
13020: IFFALSE 13024
// exit ;
13022: GO 13053
// for i in tmp do
13024: LD_ADDR_VAR 0 1
13028: PUSH
13029: LD_VAR 0 2
13033: PUSH
13034: FOR_IN
13035: IFFALSE 13051
// SetBLevel ( i , 10 ) ;
13037: LD_VAR 0 1
13041: PPUSH
13042: LD_INT 10
13044: PPUSH
13045: CALL_OW 241
13049: GO 13034
13051: POP
13052: POP
// end ;
13053: PPOPN 2
13055: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13056: LD_EXP 26
13060: IFFALSE 13068
13062: PUSH
13063: LD_EXP 43
13067: AND
13068: IFFALSE 13179
13070: GO 13072
13072: DISABLE
13073: LD_INT 0
13075: PPUSH
13076: PPUSH
13077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13078: LD_ADDR_VAR 0 3
13082: PUSH
13083: LD_INT 22
13085: PUSH
13086: LD_OWVAR 2
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 25
13097: PUSH
13098: LD_INT 1
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 69
13113: ST_TO_ADDR
// if not tmp then
13114: LD_VAR 0 3
13118: NOT
13119: IFFALSE 13123
// exit ;
13121: GO 13179
// un := tmp [ rand ( 1 , tmp ) ] ;
13123: LD_ADDR_VAR 0 2
13127: PUSH
13128: LD_VAR 0 3
13132: PUSH
13133: LD_INT 1
13135: PPUSH
13136: LD_VAR 0 3
13140: PPUSH
13141: CALL_OW 12
13145: ARRAY
13146: ST_TO_ADDR
// if Crawls ( un ) then
13147: LD_VAR 0 2
13151: PPUSH
13152: CALL_OW 318
13156: IFFALSE 13167
// ComWalk ( un ) ;
13158: LD_VAR 0 2
13162: PPUSH
13163: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13167: LD_VAR 0 2
13171: PPUSH
13172: LD_INT 5
13174: PPUSH
13175: CALL_OW 336
// end ;
13179: PPOPN 3
13181: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13182: LD_EXP 26
13186: IFFALSE 13194
13188: PUSH
13189: LD_EXP 44
13193: AND
13194: IFFALSE 13206
13196: PUSH
13197: LD_OWVAR 67
13201: PUSH
13202: LD_INT 4
13204: LESS
13205: AND
13206: IFFALSE 13225
13208: GO 13210
13210: DISABLE
// begin Difficulty := Difficulty + 1 ;
13211: LD_ADDR_OWVAR 67
13215: PUSH
13216: LD_OWVAR 67
13220: PUSH
13221: LD_INT 1
13223: PLUS
13224: ST_TO_ADDR
// end ;
13225: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13226: LD_EXP 26
13230: IFFALSE 13238
13232: PUSH
13233: LD_EXP 45
13237: AND
13238: IFFALSE 13341
13240: GO 13242
13242: DISABLE
13243: LD_INT 0
13245: PPUSH
// begin for i := 1 to 5 do
13246: LD_ADDR_VAR 0 1
13250: PUSH
13251: DOUBLE
13252: LD_INT 1
13254: DEC
13255: ST_TO_ADDR
13256: LD_INT 5
13258: PUSH
13259: FOR_TO
13260: IFFALSE 13339
// begin uc_nation := nation_nature ;
13262: LD_ADDR_OWVAR 21
13266: PUSH
13267: LD_INT 0
13269: ST_TO_ADDR
// uc_side := 0 ;
13270: LD_ADDR_OWVAR 20
13274: PUSH
13275: LD_INT 0
13277: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13278: LD_ADDR_OWVAR 29
13282: PUSH
13283: LD_INT 12
13285: PUSH
13286: LD_INT 12
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: ST_TO_ADDR
// hc_agressivity := 20 ;
13293: LD_ADDR_OWVAR 35
13297: PUSH
13298: LD_INT 20
13300: ST_TO_ADDR
// hc_class := class_tiger ;
13301: LD_ADDR_OWVAR 28
13305: PUSH
13306: LD_INT 14
13308: ST_TO_ADDR
// hc_gallery :=  ;
13309: LD_ADDR_OWVAR 33
13313: PUSH
13314: LD_STRING 
13316: ST_TO_ADDR
// hc_name :=  ;
13317: LD_ADDR_OWVAR 26
13321: PUSH
13322: LD_STRING 
13324: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13325: CALL_OW 44
13329: PPUSH
13330: LD_INT 0
13332: PPUSH
13333: CALL_OW 51
// end ;
13337: GO 13259
13339: POP
13340: POP
// end ;
13341: PPOPN 1
13343: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13344: LD_EXP 26
13348: IFFALSE 13356
13350: PUSH
13351: LD_EXP 46
13355: AND
13356: IFFALSE 13365
13358: GO 13360
13360: DISABLE
// StreamSibBomb ;
13361: CALL 13366 0 0
13365: END
// export function StreamSibBomb ; var i , x , y ; begin
13366: LD_INT 0
13368: PPUSH
13369: PPUSH
13370: PPUSH
13371: PPUSH
// result := false ;
13372: LD_ADDR_VAR 0 1
13376: PUSH
13377: LD_INT 0
13379: ST_TO_ADDR
// for i := 1 to 16 do
13380: LD_ADDR_VAR 0 2
13384: PUSH
13385: DOUBLE
13386: LD_INT 1
13388: DEC
13389: ST_TO_ADDR
13390: LD_INT 16
13392: PUSH
13393: FOR_TO
13394: IFFALSE 13593
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13396: LD_ADDR_VAR 0 3
13400: PUSH
13401: LD_INT 10
13403: PUSH
13404: LD_INT 20
13406: PUSH
13407: LD_INT 30
13409: PUSH
13410: LD_INT 40
13412: PUSH
13413: LD_INT 50
13415: PUSH
13416: LD_INT 60
13418: PUSH
13419: LD_INT 70
13421: PUSH
13422: LD_INT 80
13424: PUSH
13425: LD_INT 90
13427: PUSH
13428: LD_INT 100
13430: PUSH
13431: LD_INT 110
13433: PUSH
13434: LD_INT 120
13436: PUSH
13437: LD_INT 130
13439: PUSH
13440: LD_INT 140
13442: PUSH
13443: LD_INT 150
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 1
13465: PPUSH
13466: LD_INT 15
13468: PPUSH
13469: CALL_OW 12
13473: ARRAY
13474: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13475: LD_ADDR_VAR 0 4
13479: PUSH
13480: LD_INT 10
13482: PUSH
13483: LD_INT 20
13485: PUSH
13486: LD_INT 30
13488: PUSH
13489: LD_INT 40
13491: PUSH
13492: LD_INT 50
13494: PUSH
13495: LD_INT 60
13497: PUSH
13498: LD_INT 70
13500: PUSH
13501: LD_INT 80
13503: PUSH
13504: LD_INT 90
13506: PUSH
13507: LD_INT 100
13509: PUSH
13510: LD_INT 110
13512: PUSH
13513: LD_INT 120
13515: PUSH
13516: LD_INT 130
13518: PUSH
13519: LD_INT 140
13521: PUSH
13522: LD_INT 150
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 1
13544: PPUSH
13545: LD_INT 15
13547: PPUSH
13548: CALL_OW 12
13552: ARRAY
13553: ST_TO_ADDR
// if ValidHex ( x , y ) then
13554: LD_VAR 0 3
13558: PPUSH
13559: LD_VAR 0 4
13563: PPUSH
13564: CALL_OW 488
13568: IFFALSE 13591
// begin result := [ x , y ] ;
13570: LD_ADDR_VAR 0 1
13574: PUSH
13575: LD_VAR 0 3
13579: PUSH
13580: LD_VAR 0 4
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: ST_TO_ADDR
// break ;
13589: GO 13593
// end ; end ;
13591: GO 13393
13593: POP
13594: POP
// if result then
13595: LD_VAR 0 1
13599: IFFALSE 13659
// begin ToLua ( playSibBomb() ) ;
13601: LD_STRING playSibBomb()
13603: PPUSH
13604: CALL_OW 559
// wait ( 0 0$14 ) ;
13608: LD_INT 490
13610: PPUSH
13611: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13615: LD_VAR 0 1
13619: PUSH
13620: LD_INT 1
13622: ARRAY
13623: PPUSH
13624: LD_VAR 0 1
13628: PUSH
13629: LD_INT 2
13631: ARRAY
13632: PPUSH
13633: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13637: LD_VAR 0 1
13641: PUSH
13642: LD_INT 1
13644: ARRAY
13645: PPUSH
13646: LD_VAR 0 1
13650: PUSH
13651: LD_INT 2
13653: ARRAY
13654: PPUSH
13655: CALL_OW 429
// end ; end ;
13659: LD_VAR 0 1
13663: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13664: LD_EXP 26
13668: IFFALSE 13676
13670: PUSH
13671: LD_EXP 48
13675: AND
13676: IFFALSE 13688
13678: GO 13680
13680: DISABLE
// YouLost (  ) ;
13681: LD_STRING 
13683: PPUSH
13684: CALL_OW 104
13688: END
// every 0 0$1 trigger StreamModeActive and sFog do
13689: LD_EXP 26
13693: IFFALSE 13701
13695: PUSH
13696: LD_EXP 47
13700: AND
13701: IFFALSE 13715
13703: GO 13705
13705: DISABLE
// FogOff ( your_side ) ;
13706: LD_OWVAR 2
13710: PPUSH
13711: CALL_OW 344
13715: END
// every 0 0$1 trigger StreamModeActive and sSun do
13716: LD_EXP 26
13720: IFFALSE 13728
13722: PUSH
13723: LD_EXP 49
13727: AND
13728: IFFALSE 13756
13730: GO 13732
13732: DISABLE
// begin solar_recharge_percent := 0 ;
13733: LD_ADDR_OWVAR 79
13737: PUSH
13738: LD_INT 0
13740: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13741: LD_INT 10500
13743: PPUSH
13744: CALL_OW 67
// solar_recharge_percent := 100 ;
13748: LD_ADDR_OWVAR 79
13752: PUSH
13753: LD_INT 100
13755: ST_TO_ADDR
// end ;
13756: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13757: LD_EXP 26
13761: IFFALSE 13769
13763: PUSH
13764: LD_EXP 50
13768: AND
13769: IFFALSE 14008
13771: GO 13773
13773: DISABLE
13774: LD_INT 0
13776: PPUSH
13777: PPUSH
13778: PPUSH
// begin tmp := [ ] ;
13779: LD_ADDR_VAR 0 3
13783: PUSH
13784: EMPTY
13785: ST_TO_ADDR
// for i := 1 to 6 do
13786: LD_ADDR_VAR 0 1
13790: PUSH
13791: DOUBLE
13792: LD_INT 1
13794: DEC
13795: ST_TO_ADDR
13796: LD_INT 6
13798: PUSH
13799: FOR_TO
13800: IFFALSE 13905
// begin uc_nation := nation_nature ;
13802: LD_ADDR_OWVAR 21
13806: PUSH
13807: LD_INT 0
13809: ST_TO_ADDR
// uc_side := 0 ;
13810: LD_ADDR_OWVAR 20
13814: PUSH
13815: LD_INT 0
13817: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13818: LD_ADDR_OWVAR 29
13822: PUSH
13823: LD_INT 12
13825: PUSH
13826: LD_INT 12
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: ST_TO_ADDR
// hc_agressivity := 20 ;
13833: LD_ADDR_OWVAR 35
13837: PUSH
13838: LD_INT 20
13840: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13841: LD_ADDR_OWVAR 28
13845: PUSH
13846: LD_INT 17
13848: ST_TO_ADDR
// hc_gallery :=  ;
13849: LD_ADDR_OWVAR 33
13853: PUSH
13854: LD_STRING 
13856: ST_TO_ADDR
// hc_name :=  ;
13857: LD_ADDR_OWVAR 26
13861: PUSH
13862: LD_STRING 
13864: ST_TO_ADDR
// un := CreateHuman ;
13865: LD_ADDR_VAR 0 2
13869: PUSH
13870: CALL_OW 44
13874: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13875: LD_VAR 0 2
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 51
// tmp := tmp ^ un ;
13887: LD_ADDR_VAR 0 3
13891: PUSH
13892: LD_VAR 0 3
13896: PUSH
13897: LD_VAR 0 2
13901: ADD
13902: ST_TO_ADDR
// end ;
13903: GO 13799
13905: POP
13906: POP
// repeat wait ( 0 0$1 ) ;
13907: LD_INT 35
13909: PPUSH
13910: CALL_OW 67
// for un in tmp do
13914: LD_ADDR_VAR 0 2
13918: PUSH
13919: LD_VAR 0 3
13923: PUSH
13924: FOR_IN
13925: IFFALSE 13999
// begin if IsDead ( un ) then
13927: LD_VAR 0 2
13931: PPUSH
13932: CALL_OW 301
13936: IFFALSE 13956
// begin tmp := tmp diff un ;
13938: LD_ADDR_VAR 0 3
13942: PUSH
13943: LD_VAR 0 3
13947: PUSH
13948: LD_VAR 0 2
13952: DIFF
13953: ST_TO_ADDR
// continue ;
13954: GO 13924
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13956: LD_VAR 0 2
13960: PPUSH
13961: LD_INT 3
13963: PUSH
13964: LD_INT 22
13966: PUSH
13967: LD_INT 0
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PPUSH
13983: LD_VAR 0 2
13987: PPUSH
13988: CALL_OW 74
13992: PPUSH
13993: CALL_OW 115
// end ;
13997: GO 13924
13999: POP
14000: POP
// until not tmp ;
14001: LD_VAR 0 3
14005: NOT
14006: IFFALSE 13907
// end ;
14008: PPOPN 3
14010: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14011: LD_EXP 26
14015: IFFALSE 14023
14017: PUSH
14018: LD_EXP 51
14022: AND
14023: IFFALSE 14077
14025: GO 14027
14027: DISABLE
// begin ToLua ( displayTroll(); ) ;
14028: LD_STRING displayTroll();
14030: PPUSH
14031: CALL_OW 559
// wait ( 3 3$00 ) ;
14035: LD_INT 6300
14037: PPUSH
14038: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14042: LD_STRING hideTroll();
14044: PPUSH
14045: CALL_OW 559
// wait ( 1 1$00 ) ;
14049: LD_INT 2100
14051: PPUSH
14052: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14056: LD_STRING displayTroll();
14058: PPUSH
14059: CALL_OW 559
// wait ( 1 1$00 ) ;
14063: LD_INT 2100
14065: PPUSH
14066: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14070: LD_STRING hideTroll();
14072: PPUSH
14073: CALL_OW 559
// end ;
14077: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14078: LD_EXP 26
14082: IFFALSE 14090
14084: PUSH
14085: LD_EXP 52
14089: AND
14090: IFFALSE 14153
14092: GO 14094
14094: DISABLE
14095: LD_INT 0
14097: PPUSH
// begin p := 0 ;
14098: LD_ADDR_VAR 0 1
14102: PUSH
14103: LD_INT 0
14105: ST_TO_ADDR
// repeat game_speed := 1 ;
14106: LD_ADDR_OWVAR 65
14110: PUSH
14111: LD_INT 1
14113: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14114: LD_INT 35
14116: PPUSH
14117: CALL_OW 67
// p := p + 1 ;
14121: LD_ADDR_VAR 0 1
14125: PUSH
14126: LD_VAR 0 1
14130: PUSH
14131: LD_INT 1
14133: PLUS
14134: ST_TO_ADDR
// until p >= 60 ;
14135: LD_VAR 0 1
14139: PUSH
14140: LD_INT 60
14142: GREATEREQUAL
14143: IFFALSE 14106
// game_speed := 4 ;
14145: LD_ADDR_OWVAR 65
14149: PUSH
14150: LD_INT 4
14152: ST_TO_ADDR
// end ;
14153: PPOPN 1
14155: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14156: LD_EXP 26
14160: IFFALSE 14168
14162: PUSH
14163: LD_EXP 53
14167: AND
14168: IFFALSE 14314
14170: GO 14172
14172: DISABLE
14173: LD_INT 0
14175: PPUSH
14176: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14177: LD_ADDR_VAR 0 1
14181: PUSH
14182: LD_INT 22
14184: PUSH
14185: LD_OWVAR 2
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: LD_INT 2
14196: PUSH
14197: LD_INT 30
14199: PUSH
14200: LD_INT 0
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 30
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PPUSH
14226: CALL_OW 69
14230: ST_TO_ADDR
// if not depot then
14231: LD_VAR 0 1
14235: NOT
14236: IFFALSE 14240
// exit ;
14238: GO 14314
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14240: LD_ADDR_VAR 0 2
14244: PUSH
14245: LD_VAR 0 1
14249: PUSH
14250: LD_INT 1
14252: PPUSH
14253: LD_VAR 0 1
14257: PPUSH
14258: CALL_OW 12
14262: ARRAY
14263: PPUSH
14264: CALL_OW 274
14268: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14269: LD_VAR 0 2
14273: PPUSH
14274: LD_INT 1
14276: PPUSH
14277: LD_INT 0
14279: PPUSH
14280: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14284: LD_VAR 0 2
14288: PPUSH
14289: LD_INT 2
14291: PPUSH
14292: LD_INT 0
14294: PPUSH
14295: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14299: LD_VAR 0 2
14303: PPUSH
14304: LD_INT 3
14306: PPUSH
14307: LD_INT 0
14309: PPUSH
14310: CALL_OW 277
// end ;
14314: PPOPN 2
14316: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14317: LD_EXP 26
14321: IFFALSE 14329
14323: PUSH
14324: LD_EXP 54
14328: AND
14329: IFFALSE 14426
14331: GO 14333
14333: DISABLE
14334: LD_INT 0
14336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14337: LD_ADDR_VAR 0 1
14341: PUSH
14342: LD_INT 22
14344: PUSH
14345: LD_OWVAR 2
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 21
14356: PUSH
14357: LD_INT 1
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 3
14366: PUSH
14367: LD_INT 23
14369: PUSH
14370: LD_INT 0
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: PPUSH
14386: CALL_OW 69
14390: ST_TO_ADDR
// if not tmp then
14391: LD_VAR 0 1
14395: NOT
14396: IFFALSE 14400
// exit ;
14398: GO 14426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14400: LD_VAR 0 1
14404: PUSH
14405: LD_INT 1
14407: PPUSH
14408: LD_VAR 0 1
14412: PPUSH
14413: CALL_OW 12
14417: ARRAY
14418: PPUSH
14419: LD_INT 200
14421: PPUSH
14422: CALL_OW 234
// end ;
14426: PPOPN 1
14428: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14429: LD_EXP 26
14433: IFFALSE 14441
14435: PUSH
14436: LD_EXP 55
14440: AND
14441: IFFALSE 14520
14443: GO 14445
14445: DISABLE
14446: LD_INT 0
14448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14449: LD_ADDR_VAR 0 1
14453: PUSH
14454: LD_INT 22
14456: PUSH
14457: LD_OWVAR 2
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 21
14468: PUSH
14469: LD_INT 2
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PPUSH
14480: CALL_OW 69
14484: ST_TO_ADDR
// if not tmp then
14485: LD_VAR 0 1
14489: NOT
14490: IFFALSE 14494
// exit ;
14492: GO 14520
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14494: LD_VAR 0 1
14498: PUSH
14499: LD_INT 1
14501: PPUSH
14502: LD_VAR 0 1
14506: PPUSH
14507: CALL_OW 12
14511: ARRAY
14512: PPUSH
14513: LD_INT 60
14515: PPUSH
14516: CALL_OW 234
// end ;
14520: PPOPN 1
14522: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14523: LD_EXP 26
14527: IFFALSE 14535
14529: PUSH
14530: LD_EXP 56
14534: AND
14535: IFFALSE 14634
14537: GO 14539
14539: DISABLE
14540: LD_INT 0
14542: PPUSH
14543: PPUSH
// begin enable ;
14544: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14545: LD_ADDR_VAR 0 1
14549: PUSH
14550: LD_INT 22
14552: PUSH
14553: LD_OWVAR 2
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: LD_INT 61
14564: PUSH
14565: EMPTY
14566: LIST
14567: PUSH
14568: LD_INT 33
14570: PUSH
14571: LD_INT 2
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: LIST
14582: PPUSH
14583: CALL_OW 69
14587: ST_TO_ADDR
// if not tmp then
14588: LD_VAR 0 1
14592: NOT
14593: IFFALSE 14597
// exit ;
14595: GO 14634
// for i in tmp do
14597: LD_ADDR_VAR 0 2
14601: PUSH
14602: LD_VAR 0 1
14606: PUSH
14607: FOR_IN
14608: IFFALSE 14632
// if IsControledBy ( i ) then
14610: LD_VAR 0 2
14614: PPUSH
14615: CALL_OW 312
14619: IFFALSE 14630
// ComUnlink ( i ) ;
14621: LD_VAR 0 2
14625: PPUSH
14626: CALL_OW 136
14630: GO 14607
14632: POP
14633: POP
// end ;
14634: PPOPN 2
14636: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14637: LD_EXP 26
14641: IFFALSE 14649
14643: PUSH
14644: LD_EXP 57
14648: AND
14649: IFFALSE 14789
14651: GO 14653
14653: DISABLE
14654: LD_INT 0
14656: PPUSH
14657: PPUSH
// begin ToLua ( displayPowell(); ) ;
14658: LD_STRING displayPowell();
14660: PPUSH
14661: CALL_OW 559
// uc_side := 0 ;
14665: LD_ADDR_OWVAR 20
14669: PUSH
14670: LD_INT 0
14672: ST_TO_ADDR
// uc_nation := 2 ;
14673: LD_ADDR_OWVAR 21
14677: PUSH
14678: LD_INT 2
14680: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14681: LD_ADDR_OWVAR 37
14685: PUSH
14686: LD_INT 14
14688: ST_TO_ADDR
// vc_engine := engine_siberite ;
14689: LD_ADDR_OWVAR 39
14693: PUSH
14694: LD_INT 3
14696: ST_TO_ADDR
// vc_control := control_apeman ;
14697: LD_ADDR_OWVAR 38
14701: PUSH
14702: LD_INT 5
14704: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14705: LD_ADDR_OWVAR 40
14709: PUSH
14710: LD_INT 29
14712: ST_TO_ADDR
// un := CreateVehicle ;
14713: LD_ADDR_VAR 0 2
14717: PUSH
14718: CALL_OW 45
14722: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14723: LD_VAR 0 2
14727: PPUSH
14728: LD_INT 1
14730: PPUSH
14731: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14735: LD_INT 35
14737: PPUSH
14738: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14742: LD_VAR 0 2
14746: PPUSH
14747: LD_INT 22
14749: PUSH
14750: LD_OWVAR 2
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PPUSH
14759: CALL_OW 69
14763: PPUSH
14764: LD_VAR 0 2
14768: PPUSH
14769: CALL_OW 74
14773: PPUSH
14774: CALL_OW 115
// until IsDead ( un ) ;
14778: LD_VAR 0 2
14782: PPUSH
14783: CALL_OW 301
14787: IFFALSE 14735
// end ;
14789: PPOPN 2
14791: END
// every 0 0$1 trigger StreamModeActive and sStu do
14792: LD_EXP 26
14796: IFFALSE 14804
14798: PUSH
14799: LD_EXP 65
14803: AND
14804: IFFALSE 14820
14806: GO 14808
14808: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14809: LD_STRING displayStucuk();
14811: PPUSH
14812: CALL_OW 559
// ResetFog ;
14816: CALL_OW 335
// end ;
14820: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14821: LD_EXP 26
14825: IFFALSE 14833
14827: PUSH
14828: LD_EXP 58
14832: AND
14833: IFFALSE 14974
14835: GO 14837
14837: DISABLE
14838: LD_INT 0
14840: PPUSH
14841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14842: LD_ADDR_VAR 0 2
14846: PUSH
14847: LD_INT 22
14849: PUSH
14850: LD_OWVAR 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 21
14861: PUSH
14862: LD_INT 1
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PPUSH
14873: CALL_OW 69
14877: ST_TO_ADDR
// if not tmp then
14878: LD_VAR 0 2
14882: NOT
14883: IFFALSE 14887
// exit ;
14885: GO 14974
// un := tmp [ rand ( 1 , tmp ) ] ;
14887: LD_ADDR_VAR 0 1
14891: PUSH
14892: LD_VAR 0 2
14896: PUSH
14897: LD_INT 1
14899: PPUSH
14900: LD_VAR 0 2
14904: PPUSH
14905: CALL_OW 12
14909: ARRAY
14910: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14911: LD_VAR 0 1
14915: PPUSH
14916: LD_INT 0
14918: PPUSH
14919: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14923: LD_VAR 0 1
14927: PPUSH
14928: LD_OWVAR 3
14932: PUSH
14933: LD_VAR 0 1
14937: DIFF
14938: PPUSH
14939: LD_VAR 0 1
14943: PPUSH
14944: CALL_OW 74
14948: PPUSH
14949: CALL_OW 115
// wait ( 0 0$20 ) ;
14953: LD_INT 700
14955: PPUSH
14956: CALL_OW 67
// SetSide ( un , your_side ) ;
14960: LD_VAR 0 1
14964: PPUSH
14965: LD_OWVAR 2
14969: PPUSH
14970: CALL_OW 235
// end ;
14974: PPOPN 2
14976: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14977: LD_EXP 26
14981: IFFALSE 14989
14983: PUSH
14984: LD_EXP 59
14988: AND
14989: IFFALSE 15095
14991: GO 14993
14993: DISABLE
14994: LD_INT 0
14996: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14997: LD_ADDR_VAR 0 1
15001: PUSH
15002: LD_INT 22
15004: PUSH
15005: LD_OWVAR 2
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: LD_INT 30
15019: PUSH
15020: LD_INT 0
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 30
15029: PUSH
15030: LD_INT 1
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PPUSH
15046: CALL_OW 69
15050: ST_TO_ADDR
// if not depot then
15051: LD_VAR 0 1
15055: NOT
15056: IFFALSE 15060
// exit ;
15058: GO 15095
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15060: LD_VAR 0 1
15064: PUSH
15065: LD_INT 1
15067: ARRAY
15068: PPUSH
15069: CALL_OW 250
15073: PPUSH
15074: LD_VAR 0 1
15078: PUSH
15079: LD_INT 1
15081: ARRAY
15082: PPUSH
15083: CALL_OW 251
15087: PPUSH
15088: LD_INT 70
15090: PPUSH
15091: CALL_OW 495
// end ;
15095: PPOPN 1
15097: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15098: LD_EXP 26
15102: IFFALSE 15110
15104: PUSH
15105: LD_EXP 60
15109: AND
15110: IFFALSE 15321
15112: GO 15114
15114: DISABLE
15115: LD_INT 0
15117: PPUSH
15118: PPUSH
15119: PPUSH
15120: PPUSH
15121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15122: LD_ADDR_VAR 0 5
15126: PUSH
15127: LD_INT 22
15129: PUSH
15130: LD_OWVAR 2
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 21
15141: PUSH
15142: LD_INT 1
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PPUSH
15153: CALL_OW 69
15157: ST_TO_ADDR
// if not tmp then
15158: LD_VAR 0 5
15162: NOT
15163: IFFALSE 15167
// exit ;
15165: GO 15321
// for i in tmp do
15167: LD_ADDR_VAR 0 1
15171: PUSH
15172: LD_VAR 0 5
15176: PUSH
15177: FOR_IN
15178: IFFALSE 15319
// begin d := rand ( 0 , 5 ) ;
15180: LD_ADDR_VAR 0 4
15184: PUSH
15185: LD_INT 0
15187: PPUSH
15188: LD_INT 5
15190: PPUSH
15191: CALL_OW 12
15195: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15196: LD_ADDR_VAR 0 2
15200: PUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: CALL_OW 250
15210: PPUSH
15211: LD_VAR 0 4
15215: PPUSH
15216: LD_INT 3
15218: PPUSH
15219: LD_INT 12
15221: PPUSH
15222: CALL_OW 12
15226: PPUSH
15227: CALL_OW 272
15231: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15232: LD_ADDR_VAR 0 3
15236: PUSH
15237: LD_VAR 0 1
15241: PPUSH
15242: CALL_OW 251
15246: PPUSH
15247: LD_VAR 0 4
15251: PPUSH
15252: LD_INT 3
15254: PPUSH
15255: LD_INT 12
15257: PPUSH
15258: CALL_OW 12
15262: PPUSH
15263: CALL_OW 273
15267: ST_TO_ADDR
// if ValidHex ( x , y ) then
15268: LD_VAR 0 2
15272: PPUSH
15273: LD_VAR 0 3
15277: PPUSH
15278: CALL_OW 488
15282: IFFALSE 15317
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15284: LD_VAR 0 1
15288: PPUSH
15289: LD_VAR 0 2
15293: PPUSH
15294: LD_VAR 0 3
15298: PPUSH
15299: LD_INT 3
15301: PPUSH
15302: LD_INT 6
15304: PPUSH
15305: CALL_OW 12
15309: PPUSH
15310: LD_INT 1
15312: PPUSH
15313: CALL_OW 483
// end ;
15317: GO 15177
15319: POP
15320: POP
// end ;
15321: PPOPN 5
15323: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15324: LD_EXP 26
15328: IFFALSE 15336
15330: PUSH
15331: LD_EXP 61
15335: AND
15336: IFFALSE 15430
15338: GO 15340
15340: DISABLE
15341: LD_INT 0
15343: PPUSH
15344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15345: LD_ADDR_VAR 0 2
15349: PUSH
15350: LD_INT 22
15352: PUSH
15353: LD_OWVAR 2
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 32
15364: PUSH
15365: LD_INT 1
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 21
15374: PUSH
15375: LD_INT 2
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: PPUSH
15387: CALL_OW 69
15391: ST_TO_ADDR
// if not tmp then
15392: LD_VAR 0 2
15396: NOT
15397: IFFALSE 15401
// exit ;
15399: GO 15430
// for i in tmp do
15401: LD_ADDR_VAR 0 1
15405: PUSH
15406: LD_VAR 0 2
15410: PUSH
15411: FOR_IN
15412: IFFALSE 15428
// SetFuel ( i , 0 ) ;
15414: LD_VAR 0 1
15418: PPUSH
15419: LD_INT 0
15421: PPUSH
15422: CALL_OW 240
15426: GO 15411
15428: POP
15429: POP
// end ;
15430: PPOPN 2
15432: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15433: LD_EXP 26
15437: IFFALSE 15445
15439: PUSH
15440: LD_EXP 62
15444: AND
15445: IFFALSE 15511
15447: GO 15449
15449: DISABLE
15450: LD_INT 0
15452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15453: LD_ADDR_VAR 0 1
15457: PUSH
15458: LD_INT 22
15460: PUSH
15461: LD_OWVAR 2
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 30
15472: PUSH
15473: LD_INT 29
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 69
15488: ST_TO_ADDR
// if not tmp then
15489: LD_VAR 0 1
15493: NOT
15494: IFFALSE 15498
// exit ;
15496: GO 15511
// DestroyUnit ( tmp [ 1 ] ) ;
15498: LD_VAR 0 1
15502: PUSH
15503: LD_INT 1
15505: ARRAY
15506: PPUSH
15507: CALL_OW 65
// end ;
15511: PPOPN 1
15513: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15514: LD_EXP 26
15518: IFFALSE 15526
15520: PUSH
15521: LD_EXP 64
15525: AND
15526: IFFALSE 15655
15528: GO 15530
15530: DISABLE
15531: LD_INT 0
15533: PPUSH
// begin uc_side := 0 ;
15534: LD_ADDR_OWVAR 20
15538: PUSH
15539: LD_INT 0
15541: ST_TO_ADDR
// uc_nation := nation_arabian ;
15542: LD_ADDR_OWVAR 21
15546: PUSH
15547: LD_INT 2
15549: ST_TO_ADDR
// hc_gallery :=  ;
15550: LD_ADDR_OWVAR 33
15554: PUSH
15555: LD_STRING 
15557: ST_TO_ADDR
// hc_name :=  ;
15558: LD_ADDR_OWVAR 26
15562: PUSH
15563: LD_STRING 
15565: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15566: LD_INT 1
15568: PPUSH
15569: LD_INT 11
15571: PPUSH
15572: LD_INT 10
15574: PPUSH
15575: CALL_OW 380
// un := CreateHuman ;
15579: LD_ADDR_VAR 0 1
15583: PUSH
15584: CALL_OW 44
15588: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15589: LD_VAR 0 1
15593: PPUSH
15594: LD_INT 1
15596: PPUSH
15597: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15601: LD_INT 35
15603: PPUSH
15604: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15608: LD_VAR 0 1
15612: PPUSH
15613: LD_INT 22
15615: PUSH
15616: LD_OWVAR 2
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PPUSH
15625: CALL_OW 69
15629: PPUSH
15630: LD_VAR 0 1
15634: PPUSH
15635: CALL_OW 74
15639: PPUSH
15640: CALL_OW 115
// until IsDead ( un ) ;
15644: LD_VAR 0 1
15648: PPUSH
15649: CALL_OW 301
15653: IFFALSE 15601
// end ;
15655: PPOPN 1
15657: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15658: LD_EXP 26
15662: IFFALSE 15670
15664: PUSH
15665: LD_EXP 66
15669: AND
15670: IFFALSE 15682
15672: GO 15674
15674: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15675: LD_STRING earthquake(getX(game), 0, 32)
15677: PPUSH
15678: CALL_OW 559
15682: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15683: LD_EXP 26
15687: IFFALSE 15695
15689: PUSH
15690: LD_EXP 67
15694: AND
15695: IFFALSE 15786
15697: GO 15699
15699: DISABLE
15700: LD_INT 0
15702: PPUSH
// begin enable ;
15703: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15704: LD_ADDR_VAR 0 1
15708: PUSH
15709: LD_INT 22
15711: PUSH
15712: LD_OWVAR 2
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 21
15723: PUSH
15724: LD_INT 2
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 33
15733: PUSH
15734: LD_INT 3
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PPUSH
15746: CALL_OW 69
15750: ST_TO_ADDR
// if not tmp then
15751: LD_VAR 0 1
15755: NOT
15756: IFFALSE 15760
// exit ;
15758: GO 15786
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15760: LD_VAR 0 1
15764: PUSH
15765: LD_INT 1
15767: PPUSH
15768: LD_VAR 0 1
15772: PPUSH
15773: CALL_OW 12
15777: ARRAY
15778: PPUSH
15779: LD_INT 1
15781: PPUSH
15782: CALL_OW 234
// end ;
15786: PPOPN 1
15788: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15789: LD_EXP 26
15793: IFFALSE 15801
15795: PUSH
15796: LD_EXP 68
15800: AND
15801: IFFALSE 15942
15803: GO 15805
15805: DISABLE
15806: LD_INT 0
15808: PPUSH
15809: PPUSH
15810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15811: LD_ADDR_VAR 0 3
15815: PUSH
15816: LD_INT 22
15818: PUSH
15819: LD_OWVAR 2
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 25
15830: PUSH
15831: LD_INT 1
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 69
15846: ST_TO_ADDR
// if not tmp then
15847: LD_VAR 0 3
15851: NOT
15852: IFFALSE 15856
// exit ;
15854: GO 15942
// un := tmp [ rand ( 1 , tmp ) ] ;
15856: LD_ADDR_VAR 0 2
15860: PUSH
15861: LD_VAR 0 3
15865: PUSH
15866: LD_INT 1
15868: PPUSH
15869: LD_VAR 0 3
15873: PPUSH
15874: CALL_OW 12
15878: ARRAY
15879: ST_TO_ADDR
// if Crawls ( un ) then
15880: LD_VAR 0 2
15884: PPUSH
15885: CALL_OW 318
15889: IFFALSE 15900
// ComWalk ( un ) ;
15891: LD_VAR 0 2
15895: PPUSH
15896: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15900: LD_VAR 0 2
15904: PPUSH
15905: LD_INT 9
15907: PPUSH
15908: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15912: LD_INT 28
15914: PPUSH
15915: LD_OWVAR 2
15919: PPUSH
15920: LD_INT 2
15922: PPUSH
15923: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15927: LD_INT 29
15929: PPUSH
15930: LD_OWVAR 2
15934: PPUSH
15935: LD_INT 2
15937: PPUSH
15938: CALL_OW 322
// end ;
15942: PPOPN 3
15944: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15945: LD_EXP 26
15949: IFFALSE 15957
15951: PUSH
15952: LD_EXP 69
15956: AND
15957: IFFALSE 16068
15959: GO 15961
15961: DISABLE
15962: LD_INT 0
15964: PPUSH
15965: PPUSH
15966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15967: LD_ADDR_VAR 0 3
15971: PUSH
15972: LD_INT 22
15974: PUSH
15975: LD_OWVAR 2
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 25
15986: PUSH
15987: LD_INT 1
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PPUSH
15998: CALL_OW 69
16002: ST_TO_ADDR
// if not tmp then
16003: LD_VAR 0 3
16007: NOT
16008: IFFALSE 16012
// exit ;
16010: GO 16068
// un := tmp [ rand ( 1 , tmp ) ] ;
16012: LD_ADDR_VAR 0 2
16016: PUSH
16017: LD_VAR 0 3
16021: PUSH
16022: LD_INT 1
16024: PPUSH
16025: LD_VAR 0 3
16029: PPUSH
16030: CALL_OW 12
16034: ARRAY
16035: ST_TO_ADDR
// if Crawls ( un ) then
16036: LD_VAR 0 2
16040: PPUSH
16041: CALL_OW 318
16045: IFFALSE 16056
// ComWalk ( un ) ;
16047: LD_VAR 0 2
16051: PPUSH
16052: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16056: LD_VAR 0 2
16060: PPUSH
16061: LD_INT 8
16063: PPUSH
16064: CALL_OW 336
// end ;
16068: PPOPN 3
16070: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16071: LD_EXP 26
16075: IFFALSE 16083
16077: PUSH
16078: LD_EXP 70
16082: AND
16083: IFFALSE 16227
16085: GO 16087
16087: DISABLE
16088: LD_INT 0
16090: PPUSH
16091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16092: LD_ADDR_VAR 0 2
16096: PUSH
16097: LD_INT 22
16099: PUSH
16100: LD_OWVAR 2
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 21
16111: PUSH
16112: LD_INT 2
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 2
16121: PUSH
16122: LD_INT 34
16124: PUSH
16125: LD_INT 12
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 34
16134: PUSH
16135: LD_INT 51
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 34
16144: PUSH
16145: LD_INT 32
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: LIST
16162: PPUSH
16163: CALL_OW 69
16167: ST_TO_ADDR
// if not tmp then
16168: LD_VAR 0 2
16172: NOT
16173: IFFALSE 16177
// exit ;
16175: GO 16227
// for i in tmp do
16177: LD_ADDR_VAR 0 1
16181: PUSH
16182: LD_VAR 0 2
16186: PUSH
16187: FOR_IN
16188: IFFALSE 16225
// if GetCargo ( i , mat_artifact ) = 0 then
16190: LD_VAR 0 1
16194: PPUSH
16195: LD_INT 4
16197: PPUSH
16198: CALL_OW 289
16202: PUSH
16203: LD_INT 0
16205: EQUAL
16206: IFFALSE 16223
// SetCargo ( i , mat_siberit , 100 ) ;
16208: LD_VAR 0 1
16212: PPUSH
16213: LD_INT 3
16215: PPUSH
16216: LD_INT 100
16218: PPUSH
16219: CALL_OW 290
16223: GO 16187
16225: POP
16226: POP
// end ;
16227: PPOPN 2
16229: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16230: LD_EXP 26
16234: IFFALSE 16242
16236: PUSH
16237: LD_EXP 71
16241: AND
16242: IFFALSE 16425
16244: GO 16246
16246: DISABLE
16247: LD_INT 0
16249: PPUSH
16250: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16251: LD_ADDR_VAR 0 2
16255: PUSH
16256: LD_INT 22
16258: PUSH
16259: LD_OWVAR 2
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PPUSH
16268: CALL_OW 69
16272: ST_TO_ADDR
// if not tmp then
16273: LD_VAR 0 2
16277: NOT
16278: IFFALSE 16282
// exit ;
16280: GO 16425
// for i := 1 to 2 do
16282: LD_ADDR_VAR 0 1
16286: PUSH
16287: DOUBLE
16288: LD_INT 1
16290: DEC
16291: ST_TO_ADDR
16292: LD_INT 2
16294: PUSH
16295: FOR_TO
16296: IFFALSE 16423
// begin uc_side := your_side ;
16298: LD_ADDR_OWVAR 20
16302: PUSH
16303: LD_OWVAR 2
16307: ST_TO_ADDR
// uc_nation := nation_american ;
16308: LD_ADDR_OWVAR 21
16312: PUSH
16313: LD_INT 1
16315: ST_TO_ADDR
// vc_chassis := us_morphling ;
16316: LD_ADDR_OWVAR 37
16320: PUSH
16321: LD_INT 5
16323: ST_TO_ADDR
// vc_engine := engine_siberite ;
16324: LD_ADDR_OWVAR 39
16328: PUSH
16329: LD_INT 3
16331: ST_TO_ADDR
// vc_control := control_computer ;
16332: LD_ADDR_OWVAR 38
16336: PUSH
16337: LD_INT 3
16339: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16340: LD_ADDR_OWVAR 40
16344: PUSH
16345: LD_INT 10
16347: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16348: LD_VAR 0 2
16352: PUSH
16353: LD_INT 1
16355: ARRAY
16356: PPUSH
16357: CALL_OW 310
16361: NOT
16362: IFFALSE 16409
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16364: CALL_OW 45
16368: PPUSH
16369: LD_VAR 0 2
16373: PUSH
16374: LD_INT 1
16376: ARRAY
16377: PPUSH
16378: CALL_OW 250
16382: PPUSH
16383: LD_VAR 0 2
16387: PUSH
16388: LD_INT 1
16390: ARRAY
16391: PPUSH
16392: CALL_OW 251
16396: PPUSH
16397: LD_INT 12
16399: PPUSH
16400: LD_INT 1
16402: PPUSH
16403: CALL_OW 50
16407: GO 16421
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16409: CALL_OW 45
16413: PPUSH
16414: LD_INT 1
16416: PPUSH
16417: CALL_OW 51
// end ;
16421: GO 16295
16423: POP
16424: POP
// end ;
16425: PPOPN 2
16427: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16428: LD_EXP 26
16432: IFFALSE 16440
16434: PUSH
16435: LD_EXP 72
16439: AND
16440: IFFALSE 16662
16442: GO 16444
16444: DISABLE
16445: LD_INT 0
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16453: LD_ADDR_VAR 0 6
16457: PUSH
16458: LD_INT 22
16460: PUSH
16461: LD_OWVAR 2
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 21
16472: PUSH
16473: LD_INT 1
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 3
16482: PUSH
16483: LD_INT 23
16485: PUSH
16486: LD_INT 0
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: LIST
16501: PPUSH
16502: CALL_OW 69
16506: ST_TO_ADDR
// if not tmp then
16507: LD_VAR 0 6
16511: NOT
16512: IFFALSE 16516
// exit ;
16514: GO 16662
// s1 := rand ( 1 , 4 ) ;
16516: LD_ADDR_VAR 0 2
16520: PUSH
16521: LD_INT 1
16523: PPUSH
16524: LD_INT 4
16526: PPUSH
16527: CALL_OW 12
16531: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16532: LD_ADDR_VAR 0 4
16536: PUSH
16537: LD_VAR 0 6
16541: PUSH
16542: LD_INT 1
16544: ARRAY
16545: PPUSH
16546: LD_VAR 0 2
16550: PPUSH
16551: CALL_OW 259
16555: ST_TO_ADDR
// if s1 = 1 then
16556: LD_VAR 0 2
16560: PUSH
16561: LD_INT 1
16563: EQUAL
16564: IFFALSE 16584
// s2 := rand ( 2 , 4 ) else
16566: LD_ADDR_VAR 0 3
16570: PUSH
16571: LD_INT 2
16573: PPUSH
16574: LD_INT 4
16576: PPUSH
16577: CALL_OW 12
16581: ST_TO_ADDR
16582: GO 16592
// s2 := 1 ;
16584: LD_ADDR_VAR 0 3
16588: PUSH
16589: LD_INT 1
16591: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16592: LD_ADDR_VAR 0 5
16596: PUSH
16597: LD_VAR 0 6
16601: PUSH
16602: LD_INT 1
16604: ARRAY
16605: PPUSH
16606: LD_VAR 0 3
16610: PPUSH
16611: CALL_OW 259
16615: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16616: LD_VAR 0 6
16620: PUSH
16621: LD_INT 1
16623: ARRAY
16624: PPUSH
16625: LD_VAR 0 2
16629: PPUSH
16630: LD_VAR 0 5
16634: PPUSH
16635: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16639: LD_VAR 0 6
16643: PUSH
16644: LD_INT 1
16646: ARRAY
16647: PPUSH
16648: LD_VAR 0 3
16652: PPUSH
16653: LD_VAR 0 4
16657: PPUSH
16658: CALL_OW 237
// end ;
16662: PPOPN 6
16664: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16665: LD_EXP 26
16669: IFFALSE 16677
16671: PUSH
16672: LD_EXP 73
16676: AND
16677: IFFALSE 16756
16679: GO 16681
16681: DISABLE
16682: LD_INT 0
16684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16685: LD_ADDR_VAR 0 1
16689: PUSH
16690: LD_INT 22
16692: PUSH
16693: LD_OWVAR 2
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 30
16704: PUSH
16705: LD_INT 3
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PPUSH
16716: CALL_OW 69
16720: ST_TO_ADDR
// if not tmp then
16721: LD_VAR 0 1
16725: NOT
16726: IFFALSE 16730
// exit ;
16728: GO 16756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16730: LD_VAR 0 1
16734: PUSH
16735: LD_INT 1
16737: PPUSH
16738: LD_VAR 0 1
16742: PPUSH
16743: CALL_OW 12
16747: ARRAY
16748: PPUSH
16749: LD_INT 1
16751: PPUSH
16752: CALL_OW 234
// end ;
16756: PPOPN 1
16758: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16759: LD_EXP 26
16763: IFFALSE 16771
16765: PUSH
16766: LD_EXP 74
16770: AND
16771: IFFALSE 16883
16773: GO 16775
16775: DISABLE
16776: LD_INT 0
16778: PPUSH
16779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16780: LD_ADDR_VAR 0 2
16784: PUSH
16785: LD_INT 22
16787: PUSH
16788: LD_OWVAR 2
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 2
16799: PUSH
16800: LD_INT 30
16802: PUSH
16803: LD_INT 27
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 30
16812: PUSH
16813: LD_INT 26
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 30
16822: PUSH
16823: LD_INT 28
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PPUSH
16840: CALL_OW 69
16844: ST_TO_ADDR
// if not tmp then
16845: LD_VAR 0 2
16849: NOT
16850: IFFALSE 16854
// exit ;
16852: GO 16883
// for i in tmp do
16854: LD_ADDR_VAR 0 1
16858: PUSH
16859: LD_VAR 0 2
16863: PUSH
16864: FOR_IN
16865: IFFALSE 16881
// SetLives ( i , 1 ) ;
16867: LD_VAR 0 1
16871: PPUSH
16872: LD_INT 1
16874: PPUSH
16875: CALL_OW 234
16879: GO 16864
16881: POP
16882: POP
// end ;
16883: PPOPN 2
16885: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16886: LD_EXP 26
16890: IFFALSE 16898
16892: PUSH
16893: LD_EXP 75
16897: AND
16898: IFFALSE 17185
16900: GO 16902
16902: DISABLE
16903: LD_INT 0
16905: PPUSH
16906: PPUSH
16907: PPUSH
// begin i := rand ( 1 , 7 ) ;
16908: LD_ADDR_VAR 0 1
16912: PUSH
16913: LD_INT 1
16915: PPUSH
16916: LD_INT 7
16918: PPUSH
16919: CALL_OW 12
16923: ST_TO_ADDR
// case i of 1 :
16924: LD_VAR 0 1
16928: PUSH
16929: LD_INT 1
16931: DOUBLE
16932: EQUAL
16933: IFTRUE 16937
16935: GO 16947
16937: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16938: LD_STRING earthquake(getX(game), 0, 32)
16940: PPUSH
16941: CALL_OW 559
16945: GO 17185
16947: LD_INT 2
16949: DOUBLE
16950: EQUAL
16951: IFTRUE 16955
16953: GO 16969
16955: POP
// begin ToLua ( displayStucuk(); ) ;
16956: LD_STRING displayStucuk();
16958: PPUSH
16959: CALL_OW 559
// ResetFog ;
16963: CALL_OW 335
// end ; 3 :
16967: GO 17185
16969: LD_INT 3
16971: DOUBLE
16972: EQUAL
16973: IFTRUE 16977
16975: GO 17081
16977: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16978: LD_ADDR_VAR 0 2
16982: PUSH
16983: LD_INT 22
16985: PUSH
16986: LD_OWVAR 2
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 25
16997: PUSH
16998: LD_INT 1
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PPUSH
17009: CALL_OW 69
17013: ST_TO_ADDR
// if not tmp then
17014: LD_VAR 0 2
17018: NOT
17019: IFFALSE 17023
// exit ;
17021: GO 17185
// un := tmp [ rand ( 1 , tmp ) ] ;
17023: LD_ADDR_VAR 0 3
17027: PUSH
17028: LD_VAR 0 2
17032: PUSH
17033: LD_INT 1
17035: PPUSH
17036: LD_VAR 0 2
17040: PPUSH
17041: CALL_OW 12
17045: ARRAY
17046: ST_TO_ADDR
// if Crawls ( un ) then
17047: LD_VAR 0 3
17051: PPUSH
17052: CALL_OW 318
17056: IFFALSE 17067
// ComWalk ( un ) ;
17058: LD_VAR 0 3
17062: PPUSH
17063: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17067: LD_VAR 0 3
17071: PPUSH
17072: LD_INT 8
17074: PPUSH
17075: CALL_OW 336
// end ; 4 :
17079: GO 17185
17081: LD_INT 4
17083: DOUBLE
17084: EQUAL
17085: IFTRUE 17089
17087: GO 17163
17089: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17090: LD_ADDR_VAR 0 2
17094: PUSH
17095: LD_INT 22
17097: PUSH
17098: LD_OWVAR 2
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 30
17109: PUSH
17110: LD_INT 29
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PPUSH
17121: CALL_OW 69
17125: ST_TO_ADDR
// if not tmp then
17126: LD_VAR 0 2
17130: NOT
17131: IFFALSE 17135
// exit ;
17133: GO 17185
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17135: LD_VAR 0 2
17139: PUSH
17140: LD_INT 1
17142: ARRAY
17143: PPUSH
17144: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17148: LD_VAR 0 2
17152: PUSH
17153: LD_INT 1
17155: ARRAY
17156: PPUSH
17157: CALL_OW 65
// end ; 5 .. 7 :
17161: GO 17185
17163: LD_INT 5
17165: DOUBLE
17166: GREATEREQUAL
17167: IFFALSE 17175
17169: LD_INT 7
17171: DOUBLE
17172: LESSEQUAL
17173: IFTRUE 17177
17175: GO 17184
17177: POP
// StreamSibBomb ; end ;
17178: CALL 13366 0 0
17182: GO 17185
17184: POP
// end ;
17185: PPOPN 3
17187: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17188: LD_EXP 26
17192: IFFALSE 17200
17194: PUSH
17195: LD_EXP 76
17199: AND
17200: IFFALSE 17356
17202: GO 17204
17204: DISABLE
17205: LD_INT 0
17207: PPUSH
17208: PPUSH
17209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17210: LD_ADDR_VAR 0 2
17214: PUSH
17215: LD_INT 81
17217: PUSH
17218: LD_OWVAR 2
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: LD_INT 21
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 21
17242: PUSH
17243: LD_INT 2
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PPUSH
17259: CALL_OW 69
17263: ST_TO_ADDR
// if not tmp then
17264: LD_VAR 0 2
17268: NOT
17269: IFFALSE 17273
// exit ;
17271: GO 17356
// p := 0 ;
17273: LD_ADDR_VAR 0 3
17277: PUSH
17278: LD_INT 0
17280: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17281: LD_INT 35
17283: PPUSH
17284: CALL_OW 67
// p := p + 1 ;
17288: LD_ADDR_VAR 0 3
17292: PUSH
17293: LD_VAR 0 3
17297: PUSH
17298: LD_INT 1
17300: PLUS
17301: ST_TO_ADDR
// for i in tmp do
17302: LD_ADDR_VAR 0 1
17306: PUSH
17307: LD_VAR 0 2
17311: PUSH
17312: FOR_IN
17313: IFFALSE 17344
// if GetLives ( i ) < 1000 then
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 256
17324: PUSH
17325: LD_INT 1000
17327: LESS
17328: IFFALSE 17342
// SetLives ( i , 1000 ) ;
17330: LD_VAR 0 1
17334: PPUSH
17335: LD_INT 1000
17337: PPUSH
17338: CALL_OW 234
17342: GO 17312
17344: POP
17345: POP
// until p > 20 ;
17346: LD_VAR 0 3
17350: PUSH
17351: LD_INT 20
17353: GREATER
17354: IFFALSE 17281
// end ;
17356: PPOPN 3
17358: END
// every 0 0$1 trigger StreamModeActive and sTime do
17359: LD_EXP 26
17363: IFFALSE 17371
17365: PUSH
17366: LD_EXP 77
17370: AND
17371: IFFALSE 17406
17373: GO 17375
17375: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17376: LD_INT 28
17378: PPUSH
17379: LD_OWVAR 2
17383: PPUSH
17384: LD_INT 2
17386: PPUSH
17387: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17391: LD_INT 30
17393: PPUSH
17394: LD_OWVAR 2
17398: PPUSH
17399: LD_INT 2
17401: PPUSH
17402: CALL_OW 322
// end ;
17406: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17407: LD_EXP 26
17411: IFFALSE 17419
17413: PUSH
17414: LD_EXP 78
17418: AND
17419: IFFALSE 17540
17421: GO 17423
17423: DISABLE
17424: LD_INT 0
17426: PPUSH
17427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17428: LD_ADDR_VAR 0 2
17432: PUSH
17433: LD_INT 22
17435: PUSH
17436: LD_OWVAR 2
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 21
17447: PUSH
17448: LD_INT 1
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 3
17457: PUSH
17458: LD_INT 23
17460: PUSH
17461: LD_INT 0
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: PPUSH
17477: CALL_OW 69
17481: ST_TO_ADDR
// if not tmp then
17482: LD_VAR 0 2
17486: NOT
17487: IFFALSE 17491
// exit ;
17489: GO 17540
// for i in tmp do
17491: LD_ADDR_VAR 0 1
17495: PUSH
17496: LD_VAR 0 2
17500: PUSH
17501: FOR_IN
17502: IFFALSE 17538
// begin if Crawls ( i ) then
17504: LD_VAR 0 1
17508: PPUSH
17509: CALL_OW 318
17513: IFFALSE 17524
// ComWalk ( i ) ;
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 138
// SetClass ( i , 2 ) ;
17524: LD_VAR 0 1
17528: PPUSH
17529: LD_INT 2
17531: PPUSH
17532: CALL_OW 336
// end ;
17536: GO 17501
17538: POP
17539: POP
// end ;
17540: PPOPN 2
17542: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17543: LD_EXP 26
17547: IFFALSE 17555
17549: PUSH
17550: LD_EXP 79
17554: AND
17555: IFFALSE 17845
17557: GO 17559
17559: DISABLE
17560: LD_INT 0
17562: PPUSH
17563: PPUSH
17564: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17565: LD_OWVAR 2
17569: PPUSH
17570: LD_INT 9
17572: PPUSH
17573: LD_INT 1
17575: PPUSH
17576: LD_INT 1
17578: PPUSH
17579: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17583: LD_INT 9
17585: PPUSH
17586: LD_OWVAR 2
17590: PPUSH
17591: CALL_OW 343
// uc_side := 9 ;
17595: LD_ADDR_OWVAR 20
17599: PUSH
17600: LD_INT 9
17602: ST_TO_ADDR
// uc_nation := 2 ;
17603: LD_ADDR_OWVAR 21
17607: PUSH
17608: LD_INT 2
17610: ST_TO_ADDR
// hc_name := Dark Warrior ;
17611: LD_ADDR_OWVAR 26
17615: PUSH
17616: LD_STRING Dark Warrior
17618: ST_TO_ADDR
// hc_gallery :=  ;
17619: LD_ADDR_OWVAR 33
17623: PUSH
17624: LD_STRING 
17626: ST_TO_ADDR
// hc_noskilllimit := true ;
17627: LD_ADDR_OWVAR 76
17631: PUSH
17632: LD_INT 1
17634: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17635: LD_ADDR_OWVAR 31
17639: PUSH
17640: LD_INT 30
17642: PUSH
17643: LD_INT 30
17645: PUSH
17646: LD_INT 30
17648: PUSH
17649: LD_INT 30
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: ST_TO_ADDR
// un := CreateHuman ;
17658: LD_ADDR_VAR 0 3
17662: PUSH
17663: CALL_OW 44
17667: ST_TO_ADDR
// hc_noskilllimit := false ;
17668: LD_ADDR_OWVAR 76
17672: PUSH
17673: LD_INT 0
17675: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17676: LD_VAR 0 3
17680: PPUSH
17681: LD_INT 1
17683: PPUSH
17684: CALL_OW 51
// ToLua ( playRanger() ) ;
17688: LD_STRING playRanger()
17690: PPUSH
17691: CALL_OW 559
// p := 0 ;
17695: LD_ADDR_VAR 0 2
17699: PUSH
17700: LD_INT 0
17702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17703: LD_INT 35
17705: PPUSH
17706: CALL_OW 67
// p := p + 1 ;
17710: LD_ADDR_VAR 0 2
17714: PUSH
17715: LD_VAR 0 2
17719: PUSH
17720: LD_INT 1
17722: PLUS
17723: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17724: LD_VAR 0 3
17728: PPUSH
17729: CALL_OW 256
17733: PUSH
17734: LD_INT 1000
17736: LESS
17737: IFFALSE 17751
// SetLives ( un , 1000 ) ;
17739: LD_VAR 0 3
17743: PPUSH
17744: LD_INT 1000
17746: PPUSH
17747: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17751: LD_VAR 0 3
17755: PPUSH
17756: LD_INT 81
17758: PUSH
17759: LD_OWVAR 2
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 91
17770: PUSH
17771: LD_VAR 0 3
17775: PUSH
17776: LD_INT 30
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PPUSH
17788: CALL_OW 69
17792: PPUSH
17793: LD_VAR 0 3
17797: PPUSH
17798: CALL_OW 74
17802: PPUSH
17803: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17807: LD_VAR 0 2
17811: PUSH
17812: LD_INT 80
17814: GREATER
17815: IFTRUE 17828
17817: PUSH
17818: LD_VAR 0 3
17822: PPUSH
17823: CALL_OW 301
17827: OR
17828: IFFALSE 17703
// if un then
17830: LD_VAR 0 3
17834: IFFALSE 17845
// RemoveUnit ( un ) ;
17836: LD_VAR 0 3
17840: PPUSH
17841: CALL_OW 64
// end ;
17845: PPOPN 3
17847: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17848: LD_EXP 80
17852: IFFALSE 17968
17854: GO 17856
17856: DISABLE
17857: LD_INT 0
17859: PPUSH
17860: PPUSH
17861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17862: LD_ADDR_VAR 0 2
17866: PUSH
17867: LD_INT 81
17869: PUSH
17870: LD_OWVAR 2
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 21
17881: PUSH
17882: LD_INT 1
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PPUSH
17893: CALL_OW 69
17897: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17898: LD_STRING playComputer()
17900: PPUSH
17901: CALL_OW 559
// if not tmp then
17905: LD_VAR 0 2
17909: NOT
17910: IFFALSE 17914
// exit ;
17912: GO 17968
// for i in tmp do
17914: LD_ADDR_VAR 0 1
17918: PUSH
17919: LD_VAR 0 2
17923: PUSH
17924: FOR_IN
17925: IFFALSE 17966
// for j := 1 to 4 do
17927: LD_ADDR_VAR 0 3
17931: PUSH
17932: DOUBLE
17933: LD_INT 1
17935: DEC
17936: ST_TO_ADDR
17937: LD_INT 4
17939: PUSH
17940: FOR_TO
17941: IFFALSE 17962
// SetSkill ( i , j , 10 ) ;
17943: LD_VAR 0 1
17947: PPUSH
17948: LD_VAR 0 3
17952: PPUSH
17953: LD_INT 10
17955: PPUSH
17956: CALL_OW 237
17960: GO 17940
17962: POP
17963: POP
17964: GO 17924
17966: POP
17967: POP
// end ;
17968: PPOPN 3
17970: END
// every 0 0$1 trigger s30 do var i , tmp ;
17971: LD_EXP 81
17975: IFFALSE 18044
17977: GO 17979
17979: DISABLE
17980: LD_INT 0
17982: PPUSH
17983: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17984: LD_ADDR_VAR 0 2
17988: PUSH
17989: LD_INT 22
17991: PUSH
17992: LD_OWVAR 2
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PPUSH
18001: CALL_OW 69
18005: ST_TO_ADDR
// if not tmp then
18006: LD_VAR 0 2
18010: NOT
18011: IFFALSE 18015
// exit ;
18013: GO 18044
// for i in tmp do
18015: LD_ADDR_VAR 0 1
18019: PUSH
18020: LD_VAR 0 2
18024: PUSH
18025: FOR_IN
18026: IFFALSE 18042
// SetLives ( i , 300 ) ;
18028: LD_VAR 0 1
18032: PPUSH
18033: LD_INT 300
18035: PPUSH
18036: CALL_OW 234
18040: GO 18025
18042: POP
18043: POP
// end ;
18044: PPOPN 2
18046: END
// every 0 0$1 trigger s60 do var i , tmp ;
18047: LD_EXP 82
18051: IFFALSE 18120
18053: GO 18055
18055: DISABLE
18056: LD_INT 0
18058: PPUSH
18059: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18060: LD_ADDR_VAR 0 2
18064: PUSH
18065: LD_INT 22
18067: PUSH
18068: LD_OWVAR 2
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PPUSH
18077: CALL_OW 69
18081: ST_TO_ADDR
// if not tmp then
18082: LD_VAR 0 2
18086: NOT
18087: IFFALSE 18091
// exit ;
18089: GO 18120
// for i in tmp do
18091: LD_ADDR_VAR 0 1
18095: PUSH
18096: LD_VAR 0 2
18100: PUSH
18101: FOR_IN
18102: IFFALSE 18118
// SetLives ( i , 600 ) ;
18104: LD_VAR 0 1
18108: PPUSH
18109: LD_INT 600
18111: PPUSH
18112: CALL_OW 234
18116: GO 18101
18118: POP
18119: POP
// end ;
18120: PPOPN 2
18122: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18123: LD_INT 0
18125: PPUSH
// case cmd of 301 :
18126: LD_VAR 0 1
18130: PUSH
18131: LD_INT 301
18133: DOUBLE
18134: EQUAL
18135: IFTRUE 18139
18137: GO 18171
18139: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18140: LD_VAR 0 6
18144: PPUSH
18145: LD_VAR 0 7
18149: PPUSH
18150: LD_VAR 0 8
18154: PPUSH
18155: LD_VAR 0 4
18159: PPUSH
18160: LD_VAR 0 5
18164: PPUSH
18165: CALL 19384 0 5
18169: GO 18292
18171: LD_INT 302
18173: DOUBLE
18174: EQUAL
18175: IFTRUE 18179
18177: GO 18216
18179: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18180: LD_VAR 0 6
18184: PPUSH
18185: LD_VAR 0 7
18189: PPUSH
18190: LD_VAR 0 8
18194: PPUSH
18195: LD_VAR 0 9
18199: PPUSH
18200: LD_VAR 0 4
18204: PPUSH
18205: LD_VAR 0 5
18209: PPUSH
18210: CALL 19475 0 6
18214: GO 18292
18216: LD_INT 303
18218: DOUBLE
18219: EQUAL
18220: IFTRUE 18224
18222: GO 18261
18224: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18225: LD_VAR 0 6
18229: PPUSH
18230: LD_VAR 0 7
18234: PPUSH
18235: LD_VAR 0 8
18239: PPUSH
18240: LD_VAR 0 9
18244: PPUSH
18245: LD_VAR 0 4
18249: PPUSH
18250: LD_VAR 0 5
18254: PPUSH
18255: CALL 18297 0 6
18259: GO 18292
18261: LD_INT 304
18263: DOUBLE
18264: EQUAL
18265: IFTRUE 18269
18267: GO 18291
18269: POP
// hHackTeleport ( unit , x , y ) ; end ;
18270: LD_VAR 0 2
18274: PPUSH
18275: LD_VAR 0 4
18279: PPUSH
18280: LD_VAR 0 5
18284: PPUSH
18285: CALL 20068 0 3
18289: GO 18292
18291: POP
// end ;
18292: LD_VAR 0 12
18296: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18297: LD_INT 0
18299: PPUSH
18300: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18301: LD_VAR 0 1
18305: PUSH
18306: LD_INT 1
18308: LESS
18309: IFTRUE 18321
18311: PUSH
18312: LD_VAR 0 1
18316: PUSH
18317: LD_INT 3
18319: GREATER
18320: OR
18321: IFTRUE 18339
18323: PUSH
18324: LD_VAR 0 5
18328: PPUSH
18329: LD_VAR 0 6
18333: PPUSH
18334: CALL_OW 428
18338: OR
18339: IFFALSE 18343
// exit ;
18341: GO 19071
// uc_side := your_side ;
18343: LD_ADDR_OWVAR 20
18347: PUSH
18348: LD_OWVAR 2
18352: ST_TO_ADDR
// uc_nation := nation ;
18353: LD_ADDR_OWVAR 21
18357: PUSH
18358: LD_VAR 0 1
18362: ST_TO_ADDR
// bc_level = 1 ;
18363: LD_ADDR_OWVAR 43
18367: PUSH
18368: LD_INT 1
18370: ST_TO_ADDR
// case btype of 1 :
18371: LD_VAR 0 2
18375: PUSH
18376: LD_INT 1
18378: DOUBLE
18379: EQUAL
18380: IFTRUE 18384
18382: GO 18395
18384: POP
// bc_type := b_depot ; 2 :
18385: LD_ADDR_OWVAR 42
18389: PUSH
18390: LD_INT 0
18392: ST_TO_ADDR
18393: GO 19015
18395: LD_INT 2
18397: DOUBLE
18398: EQUAL
18399: IFTRUE 18403
18401: GO 18414
18403: POP
// bc_type := b_warehouse ; 3 :
18404: LD_ADDR_OWVAR 42
18408: PUSH
18409: LD_INT 1
18411: ST_TO_ADDR
18412: GO 19015
18414: LD_INT 3
18416: DOUBLE
18417: EQUAL
18418: IFTRUE 18422
18420: GO 18433
18422: POP
// bc_type := b_lab ; 4 .. 9 :
18423: LD_ADDR_OWVAR 42
18427: PUSH
18428: LD_INT 6
18430: ST_TO_ADDR
18431: GO 19015
18433: LD_INT 4
18435: DOUBLE
18436: GREATEREQUAL
18437: IFFALSE 18445
18439: LD_INT 9
18441: DOUBLE
18442: LESSEQUAL
18443: IFTRUE 18447
18445: GO 18507
18447: POP
// begin bc_type := b_lab_half ;
18448: LD_ADDR_OWVAR 42
18452: PUSH
18453: LD_INT 7
18455: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18456: LD_ADDR_OWVAR 44
18460: PUSH
18461: LD_INT 10
18463: PUSH
18464: LD_INT 11
18466: PUSH
18467: LD_INT 12
18469: PUSH
18470: LD_INT 15
18472: PUSH
18473: LD_INT 14
18475: PUSH
18476: LD_INT 13
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: PUSH
18487: LD_VAR 0 2
18491: PUSH
18492: LD_INT 3
18494: MINUS
18495: ARRAY
18496: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18497: LD_ADDR_OWVAR 45
18501: PUSH
18502: LD_INT 9
18504: ST_TO_ADDR
// end ; 10 .. 13 :
18505: GO 19015
18507: LD_INT 10
18509: DOUBLE
18510: GREATEREQUAL
18511: IFFALSE 18519
18513: LD_INT 13
18515: DOUBLE
18516: LESSEQUAL
18517: IFTRUE 18521
18519: GO 18598
18521: POP
// begin bc_type := b_lab_full ;
18522: LD_ADDR_OWVAR 42
18526: PUSH
18527: LD_INT 8
18529: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18530: LD_ADDR_OWVAR 44
18534: PUSH
18535: LD_INT 10
18537: PUSH
18538: LD_INT 12
18540: PUSH
18541: LD_INT 14
18543: PUSH
18544: LD_INT 13
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: PUSH
18553: LD_VAR 0 2
18557: PUSH
18558: LD_INT 9
18560: MINUS
18561: ARRAY
18562: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18563: LD_ADDR_OWVAR 45
18567: PUSH
18568: LD_INT 11
18570: PUSH
18571: LD_INT 15
18573: PUSH
18574: LD_INT 12
18576: PUSH
18577: LD_INT 15
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: PUSH
18586: LD_VAR 0 2
18590: PUSH
18591: LD_INT 9
18593: MINUS
18594: ARRAY
18595: ST_TO_ADDR
// end ; 14 :
18596: GO 19015
18598: LD_INT 14
18600: DOUBLE
18601: EQUAL
18602: IFTRUE 18606
18604: GO 18617
18606: POP
// bc_type := b_workshop ; 15 :
18607: LD_ADDR_OWVAR 42
18611: PUSH
18612: LD_INT 2
18614: ST_TO_ADDR
18615: GO 19015
18617: LD_INT 15
18619: DOUBLE
18620: EQUAL
18621: IFTRUE 18625
18623: GO 18636
18625: POP
// bc_type := b_factory ; 16 :
18626: LD_ADDR_OWVAR 42
18630: PUSH
18631: LD_INT 3
18633: ST_TO_ADDR
18634: GO 19015
18636: LD_INT 16
18638: DOUBLE
18639: EQUAL
18640: IFTRUE 18644
18642: GO 18655
18644: POP
// bc_type := b_ext_gun ; 17 :
18645: LD_ADDR_OWVAR 42
18649: PUSH
18650: LD_INT 17
18652: ST_TO_ADDR
18653: GO 19015
18655: LD_INT 17
18657: DOUBLE
18658: EQUAL
18659: IFTRUE 18663
18661: GO 18691
18663: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18664: LD_ADDR_OWVAR 42
18668: PUSH
18669: LD_INT 19
18671: PUSH
18672: LD_INT 23
18674: PUSH
18675: LD_INT 19
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: PUSH
18683: LD_VAR 0 1
18687: ARRAY
18688: ST_TO_ADDR
18689: GO 19015
18691: LD_INT 18
18693: DOUBLE
18694: EQUAL
18695: IFTRUE 18699
18697: GO 18710
18699: POP
// bc_type := b_ext_radar ; 19 :
18700: LD_ADDR_OWVAR 42
18704: PUSH
18705: LD_INT 20
18707: ST_TO_ADDR
18708: GO 19015
18710: LD_INT 19
18712: DOUBLE
18713: EQUAL
18714: IFTRUE 18718
18716: GO 18729
18718: POP
// bc_type := b_ext_radio ; 20 :
18719: LD_ADDR_OWVAR 42
18723: PUSH
18724: LD_INT 22
18726: ST_TO_ADDR
18727: GO 19015
18729: LD_INT 20
18731: DOUBLE
18732: EQUAL
18733: IFTRUE 18737
18735: GO 18748
18737: POP
// bc_type := b_ext_siberium ; 21 :
18738: LD_ADDR_OWVAR 42
18742: PUSH
18743: LD_INT 21
18745: ST_TO_ADDR
18746: GO 19015
18748: LD_INT 21
18750: DOUBLE
18751: EQUAL
18752: IFTRUE 18756
18754: GO 18767
18756: POP
// bc_type := b_ext_computer ; 22 :
18757: LD_ADDR_OWVAR 42
18761: PUSH
18762: LD_INT 24
18764: ST_TO_ADDR
18765: GO 19015
18767: LD_INT 22
18769: DOUBLE
18770: EQUAL
18771: IFTRUE 18775
18773: GO 18786
18775: POP
// bc_type := b_ext_track ; 23 :
18776: LD_ADDR_OWVAR 42
18780: PUSH
18781: LD_INT 16
18783: ST_TO_ADDR
18784: GO 19015
18786: LD_INT 23
18788: DOUBLE
18789: EQUAL
18790: IFTRUE 18794
18792: GO 18805
18794: POP
// bc_type := b_ext_laser ; 24 :
18795: LD_ADDR_OWVAR 42
18799: PUSH
18800: LD_INT 25
18802: ST_TO_ADDR
18803: GO 19015
18805: LD_INT 24
18807: DOUBLE
18808: EQUAL
18809: IFTRUE 18813
18811: GO 18824
18813: POP
// bc_type := b_control_tower ; 25 :
18814: LD_ADDR_OWVAR 42
18818: PUSH
18819: LD_INT 36
18821: ST_TO_ADDR
18822: GO 19015
18824: LD_INT 25
18826: DOUBLE
18827: EQUAL
18828: IFTRUE 18832
18830: GO 18843
18832: POP
// bc_type := b_breastwork ; 26 :
18833: LD_ADDR_OWVAR 42
18837: PUSH
18838: LD_INT 31
18840: ST_TO_ADDR
18841: GO 19015
18843: LD_INT 26
18845: DOUBLE
18846: EQUAL
18847: IFTRUE 18851
18849: GO 18862
18851: POP
// bc_type := b_bunker ; 27 :
18852: LD_ADDR_OWVAR 42
18856: PUSH
18857: LD_INT 32
18859: ST_TO_ADDR
18860: GO 19015
18862: LD_INT 27
18864: DOUBLE
18865: EQUAL
18866: IFTRUE 18870
18868: GO 18881
18870: POP
// bc_type := b_turret ; 28 :
18871: LD_ADDR_OWVAR 42
18875: PUSH
18876: LD_INT 33
18878: ST_TO_ADDR
18879: GO 19015
18881: LD_INT 28
18883: DOUBLE
18884: EQUAL
18885: IFTRUE 18889
18887: GO 18900
18889: POP
// bc_type := b_armoury ; 29 :
18890: LD_ADDR_OWVAR 42
18894: PUSH
18895: LD_INT 4
18897: ST_TO_ADDR
18898: GO 19015
18900: LD_INT 29
18902: DOUBLE
18903: EQUAL
18904: IFTRUE 18908
18906: GO 18919
18908: POP
// bc_type := b_barracks ; 30 :
18909: LD_ADDR_OWVAR 42
18913: PUSH
18914: LD_INT 5
18916: ST_TO_ADDR
18917: GO 19015
18919: LD_INT 30
18921: DOUBLE
18922: EQUAL
18923: IFTRUE 18927
18925: GO 18938
18927: POP
// bc_type := b_solar_power ; 31 :
18928: LD_ADDR_OWVAR 42
18932: PUSH
18933: LD_INT 27
18935: ST_TO_ADDR
18936: GO 19015
18938: LD_INT 31
18940: DOUBLE
18941: EQUAL
18942: IFTRUE 18946
18944: GO 18957
18946: POP
// bc_type := b_oil_power ; 32 :
18947: LD_ADDR_OWVAR 42
18951: PUSH
18952: LD_INT 26
18954: ST_TO_ADDR
18955: GO 19015
18957: LD_INT 32
18959: DOUBLE
18960: EQUAL
18961: IFTRUE 18965
18963: GO 18976
18965: POP
// bc_type := b_siberite_power ; 33 :
18966: LD_ADDR_OWVAR 42
18970: PUSH
18971: LD_INT 28
18973: ST_TO_ADDR
18974: GO 19015
18976: LD_INT 33
18978: DOUBLE
18979: EQUAL
18980: IFTRUE 18984
18982: GO 18995
18984: POP
// bc_type := b_oil_mine ; 34 :
18985: LD_ADDR_OWVAR 42
18989: PUSH
18990: LD_INT 29
18992: ST_TO_ADDR
18993: GO 19015
18995: LD_INT 34
18997: DOUBLE
18998: EQUAL
18999: IFTRUE 19003
19001: GO 19014
19003: POP
// bc_type := b_siberite_mine ; end ;
19004: LD_ADDR_OWVAR 42
19008: PUSH
19009: LD_INT 30
19011: ST_TO_ADDR
19012: GO 19015
19014: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19015: LD_ADDR_VAR 0 8
19019: PUSH
19020: LD_VAR 0 5
19024: PPUSH
19025: LD_VAR 0 6
19029: PPUSH
19030: LD_VAR 0 3
19034: PPUSH
19035: CALL_OW 47
19039: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19040: LD_OWVAR 42
19044: PUSH
19045: LD_INT 32
19047: PUSH
19048: LD_INT 33
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: IN
19055: IFFALSE 19071
// PlaceWeaponTurret ( b , weapon ) ;
19057: LD_VAR 0 8
19061: PPUSH
19062: LD_VAR 0 4
19066: PPUSH
19067: CALL_OW 431
// end ;
19071: LD_VAR 0 7
19075: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19076: LD_INT 0
19078: PPUSH
19079: PPUSH
19080: PPUSH
19081: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19082: LD_ADDR_VAR 0 4
19086: PUSH
19087: LD_INT 22
19089: PUSH
19090: LD_OWVAR 2
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 2
19101: PUSH
19102: LD_INT 30
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 30
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: LIST
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PPUSH
19131: CALL_OW 69
19135: ST_TO_ADDR
// if not tmp then
19136: LD_VAR 0 4
19140: NOT
19141: IFFALSE 19145
// exit ;
19143: GO 19204
// for i in tmp do
19145: LD_ADDR_VAR 0 2
19149: PUSH
19150: LD_VAR 0 4
19154: PUSH
19155: FOR_IN
19156: IFFALSE 19202
// for j = 1 to 3 do
19158: LD_ADDR_VAR 0 3
19162: PUSH
19163: DOUBLE
19164: LD_INT 1
19166: DEC
19167: ST_TO_ADDR
19168: LD_INT 3
19170: PUSH
19171: FOR_TO
19172: IFFALSE 19198
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19174: LD_VAR 0 2
19178: PPUSH
19179: CALL_OW 274
19183: PPUSH
19184: LD_VAR 0 3
19188: PPUSH
19189: LD_INT 99999
19191: PPUSH
19192: CALL_OW 277
19196: GO 19171
19198: POP
19199: POP
19200: GO 19155
19202: POP
19203: POP
// end ;
19204: LD_VAR 0 1
19208: RET
// export function hHackSetLevel10 ; var i , j ; begin
19209: LD_INT 0
19211: PPUSH
19212: PPUSH
19213: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19214: LD_ADDR_VAR 0 2
19218: PUSH
19219: LD_INT 21
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PPUSH
19229: CALL_OW 69
19233: PUSH
19234: FOR_IN
19235: IFFALSE 19287
// if IsSelected ( i ) then
19237: LD_VAR 0 2
19241: PPUSH
19242: CALL_OW 306
19246: IFFALSE 19285
// begin for j := 1 to 4 do
19248: LD_ADDR_VAR 0 3
19252: PUSH
19253: DOUBLE
19254: LD_INT 1
19256: DEC
19257: ST_TO_ADDR
19258: LD_INT 4
19260: PUSH
19261: FOR_TO
19262: IFFALSE 19283
// SetSkill ( i , j , 10 ) ;
19264: LD_VAR 0 2
19268: PPUSH
19269: LD_VAR 0 3
19273: PPUSH
19274: LD_INT 10
19276: PPUSH
19277: CALL_OW 237
19281: GO 19261
19283: POP
19284: POP
// end ;
19285: GO 19234
19287: POP
19288: POP
// end ;
19289: LD_VAR 0 1
19293: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19294: LD_INT 0
19296: PPUSH
19297: PPUSH
19298: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19299: LD_ADDR_VAR 0 2
19303: PUSH
19304: LD_INT 22
19306: PUSH
19307: LD_OWVAR 2
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 21
19318: PUSH
19319: LD_INT 1
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PPUSH
19330: CALL_OW 69
19334: PUSH
19335: FOR_IN
19336: IFFALSE 19377
// begin for j := 1 to 4 do
19338: LD_ADDR_VAR 0 3
19342: PUSH
19343: DOUBLE
19344: LD_INT 1
19346: DEC
19347: ST_TO_ADDR
19348: LD_INT 4
19350: PUSH
19351: FOR_TO
19352: IFFALSE 19373
// SetSkill ( i , j , 10 ) ;
19354: LD_VAR 0 2
19358: PPUSH
19359: LD_VAR 0 3
19363: PPUSH
19364: LD_INT 10
19366: PPUSH
19367: CALL_OW 237
19371: GO 19351
19373: POP
19374: POP
// end ;
19375: GO 19335
19377: POP
19378: POP
// end ;
19379: LD_VAR 0 1
19383: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19384: LD_INT 0
19386: PPUSH
// uc_side := your_side ;
19387: LD_ADDR_OWVAR 20
19391: PUSH
19392: LD_OWVAR 2
19396: ST_TO_ADDR
// uc_nation := nation ;
19397: LD_ADDR_OWVAR 21
19401: PUSH
19402: LD_VAR 0 1
19406: ST_TO_ADDR
// InitHc ;
19407: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19411: LD_INT 0
19413: PPUSH
19414: LD_VAR 0 2
19418: PPUSH
19419: LD_VAR 0 3
19423: PPUSH
19424: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19428: LD_VAR 0 4
19432: PPUSH
19433: LD_VAR 0 5
19437: PPUSH
19438: CALL_OW 428
19442: PUSH
19443: LD_INT 0
19445: EQUAL
19446: IFFALSE 19470
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19448: CALL_OW 44
19452: PPUSH
19453: LD_VAR 0 4
19457: PPUSH
19458: LD_VAR 0 5
19462: PPUSH
19463: LD_INT 1
19465: PPUSH
19466: CALL_OW 48
// end ;
19470: LD_VAR 0 6
19474: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19475: LD_INT 0
19477: PPUSH
19478: PPUSH
// uc_side := your_side ;
19479: LD_ADDR_OWVAR 20
19483: PUSH
19484: LD_OWVAR 2
19488: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19489: LD_VAR 0 1
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: LD_INT 2
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: LD_INT 4
19505: PUSH
19506: LD_INT 5
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: IN
19516: IFFALSE 19528
// uc_nation := nation_american else
19518: LD_ADDR_OWVAR 21
19522: PUSH
19523: LD_INT 1
19525: ST_TO_ADDR
19526: GO 19571
// if chassis in [ 11 , 12 , 13 , 14 ] then
19528: LD_VAR 0 1
19532: PUSH
19533: LD_INT 11
19535: PUSH
19536: LD_INT 12
19538: PUSH
19539: LD_INT 13
19541: PUSH
19542: LD_INT 14
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: IN
19551: IFFALSE 19563
// uc_nation := nation_arabian else
19553: LD_ADDR_OWVAR 21
19557: PUSH
19558: LD_INT 2
19560: ST_TO_ADDR
19561: GO 19571
// uc_nation := nation_russian ;
19563: LD_ADDR_OWVAR 21
19567: PUSH
19568: LD_INT 3
19570: ST_TO_ADDR
// vc_chassis := chassis ;
19571: LD_ADDR_OWVAR 37
19575: PUSH
19576: LD_VAR 0 1
19580: ST_TO_ADDR
// vc_engine := engine ;
19581: LD_ADDR_OWVAR 39
19585: PUSH
19586: LD_VAR 0 2
19590: ST_TO_ADDR
// vc_control := control ;
19591: LD_ADDR_OWVAR 38
19595: PUSH
19596: LD_VAR 0 3
19600: ST_TO_ADDR
// vc_weapon := weapon ;
19601: LD_ADDR_OWVAR 40
19605: PUSH
19606: LD_VAR 0 4
19610: ST_TO_ADDR
// un := CreateVehicle ;
19611: LD_ADDR_VAR 0 8
19615: PUSH
19616: CALL_OW 45
19620: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19621: LD_VAR 0 8
19625: PPUSH
19626: LD_INT 0
19628: PPUSH
19629: LD_INT 5
19631: PPUSH
19632: CALL_OW 12
19636: PPUSH
19637: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19641: LD_VAR 0 8
19645: PPUSH
19646: LD_VAR 0 5
19650: PPUSH
19651: LD_VAR 0 6
19655: PPUSH
19656: LD_INT 1
19658: PPUSH
19659: CALL_OW 48
// end ;
19663: LD_VAR 0 7
19667: RET
// export hInvincible ; every 1 do
19668: GO 19670
19670: DISABLE
// hInvincible := [ ] ;
19671: LD_ADDR_EXP 83
19675: PUSH
19676: EMPTY
19677: ST_TO_ADDR
19678: END
// every 10 do var i ;
19679: GO 19681
19681: DISABLE
19682: LD_INT 0
19684: PPUSH
// begin enable ;
19685: ENABLE
// if not hInvincible then
19686: LD_EXP 83
19690: NOT
19691: IFFALSE 19695
// exit ;
19693: GO 19739
// for i in hInvincible do
19695: LD_ADDR_VAR 0 1
19699: PUSH
19700: LD_EXP 83
19704: PUSH
19705: FOR_IN
19706: IFFALSE 19737
// if GetLives ( i ) < 1000 then
19708: LD_VAR 0 1
19712: PPUSH
19713: CALL_OW 256
19717: PUSH
19718: LD_INT 1000
19720: LESS
19721: IFFALSE 19735
// SetLives ( i , 1000 ) ;
19723: LD_VAR 0 1
19727: PPUSH
19728: LD_INT 1000
19730: PPUSH
19731: CALL_OW 234
19735: GO 19705
19737: POP
19738: POP
// end ;
19739: PPOPN 1
19741: END
// export function hHackInvincible ; var i ; begin
19742: LD_INT 0
19744: PPUSH
19745: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19746: LD_ADDR_VAR 0 2
19750: PUSH
19751: LD_INT 2
19753: PUSH
19754: LD_INT 21
19756: PUSH
19757: LD_INT 1
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 21
19766: PUSH
19767: LD_INT 2
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: LIST
19778: PPUSH
19779: CALL_OW 69
19783: PUSH
19784: FOR_IN
19785: IFFALSE 19846
// if IsSelected ( i ) then
19787: LD_VAR 0 2
19791: PPUSH
19792: CALL_OW 306
19796: IFFALSE 19844
// begin if i in hInvincible then
19798: LD_VAR 0 2
19802: PUSH
19803: LD_EXP 83
19807: IN
19808: IFFALSE 19828
// hInvincible := hInvincible diff i else
19810: LD_ADDR_EXP 83
19814: PUSH
19815: LD_EXP 83
19819: PUSH
19820: LD_VAR 0 2
19824: DIFF
19825: ST_TO_ADDR
19826: GO 19844
// hInvincible := hInvincible union i ;
19828: LD_ADDR_EXP 83
19832: PUSH
19833: LD_EXP 83
19837: PUSH
19838: LD_VAR 0 2
19842: UNION
19843: ST_TO_ADDR
// end ;
19844: GO 19784
19846: POP
19847: POP
// end ;
19848: LD_VAR 0 1
19852: RET
// export function hHackInvisible ; var i , j ; begin
19853: LD_INT 0
19855: PPUSH
19856: PPUSH
19857: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19858: LD_ADDR_VAR 0 2
19862: PUSH
19863: LD_INT 21
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PPUSH
19873: CALL_OW 69
19877: PUSH
19878: FOR_IN
19879: IFFALSE 19903
// if IsSelected ( i ) then
19881: LD_VAR 0 2
19885: PPUSH
19886: CALL_OW 306
19890: IFFALSE 19901
// ComForceInvisible ( i ) ;
19892: LD_VAR 0 2
19896: PPUSH
19897: CALL_OW 496
19901: GO 19878
19903: POP
19904: POP
// end ;
19905: LD_VAR 0 1
19909: RET
// export function hHackChangeYourSide ; begin
19910: LD_INT 0
19912: PPUSH
// if your_side = 8 then
19913: LD_OWVAR 2
19917: PUSH
19918: LD_INT 8
19920: EQUAL
19921: IFFALSE 19933
// your_side := 0 else
19923: LD_ADDR_OWVAR 2
19927: PUSH
19928: LD_INT 0
19930: ST_TO_ADDR
19931: GO 19947
// your_side := your_side + 1 ;
19933: LD_ADDR_OWVAR 2
19937: PUSH
19938: LD_OWVAR 2
19942: PUSH
19943: LD_INT 1
19945: PLUS
19946: ST_TO_ADDR
// end ;
19947: LD_VAR 0 1
19951: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19952: LD_INT 0
19954: PPUSH
19955: PPUSH
19956: PPUSH
// for i in all_units do
19957: LD_ADDR_VAR 0 2
19961: PUSH
19962: LD_OWVAR 3
19966: PUSH
19967: FOR_IN
19968: IFFALSE 20046
// if IsSelected ( i ) then
19970: LD_VAR 0 2
19974: PPUSH
19975: CALL_OW 306
19979: IFFALSE 20044
// begin j := GetSide ( i ) ;
19981: LD_ADDR_VAR 0 3
19985: PUSH
19986: LD_VAR 0 2
19990: PPUSH
19991: CALL_OW 255
19995: ST_TO_ADDR
// if j = 8 then
19996: LD_VAR 0 3
20000: PUSH
20001: LD_INT 8
20003: EQUAL
20004: IFFALSE 20016
// j := 0 else
20006: LD_ADDR_VAR 0 3
20010: PUSH
20011: LD_INT 0
20013: ST_TO_ADDR
20014: GO 20030
// j := j + 1 ;
20016: LD_ADDR_VAR 0 3
20020: PUSH
20021: LD_VAR 0 3
20025: PUSH
20026: LD_INT 1
20028: PLUS
20029: ST_TO_ADDR
// SetSide ( i , j ) ;
20030: LD_VAR 0 2
20034: PPUSH
20035: LD_VAR 0 3
20039: PPUSH
20040: CALL_OW 235
// end ;
20044: GO 19967
20046: POP
20047: POP
// end ;
20048: LD_VAR 0 1
20052: RET
// export function hHackFog ; begin
20053: LD_INT 0
20055: PPUSH
// FogOff ( true ) ;
20056: LD_INT 1
20058: PPUSH
20059: CALL_OW 344
// end ;
20063: LD_VAR 0 1
20067: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20068: LD_INT 0
20070: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20071: LD_VAR 0 1
20075: PPUSH
20076: LD_VAR 0 2
20080: PPUSH
20081: LD_VAR 0 3
20085: PPUSH
20086: LD_INT 1
20088: PPUSH
20089: LD_INT 1
20091: PPUSH
20092: CALL_OW 483
// CenterOnXY ( x , y ) ;
20096: LD_VAR 0 2
20100: PPUSH
20101: LD_VAR 0 3
20105: PPUSH
20106: CALL_OW 84
// end ;
20110: LD_VAR 0 4
20114: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20115: LD_INT 0
20117: PPUSH
20118: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20119: LD_VAR 0 1
20123: NOT
20124: IFTRUE 20143
20126: PUSH
20127: LD_VAR 0 2
20131: PPUSH
20132: LD_VAR 0 3
20136: PPUSH
20137: CALL_OW 488
20141: NOT
20142: OR
20143: IFTRUE 20178
20145: PUSH
20146: LD_VAR 0 1
20150: PPUSH
20151: CALL_OW 266
20155: PUSH
20156: LD_INT 3
20158: NONEQUAL
20159: IFFALSE 20177
20161: PUSH
20162: LD_VAR 0 1
20166: PPUSH
20167: CALL_OW 247
20171: PUSH
20172: LD_INT 1
20174: EQUAL
20175: NOT
20176: AND
20177: OR
20178: IFFALSE 20182
// exit ;
20180: GO 20464
// if GetType ( factory ) = unit_human then
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL_OW 247
20191: PUSH
20192: LD_INT 1
20194: EQUAL
20195: IFFALSE 20212
// factory := IsInUnit ( factory ) ;
20197: LD_ADDR_VAR 0 1
20201: PUSH
20202: LD_VAR 0 1
20206: PPUSH
20207: CALL_OW 310
20211: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20212: LD_VAR 0 1
20216: PPUSH
20217: CALL_OW 266
20221: PUSH
20222: LD_INT 3
20224: NONEQUAL
20225: IFFALSE 20229
// exit ;
20227: GO 20464
// for i := 1 to Count ( factoryWaypoints ) do
20229: LD_ADDR_VAR 0 5
20233: PUSH
20234: DOUBLE
20235: LD_INT 1
20237: DEC
20238: ST_TO_ADDR
20239: LD_EXP 84
20243: PPUSH
20244: CALL 30253 0 1
20248: PUSH
20249: FOR_TO
20250: IFFALSE 20412
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
20252: LD_VAR 0 2
20256: PPUSH
20257: LD_VAR 0 3
20261: PPUSH
20262: CALL_OW 428
20266: PUSH
20267: LD_EXP 84
20271: PUSH
20272: LD_VAR 0 5
20276: ARRAY
20277: PUSH
20278: LD_INT 2
20280: ARRAY
20281: EQUAL
20282: IFFALSE 20314
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20284: LD_ADDR_EXP 84
20288: PUSH
20289: LD_EXP 84
20293: PPUSH
20294: LD_VAR 0 5
20298: PPUSH
20299: CALL_OW 3
20303: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20304: CALL 20469 0 0
// exit ;
20308: POP
20309: POP
20310: GO 20464
// end else
20312: GO 20410
// if factory = factoryWaypoints [ i ] [ 2 ] then
20314: LD_VAR 0 1
20318: PUSH
20319: LD_EXP 84
20323: PUSH
20324: LD_VAR 0 5
20328: ARRAY
20329: PUSH
20330: LD_INT 2
20332: ARRAY
20333: EQUAL
20334: IFFALSE 20410
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20336: LD_ADDR_EXP 84
20340: PUSH
20341: LD_EXP 84
20345: PPUSH
20346: LD_VAR 0 5
20350: PPUSH
20351: CALL_OW 3
20355: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20356: LD_ADDR_EXP 84
20360: PUSH
20361: LD_EXP 84
20365: PPUSH
20366: LD_VAR 0 1
20370: PPUSH
20371: CALL_OW 255
20375: PUSH
20376: LD_VAR 0 1
20380: PUSH
20381: LD_VAR 0 2
20385: PUSH
20386: LD_VAR 0 3
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: PPUSH
20397: CALL 66185 0 2
20401: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20402: CALL 20469 0 0
// exit ;
20406: POP
20407: POP
20408: GO 20464
// end ; end ;
20410: GO 20249
20412: POP
20413: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20414: LD_ADDR_EXP 84
20418: PUSH
20419: LD_EXP 84
20423: PPUSH
20424: LD_VAR 0 1
20428: PPUSH
20429: CALL_OW 255
20433: PUSH
20434: LD_VAR 0 1
20438: PUSH
20439: LD_VAR 0 2
20443: PUSH
20444: LD_VAR 0 3
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL 66185 0 2
20459: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20460: CALL 20469 0 0
// end ;
20464: LD_VAR 0 4
20468: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20469: LD_INT 0
20471: PPUSH
20472: PPUSH
20473: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20474: LD_STRING resetFactoryWaypoint();
20476: PPUSH
20477: CALL_OW 559
// if factoryWaypoints then
20481: LD_EXP 84
20485: IFFALSE 20606
// begin list := factoryWaypoints ;
20487: LD_ADDR_VAR 0 3
20491: PUSH
20492: LD_EXP 84
20496: ST_TO_ADDR
// for i := 1 to list do
20497: LD_ADDR_VAR 0 2
20501: PUSH
20502: DOUBLE
20503: LD_INT 1
20505: DEC
20506: ST_TO_ADDR
20507: LD_VAR 0 3
20511: PUSH
20512: FOR_TO
20513: IFFALSE 20604
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20515: LD_STRING setFactoryWaypointXY(
20517: PUSH
20518: LD_VAR 0 3
20522: PUSH
20523: LD_VAR 0 2
20527: ARRAY
20528: PUSH
20529: LD_INT 1
20531: ARRAY
20532: STR
20533: PUSH
20534: LD_STRING ,
20536: STR
20537: PUSH
20538: LD_VAR 0 3
20542: PUSH
20543: LD_VAR 0 2
20547: ARRAY
20548: PUSH
20549: LD_INT 2
20551: ARRAY
20552: STR
20553: PUSH
20554: LD_STRING ,
20556: STR
20557: PUSH
20558: LD_VAR 0 3
20562: PUSH
20563: LD_VAR 0 2
20567: ARRAY
20568: PUSH
20569: LD_INT 3
20571: ARRAY
20572: STR
20573: PUSH
20574: LD_STRING ,
20576: STR
20577: PUSH
20578: LD_VAR 0 3
20582: PUSH
20583: LD_VAR 0 2
20587: ARRAY
20588: PUSH
20589: LD_INT 4
20591: ARRAY
20592: STR
20593: PUSH
20594: LD_STRING )
20596: STR
20597: PPUSH
20598: CALL_OW 559
20602: GO 20512
20604: POP
20605: POP
// end ; end ;
20606: LD_VAR 0 1
20610: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20611: LD_INT 0
20613: PPUSH
// if HexInfo ( x , y ) = warehouse then
20614: LD_VAR 0 2
20618: PPUSH
20619: LD_VAR 0 3
20623: PPUSH
20624: CALL_OW 428
20628: PUSH
20629: LD_VAR 0 1
20633: EQUAL
20634: IFFALSE 20661
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20636: LD_ADDR_EXP 86
20640: PUSH
20641: LD_EXP 86
20645: PPUSH
20646: LD_VAR 0 1
20650: PPUSH
20651: LD_INT 0
20653: PPUSH
20654: CALL_OW 1
20658: ST_TO_ADDR
20659: GO 20712
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20661: LD_ADDR_EXP 86
20665: PUSH
20666: LD_EXP 86
20670: PPUSH
20671: LD_VAR 0 1
20675: PPUSH
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL_OW 255
20685: PUSH
20686: LD_VAR 0 1
20690: PUSH
20691: LD_VAR 0 2
20695: PUSH
20696: LD_VAR 0 3
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: PPUSH
20707: CALL_OW 1
20711: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20712: CALL 20721 0 0
// end ;
20716: LD_VAR 0 4
20720: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20721: LD_INT 0
20723: PPUSH
20724: PPUSH
20725: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20726: LD_STRING resetWarehouseGatheringPoints();
20728: PPUSH
20729: CALL_OW 559
// if warehouseGatheringPoints then
20733: LD_EXP 86
20737: IFFALSE 20863
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20739: LD_ADDR_VAR 0 3
20743: PUSH
20744: LD_EXP 86
20748: PPUSH
20749: CALL 70119 0 1
20753: ST_TO_ADDR
// for i := 1 to list do
20754: LD_ADDR_VAR 0 2
20758: PUSH
20759: DOUBLE
20760: LD_INT 1
20762: DEC
20763: ST_TO_ADDR
20764: LD_VAR 0 3
20768: PUSH
20769: FOR_TO
20770: IFFALSE 20861
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20772: LD_STRING setWarehouseGatheringPointXY(
20774: PUSH
20775: LD_VAR 0 3
20779: PUSH
20780: LD_VAR 0 2
20784: ARRAY
20785: PUSH
20786: LD_INT 1
20788: ARRAY
20789: STR
20790: PUSH
20791: LD_STRING ,
20793: STR
20794: PUSH
20795: LD_VAR 0 3
20799: PUSH
20800: LD_VAR 0 2
20804: ARRAY
20805: PUSH
20806: LD_INT 2
20808: ARRAY
20809: STR
20810: PUSH
20811: LD_STRING ,
20813: STR
20814: PUSH
20815: LD_VAR 0 3
20819: PUSH
20820: LD_VAR 0 2
20824: ARRAY
20825: PUSH
20826: LD_INT 3
20828: ARRAY
20829: STR
20830: PUSH
20831: LD_STRING ,
20833: STR
20834: PUSH
20835: LD_VAR 0 3
20839: PUSH
20840: LD_VAR 0 2
20844: ARRAY
20845: PUSH
20846: LD_INT 4
20848: ARRAY
20849: STR
20850: PUSH
20851: LD_STRING )
20853: STR
20854: PPUSH
20855: CALL_OW 559
20859: GO 20769
20861: POP
20862: POP
// end ; end ;
20863: LD_VAR 0 1
20867: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20868: LD_EXP 86
20872: IFFALSE 21567
20874: GO 20876
20876: DISABLE
20877: LD_INT 0
20879: PPUSH
20880: PPUSH
20881: PPUSH
20882: PPUSH
20883: PPUSH
20884: PPUSH
20885: PPUSH
20886: PPUSH
20887: PPUSH
// begin enable ;
20888: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20889: LD_ADDR_VAR 0 3
20893: PUSH
20894: LD_EXP 86
20898: PPUSH
20899: CALL 70119 0 1
20903: ST_TO_ADDR
// if not list then
20904: LD_VAR 0 3
20908: NOT
20909: IFFALSE 20913
// exit ;
20911: GO 21567
// for i := 1 to list do
20913: LD_ADDR_VAR 0 1
20917: PUSH
20918: DOUBLE
20919: LD_INT 1
20921: DEC
20922: ST_TO_ADDR
20923: LD_VAR 0 3
20927: PUSH
20928: FOR_TO
20929: IFFALSE 21565
// begin depot := list [ i ] [ 2 ] ;
20931: LD_ADDR_VAR 0 8
20935: PUSH
20936: LD_VAR 0 3
20940: PUSH
20941: LD_VAR 0 1
20945: ARRAY
20946: PUSH
20947: LD_INT 2
20949: ARRAY
20950: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20951: LD_ADDR_VAR 0 5
20955: PUSH
20956: LD_VAR 0 3
20960: PUSH
20961: LD_VAR 0 1
20965: ARRAY
20966: PUSH
20967: LD_INT 1
20969: ARRAY
20970: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20971: LD_VAR 0 8
20975: PPUSH
20976: CALL_OW 301
20980: IFTRUE 20999
20982: PUSH
20983: LD_VAR 0 5
20987: PUSH
20988: LD_VAR 0 8
20992: PPUSH
20993: CALL_OW 255
20997: NONEQUAL
20998: OR
20999: IFFALSE 21028
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21001: LD_ADDR_EXP 86
21005: PUSH
21006: LD_EXP 86
21010: PPUSH
21011: LD_VAR 0 8
21015: PPUSH
21016: LD_INT 0
21018: PPUSH
21019: CALL_OW 1
21023: ST_TO_ADDR
// exit ;
21024: POP
21025: POP
21026: GO 21567
// end ; x := list [ i ] [ 3 ] ;
21028: LD_ADDR_VAR 0 6
21032: PUSH
21033: LD_VAR 0 3
21037: PUSH
21038: LD_VAR 0 1
21042: ARRAY
21043: PUSH
21044: LD_INT 3
21046: ARRAY
21047: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21048: LD_ADDR_VAR 0 7
21052: PUSH
21053: LD_VAR 0 3
21057: PUSH
21058: LD_VAR 0 1
21062: ARRAY
21063: PUSH
21064: LD_INT 4
21066: ARRAY
21067: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21068: LD_ADDR_VAR 0 9
21072: PUSH
21073: LD_VAR 0 6
21077: PPUSH
21078: LD_VAR 0 7
21082: PPUSH
21083: LD_INT 16
21085: PPUSH
21086: CALL 68693 0 3
21090: ST_TO_ADDR
// if not cratesNearbyPoint then
21091: LD_VAR 0 9
21095: NOT
21096: IFFALSE 21102
// exit ;
21098: POP
21099: POP
21100: GO 21567
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21102: LD_ADDR_VAR 0 4
21106: PUSH
21107: LD_INT 22
21109: PUSH
21110: LD_VAR 0 5
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 3
21121: PUSH
21122: LD_INT 60
21124: PUSH
21125: EMPTY
21126: LIST
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 91
21134: PUSH
21135: LD_VAR 0 8
21139: PUSH
21140: LD_INT 6
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 2
21150: PUSH
21151: LD_INT 25
21153: PUSH
21154: LD_INT 2
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 25
21163: PUSH
21164: LD_INT 16
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: PPUSH
21182: CALL_OW 69
21186: PUSH
21187: LD_VAR 0 8
21191: PPUSH
21192: CALL_OW 313
21196: PPUSH
21197: LD_INT 3
21199: PUSH
21200: LD_INT 60
21202: PUSH
21203: EMPTY
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: LD_INT 25
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 25
21225: PUSH
21226: LD_INT 16
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PPUSH
21242: CALL_OW 72
21246: UNION
21247: ST_TO_ADDR
// if tmp then
21248: LD_VAR 0 4
21252: IFFALSE 21332
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21254: LD_ADDR_VAR 0 4
21258: PUSH
21259: LD_VAR 0 4
21263: PPUSH
21264: LD_INT 3
21266: PPUSH
21267: CALL 66500 0 2
21271: ST_TO_ADDR
// for j in tmp do
21272: LD_ADDR_VAR 0 2
21276: PUSH
21277: LD_VAR 0 4
21281: PUSH
21282: FOR_IN
21283: IFFALSE 21326
// begin if IsInUnit ( j ) then
21285: LD_VAR 0 2
21289: PPUSH
21290: CALL_OW 310
21294: IFFALSE 21305
// ComExit ( j ) ;
21296: LD_VAR 0 2
21300: PPUSH
21301: CALL 66583 0 1
// AddComCollect ( j , x , y ) ;
21305: LD_VAR 0 2
21309: PPUSH
21310: LD_VAR 0 6
21314: PPUSH
21315: LD_VAR 0 7
21319: PPUSH
21320: CALL_OW 177
// end ;
21324: GO 21282
21326: POP
21327: POP
// exit ;
21328: POP
21329: POP
21330: GO 21567
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21332: LD_ADDR_VAR 0 4
21336: PUSH
21337: LD_INT 22
21339: PUSH
21340: LD_VAR 0 5
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 91
21351: PUSH
21352: LD_VAR 0 8
21356: PUSH
21357: LD_INT 8
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: LD_INT 34
21370: PUSH
21371: LD_INT 12
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 34
21380: PUSH
21381: LD_INT 51
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 34
21390: PUSH
21391: LD_INT 32
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 34
21400: PUSH
21401: LD_INT 89
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: LIST
21419: PPUSH
21420: CALL_OW 69
21424: ST_TO_ADDR
// if tmp then
21425: LD_VAR 0 4
21429: IFFALSE 21563
// begin for j in tmp do
21431: LD_ADDR_VAR 0 2
21435: PUSH
21436: LD_VAR 0 4
21440: PUSH
21441: FOR_IN
21442: IFFALSE 21561
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21444: LD_VAR 0 2
21448: PPUSH
21449: CALL_OW 262
21453: PUSH
21454: LD_INT 3
21456: EQUAL
21457: IFTRUE 21474
21459: PUSH
21460: LD_VAR 0 2
21464: PPUSH
21465: CALL_OW 261
21469: PUSH
21470: LD_INT 20
21472: GREATER
21473: OR
21474: IFFALSE 21488
21476: PUSH
21477: LD_VAR 0 2
21481: PPUSH
21482: CALL_OW 314
21486: NOT
21487: AND
21488: IFFALSE 21518
21490: PUSH
21491: LD_VAR 0 2
21495: PPUSH
21496: CALL_OW 263
21500: PUSH
21501: LD_INT 1
21503: NONEQUAL
21504: IFTRUE 21517
21506: PUSH
21507: LD_VAR 0 2
21511: PPUSH
21512: CALL_OW 311
21516: OR
21517: AND
21518: IFFALSE 21559
// begin ComCollect ( j , x , y ) ;
21520: LD_VAR 0 2
21524: PPUSH
21525: LD_VAR 0 6
21529: PPUSH
21530: LD_VAR 0 7
21534: PPUSH
21535: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21539: LD_VAR 0 2
21543: PPUSH
21544: LD_VAR 0 8
21548: PPUSH
21549: CALL_OW 172
// exit ;
21553: POP
21554: POP
21555: POP
21556: POP
21557: GO 21567
// end ;
21559: GO 21441
21561: POP
21562: POP
// end ; end ;
21563: GO 20928
21565: POP
21566: POP
// end ; end_of_file
21567: PPOPN 9
21569: END
// export function SOS_UnitDestroyed ( un ) ; begin
21570: LD_INT 0
21572: PPUSH
// ComRadiation ( un ) ;
21573: LD_VAR 0 1
21577: PPUSH
21578: CALL 22659 0 1
// end ;
21582: LD_VAR 0 2
21586: RET
// export function SOS_UnitKamikazed ( un ) ; begin
21587: LD_INT 0
21589: PPUSH
// ComRadiation ( un ) ;
21590: LD_VAR 0 1
21594: PPUSH
21595: CALL 22659 0 1
// end ;
21599: LD_VAR 0 2
21603: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21604: LD_INT 0
21606: PPUSH
// end ;
21607: LD_VAR 0 4
21611: RET
// export function SOS_Command ( cmd ) ; begin
21612: LD_INT 0
21614: PPUSH
// end ;
21615: LD_VAR 0 2
21619: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21620: LD_INT 0
21622: PPUSH
// end ;
21623: LD_VAR 0 6
21627: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
21628: LD_INT 0
21630: PPUSH
21631: PPUSH
21632: PPUSH
21633: PPUSH
// if not vehicle or not factory then
21634: LD_VAR 0 1
21638: NOT
21639: IFTRUE 21648
21641: PUSH
21642: LD_VAR 0 2
21646: NOT
21647: OR
21648: IFFALSE 21652
// exit ;
21650: GO 22234
// if not factoryWaypoints then
21652: LD_EXP 84
21656: NOT
21657: IFFALSE 21661
// exit ;
21659: GO 22234
// for i := 1 to Count ( factoryWaypoints ) do
21661: LD_ADDR_VAR 0 4
21665: PUSH
21666: DOUBLE
21667: LD_INT 1
21669: DEC
21670: ST_TO_ADDR
21671: LD_EXP 84
21675: PPUSH
21676: CALL 30253 0 1
21680: PUSH
21681: FOR_TO
21682: IFFALSE 22232
// if factoryWaypoints [ i ] [ 2 ] = factory then
21684: LD_EXP 84
21688: PUSH
21689: LD_VAR 0 4
21693: ARRAY
21694: PUSH
21695: LD_INT 2
21697: ARRAY
21698: PUSH
21699: LD_VAR 0 2
21703: EQUAL
21704: IFFALSE 22230
// begin if GetControl ( vehicle ) = control_manual then
21706: LD_VAR 0 1
21710: PPUSH
21711: CALL_OW 263
21715: PUSH
21716: LD_INT 1
21718: EQUAL
21719: IFFALSE 22083
// begin driver := IsDrivenBy ( vehicle ) ;
21721: LD_ADDR_VAR 0 5
21725: PUSH
21726: LD_VAR 0 1
21730: PPUSH
21731: CALL_OW 311
21735: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
21736: LD_VAR 0 5
21740: PUSH
21741: LD_EXP 85
21745: IN
21746: IFTRUE 21760
21748: PUSH
21749: LD_VAR 0 1
21753: PUSH
21754: LD_EXP 85
21758: IN
21759: OR
21760: IFFALSE 21766
// exit ;
21762: POP
21763: POP
21764: GO 22234
// if not HasTask ( driver ) then
21766: LD_VAR 0 5
21770: PPUSH
21771: CALL_OW 314
21775: NOT
21776: IFFALSE 22081
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
21778: LD_ADDR_EXP 85
21782: PUSH
21783: LD_EXP 85
21787: PPUSH
21788: LD_VAR 0 5
21792: PPUSH
21793: CALL 66185 0 2
21797: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
21798: LD_ADDR_EXP 85
21802: PUSH
21803: LD_EXP 85
21807: PPUSH
21808: LD_VAR 0 1
21812: PPUSH
21813: CALL 66185 0 2
21817: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21818: LD_ADDR_VAR 0 6
21822: PUSH
21823: LD_EXP 84
21827: PUSH
21828: LD_VAR 0 4
21832: ARRAY
21833: PUSH
21834: LD_INT 3
21836: ARRAY
21837: PPUSH
21838: LD_EXP 84
21842: PUSH
21843: LD_VAR 0 4
21847: ARRAY
21848: PUSH
21849: LD_INT 4
21851: ARRAY
21852: PPUSH
21853: CALL_OW 428
21857: ST_TO_ADDR
// if hex then
21858: LD_VAR 0 6
21862: IFFALSE 21880
// ComMoveUnit ( driver , hex ) else
21864: LD_VAR 0 5
21868: PPUSH
21869: LD_VAR 0 6
21873: PPUSH
21874: CALL_OW 112
21878: GO 21964
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
21880: LD_VAR 0 1
21884: PPUSH
21885: LD_EXP 84
21889: PUSH
21890: LD_VAR 0 4
21894: ARRAY
21895: PUSH
21896: LD_INT 3
21898: ARRAY
21899: PPUSH
21900: LD_EXP 84
21904: PUSH
21905: LD_VAR 0 4
21909: ARRAY
21910: PUSH
21911: LD_INT 4
21913: ARRAY
21914: PPUSH
21915: CALL_OW 297
21919: PUSH
21920: LD_INT 0
21922: GREATER
21923: IFFALSE 21964
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21925: LD_VAR 0 5
21929: PPUSH
21930: LD_EXP 84
21934: PUSH
21935: LD_VAR 0 4
21939: ARRAY
21940: PUSH
21941: LD_INT 3
21943: ARRAY
21944: PPUSH
21945: LD_EXP 84
21949: PUSH
21950: LD_VAR 0 4
21954: ARRAY
21955: PUSH
21956: LD_INT 4
21958: ARRAY
21959: PPUSH
21960: CALL_OW 111
// AddComExitVehicle ( driver ) ;
21964: LD_VAR 0 5
21968: PPUSH
21969: CALL_OW 181
// if Multiplayer then
21973: LD_OWVAR 4
21977: IFFALSE 22026
// begin repeat wait ( 10 ) ;
21979: LD_INT 10
21981: PPUSH
21982: CALL_OW 67
// until not IsInUnit ( driver ) ;
21986: LD_VAR 0 5
21990: PPUSH
21991: CALL_OW 310
21995: NOT
21996: IFFALSE 21979
// if not HasTask ( driver ) then
21998: LD_VAR 0 5
22002: PPUSH
22003: CALL_OW 314
22007: NOT
22008: IFFALSE 22024
// ComEnterUnit ( driver , factory ) ;
22010: LD_VAR 0 5
22014: PPUSH
22015: LD_VAR 0 2
22019: PPUSH
22020: CALL_OW 120
// end else
22024: GO 22040
// AddComEnterUnit ( driver , factory ) ;
22026: LD_VAR 0 5
22030: PPUSH
22031: LD_VAR 0 2
22035: PPUSH
22036: CALL_OW 180
// wait ( 0 0$1 ) ;
22040: LD_INT 35
22042: PPUSH
22043: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
22047: LD_ADDR_EXP 85
22051: PUSH
22052: LD_EXP 85
22056: PUSH
22057: LD_VAR 0 5
22061: DIFF
22062: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
22063: LD_ADDR_EXP 85
22067: PUSH
22068: LD_EXP 85
22072: PUSH
22073: LD_VAR 0 1
22077: DIFF
22078: ST_TO_ADDR
// break ;
22079: GO 22232
// end ; end else
22081: GO 22230
// if GetControl ( vehicle ) = control_remote then
22083: LD_VAR 0 1
22087: PPUSH
22088: CALL_OW 263
22092: PUSH
22093: LD_INT 2
22095: EQUAL
22096: IFFALSE 22182
// begin wait ( 0 0$2 ) ;
22098: LD_INT 70
22100: PPUSH
22101: CALL_OW 67
// repeat wait ( 10 ) ;
22105: LD_INT 10
22107: PPUSH
22108: CALL_OW 67
// Connect ( vehicle ) ;
22112: LD_VAR 0 1
22116: PPUSH
22117: CALL 36497 0 1
// until IsControledBy ( vehicle ) ;
22121: LD_VAR 0 1
22125: PPUSH
22126: CALL_OW 312
22130: IFFALSE 22105
// wait ( 10 ) ;
22132: LD_INT 10
22134: PPUSH
22135: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22139: LD_VAR 0 1
22143: PPUSH
22144: LD_EXP 84
22148: PUSH
22149: LD_VAR 0 4
22153: ARRAY
22154: PUSH
22155: LD_INT 3
22157: ARRAY
22158: PPUSH
22159: LD_EXP 84
22163: PUSH
22164: LD_VAR 0 4
22168: ARRAY
22169: PUSH
22170: LD_INT 4
22172: ARRAY
22173: PPUSH
22174: CALL_OW 111
// break ;
22178: GO 22232
// end else
22180: GO 22230
// begin wait ( 0 0$3 ) ;
22182: LD_INT 105
22184: PPUSH
22185: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22189: LD_VAR 0 1
22193: PPUSH
22194: LD_EXP 84
22198: PUSH
22199: LD_VAR 0 4
22203: ARRAY
22204: PUSH
22205: LD_INT 3
22207: ARRAY
22208: PPUSH
22209: LD_EXP 84
22213: PUSH
22214: LD_VAR 0 4
22218: ARRAY
22219: PUSH
22220: LD_INT 4
22222: ARRAY
22223: PPUSH
22224: CALL_OW 111
// break ;
22228: GO 22232
// end ; end ;
22230: GO 21681
22232: POP
22233: POP
// end ;
22234: LD_VAR 0 3
22238: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22239: LD_INT 0
22241: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22242: LD_VAR 0 1
22246: PUSH
22247: LD_INT 250
22249: EQUAL
22250: IFFALSE 22267
22252: PUSH
22253: LD_VAR 0 2
22257: PPUSH
22258: CALL_OW 264
22262: PUSH
22263: LD_INT 81
22265: EQUAL
22266: AND
22267: IFFALSE 22288
// MinerPlaceMine ( unit , x , y ) ;
22269: LD_VAR 0 2
22273: PPUSH
22274: LD_VAR 0 4
22278: PPUSH
22279: LD_VAR 0 5
22283: PPUSH
22284: CALL 25420 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22288: LD_VAR 0 1
22292: PUSH
22293: LD_INT 251
22295: EQUAL
22296: IFFALSE 22313
22298: PUSH
22299: LD_VAR 0 2
22303: PPUSH
22304: CALL_OW 264
22308: PUSH
22309: LD_INT 81
22311: EQUAL
22312: AND
22313: IFFALSE 22334
// MinerDetonateMine ( unit , x , y ) ;
22315: LD_VAR 0 2
22319: PPUSH
22320: LD_VAR 0 4
22324: PPUSH
22325: LD_VAR 0 5
22329: PPUSH
22330: CALL 25699 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22334: LD_VAR 0 1
22338: PUSH
22339: LD_INT 252
22341: EQUAL
22342: IFFALSE 22359
22344: PUSH
22345: LD_VAR 0 2
22349: PPUSH
22350: CALL_OW 264
22354: PUSH
22355: LD_INT 81
22357: EQUAL
22358: AND
22359: IFFALSE 22380
// MinerCreateMinefield ( unit , x , y ) ;
22361: LD_VAR 0 2
22365: PPUSH
22366: LD_VAR 0 4
22370: PPUSH
22371: LD_VAR 0 5
22375: PPUSH
22376: CALL 26118 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22380: LD_VAR 0 1
22384: PUSH
22385: LD_INT 253
22387: EQUAL
22388: IFFALSE 22405
22390: PUSH
22391: LD_VAR 0 2
22395: PPUSH
22396: CALL_OW 257
22400: PUSH
22401: LD_INT 5
22403: EQUAL
22404: AND
22405: IFFALSE 22426
// ComBinocular ( unit , x , y ) ;
22407: LD_VAR 0 2
22411: PPUSH
22412: LD_VAR 0 4
22416: PPUSH
22417: LD_VAR 0 5
22421: PPUSH
22422: CALL 26493 0 3
// if selectedUnit then
22426: LD_VAR 0 3
22430: IFFALSE 22490
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22432: LD_VAR 0 1
22436: PUSH
22437: LD_INT 254
22439: EQUAL
22440: IFFALSE 22457
22442: PUSH
22443: LD_VAR 0 2
22447: PPUSH
22448: CALL_OW 264
22452: PUSH
22453: LD_INT 99
22455: EQUAL
22456: AND
22457: IFFALSE 22474
22459: PUSH
22460: LD_VAR 0 3
22464: PPUSH
22465: CALL_OW 263
22469: PUSH
22470: LD_INT 3
22472: EQUAL
22473: AND
22474: IFFALSE 22490
// HackDestroyVehicle ( unit , selectedUnit ) ;
22476: LD_VAR 0 2
22480: PPUSH
22481: LD_VAR 0 3
22485: PPUSH
22486: CALL 24780 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22490: LD_VAR 0 1
22494: PUSH
22495: LD_INT 255
22497: EQUAL
22498: IFFALSE 22522
22500: PUSH
22501: LD_VAR 0 2
22505: PPUSH
22506: CALL_OW 264
22510: PUSH
22511: LD_INT 14
22513: PUSH
22514: LD_INT 53
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: IN
22521: AND
22522: IFFALSE 22540
22524: PUSH
22525: LD_VAR 0 4
22529: PPUSH
22530: LD_VAR 0 5
22534: PPUSH
22535: CALL_OW 488
22539: AND
22540: IFFALSE 22564
// CutTreeXYR ( unit , x , y , 12 ) ;
22542: LD_VAR 0 2
22546: PPUSH
22547: LD_VAR 0 4
22551: PPUSH
22552: LD_VAR 0 5
22556: PPUSH
22557: LD_INT 12
22559: PPUSH
22560: CALL 22755 0 4
// if cmd = 256 then
22564: LD_VAR 0 1
22568: PUSH
22569: LD_INT 256
22571: EQUAL
22572: IFFALSE 22593
// SetFactoryWaypoint ( unit , x , y ) ;
22574: LD_VAR 0 2
22578: PPUSH
22579: LD_VAR 0 4
22583: PPUSH
22584: LD_VAR 0 5
22588: PPUSH
22589: CALL 20115 0 3
// if cmd = 257 then
22593: LD_VAR 0 1
22597: PUSH
22598: LD_INT 257
22600: EQUAL
22601: IFFALSE 22622
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22603: LD_VAR 0 2
22607: PPUSH
22608: LD_VAR 0 4
22612: PPUSH
22613: LD_VAR 0 5
22617: PPUSH
22618: CALL 20611 0 3
// if cmd = 258 then
22622: LD_VAR 0 1
22626: PUSH
22627: LD_INT 258
22629: EQUAL
22630: IFFALSE 22654
// BurnTreeXYR ( unit , x , y , 8 ) ;
22632: LD_VAR 0 2
22636: PPUSH
22637: LD_VAR 0 4
22641: PPUSH
22642: LD_VAR 0 5
22646: PPUSH
22647: LD_INT 8
22649: PPUSH
22650: CALL 23155 0 4
// end ;
22654: LD_VAR 0 6
22658: RET
// export function ComRadiation ( un ) ; var eff ; begin
22659: LD_INT 0
22661: PPUSH
22662: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
22663: LD_VAR 0 1
22667: PPUSH
22668: CALL_OW 264
22672: PUSH
22673: LD_INT 91
22675: NONEQUAL
22676: IFFALSE 22680
// exit ;
22678: GO 22750
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22680: LD_INT 68
22682: PPUSH
22683: LD_VAR 0 1
22687: PPUSH
22688: CALL_OW 255
22692: PPUSH
22693: CALL_OW 321
22697: PUSH
22698: LD_INT 2
22700: EQUAL
22701: IFFALSE 22713
// eff := 50 else
22703: LD_ADDR_VAR 0 3
22707: PUSH
22708: LD_INT 50
22710: ST_TO_ADDR
22711: GO 22721
// eff := 25 ;
22713: LD_ADDR_VAR 0 3
22717: PUSH
22718: LD_INT 25
22720: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22721: LD_VAR 0 1
22725: PPUSH
22726: CALL_OW 250
22730: PPUSH
22731: LD_VAR 0 1
22735: PPUSH
22736: CALL_OW 251
22740: PPUSH
22741: LD_VAR 0 3
22745: PPUSH
22746: CALL_OW 495
// end ;
22750: LD_VAR 0 2
22754: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22755: LD_INT 0
22757: PPUSH
22758: PPUSH
22759: PPUSH
22760: PPUSH
22761: PPUSH
22762: PPUSH
22763: PPUSH
22764: PPUSH
22765: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22766: LD_VAR 0 1
22770: PPUSH
22771: CALL_OW 302
22775: NOT
22776: IFTRUE 22795
22778: PUSH
22779: LD_VAR 0 2
22783: PPUSH
22784: LD_VAR 0 3
22788: PPUSH
22789: CALL_OW 488
22793: NOT
22794: OR
22795: IFTRUE 22804
22797: PUSH
22798: LD_VAR 0 4
22802: NOT
22803: OR
22804: IFFALSE 22808
// exit ;
22806: GO 23150
// list := [ ] ;
22808: LD_ADDR_VAR 0 13
22812: PUSH
22813: EMPTY
22814: ST_TO_ADDR
// if x - r < 0 then
22815: LD_VAR 0 2
22819: PUSH
22820: LD_VAR 0 4
22824: MINUS
22825: PUSH
22826: LD_INT 0
22828: LESS
22829: IFFALSE 22841
// min_x := 0 else
22831: LD_ADDR_VAR 0 7
22835: PUSH
22836: LD_INT 0
22838: ST_TO_ADDR
22839: GO 22857
// min_x := x - r ;
22841: LD_ADDR_VAR 0 7
22845: PUSH
22846: LD_VAR 0 2
22850: PUSH
22851: LD_VAR 0 4
22855: MINUS
22856: ST_TO_ADDR
// if y - r < 0 then
22857: LD_VAR 0 3
22861: PUSH
22862: LD_VAR 0 4
22866: MINUS
22867: PUSH
22868: LD_INT 0
22870: LESS
22871: IFFALSE 22883
// min_y := 0 else
22873: LD_ADDR_VAR 0 8
22877: PUSH
22878: LD_INT 0
22880: ST_TO_ADDR
22881: GO 22899
// min_y := y - r ;
22883: LD_ADDR_VAR 0 8
22887: PUSH
22888: LD_VAR 0 3
22892: PUSH
22893: LD_VAR 0 4
22897: MINUS
22898: ST_TO_ADDR
// max_x := x + r ;
22899: LD_ADDR_VAR 0 9
22903: PUSH
22904: LD_VAR 0 2
22908: PUSH
22909: LD_VAR 0 4
22913: PLUS
22914: ST_TO_ADDR
// max_y := y + r ;
22915: LD_ADDR_VAR 0 10
22919: PUSH
22920: LD_VAR 0 3
22924: PUSH
22925: LD_VAR 0 4
22929: PLUS
22930: ST_TO_ADDR
// for _x = min_x to max_x do
22931: LD_ADDR_VAR 0 11
22935: PUSH
22936: DOUBLE
22937: LD_VAR 0 7
22941: DEC
22942: ST_TO_ADDR
22943: LD_VAR 0 9
22947: PUSH
22948: FOR_TO
22949: IFFALSE 23068
// for _y = min_y to max_y do
22951: LD_ADDR_VAR 0 12
22955: PUSH
22956: DOUBLE
22957: LD_VAR 0 8
22961: DEC
22962: ST_TO_ADDR
22963: LD_VAR 0 10
22967: PUSH
22968: FOR_TO
22969: IFFALSE 23064
// begin if not ValidHex ( _x , _y ) then
22971: LD_VAR 0 11
22975: PPUSH
22976: LD_VAR 0 12
22980: PPUSH
22981: CALL_OW 488
22985: NOT
22986: IFFALSE 22990
// continue ;
22988: GO 22968
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22990: LD_VAR 0 11
22994: PPUSH
22995: LD_VAR 0 12
22999: PPUSH
23000: CALL_OW 351
23004: IFFALSE 23022
23006: PUSH
23007: LD_VAR 0 11
23011: PPUSH
23012: LD_VAR 0 12
23016: PPUSH
23017: CALL_OW 554
23021: AND
23022: IFFALSE 23062
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23024: LD_ADDR_VAR 0 13
23028: PUSH
23029: LD_VAR 0 13
23033: PPUSH
23034: LD_VAR 0 13
23038: PUSH
23039: LD_INT 1
23041: PLUS
23042: PPUSH
23043: LD_VAR 0 11
23047: PUSH
23048: LD_VAR 0 12
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PPUSH
23057: CALL_OW 2
23061: ST_TO_ADDR
// end ;
23062: GO 22968
23064: POP
23065: POP
23066: GO 22948
23068: POP
23069: POP
// if not list then
23070: LD_VAR 0 13
23074: NOT
23075: IFFALSE 23079
// exit ;
23077: GO 23150
// for i in list do
23079: LD_ADDR_VAR 0 6
23083: PUSH
23084: LD_VAR 0 13
23088: PUSH
23089: FOR_IN
23090: IFFALSE 23148
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23092: LD_VAR 0 1
23096: PPUSH
23097: LD_STRING M
23099: PUSH
23100: LD_VAR 0 6
23104: PUSH
23105: LD_INT 1
23107: ARRAY
23108: PUSH
23109: LD_VAR 0 6
23113: PUSH
23114: LD_INT 2
23116: ARRAY
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: LD_INT 0
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: PUSH
23139: EMPTY
23140: LIST
23141: PPUSH
23142: CALL_OW 447
23146: GO 23089
23148: POP
23149: POP
// end ;
23150: LD_VAR 0 5
23154: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23155: LD_INT 0
23157: PPUSH
23158: PPUSH
23159: PPUSH
23160: PPUSH
23161: PPUSH
23162: PPUSH
23163: PPUSH
23164: PPUSH
23165: PPUSH
23166: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23167: LD_VAR 0 1
23171: PPUSH
23172: CALL_OW 302
23176: NOT
23177: IFTRUE 23196
23179: PUSH
23180: LD_VAR 0 2
23184: PPUSH
23185: LD_VAR 0 3
23189: PPUSH
23190: CALL_OW 488
23194: NOT
23195: OR
23196: IFTRUE 23205
23198: PUSH
23199: LD_VAR 0 4
23203: NOT
23204: OR
23205: IFFALSE 23209
// exit ;
23207: GO 23726
// list := [ ] ;
23209: LD_ADDR_VAR 0 13
23213: PUSH
23214: EMPTY
23215: ST_TO_ADDR
// if x - r < 0 then
23216: LD_VAR 0 2
23220: PUSH
23221: LD_VAR 0 4
23225: MINUS
23226: PUSH
23227: LD_INT 0
23229: LESS
23230: IFFALSE 23242
// min_x := 0 else
23232: LD_ADDR_VAR 0 7
23236: PUSH
23237: LD_INT 0
23239: ST_TO_ADDR
23240: GO 23258
// min_x := x - r ;
23242: LD_ADDR_VAR 0 7
23246: PUSH
23247: LD_VAR 0 2
23251: PUSH
23252: LD_VAR 0 4
23256: MINUS
23257: ST_TO_ADDR
// if y - r < 0 then
23258: LD_VAR 0 3
23262: PUSH
23263: LD_VAR 0 4
23267: MINUS
23268: PUSH
23269: LD_INT 0
23271: LESS
23272: IFFALSE 23284
// min_y := 0 else
23274: LD_ADDR_VAR 0 8
23278: PUSH
23279: LD_INT 0
23281: ST_TO_ADDR
23282: GO 23300
// min_y := y - r ;
23284: LD_ADDR_VAR 0 8
23288: PUSH
23289: LD_VAR 0 3
23293: PUSH
23294: LD_VAR 0 4
23298: MINUS
23299: ST_TO_ADDR
// max_x := x + r ;
23300: LD_ADDR_VAR 0 9
23304: PUSH
23305: LD_VAR 0 2
23309: PUSH
23310: LD_VAR 0 4
23314: PLUS
23315: ST_TO_ADDR
// max_y := y + r ;
23316: LD_ADDR_VAR 0 10
23320: PUSH
23321: LD_VAR 0 3
23325: PUSH
23326: LD_VAR 0 4
23330: PLUS
23331: ST_TO_ADDR
// for _x = min_x to max_x do
23332: LD_ADDR_VAR 0 11
23336: PUSH
23337: DOUBLE
23338: LD_VAR 0 7
23342: DEC
23343: ST_TO_ADDR
23344: LD_VAR 0 9
23348: PUSH
23349: FOR_TO
23350: IFFALSE 23469
// for _y = min_y to max_y do
23352: LD_ADDR_VAR 0 12
23356: PUSH
23357: DOUBLE
23358: LD_VAR 0 8
23362: DEC
23363: ST_TO_ADDR
23364: LD_VAR 0 10
23368: PUSH
23369: FOR_TO
23370: IFFALSE 23465
// begin if not ValidHex ( _x , _y ) then
23372: LD_VAR 0 11
23376: PPUSH
23377: LD_VAR 0 12
23381: PPUSH
23382: CALL_OW 488
23386: NOT
23387: IFFALSE 23391
// continue ;
23389: GO 23369
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23391: LD_VAR 0 11
23395: PPUSH
23396: LD_VAR 0 12
23400: PPUSH
23401: CALL_OW 351
23405: IFFALSE 23423
23407: PUSH
23408: LD_VAR 0 11
23412: PPUSH
23413: LD_VAR 0 12
23417: PPUSH
23418: CALL_OW 554
23422: AND
23423: IFFALSE 23463
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23425: LD_ADDR_VAR 0 13
23429: PUSH
23430: LD_VAR 0 13
23434: PPUSH
23435: LD_VAR 0 13
23439: PUSH
23440: LD_INT 1
23442: PLUS
23443: PPUSH
23444: LD_VAR 0 11
23448: PUSH
23449: LD_VAR 0 12
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PPUSH
23458: CALL_OW 2
23462: ST_TO_ADDR
// end ;
23463: GO 23369
23465: POP
23466: POP
23467: GO 23349
23469: POP
23470: POP
// if not list then
23471: LD_VAR 0 13
23475: NOT
23476: IFFALSE 23480
// exit ;
23478: GO 23726
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23480: LD_ADDR_VAR 0 13
23484: PUSH
23485: LD_VAR 0 1
23489: PPUSH
23490: LD_VAR 0 13
23494: PPUSH
23495: LD_INT 1
23497: PPUSH
23498: LD_INT 1
23500: PPUSH
23501: CALL 33625 0 4
23505: ST_TO_ADDR
// ComStop ( flame ) ;
23506: LD_VAR 0 1
23510: PPUSH
23511: CALL_OW 141
// for i in list do
23515: LD_ADDR_VAR 0 6
23519: PUSH
23520: LD_VAR 0 13
23524: PUSH
23525: FOR_IN
23526: IFFALSE 23557
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23528: LD_VAR 0 1
23532: PPUSH
23533: LD_VAR 0 6
23537: PUSH
23538: LD_INT 1
23540: ARRAY
23541: PPUSH
23542: LD_VAR 0 6
23546: PUSH
23547: LD_INT 2
23549: ARRAY
23550: PPUSH
23551: CALL_OW 176
23555: GO 23525
23557: POP
23558: POP
// repeat wait ( 0 0$1 ) ;
23559: LD_INT 35
23561: PPUSH
23562: CALL_OW 67
// task := GetTaskList ( flame ) ;
23566: LD_ADDR_VAR 0 14
23570: PUSH
23571: LD_VAR 0 1
23575: PPUSH
23576: CALL_OW 437
23580: ST_TO_ADDR
// if not task then
23581: LD_VAR 0 14
23585: NOT
23586: IFFALSE 23590
// exit ;
23588: GO 23726
// if task [ 1 ] [ 1 ] <> | then
23590: LD_VAR 0 14
23594: PUSH
23595: LD_INT 1
23597: ARRAY
23598: PUSH
23599: LD_INT 1
23601: ARRAY
23602: PUSH
23603: LD_STRING |
23605: NONEQUAL
23606: IFFALSE 23610
// exit ;
23608: GO 23726
// _x := task [ 1 ] [ 2 ] ;
23610: LD_ADDR_VAR 0 11
23614: PUSH
23615: LD_VAR 0 14
23619: PUSH
23620: LD_INT 1
23622: ARRAY
23623: PUSH
23624: LD_INT 2
23626: ARRAY
23627: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23628: LD_ADDR_VAR 0 12
23632: PUSH
23633: LD_VAR 0 14
23637: PUSH
23638: LD_INT 1
23640: ARRAY
23641: PUSH
23642: LD_INT 3
23644: ARRAY
23645: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23646: LD_VAR 0 11
23650: PPUSH
23651: LD_VAR 0 12
23655: PPUSH
23656: CALL_OW 351
23660: NOT
23661: IFTRUE 23680
23663: PUSH
23664: LD_VAR 0 11
23668: PPUSH
23669: LD_VAR 0 12
23673: PPUSH
23674: CALL_OW 554
23678: NOT
23679: OR
23680: IFFALSE 23714
// begin task := Delete ( task , 1 ) ;
23682: LD_ADDR_VAR 0 14
23686: PUSH
23687: LD_VAR 0 14
23691: PPUSH
23692: LD_INT 1
23694: PPUSH
23695: CALL_OW 3
23699: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23700: LD_VAR 0 1
23704: PPUSH
23705: LD_VAR 0 14
23709: PPUSH
23710: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23714: LD_VAR 0 1
23718: PPUSH
23719: CALL_OW 314
23723: NOT
23724: IFFALSE 23559
// end ;
23726: LD_VAR 0 5
23730: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23731: LD_EXP 88
23735: NOT
23736: IFFALSE 23786
23738: GO 23740
23740: DISABLE
// begin initHack := true ;
23741: LD_ADDR_EXP 88
23745: PUSH
23746: LD_INT 1
23748: ST_TO_ADDR
// hackTanks := [ ] ;
23749: LD_ADDR_EXP 89
23753: PUSH
23754: EMPTY
23755: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23756: LD_ADDR_EXP 90
23760: PUSH
23761: EMPTY
23762: ST_TO_ADDR
// hackLimit := 3 ;
23763: LD_ADDR_EXP 91
23767: PUSH
23768: LD_INT 3
23770: ST_TO_ADDR
// hackDist := 12 ;
23771: LD_ADDR_EXP 92
23775: PUSH
23776: LD_INT 12
23778: ST_TO_ADDR
// hackCounter := [ ] ;
23779: LD_ADDR_EXP 93
23783: PUSH
23784: EMPTY
23785: ST_TO_ADDR
// end ;
23786: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23787: LD_EXP 88
23791: IFFALSE 23809
23793: PUSH
23794: LD_INT 34
23796: PUSH
23797: LD_INT 99
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PPUSH
23804: CALL_OW 69
23808: AND
23809: IFFALSE 24062
23811: GO 23813
23813: DISABLE
23814: LD_INT 0
23816: PPUSH
23817: PPUSH
// begin enable ;
23818: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23819: LD_ADDR_VAR 0 1
23823: PUSH
23824: LD_INT 34
23826: PUSH
23827: LD_INT 99
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PPUSH
23834: CALL_OW 69
23838: PUSH
23839: FOR_IN
23840: IFFALSE 24060
// begin if not i in hackTanks then
23842: LD_VAR 0 1
23846: PUSH
23847: LD_EXP 89
23851: IN
23852: NOT
23853: IFFALSE 23936
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23855: LD_ADDR_EXP 89
23859: PUSH
23860: LD_EXP 89
23864: PPUSH
23865: LD_EXP 89
23869: PUSH
23870: LD_INT 1
23872: PLUS
23873: PPUSH
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 1
23883: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23884: LD_ADDR_EXP 90
23888: PUSH
23889: LD_EXP 90
23893: PPUSH
23894: LD_EXP 90
23898: PUSH
23899: LD_INT 1
23901: PLUS
23902: PPUSH
23903: EMPTY
23904: PPUSH
23905: CALL_OW 1
23909: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23910: LD_ADDR_EXP 93
23914: PUSH
23915: LD_EXP 93
23919: PPUSH
23920: LD_EXP 93
23924: PUSH
23925: LD_INT 1
23927: PLUS
23928: PPUSH
23929: EMPTY
23930: PPUSH
23931: CALL_OW 1
23935: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23936: LD_VAR 0 1
23940: PPUSH
23941: CALL_OW 302
23945: NOT
23946: IFFALSE 23959
// begin HackUnlinkAll ( i ) ;
23948: LD_VAR 0 1
23952: PPUSH
23953: CALL 24065 0 1
// continue ;
23957: GO 23839
// end ; HackCheckCapturedStatus ( i ) ;
23959: LD_VAR 0 1
23963: PPUSH
23964: CALL 24510 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23968: LD_ADDR_VAR 0 2
23972: PUSH
23973: LD_INT 81
23975: PUSH
23976: LD_VAR 0 1
23980: PPUSH
23981: CALL_OW 255
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 33
23992: PUSH
23993: LD_INT 3
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 91
24002: PUSH
24003: LD_VAR 0 1
24007: PUSH
24008: LD_EXP 92
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 50
24020: PUSH
24021: EMPTY
24022: LIST
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: PPUSH
24030: CALL_OW 69
24034: ST_TO_ADDR
// if not tmp then
24035: LD_VAR 0 2
24039: NOT
24040: IFFALSE 24044
// continue ;
24042: GO 23839
// HackLink ( i , tmp ) ;
24044: LD_VAR 0 1
24048: PPUSH
24049: LD_VAR 0 2
24053: PPUSH
24054: CALL 24201 0 2
// end ;
24058: GO 23839
24060: POP
24061: POP
// end ;
24062: PPOPN 2
24064: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24065: LD_INT 0
24067: PPUSH
24068: PPUSH
24069: PPUSH
// if not hack in hackTanks then
24070: LD_VAR 0 1
24074: PUSH
24075: LD_EXP 89
24079: IN
24080: NOT
24081: IFFALSE 24085
// exit ;
24083: GO 24196
// index := GetElementIndex ( hackTanks , hack ) ;
24085: LD_ADDR_VAR 0 4
24089: PUSH
24090: LD_EXP 89
24094: PPUSH
24095: LD_VAR 0 1
24099: PPUSH
24100: CALL 32920 0 2
24104: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24105: LD_EXP 90
24109: PUSH
24110: LD_VAR 0 4
24114: ARRAY
24115: IFFALSE 24196
// begin for i in hackTanksCaptured [ index ] do
24117: LD_ADDR_VAR 0 3
24121: PUSH
24122: LD_EXP 90
24126: PUSH
24127: LD_VAR 0 4
24131: ARRAY
24132: PUSH
24133: FOR_IN
24134: IFFALSE 24160
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24136: LD_VAR 0 3
24140: PUSH
24141: LD_INT 1
24143: ARRAY
24144: PPUSH
24145: LD_VAR 0 3
24149: PUSH
24150: LD_INT 2
24152: ARRAY
24153: PPUSH
24154: CALL_OW 235
24158: GO 24133
24160: POP
24161: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24162: LD_ADDR_EXP 90
24166: PUSH
24167: LD_EXP 90
24171: PPUSH
24172: LD_VAR 0 4
24176: PPUSH
24177: EMPTY
24178: PPUSH
24179: CALL_OW 1
24183: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24184: LD_VAR 0 1
24188: PPUSH
24189: LD_INT 0
24191: PPUSH
24192: CALL_OW 505
// end ; end ;
24196: LD_VAR 0 2
24200: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24201: LD_INT 0
24203: PPUSH
24204: PPUSH
24205: PPUSH
// if not hack in hackTanks or not vehicles then
24206: LD_VAR 0 1
24210: PUSH
24211: LD_EXP 89
24215: IN
24216: NOT
24217: IFTRUE 24226
24219: PUSH
24220: LD_VAR 0 2
24224: NOT
24225: OR
24226: IFFALSE 24230
// exit ;
24228: GO 24505
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24230: LD_ADDR_VAR 0 2
24234: PUSH
24235: LD_VAR 0 1
24239: PPUSH
24240: LD_VAR 0 2
24244: PPUSH
24245: LD_INT 1
24247: PPUSH
24248: LD_INT 1
24250: PPUSH
24251: CALL 33572 0 4
24255: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24256: LD_ADDR_VAR 0 5
24260: PUSH
24261: LD_EXP 89
24265: PPUSH
24266: LD_VAR 0 1
24270: PPUSH
24271: CALL 32920 0 2
24275: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24276: LD_EXP 90
24280: PUSH
24281: LD_VAR 0 5
24285: ARRAY
24286: PUSH
24287: LD_EXP 91
24291: LESS
24292: IFFALSE 24481
// begin for i := 1 to vehicles do
24294: LD_ADDR_VAR 0 4
24298: PUSH
24299: DOUBLE
24300: LD_INT 1
24302: DEC
24303: ST_TO_ADDR
24304: LD_VAR 0 2
24308: PUSH
24309: FOR_TO
24310: IFFALSE 24479
// begin if hackTanksCaptured [ index ] = hackLimit then
24312: LD_EXP 90
24316: PUSH
24317: LD_VAR 0 5
24321: ARRAY
24322: PUSH
24323: LD_EXP 91
24327: EQUAL
24328: IFFALSE 24332
// break ;
24330: GO 24479
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24332: LD_ADDR_EXP 93
24336: PUSH
24337: LD_EXP 93
24341: PPUSH
24342: LD_VAR 0 5
24346: PPUSH
24347: LD_EXP 93
24351: PUSH
24352: LD_VAR 0 5
24356: ARRAY
24357: PUSH
24358: LD_INT 1
24360: PLUS
24361: PPUSH
24362: CALL_OW 1
24366: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24367: LD_ADDR_EXP 90
24371: PUSH
24372: LD_EXP 90
24376: PPUSH
24377: LD_VAR 0 5
24381: PUSH
24382: LD_EXP 90
24386: PUSH
24387: LD_VAR 0 5
24391: ARRAY
24392: PUSH
24393: LD_INT 1
24395: PLUS
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PPUSH
24401: LD_VAR 0 2
24405: PUSH
24406: LD_VAR 0 4
24410: ARRAY
24411: PUSH
24412: LD_VAR 0 2
24416: PUSH
24417: LD_VAR 0 4
24421: ARRAY
24422: PPUSH
24423: CALL_OW 255
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PPUSH
24432: CALL 33137 0 3
24436: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24437: LD_VAR 0 2
24441: PUSH
24442: LD_VAR 0 4
24446: ARRAY
24447: PPUSH
24448: LD_VAR 0 1
24452: PPUSH
24453: CALL_OW 255
24457: PPUSH
24458: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24462: LD_VAR 0 2
24466: PUSH
24467: LD_VAR 0 4
24471: ARRAY
24472: PPUSH
24473: CALL_OW 141
// end ;
24477: GO 24309
24479: POP
24480: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24481: LD_VAR 0 1
24485: PPUSH
24486: LD_EXP 90
24490: PUSH
24491: LD_VAR 0 5
24495: ARRAY
24496: PUSH
24497: LD_INT 0
24499: PLUS
24500: PPUSH
24501: CALL_OW 505
// end ;
24505: LD_VAR 0 3
24509: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24510: LD_INT 0
24512: PPUSH
24513: PPUSH
24514: PPUSH
24515: PPUSH
// if not hack in hackTanks then
24516: LD_VAR 0 1
24520: PUSH
24521: LD_EXP 89
24525: IN
24526: NOT
24527: IFFALSE 24531
// exit ;
24529: GO 24775
// index := GetElementIndex ( hackTanks , hack ) ;
24531: LD_ADDR_VAR 0 4
24535: PUSH
24536: LD_EXP 89
24540: PPUSH
24541: LD_VAR 0 1
24545: PPUSH
24546: CALL 32920 0 2
24550: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24551: LD_ADDR_VAR 0 3
24555: PUSH
24556: DOUBLE
24557: LD_EXP 90
24561: PUSH
24562: LD_VAR 0 4
24566: ARRAY
24567: INC
24568: ST_TO_ADDR
24569: LD_INT 1
24571: PUSH
24572: FOR_DOWNTO
24573: IFFALSE 24749
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24575: LD_ADDR_VAR 0 5
24579: PUSH
24580: LD_EXP 90
24584: PUSH
24585: LD_VAR 0 4
24589: ARRAY
24590: PUSH
24591: LD_VAR 0 3
24595: ARRAY
24596: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24597: LD_VAR 0 5
24601: PUSH
24602: LD_INT 1
24604: ARRAY
24605: PPUSH
24606: CALL_OW 302
24610: NOT
24611: IFTRUE 24639
24613: PUSH
24614: LD_VAR 0 5
24618: PUSH
24619: LD_INT 1
24621: ARRAY
24622: PPUSH
24623: CALL_OW 255
24627: PUSH
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 255
24637: NONEQUAL
24638: OR
24639: IFFALSE 24747
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24641: LD_VAR 0 5
24645: PUSH
24646: LD_INT 1
24648: ARRAY
24649: PPUSH
24650: CALL_OW 305
24654: IFFALSE 24682
24656: PUSH
24657: LD_VAR 0 5
24661: PUSH
24662: LD_INT 1
24664: ARRAY
24665: PPUSH
24666: CALL_OW 255
24670: PUSH
24671: LD_VAR 0 1
24675: PPUSH
24676: CALL_OW 255
24680: EQUAL
24681: AND
24682: IFFALSE 24706
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24684: LD_VAR 0 5
24688: PUSH
24689: LD_INT 1
24691: ARRAY
24692: PPUSH
24693: LD_VAR 0 5
24697: PUSH
24698: LD_INT 2
24700: ARRAY
24701: PPUSH
24702: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24706: LD_ADDR_EXP 90
24710: PUSH
24711: LD_EXP 90
24715: PPUSH
24716: LD_VAR 0 4
24720: PPUSH
24721: LD_EXP 90
24725: PUSH
24726: LD_VAR 0 4
24730: ARRAY
24731: PPUSH
24732: LD_VAR 0 3
24736: PPUSH
24737: CALL_OW 3
24741: PPUSH
24742: CALL_OW 1
24746: ST_TO_ADDR
// end ; end ;
24747: GO 24572
24749: POP
24750: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24751: LD_VAR 0 1
24755: PPUSH
24756: LD_EXP 90
24760: PUSH
24761: LD_VAR 0 4
24765: ARRAY
24766: PUSH
24767: LD_INT 0
24769: PLUS
24770: PPUSH
24771: CALL_OW 505
// end ;
24775: LD_VAR 0 2
24779: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24780: LD_INT 0
24782: PPUSH
24783: PPUSH
24784: PPUSH
24785: PPUSH
// if not hack in hackTanks then
24786: LD_VAR 0 1
24790: PUSH
24791: LD_EXP 89
24795: IN
24796: NOT
24797: IFFALSE 24801
// exit ;
24799: GO 24886
// index := GetElementIndex ( hackTanks , hack ) ;
24801: LD_ADDR_VAR 0 5
24805: PUSH
24806: LD_EXP 89
24810: PPUSH
24811: LD_VAR 0 1
24815: PPUSH
24816: CALL 32920 0 2
24820: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24821: LD_ADDR_VAR 0 4
24825: PUSH
24826: DOUBLE
24827: LD_INT 1
24829: DEC
24830: ST_TO_ADDR
24831: LD_EXP 90
24835: PUSH
24836: LD_VAR 0 5
24840: ARRAY
24841: PUSH
24842: FOR_TO
24843: IFFALSE 24884
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24845: LD_EXP 90
24849: PUSH
24850: LD_VAR 0 5
24854: ARRAY
24855: PUSH
24856: LD_VAR 0 4
24860: ARRAY
24861: PUSH
24862: LD_INT 1
24864: ARRAY
24865: PUSH
24866: LD_VAR 0 2
24870: EQUAL
24871: IFFALSE 24882
// KillUnit ( vehicle ) ;
24873: LD_VAR 0 2
24877: PPUSH
24878: CALL_OW 66
24882: GO 24842
24884: POP
24885: POP
// end ;
24886: LD_VAR 0 3
24890: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24891: LD_EXP 94
24895: NOT
24896: IFFALSE 24931
24898: GO 24900
24900: DISABLE
// begin initMiner := true ;
24901: LD_ADDR_EXP 94
24905: PUSH
24906: LD_INT 1
24908: ST_TO_ADDR
// minersList := [ ] ;
24909: LD_ADDR_EXP 95
24913: PUSH
24914: EMPTY
24915: ST_TO_ADDR
// minerMinesList := [ ] ;
24916: LD_ADDR_EXP 96
24920: PUSH
24921: EMPTY
24922: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24923: LD_ADDR_EXP 97
24927: PUSH
24928: LD_INT 5
24930: ST_TO_ADDR
// end ;
24931: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24932: LD_EXP 94
24936: IFFALSE 24954
24938: PUSH
24939: LD_INT 34
24941: PUSH
24942: LD_INT 81
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PPUSH
24949: CALL_OW 69
24953: AND
24954: IFFALSE 25417
24956: GO 24958
24958: DISABLE
24959: LD_INT 0
24961: PPUSH
24962: PPUSH
24963: PPUSH
24964: PPUSH
// begin enable ;
24965: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24966: LD_ADDR_VAR 0 1
24970: PUSH
24971: LD_INT 34
24973: PUSH
24974: LD_INT 81
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PPUSH
24981: CALL_OW 69
24985: PUSH
24986: FOR_IN
24987: IFFALSE 25059
// begin if not i in minersList then
24989: LD_VAR 0 1
24993: PUSH
24994: LD_EXP 95
24998: IN
24999: NOT
25000: IFFALSE 25057
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25002: LD_ADDR_EXP 95
25006: PUSH
25007: LD_EXP 95
25011: PPUSH
25012: LD_EXP 95
25016: PUSH
25017: LD_INT 1
25019: PLUS
25020: PPUSH
25021: LD_VAR 0 1
25025: PPUSH
25026: CALL_OW 1
25030: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25031: LD_ADDR_EXP 96
25035: PUSH
25036: LD_EXP 96
25040: PPUSH
25041: LD_EXP 96
25045: PUSH
25046: LD_INT 1
25048: PLUS
25049: PPUSH
25050: EMPTY
25051: PPUSH
25052: CALL_OW 1
25056: ST_TO_ADDR
// end end ;
25057: GO 24986
25059: POP
25060: POP
// for i := minerMinesList downto 1 do
25061: LD_ADDR_VAR 0 1
25065: PUSH
25066: DOUBLE
25067: LD_EXP 96
25071: INC
25072: ST_TO_ADDR
25073: LD_INT 1
25075: PUSH
25076: FOR_DOWNTO
25077: IFFALSE 25415
// begin if IsLive ( minersList [ i ] ) then
25079: LD_EXP 95
25083: PUSH
25084: LD_VAR 0 1
25088: ARRAY
25089: PPUSH
25090: CALL_OW 300
25094: IFFALSE 25122
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25096: LD_EXP 95
25100: PUSH
25101: LD_VAR 0 1
25105: ARRAY
25106: PPUSH
25107: LD_EXP 96
25111: PUSH
25112: LD_VAR 0 1
25116: ARRAY
25117: PPUSH
25118: CALL_OW 505
// if not minerMinesList [ i ] then
25122: LD_EXP 96
25126: PUSH
25127: LD_VAR 0 1
25131: ARRAY
25132: NOT
25133: IFFALSE 25137
// continue ;
25135: GO 25076
// for j := minerMinesList [ i ] downto 1 do
25137: LD_ADDR_VAR 0 2
25141: PUSH
25142: DOUBLE
25143: LD_EXP 96
25147: PUSH
25148: LD_VAR 0 1
25152: ARRAY
25153: INC
25154: ST_TO_ADDR
25155: LD_INT 1
25157: PUSH
25158: FOR_DOWNTO
25159: IFFALSE 25411
// begin side := GetSide ( minersList [ i ] ) ;
25161: LD_ADDR_VAR 0 3
25165: PUSH
25166: LD_EXP 95
25170: PUSH
25171: LD_VAR 0 1
25175: ARRAY
25176: PPUSH
25177: CALL_OW 255
25181: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25182: LD_ADDR_VAR 0 4
25186: PUSH
25187: LD_EXP 96
25191: PUSH
25192: LD_VAR 0 1
25196: ARRAY
25197: PUSH
25198: LD_VAR 0 2
25202: ARRAY
25203: PUSH
25204: LD_INT 1
25206: ARRAY
25207: PPUSH
25208: LD_EXP 96
25212: PUSH
25213: LD_VAR 0 1
25217: ARRAY
25218: PUSH
25219: LD_VAR 0 2
25223: ARRAY
25224: PUSH
25225: LD_INT 2
25227: ARRAY
25228: PPUSH
25229: CALL_OW 428
25233: ST_TO_ADDR
// if not tmp then
25234: LD_VAR 0 4
25238: NOT
25239: IFFALSE 25243
// continue ;
25241: GO 25158
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25243: LD_VAR 0 4
25247: PUSH
25248: LD_INT 81
25250: PUSH
25251: LD_VAR 0 3
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PPUSH
25260: CALL_OW 69
25264: IN
25265: IFFALSE 25315
25267: PUSH
25268: LD_EXP 96
25272: PUSH
25273: LD_VAR 0 1
25277: ARRAY
25278: PUSH
25279: LD_VAR 0 2
25283: ARRAY
25284: PUSH
25285: LD_INT 1
25287: ARRAY
25288: PPUSH
25289: LD_EXP 96
25293: PUSH
25294: LD_VAR 0 1
25298: ARRAY
25299: PUSH
25300: LD_VAR 0 2
25304: ARRAY
25305: PUSH
25306: LD_INT 2
25308: ARRAY
25309: PPUSH
25310: CALL_OW 458
25314: AND
25315: IFFALSE 25409
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25317: LD_EXP 96
25321: PUSH
25322: LD_VAR 0 1
25326: ARRAY
25327: PUSH
25328: LD_VAR 0 2
25332: ARRAY
25333: PUSH
25334: LD_INT 1
25336: ARRAY
25337: PPUSH
25338: LD_EXP 96
25342: PUSH
25343: LD_VAR 0 1
25347: ARRAY
25348: PUSH
25349: LD_VAR 0 2
25353: ARRAY
25354: PUSH
25355: LD_INT 2
25357: ARRAY
25358: PPUSH
25359: LD_VAR 0 3
25363: PPUSH
25364: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25368: LD_ADDR_EXP 96
25372: PUSH
25373: LD_EXP 96
25377: PPUSH
25378: LD_VAR 0 1
25382: PPUSH
25383: LD_EXP 96
25387: PUSH
25388: LD_VAR 0 1
25392: ARRAY
25393: PPUSH
25394: LD_VAR 0 2
25398: PPUSH
25399: CALL_OW 3
25403: PPUSH
25404: CALL_OW 1
25408: ST_TO_ADDR
// end ; end ;
25409: GO 25158
25411: POP
25412: POP
// end ;
25413: GO 25076
25415: POP
25416: POP
// end ;
25417: PPOPN 4
25419: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25420: LD_INT 0
25422: PPUSH
25423: PPUSH
// result := false ;
25424: LD_ADDR_VAR 0 4
25428: PUSH
25429: LD_INT 0
25431: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25432: LD_VAR 0 1
25436: PPUSH
25437: CALL_OW 264
25441: PUSH
25442: LD_INT 81
25444: EQUAL
25445: NOT
25446: IFFALSE 25450
// exit ;
25448: GO 25694
// index := GetElementIndex ( minersList , unit ) ;
25450: LD_ADDR_VAR 0 5
25454: PUSH
25455: LD_EXP 95
25459: PPUSH
25460: LD_VAR 0 1
25464: PPUSH
25465: CALL 32920 0 2
25469: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25470: LD_EXP 96
25474: PUSH
25475: LD_VAR 0 5
25479: ARRAY
25480: PUSH
25481: LD_EXP 97
25485: GREATEREQUAL
25486: IFFALSE 25490
// exit ;
25488: GO 25694
// ComMoveXY ( unit , x , y ) ;
25490: LD_VAR 0 1
25494: PPUSH
25495: LD_VAR 0 2
25499: PPUSH
25500: LD_VAR 0 3
25504: PPUSH
25505: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25509: LD_INT 35
25511: PPUSH
25512: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25516: LD_VAR 0 1
25520: PPUSH
25521: LD_VAR 0 2
25525: PPUSH
25526: LD_VAR 0 3
25530: PPUSH
25531: CALL 64966 0 3
25535: NOT
25536: IFFALSE 25549
25538: PUSH
25539: LD_VAR 0 1
25543: PPUSH
25544: CALL_OW 314
25548: AND
25549: IFFALSE 25553
// exit ;
25551: GO 25694
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25553: LD_VAR 0 2
25557: PPUSH
25558: LD_VAR 0 3
25562: PPUSH
25563: CALL_OW 428
25567: PUSH
25568: LD_VAR 0 1
25572: EQUAL
25573: IFFALSE 25587
25575: PUSH
25576: LD_VAR 0 1
25580: PPUSH
25581: CALL_OW 314
25585: NOT
25586: AND
25587: IFFALSE 25509
// PlaySoundXY ( x , y , PlantMine ) ;
25589: LD_VAR 0 2
25593: PPUSH
25594: LD_VAR 0 3
25598: PPUSH
25599: LD_STRING PlantMine
25601: PPUSH
25602: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25606: LD_VAR 0 2
25610: PPUSH
25611: LD_VAR 0 3
25615: PPUSH
25616: LD_VAR 0 1
25620: PPUSH
25621: CALL_OW 255
25625: PPUSH
25626: LD_INT 0
25628: PPUSH
25629: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25633: LD_ADDR_EXP 96
25637: PUSH
25638: LD_EXP 96
25642: PPUSH
25643: LD_VAR 0 5
25647: PUSH
25648: LD_EXP 96
25652: PUSH
25653: LD_VAR 0 5
25657: ARRAY
25658: PUSH
25659: LD_INT 1
25661: PLUS
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PPUSH
25667: LD_VAR 0 2
25671: PUSH
25672: LD_VAR 0 3
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PPUSH
25681: CALL 33137 0 3
25685: ST_TO_ADDR
// result := true ;
25686: LD_ADDR_VAR 0 4
25690: PUSH
25691: LD_INT 1
25693: ST_TO_ADDR
// end ;
25694: LD_VAR 0 4
25698: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25699: LD_INT 0
25701: PPUSH
25702: PPUSH
25703: PPUSH
// if not unit in minersList then
25704: LD_VAR 0 1
25708: PUSH
25709: LD_EXP 95
25713: IN
25714: NOT
25715: IFFALSE 25719
// exit ;
25717: GO 26113
// index := GetElementIndex ( minersList , unit ) ;
25719: LD_ADDR_VAR 0 6
25723: PUSH
25724: LD_EXP 95
25728: PPUSH
25729: LD_VAR 0 1
25733: PPUSH
25734: CALL 32920 0 2
25738: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25739: LD_ADDR_VAR 0 5
25743: PUSH
25744: DOUBLE
25745: LD_EXP 96
25749: PUSH
25750: LD_VAR 0 6
25754: ARRAY
25755: INC
25756: ST_TO_ADDR
25757: LD_INT 1
25759: PUSH
25760: FOR_DOWNTO
25761: IFFALSE 25924
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25763: LD_EXP 96
25767: PUSH
25768: LD_VAR 0 6
25772: ARRAY
25773: PUSH
25774: LD_VAR 0 5
25778: ARRAY
25779: PUSH
25780: LD_INT 1
25782: ARRAY
25783: PUSH
25784: LD_VAR 0 2
25788: EQUAL
25789: IFFALSE 25819
25791: PUSH
25792: LD_EXP 96
25796: PUSH
25797: LD_VAR 0 6
25801: ARRAY
25802: PUSH
25803: LD_VAR 0 5
25807: ARRAY
25808: PUSH
25809: LD_INT 2
25811: ARRAY
25812: PUSH
25813: LD_VAR 0 3
25817: EQUAL
25818: AND
25819: IFFALSE 25922
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25821: LD_EXP 96
25825: PUSH
25826: LD_VAR 0 6
25830: ARRAY
25831: PUSH
25832: LD_VAR 0 5
25836: ARRAY
25837: PUSH
25838: LD_INT 1
25840: ARRAY
25841: PPUSH
25842: LD_EXP 96
25846: PUSH
25847: LD_VAR 0 6
25851: ARRAY
25852: PUSH
25853: LD_VAR 0 5
25857: ARRAY
25858: PUSH
25859: LD_INT 2
25861: ARRAY
25862: PPUSH
25863: LD_VAR 0 1
25867: PPUSH
25868: CALL_OW 255
25872: PPUSH
25873: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25877: LD_ADDR_EXP 96
25881: PUSH
25882: LD_EXP 96
25886: PPUSH
25887: LD_VAR 0 6
25891: PPUSH
25892: LD_EXP 96
25896: PUSH
25897: LD_VAR 0 6
25901: ARRAY
25902: PPUSH
25903: LD_VAR 0 5
25907: PPUSH
25908: CALL_OW 3
25912: PPUSH
25913: CALL_OW 1
25917: ST_TO_ADDR
// exit ;
25918: POP
25919: POP
25920: GO 26113
// end ; end ;
25922: GO 25760
25924: POP
25925: POP
// for i := minerMinesList [ index ] downto 1 do
25926: LD_ADDR_VAR 0 5
25930: PUSH
25931: DOUBLE
25932: LD_EXP 96
25936: PUSH
25937: LD_VAR 0 6
25941: ARRAY
25942: INC
25943: ST_TO_ADDR
25944: LD_INT 1
25946: PUSH
25947: FOR_DOWNTO
25948: IFFALSE 26111
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25950: LD_EXP 96
25954: PUSH
25955: LD_VAR 0 6
25959: ARRAY
25960: PUSH
25961: LD_VAR 0 5
25965: ARRAY
25966: PUSH
25967: LD_INT 1
25969: ARRAY
25970: PPUSH
25971: LD_EXP 96
25975: PUSH
25976: LD_VAR 0 6
25980: ARRAY
25981: PUSH
25982: LD_VAR 0 5
25986: ARRAY
25987: PUSH
25988: LD_INT 2
25990: ARRAY
25991: PPUSH
25992: LD_VAR 0 2
25996: PPUSH
25997: LD_VAR 0 3
26001: PPUSH
26002: CALL_OW 298
26006: PUSH
26007: LD_INT 6
26009: LESS
26010: IFFALSE 26109
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26012: LD_EXP 96
26016: PUSH
26017: LD_VAR 0 6
26021: ARRAY
26022: PUSH
26023: LD_VAR 0 5
26027: ARRAY
26028: PUSH
26029: LD_INT 1
26031: ARRAY
26032: PPUSH
26033: LD_EXP 96
26037: PUSH
26038: LD_VAR 0 6
26042: ARRAY
26043: PUSH
26044: LD_VAR 0 5
26048: ARRAY
26049: PUSH
26050: LD_INT 2
26052: ARRAY
26053: PPUSH
26054: LD_VAR 0 1
26058: PPUSH
26059: CALL_OW 255
26063: PPUSH
26064: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26068: LD_ADDR_EXP 96
26072: PUSH
26073: LD_EXP 96
26077: PPUSH
26078: LD_VAR 0 6
26082: PPUSH
26083: LD_EXP 96
26087: PUSH
26088: LD_VAR 0 6
26092: ARRAY
26093: PPUSH
26094: LD_VAR 0 5
26098: PPUSH
26099: CALL_OW 3
26103: PPUSH
26104: CALL_OW 1
26108: ST_TO_ADDR
// end ; end ;
26109: GO 25947
26111: POP
26112: POP
// end ;
26113: LD_VAR 0 4
26117: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26118: LD_INT 0
26120: PPUSH
26121: PPUSH
26122: PPUSH
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26129: LD_VAR 0 1
26133: PPUSH
26134: CALL_OW 264
26138: PUSH
26139: LD_INT 81
26141: EQUAL
26142: NOT
26143: IFTRUE 26158
26145: PUSH
26146: LD_VAR 0 1
26150: PUSH
26151: LD_EXP 95
26155: IN
26156: NOT
26157: OR
26158: IFFALSE 26162
// exit ;
26160: GO 26488
// index := GetElementIndex ( minersList , unit ) ;
26162: LD_ADDR_VAR 0 6
26166: PUSH
26167: LD_EXP 95
26171: PPUSH
26172: LD_VAR 0 1
26176: PPUSH
26177: CALL 32920 0 2
26181: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26182: LD_ADDR_VAR 0 8
26186: PUSH
26187: LD_EXP 97
26191: PUSH
26192: LD_EXP 96
26196: PUSH
26197: LD_VAR 0 6
26201: ARRAY
26202: MINUS
26203: ST_TO_ADDR
// if not minesFreeAmount then
26204: LD_VAR 0 8
26208: NOT
26209: IFFALSE 26213
// exit ;
26211: GO 26488
// tmp := [ ] ;
26213: LD_ADDR_VAR 0 7
26217: PUSH
26218: EMPTY
26219: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26220: LD_ADDR_VAR 0 5
26224: PUSH
26225: DOUBLE
26226: LD_INT 1
26228: DEC
26229: ST_TO_ADDR
26230: LD_VAR 0 8
26234: PUSH
26235: FOR_TO
26236: IFFALSE 26435
// begin _d := rand ( 0 , 5 ) ;
26238: LD_ADDR_VAR 0 11
26242: PUSH
26243: LD_INT 0
26245: PPUSH
26246: LD_INT 5
26248: PPUSH
26249: CALL_OW 12
26253: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26254: LD_ADDR_VAR 0 12
26258: PUSH
26259: LD_INT 2
26261: PPUSH
26262: LD_INT 6
26264: PPUSH
26265: CALL_OW 12
26269: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26270: LD_ADDR_VAR 0 9
26274: PUSH
26275: LD_VAR 0 2
26279: PPUSH
26280: LD_VAR 0 11
26284: PPUSH
26285: LD_VAR 0 12
26289: PPUSH
26290: CALL_OW 272
26294: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26295: LD_ADDR_VAR 0 10
26299: PUSH
26300: LD_VAR 0 3
26304: PPUSH
26305: LD_VAR 0 11
26309: PPUSH
26310: LD_VAR 0 12
26314: PPUSH
26315: CALL_OW 273
26319: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26320: LD_VAR 0 9
26324: PPUSH
26325: LD_VAR 0 10
26329: PPUSH
26330: CALL_OW 488
26334: IFFALSE 26358
26336: PUSH
26337: LD_VAR 0 9
26341: PUSH
26342: LD_VAR 0 10
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_VAR 0 7
26355: IN
26356: NOT
26357: AND
26358: IFFALSE 26377
26360: PUSH
26361: LD_VAR 0 9
26365: PPUSH
26366: LD_VAR 0 10
26370: PPUSH
26371: CALL_OW 458
26375: NOT
26376: AND
26377: IFFALSE 26419
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26379: LD_ADDR_VAR 0 7
26383: PUSH
26384: LD_VAR 0 7
26388: PPUSH
26389: LD_VAR 0 7
26393: PUSH
26394: LD_INT 1
26396: PLUS
26397: PPUSH
26398: LD_VAR 0 9
26402: PUSH
26403: LD_VAR 0 10
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PPUSH
26412: CALL_OW 1
26416: ST_TO_ADDR
26417: GO 26433
// i := i - 1 ;
26419: LD_ADDR_VAR 0 5
26423: PUSH
26424: LD_VAR 0 5
26428: PUSH
26429: LD_INT 1
26431: MINUS
26432: ST_TO_ADDR
// end ;
26433: GO 26235
26435: POP
26436: POP
// for i in tmp do
26437: LD_ADDR_VAR 0 5
26441: PUSH
26442: LD_VAR 0 7
26446: PUSH
26447: FOR_IN
26448: IFFALSE 26486
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26450: LD_VAR 0 1
26454: PPUSH
26455: LD_VAR 0 5
26459: PUSH
26460: LD_INT 1
26462: ARRAY
26463: PPUSH
26464: LD_VAR 0 5
26468: PUSH
26469: LD_INT 2
26471: ARRAY
26472: PPUSH
26473: CALL 25420 0 3
26477: NOT
26478: IFFALSE 26484
// exit ;
26480: POP
26481: POP
26482: GO 26488
26484: GO 26447
26486: POP
26487: POP
// end ;
26488: LD_VAR 0 4
26492: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
26493: LD_INT 0
26495: PPUSH
26496: PPUSH
26497: PPUSH
26498: PPUSH
26499: PPUSH
26500: PPUSH
26501: PPUSH
26502: PPUSH
26503: PPUSH
// if GetClass ( unit ) <> class_sniper then
26504: LD_VAR 0 1
26508: PPUSH
26509: CALL_OW 257
26513: PUSH
26514: LD_INT 5
26516: NONEQUAL
26517: IFFALSE 26521
// exit ;
26519: GO 26991
// dist := 8 ;
26521: LD_ADDR_VAR 0 5
26525: PUSH
26526: LD_INT 8
26528: ST_TO_ADDR
// viewRange := 12 ;
26529: LD_ADDR_VAR 0 8
26533: PUSH
26534: LD_INT 12
26536: ST_TO_ADDR
// side := GetSide ( unit ) ;
26537: LD_ADDR_VAR 0 6
26541: PUSH
26542: LD_VAR 0 1
26546: PPUSH
26547: CALL_OW 255
26551: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26552: LD_INT 61
26554: PPUSH
26555: LD_VAR 0 6
26559: PPUSH
26560: CALL_OW 321
26564: PUSH
26565: LD_INT 2
26567: EQUAL
26568: IFFALSE 26578
// viewRange := 16 ;
26570: LD_ADDR_VAR 0 8
26574: PUSH
26575: LD_INT 16
26577: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26578: LD_VAR 0 1
26582: PPUSH
26583: LD_VAR 0 2
26587: PPUSH
26588: LD_VAR 0 3
26592: PPUSH
26593: CALL_OW 297
26597: PUSH
26598: LD_VAR 0 5
26602: GREATER
26603: IFFALSE 26682
// begin ComMoveXY ( unit , x , y ) ;
26605: LD_VAR 0 1
26609: PPUSH
26610: LD_VAR 0 2
26614: PPUSH
26615: LD_VAR 0 3
26619: PPUSH
26620: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26624: LD_INT 35
26626: PPUSH
26627: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26631: LD_VAR 0 1
26635: PPUSH
26636: LD_VAR 0 2
26640: PPUSH
26641: LD_VAR 0 3
26645: PPUSH
26646: CALL 64966 0 3
26650: NOT
26651: IFFALSE 26655
// exit ;
26653: GO 26991
// until GetDistUnitXY ( unit , x , y ) < dist ;
26655: LD_VAR 0 1
26659: PPUSH
26660: LD_VAR 0 2
26664: PPUSH
26665: LD_VAR 0 3
26669: PPUSH
26670: CALL_OW 297
26674: PUSH
26675: LD_VAR 0 5
26679: LESS
26680: IFFALSE 26624
// end ; ComTurnXY ( unit , x , y ) ;
26682: LD_VAR 0 1
26686: PPUSH
26687: LD_VAR 0 2
26691: PPUSH
26692: LD_VAR 0 3
26696: PPUSH
26697: CALL_OW 118
// repeat if Multiplayer then
26701: LD_OWVAR 4
26705: IFFALSE 26716
// wait ( 35 ) else
26707: LD_INT 35
26709: PPUSH
26710: CALL_OW 67
26714: GO 26723
// wait ( 5 ) ;
26716: LD_INT 5
26718: PPUSH
26719: CALL_OW 67
// _d := GetDir ( unit ) ;
26723: LD_ADDR_VAR 0 11
26727: PUSH
26728: LD_VAR 0 1
26732: PPUSH
26733: CALL_OW 254
26737: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
26738: LD_ADDR_VAR 0 7
26742: PUSH
26743: LD_VAR 0 1
26747: PPUSH
26748: CALL_OW 250
26752: PPUSH
26753: LD_VAR 0 1
26757: PPUSH
26758: CALL_OW 251
26762: PPUSH
26763: LD_VAR 0 2
26767: PPUSH
26768: LD_VAR 0 3
26772: PPUSH
26773: CALL 67602 0 4
26777: ST_TO_ADDR
// until dir = _d ;
26778: LD_VAR 0 7
26782: PUSH
26783: LD_VAR 0 11
26787: EQUAL
26788: IFFALSE 26701
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
26790: LD_ADDR_VAR 0 9
26794: PUSH
26795: LD_VAR 0 1
26799: PPUSH
26800: CALL_OW 250
26804: PPUSH
26805: LD_VAR 0 7
26809: PPUSH
26810: LD_VAR 0 5
26814: PPUSH
26815: CALL_OW 272
26819: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
26820: LD_ADDR_VAR 0 10
26824: PUSH
26825: LD_VAR 0 1
26829: PPUSH
26830: CALL_OW 251
26834: PPUSH
26835: LD_VAR 0 7
26839: PPUSH
26840: LD_VAR 0 5
26844: PPUSH
26845: CALL_OW 273
26849: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26850: LD_VAR 0 9
26854: PPUSH
26855: LD_VAR 0 10
26859: PPUSH
26860: CALL_OW 488
26864: NOT
26865: IFFALSE 26869
// exit ;
26867: GO 26991
// ComAnimCustom ( unit , 1 ) ;
26869: LD_VAR 0 1
26873: PPUSH
26874: LD_INT 1
26876: PPUSH
26877: CALL_OW 592
// p := 0 ;
26881: LD_ADDR_VAR 0 12
26885: PUSH
26886: LD_INT 0
26888: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26889: LD_VAR 0 9
26893: PPUSH
26894: LD_VAR 0 10
26898: PPUSH
26899: LD_VAR 0 6
26903: PPUSH
26904: LD_VAR 0 8
26908: PPUSH
26909: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
26913: LD_INT 35
26915: PPUSH
26916: CALL_OW 67
// p := Inc ( p ) ;
26920: LD_ADDR_VAR 0 12
26924: PUSH
26925: LD_VAR 0 12
26929: PPUSH
26930: CALL 67558 0 1
26934: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
26935: LD_VAR 0 12
26939: PUSH
26940: LD_INT 3
26942: EQUAL
26943: IFTRUE 26957
26945: PUSH
26946: LD_VAR 0 1
26950: PPUSH
26951: CALL_OW 302
26955: NOT
26956: OR
26957: IFTRUE 26970
26959: PUSH
26960: LD_VAR 0 1
26964: PPUSH
26965: CALL_OW 301
26969: OR
26970: IFFALSE 26913
// RemoveSeeing ( _x , _y , side ) ;
26972: LD_VAR 0 9
26976: PPUSH
26977: LD_VAR 0 10
26981: PPUSH
26982: LD_VAR 0 6
26986: PPUSH
26987: CALL_OW 331
// end ;
26991: LD_VAR 0 4
26995: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
26996: LD_INT 0
26998: PPUSH
26999: PPUSH
27000: PPUSH
27001: PPUSH
27002: PPUSH
27003: PPUSH
27004: PPUSH
27005: PPUSH
27006: PPUSH
27007: PPUSH
27008: PPUSH
// if not unit then
27009: LD_VAR 0 1
27013: NOT
27014: IFFALSE 27018
// exit ;
27016: GO 27289
// side := GetSide ( unit ) ;
27018: LD_ADDR_VAR 0 3
27022: PUSH
27023: LD_VAR 0 1
27027: PPUSH
27028: CALL_OW 255
27032: ST_TO_ADDR
// x := GetX ( unit ) ;
27033: LD_ADDR_VAR 0 5
27037: PUSH
27038: LD_VAR 0 1
27042: PPUSH
27043: CALL_OW 250
27047: ST_TO_ADDR
// y := GetY ( unit ) ;
27048: LD_ADDR_VAR 0 6
27052: PUSH
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 251
27062: ST_TO_ADDR
// r := 8 ;
27063: LD_ADDR_VAR 0 4
27067: PUSH
27068: LD_INT 8
27070: ST_TO_ADDR
// if x - r < 0 then
27071: LD_VAR 0 5
27075: PUSH
27076: LD_VAR 0 4
27080: MINUS
27081: PUSH
27082: LD_INT 0
27084: LESS
27085: IFFALSE 27097
// min_x := 0 else
27087: LD_ADDR_VAR 0 7
27091: PUSH
27092: LD_INT 0
27094: ST_TO_ADDR
27095: GO 27113
// min_x := x - r ;
27097: LD_ADDR_VAR 0 7
27101: PUSH
27102: LD_VAR 0 5
27106: PUSH
27107: LD_VAR 0 4
27111: MINUS
27112: ST_TO_ADDR
// if y - r < 0 then
27113: LD_VAR 0 6
27117: PUSH
27118: LD_VAR 0 4
27122: MINUS
27123: PUSH
27124: LD_INT 0
27126: LESS
27127: IFFALSE 27139
// min_y := 0 else
27129: LD_ADDR_VAR 0 8
27133: PUSH
27134: LD_INT 0
27136: ST_TO_ADDR
27137: GO 27155
// min_y := y - r ;
27139: LD_ADDR_VAR 0 8
27143: PUSH
27144: LD_VAR 0 6
27148: PUSH
27149: LD_VAR 0 4
27153: MINUS
27154: ST_TO_ADDR
// max_x := x + r ;
27155: LD_ADDR_VAR 0 9
27159: PUSH
27160: LD_VAR 0 5
27164: PUSH
27165: LD_VAR 0 4
27169: PLUS
27170: ST_TO_ADDR
// max_y := y + r ;
27171: LD_ADDR_VAR 0 10
27175: PUSH
27176: LD_VAR 0 6
27180: PUSH
27181: LD_VAR 0 4
27185: PLUS
27186: ST_TO_ADDR
// for _x = min_x to max_x do
27187: LD_ADDR_VAR 0 11
27191: PUSH
27192: DOUBLE
27193: LD_VAR 0 7
27197: DEC
27198: ST_TO_ADDR
27199: LD_VAR 0 9
27203: PUSH
27204: FOR_TO
27205: IFFALSE 27287
// for _y = min_y to max_y do
27207: LD_ADDR_VAR 0 12
27211: PUSH
27212: DOUBLE
27213: LD_VAR 0 8
27217: DEC
27218: ST_TO_ADDR
27219: LD_VAR 0 10
27223: PUSH
27224: FOR_TO
27225: IFFALSE 27283
// begin if not ValidHex ( _x , _y ) then
27227: LD_VAR 0 11
27231: PPUSH
27232: LD_VAR 0 12
27236: PPUSH
27237: CALL_OW 488
27241: NOT
27242: IFFALSE 27246
// continue ;
27244: GO 27224
// if MineAtPos ( _x , _y ) then
27246: LD_VAR 0 11
27250: PPUSH
27251: LD_VAR 0 12
27255: PPUSH
27256: CALL_OW 458
27260: IFFALSE 27281
// ViewMineAtPos ( _x , _y , side ) ;
27262: LD_VAR 0 11
27266: PPUSH
27267: LD_VAR 0 12
27271: PPUSH
27272: LD_VAR 0 3
27276: PPUSH
27277: CALL_OW 457
// end ;
27281: GO 27224
27283: POP
27284: POP
27285: GO 27204
27287: POP
27288: POP
// end ;
27289: LD_VAR 0 2
27293: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
27294: LD_INT 0
27296: PPUSH
27297: PPUSH
27298: PPUSH
27299: PPUSH
27300: PPUSH
27301: PPUSH
// if not units then
27302: LD_VAR 0 1
27306: NOT
27307: IFFALSE 27311
// exit ;
27309: GO 27741
// scaners := [ ] ;
27311: LD_ADDR_VAR 0 6
27315: PUSH
27316: EMPTY
27317: ST_TO_ADDR
// for i in units do
27318: LD_ADDR_VAR 0 3
27322: PUSH
27323: LD_VAR 0 1
27327: PUSH
27328: FOR_IN
27329: IFFALSE 27486
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
27331: LD_VAR 0 3
27335: PPUSH
27336: CALL_OW 264
27340: PUSH
27341: LD_INT 11
27343: NONEQUAL
27344: IFTRUE 27358
27346: PUSH
27347: LD_VAR 0 3
27351: PPUSH
27352: CALL_OW 302
27356: NOT
27357: OR
27358: IFTRUE 27375
27360: PUSH
27361: LD_VAR 0 3
27365: PPUSH
27366: CALL_OW 110
27370: PUSH
27371: LD_INT 502
27373: EQUAL
27374: OR
27375: IFFALSE 27379
// continue ;
27377: GO 27328
// ComStop ( i ) ;
27379: LD_VAR 0 3
27383: PPUSH
27384: CALL_OW 141
// x := GetX ( i ) ;
27388: LD_ADDR_VAR 0 4
27392: PUSH
27393: LD_VAR 0 3
27397: PPUSH
27398: CALL_OW 250
27402: ST_TO_ADDR
// y := GetY ( i ) ;
27403: LD_ADDR_VAR 0 5
27407: PUSH
27408: LD_VAR 0 3
27412: PPUSH
27413: CALL_OW 251
27417: ST_TO_ADDR
// if GetSide ( i ) = your_side then
27418: LD_VAR 0 3
27422: PPUSH
27423: CALL_OW 255
27427: PUSH
27428: LD_OWVAR 2
27432: EQUAL
27433: IFFALSE 27452
// PlaySoundXY ( x , y , mineDetector ) ;
27435: LD_VAR 0 4
27439: PPUSH
27440: LD_VAR 0 5
27444: PPUSH
27445: LD_STRING mineDetector
27447: PPUSH
27448: CALL_OW 366
// scaners := Join ( scaners , i ) ;
27452: LD_ADDR_VAR 0 6
27456: PUSH
27457: LD_VAR 0 6
27461: PPUSH
27462: LD_VAR 0 3
27466: PPUSH
27467: CALL 66185 0 2
27471: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
27472: LD_VAR 0 3
27476: PPUSH
27477: LD_INT 502
27479: PPUSH
27480: CALL_OW 109
// end ;
27484: GO 27328
27486: POP
27487: POP
// if not scaners then
27488: LD_VAR 0 6
27492: NOT
27493: IFFALSE 27497
// exit ;
27495: GO 27741
// wait ( 3 ) ;
27497: LD_INT 3
27499: PPUSH
27500: CALL_OW 67
// timer := 6 ;
27504: LD_ADDR_VAR 0 7
27508: PUSH
27509: LD_INT 6
27511: ST_TO_ADDR
// repeat for i in scaners do
27512: LD_ADDR_VAR 0 3
27516: PUSH
27517: LD_VAR 0 6
27521: PUSH
27522: FOR_IN
27523: IFFALSE 27639
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
27525: LD_VAR 0 3
27529: PPUSH
27530: CALL_OW 302
27534: NOT
27535: IFTRUE 27548
27537: PUSH
27538: LD_VAR 0 3
27542: PPUSH
27543: CALL_OW 314
27547: OR
27548: IFTRUE 27579
27550: PUSH
27551: LD_VAR 0 3
27555: PPUSH
27556: CALL_OW 263
27560: PUSH
27561: LD_INT 1
27563: EQUAL
27564: IFFALSE 27578
27566: PUSH
27567: LD_VAR 0 3
27571: PPUSH
27572: CALL_OW 311
27576: NOT
27577: AND
27578: OR
27579: IFFALSE 27623
// begin SetUnitDisplayNumber ( i , 0 ) ;
27581: LD_VAR 0 3
27585: PPUSH
27586: LD_INT 0
27588: PPUSH
27589: CALL_OW 505
// SetTag ( i , 0 ) ;
27593: LD_VAR 0 3
27597: PPUSH
27598: LD_INT 0
27600: PPUSH
27601: CALL_OW 109
// scaners := scaners diff i ;
27605: LD_ADDR_VAR 0 6
27609: PUSH
27610: LD_VAR 0 6
27614: PUSH
27615: LD_VAR 0 3
27619: DIFF
27620: ST_TO_ADDR
// continue ;
27621: GO 27522
// end ; SetUnitDisplayNumber ( i , timer ) ;
27623: LD_VAR 0 3
27627: PPUSH
27628: LD_VAR 0 7
27632: PPUSH
27633: CALL_OW 505
// end ;
27637: GO 27522
27639: POP
27640: POP
// if not scaners then
27641: LD_VAR 0 6
27645: NOT
27646: IFFALSE 27650
// exit ;
27648: GO 27741
// timer := Dec ( timer ) ;
27650: LD_ADDR_VAR 0 7
27654: PUSH
27655: LD_VAR 0 7
27659: PPUSH
27660: CALL 67580 0 1
27664: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27665: LD_INT 35
27667: PPUSH
27668: CALL_OW 67
// until timer = 0 ;
27672: LD_VAR 0 7
27676: PUSH
27677: LD_INT 0
27679: EQUAL
27680: IFFALSE 27512
// if not scaners then
27682: LD_VAR 0 6
27686: NOT
27687: IFFALSE 27691
// exit ;
27689: GO 27741
// for i in scaners do
27691: LD_ADDR_VAR 0 3
27695: PUSH
27696: LD_VAR 0 6
27700: PUSH
27701: FOR_IN
27702: IFFALSE 27739
// begin SetUnitDisplayNumber ( i , 0 ) ;
27704: LD_VAR 0 3
27708: PPUSH
27709: LD_INT 0
27711: PPUSH
27712: CALL_OW 505
// SetTag ( i , 0 ) ;
27716: LD_VAR 0 3
27720: PPUSH
27721: LD_INT 0
27723: PPUSH
27724: CALL_OW 109
// RevealDetectorMine ( i ) ;
27728: LD_VAR 0 3
27732: PPUSH
27733: CALL 26996 0 1
// end ;
27737: GO 27701
27739: POP
27740: POP
// end ;
27741: LD_VAR 0 2
27745: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
27746: LD_INT 0
27748: PPUSH
// if p1 = mine_detector_mode then
27749: LD_VAR 0 2
27753: PUSH
27754: LD_INT 103
27756: EQUAL
27757: IFFALSE 27768
// DetectMine ( units ) ;
27759: LD_VAR 0 1
27763: PPUSH
27764: CALL 27294 0 1
// end ; end_of_file
27768: LD_VAR 0 7
27772: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
27773: LD_VAR 0 1
27777: PUSH
27778: LD_INT 200
27780: DOUBLE
27781: GREATEREQUAL
27782: IFFALSE 27790
27784: LD_INT 299
27786: DOUBLE
27787: LESSEQUAL
27788: IFTRUE 27792
27790: GO 27824
27792: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
27793: LD_VAR 0 1
27797: PPUSH
27798: LD_VAR 0 2
27802: PPUSH
27803: LD_VAR 0 3
27807: PPUSH
27808: LD_VAR 0 4
27812: PPUSH
27813: LD_VAR 0 5
27817: PPUSH
27818: CALL 22239 0 5
27822: GO 27901
27824: LD_INT 300
27826: DOUBLE
27827: GREATEREQUAL
27828: IFFALSE 27836
27830: LD_INT 399
27832: DOUBLE
27833: LESSEQUAL
27834: IFTRUE 27838
27836: GO 27900
27838: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
27839: LD_VAR 0 1
27843: PPUSH
27844: LD_VAR 0 2
27848: PPUSH
27849: LD_VAR 0 3
27853: PPUSH
27854: LD_VAR 0 4
27858: PPUSH
27859: LD_VAR 0 5
27863: PPUSH
27864: LD_VAR 0 6
27868: PPUSH
27869: LD_VAR 0 7
27873: PPUSH
27874: LD_VAR 0 8
27878: PPUSH
27879: LD_VAR 0 9
27883: PPUSH
27884: LD_VAR 0 10
27888: PPUSH
27889: LD_VAR 0 11
27893: PPUSH
27894: CALL 18123 0 11
27898: GO 27901
27900: POP
// end ;
27901: PPOPN 11
27903: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
27904: LD_VAR 0 1
27908: PPUSH
27909: LD_VAR 0 2
27913: PPUSH
27914: LD_VAR 0 3
27918: PPUSH
27919: LD_VAR 0 4
27923: PPUSH
27924: LD_VAR 0 5
27928: PPUSH
27929: CALL 21620 0 5
// end ; end_of_file
27933: PPOPN 5
27935: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
27936: LD_VAR 0 1
27940: PPUSH
27941: LD_VAR 0 2
27945: PPUSH
27946: LD_VAR 0 3
27950: PPUSH
27951: LD_VAR 0 4
27955: PPUSH
27956: LD_VAR 0 5
27960: PPUSH
27961: LD_VAR 0 6
27965: PPUSH
27966: CALL 5663 0 6
// end ;
27970: PPOPN 6
27972: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
27973: LD_INT 0
27975: PPUSH
// begin if not units then
27976: LD_VAR 0 1
27980: NOT
27981: IFFALSE 27985
// exit ;
27983: GO 28019
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
27985: LD_VAR 0 1
27989: PPUSH
27990: LD_VAR 0 2
27994: PPUSH
27995: LD_VAR 0 3
27999: PPUSH
28000: LD_VAR 0 4
28004: PPUSH
28005: LD_VAR 0 5
28009: PPUSH
28010: LD_VAR 0 6
28014: PPUSH
28015: CALL 27746 0 6
// end ;
28019: PPOPN 7
28021: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
28022: CALL 5550 0 0
// end ; end_of_file end_of_file
28026: PPOPN 1
28028: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28029: LD_INT 0
28031: PPUSH
28032: PPUSH
// if exist_mode then
28033: LD_VAR 0 2
28037: IFFALSE 28083
// begin unit := CreateCharacter ( prefix & ident ) ;
28039: LD_ADDR_VAR 0 5
28043: PUSH
28044: LD_VAR 0 3
28048: PUSH
28049: LD_VAR 0 1
28053: STR
28054: PPUSH
28055: CALL_OW 34
28059: ST_TO_ADDR
// if unit then
28060: LD_VAR 0 5
28064: IFFALSE 28081
// DeleteCharacters ( prefix & ident ) ;
28066: LD_VAR 0 3
28070: PUSH
28071: LD_VAR 0 1
28075: STR
28076: PPUSH
28077: CALL_OW 40
// end else
28081: GO 28098
// unit := NewCharacter ( ident ) ;
28083: LD_ADDR_VAR 0 5
28087: PUSH
28088: LD_VAR 0 1
28092: PPUSH
28093: CALL_OW 25
28097: ST_TO_ADDR
// result := unit ;
28098: LD_ADDR_VAR 0 4
28102: PUSH
28103: LD_VAR 0 5
28107: ST_TO_ADDR
// end ;
28108: LD_VAR 0 4
28112: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
28113: LD_INT 0
28115: PPUSH
28116: PPUSH
// if exist_mode then
28117: LD_VAR 0 2
28121: IFFALSE 28146
// unit := CreateCharacter ( prefix & ident ) else
28123: LD_ADDR_VAR 0 5
28127: PUSH
28128: LD_VAR 0 3
28132: PUSH
28133: LD_VAR 0 1
28137: STR
28138: PPUSH
28139: CALL_OW 34
28143: ST_TO_ADDR
28144: GO 28161
// unit := NewCharacter ( ident ) ;
28146: LD_ADDR_VAR 0 5
28150: PUSH
28151: LD_VAR 0 1
28155: PPUSH
28156: CALL_OW 25
28160: ST_TO_ADDR
// result := unit ;
28161: LD_ADDR_VAR 0 4
28165: PUSH
28166: LD_VAR 0 5
28170: ST_TO_ADDR
// end ;
28171: LD_VAR 0 4
28175: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28176: LD_INT 0
28178: PPUSH
28179: PPUSH
// if not side or not nation then
28180: LD_VAR 0 1
28184: NOT
28185: IFTRUE 28194
28187: PUSH
28188: LD_VAR 0 2
28192: NOT
28193: OR
28194: IFFALSE 28198
// exit ;
28196: GO 28992
// case nation of nation_american :
28198: LD_VAR 0 2
28202: PUSH
28203: LD_INT 1
28205: DOUBLE
28206: EQUAL
28207: IFTRUE 28211
28209: GO 28433
28211: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
28212: LD_ADDR_VAR 0 4
28216: PUSH
28217: LD_INT 35
28219: PUSH
28220: LD_INT 45
28222: PUSH
28223: LD_INT 46
28225: PUSH
28226: LD_INT 47
28228: PUSH
28229: LD_INT 82
28231: PUSH
28232: LD_INT 83
28234: PUSH
28235: LD_INT 84
28237: PUSH
28238: LD_INT 85
28240: PUSH
28241: LD_INT 86
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: LD_INT 6
28252: PUSH
28253: LD_INT 15
28255: PUSH
28256: LD_INT 16
28258: PUSH
28259: LD_INT 7
28261: PUSH
28262: LD_INT 12
28264: PUSH
28265: LD_INT 13
28267: PUSH
28268: LD_INT 10
28270: PUSH
28271: LD_INT 14
28273: PUSH
28274: LD_INT 20
28276: PUSH
28277: LD_INT 21
28279: PUSH
28280: LD_INT 22
28282: PUSH
28283: LD_INT 25
28285: PUSH
28286: LD_INT 32
28288: PUSH
28289: LD_INT 27
28291: PUSH
28292: LD_INT 36
28294: PUSH
28295: LD_INT 69
28297: PUSH
28298: LD_INT 39
28300: PUSH
28301: LD_INT 34
28303: PUSH
28304: LD_INT 40
28306: PUSH
28307: LD_INT 48
28309: PUSH
28310: LD_INT 49
28312: PUSH
28313: LD_INT 50
28315: PUSH
28316: LD_INT 51
28318: PUSH
28319: LD_INT 52
28321: PUSH
28322: LD_INT 53
28324: PUSH
28325: LD_INT 54
28327: PUSH
28328: LD_INT 55
28330: PUSH
28331: LD_INT 56
28333: PUSH
28334: LD_INT 57
28336: PUSH
28337: LD_INT 58
28339: PUSH
28340: LD_INT 59
28342: PUSH
28343: LD_INT 60
28345: PUSH
28346: LD_INT 61
28348: PUSH
28349: LD_INT 62
28351: PUSH
28352: LD_INT 80
28354: PUSH
28355: LD_INT 82
28357: PUSH
28358: LD_INT 83
28360: PUSH
28361: LD_INT 84
28363: PUSH
28364: LD_INT 85
28366: PUSH
28367: LD_INT 86
28369: PUSH
28370: LD_INT 90
28372: PUSH
28373: LD_INT 93
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: ST_TO_ADDR
28431: GO 28914
28433: LD_INT 2
28435: DOUBLE
28436: EQUAL
28437: IFTRUE 28441
28439: GO 28675
28441: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
28442: LD_ADDR_VAR 0 4
28446: PUSH
28447: LD_INT 35
28449: PUSH
28450: LD_INT 45
28452: PUSH
28453: LD_INT 46
28455: PUSH
28456: LD_INT 47
28458: PUSH
28459: LD_INT 82
28461: PUSH
28462: LD_INT 83
28464: PUSH
28465: LD_INT 84
28467: PUSH
28468: LD_INT 85
28470: PUSH
28471: LD_INT 87
28473: PUSH
28474: LD_INT 70
28476: PUSH
28477: LD_INT 1
28479: PUSH
28480: LD_INT 11
28482: PUSH
28483: LD_INT 3
28485: PUSH
28486: LD_INT 4
28488: PUSH
28489: LD_INT 5
28491: PUSH
28492: LD_INT 6
28494: PUSH
28495: LD_INT 15
28497: PUSH
28498: LD_INT 18
28500: PUSH
28501: LD_INT 7
28503: PUSH
28504: LD_INT 17
28506: PUSH
28507: LD_INT 8
28509: PUSH
28510: LD_INT 20
28512: PUSH
28513: LD_INT 21
28515: PUSH
28516: LD_INT 22
28518: PUSH
28519: LD_INT 72
28521: PUSH
28522: LD_INT 26
28524: PUSH
28525: LD_INT 69
28527: PUSH
28528: LD_INT 39
28530: PUSH
28531: LD_INT 40
28533: PUSH
28534: LD_INT 41
28536: PUSH
28537: LD_INT 42
28539: PUSH
28540: LD_INT 43
28542: PUSH
28543: LD_INT 48
28545: PUSH
28546: LD_INT 49
28548: PUSH
28549: LD_INT 50
28551: PUSH
28552: LD_INT 51
28554: PUSH
28555: LD_INT 52
28557: PUSH
28558: LD_INT 53
28560: PUSH
28561: LD_INT 54
28563: PUSH
28564: LD_INT 55
28566: PUSH
28567: LD_INT 56
28569: PUSH
28570: LD_INT 60
28572: PUSH
28573: LD_INT 61
28575: PUSH
28576: LD_INT 62
28578: PUSH
28579: LD_INT 66
28581: PUSH
28582: LD_INT 67
28584: PUSH
28585: LD_INT 68
28587: PUSH
28588: LD_INT 81
28590: PUSH
28591: LD_INT 82
28593: PUSH
28594: LD_INT 83
28596: PUSH
28597: LD_INT 84
28599: PUSH
28600: LD_INT 85
28602: PUSH
28603: LD_INT 87
28605: PUSH
28606: LD_INT 88
28608: PUSH
28609: LD_INT 92
28611: PUSH
28612: LD_INT 94
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: ST_TO_ADDR
28673: GO 28914
28675: LD_INT 3
28677: DOUBLE
28678: EQUAL
28679: IFTRUE 28683
28681: GO 28913
28683: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
28684: LD_ADDR_VAR 0 4
28688: PUSH
28689: LD_INT 46
28691: PUSH
28692: LD_INT 47
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: LD_INT 2
28700: PUSH
28701: LD_INT 82
28703: PUSH
28704: LD_INT 83
28706: PUSH
28707: LD_INT 84
28709: PUSH
28710: LD_INT 85
28712: PUSH
28713: LD_INT 86
28715: PUSH
28716: LD_INT 11
28718: PUSH
28719: LD_INT 9
28721: PUSH
28722: LD_INT 20
28724: PUSH
28725: LD_INT 19
28727: PUSH
28728: LD_INT 21
28730: PUSH
28731: LD_INT 24
28733: PUSH
28734: LD_INT 22
28736: PUSH
28737: LD_INT 25
28739: PUSH
28740: LD_INT 28
28742: PUSH
28743: LD_INT 29
28745: PUSH
28746: LD_INT 30
28748: PUSH
28749: LD_INT 31
28751: PUSH
28752: LD_INT 37
28754: PUSH
28755: LD_INT 38
28757: PUSH
28758: LD_INT 32
28760: PUSH
28761: LD_INT 27
28763: PUSH
28764: LD_INT 33
28766: PUSH
28767: LD_INT 69
28769: PUSH
28770: LD_INT 39
28772: PUSH
28773: LD_INT 34
28775: PUSH
28776: LD_INT 40
28778: PUSH
28779: LD_INT 71
28781: PUSH
28782: LD_INT 23
28784: PUSH
28785: LD_INT 44
28787: PUSH
28788: LD_INT 48
28790: PUSH
28791: LD_INT 49
28793: PUSH
28794: LD_INT 50
28796: PUSH
28797: LD_INT 51
28799: PUSH
28800: LD_INT 52
28802: PUSH
28803: LD_INT 53
28805: PUSH
28806: LD_INT 54
28808: PUSH
28809: LD_INT 55
28811: PUSH
28812: LD_INT 56
28814: PUSH
28815: LD_INT 57
28817: PUSH
28818: LD_INT 58
28820: PUSH
28821: LD_INT 59
28823: PUSH
28824: LD_INT 63
28826: PUSH
28827: LD_INT 64
28829: PUSH
28830: LD_INT 65
28832: PUSH
28833: LD_INT 82
28835: PUSH
28836: LD_INT 83
28838: PUSH
28839: LD_INT 84
28841: PUSH
28842: LD_INT 85
28844: PUSH
28845: LD_INT 86
28847: PUSH
28848: LD_INT 89
28850: PUSH
28851: LD_INT 91
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: ST_TO_ADDR
28911: GO 28914
28913: POP
// if state > - 1 and state < 3 then
28914: LD_VAR 0 3
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: GREATER
28923: IFFALSE 28935
28925: PUSH
28926: LD_VAR 0 3
28930: PUSH
28931: LD_INT 3
28933: LESS
28934: AND
28935: IFFALSE 28992
// for i in result do
28937: LD_ADDR_VAR 0 5
28941: PUSH
28942: LD_VAR 0 4
28946: PUSH
28947: FOR_IN
28948: IFFALSE 28990
// if GetTech ( i , side ) <> state then
28950: LD_VAR 0 5
28954: PPUSH
28955: LD_VAR 0 1
28959: PPUSH
28960: CALL_OW 321
28964: PUSH
28965: LD_VAR 0 3
28969: NONEQUAL
28970: IFFALSE 28988
// result := result diff i ;
28972: LD_ADDR_VAR 0 4
28976: PUSH
28977: LD_VAR 0 4
28981: PUSH
28982: LD_VAR 0 5
28986: DIFF
28987: ST_TO_ADDR
28988: GO 28947
28990: POP
28991: POP
// end ;
28992: LD_VAR 0 4
28996: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28997: LD_INT 0
28999: PPUSH
29000: PPUSH
29001: PPUSH
// result := true ;
29002: LD_ADDR_VAR 0 3
29006: PUSH
29007: LD_INT 1
29009: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29010: LD_ADDR_VAR 0 5
29014: PUSH
29015: LD_VAR 0 2
29019: PPUSH
29020: CALL_OW 480
29024: ST_TO_ADDR
// if not tmp then
29025: LD_VAR 0 5
29029: NOT
29030: IFFALSE 29034
// exit ;
29032: GO 29083
// for i in tmp do
29034: LD_ADDR_VAR 0 4
29038: PUSH
29039: LD_VAR 0 5
29043: PUSH
29044: FOR_IN
29045: IFFALSE 29081
// if GetTech ( i , side ) <> state_researched then
29047: LD_VAR 0 4
29051: PPUSH
29052: LD_VAR 0 1
29056: PPUSH
29057: CALL_OW 321
29061: PUSH
29062: LD_INT 2
29064: NONEQUAL
29065: IFFALSE 29079
// begin result := false ;
29067: LD_ADDR_VAR 0 3
29071: PUSH
29072: LD_INT 0
29074: ST_TO_ADDR
// exit ;
29075: POP
29076: POP
29077: GO 29083
// end ;
29079: GO 29044
29081: POP
29082: POP
// end ;
29083: LD_VAR 0 3
29087: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29088: LD_INT 0
29090: PPUSH
29091: PPUSH
29092: PPUSH
29093: PPUSH
29094: PPUSH
29095: PPUSH
29096: PPUSH
29097: PPUSH
29098: PPUSH
29099: PPUSH
29100: PPUSH
29101: PPUSH
29102: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29103: LD_VAR 0 1
29107: NOT
29108: IFTRUE 29125
29110: PUSH
29111: LD_VAR 0 1
29115: PPUSH
29116: CALL_OW 257
29120: PUSH
29121: LD_INT 9
29123: NONEQUAL
29124: OR
29125: IFFALSE 29129
// exit ;
29127: GO 29708
// side := GetSide ( unit ) ;
29129: LD_ADDR_VAR 0 9
29133: PUSH
29134: LD_VAR 0 1
29138: PPUSH
29139: CALL_OW 255
29143: ST_TO_ADDR
// tech_space := tech_spacanom ;
29144: LD_ADDR_VAR 0 12
29148: PUSH
29149: LD_INT 29
29151: ST_TO_ADDR
// tech_time := tech_taurad ;
29152: LD_ADDR_VAR 0 13
29156: PUSH
29157: LD_INT 28
29159: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29160: LD_ADDR_VAR 0 11
29164: PUSH
29165: LD_VAR 0 1
29169: PPUSH
29170: CALL_OW 310
29174: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29175: LD_VAR 0 11
29179: PPUSH
29180: CALL_OW 247
29184: PUSH
29185: LD_INT 2
29187: EQUAL
29188: IFFALSE 29192
// exit ;
29190: GO 29708
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29192: LD_ADDR_VAR 0 8
29196: PUSH
29197: LD_INT 81
29199: PUSH
29200: LD_VAR 0 9
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 3
29211: PUSH
29212: LD_INT 21
29214: PUSH
29215: LD_INT 3
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PPUSH
29230: CALL_OW 69
29234: ST_TO_ADDR
// if not tmp then
29235: LD_VAR 0 8
29239: NOT
29240: IFFALSE 29244
// exit ;
29242: GO 29708
// if in_unit then
29244: LD_VAR 0 11
29248: IFFALSE 29272
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29250: LD_ADDR_VAR 0 10
29254: PUSH
29255: LD_VAR 0 8
29259: PPUSH
29260: LD_VAR 0 11
29264: PPUSH
29265: CALL_OW 74
29269: ST_TO_ADDR
29270: GO 29292
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29272: LD_ADDR_VAR 0 10
29276: PUSH
29277: LD_VAR 0 8
29281: PPUSH
29282: LD_VAR 0 1
29286: PPUSH
29287: CALL_OW 74
29291: ST_TO_ADDR
// if not enemy then
29292: LD_VAR 0 10
29296: NOT
29297: IFFALSE 29301
// exit ;
29299: GO 29708
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29301: LD_VAR 0 11
29305: IFFALSE 29327
29307: PUSH
29308: LD_VAR 0 11
29312: PPUSH
29313: LD_VAR 0 10
29317: PPUSH
29318: CALL_OW 296
29322: PUSH
29323: LD_INT 13
29325: GREATER
29326: AND
29327: IFTRUE 29349
29329: PUSH
29330: LD_VAR 0 1
29334: PPUSH
29335: LD_VAR 0 10
29339: PPUSH
29340: CALL_OW 296
29344: PUSH
29345: LD_INT 12
29347: GREATER
29348: OR
29349: IFFALSE 29353
// exit ;
29351: GO 29708
// missile := [ 1 ] ;
29353: LD_ADDR_VAR 0 14
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: EMPTY
29362: LIST
29363: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29364: LD_VAR 0 9
29368: PPUSH
29369: LD_VAR 0 12
29373: PPUSH
29374: CALL_OW 325
29378: IFFALSE 29407
// missile := Replace ( missile , missile + 1 , 2 ) ;
29380: LD_ADDR_VAR 0 14
29384: PUSH
29385: LD_VAR 0 14
29389: PPUSH
29390: LD_VAR 0 14
29394: PUSH
29395: LD_INT 1
29397: PLUS
29398: PPUSH
29399: LD_INT 2
29401: PPUSH
29402: CALL_OW 1
29406: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29407: LD_VAR 0 9
29411: PPUSH
29412: LD_VAR 0 13
29416: PPUSH
29417: CALL_OW 325
29421: IFFALSE 29445
29423: PUSH
29424: LD_VAR 0 10
29428: PPUSH
29429: CALL_OW 255
29433: PPUSH
29434: LD_VAR 0 13
29438: PPUSH
29439: CALL_OW 325
29443: NOT
29444: AND
29445: IFFALSE 29474
// missile := Replace ( missile , missile + 1 , 3 ) ;
29447: LD_ADDR_VAR 0 14
29451: PUSH
29452: LD_VAR 0 14
29456: PPUSH
29457: LD_VAR 0 14
29461: PUSH
29462: LD_INT 1
29464: PLUS
29465: PPUSH
29466: LD_INT 3
29468: PPUSH
29469: CALL_OW 1
29473: ST_TO_ADDR
// if missile < 2 then
29474: LD_VAR 0 14
29478: PUSH
29479: LD_INT 2
29481: LESS
29482: IFFALSE 29486
// exit ;
29484: GO 29708
// x := GetX ( enemy ) ;
29486: LD_ADDR_VAR 0 4
29490: PUSH
29491: LD_VAR 0 10
29495: PPUSH
29496: CALL_OW 250
29500: ST_TO_ADDR
// y := GetY ( enemy ) ;
29501: LD_ADDR_VAR 0 5
29505: PUSH
29506: LD_VAR 0 10
29510: PPUSH
29511: CALL_OW 251
29515: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29516: LD_ADDR_VAR 0 6
29520: PUSH
29521: LD_VAR 0 4
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PPUSH
29530: LD_INT 1
29532: PPUSH
29533: CALL_OW 12
29537: PLUS
29538: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29539: LD_ADDR_VAR 0 7
29543: PUSH
29544: LD_VAR 0 5
29548: PUSH
29549: LD_INT 1
29551: NEG
29552: PPUSH
29553: LD_INT 1
29555: PPUSH
29556: CALL_OW 12
29560: PLUS
29561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29562: LD_VAR 0 6
29566: PPUSH
29567: LD_VAR 0 7
29571: PPUSH
29572: CALL_OW 488
29576: NOT
29577: IFFALSE 29599
// begin _x := x ;
29579: LD_ADDR_VAR 0 6
29583: PUSH
29584: LD_VAR 0 4
29588: ST_TO_ADDR
// _y := y ;
29589: LD_ADDR_VAR 0 7
29593: PUSH
29594: LD_VAR 0 5
29598: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29599: LD_ADDR_VAR 0 3
29603: PUSH
29604: LD_INT 1
29606: PPUSH
29607: LD_VAR 0 14
29611: PPUSH
29612: CALL_OW 12
29616: ST_TO_ADDR
// case i of 1 :
29617: LD_VAR 0 3
29621: PUSH
29622: LD_INT 1
29624: DOUBLE
29625: EQUAL
29626: IFTRUE 29630
29628: GO 29647
29630: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29631: LD_VAR 0 1
29635: PPUSH
29636: LD_VAR 0 10
29640: PPUSH
29641: CALL_OW 115
29645: GO 29708
29647: LD_INT 2
29649: DOUBLE
29650: EQUAL
29651: IFTRUE 29655
29653: GO 29677
29655: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29656: LD_VAR 0 1
29660: PPUSH
29661: LD_VAR 0 6
29665: PPUSH
29666: LD_VAR 0 7
29670: PPUSH
29671: CALL_OW 153
29675: GO 29708
29677: LD_INT 3
29679: DOUBLE
29680: EQUAL
29681: IFTRUE 29685
29683: GO 29707
29685: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29686: LD_VAR 0 1
29690: PPUSH
29691: LD_VAR 0 6
29695: PPUSH
29696: LD_VAR 0 7
29700: PPUSH
29701: CALL_OW 154
29705: GO 29708
29707: POP
// end ;
29708: LD_VAR 0 2
29712: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29713: LD_INT 0
29715: PPUSH
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
// if not unit or not building then
29721: LD_VAR 0 1
29725: NOT
29726: IFTRUE 29735
29728: PUSH
29729: LD_VAR 0 2
29733: NOT
29734: OR
29735: IFFALSE 29739
// exit ;
29737: GO 29897
// x := GetX ( building ) ;
29739: LD_ADDR_VAR 0 5
29743: PUSH
29744: LD_VAR 0 2
29748: PPUSH
29749: CALL_OW 250
29753: ST_TO_ADDR
// y := GetY ( building ) ;
29754: LD_ADDR_VAR 0 6
29758: PUSH
29759: LD_VAR 0 2
29763: PPUSH
29764: CALL_OW 251
29768: ST_TO_ADDR
// for i := 0 to 5 do
29769: LD_ADDR_VAR 0 4
29773: PUSH
29774: DOUBLE
29775: LD_INT 0
29777: DEC
29778: ST_TO_ADDR
29779: LD_INT 5
29781: PUSH
29782: FOR_TO
29783: IFFALSE 29895
// begin _x := ShiftX ( x , i , 3 ) ;
29785: LD_ADDR_VAR 0 7
29789: PUSH
29790: LD_VAR 0 5
29794: PPUSH
29795: LD_VAR 0 4
29799: PPUSH
29800: LD_INT 3
29802: PPUSH
29803: CALL_OW 272
29807: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29808: LD_ADDR_VAR 0 8
29812: PUSH
29813: LD_VAR 0 6
29817: PPUSH
29818: LD_VAR 0 4
29822: PPUSH
29823: LD_INT 3
29825: PPUSH
29826: CALL_OW 273
29830: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29831: LD_VAR 0 7
29835: PPUSH
29836: LD_VAR 0 8
29840: PPUSH
29841: CALL_OW 488
29845: NOT
29846: IFFALSE 29850
// continue ;
29848: GO 29782
// if HexInfo ( _x , _y ) = 0 then
29850: LD_VAR 0 7
29854: PPUSH
29855: LD_VAR 0 8
29859: PPUSH
29860: CALL_OW 428
29864: PUSH
29865: LD_INT 0
29867: EQUAL
29868: IFFALSE 29893
// begin ComMoveXY ( unit , _x , _y ) ;
29870: LD_VAR 0 1
29874: PPUSH
29875: LD_VAR 0 7
29879: PPUSH
29880: LD_VAR 0 8
29884: PPUSH
29885: CALL_OW 111
// exit ;
29889: POP
29890: POP
29891: GO 29897
// end ; end ;
29893: GO 29782
29895: POP
29896: POP
// end ;
29897: LD_VAR 0 3
29901: RET
// export function ScanBase ( side , base_area ) ; begin
29902: LD_INT 0
29904: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29905: LD_ADDR_VAR 0 3
29909: PUSH
29910: LD_VAR 0 2
29914: PPUSH
29915: LD_INT 81
29917: PUSH
29918: LD_VAR 0 1
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PPUSH
29927: CALL_OW 70
29931: ST_TO_ADDR
// end ;
29932: LD_VAR 0 3
29936: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29937: LD_INT 0
29939: PPUSH
29940: PPUSH
29941: PPUSH
29942: PPUSH
// result := false ;
29943: LD_ADDR_VAR 0 2
29947: PUSH
29948: LD_INT 0
29950: ST_TO_ADDR
// side := GetSide ( unit ) ;
29951: LD_ADDR_VAR 0 3
29955: PUSH
29956: LD_VAR 0 1
29960: PPUSH
29961: CALL_OW 255
29965: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29966: LD_ADDR_VAR 0 4
29970: PUSH
29971: LD_VAR 0 1
29975: PPUSH
29976: CALL_OW 248
29980: ST_TO_ADDR
// case nat of 1 :
29981: LD_VAR 0 4
29985: PUSH
29986: LD_INT 1
29988: DOUBLE
29989: EQUAL
29990: IFTRUE 29994
29992: GO 30005
29994: POP
// tech := tech_lassight ; 2 :
29995: LD_ADDR_VAR 0 5
29999: PUSH
30000: LD_INT 12
30002: ST_TO_ADDR
30003: GO 30044
30005: LD_INT 2
30007: DOUBLE
30008: EQUAL
30009: IFTRUE 30013
30011: GO 30024
30013: POP
// tech := tech_mortar ; 3 :
30014: LD_ADDR_VAR 0 5
30018: PUSH
30019: LD_INT 41
30021: ST_TO_ADDR
30022: GO 30044
30024: LD_INT 3
30026: DOUBLE
30027: EQUAL
30028: IFTRUE 30032
30030: GO 30043
30032: POP
// tech := tech_bazooka ; end ;
30033: LD_ADDR_VAR 0 5
30037: PUSH
30038: LD_INT 44
30040: ST_TO_ADDR
30041: GO 30044
30043: POP
// if Researched ( side , tech ) then
30044: LD_VAR 0 3
30048: PPUSH
30049: LD_VAR 0 5
30053: PPUSH
30054: CALL_OW 325
30058: IFFALSE 30085
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30060: LD_ADDR_VAR 0 2
30064: PUSH
30065: LD_INT 5
30067: PUSH
30068: LD_INT 8
30070: PUSH
30071: LD_INT 9
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: LIST
30078: PUSH
30079: LD_VAR 0 4
30083: ARRAY
30084: ST_TO_ADDR
// end ;
30085: LD_VAR 0 2
30089: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30090: LD_INT 0
30092: PPUSH
30093: PPUSH
30094: PPUSH
// if not mines then
30095: LD_VAR 0 2
30099: NOT
30100: IFFALSE 30104
// exit ;
30102: GO 30248
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30104: LD_ADDR_VAR 0 5
30108: PUSH
30109: LD_INT 81
30111: PUSH
30112: LD_VAR 0 1
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 3
30123: PUSH
30124: LD_INT 21
30126: PUSH
30127: LD_INT 3
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PPUSH
30142: CALL_OW 69
30146: ST_TO_ADDR
// for i in mines do
30147: LD_ADDR_VAR 0 4
30151: PUSH
30152: LD_VAR 0 2
30156: PUSH
30157: FOR_IN
30158: IFFALSE 30246
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30160: LD_VAR 0 4
30164: PUSH
30165: LD_INT 1
30167: ARRAY
30168: PPUSH
30169: LD_VAR 0 4
30173: PUSH
30174: LD_INT 2
30176: ARRAY
30177: PPUSH
30178: CALL_OW 458
30182: NOT
30183: IFFALSE 30187
// continue ;
30185: GO 30157
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30187: LD_VAR 0 4
30191: PUSH
30192: LD_INT 1
30194: ARRAY
30195: PPUSH
30196: LD_VAR 0 4
30200: PUSH
30201: LD_INT 2
30203: ARRAY
30204: PPUSH
30205: CALL_OW 428
30209: PUSH
30210: LD_VAR 0 5
30214: IN
30215: IFFALSE 30244
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30217: LD_VAR 0 4
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: PPUSH
30226: LD_VAR 0 4
30230: PUSH
30231: LD_INT 2
30233: ARRAY
30234: PPUSH
30235: LD_VAR 0 1
30239: PPUSH
30240: CALL_OW 456
// end ;
30244: GO 30157
30246: POP
30247: POP
// end ;
30248: LD_VAR 0 3
30252: RET
// export function Count ( array ) ; begin
30253: LD_INT 0
30255: PPUSH
// result := array + 0 ;
30256: LD_ADDR_VAR 0 2
30260: PUSH
30261: LD_VAR 0 1
30265: PUSH
30266: LD_INT 0
30268: PLUS
30269: ST_TO_ADDR
// end ;
30270: LD_VAR 0 2
30274: RET
// export function IsEmpty ( building ) ; begin
30275: LD_INT 0
30277: PPUSH
// if not building then
30278: LD_VAR 0 1
30282: NOT
30283: IFFALSE 30287
// exit ;
30285: GO 30330
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30287: LD_ADDR_VAR 0 2
30291: PUSH
30292: LD_VAR 0 1
30296: PUSH
30297: LD_INT 22
30299: PUSH
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL_OW 255
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 58
30316: PUSH
30317: EMPTY
30318: LIST
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PPUSH
30324: CALL_OW 69
30328: IN
30329: ST_TO_ADDR
// end ;
30330: LD_VAR 0 2
30334: RET
// export function IsNotFull ( building ) ; var places ; begin
30335: LD_INT 0
30337: PPUSH
30338: PPUSH
// if not building then
30339: LD_VAR 0 1
30343: NOT
30344: IFFALSE 30348
// exit ;
30346: GO 30376
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30348: LD_ADDR_VAR 0 2
30352: PUSH
30353: LD_VAR 0 1
30357: PPUSH
30358: LD_INT 3
30360: PUSH
30361: LD_INT 62
30363: PUSH
30364: EMPTY
30365: LIST
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PPUSH
30371: CALL_OW 72
30375: ST_TO_ADDR
// end ;
30376: LD_VAR 0 2
30380: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30381: LD_INT 0
30383: PPUSH
30384: PPUSH
30385: PPUSH
30386: PPUSH
// tmp := [ ] ;
30387: LD_ADDR_VAR 0 3
30391: PUSH
30392: EMPTY
30393: ST_TO_ADDR
// list := [ ] ;
30394: LD_ADDR_VAR 0 5
30398: PUSH
30399: EMPTY
30400: ST_TO_ADDR
// for i = 16 to 25 do
30401: LD_ADDR_VAR 0 4
30405: PUSH
30406: DOUBLE
30407: LD_INT 16
30409: DEC
30410: ST_TO_ADDR
30411: LD_INT 25
30413: PUSH
30414: FOR_TO
30415: IFFALSE 30488
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30417: LD_ADDR_VAR 0 3
30421: PUSH
30422: LD_VAR 0 3
30426: PUSH
30427: LD_INT 22
30429: PUSH
30430: LD_VAR 0 1
30434: PPUSH
30435: CALL_OW 255
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 91
30446: PUSH
30447: LD_VAR 0 1
30451: PUSH
30452: LD_INT 6
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 30
30462: PUSH
30463: LD_VAR 0 4
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: LIST
30476: PUSH
30477: EMPTY
30478: LIST
30479: PPUSH
30480: CALL_OW 69
30484: ADD
30485: ST_TO_ADDR
30486: GO 30414
30488: POP
30489: POP
// for i = 1 to tmp do
30490: LD_ADDR_VAR 0 4
30494: PUSH
30495: DOUBLE
30496: LD_INT 1
30498: DEC
30499: ST_TO_ADDR
30500: LD_VAR 0 3
30504: PUSH
30505: FOR_TO
30506: IFFALSE 30594
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30508: LD_ADDR_VAR 0 5
30512: PUSH
30513: LD_VAR 0 5
30517: PUSH
30518: LD_VAR 0 3
30522: PUSH
30523: LD_VAR 0 4
30527: ARRAY
30528: PPUSH
30529: CALL_OW 266
30533: PUSH
30534: LD_VAR 0 3
30538: PUSH
30539: LD_VAR 0 4
30543: ARRAY
30544: PPUSH
30545: CALL_OW 250
30549: PUSH
30550: LD_VAR 0 3
30554: PUSH
30555: LD_VAR 0 4
30559: ARRAY
30560: PPUSH
30561: CALL_OW 251
30565: PUSH
30566: LD_VAR 0 3
30570: PUSH
30571: LD_VAR 0 4
30575: ARRAY
30576: PPUSH
30577: CALL_OW 254
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: PUSH
30588: EMPTY
30589: LIST
30590: ADD
30591: ST_TO_ADDR
30592: GO 30505
30594: POP
30595: POP
// result := list ;
30596: LD_ADDR_VAR 0 2
30600: PUSH
30601: LD_VAR 0 5
30605: ST_TO_ADDR
// end ;
30606: LD_VAR 0 2
30610: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30611: LD_INT 0
30613: PPUSH
30614: PPUSH
30615: PPUSH
30616: PPUSH
30617: PPUSH
30618: PPUSH
30619: PPUSH
// if not factory then
30620: LD_VAR 0 1
30624: NOT
30625: IFFALSE 30629
// exit ;
30627: GO 31232
// if control = control_apeman then
30629: LD_VAR 0 4
30633: PUSH
30634: LD_INT 5
30636: EQUAL
30637: IFFALSE 30746
// begin tmp := UnitsInside ( factory ) ;
30639: LD_ADDR_VAR 0 8
30643: PUSH
30644: LD_VAR 0 1
30648: PPUSH
30649: CALL_OW 313
30653: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30654: LD_VAR 0 8
30658: PPUSH
30659: LD_INT 25
30661: PUSH
30662: LD_INT 12
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PPUSH
30669: CALL_OW 72
30673: NOT
30674: IFFALSE 30684
// control := control_manual ;
30676: LD_ADDR_VAR 0 4
30680: PUSH
30681: LD_INT 1
30683: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30684: LD_ADDR_VAR 0 8
30688: PUSH
30689: LD_VAR 0 1
30693: PPUSH
30694: CALL 30381 0 1
30698: ST_TO_ADDR
// if tmp then
30699: LD_VAR 0 8
30703: IFFALSE 30746
// begin for i in tmp do
30705: LD_ADDR_VAR 0 7
30709: PUSH
30710: LD_VAR 0 8
30714: PUSH
30715: FOR_IN
30716: IFFALSE 30744
// if i [ 1 ] = b_ext_radio then
30718: LD_VAR 0 7
30722: PUSH
30723: LD_INT 1
30725: ARRAY
30726: PUSH
30727: LD_INT 22
30729: EQUAL
30730: IFFALSE 30742
// begin control := control_remote ;
30732: LD_ADDR_VAR 0 4
30736: PUSH
30737: LD_INT 2
30739: ST_TO_ADDR
// break ;
30740: GO 30744
// end ;
30742: GO 30715
30744: POP
30745: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30746: LD_VAR 0 1
30750: PPUSH
30751: LD_VAR 0 2
30755: PPUSH
30756: LD_VAR 0 3
30760: PPUSH
30761: LD_VAR 0 4
30765: PPUSH
30766: LD_VAR 0 5
30770: PPUSH
30771: CALL_OW 448
30775: IFFALSE 30810
// begin result := [ chassis , engine , control , weapon ] ;
30777: LD_ADDR_VAR 0 6
30781: PUSH
30782: LD_VAR 0 2
30786: PUSH
30787: LD_VAR 0 3
30791: PUSH
30792: LD_VAR 0 4
30796: PUSH
30797: LD_VAR 0 5
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: ST_TO_ADDR
// exit ;
30808: GO 31232
// end ; _chassis := AvailableChassisList ( factory ) ;
30810: LD_ADDR_VAR 0 9
30814: PUSH
30815: LD_VAR 0 1
30819: PPUSH
30820: CALL_OW 475
30824: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30825: LD_ADDR_VAR 0 11
30829: PUSH
30830: LD_VAR 0 1
30834: PPUSH
30835: CALL_OW 476
30839: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30840: LD_ADDR_VAR 0 12
30844: PUSH
30845: LD_VAR 0 1
30849: PPUSH
30850: CALL_OW 477
30854: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30855: LD_ADDR_VAR 0 10
30859: PUSH
30860: LD_VAR 0 1
30864: PPUSH
30865: CALL_OW 478
30869: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30870: LD_VAR 0 9
30874: NOT
30875: IFTRUE 30884
30877: PUSH
30878: LD_VAR 0 11
30882: NOT
30883: OR
30884: IFTRUE 30893
30886: PUSH
30887: LD_VAR 0 12
30891: NOT
30892: OR
30893: IFTRUE 30902
30895: PUSH
30896: LD_VAR 0 10
30900: NOT
30901: OR
30902: IFFALSE 30937
// begin result := [ chassis , engine , control , weapon ] ;
30904: LD_ADDR_VAR 0 6
30908: PUSH
30909: LD_VAR 0 2
30913: PUSH
30914: LD_VAR 0 3
30918: PUSH
30919: LD_VAR 0 4
30923: PUSH
30924: LD_VAR 0 5
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: ST_TO_ADDR
// exit ;
30935: GO 31232
// end ; if not chassis in _chassis then
30937: LD_VAR 0 2
30941: PUSH
30942: LD_VAR 0 9
30946: IN
30947: NOT
30948: IFFALSE 30974
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30950: LD_ADDR_VAR 0 2
30954: PUSH
30955: LD_VAR 0 9
30959: PUSH
30960: LD_INT 1
30962: PPUSH
30963: LD_VAR 0 9
30967: PPUSH
30968: CALL_OW 12
30972: ARRAY
30973: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30974: LD_VAR 0 2
30978: PPUSH
30979: LD_VAR 0 3
30983: PPUSH
30984: CALL 31237 0 2
30988: NOT
30989: IFFALSE 31050
// repeat engine := _engine [ 1 ] ;
30991: LD_ADDR_VAR 0 3
30995: PUSH
30996: LD_VAR 0 11
31000: PUSH
31001: LD_INT 1
31003: ARRAY
31004: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31005: LD_ADDR_VAR 0 11
31009: PUSH
31010: LD_VAR 0 11
31014: PPUSH
31015: LD_INT 1
31017: PPUSH
31018: CALL_OW 3
31022: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31023: LD_VAR 0 2
31027: PPUSH
31028: LD_VAR 0 3
31032: PPUSH
31033: CALL 31237 0 2
31037: IFTRUE 31048
31039: PUSH
31040: LD_VAR 0 11
31044: PUSH
31045: EMPTY
31046: EQUAL
31047: OR
31048: IFFALSE 30991
// if not control in _control then
31050: LD_VAR 0 4
31054: PUSH
31055: LD_VAR 0 12
31059: IN
31060: NOT
31061: IFFALSE 31087
// control := _control [ rand ( 1 , _control ) ] ;
31063: LD_ADDR_VAR 0 4
31067: PUSH
31068: LD_VAR 0 12
31072: PUSH
31073: LD_INT 1
31075: PPUSH
31076: LD_VAR 0 12
31080: PPUSH
31081: CALL_OW 12
31085: ARRAY
31086: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31087: LD_VAR 0 2
31091: PPUSH
31092: LD_VAR 0 5
31096: PPUSH
31097: CALL 31459 0 2
31101: NOT
31102: IFFALSE 31163
// repeat weapon := _weapon [ 1 ] ;
31104: LD_ADDR_VAR 0 5
31108: PUSH
31109: LD_VAR 0 10
31113: PUSH
31114: LD_INT 1
31116: ARRAY
31117: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31118: LD_ADDR_VAR 0 10
31122: PUSH
31123: LD_VAR 0 10
31127: PPUSH
31128: LD_INT 1
31130: PPUSH
31131: CALL_OW 3
31135: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31136: LD_VAR 0 2
31140: PPUSH
31141: LD_VAR 0 5
31145: PPUSH
31146: CALL 31459 0 2
31150: IFTRUE 31161
31152: PUSH
31153: LD_VAR 0 10
31157: PUSH
31158: EMPTY
31159: EQUAL
31160: OR
31161: IFFALSE 31104
// result := [ ] ;
31163: LD_ADDR_VAR 0 6
31167: PUSH
31168: EMPTY
31169: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31170: LD_VAR 0 1
31174: PPUSH
31175: LD_VAR 0 2
31179: PPUSH
31180: LD_VAR 0 3
31184: PPUSH
31185: LD_VAR 0 4
31189: PPUSH
31190: LD_VAR 0 5
31194: PPUSH
31195: CALL_OW 448
31199: IFFALSE 31232
// result := [ chassis , engine , control , weapon ] ;
31201: LD_ADDR_VAR 0 6
31205: PUSH
31206: LD_VAR 0 2
31210: PUSH
31211: LD_VAR 0 3
31215: PUSH
31216: LD_VAR 0 4
31220: PUSH
31221: LD_VAR 0 5
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: ST_TO_ADDR
// end ;
31232: LD_VAR 0 6
31236: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31237: LD_INT 0
31239: PPUSH
// if not chassis or not engine then
31240: LD_VAR 0 1
31244: NOT
31245: IFTRUE 31254
31247: PUSH
31248: LD_VAR 0 2
31252: NOT
31253: OR
31254: IFFALSE 31258
// exit ;
31256: GO 31454
// case engine of engine_solar :
31258: LD_VAR 0 2
31262: PUSH
31263: LD_INT 2
31265: DOUBLE
31266: EQUAL
31267: IFTRUE 31271
31269: GO 31309
31271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31272: LD_ADDR_VAR 0 3
31276: PUSH
31277: LD_INT 11
31279: PUSH
31280: LD_INT 12
31282: PUSH
31283: LD_INT 13
31285: PUSH
31286: LD_INT 14
31288: PUSH
31289: LD_INT 1
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: LD_INT 3
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
31307: GO 31438
31309: LD_INT 1
31311: DOUBLE
31312: EQUAL
31313: IFTRUE 31317
31315: GO 31379
31317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31318: LD_ADDR_VAR 0 3
31322: PUSH
31323: LD_INT 11
31325: PUSH
31326: LD_INT 12
31328: PUSH
31329: LD_INT 13
31331: PUSH
31332: LD_INT 14
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: LD_INT 3
31343: PUSH
31344: LD_INT 4
31346: PUSH
31347: LD_INT 5
31349: PUSH
31350: LD_INT 21
31352: PUSH
31353: LD_INT 23
31355: PUSH
31356: LD_INT 22
31358: PUSH
31359: LD_INT 24
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: ST_TO_ADDR
31377: GO 31438
31379: LD_INT 3
31381: DOUBLE
31382: EQUAL
31383: IFTRUE 31387
31385: GO 31437
31387: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31388: LD_ADDR_VAR 0 3
31392: PUSH
31393: LD_INT 13
31395: PUSH
31396: LD_INT 14
31398: PUSH
31399: LD_INT 2
31401: PUSH
31402: LD_INT 3
31404: PUSH
31405: LD_INT 4
31407: PUSH
31408: LD_INT 5
31410: PUSH
31411: LD_INT 21
31413: PUSH
31414: LD_INT 22
31416: PUSH
31417: LD_INT 23
31419: PUSH
31420: LD_INT 24
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: ST_TO_ADDR
31435: GO 31438
31437: POP
// result := ( chassis in result ) ;
31438: LD_ADDR_VAR 0 3
31442: PUSH
31443: LD_VAR 0 1
31447: PUSH
31448: LD_VAR 0 3
31452: IN
31453: ST_TO_ADDR
// end ;
31454: LD_VAR 0 3
31458: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31459: LD_INT 0
31461: PPUSH
// if not chassis or not weapon then
31462: LD_VAR 0 1
31466: NOT
31467: IFTRUE 31476
31469: PUSH
31470: LD_VAR 0 2
31474: NOT
31475: OR
31476: IFFALSE 31480
// exit ;
31478: GO 32540
// case weapon of us_machine_gun :
31480: LD_VAR 0 2
31484: PUSH
31485: LD_INT 2
31487: DOUBLE
31488: EQUAL
31489: IFTRUE 31493
31491: GO 31523
31493: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31494: LD_ADDR_VAR 0 3
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: LD_INT 2
31504: PUSH
31505: LD_INT 3
31507: PUSH
31508: LD_INT 4
31510: PUSH
31511: LD_INT 5
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: ST_TO_ADDR
31521: GO 32524
31523: LD_INT 3
31525: DOUBLE
31526: EQUAL
31527: IFTRUE 31531
31529: GO 31561
31531: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31532: LD_ADDR_VAR 0 3
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: LD_INT 3
31545: PUSH
31546: LD_INT 4
31548: PUSH
31549: LD_INT 5
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: ST_TO_ADDR
31559: GO 32524
31561: LD_INT 11
31563: DOUBLE
31564: EQUAL
31565: IFTRUE 31569
31567: GO 31599
31569: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31570: LD_ADDR_VAR 0 3
31574: PUSH
31575: LD_INT 1
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: LD_INT 3
31583: PUSH
31584: LD_INT 4
31586: PUSH
31587: LD_INT 5
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: ST_TO_ADDR
31597: GO 32524
31599: LD_INT 4
31601: DOUBLE
31602: EQUAL
31603: IFTRUE 31607
31605: GO 31633
31607: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31608: LD_ADDR_VAR 0 3
31612: PUSH
31613: LD_INT 2
31615: PUSH
31616: LD_INT 3
31618: PUSH
31619: LD_INT 4
31621: PUSH
31622: LD_INT 5
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: ST_TO_ADDR
31631: GO 32524
31633: LD_INT 5
31635: DOUBLE
31636: EQUAL
31637: IFTRUE 31641
31639: GO 31667
31641: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31642: LD_ADDR_VAR 0 3
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: LD_INT 3
31652: PUSH
31653: LD_INT 4
31655: PUSH
31656: LD_INT 5
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: ST_TO_ADDR
31665: GO 32524
31667: LD_INT 9
31669: DOUBLE
31670: EQUAL
31671: IFTRUE 31675
31673: GO 31701
31675: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31676: LD_ADDR_VAR 0 3
31680: PUSH
31681: LD_INT 2
31683: PUSH
31684: LD_INT 3
31686: PUSH
31687: LD_INT 4
31689: PUSH
31690: LD_INT 5
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: ST_TO_ADDR
31699: GO 32524
31701: LD_INT 7
31703: DOUBLE
31704: EQUAL
31705: IFTRUE 31709
31707: GO 31735
31709: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31710: LD_ADDR_VAR 0 3
31714: PUSH
31715: LD_INT 2
31717: PUSH
31718: LD_INT 3
31720: PUSH
31721: LD_INT 4
31723: PUSH
31724: LD_INT 5
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: ST_TO_ADDR
31733: GO 32524
31735: LD_INT 12
31737: DOUBLE
31738: EQUAL
31739: IFTRUE 31743
31741: GO 31769
31743: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31744: LD_ADDR_VAR 0 3
31748: PUSH
31749: LD_INT 2
31751: PUSH
31752: LD_INT 3
31754: PUSH
31755: LD_INT 4
31757: PUSH
31758: LD_INT 5
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: ST_TO_ADDR
31767: GO 32524
31769: LD_INT 13
31771: DOUBLE
31772: EQUAL
31773: IFTRUE 31777
31775: GO 31803
31777: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31778: LD_ADDR_VAR 0 3
31782: PUSH
31783: LD_INT 2
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: LD_INT 4
31791: PUSH
31792: LD_INT 5
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: ST_TO_ADDR
31801: GO 32524
31803: LD_INT 14
31805: DOUBLE
31806: EQUAL
31807: IFTRUE 31811
31809: GO 31829
31811: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31812: LD_ADDR_VAR 0 3
31816: PUSH
31817: LD_INT 4
31819: PUSH
31820: LD_INT 5
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: ST_TO_ADDR
31827: GO 32524
31829: LD_INT 6
31831: DOUBLE
31832: EQUAL
31833: IFTRUE 31837
31835: GO 31855
31837: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31838: LD_ADDR_VAR 0 3
31842: PUSH
31843: LD_INT 4
31845: PUSH
31846: LD_INT 5
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: ST_TO_ADDR
31853: GO 32524
31855: LD_INT 10
31857: DOUBLE
31858: EQUAL
31859: IFTRUE 31863
31861: GO 31881
31863: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31864: LD_ADDR_VAR 0 3
31868: PUSH
31869: LD_INT 4
31871: PUSH
31872: LD_INT 5
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: ST_TO_ADDR
31879: GO 32524
31881: LD_INT 22
31883: DOUBLE
31884: EQUAL
31885: IFTRUE 31889
31887: GO 31915
31889: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31890: LD_ADDR_VAR 0 3
31894: PUSH
31895: LD_INT 11
31897: PUSH
31898: LD_INT 12
31900: PUSH
31901: LD_INT 13
31903: PUSH
31904: LD_INT 14
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: ST_TO_ADDR
31913: GO 32524
31915: LD_INT 23
31917: DOUBLE
31918: EQUAL
31919: IFTRUE 31923
31921: GO 31949
31923: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31924: LD_ADDR_VAR 0 3
31928: PUSH
31929: LD_INT 11
31931: PUSH
31932: LD_INT 12
31934: PUSH
31935: LD_INT 13
31937: PUSH
31938: LD_INT 14
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: ST_TO_ADDR
31947: GO 32524
31949: LD_INT 24
31951: DOUBLE
31952: EQUAL
31953: IFTRUE 31957
31955: GO 31983
31957: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31958: LD_ADDR_VAR 0 3
31962: PUSH
31963: LD_INT 11
31965: PUSH
31966: LD_INT 12
31968: PUSH
31969: LD_INT 13
31971: PUSH
31972: LD_INT 14
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: ST_TO_ADDR
31981: GO 32524
31983: LD_INT 30
31985: DOUBLE
31986: EQUAL
31987: IFTRUE 31991
31989: GO 32017
31991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31992: LD_ADDR_VAR 0 3
31996: PUSH
31997: LD_INT 11
31999: PUSH
32000: LD_INT 12
32002: PUSH
32003: LD_INT 13
32005: PUSH
32006: LD_INT 14
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: ST_TO_ADDR
32015: GO 32524
32017: LD_INT 25
32019: DOUBLE
32020: EQUAL
32021: IFTRUE 32025
32023: GO 32043
32025: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32026: LD_ADDR_VAR 0 3
32030: PUSH
32031: LD_INT 13
32033: PUSH
32034: LD_INT 14
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: ST_TO_ADDR
32041: GO 32524
32043: LD_INT 27
32045: DOUBLE
32046: EQUAL
32047: IFTRUE 32051
32049: GO 32069
32051: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32052: LD_ADDR_VAR 0 3
32056: PUSH
32057: LD_INT 13
32059: PUSH
32060: LD_INT 14
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: ST_TO_ADDR
32067: GO 32524
32069: LD_INT 92
32071: DOUBLE
32072: EQUAL
32073: IFTRUE 32077
32075: GO 32103
32077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: LD_INT 11
32085: PUSH
32086: LD_INT 12
32088: PUSH
32089: LD_INT 13
32091: PUSH
32092: LD_INT 14
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: ST_TO_ADDR
32101: GO 32524
32103: LD_INT 28
32105: DOUBLE
32106: EQUAL
32107: IFTRUE 32111
32109: GO 32129
32111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32112: LD_ADDR_VAR 0 3
32116: PUSH
32117: LD_INT 13
32119: PUSH
32120: LD_INT 14
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: ST_TO_ADDR
32127: GO 32524
32129: LD_INT 29
32131: DOUBLE
32132: EQUAL
32133: IFTRUE 32137
32135: GO 32155
32137: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32138: LD_ADDR_VAR 0 3
32142: PUSH
32143: LD_INT 13
32145: PUSH
32146: LD_INT 14
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: ST_TO_ADDR
32153: GO 32524
32155: LD_INT 31
32157: DOUBLE
32158: EQUAL
32159: IFTRUE 32163
32161: GO 32181
32163: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32164: LD_ADDR_VAR 0 3
32168: PUSH
32169: LD_INT 13
32171: PUSH
32172: LD_INT 14
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: ST_TO_ADDR
32179: GO 32524
32181: LD_INT 26
32183: DOUBLE
32184: EQUAL
32185: IFTRUE 32189
32187: GO 32207
32189: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32190: LD_ADDR_VAR 0 3
32194: PUSH
32195: LD_INT 13
32197: PUSH
32198: LD_INT 14
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: ST_TO_ADDR
32205: GO 32524
32207: LD_INT 42
32209: DOUBLE
32210: EQUAL
32211: IFTRUE 32215
32213: GO 32241
32215: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32216: LD_ADDR_VAR 0 3
32220: PUSH
32221: LD_INT 21
32223: PUSH
32224: LD_INT 22
32226: PUSH
32227: LD_INT 23
32229: PUSH
32230: LD_INT 24
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: ST_TO_ADDR
32239: GO 32524
32241: LD_INT 43
32243: DOUBLE
32244: EQUAL
32245: IFTRUE 32249
32247: GO 32275
32249: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32250: LD_ADDR_VAR 0 3
32254: PUSH
32255: LD_INT 21
32257: PUSH
32258: LD_INT 22
32260: PUSH
32261: LD_INT 23
32263: PUSH
32264: LD_INT 24
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: ST_TO_ADDR
32273: GO 32524
32275: LD_INT 44
32277: DOUBLE
32278: EQUAL
32279: IFTRUE 32283
32281: GO 32309
32283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32284: LD_ADDR_VAR 0 3
32288: PUSH
32289: LD_INT 21
32291: PUSH
32292: LD_INT 22
32294: PUSH
32295: LD_INT 23
32297: PUSH
32298: LD_INT 24
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: ST_TO_ADDR
32307: GO 32524
32309: LD_INT 45
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32317
32315: GO 32343
32317: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32318: LD_ADDR_VAR 0 3
32322: PUSH
32323: LD_INT 21
32325: PUSH
32326: LD_INT 22
32328: PUSH
32329: LD_INT 23
32331: PUSH
32332: LD_INT 24
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: ST_TO_ADDR
32341: GO 32524
32343: LD_INT 49
32345: DOUBLE
32346: EQUAL
32347: IFTRUE 32351
32349: GO 32377
32351: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32352: LD_ADDR_VAR 0 3
32356: PUSH
32357: LD_INT 21
32359: PUSH
32360: LD_INT 22
32362: PUSH
32363: LD_INT 23
32365: PUSH
32366: LD_INT 24
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: ST_TO_ADDR
32375: GO 32524
32377: LD_INT 51
32379: DOUBLE
32380: EQUAL
32381: IFTRUE 32385
32383: GO 32411
32385: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32386: LD_ADDR_VAR 0 3
32390: PUSH
32391: LD_INT 21
32393: PUSH
32394: LD_INT 22
32396: PUSH
32397: LD_INT 23
32399: PUSH
32400: LD_INT 24
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: ST_TO_ADDR
32409: GO 32524
32411: LD_INT 52
32413: DOUBLE
32414: EQUAL
32415: IFTRUE 32419
32417: GO 32445
32419: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32420: LD_ADDR_VAR 0 3
32424: PUSH
32425: LD_INT 21
32427: PUSH
32428: LD_INT 22
32430: PUSH
32431: LD_INT 23
32433: PUSH
32434: LD_INT 24
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: ST_TO_ADDR
32443: GO 32524
32445: LD_INT 53
32447: DOUBLE
32448: EQUAL
32449: IFTRUE 32453
32451: GO 32471
32453: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32454: LD_ADDR_VAR 0 3
32458: PUSH
32459: LD_INT 23
32461: PUSH
32462: LD_INT 24
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: ST_TO_ADDR
32469: GO 32524
32471: LD_INT 46
32473: DOUBLE
32474: EQUAL
32475: IFTRUE 32479
32477: GO 32497
32479: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32480: LD_ADDR_VAR 0 3
32484: PUSH
32485: LD_INT 23
32487: PUSH
32488: LD_INT 24
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: ST_TO_ADDR
32495: GO 32524
32497: LD_INT 47
32499: DOUBLE
32500: EQUAL
32501: IFTRUE 32505
32503: GO 32523
32505: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32506: LD_ADDR_VAR 0 3
32510: PUSH
32511: LD_INT 23
32513: PUSH
32514: LD_INT 24
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: ST_TO_ADDR
32521: GO 32524
32523: POP
// result := ( chassis in result ) ;
32524: LD_ADDR_VAR 0 3
32528: PUSH
32529: LD_VAR 0 1
32533: PUSH
32534: LD_VAR 0 3
32538: IN
32539: ST_TO_ADDR
// end ;
32540: LD_VAR 0 3
32544: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32545: LD_INT 0
32547: PPUSH
32548: PPUSH
32549: PPUSH
32550: PPUSH
32551: PPUSH
32552: PPUSH
32553: PPUSH
// result := array ;
32554: LD_ADDR_VAR 0 5
32558: PUSH
32559: LD_VAR 0 1
32563: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32564: LD_VAR 0 1
32568: NOT
32569: IFTRUE 32578
32571: PUSH
32572: LD_VAR 0 2
32576: NOT
32577: OR
32578: IFTRUE 32587
32580: PUSH
32581: LD_VAR 0 3
32585: NOT
32586: OR
32587: IFTRUE 32601
32589: PUSH
32590: LD_VAR 0 2
32594: PUSH
32595: LD_VAR 0 1
32599: GREATER
32600: OR
32601: IFTRUE 32615
32603: PUSH
32604: LD_VAR 0 3
32608: PUSH
32609: LD_VAR 0 1
32613: GREATER
32614: OR
32615: IFFALSE 32619
// exit ;
32617: GO 32915
// if direction then
32619: LD_VAR 0 4
32623: IFFALSE 32687
// begin d := 1 ;
32625: LD_ADDR_VAR 0 9
32629: PUSH
32630: LD_INT 1
32632: ST_TO_ADDR
// if i_from > i_to then
32633: LD_VAR 0 2
32637: PUSH
32638: LD_VAR 0 3
32642: GREATER
32643: IFFALSE 32669
// length := ( array - i_from ) + i_to else
32645: LD_ADDR_VAR 0 11
32649: PUSH
32650: LD_VAR 0 1
32654: PUSH
32655: LD_VAR 0 2
32659: MINUS
32660: PUSH
32661: LD_VAR 0 3
32665: PLUS
32666: ST_TO_ADDR
32667: GO 32685
// length := i_to - i_from ;
32669: LD_ADDR_VAR 0 11
32673: PUSH
32674: LD_VAR 0 3
32678: PUSH
32679: LD_VAR 0 2
32683: MINUS
32684: ST_TO_ADDR
// end else
32685: GO 32748
// begin d := - 1 ;
32687: LD_ADDR_VAR 0 9
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: ST_TO_ADDR
// if i_from > i_to then
32696: LD_VAR 0 2
32700: PUSH
32701: LD_VAR 0 3
32705: GREATER
32706: IFFALSE 32726
// length := i_from - i_to else
32708: LD_ADDR_VAR 0 11
32712: PUSH
32713: LD_VAR 0 2
32717: PUSH
32718: LD_VAR 0 3
32722: MINUS
32723: ST_TO_ADDR
32724: GO 32748
// length := ( array - i_to ) + i_from ;
32726: LD_ADDR_VAR 0 11
32730: PUSH
32731: LD_VAR 0 1
32735: PUSH
32736: LD_VAR 0 3
32740: MINUS
32741: PUSH
32742: LD_VAR 0 2
32746: PLUS
32747: ST_TO_ADDR
// end ; if not length then
32748: LD_VAR 0 11
32752: NOT
32753: IFFALSE 32757
// exit ;
32755: GO 32915
// tmp := array ;
32757: LD_ADDR_VAR 0 10
32761: PUSH
32762: LD_VAR 0 1
32766: ST_TO_ADDR
// for i = 1 to length do
32767: LD_ADDR_VAR 0 6
32771: PUSH
32772: DOUBLE
32773: LD_INT 1
32775: DEC
32776: ST_TO_ADDR
32777: LD_VAR 0 11
32781: PUSH
32782: FOR_TO
32783: IFFALSE 32903
// begin for j = 1 to array do
32785: LD_ADDR_VAR 0 7
32789: PUSH
32790: DOUBLE
32791: LD_INT 1
32793: DEC
32794: ST_TO_ADDR
32795: LD_VAR 0 1
32799: PUSH
32800: FOR_TO
32801: IFFALSE 32889
// begin k := j + d ;
32803: LD_ADDR_VAR 0 8
32807: PUSH
32808: LD_VAR 0 7
32812: PUSH
32813: LD_VAR 0 9
32817: PLUS
32818: ST_TO_ADDR
// if k > array then
32819: LD_VAR 0 8
32823: PUSH
32824: LD_VAR 0 1
32828: GREATER
32829: IFFALSE 32839
// k := 1 ;
32831: LD_ADDR_VAR 0 8
32835: PUSH
32836: LD_INT 1
32838: ST_TO_ADDR
// if not k then
32839: LD_VAR 0 8
32843: NOT
32844: IFFALSE 32856
// k := array ;
32846: LD_ADDR_VAR 0 8
32850: PUSH
32851: LD_VAR 0 1
32855: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32856: LD_ADDR_VAR 0 10
32860: PUSH
32861: LD_VAR 0 10
32865: PPUSH
32866: LD_VAR 0 8
32870: PPUSH
32871: LD_VAR 0 1
32875: PUSH
32876: LD_VAR 0 7
32880: ARRAY
32881: PPUSH
32882: CALL_OW 1
32886: ST_TO_ADDR
// end ;
32887: GO 32800
32889: POP
32890: POP
// array := tmp ;
32891: LD_ADDR_VAR 0 1
32895: PUSH
32896: LD_VAR 0 10
32900: ST_TO_ADDR
// end ;
32901: GO 32782
32903: POP
32904: POP
// result := array ;
32905: LD_ADDR_VAR 0 5
32909: PUSH
32910: LD_VAR 0 1
32914: ST_TO_ADDR
// end ;
32915: LD_VAR 0 5
32919: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32920: LD_INT 0
32922: PPUSH
32923: PPUSH
// result := 0 ;
32924: LD_ADDR_VAR 0 3
32928: PUSH
32929: LD_INT 0
32931: ST_TO_ADDR
// if not array or not value in array then
32932: LD_VAR 0 1
32936: NOT
32937: IFTRUE 32952
32939: PUSH
32940: LD_VAR 0 2
32944: PUSH
32945: LD_VAR 0 1
32949: IN
32950: NOT
32951: OR
32952: IFFALSE 32956
// exit ;
32954: GO 33010
// for i = 1 to array do
32956: LD_ADDR_VAR 0 4
32960: PUSH
32961: DOUBLE
32962: LD_INT 1
32964: DEC
32965: ST_TO_ADDR
32966: LD_VAR 0 1
32970: PUSH
32971: FOR_TO
32972: IFFALSE 33008
// if value = array [ i ] then
32974: LD_VAR 0 2
32978: PUSH
32979: LD_VAR 0 1
32983: PUSH
32984: LD_VAR 0 4
32988: ARRAY
32989: EQUAL
32990: IFFALSE 33006
// begin result := i ;
32992: LD_ADDR_VAR 0 3
32996: PUSH
32997: LD_VAR 0 4
33001: ST_TO_ADDR
// exit ;
33002: POP
33003: POP
33004: GO 33010
// end ;
33006: GO 32971
33008: POP
33009: POP
// end ;
33010: LD_VAR 0 3
33014: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33015: LD_INT 0
33017: PPUSH
// vc_chassis := chassis ;
33018: LD_ADDR_OWVAR 37
33022: PUSH
33023: LD_VAR 0 1
33027: ST_TO_ADDR
// vc_engine := engine ;
33028: LD_ADDR_OWVAR 39
33032: PUSH
33033: LD_VAR 0 2
33037: ST_TO_ADDR
// vc_control := control ;
33038: LD_ADDR_OWVAR 38
33042: PUSH
33043: LD_VAR 0 3
33047: ST_TO_ADDR
// vc_weapon := weapon ;
33048: LD_ADDR_OWVAR 40
33052: PUSH
33053: LD_VAR 0 4
33057: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33058: LD_ADDR_OWVAR 41
33062: PUSH
33063: LD_VAR 0 5
33067: ST_TO_ADDR
// end ;
33068: LD_VAR 0 6
33072: RET
// export function WantPlant ( unit ) ; var task ; begin
33073: LD_INT 0
33075: PPUSH
33076: PPUSH
// result := false ;
33077: LD_ADDR_VAR 0 2
33081: PUSH
33082: LD_INT 0
33084: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33085: LD_ADDR_VAR 0 3
33089: PUSH
33090: LD_VAR 0 1
33094: PPUSH
33095: CALL_OW 437
33099: ST_TO_ADDR
// if task then
33100: LD_VAR 0 3
33104: IFFALSE 33132
// if task [ 1 ] [ 1 ] = p then
33106: LD_VAR 0 3
33110: PUSH
33111: LD_INT 1
33113: ARRAY
33114: PUSH
33115: LD_INT 1
33117: ARRAY
33118: PUSH
33119: LD_STRING p
33121: EQUAL
33122: IFFALSE 33132
// result := true ;
33124: LD_ADDR_VAR 0 2
33128: PUSH
33129: LD_INT 1
33131: ST_TO_ADDR
// end ;
33132: LD_VAR 0 2
33136: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33137: LD_INT 0
33139: PPUSH
33140: PPUSH
33141: PPUSH
33142: PPUSH
// if pos < 1 then
33143: LD_VAR 0 2
33147: PUSH
33148: LD_INT 1
33150: LESS
33151: IFFALSE 33155
// exit ;
33153: GO 33458
// if pos = 1 then
33155: LD_VAR 0 2
33159: PUSH
33160: LD_INT 1
33162: EQUAL
33163: IFFALSE 33196
// result := Replace ( arr , pos [ 1 ] , value ) else
33165: LD_ADDR_VAR 0 4
33169: PUSH
33170: LD_VAR 0 1
33174: PPUSH
33175: LD_VAR 0 2
33179: PUSH
33180: LD_INT 1
33182: ARRAY
33183: PPUSH
33184: LD_VAR 0 3
33188: PPUSH
33189: CALL_OW 1
33193: ST_TO_ADDR
33194: GO 33458
// begin tmp := arr ;
33196: LD_ADDR_VAR 0 6
33200: PUSH
33201: LD_VAR 0 1
33205: ST_TO_ADDR
// s_arr := [ tmp ] ;
33206: LD_ADDR_VAR 0 7
33210: PUSH
33211: LD_VAR 0 6
33215: PUSH
33216: EMPTY
33217: LIST
33218: ST_TO_ADDR
// for i = 1 to pos - 1 do
33219: LD_ADDR_VAR 0 5
33223: PUSH
33224: DOUBLE
33225: LD_INT 1
33227: DEC
33228: ST_TO_ADDR
33229: LD_VAR 0 2
33233: PUSH
33234: LD_INT 1
33236: MINUS
33237: PUSH
33238: FOR_TO
33239: IFFALSE 33284
// begin tmp := tmp [ pos [ i ] ] ;
33241: LD_ADDR_VAR 0 6
33245: PUSH
33246: LD_VAR 0 6
33250: PUSH
33251: LD_VAR 0 2
33255: PUSH
33256: LD_VAR 0 5
33260: ARRAY
33261: ARRAY
33262: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33263: LD_ADDR_VAR 0 7
33267: PUSH
33268: LD_VAR 0 7
33272: PUSH
33273: LD_VAR 0 6
33277: PUSH
33278: EMPTY
33279: LIST
33280: ADD
33281: ST_TO_ADDR
// end ;
33282: GO 33238
33284: POP
33285: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33286: LD_ADDR_VAR 0 6
33290: PUSH
33291: LD_VAR 0 6
33295: PPUSH
33296: LD_VAR 0 2
33300: PUSH
33301: LD_VAR 0 2
33305: ARRAY
33306: PPUSH
33307: LD_VAR 0 3
33311: PPUSH
33312: CALL_OW 1
33316: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33317: LD_ADDR_VAR 0 7
33321: PUSH
33322: LD_VAR 0 7
33326: PPUSH
33327: LD_VAR 0 7
33331: PPUSH
33332: LD_VAR 0 6
33336: PPUSH
33337: CALL_OW 1
33341: ST_TO_ADDR
// for i = s_arr downto 2 do
33342: LD_ADDR_VAR 0 5
33346: PUSH
33347: DOUBLE
33348: LD_VAR 0 7
33352: INC
33353: ST_TO_ADDR
33354: LD_INT 2
33356: PUSH
33357: FOR_DOWNTO
33358: IFFALSE 33442
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33360: LD_ADDR_VAR 0 6
33364: PUSH
33365: LD_VAR 0 7
33369: PUSH
33370: LD_VAR 0 5
33374: PUSH
33375: LD_INT 1
33377: MINUS
33378: ARRAY
33379: PPUSH
33380: LD_VAR 0 2
33384: PUSH
33385: LD_VAR 0 5
33389: PUSH
33390: LD_INT 1
33392: MINUS
33393: ARRAY
33394: PPUSH
33395: LD_VAR 0 7
33399: PUSH
33400: LD_VAR 0 5
33404: ARRAY
33405: PPUSH
33406: CALL_OW 1
33410: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33411: LD_ADDR_VAR 0 7
33415: PUSH
33416: LD_VAR 0 7
33420: PPUSH
33421: LD_VAR 0 5
33425: PUSH
33426: LD_INT 1
33428: MINUS
33429: PPUSH
33430: LD_VAR 0 6
33434: PPUSH
33435: CALL_OW 1
33439: ST_TO_ADDR
// end ;
33440: GO 33357
33442: POP
33443: POP
// result := s_arr [ 1 ] ;
33444: LD_ADDR_VAR 0 4
33448: PUSH
33449: LD_VAR 0 7
33453: PUSH
33454: LD_INT 1
33456: ARRAY
33457: ST_TO_ADDR
// end ; end ;
33458: LD_VAR 0 4
33462: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33463: LD_INT 0
33465: PPUSH
33466: PPUSH
// if not list then
33467: LD_VAR 0 1
33471: NOT
33472: IFFALSE 33476
// exit ;
33474: GO 33567
// i := list [ pos1 ] ;
33476: LD_ADDR_VAR 0 5
33480: PUSH
33481: LD_VAR 0 1
33485: PUSH
33486: LD_VAR 0 2
33490: ARRAY
33491: ST_TO_ADDR
// if not i then
33492: LD_VAR 0 5
33496: NOT
33497: IFFALSE 33501
// exit ;
33499: GO 33567
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33501: LD_ADDR_VAR 0 1
33505: PUSH
33506: LD_VAR 0 1
33510: PPUSH
33511: LD_VAR 0 2
33515: PPUSH
33516: LD_VAR 0 1
33520: PUSH
33521: LD_VAR 0 3
33525: ARRAY
33526: PPUSH
33527: CALL_OW 1
33531: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33532: LD_ADDR_VAR 0 1
33536: PUSH
33537: LD_VAR 0 1
33541: PPUSH
33542: LD_VAR 0 3
33546: PPUSH
33547: LD_VAR 0 5
33551: PPUSH
33552: CALL_OW 1
33556: ST_TO_ADDR
// result := list ;
33557: LD_ADDR_VAR 0 4
33561: PUSH
33562: LD_VAR 0 1
33566: ST_TO_ADDR
// end ;
33567: LD_VAR 0 4
33571: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33572: LD_INT 0
33574: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33575: LD_ADDR_VAR 0 5
33579: PUSH
33580: LD_VAR 0 1
33584: PPUSH
33585: CALL_OW 250
33589: PPUSH
33590: LD_VAR 0 1
33594: PPUSH
33595: CALL_OW 251
33599: PPUSH
33600: LD_VAR 0 2
33604: PPUSH
33605: LD_VAR 0 3
33609: PPUSH
33610: LD_VAR 0 4
33614: PPUSH
33615: CALL 33997 0 5
33619: ST_TO_ADDR
// end ;
33620: LD_VAR 0 5
33624: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33625: LD_INT 0
33627: PPUSH
33628: PPUSH
33629: PPUSH
33630: PPUSH
// if not list or not unit then
33631: LD_VAR 0 2
33635: NOT
33636: IFTRUE 33645
33638: PUSH
33639: LD_VAR 0 1
33643: NOT
33644: OR
33645: IFFALSE 33649
// exit ;
33647: GO 33992
// result := [ ] ;
33649: LD_ADDR_VAR 0 5
33653: PUSH
33654: EMPTY
33655: ST_TO_ADDR
// for i in list do
33656: LD_ADDR_VAR 0 6
33660: PUSH
33661: LD_VAR 0 2
33665: PUSH
33666: FOR_IN
33667: IFFALSE 33885
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33669: LD_ADDR_VAR 0 8
33673: PUSH
33674: LD_VAR 0 1
33678: PPUSH
33679: LD_VAR 0 6
33683: PUSH
33684: LD_INT 1
33686: ARRAY
33687: PPUSH
33688: LD_VAR 0 6
33692: PUSH
33693: LD_INT 2
33695: ARRAY
33696: PPUSH
33697: CALL_OW 297
33701: ST_TO_ADDR
// if not Count ( result ) then
33702: LD_VAR 0 5
33706: PPUSH
33707: CALL 30253 0 1
33711: NOT
33712: IFFALSE 33745
// begin result := Join ( result , [ i , tmp ] ) ;
33714: LD_ADDR_VAR 0 5
33718: PUSH
33719: LD_VAR 0 5
33723: PPUSH
33724: LD_VAR 0 6
33728: PUSH
33729: LD_VAR 0 8
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PPUSH
33738: CALL 66185 0 2
33742: ST_TO_ADDR
// continue ;
33743: GO 33666
// end ; if result [ result ] [ 2 ] <= tmp then
33745: LD_VAR 0 5
33749: PUSH
33750: LD_VAR 0 5
33754: ARRAY
33755: PUSH
33756: LD_INT 2
33758: ARRAY
33759: PUSH
33760: LD_VAR 0 8
33764: LESSEQUAL
33765: IFFALSE 33798
// result := Join ( result , [ i , tmp ] ) else
33767: LD_ADDR_VAR 0 5
33771: PUSH
33772: LD_VAR 0 5
33776: PPUSH
33777: LD_VAR 0 6
33781: PUSH
33782: LD_VAR 0 8
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PPUSH
33791: CALL 66185 0 2
33795: ST_TO_ADDR
33796: GO 33883
// begin for j := 1 to Count ( result ) do
33798: LD_ADDR_VAR 0 7
33802: PUSH
33803: DOUBLE
33804: LD_INT 1
33806: DEC
33807: ST_TO_ADDR
33808: LD_VAR 0 5
33812: PPUSH
33813: CALL 30253 0 1
33817: PUSH
33818: FOR_TO
33819: IFFALSE 33881
// begin if tmp < result [ j ] [ 2 ] then
33821: LD_VAR 0 8
33825: PUSH
33826: LD_VAR 0 5
33830: PUSH
33831: LD_VAR 0 7
33835: ARRAY
33836: PUSH
33837: LD_INT 2
33839: ARRAY
33840: LESS
33841: IFFALSE 33879
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33843: LD_ADDR_VAR 0 5
33847: PUSH
33848: LD_VAR 0 5
33852: PPUSH
33853: LD_VAR 0 7
33857: PPUSH
33858: LD_VAR 0 6
33862: PUSH
33863: LD_VAR 0 8
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PPUSH
33872: CALL_OW 2
33876: ST_TO_ADDR
// break ;
33877: GO 33881
// end ; end ;
33879: GO 33818
33881: POP
33882: POP
// end ; end ;
33883: GO 33666
33885: POP
33886: POP
// if result and not asc then
33887: LD_VAR 0 5
33891: IFFALSE 33900
33893: PUSH
33894: LD_VAR 0 3
33898: NOT
33899: AND
33900: IFFALSE 33917
// result := ReverseArray ( result ) ;
33902: LD_ADDR_VAR 0 5
33906: PUSH
33907: LD_VAR 0 5
33911: PPUSH
33912: CALL 61275 0 1
33916: ST_TO_ADDR
// tmp := [ ] ;
33917: LD_ADDR_VAR 0 8
33921: PUSH
33922: EMPTY
33923: ST_TO_ADDR
// if mode then
33924: LD_VAR 0 4
33928: IFFALSE 33992
// begin for i := 1 to result do
33930: LD_ADDR_VAR 0 6
33934: PUSH
33935: DOUBLE
33936: LD_INT 1
33938: DEC
33939: ST_TO_ADDR
33940: LD_VAR 0 5
33944: PUSH
33945: FOR_TO
33946: IFFALSE 33980
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33948: LD_ADDR_VAR 0 8
33952: PUSH
33953: LD_VAR 0 8
33957: PPUSH
33958: LD_VAR 0 5
33962: PUSH
33963: LD_VAR 0 6
33967: ARRAY
33968: PUSH
33969: LD_INT 1
33971: ARRAY
33972: PPUSH
33973: CALL 66185 0 2
33977: ST_TO_ADDR
33978: GO 33945
33980: POP
33981: POP
// result := tmp ;
33982: LD_ADDR_VAR 0 5
33986: PUSH
33987: LD_VAR 0 8
33991: ST_TO_ADDR
// end ; end ;
33992: LD_VAR 0 5
33996: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33997: LD_INT 0
33999: PPUSH
34000: PPUSH
34001: PPUSH
34002: PPUSH
// if not list then
34003: LD_VAR 0 3
34007: NOT
34008: IFFALSE 34012
// exit ;
34010: GO 34402
// result := [ ] ;
34012: LD_ADDR_VAR 0 6
34016: PUSH
34017: EMPTY
34018: ST_TO_ADDR
// for i in list do
34019: LD_ADDR_VAR 0 7
34023: PUSH
34024: LD_VAR 0 3
34028: PUSH
34029: FOR_IN
34030: IFFALSE 34232
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34032: LD_ADDR_VAR 0 9
34036: PUSH
34037: LD_VAR 0 7
34041: PPUSH
34042: LD_VAR 0 1
34046: PPUSH
34047: LD_VAR 0 2
34051: PPUSH
34052: CALL_OW 297
34056: ST_TO_ADDR
// if not result then
34057: LD_VAR 0 6
34061: NOT
34062: IFFALSE 34088
// result := [ [ i , tmp ] ] else
34064: LD_ADDR_VAR 0 6
34068: PUSH
34069: LD_VAR 0 7
34073: PUSH
34074: LD_VAR 0 9
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: EMPTY
34084: LIST
34085: ST_TO_ADDR
34086: GO 34230
// begin if result [ result ] [ 2 ] <= tmp then
34088: LD_VAR 0 6
34092: PUSH
34093: LD_VAR 0 6
34097: ARRAY
34098: PUSH
34099: LD_INT 2
34101: ARRAY
34102: PUSH
34103: LD_VAR 0 9
34107: LESSEQUAL
34108: IFFALSE 34150
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34110: LD_ADDR_VAR 0 6
34114: PUSH
34115: LD_VAR 0 6
34119: PPUSH
34120: LD_VAR 0 6
34124: PUSH
34125: LD_INT 1
34127: PLUS
34128: PPUSH
34129: LD_VAR 0 7
34133: PUSH
34134: LD_VAR 0 9
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PPUSH
34143: CALL_OW 2
34147: ST_TO_ADDR
34148: GO 34230
// for j := 1 to result do
34150: LD_ADDR_VAR 0 8
34154: PUSH
34155: DOUBLE
34156: LD_INT 1
34158: DEC
34159: ST_TO_ADDR
34160: LD_VAR 0 6
34164: PUSH
34165: FOR_TO
34166: IFFALSE 34228
// begin if tmp < result [ j ] [ 2 ] then
34168: LD_VAR 0 9
34172: PUSH
34173: LD_VAR 0 6
34177: PUSH
34178: LD_VAR 0 8
34182: ARRAY
34183: PUSH
34184: LD_INT 2
34186: ARRAY
34187: LESS
34188: IFFALSE 34226
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34190: LD_ADDR_VAR 0 6
34194: PUSH
34195: LD_VAR 0 6
34199: PPUSH
34200: LD_VAR 0 8
34204: PPUSH
34205: LD_VAR 0 7
34209: PUSH
34210: LD_VAR 0 9
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PPUSH
34219: CALL_OW 2
34223: ST_TO_ADDR
// break ;
34224: GO 34228
// end ; end ;
34226: GO 34165
34228: POP
34229: POP
// end ; end ;
34230: GO 34029
34232: POP
34233: POP
// if result and not asc then
34234: LD_VAR 0 6
34238: IFFALSE 34247
34240: PUSH
34241: LD_VAR 0 4
34245: NOT
34246: AND
34247: IFFALSE 34322
// begin tmp := result ;
34249: LD_ADDR_VAR 0 9
34253: PUSH
34254: LD_VAR 0 6
34258: ST_TO_ADDR
// for i = tmp downto 1 do
34259: LD_ADDR_VAR 0 7
34263: PUSH
34264: DOUBLE
34265: LD_VAR 0 9
34269: INC
34270: ST_TO_ADDR
34271: LD_INT 1
34273: PUSH
34274: FOR_DOWNTO
34275: IFFALSE 34320
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34277: LD_ADDR_VAR 0 6
34281: PUSH
34282: LD_VAR 0 6
34286: PPUSH
34287: LD_VAR 0 9
34291: PUSH
34292: LD_VAR 0 7
34296: MINUS
34297: PUSH
34298: LD_INT 1
34300: PLUS
34301: PPUSH
34302: LD_VAR 0 9
34306: PUSH
34307: LD_VAR 0 7
34311: ARRAY
34312: PPUSH
34313: CALL_OW 1
34317: ST_TO_ADDR
34318: GO 34274
34320: POP
34321: POP
// end ; tmp := [ ] ;
34322: LD_ADDR_VAR 0 9
34326: PUSH
34327: EMPTY
34328: ST_TO_ADDR
// if mode then
34329: LD_VAR 0 5
34333: IFFALSE 34402
// begin for i = 1 to result do
34335: LD_ADDR_VAR 0 7
34339: PUSH
34340: DOUBLE
34341: LD_INT 1
34343: DEC
34344: ST_TO_ADDR
34345: LD_VAR 0 6
34349: PUSH
34350: FOR_TO
34351: IFFALSE 34390
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34353: LD_ADDR_VAR 0 9
34357: PUSH
34358: LD_VAR 0 9
34362: PPUSH
34363: LD_VAR 0 7
34367: PPUSH
34368: LD_VAR 0 6
34372: PUSH
34373: LD_VAR 0 7
34377: ARRAY
34378: PUSH
34379: LD_INT 1
34381: ARRAY
34382: PPUSH
34383: CALL_OW 1
34387: ST_TO_ADDR
34388: GO 34350
34390: POP
34391: POP
// result := tmp ;
34392: LD_ADDR_VAR 0 6
34396: PUSH
34397: LD_VAR 0 9
34401: ST_TO_ADDR
// end ; end ;
34402: LD_VAR 0 6
34406: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34407: LD_INT 0
34409: PPUSH
34410: PPUSH
34411: PPUSH
34412: PPUSH
34413: PPUSH
34414: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34415: LD_ADDR_VAR 0 5
34419: PUSH
34420: LD_INT 0
34422: PUSH
34423: LD_INT 0
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: ST_TO_ADDR
// if not x or not y then
34437: LD_VAR 0 2
34441: NOT
34442: IFTRUE 34451
34444: PUSH
34445: LD_VAR 0 3
34449: NOT
34450: OR
34451: IFFALSE 34455
// exit ;
34453: GO 36111
// if not range then
34455: LD_VAR 0 4
34459: NOT
34460: IFFALSE 34470
// range := 10 ;
34462: LD_ADDR_VAR 0 4
34466: PUSH
34467: LD_INT 10
34469: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34470: LD_ADDR_VAR 0 8
34474: PUSH
34475: LD_INT 81
34477: PUSH
34478: LD_VAR 0 1
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 92
34489: PUSH
34490: LD_VAR 0 2
34494: PUSH
34495: LD_VAR 0 3
34499: PUSH
34500: LD_VAR 0 4
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 3
34513: PUSH
34514: LD_INT 21
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: LIST
34532: PPUSH
34533: CALL_OW 69
34537: ST_TO_ADDR
// if not tmp then
34538: LD_VAR 0 8
34542: NOT
34543: IFFALSE 34547
// exit ;
34545: GO 36111
// for i in tmp do
34547: LD_ADDR_VAR 0 6
34551: PUSH
34552: LD_VAR 0 8
34556: PUSH
34557: FOR_IN
34558: IFFALSE 36086
// begin points := [ 0 , 0 , 0 ] ;
34560: LD_ADDR_VAR 0 9
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: LIST
34578: ST_TO_ADDR
// bpoints := 1 ;
34579: LD_ADDR_VAR 0 10
34583: PUSH
34584: LD_INT 1
34586: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34587: LD_VAR 0 6
34591: PPUSH
34592: CALL_OW 247
34596: PUSH
34597: LD_INT 1
34599: DOUBLE
34600: EQUAL
34601: IFTRUE 34605
34603: GO 35187
34605: POP
// begin if GetClass ( i ) = 1 then
34606: LD_VAR 0 6
34610: PPUSH
34611: CALL_OW 257
34615: PUSH
34616: LD_INT 1
34618: EQUAL
34619: IFFALSE 34640
// points := [ 10 , 5 , 3 ] ;
34621: LD_ADDR_VAR 0 9
34625: PUSH
34626: LD_INT 10
34628: PUSH
34629: LD_INT 5
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: LIST
34639: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34640: LD_VAR 0 6
34644: PPUSH
34645: CALL_OW 257
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: LD_INT 3
34655: PUSH
34656: LD_INT 4
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: LIST
34663: IN
34664: IFFALSE 34685
// points := [ 3 , 2 , 1 ] ;
34666: LD_ADDR_VAR 0 9
34670: PUSH
34671: LD_INT 3
34673: PUSH
34674: LD_INT 2
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: LIST
34684: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34685: LD_VAR 0 6
34689: PPUSH
34690: CALL_OW 257
34694: PUSH
34695: LD_INT 5
34697: EQUAL
34698: IFFALSE 34719
// points := [ 130 , 5 , 2 ] ;
34700: LD_ADDR_VAR 0 9
34704: PUSH
34705: LD_INT 130
34707: PUSH
34708: LD_INT 5
34710: PUSH
34711: LD_INT 2
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34719: LD_VAR 0 6
34723: PPUSH
34724: CALL_OW 257
34728: PUSH
34729: LD_INT 8
34731: EQUAL
34732: IFFALSE 34753
// points := [ 35 , 35 , 30 ] ;
34734: LD_ADDR_VAR 0 9
34738: PUSH
34739: LD_INT 35
34741: PUSH
34742: LD_INT 35
34744: PUSH
34745: LD_INT 30
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: LIST
34752: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34753: LD_VAR 0 6
34757: PPUSH
34758: CALL_OW 257
34762: PUSH
34763: LD_INT 9
34765: EQUAL
34766: IFFALSE 34787
// points := [ 20 , 55 , 40 ] ;
34768: LD_ADDR_VAR 0 9
34772: PUSH
34773: LD_INT 20
34775: PUSH
34776: LD_INT 55
34778: PUSH
34779: LD_INT 40
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: LIST
34786: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34787: LD_VAR 0 6
34791: PPUSH
34792: CALL_OW 257
34796: PUSH
34797: LD_INT 12
34799: PUSH
34800: LD_INT 16
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: IN
34807: IFFALSE 34828
// points := [ 5 , 3 , 2 ] ;
34809: LD_ADDR_VAR 0 9
34813: PUSH
34814: LD_INT 5
34816: PUSH
34817: LD_INT 3
34819: PUSH
34820: LD_INT 2
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34828: LD_VAR 0 6
34832: PPUSH
34833: CALL_OW 257
34837: PUSH
34838: LD_INT 17
34840: EQUAL
34841: IFFALSE 34862
// points := [ 100 , 50 , 75 ] ;
34843: LD_ADDR_VAR 0 9
34847: PUSH
34848: LD_INT 100
34850: PUSH
34851: LD_INT 50
34853: PUSH
34854: LD_INT 75
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: LIST
34861: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34862: LD_VAR 0 6
34866: PPUSH
34867: CALL_OW 257
34871: PUSH
34872: LD_INT 15
34874: EQUAL
34875: IFFALSE 34896
// points := [ 10 , 5 , 3 ] ;
34877: LD_ADDR_VAR 0 9
34881: PUSH
34882: LD_INT 10
34884: PUSH
34885: LD_INT 5
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34896: LD_VAR 0 6
34900: PPUSH
34901: CALL_OW 257
34905: PUSH
34906: LD_INT 14
34908: EQUAL
34909: IFFALSE 34930
// points := [ 10 , 0 , 0 ] ;
34911: LD_ADDR_VAR 0 9
34915: PUSH
34916: LD_INT 10
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34930: LD_VAR 0 6
34934: PPUSH
34935: CALL_OW 257
34939: PUSH
34940: LD_INT 11
34942: EQUAL
34943: IFFALSE 34964
// points := [ 30 , 10 , 5 ] ;
34945: LD_ADDR_VAR 0 9
34949: PUSH
34950: LD_INT 30
34952: PUSH
34953: LD_INT 10
34955: PUSH
34956: LD_INT 5
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: LIST
34963: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34964: LD_VAR 0 1
34968: PPUSH
34969: LD_INT 5
34971: PPUSH
34972: CALL_OW 321
34976: PUSH
34977: LD_INT 2
34979: EQUAL
34980: IFFALSE 34997
// bpoints := bpoints * 1.8 ;
34982: LD_ADDR_VAR 0 10
34986: PUSH
34987: LD_VAR 0 10
34991: PUSH
34992: LD_REAL  1.80000000000000E+0000
34995: MUL
34996: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34997: LD_VAR 0 6
35001: PPUSH
35002: CALL_OW 257
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: LD_INT 4
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: IN
35025: IFFALSE 35045
35027: PUSH
35028: LD_VAR 0 1
35032: PPUSH
35033: LD_INT 51
35035: PPUSH
35036: CALL_OW 321
35040: PUSH
35041: LD_INT 2
35043: EQUAL
35044: AND
35045: IFFALSE 35062
// bpoints := bpoints * 1.2 ;
35047: LD_ADDR_VAR 0 10
35051: PUSH
35052: LD_VAR 0 10
35056: PUSH
35057: LD_REAL  1.20000000000000E+0000
35060: MUL
35061: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35062: LD_VAR 0 6
35066: PPUSH
35067: CALL_OW 257
35071: PUSH
35072: LD_INT 5
35074: PUSH
35075: LD_INT 7
35077: PUSH
35078: LD_INT 9
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: LIST
35085: IN
35086: IFFALSE 35106
35088: PUSH
35089: LD_VAR 0 1
35093: PPUSH
35094: LD_INT 52
35096: PPUSH
35097: CALL_OW 321
35101: PUSH
35102: LD_INT 2
35104: EQUAL
35105: AND
35106: IFFALSE 35123
// bpoints := bpoints * 1.5 ;
35108: LD_ADDR_VAR 0 10
35112: PUSH
35113: LD_VAR 0 10
35117: PUSH
35118: LD_REAL  1.50000000000000E+0000
35121: MUL
35122: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35123: LD_VAR 0 1
35127: PPUSH
35128: LD_INT 66
35130: PPUSH
35131: CALL_OW 321
35135: PUSH
35136: LD_INT 2
35138: EQUAL
35139: IFFALSE 35156
// bpoints := bpoints * 1.1 ;
35141: LD_ADDR_VAR 0 10
35145: PUSH
35146: LD_VAR 0 10
35150: PUSH
35151: LD_REAL  1.10000000000000E+0000
35154: MUL
35155: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35156: LD_ADDR_VAR 0 10
35160: PUSH
35161: LD_VAR 0 10
35165: PUSH
35166: LD_VAR 0 6
35170: PPUSH
35171: LD_INT 1
35173: PPUSH
35174: CALL_OW 259
35178: PUSH
35179: LD_REAL  1.15000000000000E+0000
35182: MUL
35183: MUL
35184: ST_TO_ADDR
// end ; unit_vehicle :
35185: GO 36015
35187: LD_INT 2
35189: DOUBLE
35190: EQUAL
35191: IFTRUE 35195
35193: GO 36003
35195: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35196: LD_VAR 0 6
35200: PPUSH
35201: CALL_OW 264
35205: PUSH
35206: LD_INT 2
35208: PUSH
35209: LD_INT 42
35211: PUSH
35212: LD_INT 24
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: LIST
35219: IN
35220: IFFALSE 35241
// points := [ 25 , 5 , 3 ] ;
35222: LD_ADDR_VAR 0 9
35226: PUSH
35227: LD_INT 25
35229: PUSH
35230: LD_INT 5
35232: PUSH
35233: LD_INT 3
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: LIST
35240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35241: LD_VAR 0 6
35245: PPUSH
35246: CALL_OW 264
35250: PUSH
35251: LD_INT 4
35253: PUSH
35254: LD_INT 43
35256: PUSH
35257: LD_INT 25
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: LIST
35264: IN
35265: IFFALSE 35286
// points := [ 40 , 15 , 5 ] ;
35267: LD_ADDR_VAR 0 9
35271: PUSH
35272: LD_INT 40
35274: PUSH
35275: LD_INT 15
35277: PUSH
35278: LD_INT 5
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: LIST
35285: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35286: LD_VAR 0 6
35290: PPUSH
35291: CALL_OW 264
35295: PUSH
35296: LD_INT 3
35298: PUSH
35299: LD_INT 23
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: IN
35306: IFFALSE 35327
// points := [ 7 , 25 , 8 ] ;
35308: LD_ADDR_VAR 0 9
35312: PUSH
35313: LD_INT 7
35315: PUSH
35316: LD_INT 25
35318: PUSH
35319: LD_INT 8
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: LIST
35326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35327: LD_VAR 0 6
35331: PPUSH
35332: CALL_OW 264
35336: PUSH
35337: LD_INT 5
35339: PUSH
35340: LD_INT 27
35342: PUSH
35343: LD_INT 44
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: IN
35351: IFFALSE 35372
// points := [ 14 , 50 , 16 ] ;
35353: LD_ADDR_VAR 0 9
35357: PUSH
35358: LD_INT 14
35360: PUSH
35361: LD_INT 50
35363: PUSH
35364: LD_INT 16
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35372: LD_VAR 0 6
35376: PPUSH
35377: CALL_OW 264
35381: PUSH
35382: LD_INT 6
35384: PUSH
35385: LD_INT 46
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: IN
35392: IFFALSE 35413
// points := [ 32 , 120 , 70 ] ;
35394: LD_ADDR_VAR 0 9
35398: PUSH
35399: LD_INT 32
35401: PUSH
35402: LD_INT 120
35404: PUSH
35405: LD_INT 70
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35413: LD_VAR 0 6
35417: PPUSH
35418: CALL_OW 264
35422: PUSH
35423: LD_INT 7
35425: PUSH
35426: LD_INT 28
35428: PUSH
35429: LD_INT 45
35431: PUSH
35432: LD_INT 92
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: IN
35441: IFFALSE 35462
// points := [ 35 , 20 , 45 ] ;
35443: LD_ADDR_VAR 0 9
35447: PUSH
35448: LD_INT 35
35450: PUSH
35451: LD_INT 20
35453: PUSH
35454: LD_INT 45
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35462: LD_VAR 0 6
35466: PPUSH
35467: CALL_OW 264
35471: PUSH
35472: LD_INT 47
35474: PUSH
35475: EMPTY
35476: LIST
35477: IN
35478: IFFALSE 35499
// points := [ 67 , 45 , 75 ] ;
35480: LD_ADDR_VAR 0 9
35484: PUSH
35485: LD_INT 67
35487: PUSH
35488: LD_INT 45
35490: PUSH
35491: LD_INT 75
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: LIST
35498: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35499: LD_VAR 0 6
35503: PPUSH
35504: CALL_OW 264
35508: PUSH
35509: LD_INT 26
35511: PUSH
35512: EMPTY
35513: LIST
35514: IN
35515: IFFALSE 35536
// points := [ 120 , 30 , 80 ] ;
35517: LD_ADDR_VAR 0 9
35521: PUSH
35522: LD_INT 120
35524: PUSH
35525: LD_INT 30
35527: PUSH
35528: LD_INT 80
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: LIST
35535: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35536: LD_VAR 0 6
35540: PPUSH
35541: CALL_OW 264
35545: PUSH
35546: LD_INT 22
35548: PUSH
35549: EMPTY
35550: LIST
35551: IN
35552: IFFALSE 35573
// points := [ 40 , 1 , 1 ] ;
35554: LD_ADDR_VAR 0 9
35558: PUSH
35559: LD_INT 40
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35573: LD_VAR 0 6
35577: PPUSH
35578: CALL_OW 264
35582: PUSH
35583: LD_INT 29
35585: PUSH
35586: EMPTY
35587: LIST
35588: IN
35589: IFFALSE 35610
// points := [ 70 , 200 , 400 ] ;
35591: LD_ADDR_VAR 0 9
35595: PUSH
35596: LD_INT 70
35598: PUSH
35599: LD_INT 200
35601: PUSH
35602: LD_INT 400
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35610: LD_VAR 0 6
35614: PPUSH
35615: CALL_OW 264
35619: PUSH
35620: LD_INT 14
35622: PUSH
35623: LD_INT 53
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: IN
35630: IFFALSE 35651
// points := [ 40 , 10 , 20 ] ;
35632: LD_ADDR_VAR 0 9
35636: PUSH
35637: LD_INT 40
35639: PUSH
35640: LD_INT 10
35642: PUSH
35643: LD_INT 20
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35651: LD_VAR 0 6
35655: PPUSH
35656: CALL_OW 264
35660: PUSH
35661: LD_INT 9
35663: PUSH
35664: EMPTY
35665: LIST
35666: IN
35667: IFFALSE 35688
// points := [ 5 , 70 , 20 ] ;
35669: LD_ADDR_VAR 0 9
35673: PUSH
35674: LD_INT 5
35676: PUSH
35677: LD_INT 70
35679: PUSH
35680: LD_INT 20
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: LIST
35687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35688: LD_VAR 0 6
35692: PPUSH
35693: CALL_OW 264
35697: PUSH
35698: LD_INT 10
35700: PUSH
35701: EMPTY
35702: LIST
35703: IN
35704: IFFALSE 35725
// points := [ 35 , 110 , 70 ] ;
35706: LD_ADDR_VAR 0 9
35710: PUSH
35711: LD_INT 35
35713: PUSH
35714: LD_INT 110
35716: PUSH
35717: LD_INT 70
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35725: LD_VAR 0 6
35729: PPUSH
35730: CALL_OW 265
35734: PUSH
35735: LD_INT 25
35737: EQUAL
35738: IFFALSE 35759
// points := [ 80 , 65 , 100 ] ;
35740: LD_ADDR_VAR 0 9
35744: PUSH
35745: LD_INT 80
35747: PUSH
35748: LD_INT 65
35750: PUSH
35751: LD_INT 100
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: LIST
35758: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35759: LD_VAR 0 6
35763: PPUSH
35764: CALL_OW 263
35768: PUSH
35769: LD_INT 1
35771: EQUAL
35772: IFFALSE 35807
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35774: LD_ADDR_VAR 0 10
35778: PUSH
35779: LD_VAR 0 10
35783: PUSH
35784: LD_VAR 0 6
35788: PPUSH
35789: CALL_OW 311
35793: PPUSH
35794: LD_INT 3
35796: PPUSH
35797: CALL_OW 259
35801: PUSH
35802: LD_INT 4
35804: MUL
35805: MUL
35806: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35807: LD_VAR 0 6
35811: PPUSH
35812: CALL_OW 263
35816: PUSH
35817: LD_INT 2
35819: EQUAL
35820: IFFALSE 35871
// begin j := IsControledBy ( i ) ;
35822: LD_ADDR_VAR 0 7
35826: PUSH
35827: LD_VAR 0 6
35831: PPUSH
35832: CALL_OW 312
35836: ST_TO_ADDR
// if j then
35837: LD_VAR 0 7
35841: IFFALSE 35871
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35843: LD_ADDR_VAR 0 10
35847: PUSH
35848: LD_VAR 0 10
35852: PUSH
35853: LD_VAR 0 7
35857: PPUSH
35858: LD_INT 3
35860: PPUSH
35861: CALL_OW 259
35865: PUSH
35866: LD_INT 3
35868: MUL
35869: MUL
35870: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35871: LD_VAR 0 6
35875: PPUSH
35876: CALL_OW 264
35880: PUSH
35881: LD_INT 5
35883: PUSH
35884: LD_INT 6
35886: PUSH
35887: LD_INT 46
35889: PUSH
35890: LD_INT 44
35892: PUSH
35893: LD_INT 47
35895: PUSH
35896: LD_INT 45
35898: PUSH
35899: LD_INT 28
35901: PUSH
35902: LD_INT 7
35904: PUSH
35905: LD_INT 27
35907: PUSH
35908: LD_INT 29
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: IN
35923: IFFALSE 35943
35925: PUSH
35926: LD_VAR 0 1
35930: PPUSH
35931: LD_INT 52
35933: PPUSH
35934: CALL_OW 321
35938: PUSH
35939: LD_INT 2
35941: EQUAL
35942: AND
35943: IFFALSE 35960
// bpoints := bpoints * 1.2 ;
35945: LD_ADDR_VAR 0 10
35949: PUSH
35950: LD_VAR 0 10
35954: PUSH
35955: LD_REAL  1.20000000000000E+0000
35958: MUL
35959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35960: LD_VAR 0 6
35964: PPUSH
35965: CALL_OW 264
35969: PUSH
35970: LD_INT 6
35972: PUSH
35973: LD_INT 46
35975: PUSH
35976: LD_INT 47
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: IN
35984: IFFALSE 36001
// bpoints := bpoints * 1.2 ;
35986: LD_ADDR_VAR 0 10
35990: PUSH
35991: LD_VAR 0 10
35995: PUSH
35996: LD_REAL  1.20000000000000E+0000
35999: MUL
36000: ST_TO_ADDR
// end ; unit_building :
36001: GO 36015
36003: LD_INT 3
36005: DOUBLE
36006: EQUAL
36007: IFTRUE 36011
36009: GO 36014
36011: POP
// ; end ;
36012: GO 36015
36014: POP
// for j = 1 to 3 do
36015: LD_ADDR_VAR 0 7
36019: PUSH
36020: DOUBLE
36021: LD_INT 1
36023: DEC
36024: ST_TO_ADDR
36025: LD_INT 3
36027: PUSH
36028: FOR_TO
36029: IFFALSE 36082
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36031: LD_ADDR_VAR 0 5
36035: PUSH
36036: LD_VAR 0 5
36040: PPUSH
36041: LD_VAR 0 7
36045: PPUSH
36046: LD_VAR 0 5
36050: PUSH
36051: LD_VAR 0 7
36055: ARRAY
36056: PUSH
36057: LD_VAR 0 9
36061: PUSH
36062: LD_VAR 0 7
36066: ARRAY
36067: PUSH
36068: LD_VAR 0 10
36072: MUL
36073: PLUS
36074: PPUSH
36075: CALL_OW 1
36079: ST_TO_ADDR
36080: GO 36028
36082: POP
36083: POP
// end ;
36084: GO 34557
36086: POP
36087: POP
// result := Replace ( result , 4 , tmp ) ;
36088: LD_ADDR_VAR 0 5
36092: PUSH
36093: LD_VAR 0 5
36097: PPUSH
36098: LD_INT 4
36100: PPUSH
36101: LD_VAR 0 8
36105: PPUSH
36106: CALL_OW 1
36110: ST_TO_ADDR
// end ;
36111: LD_VAR 0 5
36115: RET
// export function DangerAtRange ( unit , range ) ; begin
36116: LD_INT 0
36118: PPUSH
// if not unit then
36119: LD_VAR 0 1
36123: NOT
36124: IFFALSE 36128
// exit ;
36126: GO 36173
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36128: LD_ADDR_VAR 0 3
36132: PUSH
36133: LD_VAR 0 1
36137: PPUSH
36138: CALL_OW 255
36142: PPUSH
36143: LD_VAR 0 1
36147: PPUSH
36148: CALL_OW 250
36152: PPUSH
36153: LD_VAR 0 1
36157: PPUSH
36158: CALL_OW 251
36162: PPUSH
36163: LD_VAR 0 2
36167: PPUSH
36168: CALL 34407 0 4
36172: ST_TO_ADDR
// end ;
36173: LD_VAR 0 3
36177: RET
// export function DangerInArea ( side , area ) ; begin
36178: LD_INT 0
36180: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36181: LD_ADDR_VAR 0 3
36185: PUSH
36186: LD_VAR 0 2
36190: PPUSH
36191: LD_INT 81
36193: PUSH
36194: LD_VAR 0 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PPUSH
36203: CALL_OW 70
36207: ST_TO_ADDR
// end ;
36208: LD_VAR 0 3
36212: RET
// export function IsExtension ( b ) ; begin
36213: LD_INT 0
36215: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36216: LD_ADDR_VAR 0 2
36220: PUSH
36221: LD_VAR 0 1
36225: PUSH
36226: LD_INT 23
36228: PUSH
36229: LD_INT 20
36231: PUSH
36232: LD_INT 22
36234: PUSH
36235: LD_INT 17
36237: PUSH
36238: LD_INT 24
36240: PUSH
36241: LD_INT 21
36243: PUSH
36244: LD_INT 19
36246: PUSH
36247: LD_INT 16
36249: PUSH
36250: LD_INT 25
36252: PUSH
36253: LD_INT 18
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: IN
36268: ST_TO_ADDR
// end ;
36269: LD_VAR 0 2
36273: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36274: LD_INT 0
36276: PPUSH
36277: PPUSH
36278: PPUSH
// result := [ ] ;
36279: LD_ADDR_VAR 0 4
36283: PUSH
36284: EMPTY
36285: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36286: LD_ADDR_VAR 0 5
36290: PUSH
36291: LD_VAR 0 2
36295: PPUSH
36296: LD_INT 21
36298: PUSH
36299: LD_INT 3
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PPUSH
36306: CALL_OW 70
36310: ST_TO_ADDR
// if not tmp then
36311: LD_VAR 0 5
36315: NOT
36316: IFFALSE 36320
// exit ;
36318: GO 36384
// if checkLink then
36320: LD_VAR 0 3
36324: IFFALSE 36374
// begin for i in tmp do
36326: LD_ADDR_VAR 0 6
36330: PUSH
36331: LD_VAR 0 5
36335: PUSH
36336: FOR_IN
36337: IFFALSE 36372
// if GetBase ( i ) <> base then
36339: LD_VAR 0 6
36343: PPUSH
36344: CALL_OW 274
36348: PUSH
36349: LD_VAR 0 1
36353: NONEQUAL
36354: IFFALSE 36370
// ComLinkToBase ( base , i ) ;
36356: LD_VAR 0 1
36360: PPUSH
36361: LD_VAR 0 6
36365: PPUSH
36366: CALL_OW 169
36370: GO 36336
36372: POP
36373: POP
// end ; result := tmp ;
36374: LD_ADDR_VAR 0 4
36378: PUSH
36379: LD_VAR 0 5
36383: ST_TO_ADDR
// end ;
36384: LD_VAR 0 4
36388: RET
// export function ComComplete ( units , b ) ; var i ; begin
36389: LD_INT 0
36391: PPUSH
36392: PPUSH
// if not units then
36393: LD_VAR 0 1
36397: NOT
36398: IFFALSE 36402
// exit ;
36400: GO 36492
// for i in units do
36402: LD_ADDR_VAR 0 4
36406: PUSH
36407: LD_VAR 0 1
36411: PUSH
36412: FOR_IN
36413: IFFALSE 36490
// if BuildingStatus ( b ) = bs_build then
36415: LD_VAR 0 2
36419: PPUSH
36420: CALL_OW 461
36424: PUSH
36425: LD_INT 1
36427: EQUAL
36428: IFFALSE 36488
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36430: LD_VAR 0 4
36434: PPUSH
36435: LD_STRING h
36437: PUSH
36438: LD_VAR 0 2
36442: PPUSH
36443: CALL_OW 250
36447: PUSH
36448: LD_VAR 0 2
36452: PPUSH
36453: CALL_OW 251
36457: PUSH
36458: LD_VAR 0 2
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: PUSH
36481: EMPTY
36482: LIST
36483: PPUSH
36484: CALL_OW 446
36488: GO 36412
36490: POP
36491: POP
// end ;
36492: LD_VAR 0 3
36496: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36497: LD_INT 0
36499: PPUSH
36500: PPUSH
36501: PPUSH
36502: PPUSH
36503: PPUSH
36504: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36505: LD_VAR 0 1
36509: NOT
36510: IFTRUE 36527
36512: PUSH
36513: LD_VAR 0 1
36517: PPUSH
36518: CALL_OW 263
36522: PUSH
36523: LD_INT 2
36525: NONEQUAL
36526: OR
36527: IFFALSE 36531
// exit ;
36529: GO 36847
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36531: LD_ADDR_VAR 0 6
36535: PUSH
36536: LD_INT 22
36538: PUSH
36539: LD_VAR 0 1
36543: PPUSH
36544: CALL_OW 255
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: LD_INT 30
36558: PUSH
36559: LD_INT 36
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 34
36568: PUSH
36569: LD_INT 31
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PPUSH
36585: CALL_OW 69
36589: ST_TO_ADDR
// if not tmp then
36590: LD_VAR 0 6
36594: NOT
36595: IFFALSE 36599
// exit ;
36597: GO 36847
// result := [ ] ;
36599: LD_ADDR_VAR 0 2
36603: PUSH
36604: EMPTY
36605: ST_TO_ADDR
// for i in tmp do
36606: LD_ADDR_VAR 0 3
36610: PUSH
36611: LD_VAR 0 6
36615: PUSH
36616: FOR_IN
36617: IFFALSE 36688
// begin t := UnitsInside ( i ) ;
36619: LD_ADDR_VAR 0 4
36623: PUSH
36624: LD_VAR 0 3
36628: PPUSH
36629: CALL_OW 313
36633: ST_TO_ADDR
// if t then
36634: LD_VAR 0 4
36638: IFFALSE 36686
// for j in t do
36640: LD_ADDR_VAR 0 7
36644: PUSH
36645: LD_VAR 0 4
36649: PUSH
36650: FOR_IN
36651: IFFALSE 36684
// result := Replace ( result , result + 1 , j ) ;
36653: LD_ADDR_VAR 0 2
36657: PUSH
36658: LD_VAR 0 2
36662: PPUSH
36663: LD_VAR 0 2
36667: PUSH
36668: LD_INT 1
36670: PLUS
36671: PPUSH
36672: LD_VAR 0 7
36676: PPUSH
36677: CALL_OW 1
36681: ST_TO_ADDR
36682: GO 36650
36684: POP
36685: POP
// end ;
36686: GO 36616
36688: POP
36689: POP
// if not result then
36690: LD_VAR 0 2
36694: NOT
36695: IFFALSE 36699
// exit ;
36697: GO 36847
// mech := result [ 1 ] ;
36699: LD_ADDR_VAR 0 5
36703: PUSH
36704: LD_VAR 0 2
36708: PUSH
36709: LD_INT 1
36711: ARRAY
36712: ST_TO_ADDR
// if result > 1 then
36713: LD_VAR 0 2
36717: PUSH
36718: LD_INT 1
36720: GREATER
36721: IFFALSE 36833
// begin for i = 2 to result do
36723: LD_ADDR_VAR 0 3
36727: PUSH
36728: DOUBLE
36729: LD_INT 2
36731: DEC
36732: ST_TO_ADDR
36733: LD_VAR 0 2
36737: PUSH
36738: FOR_TO
36739: IFFALSE 36831
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36741: LD_ADDR_VAR 0 4
36745: PUSH
36746: LD_VAR 0 2
36750: PUSH
36751: LD_VAR 0 3
36755: ARRAY
36756: PPUSH
36757: LD_INT 3
36759: PPUSH
36760: CALL_OW 259
36764: PUSH
36765: LD_VAR 0 2
36769: PUSH
36770: LD_VAR 0 3
36774: ARRAY
36775: PPUSH
36776: CALL_OW 432
36780: MINUS
36781: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36782: LD_VAR 0 4
36786: PUSH
36787: LD_VAR 0 5
36791: PPUSH
36792: LD_INT 3
36794: PPUSH
36795: CALL_OW 259
36799: PUSH
36800: LD_VAR 0 5
36804: PPUSH
36805: CALL_OW 432
36809: MINUS
36810: GREATEREQUAL
36811: IFFALSE 36829
// mech := result [ i ] ;
36813: LD_ADDR_VAR 0 5
36817: PUSH
36818: LD_VAR 0 2
36822: PUSH
36823: LD_VAR 0 3
36827: ARRAY
36828: ST_TO_ADDR
// end ;
36829: GO 36738
36831: POP
36832: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36833: LD_VAR 0 1
36837: PPUSH
36838: LD_VAR 0 5
36842: PPUSH
36843: CALL_OW 135
// end ;
36847: LD_VAR 0 2
36851: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36852: LD_INT 0
36854: PPUSH
36855: PPUSH
36856: PPUSH
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
36861: PPUSH
36862: PPUSH
36863: PPUSH
36864: PPUSH
36865: PPUSH
36866: PPUSH
// result := [ ] ;
36867: LD_ADDR_VAR 0 7
36871: PUSH
36872: EMPTY
36873: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36874: LD_VAR 0 1
36878: PPUSH
36879: CALL_OW 266
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: IN
36894: NOT
36895: IFFALSE 36899
// exit ;
36897: GO 38539
// if name then
36899: LD_VAR 0 3
36903: IFFALSE 36919
// SetBName ( base_dep , name ) ;
36905: LD_VAR 0 1
36909: PPUSH
36910: LD_VAR 0 3
36914: PPUSH
36915: CALL_OW 500
// base := GetBase ( base_dep ) ;
36919: LD_ADDR_VAR 0 15
36923: PUSH
36924: LD_VAR 0 1
36928: PPUSH
36929: CALL_OW 274
36933: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36934: LD_ADDR_VAR 0 16
36938: PUSH
36939: LD_VAR 0 1
36943: PPUSH
36944: CALL_OW 255
36948: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36949: LD_ADDR_VAR 0 17
36953: PUSH
36954: LD_VAR 0 1
36958: PPUSH
36959: CALL_OW 248
36963: ST_TO_ADDR
// if sources then
36964: LD_VAR 0 5
36968: IFFALSE 37015
// for i = 1 to 3 do
36970: LD_ADDR_VAR 0 8
36974: PUSH
36975: DOUBLE
36976: LD_INT 1
36978: DEC
36979: ST_TO_ADDR
36980: LD_INT 3
36982: PUSH
36983: FOR_TO
36984: IFFALSE 37013
// AddResourceType ( base , i , sources [ i ] ) ;
36986: LD_VAR 0 15
36990: PPUSH
36991: LD_VAR 0 8
36995: PPUSH
36996: LD_VAR 0 5
37000: PUSH
37001: LD_VAR 0 8
37005: ARRAY
37006: PPUSH
37007: CALL_OW 276
37011: GO 36983
37013: POP
37014: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37015: LD_ADDR_VAR 0 18
37019: PUSH
37020: LD_VAR 0 15
37024: PPUSH
37025: LD_VAR 0 2
37029: PPUSH
37030: LD_INT 1
37032: PPUSH
37033: CALL 36274 0 3
37037: ST_TO_ADDR
// InitHc ;
37038: CALL_OW 19
// InitUc ;
37042: CALL_OW 18
// uc_side := side ;
37046: LD_ADDR_OWVAR 20
37050: PUSH
37051: LD_VAR 0 16
37055: ST_TO_ADDR
// uc_nation := nation ;
37056: LD_ADDR_OWVAR 21
37060: PUSH
37061: LD_VAR 0 17
37065: ST_TO_ADDR
// if buildings then
37066: LD_VAR 0 18
37070: IFFALSE 38398
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37072: LD_ADDR_VAR 0 19
37076: PUSH
37077: LD_VAR 0 18
37081: PPUSH
37082: LD_INT 2
37084: PUSH
37085: LD_INT 30
37087: PUSH
37088: LD_INT 29
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 30
37097: PUSH
37098: LD_INT 30
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: LIST
37109: PPUSH
37110: CALL_OW 72
37114: ST_TO_ADDR
// if tmp then
37115: LD_VAR 0 19
37119: IFFALSE 37167
// for i in tmp do
37121: LD_ADDR_VAR 0 8
37125: PUSH
37126: LD_VAR 0 19
37130: PUSH
37131: FOR_IN
37132: IFFALSE 37165
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37134: LD_VAR 0 8
37138: PPUSH
37139: CALL_OW 250
37143: PPUSH
37144: LD_VAR 0 8
37148: PPUSH
37149: CALL_OW 251
37153: PPUSH
37154: LD_VAR 0 16
37158: PPUSH
37159: CALL_OW 441
37163: GO 37131
37165: POP
37166: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37167: LD_VAR 0 18
37171: PPUSH
37172: LD_INT 2
37174: PUSH
37175: LD_INT 30
37177: PUSH
37178: LD_INT 32
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 30
37187: PUSH
37188: LD_INT 33
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: PPUSH
37200: CALL_OW 72
37204: IFFALSE 37292
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37206: LD_ADDR_VAR 0 8
37210: PUSH
37211: LD_VAR 0 18
37215: PPUSH
37216: LD_INT 2
37218: PUSH
37219: LD_INT 30
37221: PUSH
37222: LD_INT 32
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 30
37231: PUSH
37232: LD_INT 33
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: PPUSH
37244: CALL_OW 72
37248: PUSH
37249: FOR_IN
37250: IFFALSE 37290
// begin if not GetBWeapon ( i ) then
37252: LD_VAR 0 8
37256: PPUSH
37257: CALL_OW 269
37261: NOT
37262: IFFALSE 37288
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37264: LD_VAR 0 8
37268: PPUSH
37269: LD_VAR 0 8
37273: PPUSH
37274: LD_VAR 0 2
37278: PPUSH
37279: CALL 38544 0 2
37283: PPUSH
37284: CALL_OW 431
// end ;
37288: GO 37249
37290: POP
37291: POP
// end ; for i = 1 to personel do
37292: LD_ADDR_VAR 0 8
37296: PUSH
37297: DOUBLE
37298: LD_INT 1
37300: DEC
37301: ST_TO_ADDR
37302: LD_VAR 0 6
37306: PUSH
37307: FOR_TO
37308: IFFALSE 38378
// begin if i > 4 then
37310: LD_VAR 0 8
37314: PUSH
37315: LD_INT 4
37317: GREATER
37318: IFFALSE 37322
// break ;
37320: GO 38378
// case i of 1 :
37322: LD_VAR 0 8
37326: PUSH
37327: LD_INT 1
37329: DOUBLE
37330: EQUAL
37331: IFTRUE 37335
37333: GO 37415
37335: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37336: LD_ADDR_VAR 0 12
37340: PUSH
37341: LD_VAR 0 18
37345: PPUSH
37346: LD_INT 22
37348: PUSH
37349: LD_VAR 0 16
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 58
37360: PUSH
37361: EMPTY
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: LD_INT 30
37369: PUSH
37370: LD_INT 32
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 30
37379: PUSH
37380: LD_INT 4
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 30
37389: PUSH
37390: LD_INT 5
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: LIST
37407: PPUSH
37408: CALL_OW 72
37412: ST_TO_ADDR
37413: GO 37637
37415: LD_INT 2
37417: DOUBLE
37418: EQUAL
37419: IFTRUE 37423
37421: GO 37485
37423: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37424: LD_ADDR_VAR 0 12
37428: PUSH
37429: LD_VAR 0 18
37433: PPUSH
37434: LD_INT 22
37436: PUSH
37437: LD_VAR 0 16
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: LD_INT 30
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 30
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: LIST
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PPUSH
37478: CALL_OW 72
37482: ST_TO_ADDR
37483: GO 37637
37485: LD_INT 3
37487: DOUBLE
37488: EQUAL
37489: IFTRUE 37493
37491: GO 37555
37493: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37494: LD_ADDR_VAR 0 12
37498: PUSH
37499: LD_VAR 0 18
37503: PPUSH
37504: LD_INT 22
37506: PUSH
37507: LD_VAR 0 16
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: LD_INT 30
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 30
37531: PUSH
37532: LD_INT 3
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PPUSH
37548: CALL_OW 72
37552: ST_TO_ADDR
37553: GO 37637
37555: LD_INT 4
37557: DOUBLE
37558: EQUAL
37559: IFTRUE 37563
37561: GO 37636
37563: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37564: LD_ADDR_VAR 0 12
37568: PUSH
37569: LD_VAR 0 18
37573: PPUSH
37574: LD_INT 22
37576: PUSH
37577: LD_VAR 0 16
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 2
37588: PUSH
37589: LD_INT 30
37591: PUSH
37592: LD_INT 6
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 30
37601: PUSH
37602: LD_INT 7
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 30
37611: PUSH
37612: LD_INT 8
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PPUSH
37629: CALL_OW 72
37633: ST_TO_ADDR
37634: GO 37637
37636: POP
// if i = 1 then
37637: LD_VAR 0 8
37641: PUSH
37642: LD_INT 1
37644: EQUAL
37645: IFFALSE 37756
// begin tmp := [ ] ;
37647: LD_ADDR_VAR 0 19
37651: PUSH
37652: EMPTY
37653: ST_TO_ADDR
// for j in f do
37654: LD_ADDR_VAR 0 9
37658: PUSH
37659: LD_VAR 0 12
37663: PUSH
37664: FOR_IN
37665: IFFALSE 37738
// if GetBType ( j ) = b_bunker then
37667: LD_VAR 0 9
37671: PPUSH
37672: CALL_OW 266
37676: PUSH
37677: LD_INT 32
37679: EQUAL
37680: IFFALSE 37707
// tmp := Insert ( tmp , 1 , j ) else
37682: LD_ADDR_VAR 0 19
37686: PUSH
37687: LD_VAR 0 19
37691: PPUSH
37692: LD_INT 1
37694: PPUSH
37695: LD_VAR 0 9
37699: PPUSH
37700: CALL_OW 2
37704: ST_TO_ADDR
37705: GO 37736
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37707: LD_ADDR_VAR 0 19
37711: PUSH
37712: LD_VAR 0 19
37716: PPUSH
37717: LD_VAR 0 19
37721: PUSH
37722: LD_INT 1
37724: PLUS
37725: PPUSH
37726: LD_VAR 0 9
37730: PPUSH
37731: CALL_OW 2
37735: ST_TO_ADDR
37736: GO 37664
37738: POP
37739: POP
// if tmp then
37740: LD_VAR 0 19
37744: IFFALSE 37756
// f := tmp ;
37746: LD_ADDR_VAR 0 12
37750: PUSH
37751: LD_VAR 0 19
37755: ST_TO_ADDR
// end ; x := personel [ i ] ;
37756: LD_ADDR_VAR 0 13
37760: PUSH
37761: LD_VAR 0 6
37765: PUSH
37766: LD_VAR 0 8
37770: ARRAY
37771: ST_TO_ADDR
// if x = - 1 then
37772: LD_VAR 0 13
37776: PUSH
37777: LD_INT 1
37779: NEG
37780: EQUAL
37781: IFFALSE 37992
// begin for j in f do
37783: LD_ADDR_VAR 0 9
37787: PUSH
37788: LD_VAR 0 12
37792: PUSH
37793: FOR_IN
37794: IFFALSE 37988
// repeat InitHc ;
37796: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37800: LD_VAR 0 9
37804: PPUSH
37805: CALL_OW 266
37809: PUSH
37810: LD_INT 5
37812: EQUAL
37813: IFFALSE 37883
// begin if UnitsInside ( j ) < 3 then
37815: LD_VAR 0 9
37819: PPUSH
37820: CALL_OW 313
37824: PUSH
37825: LD_INT 3
37827: LESS
37828: IFFALSE 37864
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37830: LD_INT 0
37832: PPUSH
37833: LD_INT 5
37835: PUSH
37836: LD_INT 8
37838: PUSH
37839: LD_INT 9
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: PUSH
37847: LD_VAR 0 17
37851: ARRAY
37852: PPUSH
37853: LD_VAR 0 4
37857: PPUSH
37858: CALL_OW 380
37862: GO 37881
// PrepareHuman ( false , i , skill ) ;
37864: LD_INT 0
37866: PPUSH
37867: LD_VAR 0 8
37871: PPUSH
37872: LD_VAR 0 4
37876: PPUSH
37877: CALL_OW 380
// end else
37881: GO 37900
// PrepareHuman ( false , i , skill ) ;
37883: LD_INT 0
37885: PPUSH
37886: LD_VAR 0 8
37890: PPUSH
37891: LD_VAR 0 4
37895: PPUSH
37896: CALL_OW 380
// un := CreateHuman ;
37900: LD_ADDR_VAR 0 14
37904: PUSH
37905: CALL_OW 44
37909: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37910: LD_ADDR_VAR 0 7
37914: PUSH
37915: LD_VAR 0 7
37919: PPUSH
37920: LD_INT 1
37922: PPUSH
37923: LD_VAR 0 14
37927: PPUSH
37928: CALL_OW 2
37932: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37933: LD_VAR 0 14
37937: PPUSH
37938: LD_VAR 0 9
37942: PPUSH
37943: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37947: LD_VAR 0 9
37951: PPUSH
37952: CALL_OW 313
37956: PUSH
37957: LD_INT 6
37959: EQUAL
37960: IFTRUE 37984
37962: PUSH
37963: LD_VAR 0 9
37967: PPUSH
37968: CALL_OW 266
37972: PUSH
37973: LD_INT 32
37975: PUSH
37976: LD_INT 31
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: IN
37983: OR
37984: IFFALSE 37796
37986: GO 37793
37988: POP
37989: POP
// end else
37990: GO 38376
// for j = 1 to x do
37992: LD_ADDR_VAR 0 9
37996: PUSH
37997: DOUBLE
37998: LD_INT 1
38000: DEC
38001: ST_TO_ADDR
38002: LD_VAR 0 13
38006: PUSH
38007: FOR_TO
38008: IFFALSE 38374
// begin InitHc ;
38010: CALL_OW 19
// if not f then
38014: LD_VAR 0 12
38018: NOT
38019: IFFALSE 38108
// begin PrepareHuman ( false , i , skill ) ;
38021: LD_INT 0
38023: PPUSH
38024: LD_VAR 0 8
38028: PPUSH
38029: LD_VAR 0 4
38033: PPUSH
38034: CALL_OW 380
// un := CreateHuman ;
38038: LD_ADDR_VAR 0 14
38042: PUSH
38043: CALL_OW 44
38047: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38048: LD_ADDR_VAR 0 7
38052: PUSH
38053: LD_VAR 0 7
38057: PPUSH
38058: LD_INT 1
38060: PPUSH
38061: LD_VAR 0 14
38065: PPUSH
38066: CALL_OW 2
38070: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38071: LD_VAR 0 14
38075: PPUSH
38076: LD_VAR 0 1
38080: PPUSH
38081: CALL_OW 250
38085: PPUSH
38086: LD_VAR 0 1
38090: PPUSH
38091: CALL_OW 251
38095: PPUSH
38096: LD_INT 10
38098: PPUSH
38099: LD_INT 0
38101: PPUSH
38102: CALL_OW 50
// continue ;
38106: GO 38007
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38108: LD_VAR 0 12
38112: PUSH
38113: LD_INT 1
38115: ARRAY
38116: PPUSH
38117: CALL_OW 313
38121: IFFALSE 38149
38123: PUSH
38124: LD_VAR 0 12
38128: PUSH
38129: LD_INT 1
38131: ARRAY
38132: PPUSH
38133: CALL_OW 266
38137: PUSH
38138: LD_INT 32
38140: PUSH
38141: LD_INT 31
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: IN
38148: AND
38149: IFTRUE 38170
38151: PUSH
38152: LD_VAR 0 12
38156: PUSH
38157: LD_INT 1
38159: ARRAY
38160: PPUSH
38161: CALL_OW 313
38165: PUSH
38166: LD_INT 6
38168: EQUAL
38169: OR
38170: IFFALSE 38190
// f := Delete ( f , 1 ) ;
38172: LD_ADDR_VAR 0 12
38176: PUSH
38177: LD_VAR 0 12
38181: PPUSH
38182: LD_INT 1
38184: PPUSH
38185: CALL_OW 3
38189: ST_TO_ADDR
// if not f then
38190: LD_VAR 0 12
38194: NOT
38195: IFFALSE 38213
// begin x := x + 2 ;
38197: LD_ADDR_VAR 0 13
38201: PUSH
38202: LD_VAR 0 13
38206: PUSH
38207: LD_INT 2
38209: PLUS
38210: ST_TO_ADDR
// continue ;
38211: GO 38007
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38213: LD_VAR 0 12
38217: PUSH
38218: LD_INT 1
38220: ARRAY
38221: PPUSH
38222: CALL_OW 266
38226: PUSH
38227: LD_INT 5
38229: EQUAL
38230: IFFALSE 38304
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38232: LD_VAR 0 12
38236: PUSH
38237: LD_INT 1
38239: ARRAY
38240: PPUSH
38241: CALL_OW 313
38245: PUSH
38246: LD_INT 3
38248: LESS
38249: IFFALSE 38285
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38251: LD_INT 0
38253: PPUSH
38254: LD_INT 5
38256: PUSH
38257: LD_INT 8
38259: PUSH
38260: LD_INT 9
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: PUSH
38268: LD_VAR 0 17
38272: ARRAY
38273: PPUSH
38274: LD_VAR 0 4
38278: PPUSH
38279: CALL_OW 380
38283: GO 38302
// PrepareHuman ( false , i , skill ) ;
38285: LD_INT 0
38287: PPUSH
38288: LD_VAR 0 8
38292: PPUSH
38293: LD_VAR 0 4
38297: PPUSH
38298: CALL_OW 380
// end else
38302: GO 38321
// PrepareHuman ( false , i , skill ) ;
38304: LD_INT 0
38306: PPUSH
38307: LD_VAR 0 8
38311: PPUSH
38312: LD_VAR 0 4
38316: PPUSH
38317: CALL_OW 380
// un := CreateHuman ;
38321: LD_ADDR_VAR 0 14
38325: PUSH
38326: CALL_OW 44
38330: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38331: LD_ADDR_VAR 0 7
38335: PUSH
38336: LD_VAR 0 7
38340: PPUSH
38341: LD_INT 1
38343: PPUSH
38344: LD_VAR 0 14
38348: PPUSH
38349: CALL_OW 2
38353: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38354: LD_VAR 0 14
38358: PPUSH
38359: LD_VAR 0 12
38363: PUSH
38364: LD_INT 1
38366: ARRAY
38367: PPUSH
38368: CALL_OW 52
// end ;
38372: GO 38007
38374: POP
38375: POP
// end ;
38376: GO 37307
38378: POP
38379: POP
// result := result ^ buildings ;
38380: LD_ADDR_VAR 0 7
38384: PUSH
38385: LD_VAR 0 7
38389: PUSH
38390: LD_VAR 0 18
38394: ADD
38395: ST_TO_ADDR
// end else
38396: GO 38539
// begin for i = 1 to personel do
38398: LD_ADDR_VAR 0 8
38402: PUSH
38403: DOUBLE
38404: LD_INT 1
38406: DEC
38407: ST_TO_ADDR
38408: LD_VAR 0 6
38412: PUSH
38413: FOR_TO
38414: IFFALSE 38537
// begin if i > 4 then
38416: LD_VAR 0 8
38420: PUSH
38421: LD_INT 4
38423: GREATER
38424: IFFALSE 38428
// break ;
38426: GO 38537
// x := personel [ i ] ;
38428: LD_ADDR_VAR 0 13
38432: PUSH
38433: LD_VAR 0 6
38437: PUSH
38438: LD_VAR 0 8
38442: ARRAY
38443: ST_TO_ADDR
// if x = - 1 then
38444: LD_VAR 0 13
38448: PUSH
38449: LD_INT 1
38451: NEG
38452: EQUAL
38453: IFFALSE 38457
// continue ;
38455: GO 38413
// PrepareHuman ( false , i , skill ) ;
38457: LD_INT 0
38459: PPUSH
38460: LD_VAR 0 8
38464: PPUSH
38465: LD_VAR 0 4
38469: PPUSH
38470: CALL_OW 380
// un := CreateHuman ;
38474: LD_ADDR_VAR 0 14
38478: PUSH
38479: CALL_OW 44
38483: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38484: LD_VAR 0 14
38488: PPUSH
38489: LD_VAR 0 1
38493: PPUSH
38494: CALL_OW 250
38498: PPUSH
38499: LD_VAR 0 1
38503: PPUSH
38504: CALL_OW 251
38508: PPUSH
38509: LD_INT 10
38511: PPUSH
38512: LD_INT 0
38514: PPUSH
38515: CALL_OW 50
// result := result ^ un ;
38519: LD_ADDR_VAR 0 7
38523: PUSH
38524: LD_VAR 0 7
38528: PUSH
38529: LD_VAR 0 14
38533: ADD
38534: ST_TO_ADDR
// end ;
38535: GO 38413
38537: POP
38538: POP
// end ; end ;
38539: LD_VAR 0 7
38543: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38544: LD_INT 0
38546: PPUSH
38547: PPUSH
38548: PPUSH
38549: PPUSH
38550: PPUSH
38551: PPUSH
38552: PPUSH
38553: PPUSH
38554: PPUSH
38555: PPUSH
38556: PPUSH
38557: PPUSH
38558: PPUSH
38559: PPUSH
38560: PPUSH
38561: PPUSH
// result := false ;
38562: LD_ADDR_VAR 0 3
38566: PUSH
38567: LD_INT 0
38569: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38570: LD_VAR 0 1
38574: NOT
38575: IFTRUE 38600
38577: PUSH
38578: LD_VAR 0 1
38582: PPUSH
38583: CALL_OW 266
38587: PUSH
38588: LD_INT 32
38590: PUSH
38591: LD_INT 33
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: IN
38598: NOT
38599: OR
38600: IFFALSE 38604
// exit ;
38602: GO 39739
// nat := GetNation ( tower ) ;
38604: LD_ADDR_VAR 0 12
38608: PUSH
38609: LD_VAR 0 1
38613: PPUSH
38614: CALL_OW 248
38618: ST_TO_ADDR
// side := GetSide ( tower ) ;
38619: LD_ADDR_VAR 0 16
38623: PUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: CALL_OW 255
38633: ST_TO_ADDR
// x := GetX ( tower ) ;
38634: LD_ADDR_VAR 0 10
38638: PUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL_OW 250
38648: ST_TO_ADDR
// y := GetY ( tower ) ;
38649: LD_ADDR_VAR 0 11
38653: PUSH
38654: LD_VAR 0 1
38658: PPUSH
38659: CALL_OW 251
38663: ST_TO_ADDR
// if not x or not y then
38664: LD_VAR 0 10
38668: NOT
38669: IFTRUE 38678
38671: PUSH
38672: LD_VAR 0 11
38676: NOT
38677: OR
38678: IFFALSE 38682
// exit ;
38680: GO 39739
// weapon := 0 ;
38682: LD_ADDR_VAR 0 18
38686: PUSH
38687: LD_INT 0
38689: ST_TO_ADDR
// fac_list := [ ] ;
38690: LD_ADDR_VAR 0 17
38694: PUSH
38695: EMPTY
38696: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38697: LD_ADDR_VAR 0 6
38701: PUSH
38702: LD_VAR 0 1
38706: PPUSH
38707: CALL_OW 274
38711: PPUSH
38712: LD_VAR 0 2
38716: PPUSH
38717: LD_INT 0
38719: PPUSH
38720: CALL 36274 0 3
38724: PPUSH
38725: LD_INT 30
38727: PUSH
38728: LD_INT 3
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PPUSH
38735: CALL_OW 72
38739: ST_TO_ADDR
// if not factories then
38740: LD_VAR 0 6
38744: NOT
38745: IFFALSE 38749
// exit ;
38747: GO 39739
// for i in factories do
38749: LD_ADDR_VAR 0 8
38753: PUSH
38754: LD_VAR 0 6
38758: PUSH
38759: FOR_IN
38760: IFFALSE 38785
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38762: LD_ADDR_VAR 0 17
38766: PUSH
38767: LD_VAR 0 17
38771: PUSH
38772: LD_VAR 0 8
38776: PPUSH
38777: CALL_OW 478
38781: UNION
38782: ST_TO_ADDR
38783: GO 38759
38785: POP
38786: POP
// if not fac_list then
38787: LD_VAR 0 17
38791: NOT
38792: IFFALSE 38796
// exit ;
38794: GO 39739
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38796: LD_ADDR_VAR 0 5
38800: PUSH
38801: LD_INT 4
38803: PUSH
38804: LD_INT 5
38806: PUSH
38807: LD_INT 9
38809: PUSH
38810: LD_INT 10
38812: PUSH
38813: LD_INT 6
38815: PUSH
38816: LD_INT 7
38818: PUSH
38819: LD_INT 11
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 27
38833: PUSH
38834: LD_INT 28
38836: PUSH
38837: LD_INT 26
38839: PUSH
38840: LD_INT 30
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 43
38851: PUSH
38852: LD_INT 44
38854: PUSH
38855: LD_INT 46
38857: PUSH
38858: LD_INT 45
38860: PUSH
38861: LD_INT 47
38863: PUSH
38864: LD_INT 49
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: PUSH
38880: LD_VAR 0 12
38884: ARRAY
38885: ST_TO_ADDR
// list := list isect fac_list ;
38886: LD_ADDR_VAR 0 5
38890: PUSH
38891: LD_VAR 0 5
38895: PUSH
38896: LD_VAR 0 17
38900: ISECT
38901: ST_TO_ADDR
// if not list then
38902: LD_VAR 0 5
38906: NOT
38907: IFFALSE 38911
// exit ;
38909: GO 39739
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38911: LD_VAR 0 12
38915: PUSH
38916: LD_INT 3
38918: EQUAL
38919: IFFALSE 38931
38921: PUSH
38922: LD_INT 49
38924: PUSH
38925: LD_VAR 0 5
38929: IN
38930: AND
38931: IFFALSE 38951
38933: PUSH
38934: LD_INT 31
38936: PPUSH
38937: LD_VAR 0 16
38941: PPUSH
38942: CALL_OW 321
38946: PUSH
38947: LD_INT 2
38949: EQUAL
38950: AND
38951: IFFALSE 39011
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38953: LD_INT 22
38955: PUSH
38956: LD_VAR 0 16
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 35
38967: PUSH
38968: LD_INT 49
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 91
38977: PUSH
38978: LD_VAR 0 1
38982: PUSH
38983: LD_INT 10
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: LIST
38995: PPUSH
38996: CALL_OW 69
39000: NOT
39001: IFFALSE 39011
// weapon := ru_time_lapser ;
39003: LD_ADDR_VAR 0 18
39007: PUSH
39008: LD_INT 49
39010: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39011: LD_VAR 0 12
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: IN
39026: IFFALSE 39050
39028: PUSH
39029: LD_INT 11
39031: PUSH
39032: LD_VAR 0 5
39036: IN
39037: IFTRUE 39049
39039: PUSH
39040: LD_INT 30
39042: PUSH
39043: LD_VAR 0 5
39047: IN
39048: OR
39049: AND
39050: IFFALSE 39070
39052: PUSH
39053: LD_INT 6
39055: PPUSH
39056: LD_VAR 0 16
39060: PPUSH
39061: CALL_OW 321
39065: PUSH
39066: LD_INT 2
39068: EQUAL
39069: AND
39070: IFFALSE 39237
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39072: LD_INT 22
39074: PUSH
39075: LD_VAR 0 16
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: LD_INT 35
39089: PUSH
39090: LD_INT 11
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 35
39099: PUSH
39100: LD_INT 30
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 91
39114: PUSH
39115: LD_VAR 0 1
39119: PUSH
39120: LD_INT 18
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: LIST
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: LIST
39132: PPUSH
39133: CALL_OW 69
39137: NOT
39138: IFFALSE 39214
39140: PUSH
39141: LD_INT 22
39143: PUSH
39144: LD_VAR 0 16
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: LD_INT 30
39158: PUSH
39159: LD_INT 32
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 30
39168: PUSH
39169: LD_INT 33
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 91
39183: PUSH
39184: LD_VAR 0 1
39188: PUSH
39189: LD_INT 12
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: LIST
39201: PUSH
39202: EMPTY
39203: LIST
39204: PPUSH
39205: CALL_OW 69
39209: PUSH
39210: LD_INT 2
39212: GREATER
39213: AND
39214: IFFALSE 39237
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39216: LD_ADDR_VAR 0 18
39220: PUSH
39221: LD_INT 11
39223: PUSH
39224: LD_INT 30
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_VAR 0 12
39235: ARRAY
39236: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39237: LD_VAR 0 18
39241: NOT
39242: IFFALSE 39262
39244: PUSH
39245: LD_INT 40
39247: PPUSH
39248: LD_VAR 0 16
39252: PPUSH
39253: CALL_OW 321
39257: PUSH
39258: LD_INT 2
39260: EQUAL
39261: AND
39262: IFFALSE 39298
39264: PUSH
39265: LD_INT 7
39267: PUSH
39268: LD_VAR 0 5
39272: IN
39273: IFTRUE 39285
39275: PUSH
39276: LD_INT 28
39278: PUSH
39279: LD_VAR 0 5
39283: IN
39284: OR
39285: IFTRUE 39297
39287: PUSH
39288: LD_INT 45
39290: PUSH
39291: LD_VAR 0 5
39295: IN
39296: OR
39297: AND
39298: IFFALSE 39552
// begin hex := GetHexInfo ( x , y ) ;
39300: LD_ADDR_VAR 0 4
39304: PUSH
39305: LD_VAR 0 10
39309: PPUSH
39310: LD_VAR 0 11
39314: PPUSH
39315: CALL_OW 546
39319: ST_TO_ADDR
// if hex [ 1 ] then
39320: LD_VAR 0 4
39324: PUSH
39325: LD_INT 1
39327: ARRAY
39328: IFFALSE 39332
// exit ;
39330: GO 39739
// height := hex [ 2 ] ;
39332: LD_ADDR_VAR 0 15
39336: PUSH
39337: LD_VAR 0 4
39341: PUSH
39342: LD_INT 2
39344: ARRAY
39345: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39346: LD_ADDR_VAR 0 14
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 2
39356: PUSH
39357: LD_INT 3
39359: PUSH
39360: LD_INT 5
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: ST_TO_ADDR
// for i in tmp do
39369: LD_ADDR_VAR 0 8
39373: PUSH
39374: LD_VAR 0 14
39378: PUSH
39379: FOR_IN
39380: IFFALSE 39550
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39382: LD_ADDR_VAR 0 9
39386: PUSH
39387: LD_VAR 0 10
39391: PPUSH
39392: LD_VAR 0 8
39396: PPUSH
39397: LD_INT 5
39399: PPUSH
39400: CALL_OW 272
39404: PUSH
39405: LD_VAR 0 11
39409: PPUSH
39410: LD_VAR 0 8
39414: PPUSH
39415: LD_INT 5
39417: PPUSH
39418: CALL_OW 273
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39427: LD_VAR 0 9
39431: PUSH
39432: LD_INT 1
39434: ARRAY
39435: PPUSH
39436: LD_VAR 0 9
39440: PUSH
39441: LD_INT 2
39443: ARRAY
39444: PPUSH
39445: CALL_OW 488
39449: IFFALSE 39548
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39451: LD_ADDR_VAR 0 4
39455: PUSH
39456: LD_VAR 0 9
39460: PUSH
39461: LD_INT 1
39463: ARRAY
39464: PPUSH
39465: LD_VAR 0 9
39469: PUSH
39470: LD_INT 2
39472: ARRAY
39473: PPUSH
39474: CALL_OW 546
39478: ST_TO_ADDR
// if hex [ 1 ] then
39479: LD_VAR 0 4
39483: PUSH
39484: LD_INT 1
39486: ARRAY
39487: IFFALSE 39491
// continue ;
39489: GO 39379
// h := hex [ 2 ] ;
39491: LD_ADDR_VAR 0 13
39495: PUSH
39496: LD_VAR 0 4
39500: PUSH
39501: LD_INT 2
39503: ARRAY
39504: ST_TO_ADDR
// if h + 7 < height then
39505: LD_VAR 0 13
39509: PUSH
39510: LD_INT 7
39512: PLUS
39513: PUSH
39514: LD_VAR 0 15
39518: LESS
39519: IFFALSE 39548
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39521: LD_ADDR_VAR 0 18
39525: PUSH
39526: LD_INT 7
39528: PUSH
39529: LD_INT 28
39531: PUSH
39532: LD_INT 45
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: PUSH
39540: LD_VAR 0 12
39544: ARRAY
39545: ST_TO_ADDR
// break ;
39546: GO 39550
// end ; end ; end ;
39548: GO 39379
39550: POP
39551: POP
// end ; if not weapon then
39552: LD_VAR 0 18
39556: NOT
39557: IFFALSE 39617
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39559: LD_ADDR_VAR 0 5
39563: PUSH
39564: LD_VAR 0 5
39568: PUSH
39569: LD_INT 11
39571: PUSH
39572: LD_INT 30
39574: PUSH
39575: LD_INT 49
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: LIST
39582: DIFF
39583: ST_TO_ADDR
// if not list then
39584: LD_VAR 0 5
39588: NOT
39589: IFFALSE 39593
// exit ;
39591: GO 39739
// weapon := list [ rand ( 1 , list ) ] ;
39593: LD_ADDR_VAR 0 18
39597: PUSH
39598: LD_VAR 0 5
39602: PUSH
39603: LD_INT 1
39605: PPUSH
39606: LD_VAR 0 5
39610: PPUSH
39611: CALL_OW 12
39615: ARRAY
39616: ST_TO_ADDR
// end ; if weapon then
39617: LD_VAR 0 18
39621: IFFALSE 39739
// begin tmp := CostOfWeapon ( weapon ) ;
39623: LD_ADDR_VAR 0 14
39627: PUSH
39628: LD_VAR 0 18
39632: PPUSH
39633: CALL_OW 451
39637: ST_TO_ADDR
// j := GetBase ( tower ) ;
39638: LD_ADDR_VAR 0 9
39642: PUSH
39643: LD_VAR 0 1
39647: PPUSH
39648: CALL_OW 274
39652: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39653: LD_VAR 0 9
39657: PPUSH
39658: LD_INT 1
39660: PPUSH
39661: CALL_OW 275
39665: PUSH
39666: LD_VAR 0 14
39670: PUSH
39671: LD_INT 1
39673: ARRAY
39674: GREATEREQUAL
39675: IFFALSE 39701
39677: PUSH
39678: LD_VAR 0 9
39682: PPUSH
39683: LD_INT 2
39685: PPUSH
39686: CALL_OW 275
39690: PUSH
39691: LD_VAR 0 14
39695: PUSH
39696: LD_INT 2
39698: ARRAY
39699: GREATEREQUAL
39700: AND
39701: IFFALSE 39727
39703: PUSH
39704: LD_VAR 0 9
39708: PPUSH
39709: LD_INT 3
39711: PPUSH
39712: CALL_OW 275
39716: PUSH
39717: LD_VAR 0 14
39721: PUSH
39722: LD_INT 3
39724: ARRAY
39725: GREATEREQUAL
39726: AND
39727: IFFALSE 39739
// result := weapon ;
39729: LD_ADDR_VAR 0 3
39733: PUSH
39734: LD_VAR 0 18
39738: ST_TO_ADDR
// end ; end ;
39739: LD_VAR 0 3
39743: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39744: LD_INT 0
39746: PPUSH
39747: PPUSH
// result := true ;
39748: LD_ADDR_VAR 0 3
39752: PUSH
39753: LD_INT 1
39755: ST_TO_ADDR
// if array1 = array2 then
39756: LD_VAR 0 1
39760: PUSH
39761: LD_VAR 0 2
39765: EQUAL
39766: IFFALSE 39826
// begin for i = 1 to array1 do
39768: LD_ADDR_VAR 0 4
39772: PUSH
39773: DOUBLE
39774: LD_INT 1
39776: DEC
39777: ST_TO_ADDR
39778: LD_VAR 0 1
39782: PUSH
39783: FOR_TO
39784: IFFALSE 39822
// if array1 [ i ] <> array2 [ i ] then
39786: LD_VAR 0 1
39790: PUSH
39791: LD_VAR 0 4
39795: ARRAY
39796: PUSH
39797: LD_VAR 0 2
39801: PUSH
39802: LD_VAR 0 4
39806: ARRAY
39807: NONEQUAL
39808: IFFALSE 39820
// begin result := false ;
39810: LD_ADDR_VAR 0 3
39814: PUSH
39815: LD_INT 0
39817: ST_TO_ADDR
// break ;
39818: GO 39822
// end ;
39820: GO 39783
39822: POP
39823: POP
// end else
39824: GO 39834
// result := false ;
39826: LD_ADDR_VAR 0 3
39830: PUSH
39831: LD_INT 0
39833: ST_TO_ADDR
// end ;
39834: LD_VAR 0 3
39838: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39839: LD_INT 0
39841: PPUSH
39842: PPUSH
// if not array1 or not array2 then
39843: LD_VAR 0 1
39847: NOT
39848: IFTRUE 39857
39850: PUSH
39851: LD_VAR 0 2
39855: NOT
39856: OR
39857: IFFALSE 39861
// exit ;
39859: GO 39925
// result := true ;
39861: LD_ADDR_VAR 0 3
39865: PUSH
39866: LD_INT 1
39868: ST_TO_ADDR
// for i = 1 to array1 do
39869: LD_ADDR_VAR 0 4
39873: PUSH
39874: DOUBLE
39875: LD_INT 1
39877: DEC
39878: ST_TO_ADDR
39879: LD_VAR 0 1
39883: PUSH
39884: FOR_TO
39885: IFFALSE 39923
// if array1 [ i ] <> array2 [ i ] then
39887: LD_VAR 0 1
39891: PUSH
39892: LD_VAR 0 4
39896: ARRAY
39897: PUSH
39898: LD_VAR 0 2
39902: PUSH
39903: LD_VAR 0 4
39907: ARRAY
39908: NONEQUAL
39909: IFFALSE 39921
// begin result := false ;
39911: LD_ADDR_VAR 0 3
39915: PUSH
39916: LD_INT 0
39918: ST_TO_ADDR
// break ;
39919: GO 39923
// end ;
39921: GO 39884
39923: POP
39924: POP
// end ;
39925: LD_VAR 0 3
39929: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39930: LD_INT 0
39932: PPUSH
39933: PPUSH
39934: PPUSH
// pom := GetBase ( fac ) ;
39935: LD_ADDR_VAR 0 5
39939: PUSH
39940: LD_VAR 0 1
39944: PPUSH
39945: CALL_OW 274
39949: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39950: LD_ADDR_VAR 0 4
39954: PUSH
39955: LD_VAR 0 2
39959: PUSH
39960: LD_INT 1
39962: ARRAY
39963: PPUSH
39964: LD_VAR 0 2
39968: PUSH
39969: LD_INT 2
39971: ARRAY
39972: PPUSH
39973: LD_VAR 0 2
39977: PUSH
39978: LD_INT 3
39980: ARRAY
39981: PPUSH
39982: LD_VAR 0 2
39986: PUSH
39987: LD_INT 4
39989: ARRAY
39990: PPUSH
39991: CALL_OW 449
39995: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39996: LD_ADDR_VAR 0 3
40000: PUSH
40001: LD_VAR 0 5
40005: PPUSH
40006: LD_INT 1
40008: PPUSH
40009: CALL_OW 275
40013: PUSH
40014: LD_VAR 0 4
40018: PUSH
40019: LD_INT 1
40021: ARRAY
40022: GREATEREQUAL
40023: IFFALSE 40049
40025: PUSH
40026: LD_VAR 0 5
40030: PPUSH
40031: LD_INT 2
40033: PPUSH
40034: CALL_OW 275
40038: PUSH
40039: LD_VAR 0 4
40043: PUSH
40044: LD_INT 2
40046: ARRAY
40047: GREATEREQUAL
40048: AND
40049: IFFALSE 40075
40051: PUSH
40052: LD_VAR 0 5
40056: PPUSH
40057: LD_INT 3
40059: PPUSH
40060: CALL_OW 275
40064: PUSH
40065: LD_VAR 0 4
40069: PUSH
40070: LD_INT 3
40072: ARRAY
40073: GREATEREQUAL
40074: AND
40075: ST_TO_ADDR
// end ;
40076: LD_VAR 0 3
40080: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40081: LD_INT 0
40083: PPUSH
40084: PPUSH
40085: PPUSH
40086: PPUSH
// pom := GetBase ( building ) ;
40087: LD_ADDR_VAR 0 3
40091: PUSH
40092: LD_VAR 0 1
40096: PPUSH
40097: CALL_OW 274
40101: ST_TO_ADDR
// if not pom then
40102: LD_VAR 0 3
40106: NOT
40107: IFFALSE 40111
// exit ;
40109: GO 40285
// btype := GetBType ( building ) ;
40111: LD_ADDR_VAR 0 5
40115: PUSH
40116: LD_VAR 0 1
40120: PPUSH
40121: CALL_OW 266
40125: ST_TO_ADDR
// if btype = b_armoury then
40126: LD_VAR 0 5
40130: PUSH
40131: LD_INT 4
40133: EQUAL
40134: IFFALSE 40144
// btype := b_barracks ;
40136: LD_ADDR_VAR 0 5
40140: PUSH
40141: LD_INT 5
40143: ST_TO_ADDR
// if btype = b_depot then
40144: LD_VAR 0 5
40148: PUSH
40149: LD_INT 0
40151: EQUAL
40152: IFFALSE 40162
// btype := b_warehouse ;
40154: LD_ADDR_VAR 0 5
40158: PUSH
40159: LD_INT 1
40161: ST_TO_ADDR
// if btype = b_workshop then
40162: LD_VAR 0 5
40166: PUSH
40167: LD_INT 2
40169: EQUAL
40170: IFFALSE 40180
// btype := b_factory ;
40172: LD_ADDR_VAR 0 5
40176: PUSH
40177: LD_INT 3
40179: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40180: LD_ADDR_VAR 0 4
40184: PUSH
40185: LD_VAR 0 5
40189: PPUSH
40190: LD_VAR 0 1
40194: PPUSH
40195: CALL_OW 248
40199: PPUSH
40200: CALL_OW 450
40204: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40205: LD_ADDR_VAR 0 2
40209: PUSH
40210: LD_VAR 0 3
40214: PPUSH
40215: LD_INT 1
40217: PPUSH
40218: CALL_OW 275
40222: PUSH
40223: LD_VAR 0 4
40227: PUSH
40228: LD_INT 1
40230: ARRAY
40231: GREATEREQUAL
40232: IFFALSE 40258
40234: PUSH
40235: LD_VAR 0 3
40239: PPUSH
40240: LD_INT 2
40242: PPUSH
40243: CALL_OW 275
40247: PUSH
40248: LD_VAR 0 4
40252: PUSH
40253: LD_INT 2
40255: ARRAY
40256: GREATEREQUAL
40257: AND
40258: IFFALSE 40284
40260: PUSH
40261: LD_VAR 0 3
40265: PPUSH
40266: LD_INT 3
40268: PPUSH
40269: CALL_OW 275
40273: PUSH
40274: LD_VAR 0 4
40278: PUSH
40279: LD_INT 3
40281: ARRAY
40282: GREATEREQUAL
40283: AND
40284: ST_TO_ADDR
// end ;
40285: LD_VAR 0 2
40289: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40290: LD_INT 0
40292: PPUSH
40293: PPUSH
40294: PPUSH
// pom := GetBase ( building ) ;
40295: LD_ADDR_VAR 0 4
40299: PUSH
40300: LD_VAR 0 1
40304: PPUSH
40305: CALL_OW 274
40309: ST_TO_ADDR
// if not pom then
40310: LD_VAR 0 4
40314: NOT
40315: IFFALSE 40319
// exit ;
40317: GO 40424
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40319: LD_ADDR_VAR 0 5
40323: PUSH
40324: LD_VAR 0 2
40328: PPUSH
40329: LD_VAR 0 1
40333: PPUSH
40334: CALL_OW 248
40338: PPUSH
40339: CALL_OW 450
40343: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40344: LD_ADDR_VAR 0 3
40348: PUSH
40349: LD_VAR 0 4
40353: PPUSH
40354: LD_INT 1
40356: PPUSH
40357: CALL_OW 275
40361: PUSH
40362: LD_VAR 0 5
40366: PUSH
40367: LD_INT 1
40369: ARRAY
40370: GREATEREQUAL
40371: IFFALSE 40397
40373: PUSH
40374: LD_VAR 0 4
40378: PPUSH
40379: LD_INT 2
40381: PPUSH
40382: CALL_OW 275
40386: PUSH
40387: LD_VAR 0 5
40391: PUSH
40392: LD_INT 2
40394: ARRAY
40395: GREATEREQUAL
40396: AND
40397: IFFALSE 40423
40399: PUSH
40400: LD_VAR 0 4
40404: PPUSH
40405: LD_INT 3
40407: PPUSH
40408: CALL_OW 275
40412: PUSH
40413: LD_VAR 0 5
40417: PUSH
40418: LD_INT 3
40420: ARRAY
40421: GREATEREQUAL
40422: AND
40423: ST_TO_ADDR
// end ;
40424: LD_VAR 0 3
40428: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40429: LD_INT 0
40431: PPUSH
40432: PPUSH
40433: PPUSH
40434: PPUSH
40435: PPUSH
40436: PPUSH
40437: PPUSH
40438: PPUSH
40439: PPUSH
40440: PPUSH
40441: PPUSH
// result := false ;
40442: LD_ADDR_VAR 0 8
40446: PUSH
40447: LD_INT 0
40449: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40450: LD_VAR 0 5
40454: NOT
40455: IFTRUE 40464
40457: PUSH
40458: LD_VAR 0 1
40462: NOT
40463: OR
40464: IFTRUE 40473
40466: PUSH
40467: LD_VAR 0 2
40471: NOT
40472: OR
40473: IFTRUE 40482
40475: PUSH
40476: LD_VAR 0 3
40480: NOT
40481: OR
40482: IFFALSE 40486
// exit ;
40484: GO 41312
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40486: LD_ADDR_VAR 0 14
40490: PUSH
40491: LD_VAR 0 1
40495: PPUSH
40496: LD_VAR 0 2
40500: PPUSH
40501: LD_VAR 0 3
40505: PPUSH
40506: LD_VAR 0 4
40510: PPUSH
40511: LD_VAR 0 5
40515: PUSH
40516: LD_INT 1
40518: ARRAY
40519: PPUSH
40520: CALL_OW 248
40524: PPUSH
40525: LD_INT 0
40527: PPUSH
40528: CALL 42593 0 6
40532: ST_TO_ADDR
// if not hexes then
40533: LD_VAR 0 14
40537: NOT
40538: IFFALSE 40542
// exit ;
40540: GO 41312
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40542: LD_ADDR_VAR 0 17
40546: PUSH
40547: LD_VAR 0 5
40551: PPUSH
40552: LD_INT 22
40554: PUSH
40555: LD_VAR 0 13
40559: PPUSH
40560: CALL_OW 255
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: LD_INT 30
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 30
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: LIST
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PPUSH
40601: CALL_OW 72
40605: ST_TO_ADDR
// for i = 1 to hexes do
40606: LD_ADDR_VAR 0 9
40610: PUSH
40611: DOUBLE
40612: LD_INT 1
40614: DEC
40615: ST_TO_ADDR
40616: LD_VAR 0 14
40620: PUSH
40621: FOR_TO
40622: IFFALSE 41310
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40624: LD_ADDR_VAR 0 13
40628: PUSH
40629: LD_VAR 0 14
40633: PUSH
40634: LD_VAR 0 9
40638: ARRAY
40639: PUSH
40640: LD_INT 1
40642: ARRAY
40643: PPUSH
40644: LD_VAR 0 14
40648: PUSH
40649: LD_VAR 0 9
40653: ARRAY
40654: PUSH
40655: LD_INT 2
40657: ARRAY
40658: PPUSH
40659: CALL_OW 428
40663: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40664: LD_VAR 0 14
40668: PUSH
40669: LD_VAR 0 9
40673: ARRAY
40674: PUSH
40675: LD_INT 1
40677: ARRAY
40678: PPUSH
40679: LD_VAR 0 14
40683: PUSH
40684: LD_VAR 0 9
40688: ARRAY
40689: PUSH
40690: LD_INT 2
40692: ARRAY
40693: PPUSH
40694: CALL_OW 351
40698: IFTRUE 40737
40700: PUSH
40701: LD_VAR 0 14
40705: PUSH
40706: LD_VAR 0 9
40710: ARRAY
40711: PUSH
40712: LD_INT 1
40714: ARRAY
40715: PPUSH
40716: LD_VAR 0 14
40720: PUSH
40721: LD_VAR 0 9
40725: ARRAY
40726: PUSH
40727: LD_INT 2
40729: ARRAY
40730: PPUSH
40731: CALL_OW 488
40735: NOT
40736: OR
40737: IFTRUE 40754
40739: PUSH
40740: LD_VAR 0 13
40744: PPUSH
40745: CALL_OW 247
40749: PUSH
40750: LD_INT 3
40752: EQUAL
40753: OR
40754: IFFALSE 40760
// exit ;
40756: POP
40757: POP
40758: GO 41312
// if not tmp then
40760: LD_VAR 0 13
40764: NOT
40765: IFFALSE 40769
// continue ;
40767: GO 40621
// result := true ;
40769: LD_ADDR_VAR 0 8
40773: PUSH
40774: LD_INT 1
40776: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40777: LD_VAR 0 6
40781: IFFALSE 40798
40783: PUSH
40784: LD_VAR 0 13
40788: PPUSH
40789: CALL_OW 247
40793: PUSH
40794: LD_INT 2
40796: EQUAL
40797: AND
40798: IFFALSE 40815
40800: PUSH
40801: LD_VAR 0 13
40805: PPUSH
40806: CALL_OW 263
40810: PUSH
40811: LD_INT 1
40813: EQUAL
40814: AND
40815: IFFALSE 40979
// begin if IsDrivenBy ( tmp ) then
40817: LD_VAR 0 13
40821: PPUSH
40822: CALL_OW 311
40826: IFFALSE 40830
// continue ;
40828: GO 40621
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40830: LD_VAR 0 6
40834: PPUSH
40835: LD_INT 3
40837: PUSH
40838: LD_INT 60
40840: PUSH
40841: EMPTY
40842: LIST
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 3
40850: PUSH
40851: LD_INT 55
40853: PUSH
40854: EMPTY
40855: LIST
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PPUSH
40865: CALL_OW 72
40869: IFFALSE 40977
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40871: LD_ADDR_VAR 0 18
40875: PUSH
40876: LD_VAR 0 6
40880: PPUSH
40881: LD_INT 3
40883: PUSH
40884: LD_INT 60
40886: PUSH
40887: EMPTY
40888: LIST
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 3
40896: PUSH
40897: LD_INT 55
40899: PUSH
40900: EMPTY
40901: LIST
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PPUSH
40911: CALL_OW 72
40915: PUSH
40916: LD_INT 1
40918: ARRAY
40919: ST_TO_ADDR
// if IsInUnit ( driver ) then
40920: LD_VAR 0 18
40924: PPUSH
40925: CALL_OW 310
40929: IFFALSE 40940
// ComExit ( driver ) ;
40931: LD_VAR 0 18
40935: PPUSH
40936: CALL 66583 0 1
// AddComEnterUnit ( driver , tmp ) ;
40940: LD_VAR 0 18
40944: PPUSH
40945: LD_VAR 0 13
40949: PPUSH
40950: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40954: LD_VAR 0 18
40958: PPUSH
40959: LD_VAR 0 7
40963: PPUSH
40964: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40968: LD_VAR 0 18
40972: PPUSH
40973: CALL_OW 181
// end ; continue ;
40977: GO 40621
// end ; if not cleaners or not tmp in cleaners then
40979: LD_VAR 0 6
40983: NOT
40984: IFTRUE 40999
40986: PUSH
40987: LD_VAR 0 13
40991: PUSH
40992: LD_VAR 0 6
40996: IN
40997: NOT
40998: OR
40999: IFFALSE 41308
// begin if dep then
41001: LD_VAR 0 17
41005: IFFALSE 41141
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41007: LD_ADDR_VAR 0 16
41011: PUSH
41012: LD_VAR 0 17
41016: PUSH
41017: LD_INT 1
41019: ARRAY
41020: PPUSH
41021: CALL_OW 250
41025: PPUSH
41026: LD_VAR 0 17
41030: PUSH
41031: LD_INT 1
41033: ARRAY
41034: PPUSH
41035: CALL_OW 254
41039: PPUSH
41040: LD_INT 5
41042: PPUSH
41043: CALL_OW 272
41047: PUSH
41048: LD_VAR 0 17
41052: PUSH
41053: LD_INT 1
41055: ARRAY
41056: PPUSH
41057: CALL_OW 251
41061: PPUSH
41062: LD_VAR 0 17
41066: PUSH
41067: LD_INT 1
41069: ARRAY
41070: PPUSH
41071: CALL_OW 254
41075: PPUSH
41076: LD_INT 5
41078: PPUSH
41079: CALL_OW 273
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41088: LD_VAR 0 16
41092: PUSH
41093: LD_INT 1
41095: ARRAY
41096: PPUSH
41097: LD_VAR 0 16
41101: PUSH
41102: LD_INT 2
41104: ARRAY
41105: PPUSH
41106: CALL_OW 488
41110: IFFALSE 41141
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41112: LD_VAR 0 13
41116: PPUSH
41117: LD_VAR 0 16
41121: PUSH
41122: LD_INT 1
41124: ARRAY
41125: PPUSH
41126: LD_VAR 0 16
41130: PUSH
41131: LD_INT 2
41133: ARRAY
41134: PPUSH
41135: CALL_OW 111
// continue ;
41139: GO 40621
// end ; end ; r := GetDir ( tmp ) ;
41141: LD_ADDR_VAR 0 15
41145: PUSH
41146: LD_VAR 0 13
41150: PPUSH
41151: CALL_OW 254
41155: ST_TO_ADDR
// if r = 5 then
41156: LD_VAR 0 15
41160: PUSH
41161: LD_INT 5
41163: EQUAL
41164: IFFALSE 41174
// r := 0 ;
41166: LD_ADDR_VAR 0 15
41170: PUSH
41171: LD_INT 0
41173: ST_TO_ADDR
// for j = r to 5 do
41174: LD_ADDR_VAR 0 10
41178: PUSH
41179: DOUBLE
41180: LD_VAR 0 15
41184: DEC
41185: ST_TO_ADDR
41186: LD_INT 5
41188: PUSH
41189: FOR_TO
41190: IFFALSE 41306
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41192: LD_ADDR_VAR 0 11
41196: PUSH
41197: LD_VAR 0 13
41201: PPUSH
41202: CALL_OW 250
41206: PPUSH
41207: LD_VAR 0 10
41211: PPUSH
41212: LD_INT 2
41214: PPUSH
41215: CALL_OW 272
41219: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41220: LD_ADDR_VAR 0 12
41224: PUSH
41225: LD_VAR 0 13
41229: PPUSH
41230: CALL_OW 251
41234: PPUSH
41235: LD_VAR 0 10
41239: PPUSH
41240: LD_INT 2
41242: PPUSH
41243: CALL_OW 273
41247: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41248: LD_VAR 0 11
41252: PPUSH
41253: LD_VAR 0 12
41257: PPUSH
41258: CALL_OW 488
41262: IFFALSE 41281
41264: PUSH
41265: LD_VAR 0 11
41269: PPUSH
41270: LD_VAR 0 12
41274: PPUSH
41275: CALL_OW 428
41279: NOT
41280: AND
41281: IFFALSE 41304
// begin ComMoveXY ( tmp , _x , _y ) ;
41283: LD_VAR 0 13
41287: PPUSH
41288: LD_VAR 0 11
41292: PPUSH
41293: LD_VAR 0 12
41297: PPUSH
41298: CALL_OW 111
// break ;
41302: GO 41306
// end ; end ;
41304: GO 41189
41306: POP
41307: POP
// end ; end ;
41308: GO 40621
41310: POP
41311: POP
// end ;
41312: LD_VAR 0 8
41316: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41317: LD_INT 0
41319: PPUSH
// result := true ;
41320: LD_ADDR_VAR 0 3
41324: PUSH
41325: LD_INT 1
41327: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41328: LD_VAR 0 2
41332: PUSH
41333: LD_INT 24
41335: DOUBLE
41336: EQUAL
41337: IFTRUE 41347
41339: LD_INT 33
41341: DOUBLE
41342: EQUAL
41343: IFTRUE 41347
41345: GO 41372
41347: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41348: LD_ADDR_VAR 0 3
41352: PUSH
41353: LD_INT 32
41355: PPUSH
41356: LD_VAR 0 1
41360: PPUSH
41361: CALL_OW 321
41365: PUSH
41366: LD_INT 2
41368: EQUAL
41369: ST_TO_ADDR
41370: GO 41688
41372: LD_INT 20
41374: DOUBLE
41375: EQUAL
41376: IFTRUE 41380
41378: GO 41405
41380: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41381: LD_ADDR_VAR 0 3
41385: PUSH
41386: LD_INT 6
41388: PPUSH
41389: LD_VAR 0 1
41393: PPUSH
41394: CALL_OW 321
41398: PUSH
41399: LD_INT 2
41401: EQUAL
41402: ST_TO_ADDR
41403: GO 41688
41405: LD_INT 22
41407: DOUBLE
41408: EQUAL
41409: IFTRUE 41419
41411: LD_INT 36
41413: DOUBLE
41414: EQUAL
41415: IFTRUE 41419
41417: GO 41444
41419: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41420: LD_ADDR_VAR 0 3
41424: PUSH
41425: LD_INT 15
41427: PPUSH
41428: LD_VAR 0 1
41432: PPUSH
41433: CALL_OW 321
41437: PUSH
41438: LD_INT 2
41440: EQUAL
41441: ST_TO_ADDR
41442: GO 41688
41444: LD_INT 30
41446: DOUBLE
41447: EQUAL
41448: IFTRUE 41452
41450: GO 41477
41452: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41453: LD_ADDR_VAR 0 3
41457: PUSH
41458: LD_INT 20
41460: PPUSH
41461: LD_VAR 0 1
41465: PPUSH
41466: CALL_OW 321
41470: PUSH
41471: LD_INT 2
41473: EQUAL
41474: ST_TO_ADDR
41475: GO 41688
41477: LD_INT 28
41479: DOUBLE
41480: EQUAL
41481: IFTRUE 41491
41483: LD_INT 21
41485: DOUBLE
41486: EQUAL
41487: IFTRUE 41491
41489: GO 41516
41491: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41492: LD_ADDR_VAR 0 3
41496: PUSH
41497: LD_INT 21
41499: PPUSH
41500: LD_VAR 0 1
41504: PPUSH
41505: CALL_OW 321
41509: PUSH
41510: LD_INT 2
41512: EQUAL
41513: ST_TO_ADDR
41514: GO 41688
41516: LD_INT 16
41518: DOUBLE
41519: EQUAL
41520: IFTRUE 41524
41522: GO 41549
41524: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41525: LD_ADDR_VAR 0 3
41529: PUSH
41530: LD_INT 84
41532: PPUSH
41533: LD_VAR 0 1
41537: PPUSH
41538: CALL_OW 321
41542: PUSH
41543: LD_INT 2
41545: EQUAL
41546: ST_TO_ADDR
41547: GO 41688
41549: LD_INT 19
41551: DOUBLE
41552: EQUAL
41553: IFTRUE 41563
41555: LD_INT 23
41557: DOUBLE
41558: EQUAL
41559: IFTRUE 41563
41561: GO 41588
41563: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41564: LD_ADDR_VAR 0 3
41568: PUSH
41569: LD_INT 83
41571: PPUSH
41572: LD_VAR 0 1
41576: PPUSH
41577: CALL_OW 321
41581: PUSH
41582: LD_INT 2
41584: EQUAL
41585: ST_TO_ADDR
41586: GO 41688
41588: LD_INT 17
41590: DOUBLE
41591: EQUAL
41592: IFTRUE 41596
41594: GO 41621
41596: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41597: LD_ADDR_VAR 0 3
41601: PUSH
41602: LD_INT 39
41604: PPUSH
41605: LD_VAR 0 1
41609: PPUSH
41610: CALL_OW 321
41614: PUSH
41615: LD_INT 2
41617: EQUAL
41618: ST_TO_ADDR
41619: GO 41688
41621: LD_INT 18
41623: DOUBLE
41624: EQUAL
41625: IFTRUE 41629
41627: GO 41654
41629: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41630: LD_ADDR_VAR 0 3
41634: PUSH
41635: LD_INT 40
41637: PPUSH
41638: LD_VAR 0 1
41642: PPUSH
41643: CALL_OW 321
41647: PUSH
41648: LD_INT 2
41650: EQUAL
41651: ST_TO_ADDR
41652: GO 41688
41654: LD_INT 27
41656: DOUBLE
41657: EQUAL
41658: IFTRUE 41662
41660: GO 41687
41662: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41663: LD_ADDR_VAR 0 3
41667: PUSH
41668: LD_INT 35
41670: PPUSH
41671: LD_VAR 0 1
41675: PPUSH
41676: CALL_OW 321
41680: PUSH
41681: LD_INT 2
41683: EQUAL
41684: ST_TO_ADDR
41685: GO 41688
41687: POP
// end ;
41688: LD_VAR 0 3
41692: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41693: LD_INT 0
41695: PPUSH
41696: PPUSH
41697: PPUSH
41698: PPUSH
41699: PPUSH
41700: PPUSH
41701: PPUSH
41702: PPUSH
41703: PPUSH
41704: PPUSH
41705: PPUSH
// result := false ;
41706: LD_ADDR_VAR 0 6
41710: PUSH
41711: LD_INT 0
41713: ST_TO_ADDR
// if btype = b_depot then
41714: LD_VAR 0 2
41718: PUSH
41719: LD_INT 0
41721: EQUAL
41722: IFFALSE 41734
// begin result := true ;
41724: LD_ADDR_VAR 0 6
41728: PUSH
41729: LD_INT 1
41731: ST_TO_ADDR
// exit ;
41732: GO 42588
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41734: LD_VAR 0 1
41738: NOT
41739: IFTRUE 41764
41741: PUSH
41742: LD_VAR 0 1
41746: PPUSH
41747: CALL_OW 266
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: IN
41762: NOT
41763: OR
41764: IFTRUE 41773
41766: PUSH
41767: LD_VAR 0 2
41771: NOT
41772: OR
41773: IFTRUE 41809
41775: PUSH
41776: LD_VAR 0 5
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: LD_INT 3
41792: PUSH
41793: LD_INT 4
41795: PUSH
41796: LD_INT 5
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: IN
41807: NOT
41808: OR
41809: IFTRUE 41828
41811: PUSH
41812: LD_VAR 0 3
41816: PPUSH
41817: LD_VAR 0 4
41821: PPUSH
41822: CALL_OW 488
41826: NOT
41827: OR
41828: IFFALSE 41832
// exit ;
41830: GO 42588
// side := GetSide ( depot ) ;
41832: LD_ADDR_VAR 0 9
41836: PUSH
41837: LD_VAR 0 1
41841: PPUSH
41842: CALL_OW 255
41846: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41847: LD_VAR 0 9
41851: PPUSH
41852: LD_VAR 0 2
41856: PPUSH
41857: CALL 41317 0 2
41861: NOT
41862: IFFALSE 41866
// exit ;
41864: GO 42588
// pom := GetBase ( depot ) ;
41866: LD_ADDR_VAR 0 10
41870: PUSH
41871: LD_VAR 0 1
41875: PPUSH
41876: CALL_OW 274
41880: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41881: LD_ADDR_VAR 0 11
41885: PUSH
41886: LD_VAR 0 2
41890: PPUSH
41891: LD_VAR 0 1
41895: PPUSH
41896: CALL_OW 248
41900: PPUSH
41901: CALL_OW 450
41905: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41906: LD_VAR 0 10
41910: PPUSH
41911: LD_INT 1
41913: PPUSH
41914: CALL_OW 275
41918: PUSH
41919: LD_VAR 0 11
41923: PUSH
41924: LD_INT 1
41926: ARRAY
41927: GREATEREQUAL
41928: IFFALSE 41954
41930: PUSH
41931: LD_VAR 0 10
41935: PPUSH
41936: LD_INT 2
41938: PPUSH
41939: CALL_OW 275
41943: PUSH
41944: LD_VAR 0 11
41948: PUSH
41949: LD_INT 2
41951: ARRAY
41952: GREATEREQUAL
41953: AND
41954: IFFALSE 41980
41956: PUSH
41957: LD_VAR 0 10
41961: PPUSH
41962: LD_INT 3
41964: PPUSH
41965: CALL_OW 275
41969: PUSH
41970: LD_VAR 0 11
41974: PUSH
41975: LD_INT 3
41977: ARRAY
41978: GREATEREQUAL
41979: AND
41980: NOT
41981: IFFALSE 41985
// exit ;
41983: GO 42588
// if GetBType ( depot ) = b_depot then
41985: LD_VAR 0 1
41989: PPUSH
41990: CALL_OW 266
41994: PUSH
41995: LD_INT 0
41997: EQUAL
41998: IFFALSE 42010
// dist := 28 else
42000: LD_ADDR_VAR 0 14
42004: PUSH
42005: LD_INT 28
42007: ST_TO_ADDR
42008: GO 42018
// dist := 36 ;
42010: LD_ADDR_VAR 0 14
42014: PUSH
42015: LD_INT 36
42017: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42018: LD_VAR 0 1
42022: PPUSH
42023: LD_VAR 0 3
42027: PPUSH
42028: LD_VAR 0 4
42032: PPUSH
42033: CALL_OW 297
42037: PUSH
42038: LD_VAR 0 14
42042: GREATER
42043: IFFALSE 42047
// exit ;
42045: GO 42588
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42047: LD_ADDR_VAR 0 12
42051: PUSH
42052: LD_VAR 0 2
42056: PPUSH
42057: LD_VAR 0 3
42061: PPUSH
42062: LD_VAR 0 4
42066: PPUSH
42067: LD_VAR 0 5
42071: PPUSH
42072: LD_VAR 0 1
42076: PPUSH
42077: CALL_OW 248
42081: PPUSH
42082: LD_INT 0
42084: PPUSH
42085: CALL 42593 0 6
42089: ST_TO_ADDR
// if not hexes then
42090: LD_VAR 0 12
42094: NOT
42095: IFFALSE 42099
// exit ;
42097: GO 42588
// hex := GetHexInfo ( x , y ) ;
42099: LD_ADDR_VAR 0 15
42103: PUSH
42104: LD_VAR 0 3
42108: PPUSH
42109: LD_VAR 0 4
42113: PPUSH
42114: CALL_OW 546
42118: ST_TO_ADDR
// if hex [ 1 ] then
42119: LD_VAR 0 15
42123: PUSH
42124: LD_INT 1
42126: ARRAY
42127: IFFALSE 42131
// exit ;
42129: GO 42588
// height := hex [ 2 ] ;
42131: LD_ADDR_VAR 0 13
42135: PUSH
42136: LD_VAR 0 15
42140: PUSH
42141: LD_INT 2
42143: ARRAY
42144: ST_TO_ADDR
// for i = 1 to hexes do
42145: LD_ADDR_VAR 0 7
42149: PUSH
42150: DOUBLE
42151: LD_INT 1
42153: DEC
42154: ST_TO_ADDR
42155: LD_VAR 0 12
42159: PUSH
42160: FOR_TO
42161: IFFALSE 42505
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42163: LD_VAR 0 12
42167: PUSH
42168: LD_VAR 0 7
42172: ARRAY
42173: PUSH
42174: LD_INT 1
42176: ARRAY
42177: PPUSH
42178: LD_VAR 0 12
42182: PUSH
42183: LD_VAR 0 7
42187: ARRAY
42188: PUSH
42189: LD_INT 2
42191: ARRAY
42192: PPUSH
42193: CALL_OW 488
42197: NOT
42198: IFTRUE 42240
42200: PUSH
42201: LD_VAR 0 12
42205: PUSH
42206: LD_VAR 0 7
42210: ARRAY
42211: PUSH
42212: LD_INT 1
42214: ARRAY
42215: PPUSH
42216: LD_VAR 0 12
42220: PUSH
42221: LD_VAR 0 7
42225: ARRAY
42226: PUSH
42227: LD_INT 2
42229: ARRAY
42230: PPUSH
42231: CALL_OW 428
42235: PUSH
42236: LD_INT 0
42238: GREATER
42239: OR
42240: IFTRUE 42278
42242: PUSH
42243: LD_VAR 0 12
42247: PUSH
42248: LD_VAR 0 7
42252: ARRAY
42253: PUSH
42254: LD_INT 1
42256: ARRAY
42257: PPUSH
42258: LD_VAR 0 12
42262: PUSH
42263: LD_VAR 0 7
42267: ARRAY
42268: PUSH
42269: LD_INT 2
42271: ARRAY
42272: PPUSH
42273: CALL_OW 351
42277: OR
42278: IFFALSE 42284
// exit ;
42280: POP
42281: POP
42282: GO 42588
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42284: LD_ADDR_VAR 0 8
42288: PUSH
42289: LD_VAR 0 12
42293: PUSH
42294: LD_VAR 0 7
42298: ARRAY
42299: PUSH
42300: LD_INT 1
42302: ARRAY
42303: PPUSH
42304: LD_VAR 0 12
42308: PUSH
42309: LD_VAR 0 7
42313: ARRAY
42314: PUSH
42315: LD_INT 2
42317: ARRAY
42318: PPUSH
42319: CALL_OW 546
42323: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42324: LD_VAR 0 8
42328: PUSH
42329: LD_INT 1
42331: ARRAY
42332: IFTRUE 42354
42334: PUSH
42335: LD_VAR 0 8
42339: PUSH
42340: LD_INT 2
42342: ARRAY
42343: PUSH
42344: LD_VAR 0 13
42348: PUSH
42349: LD_INT 2
42351: PLUS
42352: GREATER
42353: OR
42354: IFTRUE 42376
42356: PUSH
42357: LD_VAR 0 8
42361: PUSH
42362: LD_INT 2
42364: ARRAY
42365: PUSH
42366: LD_VAR 0 13
42370: PUSH
42371: LD_INT 2
42373: MINUS
42374: LESS
42375: OR
42376: IFTRUE 42444
42378: PUSH
42379: LD_VAR 0 8
42383: PUSH
42384: LD_INT 3
42386: ARRAY
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 8
42393: PUSH
42394: LD_INT 9
42396: PUSH
42397: LD_INT 10
42399: PUSH
42400: LD_INT 11
42402: PUSH
42403: LD_INT 12
42405: PUSH
42406: LD_INT 13
42408: PUSH
42409: LD_INT 16
42411: PUSH
42412: LD_INT 17
42414: PUSH
42415: LD_INT 18
42417: PUSH
42418: LD_INT 19
42420: PUSH
42421: LD_INT 20
42423: PUSH
42424: LD_INT 21
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: IN
42442: NOT
42443: OR
42444: IFTRUE 42457
42446: PUSH
42447: LD_VAR 0 8
42451: PUSH
42452: LD_INT 5
42454: ARRAY
42455: NOT
42456: OR
42457: IFTRUE 42497
42459: PUSH
42460: LD_VAR 0 8
42464: PUSH
42465: LD_INT 6
42467: ARRAY
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: LD_INT 7
42477: PUSH
42478: LD_INT 9
42480: PUSH
42481: LD_INT 10
42483: PUSH
42484: LD_INT 11
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: IN
42495: NOT
42496: OR
42497: IFFALSE 42503
// exit ;
42499: POP
42500: POP
42501: GO 42588
// end ;
42503: GO 42160
42505: POP
42506: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42507: LD_VAR 0 9
42511: PPUSH
42512: LD_VAR 0 3
42516: PPUSH
42517: LD_VAR 0 4
42521: PPUSH
42522: LD_INT 20
42524: PPUSH
42525: CALL 34407 0 4
42529: PUSH
42530: LD_INT 4
42532: ARRAY
42533: IFFALSE 42537
// exit ;
42535: GO 42588
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42537: LD_VAR 0 2
42541: PUSH
42542: LD_INT 29
42544: PUSH
42545: LD_INT 30
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: IN
42552: IFFALSE 42576
42554: PUSH
42555: LD_VAR 0 3
42559: PPUSH
42560: LD_VAR 0 4
42564: PPUSH
42565: LD_VAR 0 9
42569: PPUSH
42570: CALL_OW 440
42574: NOT
42575: AND
42576: IFFALSE 42580
// exit ;
42578: GO 42588
// result := true ;
42580: LD_ADDR_VAR 0 6
42584: PUSH
42585: LD_INT 1
42587: ST_TO_ADDR
// end ;
42588: LD_VAR 0 6
42592: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42593: LD_INT 0
42595: PPUSH
42596: PPUSH
42597: PPUSH
42598: PPUSH
42599: PPUSH
42600: PPUSH
42601: PPUSH
42602: PPUSH
42603: PPUSH
42604: PPUSH
42605: PPUSH
42606: PPUSH
42607: PPUSH
42608: PPUSH
42609: PPUSH
42610: PPUSH
42611: PPUSH
42612: PPUSH
42613: PPUSH
42614: PPUSH
42615: PPUSH
42616: PPUSH
42617: PPUSH
42618: PPUSH
42619: PPUSH
42620: PPUSH
42621: PPUSH
42622: PPUSH
42623: PPUSH
42624: PPUSH
42625: PPUSH
42626: PPUSH
42627: PPUSH
42628: PPUSH
42629: PPUSH
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
42649: PPUSH
42650: PPUSH
42651: PPUSH
42652: PPUSH
// result = [ ] ;
42653: LD_ADDR_VAR 0 7
42657: PUSH
42658: EMPTY
42659: ST_TO_ADDR
// temp_list = [ ] ;
42660: LD_ADDR_VAR 0 9
42664: PUSH
42665: EMPTY
42666: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42667: LD_VAR 0 4
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: LD_INT 3
42683: PUSH
42684: LD_INT 4
42686: PUSH
42687: LD_INT 5
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: IN
42698: NOT
42699: IFTRUE 42742
42701: PUSH
42702: LD_VAR 0 1
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: IN
42717: IFFALSE 42741
42719: PUSH
42720: LD_VAR 0 5
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: LIST
42738: IN
42739: NOT
42740: AND
42741: OR
42742: IFFALSE 42746
// exit ;
42744: GO 61145
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42746: LD_VAR 0 1
42750: PUSH
42751: LD_INT 6
42753: PUSH
42754: LD_INT 7
42756: PUSH
42757: LD_INT 8
42759: PUSH
42760: LD_INT 13
42762: PUSH
42763: LD_INT 12
42765: PUSH
42766: LD_INT 15
42768: PUSH
42769: LD_INT 11
42771: PUSH
42772: LD_INT 14
42774: PUSH
42775: LD_INT 10
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: IN
42789: IFFALSE 42799
// btype = b_lab ;
42791: LD_ADDR_VAR 0 1
42795: PUSH
42796: LD_INT 6
42798: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42799: LD_VAR 0 6
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: LIST
42817: IN
42818: NOT
42819: IFTRUE 42887
42821: PUSH
42822: LD_VAR 0 1
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 3
42838: PUSH
42839: LD_INT 6
42841: PUSH
42842: LD_INT 36
42844: PUSH
42845: LD_INT 4
42847: PUSH
42848: LD_INT 5
42850: PUSH
42851: LD_INT 31
42853: PUSH
42854: LD_INT 32
42856: PUSH
42857: LD_INT 33
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: IN
42873: NOT
42874: IFFALSE 42886
42876: PUSH
42877: LD_VAR 0 6
42881: PUSH
42882: LD_INT 1
42884: EQUAL
42885: AND
42886: OR
42887: IFTRUE 42919
42889: PUSH
42890: LD_VAR 0 1
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: LD_INT 3
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: IN
42905: NOT
42906: IFFALSE 42918
42908: PUSH
42909: LD_VAR 0 6
42913: PUSH
42914: LD_INT 2
42916: EQUAL
42917: AND
42918: OR
42919: IFFALSE 42929
// mode = 0 ;
42921: LD_ADDR_VAR 0 6
42925: PUSH
42926: LD_INT 0
42928: ST_TO_ADDR
// case mode of 0 :
42929: LD_VAR 0 6
42933: PUSH
42934: LD_INT 0
42936: DOUBLE
42937: EQUAL
42938: IFTRUE 42942
42940: GO 54395
42942: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42943: LD_ADDR_VAR 0 11
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43136: LD_ADDR_VAR 0 12
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 2
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 2
43259: NEG
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 2
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 3
43293: NEG
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 3
43304: NEG
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43332: LD_ADDR_VAR 0 13
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 2
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 2
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 2
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: NEG
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: LD_INT 3
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 3
43491: NEG
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 3
43503: NEG
43504: PUSH
43505: LD_INT 3
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43531: LD_ADDR_VAR 0 14
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: LD_INT 2
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 3
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 3
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43727: LD_ADDR_VAR 0 15
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 3
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 3
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43920: LD_ADDR_VAR 0 16
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: NEG
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 3
44067: PUSH
44068: LD_INT 2
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 3
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: LD_INT 3
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44113: LD_ADDR_VAR 0 17
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 2
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 2
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44343: LD_ADDR_VAR 0 18
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: NEG
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44573: LD_ADDR_VAR 0 19
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44803: LD_ADDR_VAR 0 20
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: LD_INT 2
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: NEG
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45033: LD_ADDR_VAR 0 21
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 2
45232: NEG
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45263: LD_ADDR_VAR 0 22
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 2
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45493: LD_ADDR_VAR 0 23
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 3
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: LD_INT 3
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45773: LD_ADDR_VAR 0 24
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 2
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 2
45949: NEG
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 3
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 3
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46049: LD_ADDR_VAR 0 25
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 3
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: LD_INT 3
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46323: LD_ADDR_VAR 0 26
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 3
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 3
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46599: LD_ADDR_VAR 0 27
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: NEG
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 3
46832: NEG
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 3
46844: NEG
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46879: LD_ADDR_VAR 0 28
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 2
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: NEG
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: NEG
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: LD_INT 3
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 3
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 3
47114: NEG
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 3
47126: NEG
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47161: LD_ADDR_VAR 0 29
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 2
47339: NEG
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: LD_INT 3
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 2
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 3
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 3
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 3
47405: NEG
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47440: LD_ADDR_VAR 0 30
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 2
47606: NEG
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: LD_INT 3
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 3
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: LD_INT 3
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 3
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47718: LD_ADDR_VAR 0 31
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: NEG
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: LD_INT 3
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 3
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 3
47961: NEG
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47996: LD_ADDR_VAR 0 32
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 3
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: LD_INT 3
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 3
48239: NEG
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48274: LD_ADDR_VAR 0 33
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: NEG
48465: PUSH
48466: LD_INT 3
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 3
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 3
48518: NEG
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48553: LD_ADDR_VAR 0 34
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: NEG
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 3
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 3
48767: PUSH
48768: LD_INT 2
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: LD_INT 3
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 3
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48833: LD_ADDR_VAR 0 35
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48945: LD_ADDR_VAR 0 36
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49057: LD_ADDR_VAR 0 37
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49169: LD_ADDR_VAR 0 38
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49281: LD_ADDR_VAR 0 39
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 2
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49393: LD_ADDR_VAR 0 40
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49505: LD_ADDR_VAR 0 41
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: LD_INT 2
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: LD_INT 3
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 3
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 3
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 3
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 3
49748: PUSH
49749: LD_INT 3
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 3
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 3
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 3
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 3
49802: NEG
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: LD_INT 3
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49855: LD_ADDR_VAR 0 42
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: LD_INT 3
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: LD_INT 3
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 3
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 3
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 3
50101: PUSH
50102: LD_INT 3
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 2
50111: PUSH
50112: LD_INT 3
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 3
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 3
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 3
50152: NEG
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 3
50164: NEG
50165: PUSH
50166: LD_INT 3
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50205: LD_ADDR_VAR 0 43
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: LD_INT 3
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 3
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 3
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 3
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 3
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 3
50501: NEG
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50553: LD_ADDR_VAR 0 44
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 3
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 3
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: LD_INT 3
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 3
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 3
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 3
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 3
50850: NEG
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 3
50862: NEG
50863: PUSH
50864: LD_INT 3
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50903: LD_ADDR_VAR 0 45
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: LD_INT 2
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: LD_INT 3
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 3
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 3
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 3
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: LD_INT 3
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 3
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 3
51200: NEG
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 3
51212: NEG
51213: PUSH
51214: LD_INT 3
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51253: LD_ADDR_VAR 0 46
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 2
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 3
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 3
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 3
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 3
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51601: LD_ADDR_VAR 0 47
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51752: LD_ADDR_VAR 0 48
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51899: LD_ADDR_VAR 0 49
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52043: LD_ADDR_VAR 0 50
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52187: LD_ADDR_VAR 0 51
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: LD_INT 2
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 2
52310: NEG
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52334: LD_ADDR_VAR 0 52
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: NEG
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 2
52449: NEG
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52485: LD_ADDR_VAR 0 53
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52715: LD_ADDR_VAR 0 54
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52945: LD_ADDR_VAR 0 55
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 2
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: NEG
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 2
53144: NEG
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53175: LD_ADDR_VAR 0 56
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: LD_INT 2
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 2
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53405: LD_ADDR_VAR 0 57
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 2
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: LD_INT 2
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53635: LD_ADDR_VAR 0 58
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53865: LD_ADDR_VAR 0 59
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53953: LD_ADDR_VAR 0 60
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54041: LD_ADDR_VAR 0 61
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54129: LD_ADDR_VAR 0 62
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54217: LD_ADDR_VAR 0 63
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54305: LD_ADDR_VAR 0 64
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: ST_TO_ADDR
// end ; 1 :
54393: GO 60290
54395: LD_INT 1
54397: DOUBLE
54398: EQUAL
54399: IFTRUE 54403
54401: GO 57026
54403: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54404: LD_ADDR_VAR 0 11
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: LD_INT 3
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 3
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: LIST
54447: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54448: LD_ADDR_VAR 0 12
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 3
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: LIST
54488: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54489: LD_ADDR_VAR 0 13
54493: PUSH
54494: LD_INT 3
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 3
54506: PUSH
54507: LD_INT 3
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: PUSH
54517: LD_INT 3
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: LIST
54528: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54529: LD_ADDR_VAR 0 14
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 3
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 3
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 2
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: LIST
54569: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54570: LD_ADDR_VAR 0 15
54574: PUSH
54575: LD_INT 2
54577: NEG
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 3
54588: NEG
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 3
54599: NEG
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: LIST
54613: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54614: LD_ADDR_VAR 0 16
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: LD_INT 3
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: NEG
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54660: LD_ADDR_VAR 0 17
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 3
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 3
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54704: LD_ADDR_VAR 0 18
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54745: LD_ADDR_VAR 0 19
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: LD_INT 3
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: LIST
54784: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54785: LD_ADDR_VAR 0 20
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: LIST
54825: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54826: LD_ADDR_VAR 0 21
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 3
54844: NEG
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54870: LD_ADDR_VAR 0 22
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: LD_INT 3
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 3
54901: NEG
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54916: LD_ADDR_VAR 0 23
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: LD_INT 4
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: LD_INT 3
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54960: LD_ADDR_VAR 0 24
54964: PUSH
54965: LD_INT 3
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 3
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 4
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55001: LD_ADDR_VAR 0 25
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 4
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 3
55028: PUSH
55029: LD_INT 4
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55041: LD_ADDR_VAR 0 26
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 3
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 4
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55082: LD_ADDR_VAR 0 27
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 3
55100: NEG
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 4
55111: NEG
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: LIST
55125: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55126: LD_ADDR_VAR 0 28
55130: PUSH
55131: LD_INT 3
55133: NEG
55134: PUSH
55135: LD_INT 3
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: LD_INT 4
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 4
55157: NEG
55158: PUSH
55159: LD_INT 3
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55172: LD_ADDR_VAR 0 29
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: LD_INT 3
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 3
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: LD_INT 4
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 4
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 5
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 5
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: LD_INT 4
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 6
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: LD_INT 6
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 5
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55327: LD_ADDR_VAR 0 30
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 3
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 3
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 4
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 4
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 4
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 5
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 5
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 5
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 6
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 6
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55470: LD_ADDR_VAR 0 31
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: LD_INT 3
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 4
55507: PUSH
55508: LD_INT 3
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 4
55517: PUSH
55518: LD_INT 4
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: LD_INT 4
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 5
55537: PUSH
55538: LD_INT 4
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 5
55547: PUSH
55548: LD_INT 5
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 4
55557: PUSH
55558: LD_INT 5
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 6
55567: PUSH
55568: LD_INT 5
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 6
55577: PUSH
55578: LD_INT 6
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 5
55587: PUSH
55588: LD_INT 6
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55609: LD_ADDR_VAR 0 32
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 3
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 3
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 4
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 4
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: LD_INT 5
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 5
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 4
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: LD_INT 6
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 6
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: LD_INT 5
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55752: LD_ADDR_VAR 0 33
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 3
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 3
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 4
55804: NEG
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 4
55815: NEG
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 4
55827: NEG
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 5
55838: NEG
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 5
55849: NEG
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 5
55861: NEG
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 6
55872: NEG
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 6
55883: NEG
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55907: LD_ADDR_VAR 0 34
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: LD_INT 3
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 3
55926: NEG
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: LD_INT 3
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 3
55950: NEG
55951: PUSH
55952: LD_INT 4
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 4
55962: NEG
55963: PUSH
55964: LD_INT 3
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 4
55974: NEG
55975: PUSH
55976: LD_INT 4
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 4
55986: NEG
55987: PUSH
55988: LD_INT 5
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 5
55998: NEG
55999: PUSH
56000: LD_INT 4
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 5
56010: NEG
56011: PUSH
56012: LD_INT 5
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 5
56022: NEG
56023: PUSH
56024: LD_INT 6
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 6
56034: NEG
56035: PUSH
56036: LD_INT 5
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 6
56046: NEG
56047: PUSH
56048: LD_INT 6
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56070: LD_ADDR_VAR 0 41
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 3
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56114: LD_ADDR_VAR 0 42
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 3
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56155: LD_ADDR_VAR 0 43
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: LD_INT 3
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56195: LD_ADDR_VAR 0 44
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: LIST
56235: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56236: LD_ADDR_VAR 0 45
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 3
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: LIST
56279: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56280: LD_ADDR_VAR 0 46
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: NEG
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: LIST
56325: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56326: LD_ADDR_VAR 0 47
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: LD_INT 3
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: LD_INT 3
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56359: LD_ADDR_VAR 0 48
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56390: LD_ADDR_VAR 0 49
56394: PUSH
56395: LD_INT 3
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56419: LD_ADDR_VAR 0 50
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: LD_INT 3
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56448: LD_ADDR_VAR 0 51
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56479: LD_ADDR_VAR 0 52
56483: PUSH
56484: LD_INT 3
56486: NEG
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56512: LD_ADDR_VAR 0 53
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: LD_INT 3
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: LIST
56555: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56556: LD_ADDR_VAR 0 54
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: LIST
56596: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56597: LD_ADDR_VAR 0 55
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: LIST
56636: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56637: LD_ADDR_VAR 0 56
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 3
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 3
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: LIST
56677: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56678: LD_ADDR_VAR 0 57
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 3
56696: NEG
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 3
56707: NEG
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: LIST
56721: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56722: LD_ADDR_VAR 0 58
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: LD_INT 3
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 3
56741: NEG
56742: PUSH
56743: LD_INT 2
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: LD_INT 3
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56768: LD_ADDR_VAR 0 59
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: LIST
56811: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56812: LD_ADDR_VAR 0 60
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56853: LD_ADDR_VAR 0 61
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56893: LD_ADDR_VAR 0 62
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: LIST
56933: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56934: LD_ADDR_VAR 0 63
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: LIST
56977: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56978: LD_ADDR_VAR 0 64
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: ST_TO_ADDR
// end ; 2 :
57024: GO 60290
57026: LD_INT 2
57028: DOUBLE
57029: EQUAL
57030: IFTRUE 57034
57032: GO 60289
57034: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57035: LD_ADDR_VAR 0 29
57039: PUSH
57040: LD_INT 4
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 4
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 5
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 5
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 4
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 3
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 5
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: LD_INT 3
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 4
57155: PUSH
57156: LD_INT 3
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 4
57165: PUSH
57166: LD_INT 4
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 3
57175: PUSH
57176: LD_INT 4
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: LD_INT 3
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 4
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: LD_INT 4
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 4
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 4
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 5
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 5
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: LD_INT 4
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 3
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: LD_INT 5
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 2
57307: NEG
57308: PUSH
57309: LD_INT 3
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 3
57318: NEG
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 3
57329: NEG
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 3
57363: NEG
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 4
57374: NEG
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 4
57385: NEG
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 4
57397: NEG
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 2
57409: NEG
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 4
57420: NEG
57421: PUSH
57422: LD_INT 4
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 4
57432: NEG
57433: PUSH
57434: LD_INT 5
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 3
57444: NEG
57445: PUSH
57446: LD_INT 4
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 4
57468: NEG
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 5
57480: NEG
57481: PUSH
57482: LD_INT 4
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 5
57492: NEG
57493: PUSH
57494: LD_INT 5
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 3
57504: NEG
57505: PUSH
57506: LD_INT 5
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 5
57516: NEG
57517: PUSH
57518: LD_INT 3
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57573: LD_ADDR_VAR 0 30
57577: PUSH
57578: LD_INT 4
57580: PUSH
57581: LD_INT 4
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 4
57590: PUSH
57591: LD_INT 3
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 5
57600: PUSH
57601: LD_INT 4
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 5
57610: PUSH
57611: LD_INT 5
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 4
57620: PUSH
57621: LD_INT 5
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: LD_INT 4
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: LD_INT 3
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 5
57650: PUSH
57651: LD_INT 3
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 3
57660: PUSH
57661: LD_INT 5
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 3
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 4
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: LD_INT 4
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: LD_INT 4
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 4
57763: NEG
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 4
57774: NEG
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 3
57786: NEG
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 3
57797: NEG
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 4
57808: NEG
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 5
57819: NEG
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 5
57830: NEG
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 5
57842: NEG
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 3
57854: NEG
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: LD_INT 3
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: LD_INT 4
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 3
57913: NEG
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 4
57925: NEG
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 4
57937: NEG
57938: PUSH
57939: LD_INT 4
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: LD_INT 4
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 4
57961: NEG
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: LD_INT 4
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 5
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 4
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 3
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: LD_INT 3
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 4
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 5
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: LD_INT 3
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: LD_INT 5
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58120: LD_ADDR_VAR 0 31
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 4
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 3
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 4
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: LD_INT 5
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 5
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: LD_INT 4
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: LD_INT 3
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: LD_INT 5
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: NEG
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 4
58276: NEG
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 4
58287: NEG
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 4
58299: NEG
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 2
58311: NEG
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 4
58322: NEG
58323: PUSH
58324: LD_INT 4
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 4
58334: NEG
58335: PUSH
58336: LD_INT 5
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: LD_INT 4
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 3
58358: NEG
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 4
58370: NEG
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 5
58382: NEG
58383: PUSH
58384: LD_INT 4
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 5
58394: NEG
58395: PUSH
58396: LD_INT 5
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 3
58406: NEG
58407: PUSH
58408: LD_INT 5
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 5
58418: NEG
58419: PUSH
58420: LD_INT 3
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 4
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 2
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: LD_INT 4
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 4
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 4
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 4
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 5
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 5
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 4
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 3
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 3
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 5
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58670: LD_ADDR_VAR 0 32
58674: PUSH
58675: LD_INT 4
58677: NEG
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 4
58688: NEG
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 3
58700: NEG
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 3
58711: NEG
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 4
58722: NEG
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 5
58733: NEG
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 5
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 5
58756: NEG
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 3
58768: NEG
58769: PUSH
58770: LD_INT 2
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: NEG
58792: PUSH
58793: LD_INT 4
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: LD_INT 3
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 3
58827: NEG
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 4
58839: NEG
58840: PUSH
58841: LD_INT 3
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 4
58851: NEG
58852: PUSH
58853: LD_INT 4
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: LD_INT 4
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 4
58875: NEG
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 4
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 5
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 4
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: LD_INT 3
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: LD_INT 3
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: LD_INT 4
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: LD_INT 5
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: LD_INT 3
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 5
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 3
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 4
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 4
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 3
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 4
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 4
59082: PUSH
59083: LD_INT 4
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 4
59092: PUSH
59093: LD_INT 3
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 5
59102: PUSH
59103: LD_INT 4
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 5
59112: PUSH
59113: LD_INT 5
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 4
59122: PUSH
59123: LD_INT 5
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 3
59132: PUSH
59133: LD_INT 4
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 3
59142: PUSH
59143: LD_INT 3
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 5
59152: PUSH
59153: LD_INT 3
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: LD_INT 5
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59217: LD_ADDR_VAR 0 33
59221: PUSH
59222: LD_INT 4
59224: NEG
59225: PUSH
59226: LD_INT 4
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 4
59236: NEG
59237: PUSH
59238: LD_INT 5
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: NEG
59249: PUSH
59250: LD_INT 4
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: LD_INT 3
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 4
59272: NEG
59273: PUSH
59274: LD_INT 3
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 5
59284: NEG
59285: PUSH
59286: LD_INT 4
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 5
59296: NEG
59297: PUSH
59298: LD_INT 5
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 3
59308: NEG
59309: PUSH
59310: LD_INT 5
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 5
59320: NEG
59321: PUSH
59322: LD_INT 3
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: LD_INT 3
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: LD_INT 4
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 3
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: NEG
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 4
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 2
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: LD_INT 4
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 4
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 4
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 5
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 5
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 4
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 3
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 3
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 3
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 5
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 3
59527: PUSH
59528: LD_INT 3
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 3
59537: PUSH
59538: LD_INT 2
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 4
59547: PUSH
59548: LD_INT 3
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 4
59557: PUSH
59558: LD_INT 4
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 3
59567: PUSH
59568: LD_INT 4
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: LD_INT 3
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 4
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 2
59607: PUSH
59608: LD_INT 4
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 4
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: LD_INT 3
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: LD_INT 4
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 5
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 5
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: LD_INT 4
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: LD_INT 3
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: PUSH
59690: LD_INT 5
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59755: LD_ADDR_VAR 0 34
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 4
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 5
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: LD_INT 4
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 3
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: LD_INT 3
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: LD_INT 4
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: LD_INT 5
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 3
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: NEG
59853: PUSH
59854: LD_INT 5
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 3
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 4
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 4
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 3
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 2
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: LD_INT 2
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 4
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 4
59957: PUSH
59958: LD_INT 4
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 4
59967: PUSH
59968: LD_INT 3
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 5
59977: PUSH
59978: LD_INT 4
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 5
59987: PUSH
59988: LD_INT 5
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 4
59997: PUSH
59998: LD_INT 5
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 3
60007: PUSH
60008: LD_INT 4
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 5
60027: PUSH
60028: LD_INT 3
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 5
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: LD_INT 3
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: LD_INT 4
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: LD_INT 4
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: LD_INT 3
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 2
60119: PUSH
60120: LD_INT 4
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: NEG
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 4
60140: NEG
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 4
60151: NEG
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: NEG
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 4
60185: NEG
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 5
60196: NEG
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 5
60207: NEG
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 5
60219: NEG
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: ST_TO_ADDR
// end ; end ;
60287: GO 60290
60289: POP
// case btype of b_depot , b_warehouse :
60290: LD_VAR 0 1
60294: PUSH
60295: LD_INT 0
60297: DOUBLE
60298: EQUAL
60299: IFTRUE 60309
60301: LD_INT 1
60303: DOUBLE
60304: EQUAL
60305: IFTRUE 60309
60307: GO 60510
60309: POP
// case nation of nation_american :
60310: LD_VAR 0 5
60314: PUSH
60315: LD_INT 1
60317: DOUBLE
60318: EQUAL
60319: IFTRUE 60323
60321: GO 60379
60323: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60324: LD_ADDR_VAR 0 9
60328: PUSH
60329: LD_VAR 0 11
60333: PUSH
60334: LD_VAR 0 12
60338: PUSH
60339: LD_VAR 0 13
60343: PUSH
60344: LD_VAR 0 14
60348: PUSH
60349: LD_VAR 0 15
60353: PUSH
60354: LD_VAR 0 16
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: PUSH
60367: LD_VAR 0 4
60371: PUSH
60372: LD_INT 1
60374: PLUS
60375: ARRAY
60376: ST_TO_ADDR
60377: GO 60508
60379: LD_INT 2
60381: DOUBLE
60382: EQUAL
60383: IFTRUE 60387
60385: GO 60443
60387: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60388: LD_ADDR_VAR 0 9
60392: PUSH
60393: LD_VAR 0 17
60397: PUSH
60398: LD_VAR 0 18
60402: PUSH
60403: LD_VAR 0 19
60407: PUSH
60408: LD_VAR 0 20
60412: PUSH
60413: LD_VAR 0 21
60417: PUSH
60418: LD_VAR 0 22
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: PUSH
60431: LD_VAR 0 4
60435: PUSH
60436: LD_INT 1
60438: PLUS
60439: ARRAY
60440: ST_TO_ADDR
60441: GO 60508
60443: LD_INT 3
60445: DOUBLE
60446: EQUAL
60447: IFTRUE 60451
60449: GO 60507
60451: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60452: LD_ADDR_VAR 0 9
60456: PUSH
60457: LD_VAR 0 23
60461: PUSH
60462: LD_VAR 0 24
60466: PUSH
60467: LD_VAR 0 25
60471: PUSH
60472: LD_VAR 0 26
60476: PUSH
60477: LD_VAR 0 27
60481: PUSH
60482: LD_VAR 0 28
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: PUSH
60495: LD_VAR 0 4
60499: PUSH
60500: LD_INT 1
60502: PLUS
60503: ARRAY
60504: ST_TO_ADDR
60505: GO 60508
60507: POP
60508: GO 61063
60510: LD_INT 2
60512: DOUBLE
60513: EQUAL
60514: IFTRUE 60524
60516: LD_INT 3
60518: DOUBLE
60519: EQUAL
60520: IFTRUE 60524
60522: GO 60580
60524: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60525: LD_ADDR_VAR 0 9
60529: PUSH
60530: LD_VAR 0 29
60534: PUSH
60535: LD_VAR 0 30
60539: PUSH
60540: LD_VAR 0 31
60544: PUSH
60545: LD_VAR 0 32
60549: PUSH
60550: LD_VAR 0 33
60554: PUSH
60555: LD_VAR 0 34
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: PUSH
60568: LD_VAR 0 4
60572: PUSH
60573: LD_INT 1
60575: PLUS
60576: ARRAY
60577: ST_TO_ADDR
60578: GO 61063
60580: LD_INT 16
60582: DOUBLE
60583: EQUAL
60584: IFTRUE 60642
60586: LD_INT 17
60588: DOUBLE
60589: EQUAL
60590: IFTRUE 60642
60592: LD_INT 18
60594: DOUBLE
60595: EQUAL
60596: IFTRUE 60642
60598: LD_INT 19
60600: DOUBLE
60601: EQUAL
60602: IFTRUE 60642
60604: LD_INT 22
60606: DOUBLE
60607: EQUAL
60608: IFTRUE 60642
60610: LD_INT 20
60612: DOUBLE
60613: EQUAL
60614: IFTRUE 60642
60616: LD_INT 21
60618: DOUBLE
60619: EQUAL
60620: IFTRUE 60642
60622: LD_INT 23
60624: DOUBLE
60625: EQUAL
60626: IFTRUE 60642
60628: LD_INT 24
60630: DOUBLE
60631: EQUAL
60632: IFTRUE 60642
60634: LD_INT 25
60636: DOUBLE
60637: EQUAL
60638: IFTRUE 60642
60640: GO 60698
60642: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60643: LD_ADDR_VAR 0 9
60647: PUSH
60648: LD_VAR 0 35
60652: PUSH
60653: LD_VAR 0 36
60657: PUSH
60658: LD_VAR 0 37
60662: PUSH
60663: LD_VAR 0 38
60667: PUSH
60668: LD_VAR 0 39
60672: PUSH
60673: LD_VAR 0 40
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: PUSH
60686: LD_VAR 0 4
60690: PUSH
60691: LD_INT 1
60693: PLUS
60694: ARRAY
60695: ST_TO_ADDR
60696: GO 61063
60698: LD_INT 6
60700: DOUBLE
60701: EQUAL
60702: IFTRUE 60754
60704: LD_INT 7
60706: DOUBLE
60707: EQUAL
60708: IFTRUE 60754
60710: LD_INT 8
60712: DOUBLE
60713: EQUAL
60714: IFTRUE 60754
60716: LD_INT 13
60718: DOUBLE
60719: EQUAL
60720: IFTRUE 60754
60722: LD_INT 12
60724: DOUBLE
60725: EQUAL
60726: IFTRUE 60754
60728: LD_INT 15
60730: DOUBLE
60731: EQUAL
60732: IFTRUE 60754
60734: LD_INT 11
60736: DOUBLE
60737: EQUAL
60738: IFTRUE 60754
60740: LD_INT 14
60742: DOUBLE
60743: EQUAL
60744: IFTRUE 60754
60746: LD_INT 10
60748: DOUBLE
60749: EQUAL
60750: IFTRUE 60754
60752: GO 60810
60754: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60755: LD_ADDR_VAR 0 9
60759: PUSH
60760: LD_VAR 0 41
60764: PUSH
60765: LD_VAR 0 42
60769: PUSH
60770: LD_VAR 0 43
60774: PUSH
60775: LD_VAR 0 44
60779: PUSH
60780: LD_VAR 0 45
60784: PUSH
60785: LD_VAR 0 46
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: PUSH
60798: LD_VAR 0 4
60802: PUSH
60803: LD_INT 1
60805: PLUS
60806: ARRAY
60807: ST_TO_ADDR
60808: GO 61063
60810: LD_INT 36
60812: DOUBLE
60813: EQUAL
60814: IFTRUE 60818
60816: GO 60874
60818: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60819: LD_ADDR_VAR 0 9
60823: PUSH
60824: LD_VAR 0 47
60828: PUSH
60829: LD_VAR 0 48
60833: PUSH
60834: LD_VAR 0 49
60838: PUSH
60839: LD_VAR 0 50
60843: PUSH
60844: LD_VAR 0 51
60848: PUSH
60849: LD_VAR 0 52
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: PUSH
60862: LD_VAR 0 4
60866: PUSH
60867: LD_INT 1
60869: PLUS
60870: ARRAY
60871: ST_TO_ADDR
60872: GO 61063
60874: LD_INT 4
60876: DOUBLE
60877: EQUAL
60878: IFTRUE 60900
60880: LD_INT 5
60882: DOUBLE
60883: EQUAL
60884: IFTRUE 60900
60886: LD_INT 34
60888: DOUBLE
60889: EQUAL
60890: IFTRUE 60900
60892: LD_INT 37
60894: DOUBLE
60895: EQUAL
60896: IFTRUE 60900
60898: GO 60956
60900: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60901: LD_ADDR_VAR 0 9
60905: PUSH
60906: LD_VAR 0 53
60910: PUSH
60911: LD_VAR 0 54
60915: PUSH
60916: LD_VAR 0 55
60920: PUSH
60921: LD_VAR 0 56
60925: PUSH
60926: LD_VAR 0 57
60930: PUSH
60931: LD_VAR 0 58
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: PUSH
60944: LD_VAR 0 4
60948: PUSH
60949: LD_INT 1
60951: PLUS
60952: ARRAY
60953: ST_TO_ADDR
60954: GO 61063
60956: LD_INT 31
60958: DOUBLE
60959: EQUAL
60960: IFTRUE 61006
60962: LD_INT 32
60964: DOUBLE
60965: EQUAL
60966: IFTRUE 61006
60968: LD_INT 33
60970: DOUBLE
60971: EQUAL
60972: IFTRUE 61006
60974: LD_INT 27
60976: DOUBLE
60977: EQUAL
60978: IFTRUE 61006
60980: LD_INT 26
60982: DOUBLE
60983: EQUAL
60984: IFTRUE 61006
60986: LD_INT 28
60988: DOUBLE
60989: EQUAL
60990: IFTRUE 61006
60992: LD_INT 29
60994: DOUBLE
60995: EQUAL
60996: IFTRUE 61006
60998: LD_INT 30
61000: DOUBLE
61001: EQUAL
61002: IFTRUE 61006
61004: GO 61062
61006: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61007: LD_ADDR_VAR 0 9
61011: PUSH
61012: LD_VAR 0 59
61016: PUSH
61017: LD_VAR 0 60
61021: PUSH
61022: LD_VAR 0 61
61026: PUSH
61027: LD_VAR 0 62
61031: PUSH
61032: LD_VAR 0 63
61036: PUSH
61037: LD_VAR 0 64
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: PUSH
61050: LD_VAR 0 4
61054: PUSH
61055: LD_INT 1
61057: PLUS
61058: ARRAY
61059: ST_TO_ADDR
61060: GO 61063
61062: POP
// temp_list2 = [ ] ;
61063: LD_ADDR_VAR 0 10
61067: PUSH
61068: EMPTY
61069: ST_TO_ADDR
// for i in temp_list do
61070: LD_ADDR_VAR 0 8
61074: PUSH
61075: LD_VAR 0 9
61079: PUSH
61080: FOR_IN
61081: IFFALSE 61133
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61083: LD_ADDR_VAR 0 10
61087: PUSH
61088: LD_VAR 0 10
61092: PUSH
61093: LD_VAR 0 8
61097: PUSH
61098: LD_INT 1
61100: ARRAY
61101: PUSH
61102: LD_VAR 0 2
61106: PLUS
61107: PUSH
61108: LD_VAR 0 8
61112: PUSH
61113: LD_INT 2
61115: ARRAY
61116: PUSH
61117: LD_VAR 0 3
61121: PLUS
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: EMPTY
61128: LIST
61129: ADD
61130: ST_TO_ADDR
61131: GO 61080
61133: POP
61134: POP
// result = temp_list2 ;
61135: LD_ADDR_VAR 0 7
61139: PUSH
61140: LD_VAR 0 10
61144: ST_TO_ADDR
// end ;
61145: LD_VAR 0 7
61149: RET
// export function EnemyInRange ( unit , dist ) ; begin
61150: LD_INT 0
61152: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61153: LD_ADDR_VAR 0 3
61157: PUSH
61158: LD_VAR 0 1
61162: PPUSH
61163: CALL_OW 255
61167: PPUSH
61168: LD_VAR 0 1
61172: PPUSH
61173: CALL_OW 250
61177: PPUSH
61178: LD_VAR 0 1
61182: PPUSH
61183: CALL_OW 251
61187: PPUSH
61188: LD_VAR 0 2
61192: PPUSH
61193: CALL 34407 0 4
61197: PUSH
61198: LD_INT 4
61200: ARRAY
61201: ST_TO_ADDR
// end ;
61202: LD_VAR 0 3
61206: RET
// export function PlayerSeeMe ( unit ) ; begin
61207: LD_INT 0
61209: PPUSH
// result := See ( your_side , unit ) ;
61210: LD_ADDR_VAR 0 2
61214: PUSH
61215: LD_OWVAR 2
61219: PPUSH
61220: LD_VAR 0 1
61224: PPUSH
61225: CALL_OW 292
61229: ST_TO_ADDR
// end ;
61230: LD_VAR 0 2
61234: RET
// export function ReverseDir ( unit ) ; begin
61235: LD_INT 0
61237: PPUSH
// if not unit then
61238: LD_VAR 0 1
61242: NOT
61243: IFFALSE 61247
// exit ;
61245: GO 61270
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61247: LD_ADDR_VAR 0 2
61251: PUSH
61252: LD_VAR 0 1
61256: PPUSH
61257: CALL_OW 254
61261: PUSH
61262: LD_INT 3
61264: PLUS
61265: PUSH
61266: LD_INT 6
61268: MOD
61269: ST_TO_ADDR
// end ;
61270: LD_VAR 0 2
61274: RET
// export function ReverseArray ( array ) ; var i ; begin
61275: LD_INT 0
61277: PPUSH
61278: PPUSH
// if not array then
61279: LD_VAR 0 1
61283: NOT
61284: IFFALSE 61288
// exit ;
61286: GO 61343
// result := [ ] ;
61288: LD_ADDR_VAR 0 2
61292: PUSH
61293: EMPTY
61294: ST_TO_ADDR
// for i := array downto 1 do
61295: LD_ADDR_VAR 0 3
61299: PUSH
61300: DOUBLE
61301: LD_VAR 0 1
61305: INC
61306: ST_TO_ADDR
61307: LD_INT 1
61309: PUSH
61310: FOR_DOWNTO
61311: IFFALSE 61341
// result := Join ( result , array [ i ] ) ;
61313: LD_ADDR_VAR 0 2
61317: PUSH
61318: LD_VAR 0 2
61322: PPUSH
61323: LD_VAR 0 1
61327: PUSH
61328: LD_VAR 0 3
61332: ARRAY
61333: PPUSH
61334: CALL 66185 0 2
61338: ST_TO_ADDR
61339: GO 61310
61341: POP
61342: POP
// end ;
61343: LD_VAR 0 2
61347: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61348: LD_INT 0
61350: PPUSH
61351: PPUSH
61352: PPUSH
61353: PPUSH
61354: PPUSH
61355: PPUSH
// if not unit or not hexes then
61356: LD_VAR 0 1
61360: NOT
61361: IFTRUE 61370
61363: PUSH
61364: LD_VAR 0 2
61368: NOT
61369: OR
61370: IFFALSE 61374
// exit ;
61372: GO 61497
// dist := 9999 ;
61374: LD_ADDR_VAR 0 5
61378: PUSH
61379: LD_INT 9999
61381: ST_TO_ADDR
// for i = 1 to hexes do
61382: LD_ADDR_VAR 0 4
61386: PUSH
61387: DOUBLE
61388: LD_INT 1
61390: DEC
61391: ST_TO_ADDR
61392: LD_VAR 0 2
61396: PUSH
61397: FOR_TO
61398: IFFALSE 61485
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61400: LD_ADDR_VAR 0 6
61404: PUSH
61405: LD_VAR 0 1
61409: PPUSH
61410: LD_VAR 0 2
61414: PUSH
61415: LD_VAR 0 4
61419: ARRAY
61420: PUSH
61421: LD_INT 1
61423: ARRAY
61424: PPUSH
61425: LD_VAR 0 2
61429: PUSH
61430: LD_VAR 0 4
61434: ARRAY
61435: PUSH
61436: LD_INT 2
61438: ARRAY
61439: PPUSH
61440: CALL_OW 297
61444: ST_TO_ADDR
// if tdist < dist then
61445: LD_VAR 0 6
61449: PUSH
61450: LD_VAR 0 5
61454: LESS
61455: IFFALSE 61483
// begin hex := hexes [ i ] ;
61457: LD_ADDR_VAR 0 8
61461: PUSH
61462: LD_VAR 0 2
61466: PUSH
61467: LD_VAR 0 4
61471: ARRAY
61472: ST_TO_ADDR
// dist := tdist ;
61473: LD_ADDR_VAR 0 5
61477: PUSH
61478: LD_VAR 0 6
61482: ST_TO_ADDR
// end ; end ;
61483: GO 61397
61485: POP
61486: POP
// result := hex ;
61487: LD_ADDR_VAR 0 3
61491: PUSH
61492: LD_VAR 0 8
61496: ST_TO_ADDR
// end ;
61497: LD_VAR 0 3
61501: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61502: LD_INT 0
61504: PPUSH
61505: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61506: LD_VAR 0 1
61510: NOT
61511: IFTRUE 61550
61513: PUSH
61514: LD_VAR 0 1
61518: PUSH
61519: LD_INT 21
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 23
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PPUSH
61543: CALL_OW 69
61547: IN
61548: NOT
61549: OR
61550: IFFALSE 61554
// exit ;
61552: GO 61601
// for i = 1 to 3 do
61554: LD_ADDR_VAR 0 3
61558: PUSH
61559: DOUBLE
61560: LD_INT 1
61562: DEC
61563: ST_TO_ADDR
61564: LD_INT 3
61566: PUSH
61567: FOR_TO
61568: IFFALSE 61599
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61570: LD_VAR 0 1
61574: PPUSH
61575: CALL_OW 250
61579: PPUSH
61580: LD_VAR 0 1
61584: PPUSH
61585: CALL_OW 251
61589: PPUSH
61590: LD_INT 1
61592: PPUSH
61593: CALL_OW 453
61597: GO 61567
61599: POP
61600: POP
// end ;
61601: LD_VAR 0 2
61605: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61606: LD_INT 0
61608: PPUSH
61609: PPUSH
61610: PPUSH
61611: PPUSH
61612: PPUSH
61613: PPUSH
// if not unit or not enemy_unit then
61614: LD_VAR 0 1
61618: NOT
61619: IFTRUE 61628
61621: PUSH
61622: LD_VAR 0 2
61626: NOT
61627: OR
61628: IFFALSE 61632
// exit ;
61630: GO 62103
// if GetLives ( i ) < 250 then
61632: LD_VAR 0 4
61636: PPUSH
61637: CALL_OW 256
61641: PUSH
61642: LD_INT 250
61644: LESS
61645: IFFALSE 61658
// begin ComAutodestruct ( i ) ;
61647: LD_VAR 0 4
61651: PPUSH
61652: CALL 61502 0 1
// exit ;
61656: GO 62103
// end ; x := GetX ( enemy_unit ) ;
61658: LD_ADDR_VAR 0 7
61662: PUSH
61663: LD_VAR 0 2
61667: PPUSH
61668: CALL_OW 250
61672: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61673: LD_ADDR_VAR 0 8
61677: PUSH
61678: LD_VAR 0 2
61682: PPUSH
61683: CALL_OW 251
61687: ST_TO_ADDR
// if not x or not y then
61688: LD_VAR 0 7
61692: NOT
61693: IFTRUE 61702
61695: PUSH
61696: LD_VAR 0 8
61700: NOT
61701: OR
61702: IFFALSE 61706
// exit ;
61704: GO 62103
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61706: LD_ADDR_VAR 0 6
61710: PUSH
61711: LD_VAR 0 7
61715: PPUSH
61716: LD_INT 0
61718: PPUSH
61719: LD_INT 4
61721: PPUSH
61722: CALL_OW 272
61726: PUSH
61727: LD_VAR 0 8
61731: PPUSH
61732: LD_INT 0
61734: PPUSH
61735: LD_INT 4
61737: PPUSH
61738: CALL_OW 273
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_VAR 0 7
61751: PPUSH
61752: LD_INT 1
61754: PPUSH
61755: LD_INT 4
61757: PPUSH
61758: CALL_OW 272
61762: PUSH
61763: LD_VAR 0 8
61767: PPUSH
61768: LD_INT 1
61770: PPUSH
61771: LD_INT 4
61773: PPUSH
61774: CALL_OW 273
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_VAR 0 7
61787: PPUSH
61788: LD_INT 2
61790: PPUSH
61791: LD_INT 4
61793: PPUSH
61794: CALL_OW 272
61798: PUSH
61799: LD_VAR 0 8
61803: PPUSH
61804: LD_INT 2
61806: PPUSH
61807: LD_INT 4
61809: PPUSH
61810: CALL_OW 273
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_VAR 0 7
61823: PPUSH
61824: LD_INT 3
61826: PPUSH
61827: LD_INT 4
61829: PPUSH
61830: CALL_OW 272
61834: PUSH
61835: LD_VAR 0 8
61839: PPUSH
61840: LD_INT 3
61842: PPUSH
61843: LD_INT 4
61845: PPUSH
61846: CALL_OW 273
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_VAR 0 7
61859: PPUSH
61860: LD_INT 4
61862: PPUSH
61863: LD_INT 4
61865: PPUSH
61866: CALL_OW 272
61870: PUSH
61871: LD_VAR 0 8
61875: PPUSH
61876: LD_INT 4
61878: PPUSH
61879: LD_INT 4
61881: PPUSH
61882: CALL_OW 273
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_VAR 0 7
61895: PPUSH
61896: LD_INT 5
61898: PPUSH
61899: LD_INT 4
61901: PPUSH
61902: CALL_OW 272
61906: PUSH
61907: LD_VAR 0 8
61911: PPUSH
61912: LD_INT 5
61914: PPUSH
61915: LD_INT 4
61917: PPUSH
61918: CALL_OW 273
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: ST_TO_ADDR
// for i = tmp downto 1 do
61935: LD_ADDR_VAR 0 4
61939: PUSH
61940: DOUBLE
61941: LD_VAR 0 6
61945: INC
61946: ST_TO_ADDR
61947: LD_INT 1
61949: PUSH
61950: FOR_DOWNTO
61951: IFFALSE 62054
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61953: LD_VAR 0 6
61957: PUSH
61958: LD_VAR 0 4
61962: ARRAY
61963: PUSH
61964: LD_INT 1
61966: ARRAY
61967: PPUSH
61968: LD_VAR 0 6
61972: PUSH
61973: LD_VAR 0 4
61977: ARRAY
61978: PUSH
61979: LD_INT 2
61981: ARRAY
61982: PPUSH
61983: CALL_OW 488
61987: NOT
61988: IFTRUE 62030
61990: PUSH
61991: LD_VAR 0 6
61995: PUSH
61996: LD_VAR 0 4
62000: ARRAY
62001: PUSH
62002: LD_INT 1
62004: ARRAY
62005: PPUSH
62006: LD_VAR 0 6
62010: PUSH
62011: LD_VAR 0 4
62015: ARRAY
62016: PUSH
62017: LD_INT 2
62019: ARRAY
62020: PPUSH
62021: CALL_OW 428
62025: PUSH
62026: LD_INT 0
62028: NONEQUAL
62029: OR
62030: IFFALSE 62052
// tmp := Delete ( tmp , i ) ;
62032: LD_ADDR_VAR 0 6
62036: PUSH
62037: LD_VAR 0 6
62041: PPUSH
62042: LD_VAR 0 4
62046: PPUSH
62047: CALL_OW 3
62051: ST_TO_ADDR
62052: GO 61950
62054: POP
62055: POP
// j := GetClosestHex ( unit , tmp ) ;
62056: LD_ADDR_VAR 0 5
62060: PUSH
62061: LD_VAR 0 1
62065: PPUSH
62066: LD_VAR 0 6
62070: PPUSH
62071: CALL 61348 0 2
62075: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62076: LD_VAR 0 1
62080: PPUSH
62081: LD_VAR 0 5
62085: PUSH
62086: LD_INT 1
62088: ARRAY
62089: PPUSH
62090: LD_VAR 0 5
62094: PUSH
62095: LD_INT 2
62097: ARRAY
62098: PPUSH
62099: CALL_OW 111
// end ;
62103: LD_VAR 0 3
62107: RET
// export function PrepareApemanSoldier ( ) ; begin
62108: LD_INT 0
62110: PPUSH
// uc_nation := 0 ;
62111: LD_ADDR_OWVAR 21
62115: PUSH
62116: LD_INT 0
62118: ST_TO_ADDR
// hc_sex := sex_male ;
62119: LD_ADDR_OWVAR 27
62123: PUSH
62124: LD_INT 1
62126: ST_TO_ADDR
// hc_name :=  ;
62127: LD_ADDR_OWVAR 26
62131: PUSH
62132: LD_STRING 
62134: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62135: LD_ADDR_OWVAR 28
62139: PUSH
62140: LD_INT 15
62142: ST_TO_ADDR
// hc_gallery :=  ;
62143: LD_ADDR_OWVAR 33
62147: PUSH
62148: LD_STRING 
62150: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62151: LD_ADDR_OWVAR 31
62155: PUSH
62156: LD_INT 0
62158: PPUSH
62159: LD_INT 3
62161: PPUSH
62162: CALL_OW 12
62166: PUSH
62167: LD_INT 0
62169: PPUSH
62170: LD_INT 3
62172: PPUSH
62173: CALL_OW 12
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62190: LD_ADDR_OWVAR 29
62194: PUSH
62195: LD_INT 12
62197: PUSH
62198: LD_INT 12
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: ST_TO_ADDR
// end ;
62205: LD_VAR 0 1
62209: RET
// export function PrepareApemanEngineer ( ) ; begin
62210: LD_INT 0
62212: PPUSH
// uc_nation := 0 ;
62213: LD_ADDR_OWVAR 21
62217: PUSH
62218: LD_INT 0
62220: ST_TO_ADDR
// hc_sex := sex_male ;
62221: LD_ADDR_OWVAR 27
62225: PUSH
62226: LD_INT 1
62228: ST_TO_ADDR
// hc_name :=  ;
62229: LD_ADDR_OWVAR 26
62233: PUSH
62234: LD_STRING 
62236: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62237: LD_ADDR_OWVAR 28
62241: PUSH
62242: LD_INT 16
62244: ST_TO_ADDR
// hc_gallery :=  ;
62245: LD_ADDR_OWVAR 33
62249: PUSH
62250: LD_STRING 
62252: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62253: LD_ADDR_OWVAR 31
62257: PUSH
62258: LD_INT 0
62260: PPUSH
62261: LD_INT 3
62263: PPUSH
62264: CALL_OW 12
62268: PUSH
62269: LD_INT 0
62271: PPUSH
62272: LD_INT 3
62274: PPUSH
62275: CALL_OW 12
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62292: LD_ADDR_OWVAR 29
62296: PUSH
62297: LD_INT 12
62299: PUSH
62300: LD_INT 12
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: ST_TO_ADDR
// end ;
62307: LD_VAR 0 1
62311: RET
// export function PrepareApeman ( agressivity ) ; begin
62312: LD_INT 0
62314: PPUSH
// uc_side := 0 ;
62315: LD_ADDR_OWVAR 20
62319: PUSH
62320: LD_INT 0
62322: ST_TO_ADDR
// uc_nation := 0 ;
62323: LD_ADDR_OWVAR 21
62327: PUSH
62328: LD_INT 0
62330: ST_TO_ADDR
// hc_sex := sex_male ;
62331: LD_ADDR_OWVAR 27
62335: PUSH
62336: LD_INT 1
62338: ST_TO_ADDR
// hc_class := class_apeman ;
62339: LD_ADDR_OWVAR 28
62343: PUSH
62344: LD_INT 12
62346: ST_TO_ADDR
// hc_gallery :=  ;
62347: LD_ADDR_OWVAR 33
62351: PUSH
62352: LD_STRING 
62354: ST_TO_ADDR
// hc_name :=  ;
62355: LD_ADDR_OWVAR 26
62359: PUSH
62360: LD_STRING 
62362: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62363: LD_ADDR_OWVAR 29
62367: PUSH
62368: LD_INT 12
62370: PUSH
62371: LD_INT 12
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: ST_TO_ADDR
// if agressivity = 0 then
62378: LD_VAR 0 1
62382: PUSH
62383: LD_INT 0
62385: EQUAL
62386: IFFALSE 62398
// hc_agressivity := 0 else
62388: LD_ADDR_OWVAR 35
62392: PUSH
62393: LD_INT 0
62395: ST_TO_ADDR
62396: GO 62419
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62398: LD_ADDR_OWVAR 35
62402: PUSH
62403: LD_VAR 0 1
62407: NEG
62408: PPUSH
62409: LD_VAR 0 1
62413: PPUSH
62414: CALL_OW 12
62418: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62419: LD_ADDR_OWVAR 31
62423: PUSH
62424: LD_INT 0
62426: PPUSH
62427: LD_INT 3
62429: PPUSH
62430: CALL_OW 12
62434: PUSH
62435: LD_INT 0
62437: PPUSH
62438: LD_INT 3
62440: PPUSH
62441: CALL_OW 12
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: ST_TO_ADDR
// end ;
62458: LD_VAR 0 2
62462: RET
// export function PrepareTiger ( agressivity ) ; begin
62463: LD_INT 0
62465: PPUSH
// uc_side := 0 ;
62466: LD_ADDR_OWVAR 20
62470: PUSH
62471: LD_INT 0
62473: ST_TO_ADDR
// uc_nation := 0 ;
62474: LD_ADDR_OWVAR 21
62478: PUSH
62479: LD_INT 0
62481: ST_TO_ADDR
// InitHc ;
62482: CALL_OW 19
// hc_class := class_tiger ;
62486: LD_ADDR_OWVAR 28
62490: PUSH
62491: LD_INT 14
62493: ST_TO_ADDR
// hc_gallery :=  ;
62494: LD_ADDR_OWVAR 33
62498: PUSH
62499: LD_STRING 
62501: ST_TO_ADDR
// hc_name :=  ;
62502: LD_ADDR_OWVAR 26
62506: PUSH
62507: LD_STRING 
62509: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62510: LD_ADDR_OWVAR 35
62514: PUSH
62515: LD_VAR 0 1
62519: NEG
62520: PPUSH
62521: LD_VAR 0 1
62525: PPUSH
62526: CALL_OW 12
62530: ST_TO_ADDR
// end ;
62531: LD_VAR 0 2
62535: RET
// export function PrepareEnchidna ( ) ; begin
62536: LD_INT 0
62538: PPUSH
// uc_side := 0 ;
62539: LD_ADDR_OWVAR 20
62543: PUSH
62544: LD_INT 0
62546: ST_TO_ADDR
// uc_nation := 0 ;
62547: LD_ADDR_OWVAR 21
62551: PUSH
62552: LD_INT 0
62554: ST_TO_ADDR
// InitHc ;
62555: CALL_OW 19
// hc_class := class_baggie ;
62559: LD_ADDR_OWVAR 28
62563: PUSH
62564: LD_INT 13
62566: ST_TO_ADDR
// hc_gallery :=  ;
62567: LD_ADDR_OWVAR 33
62571: PUSH
62572: LD_STRING 
62574: ST_TO_ADDR
// hc_name :=  ;
62575: LD_ADDR_OWVAR 26
62579: PUSH
62580: LD_STRING 
62582: ST_TO_ADDR
// end ;
62583: LD_VAR 0 1
62587: RET
// export function PrepareFrog ( ) ; begin
62588: LD_INT 0
62590: PPUSH
// uc_side := 0 ;
62591: LD_ADDR_OWVAR 20
62595: PUSH
62596: LD_INT 0
62598: ST_TO_ADDR
// uc_nation := 0 ;
62599: LD_ADDR_OWVAR 21
62603: PUSH
62604: LD_INT 0
62606: ST_TO_ADDR
// InitHc ;
62607: CALL_OW 19
// hc_class := class_frog ;
62611: LD_ADDR_OWVAR 28
62615: PUSH
62616: LD_INT 19
62618: ST_TO_ADDR
// hc_gallery :=  ;
62619: LD_ADDR_OWVAR 33
62623: PUSH
62624: LD_STRING 
62626: ST_TO_ADDR
// hc_name :=  ;
62627: LD_ADDR_OWVAR 26
62631: PUSH
62632: LD_STRING 
62634: ST_TO_ADDR
// end ;
62635: LD_VAR 0 1
62639: RET
// export function PrepareFish ( ) ; begin
62640: LD_INT 0
62642: PPUSH
// uc_side := 0 ;
62643: LD_ADDR_OWVAR 20
62647: PUSH
62648: LD_INT 0
62650: ST_TO_ADDR
// uc_nation := 0 ;
62651: LD_ADDR_OWVAR 21
62655: PUSH
62656: LD_INT 0
62658: ST_TO_ADDR
// InitHc ;
62659: CALL_OW 19
// hc_class := class_fish ;
62663: LD_ADDR_OWVAR 28
62667: PUSH
62668: LD_INT 20
62670: ST_TO_ADDR
// hc_gallery :=  ;
62671: LD_ADDR_OWVAR 33
62675: PUSH
62676: LD_STRING 
62678: ST_TO_ADDR
// hc_name :=  ;
62679: LD_ADDR_OWVAR 26
62683: PUSH
62684: LD_STRING 
62686: ST_TO_ADDR
// end ;
62687: LD_VAR 0 1
62691: RET
// export function PrepareBird ( ) ; begin
62692: LD_INT 0
62694: PPUSH
// uc_side := 0 ;
62695: LD_ADDR_OWVAR 20
62699: PUSH
62700: LD_INT 0
62702: ST_TO_ADDR
// uc_nation := 0 ;
62703: LD_ADDR_OWVAR 21
62707: PUSH
62708: LD_INT 0
62710: ST_TO_ADDR
// InitHc ;
62711: CALL_OW 19
// hc_class := class_phororhacos ;
62715: LD_ADDR_OWVAR 28
62719: PUSH
62720: LD_INT 18
62722: ST_TO_ADDR
// hc_gallery :=  ;
62723: LD_ADDR_OWVAR 33
62727: PUSH
62728: LD_STRING 
62730: ST_TO_ADDR
// hc_name :=  ;
62731: LD_ADDR_OWVAR 26
62735: PUSH
62736: LD_STRING 
62738: ST_TO_ADDR
// end ;
62739: LD_VAR 0 1
62743: RET
// export function PrepareHorse ( ) ; begin
62744: LD_INT 0
62746: PPUSH
// uc_side := 0 ;
62747: LD_ADDR_OWVAR 20
62751: PUSH
62752: LD_INT 0
62754: ST_TO_ADDR
// uc_nation := 0 ;
62755: LD_ADDR_OWVAR 21
62759: PUSH
62760: LD_INT 0
62762: ST_TO_ADDR
// InitHc ;
62763: CALL_OW 19
// hc_class := class_horse ;
62767: LD_ADDR_OWVAR 28
62771: PUSH
62772: LD_INT 21
62774: ST_TO_ADDR
// hc_gallery :=  ;
62775: LD_ADDR_OWVAR 33
62779: PUSH
62780: LD_STRING 
62782: ST_TO_ADDR
// hc_name :=  ;
62783: LD_ADDR_OWVAR 26
62787: PUSH
62788: LD_STRING 
62790: ST_TO_ADDR
// end ;
62791: LD_VAR 0 1
62795: RET
// export function PrepareMastodont ( ) ; begin
62796: LD_INT 0
62798: PPUSH
// uc_side := 0 ;
62799: LD_ADDR_OWVAR 20
62803: PUSH
62804: LD_INT 0
62806: ST_TO_ADDR
// uc_nation := 0 ;
62807: LD_ADDR_OWVAR 21
62811: PUSH
62812: LD_INT 0
62814: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62815: LD_ADDR_OWVAR 37
62819: PUSH
62820: LD_INT 31
62822: ST_TO_ADDR
// vc_control := control_rider ;
62823: LD_ADDR_OWVAR 38
62827: PUSH
62828: LD_INT 4
62830: ST_TO_ADDR
// end ;
62831: LD_VAR 0 1
62835: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62836: LD_INT 0
62838: PPUSH
62839: PPUSH
62840: PPUSH
// uc_side = 0 ;
62841: LD_ADDR_OWVAR 20
62845: PUSH
62846: LD_INT 0
62848: ST_TO_ADDR
// uc_nation = 0 ;
62849: LD_ADDR_OWVAR 21
62853: PUSH
62854: LD_INT 0
62856: ST_TO_ADDR
// InitHc_All ( ) ;
62857: CALL_OW 584
// InitVc ;
62861: CALL_OW 20
// if mastodonts then
62865: LD_VAR 0 6
62869: IFFALSE 62936
// for i = 1 to mastodonts do
62871: LD_ADDR_VAR 0 11
62875: PUSH
62876: DOUBLE
62877: LD_INT 1
62879: DEC
62880: ST_TO_ADDR
62881: LD_VAR 0 6
62885: PUSH
62886: FOR_TO
62887: IFFALSE 62934
// begin vc_chassis := 31 ;
62889: LD_ADDR_OWVAR 37
62893: PUSH
62894: LD_INT 31
62896: ST_TO_ADDR
// vc_control := control_rider ;
62897: LD_ADDR_OWVAR 38
62901: PUSH
62902: LD_INT 4
62904: ST_TO_ADDR
// animal := CreateVehicle ;
62905: LD_ADDR_VAR 0 12
62909: PUSH
62910: CALL_OW 45
62914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62915: LD_VAR 0 12
62919: PPUSH
62920: LD_VAR 0 8
62924: PPUSH
62925: LD_INT 0
62927: PPUSH
62928: CALL 65078 0 3
// end ;
62932: GO 62886
62934: POP
62935: POP
// if horses then
62936: LD_VAR 0 5
62940: IFFALSE 63007
// for i = 1 to horses do
62942: LD_ADDR_VAR 0 11
62946: PUSH
62947: DOUBLE
62948: LD_INT 1
62950: DEC
62951: ST_TO_ADDR
62952: LD_VAR 0 5
62956: PUSH
62957: FOR_TO
62958: IFFALSE 63005
// begin hc_class := 21 ;
62960: LD_ADDR_OWVAR 28
62964: PUSH
62965: LD_INT 21
62967: ST_TO_ADDR
// hc_gallery :=  ;
62968: LD_ADDR_OWVAR 33
62972: PUSH
62973: LD_STRING 
62975: ST_TO_ADDR
// animal := CreateHuman ;
62976: LD_ADDR_VAR 0 12
62980: PUSH
62981: CALL_OW 44
62985: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62986: LD_VAR 0 12
62990: PPUSH
62991: LD_VAR 0 8
62995: PPUSH
62996: LD_INT 0
62998: PPUSH
62999: CALL 65078 0 3
// end ;
63003: GO 62957
63005: POP
63006: POP
// if birds then
63007: LD_VAR 0 1
63011: IFFALSE 63078
// for i = 1 to birds do
63013: LD_ADDR_VAR 0 11
63017: PUSH
63018: DOUBLE
63019: LD_INT 1
63021: DEC
63022: ST_TO_ADDR
63023: LD_VAR 0 1
63027: PUSH
63028: FOR_TO
63029: IFFALSE 63076
// begin hc_class := 18 ;
63031: LD_ADDR_OWVAR 28
63035: PUSH
63036: LD_INT 18
63038: ST_TO_ADDR
// hc_gallery =  ;
63039: LD_ADDR_OWVAR 33
63043: PUSH
63044: LD_STRING 
63046: ST_TO_ADDR
// animal := CreateHuman ;
63047: LD_ADDR_VAR 0 12
63051: PUSH
63052: CALL_OW 44
63056: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63057: LD_VAR 0 12
63061: PPUSH
63062: LD_VAR 0 8
63066: PPUSH
63067: LD_INT 0
63069: PPUSH
63070: CALL 65078 0 3
// end ;
63074: GO 63028
63076: POP
63077: POP
// if tigers then
63078: LD_VAR 0 2
63082: IFFALSE 63166
// for i = 1 to tigers do
63084: LD_ADDR_VAR 0 11
63088: PUSH
63089: DOUBLE
63090: LD_INT 1
63092: DEC
63093: ST_TO_ADDR
63094: LD_VAR 0 2
63098: PUSH
63099: FOR_TO
63100: IFFALSE 63164
// begin hc_class = class_tiger ;
63102: LD_ADDR_OWVAR 28
63106: PUSH
63107: LD_INT 14
63109: ST_TO_ADDR
// hc_gallery =  ;
63110: LD_ADDR_OWVAR 33
63114: PUSH
63115: LD_STRING 
63117: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63118: LD_ADDR_OWVAR 35
63122: PUSH
63123: LD_INT 7
63125: NEG
63126: PPUSH
63127: LD_INT 7
63129: PPUSH
63130: CALL_OW 12
63134: ST_TO_ADDR
// animal := CreateHuman ;
63135: LD_ADDR_VAR 0 12
63139: PUSH
63140: CALL_OW 44
63144: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63145: LD_VAR 0 12
63149: PPUSH
63150: LD_VAR 0 8
63154: PPUSH
63155: LD_INT 0
63157: PPUSH
63158: CALL 65078 0 3
// end ;
63162: GO 63099
63164: POP
63165: POP
// if apemans then
63166: LD_VAR 0 3
63170: IFFALSE 63293
// for i = 1 to apemans do
63172: LD_ADDR_VAR 0 11
63176: PUSH
63177: DOUBLE
63178: LD_INT 1
63180: DEC
63181: ST_TO_ADDR
63182: LD_VAR 0 3
63186: PUSH
63187: FOR_TO
63188: IFFALSE 63291
// begin hc_class = class_apeman ;
63190: LD_ADDR_OWVAR 28
63194: PUSH
63195: LD_INT 12
63197: ST_TO_ADDR
// hc_gallery =  ;
63198: LD_ADDR_OWVAR 33
63202: PUSH
63203: LD_STRING 
63205: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63206: LD_ADDR_OWVAR 35
63210: PUSH
63211: LD_INT 2
63213: NEG
63214: PPUSH
63215: LD_INT 2
63217: PPUSH
63218: CALL_OW 12
63222: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63223: LD_ADDR_OWVAR 31
63227: PUSH
63228: LD_INT 1
63230: PPUSH
63231: LD_INT 3
63233: PPUSH
63234: CALL_OW 12
63238: PUSH
63239: LD_INT 1
63241: PPUSH
63242: LD_INT 3
63244: PPUSH
63245: CALL_OW 12
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: ST_TO_ADDR
// animal := CreateHuman ;
63262: LD_ADDR_VAR 0 12
63266: PUSH
63267: CALL_OW 44
63271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63272: LD_VAR 0 12
63276: PPUSH
63277: LD_VAR 0 8
63281: PPUSH
63282: LD_INT 0
63284: PPUSH
63285: CALL 65078 0 3
// end ;
63289: GO 63187
63291: POP
63292: POP
// if enchidnas then
63293: LD_VAR 0 4
63297: IFFALSE 63364
// for i = 1 to enchidnas do
63299: LD_ADDR_VAR 0 11
63303: PUSH
63304: DOUBLE
63305: LD_INT 1
63307: DEC
63308: ST_TO_ADDR
63309: LD_VAR 0 4
63313: PUSH
63314: FOR_TO
63315: IFFALSE 63362
// begin hc_class = 13 ;
63317: LD_ADDR_OWVAR 28
63321: PUSH
63322: LD_INT 13
63324: ST_TO_ADDR
// hc_gallery =  ;
63325: LD_ADDR_OWVAR 33
63329: PUSH
63330: LD_STRING 
63332: ST_TO_ADDR
// animal := CreateHuman ;
63333: LD_ADDR_VAR 0 12
63337: PUSH
63338: CALL_OW 44
63342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63343: LD_VAR 0 12
63347: PPUSH
63348: LD_VAR 0 8
63352: PPUSH
63353: LD_INT 0
63355: PPUSH
63356: CALL 65078 0 3
// end ;
63360: GO 63314
63362: POP
63363: POP
// if fishes then
63364: LD_VAR 0 7
63368: IFFALSE 63435
// for i = 1 to fishes do
63370: LD_ADDR_VAR 0 11
63374: PUSH
63375: DOUBLE
63376: LD_INT 1
63378: DEC
63379: ST_TO_ADDR
63380: LD_VAR 0 7
63384: PUSH
63385: FOR_TO
63386: IFFALSE 63433
// begin hc_class = 20 ;
63388: LD_ADDR_OWVAR 28
63392: PUSH
63393: LD_INT 20
63395: ST_TO_ADDR
// hc_gallery =  ;
63396: LD_ADDR_OWVAR 33
63400: PUSH
63401: LD_STRING 
63403: ST_TO_ADDR
// animal := CreateHuman ;
63404: LD_ADDR_VAR 0 12
63408: PUSH
63409: CALL_OW 44
63413: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63414: LD_VAR 0 12
63418: PPUSH
63419: LD_VAR 0 9
63423: PPUSH
63424: LD_INT 0
63426: PPUSH
63427: CALL 65078 0 3
// end ;
63431: GO 63385
63433: POP
63434: POP
// end ;
63435: LD_VAR 0 10
63439: RET
// export function WantHeal ( sci , unit ) ; begin
63440: LD_INT 0
63442: PPUSH
// if GetTaskList ( sci ) > 0 then
63443: LD_VAR 0 1
63447: PPUSH
63448: CALL_OW 437
63452: PUSH
63453: LD_INT 0
63455: GREATER
63456: IFFALSE 63528
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63458: LD_VAR 0 1
63462: PPUSH
63463: CALL_OW 437
63467: PUSH
63468: LD_INT 1
63470: ARRAY
63471: PUSH
63472: LD_INT 1
63474: ARRAY
63475: PUSH
63476: LD_STRING l
63478: EQUAL
63479: IFFALSE 63506
63481: PUSH
63482: LD_VAR 0 1
63486: PPUSH
63487: CALL_OW 437
63491: PUSH
63492: LD_INT 1
63494: ARRAY
63495: PUSH
63496: LD_INT 4
63498: ARRAY
63499: PUSH
63500: LD_VAR 0 2
63504: EQUAL
63505: AND
63506: IFFALSE 63518
// result := true else
63508: LD_ADDR_VAR 0 3
63512: PUSH
63513: LD_INT 1
63515: ST_TO_ADDR
63516: GO 63526
// result := false ;
63518: LD_ADDR_VAR 0 3
63522: PUSH
63523: LD_INT 0
63525: ST_TO_ADDR
// end else
63526: GO 63536
// result := false ;
63528: LD_ADDR_VAR 0 3
63532: PUSH
63533: LD_INT 0
63535: ST_TO_ADDR
// end ;
63536: LD_VAR 0 3
63540: RET
// export function HealTarget ( sci ) ; begin
63541: LD_INT 0
63543: PPUSH
// if not sci then
63544: LD_VAR 0 1
63548: NOT
63549: IFFALSE 63553
// exit ;
63551: GO 63618
// result := 0 ;
63553: LD_ADDR_VAR 0 2
63557: PUSH
63558: LD_INT 0
63560: ST_TO_ADDR
// if GetTaskList ( sci ) then
63561: LD_VAR 0 1
63565: PPUSH
63566: CALL_OW 437
63570: IFFALSE 63618
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63572: LD_VAR 0 1
63576: PPUSH
63577: CALL_OW 437
63581: PUSH
63582: LD_INT 1
63584: ARRAY
63585: PUSH
63586: LD_INT 1
63588: ARRAY
63589: PUSH
63590: LD_STRING l
63592: EQUAL
63593: IFFALSE 63618
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63595: LD_ADDR_VAR 0 2
63599: PUSH
63600: LD_VAR 0 1
63604: PPUSH
63605: CALL_OW 437
63609: PUSH
63610: LD_INT 1
63612: ARRAY
63613: PUSH
63614: LD_INT 4
63616: ARRAY
63617: ST_TO_ADDR
// end ;
63618: LD_VAR 0 2
63622: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63623: LD_INT 0
63625: PPUSH
63626: PPUSH
63627: PPUSH
63628: PPUSH
// if not base_units then
63629: LD_VAR 0 1
63633: NOT
63634: IFFALSE 63638
// exit ;
63636: GO 63725
// result := false ;
63638: LD_ADDR_VAR 0 2
63642: PUSH
63643: LD_INT 0
63645: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63646: LD_ADDR_VAR 0 5
63650: PUSH
63651: LD_VAR 0 1
63655: PPUSH
63656: LD_INT 21
63658: PUSH
63659: LD_INT 3
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PPUSH
63666: CALL_OW 72
63670: ST_TO_ADDR
// if not tmp then
63671: LD_VAR 0 5
63675: NOT
63676: IFFALSE 63680
// exit ;
63678: GO 63725
// for i in tmp do
63680: LD_ADDR_VAR 0 3
63684: PUSH
63685: LD_VAR 0 5
63689: PUSH
63690: FOR_IN
63691: IFFALSE 63723
// begin result := EnemyInRange ( i , 22 ) ;
63693: LD_ADDR_VAR 0 2
63697: PUSH
63698: LD_VAR 0 3
63702: PPUSH
63703: LD_INT 22
63705: PPUSH
63706: CALL 61150 0 2
63710: ST_TO_ADDR
// if result then
63711: LD_VAR 0 2
63715: IFFALSE 63721
// exit ;
63717: POP
63718: POP
63719: GO 63725
// end ;
63721: GO 63690
63723: POP
63724: POP
// end ;
63725: LD_VAR 0 2
63729: RET
// export function FilterByTag ( units , tag ) ; begin
63730: LD_INT 0
63732: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63733: LD_ADDR_VAR 0 3
63737: PUSH
63738: LD_VAR 0 1
63742: PPUSH
63743: LD_INT 120
63745: PUSH
63746: LD_VAR 0 2
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PPUSH
63755: CALL_OW 72
63759: ST_TO_ADDR
// end ;
63760: LD_VAR 0 3
63764: RET
// export function IsDriver ( un ) ; begin
63765: LD_INT 0
63767: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63768: LD_ADDR_VAR 0 2
63772: PUSH
63773: LD_VAR 0 1
63777: PUSH
63778: LD_INT 55
63780: PUSH
63781: EMPTY
63782: LIST
63783: PPUSH
63784: CALL_OW 69
63788: IN
63789: ST_TO_ADDR
// end ;
63790: LD_VAR 0 2
63794: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63795: LD_INT 0
63797: PPUSH
63798: PPUSH
// list := [ ] ;
63799: LD_ADDR_VAR 0 5
63803: PUSH
63804: EMPTY
63805: ST_TO_ADDR
// case d of 0 :
63806: LD_VAR 0 3
63810: PUSH
63811: LD_INT 0
63813: DOUBLE
63814: EQUAL
63815: IFTRUE 63819
63817: GO 63952
63819: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63820: LD_ADDR_VAR 0 5
63824: PUSH
63825: LD_VAR 0 1
63829: PUSH
63830: LD_INT 4
63832: MINUS
63833: PUSH
63834: LD_VAR 0 2
63838: PUSH
63839: LD_INT 4
63841: MINUS
63842: PUSH
63843: LD_INT 2
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: LIST
63850: PUSH
63851: LD_VAR 0 1
63855: PUSH
63856: LD_INT 3
63858: MINUS
63859: PUSH
63860: LD_VAR 0 2
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: PUSH
63873: LD_VAR 0 1
63877: PUSH
63878: LD_INT 4
63880: PLUS
63881: PUSH
63882: LD_VAR 0 2
63886: PUSH
63887: LD_INT 4
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: LIST
63894: PUSH
63895: LD_VAR 0 1
63899: PUSH
63900: LD_INT 3
63902: PLUS
63903: PUSH
63904: LD_VAR 0 2
63908: PUSH
63909: LD_INT 3
63911: PLUS
63912: PUSH
63913: LD_INT 5
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: LIST
63920: PUSH
63921: LD_VAR 0 1
63925: PUSH
63926: LD_VAR 0 2
63930: PUSH
63931: LD_INT 4
63933: PLUS
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: LIST
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: ST_TO_ADDR
// end ; 1 :
63950: GO 64650
63952: LD_INT 1
63954: DOUBLE
63955: EQUAL
63956: IFTRUE 63960
63958: GO 64093
63960: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63961: LD_ADDR_VAR 0 5
63965: PUSH
63966: LD_VAR 0 1
63970: PUSH
63971: LD_VAR 0 2
63975: PUSH
63976: LD_INT 4
63978: MINUS
63979: PUSH
63980: LD_INT 3
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: LIST
63987: PUSH
63988: LD_VAR 0 1
63992: PUSH
63993: LD_INT 3
63995: MINUS
63996: PUSH
63997: LD_VAR 0 2
64001: PUSH
64002: LD_INT 3
64004: MINUS
64005: PUSH
64006: LD_INT 2
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: LIST
64013: PUSH
64014: LD_VAR 0 1
64018: PUSH
64019: LD_INT 4
64021: MINUS
64022: PUSH
64023: LD_VAR 0 2
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: LIST
64035: PUSH
64036: LD_VAR 0 1
64040: PUSH
64041: LD_VAR 0 2
64045: PUSH
64046: LD_INT 3
64048: PLUS
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: LIST
64057: PUSH
64058: LD_VAR 0 1
64062: PUSH
64063: LD_INT 4
64065: PLUS
64066: PUSH
64067: LD_VAR 0 2
64071: PUSH
64072: LD_INT 4
64074: PLUS
64075: PUSH
64076: LD_INT 5
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: LIST
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: ST_TO_ADDR
// end ; 2 :
64091: GO 64650
64093: LD_INT 2
64095: DOUBLE
64096: EQUAL
64097: IFTRUE 64101
64099: GO 64230
64101: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64102: LD_ADDR_VAR 0 5
64106: PUSH
64107: LD_VAR 0 1
64111: PUSH
64112: LD_VAR 0 2
64116: PUSH
64117: LD_INT 3
64119: MINUS
64120: PUSH
64121: LD_INT 3
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: LIST
64128: PUSH
64129: LD_VAR 0 1
64133: PUSH
64134: LD_INT 4
64136: PLUS
64137: PUSH
64138: LD_VAR 0 2
64142: PUSH
64143: LD_INT 4
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: PUSH
64151: LD_VAR 0 1
64155: PUSH
64156: LD_VAR 0 2
64160: PUSH
64161: LD_INT 4
64163: PLUS
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: LIST
64172: PUSH
64173: LD_VAR 0 1
64177: PUSH
64178: LD_INT 3
64180: MINUS
64181: PUSH
64182: LD_VAR 0 2
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: LIST
64194: PUSH
64195: LD_VAR 0 1
64199: PUSH
64200: LD_INT 4
64202: MINUS
64203: PUSH
64204: LD_VAR 0 2
64208: PUSH
64209: LD_INT 4
64211: MINUS
64212: PUSH
64213: LD_INT 2
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: LIST
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: ST_TO_ADDR
// end ; 3 :
64228: GO 64650
64230: LD_INT 3
64232: DOUBLE
64233: EQUAL
64234: IFTRUE 64238
64236: GO 64371
64238: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64239: LD_ADDR_VAR 0 5
64243: PUSH
64244: LD_VAR 0 1
64248: PUSH
64249: LD_INT 3
64251: PLUS
64252: PUSH
64253: LD_VAR 0 2
64257: PUSH
64258: LD_INT 4
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: LIST
64265: PUSH
64266: LD_VAR 0 1
64270: PUSH
64271: LD_INT 4
64273: PLUS
64274: PUSH
64275: LD_VAR 0 2
64279: PUSH
64280: LD_INT 4
64282: PLUS
64283: PUSH
64284: LD_INT 5
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: LIST
64291: PUSH
64292: LD_VAR 0 1
64296: PUSH
64297: LD_INT 4
64299: MINUS
64300: PUSH
64301: LD_VAR 0 2
64305: PUSH
64306: LD_INT 1
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: PUSH
64314: LD_VAR 0 1
64318: PUSH
64319: LD_VAR 0 2
64323: PUSH
64324: LD_INT 4
64326: MINUS
64327: PUSH
64328: LD_INT 3
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: LIST
64335: PUSH
64336: LD_VAR 0 1
64340: PUSH
64341: LD_INT 3
64343: MINUS
64344: PUSH
64345: LD_VAR 0 2
64349: PUSH
64350: LD_INT 3
64352: MINUS
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: LIST
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: ST_TO_ADDR
// end ; 4 :
64369: GO 64650
64371: LD_INT 4
64373: DOUBLE
64374: EQUAL
64375: IFTRUE 64379
64377: GO 64512
64379: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64380: LD_ADDR_VAR 0 5
64384: PUSH
64385: LD_VAR 0 1
64389: PUSH
64390: LD_VAR 0 2
64394: PUSH
64395: LD_INT 4
64397: PLUS
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: LIST
64406: PUSH
64407: LD_VAR 0 1
64411: PUSH
64412: LD_INT 3
64414: PLUS
64415: PUSH
64416: LD_VAR 0 2
64420: PUSH
64421: LD_INT 3
64423: PLUS
64424: PUSH
64425: LD_INT 5
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: LIST
64432: PUSH
64433: LD_VAR 0 1
64437: PUSH
64438: LD_INT 4
64440: PLUS
64441: PUSH
64442: LD_VAR 0 2
64446: PUSH
64447: LD_INT 4
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: LIST
64454: PUSH
64455: LD_VAR 0 1
64459: PUSH
64460: LD_VAR 0 2
64464: PUSH
64465: LD_INT 3
64467: MINUS
64468: PUSH
64469: LD_INT 3
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: PUSH
64477: LD_VAR 0 1
64481: PUSH
64482: LD_INT 4
64484: MINUS
64485: PUSH
64486: LD_VAR 0 2
64490: PUSH
64491: LD_INT 4
64493: MINUS
64494: PUSH
64495: LD_INT 2
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: LIST
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: ST_TO_ADDR
// end ; 5 :
64510: GO 64650
64512: LD_INT 5
64514: DOUBLE
64515: EQUAL
64516: IFTRUE 64520
64518: GO 64649
64520: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64521: LD_ADDR_VAR 0 5
64525: PUSH
64526: LD_VAR 0 1
64530: PUSH
64531: LD_INT 4
64533: MINUS
64534: PUSH
64535: LD_VAR 0 2
64539: PUSH
64540: LD_INT 1
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: LIST
64547: PUSH
64548: LD_VAR 0 1
64552: PUSH
64553: LD_VAR 0 2
64557: PUSH
64558: LD_INT 4
64560: MINUS
64561: PUSH
64562: LD_INT 3
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: PUSH
64570: LD_VAR 0 1
64574: PUSH
64575: LD_INT 4
64577: PLUS
64578: PUSH
64579: LD_VAR 0 2
64583: PUSH
64584: LD_INT 4
64586: PLUS
64587: PUSH
64588: LD_INT 5
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: LIST
64595: PUSH
64596: LD_VAR 0 1
64600: PUSH
64601: LD_INT 3
64603: PLUS
64604: PUSH
64605: LD_VAR 0 2
64609: PUSH
64610: LD_INT 4
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: LIST
64617: PUSH
64618: LD_VAR 0 1
64622: PUSH
64623: LD_VAR 0 2
64627: PUSH
64628: LD_INT 3
64630: PLUS
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: LIST
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: ST_TO_ADDR
// end ; end ;
64647: GO 64650
64649: POP
// result := list ;
64650: LD_ADDR_VAR 0 4
64654: PUSH
64655: LD_VAR 0 5
64659: ST_TO_ADDR
// end ;
64660: LD_VAR 0 4
64664: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64665: LD_INT 0
64667: PPUSH
64668: PPUSH
64669: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64670: LD_VAR 0 1
64674: NOT
64675: IFTRUE 64703
64677: PUSH
64678: LD_VAR 0 2
64682: PUSH
64683: LD_INT 1
64685: PUSH
64686: LD_INT 2
64688: PUSH
64689: LD_INT 3
64691: PUSH
64692: LD_INT 4
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: IN
64701: NOT
64702: OR
64703: IFFALSE 64707
// exit ;
64705: GO 64790
// tmp := [ ] ;
64707: LD_ADDR_VAR 0 5
64711: PUSH
64712: EMPTY
64713: ST_TO_ADDR
// for i in units do
64714: LD_ADDR_VAR 0 4
64718: PUSH
64719: LD_VAR 0 1
64723: PUSH
64724: FOR_IN
64725: IFFALSE 64759
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64727: LD_ADDR_VAR 0 5
64731: PUSH
64732: LD_VAR 0 5
64736: PPUSH
64737: LD_VAR 0 4
64741: PPUSH
64742: LD_VAR 0 2
64746: PPUSH
64747: CALL_OW 259
64751: PPUSH
64752: CALL 66185 0 2
64756: ST_TO_ADDR
64757: GO 64724
64759: POP
64760: POP
// if not tmp then
64761: LD_VAR 0 5
64765: NOT
64766: IFFALSE 64770
// exit ;
64768: GO 64790
// result := SortListByListDesc ( units , tmp ) ;
64770: LD_ADDR_VAR 0 3
64774: PUSH
64775: LD_VAR 0 1
64779: PPUSH
64780: LD_VAR 0 5
64784: PPUSH
64785: CALL_OW 77
64789: ST_TO_ADDR
// end ;
64790: LD_VAR 0 3
64794: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64795: LD_INT 0
64797: PPUSH
64798: PPUSH
64799: PPUSH
// result := false ;
64800: LD_ADDR_VAR 0 3
64804: PUSH
64805: LD_INT 0
64807: ST_TO_ADDR
// if not building then
64808: LD_VAR 0 2
64812: NOT
64813: IFFALSE 64817
// exit ;
64815: GO 64961
// x := GetX ( building ) ;
64817: LD_ADDR_VAR 0 4
64821: PUSH
64822: LD_VAR 0 2
64826: PPUSH
64827: CALL_OW 250
64831: ST_TO_ADDR
// y := GetY ( building ) ;
64832: LD_ADDR_VAR 0 5
64836: PUSH
64837: LD_VAR 0 2
64841: PPUSH
64842: CALL_OW 251
64846: ST_TO_ADDR
// if not x or not y then
64847: LD_VAR 0 4
64851: NOT
64852: IFTRUE 64861
64854: PUSH
64855: LD_VAR 0 5
64859: NOT
64860: OR
64861: IFFALSE 64865
// exit ;
64863: GO 64961
// if GetTaskList ( unit ) then
64865: LD_VAR 0 1
64869: PPUSH
64870: CALL_OW 437
64874: IFFALSE 64961
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64876: LD_STRING e
64878: PUSH
64879: LD_VAR 0 1
64883: PPUSH
64884: CALL_OW 437
64888: PUSH
64889: LD_INT 1
64891: ARRAY
64892: PUSH
64893: LD_INT 1
64895: ARRAY
64896: EQUAL
64897: IFFALSE 64924
64899: PUSH
64900: LD_VAR 0 4
64904: PUSH
64905: LD_VAR 0 1
64909: PPUSH
64910: CALL_OW 437
64914: PUSH
64915: LD_INT 1
64917: ARRAY
64918: PUSH
64919: LD_INT 2
64921: ARRAY
64922: EQUAL
64923: AND
64924: IFFALSE 64951
64926: PUSH
64927: LD_VAR 0 5
64931: PUSH
64932: LD_VAR 0 1
64936: PPUSH
64937: CALL_OW 437
64941: PUSH
64942: LD_INT 1
64944: ARRAY
64945: PUSH
64946: LD_INT 3
64948: ARRAY
64949: EQUAL
64950: AND
64951: IFFALSE 64961
// result := true end ;
64953: LD_ADDR_VAR 0 3
64957: PUSH
64958: LD_INT 1
64960: ST_TO_ADDR
// end ;
64961: LD_VAR 0 3
64965: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64966: LD_INT 0
64968: PPUSH
// result := false ;
64969: LD_ADDR_VAR 0 4
64973: PUSH
64974: LD_INT 0
64976: ST_TO_ADDR
// if GetTaskList ( unit ) then
64977: LD_VAR 0 1
64981: PPUSH
64982: CALL_OW 437
64986: IFFALSE 65073
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64988: LD_STRING M
64990: PUSH
64991: LD_VAR 0 1
64995: PPUSH
64996: CALL_OW 437
65000: PUSH
65001: LD_INT 1
65003: ARRAY
65004: PUSH
65005: LD_INT 1
65007: ARRAY
65008: EQUAL
65009: IFFALSE 65036
65011: PUSH
65012: LD_VAR 0 2
65016: PUSH
65017: LD_VAR 0 1
65021: PPUSH
65022: CALL_OW 437
65026: PUSH
65027: LD_INT 1
65029: ARRAY
65030: PUSH
65031: LD_INT 2
65033: ARRAY
65034: EQUAL
65035: AND
65036: IFFALSE 65063
65038: PUSH
65039: LD_VAR 0 3
65043: PUSH
65044: LD_VAR 0 1
65048: PPUSH
65049: CALL_OW 437
65053: PUSH
65054: LD_INT 1
65056: ARRAY
65057: PUSH
65058: LD_INT 3
65060: ARRAY
65061: EQUAL
65062: AND
65063: IFFALSE 65073
// result := true ;
65065: LD_ADDR_VAR 0 4
65069: PUSH
65070: LD_INT 1
65072: ST_TO_ADDR
// end ; end ;
65073: LD_VAR 0 4
65077: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65078: LD_INT 0
65080: PPUSH
65081: PPUSH
65082: PPUSH
65083: PPUSH
// if not unit or not area then
65084: LD_VAR 0 1
65088: NOT
65089: IFTRUE 65098
65091: PUSH
65092: LD_VAR 0 2
65096: NOT
65097: OR
65098: IFFALSE 65102
// exit ;
65100: GO 65278
// tmp := AreaToList ( area , i ) ;
65102: LD_ADDR_VAR 0 6
65106: PUSH
65107: LD_VAR 0 2
65111: PPUSH
65112: LD_VAR 0 5
65116: PPUSH
65117: CALL_OW 517
65121: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65122: LD_ADDR_VAR 0 5
65126: PUSH
65127: DOUBLE
65128: LD_INT 1
65130: DEC
65131: ST_TO_ADDR
65132: LD_VAR 0 6
65136: PUSH
65137: LD_INT 1
65139: ARRAY
65140: PUSH
65141: FOR_TO
65142: IFFALSE 65276
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65144: LD_ADDR_VAR 0 7
65148: PUSH
65149: LD_VAR 0 6
65153: PUSH
65154: LD_INT 1
65156: ARRAY
65157: PUSH
65158: LD_VAR 0 5
65162: ARRAY
65163: PUSH
65164: LD_VAR 0 6
65168: PUSH
65169: LD_INT 2
65171: ARRAY
65172: PUSH
65173: LD_VAR 0 5
65177: ARRAY
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65183: LD_INT 92
65185: PUSH
65186: LD_VAR 0 7
65190: PUSH
65191: LD_INT 1
65193: ARRAY
65194: PUSH
65195: LD_VAR 0 7
65199: PUSH
65200: LD_INT 2
65202: ARRAY
65203: PUSH
65204: LD_INT 2
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: PPUSH
65213: CALL_OW 69
65217: PUSH
65218: LD_INT 0
65220: EQUAL
65221: IFFALSE 65274
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65223: LD_VAR 0 1
65227: PPUSH
65228: LD_VAR 0 7
65232: PUSH
65233: LD_INT 1
65235: ARRAY
65236: PPUSH
65237: LD_VAR 0 7
65241: PUSH
65242: LD_INT 2
65244: ARRAY
65245: PPUSH
65246: LD_VAR 0 3
65250: PPUSH
65251: CALL_OW 48
// result := IsPlaced ( unit ) ;
65255: LD_ADDR_VAR 0 4
65259: PUSH
65260: LD_VAR 0 1
65264: PPUSH
65265: CALL_OW 305
65269: ST_TO_ADDR
// exit ;
65270: POP
65271: POP
65272: GO 65278
// end ; end ;
65274: GO 65141
65276: POP
65277: POP
// end ;
65278: LD_VAR 0 4
65282: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65283: LD_INT 0
65285: PPUSH
65286: PPUSH
65287: PPUSH
// if not side or side > 8 then
65288: LD_VAR 0 1
65292: NOT
65293: IFTRUE 65305
65295: PUSH
65296: LD_VAR 0 1
65300: PUSH
65301: LD_INT 8
65303: GREATER
65304: OR
65305: IFFALSE 65309
// exit ;
65307: GO 65496
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65309: LD_ADDR_VAR 0 4
65313: PUSH
65314: LD_INT 22
65316: PUSH
65317: LD_VAR 0 1
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 21
65328: PUSH
65329: LD_INT 3
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PPUSH
65340: CALL_OW 69
65344: ST_TO_ADDR
// if not tmp then
65345: LD_VAR 0 4
65349: NOT
65350: IFFALSE 65354
// exit ;
65352: GO 65496
// enable_addtolog := true ;
65354: LD_ADDR_OWVAR 81
65358: PUSH
65359: LD_INT 1
65361: ST_TO_ADDR
// AddToLog ( [ ) ;
65362: LD_STRING [
65364: PPUSH
65365: CALL_OW 561
// for i in tmp do
65369: LD_ADDR_VAR 0 3
65373: PUSH
65374: LD_VAR 0 4
65378: PUSH
65379: FOR_IN
65380: IFFALSE 65487
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65382: LD_STRING [
65384: PUSH
65385: LD_VAR 0 3
65389: PPUSH
65390: CALL_OW 266
65394: STR
65395: PUSH
65396: LD_STRING , 
65398: STR
65399: PUSH
65400: LD_VAR 0 3
65404: PPUSH
65405: CALL_OW 250
65409: STR
65410: PUSH
65411: LD_STRING , 
65413: STR
65414: PUSH
65415: LD_VAR 0 3
65419: PPUSH
65420: CALL_OW 251
65424: STR
65425: PUSH
65426: LD_STRING , 
65428: STR
65429: PUSH
65430: LD_VAR 0 3
65434: PPUSH
65435: CALL_OW 254
65439: STR
65440: PUSH
65441: LD_STRING , 
65443: STR
65444: PUSH
65445: LD_VAR 0 3
65449: PPUSH
65450: LD_INT 1
65452: PPUSH
65453: CALL_OW 268
65457: STR
65458: PUSH
65459: LD_STRING , 
65461: STR
65462: PUSH
65463: LD_VAR 0 3
65467: PPUSH
65468: LD_INT 2
65470: PPUSH
65471: CALL_OW 268
65475: STR
65476: PUSH
65477: LD_STRING ],
65479: STR
65480: PPUSH
65481: CALL_OW 561
// end ;
65485: GO 65379
65487: POP
65488: POP
// AddToLog ( ]; ) ;
65489: LD_STRING ];
65491: PPUSH
65492: CALL_OW 561
// end ;
65496: LD_VAR 0 2
65500: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65501: LD_INT 0
65503: PPUSH
65504: PPUSH
65505: PPUSH
65506: PPUSH
65507: PPUSH
// if not area or not rate or not max then
65508: LD_VAR 0 1
65512: NOT
65513: IFTRUE 65522
65515: PUSH
65516: LD_VAR 0 2
65520: NOT
65521: OR
65522: IFTRUE 65531
65524: PUSH
65525: LD_VAR 0 4
65529: NOT
65530: OR
65531: IFFALSE 65535
// exit ;
65533: GO 65724
// while 1 do
65535: LD_INT 1
65537: IFFALSE 65724
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65539: LD_ADDR_VAR 0 9
65543: PUSH
65544: LD_VAR 0 1
65548: PPUSH
65549: LD_INT 1
65551: PPUSH
65552: CALL_OW 287
65556: PUSH
65557: LD_INT 10
65559: MUL
65560: ST_TO_ADDR
// r := rate / 10 ;
65561: LD_ADDR_VAR 0 7
65565: PUSH
65566: LD_VAR 0 2
65570: PUSH
65571: LD_INT 10
65573: DIVREAL
65574: ST_TO_ADDR
// time := 1 1$00 ;
65575: LD_ADDR_VAR 0 8
65579: PUSH
65580: LD_INT 2100
65582: ST_TO_ADDR
// if amount < min then
65583: LD_VAR 0 9
65587: PUSH
65588: LD_VAR 0 3
65592: LESS
65593: IFFALSE 65611
// r := r * 2 else
65595: LD_ADDR_VAR 0 7
65599: PUSH
65600: LD_VAR 0 7
65604: PUSH
65605: LD_INT 2
65607: MUL
65608: ST_TO_ADDR
65609: GO 65637
// if amount > max then
65611: LD_VAR 0 9
65615: PUSH
65616: LD_VAR 0 4
65620: GREATER
65621: IFFALSE 65637
// r := r / 2 ;
65623: LD_ADDR_VAR 0 7
65627: PUSH
65628: LD_VAR 0 7
65632: PUSH
65633: LD_INT 2
65635: DIVREAL
65636: ST_TO_ADDR
// time := time / r ;
65637: LD_ADDR_VAR 0 8
65641: PUSH
65642: LD_VAR 0 8
65646: PUSH
65647: LD_VAR 0 7
65651: DIVREAL
65652: ST_TO_ADDR
// if time < 0 then
65653: LD_VAR 0 8
65657: PUSH
65658: LD_INT 0
65660: LESS
65661: IFFALSE 65678
// time := time * - 1 ;
65663: LD_ADDR_VAR 0 8
65667: PUSH
65668: LD_VAR 0 8
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: MUL
65677: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65678: LD_VAR 0 8
65682: PUSH
65683: LD_INT 35
65685: PPUSH
65686: LD_INT 875
65688: PPUSH
65689: CALL_OW 12
65693: PLUS
65694: PPUSH
65695: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65699: LD_INT 1
65701: PPUSH
65702: LD_INT 5
65704: PPUSH
65705: CALL_OW 12
65709: PPUSH
65710: LD_VAR 0 1
65714: PPUSH
65715: LD_INT 1
65717: PPUSH
65718: CALL_OW 55
// end ;
65722: GO 65535
// end ;
65724: LD_VAR 0 5
65728: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65729: LD_INT 0
65731: PPUSH
65732: PPUSH
65733: PPUSH
65734: PPUSH
65735: PPUSH
65736: PPUSH
65737: PPUSH
65738: PPUSH
// if not turrets or not factories then
65739: LD_VAR 0 1
65743: NOT
65744: IFTRUE 65753
65746: PUSH
65747: LD_VAR 0 2
65751: NOT
65752: OR
65753: IFFALSE 65757
// exit ;
65755: GO 66064
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65757: LD_ADDR_VAR 0 10
65761: PUSH
65762: LD_INT 5
65764: PUSH
65765: LD_INT 6
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 2
65774: PUSH
65775: LD_INT 4
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 3
65784: PUSH
65785: LD_INT 5
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 24
65799: PUSH
65800: LD_INT 25
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 23
65809: PUSH
65810: LD_INT 27
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 42
65823: PUSH
65824: LD_INT 43
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 44
65833: PUSH
65834: LD_INT 46
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 45
65843: PUSH
65844: LD_INT 47
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: LIST
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: LIST
65860: ST_TO_ADDR
// result := [ ] ;
65861: LD_ADDR_VAR 0 3
65865: PUSH
65866: EMPTY
65867: ST_TO_ADDR
// for i in turrets do
65868: LD_ADDR_VAR 0 4
65872: PUSH
65873: LD_VAR 0 1
65877: PUSH
65878: FOR_IN
65879: IFFALSE 66062
// begin nat := GetNation ( i ) ;
65881: LD_ADDR_VAR 0 7
65885: PUSH
65886: LD_VAR 0 4
65890: PPUSH
65891: CALL_OW 248
65895: ST_TO_ADDR
// weapon := 0 ;
65896: LD_ADDR_VAR 0 8
65900: PUSH
65901: LD_INT 0
65903: ST_TO_ADDR
// if not nat then
65904: LD_VAR 0 7
65908: NOT
65909: IFFALSE 65913
// continue ;
65911: GO 65878
// for j in list [ nat ] do
65913: LD_ADDR_VAR 0 5
65917: PUSH
65918: LD_VAR 0 10
65922: PUSH
65923: LD_VAR 0 7
65927: ARRAY
65928: PUSH
65929: FOR_IN
65930: IFFALSE 65971
// if GetBWeapon ( i ) = j [ 1 ] then
65932: LD_VAR 0 4
65936: PPUSH
65937: CALL_OW 269
65941: PUSH
65942: LD_VAR 0 5
65946: PUSH
65947: LD_INT 1
65949: ARRAY
65950: EQUAL
65951: IFFALSE 65969
// begin weapon := j [ 2 ] ;
65953: LD_ADDR_VAR 0 8
65957: PUSH
65958: LD_VAR 0 5
65962: PUSH
65963: LD_INT 2
65965: ARRAY
65966: ST_TO_ADDR
// break ;
65967: GO 65971
// end ;
65969: GO 65929
65971: POP
65972: POP
// if not weapon then
65973: LD_VAR 0 8
65977: NOT
65978: IFFALSE 65982
// continue ;
65980: GO 65878
// for k in factories do
65982: LD_ADDR_VAR 0 6
65986: PUSH
65987: LD_VAR 0 2
65991: PUSH
65992: FOR_IN
65993: IFFALSE 66058
// begin weapons := AvailableWeaponList ( k ) ;
65995: LD_ADDR_VAR 0 9
65999: PUSH
66000: LD_VAR 0 6
66004: PPUSH
66005: CALL_OW 478
66009: ST_TO_ADDR
// if not weapons then
66010: LD_VAR 0 9
66014: NOT
66015: IFFALSE 66019
// continue ;
66017: GO 65992
// if weapon in weapons then
66019: LD_VAR 0 8
66023: PUSH
66024: LD_VAR 0 9
66028: IN
66029: IFFALSE 66056
// begin result := [ i , weapon ] ;
66031: LD_ADDR_VAR 0 3
66035: PUSH
66036: LD_VAR 0 4
66040: PUSH
66041: LD_VAR 0 8
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: ST_TO_ADDR
// exit ;
66050: POP
66051: POP
66052: POP
66053: POP
66054: GO 66064
// end ; end ;
66056: GO 65992
66058: POP
66059: POP
// end ;
66060: GO 65878
66062: POP
66063: POP
// end ;
66064: LD_VAR 0 3
66068: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66069: LD_INT 0
66071: PPUSH
// if not side or side > 8 then
66072: LD_VAR 0 3
66076: NOT
66077: IFTRUE 66089
66079: PUSH
66080: LD_VAR 0 3
66084: PUSH
66085: LD_INT 8
66087: GREATER
66088: OR
66089: IFFALSE 66093
// exit ;
66091: GO 66152
// if not range then
66093: LD_VAR 0 4
66097: NOT
66098: IFFALSE 66109
// range := - 12 ;
66100: LD_ADDR_VAR 0 4
66104: PUSH
66105: LD_INT 12
66107: NEG
66108: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66109: LD_VAR 0 1
66113: PPUSH
66114: LD_VAR 0 2
66118: PPUSH
66119: LD_VAR 0 3
66123: PPUSH
66124: LD_VAR 0 4
66128: PPUSH
66129: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66133: LD_VAR 0 1
66137: PPUSH
66138: LD_VAR 0 2
66142: PPUSH
66143: LD_VAR 0 3
66147: PPUSH
66148: CALL_OW 331
// end ;
66152: LD_VAR 0 5
66156: RET
// export function Video ( mode ) ; begin
66157: LD_INT 0
66159: PPUSH
// ingame_video = mode ;
66160: LD_ADDR_OWVAR 52
66164: PUSH
66165: LD_VAR 0 1
66169: ST_TO_ADDR
// interface_hidden = mode ;
66170: LD_ADDR_OWVAR 54
66174: PUSH
66175: LD_VAR 0 1
66179: ST_TO_ADDR
// end ;
66180: LD_VAR 0 2
66184: RET
// export function Join ( array , element ) ; begin
66185: LD_INT 0
66187: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66188: LD_ADDR_VAR 0 3
66192: PUSH
66193: LD_VAR 0 1
66197: PPUSH
66198: LD_VAR 0 1
66202: PUSH
66203: LD_INT 1
66205: PLUS
66206: PPUSH
66207: LD_VAR 0 2
66211: PPUSH
66212: CALL_OW 1
66216: ST_TO_ADDR
// end ;
66217: LD_VAR 0 3
66221: RET
// export function JoinUnion ( array , element ) ; begin
66222: LD_INT 0
66224: PPUSH
// result := array union element ;
66225: LD_ADDR_VAR 0 3
66229: PUSH
66230: LD_VAR 0 1
66234: PUSH
66235: LD_VAR 0 2
66239: UNION
66240: ST_TO_ADDR
// end ;
66241: LD_VAR 0 3
66245: RET
// export function GetBehemoths ( side ) ; begin
66246: LD_INT 0
66248: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66249: LD_ADDR_VAR 0 2
66253: PUSH
66254: LD_INT 22
66256: PUSH
66257: LD_VAR 0 1
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 31
66268: PUSH
66269: LD_INT 25
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PPUSH
66280: CALL_OW 69
66284: ST_TO_ADDR
// end ;
66285: LD_VAR 0 2
66289: RET
// export function Shuffle ( array ) ; var i , index ; begin
66290: LD_INT 0
66292: PPUSH
66293: PPUSH
66294: PPUSH
// result := [ ] ;
66295: LD_ADDR_VAR 0 2
66299: PUSH
66300: EMPTY
66301: ST_TO_ADDR
// if not array then
66302: LD_VAR 0 1
66306: NOT
66307: IFFALSE 66311
// exit ;
66309: GO 66410
// Randomize ;
66311: CALL_OW 10
// for i = array downto 1 do
66315: LD_ADDR_VAR 0 3
66319: PUSH
66320: DOUBLE
66321: LD_VAR 0 1
66325: INC
66326: ST_TO_ADDR
66327: LD_INT 1
66329: PUSH
66330: FOR_DOWNTO
66331: IFFALSE 66408
// begin index := rand ( 1 , array ) ;
66333: LD_ADDR_VAR 0 4
66337: PUSH
66338: LD_INT 1
66340: PPUSH
66341: LD_VAR 0 1
66345: PPUSH
66346: CALL_OW 12
66350: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66351: LD_ADDR_VAR 0 2
66355: PUSH
66356: LD_VAR 0 2
66360: PPUSH
66361: LD_VAR 0 2
66365: PUSH
66366: LD_INT 1
66368: PLUS
66369: PPUSH
66370: LD_VAR 0 1
66374: PUSH
66375: LD_VAR 0 4
66379: ARRAY
66380: PPUSH
66381: CALL_OW 2
66385: ST_TO_ADDR
// array := Delete ( array , index ) ;
66386: LD_ADDR_VAR 0 1
66390: PUSH
66391: LD_VAR 0 1
66395: PPUSH
66396: LD_VAR 0 4
66400: PPUSH
66401: CALL_OW 3
66405: ST_TO_ADDR
// end ;
66406: GO 66330
66408: POP
66409: POP
// end ;
66410: LD_VAR 0 2
66414: RET
// export function GetBaseMaterials ( base ) ; begin
66415: LD_INT 0
66417: PPUSH
// result := [ 0 , 0 , 0 ] ;
66418: LD_ADDR_VAR 0 2
66422: PUSH
66423: LD_INT 0
66425: PUSH
66426: LD_INT 0
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: ST_TO_ADDR
// if not base then
66437: LD_VAR 0 1
66441: NOT
66442: IFFALSE 66446
// exit ;
66444: GO 66495
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66446: LD_ADDR_VAR 0 2
66450: PUSH
66451: LD_VAR 0 1
66455: PPUSH
66456: LD_INT 1
66458: PPUSH
66459: CALL_OW 275
66463: PUSH
66464: LD_VAR 0 1
66468: PPUSH
66469: LD_INT 2
66471: PPUSH
66472: CALL_OW 275
66476: PUSH
66477: LD_VAR 0 1
66481: PPUSH
66482: LD_INT 3
66484: PPUSH
66485: CALL_OW 275
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: LIST
66494: ST_TO_ADDR
// end ;
66495: LD_VAR 0 2
66499: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66500: LD_INT 0
66502: PPUSH
66503: PPUSH
// result := array ;
66504: LD_ADDR_VAR 0 3
66508: PUSH
66509: LD_VAR 0 1
66513: ST_TO_ADDR
// if size >= result then
66514: LD_VAR 0 2
66518: PUSH
66519: LD_VAR 0 3
66523: GREATEREQUAL
66524: IFFALSE 66528
// exit ;
66526: GO 66578
// if size then
66528: LD_VAR 0 2
66532: IFFALSE 66578
// for i := array downto size do
66534: LD_ADDR_VAR 0 4
66538: PUSH
66539: DOUBLE
66540: LD_VAR 0 1
66544: INC
66545: ST_TO_ADDR
66546: LD_VAR 0 2
66550: PUSH
66551: FOR_DOWNTO
66552: IFFALSE 66576
// result := Delete ( result , result ) ;
66554: LD_ADDR_VAR 0 3
66558: PUSH
66559: LD_VAR 0 3
66563: PPUSH
66564: LD_VAR 0 3
66568: PPUSH
66569: CALL_OW 3
66573: ST_TO_ADDR
66574: GO 66551
66576: POP
66577: POP
// end ;
66578: LD_VAR 0 3
66582: RET
// export function ComExit ( unit ) ; var tmp ; begin
66583: LD_INT 0
66585: PPUSH
66586: PPUSH
// if not IsInUnit ( unit ) then
66587: LD_VAR 0 1
66591: PPUSH
66592: CALL_OW 310
66596: NOT
66597: IFFALSE 66601
// exit ;
66599: GO 66661
// tmp := IsInUnit ( unit ) ;
66601: LD_ADDR_VAR 0 3
66605: PUSH
66606: LD_VAR 0 1
66610: PPUSH
66611: CALL_OW 310
66615: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66616: LD_VAR 0 3
66620: PPUSH
66621: CALL_OW 247
66625: PUSH
66626: LD_INT 2
66628: EQUAL
66629: IFFALSE 66642
// ComExitVehicle ( unit ) else
66631: LD_VAR 0 1
66635: PPUSH
66636: CALL_OW 121
66640: GO 66651
// ComExitBuilding ( unit ) ;
66642: LD_VAR 0 1
66646: PPUSH
66647: CALL_OW 122
// result := tmp ;
66651: LD_ADDR_VAR 0 2
66655: PUSH
66656: LD_VAR 0 3
66660: ST_TO_ADDR
// end ;
66661: LD_VAR 0 2
66665: RET
// export function ComExitAll ( units ) ; var i ; begin
66666: LD_INT 0
66668: PPUSH
66669: PPUSH
// if not units then
66670: LD_VAR 0 1
66674: NOT
66675: IFFALSE 66679
// exit ;
66677: GO 66705
// for i in units do
66679: LD_ADDR_VAR 0 3
66683: PUSH
66684: LD_VAR 0 1
66688: PUSH
66689: FOR_IN
66690: IFFALSE 66703
// ComExit ( i ) ;
66692: LD_VAR 0 3
66696: PPUSH
66697: CALL 66583 0 1
66701: GO 66689
66703: POP
66704: POP
// end ;
66705: LD_VAR 0 2
66709: RET
// export function ResetHc ; begin
66710: LD_INT 0
66712: PPUSH
// InitHc ;
66713: CALL_OW 19
// hc_importance := 0 ;
66717: LD_ADDR_OWVAR 32
66721: PUSH
66722: LD_INT 0
66724: ST_TO_ADDR
// end ;
66725: LD_VAR 0 1
66729: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66730: LD_INT 0
66732: PPUSH
66733: PPUSH
66734: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66735: LD_ADDR_VAR 0 6
66739: PUSH
66740: LD_VAR 0 1
66744: PUSH
66745: LD_VAR 0 3
66749: PLUS
66750: PUSH
66751: LD_INT 2
66753: DIV
66754: ST_TO_ADDR
// if _x < 0 then
66755: LD_VAR 0 6
66759: PUSH
66760: LD_INT 0
66762: LESS
66763: IFFALSE 66780
// _x := _x * - 1 ;
66765: LD_ADDR_VAR 0 6
66769: PUSH
66770: LD_VAR 0 6
66774: PUSH
66775: LD_INT 1
66777: NEG
66778: MUL
66779: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66780: LD_ADDR_VAR 0 7
66784: PUSH
66785: LD_VAR 0 2
66789: PUSH
66790: LD_VAR 0 4
66794: PLUS
66795: PUSH
66796: LD_INT 2
66798: DIV
66799: ST_TO_ADDR
// if _y < 0 then
66800: LD_VAR 0 7
66804: PUSH
66805: LD_INT 0
66807: LESS
66808: IFFALSE 66825
// _y := _y * - 1 ;
66810: LD_ADDR_VAR 0 7
66814: PUSH
66815: LD_VAR 0 7
66819: PUSH
66820: LD_INT 1
66822: NEG
66823: MUL
66824: ST_TO_ADDR
// result := [ _x , _y ] ;
66825: LD_ADDR_VAR 0 5
66829: PUSH
66830: LD_VAR 0 6
66834: PUSH
66835: LD_VAR 0 7
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: ST_TO_ADDR
// end ;
66844: LD_VAR 0 5
66848: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66849: LD_INT 0
66851: PPUSH
66852: PPUSH
66853: PPUSH
66854: PPUSH
// task := GetTaskList ( unit ) ;
66855: LD_ADDR_VAR 0 7
66859: PUSH
66860: LD_VAR 0 1
66864: PPUSH
66865: CALL_OW 437
66869: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66870: LD_VAR 0 7
66874: NOT
66875: IFFALSE 66894
66877: PUSH
66878: LD_VAR 0 1
66882: PPUSH
66883: LD_VAR 0 2
66887: PPUSH
66888: CALL_OW 308
66892: NOT
66893: AND
66894: IFFALSE 66898
// exit ;
66896: GO 67016
// if IsInArea ( unit , area ) then
66898: LD_VAR 0 1
66902: PPUSH
66903: LD_VAR 0 2
66907: PPUSH
66908: CALL_OW 308
66912: IFFALSE 66930
// begin ComMoveToArea ( unit , goAway ) ;
66914: LD_VAR 0 1
66918: PPUSH
66919: LD_VAR 0 3
66923: PPUSH
66924: CALL_OW 113
// exit ;
66928: GO 67016
// end ; if task [ 1 ] [ 1 ] <> M then
66930: LD_VAR 0 7
66934: PUSH
66935: LD_INT 1
66937: ARRAY
66938: PUSH
66939: LD_INT 1
66941: ARRAY
66942: PUSH
66943: LD_STRING M
66945: NONEQUAL
66946: IFFALSE 66950
// exit ;
66948: GO 67016
// x := task [ 1 ] [ 2 ] ;
66950: LD_ADDR_VAR 0 5
66954: PUSH
66955: LD_VAR 0 7
66959: PUSH
66960: LD_INT 1
66962: ARRAY
66963: PUSH
66964: LD_INT 2
66966: ARRAY
66967: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66968: LD_ADDR_VAR 0 6
66972: PUSH
66973: LD_VAR 0 7
66977: PUSH
66978: LD_INT 1
66980: ARRAY
66981: PUSH
66982: LD_INT 3
66984: ARRAY
66985: ST_TO_ADDR
// if InArea ( x , y , area ) then
66986: LD_VAR 0 5
66990: PPUSH
66991: LD_VAR 0 6
66995: PPUSH
66996: LD_VAR 0 2
67000: PPUSH
67001: CALL_OW 309
67005: IFFALSE 67016
// ComStop ( unit ) ;
67007: LD_VAR 0 1
67011: PPUSH
67012: CALL_OW 141
// end ;
67016: LD_VAR 0 4
67020: RET
// export function Abs ( value ) ; begin
67021: LD_INT 0
67023: PPUSH
// result := value ;
67024: LD_ADDR_VAR 0 2
67028: PUSH
67029: LD_VAR 0 1
67033: ST_TO_ADDR
// if value < 0 then
67034: LD_VAR 0 1
67038: PUSH
67039: LD_INT 0
67041: LESS
67042: IFFALSE 67059
// result := value * - 1 ;
67044: LD_ADDR_VAR 0 2
67048: PUSH
67049: LD_VAR 0 1
67053: PUSH
67054: LD_INT 1
67056: NEG
67057: MUL
67058: ST_TO_ADDR
// end ;
67059: LD_VAR 0 2
67063: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67064: LD_INT 0
67066: PPUSH
67067: PPUSH
67068: PPUSH
67069: PPUSH
67070: PPUSH
67071: PPUSH
67072: PPUSH
67073: PPUSH
// if not unit or not building then
67074: LD_VAR 0 1
67078: NOT
67079: IFTRUE 67088
67081: PUSH
67082: LD_VAR 0 2
67086: NOT
67087: OR
67088: IFFALSE 67092
// exit ;
67090: GO 67320
// x := GetX ( building ) ;
67092: LD_ADDR_VAR 0 4
67096: PUSH
67097: LD_VAR 0 2
67101: PPUSH
67102: CALL_OW 250
67106: ST_TO_ADDR
// y := GetY ( building ) ;
67107: LD_ADDR_VAR 0 6
67111: PUSH
67112: LD_VAR 0 2
67116: PPUSH
67117: CALL_OW 251
67121: ST_TO_ADDR
// d := GetDir ( building ) ;
67122: LD_ADDR_VAR 0 8
67126: PUSH
67127: LD_VAR 0 2
67131: PPUSH
67132: CALL_OW 254
67136: ST_TO_ADDR
// r := 4 ;
67137: LD_ADDR_VAR 0 9
67141: PUSH
67142: LD_INT 4
67144: ST_TO_ADDR
// for i := 1 to 5 do
67145: LD_ADDR_VAR 0 10
67149: PUSH
67150: DOUBLE
67151: LD_INT 1
67153: DEC
67154: ST_TO_ADDR
67155: LD_INT 5
67157: PUSH
67158: FOR_TO
67159: IFFALSE 67318
// begin _x := ShiftX ( x , d , r + i ) ;
67161: LD_ADDR_VAR 0 5
67165: PUSH
67166: LD_VAR 0 4
67170: PPUSH
67171: LD_VAR 0 8
67175: PPUSH
67176: LD_VAR 0 9
67180: PUSH
67181: LD_VAR 0 10
67185: PLUS
67186: PPUSH
67187: CALL_OW 272
67191: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67192: LD_ADDR_VAR 0 7
67196: PUSH
67197: LD_VAR 0 6
67201: PPUSH
67202: LD_VAR 0 8
67206: PPUSH
67207: LD_VAR 0 9
67211: PUSH
67212: LD_VAR 0 10
67216: PLUS
67217: PPUSH
67218: CALL_OW 273
67222: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67223: LD_VAR 0 5
67227: PPUSH
67228: LD_VAR 0 7
67232: PPUSH
67233: CALL_OW 488
67237: IFFALSE 67272
67239: PUSH
67240: LD_VAR 0 5
67244: PPUSH
67245: LD_VAR 0 7
67249: PPUSH
67250: CALL_OW 428
67254: PPUSH
67255: CALL_OW 247
67259: PUSH
67260: LD_INT 3
67262: PUSH
67263: LD_INT 2
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: IN
67270: NOT
67271: AND
67272: IFFALSE 67316
// begin ComMoveXY ( unit , _x , _y ) ;
67274: LD_VAR 0 1
67278: PPUSH
67279: LD_VAR 0 5
67283: PPUSH
67284: LD_VAR 0 7
67288: PPUSH
67289: CALL_OW 111
// result := [ _x , _y ] ;
67293: LD_ADDR_VAR 0 3
67297: PUSH
67298: LD_VAR 0 5
67302: PUSH
67303: LD_VAR 0 7
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: ST_TO_ADDR
// exit ;
67312: POP
67313: POP
67314: GO 67320
// end ; end ;
67316: GO 67158
67318: POP
67319: POP
// end ;
67320: LD_VAR 0 3
67324: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67325: LD_INT 0
67327: PPUSH
67328: PPUSH
67329: PPUSH
// result := 0 ;
67330: LD_ADDR_VAR 0 3
67334: PUSH
67335: LD_INT 0
67337: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67338: LD_VAR 0 1
67342: PUSH
67343: LD_INT 0
67345: LESS
67346: IFTRUE 67358
67348: PUSH
67349: LD_VAR 0 1
67353: PUSH
67354: LD_INT 8
67356: GREATER
67357: OR
67358: IFTRUE 67370
67360: PUSH
67361: LD_VAR 0 2
67365: PUSH
67366: LD_INT 0
67368: LESS
67369: OR
67370: IFTRUE 67382
67372: PUSH
67373: LD_VAR 0 2
67377: PUSH
67378: LD_INT 8
67380: GREATER
67381: OR
67382: IFFALSE 67386
// exit ;
67384: GO 67461
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67386: LD_ADDR_VAR 0 4
67390: PUSH
67391: LD_INT 22
67393: PUSH
67394: LD_VAR 0 2
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PPUSH
67403: CALL_OW 69
67407: PUSH
67408: FOR_IN
67409: IFFALSE 67459
// begin un := UnitShoot ( i ) ;
67411: LD_ADDR_VAR 0 5
67415: PUSH
67416: LD_VAR 0 4
67420: PPUSH
67421: CALL_OW 504
67425: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67426: LD_VAR 0 5
67430: PPUSH
67431: CALL_OW 255
67435: PUSH
67436: LD_VAR 0 1
67440: EQUAL
67441: IFFALSE 67457
// begin result := un ;
67443: LD_ADDR_VAR 0 3
67447: PUSH
67448: LD_VAR 0 5
67452: ST_TO_ADDR
// exit ;
67453: POP
67454: POP
67455: GO 67461
// end ; end ;
67457: GO 67408
67459: POP
67460: POP
// end ;
67461: LD_VAR 0 3
67465: RET
// export function GetCargoBay ( units ) ; begin
67466: LD_INT 0
67468: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67469: LD_ADDR_VAR 0 2
67473: PUSH
67474: LD_VAR 0 1
67478: PPUSH
67479: LD_INT 2
67481: PUSH
67482: LD_INT 34
67484: PUSH
67485: LD_INT 12
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 34
67494: PUSH
67495: LD_INT 51
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 34
67504: PUSH
67505: LD_INT 32
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 34
67514: PUSH
67515: LD_INT 89
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: PPUSH
67529: CALL_OW 72
67533: ST_TO_ADDR
// end ;
67534: LD_VAR 0 2
67538: RET
// export function Negate ( value ) ; begin
67539: LD_INT 0
67541: PPUSH
// result := not value ;
67542: LD_ADDR_VAR 0 2
67546: PUSH
67547: LD_VAR 0 1
67551: NOT
67552: ST_TO_ADDR
// end ;
67553: LD_VAR 0 2
67557: RET
// export function Inc ( value ) ; begin
67558: LD_INT 0
67560: PPUSH
// result := value + 1 ;
67561: LD_ADDR_VAR 0 2
67565: PUSH
67566: LD_VAR 0 1
67570: PUSH
67571: LD_INT 1
67573: PLUS
67574: ST_TO_ADDR
// end ;
67575: LD_VAR 0 2
67579: RET
// export function Dec ( value ) ; begin
67580: LD_INT 0
67582: PPUSH
// result := value - 1 ;
67583: LD_ADDR_VAR 0 2
67587: PUSH
67588: LD_VAR 0 1
67592: PUSH
67593: LD_INT 1
67595: MINUS
67596: ST_TO_ADDR
// end ;
67597: LD_VAR 0 2
67601: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67602: LD_INT 0
67604: PPUSH
67605: PPUSH
67606: PPUSH
67607: PPUSH
67608: PPUSH
67609: PPUSH
67610: PPUSH
67611: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67612: LD_VAR 0 1
67616: PPUSH
67617: LD_VAR 0 2
67621: PPUSH
67622: CALL_OW 488
67626: NOT
67627: IFTRUE 67646
67629: PUSH
67630: LD_VAR 0 3
67634: PPUSH
67635: LD_VAR 0 4
67639: PPUSH
67640: CALL_OW 488
67644: NOT
67645: OR
67646: IFFALSE 67659
// begin result := - 1 ;
67648: LD_ADDR_VAR 0 5
67652: PUSH
67653: LD_INT 1
67655: NEG
67656: ST_TO_ADDR
// exit ;
67657: GO 67894
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67659: LD_ADDR_VAR 0 12
67663: PUSH
67664: LD_VAR 0 1
67668: PPUSH
67669: LD_VAR 0 2
67673: PPUSH
67674: LD_VAR 0 3
67678: PPUSH
67679: LD_VAR 0 4
67683: PPUSH
67684: CALL 66730 0 4
67688: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67689: LD_ADDR_VAR 0 11
67693: PUSH
67694: LD_VAR 0 1
67698: PPUSH
67699: LD_VAR 0 2
67703: PPUSH
67704: LD_VAR 0 12
67708: PUSH
67709: LD_INT 1
67711: ARRAY
67712: PPUSH
67713: LD_VAR 0 12
67717: PUSH
67718: LD_INT 2
67720: ARRAY
67721: PPUSH
67722: CALL_OW 298
67726: ST_TO_ADDR
// distance := 9999 ;
67727: LD_ADDR_VAR 0 10
67731: PUSH
67732: LD_INT 9999
67734: ST_TO_ADDR
// for i := 0 to 5 do
67735: LD_ADDR_VAR 0 6
67739: PUSH
67740: DOUBLE
67741: LD_INT 0
67743: DEC
67744: ST_TO_ADDR
67745: LD_INT 5
67747: PUSH
67748: FOR_TO
67749: IFFALSE 67892
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67751: LD_ADDR_VAR 0 7
67755: PUSH
67756: LD_VAR 0 1
67760: PPUSH
67761: LD_VAR 0 6
67765: PPUSH
67766: LD_VAR 0 11
67770: PPUSH
67771: CALL_OW 272
67775: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67776: LD_ADDR_VAR 0 8
67780: PUSH
67781: LD_VAR 0 2
67785: PPUSH
67786: LD_VAR 0 6
67790: PPUSH
67791: LD_VAR 0 11
67795: PPUSH
67796: CALL_OW 273
67800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67801: LD_VAR 0 7
67805: PPUSH
67806: LD_VAR 0 8
67810: PPUSH
67811: CALL_OW 488
67815: NOT
67816: IFFALSE 67820
// continue ;
67818: GO 67748
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67820: LD_ADDR_VAR 0 9
67824: PUSH
67825: LD_VAR 0 12
67829: PUSH
67830: LD_INT 1
67832: ARRAY
67833: PPUSH
67834: LD_VAR 0 12
67838: PUSH
67839: LD_INT 2
67841: ARRAY
67842: PPUSH
67843: LD_VAR 0 7
67847: PPUSH
67848: LD_VAR 0 8
67852: PPUSH
67853: CALL_OW 298
67857: ST_TO_ADDR
// if tmp < distance then
67858: LD_VAR 0 9
67862: PUSH
67863: LD_VAR 0 10
67867: LESS
67868: IFFALSE 67890
// begin result := i ;
67870: LD_ADDR_VAR 0 5
67874: PUSH
67875: LD_VAR 0 6
67879: ST_TO_ADDR
// distance := tmp ;
67880: LD_ADDR_VAR 0 10
67884: PUSH
67885: LD_VAR 0 9
67889: ST_TO_ADDR
// end ; end ;
67890: GO 67748
67892: POP
67893: POP
// end ;
67894: LD_VAR 0 5
67898: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67899: LD_INT 0
67901: PPUSH
67902: PPUSH
// if not driver or not IsInUnit ( driver ) then
67903: LD_VAR 0 1
67907: NOT
67908: IFTRUE 67922
67910: PUSH
67911: LD_VAR 0 1
67915: PPUSH
67916: CALL_OW 310
67920: NOT
67921: OR
67922: IFFALSE 67926
// exit ;
67924: GO 68016
// vehicle := IsInUnit ( driver ) ;
67926: LD_ADDR_VAR 0 3
67930: PUSH
67931: LD_VAR 0 1
67935: PPUSH
67936: CALL_OW 310
67940: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67941: LD_VAR 0 1
67945: PPUSH
67946: LD_STRING \
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: LD_INT 0
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: LD_INT 0
67963: PUSH
67964: LD_INT 0
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: PUSH
67976: LD_STRING E
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: LD_INT 0
67984: PUSH
67985: LD_VAR 0 3
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: LD_INT 0
67995: PUSH
67996: LD_INT 0
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PPUSH
68012: CALL_OW 446
// end ;
68016: LD_VAR 0 2
68020: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68021: LD_INT 0
68023: PPUSH
68024: PPUSH
// if not driver or not IsInUnit ( driver ) then
68025: LD_VAR 0 1
68029: NOT
68030: IFTRUE 68044
68032: PUSH
68033: LD_VAR 0 1
68037: PPUSH
68038: CALL_OW 310
68042: NOT
68043: OR
68044: IFFALSE 68048
// exit ;
68046: GO 68138
// vehicle := IsInUnit ( driver ) ;
68048: LD_ADDR_VAR 0 3
68052: PUSH
68053: LD_VAR 0 1
68057: PPUSH
68058: CALL_OW 310
68062: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68063: LD_VAR 0 1
68067: PPUSH
68068: LD_STRING \
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: LD_INT 0
68076: PUSH
68077: LD_INT 0
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: LD_INT 0
68085: PUSH
68086: LD_INT 0
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: PUSH
68098: LD_STRING E
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: LD_VAR 0 3
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: LD_INT 0
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PPUSH
68134: CALL_OW 447
// end ;
68138: LD_VAR 0 2
68142: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68143: LD_INT 0
68145: PPUSH
68146: PPUSH
68147: PPUSH
// tmp := [ ] ;
68148: LD_ADDR_VAR 0 5
68152: PUSH
68153: EMPTY
68154: ST_TO_ADDR
// for i in units do
68155: LD_ADDR_VAR 0 4
68159: PUSH
68160: LD_VAR 0 1
68164: PUSH
68165: FOR_IN
68166: IFFALSE 68204
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68168: LD_ADDR_VAR 0 5
68172: PUSH
68173: LD_VAR 0 5
68177: PPUSH
68178: LD_VAR 0 5
68182: PUSH
68183: LD_INT 1
68185: PLUS
68186: PPUSH
68187: LD_VAR 0 4
68191: PPUSH
68192: CALL_OW 256
68196: PPUSH
68197: CALL_OW 2
68201: ST_TO_ADDR
68202: GO 68165
68204: POP
68205: POP
// if not tmp then
68206: LD_VAR 0 5
68210: NOT
68211: IFFALSE 68215
// exit ;
68213: GO 68263
// if asc then
68215: LD_VAR 0 2
68219: IFFALSE 68243
// result := SortListByListAsc ( units , tmp ) else
68221: LD_ADDR_VAR 0 3
68225: PUSH
68226: LD_VAR 0 1
68230: PPUSH
68231: LD_VAR 0 5
68235: PPUSH
68236: CALL_OW 76
68240: ST_TO_ADDR
68241: GO 68263
// result := SortListByListDesc ( units , tmp ) ;
68243: LD_ADDR_VAR 0 3
68247: PUSH
68248: LD_VAR 0 1
68252: PPUSH
68253: LD_VAR 0 5
68257: PPUSH
68258: CALL_OW 77
68262: ST_TO_ADDR
// end ;
68263: LD_VAR 0 3
68267: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68268: LD_INT 0
68270: PPUSH
68271: PPUSH
// task := GetTaskList ( mech ) ;
68272: LD_ADDR_VAR 0 4
68276: PUSH
68277: LD_VAR 0 1
68281: PPUSH
68282: CALL_OW 437
68286: ST_TO_ADDR
// if not task then
68287: LD_VAR 0 4
68291: NOT
68292: IFFALSE 68296
// exit ;
68294: GO 68340
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68296: LD_ADDR_VAR 0 3
68300: PUSH
68301: LD_VAR 0 4
68305: PUSH
68306: LD_INT 1
68308: ARRAY
68309: PUSH
68310: LD_INT 1
68312: ARRAY
68313: PUSH
68314: LD_STRING r
68316: EQUAL
68317: IFFALSE 68339
68319: PUSH
68320: LD_VAR 0 4
68324: PUSH
68325: LD_INT 1
68327: ARRAY
68328: PUSH
68329: LD_INT 4
68331: ARRAY
68332: PUSH
68333: LD_VAR 0 2
68337: EQUAL
68338: AND
68339: ST_TO_ADDR
// end ;
68340: LD_VAR 0 3
68344: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68345: LD_INT 0
68347: PPUSH
// SetDir ( unit , d ) ;
68348: LD_VAR 0 1
68352: PPUSH
68353: LD_VAR 0 4
68357: PPUSH
68358: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
68362: LD_ADDR_VAR 0 6
68366: PUSH
68367: LD_VAR 0 1
68371: PPUSH
68372: LD_VAR 0 2
68376: PPUSH
68377: LD_VAR 0 3
68381: PPUSH
68382: LD_VAR 0 5
68386: PPUSH
68387: CALL_OW 48
68391: ST_TO_ADDR
// end ;
68392: LD_VAR 0 6
68396: RET
// export function ToNaturalNumber ( number ) ; begin
68397: LD_INT 0
68399: PPUSH
// result := number div 1 ;
68400: LD_ADDR_VAR 0 2
68404: PUSH
68405: LD_VAR 0 1
68409: PUSH
68410: LD_INT 1
68412: DIV
68413: ST_TO_ADDR
// if number < 0 then
68414: LD_VAR 0 1
68418: PUSH
68419: LD_INT 0
68421: LESS
68422: IFFALSE 68432
// result := 0 ;
68424: LD_ADDR_VAR 0 2
68428: PUSH
68429: LD_INT 0
68431: ST_TO_ADDR
// end ;
68432: LD_VAR 0 2
68436: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
68437: LD_INT 0
68439: PPUSH
68440: PPUSH
68441: PPUSH
// if not buildings then
68442: LD_VAR 0 1
68446: NOT
68447: IFFALSE 68451
// exit ;
68449: GO 68566
// tmp := [ ] ;
68451: LD_ADDR_VAR 0 5
68455: PUSH
68456: EMPTY
68457: ST_TO_ADDR
// for b in buildings do
68458: LD_ADDR_VAR 0 4
68462: PUSH
68463: LD_VAR 0 1
68467: PUSH
68468: FOR_IN
68469: IFFALSE 68507
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
68471: LD_ADDR_VAR 0 5
68475: PUSH
68476: LD_VAR 0 5
68480: PPUSH
68481: LD_VAR 0 5
68485: PUSH
68486: LD_INT 1
68488: PLUS
68489: PPUSH
68490: LD_VAR 0 4
68494: PPUSH
68495: CALL_OW 266
68499: PPUSH
68500: CALL_OW 1
68504: ST_TO_ADDR
68505: GO 68468
68507: POP
68508: POP
// if not tmp then
68509: LD_VAR 0 5
68513: NOT
68514: IFFALSE 68518
// exit ;
68516: GO 68566
// if asc then
68518: LD_VAR 0 2
68522: IFFALSE 68546
// result := SortListByListAsc ( buildings , tmp ) else
68524: LD_ADDR_VAR 0 3
68528: PUSH
68529: LD_VAR 0 1
68533: PPUSH
68534: LD_VAR 0 5
68538: PPUSH
68539: CALL_OW 76
68543: ST_TO_ADDR
68544: GO 68566
// result := SortListByListDesc ( buildings , tmp ) ;
68546: LD_ADDR_VAR 0 3
68550: PUSH
68551: LD_VAR 0 1
68555: PPUSH
68556: LD_VAR 0 5
68560: PPUSH
68561: CALL_OW 77
68565: ST_TO_ADDR
// end ;
68566: LD_VAR 0 3
68570: RET
// export function SortByClass ( units , class ) ; var un ; begin
68571: LD_INT 0
68573: PPUSH
68574: PPUSH
// if not units or not class then
68575: LD_VAR 0 1
68579: NOT
68580: IFTRUE 68589
68582: PUSH
68583: LD_VAR 0 2
68587: NOT
68588: OR
68589: IFFALSE 68593
// exit ;
68591: GO 68688
// result := [ ] ;
68593: LD_ADDR_VAR 0 3
68597: PUSH
68598: EMPTY
68599: ST_TO_ADDR
// for un in units do
68600: LD_ADDR_VAR 0 4
68604: PUSH
68605: LD_VAR 0 1
68609: PUSH
68610: FOR_IN
68611: IFFALSE 68686
// if GetClass ( un ) = class then
68613: LD_VAR 0 4
68617: PPUSH
68618: CALL_OW 257
68622: PUSH
68623: LD_VAR 0 2
68627: EQUAL
68628: IFFALSE 68655
// result := Insert ( result , 1 , un ) else
68630: LD_ADDR_VAR 0 3
68634: PUSH
68635: LD_VAR 0 3
68639: PPUSH
68640: LD_INT 1
68642: PPUSH
68643: LD_VAR 0 4
68647: PPUSH
68648: CALL_OW 2
68652: ST_TO_ADDR
68653: GO 68684
// result := Replace ( result , result + 1 , un ) ;
68655: LD_ADDR_VAR 0 3
68659: PUSH
68660: LD_VAR 0 3
68664: PPUSH
68665: LD_VAR 0 3
68669: PUSH
68670: LD_INT 1
68672: PLUS
68673: PPUSH
68674: LD_VAR 0 4
68678: PPUSH
68679: CALL_OW 1
68683: ST_TO_ADDR
68684: GO 68610
68686: POP
68687: POP
// end ;
68688: LD_VAR 0 3
68692: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68693: LD_INT 0
68695: PPUSH
68696: PPUSH
68697: PPUSH
68698: PPUSH
68699: PPUSH
68700: PPUSH
68701: PPUSH
// result := [ ] ;
68702: LD_ADDR_VAR 0 4
68706: PUSH
68707: EMPTY
68708: ST_TO_ADDR
// if x - r < 0 then
68709: LD_VAR 0 1
68713: PUSH
68714: LD_VAR 0 3
68718: MINUS
68719: PUSH
68720: LD_INT 0
68722: LESS
68723: IFFALSE 68735
// min_x := 0 else
68725: LD_ADDR_VAR 0 8
68729: PUSH
68730: LD_INT 0
68732: ST_TO_ADDR
68733: GO 68751
// min_x := x - r ;
68735: LD_ADDR_VAR 0 8
68739: PUSH
68740: LD_VAR 0 1
68744: PUSH
68745: LD_VAR 0 3
68749: MINUS
68750: ST_TO_ADDR
// if y - r < 0 then
68751: LD_VAR 0 2
68755: PUSH
68756: LD_VAR 0 3
68760: MINUS
68761: PUSH
68762: LD_INT 0
68764: LESS
68765: IFFALSE 68777
// min_y := 0 else
68767: LD_ADDR_VAR 0 7
68771: PUSH
68772: LD_INT 0
68774: ST_TO_ADDR
68775: GO 68793
// min_y := y - r ;
68777: LD_ADDR_VAR 0 7
68781: PUSH
68782: LD_VAR 0 2
68786: PUSH
68787: LD_VAR 0 3
68791: MINUS
68792: ST_TO_ADDR
// max_x := x + r ;
68793: LD_ADDR_VAR 0 9
68797: PUSH
68798: LD_VAR 0 1
68802: PUSH
68803: LD_VAR 0 3
68807: PLUS
68808: ST_TO_ADDR
// max_y := y + r ;
68809: LD_ADDR_VAR 0 10
68813: PUSH
68814: LD_VAR 0 2
68818: PUSH
68819: LD_VAR 0 3
68823: PLUS
68824: ST_TO_ADDR
// for _x = min_x to max_x do
68825: LD_ADDR_VAR 0 5
68829: PUSH
68830: DOUBLE
68831: LD_VAR 0 8
68835: DEC
68836: ST_TO_ADDR
68837: LD_VAR 0 9
68841: PUSH
68842: FOR_TO
68843: IFFALSE 68944
// for _y = min_y to max_y do
68845: LD_ADDR_VAR 0 6
68849: PUSH
68850: DOUBLE
68851: LD_VAR 0 7
68855: DEC
68856: ST_TO_ADDR
68857: LD_VAR 0 10
68861: PUSH
68862: FOR_TO
68863: IFFALSE 68940
// begin if not ValidHex ( _x , _y ) then
68865: LD_VAR 0 5
68869: PPUSH
68870: LD_VAR 0 6
68874: PPUSH
68875: CALL_OW 488
68879: NOT
68880: IFFALSE 68884
// continue ;
68882: GO 68862
// if GetResourceTypeXY ( _x , _y ) then
68884: LD_VAR 0 5
68888: PPUSH
68889: LD_VAR 0 6
68893: PPUSH
68894: CALL_OW 283
68898: IFFALSE 68938
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68900: LD_ADDR_VAR 0 4
68904: PUSH
68905: LD_VAR 0 4
68909: PPUSH
68910: LD_VAR 0 4
68914: PUSH
68915: LD_INT 1
68917: PLUS
68918: PPUSH
68919: LD_VAR 0 5
68923: PUSH
68924: LD_VAR 0 6
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PPUSH
68933: CALL_OW 1
68937: ST_TO_ADDR
// end ;
68938: GO 68862
68940: POP
68941: POP
68942: GO 68842
68944: POP
68945: POP
// end ;
68946: LD_VAR 0 4
68950: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68951: LD_INT 0
68953: PPUSH
68954: PPUSH
68955: PPUSH
68956: PPUSH
68957: PPUSH
68958: PPUSH
68959: PPUSH
68960: PPUSH
// if not units then
68961: LD_VAR 0 1
68965: NOT
68966: IFFALSE 68970
// exit ;
68968: GO 69502
// result := UnitFilter ( units , [ f_ok ] ) ;
68970: LD_ADDR_VAR 0 3
68974: PUSH
68975: LD_VAR 0 1
68979: PPUSH
68980: LD_INT 50
68982: PUSH
68983: EMPTY
68984: LIST
68985: PPUSH
68986: CALL_OW 72
68990: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68991: LD_ADDR_VAR 0 8
68995: PUSH
68996: LD_VAR 0 1
69000: PUSH
69001: LD_INT 1
69003: ARRAY
69004: PPUSH
69005: CALL_OW 255
69009: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69010: LD_ADDR_VAR 0 10
69014: PUSH
69015: LD_INT 29
69017: PUSH
69018: LD_INT 91
69020: PUSH
69021: LD_INT 49
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: LIST
69028: ST_TO_ADDR
// if not result then
69029: LD_VAR 0 3
69033: NOT
69034: IFFALSE 69038
// exit ;
69036: GO 69502
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69038: LD_ADDR_VAR 0 5
69042: PUSH
69043: LD_INT 81
69045: PUSH
69046: LD_VAR 0 8
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PPUSH
69055: CALL_OW 69
69059: ST_TO_ADDR
// for i in result do
69060: LD_ADDR_VAR 0 4
69064: PUSH
69065: LD_VAR 0 3
69069: PUSH
69070: FOR_IN
69071: IFFALSE 69500
// begin tag := GetTag ( i ) + 1 ;
69073: LD_ADDR_VAR 0 9
69077: PUSH
69078: LD_VAR 0 4
69082: PPUSH
69083: CALL_OW 110
69087: PUSH
69088: LD_INT 1
69090: PLUS
69091: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
69092: LD_ADDR_VAR 0 7
69096: PUSH
69097: LD_VAR 0 4
69101: PPUSH
69102: CALL_OW 250
69106: PPUSH
69107: LD_VAR 0 4
69111: PPUSH
69112: CALL_OW 251
69116: PPUSH
69117: LD_INT 4
69119: PPUSH
69120: CALL 68693 0 3
69124: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
69125: LD_VAR 0 4
69129: PPUSH
69130: CALL_OW 247
69134: PUSH
69135: LD_INT 2
69137: EQUAL
69138: IFFALSE 69150
69140: PUSH
69141: LD_VAR 0 7
69145: PUSH
69146: LD_INT 2
69148: GREATER
69149: AND
69150: IFFALSE 69170
69152: PUSH
69153: LD_VAR 0 4
69157: PPUSH
69158: CALL_OW 264
69162: PUSH
69163: LD_VAR 0 10
69167: IN
69168: NOT
69169: AND
69170: IFFALSE 69209
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69172: LD_VAR 0 4
69176: PPUSH
69177: LD_VAR 0 7
69181: PUSH
69182: LD_INT 1
69184: ARRAY
69185: PUSH
69186: LD_INT 1
69188: ARRAY
69189: PPUSH
69190: LD_VAR 0 7
69194: PUSH
69195: LD_INT 1
69197: ARRAY
69198: PUSH
69199: LD_INT 2
69201: ARRAY
69202: PPUSH
69203: CALL_OW 116
69207: GO 69498
// if path > tag then
69209: LD_VAR 0 2
69213: PUSH
69214: LD_VAR 0 9
69218: GREATER
69219: IFFALSE 69427
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69221: LD_ADDR_VAR 0 6
69225: PUSH
69226: LD_VAR 0 5
69230: PPUSH
69231: LD_INT 91
69233: PUSH
69234: LD_VAR 0 4
69238: PUSH
69239: LD_INT 8
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: LIST
69246: PPUSH
69247: CALL_OW 72
69251: ST_TO_ADDR
// if nearEnemy then
69252: LD_VAR 0 6
69256: IFFALSE 69325
// begin if GetWeapon ( i ) = ru_time_lapser then
69258: LD_VAR 0 4
69262: PPUSH
69263: CALL_OW 264
69267: PUSH
69268: LD_INT 49
69270: EQUAL
69271: IFFALSE 69299
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69273: LD_VAR 0 4
69277: PPUSH
69278: LD_VAR 0 6
69282: PPUSH
69283: LD_VAR 0 4
69287: PPUSH
69288: CALL_OW 74
69292: PPUSH
69293: CALL_OW 112
69297: GO 69323
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69299: LD_VAR 0 4
69303: PPUSH
69304: LD_VAR 0 6
69308: PPUSH
69309: LD_VAR 0 4
69313: PPUSH
69314: CALL_OW 74
69318: PPUSH
69319: CALL 70583 0 2
// end else
69323: GO 69425
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69325: LD_VAR 0 4
69329: PPUSH
69330: LD_VAR 0 2
69334: PUSH
69335: LD_VAR 0 9
69339: ARRAY
69340: PUSH
69341: LD_INT 1
69343: ARRAY
69344: PPUSH
69345: LD_VAR 0 2
69349: PUSH
69350: LD_VAR 0 9
69354: ARRAY
69355: PUSH
69356: LD_INT 2
69358: ARRAY
69359: PPUSH
69360: CALL_OW 297
69364: PUSH
69365: LD_INT 6
69367: GREATER
69368: IFFALSE 69411
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69370: LD_VAR 0 4
69374: PPUSH
69375: LD_VAR 0 2
69379: PUSH
69380: LD_VAR 0 9
69384: ARRAY
69385: PUSH
69386: LD_INT 1
69388: ARRAY
69389: PPUSH
69390: LD_VAR 0 2
69394: PUSH
69395: LD_VAR 0 9
69399: ARRAY
69400: PUSH
69401: LD_INT 2
69403: ARRAY
69404: PPUSH
69405: CALL_OW 114
69409: GO 69425
// SetTag ( i , tag ) ;
69411: LD_VAR 0 4
69415: PPUSH
69416: LD_VAR 0 9
69420: PPUSH
69421: CALL_OW 109
// end else
69425: GO 69498
// if enemy then
69427: LD_VAR 0 5
69431: IFFALSE 69498
// begin if GetWeapon ( i ) = ru_time_lapser then
69433: LD_VAR 0 4
69437: PPUSH
69438: CALL_OW 264
69442: PUSH
69443: LD_INT 49
69445: EQUAL
69446: IFFALSE 69474
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69448: LD_VAR 0 4
69452: PPUSH
69453: LD_VAR 0 5
69457: PPUSH
69458: LD_VAR 0 4
69462: PPUSH
69463: CALL_OW 74
69467: PPUSH
69468: CALL_OW 112
69472: GO 69498
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69474: LD_VAR 0 4
69478: PPUSH
69479: LD_VAR 0 5
69483: PPUSH
69484: LD_VAR 0 4
69488: PPUSH
69489: CALL_OW 74
69493: PPUSH
69494: CALL 70583 0 2
// end ; end ;
69498: GO 69070
69500: POP
69501: POP
// end ;
69502: LD_VAR 0 3
69506: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69507: LD_INT 0
69509: PPUSH
69510: PPUSH
69511: PPUSH
// if not unit or IsInUnit ( unit ) then
69512: LD_VAR 0 1
69516: NOT
69517: IFTRUE 69530
69519: PUSH
69520: LD_VAR 0 1
69524: PPUSH
69525: CALL_OW 310
69529: OR
69530: IFFALSE 69534
// exit ;
69532: GO 69625
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69534: LD_ADDR_VAR 0 4
69538: PUSH
69539: LD_VAR 0 1
69543: PPUSH
69544: CALL_OW 250
69548: PPUSH
69549: LD_VAR 0 2
69553: PPUSH
69554: LD_INT 1
69556: PPUSH
69557: CALL_OW 272
69561: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69562: LD_ADDR_VAR 0 5
69566: PUSH
69567: LD_VAR 0 1
69571: PPUSH
69572: CALL_OW 251
69576: PPUSH
69577: LD_VAR 0 2
69581: PPUSH
69582: LD_INT 1
69584: PPUSH
69585: CALL_OW 273
69589: ST_TO_ADDR
// if ValidHex ( x , y ) then
69590: LD_VAR 0 4
69594: PPUSH
69595: LD_VAR 0 5
69599: PPUSH
69600: CALL_OW 488
69604: IFFALSE 69625
// ComTurnXY ( unit , x , y ) ;
69606: LD_VAR 0 1
69610: PPUSH
69611: LD_VAR 0 4
69615: PPUSH
69616: LD_VAR 0 5
69620: PPUSH
69621: CALL_OW 118
// end ;
69625: LD_VAR 0 3
69629: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69630: LD_INT 0
69632: PPUSH
69633: PPUSH
// result := false ;
69634: LD_ADDR_VAR 0 3
69638: PUSH
69639: LD_INT 0
69641: ST_TO_ADDR
// if not units then
69642: LD_VAR 0 2
69646: NOT
69647: IFFALSE 69651
// exit ;
69649: GO 69696
// for i in units do
69651: LD_ADDR_VAR 0 4
69655: PUSH
69656: LD_VAR 0 2
69660: PUSH
69661: FOR_IN
69662: IFFALSE 69694
// if See ( side , i ) then
69664: LD_VAR 0 1
69668: PPUSH
69669: LD_VAR 0 4
69673: PPUSH
69674: CALL_OW 292
69678: IFFALSE 69692
// begin result := true ;
69680: LD_ADDR_VAR 0 3
69684: PUSH
69685: LD_INT 1
69687: ST_TO_ADDR
// exit ;
69688: POP
69689: POP
69690: GO 69696
// end ;
69692: GO 69661
69694: POP
69695: POP
// end ;
69696: LD_VAR 0 3
69700: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69701: LD_INT 0
69703: PPUSH
69704: PPUSH
69705: PPUSH
69706: PPUSH
// if not unit or not points then
69707: LD_VAR 0 1
69711: NOT
69712: IFTRUE 69721
69714: PUSH
69715: LD_VAR 0 2
69719: NOT
69720: OR
69721: IFFALSE 69725
// exit ;
69723: GO 69815
// dist := 99999 ;
69725: LD_ADDR_VAR 0 5
69729: PUSH
69730: LD_INT 99999
69732: ST_TO_ADDR
// for i in points do
69733: LD_ADDR_VAR 0 4
69737: PUSH
69738: LD_VAR 0 2
69742: PUSH
69743: FOR_IN
69744: IFFALSE 69813
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69746: LD_ADDR_VAR 0 6
69750: PUSH
69751: LD_VAR 0 1
69755: PPUSH
69756: LD_VAR 0 4
69760: PUSH
69761: LD_INT 1
69763: ARRAY
69764: PPUSH
69765: LD_VAR 0 4
69769: PUSH
69770: LD_INT 2
69772: ARRAY
69773: PPUSH
69774: CALL_OW 297
69778: ST_TO_ADDR
// if tmpDist < dist then
69779: LD_VAR 0 6
69783: PUSH
69784: LD_VAR 0 5
69788: LESS
69789: IFFALSE 69811
// begin result := i ;
69791: LD_ADDR_VAR 0 3
69795: PUSH
69796: LD_VAR 0 4
69800: ST_TO_ADDR
// dist := tmpDist ;
69801: LD_ADDR_VAR 0 5
69805: PUSH
69806: LD_VAR 0 6
69810: ST_TO_ADDR
// end ; end ;
69811: GO 69743
69813: POP
69814: POP
// end ;
69815: LD_VAR 0 3
69819: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69820: LD_INT 0
69822: PPUSH
// uc_side := side ;
69823: LD_ADDR_OWVAR 20
69827: PUSH
69828: LD_VAR 0 1
69832: ST_TO_ADDR
// uc_nation := 3 ;
69833: LD_ADDR_OWVAR 21
69837: PUSH
69838: LD_INT 3
69840: ST_TO_ADDR
// vc_chassis := 25 ;
69841: LD_ADDR_OWVAR 37
69845: PUSH
69846: LD_INT 25
69848: ST_TO_ADDR
// vc_engine := engine_siberite ;
69849: LD_ADDR_OWVAR 39
69853: PUSH
69854: LD_INT 3
69856: ST_TO_ADDR
// vc_control := control_computer ;
69857: LD_ADDR_OWVAR 38
69861: PUSH
69862: LD_INT 3
69864: ST_TO_ADDR
// vc_weapon := 59 ;
69865: LD_ADDR_OWVAR 40
69869: PUSH
69870: LD_INT 59
69872: ST_TO_ADDR
// result := CreateVehicle ;
69873: LD_ADDR_VAR 0 5
69877: PUSH
69878: CALL_OW 45
69882: ST_TO_ADDR
// SetDir ( result , d ) ;
69883: LD_VAR 0 5
69887: PPUSH
69888: LD_VAR 0 4
69892: PPUSH
69893: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69897: LD_VAR 0 5
69901: PPUSH
69902: LD_VAR 0 2
69906: PPUSH
69907: LD_VAR 0 3
69911: PPUSH
69912: LD_INT 0
69914: PPUSH
69915: CALL_OW 48
// end ;
69919: LD_VAR 0 5
69923: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69924: LD_INT 0
69926: PPUSH
69927: PPUSH
69928: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69929: LD_ADDR_VAR 0 2
69933: PUSH
69934: LD_INT 0
69936: PUSH
69937: LD_INT 0
69939: PUSH
69940: LD_INT 0
69942: PUSH
69943: LD_INT 0
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69952: LD_VAR 0 1
69956: NOT
69957: IFTRUE 69990
69959: PUSH
69960: LD_VAR 0 1
69964: PPUSH
69965: CALL_OW 264
69969: PUSH
69970: LD_INT 12
69972: PUSH
69973: LD_INT 51
69975: PUSH
69976: LD_INT 32
69978: PUSH
69979: LD_INT 89
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: IN
69988: NOT
69989: OR
69990: IFFALSE 69994
// exit ;
69992: GO 70092
// for i := 1 to 3 do
69994: LD_ADDR_VAR 0 3
69998: PUSH
69999: DOUBLE
70000: LD_INT 1
70002: DEC
70003: ST_TO_ADDR
70004: LD_INT 3
70006: PUSH
70007: FOR_TO
70008: IFFALSE 70090
// begin tmp := GetCargo ( cargo , i ) ;
70010: LD_ADDR_VAR 0 4
70014: PUSH
70015: LD_VAR 0 1
70019: PPUSH
70020: LD_VAR 0 3
70024: PPUSH
70025: CALL_OW 289
70029: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70030: LD_ADDR_VAR 0 2
70034: PUSH
70035: LD_VAR 0 2
70039: PPUSH
70040: LD_VAR 0 3
70044: PPUSH
70045: LD_VAR 0 4
70049: PPUSH
70050: CALL_OW 1
70054: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70055: LD_ADDR_VAR 0 2
70059: PUSH
70060: LD_VAR 0 2
70064: PPUSH
70065: LD_INT 4
70067: PPUSH
70068: LD_VAR 0 2
70072: PUSH
70073: LD_INT 4
70075: ARRAY
70076: PUSH
70077: LD_VAR 0 4
70081: PLUS
70082: PPUSH
70083: CALL_OW 1
70087: ST_TO_ADDR
// end ;
70088: GO 70007
70090: POP
70091: POP
// end ;
70092: LD_VAR 0 2
70096: RET
// export function Length ( array ) ; begin
70097: LD_INT 0
70099: PPUSH
// result := array + 0 ;
70100: LD_ADDR_VAR 0 2
70104: PUSH
70105: LD_VAR 0 1
70109: PUSH
70110: LD_INT 0
70112: PLUS
70113: ST_TO_ADDR
// end ;
70114: LD_VAR 0 2
70118: RET
// export function PrepareArray ( array ) ; begin
70119: LD_INT 0
70121: PPUSH
// result := array diff 0 ;
70122: LD_ADDR_VAR 0 2
70126: PUSH
70127: LD_VAR 0 1
70131: PUSH
70132: LD_INT 0
70134: DIFF
70135: ST_TO_ADDR
// if not result [ 1 ] then
70136: LD_VAR 0 2
70140: PUSH
70141: LD_INT 1
70143: ARRAY
70144: NOT
70145: IFFALSE 70165
// result := Delete ( result , 1 ) ;
70147: LD_ADDR_VAR 0 2
70151: PUSH
70152: LD_VAR 0 2
70156: PPUSH
70157: LD_INT 1
70159: PPUSH
70160: CALL_OW 3
70164: ST_TO_ADDR
// end ;
70165: LD_VAR 0 2
70169: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70170: LD_INT 0
70172: PPUSH
70173: PPUSH
70174: PPUSH
70175: PPUSH
// sibRocketRange := 25 ;
70176: LD_ADDR_VAR 0 6
70180: PUSH
70181: LD_INT 25
70183: ST_TO_ADDR
// result := false ;
70184: LD_ADDR_VAR 0 4
70188: PUSH
70189: LD_INT 0
70191: ST_TO_ADDR
// for i := 0 to 5 do
70192: LD_ADDR_VAR 0 5
70196: PUSH
70197: DOUBLE
70198: LD_INT 0
70200: DEC
70201: ST_TO_ADDR
70202: LD_INT 5
70204: PUSH
70205: FOR_TO
70206: IFFALSE 70273
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70208: LD_VAR 0 1
70212: PPUSH
70213: LD_VAR 0 5
70217: PPUSH
70218: LD_VAR 0 6
70222: PPUSH
70223: CALL_OW 272
70227: PPUSH
70228: LD_VAR 0 2
70232: PPUSH
70233: LD_VAR 0 5
70237: PPUSH
70238: LD_VAR 0 6
70242: PPUSH
70243: CALL_OW 273
70247: PPUSH
70248: LD_VAR 0 3
70252: PPUSH
70253: CALL_OW 309
70257: IFFALSE 70271
// begin result := true ;
70259: LD_ADDR_VAR 0 4
70263: PUSH
70264: LD_INT 1
70266: ST_TO_ADDR
// exit ;
70267: POP
70268: POP
70269: GO 70275
// end ;
70271: GO 70205
70273: POP
70274: POP
// end ;
70275: LD_VAR 0 4
70279: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70280: LD_INT 0
70282: PPUSH
70283: PPUSH
70284: PPUSH
// if btype = b_depot then
70285: LD_VAR 0 2
70289: PUSH
70290: LD_INT 0
70292: EQUAL
70293: IFFALSE 70305
// begin result := true ;
70295: LD_ADDR_VAR 0 3
70299: PUSH
70300: LD_INT 1
70302: ST_TO_ADDR
// exit ;
70303: GO 70425
// end ; pom := GetBase ( depot ) ;
70305: LD_ADDR_VAR 0 4
70309: PUSH
70310: LD_VAR 0 1
70314: PPUSH
70315: CALL_OW 274
70319: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70320: LD_ADDR_VAR 0 5
70324: PUSH
70325: LD_VAR 0 2
70329: PPUSH
70330: LD_VAR 0 1
70334: PPUSH
70335: CALL_OW 248
70339: PPUSH
70340: CALL_OW 450
70344: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70345: LD_ADDR_VAR 0 3
70349: PUSH
70350: LD_VAR 0 4
70354: PPUSH
70355: LD_INT 1
70357: PPUSH
70358: CALL_OW 275
70362: PUSH
70363: LD_VAR 0 5
70367: PUSH
70368: LD_INT 1
70370: ARRAY
70371: GREATEREQUAL
70372: IFFALSE 70398
70374: PUSH
70375: LD_VAR 0 4
70379: PPUSH
70380: LD_INT 2
70382: PPUSH
70383: CALL_OW 275
70387: PUSH
70388: LD_VAR 0 5
70392: PUSH
70393: LD_INT 2
70395: ARRAY
70396: GREATEREQUAL
70397: AND
70398: IFFALSE 70424
70400: PUSH
70401: LD_VAR 0 4
70405: PPUSH
70406: LD_INT 3
70408: PPUSH
70409: CALL_OW 275
70413: PUSH
70414: LD_VAR 0 5
70418: PUSH
70419: LD_INT 3
70421: ARRAY
70422: GREATEREQUAL
70423: AND
70424: ST_TO_ADDR
// end ;
70425: LD_VAR 0 3
70429: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70430: LD_INT 0
70432: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70433: LD_VAR 0 1
70437: PPUSH
70438: LD_VAR 0 2
70442: PPUSH
70443: LD_INT 0
70445: PPUSH
70446: LD_INT 0
70448: PPUSH
70449: LD_INT 1
70451: PPUSH
70452: LD_INT 0
70454: PPUSH
70455: CALL_OW 587
// end ;
70459: LD_VAR 0 3
70463: RET
// export function CenterOnNow ( unit ) ; begin
70464: LD_INT 0
70466: PPUSH
// result := IsInUnit ( unit ) ;
70467: LD_ADDR_VAR 0 2
70471: PUSH
70472: LD_VAR 0 1
70476: PPUSH
70477: CALL_OW 310
70481: ST_TO_ADDR
// if not result then
70482: LD_VAR 0 2
70486: NOT
70487: IFFALSE 70499
// result := unit ;
70489: LD_ADDR_VAR 0 2
70493: PUSH
70494: LD_VAR 0 1
70498: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70499: LD_VAR 0 1
70503: PPUSH
70504: CALL_OW 87
// end ;
70508: LD_VAR 0 2
70512: RET
// export function ComMoveHex ( unit , hex ) ; begin
70513: LD_INT 0
70515: PPUSH
// if not hex then
70516: LD_VAR 0 2
70520: NOT
70521: IFFALSE 70525
// exit ;
70523: GO 70578
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70525: LD_VAR 0 2
70529: PUSH
70530: LD_INT 1
70532: ARRAY
70533: PPUSH
70534: LD_VAR 0 2
70538: PUSH
70539: LD_INT 2
70541: ARRAY
70542: PPUSH
70543: CALL_OW 428
70547: IFFALSE 70551
// exit ;
70549: GO 70578
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70551: LD_VAR 0 1
70555: PPUSH
70556: LD_VAR 0 2
70560: PUSH
70561: LD_INT 1
70563: ARRAY
70564: PPUSH
70565: LD_VAR 0 2
70569: PUSH
70570: LD_INT 2
70572: ARRAY
70573: PPUSH
70574: CALL_OW 111
// end ;
70578: LD_VAR 0 3
70582: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70583: LD_INT 0
70585: PPUSH
70586: PPUSH
70587: PPUSH
// if not unit or not enemy then
70588: LD_VAR 0 1
70592: NOT
70593: IFTRUE 70602
70595: PUSH
70596: LD_VAR 0 2
70600: NOT
70601: OR
70602: IFFALSE 70606
// exit ;
70604: GO 70732
// x := GetX ( enemy ) ;
70606: LD_ADDR_VAR 0 4
70610: PUSH
70611: LD_VAR 0 2
70615: PPUSH
70616: CALL_OW 250
70620: ST_TO_ADDR
// y := GetY ( enemy ) ;
70621: LD_ADDR_VAR 0 5
70625: PUSH
70626: LD_VAR 0 2
70630: PPUSH
70631: CALL_OW 251
70635: ST_TO_ADDR
// if ValidHex ( x , y ) then
70636: LD_VAR 0 4
70640: PPUSH
70641: LD_VAR 0 5
70645: PPUSH
70646: CALL_OW 488
70650: IFFALSE 70732
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
70652: LD_VAR 0 2
70656: PPUSH
70657: CALL_OW 247
70661: PUSH
70662: LD_INT 3
70664: PUSH
70665: LD_INT 2
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: IN
70672: IFTRUE 70695
70674: PUSH
70675: LD_VAR 0 1
70679: PPUSH
70680: CALL_OW 255
70684: PPUSH
70685: LD_VAR 0 2
70689: PPUSH
70690: CALL_OW 292
70694: OR
70695: IFFALSE 70713
// ComAttackUnit ( unit , enemy ) else
70697: LD_VAR 0 1
70701: PPUSH
70702: LD_VAR 0 2
70706: PPUSH
70707: CALL_OW 115
70711: GO 70732
// ComAgressiveMove ( unit , x , y ) ;
70713: LD_VAR 0 1
70717: PPUSH
70718: LD_VAR 0 4
70722: PPUSH
70723: LD_VAR 0 5
70727: PPUSH
70728: CALL_OW 114
// end ;
70732: LD_VAR 0 3
70736: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70737: LD_INT 0
70739: PPUSH
70740: PPUSH
70741: PPUSH
// list := AreaToList ( area , 0 ) ;
70742: LD_ADDR_VAR 0 5
70746: PUSH
70747: LD_VAR 0 1
70751: PPUSH
70752: LD_INT 0
70754: PPUSH
70755: CALL_OW 517
70759: ST_TO_ADDR
// if not list then
70760: LD_VAR 0 5
70764: NOT
70765: IFFALSE 70769
// exit ;
70767: GO 70899
// if all then
70769: LD_VAR 0 2
70773: IFFALSE 70861
// begin for i := 1 to list [ 1 ] do
70775: LD_ADDR_VAR 0 4
70779: PUSH
70780: DOUBLE
70781: LD_INT 1
70783: DEC
70784: ST_TO_ADDR
70785: LD_VAR 0 5
70789: PUSH
70790: LD_INT 1
70792: ARRAY
70793: PUSH
70794: FOR_TO
70795: IFFALSE 70857
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70797: LD_ADDR_VAR 0 3
70801: PUSH
70802: LD_VAR 0 3
70806: PPUSH
70807: LD_VAR 0 3
70811: PUSH
70812: LD_INT 1
70814: PLUS
70815: PPUSH
70816: LD_VAR 0 5
70820: PUSH
70821: LD_INT 1
70823: ARRAY
70824: PUSH
70825: LD_VAR 0 4
70829: ARRAY
70830: PUSH
70831: LD_VAR 0 5
70835: PUSH
70836: LD_INT 2
70838: ARRAY
70839: PUSH
70840: LD_VAR 0 4
70844: ARRAY
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PPUSH
70850: CALL_OW 1
70854: ST_TO_ADDR
70855: GO 70794
70857: POP
70858: POP
// exit ;
70859: GO 70899
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
70861: LD_ADDR_VAR 0 3
70865: PUSH
70866: LD_VAR 0 5
70870: PUSH
70871: LD_INT 1
70873: ARRAY
70874: PUSH
70875: LD_INT 1
70877: ARRAY
70878: PUSH
70879: LD_VAR 0 5
70883: PUSH
70884: LD_INT 2
70886: ARRAY
70887: PUSH
70888: LD_INT 1
70890: ARRAY
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: EMPTY
70897: LIST
70898: ST_TO_ADDR
// end ;
70899: LD_VAR 0 3
70903: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
70904: LD_INT 0
70906: PPUSH
70907: PPUSH
// list := AreaToList ( area , 0 ) ;
70908: LD_ADDR_VAR 0 4
70912: PUSH
70913: LD_VAR 0 1
70917: PPUSH
70918: LD_INT 0
70920: PPUSH
70921: CALL_OW 517
70925: ST_TO_ADDR
// if not list then
70926: LD_VAR 0 4
70930: NOT
70931: IFFALSE 70935
// exit ;
70933: GO 70976
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
70935: LD_ADDR_VAR 0 3
70939: PUSH
70940: LD_VAR 0 4
70944: PUSH
70945: LD_INT 1
70947: ARRAY
70948: PUSH
70949: LD_INT 1
70951: ARRAY
70952: PUSH
70953: LD_VAR 0 4
70957: PUSH
70958: LD_INT 2
70960: ARRAY
70961: PUSH
70962: LD_INT 1
70964: ARRAY
70965: PUSH
70966: LD_VAR 0 2
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: LIST
70975: ST_TO_ADDR
// end ;
70976: LD_VAR 0 3
70980: RET
// export function First ( array ) ; begin
70981: LD_INT 0
70983: PPUSH
// if not array then
70984: LD_VAR 0 1
70988: NOT
70989: IFFALSE 70993
// exit ;
70991: GO 71007
// result := array [ 1 ] ;
70993: LD_ADDR_VAR 0 2
70997: PUSH
70998: LD_VAR 0 1
71002: PUSH
71003: LD_INT 1
71005: ARRAY
71006: ST_TO_ADDR
// end ;
71007: LD_VAR 0 2
71011: RET
// export function Last ( array ) ; begin
71012: LD_INT 0
71014: PPUSH
// if not array then
71015: LD_VAR 0 1
71019: NOT
71020: IFFALSE 71024
// exit ;
71022: GO 71040
// result := array [ array ] ;
71024: LD_ADDR_VAR 0 2
71028: PUSH
71029: LD_VAR 0 1
71033: PUSH
71034: LD_VAR 0 1
71038: ARRAY
71039: ST_TO_ADDR
// end ;
71040: LD_VAR 0 2
71044: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71045: LD_INT 0
71047: PPUSH
71048: PPUSH
// result := [ ] ;
71049: LD_ADDR_VAR 0 5
71053: PUSH
71054: EMPTY
71055: ST_TO_ADDR
// if not array then
71056: LD_VAR 0 1
71060: NOT
71061: IFFALSE 71065
// exit ;
71063: GO 71177
// for i := 1 to array do
71065: LD_ADDR_VAR 0 6
71069: PUSH
71070: DOUBLE
71071: LD_INT 1
71073: DEC
71074: ST_TO_ADDR
71075: LD_VAR 0 1
71079: PUSH
71080: FOR_TO
71081: IFFALSE 71175
// if array [ i ] [ index ] = value then
71083: LD_VAR 0 1
71087: PUSH
71088: LD_VAR 0 6
71092: ARRAY
71093: PUSH
71094: LD_VAR 0 2
71098: ARRAY
71099: PUSH
71100: LD_VAR 0 3
71104: EQUAL
71105: IFFALSE 71173
// begin if indexColumn then
71107: LD_VAR 0 4
71111: IFFALSE 71147
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71113: LD_ADDR_VAR 0 5
71117: PUSH
71118: LD_VAR 0 5
71122: PPUSH
71123: LD_VAR 0 1
71127: PUSH
71128: LD_VAR 0 6
71132: ARRAY
71133: PUSH
71134: LD_VAR 0 4
71138: ARRAY
71139: PPUSH
71140: CALL 66185 0 2
71144: ST_TO_ADDR
71145: GO 71173
// result := Join ( result , array [ i ] ) ;
71147: LD_ADDR_VAR 0 5
71151: PUSH
71152: LD_VAR 0 5
71156: PPUSH
71157: LD_VAR 0 1
71161: PUSH
71162: LD_VAR 0 6
71166: ARRAY
71167: PPUSH
71168: CALL 66185 0 2
71172: ST_TO_ADDR
// end ;
71173: GO 71080
71175: POP
71176: POP
// end ;
71177: LD_VAR 0 5
71181: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71182: LD_INT 0
71184: PPUSH
// if not vehicles or not parkingPoint then
71185: LD_VAR 0 1
71189: NOT
71190: IFTRUE 71199
71192: PUSH
71193: LD_VAR 0 2
71197: NOT
71198: OR
71199: IFFALSE 71203
// exit ;
71201: GO 71301
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
71203: LD_ADDR_VAR 0 1
71207: PUSH
71208: LD_VAR 0 1
71212: PPUSH
71213: LD_INT 50
71215: PUSH
71216: EMPTY
71217: LIST
71218: PUSH
71219: LD_INT 3
71221: PUSH
71222: LD_INT 92
71224: PUSH
71225: LD_VAR 0 2
71229: PUSH
71230: LD_INT 1
71232: ARRAY
71233: PUSH
71234: LD_VAR 0 2
71238: PUSH
71239: LD_INT 2
71241: ARRAY
71242: PUSH
71243: LD_INT 8
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PPUSH
71260: CALL_OW 72
71264: ST_TO_ADDR
// if not vehicles then
71265: LD_VAR 0 1
71269: NOT
71270: IFFALSE 71274
// exit ;
71272: GO 71301
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
71274: LD_VAR 0 1
71278: PPUSH
71279: LD_VAR 0 2
71283: PUSH
71284: LD_INT 1
71286: ARRAY
71287: PPUSH
71288: LD_VAR 0 2
71292: PUSH
71293: LD_INT 2
71295: ARRAY
71296: PPUSH
71297: CALL_OW 111
// end ;
71301: LD_VAR 0 3
71305: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71306: LD_INT 0
71308: PPUSH
71309: PPUSH
71310: PPUSH
// if not side or not area then
71311: LD_VAR 0 1
71315: NOT
71316: IFTRUE 71325
71318: PUSH
71319: LD_VAR 0 2
71323: NOT
71324: OR
71325: IFFALSE 71329
// exit ;
71327: GO 71448
// tmp := AreaToList ( area , 0 ) ;
71329: LD_ADDR_VAR 0 5
71333: PUSH
71334: LD_VAR 0 2
71338: PPUSH
71339: LD_INT 0
71341: PPUSH
71342: CALL_OW 517
71346: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
71347: LD_ADDR_VAR 0 4
71351: PUSH
71352: DOUBLE
71353: LD_INT 1
71355: DEC
71356: ST_TO_ADDR
71357: LD_VAR 0 5
71361: PUSH
71362: LD_INT 1
71364: ARRAY
71365: PUSH
71366: FOR_TO
71367: IFFALSE 71446
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
71369: LD_VAR 0 5
71373: PUSH
71374: LD_INT 1
71376: ARRAY
71377: PUSH
71378: LD_VAR 0 4
71382: ARRAY
71383: PPUSH
71384: LD_VAR 0 5
71388: PUSH
71389: LD_INT 2
71391: ARRAY
71392: PUSH
71393: LD_VAR 0 4
71397: ARRAY
71398: PPUSH
71399: CALL_OW 351
71403: IFFALSE 71444
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
71405: LD_VAR 0 5
71409: PUSH
71410: LD_INT 1
71412: ARRAY
71413: PUSH
71414: LD_VAR 0 4
71418: ARRAY
71419: PPUSH
71420: LD_VAR 0 5
71424: PUSH
71425: LD_INT 2
71427: ARRAY
71428: PUSH
71429: LD_VAR 0 4
71433: ARRAY
71434: PPUSH
71435: LD_VAR 0 1
71439: PPUSH
71440: CALL_OW 244
// end ;
71444: GO 71366
71446: POP
71447: POP
// end ;
71448: LD_VAR 0 3
71452: RET
// export function UniqueArray ( array ) ; var i ; begin
71453: LD_INT 0
71455: PPUSH
71456: PPUSH
// result := [ ] ;
71457: LD_ADDR_VAR 0 2
71461: PUSH
71462: EMPTY
71463: ST_TO_ADDR
// if not array then
71464: LD_VAR 0 1
71468: NOT
71469: IFFALSE 71473
// exit ;
71471: GO 71534
// for i := 1 to array do
71473: LD_ADDR_VAR 0 3
71477: PUSH
71478: DOUBLE
71479: LD_INT 1
71481: DEC
71482: ST_TO_ADDR
71483: LD_VAR 0 1
71487: PUSH
71488: FOR_TO
71489: IFFALSE 71532
// if not array [ i ] in result then
71491: LD_VAR 0 1
71495: PUSH
71496: LD_VAR 0 3
71500: ARRAY
71501: PUSH
71502: LD_VAR 0 2
71506: IN
71507: NOT
71508: IFFALSE 71530
// result := Join ( result , i ) ;
71510: LD_ADDR_VAR 0 2
71514: PUSH
71515: LD_VAR 0 2
71519: PPUSH
71520: LD_VAR 0 3
71524: PPUSH
71525: CALL 66185 0 2
71529: ST_TO_ADDR
71530: GO 71488
71532: POP
71533: POP
// end ;
71534: LD_VAR 0 2
71538: RET
