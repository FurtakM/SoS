// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 902 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2057 0 0
// PrepareHeroes ;
  82: CALL 1082 0 0
// PrepareRandoms ;
  86: CALL 3416 0 0
// Action ;
  90: CALL 5206 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 799
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_STRING Lisa
 588: PPUSH
 589: LD_EXP 22
 593: PPUSH
 594: CALL 4212 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 598: LD_EXP 8
 602: PPUSH
 603: LD_STRING Brown
 605: PPUSH
 606: LD_EXP 22
 610: PPUSH
 611: CALL 4212 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 615: LD_EXP 4
 619: PPUSH
 620: LD_STRING Donaldson
 622: PPUSH
 623: LD_EXP 22
 627: PPUSH
 628: CALL 4212 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 632: LD_EXP 5
 636: PPUSH
 637: LD_STRING Bobby
 639: PPUSH
 640: LD_EXP 22
 644: PPUSH
 645: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 649: LD_EXP 6
 653: PPUSH
 654: LD_STRING Cyrus
 656: PPUSH
 657: LD_EXP 22
 661: PPUSH
 662: CALL 4212 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 666: LD_EXP 7
 670: PPUSH
 671: LD_STRING Denis
 673: PPUSH
 674: LD_EXP 22
 678: PPUSH
 679: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 683: LD_EXP 9
 687: PPUSH
 688: LD_STRING Gladstone
 690: PPUSH
 691: LD_EXP 22
 695: PPUSH
 696: CALL 4212 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 700: LD_EXP 10
 704: PPUSH
 705: LD_STRING Houten
 707: PPUSH
 708: LD_EXP 22
 712: PPUSH
 713: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 717: LD_EXP 11
 721: PPUSH
 722: LD_STRING Cornel
 724: PPUSH
 725: LD_EXP 22
 729: PPUSH
 730: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 734: LD_EXP 12
 738: PPUSH
 739: LD_STRING Gary
 741: PPUSH
 742: LD_EXP 22
 746: PPUSH
 747: CALL 4212 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_STRING Frank
 758: PPUSH
 759: LD_EXP 22
 763: PPUSH
 764: CALL 4212 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 768: LD_EXP 14
 772: PPUSH
 773: LD_STRING Kikuchi
 775: PPUSH
 776: LD_EXP 22
 780: PPUSH
 781: CALL 4212 0 3
// SaveCargos ;
 785: CALL 802 0 0
// ChangeMap ( 13 , %_cont ) ;
 789: LD_INT 13
 791: PPUSH
 792: LD_STRING %_cont
 794: PPUSH
 795: CALL_OW 340
// end ;
 799: PPOPN 2
 801: END
// export function SaveCargos ; var i ; begin
 802: LD_INT 0
 804: PPUSH
 805: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 806: LD_ADDR_VAR 0 2
 810: PUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 22
 816: PUSH
 817: LD_INT 1
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 33
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 34
 836: PUSH
 837: LD_INT 12
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PPUSH
 849: CALL_OW 70
 853: PUSH
 854: FOR_IN
 855: IFFALSE 883
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 857: LD_ADDR_EXP 20
 861: PUSH
 862: LD_EXP 20
 866: PUSH
 867: LD_VAR 0 2
 871: PPUSH
 872: CALL 66776 0 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: ADD
 880: ST_TO_ADDR
 881: GO 854
 883: POP
 884: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 885: LD_EXP 20
 889: PPUSH
 890: LD_STRING 13_ResourcesInCargo13_1
 892: PPUSH
 893: CALL_OW 39
// end ;
 897: LD_VAR 0 1
 901: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 902: LD_INT 0
 904: PPUSH
 905: PPUSH
 906: PPUSH
 907: PPUSH
 908: PPUSH
 909: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_STRING 10_EpsilonEnv
 917: PPUSH
 918: EMPTY
 919: PPUSH
 920: CALL_OW 30
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 2
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1077
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: CALL_OW 353
 946: ST_TO_ADDR
// if not list then
 947: LD_VAR 0 3
 951: NOT
 952: IFFALSE 956
// exit ;
 954: GO 1077
// for i in list do
 956: LD_ADDR_VAR 0 4
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: FOR_IN
 967: IFFALSE 1075
// begin exist := false ;
 969: LD_ADDR_VAR 0 6
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// for j in tmp do
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: FOR_IN
 988: IFFALSE 1042
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 990: LD_VAR 0 4
 994: PUSH
 995: LD_INT 1
 997: ARRAY
 998: PUSH
 999: LD_VAR 0 5
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: EQUAL
1008: PUSH
1009: LD_VAR 0 4
1013: PUSH
1014: LD_INT 2
1016: ARRAY
1017: PUSH
1018: LD_VAR 0 5
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: EQUAL
1027: AND
1028: IFFALSE 1040
// begin exist := true ;
1030: LD_ADDR_VAR 0 6
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// break ;
1038: GO 1042
// end ;
1040: GO 987
1042: POP
1043: POP
// if not exist then
1044: LD_VAR 0 6
1048: NOT
1049: IFFALSE 1073
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1051: LD_VAR 0 4
1055: PUSH
1056: LD_INT 1
1058: ARRAY
1059: PPUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_INT 2
1067: ARRAY
1068: PPUSH
1069: CALL_OW 347
// end ;
1073: GO 966
1075: POP
1076: POP
// end ; end_of_file
1077: LD_VAR 0 1
1081: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1082: LD_INT 0
1084: PPUSH
1085: PPUSH
1086: PPUSH
1087: PPUSH
1088: PPUSH
1089: PPUSH
1090: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1091: LD_ADDR_VAR 0 4
1095: PUSH
1096: LD_INT 22
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 23
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: LD_INT 30
1121: PUSH
1122: LD_INT 0
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 30
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PPUSH
1149: CALL_OW 69
1153: ST_TO_ADDR
// if tmp then
1154: LD_VAR 0 4
1158: IFFALSE 1280
// begin x := GetX ( tmp [ 1 ] ) ;
1160: LD_ADDR_VAR 0 5
1164: PUSH
1165: LD_VAR 0 4
1169: PUSH
1170: LD_INT 1
1172: ARRAY
1173: PPUSH
1174: CALL_OW 250
1178: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1179: LD_ADDR_VAR 0 6
1183: PUSH
1184: LD_VAR 0 4
1188: PUSH
1189: LD_INT 1
1191: ARRAY
1192: PPUSH
1193: CALL_OW 251
1197: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1198: LD_VAR 0 4
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: LD_STRING epsilon
1209: PPUSH
1210: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1214: LD_ADDR_VAR 0 7
1218: PUSH
1219: LD_VAR 0 4
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: PPUSH
1228: CALL_OW 274
1232: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1233: LD_VAR 0 7
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_INT 3000
1243: PPUSH
1244: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1248: LD_VAR 0 7
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: LD_INT 500
1258: PPUSH
1259: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1263: LD_VAR 0 7
1267: PPUSH
1268: LD_INT 3
1270: PPUSH
1271: LD_INT 200
1273: PPUSH
1274: CALL_OW 277
// end else
1278: GO 1296
// begin x := 104 ;
1280: LD_ADDR_VAR 0 5
1284: PUSH
1285: LD_INT 104
1287: ST_TO_ADDR
// y := 32 ;
1288: LD_ADDR_VAR 0 6
1292: PUSH
1293: LD_INT 32
1295: ST_TO_ADDR
// end ; uc_side := 1 ;
1296: LD_ADDR_OWVAR 20
1300: PUSH
1301: LD_INT 1
1303: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1304: LD_ADDR_EXP 1
1308: PUSH
1309: LD_STRING JMM
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: CALL 3686 0 2
1319: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1320: LD_ADDR_EXP 3
1324: PUSH
1325: LD_STRING Lisa
1327: PPUSH
1328: LD_INT 1
1330: PPUSH
1331: CALL 3686 0 2
1335: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1336: LD_ADDR_EXP 4
1340: PUSH
1341: LD_STRING Donaldson
1343: PPUSH
1344: LD_INT 1
1346: PPUSH
1347: CALL 3686 0 2
1351: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1352: LD_ADDR_EXP 5
1356: PUSH
1357: LD_STRING Bobby
1359: PPUSH
1360: LD_INT 1
1362: PPUSH
1363: CALL 3686 0 2
1367: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1368: LD_ADDR_EXP 6
1372: PUSH
1373: LD_STRING Cyrus
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 3686 0 2
1383: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1384: LD_ADDR_EXP 7
1388: PUSH
1389: LD_STRING Denis
1391: PPUSH
1392: LD_INT 1
1394: PPUSH
1395: CALL 3686 0 2
1399: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1400: LD_ADDR_EXP 8
1404: PUSH
1405: LD_STRING Brown
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: CALL 3686 0 2
1415: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1416: LD_ADDR_EXP 9
1420: PUSH
1421: LD_STRING Gladstone
1423: PPUSH
1424: LD_INT 1
1426: PPUSH
1427: CALL 3686 0 2
1431: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1432: LD_ADDR_EXP 10
1436: PUSH
1437: LD_STRING Houten
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL 3686 0 2
1447: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1448: LD_ADDR_EXP 11
1452: PUSH
1453: LD_STRING Cornell
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: CALL 3686 0 2
1463: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1464: LD_ADDR_EXP 12
1468: PUSH
1469: LD_STRING Gary
1471: PPUSH
1472: LD_INT 1
1474: PPUSH
1475: CALL 3686 0 2
1479: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1480: LD_ADDR_EXP 13
1484: PUSH
1485: LD_STRING Frank
1487: PPUSH
1488: LD_INT 1
1490: PPUSH
1491: CALL 3686 0 2
1495: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1496: LD_ADDR_EXP 14
1500: PUSH
1501: LD_STRING Kikuchi
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: CALL 3686 0 2
1511: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1512: LD_ADDR_EXP 15
1516: PUSH
1517: LD_STRING Stevens
1519: PPUSH
1520: LD_INT 0
1522: PPUSH
1523: CALL 3686 0 2
1527: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1528: LD_ADDR_EXP 2
1532: PUSH
1533: LD_STRING Powell
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL 3686 0 2
1543: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1544: LD_EXP 1
1548: PPUSH
1549: LD_VAR 0 5
1553: PPUSH
1554: LD_VAR 0 6
1558: PPUSH
1559: LD_INT 4
1561: PPUSH
1562: LD_INT 0
1564: PPUSH
1565: CALL 3859 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1569: LD_EXP 15
1573: PPUSH
1574: LD_VAR 0 5
1578: PPUSH
1579: LD_VAR 0 6
1583: PPUSH
1584: LD_INT 4
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL 3859 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1594: LD_EXP 3
1598: PPUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: LD_VAR 0 6
1608: PPUSH
1609: LD_INT 35
1611: PPUSH
1612: LD_INT 0
1614: PPUSH
1615: CALL 3859 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1619: LD_EXP 4
1623: PPUSH
1624: LD_VAR 0 5
1628: PPUSH
1629: LD_VAR 0 6
1633: PPUSH
1634: LD_INT 35
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL 3859 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1644: LD_EXP 5
1648: PPUSH
1649: LD_VAR 0 5
1653: PPUSH
1654: LD_VAR 0 6
1658: PPUSH
1659: LD_INT 35
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL 3859 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_VAR 0 5
1678: PPUSH
1679: LD_VAR 0 6
1683: PPUSH
1684: LD_INT 35
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: CALL 3859 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1694: LD_EXP 7
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: LD_VAR 0 6
1708: PPUSH
1709: LD_INT 35
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL 3859 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1719: LD_EXP 8
1723: PPUSH
1724: LD_VAR 0 5
1728: PPUSH
1729: LD_VAR 0 6
1733: PPUSH
1734: LD_INT 35
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: CALL 3859 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1744: LD_EXP 9
1748: PPUSH
1749: LD_VAR 0 5
1753: PPUSH
1754: LD_VAR 0 6
1758: PPUSH
1759: LD_INT 35
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 3859 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1769: LD_EXP 10
1773: PPUSH
1774: LD_VAR 0 5
1778: PPUSH
1779: LD_VAR 0 6
1783: PPUSH
1784: LD_INT 35
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL 3859 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1794: LD_EXP 11
1798: PPUSH
1799: LD_VAR 0 5
1803: PPUSH
1804: LD_VAR 0 6
1808: PPUSH
1809: LD_INT 35
1811: PPUSH
1812: LD_INT 0
1814: PPUSH
1815: CALL 3859 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1819: LD_EXP 12
1823: PPUSH
1824: LD_VAR 0 5
1828: PPUSH
1829: LD_VAR 0 6
1833: PPUSH
1834: LD_INT 35
1836: PPUSH
1837: LD_INT 0
1839: PPUSH
1840: CALL 3859 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1844: LD_EXP 13
1848: PPUSH
1849: LD_VAR 0 5
1853: PPUSH
1854: LD_VAR 0 6
1858: PPUSH
1859: LD_INT 35
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL 3859 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1869: LD_EXP 14
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: LD_VAR 0 6
1883: PPUSH
1884: LD_INT 35
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL 3859 0 5
// SetClass ( JMM , 1 ) ;
1894: LD_EXP 1
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1906: LD_ADDR_EXP 16
1910: PUSH
1911: LD_STRING 12_other_survivors
1913: PPUSH
1914: CALL_OW 31
1918: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1919: LD_ADDR_EXP 17
1923: PUSH
1924: LD_STRING 12_others
1926: PPUSH
1927: CALL_OW 31
1931: ST_TO_ADDR
// for i in others11 do
1932: LD_ADDR_VAR 0 2
1936: PUSH
1937: LD_EXP 17
1941: PUSH
1942: FOR_IN
1943: IFFALSE 1990
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1945: LD_VAR 0 2
1949: PPUSH
1950: LD_VAR 0 4
1954: PUSH
1955: LD_INT 1
1957: ARRAY
1958: PPUSH
1959: CALL_OW 250
1963: PPUSH
1964: LD_VAR 0 4
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 251
1977: PPUSH
1978: LD_INT 15
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL 3859 0 5
1988: GO 1942
1990: POP
1991: POP
// for i in others12 do
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_EXP 16
2001: PUSH
2002: FOR_IN
2003: IFFALSE 2050
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2005: LD_VAR 0 2
2009: PPUSH
2010: LD_VAR 0 4
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PPUSH
2019: CALL_OW 250
2023: PPUSH
2024: LD_VAR 0 4
2028: PUSH
2029: LD_INT 1
2031: ARRAY
2032: PPUSH
2033: CALL_OW 251
2037: PPUSH
2038: LD_INT 15
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL 3859 0 5
2048: GO 2002
2050: POP
2051: POP
// end ;
2052: LD_VAR 0 1
2056: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2057: LD_INT 0
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
2063: PPUSH
2064: PPUSH
2065: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2066: LD_INT 113
2068: PPUSH
2069: LD_INT 50
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2079: LD_INT 104
2081: PPUSH
2082: LD_INT 24
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2092: LD_INT 43
2094: PPUSH
2095: LD_INT 79
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2105: LD_INT 43
2107: PPUSH
2108: LD_INT 68
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2118: LD_INT 99
2120: PPUSH
2121: LD_INT 114
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2131: LD_INT 103
2133: PPUSH
2134: LD_INT 114
2136: PPUSH
2137: LD_INT 1
2139: PPUSH
2140: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2144: LD_INT 152
2146: PPUSH
2147: LD_INT 85
2149: PPUSH
2150: LD_INT 1
2152: PPUSH
2153: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2157: LD_INT 156
2159: PPUSH
2160: LD_INT 92
2162: PPUSH
2163: LD_INT 1
2165: PPUSH
2166: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2170: LD_ADDR_VAR 0 2
2174: PUSH
2175: LD_STRING 10_EpsilonBase
2177: PPUSH
2178: EMPTY
2179: PPUSH
2180: CALL_OW 30
2184: ST_TO_ADDR
// if not blist then
2185: LD_VAR 0 2
2189: NOT
2190: IFFALSE 2194
// exit ;
2192: GO 3411
// for i in blist do
2194: LD_ADDR_VAR 0 3
2198: PUSH
2199: LD_VAR 0 2
2203: PUSH
2204: FOR_IN
2205: IFFALSE 2247
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2207: LD_VAR 0 3
2211: PUSH
2212: LD_INT 1
2214: ARRAY
2215: PUSH
2216: LD_INT 0
2218: EQUAL
2219: PUSH
2220: LD_VAR 0 3
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PUSH
2229: LD_INT 1
2231: EQUAL
2232: OR
2233: IFFALSE 2245
// begin baseCorrect := 1 ;
2235: LD_ADDR_VAR 0 6
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// break ;
2243: GO 2247
// end ;
2245: GO 2204
2247: POP
2248: POP
// if baseCorrect = 0 then
2249: LD_VAR 0 6
2253: PUSH
2254: LD_INT 0
2256: EQUAL
2257: IFFALSE 2964
// begin uc_side := 1 ;
2259: LD_ADDR_OWVAR 20
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// uc_nation := 1 ;
2267: LD_ADDR_OWVAR 21
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// bc_level := 10 ;
2275: LD_ADDR_OWVAR 43
2279: PUSH
2280: LD_INT 10
2282: ST_TO_ADDR
// bc_type := b_warehouse ;
2283: LD_ADDR_OWVAR 42
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2291: LD_INT 99
2293: PPUSH
2294: LD_INT 24
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: CALL_OW 47
// bc_type := b_bunker ;
2304: LD_ADDR_OWVAR 42
2308: PUSH
2309: LD_INT 32
2311: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2312: LD_ADDR_VAR 0 7
2316: PUSH
2317: LD_INT 124
2319: PPUSH
2320: LD_INT 42
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: CALL_OW 47
2330: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2331: LD_VAR 0 7
2335: PPUSH
2336: LD_INT 4
2338: PUSH
2339: LD_INT 5
2341: PUSH
2342: LD_INT 6
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 3
2355: PPUSH
2356: CALL_OW 12
2360: ARRAY
2361: PPUSH
2362: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2366: LD_ADDR_VAR 0 7
2370: PUSH
2371: LD_INT 111
2373: PPUSH
2374: LD_INT 16
2376: PPUSH
2377: LD_INT 4
2379: PPUSH
2380: CALL_OW 47
2384: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2385: LD_VAR 0 7
2389: PPUSH
2390: LD_INT 4
2392: PUSH
2393: LD_INT 5
2395: PUSH
2396: LD_INT 6
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 1
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 12
2414: ARRAY
2415: PPUSH
2416: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2420: LD_ADDR_VAR 0 7
2424: PUSH
2425: LD_INT 113
2427: PPUSH
2428: LD_INT 21
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 47
2438: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2439: LD_VAR 0 7
2443: PPUSH
2444: LD_INT 4
2446: PUSH
2447: LD_INT 5
2449: PUSH
2450: LD_INT 6
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 3
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: PPUSH
2470: CALL_OW 431
// bc_type := 33 ;
2474: LD_ADDR_OWVAR 42
2478: PUSH
2479: LD_INT 33
2481: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2482: LD_ADDR_VAR 0 7
2486: PUSH
2487: LD_INT 95
2489: PPUSH
2490: LD_INT 41
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: CALL_OW 47
2500: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2501: LD_VAR 0 7
2505: PPUSH
2506: LD_INT 4
2508: PUSH
2509: LD_INT 5
2511: PUSH
2512: LD_INT 6
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 1
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: CALL_OW 12
2530: ARRAY
2531: PPUSH
2532: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2536: LD_ADDR_VAR 0 7
2540: PUSH
2541: LD_INT 97
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: CALL_OW 47
2554: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2555: LD_VAR 0 7
2559: PPUSH
2560: LD_INT 4
2562: PUSH
2563: LD_INT 5
2565: PUSH
2566: LD_INT 6
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 3
2579: PPUSH
2580: CALL_OW 12
2584: ARRAY
2585: PPUSH
2586: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2590: LD_ADDR_VAR 0 7
2594: PUSH
2595: LD_INT 86
2597: PPUSH
2598: LD_INT 19
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: CALL_OW 47
2608: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2609: LD_VAR 0 7
2613: PPUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 5
2619: PUSH
2620: LD_INT 6
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 3
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: PPUSH
2640: CALL_OW 431
// bc_type := 30 ;
2644: LD_ADDR_OWVAR 42
2648: PUSH
2649: LD_INT 30
2651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2652: LD_INT 104
2654: PPUSH
2655: LD_INT 24
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: CALL_OW 47
// bc_type := 29 ;
2665: LD_ADDR_OWVAR 42
2669: PUSH
2670: LD_INT 29
2672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2673: LD_INT 113
2675: PPUSH
2676: LD_INT 50
2678: PPUSH
2679: LD_INT 3
2681: PPUSH
2682: CALL_OW 47
// bc_type := 27 ;
2686: LD_ADDR_OWVAR 42
2690: PUSH
2691: LD_INT 27
2693: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2694: LD_INT 98
2696: PPUSH
2697: LD_INT 26
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2707: LD_INT 95
2709: PPUSH
2710: LD_INT 23
2712: PPUSH
2713: LD_INT 3
2715: PPUSH
2716: CALL_OW 47
// bc_type := 28 ;
2720: LD_ADDR_OWVAR 42
2724: PUSH
2725: LD_INT 28
2727: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2728: LD_INT 107
2730: PPUSH
2731: LD_INT 32
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: CALL_OW 47
// bc_type := 3 ;
2741: LD_ADDR_OWVAR 42
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2749: LD_INT 106
2751: PPUSH
2752: LD_INT 42
2754: PPUSH
2755: LD_INT 0
2757: PPUSH
2758: CALL_OW 47
// bc_type := 16 ;
2762: LD_ADDR_OWVAR 42
2766: PUSH
2767: LD_INT 16
2769: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2770: LD_INT 109
2772: PPUSH
2773: LD_INT 45
2775: PPUSH
2776: LD_INT 5
2778: PPUSH
2779: CALL_OW 47
// bc_type := 17 ;
2783: LD_ADDR_OWVAR 42
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2791: LD_INT 106
2793: PPUSH
2794: LD_INT 46
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: CALL_OW 47
// bc_type := 19 ;
2804: LD_ADDR_OWVAR 42
2808: PUSH
2809: LD_INT 19
2811: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2812: LD_INT 103
2814: PPUSH
2815: LD_INT 42
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 47
// bc_type := 21 ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 21
2832: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2833: LD_INT 110
2835: PPUSH
2836: LD_INT 42
2838: PPUSH
2839: LD_INT 4
2841: PPUSH
2842: CALL_OW 47
// bc_type := 5 ;
2846: LD_ADDR_OWVAR 42
2850: PUSH
2851: LD_INT 5
2853: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2854: LD_INT 114
2856: PPUSH
2857: LD_INT 55
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 47
// bc_type := 36 ;
2867: LD_ADDR_OWVAR 42
2871: PUSH
2872: LD_INT 36
2874: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2875: LD_INT 96
2877: PPUSH
2878: LD_INT 28
2880: PPUSH
2881: LD_INT 2
2883: PPUSH
2884: CALL_OW 47
// bc_type := b_lab_full ;
2888: LD_ADDR_OWVAR 42
2892: PUSH
2893: LD_INT 8
2895: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2896: LD_ADDR_OWVAR 44
2900: PUSH
2901: LD_INT 15
2903: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2904: LD_ADDR_OWVAR 45
2908: PUSH
2909: LD_INT 11
2911: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2912: LD_INT 116
2914: PPUSH
2915: LD_INT 38
2917: PPUSH
2918: LD_INT 4
2920: PPUSH
2921: CALL_OW 47
// bc_type := b_lab_full ;
2925: LD_ADDR_OWVAR 42
2929: PUSH
2930: LD_INT 8
2932: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2933: LD_ADDR_OWVAR 44
2937: PUSH
2938: LD_INT 10
2940: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2941: LD_ADDR_OWVAR 45
2945: PUSH
2946: LD_INT 12
2948: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2949: LD_INT 112
2951: PPUSH
2952: LD_INT 29
2954: PPUSH
2955: LD_INT 4
2957: PPUSH
2958: CALL_OW 47
// end else
2962: GO 3208
// begin uc_side := 1 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 1
2971: ST_TO_ADDR
// for i in blist do
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: LD_VAR 0 2
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3206
// begin uc_nation := i [ 6 ] ;
2985: LD_ADDR_OWVAR 21
2989: PUSH
2990: LD_VAR 0 3
2994: PUSH
2995: LD_INT 6
2997: ARRAY
2998: ST_TO_ADDR
// bc_type := i [ 1 ] ;
2999: LD_ADDR_OWVAR 42
3003: PUSH
3004: LD_VAR 0 3
3008: PUSH
3009: LD_INT 1
3011: ARRAY
3012: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3013: LD_ADDR_OWVAR 43
3017: PUSH
3018: LD_VAR 0 3
3022: PUSH
3023: LD_INT 5
3025: ARRAY
3026: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3027: LD_VAR 0 3
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: PUSH
3036: LD_INT 7
3038: PUSH
3039: LD_INT 8
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: IN
3046: IFFALSE 3076
// begin bc_kind1 := i [ 7 ] ;
3048: LD_ADDR_OWVAR 44
3052: PUSH
3053: LD_VAR 0 3
3057: PUSH
3058: LD_INT 7
3060: ARRAY
3061: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3062: LD_ADDR_OWVAR 45
3066: PUSH
3067: LD_VAR 0 3
3071: PUSH
3072: LD_INT 8
3074: ARRAY
3075: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_VAR 0 3
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: LD_VAR 0 3
3094: PUSH
3095: LD_INT 3
3097: ARRAY
3098: PPUSH
3099: LD_VAR 0 3
3103: PUSH
3104: LD_INT 4
3106: ARRAY
3107: PPUSH
3108: CALL_OW 47
3112: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3113: LD_VAR 0 4
3117: PPUSH
3118: CALL_OW 266
3122: PUSH
3123: LD_INT 32
3125: PUSH
3126: LD_INT 33
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: IN
3133: IFFALSE 3204
// if i [ 7 ] then
3135: LD_VAR 0 3
3139: PUSH
3140: LD_INT 7
3142: ARRAY
3143: IFFALSE 3165
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_VAR 0 3
3154: PUSH
3155: LD_INT 7
3157: ARRAY
3158: PPUSH
3159: CALL_OW 431
3163: GO 3204
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3165: LD_VAR 0 4
3169: PPUSH
3170: LD_INT 11
3172: PUSH
3173: LD_INT 7
3175: PUSH
3176: LD_INT 4
3178: PUSH
3179: LD_INT 5
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 1
3190: PPUSH
3191: LD_INT 4
3193: PPUSH
3194: CALL_OW 12
3198: ARRAY
3199: PPUSH
3200: CALL_OW 431
// end ;
3204: GO 2982
3206: POP
3207: POP
// end ; uc_side := 1 ;
3208: LD_ADDR_OWVAR 20
3212: PUSH
3213: LD_INT 1
3215: ST_TO_ADDR
// uc_nation := 1 ;
3216: LD_ADDR_OWVAR 21
3220: PUSH
3221: LD_INT 1
3223: ST_TO_ADDR
// for i := 1 to 8 do
3224: LD_ADDR_VAR 0 3
3228: PUSH
3229: DOUBLE
3230: LD_INT 1
3232: DEC
3233: ST_TO_ADDR
3234: LD_INT 8
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3409
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3240: LD_ADDR_OWVAR 37
3244: PUSH
3245: LD_INT 5
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: LD_INT 3
3253: PUSH
3254: LD_INT 4
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_INT 1
3265: PPUSH
3266: LD_INT 4
3268: PPUSH
3269: CALL_OW 12
3273: ARRAY
3274: ST_TO_ADDR
// vc_engine := engine_siberite ;
3275: LD_ADDR_OWVAR 39
3279: PUSH
3280: LD_INT 3
3282: ST_TO_ADDR
// vc_control := control_manual ;
3283: LD_ADDR_OWVAR 38
3287: PUSH
3288: LD_INT 1
3290: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3291: LD_OWVAR 37
3295: PUSH
3296: LD_INT 4
3298: EQUAL
3299: IFFALSE 3311
// vc_weapon := us_heavy_gun else
3301: LD_ADDR_OWVAR 40
3305: PUSH
3306: LD_INT 6
3308: ST_TO_ADDR
3309: GO 3356
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3311: LD_ADDR_OWVAR 40
3315: PUSH
3316: LD_INT 7
3318: PUSH
3319: LD_INT 9
3321: PUSH
3322: LD_INT 12
3324: PUSH
3325: LD_INT 13
3327: PUSH
3328: LD_INT 9
3330: PUSH
3331: LD_INT 9
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: PUSH
3342: LD_VAR 0 3
3346: PUSH
3347: LD_INT 6
3349: MOD
3350: PUSH
3351: LD_INT 1
3353: PLUS
3354: ARRAY
3355: ST_TO_ADDR
// un := CreateVehicle ;
3356: LD_ADDR_VAR 0 5
3360: PUSH
3361: CALL_OW 45
3365: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3366: LD_VAR 0 5
3370: PPUSH
3371: LD_INT 0
3373: PPUSH
3374: LD_INT 5
3376: PPUSH
3377: CALL_OW 12
3381: PPUSH
3382: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3386: LD_VAR 0 5
3390: PPUSH
3391: LD_INT 78
3393: PPUSH
3394: LD_INT 31
3396: PPUSH
3397: LD_INT 8
3399: PPUSH
3400: LD_INT 0
3402: PPUSH
3403: CALL_OW 50
// end ;
3407: GO 3237
3409: POP
3410: POP
// end ;
3411: LD_VAR 0 1
3415: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3416: LD_INT 0
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3422: LD_INT 22
3424: PUSH
3425: LD_INT 1
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 21
3434: PUSH
3435: LD_INT 1
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: PPUSH
3446: CALL_OW 69
3450: PUSH
3451: LD_INT 6
3453: LESS
3454: IFFALSE 3681
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3456: LD_ADDR_VAR 0 4
3460: PUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 2
3473: PUSH
3474: LD_INT 30
3476: PUSH
3477: LD_INT 0
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 30
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: ST_TO_ADDR
// uc_side := 1 ;
3508: LD_ADDR_OWVAR 20
3512: PUSH
3513: LD_INT 1
3515: ST_TO_ADDR
// uc_nation := 1 ;
3516: LD_ADDR_OWVAR 21
3520: PUSH
3521: LD_INT 1
3523: ST_TO_ADDR
// for i := 1 to 6 do
3524: LD_ADDR_VAR 0 2
3528: PUSH
3529: DOUBLE
3530: LD_INT 1
3532: DEC
3533: ST_TO_ADDR
3534: LD_INT 6
3536: PUSH
3537: FOR_TO
3538: IFFALSE 3679
// begin hc_gallery :=  ;
3540: LD_ADDR_OWVAR 33
3544: PUSH
3545: LD_STRING 
3547: ST_TO_ADDR
// hc_name :=  ;
3548: LD_ADDR_OWVAR 26
3552: PUSH
3553: LD_STRING 
3555: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3556: LD_INT 0
3558: PPUSH
3559: LD_INT 1
3561: PUSH
3562: LD_INT 2
3564: PUSH
3565: LD_INT 3
3567: PUSH
3568: LD_INT 4
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: LD_INT 1
3579: PPUSH
3580: LD_INT 4
3582: PPUSH
3583: CALL_OW 12
3587: ARRAY
3588: PPUSH
3589: LD_INT 5
3591: PPUSH
3592: LD_INT 8
3594: PPUSH
3595: CALL_OW 12
3599: PPUSH
3600: CALL_OW 380
// un := CreateHuman ;
3604: LD_ADDR_VAR 0 3
3608: PUSH
3609: CALL_OW 44
3613: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3614: LD_ADDR_EXP 18
3618: PUSH
3619: LD_EXP 18
3623: PPUSH
3624: LD_VAR 0 3
3628: PPUSH
3629: CALL 63211 0 2
3633: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3634: LD_VAR 0 3
3638: PPUSH
3639: LD_VAR 0 4
3643: PUSH
3644: LD_INT 1
3646: ARRAY
3647: PPUSH
3648: CALL_OW 250
3652: PPUSH
3653: LD_VAR 0 4
3657: PUSH
3658: LD_INT 1
3660: ARRAY
3661: PPUSH
3662: CALL_OW 251
3666: PPUSH
3667: LD_INT 15
3669: PPUSH
3670: LD_INT 0
3672: PPUSH
3673: CALL 3859 0 5
// end ;
3677: GO 3537
3679: POP
3680: POP
// end ; end ; end_of_file
3681: LD_VAR 0 1
3685: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
// if existMode then
3690: LD_VAR 0 2
3694: IFFALSE 3829
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3696: LD_EXP 21
3700: PUSH
3701: LD_VAR 0 1
3705: STR
3706: PPUSH
3707: CALL_OW 28
3711: IFFALSE 3736
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3713: LD_ADDR_VAR 0 4
3717: PUSH
3718: LD_EXP 21
3722: PUSH
3723: LD_VAR 0 1
3727: STR
3728: PPUSH
3729: CALL_OW 34
3733: ST_TO_ADDR
3734: GO 3827
// begin if TestCharacters ( 11_ & ident ) then
3736: LD_STRING 11_
3738: PUSH
3739: LD_VAR 0 1
3743: STR
3744: PPUSH
3745: CALL_OW 28
3749: IFFALSE 3772
// unit := CreateCharacter ( 11_ & ident ) else
3751: LD_ADDR_VAR 0 4
3755: PUSH
3756: LD_STRING 11_
3758: PUSH
3759: LD_VAR 0 1
3763: STR
3764: PPUSH
3765: CALL_OW 34
3769: ST_TO_ADDR
3770: GO 3827
// if TestCharacters ( 10c_ & ident ) then
3772: LD_STRING 10c_
3774: PUSH
3775: LD_VAR 0 1
3779: STR
3780: PPUSH
3781: CALL_OW 28
3785: IFFALSE 3808
// unit := CreateCharacter ( 10c_ & ident ) else
3787: LD_ADDR_VAR 0 4
3791: PUSH
3792: LD_STRING 10c_
3794: PUSH
3795: LD_VAR 0 1
3799: STR
3800: PPUSH
3801: CALL_OW 34
3805: ST_TO_ADDR
3806: GO 3827
// unit := CreateCharacter ( 10_ & ident ) ;
3808: LD_ADDR_VAR 0 4
3812: PUSH
3813: LD_STRING 10_
3815: PUSH
3816: LD_VAR 0 1
3820: STR
3821: PPUSH
3822: CALL_OW 34
3826: ST_TO_ADDR
// end ; end else
3827: GO 3844
// unit := NewCharacter ( ident ) ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 25
3843: ST_TO_ADDR
// result := unit ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: LD_VAR 0 4
3853: ST_TO_ADDR
// end ;
3854: LD_VAR 0 3
3858: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3859: LD_INT 0
3861: PPUSH
3862: PPUSH
3863: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3864: LD_ADDR_VAR 0 8
3868: PUSH
3869: LD_INT 22
3871: PUSH
3872: LD_VAR 0 1
3876: PPUSH
3877: CALL_OW 255
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: LD_INT 21
3888: PUSH
3889: LD_INT 3
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 3
3898: PUSH
3899: LD_INT 30
3901: PUSH
3902: LD_INT 3
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 69
3922: ST_TO_ADDR
// if not tmp then
3923: LD_VAR 0 8
3927: NOT
3928: IFFALSE 3961
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3930: LD_VAR 0 1
3934: PPUSH
3935: LD_VAR 0 2
3939: PPUSH
3940: LD_VAR 0 3
3944: PPUSH
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_VAR 0 5
3954: PPUSH
3955: CALL_OW 50
// exit ;
3959: GO 4207
// end ; for i in tmp do
3961: LD_ADDR_VAR 0 7
3965: PUSH
3966: LD_VAR 0 8
3970: PUSH
3971: FOR_IN
3972: IFFALSE 4176
// if IsNotFull ( i ) then
3974: LD_VAR 0 7
3978: PPUSH
3979: CALL 27959 0 1
3983: IFFALSE 4174
// begin PlaceHumanInUnit ( unit , i ) ;
3985: LD_VAR 0 1
3989: PPUSH
3990: LD_VAR 0 7
3994: PPUSH
3995: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
3999: LD_VAR 0 7
4003: PPUSH
4004: CALL_OW 266
4008: PUSH
4009: LD_INT 5
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 31
4017: PUSH
4018: LD_INT 32
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: IN
4027: IFFALSE 4060
// begin SetClass ( unit , class_soldier ) ;
4029: LD_VAR 0 1
4033: PPUSH
4034: LD_INT 1
4036: PPUSH
4037: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4041: LD_VAR 0 1
4045: PPUSH
4046: LD_VAR 0 7
4050: PPUSH
4051: CALL 58459 0 1
4055: PPUSH
4056: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4060: LD_VAR 0 7
4064: PPUSH
4065: CALL_OW 266
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: LD_INT 3
4075: PUSH
4076: LD_INT 36
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: IN
4084: IFFALSE 4098
// SetClass ( unit , class_mechanic ) ;
4086: LD_VAR 0 1
4090: PPUSH
4091: LD_INT 3
4093: PPUSH
4094: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4098: LD_VAR 0 7
4102: PPUSH
4103: CALL_OW 266
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: LD_INT 1
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: IN
4118: IFFALSE 4132
// SetClass ( unit , class_engineer ) ;
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4132: LD_VAR 0 7
4136: PPUSH
4137: CALL_OW 266
4141: PUSH
4142: LD_INT 6
4144: PUSH
4145: LD_INT 7
4147: PUSH
4148: LD_INT 8
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: IN
4156: IFFALSE 4170
// SetClass ( unit , class_scientistic ) ;
4158: LD_VAR 0 1
4162: PPUSH
4163: LD_INT 4
4165: PPUSH
4166: CALL_OW 336
// exit ;
4170: POP
4171: POP
4172: GO 4207
// end ;
4174: GO 3971
4176: POP
4177: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4178: LD_VAR 0 1
4182: PPUSH
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_VAR 0 3
4192: PPUSH
4193: LD_VAR 0 4
4197: PPUSH
4198: LD_VAR 0 5
4202: PPUSH
4203: CALL_OW 50
// end ;
4207: LD_VAR 0 6
4211: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4212: LD_INT 0
4214: PPUSH
// if unit in selectedTab then
4215: LD_VAR 0 1
4219: PUSH
4220: LD_VAR 0 3
4224: IN
4225: IFFALSE 4247
// SaveCharacters ( unit , 13c_ & unitString ) else
4227: LD_VAR 0 1
4231: PPUSH
4232: LD_STRING 13c_
4234: PUSH
4235: LD_VAR 0 2
4239: STR
4240: PPUSH
4241: CALL_OW 38
4245: GO 4265
// SaveCharacters ( unit , 13s_ & unitString ) ;
4247: LD_VAR 0 1
4251: PPUSH
4252: LD_STRING 13s_
4254: PUSH
4255: LD_VAR 0 2
4259: STR
4260: PPUSH
4261: CALL_OW 38
// end ;
4265: LD_VAR 0 4
4269: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
4275: PPUSH
// selected := [ ] ;
4276: LD_ADDR_EXP 22
4280: PUSH
4281: EMPTY
4282: ST_TO_ADDR
// othersSelect := [ ] ;
4283: LD_ADDR_EXP 23
4287: PUSH
4288: EMPTY
4289: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: LD_EXP 3
4299: PUSH
4300: LD_EXP 4
4304: PUSH
4305: LD_EXP 5
4309: PUSH
4310: LD_EXP 6
4314: PUSH
4315: LD_EXP 8
4319: PUSH
4320: LD_EXP 9
4324: PUSH
4325: LD_EXP 10
4329: PUSH
4330: LD_EXP 11
4334: PUSH
4335: LD_EXP 12
4339: PUSH
4340: LD_EXP 13
4344: PUSH
4345: LD_EXP 14
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4363: LD_ADDR_VAR 0 3
4367: PUSH
4368: LD_VAR 0 3
4372: PUSH
4373: LD_EXP 17
4377: ADD
4378: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: LD_VAR 0 3
4388: PUSH
4389: LD_EXP 16
4393: ADD
4394: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4395: LD_ADDR_VAR 0 3
4399: PUSH
4400: LD_VAR 0 3
4404: PUSH
4405: LD_EXP 18
4409: ADD
4410: ST_TO_ADDR
// for i in tmp do
4411: LD_ADDR_VAR 0 2
4415: PUSH
4416: LD_VAR 0 3
4420: PUSH
4421: FOR_IN
4422: IFFALSE 4461
// if GetClass ( i ) = 8 then
4424: LD_VAR 0 2
4428: PPUSH
4429: CALL_OW 257
4433: PUSH
4434: LD_INT 8
4436: EQUAL
4437: IFFALSE 4459
// SetClass ( i , rand ( 1 , 4 ) ) ;
4439: LD_VAR 0 2
4443: PPUSH
4444: LD_INT 1
4446: PPUSH
4447: LD_INT 4
4449: PPUSH
4450: CALL_OW 12
4454: PPUSH
4455: CALL_OW 336
4459: GO 4421
4461: POP
4462: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4463: LD_ADDR_EXP 22
4467: PUSH
4468: LD_STRING 1
4470: PPUSH
4471: LD_INT 6
4473: PPUSH
4474: LD_INT 6
4476: PPUSH
4477: LD_INT -5
4479: PUSH
4480: LD_EXP 1
4484: PUSH
4485: LD_EXP 15
4489: PUSH
4490: LD_INT -2
4492: PUSH
4493: LD_INT -3
4495: PUSH
4496: LD_INT -5
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: PUSH
4507: LD_VAR 0 3
4511: ADD
4512: PUSH
4513: LD_INT -6
4515: PUSH
4516: LD_INT -4
4518: PUSH
4519: LD_EXP 2
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: ADD
4529: PPUSH
4530: LD_INT 1
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: PUSH
4540: LD_INT 2
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 4
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 5
4572: PUSH
4573: LD_INT 0
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 42
4595: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4596: LD_ADDR_EXP 23
4600: PUSH
4601: LD_EXP 22
4605: PUSH
4606: LD_EXP 3
4610: PUSH
4611: LD_EXP 4
4615: PUSH
4616: LD_EXP 5
4620: PUSH
4621: LD_EXP 6
4625: PUSH
4626: LD_EXP 7
4630: PUSH
4631: LD_EXP 8
4635: PUSH
4636: LD_EXP 9
4640: PUSH
4641: LD_EXP 10
4645: PUSH
4646: LD_EXP 11
4650: PUSH
4651: LD_EXP 12
4655: PUSH
4656: LD_EXP 13
4660: PUSH
4661: LD_EXP 14
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: DIFF
4680: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4681: LD_ADDR_VAR 0 4
4685: PUSH
4686: LD_VAR 0 3
4690: PUSH
4691: LD_EXP 22
4695: DIFF
4696: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4697: LD_ADDR_VAR 0 4
4701: PUSH
4702: LD_VAR 0 4
4706: PUSH
4707: LD_EXP 3
4711: PUSH
4712: LD_EXP 4
4716: PUSH
4717: LD_EXP 5
4721: PUSH
4722: LD_EXP 6
4726: PUSH
4727: LD_EXP 7
4731: PUSH
4732: LD_EXP 8
4736: PUSH
4737: LD_EXP 9
4741: PUSH
4742: LD_EXP 10
4746: PUSH
4747: LD_EXP 11
4751: PUSH
4752: LD_EXP 12
4756: PUSH
4757: LD_EXP 13
4761: PUSH
4762: LD_EXP 14
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: DIFF
4781: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4782: LD_VAR 0 4
4786: PPUSH
4787: LD_STRING 13s_others
4789: PPUSH
4790: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4794: LD_EXP 23
4798: PPUSH
4799: LD_STRING 13c_others
4801: PPUSH
4802: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4806: LD_EXP 1
4810: PPUSH
4811: LD_STRING 13c_JMM
4813: PPUSH
4814: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4818: LD_EXP 15
4822: PPUSH
4823: LD_STRING 13c_Stevens
4825: PPUSH
4826: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4830: LD_EXP 3
4834: PPUSH
4835: LD_STRING Lisa
4837: PPUSH
4838: LD_EXP 22
4842: PPUSH
4843: CALL 4212 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4847: LD_EXP 8
4851: PPUSH
4852: LD_STRING Brown
4854: PPUSH
4855: LD_EXP 22
4859: PPUSH
4860: CALL 4212 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4864: LD_EXP 4
4868: PPUSH
4869: LD_STRING Donaldson
4871: PPUSH
4872: LD_EXP 22
4876: PPUSH
4877: CALL 4212 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4881: LD_EXP 5
4885: PPUSH
4886: LD_STRING Bobby
4888: PPUSH
4889: LD_EXP 22
4893: PPUSH
4894: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4898: LD_EXP 6
4902: PPUSH
4903: LD_STRING Cyrus
4905: PPUSH
4906: LD_EXP 22
4910: PPUSH
4911: CALL 4212 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4915: LD_EXP 7
4919: PPUSH
4920: LD_STRING Denis
4922: PPUSH
4923: LD_EXP 22
4927: PPUSH
4928: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4932: LD_EXP 9
4936: PPUSH
4937: LD_STRING Gladstone
4939: PPUSH
4940: LD_EXP 22
4944: PPUSH
4945: CALL 4212 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4949: LD_EXP 10
4953: PPUSH
4954: LD_STRING Houten
4956: PPUSH
4957: LD_EXP 22
4961: PPUSH
4962: CALL 4212 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4966: LD_EXP 11
4970: PPUSH
4971: LD_STRING Cornel
4973: PPUSH
4974: LD_EXP 22
4978: PPUSH
4979: CALL 4212 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4983: LD_EXP 12
4987: PPUSH
4988: LD_STRING Gary
4990: PPUSH
4991: LD_EXP 22
4995: PPUSH
4996: CALL 4212 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5000: LD_EXP 13
5004: PPUSH
5005: LD_STRING Frank
5007: PPUSH
5008: LD_EXP 22
5012: PPUSH
5013: CALL 4212 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5017: LD_EXP 14
5021: PPUSH
5022: LD_STRING Kikuchi
5024: PPUSH
5025: LD_EXP 22
5029: PPUSH
5030: CALL 4212 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5034: LD_INT 22
5036: PUSH
5037: LD_INT 1
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 21
5046: PUSH
5047: LD_INT 1
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 69
5062: PPUSH
5063: LD_INT 4
5065: PPUSH
5066: CALL_OW 235
// SetSide ( selected , 1 ) ;
5070: LD_EXP 22
5074: PPUSH
5075: LD_INT 1
5077: PPUSH
5078: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5082: LD_EXP 1
5086: PUSH
5087: LD_EXP 15
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5103: LD_ADDR_VAR 0 2
5107: PUSH
5108: LD_INT 22
5110: PUSH
5111: LD_INT 1
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 21
5120: PUSH
5121: LD_INT 1
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PPUSH
5132: CALL_OW 69
5136: PUSH
5137: FOR_IN
5138: IFFALSE 5151
// ComExit ( i ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: CALL 63609 0 1
5149: GO 5137
5151: POP
5152: POP
// end ; end_of_file
5153: LD_VAR 0 1
5157: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL 21232 0 1
// if un = JMM then
5167: LD_VAR 0 1
5171: PUSH
5172: LD_EXP 1
5176: EQUAL
5177: IFFALSE 5186
// YouLost ( JMM ) ;
5179: LD_STRING JMM
5181: PPUSH
5182: CALL_OW 104
// end ;
5186: PPOPN 1
5188: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5189: LD_VAR 0 1
5193: PPUSH
5194: LD_VAR 0 2
5198: PPUSH
5199: CALL 21352 0 2
// end ; end_of_file
5203: PPOPN 2
5205: END
// export function Action ; begin
5206: LD_INT 0
5208: PPUSH
// InGameOn ;
5209: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5213: LD_INT 22
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: LD_INT 2
5225: PUSH
5226: LD_INT 30
5228: PUSH
5229: LD_INT 0
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 30
5238: PUSH
5239: LD_INT 1
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PPUSH
5255: CALL_OW 69
5259: PPUSH
5260: CALL_OW 87
// wait ( 0 0$1 ) ;
5264: LD_INT 35
5266: PPUSH
5267: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5271: LD_EXP 1
5275: PPUSH
5276: LD_STRING D1-JMM-1
5278: PPUSH
5279: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5283: LD_EXP 2
5287: PPUSH
5288: LD_STRING D1-Pow-1
5290: PPUSH
5291: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5295: LD_EXP 2
5299: PPUSH
5300: LD_STRING D1-Pow-1a
5302: PPUSH
5303: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5307: LD_EXP 2
5311: PPUSH
5312: LD_STRING D1-Pow-1b
5314: PPUSH
5315: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5319: LD_EXP 2
5323: PPUSH
5324: LD_STRING D1-Pow-1c
5326: PPUSH
5327: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5331: LD_EXP 1
5335: PPUSH
5336: LD_STRING D1-JMM-2
5338: PPUSH
5339: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5343: LD_EXP 2
5347: PPUSH
5348: LD_STRING D1-Pow-2
5350: PPUSH
5351: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5355: LD_EXP 1
5359: PPUSH
5360: LD_STRING D1-JMM-3
5362: PPUSH
5363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5367: LD_EXP 2
5371: PPUSH
5372: LD_STRING D1-Pow-3
5374: PPUSH
5375: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5379: LD_EXP 1
5383: PPUSH
5384: LD_STRING D1-JMM-4
5386: PPUSH
5387: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5391: LD_EXP 2
5395: PPUSH
5396: LD_STRING D1-Pow-4
5398: PPUSH
5399: CALL_OW 94
// SelectAndSaveCharacters ;
5403: CALL 4270 0 0
// InGameOff ;
5407: CALL_OW 9
// Query ( Q1 ) ;
5411: LD_STRING Q1
5413: PPUSH
5414: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5418: LD_INT 2
5420: PPUSH
5421: LD_INT 1
5423: PPUSH
5424: CALL_OW 424
// end ; end_of_file
5428: LD_VAR 0 1
5432: RET
// every 0 0$1 do
5433: GO 5435
5435: DISABLE
// begin enable ;
5436: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5437: LD_STRING updateTimer(
5439: PUSH
5440: LD_OWVAR 1
5444: STR
5445: PUSH
5446: LD_STRING );
5448: STR
5449: PPUSH
5450: CALL_OW 559
// end ;
5454: END
// export function SOS_MapStart ( ) ; begin
5455: LD_INT 0
5457: PPUSH
// if streamModeActive then
5458: LD_EXP 25
5462: IFFALSE 5471
// DefineStreamItems ( true ) ;
5464: LD_INT 1
5466: PPUSH
5467: CALL 7275 0 1
// UpdateLuaVariables ( ) ;
5471: CALL 5488 0 0
// UpdateFactoryWaypoints ( ) ;
5475: CALL 20136 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5479: CALL 20393 0 0
// end ;
5483: LD_VAR 0 1
5487: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
5488: LD_INT 0
5490: PPUSH
// if not globalGameSaveCounter then
5491: LD_EXP 24
5495: NOT
5496: IFFALSE 5507
// ToLua ( setGameSaveCounter(0) ) else
5498: LD_STRING setGameSaveCounter(0)
5500: PPUSH
5501: CALL_OW 559
5505: GO 5539
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5507: LD_ADDR_EXP 24
5511: PUSH
5512: LD_EXP 24
5516: PPUSH
5517: CALL 64572 0 1
5521: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5522: LD_STRING setGameSaveCounter(
5524: PUSH
5525: LD_EXP 24
5529: STR
5530: PUSH
5531: LD_STRING )
5533: STR
5534: PPUSH
5535: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5539: LD_STRING setGameDifficulty(
5541: PUSH
5542: LD_OWVAR 67
5546: STR
5547: PUSH
5548: LD_STRING )
5550: STR
5551: PPUSH
5552: CALL_OW 559
// end ;
5556: LD_VAR 0 1
5560: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5561: LD_INT 0
5563: PPUSH
// if p2 = stream_mode then
5564: LD_VAR 0 2
5568: PUSH
5569: LD_INT 100
5571: EQUAL
5572: IFFALSE 6575
// begin if not StreamModeActive then
5574: LD_EXP 25
5578: NOT
5579: IFFALSE 5589
// StreamModeActive := true ;
5581: LD_ADDR_EXP 25
5585: PUSH
5586: LD_INT 1
5588: ST_TO_ADDR
// if p3 = 0 then
5589: LD_VAR 0 3
5593: PUSH
5594: LD_INT 0
5596: EQUAL
5597: IFFALSE 5603
// InitStreamMode ;
5599: CALL 6811 0 0
// if p3 = 1 then
5603: LD_VAR 0 3
5607: PUSH
5608: LD_INT 1
5610: EQUAL
5611: IFFALSE 5621
// sRocket := true ;
5613: LD_ADDR_EXP 30
5617: PUSH
5618: LD_INT 1
5620: ST_TO_ADDR
// if p3 = 2 then
5621: LD_VAR 0 3
5625: PUSH
5626: LD_INT 2
5628: EQUAL
5629: IFFALSE 5639
// sSpeed := true ;
5631: LD_ADDR_EXP 29
5635: PUSH
5636: LD_INT 1
5638: ST_TO_ADDR
// if p3 = 3 then
5639: LD_VAR 0 3
5643: PUSH
5644: LD_INT 3
5646: EQUAL
5647: IFFALSE 5657
// sEngine := true ;
5649: LD_ADDR_EXP 31
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// if p3 = 4 then
5657: LD_VAR 0 3
5661: PUSH
5662: LD_INT 4
5664: EQUAL
5665: IFFALSE 5675
// sSpec := true ;
5667: LD_ADDR_EXP 28
5671: PUSH
5672: LD_INT 1
5674: ST_TO_ADDR
// if p3 = 5 then
5675: LD_VAR 0 3
5679: PUSH
5680: LD_INT 5
5682: EQUAL
5683: IFFALSE 5693
// sLevel := true ;
5685: LD_ADDR_EXP 32
5689: PUSH
5690: LD_INT 1
5692: ST_TO_ADDR
// if p3 = 6 then
5693: LD_VAR 0 3
5697: PUSH
5698: LD_INT 6
5700: EQUAL
5701: IFFALSE 5711
// sArmoury := true ;
5703: LD_ADDR_EXP 33
5707: PUSH
5708: LD_INT 1
5710: ST_TO_ADDR
// if p3 = 7 then
5711: LD_VAR 0 3
5715: PUSH
5716: LD_INT 7
5718: EQUAL
5719: IFFALSE 5729
// sRadar := true ;
5721: LD_ADDR_EXP 34
5725: PUSH
5726: LD_INT 1
5728: ST_TO_ADDR
// if p3 = 8 then
5729: LD_VAR 0 3
5733: PUSH
5734: LD_INT 8
5736: EQUAL
5737: IFFALSE 5747
// sBunker := true ;
5739: LD_ADDR_EXP 35
5743: PUSH
5744: LD_INT 1
5746: ST_TO_ADDR
// if p3 = 9 then
5747: LD_VAR 0 3
5751: PUSH
5752: LD_INT 9
5754: EQUAL
5755: IFFALSE 5765
// sHack := true ;
5757: LD_ADDR_EXP 36
5761: PUSH
5762: LD_INT 1
5764: ST_TO_ADDR
// if p3 = 10 then
5765: LD_VAR 0 3
5769: PUSH
5770: LD_INT 10
5772: EQUAL
5773: IFFALSE 5783
// sFire := true ;
5775: LD_ADDR_EXP 37
5779: PUSH
5780: LD_INT 1
5782: ST_TO_ADDR
// if p3 = 11 then
5783: LD_VAR 0 3
5787: PUSH
5788: LD_INT 11
5790: EQUAL
5791: IFFALSE 5801
// sRefresh := true ;
5793: LD_ADDR_EXP 38
5797: PUSH
5798: LD_INT 1
5800: ST_TO_ADDR
// if p3 = 12 then
5801: LD_VAR 0 3
5805: PUSH
5806: LD_INT 12
5808: EQUAL
5809: IFFALSE 5819
// sExp := true ;
5811: LD_ADDR_EXP 39
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// if p3 = 13 then
5819: LD_VAR 0 3
5823: PUSH
5824: LD_INT 13
5826: EQUAL
5827: IFFALSE 5837
// sDepot := true ;
5829: LD_ADDR_EXP 40
5833: PUSH
5834: LD_INT 1
5836: ST_TO_ADDR
// if p3 = 14 then
5837: LD_VAR 0 3
5841: PUSH
5842: LD_INT 14
5844: EQUAL
5845: IFFALSE 5855
// sFlag := true ;
5847: LD_ADDR_EXP 41
5851: PUSH
5852: LD_INT 1
5854: ST_TO_ADDR
// if p3 = 15 then
5855: LD_VAR 0 3
5859: PUSH
5860: LD_INT 15
5862: EQUAL
5863: IFFALSE 5873
// sKamikadze := true ;
5865: LD_ADDR_EXP 49
5869: PUSH
5870: LD_INT 1
5872: ST_TO_ADDR
// if p3 = 16 then
5873: LD_VAR 0 3
5877: PUSH
5878: LD_INT 16
5880: EQUAL
5881: IFFALSE 5891
// sTroll := true ;
5883: LD_ADDR_EXP 50
5887: PUSH
5888: LD_INT 1
5890: ST_TO_ADDR
// if p3 = 17 then
5891: LD_VAR 0 3
5895: PUSH
5896: LD_INT 17
5898: EQUAL
5899: IFFALSE 5909
// sSlow := true ;
5901: LD_ADDR_EXP 51
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// if p3 = 18 then
5909: LD_VAR 0 3
5913: PUSH
5914: LD_INT 18
5916: EQUAL
5917: IFFALSE 5927
// sLack := true ;
5919: LD_ADDR_EXP 52
5923: PUSH
5924: LD_INT 1
5926: ST_TO_ADDR
// if p3 = 19 then
5927: LD_VAR 0 3
5931: PUSH
5932: LD_INT 19
5934: EQUAL
5935: IFFALSE 5945
// sTank := true ;
5937: LD_ADDR_EXP 54
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
// if p3 = 20 then
5945: LD_VAR 0 3
5949: PUSH
5950: LD_INT 20
5952: EQUAL
5953: IFFALSE 5963
// sRemote := true ;
5955: LD_ADDR_EXP 55
5959: PUSH
5960: LD_INT 1
5962: ST_TO_ADDR
// if p3 = 21 then
5963: LD_VAR 0 3
5967: PUSH
5968: LD_INT 21
5970: EQUAL
5971: IFFALSE 5981
// sPowell := true ;
5973: LD_ADDR_EXP 56
5977: PUSH
5978: LD_INT 1
5980: ST_TO_ADDR
// if p3 = 22 then
5981: LD_VAR 0 3
5985: PUSH
5986: LD_INT 22
5988: EQUAL
5989: IFFALSE 5999
// sTeleport := true ;
5991: LD_ADDR_EXP 59
5995: PUSH
5996: LD_INT 1
5998: ST_TO_ADDR
// if p3 = 23 then
5999: LD_VAR 0 3
6003: PUSH
6004: LD_INT 23
6006: EQUAL
6007: IFFALSE 6017
// sOilTower := true ;
6009: LD_ADDR_EXP 61
6013: PUSH
6014: LD_INT 1
6016: ST_TO_ADDR
// if p3 = 24 then
6017: LD_VAR 0 3
6021: PUSH
6022: LD_INT 24
6024: EQUAL
6025: IFFALSE 6035
// sShovel := true ;
6027: LD_ADDR_EXP 62
6031: PUSH
6032: LD_INT 1
6034: ST_TO_ADDR
// if p3 = 25 then
6035: LD_VAR 0 3
6039: PUSH
6040: LD_INT 25
6042: EQUAL
6043: IFFALSE 6053
// sSheik := true ;
6045: LD_ADDR_EXP 63
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// if p3 = 26 then
6053: LD_VAR 0 3
6057: PUSH
6058: LD_INT 26
6060: EQUAL
6061: IFFALSE 6071
// sEarthquake := true ;
6063: LD_ADDR_EXP 65
6067: PUSH
6068: LD_INT 1
6070: ST_TO_ADDR
// if p3 = 27 then
6071: LD_VAR 0 3
6075: PUSH
6076: LD_INT 27
6078: EQUAL
6079: IFFALSE 6089
// sAI := true ;
6081: LD_ADDR_EXP 66
6085: PUSH
6086: LD_INT 1
6088: ST_TO_ADDR
// if p3 = 28 then
6089: LD_VAR 0 3
6093: PUSH
6094: LD_INT 28
6096: EQUAL
6097: IFFALSE 6107
// sCargo := true ;
6099: LD_ADDR_EXP 69
6103: PUSH
6104: LD_INT 1
6106: ST_TO_ADDR
// if p3 = 29 then
6107: LD_VAR 0 3
6111: PUSH
6112: LD_INT 29
6114: EQUAL
6115: IFFALSE 6125
// sDLaser := true ;
6117: LD_ADDR_EXP 70
6121: PUSH
6122: LD_INT 1
6124: ST_TO_ADDR
// if p3 = 30 then
6125: LD_VAR 0 3
6129: PUSH
6130: LD_INT 30
6132: EQUAL
6133: IFFALSE 6143
// sExchange := true ;
6135: LD_ADDR_EXP 71
6139: PUSH
6140: LD_INT 1
6142: ST_TO_ADDR
// if p3 = 31 then
6143: LD_VAR 0 3
6147: PUSH
6148: LD_INT 31
6150: EQUAL
6151: IFFALSE 6161
// sFac := true ;
6153: LD_ADDR_EXP 72
6157: PUSH
6158: LD_INT 1
6160: ST_TO_ADDR
// if p3 = 32 then
6161: LD_VAR 0 3
6165: PUSH
6166: LD_INT 32
6168: EQUAL
6169: IFFALSE 6179
// sPower := true ;
6171: LD_ADDR_EXP 73
6175: PUSH
6176: LD_INT 1
6178: ST_TO_ADDR
// if p3 = 33 then
6179: LD_VAR 0 3
6183: PUSH
6184: LD_INT 33
6186: EQUAL
6187: IFFALSE 6197
// sRandom := true ;
6189: LD_ADDR_EXP 74
6193: PUSH
6194: LD_INT 1
6196: ST_TO_ADDR
// if p3 = 34 then
6197: LD_VAR 0 3
6201: PUSH
6202: LD_INT 34
6204: EQUAL
6205: IFFALSE 6215
// sShield := true ;
6207: LD_ADDR_EXP 75
6211: PUSH
6212: LD_INT 1
6214: ST_TO_ADDR
// if p3 = 35 then
6215: LD_VAR 0 3
6219: PUSH
6220: LD_INT 35
6222: EQUAL
6223: IFFALSE 6233
// sTime := true ;
6225: LD_ADDR_EXP 76
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// if p3 = 36 then
6233: LD_VAR 0 3
6237: PUSH
6238: LD_INT 36
6240: EQUAL
6241: IFFALSE 6251
// sTools := true ;
6243: LD_ADDR_EXP 77
6247: PUSH
6248: LD_INT 1
6250: ST_TO_ADDR
// if p3 = 101 then
6251: LD_VAR 0 3
6255: PUSH
6256: LD_INT 101
6258: EQUAL
6259: IFFALSE 6269
// sSold := true ;
6261: LD_ADDR_EXP 42
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// if p3 = 102 then
6269: LD_VAR 0 3
6273: PUSH
6274: LD_INT 102
6276: EQUAL
6277: IFFALSE 6287
// sDiff := true ;
6279: LD_ADDR_EXP 43
6283: PUSH
6284: LD_INT 1
6286: ST_TO_ADDR
// if p3 = 103 then
6287: LD_VAR 0 3
6291: PUSH
6292: LD_INT 103
6294: EQUAL
6295: IFFALSE 6305
// sFog := true ;
6297: LD_ADDR_EXP 46
6301: PUSH
6302: LD_INT 1
6304: ST_TO_ADDR
// if p3 = 104 then
6305: LD_VAR 0 3
6309: PUSH
6310: LD_INT 104
6312: EQUAL
6313: IFFALSE 6323
// sReset := true ;
6315: LD_ADDR_EXP 47
6319: PUSH
6320: LD_INT 1
6322: ST_TO_ADDR
// if p3 = 105 then
6323: LD_VAR 0 3
6327: PUSH
6328: LD_INT 105
6330: EQUAL
6331: IFFALSE 6341
// sSun := true ;
6333: LD_ADDR_EXP 48
6337: PUSH
6338: LD_INT 1
6340: ST_TO_ADDR
// if p3 = 106 then
6341: LD_VAR 0 3
6345: PUSH
6346: LD_INT 106
6348: EQUAL
6349: IFFALSE 6359
// sTiger := true ;
6351: LD_ADDR_EXP 44
6355: PUSH
6356: LD_INT 1
6358: ST_TO_ADDR
// if p3 = 107 then
6359: LD_VAR 0 3
6363: PUSH
6364: LD_INT 107
6366: EQUAL
6367: IFFALSE 6377
// sBomb := true ;
6369: LD_ADDR_EXP 45
6373: PUSH
6374: LD_INT 1
6376: ST_TO_ADDR
// if p3 = 108 then
6377: LD_VAR 0 3
6381: PUSH
6382: LD_INT 108
6384: EQUAL
6385: IFFALSE 6395
// sWound := true ;
6387: LD_ADDR_EXP 53
6391: PUSH
6392: LD_INT 1
6394: ST_TO_ADDR
// if p3 = 109 then
6395: LD_VAR 0 3
6399: PUSH
6400: LD_INT 109
6402: EQUAL
6403: IFFALSE 6413
// sBetray := true ;
6405: LD_ADDR_EXP 57
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// if p3 = 110 then
6413: LD_VAR 0 3
6417: PUSH
6418: LD_INT 110
6420: EQUAL
6421: IFFALSE 6431
// sContamin := true ;
6423: LD_ADDR_EXP 58
6427: PUSH
6428: LD_INT 1
6430: ST_TO_ADDR
// if p3 = 111 then
6431: LD_VAR 0 3
6435: PUSH
6436: LD_INT 111
6438: EQUAL
6439: IFFALSE 6449
// sOil := true ;
6441: LD_ADDR_EXP 60
6445: PUSH
6446: LD_INT 1
6448: ST_TO_ADDR
// if p3 = 112 then
6449: LD_VAR 0 3
6453: PUSH
6454: LD_INT 112
6456: EQUAL
6457: IFFALSE 6467
// sStu := true ;
6459: LD_ADDR_EXP 64
6463: PUSH
6464: LD_INT 1
6466: ST_TO_ADDR
// if p3 = 113 then
6467: LD_VAR 0 3
6471: PUSH
6472: LD_INT 113
6474: EQUAL
6475: IFFALSE 6485
// sBazooka := true ;
6477: LD_ADDR_EXP 67
6481: PUSH
6482: LD_INT 1
6484: ST_TO_ADDR
// if p3 = 114 then
6485: LD_VAR 0 3
6489: PUSH
6490: LD_INT 114
6492: EQUAL
6493: IFFALSE 6503
// sMortar := true ;
6495: LD_ADDR_EXP 68
6499: PUSH
6500: LD_INT 1
6502: ST_TO_ADDR
// if p3 = 115 then
6503: LD_VAR 0 3
6507: PUSH
6508: LD_INT 115
6510: EQUAL
6511: IFFALSE 6521
// sRanger := true ;
6513: LD_ADDR_EXP 78
6517: PUSH
6518: LD_INT 1
6520: ST_TO_ADDR
// if p3 = 116 then
6521: LD_VAR 0 3
6525: PUSH
6526: LD_INT 116
6528: EQUAL
6529: IFFALSE 6539
// sComputer := true ;
6531: LD_ADDR_EXP 79
6535: PUSH
6536: LD_INT 1
6538: ST_TO_ADDR
// if p3 = 117 then
6539: LD_VAR 0 3
6543: PUSH
6544: LD_INT 117
6546: EQUAL
6547: IFFALSE 6557
// s30 := true ;
6549: LD_ADDR_EXP 80
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// if p3 = 118 then
6557: LD_VAR 0 3
6561: PUSH
6562: LD_INT 118
6564: EQUAL
6565: IFFALSE 6575
// s60 := true ;
6567: LD_ADDR_EXP 81
6571: PUSH
6572: LD_INT 1
6574: ST_TO_ADDR
// end ; if p2 = hack_mode then
6575: LD_VAR 0 2
6579: PUSH
6580: LD_INT 101
6582: EQUAL
6583: IFFALSE 6711
// begin case p3 of 1 :
6585: LD_VAR 0 3
6589: PUSH
6590: LD_INT 1
6592: DOUBLE
6593: EQUAL
6594: IFTRUE 6598
6596: GO 6605
6598: POP
// hHackUnlimitedResources ; 2 :
6599: CALL 18882 0 0
6603: GO 6711
6605: LD_INT 2
6607: DOUBLE
6608: EQUAL
6609: IFTRUE 6613
6611: GO 6620
6613: POP
// hHackSetLevel10 ; 3 :
6614: CALL 19015 0 0
6618: GO 6711
6620: LD_INT 3
6622: DOUBLE
6623: EQUAL
6624: IFTRUE 6628
6626: GO 6635
6628: POP
// hHackSetLevel10YourUnits ; 4 :
6629: CALL 19100 0 0
6633: GO 6711
6635: LD_INT 4
6637: DOUBLE
6638: EQUAL
6639: IFTRUE 6643
6641: GO 6650
6643: POP
// hHackInvincible ; 5 :
6644: CALL 19548 0 0
6648: GO 6711
6650: LD_INT 5
6652: DOUBLE
6653: EQUAL
6654: IFTRUE 6658
6656: GO 6665
6658: POP
// hHackInvisible ; 6 :
6659: CALL 19659 0 0
6663: GO 6711
6665: LD_INT 6
6667: DOUBLE
6668: EQUAL
6669: IFTRUE 6673
6671: GO 6680
6673: POP
// hHackChangeYourSide ; 7 :
6674: CALL 19716 0 0
6678: GO 6711
6680: LD_INT 7
6682: DOUBLE
6683: EQUAL
6684: IFTRUE 6688
6686: GO 6695
6688: POP
// hHackChangeUnitSide ; 8 :
6689: CALL 19758 0 0
6693: GO 6711
6695: LD_INT 8
6697: DOUBLE
6698: EQUAL
6699: IFTRUE 6703
6701: GO 6710
6703: POP
// hHackFog ; end ;
6704: CALL 19859 0 0
6708: GO 6711
6710: POP
// end ; if p2 = game_save_mode then
6711: LD_VAR 0 2
6715: PUSH
6716: LD_INT 102
6718: EQUAL
6719: IFFALSE 6784
// begin if p3 = 1 then
6721: LD_VAR 0 3
6725: PUSH
6726: LD_INT 1
6728: EQUAL
6729: IFFALSE 6741
// globalGameSaveCounter := p4 ;
6731: LD_ADDR_EXP 24
6735: PUSH
6736: LD_VAR 0 4
6740: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6741: LD_VAR 0 3
6745: PUSH
6746: LD_INT 2
6748: EQUAL
6749: PUSH
6750: LD_EXP 24
6754: AND
6755: IFFALSE 6774
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6757: LD_STRING setGameSaveCounter(
6759: PUSH
6760: LD_EXP 24
6764: STR
6765: PUSH
6766: LD_STRING )
6768: STR
6769: PPUSH
6770: CALL_OW 559
// display_strings := globalGameSaveCounter ;
6774: LD_ADDR_OWVAR 47
6778: PUSH
6779: LD_EXP 24
6783: ST_TO_ADDR
// end ; end ;
6784: LD_VAR 0 7
6788: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6789: GO 6791
6791: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6792: LD_STRING initStreamRollete();
6794: PPUSH
6795: CALL_OW 559
// InitStreamMode ;
6799: CALL 6811 0 0
// DefineStreamItems ( false ) ;
6803: LD_INT 0
6805: PPUSH
6806: CALL 7275 0 1
// end ;
6810: END
// function InitStreamMode ; begin
6811: LD_INT 0
6813: PPUSH
// streamModeActive := false ;
6814: LD_ADDR_EXP 25
6818: PUSH
6819: LD_INT 0
6821: ST_TO_ADDR
// normalCounter := 36 ;
6822: LD_ADDR_EXP 26
6826: PUSH
6827: LD_INT 36
6829: ST_TO_ADDR
// hardcoreCounter := 18 ;
6830: LD_ADDR_EXP 27
6834: PUSH
6835: LD_INT 18
6837: ST_TO_ADDR
// sRocket := false ;
6838: LD_ADDR_EXP 30
6842: PUSH
6843: LD_INT 0
6845: ST_TO_ADDR
// sSpeed := false ;
6846: LD_ADDR_EXP 29
6850: PUSH
6851: LD_INT 0
6853: ST_TO_ADDR
// sEngine := false ;
6854: LD_ADDR_EXP 31
6858: PUSH
6859: LD_INT 0
6861: ST_TO_ADDR
// sSpec := false ;
6862: LD_ADDR_EXP 28
6866: PUSH
6867: LD_INT 0
6869: ST_TO_ADDR
// sLevel := false ;
6870: LD_ADDR_EXP 32
6874: PUSH
6875: LD_INT 0
6877: ST_TO_ADDR
// sArmoury := false ;
6878: LD_ADDR_EXP 33
6882: PUSH
6883: LD_INT 0
6885: ST_TO_ADDR
// sRadar := false ;
6886: LD_ADDR_EXP 34
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// sBunker := false ;
6894: LD_ADDR_EXP 35
6898: PUSH
6899: LD_INT 0
6901: ST_TO_ADDR
// sHack := false ;
6902: LD_ADDR_EXP 36
6906: PUSH
6907: LD_INT 0
6909: ST_TO_ADDR
// sFire := false ;
6910: LD_ADDR_EXP 37
6914: PUSH
6915: LD_INT 0
6917: ST_TO_ADDR
// sRefresh := false ;
6918: LD_ADDR_EXP 38
6922: PUSH
6923: LD_INT 0
6925: ST_TO_ADDR
// sExp := false ;
6926: LD_ADDR_EXP 39
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// sDepot := false ;
6934: LD_ADDR_EXP 40
6938: PUSH
6939: LD_INT 0
6941: ST_TO_ADDR
// sFlag := false ;
6942: LD_ADDR_EXP 41
6946: PUSH
6947: LD_INT 0
6949: ST_TO_ADDR
// sKamikadze := false ;
6950: LD_ADDR_EXP 49
6954: PUSH
6955: LD_INT 0
6957: ST_TO_ADDR
// sTroll := false ;
6958: LD_ADDR_EXP 50
6962: PUSH
6963: LD_INT 0
6965: ST_TO_ADDR
// sSlow := false ;
6966: LD_ADDR_EXP 51
6970: PUSH
6971: LD_INT 0
6973: ST_TO_ADDR
// sLack := false ;
6974: LD_ADDR_EXP 52
6978: PUSH
6979: LD_INT 0
6981: ST_TO_ADDR
// sTank := false ;
6982: LD_ADDR_EXP 54
6986: PUSH
6987: LD_INT 0
6989: ST_TO_ADDR
// sRemote := false ;
6990: LD_ADDR_EXP 55
6994: PUSH
6995: LD_INT 0
6997: ST_TO_ADDR
// sPowell := false ;
6998: LD_ADDR_EXP 56
7002: PUSH
7003: LD_INT 0
7005: ST_TO_ADDR
// sTeleport := false ;
7006: LD_ADDR_EXP 59
7010: PUSH
7011: LD_INT 0
7013: ST_TO_ADDR
// sOilTower := false ;
7014: LD_ADDR_EXP 61
7018: PUSH
7019: LD_INT 0
7021: ST_TO_ADDR
// sShovel := false ;
7022: LD_ADDR_EXP 62
7026: PUSH
7027: LD_INT 0
7029: ST_TO_ADDR
// sSheik := false ;
7030: LD_ADDR_EXP 63
7034: PUSH
7035: LD_INT 0
7037: ST_TO_ADDR
// sEarthquake := false ;
7038: LD_ADDR_EXP 65
7042: PUSH
7043: LD_INT 0
7045: ST_TO_ADDR
// sAI := false ;
7046: LD_ADDR_EXP 66
7050: PUSH
7051: LD_INT 0
7053: ST_TO_ADDR
// sCargo := false ;
7054: LD_ADDR_EXP 69
7058: PUSH
7059: LD_INT 0
7061: ST_TO_ADDR
// sDLaser := false ;
7062: LD_ADDR_EXP 70
7066: PUSH
7067: LD_INT 0
7069: ST_TO_ADDR
// sExchange := false ;
7070: LD_ADDR_EXP 71
7074: PUSH
7075: LD_INT 0
7077: ST_TO_ADDR
// sFac := false ;
7078: LD_ADDR_EXP 72
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// sPower := false ;
7086: LD_ADDR_EXP 73
7090: PUSH
7091: LD_INT 0
7093: ST_TO_ADDR
// sRandom := false ;
7094: LD_ADDR_EXP 74
7098: PUSH
7099: LD_INT 0
7101: ST_TO_ADDR
// sShield := false ;
7102: LD_ADDR_EXP 75
7106: PUSH
7107: LD_INT 0
7109: ST_TO_ADDR
// sTime := false ;
7110: LD_ADDR_EXP 76
7114: PUSH
7115: LD_INT 0
7117: ST_TO_ADDR
// sTools := false ;
7118: LD_ADDR_EXP 77
7122: PUSH
7123: LD_INT 0
7125: ST_TO_ADDR
// sSold := false ;
7126: LD_ADDR_EXP 42
7130: PUSH
7131: LD_INT 0
7133: ST_TO_ADDR
// sDiff := false ;
7134: LD_ADDR_EXP 43
7138: PUSH
7139: LD_INT 0
7141: ST_TO_ADDR
// sFog := false ;
7142: LD_ADDR_EXP 46
7146: PUSH
7147: LD_INT 0
7149: ST_TO_ADDR
// sReset := false ;
7150: LD_ADDR_EXP 47
7154: PUSH
7155: LD_INT 0
7157: ST_TO_ADDR
// sSun := false ;
7158: LD_ADDR_EXP 48
7162: PUSH
7163: LD_INT 0
7165: ST_TO_ADDR
// sTiger := false ;
7166: LD_ADDR_EXP 44
7170: PUSH
7171: LD_INT 0
7173: ST_TO_ADDR
// sBomb := false ;
7174: LD_ADDR_EXP 45
7178: PUSH
7179: LD_INT 0
7181: ST_TO_ADDR
// sWound := false ;
7182: LD_ADDR_EXP 53
7186: PUSH
7187: LD_INT 0
7189: ST_TO_ADDR
// sBetray := false ;
7190: LD_ADDR_EXP 57
7194: PUSH
7195: LD_INT 0
7197: ST_TO_ADDR
// sContamin := false ;
7198: LD_ADDR_EXP 58
7202: PUSH
7203: LD_INT 0
7205: ST_TO_ADDR
// sOil := false ;
7206: LD_ADDR_EXP 60
7210: PUSH
7211: LD_INT 0
7213: ST_TO_ADDR
// sStu := false ;
7214: LD_ADDR_EXP 64
7218: PUSH
7219: LD_INT 0
7221: ST_TO_ADDR
// sBazooka := false ;
7222: LD_ADDR_EXP 67
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// sMortar := false ;
7230: LD_ADDR_EXP 68
7234: PUSH
7235: LD_INT 0
7237: ST_TO_ADDR
// sRanger := false ;
7238: LD_ADDR_EXP 78
7242: PUSH
7243: LD_INT 0
7245: ST_TO_ADDR
// sComputer := false ;
7246: LD_ADDR_EXP 79
7250: PUSH
7251: LD_INT 0
7253: ST_TO_ADDR
// s30 := false ;
7254: LD_ADDR_EXP 80
7258: PUSH
7259: LD_INT 0
7261: ST_TO_ADDR
// s60 := false ;
7262: LD_ADDR_EXP 81
7266: PUSH
7267: LD_INT 0
7269: ST_TO_ADDR
// end ;
7270: LD_VAR 0 1
7274: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7275: LD_INT 0
7277: PPUSH
7278: PPUSH
7279: PPUSH
7280: PPUSH
7281: PPUSH
7282: PPUSH
7283: PPUSH
// result := [ ] ;
7284: LD_ADDR_VAR 0 2
7288: PUSH
7289: EMPTY
7290: ST_TO_ADDR
// if campaign_id = 1 then
7291: LD_OWVAR 69
7295: PUSH
7296: LD_INT 1
7298: EQUAL
7299: IFFALSE 10465
// begin case mission_number of 1 :
7301: LD_OWVAR 70
7305: PUSH
7306: LD_INT 1
7308: DOUBLE
7309: EQUAL
7310: IFTRUE 7314
7312: GO 7390
7314: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7315: LD_ADDR_VAR 0 2
7319: PUSH
7320: LD_INT 2
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 11
7328: PUSH
7329: LD_INT 12
7331: PUSH
7332: LD_INT 15
7334: PUSH
7335: LD_INT 16
7337: PUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 23
7343: PUSH
7344: LD_INT 26
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 101
7360: PUSH
7361: LD_INT 102
7363: PUSH
7364: LD_INT 106
7366: PUSH
7367: LD_INT 116
7369: PUSH
7370: LD_INT 117
7372: PUSH
7373: LD_INT 118
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: ST_TO_ADDR
7388: GO 10463
7390: LD_INT 2
7392: DOUBLE
7393: EQUAL
7394: IFTRUE 7398
7396: GO 7482
7398: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7399: LD_ADDR_VAR 0 2
7403: PUSH
7404: LD_INT 2
7406: PUSH
7407: LD_INT 4
7409: PUSH
7410: LD_INT 11
7412: PUSH
7413: LD_INT 12
7415: PUSH
7416: LD_INT 15
7418: PUSH
7419: LD_INT 16
7421: PUSH
7422: LD_INT 22
7424: PUSH
7425: LD_INT 23
7427: PUSH
7428: LD_INT 26
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 101
7444: PUSH
7445: LD_INT 102
7447: PUSH
7448: LD_INT 105
7450: PUSH
7451: LD_INT 106
7453: PUSH
7454: LD_INT 108
7456: PUSH
7457: LD_INT 116
7459: PUSH
7460: LD_INT 117
7462: PUSH
7463: LD_INT 118
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: ST_TO_ADDR
7480: GO 10463
7482: LD_INT 3
7484: DOUBLE
7485: EQUAL
7486: IFTRUE 7490
7488: GO 7578
7490: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7491: LD_ADDR_VAR 0 2
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: LD_INT 4
7501: PUSH
7502: LD_INT 5
7504: PUSH
7505: LD_INT 11
7507: PUSH
7508: LD_INT 12
7510: PUSH
7511: LD_INT 15
7513: PUSH
7514: LD_INT 16
7516: PUSH
7517: LD_INT 22
7519: PUSH
7520: LD_INT 26
7522: PUSH
7523: LD_INT 36
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 101
7540: PUSH
7541: LD_INT 102
7543: PUSH
7544: LD_INT 105
7546: PUSH
7547: LD_INT 106
7549: PUSH
7550: LD_INT 108
7552: PUSH
7553: LD_INT 116
7555: PUSH
7556: LD_INT 117
7558: PUSH
7559: LD_INT 118
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: ST_TO_ADDR
7576: GO 10463
7578: LD_INT 4
7580: DOUBLE
7581: EQUAL
7582: IFTRUE 7586
7584: GO 7682
7586: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7587: LD_ADDR_VAR 0 2
7591: PUSH
7592: LD_INT 2
7594: PUSH
7595: LD_INT 4
7597: PUSH
7598: LD_INT 5
7600: PUSH
7601: LD_INT 8
7603: PUSH
7604: LD_INT 11
7606: PUSH
7607: LD_INT 12
7609: PUSH
7610: LD_INT 15
7612: PUSH
7613: LD_INT 16
7615: PUSH
7616: LD_INT 22
7618: PUSH
7619: LD_INT 23
7621: PUSH
7622: LD_INT 26
7624: PUSH
7625: LD_INT 36
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 101
7644: PUSH
7645: LD_INT 102
7647: PUSH
7648: LD_INT 105
7650: PUSH
7651: LD_INT 106
7653: PUSH
7654: LD_INT 108
7656: PUSH
7657: LD_INT 116
7659: PUSH
7660: LD_INT 117
7662: PUSH
7663: LD_INT 118
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: ST_TO_ADDR
7680: GO 10463
7682: LD_INT 5
7684: DOUBLE
7685: EQUAL
7686: IFTRUE 7690
7688: GO 7802
7690: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7691: LD_ADDR_VAR 0 2
7695: PUSH
7696: LD_INT 2
7698: PUSH
7699: LD_INT 4
7701: PUSH
7702: LD_INT 5
7704: PUSH
7705: LD_INT 6
7707: PUSH
7708: LD_INT 8
7710: PUSH
7711: LD_INT 11
7713: PUSH
7714: LD_INT 12
7716: PUSH
7717: LD_INT 15
7719: PUSH
7720: LD_INT 16
7722: PUSH
7723: LD_INT 22
7725: PUSH
7726: LD_INT 23
7728: PUSH
7729: LD_INT 25
7731: PUSH
7732: LD_INT 26
7734: PUSH
7735: LD_INT 36
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: PUSH
7754: LD_INT 101
7756: PUSH
7757: LD_INT 102
7759: PUSH
7760: LD_INT 105
7762: PUSH
7763: LD_INT 106
7765: PUSH
7766: LD_INT 108
7768: PUSH
7769: LD_INT 109
7771: PUSH
7772: LD_INT 112
7774: PUSH
7775: LD_INT 116
7777: PUSH
7778: LD_INT 117
7780: PUSH
7781: LD_INT 118
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: ST_TO_ADDR
7800: GO 10463
7802: LD_INT 6
7804: DOUBLE
7805: EQUAL
7806: IFTRUE 7810
7808: GO 7942
7810: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7811: LD_ADDR_VAR 0 2
7815: PUSH
7816: LD_INT 2
7818: PUSH
7819: LD_INT 4
7821: PUSH
7822: LD_INT 5
7824: PUSH
7825: LD_INT 6
7827: PUSH
7828: LD_INT 8
7830: PUSH
7831: LD_INT 11
7833: PUSH
7834: LD_INT 12
7836: PUSH
7837: LD_INT 15
7839: PUSH
7840: LD_INT 16
7842: PUSH
7843: LD_INT 20
7845: PUSH
7846: LD_INT 21
7848: PUSH
7849: LD_INT 22
7851: PUSH
7852: LD_INT 23
7854: PUSH
7855: LD_INT 25
7857: PUSH
7858: LD_INT 26
7860: PUSH
7861: LD_INT 30
7863: PUSH
7864: LD_INT 31
7866: PUSH
7867: LD_INT 32
7869: PUSH
7870: LD_INT 36
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 101
7896: PUSH
7897: LD_INT 102
7899: PUSH
7900: LD_INT 105
7902: PUSH
7903: LD_INT 106
7905: PUSH
7906: LD_INT 108
7908: PUSH
7909: LD_INT 109
7911: PUSH
7912: LD_INT 112
7914: PUSH
7915: LD_INT 116
7917: PUSH
7918: LD_INT 117
7920: PUSH
7921: LD_INT 118
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: ST_TO_ADDR
7940: GO 10463
7942: LD_INT 7
7944: DOUBLE
7945: EQUAL
7946: IFTRUE 7950
7948: GO 8062
7950: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7951: LD_ADDR_VAR 0 2
7955: PUSH
7956: LD_INT 2
7958: PUSH
7959: LD_INT 4
7961: PUSH
7962: LD_INT 5
7964: PUSH
7965: LD_INT 7
7967: PUSH
7968: LD_INT 11
7970: PUSH
7971: LD_INT 12
7973: PUSH
7974: LD_INT 15
7976: PUSH
7977: LD_INT 16
7979: PUSH
7980: LD_INT 20
7982: PUSH
7983: LD_INT 21
7985: PUSH
7986: LD_INT 22
7988: PUSH
7989: LD_INT 23
7991: PUSH
7992: LD_INT 25
7994: PUSH
7995: LD_INT 26
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 101
8016: PUSH
8017: LD_INT 102
8019: PUSH
8020: LD_INT 103
8022: PUSH
8023: LD_INT 105
8025: PUSH
8026: LD_INT 106
8028: PUSH
8029: LD_INT 108
8031: PUSH
8032: LD_INT 112
8034: PUSH
8035: LD_INT 116
8037: PUSH
8038: LD_INT 117
8040: PUSH
8041: LD_INT 118
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: ST_TO_ADDR
8060: GO 10463
8062: LD_INT 8
8064: DOUBLE
8065: EQUAL
8066: IFTRUE 8070
8068: GO 8210
8070: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8071: LD_ADDR_VAR 0 2
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: LD_INT 4
8081: PUSH
8082: LD_INT 5
8084: PUSH
8085: LD_INT 6
8087: PUSH
8088: LD_INT 7
8090: PUSH
8091: LD_INT 8
8093: PUSH
8094: LD_INT 11
8096: PUSH
8097: LD_INT 12
8099: PUSH
8100: LD_INT 15
8102: PUSH
8103: LD_INT 16
8105: PUSH
8106: LD_INT 20
8108: PUSH
8109: LD_INT 21
8111: PUSH
8112: LD_INT 22
8114: PUSH
8115: LD_INT 23
8117: PUSH
8118: LD_INT 25
8120: PUSH
8121: LD_INT 26
8123: PUSH
8124: LD_INT 30
8126: PUSH
8127: LD_INT 31
8129: PUSH
8130: LD_INT 32
8132: PUSH
8133: LD_INT 36
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 101
8160: PUSH
8161: LD_INT 102
8163: PUSH
8164: LD_INT 103
8166: PUSH
8167: LD_INT 105
8169: PUSH
8170: LD_INT 106
8172: PUSH
8173: LD_INT 108
8175: PUSH
8176: LD_INT 109
8178: PUSH
8179: LD_INT 112
8181: PUSH
8182: LD_INT 116
8184: PUSH
8185: LD_INT 117
8187: PUSH
8188: LD_INT 118
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: ST_TO_ADDR
8208: GO 10463
8210: LD_INT 9
8212: DOUBLE
8213: EQUAL
8214: IFTRUE 8218
8216: GO 8366
8218: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8219: LD_ADDR_VAR 0 2
8223: PUSH
8224: LD_INT 2
8226: PUSH
8227: LD_INT 4
8229: PUSH
8230: LD_INT 5
8232: PUSH
8233: LD_INT 6
8235: PUSH
8236: LD_INT 7
8238: PUSH
8239: LD_INT 8
8241: PUSH
8242: LD_INT 11
8244: PUSH
8245: LD_INT 12
8247: PUSH
8248: LD_INT 15
8250: PUSH
8251: LD_INT 16
8253: PUSH
8254: LD_INT 20
8256: PUSH
8257: LD_INT 21
8259: PUSH
8260: LD_INT 22
8262: PUSH
8263: LD_INT 23
8265: PUSH
8266: LD_INT 25
8268: PUSH
8269: LD_INT 26
8271: PUSH
8272: LD_INT 28
8274: PUSH
8275: LD_INT 30
8277: PUSH
8278: LD_INT 31
8280: PUSH
8281: LD_INT 32
8283: PUSH
8284: LD_INT 36
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 101
8312: PUSH
8313: LD_INT 102
8315: PUSH
8316: LD_INT 103
8318: PUSH
8319: LD_INT 105
8321: PUSH
8322: LD_INT 106
8324: PUSH
8325: LD_INT 108
8327: PUSH
8328: LD_INT 109
8330: PUSH
8331: LD_INT 112
8333: PUSH
8334: LD_INT 114
8336: PUSH
8337: LD_INT 116
8339: PUSH
8340: LD_INT 117
8342: PUSH
8343: LD_INT 118
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: ST_TO_ADDR
8364: GO 10463
8366: LD_INT 10
8368: DOUBLE
8369: EQUAL
8370: IFTRUE 8374
8372: GO 8570
8374: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8375: LD_ADDR_VAR 0 2
8379: PUSH
8380: LD_INT 2
8382: PUSH
8383: LD_INT 4
8385: PUSH
8386: LD_INT 5
8388: PUSH
8389: LD_INT 6
8391: PUSH
8392: LD_INT 7
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 9
8400: PUSH
8401: LD_INT 10
8403: PUSH
8404: LD_INT 11
8406: PUSH
8407: LD_INT 12
8409: PUSH
8410: LD_INT 13
8412: PUSH
8413: LD_INT 14
8415: PUSH
8416: LD_INT 15
8418: PUSH
8419: LD_INT 16
8421: PUSH
8422: LD_INT 17
8424: PUSH
8425: LD_INT 18
8427: PUSH
8428: LD_INT 19
8430: PUSH
8431: LD_INT 20
8433: PUSH
8434: LD_INT 21
8436: PUSH
8437: LD_INT 22
8439: PUSH
8440: LD_INT 23
8442: PUSH
8443: LD_INT 24
8445: PUSH
8446: LD_INT 25
8448: PUSH
8449: LD_INT 26
8451: PUSH
8452: LD_INT 28
8454: PUSH
8455: LD_INT 30
8457: PUSH
8458: LD_INT 31
8460: PUSH
8461: LD_INT 32
8463: PUSH
8464: LD_INT 36
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 101
8500: PUSH
8501: LD_INT 102
8503: PUSH
8504: LD_INT 103
8506: PUSH
8507: LD_INT 104
8509: PUSH
8510: LD_INT 105
8512: PUSH
8513: LD_INT 106
8515: PUSH
8516: LD_INT 107
8518: PUSH
8519: LD_INT 108
8521: PUSH
8522: LD_INT 109
8524: PUSH
8525: LD_INT 110
8527: PUSH
8528: LD_INT 111
8530: PUSH
8531: LD_INT 112
8533: PUSH
8534: LD_INT 114
8536: PUSH
8537: LD_INT 116
8539: PUSH
8540: LD_INT 117
8542: PUSH
8543: LD_INT 118
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: ST_TO_ADDR
8568: GO 10463
8570: LD_INT 11
8572: DOUBLE
8573: EQUAL
8574: IFTRUE 8578
8576: GO 8782
8578: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8579: LD_ADDR_VAR 0 2
8583: PUSH
8584: LD_INT 2
8586: PUSH
8587: LD_INT 3
8589: PUSH
8590: LD_INT 4
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: LD_INT 6
8598: PUSH
8599: LD_INT 7
8601: PUSH
8602: LD_INT 8
8604: PUSH
8605: LD_INT 9
8607: PUSH
8608: LD_INT 10
8610: PUSH
8611: LD_INT 11
8613: PUSH
8614: LD_INT 12
8616: PUSH
8617: LD_INT 13
8619: PUSH
8620: LD_INT 14
8622: PUSH
8623: LD_INT 15
8625: PUSH
8626: LD_INT 16
8628: PUSH
8629: LD_INT 17
8631: PUSH
8632: LD_INT 18
8634: PUSH
8635: LD_INT 19
8637: PUSH
8638: LD_INT 20
8640: PUSH
8641: LD_INT 21
8643: PUSH
8644: LD_INT 22
8646: PUSH
8647: LD_INT 23
8649: PUSH
8650: LD_INT 24
8652: PUSH
8653: LD_INT 25
8655: PUSH
8656: LD_INT 26
8658: PUSH
8659: LD_INT 28
8661: PUSH
8662: LD_INT 30
8664: PUSH
8665: LD_INT 31
8667: PUSH
8668: LD_INT 32
8670: PUSH
8671: LD_INT 34
8673: PUSH
8674: LD_INT 36
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: PUSH
8710: LD_INT 101
8712: PUSH
8713: LD_INT 102
8715: PUSH
8716: LD_INT 103
8718: PUSH
8719: LD_INT 104
8721: PUSH
8722: LD_INT 105
8724: PUSH
8725: LD_INT 106
8727: PUSH
8728: LD_INT 107
8730: PUSH
8731: LD_INT 108
8733: PUSH
8734: LD_INT 109
8736: PUSH
8737: LD_INT 110
8739: PUSH
8740: LD_INT 111
8742: PUSH
8743: LD_INT 112
8745: PUSH
8746: LD_INT 114
8748: PUSH
8749: LD_INT 116
8751: PUSH
8752: LD_INT 117
8754: PUSH
8755: LD_INT 118
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: ST_TO_ADDR
8780: GO 10463
8782: LD_INT 12
8784: DOUBLE
8785: EQUAL
8786: IFTRUE 8790
8788: GO 9010
8790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8791: LD_ADDR_VAR 0 2
8795: PUSH
8796: LD_INT 1
8798: PUSH
8799: LD_INT 2
8801: PUSH
8802: LD_INT 3
8804: PUSH
8805: LD_INT 4
8807: PUSH
8808: LD_INT 5
8810: PUSH
8811: LD_INT 6
8813: PUSH
8814: LD_INT 7
8816: PUSH
8817: LD_INT 8
8819: PUSH
8820: LD_INT 9
8822: PUSH
8823: LD_INT 10
8825: PUSH
8826: LD_INT 11
8828: PUSH
8829: LD_INT 12
8831: PUSH
8832: LD_INT 13
8834: PUSH
8835: LD_INT 14
8837: PUSH
8838: LD_INT 15
8840: PUSH
8841: LD_INT 16
8843: PUSH
8844: LD_INT 17
8846: PUSH
8847: LD_INT 18
8849: PUSH
8850: LD_INT 19
8852: PUSH
8853: LD_INT 20
8855: PUSH
8856: LD_INT 21
8858: PUSH
8859: LD_INT 22
8861: PUSH
8862: LD_INT 23
8864: PUSH
8865: LD_INT 24
8867: PUSH
8868: LD_INT 25
8870: PUSH
8871: LD_INT 26
8873: PUSH
8874: LD_INT 27
8876: PUSH
8877: LD_INT 28
8879: PUSH
8880: LD_INT 30
8882: PUSH
8883: LD_INT 31
8885: PUSH
8886: LD_INT 32
8888: PUSH
8889: LD_INT 33
8891: PUSH
8892: LD_INT 34
8894: PUSH
8895: LD_INT 36
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: LD_INT 101
8936: PUSH
8937: LD_INT 102
8939: PUSH
8940: LD_INT 103
8942: PUSH
8943: LD_INT 104
8945: PUSH
8946: LD_INT 105
8948: PUSH
8949: LD_INT 106
8951: PUSH
8952: LD_INT 107
8954: PUSH
8955: LD_INT 108
8957: PUSH
8958: LD_INT 109
8960: PUSH
8961: LD_INT 110
8963: PUSH
8964: LD_INT 111
8966: PUSH
8967: LD_INT 112
8969: PUSH
8970: LD_INT 113
8972: PUSH
8973: LD_INT 114
8975: PUSH
8976: LD_INT 116
8978: PUSH
8979: LD_INT 117
8981: PUSH
8982: LD_INT 118
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: ST_TO_ADDR
9008: GO 10463
9010: LD_INT 13
9012: DOUBLE
9013: EQUAL
9014: IFTRUE 9018
9016: GO 9226
9018: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9019: LD_ADDR_VAR 0 2
9023: PUSH
9024: LD_INT 1
9026: PUSH
9027: LD_INT 2
9029: PUSH
9030: LD_INT 3
9032: PUSH
9033: LD_INT 4
9035: PUSH
9036: LD_INT 5
9038: PUSH
9039: LD_INT 8
9041: PUSH
9042: LD_INT 9
9044: PUSH
9045: LD_INT 10
9047: PUSH
9048: LD_INT 11
9050: PUSH
9051: LD_INT 12
9053: PUSH
9054: LD_INT 14
9056: PUSH
9057: LD_INT 15
9059: PUSH
9060: LD_INT 16
9062: PUSH
9063: LD_INT 17
9065: PUSH
9066: LD_INT 18
9068: PUSH
9069: LD_INT 19
9071: PUSH
9072: LD_INT 20
9074: PUSH
9075: LD_INT 21
9077: PUSH
9078: LD_INT 22
9080: PUSH
9081: LD_INT 23
9083: PUSH
9084: LD_INT 24
9086: PUSH
9087: LD_INT 25
9089: PUSH
9090: LD_INT 26
9092: PUSH
9093: LD_INT 27
9095: PUSH
9096: LD_INT 28
9098: PUSH
9099: LD_INT 30
9101: PUSH
9102: LD_INT 31
9104: PUSH
9105: LD_INT 32
9107: PUSH
9108: LD_INT 33
9110: PUSH
9111: LD_INT 34
9113: PUSH
9114: LD_INT 36
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 101
9152: PUSH
9153: LD_INT 102
9155: PUSH
9156: LD_INT 103
9158: PUSH
9159: LD_INT 104
9161: PUSH
9162: LD_INT 105
9164: PUSH
9165: LD_INT 106
9167: PUSH
9168: LD_INT 107
9170: PUSH
9171: LD_INT 108
9173: PUSH
9174: LD_INT 109
9176: PUSH
9177: LD_INT 110
9179: PUSH
9180: LD_INT 111
9182: PUSH
9183: LD_INT 112
9185: PUSH
9186: LD_INT 113
9188: PUSH
9189: LD_INT 114
9191: PUSH
9192: LD_INT 116
9194: PUSH
9195: LD_INT 117
9197: PUSH
9198: LD_INT 118
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: ST_TO_ADDR
9224: GO 10463
9226: LD_INT 14
9228: DOUBLE
9229: EQUAL
9230: IFTRUE 9234
9232: GO 9458
9234: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9235: LD_ADDR_VAR 0 2
9239: PUSH
9240: LD_INT 1
9242: PUSH
9243: LD_INT 2
9245: PUSH
9246: LD_INT 3
9248: PUSH
9249: LD_INT 4
9251: PUSH
9252: LD_INT 5
9254: PUSH
9255: LD_INT 6
9257: PUSH
9258: LD_INT 7
9260: PUSH
9261: LD_INT 8
9263: PUSH
9264: LD_INT 9
9266: PUSH
9267: LD_INT 10
9269: PUSH
9270: LD_INT 11
9272: PUSH
9273: LD_INT 12
9275: PUSH
9276: LD_INT 13
9278: PUSH
9279: LD_INT 14
9281: PUSH
9282: LD_INT 15
9284: PUSH
9285: LD_INT 16
9287: PUSH
9288: LD_INT 17
9290: PUSH
9291: LD_INT 18
9293: PUSH
9294: LD_INT 19
9296: PUSH
9297: LD_INT 20
9299: PUSH
9300: LD_INT 21
9302: PUSH
9303: LD_INT 22
9305: PUSH
9306: LD_INT 23
9308: PUSH
9309: LD_INT 24
9311: PUSH
9312: LD_INT 25
9314: PUSH
9315: LD_INT 26
9317: PUSH
9318: LD_INT 27
9320: PUSH
9321: LD_INT 28
9323: PUSH
9324: LD_INT 29
9326: PUSH
9327: LD_INT 30
9329: PUSH
9330: LD_INT 31
9332: PUSH
9333: LD_INT 32
9335: PUSH
9336: LD_INT 33
9338: PUSH
9339: LD_INT 34
9341: PUSH
9342: LD_INT 36
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: PUSH
9382: LD_INT 101
9384: PUSH
9385: LD_INT 102
9387: PUSH
9388: LD_INT 103
9390: PUSH
9391: LD_INT 104
9393: PUSH
9394: LD_INT 105
9396: PUSH
9397: LD_INT 106
9399: PUSH
9400: LD_INT 107
9402: PUSH
9403: LD_INT 108
9405: PUSH
9406: LD_INT 109
9408: PUSH
9409: LD_INT 110
9411: PUSH
9412: LD_INT 111
9414: PUSH
9415: LD_INT 112
9417: PUSH
9418: LD_INT 113
9420: PUSH
9421: LD_INT 114
9423: PUSH
9424: LD_INT 116
9426: PUSH
9427: LD_INT 117
9429: PUSH
9430: LD_INT 118
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: ST_TO_ADDR
9456: GO 10463
9458: LD_INT 15
9460: DOUBLE
9461: EQUAL
9462: IFTRUE 9466
9464: GO 9690
9466: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9467: LD_ADDR_VAR 0 2
9471: PUSH
9472: LD_INT 1
9474: PUSH
9475: LD_INT 2
9477: PUSH
9478: LD_INT 3
9480: PUSH
9481: LD_INT 4
9483: PUSH
9484: LD_INT 5
9486: PUSH
9487: LD_INT 6
9489: PUSH
9490: LD_INT 7
9492: PUSH
9493: LD_INT 8
9495: PUSH
9496: LD_INT 9
9498: PUSH
9499: LD_INT 10
9501: PUSH
9502: LD_INT 11
9504: PUSH
9505: LD_INT 12
9507: PUSH
9508: LD_INT 13
9510: PUSH
9511: LD_INT 14
9513: PUSH
9514: LD_INT 15
9516: PUSH
9517: LD_INT 16
9519: PUSH
9520: LD_INT 17
9522: PUSH
9523: LD_INT 18
9525: PUSH
9526: LD_INT 19
9528: PUSH
9529: LD_INT 20
9531: PUSH
9532: LD_INT 21
9534: PUSH
9535: LD_INT 22
9537: PUSH
9538: LD_INT 23
9540: PUSH
9541: LD_INT 24
9543: PUSH
9544: LD_INT 25
9546: PUSH
9547: LD_INT 26
9549: PUSH
9550: LD_INT 27
9552: PUSH
9553: LD_INT 28
9555: PUSH
9556: LD_INT 29
9558: PUSH
9559: LD_INT 30
9561: PUSH
9562: LD_INT 31
9564: PUSH
9565: LD_INT 32
9567: PUSH
9568: LD_INT 33
9570: PUSH
9571: LD_INT 34
9573: PUSH
9574: LD_INT 36
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 101
9616: PUSH
9617: LD_INT 102
9619: PUSH
9620: LD_INT 103
9622: PUSH
9623: LD_INT 104
9625: PUSH
9626: LD_INT 105
9628: PUSH
9629: LD_INT 106
9631: PUSH
9632: LD_INT 107
9634: PUSH
9635: LD_INT 108
9637: PUSH
9638: LD_INT 109
9640: PUSH
9641: LD_INT 110
9643: PUSH
9644: LD_INT 111
9646: PUSH
9647: LD_INT 112
9649: PUSH
9650: LD_INT 113
9652: PUSH
9653: LD_INT 114
9655: PUSH
9656: LD_INT 116
9658: PUSH
9659: LD_INT 117
9661: PUSH
9662: LD_INT 118
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: ST_TO_ADDR
9688: GO 10463
9690: LD_INT 16
9692: DOUBLE
9693: EQUAL
9694: IFTRUE 9698
9696: GO 9834
9698: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9699: LD_ADDR_VAR 0 2
9703: PUSH
9704: LD_INT 2
9706: PUSH
9707: LD_INT 4
9709: PUSH
9710: LD_INT 5
9712: PUSH
9713: LD_INT 7
9715: PUSH
9716: LD_INT 11
9718: PUSH
9719: LD_INT 12
9721: PUSH
9722: LD_INT 15
9724: PUSH
9725: LD_INT 16
9727: PUSH
9728: LD_INT 20
9730: PUSH
9731: LD_INT 21
9733: PUSH
9734: LD_INT 22
9736: PUSH
9737: LD_INT 23
9739: PUSH
9740: LD_INT 25
9742: PUSH
9743: LD_INT 26
9745: PUSH
9746: LD_INT 30
9748: PUSH
9749: LD_INT 31
9751: PUSH
9752: LD_INT 32
9754: PUSH
9755: LD_INT 33
9757: PUSH
9758: LD_INT 34
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 101
9784: PUSH
9785: LD_INT 102
9787: PUSH
9788: LD_INT 103
9790: PUSH
9791: LD_INT 106
9793: PUSH
9794: LD_INT 108
9796: PUSH
9797: LD_INT 112
9799: PUSH
9800: LD_INT 113
9802: PUSH
9803: LD_INT 114
9805: PUSH
9806: LD_INT 116
9808: PUSH
9809: LD_INT 117
9811: PUSH
9812: LD_INT 118
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: ST_TO_ADDR
9832: GO 10463
9834: LD_INT 17
9836: DOUBLE
9837: EQUAL
9838: IFTRUE 9842
9840: GO 10066
9842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9843: LD_ADDR_VAR 0 2
9847: PUSH
9848: LD_INT 1
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: LD_INT 4
9859: PUSH
9860: LD_INT 5
9862: PUSH
9863: LD_INT 6
9865: PUSH
9866: LD_INT 7
9868: PUSH
9869: LD_INT 8
9871: PUSH
9872: LD_INT 9
9874: PUSH
9875: LD_INT 10
9877: PUSH
9878: LD_INT 11
9880: PUSH
9881: LD_INT 12
9883: PUSH
9884: LD_INT 13
9886: PUSH
9887: LD_INT 14
9889: PUSH
9890: LD_INT 15
9892: PUSH
9893: LD_INT 16
9895: PUSH
9896: LD_INT 17
9898: PUSH
9899: LD_INT 18
9901: PUSH
9902: LD_INT 19
9904: PUSH
9905: LD_INT 20
9907: PUSH
9908: LD_INT 21
9910: PUSH
9911: LD_INT 22
9913: PUSH
9914: LD_INT 23
9916: PUSH
9917: LD_INT 24
9919: PUSH
9920: LD_INT 25
9922: PUSH
9923: LD_INT 26
9925: PUSH
9926: LD_INT 27
9928: PUSH
9929: LD_INT 28
9931: PUSH
9932: LD_INT 29
9934: PUSH
9935: LD_INT 30
9937: PUSH
9938: LD_INT 31
9940: PUSH
9941: LD_INT 32
9943: PUSH
9944: LD_INT 33
9946: PUSH
9947: LD_INT 34
9949: PUSH
9950: LD_INT 36
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 101
9992: PUSH
9993: LD_INT 102
9995: PUSH
9996: LD_INT 103
9998: PUSH
9999: LD_INT 104
10001: PUSH
10002: LD_INT 105
10004: PUSH
10005: LD_INT 106
10007: PUSH
10008: LD_INT 107
10010: PUSH
10011: LD_INT 108
10013: PUSH
10014: LD_INT 109
10016: PUSH
10017: LD_INT 110
10019: PUSH
10020: LD_INT 111
10022: PUSH
10023: LD_INT 112
10025: PUSH
10026: LD_INT 113
10028: PUSH
10029: LD_INT 114
10031: PUSH
10032: LD_INT 116
10034: PUSH
10035: LD_INT 117
10037: PUSH
10038: LD_INT 118
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: ST_TO_ADDR
10064: GO 10463
10066: LD_INT 18
10068: DOUBLE
10069: EQUAL
10070: IFTRUE 10074
10072: GO 10222
10074: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10075: LD_ADDR_VAR 0 2
10079: PUSH
10080: LD_INT 2
10082: PUSH
10083: LD_INT 4
10085: PUSH
10086: LD_INT 5
10088: PUSH
10089: LD_INT 7
10091: PUSH
10092: LD_INT 11
10094: PUSH
10095: LD_INT 12
10097: PUSH
10098: LD_INT 15
10100: PUSH
10101: LD_INT 16
10103: PUSH
10104: LD_INT 20
10106: PUSH
10107: LD_INT 21
10109: PUSH
10110: LD_INT 22
10112: PUSH
10113: LD_INT 23
10115: PUSH
10116: LD_INT 25
10118: PUSH
10119: LD_INT 26
10121: PUSH
10122: LD_INT 30
10124: PUSH
10125: LD_INT 31
10127: PUSH
10128: LD_INT 32
10130: PUSH
10131: LD_INT 33
10133: PUSH
10134: LD_INT 34
10136: PUSH
10137: LD_INT 35
10139: PUSH
10140: LD_INT 36
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 101
10168: PUSH
10169: LD_INT 102
10171: PUSH
10172: LD_INT 103
10174: PUSH
10175: LD_INT 106
10177: PUSH
10178: LD_INT 108
10180: PUSH
10181: LD_INT 112
10183: PUSH
10184: LD_INT 113
10186: PUSH
10187: LD_INT 114
10189: PUSH
10190: LD_INT 115
10192: PUSH
10193: LD_INT 116
10195: PUSH
10196: LD_INT 117
10198: PUSH
10199: LD_INT 118
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: ST_TO_ADDR
10220: GO 10463
10222: LD_INT 19
10224: DOUBLE
10225: EQUAL
10226: IFTRUE 10230
10228: GO 10462
10230: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10231: LD_ADDR_VAR 0 2
10235: PUSH
10236: LD_INT 1
10238: PUSH
10239: LD_INT 2
10241: PUSH
10242: LD_INT 3
10244: PUSH
10245: LD_INT 4
10247: PUSH
10248: LD_INT 5
10250: PUSH
10251: LD_INT 6
10253: PUSH
10254: LD_INT 7
10256: PUSH
10257: LD_INT 8
10259: PUSH
10260: LD_INT 9
10262: PUSH
10263: LD_INT 10
10265: PUSH
10266: LD_INT 11
10268: PUSH
10269: LD_INT 12
10271: PUSH
10272: LD_INT 13
10274: PUSH
10275: LD_INT 14
10277: PUSH
10278: LD_INT 15
10280: PUSH
10281: LD_INT 16
10283: PUSH
10284: LD_INT 17
10286: PUSH
10287: LD_INT 18
10289: PUSH
10290: LD_INT 19
10292: PUSH
10293: LD_INT 20
10295: PUSH
10296: LD_INT 21
10298: PUSH
10299: LD_INT 22
10301: PUSH
10302: LD_INT 23
10304: PUSH
10305: LD_INT 24
10307: PUSH
10308: LD_INT 25
10310: PUSH
10311: LD_INT 26
10313: PUSH
10314: LD_INT 27
10316: PUSH
10317: LD_INT 28
10319: PUSH
10320: LD_INT 29
10322: PUSH
10323: LD_INT 30
10325: PUSH
10326: LD_INT 31
10328: PUSH
10329: LD_INT 32
10331: PUSH
10332: LD_INT 33
10334: PUSH
10335: LD_INT 34
10337: PUSH
10338: LD_INT 35
10340: PUSH
10341: LD_INT 36
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 101
10384: PUSH
10385: LD_INT 102
10387: PUSH
10388: LD_INT 103
10390: PUSH
10391: LD_INT 104
10393: PUSH
10394: LD_INT 105
10396: PUSH
10397: LD_INT 106
10399: PUSH
10400: LD_INT 107
10402: PUSH
10403: LD_INT 108
10405: PUSH
10406: LD_INT 109
10408: PUSH
10409: LD_INT 110
10411: PUSH
10412: LD_INT 111
10414: PUSH
10415: LD_INT 112
10417: PUSH
10418: LD_INT 113
10420: PUSH
10421: LD_INT 114
10423: PUSH
10424: LD_INT 115
10426: PUSH
10427: LD_INT 116
10429: PUSH
10430: LD_INT 117
10432: PUSH
10433: LD_INT 118
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: ST_TO_ADDR
10460: GO 10463
10462: POP
// end else
10463: GO 10694
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10465: LD_ADDR_VAR 0 2
10469: PUSH
10470: LD_INT 1
10472: PUSH
10473: LD_INT 2
10475: PUSH
10476: LD_INT 3
10478: PUSH
10479: LD_INT 4
10481: PUSH
10482: LD_INT 5
10484: PUSH
10485: LD_INT 6
10487: PUSH
10488: LD_INT 7
10490: PUSH
10491: LD_INT 8
10493: PUSH
10494: LD_INT 9
10496: PUSH
10497: LD_INT 10
10499: PUSH
10500: LD_INT 11
10502: PUSH
10503: LD_INT 12
10505: PUSH
10506: LD_INT 13
10508: PUSH
10509: LD_INT 14
10511: PUSH
10512: LD_INT 15
10514: PUSH
10515: LD_INT 16
10517: PUSH
10518: LD_INT 17
10520: PUSH
10521: LD_INT 18
10523: PUSH
10524: LD_INT 19
10526: PUSH
10527: LD_INT 20
10529: PUSH
10530: LD_INT 21
10532: PUSH
10533: LD_INT 22
10535: PUSH
10536: LD_INT 23
10538: PUSH
10539: LD_INT 24
10541: PUSH
10542: LD_INT 25
10544: PUSH
10545: LD_INT 26
10547: PUSH
10548: LD_INT 27
10550: PUSH
10551: LD_INT 28
10553: PUSH
10554: LD_INT 29
10556: PUSH
10557: LD_INT 30
10559: PUSH
10560: LD_INT 31
10562: PUSH
10563: LD_INT 32
10565: PUSH
10566: LD_INT 33
10568: PUSH
10569: LD_INT 34
10571: PUSH
10572: LD_INT 35
10574: PUSH
10575: LD_INT 36
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: LD_INT 101
10618: PUSH
10619: LD_INT 102
10621: PUSH
10622: LD_INT 103
10624: PUSH
10625: LD_INT 104
10627: PUSH
10628: LD_INT 105
10630: PUSH
10631: LD_INT 106
10633: PUSH
10634: LD_INT 107
10636: PUSH
10637: LD_INT 108
10639: PUSH
10640: LD_INT 109
10642: PUSH
10643: LD_INT 110
10645: PUSH
10646: LD_INT 111
10648: PUSH
10649: LD_INT 112
10651: PUSH
10652: LD_INT 113
10654: PUSH
10655: LD_INT 114
10657: PUSH
10658: LD_INT 115
10660: PUSH
10661: LD_INT 116
10663: PUSH
10664: LD_INT 117
10666: PUSH
10667: LD_INT 118
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: ST_TO_ADDR
// if result then
10694: LD_VAR 0 2
10698: IFFALSE 11484
// begin normal :=  ;
10700: LD_ADDR_VAR 0 5
10704: PUSH
10705: LD_STRING 
10707: ST_TO_ADDR
// hardcore :=  ;
10708: LD_ADDR_VAR 0 6
10712: PUSH
10713: LD_STRING 
10715: ST_TO_ADDR
// active :=  ;
10716: LD_ADDR_VAR 0 7
10720: PUSH
10721: LD_STRING 
10723: ST_TO_ADDR
// for i = 1 to normalCounter do
10724: LD_ADDR_VAR 0 8
10728: PUSH
10729: DOUBLE
10730: LD_INT 1
10732: DEC
10733: ST_TO_ADDR
10734: LD_EXP 26
10738: PUSH
10739: FOR_TO
10740: IFFALSE 10841
// begin tmp := 0 ;
10742: LD_ADDR_VAR 0 3
10746: PUSH
10747: LD_STRING 0
10749: ST_TO_ADDR
// if result [ 1 ] then
10750: LD_VAR 0 2
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: IFFALSE 10823
// if result [ 1 ] [ 1 ] = i then
10760: LD_VAR 0 2
10764: PUSH
10765: LD_INT 1
10767: ARRAY
10768: PUSH
10769: LD_INT 1
10771: ARRAY
10772: PUSH
10773: LD_VAR 0 8
10777: EQUAL
10778: IFFALSE 10823
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10780: LD_ADDR_VAR 0 2
10784: PUSH
10785: LD_VAR 0 2
10789: PPUSH
10790: LD_INT 1
10792: PPUSH
10793: LD_VAR 0 2
10797: PUSH
10798: LD_INT 1
10800: ARRAY
10801: PPUSH
10802: LD_INT 1
10804: PPUSH
10805: CALL_OW 3
10809: PPUSH
10810: CALL_OW 1
10814: ST_TO_ADDR
// tmp := 1 ;
10815: LD_ADDR_VAR 0 3
10819: PUSH
10820: LD_STRING 1
10822: ST_TO_ADDR
// end ; normal := normal & tmp ;
10823: LD_ADDR_VAR 0 5
10827: PUSH
10828: LD_VAR 0 5
10832: PUSH
10833: LD_VAR 0 3
10837: STR
10838: ST_TO_ADDR
// end ;
10839: GO 10739
10841: POP
10842: POP
// for i = 1 to hardcoreCounter do
10843: LD_ADDR_VAR 0 8
10847: PUSH
10848: DOUBLE
10849: LD_INT 1
10851: DEC
10852: ST_TO_ADDR
10853: LD_EXP 27
10857: PUSH
10858: FOR_TO
10859: IFFALSE 10964
// begin tmp := 0 ;
10861: LD_ADDR_VAR 0 3
10865: PUSH
10866: LD_STRING 0
10868: ST_TO_ADDR
// if result [ 2 ] then
10869: LD_VAR 0 2
10873: PUSH
10874: LD_INT 2
10876: ARRAY
10877: IFFALSE 10946
// if result [ 2 ] [ 1 ] = 100 + i then
10879: LD_VAR 0 2
10883: PUSH
10884: LD_INT 2
10886: ARRAY
10887: PUSH
10888: LD_INT 1
10890: ARRAY
10891: PUSH
10892: LD_INT 100
10894: PUSH
10895: LD_VAR 0 8
10899: PLUS
10900: EQUAL
10901: IFFALSE 10946
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10903: LD_ADDR_VAR 0 2
10907: PUSH
10908: LD_VAR 0 2
10912: PPUSH
10913: LD_INT 2
10915: PPUSH
10916: LD_VAR 0 2
10920: PUSH
10921: LD_INT 2
10923: ARRAY
10924: PPUSH
10925: LD_INT 1
10927: PPUSH
10928: CALL_OW 3
10932: PPUSH
10933: CALL_OW 1
10937: ST_TO_ADDR
// tmp := 1 ;
10938: LD_ADDR_VAR 0 3
10942: PUSH
10943: LD_STRING 1
10945: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10946: LD_ADDR_VAR 0 6
10950: PUSH
10951: LD_VAR 0 6
10955: PUSH
10956: LD_VAR 0 3
10960: STR
10961: ST_TO_ADDR
// end ;
10962: GO 10858
10964: POP
10965: POP
// if isGameLoad then
10966: LD_VAR 0 1
10970: IFFALSE 11445
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10972: LD_ADDR_VAR 0 4
10976: PUSH
10977: LD_EXP 30
10981: PUSH
10982: LD_EXP 29
10986: PUSH
10987: LD_EXP 31
10991: PUSH
10992: LD_EXP 28
10996: PUSH
10997: LD_EXP 32
11001: PUSH
11002: LD_EXP 33
11006: PUSH
11007: LD_EXP 34
11011: PUSH
11012: LD_EXP 35
11016: PUSH
11017: LD_EXP 36
11021: PUSH
11022: LD_EXP 37
11026: PUSH
11027: LD_EXP 38
11031: PUSH
11032: LD_EXP 39
11036: PUSH
11037: LD_EXP 40
11041: PUSH
11042: LD_EXP 41
11046: PUSH
11047: LD_EXP 49
11051: PUSH
11052: LD_EXP 50
11056: PUSH
11057: LD_EXP 51
11061: PUSH
11062: LD_EXP 52
11066: PUSH
11067: LD_EXP 54
11071: PUSH
11072: LD_EXP 55
11076: PUSH
11077: LD_EXP 56
11081: PUSH
11082: LD_EXP 59
11086: PUSH
11087: LD_EXP 61
11091: PUSH
11092: LD_EXP 62
11096: PUSH
11097: LD_EXP 63
11101: PUSH
11102: LD_EXP 65
11106: PUSH
11107: LD_EXP 66
11111: PUSH
11112: LD_EXP 69
11116: PUSH
11117: LD_EXP 70
11121: PUSH
11122: LD_EXP 71
11126: PUSH
11127: LD_EXP 72
11131: PUSH
11132: LD_EXP 73
11136: PUSH
11137: LD_EXP 74
11141: PUSH
11142: LD_EXP 75
11146: PUSH
11147: LD_EXP 76
11151: PUSH
11152: LD_EXP 77
11156: PUSH
11157: LD_EXP 42
11161: PUSH
11162: LD_EXP 43
11166: PUSH
11167: LD_EXP 46
11171: PUSH
11172: LD_EXP 47
11176: PUSH
11177: LD_EXP 48
11181: PUSH
11182: LD_EXP 44
11186: PUSH
11187: LD_EXP 45
11191: PUSH
11192: LD_EXP 53
11196: PUSH
11197: LD_EXP 57
11201: PUSH
11202: LD_EXP 58
11206: PUSH
11207: LD_EXP 60
11211: PUSH
11212: LD_EXP 64
11216: PUSH
11217: LD_EXP 67
11221: PUSH
11222: LD_EXP 68
11226: PUSH
11227: LD_EXP 78
11231: PUSH
11232: LD_EXP 79
11236: PUSH
11237: LD_EXP 80
11241: PUSH
11242: LD_EXP 81
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: ST_TO_ADDR
// tmp :=  ;
11303: LD_ADDR_VAR 0 3
11307: PUSH
11308: LD_STRING 
11310: ST_TO_ADDR
// for i = 1 to normalCounter do
11311: LD_ADDR_VAR 0 8
11315: PUSH
11316: DOUBLE
11317: LD_INT 1
11319: DEC
11320: ST_TO_ADDR
11321: LD_EXP 26
11325: PUSH
11326: FOR_TO
11327: IFFALSE 11363
// begin if flags [ i ] then
11329: LD_VAR 0 4
11333: PUSH
11334: LD_VAR 0 8
11338: ARRAY
11339: IFFALSE 11361
// tmp := tmp & i & ; ;
11341: LD_ADDR_VAR 0 3
11345: PUSH
11346: LD_VAR 0 3
11350: PUSH
11351: LD_VAR 0 8
11355: STR
11356: PUSH
11357: LD_STRING ;
11359: STR
11360: ST_TO_ADDR
// end ;
11361: GO 11326
11363: POP
11364: POP
// for i = 1 to hardcoreCounter do
11365: LD_ADDR_VAR 0 8
11369: PUSH
11370: DOUBLE
11371: LD_INT 1
11373: DEC
11374: ST_TO_ADDR
11375: LD_EXP 27
11379: PUSH
11380: FOR_TO
11381: IFFALSE 11427
// begin if flags [ normalCounter + i ] then
11383: LD_VAR 0 4
11387: PUSH
11388: LD_EXP 26
11392: PUSH
11393: LD_VAR 0 8
11397: PLUS
11398: ARRAY
11399: IFFALSE 11425
// tmp := tmp & ( 100 + i ) & ; ;
11401: LD_ADDR_VAR 0 3
11405: PUSH
11406: LD_VAR 0 3
11410: PUSH
11411: LD_INT 100
11413: PUSH
11414: LD_VAR 0 8
11418: PLUS
11419: STR
11420: PUSH
11421: LD_STRING ;
11423: STR
11424: ST_TO_ADDR
// end ;
11425: GO 11380
11427: POP
11428: POP
// if tmp then
11429: LD_VAR 0 3
11433: IFFALSE 11445
// active := tmp ;
11435: LD_ADDR_VAR 0 7
11439: PUSH
11440: LD_VAR 0 3
11444: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11445: LD_STRING getStreamItemsFromMission("
11447: PUSH
11448: LD_VAR 0 5
11452: STR
11453: PUSH
11454: LD_STRING ","
11456: STR
11457: PUSH
11458: LD_VAR 0 6
11462: STR
11463: PUSH
11464: LD_STRING ","
11466: STR
11467: PUSH
11468: LD_VAR 0 7
11472: STR
11473: PUSH
11474: LD_STRING ")
11476: STR
11477: PPUSH
11478: CALL_OW 559
// end else
11482: GO 11491
// ToLua ( getStreamItemsFromMission("","","") ) ;
11484: LD_STRING getStreamItemsFromMission("","","")
11486: PPUSH
11487: CALL_OW 559
// end ;
11491: LD_VAR 0 2
11495: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11496: LD_EXP 25
11500: PUSH
11501: LD_EXP 30
11505: AND
11506: IFFALSE 11630
11508: GO 11510
11510: DISABLE
11511: LD_INT 0
11513: PPUSH
11514: PPUSH
// begin enable ;
11515: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11516: LD_ADDR_VAR 0 2
11520: PUSH
11521: LD_INT 22
11523: PUSH
11524: LD_OWVAR 2
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 2
11535: PUSH
11536: LD_INT 34
11538: PUSH
11539: LD_INT 7
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 34
11548: PUSH
11549: LD_INT 45
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 34
11558: PUSH
11559: LD_INT 28
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 34
11568: PUSH
11569: LD_INT 47
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 69
11591: ST_TO_ADDR
// if not tmp then
11592: LD_VAR 0 2
11596: NOT
11597: IFFALSE 11601
// exit ;
11599: GO 11630
// for i in tmp do
11601: LD_ADDR_VAR 0 1
11605: PUSH
11606: LD_VAR 0 2
11610: PUSH
11611: FOR_IN
11612: IFFALSE 11628
// begin SetLives ( i , 0 ) ;
11614: LD_VAR 0 1
11618: PPUSH
11619: LD_INT 0
11621: PPUSH
11622: CALL_OW 234
// end ;
11626: GO 11611
11628: POP
11629: POP
// end ;
11630: PPOPN 2
11632: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11633: LD_EXP 25
11637: PUSH
11638: LD_EXP 31
11642: AND
11643: IFFALSE 11727
11645: GO 11647
11647: DISABLE
11648: LD_INT 0
11650: PPUSH
11651: PPUSH
// begin enable ;
11652: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11653: LD_ADDR_VAR 0 2
11657: PUSH
11658: LD_INT 22
11660: PUSH
11661: LD_OWVAR 2
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 32
11672: PUSH
11673: LD_INT 3
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PPUSH
11684: CALL_OW 69
11688: ST_TO_ADDR
// if not tmp then
11689: LD_VAR 0 2
11693: NOT
11694: IFFALSE 11698
// exit ;
11696: GO 11727
// for i in tmp do
11698: LD_ADDR_VAR 0 1
11702: PUSH
11703: LD_VAR 0 2
11707: PUSH
11708: FOR_IN
11709: IFFALSE 11725
// begin SetLives ( i , 0 ) ;
11711: LD_VAR 0 1
11715: PPUSH
11716: LD_INT 0
11718: PPUSH
11719: CALL_OW 234
// end ;
11723: GO 11708
11725: POP
11726: POP
// end ;
11727: PPOPN 2
11729: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11730: LD_EXP 25
11734: PUSH
11735: LD_EXP 28
11739: AND
11740: IFFALSE 11833
11742: GO 11744
11744: DISABLE
11745: LD_INT 0
11747: PPUSH
// begin enable ;
11748: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11749: LD_ADDR_VAR 0 1
11753: PUSH
11754: LD_INT 22
11756: PUSH
11757: LD_OWVAR 2
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 2
11768: PUSH
11769: LD_INT 25
11771: PUSH
11772: LD_INT 5
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 25
11781: PUSH
11782: LD_INT 9
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 25
11791: PUSH
11792: LD_INT 8
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PPUSH
11809: CALL_OW 69
11813: PUSH
11814: FOR_IN
11815: IFFALSE 11831
// begin SetClass ( i , 1 ) ;
11817: LD_VAR 0 1
11821: PPUSH
11822: LD_INT 1
11824: PPUSH
11825: CALL_OW 336
// end ;
11829: GO 11814
11831: POP
11832: POP
// end ;
11833: PPOPN 1
11835: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11836: LD_EXP 25
11840: PUSH
11841: LD_EXP 29
11845: AND
11846: PUSH
11847: LD_OWVAR 65
11851: PUSH
11852: LD_INT 7
11854: LESS
11855: AND
11856: IFFALSE 11870
11858: GO 11860
11860: DISABLE
// begin enable ;
11861: ENABLE
// game_speed := 7 ;
11862: LD_ADDR_OWVAR 65
11866: PUSH
11867: LD_INT 7
11869: ST_TO_ADDR
// end ;
11870: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11871: LD_EXP 25
11875: PUSH
11876: LD_EXP 32
11880: AND
11881: IFFALSE 12083
11883: GO 11885
11885: DISABLE
11886: LD_INT 0
11888: PPUSH
11889: PPUSH
11890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11891: LD_ADDR_VAR 0 3
11895: PUSH
11896: LD_INT 81
11898: PUSH
11899: LD_OWVAR 2
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 21
11910: PUSH
11911: LD_INT 1
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PPUSH
11922: CALL_OW 69
11926: ST_TO_ADDR
// if not tmp then
11927: LD_VAR 0 3
11931: NOT
11932: IFFALSE 11936
// exit ;
11934: GO 12083
// if tmp > 5 then
11936: LD_VAR 0 3
11940: PUSH
11941: LD_INT 5
11943: GREATER
11944: IFFALSE 11956
// k := 5 else
11946: LD_ADDR_VAR 0 2
11950: PUSH
11951: LD_INT 5
11953: ST_TO_ADDR
11954: GO 11966
// k := tmp ;
11956: LD_ADDR_VAR 0 2
11960: PUSH
11961: LD_VAR 0 3
11965: ST_TO_ADDR
// for i := 1 to k do
11966: LD_ADDR_VAR 0 1
11970: PUSH
11971: DOUBLE
11972: LD_INT 1
11974: DEC
11975: ST_TO_ADDR
11976: LD_VAR 0 2
11980: PUSH
11981: FOR_TO
11982: IFFALSE 12081
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11984: LD_VAR 0 3
11988: PUSH
11989: LD_VAR 0 1
11993: ARRAY
11994: PPUSH
11995: LD_VAR 0 1
11999: PUSH
12000: LD_INT 4
12002: MOD
12003: PUSH
12004: LD_INT 1
12006: PLUS
12007: PPUSH
12008: CALL_OW 259
12012: PUSH
12013: LD_INT 10
12015: LESS
12016: IFFALSE 12079
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12018: LD_VAR 0 3
12022: PUSH
12023: LD_VAR 0 1
12027: ARRAY
12028: PPUSH
12029: LD_VAR 0 1
12033: PUSH
12034: LD_INT 4
12036: MOD
12037: PUSH
12038: LD_INT 1
12040: PLUS
12041: PPUSH
12042: LD_VAR 0 3
12046: PUSH
12047: LD_VAR 0 1
12051: ARRAY
12052: PPUSH
12053: LD_VAR 0 1
12057: PUSH
12058: LD_INT 4
12060: MOD
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: PPUSH
12066: CALL_OW 259
12070: PUSH
12071: LD_INT 1
12073: PLUS
12074: PPUSH
12075: CALL_OW 237
12079: GO 11981
12081: POP
12082: POP
// end ;
12083: PPOPN 3
12085: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12086: LD_EXP 25
12090: PUSH
12091: LD_EXP 33
12095: AND
12096: IFFALSE 12116
12098: GO 12100
12100: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12101: LD_INT 4
12103: PPUSH
12104: LD_OWVAR 2
12108: PPUSH
12109: LD_INT 0
12111: PPUSH
12112: CALL_OW 324
12116: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12117: LD_EXP 25
12121: PUSH
12122: LD_EXP 62
12126: AND
12127: IFFALSE 12147
12129: GO 12131
12131: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12132: LD_INT 19
12134: PPUSH
12135: LD_OWVAR 2
12139: PPUSH
12140: LD_INT 0
12142: PPUSH
12143: CALL_OW 324
12147: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12148: LD_EXP 25
12152: PUSH
12153: LD_EXP 34
12157: AND
12158: IFFALSE 12260
12160: GO 12162
12162: DISABLE
12163: LD_INT 0
12165: PPUSH
12166: PPUSH
// begin enable ;
12167: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12168: LD_ADDR_VAR 0 2
12172: PUSH
12173: LD_INT 22
12175: PUSH
12176: LD_OWVAR 2
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 2
12187: PUSH
12188: LD_INT 34
12190: PUSH
12191: LD_INT 11
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 34
12200: PUSH
12201: LD_INT 30
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: LIST
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PPUSH
12217: CALL_OW 69
12221: ST_TO_ADDR
// if not tmp then
12222: LD_VAR 0 2
12226: NOT
12227: IFFALSE 12231
// exit ;
12229: GO 12260
// for i in tmp do
12231: LD_ADDR_VAR 0 1
12235: PUSH
12236: LD_VAR 0 2
12240: PUSH
12241: FOR_IN
12242: IFFALSE 12258
// begin SetLives ( i , 0 ) ;
12244: LD_VAR 0 1
12248: PPUSH
12249: LD_INT 0
12251: PPUSH
12252: CALL_OW 234
// end ;
12256: GO 12241
12258: POP
12259: POP
// end ;
12260: PPOPN 2
12262: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12263: LD_EXP 25
12267: PUSH
12268: LD_EXP 35
12272: AND
12273: IFFALSE 12293
12275: GO 12277
12277: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12278: LD_INT 32
12280: PPUSH
12281: LD_OWVAR 2
12285: PPUSH
12286: LD_INT 0
12288: PPUSH
12289: CALL_OW 324
12293: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12294: LD_EXP 25
12298: PUSH
12299: LD_EXP 36
12303: AND
12304: IFFALSE 12485
12306: GO 12308
12308: DISABLE
12309: LD_INT 0
12311: PPUSH
12312: PPUSH
12313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12314: LD_ADDR_VAR 0 2
12318: PUSH
12319: LD_INT 22
12321: PUSH
12322: LD_OWVAR 2
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 33
12333: PUSH
12334: LD_INT 3
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PPUSH
12345: CALL_OW 69
12349: ST_TO_ADDR
// if not tmp then
12350: LD_VAR 0 2
12354: NOT
12355: IFFALSE 12359
// exit ;
12357: GO 12485
// side := 0 ;
12359: LD_ADDR_VAR 0 3
12363: PUSH
12364: LD_INT 0
12366: ST_TO_ADDR
// for i := 1 to 8 do
12367: LD_ADDR_VAR 0 1
12371: PUSH
12372: DOUBLE
12373: LD_INT 1
12375: DEC
12376: ST_TO_ADDR
12377: LD_INT 8
12379: PUSH
12380: FOR_TO
12381: IFFALSE 12429
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12383: LD_OWVAR 2
12387: PUSH
12388: LD_VAR 0 1
12392: NONEQUAL
12393: PUSH
12394: LD_OWVAR 2
12398: PPUSH
12399: LD_VAR 0 1
12403: PPUSH
12404: CALL_OW 81
12408: PUSH
12409: LD_INT 2
12411: EQUAL
12412: AND
12413: IFFALSE 12427
// begin side := i ;
12415: LD_ADDR_VAR 0 3
12419: PUSH
12420: LD_VAR 0 1
12424: ST_TO_ADDR
// break ;
12425: GO 12429
// end ;
12427: GO 12380
12429: POP
12430: POP
// if not side then
12431: LD_VAR 0 3
12435: NOT
12436: IFFALSE 12440
// exit ;
12438: GO 12485
// for i := 1 to tmp do
12440: LD_ADDR_VAR 0 1
12444: PUSH
12445: DOUBLE
12446: LD_INT 1
12448: DEC
12449: ST_TO_ADDR
12450: LD_VAR 0 2
12454: PUSH
12455: FOR_TO
12456: IFFALSE 12483
// if Prob ( 60 ) then
12458: LD_INT 60
12460: PPUSH
12461: CALL_OW 13
12465: IFFALSE 12481
// SetSide ( i , side ) ;
12467: LD_VAR 0 1
12471: PPUSH
12472: LD_VAR 0 3
12476: PPUSH
12477: CALL_OW 235
12481: GO 12455
12483: POP
12484: POP
// end ;
12485: PPOPN 3
12487: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12488: LD_EXP 25
12492: PUSH
12493: LD_EXP 38
12497: AND
12498: IFFALSE 12617
12500: GO 12502
12502: DISABLE
12503: LD_INT 0
12505: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12506: LD_ADDR_VAR 0 1
12510: PUSH
12511: LD_INT 22
12513: PUSH
12514: LD_OWVAR 2
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 21
12525: PUSH
12526: LD_INT 1
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PUSH
12533: LD_INT 3
12535: PUSH
12536: LD_INT 23
12538: PUSH
12539: LD_INT 0
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: LIST
12554: PPUSH
12555: CALL_OW 69
12559: PUSH
12560: FOR_IN
12561: IFFALSE 12615
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12563: LD_VAR 0 1
12567: PPUSH
12568: CALL_OW 257
12572: PUSH
12573: LD_INT 1
12575: PUSH
12576: LD_INT 2
12578: PUSH
12579: LD_INT 3
12581: PUSH
12582: LD_INT 4
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: IN
12591: IFFALSE 12613
// SetClass ( un , rand ( 1 , 4 ) ) ;
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_INT 1
12600: PPUSH
12601: LD_INT 4
12603: PPUSH
12604: CALL_OW 12
12608: PPUSH
12609: CALL_OW 336
12613: GO 12560
12615: POP
12616: POP
// end ;
12617: PPOPN 1
12619: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12620: LD_EXP 25
12624: PUSH
12625: LD_EXP 37
12629: AND
12630: IFFALSE 12709
12632: GO 12634
12634: DISABLE
12635: LD_INT 0
12637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12638: LD_ADDR_VAR 0 1
12642: PUSH
12643: LD_INT 22
12645: PUSH
12646: LD_OWVAR 2
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 21
12657: PUSH
12658: LD_INT 3
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PPUSH
12669: CALL_OW 69
12673: ST_TO_ADDR
// if not tmp then
12674: LD_VAR 0 1
12678: NOT
12679: IFFALSE 12683
// exit ;
12681: GO 12709
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12683: LD_VAR 0 1
12687: PUSH
12688: LD_INT 1
12690: PPUSH
12691: LD_VAR 0 1
12695: PPUSH
12696: CALL_OW 12
12700: ARRAY
12701: PPUSH
12702: LD_INT 100
12704: PPUSH
12705: CALL_OW 234
// end ;
12709: PPOPN 1
12711: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12712: LD_EXP 25
12716: PUSH
12717: LD_EXP 39
12721: AND
12722: IFFALSE 12820
12724: GO 12726
12726: DISABLE
12727: LD_INT 0
12729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12730: LD_ADDR_VAR 0 1
12734: PUSH
12735: LD_INT 22
12737: PUSH
12738: LD_OWVAR 2
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 21
12749: PUSH
12750: LD_INT 1
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PPUSH
12761: CALL_OW 69
12765: ST_TO_ADDR
// if not tmp then
12766: LD_VAR 0 1
12770: NOT
12771: IFFALSE 12775
// exit ;
12773: GO 12820
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12775: LD_VAR 0 1
12779: PUSH
12780: LD_INT 1
12782: PPUSH
12783: LD_VAR 0 1
12787: PPUSH
12788: CALL_OW 12
12792: ARRAY
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: LD_INT 4
12799: PPUSH
12800: CALL_OW 12
12804: PPUSH
12805: LD_INT 3000
12807: PPUSH
12808: LD_INT 9000
12810: PPUSH
12811: CALL_OW 12
12815: PPUSH
12816: CALL_OW 492
// end ;
12820: PPOPN 1
12822: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12823: LD_EXP 25
12827: PUSH
12828: LD_EXP 40
12832: AND
12833: IFFALSE 12853
12835: GO 12837
12837: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12838: LD_INT 1
12840: PPUSH
12841: LD_OWVAR 2
12845: PPUSH
12846: LD_INT 0
12848: PPUSH
12849: CALL_OW 324
12853: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12854: LD_EXP 25
12858: PUSH
12859: LD_EXP 41
12863: AND
12864: IFFALSE 12947
12866: GO 12868
12868: DISABLE
12869: LD_INT 0
12871: PPUSH
12872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12873: LD_ADDR_VAR 0 2
12877: PUSH
12878: LD_INT 22
12880: PUSH
12881: LD_OWVAR 2
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 21
12892: PUSH
12893: LD_INT 3
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PPUSH
12904: CALL_OW 69
12908: ST_TO_ADDR
// if not tmp then
12909: LD_VAR 0 2
12913: NOT
12914: IFFALSE 12918
// exit ;
12916: GO 12947
// for i in tmp do
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: LD_VAR 0 2
12927: PUSH
12928: FOR_IN
12929: IFFALSE 12945
// SetBLevel ( i , 10 ) ;
12931: LD_VAR 0 1
12935: PPUSH
12936: LD_INT 10
12938: PPUSH
12939: CALL_OW 241
12943: GO 12928
12945: POP
12946: POP
// end ;
12947: PPOPN 2
12949: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12950: LD_EXP 25
12954: PUSH
12955: LD_EXP 42
12959: AND
12960: IFFALSE 13071
12962: GO 12964
12964: DISABLE
12965: LD_INT 0
12967: PPUSH
12968: PPUSH
12969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12970: LD_ADDR_VAR 0 3
12974: PUSH
12975: LD_INT 22
12977: PUSH
12978: LD_OWVAR 2
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PUSH
12987: LD_INT 25
12989: PUSH
12990: LD_INT 1
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PPUSH
13001: CALL_OW 69
13005: ST_TO_ADDR
// if not tmp then
13006: LD_VAR 0 3
13010: NOT
13011: IFFALSE 13015
// exit ;
13013: GO 13071
// un := tmp [ rand ( 1 , tmp ) ] ;
13015: LD_ADDR_VAR 0 2
13019: PUSH
13020: LD_VAR 0 3
13024: PUSH
13025: LD_INT 1
13027: PPUSH
13028: LD_VAR 0 3
13032: PPUSH
13033: CALL_OW 12
13037: ARRAY
13038: ST_TO_ADDR
// if Crawls ( un ) then
13039: LD_VAR 0 2
13043: PPUSH
13044: CALL_OW 318
13048: IFFALSE 13059
// ComWalk ( un ) ;
13050: LD_VAR 0 2
13054: PPUSH
13055: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13059: LD_VAR 0 2
13063: PPUSH
13064: LD_INT 5
13066: PPUSH
13067: CALL_OW 336
// end ;
13071: PPOPN 3
13073: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13074: LD_EXP 25
13078: PUSH
13079: LD_EXP 43
13083: AND
13084: PUSH
13085: LD_OWVAR 67
13089: PUSH
13090: LD_INT 4
13092: LESS
13093: AND
13094: IFFALSE 13113
13096: GO 13098
13098: DISABLE
// begin Difficulty := Difficulty + 1 ;
13099: LD_ADDR_OWVAR 67
13103: PUSH
13104: LD_OWVAR 67
13108: PUSH
13109: LD_INT 1
13111: PLUS
13112: ST_TO_ADDR
// end ;
13113: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13114: LD_EXP 25
13118: PUSH
13119: LD_EXP 44
13123: AND
13124: IFFALSE 13227
13126: GO 13128
13128: DISABLE
13129: LD_INT 0
13131: PPUSH
// begin for i := 1 to 5 do
13132: LD_ADDR_VAR 0 1
13136: PUSH
13137: DOUBLE
13138: LD_INT 1
13140: DEC
13141: ST_TO_ADDR
13142: LD_INT 5
13144: PUSH
13145: FOR_TO
13146: IFFALSE 13225
// begin uc_nation := nation_nature ;
13148: LD_ADDR_OWVAR 21
13152: PUSH
13153: LD_INT 0
13155: ST_TO_ADDR
// uc_side := 0 ;
13156: LD_ADDR_OWVAR 20
13160: PUSH
13161: LD_INT 0
13163: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13164: LD_ADDR_OWVAR 29
13168: PUSH
13169: LD_INT 12
13171: PUSH
13172: LD_INT 12
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: ST_TO_ADDR
// hc_agressivity := 20 ;
13179: LD_ADDR_OWVAR 35
13183: PUSH
13184: LD_INT 20
13186: ST_TO_ADDR
// hc_class := class_tiger ;
13187: LD_ADDR_OWVAR 28
13191: PUSH
13192: LD_INT 14
13194: ST_TO_ADDR
// hc_gallery :=  ;
13195: LD_ADDR_OWVAR 33
13199: PUSH
13200: LD_STRING 
13202: ST_TO_ADDR
// hc_name :=  ;
13203: LD_ADDR_OWVAR 26
13207: PUSH
13208: LD_STRING 
13210: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13211: CALL_OW 44
13215: PPUSH
13216: LD_INT 0
13218: PPUSH
13219: CALL_OW 51
// end ;
13223: GO 13145
13225: POP
13226: POP
// end ;
13227: PPOPN 1
13229: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13230: LD_EXP 25
13234: PUSH
13235: LD_EXP 45
13239: AND
13240: IFFALSE 13249
13242: GO 13244
13244: DISABLE
// StreamSibBomb ;
13245: CALL 13250 0 0
13249: END
// export function StreamSibBomb ; var i , x , y ; begin
13250: LD_INT 0
13252: PPUSH
13253: PPUSH
13254: PPUSH
13255: PPUSH
// result := false ;
13256: LD_ADDR_VAR 0 1
13260: PUSH
13261: LD_INT 0
13263: ST_TO_ADDR
// for i := 1 to 16 do
13264: LD_ADDR_VAR 0 2
13268: PUSH
13269: DOUBLE
13270: LD_INT 1
13272: DEC
13273: ST_TO_ADDR
13274: LD_INT 16
13276: PUSH
13277: FOR_TO
13278: IFFALSE 13477
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13280: LD_ADDR_VAR 0 3
13284: PUSH
13285: LD_INT 10
13287: PUSH
13288: LD_INT 20
13290: PUSH
13291: LD_INT 30
13293: PUSH
13294: LD_INT 40
13296: PUSH
13297: LD_INT 50
13299: PUSH
13300: LD_INT 60
13302: PUSH
13303: LD_INT 70
13305: PUSH
13306: LD_INT 80
13308: PUSH
13309: LD_INT 90
13311: PUSH
13312: LD_INT 100
13314: PUSH
13315: LD_INT 110
13317: PUSH
13318: LD_INT 120
13320: PUSH
13321: LD_INT 130
13323: PUSH
13324: LD_INT 140
13326: PUSH
13327: LD_INT 150
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 1
13349: PPUSH
13350: LD_INT 15
13352: PPUSH
13353: CALL_OW 12
13357: ARRAY
13358: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13359: LD_ADDR_VAR 0 4
13363: PUSH
13364: LD_INT 10
13366: PUSH
13367: LD_INT 20
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 40
13375: PUSH
13376: LD_INT 50
13378: PUSH
13379: LD_INT 60
13381: PUSH
13382: LD_INT 70
13384: PUSH
13385: LD_INT 80
13387: PUSH
13388: LD_INT 90
13390: PUSH
13391: LD_INT 100
13393: PUSH
13394: LD_INT 110
13396: PUSH
13397: LD_INT 120
13399: PUSH
13400: LD_INT 130
13402: PUSH
13403: LD_INT 140
13405: PUSH
13406: LD_INT 150
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: PUSH
13426: LD_INT 1
13428: PPUSH
13429: LD_INT 15
13431: PPUSH
13432: CALL_OW 12
13436: ARRAY
13437: ST_TO_ADDR
// if ValidHex ( x , y ) then
13438: LD_VAR 0 3
13442: PPUSH
13443: LD_VAR 0 4
13447: PPUSH
13448: CALL_OW 488
13452: IFFALSE 13475
// begin result := [ x , y ] ;
13454: LD_ADDR_VAR 0 1
13458: PUSH
13459: LD_VAR 0 3
13463: PUSH
13464: LD_VAR 0 4
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: ST_TO_ADDR
// break ;
13473: GO 13477
// end ; end ;
13475: GO 13277
13477: POP
13478: POP
// if result then
13479: LD_VAR 0 1
13483: IFFALSE 13543
// begin ToLua ( playSibBomb() ) ;
13485: LD_STRING playSibBomb()
13487: PPUSH
13488: CALL_OW 559
// wait ( 0 0$14 ) ;
13492: LD_INT 490
13494: PPUSH
13495: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13499: LD_VAR 0 1
13503: PUSH
13504: LD_INT 1
13506: ARRAY
13507: PPUSH
13508: LD_VAR 0 1
13512: PUSH
13513: LD_INT 2
13515: ARRAY
13516: PPUSH
13517: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13521: LD_VAR 0 1
13525: PUSH
13526: LD_INT 1
13528: ARRAY
13529: PPUSH
13530: LD_VAR 0 1
13534: PUSH
13535: LD_INT 2
13537: ARRAY
13538: PPUSH
13539: CALL_OW 429
// end ; end ;
13543: LD_VAR 0 1
13547: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13548: LD_EXP 25
13552: PUSH
13553: LD_EXP 47
13557: AND
13558: IFFALSE 13570
13560: GO 13562
13562: DISABLE
// YouLost (  ) ;
13563: LD_STRING 
13565: PPUSH
13566: CALL_OW 104
13570: END
// every 0 0$1 trigger StreamModeActive and sFog do
13571: LD_EXP 25
13575: PUSH
13576: LD_EXP 46
13580: AND
13581: IFFALSE 13595
13583: GO 13585
13585: DISABLE
// FogOff ( your_side ) ;
13586: LD_OWVAR 2
13590: PPUSH
13591: CALL_OW 344
13595: END
// every 0 0$1 trigger StreamModeActive and sSun do
13596: LD_EXP 25
13600: PUSH
13601: LD_EXP 48
13605: AND
13606: IFFALSE 13634
13608: GO 13610
13610: DISABLE
// begin solar_recharge_percent := 0 ;
13611: LD_ADDR_OWVAR 79
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13619: LD_INT 10500
13621: PPUSH
13622: CALL_OW 67
// solar_recharge_percent := 100 ;
13626: LD_ADDR_OWVAR 79
13630: PUSH
13631: LD_INT 100
13633: ST_TO_ADDR
// end ;
13634: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13635: LD_EXP 25
13639: PUSH
13640: LD_EXP 49
13644: AND
13645: IFFALSE 13884
13647: GO 13649
13649: DISABLE
13650: LD_INT 0
13652: PPUSH
13653: PPUSH
13654: PPUSH
// begin tmp := [ ] ;
13655: LD_ADDR_VAR 0 3
13659: PUSH
13660: EMPTY
13661: ST_TO_ADDR
// for i := 1 to 6 do
13662: LD_ADDR_VAR 0 1
13666: PUSH
13667: DOUBLE
13668: LD_INT 1
13670: DEC
13671: ST_TO_ADDR
13672: LD_INT 6
13674: PUSH
13675: FOR_TO
13676: IFFALSE 13781
// begin uc_nation := nation_nature ;
13678: LD_ADDR_OWVAR 21
13682: PUSH
13683: LD_INT 0
13685: ST_TO_ADDR
// uc_side := 0 ;
13686: LD_ADDR_OWVAR 20
13690: PUSH
13691: LD_INT 0
13693: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13694: LD_ADDR_OWVAR 29
13698: PUSH
13699: LD_INT 12
13701: PUSH
13702: LD_INT 12
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: ST_TO_ADDR
// hc_agressivity := 20 ;
13709: LD_ADDR_OWVAR 35
13713: PUSH
13714: LD_INT 20
13716: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13717: LD_ADDR_OWVAR 28
13721: PUSH
13722: LD_INT 17
13724: ST_TO_ADDR
// hc_gallery :=  ;
13725: LD_ADDR_OWVAR 33
13729: PUSH
13730: LD_STRING 
13732: ST_TO_ADDR
// hc_name :=  ;
13733: LD_ADDR_OWVAR 26
13737: PUSH
13738: LD_STRING 
13740: ST_TO_ADDR
// un := CreateHuman ;
13741: LD_ADDR_VAR 0 2
13745: PUSH
13746: CALL_OW 44
13750: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13751: LD_VAR 0 2
13755: PPUSH
13756: LD_INT 1
13758: PPUSH
13759: CALL_OW 51
// tmp := tmp ^ un ;
13763: LD_ADDR_VAR 0 3
13767: PUSH
13768: LD_VAR 0 3
13772: PUSH
13773: LD_VAR 0 2
13777: ADD
13778: ST_TO_ADDR
// end ;
13779: GO 13675
13781: POP
13782: POP
// repeat wait ( 0 0$1 ) ;
13783: LD_INT 35
13785: PPUSH
13786: CALL_OW 67
// for un in tmp do
13790: LD_ADDR_VAR 0 2
13794: PUSH
13795: LD_VAR 0 3
13799: PUSH
13800: FOR_IN
13801: IFFALSE 13875
// begin if IsDead ( un ) then
13803: LD_VAR 0 2
13807: PPUSH
13808: CALL_OW 301
13812: IFFALSE 13832
// begin tmp := tmp diff un ;
13814: LD_ADDR_VAR 0 3
13818: PUSH
13819: LD_VAR 0 3
13823: PUSH
13824: LD_VAR 0 2
13828: DIFF
13829: ST_TO_ADDR
// continue ;
13830: GO 13800
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13832: LD_VAR 0 2
13836: PPUSH
13837: LD_INT 3
13839: PUSH
13840: LD_INT 22
13842: PUSH
13843: LD_INT 0
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PPUSH
13854: CALL_OW 69
13858: PPUSH
13859: LD_VAR 0 2
13863: PPUSH
13864: CALL_OW 74
13868: PPUSH
13869: CALL_OW 115
// end ;
13873: GO 13800
13875: POP
13876: POP
// until not tmp ;
13877: LD_VAR 0 3
13881: NOT
13882: IFFALSE 13783
// end ;
13884: PPOPN 3
13886: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13887: LD_EXP 25
13891: PUSH
13892: LD_EXP 50
13896: AND
13897: IFFALSE 13951
13899: GO 13901
13901: DISABLE
// begin ToLua ( displayTroll(); ) ;
13902: LD_STRING displayTroll();
13904: PPUSH
13905: CALL_OW 559
// wait ( 3 3$00 ) ;
13909: LD_INT 6300
13911: PPUSH
13912: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13916: LD_STRING hideTroll();
13918: PPUSH
13919: CALL_OW 559
// wait ( 1 1$00 ) ;
13923: LD_INT 2100
13925: PPUSH
13926: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13930: LD_STRING displayTroll();
13932: PPUSH
13933: CALL_OW 559
// wait ( 1 1$00 ) ;
13937: LD_INT 2100
13939: PPUSH
13940: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13944: LD_STRING hideTroll();
13946: PPUSH
13947: CALL_OW 559
// end ;
13951: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13952: LD_EXP 25
13956: PUSH
13957: LD_EXP 51
13961: AND
13962: IFFALSE 14025
13964: GO 13966
13966: DISABLE
13967: LD_INT 0
13969: PPUSH
// begin p := 0 ;
13970: LD_ADDR_VAR 0 1
13974: PUSH
13975: LD_INT 0
13977: ST_TO_ADDR
// repeat game_speed := 1 ;
13978: LD_ADDR_OWVAR 65
13982: PUSH
13983: LD_INT 1
13985: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13986: LD_INT 35
13988: PPUSH
13989: CALL_OW 67
// p := p + 1 ;
13993: LD_ADDR_VAR 0 1
13997: PUSH
13998: LD_VAR 0 1
14002: PUSH
14003: LD_INT 1
14005: PLUS
14006: ST_TO_ADDR
// until p >= 60 ;
14007: LD_VAR 0 1
14011: PUSH
14012: LD_INT 60
14014: GREATEREQUAL
14015: IFFALSE 13978
// game_speed := 4 ;
14017: LD_ADDR_OWVAR 65
14021: PUSH
14022: LD_INT 4
14024: ST_TO_ADDR
// end ;
14025: PPOPN 1
14027: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14028: LD_EXP 25
14032: PUSH
14033: LD_EXP 52
14037: AND
14038: IFFALSE 14184
14040: GO 14042
14042: DISABLE
14043: LD_INT 0
14045: PPUSH
14046: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14047: LD_ADDR_VAR 0 1
14051: PUSH
14052: LD_INT 22
14054: PUSH
14055: LD_OWVAR 2
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 2
14066: PUSH
14067: LD_INT 30
14069: PUSH
14070: LD_INT 0
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 30
14079: PUSH
14080: LD_INT 1
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PPUSH
14096: CALL_OW 69
14100: ST_TO_ADDR
// if not depot then
14101: LD_VAR 0 1
14105: NOT
14106: IFFALSE 14110
// exit ;
14108: GO 14184
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14110: LD_ADDR_VAR 0 2
14114: PUSH
14115: LD_VAR 0 1
14119: PUSH
14120: LD_INT 1
14122: PPUSH
14123: LD_VAR 0 1
14127: PPUSH
14128: CALL_OW 12
14132: ARRAY
14133: PPUSH
14134: CALL_OW 274
14138: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14139: LD_VAR 0 2
14143: PPUSH
14144: LD_INT 1
14146: PPUSH
14147: LD_INT 0
14149: PPUSH
14150: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14154: LD_VAR 0 2
14158: PPUSH
14159: LD_INT 2
14161: PPUSH
14162: LD_INT 0
14164: PPUSH
14165: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14169: LD_VAR 0 2
14173: PPUSH
14174: LD_INT 3
14176: PPUSH
14177: LD_INT 0
14179: PPUSH
14180: CALL_OW 277
// end ;
14184: PPOPN 2
14186: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14187: LD_EXP 25
14191: PUSH
14192: LD_EXP 53
14196: AND
14197: IFFALSE 14294
14199: GO 14201
14201: DISABLE
14202: LD_INT 0
14204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14205: LD_ADDR_VAR 0 1
14209: PUSH
14210: LD_INT 22
14212: PUSH
14213: LD_OWVAR 2
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 21
14224: PUSH
14225: LD_INT 1
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PUSH
14232: LD_INT 3
14234: PUSH
14235: LD_INT 23
14237: PUSH
14238: LD_INT 0
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 69
14258: ST_TO_ADDR
// if not tmp then
14259: LD_VAR 0 1
14263: NOT
14264: IFFALSE 14268
// exit ;
14266: GO 14294
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14268: LD_VAR 0 1
14272: PUSH
14273: LD_INT 1
14275: PPUSH
14276: LD_VAR 0 1
14280: PPUSH
14281: CALL_OW 12
14285: ARRAY
14286: PPUSH
14287: LD_INT 200
14289: PPUSH
14290: CALL_OW 234
// end ;
14294: PPOPN 1
14296: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14297: LD_EXP 25
14301: PUSH
14302: LD_EXP 54
14306: AND
14307: IFFALSE 14386
14309: GO 14311
14311: DISABLE
14312: LD_INT 0
14314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14315: LD_ADDR_VAR 0 1
14319: PUSH
14320: LD_INT 22
14322: PUSH
14323: LD_OWVAR 2
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 21
14334: PUSH
14335: LD_INT 2
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PPUSH
14346: CALL_OW 69
14350: ST_TO_ADDR
// if not tmp then
14351: LD_VAR 0 1
14355: NOT
14356: IFFALSE 14360
// exit ;
14358: GO 14386
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14360: LD_VAR 0 1
14364: PUSH
14365: LD_INT 1
14367: PPUSH
14368: LD_VAR 0 1
14372: PPUSH
14373: CALL_OW 12
14377: ARRAY
14378: PPUSH
14379: LD_INT 60
14381: PPUSH
14382: CALL_OW 234
// end ;
14386: PPOPN 1
14388: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14389: LD_EXP 25
14393: PUSH
14394: LD_EXP 55
14398: AND
14399: IFFALSE 14498
14401: GO 14403
14403: DISABLE
14404: LD_INT 0
14406: PPUSH
14407: PPUSH
// begin enable ;
14408: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14409: LD_ADDR_VAR 0 1
14413: PUSH
14414: LD_INT 22
14416: PUSH
14417: LD_OWVAR 2
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 61
14428: PUSH
14429: EMPTY
14430: LIST
14431: PUSH
14432: LD_INT 33
14434: PUSH
14435: LD_INT 2
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: LIST
14446: PPUSH
14447: CALL_OW 69
14451: ST_TO_ADDR
// if not tmp then
14452: LD_VAR 0 1
14456: NOT
14457: IFFALSE 14461
// exit ;
14459: GO 14498
// for i in tmp do
14461: LD_ADDR_VAR 0 2
14465: PUSH
14466: LD_VAR 0 1
14470: PUSH
14471: FOR_IN
14472: IFFALSE 14496
// if IsControledBy ( i ) then
14474: LD_VAR 0 2
14478: PPUSH
14479: CALL_OW 312
14483: IFFALSE 14494
// ComUnlink ( i ) ;
14485: LD_VAR 0 2
14489: PPUSH
14490: CALL_OW 136
14494: GO 14471
14496: POP
14497: POP
// end ;
14498: PPOPN 2
14500: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14501: LD_EXP 25
14505: PUSH
14506: LD_EXP 56
14510: AND
14511: IFFALSE 14651
14513: GO 14515
14515: DISABLE
14516: LD_INT 0
14518: PPUSH
14519: PPUSH
// begin ToLua ( displayPowell(); ) ;
14520: LD_STRING displayPowell();
14522: PPUSH
14523: CALL_OW 559
// uc_side := 0 ;
14527: LD_ADDR_OWVAR 20
14531: PUSH
14532: LD_INT 0
14534: ST_TO_ADDR
// uc_nation := 2 ;
14535: LD_ADDR_OWVAR 21
14539: PUSH
14540: LD_INT 2
14542: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14543: LD_ADDR_OWVAR 37
14547: PUSH
14548: LD_INT 14
14550: ST_TO_ADDR
// vc_engine := engine_siberite ;
14551: LD_ADDR_OWVAR 39
14555: PUSH
14556: LD_INT 3
14558: ST_TO_ADDR
// vc_control := control_apeman ;
14559: LD_ADDR_OWVAR 38
14563: PUSH
14564: LD_INT 5
14566: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14567: LD_ADDR_OWVAR 40
14571: PUSH
14572: LD_INT 29
14574: ST_TO_ADDR
// un := CreateVehicle ;
14575: LD_ADDR_VAR 0 2
14579: PUSH
14580: CALL_OW 45
14584: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14585: LD_VAR 0 2
14589: PPUSH
14590: LD_INT 1
14592: PPUSH
14593: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14597: LD_INT 35
14599: PPUSH
14600: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14604: LD_VAR 0 2
14608: PPUSH
14609: LD_INT 22
14611: PUSH
14612: LD_OWVAR 2
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PPUSH
14621: CALL_OW 69
14625: PPUSH
14626: LD_VAR 0 2
14630: PPUSH
14631: CALL_OW 74
14635: PPUSH
14636: CALL_OW 115
// until IsDead ( un ) ;
14640: LD_VAR 0 2
14644: PPUSH
14645: CALL_OW 301
14649: IFFALSE 14597
// end ;
14651: PPOPN 2
14653: END
// every 0 0$1 trigger StreamModeActive and sStu do
14654: LD_EXP 25
14658: PUSH
14659: LD_EXP 64
14663: AND
14664: IFFALSE 14680
14666: GO 14668
14668: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14669: LD_STRING displayStucuk();
14671: PPUSH
14672: CALL_OW 559
// ResetFog ;
14676: CALL_OW 335
// end ;
14680: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14681: LD_EXP 25
14685: PUSH
14686: LD_EXP 57
14690: AND
14691: IFFALSE 14832
14693: GO 14695
14695: DISABLE
14696: LD_INT 0
14698: PPUSH
14699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14700: LD_ADDR_VAR 0 2
14704: PUSH
14705: LD_INT 22
14707: PUSH
14708: LD_OWVAR 2
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 21
14719: PUSH
14720: LD_INT 1
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PPUSH
14731: CALL_OW 69
14735: ST_TO_ADDR
// if not tmp then
14736: LD_VAR 0 2
14740: NOT
14741: IFFALSE 14745
// exit ;
14743: GO 14832
// un := tmp [ rand ( 1 , tmp ) ] ;
14745: LD_ADDR_VAR 0 1
14749: PUSH
14750: LD_VAR 0 2
14754: PUSH
14755: LD_INT 1
14757: PPUSH
14758: LD_VAR 0 2
14762: PPUSH
14763: CALL_OW 12
14767: ARRAY
14768: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14769: LD_VAR 0 1
14773: PPUSH
14774: LD_INT 0
14776: PPUSH
14777: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14781: LD_VAR 0 1
14785: PPUSH
14786: LD_OWVAR 3
14790: PUSH
14791: LD_VAR 0 1
14795: DIFF
14796: PPUSH
14797: LD_VAR 0 1
14801: PPUSH
14802: CALL_OW 74
14806: PPUSH
14807: CALL_OW 115
// wait ( 0 0$20 ) ;
14811: LD_INT 700
14813: PPUSH
14814: CALL_OW 67
// SetSide ( un , your_side ) ;
14818: LD_VAR 0 1
14822: PPUSH
14823: LD_OWVAR 2
14827: PPUSH
14828: CALL_OW 235
// end ;
14832: PPOPN 2
14834: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14835: LD_EXP 25
14839: PUSH
14840: LD_EXP 58
14844: AND
14845: IFFALSE 14951
14847: GO 14849
14849: DISABLE
14850: LD_INT 0
14852: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14853: LD_ADDR_VAR 0 1
14857: PUSH
14858: LD_INT 22
14860: PUSH
14861: LD_OWVAR 2
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 2
14872: PUSH
14873: LD_INT 30
14875: PUSH
14876: LD_INT 0
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 30
14885: PUSH
14886: LD_INT 1
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: LIST
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PPUSH
14902: CALL_OW 69
14906: ST_TO_ADDR
// if not depot then
14907: LD_VAR 0 1
14911: NOT
14912: IFFALSE 14916
// exit ;
14914: GO 14951
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14916: LD_VAR 0 1
14920: PUSH
14921: LD_INT 1
14923: ARRAY
14924: PPUSH
14925: CALL_OW 250
14929: PPUSH
14930: LD_VAR 0 1
14934: PUSH
14935: LD_INT 1
14937: ARRAY
14938: PPUSH
14939: CALL_OW 251
14943: PPUSH
14944: LD_INT 70
14946: PPUSH
14947: CALL_OW 495
// end ;
14951: PPOPN 1
14953: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14954: LD_EXP 25
14958: PUSH
14959: LD_EXP 59
14963: AND
14964: IFFALSE 15175
14966: GO 14968
14968: DISABLE
14969: LD_INT 0
14971: PPUSH
14972: PPUSH
14973: PPUSH
14974: PPUSH
14975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14976: LD_ADDR_VAR 0 5
14980: PUSH
14981: LD_INT 22
14983: PUSH
14984: LD_OWVAR 2
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 21
14995: PUSH
14996: LD_INT 1
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PPUSH
15007: CALL_OW 69
15011: ST_TO_ADDR
// if not tmp then
15012: LD_VAR 0 5
15016: NOT
15017: IFFALSE 15021
// exit ;
15019: GO 15175
// for i in tmp do
15021: LD_ADDR_VAR 0 1
15025: PUSH
15026: LD_VAR 0 5
15030: PUSH
15031: FOR_IN
15032: IFFALSE 15173
// begin d := rand ( 0 , 5 ) ;
15034: LD_ADDR_VAR 0 4
15038: PUSH
15039: LD_INT 0
15041: PPUSH
15042: LD_INT 5
15044: PPUSH
15045: CALL_OW 12
15049: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15050: LD_ADDR_VAR 0 2
15054: PUSH
15055: LD_VAR 0 1
15059: PPUSH
15060: CALL_OW 250
15064: PPUSH
15065: LD_VAR 0 4
15069: PPUSH
15070: LD_INT 3
15072: PPUSH
15073: LD_INT 12
15075: PPUSH
15076: CALL_OW 12
15080: PPUSH
15081: CALL_OW 272
15085: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15086: LD_ADDR_VAR 0 3
15090: PUSH
15091: LD_VAR 0 1
15095: PPUSH
15096: CALL_OW 251
15100: PPUSH
15101: LD_VAR 0 4
15105: PPUSH
15106: LD_INT 3
15108: PPUSH
15109: LD_INT 12
15111: PPUSH
15112: CALL_OW 12
15116: PPUSH
15117: CALL_OW 273
15121: ST_TO_ADDR
// if ValidHex ( x , y ) then
15122: LD_VAR 0 2
15126: PPUSH
15127: LD_VAR 0 3
15131: PPUSH
15132: CALL_OW 488
15136: IFFALSE 15171
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15138: LD_VAR 0 1
15142: PPUSH
15143: LD_VAR 0 2
15147: PPUSH
15148: LD_VAR 0 3
15152: PPUSH
15153: LD_INT 3
15155: PPUSH
15156: LD_INT 6
15158: PPUSH
15159: CALL_OW 12
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL_OW 483
// end ;
15171: GO 15031
15173: POP
15174: POP
// end ;
15175: PPOPN 5
15177: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15178: LD_EXP 25
15182: PUSH
15183: LD_EXP 60
15187: AND
15188: IFFALSE 15282
15190: GO 15192
15192: DISABLE
15193: LD_INT 0
15195: PPUSH
15196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15197: LD_ADDR_VAR 0 2
15201: PUSH
15202: LD_INT 22
15204: PUSH
15205: LD_OWVAR 2
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 32
15216: PUSH
15217: LD_INT 1
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 21
15226: PUSH
15227: LD_INT 2
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: PPUSH
15239: CALL_OW 69
15243: ST_TO_ADDR
// if not tmp then
15244: LD_VAR 0 2
15248: NOT
15249: IFFALSE 15253
// exit ;
15251: GO 15282
// for i in tmp do
15253: LD_ADDR_VAR 0 1
15257: PUSH
15258: LD_VAR 0 2
15262: PUSH
15263: FOR_IN
15264: IFFALSE 15280
// SetFuel ( i , 0 ) ;
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_INT 0
15273: PPUSH
15274: CALL_OW 240
15278: GO 15263
15280: POP
15281: POP
// end ;
15282: PPOPN 2
15284: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15285: LD_EXP 25
15289: PUSH
15290: LD_EXP 61
15294: AND
15295: IFFALSE 15361
15297: GO 15299
15299: DISABLE
15300: LD_INT 0
15302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15303: LD_ADDR_VAR 0 1
15307: PUSH
15308: LD_INT 22
15310: PUSH
15311: LD_OWVAR 2
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: LD_INT 30
15322: PUSH
15323: LD_INT 29
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PPUSH
15334: CALL_OW 69
15338: ST_TO_ADDR
// if not tmp then
15339: LD_VAR 0 1
15343: NOT
15344: IFFALSE 15348
// exit ;
15346: GO 15361
// DestroyUnit ( tmp [ 1 ] ) ;
15348: LD_VAR 0 1
15352: PUSH
15353: LD_INT 1
15355: ARRAY
15356: PPUSH
15357: CALL_OW 65
// end ;
15361: PPOPN 1
15363: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15364: LD_EXP 25
15368: PUSH
15369: LD_EXP 63
15373: AND
15374: IFFALSE 15503
15376: GO 15378
15378: DISABLE
15379: LD_INT 0
15381: PPUSH
// begin uc_side := 0 ;
15382: LD_ADDR_OWVAR 20
15386: PUSH
15387: LD_INT 0
15389: ST_TO_ADDR
// uc_nation := nation_arabian ;
15390: LD_ADDR_OWVAR 21
15394: PUSH
15395: LD_INT 2
15397: ST_TO_ADDR
// hc_gallery :=  ;
15398: LD_ADDR_OWVAR 33
15402: PUSH
15403: LD_STRING 
15405: ST_TO_ADDR
// hc_name :=  ;
15406: LD_ADDR_OWVAR 26
15410: PUSH
15411: LD_STRING 
15413: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15414: LD_INT 1
15416: PPUSH
15417: LD_INT 11
15419: PPUSH
15420: LD_INT 10
15422: PPUSH
15423: CALL_OW 380
// un := CreateHuman ;
15427: LD_ADDR_VAR 0 1
15431: PUSH
15432: CALL_OW 44
15436: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15437: LD_VAR 0 1
15441: PPUSH
15442: LD_INT 1
15444: PPUSH
15445: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15449: LD_INT 35
15451: PPUSH
15452: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15456: LD_VAR 0 1
15460: PPUSH
15461: LD_INT 22
15463: PUSH
15464: LD_OWVAR 2
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PPUSH
15473: CALL_OW 69
15477: PPUSH
15478: LD_VAR 0 1
15482: PPUSH
15483: CALL_OW 74
15487: PPUSH
15488: CALL_OW 115
// until IsDead ( un ) ;
15492: LD_VAR 0 1
15496: PPUSH
15497: CALL_OW 301
15501: IFFALSE 15449
// end ;
15503: PPOPN 1
15505: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15506: LD_EXP 25
15510: PUSH
15511: LD_EXP 65
15515: AND
15516: IFFALSE 15528
15518: GO 15520
15520: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15521: LD_STRING earthquake(getX(game), 0, 32)
15523: PPUSH
15524: CALL_OW 559
15528: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15529: LD_EXP 25
15533: PUSH
15534: LD_EXP 66
15538: AND
15539: IFFALSE 15630
15541: GO 15543
15543: DISABLE
15544: LD_INT 0
15546: PPUSH
// begin enable ;
15547: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15548: LD_ADDR_VAR 0 1
15552: PUSH
15553: LD_INT 22
15555: PUSH
15556: LD_OWVAR 2
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 21
15567: PUSH
15568: LD_INT 2
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: LD_INT 33
15577: PUSH
15578: LD_INT 3
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: LIST
15589: PPUSH
15590: CALL_OW 69
15594: ST_TO_ADDR
// if not tmp then
15595: LD_VAR 0 1
15599: NOT
15600: IFFALSE 15604
// exit ;
15602: GO 15630
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15604: LD_VAR 0 1
15608: PUSH
15609: LD_INT 1
15611: PPUSH
15612: LD_VAR 0 1
15616: PPUSH
15617: CALL_OW 12
15621: ARRAY
15622: PPUSH
15623: LD_INT 1
15625: PPUSH
15626: CALL_OW 234
// end ;
15630: PPOPN 1
15632: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15633: LD_EXP 25
15637: PUSH
15638: LD_EXP 67
15642: AND
15643: IFFALSE 15784
15645: GO 15647
15647: DISABLE
15648: LD_INT 0
15650: PPUSH
15651: PPUSH
15652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15653: LD_ADDR_VAR 0 3
15657: PUSH
15658: LD_INT 22
15660: PUSH
15661: LD_OWVAR 2
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 25
15672: PUSH
15673: LD_INT 1
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: ST_TO_ADDR
// if not tmp then
15689: LD_VAR 0 3
15693: NOT
15694: IFFALSE 15698
// exit ;
15696: GO 15784
// un := tmp [ rand ( 1 , tmp ) ] ;
15698: LD_ADDR_VAR 0 2
15702: PUSH
15703: LD_VAR 0 3
15707: PUSH
15708: LD_INT 1
15710: PPUSH
15711: LD_VAR 0 3
15715: PPUSH
15716: CALL_OW 12
15720: ARRAY
15721: ST_TO_ADDR
// if Crawls ( un ) then
15722: LD_VAR 0 2
15726: PPUSH
15727: CALL_OW 318
15731: IFFALSE 15742
// ComWalk ( un ) ;
15733: LD_VAR 0 2
15737: PPUSH
15738: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15742: LD_VAR 0 2
15746: PPUSH
15747: LD_INT 9
15749: PPUSH
15750: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15754: LD_INT 28
15756: PPUSH
15757: LD_OWVAR 2
15761: PPUSH
15762: LD_INT 2
15764: PPUSH
15765: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15769: LD_INT 29
15771: PPUSH
15772: LD_OWVAR 2
15776: PPUSH
15777: LD_INT 2
15779: PPUSH
15780: CALL_OW 322
// end ;
15784: PPOPN 3
15786: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15787: LD_EXP 25
15791: PUSH
15792: LD_EXP 68
15796: AND
15797: IFFALSE 15908
15799: GO 15801
15801: DISABLE
15802: LD_INT 0
15804: PPUSH
15805: PPUSH
15806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15807: LD_ADDR_VAR 0 3
15811: PUSH
15812: LD_INT 22
15814: PUSH
15815: LD_OWVAR 2
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 25
15826: PUSH
15827: LD_INT 1
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PPUSH
15838: CALL_OW 69
15842: ST_TO_ADDR
// if not tmp then
15843: LD_VAR 0 3
15847: NOT
15848: IFFALSE 15852
// exit ;
15850: GO 15908
// un := tmp [ rand ( 1 , tmp ) ] ;
15852: LD_ADDR_VAR 0 2
15856: PUSH
15857: LD_VAR 0 3
15861: PUSH
15862: LD_INT 1
15864: PPUSH
15865: LD_VAR 0 3
15869: PPUSH
15870: CALL_OW 12
15874: ARRAY
15875: ST_TO_ADDR
// if Crawls ( un ) then
15876: LD_VAR 0 2
15880: PPUSH
15881: CALL_OW 318
15885: IFFALSE 15896
// ComWalk ( un ) ;
15887: LD_VAR 0 2
15891: PPUSH
15892: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15896: LD_VAR 0 2
15900: PPUSH
15901: LD_INT 8
15903: PPUSH
15904: CALL_OW 336
// end ;
15908: PPOPN 3
15910: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15911: LD_EXP 25
15915: PUSH
15916: LD_EXP 69
15920: AND
15921: IFFALSE 16065
15923: GO 15925
15925: DISABLE
15926: LD_INT 0
15928: PPUSH
15929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15930: LD_ADDR_VAR 0 2
15934: PUSH
15935: LD_INT 22
15937: PUSH
15938: LD_OWVAR 2
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 21
15949: PUSH
15950: LD_INT 2
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: LD_INT 34
15962: PUSH
15963: LD_INT 12
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 34
15972: PUSH
15973: LD_INT 51
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 34
15982: PUSH
15983: LD_INT 32
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: LIST
16000: PPUSH
16001: CALL_OW 69
16005: ST_TO_ADDR
// if not tmp then
16006: LD_VAR 0 2
16010: NOT
16011: IFFALSE 16015
// exit ;
16013: GO 16065
// for i in tmp do
16015: LD_ADDR_VAR 0 1
16019: PUSH
16020: LD_VAR 0 2
16024: PUSH
16025: FOR_IN
16026: IFFALSE 16063
// if GetCargo ( i , mat_artifact ) = 0 then
16028: LD_VAR 0 1
16032: PPUSH
16033: LD_INT 4
16035: PPUSH
16036: CALL_OW 289
16040: PUSH
16041: LD_INT 0
16043: EQUAL
16044: IFFALSE 16061
// SetCargo ( i , mat_siberit , 100 ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: LD_INT 3
16053: PPUSH
16054: LD_INT 100
16056: PPUSH
16057: CALL_OW 290
16061: GO 16025
16063: POP
16064: POP
// end ;
16065: PPOPN 2
16067: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16068: LD_EXP 25
16072: PUSH
16073: LD_EXP 70
16077: AND
16078: IFFALSE 16261
16080: GO 16082
16082: DISABLE
16083: LD_INT 0
16085: PPUSH
16086: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16087: LD_ADDR_VAR 0 2
16091: PUSH
16092: LD_INT 22
16094: PUSH
16095: LD_OWVAR 2
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PPUSH
16104: CALL_OW 69
16108: ST_TO_ADDR
// if not tmp then
16109: LD_VAR 0 2
16113: NOT
16114: IFFALSE 16118
// exit ;
16116: GO 16261
// for i := 1 to 2 do
16118: LD_ADDR_VAR 0 1
16122: PUSH
16123: DOUBLE
16124: LD_INT 1
16126: DEC
16127: ST_TO_ADDR
16128: LD_INT 2
16130: PUSH
16131: FOR_TO
16132: IFFALSE 16259
// begin uc_side := your_side ;
16134: LD_ADDR_OWVAR 20
16138: PUSH
16139: LD_OWVAR 2
16143: ST_TO_ADDR
// uc_nation := nation_american ;
16144: LD_ADDR_OWVAR 21
16148: PUSH
16149: LD_INT 1
16151: ST_TO_ADDR
// vc_chassis := us_morphling ;
16152: LD_ADDR_OWVAR 37
16156: PUSH
16157: LD_INT 5
16159: ST_TO_ADDR
// vc_engine := engine_siberite ;
16160: LD_ADDR_OWVAR 39
16164: PUSH
16165: LD_INT 3
16167: ST_TO_ADDR
// vc_control := control_computer ;
16168: LD_ADDR_OWVAR 38
16172: PUSH
16173: LD_INT 3
16175: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16176: LD_ADDR_OWVAR 40
16180: PUSH
16181: LD_INT 10
16183: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16184: LD_VAR 0 2
16188: PUSH
16189: LD_INT 1
16191: ARRAY
16192: PPUSH
16193: CALL_OW 310
16197: NOT
16198: IFFALSE 16245
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16200: CALL_OW 45
16204: PPUSH
16205: LD_VAR 0 2
16209: PUSH
16210: LD_INT 1
16212: ARRAY
16213: PPUSH
16214: CALL_OW 250
16218: PPUSH
16219: LD_VAR 0 2
16223: PUSH
16224: LD_INT 1
16226: ARRAY
16227: PPUSH
16228: CALL_OW 251
16232: PPUSH
16233: LD_INT 12
16235: PPUSH
16236: LD_INT 1
16238: PPUSH
16239: CALL_OW 50
16243: GO 16257
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16245: CALL_OW 45
16249: PPUSH
16250: LD_INT 1
16252: PPUSH
16253: CALL_OW 51
// end ;
16257: GO 16131
16259: POP
16260: POP
// end ;
16261: PPOPN 2
16263: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16264: LD_EXP 25
16268: PUSH
16269: LD_EXP 71
16273: AND
16274: IFFALSE 16496
16276: GO 16278
16278: DISABLE
16279: LD_INT 0
16281: PPUSH
16282: PPUSH
16283: PPUSH
16284: PPUSH
16285: PPUSH
16286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16287: LD_ADDR_VAR 0 6
16291: PUSH
16292: LD_INT 22
16294: PUSH
16295: LD_OWVAR 2
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 21
16306: PUSH
16307: LD_INT 1
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 3
16316: PUSH
16317: LD_INT 23
16319: PUSH
16320: LD_INT 0
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: LIST
16335: PPUSH
16336: CALL_OW 69
16340: ST_TO_ADDR
// if not tmp then
16341: LD_VAR 0 6
16345: NOT
16346: IFFALSE 16350
// exit ;
16348: GO 16496
// s1 := rand ( 1 , 4 ) ;
16350: LD_ADDR_VAR 0 2
16354: PUSH
16355: LD_INT 1
16357: PPUSH
16358: LD_INT 4
16360: PPUSH
16361: CALL_OW 12
16365: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16366: LD_ADDR_VAR 0 4
16370: PUSH
16371: LD_VAR 0 6
16375: PUSH
16376: LD_INT 1
16378: ARRAY
16379: PPUSH
16380: LD_VAR 0 2
16384: PPUSH
16385: CALL_OW 259
16389: ST_TO_ADDR
// if s1 = 1 then
16390: LD_VAR 0 2
16394: PUSH
16395: LD_INT 1
16397: EQUAL
16398: IFFALSE 16418
// s2 := rand ( 2 , 4 ) else
16400: LD_ADDR_VAR 0 3
16404: PUSH
16405: LD_INT 2
16407: PPUSH
16408: LD_INT 4
16410: PPUSH
16411: CALL_OW 12
16415: ST_TO_ADDR
16416: GO 16426
// s2 := 1 ;
16418: LD_ADDR_VAR 0 3
16422: PUSH
16423: LD_INT 1
16425: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16426: LD_ADDR_VAR 0 5
16430: PUSH
16431: LD_VAR 0 6
16435: PUSH
16436: LD_INT 1
16438: ARRAY
16439: PPUSH
16440: LD_VAR 0 3
16444: PPUSH
16445: CALL_OW 259
16449: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16450: LD_VAR 0 6
16454: PUSH
16455: LD_INT 1
16457: ARRAY
16458: PPUSH
16459: LD_VAR 0 2
16463: PPUSH
16464: LD_VAR 0 5
16468: PPUSH
16469: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16473: LD_VAR 0 6
16477: PUSH
16478: LD_INT 1
16480: ARRAY
16481: PPUSH
16482: LD_VAR 0 3
16486: PPUSH
16487: LD_VAR 0 4
16491: PPUSH
16492: CALL_OW 237
// end ;
16496: PPOPN 6
16498: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16499: LD_EXP 25
16503: PUSH
16504: LD_EXP 72
16508: AND
16509: IFFALSE 16588
16511: GO 16513
16513: DISABLE
16514: LD_INT 0
16516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16517: LD_ADDR_VAR 0 1
16521: PUSH
16522: LD_INT 22
16524: PUSH
16525: LD_OWVAR 2
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 30
16536: PUSH
16537: LD_INT 3
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: ST_TO_ADDR
// if not tmp then
16553: LD_VAR 0 1
16557: NOT
16558: IFFALSE 16562
// exit ;
16560: GO 16588
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16562: LD_VAR 0 1
16566: PUSH
16567: LD_INT 1
16569: PPUSH
16570: LD_VAR 0 1
16574: PPUSH
16575: CALL_OW 12
16579: ARRAY
16580: PPUSH
16581: LD_INT 1
16583: PPUSH
16584: CALL_OW 234
// end ;
16588: PPOPN 1
16590: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16591: LD_EXP 25
16595: PUSH
16596: LD_EXP 73
16600: AND
16601: IFFALSE 16713
16603: GO 16605
16605: DISABLE
16606: LD_INT 0
16608: PPUSH
16609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16610: LD_ADDR_VAR 0 2
16614: PUSH
16615: LD_INT 22
16617: PUSH
16618: LD_OWVAR 2
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 2
16629: PUSH
16630: LD_INT 30
16632: PUSH
16633: LD_INT 27
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: LD_INT 30
16642: PUSH
16643: LD_INT 26
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 30
16652: PUSH
16653: LD_INT 28
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PPUSH
16670: CALL_OW 69
16674: ST_TO_ADDR
// if not tmp then
16675: LD_VAR 0 2
16679: NOT
16680: IFFALSE 16684
// exit ;
16682: GO 16713
// for i in tmp do
16684: LD_ADDR_VAR 0 1
16688: PUSH
16689: LD_VAR 0 2
16693: PUSH
16694: FOR_IN
16695: IFFALSE 16711
// SetLives ( i , 1 ) ;
16697: LD_VAR 0 1
16701: PPUSH
16702: LD_INT 1
16704: PPUSH
16705: CALL_OW 234
16709: GO 16694
16711: POP
16712: POP
// end ;
16713: PPOPN 2
16715: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16716: LD_EXP 25
16720: PUSH
16721: LD_EXP 74
16725: AND
16726: IFFALSE 17013
16728: GO 16730
16730: DISABLE
16731: LD_INT 0
16733: PPUSH
16734: PPUSH
16735: PPUSH
// begin i := rand ( 1 , 7 ) ;
16736: LD_ADDR_VAR 0 1
16740: PUSH
16741: LD_INT 1
16743: PPUSH
16744: LD_INT 7
16746: PPUSH
16747: CALL_OW 12
16751: ST_TO_ADDR
// case i of 1 :
16752: LD_VAR 0 1
16756: PUSH
16757: LD_INT 1
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16765
16763: GO 16775
16765: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16766: LD_STRING earthquake(getX(game), 0, 32)
16768: PPUSH
16769: CALL_OW 559
16773: GO 17013
16775: LD_INT 2
16777: DOUBLE
16778: EQUAL
16779: IFTRUE 16783
16781: GO 16797
16783: POP
// begin ToLua ( displayStucuk(); ) ;
16784: LD_STRING displayStucuk();
16786: PPUSH
16787: CALL_OW 559
// ResetFog ;
16791: CALL_OW 335
// end ; 3 :
16795: GO 17013
16797: LD_INT 3
16799: DOUBLE
16800: EQUAL
16801: IFTRUE 16805
16803: GO 16909
16805: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16806: LD_ADDR_VAR 0 2
16810: PUSH
16811: LD_INT 22
16813: PUSH
16814: LD_OWVAR 2
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 25
16825: PUSH
16826: LD_INT 1
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PPUSH
16837: CALL_OW 69
16841: ST_TO_ADDR
// if not tmp then
16842: LD_VAR 0 2
16846: NOT
16847: IFFALSE 16851
// exit ;
16849: GO 17013
// un := tmp [ rand ( 1 , tmp ) ] ;
16851: LD_ADDR_VAR 0 3
16855: PUSH
16856: LD_VAR 0 2
16860: PUSH
16861: LD_INT 1
16863: PPUSH
16864: LD_VAR 0 2
16868: PPUSH
16869: CALL_OW 12
16873: ARRAY
16874: ST_TO_ADDR
// if Crawls ( un ) then
16875: LD_VAR 0 3
16879: PPUSH
16880: CALL_OW 318
16884: IFFALSE 16895
// ComWalk ( un ) ;
16886: LD_VAR 0 3
16890: PPUSH
16891: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16895: LD_VAR 0 3
16899: PPUSH
16900: LD_INT 8
16902: PPUSH
16903: CALL_OW 336
// end ; 4 :
16907: GO 17013
16909: LD_INT 4
16911: DOUBLE
16912: EQUAL
16913: IFTRUE 16917
16915: GO 16991
16917: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16918: LD_ADDR_VAR 0 2
16922: PUSH
16923: LD_INT 22
16925: PUSH
16926: LD_OWVAR 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 30
16937: PUSH
16938: LD_INT 29
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PPUSH
16949: CALL_OW 69
16953: ST_TO_ADDR
// if not tmp then
16954: LD_VAR 0 2
16958: NOT
16959: IFFALSE 16963
// exit ;
16961: GO 17013
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16963: LD_VAR 0 2
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16976: LD_VAR 0 2
16980: PUSH
16981: LD_INT 1
16983: ARRAY
16984: PPUSH
16985: CALL_OW 65
// end ; 5 .. 7 :
16989: GO 17013
16991: LD_INT 5
16993: DOUBLE
16994: GREATEREQUAL
16995: IFFALSE 17003
16997: LD_INT 7
16999: DOUBLE
17000: LESSEQUAL
17001: IFTRUE 17005
17003: GO 17012
17005: POP
// StreamSibBomb ; end ;
17006: CALL 13250 0 0
17010: GO 17013
17012: POP
// end ;
17013: PPOPN 3
17015: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17016: LD_EXP 25
17020: PUSH
17021: LD_EXP 75
17025: AND
17026: IFFALSE 17182
17028: GO 17030
17030: DISABLE
17031: LD_INT 0
17033: PPUSH
17034: PPUSH
17035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17036: LD_ADDR_VAR 0 2
17040: PUSH
17041: LD_INT 81
17043: PUSH
17044: LD_OWVAR 2
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 2
17055: PUSH
17056: LD_INT 21
17058: PUSH
17059: LD_INT 1
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 21
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PPUSH
17085: CALL_OW 69
17089: ST_TO_ADDR
// if not tmp then
17090: LD_VAR 0 2
17094: NOT
17095: IFFALSE 17099
// exit ;
17097: GO 17182
// p := 0 ;
17099: LD_ADDR_VAR 0 3
17103: PUSH
17104: LD_INT 0
17106: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17107: LD_INT 35
17109: PPUSH
17110: CALL_OW 67
// p := p + 1 ;
17114: LD_ADDR_VAR 0 3
17118: PUSH
17119: LD_VAR 0 3
17123: PUSH
17124: LD_INT 1
17126: PLUS
17127: ST_TO_ADDR
// for i in tmp do
17128: LD_ADDR_VAR 0 1
17132: PUSH
17133: LD_VAR 0 2
17137: PUSH
17138: FOR_IN
17139: IFFALSE 17170
// if GetLives ( i ) < 1000 then
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 256
17150: PUSH
17151: LD_INT 1000
17153: LESS
17154: IFFALSE 17168
// SetLives ( i , 1000 ) ;
17156: LD_VAR 0 1
17160: PPUSH
17161: LD_INT 1000
17163: PPUSH
17164: CALL_OW 234
17168: GO 17138
17170: POP
17171: POP
// until p > 20 ;
17172: LD_VAR 0 3
17176: PUSH
17177: LD_INT 20
17179: GREATER
17180: IFFALSE 17107
// end ;
17182: PPOPN 3
17184: END
// every 0 0$1 trigger StreamModeActive and sTime do
17185: LD_EXP 25
17189: PUSH
17190: LD_EXP 76
17194: AND
17195: IFFALSE 17230
17197: GO 17199
17199: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17200: LD_INT 28
17202: PPUSH
17203: LD_OWVAR 2
17207: PPUSH
17208: LD_INT 2
17210: PPUSH
17211: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17215: LD_INT 30
17217: PPUSH
17218: LD_OWVAR 2
17222: PPUSH
17223: LD_INT 2
17225: PPUSH
17226: CALL_OW 322
// end ;
17230: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17231: LD_EXP 25
17235: PUSH
17236: LD_EXP 77
17240: AND
17241: IFFALSE 17362
17243: GO 17245
17245: DISABLE
17246: LD_INT 0
17248: PPUSH
17249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_INT 22
17257: PUSH
17258: LD_OWVAR 2
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 21
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: LD_INT 23
17282: PUSH
17283: LD_INT 0
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: PPUSH
17299: CALL_OW 69
17303: ST_TO_ADDR
// if not tmp then
17304: LD_VAR 0 2
17308: NOT
17309: IFFALSE 17313
// exit ;
17311: GO 17362
// for i in tmp do
17313: LD_ADDR_VAR 0 1
17317: PUSH
17318: LD_VAR 0 2
17322: PUSH
17323: FOR_IN
17324: IFFALSE 17360
// begin if Crawls ( i ) then
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 318
17335: IFFALSE 17346
// ComWalk ( i ) ;
17337: LD_VAR 0 1
17341: PPUSH
17342: CALL_OW 138
// SetClass ( i , 2 ) ;
17346: LD_VAR 0 1
17350: PPUSH
17351: LD_INT 2
17353: PPUSH
17354: CALL_OW 336
// end ;
17358: GO 17323
17360: POP
17361: POP
// end ;
17362: PPOPN 2
17364: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17365: LD_EXP 25
17369: PUSH
17370: LD_EXP 78
17374: AND
17375: IFFALSE 17663
17377: GO 17379
17379: DISABLE
17380: LD_INT 0
17382: PPUSH
17383: PPUSH
17384: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17385: LD_OWVAR 2
17389: PPUSH
17390: LD_INT 9
17392: PPUSH
17393: LD_INT 1
17395: PPUSH
17396: LD_INT 1
17398: PPUSH
17399: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17403: LD_INT 9
17405: PPUSH
17406: LD_OWVAR 2
17410: PPUSH
17411: CALL_OW 343
// uc_side := 9 ;
17415: LD_ADDR_OWVAR 20
17419: PUSH
17420: LD_INT 9
17422: ST_TO_ADDR
// uc_nation := 2 ;
17423: LD_ADDR_OWVAR 21
17427: PUSH
17428: LD_INT 2
17430: ST_TO_ADDR
// hc_name := Dark Warrior ;
17431: LD_ADDR_OWVAR 26
17435: PUSH
17436: LD_STRING Dark Warrior
17438: ST_TO_ADDR
// hc_gallery :=  ;
17439: LD_ADDR_OWVAR 33
17443: PUSH
17444: LD_STRING 
17446: ST_TO_ADDR
// hc_noskilllimit := true ;
17447: LD_ADDR_OWVAR 76
17451: PUSH
17452: LD_INT 1
17454: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17455: LD_ADDR_OWVAR 31
17459: PUSH
17460: LD_INT 30
17462: PUSH
17463: LD_INT 30
17465: PUSH
17466: LD_INT 30
17468: PUSH
17469: LD_INT 30
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: ST_TO_ADDR
// un := CreateHuman ;
17478: LD_ADDR_VAR 0 3
17482: PUSH
17483: CALL_OW 44
17487: ST_TO_ADDR
// hc_noskilllimit := false ;
17488: LD_ADDR_OWVAR 76
17492: PUSH
17493: LD_INT 0
17495: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17496: LD_VAR 0 3
17500: PPUSH
17501: LD_INT 1
17503: PPUSH
17504: CALL_OW 51
// ToLua ( playRanger() ) ;
17508: LD_STRING playRanger()
17510: PPUSH
17511: CALL_OW 559
// p := 0 ;
17515: LD_ADDR_VAR 0 2
17519: PUSH
17520: LD_INT 0
17522: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17523: LD_INT 35
17525: PPUSH
17526: CALL_OW 67
// p := p + 1 ;
17530: LD_ADDR_VAR 0 2
17534: PUSH
17535: LD_VAR 0 2
17539: PUSH
17540: LD_INT 1
17542: PLUS
17543: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17544: LD_VAR 0 3
17548: PPUSH
17549: CALL_OW 256
17553: PUSH
17554: LD_INT 1000
17556: LESS
17557: IFFALSE 17571
// SetLives ( un , 1000 ) ;
17559: LD_VAR 0 3
17563: PPUSH
17564: LD_INT 1000
17566: PPUSH
17567: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17571: LD_VAR 0 3
17575: PPUSH
17576: LD_INT 81
17578: PUSH
17579: LD_OWVAR 2
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 91
17590: PUSH
17591: LD_VAR 0 3
17595: PUSH
17596: LD_INT 30
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: LIST
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PPUSH
17608: CALL_OW 69
17612: PPUSH
17613: LD_VAR 0 3
17617: PPUSH
17618: CALL_OW 74
17622: PPUSH
17623: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17627: LD_VAR 0 2
17631: PUSH
17632: LD_INT 80
17634: GREATER
17635: PUSH
17636: LD_VAR 0 3
17640: PPUSH
17641: CALL_OW 301
17645: OR
17646: IFFALSE 17523
// if un then
17648: LD_VAR 0 3
17652: IFFALSE 17663
// RemoveUnit ( un ) ;
17654: LD_VAR 0 3
17658: PPUSH
17659: CALL_OW 64
// end ;
17663: PPOPN 3
17665: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17666: LD_EXP 79
17670: IFFALSE 17786
17672: GO 17674
17674: DISABLE
17675: LD_INT 0
17677: PPUSH
17678: PPUSH
17679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17680: LD_ADDR_VAR 0 2
17684: PUSH
17685: LD_INT 81
17687: PUSH
17688: LD_OWVAR 2
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 21
17699: PUSH
17700: LD_INT 1
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PPUSH
17711: CALL_OW 69
17715: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17716: LD_STRING playComputer()
17718: PPUSH
17719: CALL_OW 559
// if not tmp then
17723: LD_VAR 0 2
17727: NOT
17728: IFFALSE 17732
// exit ;
17730: GO 17786
// for i in tmp do
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 2
17741: PUSH
17742: FOR_IN
17743: IFFALSE 17784
// for j := 1 to 4 do
17745: LD_ADDR_VAR 0 3
17749: PUSH
17750: DOUBLE
17751: LD_INT 1
17753: DEC
17754: ST_TO_ADDR
17755: LD_INT 4
17757: PUSH
17758: FOR_TO
17759: IFFALSE 17780
// SetSkill ( i , j , 10 ) ;
17761: LD_VAR 0 1
17765: PPUSH
17766: LD_VAR 0 3
17770: PPUSH
17771: LD_INT 10
17773: PPUSH
17774: CALL_OW 237
17778: GO 17758
17780: POP
17781: POP
17782: GO 17742
17784: POP
17785: POP
// end ;
17786: PPOPN 3
17788: END
// every 0 0$1 trigger s30 do var i , tmp ;
17789: LD_EXP 80
17793: IFFALSE 17862
17795: GO 17797
17797: DISABLE
17798: LD_INT 0
17800: PPUSH
17801: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17802: LD_ADDR_VAR 0 2
17806: PUSH
17807: LD_INT 22
17809: PUSH
17810: LD_OWVAR 2
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 69
17823: ST_TO_ADDR
// if not tmp then
17824: LD_VAR 0 2
17828: NOT
17829: IFFALSE 17833
// exit ;
17831: GO 17862
// for i in tmp do
17833: LD_ADDR_VAR 0 1
17837: PUSH
17838: LD_VAR 0 2
17842: PUSH
17843: FOR_IN
17844: IFFALSE 17860
// SetLives ( i , 300 ) ;
17846: LD_VAR 0 1
17850: PPUSH
17851: LD_INT 300
17853: PPUSH
17854: CALL_OW 234
17858: GO 17843
17860: POP
17861: POP
// end ;
17862: PPOPN 2
17864: END
// every 0 0$1 trigger s60 do var i , tmp ;
17865: LD_EXP 81
17869: IFFALSE 17938
17871: GO 17873
17873: DISABLE
17874: LD_INT 0
17876: PPUSH
17877: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: LD_INT 22
17885: PUSH
17886: LD_OWVAR 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PPUSH
17895: CALL_OW 69
17899: ST_TO_ADDR
// if not tmp then
17900: LD_VAR 0 2
17904: NOT
17905: IFFALSE 17909
// exit ;
17907: GO 17938
// for i in tmp do
17909: LD_ADDR_VAR 0 1
17913: PUSH
17914: LD_VAR 0 2
17918: PUSH
17919: FOR_IN
17920: IFFALSE 17936
// SetLives ( i , 600 ) ;
17922: LD_VAR 0 1
17926: PPUSH
17927: LD_INT 600
17929: PPUSH
17930: CALL_OW 234
17934: GO 17919
17936: POP
17937: POP
// end ;
17938: PPOPN 2
17940: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17941: LD_INT 0
17943: PPUSH
// case cmd of 301 :
17944: LD_VAR 0 1
17948: PUSH
17949: LD_INT 301
17951: DOUBLE
17952: EQUAL
17953: IFTRUE 17957
17955: GO 17989
17957: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17958: LD_VAR 0 6
17962: PPUSH
17963: LD_VAR 0 7
17967: PPUSH
17968: LD_VAR 0 8
17972: PPUSH
17973: LD_VAR 0 4
17977: PPUSH
17978: LD_VAR 0 5
17982: PPUSH
17983: CALL 19190 0 5
17987: GO 18110
17989: LD_INT 302
17991: DOUBLE
17992: EQUAL
17993: IFTRUE 17997
17995: GO 18034
17997: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17998: LD_VAR 0 6
18002: PPUSH
18003: LD_VAR 0 7
18007: PPUSH
18008: LD_VAR 0 8
18012: PPUSH
18013: LD_VAR 0 9
18017: PPUSH
18018: LD_VAR 0 4
18022: PPUSH
18023: LD_VAR 0 5
18027: PPUSH
18028: CALL 19281 0 6
18032: GO 18110
18034: LD_INT 303
18036: DOUBLE
18037: EQUAL
18038: IFTRUE 18042
18040: GO 18079
18042: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18043: LD_VAR 0 6
18047: PPUSH
18048: LD_VAR 0 7
18052: PPUSH
18053: LD_VAR 0 8
18057: PPUSH
18058: LD_VAR 0 9
18062: PPUSH
18063: LD_VAR 0 4
18067: PPUSH
18068: LD_VAR 0 5
18072: PPUSH
18073: CALL 18115 0 6
18077: GO 18110
18079: LD_INT 304
18081: DOUBLE
18082: EQUAL
18083: IFTRUE 18087
18085: GO 18109
18087: POP
// hHackTeleport ( unit , x , y ) ; end ;
18088: LD_VAR 0 2
18092: PPUSH
18093: LD_VAR 0 4
18097: PPUSH
18098: LD_VAR 0 5
18102: PPUSH
18103: CALL 19874 0 3
18107: GO 18110
18109: POP
// end ;
18110: LD_VAR 0 12
18114: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18115: LD_INT 0
18117: PPUSH
18118: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18119: LD_VAR 0 1
18123: PUSH
18124: LD_INT 1
18126: LESS
18127: PUSH
18128: LD_VAR 0 1
18132: PUSH
18133: LD_INT 3
18135: GREATER
18136: OR
18137: PUSH
18138: LD_VAR 0 5
18142: PPUSH
18143: LD_VAR 0 6
18147: PPUSH
18148: CALL_OW 428
18152: OR
18153: IFFALSE 18157
// exit ;
18155: GO 18877
// uc_side := your_side ;
18157: LD_ADDR_OWVAR 20
18161: PUSH
18162: LD_OWVAR 2
18166: ST_TO_ADDR
// uc_nation := nation ;
18167: LD_ADDR_OWVAR 21
18171: PUSH
18172: LD_VAR 0 1
18176: ST_TO_ADDR
// bc_level = 1 ;
18177: LD_ADDR_OWVAR 43
18181: PUSH
18182: LD_INT 1
18184: ST_TO_ADDR
// case btype of 1 :
18185: LD_VAR 0 2
18189: PUSH
18190: LD_INT 1
18192: DOUBLE
18193: EQUAL
18194: IFTRUE 18198
18196: GO 18209
18198: POP
// bc_type := b_depot ; 2 :
18199: LD_ADDR_OWVAR 42
18203: PUSH
18204: LD_INT 0
18206: ST_TO_ADDR
18207: GO 18821
18209: LD_INT 2
18211: DOUBLE
18212: EQUAL
18213: IFTRUE 18217
18215: GO 18228
18217: POP
// bc_type := b_warehouse ; 3 :
18218: LD_ADDR_OWVAR 42
18222: PUSH
18223: LD_INT 1
18225: ST_TO_ADDR
18226: GO 18821
18228: LD_INT 3
18230: DOUBLE
18231: EQUAL
18232: IFTRUE 18236
18234: GO 18247
18236: POP
// bc_type := b_lab ; 4 .. 9 :
18237: LD_ADDR_OWVAR 42
18241: PUSH
18242: LD_INT 6
18244: ST_TO_ADDR
18245: GO 18821
18247: LD_INT 4
18249: DOUBLE
18250: GREATEREQUAL
18251: IFFALSE 18259
18253: LD_INT 9
18255: DOUBLE
18256: LESSEQUAL
18257: IFTRUE 18261
18259: GO 18313
18261: POP
// begin bc_type := b_lab_half ;
18262: LD_ADDR_OWVAR 42
18266: PUSH
18267: LD_INT 7
18269: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18270: LD_ADDR_OWVAR 44
18274: PUSH
18275: LD_INT 10
18277: PUSH
18278: LD_INT 11
18280: PUSH
18281: LD_INT 12
18283: PUSH
18284: LD_INT 15
18286: PUSH
18287: LD_INT 14
18289: PUSH
18290: LD_INT 13
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: PUSH
18301: LD_VAR 0 2
18305: PUSH
18306: LD_INT 3
18308: MINUS
18309: ARRAY
18310: ST_TO_ADDR
// end ; 10 .. 13 :
18311: GO 18821
18313: LD_INT 10
18315: DOUBLE
18316: GREATEREQUAL
18317: IFFALSE 18325
18319: LD_INT 13
18321: DOUBLE
18322: LESSEQUAL
18323: IFTRUE 18327
18325: GO 18404
18327: POP
// begin bc_type := b_lab_full ;
18328: LD_ADDR_OWVAR 42
18332: PUSH
18333: LD_INT 8
18335: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18336: LD_ADDR_OWVAR 44
18340: PUSH
18341: LD_INT 10
18343: PUSH
18344: LD_INT 12
18346: PUSH
18347: LD_INT 14
18349: PUSH
18350: LD_INT 13
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: PUSH
18359: LD_VAR 0 2
18363: PUSH
18364: LD_INT 9
18366: MINUS
18367: ARRAY
18368: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18369: LD_ADDR_OWVAR 45
18373: PUSH
18374: LD_INT 11
18376: PUSH
18377: LD_INT 15
18379: PUSH
18380: LD_INT 12
18382: PUSH
18383: LD_INT 15
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: PUSH
18392: LD_VAR 0 2
18396: PUSH
18397: LD_INT 9
18399: MINUS
18400: ARRAY
18401: ST_TO_ADDR
// end ; 14 :
18402: GO 18821
18404: LD_INT 14
18406: DOUBLE
18407: EQUAL
18408: IFTRUE 18412
18410: GO 18423
18412: POP
// bc_type := b_workshop ; 15 :
18413: LD_ADDR_OWVAR 42
18417: PUSH
18418: LD_INT 2
18420: ST_TO_ADDR
18421: GO 18821
18423: LD_INT 15
18425: DOUBLE
18426: EQUAL
18427: IFTRUE 18431
18429: GO 18442
18431: POP
// bc_type := b_factory ; 16 :
18432: LD_ADDR_OWVAR 42
18436: PUSH
18437: LD_INT 3
18439: ST_TO_ADDR
18440: GO 18821
18442: LD_INT 16
18444: DOUBLE
18445: EQUAL
18446: IFTRUE 18450
18448: GO 18461
18450: POP
// bc_type := b_ext_gun ; 17 :
18451: LD_ADDR_OWVAR 42
18455: PUSH
18456: LD_INT 17
18458: ST_TO_ADDR
18459: GO 18821
18461: LD_INT 17
18463: DOUBLE
18464: EQUAL
18465: IFTRUE 18469
18467: GO 18497
18469: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18470: LD_ADDR_OWVAR 42
18474: PUSH
18475: LD_INT 19
18477: PUSH
18478: LD_INT 23
18480: PUSH
18481: LD_INT 19
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: PUSH
18489: LD_VAR 0 1
18493: ARRAY
18494: ST_TO_ADDR
18495: GO 18821
18497: LD_INT 18
18499: DOUBLE
18500: EQUAL
18501: IFTRUE 18505
18503: GO 18516
18505: POP
// bc_type := b_ext_radar ; 19 :
18506: LD_ADDR_OWVAR 42
18510: PUSH
18511: LD_INT 20
18513: ST_TO_ADDR
18514: GO 18821
18516: LD_INT 19
18518: DOUBLE
18519: EQUAL
18520: IFTRUE 18524
18522: GO 18535
18524: POP
// bc_type := b_ext_radio ; 20 :
18525: LD_ADDR_OWVAR 42
18529: PUSH
18530: LD_INT 22
18532: ST_TO_ADDR
18533: GO 18821
18535: LD_INT 20
18537: DOUBLE
18538: EQUAL
18539: IFTRUE 18543
18541: GO 18554
18543: POP
// bc_type := b_ext_siberium ; 21 :
18544: LD_ADDR_OWVAR 42
18548: PUSH
18549: LD_INT 21
18551: ST_TO_ADDR
18552: GO 18821
18554: LD_INT 21
18556: DOUBLE
18557: EQUAL
18558: IFTRUE 18562
18560: GO 18573
18562: POP
// bc_type := b_ext_computer ; 22 :
18563: LD_ADDR_OWVAR 42
18567: PUSH
18568: LD_INT 24
18570: ST_TO_ADDR
18571: GO 18821
18573: LD_INT 22
18575: DOUBLE
18576: EQUAL
18577: IFTRUE 18581
18579: GO 18592
18581: POP
// bc_type := b_ext_track ; 23 :
18582: LD_ADDR_OWVAR 42
18586: PUSH
18587: LD_INT 16
18589: ST_TO_ADDR
18590: GO 18821
18592: LD_INT 23
18594: DOUBLE
18595: EQUAL
18596: IFTRUE 18600
18598: GO 18611
18600: POP
// bc_type := b_ext_laser ; 24 :
18601: LD_ADDR_OWVAR 42
18605: PUSH
18606: LD_INT 25
18608: ST_TO_ADDR
18609: GO 18821
18611: LD_INT 24
18613: DOUBLE
18614: EQUAL
18615: IFTRUE 18619
18617: GO 18630
18619: POP
// bc_type := b_control_tower ; 25 :
18620: LD_ADDR_OWVAR 42
18624: PUSH
18625: LD_INT 36
18627: ST_TO_ADDR
18628: GO 18821
18630: LD_INT 25
18632: DOUBLE
18633: EQUAL
18634: IFTRUE 18638
18636: GO 18649
18638: POP
// bc_type := b_breastwork ; 26 :
18639: LD_ADDR_OWVAR 42
18643: PUSH
18644: LD_INT 31
18646: ST_TO_ADDR
18647: GO 18821
18649: LD_INT 26
18651: DOUBLE
18652: EQUAL
18653: IFTRUE 18657
18655: GO 18668
18657: POP
// bc_type := b_bunker ; 27 :
18658: LD_ADDR_OWVAR 42
18662: PUSH
18663: LD_INT 32
18665: ST_TO_ADDR
18666: GO 18821
18668: LD_INT 27
18670: DOUBLE
18671: EQUAL
18672: IFTRUE 18676
18674: GO 18687
18676: POP
// bc_type := b_turret ; 28 :
18677: LD_ADDR_OWVAR 42
18681: PUSH
18682: LD_INT 33
18684: ST_TO_ADDR
18685: GO 18821
18687: LD_INT 28
18689: DOUBLE
18690: EQUAL
18691: IFTRUE 18695
18693: GO 18706
18695: POP
// bc_type := b_armoury ; 29 :
18696: LD_ADDR_OWVAR 42
18700: PUSH
18701: LD_INT 4
18703: ST_TO_ADDR
18704: GO 18821
18706: LD_INT 29
18708: DOUBLE
18709: EQUAL
18710: IFTRUE 18714
18712: GO 18725
18714: POP
// bc_type := b_barracks ; 30 :
18715: LD_ADDR_OWVAR 42
18719: PUSH
18720: LD_INT 5
18722: ST_TO_ADDR
18723: GO 18821
18725: LD_INT 30
18727: DOUBLE
18728: EQUAL
18729: IFTRUE 18733
18731: GO 18744
18733: POP
// bc_type := b_solar_power ; 31 :
18734: LD_ADDR_OWVAR 42
18738: PUSH
18739: LD_INT 27
18741: ST_TO_ADDR
18742: GO 18821
18744: LD_INT 31
18746: DOUBLE
18747: EQUAL
18748: IFTRUE 18752
18750: GO 18763
18752: POP
// bc_type := b_oil_power ; 32 :
18753: LD_ADDR_OWVAR 42
18757: PUSH
18758: LD_INT 26
18760: ST_TO_ADDR
18761: GO 18821
18763: LD_INT 32
18765: DOUBLE
18766: EQUAL
18767: IFTRUE 18771
18769: GO 18782
18771: POP
// bc_type := b_siberite_power ; 33 :
18772: LD_ADDR_OWVAR 42
18776: PUSH
18777: LD_INT 28
18779: ST_TO_ADDR
18780: GO 18821
18782: LD_INT 33
18784: DOUBLE
18785: EQUAL
18786: IFTRUE 18790
18788: GO 18801
18790: POP
// bc_type := b_oil_mine ; 34 :
18791: LD_ADDR_OWVAR 42
18795: PUSH
18796: LD_INT 29
18798: ST_TO_ADDR
18799: GO 18821
18801: LD_INT 34
18803: DOUBLE
18804: EQUAL
18805: IFTRUE 18809
18807: GO 18820
18809: POP
// bc_type := b_siberite_mine ; end ;
18810: LD_ADDR_OWVAR 42
18814: PUSH
18815: LD_INT 30
18817: ST_TO_ADDR
18818: GO 18821
18820: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18821: LD_ADDR_VAR 0 8
18825: PUSH
18826: LD_VAR 0 5
18830: PPUSH
18831: LD_VAR 0 6
18835: PPUSH
18836: LD_VAR 0 3
18840: PPUSH
18841: CALL_OW 47
18845: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18846: LD_OWVAR 42
18850: PUSH
18851: LD_INT 32
18853: PUSH
18854: LD_INT 33
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: IN
18861: IFFALSE 18877
// PlaceWeaponTurret ( b , weapon ) ;
18863: LD_VAR 0 8
18867: PPUSH
18868: LD_VAR 0 4
18872: PPUSH
18873: CALL_OW 431
// end ;
18877: LD_VAR 0 7
18881: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18882: LD_INT 0
18884: PPUSH
18885: PPUSH
18886: PPUSH
18887: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18888: LD_ADDR_VAR 0 4
18892: PUSH
18893: LD_INT 22
18895: PUSH
18896: LD_OWVAR 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 2
18907: PUSH
18908: LD_INT 30
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 30
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PPUSH
18937: CALL_OW 69
18941: ST_TO_ADDR
// if not tmp then
18942: LD_VAR 0 4
18946: NOT
18947: IFFALSE 18951
// exit ;
18949: GO 19010
// for i in tmp do
18951: LD_ADDR_VAR 0 2
18955: PUSH
18956: LD_VAR 0 4
18960: PUSH
18961: FOR_IN
18962: IFFALSE 19008
// for j = 1 to 3 do
18964: LD_ADDR_VAR 0 3
18968: PUSH
18969: DOUBLE
18970: LD_INT 1
18972: DEC
18973: ST_TO_ADDR
18974: LD_INT 3
18976: PUSH
18977: FOR_TO
18978: IFFALSE 19004
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18980: LD_VAR 0 2
18984: PPUSH
18985: CALL_OW 274
18989: PPUSH
18990: LD_VAR 0 3
18994: PPUSH
18995: LD_INT 99999
18997: PPUSH
18998: CALL_OW 277
19002: GO 18977
19004: POP
19005: POP
19006: GO 18961
19008: POP
19009: POP
// end ;
19010: LD_VAR 0 1
19014: RET
// export function hHackSetLevel10 ; var i , j ; begin
19015: LD_INT 0
19017: PPUSH
19018: PPUSH
19019: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19020: LD_ADDR_VAR 0 2
19024: PUSH
19025: LD_INT 21
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PPUSH
19035: CALL_OW 69
19039: PUSH
19040: FOR_IN
19041: IFFALSE 19093
// if IsSelected ( i ) then
19043: LD_VAR 0 2
19047: PPUSH
19048: CALL_OW 306
19052: IFFALSE 19091
// begin for j := 1 to 4 do
19054: LD_ADDR_VAR 0 3
19058: PUSH
19059: DOUBLE
19060: LD_INT 1
19062: DEC
19063: ST_TO_ADDR
19064: LD_INT 4
19066: PUSH
19067: FOR_TO
19068: IFFALSE 19089
// SetSkill ( i , j , 10 ) ;
19070: LD_VAR 0 2
19074: PPUSH
19075: LD_VAR 0 3
19079: PPUSH
19080: LD_INT 10
19082: PPUSH
19083: CALL_OW 237
19087: GO 19067
19089: POP
19090: POP
// end ;
19091: GO 19040
19093: POP
19094: POP
// end ;
19095: LD_VAR 0 1
19099: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19100: LD_INT 0
19102: PPUSH
19103: PPUSH
19104: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19105: LD_ADDR_VAR 0 2
19109: PUSH
19110: LD_INT 22
19112: PUSH
19113: LD_OWVAR 2
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 21
19124: PUSH
19125: LD_INT 1
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PPUSH
19136: CALL_OW 69
19140: PUSH
19141: FOR_IN
19142: IFFALSE 19183
// begin for j := 1 to 4 do
19144: LD_ADDR_VAR 0 3
19148: PUSH
19149: DOUBLE
19150: LD_INT 1
19152: DEC
19153: ST_TO_ADDR
19154: LD_INT 4
19156: PUSH
19157: FOR_TO
19158: IFFALSE 19179
// SetSkill ( i , j , 10 ) ;
19160: LD_VAR 0 2
19164: PPUSH
19165: LD_VAR 0 3
19169: PPUSH
19170: LD_INT 10
19172: PPUSH
19173: CALL_OW 237
19177: GO 19157
19179: POP
19180: POP
// end ;
19181: GO 19141
19183: POP
19184: POP
// end ;
19185: LD_VAR 0 1
19189: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19190: LD_INT 0
19192: PPUSH
// uc_side := your_side ;
19193: LD_ADDR_OWVAR 20
19197: PUSH
19198: LD_OWVAR 2
19202: ST_TO_ADDR
// uc_nation := nation ;
19203: LD_ADDR_OWVAR 21
19207: PUSH
19208: LD_VAR 0 1
19212: ST_TO_ADDR
// InitHc ;
19213: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19217: LD_INT 0
19219: PPUSH
19220: LD_VAR 0 2
19224: PPUSH
19225: LD_VAR 0 3
19229: PPUSH
19230: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19234: LD_VAR 0 4
19238: PPUSH
19239: LD_VAR 0 5
19243: PPUSH
19244: CALL_OW 428
19248: PUSH
19249: LD_INT 0
19251: EQUAL
19252: IFFALSE 19276
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19254: CALL_OW 44
19258: PPUSH
19259: LD_VAR 0 4
19263: PPUSH
19264: LD_VAR 0 5
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: CALL_OW 48
// end ;
19276: LD_VAR 0 6
19280: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19281: LD_INT 0
19283: PPUSH
19284: PPUSH
// uc_side := your_side ;
19285: LD_ADDR_OWVAR 20
19289: PUSH
19290: LD_OWVAR 2
19294: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19295: LD_VAR 0 1
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: LD_INT 2
19305: PUSH
19306: LD_INT 3
19308: PUSH
19309: LD_INT 4
19311: PUSH
19312: LD_INT 5
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: IN
19322: IFFALSE 19334
// uc_nation := nation_american else
19324: LD_ADDR_OWVAR 21
19328: PUSH
19329: LD_INT 1
19331: ST_TO_ADDR
19332: GO 19377
// if chassis in [ 11 , 12 , 13 , 14 ] then
19334: LD_VAR 0 1
19338: PUSH
19339: LD_INT 11
19341: PUSH
19342: LD_INT 12
19344: PUSH
19345: LD_INT 13
19347: PUSH
19348: LD_INT 14
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: IN
19357: IFFALSE 19369
// uc_nation := nation_arabian else
19359: LD_ADDR_OWVAR 21
19363: PUSH
19364: LD_INT 2
19366: ST_TO_ADDR
19367: GO 19377
// uc_nation := nation_russian ;
19369: LD_ADDR_OWVAR 21
19373: PUSH
19374: LD_INT 3
19376: ST_TO_ADDR
// vc_chassis := chassis ;
19377: LD_ADDR_OWVAR 37
19381: PUSH
19382: LD_VAR 0 1
19386: ST_TO_ADDR
// vc_engine := engine ;
19387: LD_ADDR_OWVAR 39
19391: PUSH
19392: LD_VAR 0 2
19396: ST_TO_ADDR
// vc_control := control ;
19397: LD_ADDR_OWVAR 38
19401: PUSH
19402: LD_VAR 0 3
19406: ST_TO_ADDR
// vc_weapon := weapon ;
19407: LD_ADDR_OWVAR 40
19411: PUSH
19412: LD_VAR 0 4
19416: ST_TO_ADDR
// un := CreateVehicle ;
19417: LD_ADDR_VAR 0 8
19421: PUSH
19422: CALL_OW 45
19426: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19427: LD_VAR 0 8
19431: PPUSH
19432: LD_INT 0
19434: PPUSH
19435: LD_INT 5
19437: PPUSH
19438: CALL_OW 12
19442: PPUSH
19443: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19447: LD_VAR 0 8
19451: PPUSH
19452: LD_VAR 0 5
19456: PPUSH
19457: LD_VAR 0 6
19461: PPUSH
19462: LD_INT 1
19464: PPUSH
19465: CALL_OW 48
// end ;
19469: LD_VAR 0 7
19473: RET
// export hInvincible ; every 1 do
19474: GO 19476
19476: DISABLE
// hInvincible := [ ] ;
19477: LD_ADDR_EXP 82
19481: PUSH
19482: EMPTY
19483: ST_TO_ADDR
19484: END
// every 10 do var i ;
19485: GO 19487
19487: DISABLE
19488: LD_INT 0
19490: PPUSH
// begin enable ;
19491: ENABLE
// if not hInvincible then
19492: LD_EXP 82
19496: NOT
19497: IFFALSE 19501
// exit ;
19499: GO 19545
// for i in hInvincible do
19501: LD_ADDR_VAR 0 1
19505: PUSH
19506: LD_EXP 82
19510: PUSH
19511: FOR_IN
19512: IFFALSE 19543
// if GetLives ( i ) < 1000 then
19514: LD_VAR 0 1
19518: PPUSH
19519: CALL_OW 256
19523: PUSH
19524: LD_INT 1000
19526: LESS
19527: IFFALSE 19541
// SetLives ( i , 1000 ) ;
19529: LD_VAR 0 1
19533: PPUSH
19534: LD_INT 1000
19536: PPUSH
19537: CALL_OW 234
19541: GO 19511
19543: POP
19544: POP
// end ;
19545: PPOPN 1
19547: END
// export function hHackInvincible ; var i ; begin
19548: LD_INT 0
19550: PPUSH
19551: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19552: LD_ADDR_VAR 0 2
19556: PUSH
19557: LD_INT 2
19559: PUSH
19560: LD_INT 21
19562: PUSH
19563: LD_INT 1
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 21
19572: PUSH
19573: LD_INT 2
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: LIST
19584: PPUSH
19585: CALL_OW 69
19589: PUSH
19590: FOR_IN
19591: IFFALSE 19652
// if IsSelected ( i ) then
19593: LD_VAR 0 2
19597: PPUSH
19598: CALL_OW 306
19602: IFFALSE 19650
// begin if i in hInvincible then
19604: LD_VAR 0 2
19608: PUSH
19609: LD_EXP 82
19613: IN
19614: IFFALSE 19634
// hInvincible := hInvincible diff i else
19616: LD_ADDR_EXP 82
19620: PUSH
19621: LD_EXP 82
19625: PUSH
19626: LD_VAR 0 2
19630: DIFF
19631: ST_TO_ADDR
19632: GO 19650
// hInvincible := hInvincible union i ;
19634: LD_ADDR_EXP 82
19638: PUSH
19639: LD_EXP 82
19643: PUSH
19644: LD_VAR 0 2
19648: UNION
19649: ST_TO_ADDR
// end ;
19650: GO 19590
19652: POP
19653: POP
// end ;
19654: LD_VAR 0 1
19658: RET
// export function hHackInvisible ; var i , j ; begin
19659: LD_INT 0
19661: PPUSH
19662: PPUSH
19663: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19664: LD_ADDR_VAR 0 2
19668: PUSH
19669: LD_INT 21
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PPUSH
19679: CALL_OW 69
19683: PUSH
19684: FOR_IN
19685: IFFALSE 19709
// if IsSelected ( i ) then
19687: LD_VAR 0 2
19691: PPUSH
19692: CALL_OW 306
19696: IFFALSE 19707
// ComForceInvisible ( i ) ;
19698: LD_VAR 0 2
19702: PPUSH
19703: CALL_OW 496
19707: GO 19684
19709: POP
19710: POP
// end ;
19711: LD_VAR 0 1
19715: RET
// export function hHackChangeYourSide ; begin
19716: LD_INT 0
19718: PPUSH
// if your_side = 8 then
19719: LD_OWVAR 2
19723: PUSH
19724: LD_INT 8
19726: EQUAL
19727: IFFALSE 19739
// your_side := 0 else
19729: LD_ADDR_OWVAR 2
19733: PUSH
19734: LD_INT 0
19736: ST_TO_ADDR
19737: GO 19753
// your_side := your_side + 1 ;
19739: LD_ADDR_OWVAR 2
19743: PUSH
19744: LD_OWVAR 2
19748: PUSH
19749: LD_INT 1
19751: PLUS
19752: ST_TO_ADDR
// end ;
19753: LD_VAR 0 1
19757: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19758: LD_INT 0
19760: PPUSH
19761: PPUSH
19762: PPUSH
// for i in all_units do
19763: LD_ADDR_VAR 0 2
19767: PUSH
19768: LD_OWVAR 3
19772: PUSH
19773: FOR_IN
19774: IFFALSE 19852
// if IsSelected ( i ) then
19776: LD_VAR 0 2
19780: PPUSH
19781: CALL_OW 306
19785: IFFALSE 19850
// begin j := GetSide ( i ) ;
19787: LD_ADDR_VAR 0 3
19791: PUSH
19792: LD_VAR 0 2
19796: PPUSH
19797: CALL_OW 255
19801: ST_TO_ADDR
// if j = 8 then
19802: LD_VAR 0 3
19806: PUSH
19807: LD_INT 8
19809: EQUAL
19810: IFFALSE 19822
// j := 0 else
19812: LD_ADDR_VAR 0 3
19816: PUSH
19817: LD_INT 0
19819: ST_TO_ADDR
19820: GO 19836
// j := j + 1 ;
19822: LD_ADDR_VAR 0 3
19826: PUSH
19827: LD_VAR 0 3
19831: PUSH
19832: LD_INT 1
19834: PLUS
19835: ST_TO_ADDR
// SetSide ( i , j ) ;
19836: LD_VAR 0 2
19840: PPUSH
19841: LD_VAR 0 3
19845: PPUSH
19846: CALL_OW 235
// end ;
19850: GO 19773
19852: POP
19853: POP
// end ;
19854: LD_VAR 0 1
19858: RET
// export function hHackFog ; begin
19859: LD_INT 0
19861: PPUSH
// FogOff ( true ) ;
19862: LD_INT 1
19864: PPUSH
19865: CALL_OW 344
// end ;
19869: LD_VAR 0 1
19873: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19874: LD_INT 0
19876: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19877: LD_VAR 0 1
19881: PPUSH
19882: LD_VAR 0 2
19886: PPUSH
19887: LD_VAR 0 3
19891: PPUSH
19892: LD_INT 1
19894: PPUSH
19895: LD_INT 1
19897: PPUSH
19898: CALL_OW 483
// CenterOnXY ( x , y ) ;
19902: LD_VAR 0 2
19906: PPUSH
19907: LD_VAR 0 3
19911: PPUSH
19912: CALL_OW 84
// end ;
19916: LD_VAR 0 4
19920: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19921: LD_INT 0
19923: PPUSH
19924: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19925: LD_VAR 0 1
19929: NOT
19930: PUSH
19931: LD_VAR 0 2
19935: PPUSH
19936: LD_VAR 0 3
19940: PPUSH
19941: CALL_OW 488
19945: NOT
19946: OR
19947: PUSH
19948: LD_VAR 0 1
19952: PPUSH
19953: CALL_OW 266
19957: PUSH
19958: LD_INT 3
19960: NONEQUAL
19961: PUSH
19962: LD_VAR 0 1
19966: PPUSH
19967: CALL_OW 247
19971: PUSH
19972: LD_INT 1
19974: EQUAL
19975: NOT
19976: AND
19977: OR
19978: IFFALSE 19982
// exit ;
19980: GO 20131
// if GetType ( factory ) = unit_human then
19982: LD_VAR 0 1
19986: PPUSH
19987: CALL_OW 247
19991: PUSH
19992: LD_INT 1
19994: EQUAL
19995: IFFALSE 20012
// factory := IsInUnit ( factory ) ;
19997: LD_ADDR_VAR 0 1
20001: PUSH
20002: LD_VAR 0 1
20006: PPUSH
20007: CALL_OW 310
20011: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20012: LD_VAR 0 1
20016: PPUSH
20017: CALL_OW 266
20021: PUSH
20022: LD_INT 3
20024: NONEQUAL
20025: IFFALSE 20029
// exit ;
20027: GO 20131
// if HexInfo ( x , y ) = factory then
20029: LD_VAR 0 2
20033: PPUSH
20034: LD_VAR 0 3
20038: PPUSH
20039: CALL_OW 428
20043: PUSH
20044: LD_VAR 0 1
20048: EQUAL
20049: IFFALSE 20076
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20051: LD_ADDR_EXP 83
20055: PUSH
20056: LD_EXP 83
20060: PPUSH
20061: LD_VAR 0 1
20065: PPUSH
20066: LD_INT 0
20068: PPUSH
20069: CALL_OW 1
20073: ST_TO_ADDR
20074: GO 20127
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20076: LD_ADDR_EXP 83
20080: PUSH
20081: LD_EXP 83
20085: PPUSH
20086: LD_VAR 0 1
20090: PPUSH
20091: LD_VAR 0 1
20095: PPUSH
20096: CALL_OW 255
20100: PUSH
20101: LD_VAR 0 1
20105: PUSH
20106: LD_VAR 0 2
20110: PUSH
20111: LD_VAR 0 3
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: PPUSH
20122: CALL_OW 1
20126: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20127: CALL 20136 0 0
// end ;
20131: LD_VAR 0 4
20135: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20136: LD_INT 0
20138: PPUSH
20139: PPUSH
20140: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20141: LD_STRING resetFactoryWaypoint();
20143: PPUSH
20144: CALL_OW 559
// if factoryWaypoints then
20148: LD_EXP 83
20152: IFFALSE 20278
// begin list := PrepareArray ( factoryWaypoints ) ;
20154: LD_ADDR_VAR 0 3
20158: PUSH
20159: LD_EXP 83
20163: PPUSH
20164: CALL 66969 0 1
20168: ST_TO_ADDR
// for i := 1 to list do
20169: LD_ADDR_VAR 0 2
20173: PUSH
20174: DOUBLE
20175: LD_INT 1
20177: DEC
20178: ST_TO_ADDR
20179: LD_VAR 0 3
20183: PUSH
20184: FOR_TO
20185: IFFALSE 20276
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20187: LD_STRING setFactoryWaypointXY(
20189: PUSH
20190: LD_VAR 0 3
20194: PUSH
20195: LD_VAR 0 2
20199: ARRAY
20200: PUSH
20201: LD_INT 1
20203: ARRAY
20204: STR
20205: PUSH
20206: LD_STRING ,
20208: STR
20209: PUSH
20210: LD_VAR 0 3
20214: PUSH
20215: LD_VAR 0 2
20219: ARRAY
20220: PUSH
20221: LD_INT 2
20223: ARRAY
20224: STR
20225: PUSH
20226: LD_STRING ,
20228: STR
20229: PUSH
20230: LD_VAR 0 3
20234: PUSH
20235: LD_VAR 0 2
20239: ARRAY
20240: PUSH
20241: LD_INT 3
20243: ARRAY
20244: STR
20245: PUSH
20246: LD_STRING ,
20248: STR
20249: PUSH
20250: LD_VAR 0 3
20254: PUSH
20255: LD_VAR 0 2
20259: ARRAY
20260: PUSH
20261: LD_INT 4
20263: ARRAY
20264: STR
20265: PUSH
20266: LD_STRING )
20268: STR
20269: PPUSH
20270: CALL_OW 559
20274: GO 20184
20276: POP
20277: POP
// end ; end ;
20278: LD_VAR 0 1
20282: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20283: LD_INT 0
20285: PPUSH
// if HexInfo ( x , y ) = warehouse then
20286: LD_VAR 0 2
20290: PPUSH
20291: LD_VAR 0 3
20295: PPUSH
20296: CALL_OW 428
20300: PUSH
20301: LD_VAR 0 1
20305: EQUAL
20306: IFFALSE 20333
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20308: LD_ADDR_EXP 84
20312: PUSH
20313: LD_EXP 84
20317: PPUSH
20318: LD_VAR 0 1
20322: PPUSH
20323: LD_INT 0
20325: PPUSH
20326: CALL_OW 1
20330: ST_TO_ADDR
20331: GO 20384
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20333: LD_ADDR_EXP 84
20337: PUSH
20338: LD_EXP 84
20342: PPUSH
20343: LD_VAR 0 1
20347: PPUSH
20348: LD_VAR 0 1
20352: PPUSH
20353: CALL_OW 255
20357: PUSH
20358: LD_VAR 0 1
20362: PUSH
20363: LD_VAR 0 2
20367: PUSH
20368: LD_VAR 0 3
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: PPUSH
20379: CALL_OW 1
20383: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20384: CALL 20393 0 0
// end ;
20388: LD_VAR 0 4
20392: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20393: LD_INT 0
20395: PPUSH
20396: PPUSH
20397: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20398: LD_STRING resetWarehouseGatheringPoints();
20400: PPUSH
20401: CALL_OW 559
// if warehouseGatheringPoints then
20405: LD_EXP 84
20409: IFFALSE 20535
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20411: LD_ADDR_VAR 0 3
20415: PUSH
20416: LD_EXP 84
20420: PPUSH
20421: CALL 66969 0 1
20425: ST_TO_ADDR
// for i := 1 to list do
20426: LD_ADDR_VAR 0 2
20430: PUSH
20431: DOUBLE
20432: LD_INT 1
20434: DEC
20435: ST_TO_ADDR
20436: LD_VAR 0 3
20440: PUSH
20441: FOR_TO
20442: IFFALSE 20533
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20444: LD_STRING setWarehouseGatheringPointXY(
20446: PUSH
20447: LD_VAR 0 3
20451: PUSH
20452: LD_VAR 0 2
20456: ARRAY
20457: PUSH
20458: LD_INT 1
20460: ARRAY
20461: STR
20462: PUSH
20463: LD_STRING ,
20465: STR
20466: PUSH
20467: LD_VAR 0 3
20471: PUSH
20472: LD_VAR 0 2
20476: ARRAY
20477: PUSH
20478: LD_INT 2
20480: ARRAY
20481: STR
20482: PUSH
20483: LD_STRING ,
20485: STR
20486: PUSH
20487: LD_VAR 0 3
20491: PUSH
20492: LD_VAR 0 2
20496: ARRAY
20497: PUSH
20498: LD_INT 3
20500: ARRAY
20501: STR
20502: PUSH
20503: LD_STRING ,
20505: STR
20506: PUSH
20507: LD_VAR 0 3
20511: PUSH
20512: LD_VAR 0 2
20516: ARRAY
20517: PUSH
20518: LD_INT 4
20520: ARRAY
20521: STR
20522: PUSH
20523: LD_STRING )
20525: STR
20526: PPUSH
20527: CALL_OW 559
20531: GO 20441
20533: POP
20534: POP
// end ; end ;
20535: LD_VAR 0 1
20539: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20540: LD_EXP 84
20544: IFFALSE 21229
20546: GO 20548
20548: DISABLE
20549: LD_INT 0
20551: PPUSH
20552: PPUSH
20553: PPUSH
20554: PPUSH
20555: PPUSH
20556: PPUSH
20557: PPUSH
20558: PPUSH
20559: PPUSH
// begin enable ;
20560: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20561: LD_ADDR_VAR 0 3
20565: PUSH
20566: LD_EXP 84
20570: PPUSH
20571: CALL 66969 0 1
20575: ST_TO_ADDR
// if not list then
20576: LD_VAR 0 3
20580: NOT
20581: IFFALSE 20585
// exit ;
20583: GO 21229
// for i := 1 to list do
20585: LD_ADDR_VAR 0 1
20589: PUSH
20590: DOUBLE
20591: LD_INT 1
20593: DEC
20594: ST_TO_ADDR
20595: LD_VAR 0 3
20599: PUSH
20600: FOR_TO
20601: IFFALSE 21227
// begin depot := list [ i ] [ 2 ] ;
20603: LD_ADDR_VAR 0 8
20607: PUSH
20608: LD_VAR 0 3
20612: PUSH
20613: LD_VAR 0 1
20617: ARRAY
20618: PUSH
20619: LD_INT 2
20621: ARRAY
20622: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20623: LD_ADDR_VAR 0 5
20627: PUSH
20628: LD_VAR 0 3
20632: PUSH
20633: LD_VAR 0 1
20637: ARRAY
20638: PUSH
20639: LD_INT 1
20641: ARRAY
20642: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20643: LD_VAR 0 8
20647: PPUSH
20648: CALL_OW 301
20652: PUSH
20653: LD_VAR 0 5
20657: PUSH
20658: LD_VAR 0 8
20662: PPUSH
20663: CALL_OW 255
20667: NONEQUAL
20668: OR
20669: IFFALSE 20698
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20671: LD_ADDR_EXP 84
20675: PUSH
20676: LD_EXP 84
20680: PPUSH
20681: LD_VAR 0 8
20685: PPUSH
20686: LD_INT 0
20688: PPUSH
20689: CALL_OW 1
20693: ST_TO_ADDR
// exit ;
20694: POP
20695: POP
20696: GO 21229
// end ; x := list [ i ] [ 3 ] ;
20698: LD_ADDR_VAR 0 6
20702: PUSH
20703: LD_VAR 0 3
20707: PUSH
20708: LD_VAR 0 1
20712: ARRAY
20713: PUSH
20714: LD_INT 3
20716: ARRAY
20717: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20718: LD_ADDR_VAR 0 7
20722: PUSH
20723: LD_VAR 0 3
20727: PUSH
20728: LD_VAR 0 1
20732: ARRAY
20733: PUSH
20734: LD_INT 4
20736: ARRAY
20737: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20738: LD_ADDR_VAR 0 9
20742: PUSH
20743: LD_VAR 0 6
20747: PPUSH
20748: LD_VAR 0 7
20752: PPUSH
20753: LD_INT 16
20755: PPUSH
20756: CALL 65557 0 3
20760: ST_TO_ADDR
// if not cratesNearbyPoint then
20761: LD_VAR 0 9
20765: NOT
20766: IFFALSE 20772
// exit ;
20768: POP
20769: POP
20770: GO 21229
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20772: LD_ADDR_VAR 0 4
20776: PUSH
20777: LD_INT 22
20779: PUSH
20780: LD_VAR 0 5
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 3
20791: PUSH
20792: LD_INT 60
20794: PUSH
20795: EMPTY
20796: LIST
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 91
20804: PUSH
20805: LD_VAR 0 8
20809: PUSH
20810: LD_INT 6
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 2
20820: PUSH
20821: LD_INT 25
20823: PUSH
20824: LD_INT 2
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 25
20833: PUSH
20834: LD_INT 16
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: LIST
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: PPUSH
20852: CALL_OW 69
20856: PUSH
20857: LD_VAR 0 8
20861: PPUSH
20862: CALL_OW 313
20866: PPUSH
20867: LD_INT 3
20869: PUSH
20870: LD_INT 60
20872: PUSH
20873: EMPTY
20874: LIST
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 2
20882: PUSH
20883: LD_INT 25
20885: PUSH
20886: LD_INT 2
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 25
20895: PUSH
20896: LD_INT 16
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PPUSH
20912: CALL_OW 72
20916: UNION
20917: ST_TO_ADDR
// if tmp then
20918: LD_VAR 0 4
20922: IFFALSE 21002
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20924: LD_ADDR_VAR 0 4
20928: PUSH
20929: LD_VAR 0 4
20933: PPUSH
20934: LD_INT 3
20936: PPUSH
20937: CALL 63526 0 2
20941: ST_TO_ADDR
// for j in tmp do
20942: LD_ADDR_VAR 0 2
20946: PUSH
20947: LD_VAR 0 4
20951: PUSH
20952: FOR_IN
20953: IFFALSE 20996
// begin if IsInUnit ( j ) then
20955: LD_VAR 0 2
20959: PPUSH
20960: CALL_OW 310
20964: IFFALSE 20975
// ComExit ( j ) ;
20966: LD_VAR 0 2
20970: PPUSH
20971: CALL 63609 0 1
// AddComCollect ( j , x , y ) ;
20975: LD_VAR 0 2
20979: PPUSH
20980: LD_VAR 0 6
20984: PPUSH
20985: LD_VAR 0 7
20989: PPUSH
20990: CALL_OW 177
// end ;
20994: GO 20952
20996: POP
20997: POP
// exit ;
20998: POP
20999: POP
21000: GO 21229
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21002: LD_ADDR_VAR 0 4
21006: PUSH
21007: LD_INT 22
21009: PUSH
21010: LD_VAR 0 5
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 91
21021: PUSH
21022: LD_VAR 0 8
21026: PUSH
21027: LD_INT 8
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 2
21037: PUSH
21038: LD_INT 34
21040: PUSH
21041: LD_INT 12
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 34
21050: PUSH
21051: LD_INT 51
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 34
21060: PUSH
21061: LD_INT 32
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 34
21070: PUSH
21071: LD_INT 89
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: LIST
21089: PPUSH
21090: CALL_OW 69
21094: ST_TO_ADDR
// if tmp then
21095: LD_VAR 0 4
21099: IFFALSE 21225
// begin for j in tmp do
21101: LD_ADDR_VAR 0 2
21105: PUSH
21106: LD_VAR 0 4
21110: PUSH
21111: FOR_IN
21112: IFFALSE 21223
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21114: LD_VAR 0 2
21118: PPUSH
21119: CALL_OW 262
21123: PUSH
21124: LD_INT 3
21126: EQUAL
21127: PUSH
21128: LD_VAR 0 2
21132: PPUSH
21133: CALL_OW 261
21137: PUSH
21138: LD_INT 20
21140: GREATER
21141: OR
21142: PUSH
21143: LD_VAR 0 2
21147: PPUSH
21148: CALL_OW 314
21152: NOT
21153: AND
21154: PUSH
21155: LD_VAR 0 2
21159: PPUSH
21160: CALL_OW 263
21164: PUSH
21165: LD_INT 1
21167: NONEQUAL
21168: PUSH
21169: LD_VAR 0 2
21173: PPUSH
21174: CALL_OW 311
21178: OR
21179: AND
21180: IFFALSE 21221
// begin ComCollect ( j , x , y ) ;
21182: LD_VAR 0 2
21186: PPUSH
21187: LD_VAR 0 6
21191: PPUSH
21192: LD_VAR 0 7
21196: PPUSH
21197: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21201: LD_VAR 0 2
21205: PPUSH
21206: LD_VAR 0 8
21210: PPUSH
21211: CALL_OW 172
// exit ;
21215: POP
21216: POP
21217: POP
21218: POP
21219: GO 21229
// end ;
21221: GO 21111
21223: POP
21224: POP
// end ; end ;
21225: GO 20600
21227: POP
21228: POP
// end ; end_of_file
21229: PPOPN 9
21231: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21232: LD_INT 0
21234: PPUSH
21235: PPUSH
21236: PPUSH
21237: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21238: LD_VAR 0 1
21242: PPUSH
21243: CALL_OW 264
21247: PUSH
21248: LD_INT 91
21250: EQUAL
21251: IFFALSE 21323
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21253: LD_INT 68
21255: PPUSH
21256: LD_VAR 0 1
21260: PPUSH
21261: CALL_OW 255
21265: PPUSH
21266: CALL_OW 321
21270: PUSH
21271: LD_INT 2
21273: EQUAL
21274: IFFALSE 21286
// eff := 70 else
21276: LD_ADDR_VAR 0 4
21280: PUSH
21281: LD_INT 70
21283: ST_TO_ADDR
21284: GO 21294
// eff := 30 ;
21286: LD_ADDR_VAR 0 4
21290: PUSH
21291: LD_INT 30
21293: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21294: LD_VAR 0 1
21298: PPUSH
21299: CALL_OW 250
21303: PPUSH
21304: LD_VAR 0 1
21308: PPUSH
21309: CALL_OW 251
21313: PPUSH
21314: LD_VAR 0 4
21318: PPUSH
21319: CALL_OW 495
// end ; end ;
21323: LD_VAR 0 2
21327: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21328: LD_INT 0
21330: PPUSH
// end ;
21331: LD_VAR 0 4
21335: RET
// export function SOS_Command ( cmd ) ; begin
21336: LD_INT 0
21338: PPUSH
// end ;
21339: LD_VAR 0 2
21343: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21344: LD_INT 0
21346: PPUSH
// end ;
21347: LD_VAR 0 6
21351: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21352: LD_INT 0
21354: PPUSH
21355: PPUSH
// if not vehicle or not factory then
21356: LD_VAR 0 1
21360: NOT
21361: PUSH
21362: LD_VAR 0 2
21366: NOT
21367: OR
21368: IFFALSE 21372
// exit ;
21370: GO 21603
// if factoryWaypoints >= factory then
21372: LD_EXP 83
21376: PUSH
21377: LD_VAR 0 2
21381: GREATEREQUAL
21382: IFFALSE 21603
// if factoryWaypoints [ factory ] then
21384: LD_EXP 83
21388: PUSH
21389: LD_VAR 0 2
21393: ARRAY
21394: IFFALSE 21603
// begin if GetControl ( vehicle ) = control_manual then
21396: LD_VAR 0 1
21400: PPUSH
21401: CALL_OW 263
21405: PUSH
21406: LD_INT 1
21408: EQUAL
21409: IFFALSE 21490
// begin driver := IsDrivenBy ( vehicle ) ;
21411: LD_ADDR_VAR 0 4
21415: PUSH
21416: LD_VAR 0 1
21420: PPUSH
21421: CALL_OW 311
21425: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21426: LD_VAR 0 4
21430: PPUSH
21431: LD_EXP 83
21435: PUSH
21436: LD_VAR 0 2
21440: ARRAY
21441: PUSH
21442: LD_INT 3
21444: ARRAY
21445: PPUSH
21446: LD_EXP 83
21450: PUSH
21451: LD_VAR 0 2
21455: ARRAY
21456: PUSH
21457: LD_INT 4
21459: ARRAY
21460: PPUSH
21461: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21465: LD_VAR 0 4
21469: PPUSH
21470: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21474: LD_VAR 0 4
21478: PPUSH
21479: LD_VAR 0 2
21483: PPUSH
21484: CALL_OW 180
// end else
21488: GO 21603
// if GetControl ( vehicle ) = control_remote then
21490: LD_VAR 0 1
21494: PPUSH
21495: CALL_OW 263
21499: PUSH
21500: LD_INT 2
21502: EQUAL
21503: IFFALSE 21564
// begin wait ( 0 0$2 ) ;
21505: LD_INT 70
21507: PPUSH
21508: CALL_OW 67
// if Connect ( vehicle ) then
21512: LD_VAR 0 1
21516: PPUSH
21517: CALL 33849 0 1
21521: IFFALSE 21562
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21523: LD_VAR 0 1
21527: PPUSH
21528: LD_EXP 83
21532: PUSH
21533: LD_VAR 0 2
21537: ARRAY
21538: PUSH
21539: LD_INT 3
21541: ARRAY
21542: PPUSH
21543: LD_EXP 83
21547: PUSH
21548: LD_VAR 0 2
21552: ARRAY
21553: PUSH
21554: LD_INT 4
21556: ARRAY
21557: PPUSH
21558: CALL_OW 171
// end else
21562: GO 21603
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21564: LD_VAR 0 1
21568: PPUSH
21569: LD_EXP 83
21573: PUSH
21574: LD_VAR 0 2
21578: ARRAY
21579: PUSH
21580: LD_INT 3
21582: ARRAY
21583: PPUSH
21584: LD_EXP 83
21588: PUSH
21589: LD_VAR 0 2
21593: ARRAY
21594: PUSH
21595: LD_INT 4
21597: ARRAY
21598: PPUSH
21599: CALL_OW 171
// end ; end ;
21603: LD_VAR 0 3
21607: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21608: LD_INT 0
21610: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21611: LD_VAR 0 1
21615: PUSH
21616: LD_INT 250
21618: EQUAL
21619: PUSH
21620: LD_VAR 0 2
21624: PPUSH
21625: CALL_OW 264
21629: PUSH
21630: LD_INT 81
21632: EQUAL
21633: AND
21634: IFFALSE 21655
// MinerPlaceMine ( unit , x , y ) ;
21636: LD_VAR 0 2
21640: PPUSH
21641: LD_VAR 0 4
21645: PPUSH
21646: LD_VAR 0 5
21650: PPUSH
21651: CALL 24040 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21655: LD_VAR 0 1
21659: PUSH
21660: LD_INT 251
21662: EQUAL
21663: PUSH
21664: LD_VAR 0 2
21668: PPUSH
21669: CALL_OW 264
21673: PUSH
21674: LD_INT 81
21676: EQUAL
21677: AND
21678: IFFALSE 21699
// MinerDetonateMine ( unit , x , y ) ;
21680: LD_VAR 0 2
21684: PPUSH
21685: LD_VAR 0 4
21689: PPUSH
21690: LD_VAR 0 5
21694: PPUSH
21695: CALL 24315 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21699: LD_VAR 0 1
21703: PUSH
21704: LD_INT 252
21706: EQUAL
21707: PUSH
21708: LD_VAR 0 2
21712: PPUSH
21713: CALL_OW 264
21717: PUSH
21718: LD_INT 81
21720: EQUAL
21721: AND
21722: IFFALSE 21743
// MinerCreateMinefield ( unit , x , y ) ;
21724: LD_VAR 0 2
21728: PPUSH
21729: LD_VAR 0 4
21733: PPUSH
21734: LD_VAR 0 5
21738: PPUSH
21739: CALL 24732 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21743: LD_VAR 0 1
21747: PUSH
21748: LD_INT 253
21750: EQUAL
21751: PUSH
21752: LD_VAR 0 2
21756: PPUSH
21757: CALL_OW 257
21761: PUSH
21762: LD_INT 5
21764: EQUAL
21765: AND
21766: IFFALSE 21787
// ComBinocular ( unit , x , y ) ;
21768: LD_VAR 0 2
21772: PPUSH
21773: LD_VAR 0 4
21777: PPUSH
21778: LD_VAR 0 5
21782: PPUSH
21783: CALL 25101 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21787: LD_VAR 0 1
21791: PUSH
21792: LD_INT 254
21794: EQUAL
21795: PUSH
21796: LD_VAR 0 2
21800: PPUSH
21801: CALL_OW 264
21805: PUSH
21806: LD_INT 99
21808: EQUAL
21809: AND
21810: PUSH
21811: LD_VAR 0 3
21815: PPUSH
21816: CALL_OW 263
21820: PUSH
21821: LD_INT 3
21823: EQUAL
21824: AND
21825: IFFALSE 21841
// HackDestroyVehicle ( unit , selectedUnit ) ;
21827: LD_VAR 0 2
21831: PPUSH
21832: LD_VAR 0 3
21836: PPUSH
21837: CALL 23404 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21841: LD_VAR 0 1
21845: PUSH
21846: LD_INT 255
21848: EQUAL
21849: PUSH
21850: LD_VAR 0 2
21854: PPUSH
21855: CALL_OW 264
21859: PUSH
21860: LD_INT 14
21862: PUSH
21863: LD_INT 53
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: IN
21870: AND
21871: PUSH
21872: LD_VAR 0 4
21876: PPUSH
21877: LD_VAR 0 5
21881: PPUSH
21882: CALL_OW 488
21886: AND
21887: IFFALSE 21911
// CutTreeXYR ( unit , x , y , 12 ) ;
21889: LD_VAR 0 2
21893: PPUSH
21894: LD_VAR 0 4
21898: PPUSH
21899: LD_VAR 0 5
21903: PPUSH
21904: LD_INT 12
21906: PPUSH
21907: CALL 21974 0 4
// if cmd = 256 then
21911: LD_VAR 0 1
21915: PUSH
21916: LD_INT 256
21918: EQUAL
21919: IFFALSE 21940
// SetFactoryWaypoint ( unit , x , y ) ;
21921: LD_VAR 0 2
21925: PPUSH
21926: LD_VAR 0 4
21930: PPUSH
21931: LD_VAR 0 5
21935: PPUSH
21936: CALL 19921 0 3
// if cmd = 257 then
21940: LD_VAR 0 1
21944: PUSH
21945: LD_INT 257
21947: EQUAL
21948: IFFALSE 21969
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21950: LD_VAR 0 2
21954: PPUSH
21955: LD_VAR 0 4
21959: PPUSH
21960: LD_VAR 0 5
21964: PPUSH
21965: CALL 20283 0 3
// end ;
21969: LD_VAR 0 6
21973: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21974: LD_INT 0
21976: PPUSH
21977: PPUSH
21978: PPUSH
21979: PPUSH
21980: PPUSH
21981: PPUSH
21982: PPUSH
21983: PPUSH
21984: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21985: LD_VAR 0 1
21989: NOT
21990: PUSH
21991: LD_VAR 0 2
21995: PPUSH
21996: LD_VAR 0 3
22000: PPUSH
22001: CALL_OW 488
22005: NOT
22006: OR
22007: PUSH
22008: LD_VAR 0 4
22012: NOT
22013: OR
22014: IFFALSE 22018
// exit ;
22016: GO 22358
// list := [ ] ;
22018: LD_ADDR_VAR 0 13
22022: PUSH
22023: EMPTY
22024: ST_TO_ADDR
// if x - r < 0 then
22025: LD_VAR 0 2
22029: PUSH
22030: LD_VAR 0 4
22034: MINUS
22035: PUSH
22036: LD_INT 0
22038: LESS
22039: IFFALSE 22051
// min_x := 0 else
22041: LD_ADDR_VAR 0 7
22045: PUSH
22046: LD_INT 0
22048: ST_TO_ADDR
22049: GO 22067
// min_x := x - r ;
22051: LD_ADDR_VAR 0 7
22055: PUSH
22056: LD_VAR 0 2
22060: PUSH
22061: LD_VAR 0 4
22065: MINUS
22066: ST_TO_ADDR
// if y - r < 0 then
22067: LD_VAR 0 3
22071: PUSH
22072: LD_VAR 0 4
22076: MINUS
22077: PUSH
22078: LD_INT 0
22080: LESS
22081: IFFALSE 22093
// min_y := 0 else
22083: LD_ADDR_VAR 0 8
22087: PUSH
22088: LD_INT 0
22090: ST_TO_ADDR
22091: GO 22109
// min_y := y - r ;
22093: LD_ADDR_VAR 0 8
22097: PUSH
22098: LD_VAR 0 3
22102: PUSH
22103: LD_VAR 0 4
22107: MINUS
22108: ST_TO_ADDR
// max_x := x + r ;
22109: LD_ADDR_VAR 0 9
22113: PUSH
22114: LD_VAR 0 2
22118: PUSH
22119: LD_VAR 0 4
22123: PLUS
22124: ST_TO_ADDR
// max_y := y + r ;
22125: LD_ADDR_VAR 0 10
22129: PUSH
22130: LD_VAR 0 3
22134: PUSH
22135: LD_VAR 0 4
22139: PLUS
22140: ST_TO_ADDR
// for _x = min_x to max_x do
22141: LD_ADDR_VAR 0 11
22145: PUSH
22146: DOUBLE
22147: LD_VAR 0 7
22151: DEC
22152: ST_TO_ADDR
22153: LD_VAR 0 9
22157: PUSH
22158: FOR_TO
22159: IFFALSE 22276
// for _y = min_y to max_y do
22161: LD_ADDR_VAR 0 12
22165: PUSH
22166: DOUBLE
22167: LD_VAR 0 8
22171: DEC
22172: ST_TO_ADDR
22173: LD_VAR 0 10
22177: PUSH
22178: FOR_TO
22179: IFFALSE 22272
// begin if not ValidHex ( _x , _y ) then
22181: LD_VAR 0 11
22185: PPUSH
22186: LD_VAR 0 12
22190: PPUSH
22191: CALL_OW 488
22195: NOT
22196: IFFALSE 22200
// continue ;
22198: GO 22178
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22200: LD_VAR 0 11
22204: PPUSH
22205: LD_VAR 0 12
22209: PPUSH
22210: CALL_OW 351
22214: PUSH
22215: LD_VAR 0 11
22219: PPUSH
22220: LD_VAR 0 12
22224: PPUSH
22225: CALL_OW 554
22229: AND
22230: IFFALSE 22270
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22232: LD_ADDR_VAR 0 13
22236: PUSH
22237: LD_VAR 0 13
22241: PPUSH
22242: LD_VAR 0 13
22246: PUSH
22247: LD_INT 1
22249: PLUS
22250: PPUSH
22251: LD_VAR 0 11
22255: PUSH
22256: LD_VAR 0 12
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PPUSH
22265: CALL_OW 2
22269: ST_TO_ADDR
// end ;
22270: GO 22178
22272: POP
22273: POP
22274: GO 22158
22276: POP
22277: POP
// if not list then
22278: LD_VAR 0 13
22282: NOT
22283: IFFALSE 22287
// exit ;
22285: GO 22358
// for i in list do
22287: LD_ADDR_VAR 0 6
22291: PUSH
22292: LD_VAR 0 13
22296: PUSH
22297: FOR_IN
22298: IFFALSE 22356
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22300: LD_VAR 0 1
22304: PPUSH
22305: LD_STRING M
22307: PUSH
22308: LD_VAR 0 6
22312: PUSH
22313: LD_INT 1
22315: ARRAY
22316: PUSH
22317: LD_VAR 0 6
22321: PUSH
22322: LD_INT 2
22324: ARRAY
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: LD_INT 0
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: PUSH
22347: EMPTY
22348: LIST
22349: PPUSH
22350: CALL_OW 447
22354: GO 22297
22356: POP
22357: POP
// end ;
22358: LD_VAR 0 5
22362: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22363: LD_EXP 86
22367: NOT
22368: IFFALSE 22418
22370: GO 22372
22372: DISABLE
// begin initHack := true ;
22373: LD_ADDR_EXP 86
22377: PUSH
22378: LD_INT 1
22380: ST_TO_ADDR
// hackTanks := [ ] ;
22381: LD_ADDR_EXP 87
22385: PUSH
22386: EMPTY
22387: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22388: LD_ADDR_EXP 88
22392: PUSH
22393: EMPTY
22394: ST_TO_ADDR
// hackLimit := 3 ;
22395: LD_ADDR_EXP 89
22399: PUSH
22400: LD_INT 3
22402: ST_TO_ADDR
// hackDist := 12 ;
22403: LD_ADDR_EXP 90
22407: PUSH
22408: LD_INT 12
22410: ST_TO_ADDR
// hackCounter := [ ] ;
22411: LD_ADDR_EXP 91
22415: PUSH
22416: EMPTY
22417: ST_TO_ADDR
// end ;
22418: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22419: LD_EXP 86
22423: PUSH
22424: LD_INT 34
22426: PUSH
22427: LD_INT 99
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PPUSH
22434: CALL_OW 69
22438: AND
22439: IFFALSE 22692
22441: GO 22443
22443: DISABLE
22444: LD_INT 0
22446: PPUSH
22447: PPUSH
// begin enable ;
22448: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22449: LD_ADDR_VAR 0 1
22453: PUSH
22454: LD_INT 34
22456: PUSH
22457: LD_INT 99
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PPUSH
22464: CALL_OW 69
22468: PUSH
22469: FOR_IN
22470: IFFALSE 22690
// begin if not i in hackTanks then
22472: LD_VAR 0 1
22476: PUSH
22477: LD_EXP 87
22481: IN
22482: NOT
22483: IFFALSE 22566
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22485: LD_ADDR_EXP 87
22489: PUSH
22490: LD_EXP 87
22494: PPUSH
22495: LD_EXP 87
22499: PUSH
22500: LD_INT 1
22502: PLUS
22503: PPUSH
22504: LD_VAR 0 1
22508: PPUSH
22509: CALL_OW 1
22513: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22514: LD_ADDR_EXP 88
22518: PUSH
22519: LD_EXP 88
22523: PPUSH
22524: LD_EXP 88
22528: PUSH
22529: LD_INT 1
22531: PLUS
22532: PPUSH
22533: EMPTY
22534: PPUSH
22535: CALL_OW 1
22539: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22540: LD_ADDR_EXP 91
22544: PUSH
22545: LD_EXP 91
22549: PPUSH
22550: LD_EXP 91
22554: PUSH
22555: LD_INT 1
22557: PLUS
22558: PPUSH
22559: EMPTY
22560: PPUSH
22561: CALL_OW 1
22565: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22566: LD_VAR 0 1
22570: PPUSH
22571: CALL_OW 302
22575: NOT
22576: IFFALSE 22589
// begin HackUnlinkAll ( i ) ;
22578: LD_VAR 0 1
22582: PPUSH
22583: CALL 22695 0 1
// continue ;
22587: GO 22469
// end ; HackCheckCapturedStatus ( i ) ;
22589: LD_VAR 0 1
22593: PPUSH
22594: CALL 23138 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22598: LD_ADDR_VAR 0 2
22602: PUSH
22603: LD_INT 81
22605: PUSH
22606: LD_VAR 0 1
22610: PPUSH
22611: CALL_OW 255
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 33
22622: PUSH
22623: LD_INT 3
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 91
22632: PUSH
22633: LD_VAR 0 1
22637: PUSH
22638: LD_EXP 90
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 50
22650: PUSH
22651: EMPTY
22652: LIST
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: PPUSH
22660: CALL_OW 69
22664: ST_TO_ADDR
// if not tmp then
22665: LD_VAR 0 2
22669: NOT
22670: IFFALSE 22674
// continue ;
22672: GO 22469
// HackLink ( i , tmp ) ;
22674: LD_VAR 0 1
22678: PPUSH
22679: LD_VAR 0 2
22683: PPUSH
22684: CALL 22831 0 2
// end ;
22688: GO 22469
22690: POP
22691: POP
// end ;
22692: PPOPN 2
22694: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22695: LD_INT 0
22697: PPUSH
22698: PPUSH
22699: PPUSH
// if not hack in hackTanks then
22700: LD_VAR 0 1
22704: PUSH
22705: LD_EXP 87
22709: IN
22710: NOT
22711: IFFALSE 22715
// exit ;
22713: GO 22826
// index := GetElementIndex ( hackTanks , hack ) ;
22715: LD_ADDR_VAR 0 4
22719: PUSH
22720: LD_EXP 87
22724: PPUSH
22725: LD_VAR 0 1
22729: PPUSH
22730: CALL 30665 0 2
22734: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22735: LD_EXP 88
22739: PUSH
22740: LD_VAR 0 4
22744: ARRAY
22745: IFFALSE 22826
// begin for i in hackTanksCaptured [ index ] do
22747: LD_ADDR_VAR 0 3
22751: PUSH
22752: LD_EXP 88
22756: PUSH
22757: LD_VAR 0 4
22761: ARRAY
22762: PUSH
22763: FOR_IN
22764: IFFALSE 22790
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22766: LD_VAR 0 3
22770: PUSH
22771: LD_INT 1
22773: ARRAY
22774: PPUSH
22775: LD_VAR 0 3
22779: PUSH
22780: LD_INT 2
22782: ARRAY
22783: PPUSH
22784: CALL_OW 235
22788: GO 22763
22790: POP
22791: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22792: LD_ADDR_EXP 88
22796: PUSH
22797: LD_EXP 88
22801: PPUSH
22802: LD_VAR 0 4
22806: PPUSH
22807: EMPTY
22808: PPUSH
22809: CALL_OW 1
22813: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22814: LD_VAR 0 1
22818: PPUSH
22819: LD_INT 0
22821: PPUSH
22822: CALL_OW 505
// end ; end ;
22826: LD_VAR 0 2
22830: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22831: LD_INT 0
22833: PPUSH
22834: PPUSH
22835: PPUSH
// if not hack in hackTanks or not vehicles then
22836: LD_VAR 0 1
22840: PUSH
22841: LD_EXP 87
22845: IN
22846: NOT
22847: PUSH
22848: LD_VAR 0 2
22852: NOT
22853: OR
22854: IFFALSE 22858
// exit ;
22856: GO 23133
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22858: LD_ADDR_VAR 0 2
22862: PUSH
22863: LD_VAR 0 1
22867: PPUSH
22868: LD_VAR 0 2
22872: PPUSH
22873: LD_INT 1
22875: PPUSH
22876: LD_INT 1
22878: PPUSH
22879: CALL 31315 0 4
22883: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22884: LD_ADDR_VAR 0 5
22888: PUSH
22889: LD_EXP 87
22893: PPUSH
22894: LD_VAR 0 1
22898: PPUSH
22899: CALL 30665 0 2
22903: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22904: LD_EXP 88
22908: PUSH
22909: LD_VAR 0 5
22913: ARRAY
22914: PUSH
22915: LD_EXP 89
22919: LESS
22920: IFFALSE 23109
// begin for i := 1 to vehicles do
22922: LD_ADDR_VAR 0 4
22926: PUSH
22927: DOUBLE
22928: LD_INT 1
22930: DEC
22931: ST_TO_ADDR
22932: LD_VAR 0 2
22936: PUSH
22937: FOR_TO
22938: IFFALSE 23107
// begin if hackTanksCaptured [ index ] = hackLimit then
22940: LD_EXP 88
22944: PUSH
22945: LD_VAR 0 5
22949: ARRAY
22950: PUSH
22951: LD_EXP 89
22955: EQUAL
22956: IFFALSE 22960
// break ;
22958: GO 23107
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22960: LD_ADDR_EXP 91
22964: PUSH
22965: LD_EXP 91
22969: PPUSH
22970: LD_VAR 0 5
22974: PPUSH
22975: LD_EXP 91
22979: PUSH
22980: LD_VAR 0 5
22984: ARRAY
22985: PUSH
22986: LD_INT 1
22988: PLUS
22989: PPUSH
22990: CALL_OW 1
22994: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22995: LD_ADDR_EXP 88
22999: PUSH
23000: LD_EXP 88
23004: PPUSH
23005: LD_VAR 0 5
23009: PUSH
23010: LD_EXP 88
23014: PUSH
23015: LD_VAR 0 5
23019: ARRAY
23020: PUSH
23021: LD_INT 1
23023: PLUS
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PPUSH
23029: LD_VAR 0 2
23033: PUSH
23034: LD_VAR 0 4
23038: ARRAY
23039: PUSH
23040: LD_VAR 0 2
23044: PUSH
23045: LD_VAR 0 4
23049: ARRAY
23050: PPUSH
23051: CALL_OW 255
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PPUSH
23060: CALL 30880 0 3
23064: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23065: LD_VAR 0 2
23069: PUSH
23070: LD_VAR 0 4
23074: ARRAY
23075: PPUSH
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 255
23085: PPUSH
23086: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23090: LD_VAR 0 2
23094: PUSH
23095: LD_VAR 0 4
23099: ARRAY
23100: PPUSH
23101: CALL_OW 141
// end ;
23105: GO 22937
23107: POP
23108: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23109: LD_VAR 0 1
23113: PPUSH
23114: LD_EXP 88
23118: PUSH
23119: LD_VAR 0 5
23123: ARRAY
23124: PUSH
23125: LD_INT 0
23127: PLUS
23128: PPUSH
23129: CALL_OW 505
// end ;
23133: LD_VAR 0 3
23137: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23138: LD_INT 0
23140: PPUSH
23141: PPUSH
23142: PPUSH
23143: PPUSH
// if not hack in hackTanks then
23144: LD_VAR 0 1
23148: PUSH
23149: LD_EXP 87
23153: IN
23154: NOT
23155: IFFALSE 23159
// exit ;
23157: GO 23399
// index := GetElementIndex ( hackTanks , hack ) ;
23159: LD_ADDR_VAR 0 4
23163: PUSH
23164: LD_EXP 87
23168: PPUSH
23169: LD_VAR 0 1
23173: PPUSH
23174: CALL 30665 0 2
23178: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23179: LD_ADDR_VAR 0 3
23183: PUSH
23184: DOUBLE
23185: LD_EXP 88
23189: PUSH
23190: LD_VAR 0 4
23194: ARRAY
23195: INC
23196: ST_TO_ADDR
23197: LD_INT 1
23199: PUSH
23200: FOR_DOWNTO
23201: IFFALSE 23373
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23203: LD_ADDR_VAR 0 5
23207: PUSH
23208: LD_EXP 88
23212: PUSH
23213: LD_VAR 0 4
23217: ARRAY
23218: PUSH
23219: LD_VAR 0 3
23223: ARRAY
23224: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23225: LD_VAR 0 5
23229: PUSH
23230: LD_INT 1
23232: ARRAY
23233: PPUSH
23234: CALL_OW 302
23238: NOT
23239: PUSH
23240: LD_VAR 0 5
23244: PUSH
23245: LD_INT 1
23247: ARRAY
23248: PPUSH
23249: CALL_OW 255
23253: PUSH
23254: LD_VAR 0 1
23258: PPUSH
23259: CALL_OW 255
23263: NONEQUAL
23264: OR
23265: IFFALSE 23371
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23267: LD_VAR 0 5
23271: PUSH
23272: LD_INT 1
23274: ARRAY
23275: PPUSH
23276: CALL_OW 305
23280: PUSH
23281: LD_VAR 0 5
23285: PUSH
23286: LD_INT 1
23288: ARRAY
23289: PPUSH
23290: CALL_OW 255
23294: PUSH
23295: LD_VAR 0 1
23299: PPUSH
23300: CALL_OW 255
23304: EQUAL
23305: AND
23306: IFFALSE 23330
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23308: LD_VAR 0 5
23312: PUSH
23313: LD_INT 1
23315: ARRAY
23316: PPUSH
23317: LD_VAR 0 5
23321: PUSH
23322: LD_INT 2
23324: ARRAY
23325: PPUSH
23326: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23330: LD_ADDR_EXP 88
23334: PUSH
23335: LD_EXP 88
23339: PPUSH
23340: LD_VAR 0 4
23344: PPUSH
23345: LD_EXP 88
23349: PUSH
23350: LD_VAR 0 4
23354: ARRAY
23355: PPUSH
23356: LD_VAR 0 3
23360: PPUSH
23361: CALL_OW 3
23365: PPUSH
23366: CALL_OW 1
23370: ST_TO_ADDR
// end ; end ;
23371: GO 23200
23373: POP
23374: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23375: LD_VAR 0 1
23379: PPUSH
23380: LD_EXP 88
23384: PUSH
23385: LD_VAR 0 4
23389: ARRAY
23390: PUSH
23391: LD_INT 0
23393: PLUS
23394: PPUSH
23395: CALL_OW 505
// end ;
23399: LD_VAR 0 2
23403: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23404: LD_INT 0
23406: PPUSH
23407: PPUSH
23408: PPUSH
23409: PPUSH
// if not hack in hackTanks then
23410: LD_VAR 0 1
23414: PUSH
23415: LD_EXP 87
23419: IN
23420: NOT
23421: IFFALSE 23425
// exit ;
23423: GO 23510
// index := GetElementIndex ( hackTanks , hack ) ;
23425: LD_ADDR_VAR 0 5
23429: PUSH
23430: LD_EXP 87
23434: PPUSH
23435: LD_VAR 0 1
23439: PPUSH
23440: CALL 30665 0 2
23444: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23445: LD_ADDR_VAR 0 4
23449: PUSH
23450: DOUBLE
23451: LD_INT 1
23453: DEC
23454: ST_TO_ADDR
23455: LD_EXP 88
23459: PUSH
23460: LD_VAR 0 5
23464: ARRAY
23465: PUSH
23466: FOR_TO
23467: IFFALSE 23508
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23469: LD_EXP 88
23473: PUSH
23474: LD_VAR 0 5
23478: ARRAY
23479: PUSH
23480: LD_VAR 0 4
23484: ARRAY
23485: PUSH
23486: LD_INT 1
23488: ARRAY
23489: PUSH
23490: LD_VAR 0 2
23494: EQUAL
23495: IFFALSE 23506
// KillUnit ( vehicle ) ;
23497: LD_VAR 0 2
23501: PPUSH
23502: CALL_OW 66
23506: GO 23466
23508: POP
23509: POP
// end ;
23510: LD_VAR 0 3
23514: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23515: LD_EXP 92
23519: NOT
23520: IFFALSE 23555
23522: GO 23524
23524: DISABLE
// begin initMiner := true ;
23525: LD_ADDR_EXP 92
23529: PUSH
23530: LD_INT 1
23532: ST_TO_ADDR
// minersList := [ ] ;
23533: LD_ADDR_EXP 93
23537: PUSH
23538: EMPTY
23539: ST_TO_ADDR
// minerMinesList := [ ] ;
23540: LD_ADDR_EXP 94
23544: PUSH
23545: EMPTY
23546: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23547: LD_ADDR_EXP 95
23551: PUSH
23552: LD_INT 5
23554: ST_TO_ADDR
// end ;
23555: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23556: LD_EXP 92
23560: PUSH
23561: LD_INT 34
23563: PUSH
23564: LD_INT 81
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PPUSH
23571: CALL_OW 69
23575: AND
23576: IFFALSE 24037
23578: GO 23580
23580: DISABLE
23581: LD_INT 0
23583: PPUSH
23584: PPUSH
23585: PPUSH
23586: PPUSH
// begin enable ;
23587: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23588: LD_ADDR_VAR 0 1
23592: PUSH
23593: LD_INT 34
23595: PUSH
23596: LD_INT 81
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PPUSH
23603: CALL_OW 69
23607: PUSH
23608: FOR_IN
23609: IFFALSE 23681
// begin if not i in minersList then
23611: LD_VAR 0 1
23615: PUSH
23616: LD_EXP 93
23620: IN
23621: NOT
23622: IFFALSE 23679
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23624: LD_ADDR_EXP 93
23628: PUSH
23629: LD_EXP 93
23633: PPUSH
23634: LD_EXP 93
23638: PUSH
23639: LD_INT 1
23641: PLUS
23642: PPUSH
23643: LD_VAR 0 1
23647: PPUSH
23648: CALL_OW 1
23652: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23653: LD_ADDR_EXP 94
23657: PUSH
23658: LD_EXP 94
23662: PPUSH
23663: LD_EXP 94
23667: PUSH
23668: LD_INT 1
23670: PLUS
23671: PPUSH
23672: EMPTY
23673: PPUSH
23674: CALL_OW 1
23678: ST_TO_ADDR
// end end ;
23679: GO 23608
23681: POP
23682: POP
// for i := minerMinesList downto 1 do
23683: LD_ADDR_VAR 0 1
23687: PUSH
23688: DOUBLE
23689: LD_EXP 94
23693: INC
23694: ST_TO_ADDR
23695: LD_INT 1
23697: PUSH
23698: FOR_DOWNTO
23699: IFFALSE 24035
// begin if IsLive ( minersList [ i ] ) then
23701: LD_EXP 93
23705: PUSH
23706: LD_VAR 0 1
23710: ARRAY
23711: PPUSH
23712: CALL_OW 300
23716: IFFALSE 23744
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23718: LD_EXP 93
23722: PUSH
23723: LD_VAR 0 1
23727: ARRAY
23728: PPUSH
23729: LD_EXP 94
23733: PUSH
23734: LD_VAR 0 1
23738: ARRAY
23739: PPUSH
23740: CALL_OW 505
// if not minerMinesList [ i ] then
23744: LD_EXP 94
23748: PUSH
23749: LD_VAR 0 1
23753: ARRAY
23754: NOT
23755: IFFALSE 23759
// continue ;
23757: GO 23698
// for j := minerMinesList [ i ] downto 1 do
23759: LD_ADDR_VAR 0 2
23763: PUSH
23764: DOUBLE
23765: LD_EXP 94
23769: PUSH
23770: LD_VAR 0 1
23774: ARRAY
23775: INC
23776: ST_TO_ADDR
23777: LD_INT 1
23779: PUSH
23780: FOR_DOWNTO
23781: IFFALSE 24031
// begin side := GetSide ( minersList [ i ] ) ;
23783: LD_ADDR_VAR 0 3
23787: PUSH
23788: LD_EXP 93
23792: PUSH
23793: LD_VAR 0 1
23797: ARRAY
23798: PPUSH
23799: CALL_OW 255
23803: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23804: LD_ADDR_VAR 0 4
23808: PUSH
23809: LD_EXP 94
23813: PUSH
23814: LD_VAR 0 1
23818: ARRAY
23819: PUSH
23820: LD_VAR 0 2
23824: ARRAY
23825: PUSH
23826: LD_INT 1
23828: ARRAY
23829: PPUSH
23830: LD_EXP 94
23834: PUSH
23835: LD_VAR 0 1
23839: ARRAY
23840: PUSH
23841: LD_VAR 0 2
23845: ARRAY
23846: PUSH
23847: LD_INT 2
23849: ARRAY
23850: PPUSH
23851: CALL_OW 428
23855: ST_TO_ADDR
// if not tmp then
23856: LD_VAR 0 4
23860: NOT
23861: IFFALSE 23865
// continue ;
23863: GO 23780
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23865: LD_VAR 0 4
23869: PUSH
23870: LD_INT 81
23872: PUSH
23873: LD_VAR 0 3
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PPUSH
23882: CALL_OW 69
23886: IN
23887: PUSH
23888: LD_EXP 94
23892: PUSH
23893: LD_VAR 0 1
23897: ARRAY
23898: PUSH
23899: LD_VAR 0 2
23903: ARRAY
23904: PUSH
23905: LD_INT 1
23907: ARRAY
23908: PPUSH
23909: LD_EXP 94
23913: PUSH
23914: LD_VAR 0 1
23918: ARRAY
23919: PUSH
23920: LD_VAR 0 2
23924: ARRAY
23925: PUSH
23926: LD_INT 2
23928: ARRAY
23929: PPUSH
23930: CALL_OW 458
23934: AND
23935: IFFALSE 24029
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23937: LD_EXP 94
23941: PUSH
23942: LD_VAR 0 1
23946: ARRAY
23947: PUSH
23948: LD_VAR 0 2
23952: ARRAY
23953: PUSH
23954: LD_INT 1
23956: ARRAY
23957: PPUSH
23958: LD_EXP 94
23962: PUSH
23963: LD_VAR 0 1
23967: ARRAY
23968: PUSH
23969: LD_VAR 0 2
23973: ARRAY
23974: PUSH
23975: LD_INT 2
23977: ARRAY
23978: PPUSH
23979: LD_VAR 0 3
23983: PPUSH
23984: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23988: LD_ADDR_EXP 94
23992: PUSH
23993: LD_EXP 94
23997: PPUSH
23998: LD_VAR 0 1
24002: PPUSH
24003: LD_EXP 94
24007: PUSH
24008: LD_VAR 0 1
24012: ARRAY
24013: PPUSH
24014: LD_VAR 0 2
24018: PPUSH
24019: CALL_OW 3
24023: PPUSH
24024: CALL_OW 1
24028: ST_TO_ADDR
// end ; end ;
24029: GO 23780
24031: POP
24032: POP
// end ;
24033: GO 23698
24035: POP
24036: POP
// end ;
24037: PPOPN 4
24039: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24040: LD_INT 0
24042: PPUSH
24043: PPUSH
// result := false ;
24044: LD_ADDR_VAR 0 4
24048: PUSH
24049: LD_INT 0
24051: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24052: LD_VAR 0 1
24056: PPUSH
24057: CALL_OW 264
24061: PUSH
24062: LD_INT 81
24064: EQUAL
24065: NOT
24066: IFFALSE 24070
// exit ;
24068: GO 24310
// index := GetElementIndex ( minersList , unit ) ;
24070: LD_ADDR_VAR 0 5
24074: PUSH
24075: LD_EXP 93
24079: PPUSH
24080: LD_VAR 0 1
24084: PPUSH
24085: CALL 30665 0 2
24089: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24090: LD_EXP 94
24094: PUSH
24095: LD_VAR 0 5
24099: ARRAY
24100: PUSH
24101: LD_EXP 95
24105: GREATEREQUAL
24106: IFFALSE 24110
// exit ;
24108: GO 24310
// ComMoveXY ( unit , x , y ) ;
24110: LD_VAR 0 1
24114: PPUSH
24115: LD_VAR 0 2
24119: PPUSH
24120: LD_VAR 0 3
24124: PPUSH
24125: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24129: LD_INT 35
24131: PPUSH
24132: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24136: LD_VAR 0 1
24140: PPUSH
24141: LD_VAR 0 2
24145: PPUSH
24146: LD_VAR 0 3
24150: PPUSH
24151: CALL 62020 0 3
24155: NOT
24156: PUSH
24157: LD_VAR 0 1
24161: PPUSH
24162: CALL_OW 314
24166: AND
24167: IFFALSE 24171
// exit ;
24169: GO 24310
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24171: LD_VAR 0 2
24175: PPUSH
24176: LD_VAR 0 3
24180: PPUSH
24181: CALL_OW 428
24185: PUSH
24186: LD_VAR 0 1
24190: EQUAL
24191: PUSH
24192: LD_VAR 0 1
24196: PPUSH
24197: CALL_OW 314
24201: NOT
24202: AND
24203: IFFALSE 24129
// PlaySoundXY ( x , y , PlantMine ) ;
24205: LD_VAR 0 2
24209: PPUSH
24210: LD_VAR 0 3
24214: PPUSH
24215: LD_STRING PlantMine
24217: PPUSH
24218: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24222: LD_VAR 0 2
24226: PPUSH
24227: LD_VAR 0 3
24231: PPUSH
24232: LD_VAR 0 1
24236: PPUSH
24237: CALL_OW 255
24241: PPUSH
24242: LD_INT 0
24244: PPUSH
24245: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24249: LD_ADDR_EXP 94
24253: PUSH
24254: LD_EXP 94
24258: PPUSH
24259: LD_VAR 0 5
24263: PUSH
24264: LD_EXP 94
24268: PUSH
24269: LD_VAR 0 5
24273: ARRAY
24274: PUSH
24275: LD_INT 1
24277: PLUS
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PPUSH
24283: LD_VAR 0 2
24287: PUSH
24288: LD_VAR 0 3
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PPUSH
24297: CALL 30880 0 3
24301: ST_TO_ADDR
// result := true ;
24302: LD_ADDR_VAR 0 4
24306: PUSH
24307: LD_INT 1
24309: ST_TO_ADDR
// end ;
24310: LD_VAR 0 4
24314: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24315: LD_INT 0
24317: PPUSH
24318: PPUSH
24319: PPUSH
// if not unit in minersList then
24320: LD_VAR 0 1
24324: PUSH
24325: LD_EXP 93
24329: IN
24330: NOT
24331: IFFALSE 24335
// exit ;
24333: GO 24727
// index := GetElementIndex ( minersList , unit ) ;
24335: LD_ADDR_VAR 0 6
24339: PUSH
24340: LD_EXP 93
24344: PPUSH
24345: LD_VAR 0 1
24349: PPUSH
24350: CALL 30665 0 2
24354: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24355: LD_ADDR_VAR 0 5
24359: PUSH
24360: DOUBLE
24361: LD_EXP 94
24365: PUSH
24366: LD_VAR 0 6
24370: ARRAY
24371: INC
24372: ST_TO_ADDR
24373: LD_INT 1
24375: PUSH
24376: FOR_DOWNTO
24377: IFFALSE 24538
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24379: LD_EXP 94
24383: PUSH
24384: LD_VAR 0 6
24388: ARRAY
24389: PUSH
24390: LD_VAR 0 5
24394: ARRAY
24395: PUSH
24396: LD_INT 1
24398: ARRAY
24399: PUSH
24400: LD_VAR 0 2
24404: EQUAL
24405: PUSH
24406: LD_EXP 94
24410: PUSH
24411: LD_VAR 0 6
24415: ARRAY
24416: PUSH
24417: LD_VAR 0 5
24421: ARRAY
24422: PUSH
24423: LD_INT 2
24425: ARRAY
24426: PUSH
24427: LD_VAR 0 3
24431: EQUAL
24432: AND
24433: IFFALSE 24536
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24435: LD_EXP 94
24439: PUSH
24440: LD_VAR 0 6
24444: ARRAY
24445: PUSH
24446: LD_VAR 0 5
24450: ARRAY
24451: PUSH
24452: LD_INT 1
24454: ARRAY
24455: PPUSH
24456: LD_EXP 94
24460: PUSH
24461: LD_VAR 0 6
24465: ARRAY
24466: PUSH
24467: LD_VAR 0 5
24471: ARRAY
24472: PUSH
24473: LD_INT 2
24475: ARRAY
24476: PPUSH
24477: LD_VAR 0 1
24481: PPUSH
24482: CALL_OW 255
24486: PPUSH
24487: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24491: LD_ADDR_EXP 94
24495: PUSH
24496: LD_EXP 94
24500: PPUSH
24501: LD_VAR 0 6
24505: PPUSH
24506: LD_EXP 94
24510: PUSH
24511: LD_VAR 0 6
24515: ARRAY
24516: PPUSH
24517: LD_VAR 0 5
24521: PPUSH
24522: CALL_OW 3
24526: PPUSH
24527: CALL_OW 1
24531: ST_TO_ADDR
// exit ;
24532: POP
24533: POP
24534: GO 24727
// end ; end ;
24536: GO 24376
24538: POP
24539: POP
// for i := minerMinesList [ index ] downto 1 do
24540: LD_ADDR_VAR 0 5
24544: PUSH
24545: DOUBLE
24546: LD_EXP 94
24550: PUSH
24551: LD_VAR 0 6
24555: ARRAY
24556: INC
24557: ST_TO_ADDR
24558: LD_INT 1
24560: PUSH
24561: FOR_DOWNTO
24562: IFFALSE 24725
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24564: LD_EXP 94
24568: PUSH
24569: LD_VAR 0 6
24573: ARRAY
24574: PUSH
24575: LD_VAR 0 5
24579: ARRAY
24580: PUSH
24581: LD_INT 1
24583: ARRAY
24584: PPUSH
24585: LD_EXP 94
24589: PUSH
24590: LD_VAR 0 6
24594: ARRAY
24595: PUSH
24596: LD_VAR 0 5
24600: ARRAY
24601: PUSH
24602: LD_INT 2
24604: ARRAY
24605: PPUSH
24606: LD_VAR 0 2
24610: PPUSH
24611: LD_VAR 0 3
24615: PPUSH
24616: CALL_OW 298
24620: PUSH
24621: LD_INT 6
24623: LESS
24624: IFFALSE 24723
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24626: LD_EXP 94
24630: PUSH
24631: LD_VAR 0 6
24635: ARRAY
24636: PUSH
24637: LD_VAR 0 5
24641: ARRAY
24642: PUSH
24643: LD_INT 1
24645: ARRAY
24646: PPUSH
24647: LD_EXP 94
24651: PUSH
24652: LD_VAR 0 6
24656: ARRAY
24657: PUSH
24658: LD_VAR 0 5
24662: ARRAY
24663: PUSH
24664: LD_INT 2
24666: ARRAY
24667: PPUSH
24668: LD_VAR 0 1
24672: PPUSH
24673: CALL_OW 255
24677: PPUSH
24678: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24682: LD_ADDR_EXP 94
24686: PUSH
24687: LD_EXP 94
24691: PPUSH
24692: LD_VAR 0 6
24696: PPUSH
24697: LD_EXP 94
24701: PUSH
24702: LD_VAR 0 6
24706: ARRAY
24707: PPUSH
24708: LD_VAR 0 5
24712: PPUSH
24713: CALL_OW 3
24717: PPUSH
24718: CALL_OW 1
24722: ST_TO_ADDR
// end ; end ;
24723: GO 24561
24725: POP
24726: POP
// end ;
24727: LD_VAR 0 4
24731: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24732: LD_INT 0
24734: PPUSH
24735: PPUSH
24736: PPUSH
24737: PPUSH
24738: PPUSH
24739: PPUSH
24740: PPUSH
24741: PPUSH
24742: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24743: LD_VAR 0 1
24747: PPUSH
24748: CALL_OW 264
24752: PUSH
24753: LD_INT 81
24755: EQUAL
24756: NOT
24757: PUSH
24758: LD_VAR 0 1
24762: PUSH
24763: LD_EXP 93
24767: IN
24768: NOT
24769: OR
24770: IFFALSE 24774
// exit ;
24772: GO 25096
// index := GetElementIndex ( minersList , unit ) ;
24774: LD_ADDR_VAR 0 6
24778: PUSH
24779: LD_EXP 93
24783: PPUSH
24784: LD_VAR 0 1
24788: PPUSH
24789: CALL 30665 0 2
24793: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24794: LD_ADDR_VAR 0 8
24798: PUSH
24799: LD_EXP 95
24803: PUSH
24804: LD_EXP 94
24808: PUSH
24809: LD_VAR 0 6
24813: ARRAY
24814: MINUS
24815: ST_TO_ADDR
// if not minesFreeAmount then
24816: LD_VAR 0 8
24820: NOT
24821: IFFALSE 24825
// exit ;
24823: GO 25096
// tmp := [ ] ;
24825: LD_ADDR_VAR 0 7
24829: PUSH
24830: EMPTY
24831: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24832: LD_ADDR_VAR 0 5
24836: PUSH
24837: DOUBLE
24838: LD_INT 1
24840: DEC
24841: ST_TO_ADDR
24842: LD_VAR 0 8
24846: PUSH
24847: FOR_TO
24848: IFFALSE 25043
// begin _d := rand ( 0 , 5 ) ;
24850: LD_ADDR_VAR 0 11
24854: PUSH
24855: LD_INT 0
24857: PPUSH
24858: LD_INT 5
24860: PPUSH
24861: CALL_OW 12
24865: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24866: LD_ADDR_VAR 0 12
24870: PUSH
24871: LD_INT 2
24873: PPUSH
24874: LD_INT 6
24876: PPUSH
24877: CALL_OW 12
24881: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24882: LD_ADDR_VAR 0 9
24886: PUSH
24887: LD_VAR 0 2
24891: PPUSH
24892: LD_VAR 0 11
24896: PPUSH
24897: LD_VAR 0 12
24901: PPUSH
24902: CALL_OW 272
24906: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24907: LD_ADDR_VAR 0 10
24911: PUSH
24912: LD_VAR 0 3
24916: PPUSH
24917: LD_VAR 0 11
24921: PPUSH
24922: LD_VAR 0 12
24926: PPUSH
24927: CALL_OW 273
24931: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24932: LD_VAR 0 9
24936: PPUSH
24937: LD_VAR 0 10
24941: PPUSH
24942: CALL_OW 488
24946: PUSH
24947: LD_VAR 0 9
24951: PUSH
24952: LD_VAR 0 10
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_VAR 0 7
24965: IN
24966: NOT
24967: AND
24968: PUSH
24969: LD_VAR 0 9
24973: PPUSH
24974: LD_VAR 0 10
24978: PPUSH
24979: CALL_OW 458
24983: NOT
24984: AND
24985: IFFALSE 25027
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24987: LD_ADDR_VAR 0 7
24991: PUSH
24992: LD_VAR 0 7
24996: PPUSH
24997: LD_VAR 0 7
25001: PUSH
25002: LD_INT 1
25004: PLUS
25005: PPUSH
25006: LD_VAR 0 9
25010: PUSH
25011: LD_VAR 0 10
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PPUSH
25020: CALL_OW 1
25024: ST_TO_ADDR
25025: GO 25041
// i := i - 1 ;
25027: LD_ADDR_VAR 0 5
25031: PUSH
25032: LD_VAR 0 5
25036: PUSH
25037: LD_INT 1
25039: MINUS
25040: ST_TO_ADDR
// end ;
25041: GO 24847
25043: POP
25044: POP
// for i in tmp do
25045: LD_ADDR_VAR 0 5
25049: PUSH
25050: LD_VAR 0 7
25054: PUSH
25055: FOR_IN
25056: IFFALSE 25094
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25058: LD_VAR 0 1
25062: PPUSH
25063: LD_VAR 0 5
25067: PUSH
25068: LD_INT 1
25070: ARRAY
25071: PPUSH
25072: LD_VAR 0 5
25076: PUSH
25077: LD_INT 2
25079: ARRAY
25080: PPUSH
25081: CALL 24040 0 3
25085: NOT
25086: IFFALSE 25092
// exit ;
25088: POP
25089: POP
25090: GO 25096
25092: GO 25055
25094: POP
25095: POP
// end ;
25096: LD_VAR 0 4
25100: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25101: LD_INT 0
25103: PPUSH
25104: PPUSH
25105: PPUSH
25106: PPUSH
25107: PPUSH
25108: PPUSH
25109: PPUSH
// if not GetClass ( unit ) = class_sniper then
25110: LD_VAR 0 1
25114: PPUSH
25115: CALL_OW 257
25119: PUSH
25120: LD_INT 5
25122: EQUAL
25123: NOT
25124: IFFALSE 25128
// exit ;
25126: GO 25516
// dist := 8 ;
25128: LD_ADDR_VAR 0 5
25132: PUSH
25133: LD_INT 8
25135: ST_TO_ADDR
// viewRange := 12 ;
25136: LD_ADDR_VAR 0 7
25140: PUSH
25141: LD_INT 12
25143: ST_TO_ADDR
// side := GetSide ( unit ) ;
25144: LD_ADDR_VAR 0 6
25148: PUSH
25149: LD_VAR 0 1
25153: PPUSH
25154: CALL_OW 255
25158: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25159: LD_INT 61
25161: PPUSH
25162: LD_VAR 0 6
25166: PPUSH
25167: CALL_OW 321
25171: PUSH
25172: LD_INT 2
25174: EQUAL
25175: IFFALSE 25185
// viewRange := 16 ;
25177: LD_ADDR_VAR 0 7
25181: PUSH
25182: LD_INT 16
25184: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25185: LD_VAR 0 1
25189: PPUSH
25190: LD_VAR 0 2
25194: PPUSH
25195: LD_VAR 0 3
25199: PPUSH
25200: CALL_OW 297
25204: PUSH
25205: LD_VAR 0 5
25209: GREATER
25210: IFFALSE 25289
// begin ComMoveXY ( unit , x , y ) ;
25212: LD_VAR 0 1
25216: PPUSH
25217: LD_VAR 0 2
25221: PPUSH
25222: LD_VAR 0 3
25226: PPUSH
25227: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25231: LD_INT 35
25233: PPUSH
25234: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25238: LD_VAR 0 1
25242: PPUSH
25243: LD_VAR 0 2
25247: PPUSH
25248: LD_VAR 0 3
25252: PPUSH
25253: CALL 62020 0 3
25257: NOT
25258: IFFALSE 25262
// exit ;
25260: GO 25516
// until GetDistUnitXY ( unit , x , y ) < dist ;
25262: LD_VAR 0 1
25266: PPUSH
25267: LD_VAR 0 2
25271: PPUSH
25272: LD_VAR 0 3
25276: PPUSH
25277: CALL_OW 297
25281: PUSH
25282: LD_VAR 0 5
25286: LESS
25287: IFFALSE 25231
// end ; ComTurnXY ( unit , x , y ) ;
25289: LD_VAR 0 1
25293: PPUSH
25294: LD_VAR 0 2
25298: PPUSH
25299: LD_VAR 0 3
25303: PPUSH
25304: CALL_OW 118
// wait ( 5 ) ;
25308: LD_INT 5
25310: PPUSH
25311: CALL_OW 67
// _d := GetDir ( unit ) ;
25315: LD_ADDR_VAR 0 10
25319: PUSH
25320: LD_VAR 0 1
25324: PPUSH
25325: CALL_OW 254
25329: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25330: LD_ADDR_VAR 0 8
25334: PUSH
25335: LD_VAR 0 1
25339: PPUSH
25340: CALL_OW 250
25344: PPUSH
25345: LD_VAR 0 10
25349: PPUSH
25350: LD_VAR 0 5
25354: PPUSH
25355: CALL_OW 272
25359: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25360: LD_ADDR_VAR 0 9
25364: PUSH
25365: LD_VAR 0 1
25369: PPUSH
25370: CALL_OW 251
25374: PPUSH
25375: LD_VAR 0 10
25379: PPUSH
25380: LD_VAR 0 5
25384: PPUSH
25385: CALL_OW 273
25389: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25390: LD_VAR 0 8
25394: PPUSH
25395: LD_VAR 0 9
25399: PPUSH
25400: CALL_OW 488
25404: NOT
25405: IFFALSE 25409
// exit ;
25407: GO 25516
// ComAnimCustom ( unit , 1 ) ;
25409: LD_VAR 0 1
25413: PPUSH
25414: LD_INT 1
25416: PPUSH
25417: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25421: LD_VAR 0 8
25425: PPUSH
25426: LD_VAR 0 9
25430: PPUSH
25431: LD_VAR 0 6
25435: PPUSH
25436: LD_VAR 0 7
25440: PPUSH
25441: CALL_OW 330
// repeat wait ( 1 ) ;
25445: LD_INT 1
25447: PPUSH
25448: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25452: LD_VAR 0 1
25456: PPUSH
25457: CALL_OW 316
25461: PUSH
25462: LD_VAR 0 1
25466: PPUSH
25467: CALL_OW 314
25471: OR
25472: PUSH
25473: LD_VAR 0 1
25477: PPUSH
25478: CALL_OW 302
25482: NOT
25483: OR
25484: PUSH
25485: LD_VAR 0 1
25489: PPUSH
25490: CALL_OW 301
25494: OR
25495: IFFALSE 25445
// RemoveSeeing ( _x , _y , side ) ;
25497: LD_VAR 0 8
25501: PPUSH
25502: LD_VAR 0 9
25506: PPUSH
25507: LD_VAR 0 6
25511: PPUSH
25512: CALL_OW 331
// end ; end_of_file
25516: LD_VAR 0 4
25520: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25521: LD_VAR 0 1
25525: PUSH
25526: LD_INT 200
25528: DOUBLE
25529: GREATEREQUAL
25530: IFFALSE 25538
25532: LD_INT 299
25534: DOUBLE
25535: LESSEQUAL
25536: IFTRUE 25540
25538: GO 25572
25540: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25541: LD_VAR 0 1
25545: PPUSH
25546: LD_VAR 0 2
25550: PPUSH
25551: LD_VAR 0 3
25555: PPUSH
25556: LD_VAR 0 4
25560: PPUSH
25561: LD_VAR 0 5
25565: PPUSH
25566: CALL 21608 0 5
25570: GO 25649
25572: LD_INT 300
25574: DOUBLE
25575: GREATEREQUAL
25576: IFFALSE 25584
25578: LD_INT 399
25580: DOUBLE
25581: LESSEQUAL
25582: IFTRUE 25586
25584: GO 25648
25586: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25587: LD_VAR 0 1
25591: PPUSH
25592: LD_VAR 0 2
25596: PPUSH
25597: LD_VAR 0 3
25601: PPUSH
25602: LD_VAR 0 4
25606: PPUSH
25607: LD_VAR 0 5
25611: PPUSH
25612: LD_VAR 0 6
25616: PPUSH
25617: LD_VAR 0 7
25621: PPUSH
25622: LD_VAR 0 8
25626: PPUSH
25627: LD_VAR 0 9
25631: PPUSH
25632: LD_VAR 0 10
25636: PPUSH
25637: LD_VAR 0 11
25641: PPUSH
25642: CALL 17941 0 11
25646: GO 25649
25648: POP
// end ;
25649: PPOPN 11
25651: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25652: LD_VAR 0 1
25656: PPUSH
25657: LD_VAR 0 2
25661: PPUSH
25662: LD_VAR 0 3
25666: PPUSH
25667: LD_VAR 0 4
25671: PPUSH
25672: LD_VAR 0 5
25676: PPUSH
25677: CALL 21344 0 5
// end ; end_of_file
25681: PPOPN 5
25683: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
25684: LD_VAR 0 1
25688: PPUSH
25689: LD_VAR 0 2
25693: PPUSH
25694: LD_VAR 0 3
25698: PPUSH
25699: LD_VAR 0 4
25703: PPUSH
25704: LD_VAR 0 5
25708: PPUSH
25709: LD_VAR 0 6
25713: PPUSH
25714: CALL 5561 0 6
// end ;
25718: PPOPN 6
25720: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
25721: LD_INT 0
25723: PPUSH
// begin if not units then
25724: LD_VAR 0 1
25728: NOT
25729: IFFALSE 25733
// exit ;
25731: GO 25733
// end ;
25733: PPOPN 7
25735: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
25736: CALL 5455 0 0
// end ; end_of_file end_of_file
25740: PPOPN 1
25742: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25743: LD_INT 0
25745: PPUSH
25746: PPUSH
// if exist_mode then
25747: LD_VAR 0 2
25751: IFFALSE 25776
// unit := CreateCharacter ( prefix & ident ) else
25753: LD_ADDR_VAR 0 5
25757: PUSH
25758: LD_VAR 0 3
25762: PUSH
25763: LD_VAR 0 1
25767: STR
25768: PPUSH
25769: CALL_OW 34
25773: ST_TO_ADDR
25774: GO 25791
// unit := NewCharacter ( ident ) ;
25776: LD_ADDR_VAR 0 5
25780: PUSH
25781: LD_VAR 0 1
25785: PPUSH
25786: CALL_OW 25
25790: ST_TO_ADDR
// result := unit ;
25791: LD_ADDR_VAR 0 4
25795: PUSH
25796: LD_VAR 0 5
25800: ST_TO_ADDR
// end ;
25801: LD_VAR 0 4
25805: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25806: LD_INT 0
25808: PPUSH
25809: PPUSH
// if not side or not nation then
25810: LD_VAR 0 1
25814: NOT
25815: PUSH
25816: LD_VAR 0 2
25820: NOT
25821: OR
25822: IFFALSE 25826
// exit ;
25824: GO 26594
// case nation of nation_american :
25826: LD_VAR 0 2
25830: PUSH
25831: LD_INT 1
25833: DOUBLE
25834: EQUAL
25835: IFTRUE 25839
25837: GO 26053
25839: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25840: LD_ADDR_VAR 0 4
25844: PUSH
25845: LD_INT 35
25847: PUSH
25848: LD_INT 45
25850: PUSH
25851: LD_INT 46
25853: PUSH
25854: LD_INT 47
25856: PUSH
25857: LD_INT 82
25859: PUSH
25860: LD_INT 83
25862: PUSH
25863: LD_INT 84
25865: PUSH
25866: LD_INT 85
25868: PUSH
25869: LD_INT 86
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: LD_INT 2
25877: PUSH
25878: LD_INT 6
25880: PUSH
25881: LD_INT 15
25883: PUSH
25884: LD_INT 16
25886: PUSH
25887: LD_INT 7
25889: PUSH
25890: LD_INT 12
25892: PUSH
25893: LD_INT 13
25895: PUSH
25896: LD_INT 10
25898: PUSH
25899: LD_INT 14
25901: PUSH
25902: LD_INT 20
25904: PUSH
25905: LD_INT 21
25907: PUSH
25908: LD_INT 22
25910: PUSH
25911: LD_INT 25
25913: PUSH
25914: LD_INT 32
25916: PUSH
25917: LD_INT 27
25919: PUSH
25920: LD_INT 36
25922: PUSH
25923: LD_INT 69
25925: PUSH
25926: LD_INT 39
25928: PUSH
25929: LD_INT 34
25931: PUSH
25932: LD_INT 40
25934: PUSH
25935: LD_INT 48
25937: PUSH
25938: LD_INT 49
25940: PUSH
25941: LD_INT 50
25943: PUSH
25944: LD_INT 51
25946: PUSH
25947: LD_INT 52
25949: PUSH
25950: LD_INT 53
25952: PUSH
25953: LD_INT 54
25955: PUSH
25956: LD_INT 55
25958: PUSH
25959: LD_INT 56
25961: PUSH
25962: LD_INT 57
25964: PUSH
25965: LD_INT 58
25967: PUSH
25968: LD_INT 59
25970: PUSH
25971: LD_INT 60
25973: PUSH
25974: LD_INT 61
25976: PUSH
25977: LD_INT 62
25979: PUSH
25980: LD_INT 80
25982: PUSH
25983: LD_INT 82
25985: PUSH
25986: LD_INT 83
25988: PUSH
25989: LD_INT 84
25991: PUSH
25992: LD_INT 85
25994: PUSH
25995: LD_INT 86
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: ST_TO_ADDR
26051: GO 26518
26053: LD_INT 2
26055: DOUBLE
26056: EQUAL
26057: IFTRUE 26061
26059: GO 26287
26061: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26062: LD_ADDR_VAR 0 4
26066: PUSH
26067: LD_INT 35
26069: PUSH
26070: LD_INT 45
26072: PUSH
26073: LD_INT 46
26075: PUSH
26076: LD_INT 47
26078: PUSH
26079: LD_INT 82
26081: PUSH
26082: LD_INT 83
26084: PUSH
26085: LD_INT 84
26087: PUSH
26088: LD_INT 85
26090: PUSH
26091: LD_INT 87
26093: PUSH
26094: LD_INT 70
26096: PUSH
26097: LD_INT 1
26099: PUSH
26100: LD_INT 11
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: LD_INT 4
26108: PUSH
26109: LD_INT 5
26111: PUSH
26112: LD_INT 6
26114: PUSH
26115: LD_INT 15
26117: PUSH
26118: LD_INT 18
26120: PUSH
26121: LD_INT 7
26123: PUSH
26124: LD_INT 17
26126: PUSH
26127: LD_INT 8
26129: PUSH
26130: LD_INT 20
26132: PUSH
26133: LD_INT 21
26135: PUSH
26136: LD_INT 22
26138: PUSH
26139: LD_INT 72
26141: PUSH
26142: LD_INT 26
26144: PUSH
26145: LD_INT 69
26147: PUSH
26148: LD_INT 39
26150: PUSH
26151: LD_INT 40
26153: PUSH
26154: LD_INT 41
26156: PUSH
26157: LD_INT 42
26159: PUSH
26160: LD_INT 43
26162: PUSH
26163: LD_INT 48
26165: PUSH
26166: LD_INT 49
26168: PUSH
26169: LD_INT 50
26171: PUSH
26172: LD_INT 51
26174: PUSH
26175: LD_INT 52
26177: PUSH
26178: LD_INT 53
26180: PUSH
26181: LD_INT 54
26183: PUSH
26184: LD_INT 55
26186: PUSH
26187: LD_INT 56
26189: PUSH
26190: LD_INT 60
26192: PUSH
26193: LD_INT 61
26195: PUSH
26196: LD_INT 62
26198: PUSH
26199: LD_INT 66
26201: PUSH
26202: LD_INT 67
26204: PUSH
26205: LD_INT 68
26207: PUSH
26208: LD_INT 81
26210: PUSH
26211: LD_INT 82
26213: PUSH
26214: LD_INT 83
26216: PUSH
26217: LD_INT 84
26219: PUSH
26220: LD_INT 85
26222: PUSH
26223: LD_INT 87
26225: PUSH
26226: LD_INT 88
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: ST_TO_ADDR
26285: GO 26518
26287: LD_INT 3
26289: DOUBLE
26290: EQUAL
26291: IFTRUE 26295
26293: GO 26517
26295: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26296: LD_ADDR_VAR 0 4
26300: PUSH
26301: LD_INT 46
26303: PUSH
26304: LD_INT 47
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: LD_INT 2
26312: PUSH
26313: LD_INT 82
26315: PUSH
26316: LD_INT 83
26318: PUSH
26319: LD_INT 84
26321: PUSH
26322: LD_INT 85
26324: PUSH
26325: LD_INT 86
26327: PUSH
26328: LD_INT 11
26330: PUSH
26331: LD_INT 9
26333: PUSH
26334: LD_INT 20
26336: PUSH
26337: LD_INT 19
26339: PUSH
26340: LD_INT 21
26342: PUSH
26343: LD_INT 24
26345: PUSH
26346: LD_INT 22
26348: PUSH
26349: LD_INT 25
26351: PUSH
26352: LD_INT 28
26354: PUSH
26355: LD_INT 29
26357: PUSH
26358: LD_INT 30
26360: PUSH
26361: LD_INT 31
26363: PUSH
26364: LD_INT 37
26366: PUSH
26367: LD_INT 38
26369: PUSH
26370: LD_INT 32
26372: PUSH
26373: LD_INT 27
26375: PUSH
26376: LD_INT 33
26378: PUSH
26379: LD_INT 69
26381: PUSH
26382: LD_INT 39
26384: PUSH
26385: LD_INT 34
26387: PUSH
26388: LD_INT 40
26390: PUSH
26391: LD_INT 71
26393: PUSH
26394: LD_INT 23
26396: PUSH
26397: LD_INT 44
26399: PUSH
26400: LD_INT 48
26402: PUSH
26403: LD_INT 49
26405: PUSH
26406: LD_INT 50
26408: PUSH
26409: LD_INT 51
26411: PUSH
26412: LD_INT 52
26414: PUSH
26415: LD_INT 53
26417: PUSH
26418: LD_INT 54
26420: PUSH
26421: LD_INT 55
26423: PUSH
26424: LD_INT 56
26426: PUSH
26427: LD_INT 57
26429: PUSH
26430: LD_INT 58
26432: PUSH
26433: LD_INT 59
26435: PUSH
26436: LD_INT 63
26438: PUSH
26439: LD_INT 64
26441: PUSH
26442: LD_INT 65
26444: PUSH
26445: LD_INT 82
26447: PUSH
26448: LD_INT 83
26450: PUSH
26451: LD_INT 84
26453: PUSH
26454: LD_INT 85
26456: PUSH
26457: LD_INT 86
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: ST_TO_ADDR
26515: GO 26518
26517: POP
// if state > - 1 and state < 3 then
26518: LD_VAR 0 3
26522: PUSH
26523: LD_INT 1
26525: NEG
26526: GREATER
26527: PUSH
26528: LD_VAR 0 3
26532: PUSH
26533: LD_INT 3
26535: LESS
26536: AND
26537: IFFALSE 26594
// for i in result do
26539: LD_ADDR_VAR 0 5
26543: PUSH
26544: LD_VAR 0 4
26548: PUSH
26549: FOR_IN
26550: IFFALSE 26592
// if GetTech ( i , side ) <> state then
26552: LD_VAR 0 5
26556: PPUSH
26557: LD_VAR 0 1
26561: PPUSH
26562: CALL_OW 321
26566: PUSH
26567: LD_VAR 0 3
26571: NONEQUAL
26572: IFFALSE 26590
// result := result diff i ;
26574: LD_ADDR_VAR 0 4
26578: PUSH
26579: LD_VAR 0 4
26583: PUSH
26584: LD_VAR 0 5
26588: DIFF
26589: ST_TO_ADDR
26590: GO 26549
26592: POP
26593: POP
// end ;
26594: LD_VAR 0 4
26598: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26599: LD_INT 0
26601: PPUSH
26602: PPUSH
26603: PPUSH
// result := true ;
26604: LD_ADDR_VAR 0 3
26608: PUSH
26609: LD_INT 1
26611: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26612: LD_ADDR_VAR 0 5
26616: PUSH
26617: LD_VAR 0 2
26621: PPUSH
26622: CALL_OW 480
26626: ST_TO_ADDR
// if not tmp then
26627: LD_VAR 0 5
26631: NOT
26632: IFFALSE 26636
// exit ;
26634: GO 26685
// for i in tmp do
26636: LD_ADDR_VAR 0 4
26640: PUSH
26641: LD_VAR 0 5
26645: PUSH
26646: FOR_IN
26647: IFFALSE 26683
// if GetTech ( i , side ) <> state_researched then
26649: LD_VAR 0 4
26653: PPUSH
26654: LD_VAR 0 1
26658: PPUSH
26659: CALL_OW 321
26663: PUSH
26664: LD_INT 2
26666: NONEQUAL
26667: IFFALSE 26681
// begin result := false ;
26669: LD_ADDR_VAR 0 3
26673: PUSH
26674: LD_INT 0
26676: ST_TO_ADDR
// exit ;
26677: POP
26678: POP
26679: GO 26685
// end ;
26681: GO 26646
26683: POP
26684: POP
// end ;
26685: LD_VAR 0 3
26689: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26690: LD_INT 0
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26705: LD_VAR 0 1
26709: NOT
26710: PUSH
26711: LD_VAR 0 1
26715: PPUSH
26716: CALL_OW 257
26720: PUSH
26721: LD_INT 9
26723: NONEQUAL
26724: OR
26725: IFFALSE 26729
// exit ;
26727: GO 27302
// side := GetSide ( unit ) ;
26729: LD_ADDR_VAR 0 9
26733: PUSH
26734: LD_VAR 0 1
26738: PPUSH
26739: CALL_OW 255
26743: ST_TO_ADDR
// tech_space := tech_spacanom ;
26744: LD_ADDR_VAR 0 12
26748: PUSH
26749: LD_INT 29
26751: ST_TO_ADDR
// tech_time := tech_taurad ;
26752: LD_ADDR_VAR 0 13
26756: PUSH
26757: LD_INT 28
26759: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26760: LD_ADDR_VAR 0 11
26764: PUSH
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 310
26774: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26775: LD_VAR 0 11
26779: PPUSH
26780: CALL_OW 247
26784: PUSH
26785: LD_INT 2
26787: EQUAL
26788: IFFALSE 26792
// exit ;
26790: GO 27302
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26792: LD_ADDR_VAR 0 8
26796: PUSH
26797: LD_INT 81
26799: PUSH
26800: LD_VAR 0 9
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 3
26811: PUSH
26812: LD_INT 21
26814: PUSH
26815: LD_INT 3
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PPUSH
26830: CALL_OW 69
26834: ST_TO_ADDR
// if not tmp then
26835: LD_VAR 0 8
26839: NOT
26840: IFFALSE 26844
// exit ;
26842: GO 27302
// if in_unit then
26844: LD_VAR 0 11
26848: IFFALSE 26872
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26850: LD_ADDR_VAR 0 10
26854: PUSH
26855: LD_VAR 0 8
26859: PPUSH
26860: LD_VAR 0 11
26864: PPUSH
26865: CALL_OW 74
26869: ST_TO_ADDR
26870: GO 26892
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26872: LD_ADDR_VAR 0 10
26876: PUSH
26877: LD_VAR 0 8
26881: PPUSH
26882: LD_VAR 0 1
26886: PPUSH
26887: CALL_OW 74
26891: ST_TO_ADDR
// if not enemy then
26892: LD_VAR 0 10
26896: NOT
26897: IFFALSE 26901
// exit ;
26899: GO 27302
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26901: LD_VAR 0 11
26905: PUSH
26906: LD_VAR 0 11
26910: PPUSH
26911: LD_VAR 0 10
26915: PPUSH
26916: CALL_OW 296
26920: PUSH
26921: LD_INT 13
26923: GREATER
26924: AND
26925: PUSH
26926: LD_VAR 0 1
26930: PPUSH
26931: LD_VAR 0 10
26935: PPUSH
26936: CALL_OW 296
26940: PUSH
26941: LD_INT 12
26943: GREATER
26944: OR
26945: IFFALSE 26949
// exit ;
26947: GO 27302
// missile := [ 1 ] ;
26949: LD_ADDR_VAR 0 14
26953: PUSH
26954: LD_INT 1
26956: PUSH
26957: EMPTY
26958: LIST
26959: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26960: LD_VAR 0 9
26964: PPUSH
26965: LD_VAR 0 12
26969: PPUSH
26970: CALL_OW 325
26974: IFFALSE 27003
// missile := Replace ( missile , missile + 1 , 2 ) ;
26976: LD_ADDR_VAR 0 14
26980: PUSH
26981: LD_VAR 0 14
26985: PPUSH
26986: LD_VAR 0 14
26990: PUSH
26991: LD_INT 1
26993: PLUS
26994: PPUSH
26995: LD_INT 2
26997: PPUSH
26998: CALL_OW 1
27002: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27003: LD_VAR 0 9
27007: PPUSH
27008: LD_VAR 0 13
27012: PPUSH
27013: CALL_OW 325
27017: PUSH
27018: LD_VAR 0 10
27022: PPUSH
27023: CALL_OW 255
27027: PPUSH
27028: LD_VAR 0 13
27032: PPUSH
27033: CALL_OW 325
27037: NOT
27038: AND
27039: IFFALSE 27068
// missile := Replace ( missile , missile + 1 , 3 ) ;
27041: LD_ADDR_VAR 0 14
27045: PUSH
27046: LD_VAR 0 14
27050: PPUSH
27051: LD_VAR 0 14
27055: PUSH
27056: LD_INT 1
27058: PLUS
27059: PPUSH
27060: LD_INT 3
27062: PPUSH
27063: CALL_OW 1
27067: ST_TO_ADDR
// if missile < 2 then
27068: LD_VAR 0 14
27072: PUSH
27073: LD_INT 2
27075: LESS
27076: IFFALSE 27080
// exit ;
27078: GO 27302
// x := GetX ( enemy ) ;
27080: LD_ADDR_VAR 0 4
27084: PUSH
27085: LD_VAR 0 10
27089: PPUSH
27090: CALL_OW 250
27094: ST_TO_ADDR
// y := GetY ( enemy ) ;
27095: LD_ADDR_VAR 0 5
27099: PUSH
27100: LD_VAR 0 10
27104: PPUSH
27105: CALL_OW 251
27109: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27110: LD_ADDR_VAR 0 6
27114: PUSH
27115: LD_VAR 0 4
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PPUSH
27124: LD_INT 1
27126: PPUSH
27127: CALL_OW 12
27131: PLUS
27132: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27133: LD_ADDR_VAR 0 7
27137: PUSH
27138: LD_VAR 0 5
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PPUSH
27147: LD_INT 1
27149: PPUSH
27150: CALL_OW 12
27154: PLUS
27155: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27156: LD_VAR 0 6
27160: PPUSH
27161: LD_VAR 0 7
27165: PPUSH
27166: CALL_OW 488
27170: NOT
27171: IFFALSE 27193
// begin _x := x ;
27173: LD_ADDR_VAR 0 6
27177: PUSH
27178: LD_VAR 0 4
27182: ST_TO_ADDR
// _y := y ;
27183: LD_ADDR_VAR 0 7
27187: PUSH
27188: LD_VAR 0 5
27192: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27193: LD_ADDR_VAR 0 3
27197: PUSH
27198: LD_INT 1
27200: PPUSH
27201: LD_VAR 0 14
27205: PPUSH
27206: CALL_OW 12
27210: ST_TO_ADDR
// case i of 1 :
27211: LD_VAR 0 3
27215: PUSH
27216: LD_INT 1
27218: DOUBLE
27219: EQUAL
27220: IFTRUE 27224
27222: GO 27241
27224: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27225: LD_VAR 0 1
27229: PPUSH
27230: LD_VAR 0 10
27234: PPUSH
27235: CALL_OW 115
27239: GO 27302
27241: LD_INT 2
27243: DOUBLE
27244: EQUAL
27245: IFTRUE 27249
27247: GO 27271
27249: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27250: LD_VAR 0 1
27254: PPUSH
27255: LD_VAR 0 6
27259: PPUSH
27260: LD_VAR 0 7
27264: PPUSH
27265: CALL_OW 153
27269: GO 27302
27271: LD_INT 3
27273: DOUBLE
27274: EQUAL
27275: IFTRUE 27279
27277: GO 27301
27279: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27280: LD_VAR 0 1
27284: PPUSH
27285: LD_VAR 0 6
27289: PPUSH
27290: LD_VAR 0 7
27294: PPUSH
27295: CALL_OW 154
27299: GO 27302
27301: POP
// end ;
27302: LD_VAR 0 2
27306: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27307: LD_INT 0
27309: PPUSH
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
27314: PPUSH
// if not unit or not building then
27315: LD_VAR 0 1
27319: NOT
27320: PUSH
27321: LD_VAR 0 2
27325: NOT
27326: OR
27327: IFFALSE 27331
// exit ;
27329: GO 27489
// x := GetX ( building ) ;
27331: LD_ADDR_VAR 0 5
27335: PUSH
27336: LD_VAR 0 2
27340: PPUSH
27341: CALL_OW 250
27345: ST_TO_ADDR
// y := GetY ( building ) ;
27346: LD_ADDR_VAR 0 6
27350: PUSH
27351: LD_VAR 0 2
27355: PPUSH
27356: CALL_OW 251
27360: ST_TO_ADDR
// for i = 0 to 5 do
27361: LD_ADDR_VAR 0 4
27365: PUSH
27366: DOUBLE
27367: LD_INT 0
27369: DEC
27370: ST_TO_ADDR
27371: LD_INT 5
27373: PUSH
27374: FOR_TO
27375: IFFALSE 27487
// begin _x := ShiftX ( x , i , 3 ) ;
27377: LD_ADDR_VAR 0 7
27381: PUSH
27382: LD_VAR 0 5
27386: PPUSH
27387: LD_VAR 0 4
27391: PPUSH
27392: LD_INT 3
27394: PPUSH
27395: CALL_OW 272
27399: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27400: LD_ADDR_VAR 0 8
27404: PUSH
27405: LD_VAR 0 6
27409: PPUSH
27410: LD_VAR 0 4
27414: PPUSH
27415: LD_INT 3
27417: PPUSH
27418: CALL_OW 273
27422: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27423: LD_VAR 0 7
27427: PPUSH
27428: LD_VAR 0 8
27432: PPUSH
27433: CALL_OW 488
27437: NOT
27438: IFFALSE 27442
// continue ;
27440: GO 27374
// if HexInfo ( _x , _y ) = 0 then
27442: LD_VAR 0 7
27446: PPUSH
27447: LD_VAR 0 8
27451: PPUSH
27452: CALL_OW 428
27456: PUSH
27457: LD_INT 0
27459: EQUAL
27460: IFFALSE 27485
// begin ComMoveXY ( unit , _x , _y ) ;
27462: LD_VAR 0 1
27466: PPUSH
27467: LD_VAR 0 7
27471: PPUSH
27472: LD_VAR 0 8
27476: PPUSH
27477: CALL_OW 111
// exit ;
27481: POP
27482: POP
27483: GO 27489
// end ; end ;
27485: GO 27374
27487: POP
27488: POP
// end ;
27489: LD_VAR 0 3
27493: RET
// export function ScanBase ( side , base_area ) ; begin
27494: LD_INT 0
27496: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27497: LD_ADDR_VAR 0 3
27501: PUSH
27502: LD_VAR 0 2
27506: PPUSH
27507: LD_INT 81
27509: PUSH
27510: LD_VAR 0 1
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PPUSH
27519: CALL_OW 70
27523: ST_TO_ADDR
// end ;
27524: LD_VAR 0 3
27528: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27529: LD_INT 0
27531: PPUSH
27532: PPUSH
27533: PPUSH
27534: PPUSH
// result := false ;
27535: LD_ADDR_VAR 0 2
27539: PUSH
27540: LD_INT 0
27542: ST_TO_ADDR
// side := GetSide ( unit ) ;
27543: LD_ADDR_VAR 0 3
27547: PUSH
27548: LD_VAR 0 1
27552: PPUSH
27553: CALL_OW 255
27557: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27558: LD_ADDR_VAR 0 4
27562: PUSH
27563: LD_VAR 0 1
27567: PPUSH
27568: CALL_OW 248
27572: ST_TO_ADDR
// case nat of 1 :
27573: LD_VAR 0 4
27577: PUSH
27578: LD_INT 1
27580: DOUBLE
27581: EQUAL
27582: IFTRUE 27586
27584: GO 27597
27586: POP
// tech := tech_lassight ; 2 :
27587: LD_ADDR_VAR 0 5
27591: PUSH
27592: LD_INT 12
27594: ST_TO_ADDR
27595: GO 27636
27597: LD_INT 2
27599: DOUBLE
27600: EQUAL
27601: IFTRUE 27605
27603: GO 27616
27605: POP
// tech := tech_mortar ; 3 :
27606: LD_ADDR_VAR 0 5
27610: PUSH
27611: LD_INT 41
27613: ST_TO_ADDR
27614: GO 27636
27616: LD_INT 3
27618: DOUBLE
27619: EQUAL
27620: IFTRUE 27624
27622: GO 27635
27624: POP
// tech := tech_bazooka ; end ;
27625: LD_ADDR_VAR 0 5
27629: PUSH
27630: LD_INT 44
27632: ST_TO_ADDR
27633: GO 27636
27635: POP
// if Researched ( side , tech ) then
27636: LD_VAR 0 3
27640: PPUSH
27641: LD_VAR 0 5
27645: PPUSH
27646: CALL_OW 325
27650: IFFALSE 27677
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27652: LD_ADDR_VAR 0 2
27656: PUSH
27657: LD_INT 5
27659: PUSH
27660: LD_INT 8
27662: PUSH
27663: LD_INT 9
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: LIST
27670: PUSH
27671: LD_VAR 0 4
27675: ARRAY
27676: ST_TO_ADDR
// end ;
27677: LD_VAR 0 2
27681: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27682: LD_INT 0
27684: PPUSH
27685: PPUSH
27686: PPUSH
// if not mines then
27687: LD_VAR 0 2
27691: NOT
27692: IFFALSE 27696
// exit ;
27694: GO 27840
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27696: LD_ADDR_VAR 0 5
27700: PUSH
27701: LD_INT 81
27703: PUSH
27704: LD_VAR 0 1
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 3
27715: PUSH
27716: LD_INT 21
27718: PUSH
27719: LD_INT 3
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PPUSH
27734: CALL_OW 69
27738: ST_TO_ADDR
// for i in mines do
27739: LD_ADDR_VAR 0 4
27743: PUSH
27744: LD_VAR 0 2
27748: PUSH
27749: FOR_IN
27750: IFFALSE 27838
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27752: LD_VAR 0 4
27756: PUSH
27757: LD_INT 1
27759: ARRAY
27760: PPUSH
27761: LD_VAR 0 4
27765: PUSH
27766: LD_INT 2
27768: ARRAY
27769: PPUSH
27770: CALL_OW 458
27774: NOT
27775: IFFALSE 27779
// continue ;
27777: GO 27749
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27779: LD_VAR 0 4
27783: PUSH
27784: LD_INT 1
27786: ARRAY
27787: PPUSH
27788: LD_VAR 0 4
27792: PUSH
27793: LD_INT 2
27795: ARRAY
27796: PPUSH
27797: CALL_OW 428
27801: PUSH
27802: LD_VAR 0 5
27806: IN
27807: IFFALSE 27836
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27809: LD_VAR 0 4
27813: PUSH
27814: LD_INT 1
27816: ARRAY
27817: PPUSH
27818: LD_VAR 0 4
27822: PUSH
27823: LD_INT 2
27825: ARRAY
27826: PPUSH
27827: LD_VAR 0 1
27831: PPUSH
27832: CALL_OW 456
// end ;
27836: GO 27749
27838: POP
27839: POP
// end ;
27840: LD_VAR 0 3
27844: RET
// export function Count ( array ) ; var i ; begin
27845: LD_INT 0
27847: PPUSH
27848: PPUSH
// result := 0 ;
27849: LD_ADDR_VAR 0 2
27853: PUSH
27854: LD_INT 0
27856: ST_TO_ADDR
// for i in array do
27857: LD_ADDR_VAR 0 3
27861: PUSH
27862: LD_VAR 0 1
27866: PUSH
27867: FOR_IN
27868: IFFALSE 27892
// if i then
27870: LD_VAR 0 3
27874: IFFALSE 27890
// result := result + 1 ;
27876: LD_ADDR_VAR 0 2
27880: PUSH
27881: LD_VAR 0 2
27885: PUSH
27886: LD_INT 1
27888: PLUS
27889: ST_TO_ADDR
27890: GO 27867
27892: POP
27893: POP
// end ;
27894: LD_VAR 0 2
27898: RET
// export function IsEmpty ( building ) ; begin
27899: LD_INT 0
27901: PPUSH
// if not building then
27902: LD_VAR 0 1
27906: NOT
27907: IFFALSE 27911
// exit ;
27909: GO 27954
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27911: LD_ADDR_VAR 0 2
27915: PUSH
27916: LD_VAR 0 1
27920: PUSH
27921: LD_INT 22
27923: PUSH
27924: LD_VAR 0 1
27928: PPUSH
27929: CALL_OW 255
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 58
27940: PUSH
27941: EMPTY
27942: LIST
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PPUSH
27948: CALL_OW 69
27952: IN
27953: ST_TO_ADDR
// end ;
27954: LD_VAR 0 2
27958: RET
// export function IsNotFull ( building ) ; var places ; begin
27959: LD_INT 0
27961: PPUSH
27962: PPUSH
// if not building then
27963: LD_VAR 0 1
27967: NOT
27968: IFFALSE 27972
// exit ;
27970: GO 28143
// result := false ;
27972: LD_ADDR_VAR 0 2
27976: PUSH
27977: LD_INT 0
27979: ST_TO_ADDR
// places := 0 ;
27980: LD_ADDR_VAR 0 3
27984: PUSH
27985: LD_INT 0
27987: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27988: LD_VAR 0 1
27992: PPUSH
27993: CALL_OW 266
27997: PUSH
27998: LD_INT 0
28000: DOUBLE
28001: EQUAL
28002: IFTRUE 28060
28004: LD_INT 1
28006: DOUBLE
28007: EQUAL
28008: IFTRUE 28060
28010: LD_INT 6
28012: DOUBLE
28013: EQUAL
28014: IFTRUE 28060
28016: LD_INT 7
28018: DOUBLE
28019: EQUAL
28020: IFTRUE 28060
28022: LD_INT 8
28024: DOUBLE
28025: EQUAL
28026: IFTRUE 28060
28028: LD_INT 4
28030: DOUBLE
28031: EQUAL
28032: IFTRUE 28060
28034: LD_INT 5
28036: DOUBLE
28037: EQUAL
28038: IFTRUE 28060
28040: LD_INT 2
28042: DOUBLE
28043: EQUAL
28044: IFTRUE 28060
28046: LD_INT 3
28048: DOUBLE
28049: EQUAL
28050: IFTRUE 28060
28052: LD_INT 35
28054: DOUBLE
28055: EQUAL
28056: IFTRUE 28060
28058: GO 28071
28060: POP
// places := 6 ; b_bunker , b_breastwork :
28061: LD_ADDR_VAR 0 3
28065: PUSH
28066: LD_INT 6
28068: ST_TO_ADDR
28069: GO 28116
28071: LD_INT 32
28073: DOUBLE
28074: EQUAL
28075: IFTRUE 28085
28077: LD_INT 31
28079: DOUBLE
28080: EQUAL
28081: IFTRUE 28085
28083: GO 28096
28085: POP
// places := 1 ; b_control_tower :
28086: LD_ADDR_VAR 0 3
28090: PUSH
28091: LD_INT 1
28093: ST_TO_ADDR
28094: GO 28116
28096: LD_INT 36
28098: DOUBLE
28099: EQUAL
28100: IFTRUE 28104
28102: GO 28115
28104: POP
// places := 3 ; end ;
28105: LD_ADDR_VAR 0 3
28109: PUSH
28110: LD_INT 3
28112: ST_TO_ADDR
28113: GO 28116
28115: POP
// if places then
28116: LD_VAR 0 3
28120: IFFALSE 28143
// result := UnitsInside ( building ) < places ;
28122: LD_ADDR_VAR 0 2
28126: PUSH
28127: LD_VAR 0 1
28131: PPUSH
28132: CALL_OW 313
28136: PUSH
28137: LD_VAR 0 3
28141: LESS
28142: ST_TO_ADDR
// end ;
28143: LD_VAR 0 2
28147: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28148: LD_INT 0
28150: PPUSH
28151: PPUSH
28152: PPUSH
28153: PPUSH
// tmp := [ ] ;
28154: LD_ADDR_VAR 0 3
28158: PUSH
28159: EMPTY
28160: ST_TO_ADDR
// list := [ ] ;
28161: LD_ADDR_VAR 0 5
28165: PUSH
28166: EMPTY
28167: ST_TO_ADDR
// for i = 16 to 25 do
28168: LD_ADDR_VAR 0 4
28172: PUSH
28173: DOUBLE
28174: LD_INT 16
28176: DEC
28177: ST_TO_ADDR
28178: LD_INT 25
28180: PUSH
28181: FOR_TO
28182: IFFALSE 28255
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28184: LD_ADDR_VAR 0 3
28188: PUSH
28189: LD_VAR 0 3
28193: PUSH
28194: LD_INT 22
28196: PUSH
28197: LD_VAR 0 1
28201: PPUSH
28202: CALL_OW 255
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 91
28213: PUSH
28214: LD_VAR 0 1
28218: PUSH
28219: LD_INT 6
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 30
28229: PUSH
28230: LD_VAR 0 4
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: PUSH
28244: EMPTY
28245: LIST
28246: PPUSH
28247: CALL_OW 69
28251: ADD
28252: ST_TO_ADDR
28253: GO 28181
28255: POP
28256: POP
// for i = 1 to tmp do
28257: LD_ADDR_VAR 0 4
28261: PUSH
28262: DOUBLE
28263: LD_INT 1
28265: DEC
28266: ST_TO_ADDR
28267: LD_VAR 0 3
28271: PUSH
28272: FOR_TO
28273: IFFALSE 28361
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28275: LD_ADDR_VAR 0 5
28279: PUSH
28280: LD_VAR 0 5
28284: PUSH
28285: LD_VAR 0 3
28289: PUSH
28290: LD_VAR 0 4
28294: ARRAY
28295: PPUSH
28296: CALL_OW 266
28300: PUSH
28301: LD_VAR 0 3
28305: PUSH
28306: LD_VAR 0 4
28310: ARRAY
28311: PPUSH
28312: CALL_OW 250
28316: PUSH
28317: LD_VAR 0 3
28321: PUSH
28322: LD_VAR 0 4
28326: ARRAY
28327: PPUSH
28328: CALL_OW 251
28332: PUSH
28333: LD_VAR 0 3
28337: PUSH
28338: LD_VAR 0 4
28342: ARRAY
28343: PPUSH
28344: CALL_OW 254
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: ADD
28358: ST_TO_ADDR
28359: GO 28272
28361: POP
28362: POP
// result := list ;
28363: LD_ADDR_VAR 0 2
28367: PUSH
28368: LD_VAR 0 5
28372: ST_TO_ADDR
// end ;
28373: LD_VAR 0 2
28377: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28378: LD_INT 0
28380: PPUSH
28381: PPUSH
28382: PPUSH
28383: PPUSH
28384: PPUSH
28385: PPUSH
28386: PPUSH
// if not factory then
28387: LD_VAR 0 1
28391: NOT
28392: IFFALSE 28396
// exit ;
28394: GO 28989
// if control = control_apeman then
28396: LD_VAR 0 4
28400: PUSH
28401: LD_INT 5
28403: EQUAL
28404: IFFALSE 28513
// begin tmp := UnitsInside ( factory ) ;
28406: LD_ADDR_VAR 0 8
28410: PUSH
28411: LD_VAR 0 1
28415: PPUSH
28416: CALL_OW 313
28420: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28421: LD_VAR 0 8
28425: PPUSH
28426: LD_INT 25
28428: PUSH
28429: LD_INT 12
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PPUSH
28436: CALL_OW 72
28440: NOT
28441: IFFALSE 28451
// control := control_manual ;
28443: LD_ADDR_VAR 0 4
28447: PUSH
28448: LD_INT 1
28450: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28451: LD_ADDR_VAR 0 8
28455: PUSH
28456: LD_VAR 0 1
28460: PPUSH
28461: CALL 28148 0 1
28465: ST_TO_ADDR
// if tmp then
28466: LD_VAR 0 8
28470: IFFALSE 28513
// begin for i in tmp do
28472: LD_ADDR_VAR 0 7
28476: PUSH
28477: LD_VAR 0 8
28481: PUSH
28482: FOR_IN
28483: IFFALSE 28511
// if i [ 1 ] = b_ext_radio then
28485: LD_VAR 0 7
28489: PUSH
28490: LD_INT 1
28492: ARRAY
28493: PUSH
28494: LD_INT 22
28496: EQUAL
28497: IFFALSE 28509
// begin control := control_remote ;
28499: LD_ADDR_VAR 0 4
28503: PUSH
28504: LD_INT 2
28506: ST_TO_ADDR
// break ;
28507: GO 28511
// end ;
28509: GO 28482
28511: POP
28512: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28513: LD_VAR 0 1
28517: PPUSH
28518: LD_VAR 0 2
28522: PPUSH
28523: LD_VAR 0 3
28527: PPUSH
28528: LD_VAR 0 4
28532: PPUSH
28533: LD_VAR 0 5
28537: PPUSH
28538: CALL_OW 448
28542: IFFALSE 28577
// begin result := [ chassis , engine , control , weapon ] ;
28544: LD_ADDR_VAR 0 6
28548: PUSH
28549: LD_VAR 0 2
28553: PUSH
28554: LD_VAR 0 3
28558: PUSH
28559: LD_VAR 0 4
28563: PUSH
28564: LD_VAR 0 5
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: ST_TO_ADDR
// exit ;
28575: GO 28989
// end ; _chassis := AvailableChassisList ( factory ) ;
28577: LD_ADDR_VAR 0 9
28581: PUSH
28582: LD_VAR 0 1
28586: PPUSH
28587: CALL_OW 475
28591: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28592: LD_ADDR_VAR 0 11
28596: PUSH
28597: LD_VAR 0 1
28601: PPUSH
28602: CALL_OW 476
28606: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28607: LD_ADDR_VAR 0 12
28611: PUSH
28612: LD_VAR 0 1
28616: PPUSH
28617: CALL_OW 477
28621: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28622: LD_ADDR_VAR 0 10
28626: PUSH
28627: LD_VAR 0 1
28631: PPUSH
28632: CALL_OW 478
28636: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28637: LD_VAR 0 9
28641: NOT
28642: PUSH
28643: LD_VAR 0 11
28647: NOT
28648: OR
28649: PUSH
28650: LD_VAR 0 12
28654: NOT
28655: OR
28656: PUSH
28657: LD_VAR 0 10
28661: NOT
28662: OR
28663: IFFALSE 28698
// begin result := [ chassis , engine , control , weapon ] ;
28665: LD_ADDR_VAR 0 6
28669: PUSH
28670: LD_VAR 0 2
28674: PUSH
28675: LD_VAR 0 3
28679: PUSH
28680: LD_VAR 0 4
28684: PUSH
28685: LD_VAR 0 5
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: ST_TO_ADDR
// exit ;
28696: GO 28989
// end ; if not chassis in _chassis then
28698: LD_VAR 0 2
28702: PUSH
28703: LD_VAR 0 9
28707: IN
28708: NOT
28709: IFFALSE 28735
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28711: LD_ADDR_VAR 0 2
28715: PUSH
28716: LD_VAR 0 9
28720: PUSH
28721: LD_INT 1
28723: PPUSH
28724: LD_VAR 0 9
28728: PPUSH
28729: CALL_OW 12
28733: ARRAY
28734: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28735: LD_VAR 0 2
28739: PPUSH
28740: LD_VAR 0 3
28744: PPUSH
28745: CALL 28994 0 2
28749: NOT
28750: IFFALSE 28809
// repeat engine := _engine [ 1 ] ;
28752: LD_ADDR_VAR 0 3
28756: PUSH
28757: LD_VAR 0 11
28761: PUSH
28762: LD_INT 1
28764: ARRAY
28765: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28766: LD_ADDR_VAR 0 11
28770: PUSH
28771: LD_VAR 0 11
28775: PPUSH
28776: LD_INT 1
28778: PPUSH
28779: CALL_OW 3
28783: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28784: LD_VAR 0 2
28788: PPUSH
28789: LD_VAR 0 3
28793: PPUSH
28794: CALL 28994 0 2
28798: PUSH
28799: LD_VAR 0 11
28803: PUSH
28804: EMPTY
28805: EQUAL
28806: OR
28807: IFFALSE 28752
// if not control in _control then
28809: LD_VAR 0 4
28813: PUSH
28814: LD_VAR 0 12
28818: IN
28819: NOT
28820: IFFALSE 28846
// control := _control [ rand ( 1 , _control ) ] ;
28822: LD_ADDR_VAR 0 4
28826: PUSH
28827: LD_VAR 0 12
28831: PUSH
28832: LD_INT 1
28834: PPUSH
28835: LD_VAR 0 12
28839: PPUSH
28840: CALL_OW 12
28844: ARRAY
28845: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28846: LD_VAR 0 2
28850: PPUSH
28851: LD_VAR 0 5
28855: PPUSH
28856: CALL 29214 0 2
28860: NOT
28861: IFFALSE 28920
// repeat weapon := _weapon [ 1 ] ;
28863: LD_ADDR_VAR 0 5
28867: PUSH
28868: LD_VAR 0 10
28872: PUSH
28873: LD_INT 1
28875: ARRAY
28876: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28877: LD_ADDR_VAR 0 10
28881: PUSH
28882: LD_VAR 0 10
28886: PPUSH
28887: LD_INT 1
28889: PPUSH
28890: CALL_OW 3
28894: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28895: LD_VAR 0 2
28899: PPUSH
28900: LD_VAR 0 5
28904: PPUSH
28905: CALL 29214 0 2
28909: PUSH
28910: LD_VAR 0 10
28914: PUSH
28915: EMPTY
28916: EQUAL
28917: OR
28918: IFFALSE 28863
// result := [ ] ;
28920: LD_ADDR_VAR 0 6
28924: PUSH
28925: EMPTY
28926: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28927: LD_VAR 0 1
28931: PPUSH
28932: LD_VAR 0 2
28936: PPUSH
28937: LD_VAR 0 3
28941: PPUSH
28942: LD_VAR 0 4
28946: PPUSH
28947: LD_VAR 0 5
28951: PPUSH
28952: CALL_OW 448
28956: IFFALSE 28989
// result := [ chassis , engine , control , weapon ] ;
28958: LD_ADDR_VAR 0 6
28962: PUSH
28963: LD_VAR 0 2
28967: PUSH
28968: LD_VAR 0 3
28972: PUSH
28973: LD_VAR 0 4
28977: PUSH
28978: LD_VAR 0 5
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: ST_TO_ADDR
// end ;
28989: LD_VAR 0 6
28993: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28994: LD_INT 0
28996: PPUSH
// if not chassis or not engine then
28997: LD_VAR 0 1
29001: NOT
29002: PUSH
29003: LD_VAR 0 2
29007: NOT
29008: OR
29009: IFFALSE 29013
// exit ;
29011: GO 29209
// case engine of engine_solar :
29013: LD_VAR 0 2
29017: PUSH
29018: LD_INT 2
29020: DOUBLE
29021: EQUAL
29022: IFTRUE 29026
29024: GO 29064
29026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29027: LD_ADDR_VAR 0 3
29031: PUSH
29032: LD_INT 11
29034: PUSH
29035: LD_INT 12
29037: PUSH
29038: LD_INT 13
29040: PUSH
29041: LD_INT 14
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: LD_INT 2
29049: PUSH
29050: LD_INT 3
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: ST_TO_ADDR
29062: GO 29193
29064: LD_INT 1
29066: DOUBLE
29067: EQUAL
29068: IFTRUE 29072
29070: GO 29134
29072: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29073: LD_ADDR_VAR 0 3
29077: PUSH
29078: LD_INT 11
29080: PUSH
29081: LD_INT 12
29083: PUSH
29084: LD_INT 13
29086: PUSH
29087: LD_INT 14
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: LD_INT 2
29095: PUSH
29096: LD_INT 3
29098: PUSH
29099: LD_INT 4
29101: PUSH
29102: LD_INT 5
29104: PUSH
29105: LD_INT 21
29107: PUSH
29108: LD_INT 23
29110: PUSH
29111: LD_INT 22
29113: PUSH
29114: LD_INT 24
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: ST_TO_ADDR
29132: GO 29193
29134: LD_INT 3
29136: DOUBLE
29137: EQUAL
29138: IFTRUE 29142
29140: GO 29192
29142: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29143: LD_ADDR_VAR 0 3
29147: PUSH
29148: LD_INT 13
29150: PUSH
29151: LD_INT 14
29153: PUSH
29154: LD_INT 2
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: LD_INT 4
29162: PUSH
29163: LD_INT 5
29165: PUSH
29166: LD_INT 21
29168: PUSH
29169: LD_INT 22
29171: PUSH
29172: LD_INT 23
29174: PUSH
29175: LD_INT 24
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: ST_TO_ADDR
29190: GO 29193
29192: POP
// result := ( chassis in result ) ;
29193: LD_ADDR_VAR 0 3
29197: PUSH
29198: LD_VAR 0 1
29202: PUSH
29203: LD_VAR 0 3
29207: IN
29208: ST_TO_ADDR
// end ;
29209: LD_VAR 0 3
29213: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29214: LD_INT 0
29216: PPUSH
// if not chassis or not weapon then
29217: LD_VAR 0 1
29221: NOT
29222: PUSH
29223: LD_VAR 0 2
29227: NOT
29228: OR
29229: IFFALSE 29233
// exit ;
29231: GO 30293
// case weapon of us_machine_gun :
29233: LD_VAR 0 2
29237: PUSH
29238: LD_INT 2
29240: DOUBLE
29241: EQUAL
29242: IFTRUE 29246
29244: GO 29276
29246: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29247: LD_ADDR_VAR 0 3
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: LD_INT 2
29257: PUSH
29258: LD_INT 3
29260: PUSH
29261: LD_INT 4
29263: PUSH
29264: LD_INT 5
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: ST_TO_ADDR
29274: GO 30277
29276: LD_INT 3
29278: DOUBLE
29279: EQUAL
29280: IFTRUE 29284
29282: GO 29314
29284: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29285: LD_ADDR_VAR 0 3
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: LD_INT 2
29295: PUSH
29296: LD_INT 3
29298: PUSH
29299: LD_INT 4
29301: PUSH
29302: LD_INT 5
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: ST_TO_ADDR
29312: GO 30277
29314: LD_INT 11
29316: DOUBLE
29317: EQUAL
29318: IFTRUE 29322
29320: GO 29352
29322: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29323: LD_ADDR_VAR 0 3
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: LD_INT 2
29333: PUSH
29334: LD_INT 3
29336: PUSH
29337: LD_INT 4
29339: PUSH
29340: LD_INT 5
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: ST_TO_ADDR
29350: GO 30277
29352: LD_INT 4
29354: DOUBLE
29355: EQUAL
29356: IFTRUE 29360
29358: GO 29386
29360: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29361: LD_ADDR_VAR 0 3
29365: PUSH
29366: LD_INT 2
29368: PUSH
29369: LD_INT 3
29371: PUSH
29372: LD_INT 4
29374: PUSH
29375: LD_INT 5
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: ST_TO_ADDR
29384: GO 30277
29386: LD_INT 5
29388: DOUBLE
29389: EQUAL
29390: IFTRUE 29394
29392: GO 29420
29394: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29395: LD_ADDR_VAR 0 3
29399: PUSH
29400: LD_INT 2
29402: PUSH
29403: LD_INT 3
29405: PUSH
29406: LD_INT 4
29408: PUSH
29409: LD_INT 5
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: ST_TO_ADDR
29418: GO 30277
29420: LD_INT 9
29422: DOUBLE
29423: EQUAL
29424: IFTRUE 29428
29426: GO 29454
29428: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29429: LD_ADDR_VAR 0 3
29433: PUSH
29434: LD_INT 2
29436: PUSH
29437: LD_INT 3
29439: PUSH
29440: LD_INT 4
29442: PUSH
29443: LD_INT 5
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: ST_TO_ADDR
29452: GO 30277
29454: LD_INT 7
29456: DOUBLE
29457: EQUAL
29458: IFTRUE 29462
29460: GO 29488
29462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29463: LD_ADDR_VAR 0 3
29467: PUSH
29468: LD_INT 2
29470: PUSH
29471: LD_INT 3
29473: PUSH
29474: LD_INT 4
29476: PUSH
29477: LD_INT 5
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: ST_TO_ADDR
29486: GO 30277
29488: LD_INT 12
29490: DOUBLE
29491: EQUAL
29492: IFTRUE 29496
29494: GO 29522
29496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29497: LD_ADDR_VAR 0 3
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: LD_INT 3
29507: PUSH
29508: LD_INT 4
29510: PUSH
29511: LD_INT 5
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: ST_TO_ADDR
29520: GO 30277
29522: LD_INT 13
29524: DOUBLE
29525: EQUAL
29526: IFTRUE 29530
29528: GO 29556
29530: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29531: LD_ADDR_VAR 0 3
29535: PUSH
29536: LD_INT 2
29538: PUSH
29539: LD_INT 3
29541: PUSH
29542: LD_INT 4
29544: PUSH
29545: LD_INT 5
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
29554: GO 30277
29556: LD_INT 14
29558: DOUBLE
29559: EQUAL
29560: IFTRUE 29564
29562: GO 29582
29564: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29565: LD_ADDR_VAR 0 3
29569: PUSH
29570: LD_INT 4
29572: PUSH
29573: LD_INT 5
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: ST_TO_ADDR
29580: GO 30277
29582: LD_INT 6
29584: DOUBLE
29585: EQUAL
29586: IFTRUE 29590
29588: GO 29608
29590: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29591: LD_ADDR_VAR 0 3
29595: PUSH
29596: LD_INT 4
29598: PUSH
29599: LD_INT 5
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: ST_TO_ADDR
29606: GO 30277
29608: LD_INT 10
29610: DOUBLE
29611: EQUAL
29612: IFTRUE 29616
29614: GO 29634
29616: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29617: LD_ADDR_VAR 0 3
29621: PUSH
29622: LD_INT 4
29624: PUSH
29625: LD_INT 5
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: ST_TO_ADDR
29632: GO 30277
29634: LD_INT 22
29636: DOUBLE
29637: EQUAL
29638: IFTRUE 29642
29640: GO 29668
29642: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29643: LD_ADDR_VAR 0 3
29647: PUSH
29648: LD_INT 11
29650: PUSH
29651: LD_INT 12
29653: PUSH
29654: LD_INT 13
29656: PUSH
29657: LD_INT 14
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: ST_TO_ADDR
29666: GO 30277
29668: LD_INT 23
29670: DOUBLE
29671: EQUAL
29672: IFTRUE 29676
29674: GO 29702
29676: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29677: LD_ADDR_VAR 0 3
29681: PUSH
29682: LD_INT 11
29684: PUSH
29685: LD_INT 12
29687: PUSH
29688: LD_INT 13
29690: PUSH
29691: LD_INT 14
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: ST_TO_ADDR
29700: GO 30277
29702: LD_INT 24
29704: DOUBLE
29705: EQUAL
29706: IFTRUE 29710
29708: GO 29736
29710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29711: LD_ADDR_VAR 0 3
29715: PUSH
29716: LD_INT 11
29718: PUSH
29719: LD_INT 12
29721: PUSH
29722: LD_INT 13
29724: PUSH
29725: LD_INT 14
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
29734: GO 30277
29736: LD_INT 30
29738: DOUBLE
29739: EQUAL
29740: IFTRUE 29744
29742: GO 29770
29744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29745: LD_ADDR_VAR 0 3
29749: PUSH
29750: LD_INT 11
29752: PUSH
29753: LD_INT 12
29755: PUSH
29756: LD_INT 13
29758: PUSH
29759: LD_INT 14
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: ST_TO_ADDR
29768: GO 30277
29770: LD_INT 25
29772: DOUBLE
29773: EQUAL
29774: IFTRUE 29778
29776: GO 29796
29778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29779: LD_ADDR_VAR 0 3
29783: PUSH
29784: LD_INT 13
29786: PUSH
29787: LD_INT 14
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: ST_TO_ADDR
29794: GO 30277
29796: LD_INT 27
29798: DOUBLE
29799: EQUAL
29800: IFTRUE 29804
29802: GO 29822
29804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29805: LD_ADDR_VAR 0 3
29809: PUSH
29810: LD_INT 13
29812: PUSH
29813: LD_INT 14
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: ST_TO_ADDR
29820: GO 30277
29822: LD_INT 92
29824: DOUBLE
29825: EQUAL
29826: IFTRUE 29830
29828: GO 29856
29830: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29831: LD_ADDR_VAR 0 3
29835: PUSH
29836: LD_INT 11
29838: PUSH
29839: LD_INT 12
29841: PUSH
29842: LD_INT 13
29844: PUSH
29845: LD_INT 14
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: ST_TO_ADDR
29854: GO 30277
29856: LD_INT 28
29858: DOUBLE
29859: EQUAL
29860: IFTRUE 29864
29862: GO 29882
29864: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29865: LD_ADDR_VAR 0 3
29869: PUSH
29870: LD_INT 13
29872: PUSH
29873: LD_INT 14
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: ST_TO_ADDR
29880: GO 30277
29882: LD_INT 29
29884: DOUBLE
29885: EQUAL
29886: IFTRUE 29890
29888: GO 29908
29890: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29891: LD_ADDR_VAR 0 3
29895: PUSH
29896: LD_INT 13
29898: PUSH
29899: LD_INT 14
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: ST_TO_ADDR
29906: GO 30277
29908: LD_INT 31
29910: DOUBLE
29911: EQUAL
29912: IFTRUE 29916
29914: GO 29934
29916: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29917: LD_ADDR_VAR 0 3
29921: PUSH
29922: LD_INT 13
29924: PUSH
29925: LD_INT 14
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: ST_TO_ADDR
29932: GO 30277
29934: LD_INT 26
29936: DOUBLE
29937: EQUAL
29938: IFTRUE 29942
29940: GO 29960
29942: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29943: LD_ADDR_VAR 0 3
29947: PUSH
29948: LD_INT 13
29950: PUSH
29951: LD_INT 14
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: ST_TO_ADDR
29958: GO 30277
29960: LD_INT 42
29962: DOUBLE
29963: EQUAL
29964: IFTRUE 29968
29966: GO 29994
29968: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29969: LD_ADDR_VAR 0 3
29973: PUSH
29974: LD_INT 21
29976: PUSH
29977: LD_INT 22
29979: PUSH
29980: LD_INT 23
29982: PUSH
29983: LD_INT 24
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: ST_TO_ADDR
29992: GO 30277
29994: LD_INT 43
29996: DOUBLE
29997: EQUAL
29998: IFTRUE 30002
30000: GO 30028
30002: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30003: LD_ADDR_VAR 0 3
30007: PUSH
30008: LD_INT 21
30010: PUSH
30011: LD_INT 22
30013: PUSH
30014: LD_INT 23
30016: PUSH
30017: LD_INT 24
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: ST_TO_ADDR
30026: GO 30277
30028: LD_INT 44
30030: DOUBLE
30031: EQUAL
30032: IFTRUE 30036
30034: GO 30062
30036: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30037: LD_ADDR_VAR 0 3
30041: PUSH
30042: LD_INT 21
30044: PUSH
30045: LD_INT 22
30047: PUSH
30048: LD_INT 23
30050: PUSH
30051: LD_INT 24
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: ST_TO_ADDR
30060: GO 30277
30062: LD_INT 45
30064: DOUBLE
30065: EQUAL
30066: IFTRUE 30070
30068: GO 30096
30070: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30071: LD_ADDR_VAR 0 3
30075: PUSH
30076: LD_INT 21
30078: PUSH
30079: LD_INT 22
30081: PUSH
30082: LD_INT 23
30084: PUSH
30085: LD_INT 24
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: ST_TO_ADDR
30094: GO 30277
30096: LD_INT 49
30098: DOUBLE
30099: EQUAL
30100: IFTRUE 30104
30102: GO 30130
30104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30105: LD_ADDR_VAR 0 3
30109: PUSH
30110: LD_INT 21
30112: PUSH
30113: LD_INT 22
30115: PUSH
30116: LD_INT 23
30118: PUSH
30119: LD_INT 24
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: ST_TO_ADDR
30128: GO 30277
30130: LD_INT 51
30132: DOUBLE
30133: EQUAL
30134: IFTRUE 30138
30136: GO 30164
30138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30139: LD_ADDR_VAR 0 3
30143: PUSH
30144: LD_INT 21
30146: PUSH
30147: LD_INT 22
30149: PUSH
30150: LD_INT 23
30152: PUSH
30153: LD_INT 24
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: ST_TO_ADDR
30162: GO 30277
30164: LD_INT 52
30166: DOUBLE
30167: EQUAL
30168: IFTRUE 30172
30170: GO 30198
30172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30173: LD_ADDR_VAR 0 3
30177: PUSH
30178: LD_INT 21
30180: PUSH
30181: LD_INT 22
30183: PUSH
30184: LD_INT 23
30186: PUSH
30187: LD_INT 24
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: ST_TO_ADDR
30196: GO 30277
30198: LD_INT 53
30200: DOUBLE
30201: EQUAL
30202: IFTRUE 30206
30204: GO 30224
30206: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30207: LD_ADDR_VAR 0 3
30211: PUSH
30212: LD_INT 23
30214: PUSH
30215: LD_INT 24
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: ST_TO_ADDR
30222: GO 30277
30224: LD_INT 46
30226: DOUBLE
30227: EQUAL
30228: IFTRUE 30232
30230: GO 30250
30232: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30233: LD_ADDR_VAR 0 3
30237: PUSH
30238: LD_INT 23
30240: PUSH
30241: LD_INT 24
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: ST_TO_ADDR
30248: GO 30277
30250: LD_INT 47
30252: DOUBLE
30253: EQUAL
30254: IFTRUE 30258
30256: GO 30276
30258: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30259: LD_ADDR_VAR 0 3
30263: PUSH
30264: LD_INT 23
30266: PUSH
30267: LD_INT 24
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: ST_TO_ADDR
30274: GO 30277
30276: POP
// result := ( chassis in result ) ;
30277: LD_ADDR_VAR 0 3
30281: PUSH
30282: LD_VAR 0 1
30286: PUSH
30287: LD_VAR 0 3
30291: IN
30292: ST_TO_ADDR
// end ;
30293: LD_VAR 0 3
30297: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30298: LD_INT 0
30300: PPUSH
30301: PPUSH
30302: PPUSH
30303: PPUSH
30304: PPUSH
30305: PPUSH
30306: PPUSH
// result := array ;
30307: LD_ADDR_VAR 0 5
30311: PUSH
30312: LD_VAR 0 1
30316: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30317: LD_VAR 0 1
30321: NOT
30322: PUSH
30323: LD_VAR 0 2
30327: NOT
30328: OR
30329: PUSH
30330: LD_VAR 0 3
30334: NOT
30335: OR
30336: PUSH
30337: LD_VAR 0 2
30341: PUSH
30342: LD_VAR 0 1
30346: GREATER
30347: OR
30348: PUSH
30349: LD_VAR 0 3
30353: PUSH
30354: LD_VAR 0 1
30358: GREATER
30359: OR
30360: IFFALSE 30364
// exit ;
30362: GO 30660
// if direction then
30364: LD_VAR 0 4
30368: IFFALSE 30432
// begin d := 1 ;
30370: LD_ADDR_VAR 0 9
30374: PUSH
30375: LD_INT 1
30377: ST_TO_ADDR
// if i_from > i_to then
30378: LD_VAR 0 2
30382: PUSH
30383: LD_VAR 0 3
30387: GREATER
30388: IFFALSE 30414
// length := ( array - i_from ) + i_to else
30390: LD_ADDR_VAR 0 11
30394: PUSH
30395: LD_VAR 0 1
30399: PUSH
30400: LD_VAR 0 2
30404: MINUS
30405: PUSH
30406: LD_VAR 0 3
30410: PLUS
30411: ST_TO_ADDR
30412: GO 30430
// length := i_to - i_from ;
30414: LD_ADDR_VAR 0 11
30418: PUSH
30419: LD_VAR 0 3
30423: PUSH
30424: LD_VAR 0 2
30428: MINUS
30429: ST_TO_ADDR
// end else
30430: GO 30493
// begin d := - 1 ;
30432: LD_ADDR_VAR 0 9
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: ST_TO_ADDR
// if i_from > i_to then
30441: LD_VAR 0 2
30445: PUSH
30446: LD_VAR 0 3
30450: GREATER
30451: IFFALSE 30471
// length := i_from - i_to else
30453: LD_ADDR_VAR 0 11
30457: PUSH
30458: LD_VAR 0 2
30462: PUSH
30463: LD_VAR 0 3
30467: MINUS
30468: ST_TO_ADDR
30469: GO 30493
// length := ( array - i_to ) + i_from ;
30471: LD_ADDR_VAR 0 11
30475: PUSH
30476: LD_VAR 0 1
30480: PUSH
30481: LD_VAR 0 3
30485: MINUS
30486: PUSH
30487: LD_VAR 0 2
30491: PLUS
30492: ST_TO_ADDR
// end ; if not length then
30493: LD_VAR 0 11
30497: NOT
30498: IFFALSE 30502
// exit ;
30500: GO 30660
// tmp := array ;
30502: LD_ADDR_VAR 0 10
30506: PUSH
30507: LD_VAR 0 1
30511: ST_TO_ADDR
// for i = 1 to length do
30512: LD_ADDR_VAR 0 6
30516: PUSH
30517: DOUBLE
30518: LD_INT 1
30520: DEC
30521: ST_TO_ADDR
30522: LD_VAR 0 11
30526: PUSH
30527: FOR_TO
30528: IFFALSE 30648
// begin for j = 1 to array do
30530: LD_ADDR_VAR 0 7
30534: PUSH
30535: DOUBLE
30536: LD_INT 1
30538: DEC
30539: ST_TO_ADDR
30540: LD_VAR 0 1
30544: PUSH
30545: FOR_TO
30546: IFFALSE 30634
// begin k := j + d ;
30548: LD_ADDR_VAR 0 8
30552: PUSH
30553: LD_VAR 0 7
30557: PUSH
30558: LD_VAR 0 9
30562: PLUS
30563: ST_TO_ADDR
// if k > array then
30564: LD_VAR 0 8
30568: PUSH
30569: LD_VAR 0 1
30573: GREATER
30574: IFFALSE 30584
// k := 1 ;
30576: LD_ADDR_VAR 0 8
30580: PUSH
30581: LD_INT 1
30583: ST_TO_ADDR
// if not k then
30584: LD_VAR 0 8
30588: NOT
30589: IFFALSE 30601
// k := array ;
30591: LD_ADDR_VAR 0 8
30595: PUSH
30596: LD_VAR 0 1
30600: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30601: LD_ADDR_VAR 0 10
30605: PUSH
30606: LD_VAR 0 10
30610: PPUSH
30611: LD_VAR 0 8
30615: PPUSH
30616: LD_VAR 0 1
30620: PUSH
30621: LD_VAR 0 7
30625: ARRAY
30626: PPUSH
30627: CALL_OW 1
30631: ST_TO_ADDR
// end ;
30632: GO 30545
30634: POP
30635: POP
// array := tmp ;
30636: LD_ADDR_VAR 0 1
30640: PUSH
30641: LD_VAR 0 10
30645: ST_TO_ADDR
// end ;
30646: GO 30527
30648: POP
30649: POP
// result := array ;
30650: LD_ADDR_VAR 0 5
30654: PUSH
30655: LD_VAR 0 1
30659: ST_TO_ADDR
// end ;
30660: LD_VAR 0 5
30664: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30665: LD_INT 0
30667: PPUSH
30668: PPUSH
// result := 0 ;
30669: LD_ADDR_VAR 0 3
30673: PUSH
30674: LD_INT 0
30676: ST_TO_ADDR
// if not array or not value in array then
30677: LD_VAR 0 1
30681: NOT
30682: PUSH
30683: LD_VAR 0 2
30687: PUSH
30688: LD_VAR 0 1
30692: IN
30693: NOT
30694: OR
30695: IFFALSE 30699
// exit ;
30697: GO 30753
// for i = 1 to array do
30699: LD_ADDR_VAR 0 4
30703: PUSH
30704: DOUBLE
30705: LD_INT 1
30707: DEC
30708: ST_TO_ADDR
30709: LD_VAR 0 1
30713: PUSH
30714: FOR_TO
30715: IFFALSE 30751
// if value = array [ i ] then
30717: LD_VAR 0 2
30721: PUSH
30722: LD_VAR 0 1
30726: PUSH
30727: LD_VAR 0 4
30731: ARRAY
30732: EQUAL
30733: IFFALSE 30749
// begin result := i ;
30735: LD_ADDR_VAR 0 3
30739: PUSH
30740: LD_VAR 0 4
30744: ST_TO_ADDR
// exit ;
30745: POP
30746: POP
30747: GO 30753
// end ;
30749: GO 30714
30751: POP
30752: POP
// end ;
30753: LD_VAR 0 3
30757: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30758: LD_INT 0
30760: PPUSH
// vc_chassis := chassis ;
30761: LD_ADDR_OWVAR 37
30765: PUSH
30766: LD_VAR 0 1
30770: ST_TO_ADDR
// vc_engine := engine ;
30771: LD_ADDR_OWVAR 39
30775: PUSH
30776: LD_VAR 0 2
30780: ST_TO_ADDR
// vc_control := control ;
30781: LD_ADDR_OWVAR 38
30785: PUSH
30786: LD_VAR 0 3
30790: ST_TO_ADDR
// vc_weapon := weapon ;
30791: LD_ADDR_OWVAR 40
30795: PUSH
30796: LD_VAR 0 4
30800: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30801: LD_ADDR_OWVAR 41
30805: PUSH
30806: LD_VAR 0 5
30810: ST_TO_ADDR
// end ;
30811: LD_VAR 0 6
30815: RET
// export function WantPlant ( unit ) ; var task ; begin
30816: LD_INT 0
30818: PPUSH
30819: PPUSH
// result := false ;
30820: LD_ADDR_VAR 0 2
30824: PUSH
30825: LD_INT 0
30827: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30828: LD_ADDR_VAR 0 3
30832: PUSH
30833: LD_VAR 0 1
30837: PPUSH
30838: CALL_OW 437
30842: ST_TO_ADDR
// if task then
30843: LD_VAR 0 3
30847: IFFALSE 30875
// if task [ 1 ] [ 1 ] = p then
30849: LD_VAR 0 3
30853: PUSH
30854: LD_INT 1
30856: ARRAY
30857: PUSH
30858: LD_INT 1
30860: ARRAY
30861: PUSH
30862: LD_STRING p
30864: EQUAL
30865: IFFALSE 30875
// result := true ;
30867: LD_ADDR_VAR 0 2
30871: PUSH
30872: LD_INT 1
30874: ST_TO_ADDR
// end ;
30875: LD_VAR 0 2
30879: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30880: LD_INT 0
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
// if pos < 1 then
30886: LD_VAR 0 2
30890: PUSH
30891: LD_INT 1
30893: LESS
30894: IFFALSE 30898
// exit ;
30896: GO 31201
// if pos = 1 then
30898: LD_VAR 0 2
30902: PUSH
30903: LD_INT 1
30905: EQUAL
30906: IFFALSE 30939
// result := Replace ( arr , pos [ 1 ] , value ) else
30908: LD_ADDR_VAR 0 4
30912: PUSH
30913: LD_VAR 0 1
30917: PPUSH
30918: LD_VAR 0 2
30922: PUSH
30923: LD_INT 1
30925: ARRAY
30926: PPUSH
30927: LD_VAR 0 3
30931: PPUSH
30932: CALL_OW 1
30936: ST_TO_ADDR
30937: GO 31201
// begin tmp := arr ;
30939: LD_ADDR_VAR 0 6
30943: PUSH
30944: LD_VAR 0 1
30948: ST_TO_ADDR
// s_arr := [ tmp ] ;
30949: LD_ADDR_VAR 0 7
30953: PUSH
30954: LD_VAR 0 6
30958: PUSH
30959: EMPTY
30960: LIST
30961: ST_TO_ADDR
// for i = 1 to pos - 1 do
30962: LD_ADDR_VAR 0 5
30966: PUSH
30967: DOUBLE
30968: LD_INT 1
30970: DEC
30971: ST_TO_ADDR
30972: LD_VAR 0 2
30976: PUSH
30977: LD_INT 1
30979: MINUS
30980: PUSH
30981: FOR_TO
30982: IFFALSE 31027
// begin tmp := tmp [ pos [ i ] ] ;
30984: LD_ADDR_VAR 0 6
30988: PUSH
30989: LD_VAR 0 6
30993: PUSH
30994: LD_VAR 0 2
30998: PUSH
30999: LD_VAR 0 5
31003: ARRAY
31004: ARRAY
31005: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31006: LD_ADDR_VAR 0 7
31010: PUSH
31011: LD_VAR 0 7
31015: PUSH
31016: LD_VAR 0 6
31020: PUSH
31021: EMPTY
31022: LIST
31023: ADD
31024: ST_TO_ADDR
// end ;
31025: GO 30981
31027: POP
31028: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31029: LD_ADDR_VAR 0 6
31033: PUSH
31034: LD_VAR 0 6
31038: PPUSH
31039: LD_VAR 0 2
31043: PUSH
31044: LD_VAR 0 2
31048: ARRAY
31049: PPUSH
31050: LD_VAR 0 3
31054: PPUSH
31055: CALL_OW 1
31059: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31060: LD_ADDR_VAR 0 7
31064: PUSH
31065: LD_VAR 0 7
31069: PPUSH
31070: LD_VAR 0 7
31074: PPUSH
31075: LD_VAR 0 6
31079: PPUSH
31080: CALL_OW 1
31084: ST_TO_ADDR
// for i = s_arr downto 2 do
31085: LD_ADDR_VAR 0 5
31089: PUSH
31090: DOUBLE
31091: LD_VAR 0 7
31095: INC
31096: ST_TO_ADDR
31097: LD_INT 2
31099: PUSH
31100: FOR_DOWNTO
31101: IFFALSE 31185
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31103: LD_ADDR_VAR 0 6
31107: PUSH
31108: LD_VAR 0 7
31112: PUSH
31113: LD_VAR 0 5
31117: PUSH
31118: LD_INT 1
31120: MINUS
31121: ARRAY
31122: PPUSH
31123: LD_VAR 0 2
31127: PUSH
31128: LD_VAR 0 5
31132: PUSH
31133: LD_INT 1
31135: MINUS
31136: ARRAY
31137: PPUSH
31138: LD_VAR 0 7
31142: PUSH
31143: LD_VAR 0 5
31147: ARRAY
31148: PPUSH
31149: CALL_OW 1
31153: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31154: LD_ADDR_VAR 0 7
31158: PUSH
31159: LD_VAR 0 7
31163: PPUSH
31164: LD_VAR 0 5
31168: PUSH
31169: LD_INT 1
31171: MINUS
31172: PPUSH
31173: LD_VAR 0 6
31177: PPUSH
31178: CALL_OW 1
31182: ST_TO_ADDR
// end ;
31183: GO 31100
31185: POP
31186: POP
// result := s_arr [ 1 ] ;
31187: LD_ADDR_VAR 0 4
31191: PUSH
31192: LD_VAR 0 7
31196: PUSH
31197: LD_INT 1
31199: ARRAY
31200: ST_TO_ADDR
// end ; end ;
31201: LD_VAR 0 4
31205: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31206: LD_INT 0
31208: PPUSH
31209: PPUSH
// if not list then
31210: LD_VAR 0 1
31214: NOT
31215: IFFALSE 31219
// exit ;
31217: GO 31310
// i := list [ pos1 ] ;
31219: LD_ADDR_VAR 0 5
31223: PUSH
31224: LD_VAR 0 1
31228: PUSH
31229: LD_VAR 0 2
31233: ARRAY
31234: ST_TO_ADDR
// if not i then
31235: LD_VAR 0 5
31239: NOT
31240: IFFALSE 31244
// exit ;
31242: GO 31310
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31244: LD_ADDR_VAR 0 1
31248: PUSH
31249: LD_VAR 0 1
31253: PPUSH
31254: LD_VAR 0 2
31258: PPUSH
31259: LD_VAR 0 1
31263: PUSH
31264: LD_VAR 0 3
31268: ARRAY
31269: PPUSH
31270: CALL_OW 1
31274: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31275: LD_ADDR_VAR 0 1
31279: PUSH
31280: LD_VAR 0 1
31284: PPUSH
31285: LD_VAR 0 3
31289: PPUSH
31290: LD_VAR 0 5
31294: PPUSH
31295: CALL_OW 1
31299: ST_TO_ADDR
// result := list ;
31300: LD_ADDR_VAR 0 4
31304: PUSH
31305: LD_VAR 0 1
31309: ST_TO_ADDR
// end ;
31310: LD_VAR 0 4
31314: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31315: LD_INT 0
31317: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31318: LD_ADDR_VAR 0 5
31322: PUSH
31323: LD_VAR 0 1
31327: PPUSH
31328: CALL_OW 250
31332: PPUSH
31333: LD_VAR 0 1
31337: PPUSH
31338: CALL_OW 251
31342: PPUSH
31343: LD_VAR 0 2
31347: PPUSH
31348: LD_VAR 0 3
31352: PPUSH
31353: LD_VAR 0 4
31357: PPUSH
31358: CALL 31368 0 5
31362: ST_TO_ADDR
// end ;
31363: LD_VAR 0 5
31367: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31368: LD_INT 0
31370: PPUSH
31371: PPUSH
31372: PPUSH
31373: PPUSH
// if not list then
31374: LD_VAR 0 3
31378: NOT
31379: IFFALSE 31383
// exit ;
31381: GO 31771
// result := [ ] ;
31383: LD_ADDR_VAR 0 6
31387: PUSH
31388: EMPTY
31389: ST_TO_ADDR
// for i in list do
31390: LD_ADDR_VAR 0 7
31394: PUSH
31395: LD_VAR 0 3
31399: PUSH
31400: FOR_IN
31401: IFFALSE 31603
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31403: LD_ADDR_VAR 0 9
31407: PUSH
31408: LD_VAR 0 7
31412: PPUSH
31413: LD_VAR 0 1
31417: PPUSH
31418: LD_VAR 0 2
31422: PPUSH
31423: CALL_OW 297
31427: ST_TO_ADDR
// if not result then
31428: LD_VAR 0 6
31432: NOT
31433: IFFALSE 31459
// result := [ [ i , tmp ] ] else
31435: LD_ADDR_VAR 0 6
31439: PUSH
31440: LD_VAR 0 7
31444: PUSH
31445: LD_VAR 0 9
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: EMPTY
31455: LIST
31456: ST_TO_ADDR
31457: GO 31601
// begin if result [ result ] [ 2 ] < tmp then
31459: LD_VAR 0 6
31463: PUSH
31464: LD_VAR 0 6
31468: ARRAY
31469: PUSH
31470: LD_INT 2
31472: ARRAY
31473: PUSH
31474: LD_VAR 0 9
31478: LESS
31479: IFFALSE 31521
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31481: LD_ADDR_VAR 0 6
31485: PUSH
31486: LD_VAR 0 6
31490: PPUSH
31491: LD_VAR 0 6
31495: PUSH
31496: LD_INT 1
31498: PLUS
31499: PPUSH
31500: LD_VAR 0 7
31504: PUSH
31505: LD_VAR 0 9
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PPUSH
31514: CALL_OW 2
31518: ST_TO_ADDR
31519: GO 31601
// for j = 1 to result do
31521: LD_ADDR_VAR 0 8
31525: PUSH
31526: DOUBLE
31527: LD_INT 1
31529: DEC
31530: ST_TO_ADDR
31531: LD_VAR 0 6
31535: PUSH
31536: FOR_TO
31537: IFFALSE 31599
// begin if tmp < result [ j ] [ 2 ] then
31539: LD_VAR 0 9
31543: PUSH
31544: LD_VAR 0 6
31548: PUSH
31549: LD_VAR 0 8
31553: ARRAY
31554: PUSH
31555: LD_INT 2
31557: ARRAY
31558: LESS
31559: IFFALSE 31597
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31561: LD_ADDR_VAR 0 6
31565: PUSH
31566: LD_VAR 0 6
31570: PPUSH
31571: LD_VAR 0 8
31575: PPUSH
31576: LD_VAR 0 7
31580: PUSH
31581: LD_VAR 0 9
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PPUSH
31590: CALL_OW 2
31594: ST_TO_ADDR
// break ;
31595: GO 31599
// end ; end ;
31597: GO 31536
31599: POP
31600: POP
// end ; end ;
31601: GO 31400
31603: POP
31604: POP
// if result and not asc then
31605: LD_VAR 0 6
31609: PUSH
31610: LD_VAR 0 4
31614: NOT
31615: AND
31616: IFFALSE 31691
// begin tmp := result ;
31618: LD_ADDR_VAR 0 9
31622: PUSH
31623: LD_VAR 0 6
31627: ST_TO_ADDR
// for i = tmp downto 1 do
31628: LD_ADDR_VAR 0 7
31632: PUSH
31633: DOUBLE
31634: LD_VAR 0 9
31638: INC
31639: ST_TO_ADDR
31640: LD_INT 1
31642: PUSH
31643: FOR_DOWNTO
31644: IFFALSE 31689
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31646: LD_ADDR_VAR 0 6
31650: PUSH
31651: LD_VAR 0 6
31655: PPUSH
31656: LD_VAR 0 9
31660: PUSH
31661: LD_VAR 0 7
31665: MINUS
31666: PUSH
31667: LD_INT 1
31669: PLUS
31670: PPUSH
31671: LD_VAR 0 9
31675: PUSH
31676: LD_VAR 0 7
31680: ARRAY
31681: PPUSH
31682: CALL_OW 1
31686: ST_TO_ADDR
31687: GO 31643
31689: POP
31690: POP
// end ; tmp := [ ] ;
31691: LD_ADDR_VAR 0 9
31695: PUSH
31696: EMPTY
31697: ST_TO_ADDR
// if mode then
31698: LD_VAR 0 5
31702: IFFALSE 31771
// begin for i = 1 to result do
31704: LD_ADDR_VAR 0 7
31708: PUSH
31709: DOUBLE
31710: LD_INT 1
31712: DEC
31713: ST_TO_ADDR
31714: LD_VAR 0 6
31718: PUSH
31719: FOR_TO
31720: IFFALSE 31759
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31722: LD_ADDR_VAR 0 9
31726: PUSH
31727: LD_VAR 0 9
31731: PPUSH
31732: LD_VAR 0 7
31736: PPUSH
31737: LD_VAR 0 6
31741: PUSH
31742: LD_VAR 0 7
31746: ARRAY
31747: PUSH
31748: LD_INT 1
31750: ARRAY
31751: PPUSH
31752: CALL_OW 1
31756: ST_TO_ADDR
31757: GO 31719
31759: POP
31760: POP
// result := tmp ;
31761: LD_ADDR_VAR 0 6
31765: PUSH
31766: LD_VAR 0 9
31770: ST_TO_ADDR
// end ; end ;
31771: LD_VAR 0 6
31775: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31776: LD_INT 0
31778: PPUSH
31779: PPUSH
31780: PPUSH
31781: PPUSH
31782: PPUSH
31783: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31784: LD_ADDR_VAR 0 5
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: EMPTY
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: ST_TO_ADDR
// if not x or not y then
31806: LD_VAR 0 2
31810: NOT
31811: PUSH
31812: LD_VAR 0 3
31816: NOT
31817: OR
31818: IFFALSE 31822
// exit ;
31820: GO 33472
// if not range then
31822: LD_VAR 0 4
31826: NOT
31827: IFFALSE 31837
// range := 10 ;
31829: LD_ADDR_VAR 0 4
31833: PUSH
31834: LD_INT 10
31836: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31837: LD_ADDR_VAR 0 8
31841: PUSH
31842: LD_INT 81
31844: PUSH
31845: LD_VAR 0 1
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 92
31856: PUSH
31857: LD_VAR 0 2
31861: PUSH
31862: LD_VAR 0 3
31866: PUSH
31867: LD_VAR 0 4
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 3
31880: PUSH
31881: LD_INT 21
31883: PUSH
31884: LD_INT 3
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: LIST
31899: PPUSH
31900: CALL_OW 69
31904: ST_TO_ADDR
// if not tmp then
31905: LD_VAR 0 8
31909: NOT
31910: IFFALSE 31914
// exit ;
31912: GO 33472
// for i in tmp do
31914: LD_ADDR_VAR 0 6
31918: PUSH
31919: LD_VAR 0 8
31923: PUSH
31924: FOR_IN
31925: IFFALSE 33447
// begin points := [ 0 , 0 , 0 ] ;
31927: LD_ADDR_VAR 0 9
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: LIST
31945: ST_TO_ADDR
// bpoints := 1 ;
31946: LD_ADDR_VAR 0 10
31950: PUSH
31951: LD_INT 1
31953: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31954: LD_VAR 0 6
31958: PPUSH
31959: CALL_OW 247
31963: PUSH
31964: LD_INT 1
31966: DOUBLE
31967: EQUAL
31968: IFTRUE 31972
31970: GO 32550
31972: POP
// begin if GetClass ( i ) = 1 then
31973: LD_VAR 0 6
31977: PPUSH
31978: CALL_OW 257
31982: PUSH
31983: LD_INT 1
31985: EQUAL
31986: IFFALSE 32007
// points := [ 10 , 5 , 3 ] ;
31988: LD_ADDR_VAR 0 9
31992: PUSH
31993: LD_INT 10
31995: PUSH
31996: LD_INT 5
31998: PUSH
31999: LD_INT 3
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: LIST
32006: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32007: LD_VAR 0 6
32011: PPUSH
32012: CALL_OW 257
32016: PUSH
32017: LD_INT 2
32019: PUSH
32020: LD_INT 3
32022: PUSH
32023: LD_INT 4
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: IN
32031: IFFALSE 32052
// points := [ 3 , 2 , 1 ] ;
32033: LD_ADDR_VAR 0 9
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: LD_INT 2
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32052: LD_VAR 0 6
32056: PPUSH
32057: CALL_OW 257
32061: PUSH
32062: LD_INT 5
32064: EQUAL
32065: IFFALSE 32086
// points := [ 130 , 5 , 2 ] ;
32067: LD_ADDR_VAR 0 9
32071: PUSH
32072: LD_INT 130
32074: PUSH
32075: LD_INT 5
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: LIST
32085: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32086: LD_VAR 0 6
32090: PPUSH
32091: CALL_OW 257
32095: PUSH
32096: LD_INT 8
32098: EQUAL
32099: IFFALSE 32120
// points := [ 35 , 35 , 30 ] ;
32101: LD_ADDR_VAR 0 9
32105: PUSH
32106: LD_INT 35
32108: PUSH
32109: LD_INT 35
32111: PUSH
32112: LD_INT 30
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: LIST
32119: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32120: LD_VAR 0 6
32124: PPUSH
32125: CALL_OW 257
32129: PUSH
32130: LD_INT 9
32132: EQUAL
32133: IFFALSE 32154
// points := [ 20 , 55 , 40 ] ;
32135: LD_ADDR_VAR 0 9
32139: PUSH
32140: LD_INT 20
32142: PUSH
32143: LD_INT 55
32145: PUSH
32146: LD_INT 40
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32154: LD_VAR 0 6
32158: PPUSH
32159: CALL_OW 257
32163: PUSH
32164: LD_INT 12
32166: PUSH
32167: LD_INT 16
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: IN
32174: IFFALSE 32195
// points := [ 5 , 3 , 2 ] ;
32176: LD_ADDR_VAR 0 9
32180: PUSH
32181: LD_INT 5
32183: PUSH
32184: LD_INT 3
32186: PUSH
32187: LD_INT 2
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32195: LD_VAR 0 6
32199: PPUSH
32200: CALL_OW 257
32204: PUSH
32205: LD_INT 17
32207: EQUAL
32208: IFFALSE 32229
// points := [ 100 , 50 , 75 ] ;
32210: LD_ADDR_VAR 0 9
32214: PUSH
32215: LD_INT 100
32217: PUSH
32218: LD_INT 50
32220: PUSH
32221: LD_INT 75
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: LIST
32228: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32229: LD_VAR 0 6
32233: PPUSH
32234: CALL_OW 257
32238: PUSH
32239: LD_INT 15
32241: EQUAL
32242: IFFALSE 32263
// points := [ 10 , 5 , 3 ] ;
32244: LD_ADDR_VAR 0 9
32248: PUSH
32249: LD_INT 10
32251: PUSH
32252: LD_INT 5
32254: PUSH
32255: LD_INT 3
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: LIST
32262: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32263: LD_VAR 0 6
32267: PPUSH
32268: CALL_OW 257
32272: PUSH
32273: LD_INT 14
32275: EQUAL
32276: IFFALSE 32297
// points := [ 10 , 0 , 0 ] ;
32278: LD_ADDR_VAR 0 9
32282: PUSH
32283: LD_INT 10
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: LD_INT 0
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: LIST
32296: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32297: LD_VAR 0 6
32301: PPUSH
32302: CALL_OW 257
32306: PUSH
32307: LD_INT 11
32309: EQUAL
32310: IFFALSE 32331
// points := [ 30 , 10 , 5 ] ;
32312: LD_ADDR_VAR 0 9
32316: PUSH
32317: LD_INT 30
32319: PUSH
32320: LD_INT 10
32322: PUSH
32323: LD_INT 5
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: LIST
32330: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32331: LD_VAR 0 1
32335: PPUSH
32336: LD_INT 5
32338: PPUSH
32339: CALL_OW 321
32343: PUSH
32344: LD_INT 2
32346: EQUAL
32347: IFFALSE 32364
// bpoints := bpoints * 1.8 ;
32349: LD_ADDR_VAR 0 10
32353: PUSH
32354: LD_VAR 0 10
32358: PUSH
32359: LD_REAL  1.80000000000000E+0000
32362: MUL
32363: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32364: LD_VAR 0 6
32368: PPUSH
32369: CALL_OW 257
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: LD_INT 2
32379: PUSH
32380: LD_INT 3
32382: PUSH
32383: LD_INT 4
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: IN
32392: PUSH
32393: LD_VAR 0 1
32397: PPUSH
32398: LD_INT 51
32400: PPUSH
32401: CALL_OW 321
32405: PUSH
32406: LD_INT 2
32408: EQUAL
32409: AND
32410: IFFALSE 32427
// bpoints := bpoints * 1.2 ;
32412: LD_ADDR_VAR 0 10
32416: PUSH
32417: LD_VAR 0 10
32421: PUSH
32422: LD_REAL  1.20000000000000E+0000
32425: MUL
32426: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32427: LD_VAR 0 6
32431: PPUSH
32432: CALL_OW 257
32436: PUSH
32437: LD_INT 5
32439: PUSH
32440: LD_INT 7
32442: PUSH
32443: LD_INT 9
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: LIST
32450: IN
32451: PUSH
32452: LD_VAR 0 1
32456: PPUSH
32457: LD_INT 52
32459: PPUSH
32460: CALL_OW 321
32464: PUSH
32465: LD_INT 2
32467: EQUAL
32468: AND
32469: IFFALSE 32486
// bpoints := bpoints * 1.5 ;
32471: LD_ADDR_VAR 0 10
32475: PUSH
32476: LD_VAR 0 10
32480: PUSH
32481: LD_REAL  1.50000000000000E+0000
32484: MUL
32485: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32486: LD_VAR 0 1
32490: PPUSH
32491: LD_INT 66
32493: PPUSH
32494: CALL_OW 321
32498: PUSH
32499: LD_INT 2
32501: EQUAL
32502: IFFALSE 32519
// bpoints := bpoints * 1.1 ;
32504: LD_ADDR_VAR 0 10
32508: PUSH
32509: LD_VAR 0 10
32513: PUSH
32514: LD_REAL  1.10000000000000E+0000
32517: MUL
32518: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32519: LD_ADDR_VAR 0 10
32523: PUSH
32524: LD_VAR 0 10
32528: PUSH
32529: LD_VAR 0 6
32533: PPUSH
32534: LD_INT 1
32536: PPUSH
32537: CALL_OW 259
32541: PUSH
32542: LD_REAL  1.15000000000000E+0000
32545: MUL
32546: MUL
32547: ST_TO_ADDR
// end ; unit_vehicle :
32548: GO 33376
32550: LD_INT 2
32552: DOUBLE
32553: EQUAL
32554: IFTRUE 32558
32556: GO 33364
32558: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32559: LD_VAR 0 6
32563: PPUSH
32564: CALL_OW 264
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: LD_INT 42
32574: PUSH
32575: LD_INT 24
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: IN
32583: IFFALSE 32604
// points := [ 25 , 5 , 3 ] ;
32585: LD_ADDR_VAR 0 9
32589: PUSH
32590: LD_INT 25
32592: PUSH
32593: LD_INT 5
32595: PUSH
32596: LD_INT 3
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: LIST
32603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32604: LD_VAR 0 6
32608: PPUSH
32609: CALL_OW 264
32613: PUSH
32614: LD_INT 4
32616: PUSH
32617: LD_INT 43
32619: PUSH
32620: LD_INT 25
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: LIST
32627: IN
32628: IFFALSE 32649
// points := [ 40 , 15 , 5 ] ;
32630: LD_ADDR_VAR 0 9
32634: PUSH
32635: LD_INT 40
32637: PUSH
32638: LD_INT 15
32640: PUSH
32641: LD_INT 5
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32649: LD_VAR 0 6
32653: PPUSH
32654: CALL_OW 264
32658: PUSH
32659: LD_INT 3
32661: PUSH
32662: LD_INT 23
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: IN
32669: IFFALSE 32690
// points := [ 7 , 25 , 8 ] ;
32671: LD_ADDR_VAR 0 9
32675: PUSH
32676: LD_INT 7
32678: PUSH
32679: LD_INT 25
32681: PUSH
32682: LD_INT 8
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: LIST
32689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32690: LD_VAR 0 6
32694: PPUSH
32695: CALL_OW 264
32699: PUSH
32700: LD_INT 5
32702: PUSH
32703: LD_INT 27
32705: PUSH
32706: LD_INT 44
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: LIST
32713: IN
32714: IFFALSE 32735
// points := [ 14 , 50 , 16 ] ;
32716: LD_ADDR_VAR 0 9
32720: PUSH
32721: LD_INT 14
32723: PUSH
32724: LD_INT 50
32726: PUSH
32727: LD_INT 16
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: LIST
32734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32735: LD_VAR 0 6
32739: PPUSH
32740: CALL_OW 264
32744: PUSH
32745: LD_INT 6
32747: PUSH
32748: LD_INT 46
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: IN
32755: IFFALSE 32776
// points := [ 32 , 120 , 70 ] ;
32757: LD_ADDR_VAR 0 9
32761: PUSH
32762: LD_INT 32
32764: PUSH
32765: LD_INT 120
32767: PUSH
32768: LD_INT 70
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: LIST
32775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32776: LD_VAR 0 6
32780: PPUSH
32781: CALL_OW 264
32785: PUSH
32786: LD_INT 7
32788: PUSH
32789: LD_INT 28
32791: PUSH
32792: LD_INT 45
32794: PUSH
32795: LD_INT 92
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: IN
32804: IFFALSE 32825
// points := [ 35 , 20 , 45 ] ;
32806: LD_ADDR_VAR 0 9
32810: PUSH
32811: LD_INT 35
32813: PUSH
32814: LD_INT 20
32816: PUSH
32817: LD_INT 45
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32825: LD_VAR 0 6
32829: PPUSH
32830: CALL_OW 264
32834: PUSH
32835: LD_INT 47
32837: PUSH
32838: EMPTY
32839: LIST
32840: IN
32841: IFFALSE 32862
// points := [ 67 , 45 , 75 ] ;
32843: LD_ADDR_VAR 0 9
32847: PUSH
32848: LD_INT 67
32850: PUSH
32851: LD_INT 45
32853: PUSH
32854: LD_INT 75
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32862: LD_VAR 0 6
32866: PPUSH
32867: CALL_OW 264
32871: PUSH
32872: LD_INT 26
32874: PUSH
32875: EMPTY
32876: LIST
32877: IN
32878: IFFALSE 32899
// points := [ 120 , 30 , 80 ] ;
32880: LD_ADDR_VAR 0 9
32884: PUSH
32885: LD_INT 120
32887: PUSH
32888: LD_INT 30
32890: PUSH
32891: LD_INT 80
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32899: LD_VAR 0 6
32903: PPUSH
32904: CALL_OW 264
32908: PUSH
32909: LD_INT 22
32911: PUSH
32912: EMPTY
32913: LIST
32914: IN
32915: IFFALSE 32936
// points := [ 40 , 1 , 1 ] ;
32917: LD_ADDR_VAR 0 9
32921: PUSH
32922: LD_INT 40
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32936: LD_VAR 0 6
32940: PPUSH
32941: CALL_OW 264
32945: PUSH
32946: LD_INT 29
32948: PUSH
32949: EMPTY
32950: LIST
32951: IN
32952: IFFALSE 32973
// points := [ 70 , 200 , 400 ] ;
32954: LD_ADDR_VAR 0 9
32958: PUSH
32959: LD_INT 70
32961: PUSH
32962: LD_INT 200
32964: PUSH
32965: LD_INT 400
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32973: LD_VAR 0 6
32977: PPUSH
32978: CALL_OW 264
32982: PUSH
32983: LD_INT 14
32985: PUSH
32986: LD_INT 53
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: IN
32993: IFFALSE 33014
// points := [ 40 , 10 , 20 ] ;
32995: LD_ADDR_VAR 0 9
32999: PUSH
33000: LD_INT 40
33002: PUSH
33003: LD_INT 10
33005: PUSH
33006: LD_INT 20
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: LIST
33013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33014: LD_VAR 0 6
33018: PPUSH
33019: CALL_OW 264
33023: PUSH
33024: LD_INT 9
33026: PUSH
33027: EMPTY
33028: LIST
33029: IN
33030: IFFALSE 33051
// points := [ 5 , 70 , 20 ] ;
33032: LD_ADDR_VAR 0 9
33036: PUSH
33037: LD_INT 5
33039: PUSH
33040: LD_INT 70
33042: PUSH
33043: LD_INT 20
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: LIST
33050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33051: LD_VAR 0 6
33055: PPUSH
33056: CALL_OW 264
33060: PUSH
33061: LD_INT 10
33063: PUSH
33064: EMPTY
33065: LIST
33066: IN
33067: IFFALSE 33088
// points := [ 35 , 110 , 70 ] ;
33069: LD_ADDR_VAR 0 9
33073: PUSH
33074: LD_INT 35
33076: PUSH
33077: LD_INT 110
33079: PUSH
33080: LD_INT 70
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33088: LD_VAR 0 6
33092: PPUSH
33093: CALL_OW 265
33097: PUSH
33098: LD_INT 25
33100: EQUAL
33101: IFFALSE 33122
// points := [ 80 , 65 , 100 ] ;
33103: LD_ADDR_VAR 0 9
33107: PUSH
33108: LD_INT 80
33110: PUSH
33111: LD_INT 65
33113: PUSH
33114: LD_INT 100
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33122: LD_VAR 0 6
33126: PPUSH
33127: CALL_OW 263
33131: PUSH
33132: LD_INT 1
33134: EQUAL
33135: IFFALSE 33170
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33137: LD_ADDR_VAR 0 10
33141: PUSH
33142: LD_VAR 0 10
33146: PUSH
33147: LD_VAR 0 6
33151: PPUSH
33152: CALL_OW 311
33156: PPUSH
33157: LD_INT 3
33159: PPUSH
33160: CALL_OW 259
33164: PUSH
33165: LD_INT 4
33167: MUL
33168: MUL
33169: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33170: LD_VAR 0 6
33174: PPUSH
33175: CALL_OW 263
33179: PUSH
33180: LD_INT 2
33182: EQUAL
33183: IFFALSE 33234
// begin j := IsControledBy ( i ) ;
33185: LD_ADDR_VAR 0 7
33189: PUSH
33190: LD_VAR 0 6
33194: PPUSH
33195: CALL_OW 312
33199: ST_TO_ADDR
// if j then
33200: LD_VAR 0 7
33204: IFFALSE 33234
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33206: LD_ADDR_VAR 0 10
33210: PUSH
33211: LD_VAR 0 10
33215: PUSH
33216: LD_VAR 0 7
33220: PPUSH
33221: LD_INT 3
33223: PPUSH
33224: CALL_OW 259
33228: PUSH
33229: LD_INT 3
33231: MUL
33232: MUL
33233: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33234: LD_VAR 0 6
33238: PPUSH
33239: CALL_OW 264
33243: PUSH
33244: LD_INT 5
33246: PUSH
33247: LD_INT 6
33249: PUSH
33250: LD_INT 46
33252: PUSH
33253: LD_INT 44
33255: PUSH
33256: LD_INT 47
33258: PUSH
33259: LD_INT 45
33261: PUSH
33262: LD_INT 28
33264: PUSH
33265: LD_INT 7
33267: PUSH
33268: LD_INT 27
33270: PUSH
33271: LD_INT 29
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: IN
33286: PUSH
33287: LD_VAR 0 1
33291: PPUSH
33292: LD_INT 52
33294: PPUSH
33295: CALL_OW 321
33299: PUSH
33300: LD_INT 2
33302: EQUAL
33303: AND
33304: IFFALSE 33321
// bpoints := bpoints * 1.2 ;
33306: LD_ADDR_VAR 0 10
33310: PUSH
33311: LD_VAR 0 10
33315: PUSH
33316: LD_REAL  1.20000000000000E+0000
33319: MUL
33320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33321: LD_VAR 0 6
33325: PPUSH
33326: CALL_OW 264
33330: PUSH
33331: LD_INT 6
33333: PUSH
33334: LD_INT 46
33336: PUSH
33337: LD_INT 47
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: LIST
33344: IN
33345: IFFALSE 33362
// bpoints := bpoints * 1.2 ;
33347: LD_ADDR_VAR 0 10
33351: PUSH
33352: LD_VAR 0 10
33356: PUSH
33357: LD_REAL  1.20000000000000E+0000
33360: MUL
33361: ST_TO_ADDR
// end ; unit_building :
33362: GO 33376
33364: LD_INT 3
33366: DOUBLE
33367: EQUAL
33368: IFTRUE 33372
33370: GO 33375
33372: POP
// ; end ;
33373: GO 33376
33375: POP
// for j = 1 to 3 do
33376: LD_ADDR_VAR 0 7
33380: PUSH
33381: DOUBLE
33382: LD_INT 1
33384: DEC
33385: ST_TO_ADDR
33386: LD_INT 3
33388: PUSH
33389: FOR_TO
33390: IFFALSE 33443
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33392: LD_ADDR_VAR 0 5
33396: PUSH
33397: LD_VAR 0 5
33401: PPUSH
33402: LD_VAR 0 7
33406: PPUSH
33407: LD_VAR 0 5
33411: PUSH
33412: LD_VAR 0 7
33416: ARRAY
33417: PUSH
33418: LD_VAR 0 9
33422: PUSH
33423: LD_VAR 0 7
33427: ARRAY
33428: PUSH
33429: LD_VAR 0 10
33433: MUL
33434: PLUS
33435: PPUSH
33436: CALL_OW 1
33440: ST_TO_ADDR
33441: GO 33389
33443: POP
33444: POP
// end ;
33445: GO 31924
33447: POP
33448: POP
// result := Replace ( result , 4 , tmp ) ;
33449: LD_ADDR_VAR 0 5
33453: PUSH
33454: LD_VAR 0 5
33458: PPUSH
33459: LD_INT 4
33461: PPUSH
33462: LD_VAR 0 8
33466: PPUSH
33467: CALL_OW 1
33471: ST_TO_ADDR
// end ;
33472: LD_VAR 0 5
33476: RET
// export function DangerAtRange ( unit , range ) ; begin
33477: LD_INT 0
33479: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33480: LD_ADDR_VAR 0 3
33484: PUSH
33485: LD_VAR 0 1
33489: PPUSH
33490: CALL_OW 255
33494: PPUSH
33495: LD_VAR 0 1
33499: PPUSH
33500: CALL_OW 250
33504: PPUSH
33505: LD_VAR 0 1
33509: PPUSH
33510: CALL_OW 251
33514: PPUSH
33515: LD_VAR 0 2
33519: PPUSH
33520: CALL 31776 0 4
33524: ST_TO_ADDR
// end ;
33525: LD_VAR 0 3
33529: RET
// export function DangerInArea ( side , area ) ; begin
33530: LD_INT 0
33532: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_VAR 0 2
33542: PPUSH
33543: LD_INT 81
33545: PUSH
33546: LD_VAR 0 1
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PPUSH
33555: CALL_OW 70
33559: ST_TO_ADDR
// end ;
33560: LD_VAR 0 3
33564: RET
// export function IsExtension ( b ) ; begin
33565: LD_INT 0
33567: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33568: LD_ADDR_VAR 0 2
33572: PUSH
33573: LD_VAR 0 1
33577: PUSH
33578: LD_INT 23
33580: PUSH
33581: LD_INT 20
33583: PUSH
33584: LD_INT 22
33586: PUSH
33587: LD_INT 17
33589: PUSH
33590: LD_INT 24
33592: PUSH
33593: LD_INT 21
33595: PUSH
33596: LD_INT 19
33598: PUSH
33599: LD_INT 16
33601: PUSH
33602: LD_INT 25
33604: PUSH
33605: LD_INT 18
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: IN
33620: ST_TO_ADDR
// end ;
33621: LD_VAR 0 2
33625: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33626: LD_INT 0
33628: PPUSH
33629: PPUSH
33630: PPUSH
// result := [ ] ;
33631: LD_ADDR_VAR 0 4
33635: PUSH
33636: EMPTY
33637: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33638: LD_ADDR_VAR 0 5
33642: PUSH
33643: LD_VAR 0 2
33647: PPUSH
33648: LD_INT 21
33650: PUSH
33651: LD_INT 3
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PPUSH
33658: CALL_OW 70
33662: ST_TO_ADDR
// if not tmp then
33663: LD_VAR 0 5
33667: NOT
33668: IFFALSE 33672
// exit ;
33670: GO 33736
// if checkLink then
33672: LD_VAR 0 3
33676: IFFALSE 33726
// begin for i in tmp do
33678: LD_ADDR_VAR 0 6
33682: PUSH
33683: LD_VAR 0 5
33687: PUSH
33688: FOR_IN
33689: IFFALSE 33724
// if GetBase ( i ) <> base then
33691: LD_VAR 0 6
33695: PPUSH
33696: CALL_OW 274
33700: PUSH
33701: LD_VAR 0 1
33705: NONEQUAL
33706: IFFALSE 33722
// ComLinkToBase ( base , i ) ;
33708: LD_VAR 0 1
33712: PPUSH
33713: LD_VAR 0 6
33717: PPUSH
33718: CALL_OW 169
33722: GO 33688
33724: POP
33725: POP
// end ; result := tmp ;
33726: LD_ADDR_VAR 0 4
33730: PUSH
33731: LD_VAR 0 5
33735: ST_TO_ADDR
// end ;
33736: LD_VAR 0 4
33740: RET
// export function ComComplete ( units , b ) ; var i ; begin
33741: LD_INT 0
33743: PPUSH
33744: PPUSH
// if not units then
33745: LD_VAR 0 1
33749: NOT
33750: IFFALSE 33754
// exit ;
33752: GO 33844
// for i in units do
33754: LD_ADDR_VAR 0 4
33758: PUSH
33759: LD_VAR 0 1
33763: PUSH
33764: FOR_IN
33765: IFFALSE 33842
// if BuildingStatus ( b ) = bs_build then
33767: LD_VAR 0 2
33771: PPUSH
33772: CALL_OW 461
33776: PUSH
33777: LD_INT 1
33779: EQUAL
33780: IFFALSE 33840
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33782: LD_VAR 0 4
33786: PPUSH
33787: LD_STRING h
33789: PUSH
33790: LD_VAR 0 2
33794: PPUSH
33795: CALL_OW 250
33799: PUSH
33800: LD_VAR 0 2
33804: PPUSH
33805: CALL_OW 251
33809: PUSH
33810: LD_VAR 0 2
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: PUSH
33833: EMPTY
33834: LIST
33835: PPUSH
33836: CALL_OW 446
33840: GO 33764
33842: POP
33843: POP
// end ;
33844: LD_VAR 0 3
33848: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33849: LD_INT 0
33851: PPUSH
33852: PPUSH
33853: PPUSH
33854: PPUSH
33855: PPUSH
33856: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33857: LD_VAR 0 1
33861: NOT
33862: PUSH
33863: LD_VAR 0 1
33867: PPUSH
33868: CALL_OW 263
33872: PUSH
33873: LD_INT 2
33875: NONEQUAL
33876: OR
33877: IFFALSE 33881
// exit ;
33879: GO 34197
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33881: LD_ADDR_VAR 0 6
33885: PUSH
33886: LD_INT 22
33888: PUSH
33889: LD_VAR 0 1
33893: PPUSH
33894: CALL_OW 255
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: LD_INT 30
33908: PUSH
33909: LD_INT 36
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 34
33918: PUSH
33919: LD_INT 31
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: LIST
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PPUSH
33935: CALL_OW 69
33939: ST_TO_ADDR
// if not tmp then
33940: LD_VAR 0 6
33944: NOT
33945: IFFALSE 33949
// exit ;
33947: GO 34197
// result := [ ] ;
33949: LD_ADDR_VAR 0 2
33953: PUSH
33954: EMPTY
33955: ST_TO_ADDR
// for i in tmp do
33956: LD_ADDR_VAR 0 3
33960: PUSH
33961: LD_VAR 0 6
33965: PUSH
33966: FOR_IN
33967: IFFALSE 34038
// begin t := UnitsInside ( i ) ;
33969: LD_ADDR_VAR 0 4
33973: PUSH
33974: LD_VAR 0 3
33978: PPUSH
33979: CALL_OW 313
33983: ST_TO_ADDR
// if t then
33984: LD_VAR 0 4
33988: IFFALSE 34036
// for j in t do
33990: LD_ADDR_VAR 0 7
33994: PUSH
33995: LD_VAR 0 4
33999: PUSH
34000: FOR_IN
34001: IFFALSE 34034
// result := Replace ( result , result + 1 , j ) ;
34003: LD_ADDR_VAR 0 2
34007: PUSH
34008: LD_VAR 0 2
34012: PPUSH
34013: LD_VAR 0 2
34017: PUSH
34018: LD_INT 1
34020: PLUS
34021: PPUSH
34022: LD_VAR 0 7
34026: PPUSH
34027: CALL_OW 1
34031: ST_TO_ADDR
34032: GO 34000
34034: POP
34035: POP
// end ;
34036: GO 33966
34038: POP
34039: POP
// if not result then
34040: LD_VAR 0 2
34044: NOT
34045: IFFALSE 34049
// exit ;
34047: GO 34197
// mech := result [ 1 ] ;
34049: LD_ADDR_VAR 0 5
34053: PUSH
34054: LD_VAR 0 2
34058: PUSH
34059: LD_INT 1
34061: ARRAY
34062: ST_TO_ADDR
// if result > 1 then
34063: LD_VAR 0 2
34067: PUSH
34068: LD_INT 1
34070: GREATER
34071: IFFALSE 34183
// begin for i = 2 to result do
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: DOUBLE
34079: LD_INT 2
34081: DEC
34082: ST_TO_ADDR
34083: LD_VAR 0 2
34087: PUSH
34088: FOR_TO
34089: IFFALSE 34181
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34091: LD_ADDR_VAR 0 4
34095: PUSH
34096: LD_VAR 0 2
34100: PUSH
34101: LD_VAR 0 3
34105: ARRAY
34106: PPUSH
34107: LD_INT 3
34109: PPUSH
34110: CALL_OW 259
34114: PUSH
34115: LD_VAR 0 2
34119: PUSH
34120: LD_VAR 0 3
34124: ARRAY
34125: PPUSH
34126: CALL_OW 432
34130: MINUS
34131: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34132: LD_VAR 0 4
34136: PUSH
34137: LD_VAR 0 5
34141: PPUSH
34142: LD_INT 3
34144: PPUSH
34145: CALL_OW 259
34149: PUSH
34150: LD_VAR 0 5
34154: PPUSH
34155: CALL_OW 432
34159: MINUS
34160: GREATEREQUAL
34161: IFFALSE 34179
// mech := result [ i ] ;
34163: LD_ADDR_VAR 0 5
34167: PUSH
34168: LD_VAR 0 2
34172: PUSH
34173: LD_VAR 0 3
34177: ARRAY
34178: ST_TO_ADDR
// end ;
34179: GO 34088
34181: POP
34182: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34183: LD_VAR 0 1
34187: PPUSH
34188: LD_VAR 0 5
34192: PPUSH
34193: CALL_OW 135
// end ;
34197: LD_VAR 0 2
34201: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34202: LD_INT 0
34204: PPUSH
34205: PPUSH
34206: PPUSH
34207: PPUSH
34208: PPUSH
34209: PPUSH
34210: PPUSH
34211: PPUSH
34212: PPUSH
34213: PPUSH
34214: PPUSH
34215: PPUSH
34216: PPUSH
// result := [ ] ;
34217: LD_ADDR_VAR 0 7
34221: PUSH
34222: EMPTY
34223: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34224: LD_VAR 0 1
34228: PPUSH
34229: CALL_OW 266
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: IN
34244: NOT
34245: IFFALSE 34249
// exit ;
34247: GO 35883
// if name then
34249: LD_VAR 0 3
34253: IFFALSE 34269
// SetBName ( base_dep , name ) ;
34255: LD_VAR 0 1
34259: PPUSH
34260: LD_VAR 0 3
34264: PPUSH
34265: CALL_OW 500
// base := GetBase ( base_dep ) ;
34269: LD_ADDR_VAR 0 15
34273: PUSH
34274: LD_VAR 0 1
34278: PPUSH
34279: CALL_OW 274
34283: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34284: LD_ADDR_VAR 0 16
34288: PUSH
34289: LD_VAR 0 1
34293: PPUSH
34294: CALL_OW 255
34298: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34299: LD_ADDR_VAR 0 17
34303: PUSH
34304: LD_VAR 0 1
34308: PPUSH
34309: CALL_OW 248
34313: ST_TO_ADDR
// if sources then
34314: LD_VAR 0 5
34318: IFFALSE 34365
// for i = 1 to 3 do
34320: LD_ADDR_VAR 0 8
34324: PUSH
34325: DOUBLE
34326: LD_INT 1
34328: DEC
34329: ST_TO_ADDR
34330: LD_INT 3
34332: PUSH
34333: FOR_TO
34334: IFFALSE 34363
// AddResourceType ( base , i , sources [ i ] ) ;
34336: LD_VAR 0 15
34340: PPUSH
34341: LD_VAR 0 8
34345: PPUSH
34346: LD_VAR 0 5
34350: PUSH
34351: LD_VAR 0 8
34355: ARRAY
34356: PPUSH
34357: CALL_OW 276
34361: GO 34333
34363: POP
34364: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34365: LD_ADDR_VAR 0 18
34369: PUSH
34370: LD_VAR 0 15
34374: PPUSH
34375: LD_VAR 0 2
34379: PPUSH
34380: LD_INT 1
34382: PPUSH
34383: CALL 33626 0 3
34387: ST_TO_ADDR
// InitHc ;
34388: CALL_OW 19
// InitUc ;
34392: CALL_OW 18
// uc_side := side ;
34396: LD_ADDR_OWVAR 20
34400: PUSH
34401: LD_VAR 0 16
34405: ST_TO_ADDR
// uc_nation := nation ;
34406: LD_ADDR_OWVAR 21
34410: PUSH
34411: LD_VAR 0 17
34415: ST_TO_ADDR
// if buildings then
34416: LD_VAR 0 18
34420: IFFALSE 35742
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34422: LD_ADDR_VAR 0 19
34426: PUSH
34427: LD_VAR 0 18
34431: PPUSH
34432: LD_INT 2
34434: PUSH
34435: LD_INT 30
34437: PUSH
34438: LD_INT 29
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 30
34447: PUSH
34448: LD_INT 30
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: PPUSH
34460: CALL_OW 72
34464: ST_TO_ADDR
// if tmp then
34465: LD_VAR 0 19
34469: IFFALSE 34517
// for i in tmp do
34471: LD_ADDR_VAR 0 8
34475: PUSH
34476: LD_VAR 0 19
34480: PUSH
34481: FOR_IN
34482: IFFALSE 34515
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34484: LD_VAR 0 8
34488: PPUSH
34489: CALL_OW 250
34493: PPUSH
34494: LD_VAR 0 8
34498: PPUSH
34499: CALL_OW 251
34503: PPUSH
34504: LD_VAR 0 16
34508: PPUSH
34509: CALL_OW 441
34513: GO 34481
34515: POP
34516: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34517: LD_VAR 0 18
34521: PPUSH
34522: LD_INT 2
34524: PUSH
34525: LD_INT 30
34527: PUSH
34528: LD_INT 32
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 30
34537: PUSH
34538: LD_INT 33
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: LIST
34549: PPUSH
34550: CALL_OW 72
34554: IFFALSE 34642
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34556: LD_ADDR_VAR 0 8
34560: PUSH
34561: LD_VAR 0 18
34565: PPUSH
34566: LD_INT 2
34568: PUSH
34569: LD_INT 30
34571: PUSH
34572: LD_INT 32
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 30
34581: PUSH
34582: LD_INT 33
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: PPUSH
34594: CALL_OW 72
34598: PUSH
34599: FOR_IN
34600: IFFALSE 34640
// begin if not GetBWeapon ( i ) then
34602: LD_VAR 0 8
34606: PPUSH
34607: CALL_OW 269
34611: NOT
34612: IFFALSE 34638
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34614: LD_VAR 0 8
34618: PPUSH
34619: LD_VAR 0 8
34623: PPUSH
34624: LD_VAR 0 2
34628: PPUSH
34629: CALL 35888 0 2
34633: PPUSH
34634: CALL_OW 431
// end ;
34638: GO 34599
34640: POP
34641: POP
// end ; for i = 1 to personel do
34642: LD_ADDR_VAR 0 8
34646: PUSH
34647: DOUBLE
34648: LD_INT 1
34650: DEC
34651: ST_TO_ADDR
34652: LD_VAR 0 6
34656: PUSH
34657: FOR_TO
34658: IFFALSE 35722
// begin if i > 4 then
34660: LD_VAR 0 8
34664: PUSH
34665: LD_INT 4
34667: GREATER
34668: IFFALSE 34672
// break ;
34670: GO 35722
// case i of 1 :
34672: LD_VAR 0 8
34676: PUSH
34677: LD_INT 1
34679: DOUBLE
34680: EQUAL
34681: IFTRUE 34685
34683: GO 34765
34685: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34686: LD_ADDR_VAR 0 12
34690: PUSH
34691: LD_VAR 0 18
34695: PPUSH
34696: LD_INT 22
34698: PUSH
34699: LD_VAR 0 16
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 58
34710: PUSH
34711: EMPTY
34712: LIST
34713: PUSH
34714: LD_INT 2
34716: PUSH
34717: LD_INT 30
34719: PUSH
34720: LD_INT 32
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 30
34729: PUSH
34730: LD_INT 4
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 30
34739: PUSH
34740: LD_INT 5
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: LIST
34757: PPUSH
34758: CALL_OW 72
34762: ST_TO_ADDR
34763: GO 34987
34765: LD_INT 2
34767: DOUBLE
34768: EQUAL
34769: IFTRUE 34773
34771: GO 34835
34773: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34774: LD_ADDR_VAR 0 12
34778: PUSH
34779: LD_VAR 0 18
34783: PPUSH
34784: LD_INT 22
34786: PUSH
34787: LD_VAR 0 16
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: LD_INT 30
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 30
34811: PUSH
34812: LD_INT 1
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: LIST
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PPUSH
34828: CALL_OW 72
34832: ST_TO_ADDR
34833: GO 34987
34835: LD_INT 3
34837: DOUBLE
34838: EQUAL
34839: IFTRUE 34843
34841: GO 34905
34843: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34844: LD_ADDR_VAR 0 12
34848: PUSH
34849: LD_VAR 0 18
34853: PPUSH
34854: LD_INT 22
34856: PUSH
34857: LD_VAR 0 16
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: LD_INT 30
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 30
34881: PUSH
34882: LD_INT 3
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PPUSH
34898: CALL_OW 72
34902: ST_TO_ADDR
34903: GO 34987
34905: LD_INT 4
34907: DOUBLE
34908: EQUAL
34909: IFTRUE 34913
34911: GO 34986
34913: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34914: LD_ADDR_VAR 0 12
34918: PUSH
34919: LD_VAR 0 18
34923: PPUSH
34924: LD_INT 22
34926: PUSH
34927: LD_VAR 0 16
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 30
34941: PUSH
34942: LD_INT 6
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 30
34951: PUSH
34952: LD_INT 7
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 30
34961: PUSH
34962: LD_INT 8
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PPUSH
34979: CALL_OW 72
34983: ST_TO_ADDR
34984: GO 34987
34986: POP
// if i = 1 then
34987: LD_VAR 0 8
34991: PUSH
34992: LD_INT 1
34994: EQUAL
34995: IFFALSE 35106
// begin tmp := [ ] ;
34997: LD_ADDR_VAR 0 19
35001: PUSH
35002: EMPTY
35003: ST_TO_ADDR
// for j in f do
35004: LD_ADDR_VAR 0 9
35008: PUSH
35009: LD_VAR 0 12
35013: PUSH
35014: FOR_IN
35015: IFFALSE 35088
// if GetBType ( j ) = b_bunker then
35017: LD_VAR 0 9
35021: PPUSH
35022: CALL_OW 266
35026: PUSH
35027: LD_INT 32
35029: EQUAL
35030: IFFALSE 35057
// tmp := Insert ( tmp , 1 , j ) else
35032: LD_ADDR_VAR 0 19
35036: PUSH
35037: LD_VAR 0 19
35041: PPUSH
35042: LD_INT 1
35044: PPUSH
35045: LD_VAR 0 9
35049: PPUSH
35050: CALL_OW 2
35054: ST_TO_ADDR
35055: GO 35086
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35057: LD_ADDR_VAR 0 19
35061: PUSH
35062: LD_VAR 0 19
35066: PPUSH
35067: LD_VAR 0 19
35071: PUSH
35072: LD_INT 1
35074: PLUS
35075: PPUSH
35076: LD_VAR 0 9
35080: PPUSH
35081: CALL_OW 2
35085: ST_TO_ADDR
35086: GO 35014
35088: POP
35089: POP
// if tmp then
35090: LD_VAR 0 19
35094: IFFALSE 35106
// f := tmp ;
35096: LD_ADDR_VAR 0 12
35100: PUSH
35101: LD_VAR 0 19
35105: ST_TO_ADDR
// end ; x := personel [ i ] ;
35106: LD_ADDR_VAR 0 13
35110: PUSH
35111: LD_VAR 0 6
35115: PUSH
35116: LD_VAR 0 8
35120: ARRAY
35121: ST_TO_ADDR
// if x = - 1 then
35122: LD_VAR 0 13
35126: PUSH
35127: LD_INT 1
35129: NEG
35130: EQUAL
35131: IFFALSE 35340
// begin for j in f do
35133: LD_ADDR_VAR 0 9
35137: PUSH
35138: LD_VAR 0 12
35142: PUSH
35143: FOR_IN
35144: IFFALSE 35336
// repeat InitHc ;
35146: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35150: LD_VAR 0 9
35154: PPUSH
35155: CALL_OW 266
35159: PUSH
35160: LD_INT 5
35162: EQUAL
35163: IFFALSE 35233
// begin if UnitsInside ( j ) < 3 then
35165: LD_VAR 0 9
35169: PPUSH
35170: CALL_OW 313
35174: PUSH
35175: LD_INT 3
35177: LESS
35178: IFFALSE 35214
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35180: LD_INT 0
35182: PPUSH
35183: LD_INT 5
35185: PUSH
35186: LD_INT 8
35188: PUSH
35189: LD_INT 9
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: LIST
35196: PUSH
35197: LD_VAR 0 17
35201: ARRAY
35202: PPUSH
35203: LD_VAR 0 4
35207: PPUSH
35208: CALL_OW 380
35212: GO 35231
// PrepareHuman ( false , i , skill ) ;
35214: LD_INT 0
35216: PPUSH
35217: LD_VAR 0 8
35221: PPUSH
35222: LD_VAR 0 4
35226: PPUSH
35227: CALL_OW 380
// end else
35231: GO 35250
// PrepareHuman ( false , i , skill ) ;
35233: LD_INT 0
35235: PPUSH
35236: LD_VAR 0 8
35240: PPUSH
35241: LD_VAR 0 4
35245: PPUSH
35246: CALL_OW 380
// un := CreateHuman ;
35250: LD_ADDR_VAR 0 14
35254: PUSH
35255: CALL_OW 44
35259: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35260: LD_ADDR_VAR 0 7
35264: PUSH
35265: LD_VAR 0 7
35269: PPUSH
35270: LD_INT 1
35272: PPUSH
35273: LD_VAR 0 14
35277: PPUSH
35278: CALL_OW 2
35282: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35283: LD_VAR 0 14
35287: PPUSH
35288: LD_VAR 0 9
35292: PPUSH
35293: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35297: LD_VAR 0 9
35301: PPUSH
35302: CALL_OW 313
35306: PUSH
35307: LD_INT 6
35309: EQUAL
35310: PUSH
35311: LD_VAR 0 9
35315: PPUSH
35316: CALL_OW 266
35320: PUSH
35321: LD_INT 32
35323: PUSH
35324: LD_INT 31
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: IN
35331: OR
35332: IFFALSE 35146
35334: GO 35143
35336: POP
35337: POP
// end else
35338: GO 35720
// for j = 1 to x do
35340: LD_ADDR_VAR 0 9
35344: PUSH
35345: DOUBLE
35346: LD_INT 1
35348: DEC
35349: ST_TO_ADDR
35350: LD_VAR 0 13
35354: PUSH
35355: FOR_TO
35356: IFFALSE 35718
// begin InitHc ;
35358: CALL_OW 19
// if not f then
35362: LD_VAR 0 12
35366: NOT
35367: IFFALSE 35456
// begin PrepareHuman ( false , i , skill ) ;
35369: LD_INT 0
35371: PPUSH
35372: LD_VAR 0 8
35376: PPUSH
35377: LD_VAR 0 4
35381: PPUSH
35382: CALL_OW 380
// un := CreateHuman ;
35386: LD_ADDR_VAR 0 14
35390: PUSH
35391: CALL_OW 44
35395: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35396: LD_ADDR_VAR 0 7
35400: PUSH
35401: LD_VAR 0 7
35405: PPUSH
35406: LD_INT 1
35408: PPUSH
35409: LD_VAR 0 14
35413: PPUSH
35414: CALL_OW 2
35418: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35419: LD_VAR 0 14
35423: PPUSH
35424: LD_VAR 0 1
35428: PPUSH
35429: CALL_OW 250
35433: PPUSH
35434: LD_VAR 0 1
35438: PPUSH
35439: CALL_OW 251
35443: PPUSH
35444: LD_INT 10
35446: PPUSH
35447: LD_INT 0
35449: PPUSH
35450: CALL_OW 50
// continue ;
35454: GO 35355
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35456: LD_VAR 0 12
35460: PUSH
35461: LD_INT 1
35463: ARRAY
35464: PPUSH
35465: CALL_OW 313
35469: PUSH
35470: LD_VAR 0 12
35474: PUSH
35475: LD_INT 1
35477: ARRAY
35478: PPUSH
35479: CALL_OW 266
35483: PUSH
35484: LD_INT 32
35486: PUSH
35487: LD_INT 31
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: IN
35494: AND
35495: PUSH
35496: LD_VAR 0 12
35500: PUSH
35501: LD_INT 1
35503: ARRAY
35504: PPUSH
35505: CALL_OW 313
35509: PUSH
35510: LD_INT 6
35512: EQUAL
35513: OR
35514: IFFALSE 35534
// f := Delete ( f , 1 ) ;
35516: LD_ADDR_VAR 0 12
35520: PUSH
35521: LD_VAR 0 12
35525: PPUSH
35526: LD_INT 1
35528: PPUSH
35529: CALL_OW 3
35533: ST_TO_ADDR
// if not f then
35534: LD_VAR 0 12
35538: NOT
35539: IFFALSE 35557
// begin x := x + 2 ;
35541: LD_ADDR_VAR 0 13
35545: PUSH
35546: LD_VAR 0 13
35550: PUSH
35551: LD_INT 2
35553: PLUS
35554: ST_TO_ADDR
// continue ;
35555: GO 35355
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35557: LD_VAR 0 12
35561: PUSH
35562: LD_INT 1
35564: ARRAY
35565: PPUSH
35566: CALL_OW 266
35570: PUSH
35571: LD_INT 5
35573: EQUAL
35574: IFFALSE 35648
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35576: LD_VAR 0 12
35580: PUSH
35581: LD_INT 1
35583: ARRAY
35584: PPUSH
35585: CALL_OW 313
35589: PUSH
35590: LD_INT 3
35592: LESS
35593: IFFALSE 35629
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35595: LD_INT 0
35597: PPUSH
35598: LD_INT 5
35600: PUSH
35601: LD_INT 8
35603: PUSH
35604: LD_INT 9
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: PUSH
35612: LD_VAR 0 17
35616: ARRAY
35617: PPUSH
35618: LD_VAR 0 4
35622: PPUSH
35623: CALL_OW 380
35627: GO 35646
// PrepareHuman ( false , i , skill ) ;
35629: LD_INT 0
35631: PPUSH
35632: LD_VAR 0 8
35636: PPUSH
35637: LD_VAR 0 4
35641: PPUSH
35642: CALL_OW 380
// end else
35646: GO 35665
// PrepareHuman ( false , i , skill ) ;
35648: LD_INT 0
35650: PPUSH
35651: LD_VAR 0 8
35655: PPUSH
35656: LD_VAR 0 4
35660: PPUSH
35661: CALL_OW 380
// un := CreateHuman ;
35665: LD_ADDR_VAR 0 14
35669: PUSH
35670: CALL_OW 44
35674: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35675: LD_ADDR_VAR 0 7
35679: PUSH
35680: LD_VAR 0 7
35684: PPUSH
35685: LD_INT 1
35687: PPUSH
35688: LD_VAR 0 14
35692: PPUSH
35693: CALL_OW 2
35697: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35698: LD_VAR 0 14
35702: PPUSH
35703: LD_VAR 0 12
35707: PUSH
35708: LD_INT 1
35710: ARRAY
35711: PPUSH
35712: CALL_OW 52
// end ;
35716: GO 35355
35718: POP
35719: POP
// end ;
35720: GO 34657
35722: POP
35723: POP
// result := result ^ buildings ;
35724: LD_ADDR_VAR 0 7
35728: PUSH
35729: LD_VAR 0 7
35733: PUSH
35734: LD_VAR 0 18
35738: ADD
35739: ST_TO_ADDR
// end else
35740: GO 35883
// begin for i = 1 to personel do
35742: LD_ADDR_VAR 0 8
35746: PUSH
35747: DOUBLE
35748: LD_INT 1
35750: DEC
35751: ST_TO_ADDR
35752: LD_VAR 0 6
35756: PUSH
35757: FOR_TO
35758: IFFALSE 35881
// begin if i > 4 then
35760: LD_VAR 0 8
35764: PUSH
35765: LD_INT 4
35767: GREATER
35768: IFFALSE 35772
// break ;
35770: GO 35881
// x := personel [ i ] ;
35772: LD_ADDR_VAR 0 13
35776: PUSH
35777: LD_VAR 0 6
35781: PUSH
35782: LD_VAR 0 8
35786: ARRAY
35787: ST_TO_ADDR
// if x = - 1 then
35788: LD_VAR 0 13
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: EQUAL
35797: IFFALSE 35801
// continue ;
35799: GO 35757
// PrepareHuman ( false , i , skill ) ;
35801: LD_INT 0
35803: PPUSH
35804: LD_VAR 0 8
35808: PPUSH
35809: LD_VAR 0 4
35813: PPUSH
35814: CALL_OW 380
// un := CreateHuman ;
35818: LD_ADDR_VAR 0 14
35822: PUSH
35823: CALL_OW 44
35827: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35828: LD_VAR 0 14
35832: PPUSH
35833: LD_VAR 0 1
35837: PPUSH
35838: CALL_OW 250
35842: PPUSH
35843: LD_VAR 0 1
35847: PPUSH
35848: CALL_OW 251
35852: PPUSH
35853: LD_INT 10
35855: PPUSH
35856: LD_INT 0
35858: PPUSH
35859: CALL_OW 50
// result := result ^ un ;
35863: LD_ADDR_VAR 0 7
35867: PUSH
35868: LD_VAR 0 7
35872: PUSH
35873: LD_VAR 0 14
35877: ADD
35878: ST_TO_ADDR
// end ;
35879: GO 35757
35881: POP
35882: POP
// end ; end ;
35883: LD_VAR 0 7
35887: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35888: LD_INT 0
35890: PPUSH
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
35896: PPUSH
35897: PPUSH
35898: PPUSH
35899: PPUSH
35900: PPUSH
35901: PPUSH
35902: PPUSH
35903: PPUSH
35904: PPUSH
35905: PPUSH
// result := false ;
35906: LD_ADDR_VAR 0 3
35910: PUSH
35911: LD_INT 0
35913: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35914: LD_VAR 0 1
35918: NOT
35919: PUSH
35920: LD_VAR 0 1
35924: PPUSH
35925: CALL_OW 266
35929: PUSH
35930: LD_INT 32
35932: PUSH
35933: LD_INT 33
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: IN
35940: NOT
35941: OR
35942: IFFALSE 35946
// exit ;
35944: GO 37055
// nat := GetNation ( tower ) ;
35946: LD_ADDR_VAR 0 12
35950: PUSH
35951: LD_VAR 0 1
35955: PPUSH
35956: CALL_OW 248
35960: ST_TO_ADDR
// side := GetSide ( tower ) ;
35961: LD_ADDR_VAR 0 16
35965: PUSH
35966: LD_VAR 0 1
35970: PPUSH
35971: CALL_OW 255
35975: ST_TO_ADDR
// x := GetX ( tower ) ;
35976: LD_ADDR_VAR 0 10
35980: PUSH
35981: LD_VAR 0 1
35985: PPUSH
35986: CALL_OW 250
35990: ST_TO_ADDR
// y := GetY ( tower ) ;
35991: LD_ADDR_VAR 0 11
35995: PUSH
35996: LD_VAR 0 1
36000: PPUSH
36001: CALL_OW 251
36005: ST_TO_ADDR
// if not x or not y then
36006: LD_VAR 0 10
36010: NOT
36011: PUSH
36012: LD_VAR 0 11
36016: NOT
36017: OR
36018: IFFALSE 36022
// exit ;
36020: GO 37055
// weapon := 0 ;
36022: LD_ADDR_VAR 0 18
36026: PUSH
36027: LD_INT 0
36029: ST_TO_ADDR
// fac_list := [ ] ;
36030: LD_ADDR_VAR 0 17
36034: PUSH
36035: EMPTY
36036: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36037: LD_ADDR_VAR 0 6
36041: PUSH
36042: LD_VAR 0 1
36046: PPUSH
36047: CALL_OW 274
36051: PPUSH
36052: LD_VAR 0 2
36056: PPUSH
36057: LD_INT 0
36059: PPUSH
36060: CALL 33626 0 3
36064: PPUSH
36065: LD_INT 30
36067: PUSH
36068: LD_INT 3
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PPUSH
36075: CALL_OW 72
36079: ST_TO_ADDR
// if not factories then
36080: LD_VAR 0 6
36084: NOT
36085: IFFALSE 36089
// exit ;
36087: GO 37055
// for i in factories do
36089: LD_ADDR_VAR 0 8
36093: PUSH
36094: LD_VAR 0 6
36098: PUSH
36099: FOR_IN
36100: IFFALSE 36125
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36102: LD_ADDR_VAR 0 17
36106: PUSH
36107: LD_VAR 0 17
36111: PUSH
36112: LD_VAR 0 8
36116: PPUSH
36117: CALL_OW 478
36121: UNION
36122: ST_TO_ADDR
36123: GO 36099
36125: POP
36126: POP
// if not fac_list then
36127: LD_VAR 0 17
36131: NOT
36132: IFFALSE 36136
// exit ;
36134: GO 37055
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36136: LD_ADDR_VAR 0 5
36140: PUSH
36141: LD_INT 4
36143: PUSH
36144: LD_INT 5
36146: PUSH
36147: LD_INT 9
36149: PUSH
36150: LD_INT 10
36152: PUSH
36153: LD_INT 6
36155: PUSH
36156: LD_INT 7
36158: PUSH
36159: LD_INT 11
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 27
36173: PUSH
36174: LD_INT 28
36176: PUSH
36177: LD_INT 26
36179: PUSH
36180: LD_INT 30
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 43
36191: PUSH
36192: LD_INT 44
36194: PUSH
36195: LD_INT 46
36197: PUSH
36198: LD_INT 45
36200: PUSH
36201: LD_INT 47
36203: PUSH
36204: LD_INT 49
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: LIST
36219: PUSH
36220: LD_VAR 0 12
36224: ARRAY
36225: ST_TO_ADDR
// list := list isect fac_list ;
36226: LD_ADDR_VAR 0 5
36230: PUSH
36231: LD_VAR 0 5
36235: PUSH
36236: LD_VAR 0 17
36240: ISECT
36241: ST_TO_ADDR
// if not list then
36242: LD_VAR 0 5
36246: NOT
36247: IFFALSE 36251
// exit ;
36249: GO 37055
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36251: LD_VAR 0 12
36255: PUSH
36256: LD_INT 3
36258: EQUAL
36259: PUSH
36260: LD_INT 49
36262: PUSH
36263: LD_VAR 0 5
36267: IN
36268: AND
36269: PUSH
36270: LD_INT 31
36272: PPUSH
36273: LD_VAR 0 16
36277: PPUSH
36278: CALL_OW 321
36282: PUSH
36283: LD_INT 2
36285: EQUAL
36286: AND
36287: IFFALSE 36347
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36289: LD_INT 22
36291: PUSH
36292: LD_VAR 0 16
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 35
36303: PUSH
36304: LD_INT 49
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 91
36313: PUSH
36314: LD_VAR 0 1
36318: PUSH
36319: LD_INT 10
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: LIST
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: LIST
36331: PPUSH
36332: CALL_OW 69
36336: NOT
36337: IFFALSE 36347
// weapon := ru_time_lapser ;
36339: LD_ADDR_VAR 0 18
36343: PUSH
36344: LD_INT 49
36346: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36347: LD_VAR 0 12
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: IN
36362: PUSH
36363: LD_INT 11
36365: PUSH
36366: LD_VAR 0 5
36370: IN
36371: PUSH
36372: LD_INT 30
36374: PUSH
36375: LD_VAR 0 5
36379: IN
36380: OR
36381: AND
36382: PUSH
36383: LD_INT 6
36385: PPUSH
36386: LD_VAR 0 16
36390: PPUSH
36391: CALL_OW 321
36395: PUSH
36396: LD_INT 2
36398: EQUAL
36399: AND
36400: IFFALSE 36565
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36402: LD_INT 22
36404: PUSH
36405: LD_VAR 0 16
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 2
36416: PUSH
36417: LD_INT 35
36419: PUSH
36420: LD_INT 11
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 35
36429: PUSH
36430: LD_INT 30
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 91
36444: PUSH
36445: LD_VAR 0 1
36449: PUSH
36450: LD_INT 18
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: LIST
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: LIST
36462: PPUSH
36463: CALL_OW 69
36467: NOT
36468: PUSH
36469: LD_INT 22
36471: PUSH
36472: LD_VAR 0 16
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 2
36483: PUSH
36484: LD_INT 30
36486: PUSH
36487: LD_INT 32
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 30
36496: PUSH
36497: LD_INT 33
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 91
36511: PUSH
36512: LD_VAR 0 1
36516: PUSH
36517: LD_INT 12
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: PUSH
36530: EMPTY
36531: LIST
36532: PPUSH
36533: CALL_OW 69
36537: PUSH
36538: LD_INT 2
36540: GREATER
36541: AND
36542: IFFALSE 36565
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36544: LD_ADDR_VAR 0 18
36548: PUSH
36549: LD_INT 11
36551: PUSH
36552: LD_INT 30
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_VAR 0 12
36563: ARRAY
36564: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36565: LD_VAR 0 18
36569: NOT
36570: PUSH
36571: LD_INT 40
36573: PPUSH
36574: LD_VAR 0 16
36578: PPUSH
36579: CALL_OW 321
36583: PUSH
36584: LD_INT 2
36586: EQUAL
36587: AND
36588: PUSH
36589: LD_INT 7
36591: PUSH
36592: LD_VAR 0 5
36596: IN
36597: PUSH
36598: LD_INT 28
36600: PUSH
36601: LD_VAR 0 5
36605: IN
36606: OR
36607: PUSH
36608: LD_INT 45
36610: PUSH
36611: LD_VAR 0 5
36615: IN
36616: OR
36617: AND
36618: IFFALSE 36872
// begin hex := GetHexInfo ( x , y ) ;
36620: LD_ADDR_VAR 0 4
36624: PUSH
36625: LD_VAR 0 10
36629: PPUSH
36630: LD_VAR 0 11
36634: PPUSH
36635: CALL_OW 546
36639: ST_TO_ADDR
// if hex [ 1 ] then
36640: LD_VAR 0 4
36644: PUSH
36645: LD_INT 1
36647: ARRAY
36648: IFFALSE 36652
// exit ;
36650: GO 37055
// height := hex [ 2 ] ;
36652: LD_ADDR_VAR 0 15
36656: PUSH
36657: LD_VAR 0 4
36661: PUSH
36662: LD_INT 2
36664: ARRAY
36665: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36666: LD_ADDR_VAR 0 14
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: LD_INT 3
36679: PUSH
36680: LD_INT 5
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: ST_TO_ADDR
// for i in tmp do
36689: LD_ADDR_VAR 0 8
36693: PUSH
36694: LD_VAR 0 14
36698: PUSH
36699: FOR_IN
36700: IFFALSE 36870
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36702: LD_ADDR_VAR 0 9
36706: PUSH
36707: LD_VAR 0 10
36711: PPUSH
36712: LD_VAR 0 8
36716: PPUSH
36717: LD_INT 5
36719: PPUSH
36720: CALL_OW 272
36724: PUSH
36725: LD_VAR 0 11
36729: PPUSH
36730: LD_VAR 0 8
36734: PPUSH
36735: LD_INT 5
36737: PPUSH
36738: CALL_OW 273
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36747: LD_VAR 0 9
36751: PUSH
36752: LD_INT 1
36754: ARRAY
36755: PPUSH
36756: LD_VAR 0 9
36760: PUSH
36761: LD_INT 2
36763: ARRAY
36764: PPUSH
36765: CALL_OW 488
36769: IFFALSE 36868
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36771: LD_ADDR_VAR 0 4
36775: PUSH
36776: LD_VAR 0 9
36780: PUSH
36781: LD_INT 1
36783: ARRAY
36784: PPUSH
36785: LD_VAR 0 9
36789: PUSH
36790: LD_INT 2
36792: ARRAY
36793: PPUSH
36794: CALL_OW 546
36798: ST_TO_ADDR
// if hex [ 1 ] then
36799: LD_VAR 0 4
36803: PUSH
36804: LD_INT 1
36806: ARRAY
36807: IFFALSE 36811
// continue ;
36809: GO 36699
// h := hex [ 2 ] ;
36811: LD_ADDR_VAR 0 13
36815: PUSH
36816: LD_VAR 0 4
36820: PUSH
36821: LD_INT 2
36823: ARRAY
36824: ST_TO_ADDR
// if h + 7 < height then
36825: LD_VAR 0 13
36829: PUSH
36830: LD_INT 7
36832: PLUS
36833: PUSH
36834: LD_VAR 0 15
36838: LESS
36839: IFFALSE 36868
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36841: LD_ADDR_VAR 0 18
36845: PUSH
36846: LD_INT 7
36848: PUSH
36849: LD_INT 28
36851: PUSH
36852: LD_INT 45
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: LIST
36859: PUSH
36860: LD_VAR 0 12
36864: ARRAY
36865: ST_TO_ADDR
// break ;
36866: GO 36870
// end ; end ; end ;
36868: GO 36699
36870: POP
36871: POP
// end ; if not weapon then
36872: LD_VAR 0 18
36876: NOT
36877: IFFALSE 36937
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36879: LD_ADDR_VAR 0 5
36883: PUSH
36884: LD_VAR 0 5
36888: PUSH
36889: LD_INT 11
36891: PUSH
36892: LD_INT 30
36894: PUSH
36895: LD_INT 49
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: LIST
36902: DIFF
36903: ST_TO_ADDR
// if not list then
36904: LD_VAR 0 5
36908: NOT
36909: IFFALSE 36913
// exit ;
36911: GO 37055
// weapon := list [ rand ( 1 , list ) ] ;
36913: LD_ADDR_VAR 0 18
36917: PUSH
36918: LD_VAR 0 5
36922: PUSH
36923: LD_INT 1
36925: PPUSH
36926: LD_VAR 0 5
36930: PPUSH
36931: CALL_OW 12
36935: ARRAY
36936: ST_TO_ADDR
// end ; if weapon then
36937: LD_VAR 0 18
36941: IFFALSE 37055
// begin tmp := CostOfWeapon ( weapon ) ;
36943: LD_ADDR_VAR 0 14
36947: PUSH
36948: LD_VAR 0 18
36952: PPUSH
36953: CALL_OW 451
36957: ST_TO_ADDR
// j := GetBase ( tower ) ;
36958: LD_ADDR_VAR 0 9
36962: PUSH
36963: LD_VAR 0 1
36967: PPUSH
36968: CALL_OW 274
36972: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36973: LD_VAR 0 9
36977: PPUSH
36978: LD_INT 1
36980: PPUSH
36981: CALL_OW 275
36985: PUSH
36986: LD_VAR 0 14
36990: PUSH
36991: LD_INT 1
36993: ARRAY
36994: GREATEREQUAL
36995: PUSH
36996: LD_VAR 0 9
37000: PPUSH
37001: LD_INT 2
37003: PPUSH
37004: CALL_OW 275
37008: PUSH
37009: LD_VAR 0 14
37013: PUSH
37014: LD_INT 2
37016: ARRAY
37017: GREATEREQUAL
37018: AND
37019: PUSH
37020: LD_VAR 0 9
37024: PPUSH
37025: LD_INT 3
37027: PPUSH
37028: CALL_OW 275
37032: PUSH
37033: LD_VAR 0 14
37037: PUSH
37038: LD_INT 3
37040: ARRAY
37041: GREATEREQUAL
37042: AND
37043: IFFALSE 37055
// result := weapon ;
37045: LD_ADDR_VAR 0 3
37049: PUSH
37050: LD_VAR 0 18
37054: ST_TO_ADDR
// end ; end ;
37055: LD_VAR 0 3
37059: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37060: LD_INT 0
37062: PPUSH
37063: PPUSH
// result := true ;
37064: LD_ADDR_VAR 0 3
37068: PUSH
37069: LD_INT 1
37071: ST_TO_ADDR
// if array1 = array2 then
37072: LD_VAR 0 1
37076: PUSH
37077: LD_VAR 0 2
37081: EQUAL
37082: IFFALSE 37142
// begin for i = 1 to array1 do
37084: LD_ADDR_VAR 0 4
37088: PUSH
37089: DOUBLE
37090: LD_INT 1
37092: DEC
37093: ST_TO_ADDR
37094: LD_VAR 0 1
37098: PUSH
37099: FOR_TO
37100: IFFALSE 37138
// if array1 [ i ] <> array2 [ i ] then
37102: LD_VAR 0 1
37106: PUSH
37107: LD_VAR 0 4
37111: ARRAY
37112: PUSH
37113: LD_VAR 0 2
37117: PUSH
37118: LD_VAR 0 4
37122: ARRAY
37123: NONEQUAL
37124: IFFALSE 37136
// begin result := false ;
37126: LD_ADDR_VAR 0 3
37130: PUSH
37131: LD_INT 0
37133: ST_TO_ADDR
// break ;
37134: GO 37138
// end ;
37136: GO 37099
37138: POP
37139: POP
// end else
37140: GO 37150
// result := false ;
37142: LD_ADDR_VAR 0 3
37146: PUSH
37147: LD_INT 0
37149: ST_TO_ADDR
// end ;
37150: LD_VAR 0 3
37154: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37155: LD_INT 0
37157: PPUSH
37158: PPUSH
// if not array1 or not array2 then
37159: LD_VAR 0 1
37163: NOT
37164: PUSH
37165: LD_VAR 0 2
37169: NOT
37170: OR
37171: IFFALSE 37175
// exit ;
37173: GO 37239
// result := true ;
37175: LD_ADDR_VAR 0 3
37179: PUSH
37180: LD_INT 1
37182: ST_TO_ADDR
// for i = 1 to array1 do
37183: LD_ADDR_VAR 0 4
37187: PUSH
37188: DOUBLE
37189: LD_INT 1
37191: DEC
37192: ST_TO_ADDR
37193: LD_VAR 0 1
37197: PUSH
37198: FOR_TO
37199: IFFALSE 37237
// if array1 [ i ] <> array2 [ i ] then
37201: LD_VAR 0 1
37205: PUSH
37206: LD_VAR 0 4
37210: ARRAY
37211: PUSH
37212: LD_VAR 0 2
37216: PUSH
37217: LD_VAR 0 4
37221: ARRAY
37222: NONEQUAL
37223: IFFALSE 37235
// begin result := false ;
37225: LD_ADDR_VAR 0 3
37229: PUSH
37230: LD_INT 0
37232: ST_TO_ADDR
// break ;
37233: GO 37237
// end ;
37235: GO 37198
37237: POP
37238: POP
// end ;
37239: LD_VAR 0 3
37243: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37244: LD_INT 0
37246: PPUSH
37247: PPUSH
37248: PPUSH
// pom := GetBase ( fac ) ;
37249: LD_ADDR_VAR 0 5
37253: PUSH
37254: LD_VAR 0 1
37258: PPUSH
37259: CALL_OW 274
37263: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37264: LD_ADDR_VAR 0 4
37268: PUSH
37269: LD_VAR 0 2
37273: PUSH
37274: LD_INT 1
37276: ARRAY
37277: PPUSH
37278: LD_VAR 0 2
37282: PUSH
37283: LD_INT 2
37285: ARRAY
37286: PPUSH
37287: LD_VAR 0 2
37291: PUSH
37292: LD_INT 3
37294: ARRAY
37295: PPUSH
37296: LD_VAR 0 2
37300: PUSH
37301: LD_INT 4
37303: ARRAY
37304: PPUSH
37305: CALL_OW 449
37309: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37310: LD_ADDR_VAR 0 3
37314: PUSH
37315: LD_VAR 0 5
37319: PPUSH
37320: LD_INT 1
37322: PPUSH
37323: CALL_OW 275
37327: PUSH
37328: LD_VAR 0 4
37332: PUSH
37333: LD_INT 1
37335: ARRAY
37336: GREATEREQUAL
37337: PUSH
37338: LD_VAR 0 5
37342: PPUSH
37343: LD_INT 2
37345: PPUSH
37346: CALL_OW 275
37350: PUSH
37351: LD_VAR 0 4
37355: PUSH
37356: LD_INT 2
37358: ARRAY
37359: GREATEREQUAL
37360: AND
37361: PUSH
37362: LD_VAR 0 5
37366: PPUSH
37367: LD_INT 3
37369: PPUSH
37370: CALL_OW 275
37374: PUSH
37375: LD_VAR 0 4
37379: PUSH
37380: LD_INT 3
37382: ARRAY
37383: GREATEREQUAL
37384: AND
37385: ST_TO_ADDR
// end ;
37386: LD_VAR 0 3
37390: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37391: LD_INT 0
37393: PPUSH
37394: PPUSH
37395: PPUSH
37396: PPUSH
// pom := GetBase ( building ) ;
37397: LD_ADDR_VAR 0 3
37401: PUSH
37402: LD_VAR 0 1
37406: PPUSH
37407: CALL_OW 274
37411: ST_TO_ADDR
// if not pom then
37412: LD_VAR 0 3
37416: NOT
37417: IFFALSE 37421
// exit ;
37419: GO 37591
// btype := GetBType ( building ) ;
37421: LD_ADDR_VAR 0 5
37425: PUSH
37426: LD_VAR 0 1
37430: PPUSH
37431: CALL_OW 266
37435: ST_TO_ADDR
// if btype = b_armoury then
37436: LD_VAR 0 5
37440: PUSH
37441: LD_INT 4
37443: EQUAL
37444: IFFALSE 37454
// btype := b_barracks ;
37446: LD_ADDR_VAR 0 5
37450: PUSH
37451: LD_INT 5
37453: ST_TO_ADDR
// if btype = b_depot then
37454: LD_VAR 0 5
37458: PUSH
37459: LD_INT 0
37461: EQUAL
37462: IFFALSE 37472
// btype := b_warehouse ;
37464: LD_ADDR_VAR 0 5
37468: PUSH
37469: LD_INT 1
37471: ST_TO_ADDR
// if btype = b_workshop then
37472: LD_VAR 0 5
37476: PUSH
37477: LD_INT 2
37479: EQUAL
37480: IFFALSE 37490
// btype := b_factory ;
37482: LD_ADDR_VAR 0 5
37486: PUSH
37487: LD_INT 3
37489: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37490: LD_ADDR_VAR 0 4
37494: PUSH
37495: LD_VAR 0 5
37499: PPUSH
37500: LD_VAR 0 1
37504: PPUSH
37505: CALL_OW 248
37509: PPUSH
37510: CALL_OW 450
37514: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37515: LD_ADDR_VAR 0 2
37519: PUSH
37520: LD_VAR 0 3
37524: PPUSH
37525: LD_INT 1
37527: PPUSH
37528: CALL_OW 275
37532: PUSH
37533: LD_VAR 0 4
37537: PUSH
37538: LD_INT 1
37540: ARRAY
37541: GREATEREQUAL
37542: PUSH
37543: LD_VAR 0 3
37547: PPUSH
37548: LD_INT 2
37550: PPUSH
37551: CALL_OW 275
37555: PUSH
37556: LD_VAR 0 4
37560: PUSH
37561: LD_INT 2
37563: ARRAY
37564: GREATEREQUAL
37565: AND
37566: PUSH
37567: LD_VAR 0 3
37571: PPUSH
37572: LD_INT 3
37574: PPUSH
37575: CALL_OW 275
37579: PUSH
37580: LD_VAR 0 4
37584: PUSH
37585: LD_INT 3
37587: ARRAY
37588: GREATEREQUAL
37589: AND
37590: ST_TO_ADDR
// end ;
37591: LD_VAR 0 2
37595: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37596: LD_INT 0
37598: PPUSH
37599: PPUSH
37600: PPUSH
// pom := GetBase ( building ) ;
37601: LD_ADDR_VAR 0 4
37605: PUSH
37606: LD_VAR 0 1
37610: PPUSH
37611: CALL_OW 274
37615: ST_TO_ADDR
// if not pom then
37616: LD_VAR 0 4
37620: NOT
37621: IFFALSE 37625
// exit ;
37623: GO 37726
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37625: LD_ADDR_VAR 0 5
37629: PUSH
37630: LD_VAR 0 2
37634: PPUSH
37635: LD_VAR 0 1
37639: PPUSH
37640: CALL_OW 248
37644: PPUSH
37645: CALL_OW 450
37649: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37650: LD_ADDR_VAR 0 3
37654: PUSH
37655: LD_VAR 0 4
37659: PPUSH
37660: LD_INT 1
37662: PPUSH
37663: CALL_OW 275
37667: PUSH
37668: LD_VAR 0 5
37672: PUSH
37673: LD_INT 1
37675: ARRAY
37676: GREATEREQUAL
37677: PUSH
37678: LD_VAR 0 4
37682: PPUSH
37683: LD_INT 2
37685: PPUSH
37686: CALL_OW 275
37690: PUSH
37691: LD_VAR 0 5
37695: PUSH
37696: LD_INT 2
37698: ARRAY
37699: GREATEREQUAL
37700: AND
37701: PUSH
37702: LD_VAR 0 4
37706: PPUSH
37707: LD_INT 3
37709: PPUSH
37710: CALL_OW 275
37714: PUSH
37715: LD_VAR 0 5
37719: PUSH
37720: LD_INT 3
37722: ARRAY
37723: GREATEREQUAL
37724: AND
37725: ST_TO_ADDR
// end ;
37726: LD_VAR 0 3
37730: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37731: LD_INT 0
37733: PPUSH
37734: PPUSH
37735: PPUSH
37736: PPUSH
37737: PPUSH
37738: PPUSH
37739: PPUSH
37740: PPUSH
37741: PPUSH
37742: PPUSH
37743: PPUSH
// result := false ;
37744: LD_ADDR_VAR 0 8
37748: PUSH
37749: LD_INT 0
37751: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37752: LD_VAR 0 5
37756: NOT
37757: PUSH
37758: LD_VAR 0 1
37762: NOT
37763: OR
37764: PUSH
37765: LD_VAR 0 2
37769: NOT
37770: OR
37771: PUSH
37772: LD_VAR 0 3
37776: NOT
37777: OR
37778: IFFALSE 37782
// exit ;
37780: GO 38596
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37782: LD_ADDR_VAR 0 14
37786: PUSH
37787: LD_VAR 0 1
37791: PPUSH
37792: LD_VAR 0 2
37796: PPUSH
37797: LD_VAR 0 3
37801: PPUSH
37802: LD_VAR 0 4
37806: PPUSH
37807: LD_VAR 0 5
37811: PUSH
37812: LD_INT 1
37814: ARRAY
37815: PPUSH
37816: CALL_OW 248
37820: PPUSH
37821: LD_INT 0
37823: PPUSH
37824: CALL 39829 0 6
37828: ST_TO_ADDR
// if not hexes then
37829: LD_VAR 0 14
37833: NOT
37834: IFFALSE 37838
// exit ;
37836: GO 38596
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37838: LD_ADDR_VAR 0 17
37842: PUSH
37843: LD_VAR 0 5
37847: PPUSH
37848: LD_INT 22
37850: PUSH
37851: LD_VAR 0 13
37855: PPUSH
37856: CALL_OW 255
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: PUSH
37868: LD_INT 30
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 30
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PPUSH
37897: CALL_OW 72
37901: ST_TO_ADDR
// for i = 1 to hexes do
37902: LD_ADDR_VAR 0 9
37906: PUSH
37907: DOUBLE
37908: LD_INT 1
37910: DEC
37911: ST_TO_ADDR
37912: LD_VAR 0 14
37916: PUSH
37917: FOR_TO
37918: IFFALSE 38594
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37920: LD_ADDR_VAR 0 13
37924: PUSH
37925: LD_VAR 0 14
37929: PUSH
37930: LD_VAR 0 9
37934: ARRAY
37935: PUSH
37936: LD_INT 1
37938: ARRAY
37939: PPUSH
37940: LD_VAR 0 14
37944: PUSH
37945: LD_VAR 0 9
37949: ARRAY
37950: PUSH
37951: LD_INT 2
37953: ARRAY
37954: PPUSH
37955: CALL_OW 428
37959: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37960: LD_VAR 0 14
37964: PUSH
37965: LD_VAR 0 9
37969: ARRAY
37970: PUSH
37971: LD_INT 1
37973: ARRAY
37974: PPUSH
37975: LD_VAR 0 14
37979: PUSH
37980: LD_VAR 0 9
37984: ARRAY
37985: PUSH
37986: LD_INT 2
37988: ARRAY
37989: PPUSH
37990: CALL_OW 351
37994: PUSH
37995: LD_VAR 0 14
37999: PUSH
38000: LD_VAR 0 9
38004: ARRAY
38005: PUSH
38006: LD_INT 1
38008: ARRAY
38009: PPUSH
38010: LD_VAR 0 14
38014: PUSH
38015: LD_VAR 0 9
38019: ARRAY
38020: PUSH
38021: LD_INT 2
38023: ARRAY
38024: PPUSH
38025: CALL_OW 488
38029: NOT
38030: OR
38031: PUSH
38032: LD_VAR 0 13
38036: PPUSH
38037: CALL_OW 247
38041: PUSH
38042: LD_INT 3
38044: EQUAL
38045: OR
38046: IFFALSE 38052
// exit ;
38048: POP
38049: POP
38050: GO 38596
// if not tmp then
38052: LD_VAR 0 13
38056: NOT
38057: IFFALSE 38061
// continue ;
38059: GO 37917
// result := true ;
38061: LD_ADDR_VAR 0 8
38065: PUSH
38066: LD_INT 1
38068: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38069: LD_VAR 0 6
38073: PUSH
38074: LD_VAR 0 13
38078: PPUSH
38079: CALL_OW 247
38083: PUSH
38084: LD_INT 2
38086: EQUAL
38087: AND
38088: PUSH
38089: LD_VAR 0 13
38093: PPUSH
38094: CALL_OW 263
38098: PUSH
38099: LD_INT 1
38101: EQUAL
38102: AND
38103: IFFALSE 38267
// begin if IsDrivenBy ( tmp ) then
38105: LD_VAR 0 13
38109: PPUSH
38110: CALL_OW 311
38114: IFFALSE 38118
// continue ;
38116: GO 37917
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38118: LD_VAR 0 6
38122: PPUSH
38123: LD_INT 3
38125: PUSH
38126: LD_INT 60
38128: PUSH
38129: EMPTY
38130: LIST
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 3
38138: PUSH
38139: LD_INT 55
38141: PUSH
38142: EMPTY
38143: LIST
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PPUSH
38153: CALL_OW 72
38157: IFFALSE 38265
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38159: LD_ADDR_VAR 0 18
38163: PUSH
38164: LD_VAR 0 6
38168: PPUSH
38169: LD_INT 3
38171: PUSH
38172: LD_INT 60
38174: PUSH
38175: EMPTY
38176: LIST
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 3
38184: PUSH
38185: LD_INT 55
38187: PUSH
38188: EMPTY
38189: LIST
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PPUSH
38199: CALL_OW 72
38203: PUSH
38204: LD_INT 1
38206: ARRAY
38207: ST_TO_ADDR
// if IsInUnit ( driver ) then
38208: LD_VAR 0 18
38212: PPUSH
38213: CALL_OW 310
38217: IFFALSE 38228
// ComExit ( driver ) ;
38219: LD_VAR 0 18
38223: PPUSH
38224: CALL 63609 0 1
// AddComEnterUnit ( driver , tmp ) ;
38228: LD_VAR 0 18
38232: PPUSH
38233: LD_VAR 0 13
38237: PPUSH
38238: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38242: LD_VAR 0 18
38246: PPUSH
38247: LD_VAR 0 7
38251: PPUSH
38252: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38256: LD_VAR 0 18
38260: PPUSH
38261: CALL_OW 181
// end ; continue ;
38265: GO 37917
// end ; if not cleaners or not tmp in cleaners then
38267: LD_VAR 0 6
38271: NOT
38272: PUSH
38273: LD_VAR 0 13
38277: PUSH
38278: LD_VAR 0 6
38282: IN
38283: NOT
38284: OR
38285: IFFALSE 38592
// begin if dep then
38287: LD_VAR 0 17
38291: IFFALSE 38427
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38293: LD_ADDR_VAR 0 16
38297: PUSH
38298: LD_VAR 0 17
38302: PUSH
38303: LD_INT 1
38305: ARRAY
38306: PPUSH
38307: CALL_OW 250
38311: PPUSH
38312: LD_VAR 0 17
38316: PUSH
38317: LD_INT 1
38319: ARRAY
38320: PPUSH
38321: CALL_OW 254
38325: PPUSH
38326: LD_INT 5
38328: PPUSH
38329: CALL_OW 272
38333: PUSH
38334: LD_VAR 0 17
38338: PUSH
38339: LD_INT 1
38341: ARRAY
38342: PPUSH
38343: CALL_OW 251
38347: PPUSH
38348: LD_VAR 0 17
38352: PUSH
38353: LD_INT 1
38355: ARRAY
38356: PPUSH
38357: CALL_OW 254
38361: PPUSH
38362: LD_INT 5
38364: PPUSH
38365: CALL_OW 273
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38374: LD_VAR 0 16
38378: PUSH
38379: LD_INT 1
38381: ARRAY
38382: PPUSH
38383: LD_VAR 0 16
38387: PUSH
38388: LD_INT 2
38390: ARRAY
38391: PPUSH
38392: CALL_OW 488
38396: IFFALSE 38427
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38398: LD_VAR 0 13
38402: PPUSH
38403: LD_VAR 0 16
38407: PUSH
38408: LD_INT 1
38410: ARRAY
38411: PPUSH
38412: LD_VAR 0 16
38416: PUSH
38417: LD_INT 2
38419: ARRAY
38420: PPUSH
38421: CALL_OW 111
// continue ;
38425: GO 37917
// end ; end ; r := GetDir ( tmp ) ;
38427: LD_ADDR_VAR 0 15
38431: PUSH
38432: LD_VAR 0 13
38436: PPUSH
38437: CALL_OW 254
38441: ST_TO_ADDR
// if r = 5 then
38442: LD_VAR 0 15
38446: PUSH
38447: LD_INT 5
38449: EQUAL
38450: IFFALSE 38460
// r := 0 ;
38452: LD_ADDR_VAR 0 15
38456: PUSH
38457: LD_INT 0
38459: ST_TO_ADDR
// for j = r to 5 do
38460: LD_ADDR_VAR 0 10
38464: PUSH
38465: DOUBLE
38466: LD_VAR 0 15
38470: DEC
38471: ST_TO_ADDR
38472: LD_INT 5
38474: PUSH
38475: FOR_TO
38476: IFFALSE 38590
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38478: LD_ADDR_VAR 0 11
38482: PUSH
38483: LD_VAR 0 13
38487: PPUSH
38488: CALL_OW 250
38492: PPUSH
38493: LD_VAR 0 10
38497: PPUSH
38498: LD_INT 2
38500: PPUSH
38501: CALL_OW 272
38505: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38506: LD_ADDR_VAR 0 12
38510: PUSH
38511: LD_VAR 0 13
38515: PPUSH
38516: CALL_OW 251
38520: PPUSH
38521: LD_VAR 0 10
38525: PPUSH
38526: LD_INT 2
38528: PPUSH
38529: CALL_OW 273
38533: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38534: LD_VAR 0 11
38538: PPUSH
38539: LD_VAR 0 12
38543: PPUSH
38544: CALL_OW 488
38548: PUSH
38549: LD_VAR 0 11
38553: PPUSH
38554: LD_VAR 0 12
38558: PPUSH
38559: CALL_OW 428
38563: NOT
38564: AND
38565: IFFALSE 38588
// begin ComMoveXY ( tmp , _x , _y ) ;
38567: LD_VAR 0 13
38571: PPUSH
38572: LD_VAR 0 11
38576: PPUSH
38577: LD_VAR 0 12
38581: PPUSH
38582: CALL_OW 111
// break ;
38586: GO 38590
// end ; end ;
38588: GO 38475
38590: POP
38591: POP
// end ; end ;
38592: GO 37917
38594: POP
38595: POP
// end ;
38596: LD_VAR 0 8
38600: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38601: LD_INT 0
38603: PPUSH
// result := true ;
38604: LD_ADDR_VAR 0 3
38608: PUSH
38609: LD_INT 1
38611: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38612: LD_VAR 0 2
38616: PUSH
38617: LD_INT 24
38619: DOUBLE
38620: EQUAL
38621: IFTRUE 38631
38623: LD_INT 33
38625: DOUBLE
38626: EQUAL
38627: IFTRUE 38631
38629: GO 38656
38631: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38632: LD_ADDR_VAR 0 3
38636: PUSH
38637: LD_INT 32
38639: PPUSH
38640: LD_VAR 0 1
38644: PPUSH
38645: CALL_OW 321
38649: PUSH
38650: LD_INT 2
38652: EQUAL
38653: ST_TO_ADDR
38654: GO 38972
38656: LD_INT 20
38658: DOUBLE
38659: EQUAL
38660: IFTRUE 38664
38662: GO 38689
38664: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38665: LD_ADDR_VAR 0 3
38669: PUSH
38670: LD_INT 6
38672: PPUSH
38673: LD_VAR 0 1
38677: PPUSH
38678: CALL_OW 321
38682: PUSH
38683: LD_INT 2
38685: EQUAL
38686: ST_TO_ADDR
38687: GO 38972
38689: LD_INT 22
38691: DOUBLE
38692: EQUAL
38693: IFTRUE 38703
38695: LD_INT 36
38697: DOUBLE
38698: EQUAL
38699: IFTRUE 38703
38701: GO 38728
38703: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38704: LD_ADDR_VAR 0 3
38708: PUSH
38709: LD_INT 15
38711: PPUSH
38712: LD_VAR 0 1
38716: PPUSH
38717: CALL_OW 321
38721: PUSH
38722: LD_INT 2
38724: EQUAL
38725: ST_TO_ADDR
38726: GO 38972
38728: LD_INT 30
38730: DOUBLE
38731: EQUAL
38732: IFTRUE 38736
38734: GO 38761
38736: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38737: LD_ADDR_VAR 0 3
38741: PUSH
38742: LD_INT 20
38744: PPUSH
38745: LD_VAR 0 1
38749: PPUSH
38750: CALL_OW 321
38754: PUSH
38755: LD_INT 2
38757: EQUAL
38758: ST_TO_ADDR
38759: GO 38972
38761: LD_INT 28
38763: DOUBLE
38764: EQUAL
38765: IFTRUE 38775
38767: LD_INT 21
38769: DOUBLE
38770: EQUAL
38771: IFTRUE 38775
38773: GO 38800
38775: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38776: LD_ADDR_VAR 0 3
38780: PUSH
38781: LD_INT 21
38783: PPUSH
38784: LD_VAR 0 1
38788: PPUSH
38789: CALL_OW 321
38793: PUSH
38794: LD_INT 2
38796: EQUAL
38797: ST_TO_ADDR
38798: GO 38972
38800: LD_INT 16
38802: DOUBLE
38803: EQUAL
38804: IFTRUE 38808
38806: GO 38833
38808: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38809: LD_ADDR_VAR 0 3
38813: PUSH
38814: LD_INT 84
38816: PPUSH
38817: LD_VAR 0 1
38821: PPUSH
38822: CALL_OW 321
38826: PUSH
38827: LD_INT 2
38829: EQUAL
38830: ST_TO_ADDR
38831: GO 38972
38833: LD_INT 19
38835: DOUBLE
38836: EQUAL
38837: IFTRUE 38847
38839: LD_INT 23
38841: DOUBLE
38842: EQUAL
38843: IFTRUE 38847
38845: GO 38872
38847: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38848: LD_ADDR_VAR 0 3
38852: PUSH
38853: LD_INT 83
38855: PPUSH
38856: LD_VAR 0 1
38860: PPUSH
38861: CALL_OW 321
38865: PUSH
38866: LD_INT 2
38868: EQUAL
38869: ST_TO_ADDR
38870: GO 38972
38872: LD_INT 17
38874: DOUBLE
38875: EQUAL
38876: IFTRUE 38880
38878: GO 38905
38880: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38881: LD_ADDR_VAR 0 3
38885: PUSH
38886: LD_INT 39
38888: PPUSH
38889: LD_VAR 0 1
38893: PPUSH
38894: CALL_OW 321
38898: PUSH
38899: LD_INT 2
38901: EQUAL
38902: ST_TO_ADDR
38903: GO 38972
38905: LD_INT 18
38907: DOUBLE
38908: EQUAL
38909: IFTRUE 38913
38911: GO 38938
38913: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38914: LD_ADDR_VAR 0 3
38918: PUSH
38919: LD_INT 40
38921: PPUSH
38922: LD_VAR 0 1
38926: PPUSH
38927: CALL_OW 321
38931: PUSH
38932: LD_INT 2
38934: EQUAL
38935: ST_TO_ADDR
38936: GO 38972
38938: LD_INT 27
38940: DOUBLE
38941: EQUAL
38942: IFTRUE 38946
38944: GO 38971
38946: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38947: LD_ADDR_VAR 0 3
38951: PUSH
38952: LD_INT 35
38954: PPUSH
38955: LD_VAR 0 1
38959: PPUSH
38960: CALL_OW 321
38964: PUSH
38965: LD_INT 2
38967: EQUAL
38968: ST_TO_ADDR
38969: GO 38972
38971: POP
// end ;
38972: LD_VAR 0 3
38976: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38977: LD_INT 0
38979: PPUSH
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
38989: PPUSH
// result := false ;
38990: LD_ADDR_VAR 0 6
38994: PUSH
38995: LD_INT 0
38997: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38998: LD_VAR 0 1
39002: NOT
39003: PUSH
39004: LD_VAR 0 1
39008: PPUSH
39009: CALL_OW 266
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: IN
39024: NOT
39025: OR
39026: PUSH
39027: LD_VAR 0 2
39031: NOT
39032: OR
39033: PUSH
39034: LD_VAR 0 5
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: LD_INT 2
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: LD_INT 4
39053: PUSH
39054: LD_INT 5
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: IN
39065: NOT
39066: OR
39067: PUSH
39068: LD_VAR 0 3
39072: PPUSH
39073: LD_VAR 0 4
39077: PPUSH
39078: CALL_OW 488
39082: NOT
39083: OR
39084: IFFALSE 39088
// exit ;
39086: GO 39824
// side := GetSide ( depot ) ;
39088: LD_ADDR_VAR 0 9
39092: PUSH
39093: LD_VAR 0 1
39097: PPUSH
39098: CALL_OW 255
39102: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39103: LD_VAR 0 9
39107: PPUSH
39108: LD_VAR 0 2
39112: PPUSH
39113: CALL 38601 0 2
39117: NOT
39118: IFFALSE 39122
// exit ;
39120: GO 39824
// pom := GetBase ( depot ) ;
39122: LD_ADDR_VAR 0 10
39126: PUSH
39127: LD_VAR 0 1
39131: PPUSH
39132: CALL_OW 274
39136: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39137: LD_ADDR_VAR 0 11
39141: PUSH
39142: LD_VAR 0 2
39146: PPUSH
39147: LD_VAR 0 1
39151: PPUSH
39152: CALL_OW 248
39156: PPUSH
39157: CALL_OW 450
39161: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39162: LD_VAR 0 10
39166: PPUSH
39167: LD_INT 1
39169: PPUSH
39170: CALL_OW 275
39174: PUSH
39175: LD_VAR 0 11
39179: PUSH
39180: LD_INT 1
39182: ARRAY
39183: GREATEREQUAL
39184: PUSH
39185: LD_VAR 0 10
39189: PPUSH
39190: LD_INT 2
39192: PPUSH
39193: CALL_OW 275
39197: PUSH
39198: LD_VAR 0 11
39202: PUSH
39203: LD_INT 2
39205: ARRAY
39206: GREATEREQUAL
39207: AND
39208: PUSH
39209: LD_VAR 0 10
39213: PPUSH
39214: LD_INT 3
39216: PPUSH
39217: CALL_OW 275
39221: PUSH
39222: LD_VAR 0 11
39226: PUSH
39227: LD_INT 3
39229: ARRAY
39230: GREATEREQUAL
39231: AND
39232: NOT
39233: IFFALSE 39237
// exit ;
39235: GO 39824
// if GetBType ( depot ) = b_depot then
39237: LD_VAR 0 1
39241: PPUSH
39242: CALL_OW 266
39246: PUSH
39247: LD_INT 0
39249: EQUAL
39250: IFFALSE 39262
// dist := 28 else
39252: LD_ADDR_VAR 0 14
39256: PUSH
39257: LD_INT 28
39259: ST_TO_ADDR
39260: GO 39270
// dist := 36 ;
39262: LD_ADDR_VAR 0 14
39266: PUSH
39267: LD_INT 36
39269: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39270: LD_VAR 0 1
39274: PPUSH
39275: LD_VAR 0 3
39279: PPUSH
39280: LD_VAR 0 4
39284: PPUSH
39285: CALL_OW 297
39289: PUSH
39290: LD_VAR 0 14
39294: GREATER
39295: IFFALSE 39299
// exit ;
39297: GO 39824
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39299: LD_ADDR_VAR 0 12
39303: PUSH
39304: LD_VAR 0 2
39308: PPUSH
39309: LD_VAR 0 3
39313: PPUSH
39314: LD_VAR 0 4
39318: PPUSH
39319: LD_VAR 0 5
39323: PPUSH
39324: LD_VAR 0 1
39328: PPUSH
39329: CALL_OW 248
39333: PPUSH
39334: LD_INT 0
39336: PPUSH
39337: CALL 39829 0 6
39341: ST_TO_ADDR
// if not hexes then
39342: LD_VAR 0 12
39346: NOT
39347: IFFALSE 39351
// exit ;
39349: GO 39824
// hex := GetHexInfo ( x , y ) ;
39351: LD_ADDR_VAR 0 15
39355: PUSH
39356: LD_VAR 0 3
39360: PPUSH
39361: LD_VAR 0 4
39365: PPUSH
39366: CALL_OW 546
39370: ST_TO_ADDR
// if hex [ 1 ] then
39371: LD_VAR 0 15
39375: PUSH
39376: LD_INT 1
39378: ARRAY
39379: IFFALSE 39383
// exit ;
39381: GO 39824
// height := hex [ 2 ] ;
39383: LD_ADDR_VAR 0 13
39387: PUSH
39388: LD_VAR 0 15
39392: PUSH
39393: LD_INT 2
39395: ARRAY
39396: ST_TO_ADDR
// for i = 1 to hexes do
39397: LD_ADDR_VAR 0 7
39401: PUSH
39402: DOUBLE
39403: LD_INT 1
39405: DEC
39406: ST_TO_ADDR
39407: LD_VAR 0 12
39411: PUSH
39412: FOR_TO
39413: IFFALSE 39743
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39415: LD_VAR 0 12
39419: PUSH
39420: LD_VAR 0 7
39424: ARRAY
39425: PUSH
39426: LD_INT 1
39428: ARRAY
39429: PPUSH
39430: LD_VAR 0 12
39434: PUSH
39435: LD_VAR 0 7
39439: ARRAY
39440: PUSH
39441: LD_INT 2
39443: ARRAY
39444: PPUSH
39445: CALL_OW 488
39449: NOT
39450: PUSH
39451: LD_VAR 0 12
39455: PUSH
39456: LD_VAR 0 7
39460: ARRAY
39461: PUSH
39462: LD_INT 1
39464: ARRAY
39465: PPUSH
39466: LD_VAR 0 12
39470: PUSH
39471: LD_VAR 0 7
39475: ARRAY
39476: PUSH
39477: LD_INT 2
39479: ARRAY
39480: PPUSH
39481: CALL_OW 428
39485: PUSH
39486: LD_INT 0
39488: GREATER
39489: OR
39490: PUSH
39491: LD_VAR 0 12
39495: PUSH
39496: LD_VAR 0 7
39500: ARRAY
39501: PUSH
39502: LD_INT 1
39504: ARRAY
39505: PPUSH
39506: LD_VAR 0 12
39510: PUSH
39511: LD_VAR 0 7
39515: ARRAY
39516: PUSH
39517: LD_INT 2
39519: ARRAY
39520: PPUSH
39521: CALL_OW 351
39525: OR
39526: IFFALSE 39532
// exit ;
39528: POP
39529: POP
39530: GO 39824
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39532: LD_ADDR_VAR 0 8
39536: PUSH
39537: LD_VAR 0 12
39541: PUSH
39542: LD_VAR 0 7
39546: ARRAY
39547: PUSH
39548: LD_INT 1
39550: ARRAY
39551: PPUSH
39552: LD_VAR 0 12
39556: PUSH
39557: LD_VAR 0 7
39561: ARRAY
39562: PUSH
39563: LD_INT 2
39565: ARRAY
39566: PPUSH
39567: CALL_OW 546
39571: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39572: LD_VAR 0 8
39576: PUSH
39577: LD_INT 1
39579: ARRAY
39580: PUSH
39581: LD_VAR 0 8
39585: PUSH
39586: LD_INT 2
39588: ARRAY
39589: PUSH
39590: LD_VAR 0 13
39594: PUSH
39595: LD_INT 2
39597: PLUS
39598: GREATER
39599: OR
39600: PUSH
39601: LD_VAR 0 8
39605: PUSH
39606: LD_INT 2
39608: ARRAY
39609: PUSH
39610: LD_VAR 0 13
39614: PUSH
39615: LD_INT 2
39617: MINUS
39618: LESS
39619: OR
39620: PUSH
39621: LD_VAR 0 8
39625: PUSH
39626: LD_INT 3
39628: ARRAY
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: LD_INT 8
39635: PUSH
39636: LD_INT 9
39638: PUSH
39639: LD_INT 10
39641: PUSH
39642: LD_INT 11
39644: PUSH
39645: LD_INT 12
39647: PUSH
39648: LD_INT 13
39650: PUSH
39651: LD_INT 16
39653: PUSH
39654: LD_INT 17
39656: PUSH
39657: LD_INT 18
39659: PUSH
39660: LD_INT 19
39662: PUSH
39663: LD_INT 20
39665: PUSH
39666: LD_INT 21
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: IN
39684: NOT
39685: OR
39686: PUSH
39687: LD_VAR 0 8
39691: PUSH
39692: LD_INT 5
39694: ARRAY
39695: NOT
39696: OR
39697: PUSH
39698: LD_VAR 0 8
39702: PUSH
39703: LD_INT 6
39705: ARRAY
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 7
39715: PUSH
39716: LD_INT 9
39718: PUSH
39719: LD_INT 10
39721: PUSH
39722: LD_INT 11
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: IN
39733: NOT
39734: OR
39735: IFFALSE 39741
// exit ;
39737: POP
39738: POP
39739: GO 39824
// end ;
39741: GO 39412
39743: POP
39744: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39745: LD_VAR 0 9
39749: PPUSH
39750: LD_VAR 0 3
39754: PPUSH
39755: LD_VAR 0 4
39759: PPUSH
39760: LD_INT 20
39762: PPUSH
39763: CALL 31776 0 4
39767: PUSH
39768: LD_INT 4
39770: ARRAY
39771: IFFALSE 39775
// exit ;
39773: GO 39824
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39775: LD_VAR 0 2
39779: PUSH
39780: LD_INT 29
39782: PUSH
39783: LD_INT 30
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: IN
39790: PUSH
39791: LD_VAR 0 3
39795: PPUSH
39796: LD_VAR 0 4
39800: PPUSH
39801: LD_VAR 0 9
39805: PPUSH
39806: CALL_OW 440
39810: NOT
39811: AND
39812: IFFALSE 39816
// exit ;
39814: GO 39824
// result := true ;
39816: LD_ADDR_VAR 0 6
39820: PUSH
39821: LD_INT 1
39823: ST_TO_ADDR
// end ;
39824: LD_VAR 0 6
39828: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39829: LD_INT 0
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
39849: PPUSH
39850: PPUSH
39851: PPUSH
39852: PPUSH
39853: PPUSH
39854: PPUSH
39855: PPUSH
39856: PPUSH
39857: PPUSH
39858: PPUSH
39859: PPUSH
39860: PPUSH
39861: PPUSH
39862: PPUSH
39863: PPUSH
39864: PPUSH
39865: PPUSH
39866: PPUSH
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
39884: PPUSH
39885: PPUSH
39886: PPUSH
39887: PPUSH
39888: PPUSH
// result = [ ] ;
39889: LD_ADDR_VAR 0 7
39893: PUSH
39894: EMPTY
39895: ST_TO_ADDR
// temp_list = [ ] ;
39896: LD_ADDR_VAR 0 9
39900: PUSH
39901: EMPTY
39902: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39903: LD_VAR 0 4
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: LD_INT 3
39919: PUSH
39920: LD_INT 4
39922: PUSH
39923: LD_INT 5
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: IN
39934: NOT
39935: PUSH
39936: LD_VAR 0 1
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: IN
39951: PUSH
39952: LD_VAR 0 5
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: LD_INT 2
39962: PUSH
39963: LD_INT 3
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: LIST
39970: IN
39971: NOT
39972: AND
39973: OR
39974: IFFALSE 39978
// exit ;
39976: GO 58369
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39978: LD_VAR 0 1
39982: PUSH
39983: LD_INT 6
39985: PUSH
39986: LD_INT 7
39988: PUSH
39989: LD_INT 8
39991: PUSH
39992: LD_INT 13
39994: PUSH
39995: LD_INT 12
39997: PUSH
39998: LD_INT 15
40000: PUSH
40001: LD_INT 11
40003: PUSH
40004: LD_INT 14
40006: PUSH
40007: LD_INT 10
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: IN
40021: IFFALSE 40031
// btype = b_lab ;
40023: LD_ADDR_VAR 0 1
40027: PUSH
40028: LD_INT 6
40030: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40031: LD_VAR 0 6
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: LIST
40049: IN
40050: NOT
40051: PUSH
40052: LD_VAR 0 1
40056: PUSH
40057: LD_INT 0
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: LD_INT 3
40068: PUSH
40069: LD_INT 6
40071: PUSH
40072: LD_INT 36
40074: PUSH
40075: LD_INT 4
40077: PUSH
40078: LD_INT 5
40080: PUSH
40081: LD_INT 31
40083: PUSH
40084: LD_INT 32
40086: PUSH
40087: LD_INT 33
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: IN
40103: NOT
40104: PUSH
40105: LD_VAR 0 6
40109: PUSH
40110: LD_INT 1
40112: EQUAL
40113: AND
40114: OR
40115: PUSH
40116: LD_VAR 0 1
40120: PUSH
40121: LD_INT 2
40123: PUSH
40124: LD_INT 3
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: IN
40131: NOT
40132: PUSH
40133: LD_VAR 0 6
40137: PUSH
40138: LD_INT 2
40140: EQUAL
40141: AND
40142: OR
40143: IFFALSE 40153
// mode = 0 ;
40145: LD_ADDR_VAR 0 6
40149: PUSH
40150: LD_INT 0
40152: ST_TO_ADDR
// case mode of 0 :
40153: LD_VAR 0 6
40157: PUSH
40158: LD_INT 0
40160: DOUBLE
40161: EQUAL
40162: IFTRUE 40166
40164: GO 51619
40166: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40167: LD_ADDR_VAR 0 11
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: LD_INT 2
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: LD_INT 2
40263: NEG
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: LD_INT 3
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: LD_INT 3
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40360: LD_ADDR_VAR 0 12
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: LD_INT 1
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 3
40517: NEG
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 3
40528: NEG
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40556: LD_ADDR_VAR 0 13
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: LD_INT 1
40629: NEG
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 2
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: LD_INT 2
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 2
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: NEG
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 2
40703: NEG
40704: PUSH
40705: LD_INT 3
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 3
40715: NEG
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 3
40727: NEG
40728: PUSH
40729: LD_INT 3
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40755: LD_ADDR_VAR 0 14
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 2
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 2
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: NEG
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: LD_INT 3
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 3
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40951: LD_ADDR_VAR 0 15
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 2
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 3
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 3
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41144: LD_ADDR_VAR 0 16
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 2
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 2
41267: NEG
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 3
41291: PUSH
41292: LD_INT 2
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 3
41301: PUSH
41302: LD_INT 3
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 3
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41337: LD_ADDR_VAR 0 17
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 2
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41567: LD_ADDR_VAR 0 18
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 2
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: NEG
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41797: LD_ADDR_VAR 0 19
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 2
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 2
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: LD_INT 2
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42027: LD_ADDR_VAR 0 20
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42257: LD_ADDR_VAR 0 21
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: LD_INT 2
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42487: LD_ADDR_VAR 0 22
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: LD_INT 2
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: LD_INT 2
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 2
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 2
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: NEG
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: NEG
42687: PUSH
42688: LD_INT 2
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42717: LD_ADDR_VAR 0 23
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 2
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 2
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 2
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 2
42916: NEG
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 2
42928: NEG
42929: PUSH
42930: LD_INT 3
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: LD_INT 3
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: LD_INT 2
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42997: LD_ADDR_VAR 0 24
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: LD_INT 2
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 2
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 2
43173: NEG
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 2
43184: NEG
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: LD_INT 2
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 2
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 3
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 3
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43273: LD_ADDR_VAR 0 25
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 2
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 2
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 3
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 3
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: LD_INT 3
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 3
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43547: LD_ADDR_VAR 0 26
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 1
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: LD_INT 2
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: NEG
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: LD_INT 3
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: LD_INT 3
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43823: LD_ADDR_VAR 0 27
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 1
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: LD_INT 2
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: LD_INT 2
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 2
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 2
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: NEG
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 3
44056: NEG
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 3
44068: NEG
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44103: LD_ADDR_VAR 0 28
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: LD_INT 3
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 3
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 3
44338: NEG
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 3
44350: NEG
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44385: LD_ADDR_VAR 0 29
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 2
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: LD_INT 3
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 3
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 3
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 3
44629: NEG
44630: PUSH
44631: LD_INT 2
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44664: LD_ADDR_VAR 0 30
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: LD_INT 3
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 3
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: LD_INT 3
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 3
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44942: LD_ADDR_VAR 0 31
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 2
45131: NEG
45132: PUSH
45133: LD_INT 3
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 3
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: LD_INT 3
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 3
45185: NEG
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45220: LD_ADDR_VAR 0 32
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: NEG
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: LD_INT 3
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 3
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 3
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: NEG
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45498: LD_ADDR_VAR 0 33
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 2
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: LD_INT 3
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 3
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 3
45742: NEG
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45777: LD_ADDR_VAR 0 34
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: NEG
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 3
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 3
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: LD_INT 3
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 3
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46057: LD_ADDR_VAR 0 35
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46169: LD_ADDR_VAR 0 36
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46281: LD_ADDR_VAR 0 37
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46393: LD_ADDR_VAR 0 38
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46505: LD_ADDR_VAR 0 39
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46617: LD_ADDR_VAR 0 40
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46729: LD_ADDR_VAR 0 41
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: LD_INT 2
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: LD_INT 3
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 3
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 3
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 3
46962: PUSH
46963: LD_INT 2
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 3
46972: PUSH
46973: LD_INT 3
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: LD_INT 3
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: NEG
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 3
47014: NEG
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 3
47026: NEG
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: NEG
47039: PUSH
47040: LD_INT 3
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47079: LD_ADDR_VAR 0 42
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: LD_INT 3
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: LD_INT 3
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 3
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 3
47325: PUSH
47326: LD_INT 3
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 3
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 3
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 3
47376: NEG
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: NEG
47389: PUSH
47390: LD_INT 3
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47429: LD_ADDR_VAR 0 43
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 2
47606: NEG
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: LD_INT 3
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 3
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 3
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 3
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 3
47725: NEG
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 3
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47777: LD_ADDR_VAR 0 44
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: LD_INT 3
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 3
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 3
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 3
48010: PUSH
48011: LD_INT 2
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 3
48020: PUSH
48021: LD_INT 3
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: LD_INT 3
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 3
48051: NEG
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 3
48062: NEG
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 3
48074: NEG
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 3
48086: NEG
48087: PUSH
48088: LD_INT 3
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48127: LD_ADDR_VAR 0 45
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: LD_INT 2
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: LD_INT 3
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: LD_INT 3
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 3
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 3
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 3
48373: PUSH
48374: LD_INT 3
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: LD_INT 3
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 3
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 3
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 3
48424: NEG
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 3
48436: NEG
48437: PUSH
48438: LD_INT 3
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48477: LD_ADDR_VAR 0 46
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 2
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 3
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 3
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 3
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 3
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 3
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 3
48773: NEG
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 3
48784: NEG
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48825: LD_ADDR_VAR 0 47
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: NEG
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48976: LD_ADDR_VAR 0 48
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49123: LD_ADDR_VAR 0 49
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: LD_INT 2
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 2
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49267: LD_ADDR_VAR 0 50
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49411: LD_ADDR_VAR 0 51
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49558: LD_ADDR_VAR 0 52
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49709: LD_ADDR_VAR 0 53
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49939: LD_ADDR_VAR 0 54
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50169: LD_ADDR_VAR 0 55
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50399: LD_ADDR_VAR 0 56
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50629: LD_ADDR_VAR 0 57
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50859: LD_ADDR_VAR 0 58
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51089: LD_ADDR_VAR 0 59
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51177: LD_ADDR_VAR 0 60
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51265: LD_ADDR_VAR 0 61
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51353: LD_ADDR_VAR 0 62
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51441: LD_ADDR_VAR 0 63
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51529: LD_ADDR_VAR 0 64
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: ST_TO_ADDR
// end ; 1 :
51617: GO 57514
51619: LD_INT 1
51621: DOUBLE
51622: EQUAL
51623: IFTRUE 51627
51625: GO 54250
51627: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51628: LD_ADDR_VAR 0 11
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: LD_INT 3
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 3
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: LIST
51671: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51672: LD_ADDR_VAR 0 12
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 3
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 3
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: LIST
51712: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51713: LD_ADDR_VAR 0 13
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51753: LD_ADDR_VAR 0 14
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51794: LD_ADDR_VAR 0 15
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 3
51812: NEG
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 3
51823: NEG
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51838: LD_ADDR_VAR 0 16
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: LD_INT 3
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 3
51857: NEG
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 3
51869: NEG
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: LIST
51883: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51884: LD_ADDR_VAR 0 17
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 3
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 3
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51928: LD_ADDR_VAR 0 18
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 3
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 3
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51969: LD_ADDR_VAR 0 19
51973: PUSH
51974: LD_INT 3
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 3
51986: PUSH
51987: LD_INT 3
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: LD_INT 3
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: LIST
52008: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52009: LD_ADDR_VAR 0 20
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 3
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 3
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52050: LD_ADDR_VAR 0 21
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 3
52068: NEG
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: NEG
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52094: LD_ADDR_VAR 0 22
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: LD_INT 3
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 3
52113: NEG
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 3
52125: NEG
52126: PUSH
52127: LD_INT 3
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: LIST
52139: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52140: LD_ADDR_VAR 0 23
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 3
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 4
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 3
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52184: LD_ADDR_VAR 0 24
52188: PUSH
52189: LD_INT 3
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 4
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: LIST
52224: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52225: LD_ADDR_VAR 0 25
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: LD_INT 3
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 4
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 3
52252: PUSH
52253: LD_INT 4
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52265: LD_ADDR_VAR 0 26
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 3
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 4
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: LIST
52305: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52306: LD_ADDR_VAR 0 27
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 3
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 4
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52350: LD_ADDR_VAR 0 28
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 3
52369: NEG
52370: PUSH
52371: LD_INT 4
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 4
52381: NEG
52382: PUSH
52383: LD_INT 3
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: LIST
52395: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52396: LD_ADDR_VAR 0 29
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 4
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: LD_INT 4
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: LD_INT 3
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 5
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 5
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 4
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 6
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 6
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 5
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52551: LD_ADDR_VAR 0 30
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 3
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 3
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 4
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 4
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 4
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 5
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 5
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 5
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 6
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 6
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52694: LD_ADDR_VAR 0 31
52698: PUSH
52699: LD_INT 3
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 3
52711: PUSH
52712: LD_INT 3
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 4
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 4
52741: PUSH
52742: LD_INT 4
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 3
52751: PUSH
52752: LD_INT 4
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 5
52761: PUSH
52762: LD_INT 4
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 5
52771: PUSH
52772: LD_INT 5
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 4
52781: PUSH
52782: LD_INT 5
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 6
52791: PUSH
52792: LD_INT 5
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 6
52801: PUSH
52802: LD_INT 6
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 5
52811: PUSH
52812: LD_INT 6
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52833: LD_ADDR_VAR 0 32
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 3
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 3
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 4
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 4
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 3
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 5
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 5
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: LD_INT 4
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: LD_INT 6
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 6
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 5
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52976: LD_ADDR_VAR 0 33
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 3
52994: NEG
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 3
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 4
53028: NEG
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 4
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 4
53051: NEG
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 5
53062: NEG
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 5
53073: NEG
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 5
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 6
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 6
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53131: LD_ADDR_VAR 0 34
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: LD_INT 3
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 3
53150: NEG
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 3
53162: NEG
53163: PUSH
53164: LD_INT 3
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: LD_INT 4
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 4
53186: NEG
53187: PUSH
53188: LD_INT 3
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 4
53198: NEG
53199: PUSH
53200: LD_INT 4
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 4
53210: NEG
53211: PUSH
53212: LD_INT 5
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 5
53222: NEG
53223: PUSH
53224: LD_INT 4
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 5
53234: NEG
53235: PUSH
53236: LD_INT 5
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 5
53246: NEG
53247: PUSH
53248: LD_INT 6
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 6
53258: NEG
53259: PUSH
53260: LD_INT 5
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 6
53270: NEG
53271: PUSH
53272: LD_INT 6
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53294: LD_ADDR_VAR 0 41
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: LD_INT 3
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: LIST
53337: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53338: LD_ADDR_VAR 0 42
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53379: LD_ADDR_VAR 0 43
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 3
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: LD_INT 3
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53419: LD_ADDR_VAR 0 44
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 2
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 3
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: LIST
53459: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53460: LD_ADDR_VAR 0 45
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: NEG
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 3
53489: NEG
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: LIST
53503: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53504: LD_ADDR_VAR 0 46
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: NEG
53524: PUSH
53525: LD_INT 3
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: NEG
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: LIST
53549: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53550: LD_ADDR_VAR 0 47
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: LD_INT 3
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53583: LD_ADDR_VAR 0 48
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 2
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53614: LD_ADDR_VAR 0 49
53618: PUSH
53619: LD_INT 3
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 3
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53643: LD_ADDR_VAR 0 50
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: LD_INT 3
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53672: LD_ADDR_VAR 0 51
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53703: LD_ADDR_VAR 0 52
53707: PUSH
53708: LD_INT 3
53710: NEG
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: NEG
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53736: LD_ADDR_VAR 0 53
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: LD_INT 3
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 3
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: LIST
53779: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53780: LD_ADDR_VAR 0 54
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 3
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 3
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: LIST
53820: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53821: LD_ADDR_VAR 0 55
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 3
53838: PUSH
53839: LD_INT 3
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: LD_INT 3
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53861: LD_ADDR_VAR 0 56
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 3
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: LIST
53901: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53902: LD_ADDR_VAR 0 57
53906: PUSH
53907: LD_INT 2
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 3
53920: NEG
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 3
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53946: LD_ADDR_VAR 0 58
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: LD_INT 3
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 3
53977: NEG
53978: PUSH
53979: LD_INT 3
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: LIST
53991: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53992: LD_ADDR_VAR 0 59
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: LIST
54035: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54036: LD_ADDR_VAR 0 60
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: LIST
54076: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54077: LD_ADDR_VAR 0 61
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 2
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: LIST
54116: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54117: LD_ADDR_VAR 0 62
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54158: LD_ADDR_VAR 0 63
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: LIST
54201: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54202: LD_ADDR_VAR 0 64
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: LIST
54247: ST_TO_ADDR
// end ; 2 :
54248: GO 57514
54250: LD_INT 2
54252: DOUBLE
54253: EQUAL
54254: IFTRUE 54258
54256: GO 57513
54258: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54259: LD_ADDR_VAR 0 29
54263: PUSH
54264: LD_INT 4
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 4
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 5
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 5
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 4
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 5
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 3
54359: PUSH
54360: LD_INT 3
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 4
54379: PUSH
54380: LD_INT 3
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 4
54389: PUSH
54390: LD_INT 4
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: LD_INT 4
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: PUSH
54410: LD_INT 3
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: LD_INT 2
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 4
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: LD_INT 4
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 4
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 3
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: LD_INT 4
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 5
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 5
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 4
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 3
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 5
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 3
54553: NEG
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 3
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 4
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 4
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 4
54621: NEG
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 4
54644: NEG
54645: PUSH
54646: LD_INT 4
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 4
54656: NEG
54657: PUSH
54658: LD_INT 5
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 3
54668: NEG
54669: PUSH
54670: LD_INT 4
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 3
54680: NEG
54681: PUSH
54682: LD_INT 3
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 4
54692: NEG
54693: PUSH
54694: LD_INT 3
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 5
54704: NEG
54705: PUSH
54706: LD_INT 4
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 5
54716: NEG
54717: PUSH
54718: LD_INT 5
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: NEG
54729: PUSH
54730: LD_INT 5
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 5
54740: NEG
54741: PUSH
54742: LD_INT 3
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54797: LD_ADDR_VAR 0 30
54801: PUSH
54802: LD_INT 4
54804: PUSH
54805: LD_INT 4
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 4
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 5
54824: PUSH
54825: LD_INT 4
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 5
54834: PUSH
54835: LD_INT 5
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 4
54844: PUSH
54845: LD_INT 5
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 3
54854: PUSH
54855: LD_INT 4
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 3
54864: PUSH
54865: LD_INT 3
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 5
54874: PUSH
54875: LD_INT 3
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 3
54884: PUSH
54885: LD_INT 5
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 3
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 3
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 4
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 4
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 3
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: LD_INT 4
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 4
54987: NEG
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 4
54998: NEG
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 3
55010: NEG
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 4
55032: NEG
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 5
55043: NEG
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 5
55054: NEG
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 5
55066: NEG
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 3
55078: NEG
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 3
55101: NEG
55102: PUSH
55103: LD_INT 4
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 3
55137: NEG
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 4
55149: NEG
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 4
55161: NEG
55162: PUSH
55163: LD_INT 4
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: LD_INT 4
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 4
55185: NEG
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 4
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 5
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 4
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 3
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 3
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 4
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 5
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 3
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 2
55287: NEG
55288: PUSH
55289: LD_INT 5
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55344: LD_ADDR_VAR 0 31
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: LD_INT 4
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: LD_INT 4
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 5
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 5
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 4
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: LD_INT 3
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: LD_INT 5
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: NEG
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: NEG
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 3
55489: NEG
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 4
55500: NEG
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 4
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 4
55523: NEG
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 4
55546: NEG
55547: PUSH
55548: LD_INT 4
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 4
55558: NEG
55559: PUSH
55560: LD_INT 5
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 3
55570: NEG
55571: PUSH
55572: LD_INT 4
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 3
55582: NEG
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 4
55594: NEG
55595: PUSH
55596: LD_INT 3
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 5
55606: NEG
55607: PUSH
55608: LD_INT 4
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 5
55618: NEG
55619: PUSH
55620: LD_INT 5
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 3
55630: NEG
55631: PUSH
55632: LD_INT 5
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 5
55642: NEG
55643: PUSH
55644: LD_INT 3
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: LD_INT 4
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 3
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 3
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: LD_INT 4
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 4
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 4
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 4
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 5
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 5
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 4
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 3
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 5
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55894: LD_ADDR_VAR 0 32
55898: PUSH
55899: LD_INT 4
55901: NEG
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 4
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: NEG
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 4
55946: NEG
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 5
55957: NEG
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 5
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 5
55980: NEG
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 3
55992: NEG
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: NEG
56004: PUSH
56005: LD_INT 3
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: NEG
56016: PUSH
56017: LD_INT 4
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: NEG
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 3
56051: NEG
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 4
56063: NEG
56064: PUSH
56065: LD_INT 3
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 4
56075: NEG
56076: PUSH
56077: LD_INT 4
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: LD_INT 4
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 4
56099: NEG
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 4
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 5
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 4
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 4
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: LD_INT 5
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 3
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 5
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 3
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 4
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 4
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 2
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 4
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 4
56306: PUSH
56307: LD_INT 4
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 4
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 5
56326: PUSH
56327: LD_INT 4
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 5
56336: PUSH
56337: LD_INT 5
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 4
56346: PUSH
56347: LD_INT 5
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: LD_INT 4
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: LD_INT 3
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 5
56376: PUSH
56377: LD_INT 3
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: LD_INT 5
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56441: LD_ADDR_VAR 0 33
56445: PUSH
56446: LD_INT 4
56448: NEG
56449: PUSH
56450: LD_INT 4
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 4
56460: NEG
56461: PUSH
56462: LD_INT 5
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 3
56472: NEG
56473: PUSH
56474: LD_INT 4
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 3
56484: NEG
56485: PUSH
56486: LD_INT 3
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 4
56496: NEG
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 5
56508: NEG
56509: PUSH
56510: LD_INT 4
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 5
56520: NEG
56521: PUSH
56522: LD_INT 5
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 3
56532: NEG
56533: PUSH
56534: LD_INT 5
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 5
56544: NEG
56545: PUSH
56546: LD_INT 3
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 4
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 3
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: LD_INT 4
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: LD_INT 4
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 4
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 4
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 5
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 5
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 4
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 5
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 3
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 4
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 4
56781: PUSH
56782: LD_INT 4
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 3
56791: PUSH
56792: LD_INT 4
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 3
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 4
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: LD_INT 4
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: LD_INT 4
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 3
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 4
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 5
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 5
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: LD_INT 4
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 3
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: LD_INT 5
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56979: LD_ADDR_VAR 0 34
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 4
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 5
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 4
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: LD_INT 3
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 3
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: LD_INT 4
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 5
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: LD_INT 5
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 3
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 3
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 4
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 4
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 4
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 4
57181: PUSH
57182: LD_INT 4
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 4
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 5
57201: PUSH
57202: LD_INT 4
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 5
57211: PUSH
57212: LD_INT 5
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 4
57221: PUSH
57222: LD_INT 5
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 3
57231: PUSH
57232: LD_INT 4
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 3
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 5
57251: PUSH
57252: LD_INT 3
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: PUSH
57262: LD_INT 5
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 3
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 4
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 4
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: LD_INT 4
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 4
57364: NEG
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 4
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 3
57387: NEG
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 3
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 4
57409: NEG
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 5
57420: NEG
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 5
57431: NEG
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 5
57443: NEG
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 3
57455: NEG
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: ST_TO_ADDR
// end ; end ;
57511: GO 57514
57513: POP
// case btype of b_depot , b_warehouse :
57514: LD_VAR 0 1
57518: PUSH
57519: LD_INT 0
57521: DOUBLE
57522: EQUAL
57523: IFTRUE 57533
57525: LD_INT 1
57527: DOUBLE
57528: EQUAL
57529: IFTRUE 57533
57531: GO 57734
57533: POP
// case nation of nation_american :
57534: LD_VAR 0 5
57538: PUSH
57539: LD_INT 1
57541: DOUBLE
57542: EQUAL
57543: IFTRUE 57547
57545: GO 57603
57547: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57548: LD_ADDR_VAR 0 9
57552: PUSH
57553: LD_VAR 0 11
57557: PUSH
57558: LD_VAR 0 12
57562: PUSH
57563: LD_VAR 0 13
57567: PUSH
57568: LD_VAR 0 14
57572: PUSH
57573: LD_VAR 0 15
57577: PUSH
57578: LD_VAR 0 16
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: PUSH
57591: LD_VAR 0 4
57595: PUSH
57596: LD_INT 1
57598: PLUS
57599: ARRAY
57600: ST_TO_ADDR
57601: GO 57732
57603: LD_INT 2
57605: DOUBLE
57606: EQUAL
57607: IFTRUE 57611
57609: GO 57667
57611: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57612: LD_ADDR_VAR 0 9
57616: PUSH
57617: LD_VAR 0 17
57621: PUSH
57622: LD_VAR 0 18
57626: PUSH
57627: LD_VAR 0 19
57631: PUSH
57632: LD_VAR 0 20
57636: PUSH
57637: LD_VAR 0 21
57641: PUSH
57642: LD_VAR 0 22
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: PUSH
57655: LD_VAR 0 4
57659: PUSH
57660: LD_INT 1
57662: PLUS
57663: ARRAY
57664: ST_TO_ADDR
57665: GO 57732
57667: LD_INT 3
57669: DOUBLE
57670: EQUAL
57671: IFTRUE 57675
57673: GO 57731
57675: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57676: LD_ADDR_VAR 0 9
57680: PUSH
57681: LD_VAR 0 23
57685: PUSH
57686: LD_VAR 0 24
57690: PUSH
57691: LD_VAR 0 25
57695: PUSH
57696: LD_VAR 0 26
57700: PUSH
57701: LD_VAR 0 27
57705: PUSH
57706: LD_VAR 0 28
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: PUSH
57719: LD_VAR 0 4
57723: PUSH
57724: LD_INT 1
57726: PLUS
57727: ARRAY
57728: ST_TO_ADDR
57729: GO 57732
57731: POP
57732: GO 58287
57734: LD_INT 2
57736: DOUBLE
57737: EQUAL
57738: IFTRUE 57748
57740: LD_INT 3
57742: DOUBLE
57743: EQUAL
57744: IFTRUE 57748
57746: GO 57804
57748: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57749: LD_ADDR_VAR 0 9
57753: PUSH
57754: LD_VAR 0 29
57758: PUSH
57759: LD_VAR 0 30
57763: PUSH
57764: LD_VAR 0 31
57768: PUSH
57769: LD_VAR 0 32
57773: PUSH
57774: LD_VAR 0 33
57778: PUSH
57779: LD_VAR 0 34
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: PUSH
57792: LD_VAR 0 4
57796: PUSH
57797: LD_INT 1
57799: PLUS
57800: ARRAY
57801: ST_TO_ADDR
57802: GO 58287
57804: LD_INT 16
57806: DOUBLE
57807: EQUAL
57808: IFTRUE 57866
57810: LD_INT 17
57812: DOUBLE
57813: EQUAL
57814: IFTRUE 57866
57816: LD_INT 18
57818: DOUBLE
57819: EQUAL
57820: IFTRUE 57866
57822: LD_INT 19
57824: DOUBLE
57825: EQUAL
57826: IFTRUE 57866
57828: LD_INT 22
57830: DOUBLE
57831: EQUAL
57832: IFTRUE 57866
57834: LD_INT 20
57836: DOUBLE
57837: EQUAL
57838: IFTRUE 57866
57840: LD_INT 21
57842: DOUBLE
57843: EQUAL
57844: IFTRUE 57866
57846: LD_INT 23
57848: DOUBLE
57849: EQUAL
57850: IFTRUE 57866
57852: LD_INT 24
57854: DOUBLE
57855: EQUAL
57856: IFTRUE 57866
57858: LD_INT 25
57860: DOUBLE
57861: EQUAL
57862: IFTRUE 57866
57864: GO 57922
57866: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57867: LD_ADDR_VAR 0 9
57871: PUSH
57872: LD_VAR 0 35
57876: PUSH
57877: LD_VAR 0 36
57881: PUSH
57882: LD_VAR 0 37
57886: PUSH
57887: LD_VAR 0 38
57891: PUSH
57892: LD_VAR 0 39
57896: PUSH
57897: LD_VAR 0 40
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: PUSH
57910: LD_VAR 0 4
57914: PUSH
57915: LD_INT 1
57917: PLUS
57918: ARRAY
57919: ST_TO_ADDR
57920: GO 58287
57922: LD_INT 6
57924: DOUBLE
57925: EQUAL
57926: IFTRUE 57978
57928: LD_INT 7
57930: DOUBLE
57931: EQUAL
57932: IFTRUE 57978
57934: LD_INT 8
57936: DOUBLE
57937: EQUAL
57938: IFTRUE 57978
57940: LD_INT 13
57942: DOUBLE
57943: EQUAL
57944: IFTRUE 57978
57946: LD_INT 12
57948: DOUBLE
57949: EQUAL
57950: IFTRUE 57978
57952: LD_INT 15
57954: DOUBLE
57955: EQUAL
57956: IFTRUE 57978
57958: LD_INT 11
57960: DOUBLE
57961: EQUAL
57962: IFTRUE 57978
57964: LD_INT 14
57966: DOUBLE
57967: EQUAL
57968: IFTRUE 57978
57970: LD_INT 10
57972: DOUBLE
57973: EQUAL
57974: IFTRUE 57978
57976: GO 58034
57978: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57979: LD_ADDR_VAR 0 9
57983: PUSH
57984: LD_VAR 0 41
57988: PUSH
57989: LD_VAR 0 42
57993: PUSH
57994: LD_VAR 0 43
57998: PUSH
57999: LD_VAR 0 44
58003: PUSH
58004: LD_VAR 0 45
58008: PUSH
58009: LD_VAR 0 46
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: PUSH
58022: LD_VAR 0 4
58026: PUSH
58027: LD_INT 1
58029: PLUS
58030: ARRAY
58031: ST_TO_ADDR
58032: GO 58287
58034: LD_INT 36
58036: DOUBLE
58037: EQUAL
58038: IFTRUE 58042
58040: GO 58098
58042: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58043: LD_ADDR_VAR 0 9
58047: PUSH
58048: LD_VAR 0 47
58052: PUSH
58053: LD_VAR 0 48
58057: PUSH
58058: LD_VAR 0 49
58062: PUSH
58063: LD_VAR 0 50
58067: PUSH
58068: LD_VAR 0 51
58072: PUSH
58073: LD_VAR 0 52
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: PUSH
58086: LD_VAR 0 4
58090: PUSH
58091: LD_INT 1
58093: PLUS
58094: ARRAY
58095: ST_TO_ADDR
58096: GO 58287
58098: LD_INT 4
58100: DOUBLE
58101: EQUAL
58102: IFTRUE 58124
58104: LD_INT 5
58106: DOUBLE
58107: EQUAL
58108: IFTRUE 58124
58110: LD_INT 34
58112: DOUBLE
58113: EQUAL
58114: IFTRUE 58124
58116: LD_INT 37
58118: DOUBLE
58119: EQUAL
58120: IFTRUE 58124
58122: GO 58180
58124: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58125: LD_ADDR_VAR 0 9
58129: PUSH
58130: LD_VAR 0 53
58134: PUSH
58135: LD_VAR 0 54
58139: PUSH
58140: LD_VAR 0 55
58144: PUSH
58145: LD_VAR 0 56
58149: PUSH
58150: LD_VAR 0 57
58154: PUSH
58155: LD_VAR 0 58
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: PUSH
58168: LD_VAR 0 4
58172: PUSH
58173: LD_INT 1
58175: PLUS
58176: ARRAY
58177: ST_TO_ADDR
58178: GO 58287
58180: LD_INT 31
58182: DOUBLE
58183: EQUAL
58184: IFTRUE 58230
58186: LD_INT 32
58188: DOUBLE
58189: EQUAL
58190: IFTRUE 58230
58192: LD_INT 33
58194: DOUBLE
58195: EQUAL
58196: IFTRUE 58230
58198: LD_INT 27
58200: DOUBLE
58201: EQUAL
58202: IFTRUE 58230
58204: LD_INT 26
58206: DOUBLE
58207: EQUAL
58208: IFTRUE 58230
58210: LD_INT 28
58212: DOUBLE
58213: EQUAL
58214: IFTRUE 58230
58216: LD_INT 29
58218: DOUBLE
58219: EQUAL
58220: IFTRUE 58230
58222: LD_INT 30
58224: DOUBLE
58225: EQUAL
58226: IFTRUE 58230
58228: GO 58286
58230: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58231: LD_ADDR_VAR 0 9
58235: PUSH
58236: LD_VAR 0 59
58240: PUSH
58241: LD_VAR 0 60
58245: PUSH
58246: LD_VAR 0 61
58250: PUSH
58251: LD_VAR 0 62
58255: PUSH
58256: LD_VAR 0 63
58260: PUSH
58261: LD_VAR 0 64
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: PUSH
58274: LD_VAR 0 4
58278: PUSH
58279: LD_INT 1
58281: PLUS
58282: ARRAY
58283: ST_TO_ADDR
58284: GO 58287
58286: POP
// temp_list2 = [ ] ;
58287: LD_ADDR_VAR 0 10
58291: PUSH
58292: EMPTY
58293: ST_TO_ADDR
// for i in temp_list do
58294: LD_ADDR_VAR 0 8
58298: PUSH
58299: LD_VAR 0 9
58303: PUSH
58304: FOR_IN
58305: IFFALSE 58357
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58307: LD_ADDR_VAR 0 10
58311: PUSH
58312: LD_VAR 0 10
58316: PUSH
58317: LD_VAR 0 8
58321: PUSH
58322: LD_INT 1
58324: ARRAY
58325: PUSH
58326: LD_VAR 0 2
58330: PLUS
58331: PUSH
58332: LD_VAR 0 8
58336: PUSH
58337: LD_INT 2
58339: ARRAY
58340: PUSH
58341: LD_VAR 0 3
58345: PLUS
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: EMPTY
58352: LIST
58353: ADD
58354: ST_TO_ADDR
58355: GO 58304
58357: POP
58358: POP
// result = temp_list2 ;
58359: LD_ADDR_VAR 0 7
58363: PUSH
58364: LD_VAR 0 10
58368: ST_TO_ADDR
// end ;
58369: LD_VAR 0 7
58373: RET
// export function EnemyInRange ( unit , dist ) ; begin
58374: LD_INT 0
58376: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58377: LD_ADDR_VAR 0 3
58381: PUSH
58382: LD_VAR 0 1
58386: PPUSH
58387: CALL_OW 255
58391: PPUSH
58392: LD_VAR 0 1
58396: PPUSH
58397: CALL_OW 250
58401: PPUSH
58402: LD_VAR 0 1
58406: PPUSH
58407: CALL_OW 251
58411: PPUSH
58412: LD_VAR 0 2
58416: PPUSH
58417: CALL 31776 0 4
58421: PUSH
58422: LD_INT 4
58424: ARRAY
58425: ST_TO_ADDR
// end ;
58426: LD_VAR 0 3
58430: RET
// export function PlayerSeeMe ( unit ) ; begin
58431: LD_INT 0
58433: PPUSH
// result := See ( your_side , unit ) ;
58434: LD_ADDR_VAR 0 2
58438: PUSH
58439: LD_OWVAR 2
58443: PPUSH
58444: LD_VAR 0 1
58448: PPUSH
58449: CALL_OW 292
58453: ST_TO_ADDR
// end ;
58454: LD_VAR 0 2
58458: RET
// export function ReverseDir ( unit ) ; begin
58459: LD_INT 0
58461: PPUSH
// if not unit then
58462: LD_VAR 0 1
58466: NOT
58467: IFFALSE 58471
// exit ;
58469: GO 58494
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58471: LD_ADDR_VAR 0 2
58475: PUSH
58476: LD_VAR 0 1
58480: PPUSH
58481: CALL_OW 254
58485: PUSH
58486: LD_INT 3
58488: PLUS
58489: PUSH
58490: LD_INT 6
58492: MOD
58493: ST_TO_ADDR
// end ;
58494: LD_VAR 0 2
58498: RET
// export function ReverseArray ( array ) ; var i ; begin
58499: LD_INT 0
58501: PPUSH
58502: PPUSH
// if not array then
58503: LD_VAR 0 1
58507: NOT
58508: IFFALSE 58512
// exit ;
58510: GO 58567
// result := [ ] ;
58512: LD_ADDR_VAR 0 2
58516: PUSH
58517: EMPTY
58518: ST_TO_ADDR
// for i := array downto 1 do
58519: LD_ADDR_VAR 0 3
58523: PUSH
58524: DOUBLE
58525: LD_VAR 0 1
58529: INC
58530: ST_TO_ADDR
58531: LD_INT 1
58533: PUSH
58534: FOR_DOWNTO
58535: IFFALSE 58565
// result := Join ( result , array [ i ] ) ;
58537: LD_ADDR_VAR 0 2
58541: PUSH
58542: LD_VAR 0 2
58546: PPUSH
58547: LD_VAR 0 1
58551: PUSH
58552: LD_VAR 0 3
58556: ARRAY
58557: PPUSH
58558: CALL 63211 0 2
58562: ST_TO_ADDR
58563: GO 58534
58565: POP
58566: POP
// end ;
58567: LD_VAR 0 2
58571: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58572: LD_INT 0
58574: PPUSH
58575: PPUSH
58576: PPUSH
58577: PPUSH
58578: PPUSH
58579: PPUSH
// if not unit or not hexes then
58580: LD_VAR 0 1
58584: NOT
58585: PUSH
58586: LD_VAR 0 2
58590: NOT
58591: OR
58592: IFFALSE 58596
// exit ;
58594: GO 58719
// dist := 9999 ;
58596: LD_ADDR_VAR 0 5
58600: PUSH
58601: LD_INT 9999
58603: ST_TO_ADDR
// for i = 1 to hexes do
58604: LD_ADDR_VAR 0 4
58608: PUSH
58609: DOUBLE
58610: LD_INT 1
58612: DEC
58613: ST_TO_ADDR
58614: LD_VAR 0 2
58618: PUSH
58619: FOR_TO
58620: IFFALSE 58707
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58622: LD_ADDR_VAR 0 6
58626: PUSH
58627: LD_VAR 0 1
58631: PPUSH
58632: LD_VAR 0 2
58636: PUSH
58637: LD_VAR 0 4
58641: ARRAY
58642: PUSH
58643: LD_INT 1
58645: ARRAY
58646: PPUSH
58647: LD_VAR 0 2
58651: PUSH
58652: LD_VAR 0 4
58656: ARRAY
58657: PUSH
58658: LD_INT 2
58660: ARRAY
58661: PPUSH
58662: CALL_OW 297
58666: ST_TO_ADDR
// if tdist < dist then
58667: LD_VAR 0 6
58671: PUSH
58672: LD_VAR 0 5
58676: LESS
58677: IFFALSE 58705
// begin hex := hexes [ i ] ;
58679: LD_ADDR_VAR 0 8
58683: PUSH
58684: LD_VAR 0 2
58688: PUSH
58689: LD_VAR 0 4
58693: ARRAY
58694: ST_TO_ADDR
// dist := tdist ;
58695: LD_ADDR_VAR 0 5
58699: PUSH
58700: LD_VAR 0 6
58704: ST_TO_ADDR
// end ; end ;
58705: GO 58619
58707: POP
58708: POP
// result := hex ;
58709: LD_ADDR_VAR 0 3
58713: PUSH
58714: LD_VAR 0 8
58718: ST_TO_ADDR
// end ;
58719: LD_VAR 0 3
58723: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58724: LD_INT 0
58726: PPUSH
58727: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58728: LD_VAR 0 1
58732: NOT
58733: PUSH
58734: LD_VAR 0 1
58738: PUSH
58739: LD_INT 21
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 23
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PPUSH
58763: CALL_OW 69
58767: IN
58768: NOT
58769: OR
58770: IFFALSE 58774
// exit ;
58772: GO 58821
// for i = 1 to 3 do
58774: LD_ADDR_VAR 0 3
58778: PUSH
58779: DOUBLE
58780: LD_INT 1
58782: DEC
58783: ST_TO_ADDR
58784: LD_INT 3
58786: PUSH
58787: FOR_TO
58788: IFFALSE 58819
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58790: LD_VAR 0 1
58794: PPUSH
58795: CALL_OW 250
58799: PPUSH
58800: LD_VAR 0 1
58804: PPUSH
58805: CALL_OW 251
58809: PPUSH
58810: LD_INT 1
58812: PPUSH
58813: CALL_OW 453
58817: GO 58787
58819: POP
58820: POP
// end ;
58821: LD_VAR 0 2
58825: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58826: LD_INT 0
58828: PPUSH
58829: PPUSH
58830: PPUSH
58831: PPUSH
58832: PPUSH
58833: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58834: LD_VAR 0 1
58838: NOT
58839: PUSH
58840: LD_VAR 0 2
58844: NOT
58845: OR
58846: PUSH
58847: LD_VAR 0 1
58851: PPUSH
58852: CALL_OW 314
58856: OR
58857: IFFALSE 58861
// exit ;
58859: GO 59328
// if GetLives ( i ) < 250 then
58861: LD_VAR 0 4
58865: PPUSH
58866: CALL_OW 256
58870: PUSH
58871: LD_INT 250
58873: LESS
58874: IFFALSE 58887
// begin ComAutodestruct ( i ) ;
58876: LD_VAR 0 4
58880: PPUSH
58881: CALL 58724 0 1
// exit ;
58885: GO 59328
// end ; x := GetX ( enemy_unit ) ;
58887: LD_ADDR_VAR 0 7
58891: PUSH
58892: LD_VAR 0 2
58896: PPUSH
58897: CALL_OW 250
58901: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58902: LD_ADDR_VAR 0 8
58906: PUSH
58907: LD_VAR 0 2
58911: PPUSH
58912: CALL_OW 251
58916: ST_TO_ADDR
// if not x or not y then
58917: LD_VAR 0 7
58921: NOT
58922: PUSH
58923: LD_VAR 0 8
58927: NOT
58928: OR
58929: IFFALSE 58933
// exit ;
58931: GO 59328
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58933: LD_ADDR_VAR 0 6
58937: PUSH
58938: LD_VAR 0 7
58942: PPUSH
58943: LD_INT 0
58945: PPUSH
58946: LD_INT 4
58948: PPUSH
58949: CALL_OW 272
58953: PUSH
58954: LD_VAR 0 8
58958: PPUSH
58959: LD_INT 0
58961: PPUSH
58962: LD_INT 4
58964: PPUSH
58965: CALL_OW 273
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_VAR 0 7
58978: PPUSH
58979: LD_INT 1
58981: PPUSH
58982: LD_INT 4
58984: PPUSH
58985: CALL_OW 272
58989: PUSH
58990: LD_VAR 0 8
58994: PPUSH
58995: LD_INT 1
58997: PPUSH
58998: LD_INT 4
59000: PPUSH
59001: CALL_OW 273
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_VAR 0 7
59014: PPUSH
59015: LD_INT 2
59017: PPUSH
59018: LD_INT 4
59020: PPUSH
59021: CALL_OW 272
59025: PUSH
59026: LD_VAR 0 8
59030: PPUSH
59031: LD_INT 2
59033: PPUSH
59034: LD_INT 4
59036: PPUSH
59037: CALL_OW 273
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_VAR 0 7
59050: PPUSH
59051: LD_INT 3
59053: PPUSH
59054: LD_INT 4
59056: PPUSH
59057: CALL_OW 272
59061: PUSH
59062: LD_VAR 0 8
59066: PPUSH
59067: LD_INT 3
59069: PPUSH
59070: LD_INT 4
59072: PPUSH
59073: CALL_OW 273
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_VAR 0 7
59086: PPUSH
59087: LD_INT 4
59089: PPUSH
59090: LD_INT 4
59092: PPUSH
59093: CALL_OW 272
59097: PUSH
59098: LD_VAR 0 8
59102: PPUSH
59103: LD_INT 4
59105: PPUSH
59106: LD_INT 4
59108: PPUSH
59109: CALL_OW 273
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_VAR 0 7
59122: PPUSH
59123: LD_INT 5
59125: PPUSH
59126: LD_INT 4
59128: PPUSH
59129: CALL_OW 272
59133: PUSH
59134: LD_VAR 0 8
59138: PPUSH
59139: LD_INT 5
59141: PPUSH
59142: LD_INT 4
59144: PPUSH
59145: CALL_OW 273
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: ST_TO_ADDR
// for i = tmp downto 1 do
59162: LD_ADDR_VAR 0 4
59166: PUSH
59167: DOUBLE
59168: LD_VAR 0 6
59172: INC
59173: ST_TO_ADDR
59174: LD_INT 1
59176: PUSH
59177: FOR_DOWNTO
59178: IFFALSE 59279
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59180: LD_VAR 0 6
59184: PUSH
59185: LD_VAR 0 4
59189: ARRAY
59190: PUSH
59191: LD_INT 1
59193: ARRAY
59194: PPUSH
59195: LD_VAR 0 6
59199: PUSH
59200: LD_VAR 0 4
59204: ARRAY
59205: PUSH
59206: LD_INT 2
59208: ARRAY
59209: PPUSH
59210: CALL_OW 488
59214: NOT
59215: PUSH
59216: LD_VAR 0 6
59220: PUSH
59221: LD_VAR 0 4
59225: ARRAY
59226: PUSH
59227: LD_INT 1
59229: ARRAY
59230: PPUSH
59231: LD_VAR 0 6
59235: PUSH
59236: LD_VAR 0 4
59240: ARRAY
59241: PUSH
59242: LD_INT 2
59244: ARRAY
59245: PPUSH
59246: CALL_OW 428
59250: PUSH
59251: LD_INT 0
59253: NONEQUAL
59254: OR
59255: IFFALSE 59277
// tmp := Delete ( tmp , i ) ;
59257: LD_ADDR_VAR 0 6
59261: PUSH
59262: LD_VAR 0 6
59266: PPUSH
59267: LD_VAR 0 4
59271: PPUSH
59272: CALL_OW 3
59276: ST_TO_ADDR
59277: GO 59177
59279: POP
59280: POP
// j := GetClosestHex ( unit , tmp ) ;
59281: LD_ADDR_VAR 0 5
59285: PUSH
59286: LD_VAR 0 1
59290: PPUSH
59291: LD_VAR 0 6
59295: PPUSH
59296: CALL 58572 0 2
59300: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59301: LD_VAR 0 1
59305: PPUSH
59306: LD_VAR 0 5
59310: PUSH
59311: LD_INT 1
59313: ARRAY
59314: PPUSH
59315: LD_VAR 0 5
59319: PUSH
59320: LD_INT 2
59322: ARRAY
59323: PPUSH
59324: CALL_OW 111
// end ;
59328: LD_VAR 0 3
59332: RET
// export function PrepareApemanSoldier ( ) ; begin
59333: LD_INT 0
59335: PPUSH
// uc_nation := 0 ;
59336: LD_ADDR_OWVAR 21
59340: PUSH
59341: LD_INT 0
59343: ST_TO_ADDR
// hc_sex := sex_male ;
59344: LD_ADDR_OWVAR 27
59348: PUSH
59349: LD_INT 1
59351: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59352: LD_ADDR_OWVAR 28
59356: PUSH
59357: LD_INT 15
59359: ST_TO_ADDR
// hc_gallery :=  ;
59360: LD_ADDR_OWVAR 33
59364: PUSH
59365: LD_STRING 
59367: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59368: LD_ADDR_OWVAR 31
59372: PUSH
59373: LD_INT 0
59375: PPUSH
59376: LD_INT 3
59378: PPUSH
59379: CALL_OW 12
59383: PUSH
59384: LD_INT 0
59386: PPUSH
59387: LD_INT 3
59389: PPUSH
59390: CALL_OW 12
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: ST_TO_ADDR
// end ;
59407: LD_VAR 0 1
59411: RET
// export function PrepareApemanEngineer ( ) ; begin
59412: LD_INT 0
59414: PPUSH
// uc_nation := 0 ;
59415: LD_ADDR_OWVAR 21
59419: PUSH
59420: LD_INT 0
59422: ST_TO_ADDR
// hc_sex := sex_male ;
59423: LD_ADDR_OWVAR 27
59427: PUSH
59428: LD_INT 1
59430: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59431: LD_ADDR_OWVAR 28
59435: PUSH
59436: LD_INT 16
59438: ST_TO_ADDR
// hc_gallery :=  ;
59439: LD_ADDR_OWVAR 33
59443: PUSH
59444: LD_STRING 
59446: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59447: LD_ADDR_OWVAR 31
59451: PUSH
59452: LD_INT 0
59454: PPUSH
59455: LD_INT 3
59457: PPUSH
59458: CALL_OW 12
59462: PUSH
59463: LD_INT 0
59465: PPUSH
59466: LD_INT 3
59468: PPUSH
59469: CALL_OW 12
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: ST_TO_ADDR
// end ;
59486: LD_VAR 0 1
59490: RET
// export function PrepareApeman ( agressivity ) ; begin
59491: LD_INT 0
59493: PPUSH
// uc_side := 0 ;
59494: LD_ADDR_OWVAR 20
59498: PUSH
59499: LD_INT 0
59501: ST_TO_ADDR
// uc_nation := 0 ;
59502: LD_ADDR_OWVAR 21
59506: PUSH
59507: LD_INT 0
59509: ST_TO_ADDR
// hc_sex := sex_male ;
59510: LD_ADDR_OWVAR 27
59514: PUSH
59515: LD_INT 1
59517: ST_TO_ADDR
// hc_class := class_apeman ;
59518: LD_ADDR_OWVAR 28
59522: PUSH
59523: LD_INT 12
59525: ST_TO_ADDR
// hc_gallery :=  ;
59526: LD_ADDR_OWVAR 33
59530: PUSH
59531: LD_STRING 
59533: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59534: LD_ADDR_OWVAR 35
59538: PUSH
59539: LD_VAR 0 1
59543: NEG
59544: PPUSH
59545: LD_VAR 0 1
59549: PPUSH
59550: CALL_OW 12
59554: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59555: LD_ADDR_OWVAR 31
59559: PUSH
59560: LD_INT 0
59562: PPUSH
59563: LD_INT 3
59565: PPUSH
59566: CALL_OW 12
59570: PUSH
59571: LD_INT 0
59573: PPUSH
59574: LD_INT 3
59576: PPUSH
59577: CALL_OW 12
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: ST_TO_ADDR
// end ;
59594: LD_VAR 0 2
59598: RET
// export function PrepareTiger ( agressivity ) ; begin
59599: LD_INT 0
59601: PPUSH
// uc_side := 0 ;
59602: LD_ADDR_OWVAR 20
59606: PUSH
59607: LD_INT 0
59609: ST_TO_ADDR
// uc_nation := 0 ;
59610: LD_ADDR_OWVAR 21
59614: PUSH
59615: LD_INT 0
59617: ST_TO_ADDR
// hc_class := class_tiger ;
59618: LD_ADDR_OWVAR 28
59622: PUSH
59623: LD_INT 14
59625: ST_TO_ADDR
// hc_gallery :=  ;
59626: LD_ADDR_OWVAR 33
59630: PUSH
59631: LD_STRING 
59633: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59634: LD_ADDR_OWVAR 35
59638: PUSH
59639: LD_VAR 0 1
59643: NEG
59644: PPUSH
59645: LD_VAR 0 1
59649: PPUSH
59650: CALL_OW 12
59654: ST_TO_ADDR
// end ;
59655: LD_VAR 0 2
59659: RET
// export function PrepareEnchidna ( ) ; begin
59660: LD_INT 0
59662: PPUSH
// uc_side := 0 ;
59663: LD_ADDR_OWVAR 20
59667: PUSH
59668: LD_INT 0
59670: ST_TO_ADDR
// uc_nation := 0 ;
59671: LD_ADDR_OWVAR 21
59675: PUSH
59676: LD_INT 0
59678: ST_TO_ADDR
// hc_class := class_baggie ;
59679: LD_ADDR_OWVAR 28
59683: PUSH
59684: LD_INT 13
59686: ST_TO_ADDR
// hc_gallery :=  ;
59687: LD_ADDR_OWVAR 33
59691: PUSH
59692: LD_STRING 
59694: ST_TO_ADDR
// end ;
59695: LD_VAR 0 1
59699: RET
// export function PrepareFrog ( ) ; begin
59700: LD_INT 0
59702: PPUSH
// uc_side := 0 ;
59703: LD_ADDR_OWVAR 20
59707: PUSH
59708: LD_INT 0
59710: ST_TO_ADDR
// uc_nation := 0 ;
59711: LD_ADDR_OWVAR 21
59715: PUSH
59716: LD_INT 0
59718: ST_TO_ADDR
// hc_class := class_frog ;
59719: LD_ADDR_OWVAR 28
59723: PUSH
59724: LD_INT 19
59726: ST_TO_ADDR
// hc_gallery :=  ;
59727: LD_ADDR_OWVAR 33
59731: PUSH
59732: LD_STRING 
59734: ST_TO_ADDR
// end ;
59735: LD_VAR 0 1
59739: RET
// export function PrepareFish ( ) ; begin
59740: LD_INT 0
59742: PPUSH
// uc_side := 0 ;
59743: LD_ADDR_OWVAR 20
59747: PUSH
59748: LD_INT 0
59750: ST_TO_ADDR
// uc_nation := 0 ;
59751: LD_ADDR_OWVAR 21
59755: PUSH
59756: LD_INT 0
59758: ST_TO_ADDR
// hc_class := class_fish ;
59759: LD_ADDR_OWVAR 28
59763: PUSH
59764: LD_INT 20
59766: ST_TO_ADDR
// hc_gallery :=  ;
59767: LD_ADDR_OWVAR 33
59771: PUSH
59772: LD_STRING 
59774: ST_TO_ADDR
// end ;
59775: LD_VAR 0 1
59779: RET
// export function PrepareBird ( ) ; begin
59780: LD_INT 0
59782: PPUSH
// uc_side := 0 ;
59783: LD_ADDR_OWVAR 20
59787: PUSH
59788: LD_INT 0
59790: ST_TO_ADDR
// uc_nation := 0 ;
59791: LD_ADDR_OWVAR 21
59795: PUSH
59796: LD_INT 0
59798: ST_TO_ADDR
// hc_class := class_phororhacos ;
59799: LD_ADDR_OWVAR 28
59803: PUSH
59804: LD_INT 18
59806: ST_TO_ADDR
// hc_gallery :=  ;
59807: LD_ADDR_OWVAR 33
59811: PUSH
59812: LD_STRING 
59814: ST_TO_ADDR
// end ;
59815: LD_VAR 0 1
59819: RET
// export function PrepareHorse ( ) ; begin
59820: LD_INT 0
59822: PPUSH
// uc_side := 0 ;
59823: LD_ADDR_OWVAR 20
59827: PUSH
59828: LD_INT 0
59830: ST_TO_ADDR
// uc_nation := 0 ;
59831: LD_ADDR_OWVAR 21
59835: PUSH
59836: LD_INT 0
59838: ST_TO_ADDR
// hc_class := class_horse ;
59839: LD_ADDR_OWVAR 28
59843: PUSH
59844: LD_INT 21
59846: ST_TO_ADDR
// hc_gallery :=  ;
59847: LD_ADDR_OWVAR 33
59851: PUSH
59852: LD_STRING 
59854: ST_TO_ADDR
// end ;
59855: LD_VAR 0 1
59859: RET
// export function PrepareMastodont ( ) ; begin
59860: LD_INT 0
59862: PPUSH
// uc_side := 0 ;
59863: LD_ADDR_OWVAR 20
59867: PUSH
59868: LD_INT 0
59870: ST_TO_ADDR
// uc_nation := 0 ;
59871: LD_ADDR_OWVAR 21
59875: PUSH
59876: LD_INT 0
59878: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59879: LD_ADDR_OWVAR 37
59883: PUSH
59884: LD_INT 31
59886: ST_TO_ADDR
// vc_control := control_rider ;
59887: LD_ADDR_OWVAR 38
59891: PUSH
59892: LD_INT 4
59894: ST_TO_ADDR
// end ;
59895: LD_VAR 0 1
59899: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59900: LD_INT 0
59902: PPUSH
59903: PPUSH
59904: PPUSH
// uc_side = 0 ;
59905: LD_ADDR_OWVAR 20
59909: PUSH
59910: LD_INT 0
59912: ST_TO_ADDR
// uc_nation = 0 ;
59913: LD_ADDR_OWVAR 21
59917: PUSH
59918: LD_INT 0
59920: ST_TO_ADDR
// InitHc_All ( ) ;
59921: CALL_OW 584
// InitVc ;
59925: CALL_OW 20
// if mastodonts then
59929: LD_VAR 0 6
59933: IFFALSE 60000
// for i = 1 to mastodonts do
59935: LD_ADDR_VAR 0 11
59939: PUSH
59940: DOUBLE
59941: LD_INT 1
59943: DEC
59944: ST_TO_ADDR
59945: LD_VAR 0 6
59949: PUSH
59950: FOR_TO
59951: IFFALSE 59998
// begin vc_chassis := 31 ;
59953: LD_ADDR_OWVAR 37
59957: PUSH
59958: LD_INT 31
59960: ST_TO_ADDR
// vc_control := control_rider ;
59961: LD_ADDR_OWVAR 38
59965: PUSH
59966: LD_INT 4
59968: ST_TO_ADDR
// animal := CreateVehicle ;
59969: LD_ADDR_VAR 0 12
59973: PUSH
59974: CALL_OW 45
59978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59979: LD_VAR 0 12
59983: PPUSH
59984: LD_VAR 0 8
59988: PPUSH
59989: LD_INT 0
59991: PPUSH
59992: CALL 62128 0 3
// end ;
59996: GO 59950
59998: POP
59999: POP
// if horses then
60000: LD_VAR 0 5
60004: IFFALSE 60071
// for i = 1 to horses do
60006: LD_ADDR_VAR 0 11
60010: PUSH
60011: DOUBLE
60012: LD_INT 1
60014: DEC
60015: ST_TO_ADDR
60016: LD_VAR 0 5
60020: PUSH
60021: FOR_TO
60022: IFFALSE 60069
// begin hc_class := 21 ;
60024: LD_ADDR_OWVAR 28
60028: PUSH
60029: LD_INT 21
60031: ST_TO_ADDR
// hc_gallery :=  ;
60032: LD_ADDR_OWVAR 33
60036: PUSH
60037: LD_STRING 
60039: ST_TO_ADDR
// animal := CreateHuman ;
60040: LD_ADDR_VAR 0 12
60044: PUSH
60045: CALL_OW 44
60049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60050: LD_VAR 0 12
60054: PPUSH
60055: LD_VAR 0 8
60059: PPUSH
60060: LD_INT 0
60062: PPUSH
60063: CALL 62128 0 3
// end ;
60067: GO 60021
60069: POP
60070: POP
// if birds then
60071: LD_VAR 0 1
60075: IFFALSE 60142
// for i = 1 to birds do
60077: LD_ADDR_VAR 0 11
60081: PUSH
60082: DOUBLE
60083: LD_INT 1
60085: DEC
60086: ST_TO_ADDR
60087: LD_VAR 0 1
60091: PUSH
60092: FOR_TO
60093: IFFALSE 60140
// begin hc_class = 18 ;
60095: LD_ADDR_OWVAR 28
60099: PUSH
60100: LD_INT 18
60102: ST_TO_ADDR
// hc_gallery =  ;
60103: LD_ADDR_OWVAR 33
60107: PUSH
60108: LD_STRING 
60110: ST_TO_ADDR
// animal := CreateHuman ;
60111: LD_ADDR_VAR 0 12
60115: PUSH
60116: CALL_OW 44
60120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60121: LD_VAR 0 12
60125: PPUSH
60126: LD_VAR 0 8
60130: PPUSH
60131: LD_INT 0
60133: PPUSH
60134: CALL 62128 0 3
// end ;
60138: GO 60092
60140: POP
60141: POP
// if tigers then
60142: LD_VAR 0 2
60146: IFFALSE 60230
// for i = 1 to tigers do
60148: LD_ADDR_VAR 0 11
60152: PUSH
60153: DOUBLE
60154: LD_INT 1
60156: DEC
60157: ST_TO_ADDR
60158: LD_VAR 0 2
60162: PUSH
60163: FOR_TO
60164: IFFALSE 60228
// begin hc_class = class_tiger ;
60166: LD_ADDR_OWVAR 28
60170: PUSH
60171: LD_INT 14
60173: ST_TO_ADDR
// hc_gallery =  ;
60174: LD_ADDR_OWVAR 33
60178: PUSH
60179: LD_STRING 
60181: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60182: LD_ADDR_OWVAR 35
60186: PUSH
60187: LD_INT 7
60189: NEG
60190: PPUSH
60191: LD_INT 7
60193: PPUSH
60194: CALL_OW 12
60198: ST_TO_ADDR
// animal := CreateHuman ;
60199: LD_ADDR_VAR 0 12
60203: PUSH
60204: CALL_OW 44
60208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60209: LD_VAR 0 12
60213: PPUSH
60214: LD_VAR 0 8
60218: PPUSH
60219: LD_INT 0
60221: PPUSH
60222: CALL 62128 0 3
// end ;
60226: GO 60163
60228: POP
60229: POP
// if apemans then
60230: LD_VAR 0 3
60234: IFFALSE 60357
// for i = 1 to apemans do
60236: LD_ADDR_VAR 0 11
60240: PUSH
60241: DOUBLE
60242: LD_INT 1
60244: DEC
60245: ST_TO_ADDR
60246: LD_VAR 0 3
60250: PUSH
60251: FOR_TO
60252: IFFALSE 60355
// begin hc_class = class_apeman ;
60254: LD_ADDR_OWVAR 28
60258: PUSH
60259: LD_INT 12
60261: ST_TO_ADDR
// hc_gallery =  ;
60262: LD_ADDR_OWVAR 33
60266: PUSH
60267: LD_STRING 
60269: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60270: LD_ADDR_OWVAR 35
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PPUSH
60279: LD_INT 2
60281: PPUSH
60282: CALL_OW 12
60286: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60287: LD_ADDR_OWVAR 31
60291: PUSH
60292: LD_INT 1
60294: PPUSH
60295: LD_INT 3
60297: PPUSH
60298: CALL_OW 12
60302: PUSH
60303: LD_INT 1
60305: PPUSH
60306: LD_INT 3
60308: PPUSH
60309: CALL_OW 12
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: ST_TO_ADDR
// animal := CreateHuman ;
60326: LD_ADDR_VAR 0 12
60330: PUSH
60331: CALL_OW 44
60335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60336: LD_VAR 0 12
60340: PPUSH
60341: LD_VAR 0 8
60345: PPUSH
60346: LD_INT 0
60348: PPUSH
60349: CALL 62128 0 3
// end ;
60353: GO 60251
60355: POP
60356: POP
// if enchidnas then
60357: LD_VAR 0 4
60361: IFFALSE 60428
// for i = 1 to enchidnas do
60363: LD_ADDR_VAR 0 11
60367: PUSH
60368: DOUBLE
60369: LD_INT 1
60371: DEC
60372: ST_TO_ADDR
60373: LD_VAR 0 4
60377: PUSH
60378: FOR_TO
60379: IFFALSE 60426
// begin hc_class = 13 ;
60381: LD_ADDR_OWVAR 28
60385: PUSH
60386: LD_INT 13
60388: ST_TO_ADDR
// hc_gallery =  ;
60389: LD_ADDR_OWVAR 33
60393: PUSH
60394: LD_STRING 
60396: ST_TO_ADDR
// animal := CreateHuman ;
60397: LD_ADDR_VAR 0 12
60401: PUSH
60402: CALL_OW 44
60406: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60407: LD_VAR 0 12
60411: PPUSH
60412: LD_VAR 0 8
60416: PPUSH
60417: LD_INT 0
60419: PPUSH
60420: CALL 62128 0 3
// end ;
60424: GO 60378
60426: POP
60427: POP
// if fishes then
60428: LD_VAR 0 7
60432: IFFALSE 60499
// for i = 1 to fishes do
60434: LD_ADDR_VAR 0 11
60438: PUSH
60439: DOUBLE
60440: LD_INT 1
60442: DEC
60443: ST_TO_ADDR
60444: LD_VAR 0 7
60448: PUSH
60449: FOR_TO
60450: IFFALSE 60497
// begin hc_class = 20 ;
60452: LD_ADDR_OWVAR 28
60456: PUSH
60457: LD_INT 20
60459: ST_TO_ADDR
// hc_gallery =  ;
60460: LD_ADDR_OWVAR 33
60464: PUSH
60465: LD_STRING 
60467: ST_TO_ADDR
// animal := CreateHuman ;
60468: LD_ADDR_VAR 0 12
60472: PUSH
60473: CALL_OW 44
60477: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60478: LD_VAR 0 12
60482: PPUSH
60483: LD_VAR 0 9
60487: PPUSH
60488: LD_INT 0
60490: PPUSH
60491: CALL 62128 0 3
// end ;
60495: GO 60449
60497: POP
60498: POP
// end ;
60499: LD_VAR 0 10
60503: RET
// export function WantHeal ( sci , unit ) ; begin
60504: LD_INT 0
60506: PPUSH
// if GetTaskList ( sci ) > 0 then
60507: LD_VAR 0 1
60511: PPUSH
60512: CALL_OW 437
60516: PUSH
60517: LD_INT 0
60519: GREATER
60520: IFFALSE 60590
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60522: LD_VAR 0 1
60526: PPUSH
60527: CALL_OW 437
60531: PUSH
60532: LD_INT 1
60534: ARRAY
60535: PUSH
60536: LD_INT 1
60538: ARRAY
60539: PUSH
60540: LD_STRING l
60542: EQUAL
60543: PUSH
60544: LD_VAR 0 1
60548: PPUSH
60549: CALL_OW 437
60553: PUSH
60554: LD_INT 1
60556: ARRAY
60557: PUSH
60558: LD_INT 4
60560: ARRAY
60561: PUSH
60562: LD_VAR 0 2
60566: EQUAL
60567: AND
60568: IFFALSE 60580
// result := true else
60570: LD_ADDR_VAR 0 3
60574: PUSH
60575: LD_INT 1
60577: ST_TO_ADDR
60578: GO 60588
// result := false ;
60580: LD_ADDR_VAR 0 3
60584: PUSH
60585: LD_INT 0
60587: ST_TO_ADDR
// end else
60588: GO 60598
// result := false ;
60590: LD_ADDR_VAR 0 3
60594: PUSH
60595: LD_INT 0
60597: ST_TO_ADDR
// end ;
60598: LD_VAR 0 3
60602: RET
// export function HealTarget ( sci ) ; begin
60603: LD_INT 0
60605: PPUSH
// if not sci then
60606: LD_VAR 0 1
60610: NOT
60611: IFFALSE 60615
// exit ;
60613: GO 60680
// result := 0 ;
60615: LD_ADDR_VAR 0 2
60619: PUSH
60620: LD_INT 0
60622: ST_TO_ADDR
// if GetTaskList ( sci ) then
60623: LD_VAR 0 1
60627: PPUSH
60628: CALL_OW 437
60632: IFFALSE 60680
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60634: LD_VAR 0 1
60638: PPUSH
60639: CALL_OW 437
60643: PUSH
60644: LD_INT 1
60646: ARRAY
60647: PUSH
60648: LD_INT 1
60650: ARRAY
60651: PUSH
60652: LD_STRING l
60654: EQUAL
60655: IFFALSE 60680
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60657: LD_ADDR_VAR 0 2
60661: PUSH
60662: LD_VAR 0 1
60666: PPUSH
60667: CALL_OW 437
60671: PUSH
60672: LD_INT 1
60674: ARRAY
60675: PUSH
60676: LD_INT 4
60678: ARRAY
60679: ST_TO_ADDR
// end ;
60680: LD_VAR 0 2
60684: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60685: LD_INT 0
60687: PPUSH
60688: PPUSH
60689: PPUSH
60690: PPUSH
// if not base_units then
60691: LD_VAR 0 1
60695: NOT
60696: IFFALSE 60700
// exit ;
60698: GO 60787
// result := false ;
60700: LD_ADDR_VAR 0 2
60704: PUSH
60705: LD_INT 0
60707: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60708: LD_ADDR_VAR 0 5
60712: PUSH
60713: LD_VAR 0 1
60717: PPUSH
60718: LD_INT 21
60720: PUSH
60721: LD_INT 3
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PPUSH
60728: CALL_OW 72
60732: ST_TO_ADDR
// if not tmp then
60733: LD_VAR 0 5
60737: NOT
60738: IFFALSE 60742
// exit ;
60740: GO 60787
// for i in tmp do
60742: LD_ADDR_VAR 0 3
60746: PUSH
60747: LD_VAR 0 5
60751: PUSH
60752: FOR_IN
60753: IFFALSE 60785
// begin result := EnemyInRange ( i , 22 ) ;
60755: LD_ADDR_VAR 0 2
60759: PUSH
60760: LD_VAR 0 3
60764: PPUSH
60765: LD_INT 22
60767: PPUSH
60768: CALL 58374 0 2
60772: ST_TO_ADDR
// if result then
60773: LD_VAR 0 2
60777: IFFALSE 60783
// exit ;
60779: POP
60780: POP
60781: GO 60787
// end ;
60783: GO 60752
60785: POP
60786: POP
// end ;
60787: LD_VAR 0 2
60791: RET
// export function FilterByTag ( units , tag ) ; begin
60792: LD_INT 0
60794: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60795: LD_ADDR_VAR 0 3
60799: PUSH
60800: LD_VAR 0 1
60804: PPUSH
60805: LD_INT 120
60807: PUSH
60808: LD_VAR 0 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PPUSH
60817: CALL_OW 72
60821: ST_TO_ADDR
// end ;
60822: LD_VAR 0 3
60826: RET
// export function IsDriver ( un ) ; begin
60827: LD_INT 0
60829: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60830: LD_ADDR_VAR 0 2
60834: PUSH
60835: LD_VAR 0 1
60839: PUSH
60840: LD_INT 55
60842: PUSH
60843: EMPTY
60844: LIST
60845: PPUSH
60846: CALL_OW 69
60850: IN
60851: ST_TO_ADDR
// end ;
60852: LD_VAR 0 2
60856: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60857: LD_INT 0
60859: PPUSH
60860: PPUSH
// list := [ ] ;
60861: LD_ADDR_VAR 0 5
60865: PUSH
60866: EMPTY
60867: ST_TO_ADDR
// case d of 0 :
60868: LD_VAR 0 3
60872: PUSH
60873: LD_INT 0
60875: DOUBLE
60876: EQUAL
60877: IFTRUE 60881
60879: GO 61014
60881: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60882: LD_ADDR_VAR 0 5
60886: PUSH
60887: LD_VAR 0 1
60891: PUSH
60892: LD_INT 4
60894: MINUS
60895: PUSH
60896: LD_VAR 0 2
60900: PUSH
60901: LD_INT 4
60903: MINUS
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: LIST
60912: PUSH
60913: LD_VAR 0 1
60917: PUSH
60918: LD_INT 3
60920: MINUS
60921: PUSH
60922: LD_VAR 0 2
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: LIST
60934: PUSH
60935: LD_VAR 0 1
60939: PUSH
60940: LD_INT 4
60942: PLUS
60943: PUSH
60944: LD_VAR 0 2
60948: PUSH
60949: LD_INT 4
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: LIST
60956: PUSH
60957: LD_VAR 0 1
60961: PUSH
60962: LD_INT 3
60964: PLUS
60965: PUSH
60966: LD_VAR 0 2
60970: PUSH
60971: LD_INT 3
60973: PLUS
60974: PUSH
60975: LD_INT 5
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: LIST
60982: PUSH
60983: LD_VAR 0 1
60987: PUSH
60988: LD_VAR 0 2
60992: PUSH
60993: LD_INT 4
60995: PLUS
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: LIST
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: ST_TO_ADDR
// end ; 1 :
61012: GO 61712
61014: LD_INT 1
61016: DOUBLE
61017: EQUAL
61018: IFTRUE 61022
61020: GO 61155
61022: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61023: LD_ADDR_VAR 0 5
61027: PUSH
61028: LD_VAR 0 1
61032: PUSH
61033: LD_VAR 0 2
61037: PUSH
61038: LD_INT 4
61040: MINUS
61041: PUSH
61042: LD_INT 3
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: LIST
61049: PUSH
61050: LD_VAR 0 1
61054: PUSH
61055: LD_INT 3
61057: MINUS
61058: PUSH
61059: LD_VAR 0 2
61063: PUSH
61064: LD_INT 3
61066: MINUS
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: LIST
61075: PUSH
61076: LD_VAR 0 1
61080: PUSH
61081: LD_INT 4
61083: MINUS
61084: PUSH
61085: LD_VAR 0 2
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: LIST
61097: PUSH
61098: LD_VAR 0 1
61102: PUSH
61103: LD_VAR 0 2
61107: PUSH
61108: LD_INT 3
61110: PLUS
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: LIST
61119: PUSH
61120: LD_VAR 0 1
61124: PUSH
61125: LD_INT 4
61127: PLUS
61128: PUSH
61129: LD_VAR 0 2
61133: PUSH
61134: LD_INT 4
61136: PLUS
61137: PUSH
61138: LD_INT 5
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: ST_TO_ADDR
// end ; 2 :
61153: GO 61712
61155: LD_INT 2
61157: DOUBLE
61158: EQUAL
61159: IFTRUE 61163
61161: GO 61292
61163: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61164: LD_ADDR_VAR 0 5
61168: PUSH
61169: LD_VAR 0 1
61173: PUSH
61174: LD_VAR 0 2
61178: PUSH
61179: LD_INT 3
61181: MINUS
61182: PUSH
61183: LD_INT 3
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: LIST
61190: PUSH
61191: LD_VAR 0 1
61195: PUSH
61196: LD_INT 4
61198: PLUS
61199: PUSH
61200: LD_VAR 0 2
61204: PUSH
61205: LD_INT 4
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: LIST
61212: PUSH
61213: LD_VAR 0 1
61217: PUSH
61218: LD_VAR 0 2
61222: PUSH
61223: LD_INT 4
61225: PLUS
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: LIST
61234: PUSH
61235: LD_VAR 0 1
61239: PUSH
61240: LD_INT 3
61242: MINUS
61243: PUSH
61244: LD_VAR 0 2
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: LIST
61256: PUSH
61257: LD_VAR 0 1
61261: PUSH
61262: LD_INT 4
61264: MINUS
61265: PUSH
61266: LD_VAR 0 2
61270: PUSH
61271: LD_INT 4
61273: MINUS
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: LIST
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: ST_TO_ADDR
// end ; 3 :
61290: GO 61712
61292: LD_INT 3
61294: DOUBLE
61295: EQUAL
61296: IFTRUE 61300
61298: GO 61433
61300: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61301: LD_ADDR_VAR 0 5
61305: PUSH
61306: LD_VAR 0 1
61310: PUSH
61311: LD_INT 3
61313: PLUS
61314: PUSH
61315: LD_VAR 0 2
61319: PUSH
61320: LD_INT 4
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: LIST
61327: PUSH
61328: LD_VAR 0 1
61332: PUSH
61333: LD_INT 4
61335: PLUS
61336: PUSH
61337: LD_VAR 0 2
61341: PUSH
61342: LD_INT 4
61344: PLUS
61345: PUSH
61346: LD_INT 5
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: LIST
61353: PUSH
61354: LD_VAR 0 1
61358: PUSH
61359: LD_INT 4
61361: MINUS
61362: PUSH
61363: LD_VAR 0 2
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: LIST
61375: PUSH
61376: LD_VAR 0 1
61380: PUSH
61381: LD_VAR 0 2
61385: PUSH
61386: LD_INT 4
61388: MINUS
61389: PUSH
61390: LD_INT 3
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: LIST
61397: PUSH
61398: LD_VAR 0 1
61402: PUSH
61403: LD_INT 3
61405: MINUS
61406: PUSH
61407: LD_VAR 0 2
61411: PUSH
61412: LD_INT 3
61414: MINUS
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: LIST
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: ST_TO_ADDR
// end ; 4 :
61431: GO 61712
61433: LD_INT 4
61435: DOUBLE
61436: EQUAL
61437: IFTRUE 61441
61439: GO 61574
61441: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61442: LD_ADDR_VAR 0 5
61446: PUSH
61447: LD_VAR 0 1
61451: PUSH
61452: LD_VAR 0 2
61456: PUSH
61457: LD_INT 4
61459: PLUS
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: LIST
61468: PUSH
61469: LD_VAR 0 1
61473: PUSH
61474: LD_INT 3
61476: PLUS
61477: PUSH
61478: LD_VAR 0 2
61482: PUSH
61483: LD_INT 3
61485: PLUS
61486: PUSH
61487: LD_INT 5
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: LIST
61494: PUSH
61495: LD_VAR 0 1
61499: PUSH
61500: LD_INT 4
61502: PLUS
61503: PUSH
61504: LD_VAR 0 2
61508: PUSH
61509: LD_INT 4
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: LIST
61516: PUSH
61517: LD_VAR 0 1
61521: PUSH
61522: LD_VAR 0 2
61526: PUSH
61527: LD_INT 3
61529: MINUS
61530: PUSH
61531: LD_INT 3
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: LIST
61538: PUSH
61539: LD_VAR 0 1
61543: PUSH
61544: LD_INT 4
61546: MINUS
61547: PUSH
61548: LD_VAR 0 2
61552: PUSH
61553: LD_INT 4
61555: MINUS
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: LIST
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: ST_TO_ADDR
// end ; 5 :
61572: GO 61712
61574: LD_INT 5
61576: DOUBLE
61577: EQUAL
61578: IFTRUE 61582
61580: GO 61711
61582: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61583: LD_ADDR_VAR 0 5
61587: PUSH
61588: LD_VAR 0 1
61592: PUSH
61593: LD_INT 4
61595: MINUS
61596: PUSH
61597: LD_VAR 0 2
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: PUSH
61610: LD_VAR 0 1
61614: PUSH
61615: LD_VAR 0 2
61619: PUSH
61620: LD_INT 4
61622: MINUS
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: LIST
61631: PUSH
61632: LD_VAR 0 1
61636: PUSH
61637: LD_INT 4
61639: PLUS
61640: PUSH
61641: LD_VAR 0 2
61645: PUSH
61646: LD_INT 4
61648: PLUS
61649: PUSH
61650: LD_INT 5
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: PUSH
61658: LD_VAR 0 1
61662: PUSH
61663: LD_INT 3
61665: PLUS
61666: PUSH
61667: LD_VAR 0 2
61671: PUSH
61672: LD_INT 4
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: LIST
61679: PUSH
61680: LD_VAR 0 1
61684: PUSH
61685: LD_VAR 0 2
61689: PUSH
61690: LD_INT 3
61692: PLUS
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: LIST
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: ST_TO_ADDR
// end ; end ;
61709: GO 61712
61711: POP
// result := list ;
61712: LD_ADDR_VAR 0 4
61716: PUSH
61717: LD_VAR 0 5
61721: ST_TO_ADDR
// end ;
61722: LD_VAR 0 4
61726: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61727: LD_INT 0
61729: PPUSH
61730: PPUSH
61731: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61732: LD_VAR 0 1
61736: NOT
61737: PUSH
61738: LD_VAR 0 2
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: LD_INT 2
61748: PUSH
61749: LD_INT 3
61751: PUSH
61752: LD_INT 4
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: IN
61761: NOT
61762: OR
61763: IFFALSE 61767
// exit ;
61765: GO 61850
// tmp := [ ] ;
61767: LD_ADDR_VAR 0 5
61771: PUSH
61772: EMPTY
61773: ST_TO_ADDR
// for i in units do
61774: LD_ADDR_VAR 0 4
61778: PUSH
61779: LD_VAR 0 1
61783: PUSH
61784: FOR_IN
61785: IFFALSE 61819
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61787: LD_ADDR_VAR 0 5
61791: PUSH
61792: LD_VAR 0 5
61796: PPUSH
61797: LD_VAR 0 4
61801: PPUSH
61802: LD_VAR 0 2
61806: PPUSH
61807: CALL_OW 259
61811: PPUSH
61812: CALL 63211 0 2
61816: ST_TO_ADDR
61817: GO 61784
61819: POP
61820: POP
// if not tmp then
61821: LD_VAR 0 5
61825: NOT
61826: IFFALSE 61830
// exit ;
61828: GO 61850
// result := SortListByListDesc ( units , tmp ) ;
61830: LD_ADDR_VAR 0 3
61834: PUSH
61835: LD_VAR 0 1
61839: PPUSH
61840: LD_VAR 0 5
61844: PPUSH
61845: CALL_OW 77
61849: ST_TO_ADDR
// end ;
61850: LD_VAR 0 3
61854: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61855: LD_INT 0
61857: PPUSH
61858: PPUSH
61859: PPUSH
// result := false ;
61860: LD_ADDR_VAR 0 3
61864: PUSH
61865: LD_INT 0
61867: ST_TO_ADDR
// if not building then
61868: LD_VAR 0 2
61872: NOT
61873: IFFALSE 61877
// exit ;
61875: GO 62015
// x := GetX ( building ) ;
61877: LD_ADDR_VAR 0 4
61881: PUSH
61882: LD_VAR 0 2
61886: PPUSH
61887: CALL_OW 250
61891: ST_TO_ADDR
// y := GetY ( building ) ;
61892: LD_ADDR_VAR 0 5
61896: PUSH
61897: LD_VAR 0 2
61901: PPUSH
61902: CALL_OW 251
61906: ST_TO_ADDR
// if not x or not y then
61907: LD_VAR 0 4
61911: NOT
61912: PUSH
61913: LD_VAR 0 5
61917: NOT
61918: OR
61919: IFFALSE 61923
// exit ;
61921: GO 62015
// if GetTaskList ( unit ) then
61923: LD_VAR 0 1
61927: PPUSH
61928: CALL_OW 437
61932: IFFALSE 62015
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61934: LD_STRING e
61936: PUSH
61937: LD_VAR 0 1
61941: PPUSH
61942: CALL_OW 437
61946: PUSH
61947: LD_INT 1
61949: ARRAY
61950: PUSH
61951: LD_INT 1
61953: ARRAY
61954: EQUAL
61955: PUSH
61956: LD_VAR 0 4
61960: PUSH
61961: LD_VAR 0 1
61965: PPUSH
61966: CALL_OW 437
61970: PUSH
61971: LD_INT 1
61973: ARRAY
61974: PUSH
61975: LD_INT 2
61977: ARRAY
61978: EQUAL
61979: AND
61980: PUSH
61981: LD_VAR 0 5
61985: PUSH
61986: LD_VAR 0 1
61990: PPUSH
61991: CALL_OW 437
61995: PUSH
61996: LD_INT 1
61998: ARRAY
61999: PUSH
62000: LD_INT 3
62002: ARRAY
62003: EQUAL
62004: AND
62005: IFFALSE 62015
// result := true end ;
62007: LD_ADDR_VAR 0 3
62011: PUSH
62012: LD_INT 1
62014: ST_TO_ADDR
// end ;
62015: LD_VAR 0 3
62019: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62020: LD_INT 0
62022: PPUSH
// result := false ;
62023: LD_ADDR_VAR 0 4
62027: PUSH
62028: LD_INT 0
62030: ST_TO_ADDR
// if GetTaskList ( unit ) then
62031: LD_VAR 0 1
62035: PPUSH
62036: CALL_OW 437
62040: IFFALSE 62123
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62042: LD_STRING M
62044: PUSH
62045: LD_VAR 0 1
62049: PPUSH
62050: CALL_OW 437
62054: PUSH
62055: LD_INT 1
62057: ARRAY
62058: PUSH
62059: LD_INT 1
62061: ARRAY
62062: EQUAL
62063: PUSH
62064: LD_VAR 0 2
62068: PUSH
62069: LD_VAR 0 1
62073: PPUSH
62074: CALL_OW 437
62078: PUSH
62079: LD_INT 1
62081: ARRAY
62082: PUSH
62083: LD_INT 2
62085: ARRAY
62086: EQUAL
62087: AND
62088: PUSH
62089: LD_VAR 0 3
62093: PUSH
62094: LD_VAR 0 1
62098: PPUSH
62099: CALL_OW 437
62103: PUSH
62104: LD_INT 1
62106: ARRAY
62107: PUSH
62108: LD_INT 3
62110: ARRAY
62111: EQUAL
62112: AND
62113: IFFALSE 62123
// result := true ;
62115: LD_ADDR_VAR 0 4
62119: PUSH
62120: LD_INT 1
62122: ST_TO_ADDR
// end ; end ;
62123: LD_VAR 0 4
62127: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62128: LD_INT 0
62130: PPUSH
62131: PPUSH
62132: PPUSH
62133: PPUSH
// if not unit or not area then
62134: LD_VAR 0 1
62138: NOT
62139: PUSH
62140: LD_VAR 0 2
62144: NOT
62145: OR
62146: IFFALSE 62150
// exit ;
62148: GO 62314
// tmp := AreaToList ( area , i ) ;
62150: LD_ADDR_VAR 0 6
62154: PUSH
62155: LD_VAR 0 2
62159: PPUSH
62160: LD_VAR 0 5
62164: PPUSH
62165: CALL_OW 517
62169: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62170: LD_ADDR_VAR 0 5
62174: PUSH
62175: DOUBLE
62176: LD_INT 1
62178: DEC
62179: ST_TO_ADDR
62180: LD_VAR 0 6
62184: PUSH
62185: LD_INT 1
62187: ARRAY
62188: PUSH
62189: FOR_TO
62190: IFFALSE 62312
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62192: LD_ADDR_VAR 0 7
62196: PUSH
62197: LD_VAR 0 6
62201: PUSH
62202: LD_INT 1
62204: ARRAY
62205: PUSH
62206: LD_VAR 0 5
62210: ARRAY
62211: PUSH
62212: LD_VAR 0 6
62216: PUSH
62217: LD_INT 2
62219: ARRAY
62220: PUSH
62221: LD_VAR 0 5
62225: ARRAY
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62231: LD_VAR 0 7
62235: PUSH
62236: LD_INT 1
62238: ARRAY
62239: PPUSH
62240: LD_VAR 0 7
62244: PUSH
62245: LD_INT 2
62247: ARRAY
62248: PPUSH
62249: CALL_OW 428
62253: PUSH
62254: LD_INT 0
62256: EQUAL
62257: IFFALSE 62310
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62259: LD_VAR 0 1
62263: PPUSH
62264: LD_VAR 0 7
62268: PUSH
62269: LD_INT 1
62271: ARRAY
62272: PPUSH
62273: LD_VAR 0 7
62277: PUSH
62278: LD_INT 2
62280: ARRAY
62281: PPUSH
62282: LD_VAR 0 3
62286: PPUSH
62287: CALL_OW 48
// result := IsPlaced ( unit ) ;
62291: LD_ADDR_VAR 0 4
62295: PUSH
62296: LD_VAR 0 1
62300: PPUSH
62301: CALL_OW 305
62305: ST_TO_ADDR
// exit ;
62306: POP
62307: POP
62308: GO 62314
// end ; end ;
62310: GO 62189
62312: POP
62313: POP
// end ;
62314: LD_VAR 0 4
62318: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62319: LD_INT 0
62321: PPUSH
62322: PPUSH
62323: PPUSH
// if not side or side > 8 then
62324: LD_VAR 0 1
62328: NOT
62329: PUSH
62330: LD_VAR 0 1
62334: PUSH
62335: LD_INT 8
62337: GREATER
62338: OR
62339: IFFALSE 62343
// exit ;
62341: GO 62530
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62343: LD_ADDR_VAR 0 4
62347: PUSH
62348: LD_INT 22
62350: PUSH
62351: LD_VAR 0 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 21
62362: PUSH
62363: LD_INT 3
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PPUSH
62374: CALL_OW 69
62378: ST_TO_ADDR
// if not tmp then
62379: LD_VAR 0 4
62383: NOT
62384: IFFALSE 62388
// exit ;
62386: GO 62530
// enable_addtolog := true ;
62388: LD_ADDR_OWVAR 81
62392: PUSH
62393: LD_INT 1
62395: ST_TO_ADDR
// AddToLog ( [ ) ;
62396: LD_STRING [
62398: PPUSH
62399: CALL_OW 561
// for i in tmp do
62403: LD_ADDR_VAR 0 3
62407: PUSH
62408: LD_VAR 0 4
62412: PUSH
62413: FOR_IN
62414: IFFALSE 62521
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62416: LD_STRING [
62418: PUSH
62419: LD_VAR 0 3
62423: PPUSH
62424: CALL_OW 266
62428: STR
62429: PUSH
62430: LD_STRING , 
62432: STR
62433: PUSH
62434: LD_VAR 0 3
62438: PPUSH
62439: CALL_OW 250
62443: STR
62444: PUSH
62445: LD_STRING , 
62447: STR
62448: PUSH
62449: LD_VAR 0 3
62453: PPUSH
62454: CALL_OW 251
62458: STR
62459: PUSH
62460: LD_STRING , 
62462: STR
62463: PUSH
62464: LD_VAR 0 3
62468: PPUSH
62469: CALL_OW 254
62473: STR
62474: PUSH
62475: LD_STRING , 
62477: STR
62478: PUSH
62479: LD_VAR 0 3
62483: PPUSH
62484: LD_INT 1
62486: PPUSH
62487: CALL_OW 268
62491: STR
62492: PUSH
62493: LD_STRING , 
62495: STR
62496: PUSH
62497: LD_VAR 0 3
62501: PPUSH
62502: LD_INT 2
62504: PPUSH
62505: CALL_OW 268
62509: STR
62510: PUSH
62511: LD_STRING ],
62513: STR
62514: PPUSH
62515: CALL_OW 561
// end ;
62519: GO 62413
62521: POP
62522: POP
// AddToLog ( ]; ) ;
62523: LD_STRING ];
62525: PPUSH
62526: CALL_OW 561
// end ;
62530: LD_VAR 0 2
62534: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62535: LD_INT 0
62537: PPUSH
62538: PPUSH
62539: PPUSH
62540: PPUSH
62541: PPUSH
// if not area or not rate or not max then
62542: LD_VAR 0 1
62546: NOT
62547: PUSH
62548: LD_VAR 0 2
62552: NOT
62553: OR
62554: PUSH
62555: LD_VAR 0 4
62559: NOT
62560: OR
62561: IFFALSE 62565
// exit ;
62563: GO 62754
// while 1 do
62565: LD_INT 1
62567: IFFALSE 62754
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62569: LD_ADDR_VAR 0 9
62573: PUSH
62574: LD_VAR 0 1
62578: PPUSH
62579: LD_INT 1
62581: PPUSH
62582: CALL_OW 287
62586: PUSH
62587: LD_INT 10
62589: MUL
62590: ST_TO_ADDR
// r := rate / 10 ;
62591: LD_ADDR_VAR 0 7
62595: PUSH
62596: LD_VAR 0 2
62600: PUSH
62601: LD_INT 10
62603: DIVREAL
62604: ST_TO_ADDR
// time := 1 1$00 ;
62605: LD_ADDR_VAR 0 8
62609: PUSH
62610: LD_INT 2100
62612: ST_TO_ADDR
// if amount < min then
62613: LD_VAR 0 9
62617: PUSH
62618: LD_VAR 0 3
62622: LESS
62623: IFFALSE 62641
// r := r * 2 else
62625: LD_ADDR_VAR 0 7
62629: PUSH
62630: LD_VAR 0 7
62634: PUSH
62635: LD_INT 2
62637: MUL
62638: ST_TO_ADDR
62639: GO 62667
// if amount > max then
62641: LD_VAR 0 9
62645: PUSH
62646: LD_VAR 0 4
62650: GREATER
62651: IFFALSE 62667
// r := r / 2 ;
62653: LD_ADDR_VAR 0 7
62657: PUSH
62658: LD_VAR 0 7
62662: PUSH
62663: LD_INT 2
62665: DIVREAL
62666: ST_TO_ADDR
// time := time / r ;
62667: LD_ADDR_VAR 0 8
62671: PUSH
62672: LD_VAR 0 8
62676: PUSH
62677: LD_VAR 0 7
62681: DIVREAL
62682: ST_TO_ADDR
// if time < 0 then
62683: LD_VAR 0 8
62687: PUSH
62688: LD_INT 0
62690: LESS
62691: IFFALSE 62708
// time := time * - 1 ;
62693: LD_ADDR_VAR 0 8
62697: PUSH
62698: LD_VAR 0 8
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: MUL
62707: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62708: LD_VAR 0 8
62712: PUSH
62713: LD_INT 35
62715: PPUSH
62716: LD_INT 875
62718: PPUSH
62719: CALL_OW 12
62723: PLUS
62724: PPUSH
62725: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62729: LD_INT 1
62731: PPUSH
62732: LD_INT 5
62734: PPUSH
62735: CALL_OW 12
62739: PPUSH
62740: LD_VAR 0 1
62744: PPUSH
62745: LD_INT 1
62747: PPUSH
62748: CALL_OW 55
// end ;
62752: GO 62565
// end ;
62754: LD_VAR 0 5
62758: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62759: LD_INT 0
62761: PPUSH
62762: PPUSH
62763: PPUSH
62764: PPUSH
62765: PPUSH
62766: PPUSH
62767: PPUSH
62768: PPUSH
// if not turrets or not factories then
62769: LD_VAR 0 1
62773: NOT
62774: PUSH
62775: LD_VAR 0 2
62779: NOT
62780: OR
62781: IFFALSE 62785
// exit ;
62783: GO 63092
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62785: LD_ADDR_VAR 0 10
62789: PUSH
62790: LD_INT 5
62792: PUSH
62793: LD_INT 6
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: LD_INT 4
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: LD_INT 5
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 24
62827: PUSH
62828: LD_INT 25
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 23
62837: PUSH
62838: LD_INT 27
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 42
62851: PUSH
62852: LD_INT 43
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 44
62861: PUSH
62862: LD_INT 46
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 45
62871: PUSH
62872: LD_INT 47
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: LIST
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: LIST
62888: ST_TO_ADDR
// result := [ ] ;
62889: LD_ADDR_VAR 0 3
62893: PUSH
62894: EMPTY
62895: ST_TO_ADDR
// for i in turrets do
62896: LD_ADDR_VAR 0 4
62900: PUSH
62901: LD_VAR 0 1
62905: PUSH
62906: FOR_IN
62907: IFFALSE 63090
// begin nat := GetNation ( i ) ;
62909: LD_ADDR_VAR 0 7
62913: PUSH
62914: LD_VAR 0 4
62918: PPUSH
62919: CALL_OW 248
62923: ST_TO_ADDR
// weapon := 0 ;
62924: LD_ADDR_VAR 0 8
62928: PUSH
62929: LD_INT 0
62931: ST_TO_ADDR
// if not nat then
62932: LD_VAR 0 7
62936: NOT
62937: IFFALSE 62941
// continue ;
62939: GO 62906
// for j in list [ nat ] do
62941: LD_ADDR_VAR 0 5
62945: PUSH
62946: LD_VAR 0 10
62950: PUSH
62951: LD_VAR 0 7
62955: ARRAY
62956: PUSH
62957: FOR_IN
62958: IFFALSE 62999
// if GetBWeapon ( i ) = j [ 1 ] then
62960: LD_VAR 0 4
62964: PPUSH
62965: CALL_OW 269
62969: PUSH
62970: LD_VAR 0 5
62974: PUSH
62975: LD_INT 1
62977: ARRAY
62978: EQUAL
62979: IFFALSE 62997
// begin weapon := j [ 2 ] ;
62981: LD_ADDR_VAR 0 8
62985: PUSH
62986: LD_VAR 0 5
62990: PUSH
62991: LD_INT 2
62993: ARRAY
62994: ST_TO_ADDR
// break ;
62995: GO 62999
// end ;
62997: GO 62957
62999: POP
63000: POP
// if not weapon then
63001: LD_VAR 0 8
63005: NOT
63006: IFFALSE 63010
// continue ;
63008: GO 62906
// for k in factories do
63010: LD_ADDR_VAR 0 6
63014: PUSH
63015: LD_VAR 0 2
63019: PUSH
63020: FOR_IN
63021: IFFALSE 63086
// begin weapons := AvailableWeaponList ( k ) ;
63023: LD_ADDR_VAR 0 9
63027: PUSH
63028: LD_VAR 0 6
63032: PPUSH
63033: CALL_OW 478
63037: ST_TO_ADDR
// if not weapons then
63038: LD_VAR 0 9
63042: NOT
63043: IFFALSE 63047
// continue ;
63045: GO 63020
// if weapon in weapons then
63047: LD_VAR 0 8
63051: PUSH
63052: LD_VAR 0 9
63056: IN
63057: IFFALSE 63084
// begin result := [ i , weapon ] ;
63059: LD_ADDR_VAR 0 3
63063: PUSH
63064: LD_VAR 0 4
63068: PUSH
63069: LD_VAR 0 8
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: ST_TO_ADDR
// exit ;
63078: POP
63079: POP
63080: POP
63081: POP
63082: GO 63092
// end ; end ;
63084: GO 63020
63086: POP
63087: POP
// end ;
63088: GO 62906
63090: POP
63091: POP
// end ;
63092: LD_VAR 0 3
63096: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63097: LD_INT 0
63099: PPUSH
// if not side or side > 8 then
63100: LD_VAR 0 3
63104: NOT
63105: PUSH
63106: LD_VAR 0 3
63110: PUSH
63111: LD_INT 8
63113: GREATER
63114: OR
63115: IFFALSE 63119
// exit ;
63117: GO 63178
// if not range then
63119: LD_VAR 0 4
63123: NOT
63124: IFFALSE 63135
// range := - 12 ;
63126: LD_ADDR_VAR 0 4
63130: PUSH
63131: LD_INT 12
63133: NEG
63134: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63135: LD_VAR 0 1
63139: PPUSH
63140: LD_VAR 0 2
63144: PPUSH
63145: LD_VAR 0 3
63149: PPUSH
63150: LD_VAR 0 4
63154: PPUSH
63155: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63159: LD_VAR 0 1
63163: PPUSH
63164: LD_VAR 0 2
63168: PPUSH
63169: LD_VAR 0 3
63173: PPUSH
63174: CALL_OW 331
// end ;
63178: LD_VAR 0 5
63182: RET
// export function Video ( mode ) ; begin
63183: LD_INT 0
63185: PPUSH
// ingame_video = mode ;
63186: LD_ADDR_OWVAR 52
63190: PUSH
63191: LD_VAR 0 1
63195: ST_TO_ADDR
// interface_hidden = mode ;
63196: LD_ADDR_OWVAR 54
63200: PUSH
63201: LD_VAR 0 1
63205: ST_TO_ADDR
// end ;
63206: LD_VAR 0 2
63210: RET
// export function Join ( array , element ) ; begin
63211: LD_INT 0
63213: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63214: LD_ADDR_VAR 0 3
63218: PUSH
63219: LD_VAR 0 1
63223: PPUSH
63224: LD_VAR 0 1
63228: PUSH
63229: LD_INT 1
63231: PLUS
63232: PPUSH
63233: LD_VAR 0 2
63237: PPUSH
63238: CALL_OW 1
63242: ST_TO_ADDR
// end ;
63243: LD_VAR 0 3
63247: RET
// export function JoinUnion ( array , element ) ; begin
63248: LD_INT 0
63250: PPUSH
// result := array union element ;
63251: LD_ADDR_VAR 0 3
63255: PUSH
63256: LD_VAR 0 1
63260: PUSH
63261: LD_VAR 0 2
63265: UNION
63266: ST_TO_ADDR
// end ;
63267: LD_VAR 0 3
63271: RET
// export function GetBehemoths ( side ) ; begin
63272: LD_INT 0
63274: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63275: LD_ADDR_VAR 0 2
63279: PUSH
63280: LD_INT 22
63282: PUSH
63283: LD_VAR 0 1
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 31
63294: PUSH
63295: LD_INT 25
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PPUSH
63306: CALL_OW 69
63310: ST_TO_ADDR
// end ;
63311: LD_VAR 0 2
63315: RET
// export function Shuffle ( array ) ; var i , index ; begin
63316: LD_INT 0
63318: PPUSH
63319: PPUSH
63320: PPUSH
// result := [ ] ;
63321: LD_ADDR_VAR 0 2
63325: PUSH
63326: EMPTY
63327: ST_TO_ADDR
// if not array then
63328: LD_VAR 0 1
63332: NOT
63333: IFFALSE 63337
// exit ;
63335: GO 63436
// Randomize ;
63337: CALL_OW 10
// for i = array downto 1 do
63341: LD_ADDR_VAR 0 3
63345: PUSH
63346: DOUBLE
63347: LD_VAR 0 1
63351: INC
63352: ST_TO_ADDR
63353: LD_INT 1
63355: PUSH
63356: FOR_DOWNTO
63357: IFFALSE 63434
// begin index := rand ( 1 , array ) ;
63359: LD_ADDR_VAR 0 4
63363: PUSH
63364: LD_INT 1
63366: PPUSH
63367: LD_VAR 0 1
63371: PPUSH
63372: CALL_OW 12
63376: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63377: LD_ADDR_VAR 0 2
63381: PUSH
63382: LD_VAR 0 2
63386: PPUSH
63387: LD_VAR 0 2
63391: PUSH
63392: LD_INT 1
63394: PLUS
63395: PPUSH
63396: LD_VAR 0 1
63400: PUSH
63401: LD_VAR 0 4
63405: ARRAY
63406: PPUSH
63407: CALL_OW 2
63411: ST_TO_ADDR
// array := Delete ( array , index ) ;
63412: LD_ADDR_VAR 0 1
63416: PUSH
63417: LD_VAR 0 1
63421: PPUSH
63422: LD_VAR 0 4
63426: PPUSH
63427: CALL_OW 3
63431: ST_TO_ADDR
// end ;
63432: GO 63356
63434: POP
63435: POP
// end ;
63436: LD_VAR 0 2
63440: RET
// export function GetBaseMaterials ( base ) ; begin
63441: LD_INT 0
63443: PPUSH
// result := [ 0 , 0 , 0 ] ;
63444: LD_ADDR_VAR 0 2
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: LIST
63462: ST_TO_ADDR
// if not base then
63463: LD_VAR 0 1
63467: NOT
63468: IFFALSE 63472
// exit ;
63470: GO 63521
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63472: LD_ADDR_VAR 0 2
63476: PUSH
63477: LD_VAR 0 1
63481: PPUSH
63482: LD_INT 1
63484: PPUSH
63485: CALL_OW 275
63489: PUSH
63490: LD_VAR 0 1
63494: PPUSH
63495: LD_INT 2
63497: PPUSH
63498: CALL_OW 275
63502: PUSH
63503: LD_VAR 0 1
63507: PPUSH
63508: LD_INT 3
63510: PPUSH
63511: CALL_OW 275
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: LIST
63520: ST_TO_ADDR
// end ;
63521: LD_VAR 0 2
63525: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63526: LD_INT 0
63528: PPUSH
63529: PPUSH
// result := array ;
63530: LD_ADDR_VAR 0 3
63534: PUSH
63535: LD_VAR 0 1
63539: ST_TO_ADDR
// if size >= result then
63540: LD_VAR 0 2
63544: PUSH
63545: LD_VAR 0 3
63549: GREATEREQUAL
63550: IFFALSE 63554
// exit ;
63552: GO 63604
// if size then
63554: LD_VAR 0 2
63558: IFFALSE 63604
// for i := array downto size do
63560: LD_ADDR_VAR 0 4
63564: PUSH
63565: DOUBLE
63566: LD_VAR 0 1
63570: INC
63571: ST_TO_ADDR
63572: LD_VAR 0 2
63576: PUSH
63577: FOR_DOWNTO
63578: IFFALSE 63602
// result := Delete ( result , result ) ;
63580: LD_ADDR_VAR 0 3
63584: PUSH
63585: LD_VAR 0 3
63589: PPUSH
63590: LD_VAR 0 3
63594: PPUSH
63595: CALL_OW 3
63599: ST_TO_ADDR
63600: GO 63577
63602: POP
63603: POP
// end ;
63604: LD_VAR 0 3
63608: RET
// export function ComExit ( unit ) ; var tmp ; begin
63609: LD_INT 0
63611: PPUSH
63612: PPUSH
// if not IsInUnit ( unit ) then
63613: LD_VAR 0 1
63617: PPUSH
63618: CALL_OW 310
63622: NOT
63623: IFFALSE 63627
// exit ;
63625: GO 63687
// tmp := IsInUnit ( unit ) ;
63627: LD_ADDR_VAR 0 3
63631: PUSH
63632: LD_VAR 0 1
63636: PPUSH
63637: CALL_OW 310
63641: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63642: LD_VAR 0 3
63646: PPUSH
63647: CALL_OW 247
63651: PUSH
63652: LD_INT 2
63654: EQUAL
63655: IFFALSE 63668
// ComExitVehicle ( unit ) else
63657: LD_VAR 0 1
63661: PPUSH
63662: CALL_OW 121
63666: GO 63677
// ComExitBuilding ( unit ) ;
63668: LD_VAR 0 1
63672: PPUSH
63673: CALL_OW 122
// result := tmp ;
63677: LD_ADDR_VAR 0 2
63681: PUSH
63682: LD_VAR 0 3
63686: ST_TO_ADDR
// end ;
63687: LD_VAR 0 2
63691: RET
// export function ComExitAll ( units ) ; var i ; begin
63692: LD_INT 0
63694: PPUSH
63695: PPUSH
// if not units then
63696: LD_VAR 0 1
63700: NOT
63701: IFFALSE 63705
// exit ;
63703: GO 63731
// for i in units do
63705: LD_ADDR_VAR 0 3
63709: PUSH
63710: LD_VAR 0 1
63714: PUSH
63715: FOR_IN
63716: IFFALSE 63729
// ComExit ( i ) ;
63718: LD_VAR 0 3
63722: PPUSH
63723: CALL 63609 0 1
63727: GO 63715
63729: POP
63730: POP
// end ;
63731: LD_VAR 0 2
63735: RET
// export function ResetHc ; begin
63736: LD_INT 0
63738: PPUSH
// InitHc ;
63739: CALL_OW 19
// hc_importance := 0 ;
63743: LD_ADDR_OWVAR 32
63747: PUSH
63748: LD_INT 0
63750: ST_TO_ADDR
// end ;
63751: LD_VAR 0 1
63755: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63756: LD_INT 0
63758: PPUSH
63759: PPUSH
63760: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63761: LD_ADDR_VAR 0 6
63765: PUSH
63766: LD_VAR 0 1
63770: PUSH
63771: LD_VAR 0 3
63775: PLUS
63776: PUSH
63777: LD_INT 2
63779: DIV
63780: ST_TO_ADDR
// if _x < 0 then
63781: LD_VAR 0 6
63785: PUSH
63786: LD_INT 0
63788: LESS
63789: IFFALSE 63806
// _x := _x * - 1 ;
63791: LD_ADDR_VAR 0 6
63795: PUSH
63796: LD_VAR 0 6
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: MUL
63805: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63806: LD_ADDR_VAR 0 7
63810: PUSH
63811: LD_VAR 0 2
63815: PUSH
63816: LD_VAR 0 4
63820: PLUS
63821: PUSH
63822: LD_INT 2
63824: DIV
63825: ST_TO_ADDR
// if _y < 0 then
63826: LD_VAR 0 7
63830: PUSH
63831: LD_INT 0
63833: LESS
63834: IFFALSE 63851
// _y := _y * - 1 ;
63836: LD_ADDR_VAR 0 7
63840: PUSH
63841: LD_VAR 0 7
63845: PUSH
63846: LD_INT 1
63848: NEG
63849: MUL
63850: ST_TO_ADDR
// result := [ _x , _y ] ;
63851: LD_ADDR_VAR 0 5
63855: PUSH
63856: LD_VAR 0 6
63860: PUSH
63861: LD_VAR 0 7
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: ST_TO_ADDR
// end ;
63870: LD_VAR 0 5
63874: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63875: LD_INT 0
63877: PPUSH
63878: PPUSH
63879: PPUSH
63880: PPUSH
// task := GetTaskList ( unit ) ;
63881: LD_ADDR_VAR 0 7
63885: PUSH
63886: LD_VAR 0 1
63890: PPUSH
63891: CALL_OW 437
63895: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63896: LD_VAR 0 7
63900: NOT
63901: PUSH
63902: LD_VAR 0 1
63906: PPUSH
63907: LD_VAR 0 2
63911: PPUSH
63912: CALL_OW 308
63916: NOT
63917: AND
63918: IFFALSE 63922
// exit ;
63920: GO 64040
// if IsInArea ( unit , area ) then
63922: LD_VAR 0 1
63926: PPUSH
63927: LD_VAR 0 2
63931: PPUSH
63932: CALL_OW 308
63936: IFFALSE 63954
// begin ComMoveToArea ( unit , goAway ) ;
63938: LD_VAR 0 1
63942: PPUSH
63943: LD_VAR 0 3
63947: PPUSH
63948: CALL_OW 113
// exit ;
63952: GO 64040
// end ; if task [ 1 ] [ 1 ] <> M then
63954: LD_VAR 0 7
63958: PUSH
63959: LD_INT 1
63961: ARRAY
63962: PUSH
63963: LD_INT 1
63965: ARRAY
63966: PUSH
63967: LD_STRING M
63969: NONEQUAL
63970: IFFALSE 63974
// exit ;
63972: GO 64040
// x := task [ 1 ] [ 2 ] ;
63974: LD_ADDR_VAR 0 5
63978: PUSH
63979: LD_VAR 0 7
63983: PUSH
63984: LD_INT 1
63986: ARRAY
63987: PUSH
63988: LD_INT 2
63990: ARRAY
63991: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63992: LD_ADDR_VAR 0 6
63996: PUSH
63997: LD_VAR 0 7
64001: PUSH
64002: LD_INT 1
64004: ARRAY
64005: PUSH
64006: LD_INT 3
64008: ARRAY
64009: ST_TO_ADDR
// if InArea ( x , y , area ) then
64010: LD_VAR 0 5
64014: PPUSH
64015: LD_VAR 0 6
64019: PPUSH
64020: LD_VAR 0 2
64024: PPUSH
64025: CALL_OW 309
64029: IFFALSE 64040
// ComStop ( unit ) ;
64031: LD_VAR 0 1
64035: PPUSH
64036: CALL_OW 141
// end ;
64040: LD_VAR 0 4
64044: RET
// export function Abs ( value ) ; begin
64045: LD_INT 0
64047: PPUSH
// result := value ;
64048: LD_ADDR_VAR 0 2
64052: PUSH
64053: LD_VAR 0 1
64057: ST_TO_ADDR
// if value < 0 then
64058: LD_VAR 0 1
64062: PUSH
64063: LD_INT 0
64065: LESS
64066: IFFALSE 64083
// result := value * - 1 ;
64068: LD_ADDR_VAR 0 2
64072: PUSH
64073: LD_VAR 0 1
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: MUL
64082: ST_TO_ADDR
// end ;
64083: LD_VAR 0 2
64087: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64088: LD_INT 0
64090: PPUSH
64091: PPUSH
64092: PPUSH
64093: PPUSH
64094: PPUSH
64095: PPUSH
64096: PPUSH
64097: PPUSH
// if not unit or not building then
64098: LD_VAR 0 1
64102: NOT
64103: PUSH
64104: LD_VAR 0 2
64108: NOT
64109: OR
64110: IFFALSE 64114
// exit ;
64112: GO 64340
// x := GetX ( building ) ;
64114: LD_ADDR_VAR 0 4
64118: PUSH
64119: LD_VAR 0 2
64123: PPUSH
64124: CALL_OW 250
64128: ST_TO_ADDR
// y := GetY ( building ) ;
64129: LD_ADDR_VAR 0 6
64133: PUSH
64134: LD_VAR 0 2
64138: PPUSH
64139: CALL_OW 251
64143: ST_TO_ADDR
// d := GetDir ( building ) ;
64144: LD_ADDR_VAR 0 8
64148: PUSH
64149: LD_VAR 0 2
64153: PPUSH
64154: CALL_OW 254
64158: ST_TO_ADDR
// r := 4 ;
64159: LD_ADDR_VAR 0 9
64163: PUSH
64164: LD_INT 4
64166: ST_TO_ADDR
// for i := 1 to 5 do
64167: LD_ADDR_VAR 0 10
64171: PUSH
64172: DOUBLE
64173: LD_INT 1
64175: DEC
64176: ST_TO_ADDR
64177: LD_INT 5
64179: PUSH
64180: FOR_TO
64181: IFFALSE 64338
// begin _x := ShiftX ( x , d , r + i ) ;
64183: LD_ADDR_VAR 0 5
64187: PUSH
64188: LD_VAR 0 4
64192: PPUSH
64193: LD_VAR 0 8
64197: PPUSH
64198: LD_VAR 0 9
64202: PUSH
64203: LD_VAR 0 10
64207: PLUS
64208: PPUSH
64209: CALL_OW 272
64213: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64214: LD_ADDR_VAR 0 7
64218: PUSH
64219: LD_VAR 0 6
64223: PPUSH
64224: LD_VAR 0 8
64228: PPUSH
64229: LD_VAR 0 9
64233: PUSH
64234: LD_VAR 0 10
64238: PLUS
64239: PPUSH
64240: CALL_OW 273
64244: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64245: LD_VAR 0 5
64249: PPUSH
64250: LD_VAR 0 7
64254: PPUSH
64255: CALL_OW 488
64259: PUSH
64260: LD_VAR 0 5
64264: PPUSH
64265: LD_VAR 0 7
64269: PPUSH
64270: CALL_OW 428
64274: PPUSH
64275: CALL_OW 247
64279: PUSH
64280: LD_INT 3
64282: PUSH
64283: LD_INT 2
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: IN
64290: NOT
64291: AND
64292: IFFALSE 64336
// begin ComMoveXY ( unit , _x , _y ) ;
64294: LD_VAR 0 1
64298: PPUSH
64299: LD_VAR 0 5
64303: PPUSH
64304: LD_VAR 0 7
64308: PPUSH
64309: CALL_OW 111
// result := [ _x , _y ] ;
64313: LD_ADDR_VAR 0 3
64317: PUSH
64318: LD_VAR 0 5
64322: PUSH
64323: LD_VAR 0 7
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: ST_TO_ADDR
// exit ;
64332: POP
64333: POP
64334: GO 64340
// end ; end ;
64336: GO 64180
64338: POP
64339: POP
// end ;
64340: LD_VAR 0 3
64344: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64345: LD_INT 0
64347: PPUSH
64348: PPUSH
64349: PPUSH
// result := 0 ;
64350: LD_ADDR_VAR 0 3
64354: PUSH
64355: LD_INT 0
64357: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64358: LD_VAR 0 1
64362: PUSH
64363: LD_INT 0
64365: LESS
64366: PUSH
64367: LD_VAR 0 1
64371: PUSH
64372: LD_INT 8
64374: GREATER
64375: OR
64376: PUSH
64377: LD_VAR 0 2
64381: PUSH
64382: LD_INT 0
64384: LESS
64385: OR
64386: PUSH
64387: LD_VAR 0 2
64391: PUSH
64392: LD_INT 8
64394: GREATER
64395: OR
64396: IFFALSE 64400
// exit ;
64398: GO 64475
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64400: LD_ADDR_VAR 0 4
64404: PUSH
64405: LD_INT 22
64407: PUSH
64408: LD_VAR 0 2
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PPUSH
64417: CALL_OW 69
64421: PUSH
64422: FOR_IN
64423: IFFALSE 64473
// begin un := UnitShoot ( i ) ;
64425: LD_ADDR_VAR 0 5
64429: PUSH
64430: LD_VAR 0 4
64434: PPUSH
64435: CALL_OW 504
64439: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64440: LD_VAR 0 5
64444: PPUSH
64445: CALL_OW 255
64449: PUSH
64450: LD_VAR 0 1
64454: EQUAL
64455: IFFALSE 64471
// begin result := un ;
64457: LD_ADDR_VAR 0 3
64461: PUSH
64462: LD_VAR 0 5
64466: ST_TO_ADDR
// exit ;
64467: POP
64468: POP
64469: GO 64475
// end ; end ;
64471: GO 64422
64473: POP
64474: POP
// end ;
64475: LD_VAR 0 3
64479: RET
// export function GetCargoBay ( units ) ; begin
64480: LD_INT 0
64482: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64483: LD_ADDR_VAR 0 2
64487: PUSH
64488: LD_VAR 0 1
64492: PPUSH
64493: LD_INT 2
64495: PUSH
64496: LD_INT 34
64498: PUSH
64499: LD_INT 12
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 34
64508: PUSH
64509: LD_INT 51
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 34
64518: PUSH
64519: LD_INT 32
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 34
64528: PUSH
64529: LD_INT 89
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: PPUSH
64543: CALL_OW 72
64547: ST_TO_ADDR
// end ;
64548: LD_VAR 0 2
64552: RET
// export function Negate ( value ) ; begin
64553: LD_INT 0
64555: PPUSH
// result := not value ;
64556: LD_ADDR_VAR 0 2
64560: PUSH
64561: LD_VAR 0 1
64565: NOT
64566: ST_TO_ADDR
// end ;
64567: LD_VAR 0 2
64571: RET
// export function Inc ( value ) ; begin
64572: LD_INT 0
64574: PPUSH
// result := value + 1 ;
64575: LD_ADDR_VAR 0 2
64579: PUSH
64580: LD_VAR 0 1
64584: PUSH
64585: LD_INT 1
64587: PLUS
64588: ST_TO_ADDR
// end ;
64589: LD_VAR 0 2
64593: RET
// export function Dec ( value ) ; begin
64594: LD_INT 0
64596: PPUSH
// result := value - 1 ;
64597: LD_ADDR_VAR 0 2
64601: PUSH
64602: LD_VAR 0 1
64606: PUSH
64607: LD_INT 1
64609: MINUS
64610: ST_TO_ADDR
// end ;
64611: LD_VAR 0 2
64615: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64616: LD_INT 0
64618: PPUSH
64619: PPUSH
64620: PPUSH
64621: PPUSH
64622: PPUSH
64623: PPUSH
64624: PPUSH
64625: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64626: LD_VAR 0 1
64630: PPUSH
64631: LD_VAR 0 2
64635: PPUSH
64636: CALL_OW 488
64640: NOT
64641: PUSH
64642: LD_VAR 0 3
64646: PPUSH
64647: LD_VAR 0 4
64651: PPUSH
64652: CALL_OW 488
64656: NOT
64657: OR
64658: IFFALSE 64671
// begin result := - 1 ;
64660: LD_ADDR_VAR 0 5
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: ST_TO_ADDR
// exit ;
64669: GO 64906
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64671: LD_ADDR_VAR 0 12
64675: PUSH
64676: LD_VAR 0 1
64680: PPUSH
64681: LD_VAR 0 2
64685: PPUSH
64686: LD_VAR 0 3
64690: PPUSH
64691: LD_VAR 0 4
64695: PPUSH
64696: CALL 63756 0 4
64700: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64701: LD_ADDR_VAR 0 11
64705: PUSH
64706: LD_VAR 0 1
64710: PPUSH
64711: LD_VAR 0 2
64715: PPUSH
64716: LD_VAR 0 12
64720: PUSH
64721: LD_INT 1
64723: ARRAY
64724: PPUSH
64725: LD_VAR 0 12
64729: PUSH
64730: LD_INT 2
64732: ARRAY
64733: PPUSH
64734: CALL_OW 298
64738: ST_TO_ADDR
// distance := 9999 ;
64739: LD_ADDR_VAR 0 10
64743: PUSH
64744: LD_INT 9999
64746: ST_TO_ADDR
// for i := 0 to 5 do
64747: LD_ADDR_VAR 0 6
64751: PUSH
64752: DOUBLE
64753: LD_INT 0
64755: DEC
64756: ST_TO_ADDR
64757: LD_INT 5
64759: PUSH
64760: FOR_TO
64761: IFFALSE 64904
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64763: LD_ADDR_VAR 0 7
64767: PUSH
64768: LD_VAR 0 1
64772: PPUSH
64773: LD_VAR 0 6
64777: PPUSH
64778: LD_VAR 0 11
64782: PPUSH
64783: CALL_OW 272
64787: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64788: LD_ADDR_VAR 0 8
64792: PUSH
64793: LD_VAR 0 2
64797: PPUSH
64798: LD_VAR 0 6
64802: PPUSH
64803: LD_VAR 0 11
64807: PPUSH
64808: CALL_OW 273
64812: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64813: LD_VAR 0 7
64817: PPUSH
64818: LD_VAR 0 8
64822: PPUSH
64823: CALL_OW 488
64827: NOT
64828: IFFALSE 64832
// continue ;
64830: GO 64760
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64832: LD_ADDR_VAR 0 9
64836: PUSH
64837: LD_VAR 0 12
64841: PUSH
64842: LD_INT 1
64844: ARRAY
64845: PPUSH
64846: LD_VAR 0 12
64850: PUSH
64851: LD_INT 2
64853: ARRAY
64854: PPUSH
64855: LD_VAR 0 7
64859: PPUSH
64860: LD_VAR 0 8
64864: PPUSH
64865: CALL_OW 298
64869: ST_TO_ADDR
// if tmp < distance then
64870: LD_VAR 0 9
64874: PUSH
64875: LD_VAR 0 10
64879: LESS
64880: IFFALSE 64902
// begin result := i ;
64882: LD_ADDR_VAR 0 5
64886: PUSH
64887: LD_VAR 0 6
64891: ST_TO_ADDR
// distance := tmp ;
64892: LD_ADDR_VAR 0 10
64896: PUSH
64897: LD_VAR 0 9
64901: ST_TO_ADDR
// end ; end ;
64902: GO 64760
64904: POP
64905: POP
// end ;
64906: LD_VAR 0 5
64910: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64911: LD_INT 0
64913: PPUSH
64914: PPUSH
// if not driver or not IsInUnit ( driver ) then
64915: LD_VAR 0 1
64919: NOT
64920: PUSH
64921: LD_VAR 0 1
64925: PPUSH
64926: CALL_OW 310
64930: NOT
64931: OR
64932: IFFALSE 64936
// exit ;
64934: GO 65026
// vehicle := IsInUnit ( driver ) ;
64936: LD_ADDR_VAR 0 3
64940: PUSH
64941: LD_VAR 0 1
64945: PPUSH
64946: CALL_OW 310
64950: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64951: LD_VAR 0 1
64955: PPUSH
64956: LD_STRING \
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: LD_INT 0
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: PUSH
64986: LD_STRING E
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_VAR 0 3
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PPUSH
65022: CALL_OW 446
// end ;
65026: LD_VAR 0 2
65030: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65031: LD_INT 0
65033: PPUSH
65034: PPUSH
// if not driver or not IsInUnit ( driver ) then
65035: LD_VAR 0 1
65039: NOT
65040: PUSH
65041: LD_VAR 0 1
65045: PPUSH
65046: CALL_OW 310
65050: NOT
65051: OR
65052: IFFALSE 65056
// exit ;
65054: GO 65146
// vehicle := IsInUnit ( driver ) ;
65056: LD_ADDR_VAR 0 3
65060: PUSH
65061: LD_VAR 0 1
65065: PPUSH
65066: CALL_OW 310
65070: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65071: LD_VAR 0 1
65075: PPUSH
65076: LD_STRING \
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: PUSH
65106: LD_STRING E
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_VAR 0 3
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PPUSH
65142: CALL_OW 447
// end ;
65146: LD_VAR 0 2
65150: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65151: LD_INT 0
65153: PPUSH
65154: PPUSH
65155: PPUSH
// tmp := [ ] ;
65156: LD_ADDR_VAR 0 5
65160: PUSH
65161: EMPTY
65162: ST_TO_ADDR
// for i in units do
65163: LD_ADDR_VAR 0 4
65167: PUSH
65168: LD_VAR 0 1
65172: PUSH
65173: FOR_IN
65174: IFFALSE 65212
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65176: LD_ADDR_VAR 0 5
65180: PUSH
65181: LD_VAR 0 5
65185: PPUSH
65186: LD_VAR 0 5
65190: PUSH
65191: LD_INT 1
65193: PLUS
65194: PPUSH
65195: LD_VAR 0 4
65199: PPUSH
65200: CALL_OW 256
65204: PPUSH
65205: CALL_OW 2
65209: ST_TO_ADDR
65210: GO 65173
65212: POP
65213: POP
// if not tmp then
65214: LD_VAR 0 5
65218: NOT
65219: IFFALSE 65223
// exit ;
65221: GO 65271
// if asc then
65223: LD_VAR 0 2
65227: IFFALSE 65251
// result := SortListByListAsc ( units , tmp ) else
65229: LD_ADDR_VAR 0 3
65233: PUSH
65234: LD_VAR 0 1
65238: PPUSH
65239: LD_VAR 0 5
65243: PPUSH
65244: CALL_OW 76
65248: ST_TO_ADDR
65249: GO 65271
// result := SortListByListDesc ( units , tmp ) ;
65251: LD_ADDR_VAR 0 3
65255: PUSH
65256: LD_VAR 0 1
65260: PPUSH
65261: LD_VAR 0 5
65265: PPUSH
65266: CALL_OW 77
65270: ST_TO_ADDR
// end ;
65271: LD_VAR 0 3
65275: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65276: LD_INT 0
65278: PPUSH
65279: PPUSH
// task := GetTaskList ( mech ) ;
65280: LD_ADDR_VAR 0 4
65284: PUSH
65285: LD_VAR 0 1
65289: PPUSH
65290: CALL_OW 437
65294: ST_TO_ADDR
// if not task then
65295: LD_VAR 0 4
65299: NOT
65300: IFFALSE 65304
// exit ;
65302: GO 65346
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65304: LD_ADDR_VAR 0 3
65308: PUSH
65309: LD_VAR 0 4
65313: PUSH
65314: LD_INT 1
65316: ARRAY
65317: PUSH
65318: LD_INT 1
65320: ARRAY
65321: PUSH
65322: LD_STRING r
65324: EQUAL
65325: PUSH
65326: LD_VAR 0 4
65330: PUSH
65331: LD_INT 1
65333: ARRAY
65334: PUSH
65335: LD_INT 4
65337: ARRAY
65338: PUSH
65339: LD_VAR 0 2
65343: EQUAL
65344: AND
65345: ST_TO_ADDR
// end ;
65346: LD_VAR 0 3
65350: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65351: LD_INT 0
65353: PPUSH
// SetDir ( unit , d ) ;
65354: LD_VAR 0 1
65358: PPUSH
65359: LD_VAR 0 4
65363: PPUSH
65364: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65368: LD_VAR 0 1
65372: PPUSH
65373: LD_VAR 0 2
65377: PPUSH
65378: LD_VAR 0 3
65382: PPUSH
65383: LD_VAR 0 5
65387: PPUSH
65388: CALL_OW 48
// end ;
65392: LD_VAR 0 6
65396: RET
// export function ToNaturalNumber ( number ) ; begin
65397: LD_INT 0
65399: PPUSH
// result := number div 1 ;
65400: LD_ADDR_VAR 0 2
65404: PUSH
65405: LD_VAR 0 1
65409: PUSH
65410: LD_INT 1
65412: DIV
65413: ST_TO_ADDR
// if number < 0 then
65414: LD_VAR 0 1
65418: PUSH
65419: LD_INT 0
65421: LESS
65422: IFFALSE 65432
// result := 0 ;
65424: LD_ADDR_VAR 0 2
65428: PUSH
65429: LD_INT 0
65431: ST_TO_ADDR
// end ;
65432: LD_VAR 0 2
65436: RET
// export function SortByClass ( units , class ) ; var un ; begin
65437: LD_INT 0
65439: PPUSH
65440: PPUSH
// if not units or not class then
65441: LD_VAR 0 1
65445: NOT
65446: PUSH
65447: LD_VAR 0 2
65451: NOT
65452: OR
65453: IFFALSE 65457
// exit ;
65455: GO 65552
// result := [ ] ;
65457: LD_ADDR_VAR 0 3
65461: PUSH
65462: EMPTY
65463: ST_TO_ADDR
// for un in units do
65464: LD_ADDR_VAR 0 4
65468: PUSH
65469: LD_VAR 0 1
65473: PUSH
65474: FOR_IN
65475: IFFALSE 65550
// if GetClass ( un ) = class then
65477: LD_VAR 0 4
65481: PPUSH
65482: CALL_OW 257
65486: PUSH
65487: LD_VAR 0 2
65491: EQUAL
65492: IFFALSE 65519
// result := Insert ( result , 1 , un ) else
65494: LD_ADDR_VAR 0 3
65498: PUSH
65499: LD_VAR 0 3
65503: PPUSH
65504: LD_INT 1
65506: PPUSH
65507: LD_VAR 0 4
65511: PPUSH
65512: CALL_OW 2
65516: ST_TO_ADDR
65517: GO 65548
// result := Replace ( result , result + 1 , un ) ;
65519: LD_ADDR_VAR 0 3
65523: PUSH
65524: LD_VAR 0 3
65528: PPUSH
65529: LD_VAR 0 3
65533: PUSH
65534: LD_INT 1
65536: PLUS
65537: PPUSH
65538: LD_VAR 0 4
65542: PPUSH
65543: CALL_OW 1
65547: ST_TO_ADDR
65548: GO 65474
65550: POP
65551: POP
// end ;
65552: LD_VAR 0 3
65556: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65557: LD_INT 0
65559: PPUSH
65560: PPUSH
65561: PPUSH
65562: PPUSH
65563: PPUSH
65564: PPUSH
65565: PPUSH
// result := [ ] ;
65566: LD_ADDR_VAR 0 4
65570: PUSH
65571: EMPTY
65572: ST_TO_ADDR
// if x - r < 0 then
65573: LD_VAR 0 1
65577: PUSH
65578: LD_VAR 0 3
65582: MINUS
65583: PUSH
65584: LD_INT 0
65586: LESS
65587: IFFALSE 65599
// min_x := 0 else
65589: LD_ADDR_VAR 0 8
65593: PUSH
65594: LD_INT 0
65596: ST_TO_ADDR
65597: GO 65615
// min_x := x - r ;
65599: LD_ADDR_VAR 0 8
65603: PUSH
65604: LD_VAR 0 1
65608: PUSH
65609: LD_VAR 0 3
65613: MINUS
65614: ST_TO_ADDR
// if y - r < 0 then
65615: LD_VAR 0 2
65619: PUSH
65620: LD_VAR 0 3
65624: MINUS
65625: PUSH
65626: LD_INT 0
65628: LESS
65629: IFFALSE 65641
// min_y := 0 else
65631: LD_ADDR_VAR 0 7
65635: PUSH
65636: LD_INT 0
65638: ST_TO_ADDR
65639: GO 65657
// min_y := y - r ;
65641: LD_ADDR_VAR 0 7
65645: PUSH
65646: LD_VAR 0 2
65650: PUSH
65651: LD_VAR 0 3
65655: MINUS
65656: ST_TO_ADDR
// max_x := x + r ;
65657: LD_ADDR_VAR 0 9
65661: PUSH
65662: LD_VAR 0 1
65666: PUSH
65667: LD_VAR 0 3
65671: PLUS
65672: ST_TO_ADDR
// max_y := y + r ;
65673: LD_ADDR_VAR 0 10
65677: PUSH
65678: LD_VAR 0 2
65682: PUSH
65683: LD_VAR 0 3
65687: PLUS
65688: ST_TO_ADDR
// for _x = min_x to max_x do
65689: LD_ADDR_VAR 0 5
65693: PUSH
65694: DOUBLE
65695: LD_VAR 0 8
65699: DEC
65700: ST_TO_ADDR
65701: LD_VAR 0 9
65705: PUSH
65706: FOR_TO
65707: IFFALSE 65808
// for _y = min_y to max_y do
65709: LD_ADDR_VAR 0 6
65713: PUSH
65714: DOUBLE
65715: LD_VAR 0 7
65719: DEC
65720: ST_TO_ADDR
65721: LD_VAR 0 10
65725: PUSH
65726: FOR_TO
65727: IFFALSE 65804
// begin if not ValidHex ( _x , _y ) then
65729: LD_VAR 0 5
65733: PPUSH
65734: LD_VAR 0 6
65738: PPUSH
65739: CALL_OW 488
65743: NOT
65744: IFFALSE 65748
// continue ;
65746: GO 65726
// if GetResourceTypeXY ( _x , _y ) then
65748: LD_VAR 0 5
65752: PPUSH
65753: LD_VAR 0 6
65757: PPUSH
65758: CALL_OW 283
65762: IFFALSE 65802
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65764: LD_ADDR_VAR 0 4
65768: PUSH
65769: LD_VAR 0 4
65773: PPUSH
65774: LD_VAR 0 4
65778: PUSH
65779: LD_INT 1
65781: PLUS
65782: PPUSH
65783: LD_VAR 0 5
65787: PUSH
65788: LD_VAR 0 6
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PPUSH
65797: CALL_OW 1
65801: ST_TO_ADDR
// end ;
65802: GO 65726
65804: POP
65805: POP
65806: GO 65706
65808: POP
65809: POP
// end ;
65810: LD_VAR 0 4
65814: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65815: LD_INT 0
65817: PPUSH
65818: PPUSH
65819: PPUSH
65820: PPUSH
65821: PPUSH
65822: PPUSH
65823: PPUSH
65824: PPUSH
// if not units then
65825: LD_VAR 0 1
65829: NOT
65830: IFFALSE 65834
// exit ;
65832: GO 66358
// result := UnitFilter ( units , [ f_ok ] ) ;
65834: LD_ADDR_VAR 0 3
65838: PUSH
65839: LD_VAR 0 1
65843: PPUSH
65844: LD_INT 50
65846: PUSH
65847: EMPTY
65848: LIST
65849: PPUSH
65850: CALL_OW 72
65854: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65855: LD_ADDR_VAR 0 8
65859: PUSH
65860: LD_VAR 0 1
65864: PUSH
65865: LD_INT 1
65867: ARRAY
65868: PPUSH
65869: CALL_OW 255
65873: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65874: LD_ADDR_VAR 0 10
65878: PUSH
65879: LD_INT 29
65881: PUSH
65882: LD_INT 91
65884: PUSH
65885: LD_INT 49
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: LIST
65892: ST_TO_ADDR
// if not result then
65893: LD_VAR 0 3
65897: NOT
65898: IFFALSE 65902
// exit ;
65900: GO 66358
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65902: LD_ADDR_VAR 0 5
65906: PUSH
65907: LD_INT 81
65909: PUSH
65910: LD_VAR 0 8
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PPUSH
65919: CALL_OW 69
65923: ST_TO_ADDR
// for i in result do
65924: LD_ADDR_VAR 0 4
65928: PUSH
65929: LD_VAR 0 3
65933: PUSH
65934: FOR_IN
65935: IFFALSE 66356
// begin tag := GetTag ( i ) + 1 ;
65937: LD_ADDR_VAR 0 9
65941: PUSH
65942: LD_VAR 0 4
65946: PPUSH
65947: CALL_OW 110
65951: PUSH
65952: LD_INT 1
65954: PLUS
65955: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65956: LD_ADDR_VAR 0 7
65960: PUSH
65961: LD_VAR 0 4
65965: PPUSH
65966: CALL_OW 250
65970: PPUSH
65971: LD_VAR 0 4
65975: PPUSH
65976: CALL_OW 251
65980: PPUSH
65981: LD_INT 6
65983: PPUSH
65984: CALL 65557 0 3
65988: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65989: LD_VAR 0 4
65993: PPUSH
65994: CALL_OW 247
65998: PUSH
65999: LD_INT 2
66001: EQUAL
66002: PUSH
66003: LD_VAR 0 7
66007: AND
66008: PUSH
66009: LD_VAR 0 4
66013: PPUSH
66014: CALL_OW 264
66018: PUSH
66019: LD_VAR 0 10
66023: IN
66024: NOT
66025: AND
66026: IFFALSE 66065
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66028: LD_VAR 0 4
66032: PPUSH
66033: LD_VAR 0 7
66037: PUSH
66038: LD_INT 1
66040: ARRAY
66041: PUSH
66042: LD_INT 1
66044: ARRAY
66045: PPUSH
66046: LD_VAR 0 7
66050: PUSH
66051: LD_INT 1
66053: ARRAY
66054: PUSH
66055: LD_INT 2
66057: ARRAY
66058: PPUSH
66059: CALL_OW 116
66063: GO 66354
// if path > tag then
66065: LD_VAR 0 2
66069: PUSH
66070: LD_VAR 0 9
66074: GREATER
66075: IFFALSE 66283
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66077: LD_ADDR_VAR 0 6
66081: PUSH
66082: LD_VAR 0 5
66086: PPUSH
66087: LD_INT 91
66089: PUSH
66090: LD_VAR 0 4
66094: PUSH
66095: LD_INT 8
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: LIST
66102: PPUSH
66103: CALL_OW 72
66107: ST_TO_ADDR
// if nearEnemy then
66108: LD_VAR 0 6
66112: IFFALSE 66181
// begin if GetWeapon ( i ) = ru_time_lapser then
66114: LD_VAR 0 4
66118: PPUSH
66119: CALL_OW 264
66123: PUSH
66124: LD_INT 49
66126: EQUAL
66127: IFFALSE 66155
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66129: LD_VAR 0 4
66133: PPUSH
66134: LD_VAR 0 6
66138: PPUSH
66139: LD_VAR 0 4
66143: PPUSH
66144: CALL_OW 74
66148: PPUSH
66149: CALL_OW 112
66153: GO 66179
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66155: LD_VAR 0 4
66159: PPUSH
66160: LD_VAR 0 6
66164: PPUSH
66165: LD_VAR 0 4
66169: PPUSH
66170: CALL_OW 74
66174: PPUSH
66175: CALL_OW 115
// end else
66179: GO 66281
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66181: LD_VAR 0 4
66185: PPUSH
66186: LD_VAR 0 2
66190: PUSH
66191: LD_VAR 0 9
66195: ARRAY
66196: PUSH
66197: LD_INT 1
66199: ARRAY
66200: PPUSH
66201: LD_VAR 0 2
66205: PUSH
66206: LD_VAR 0 9
66210: ARRAY
66211: PUSH
66212: LD_INT 2
66214: ARRAY
66215: PPUSH
66216: CALL_OW 297
66220: PUSH
66221: LD_INT 6
66223: GREATER
66224: IFFALSE 66267
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66226: LD_VAR 0 4
66230: PPUSH
66231: LD_VAR 0 2
66235: PUSH
66236: LD_VAR 0 9
66240: ARRAY
66241: PUSH
66242: LD_INT 1
66244: ARRAY
66245: PPUSH
66246: LD_VAR 0 2
66250: PUSH
66251: LD_VAR 0 9
66255: ARRAY
66256: PUSH
66257: LD_INT 2
66259: ARRAY
66260: PPUSH
66261: CALL_OW 114
66265: GO 66281
// SetTag ( i , tag ) ;
66267: LD_VAR 0 4
66271: PPUSH
66272: LD_VAR 0 9
66276: PPUSH
66277: CALL_OW 109
// end else
66281: GO 66354
// if enemy then
66283: LD_VAR 0 5
66287: IFFALSE 66354
// begin if GetWeapon ( i ) = ru_time_lapser then
66289: LD_VAR 0 4
66293: PPUSH
66294: CALL_OW 264
66298: PUSH
66299: LD_INT 49
66301: EQUAL
66302: IFFALSE 66330
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66304: LD_VAR 0 4
66308: PPUSH
66309: LD_VAR 0 5
66313: PPUSH
66314: LD_VAR 0 4
66318: PPUSH
66319: CALL_OW 74
66323: PPUSH
66324: CALL_OW 112
66328: GO 66354
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66330: LD_VAR 0 4
66334: PPUSH
66335: LD_VAR 0 5
66339: PPUSH
66340: LD_VAR 0 4
66344: PPUSH
66345: CALL_OW 74
66349: PPUSH
66350: CALL_OW 115
// end ; end ;
66354: GO 65934
66356: POP
66357: POP
// end ;
66358: LD_VAR 0 3
66362: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66363: LD_INT 0
66365: PPUSH
66366: PPUSH
66367: PPUSH
// if not unit or IsInUnit ( unit ) then
66368: LD_VAR 0 1
66372: NOT
66373: PUSH
66374: LD_VAR 0 1
66378: PPUSH
66379: CALL_OW 310
66383: OR
66384: IFFALSE 66388
// exit ;
66386: GO 66479
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66388: LD_ADDR_VAR 0 4
66392: PUSH
66393: LD_VAR 0 1
66397: PPUSH
66398: CALL_OW 250
66402: PPUSH
66403: LD_VAR 0 2
66407: PPUSH
66408: LD_INT 1
66410: PPUSH
66411: CALL_OW 272
66415: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66416: LD_ADDR_VAR 0 5
66420: PUSH
66421: LD_VAR 0 1
66425: PPUSH
66426: CALL_OW 251
66430: PPUSH
66431: LD_VAR 0 2
66435: PPUSH
66436: LD_INT 1
66438: PPUSH
66439: CALL_OW 273
66443: ST_TO_ADDR
// if ValidHex ( x , y ) then
66444: LD_VAR 0 4
66448: PPUSH
66449: LD_VAR 0 5
66453: PPUSH
66454: CALL_OW 488
66458: IFFALSE 66479
// ComTurnXY ( unit , x , y ) ;
66460: LD_VAR 0 1
66464: PPUSH
66465: LD_VAR 0 4
66469: PPUSH
66470: LD_VAR 0 5
66474: PPUSH
66475: CALL_OW 118
// end ;
66479: LD_VAR 0 3
66483: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66484: LD_INT 0
66486: PPUSH
66487: PPUSH
// result := false ;
66488: LD_ADDR_VAR 0 3
66492: PUSH
66493: LD_INT 0
66495: ST_TO_ADDR
// if not units then
66496: LD_VAR 0 2
66500: NOT
66501: IFFALSE 66505
// exit ;
66503: GO 66550
// for i in units do
66505: LD_ADDR_VAR 0 4
66509: PUSH
66510: LD_VAR 0 2
66514: PUSH
66515: FOR_IN
66516: IFFALSE 66548
// if See ( side , i ) then
66518: LD_VAR 0 1
66522: PPUSH
66523: LD_VAR 0 4
66527: PPUSH
66528: CALL_OW 292
66532: IFFALSE 66546
// begin result := true ;
66534: LD_ADDR_VAR 0 3
66538: PUSH
66539: LD_INT 1
66541: ST_TO_ADDR
// exit ;
66542: POP
66543: POP
66544: GO 66550
// end ;
66546: GO 66515
66548: POP
66549: POP
// end ;
66550: LD_VAR 0 3
66554: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66555: LD_INT 0
66557: PPUSH
66558: PPUSH
66559: PPUSH
66560: PPUSH
// if not unit or not points then
66561: LD_VAR 0 1
66565: NOT
66566: PUSH
66567: LD_VAR 0 2
66571: NOT
66572: OR
66573: IFFALSE 66577
// exit ;
66575: GO 66667
// dist := 99999 ;
66577: LD_ADDR_VAR 0 5
66581: PUSH
66582: LD_INT 99999
66584: ST_TO_ADDR
// for i in points do
66585: LD_ADDR_VAR 0 4
66589: PUSH
66590: LD_VAR 0 2
66594: PUSH
66595: FOR_IN
66596: IFFALSE 66665
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66598: LD_ADDR_VAR 0 6
66602: PUSH
66603: LD_VAR 0 1
66607: PPUSH
66608: LD_VAR 0 4
66612: PUSH
66613: LD_INT 1
66615: ARRAY
66616: PPUSH
66617: LD_VAR 0 4
66621: PUSH
66622: LD_INT 2
66624: ARRAY
66625: PPUSH
66626: CALL_OW 297
66630: ST_TO_ADDR
// if tmpDist < dist then
66631: LD_VAR 0 6
66635: PUSH
66636: LD_VAR 0 5
66640: LESS
66641: IFFALSE 66663
// begin result := i ;
66643: LD_ADDR_VAR 0 3
66647: PUSH
66648: LD_VAR 0 4
66652: ST_TO_ADDR
// dist := tmpDist ;
66653: LD_ADDR_VAR 0 5
66657: PUSH
66658: LD_VAR 0 6
66662: ST_TO_ADDR
// end ; end ;
66663: GO 66595
66665: POP
66666: POP
// end ;
66667: LD_VAR 0 3
66671: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66672: LD_INT 0
66674: PPUSH
// uc_side := side ;
66675: LD_ADDR_OWVAR 20
66679: PUSH
66680: LD_VAR 0 1
66684: ST_TO_ADDR
// uc_nation := 3 ;
66685: LD_ADDR_OWVAR 21
66689: PUSH
66690: LD_INT 3
66692: ST_TO_ADDR
// vc_chassis := 25 ;
66693: LD_ADDR_OWVAR 37
66697: PUSH
66698: LD_INT 25
66700: ST_TO_ADDR
// vc_engine := engine_siberite ;
66701: LD_ADDR_OWVAR 39
66705: PUSH
66706: LD_INT 3
66708: ST_TO_ADDR
// vc_control := control_computer ;
66709: LD_ADDR_OWVAR 38
66713: PUSH
66714: LD_INT 3
66716: ST_TO_ADDR
// vc_weapon := 59 ;
66717: LD_ADDR_OWVAR 40
66721: PUSH
66722: LD_INT 59
66724: ST_TO_ADDR
// result := CreateVehicle ;
66725: LD_ADDR_VAR 0 5
66729: PUSH
66730: CALL_OW 45
66734: ST_TO_ADDR
// SetDir ( result , d ) ;
66735: LD_VAR 0 5
66739: PPUSH
66740: LD_VAR 0 4
66744: PPUSH
66745: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66749: LD_VAR 0 5
66753: PPUSH
66754: LD_VAR 0 2
66758: PPUSH
66759: LD_VAR 0 3
66763: PPUSH
66764: LD_INT 0
66766: PPUSH
66767: CALL_OW 48
// end ;
66771: LD_VAR 0 5
66775: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66776: LD_INT 0
66778: PPUSH
66779: PPUSH
66780: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66781: LD_ADDR_VAR 0 2
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66804: LD_VAR 0 1
66808: NOT
66809: PUSH
66810: LD_VAR 0 1
66814: PPUSH
66815: CALL_OW 264
66819: PUSH
66820: LD_INT 12
66822: PUSH
66823: LD_INT 51
66825: PUSH
66826: LD_INT 32
66828: PUSH
66829: LD_INT 89
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: IN
66838: NOT
66839: OR
66840: IFFALSE 66844
// exit ;
66842: GO 66942
// for i := 1 to 3 do
66844: LD_ADDR_VAR 0 3
66848: PUSH
66849: DOUBLE
66850: LD_INT 1
66852: DEC
66853: ST_TO_ADDR
66854: LD_INT 3
66856: PUSH
66857: FOR_TO
66858: IFFALSE 66940
// begin tmp := GetCargo ( cargo , i ) ;
66860: LD_ADDR_VAR 0 4
66864: PUSH
66865: LD_VAR 0 1
66869: PPUSH
66870: LD_VAR 0 3
66874: PPUSH
66875: CALL_OW 289
66879: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66880: LD_ADDR_VAR 0 2
66884: PUSH
66885: LD_VAR 0 2
66889: PPUSH
66890: LD_VAR 0 3
66894: PPUSH
66895: LD_VAR 0 4
66899: PPUSH
66900: CALL_OW 1
66904: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66905: LD_ADDR_VAR 0 2
66909: PUSH
66910: LD_VAR 0 2
66914: PPUSH
66915: LD_INT 4
66917: PPUSH
66918: LD_VAR 0 2
66922: PUSH
66923: LD_INT 4
66925: ARRAY
66926: PUSH
66927: LD_VAR 0 4
66931: PLUS
66932: PPUSH
66933: CALL_OW 1
66937: ST_TO_ADDR
// end ;
66938: GO 66857
66940: POP
66941: POP
// end ;
66942: LD_VAR 0 2
66946: RET
// export function Length ( array ) ; begin
66947: LD_INT 0
66949: PPUSH
// result := array + 0 ;
66950: LD_ADDR_VAR 0 2
66954: PUSH
66955: LD_VAR 0 1
66959: PUSH
66960: LD_INT 0
66962: PLUS
66963: ST_TO_ADDR
// end ;
66964: LD_VAR 0 2
66968: RET
// export function PrepareArray ( array ) ; begin
66969: LD_INT 0
66971: PPUSH
// result := array diff 0 ;
66972: LD_ADDR_VAR 0 2
66976: PUSH
66977: LD_VAR 0 1
66981: PUSH
66982: LD_INT 0
66984: DIFF
66985: ST_TO_ADDR
// if not result [ 1 ] then
66986: LD_VAR 0 2
66990: PUSH
66991: LD_INT 1
66993: ARRAY
66994: NOT
66995: IFFALSE 67015
// result := Delete ( result , 1 ) ;
66997: LD_ADDR_VAR 0 2
67001: PUSH
67002: LD_VAR 0 2
67006: PPUSH
67007: LD_INT 1
67009: PPUSH
67010: CALL_OW 3
67014: ST_TO_ADDR
// end ;
67015: LD_VAR 0 2
67019: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67020: LD_INT 0
67022: PPUSH
67023: PPUSH
67024: PPUSH
67025: PPUSH
// sibRocketRange := 25 ;
67026: LD_ADDR_VAR 0 6
67030: PUSH
67031: LD_INT 25
67033: ST_TO_ADDR
// result := false ;
67034: LD_ADDR_VAR 0 4
67038: PUSH
67039: LD_INT 0
67041: ST_TO_ADDR
// for i := 0 to 5 do
67042: LD_ADDR_VAR 0 5
67046: PUSH
67047: DOUBLE
67048: LD_INT 0
67050: DEC
67051: ST_TO_ADDR
67052: LD_INT 5
67054: PUSH
67055: FOR_TO
67056: IFFALSE 67123
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67058: LD_VAR 0 1
67062: PPUSH
67063: LD_VAR 0 5
67067: PPUSH
67068: LD_VAR 0 6
67072: PPUSH
67073: CALL_OW 272
67077: PPUSH
67078: LD_VAR 0 2
67082: PPUSH
67083: LD_VAR 0 5
67087: PPUSH
67088: LD_VAR 0 6
67092: PPUSH
67093: CALL_OW 273
67097: PPUSH
67098: LD_VAR 0 3
67102: PPUSH
67103: CALL_OW 309
67107: IFFALSE 67121
// begin result := true ;
67109: LD_ADDR_VAR 0 4
67113: PUSH
67114: LD_INT 1
67116: ST_TO_ADDR
// exit ;
67117: POP
67118: POP
67119: GO 67125
// end ;
67121: GO 67055
67123: POP
67124: POP
// end ;
67125: LD_VAR 0 4
67129: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67130: LD_INT 0
67132: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67133: LD_VAR 0 1
67137: PPUSH
67138: LD_VAR 0 2
67142: PPUSH
67143: LD_INT 0
67145: PPUSH
67146: LD_INT 0
67148: PPUSH
67149: LD_INT 1
67151: PPUSH
67152: LD_INT 0
67154: PPUSH
67155: CALL_OW 587
// end ;
67159: LD_VAR 0 3
67163: RET
