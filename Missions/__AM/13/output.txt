// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles := [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources := [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon := [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// PlaceSeeing ( 1 , 1 , 1 , - 37963 ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 1
  33: PPUSH
  34: LD_INT 37963
  36: NEG
  37: PPUSH
  38: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 1 ) ;
  42: LD_INT 1
  44: PPUSH
  45: LD_INT 1
  47: PPUSH
  48: LD_INT 1
  50: PPUSH
  51: CALL_OW 331
// PrepareEnv ;
  55: CALL 909 0 0
// AnimateTrees ( true ) ;
  59: LD_INT 1
  61: PPUSH
  62: CALL_OW 573
// RandomizeAll ;
  66: CALL_OW 11
// mission_prefix_prev := 12_ ;
  70: LD_ADDR_EXP 21
  74: PUSH
  75: LD_STRING 12_
  77: ST_TO_ADDR
// PrepareEpsilonBase ;
  78: CALL 2064 0 0
// PrepareHeroes ;
  82: CALL 1089 0 0
// PrepareRandoms ;
  86: CALL 3427 0 0
// Action ;
  90: CALL 5217 0 0
// end ;
  94: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
  95: LD_INT 2
  97: PPUSH
  98: LD_INT 22
 100: PUSH
 101: LD_INT 1
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 71
 126: PUSH
 127: LD_INT 0
 129: EQUAL
 130: PUSH
 131: LD_INT 2
 133: PPUSH
 134: LD_INT 22
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 21
 146: PUSH
 147: LD_INT 2
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 32
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 33
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 3
 176: PUSH
 177: LD_INT 58
 179: PUSH
 180: EMPTY
 181: LIST
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: PPUSH
 194: CALL_OW 70
 198: PUSH
 199: LD_INT 8
 201: EQUAL
 202: AND
 203: IFFALSE 806
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
 211: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) then
 212: LD_INT 2
 214: PPUSH
 215: LD_INT 21
 217: PUSH
 218: LD_INT 2
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 33
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 58
 240: PUSH
 241: EMPTY
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 70
 257: IFFALSE 545
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 259: LD_ADDR_VAR 0 1
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 33
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: LD_INT 58
 292: PUSH
 293: EMPTY
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 70
 309: PUSH
 310: FOR_IN
 311: IFFALSE 543
// begin cargoType := GetCargoType ( i ) ;
 313: LD_ADDR_VAR 0 2
 317: PUSH
 318: LD_VAR 0 1
 322: PPUSH
 323: CALL_OW 288
 327: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 264
 337: PUSH
 338: LD_INT 12
 340: EQUAL
 341: IFFALSE 448
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ) else
 343: LD_ADDR_EXP 19
 347: PUSH
 348: LD_EXP 19
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: LD_VAR 0 1
 366: PPUSH
 367: CALL_OW 248
 371: PUSH
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 265
 381: PUSH
 382: LD_VAR 0 1
 386: PPUSH
 387: CALL_OW 262
 391: PUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: CALL_OW 263
 401: PUSH
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 264
 411: PUSH
 412: LD_VAR 0 2
 416: PUSH
 417: LD_VAR 0 1
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 289
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 1
 445: ST_TO_ADDR
 446: GO 529
// yourVehicles := Replace ( yourVehicles , yourVehicles + 1 , [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
 448: LD_ADDR_EXP 19
 452: PUSH
 453: LD_EXP 19
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_INT 1
 465: PLUS
 466: PPUSH
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 248
 476: PUSH
 477: LD_VAR 0 1
 481: PPUSH
 482: CALL_OW 265
 486: PUSH
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 262
 496: PUSH
 497: LD_VAR 0 1
 501: PPUSH
 502: CALL_OW 263
 506: PUSH
 507: LD_VAR 0 1
 511: PPUSH
 512: CALL_OW 264
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 529: LD_EXP 19
 533: PPUSH
 534: LD_STRING 13_VehiclesIn13_1
 536: PPUSH
 537: CALL_OW 39
// end ;
 541: GO 310
 543: POP
 544: POP
// end ; SaveCharacters ( othersSelect , 13c_others ) ;
 545: LD_EXP 23
 549: PPUSH
 550: LD_STRING 13c_others
 552: PPUSH
 553: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_STRING 13c_JMM
 564: PPUSH
 565: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
 569: LD_EXP 15
 573: PPUSH
 574: LD_STRING 13c_Stevens
 576: PPUSH
 577: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
 581: LD_STRING enableBioCharacter(BIO_HUGH)
 583: PPUSH
 584: CALL_OW 559
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
 588: LD_EXP 3
 592: PPUSH
 593: LD_STRING Lisa
 595: PPUSH
 596: LD_EXP 22
 600: PPUSH
 601: CALL 4223 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
 605: LD_EXP 8
 609: PPUSH
 610: LD_STRING Brown
 612: PPUSH
 613: LD_EXP 22
 617: PPUSH
 618: CALL 4223 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
 622: LD_EXP 4
 626: PPUSH
 627: LD_STRING Donaldson
 629: PPUSH
 630: LD_EXP 22
 634: PPUSH
 635: CALL 4223 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
 639: LD_EXP 5
 643: PPUSH
 644: LD_STRING Bobby
 646: PPUSH
 647: LD_EXP 22
 651: PPUSH
 652: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
 656: LD_EXP 6
 660: PPUSH
 661: LD_STRING Cyrus
 663: PPUSH
 664: LD_EXP 22
 668: PPUSH
 669: CALL 4223 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
 673: LD_EXP 7
 677: PPUSH
 678: LD_STRING Denis
 680: PPUSH
 681: LD_EXP 22
 685: PPUSH
 686: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
 690: LD_EXP 9
 694: PPUSH
 695: LD_STRING Gladstone
 697: PPUSH
 698: LD_EXP 22
 702: PPUSH
 703: CALL 4223 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
 707: LD_EXP 10
 711: PPUSH
 712: LD_STRING Houten
 714: PPUSH
 715: LD_EXP 22
 719: PPUSH
 720: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
 724: LD_EXP 11
 728: PPUSH
 729: LD_STRING Cornel
 731: PPUSH
 732: LD_EXP 22
 736: PPUSH
 737: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
 741: LD_EXP 12
 745: PPUSH
 746: LD_STRING Gary
 748: PPUSH
 749: LD_EXP 22
 753: PPUSH
 754: CALL 4223 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
 758: LD_EXP 13
 762: PPUSH
 763: LD_STRING Frank
 765: PPUSH
 766: LD_EXP 22
 770: PPUSH
 771: CALL 4223 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
 775: LD_EXP 14
 779: PPUSH
 780: LD_STRING Kikuchi
 782: PPUSH
 783: LD_EXP 22
 787: PPUSH
 788: CALL 4223 0 3
// SaveCargos ;
 792: CALL 809 0 0
// ChangeMap ( 13 , %_cont ) ;
 796: LD_INT 13
 798: PPUSH
 799: LD_STRING %_cont
 801: PPUSH
 802: CALL_OW 340
// end ;
 806: PPOPN 2
 808: END
// export function SaveCargos ; var i ; begin
 809: LD_INT 0
 811: PPUSH
 812: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 813: LD_ADDR_VAR 0 2
 817: PUSH
 818: LD_INT 2
 820: PPUSH
 821: LD_INT 22
 823: PUSH
 824: LD_INT 1
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 33
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 34
 843: PUSH
 844: LD_INT 12
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PPUSH
 856: CALL_OW 70
 860: PUSH
 861: FOR_IN
 862: IFFALSE 890
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 864: LD_ADDR_EXP 20
 868: PUSH
 869: LD_EXP 20
 873: PUSH
 874: LD_VAR 0 2
 878: PPUSH
 879: CALL 66606 0 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: ADD
 887: ST_TO_ADDR
 888: GO 861
 890: POP
 891: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 892: LD_EXP 20
 896: PPUSH
 897: LD_STRING 13_ResourcesInCargo13_1
 899: PPUSH
 900: CALL_OW 39
// end ;
 904: LD_VAR 0 1
 908: RET
// export function PrepareEnv ; var tmp , list , i , j , exist ; begin
 909: LD_INT 0
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
 916: PPUSH
// tmp := LoadVariable ( 10_EpsilonEnv , [ ] ) ;
 917: LD_ADDR_VAR 0 2
 921: PUSH
 922: LD_STRING 10_EpsilonEnv
 924: PPUSH
 925: EMPTY
 926: PPUSH
 927: CALL_OW 30
 931: ST_TO_ADDR
// if not tmp then
 932: LD_VAR 0 2
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1084
// list := ListEnvironmentArea ( epsilonTerrain ) ;
 941: LD_ADDR_VAR 0 3
 945: PUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 353
 953: ST_TO_ADDR
// if not list then
 954: LD_VAR 0 3
 958: NOT
 959: IFFALSE 963
// exit ;
 961: GO 1084
// for i in list do
 963: LD_ADDR_VAR 0 4
 967: PUSH
 968: LD_VAR 0 3
 972: PUSH
 973: FOR_IN
 974: IFFALSE 1082
// begin exist := false ;
 976: LD_ADDR_VAR 0 6
 980: PUSH
 981: LD_INT 0
 983: ST_TO_ADDR
// for j in tmp do
 984: LD_ADDR_VAR 0 5
 988: PUSH
 989: LD_VAR 0 2
 993: PUSH
 994: FOR_IN
 995: IFFALSE 1049
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
 997: LD_VAR 0 4
1001: PUSH
1002: LD_INT 1
1004: ARRAY
1005: PUSH
1006: LD_VAR 0 5
1010: PUSH
1011: LD_INT 1
1013: ARRAY
1014: EQUAL
1015: PUSH
1016: LD_VAR 0 4
1020: PUSH
1021: LD_INT 2
1023: ARRAY
1024: PUSH
1025: LD_VAR 0 5
1029: PUSH
1030: LD_INT 2
1032: ARRAY
1033: EQUAL
1034: AND
1035: IFFALSE 1047
// begin exist := true ;
1037: LD_ADDR_VAR 0 6
1041: PUSH
1042: LD_INT 1
1044: ST_TO_ADDR
// break ;
1045: GO 1049
// end ;
1047: GO 994
1049: POP
1050: POP
// if not exist then
1051: LD_VAR 0 6
1055: NOT
1056: IFFALSE 1080
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
1058: LD_VAR 0 4
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 4
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 347
// end ;
1080: GO 973
1082: POP
1083: POP
// end ; end_of_file
1084: LD_VAR 0 1
1088: RET
// export function PrepareHeroes ; var i , others , tmp , x , y , base ; begin
1089: LD_INT 0
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1098: LD_ADDR_VAR 0 4
1102: PUSH
1103: LD_INT 22
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 23
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 30
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 30
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 69
1160: ST_TO_ADDR
// if tmp then
1161: LD_VAR 0 4
1165: IFFALSE 1287
// begin x := GetX ( tmp [ 1 ] ) ;
1167: LD_ADDR_VAR 0 5
1171: PUSH
1172: LD_VAR 0 4
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: CALL_OW 250
1185: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
1186: LD_ADDR_VAR 0 6
1190: PUSH
1191: LD_VAR 0 4
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: CALL_OW 251
1204: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , epsilon ) ;
1205: LD_VAR 0 4
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: LD_STRING epsilon
1216: PPUSH
1217: CALL_OW 500
// base := GetBase ( tmp [ 1 ] ) ;
1221: LD_ADDR_VAR 0 7
1225: PUSH
1226: LD_VAR 0 4
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PPUSH
1235: CALL_OW 274
1239: ST_TO_ADDR
// SetResourceType ( base , 1 , 3000 ) ;
1240: LD_VAR 0 7
1244: PPUSH
1245: LD_INT 1
1247: PPUSH
1248: LD_INT 3000
1250: PPUSH
1251: CALL_OW 277
// SetResourceType ( base , 2 , 500 ) ;
1255: LD_VAR 0 7
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: LD_INT 500
1265: PPUSH
1266: CALL_OW 277
// SetResourceType ( base , 3 , 200 ) ;
1270: LD_VAR 0 7
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 200
1280: PPUSH
1281: CALL_OW 277
// end else
1285: GO 1303
// begin x := 104 ;
1287: LD_ADDR_VAR 0 5
1291: PUSH
1292: LD_INT 104
1294: ST_TO_ADDR
// y := 32 ;
1295: LD_ADDR_VAR 0 6
1299: PUSH
1300: LD_INT 32
1302: ST_TO_ADDR
// end ; uc_side := 1 ;
1303: LD_ADDR_OWVAR 20
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
// JMM := PrepareUnit2 ( JMM , true ) ;
1311: LD_ADDR_EXP 1
1315: PUSH
1316: LD_STRING JMM
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 3697 0 2
1326: ST_TO_ADDR
// Lisa := PrepareUnit2 ( Lisa , true ) ;
1327: LD_ADDR_EXP 3
1331: PUSH
1332: LD_STRING Lisa
1334: PPUSH
1335: LD_INT 1
1337: PPUSH
1338: CALL 3697 0 2
1342: ST_TO_ADDR
// Donaldson := PrepareUnit2 ( Donaldson , true ) ;
1343: LD_ADDR_EXP 4
1347: PUSH
1348: LD_STRING Donaldson
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 3697 0 2
1358: ST_TO_ADDR
// Bobby := PrepareUnit2 ( Bobby , true ) ;
1359: LD_ADDR_EXP 5
1363: PUSH
1364: LD_STRING Bobby
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL 3697 0 2
1374: ST_TO_ADDR
// Cyrus := PrepareUnit2 ( Cyrus , true ) ;
1375: LD_ADDR_EXP 6
1379: PUSH
1380: LD_STRING Cyrus
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL 3697 0 2
1390: ST_TO_ADDR
// Denis := PrepareUnit2 ( Denis , true ) ;
1391: LD_ADDR_EXP 7
1395: PUSH
1396: LD_STRING Denis
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: CALL 3697 0 2
1406: ST_TO_ADDR
// Brown := PrepareUnit2 ( Brown , true ) ;
1407: LD_ADDR_EXP 8
1411: PUSH
1412: LD_STRING Brown
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: CALL 3697 0 2
1422: ST_TO_ADDR
// Gladstone := PrepareUnit2 ( Gladstone , true ) ;
1423: LD_ADDR_EXP 9
1427: PUSH
1428: LD_STRING Gladstone
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: CALL 3697 0 2
1438: ST_TO_ADDR
// Houten := PrepareUnit2 ( Houten , true ) ;
1439: LD_ADDR_EXP 10
1443: PUSH
1444: LD_STRING Houten
1446: PPUSH
1447: LD_INT 1
1449: PPUSH
1450: CALL 3697 0 2
1454: ST_TO_ADDR
// Cornel := PrepareUnit2 ( Cornell , true ) ;
1455: LD_ADDR_EXP 11
1459: PUSH
1460: LD_STRING Cornell
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL 3697 0 2
1470: ST_TO_ADDR
// Gary := PrepareUnit2 ( Gary , true ) ;
1471: LD_ADDR_EXP 12
1475: PUSH
1476: LD_STRING Gary
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL 3697 0 2
1486: ST_TO_ADDR
// Frank := PrepareUnit2 ( Frank , true ) ;
1487: LD_ADDR_EXP 13
1491: PUSH
1492: LD_STRING Frank
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL 3697 0 2
1502: ST_TO_ADDR
// Kikuchi := PrepareUnit2 ( Kikuchi , true ) ;
1503: LD_ADDR_EXP 14
1507: PUSH
1508: LD_STRING Kikuchi
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL 3697 0 2
1518: ST_TO_ADDR
// Stevens := PrepareUnit2 ( Stevens , false ) ;
1519: LD_ADDR_EXP 15
1523: PUSH
1524: LD_STRING Stevens
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL 3697 0 2
1534: ST_TO_ADDR
// Powell := PrepareUnit2 ( Powell , false ) ;
1535: LD_ADDR_EXP 2
1539: PUSH
1540: LD_STRING Powell
1542: PPUSH
1543: LD_INT 0
1545: PPUSH
1546: CALL 3697 0 2
1550: ST_TO_ADDR
// PlaceUnit ( JMM , x , y , 4 , false ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_VAR 0 5
1560: PPUSH
1561: LD_VAR 0 6
1565: PPUSH
1566: LD_INT 4
1568: PPUSH
1569: LD_INT 0
1571: PPUSH
1572: CALL 3870 0 5
// PlaceUnit ( Stevens , x , y , 4 , false ) ;
1576: LD_EXP 15
1580: PPUSH
1581: LD_VAR 0 5
1585: PPUSH
1586: LD_VAR 0 6
1590: PPUSH
1591: LD_INT 4
1593: PPUSH
1594: LD_INT 0
1596: PPUSH
1597: CALL 3870 0 5
// PlaceUnit ( Lisa , x , y , 35 , false ) ;
1601: LD_EXP 3
1605: PPUSH
1606: LD_VAR 0 5
1610: PPUSH
1611: LD_VAR 0 6
1615: PPUSH
1616: LD_INT 35
1618: PPUSH
1619: LD_INT 0
1621: PPUSH
1622: CALL 3870 0 5
// PlaceUnit ( Donaldson , x , y , 35 , false ) ;
1626: LD_EXP 4
1630: PPUSH
1631: LD_VAR 0 5
1635: PPUSH
1636: LD_VAR 0 6
1640: PPUSH
1641: LD_INT 35
1643: PPUSH
1644: LD_INT 0
1646: PPUSH
1647: CALL 3870 0 5
// PlaceUnit ( Bobby , x , y , 35 , false ) ;
1651: LD_EXP 5
1655: PPUSH
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_VAR 0 6
1665: PPUSH
1666: LD_INT 35
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: CALL 3870 0 5
// PlaceUnit ( Cyrus , x , y , 35 , false ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_VAR 0 5
1685: PPUSH
1686: LD_VAR 0 6
1690: PPUSH
1691: LD_INT 35
1693: PPUSH
1694: LD_INT 0
1696: PPUSH
1697: CALL 3870 0 5
// PlaceUnit ( Denis , x , y , 35 , false ) ;
1701: LD_EXP 7
1705: PPUSH
1706: LD_VAR 0 5
1710: PPUSH
1711: LD_VAR 0 6
1715: PPUSH
1716: LD_INT 35
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL 3870 0 5
// PlaceUnit ( Brown , x , y , 35 , false ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_VAR 0 5
1735: PPUSH
1736: LD_VAR 0 6
1740: PPUSH
1741: LD_INT 35
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL 3870 0 5
// PlaceUnit ( Gladstone , x , y , 35 , false ) ;
1751: LD_EXP 9
1755: PPUSH
1756: LD_VAR 0 5
1760: PPUSH
1761: LD_VAR 0 6
1765: PPUSH
1766: LD_INT 35
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL 3870 0 5
// PlaceUnit ( Houten , x , y , 35 , false ) ;
1776: LD_EXP 10
1780: PPUSH
1781: LD_VAR 0 5
1785: PPUSH
1786: LD_VAR 0 6
1790: PPUSH
1791: LD_INT 35
1793: PPUSH
1794: LD_INT 0
1796: PPUSH
1797: CALL 3870 0 5
// PlaceUnit ( Cornel , x , y , 35 , false ) ;
1801: LD_EXP 11
1805: PPUSH
1806: LD_VAR 0 5
1810: PPUSH
1811: LD_VAR 0 6
1815: PPUSH
1816: LD_INT 35
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL 3870 0 5
// PlaceUnit ( Gary , x , y , 35 , false ) ;
1826: LD_EXP 12
1830: PPUSH
1831: LD_VAR 0 5
1835: PPUSH
1836: LD_VAR 0 6
1840: PPUSH
1841: LD_INT 35
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL 3870 0 5
// PlaceUnit ( Frank , x , y , 35 , false ) ;
1851: LD_EXP 13
1855: PPUSH
1856: LD_VAR 0 5
1860: PPUSH
1861: LD_VAR 0 6
1865: PPUSH
1866: LD_INT 35
1868: PPUSH
1869: LD_INT 0
1871: PPUSH
1872: CALL 3870 0 5
// PlaceUnit ( Kikuchi , x , y , 35 , false ) ;
1876: LD_EXP 14
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: LD_VAR 0 6
1890: PPUSH
1891: LD_INT 35
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL 3870 0 5
// SetClass ( JMM , 1 ) ;
1901: LD_EXP 1
1905: PPUSH
1906: LD_INT 1
1908: PPUSH
1909: CALL_OW 336
// others12 := CreateCharacterSet ( 12_other_survivors ) ;
1913: LD_ADDR_EXP 16
1917: PUSH
1918: LD_STRING 12_other_survivors
1920: PPUSH
1921: CALL_OW 31
1925: ST_TO_ADDR
// others11 := CreateCharacterSet ( 12_others ) ;
1926: LD_ADDR_EXP 17
1930: PUSH
1931: LD_STRING 12_others
1933: PPUSH
1934: CALL_OW 31
1938: ST_TO_ADDR
// for i in others11 do
1939: LD_ADDR_VAR 0 2
1943: PUSH
1944: LD_EXP 17
1948: PUSH
1949: FOR_IN
1950: IFFALSE 1997
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 4
1961: PUSH
1962: LD_INT 1
1964: ARRAY
1965: PPUSH
1966: CALL_OW 250
1970: PPUSH
1971: LD_VAR 0 4
1975: PUSH
1976: LD_INT 1
1978: ARRAY
1979: PPUSH
1980: CALL_OW 251
1984: PPUSH
1985: LD_INT 15
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL 3870 0 5
1995: GO 1949
1997: POP
1998: POP
// for i in others12 do
1999: LD_ADDR_VAR 0 2
2003: PUSH
2004: LD_EXP 16
2008: PUSH
2009: FOR_IN
2010: IFFALSE 2057
// PlaceUnit ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2012: LD_VAR 0 2
2016: PPUSH
2017: LD_VAR 0 4
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PPUSH
2026: CALL_OW 250
2030: PPUSH
2031: LD_VAR 0 4
2035: PUSH
2036: LD_INT 1
2038: ARRAY
2039: PPUSH
2040: CALL_OW 251
2044: PPUSH
2045: LD_INT 15
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL 3870 0 5
2055: GO 2009
2057: POP
2058: POP
// end ;
2059: LD_VAR 0 1
2063: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
2064: LD_INT 0
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
2070: PPUSH
2071: PPUSH
2072: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
2073: LD_INT 113
2075: PPUSH
2076: LD_INT 50
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
2086: LD_INT 104
2088: PPUSH
2089: LD_INT 24
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
2099: LD_INT 43
2101: PPUSH
2102: LD_INT 79
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
2112: LD_INT 43
2114: PPUSH
2115: LD_INT 68
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2125: LD_INT 99
2127: PPUSH
2128: LD_INT 114
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2138: LD_INT 103
2140: PPUSH
2141: LD_INT 114
2143: PPUSH
2144: LD_INT 1
2146: PPUSH
2147: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2151: LD_INT 152
2153: PPUSH
2154: LD_INT 85
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2164: LD_INT 156
2166: PPUSH
2167: LD_INT 92
2169: PPUSH
2170: LD_INT 1
2172: PPUSH
2173: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: LD_STRING 10_EpsilonBase
2184: PPUSH
2185: EMPTY
2186: PPUSH
2187: CALL_OW 30
2191: ST_TO_ADDR
// if not blist then
2192: LD_VAR 0 2
2196: NOT
2197: IFFALSE 2201
// exit ;
2199: GO 3422
// for i in blist do
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: LD_VAR 0 2
2210: PUSH
2211: FOR_IN
2212: IFFALSE 2254
// if i [ 1 ] = b_depot or i [ 1 ] = b_warehouse then
2214: LD_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PUSH
2223: LD_INT 0
2225: EQUAL
2226: PUSH
2227: LD_VAR 0 3
2231: PUSH
2232: LD_INT 1
2234: ARRAY
2235: PUSH
2236: LD_INT 1
2238: EQUAL
2239: OR
2240: IFFALSE 2252
// begin baseCorrect := 1 ;
2242: LD_ADDR_VAR 0 6
2246: PUSH
2247: LD_INT 1
2249: ST_TO_ADDR
// break ;
2250: GO 2254
// end ;
2252: GO 2211
2254: POP
2255: POP
// if baseCorrect = 0 then
2256: LD_VAR 0 6
2260: PUSH
2261: LD_INT 0
2263: EQUAL
2264: IFFALSE 2971
// begin uc_side := 1 ;
2266: LD_ADDR_OWVAR 20
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// uc_nation := 1 ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// bc_level := 10 ;
2282: LD_ADDR_OWVAR 43
2286: PUSH
2287: LD_INT 10
2289: ST_TO_ADDR
// bc_type := b_warehouse ;
2290: LD_ADDR_OWVAR 42
2294: PUSH
2295: LD_INT 1
2297: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2298: LD_INT 99
2300: PPUSH
2301: LD_INT 24
2303: PPUSH
2304: LD_INT 2
2306: PPUSH
2307: CALL_OW 47
// bc_type := b_bunker ;
2311: LD_ADDR_OWVAR 42
2315: PUSH
2316: LD_INT 32
2318: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2319: LD_ADDR_VAR 0 7
2323: PUSH
2324: LD_INT 124
2326: PPUSH
2327: LD_INT 42
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: CALL_OW 47
2337: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2338: LD_VAR 0 7
2342: PPUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 5
2348: PUSH
2349: LD_INT 6
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: CALL_OW 12
2367: ARRAY
2368: PPUSH
2369: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2373: LD_ADDR_VAR 0 7
2377: PUSH
2378: LD_INT 111
2380: PPUSH
2381: LD_INT 16
2383: PPUSH
2384: LD_INT 4
2386: PPUSH
2387: CALL_OW 47
2391: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2392: LD_VAR 0 7
2396: PPUSH
2397: LD_INT 4
2399: PUSH
2400: LD_INT 5
2402: PUSH
2403: LD_INT 6
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 1
2413: PPUSH
2414: LD_INT 3
2416: PPUSH
2417: CALL_OW 12
2421: ARRAY
2422: PPUSH
2423: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2427: LD_ADDR_VAR 0 7
2431: PUSH
2432: LD_INT 113
2434: PPUSH
2435: LD_INT 21
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: CALL_OW 47
2445: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2446: LD_VAR 0 7
2450: PPUSH
2451: LD_INT 4
2453: PUSH
2454: LD_INT 5
2456: PUSH
2457: LD_INT 6
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 1
2467: PPUSH
2468: LD_INT 3
2470: PPUSH
2471: CALL_OW 12
2475: ARRAY
2476: PPUSH
2477: CALL_OW 431
// bc_type := 33 ;
2481: LD_ADDR_OWVAR 42
2485: PUSH
2486: LD_INT 33
2488: ST_TO_ADDR
// building := CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_INT 95
2496: PPUSH
2497: LD_INT 41
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL_OW 47
2507: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2508: LD_VAR 0 7
2512: PPUSH
2513: LD_INT 4
2515: PUSH
2516: LD_INT 5
2518: PUSH
2519: LD_INT 6
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ARRAY
2538: PPUSH
2539: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2543: LD_ADDR_VAR 0 7
2547: PUSH
2548: LD_INT 97
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: CALL_OW 47
2561: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2562: LD_VAR 0 7
2566: PPUSH
2567: LD_INT 4
2569: PUSH
2570: LD_INT 5
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 1
2583: PPUSH
2584: LD_INT 3
2586: PPUSH
2587: CALL_OW 12
2591: ARRAY
2592: PPUSH
2593: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2597: LD_ADDR_VAR 0 7
2601: PUSH
2602: LD_INT 86
2604: PPUSH
2605: LD_INT 19
2607: PPUSH
2608: LD_INT 1
2610: PPUSH
2611: CALL_OW 47
2615: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2616: LD_VAR 0 7
2620: PPUSH
2621: LD_INT 4
2623: PUSH
2624: LD_INT 5
2626: PUSH
2627: LD_INT 6
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 1
2637: PPUSH
2638: LD_INT 3
2640: PPUSH
2641: CALL_OW 12
2645: ARRAY
2646: PPUSH
2647: CALL_OW 431
// bc_type := 30 ;
2651: LD_ADDR_OWVAR 42
2655: PUSH
2656: LD_INT 30
2658: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2659: LD_INT 104
2661: PPUSH
2662: LD_INT 24
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 47
// bc_type := 29 ;
2672: LD_ADDR_OWVAR 42
2676: PUSH
2677: LD_INT 29
2679: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2680: LD_INT 113
2682: PPUSH
2683: LD_INT 50
2685: PPUSH
2686: LD_INT 3
2688: PPUSH
2689: CALL_OW 47
// bc_type := 27 ;
2693: LD_ADDR_OWVAR 42
2697: PUSH
2698: LD_INT 27
2700: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2701: LD_INT 98
2703: PPUSH
2704: LD_INT 26
2706: PPUSH
2707: LD_INT 2
2709: PPUSH
2710: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2714: LD_INT 95
2716: PPUSH
2717: LD_INT 23
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: CALL_OW 47
// bc_type := 28 ;
2727: LD_ADDR_OWVAR 42
2731: PUSH
2732: LD_INT 28
2734: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2735: LD_INT 107
2737: PPUSH
2738: LD_INT 32
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: CALL_OW 47
// bc_type := 3 ;
2748: LD_ADDR_OWVAR 42
2752: PUSH
2753: LD_INT 3
2755: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2756: LD_INT 106
2758: PPUSH
2759: LD_INT 42
2761: PPUSH
2762: LD_INT 0
2764: PPUSH
2765: CALL_OW 47
// bc_type := 16 ;
2769: LD_ADDR_OWVAR 42
2773: PUSH
2774: LD_INT 16
2776: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2777: LD_INT 109
2779: PPUSH
2780: LD_INT 45
2782: PPUSH
2783: LD_INT 5
2785: PPUSH
2786: CALL_OW 47
// bc_type := 17 ;
2790: LD_ADDR_OWVAR 42
2794: PUSH
2795: LD_INT 17
2797: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2798: LD_INT 106
2800: PPUSH
2801: LD_INT 46
2803: PPUSH
2804: LD_INT 0
2806: PPUSH
2807: CALL_OW 47
// bc_type := 19 ;
2811: LD_ADDR_OWVAR 42
2815: PUSH
2816: LD_INT 19
2818: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2819: LD_INT 103
2821: PPUSH
2822: LD_INT 42
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: CALL_OW 47
// bc_type := 21 ;
2832: LD_ADDR_OWVAR 42
2836: PUSH
2837: LD_INT 21
2839: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2840: LD_INT 110
2842: PPUSH
2843: LD_INT 42
2845: PPUSH
2846: LD_INT 4
2848: PPUSH
2849: CALL_OW 47
// bc_type := 5 ;
2853: LD_ADDR_OWVAR 42
2857: PUSH
2858: LD_INT 5
2860: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2861: LD_INT 114
2863: PPUSH
2864: LD_INT 55
2866: PPUSH
2867: LD_INT 5
2869: PPUSH
2870: CALL_OW 47
// bc_type := 36 ;
2874: LD_ADDR_OWVAR 42
2878: PUSH
2879: LD_INT 36
2881: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2882: LD_INT 96
2884: PPUSH
2885: LD_INT 28
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 47
// bc_type := b_lab_full ;
2895: LD_ADDR_OWVAR 42
2899: PUSH
2900: LD_INT 8
2902: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
2903: LD_ADDR_OWVAR 44
2907: PUSH
2908: LD_INT 15
2910: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
2911: LD_ADDR_OWVAR 45
2915: PUSH
2916: LD_INT 11
2918: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2919: LD_INT 116
2921: PPUSH
2922: LD_INT 38
2924: PPUSH
2925: LD_INT 4
2927: PPUSH
2928: CALL_OW 47
// bc_type := b_lab_full ;
2932: LD_ADDR_OWVAR 42
2936: PUSH
2937: LD_INT 8
2939: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2940: LD_ADDR_OWVAR 44
2944: PUSH
2945: LD_INT 10
2947: ST_TO_ADDR
// bc_kind2 := b_lab_computer ;
2948: LD_ADDR_OWVAR 45
2952: PUSH
2953: LD_INT 12
2955: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2956: LD_INT 112
2958: PPUSH
2959: LD_INT 29
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: CALL_OW 47
// end else
2969: GO 3219
// begin uc_side := 1 ;
2971: LD_ADDR_OWVAR 20
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// for i in blist do
2979: LD_ADDR_VAR 0 3
2983: PUSH
2984: LD_VAR 0 2
2988: PUSH
2989: FOR_IN
2990: IFFALSE 3217
// begin InitBc ;
2992: CALL_OW 21
// uc_nation := i [ 6 ] ;
2996: LD_ADDR_OWVAR 21
3000: PUSH
3001: LD_VAR 0 3
3005: PUSH
3006: LD_INT 6
3008: ARRAY
3009: ST_TO_ADDR
// bc_type := i [ 1 ] ;
3010: LD_ADDR_OWVAR 42
3014: PUSH
3015: LD_VAR 0 3
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: ST_TO_ADDR
// bc_level := i [ 5 ] ;
3024: LD_ADDR_OWVAR 43
3028: PUSH
3029: LD_VAR 0 3
3033: PUSH
3034: LD_INT 5
3036: ARRAY
3037: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
3038: LD_VAR 0 3
3042: PUSH
3043: LD_INT 1
3045: ARRAY
3046: PUSH
3047: LD_INT 7
3049: PUSH
3050: LD_INT 8
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: IN
3057: IFFALSE 3087
// begin bc_kind1 := i [ 7 ] ;
3059: LD_ADDR_OWVAR 44
3063: PUSH
3064: LD_VAR 0 3
3068: PUSH
3069: LD_INT 7
3071: ARRAY
3072: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
3073: LD_ADDR_OWVAR 45
3077: PUSH
3078: LD_VAR 0 3
3082: PUSH
3083: LD_INT 8
3085: ARRAY
3086: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3087: LD_ADDR_VAR 0 4
3091: PUSH
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 2
3099: ARRAY
3100: PPUSH
3101: LD_VAR 0 3
3105: PUSH
3106: LD_INT 3
3108: ARRAY
3109: PPUSH
3110: LD_VAR 0 3
3114: PUSH
3115: LD_INT 4
3117: ARRAY
3118: PPUSH
3119: CALL_OW 47
3123: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
3124: LD_VAR 0 4
3128: PPUSH
3129: CALL_OW 266
3133: PUSH
3134: LD_INT 32
3136: PUSH
3137: LD_INT 33
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: IN
3144: IFFALSE 3215
// if i [ 7 ] then
3146: LD_VAR 0 3
3150: PUSH
3151: LD_INT 7
3153: ARRAY
3154: IFFALSE 3176
// PlaceWeaponTurret ( b , i [ 7 ] ) else
3156: LD_VAR 0 4
3160: PPUSH
3161: LD_VAR 0 3
3165: PUSH
3166: LD_INT 7
3168: ARRAY
3169: PPUSH
3170: CALL_OW 431
3174: GO 3215
// PlaceWeaponTurret ( b , [ us_radar , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ rand ( 1 , 4 ) ] ) ;
3176: LD_VAR 0 4
3180: PPUSH
3181: LD_INT 11
3183: PUSH
3184: LD_INT 7
3186: PUSH
3187: LD_INT 4
3189: PUSH
3190: LD_INT 5
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: PUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 4
3204: PPUSH
3205: CALL_OW 12
3209: ARRAY
3210: PPUSH
3211: CALL_OW 431
// end ;
3215: GO 2989
3217: POP
3218: POP
// end ; uc_side := 1 ;
3219: LD_ADDR_OWVAR 20
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// uc_nation := 1 ;
3227: LD_ADDR_OWVAR 21
3231: PUSH
3232: LD_INT 1
3234: ST_TO_ADDR
// for i := 1 to 8 do
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: DOUBLE
3241: LD_INT 1
3243: DEC
3244: ST_TO_ADDR
3245: LD_INT 8
3247: PUSH
3248: FOR_TO
3249: IFFALSE 3420
// begin vc_chassis := [ us_morphling , us_morphling , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
3251: LD_ADDR_OWVAR 37
3255: PUSH
3256: LD_INT 5
3258: PUSH
3259: LD_INT 5
3261: PUSH
3262: LD_INT 3
3264: PUSH
3265: LD_INT 4
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: PUSH
3274: LD_INT 1
3276: PPUSH
3277: LD_INT 4
3279: PPUSH
3280: CALL_OW 12
3284: ARRAY
3285: ST_TO_ADDR
// vc_engine := engine_siberite ;
3286: LD_ADDR_OWVAR 39
3290: PUSH
3291: LD_INT 3
3293: ST_TO_ADDR
// vc_control := control_manual ;
3294: LD_ADDR_OWVAR 38
3298: PUSH
3299: LD_INT 1
3301: ST_TO_ADDR
// if vc_chassis = us_heavy_tracked then
3302: LD_OWVAR 37
3306: PUSH
3307: LD_INT 4
3309: EQUAL
3310: IFFALSE 3322
// vc_weapon := us_heavy_gun else
3312: LD_ADDR_OWVAR 40
3316: PUSH
3317: LD_INT 6
3319: ST_TO_ADDR
3320: GO 3367
// vc_weapon := [ us_rocket_launcher , us_laser , us_cargo_bay , us_crane , us_laser , us_laser ] [ i mod 6 + 1 ] ;
3322: LD_ADDR_OWVAR 40
3326: PUSH
3327: LD_INT 7
3329: PUSH
3330: LD_INT 9
3332: PUSH
3333: LD_INT 12
3335: PUSH
3336: LD_INT 13
3338: PUSH
3339: LD_INT 9
3341: PUSH
3342: LD_INT 9
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: PUSH
3353: LD_VAR 0 3
3357: PUSH
3358: LD_INT 6
3360: MOD
3361: PUSH
3362: LD_INT 1
3364: PLUS
3365: ARRAY
3366: ST_TO_ADDR
// un := CreateVehicle ;
3367: LD_ADDR_VAR 0 5
3371: PUSH
3372: CALL_OW 45
3376: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3377: LD_VAR 0 5
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: LD_INT 5
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: CALL_OW 233
// PlaceUnitXYR ( un , 78 , 31 , 8 , false ) ;
3397: LD_VAR 0 5
3401: PPUSH
3402: LD_INT 78
3404: PPUSH
3405: LD_INT 31
3407: PPUSH
3408: LD_INT 8
3410: PPUSH
3411: LD_INT 0
3413: PPUSH
3414: CALL_OW 50
// end ;
3418: GO 3248
3420: POP
3421: POP
// end ;
3422: LD_VAR 0 1
3426: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 6 then
3433: LD_INT 22
3435: PUSH
3436: LD_INT 1
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: LD_INT 21
3445: PUSH
3446: LD_INT 1
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PPUSH
3457: CALL_OW 69
3461: PUSH
3462: LD_INT 6
3464: LESS
3465: IFFALSE 3692
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3467: LD_ADDR_VAR 0 4
3471: PUSH
3472: LD_INT 22
3474: PUSH
3475: LD_INT 1
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 2
3484: PUSH
3485: LD_INT 30
3487: PUSH
3488: LD_INT 0
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: LD_INT 30
3497: PUSH
3498: LD_INT 1
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 69
3518: ST_TO_ADDR
// uc_side := 1 ;
3519: LD_ADDR_OWVAR 20
3523: PUSH
3524: LD_INT 1
3526: ST_TO_ADDR
// uc_nation := 1 ;
3527: LD_ADDR_OWVAR 21
3531: PUSH
3532: LD_INT 1
3534: ST_TO_ADDR
// for i := 1 to 6 do
3535: LD_ADDR_VAR 0 2
3539: PUSH
3540: DOUBLE
3541: LD_INT 1
3543: DEC
3544: ST_TO_ADDR
3545: LD_INT 6
3547: PUSH
3548: FOR_TO
3549: IFFALSE 3690
// begin hc_gallery :=  ;
3551: LD_ADDR_OWVAR 33
3555: PUSH
3556: LD_STRING 
3558: ST_TO_ADDR
// hc_name :=  ;
3559: LD_ADDR_OWVAR 26
3563: PUSH
3564: LD_STRING 
3566: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 1
3572: PUSH
3573: LD_INT 2
3575: PUSH
3576: LD_INT 3
3578: PUSH
3579: LD_INT 4
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_INT 4
3593: PPUSH
3594: CALL_OW 12
3598: ARRAY
3599: PPUSH
3600: LD_INT 5
3602: PPUSH
3603: LD_INT 8
3605: PPUSH
3606: CALL_OW 12
3610: PPUSH
3611: CALL_OW 380
// un := CreateHuman ;
3615: LD_ADDR_VAR 0 3
3619: PUSH
3620: CALL_OW 44
3624: ST_TO_ADDR
// randomsEpsilon := Join ( randomsEpsilon , un ) ;
3625: LD_ADDR_EXP 18
3629: PUSH
3630: LD_EXP 18
3634: PPUSH
3635: LD_VAR 0 3
3639: PPUSH
3640: CALL 63041 0 2
3644: ST_TO_ADDR
// PlaceUnit ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 4
3654: PUSH
3655: LD_INT 1
3657: ARRAY
3658: PPUSH
3659: CALL_OW 250
3663: PPUSH
3664: LD_VAR 0 4
3668: PUSH
3669: LD_INT 1
3671: ARRAY
3672: PPUSH
3673: CALL_OW 251
3677: PPUSH
3678: LD_INT 15
3680: PPUSH
3681: LD_INT 0
3683: PPUSH
3684: CALL 3870 0 5
// end ;
3688: GO 3548
3690: POP
3691: POP
// end ; end ; end_of_file
3692: LD_VAR 0 1
3696: RET
// export function PrepareUnit2 ( ident , existMode ) ; var unit ; begin
3697: LD_INT 0
3699: PPUSH
3700: PPUSH
// if existMode then
3701: LD_VAR 0 2
3705: IFFALSE 3840
// begin if TestCharacters ( mission_prefix_prev & ident ) then
3707: LD_EXP 21
3711: PUSH
3712: LD_VAR 0 1
3716: STR
3717: PPUSH
3718: CALL_OW 28
3722: IFFALSE 3747
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
3724: LD_ADDR_VAR 0 4
3728: PUSH
3729: LD_EXP 21
3733: PUSH
3734: LD_VAR 0 1
3738: STR
3739: PPUSH
3740: CALL_OW 34
3744: ST_TO_ADDR
3745: GO 3838
// begin if TestCharacters ( 11_ & ident ) then
3747: LD_STRING 11_
3749: PUSH
3750: LD_VAR 0 1
3754: STR
3755: PPUSH
3756: CALL_OW 28
3760: IFFALSE 3783
// unit := CreateCharacter ( 11_ & ident ) else
3762: LD_ADDR_VAR 0 4
3766: PUSH
3767: LD_STRING 11_
3769: PUSH
3770: LD_VAR 0 1
3774: STR
3775: PPUSH
3776: CALL_OW 34
3780: ST_TO_ADDR
3781: GO 3838
// if TestCharacters ( 10c_ & ident ) then
3783: LD_STRING 10c_
3785: PUSH
3786: LD_VAR 0 1
3790: STR
3791: PPUSH
3792: CALL_OW 28
3796: IFFALSE 3819
// unit := CreateCharacter ( 10c_ & ident ) else
3798: LD_ADDR_VAR 0 4
3802: PUSH
3803: LD_STRING 10c_
3805: PUSH
3806: LD_VAR 0 1
3810: STR
3811: PPUSH
3812: CALL_OW 34
3816: ST_TO_ADDR
3817: GO 3838
// unit := CreateCharacter ( 10_ & ident ) ;
3819: LD_ADDR_VAR 0 4
3823: PUSH
3824: LD_STRING 10_
3826: PUSH
3827: LD_VAR 0 1
3831: STR
3832: PPUSH
3833: CALL_OW 34
3837: ST_TO_ADDR
// end ; end else
3838: GO 3855
// unit := NewCharacter ( ident ) ;
3840: LD_ADDR_VAR 0 4
3844: PUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: CALL_OW 25
3854: ST_TO_ADDR
// result := unit ;
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: LD_VAR 0 4
3864: ST_TO_ADDR
// end ;
3865: LD_VAR 0 3
3869: RET
// export function PlaceUnit ( unit , x , y , d , mode ) ; var i , tmp ; begin
3870: LD_INT 0
3872: PPUSH
3873: PPUSH
3874: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_factory ] ] ] ) ;
3875: LD_ADDR_VAR 0 8
3879: PUSH
3880: LD_INT 22
3882: PUSH
3883: LD_VAR 0 1
3887: PPUSH
3888: CALL_OW 255
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PUSH
3897: LD_INT 21
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: PUSH
3907: LD_INT 3
3909: PUSH
3910: LD_INT 30
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: PPUSH
3929: CALL_OW 69
3933: ST_TO_ADDR
// if not tmp then
3934: LD_VAR 0 8
3938: NOT
3939: IFFALSE 3972
// begin PlaceUnitXYR ( unit , x , y , d , mode ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_VAR 0 2
3950: PPUSH
3951: LD_VAR 0 3
3955: PPUSH
3956: LD_VAR 0 4
3960: PPUSH
3961: LD_VAR 0 5
3965: PPUSH
3966: CALL_OW 50
// exit ;
3970: GO 4218
// end ; for i in tmp do
3972: LD_ADDR_VAR 0 7
3976: PUSH
3977: LD_VAR 0 8
3981: PUSH
3982: FOR_IN
3983: IFFALSE 4187
// if IsNotFull ( i ) then
3985: LD_VAR 0 7
3989: PPUSH
3990: CALL 27933 0 1
3994: IFFALSE 4185
// begin PlaceHumanInUnit ( unit , i ) ;
3996: LD_VAR 0 1
4000: PPUSH
4001: LD_VAR 0 7
4005: PPUSH
4006: CALL_OW 52
// if GetBType ( i ) in [ b_barracks , b_armoury , b_breastwork , b_bunker ] then
4010: LD_VAR 0 7
4014: PPUSH
4015: CALL_OW 266
4019: PUSH
4020: LD_INT 5
4022: PUSH
4023: LD_INT 4
4025: PUSH
4026: LD_INT 31
4028: PUSH
4029: LD_INT 32
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: IN
4038: IFFALSE 4071
// begin SetClass ( unit , class_soldier ) ;
4040: LD_VAR 0 1
4044: PPUSH
4045: LD_INT 1
4047: PPUSH
4048: CALL_OW 336
// SetDir ( unit , ReverseDir ( i ) ) ;
4052: LD_VAR 0 1
4056: PPUSH
4057: LD_VAR 0 7
4061: PPUSH
4062: CALL 58290 0 1
4066: PPUSH
4067: CALL_OW 233
// end ; if GetBType ( i ) in [ b_workshop , b_factory , b_control_tower ] then
4071: LD_VAR 0 7
4075: PPUSH
4076: CALL_OW 266
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: LD_INT 3
4086: PUSH
4087: LD_INT 36
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: IN
4095: IFFALSE 4109
// SetClass ( unit , class_mechanic ) ;
4097: LD_VAR 0 1
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 336
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
4109: LD_VAR 0 7
4113: PPUSH
4114: CALL_OW 266
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: LD_INT 1
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: IN
4129: IFFALSE 4143
// SetClass ( unit , class_engineer ) ;
4131: LD_VAR 0 1
4135: PPUSH
4136: LD_INT 2
4138: PPUSH
4139: CALL_OW 336
// if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4143: LD_VAR 0 7
4147: PPUSH
4148: CALL_OW 266
4152: PUSH
4153: LD_INT 6
4155: PUSH
4156: LD_INT 7
4158: PUSH
4159: LD_INT 8
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: IN
4167: IFFALSE 4181
// SetClass ( unit , class_scientistic ) ;
4169: LD_VAR 0 1
4173: PPUSH
4174: LD_INT 4
4176: PPUSH
4177: CALL_OW 336
// exit ;
4181: POP
4182: POP
4183: GO 4218
// end ;
4185: GO 3982
4187: POP
4188: POP
// PlaceUnitXYR ( unit , x , y , d , mode ) ;
4189: LD_VAR 0 1
4193: PPUSH
4194: LD_VAR 0 2
4198: PPUSH
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_VAR 0 4
4208: PPUSH
4209: LD_VAR 0 5
4213: PPUSH
4214: CALL_OW 50
// end ;
4218: LD_VAR 0 6
4222: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
4223: LD_INT 0
4225: PPUSH
// if unit in selectedTab then
4226: LD_VAR 0 1
4230: PUSH
4231: LD_VAR 0 3
4235: IN
4236: IFFALSE 4258
// SaveCharacters ( unit , 13c_ & unitString ) else
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_STRING 13c_
4245: PUSH
4246: LD_VAR 0 2
4250: STR
4251: PPUSH
4252: CALL_OW 38
4256: GO 4276
// SaveCharacters ( unit , 13s_ & unitString ) ;
4258: LD_VAR 0 1
4262: PPUSH
4263: LD_STRING 13s_
4265: PUSH
4266: LD_VAR 0 2
4270: STR
4271: PPUSH
4272: CALL_OW 38
// end ;
4276: LD_VAR 0 4
4280: RET
// export selected , othersSelect ; export function SelectAndSaveCharacters ; var i , tmp , othersInBase ; begin
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
// selected := [ ] ;
4287: LD_ADDR_EXP 22
4291: PUSH
4292: EMPTY
4293: ST_TO_ADDR
// othersSelect := [ ] ;
4294: LD_ADDR_EXP 23
4298: PUSH
4299: EMPTY
4300: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4301: LD_ADDR_VAR 0 3
4305: PUSH
4306: LD_EXP 3
4310: PUSH
4311: LD_EXP 4
4315: PUSH
4316: LD_EXP 5
4320: PUSH
4321: LD_EXP 6
4325: PUSH
4326: LD_EXP 8
4330: PUSH
4331: LD_EXP 9
4335: PUSH
4336: LD_EXP 10
4340: PUSH
4341: LD_EXP 11
4345: PUSH
4346: LD_EXP 12
4350: PUSH
4351: LD_EXP 13
4355: PUSH
4356: LD_EXP 14
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: ST_TO_ADDR
// tmp := tmp ^ others11 ;
4374: LD_ADDR_VAR 0 3
4378: PUSH
4379: LD_VAR 0 3
4383: PUSH
4384: LD_EXP 17
4388: ADD
4389: ST_TO_ADDR
// tmp := tmp ^ others12 ;
4390: LD_ADDR_VAR 0 3
4394: PUSH
4395: LD_VAR 0 3
4399: PUSH
4400: LD_EXP 16
4404: ADD
4405: ST_TO_ADDR
// tmp := tmp ^ randomsEpsilon ;
4406: LD_ADDR_VAR 0 3
4410: PUSH
4411: LD_VAR 0 3
4415: PUSH
4416: LD_EXP 18
4420: ADD
4421: ST_TO_ADDR
// for i in tmp do
4422: LD_ADDR_VAR 0 2
4426: PUSH
4427: LD_VAR 0 3
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4472
// if GetClass ( i ) = 8 then
4435: LD_VAR 0 2
4439: PPUSH
4440: CALL_OW 257
4444: PUSH
4445: LD_INT 8
4447: EQUAL
4448: IFFALSE 4470
// SetClass ( i , rand ( 1 , 4 ) ) ;
4450: LD_VAR 0 2
4454: PPUSH
4455: LD_INT 1
4457: PPUSH
4458: LD_INT 4
4460: PPUSH
4461: CALL_OW 12
4465: PPUSH
4466: CALL_OW 336
4470: GO 4432
4472: POP
4473: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
4474: LD_ADDR_EXP 22
4478: PUSH
4479: LD_STRING 1
4481: PPUSH
4482: LD_INT 6
4484: PPUSH
4485: LD_INT 6
4487: PPUSH
4488: LD_INT -5
4490: PUSH
4491: LD_EXP 1
4495: PUSH
4496: LD_EXP 15
4500: PUSH
4501: LD_INT -2
4503: PUSH
4504: LD_INT -3
4506: PUSH
4507: LD_INT -5
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: PUSH
4518: LD_VAR 0 3
4522: ADD
4523: PUSH
4524: LD_INT -6
4526: PUSH
4527: LD_INT -4
4529: PUSH
4530: LD_EXP 2
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: ADD
4540: PPUSH
4541: LD_INT 1
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 2
4553: PUSH
4554: LD_INT 1
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 3
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 4
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 5
4583: PUSH
4584: LD_INT 0
4586: PUSH
4587: LD_INT 2
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 42
4606: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4607: LD_ADDR_EXP 23
4611: PUSH
4612: LD_EXP 22
4616: PUSH
4617: LD_EXP 3
4621: PUSH
4622: LD_EXP 4
4626: PUSH
4627: LD_EXP 5
4631: PUSH
4632: LD_EXP 6
4636: PUSH
4637: LD_EXP 7
4641: PUSH
4642: LD_EXP 8
4646: PUSH
4647: LD_EXP 9
4651: PUSH
4652: LD_EXP 10
4656: PUSH
4657: LD_EXP 11
4661: PUSH
4662: LD_EXP 12
4666: PUSH
4667: LD_EXP 13
4671: PUSH
4672: LD_EXP 14
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: DIFF
4691: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4692: LD_ADDR_VAR 0 4
4696: PUSH
4697: LD_VAR 0 3
4701: PUSH
4702: LD_EXP 22
4706: DIFF
4707: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_VAR 0 4
4717: PUSH
4718: LD_EXP 3
4722: PUSH
4723: LD_EXP 4
4727: PUSH
4728: LD_EXP 5
4732: PUSH
4733: LD_EXP 6
4737: PUSH
4738: LD_EXP 7
4742: PUSH
4743: LD_EXP 8
4747: PUSH
4748: LD_EXP 9
4752: PUSH
4753: LD_EXP 10
4757: PUSH
4758: LD_EXP 11
4762: PUSH
4763: LD_EXP 12
4767: PUSH
4768: LD_EXP 13
4772: PUSH
4773: LD_EXP 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: DIFF
4792: ST_TO_ADDR
// SaveCharacters ( othersInBase , 13s_others ) ;
4793: LD_VAR 0 4
4797: PPUSH
4798: LD_STRING 13s_others
4800: PPUSH
4801: CALL_OW 38
// SaveCharacters ( othersSelect , 13c_others ) ;
4805: LD_EXP 23
4809: PPUSH
4810: LD_STRING 13c_others
4812: PPUSH
4813: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4817: LD_EXP 1
4821: PPUSH
4822: LD_STRING 13c_JMM
4824: PPUSH
4825: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4829: LD_EXP 15
4833: PPUSH
4834: LD_STRING 13c_Stevens
4836: PPUSH
4837: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4841: LD_EXP 3
4845: PPUSH
4846: LD_STRING Lisa
4848: PPUSH
4849: LD_EXP 22
4853: PPUSH
4854: CALL 4223 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4858: LD_EXP 8
4862: PPUSH
4863: LD_STRING Brown
4865: PPUSH
4866: LD_EXP 22
4870: PPUSH
4871: CALL 4223 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4875: LD_EXP 4
4879: PPUSH
4880: LD_STRING Donaldson
4882: PPUSH
4883: LD_EXP 22
4887: PPUSH
4888: CALL 4223 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4892: LD_EXP 5
4896: PPUSH
4897: LD_STRING Bobby
4899: PPUSH
4900: LD_EXP 22
4904: PPUSH
4905: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4909: LD_EXP 6
4913: PPUSH
4914: LD_STRING Cyrus
4916: PPUSH
4917: LD_EXP 22
4921: PPUSH
4922: CALL 4223 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4926: LD_EXP 7
4930: PPUSH
4931: LD_STRING Denis
4933: PPUSH
4934: LD_EXP 22
4938: PPUSH
4939: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4943: LD_EXP 9
4947: PPUSH
4948: LD_STRING Gladstone
4950: PPUSH
4951: LD_EXP 22
4955: PPUSH
4956: CALL 4223 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4960: LD_EXP 10
4964: PPUSH
4965: LD_STRING Houten
4967: PPUSH
4968: LD_EXP 22
4972: PPUSH
4973: CALL 4223 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4977: LD_EXP 11
4981: PPUSH
4982: LD_STRING Cornel
4984: PPUSH
4985: LD_EXP 22
4989: PPUSH
4990: CALL 4223 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4994: LD_EXP 12
4998: PPUSH
4999: LD_STRING Gary
5001: PPUSH
5002: LD_EXP 22
5006: PPUSH
5007: CALL 4223 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
5011: LD_EXP 13
5015: PPUSH
5016: LD_STRING Frank
5018: PPUSH
5019: LD_EXP 22
5023: PPUSH
5024: CALL 4223 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
5028: LD_EXP 14
5032: PPUSH
5033: LD_STRING Kikuchi
5035: PPUSH
5036: LD_EXP 22
5040: PPUSH
5041: CALL 4223 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5045: LD_INT 22
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: LD_INT 21
5057: PUSH
5058: LD_INT 1
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 69
5073: PPUSH
5074: LD_INT 4
5076: PPUSH
5077: CALL_OW 235
// SetSide ( selected , 1 ) ;
5081: LD_EXP 22
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
5093: LD_EXP 1
5097: PUSH
5098: LD_EXP 15
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: LD_INT 1
5109: PPUSH
5110: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_INT 22
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 21
5131: PUSH
5132: LD_INT 1
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PPUSH
5143: CALL_OW 69
5147: PUSH
5148: FOR_IN
5149: IFFALSE 5162
// ComExit ( i ) ;
5151: LD_VAR 0 2
5155: PPUSH
5156: CALL 63439 0 1
5160: GO 5148
5162: POP
5163: POP
// end ; end_of_file
5164: LD_VAR 0 1
5168: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5169: LD_VAR 0 1
5173: PPUSH
5174: CALL 21238 0 1
// if un = JMM then
5178: LD_VAR 0 1
5182: PUSH
5183: LD_EXP 1
5187: EQUAL
5188: IFFALSE 5197
// YouLost ( JMM ) ;
5190: LD_STRING JMM
5192: PPUSH
5193: CALL_OW 104
// end ;
5197: PPOPN 1
5199: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5200: LD_VAR 0 1
5204: PPUSH
5205: LD_VAR 0 2
5209: PPUSH
5210: CALL 21358 0 2
// end ; end_of_file
5214: PPOPN 2
5216: END
// export function Action ; begin
5217: LD_INT 0
5219: PPUSH
// InGameOn ;
5220: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) ;
5224: LD_INT 22
5226: PUSH
5227: LD_INT 1
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: LD_INT 2
5236: PUSH
5237: LD_INT 30
5239: PUSH
5240: LD_INT 0
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 30
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PPUSH
5271: CALL_OW 87
// wait ( 0 0$1 ) ;
5275: LD_INT 35
5277: PPUSH
5278: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
5282: LD_EXP 1
5286: PPUSH
5287: LD_STRING D1-JMM-1
5289: PPUSH
5290: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
5294: LD_EXP 2
5298: PPUSH
5299: LD_STRING D1-Pow-1
5301: PPUSH
5302: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
5306: LD_EXP 2
5310: PPUSH
5311: LD_STRING D1-Pow-1a
5313: PPUSH
5314: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
5318: LD_EXP 2
5322: PPUSH
5323: LD_STRING D1-Pow-1b
5325: PPUSH
5326: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
5330: LD_EXP 2
5334: PPUSH
5335: LD_STRING D1-Pow-1c
5337: PPUSH
5338: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5342: LD_EXP 1
5346: PPUSH
5347: LD_STRING D1-JMM-2
5349: PPUSH
5350: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5354: LD_EXP 2
5358: PPUSH
5359: LD_STRING D1-Pow-2
5361: PPUSH
5362: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
5366: LD_EXP 1
5370: PPUSH
5371: LD_STRING D1-JMM-3
5373: PPUSH
5374: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
5378: LD_EXP 2
5382: PPUSH
5383: LD_STRING D1-Pow-3
5385: PPUSH
5386: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
5390: LD_EXP 1
5394: PPUSH
5395: LD_STRING D1-JMM-4
5397: PPUSH
5398: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
5402: LD_EXP 2
5406: PPUSH
5407: LD_STRING D1-Pow-4
5409: PPUSH
5410: CALL_OW 94
// SelectAndSaveCharacters ;
5414: CALL 4281 0 0
// InGameOff ;
5418: CALL_OW 9
// Query ( Q1 ) ;
5422: LD_STRING Q1
5424: PPUSH
5425: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
5429: LD_INT 2
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: CALL_OW 424
// end ; end_of_file
5439: LD_VAR 0 1
5443: RET
// export globalGameSaveCounter ; every 0 0$1 do
5444: GO 5446
5446: DISABLE
// begin enable ;
5447: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5448: LD_STRING updateTimer(
5450: PUSH
5451: LD_OWVAR 1
5455: STR
5456: PUSH
5457: LD_STRING );
5459: STR
5460: PPUSH
5461: CALL_OW 559
// end ;
5465: END
// every 0 0$1 do
5466: GO 5468
5468: DISABLE
// begin globalGameSaveCounter := 0 ;
5469: LD_ADDR_EXP 24
5473: PUSH
5474: LD_INT 0
5476: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5477: LD_STRING setGameSaveCounter(0)
5479: PPUSH
5480: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5484: LD_STRING initStreamRollete();
5486: PPUSH
5487: CALL_OW 559
// InitStreamMode ;
5491: CALL 6817 0 0
// DefineStreamItems ( false ) ;
5495: LD_INT 0
5497: PPUSH
5498: CALL 7281 0 1
// end ;
5502: END
// export function SOS_MapStart ( ) ; begin
5503: LD_INT 0
5505: PPUSH
// if streamModeActive then
5506: LD_EXP 25
5510: IFFALSE 5519
// DefineStreamItems ( true ) ;
5512: LD_INT 1
5514: PPUSH
5515: CALL 7281 0 1
// UpdateLuaVariables ( ) ;
5519: CALL 5536 0 0
// UpdateFactoryWaypoints ( ) ;
5523: CALL 20142 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5527: CALL 20399 0 0
// end ;
5531: LD_VAR 0 1
5535: RET
// function UpdateLuaVariables ( ) ; begin
5536: LD_INT 0
5538: PPUSH
// if globalGameSaveCounter then
5539: LD_EXP 24
5543: IFFALSE 5577
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5545: LD_ADDR_EXP 24
5549: PUSH
5550: LD_EXP 24
5554: PPUSH
5555: CALL 64402 0 1
5559: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5560: LD_STRING setGameSaveCounter(
5562: PUSH
5563: LD_EXP 24
5567: STR
5568: PUSH
5569: LD_STRING )
5571: STR
5572: PPUSH
5573: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5577: LD_STRING setGameDifficulty(
5579: PUSH
5580: LD_OWVAR 67
5584: STR
5585: PUSH
5586: LD_STRING )
5588: STR
5589: PPUSH
5590: CALL_OW 559
// end ;
5594: LD_VAR 0 1
5598: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5599: LD_INT 0
5601: PPUSH
// if p2 = stream_mode then
5602: LD_VAR 0 2
5606: PUSH
5607: LD_INT 100
5609: EQUAL
5610: IFFALSE 6613
// begin if not StreamModeActive then
5612: LD_EXP 25
5616: NOT
5617: IFFALSE 5627
// StreamModeActive := true ;
5619: LD_ADDR_EXP 25
5623: PUSH
5624: LD_INT 1
5626: ST_TO_ADDR
// if p3 = 0 then
5627: LD_VAR 0 3
5631: PUSH
5632: LD_INT 0
5634: EQUAL
5635: IFFALSE 5641
// InitStreamMode ;
5637: CALL 6817 0 0
// if p3 = 1 then
5641: LD_VAR 0 3
5645: PUSH
5646: LD_INT 1
5648: EQUAL
5649: IFFALSE 5659
// sRocket := true ;
5651: LD_ADDR_EXP 30
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// if p3 = 2 then
5659: LD_VAR 0 3
5663: PUSH
5664: LD_INT 2
5666: EQUAL
5667: IFFALSE 5677
// sSpeed := true ;
5669: LD_ADDR_EXP 29
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// if p3 = 3 then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 3
5684: EQUAL
5685: IFFALSE 5695
// sEngine := true ;
5687: LD_ADDR_EXP 31
5691: PUSH
5692: LD_INT 1
5694: ST_TO_ADDR
// if p3 = 4 then
5695: LD_VAR 0 3
5699: PUSH
5700: LD_INT 4
5702: EQUAL
5703: IFFALSE 5713
// sSpec := true ;
5705: LD_ADDR_EXP 28
5709: PUSH
5710: LD_INT 1
5712: ST_TO_ADDR
// if p3 = 5 then
5713: LD_VAR 0 3
5717: PUSH
5718: LD_INT 5
5720: EQUAL
5721: IFFALSE 5731
// sLevel := true ;
5723: LD_ADDR_EXP 32
5727: PUSH
5728: LD_INT 1
5730: ST_TO_ADDR
// if p3 = 6 then
5731: LD_VAR 0 3
5735: PUSH
5736: LD_INT 6
5738: EQUAL
5739: IFFALSE 5749
// sArmoury := true ;
5741: LD_ADDR_EXP 33
5745: PUSH
5746: LD_INT 1
5748: ST_TO_ADDR
// if p3 = 7 then
5749: LD_VAR 0 3
5753: PUSH
5754: LD_INT 7
5756: EQUAL
5757: IFFALSE 5767
// sRadar := true ;
5759: LD_ADDR_EXP 34
5763: PUSH
5764: LD_INT 1
5766: ST_TO_ADDR
// if p3 = 8 then
5767: LD_VAR 0 3
5771: PUSH
5772: LD_INT 8
5774: EQUAL
5775: IFFALSE 5785
// sBunker := true ;
5777: LD_ADDR_EXP 35
5781: PUSH
5782: LD_INT 1
5784: ST_TO_ADDR
// if p3 = 9 then
5785: LD_VAR 0 3
5789: PUSH
5790: LD_INT 9
5792: EQUAL
5793: IFFALSE 5803
// sHack := true ;
5795: LD_ADDR_EXP 36
5799: PUSH
5800: LD_INT 1
5802: ST_TO_ADDR
// if p3 = 10 then
5803: LD_VAR 0 3
5807: PUSH
5808: LD_INT 10
5810: EQUAL
5811: IFFALSE 5821
// sFire := true ;
5813: LD_ADDR_EXP 37
5817: PUSH
5818: LD_INT 1
5820: ST_TO_ADDR
// if p3 = 11 then
5821: LD_VAR 0 3
5825: PUSH
5826: LD_INT 11
5828: EQUAL
5829: IFFALSE 5839
// sRefresh := true ;
5831: LD_ADDR_EXP 38
5835: PUSH
5836: LD_INT 1
5838: ST_TO_ADDR
// if p3 = 12 then
5839: LD_VAR 0 3
5843: PUSH
5844: LD_INT 12
5846: EQUAL
5847: IFFALSE 5857
// sExp := true ;
5849: LD_ADDR_EXP 39
5853: PUSH
5854: LD_INT 1
5856: ST_TO_ADDR
// if p3 = 13 then
5857: LD_VAR 0 3
5861: PUSH
5862: LD_INT 13
5864: EQUAL
5865: IFFALSE 5875
// sDepot := true ;
5867: LD_ADDR_EXP 40
5871: PUSH
5872: LD_INT 1
5874: ST_TO_ADDR
// if p3 = 14 then
5875: LD_VAR 0 3
5879: PUSH
5880: LD_INT 14
5882: EQUAL
5883: IFFALSE 5893
// sFlag := true ;
5885: LD_ADDR_EXP 41
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// if p3 = 15 then
5893: LD_VAR 0 3
5897: PUSH
5898: LD_INT 15
5900: EQUAL
5901: IFFALSE 5911
// sKamikadze := true ;
5903: LD_ADDR_EXP 49
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// if p3 = 16 then
5911: LD_VAR 0 3
5915: PUSH
5916: LD_INT 16
5918: EQUAL
5919: IFFALSE 5929
// sTroll := true ;
5921: LD_ADDR_EXP 50
5925: PUSH
5926: LD_INT 1
5928: ST_TO_ADDR
// if p3 = 17 then
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 17
5936: EQUAL
5937: IFFALSE 5947
// sSlow := true ;
5939: LD_ADDR_EXP 51
5943: PUSH
5944: LD_INT 1
5946: ST_TO_ADDR
// if p3 = 18 then
5947: LD_VAR 0 3
5951: PUSH
5952: LD_INT 18
5954: EQUAL
5955: IFFALSE 5965
// sLack := true ;
5957: LD_ADDR_EXP 52
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// if p3 = 19 then
5965: LD_VAR 0 3
5969: PUSH
5970: LD_INT 19
5972: EQUAL
5973: IFFALSE 5983
// sTank := true ;
5975: LD_ADDR_EXP 54
5979: PUSH
5980: LD_INT 1
5982: ST_TO_ADDR
// if p3 = 20 then
5983: LD_VAR 0 3
5987: PUSH
5988: LD_INT 20
5990: EQUAL
5991: IFFALSE 6001
// sRemote := true ;
5993: LD_ADDR_EXP 55
5997: PUSH
5998: LD_INT 1
6000: ST_TO_ADDR
// if p3 = 21 then
6001: LD_VAR 0 3
6005: PUSH
6006: LD_INT 21
6008: EQUAL
6009: IFFALSE 6019
// sPowell := true ;
6011: LD_ADDR_EXP 56
6015: PUSH
6016: LD_INT 1
6018: ST_TO_ADDR
// if p3 = 22 then
6019: LD_VAR 0 3
6023: PUSH
6024: LD_INT 22
6026: EQUAL
6027: IFFALSE 6037
// sTeleport := true ;
6029: LD_ADDR_EXP 59
6033: PUSH
6034: LD_INT 1
6036: ST_TO_ADDR
// if p3 = 23 then
6037: LD_VAR 0 3
6041: PUSH
6042: LD_INT 23
6044: EQUAL
6045: IFFALSE 6055
// sOilTower := true ;
6047: LD_ADDR_EXP 61
6051: PUSH
6052: LD_INT 1
6054: ST_TO_ADDR
// if p3 = 24 then
6055: LD_VAR 0 3
6059: PUSH
6060: LD_INT 24
6062: EQUAL
6063: IFFALSE 6073
// sShovel := true ;
6065: LD_ADDR_EXP 62
6069: PUSH
6070: LD_INT 1
6072: ST_TO_ADDR
// if p3 = 25 then
6073: LD_VAR 0 3
6077: PUSH
6078: LD_INT 25
6080: EQUAL
6081: IFFALSE 6091
// sSheik := true ;
6083: LD_ADDR_EXP 63
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// if p3 = 26 then
6091: LD_VAR 0 3
6095: PUSH
6096: LD_INT 26
6098: EQUAL
6099: IFFALSE 6109
// sEarthquake := true ;
6101: LD_ADDR_EXP 65
6105: PUSH
6106: LD_INT 1
6108: ST_TO_ADDR
// if p3 = 27 then
6109: LD_VAR 0 3
6113: PUSH
6114: LD_INT 27
6116: EQUAL
6117: IFFALSE 6127
// sAI := true ;
6119: LD_ADDR_EXP 66
6123: PUSH
6124: LD_INT 1
6126: ST_TO_ADDR
// if p3 = 28 then
6127: LD_VAR 0 3
6131: PUSH
6132: LD_INT 28
6134: EQUAL
6135: IFFALSE 6145
// sCargo := true ;
6137: LD_ADDR_EXP 69
6141: PUSH
6142: LD_INT 1
6144: ST_TO_ADDR
// if p3 = 29 then
6145: LD_VAR 0 3
6149: PUSH
6150: LD_INT 29
6152: EQUAL
6153: IFFALSE 6163
// sDLaser := true ;
6155: LD_ADDR_EXP 70
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// if p3 = 30 then
6163: LD_VAR 0 3
6167: PUSH
6168: LD_INT 30
6170: EQUAL
6171: IFFALSE 6181
// sExchange := true ;
6173: LD_ADDR_EXP 71
6177: PUSH
6178: LD_INT 1
6180: ST_TO_ADDR
// if p3 = 31 then
6181: LD_VAR 0 3
6185: PUSH
6186: LD_INT 31
6188: EQUAL
6189: IFFALSE 6199
// sFac := true ;
6191: LD_ADDR_EXP 72
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// if p3 = 32 then
6199: LD_VAR 0 3
6203: PUSH
6204: LD_INT 32
6206: EQUAL
6207: IFFALSE 6217
// sPower := true ;
6209: LD_ADDR_EXP 73
6213: PUSH
6214: LD_INT 1
6216: ST_TO_ADDR
// if p3 = 33 then
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 33
6224: EQUAL
6225: IFFALSE 6235
// sRandom := true ;
6227: LD_ADDR_EXP 74
6231: PUSH
6232: LD_INT 1
6234: ST_TO_ADDR
// if p3 = 34 then
6235: LD_VAR 0 3
6239: PUSH
6240: LD_INT 34
6242: EQUAL
6243: IFFALSE 6253
// sShield := true ;
6245: LD_ADDR_EXP 75
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// if p3 = 35 then
6253: LD_VAR 0 3
6257: PUSH
6258: LD_INT 35
6260: EQUAL
6261: IFFALSE 6271
// sTime := true ;
6263: LD_ADDR_EXP 76
6267: PUSH
6268: LD_INT 1
6270: ST_TO_ADDR
// if p3 = 36 then
6271: LD_VAR 0 3
6275: PUSH
6276: LD_INT 36
6278: EQUAL
6279: IFFALSE 6289
// sTools := true ;
6281: LD_ADDR_EXP 77
6285: PUSH
6286: LD_INT 1
6288: ST_TO_ADDR
// if p3 = 101 then
6289: LD_VAR 0 3
6293: PUSH
6294: LD_INT 101
6296: EQUAL
6297: IFFALSE 6307
// sSold := true ;
6299: LD_ADDR_EXP 42
6303: PUSH
6304: LD_INT 1
6306: ST_TO_ADDR
// if p3 = 102 then
6307: LD_VAR 0 3
6311: PUSH
6312: LD_INT 102
6314: EQUAL
6315: IFFALSE 6325
// sDiff := true ;
6317: LD_ADDR_EXP 43
6321: PUSH
6322: LD_INT 1
6324: ST_TO_ADDR
// if p3 = 103 then
6325: LD_VAR 0 3
6329: PUSH
6330: LD_INT 103
6332: EQUAL
6333: IFFALSE 6343
// sFog := true ;
6335: LD_ADDR_EXP 46
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// if p3 = 104 then
6343: LD_VAR 0 3
6347: PUSH
6348: LD_INT 104
6350: EQUAL
6351: IFFALSE 6361
// sReset := true ;
6353: LD_ADDR_EXP 47
6357: PUSH
6358: LD_INT 1
6360: ST_TO_ADDR
// if p3 = 105 then
6361: LD_VAR 0 3
6365: PUSH
6366: LD_INT 105
6368: EQUAL
6369: IFFALSE 6379
// sSun := true ;
6371: LD_ADDR_EXP 48
6375: PUSH
6376: LD_INT 1
6378: ST_TO_ADDR
// if p3 = 106 then
6379: LD_VAR 0 3
6383: PUSH
6384: LD_INT 106
6386: EQUAL
6387: IFFALSE 6397
// sTiger := true ;
6389: LD_ADDR_EXP 44
6393: PUSH
6394: LD_INT 1
6396: ST_TO_ADDR
// if p3 = 107 then
6397: LD_VAR 0 3
6401: PUSH
6402: LD_INT 107
6404: EQUAL
6405: IFFALSE 6415
// sBomb := true ;
6407: LD_ADDR_EXP 45
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// if p3 = 108 then
6415: LD_VAR 0 3
6419: PUSH
6420: LD_INT 108
6422: EQUAL
6423: IFFALSE 6433
// sWound := true ;
6425: LD_ADDR_EXP 53
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// if p3 = 109 then
6433: LD_VAR 0 3
6437: PUSH
6438: LD_INT 109
6440: EQUAL
6441: IFFALSE 6451
// sBetray := true ;
6443: LD_ADDR_EXP 57
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// if p3 = 110 then
6451: LD_VAR 0 3
6455: PUSH
6456: LD_INT 110
6458: EQUAL
6459: IFFALSE 6469
// sContamin := true ;
6461: LD_ADDR_EXP 58
6465: PUSH
6466: LD_INT 1
6468: ST_TO_ADDR
// if p3 = 111 then
6469: LD_VAR 0 3
6473: PUSH
6474: LD_INT 111
6476: EQUAL
6477: IFFALSE 6487
// sOil := true ;
6479: LD_ADDR_EXP 60
6483: PUSH
6484: LD_INT 1
6486: ST_TO_ADDR
// if p3 = 112 then
6487: LD_VAR 0 3
6491: PUSH
6492: LD_INT 112
6494: EQUAL
6495: IFFALSE 6505
// sStu := true ;
6497: LD_ADDR_EXP 64
6501: PUSH
6502: LD_INT 1
6504: ST_TO_ADDR
// if p3 = 113 then
6505: LD_VAR 0 3
6509: PUSH
6510: LD_INT 113
6512: EQUAL
6513: IFFALSE 6523
// sBazooka := true ;
6515: LD_ADDR_EXP 67
6519: PUSH
6520: LD_INT 1
6522: ST_TO_ADDR
// if p3 = 114 then
6523: LD_VAR 0 3
6527: PUSH
6528: LD_INT 114
6530: EQUAL
6531: IFFALSE 6541
// sMortar := true ;
6533: LD_ADDR_EXP 68
6537: PUSH
6538: LD_INT 1
6540: ST_TO_ADDR
// if p3 = 115 then
6541: LD_VAR 0 3
6545: PUSH
6546: LD_INT 115
6548: EQUAL
6549: IFFALSE 6559
// sRanger := true ;
6551: LD_ADDR_EXP 78
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// if p3 = 116 then
6559: LD_VAR 0 3
6563: PUSH
6564: LD_INT 116
6566: EQUAL
6567: IFFALSE 6577
// sComputer := true ;
6569: LD_ADDR_EXP 79
6573: PUSH
6574: LD_INT 1
6576: ST_TO_ADDR
// if p3 = 117 then
6577: LD_VAR 0 3
6581: PUSH
6582: LD_INT 117
6584: EQUAL
6585: IFFALSE 6595
// s30 := true ;
6587: LD_ADDR_EXP 80
6591: PUSH
6592: LD_INT 1
6594: ST_TO_ADDR
// if p3 = 118 then
6595: LD_VAR 0 3
6599: PUSH
6600: LD_INT 118
6602: EQUAL
6603: IFFALSE 6613
// s60 := true ;
6605: LD_ADDR_EXP 81
6609: PUSH
6610: LD_INT 1
6612: ST_TO_ADDR
// end ; if p2 = hack_mode then
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 101
6620: EQUAL
6621: IFFALSE 6749
// begin case p3 of 1 :
6623: LD_VAR 0 3
6627: PUSH
6628: LD_INT 1
6630: DOUBLE
6631: EQUAL
6632: IFTRUE 6636
6634: GO 6643
6636: POP
// hHackUnlimitedResources ; 2 :
6637: CALL 18888 0 0
6641: GO 6749
6643: LD_INT 2
6645: DOUBLE
6646: EQUAL
6647: IFTRUE 6651
6649: GO 6658
6651: POP
// hHackSetLevel10 ; 3 :
6652: CALL 19021 0 0
6656: GO 6749
6658: LD_INT 3
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6673
6666: POP
// hHackSetLevel10YourUnits ; 4 :
6667: CALL 19106 0 0
6671: GO 6749
6673: LD_INT 4
6675: DOUBLE
6676: EQUAL
6677: IFTRUE 6681
6679: GO 6688
6681: POP
// hHackInvincible ; 5 :
6682: CALL 19554 0 0
6686: GO 6749
6688: LD_INT 5
6690: DOUBLE
6691: EQUAL
6692: IFTRUE 6696
6694: GO 6703
6696: POP
// hHackInvisible ; 6 :
6697: CALL 19665 0 0
6701: GO 6749
6703: LD_INT 6
6705: DOUBLE
6706: EQUAL
6707: IFTRUE 6711
6709: GO 6718
6711: POP
// hHackChangeYourSide ; 7 :
6712: CALL 19722 0 0
6716: GO 6749
6718: LD_INT 7
6720: DOUBLE
6721: EQUAL
6722: IFTRUE 6726
6724: GO 6733
6726: POP
// hHackChangeUnitSide ; 8 :
6727: CALL 19764 0 0
6731: GO 6749
6733: LD_INT 8
6735: DOUBLE
6736: EQUAL
6737: IFTRUE 6741
6739: GO 6748
6741: POP
// hHackFog ; end ;
6742: CALL 19865 0 0
6746: GO 6749
6748: POP
// end ; if p2 = game_save_mode then
6749: LD_VAR 0 2
6753: PUSH
6754: LD_INT 102
6756: EQUAL
6757: IFFALSE 6812
// begin if p3 = 1 then
6759: LD_VAR 0 3
6763: PUSH
6764: LD_INT 1
6766: EQUAL
6767: IFFALSE 6779
// globalGameSaveCounter := p4 ;
6769: LD_ADDR_EXP 24
6773: PUSH
6774: LD_VAR 0 4
6778: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6779: LD_VAR 0 3
6783: PUSH
6784: LD_INT 2
6786: EQUAL
6787: PUSH
6788: LD_EXP 24
6792: AND
6793: IFFALSE 6812
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6795: LD_STRING setGameSaveCounter(
6797: PUSH
6798: LD_EXP 24
6802: STR
6803: PUSH
6804: LD_STRING )
6806: STR
6807: PPUSH
6808: CALL_OW 559
// end ; end ;
6812: LD_VAR 0 7
6816: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6817: LD_INT 0
6819: PPUSH
// streamModeActive := false ;
6820: LD_ADDR_EXP 25
6824: PUSH
6825: LD_INT 0
6827: ST_TO_ADDR
// normalCounter := 36 ;
6828: LD_ADDR_EXP 26
6832: PUSH
6833: LD_INT 36
6835: ST_TO_ADDR
// hardcoreCounter := 18 ;
6836: LD_ADDR_EXP 27
6840: PUSH
6841: LD_INT 18
6843: ST_TO_ADDR
// sRocket := false ;
6844: LD_ADDR_EXP 30
6848: PUSH
6849: LD_INT 0
6851: ST_TO_ADDR
// sSpeed := false ;
6852: LD_ADDR_EXP 29
6856: PUSH
6857: LD_INT 0
6859: ST_TO_ADDR
// sEngine := false ;
6860: LD_ADDR_EXP 31
6864: PUSH
6865: LD_INT 0
6867: ST_TO_ADDR
// sSpec := false ;
6868: LD_ADDR_EXP 28
6872: PUSH
6873: LD_INT 0
6875: ST_TO_ADDR
// sLevel := false ;
6876: LD_ADDR_EXP 32
6880: PUSH
6881: LD_INT 0
6883: ST_TO_ADDR
// sArmoury := false ;
6884: LD_ADDR_EXP 33
6888: PUSH
6889: LD_INT 0
6891: ST_TO_ADDR
// sRadar := false ;
6892: LD_ADDR_EXP 34
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// sBunker := false ;
6900: LD_ADDR_EXP 35
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// sHack := false ;
6908: LD_ADDR_EXP 36
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// sFire := false ;
6916: LD_ADDR_EXP 37
6920: PUSH
6921: LD_INT 0
6923: ST_TO_ADDR
// sRefresh := false ;
6924: LD_ADDR_EXP 38
6928: PUSH
6929: LD_INT 0
6931: ST_TO_ADDR
// sExp := false ;
6932: LD_ADDR_EXP 39
6936: PUSH
6937: LD_INT 0
6939: ST_TO_ADDR
// sDepot := false ;
6940: LD_ADDR_EXP 40
6944: PUSH
6945: LD_INT 0
6947: ST_TO_ADDR
// sFlag := false ;
6948: LD_ADDR_EXP 41
6952: PUSH
6953: LD_INT 0
6955: ST_TO_ADDR
// sKamikadze := false ;
6956: LD_ADDR_EXP 49
6960: PUSH
6961: LD_INT 0
6963: ST_TO_ADDR
// sTroll := false ;
6964: LD_ADDR_EXP 50
6968: PUSH
6969: LD_INT 0
6971: ST_TO_ADDR
// sSlow := false ;
6972: LD_ADDR_EXP 51
6976: PUSH
6977: LD_INT 0
6979: ST_TO_ADDR
// sLack := false ;
6980: LD_ADDR_EXP 52
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// sTank := false ;
6988: LD_ADDR_EXP 54
6992: PUSH
6993: LD_INT 0
6995: ST_TO_ADDR
// sRemote := false ;
6996: LD_ADDR_EXP 55
7000: PUSH
7001: LD_INT 0
7003: ST_TO_ADDR
// sPowell := false ;
7004: LD_ADDR_EXP 56
7008: PUSH
7009: LD_INT 0
7011: ST_TO_ADDR
// sTeleport := false ;
7012: LD_ADDR_EXP 59
7016: PUSH
7017: LD_INT 0
7019: ST_TO_ADDR
// sOilTower := false ;
7020: LD_ADDR_EXP 61
7024: PUSH
7025: LD_INT 0
7027: ST_TO_ADDR
// sShovel := false ;
7028: LD_ADDR_EXP 62
7032: PUSH
7033: LD_INT 0
7035: ST_TO_ADDR
// sSheik := false ;
7036: LD_ADDR_EXP 63
7040: PUSH
7041: LD_INT 0
7043: ST_TO_ADDR
// sEarthquake := false ;
7044: LD_ADDR_EXP 65
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// sAI := false ;
7052: LD_ADDR_EXP 66
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// sCargo := false ;
7060: LD_ADDR_EXP 69
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// sDLaser := false ;
7068: LD_ADDR_EXP 70
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// sExchange := false ;
7076: LD_ADDR_EXP 71
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// sFac := false ;
7084: LD_ADDR_EXP 72
7088: PUSH
7089: LD_INT 0
7091: ST_TO_ADDR
// sPower := false ;
7092: LD_ADDR_EXP 73
7096: PUSH
7097: LD_INT 0
7099: ST_TO_ADDR
// sRandom := false ;
7100: LD_ADDR_EXP 74
7104: PUSH
7105: LD_INT 0
7107: ST_TO_ADDR
// sShield := false ;
7108: LD_ADDR_EXP 75
7112: PUSH
7113: LD_INT 0
7115: ST_TO_ADDR
// sTime := false ;
7116: LD_ADDR_EXP 76
7120: PUSH
7121: LD_INT 0
7123: ST_TO_ADDR
// sTools := false ;
7124: LD_ADDR_EXP 77
7128: PUSH
7129: LD_INT 0
7131: ST_TO_ADDR
// sSold := false ;
7132: LD_ADDR_EXP 42
7136: PUSH
7137: LD_INT 0
7139: ST_TO_ADDR
// sDiff := false ;
7140: LD_ADDR_EXP 43
7144: PUSH
7145: LD_INT 0
7147: ST_TO_ADDR
// sFog := false ;
7148: LD_ADDR_EXP 46
7152: PUSH
7153: LD_INT 0
7155: ST_TO_ADDR
// sReset := false ;
7156: LD_ADDR_EXP 47
7160: PUSH
7161: LD_INT 0
7163: ST_TO_ADDR
// sSun := false ;
7164: LD_ADDR_EXP 48
7168: PUSH
7169: LD_INT 0
7171: ST_TO_ADDR
// sTiger := false ;
7172: LD_ADDR_EXP 44
7176: PUSH
7177: LD_INT 0
7179: ST_TO_ADDR
// sBomb := false ;
7180: LD_ADDR_EXP 45
7184: PUSH
7185: LD_INT 0
7187: ST_TO_ADDR
// sWound := false ;
7188: LD_ADDR_EXP 53
7192: PUSH
7193: LD_INT 0
7195: ST_TO_ADDR
// sBetray := false ;
7196: LD_ADDR_EXP 57
7200: PUSH
7201: LD_INT 0
7203: ST_TO_ADDR
// sContamin := false ;
7204: LD_ADDR_EXP 58
7208: PUSH
7209: LD_INT 0
7211: ST_TO_ADDR
// sOil := false ;
7212: LD_ADDR_EXP 60
7216: PUSH
7217: LD_INT 0
7219: ST_TO_ADDR
// sStu := false ;
7220: LD_ADDR_EXP 64
7224: PUSH
7225: LD_INT 0
7227: ST_TO_ADDR
// sBazooka := false ;
7228: LD_ADDR_EXP 67
7232: PUSH
7233: LD_INT 0
7235: ST_TO_ADDR
// sMortar := false ;
7236: LD_ADDR_EXP 68
7240: PUSH
7241: LD_INT 0
7243: ST_TO_ADDR
// sRanger := false ;
7244: LD_ADDR_EXP 78
7248: PUSH
7249: LD_INT 0
7251: ST_TO_ADDR
// sComputer := false ;
7252: LD_ADDR_EXP 79
7256: PUSH
7257: LD_INT 0
7259: ST_TO_ADDR
// s30 := false ;
7260: LD_ADDR_EXP 80
7264: PUSH
7265: LD_INT 0
7267: ST_TO_ADDR
// s60 := false ;
7268: LD_ADDR_EXP 81
7272: PUSH
7273: LD_INT 0
7275: ST_TO_ADDR
// end ;
7276: LD_VAR 0 1
7280: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7281: LD_INT 0
7283: PPUSH
7284: PPUSH
7285: PPUSH
7286: PPUSH
7287: PPUSH
7288: PPUSH
7289: PPUSH
// result := [ ] ;
7290: LD_ADDR_VAR 0 2
7294: PUSH
7295: EMPTY
7296: ST_TO_ADDR
// if campaign_id = 1 then
7297: LD_OWVAR 69
7301: PUSH
7302: LD_INT 1
7304: EQUAL
7305: IFFALSE 10471
// begin case mission_number of 1 :
7307: LD_OWVAR 70
7311: PUSH
7312: LD_INT 1
7314: DOUBLE
7315: EQUAL
7316: IFTRUE 7320
7318: GO 7396
7320: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7321: LD_ADDR_VAR 0 2
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 4
7331: PUSH
7332: LD_INT 11
7334: PUSH
7335: LD_INT 12
7337: PUSH
7338: LD_INT 15
7340: PUSH
7341: LD_INT 16
7343: PUSH
7344: LD_INT 22
7346: PUSH
7347: LD_INT 23
7349: PUSH
7350: LD_INT 26
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 101
7366: PUSH
7367: LD_INT 102
7369: PUSH
7370: LD_INT 106
7372: PUSH
7373: LD_INT 116
7375: PUSH
7376: LD_INT 117
7378: PUSH
7379: LD_INT 118
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: ST_TO_ADDR
7394: GO 10469
7396: LD_INT 2
7398: DOUBLE
7399: EQUAL
7400: IFTRUE 7404
7402: GO 7488
7404: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7405: LD_ADDR_VAR 0 2
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 4
7415: PUSH
7416: LD_INT 11
7418: PUSH
7419: LD_INT 12
7421: PUSH
7422: LD_INT 15
7424: PUSH
7425: LD_INT 16
7427: PUSH
7428: LD_INT 22
7430: PUSH
7431: LD_INT 23
7433: PUSH
7434: LD_INT 26
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 101
7450: PUSH
7451: LD_INT 102
7453: PUSH
7454: LD_INT 105
7456: PUSH
7457: LD_INT 106
7459: PUSH
7460: LD_INT 108
7462: PUSH
7463: LD_INT 116
7465: PUSH
7466: LD_INT 117
7468: PUSH
7469: LD_INT 118
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: ST_TO_ADDR
7486: GO 10469
7488: LD_INT 3
7490: DOUBLE
7491: EQUAL
7492: IFTRUE 7496
7494: GO 7584
7496: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7497: LD_ADDR_VAR 0 2
7501: PUSH
7502: LD_INT 2
7504: PUSH
7505: LD_INT 4
7507: PUSH
7508: LD_INT 5
7510: PUSH
7511: LD_INT 11
7513: PUSH
7514: LD_INT 12
7516: PUSH
7517: LD_INT 15
7519: PUSH
7520: LD_INT 16
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 26
7528: PUSH
7529: LD_INT 36
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 101
7546: PUSH
7547: LD_INT 102
7549: PUSH
7550: LD_INT 105
7552: PUSH
7553: LD_INT 106
7555: PUSH
7556: LD_INT 108
7558: PUSH
7559: LD_INT 116
7561: PUSH
7562: LD_INT 117
7564: PUSH
7565: LD_INT 118
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: ST_TO_ADDR
7582: GO 10469
7584: LD_INT 4
7586: DOUBLE
7587: EQUAL
7588: IFTRUE 7592
7590: GO 7688
7592: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7593: LD_ADDR_VAR 0 2
7597: PUSH
7598: LD_INT 2
7600: PUSH
7601: LD_INT 4
7603: PUSH
7604: LD_INT 5
7606: PUSH
7607: LD_INT 8
7609: PUSH
7610: LD_INT 11
7612: PUSH
7613: LD_INT 12
7615: PUSH
7616: LD_INT 15
7618: PUSH
7619: LD_INT 16
7621: PUSH
7622: LD_INT 22
7624: PUSH
7625: LD_INT 23
7627: PUSH
7628: LD_INT 26
7630: PUSH
7631: LD_INT 36
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 101
7650: PUSH
7651: LD_INT 102
7653: PUSH
7654: LD_INT 105
7656: PUSH
7657: LD_INT 106
7659: PUSH
7660: LD_INT 108
7662: PUSH
7663: LD_INT 116
7665: PUSH
7666: LD_INT 117
7668: PUSH
7669: LD_INT 118
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: ST_TO_ADDR
7686: GO 10469
7688: LD_INT 5
7690: DOUBLE
7691: EQUAL
7692: IFTRUE 7696
7694: GO 7808
7696: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7697: LD_ADDR_VAR 0 2
7701: PUSH
7702: LD_INT 2
7704: PUSH
7705: LD_INT 4
7707: PUSH
7708: LD_INT 5
7710: PUSH
7711: LD_INT 6
7713: PUSH
7714: LD_INT 8
7716: PUSH
7717: LD_INT 11
7719: PUSH
7720: LD_INT 12
7722: PUSH
7723: LD_INT 15
7725: PUSH
7726: LD_INT 16
7728: PUSH
7729: LD_INT 22
7731: PUSH
7732: LD_INT 23
7734: PUSH
7735: LD_INT 25
7737: PUSH
7738: LD_INT 26
7740: PUSH
7741: LD_INT 36
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 101
7762: PUSH
7763: LD_INT 102
7765: PUSH
7766: LD_INT 105
7768: PUSH
7769: LD_INT 106
7771: PUSH
7772: LD_INT 108
7774: PUSH
7775: LD_INT 109
7777: PUSH
7778: LD_INT 112
7780: PUSH
7781: LD_INT 116
7783: PUSH
7784: LD_INT 117
7786: PUSH
7787: LD_INT 118
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: ST_TO_ADDR
7806: GO 10469
7808: LD_INT 6
7810: DOUBLE
7811: EQUAL
7812: IFTRUE 7816
7814: GO 7948
7816: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7817: LD_ADDR_VAR 0 2
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: LD_INT 4
7827: PUSH
7828: LD_INT 5
7830: PUSH
7831: LD_INT 6
7833: PUSH
7834: LD_INT 8
7836: PUSH
7837: LD_INT 11
7839: PUSH
7840: LD_INT 12
7842: PUSH
7843: LD_INT 15
7845: PUSH
7846: LD_INT 16
7848: PUSH
7849: LD_INT 20
7851: PUSH
7852: LD_INT 21
7854: PUSH
7855: LD_INT 22
7857: PUSH
7858: LD_INT 23
7860: PUSH
7861: LD_INT 25
7863: PUSH
7864: LD_INT 26
7866: PUSH
7867: LD_INT 30
7869: PUSH
7870: LD_INT 31
7872: PUSH
7873: LD_INT 32
7875: PUSH
7876: LD_INT 36
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 101
7902: PUSH
7903: LD_INT 102
7905: PUSH
7906: LD_INT 105
7908: PUSH
7909: LD_INT 106
7911: PUSH
7912: LD_INT 108
7914: PUSH
7915: LD_INT 109
7917: PUSH
7918: LD_INT 112
7920: PUSH
7921: LD_INT 116
7923: PUSH
7924: LD_INT 117
7926: PUSH
7927: LD_INT 118
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: ST_TO_ADDR
7946: GO 10469
7948: LD_INT 7
7950: DOUBLE
7951: EQUAL
7952: IFTRUE 7956
7954: GO 8068
7956: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_INT 2
7964: PUSH
7965: LD_INT 4
7967: PUSH
7968: LD_INT 5
7970: PUSH
7971: LD_INT 7
7973: PUSH
7974: LD_INT 11
7976: PUSH
7977: LD_INT 12
7979: PUSH
7980: LD_INT 15
7982: PUSH
7983: LD_INT 16
7985: PUSH
7986: LD_INT 20
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 22
7994: PUSH
7995: LD_INT 23
7997: PUSH
7998: LD_INT 25
8000: PUSH
8001: LD_INT 26
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: PUSH
8020: LD_INT 101
8022: PUSH
8023: LD_INT 102
8025: PUSH
8026: LD_INT 103
8028: PUSH
8029: LD_INT 105
8031: PUSH
8032: LD_INT 106
8034: PUSH
8035: LD_INT 108
8037: PUSH
8038: LD_INT 112
8040: PUSH
8041: LD_INT 116
8043: PUSH
8044: LD_INT 117
8046: PUSH
8047: LD_INT 118
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: ST_TO_ADDR
8066: GO 10469
8068: LD_INT 8
8070: DOUBLE
8071: EQUAL
8072: IFTRUE 8076
8074: GO 8216
8076: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8077: LD_ADDR_VAR 0 2
8081: PUSH
8082: LD_INT 2
8084: PUSH
8085: LD_INT 4
8087: PUSH
8088: LD_INT 5
8090: PUSH
8091: LD_INT 6
8093: PUSH
8094: LD_INT 7
8096: PUSH
8097: LD_INT 8
8099: PUSH
8100: LD_INT 11
8102: PUSH
8103: LD_INT 12
8105: PUSH
8106: LD_INT 15
8108: PUSH
8109: LD_INT 16
8111: PUSH
8112: LD_INT 20
8114: PUSH
8115: LD_INT 21
8117: PUSH
8118: LD_INT 22
8120: PUSH
8121: LD_INT 23
8123: PUSH
8124: LD_INT 25
8126: PUSH
8127: LD_INT 26
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: LD_INT 31
8135: PUSH
8136: LD_INT 32
8138: PUSH
8139: LD_INT 36
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 101
8166: PUSH
8167: LD_INT 102
8169: PUSH
8170: LD_INT 103
8172: PUSH
8173: LD_INT 105
8175: PUSH
8176: LD_INT 106
8178: PUSH
8179: LD_INT 108
8181: PUSH
8182: LD_INT 109
8184: PUSH
8185: LD_INT 112
8187: PUSH
8188: LD_INT 116
8190: PUSH
8191: LD_INT 117
8193: PUSH
8194: LD_INT 118
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: ST_TO_ADDR
8214: GO 10469
8216: LD_INT 9
8218: DOUBLE
8219: EQUAL
8220: IFTRUE 8224
8222: GO 8372
8224: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8225: LD_ADDR_VAR 0 2
8229: PUSH
8230: LD_INT 2
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: LD_INT 5
8238: PUSH
8239: LD_INT 6
8241: PUSH
8242: LD_INT 7
8244: PUSH
8245: LD_INT 8
8247: PUSH
8248: LD_INT 11
8250: PUSH
8251: LD_INT 12
8253: PUSH
8254: LD_INT 15
8256: PUSH
8257: LD_INT 16
8259: PUSH
8260: LD_INT 20
8262: PUSH
8263: LD_INT 21
8265: PUSH
8266: LD_INT 22
8268: PUSH
8269: LD_INT 23
8271: PUSH
8272: LD_INT 25
8274: PUSH
8275: LD_INT 26
8277: PUSH
8278: LD_INT 28
8280: PUSH
8281: LD_INT 30
8283: PUSH
8284: LD_INT 31
8286: PUSH
8287: LD_INT 32
8289: PUSH
8290: LD_INT 36
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: PUSH
8316: LD_INT 101
8318: PUSH
8319: LD_INT 102
8321: PUSH
8322: LD_INT 103
8324: PUSH
8325: LD_INT 105
8327: PUSH
8328: LD_INT 106
8330: PUSH
8331: LD_INT 108
8333: PUSH
8334: LD_INT 109
8336: PUSH
8337: LD_INT 112
8339: PUSH
8340: LD_INT 114
8342: PUSH
8343: LD_INT 116
8345: PUSH
8346: LD_INT 117
8348: PUSH
8349: LD_INT 118
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: ST_TO_ADDR
8370: GO 10469
8372: LD_INT 10
8374: DOUBLE
8375: EQUAL
8376: IFTRUE 8380
8378: GO 8576
8380: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8381: LD_ADDR_VAR 0 2
8385: PUSH
8386: LD_INT 2
8388: PUSH
8389: LD_INT 4
8391: PUSH
8392: LD_INT 5
8394: PUSH
8395: LD_INT 6
8397: PUSH
8398: LD_INT 7
8400: PUSH
8401: LD_INT 8
8403: PUSH
8404: LD_INT 9
8406: PUSH
8407: LD_INT 10
8409: PUSH
8410: LD_INT 11
8412: PUSH
8413: LD_INT 12
8415: PUSH
8416: LD_INT 13
8418: PUSH
8419: LD_INT 14
8421: PUSH
8422: LD_INT 15
8424: PUSH
8425: LD_INT 16
8427: PUSH
8428: LD_INT 17
8430: PUSH
8431: LD_INT 18
8433: PUSH
8434: LD_INT 19
8436: PUSH
8437: LD_INT 20
8439: PUSH
8440: LD_INT 21
8442: PUSH
8443: LD_INT 22
8445: PUSH
8446: LD_INT 23
8448: PUSH
8449: LD_INT 24
8451: PUSH
8452: LD_INT 25
8454: PUSH
8455: LD_INT 26
8457: PUSH
8458: LD_INT 28
8460: PUSH
8461: LD_INT 30
8463: PUSH
8464: LD_INT 31
8466: PUSH
8467: LD_INT 32
8469: PUSH
8470: LD_INT 36
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 101
8506: PUSH
8507: LD_INT 102
8509: PUSH
8510: LD_INT 103
8512: PUSH
8513: LD_INT 104
8515: PUSH
8516: LD_INT 105
8518: PUSH
8519: LD_INT 106
8521: PUSH
8522: LD_INT 107
8524: PUSH
8525: LD_INT 108
8527: PUSH
8528: LD_INT 109
8530: PUSH
8531: LD_INT 110
8533: PUSH
8534: LD_INT 111
8536: PUSH
8537: LD_INT 112
8539: PUSH
8540: LD_INT 114
8542: PUSH
8543: LD_INT 116
8545: PUSH
8546: LD_INT 117
8548: PUSH
8549: LD_INT 118
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: ST_TO_ADDR
8574: GO 10469
8576: LD_INT 11
8578: DOUBLE
8579: EQUAL
8580: IFTRUE 8584
8582: GO 8788
8584: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8585: LD_ADDR_VAR 0 2
8589: PUSH
8590: LD_INT 2
8592: PUSH
8593: LD_INT 3
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: LD_INT 5
8601: PUSH
8602: LD_INT 6
8604: PUSH
8605: LD_INT 7
8607: PUSH
8608: LD_INT 8
8610: PUSH
8611: LD_INT 9
8613: PUSH
8614: LD_INT 10
8616: PUSH
8617: LD_INT 11
8619: PUSH
8620: LD_INT 12
8622: PUSH
8623: LD_INT 13
8625: PUSH
8626: LD_INT 14
8628: PUSH
8629: LD_INT 15
8631: PUSH
8632: LD_INT 16
8634: PUSH
8635: LD_INT 17
8637: PUSH
8638: LD_INT 18
8640: PUSH
8641: LD_INT 19
8643: PUSH
8644: LD_INT 20
8646: PUSH
8647: LD_INT 21
8649: PUSH
8650: LD_INT 22
8652: PUSH
8653: LD_INT 23
8655: PUSH
8656: LD_INT 24
8658: PUSH
8659: LD_INT 25
8661: PUSH
8662: LD_INT 26
8664: PUSH
8665: LD_INT 28
8667: PUSH
8668: LD_INT 30
8670: PUSH
8671: LD_INT 31
8673: PUSH
8674: LD_INT 32
8676: PUSH
8677: LD_INT 34
8679: PUSH
8680: LD_INT 36
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: PUSH
8716: LD_INT 101
8718: PUSH
8719: LD_INT 102
8721: PUSH
8722: LD_INT 103
8724: PUSH
8725: LD_INT 104
8727: PUSH
8728: LD_INT 105
8730: PUSH
8731: LD_INT 106
8733: PUSH
8734: LD_INT 107
8736: PUSH
8737: LD_INT 108
8739: PUSH
8740: LD_INT 109
8742: PUSH
8743: LD_INT 110
8745: PUSH
8746: LD_INT 111
8748: PUSH
8749: LD_INT 112
8751: PUSH
8752: LD_INT 114
8754: PUSH
8755: LD_INT 116
8757: PUSH
8758: LD_INT 117
8760: PUSH
8761: LD_INT 118
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: ST_TO_ADDR
8786: GO 10469
8788: LD_INT 12
8790: DOUBLE
8791: EQUAL
8792: IFTRUE 8796
8794: GO 9016
8796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: LD_INT 2
8807: PUSH
8808: LD_INT 3
8810: PUSH
8811: LD_INT 4
8813: PUSH
8814: LD_INT 5
8816: PUSH
8817: LD_INT 6
8819: PUSH
8820: LD_INT 7
8822: PUSH
8823: LD_INT 8
8825: PUSH
8826: LD_INT 9
8828: PUSH
8829: LD_INT 10
8831: PUSH
8832: LD_INT 11
8834: PUSH
8835: LD_INT 12
8837: PUSH
8838: LD_INT 13
8840: PUSH
8841: LD_INT 14
8843: PUSH
8844: LD_INT 15
8846: PUSH
8847: LD_INT 16
8849: PUSH
8850: LD_INT 17
8852: PUSH
8853: LD_INT 18
8855: PUSH
8856: LD_INT 19
8858: PUSH
8859: LD_INT 20
8861: PUSH
8862: LD_INT 21
8864: PUSH
8865: LD_INT 22
8867: PUSH
8868: LD_INT 23
8870: PUSH
8871: LD_INT 24
8873: PUSH
8874: LD_INT 25
8876: PUSH
8877: LD_INT 26
8879: PUSH
8880: LD_INT 27
8882: PUSH
8883: LD_INT 28
8885: PUSH
8886: LD_INT 30
8888: PUSH
8889: LD_INT 31
8891: PUSH
8892: LD_INT 32
8894: PUSH
8895: LD_INT 33
8897: PUSH
8898: LD_INT 34
8900: PUSH
8901: LD_INT 36
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 101
8942: PUSH
8943: LD_INT 102
8945: PUSH
8946: LD_INT 103
8948: PUSH
8949: LD_INT 104
8951: PUSH
8952: LD_INT 105
8954: PUSH
8955: LD_INT 106
8957: PUSH
8958: LD_INT 107
8960: PUSH
8961: LD_INT 108
8963: PUSH
8964: LD_INT 109
8966: PUSH
8967: LD_INT 110
8969: PUSH
8970: LD_INT 111
8972: PUSH
8973: LD_INT 112
8975: PUSH
8976: LD_INT 113
8978: PUSH
8979: LD_INT 114
8981: PUSH
8982: LD_INT 116
8984: PUSH
8985: LD_INT 117
8987: PUSH
8988: LD_INT 118
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: ST_TO_ADDR
9014: GO 10469
9016: LD_INT 13
9018: DOUBLE
9019: EQUAL
9020: IFTRUE 9024
9022: GO 9232
9024: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9025: LD_ADDR_VAR 0 2
9029: PUSH
9030: LD_INT 1
9032: PUSH
9033: LD_INT 2
9035: PUSH
9036: LD_INT 3
9038: PUSH
9039: LD_INT 4
9041: PUSH
9042: LD_INT 5
9044: PUSH
9045: LD_INT 8
9047: PUSH
9048: LD_INT 9
9050: PUSH
9051: LD_INT 10
9053: PUSH
9054: LD_INT 11
9056: PUSH
9057: LD_INT 12
9059: PUSH
9060: LD_INT 14
9062: PUSH
9063: LD_INT 15
9065: PUSH
9066: LD_INT 16
9068: PUSH
9069: LD_INT 17
9071: PUSH
9072: LD_INT 18
9074: PUSH
9075: LD_INT 19
9077: PUSH
9078: LD_INT 20
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 22
9086: PUSH
9087: LD_INT 23
9089: PUSH
9090: LD_INT 24
9092: PUSH
9093: LD_INT 25
9095: PUSH
9096: LD_INT 26
9098: PUSH
9099: LD_INT 27
9101: PUSH
9102: LD_INT 28
9104: PUSH
9105: LD_INT 30
9107: PUSH
9108: LD_INT 31
9110: PUSH
9111: LD_INT 32
9113: PUSH
9114: LD_INT 33
9116: PUSH
9117: LD_INT 34
9119: PUSH
9120: LD_INT 36
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 101
9158: PUSH
9159: LD_INT 102
9161: PUSH
9162: LD_INT 103
9164: PUSH
9165: LD_INT 104
9167: PUSH
9168: LD_INT 105
9170: PUSH
9171: LD_INT 106
9173: PUSH
9174: LD_INT 107
9176: PUSH
9177: LD_INT 108
9179: PUSH
9180: LD_INT 109
9182: PUSH
9183: LD_INT 110
9185: PUSH
9186: LD_INT 111
9188: PUSH
9189: LD_INT 112
9191: PUSH
9192: LD_INT 113
9194: PUSH
9195: LD_INT 114
9197: PUSH
9198: LD_INT 116
9200: PUSH
9201: LD_INT 117
9203: PUSH
9204: LD_INT 118
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: ST_TO_ADDR
9230: GO 10469
9232: LD_INT 14
9234: DOUBLE
9235: EQUAL
9236: IFTRUE 9240
9238: GO 9464
9240: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_INT 1
9248: PUSH
9249: LD_INT 2
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: LD_INT 4
9257: PUSH
9258: LD_INT 5
9260: PUSH
9261: LD_INT 6
9263: PUSH
9264: LD_INT 7
9266: PUSH
9267: LD_INT 8
9269: PUSH
9270: LD_INT 9
9272: PUSH
9273: LD_INT 10
9275: PUSH
9276: LD_INT 11
9278: PUSH
9279: LD_INT 12
9281: PUSH
9282: LD_INT 13
9284: PUSH
9285: LD_INT 14
9287: PUSH
9288: LD_INT 15
9290: PUSH
9291: LD_INT 16
9293: PUSH
9294: LD_INT 17
9296: PUSH
9297: LD_INT 18
9299: PUSH
9300: LD_INT 19
9302: PUSH
9303: LD_INT 20
9305: PUSH
9306: LD_INT 21
9308: PUSH
9309: LD_INT 22
9311: PUSH
9312: LD_INT 23
9314: PUSH
9315: LD_INT 24
9317: PUSH
9318: LD_INT 25
9320: PUSH
9321: LD_INT 26
9323: PUSH
9324: LD_INT 27
9326: PUSH
9327: LD_INT 28
9329: PUSH
9330: LD_INT 29
9332: PUSH
9333: LD_INT 30
9335: PUSH
9336: LD_INT 31
9338: PUSH
9339: LD_INT 32
9341: PUSH
9342: LD_INT 33
9344: PUSH
9345: LD_INT 34
9347: PUSH
9348: LD_INT 36
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 101
9390: PUSH
9391: LD_INT 102
9393: PUSH
9394: LD_INT 103
9396: PUSH
9397: LD_INT 104
9399: PUSH
9400: LD_INT 105
9402: PUSH
9403: LD_INT 106
9405: PUSH
9406: LD_INT 107
9408: PUSH
9409: LD_INT 108
9411: PUSH
9412: LD_INT 109
9414: PUSH
9415: LD_INT 110
9417: PUSH
9418: LD_INT 111
9420: PUSH
9421: LD_INT 112
9423: PUSH
9424: LD_INT 113
9426: PUSH
9427: LD_INT 114
9429: PUSH
9430: LD_INT 116
9432: PUSH
9433: LD_INT 117
9435: PUSH
9436: LD_INT 118
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: ST_TO_ADDR
9462: GO 10469
9464: LD_INT 15
9466: DOUBLE
9467: EQUAL
9468: IFTRUE 9472
9470: GO 9696
9472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9473: LD_ADDR_VAR 0 2
9477: PUSH
9478: LD_INT 1
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: LD_INT 3
9486: PUSH
9487: LD_INT 4
9489: PUSH
9490: LD_INT 5
9492: PUSH
9493: LD_INT 6
9495: PUSH
9496: LD_INT 7
9498: PUSH
9499: LD_INT 8
9501: PUSH
9502: LD_INT 9
9504: PUSH
9505: LD_INT 10
9507: PUSH
9508: LD_INT 11
9510: PUSH
9511: LD_INT 12
9513: PUSH
9514: LD_INT 13
9516: PUSH
9517: LD_INT 14
9519: PUSH
9520: LD_INT 15
9522: PUSH
9523: LD_INT 16
9525: PUSH
9526: LD_INT 17
9528: PUSH
9529: LD_INT 18
9531: PUSH
9532: LD_INT 19
9534: PUSH
9535: LD_INT 20
9537: PUSH
9538: LD_INT 21
9540: PUSH
9541: LD_INT 22
9543: PUSH
9544: LD_INT 23
9546: PUSH
9547: LD_INT 24
9549: PUSH
9550: LD_INT 25
9552: PUSH
9553: LD_INT 26
9555: PUSH
9556: LD_INT 27
9558: PUSH
9559: LD_INT 28
9561: PUSH
9562: LD_INT 29
9564: PUSH
9565: LD_INT 30
9567: PUSH
9568: LD_INT 31
9570: PUSH
9571: LD_INT 32
9573: PUSH
9574: LD_INT 33
9576: PUSH
9577: LD_INT 34
9579: PUSH
9580: LD_INT 36
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 101
9622: PUSH
9623: LD_INT 102
9625: PUSH
9626: LD_INT 103
9628: PUSH
9629: LD_INT 104
9631: PUSH
9632: LD_INT 105
9634: PUSH
9635: LD_INT 106
9637: PUSH
9638: LD_INT 107
9640: PUSH
9641: LD_INT 108
9643: PUSH
9644: LD_INT 109
9646: PUSH
9647: LD_INT 110
9649: PUSH
9650: LD_INT 111
9652: PUSH
9653: LD_INT 112
9655: PUSH
9656: LD_INT 113
9658: PUSH
9659: LD_INT 114
9661: PUSH
9662: LD_INT 116
9664: PUSH
9665: LD_INT 117
9667: PUSH
9668: LD_INT 118
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: ST_TO_ADDR
9694: GO 10469
9696: LD_INT 16
9698: DOUBLE
9699: EQUAL
9700: IFTRUE 9704
9702: GO 9840
9704: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9705: LD_ADDR_VAR 0 2
9709: PUSH
9710: LD_INT 2
9712: PUSH
9713: LD_INT 4
9715: PUSH
9716: LD_INT 5
9718: PUSH
9719: LD_INT 7
9721: PUSH
9722: LD_INT 11
9724: PUSH
9725: LD_INT 12
9727: PUSH
9728: LD_INT 15
9730: PUSH
9731: LD_INT 16
9733: PUSH
9734: LD_INT 20
9736: PUSH
9737: LD_INT 21
9739: PUSH
9740: LD_INT 22
9742: PUSH
9743: LD_INT 23
9745: PUSH
9746: LD_INT 25
9748: PUSH
9749: LD_INT 26
9751: PUSH
9752: LD_INT 30
9754: PUSH
9755: LD_INT 31
9757: PUSH
9758: LD_INT 32
9760: PUSH
9761: LD_INT 33
9763: PUSH
9764: LD_INT 34
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 101
9790: PUSH
9791: LD_INT 102
9793: PUSH
9794: LD_INT 103
9796: PUSH
9797: LD_INT 106
9799: PUSH
9800: LD_INT 108
9802: PUSH
9803: LD_INT 112
9805: PUSH
9806: LD_INT 113
9808: PUSH
9809: LD_INT 114
9811: PUSH
9812: LD_INT 116
9814: PUSH
9815: LD_INT 117
9817: PUSH
9818: LD_INT 118
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: ST_TO_ADDR
9838: GO 10469
9840: LD_INT 17
9842: DOUBLE
9843: EQUAL
9844: IFTRUE 9848
9846: GO 10072
9848: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9849: LD_ADDR_VAR 0 2
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: LD_INT 2
9859: PUSH
9860: LD_INT 3
9862: PUSH
9863: LD_INT 4
9865: PUSH
9866: LD_INT 5
9868: PUSH
9869: LD_INT 6
9871: PUSH
9872: LD_INT 7
9874: PUSH
9875: LD_INT 8
9877: PUSH
9878: LD_INT 9
9880: PUSH
9881: LD_INT 10
9883: PUSH
9884: LD_INT 11
9886: PUSH
9887: LD_INT 12
9889: PUSH
9890: LD_INT 13
9892: PUSH
9893: LD_INT 14
9895: PUSH
9896: LD_INT 15
9898: PUSH
9899: LD_INT 16
9901: PUSH
9902: LD_INT 17
9904: PUSH
9905: LD_INT 18
9907: PUSH
9908: LD_INT 19
9910: PUSH
9911: LD_INT 20
9913: PUSH
9914: LD_INT 21
9916: PUSH
9917: LD_INT 22
9919: PUSH
9920: LD_INT 23
9922: PUSH
9923: LD_INT 24
9925: PUSH
9926: LD_INT 25
9928: PUSH
9929: LD_INT 26
9931: PUSH
9932: LD_INT 27
9934: PUSH
9935: LD_INT 28
9937: PUSH
9938: LD_INT 29
9940: PUSH
9941: LD_INT 30
9943: PUSH
9944: LD_INT 31
9946: PUSH
9947: LD_INT 32
9949: PUSH
9950: LD_INT 33
9952: PUSH
9953: LD_INT 34
9955: PUSH
9956: LD_INT 36
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 101
9998: PUSH
9999: LD_INT 102
10001: PUSH
10002: LD_INT 103
10004: PUSH
10005: LD_INT 104
10007: PUSH
10008: LD_INT 105
10010: PUSH
10011: LD_INT 106
10013: PUSH
10014: LD_INT 107
10016: PUSH
10017: LD_INT 108
10019: PUSH
10020: LD_INT 109
10022: PUSH
10023: LD_INT 110
10025: PUSH
10026: LD_INT 111
10028: PUSH
10029: LD_INT 112
10031: PUSH
10032: LD_INT 113
10034: PUSH
10035: LD_INT 114
10037: PUSH
10038: LD_INT 116
10040: PUSH
10041: LD_INT 117
10043: PUSH
10044: LD_INT 118
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: ST_TO_ADDR
10070: GO 10469
10072: LD_INT 18
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10228
10080: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10081: LD_ADDR_VAR 0 2
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: LD_INT 4
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: LD_INT 7
10097: PUSH
10098: LD_INT 11
10100: PUSH
10101: LD_INT 12
10103: PUSH
10104: LD_INT 15
10106: PUSH
10107: LD_INT 16
10109: PUSH
10110: LD_INT 20
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 22
10118: PUSH
10119: LD_INT 23
10121: PUSH
10122: LD_INT 25
10124: PUSH
10125: LD_INT 26
10127: PUSH
10128: LD_INT 30
10130: PUSH
10131: LD_INT 31
10133: PUSH
10134: LD_INT 32
10136: PUSH
10137: LD_INT 33
10139: PUSH
10140: LD_INT 34
10142: PUSH
10143: LD_INT 35
10145: PUSH
10146: LD_INT 36
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 101
10174: PUSH
10175: LD_INT 102
10177: PUSH
10178: LD_INT 103
10180: PUSH
10181: LD_INT 106
10183: PUSH
10184: LD_INT 108
10186: PUSH
10187: LD_INT 112
10189: PUSH
10190: LD_INT 113
10192: PUSH
10193: LD_INT 114
10195: PUSH
10196: LD_INT 115
10198: PUSH
10199: LD_INT 116
10201: PUSH
10202: LD_INT 117
10204: PUSH
10205: LD_INT 118
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: ST_TO_ADDR
10226: GO 10469
10228: LD_INT 19
10230: DOUBLE
10231: EQUAL
10232: IFTRUE 10236
10234: GO 10468
10236: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10237: LD_ADDR_VAR 0 2
10241: PUSH
10242: LD_INT 1
10244: PUSH
10245: LD_INT 2
10247: PUSH
10248: LD_INT 3
10250: PUSH
10251: LD_INT 4
10253: PUSH
10254: LD_INT 5
10256: PUSH
10257: LD_INT 6
10259: PUSH
10260: LD_INT 7
10262: PUSH
10263: LD_INT 8
10265: PUSH
10266: LD_INT 9
10268: PUSH
10269: LD_INT 10
10271: PUSH
10272: LD_INT 11
10274: PUSH
10275: LD_INT 12
10277: PUSH
10278: LD_INT 13
10280: PUSH
10281: LD_INT 14
10283: PUSH
10284: LD_INT 15
10286: PUSH
10287: LD_INT 16
10289: PUSH
10290: LD_INT 17
10292: PUSH
10293: LD_INT 18
10295: PUSH
10296: LD_INT 19
10298: PUSH
10299: LD_INT 20
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 22
10307: PUSH
10308: LD_INT 23
10310: PUSH
10311: LD_INT 24
10313: PUSH
10314: LD_INT 25
10316: PUSH
10317: LD_INT 26
10319: PUSH
10320: LD_INT 27
10322: PUSH
10323: LD_INT 28
10325: PUSH
10326: LD_INT 29
10328: PUSH
10329: LD_INT 30
10331: PUSH
10332: LD_INT 31
10334: PUSH
10335: LD_INT 32
10337: PUSH
10338: LD_INT 33
10340: PUSH
10341: LD_INT 34
10343: PUSH
10344: LD_INT 35
10346: PUSH
10347: LD_INT 36
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 101
10390: PUSH
10391: LD_INT 102
10393: PUSH
10394: LD_INT 103
10396: PUSH
10397: LD_INT 104
10399: PUSH
10400: LD_INT 105
10402: PUSH
10403: LD_INT 106
10405: PUSH
10406: LD_INT 107
10408: PUSH
10409: LD_INT 108
10411: PUSH
10412: LD_INT 109
10414: PUSH
10415: LD_INT 110
10417: PUSH
10418: LD_INT 111
10420: PUSH
10421: LD_INT 112
10423: PUSH
10424: LD_INT 113
10426: PUSH
10427: LD_INT 114
10429: PUSH
10430: LD_INT 115
10432: PUSH
10433: LD_INT 116
10435: PUSH
10436: LD_INT 117
10438: PUSH
10439: LD_INT 118
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: ST_TO_ADDR
10466: GO 10469
10468: POP
// end else
10469: GO 10700
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10471: LD_ADDR_VAR 0 2
10475: PUSH
10476: LD_INT 1
10478: PUSH
10479: LD_INT 2
10481: PUSH
10482: LD_INT 3
10484: PUSH
10485: LD_INT 4
10487: PUSH
10488: LD_INT 5
10490: PUSH
10491: LD_INT 6
10493: PUSH
10494: LD_INT 7
10496: PUSH
10497: LD_INT 8
10499: PUSH
10500: LD_INT 9
10502: PUSH
10503: LD_INT 10
10505: PUSH
10506: LD_INT 11
10508: PUSH
10509: LD_INT 12
10511: PUSH
10512: LD_INT 13
10514: PUSH
10515: LD_INT 14
10517: PUSH
10518: LD_INT 15
10520: PUSH
10521: LD_INT 16
10523: PUSH
10524: LD_INT 17
10526: PUSH
10527: LD_INT 18
10529: PUSH
10530: LD_INT 19
10532: PUSH
10533: LD_INT 20
10535: PUSH
10536: LD_INT 21
10538: PUSH
10539: LD_INT 22
10541: PUSH
10542: LD_INT 23
10544: PUSH
10545: LD_INT 24
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 26
10553: PUSH
10554: LD_INT 27
10556: PUSH
10557: LD_INT 28
10559: PUSH
10560: LD_INT 29
10562: PUSH
10563: LD_INT 30
10565: PUSH
10566: LD_INT 31
10568: PUSH
10569: LD_INT 32
10571: PUSH
10572: LD_INT 33
10574: PUSH
10575: LD_INT 34
10577: PUSH
10578: LD_INT 35
10580: PUSH
10581: LD_INT 36
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 101
10624: PUSH
10625: LD_INT 102
10627: PUSH
10628: LD_INT 103
10630: PUSH
10631: LD_INT 104
10633: PUSH
10634: LD_INT 105
10636: PUSH
10637: LD_INT 106
10639: PUSH
10640: LD_INT 107
10642: PUSH
10643: LD_INT 108
10645: PUSH
10646: LD_INT 109
10648: PUSH
10649: LD_INT 110
10651: PUSH
10652: LD_INT 111
10654: PUSH
10655: LD_INT 112
10657: PUSH
10658: LD_INT 113
10660: PUSH
10661: LD_INT 114
10663: PUSH
10664: LD_INT 115
10666: PUSH
10667: LD_INT 116
10669: PUSH
10670: LD_INT 117
10672: PUSH
10673: LD_INT 118
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: ST_TO_ADDR
// if result then
10700: LD_VAR 0 2
10704: IFFALSE 11490
// begin normal :=  ;
10706: LD_ADDR_VAR 0 5
10710: PUSH
10711: LD_STRING 
10713: ST_TO_ADDR
// hardcore :=  ;
10714: LD_ADDR_VAR 0 6
10718: PUSH
10719: LD_STRING 
10721: ST_TO_ADDR
// active :=  ;
10722: LD_ADDR_VAR 0 7
10726: PUSH
10727: LD_STRING 
10729: ST_TO_ADDR
// for i = 1 to normalCounter do
10730: LD_ADDR_VAR 0 8
10734: PUSH
10735: DOUBLE
10736: LD_INT 1
10738: DEC
10739: ST_TO_ADDR
10740: LD_EXP 26
10744: PUSH
10745: FOR_TO
10746: IFFALSE 10847
// begin tmp := 0 ;
10748: LD_ADDR_VAR 0 3
10752: PUSH
10753: LD_STRING 0
10755: ST_TO_ADDR
// if result [ 1 ] then
10756: LD_VAR 0 2
10760: PUSH
10761: LD_INT 1
10763: ARRAY
10764: IFFALSE 10829
// if result [ 1 ] [ 1 ] = i then
10766: LD_VAR 0 2
10770: PUSH
10771: LD_INT 1
10773: ARRAY
10774: PUSH
10775: LD_INT 1
10777: ARRAY
10778: PUSH
10779: LD_VAR 0 8
10783: EQUAL
10784: IFFALSE 10829
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10786: LD_ADDR_VAR 0 2
10790: PUSH
10791: LD_VAR 0 2
10795: PPUSH
10796: LD_INT 1
10798: PPUSH
10799: LD_VAR 0 2
10803: PUSH
10804: LD_INT 1
10806: ARRAY
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 3
10815: PPUSH
10816: CALL_OW 1
10820: ST_TO_ADDR
// tmp := 1 ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_STRING 1
10828: ST_TO_ADDR
// end ; normal := normal & tmp ;
10829: LD_ADDR_VAR 0 5
10833: PUSH
10834: LD_VAR 0 5
10838: PUSH
10839: LD_VAR 0 3
10843: STR
10844: ST_TO_ADDR
// end ;
10845: GO 10745
10847: POP
10848: POP
// for i = 1 to hardcoreCounter do
10849: LD_ADDR_VAR 0 8
10853: PUSH
10854: DOUBLE
10855: LD_INT 1
10857: DEC
10858: ST_TO_ADDR
10859: LD_EXP 27
10863: PUSH
10864: FOR_TO
10865: IFFALSE 10970
// begin tmp := 0 ;
10867: LD_ADDR_VAR 0 3
10871: PUSH
10872: LD_STRING 0
10874: ST_TO_ADDR
// if result [ 2 ] then
10875: LD_VAR 0 2
10879: PUSH
10880: LD_INT 2
10882: ARRAY
10883: IFFALSE 10952
// if result [ 2 ] [ 1 ] = 100 + i then
10885: LD_VAR 0 2
10889: PUSH
10890: LD_INT 2
10892: ARRAY
10893: PUSH
10894: LD_INT 1
10896: ARRAY
10897: PUSH
10898: LD_INT 100
10900: PUSH
10901: LD_VAR 0 8
10905: PLUS
10906: EQUAL
10907: IFFALSE 10952
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10909: LD_ADDR_VAR 0 2
10913: PUSH
10914: LD_VAR 0 2
10918: PPUSH
10919: LD_INT 2
10921: PPUSH
10922: LD_VAR 0 2
10926: PUSH
10927: LD_INT 2
10929: ARRAY
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 3
10938: PPUSH
10939: CALL_OW 1
10943: ST_TO_ADDR
// tmp := 1 ;
10944: LD_ADDR_VAR 0 3
10948: PUSH
10949: LD_STRING 1
10951: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10952: LD_ADDR_VAR 0 6
10956: PUSH
10957: LD_VAR 0 6
10961: PUSH
10962: LD_VAR 0 3
10966: STR
10967: ST_TO_ADDR
// end ;
10968: GO 10864
10970: POP
10971: POP
// if isGameLoad then
10972: LD_VAR 0 1
10976: IFFALSE 11451
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10978: LD_ADDR_VAR 0 4
10982: PUSH
10983: LD_EXP 30
10987: PUSH
10988: LD_EXP 29
10992: PUSH
10993: LD_EXP 31
10997: PUSH
10998: LD_EXP 28
11002: PUSH
11003: LD_EXP 32
11007: PUSH
11008: LD_EXP 33
11012: PUSH
11013: LD_EXP 34
11017: PUSH
11018: LD_EXP 35
11022: PUSH
11023: LD_EXP 36
11027: PUSH
11028: LD_EXP 37
11032: PUSH
11033: LD_EXP 38
11037: PUSH
11038: LD_EXP 39
11042: PUSH
11043: LD_EXP 40
11047: PUSH
11048: LD_EXP 41
11052: PUSH
11053: LD_EXP 49
11057: PUSH
11058: LD_EXP 50
11062: PUSH
11063: LD_EXP 51
11067: PUSH
11068: LD_EXP 52
11072: PUSH
11073: LD_EXP 54
11077: PUSH
11078: LD_EXP 55
11082: PUSH
11083: LD_EXP 56
11087: PUSH
11088: LD_EXP 59
11092: PUSH
11093: LD_EXP 61
11097: PUSH
11098: LD_EXP 62
11102: PUSH
11103: LD_EXP 63
11107: PUSH
11108: LD_EXP 65
11112: PUSH
11113: LD_EXP 66
11117: PUSH
11118: LD_EXP 69
11122: PUSH
11123: LD_EXP 70
11127: PUSH
11128: LD_EXP 71
11132: PUSH
11133: LD_EXP 72
11137: PUSH
11138: LD_EXP 73
11142: PUSH
11143: LD_EXP 74
11147: PUSH
11148: LD_EXP 75
11152: PUSH
11153: LD_EXP 76
11157: PUSH
11158: LD_EXP 77
11162: PUSH
11163: LD_EXP 42
11167: PUSH
11168: LD_EXP 43
11172: PUSH
11173: LD_EXP 46
11177: PUSH
11178: LD_EXP 47
11182: PUSH
11183: LD_EXP 48
11187: PUSH
11188: LD_EXP 44
11192: PUSH
11193: LD_EXP 45
11197: PUSH
11198: LD_EXP 53
11202: PUSH
11203: LD_EXP 57
11207: PUSH
11208: LD_EXP 58
11212: PUSH
11213: LD_EXP 60
11217: PUSH
11218: LD_EXP 64
11222: PUSH
11223: LD_EXP 67
11227: PUSH
11228: LD_EXP 68
11232: PUSH
11233: LD_EXP 78
11237: PUSH
11238: LD_EXP 79
11242: PUSH
11243: LD_EXP 80
11247: PUSH
11248: LD_EXP 81
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: ST_TO_ADDR
// tmp :=  ;
11309: LD_ADDR_VAR 0 3
11313: PUSH
11314: LD_STRING 
11316: ST_TO_ADDR
// for i = 1 to normalCounter do
11317: LD_ADDR_VAR 0 8
11321: PUSH
11322: DOUBLE
11323: LD_INT 1
11325: DEC
11326: ST_TO_ADDR
11327: LD_EXP 26
11331: PUSH
11332: FOR_TO
11333: IFFALSE 11369
// begin if flags [ i ] then
11335: LD_VAR 0 4
11339: PUSH
11340: LD_VAR 0 8
11344: ARRAY
11345: IFFALSE 11367
// tmp := tmp & i & ; ;
11347: LD_ADDR_VAR 0 3
11351: PUSH
11352: LD_VAR 0 3
11356: PUSH
11357: LD_VAR 0 8
11361: STR
11362: PUSH
11363: LD_STRING ;
11365: STR
11366: ST_TO_ADDR
// end ;
11367: GO 11332
11369: POP
11370: POP
// for i = 1 to hardcoreCounter do
11371: LD_ADDR_VAR 0 8
11375: PUSH
11376: DOUBLE
11377: LD_INT 1
11379: DEC
11380: ST_TO_ADDR
11381: LD_EXP 27
11385: PUSH
11386: FOR_TO
11387: IFFALSE 11433
// begin if flags [ normalCounter + i ] then
11389: LD_VAR 0 4
11393: PUSH
11394: LD_EXP 26
11398: PUSH
11399: LD_VAR 0 8
11403: PLUS
11404: ARRAY
11405: IFFALSE 11431
// tmp := tmp & ( 100 + i ) & ; ;
11407: LD_ADDR_VAR 0 3
11411: PUSH
11412: LD_VAR 0 3
11416: PUSH
11417: LD_INT 100
11419: PUSH
11420: LD_VAR 0 8
11424: PLUS
11425: STR
11426: PUSH
11427: LD_STRING ;
11429: STR
11430: ST_TO_ADDR
// end ;
11431: GO 11386
11433: POP
11434: POP
// if tmp then
11435: LD_VAR 0 3
11439: IFFALSE 11451
// active := tmp ;
11441: LD_ADDR_VAR 0 7
11445: PUSH
11446: LD_VAR 0 3
11450: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11451: LD_STRING getStreamItemsFromMission("
11453: PUSH
11454: LD_VAR 0 5
11458: STR
11459: PUSH
11460: LD_STRING ","
11462: STR
11463: PUSH
11464: LD_VAR 0 6
11468: STR
11469: PUSH
11470: LD_STRING ","
11472: STR
11473: PUSH
11474: LD_VAR 0 7
11478: STR
11479: PUSH
11480: LD_STRING ")
11482: STR
11483: PPUSH
11484: CALL_OW 559
// end else
11488: GO 11497
// ToLua ( getStreamItemsFromMission("","","") ) ;
11490: LD_STRING getStreamItemsFromMission("","","")
11492: PPUSH
11493: CALL_OW 559
// end ;
11497: LD_VAR 0 2
11501: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11502: LD_EXP 25
11506: PUSH
11507: LD_EXP 30
11511: AND
11512: IFFALSE 11636
11514: GO 11516
11516: DISABLE
11517: LD_INT 0
11519: PPUSH
11520: PPUSH
// begin enable ;
11521: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 22
11529: PUSH
11530: LD_OWVAR 2
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 2
11541: PUSH
11542: LD_INT 34
11544: PUSH
11545: LD_INT 7
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 34
11554: PUSH
11555: LD_INT 45
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 34
11564: PUSH
11565: LD_INT 28
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 34
11574: PUSH
11575: LD_INT 47
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: ST_TO_ADDR
// if not tmp then
11598: LD_VAR 0 2
11602: NOT
11603: IFFALSE 11607
// exit ;
11605: GO 11636
// for i in tmp do
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: LD_VAR 0 2
11616: PUSH
11617: FOR_IN
11618: IFFALSE 11634
// begin SetLives ( i , 0 ) ;
11620: LD_VAR 0 1
11624: PPUSH
11625: LD_INT 0
11627: PPUSH
11628: CALL_OW 234
// end ;
11632: GO 11617
11634: POP
11635: POP
// end ;
11636: PPOPN 2
11638: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11639: LD_EXP 25
11643: PUSH
11644: LD_EXP 31
11648: AND
11649: IFFALSE 11733
11651: GO 11653
11653: DISABLE
11654: LD_INT 0
11656: PPUSH
11657: PPUSH
// begin enable ;
11658: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11659: LD_ADDR_VAR 0 2
11663: PUSH
11664: LD_INT 22
11666: PUSH
11667: LD_OWVAR 2
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 32
11678: PUSH
11679: LD_INT 3
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PPUSH
11690: CALL_OW 69
11694: ST_TO_ADDR
// if not tmp then
11695: LD_VAR 0 2
11699: NOT
11700: IFFALSE 11704
// exit ;
11702: GO 11733
// for i in tmp do
11704: LD_ADDR_VAR 0 1
11708: PUSH
11709: LD_VAR 0 2
11713: PUSH
11714: FOR_IN
11715: IFFALSE 11731
// begin SetLives ( i , 0 ) ;
11717: LD_VAR 0 1
11721: PPUSH
11722: LD_INT 0
11724: PPUSH
11725: CALL_OW 234
// end ;
11729: GO 11714
11731: POP
11732: POP
// end ;
11733: PPOPN 2
11735: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11736: LD_EXP 25
11740: PUSH
11741: LD_EXP 28
11745: AND
11746: IFFALSE 11839
11748: GO 11750
11750: DISABLE
11751: LD_INT 0
11753: PPUSH
// begin enable ;
11754: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_OWVAR 2
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 2
11774: PUSH
11775: LD_INT 25
11777: PUSH
11778: LD_INT 5
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 25
11787: PUSH
11788: LD_INT 9
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 25
11797: PUSH
11798: LD_INT 8
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PPUSH
11815: CALL_OW 69
11819: PUSH
11820: FOR_IN
11821: IFFALSE 11837
// begin SetClass ( i , 1 ) ;
11823: LD_VAR 0 1
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: CALL_OW 336
// end ;
11835: GO 11820
11837: POP
11838: POP
// end ;
11839: PPOPN 1
11841: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11842: LD_EXP 25
11846: PUSH
11847: LD_EXP 29
11851: AND
11852: PUSH
11853: LD_OWVAR 65
11857: PUSH
11858: LD_INT 7
11860: LESS
11861: AND
11862: IFFALSE 11876
11864: GO 11866
11866: DISABLE
// begin enable ;
11867: ENABLE
// game_speed := 7 ;
11868: LD_ADDR_OWVAR 65
11872: PUSH
11873: LD_INT 7
11875: ST_TO_ADDR
// end ;
11876: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11877: LD_EXP 25
11881: PUSH
11882: LD_EXP 32
11886: AND
11887: IFFALSE 12089
11889: GO 11891
11891: DISABLE
11892: LD_INT 0
11894: PPUSH
11895: PPUSH
11896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11897: LD_ADDR_VAR 0 3
11901: PUSH
11902: LD_INT 81
11904: PUSH
11905: LD_OWVAR 2
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 21
11916: PUSH
11917: LD_INT 1
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PPUSH
11928: CALL_OW 69
11932: ST_TO_ADDR
// if not tmp then
11933: LD_VAR 0 3
11937: NOT
11938: IFFALSE 11942
// exit ;
11940: GO 12089
// if tmp > 5 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 5
11949: GREATER
11950: IFFALSE 11962
// k := 5 else
11952: LD_ADDR_VAR 0 2
11956: PUSH
11957: LD_INT 5
11959: ST_TO_ADDR
11960: GO 11972
// k := tmp ;
11962: LD_ADDR_VAR 0 2
11966: PUSH
11967: LD_VAR 0 3
11971: ST_TO_ADDR
// for i := 1 to k do
11972: LD_ADDR_VAR 0 1
11976: PUSH
11977: DOUBLE
11978: LD_INT 1
11980: DEC
11981: ST_TO_ADDR
11982: LD_VAR 0 2
11986: PUSH
11987: FOR_TO
11988: IFFALSE 12087
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11990: LD_VAR 0 3
11994: PUSH
11995: LD_VAR 0 1
11999: ARRAY
12000: PPUSH
12001: LD_VAR 0 1
12005: PUSH
12006: LD_INT 4
12008: MOD
12009: PUSH
12010: LD_INT 1
12012: PLUS
12013: PPUSH
12014: CALL_OW 259
12018: PUSH
12019: LD_INT 10
12021: LESS
12022: IFFALSE 12085
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12024: LD_VAR 0 3
12028: PUSH
12029: LD_VAR 0 1
12033: ARRAY
12034: PPUSH
12035: LD_VAR 0 1
12039: PUSH
12040: LD_INT 4
12042: MOD
12043: PUSH
12044: LD_INT 1
12046: PLUS
12047: PPUSH
12048: LD_VAR 0 3
12052: PUSH
12053: LD_VAR 0 1
12057: ARRAY
12058: PPUSH
12059: LD_VAR 0 1
12063: PUSH
12064: LD_INT 4
12066: MOD
12067: PUSH
12068: LD_INT 1
12070: PLUS
12071: PPUSH
12072: CALL_OW 259
12076: PUSH
12077: LD_INT 1
12079: PLUS
12080: PPUSH
12081: CALL_OW 237
12085: GO 11987
12087: POP
12088: POP
// end ;
12089: PPOPN 3
12091: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12092: LD_EXP 25
12096: PUSH
12097: LD_EXP 33
12101: AND
12102: IFFALSE 12122
12104: GO 12106
12106: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12107: LD_INT 4
12109: PPUSH
12110: LD_OWVAR 2
12114: PPUSH
12115: LD_INT 0
12117: PPUSH
12118: CALL_OW 324
12122: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12123: LD_EXP 25
12127: PUSH
12128: LD_EXP 62
12132: AND
12133: IFFALSE 12153
12135: GO 12137
12137: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12138: LD_INT 19
12140: PPUSH
12141: LD_OWVAR 2
12145: PPUSH
12146: LD_INT 0
12148: PPUSH
12149: CALL_OW 324
12153: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12154: LD_EXP 25
12158: PUSH
12159: LD_EXP 34
12163: AND
12164: IFFALSE 12266
12166: GO 12168
12168: DISABLE
12169: LD_INT 0
12171: PPUSH
12172: PPUSH
// begin enable ;
12173: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12174: LD_ADDR_VAR 0 2
12178: PUSH
12179: LD_INT 22
12181: PUSH
12182: LD_OWVAR 2
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 2
12193: PUSH
12194: LD_INT 34
12196: PUSH
12197: LD_INT 11
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 34
12206: PUSH
12207: LD_INT 30
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 69
12227: ST_TO_ADDR
// if not tmp then
12228: LD_VAR 0 2
12232: NOT
12233: IFFALSE 12237
// exit ;
12235: GO 12266
// for i in tmp do
12237: LD_ADDR_VAR 0 1
12241: PUSH
12242: LD_VAR 0 2
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12264
// begin SetLives ( i , 0 ) ;
12250: LD_VAR 0 1
12254: PPUSH
12255: LD_INT 0
12257: PPUSH
12258: CALL_OW 234
// end ;
12262: GO 12247
12264: POP
12265: POP
// end ;
12266: PPOPN 2
12268: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12269: LD_EXP 25
12273: PUSH
12274: LD_EXP 35
12278: AND
12279: IFFALSE 12299
12281: GO 12283
12283: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12284: LD_INT 32
12286: PPUSH
12287: LD_OWVAR 2
12291: PPUSH
12292: LD_INT 0
12294: PPUSH
12295: CALL_OW 324
12299: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12300: LD_EXP 25
12304: PUSH
12305: LD_EXP 36
12309: AND
12310: IFFALSE 12491
12312: GO 12314
12314: DISABLE
12315: LD_INT 0
12317: PPUSH
12318: PPUSH
12319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12320: LD_ADDR_VAR 0 2
12324: PUSH
12325: LD_INT 22
12327: PUSH
12328: LD_OWVAR 2
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 33
12339: PUSH
12340: LD_INT 3
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 69
12355: ST_TO_ADDR
// if not tmp then
12356: LD_VAR 0 2
12360: NOT
12361: IFFALSE 12365
// exit ;
12363: GO 12491
// side := 0 ;
12365: LD_ADDR_VAR 0 3
12369: PUSH
12370: LD_INT 0
12372: ST_TO_ADDR
// for i := 1 to 8 do
12373: LD_ADDR_VAR 0 1
12377: PUSH
12378: DOUBLE
12379: LD_INT 1
12381: DEC
12382: ST_TO_ADDR
12383: LD_INT 8
12385: PUSH
12386: FOR_TO
12387: IFFALSE 12435
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12389: LD_OWVAR 2
12393: PUSH
12394: LD_VAR 0 1
12398: NONEQUAL
12399: PUSH
12400: LD_OWVAR 2
12404: PPUSH
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 81
12414: PUSH
12415: LD_INT 2
12417: EQUAL
12418: AND
12419: IFFALSE 12433
// begin side := i ;
12421: LD_ADDR_VAR 0 3
12425: PUSH
12426: LD_VAR 0 1
12430: ST_TO_ADDR
// break ;
12431: GO 12435
// end ;
12433: GO 12386
12435: POP
12436: POP
// if not side then
12437: LD_VAR 0 3
12441: NOT
12442: IFFALSE 12446
// exit ;
12444: GO 12491
// for i := 1 to tmp do
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: DOUBLE
12452: LD_INT 1
12454: DEC
12455: ST_TO_ADDR
12456: LD_VAR 0 2
12460: PUSH
12461: FOR_TO
12462: IFFALSE 12489
// if Prob ( 60 ) then
12464: LD_INT 60
12466: PPUSH
12467: CALL_OW 13
12471: IFFALSE 12487
// SetSide ( i , side ) ;
12473: LD_VAR 0 1
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: CALL_OW 235
12487: GO 12461
12489: POP
12490: POP
// end ;
12491: PPOPN 3
12493: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12494: LD_EXP 25
12498: PUSH
12499: LD_EXP 38
12503: AND
12504: IFFALSE 12623
12506: GO 12508
12508: DISABLE
12509: LD_INT 0
12511: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12512: LD_ADDR_VAR 0 1
12516: PUSH
12517: LD_INT 22
12519: PUSH
12520: LD_OWVAR 2
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 21
12531: PUSH
12532: LD_INT 1
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 3
12541: PUSH
12542: LD_INT 23
12544: PUSH
12545: LD_INT 0
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: LIST
12560: PPUSH
12561: CALL_OW 69
12565: PUSH
12566: FOR_IN
12567: IFFALSE 12621
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12569: LD_VAR 0 1
12573: PPUSH
12574: CALL_OW 257
12578: PUSH
12579: LD_INT 1
12581: PUSH
12582: LD_INT 2
12584: PUSH
12585: LD_INT 3
12587: PUSH
12588: LD_INT 4
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: IN
12597: IFFALSE 12619
// SetClass ( un , rand ( 1 , 4 ) ) ;
12599: LD_VAR 0 1
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: LD_INT 4
12609: PPUSH
12610: CALL_OW 12
12614: PPUSH
12615: CALL_OW 336
12619: GO 12566
12621: POP
12622: POP
// end ;
12623: PPOPN 1
12625: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12626: LD_EXP 25
12630: PUSH
12631: LD_EXP 37
12635: AND
12636: IFFALSE 12715
12638: GO 12640
12640: DISABLE
12641: LD_INT 0
12643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12644: LD_ADDR_VAR 0 1
12648: PUSH
12649: LD_INT 22
12651: PUSH
12652: LD_OWVAR 2
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: LD_INT 21
12663: PUSH
12664: LD_INT 3
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PPUSH
12675: CALL_OW 69
12679: ST_TO_ADDR
// if not tmp then
12680: LD_VAR 0 1
12684: NOT
12685: IFFALSE 12689
// exit ;
12687: GO 12715
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12689: LD_VAR 0 1
12693: PUSH
12694: LD_INT 1
12696: PPUSH
12697: LD_VAR 0 1
12701: PPUSH
12702: CALL_OW 12
12706: ARRAY
12707: PPUSH
12708: LD_INT 100
12710: PPUSH
12711: CALL_OW 234
// end ;
12715: PPOPN 1
12717: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12718: LD_EXP 25
12722: PUSH
12723: LD_EXP 39
12727: AND
12728: IFFALSE 12826
12730: GO 12732
12732: DISABLE
12733: LD_INT 0
12735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12736: LD_ADDR_VAR 0 1
12740: PUSH
12741: LD_INT 22
12743: PUSH
12744: LD_OWVAR 2
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 1
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 69
12771: ST_TO_ADDR
// if not tmp then
12772: LD_VAR 0 1
12776: NOT
12777: IFFALSE 12781
// exit ;
12779: GO 12826
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12781: LD_VAR 0 1
12785: PUSH
12786: LD_INT 1
12788: PPUSH
12789: LD_VAR 0 1
12793: PPUSH
12794: CALL_OW 12
12798: ARRAY
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: LD_INT 4
12805: PPUSH
12806: CALL_OW 12
12810: PPUSH
12811: LD_INT 3000
12813: PPUSH
12814: LD_INT 9000
12816: PPUSH
12817: CALL_OW 12
12821: PPUSH
12822: CALL_OW 492
// end ;
12826: PPOPN 1
12828: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12829: LD_EXP 25
12833: PUSH
12834: LD_EXP 40
12838: AND
12839: IFFALSE 12859
12841: GO 12843
12843: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12844: LD_INT 1
12846: PPUSH
12847: LD_OWVAR 2
12851: PPUSH
12852: LD_INT 0
12854: PPUSH
12855: CALL_OW 324
12859: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12860: LD_EXP 25
12864: PUSH
12865: LD_EXP 41
12869: AND
12870: IFFALSE 12953
12872: GO 12874
12874: DISABLE
12875: LD_INT 0
12877: PPUSH
12878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12879: LD_ADDR_VAR 0 2
12883: PUSH
12884: LD_INT 22
12886: PUSH
12887: LD_OWVAR 2
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 21
12898: PUSH
12899: LD_INT 3
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 69
12914: ST_TO_ADDR
// if not tmp then
12915: LD_VAR 0 2
12919: NOT
12920: IFFALSE 12924
// exit ;
12922: GO 12953
// for i in tmp do
12924: LD_ADDR_VAR 0 1
12928: PUSH
12929: LD_VAR 0 2
12933: PUSH
12934: FOR_IN
12935: IFFALSE 12951
// SetBLevel ( i , 10 ) ;
12937: LD_VAR 0 1
12941: PPUSH
12942: LD_INT 10
12944: PPUSH
12945: CALL_OW 241
12949: GO 12934
12951: POP
12952: POP
// end ;
12953: PPOPN 2
12955: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12956: LD_EXP 25
12960: PUSH
12961: LD_EXP 42
12965: AND
12966: IFFALSE 13077
12968: GO 12970
12970: DISABLE
12971: LD_INT 0
12973: PPUSH
12974: PPUSH
12975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12976: LD_ADDR_VAR 0 3
12980: PUSH
12981: LD_INT 22
12983: PUSH
12984: LD_OWVAR 2
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PUSH
12993: LD_INT 25
12995: PUSH
12996: LD_INT 1
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 69
13011: ST_TO_ADDR
// if not tmp then
13012: LD_VAR 0 3
13016: NOT
13017: IFFALSE 13021
// exit ;
13019: GO 13077
// un := tmp [ rand ( 1 , tmp ) ] ;
13021: LD_ADDR_VAR 0 2
13025: PUSH
13026: LD_VAR 0 3
13030: PUSH
13031: LD_INT 1
13033: PPUSH
13034: LD_VAR 0 3
13038: PPUSH
13039: CALL_OW 12
13043: ARRAY
13044: ST_TO_ADDR
// if Crawls ( un ) then
13045: LD_VAR 0 2
13049: PPUSH
13050: CALL_OW 318
13054: IFFALSE 13065
// ComWalk ( un ) ;
13056: LD_VAR 0 2
13060: PPUSH
13061: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13065: LD_VAR 0 2
13069: PPUSH
13070: LD_INT 5
13072: PPUSH
13073: CALL_OW 336
// end ;
13077: PPOPN 3
13079: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13080: LD_EXP 25
13084: PUSH
13085: LD_EXP 43
13089: AND
13090: PUSH
13091: LD_OWVAR 67
13095: PUSH
13096: LD_INT 4
13098: LESS
13099: AND
13100: IFFALSE 13119
13102: GO 13104
13104: DISABLE
// begin Difficulty := Difficulty + 1 ;
13105: LD_ADDR_OWVAR 67
13109: PUSH
13110: LD_OWVAR 67
13114: PUSH
13115: LD_INT 1
13117: PLUS
13118: ST_TO_ADDR
// end ;
13119: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13120: LD_EXP 25
13124: PUSH
13125: LD_EXP 44
13129: AND
13130: IFFALSE 13233
13132: GO 13134
13134: DISABLE
13135: LD_INT 0
13137: PPUSH
// begin for i := 1 to 5 do
13138: LD_ADDR_VAR 0 1
13142: PUSH
13143: DOUBLE
13144: LD_INT 1
13146: DEC
13147: ST_TO_ADDR
13148: LD_INT 5
13150: PUSH
13151: FOR_TO
13152: IFFALSE 13231
// begin uc_nation := nation_nature ;
13154: LD_ADDR_OWVAR 21
13158: PUSH
13159: LD_INT 0
13161: ST_TO_ADDR
// uc_side := 0 ;
13162: LD_ADDR_OWVAR 20
13166: PUSH
13167: LD_INT 0
13169: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13170: LD_ADDR_OWVAR 29
13174: PUSH
13175: LD_INT 12
13177: PUSH
13178: LD_INT 12
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: ST_TO_ADDR
// hc_agressivity := 20 ;
13185: LD_ADDR_OWVAR 35
13189: PUSH
13190: LD_INT 20
13192: ST_TO_ADDR
// hc_class := class_tiger ;
13193: LD_ADDR_OWVAR 28
13197: PUSH
13198: LD_INT 14
13200: ST_TO_ADDR
// hc_gallery :=  ;
13201: LD_ADDR_OWVAR 33
13205: PUSH
13206: LD_STRING 
13208: ST_TO_ADDR
// hc_name :=  ;
13209: LD_ADDR_OWVAR 26
13213: PUSH
13214: LD_STRING 
13216: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13217: CALL_OW 44
13221: PPUSH
13222: LD_INT 0
13224: PPUSH
13225: CALL_OW 51
// end ;
13229: GO 13151
13231: POP
13232: POP
// end ;
13233: PPOPN 1
13235: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13236: LD_EXP 25
13240: PUSH
13241: LD_EXP 45
13245: AND
13246: IFFALSE 13255
13248: GO 13250
13250: DISABLE
// StreamSibBomb ;
13251: CALL 13256 0 0
13255: END
// export function StreamSibBomb ; var i , x , y ; begin
13256: LD_INT 0
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
// result := false ;
13262: LD_ADDR_VAR 0 1
13266: PUSH
13267: LD_INT 0
13269: ST_TO_ADDR
// for i := 1 to 16 do
13270: LD_ADDR_VAR 0 2
13274: PUSH
13275: DOUBLE
13276: LD_INT 1
13278: DEC
13279: ST_TO_ADDR
13280: LD_INT 16
13282: PUSH
13283: FOR_TO
13284: IFFALSE 13483
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13286: LD_ADDR_VAR 0 3
13290: PUSH
13291: LD_INT 10
13293: PUSH
13294: LD_INT 20
13296: PUSH
13297: LD_INT 30
13299: PUSH
13300: LD_INT 40
13302: PUSH
13303: LD_INT 50
13305: PUSH
13306: LD_INT 60
13308: PUSH
13309: LD_INT 70
13311: PUSH
13312: LD_INT 80
13314: PUSH
13315: LD_INT 90
13317: PUSH
13318: LD_INT 100
13320: PUSH
13321: LD_INT 110
13323: PUSH
13324: LD_INT 120
13326: PUSH
13327: LD_INT 130
13329: PUSH
13330: LD_INT 140
13332: PUSH
13333: LD_INT 150
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 1
13355: PPUSH
13356: LD_INT 15
13358: PPUSH
13359: CALL_OW 12
13363: ARRAY
13364: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13365: LD_ADDR_VAR 0 4
13369: PUSH
13370: LD_INT 10
13372: PUSH
13373: LD_INT 20
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 40
13381: PUSH
13382: LD_INT 50
13384: PUSH
13385: LD_INT 60
13387: PUSH
13388: LD_INT 70
13390: PUSH
13391: LD_INT 80
13393: PUSH
13394: LD_INT 90
13396: PUSH
13397: LD_INT 100
13399: PUSH
13400: LD_INT 110
13402: PUSH
13403: LD_INT 120
13405: PUSH
13406: LD_INT 130
13408: PUSH
13409: LD_INT 140
13411: PUSH
13412: LD_INT 150
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 1
13434: PPUSH
13435: LD_INT 15
13437: PPUSH
13438: CALL_OW 12
13442: ARRAY
13443: ST_TO_ADDR
// if ValidHex ( x , y ) then
13444: LD_VAR 0 3
13448: PPUSH
13449: LD_VAR 0 4
13453: PPUSH
13454: CALL_OW 488
13458: IFFALSE 13481
// begin result := [ x , y ] ;
13460: LD_ADDR_VAR 0 1
13464: PUSH
13465: LD_VAR 0 3
13469: PUSH
13470: LD_VAR 0 4
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: ST_TO_ADDR
// break ;
13479: GO 13483
// end ; end ;
13481: GO 13283
13483: POP
13484: POP
// if result then
13485: LD_VAR 0 1
13489: IFFALSE 13549
// begin ToLua ( playSibBomb() ) ;
13491: LD_STRING playSibBomb()
13493: PPUSH
13494: CALL_OW 559
// wait ( 0 0$14 ) ;
13498: LD_INT 490
13500: PPUSH
13501: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13505: LD_VAR 0 1
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PPUSH
13514: LD_VAR 0 1
13518: PUSH
13519: LD_INT 2
13521: ARRAY
13522: PPUSH
13523: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13527: LD_VAR 0 1
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: PPUSH
13536: LD_VAR 0 1
13540: PUSH
13541: LD_INT 2
13543: ARRAY
13544: PPUSH
13545: CALL_OW 429
// end ; end ;
13549: LD_VAR 0 1
13553: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13554: LD_EXP 25
13558: PUSH
13559: LD_EXP 47
13563: AND
13564: IFFALSE 13576
13566: GO 13568
13568: DISABLE
// YouLost (  ) ;
13569: LD_STRING 
13571: PPUSH
13572: CALL_OW 104
13576: END
// every 0 0$1 trigger StreamModeActive and sFog do
13577: LD_EXP 25
13581: PUSH
13582: LD_EXP 46
13586: AND
13587: IFFALSE 13601
13589: GO 13591
13591: DISABLE
// FogOff ( your_side ) ;
13592: LD_OWVAR 2
13596: PPUSH
13597: CALL_OW 344
13601: END
// every 0 0$1 trigger StreamModeActive and sSun do
13602: LD_EXP 25
13606: PUSH
13607: LD_EXP 48
13611: AND
13612: IFFALSE 13640
13614: GO 13616
13616: DISABLE
// begin solar_recharge_percent := 0 ;
13617: LD_ADDR_OWVAR 79
13621: PUSH
13622: LD_INT 0
13624: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13625: LD_INT 10500
13627: PPUSH
13628: CALL_OW 67
// solar_recharge_percent := 100 ;
13632: LD_ADDR_OWVAR 79
13636: PUSH
13637: LD_INT 100
13639: ST_TO_ADDR
// end ;
13640: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13641: LD_EXP 25
13645: PUSH
13646: LD_EXP 49
13650: AND
13651: IFFALSE 13890
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
13659: PPUSH
13660: PPUSH
// begin tmp := [ ] ;
13661: LD_ADDR_VAR 0 3
13665: PUSH
13666: EMPTY
13667: ST_TO_ADDR
// for i := 1 to 6 do
13668: LD_ADDR_VAR 0 1
13672: PUSH
13673: DOUBLE
13674: LD_INT 1
13676: DEC
13677: ST_TO_ADDR
13678: LD_INT 6
13680: PUSH
13681: FOR_TO
13682: IFFALSE 13787
// begin uc_nation := nation_nature ;
13684: LD_ADDR_OWVAR 21
13688: PUSH
13689: LD_INT 0
13691: ST_TO_ADDR
// uc_side := 0 ;
13692: LD_ADDR_OWVAR 20
13696: PUSH
13697: LD_INT 0
13699: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13700: LD_ADDR_OWVAR 29
13704: PUSH
13705: LD_INT 12
13707: PUSH
13708: LD_INT 12
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: ST_TO_ADDR
// hc_agressivity := 20 ;
13715: LD_ADDR_OWVAR 35
13719: PUSH
13720: LD_INT 20
13722: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13723: LD_ADDR_OWVAR 28
13727: PUSH
13728: LD_INT 17
13730: ST_TO_ADDR
// hc_gallery :=  ;
13731: LD_ADDR_OWVAR 33
13735: PUSH
13736: LD_STRING 
13738: ST_TO_ADDR
// hc_name :=  ;
13739: LD_ADDR_OWVAR 26
13743: PUSH
13744: LD_STRING 
13746: ST_TO_ADDR
// un := CreateHuman ;
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: CALL_OW 44
13756: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13757: LD_VAR 0 2
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: CALL_OW 51
// tmp := tmp ^ un ;
13769: LD_ADDR_VAR 0 3
13773: PUSH
13774: LD_VAR 0 3
13778: PUSH
13779: LD_VAR 0 2
13783: ADD
13784: ST_TO_ADDR
// end ;
13785: GO 13681
13787: POP
13788: POP
// repeat wait ( 0 0$1 ) ;
13789: LD_INT 35
13791: PPUSH
13792: CALL_OW 67
// for un in tmp do
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: LD_VAR 0 3
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13881
// begin if IsDead ( un ) then
13809: LD_VAR 0 2
13813: PPUSH
13814: CALL_OW 301
13818: IFFALSE 13838
// begin tmp := tmp diff un ;
13820: LD_ADDR_VAR 0 3
13824: PUSH
13825: LD_VAR 0 3
13829: PUSH
13830: LD_VAR 0 2
13834: DIFF
13835: ST_TO_ADDR
// continue ;
13836: GO 13806
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13838: LD_VAR 0 2
13842: PPUSH
13843: LD_INT 3
13845: PUSH
13846: LD_INT 22
13848: PUSH
13849: LD_INT 0
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PPUSH
13860: CALL_OW 69
13864: PPUSH
13865: LD_VAR 0 2
13869: PPUSH
13870: CALL_OW 74
13874: PPUSH
13875: CALL_OW 115
// end ;
13879: GO 13806
13881: POP
13882: POP
// until not tmp ;
13883: LD_VAR 0 3
13887: NOT
13888: IFFALSE 13789
// end ;
13890: PPOPN 3
13892: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13893: LD_EXP 25
13897: PUSH
13898: LD_EXP 50
13902: AND
13903: IFFALSE 13957
13905: GO 13907
13907: DISABLE
// begin ToLua ( displayTroll(); ) ;
13908: LD_STRING displayTroll();
13910: PPUSH
13911: CALL_OW 559
// wait ( 3 3$00 ) ;
13915: LD_INT 6300
13917: PPUSH
13918: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13922: LD_STRING hideTroll();
13924: PPUSH
13925: CALL_OW 559
// wait ( 1 1$00 ) ;
13929: LD_INT 2100
13931: PPUSH
13932: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13936: LD_STRING displayTroll();
13938: PPUSH
13939: CALL_OW 559
// wait ( 1 1$00 ) ;
13943: LD_INT 2100
13945: PPUSH
13946: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13950: LD_STRING hideTroll();
13952: PPUSH
13953: CALL_OW 559
// end ;
13957: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13958: LD_EXP 25
13962: PUSH
13963: LD_EXP 51
13967: AND
13968: IFFALSE 14031
13970: GO 13972
13972: DISABLE
13973: LD_INT 0
13975: PPUSH
// begin p := 0 ;
13976: LD_ADDR_VAR 0 1
13980: PUSH
13981: LD_INT 0
13983: ST_TO_ADDR
// repeat game_speed := 1 ;
13984: LD_ADDR_OWVAR 65
13988: PUSH
13989: LD_INT 1
13991: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13992: LD_INT 35
13994: PPUSH
13995: CALL_OW 67
// p := p + 1 ;
13999: LD_ADDR_VAR 0 1
14003: PUSH
14004: LD_VAR 0 1
14008: PUSH
14009: LD_INT 1
14011: PLUS
14012: ST_TO_ADDR
// until p >= 60 ;
14013: LD_VAR 0 1
14017: PUSH
14018: LD_INT 60
14020: GREATEREQUAL
14021: IFFALSE 13984
// game_speed := 4 ;
14023: LD_ADDR_OWVAR 65
14027: PUSH
14028: LD_INT 4
14030: ST_TO_ADDR
// end ;
14031: PPOPN 1
14033: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14034: LD_EXP 25
14038: PUSH
14039: LD_EXP 52
14043: AND
14044: IFFALSE 14190
14046: GO 14048
14048: DISABLE
14049: LD_INT 0
14051: PPUSH
14052: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14053: LD_ADDR_VAR 0 1
14057: PUSH
14058: LD_INT 22
14060: PUSH
14061: LD_OWVAR 2
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 2
14072: PUSH
14073: LD_INT 30
14075: PUSH
14076: LD_INT 0
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 30
14085: PUSH
14086: LD_INT 1
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PPUSH
14102: CALL_OW 69
14106: ST_TO_ADDR
// if not depot then
14107: LD_VAR 0 1
14111: NOT
14112: IFFALSE 14116
// exit ;
14114: GO 14190
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14116: LD_ADDR_VAR 0 2
14120: PUSH
14121: LD_VAR 0 1
14125: PUSH
14126: LD_INT 1
14128: PPUSH
14129: LD_VAR 0 1
14133: PPUSH
14134: CALL_OW 12
14138: ARRAY
14139: PPUSH
14140: CALL_OW 274
14144: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14145: LD_VAR 0 2
14149: PPUSH
14150: LD_INT 1
14152: PPUSH
14153: LD_INT 0
14155: PPUSH
14156: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14160: LD_VAR 0 2
14164: PPUSH
14165: LD_INT 2
14167: PPUSH
14168: LD_INT 0
14170: PPUSH
14171: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14175: LD_VAR 0 2
14179: PPUSH
14180: LD_INT 3
14182: PPUSH
14183: LD_INT 0
14185: PPUSH
14186: CALL_OW 277
// end ;
14190: PPOPN 2
14192: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14193: LD_EXP 25
14197: PUSH
14198: LD_EXP 53
14202: AND
14203: IFFALSE 14300
14205: GO 14207
14207: DISABLE
14208: LD_INT 0
14210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14211: LD_ADDR_VAR 0 1
14215: PUSH
14216: LD_INT 22
14218: PUSH
14219: LD_OWVAR 2
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 21
14230: PUSH
14231: LD_INT 1
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 3
14240: PUSH
14241: LD_INT 23
14243: PUSH
14244: LD_INT 0
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: LIST
14259: PPUSH
14260: CALL_OW 69
14264: ST_TO_ADDR
// if not tmp then
14265: LD_VAR 0 1
14269: NOT
14270: IFFALSE 14274
// exit ;
14272: GO 14300
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14274: LD_VAR 0 1
14278: PUSH
14279: LD_INT 1
14281: PPUSH
14282: LD_VAR 0 1
14286: PPUSH
14287: CALL_OW 12
14291: ARRAY
14292: PPUSH
14293: LD_INT 200
14295: PPUSH
14296: CALL_OW 234
// end ;
14300: PPOPN 1
14302: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14303: LD_EXP 25
14307: PUSH
14308: LD_EXP 54
14312: AND
14313: IFFALSE 14392
14315: GO 14317
14317: DISABLE
14318: LD_INT 0
14320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14321: LD_ADDR_VAR 0 1
14325: PUSH
14326: LD_INT 22
14328: PUSH
14329: LD_OWVAR 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 21
14340: PUSH
14341: LD_INT 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// if not tmp then
14357: LD_VAR 0 1
14361: NOT
14362: IFFALSE 14366
// exit ;
14364: GO 14392
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14366: LD_VAR 0 1
14370: PUSH
14371: LD_INT 1
14373: PPUSH
14374: LD_VAR 0 1
14378: PPUSH
14379: CALL_OW 12
14383: ARRAY
14384: PPUSH
14385: LD_INT 60
14387: PPUSH
14388: CALL_OW 234
// end ;
14392: PPOPN 1
14394: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14395: LD_EXP 25
14399: PUSH
14400: LD_EXP 55
14404: AND
14405: IFFALSE 14504
14407: GO 14409
14409: DISABLE
14410: LD_INT 0
14412: PPUSH
14413: PPUSH
// begin enable ;
14414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14415: LD_ADDR_VAR 0 1
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_OWVAR 2
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 61
14434: PUSH
14435: EMPTY
14436: LIST
14437: PUSH
14438: LD_INT 33
14440: PUSH
14441: LD_INT 2
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PPUSH
14453: CALL_OW 69
14457: ST_TO_ADDR
// if not tmp then
14458: LD_VAR 0 1
14462: NOT
14463: IFFALSE 14467
// exit ;
14465: GO 14504
// for i in tmp do
14467: LD_ADDR_VAR 0 2
14471: PUSH
14472: LD_VAR 0 1
14476: PUSH
14477: FOR_IN
14478: IFFALSE 14502
// if IsControledBy ( i ) then
14480: LD_VAR 0 2
14484: PPUSH
14485: CALL_OW 312
14489: IFFALSE 14500
// ComUnlink ( i ) ;
14491: LD_VAR 0 2
14495: PPUSH
14496: CALL_OW 136
14500: GO 14477
14502: POP
14503: POP
// end ;
14504: PPOPN 2
14506: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14507: LD_EXP 25
14511: PUSH
14512: LD_EXP 56
14516: AND
14517: IFFALSE 14657
14519: GO 14521
14521: DISABLE
14522: LD_INT 0
14524: PPUSH
14525: PPUSH
// begin ToLua ( displayPowell(); ) ;
14526: LD_STRING displayPowell();
14528: PPUSH
14529: CALL_OW 559
// uc_side := 0 ;
14533: LD_ADDR_OWVAR 20
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// uc_nation := 2 ;
14541: LD_ADDR_OWVAR 21
14545: PUSH
14546: LD_INT 2
14548: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14549: LD_ADDR_OWVAR 37
14553: PUSH
14554: LD_INT 14
14556: ST_TO_ADDR
// vc_engine := engine_siberite ;
14557: LD_ADDR_OWVAR 39
14561: PUSH
14562: LD_INT 3
14564: ST_TO_ADDR
// vc_control := control_apeman ;
14565: LD_ADDR_OWVAR 38
14569: PUSH
14570: LD_INT 5
14572: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14573: LD_ADDR_OWVAR 40
14577: PUSH
14578: LD_INT 29
14580: ST_TO_ADDR
// un := CreateVehicle ;
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: CALL_OW 45
14590: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14591: LD_VAR 0 2
14595: PPUSH
14596: LD_INT 1
14598: PPUSH
14599: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14603: LD_INT 35
14605: PPUSH
14606: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14610: LD_VAR 0 2
14614: PPUSH
14615: LD_INT 22
14617: PUSH
14618: LD_OWVAR 2
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PPUSH
14627: CALL_OW 69
14631: PPUSH
14632: LD_VAR 0 2
14636: PPUSH
14637: CALL_OW 74
14641: PPUSH
14642: CALL_OW 115
// until IsDead ( un ) ;
14646: LD_VAR 0 2
14650: PPUSH
14651: CALL_OW 301
14655: IFFALSE 14603
// end ;
14657: PPOPN 2
14659: END
// every 0 0$1 trigger StreamModeActive and sStu do
14660: LD_EXP 25
14664: PUSH
14665: LD_EXP 64
14669: AND
14670: IFFALSE 14686
14672: GO 14674
14674: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14675: LD_STRING displayStucuk();
14677: PPUSH
14678: CALL_OW 559
// ResetFog ;
14682: CALL_OW 335
// end ;
14686: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14687: LD_EXP 25
14691: PUSH
14692: LD_EXP 57
14696: AND
14697: IFFALSE 14838
14699: GO 14701
14701: DISABLE
14702: LD_INT 0
14704: PPUSH
14705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14706: LD_ADDR_VAR 0 2
14710: PUSH
14711: LD_INT 22
14713: PUSH
14714: LD_OWVAR 2
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 21
14725: PUSH
14726: LD_INT 1
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PPUSH
14737: CALL_OW 69
14741: ST_TO_ADDR
// if not tmp then
14742: LD_VAR 0 2
14746: NOT
14747: IFFALSE 14751
// exit ;
14749: GO 14838
// un := tmp [ rand ( 1 , tmp ) ] ;
14751: LD_ADDR_VAR 0 1
14755: PUSH
14756: LD_VAR 0 2
14760: PUSH
14761: LD_INT 1
14763: PPUSH
14764: LD_VAR 0 2
14768: PPUSH
14769: CALL_OW 12
14773: ARRAY
14774: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14775: LD_VAR 0 1
14779: PPUSH
14780: LD_INT 0
14782: PPUSH
14783: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14787: LD_VAR 0 1
14791: PPUSH
14792: LD_OWVAR 3
14796: PUSH
14797: LD_VAR 0 1
14801: DIFF
14802: PPUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 74
14812: PPUSH
14813: CALL_OW 115
// wait ( 0 0$20 ) ;
14817: LD_INT 700
14819: PPUSH
14820: CALL_OW 67
// SetSide ( un , your_side ) ;
14824: LD_VAR 0 1
14828: PPUSH
14829: LD_OWVAR 2
14833: PPUSH
14834: CALL_OW 235
// end ;
14838: PPOPN 2
14840: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14841: LD_EXP 25
14845: PUSH
14846: LD_EXP 58
14850: AND
14851: IFFALSE 14957
14853: GO 14855
14855: DISABLE
14856: LD_INT 0
14858: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14859: LD_ADDR_VAR 0 1
14863: PUSH
14864: LD_INT 22
14866: PUSH
14867: LD_OWVAR 2
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: LD_INT 30
14881: PUSH
14882: LD_INT 0
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 30
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: ST_TO_ADDR
// if not depot then
14913: LD_VAR 0 1
14917: NOT
14918: IFFALSE 14922
// exit ;
14920: GO 14957
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14922: LD_VAR 0 1
14926: PUSH
14927: LD_INT 1
14929: ARRAY
14930: PPUSH
14931: CALL_OW 250
14935: PPUSH
14936: LD_VAR 0 1
14940: PUSH
14941: LD_INT 1
14943: ARRAY
14944: PPUSH
14945: CALL_OW 251
14949: PPUSH
14950: LD_INT 70
14952: PPUSH
14953: CALL_OW 495
// end ;
14957: PPOPN 1
14959: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14960: LD_EXP 25
14964: PUSH
14965: LD_EXP 59
14969: AND
14970: IFFALSE 15181
14972: GO 14974
14974: DISABLE
14975: LD_INT 0
14977: PPUSH
14978: PPUSH
14979: PPUSH
14980: PPUSH
14981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14982: LD_ADDR_VAR 0 5
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_OWVAR 2
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 21
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 69
15017: ST_TO_ADDR
// if not tmp then
15018: LD_VAR 0 5
15022: NOT
15023: IFFALSE 15027
// exit ;
15025: GO 15181
// for i in tmp do
15027: LD_ADDR_VAR 0 1
15031: PUSH
15032: LD_VAR 0 5
15036: PUSH
15037: FOR_IN
15038: IFFALSE 15179
// begin d := rand ( 0 , 5 ) ;
15040: LD_ADDR_VAR 0 4
15044: PUSH
15045: LD_INT 0
15047: PPUSH
15048: LD_INT 5
15050: PPUSH
15051: CALL_OW 12
15055: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15056: LD_ADDR_VAR 0 2
15060: PUSH
15061: LD_VAR 0 1
15065: PPUSH
15066: CALL_OW 250
15070: PPUSH
15071: LD_VAR 0 4
15075: PPUSH
15076: LD_INT 3
15078: PPUSH
15079: LD_INT 12
15081: PPUSH
15082: CALL_OW 12
15086: PPUSH
15087: CALL_OW 272
15091: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15092: LD_ADDR_VAR 0 3
15096: PUSH
15097: LD_VAR 0 1
15101: PPUSH
15102: CALL_OW 251
15106: PPUSH
15107: LD_VAR 0 4
15111: PPUSH
15112: LD_INT 3
15114: PPUSH
15115: LD_INT 12
15117: PPUSH
15118: CALL_OW 12
15122: PPUSH
15123: CALL_OW 273
15127: ST_TO_ADDR
// if ValidHex ( x , y ) then
15128: LD_VAR 0 2
15132: PPUSH
15133: LD_VAR 0 3
15137: PPUSH
15138: CALL_OW 488
15142: IFFALSE 15177
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15144: LD_VAR 0 1
15148: PPUSH
15149: LD_VAR 0 2
15153: PPUSH
15154: LD_VAR 0 3
15158: PPUSH
15159: LD_INT 3
15161: PPUSH
15162: LD_INT 6
15164: PPUSH
15165: CALL_OW 12
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 483
// end ;
15177: GO 15037
15179: POP
15180: POP
// end ;
15181: PPOPN 5
15183: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15184: LD_EXP 25
15188: PUSH
15189: LD_EXP 60
15193: AND
15194: IFFALSE 15288
15196: GO 15198
15198: DISABLE
15199: LD_INT 0
15201: PPUSH
15202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15203: LD_ADDR_VAR 0 2
15207: PUSH
15208: LD_INT 22
15210: PUSH
15211: LD_OWVAR 2
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 32
15222: PUSH
15223: LD_INT 1
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 21
15232: PUSH
15233: LD_INT 2
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: LIST
15244: PPUSH
15245: CALL_OW 69
15249: ST_TO_ADDR
// if not tmp then
15250: LD_VAR 0 2
15254: NOT
15255: IFFALSE 15259
// exit ;
15257: GO 15288
// for i in tmp do
15259: LD_ADDR_VAR 0 1
15263: PUSH
15264: LD_VAR 0 2
15268: PUSH
15269: FOR_IN
15270: IFFALSE 15286
// SetFuel ( i , 0 ) ;
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_INT 0
15279: PPUSH
15280: CALL_OW 240
15284: GO 15269
15286: POP
15287: POP
// end ;
15288: PPOPN 2
15290: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15291: LD_EXP 25
15295: PUSH
15296: LD_EXP 61
15300: AND
15301: IFFALSE 15367
15303: GO 15305
15305: DISABLE
15306: LD_INT 0
15308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15309: LD_ADDR_VAR 0 1
15313: PUSH
15314: LD_INT 22
15316: PUSH
15317: LD_OWVAR 2
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 29
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PPUSH
15340: CALL_OW 69
15344: ST_TO_ADDR
// if not tmp then
15345: LD_VAR 0 1
15349: NOT
15350: IFFALSE 15354
// exit ;
15352: GO 15367
// DestroyUnit ( tmp [ 1 ] ) ;
15354: LD_VAR 0 1
15358: PUSH
15359: LD_INT 1
15361: ARRAY
15362: PPUSH
15363: CALL_OW 65
// end ;
15367: PPOPN 1
15369: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15370: LD_EXP 25
15374: PUSH
15375: LD_EXP 63
15379: AND
15380: IFFALSE 15509
15382: GO 15384
15384: DISABLE
15385: LD_INT 0
15387: PPUSH
// begin uc_side := 0 ;
15388: LD_ADDR_OWVAR 20
15392: PUSH
15393: LD_INT 0
15395: ST_TO_ADDR
// uc_nation := nation_arabian ;
15396: LD_ADDR_OWVAR 21
15400: PUSH
15401: LD_INT 2
15403: ST_TO_ADDR
// hc_gallery :=  ;
15404: LD_ADDR_OWVAR 33
15408: PUSH
15409: LD_STRING 
15411: ST_TO_ADDR
// hc_name :=  ;
15412: LD_ADDR_OWVAR 26
15416: PUSH
15417: LD_STRING 
15419: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 11
15425: PPUSH
15426: LD_INT 10
15428: PPUSH
15429: CALL_OW 380
// un := CreateHuman ;
15433: LD_ADDR_VAR 0 1
15437: PUSH
15438: CALL_OW 44
15442: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15443: LD_VAR 0 1
15447: PPUSH
15448: LD_INT 1
15450: PPUSH
15451: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15455: LD_INT 35
15457: PPUSH
15458: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15462: LD_VAR 0 1
15466: PPUSH
15467: LD_INT 22
15469: PUSH
15470: LD_OWVAR 2
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: PPUSH
15484: LD_VAR 0 1
15488: PPUSH
15489: CALL_OW 74
15493: PPUSH
15494: CALL_OW 115
// until IsDead ( un ) ;
15498: LD_VAR 0 1
15502: PPUSH
15503: CALL_OW 301
15507: IFFALSE 15455
// end ;
15509: PPOPN 1
15511: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15512: LD_EXP 25
15516: PUSH
15517: LD_EXP 65
15521: AND
15522: IFFALSE 15534
15524: GO 15526
15526: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15527: LD_STRING earthquake(getX(game), 0, 32)
15529: PPUSH
15530: CALL_OW 559
15534: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15535: LD_EXP 25
15539: PUSH
15540: LD_EXP 66
15544: AND
15545: IFFALSE 15636
15547: GO 15549
15549: DISABLE
15550: LD_INT 0
15552: PPUSH
// begin enable ;
15553: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15554: LD_ADDR_VAR 0 1
15558: PUSH
15559: LD_INT 22
15561: PUSH
15562: LD_OWVAR 2
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 21
15573: PUSH
15574: LD_INT 2
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 33
15583: PUSH
15584: LD_INT 3
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: PPUSH
15596: CALL_OW 69
15600: ST_TO_ADDR
// if not tmp then
15601: LD_VAR 0 1
15605: NOT
15606: IFFALSE 15610
// exit ;
15608: GO 15636
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15610: LD_VAR 0 1
15614: PUSH
15615: LD_INT 1
15617: PPUSH
15618: LD_VAR 0 1
15622: PPUSH
15623: CALL_OW 12
15627: ARRAY
15628: PPUSH
15629: LD_INT 1
15631: PPUSH
15632: CALL_OW 234
// end ;
15636: PPOPN 1
15638: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15639: LD_EXP 25
15643: PUSH
15644: LD_EXP 67
15648: AND
15649: IFFALSE 15790
15651: GO 15653
15653: DISABLE
15654: LD_INT 0
15656: PPUSH
15657: PPUSH
15658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15659: LD_ADDR_VAR 0 3
15663: PUSH
15664: LD_INT 22
15666: PUSH
15667: LD_OWVAR 2
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 25
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 69
15694: ST_TO_ADDR
// if not tmp then
15695: LD_VAR 0 3
15699: NOT
15700: IFFALSE 15704
// exit ;
15702: GO 15790
// un := tmp [ rand ( 1 , tmp ) ] ;
15704: LD_ADDR_VAR 0 2
15708: PUSH
15709: LD_VAR 0 3
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_VAR 0 3
15721: PPUSH
15722: CALL_OW 12
15726: ARRAY
15727: ST_TO_ADDR
// if Crawls ( un ) then
15728: LD_VAR 0 2
15732: PPUSH
15733: CALL_OW 318
15737: IFFALSE 15748
// ComWalk ( un ) ;
15739: LD_VAR 0 2
15743: PPUSH
15744: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15748: LD_VAR 0 2
15752: PPUSH
15753: LD_INT 9
15755: PPUSH
15756: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15760: LD_INT 28
15762: PPUSH
15763: LD_OWVAR 2
15767: PPUSH
15768: LD_INT 2
15770: PPUSH
15771: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15775: LD_INT 29
15777: PPUSH
15778: LD_OWVAR 2
15782: PPUSH
15783: LD_INT 2
15785: PPUSH
15786: CALL_OW 322
// end ;
15790: PPOPN 3
15792: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15793: LD_EXP 25
15797: PUSH
15798: LD_EXP 68
15802: AND
15803: IFFALSE 15914
15805: GO 15807
15807: DISABLE
15808: LD_INT 0
15810: PPUSH
15811: PPUSH
15812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15813: LD_ADDR_VAR 0 3
15817: PUSH
15818: LD_INT 22
15820: PUSH
15821: LD_OWVAR 2
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PPUSH
15844: CALL_OW 69
15848: ST_TO_ADDR
// if not tmp then
15849: LD_VAR 0 3
15853: NOT
15854: IFFALSE 15858
// exit ;
15856: GO 15914
// un := tmp [ rand ( 1 , tmp ) ] ;
15858: LD_ADDR_VAR 0 2
15862: PUSH
15863: LD_VAR 0 3
15867: PUSH
15868: LD_INT 1
15870: PPUSH
15871: LD_VAR 0 3
15875: PPUSH
15876: CALL_OW 12
15880: ARRAY
15881: ST_TO_ADDR
// if Crawls ( un ) then
15882: LD_VAR 0 2
15886: PPUSH
15887: CALL_OW 318
15891: IFFALSE 15902
// ComWalk ( un ) ;
15893: LD_VAR 0 2
15897: PPUSH
15898: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15902: LD_VAR 0 2
15906: PPUSH
15907: LD_INT 8
15909: PPUSH
15910: CALL_OW 336
// end ;
15914: PPOPN 3
15916: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15917: LD_EXP 25
15921: PUSH
15922: LD_EXP 69
15926: AND
15927: IFFALSE 16071
15929: GO 15931
15931: DISABLE
15932: LD_INT 0
15934: PPUSH
15935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15936: LD_ADDR_VAR 0 2
15940: PUSH
15941: LD_INT 22
15943: PUSH
15944: LD_OWVAR 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 21
15955: PUSH
15956: LD_INT 2
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 2
15965: PUSH
15966: LD_INT 34
15968: PUSH
15969: LD_INT 12
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 34
15978: PUSH
15979: LD_INT 51
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 34
15988: PUSH
15989: LD_INT 32
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: LIST
16006: PPUSH
16007: CALL_OW 69
16011: ST_TO_ADDR
// if not tmp then
16012: LD_VAR 0 2
16016: NOT
16017: IFFALSE 16021
// exit ;
16019: GO 16071
// for i in tmp do
16021: LD_ADDR_VAR 0 1
16025: PUSH
16026: LD_VAR 0 2
16030: PUSH
16031: FOR_IN
16032: IFFALSE 16069
// if GetCargo ( i , mat_artifact ) = 0 then
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_INT 4
16041: PPUSH
16042: CALL_OW 289
16046: PUSH
16047: LD_INT 0
16049: EQUAL
16050: IFFALSE 16067
// SetCargo ( i , mat_siberit , 100 ) ;
16052: LD_VAR 0 1
16056: PPUSH
16057: LD_INT 3
16059: PPUSH
16060: LD_INT 100
16062: PPUSH
16063: CALL_OW 290
16067: GO 16031
16069: POP
16070: POP
// end ;
16071: PPOPN 2
16073: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16074: LD_EXP 25
16078: PUSH
16079: LD_EXP 70
16083: AND
16084: IFFALSE 16267
16086: GO 16088
16088: DISABLE
16089: LD_INT 0
16091: PPUSH
16092: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16093: LD_ADDR_VAR 0 2
16097: PUSH
16098: LD_INT 22
16100: PUSH
16101: LD_OWVAR 2
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: ST_TO_ADDR
// if not tmp then
16115: LD_VAR 0 2
16119: NOT
16120: IFFALSE 16124
// exit ;
16122: GO 16267
// for i := 1 to 2 do
16124: LD_ADDR_VAR 0 1
16128: PUSH
16129: DOUBLE
16130: LD_INT 1
16132: DEC
16133: ST_TO_ADDR
16134: LD_INT 2
16136: PUSH
16137: FOR_TO
16138: IFFALSE 16265
// begin uc_side := your_side ;
16140: LD_ADDR_OWVAR 20
16144: PUSH
16145: LD_OWVAR 2
16149: ST_TO_ADDR
// uc_nation := nation_american ;
16150: LD_ADDR_OWVAR 21
16154: PUSH
16155: LD_INT 1
16157: ST_TO_ADDR
// vc_chassis := us_morphling ;
16158: LD_ADDR_OWVAR 37
16162: PUSH
16163: LD_INT 5
16165: ST_TO_ADDR
// vc_engine := engine_siberite ;
16166: LD_ADDR_OWVAR 39
16170: PUSH
16171: LD_INT 3
16173: ST_TO_ADDR
// vc_control := control_computer ;
16174: LD_ADDR_OWVAR 38
16178: PUSH
16179: LD_INT 3
16181: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16182: LD_ADDR_OWVAR 40
16186: PUSH
16187: LD_INT 10
16189: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16190: LD_VAR 0 2
16194: PUSH
16195: LD_INT 1
16197: ARRAY
16198: PPUSH
16199: CALL_OW 310
16203: NOT
16204: IFFALSE 16251
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16206: CALL_OW 45
16210: PPUSH
16211: LD_VAR 0 2
16215: PUSH
16216: LD_INT 1
16218: ARRAY
16219: PPUSH
16220: CALL_OW 250
16224: PPUSH
16225: LD_VAR 0 2
16229: PUSH
16230: LD_INT 1
16232: ARRAY
16233: PPUSH
16234: CALL_OW 251
16238: PPUSH
16239: LD_INT 12
16241: PPUSH
16242: LD_INT 1
16244: PPUSH
16245: CALL_OW 50
16249: GO 16263
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16251: CALL_OW 45
16255: PPUSH
16256: LD_INT 1
16258: PPUSH
16259: CALL_OW 51
// end ;
16263: GO 16137
16265: POP
16266: POP
// end ;
16267: PPOPN 2
16269: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16270: LD_EXP 25
16274: PUSH
16275: LD_EXP 71
16279: AND
16280: IFFALSE 16502
16282: GO 16284
16284: DISABLE
16285: LD_INT 0
16287: PPUSH
16288: PPUSH
16289: PPUSH
16290: PPUSH
16291: PPUSH
16292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16293: LD_ADDR_VAR 0 6
16297: PUSH
16298: LD_INT 22
16300: PUSH
16301: LD_OWVAR 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 21
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 3
16322: PUSH
16323: LD_INT 23
16325: PUSH
16326: LD_INT 0
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: PPUSH
16342: CALL_OW 69
16346: ST_TO_ADDR
// if not tmp then
16347: LD_VAR 0 6
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 16502
// s1 := rand ( 1 , 4 ) ;
16356: LD_ADDR_VAR 0 2
16360: PUSH
16361: LD_INT 1
16363: PPUSH
16364: LD_INT 4
16366: PPUSH
16367: CALL_OW 12
16371: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16372: LD_ADDR_VAR 0 4
16376: PUSH
16377: LD_VAR 0 6
16381: PUSH
16382: LD_INT 1
16384: ARRAY
16385: PPUSH
16386: LD_VAR 0 2
16390: PPUSH
16391: CALL_OW 259
16395: ST_TO_ADDR
// if s1 = 1 then
16396: LD_VAR 0 2
16400: PUSH
16401: LD_INT 1
16403: EQUAL
16404: IFFALSE 16424
// s2 := rand ( 2 , 4 ) else
16406: LD_ADDR_VAR 0 3
16410: PUSH
16411: LD_INT 2
16413: PPUSH
16414: LD_INT 4
16416: PPUSH
16417: CALL_OW 12
16421: ST_TO_ADDR
16422: GO 16432
// s2 := 1 ;
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_INT 1
16431: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16432: LD_ADDR_VAR 0 5
16436: PUSH
16437: LD_VAR 0 6
16441: PUSH
16442: LD_INT 1
16444: ARRAY
16445: PPUSH
16446: LD_VAR 0 3
16450: PPUSH
16451: CALL_OW 259
16455: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16456: LD_VAR 0 6
16460: PUSH
16461: LD_INT 1
16463: ARRAY
16464: PPUSH
16465: LD_VAR 0 2
16469: PPUSH
16470: LD_VAR 0 5
16474: PPUSH
16475: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16479: LD_VAR 0 6
16483: PUSH
16484: LD_INT 1
16486: ARRAY
16487: PPUSH
16488: LD_VAR 0 3
16492: PPUSH
16493: LD_VAR 0 4
16497: PPUSH
16498: CALL_OW 237
// end ;
16502: PPOPN 6
16504: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16505: LD_EXP 25
16509: PUSH
16510: LD_EXP 72
16514: AND
16515: IFFALSE 16594
16517: GO 16519
16519: DISABLE
16520: LD_INT 0
16522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16523: LD_ADDR_VAR 0 1
16527: PUSH
16528: LD_INT 22
16530: PUSH
16531: LD_OWVAR 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 30
16542: PUSH
16543: LD_INT 3
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PPUSH
16554: CALL_OW 69
16558: ST_TO_ADDR
// if not tmp then
16559: LD_VAR 0 1
16563: NOT
16564: IFFALSE 16568
// exit ;
16566: GO 16594
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16568: LD_VAR 0 1
16572: PUSH
16573: LD_INT 1
16575: PPUSH
16576: LD_VAR 0 1
16580: PPUSH
16581: CALL_OW 12
16585: ARRAY
16586: PPUSH
16587: LD_INT 1
16589: PPUSH
16590: CALL_OW 234
// end ;
16594: PPOPN 1
16596: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16597: LD_EXP 25
16601: PUSH
16602: LD_EXP 73
16606: AND
16607: IFFALSE 16719
16609: GO 16611
16611: DISABLE
16612: LD_INT 0
16614: PPUSH
16615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16616: LD_ADDR_VAR 0 2
16620: PUSH
16621: LD_INT 22
16623: PUSH
16624: LD_OWVAR 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 2
16635: PUSH
16636: LD_INT 30
16638: PUSH
16639: LD_INT 27
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 30
16648: PUSH
16649: LD_INT 26
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 30
16658: PUSH
16659: LD_INT 28
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: ST_TO_ADDR
// if not tmp then
16681: LD_VAR 0 2
16685: NOT
16686: IFFALSE 16690
// exit ;
16688: GO 16719
// for i in tmp do
16690: LD_ADDR_VAR 0 1
16694: PUSH
16695: LD_VAR 0 2
16699: PUSH
16700: FOR_IN
16701: IFFALSE 16717
// SetLives ( i , 1 ) ;
16703: LD_VAR 0 1
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 234
16715: GO 16700
16717: POP
16718: POP
// end ;
16719: PPOPN 2
16721: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16722: LD_EXP 25
16726: PUSH
16727: LD_EXP 74
16731: AND
16732: IFFALSE 17019
16734: GO 16736
16736: DISABLE
16737: LD_INT 0
16739: PPUSH
16740: PPUSH
16741: PPUSH
// begin i := rand ( 1 , 7 ) ;
16742: LD_ADDR_VAR 0 1
16746: PUSH
16747: LD_INT 1
16749: PPUSH
16750: LD_INT 7
16752: PPUSH
16753: CALL_OW 12
16757: ST_TO_ADDR
// case i of 1 :
16758: LD_VAR 0 1
16762: PUSH
16763: LD_INT 1
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16771
16769: GO 16781
16771: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16772: LD_STRING earthquake(getX(game), 0, 32)
16774: PPUSH
16775: CALL_OW 559
16779: GO 17019
16781: LD_INT 2
16783: DOUBLE
16784: EQUAL
16785: IFTRUE 16789
16787: GO 16803
16789: POP
// begin ToLua ( displayStucuk(); ) ;
16790: LD_STRING displayStucuk();
16792: PPUSH
16793: CALL_OW 559
// ResetFog ;
16797: CALL_OW 335
// end ; 3 :
16801: GO 17019
16803: LD_INT 3
16805: DOUBLE
16806: EQUAL
16807: IFTRUE 16811
16809: GO 16915
16811: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16812: LD_ADDR_VAR 0 2
16816: PUSH
16817: LD_INT 22
16819: PUSH
16820: LD_OWVAR 2
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 25
16831: PUSH
16832: LD_INT 1
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PPUSH
16843: CALL_OW 69
16847: ST_TO_ADDR
// if not tmp then
16848: LD_VAR 0 2
16852: NOT
16853: IFFALSE 16857
// exit ;
16855: GO 17019
// un := tmp [ rand ( 1 , tmp ) ] ;
16857: LD_ADDR_VAR 0 3
16861: PUSH
16862: LD_VAR 0 2
16866: PUSH
16867: LD_INT 1
16869: PPUSH
16870: LD_VAR 0 2
16874: PPUSH
16875: CALL_OW 12
16879: ARRAY
16880: ST_TO_ADDR
// if Crawls ( un ) then
16881: LD_VAR 0 3
16885: PPUSH
16886: CALL_OW 318
16890: IFFALSE 16901
// ComWalk ( un ) ;
16892: LD_VAR 0 3
16896: PPUSH
16897: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16901: LD_VAR 0 3
16905: PPUSH
16906: LD_INT 8
16908: PPUSH
16909: CALL_OW 336
// end ; 4 :
16913: GO 17019
16915: LD_INT 4
16917: DOUBLE
16918: EQUAL
16919: IFTRUE 16923
16921: GO 16997
16923: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16924: LD_ADDR_VAR 0 2
16928: PUSH
16929: LD_INT 22
16931: PUSH
16932: LD_OWVAR 2
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 30
16943: PUSH
16944: LD_INT 29
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PPUSH
16955: CALL_OW 69
16959: ST_TO_ADDR
// if not tmp then
16960: LD_VAR 0 2
16964: NOT
16965: IFFALSE 16969
// exit ;
16967: GO 17019
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16969: LD_VAR 0 2
16973: PUSH
16974: LD_INT 1
16976: ARRAY
16977: PPUSH
16978: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16982: LD_VAR 0 2
16986: PUSH
16987: LD_INT 1
16989: ARRAY
16990: PPUSH
16991: CALL_OW 65
// end ; 5 .. 7 :
16995: GO 17019
16997: LD_INT 5
16999: DOUBLE
17000: GREATEREQUAL
17001: IFFALSE 17009
17003: LD_INT 7
17005: DOUBLE
17006: LESSEQUAL
17007: IFTRUE 17011
17009: GO 17018
17011: POP
// StreamSibBomb ; end ;
17012: CALL 13256 0 0
17016: GO 17019
17018: POP
// end ;
17019: PPOPN 3
17021: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17022: LD_EXP 25
17026: PUSH
17027: LD_EXP 75
17031: AND
17032: IFFALSE 17188
17034: GO 17036
17036: DISABLE
17037: LD_INT 0
17039: PPUSH
17040: PPUSH
17041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17042: LD_ADDR_VAR 0 2
17046: PUSH
17047: LD_INT 81
17049: PUSH
17050: LD_OWVAR 2
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 2
17061: PUSH
17062: LD_INT 21
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 21
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: LIST
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: ST_TO_ADDR
// if not tmp then
17096: LD_VAR 0 2
17100: NOT
17101: IFFALSE 17105
// exit ;
17103: GO 17188
// p := 0 ;
17105: LD_ADDR_VAR 0 3
17109: PUSH
17110: LD_INT 0
17112: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17113: LD_INT 35
17115: PPUSH
17116: CALL_OW 67
// p := p + 1 ;
17120: LD_ADDR_VAR 0 3
17124: PUSH
17125: LD_VAR 0 3
17129: PUSH
17130: LD_INT 1
17132: PLUS
17133: ST_TO_ADDR
// for i in tmp do
17134: LD_ADDR_VAR 0 1
17138: PUSH
17139: LD_VAR 0 2
17143: PUSH
17144: FOR_IN
17145: IFFALSE 17176
// if GetLives ( i ) < 1000 then
17147: LD_VAR 0 1
17151: PPUSH
17152: CALL_OW 256
17156: PUSH
17157: LD_INT 1000
17159: LESS
17160: IFFALSE 17174
// SetLives ( i , 1000 ) ;
17162: LD_VAR 0 1
17166: PPUSH
17167: LD_INT 1000
17169: PPUSH
17170: CALL_OW 234
17174: GO 17144
17176: POP
17177: POP
// until p > 20 ;
17178: LD_VAR 0 3
17182: PUSH
17183: LD_INT 20
17185: GREATER
17186: IFFALSE 17113
// end ;
17188: PPOPN 3
17190: END
// every 0 0$1 trigger StreamModeActive and sTime do
17191: LD_EXP 25
17195: PUSH
17196: LD_EXP 76
17200: AND
17201: IFFALSE 17236
17203: GO 17205
17205: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17206: LD_INT 28
17208: PPUSH
17209: LD_OWVAR 2
17213: PPUSH
17214: LD_INT 2
17216: PPUSH
17217: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17221: LD_INT 30
17223: PPUSH
17224: LD_OWVAR 2
17228: PPUSH
17229: LD_INT 2
17231: PPUSH
17232: CALL_OW 322
// end ;
17236: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17237: LD_EXP 25
17241: PUSH
17242: LD_EXP 77
17246: AND
17247: IFFALSE 17368
17249: GO 17251
17251: DISABLE
17252: LD_INT 0
17254: PPUSH
17255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17256: LD_ADDR_VAR 0 2
17260: PUSH
17261: LD_INT 22
17263: PUSH
17264: LD_OWVAR 2
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 21
17275: PUSH
17276: LD_INT 1
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 3
17285: PUSH
17286: LD_INT 23
17288: PUSH
17289: LD_INT 0
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: PPUSH
17305: CALL_OW 69
17309: ST_TO_ADDR
// if not tmp then
17310: LD_VAR 0 2
17314: NOT
17315: IFFALSE 17319
// exit ;
17317: GO 17368
// for i in tmp do
17319: LD_ADDR_VAR 0 1
17323: PUSH
17324: LD_VAR 0 2
17328: PUSH
17329: FOR_IN
17330: IFFALSE 17366
// begin if Crawls ( i ) then
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 318
17341: IFFALSE 17352
// ComWalk ( i ) ;
17343: LD_VAR 0 1
17347: PPUSH
17348: CALL_OW 138
// SetClass ( i , 2 ) ;
17352: LD_VAR 0 1
17356: PPUSH
17357: LD_INT 2
17359: PPUSH
17360: CALL_OW 336
// end ;
17364: GO 17329
17366: POP
17367: POP
// end ;
17368: PPOPN 2
17370: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17371: LD_EXP 25
17375: PUSH
17376: LD_EXP 78
17380: AND
17381: IFFALSE 17669
17383: GO 17385
17385: DISABLE
17386: LD_INT 0
17388: PPUSH
17389: PPUSH
17390: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17391: LD_OWVAR 2
17395: PPUSH
17396: LD_INT 9
17398: PPUSH
17399: LD_INT 1
17401: PPUSH
17402: LD_INT 1
17404: PPUSH
17405: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17409: LD_INT 9
17411: PPUSH
17412: LD_OWVAR 2
17416: PPUSH
17417: CALL_OW 343
// uc_side := 9 ;
17421: LD_ADDR_OWVAR 20
17425: PUSH
17426: LD_INT 9
17428: ST_TO_ADDR
// uc_nation := 2 ;
17429: LD_ADDR_OWVAR 21
17433: PUSH
17434: LD_INT 2
17436: ST_TO_ADDR
// hc_name := Dark Warrior ;
17437: LD_ADDR_OWVAR 26
17441: PUSH
17442: LD_STRING Dark Warrior
17444: ST_TO_ADDR
// hc_gallery :=  ;
17445: LD_ADDR_OWVAR 33
17449: PUSH
17450: LD_STRING 
17452: ST_TO_ADDR
// hc_noskilllimit := true ;
17453: LD_ADDR_OWVAR 76
17457: PUSH
17458: LD_INT 1
17460: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17461: LD_ADDR_OWVAR 31
17465: PUSH
17466: LD_INT 30
17468: PUSH
17469: LD_INT 30
17471: PUSH
17472: LD_INT 30
17474: PUSH
17475: LD_INT 30
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: ST_TO_ADDR
// un := CreateHuman ;
17484: LD_ADDR_VAR 0 3
17488: PUSH
17489: CALL_OW 44
17493: ST_TO_ADDR
// hc_noskilllimit := false ;
17494: LD_ADDR_OWVAR 76
17498: PUSH
17499: LD_INT 0
17501: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17502: LD_VAR 0 3
17506: PPUSH
17507: LD_INT 1
17509: PPUSH
17510: CALL_OW 51
// ToLua ( playRanger() ) ;
17514: LD_STRING playRanger()
17516: PPUSH
17517: CALL_OW 559
// p := 0 ;
17521: LD_ADDR_VAR 0 2
17525: PUSH
17526: LD_INT 0
17528: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17529: LD_INT 35
17531: PPUSH
17532: CALL_OW 67
// p := p + 1 ;
17536: LD_ADDR_VAR 0 2
17540: PUSH
17541: LD_VAR 0 2
17545: PUSH
17546: LD_INT 1
17548: PLUS
17549: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17550: LD_VAR 0 3
17554: PPUSH
17555: CALL_OW 256
17559: PUSH
17560: LD_INT 1000
17562: LESS
17563: IFFALSE 17577
// SetLives ( un , 1000 ) ;
17565: LD_VAR 0 3
17569: PPUSH
17570: LD_INT 1000
17572: PPUSH
17573: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17577: LD_VAR 0 3
17581: PPUSH
17582: LD_INT 81
17584: PUSH
17585: LD_OWVAR 2
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 91
17596: PUSH
17597: LD_VAR 0 3
17601: PUSH
17602: LD_INT 30
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PPUSH
17614: CALL_OW 69
17618: PPUSH
17619: LD_VAR 0 3
17623: PPUSH
17624: CALL_OW 74
17628: PPUSH
17629: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17633: LD_VAR 0 2
17637: PUSH
17638: LD_INT 80
17640: GREATER
17641: PUSH
17642: LD_VAR 0 3
17646: PPUSH
17647: CALL_OW 301
17651: OR
17652: IFFALSE 17529
// if un then
17654: LD_VAR 0 3
17658: IFFALSE 17669
// RemoveUnit ( un ) ;
17660: LD_VAR 0 3
17664: PPUSH
17665: CALL_OW 64
// end ;
17669: PPOPN 3
17671: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17672: LD_EXP 79
17676: IFFALSE 17792
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
17685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17686: LD_ADDR_VAR 0 2
17690: PUSH
17691: LD_INT 81
17693: PUSH
17694: LD_OWVAR 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 21
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PPUSH
17717: CALL_OW 69
17721: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17722: LD_STRING playComputer()
17724: PPUSH
17725: CALL_OW 559
// if not tmp then
17729: LD_VAR 0 2
17733: NOT
17734: IFFALSE 17738
// exit ;
17736: GO 17792
// for i in tmp do
17738: LD_ADDR_VAR 0 1
17742: PUSH
17743: LD_VAR 0 2
17747: PUSH
17748: FOR_IN
17749: IFFALSE 17790
// for j := 1 to 4 do
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: DOUBLE
17757: LD_INT 1
17759: DEC
17760: ST_TO_ADDR
17761: LD_INT 4
17763: PUSH
17764: FOR_TO
17765: IFFALSE 17786
// SetSkill ( i , j , 10 ) ;
17767: LD_VAR 0 1
17771: PPUSH
17772: LD_VAR 0 3
17776: PPUSH
17777: LD_INT 10
17779: PPUSH
17780: CALL_OW 237
17784: GO 17764
17786: POP
17787: POP
17788: GO 17748
17790: POP
17791: POP
// end ;
17792: PPOPN 3
17794: END
// every 0 0$1 trigger s30 do var i , tmp ;
17795: LD_EXP 80
17799: IFFALSE 17868
17801: GO 17803
17803: DISABLE
17804: LD_INT 0
17806: PPUSH
17807: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17808: LD_ADDR_VAR 0 2
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_OWVAR 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 69
17829: ST_TO_ADDR
// if not tmp then
17830: LD_VAR 0 2
17834: NOT
17835: IFFALSE 17839
// exit ;
17837: GO 17868
// for i in tmp do
17839: LD_ADDR_VAR 0 1
17843: PUSH
17844: LD_VAR 0 2
17848: PUSH
17849: FOR_IN
17850: IFFALSE 17866
// SetLives ( i , 300 ) ;
17852: LD_VAR 0 1
17856: PPUSH
17857: LD_INT 300
17859: PPUSH
17860: CALL_OW 234
17864: GO 17849
17866: POP
17867: POP
// end ;
17868: PPOPN 2
17870: END
// every 0 0$1 trigger s60 do var i , tmp ;
17871: LD_EXP 81
17875: IFFALSE 17944
17877: GO 17879
17879: DISABLE
17880: LD_INT 0
17882: PPUSH
17883: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17884: LD_ADDR_VAR 0 2
17888: PUSH
17889: LD_INT 22
17891: PUSH
17892: LD_OWVAR 2
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PPUSH
17901: CALL_OW 69
17905: ST_TO_ADDR
// if not tmp then
17906: LD_VAR 0 2
17910: NOT
17911: IFFALSE 17915
// exit ;
17913: GO 17944
// for i in tmp do
17915: LD_ADDR_VAR 0 1
17919: PUSH
17920: LD_VAR 0 2
17924: PUSH
17925: FOR_IN
17926: IFFALSE 17942
// SetLives ( i , 600 ) ;
17928: LD_VAR 0 1
17932: PPUSH
17933: LD_INT 600
17935: PPUSH
17936: CALL_OW 234
17940: GO 17925
17942: POP
17943: POP
// end ;
17944: PPOPN 2
17946: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17947: LD_INT 0
17949: PPUSH
// case cmd of 301 :
17950: LD_VAR 0 1
17954: PUSH
17955: LD_INT 301
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 17995
17963: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17964: LD_VAR 0 6
17968: PPUSH
17969: LD_VAR 0 7
17973: PPUSH
17974: LD_VAR 0 8
17978: PPUSH
17979: LD_VAR 0 4
17983: PPUSH
17984: LD_VAR 0 5
17988: PPUSH
17989: CALL 19196 0 5
17993: GO 18116
17995: LD_INT 302
17997: DOUBLE
17998: EQUAL
17999: IFTRUE 18003
18001: GO 18040
18003: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18004: LD_VAR 0 6
18008: PPUSH
18009: LD_VAR 0 7
18013: PPUSH
18014: LD_VAR 0 8
18018: PPUSH
18019: LD_VAR 0 9
18023: PPUSH
18024: LD_VAR 0 4
18028: PPUSH
18029: LD_VAR 0 5
18033: PPUSH
18034: CALL 19287 0 6
18038: GO 18116
18040: LD_INT 303
18042: DOUBLE
18043: EQUAL
18044: IFTRUE 18048
18046: GO 18085
18048: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18049: LD_VAR 0 6
18053: PPUSH
18054: LD_VAR 0 7
18058: PPUSH
18059: LD_VAR 0 8
18063: PPUSH
18064: LD_VAR 0 9
18068: PPUSH
18069: LD_VAR 0 4
18073: PPUSH
18074: LD_VAR 0 5
18078: PPUSH
18079: CALL 18121 0 6
18083: GO 18116
18085: LD_INT 304
18087: DOUBLE
18088: EQUAL
18089: IFTRUE 18093
18091: GO 18115
18093: POP
// hHackTeleport ( unit , x , y ) ; end ;
18094: LD_VAR 0 2
18098: PPUSH
18099: LD_VAR 0 4
18103: PPUSH
18104: LD_VAR 0 5
18108: PPUSH
18109: CALL 19880 0 3
18113: GO 18116
18115: POP
// end ;
18116: LD_VAR 0 12
18120: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18121: LD_INT 0
18123: PPUSH
18124: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18125: LD_VAR 0 1
18129: PUSH
18130: LD_INT 1
18132: LESS
18133: PUSH
18134: LD_VAR 0 1
18138: PUSH
18139: LD_INT 3
18141: GREATER
18142: OR
18143: PUSH
18144: LD_VAR 0 5
18148: PPUSH
18149: LD_VAR 0 6
18153: PPUSH
18154: CALL_OW 428
18158: OR
18159: IFFALSE 18163
// exit ;
18161: GO 18883
// uc_side := your_side ;
18163: LD_ADDR_OWVAR 20
18167: PUSH
18168: LD_OWVAR 2
18172: ST_TO_ADDR
// uc_nation := nation ;
18173: LD_ADDR_OWVAR 21
18177: PUSH
18178: LD_VAR 0 1
18182: ST_TO_ADDR
// bc_level = 1 ;
18183: LD_ADDR_OWVAR 43
18187: PUSH
18188: LD_INT 1
18190: ST_TO_ADDR
// case btype of 1 :
18191: LD_VAR 0 2
18195: PUSH
18196: LD_INT 1
18198: DOUBLE
18199: EQUAL
18200: IFTRUE 18204
18202: GO 18215
18204: POP
// bc_type := b_depot ; 2 :
18205: LD_ADDR_OWVAR 42
18209: PUSH
18210: LD_INT 0
18212: ST_TO_ADDR
18213: GO 18827
18215: LD_INT 2
18217: DOUBLE
18218: EQUAL
18219: IFTRUE 18223
18221: GO 18234
18223: POP
// bc_type := b_warehouse ; 3 :
18224: LD_ADDR_OWVAR 42
18228: PUSH
18229: LD_INT 1
18231: ST_TO_ADDR
18232: GO 18827
18234: LD_INT 3
18236: DOUBLE
18237: EQUAL
18238: IFTRUE 18242
18240: GO 18253
18242: POP
// bc_type := b_lab ; 4 .. 9 :
18243: LD_ADDR_OWVAR 42
18247: PUSH
18248: LD_INT 6
18250: ST_TO_ADDR
18251: GO 18827
18253: LD_INT 4
18255: DOUBLE
18256: GREATEREQUAL
18257: IFFALSE 18265
18259: LD_INT 9
18261: DOUBLE
18262: LESSEQUAL
18263: IFTRUE 18267
18265: GO 18319
18267: POP
// begin bc_type := b_lab_half ;
18268: LD_ADDR_OWVAR 42
18272: PUSH
18273: LD_INT 7
18275: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18276: LD_ADDR_OWVAR 44
18280: PUSH
18281: LD_INT 10
18283: PUSH
18284: LD_INT 11
18286: PUSH
18287: LD_INT 12
18289: PUSH
18290: LD_INT 15
18292: PUSH
18293: LD_INT 14
18295: PUSH
18296: LD_INT 13
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: PUSH
18307: LD_VAR 0 2
18311: PUSH
18312: LD_INT 3
18314: MINUS
18315: ARRAY
18316: ST_TO_ADDR
// end ; 10 .. 13 :
18317: GO 18827
18319: LD_INT 10
18321: DOUBLE
18322: GREATEREQUAL
18323: IFFALSE 18331
18325: LD_INT 13
18327: DOUBLE
18328: LESSEQUAL
18329: IFTRUE 18333
18331: GO 18410
18333: POP
// begin bc_type := b_lab_full ;
18334: LD_ADDR_OWVAR 42
18338: PUSH
18339: LD_INT 8
18341: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18342: LD_ADDR_OWVAR 44
18346: PUSH
18347: LD_INT 10
18349: PUSH
18350: LD_INT 12
18352: PUSH
18353: LD_INT 14
18355: PUSH
18356: LD_INT 13
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: PUSH
18365: LD_VAR 0 2
18369: PUSH
18370: LD_INT 9
18372: MINUS
18373: ARRAY
18374: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18375: LD_ADDR_OWVAR 45
18379: PUSH
18380: LD_INT 11
18382: PUSH
18383: LD_INT 15
18385: PUSH
18386: LD_INT 12
18388: PUSH
18389: LD_INT 15
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: PUSH
18398: LD_VAR 0 2
18402: PUSH
18403: LD_INT 9
18405: MINUS
18406: ARRAY
18407: ST_TO_ADDR
// end ; 14 :
18408: GO 18827
18410: LD_INT 14
18412: DOUBLE
18413: EQUAL
18414: IFTRUE 18418
18416: GO 18429
18418: POP
// bc_type := b_workshop ; 15 :
18419: LD_ADDR_OWVAR 42
18423: PUSH
18424: LD_INT 2
18426: ST_TO_ADDR
18427: GO 18827
18429: LD_INT 15
18431: DOUBLE
18432: EQUAL
18433: IFTRUE 18437
18435: GO 18448
18437: POP
// bc_type := b_factory ; 16 :
18438: LD_ADDR_OWVAR 42
18442: PUSH
18443: LD_INT 3
18445: ST_TO_ADDR
18446: GO 18827
18448: LD_INT 16
18450: DOUBLE
18451: EQUAL
18452: IFTRUE 18456
18454: GO 18467
18456: POP
// bc_type := b_ext_gun ; 17 :
18457: LD_ADDR_OWVAR 42
18461: PUSH
18462: LD_INT 17
18464: ST_TO_ADDR
18465: GO 18827
18467: LD_INT 17
18469: DOUBLE
18470: EQUAL
18471: IFTRUE 18475
18473: GO 18503
18475: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18476: LD_ADDR_OWVAR 42
18480: PUSH
18481: LD_INT 19
18483: PUSH
18484: LD_INT 23
18486: PUSH
18487: LD_INT 19
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: LIST
18494: PUSH
18495: LD_VAR 0 1
18499: ARRAY
18500: ST_TO_ADDR
18501: GO 18827
18503: LD_INT 18
18505: DOUBLE
18506: EQUAL
18507: IFTRUE 18511
18509: GO 18522
18511: POP
// bc_type := b_ext_radar ; 19 :
18512: LD_ADDR_OWVAR 42
18516: PUSH
18517: LD_INT 20
18519: ST_TO_ADDR
18520: GO 18827
18522: LD_INT 19
18524: DOUBLE
18525: EQUAL
18526: IFTRUE 18530
18528: GO 18541
18530: POP
// bc_type := b_ext_radio ; 20 :
18531: LD_ADDR_OWVAR 42
18535: PUSH
18536: LD_INT 22
18538: ST_TO_ADDR
18539: GO 18827
18541: LD_INT 20
18543: DOUBLE
18544: EQUAL
18545: IFTRUE 18549
18547: GO 18560
18549: POP
// bc_type := b_ext_siberium ; 21 :
18550: LD_ADDR_OWVAR 42
18554: PUSH
18555: LD_INT 21
18557: ST_TO_ADDR
18558: GO 18827
18560: LD_INT 21
18562: DOUBLE
18563: EQUAL
18564: IFTRUE 18568
18566: GO 18579
18568: POP
// bc_type := b_ext_computer ; 22 :
18569: LD_ADDR_OWVAR 42
18573: PUSH
18574: LD_INT 24
18576: ST_TO_ADDR
18577: GO 18827
18579: LD_INT 22
18581: DOUBLE
18582: EQUAL
18583: IFTRUE 18587
18585: GO 18598
18587: POP
// bc_type := b_ext_track ; 23 :
18588: LD_ADDR_OWVAR 42
18592: PUSH
18593: LD_INT 16
18595: ST_TO_ADDR
18596: GO 18827
18598: LD_INT 23
18600: DOUBLE
18601: EQUAL
18602: IFTRUE 18606
18604: GO 18617
18606: POP
// bc_type := b_ext_laser ; 24 :
18607: LD_ADDR_OWVAR 42
18611: PUSH
18612: LD_INT 25
18614: ST_TO_ADDR
18615: GO 18827
18617: LD_INT 24
18619: DOUBLE
18620: EQUAL
18621: IFTRUE 18625
18623: GO 18636
18625: POP
// bc_type := b_control_tower ; 25 :
18626: LD_ADDR_OWVAR 42
18630: PUSH
18631: LD_INT 36
18633: ST_TO_ADDR
18634: GO 18827
18636: LD_INT 25
18638: DOUBLE
18639: EQUAL
18640: IFTRUE 18644
18642: GO 18655
18644: POP
// bc_type := b_breastwork ; 26 :
18645: LD_ADDR_OWVAR 42
18649: PUSH
18650: LD_INT 31
18652: ST_TO_ADDR
18653: GO 18827
18655: LD_INT 26
18657: DOUBLE
18658: EQUAL
18659: IFTRUE 18663
18661: GO 18674
18663: POP
// bc_type := b_bunker ; 27 :
18664: LD_ADDR_OWVAR 42
18668: PUSH
18669: LD_INT 32
18671: ST_TO_ADDR
18672: GO 18827
18674: LD_INT 27
18676: DOUBLE
18677: EQUAL
18678: IFTRUE 18682
18680: GO 18693
18682: POP
// bc_type := b_turret ; 28 :
18683: LD_ADDR_OWVAR 42
18687: PUSH
18688: LD_INT 33
18690: ST_TO_ADDR
18691: GO 18827
18693: LD_INT 28
18695: DOUBLE
18696: EQUAL
18697: IFTRUE 18701
18699: GO 18712
18701: POP
// bc_type := b_armoury ; 29 :
18702: LD_ADDR_OWVAR 42
18706: PUSH
18707: LD_INT 4
18709: ST_TO_ADDR
18710: GO 18827
18712: LD_INT 29
18714: DOUBLE
18715: EQUAL
18716: IFTRUE 18720
18718: GO 18731
18720: POP
// bc_type := b_barracks ; 30 :
18721: LD_ADDR_OWVAR 42
18725: PUSH
18726: LD_INT 5
18728: ST_TO_ADDR
18729: GO 18827
18731: LD_INT 30
18733: DOUBLE
18734: EQUAL
18735: IFTRUE 18739
18737: GO 18750
18739: POP
// bc_type := b_solar_power ; 31 :
18740: LD_ADDR_OWVAR 42
18744: PUSH
18745: LD_INT 27
18747: ST_TO_ADDR
18748: GO 18827
18750: LD_INT 31
18752: DOUBLE
18753: EQUAL
18754: IFTRUE 18758
18756: GO 18769
18758: POP
// bc_type := b_oil_power ; 32 :
18759: LD_ADDR_OWVAR 42
18763: PUSH
18764: LD_INT 26
18766: ST_TO_ADDR
18767: GO 18827
18769: LD_INT 32
18771: DOUBLE
18772: EQUAL
18773: IFTRUE 18777
18775: GO 18788
18777: POP
// bc_type := b_siberite_power ; 33 :
18778: LD_ADDR_OWVAR 42
18782: PUSH
18783: LD_INT 28
18785: ST_TO_ADDR
18786: GO 18827
18788: LD_INT 33
18790: DOUBLE
18791: EQUAL
18792: IFTRUE 18796
18794: GO 18807
18796: POP
// bc_type := b_oil_mine ; 34 :
18797: LD_ADDR_OWVAR 42
18801: PUSH
18802: LD_INT 29
18804: ST_TO_ADDR
18805: GO 18827
18807: LD_INT 34
18809: DOUBLE
18810: EQUAL
18811: IFTRUE 18815
18813: GO 18826
18815: POP
// bc_type := b_siberite_mine ; end ;
18816: LD_ADDR_OWVAR 42
18820: PUSH
18821: LD_INT 30
18823: ST_TO_ADDR
18824: GO 18827
18826: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18827: LD_ADDR_VAR 0 8
18831: PUSH
18832: LD_VAR 0 5
18836: PPUSH
18837: LD_VAR 0 6
18841: PPUSH
18842: LD_VAR 0 3
18846: PPUSH
18847: CALL_OW 47
18851: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18852: LD_OWVAR 42
18856: PUSH
18857: LD_INT 32
18859: PUSH
18860: LD_INT 33
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: IN
18867: IFFALSE 18883
// PlaceWeaponTurret ( b , weapon ) ;
18869: LD_VAR 0 8
18873: PPUSH
18874: LD_VAR 0 4
18878: PPUSH
18879: CALL_OW 431
// end ;
18883: LD_VAR 0 7
18887: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18888: LD_INT 0
18890: PPUSH
18891: PPUSH
18892: PPUSH
18893: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18894: LD_ADDR_VAR 0 4
18898: PUSH
18899: LD_INT 22
18901: PUSH
18902: LD_OWVAR 2
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 2
18913: PUSH
18914: LD_INT 30
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 30
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PPUSH
18943: CALL_OW 69
18947: ST_TO_ADDR
// if not tmp then
18948: LD_VAR 0 4
18952: NOT
18953: IFFALSE 18957
// exit ;
18955: GO 19016
// for i in tmp do
18957: LD_ADDR_VAR 0 2
18961: PUSH
18962: LD_VAR 0 4
18966: PUSH
18967: FOR_IN
18968: IFFALSE 19014
// for j = 1 to 3 do
18970: LD_ADDR_VAR 0 3
18974: PUSH
18975: DOUBLE
18976: LD_INT 1
18978: DEC
18979: ST_TO_ADDR
18980: LD_INT 3
18982: PUSH
18983: FOR_TO
18984: IFFALSE 19010
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18986: LD_VAR 0 2
18990: PPUSH
18991: CALL_OW 274
18995: PPUSH
18996: LD_VAR 0 3
19000: PPUSH
19001: LD_INT 99999
19003: PPUSH
19004: CALL_OW 277
19008: GO 18983
19010: POP
19011: POP
19012: GO 18967
19014: POP
19015: POP
// end ;
19016: LD_VAR 0 1
19020: RET
// export function hHackSetLevel10 ; var i , j ; begin
19021: LD_INT 0
19023: PPUSH
19024: PPUSH
19025: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19026: LD_ADDR_VAR 0 2
19030: PUSH
19031: LD_INT 21
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PPUSH
19041: CALL_OW 69
19045: PUSH
19046: FOR_IN
19047: IFFALSE 19099
// if IsSelected ( i ) then
19049: LD_VAR 0 2
19053: PPUSH
19054: CALL_OW 306
19058: IFFALSE 19097
// begin for j := 1 to 4 do
19060: LD_ADDR_VAR 0 3
19064: PUSH
19065: DOUBLE
19066: LD_INT 1
19068: DEC
19069: ST_TO_ADDR
19070: LD_INT 4
19072: PUSH
19073: FOR_TO
19074: IFFALSE 19095
// SetSkill ( i , j , 10 ) ;
19076: LD_VAR 0 2
19080: PPUSH
19081: LD_VAR 0 3
19085: PPUSH
19086: LD_INT 10
19088: PPUSH
19089: CALL_OW 237
19093: GO 19073
19095: POP
19096: POP
// end ;
19097: GO 19046
19099: POP
19100: POP
// end ;
19101: LD_VAR 0 1
19105: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19106: LD_INT 0
19108: PPUSH
19109: PPUSH
19110: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19111: LD_ADDR_VAR 0 2
19115: PUSH
19116: LD_INT 22
19118: PUSH
19119: LD_OWVAR 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 21
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PPUSH
19142: CALL_OW 69
19146: PUSH
19147: FOR_IN
19148: IFFALSE 19189
// begin for j := 1 to 4 do
19150: LD_ADDR_VAR 0 3
19154: PUSH
19155: DOUBLE
19156: LD_INT 1
19158: DEC
19159: ST_TO_ADDR
19160: LD_INT 4
19162: PUSH
19163: FOR_TO
19164: IFFALSE 19185
// SetSkill ( i , j , 10 ) ;
19166: LD_VAR 0 2
19170: PPUSH
19171: LD_VAR 0 3
19175: PPUSH
19176: LD_INT 10
19178: PPUSH
19179: CALL_OW 237
19183: GO 19163
19185: POP
19186: POP
// end ;
19187: GO 19147
19189: POP
19190: POP
// end ;
19191: LD_VAR 0 1
19195: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19196: LD_INT 0
19198: PPUSH
// uc_side := your_side ;
19199: LD_ADDR_OWVAR 20
19203: PUSH
19204: LD_OWVAR 2
19208: ST_TO_ADDR
// uc_nation := nation ;
19209: LD_ADDR_OWVAR 21
19213: PUSH
19214: LD_VAR 0 1
19218: ST_TO_ADDR
// InitHc ;
19219: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19223: LD_INT 0
19225: PPUSH
19226: LD_VAR 0 2
19230: PPUSH
19231: LD_VAR 0 3
19235: PPUSH
19236: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19240: LD_VAR 0 4
19244: PPUSH
19245: LD_VAR 0 5
19249: PPUSH
19250: CALL_OW 428
19254: PUSH
19255: LD_INT 0
19257: EQUAL
19258: IFFALSE 19282
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19260: CALL_OW 44
19264: PPUSH
19265: LD_VAR 0 4
19269: PPUSH
19270: LD_VAR 0 5
19274: PPUSH
19275: LD_INT 1
19277: PPUSH
19278: CALL_OW 48
// end ;
19282: LD_VAR 0 6
19286: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19287: LD_INT 0
19289: PPUSH
19290: PPUSH
// uc_side := your_side ;
19291: LD_ADDR_OWVAR 20
19295: PUSH
19296: LD_OWVAR 2
19300: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19301: LD_VAR 0 1
19305: PUSH
19306: LD_INT 1
19308: PUSH
19309: LD_INT 2
19311: PUSH
19312: LD_INT 3
19314: PUSH
19315: LD_INT 4
19317: PUSH
19318: LD_INT 5
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: IN
19328: IFFALSE 19340
// uc_nation := nation_american else
19330: LD_ADDR_OWVAR 21
19334: PUSH
19335: LD_INT 1
19337: ST_TO_ADDR
19338: GO 19383
// if chassis in [ 11 , 12 , 13 , 14 ] then
19340: LD_VAR 0 1
19344: PUSH
19345: LD_INT 11
19347: PUSH
19348: LD_INT 12
19350: PUSH
19351: LD_INT 13
19353: PUSH
19354: LD_INT 14
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: IN
19363: IFFALSE 19375
// uc_nation := nation_arabian else
19365: LD_ADDR_OWVAR 21
19369: PUSH
19370: LD_INT 2
19372: ST_TO_ADDR
19373: GO 19383
// uc_nation := nation_russian ;
19375: LD_ADDR_OWVAR 21
19379: PUSH
19380: LD_INT 3
19382: ST_TO_ADDR
// vc_chassis := chassis ;
19383: LD_ADDR_OWVAR 37
19387: PUSH
19388: LD_VAR 0 1
19392: ST_TO_ADDR
// vc_engine := engine ;
19393: LD_ADDR_OWVAR 39
19397: PUSH
19398: LD_VAR 0 2
19402: ST_TO_ADDR
// vc_control := control ;
19403: LD_ADDR_OWVAR 38
19407: PUSH
19408: LD_VAR 0 3
19412: ST_TO_ADDR
// vc_weapon := weapon ;
19413: LD_ADDR_OWVAR 40
19417: PUSH
19418: LD_VAR 0 4
19422: ST_TO_ADDR
// un := CreateVehicle ;
19423: LD_ADDR_VAR 0 8
19427: PUSH
19428: CALL_OW 45
19432: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19433: LD_VAR 0 8
19437: PPUSH
19438: LD_INT 0
19440: PPUSH
19441: LD_INT 5
19443: PPUSH
19444: CALL_OW 12
19448: PPUSH
19449: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19453: LD_VAR 0 8
19457: PPUSH
19458: LD_VAR 0 5
19462: PPUSH
19463: LD_VAR 0 6
19467: PPUSH
19468: LD_INT 1
19470: PPUSH
19471: CALL_OW 48
// end ;
19475: LD_VAR 0 7
19479: RET
// export hInvincible ; every 1 do
19480: GO 19482
19482: DISABLE
// hInvincible := [ ] ;
19483: LD_ADDR_EXP 82
19487: PUSH
19488: EMPTY
19489: ST_TO_ADDR
19490: END
// every 10 do var i ;
19491: GO 19493
19493: DISABLE
19494: LD_INT 0
19496: PPUSH
// begin enable ;
19497: ENABLE
// if not hInvincible then
19498: LD_EXP 82
19502: NOT
19503: IFFALSE 19507
// exit ;
19505: GO 19551
// for i in hInvincible do
19507: LD_ADDR_VAR 0 1
19511: PUSH
19512: LD_EXP 82
19516: PUSH
19517: FOR_IN
19518: IFFALSE 19549
// if GetLives ( i ) < 1000 then
19520: LD_VAR 0 1
19524: PPUSH
19525: CALL_OW 256
19529: PUSH
19530: LD_INT 1000
19532: LESS
19533: IFFALSE 19547
// SetLives ( i , 1000 ) ;
19535: LD_VAR 0 1
19539: PPUSH
19540: LD_INT 1000
19542: PPUSH
19543: CALL_OW 234
19547: GO 19517
19549: POP
19550: POP
// end ;
19551: PPOPN 1
19553: END
// export function hHackInvincible ; var i ; begin
19554: LD_INT 0
19556: PPUSH
19557: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19558: LD_ADDR_VAR 0 2
19562: PUSH
19563: LD_INT 2
19565: PUSH
19566: LD_INT 21
19568: PUSH
19569: LD_INT 1
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 21
19578: PUSH
19579: LD_INT 2
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: LIST
19590: PPUSH
19591: CALL_OW 69
19595: PUSH
19596: FOR_IN
19597: IFFALSE 19658
// if IsSelected ( i ) then
19599: LD_VAR 0 2
19603: PPUSH
19604: CALL_OW 306
19608: IFFALSE 19656
// begin if i in hInvincible then
19610: LD_VAR 0 2
19614: PUSH
19615: LD_EXP 82
19619: IN
19620: IFFALSE 19640
// hInvincible := hInvincible diff i else
19622: LD_ADDR_EXP 82
19626: PUSH
19627: LD_EXP 82
19631: PUSH
19632: LD_VAR 0 2
19636: DIFF
19637: ST_TO_ADDR
19638: GO 19656
// hInvincible := hInvincible union i ;
19640: LD_ADDR_EXP 82
19644: PUSH
19645: LD_EXP 82
19649: PUSH
19650: LD_VAR 0 2
19654: UNION
19655: ST_TO_ADDR
// end ;
19656: GO 19596
19658: POP
19659: POP
// end ;
19660: LD_VAR 0 1
19664: RET
// export function hHackInvisible ; var i , j ; begin
19665: LD_INT 0
19667: PPUSH
19668: PPUSH
19669: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19670: LD_ADDR_VAR 0 2
19674: PUSH
19675: LD_INT 21
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PPUSH
19685: CALL_OW 69
19689: PUSH
19690: FOR_IN
19691: IFFALSE 19715
// if IsSelected ( i ) then
19693: LD_VAR 0 2
19697: PPUSH
19698: CALL_OW 306
19702: IFFALSE 19713
// ComForceInvisible ( i ) ;
19704: LD_VAR 0 2
19708: PPUSH
19709: CALL_OW 496
19713: GO 19690
19715: POP
19716: POP
// end ;
19717: LD_VAR 0 1
19721: RET
// export function hHackChangeYourSide ; begin
19722: LD_INT 0
19724: PPUSH
// if your_side = 8 then
19725: LD_OWVAR 2
19729: PUSH
19730: LD_INT 8
19732: EQUAL
19733: IFFALSE 19745
// your_side := 0 else
19735: LD_ADDR_OWVAR 2
19739: PUSH
19740: LD_INT 0
19742: ST_TO_ADDR
19743: GO 19759
// your_side := your_side + 1 ;
19745: LD_ADDR_OWVAR 2
19749: PUSH
19750: LD_OWVAR 2
19754: PUSH
19755: LD_INT 1
19757: PLUS
19758: ST_TO_ADDR
// end ;
19759: LD_VAR 0 1
19763: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19764: LD_INT 0
19766: PPUSH
19767: PPUSH
19768: PPUSH
// for i in all_units do
19769: LD_ADDR_VAR 0 2
19773: PUSH
19774: LD_OWVAR 3
19778: PUSH
19779: FOR_IN
19780: IFFALSE 19858
// if IsSelected ( i ) then
19782: LD_VAR 0 2
19786: PPUSH
19787: CALL_OW 306
19791: IFFALSE 19856
// begin j := GetSide ( i ) ;
19793: LD_ADDR_VAR 0 3
19797: PUSH
19798: LD_VAR 0 2
19802: PPUSH
19803: CALL_OW 255
19807: ST_TO_ADDR
// if j = 8 then
19808: LD_VAR 0 3
19812: PUSH
19813: LD_INT 8
19815: EQUAL
19816: IFFALSE 19828
// j := 0 else
19818: LD_ADDR_VAR 0 3
19822: PUSH
19823: LD_INT 0
19825: ST_TO_ADDR
19826: GO 19842
// j := j + 1 ;
19828: LD_ADDR_VAR 0 3
19832: PUSH
19833: LD_VAR 0 3
19837: PUSH
19838: LD_INT 1
19840: PLUS
19841: ST_TO_ADDR
// SetSide ( i , j ) ;
19842: LD_VAR 0 2
19846: PPUSH
19847: LD_VAR 0 3
19851: PPUSH
19852: CALL_OW 235
// end ;
19856: GO 19779
19858: POP
19859: POP
// end ;
19860: LD_VAR 0 1
19864: RET
// export function hHackFog ; begin
19865: LD_INT 0
19867: PPUSH
// FogOff ( true ) ;
19868: LD_INT 1
19870: PPUSH
19871: CALL_OW 344
// end ;
19875: LD_VAR 0 1
19879: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19880: LD_INT 0
19882: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19883: LD_VAR 0 1
19887: PPUSH
19888: LD_VAR 0 2
19892: PPUSH
19893: LD_VAR 0 3
19897: PPUSH
19898: LD_INT 1
19900: PPUSH
19901: LD_INT 1
19903: PPUSH
19904: CALL_OW 483
// CenterOnXY ( x , y ) ;
19908: LD_VAR 0 2
19912: PPUSH
19913: LD_VAR 0 3
19917: PPUSH
19918: CALL_OW 84
// end ;
19922: LD_VAR 0 4
19926: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19927: LD_INT 0
19929: PPUSH
19930: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19931: LD_VAR 0 1
19935: NOT
19936: PUSH
19937: LD_VAR 0 2
19941: PPUSH
19942: LD_VAR 0 3
19946: PPUSH
19947: CALL_OW 488
19951: NOT
19952: OR
19953: PUSH
19954: LD_VAR 0 1
19958: PPUSH
19959: CALL_OW 266
19963: PUSH
19964: LD_INT 3
19966: NONEQUAL
19967: PUSH
19968: LD_VAR 0 1
19972: PPUSH
19973: CALL_OW 247
19977: PUSH
19978: LD_INT 1
19980: EQUAL
19981: NOT
19982: AND
19983: OR
19984: IFFALSE 19988
// exit ;
19986: GO 20137
// if GetType ( factory ) = unit_human then
19988: LD_VAR 0 1
19992: PPUSH
19993: CALL_OW 247
19997: PUSH
19998: LD_INT 1
20000: EQUAL
20001: IFFALSE 20018
// factory := IsInUnit ( factory ) ;
20003: LD_ADDR_VAR 0 1
20007: PUSH
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 310
20017: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20018: LD_VAR 0 1
20022: PPUSH
20023: CALL_OW 266
20027: PUSH
20028: LD_INT 3
20030: NONEQUAL
20031: IFFALSE 20035
// exit ;
20033: GO 20137
// if HexInfo ( x , y ) = factory then
20035: LD_VAR 0 2
20039: PPUSH
20040: LD_VAR 0 3
20044: PPUSH
20045: CALL_OW 428
20049: PUSH
20050: LD_VAR 0 1
20054: EQUAL
20055: IFFALSE 20082
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20057: LD_ADDR_EXP 83
20061: PUSH
20062: LD_EXP 83
20066: PPUSH
20067: LD_VAR 0 1
20071: PPUSH
20072: LD_INT 0
20074: PPUSH
20075: CALL_OW 1
20079: ST_TO_ADDR
20080: GO 20133
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20082: LD_ADDR_EXP 83
20086: PUSH
20087: LD_EXP 83
20091: PPUSH
20092: LD_VAR 0 1
20096: PPUSH
20097: LD_VAR 0 1
20101: PPUSH
20102: CALL_OW 255
20106: PUSH
20107: LD_VAR 0 1
20111: PUSH
20112: LD_VAR 0 2
20116: PUSH
20117: LD_VAR 0 3
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: PPUSH
20128: CALL_OW 1
20132: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20133: CALL 20142 0 0
// end ;
20137: LD_VAR 0 4
20141: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20142: LD_INT 0
20144: PPUSH
20145: PPUSH
20146: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20147: LD_STRING resetFactoryWaypoint();
20149: PPUSH
20150: CALL_OW 559
// if factoryWaypoints then
20154: LD_EXP 83
20158: IFFALSE 20284
// begin list := PrepareArray ( factoryWaypoints ) ;
20160: LD_ADDR_VAR 0 3
20164: PUSH
20165: LD_EXP 83
20169: PPUSH
20170: CALL 66799 0 1
20174: ST_TO_ADDR
// for i := 1 to list do
20175: LD_ADDR_VAR 0 2
20179: PUSH
20180: DOUBLE
20181: LD_INT 1
20183: DEC
20184: ST_TO_ADDR
20185: LD_VAR 0 3
20189: PUSH
20190: FOR_TO
20191: IFFALSE 20282
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20193: LD_STRING setFactoryWaypointXY(
20195: PUSH
20196: LD_VAR 0 3
20200: PUSH
20201: LD_VAR 0 2
20205: ARRAY
20206: PUSH
20207: LD_INT 1
20209: ARRAY
20210: STR
20211: PUSH
20212: LD_STRING ,
20214: STR
20215: PUSH
20216: LD_VAR 0 3
20220: PUSH
20221: LD_VAR 0 2
20225: ARRAY
20226: PUSH
20227: LD_INT 2
20229: ARRAY
20230: STR
20231: PUSH
20232: LD_STRING ,
20234: STR
20235: PUSH
20236: LD_VAR 0 3
20240: PUSH
20241: LD_VAR 0 2
20245: ARRAY
20246: PUSH
20247: LD_INT 3
20249: ARRAY
20250: STR
20251: PUSH
20252: LD_STRING ,
20254: STR
20255: PUSH
20256: LD_VAR 0 3
20260: PUSH
20261: LD_VAR 0 2
20265: ARRAY
20266: PUSH
20267: LD_INT 4
20269: ARRAY
20270: STR
20271: PUSH
20272: LD_STRING )
20274: STR
20275: PPUSH
20276: CALL_OW 559
20280: GO 20190
20282: POP
20283: POP
// end ; end ;
20284: LD_VAR 0 1
20288: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20289: LD_INT 0
20291: PPUSH
// if HexInfo ( x , y ) = warehouse then
20292: LD_VAR 0 2
20296: PPUSH
20297: LD_VAR 0 3
20301: PPUSH
20302: CALL_OW 428
20306: PUSH
20307: LD_VAR 0 1
20311: EQUAL
20312: IFFALSE 20339
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20314: LD_ADDR_EXP 84
20318: PUSH
20319: LD_EXP 84
20323: PPUSH
20324: LD_VAR 0 1
20328: PPUSH
20329: LD_INT 0
20331: PPUSH
20332: CALL_OW 1
20336: ST_TO_ADDR
20337: GO 20390
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20339: LD_ADDR_EXP 84
20343: PUSH
20344: LD_EXP 84
20348: PPUSH
20349: LD_VAR 0 1
20353: PPUSH
20354: LD_VAR 0 1
20358: PPUSH
20359: CALL_OW 255
20363: PUSH
20364: LD_VAR 0 1
20368: PUSH
20369: LD_VAR 0 2
20373: PUSH
20374: LD_VAR 0 3
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: PPUSH
20385: CALL_OW 1
20389: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20390: CALL 20399 0 0
// end ;
20394: LD_VAR 0 4
20398: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20399: LD_INT 0
20401: PPUSH
20402: PPUSH
20403: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20404: LD_STRING resetWarehouseGatheringPoints();
20406: PPUSH
20407: CALL_OW 559
// if warehouseGatheringPoints then
20411: LD_EXP 84
20415: IFFALSE 20541
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20417: LD_ADDR_VAR 0 3
20421: PUSH
20422: LD_EXP 84
20426: PPUSH
20427: CALL 66799 0 1
20431: ST_TO_ADDR
// for i := 1 to list do
20432: LD_ADDR_VAR 0 2
20436: PUSH
20437: DOUBLE
20438: LD_INT 1
20440: DEC
20441: ST_TO_ADDR
20442: LD_VAR 0 3
20446: PUSH
20447: FOR_TO
20448: IFFALSE 20539
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20450: LD_STRING setWarehouseGatheringPointXY(
20452: PUSH
20453: LD_VAR 0 3
20457: PUSH
20458: LD_VAR 0 2
20462: ARRAY
20463: PUSH
20464: LD_INT 1
20466: ARRAY
20467: STR
20468: PUSH
20469: LD_STRING ,
20471: STR
20472: PUSH
20473: LD_VAR 0 3
20477: PUSH
20478: LD_VAR 0 2
20482: ARRAY
20483: PUSH
20484: LD_INT 2
20486: ARRAY
20487: STR
20488: PUSH
20489: LD_STRING ,
20491: STR
20492: PUSH
20493: LD_VAR 0 3
20497: PUSH
20498: LD_VAR 0 2
20502: ARRAY
20503: PUSH
20504: LD_INT 3
20506: ARRAY
20507: STR
20508: PUSH
20509: LD_STRING ,
20511: STR
20512: PUSH
20513: LD_VAR 0 3
20517: PUSH
20518: LD_VAR 0 2
20522: ARRAY
20523: PUSH
20524: LD_INT 4
20526: ARRAY
20527: STR
20528: PUSH
20529: LD_STRING )
20531: STR
20532: PPUSH
20533: CALL_OW 559
20537: GO 20447
20539: POP
20540: POP
// end ; end ;
20541: LD_VAR 0 1
20545: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20546: LD_EXP 84
20550: IFFALSE 21235
20552: GO 20554
20554: DISABLE
20555: LD_INT 0
20557: PPUSH
20558: PPUSH
20559: PPUSH
20560: PPUSH
20561: PPUSH
20562: PPUSH
20563: PPUSH
20564: PPUSH
20565: PPUSH
// begin enable ;
20566: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20567: LD_ADDR_VAR 0 3
20571: PUSH
20572: LD_EXP 84
20576: PPUSH
20577: CALL 66799 0 1
20581: ST_TO_ADDR
// if not list then
20582: LD_VAR 0 3
20586: NOT
20587: IFFALSE 20591
// exit ;
20589: GO 21235
// for i := 1 to list do
20591: LD_ADDR_VAR 0 1
20595: PUSH
20596: DOUBLE
20597: LD_INT 1
20599: DEC
20600: ST_TO_ADDR
20601: LD_VAR 0 3
20605: PUSH
20606: FOR_TO
20607: IFFALSE 21233
// begin depot := list [ i ] [ 2 ] ;
20609: LD_ADDR_VAR 0 8
20613: PUSH
20614: LD_VAR 0 3
20618: PUSH
20619: LD_VAR 0 1
20623: ARRAY
20624: PUSH
20625: LD_INT 2
20627: ARRAY
20628: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20629: LD_ADDR_VAR 0 5
20633: PUSH
20634: LD_VAR 0 3
20638: PUSH
20639: LD_VAR 0 1
20643: ARRAY
20644: PUSH
20645: LD_INT 1
20647: ARRAY
20648: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20649: LD_VAR 0 8
20653: PPUSH
20654: CALL_OW 301
20658: PUSH
20659: LD_VAR 0 5
20663: PUSH
20664: LD_VAR 0 8
20668: PPUSH
20669: CALL_OW 255
20673: NONEQUAL
20674: OR
20675: IFFALSE 20704
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20677: LD_ADDR_EXP 84
20681: PUSH
20682: LD_EXP 84
20686: PPUSH
20687: LD_VAR 0 8
20691: PPUSH
20692: LD_INT 0
20694: PPUSH
20695: CALL_OW 1
20699: ST_TO_ADDR
// exit ;
20700: POP
20701: POP
20702: GO 21235
// end ; x := list [ i ] [ 3 ] ;
20704: LD_ADDR_VAR 0 6
20708: PUSH
20709: LD_VAR 0 3
20713: PUSH
20714: LD_VAR 0 1
20718: ARRAY
20719: PUSH
20720: LD_INT 3
20722: ARRAY
20723: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20724: LD_ADDR_VAR 0 7
20728: PUSH
20729: LD_VAR 0 3
20733: PUSH
20734: LD_VAR 0 1
20738: ARRAY
20739: PUSH
20740: LD_INT 4
20742: ARRAY
20743: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20744: LD_ADDR_VAR 0 9
20748: PUSH
20749: LD_VAR 0 6
20753: PPUSH
20754: LD_VAR 0 7
20758: PPUSH
20759: LD_INT 16
20761: PPUSH
20762: CALL 65387 0 3
20766: ST_TO_ADDR
// if not cratesNearbyPoint then
20767: LD_VAR 0 9
20771: NOT
20772: IFFALSE 20778
// exit ;
20774: POP
20775: POP
20776: GO 21235
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20778: LD_ADDR_VAR 0 4
20782: PUSH
20783: LD_INT 22
20785: PUSH
20786: LD_VAR 0 5
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 3
20797: PUSH
20798: LD_INT 60
20800: PUSH
20801: EMPTY
20802: LIST
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 91
20810: PUSH
20811: LD_VAR 0 8
20815: PUSH
20816: LD_INT 6
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 2
20826: PUSH
20827: LD_INT 25
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 16
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: LIST
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: PPUSH
20858: CALL_OW 69
20862: PUSH
20863: LD_VAR 0 8
20867: PPUSH
20868: CALL_OW 313
20872: PPUSH
20873: LD_INT 3
20875: PUSH
20876: LD_INT 60
20878: PUSH
20879: EMPTY
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 2
20888: PUSH
20889: LD_INT 25
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 25
20901: PUSH
20902: LD_INT 16
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PPUSH
20918: CALL_OW 72
20922: UNION
20923: ST_TO_ADDR
// if tmp then
20924: LD_VAR 0 4
20928: IFFALSE 21008
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20930: LD_ADDR_VAR 0 4
20934: PUSH
20935: LD_VAR 0 4
20939: PPUSH
20940: LD_INT 3
20942: PPUSH
20943: CALL 63356 0 2
20947: ST_TO_ADDR
// for j in tmp do
20948: LD_ADDR_VAR 0 2
20952: PUSH
20953: LD_VAR 0 4
20957: PUSH
20958: FOR_IN
20959: IFFALSE 21002
// begin if IsInUnit ( j ) then
20961: LD_VAR 0 2
20965: PPUSH
20966: CALL_OW 310
20970: IFFALSE 20981
// ComExit ( j ) ;
20972: LD_VAR 0 2
20976: PPUSH
20977: CALL 63439 0 1
// AddComCollect ( j , x , y ) ;
20981: LD_VAR 0 2
20985: PPUSH
20986: LD_VAR 0 6
20990: PPUSH
20991: LD_VAR 0 7
20995: PPUSH
20996: CALL_OW 177
// end ;
21000: GO 20958
21002: POP
21003: POP
// exit ;
21004: POP
21005: POP
21006: GO 21235
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21008: LD_ADDR_VAR 0 4
21012: PUSH
21013: LD_INT 22
21015: PUSH
21016: LD_VAR 0 5
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 91
21027: PUSH
21028: LD_VAR 0 8
21032: PUSH
21033: LD_INT 8
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: LD_INT 34
21046: PUSH
21047: LD_INT 12
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 34
21056: PUSH
21057: LD_INT 51
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 34
21066: PUSH
21067: LD_INT 32
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 34
21076: PUSH
21077: LD_INT 89
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: PPUSH
21096: CALL_OW 69
21100: ST_TO_ADDR
// if tmp then
21101: LD_VAR 0 4
21105: IFFALSE 21231
// begin for j in tmp do
21107: LD_ADDR_VAR 0 2
21111: PUSH
21112: LD_VAR 0 4
21116: PUSH
21117: FOR_IN
21118: IFFALSE 21229
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21120: LD_VAR 0 2
21124: PPUSH
21125: CALL_OW 262
21129: PUSH
21130: LD_INT 3
21132: EQUAL
21133: PUSH
21134: LD_VAR 0 2
21138: PPUSH
21139: CALL_OW 261
21143: PUSH
21144: LD_INT 20
21146: GREATER
21147: OR
21148: PUSH
21149: LD_VAR 0 2
21153: PPUSH
21154: CALL_OW 314
21158: NOT
21159: AND
21160: PUSH
21161: LD_VAR 0 2
21165: PPUSH
21166: CALL_OW 263
21170: PUSH
21171: LD_INT 1
21173: NONEQUAL
21174: PUSH
21175: LD_VAR 0 2
21179: PPUSH
21180: CALL_OW 311
21184: OR
21185: AND
21186: IFFALSE 21227
// begin ComCollect ( j , x , y ) ;
21188: LD_VAR 0 2
21192: PPUSH
21193: LD_VAR 0 6
21197: PPUSH
21198: LD_VAR 0 7
21202: PPUSH
21203: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21207: LD_VAR 0 2
21211: PPUSH
21212: LD_VAR 0 8
21216: PPUSH
21217: CALL_OW 172
// exit ;
21221: POP
21222: POP
21223: POP
21224: POP
21225: GO 21235
// end ;
21227: GO 21117
21229: POP
21230: POP
// end ; end ;
21231: GO 20606
21233: POP
21234: POP
// end ; end_of_file
21235: PPOPN 9
21237: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21238: LD_INT 0
21240: PPUSH
21241: PPUSH
21242: PPUSH
21243: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21244: LD_VAR 0 1
21248: PPUSH
21249: CALL_OW 264
21253: PUSH
21254: LD_INT 91
21256: EQUAL
21257: IFFALSE 21329
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21259: LD_INT 68
21261: PPUSH
21262: LD_VAR 0 1
21266: PPUSH
21267: CALL_OW 255
21271: PPUSH
21272: CALL_OW 321
21276: PUSH
21277: LD_INT 2
21279: EQUAL
21280: IFFALSE 21292
// eff := 70 else
21282: LD_ADDR_VAR 0 4
21286: PUSH
21287: LD_INT 70
21289: ST_TO_ADDR
21290: GO 21300
// eff := 30 ;
21292: LD_ADDR_VAR 0 4
21296: PUSH
21297: LD_INT 30
21299: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21300: LD_VAR 0 1
21304: PPUSH
21305: CALL_OW 250
21309: PPUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL_OW 251
21319: PPUSH
21320: LD_VAR 0 4
21324: PPUSH
21325: CALL_OW 495
// end ; end ;
21329: LD_VAR 0 2
21333: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21334: LD_INT 0
21336: PPUSH
// end ;
21337: LD_VAR 0 4
21341: RET
// export function SOS_Command ( cmd ) ; begin
21342: LD_INT 0
21344: PPUSH
// end ;
21345: LD_VAR 0 2
21349: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21350: LD_INT 0
21352: PPUSH
// end ;
21353: LD_VAR 0 6
21357: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21358: LD_INT 0
21360: PPUSH
21361: PPUSH
// if not vehicle or not factory then
21362: LD_VAR 0 1
21366: NOT
21367: PUSH
21368: LD_VAR 0 2
21372: NOT
21373: OR
21374: IFFALSE 21378
// exit ;
21376: GO 21609
// if factoryWaypoints >= factory then
21378: LD_EXP 83
21382: PUSH
21383: LD_VAR 0 2
21387: GREATEREQUAL
21388: IFFALSE 21609
// if factoryWaypoints [ factory ] then
21390: LD_EXP 83
21394: PUSH
21395: LD_VAR 0 2
21399: ARRAY
21400: IFFALSE 21609
// begin if GetControl ( vehicle ) = control_manual then
21402: LD_VAR 0 1
21406: PPUSH
21407: CALL_OW 263
21411: PUSH
21412: LD_INT 1
21414: EQUAL
21415: IFFALSE 21496
// begin driver := IsDrivenBy ( vehicle ) ;
21417: LD_ADDR_VAR 0 4
21421: PUSH
21422: LD_VAR 0 1
21426: PPUSH
21427: CALL_OW 311
21431: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21432: LD_VAR 0 4
21436: PPUSH
21437: LD_EXP 83
21441: PUSH
21442: LD_VAR 0 2
21446: ARRAY
21447: PUSH
21448: LD_INT 3
21450: ARRAY
21451: PPUSH
21452: LD_EXP 83
21456: PUSH
21457: LD_VAR 0 2
21461: ARRAY
21462: PUSH
21463: LD_INT 4
21465: ARRAY
21466: PPUSH
21467: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21471: LD_VAR 0 4
21475: PPUSH
21476: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21480: LD_VAR 0 4
21484: PPUSH
21485: LD_VAR 0 2
21489: PPUSH
21490: CALL_OW 180
// end else
21494: GO 21609
// if GetControl ( vehicle ) = control_remote then
21496: LD_VAR 0 1
21500: PPUSH
21501: CALL_OW 263
21505: PUSH
21506: LD_INT 2
21508: EQUAL
21509: IFFALSE 21570
// begin wait ( 0 0$2 ) ;
21511: LD_INT 70
21513: PPUSH
21514: CALL_OW 67
// if Connect ( vehicle ) then
21518: LD_VAR 0 1
21522: PPUSH
21523: CALL 33680 0 1
21527: IFFALSE 21568
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21529: LD_VAR 0 1
21533: PPUSH
21534: LD_EXP 83
21538: PUSH
21539: LD_VAR 0 2
21543: ARRAY
21544: PUSH
21545: LD_INT 3
21547: ARRAY
21548: PPUSH
21549: LD_EXP 83
21553: PUSH
21554: LD_VAR 0 2
21558: ARRAY
21559: PUSH
21560: LD_INT 4
21562: ARRAY
21563: PPUSH
21564: CALL_OW 171
// end else
21568: GO 21609
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21570: LD_VAR 0 1
21574: PPUSH
21575: LD_EXP 83
21579: PUSH
21580: LD_VAR 0 2
21584: ARRAY
21585: PUSH
21586: LD_INT 3
21588: ARRAY
21589: PPUSH
21590: LD_EXP 83
21594: PUSH
21595: LD_VAR 0 2
21599: ARRAY
21600: PUSH
21601: LD_INT 4
21603: ARRAY
21604: PPUSH
21605: CALL_OW 171
// end ; end ;
21609: LD_VAR 0 3
21613: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21614: LD_INT 0
21616: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21617: LD_VAR 0 1
21621: PUSH
21622: LD_INT 250
21624: EQUAL
21625: PUSH
21626: LD_VAR 0 2
21630: PPUSH
21631: CALL_OW 264
21635: PUSH
21636: LD_INT 81
21638: EQUAL
21639: AND
21640: IFFALSE 21661
// MinerPlaceMine ( unit , x , y ) ;
21642: LD_VAR 0 2
21646: PPUSH
21647: LD_VAR 0 4
21651: PPUSH
21652: LD_VAR 0 5
21656: PPUSH
21657: CALL 24046 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21661: LD_VAR 0 1
21665: PUSH
21666: LD_INT 251
21668: EQUAL
21669: PUSH
21670: LD_VAR 0 2
21674: PPUSH
21675: CALL_OW 264
21679: PUSH
21680: LD_INT 81
21682: EQUAL
21683: AND
21684: IFFALSE 21705
// MinerDetonateMine ( unit , x , y ) ;
21686: LD_VAR 0 2
21690: PPUSH
21691: LD_VAR 0 4
21695: PPUSH
21696: LD_VAR 0 5
21700: PPUSH
21701: CALL 24321 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21705: LD_VAR 0 1
21709: PUSH
21710: LD_INT 252
21712: EQUAL
21713: PUSH
21714: LD_VAR 0 2
21718: PPUSH
21719: CALL_OW 264
21723: PUSH
21724: LD_INT 81
21726: EQUAL
21727: AND
21728: IFFALSE 21749
// MinerCreateMinefield ( unit , x , y ) ;
21730: LD_VAR 0 2
21734: PPUSH
21735: LD_VAR 0 4
21739: PPUSH
21740: LD_VAR 0 5
21744: PPUSH
21745: CALL 24738 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21749: LD_VAR 0 1
21753: PUSH
21754: LD_INT 253
21756: EQUAL
21757: PUSH
21758: LD_VAR 0 2
21762: PPUSH
21763: CALL_OW 257
21767: PUSH
21768: LD_INT 5
21770: EQUAL
21771: AND
21772: IFFALSE 21793
// ComBinocular ( unit , x , y ) ;
21774: LD_VAR 0 2
21778: PPUSH
21779: LD_VAR 0 4
21783: PPUSH
21784: LD_VAR 0 5
21788: PPUSH
21789: CALL 25107 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21793: LD_VAR 0 1
21797: PUSH
21798: LD_INT 254
21800: EQUAL
21801: PUSH
21802: LD_VAR 0 2
21806: PPUSH
21807: CALL_OW 264
21811: PUSH
21812: LD_INT 99
21814: EQUAL
21815: AND
21816: PUSH
21817: LD_VAR 0 3
21821: PPUSH
21822: CALL_OW 263
21826: PUSH
21827: LD_INT 3
21829: EQUAL
21830: AND
21831: IFFALSE 21847
// HackDestroyVehicle ( unit , selectedUnit ) ;
21833: LD_VAR 0 2
21837: PPUSH
21838: LD_VAR 0 3
21842: PPUSH
21843: CALL 23410 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21847: LD_VAR 0 1
21851: PUSH
21852: LD_INT 255
21854: EQUAL
21855: PUSH
21856: LD_VAR 0 2
21860: PPUSH
21861: CALL_OW 264
21865: PUSH
21866: LD_INT 14
21868: PUSH
21869: LD_INT 53
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: IN
21876: AND
21877: PUSH
21878: LD_VAR 0 4
21882: PPUSH
21883: LD_VAR 0 5
21887: PPUSH
21888: CALL_OW 488
21892: AND
21893: IFFALSE 21917
// CutTreeXYR ( unit , x , y , 12 ) ;
21895: LD_VAR 0 2
21899: PPUSH
21900: LD_VAR 0 4
21904: PPUSH
21905: LD_VAR 0 5
21909: PPUSH
21910: LD_INT 12
21912: PPUSH
21913: CALL 21980 0 4
// if cmd = 256 then
21917: LD_VAR 0 1
21921: PUSH
21922: LD_INT 256
21924: EQUAL
21925: IFFALSE 21946
// SetFactoryWaypoint ( unit , x , y ) ;
21927: LD_VAR 0 2
21931: PPUSH
21932: LD_VAR 0 4
21936: PPUSH
21937: LD_VAR 0 5
21941: PPUSH
21942: CALL 19927 0 3
// if cmd = 257 then
21946: LD_VAR 0 1
21950: PUSH
21951: LD_INT 257
21953: EQUAL
21954: IFFALSE 21975
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21956: LD_VAR 0 2
21960: PPUSH
21961: LD_VAR 0 4
21965: PPUSH
21966: LD_VAR 0 5
21970: PPUSH
21971: CALL 20289 0 3
// end ;
21975: LD_VAR 0 6
21979: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21980: LD_INT 0
21982: PPUSH
21983: PPUSH
21984: PPUSH
21985: PPUSH
21986: PPUSH
21987: PPUSH
21988: PPUSH
21989: PPUSH
21990: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21991: LD_VAR 0 1
21995: NOT
21996: PUSH
21997: LD_VAR 0 2
22001: PPUSH
22002: LD_VAR 0 3
22006: PPUSH
22007: CALL_OW 488
22011: NOT
22012: OR
22013: PUSH
22014: LD_VAR 0 4
22018: NOT
22019: OR
22020: IFFALSE 22024
// exit ;
22022: GO 22364
// list := [ ] ;
22024: LD_ADDR_VAR 0 13
22028: PUSH
22029: EMPTY
22030: ST_TO_ADDR
// if x - r < 0 then
22031: LD_VAR 0 2
22035: PUSH
22036: LD_VAR 0 4
22040: MINUS
22041: PUSH
22042: LD_INT 0
22044: LESS
22045: IFFALSE 22057
// min_x := 0 else
22047: LD_ADDR_VAR 0 7
22051: PUSH
22052: LD_INT 0
22054: ST_TO_ADDR
22055: GO 22073
// min_x := x - r ;
22057: LD_ADDR_VAR 0 7
22061: PUSH
22062: LD_VAR 0 2
22066: PUSH
22067: LD_VAR 0 4
22071: MINUS
22072: ST_TO_ADDR
// if y - r < 0 then
22073: LD_VAR 0 3
22077: PUSH
22078: LD_VAR 0 4
22082: MINUS
22083: PUSH
22084: LD_INT 0
22086: LESS
22087: IFFALSE 22099
// min_y := 0 else
22089: LD_ADDR_VAR 0 8
22093: PUSH
22094: LD_INT 0
22096: ST_TO_ADDR
22097: GO 22115
// min_y := y - r ;
22099: LD_ADDR_VAR 0 8
22103: PUSH
22104: LD_VAR 0 3
22108: PUSH
22109: LD_VAR 0 4
22113: MINUS
22114: ST_TO_ADDR
// max_x := x + r ;
22115: LD_ADDR_VAR 0 9
22119: PUSH
22120: LD_VAR 0 2
22124: PUSH
22125: LD_VAR 0 4
22129: PLUS
22130: ST_TO_ADDR
// max_y := y + r ;
22131: LD_ADDR_VAR 0 10
22135: PUSH
22136: LD_VAR 0 3
22140: PUSH
22141: LD_VAR 0 4
22145: PLUS
22146: ST_TO_ADDR
// for _x = min_x to max_x do
22147: LD_ADDR_VAR 0 11
22151: PUSH
22152: DOUBLE
22153: LD_VAR 0 7
22157: DEC
22158: ST_TO_ADDR
22159: LD_VAR 0 9
22163: PUSH
22164: FOR_TO
22165: IFFALSE 22282
// for _y = min_y to max_y do
22167: LD_ADDR_VAR 0 12
22171: PUSH
22172: DOUBLE
22173: LD_VAR 0 8
22177: DEC
22178: ST_TO_ADDR
22179: LD_VAR 0 10
22183: PUSH
22184: FOR_TO
22185: IFFALSE 22278
// begin if not ValidHex ( _x , _y ) then
22187: LD_VAR 0 11
22191: PPUSH
22192: LD_VAR 0 12
22196: PPUSH
22197: CALL_OW 488
22201: NOT
22202: IFFALSE 22206
// continue ;
22204: GO 22184
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22206: LD_VAR 0 11
22210: PPUSH
22211: LD_VAR 0 12
22215: PPUSH
22216: CALL_OW 351
22220: PUSH
22221: LD_VAR 0 11
22225: PPUSH
22226: LD_VAR 0 12
22230: PPUSH
22231: CALL_OW 554
22235: AND
22236: IFFALSE 22276
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22238: LD_ADDR_VAR 0 13
22242: PUSH
22243: LD_VAR 0 13
22247: PPUSH
22248: LD_VAR 0 13
22252: PUSH
22253: LD_INT 1
22255: PLUS
22256: PPUSH
22257: LD_VAR 0 11
22261: PUSH
22262: LD_VAR 0 12
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PPUSH
22271: CALL_OW 2
22275: ST_TO_ADDR
// end ;
22276: GO 22184
22278: POP
22279: POP
22280: GO 22164
22282: POP
22283: POP
// if not list then
22284: LD_VAR 0 13
22288: NOT
22289: IFFALSE 22293
// exit ;
22291: GO 22364
// for i in list do
22293: LD_ADDR_VAR 0 6
22297: PUSH
22298: LD_VAR 0 13
22302: PUSH
22303: FOR_IN
22304: IFFALSE 22362
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22306: LD_VAR 0 1
22310: PPUSH
22311: LD_STRING M
22313: PUSH
22314: LD_VAR 0 6
22318: PUSH
22319: LD_INT 1
22321: ARRAY
22322: PUSH
22323: LD_VAR 0 6
22327: PUSH
22328: LD_INT 2
22330: ARRAY
22331: PUSH
22332: LD_INT 0
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: LD_INT 0
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: PUSH
22353: EMPTY
22354: LIST
22355: PPUSH
22356: CALL_OW 447
22360: GO 22303
22362: POP
22363: POP
// end ;
22364: LD_VAR 0 5
22368: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22369: LD_EXP 86
22373: NOT
22374: IFFALSE 22424
22376: GO 22378
22378: DISABLE
// begin initHack := true ;
22379: LD_ADDR_EXP 86
22383: PUSH
22384: LD_INT 1
22386: ST_TO_ADDR
// hackTanks := [ ] ;
22387: LD_ADDR_EXP 87
22391: PUSH
22392: EMPTY
22393: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22394: LD_ADDR_EXP 88
22398: PUSH
22399: EMPTY
22400: ST_TO_ADDR
// hackLimit := 3 ;
22401: LD_ADDR_EXP 89
22405: PUSH
22406: LD_INT 3
22408: ST_TO_ADDR
// hackDist := 12 ;
22409: LD_ADDR_EXP 90
22413: PUSH
22414: LD_INT 12
22416: ST_TO_ADDR
// hackCounter := [ ] ;
22417: LD_ADDR_EXP 91
22421: PUSH
22422: EMPTY
22423: ST_TO_ADDR
// end ;
22424: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22425: LD_EXP 86
22429: PUSH
22430: LD_INT 34
22432: PUSH
22433: LD_INT 99
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PPUSH
22440: CALL_OW 69
22444: AND
22445: IFFALSE 22698
22447: GO 22449
22449: DISABLE
22450: LD_INT 0
22452: PPUSH
22453: PPUSH
// begin enable ;
22454: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22455: LD_ADDR_VAR 0 1
22459: PUSH
22460: LD_INT 34
22462: PUSH
22463: LD_INT 99
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PPUSH
22470: CALL_OW 69
22474: PUSH
22475: FOR_IN
22476: IFFALSE 22696
// begin if not i in hackTanks then
22478: LD_VAR 0 1
22482: PUSH
22483: LD_EXP 87
22487: IN
22488: NOT
22489: IFFALSE 22572
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22491: LD_ADDR_EXP 87
22495: PUSH
22496: LD_EXP 87
22500: PPUSH
22501: LD_EXP 87
22505: PUSH
22506: LD_INT 1
22508: PLUS
22509: PPUSH
22510: LD_VAR 0 1
22514: PPUSH
22515: CALL_OW 1
22519: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22520: LD_ADDR_EXP 88
22524: PUSH
22525: LD_EXP 88
22529: PPUSH
22530: LD_EXP 88
22534: PUSH
22535: LD_INT 1
22537: PLUS
22538: PPUSH
22539: EMPTY
22540: PPUSH
22541: CALL_OW 1
22545: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22546: LD_ADDR_EXP 91
22550: PUSH
22551: LD_EXP 91
22555: PPUSH
22556: LD_EXP 91
22560: PUSH
22561: LD_INT 1
22563: PLUS
22564: PPUSH
22565: EMPTY
22566: PPUSH
22567: CALL_OW 1
22571: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22572: LD_VAR 0 1
22576: PPUSH
22577: CALL_OW 302
22581: NOT
22582: IFFALSE 22595
// begin HackUnlinkAll ( i ) ;
22584: LD_VAR 0 1
22588: PPUSH
22589: CALL 22701 0 1
// continue ;
22593: GO 22475
// end ; HackCheckCapturedStatus ( i ) ;
22595: LD_VAR 0 1
22599: PPUSH
22600: CALL 23144 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22604: LD_ADDR_VAR 0 2
22608: PUSH
22609: LD_INT 81
22611: PUSH
22612: LD_VAR 0 1
22616: PPUSH
22617: CALL_OW 255
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 33
22628: PUSH
22629: LD_INT 3
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 91
22638: PUSH
22639: LD_VAR 0 1
22643: PUSH
22644: LD_EXP 90
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 50
22656: PUSH
22657: EMPTY
22658: LIST
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: PPUSH
22666: CALL_OW 69
22670: ST_TO_ADDR
// if not tmp then
22671: LD_VAR 0 2
22675: NOT
22676: IFFALSE 22680
// continue ;
22678: GO 22475
// HackLink ( i , tmp ) ;
22680: LD_VAR 0 1
22684: PPUSH
22685: LD_VAR 0 2
22689: PPUSH
22690: CALL 22837 0 2
// end ;
22694: GO 22475
22696: POP
22697: POP
// end ;
22698: PPOPN 2
22700: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22701: LD_INT 0
22703: PPUSH
22704: PPUSH
22705: PPUSH
// if not hack in hackTanks then
22706: LD_VAR 0 1
22710: PUSH
22711: LD_EXP 87
22715: IN
22716: NOT
22717: IFFALSE 22721
// exit ;
22719: GO 22832
// index := GetElementIndex ( hackTanks , hack ) ;
22721: LD_ADDR_VAR 0 4
22725: PUSH
22726: LD_EXP 87
22730: PPUSH
22731: LD_VAR 0 1
22735: PPUSH
22736: CALL 30496 0 2
22740: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22741: LD_EXP 88
22745: PUSH
22746: LD_VAR 0 4
22750: ARRAY
22751: IFFALSE 22832
// begin for i in hackTanksCaptured [ index ] do
22753: LD_ADDR_VAR 0 3
22757: PUSH
22758: LD_EXP 88
22762: PUSH
22763: LD_VAR 0 4
22767: ARRAY
22768: PUSH
22769: FOR_IN
22770: IFFALSE 22796
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22772: LD_VAR 0 3
22776: PUSH
22777: LD_INT 1
22779: ARRAY
22780: PPUSH
22781: LD_VAR 0 3
22785: PUSH
22786: LD_INT 2
22788: ARRAY
22789: PPUSH
22790: CALL_OW 235
22794: GO 22769
22796: POP
22797: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22798: LD_ADDR_EXP 88
22802: PUSH
22803: LD_EXP 88
22807: PPUSH
22808: LD_VAR 0 4
22812: PPUSH
22813: EMPTY
22814: PPUSH
22815: CALL_OW 1
22819: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22820: LD_VAR 0 1
22824: PPUSH
22825: LD_INT 0
22827: PPUSH
22828: CALL_OW 505
// end ; end ;
22832: LD_VAR 0 2
22836: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22837: LD_INT 0
22839: PPUSH
22840: PPUSH
22841: PPUSH
// if not hack in hackTanks or not vehicles then
22842: LD_VAR 0 1
22846: PUSH
22847: LD_EXP 87
22851: IN
22852: NOT
22853: PUSH
22854: LD_VAR 0 2
22858: NOT
22859: OR
22860: IFFALSE 22864
// exit ;
22862: GO 23139
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22864: LD_ADDR_VAR 0 2
22868: PUSH
22869: LD_VAR 0 1
22873: PPUSH
22874: LD_VAR 0 2
22878: PPUSH
22879: LD_INT 1
22881: PPUSH
22882: LD_INT 1
22884: PPUSH
22885: CALL 31146 0 4
22889: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22890: LD_ADDR_VAR 0 5
22894: PUSH
22895: LD_EXP 87
22899: PPUSH
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL 30496 0 2
22909: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22910: LD_EXP 88
22914: PUSH
22915: LD_VAR 0 5
22919: ARRAY
22920: PUSH
22921: LD_EXP 89
22925: LESS
22926: IFFALSE 23115
// begin for i := 1 to vehicles do
22928: LD_ADDR_VAR 0 4
22932: PUSH
22933: DOUBLE
22934: LD_INT 1
22936: DEC
22937: ST_TO_ADDR
22938: LD_VAR 0 2
22942: PUSH
22943: FOR_TO
22944: IFFALSE 23113
// begin if hackTanksCaptured [ index ] = hackLimit then
22946: LD_EXP 88
22950: PUSH
22951: LD_VAR 0 5
22955: ARRAY
22956: PUSH
22957: LD_EXP 89
22961: EQUAL
22962: IFFALSE 22966
// break ;
22964: GO 23113
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22966: LD_ADDR_EXP 91
22970: PUSH
22971: LD_EXP 91
22975: PPUSH
22976: LD_VAR 0 5
22980: PPUSH
22981: LD_EXP 91
22985: PUSH
22986: LD_VAR 0 5
22990: ARRAY
22991: PUSH
22992: LD_INT 1
22994: PLUS
22995: PPUSH
22996: CALL_OW 1
23000: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23001: LD_ADDR_EXP 88
23005: PUSH
23006: LD_EXP 88
23010: PPUSH
23011: LD_VAR 0 5
23015: PUSH
23016: LD_EXP 88
23020: PUSH
23021: LD_VAR 0 5
23025: ARRAY
23026: PUSH
23027: LD_INT 1
23029: PLUS
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PPUSH
23035: LD_VAR 0 2
23039: PUSH
23040: LD_VAR 0 4
23044: ARRAY
23045: PUSH
23046: LD_VAR 0 2
23050: PUSH
23051: LD_VAR 0 4
23055: ARRAY
23056: PPUSH
23057: CALL_OW 255
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PPUSH
23066: CALL 30711 0 3
23070: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23071: LD_VAR 0 2
23075: PUSH
23076: LD_VAR 0 4
23080: ARRAY
23081: PPUSH
23082: LD_VAR 0 1
23086: PPUSH
23087: CALL_OW 255
23091: PPUSH
23092: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23096: LD_VAR 0 2
23100: PUSH
23101: LD_VAR 0 4
23105: ARRAY
23106: PPUSH
23107: CALL_OW 141
// end ;
23111: GO 22943
23113: POP
23114: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23115: LD_VAR 0 1
23119: PPUSH
23120: LD_EXP 88
23124: PUSH
23125: LD_VAR 0 5
23129: ARRAY
23130: PUSH
23131: LD_INT 0
23133: PLUS
23134: PPUSH
23135: CALL_OW 505
// end ;
23139: LD_VAR 0 3
23143: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23144: LD_INT 0
23146: PPUSH
23147: PPUSH
23148: PPUSH
23149: PPUSH
// if not hack in hackTanks then
23150: LD_VAR 0 1
23154: PUSH
23155: LD_EXP 87
23159: IN
23160: NOT
23161: IFFALSE 23165
// exit ;
23163: GO 23405
// index := GetElementIndex ( hackTanks , hack ) ;
23165: LD_ADDR_VAR 0 4
23169: PUSH
23170: LD_EXP 87
23174: PPUSH
23175: LD_VAR 0 1
23179: PPUSH
23180: CALL 30496 0 2
23184: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23185: LD_ADDR_VAR 0 3
23189: PUSH
23190: DOUBLE
23191: LD_EXP 88
23195: PUSH
23196: LD_VAR 0 4
23200: ARRAY
23201: INC
23202: ST_TO_ADDR
23203: LD_INT 1
23205: PUSH
23206: FOR_DOWNTO
23207: IFFALSE 23379
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23209: LD_ADDR_VAR 0 5
23213: PUSH
23214: LD_EXP 88
23218: PUSH
23219: LD_VAR 0 4
23223: ARRAY
23224: PUSH
23225: LD_VAR 0 3
23229: ARRAY
23230: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23231: LD_VAR 0 5
23235: PUSH
23236: LD_INT 1
23238: ARRAY
23239: PPUSH
23240: CALL_OW 302
23244: NOT
23245: PUSH
23246: LD_VAR 0 5
23250: PUSH
23251: LD_INT 1
23253: ARRAY
23254: PPUSH
23255: CALL_OW 255
23259: PUSH
23260: LD_VAR 0 1
23264: PPUSH
23265: CALL_OW 255
23269: NONEQUAL
23270: OR
23271: IFFALSE 23377
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23273: LD_VAR 0 5
23277: PUSH
23278: LD_INT 1
23280: ARRAY
23281: PPUSH
23282: CALL_OW 305
23286: PUSH
23287: LD_VAR 0 5
23291: PUSH
23292: LD_INT 1
23294: ARRAY
23295: PPUSH
23296: CALL_OW 255
23300: PUSH
23301: LD_VAR 0 1
23305: PPUSH
23306: CALL_OW 255
23310: EQUAL
23311: AND
23312: IFFALSE 23336
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23314: LD_VAR 0 5
23318: PUSH
23319: LD_INT 1
23321: ARRAY
23322: PPUSH
23323: LD_VAR 0 5
23327: PUSH
23328: LD_INT 2
23330: ARRAY
23331: PPUSH
23332: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23336: LD_ADDR_EXP 88
23340: PUSH
23341: LD_EXP 88
23345: PPUSH
23346: LD_VAR 0 4
23350: PPUSH
23351: LD_EXP 88
23355: PUSH
23356: LD_VAR 0 4
23360: ARRAY
23361: PPUSH
23362: LD_VAR 0 3
23366: PPUSH
23367: CALL_OW 3
23371: PPUSH
23372: CALL_OW 1
23376: ST_TO_ADDR
// end ; end ;
23377: GO 23206
23379: POP
23380: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23381: LD_VAR 0 1
23385: PPUSH
23386: LD_EXP 88
23390: PUSH
23391: LD_VAR 0 4
23395: ARRAY
23396: PUSH
23397: LD_INT 0
23399: PLUS
23400: PPUSH
23401: CALL_OW 505
// end ;
23405: LD_VAR 0 2
23409: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23410: LD_INT 0
23412: PPUSH
23413: PPUSH
23414: PPUSH
23415: PPUSH
// if not hack in hackTanks then
23416: LD_VAR 0 1
23420: PUSH
23421: LD_EXP 87
23425: IN
23426: NOT
23427: IFFALSE 23431
// exit ;
23429: GO 23516
// index := GetElementIndex ( hackTanks , hack ) ;
23431: LD_ADDR_VAR 0 5
23435: PUSH
23436: LD_EXP 87
23440: PPUSH
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL 30496 0 2
23450: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23451: LD_ADDR_VAR 0 4
23455: PUSH
23456: DOUBLE
23457: LD_INT 1
23459: DEC
23460: ST_TO_ADDR
23461: LD_EXP 88
23465: PUSH
23466: LD_VAR 0 5
23470: ARRAY
23471: PUSH
23472: FOR_TO
23473: IFFALSE 23514
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23475: LD_EXP 88
23479: PUSH
23480: LD_VAR 0 5
23484: ARRAY
23485: PUSH
23486: LD_VAR 0 4
23490: ARRAY
23491: PUSH
23492: LD_INT 1
23494: ARRAY
23495: PUSH
23496: LD_VAR 0 2
23500: EQUAL
23501: IFFALSE 23512
// KillUnit ( vehicle ) ;
23503: LD_VAR 0 2
23507: PPUSH
23508: CALL_OW 66
23512: GO 23472
23514: POP
23515: POP
// end ;
23516: LD_VAR 0 3
23520: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23521: LD_EXP 92
23525: NOT
23526: IFFALSE 23561
23528: GO 23530
23530: DISABLE
// begin initMiner := true ;
23531: LD_ADDR_EXP 92
23535: PUSH
23536: LD_INT 1
23538: ST_TO_ADDR
// minersList := [ ] ;
23539: LD_ADDR_EXP 93
23543: PUSH
23544: EMPTY
23545: ST_TO_ADDR
// minerMinesList := [ ] ;
23546: LD_ADDR_EXP 94
23550: PUSH
23551: EMPTY
23552: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23553: LD_ADDR_EXP 95
23557: PUSH
23558: LD_INT 5
23560: ST_TO_ADDR
// end ;
23561: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23562: LD_EXP 92
23566: PUSH
23567: LD_INT 34
23569: PUSH
23570: LD_INT 81
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PPUSH
23577: CALL_OW 69
23581: AND
23582: IFFALSE 24043
23584: GO 23586
23586: DISABLE
23587: LD_INT 0
23589: PPUSH
23590: PPUSH
23591: PPUSH
23592: PPUSH
// begin enable ;
23593: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23594: LD_ADDR_VAR 0 1
23598: PUSH
23599: LD_INT 34
23601: PUSH
23602: LD_INT 81
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PPUSH
23609: CALL_OW 69
23613: PUSH
23614: FOR_IN
23615: IFFALSE 23687
// begin if not i in minersList then
23617: LD_VAR 0 1
23621: PUSH
23622: LD_EXP 93
23626: IN
23627: NOT
23628: IFFALSE 23685
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23630: LD_ADDR_EXP 93
23634: PUSH
23635: LD_EXP 93
23639: PPUSH
23640: LD_EXP 93
23644: PUSH
23645: LD_INT 1
23647: PLUS
23648: PPUSH
23649: LD_VAR 0 1
23653: PPUSH
23654: CALL_OW 1
23658: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23659: LD_ADDR_EXP 94
23663: PUSH
23664: LD_EXP 94
23668: PPUSH
23669: LD_EXP 94
23673: PUSH
23674: LD_INT 1
23676: PLUS
23677: PPUSH
23678: EMPTY
23679: PPUSH
23680: CALL_OW 1
23684: ST_TO_ADDR
// end end ;
23685: GO 23614
23687: POP
23688: POP
// for i := minerMinesList downto 1 do
23689: LD_ADDR_VAR 0 1
23693: PUSH
23694: DOUBLE
23695: LD_EXP 94
23699: INC
23700: ST_TO_ADDR
23701: LD_INT 1
23703: PUSH
23704: FOR_DOWNTO
23705: IFFALSE 24041
// begin if IsLive ( minersList [ i ] ) then
23707: LD_EXP 93
23711: PUSH
23712: LD_VAR 0 1
23716: ARRAY
23717: PPUSH
23718: CALL_OW 300
23722: IFFALSE 23750
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23724: LD_EXP 93
23728: PUSH
23729: LD_VAR 0 1
23733: ARRAY
23734: PPUSH
23735: LD_EXP 94
23739: PUSH
23740: LD_VAR 0 1
23744: ARRAY
23745: PPUSH
23746: CALL_OW 505
// if not minerMinesList [ i ] then
23750: LD_EXP 94
23754: PUSH
23755: LD_VAR 0 1
23759: ARRAY
23760: NOT
23761: IFFALSE 23765
// continue ;
23763: GO 23704
// for j := minerMinesList [ i ] downto 1 do
23765: LD_ADDR_VAR 0 2
23769: PUSH
23770: DOUBLE
23771: LD_EXP 94
23775: PUSH
23776: LD_VAR 0 1
23780: ARRAY
23781: INC
23782: ST_TO_ADDR
23783: LD_INT 1
23785: PUSH
23786: FOR_DOWNTO
23787: IFFALSE 24037
// begin side := GetSide ( minersList [ i ] ) ;
23789: LD_ADDR_VAR 0 3
23793: PUSH
23794: LD_EXP 93
23798: PUSH
23799: LD_VAR 0 1
23803: ARRAY
23804: PPUSH
23805: CALL_OW 255
23809: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23810: LD_ADDR_VAR 0 4
23814: PUSH
23815: LD_EXP 94
23819: PUSH
23820: LD_VAR 0 1
23824: ARRAY
23825: PUSH
23826: LD_VAR 0 2
23830: ARRAY
23831: PUSH
23832: LD_INT 1
23834: ARRAY
23835: PPUSH
23836: LD_EXP 94
23840: PUSH
23841: LD_VAR 0 1
23845: ARRAY
23846: PUSH
23847: LD_VAR 0 2
23851: ARRAY
23852: PUSH
23853: LD_INT 2
23855: ARRAY
23856: PPUSH
23857: CALL_OW 428
23861: ST_TO_ADDR
// if not tmp then
23862: LD_VAR 0 4
23866: NOT
23867: IFFALSE 23871
// continue ;
23869: GO 23786
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23871: LD_VAR 0 4
23875: PUSH
23876: LD_INT 81
23878: PUSH
23879: LD_VAR 0 3
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PPUSH
23888: CALL_OW 69
23892: IN
23893: PUSH
23894: LD_EXP 94
23898: PUSH
23899: LD_VAR 0 1
23903: ARRAY
23904: PUSH
23905: LD_VAR 0 2
23909: ARRAY
23910: PUSH
23911: LD_INT 1
23913: ARRAY
23914: PPUSH
23915: LD_EXP 94
23919: PUSH
23920: LD_VAR 0 1
23924: ARRAY
23925: PUSH
23926: LD_VAR 0 2
23930: ARRAY
23931: PUSH
23932: LD_INT 2
23934: ARRAY
23935: PPUSH
23936: CALL_OW 458
23940: AND
23941: IFFALSE 24035
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23943: LD_EXP 94
23947: PUSH
23948: LD_VAR 0 1
23952: ARRAY
23953: PUSH
23954: LD_VAR 0 2
23958: ARRAY
23959: PUSH
23960: LD_INT 1
23962: ARRAY
23963: PPUSH
23964: LD_EXP 94
23968: PUSH
23969: LD_VAR 0 1
23973: ARRAY
23974: PUSH
23975: LD_VAR 0 2
23979: ARRAY
23980: PUSH
23981: LD_INT 2
23983: ARRAY
23984: PPUSH
23985: LD_VAR 0 3
23989: PPUSH
23990: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23994: LD_ADDR_EXP 94
23998: PUSH
23999: LD_EXP 94
24003: PPUSH
24004: LD_VAR 0 1
24008: PPUSH
24009: LD_EXP 94
24013: PUSH
24014: LD_VAR 0 1
24018: ARRAY
24019: PPUSH
24020: LD_VAR 0 2
24024: PPUSH
24025: CALL_OW 3
24029: PPUSH
24030: CALL_OW 1
24034: ST_TO_ADDR
// end ; end ;
24035: GO 23786
24037: POP
24038: POP
// end ;
24039: GO 23704
24041: POP
24042: POP
// end ;
24043: PPOPN 4
24045: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24046: LD_INT 0
24048: PPUSH
24049: PPUSH
// result := false ;
24050: LD_ADDR_VAR 0 4
24054: PUSH
24055: LD_INT 0
24057: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24058: LD_VAR 0 1
24062: PPUSH
24063: CALL_OW 264
24067: PUSH
24068: LD_INT 81
24070: EQUAL
24071: NOT
24072: IFFALSE 24076
// exit ;
24074: GO 24316
// index := GetElementIndex ( minersList , unit ) ;
24076: LD_ADDR_VAR 0 5
24080: PUSH
24081: LD_EXP 93
24085: PPUSH
24086: LD_VAR 0 1
24090: PPUSH
24091: CALL 30496 0 2
24095: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24096: LD_EXP 94
24100: PUSH
24101: LD_VAR 0 5
24105: ARRAY
24106: PUSH
24107: LD_EXP 95
24111: GREATEREQUAL
24112: IFFALSE 24116
// exit ;
24114: GO 24316
// ComMoveXY ( unit , x , y ) ;
24116: LD_VAR 0 1
24120: PPUSH
24121: LD_VAR 0 2
24125: PPUSH
24126: LD_VAR 0 3
24130: PPUSH
24131: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24135: LD_INT 35
24137: PPUSH
24138: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24142: LD_VAR 0 1
24146: PPUSH
24147: LD_VAR 0 2
24151: PPUSH
24152: LD_VAR 0 3
24156: PPUSH
24157: CALL 61851 0 3
24161: NOT
24162: PUSH
24163: LD_VAR 0 1
24167: PPUSH
24168: CALL_OW 314
24172: AND
24173: IFFALSE 24177
// exit ;
24175: GO 24316
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24177: LD_VAR 0 2
24181: PPUSH
24182: LD_VAR 0 3
24186: PPUSH
24187: CALL_OW 428
24191: PUSH
24192: LD_VAR 0 1
24196: EQUAL
24197: PUSH
24198: LD_VAR 0 1
24202: PPUSH
24203: CALL_OW 314
24207: NOT
24208: AND
24209: IFFALSE 24135
// PlaySoundXY ( x , y , PlantMine ) ;
24211: LD_VAR 0 2
24215: PPUSH
24216: LD_VAR 0 3
24220: PPUSH
24221: LD_STRING PlantMine
24223: PPUSH
24224: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24228: LD_VAR 0 2
24232: PPUSH
24233: LD_VAR 0 3
24237: PPUSH
24238: LD_VAR 0 1
24242: PPUSH
24243: CALL_OW 255
24247: PPUSH
24248: LD_INT 0
24250: PPUSH
24251: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24255: LD_ADDR_EXP 94
24259: PUSH
24260: LD_EXP 94
24264: PPUSH
24265: LD_VAR 0 5
24269: PUSH
24270: LD_EXP 94
24274: PUSH
24275: LD_VAR 0 5
24279: ARRAY
24280: PUSH
24281: LD_INT 1
24283: PLUS
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PPUSH
24289: LD_VAR 0 2
24293: PUSH
24294: LD_VAR 0 3
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PPUSH
24303: CALL 30711 0 3
24307: ST_TO_ADDR
// result := true ;
24308: LD_ADDR_VAR 0 4
24312: PUSH
24313: LD_INT 1
24315: ST_TO_ADDR
// end ;
24316: LD_VAR 0 4
24320: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24321: LD_INT 0
24323: PPUSH
24324: PPUSH
24325: PPUSH
// if not unit in minersList then
24326: LD_VAR 0 1
24330: PUSH
24331: LD_EXP 93
24335: IN
24336: NOT
24337: IFFALSE 24341
// exit ;
24339: GO 24733
// index := GetElementIndex ( minersList , unit ) ;
24341: LD_ADDR_VAR 0 6
24345: PUSH
24346: LD_EXP 93
24350: PPUSH
24351: LD_VAR 0 1
24355: PPUSH
24356: CALL 30496 0 2
24360: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24361: LD_ADDR_VAR 0 5
24365: PUSH
24366: DOUBLE
24367: LD_EXP 94
24371: PUSH
24372: LD_VAR 0 6
24376: ARRAY
24377: INC
24378: ST_TO_ADDR
24379: LD_INT 1
24381: PUSH
24382: FOR_DOWNTO
24383: IFFALSE 24544
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24385: LD_EXP 94
24389: PUSH
24390: LD_VAR 0 6
24394: ARRAY
24395: PUSH
24396: LD_VAR 0 5
24400: ARRAY
24401: PUSH
24402: LD_INT 1
24404: ARRAY
24405: PUSH
24406: LD_VAR 0 2
24410: EQUAL
24411: PUSH
24412: LD_EXP 94
24416: PUSH
24417: LD_VAR 0 6
24421: ARRAY
24422: PUSH
24423: LD_VAR 0 5
24427: ARRAY
24428: PUSH
24429: LD_INT 2
24431: ARRAY
24432: PUSH
24433: LD_VAR 0 3
24437: EQUAL
24438: AND
24439: IFFALSE 24542
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24441: LD_EXP 94
24445: PUSH
24446: LD_VAR 0 6
24450: ARRAY
24451: PUSH
24452: LD_VAR 0 5
24456: ARRAY
24457: PUSH
24458: LD_INT 1
24460: ARRAY
24461: PPUSH
24462: LD_EXP 94
24466: PUSH
24467: LD_VAR 0 6
24471: ARRAY
24472: PUSH
24473: LD_VAR 0 5
24477: ARRAY
24478: PUSH
24479: LD_INT 2
24481: ARRAY
24482: PPUSH
24483: LD_VAR 0 1
24487: PPUSH
24488: CALL_OW 255
24492: PPUSH
24493: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24497: LD_ADDR_EXP 94
24501: PUSH
24502: LD_EXP 94
24506: PPUSH
24507: LD_VAR 0 6
24511: PPUSH
24512: LD_EXP 94
24516: PUSH
24517: LD_VAR 0 6
24521: ARRAY
24522: PPUSH
24523: LD_VAR 0 5
24527: PPUSH
24528: CALL_OW 3
24532: PPUSH
24533: CALL_OW 1
24537: ST_TO_ADDR
// exit ;
24538: POP
24539: POP
24540: GO 24733
// end ; end ;
24542: GO 24382
24544: POP
24545: POP
// for i := minerMinesList [ index ] downto 1 do
24546: LD_ADDR_VAR 0 5
24550: PUSH
24551: DOUBLE
24552: LD_EXP 94
24556: PUSH
24557: LD_VAR 0 6
24561: ARRAY
24562: INC
24563: ST_TO_ADDR
24564: LD_INT 1
24566: PUSH
24567: FOR_DOWNTO
24568: IFFALSE 24731
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24570: LD_EXP 94
24574: PUSH
24575: LD_VAR 0 6
24579: ARRAY
24580: PUSH
24581: LD_VAR 0 5
24585: ARRAY
24586: PUSH
24587: LD_INT 1
24589: ARRAY
24590: PPUSH
24591: LD_EXP 94
24595: PUSH
24596: LD_VAR 0 6
24600: ARRAY
24601: PUSH
24602: LD_VAR 0 5
24606: ARRAY
24607: PUSH
24608: LD_INT 2
24610: ARRAY
24611: PPUSH
24612: LD_VAR 0 2
24616: PPUSH
24617: LD_VAR 0 3
24621: PPUSH
24622: CALL_OW 298
24626: PUSH
24627: LD_INT 6
24629: LESS
24630: IFFALSE 24729
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24632: LD_EXP 94
24636: PUSH
24637: LD_VAR 0 6
24641: ARRAY
24642: PUSH
24643: LD_VAR 0 5
24647: ARRAY
24648: PUSH
24649: LD_INT 1
24651: ARRAY
24652: PPUSH
24653: LD_EXP 94
24657: PUSH
24658: LD_VAR 0 6
24662: ARRAY
24663: PUSH
24664: LD_VAR 0 5
24668: ARRAY
24669: PUSH
24670: LD_INT 2
24672: ARRAY
24673: PPUSH
24674: LD_VAR 0 1
24678: PPUSH
24679: CALL_OW 255
24683: PPUSH
24684: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24688: LD_ADDR_EXP 94
24692: PUSH
24693: LD_EXP 94
24697: PPUSH
24698: LD_VAR 0 6
24702: PPUSH
24703: LD_EXP 94
24707: PUSH
24708: LD_VAR 0 6
24712: ARRAY
24713: PPUSH
24714: LD_VAR 0 5
24718: PPUSH
24719: CALL_OW 3
24723: PPUSH
24724: CALL_OW 1
24728: ST_TO_ADDR
// end ; end ;
24729: GO 24567
24731: POP
24732: POP
// end ;
24733: LD_VAR 0 4
24737: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24738: LD_INT 0
24740: PPUSH
24741: PPUSH
24742: PPUSH
24743: PPUSH
24744: PPUSH
24745: PPUSH
24746: PPUSH
24747: PPUSH
24748: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24749: LD_VAR 0 1
24753: PPUSH
24754: CALL_OW 264
24758: PUSH
24759: LD_INT 81
24761: EQUAL
24762: NOT
24763: PUSH
24764: LD_VAR 0 1
24768: PUSH
24769: LD_EXP 93
24773: IN
24774: NOT
24775: OR
24776: IFFALSE 24780
// exit ;
24778: GO 25102
// index := GetElementIndex ( minersList , unit ) ;
24780: LD_ADDR_VAR 0 6
24784: PUSH
24785: LD_EXP 93
24789: PPUSH
24790: LD_VAR 0 1
24794: PPUSH
24795: CALL 30496 0 2
24799: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24800: LD_ADDR_VAR 0 8
24804: PUSH
24805: LD_EXP 95
24809: PUSH
24810: LD_EXP 94
24814: PUSH
24815: LD_VAR 0 6
24819: ARRAY
24820: MINUS
24821: ST_TO_ADDR
// if not minesFreeAmount then
24822: LD_VAR 0 8
24826: NOT
24827: IFFALSE 24831
// exit ;
24829: GO 25102
// tmp := [ ] ;
24831: LD_ADDR_VAR 0 7
24835: PUSH
24836: EMPTY
24837: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24838: LD_ADDR_VAR 0 5
24842: PUSH
24843: DOUBLE
24844: LD_INT 1
24846: DEC
24847: ST_TO_ADDR
24848: LD_VAR 0 8
24852: PUSH
24853: FOR_TO
24854: IFFALSE 25049
// begin _d := rand ( 0 , 5 ) ;
24856: LD_ADDR_VAR 0 11
24860: PUSH
24861: LD_INT 0
24863: PPUSH
24864: LD_INT 5
24866: PPUSH
24867: CALL_OW 12
24871: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24872: LD_ADDR_VAR 0 12
24876: PUSH
24877: LD_INT 2
24879: PPUSH
24880: LD_INT 6
24882: PPUSH
24883: CALL_OW 12
24887: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24888: LD_ADDR_VAR 0 9
24892: PUSH
24893: LD_VAR 0 2
24897: PPUSH
24898: LD_VAR 0 11
24902: PPUSH
24903: LD_VAR 0 12
24907: PPUSH
24908: CALL_OW 272
24912: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24913: LD_ADDR_VAR 0 10
24917: PUSH
24918: LD_VAR 0 3
24922: PPUSH
24923: LD_VAR 0 11
24927: PPUSH
24928: LD_VAR 0 12
24932: PPUSH
24933: CALL_OW 273
24937: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24938: LD_VAR 0 9
24942: PPUSH
24943: LD_VAR 0 10
24947: PPUSH
24948: CALL_OW 488
24952: PUSH
24953: LD_VAR 0 9
24957: PUSH
24958: LD_VAR 0 10
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_VAR 0 7
24971: IN
24972: NOT
24973: AND
24974: PUSH
24975: LD_VAR 0 9
24979: PPUSH
24980: LD_VAR 0 10
24984: PPUSH
24985: CALL_OW 458
24989: NOT
24990: AND
24991: IFFALSE 25033
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24993: LD_ADDR_VAR 0 7
24997: PUSH
24998: LD_VAR 0 7
25002: PPUSH
25003: LD_VAR 0 7
25007: PUSH
25008: LD_INT 1
25010: PLUS
25011: PPUSH
25012: LD_VAR 0 9
25016: PUSH
25017: LD_VAR 0 10
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PPUSH
25026: CALL_OW 1
25030: ST_TO_ADDR
25031: GO 25047
// i := i - 1 ;
25033: LD_ADDR_VAR 0 5
25037: PUSH
25038: LD_VAR 0 5
25042: PUSH
25043: LD_INT 1
25045: MINUS
25046: ST_TO_ADDR
// end ;
25047: GO 24853
25049: POP
25050: POP
// for i in tmp do
25051: LD_ADDR_VAR 0 5
25055: PUSH
25056: LD_VAR 0 7
25060: PUSH
25061: FOR_IN
25062: IFFALSE 25100
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25064: LD_VAR 0 1
25068: PPUSH
25069: LD_VAR 0 5
25073: PUSH
25074: LD_INT 1
25076: ARRAY
25077: PPUSH
25078: LD_VAR 0 5
25082: PUSH
25083: LD_INT 2
25085: ARRAY
25086: PPUSH
25087: CALL 24046 0 3
25091: NOT
25092: IFFALSE 25098
// exit ;
25094: POP
25095: POP
25096: GO 25102
25098: GO 25061
25100: POP
25101: POP
// end ;
25102: LD_VAR 0 4
25106: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25107: LD_INT 0
25109: PPUSH
25110: PPUSH
25111: PPUSH
25112: PPUSH
25113: PPUSH
25114: PPUSH
25115: PPUSH
// if not GetClass ( unit ) = class_sniper then
25116: LD_VAR 0 1
25120: PPUSH
25121: CALL_OW 257
25125: PUSH
25126: LD_INT 5
25128: EQUAL
25129: NOT
25130: IFFALSE 25134
// exit ;
25132: GO 25522
// dist := 8 ;
25134: LD_ADDR_VAR 0 5
25138: PUSH
25139: LD_INT 8
25141: ST_TO_ADDR
// viewRange := 12 ;
25142: LD_ADDR_VAR 0 7
25146: PUSH
25147: LD_INT 12
25149: ST_TO_ADDR
// side := GetSide ( unit ) ;
25150: LD_ADDR_VAR 0 6
25154: PUSH
25155: LD_VAR 0 1
25159: PPUSH
25160: CALL_OW 255
25164: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25165: LD_INT 61
25167: PPUSH
25168: LD_VAR 0 6
25172: PPUSH
25173: CALL_OW 321
25177: PUSH
25178: LD_INT 2
25180: EQUAL
25181: IFFALSE 25191
// viewRange := 16 ;
25183: LD_ADDR_VAR 0 7
25187: PUSH
25188: LD_INT 16
25190: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25191: LD_VAR 0 1
25195: PPUSH
25196: LD_VAR 0 2
25200: PPUSH
25201: LD_VAR 0 3
25205: PPUSH
25206: CALL_OW 297
25210: PUSH
25211: LD_VAR 0 5
25215: GREATER
25216: IFFALSE 25295
// begin ComMoveXY ( unit , x , y ) ;
25218: LD_VAR 0 1
25222: PPUSH
25223: LD_VAR 0 2
25227: PPUSH
25228: LD_VAR 0 3
25232: PPUSH
25233: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25237: LD_INT 35
25239: PPUSH
25240: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25244: LD_VAR 0 1
25248: PPUSH
25249: LD_VAR 0 2
25253: PPUSH
25254: LD_VAR 0 3
25258: PPUSH
25259: CALL 61851 0 3
25263: NOT
25264: IFFALSE 25268
// exit ;
25266: GO 25522
// until GetDistUnitXY ( unit , x , y ) < dist ;
25268: LD_VAR 0 1
25272: PPUSH
25273: LD_VAR 0 2
25277: PPUSH
25278: LD_VAR 0 3
25282: PPUSH
25283: CALL_OW 297
25287: PUSH
25288: LD_VAR 0 5
25292: LESS
25293: IFFALSE 25237
// end ; ComTurnXY ( unit , x , y ) ;
25295: LD_VAR 0 1
25299: PPUSH
25300: LD_VAR 0 2
25304: PPUSH
25305: LD_VAR 0 3
25309: PPUSH
25310: CALL_OW 118
// wait ( 5 ) ;
25314: LD_INT 5
25316: PPUSH
25317: CALL_OW 67
// _d := GetDir ( unit ) ;
25321: LD_ADDR_VAR 0 10
25325: PUSH
25326: LD_VAR 0 1
25330: PPUSH
25331: CALL_OW 254
25335: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25336: LD_ADDR_VAR 0 8
25340: PUSH
25341: LD_VAR 0 1
25345: PPUSH
25346: CALL_OW 250
25350: PPUSH
25351: LD_VAR 0 10
25355: PPUSH
25356: LD_VAR 0 5
25360: PPUSH
25361: CALL_OW 272
25365: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25366: LD_ADDR_VAR 0 9
25370: PUSH
25371: LD_VAR 0 1
25375: PPUSH
25376: CALL_OW 251
25380: PPUSH
25381: LD_VAR 0 10
25385: PPUSH
25386: LD_VAR 0 5
25390: PPUSH
25391: CALL_OW 273
25395: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25396: LD_VAR 0 8
25400: PPUSH
25401: LD_VAR 0 9
25405: PPUSH
25406: CALL_OW 488
25410: NOT
25411: IFFALSE 25415
// exit ;
25413: GO 25522
// ComAnimCustom ( unit , 1 ) ;
25415: LD_VAR 0 1
25419: PPUSH
25420: LD_INT 1
25422: PPUSH
25423: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25427: LD_VAR 0 8
25431: PPUSH
25432: LD_VAR 0 9
25436: PPUSH
25437: LD_VAR 0 6
25441: PPUSH
25442: LD_VAR 0 7
25446: PPUSH
25447: CALL_OW 330
// repeat wait ( 1 ) ;
25451: LD_INT 1
25453: PPUSH
25454: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25458: LD_VAR 0 1
25462: PPUSH
25463: CALL_OW 316
25467: PUSH
25468: LD_VAR 0 1
25472: PPUSH
25473: CALL_OW 314
25477: OR
25478: PUSH
25479: LD_VAR 0 1
25483: PPUSH
25484: CALL_OW 302
25488: NOT
25489: OR
25490: PUSH
25491: LD_VAR 0 1
25495: PPUSH
25496: CALL_OW 301
25500: OR
25501: IFFALSE 25451
// RemoveSeeing ( _x , _y , side ) ;
25503: LD_VAR 0 8
25507: PPUSH
25508: LD_VAR 0 9
25512: PPUSH
25513: LD_VAR 0 6
25517: PPUSH
25518: CALL_OW 331
// end ; end_of_file
25522: LD_VAR 0 4
25526: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25527: LD_VAR 0 1
25531: PUSH
25532: LD_INT 200
25534: DOUBLE
25535: GREATEREQUAL
25536: IFFALSE 25544
25538: LD_INT 299
25540: DOUBLE
25541: LESSEQUAL
25542: IFTRUE 25546
25544: GO 25578
25546: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25547: LD_VAR 0 1
25551: PPUSH
25552: LD_VAR 0 2
25556: PPUSH
25557: LD_VAR 0 3
25561: PPUSH
25562: LD_VAR 0 4
25566: PPUSH
25567: LD_VAR 0 5
25571: PPUSH
25572: CALL 21614 0 5
25576: GO 25655
25578: LD_INT 300
25580: DOUBLE
25581: GREATEREQUAL
25582: IFFALSE 25590
25584: LD_INT 399
25586: DOUBLE
25587: LESSEQUAL
25588: IFTRUE 25592
25590: GO 25654
25592: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25593: LD_VAR 0 1
25597: PPUSH
25598: LD_VAR 0 2
25602: PPUSH
25603: LD_VAR 0 3
25607: PPUSH
25608: LD_VAR 0 4
25612: PPUSH
25613: LD_VAR 0 5
25617: PPUSH
25618: LD_VAR 0 6
25622: PPUSH
25623: LD_VAR 0 7
25627: PPUSH
25628: LD_VAR 0 8
25632: PPUSH
25633: LD_VAR 0 9
25637: PPUSH
25638: LD_VAR 0 10
25642: PPUSH
25643: LD_VAR 0 11
25647: PPUSH
25648: CALL 17947 0 11
25652: GO 25655
25654: POP
// end ;
25655: PPOPN 11
25657: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25658: LD_VAR 0 1
25662: PPUSH
25663: LD_VAR 0 2
25667: PPUSH
25668: LD_VAR 0 3
25672: PPUSH
25673: LD_VAR 0 4
25677: PPUSH
25678: LD_VAR 0 5
25682: PPUSH
25683: CALL 21350 0 5
// end ; end_of_file
25687: PPOPN 5
25689: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
25690: LD_VAR 0 1
25694: PPUSH
25695: LD_VAR 0 2
25699: PPUSH
25700: LD_VAR 0 3
25704: PPUSH
25705: LD_VAR 0 4
25709: PPUSH
25710: LD_VAR 0 5
25714: PPUSH
25715: LD_VAR 0 6
25719: PPUSH
25720: CALL 5599 0 6
// end ;
25724: PPOPN 6
25726: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
25727: LD_INT 0
25729: PPUSH
// begin if not units then
25730: LD_VAR 0 1
25734: NOT
25735: IFFALSE 25739
// exit ;
25737: GO 25739
// end ;
25739: PPOPN 7
25741: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
25742: CALL 5503 0 0
// end ; end_of_file end_of_file
25746: PPOPN 1
25748: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25749: LD_INT 0
25751: PPUSH
25752: PPUSH
// if exist_mode then
25753: LD_VAR 0 2
25757: IFFALSE 25782
// unit := CreateCharacter ( prefix & ident ) else
25759: LD_ADDR_VAR 0 5
25763: PUSH
25764: LD_VAR 0 3
25768: PUSH
25769: LD_VAR 0 1
25773: STR
25774: PPUSH
25775: CALL_OW 34
25779: ST_TO_ADDR
25780: GO 25797
// unit := NewCharacter ( ident ) ;
25782: LD_ADDR_VAR 0 5
25786: PUSH
25787: LD_VAR 0 1
25791: PPUSH
25792: CALL_OW 25
25796: ST_TO_ADDR
// result := unit ;
25797: LD_ADDR_VAR 0 4
25801: PUSH
25802: LD_VAR 0 5
25806: ST_TO_ADDR
// end ;
25807: LD_VAR 0 4
25811: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25812: LD_INT 0
25814: PPUSH
25815: PPUSH
// if not side or not nation then
25816: LD_VAR 0 1
25820: NOT
25821: PUSH
25822: LD_VAR 0 2
25826: NOT
25827: OR
25828: IFFALSE 25832
// exit ;
25830: GO 26600
// case nation of nation_american :
25832: LD_VAR 0 2
25836: PUSH
25837: LD_INT 1
25839: DOUBLE
25840: EQUAL
25841: IFTRUE 25845
25843: GO 26059
25845: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25846: LD_ADDR_VAR 0 4
25850: PUSH
25851: LD_INT 35
25853: PUSH
25854: LD_INT 45
25856: PUSH
25857: LD_INT 46
25859: PUSH
25860: LD_INT 47
25862: PUSH
25863: LD_INT 82
25865: PUSH
25866: LD_INT 83
25868: PUSH
25869: LD_INT 84
25871: PUSH
25872: LD_INT 85
25874: PUSH
25875: LD_INT 86
25877: PUSH
25878: LD_INT 1
25880: PUSH
25881: LD_INT 2
25883: PUSH
25884: LD_INT 6
25886: PUSH
25887: LD_INT 15
25889: PUSH
25890: LD_INT 16
25892: PUSH
25893: LD_INT 7
25895: PUSH
25896: LD_INT 12
25898: PUSH
25899: LD_INT 13
25901: PUSH
25902: LD_INT 10
25904: PUSH
25905: LD_INT 14
25907: PUSH
25908: LD_INT 20
25910: PUSH
25911: LD_INT 21
25913: PUSH
25914: LD_INT 22
25916: PUSH
25917: LD_INT 25
25919: PUSH
25920: LD_INT 32
25922: PUSH
25923: LD_INT 27
25925: PUSH
25926: LD_INT 36
25928: PUSH
25929: LD_INT 69
25931: PUSH
25932: LD_INT 39
25934: PUSH
25935: LD_INT 34
25937: PUSH
25938: LD_INT 40
25940: PUSH
25941: LD_INT 48
25943: PUSH
25944: LD_INT 49
25946: PUSH
25947: LD_INT 50
25949: PUSH
25950: LD_INT 51
25952: PUSH
25953: LD_INT 52
25955: PUSH
25956: LD_INT 53
25958: PUSH
25959: LD_INT 54
25961: PUSH
25962: LD_INT 55
25964: PUSH
25965: LD_INT 56
25967: PUSH
25968: LD_INT 57
25970: PUSH
25971: LD_INT 58
25973: PUSH
25974: LD_INT 59
25976: PUSH
25977: LD_INT 60
25979: PUSH
25980: LD_INT 61
25982: PUSH
25983: LD_INT 62
25985: PUSH
25986: LD_INT 80
25988: PUSH
25989: LD_INT 82
25991: PUSH
25992: LD_INT 83
25994: PUSH
25995: LD_INT 84
25997: PUSH
25998: LD_INT 85
26000: PUSH
26001: LD_INT 86
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: ST_TO_ADDR
26057: GO 26524
26059: LD_INT 2
26061: DOUBLE
26062: EQUAL
26063: IFTRUE 26067
26065: GO 26293
26067: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26068: LD_ADDR_VAR 0 4
26072: PUSH
26073: LD_INT 35
26075: PUSH
26076: LD_INT 45
26078: PUSH
26079: LD_INT 46
26081: PUSH
26082: LD_INT 47
26084: PUSH
26085: LD_INT 82
26087: PUSH
26088: LD_INT 83
26090: PUSH
26091: LD_INT 84
26093: PUSH
26094: LD_INT 85
26096: PUSH
26097: LD_INT 87
26099: PUSH
26100: LD_INT 70
26102: PUSH
26103: LD_INT 1
26105: PUSH
26106: LD_INT 11
26108: PUSH
26109: LD_INT 3
26111: PUSH
26112: LD_INT 4
26114: PUSH
26115: LD_INT 5
26117: PUSH
26118: LD_INT 6
26120: PUSH
26121: LD_INT 15
26123: PUSH
26124: LD_INT 18
26126: PUSH
26127: LD_INT 7
26129: PUSH
26130: LD_INT 17
26132: PUSH
26133: LD_INT 8
26135: PUSH
26136: LD_INT 20
26138: PUSH
26139: LD_INT 21
26141: PUSH
26142: LD_INT 22
26144: PUSH
26145: LD_INT 72
26147: PUSH
26148: LD_INT 26
26150: PUSH
26151: LD_INT 69
26153: PUSH
26154: LD_INT 39
26156: PUSH
26157: LD_INT 40
26159: PUSH
26160: LD_INT 41
26162: PUSH
26163: LD_INT 42
26165: PUSH
26166: LD_INT 43
26168: PUSH
26169: LD_INT 48
26171: PUSH
26172: LD_INT 49
26174: PUSH
26175: LD_INT 50
26177: PUSH
26178: LD_INT 51
26180: PUSH
26181: LD_INT 52
26183: PUSH
26184: LD_INT 53
26186: PUSH
26187: LD_INT 54
26189: PUSH
26190: LD_INT 55
26192: PUSH
26193: LD_INT 56
26195: PUSH
26196: LD_INT 60
26198: PUSH
26199: LD_INT 61
26201: PUSH
26202: LD_INT 62
26204: PUSH
26205: LD_INT 66
26207: PUSH
26208: LD_INT 67
26210: PUSH
26211: LD_INT 68
26213: PUSH
26214: LD_INT 81
26216: PUSH
26217: LD_INT 82
26219: PUSH
26220: LD_INT 83
26222: PUSH
26223: LD_INT 84
26225: PUSH
26226: LD_INT 85
26228: PUSH
26229: LD_INT 87
26231: PUSH
26232: LD_INT 88
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: ST_TO_ADDR
26291: GO 26524
26293: LD_INT 3
26295: DOUBLE
26296: EQUAL
26297: IFTRUE 26301
26299: GO 26523
26301: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26302: LD_ADDR_VAR 0 4
26306: PUSH
26307: LD_INT 46
26309: PUSH
26310: LD_INT 47
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: LD_INT 2
26318: PUSH
26319: LD_INT 82
26321: PUSH
26322: LD_INT 83
26324: PUSH
26325: LD_INT 84
26327: PUSH
26328: LD_INT 85
26330: PUSH
26331: LD_INT 86
26333: PUSH
26334: LD_INT 11
26336: PUSH
26337: LD_INT 9
26339: PUSH
26340: LD_INT 20
26342: PUSH
26343: LD_INT 19
26345: PUSH
26346: LD_INT 21
26348: PUSH
26349: LD_INT 24
26351: PUSH
26352: LD_INT 22
26354: PUSH
26355: LD_INT 25
26357: PUSH
26358: LD_INT 28
26360: PUSH
26361: LD_INT 29
26363: PUSH
26364: LD_INT 30
26366: PUSH
26367: LD_INT 31
26369: PUSH
26370: LD_INT 37
26372: PUSH
26373: LD_INT 38
26375: PUSH
26376: LD_INT 32
26378: PUSH
26379: LD_INT 27
26381: PUSH
26382: LD_INT 33
26384: PUSH
26385: LD_INT 69
26387: PUSH
26388: LD_INT 39
26390: PUSH
26391: LD_INT 34
26393: PUSH
26394: LD_INT 40
26396: PUSH
26397: LD_INT 71
26399: PUSH
26400: LD_INT 23
26402: PUSH
26403: LD_INT 44
26405: PUSH
26406: LD_INT 48
26408: PUSH
26409: LD_INT 49
26411: PUSH
26412: LD_INT 50
26414: PUSH
26415: LD_INT 51
26417: PUSH
26418: LD_INT 52
26420: PUSH
26421: LD_INT 53
26423: PUSH
26424: LD_INT 54
26426: PUSH
26427: LD_INT 55
26429: PUSH
26430: LD_INT 56
26432: PUSH
26433: LD_INT 57
26435: PUSH
26436: LD_INT 58
26438: PUSH
26439: LD_INT 59
26441: PUSH
26442: LD_INT 63
26444: PUSH
26445: LD_INT 64
26447: PUSH
26448: LD_INT 65
26450: PUSH
26451: LD_INT 82
26453: PUSH
26454: LD_INT 83
26456: PUSH
26457: LD_INT 84
26459: PUSH
26460: LD_INT 85
26462: PUSH
26463: LD_INT 86
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: ST_TO_ADDR
26521: GO 26524
26523: POP
// if state > - 1 and state < 3 then
26524: LD_VAR 0 3
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: GREATER
26533: PUSH
26534: LD_VAR 0 3
26538: PUSH
26539: LD_INT 3
26541: LESS
26542: AND
26543: IFFALSE 26600
// for i in result do
26545: LD_ADDR_VAR 0 5
26549: PUSH
26550: LD_VAR 0 4
26554: PUSH
26555: FOR_IN
26556: IFFALSE 26598
// if GetTech ( i , side ) <> state then
26558: LD_VAR 0 5
26562: PPUSH
26563: LD_VAR 0 1
26567: PPUSH
26568: CALL_OW 321
26572: PUSH
26573: LD_VAR 0 3
26577: NONEQUAL
26578: IFFALSE 26596
// result := result diff i ;
26580: LD_ADDR_VAR 0 4
26584: PUSH
26585: LD_VAR 0 4
26589: PUSH
26590: LD_VAR 0 5
26594: DIFF
26595: ST_TO_ADDR
26596: GO 26555
26598: POP
26599: POP
// end ;
26600: LD_VAR 0 4
26604: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26605: LD_INT 0
26607: PPUSH
26608: PPUSH
26609: PPUSH
// result := true ;
26610: LD_ADDR_VAR 0 3
26614: PUSH
26615: LD_INT 1
26617: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26618: LD_ADDR_VAR 0 5
26622: PUSH
26623: LD_VAR 0 2
26627: PPUSH
26628: CALL_OW 480
26632: ST_TO_ADDR
// if not tmp then
26633: LD_VAR 0 5
26637: NOT
26638: IFFALSE 26642
// exit ;
26640: GO 26691
// for i in tmp do
26642: LD_ADDR_VAR 0 4
26646: PUSH
26647: LD_VAR 0 5
26651: PUSH
26652: FOR_IN
26653: IFFALSE 26689
// if GetTech ( i , side ) <> state_researched then
26655: LD_VAR 0 4
26659: PPUSH
26660: LD_VAR 0 1
26664: PPUSH
26665: CALL_OW 321
26669: PUSH
26670: LD_INT 2
26672: NONEQUAL
26673: IFFALSE 26687
// begin result := false ;
26675: LD_ADDR_VAR 0 3
26679: PUSH
26680: LD_INT 0
26682: ST_TO_ADDR
// exit ;
26683: POP
26684: POP
26685: GO 26691
// end ;
26687: GO 26652
26689: POP
26690: POP
// end ;
26691: LD_VAR 0 3
26695: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26696: LD_INT 0
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26711: LD_VAR 0 1
26715: NOT
26716: PUSH
26717: LD_VAR 0 1
26721: PPUSH
26722: CALL_OW 257
26726: PUSH
26727: LD_INT 9
26729: NONEQUAL
26730: OR
26731: IFFALSE 26735
// exit ;
26733: GO 27308
// side := GetSide ( unit ) ;
26735: LD_ADDR_VAR 0 9
26739: PUSH
26740: LD_VAR 0 1
26744: PPUSH
26745: CALL_OW 255
26749: ST_TO_ADDR
// tech_space := tech_spacanom ;
26750: LD_ADDR_VAR 0 12
26754: PUSH
26755: LD_INT 29
26757: ST_TO_ADDR
// tech_time := tech_taurad ;
26758: LD_ADDR_VAR 0 13
26762: PUSH
26763: LD_INT 28
26765: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26766: LD_ADDR_VAR 0 11
26770: PUSH
26771: LD_VAR 0 1
26775: PPUSH
26776: CALL_OW 310
26780: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26781: LD_VAR 0 11
26785: PPUSH
26786: CALL_OW 247
26790: PUSH
26791: LD_INT 2
26793: EQUAL
26794: IFFALSE 26798
// exit ;
26796: GO 27308
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26798: LD_ADDR_VAR 0 8
26802: PUSH
26803: LD_INT 81
26805: PUSH
26806: LD_VAR 0 9
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 3
26817: PUSH
26818: LD_INT 21
26820: PUSH
26821: LD_INT 3
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PPUSH
26836: CALL_OW 69
26840: ST_TO_ADDR
// if not tmp then
26841: LD_VAR 0 8
26845: NOT
26846: IFFALSE 26850
// exit ;
26848: GO 27308
// if in_unit then
26850: LD_VAR 0 11
26854: IFFALSE 26878
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26856: LD_ADDR_VAR 0 10
26860: PUSH
26861: LD_VAR 0 8
26865: PPUSH
26866: LD_VAR 0 11
26870: PPUSH
26871: CALL_OW 74
26875: ST_TO_ADDR
26876: GO 26898
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26878: LD_ADDR_VAR 0 10
26882: PUSH
26883: LD_VAR 0 8
26887: PPUSH
26888: LD_VAR 0 1
26892: PPUSH
26893: CALL_OW 74
26897: ST_TO_ADDR
// if not enemy then
26898: LD_VAR 0 10
26902: NOT
26903: IFFALSE 26907
// exit ;
26905: GO 27308
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26907: LD_VAR 0 11
26911: PUSH
26912: LD_VAR 0 11
26916: PPUSH
26917: LD_VAR 0 10
26921: PPUSH
26922: CALL_OW 296
26926: PUSH
26927: LD_INT 13
26929: GREATER
26930: AND
26931: PUSH
26932: LD_VAR 0 1
26936: PPUSH
26937: LD_VAR 0 10
26941: PPUSH
26942: CALL_OW 296
26946: PUSH
26947: LD_INT 12
26949: GREATER
26950: OR
26951: IFFALSE 26955
// exit ;
26953: GO 27308
// missile := [ 1 ] ;
26955: LD_ADDR_VAR 0 14
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: EMPTY
26964: LIST
26965: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26966: LD_VAR 0 9
26970: PPUSH
26971: LD_VAR 0 12
26975: PPUSH
26976: CALL_OW 325
26980: IFFALSE 27009
// missile := Replace ( missile , missile + 1 , 2 ) ;
26982: LD_ADDR_VAR 0 14
26986: PUSH
26987: LD_VAR 0 14
26991: PPUSH
26992: LD_VAR 0 14
26996: PUSH
26997: LD_INT 1
26999: PLUS
27000: PPUSH
27001: LD_INT 2
27003: PPUSH
27004: CALL_OW 1
27008: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27009: LD_VAR 0 9
27013: PPUSH
27014: LD_VAR 0 13
27018: PPUSH
27019: CALL_OW 325
27023: PUSH
27024: LD_VAR 0 10
27028: PPUSH
27029: CALL_OW 255
27033: PPUSH
27034: LD_VAR 0 13
27038: PPUSH
27039: CALL_OW 325
27043: NOT
27044: AND
27045: IFFALSE 27074
// missile := Replace ( missile , missile + 1 , 3 ) ;
27047: LD_ADDR_VAR 0 14
27051: PUSH
27052: LD_VAR 0 14
27056: PPUSH
27057: LD_VAR 0 14
27061: PUSH
27062: LD_INT 1
27064: PLUS
27065: PPUSH
27066: LD_INT 3
27068: PPUSH
27069: CALL_OW 1
27073: ST_TO_ADDR
// if missile < 2 then
27074: LD_VAR 0 14
27078: PUSH
27079: LD_INT 2
27081: LESS
27082: IFFALSE 27086
// exit ;
27084: GO 27308
// x := GetX ( enemy ) ;
27086: LD_ADDR_VAR 0 4
27090: PUSH
27091: LD_VAR 0 10
27095: PPUSH
27096: CALL_OW 250
27100: ST_TO_ADDR
// y := GetY ( enemy ) ;
27101: LD_ADDR_VAR 0 5
27105: PUSH
27106: LD_VAR 0 10
27110: PPUSH
27111: CALL_OW 251
27115: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27116: LD_ADDR_VAR 0 6
27120: PUSH
27121: LD_VAR 0 4
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PPUSH
27130: LD_INT 1
27132: PPUSH
27133: CALL_OW 12
27137: PLUS
27138: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27139: LD_ADDR_VAR 0 7
27143: PUSH
27144: LD_VAR 0 5
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PPUSH
27153: LD_INT 1
27155: PPUSH
27156: CALL_OW 12
27160: PLUS
27161: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27162: LD_VAR 0 6
27166: PPUSH
27167: LD_VAR 0 7
27171: PPUSH
27172: CALL_OW 488
27176: NOT
27177: IFFALSE 27199
// begin _x := x ;
27179: LD_ADDR_VAR 0 6
27183: PUSH
27184: LD_VAR 0 4
27188: ST_TO_ADDR
// _y := y ;
27189: LD_ADDR_VAR 0 7
27193: PUSH
27194: LD_VAR 0 5
27198: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27199: LD_ADDR_VAR 0 3
27203: PUSH
27204: LD_INT 1
27206: PPUSH
27207: LD_VAR 0 14
27211: PPUSH
27212: CALL_OW 12
27216: ST_TO_ADDR
// case i of 1 :
27217: LD_VAR 0 3
27221: PUSH
27222: LD_INT 1
27224: DOUBLE
27225: EQUAL
27226: IFTRUE 27230
27228: GO 27247
27230: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27231: LD_VAR 0 1
27235: PPUSH
27236: LD_VAR 0 10
27240: PPUSH
27241: CALL_OW 115
27245: GO 27308
27247: LD_INT 2
27249: DOUBLE
27250: EQUAL
27251: IFTRUE 27255
27253: GO 27277
27255: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27256: LD_VAR 0 1
27260: PPUSH
27261: LD_VAR 0 6
27265: PPUSH
27266: LD_VAR 0 7
27270: PPUSH
27271: CALL_OW 153
27275: GO 27308
27277: LD_INT 3
27279: DOUBLE
27280: EQUAL
27281: IFTRUE 27285
27283: GO 27307
27285: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27286: LD_VAR 0 1
27290: PPUSH
27291: LD_VAR 0 6
27295: PPUSH
27296: LD_VAR 0 7
27300: PPUSH
27301: CALL_OW 154
27305: GO 27308
27307: POP
// end ;
27308: LD_VAR 0 2
27312: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27313: LD_INT 0
27315: PPUSH
27316: PPUSH
27317: PPUSH
27318: PPUSH
27319: PPUSH
27320: PPUSH
// if not unit or not building then
27321: LD_VAR 0 1
27325: NOT
27326: PUSH
27327: LD_VAR 0 2
27331: NOT
27332: OR
27333: IFFALSE 27337
// exit ;
27335: GO 27495
// x := GetX ( building ) ;
27337: LD_ADDR_VAR 0 5
27341: PUSH
27342: LD_VAR 0 2
27346: PPUSH
27347: CALL_OW 250
27351: ST_TO_ADDR
// y := GetY ( building ) ;
27352: LD_ADDR_VAR 0 6
27356: PUSH
27357: LD_VAR 0 2
27361: PPUSH
27362: CALL_OW 251
27366: ST_TO_ADDR
// for i = 0 to 5 do
27367: LD_ADDR_VAR 0 4
27371: PUSH
27372: DOUBLE
27373: LD_INT 0
27375: DEC
27376: ST_TO_ADDR
27377: LD_INT 5
27379: PUSH
27380: FOR_TO
27381: IFFALSE 27493
// begin _x := ShiftX ( x , i , 3 ) ;
27383: LD_ADDR_VAR 0 7
27387: PUSH
27388: LD_VAR 0 5
27392: PPUSH
27393: LD_VAR 0 4
27397: PPUSH
27398: LD_INT 3
27400: PPUSH
27401: CALL_OW 272
27405: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27406: LD_ADDR_VAR 0 8
27410: PUSH
27411: LD_VAR 0 6
27415: PPUSH
27416: LD_VAR 0 4
27420: PPUSH
27421: LD_INT 3
27423: PPUSH
27424: CALL_OW 273
27428: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27429: LD_VAR 0 7
27433: PPUSH
27434: LD_VAR 0 8
27438: PPUSH
27439: CALL_OW 488
27443: NOT
27444: IFFALSE 27448
// continue ;
27446: GO 27380
// if HexInfo ( _x , _y ) = 0 then
27448: LD_VAR 0 7
27452: PPUSH
27453: LD_VAR 0 8
27457: PPUSH
27458: CALL_OW 428
27462: PUSH
27463: LD_INT 0
27465: EQUAL
27466: IFFALSE 27491
// begin ComMoveXY ( unit , _x , _y ) ;
27468: LD_VAR 0 1
27472: PPUSH
27473: LD_VAR 0 7
27477: PPUSH
27478: LD_VAR 0 8
27482: PPUSH
27483: CALL_OW 111
// exit ;
27487: POP
27488: POP
27489: GO 27495
// end ; end ;
27491: GO 27380
27493: POP
27494: POP
// end ;
27495: LD_VAR 0 3
27499: RET
// export function ScanBase ( side , base_area ) ; begin
27500: LD_INT 0
27502: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27503: LD_ADDR_VAR 0 3
27507: PUSH
27508: LD_VAR 0 2
27512: PPUSH
27513: LD_INT 81
27515: PUSH
27516: LD_VAR 0 1
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PPUSH
27525: CALL_OW 70
27529: ST_TO_ADDR
// end ;
27530: LD_VAR 0 3
27534: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27535: LD_INT 0
27537: PPUSH
27538: PPUSH
27539: PPUSH
27540: PPUSH
// result := false ;
27541: LD_ADDR_VAR 0 2
27545: PUSH
27546: LD_INT 0
27548: ST_TO_ADDR
// side := GetSide ( unit ) ;
27549: LD_ADDR_VAR 0 3
27553: PUSH
27554: LD_VAR 0 1
27558: PPUSH
27559: CALL_OW 255
27563: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27564: LD_ADDR_VAR 0 4
27568: PUSH
27569: LD_VAR 0 1
27573: PPUSH
27574: CALL_OW 248
27578: ST_TO_ADDR
// case nat of 1 :
27579: LD_VAR 0 4
27583: PUSH
27584: LD_INT 1
27586: DOUBLE
27587: EQUAL
27588: IFTRUE 27592
27590: GO 27603
27592: POP
// tech := tech_lassight ; 2 :
27593: LD_ADDR_VAR 0 5
27597: PUSH
27598: LD_INT 12
27600: ST_TO_ADDR
27601: GO 27642
27603: LD_INT 2
27605: DOUBLE
27606: EQUAL
27607: IFTRUE 27611
27609: GO 27622
27611: POP
// tech := tech_mortar ; 3 :
27612: LD_ADDR_VAR 0 5
27616: PUSH
27617: LD_INT 41
27619: ST_TO_ADDR
27620: GO 27642
27622: LD_INT 3
27624: DOUBLE
27625: EQUAL
27626: IFTRUE 27630
27628: GO 27641
27630: POP
// tech := tech_bazooka ; end ;
27631: LD_ADDR_VAR 0 5
27635: PUSH
27636: LD_INT 44
27638: ST_TO_ADDR
27639: GO 27642
27641: POP
// if Researched ( side , tech ) then
27642: LD_VAR 0 3
27646: PPUSH
27647: LD_VAR 0 5
27651: PPUSH
27652: CALL_OW 325
27656: IFFALSE 27683
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27658: LD_ADDR_VAR 0 2
27662: PUSH
27663: LD_INT 5
27665: PUSH
27666: LD_INT 8
27668: PUSH
27669: LD_INT 9
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: LIST
27676: PUSH
27677: LD_VAR 0 4
27681: ARRAY
27682: ST_TO_ADDR
// end ;
27683: LD_VAR 0 2
27687: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27688: LD_INT 0
27690: PPUSH
27691: PPUSH
27692: PPUSH
// if not mines then
27693: LD_VAR 0 2
27697: NOT
27698: IFFALSE 27702
// exit ;
27700: GO 27846
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27702: LD_ADDR_VAR 0 5
27706: PUSH
27707: LD_INT 81
27709: PUSH
27710: LD_VAR 0 1
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 3
27721: PUSH
27722: LD_INT 21
27724: PUSH
27725: LD_INT 3
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PPUSH
27740: CALL_OW 69
27744: ST_TO_ADDR
// for i in mines do
27745: LD_ADDR_VAR 0 4
27749: PUSH
27750: LD_VAR 0 2
27754: PUSH
27755: FOR_IN
27756: IFFALSE 27844
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27758: LD_VAR 0 4
27762: PUSH
27763: LD_INT 1
27765: ARRAY
27766: PPUSH
27767: LD_VAR 0 4
27771: PUSH
27772: LD_INT 2
27774: ARRAY
27775: PPUSH
27776: CALL_OW 458
27780: NOT
27781: IFFALSE 27785
// continue ;
27783: GO 27755
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27785: LD_VAR 0 4
27789: PUSH
27790: LD_INT 1
27792: ARRAY
27793: PPUSH
27794: LD_VAR 0 4
27798: PUSH
27799: LD_INT 2
27801: ARRAY
27802: PPUSH
27803: CALL_OW 428
27807: PUSH
27808: LD_VAR 0 5
27812: IN
27813: IFFALSE 27842
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27815: LD_VAR 0 4
27819: PUSH
27820: LD_INT 1
27822: ARRAY
27823: PPUSH
27824: LD_VAR 0 4
27828: PUSH
27829: LD_INT 2
27831: ARRAY
27832: PPUSH
27833: LD_VAR 0 1
27837: PPUSH
27838: CALL_OW 456
// end ;
27842: GO 27755
27844: POP
27845: POP
// end ;
27846: LD_VAR 0 3
27850: RET
// export function Count ( array ) ; begin
27851: LD_INT 0
27853: PPUSH
// result := array + 0 ;
27854: LD_ADDR_VAR 0 2
27858: PUSH
27859: LD_VAR 0 1
27863: PUSH
27864: LD_INT 0
27866: PLUS
27867: ST_TO_ADDR
// end ;
27868: LD_VAR 0 2
27872: RET
// export function IsEmpty ( building ) ; begin
27873: LD_INT 0
27875: PPUSH
// if not building then
27876: LD_VAR 0 1
27880: NOT
27881: IFFALSE 27885
// exit ;
27883: GO 27928
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27885: LD_ADDR_VAR 0 2
27889: PUSH
27890: LD_VAR 0 1
27894: PUSH
27895: LD_INT 22
27897: PUSH
27898: LD_VAR 0 1
27902: PPUSH
27903: CALL_OW 255
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 58
27914: PUSH
27915: EMPTY
27916: LIST
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PPUSH
27922: CALL_OW 69
27926: IN
27927: ST_TO_ADDR
// end ;
27928: LD_VAR 0 2
27932: RET
// export function IsNotFull ( building ) ; var places ; begin
27933: LD_INT 0
27935: PPUSH
27936: PPUSH
// if not building then
27937: LD_VAR 0 1
27941: NOT
27942: IFFALSE 27946
// exit ;
27944: GO 27974
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27946: LD_ADDR_VAR 0 2
27950: PUSH
27951: LD_VAR 0 1
27955: PPUSH
27956: LD_INT 3
27958: PUSH
27959: LD_INT 62
27961: PUSH
27962: EMPTY
27963: LIST
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PPUSH
27969: CALL_OW 72
27973: ST_TO_ADDR
// end ;
27974: LD_VAR 0 2
27978: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27979: LD_INT 0
27981: PPUSH
27982: PPUSH
27983: PPUSH
27984: PPUSH
// tmp := [ ] ;
27985: LD_ADDR_VAR 0 3
27989: PUSH
27990: EMPTY
27991: ST_TO_ADDR
// list := [ ] ;
27992: LD_ADDR_VAR 0 5
27996: PUSH
27997: EMPTY
27998: ST_TO_ADDR
// for i = 16 to 25 do
27999: LD_ADDR_VAR 0 4
28003: PUSH
28004: DOUBLE
28005: LD_INT 16
28007: DEC
28008: ST_TO_ADDR
28009: LD_INT 25
28011: PUSH
28012: FOR_TO
28013: IFFALSE 28086
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28015: LD_ADDR_VAR 0 3
28019: PUSH
28020: LD_VAR 0 3
28024: PUSH
28025: LD_INT 22
28027: PUSH
28028: LD_VAR 0 1
28032: PPUSH
28033: CALL_OW 255
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 91
28044: PUSH
28045: LD_VAR 0 1
28049: PUSH
28050: LD_INT 6
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 30
28060: PUSH
28061: LD_VAR 0 4
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: LIST
28074: PUSH
28075: EMPTY
28076: LIST
28077: PPUSH
28078: CALL_OW 69
28082: ADD
28083: ST_TO_ADDR
28084: GO 28012
28086: POP
28087: POP
// for i = 1 to tmp do
28088: LD_ADDR_VAR 0 4
28092: PUSH
28093: DOUBLE
28094: LD_INT 1
28096: DEC
28097: ST_TO_ADDR
28098: LD_VAR 0 3
28102: PUSH
28103: FOR_TO
28104: IFFALSE 28192
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28106: LD_ADDR_VAR 0 5
28110: PUSH
28111: LD_VAR 0 5
28115: PUSH
28116: LD_VAR 0 3
28120: PUSH
28121: LD_VAR 0 4
28125: ARRAY
28126: PPUSH
28127: CALL_OW 266
28131: PUSH
28132: LD_VAR 0 3
28136: PUSH
28137: LD_VAR 0 4
28141: ARRAY
28142: PPUSH
28143: CALL_OW 250
28147: PUSH
28148: LD_VAR 0 3
28152: PUSH
28153: LD_VAR 0 4
28157: ARRAY
28158: PPUSH
28159: CALL_OW 251
28163: PUSH
28164: LD_VAR 0 3
28168: PUSH
28169: LD_VAR 0 4
28173: ARRAY
28174: PPUSH
28175: CALL_OW 254
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: PUSH
28186: EMPTY
28187: LIST
28188: ADD
28189: ST_TO_ADDR
28190: GO 28103
28192: POP
28193: POP
// result := list ;
28194: LD_ADDR_VAR 0 2
28198: PUSH
28199: LD_VAR 0 5
28203: ST_TO_ADDR
// end ;
28204: LD_VAR 0 2
28208: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28209: LD_INT 0
28211: PPUSH
28212: PPUSH
28213: PPUSH
28214: PPUSH
28215: PPUSH
28216: PPUSH
28217: PPUSH
// if not factory then
28218: LD_VAR 0 1
28222: NOT
28223: IFFALSE 28227
// exit ;
28225: GO 28820
// if control = control_apeman then
28227: LD_VAR 0 4
28231: PUSH
28232: LD_INT 5
28234: EQUAL
28235: IFFALSE 28344
// begin tmp := UnitsInside ( factory ) ;
28237: LD_ADDR_VAR 0 8
28241: PUSH
28242: LD_VAR 0 1
28246: PPUSH
28247: CALL_OW 313
28251: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28252: LD_VAR 0 8
28256: PPUSH
28257: LD_INT 25
28259: PUSH
28260: LD_INT 12
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PPUSH
28267: CALL_OW 72
28271: NOT
28272: IFFALSE 28282
// control := control_manual ;
28274: LD_ADDR_VAR 0 4
28278: PUSH
28279: LD_INT 1
28281: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28282: LD_ADDR_VAR 0 8
28286: PUSH
28287: LD_VAR 0 1
28291: PPUSH
28292: CALL 27979 0 1
28296: ST_TO_ADDR
// if tmp then
28297: LD_VAR 0 8
28301: IFFALSE 28344
// begin for i in tmp do
28303: LD_ADDR_VAR 0 7
28307: PUSH
28308: LD_VAR 0 8
28312: PUSH
28313: FOR_IN
28314: IFFALSE 28342
// if i [ 1 ] = b_ext_radio then
28316: LD_VAR 0 7
28320: PUSH
28321: LD_INT 1
28323: ARRAY
28324: PUSH
28325: LD_INT 22
28327: EQUAL
28328: IFFALSE 28340
// begin control := control_remote ;
28330: LD_ADDR_VAR 0 4
28334: PUSH
28335: LD_INT 2
28337: ST_TO_ADDR
// break ;
28338: GO 28342
// end ;
28340: GO 28313
28342: POP
28343: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28344: LD_VAR 0 1
28348: PPUSH
28349: LD_VAR 0 2
28353: PPUSH
28354: LD_VAR 0 3
28358: PPUSH
28359: LD_VAR 0 4
28363: PPUSH
28364: LD_VAR 0 5
28368: PPUSH
28369: CALL_OW 448
28373: IFFALSE 28408
// begin result := [ chassis , engine , control , weapon ] ;
28375: LD_ADDR_VAR 0 6
28379: PUSH
28380: LD_VAR 0 2
28384: PUSH
28385: LD_VAR 0 3
28389: PUSH
28390: LD_VAR 0 4
28394: PUSH
28395: LD_VAR 0 5
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: ST_TO_ADDR
// exit ;
28406: GO 28820
// end ; _chassis := AvailableChassisList ( factory ) ;
28408: LD_ADDR_VAR 0 9
28412: PUSH
28413: LD_VAR 0 1
28417: PPUSH
28418: CALL_OW 475
28422: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28423: LD_ADDR_VAR 0 11
28427: PUSH
28428: LD_VAR 0 1
28432: PPUSH
28433: CALL_OW 476
28437: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28438: LD_ADDR_VAR 0 12
28442: PUSH
28443: LD_VAR 0 1
28447: PPUSH
28448: CALL_OW 477
28452: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28453: LD_ADDR_VAR 0 10
28457: PUSH
28458: LD_VAR 0 1
28462: PPUSH
28463: CALL_OW 478
28467: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28468: LD_VAR 0 9
28472: NOT
28473: PUSH
28474: LD_VAR 0 11
28478: NOT
28479: OR
28480: PUSH
28481: LD_VAR 0 12
28485: NOT
28486: OR
28487: PUSH
28488: LD_VAR 0 10
28492: NOT
28493: OR
28494: IFFALSE 28529
// begin result := [ chassis , engine , control , weapon ] ;
28496: LD_ADDR_VAR 0 6
28500: PUSH
28501: LD_VAR 0 2
28505: PUSH
28506: LD_VAR 0 3
28510: PUSH
28511: LD_VAR 0 4
28515: PUSH
28516: LD_VAR 0 5
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: ST_TO_ADDR
// exit ;
28527: GO 28820
// end ; if not chassis in _chassis then
28529: LD_VAR 0 2
28533: PUSH
28534: LD_VAR 0 9
28538: IN
28539: NOT
28540: IFFALSE 28566
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28542: LD_ADDR_VAR 0 2
28546: PUSH
28547: LD_VAR 0 9
28551: PUSH
28552: LD_INT 1
28554: PPUSH
28555: LD_VAR 0 9
28559: PPUSH
28560: CALL_OW 12
28564: ARRAY
28565: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28566: LD_VAR 0 2
28570: PPUSH
28571: LD_VAR 0 3
28575: PPUSH
28576: CALL 28825 0 2
28580: NOT
28581: IFFALSE 28640
// repeat engine := _engine [ 1 ] ;
28583: LD_ADDR_VAR 0 3
28587: PUSH
28588: LD_VAR 0 11
28592: PUSH
28593: LD_INT 1
28595: ARRAY
28596: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28597: LD_ADDR_VAR 0 11
28601: PUSH
28602: LD_VAR 0 11
28606: PPUSH
28607: LD_INT 1
28609: PPUSH
28610: CALL_OW 3
28614: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28615: LD_VAR 0 2
28619: PPUSH
28620: LD_VAR 0 3
28624: PPUSH
28625: CALL 28825 0 2
28629: PUSH
28630: LD_VAR 0 11
28634: PUSH
28635: EMPTY
28636: EQUAL
28637: OR
28638: IFFALSE 28583
// if not control in _control then
28640: LD_VAR 0 4
28644: PUSH
28645: LD_VAR 0 12
28649: IN
28650: NOT
28651: IFFALSE 28677
// control := _control [ rand ( 1 , _control ) ] ;
28653: LD_ADDR_VAR 0 4
28657: PUSH
28658: LD_VAR 0 12
28662: PUSH
28663: LD_INT 1
28665: PPUSH
28666: LD_VAR 0 12
28670: PPUSH
28671: CALL_OW 12
28675: ARRAY
28676: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28677: LD_VAR 0 2
28681: PPUSH
28682: LD_VAR 0 5
28686: PPUSH
28687: CALL 29045 0 2
28691: NOT
28692: IFFALSE 28751
// repeat weapon := _weapon [ 1 ] ;
28694: LD_ADDR_VAR 0 5
28698: PUSH
28699: LD_VAR 0 10
28703: PUSH
28704: LD_INT 1
28706: ARRAY
28707: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28708: LD_ADDR_VAR 0 10
28712: PUSH
28713: LD_VAR 0 10
28717: PPUSH
28718: LD_INT 1
28720: PPUSH
28721: CALL_OW 3
28725: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28726: LD_VAR 0 2
28730: PPUSH
28731: LD_VAR 0 5
28735: PPUSH
28736: CALL 29045 0 2
28740: PUSH
28741: LD_VAR 0 10
28745: PUSH
28746: EMPTY
28747: EQUAL
28748: OR
28749: IFFALSE 28694
// result := [ ] ;
28751: LD_ADDR_VAR 0 6
28755: PUSH
28756: EMPTY
28757: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28758: LD_VAR 0 1
28762: PPUSH
28763: LD_VAR 0 2
28767: PPUSH
28768: LD_VAR 0 3
28772: PPUSH
28773: LD_VAR 0 4
28777: PPUSH
28778: LD_VAR 0 5
28782: PPUSH
28783: CALL_OW 448
28787: IFFALSE 28820
// result := [ chassis , engine , control , weapon ] ;
28789: LD_ADDR_VAR 0 6
28793: PUSH
28794: LD_VAR 0 2
28798: PUSH
28799: LD_VAR 0 3
28803: PUSH
28804: LD_VAR 0 4
28808: PUSH
28809: LD_VAR 0 5
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: ST_TO_ADDR
// end ;
28820: LD_VAR 0 6
28824: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28825: LD_INT 0
28827: PPUSH
// if not chassis or not engine then
28828: LD_VAR 0 1
28832: NOT
28833: PUSH
28834: LD_VAR 0 2
28838: NOT
28839: OR
28840: IFFALSE 28844
// exit ;
28842: GO 29040
// case engine of engine_solar :
28844: LD_VAR 0 2
28848: PUSH
28849: LD_INT 2
28851: DOUBLE
28852: EQUAL
28853: IFTRUE 28857
28855: GO 28895
28857: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28858: LD_ADDR_VAR 0 3
28862: PUSH
28863: LD_INT 11
28865: PUSH
28866: LD_INT 12
28868: PUSH
28869: LD_INT 13
28871: PUSH
28872: LD_INT 14
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: LD_INT 2
28880: PUSH
28881: LD_INT 3
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: ST_TO_ADDR
28893: GO 29024
28895: LD_INT 1
28897: DOUBLE
28898: EQUAL
28899: IFTRUE 28903
28901: GO 28965
28903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28904: LD_ADDR_VAR 0 3
28908: PUSH
28909: LD_INT 11
28911: PUSH
28912: LD_INT 12
28914: PUSH
28915: LD_INT 13
28917: PUSH
28918: LD_INT 14
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: LD_INT 2
28926: PUSH
28927: LD_INT 3
28929: PUSH
28930: LD_INT 4
28932: PUSH
28933: LD_INT 5
28935: PUSH
28936: LD_INT 21
28938: PUSH
28939: LD_INT 23
28941: PUSH
28942: LD_INT 22
28944: PUSH
28945: LD_INT 24
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: ST_TO_ADDR
28963: GO 29024
28965: LD_INT 3
28967: DOUBLE
28968: EQUAL
28969: IFTRUE 28973
28971: GO 29023
28973: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28974: LD_ADDR_VAR 0 3
28978: PUSH
28979: LD_INT 13
28981: PUSH
28982: LD_INT 14
28984: PUSH
28985: LD_INT 2
28987: PUSH
28988: LD_INT 3
28990: PUSH
28991: LD_INT 4
28993: PUSH
28994: LD_INT 5
28996: PUSH
28997: LD_INT 21
28999: PUSH
29000: LD_INT 22
29002: PUSH
29003: LD_INT 23
29005: PUSH
29006: LD_INT 24
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: ST_TO_ADDR
29021: GO 29024
29023: POP
// result := ( chassis in result ) ;
29024: LD_ADDR_VAR 0 3
29028: PUSH
29029: LD_VAR 0 1
29033: PUSH
29034: LD_VAR 0 3
29038: IN
29039: ST_TO_ADDR
// end ;
29040: LD_VAR 0 3
29044: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29045: LD_INT 0
29047: PPUSH
// if not chassis or not weapon then
29048: LD_VAR 0 1
29052: NOT
29053: PUSH
29054: LD_VAR 0 2
29058: NOT
29059: OR
29060: IFFALSE 29064
// exit ;
29062: GO 30124
// case weapon of us_machine_gun :
29064: LD_VAR 0 2
29068: PUSH
29069: LD_INT 2
29071: DOUBLE
29072: EQUAL
29073: IFTRUE 29077
29075: GO 29107
29077: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29078: LD_ADDR_VAR 0 3
29082: PUSH
29083: LD_INT 1
29085: PUSH
29086: LD_INT 2
29088: PUSH
29089: LD_INT 3
29091: PUSH
29092: LD_INT 4
29094: PUSH
29095: LD_INT 5
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: ST_TO_ADDR
29105: GO 30108
29107: LD_INT 3
29109: DOUBLE
29110: EQUAL
29111: IFTRUE 29115
29113: GO 29145
29115: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29116: LD_ADDR_VAR 0 3
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: LD_INT 3
29129: PUSH
29130: LD_INT 4
29132: PUSH
29133: LD_INT 5
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: ST_TO_ADDR
29143: GO 30108
29145: LD_INT 11
29147: DOUBLE
29148: EQUAL
29149: IFTRUE 29153
29151: GO 29183
29153: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29154: LD_ADDR_VAR 0 3
29158: PUSH
29159: LD_INT 1
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: LD_INT 3
29167: PUSH
29168: LD_INT 4
29170: PUSH
29171: LD_INT 5
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: ST_TO_ADDR
29181: GO 30108
29183: LD_INT 4
29185: DOUBLE
29186: EQUAL
29187: IFTRUE 29191
29189: GO 29217
29191: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29192: LD_ADDR_VAR 0 3
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: LD_INT 3
29202: PUSH
29203: LD_INT 4
29205: PUSH
29206: LD_INT 5
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: ST_TO_ADDR
29215: GO 30108
29217: LD_INT 5
29219: DOUBLE
29220: EQUAL
29221: IFTRUE 29225
29223: GO 29251
29225: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29226: LD_ADDR_VAR 0 3
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: LD_INT 3
29236: PUSH
29237: LD_INT 4
29239: PUSH
29240: LD_INT 5
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: ST_TO_ADDR
29249: GO 30108
29251: LD_INT 9
29253: DOUBLE
29254: EQUAL
29255: IFTRUE 29259
29257: GO 29285
29259: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29260: LD_ADDR_VAR 0 3
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: LD_INT 3
29270: PUSH
29271: LD_INT 4
29273: PUSH
29274: LD_INT 5
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: ST_TO_ADDR
29283: GO 30108
29285: LD_INT 7
29287: DOUBLE
29288: EQUAL
29289: IFTRUE 29293
29291: GO 29319
29293: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29294: LD_ADDR_VAR 0 3
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: LD_INT 4
29307: PUSH
29308: LD_INT 5
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: ST_TO_ADDR
29317: GO 30108
29319: LD_INT 12
29321: DOUBLE
29322: EQUAL
29323: IFTRUE 29327
29325: GO 29353
29327: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29328: LD_ADDR_VAR 0 3
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 3
29338: PUSH
29339: LD_INT 4
29341: PUSH
29342: LD_INT 5
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: ST_TO_ADDR
29351: GO 30108
29353: LD_INT 13
29355: DOUBLE
29356: EQUAL
29357: IFTRUE 29361
29359: GO 29387
29361: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29362: LD_ADDR_VAR 0 3
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: LD_INT 3
29372: PUSH
29373: LD_INT 4
29375: PUSH
29376: LD_INT 5
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: ST_TO_ADDR
29385: GO 30108
29387: LD_INT 14
29389: DOUBLE
29390: EQUAL
29391: IFTRUE 29395
29393: GO 29413
29395: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29396: LD_ADDR_VAR 0 3
29400: PUSH
29401: LD_INT 4
29403: PUSH
29404: LD_INT 5
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: ST_TO_ADDR
29411: GO 30108
29413: LD_INT 6
29415: DOUBLE
29416: EQUAL
29417: IFTRUE 29421
29419: GO 29439
29421: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29422: LD_ADDR_VAR 0 3
29426: PUSH
29427: LD_INT 4
29429: PUSH
29430: LD_INT 5
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: ST_TO_ADDR
29437: GO 30108
29439: LD_INT 10
29441: DOUBLE
29442: EQUAL
29443: IFTRUE 29447
29445: GO 29465
29447: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29448: LD_ADDR_VAR 0 3
29452: PUSH
29453: LD_INT 4
29455: PUSH
29456: LD_INT 5
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: ST_TO_ADDR
29463: GO 30108
29465: LD_INT 22
29467: DOUBLE
29468: EQUAL
29469: IFTRUE 29473
29471: GO 29499
29473: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_INT 11
29481: PUSH
29482: LD_INT 12
29484: PUSH
29485: LD_INT 13
29487: PUSH
29488: LD_INT 14
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: ST_TO_ADDR
29497: GO 30108
29499: LD_INT 23
29501: DOUBLE
29502: EQUAL
29503: IFTRUE 29507
29505: GO 29533
29507: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_INT 11
29515: PUSH
29516: LD_INT 12
29518: PUSH
29519: LD_INT 13
29521: PUSH
29522: LD_INT 14
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: ST_TO_ADDR
29531: GO 30108
29533: LD_INT 24
29535: DOUBLE
29536: EQUAL
29537: IFTRUE 29541
29539: GO 29567
29541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29542: LD_ADDR_VAR 0 3
29546: PUSH
29547: LD_INT 11
29549: PUSH
29550: LD_INT 12
29552: PUSH
29553: LD_INT 13
29555: PUSH
29556: LD_INT 14
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: ST_TO_ADDR
29565: GO 30108
29567: LD_INT 30
29569: DOUBLE
29570: EQUAL
29571: IFTRUE 29575
29573: GO 29601
29575: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29576: LD_ADDR_VAR 0 3
29580: PUSH
29581: LD_INT 11
29583: PUSH
29584: LD_INT 12
29586: PUSH
29587: LD_INT 13
29589: PUSH
29590: LD_INT 14
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
29599: GO 30108
29601: LD_INT 25
29603: DOUBLE
29604: EQUAL
29605: IFTRUE 29609
29607: GO 29627
29609: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29610: LD_ADDR_VAR 0 3
29614: PUSH
29615: LD_INT 13
29617: PUSH
29618: LD_INT 14
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: ST_TO_ADDR
29625: GO 30108
29627: LD_INT 27
29629: DOUBLE
29630: EQUAL
29631: IFTRUE 29635
29633: GO 29653
29635: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29636: LD_ADDR_VAR 0 3
29640: PUSH
29641: LD_INT 13
29643: PUSH
29644: LD_INT 14
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: ST_TO_ADDR
29651: GO 30108
29653: LD_INT 92
29655: DOUBLE
29656: EQUAL
29657: IFTRUE 29661
29659: GO 29687
29661: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29662: LD_ADDR_VAR 0 3
29666: PUSH
29667: LD_INT 11
29669: PUSH
29670: LD_INT 12
29672: PUSH
29673: LD_INT 13
29675: PUSH
29676: LD_INT 14
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: ST_TO_ADDR
29685: GO 30108
29687: LD_INT 28
29689: DOUBLE
29690: EQUAL
29691: IFTRUE 29695
29693: GO 29713
29695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29696: LD_ADDR_VAR 0 3
29700: PUSH
29701: LD_INT 13
29703: PUSH
29704: LD_INT 14
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: ST_TO_ADDR
29711: GO 30108
29713: LD_INT 29
29715: DOUBLE
29716: EQUAL
29717: IFTRUE 29721
29719: GO 29739
29721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29722: LD_ADDR_VAR 0 3
29726: PUSH
29727: LD_INT 13
29729: PUSH
29730: LD_INT 14
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: ST_TO_ADDR
29737: GO 30108
29739: LD_INT 31
29741: DOUBLE
29742: EQUAL
29743: IFTRUE 29747
29745: GO 29765
29747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29748: LD_ADDR_VAR 0 3
29752: PUSH
29753: LD_INT 13
29755: PUSH
29756: LD_INT 14
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: ST_TO_ADDR
29763: GO 30108
29765: LD_INT 26
29767: DOUBLE
29768: EQUAL
29769: IFTRUE 29773
29771: GO 29791
29773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29774: LD_ADDR_VAR 0 3
29778: PUSH
29779: LD_INT 13
29781: PUSH
29782: LD_INT 14
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: ST_TO_ADDR
29789: GO 30108
29791: LD_INT 42
29793: DOUBLE
29794: EQUAL
29795: IFTRUE 29799
29797: GO 29825
29799: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29800: LD_ADDR_VAR 0 3
29804: PUSH
29805: LD_INT 21
29807: PUSH
29808: LD_INT 22
29810: PUSH
29811: LD_INT 23
29813: PUSH
29814: LD_INT 24
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: ST_TO_ADDR
29823: GO 30108
29825: LD_INT 43
29827: DOUBLE
29828: EQUAL
29829: IFTRUE 29833
29831: GO 29859
29833: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29834: LD_ADDR_VAR 0 3
29838: PUSH
29839: LD_INT 21
29841: PUSH
29842: LD_INT 22
29844: PUSH
29845: LD_INT 23
29847: PUSH
29848: LD_INT 24
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: ST_TO_ADDR
29857: GO 30108
29859: LD_INT 44
29861: DOUBLE
29862: EQUAL
29863: IFTRUE 29867
29865: GO 29893
29867: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29868: LD_ADDR_VAR 0 3
29872: PUSH
29873: LD_INT 21
29875: PUSH
29876: LD_INT 22
29878: PUSH
29879: LD_INT 23
29881: PUSH
29882: LD_INT 24
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: ST_TO_ADDR
29891: GO 30108
29893: LD_INT 45
29895: DOUBLE
29896: EQUAL
29897: IFTRUE 29901
29899: GO 29927
29901: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29902: LD_ADDR_VAR 0 3
29906: PUSH
29907: LD_INT 21
29909: PUSH
29910: LD_INT 22
29912: PUSH
29913: LD_INT 23
29915: PUSH
29916: LD_INT 24
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: ST_TO_ADDR
29925: GO 30108
29927: LD_INT 49
29929: DOUBLE
29930: EQUAL
29931: IFTRUE 29935
29933: GO 29961
29935: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29936: LD_ADDR_VAR 0 3
29940: PUSH
29941: LD_INT 21
29943: PUSH
29944: LD_INT 22
29946: PUSH
29947: LD_INT 23
29949: PUSH
29950: LD_INT 24
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: ST_TO_ADDR
29959: GO 30108
29961: LD_INT 51
29963: DOUBLE
29964: EQUAL
29965: IFTRUE 29969
29967: GO 29995
29969: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29970: LD_ADDR_VAR 0 3
29974: PUSH
29975: LD_INT 21
29977: PUSH
29978: LD_INT 22
29980: PUSH
29981: LD_INT 23
29983: PUSH
29984: LD_INT 24
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: ST_TO_ADDR
29993: GO 30108
29995: LD_INT 52
29997: DOUBLE
29998: EQUAL
29999: IFTRUE 30003
30001: GO 30029
30003: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30004: LD_ADDR_VAR 0 3
30008: PUSH
30009: LD_INT 21
30011: PUSH
30012: LD_INT 22
30014: PUSH
30015: LD_INT 23
30017: PUSH
30018: LD_INT 24
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: ST_TO_ADDR
30027: GO 30108
30029: LD_INT 53
30031: DOUBLE
30032: EQUAL
30033: IFTRUE 30037
30035: GO 30055
30037: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30038: LD_ADDR_VAR 0 3
30042: PUSH
30043: LD_INT 23
30045: PUSH
30046: LD_INT 24
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: ST_TO_ADDR
30053: GO 30108
30055: LD_INT 46
30057: DOUBLE
30058: EQUAL
30059: IFTRUE 30063
30061: GO 30081
30063: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30064: LD_ADDR_VAR 0 3
30068: PUSH
30069: LD_INT 23
30071: PUSH
30072: LD_INT 24
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: ST_TO_ADDR
30079: GO 30108
30081: LD_INT 47
30083: DOUBLE
30084: EQUAL
30085: IFTRUE 30089
30087: GO 30107
30089: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30090: LD_ADDR_VAR 0 3
30094: PUSH
30095: LD_INT 23
30097: PUSH
30098: LD_INT 24
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: ST_TO_ADDR
30105: GO 30108
30107: POP
// result := ( chassis in result ) ;
30108: LD_ADDR_VAR 0 3
30112: PUSH
30113: LD_VAR 0 1
30117: PUSH
30118: LD_VAR 0 3
30122: IN
30123: ST_TO_ADDR
// end ;
30124: LD_VAR 0 3
30128: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30129: LD_INT 0
30131: PPUSH
30132: PPUSH
30133: PPUSH
30134: PPUSH
30135: PPUSH
30136: PPUSH
30137: PPUSH
// result := array ;
30138: LD_ADDR_VAR 0 5
30142: PUSH
30143: LD_VAR 0 1
30147: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30148: LD_VAR 0 1
30152: NOT
30153: PUSH
30154: LD_VAR 0 2
30158: NOT
30159: OR
30160: PUSH
30161: LD_VAR 0 3
30165: NOT
30166: OR
30167: PUSH
30168: LD_VAR 0 2
30172: PUSH
30173: LD_VAR 0 1
30177: GREATER
30178: OR
30179: PUSH
30180: LD_VAR 0 3
30184: PUSH
30185: LD_VAR 0 1
30189: GREATER
30190: OR
30191: IFFALSE 30195
// exit ;
30193: GO 30491
// if direction then
30195: LD_VAR 0 4
30199: IFFALSE 30263
// begin d := 1 ;
30201: LD_ADDR_VAR 0 9
30205: PUSH
30206: LD_INT 1
30208: ST_TO_ADDR
// if i_from > i_to then
30209: LD_VAR 0 2
30213: PUSH
30214: LD_VAR 0 3
30218: GREATER
30219: IFFALSE 30245
// length := ( array - i_from ) + i_to else
30221: LD_ADDR_VAR 0 11
30225: PUSH
30226: LD_VAR 0 1
30230: PUSH
30231: LD_VAR 0 2
30235: MINUS
30236: PUSH
30237: LD_VAR 0 3
30241: PLUS
30242: ST_TO_ADDR
30243: GO 30261
// length := i_to - i_from ;
30245: LD_ADDR_VAR 0 11
30249: PUSH
30250: LD_VAR 0 3
30254: PUSH
30255: LD_VAR 0 2
30259: MINUS
30260: ST_TO_ADDR
// end else
30261: GO 30324
// begin d := - 1 ;
30263: LD_ADDR_VAR 0 9
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: ST_TO_ADDR
// if i_from > i_to then
30272: LD_VAR 0 2
30276: PUSH
30277: LD_VAR 0 3
30281: GREATER
30282: IFFALSE 30302
// length := i_from - i_to else
30284: LD_ADDR_VAR 0 11
30288: PUSH
30289: LD_VAR 0 2
30293: PUSH
30294: LD_VAR 0 3
30298: MINUS
30299: ST_TO_ADDR
30300: GO 30324
// length := ( array - i_to ) + i_from ;
30302: LD_ADDR_VAR 0 11
30306: PUSH
30307: LD_VAR 0 1
30311: PUSH
30312: LD_VAR 0 3
30316: MINUS
30317: PUSH
30318: LD_VAR 0 2
30322: PLUS
30323: ST_TO_ADDR
// end ; if not length then
30324: LD_VAR 0 11
30328: NOT
30329: IFFALSE 30333
// exit ;
30331: GO 30491
// tmp := array ;
30333: LD_ADDR_VAR 0 10
30337: PUSH
30338: LD_VAR 0 1
30342: ST_TO_ADDR
// for i = 1 to length do
30343: LD_ADDR_VAR 0 6
30347: PUSH
30348: DOUBLE
30349: LD_INT 1
30351: DEC
30352: ST_TO_ADDR
30353: LD_VAR 0 11
30357: PUSH
30358: FOR_TO
30359: IFFALSE 30479
// begin for j = 1 to array do
30361: LD_ADDR_VAR 0 7
30365: PUSH
30366: DOUBLE
30367: LD_INT 1
30369: DEC
30370: ST_TO_ADDR
30371: LD_VAR 0 1
30375: PUSH
30376: FOR_TO
30377: IFFALSE 30465
// begin k := j + d ;
30379: LD_ADDR_VAR 0 8
30383: PUSH
30384: LD_VAR 0 7
30388: PUSH
30389: LD_VAR 0 9
30393: PLUS
30394: ST_TO_ADDR
// if k > array then
30395: LD_VAR 0 8
30399: PUSH
30400: LD_VAR 0 1
30404: GREATER
30405: IFFALSE 30415
// k := 1 ;
30407: LD_ADDR_VAR 0 8
30411: PUSH
30412: LD_INT 1
30414: ST_TO_ADDR
// if not k then
30415: LD_VAR 0 8
30419: NOT
30420: IFFALSE 30432
// k := array ;
30422: LD_ADDR_VAR 0 8
30426: PUSH
30427: LD_VAR 0 1
30431: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30432: LD_ADDR_VAR 0 10
30436: PUSH
30437: LD_VAR 0 10
30441: PPUSH
30442: LD_VAR 0 8
30446: PPUSH
30447: LD_VAR 0 1
30451: PUSH
30452: LD_VAR 0 7
30456: ARRAY
30457: PPUSH
30458: CALL_OW 1
30462: ST_TO_ADDR
// end ;
30463: GO 30376
30465: POP
30466: POP
// array := tmp ;
30467: LD_ADDR_VAR 0 1
30471: PUSH
30472: LD_VAR 0 10
30476: ST_TO_ADDR
// end ;
30477: GO 30358
30479: POP
30480: POP
// result := array ;
30481: LD_ADDR_VAR 0 5
30485: PUSH
30486: LD_VAR 0 1
30490: ST_TO_ADDR
// end ;
30491: LD_VAR 0 5
30495: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30496: LD_INT 0
30498: PPUSH
30499: PPUSH
// result := 0 ;
30500: LD_ADDR_VAR 0 3
30504: PUSH
30505: LD_INT 0
30507: ST_TO_ADDR
// if not array or not value in array then
30508: LD_VAR 0 1
30512: NOT
30513: PUSH
30514: LD_VAR 0 2
30518: PUSH
30519: LD_VAR 0 1
30523: IN
30524: NOT
30525: OR
30526: IFFALSE 30530
// exit ;
30528: GO 30584
// for i = 1 to array do
30530: LD_ADDR_VAR 0 4
30534: PUSH
30535: DOUBLE
30536: LD_INT 1
30538: DEC
30539: ST_TO_ADDR
30540: LD_VAR 0 1
30544: PUSH
30545: FOR_TO
30546: IFFALSE 30582
// if value = array [ i ] then
30548: LD_VAR 0 2
30552: PUSH
30553: LD_VAR 0 1
30557: PUSH
30558: LD_VAR 0 4
30562: ARRAY
30563: EQUAL
30564: IFFALSE 30580
// begin result := i ;
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_VAR 0 4
30575: ST_TO_ADDR
// exit ;
30576: POP
30577: POP
30578: GO 30584
// end ;
30580: GO 30545
30582: POP
30583: POP
// end ;
30584: LD_VAR 0 3
30588: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30589: LD_INT 0
30591: PPUSH
// vc_chassis := chassis ;
30592: LD_ADDR_OWVAR 37
30596: PUSH
30597: LD_VAR 0 1
30601: ST_TO_ADDR
// vc_engine := engine ;
30602: LD_ADDR_OWVAR 39
30606: PUSH
30607: LD_VAR 0 2
30611: ST_TO_ADDR
// vc_control := control ;
30612: LD_ADDR_OWVAR 38
30616: PUSH
30617: LD_VAR 0 3
30621: ST_TO_ADDR
// vc_weapon := weapon ;
30622: LD_ADDR_OWVAR 40
30626: PUSH
30627: LD_VAR 0 4
30631: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30632: LD_ADDR_OWVAR 41
30636: PUSH
30637: LD_VAR 0 5
30641: ST_TO_ADDR
// end ;
30642: LD_VAR 0 6
30646: RET
// export function WantPlant ( unit ) ; var task ; begin
30647: LD_INT 0
30649: PPUSH
30650: PPUSH
// result := false ;
30651: LD_ADDR_VAR 0 2
30655: PUSH
30656: LD_INT 0
30658: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30659: LD_ADDR_VAR 0 3
30663: PUSH
30664: LD_VAR 0 1
30668: PPUSH
30669: CALL_OW 437
30673: ST_TO_ADDR
// if task then
30674: LD_VAR 0 3
30678: IFFALSE 30706
// if task [ 1 ] [ 1 ] = p then
30680: LD_VAR 0 3
30684: PUSH
30685: LD_INT 1
30687: ARRAY
30688: PUSH
30689: LD_INT 1
30691: ARRAY
30692: PUSH
30693: LD_STRING p
30695: EQUAL
30696: IFFALSE 30706
// result := true ;
30698: LD_ADDR_VAR 0 2
30702: PUSH
30703: LD_INT 1
30705: ST_TO_ADDR
// end ;
30706: LD_VAR 0 2
30710: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30711: LD_INT 0
30713: PPUSH
30714: PPUSH
30715: PPUSH
30716: PPUSH
// if pos < 1 then
30717: LD_VAR 0 2
30721: PUSH
30722: LD_INT 1
30724: LESS
30725: IFFALSE 30729
// exit ;
30727: GO 31032
// if pos = 1 then
30729: LD_VAR 0 2
30733: PUSH
30734: LD_INT 1
30736: EQUAL
30737: IFFALSE 30770
// result := Replace ( arr , pos [ 1 ] , value ) else
30739: LD_ADDR_VAR 0 4
30743: PUSH
30744: LD_VAR 0 1
30748: PPUSH
30749: LD_VAR 0 2
30753: PUSH
30754: LD_INT 1
30756: ARRAY
30757: PPUSH
30758: LD_VAR 0 3
30762: PPUSH
30763: CALL_OW 1
30767: ST_TO_ADDR
30768: GO 31032
// begin tmp := arr ;
30770: LD_ADDR_VAR 0 6
30774: PUSH
30775: LD_VAR 0 1
30779: ST_TO_ADDR
// s_arr := [ tmp ] ;
30780: LD_ADDR_VAR 0 7
30784: PUSH
30785: LD_VAR 0 6
30789: PUSH
30790: EMPTY
30791: LIST
30792: ST_TO_ADDR
// for i = 1 to pos - 1 do
30793: LD_ADDR_VAR 0 5
30797: PUSH
30798: DOUBLE
30799: LD_INT 1
30801: DEC
30802: ST_TO_ADDR
30803: LD_VAR 0 2
30807: PUSH
30808: LD_INT 1
30810: MINUS
30811: PUSH
30812: FOR_TO
30813: IFFALSE 30858
// begin tmp := tmp [ pos [ i ] ] ;
30815: LD_ADDR_VAR 0 6
30819: PUSH
30820: LD_VAR 0 6
30824: PUSH
30825: LD_VAR 0 2
30829: PUSH
30830: LD_VAR 0 5
30834: ARRAY
30835: ARRAY
30836: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30837: LD_ADDR_VAR 0 7
30841: PUSH
30842: LD_VAR 0 7
30846: PUSH
30847: LD_VAR 0 6
30851: PUSH
30852: EMPTY
30853: LIST
30854: ADD
30855: ST_TO_ADDR
// end ;
30856: GO 30812
30858: POP
30859: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30860: LD_ADDR_VAR 0 6
30864: PUSH
30865: LD_VAR 0 6
30869: PPUSH
30870: LD_VAR 0 2
30874: PUSH
30875: LD_VAR 0 2
30879: ARRAY
30880: PPUSH
30881: LD_VAR 0 3
30885: PPUSH
30886: CALL_OW 1
30890: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30891: LD_ADDR_VAR 0 7
30895: PUSH
30896: LD_VAR 0 7
30900: PPUSH
30901: LD_VAR 0 7
30905: PPUSH
30906: LD_VAR 0 6
30910: PPUSH
30911: CALL_OW 1
30915: ST_TO_ADDR
// for i = s_arr downto 2 do
30916: LD_ADDR_VAR 0 5
30920: PUSH
30921: DOUBLE
30922: LD_VAR 0 7
30926: INC
30927: ST_TO_ADDR
30928: LD_INT 2
30930: PUSH
30931: FOR_DOWNTO
30932: IFFALSE 31016
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30934: LD_ADDR_VAR 0 6
30938: PUSH
30939: LD_VAR 0 7
30943: PUSH
30944: LD_VAR 0 5
30948: PUSH
30949: LD_INT 1
30951: MINUS
30952: ARRAY
30953: PPUSH
30954: LD_VAR 0 2
30958: PUSH
30959: LD_VAR 0 5
30963: PUSH
30964: LD_INT 1
30966: MINUS
30967: ARRAY
30968: PPUSH
30969: LD_VAR 0 7
30973: PUSH
30974: LD_VAR 0 5
30978: ARRAY
30979: PPUSH
30980: CALL_OW 1
30984: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30985: LD_ADDR_VAR 0 7
30989: PUSH
30990: LD_VAR 0 7
30994: PPUSH
30995: LD_VAR 0 5
30999: PUSH
31000: LD_INT 1
31002: MINUS
31003: PPUSH
31004: LD_VAR 0 6
31008: PPUSH
31009: CALL_OW 1
31013: ST_TO_ADDR
// end ;
31014: GO 30931
31016: POP
31017: POP
// result := s_arr [ 1 ] ;
31018: LD_ADDR_VAR 0 4
31022: PUSH
31023: LD_VAR 0 7
31027: PUSH
31028: LD_INT 1
31030: ARRAY
31031: ST_TO_ADDR
// end ; end ;
31032: LD_VAR 0 4
31036: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31037: LD_INT 0
31039: PPUSH
31040: PPUSH
// if not list then
31041: LD_VAR 0 1
31045: NOT
31046: IFFALSE 31050
// exit ;
31048: GO 31141
// i := list [ pos1 ] ;
31050: LD_ADDR_VAR 0 5
31054: PUSH
31055: LD_VAR 0 1
31059: PUSH
31060: LD_VAR 0 2
31064: ARRAY
31065: ST_TO_ADDR
// if not i then
31066: LD_VAR 0 5
31070: NOT
31071: IFFALSE 31075
// exit ;
31073: GO 31141
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31075: LD_ADDR_VAR 0 1
31079: PUSH
31080: LD_VAR 0 1
31084: PPUSH
31085: LD_VAR 0 2
31089: PPUSH
31090: LD_VAR 0 1
31094: PUSH
31095: LD_VAR 0 3
31099: ARRAY
31100: PPUSH
31101: CALL_OW 1
31105: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31106: LD_ADDR_VAR 0 1
31110: PUSH
31111: LD_VAR 0 1
31115: PPUSH
31116: LD_VAR 0 3
31120: PPUSH
31121: LD_VAR 0 5
31125: PPUSH
31126: CALL_OW 1
31130: ST_TO_ADDR
// result := list ;
31131: LD_ADDR_VAR 0 4
31135: PUSH
31136: LD_VAR 0 1
31140: ST_TO_ADDR
// end ;
31141: LD_VAR 0 4
31145: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31146: LD_INT 0
31148: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31149: LD_ADDR_VAR 0 5
31153: PUSH
31154: LD_VAR 0 1
31158: PPUSH
31159: CALL_OW 250
31163: PPUSH
31164: LD_VAR 0 1
31168: PPUSH
31169: CALL_OW 251
31173: PPUSH
31174: LD_VAR 0 2
31178: PPUSH
31179: LD_VAR 0 3
31183: PPUSH
31184: LD_VAR 0 4
31188: PPUSH
31189: CALL 31199 0 5
31193: ST_TO_ADDR
// end ;
31194: LD_VAR 0 5
31198: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31199: LD_INT 0
31201: PPUSH
31202: PPUSH
31203: PPUSH
31204: PPUSH
// if not list then
31205: LD_VAR 0 3
31209: NOT
31210: IFFALSE 31214
// exit ;
31212: GO 31602
// result := [ ] ;
31214: LD_ADDR_VAR 0 6
31218: PUSH
31219: EMPTY
31220: ST_TO_ADDR
// for i in list do
31221: LD_ADDR_VAR 0 7
31225: PUSH
31226: LD_VAR 0 3
31230: PUSH
31231: FOR_IN
31232: IFFALSE 31434
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31234: LD_ADDR_VAR 0 9
31238: PUSH
31239: LD_VAR 0 7
31243: PPUSH
31244: LD_VAR 0 1
31248: PPUSH
31249: LD_VAR 0 2
31253: PPUSH
31254: CALL_OW 297
31258: ST_TO_ADDR
// if not result then
31259: LD_VAR 0 6
31263: NOT
31264: IFFALSE 31290
// result := [ [ i , tmp ] ] else
31266: LD_ADDR_VAR 0 6
31270: PUSH
31271: LD_VAR 0 7
31275: PUSH
31276: LD_VAR 0 9
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: EMPTY
31286: LIST
31287: ST_TO_ADDR
31288: GO 31432
// begin if result [ result ] [ 2 ] < tmp then
31290: LD_VAR 0 6
31294: PUSH
31295: LD_VAR 0 6
31299: ARRAY
31300: PUSH
31301: LD_INT 2
31303: ARRAY
31304: PUSH
31305: LD_VAR 0 9
31309: LESS
31310: IFFALSE 31352
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31312: LD_ADDR_VAR 0 6
31316: PUSH
31317: LD_VAR 0 6
31321: PPUSH
31322: LD_VAR 0 6
31326: PUSH
31327: LD_INT 1
31329: PLUS
31330: PPUSH
31331: LD_VAR 0 7
31335: PUSH
31336: LD_VAR 0 9
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PPUSH
31345: CALL_OW 2
31349: ST_TO_ADDR
31350: GO 31432
// for j = 1 to result do
31352: LD_ADDR_VAR 0 8
31356: PUSH
31357: DOUBLE
31358: LD_INT 1
31360: DEC
31361: ST_TO_ADDR
31362: LD_VAR 0 6
31366: PUSH
31367: FOR_TO
31368: IFFALSE 31430
// begin if tmp < result [ j ] [ 2 ] then
31370: LD_VAR 0 9
31374: PUSH
31375: LD_VAR 0 6
31379: PUSH
31380: LD_VAR 0 8
31384: ARRAY
31385: PUSH
31386: LD_INT 2
31388: ARRAY
31389: LESS
31390: IFFALSE 31428
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31392: LD_ADDR_VAR 0 6
31396: PUSH
31397: LD_VAR 0 6
31401: PPUSH
31402: LD_VAR 0 8
31406: PPUSH
31407: LD_VAR 0 7
31411: PUSH
31412: LD_VAR 0 9
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PPUSH
31421: CALL_OW 2
31425: ST_TO_ADDR
// break ;
31426: GO 31430
// end ; end ;
31428: GO 31367
31430: POP
31431: POP
// end ; end ;
31432: GO 31231
31434: POP
31435: POP
// if result and not asc then
31436: LD_VAR 0 6
31440: PUSH
31441: LD_VAR 0 4
31445: NOT
31446: AND
31447: IFFALSE 31522
// begin tmp := result ;
31449: LD_ADDR_VAR 0 9
31453: PUSH
31454: LD_VAR 0 6
31458: ST_TO_ADDR
// for i = tmp downto 1 do
31459: LD_ADDR_VAR 0 7
31463: PUSH
31464: DOUBLE
31465: LD_VAR 0 9
31469: INC
31470: ST_TO_ADDR
31471: LD_INT 1
31473: PUSH
31474: FOR_DOWNTO
31475: IFFALSE 31520
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31477: LD_ADDR_VAR 0 6
31481: PUSH
31482: LD_VAR 0 6
31486: PPUSH
31487: LD_VAR 0 9
31491: PUSH
31492: LD_VAR 0 7
31496: MINUS
31497: PUSH
31498: LD_INT 1
31500: PLUS
31501: PPUSH
31502: LD_VAR 0 9
31506: PUSH
31507: LD_VAR 0 7
31511: ARRAY
31512: PPUSH
31513: CALL_OW 1
31517: ST_TO_ADDR
31518: GO 31474
31520: POP
31521: POP
// end ; tmp := [ ] ;
31522: LD_ADDR_VAR 0 9
31526: PUSH
31527: EMPTY
31528: ST_TO_ADDR
// if mode then
31529: LD_VAR 0 5
31533: IFFALSE 31602
// begin for i = 1 to result do
31535: LD_ADDR_VAR 0 7
31539: PUSH
31540: DOUBLE
31541: LD_INT 1
31543: DEC
31544: ST_TO_ADDR
31545: LD_VAR 0 6
31549: PUSH
31550: FOR_TO
31551: IFFALSE 31590
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31553: LD_ADDR_VAR 0 9
31557: PUSH
31558: LD_VAR 0 9
31562: PPUSH
31563: LD_VAR 0 7
31567: PPUSH
31568: LD_VAR 0 6
31572: PUSH
31573: LD_VAR 0 7
31577: ARRAY
31578: PUSH
31579: LD_INT 1
31581: ARRAY
31582: PPUSH
31583: CALL_OW 1
31587: ST_TO_ADDR
31588: GO 31550
31590: POP
31591: POP
// result := tmp ;
31592: LD_ADDR_VAR 0 6
31596: PUSH
31597: LD_VAR 0 9
31601: ST_TO_ADDR
// end ; end ;
31602: LD_VAR 0 6
31606: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31607: LD_INT 0
31609: PPUSH
31610: PPUSH
31611: PPUSH
31612: PPUSH
31613: PPUSH
31614: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31615: LD_ADDR_VAR 0 5
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: EMPTY
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: ST_TO_ADDR
// if not x or not y then
31637: LD_VAR 0 2
31641: NOT
31642: PUSH
31643: LD_VAR 0 3
31647: NOT
31648: OR
31649: IFFALSE 31653
// exit ;
31651: GO 33303
// if not range then
31653: LD_VAR 0 4
31657: NOT
31658: IFFALSE 31668
// range := 10 ;
31660: LD_ADDR_VAR 0 4
31664: PUSH
31665: LD_INT 10
31667: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31668: LD_ADDR_VAR 0 8
31672: PUSH
31673: LD_INT 81
31675: PUSH
31676: LD_VAR 0 1
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 92
31687: PUSH
31688: LD_VAR 0 2
31692: PUSH
31693: LD_VAR 0 3
31697: PUSH
31698: LD_VAR 0 4
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 3
31711: PUSH
31712: LD_INT 21
31714: PUSH
31715: LD_INT 3
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: PPUSH
31731: CALL_OW 69
31735: ST_TO_ADDR
// if not tmp then
31736: LD_VAR 0 8
31740: NOT
31741: IFFALSE 31745
// exit ;
31743: GO 33303
// for i in tmp do
31745: LD_ADDR_VAR 0 6
31749: PUSH
31750: LD_VAR 0 8
31754: PUSH
31755: FOR_IN
31756: IFFALSE 33278
// begin points := [ 0 , 0 , 0 ] ;
31758: LD_ADDR_VAR 0 9
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: LD_INT 0
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: ST_TO_ADDR
// bpoints := 1 ;
31777: LD_ADDR_VAR 0 10
31781: PUSH
31782: LD_INT 1
31784: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31785: LD_VAR 0 6
31789: PPUSH
31790: CALL_OW 247
31794: PUSH
31795: LD_INT 1
31797: DOUBLE
31798: EQUAL
31799: IFTRUE 31803
31801: GO 32381
31803: POP
// begin if GetClass ( i ) = 1 then
31804: LD_VAR 0 6
31808: PPUSH
31809: CALL_OW 257
31813: PUSH
31814: LD_INT 1
31816: EQUAL
31817: IFFALSE 31838
// points := [ 10 , 5 , 3 ] ;
31819: LD_ADDR_VAR 0 9
31823: PUSH
31824: LD_INT 10
31826: PUSH
31827: LD_INT 5
31829: PUSH
31830: LD_INT 3
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31838: LD_VAR 0 6
31842: PPUSH
31843: CALL_OW 257
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 3
31853: PUSH
31854: LD_INT 4
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: LIST
31861: IN
31862: IFFALSE 31883
// points := [ 3 , 2 , 1 ] ;
31864: LD_ADDR_VAR 0 9
31868: PUSH
31869: LD_INT 3
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31883: LD_VAR 0 6
31887: PPUSH
31888: CALL_OW 257
31892: PUSH
31893: LD_INT 5
31895: EQUAL
31896: IFFALSE 31917
// points := [ 130 , 5 , 2 ] ;
31898: LD_ADDR_VAR 0 9
31902: PUSH
31903: LD_INT 130
31905: PUSH
31906: LD_INT 5
31908: PUSH
31909: LD_INT 2
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: LIST
31916: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31917: LD_VAR 0 6
31921: PPUSH
31922: CALL_OW 257
31926: PUSH
31927: LD_INT 8
31929: EQUAL
31930: IFFALSE 31951
// points := [ 35 , 35 , 30 ] ;
31932: LD_ADDR_VAR 0 9
31936: PUSH
31937: LD_INT 35
31939: PUSH
31940: LD_INT 35
31942: PUSH
31943: LD_INT 30
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: LIST
31950: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31951: LD_VAR 0 6
31955: PPUSH
31956: CALL_OW 257
31960: PUSH
31961: LD_INT 9
31963: EQUAL
31964: IFFALSE 31985
// points := [ 20 , 55 , 40 ] ;
31966: LD_ADDR_VAR 0 9
31970: PUSH
31971: LD_INT 20
31973: PUSH
31974: LD_INT 55
31976: PUSH
31977: LD_INT 40
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31985: LD_VAR 0 6
31989: PPUSH
31990: CALL_OW 257
31994: PUSH
31995: LD_INT 12
31997: PUSH
31998: LD_INT 16
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: IN
32005: IFFALSE 32026
// points := [ 5 , 3 , 2 ] ;
32007: LD_ADDR_VAR 0 9
32011: PUSH
32012: LD_INT 5
32014: PUSH
32015: LD_INT 3
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32026: LD_VAR 0 6
32030: PPUSH
32031: CALL_OW 257
32035: PUSH
32036: LD_INT 17
32038: EQUAL
32039: IFFALSE 32060
// points := [ 100 , 50 , 75 ] ;
32041: LD_ADDR_VAR 0 9
32045: PUSH
32046: LD_INT 100
32048: PUSH
32049: LD_INT 50
32051: PUSH
32052: LD_INT 75
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32060: LD_VAR 0 6
32064: PPUSH
32065: CALL_OW 257
32069: PUSH
32070: LD_INT 15
32072: EQUAL
32073: IFFALSE 32094
// points := [ 10 , 5 , 3 ] ;
32075: LD_ADDR_VAR 0 9
32079: PUSH
32080: LD_INT 10
32082: PUSH
32083: LD_INT 5
32085: PUSH
32086: LD_INT 3
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32094: LD_VAR 0 6
32098: PPUSH
32099: CALL_OW 257
32103: PUSH
32104: LD_INT 14
32106: EQUAL
32107: IFFALSE 32128
// points := [ 10 , 0 , 0 ] ;
32109: LD_ADDR_VAR 0 9
32113: PUSH
32114: LD_INT 10
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 0
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: LIST
32127: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32128: LD_VAR 0 6
32132: PPUSH
32133: CALL_OW 257
32137: PUSH
32138: LD_INT 11
32140: EQUAL
32141: IFFALSE 32162
// points := [ 30 , 10 , 5 ] ;
32143: LD_ADDR_VAR 0 9
32147: PUSH
32148: LD_INT 30
32150: PUSH
32151: LD_INT 10
32153: PUSH
32154: LD_INT 5
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: LIST
32161: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32162: LD_VAR 0 1
32166: PPUSH
32167: LD_INT 5
32169: PPUSH
32170: CALL_OW 321
32174: PUSH
32175: LD_INT 2
32177: EQUAL
32178: IFFALSE 32195
// bpoints := bpoints * 1.8 ;
32180: LD_ADDR_VAR 0 10
32184: PUSH
32185: LD_VAR 0 10
32189: PUSH
32190: LD_REAL  1.80000000000000E+0000
32193: MUL
32194: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32195: LD_VAR 0 6
32199: PPUSH
32200: CALL_OW 257
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: LD_INT 2
32210: PUSH
32211: LD_INT 3
32213: PUSH
32214: LD_INT 4
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: IN
32223: PUSH
32224: LD_VAR 0 1
32228: PPUSH
32229: LD_INT 51
32231: PPUSH
32232: CALL_OW 321
32236: PUSH
32237: LD_INT 2
32239: EQUAL
32240: AND
32241: IFFALSE 32258
// bpoints := bpoints * 1.2 ;
32243: LD_ADDR_VAR 0 10
32247: PUSH
32248: LD_VAR 0 10
32252: PUSH
32253: LD_REAL  1.20000000000000E+0000
32256: MUL
32257: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32258: LD_VAR 0 6
32262: PPUSH
32263: CALL_OW 257
32267: PUSH
32268: LD_INT 5
32270: PUSH
32271: LD_INT 7
32273: PUSH
32274: LD_INT 9
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: LIST
32281: IN
32282: PUSH
32283: LD_VAR 0 1
32287: PPUSH
32288: LD_INT 52
32290: PPUSH
32291: CALL_OW 321
32295: PUSH
32296: LD_INT 2
32298: EQUAL
32299: AND
32300: IFFALSE 32317
// bpoints := bpoints * 1.5 ;
32302: LD_ADDR_VAR 0 10
32306: PUSH
32307: LD_VAR 0 10
32311: PUSH
32312: LD_REAL  1.50000000000000E+0000
32315: MUL
32316: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32317: LD_VAR 0 1
32321: PPUSH
32322: LD_INT 66
32324: PPUSH
32325: CALL_OW 321
32329: PUSH
32330: LD_INT 2
32332: EQUAL
32333: IFFALSE 32350
// bpoints := bpoints * 1.1 ;
32335: LD_ADDR_VAR 0 10
32339: PUSH
32340: LD_VAR 0 10
32344: PUSH
32345: LD_REAL  1.10000000000000E+0000
32348: MUL
32349: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32350: LD_ADDR_VAR 0 10
32354: PUSH
32355: LD_VAR 0 10
32359: PUSH
32360: LD_VAR 0 6
32364: PPUSH
32365: LD_INT 1
32367: PPUSH
32368: CALL_OW 259
32372: PUSH
32373: LD_REAL  1.15000000000000E+0000
32376: MUL
32377: MUL
32378: ST_TO_ADDR
// end ; unit_vehicle :
32379: GO 33207
32381: LD_INT 2
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 33195
32389: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32390: LD_VAR 0 6
32394: PPUSH
32395: CALL_OW 264
32399: PUSH
32400: LD_INT 2
32402: PUSH
32403: LD_INT 42
32405: PUSH
32406: LD_INT 24
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: LIST
32413: IN
32414: IFFALSE 32435
// points := [ 25 , 5 , 3 ] ;
32416: LD_ADDR_VAR 0 9
32420: PUSH
32421: LD_INT 25
32423: PUSH
32424: LD_INT 5
32426: PUSH
32427: LD_INT 3
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32435: LD_VAR 0 6
32439: PPUSH
32440: CALL_OW 264
32444: PUSH
32445: LD_INT 4
32447: PUSH
32448: LD_INT 43
32450: PUSH
32451: LD_INT 25
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: LIST
32458: IN
32459: IFFALSE 32480
// points := [ 40 , 15 , 5 ] ;
32461: LD_ADDR_VAR 0 9
32465: PUSH
32466: LD_INT 40
32468: PUSH
32469: LD_INT 15
32471: PUSH
32472: LD_INT 5
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: LIST
32479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32480: LD_VAR 0 6
32484: PPUSH
32485: CALL_OW 264
32489: PUSH
32490: LD_INT 3
32492: PUSH
32493: LD_INT 23
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: IN
32500: IFFALSE 32521
// points := [ 7 , 25 , 8 ] ;
32502: LD_ADDR_VAR 0 9
32506: PUSH
32507: LD_INT 7
32509: PUSH
32510: LD_INT 25
32512: PUSH
32513: LD_INT 8
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: LIST
32520: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32521: LD_VAR 0 6
32525: PPUSH
32526: CALL_OW 264
32530: PUSH
32531: LD_INT 5
32533: PUSH
32534: LD_INT 27
32536: PUSH
32537: LD_INT 44
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: LIST
32544: IN
32545: IFFALSE 32566
// points := [ 14 , 50 , 16 ] ;
32547: LD_ADDR_VAR 0 9
32551: PUSH
32552: LD_INT 14
32554: PUSH
32555: LD_INT 50
32557: PUSH
32558: LD_INT 16
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: LIST
32565: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32566: LD_VAR 0 6
32570: PPUSH
32571: CALL_OW 264
32575: PUSH
32576: LD_INT 6
32578: PUSH
32579: LD_INT 46
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: IN
32586: IFFALSE 32607
// points := [ 32 , 120 , 70 ] ;
32588: LD_ADDR_VAR 0 9
32592: PUSH
32593: LD_INT 32
32595: PUSH
32596: LD_INT 120
32598: PUSH
32599: LD_INT 70
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: LIST
32606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32607: LD_VAR 0 6
32611: PPUSH
32612: CALL_OW 264
32616: PUSH
32617: LD_INT 7
32619: PUSH
32620: LD_INT 28
32622: PUSH
32623: LD_INT 45
32625: PUSH
32626: LD_INT 92
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: IN
32635: IFFALSE 32656
// points := [ 35 , 20 , 45 ] ;
32637: LD_ADDR_VAR 0 9
32641: PUSH
32642: LD_INT 35
32644: PUSH
32645: LD_INT 20
32647: PUSH
32648: LD_INT 45
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: LIST
32655: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32656: LD_VAR 0 6
32660: PPUSH
32661: CALL_OW 264
32665: PUSH
32666: LD_INT 47
32668: PUSH
32669: EMPTY
32670: LIST
32671: IN
32672: IFFALSE 32693
// points := [ 67 , 45 , 75 ] ;
32674: LD_ADDR_VAR 0 9
32678: PUSH
32679: LD_INT 67
32681: PUSH
32682: LD_INT 45
32684: PUSH
32685: LD_INT 75
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: LIST
32692: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32693: LD_VAR 0 6
32697: PPUSH
32698: CALL_OW 264
32702: PUSH
32703: LD_INT 26
32705: PUSH
32706: EMPTY
32707: LIST
32708: IN
32709: IFFALSE 32730
// points := [ 120 , 30 , 80 ] ;
32711: LD_ADDR_VAR 0 9
32715: PUSH
32716: LD_INT 120
32718: PUSH
32719: LD_INT 30
32721: PUSH
32722: LD_INT 80
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32730: LD_VAR 0 6
32734: PPUSH
32735: CALL_OW 264
32739: PUSH
32740: LD_INT 22
32742: PUSH
32743: EMPTY
32744: LIST
32745: IN
32746: IFFALSE 32767
// points := [ 40 , 1 , 1 ] ;
32748: LD_ADDR_VAR 0 9
32752: PUSH
32753: LD_INT 40
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: LIST
32766: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32767: LD_VAR 0 6
32771: PPUSH
32772: CALL_OW 264
32776: PUSH
32777: LD_INT 29
32779: PUSH
32780: EMPTY
32781: LIST
32782: IN
32783: IFFALSE 32804
// points := [ 70 , 200 , 400 ] ;
32785: LD_ADDR_VAR 0 9
32789: PUSH
32790: LD_INT 70
32792: PUSH
32793: LD_INT 200
32795: PUSH
32796: LD_INT 400
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32804: LD_VAR 0 6
32808: PPUSH
32809: CALL_OW 264
32813: PUSH
32814: LD_INT 14
32816: PUSH
32817: LD_INT 53
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: IN
32824: IFFALSE 32845
// points := [ 40 , 10 , 20 ] ;
32826: LD_ADDR_VAR 0 9
32830: PUSH
32831: LD_INT 40
32833: PUSH
32834: LD_INT 10
32836: PUSH
32837: LD_INT 20
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: LIST
32844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32845: LD_VAR 0 6
32849: PPUSH
32850: CALL_OW 264
32854: PUSH
32855: LD_INT 9
32857: PUSH
32858: EMPTY
32859: LIST
32860: IN
32861: IFFALSE 32882
// points := [ 5 , 70 , 20 ] ;
32863: LD_ADDR_VAR 0 9
32867: PUSH
32868: LD_INT 5
32870: PUSH
32871: LD_INT 70
32873: PUSH
32874: LD_INT 20
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32882: LD_VAR 0 6
32886: PPUSH
32887: CALL_OW 264
32891: PUSH
32892: LD_INT 10
32894: PUSH
32895: EMPTY
32896: LIST
32897: IN
32898: IFFALSE 32919
// points := [ 35 , 110 , 70 ] ;
32900: LD_ADDR_VAR 0 9
32904: PUSH
32905: LD_INT 35
32907: PUSH
32908: LD_INT 110
32910: PUSH
32911: LD_INT 70
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: LIST
32918: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32919: LD_VAR 0 6
32923: PPUSH
32924: CALL_OW 265
32928: PUSH
32929: LD_INT 25
32931: EQUAL
32932: IFFALSE 32953
// points := [ 80 , 65 , 100 ] ;
32934: LD_ADDR_VAR 0 9
32938: PUSH
32939: LD_INT 80
32941: PUSH
32942: LD_INT 65
32944: PUSH
32945: LD_INT 100
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: LIST
32952: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32953: LD_VAR 0 6
32957: PPUSH
32958: CALL_OW 263
32962: PUSH
32963: LD_INT 1
32965: EQUAL
32966: IFFALSE 33001
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32968: LD_ADDR_VAR 0 10
32972: PUSH
32973: LD_VAR 0 10
32977: PUSH
32978: LD_VAR 0 6
32982: PPUSH
32983: CALL_OW 311
32987: PPUSH
32988: LD_INT 3
32990: PPUSH
32991: CALL_OW 259
32995: PUSH
32996: LD_INT 4
32998: MUL
32999: MUL
33000: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33001: LD_VAR 0 6
33005: PPUSH
33006: CALL_OW 263
33010: PUSH
33011: LD_INT 2
33013: EQUAL
33014: IFFALSE 33065
// begin j := IsControledBy ( i ) ;
33016: LD_ADDR_VAR 0 7
33020: PUSH
33021: LD_VAR 0 6
33025: PPUSH
33026: CALL_OW 312
33030: ST_TO_ADDR
// if j then
33031: LD_VAR 0 7
33035: IFFALSE 33065
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33037: LD_ADDR_VAR 0 10
33041: PUSH
33042: LD_VAR 0 10
33046: PUSH
33047: LD_VAR 0 7
33051: PPUSH
33052: LD_INT 3
33054: PPUSH
33055: CALL_OW 259
33059: PUSH
33060: LD_INT 3
33062: MUL
33063: MUL
33064: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33065: LD_VAR 0 6
33069: PPUSH
33070: CALL_OW 264
33074: PUSH
33075: LD_INT 5
33077: PUSH
33078: LD_INT 6
33080: PUSH
33081: LD_INT 46
33083: PUSH
33084: LD_INT 44
33086: PUSH
33087: LD_INT 47
33089: PUSH
33090: LD_INT 45
33092: PUSH
33093: LD_INT 28
33095: PUSH
33096: LD_INT 7
33098: PUSH
33099: LD_INT 27
33101: PUSH
33102: LD_INT 29
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: IN
33117: PUSH
33118: LD_VAR 0 1
33122: PPUSH
33123: LD_INT 52
33125: PPUSH
33126: CALL_OW 321
33130: PUSH
33131: LD_INT 2
33133: EQUAL
33134: AND
33135: IFFALSE 33152
// bpoints := bpoints * 1.2 ;
33137: LD_ADDR_VAR 0 10
33141: PUSH
33142: LD_VAR 0 10
33146: PUSH
33147: LD_REAL  1.20000000000000E+0000
33150: MUL
33151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33152: LD_VAR 0 6
33156: PPUSH
33157: CALL_OW 264
33161: PUSH
33162: LD_INT 6
33164: PUSH
33165: LD_INT 46
33167: PUSH
33168: LD_INT 47
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: LIST
33175: IN
33176: IFFALSE 33193
// bpoints := bpoints * 1.2 ;
33178: LD_ADDR_VAR 0 10
33182: PUSH
33183: LD_VAR 0 10
33187: PUSH
33188: LD_REAL  1.20000000000000E+0000
33191: MUL
33192: ST_TO_ADDR
// end ; unit_building :
33193: GO 33207
33195: LD_INT 3
33197: DOUBLE
33198: EQUAL
33199: IFTRUE 33203
33201: GO 33206
33203: POP
// ; end ;
33204: GO 33207
33206: POP
// for j = 1 to 3 do
33207: LD_ADDR_VAR 0 7
33211: PUSH
33212: DOUBLE
33213: LD_INT 1
33215: DEC
33216: ST_TO_ADDR
33217: LD_INT 3
33219: PUSH
33220: FOR_TO
33221: IFFALSE 33274
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33223: LD_ADDR_VAR 0 5
33227: PUSH
33228: LD_VAR 0 5
33232: PPUSH
33233: LD_VAR 0 7
33237: PPUSH
33238: LD_VAR 0 5
33242: PUSH
33243: LD_VAR 0 7
33247: ARRAY
33248: PUSH
33249: LD_VAR 0 9
33253: PUSH
33254: LD_VAR 0 7
33258: ARRAY
33259: PUSH
33260: LD_VAR 0 10
33264: MUL
33265: PLUS
33266: PPUSH
33267: CALL_OW 1
33271: ST_TO_ADDR
33272: GO 33220
33274: POP
33275: POP
// end ;
33276: GO 31755
33278: POP
33279: POP
// result := Replace ( result , 4 , tmp ) ;
33280: LD_ADDR_VAR 0 5
33284: PUSH
33285: LD_VAR 0 5
33289: PPUSH
33290: LD_INT 4
33292: PPUSH
33293: LD_VAR 0 8
33297: PPUSH
33298: CALL_OW 1
33302: ST_TO_ADDR
// end ;
33303: LD_VAR 0 5
33307: RET
// export function DangerAtRange ( unit , range ) ; begin
33308: LD_INT 0
33310: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33311: LD_ADDR_VAR 0 3
33315: PUSH
33316: LD_VAR 0 1
33320: PPUSH
33321: CALL_OW 255
33325: PPUSH
33326: LD_VAR 0 1
33330: PPUSH
33331: CALL_OW 250
33335: PPUSH
33336: LD_VAR 0 1
33340: PPUSH
33341: CALL_OW 251
33345: PPUSH
33346: LD_VAR 0 2
33350: PPUSH
33351: CALL 31607 0 4
33355: ST_TO_ADDR
// end ;
33356: LD_VAR 0 3
33360: RET
// export function DangerInArea ( side , area ) ; begin
33361: LD_INT 0
33363: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33364: LD_ADDR_VAR 0 3
33368: PUSH
33369: LD_VAR 0 2
33373: PPUSH
33374: LD_INT 81
33376: PUSH
33377: LD_VAR 0 1
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PPUSH
33386: CALL_OW 70
33390: ST_TO_ADDR
// end ;
33391: LD_VAR 0 3
33395: RET
// export function IsExtension ( b ) ; begin
33396: LD_INT 0
33398: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33399: LD_ADDR_VAR 0 2
33403: PUSH
33404: LD_VAR 0 1
33408: PUSH
33409: LD_INT 23
33411: PUSH
33412: LD_INT 20
33414: PUSH
33415: LD_INT 22
33417: PUSH
33418: LD_INT 17
33420: PUSH
33421: LD_INT 24
33423: PUSH
33424: LD_INT 21
33426: PUSH
33427: LD_INT 19
33429: PUSH
33430: LD_INT 16
33432: PUSH
33433: LD_INT 25
33435: PUSH
33436: LD_INT 18
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: IN
33451: ST_TO_ADDR
// end ;
33452: LD_VAR 0 2
33456: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33457: LD_INT 0
33459: PPUSH
33460: PPUSH
33461: PPUSH
// result := [ ] ;
33462: LD_ADDR_VAR 0 4
33466: PUSH
33467: EMPTY
33468: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33469: LD_ADDR_VAR 0 5
33473: PUSH
33474: LD_VAR 0 2
33478: PPUSH
33479: LD_INT 21
33481: PUSH
33482: LD_INT 3
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PPUSH
33489: CALL_OW 70
33493: ST_TO_ADDR
// if not tmp then
33494: LD_VAR 0 5
33498: NOT
33499: IFFALSE 33503
// exit ;
33501: GO 33567
// if checkLink then
33503: LD_VAR 0 3
33507: IFFALSE 33557
// begin for i in tmp do
33509: LD_ADDR_VAR 0 6
33513: PUSH
33514: LD_VAR 0 5
33518: PUSH
33519: FOR_IN
33520: IFFALSE 33555
// if GetBase ( i ) <> base then
33522: LD_VAR 0 6
33526: PPUSH
33527: CALL_OW 274
33531: PUSH
33532: LD_VAR 0 1
33536: NONEQUAL
33537: IFFALSE 33553
// ComLinkToBase ( base , i ) ;
33539: LD_VAR 0 1
33543: PPUSH
33544: LD_VAR 0 6
33548: PPUSH
33549: CALL_OW 169
33553: GO 33519
33555: POP
33556: POP
// end ; result := tmp ;
33557: LD_ADDR_VAR 0 4
33561: PUSH
33562: LD_VAR 0 5
33566: ST_TO_ADDR
// end ;
33567: LD_VAR 0 4
33571: RET
// export function ComComplete ( units , b ) ; var i ; begin
33572: LD_INT 0
33574: PPUSH
33575: PPUSH
// if not units then
33576: LD_VAR 0 1
33580: NOT
33581: IFFALSE 33585
// exit ;
33583: GO 33675
// for i in units do
33585: LD_ADDR_VAR 0 4
33589: PUSH
33590: LD_VAR 0 1
33594: PUSH
33595: FOR_IN
33596: IFFALSE 33673
// if BuildingStatus ( b ) = bs_build then
33598: LD_VAR 0 2
33602: PPUSH
33603: CALL_OW 461
33607: PUSH
33608: LD_INT 1
33610: EQUAL
33611: IFFALSE 33671
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33613: LD_VAR 0 4
33617: PPUSH
33618: LD_STRING h
33620: PUSH
33621: LD_VAR 0 2
33625: PPUSH
33626: CALL_OW 250
33630: PUSH
33631: LD_VAR 0 2
33635: PPUSH
33636: CALL_OW 251
33640: PUSH
33641: LD_VAR 0 2
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: PUSH
33664: EMPTY
33665: LIST
33666: PPUSH
33667: CALL_OW 446
33671: GO 33595
33673: POP
33674: POP
// end ;
33675: LD_VAR 0 3
33679: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33680: LD_INT 0
33682: PPUSH
33683: PPUSH
33684: PPUSH
33685: PPUSH
33686: PPUSH
33687: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33688: LD_VAR 0 1
33692: NOT
33693: PUSH
33694: LD_VAR 0 1
33698: PPUSH
33699: CALL_OW 263
33703: PUSH
33704: LD_INT 2
33706: NONEQUAL
33707: OR
33708: IFFALSE 33712
// exit ;
33710: GO 34028
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33712: LD_ADDR_VAR 0 6
33716: PUSH
33717: LD_INT 22
33719: PUSH
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 255
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 2
33736: PUSH
33737: LD_INT 30
33739: PUSH
33740: LD_INT 36
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 34
33749: PUSH
33750: LD_INT 31
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: LIST
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PPUSH
33766: CALL_OW 69
33770: ST_TO_ADDR
// if not tmp then
33771: LD_VAR 0 6
33775: NOT
33776: IFFALSE 33780
// exit ;
33778: GO 34028
// result := [ ] ;
33780: LD_ADDR_VAR 0 2
33784: PUSH
33785: EMPTY
33786: ST_TO_ADDR
// for i in tmp do
33787: LD_ADDR_VAR 0 3
33791: PUSH
33792: LD_VAR 0 6
33796: PUSH
33797: FOR_IN
33798: IFFALSE 33869
// begin t := UnitsInside ( i ) ;
33800: LD_ADDR_VAR 0 4
33804: PUSH
33805: LD_VAR 0 3
33809: PPUSH
33810: CALL_OW 313
33814: ST_TO_ADDR
// if t then
33815: LD_VAR 0 4
33819: IFFALSE 33867
// for j in t do
33821: LD_ADDR_VAR 0 7
33825: PUSH
33826: LD_VAR 0 4
33830: PUSH
33831: FOR_IN
33832: IFFALSE 33865
// result := Replace ( result , result + 1 , j ) ;
33834: LD_ADDR_VAR 0 2
33838: PUSH
33839: LD_VAR 0 2
33843: PPUSH
33844: LD_VAR 0 2
33848: PUSH
33849: LD_INT 1
33851: PLUS
33852: PPUSH
33853: LD_VAR 0 7
33857: PPUSH
33858: CALL_OW 1
33862: ST_TO_ADDR
33863: GO 33831
33865: POP
33866: POP
// end ;
33867: GO 33797
33869: POP
33870: POP
// if not result then
33871: LD_VAR 0 2
33875: NOT
33876: IFFALSE 33880
// exit ;
33878: GO 34028
// mech := result [ 1 ] ;
33880: LD_ADDR_VAR 0 5
33884: PUSH
33885: LD_VAR 0 2
33889: PUSH
33890: LD_INT 1
33892: ARRAY
33893: ST_TO_ADDR
// if result > 1 then
33894: LD_VAR 0 2
33898: PUSH
33899: LD_INT 1
33901: GREATER
33902: IFFALSE 34014
// begin for i = 2 to result do
33904: LD_ADDR_VAR 0 3
33908: PUSH
33909: DOUBLE
33910: LD_INT 2
33912: DEC
33913: ST_TO_ADDR
33914: LD_VAR 0 2
33918: PUSH
33919: FOR_TO
33920: IFFALSE 34012
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33922: LD_ADDR_VAR 0 4
33926: PUSH
33927: LD_VAR 0 2
33931: PUSH
33932: LD_VAR 0 3
33936: ARRAY
33937: PPUSH
33938: LD_INT 3
33940: PPUSH
33941: CALL_OW 259
33945: PUSH
33946: LD_VAR 0 2
33950: PUSH
33951: LD_VAR 0 3
33955: ARRAY
33956: PPUSH
33957: CALL_OW 432
33961: MINUS
33962: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33963: LD_VAR 0 4
33967: PUSH
33968: LD_VAR 0 5
33972: PPUSH
33973: LD_INT 3
33975: PPUSH
33976: CALL_OW 259
33980: PUSH
33981: LD_VAR 0 5
33985: PPUSH
33986: CALL_OW 432
33990: MINUS
33991: GREATEREQUAL
33992: IFFALSE 34010
// mech := result [ i ] ;
33994: LD_ADDR_VAR 0 5
33998: PUSH
33999: LD_VAR 0 2
34003: PUSH
34004: LD_VAR 0 3
34008: ARRAY
34009: ST_TO_ADDR
// end ;
34010: GO 33919
34012: POP
34013: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34014: LD_VAR 0 1
34018: PPUSH
34019: LD_VAR 0 5
34023: PPUSH
34024: CALL_OW 135
// end ;
34028: LD_VAR 0 2
34032: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34033: LD_INT 0
34035: PPUSH
34036: PPUSH
34037: PPUSH
34038: PPUSH
34039: PPUSH
34040: PPUSH
34041: PPUSH
34042: PPUSH
34043: PPUSH
34044: PPUSH
34045: PPUSH
34046: PPUSH
34047: PPUSH
// result := [ ] ;
34048: LD_ADDR_VAR 0 7
34052: PUSH
34053: EMPTY
34054: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34055: LD_VAR 0 1
34059: PPUSH
34060: CALL_OW 266
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: IN
34075: NOT
34076: IFFALSE 34080
// exit ;
34078: GO 35714
// if name then
34080: LD_VAR 0 3
34084: IFFALSE 34100
// SetBName ( base_dep , name ) ;
34086: LD_VAR 0 1
34090: PPUSH
34091: LD_VAR 0 3
34095: PPUSH
34096: CALL_OW 500
// base := GetBase ( base_dep ) ;
34100: LD_ADDR_VAR 0 15
34104: PUSH
34105: LD_VAR 0 1
34109: PPUSH
34110: CALL_OW 274
34114: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34115: LD_ADDR_VAR 0 16
34119: PUSH
34120: LD_VAR 0 1
34124: PPUSH
34125: CALL_OW 255
34129: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34130: LD_ADDR_VAR 0 17
34134: PUSH
34135: LD_VAR 0 1
34139: PPUSH
34140: CALL_OW 248
34144: ST_TO_ADDR
// if sources then
34145: LD_VAR 0 5
34149: IFFALSE 34196
// for i = 1 to 3 do
34151: LD_ADDR_VAR 0 8
34155: PUSH
34156: DOUBLE
34157: LD_INT 1
34159: DEC
34160: ST_TO_ADDR
34161: LD_INT 3
34163: PUSH
34164: FOR_TO
34165: IFFALSE 34194
// AddResourceType ( base , i , sources [ i ] ) ;
34167: LD_VAR 0 15
34171: PPUSH
34172: LD_VAR 0 8
34176: PPUSH
34177: LD_VAR 0 5
34181: PUSH
34182: LD_VAR 0 8
34186: ARRAY
34187: PPUSH
34188: CALL_OW 276
34192: GO 34164
34194: POP
34195: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34196: LD_ADDR_VAR 0 18
34200: PUSH
34201: LD_VAR 0 15
34205: PPUSH
34206: LD_VAR 0 2
34210: PPUSH
34211: LD_INT 1
34213: PPUSH
34214: CALL 33457 0 3
34218: ST_TO_ADDR
// InitHc ;
34219: CALL_OW 19
// InitUc ;
34223: CALL_OW 18
// uc_side := side ;
34227: LD_ADDR_OWVAR 20
34231: PUSH
34232: LD_VAR 0 16
34236: ST_TO_ADDR
// uc_nation := nation ;
34237: LD_ADDR_OWVAR 21
34241: PUSH
34242: LD_VAR 0 17
34246: ST_TO_ADDR
// if buildings then
34247: LD_VAR 0 18
34251: IFFALSE 35573
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34253: LD_ADDR_VAR 0 19
34257: PUSH
34258: LD_VAR 0 18
34262: PPUSH
34263: LD_INT 2
34265: PUSH
34266: LD_INT 30
34268: PUSH
34269: LD_INT 29
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 30
34278: PUSH
34279: LD_INT 30
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: LIST
34290: PPUSH
34291: CALL_OW 72
34295: ST_TO_ADDR
// if tmp then
34296: LD_VAR 0 19
34300: IFFALSE 34348
// for i in tmp do
34302: LD_ADDR_VAR 0 8
34306: PUSH
34307: LD_VAR 0 19
34311: PUSH
34312: FOR_IN
34313: IFFALSE 34346
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34315: LD_VAR 0 8
34319: PPUSH
34320: CALL_OW 250
34324: PPUSH
34325: LD_VAR 0 8
34329: PPUSH
34330: CALL_OW 251
34334: PPUSH
34335: LD_VAR 0 16
34339: PPUSH
34340: CALL_OW 441
34344: GO 34312
34346: POP
34347: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34348: LD_VAR 0 18
34352: PPUSH
34353: LD_INT 2
34355: PUSH
34356: LD_INT 30
34358: PUSH
34359: LD_INT 32
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 30
34368: PUSH
34369: LD_INT 33
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: LIST
34380: PPUSH
34381: CALL_OW 72
34385: IFFALSE 34473
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34387: LD_ADDR_VAR 0 8
34391: PUSH
34392: LD_VAR 0 18
34396: PPUSH
34397: LD_INT 2
34399: PUSH
34400: LD_INT 30
34402: PUSH
34403: LD_INT 32
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 30
34412: PUSH
34413: LD_INT 33
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: LIST
34424: PPUSH
34425: CALL_OW 72
34429: PUSH
34430: FOR_IN
34431: IFFALSE 34471
// begin if not GetBWeapon ( i ) then
34433: LD_VAR 0 8
34437: PPUSH
34438: CALL_OW 269
34442: NOT
34443: IFFALSE 34469
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34445: LD_VAR 0 8
34449: PPUSH
34450: LD_VAR 0 8
34454: PPUSH
34455: LD_VAR 0 2
34459: PPUSH
34460: CALL 35719 0 2
34464: PPUSH
34465: CALL_OW 431
// end ;
34469: GO 34430
34471: POP
34472: POP
// end ; for i = 1 to personel do
34473: LD_ADDR_VAR 0 8
34477: PUSH
34478: DOUBLE
34479: LD_INT 1
34481: DEC
34482: ST_TO_ADDR
34483: LD_VAR 0 6
34487: PUSH
34488: FOR_TO
34489: IFFALSE 35553
// begin if i > 4 then
34491: LD_VAR 0 8
34495: PUSH
34496: LD_INT 4
34498: GREATER
34499: IFFALSE 34503
// break ;
34501: GO 35553
// case i of 1 :
34503: LD_VAR 0 8
34507: PUSH
34508: LD_INT 1
34510: DOUBLE
34511: EQUAL
34512: IFTRUE 34516
34514: GO 34596
34516: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34517: LD_ADDR_VAR 0 12
34521: PUSH
34522: LD_VAR 0 18
34526: PPUSH
34527: LD_INT 22
34529: PUSH
34530: LD_VAR 0 16
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 58
34541: PUSH
34542: EMPTY
34543: LIST
34544: PUSH
34545: LD_INT 2
34547: PUSH
34548: LD_INT 30
34550: PUSH
34551: LD_INT 32
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 30
34560: PUSH
34561: LD_INT 4
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 30
34570: PUSH
34571: LD_INT 5
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: PPUSH
34589: CALL_OW 72
34593: ST_TO_ADDR
34594: GO 34818
34596: LD_INT 2
34598: DOUBLE
34599: EQUAL
34600: IFTRUE 34604
34602: GO 34666
34604: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34605: LD_ADDR_VAR 0 12
34609: PUSH
34610: LD_VAR 0 18
34614: PPUSH
34615: LD_INT 22
34617: PUSH
34618: LD_VAR 0 16
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 2
34629: PUSH
34630: LD_INT 30
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 30
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PPUSH
34659: CALL_OW 72
34663: ST_TO_ADDR
34664: GO 34818
34666: LD_INT 3
34668: DOUBLE
34669: EQUAL
34670: IFTRUE 34674
34672: GO 34736
34674: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34675: LD_ADDR_VAR 0 12
34679: PUSH
34680: LD_VAR 0 18
34684: PPUSH
34685: LD_INT 22
34687: PUSH
34688: LD_VAR 0 16
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 2
34699: PUSH
34700: LD_INT 30
34702: PUSH
34703: LD_INT 2
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 30
34712: PUSH
34713: LD_INT 3
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PPUSH
34729: CALL_OW 72
34733: ST_TO_ADDR
34734: GO 34818
34736: LD_INT 4
34738: DOUBLE
34739: EQUAL
34740: IFTRUE 34744
34742: GO 34817
34744: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34745: LD_ADDR_VAR 0 12
34749: PUSH
34750: LD_VAR 0 18
34754: PPUSH
34755: LD_INT 22
34757: PUSH
34758: LD_VAR 0 16
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: LD_INT 30
34772: PUSH
34773: LD_INT 6
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 30
34782: PUSH
34783: LD_INT 7
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 30
34792: PUSH
34793: LD_INT 8
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PPUSH
34810: CALL_OW 72
34814: ST_TO_ADDR
34815: GO 34818
34817: POP
// if i = 1 then
34818: LD_VAR 0 8
34822: PUSH
34823: LD_INT 1
34825: EQUAL
34826: IFFALSE 34937
// begin tmp := [ ] ;
34828: LD_ADDR_VAR 0 19
34832: PUSH
34833: EMPTY
34834: ST_TO_ADDR
// for j in f do
34835: LD_ADDR_VAR 0 9
34839: PUSH
34840: LD_VAR 0 12
34844: PUSH
34845: FOR_IN
34846: IFFALSE 34919
// if GetBType ( j ) = b_bunker then
34848: LD_VAR 0 9
34852: PPUSH
34853: CALL_OW 266
34857: PUSH
34858: LD_INT 32
34860: EQUAL
34861: IFFALSE 34888
// tmp := Insert ( tmp , 1 , j ) else
34863: LD_ADDR_VAR 0 19
34867: PUSH
34868: LD_VAR 0 19
34872: PPUSH
34873: LD_INT 1
34875: PPUSH
34876: LD_VAR 0 9
34880: PPUSH
34881: CALL_OW 2
34885: ST_TO_ADDR
34886: GO 34917
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34888: LD_ADDR_VAR 0 19
34892: PUSH
34893: LD_VAR 0 19
34897: PPUSH
34898: LD_VAR 0 19
34902: PUSH
34903: LD_INT 1
34905: PLUS
34906: PPUSH
34907: LD_VAR 0 9
34911: PPUSH
34912: CALL_OW 2
34916: ST_TO_ADDR
34917: GO 34845
34919: POP
34920: POP
// if tmp then
34921: LD_VAR 0 19
34925: IFFALSE 34937
// f := tmp ;
34927: LD_ADDR_VAR 0 12
34931: PUSH
34932: LD_VAR 0 19
34936: ST_TO_ADDR
// end ; x := personel [ i ] ;
34937: LD_ADDR_VAR 0 13
34941: PUSH
34942: LD_VAR 0 6
34946: PUSH
34947: LD_VAR 0 8
34951: ARRAY
34952: ST_TO_ADDR
// if x = - 1 then
34953: LD_VAR 0 13
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: EQUAL
34962: IFFALSE 35171
// begin for j in f do
34964: LD_ADDR_VAR 0 9
34968: PUSH
34969: LD_VAR 0 12
34973: PUSH
34974: FOR_IN
34975: IFFALSE 35167
// repeat InitHc ;
34977: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34981: LD_VAR 0 9
34985: PPUSH
34986: CALL_OW 266
34990: PUSH
34991: LD_INT 5
34993: EQUAL
34994: IFFALSE 35064
// begin if UnitsInside ( j ) < 3 then
34996: LD_VAR 0 9
35000: PPUSH
35001: CALL_OW 313
35005: PUSH
35006: LD_INT 3
35008: LESS
35009: IFFALSE 35045
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35011: LD_INT 0
35013: PPUSH
35014: LD_INT 5
35016: PUSH
35017: LD_INT 8
35019: PUSH
35020: LD_INT 9
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: LIST
35027: PUSH
35028: LD_VAR 0 17
35032: ARRAY
35033: PPUSH
35034: LD_VAR 0 4
35038: PPUSH
35039: CALL_OW 380
35043: GO 35062
// PrepareHuman ( false , i , skill ) ;
35045: LD_INT 0
35047: PPUSH
35048: LD_VAR 0 8
35052: PPUSH
35053: LD_VAR 0 4
35057: PPUSH
35058: CALL_OW 380
// end else
35062: GO 35081
// PrepareHuman ( false , i , skill ) ;
35064: LD_INT 0
35066: PPUSH
35067: LD_VAR 0 8
35071: PPUSH
35072: LD_VAR 0 4
35076: PPUSH
35077: CALL_OW 380
// un := CreateHuman ;
35081: LD_ADDR_VAR 0 14
35085: PUSH
35086: CALL_OW 44
35090: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35091: LD_ADDR_VAR 0 7
35095: PUSH
35096: LD_VAR 0 7
35100: PPUSH
35101: LD_INT 1
35103: PPUSH
35104: LD_VAR 0 14
35108: PPUSH
35109: CALL_OW 2
35113: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35114: LD_VAR 0 14
35118: PPUSH
35119: LD_VAR 0 9
35123: PPUSH
35124: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35128: LD_VAR 0 9
35132: PPUSH
35133: CALL_OW 313
35137: PUSH
35138: LD_INT 6
35140: EQUAL
35141: PUSH
35142: LD_VAR 0 9
35146: PPUSH
35147: CALL_OW 266
35151: PUSH
35152: LD_INT 32
35154: PUSH
35155: LD_INT 31
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: IN
35162: OR
35163: IFFALSE 34977
35165: GO 34974
35167: POP
35168: POP
// end else
35169: GO 35551
// for j = 1 to x do
35171: LD_ADDR_VAR 0 9
35175: PUSH
35176: DOUBLE
35177: LD_INT 1
35179: DEC
35180: ST_TO_ADDR
35181: LD_VAR 0 13
35185: PUSH
35186: FOR_TO
35187: IFFALSE 35549
// begin InitHc ;
35189: CALL_OW 19
// if not f then
35193: LD_VAR 0 12
35197: NOT
35198: IFFALSE 35287
// begin PrepareHuman ( false , i , skill ) ;
35200: LD_INT 0
35202: PPUSH
35203: LD_VAR 0 8
35207: PPUSH
35208: LD_VAR 0 4
35212: PPUSH
35213: CALL_OW 380
// un := CreateHuman ;
35217: LD_ADDR_VAR 0 14
35221: PUSH
35222: CALL_OW 44
35226: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35227: LD_ADDR_VAR 0 7
35231: PUSH
35232: LD_VAR 0 7
35236: PPUSH
35237: LD_INT 1
35239: PPUSH
35240: LD_VAR 0 14
35244: PPUSH
35245: CALL_OW 2
35249: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35250: LD_VAR 0 14
35254: PPUSH
35255: LD_VAR 0 1
35259: PPUSH
35260: CALL_OW 250
35264: PPUSH
35265: LD_VAR 0 1
35269: PPUSH
35270: CALL_OW 251
35274: PPUSH
35275: LD_INT 10
35277: PPUSH
35278: LD_INT 0
35280: PPUSH
35281: CALL_OW 50
// continue ;
35285: GO 35186
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35287: LD_VAR 0 12
35291: PUSH
35292: LD_INT 1
35294: ARRAY
35295: PPUSH
35296: CALL_OW 313
35300: PUSH
35301: LD_VAR 0 12
35305: PUSH
35306: LD_INT 1
35308: ARRAY
35309: PPUSH
35310: CALL_OW 266
35314: PUSH
35315: LD_INT 32
35317: PUSH
35318: LD_INT 31
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: IN
35325: AND
35326: PUSH
35327: LD_VAR 0 12
35331: PUSH
35332: LD_INT 1
35334: ARRAY
35335: PPUSH
35336: CALL_OW 313
35340: PUSH
35341: LD_INT 6
35343: EQUAL
35344: OR
35345: IFFALSE 35365
// f := Delete ( f , 1 ) ;
35347: LD_ADDR_VAR 0 12
35351: PUSH
35352: LD_VAR 0 12
35356: PPUSH
35357: LD_INT 1
35359: PPUSH
35360: CALL_OW 3
35364: ST_TO_ADDR
// if not f then
35365: LD_VAR 0 12
35369: NOT
35370: IFFALSE 35388
// begin x := x + 2 ;
35372: LD_ADDR_VAR 0 13
35376: PUSH
35377: LD_VAR 0 13
35381: PUSH
35382: LD_INT 2
35384: PLUS
35385: ST_TO_ADDR
// continue ;
35386: GO 35186
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35388: LD_VAR 0 12
35392: PUSH
35393: LD_INT 1
35395: ARRAY
35396: PPUSH
35397: CALL_OW 266
35401: PUSH
35402: LD_INT 5
35404: EQUAL
35405: IFFALSE 35479
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35407: LD_VAR 0 12
35411: PUSH
35412: LD_INT 1
35414: ARRAY
35415: PPUSH
35416: CALL_OW 313
35420: PUSH
35421: LD_INT 3
35423: LESS
35424: IFFALSE 35460
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35426: LD_INT 0
35428: PPUSH
35429: LD_INT 5
35431: PUSH
35432: LD_INT 8
35434: PUSH
35435: LD_INT 9
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: LIST
35442: PUSH
35443: LD_VAR 0 17
35447: ARRAY
35448: PPUSH
35449: LD_VAR 0 4
35453: PPUSH
35454: CALL_OW 380
35458: GO 35477
// PrepareHuman ( false , i , skill ) ;
35460: LD_INT 0
35462: PPUSH
35463: LD_VAR 0 8
35467: PPUSH
35468: LD_VAR 0 4
35472: PPUSH
35473: CALL_OW 380
// end else
35477: GO 35496
// PrepareHuman ( false , i , skill ) ;
35479: LD_INT 0
35481: PPUSH
35482: LD_VAR 0 8
35486: PPUSH
35487: LD_VAR 0 4
35491: PPUSH
35492: CALL_OW 380
// un := CreateHuman ;
35496: LD_ADDR_VAR 0 14
35500: PUSH
35501: CALL_OW 44
35505: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35506: LD_ADDR_VAR 0 7
35510: PUSH
35511: LD_VAR 0 7
35515: PPUSH
35516: LD_INT 1
35518: PPUSH
35519: LD_VAR 0 14
35523: PPUSH
35524: CALL_OW 2
35528: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35529: LD_VAR 0 14
35533: PPUSH
35534: LD_VAR 0 12
35538: PUSH
35539: LD_INT 1
35541: ARRAY
35542: PPUSH
35543: CALL_OW 52
// end ;
35547: GO 35186
35549: POP
35550: POP
// end ;
35551: GO 34488
35553: POP
35554: POP
// result := result ^ buildings ;
35555: LD_ADDR_VAR 0 7
35559: PUSH
35560: LD_VAR 0 7
35564: PUSH
35565: LD_VAR 0 18
35569: ADD
35570: ST_TO_ADDR
// end else
35571: GO 35714
// begin for i = 1 to personel do
35573: LD_ADDR_VAR 0 8
35577: PUSH
35578: DOUBLE
35579: LD_INT 1
35581: DEC
35582: ST_TO_ADDR
35583: LD_VAR 0 6
35587: PUSH
35588: FOR_TO
35589: IFFALSE 35712
// begin if i > 4 then
35591: LD_VAR 0 8
35595: PUSH
35596: LD_INT 4
35598: GREATER
35599: IFFALSE 35603
// break ;
35601: GO 35712
// x := personel [ i ] ;
35603: LD_ADDR_VAR 0 13
35607: PUSH
35608: LD_VAR 0 6
35612: PUSH
35613: LD_VAR 0 8
35617: ARRAY
35618: ST_TO_ADDR
// if x = - 1 then
35619: LD_VAR 0 13
35623: PUSH
35624: LD_INT 1
35626: NEG
35627: EQUAL
35628: IFFALSE 35632
// continue ;
35630: GO 35588
// PrepareHuman ( false , i , skill ) ;
35632: LD_INT 0
35634: PPUSH
35635: LD_VAR 0 8
35639: PPUSH
35640: LD_VAR 0 4
35644: PPUSH
35645: CALL_OW 380
// un := CreateHuman ;
35649: LD_ADDR_VAR 0 14
35653: PUSH
35654: CALL_OW 44
35658: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35659: LD_VAR 0 14
35663: PPUSH
35664: LD_VAR 0 1
35668: PPUSH
35669: CALL_OW 250
35673: PPUSH
35674: LD_VAR 0 1
35678: PPUSH
35679: CALL_OW 251
35683: PPUSH
35684: LD_INT 10
35686: PPUSH
35687: LD_INT 0
35689: PPUSH
35690: CALL_OW 50
// result := result ^ un ;
35694: LD_ADDR_VAR 0 7
35698: PUSH
35699: LD_VAR 0 7
35703: PUSH
35704: LD_VAR 0 14
35708: ADD
35709: ST_TO_ADDR
// end ;
35710: GO 35588
35712: POP
35713: POP
// end ; end ;
35714: LD_VAR 0 7
35718: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35719: LD_INT 0
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
35726: PPUSH
35727: PPUSH
35728: PPUSH
35729: PPUSH
35730: PPUSH
35731: PPUSH
35732: PPUSH
35733: PPUSH
35734: PPUSH
35735: PPUSH
35736: PPUSH
// result := false ;
35737: LD_ADDR_VAR 0 3
35741: PUSH
35742: LD_INT 0
35744: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35745: LD_VAR 0 1
35749: NOT
35750: PUSH
35751: LD_VAR 0 1
35755: PPUSH
35756: CALL_OW 266
35760: PUSH
35761: LD_INT 32
35763: PUSH
35764: LD_INT 33
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: IN
35771: NOT
35772: OR
35773: IFFALSE 35777
// exit ;
35775: GO 36886
// nat := GetNation ( tower ) ;
35777: LD_ADDR_VAR 0 12
35781: PUSH
35782: LD_VAR 0 1
35786: PPUSH
35787: CALL_OW 248
35791: ST_TO_ADDR
// side := GetSide ( tower ) ;
35792: LD_ADDR_VAR 0 16
35796: PUSH
35797: LD_VAR 0 1
35801: PPUSH
35802: CALL_OW 255
35806: ST_TO_ADDR
// x := GetX ( tower ) ;
35807: LD_ADDR_VAR 0 10
35811: PUSH
35812: LD_VAR 0 1
35816: PPUSH
35817: CALL_OW 250
35821: ST_TO_ADDR
// y := GetY ( tower ) ;
35822: LD_ADDR_VAR 0 11
35826: PUSH
35827: LD_VAR 0 1
35831: PPUSH
35832: CALL_OW 251
35836: ST_TO_ADDR
// if not x or not y then
35837: LD_VAR 0 10
35841: NOT
35842: PUSH
35843: LD_VAR 0 11
35847: NOT
35848: OR
35849: IFFALSE 35853
// exit ;
35851: GO 36886
// weapon := 0 ;
35853: LD_ADDR_VAR 0 18
35857: PUSH
35858: LD_INT 0
35860: ST_TO_ADDR
// fac_list := [ ] ;
35861: LD_ADDR_VAR 0 17
35865: PUSH
35866: EMPTY
35867: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35868: LD_ADDR_VAR 0 6
35872: PUSH
35873: LD_VAR 0 1
35877: PPUSH
35878: CALL_OW 274
35882: PPUSH
35883: LD_VAR 0 2
35887: PPUSH
35888: LD_INT 0
35890: PPUSH
35891: CALL 33457 0 3
35895: PPUSH
35896: LD_INT 30
35898: PUSH
35899: LD_INT 3
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PPUSH
35906: CALL_OW 72
35910: ST_TO_ADDR
// if not factories then
35911: LD_VAR 0 6
35915: NOT
35916: IFFALSE 35920
// exit ;
35918: GO 36886
// for i in factories do
35920: LD_ADDR_VAR 0 8
35924: PUSH
35925: LD_VAR 0 6
35929: PUSH
35930: FOR_IN
35931: IFFALSE 35956
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35933: LD_ADDR_VAR 0 17
35937: PUSH
35938: LD_VAR 0 17
35942: PUSH
35943: LD_VAR 0 8
35947: PPUSH
35948: CALL_OW 478
35952: UNION
35953: ST_TO_ADDR
35954: GO 35930
35956: POP
35957: POP
// if not fac_list then
35958: LD_VAR 0 17
35962: NOT
35963: IFFALSE 35967
// exit ;
35965: GO 36886
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35967: LD_ADDR_VAR 0 5
35971: PUSH
35972: LD_INT 4
35974: PUSH
35975: LD_INT 5
35977: PUSH
35978: LD_INT 9
35980: PUSH
35981: LD_INT 10
35983: PUSH
35984: LD_INT 6
35986: PUSH
35987: LD_INT 7
35989: PUSH
35990: LD_INT 11
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 27
36004: PUSH
36005: LD_INT 28
36007: PUSH
36008: LD_INT 26
36010: PUSH
36011: LD_INT 30
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 43
36022: PUSH
36023: LD_INT 44
36025: PUSH
36026: LD_INT 46
36028: PUSH
36029: LD_INT 45
36031: PUSH
36032: LD_INT 47
36034: PUSH
36035: LD_INT 49
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: LIST
36050: PUSH
36051: LD_VAR 0 12
36055: ARRAY
36056: ST_TO_ADDR
// list := list isect fac_list ;
36057: LD_ADDR_VAR 0 5
36061: PUSH
36062: LD_VAR 0 5
36066: PUSH
36067: LD_VAR 0 17
36071: ISECT
36072: ST_TO_ADDR
// if not list then
36073: LD_VAR 0 5
36077: NOT
36078: IFFALSE 36082
// exit ;
36080: GO 36886
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36082: LD_VAR 0 12
36086: PUSH
36087: LD_INT 3
36089: EQUAL
36090: PUSH
36091: LD_INT 49
36093: PUSH
36094: LD_VAR 0 5
36098: IN
36099: AND
36100: PUSH
36101: LD_INT 31
36103: PPUSH
36104: LD_VAR 0 16
36108: PPUSH
36109: CALL_OW 321
36113: PUSH
36114: LD_INT 2
36116: EQUAL
36117: AND
36118: IFFALSE 36178
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36120: LD_INT 22
36122: PUSH
36123: LD_VAR 0 16
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 35
36134: PUSH
36135: LD_INT 49
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 91
36144: PUSH
36145: LD_VAR 0 1
36149: PUSH
36150: LD_INT 10
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: LIST
36162: PPUSH
36163: CALL_OW 69
36167: NOT
36168: IFFALSE 36178
// weapon := ru_time_lapser ;
36170: LD_ADDR_VAR 0 18
36174: PUSH
36175: LD_INT 49
36177: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36178: LD_VAR 0 12
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: IN
36193: PUSH
36194: LD_INT 11
36196: PUSH
36197: LD_VAR 0 5
36201: IN
36202: PUSH
36203: LD_INT 30
36205: PUSH
36206: LD_VAR 0 5
36210: IN
36211: OR
36212: AND
36213: PUSH
36214: LD_INT 6
36216: PPUSH
36217: LD_VAR 0 16
36221: PPUSH
36222: CALL_OW 321
36226: PUSH
36227: LD_INT 2
36229: EQUAL
36230: AND
36231: IFFALSE 36396
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36233: LD_INT 22
36235: PUSH
36236: LD_VAR 0 16
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 2
36247: PUSH
36248: LD_INT 35
36250: PUSH
36251: LD_INT 11
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 35
36260: PUSH
36261: LD_INT 30
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 91
36275: PUSH
36276: LD_VAR 0 1
36280: PUSH
36281: LD_INT 18
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: LIST
36293: PPUSH
36294: CALL_OW 69
36298: NOT
36299: PUSH
36300: LD_INT 22
36302: PUSH
36303: LD_VAR 0 16
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 2
36314: PUSH
36315: LD_INT 30
36317: PUSH
36318: LD_INT 32
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 30
36327: PUSH
36328: LD_INT 33
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 91
36342: PUSH
36343: LD_VAR 0 1
36347: PUSH
36348: LD_INT 12
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: LIST
36360: PUSH
36361: EMPTY
36362: LIST
36363: PPUSH
36364: CALL_OW 69
36368: PUSH
36369: LD_INT 2
36371: GREATER
36372: AND
36373: IFFALSE 36396
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36375: LD_ADDR_VAR 0 18
36379: PUSH
36380: LD_INT 11
36382: PUSH
36383: LD_INT 30
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_VAR 0 12
36394: ARRAY
36395: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36396: LD_VAR 0 18
36400: NOT
36401: PUSH
36402: LD_INT 40
36404: PPUSH
36405: LD_VAR 0 16
36409: PPUSH
36410: CALL_OW 321
36414: PUSH
36415: LD_INT 2
36417: EQUAL
36418: AND
36419: PUSH
36420: LD_INT 7
36422: PUSH
36423: LD_VAR 0 5
36427: IN
36428: PUSH
36429: LD_INT 28
36431: PUSH
36432: LD_VAR 0 5
36436: IN
36437: OR
36438: PUSH
36439: LD_INT 45
36441: PUSH
36442: LD_VAR 0 5
36446: IN
36447: OR
36448: AND
36449: IFFALSE 36703
// begin hex := GetHexInfo ( x , y ) ;
36451: LD_ADDR_VAR 0 4
36455: PUSH
36456: LD_VAR 0 10
36460: PPUSH
36461: LD_VAR 0 11
36465: PPUSH
36466: CALL_OW 546
36470: ST_TO_ADDR
// if hex [ 1 ] then
36471: LD_VAR 0 4
36475: PUSH
36476: LD_INT 1
36478: ARRAY
36479: IFFALSE 36483
// exit ;
36481: GO 36886
// height := hex [ 2 ] ;
36483: LD_ADDR_VAR 0 15
36487: PUSH
36488: LD_VAR 0 4
36492: PUSH
36493: LD_INT 2
36495: ARRAY
36496: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36497: LD_ADDR_VAR 0 14
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: LD_INT 2
36507: PUSH
36508: LD_INT 3
36510: PUSH
36511: LD_INT 5
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: ST_TO_ADDR
// for i in tmp do
36520: LD_ADDR_VAR 0 8
36524: PUSH
36525: LD_VAR 0 14
36529: PUSH
36530: FOR_IN
36531: IFFALSE 36701
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36533: LD_ADDR_VAR 0 9
36537: PUSH
36538: LD_VAR 0 10
36542: PPUSH
36543: LD_VAR 0 8
36547: PPUSH
36548: LD_INT 5
36550: PPUSH
36551: CALL_OW 272
36555: PUSH
36556: LD_VAR 0 11
36560: PPUSH
36561: LD_VAR 0 8
36565: PPUSH
36566: LD_INT 5
36568: PPUSH
36569: CALL_OW 273
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36578: LD_VAR 0 9
36582: PUSH
36583: LD_INT 1
36585: ARRAY
36586: PPUSH
36587: LD_VAR 0 9
36591: PUSH
36592: LD_INT 2
36594: ARRAY
36595: PPUSH
36596: CALL_OW 488
36600: IFFALSE 36699
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36602: LD_ADDR_VAR 0 4
36606: PUSH
36607: LD_VAR 0 9
36611: PUSH
36612: LD_INT 1
36614: ARRAY
36615: PPUSH
36616: LD_VAR 0 9
36620: PUSH
36621: LD_INT 2
36623: ARRAY
36624: PPUSH
36625: CALL_OW 546
36629: ST_TO_ADDR
// if hex [ 1 ] then
36630: LD_VAR 0 4
36634: PUSH
36635: LD_INT 1
36637: ARRAY
36638: IFFALSE 36642
// continue ;
36640: GO 36530
// h := hex [ 2 ] ;
36642: LD_ADDR_VAR 0 13
36646: PUSH
36647: LD_VAR 0 4
36651: PUSH
36652: LD_INT 2
36654: ARRAY
36655: ST_TO_ADDR
// if h + 7 < height then
36656: LD_VAR 0 13
36660: PUSH
36661: LD_INT 7
36663: PLUS
36664: PUSH
36665: LD_VAR 0 15
36669: LESS
36670: IFFALSE 36699
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36672: LD_ADDR_VAR 0 18
36676: PUSH
36677: LD_INT 7
36679: PUSH
36680: LD_INT 28
36682: PUSH
36683: LD_INT 45
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: LIST
36690: PUSH
36691: LD_VAR 0 12
36695: ARRAY
36696: ST_TO_ADDR
// break ;
36697: GO 36701
// end ; end ; end ;
36699: GO 36530
36701: POP
36702: POP
// end ; if not weapon then
36703: LD_VAR 0 18
36707: NOT
36708: IFFALSE 36768
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36710: LD_ADDR_VAR 0 5
36714: PUSH
36715: LD_VAR 0 5
36719: PUSH
36720: LD_INT 11
36722: PUSH
36723: LD_INT 30
36725: PUSH
36726: LD_INT 49
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: DIFF
36734: ST_TO_ADDR
// if not list then
36735: LD_VAR 0 5
36739: NOT
36740: IFFALSE 36744
// exit ;
36742: GO 36886
// weapon := list [ rand ( 1 , list ) ] ;
36744: LD_ADDR_VAR 0 18
36748: PUSH
36749: LD_VAR 0 5
36753: PUSH
36754: LD_INT 1
36756: PPUSH
36757: LD_VAR 0 5
36761: PPUSH
36762: CALL_OW 12
36766: ARRAY
36767: ST_TO_ADDR
// end ; if weapon then
36768: LD_VAR 0 18
36772: IFFALSE 36886
// begin tmp := CostOfWeapon ( weapon ) ;
36774: LD_ADDR_VAR 0 14
36778: PUSH
36779: LD_VAR 0 18
36783: PPUSH
36784: CALL_OW 451
36788: ST_TO_ADDR
// j := GetBase ( tower ) ;
36789: LD_ADDR_VAR 0 9
36793: PUSH
36794: LD_VAR 0 1
36798: PPUSH
36799: CALL_OW 274
36803: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36804: LD_VAR 0 9
36808: PPUSH
36809: LD_INT 1
36811: PPUSH
36812: CALL_OW 275
36816: PUSH
36817: LD_VAR 0 14
36821: PUSH
36822: LD_INT 1
36824: ARRAY
36825: GREATEREQUAL
36826: PUSH
36827: LD_VAR 0 9
36831: PPUSH
36832: LD_INT 2
36834: PPUSH
36835: CALL_OW 275
36839: PUSH
36840: LD_VAR 0 14
36844: PUSH
36845: LD_INT 2
36847: ARRAY
36848: GREATEREQUAL
36849: AND
36850: PUSH
36851: LD_VAR 0 9
36855: PPUSH
36856: LD_INT 3
36858: PPUSH
36859: CALL_OW 275
36863: PUSH
36864: LD_VAR 0 14
36868: PUSH
36869: LD_INT 3
36871: ARRAY
36872: GREATEREQUAL
36873: AND
36874: IFFALSE 36886
// result := weapon ;
36876: LD_ADDR_VAR 0 3
36880: PUSH
36881: LD_VAR 0 18
36885: ST_TO_ADDR
// end ; end ;
36886: LD_VAR 0 3
36890: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36891: LD_INT 0
36893: PPUSH
36894: PPUSH
// result := true ;
36895: LD_ADDR_VAR 0 3
36899: PUSH
36900: LD_INT 1
36902: ST_TO_ADDR
// if array1 = array2 then
36903: LD_VAR 0 1
36907: PUSH
36908: LD_VAR 0 2
36912: EQUAL
36913: IFFALSE 36973
// begin for i = 1 to array1 do
36915: LD_ADDR_VAR 0 4
36919: PUSH
36920: DOUBLE
36921: LD_INT 1
36923: DEC
36924: ST_TO_ADDR
36925: LD_VAR 0 1
36929: PUSH
36930: FOR_TO
36931: IFFALSE 36969
// if array1 [ i ] <> array2 [ i ] then
36933: LD_VAR 0 1
36937: PUSH
36938: LD_VAR 0 4
36942: ARRAY
36943: PUSH
36944: LD_VAR 0 2
36948: PUSH
36949: LD_VAR 0 4
36953: ARRAY
36954: NONEQUAL
36955: IFFALSE 36967
// begin result := false ;
36957: LD_ADDR_VAR 0 3
36961: PUSH
36962: LD_INT 0
36964: ST_TO_ADDR
// break ;
36965: GO 36969
// end ;
36967: GO 36930
36969: POP
36970: POP
// end else
36971: GO 36981
// result := false ;
36973: LD_ADDR_VAR 0 3
36977: PUSH
36978: LD_INT 0
36980: ST_TO_ADDR
// end ;
36981: LD_VAR 0 3
36985: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36986: LD_INT 0
36988: PPUSH
36989: PPUSH
// if not array1 or not array2 then
36990: LD_VAR 0 1
36994: NOT
36995: PUSH
36996: LD_VAR 0 2
37000: NOT
37001: OR
37002: IFFALSE 37006
// exit ;
37004: GO 37070
// result := true ;
37006: LD_ADDR_VAR 0 3
37010: PUSH
37011: LD_INT 1
37013: ST_TO_ADDR
// for i = 1 to array1 do
37014: LD_ADDR_VAR 0 4
37018: PUSH
37019: DOUBLE
37020: LD_INT 1
37022: DEC
37023: ST_TO_ADDR
37024: LD_VAR 0 1
37028: PUSH
37029: FOR_TO
37030: IFFALSE 37068
// if array1 [ i ] <> array2 [ i ] then
37032: LD_VAR 0 1
37036: PUSH
37037: LD_VAR 0 4
37041: ARRAY
37042: PUSH
37043: LD_VAR 0 2
37047: PUSH
37048: LD_VAR 0 4
37052: ARRAY
37053: NONEQUAL
37054: IFFALSE 37066
// begin result := false ;
37056: LD_ADDR_VAR 0 3
37060: PUSH
37061: LD_INT 0
37063: ST_TO_ADDR
// break ;
37064: GO 37068
// end ;
37066: GO 37029
37068: POP
37069: POP
// end ;
37070: LD_VAR 0 3
37074: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37075: LD_INT 0
37077: PPUSH
37078: PPUSH
37079: PPUSH
// pom := GetBase ( fac ) ;
37080: LD_ADDR_VAR 0 5
37084: PUSH
37085: LD_VAR 0 1
37089: PPUSH
37090: CALL_OW 274
37094: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37095: LD_ADDR_VAR 0 4
37099: PUSH
37100: LD_VAR 0 2
37104: PUSH
37105: LD_INT 1
37107: ARRAY
37108: PPUSH
37109: LD_VAR 0 2
37113: PUSH
37114: LD_INT 2
37116: ARRAY
37117: PPUSH
37118: LD_VAR 0 2
37122: PUSH
37123: LD_INT 3
37125: ARRAY
37126: PPUSH
37127: LD_VAR 0 2
37131: PUSH
37132: LD_INT 4
37134: ARRAY
37135: PPUSH
37136: CALL_OW 449
37140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37141: LD_ADDR_VAR 0 3
37145: PUSH
37146: LD_VAR 0 5
37150: PPUSH
37151: LD_INT 1
37153: PPUSH
37154: CALL_OW 275
37158: PUSH
37159: LD_VAR 0 4
37163: PUSH
37164: LD_INT 1
37166: ARRAY
37167: GREATEREQUAL
37168: PUSH
37169: LD_VAR 0 5
37173: PPUSH
37174: LD_INT 2
37176: PPUSH
37177: CALL_OW 275
37181: PUSH
37182: LD_VAR 0 4
37186: PUSH
37187: LD_INT 2
37189: ARRAY
37190: GREATEREQUAL
37191: AND
37192: PUSH
37193: LD_VAR 0 5
37197: PPUSH
37198: LD_INT 3
37200: PPUSH
37201: CALL_OW 275
37205: PUSH
37206: LD_VAR 0 4
37210: PUSH
37211: LD_INT 3
37213: ARRAY
37214: GREATEREQUAL
37215: AND
37216: ST_TO_ADDR
// end ;
37217: LD_VAR 0 3
37221: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37222: LD_INT 0
37224: PPUSH
37225: PPUSH
37226: PPUSH
37227: PPUSH
// pom := GetBase ( building ) ;
37228: LD_ADDR_VAR 0 3
37232: PUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: CALL_OW 274
37242: ST_TO_ADDR
// if not pom then
37243: LD_VAR 0 3
37247: NOT
37248: IFFALSE 37252
// exit ;
37250: GO 37422
// btype := GetBType ( building ) ;
37252: LD_ADDR_VAR 0 5
37256: PUSH
37257: LD_VAR 0 1
37261: PPUSH
37262: CALL_OW 266
37266: ST_TO_ADDR
// if btype = b_armoury then
37267: LD_VAR 0 5
37271: PUSH
37272: LD_INT 4
37274: EQUAL
37275: IFFALSE 37285
// btype := b_barracks ;
37277: LD_ADDR_VAR 0 5
37281: PUSH
37282: LD_INT 5
37284: ST_TO_ADDR
// if btype = b_depot then
37285: LD_VAR 0 5
37289: PUSH
37290: LD_INT 0
37292: EQUAL
37293: IFFALSE 37303
// btype := b_warehouse ;
37295: LD_ADDR_VAR 0 5
37299: PUSH
37300: LD_INT 1
37302: ST_TO_ADDR
// if btype = b_workshop then
37303: LD_VAR 0 5
37307: PUSH
37308: LD_INT 2
37310: EQUAL
37311: IFFALSE 37321
// btype := b_factory ;
37313: LD_ADDR_VAR 0 5
37317: PUSH
37318: LD_INT 3
37320: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37321: LD_ADDR_VAR 0 4
37325: PUSH
37326: LD_VAR 0 5
37330: PPUSH
37331: LD_VAR 0 1
37335: PPUSH
37336: CALL_OW 248
37340: PPUSH
37341: CALL_OW 450
37345: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37346: LD_ADDR_VAR 0 2
37350: PUSH
37351: LD_VAR 0 3
37355: PPUSH
37356: LD_INT 1
37358: PPUSH
37359: CALL_OW 275
37363: PUSH
37364: LD_VAR 0 4
37368: PUSH
37369: LD_INT 1
37371: ARRAY
37372: GREATEREQUAL
37373: PUSH
37374: LD_VAR 0 3
37378: PPUSH
37379: LD_INT 2
37381: PPUSH
37382: CALL_OW 275
37386: PUSH
37387: LD_VAR 0 4
37391: PUSH
37392: LD_INT 2
37394: ARRAY
37395: GREATEREQUAL
37396: AND
37397: PUSH
37398: LD_VAR 0 3
37402: PPUSH
37403: LD_INT 3
37405: PPUSH
37406: CALL_OW 275
37410: PUSH
37411: LD_VAR 0 4
37415: PUSH
37416: LD_INT 3
37418: ARRAY
37419: GREATEREQUAL
37420: AND
37421: ST_TO_ADDR
// end ;
37422: LD_VAR 0 2
37426: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37427: LD_INT 0
37429: PPUSH
37430: PPUSH
37431: PPUSH
// pom := GetBase ( building ) ;
37432: LD_ADDR_VAR 0 4
37436: PUSH
37437: LD_VAR 0 1
37441: PPUSH
37442: CALL_OW 274
37446: ST_TO_ADDR
// if not pom then
37447: LD_VAR 0 4
37451: NOT
37452: IFFALSE 37456
// exit ;
37454: GO 37557
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37456: LD_ADDR_VAR 0 5
37460: PUSH
37461: LD_VAR 0 2
37465: PPUSH
37466: LD_VAR 0 1
37470: PPUSH
37471: CALL_OW 248
37475: PPUSH
37476: CALL_OW 450
37480: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37481: LD_ADDR_VAR 0 3
37485: PUSH
37486: LD_VAR 0 4
37490: PPUSH
37491: LD_INT 1
37493: PPUSH
37494: CALL_OW 275
37498: PUSH
37499: LD_VAR 0 5
37503: PUSH
37504: LD_INT 1
37506: ARRAY
37507: GREATEREQUAL
37508: PUSH
37509: LD_VAR 0 4
37513: PPUSH
37514: LD_INT 2
37516: PPUSH
37517: CALL_OW 275
37521: PUSH
37522: LD_VAR 0 5
37526: PUSH
37527: LD_INT 2
37529: ARRAY
37530: GREATEREQUAL
37531: AND
37532: PUSH
37533: LD_VAR 0 4
37537: PPUSH
37538: LD_INT 3
37540: PPUSH
37541: CALL_OW 275
37545: PUSH
37546: LD_VAR 0 5
37550: PUSH
37551: LD_INT 3
37553: ARRAY
37554: GREATEREQUAL
37555: AND
37556: ST_TO_ADDR
// end ;
37557: LD_VAR 0 3
37561: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37562: LD_INT 0
37564: PPUSH
37565: PPUSH
37566: PPUSH
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
37573: PPUSH
37574: PPUSH
// result := false ;
37575: LD_ADDR_VAR 0 8
37579: PUSH
37580: LD_INT 0
37582: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37583: LD_VAR 0 5
37587: NOT
37588: PUSH
37589: LD_VAR 0 1
37593: NOT
37594: OR
37595: PUSH
37596: LD_VAR 0 2
37600: NOT
37601: OR
37602: PUSH
37603: LD_VAR 0 3
37607: NOT
37608: OR
37609: IFFALSE 37613
// exit ;
37611: GO 38427
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37613: LD_ADDR_VAR 0 14
37617: PUSH
37618: LD_VAR 0 1
37622: PPUSH
37623: LD_VAR 0 2
37627: PPUSH
37628: LD_VAR 0 3
37632: PPUSH
37633: LD_VAR 0 4
37637: PPUSH
37638: LD_VAR 0 5
37642: PUSH
37643: LD_INT 1
37645: ARRAY
37646: PPUSH
37647: CALL_OW 248
37651: PPUSH
37652: LD_INT 0
37654: PPUSH
37655: CALL 39660 0 6
37659: ST_TO_ADDR
// if not hexes then
37660: LD_VAR 0 14
37664: NOT
37665: IFFALSE 37669
// exit ;
37667: GO 38427
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37669: LD_ADDR_VAR 0 17
37673: PUSH
37674: LD_VAR 0 5
37678: PPUSH
37679: LD_INT 22
37681: PUSH
37682: LD_VAR 0 13
37686: PPUSH
37687: CALL_OW 255
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 2
37698: PUSH
37699: LD_INT 30
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 30
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PPUSH
37728: CALL_OW 72
37732: ST_TO_ADDR
// for i = 1 to hexes do
37733: LD_ADDR_VAR 0 9
37737: PUSH
37738: DOUBLE
37739: LD_INT 1
37741: DEC
37742: ST_TO_ADDR
37743: LD_VAR 0 14
37747: PUSH
37748: FOR_TO
37749: IFFALSE 38425
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37751: LD_ADDR_VAR 0 13
37755: PUSH
37756: LD_VAR 0 14
37760: PUSH
37761: LD_VAR 0 9
37765: ARRAY
37766: PUSH
37767: LD_INT 1
37769: ARRAY
37770: PPUSH
37771: LD_VAR 0 14
37775: PUSH
37776: LD_VAR 0 9
37780: ARRAY
37781: PUSH
37782: LD_INT 2
37784: ARRAY
37785: PPUSH
37786: CALL_OW 428
37790: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37791: LD_VAR 0 14
37795: PUSH
37796: LD_VAR 0 9
37800: ARRAY
37801: PUSH
37802: LD_INT 1
37804: ARRAY
37805: PPUSH
37806: LD_VAR 0 14
37810: PUSH
37811: LD_VAR 0 9
37815: ARRAY
37816: PUSH
37817: LD_INT 2
37819: ARRAY
37820: PPUSH
37821: CALL_OW 351
37825: PUSH
37826: LD_VAR 0 14
37830: PUSH
37831: LD_VAR 0 9
37835: ARRAY
37836: PUSH
37837: LD_INT 1
37839: ARRAY
37840: PPUSH
37841: LD_VAR 0 14
37845: PUSH
37846: LD_VAR 0 9
37850: ARRAY
37851: PUSH
37852: LD_INT 2
37854: ARRAY
37855: PPUSH
37856: CALL_OW 488
37860: NOT
37861: OR
37862: PUSH
37863: LD_VAR 0 13
37867: PPUSH
37868: CALL_OW 247
37872: PUSH
37873: LD_INT 3
37875: EQUAL
37876: OR
37877: IFFALSE 37883
// exit ;
37879: POP
37880: POP
37881: GO 38427
// if not tmp then
37883: LD_VAR 0 13
37887: NOT
37888: IFFALSE 37892
// continue ;
37890: GO 37748
// result := true ;
37892: LD_ADDR_VAR 0 8
37896: PUSH
37897: LD_INT 1
37899: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37900: LD_VAR 0 6
37904: PUSH
37905: LD_VAR 0 13
37909: PPUSH
37910: CALL_OW 247
37914: PUSH
37915: LD_INT 2
37917: EQUAL
37918: AND
37919: PUSH
37920: LD_VAR 0 13
37924: PPUSH
37925: CALL_OW 263
37929: PUSH
37930: LD_INT 1
37932: EQUAL
37933: AND
37934: IFFALSE 38098
// begin if IsDrivenBy ( tmp ) then
37936: LD_VAR 0 13
37940: PPUSH
37941: CALL_OW 311
37945: IFFALSE 37949
// continue ;
37947: GO 37748
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37949: LD_VAR 0 6
37953: PPUSH
37954: LD_INT 3
37956: PUSH
37957: LD_INT 60
37959: PUSH
37960: EMPTY
37961: LIST
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 3
37969: PUSH
37970: LD_INT 55
37972: PUSH
37973: EMPTY
37974: LIST
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PPUSH
37984: CALL_OW 72
37988: IFFALSE 38096
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37990: LD_ADDR_VAR 0 18
37994: PUSH
37995: LD_VAR 0 6
37999: PPUSH
38000: LD_INT 3
38002: PUSH
38003: LD_INT 60
38005: PUSH
38006: EMPTY
38007: LIST
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 3
38015: PUSH
38016: LD_INT 55
38018: PUSH
38019: EMPTY
38020: LIST
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PPUSH
38030: CALL_OW 72
38034: PUSH
38035: LD_INT 1
38037: ARRAY
38038: ST_TO_ADDR
// if IsInUnit ( driver ) then
38039: LD_VAR 0 18
38043: PPUSH
38044: CALL_OW 310
38048: IFFALSE 38059
// ComExit ( driver ) ;
38050: LD_VAR 0 18
38054: PPUSH
38055: CALL 63439 0 1
// AddComEnterUnit ( driver , tmp ) ;
38059: LD_VAR 0 18
38063: PPUSH
38064: LD_VAR 0 13
38068: PPUSH
38069: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38073: LD_VAR 0 18
38077: PPUSH
38078: LD_VAR 0 7
38082: PPUSH
38083: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38087: LD_VAR 0 18
38091: PPUSH
38092: CALL_OW 181
// end ; continue ;
38096: GO 37748
// end ; if not cleaners or not tmp in cleaners then
38098: LD_VAR 0 6
38102: NOT
38103: PUSH
38104: LD_VAR 0 13
38108: PUSH
38109: LD_VAR 0 6
38113: IN
38114: NOT
38115: OR
38116: IFFALSE 38423
// begin if dep then
38118: LD_VAR 0 17
38122: IFFALSE 38258
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38124: LD_ADDR_VAR 0 16
38128: PUSH
38129: LD_VAR 0 17
38133: PUSH
38134: LD_INT 1
38136: ARRAY
38137: PPUSH
38138: CALL_OW 250
38142: PPUSH
38143: LD_VAR 0 17
38147: PUSH
38148: LD_INT 1
38150: ARRAY
38151: PPUSH
38152: CALL_OW 254
38156: PPUSH
38157: LD_INT 5
38159: PPUSH
38160: CALL_OW 272
38164: PUSH
38165: LD_VAR 0 17
38169: PUSH
38170: LD_INT 1
38172: ARRAY
38173: PPUSH
38174: CALL_OW 251
38178: PPUSH
38179: LD_VAR 0 17
38183: PUSH
38184: LD_INT 1
38186: ARRAY
38187: PPUSH
38188: CALL_OW 254
38192: PPUSH
38193: LD_INT 5
38195: PPUSH
38196: CALL_OW 273
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38205: LD_VAR 0 16
38209: PUSH
38210: LD_INT 1
38212: ARRAY
38213: PPUSH
38214: LD_VAR 0 16
38218: PUSH
38219: LD_INT 2
38221: ARRAY
38222: PPUSH
38223: CALL_OW 488
38227: IFFALSE 38258
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38229: LD_VAR 0 13
38233: PPUSH
38234: LD_VAR 0 16
38238: PUSH
38239: LD_INT 1
38241: ARRAY
38242: PPUSH
38243: LD_VAR 0 16
38247: PUSH
38248: LD_INT 2
38250: ARRAY
38251: PPUSH
38252: CALL_OW 111
// continue ;
38256: GO 37748
// end ; end ; r := GetDir ( tmp ) ;
38258: LD_ADDR_VAR 0 15
38262: PUSH
38263: LD_VAR 0 13
38267: PPUSH
38268: CALL_OW 254
38272: ST_TO_ADDR
// if r = 5 then
38273: LD_VAR 0 15
38277: PUSH
38278: LD_INT 5
38280: EQUAL
38281: IFFALSE 38291
// r := 0 ;
38283: LD_ADDR_VAR 0 15
38287: PUSH
38288: LD_INT 0
38290: ST_TO_ADDR
// for j = r to 5 do
38291: LD_ADDR_VAR 0 10
38295: PUSH
38296: DOUBLE
38297: LD_VAR 0 15
38301: DEC
38302: ST_TO_ADDR
38303: LD_INT 5
38305: PUSH
38306: FOR_TO
38307: IFFALSE 38421
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38309: LD_ADDR_VAR 0 11
38313: PUSH
38314: LD_VAR 0 13
38318: PPUSH
38319: CALL_OW 250
38323: PPUSH
38324: LD_VAR 0 10
38328: PPUSH
38329: LD_INT 2
38331: PPUSH
38332: CALL_OW 272
38336: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38337: LD_ADDR_VAR 0 12
38341: PUSH
38342: LD_VAR 0 13
38346: PPUSH
38347: CALL_OW 251
38351: PPUSH
38352: LD_VAR 0 10
38356: PPUSH
38357: LD_INT 2
38359: PPUSH
38360: CALL_OW 273
38364: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38365: LD_VAR 0 11
38369: PPUSH
38370: LD_VAR 0 12
38374: PPUSH
38375: CALL_OW 488
38379: PUSH
38380: LD_VAR 0 11
38384: PPUSH
38385: LD_VAR 0 12
38389: PPUSH
38390: CALL_OW 428
38394: NOT
38395: AND
38396: IFFALSE 38419
// begin ComMoveXY ( tmp , _x , _y ) ;
38398: LD_VAR 0 13
38402: PPUSH
38403: LD_VAR 0 11
38407: PPUSH
38408: LD_VAR 0 12
38412: PPUSH
38413: CALL_OW 111
// break ;
38417: GO 38421
// end ; end ;
38419: GO 38306
38421: POP
38422: POP
// end ; end ;
38423: GO 37748
38425: POP
38426: POP
// end ;
38427: LD_VAR 0 8
38431: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38432: LD_INT 0
38434: PPUSH
// result := true ;
38435: LD_ADDR_VAR 0 3
38439: PUSH
38440: LD_INT 1
38442: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38443: LD_VAR 0 2
38447: PUSH
38448: LD_INT 24
38450: DOUBLE
38451: EQUAL
38452: IFTRUE 38462
38454: LD_INT 33
38456: DOUBLE
38457: EQUAL
38458: IFTRUE 38462
38460: GO 38487
38462: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38463: LD_ADDR_VAR 0 3
38467: PUSH
38468: LD_INT 32
38470: PPUSH
38471: LD_VAR 0 1
38475: PPUSH
38476: CALL_OW 321
38480: PUSH
38481: LD_INT 2
38483: EQUAL
38484: ST_TO_ADDR
38485: GO 38803
38487: LD_INT 20
38489: DOUBLE
38490: EQUAL
38491: IFTRUE 38495
38493: GO 38520
38495: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38496: LD_ADDR_VAR 0 3
38500: PUSH
38501: LD_INT 6
38503: PPUSH
38504: LD_VAR 0 1
38508: PPUSH
38509: CALL_OW 321
38513: PUSH
38514: LD_INT 2
38516: EQUAL
38517: ST_TO_ADDR
38518: GO 38803
38520: LD_INT 22
38522: DOUBLE
38523: EQUAL
38524: IFTRUE 38534
38526: LD_INT 36
38528: DOUBLE
38529: EQUAL
38530: IFTRUE 38534
38532: GO 38559
38534: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38535: LD_ADDR_VAR 0 3
38539: PUSH
38540: LD_INT 15
38542: PPUSH
38543: LD_VAR 0 1
38547: PPUSH
38548: CALL_OW 321
38552: PUSH
38553: LD_INT 2
38555: EQUAL
38556: ST_TO_ADDR
38557: GO 38803
38559: LD_INT 30
38561: DOUBLE
38562: EQUAL
38563: IFTRUE 38567
38565: GO 38592
38567: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38568: LD_ADDR_VAR 0 3
38572: PUSH
38573: LD_INT 20
38575: PPUSH
38576: LD_VAR 0 1
38580: PPUSH
38581: CALL_OW 321
38585: PUSH
38586: LD_INT 2
38588: EQUAL
38589: ST_TO_ADDR
38590: GO 38803
38592: LD_INT 28
38594: DOUBLE
38595: EQUAL
38596: IFTRUE 38606
38598: LD_INT 21
38600: DOUBLE
38601: EQUAL
38602: IFTRUE 38606
38604: GO 38631
38606: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38607: LD_ADDR_VAR 0 3
38611: PUSH
38612: LD_INT 21
38614: PPUSH
38615: LD_VAR 0 1
38619: PPUSH
38620: CALL_OW 321
38624: PUSH
38625: LD_INT 2
38627: EQUAL
38628: ST_TO_ADDR
38629: GO 38803
38631: LD_INT 16
38633: DOUBLE
38634: EQUAL
38635: IFTRUE 38639
38637: GO 38664
38639: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38640: LD_ADDR_VAR 0 3
38644: PUSH
38645: LD_INT 84
38647: PPUSH
38648: LD_VAR 0 1
38652: PPUSH
38653: CALL_OW 321
38657: PUSH
38658: LD_INT 2
38660: EQUAL
38661: ST_TO_ADDR
38662: GO 38803
38664: LD_INT 19
38666: DOUBLE
38667: EQUAL
38668: IFTRUE 38678
38670: LD_INT 23
38672: DOUBLE
38673: EQUAL
38674: IFTRUE 38678
38676: GO 38703
38678: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38679: LD_ADDR_VAR 0 3
38683: PUSH
38684: LD_INT 83
38686: PPUSH
38687: LD_VAR 0 1
38691: PPUSH
38692: CALL_OW 321
38696: PUSH
38697: LD_INT 2
38699: EQUAL
38700: ST_TO_ADDR
38701: GO 38803
38703: LD_INT 17
38705: DOUBLE
38706: EQUAL
38707: IFTRUE 38711
38709: GO 38736
38711: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38712: LD_ADDR_VAR 0 3
38716: PUSH
38717: LD_INT 39
38719: PPUSH
38720: LD_VAR 0 1
38724: PPUSH
38725: CALL_OW 321
38729: PUSH
38730: LD_INT 2
38732: EQUAL
38733: ST_TO_ADDR
38734: GO 38803
38736: LD_INT 18
38738: DOUBLE
38739: EQUAL
38740: IFTRUE 38744
38742: GO 38769
38744: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38745: LD_ADDR_VAR 0 3
38749: PUSH
38750: LD_INT 40
38752: PPUSH
38753: LD_VAR 0 1
38757: PPUSH
38758: CALL_OW 321
38762: PUSH
38763: LD_INT 2
38765: EQUAL
38766: ST_TO_ADDR
38767: GO 38803
38769: LD_INT 27
38771: DOUBLE
38772: EQUAL
38773: IFTRUE 38777
38775: GO 38802
38777: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38778: LD_ADDR_VAR 0 3
38782: PUSH
38783: LD_INT 35
38785: PPUSH
38786: LD_VAR 0 1
38790: PPUSH
38791: CALL_OW 321
38795: PUSH
38796: LD_INT 2
38798: EQUAL
38799: ST_TO_ADDR
38800: GO 38803
38802: POP
// end ;
38803: LD_VAR 0 3
38807: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38808: LD_INT 0
38810: PPUSH
38811: PPUSH
38812: PPUSH
38813: PPUSH
38814: PPUSH
38815: PPUSH
38816: PPUSH
38817: PPUSH
38818: PPUSH
38819: PPUSH
38820: PPUSH
// result := false ;
38821: LD_ADDR_VAR 0 6
38825: PUSH
38826: LD_INT 0
38828: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38829: LD_VAR 0 1
38833: NOT
38834: PUSH
38835: LD_VAR 0 1
38839: PPUSH
38840: CALL_OW 266
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: LD_INT 1
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: IN
38855: NOT
38856: OR
38857: PUSH
38858: LD_VAR 0 2
38862: NOT
38863: OR
38864: PUSH
38865: LD_VAR 0 5
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: LD_INT 3
38881: PUSH
38882: LD_INT 4
38884: PUSH
38885: LD_INT 5
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: IN
38896: NOT
38897: OR
38898: PUSH
38899: LD_VAR 0 3
38903: PPUSH
38904: LD_VAR 0 4
38908: PPUSH
38909: CALL_OW 488
38913: NOT
38914: OR
38915: IFFALSE 38919
// exit ;
38917: GO 39655
// side := GetSide ( depot ) ;
38919: LD_ADDR_VAR 0 9
38923: PUSH
38924: LD_VAR 0 1
38928: PPUSH
38929: CALL_OW 255
38933: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38934: LD_VAR 0 9
38938: PPUSH
38939: LD_VAR 0 2
38943: PPUSH
38944: CALL 38432 0 2
38948: NOT
38949: IFFALSE 38953
// exit ;
38951: GO 39655
// pom := GetBase ( depot ) ;
38953: LD_ADDR_VAR 0 10
38957: PUSH
38958: LD_VAR 0 1
38962: PPUSH
38963: CALL_OW 274
38967: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38968: LD_ADDR_VAR 0 11
38972: PUSH
38973: LD_VAR 0 2
38977: PPUSH
38978: LD_VAR 0 1
38982: PPUSH
38983: CALL_OW 248
38987: PPUSH
38988: CALL_OW 450
38992: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38993: LD_VAR 0 10
38997: PPUSH
38998: LD_INT 1
39000: PPUSH
39001: CALL_OW 275
39005: PUSH
39006: LD_VAR 0 11
39010: PUSH
39011: LD_INT 1
39013: ARRAY
39014: GREATEREQUAL
39015: PUSH
39016: LD_VAR 0 10
39020: PPUSH
39021: LD_INT 2
39023: PPUSH
39024: CALL_OW 275
39028: PUSH
39029: LD_VAR 0 11
39033: PUSH
39034: LD_INT 2
39036: ARRAY
39037: GREATEREQUAL
39038: AND
39039: PUSH
39040: LD_VAR 0 10
39044: PPUSH
39045: LD_INT 3
39047: PPUSH
39048: CALL_OW 275
39052: PUSH
39053: LD_VAR 0 11
39057: PUSH
39058: LD_INT 3
39060: ARRAY
39061: GREATEREQUAL
39062: AND
39063: NOT
39064: IFFALSE 39068
// exit ;
39066: GO 39655
// if GetBType ( depot ) = b_depot then
39068: LD_VAR 0 1
39072: PPUSH
39073: CALL_OW 266
39077: PUSH
39078: LD_INT 0
39080: EQUAL
39081: IFFALSE 39093
// dist := 28 else
39083: LD_ADDR_VAR 0 14
39087: PUSH
39088: LD_INT 28
39090: ST_TO_ADDR
39091: GO 39101
// dist := 36 ;
39093: LD_ADDR_VAR 0 14
39097: PUSH
39098: LD_INT 36
39100: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39101: LD_VAR 0 1
39105: PPUSH
39106: LD_VAR 0 3
39110: PPUSH
39111: LD_VAR 0 4
39115: PPUSH
39116: CALL_OW 297
39120: PUSH
39121: LD_VAR 0 14
39125: GREATER
39126: IFFALSE 39130
// exit ;
39128: GO 39655
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39130: LD_ADDR_VAR 0 12
39134: PUSH
39135: LD_VAR 0 2
39139: PPUSH
39140: LD_VAR 0 3
39144: PPUSH
39145: LD_VAR 0 4
39149: PPUSH
39150: LD_VAR 0 5
39154: PPUSH
39155: LD_VAR 0 1
39159: PPUSH
39160: CALL_OW 248
39164: PPUSH
39165: LD_INT 0
39167: PPUSH
39168: CALL 39660 0 6
39172: ST_TO_ADDR
// if not hexes then
39173: LD_VAR 0 12
39177: NOT
39178: IFFALSE 39182
// exit ;
39180: GO 39655
// hex := GetHexInfo ( x , y ) ;
39182: LD_ADDR_VAR 0 15
39186: PUSH
39187: LD_VAR 0 3
39191: PPUSH
39192: LD_VAR 0 4
39196: PPUSH
39197: CALL_OW 546
39201: ST_TO_ADDR
// if hex [ 1 ] then
39202: LD_VAR 0 15
39206: PUSH
39207: LD_INT 1
39209: ARRAY
39210: IFFALSE 39214
// exit ;
39212: GO 39655
// height := hex [ 2 ] ;
39214: LD_ADDR_VAR 0 13
39218: PUSH
39219: LD_VAR 0 15
39223: PUSH
39224: LD_INT 2
39226: ARRAY
39227: ST_TO_ADDR
// for i = 1 to hexes do
39228: LD_ADDR_VAR 0 7
39232: PUSH
39233: DOUBLE
39234: LD_INT 1
39236: DEC
39237: ST_TO_ADDR
39238: LD_VAR 0 12
39242: PUSH
39243: FOR_TO
39244: IFFALSE 39574
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39246: LD_VAR 0 12
39250: PUSH
39251: LD_VAR 0 7
39255: ARRAY
39256: PUSH
39257: LD_INT 1
39259: ARRAY
39260: PPUSH
39261: LD_VAR 0 12
39265: PUSH
39266: LD_VAR 0 7
39270: ARRAY
39271: PUSH
39272: LD_INT 2
39274: ARRAY
39275: PPUSH
39276: CALL_OW 488
39280: NOT
39281: PUSH
39282: LD_VAR 0 12
39286: PUSH
39287: LD_VAR 0 7
39291: ARRAY
39292: PUSH
39293: LD_INT 1
39295: ARRAY
39296: PPUSH
39297: LD_VAR 0 12
39301: PUSH
39302: LD_VAR 0 7
39306: ARRAY
39307: PUSH
39308: LD_INT 2
39310: ARRAY
39311: PPUSH
39312: CALL_OW 428
39316: PUSH
39317: LD_INT 0
39319: GREATER
39320: OR
39321: PUSH
39322: LD_VAR 0 12
39326: PUSH
39327: LD_VAR 0 7
39331: ARRAY
39332: PUSH
39333: LD_INT 1
39335: ARRAY
39336: PPUSH
39337: LD_VAR 0 12
39341: PUSH
39342: LD_VAR 0 7
39346: ARRAY
39347: PUSH
39348: LD_INT 2
39350: ARRAY
39351: PPUSH
39352: CALL_OW 351
39356: OR
39357: IFFALSE 39363
// exit ;
39359: POP
39360: POP
39361: GO 39655
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39363: LD_ADDR_VAR 0 8
39367: PUSH
39368: LD_VAR 0 12
39372: PUSH
39373: LD_VAR 0 7
39377: ARRAY
39378: PUSH
39379: LD_INT 1
39381: ARRAY
39382: PPUSH
39383: LD_VAR 0 12
39387: PUSH
39388: LD_VAR 0 7
39392: ARRAY
39393: PUSH
39394: LD_INT 2
39396: ARRAY
39397: PPUSH
39398: CALL_OW 546
39402: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39403: LD_VAR 0 8
39407: PUSH
39408: LD_INT 1
39410: ARRAY
39411: PUSH
39412: LD_VAR 0 8
39416: PUSH
39417: LD_INT 2
39419: ARRAY
39420: PUSH
39421: LD_VAR 0 13
39425: PUSH
39426: LD_INT 2
39428: PLUS
39429: GREATER
39430: OR
39431: PUSH
39432: LD_VAR 0 8
39436: PUSH
39437: LD_INT 2
39439: ARRAY
39440: PUSH
39441: LD_VAR 0 13
39445: PUSH
39446: LD_INT 2
39448: MINUS
39449: LESS
39450: OR
39451: PUSH
39452: LD_VAR 0 8
39456: PUSH
39457: LD_INT 3
39459: ARRAY
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 8
39466: PUSH
39467: LD_INT 9
39469: PUSH
39470: LD_INT 10
39472: PUSH
39473: LD_INT 11
39475: PUSH
39476: LD_INT 12
39478: PUSH
39479: LD_INT 13
39481: PUSH
39482: LD_INT 16
39484: PUSH
39485: LD_INT 17
39487: PUSH
39488: LD_INT 18
39490: PUSH
39491: LD_INT 19
39493: PUSH
39494: LD_INT 20
39496: PUSH
39497: LD_INT 21
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: IN
39515: NOT
39516: OR
39517: PUSH
39518: LD_VAR 0 8
39522: PUSH
39523: LD_INT 5
39525: ARRAY
39526: NOT
39527: OR
39528: PUSH
39529: LD_VAR 0 8
39533: PUSH
39534: LD_INT 6
39536: ARRAY
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: LD_INT 7
39546: PUSH
39547: LD_INT 9
39549: PUSH
39550: LD_INT 10
39552: PUSH
39553: LD_INT 11
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: IN
39564: NOT
39565: OR
39566: IFFALSE 39572
// exit ;
39568: POP
39569: POP
39570: GO 39655
// end ;
39572: GO 39243
39574: POP
39575: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39576: LD_VAR 0 9
39580: PPUSH
39581: LD_VAR 0 3
39585: PPUSH
39586: LD_VAR 0 4
39590: PPUSH
39591: LD_INT 20
39593: PPUSH
39594: CALL 31607 0 4
39598: PUSH
39599: LD_INT 4
39601: ARRAY
39602: IFFALSE 39606
// exit ;
39604: GO 39655
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39606: LD_VAR 0 2
39610: PUSH
39611: LD_INT 29
39613: PUSH
39614: LD_INT 30
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: IN
39621: PUSH
39622: LD_VAR 0 3
39626: PPUSH
39627: LD_VAR 0 4
39631: PPUSH
39632: LD_VAR 0 9
39636: PPUSH
39637: CALL_OW 440
39641: NOT
39642: AND
39643: IFFALSE 39647
// exit ;
39645: GO 39655
// result := true ;
39647: LD_ADDR_VAR 0 6
39651: PUSH
39652: LD_INT 1
39654: ST_TO_ADDR
// end ;
39655: LD_VAR 0 6
39659: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39660: LD_INT 0
39662: PPUSH
39663: PPUSH
39664: PPUSH
39665: PPUSH
39666: PPUSH
39667: PPUSH
39668: PPUSH
39669: PPUSH
39670: PPUSH
39671: PPUSH
39672: PPUSH
39673: PPUSH
39674: PPUSH
39675: PPUSH
39676: PPUSH
39677: PPUSH
39678: PPUSH
39679: PPUSH
39680: PPUSH
39681: PPUSH
39682: PPUSH
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
39687: PPUSH
39688: PPUSH
39689: PPUSH
39690: PPUSH
39691: PPUSH
39692: PPUSH
39693: PPUSH
39694: PPUSH
39695: PPUSH
39696: PPUSH
39697: PPUSH
39698: PPUSH
39699: PPUSH
39700: PPUSH
39701: PPUSH
39702: PPUSH
39703: PPUSH
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
39708: PPUSH
39709: PPUSH
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
39716: PPUSH
39717: PPUSH
39718: PPUSH
39719: PPUSH
// result = [ ] ;
39720: LD_ADDR_VAR 0 7
39724: PUSH
39725: EMPTY
39726: ST_TO_ADDR
// temp_list = [ ] ;
39727: LD_ADDR_VAR 0 9
39731: PUSH
39732: EMPTY
39733: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39734: LD_VAR 0 4
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: LD_INT 3
39750: PUSH
39751: LD_INT 4
39753: PUSH
39754: LD_INT 5
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: IN
39765: NOT
39766: PUSH
39767: LD_VAR 0 1
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: IN
39782: PUSH
39783: LD_VAR 0 5
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: LD_INT 2
39793: PUSH
39794: LD_INT 3
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: LIST
39801: IN
39802: NOT
39803: AND
39804: OR
39805: IFFALSE 39809
// exit ;
39807: GO 58200
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39809: LD_VAR 0 1
39813: PUSH
39814: LD_INT 6
39816: PUSH
39817: LD_INT 7
39819: PUSH
39820: LD_INT 8
39822: PUSH
39823: LD_INT 13
39825: PUSH
39826: LD_INT 12
39828: PUSH
39829: LD_INT 15
39831: PUSH
39832: LD_INT 11
39834: PUSH
39835: LD_INT 14
39837: PUSH
39838: LD_INT 10
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: IN
39852: IFFALSE 39862
// btype = b_lab ;
39854: LD_ADDR_VAR 0 1
39858: PUSH
39859: LD_INT 6
39861: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39862: LD_VAR 0 6
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: LD_INT 2
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: LIST
39880: IN
39881: NOT
39882: PUSH
39883: LD_VAR 0 1
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: LD_INT 2
39896: PUSH
39897: LD_INT 3
39899: PUSH
39900: LD_INT 6
39902: PUSH
39903: LD_INT 36
39905: PUSH
39906: LD_INT 4
39908: PUSH
39909: LD_INT 5
39911: PUSH
39912: LD_INT 31
39914: PUSH
39915: LD_INT 32
39917: PUSH
39918: LD_INT 33
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: IN
39934: NOT
39935: PUSH
39936: LD_VAR 0 6
39940: PUSH
39941: LD_INT 1
39943: EQUAL
39944: AND
39945: OR
39946: PUSH
39947: LD_VAR 0 1
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: LD_INT 3
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: IN
39962: NOT
39963: PUSH
39964: LD_VAR 0 6
39968: PUSH
39969: LD_INT 2
39971: EQUAL
39972: AND
39973: OR
39974: IFFALSE 39984
// mode = 0 ;
39976: LD_ADDR_VAR 0 6
39980: PUSH
39981: LD_INT 0
39983: ST_TO_ADDR
// case mode of 0 :
39984: LD_VAR 0 6
39988: PUSH
39989: LD_INT 0
39991: DOUBLE
39992: EQUAL
39993: IFTRUE 39997
39995: GO 51450
39997: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39998: LD_ADDR_VAR 0 11
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: LD_INT 2
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: LD_INT 2
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 2
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 3
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 3
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40191: LD_ADDR_VAR 0 12
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 3
40348: NEG
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 3
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40387: LD_ADDR_VAR 0 13
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 2
40510: NEG
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: NEG
40523: PUSH
40524: LD_INT 2
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 2
40534: NEG
40535: PUSH
40536: LD_INT 3
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 3
40546: NEG
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 3
40558: NEG
40559: PUSH
40560: LD_INT 3
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40586: LD_ADDR_VAR 0 14
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: LD_INT 2
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: LD_INT 3
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 3
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: LD_INT 2
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40782: LD_ADDR_VAR 0 15
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: LD_INT 1
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: NEG
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 3
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 3
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40975: LD_ADDR_VAR 0 16
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: LD_INT 2
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 2
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: NEG
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 3
41122: PUSH
41123: LD_INT 2
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 3
41132: PUSH
41133: LD_INT 3
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: LD_INT 3
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41168: LD_ADDR_VAR 0 17
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: LD_INT 2
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41398: LD_ADDR_VAR 0 18
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 1
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: LD_INT 2
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: LD_INT 2
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: LD_INT 2
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 2
41585: NEG
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: NEG
41598: PUSH
41599: LD_INT 2
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41628: LD_ADDR_VAR 0 19
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: LD_INT 2
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: LD_INT 2
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: LD_INT 2
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 2
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: NEG
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 2
41815: NEG
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: NEG
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41858: LD_ADDR_VAR 0 20
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 2
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42088: LD_ADDR_VAR 0 21
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 2
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 2
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 2
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 2
42275: NEG
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42318: LD_ADDR_VAR 0 22
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: LD_INT 2
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 2
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 2
42494: NEG
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 2
42505: NEG
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42548: LD_ADDR_VAR 0 23
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: LD_INT 2
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: LD_INT 2
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 2
42724: NEG
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: NEG
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: LD_INT 3
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 3
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42828: LD_ADDR_VAR 0 24
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 2
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 3
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 3
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43104: LD_ADDR_VAR 0 25
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: LD_INT 2
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 2
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 2
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 2
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 2
43280: NEG
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 2
43303: NEG
43304: PUSH
43305: LD_INT 2
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 3
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 3
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 3
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 3
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43378: LD_ADDR_VAR 0 26
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 2
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 3
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 3
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43654: LD_ADDR_VAR 0 27
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 2
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: NEG
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: NEG
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 3
43899: NEG
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43934: LD_ADDR_VAR 0 28
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: LD_INT 2
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: NEG
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: LD_INT 3
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: LD_INT 3
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 3
44169: NEG
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 3
44181: NEG
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44216: LD_ADDR_VAR 0 29
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 2
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: LD_INT 3
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 3
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 3
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 3
44460: NEG
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44495: LD_ADDR_VAR 0 30
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 2
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 3
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 3
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: LD_INT 3
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 3
44738: NEG
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44773: LD_ADDR_VAR 0 31
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: NEG
44963: PUSH
44964: LD_INT 3
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 3
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: LD_INT 3
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 3
45016: NEG
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45051: LD_ADDR_VAR 0 32
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 2
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: LD_INT 2
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 2
45217: NEG
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 3
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: LD_INT 3
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: NEG
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 3
45294: NEG
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45329: LD_ADDR_VAR 0 33
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: LD_INT 3
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 3
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 3
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 3
45573: NEG
45574: PUSH
45575: LD_INT 2
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45608: LD_ADDR_VAR 0 34
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 3
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 3
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 3
45853: NEG
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45888: LD_ADDR_VAR 0 35
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46000: LD_ADDR_VAR 0 36
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46112: LD_ADDR_VAR 0 37
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46224: LD_ADDR_VAR 0 38
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46336: LD_ADDR_VAR 0 39
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46448: LD_ADDR_VAR 0 40
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46560: LD_ADDR_VAR 0 41
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: LD_INT 3
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 3
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 3
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 3
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: LD_INT 3
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 3
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 3
46834: NEG
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 3
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 3
46857: NEG
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 3
46869: NEG
46870: PUSH
46871: LD_INT 3
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46910: LD_ADDR_VAR 0 42
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: LD_INT 3
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 3
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 3
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 3
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: LD_INT 3
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: LD_INT 3
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 3
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: LD_INT 3
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 3
47207: NEG
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 3
47219: NEG
47220: PUSH
47221: LD_INT 3
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47260: LD_ADDR_VAR 0 43
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 2
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 2
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 3
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 3
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 3
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 3
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 3
47556: NEG
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 3
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47608: LD_ADDR_VAR 0 44
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: NEG
47787: PUSH
47788: LD_INT 2
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: LD_INT 3
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 3
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 3
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 3
47882: NEG
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 3
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 3
47905: NEG
47906: PUSH
47907: LD_INT 2
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 3
47917: NEG
47918: PUSH
47919: LD_INT 3
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47958: LD_ADDR_VAR 0 45
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 2
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: LD_INT 3
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 3
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 3
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 3
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 3
48204: PUSH
48205: LD_INT 3
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: LD_INT 3
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 3
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 3
48255: NEG
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 3
48267: NEG
48268: PUSH
48269: LD_INT 3
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48308: LD_ADDR_VAR 0 46
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: NEG
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 3
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 3
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 3
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 3
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: LD_INT 3
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 3
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 3
48604: NEG
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48656: LD_ADDR_VAR 0 47
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48807: LD_ADDR_VAR 0 48
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 2
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48954: LD_ADDR_VAR 0 49
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49098: LD_ADDR_VAR 0 50
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49242: LD_ADDR_VAR 0 51
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49389: LD_ADDR_VAR 0 52
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49540: LD_ADDR_VAR 0 53
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49770: LD_ADDR_VAR 0 54
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50000: LD_ADDR_VAR 0 55
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: LD_INT 2
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50230: LD_ADDR_VAR 0 56
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 2
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50460: LD_ADDR_VAR 0 57
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 2
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: LD_INT 2
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50690: LD_ADDR_VAR 0 58
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50920: LD_ADDR_VAR 0 59
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51008: LD_ADDR_VAR 0 60
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51096: LD_ADDR_VAR 0 61
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51184: LD_ADDR_VAR 0 62
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51272: LD_ADDR_VAR 0 63
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51360: LD_ADDR_VAR 0 64
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: ST_TO_ADDR
// end ; 1 :
51448: GO 57345
51450: LD_INT 1
51452: DOUBLE
51453: EQUAL
51454: IFTRUE 51458
51456: GO 54081
51458: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51459: LD_ADDR_VAR 0 11
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 3
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51503: LD_ADDR_VAR 0 12
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 3
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 3
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: LIST
51543: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51544: LD_ADDR_VAR 0 13
51548: PUSH
51549: LD_INT 3
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 3
51561: PUSH
51562: LD_INT 3
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: LIST
51583: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51584: LD_ADDR_VAR 0 14
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 3
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 3
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: LIST
51624: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51625: LD_ADDR_VAR 0 15
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 3
51643: NEG
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 3
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: LIST
51668: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51669: LD_ADDR_VAR 0 16
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: LD_INT 3
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 3
51688: NEG
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 3
51700: NEG
51701: PUSH
51702: LD_INT 3
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: LIST
51714: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51715: LD_ADDR_VAR 0 17
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 3
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 3
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: LIST
51758: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51759: LD_ADDR_VAR 0 18
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 3
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 3
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: LIST
51799: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51800: LD_ADDR_VAR 0 19
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 3
51817: PUSH
51818: LD_INT 3
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 3
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: LIST
51839: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51840: LD_ADDR_VAR 0 20
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: LD_INT 3
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: LIST
51880: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51881: LD_ADDR_VAR 0 21
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 3
51899: NEG
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 3
51910: NEG
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: LIST
51924: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51925: LD_ADDR_VAR 0 22
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: LD_INT 3
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 3
51956: NEG
51957: PUSH
51958: LD_INT 3
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51971: LD_ADDR_VAR 0 23
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: LD_INT 4
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: LIST
52014: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52015: LD_ADDR_VAR 0 24
52019: PUSH
52020: LD_INT 3
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 3
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 4
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: LIST
52055: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52056: LD_ADDR_VAR 0 25
52060: PUSH
52061: LD_INT 3
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 4
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 3
52083: PUSH
52084: LD_INT 4
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: LIST
52095: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52096: LD_ADDR_VAR 0 26
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: LD_INT 4
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: LIST
52136: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52137: LD_ADDR_VAR 0 27
52141: PUSH
52142: LD_INT 3
52144: NEG
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 4
52166: NEG
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52181: LD_ADDR_VAR 0 28
52185: PUSH
52186: LD_INT 3
52188: NEG
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 3
52200: NEG
52201: PUSH
52202: LD_INT 4
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 4
52212: NEG
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52227: LD_ADDR_VAR 0 29
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 4
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 4
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 5
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 5
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 4
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: LD_INT 6
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 6
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: LD_INT 5
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52382: LD_ADDR_VAR 0 30
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 3
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 4
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 4
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 4
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 5
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 5
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 5
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 6
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 6
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52525: LD_ADDR_VAR 0 31
52529: PUSH
52530: LD_INT 3
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 3
52542: PUSH
52543: LD_INT 3
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: LD_INT 3
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 4
52562: PUSH
52563: LD_INT 3
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 4
52572: PUSH
52573: LD_INT 4
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: LD_INT 4
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 5
52592: PUSH
52593: LD_INT 4
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 5
52602: PUSH
52603: LD_INT 5
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 4
52612: PUSH
52613: LD_INT 5
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 6
52622: PUSH
52623: LD_INT 5
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 6
52632: PUSH
52633: LD_INT 6
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 5
52642: PUSH
52643: LD_INT 6
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52664: LD_ADDR_VAR 0 32
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 4
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 4
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 5
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 5
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: LD_INT 4
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 6
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 6
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 5
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52807: LD_ADDR_VAR 0 33
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 3
52825: NEG
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 3
52848: NEG
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 4
52859: NEG
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 4
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 4
52882: NEG
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 5
52893: NEG
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 5
52904: NEG
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 5
52916: NEG
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 6
52927: NEG
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 6
52938: NEG
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52962: LD_ADDR_VAR 0 34
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: LD_INT 3
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 3
52981: NEG
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 3
52993: NEG
52994: PUSH
52995: LD_INT 3
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: LD_INT 4
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 4
53017: NEG
53018: PUSH
53019: LD_INT 3
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 4
53029: NEG
53030: PUSH
53031: LD_INT 4
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 4
53041: NEG
53042: PUSH
53043: LD_INT 5
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 5
53053: NEG
53054: PUSH
53055: LD_INT 4
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 5
53065: NEG
53066: PUSH
53067: LD_INT 5
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 5
53077: NEG
53078: PUSH
53079: LD_INT 6
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 6
53089: NEG
53090: PUSH
53091: LD_INT 5
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 6
53101: NEG
53102: PUSH
53103: LD_INT 6
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53125: LD_ADDR_VAR 0 41
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 3
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: LIST
53168: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53169: LD_ADDR_VAR 0 42
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 3
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53210: LD_ADDR_VAR 0 43
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 3
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: LD_INT 3
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53250: LD_ADDR_VAR 0 44
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 3
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: LIST
53290: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53291: LD_ADDR_VAR 0 45
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 3
53320: NEG
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: LIST
53334: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53335: LD_ADDR_VAR 0 46
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 2
53354: NEG
53355: PUSH
53356: LD_INT 3
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 3
53366: NEG
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: LIST
53380: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53381: LD_ADDR_VAR 0 47
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: LD_INT 3
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 3
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53414: LD_ADDR_VAR 0 48
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 2
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53445: LD_ADDR_VAR 0 49
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53474: LD_ADDR_VAR 0 50
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 3
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53503: LD_ADDR_VAR 0 51
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53534: LD_ADDR_VAR 0 52
53538: PUSH
53539: LD_INT 3
53541: NEG
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 3
53553: NEG
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53567: LD_ADDR_VAR 0 53
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 3
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 3
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53611: LD_ADDR_VAR 0 54
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53652: LD_ADDR_VAR 0 55
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: LD_INT 3
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: LD_INT 3
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53692: LD_ADDR_VAR 0 56
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53733: LD_ADDR_VAR 0 57
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 3
53751: NEG
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 3
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: LIST
53776: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53777: LD_ADDR_VAR 0 58
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: LD_INT 3
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 3
53796: NEG
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 3
53808: NEG
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53823: LD_ADDR_VAR 0 59
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: LIST
53866: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53867: LD_ADDR_VAR 0 60
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 2
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: LIST
53907: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53908: LD_ADDR_VAR 0 61
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: LIST
53947: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53948: LD_ADDR_VAR 0 62
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: LIST
53988: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53989: LD_ADDR_VAR 0 63
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54033: LD_ADDR_VAR 0 64
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: ST_TO_ADDR
// end ; 2 :
54079: GO 57345
54081: LD_INT 2
54083: DOUBLE
54084: EQUAL
54085: IFTRUE 54089
54087: GO 57344
54089: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54090: LD_ADDR_VAR 0 29
54094: PUSH
54095: LD_INT 4
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 4
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 5
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 5
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 4
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 3
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 3
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 3
54169: PUSH
54170: LD_INT 2
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 5
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 3
54190: PUSH
54191: LD_INT 3
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 4
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 4
54220: PUSH
54221: LD_INT 4
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 3
54230: PUSH
54231: LD_INT 4
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 4
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: LD_INT 4
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 4
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 4
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 5
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 5
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 4
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: LD_INT 5
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 3
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 3
54373: NEG
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 3
54384: NEG
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 3
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 4
54429: NEG
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 4
54440: NEG
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 4
54452: NEG
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 4
54475: NEG
54476: PUSH
54477: LD_INT 4
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 4
54487: NEG
54488: PUSH
54489: LD_INT 5
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 3
54499: NEG
54500: PUSH
54501: LD_INT 4
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 3
54511: NEG
54512: PUSH
54513: LD_INT 3
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 4
54523: NEG
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 5
54535: NEG
54536: PUSH
54537: LD_INT 4
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 5
54547: NEG
54548: PUSH
54549: LD_INT 5
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 3
54559: NEG
54560: PUSH
54561: LD_INT 5
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 5
54571: NEG
54572: PUSH
54573: LD_INT 3
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54628: LD_ADDR_VAR 0 30
54632: PUSH
54633: LD_INT 4
54635: PUSH
54636: LD_INT 4
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 4
54645: PUSH
54646: LD_INT 3
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 5
54655: PUSH
54656: LD_INT 4
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 5
54665: PUSH
54666: LD_INT 5
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 4
54675: PUSH
54676: LD_INT 5
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: LD_INT 4
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 3
54695: PUSH
54696: LD_INT 3
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 5
54705: PUSH
54706: LD_INT 3
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 3
54715: PUSH
54716: LD_INT 5
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 3
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 3
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: LD_INT 4
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 4
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: LD_INT 3
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 2
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: LD_INT 4
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 4
54818: NEG
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 4
54829: NEG
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 3
54841: NEG
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 3
54852: NEG
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 4
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 5
54874: NEG
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 5
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 5
54897: NEG
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 3
54909: NEG
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: NEG
54921: PUSH
54922: LD_INT 3
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 3
54932: NEG
54933: PUSH
54934: LD_INT 4
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: LD_INT 3
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 4
54980: NEG
54981: PUSH
54982: LD_INT 3
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 4
54992: NEG
54993: PUSH
54994: LD_INT 4
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: LD_INT 4
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 4
55016: NEG
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 4
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 5
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 4
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 3
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: LD_INT 4
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 5
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: LD_INT 5
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55175: LD_ADDR_VAR 0 31
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 4
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 3
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 4
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 5
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 5
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 4
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 3
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: LD_INT 5
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: LD_INT 3
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: NEG
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 4
55331: NEG
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 4
55342: NEG
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 4
55354: NEG
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: LD_INT 2
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 4
55377: NEG
55378: PUSH
55379: LD_INT 4
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 4
55389: NEG
55390: PUSH
55391: LD_INT 5
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: NEG
55402: PUSH
55403: LD_INT 4
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 3
55413: NEG
55414: PUSH
55415: LD_INT 3
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 4
55425: NEG
55426: PUSH
55427: LD_INT 3
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 5
55437: NEG
55438: PUSH
55439: LD_INT 4
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 5
55449: NEG
55450: PUSH
55451: LD_INT 5
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 3
55461: NEG
55462: PUSH
55463: LD_INT 5
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 5
55473: NEG
55474: PUSH
55475: LD_INT 3
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 3
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 4
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 3
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 3
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: LD_INT 4
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 4
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 4
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 4
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 5
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 5
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 4
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 3
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 3
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 5
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55725: LD_ADDR_VAR 0 32
55729: PUSH
55730: LD_INT 4
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 4
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 3
55755: NEG
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 4
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 5
55788: NEG
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 5
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 5
55811: NEG
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 3
55823: NEG
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 3
55834: NEG
55835: PUSH
55836: LD_INT 3
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 3
55846: NEG
55847: PUSH
55848: LD_INT 4
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: LD_INT 3
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 3
55882: NEG
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 4
55894: NEG
55895: PUSH
55896: LD_INT 3
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 4
55906: NEG
55907: PUSH
55908: LD_INT 4
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: LD_INT 4
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 4
55930: NEG
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 4
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 5
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 4
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 3
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: LD_INT 3
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 4
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 5
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 3
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: LD_INT 5
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 3
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 3
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 4
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 4
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 3
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 2
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 4
56127: PUSH
56128: LD_INT 2
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 4
56137: PUSH
56138: LD_INT 4
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 4
56147: PUSH
56148: LD_INT 3
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 5
56157: PUSH
56158: LD_INT 4
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 5
56167: PUSH
56168: LD_INT 5
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 4
56177: PUSH
56178: LD_INT 5
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 3
56187: PUSH
56188: LD_INT 4
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 3
56197: PUSH
56198: LD_INT 3
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 5
56207: PUSH
56208: LD_INT 3
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: LD_INT 5
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56272: LD_ADDR_VAR 0 33
56276: PUSH
56277: LD_INT 4
56279: NEG
56280: PUSH
56281: LD_INT 4
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 4
56291: NEG
56292: PUSH
56293: LD_INT 5
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: LD_INT 4
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 3
56315: NEG
56316: PUSH
56317: LD_INT 3
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 4
56327: NEG
56328: PUSH
56329: LD_INT 3
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 5
56339: NEG
56340: PUSH
56341: LD_INT 4
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 5
56351: NEG
56352: PUSH
56353: LD_INT 5
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 3
56363: NEG
56364: PUSH
56365: LD_INT 5
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 5
56375: NEG
56376: PUSH
56377: LD_INT 3
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 3
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: LD_INT 4
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: LD_INT 3
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 3
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: LD_INT 4
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: NEG
56478: PUSH
56479: LD_INT 4
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 4
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 4
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 5
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 5
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 4
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 3
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 3
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 5
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 4
56602: PUSH
56603: LD_INT 3
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 4
56612: PUSH
56613: LD_INT 4
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: PUSH
56623: LD_INT 4
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: LD_INT 3
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 4
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: LD_INT 4
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: LD_INT 4
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 4
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 5
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 5
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 4
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 3
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: LD_INT 5
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: LD_INT 3
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56810: LD_ADDR_VAR 0 34
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 4
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 5
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: LD_INT 4
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: LD_INT 3
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 4
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 5
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: LD_INT 3
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: LD_INT 5
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 4
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 4
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 3
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 4
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 4
57012: PUSH
57013: LD_INT 4
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 4
57022: PUSH
57023: LD_INT 3
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 5
57032: PUSH
57033: LD_INT 4
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 5
57042: PUSH
57043: LD_INT 5
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 4
57052: PUSH
57053: LD_INT 5
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: LD_INT 4
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 3
57072: PUSH
57073: LD_INT 3
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 5
57082: PUSH
57083: LD_INT 3
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 3
57092: PUSH
57093: LD_INT 5
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 3
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 3
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 4
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_INT 4
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 3
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 4
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 2
57184: NEG
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 4
57195: NEG
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 4
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 3
57218: NEG
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 3
57229: NEG
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 4
57240: NEG
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 5
57251: NEG
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 5
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 5
57274: NEG
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 3
57286: NEG
57287: PUSH
57288: LD_INT 2
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: ST_TO_ADDR
// end ; end ;
57342: GO 57345
57344: POP
// case btype of b_depot , b_warehouse :
57345: LD_VAR 0 1
57349: PUSH
57350: LD_INT 0
57352: DOUBLE
57353: EQUAL
57354: IFTRUE 57364
57356: LD_INT 1
57358: DOUBLE
57359: EQUAL
57360: IFTRUE 57364
57362: GO 57565
57364: POP
// case nation of nation_american :
57365: LD_VAR 0 5
57369: PUSH
57370: LD_INT 1
57372: DOUBLE
57373: EQUAL
57374: IFTRUE 57378
57376: GO 57434
57378: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57379: LD_ADDR_VAR 0 9
57383: PUSH
57384: LD_VAR 0 11
57388: PUSH
57389: LD_VAR 0 12
57393: PUSH
57394: LD_VAR 0 13
57398: PUSH
57399: LD_VAR 0 14
57403: PUSH
57404: LD_VAR 0 15
57408: PUSH
57409: LD_VAR 0 16
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: PUSH
57422: LD_VAR 0 4
57426: PUSH
57427: LD_INT 1
57429: PLUS
57430: ARRAY
57431: ST_TO_ADDR
57432: GO 57563
57434: LD_INT 2
57436: DOUBLE
57437: EQUAL
57438: IFTRUE 57442
57440: GO 57498
57442: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57443: LD_ADDR_VAR 0 9
57447: PUSH
57448: LD_VAR 0 17
57452: PUSH
57453: LD_VAR 0 18
57457: PUSH
57458: LD_VAR 0 19
57462: PUSH
57463: LD_VAR 0 20
57467: PUSH
57468: LD_VAR 0 21
57472: PUSH
57473: LD_VAR 0 22
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: PUSH
57486: LD_VAR 0 4
57490: PUSH
57491: LD_INT 1
57493: PLUS
57494: ARRAY
57495: ST_TO_ADDR
57496: GO 57563
57498: LD_INT 3
57500: DOUBLE
57501: EQUAL
57502: IFTRUE 57506
57504: GO 57562
57506: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57507: LD_ADDR_VAR 0 9
57511: PUSH
57512: LD_VAR 0 23
57516: PUSH
57517: LD_VAR 0 24
57521: PUSH
57522: LD_VAR 0 25
57526: PUSH
57527: LD_VAR 0 26
57531: PUSH
57532: LD_VAR 0 27
57536: PUSH
57537: LD_VAR 0 28
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: PUSH
57550: LD_VAR 0 4
57554: PUSH
57555: LD_INT 1
57557: PLUS
57558: ARRAY
57559: ST_TO_ADDR
57560: GO 57563
57562: POP
57563: GO 58118
57565: LD_INT 2
57567: DOUBLE
57568: EQUAL
57569: IFTRUE 57579
57571: LD_INT 3
57573: DOUBLE
57574: EQUAL
57575: IFTRUE 57579
57577: GO 57635
57579: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57580: LD_ADDR_VAR 0 9
57584: PUSH
57585: LD_VAR 0 29
57589: PUSH
57590: LD_VAR 0 30
57594: PUSH
57595: LD_VAR 0 31
57599: PUSH
57600: LD_VAR 0 32
57604: PUSH
57605: LD_VAR 0 33
57609: PUSH
57610: LD_VAR 0 34
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: PUSH
57623: LD_VAR 0 4
57627: PUSH
57628: LD_INT 1
57630: PLUS
57631: ARRAY
57632: ST_TO_ADDR
57633: GO 58118
57635: LD_INT 16
57637: DOUBLE
57638: EQUAL
57639: IFTRUE 57697
57641: LD_INT 17
57643: DOUBLE
57644: EQUAL
57645: IFTRUE 57697
57647: LD_INT 18
57649: DOUBLE
57650: EQUAL
57651: IFTRUE 57697
57653: LD_INT 19
57655: DOUBLE
57656: EQUAL
57657: IFTRUE 57697
57659: LD_INT 22
57661: DOUBLE
57662: EQUAL
57663: IFTRUE 57697
57665: LD_INT 20
57667: DOUBLE
57668: EQUAL
57669: IFTRUE 57697
57671: LD_INT 21
57673: DOUBLE
57674: EQUAL
57675: IFTRUE 57697
57677: LD_INT 23
57679: DOUBLE
57680: EQUAL
57681: IFTRUE 57697
57683: LD_INT 24
57685: DOUBLE
57686: EQUAL
57687: IFTRUE 57697
57689: LD_INT 25
57691: DOUBLE
57692: EQUAL
57693: IFTRUE 57697
57695: GO 57753
57697: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57698: LD_ADDR_VAR 0 9
57702: PUSH
57703: LD_VAR 0 35
57707: PUSH
57708: LD_VAR 0 36
57712: PUSH
57713: LD_VAR 0 37
57717: PUSH
57718: LD_VAR 0 38
57722: PUSH
57723: LD_VAR 0 39
57727: PUSH
57728: LD_VAR 0 40
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: PUSH
57741: LD_VAR 0 4
57745: PUSH
57746: LD_INT 1
57748: PLUS
57749: ARRAY
57750: ST_TO_ADDR
57751: GO 58118
57753: LD_INT 6
57755: DOUBLE
57756: EQUAL
57757: IFTRUE 57809
57759: LD_INT 7
57761: DOUBLE
57762: EQUAL
57763: IFTRUE 57809
57765: LD_INT 8
57767: DOUBLE
57768: EQUAL
57769: IFTRUE 57809
57771: LD_INT 13
57773: DOUBLE
57774: EQUAL
57775: IFTRUE 57809
57777: LD_INT 12
57779: DOUBLE
57780: EQUAL
57781: IFTRUE 57809
57783: LD_INT 15
57785: DOUBLE
57786: EQUAL
57787: IFTRUE 57809
57789: LD_INT 11
57791: DOUBLE
57792: EQUAL
57793: IFTRUE 57809
57795: LD_INT 14
57797: DOUBLE
57798: EQUAL
57799: IFTRUE 57809
57801: LD_INT 10
57803: DOUBLE
57804: EQUAL
57805: IFTRUE 57809
57807: GO 57865
57809: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57810: LD_ADDR_VAR 0 9
57814: PUSH
57815: LD_VAR 0 41
57819: PUSH
57820: LD_VAR 0 42
57824: PUSH
57825: LD_VAR 0 43
57829: PUSH
57830: LD_VAR 0 44
57834: PUSH
57835: LD_VAR 0 45
57839: PUSH
57840: LD_VAR 0 46
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: PUSH
57853: LD_VAR 0 4
57857: PUSH
57858: LD_INT 1
57860: PLUS
57861: ARRAY
57862: ST_TO_ADDR
57863: GO 58118
57865: LD_INT 36
57867: DOUBLE
57868: EQUAL
57869: IFTRUE 57873
57871: GO 57929
57873: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57874: LD_ADDR_VAR 0 9
57878: PUSH
57879: LD_VAR 0 47
57883: PUSH
57884: LD_VAR 0 48
57888: PUSH
57889: LD_VAR 0 49
57893: PUSH
57894: LD_VAR 0 50
57898: PUSH
57899: LD_VAR 0 51
57903: PUSH
57904: LD_VAR 0 52
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: PUSH
57917: LD_VAR 0 4
57921: PUSH
57922: LD_INT 1
57924: PLUS
57925: ARRAY
57926: ST_TO_ADDR
57927: GO 58118
57929: LD_INT 4
57931: DOUBLE
57932: EQUAL
57933: IFTRUE 57955
57935: LD_INT 5
57937: DOUBLE
57938: EQUAL
57939: IFTRUE 57955
57941: LD_INT 34
57943: DOUBLE
57944: EQUAL
57945: IFTRUE 57955
57947: LD_INT 37
57949: DOUBLE
57950: EQUAL
57951: IFTRUE 57955
57953: GO 58011
57955: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57956: LD_ADDR_VAR 0 9
57960: PUSH
57961: LD_VAR 0 53
57965: PUSH
57966: LD_VAR 0 54
57970: PUSH
57971: LD_VAR 0 55
57975: PUSH
57976: LD_VAR 0 56
57980: PUSH
57981: LD_VAR 0 57
57985: PUSH
57986: LD_VAR 0 58
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: PUSH
57999: LD_VAR 0 4
58003: PUSH
58004: LD_INT 1
58006: PLUS
58007: ARRAY
58008: ST_TO_ADDR
58009: GO 58118
58011: LD_INT 31
58013: DOUBLE
58014: EQUAL
58015: IFTRUE 58061
58017: LD_INT 32
58019: DOUBLE
58020: EQUAL
58021: IFTRUE 58061
58023: LD_INT 33
58025: DOUBLE
58026: EQUAL
58027: IFTRUE 58061
58029: LD_INT 27
58031: DOUBLE
58032: EQUAL
58033: IFTRUE 58061
58035: LD_INT 26
58037: DOUBLE
58038: EQUAL
58039: IFTRUE 58061
58041: LD_INT 28
58043: DOUBLE
58044: EQUAL
58045: IFTRUE 58061
58047: LD_INT 29
58049: DOUBLE
58050: EQUAL
58051: IFTRUE 58061
58053: LD_INT 30
58055: DOUBLE
58056: EQUAL
58057: IFTRUE 58061
58059: GO 58117
58061: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58062: LD_ADDR_VAR 0 9
58066: PUSH
58067: LD_VAR 0 59
58071: PUSH
58072: LD_VAR 0 60
58076: PUSH
58077: LD_VAR 0 61
58081: PUSH
58082: LD_VAR 0 62
58086: PUSH
58087: LD_VAR 0 63
58091: PUSH
58092: LD_VAR 0 64
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: PUSH
58105: LD_VAR 0 4
58109: PUSH
58110: LD_INT 1
58112: PLUS
58113: ARRAY
58114: ST_TO_ADDR
58115: GO 58118
58117: POP
// temp_list2 = [ ] ;
58118: LD_ADDR_VAR 0 10
58122: PUSH
58123: EMPTY
58124: ST_TO_ADDR
// for i in temp_list do
58125: LD_ADDR_VAR 0 8
58129: PUSH
58130: LD_VAR 0 9
58134: PUSH
58135: FOR_IN
58136: IFFALSE 58188
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58138: LD_ADDR_VAR 0 10
58142: PUSH
58143: LD_VAR 0 10
58147: PUSH
58148: LD_VAR 0 8
58152: PUSH
58153: LD_INT 1
58155: ARRAY
58156: PUSH
58157: LD_VAR 0 2
58161: PLUS
58162: PUSH
58163: LD_VAR 0 8
58167: PUSH
58168: LD_INT 2
58170: ARRAY
58171: PUSH
58172: LD_VAR 0 3
58176: PLUS
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: EMPTY
58183: LIST
58184: ADD
58185: ST_TO_ADDR
58186: GO 58135
58188: POP
58189: POP
// result = temp_list2 ;
58190: LD_ADDR_VAR 0 7
58194: PUSH
58195: LD_VAR 0 10
58199: ST_TO_ADDR
// end ;
58200: LD_VAR 0 7
58204: RET
// export function EnemyInRange ( unit , dist ) ; begin
58205: LD_INT 0
58207: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58208: LD_ADDR_VAR 0 3
58212: PUSH
58213: LD_VAR 0 1
58217: PPUSH
58218: CALL_OW 255
58222: PPUSH
58223: LD_VAR 0 1
58227: PPUSH
58228: CALL_OW 250
58232: PPUSH
58233: LD_VAR 0 1
58237: PPUSH
58238: CALL_OW 251
58242: PPUSH
58243: LD_VAR 0 2
58247: PPUSH
58248: CALL 31607 0 4
58252: PUSH
58253: LD_INT 4
58255: ARRAY
58256: ST_TO_ADDR
// end ;
58257: LD_VAR 0 3
58261: RET
// export function PlayerSeeMe ( unit ) ; begin
58262: LD_INT 0
58264: PPUSH
// result := See ( your_side , unit ) ;
58265: LD_ADDR_VAR 0 2
58269: PUSH
58270: LD_OWVAR 2
58274: PPUSH
58275: LD_VAR 0 1
58279: PPUSH
58280: CALL_OW 292
58284: ST_TO_ADDR
// end ;
58285: LD_VAR 0 2
58289: RET
// export function ReverseDir ( unit ) ; begin
58290: LD_INT 0
58292: PPUSH
// if not unit then
58293: LD_VAR 0 1
58297: NOT
58298: IFFALSE 58302
// exit ;
58300: GO 58325
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58302: LD_ADDR_VAR 0 2
58306: PUSH
58307: LD_VAR 0 1
58311: PPUSH
58312: CALL_OW 254
58316: PUSH
58317: LD_INT 3
58319: PLUS
58320: PUSH
58321: LD_INT 6
58323: MOD
58324: ST_TO_ADDR
// end ;
58325: LD_VAR 0 2
58329: RET
// export function ReverseArray ( array ) ; var i ; begin
58330: LD_INT 0
58332: PPUSH
58333: PPUSH
// if not array then
58334: LD_VAR 0 1
58338: NOT
58339: IFFALSE 58343
// exit ;
58341: GO 58398
// result := [ ] ;
58343: LD_ADDR_VAR 0 2
58347: PUSH
58348: EMPTY
58349: ST_TO_ADDR
// for i := array downto 1 do
58350: LD_ADDR_VAR 0 3
58354: PUSH
58355: DOUBLE
58356: LD_VAR 0 1
58360: INC
58361: ST_TO_ADDR
58362: LD_INT 1
58364: PUSH
58365: FOR_DOWNTO
58366: IFFALSE 58396
// result := Join ( result , array [ i ] ) ;
58368: LD_ADDR_VAR 0 2
58372: PUSH
58373: LD_VAR 0 2
58377: PPUSH
58378: LD_VAR 0 1
58382: PUSH
58383: LD_VAR 0 3
58387: ARRAY
58388: PPUSH
58389: CALL 63041 0 2
58393: ST_TO_ADDR
58394: GO 58365
58396: POP
58397: POP
// end ;
58398: LD_VAR 0 2
58402: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58403: LD_INT 0
58405: PPUSH
58406: PPUSH
58407: PPUSH
58408: PPUSH
58409: PPUSH
58410: PPUSH
// if not unit or not hexes then
58411: LD_VAR 0 1
58415: NOT
58416: PUSH
58417: LD_VAR 0 2
58421: NOT
58422: OR
58423: IFFALSE 58427
// exit ;
58425: GO 58550
// dist := 9999 ;
58427: LD_ADDR_VAR 0 5
58431: PUSH
58432: LD_INT 9999
58434: ST_TO_ADDR
// for i = 1 to hexes do
58435: LD_ADDR_VAR 0 4
58439: PUSH
58440: DOUBLE
58441: LD_INT 1
58443: DEC
58444: ST_TO_ADDR
58445: LD_VAR 0 2
58449: PUSH
58450: FOR_TO
58451: IFFALSE 58538
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58453: LD_ADDR_VAR 0 6
58457: PUSH
58458: LD_VAR 0 1
58462: PPUSH
58463: LD_VAR 0 2
58467: PUSH
58468: LD_VAR 0 4
58472: ARRAY
58473: PUSH
58474: LD_INT 1
58476: ARRAY
58477: PPUSH
58478: LD_VAR 0 2
58482: PUSH
58483: LD_VAR 0 4
58487: ARRAY
58488: PUSH
58489: LD_INT 2
58491: ARRAY
58492: PPUSH
58493: CALL_OW 297
58497: ST_TO_ADDR
// if tdist < dist then
58498: LD_VAR 0 6
58502: PUSH
58503: LD_VAR 0 5
58507: LESS
58508: IFFALSE 58536
// begin hex := hexes [ i ] ;
58510: LD_ADDR_VAR 0 8
58514: PUSH
58515: LD_VAR 0 2
58519: PUSH
58520: LD_VAR 0 4
58524: ARRAY
58525: ST_TO_ADDR
// dist := tdist ;
58526: LD_ADDR_VAR 0 5
58530: PUSH
58531: LD_VAR 0 6
58535: ST_TO_ADDR
// end ; end ;
58536: GO 58450
58538: POP
58539: POP
// result := hex ;
58540: LD_ADDR_VAR 0 3
58544: PUSH
58545: LD_VAR 0 8
58549: ST_TO_ADDR
// end ;
58550: LD_VAR 0 3
58554: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58555: LD_INT 0
58557: PPUSH
58558: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58559: LD_VAR 0 1
58563: NOT
58564: PUSH
58565: LD_VAR 0 1
58569: PUSH
58570: LD_INT 21
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 23
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PPUSH
58594: CALL_OW 69
58598: IN
58599: NOT
58600: OR
58601: IFFALSE 58605
// exit ;
58603: GO 58652
// for i = 1 to 3 do
58605: LD_ADDR_VAR 0 3
58609: PUSH
58610: DOUBLE
58611: LD_INT 1
58613: DEC
58614: ST_TO_ADDR
58615: LD_INT 3
58617: PUSH
58618: FOR_TO
58619: IFFALSE 58650
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58621: LD_VAR 0 1
58625: PPUSH
58626: CALL_OW 250
58630: PPUSH
58631: LD_VAR 0 1
58635: PPUSH
58636: CALL_OW 251
58640: PPUSH
58641: LD_INT 1
58643: PPUSH
58644: CALL_OW 453
58648: GO 58618
58650: POP
58651: POP
// end ;
58652: LD_VAR 0 2
58656: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58657: LD_INT 0
58659: PPUSH
58660: PPUSH
58661: PPUSH
58662: PPUSH
58663: PPUSH
58664: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58665: LD_VAR 0 1
58669: NOT
58670: PUSH
58671: LD_VAR 0 2
58675: NOT
58676: OR
58677: PUSH
58678: LD_VAR 0 1
58682: PPUSH
58683: CALL_OW 314
58687: OR
58688: IFFALSE 58692
// exit ;
58690: GO 59159
// if GetLives ( i ) < 250 then
58692: LD_VAR 0 4
58696: PPUSH
58697: CALL_OW 256
58701: PUSH
58702: LD_INT 250
58704: LESS
58705: IFFALSE 58718
// begin ComAutodestruct ( i ) ;
58707: LD_VAR 0 4
58711: PPUSH
58712: CALL 58555 0 1
// exit ;
58716: GO 59159
// end ; x := GetX ( enemy_unit ) ;
58718: LD_ADDR_VAR 0 7
58722: PUSH
58723: LD_VAR 0 2
58727: PPUSH
58728: CALL_OW 250
58732: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58733: LD_ADDR_VAR 0 8
58737: PUSH
58738: LD_VAR 0 2
58742: PPUSH
58743: CALL_OW 251
58747: ST_TO_ADDR
// if not x or not y then
58748: LD_VAR 0 7
58752: NOT
58753: PUSH
58754: LD_VAR 0 8
58758: NOT
58759: OR
58760: IFFALSE 58764
// exit ;
58762: GO 59159
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58764: LD_ADDR_VAR 0 6
58768: PUSH
58769: LD_VAR 0 7
58773: PPUSH
58774: LD_INT 0
58776: PPUSH
58777: LD_INT 4
58779: PPUSH
58780: CALL_OW 272
58784: PUSH
58785: LD_VAR 0 8
58789: PPUSH
58790: LD_INT 0
58792: PPUSH
58793: LD_INT 4
58795: PPUSH
58796: CALL_OW 273
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_VAR 0 7
58809: PPUSH
58810: LD_INT 1
58812: PPUSH
58813: LD_INT 4
58815: PPUSH
58816: CALL_OW 272
58820: PUSH
58821: LD_VAR 0 8
58825: PPUSH
58826: LD_INT 1
58828: PPUSH
58829: LD_INT 4
58831: PPUSH
58832: CALL_OW 273
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_VAR 0 7
58845: PPUSH
58846: LD_INT 2
58848: PPUSH
58849: LD_INT 4
58851: PPUSH
58852: CALL_OW 272
58856: PUSH
58857: LD_VAR 0 8
58861: PPUSH
58862: LD_INT 2
58864: PPUSH
58865: LD_INT 4
58867: PPUSH
58868: CALL_OW 273
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_VAR 0 7
58881: PPUSH
58882: LD_INT 3
58884: PPUSH
58885: LD_INT 4
58887: PPUSH
58888: CALL_OW 272
58892: PUSH
58893: LD_VAR 0 8
58897: PPUSH
58898: LD_INT 3
58900: PPUSH
58901: LD_INT 4
58903: PPUSH
58904: CALL_OW 273
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_VAR 0 7
58917: PPUSH
58918: LD_INT 4
58920: PPUSH
58921: LD_INT 4
58923: PPUSH
58924: CALL_OW 272
58928: PUSH
58929: LD_VAR 0 8
58933: PPUSH
58934: LD_INT 4
58936: PPUSH
58937: LD_INT 4
58939: PPUSH
58940: CALL_OW 273
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_VAR 0 7
58953: PPUSH
58954: LD_INT 5
58956: PPUSH
58957: LD_INT 4
58959: PPUSH
58960: CALL_OW 272
58964: PUSH
58965: LD_VAR 0 8
58969: PPUSH
58970: LD_INT 5
58972: PPUSH
58973: LD_INT 4
58975: PPUSH
58976: CALL_OW 273
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: ST_TO_ADDR
// for i = tmp downto 1 do
58993: LD_ADDR_VAR 0 4
58997: PUSH
58998: DOUBLE
58999: LD_VAR 0 6
59003: INC
59004: ST_TO_ADDR
59005: LD_INT 1
59007: PUSH
59008: FOR_DOWNTO
59009: IFFALSE 59110
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59011: LD_VAR 0 6
59015: PUSH
59016: LD_VAR 0 4
59020: ARRAY
59021: PUSH
59022: LD_INT 1
59024: ARRAY
59025: PPUSH
59026: LD_VAR 0 6
59030: PUSH
59031: LD_VAR 0 4
59035: ARRAY
59036: PUSH
59037: LD_INT 2
59039: ARRAY
59040: PPUSH
59041: CALL_OW 488
59045: NOT
59046: PUSH
59047: LD_VAR 0 6
59051: PUSH
59052: LD_VAR 0 4
59056: ARRAY
59057: PUSH
59058: LD_INT 1
59060: ARRAY
59061: PPUSH
59062: LD_VAR 0 6
59066: PUSH
59067: LD_VAR 0 4
59071: ARRAY
59072: PUSH
59073: LD_INT 2
59075: ARRAY
59076: PPUSH
59077: CALL_OW 428
59081: PUSH
59082: LD_INT 0
59084: NONEQUAL
59085: OR
59086: IFFALSE 59108
// tmp := Delete ( tmp , i ) ;
59088: LD_ADDR_VAR 0 6
59092: PUSH
59093: LD_VAR 0 6
59097: PPUSH
59098: LD_VAR 0 4
59102: PPUSH
59103: CALL_OW 3
59107: ST_TO_ADDR
59108: GO 59008
59110: POP
59111: POP
// j := GetClosestHex ( unit , tmp ) ;
59112: LD_ADDR_VAR 0 5
59116: PUSH
59117: LD_VAR 0 1
59121: PPUSH
59122: LD_VAR 0 6
59126: PPUSH
59127: CALL 58403 0 2
59131: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59132: LD_VAR 0 1
59136: PPUSH
59137: LD_VAR 0 5
59141: PUSH
59142: LD_INT 1
59144: ARRAY
59145: PPUSH
59146: LD_VAR 0 5
59150: PUSH
59151: LD_INT 2
59153: ARRAY
59154: PPUSH
59155: CALL_OW 111
// end ;
59159: LD_VAR 0 3
59163: RET
// export function PrepareApemanSoldier ( ) ; begin
59164: LD_INT 0
59166: PPUSH
// uc_nation := 0 ;
59167: LD_ADDR_OWVAR 21
59171: PUSH
59172: LD_INT 0
59174: ST_TO_ADDR
// hc_sex := sex_male ;
59175: LD_ADDR_OWVAR 27
59179: PUSH
59180: LD_INT 1
59182: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59183: LD_ADDR_OWVAR 28
59187: PUSH
59188: LD_INT 15
59190: ST_TO_ADDR
// hc_gallery :=  ;
59191: LD_ADDR_OWVAR 33
59195: PUSH
59196: LD_STRING 
59198: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59199: LD_ADDR_OWVAR 31
59203: PUSH
59204: LD_INT 0
59206: PPUSH
59207: LD_INT 3
59209: PPUSH
59210: CALL_OW 12
59214: PUSH
59215: LD_INT 0
59217: PPUSH
59218: LD_INT 3
59220: PPUSH
59221: CALL_OW 12
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: ST_TO_ADDR
// end ;
59238: LD_VAR 0 1
59242: RET
// export function PrepareApemanEngineer ( ) ; begin
59243: LD_INT 0
59245: PPUSH
// uc_nation := 0 ;
59246: LD_ADDR_OWVAR 21
59250: PUSH
59251: LD_INT 0
59253: ST_TO_ADDR
// hc_sex := sex_male ;
59254: LD_ADDR_OWVAR 27
59258: PUSH
59259: LD_INT 1
59261: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59262: LD_ADDR_OWVAR 28
59266: PUSH
59267: LD_INT 16
59269: ST_TO_ADDR
// hc_gallery :=  ;
59270: LD_ADDR_OWVAR 33
59274: PUSH
59275: LD_STRING 
59277: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59278: LD_ADDR_OWVAR 31
59282: PUSH
59283: LD_INT 0
59285: PPUSH
59286: LD_INT 3
59288: PPUSH
59289: CALL_OW 12
59293: PUSH
59294: LD_INT 0
59296: PPUSH
59297: LD_INT 3
59299: PPUSH
59300: CALL_OW 12
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: ST_TO_ADDR
// end ;
59317: LD_VAR 0 1
59321: RET
// export function PrepareApeman ( agressivity ) ; begin
59322: LD_INT 0
59324: PPUSH
// uc_side := 0 ;
59325: LD_ADDR_OWVAR 20
59329: PUSH
59330: LD_INT 0
59332: ST_TO_ADDR
// uc_nation := 0 ;
59333: LD_ADDR_OWVAR 21
59337: PUSH
59338: LD_INT 0
59340: ST_TO_ADDR
// hc_sex := sex_male ;
59341: LD_ADDR_OWVAR 27
59345: PUSH
59346: LD_INT 1
59348: ST_TO_ADDR
// hc_class := class_apeman ;
59349: LD_ADDR_OWVAR 28
59353: PUSH
59354: LD_INT 12
59356: ST_TO_ADDR
// hc_gallery :=  ;
59357: LD_ADDR_OWVAR 33
59361: PUSH
59362: LD_STRING 
59364: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59365: LD_ADDR_OWVAR 35
59369: PUSH
59370: LD_VAR 0 1
59374: NEG
59375: PPUSH
59376: LD_VAR 0 1
59380: PPUSH
59381: CALL_OW 12
59385: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59386: LD_ADDR_OWVAR 31
59390: PUSH
59391: LD_INT 0
59393: PPUSH
59394: LD_INT 3
59396: PPUSH
59397: CALL_OW 12
59401: PUSH
59402: LD_INT 0
59404: PPUSH
59405: LD_INT 3
59407: PPUSH
59408: CALL_OW 12
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: ST_TO_ADDR
// end ;
59425: LD_VAR 0 2
59429: RET
// export function PrepareTiger ( agressivity ) ; begin
59430: LD_INT 0
59432: PPUSH
// uc_side := 0 ;
59433: LD_ADDR_OWVAR 20
59437: PUSH
59438: LD_INT 0
59440: ST_TO_ADDR
// uc_nation := 0 ;
59441: LD_ADDR_OWVAR 21
59445: PUSH
59446: LD_INT 0
59448: ST_TO_ADDR
// hc_class := class_tiger ;
59449: LD_ADDR_OWVAR 28
59453: PUSH
59454: LD_INT 14
59456: ST_TO_ADDR
// hc_gallery :=  ;
59457: LD_ADDR_OWVAR 33
59461: PUSH
59462: LD_STRING 
59464: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59465: LD_ADDR_OWVAR 35
59469: PUSH
59470: LD_VAR 0 1
59474: NEG
59475: PPUSH
59476: LD_VAR 0 1
59480: PPUSH
59481: CALL_OW 12
59485: ST_TO_ADDR
// end ;
59486: LD_VAR 0 2
59490: RET
// export function PrepareEnchidna ( ) ; begin
59491: LD_INT 0
59493: PPUSH
// uc_side := 0 ;
59494: LD_ADDR_OWVAR 20
59498: PUSH
59499: LD_INT 0
59501: ST_TO_ADDR
// uc_nation := 0 ;
59502: LD_ADDR_OWVAR 21
59506: PUSH
59507: LD_INT 0
59509: ST_TO_ADDR
// hc_class := class_baggie ;
59510: LD_ADDR_OWVAR 28
59514: PUSH
59515: LD_INT 13
59517: ST_TO_ADDR
// hc_gallery :=  ;
59518: LD_ADDR_OWVAR 33
59522: PUSH
59523: LD_STRING 
59525: ST_TO_ADDR
// end ;
59526: LD_VAR 0 1
59530: RET
// export function PrepareFrog ( ) ; begin
59531: LD_INT 0
59533: PPUSH
// uc_side := 0 ;
59534: LD_ADDR_OWVAR 20
59538: PUSH
59539: LD_INT 0
59541: ST_TO_ADDR
// uc_nation := 0 ;
59542: LD_ADDR_OWVAR 21
59546: PUSH
59547: LD_INT 0
59549: ST_TO_ADDR
// hc_class := class_frog ;
59550: LD_ADDR_OWVAR 28
59554: PUSH
59555: LD_INT 19
59557: ST_TO_ADDR
// hc_gallery :=  ;
59558: LD_ADDR_OWVAR 33
59562: PUSH
59563: LD_STRING 
59565: ST_TO_ADDR
// end ;
59566: LD_VAR 0 1
59570: RET
// export function PrepareFish ( ) ; begin
59571: LD_INT 0
59573: PPUSH
// uc_side := 0 ;
59574: LD_ADDR_OWVAR 20
59578: PUSH
59579: LD_INT 0
59581: ST_TO_ADDR
// uc_nation := 0 ;
59582: LD_ADDR_OWVAR 21
59586: PUSH
59587: LD_INT 0
59589: ST_TO_ADDR
// hc_class := class_fish ;
59590: LD_ADDR_OWVAR 28
59594: PUSH
59595: LD_INT 20
59597: ST_TO_ADDR
// hc_gallery :=  ;
59598: LD_ADDR_OWVAR 33
59602: PUSH
59603: LD_STRING 
59605: ST_TO_ADDR
// end ;
59606: LD_VAR 0 1
59610: RET
// export function PrepareBird ( ) ; begin
59611: LD_INT 0
59613: PPUSH
// uc_side := 0 ;
59614: LD_ADDR_OWVAR 20
59618: PUSH
59619: LD_INT 0
59621: ST_TO_ADDR
// uc_nation := 0 ;
59622: LD_ADDR_OWVAR 21
59626: PUSH
59627: LD_INT 0
59629: ST_TO_ADDR
// hc_class := class_phororhacos ;
59630: LD_ADDR_OWVAR 28
59634: PUSH
59635: LD_INT 18
59637: ST_TO_ADDR
// hc_gallery :=  ;
59638: LD_ADDR_OWVAR 33
59642: PUSH
59643: LD_STRING 
59645: ST_TO_ADDR
// end ;
59646: LD_VAR 0 1
59650: RET
// export function PrepareHorse ( ) ; begin
59651: LD_INT 0
59653: PPUSH
// uc_side := 0 ;
59654: LD_ADDR_OWVAR 20
59658: PUSH
59659: LD_INT 0
59661: ST_TO_ADDR
// uc_nation := 0 ;
59662: LD_ADDR_OWVAR 21
59666: PUSH
59667: LD_INT 0
59669: ST_TO_ADDR
// hc_class := class_horse ;
59670: LD_ADDR_OWVAR 28
59674: PUSH
59675: LD_INT 21
59677: ST_TO_ADDR
// hc_gallery :=  ;
59678: LD_ADDR_OWVAR 33
59682: PUSH
59683: LD_STRING 
59685: ST_TO_ADDR
// end ;
59686: LD_VAR 0 1
59690: RET
// export function PrepareMastodont ( ) ; begin
59691: LD_INT 0
59693: PPUSH
// uc_side := 0 ;
59694: LD_ADDR_OWVAR 20
59698: PUSH
59699: LD_INT 0
59701: ST_TO_ADDR
// uc_nation := 0 ;
59702: LD_ADDR_OWVAR 21
59706: PUSH
59707: LD_INT 0
59709: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59710: LD_ADDR_OWVAR 37
59714: PUSH
59715: LD_INT 31
59717: ST_TO_ADDR
// vc_control := control_rider ;
59718: LD_ADDR_OWVAR 38
59722: PUSH
59723: LD_INT 4
59725: ST_TO_ADDR
// end ;
59726: LD_VAR 0 1
59730: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59731: LD_INT 0
59733: PPUSH
59734: PPUSH
59735: PPUSH
// uc_side = 0 ;
59736: LD_ADDR_OWVAR 20
59740: PUSH
59741: LD_INT 0
59743: ST_TO_ADDR
// uc_nation = 0 ;
59744: LD_ADDR_OWVAR 21
59748: PUSH
59749: LD_INT 0
59751: ST_TO_ADDR
// InitHc_All ( ) ;
59752: CALL_OW 584
// InitVc ;
59756: CALL_OW 20
// if mastodonts then
59760: LD_VAR 0 6
59764: IFFALSE 59831
// for i = 1 to mastodonts do
59766: LD_ADDR_VAR 0 11
59770: PUSH
59771: DOUBLE
59772: LD_INT 1
59774: DEC
59775: ST_TO_ADDR
59776: LD_VAR 0 6
59780: PUSH
59781: FOR_TO
59782: IFFALSE 59829
// begin vc_chassis := 31 ;
59784: LD_ADDR_OWVAR 37
59788: PUSH
59789: LD_INT 31
59791: ST_TO_ADDR
// vc_control := control_rider ;
59792: LD_ADDR_OWVAR 38
59796: PUSH
59797: LD_INT 4
59799: ST_TO_ADDR
// animal := CreateVehicle ;
59800: LD_ADDR_VAR 0 12
59804: PUSH
59805: CALL_OW 45
59809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59810: LD_VAR 0 12
59814: PPUSH
59815: LD_VAR 0 8
59819: PPUSH
59820: LD_INT 0
59822: PPUSH
59823: CALL 61959 0 3
// end ;
59827: GO 59781
59829: POP
59830: POP
// if horses then
59831: LD_VAR 0 5
59835: IFFALSE 59902
// for i = 1 to horses do
59837: LD_ADDR_VAR 0 11
59841: PUSH
59842: DOUBLE
59843: LD_INT 1
59845: DEC
59846: ST_TO_ADDR
59847: LD_VAR 0 5
59851: PUSH
59852: FOR_TO
59853: IFFALSE 59900
// begin hc_class := 21 ;
59855: LD_ADDR_OWVAR 28
59859: PUSH
59860: LD_INT 21
59862: ST_TO_ADDR
// hc_gallery :=  ;
59863: LD_ADDR_OWVAR 33
59867: PUSH
59868: LD_STRING 
59870: ST_TO_ADDR
// animal := CreateHuman ;
59871: LD_ADDR_VAR 0 12
59875: PUSH
59876: CALL_OW 44
59880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59881: LD_VAR 0 12
59885: PPUSH
59886: LD_VAR 0 8
59890: PPUSH
59891: LD_INT 0
59893: PPUSH
59894: CALL 61959 0 3
// end ;
59898: GO 59852
59900: POP
59901: POP
// if birds then
59902: LD_VAR 0 1
59906: IFFALSE 59973
// for i = 1 to birds do
59908: LD_ADDR_VAR 0 11
59912: PUSH
59913: DOUBLE
59914: LD_INT 1
59916: DEC
59917: ST_TO_ADDR
59918: LD_VAR 0 1
59922: PUSH
59923: FOR_TO
59924: IFFALSE 59971
// begin hc_class = 18 ;
59926: LD_ADDR_OWVAR 28
59930: PUSH
59931: LD_INT 18
59933: ST_TO_ADDR
// hc_gallery =  ;
59934: LD_ADDR_OWVAR 33
59938: PUSH
59939: LD_STRING 
59941: ST_TO_ADDR
// animal := CreateHuman ;
59942: LD_ADDR_VAR 0 12
59946: PUSH
59947: CALL_OW 44
59951: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59952: LD_VAR 0 12
59956: PPUSH
59957: LD_VAR 0 8
59961: PPUSH
59962: LD_INT 0
59964: PPUSH
59965: CALL 61959 0 3
// end ;
59969: GO 59923
59971: POP
59972: POP
// if tigers then
59973: LD_VAR 0 2
59977: IFFALSE 60061
// for i = 1 to tigers do
59979: LD_ADDR_VAR 0 11
59983: PUSH
59984: DOUBLE
59985: LD_INT 1
59987: DEC
59988: ST_TO_ADDR
59989: LD_VAR 0 2
59993: PUSH
59994: FOR_TO
59995: IFFALSE 60059
// begin hc_class = class_tiger ;
59997: LD_ADDR_OWVAR 28
60001: PUSH
60002: LD_INT 14
60004: ST_TO_ADDR
// hc_gallery =  ;
60005: LD_ADDR_OWVAR 33
60009: PUSH
60010: LD_STRING 
60012: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60013: LD_ADDR_OWVAR 35
60017: PUSH
60018: LD_INT 7
60020: NEG
60021: PPUSH
60022: LD_INT 7
60024: PPUSH
60025: CALL_OW 12
60029: ST_TO_ADDR
// animal := CreateHuman ;
60030: LD_ADDR_VAR 0 12
60034: PUSH
60035: CALL_OW 44
60039: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60040: LD_VAR 0 12
60044: PPUSH
60045: LD_VAR 0 8
60049: PPUSH
60050: LD_INT 0
60052: PPUSH
60053: CALL 61959 0 3
// end ;
60057: GO 59994
60059: POP
60060: POP
// if apemans then
60061: LD_VAR 0 3
60065: IFFALSE 60188
// for i = 1 to apemans do
60067: LD_ADDR_VAR 0 11
60071: PUSH
60072: DOUBLE
60073: LD_INT 1
60075: DEC
60076: ST_TO_ADDR
60077: LD_VAR 0 3
60081: PUSH
60082: FOR_TO
60083: IFFALSE 60186
// begin hc_class = class_apeman ;
60085: LD_ADDR_OWVAR 28
60089: PUSH
60090: LD_INT 12
60092: ST_TO_ADDR
// hc_gallery =  ;
60093: LD_ADDR_OWVAR 33
60097: PUSH
60098: LD_STRING 
60100: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60101: LD_ADDR_OWVAR 35
60105: PUSH
60106: LD_INT 2
60108: NEG
60109: PPUSH
60110: LD_INT 2
60112: PPUSH
60113: CALL_OW 12
60117: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60118: LD_ADDR_OWVAR 31
60122: PUSH
60123: LD_INT 1
60125: PPUSH
60126: LD_INT 3
60128: PPUSH
60129: CALL_OW 12
60133: PUSH
60134: LD_INT 1
60136: PPUSH
60137: LD_INT 3
60139: PPUSH
60140: CALL_OW 12
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: ST_TO_ADDR
// animal := CreateHuman ;
60157: LD_ADDR_VAR 0 12
60161: PUSH
60162: CALL_OW 44
60166: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60167: LD_VAR 0 12
60171: PPUSH
60172: LD_VAR 0 8
60176: PPUSH
60177: LD_INT 0
60179: PPUSH
60180: CALL 61959 0 3
// end ;
60184: GO 60082
60186: POP
60187: POP
// if enchidnas then
60188: LD_VAR 0 4
60192: IFFALSE 60259
// for i = 1 to enchidnas do
60194: LD_ADDR_VAR 0 11
60198: PUSH
60199: DOUBLE
60200: LD_INT 1
60202: DEC
60203: ST_TO_ADDR
60204: LD_VAR 0 4
60208: PUSH
60209: FOR_TO
60210: IFFALSE 60257
// begin hc_class = 13 ;
60212: LD_ADDR_OWVAR 28
60216: PUSH
60217: LD_INT 13
60219: ST_TO_ADDR
// hc_gallery =  ;
60220: LD_ADDR_OWVAR 33
60224: PUSH
60225: LD_STRING 
60227: ST_TO_ADDR
// animal := CreateHuman ;
60228: LD_ADDR_VAR 0 12
60232: PUSH
60233: CALL_OW 44
60237: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60238: LD_VAR 0 12
60242: PPUSH
60243: LD_VAR 0 8
60247: PPUSH
60248: LD_INT 0
60250: PPUSH
60251: CALL 61959 0 3
// end ;
60255: GO 60209
60257: POP
60258: POP
// if fishes then
60259: LD_VAR 0 7
60263: IFFALSE 60330
// for i = 1 to fishes do
60265: LD_ADDR_VAR 0 11
60269: PUSH
60270: DOUBLE
60271: LD_INT 1
60273: DEC
60274: ST_TO_ADDR
60275: LD_VAR 0 7
60279: PUSH
60280: FOR_TO
60281: IFFALSE 60328
// begin hc_class = 20 ;
60283: LD_ADDR_OWVAR 28
60287: PUSH
60288: LD_INT 20
60290: ST_TO_ADDR
// hc_gallery =  ;
60291: LD_ADDR_OWVAR 33
60295: PUSH
60296: LD_STRING 
60298: ST_TO_ADDR
// animal := CreateHuman ;
60299: LD_ADDR_VAR 0 12
60303: PUSH
60304: CALL_OW 44
60308: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60309: LD_VAR 0 12
60313: PPUSH
60314: LD_VAR 0 9
60318: PPUSH
60319: LD_INT 0
60321: PPUSH
60322: CALL 61959 0 3
// end ;
60326: GO 60280
60328: POP
60329: POP
// end ;
60330: LD_VAR 0 10
60334: RET
// export function WantHeal ( sci , unit ) ; begin
60335: LD_INT 0
60337: PPUSH
// if GetTaskList ( sci ) > 0 then
60338: LD_VAR 0 1
60342: PPUSH
60343: CALL_OW 437
60347: PUSH
60348: LD_INT 0
60350: GREATER
60351: IFFALSE 60421
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60353: LD_VAR 0 1
60357: PPUSH
60358: CALL_OW 437
60362: PUSH
60363: LD_INT 1
60365: ARRAY
60366: PUSH
60367: LD_INT 1
60369: ARRAY
60370: PUSH
60371: LD_STRING l
60373: EQUAL
60374: PUSH
60375: LD_VAR 0 1
60379: PPUSH
60380: CALL_OW 437
60384: PUSH
60385: LD_INT 1
60387: ARRAY
60388: PUSH
60389: LD_INT 4
60391: ARRAY
60392: PUSH
60393: LD_VAR 0 2
60397: EQUAL
60398: AND
60399: IFFALSE 60411
// result := true else
60401: LD_ADDR_VAR 0 3
60405: PUSH
60406: LD_INT 1
60408: ST_TO_ADDR
60409: GO 60419
// result := false ;
60411: LD_ADDR_VAR 0 3
60415: PUSH
60416: LD_INT 0
60418: ST_TO_ADDR
// end else
60419: GO 60429
// result := false ;
60421: LD_ADDR_VAR 0 3
60425: PUSH
60426: LD_INT 0
60428: ST_TO_ADDR
// end ;
60429: LD_VAR 0 3
60433: RET
// export function HealTarget ( sci ) ; begin
60434: LD_INT 0
60436: PPUSH
// if not sci then
60437: LD_VAR 0 1
60441: NOT
60442: IFFALSE 60446
// exit ;
60444: GO 60511
// result := 0 ;
60446: LD_ADDR_VAR 0 2
60450: PUSH
60451: LD_INT 0
60453: ST_TO_ADDR
// if GetTaskList ( sci ) then
60454: LD_VAR 0 1
60458: PPUSH
60459: CALL_OW 437
60463: IFFALSE 60511
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60465: LD_VAR 0 1
60469: PPUSH
60470: CALL_OW 437
60474: PUSH
60475: LD_INT 1
60477: ARRAY
60478: PUSH
60479: LD_INT 1
60481: ARRAY
60482: PUSH
60483: LD_STRING l
60485: EQUAL
60486: IFFALSE 60511
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60488: LD_ADDR_VAR 0 2
60492: PUSH
60493: LD_VAR 0 1
60497: PPUSH
60498: CALL_OW 437
60502: PUSH
60503: LD_INT 1
60505: ARRAY
60506: PUSH
60507: LD_INT 4
60509: ARRAY
60510: ST_TO_ADDR
// end ;
60511: LD_VAR 0 2
60515: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60516: LD_INT 0
60518: PPUSH
60519: PPUSH
60520: PPUSH
60521: PPUSH
// if not base_units then
60522: LD_VAR 0 1
60526: NOT
60527: IFFALSE 60531
// exit ;
60529: GO 60618
// result := false ;
60531: LD_ADDR_VAR 0 2
60535: PUSH
60536: LD_INT 0
60538: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60539: LD_ADDR_VAR 0 5
60543: PUSH
60544: LD_VAR 0 1
60548: PPUSH
60549: LD_INT 21
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PPUSH
60559: CALL_OW 72
60563: ST_TO_ADDR
// if not tmp then
60564: LD_VAR 0 5
60568: NOT
60569: IFFALSE 60573
// exit ;
60571: GO 60618
// for i in tmp do
60573: LD_ADDR_VAR 0 3
60577: PUSH
60578: LD_VAR 0 5
60582: PUSH
60583: FOR_IN
60584: IFFALSE 60616
// begin result := EnemyInRange ( i , 22 ) ;
60586: LD_ADDR_VAR 0 2
60590: PUSH
60591: LD_VAR 0 3
60595: PPUSH
60596: LD_INT 22
60598: PPUSH
60599: CALL 58205 0 2
60603: ST_TO_ADDR
// if result then
60604: LD_VAR 0 2
60608: IFFALSE 60614
// exit ;
60610: POP
60611: POP
60612: GO 60618
// end ;
60614: GO 60583
60616: POP
60617: POP
// end ;
60618: LD_VAR 0 2
60622: RET
// export function FilterByTag ( units , tag ) ; begin
60623: LD_INT 0
60625: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60626: LD_ADDR_VAR 0 3
60630: PUSH
60631: LD_VAR 0 1
60635: PPUSH
60636: LD_INT 120
60638: PUSH
60639: LD_VAR 0 2
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PPUSH
60648: CALL_OW 72
60652: ST_TO_ADDR
// end ;
60653: LD_VAR 0 3
60657: RET
// export function IsDriver ( un ) ; begin
60658: LD_INT 0
60660: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60661: LD_ADDR_VAR 0 2
60665: PUSH
60666: LD_VAR 0 1
60670: PUSH
60671: LD_INT 55
60673: PUSH
60674: EMPTY
60675: LIST
60676: PPUSH
60677: CALL_OW 69
60681: IN
60682: ST_TO_ADDR
// end ;
60683: LD_VAR 0 2
60687: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60688: LD_INT 0
60690: PPUSH
60691: PPUSH
// list := [ ] ;
60692: LD_ADDR_VAR 0 5
60696: PUSH
60697: EMPTY
60698: ST_TO_ADDR
// case d of 0 :
60699: LD_VAR 0 3
60703: PUSH
60704: LD_INT 0
60706: DOUBLE
60707: EQUAL
60708: IFTRUE 60712
60710: GO 60845
60712: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60713: LD_ADDR_VAR 0 5
60717: PUSH
60718: LD_VAR 0 1
60722: PUSH
60723: LD_INT 4
60725: MINUS
60726: PUSH
60727: LD_VAR 0 2
60731: PUSH
60732: LD_INT 4
60734: MINUS
60735: PUSH
60736: LD_INT 2
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: LIST
60743: PUSH
60744: LD_VAR 0 1
60748: PUSH
60749: LD_INT 3
60751: MINUS
60752: PUSH
60753: LD_VAR 0 2
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: LIST
60765: PUSH
60766: LD_VAR 0 1
60770: PUSH
60771: LD_INT 4
60773: PLUS
60774: PUSH
60775: LD_VAR 0 2
60779: PUSH
60780: LD_INT 4
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: LIST
60787: PUSH
60788: LD_VAR 0 1
60792: PUSH
60793: LD_INT 3
60795: PLUS
60796: PUSH
60797: LD_VAR 0 2
60801: PUSH
60802: LD_INT 3
60804: PLUS
60805: PUSH
60806: LD_INT 5
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: LIST
60813: PUSH
60814: LD_VAR 0 1
60818: PUSH
60819: LD_VAR 0 2
60823: PUSH
60824: LD_INT 4
60826: PLUS
60827: PUSH
60828: LD_INT 0
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: ST_TO_ADDR
// end ; 1 :
60843: GO 61543
60845: LD_INT 1
60847: DOUBLE
60848: EQUAL
60849: IFTRUE 60853
60851: GO 60986
60853: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60854: LD_ADDR_VAR 0 5
60858: PUSH
60859: LD_VAR 0 1
60863: PUSH
60864: LD_VAR 0 2
60868: PUSH
60869: LD_INT 4
60871: MINUS
60872: PUSH
60873: LD_INT 3
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: LIST
60880: PUSH
60881: LD_VAR 0 1
60885: PUSH
60886: LD_INT 3
60888: MINUS
60889: PUSH
60890: LD_VAR 0 2
60894: PUSH
60895: LD_INT 3
60897: MINUS
60898: PUSH
60899: LD_INT 2
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: LIST
60906: PUSH
60907: LD_VAR 0 1
60911: PUSH
60912: LD_INT 4
60914: MINUS
60915: PUSH
60916: LD_VAR 0 2
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: PUSH
60929: LD_VAR 0 1
60933: PUSH
60934: LD_VAR 0 2
60938: PUSH
60939: LD_INT 3
60941: PLUS
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: LIST
60950: PUSH
60951: LD_VAR 0 1
60955: PUSH
60956: LD_INT 4
60958: PLUS
60959: PUSH
60960: LD_VAR 0 2
60964: PUSH
60965: LD_INT 4
60967: PLUS
60968: PUSH
60969: LD_INT 5
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: LIST
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: ST_TO_ADDR
// end ; 2 :
60984: GO 61543
60986: LD_INT 2
60988: DOUBLE
60989: EQUAL
60990: IFTRUE 60994
60992: GO 61123
60994: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60995: LD_ADDR_VAR 0 5
60999: PUSH
61000: LD_VAR 0 1
61004: PUSH
61005: LD_VAR 0 2
61009: PUSH
61010: LD_INT 3
61012: MINUS
61013: PUSH
61014: LD_INT 3
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: PUSH
61022: LD_VAR 0 1
61026: PUSH
61027: LD_INT 4
61029: PLUS
61030: PUSH
61031: LD_VAR 0 2
61035: PUSH
61036: LD_INT 4
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: LIST
61043: PUSH
61044: LD_VAR 0 1
61048: PUSH
61049: LD_VAR 0 2
61053: PUSH
61054: LD_INT 4
61056: PLUS
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: LIST
61065: PUSH
61066: LD_VAR 0 1
61070: PUSH
61071: LD_INT 3
61073: MINUS
61074: PUSH
61075: LD_VAR 0 2
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: LIST
61087: PUSH
61088: LD_VAR 0 1
61092: PUSH
61093: LD_INT 4
61095: MINUS
61096: PUSH
61097: LD_VAR 0 2
61101: PUSH
61102: LD_INT 4
61104: MINUS
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: LIST
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: ST_TO_ADDR
// end ; 3 :
61121: GO 61543
61123: LD_INT 3
61125: DOUBLE
61126: EQUAL
61127: IFTRUE 61131
61129: GO 61264
61131: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61132: LD_ADDR_VAR 0 5
61136: PUSH
61137: LD_VAR 0 1
61141: PUSH
61142: LD_INT 3
61144: PLUS
61145: PUSH
61146: LD_VAR 0 2
61150: PUSH
61151: LD_INT 4
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: LIST
61158: PUSH
61159: LD_VAR 0 1
61163: PUSH
61164: LD_INT 4
61166: PLUS
61167: PUSH
61168: LD_VAR 0 2
61172: PUSH
61173: LD_INT 4
61175: PLUS
61176: PUSH
61177: LD_INT 5
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: LIST
61184: PUSH
61185: LD_VAR 0 1
61189: PUSH
61190: LD_INT 4
61192: MINUS
61193: PUSH
61194: LD_VAR 0 2
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: LIST
61206: PUSH
61207: LD_VAR 0 1
61211: PUSH
61212: LD_VAR 0 2
61216: PUSH
61217: LD_INT 4
61219: MINUS
61220: PUSH
61221: LD_INT 3
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: LIST
61228: PUSH
61229: LD_VAR 0 1
61233: PUSH
61234: LD_INT 3
61236: MINUS
61237: PUSH
61238: LD_VAR 0 2
61242: PUSH
61243: LD_INT 3
61245: MINUS
61246: PUSH
61247: LD_INT 2
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: LIST
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: ST_TO_ADDR
// end ; 4 :
61262: GO 61543
61264: LD_INT 4
61266: DOUBLE
61267: EQUAL
61268: IFTRUE 61272
61270: GO 61405
61272: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61273: LD_ADDR_VAR 0 5
61277: PUSH
61278: LD_VAR 0 1
61282: PUSH
61283: LD_VAR 0 2
61287: PUSH
61288: LD_INT 4
61290: PLUS
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: LIST
61299: PUSH
61300: LD_VAR 0 1
61304: PUSH
61305: LD_INT 3
61307: PLUS
61308: PUSH
61309: LD_VAR 0 2
61313: PUSH
61314: LD_INT 3
61316: PLUS
61317: PUSH
61318: LD_INT 5
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: PUSH
61326: LD_VAR 0 1
61330: PUSH
61331: LD_INT 4
61333: PLUS
61334: PUSH
61335: LD_VAR 0 2
61339: PUSH
61340: LD_INT 4
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: LIST
61347: PUSH
61348: LD_VAR 0 1
61352: PUSH
61353: LD_VAR 0 2
61357: PUSH
61358: LD_INT 3
61360: MINUS
61361: PUSH
61362: LD_INT 3
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: LIST
61369: PUSH
61370: LD_VAR 0 1
61374: PUSH
61375: LD_INT 4
61377: MINUS
61378: PUSH
61379: LD_VAR 0 2
61383: PUSH
61384: LD_INT 4
61386: MINUS
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: LIST
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: ST_TO_ADDR
// end ; 5 :
61403: GO 61543
61405: LD_INT 5
61407: DOUBLE
61408: EQUAL
61409: IFTRUE 61413
61411: GO 61542
61413: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61414: LD_ADDR_VAR 0 5
61418: PUSH
61419: LD_VAR 0 1
61423: PUSH
61424: LD_INT 4
61426: MINUS
61427: PUSH
61428: LD_VAR 0 2
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: LIST
61440: PUSH
61441: LD_VAR 0 1
61445: PUSH
61446: LD_VAR 0 2
61450: PUSH
61451: LD_INT 4
61453: MINUS
61454: PUSH
61455: LD_INT 3
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: PUSH
61463: LD_VAR 0 1
61467: PUSH
61468: LD_INT 4
61470: PLUS
61471: PUSH
61472: LD_VAR 0 2
61476: PUSH
61477: LD_INT 4
61479: PLUS
61480: PUSH
61481: LD_INT 5
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: LIST
61488: PUSH
61489: LD_VAR 0 1
61493: PUSH
61494: LD_INT 3
61496: PLUS
61497: PUSH
61498: LD_VAR 0 2
61502: PUSH
61503: LD_INT 4
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: PUSH
61511: LD_VAR 0 1
61515: PUSH
61516: LD_VAR 0 2
61520: PUSH
61521: LD_INT 3
61523: PLUS
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: LIST
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: ST_TO_ADDR
// end ; end ;
61540: GO 61543
61542: POP
// result := list ;
61543: LD_ADDR_VAR 0 4
61547: PUSH
61548: LD_VAR 0 5
61552: ST_TO_ADDR
// end ;
61553: LD_VAR 0 4
61557: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61558: LD_INT 0
61560: PPUSH
61561: PPUSH
61562: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61563: LD_VAR 0 1
61567: NOT
61568: PUSH
61569: LD_VAR 0 2
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: LD_INT 3
61582: PUSH
61583: LD_INT 4
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: IN
61592: NOT
61593: OR
61594: IFFALSE 61598
// exit ;
61596: GO 61681
// tmp := [ ] ;
61598: LD_ADDR_VAR 0 5
61602: PUSH
61603: EMPTY
61604: ST_TO_ADDR
// for i in units do
61605: LD_ADDR_VAR 0 4
61609: PUSH
61610: LD_VAR 0 1
61614: PUSH
61615: FOR_IN
61616: IFFALSE 61650
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61618: LD_ADDR_VAR 0 5
61622: PUSH
61623: LD_VAR 0 5
61627: PPUSH
61628: LD_VAR 0 4
61632: PPUSH
61633: LD_VAR 0 2
61637: PPUSH
61638: CALL_OW 259
61642: PPUSH
61643: CALL 63041 0 2
61647: ST_TO_ADDR
61648: GO 61615
61650: POP
61651: POP
// if not tmp then
61652: LD_VAR 0 5
61656: NOT
61657: IFFALSE 61661
// exit ;
61659: GO 61681
// result := SortListByListDesc ( units , tmp ) ;
61661: LD_ADDR_VAR 0 3
61665: PUSH
61666: LD_VAR 0 1
61670: PPUSH
61671: LD_VAR 0 5
61675: PPUSH
61676: CALL_OW 77
61680: ST_TO_ADDR
// end ;
61681: LD_VAR 0 3
61685: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61686: LD_INT 0
61688: PPUSH
61689: PPUSH
61690: PPUSH
// result := false ;
61691: LD_ADDR_VAR 0 3
61695: PUSH
61696: LD_INT 0
61698: ST_TO_ADDR
// if not building then
61699: LD_VAR 0 2
61703: NOT
61704: IFFALSE 61708
// exit ;
61706: GO 61846
// x := GetX ( building ) ;
61708: LD_ADDR_VAR 0 4
61712: PUSH
61713: LD_VAR 0 2
61717: PPUSH
61718: CALL_OW 250
61722: ST_TO_ADDR
// y := GetY ( building ) ;
61723: LD_ADDR_VAR 0 5
61727: PUSH
61728: LD_VAR 0 2
61732: PPUSH
61733: CALL_OW 251
61737: ST_TO_ADDR
// if not x or not y then
61738: LD_VAR 0 4
61742: NOT
61743: PUSH
61744: LD_VAR 0 5
61748: NOT
61749: OR
61750: IFFALSE 61754
// exit ;
61752: GO 61846
// if GetTaskList ( unit ) then
61754: LD_VAR 0 1
61758: PPUSH
61759: CALL_OW 437
61763: IFFALSE 61846
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61765: LD_STRING e
61767: PUSH
61768: LD_VAR 0 1
61772: PPUSH
61773: CALL_OW 437
61777: PUSH
61778: LD_INT 1
61780: ARRAY
61781: PUSH
61782: LD_INT 1
61784: ARRAY
61785: EQUAL
61786: PUSH
61787: LD_VAR 0 4
61791: PUSH
61792: LD_VAR 0 1
61796: PPUSH
61797: CALL_OW 437
61801: PUSH
61802: LD_INT 1
61804: ARRAY
61805: PUSH
61806: LD_INT 2
61808: ARRAY
61809: EQUAL
61810: AND
61811: PUSH
61812: LD_VAR 0 5
61816: PUSH
61817: LD_VAR 0 1
61821: PPUSH
61822: CALL_OW 437
61826: PUSH
61827: LD_INT 1
61829: ARRAY
61830: PUSH
61831: LD_INT 3
61833: ARRAY
61834: EQUAL
61835: AND
61836: IFFALSE 61846
// result := true end ;
61838: LD_ADDR_VAR 0 3
61842: PUSH
61843: LD_INT 1
61845: ST_TO_ADDR
// end ;
61846: LD_VAR 0 3
61850: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61851: LD_INT 0
61853: PPUSH
// result := false ;
61854: LD_ADDR_VAR 0 4
61858: PUSH
61859: LD_INT 0
61861: ST_TO_ADDR
// if GetTaskList ( unit ) then
61862: LD_VAR 0 1
61866: PPUSH
61867: CALL_OW 437
61871: IFFALSE 61954
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61873: LD_STRING M
61875: PUSH
61876: LD_VAR 0 1
61880: PPUSH
61881: CALL_OW 437
61885: PUSH
61886: LD_INT 1
61888: ARRAY
61889: PUSH
61890: LD_INT 1
61892: ARRAY
61893: EQUAL
61894: PUSH
61895: LD_VAR 0 2
61899: PUSH
61900: LD_VAR 0 1
61904: PPUSH
61905: CALL_OW 437
61909: PUSH
61910: LD_INT 1
61912: ARRAY
61913: PUSH
61914: LD_INT 2
61916: ARRAY
61917: EQUAL
61918: AND
61919: PUSH
61920: LD_VAR 0 3
61924: PUSH
61925: LD_VAR 0 1
61929: PPUSH
61930: CALL_OW 437
61934: PUSH
61935: LD_INT 1
61937: ARRAY
61938: PUSH
61939: LD_INT 3
61941: ARRAY
61942: EQUAL
61943: AND
61944: IFFALSE 61954
// result := true ;
61946: LD_ADDR_VAR 0 4
61950: PUSH
61951: LD_INT 1
61953: ST_TO_ADDR
// end ; end ;
61954: LD_VAR 0 4
61958: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61959: LD_INT 0
61961: PPUSH
61962: PPUSH
61963: PPUSH
61964: PPUSH
// if not unit or not area then
61965: LD_VAR 0 1
61969: NOT
61970: PUSH
61971: LD_VAR 0 2
61975: NOT
61976: OR
61977: IFFALSE 61981
// exit ;
61979: GO 62144
// tmp := AreaToList ( area , i ) ;
61981: LD_ADDR_VAR 0 6
61985: PUSH
61986: LD_VAR 0 2
61990: PPUSH
61991: LD_VAR 0 5
61995: PPUSH
61996: CALL_OW 517
62000: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62001: LD_ADDR_VAR 0 5
62005: PUSH
62006: DOUBLE
62007: LD_INT 1
62009: DEC
62010: ST_TO_ADDR
62011: LD_VAR 0 6
62015: PUSH
62016: LD_INT 1
62018: ARRAY
62019: PUSH
62020: FOR_TO
62021: IFFALSE 62142
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62023: LD_ADDR_VAR 0 7
62027: PUSH
62028: LD_VAR 0 6
62032: PUSH
62033: LD_INT 1
62035: ARRAY
62036: PUSH
62037: LD_VAR 0 5
62041: ARRAY
62042: PUSH
62043: LD_VAR 0 6
62047: PUSH
62048: LD_INT 2
62050: ARRAY
62051: PUSH
62052: LD_VAR 0 5
62056: ARRAY
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
62062: LD_INT 92
62064: PUSH
62065: LD_VAR 0 7
62069: PUSH
62070: LD_INT 1
62072: ARRAY
62073: PUSH
62074: LD_VAR 0 7
62078: PUSH
62079: LD_INT 2
62081: ARRAY
62082: PUSH
62083: LD_INT 3
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: PPUSH
62092: CALL_OW 69
62096: PUSH
62097: LD_INT 0
62099: EQUAL
62100: IFFALSE 62140
// begin PlaceUnitArea ( unit , area , mode ) ;
62102: LD_VAR 0 1
62106: PPUSH
62107: LD_VAR 0 2
62111: PPUSH
62112: LD_VAR 0 3
62116: PPUSH
62117: CALL_OW 49
// result := IsPlaced ( unit ) ;
62121: LD_ADDR_VAR 0 4
62125: PUSH
62126: LD_VAR 0 1
62130: PPUSH
62131: CALL_OW 305
62135: ST_TO_ADDR
// exit ;
62136: POP
62137: POP
62138: GO 62144
// end ; end ;
62140: GO 62020
62142: POP
62143: POP
// end ;
62144: LD_VAR 0 4
62148: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62149: LD_INT 0
62151: PPUSH
62152: PPUSH
62153: PPUSH
// if not side or side > 8 then
62154: LD_VAR 0 1
62158: NOT
62159: PUSH
62160: LD_VAR 0 1
62164: PUSH
62165: LD_INT 8
62167: GREATER
62168: OR
62169: IFFALSE 62173
// exit ;
62171: GO 62360
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62173: LD_ADDR_VAR 0 4
62177: PUSH
62178: LD_INT 22
62180: PUSH
62181: LD_VAR 0 1
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 21
62192: PUSH
62193: LD_INT 3
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PPUSH
62204: CALL_OW 69
62208: ST_TO_ADDR
// if not tmp then
62209: LD_VAR 0 4
62213: NOT
62214: IFFALSE 62218
// exit ;
62216: GO 62360
// enable_addtolog := true ;
62218: LD_ADDR_OWVAR 81
62222: PUSH
62223: LD_INT 1
62225: ST_TO_ADDR
// AddToLog ( [ ) ;
62226: LD_STRING [
62228: PPUSH
62229: CALL_OW 561
// for i in tmp do
62233: LD_ADDR_VAR 0 3
62237: PUSH
62238: LD_VAR 0 4
62242: PUSH
62243: FOR_IN
62244: IFFALSE 62351
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62246: LD_STRING [
62248: PUSH
62249: LD_VAR 0 3
62253: PPUSH
62254: CALL_OW 266
62258: STR
62259: PUSH
62260: LD_STRING , 
62262: STR
62263: PUSH
62264: LD_VAR 0 3
62268: PPUSH
62269: CALL_OW 250
62273: STR
62274: PUSH
62275: LD_STRING , 
62277: STR
62278: PUSH
62279: LD_VAR 0 3
62283: PPUSH
62284: CALL_OW 251
62288: STR
62289: PUSH
62290: LD_STRING , 
62292: STR
62293: PUSH
62294: LD_VAR 0 3
62298: PPUSH
62299: CALL_OW 254
62303: STR
62304: PUSH
62305: LD_STRING , 
62307: STR
62308: PUSH
62309: LD_VAR 0 3
62313: PPUSH
62314: LD_INT 1
62316: PPUSH
62317: CALL_OW 268
62321: STR
62322: PUSH
62323: LD_STRING , 
62325: STR
62326: PUSH
62327: LD_VAR 0 3
62331: PPUSH
62332: LD_INT 2
62334: PPUSH
62335: CALL_OW 268
62339: STR
62340: PUSH
62341: LD_STRING ],
62343: STR
62344: PPUSH
62345: CALL_OW 561
// end ;
62349: GO 62243
62351: POP
62352: POP
// AddToLog ( ]; ) ;
62353: LD_STRING ];
62355: PPUSH
62356: CALL_OW 561
// end ;
62360: LD_VAR 0 2
62364: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62365: LD_INT 0
62367: PPUSH
62368: PPUSH
62369: PPUSH
62370: PPUSH
62371: PPUSH
// if not area or not rate or not max then
62372: LD_VAR 0 1
62376: NOT
62377: PUSH
62378: LD_VAR 0 2
62382: NOT
62383: OR
62384: PUSH
62385: LD_VAR 0 4
62389: NOT
62390: OR
62391: IFFALSE 62395
// exit ;
62393: GO 62584
// while 1 do
62395: LD_INT 1
62397: IFFALSE 62584
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62399: LD_ADDR_VAR 0 9
62403: PUSH
62404: LD_VAR 0 1
62408: PPUSH
62409: LD_INT 1
62411: PPUSH
62412: CALL_OW 287
62416: PUSH
62417: LD_INT 10
62419: MUL
62420: ST_TO_ADDR
// r := rate / 10 ;
62421: LD_ADDR_VAR 0 7
62425: PUSH
62426: LD_VAR 0 2
62430: PUSH
62431: LD_INT 10
62433: DIVREAL
62434: ST_TO_ADDR
// time := 1 1$00 ;
62435: LD_ADDR_VAR 0 8
62439: PUSH
62440: LD_INT 2100
62442: ST_TO_ADDR
// if amount < min then
62443: LD_VAR 0 9
62447: PUSH
62448: LD_VAR 0 3
62452: LESS
62453: IFFALSE 62471
// r := r * 2 else
62455: LD_ADDR_VAR 0 7
62459: PUSH
62460: LD_VAR 0 7
62464: PUSH
62465: LD_INT 2
62467: MUL
62468: ST_TO_ADDR
62469: GO 62497
// if amount > max then
62471: LD_VAR 0 9
62475: PUSH
62476: LD_VAR 0 4
62480: GREATER
62481: IFFALSE 62497
// r := r / 2 ;
62483: LD_ADDR_VAR 0 7
62487: PUSH
62488: LD_VAR 0 7
62492: PUSH
62493: LD_INT 2
62495: DIVREAL
62496: ST_TO_ADDR
// time := time / r ;
62497: LD_ADDR_VAR 0 8
62501: PUSH
62502: LD_VAR 0 8
62506: PUSH
62507: LD_VAR 0 7
62511: DIVREAL
62512: ST_TO_ADDR
// if time < 0 then
62513: LD_VAR 0 8
62517: PUSH
62518: LD_INT 0
62520: LESS
62521: IFFALSE 62538
// time := time * - 1 ;
62523: LD_ADDR_VAR 0 8
62527: PUSH
62528: LD_VAR 0 8
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: MUL
62537: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62538: LD_VAR 0 8
62542: PUSH
62543: LD_INT 35
62545: PPUSH
62546: LD_INT 875
62548: PPUSH
62549: CALL_OW 12
62553: PLUS
62554: PPUSH
62555: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62559: LD_INT 1
62561: PPUSH
62562: LD_INT 5
62564: PPUSH
62565: CALL_OW 12
62569: PPUSH
62570: LD_VAR 0 1
62574: PPUSH
62575: LD_INT 1
62577: PPUSH
62578: CALL_OW 55
// end ;
62582: GO 62395
// end ;
62584: LD_VAR 0 5
62588: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62589: LD_INT 0
62591: PPUSH
62592: PPUSH
62593: PPUSH
62594: PPUSH
62595: PPUSH
62596: PPUSH
62597: PPUSH
62598: PPUSH
// if not turrets or not factories then
62599: LD_VAR 0 1
62603: NOT
62604: PUSH
62605: LD_VAR 0 2
62609: NOT
62610: OR
62611: IFFALSE 62615
// exit ;
62613: GO 62922
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62615: LD_ADDR_VAR 0 10
62619: PUSH
62620: LD_INT 5
62622: PUSH
62623: LD_INT 6
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 2
62632: PUSH
62633: LD_INT 4
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 3
62642: PUSH
62643: LD_INT 5
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 24
62657: PUSH
62658: LD_INT 25
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 23
62667: PUSH
62668: LD_INT 27
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 42
62681: PUSH
62682: LD_INT 43
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 44
62691: PUSH
62692: LD_INT 46
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 45
62701: PUSH
62702: LD_INT 47
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: LIST
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: LIST
62718: ST_TO_ADDR
// result := [ ] ;
62719: LD_ADDR_VAR 0 3
62723: PUSH
62724: EMPTY
62725: ST_TO_ADDR
// for i in turrets do
62726: LD_ADDR_VAR 0 4
62730: PUSH
62731: LD_VAR 0 1
62735: PUSH
62736: FOR_IN
62737: IFFALSE 62920
// begin nat := GetNation ( i ) ;
62739: LD_ADDR_VAR 0 7
62743: PUSH
62744: LD_VAR 0 4
62748: PPUSH
62749: CALL_OW 248
62753: ST_TO_ADDR
// weapon := 0 ;
62754: LD_ADDR_VAR 0 8
62758: PUSH
62759: LD_INT 0
62761: ST_TO_ADDR
// if not nat then
62762: LD_VAR 0 7
62766: NOT
62767: IFFALSE 62771
// continue ;
62769: GO 62736
// for j in list [ nat ] do
62771: LD_ADDR_VAR 0 5
62775: PUSH
62776: LD_VAR 0 10
62780: PUSH
62781: LD_VAR 0 7
62785: ARRAY
62786: PUSH
62787: FOR_IN
62788: IFFALSE 62829
// if GetBWeapon ( i ) = j [ 1 ] then
62790: LD_VAR 0 4
62794: PPUSH
62795: CALL_OW 269
62799: PUSH
62800: LD_VAR 0 5
62804: PUSH
62805: LD_INT 1
62807: ARRAY
62808: EQUAL
62809: IFFALSE 62827
// begin weapon := j [ 2 ] ;
62811: LD_ADDR_VAR 0 8
62815: PUSH
62816: LD_VAR 0 5
62820: PUSH
62821: LD_INT 2
62823: ARRAY
62824: ST_TO_ADDR
// break ;
62825: GO 62829
// end ;
62827: GO 62787
62829: POP
62830: POP
// if not weapon then
62831: LD_VAR 0 8
62835: NOT
62836: IFFALSE 62840
// continue ;
62838: GO 62736
// for k in factories do
62840: LD_ADDR_VAR 0 6
62844: PUSH
62845: LD_VAR 0 2
62849: PUSH
62850: FOR_IN
62851: IFFALSE 62916
// begin weapons := AvailableWeaponList ( k ) ;
62853: LD_ADDR_VAR 0 9
62857: PUSH
62858: LD_VAR 0 6
62862: PPUSH
62863: CALL_OW 478
62867: ST_TO_ADDR
// if not weapons then
62868: LD_VAR 0 9
62872: NOT
62873: IFFALSE 62877
// continue ;
62875: GO 62850
// if weapon in weapons then
62877: LD_VAR 0 8
62881: PUSH
62882: LD_VAR 0 9
62886: IN
62887: IFFALSE 62914
// begin result := [ i , weapon ] ;
62889: LD_ADDR_VAR 0 3
62893: PUSH
62894: LD_VAR 0 4
62898: PUSH
62899: LD_VAR 0 8
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: ST_TO_ADDR
// exit ;
62908: POP
62909: POP
62910: POP
62911: POP
62912: GO 62922
// end ; end ;
62914: GO 62850
62916: POP
62917: POP
// end ;
62918: GO 62736
62920: POP
62921: POP
// end ;
62922: LD_VAR 0 3
62926: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62927: LD_INT 0
62929: PPUSH
// if not side or side > 8 then
62930: LD_VAR 0 3
62934: NOT
62935: PUSH
62936: LD_VAR 0 3
62940: PUSH
62941: LD_INT 8
62943: GREATER
62944: OR
62945: IFFALSE 62949
// exit ;
62947: GO 63008
// if not range then
62949: LD_VAR 0 4
62953: NOT
62954: IFFALSE 62965
// range := - 12 ;
62956: LD_ADDR_VAR 0 4
62960: PUSH
62961: LD_INT 12
62963: NEG
62964: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62965: LD_VAR 0 1
62969: PPUSH
62970: LD_VAR 0 2
62974: PPUSH
62975: LD_VAR 0 3
62979: PPUSH
62980: LD_VAR 0 4
62984: PPUSH
62985: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62989: LD_VAR 0 1
62993: PPUSH
62994: LD_VAR 0 2
62998: PPUSH
62999: LD_VAR 0 3
63003: PPUSH
63004: CALL_OW 331
// end ;
63008: LD_VAR 0 5
63012: RET
// export function Video ( mode ) ; begin
63013: LD_INT 0
63015: PPUSH
// ingame_video = mode ;
63016: LD_ADDR_OWVAR 52
63020: PUSH
63021: LD_VAR 0 1
63025: ST_TO_ADDR
// interface_hidden = mode ;
63026: LD_ADDR_OWVAR 54
63030: PUSH
63031: LD_VAR 0 1
63035: ST_TO_ADDR
// end ;
63036: LD_VAR 0 2
63040: RET
// export function Join ( array , element ) ; begin
63041: LD_INT 0
63043: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63044: LD_ADDR_VAR 0 3
63048: PUSH
63049: LD_VAR 0 1
63053: PPUSH
63054: LD_VAR 0 1
63058: PUSH
63059: LD_INT 1
63061: PLUS
63062: PPUSH
63063: LD_VAR 0 2
63067: PPUSH
63068: CALL_OW 1
63072: ST_TO_ADDR
// end ;
63073: LD_VAR 0 3
63077: RET
// export function JoinUnion ( array , element ) ; begin
63078: LD_INT 0
63080: PPUSH
// result := array union element ;
63081: LD_ADDR_VAR 0 3
63085: PUSH
63086: LD_VAR 0 1
63090: PUSH
63091: LD_VAR 0 2
63095: UNION
63096: ST_TO_ADDR
// end ;
63097: LD_VAR 0 3
63101: RET
// export function GetBehemoths ( side ) ; begin
63102: LD_INT 0
63104: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63105: LD_ADDR_VAR 0 2
63109: PUSH
63110: LD_INT 22
63112: PUSH
63113: LD_VAR 0 1
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 31
63124: PUSH
63125: LD_INT 25
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PPUSH
63136: CALL_OW 69
63140: ST_TO_ADDR
// end ;
63141: LD_VAR 0 2
63145: RET
// export function Shuffle ( array ) ; var i , index ; begin
63146: LD_INT 0
63148: PPUSH
63149: PPUSH
63150: PPUSH
// result := [ ] ;
63151: LD_ADDR_VAR 0 2
63155: PUSH
63156: EMPTY
63157: ST_TO_ADDR
// if not array then
63158: LD_VAR 0 1
63162: NOT
63163: IFFALSE 63167
// exit ;
63165: GO 63266
// Randomize ;
63167: CALL_OW 10
// for i = array downto 1 do
63171: LD_ADDR_VAR 0 3
63175: PUSH
63176: DOUBLE
63177: LD_VAR 0 1
63181: INC
63182: ST_TO_ADDR
63183: LD_INT 1
63185: PUSH
63186: FOR_DOWNTO
63187: IFFALSE 63264
// begin index := rand ( 1 , array ) ;
63189: LD_ADDR_VAR 0 4
63193: PUSH
63194: LD_INT 1
63196: PPUSH
63197: LD_VAR 0 1
63201: PPUSH
63202: CALL_OW 12
63206: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63207: LD_ADDR_VAR 0 2
63211: PUSH
63212: LD_VAR 0 2
63216: PPUSH
63217: LD_VAR 0 2
63221: PUSH
63222: LD_INT 1
63224: PLUS
63225: PPUSH
63226: LD_VAR 0 1
63230: PUSH
63231: LD_VAR 0 4
63235: ARRAY
63236: PPUSH
63237: CALL_OW 2
63241: ST_TO_ADDR
// array := Delete ( array , index ) ;
63242: LD_ADDR_VAR 0 1
63246: PUSH
63247: LD_VAR 0 1
63251: PPUSH
63252: LD_VAR 0 4
63256: PPUSH
63257: CALL_OW 3
63261: ST_TO_ADDR
// end ;
63262: GO 63186
63264: POP
63265: POP
// end ;
63266: LD_VAR 0 2
63270: RET
// export function GetBaseMaterials ( base ) ; begin
63271: LD_INT 0
63273: PPUSH
// result := [ 0 , 0 , 0 ] ;
63274: LD_ADDR_VAR 0 2
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: LIST
63292: ST_TO_ADDR
// if not base then
63293: LD_VAR 0 1
63297: NOT
63298: IFFALSE 63302
// exit ;
63300: GO 63351
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63302: LD_ADDR_VAR 0 2
63306: PUSH
63307: LD_VAR 0 1
63311: PPUSH
63312: LD_INT 1
63314: PPUSH
63315: CALL_OW 275
63319: PUSH
63320: LD_VAR 0 1
63324: PPUSH
63325: LD_INT 2
63327: PPUSH
63328: CALL_OW 275
63332: PUSH
63333: LD_VAR 0 1
63337: PPUSH
63338: LD_INT 3
63340: PPUSH
63341: CALL_OW 275
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: ST_TO_ADDR
// end ;
63351: LD_VAR 0 2
63355: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63356: LD_INT 0
63358: PPUSH
63359: PPUSH
// result := array ;
63360: LD_ADDR_VAR 0 3
63364: PUSH
63365: LD_VAR 0 1
63369: ST_TO_ADDR
// if size >= result then
63370: LD_VAR 0 2
63374: PUSH
63375: LD_VAR 0 3
63379: GREATEREQUAL
63380: IFFALSE 63384
// exit ;
63382: GO 63434
// if size then
63384: LD_VAR 0 2
63388: IFFALSE 63434
// for i := array downto size do
63390: LD_ADDR_VAR 0 4
63394: PUSH
63395: DOUBLE
63396: LD_VAR 0 1
63400: INC
63401: ST_TO_ADDR
63402: LD_VAR 0 2
63406: PUSH
63407: FOR_DOWNTO
63408: IFFALSE 63432
// result := Delete ( result , result ) ;
63410: LD_ADDR_VAR 0 3
63414: PUSH
63415: LD_VAR 0 3
63419: PPUSH
63420: LD_VAR 0 3
63424: PPUSH
63425: CALL_OW 3
63429: ST_TO_ADDR
63430: GO 63407
63432: POP
63433: POP
// end ;
63434: LD_VAR 0 3
63438: RET
// export function ComExit ( unit ) ; var tmp ; begin
63439: LD_INT 0
63441: PPUSH
63442: PPUSH
// if not IsInUnit ( unit ) then
63443: LD_VAR 0 1
63447: PPUSH
63448: CALL_OW 310
63452: NOT
63453: IFFALSE 63457
// exit ;
63455: GO 63517
// tmp := IsInUnit ( unit ) ;
63457: LD_ADDR_VAR 0 3
63461: PUSH
63462: LD_VAR 0 1
63466: PPUSH
63467: CALL_OW 310
63471: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63472: LD_VAR 0 3
63476: PPUSH
63477: CALL_OW 247
63481: PUSH
63482: LD_INT 2
63484: EQUAL
63485: IFFALSE 63498
// ComExitVehicle ( unit ) else
63487: LD_VAR 0 1
63491: PPUSH
63492: CALL_OW 121
63496: GO 63507
// ComExitBuilding ( unit ) ;
63498: LD_VAR 0 1
63502: PPUSH
63503: CALL_OW 122
// result := tmp ;
63507: LD_ADDR_VAR 0 2
63511: PUSH
63512: LD_VAR 0 3
63516: ST_TO_ADDR
// end ;
63517: LD_VAR 0 2
63521: RET
// export function ComExitAll ( units ) ; var i ; begin
63522: LD_INT 0
63524: PPUSH
63525: PPUSH
// if not units then
63526: LD_VAR 0 1
63530: NOT
63531: IFFALSE 63535
// exit ;
63533: GO 63561
// for i in units do
63535: LD_ADDR_VAR 0 3
63539: PUSH
63540: LD_VAR 0 1
63544: PUSH
63545: FOR_IN
63546: IFFALSE 63559
// ComExit ( i ) ;
63548: LD_VAR 0 3
63552: PPUSH
63553: CALL 63439 0 1
63557: GO 63545
63559: POP
63560: POP
// end ;
63561: LD_VAR 0 2
63565: RET
// export function ResetHc ; begin
63566: LD_INT 0
63568: PPUSH
// InitHc ;
63569: CALL_OW 19
// hc_importance := 0 ;
63573: LD_ADDR_OWVAR 32
63577: PUSH
63578: LD_INT 0
63580: ST_TO_ADDR
// end ;
63581: LD_VAR 0 1
63585: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63586: LD_INT 0
63588: PPUSH
63589: PPUSH
63590: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63591: LD_ADDR_VAR 0 6
63595: PUSH
63596: LD_VAR 0 1
63600: PUSH
63601: LD_VAR 0 3
63605: PLUS
63606: PUSH
63607: LD_INT 2
63609: DIV
63610: ST_TO_ADDR
// if _x < 0 then
63611: LD_VAR 0 6
63615: PUSH
63616: LD_INT 0
63618: LESS
63619: IFFALSE 63636
// _x := _x * - 1 ;
63621: LD_ADDR_VAR 0 6
63625: PUSH
63626: LD_VAR 0 6
63630: PUSH
63631: LD_INT 1
63633: NEG
63634: MUL
63635: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63636: LD_ADDR_VAR 0 7
63640: PUSH
63641: LD_VAR 0 2
63645: PUSH
63646: LD_VAR 0 4
63650: PLUS
63651: PUSH
63652: LD_INT 2
63654: DIV
63655: ST_TO_ADDR
// if _y < 0 then
63656: LD_VAR 0 7
63660: PUSH
63661: LD_INT 0
63663: LESS
63664: IFFALSE 63681
// _y := _y * - 1 ;
63666: LD_ADDR_VAR 0 7
63670: PUSH
63671: LD_VAR 0 7
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: MUL
63680: ST_TO_ADDR
// result := [ _x , _y ] ;
63681: LD_ADDR_VAR 0 5
63685: PUSH
63686: LD_VAR 0 6
63690: PUSH
63691: LD_VAR 0 7
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: ST_TO_ADDR
// end ;
63700: LD_VAR 0 5
63704: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63705: LD_INT 0
63707: PPUSH
63708: PPUSH
63709: PPUSH
63710: PPUSH
// task := GetTaskList ( unit ) ;
63711: LD_ADDR_VAR 0 7
63715: PUSH
63716: LD_VAR 0 1
63720: PPUSH
63721: CALL_OW 437
63725: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63726: LD_VAR 0 7
63730: NOT
63731: PUSH
63732: LD_VAR 0 1
63736: PPUSH
63737: LD_VAR 0 2
63741: PPUSH
63742: CALL_OW 308
63746: NOT
63747: AND
63748: IFFALSE 63752
// exit ;
63750: GO 63870
// if IsInArea ( unit , area ) then
63752: LD_VAR 0 1
63756: PPUSH
63757: LD_VAR 0 2
63761: PPUSH
63762: CALL_OW 308
63766: IFFALSE 63784
// begin ComMoveToArea ( unit , goAway ) ;
63768: LD_VAR 0 1
63772: PPUSH
63773: LD_VAR 0 3
63777: PPUSH
63778: CALL_OW 113
// exit ;
63782: GO 63870
// end ; if task [ 1 ] [ 1 ] <> M then
63784: LD_VAR 0 7
63788: PUSH
63789: LD_INT 1
63791: ARRAY
63792: PUSH
63793: LD_INT 1
63795: ARRAY
63796: PUSH
63797: LD_STRING M
63799: NONEQUAL
63800: IFFALSE 63804
// exit ;
63802: GO 63870
// x := task [ 1 ] [ 2 ] ;
63804: LD_ADDR_VAR 0 5
63808: PUSH
63809: LD_VAR 0 7
63813: PUSH
63814: LD_INT 1
63816: ARRAY
63817: PUSH
63818: LD_INT 2
63820: ARRAY
63821: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63822: LD_ADDR_VAR 0 6
63826: PUSH
63827: LD_VAR 0 7
63831: PUSH
63832: LD_INT 1
63834: ARRAY
63835: PUSH
63836: LD_INT 3
63838: ARRAY
63839: ST_TO_ADDR
// if InArea ( x , y , area ) then
63840: LD_VAR 0 5
63844: PPUSH
63845: LD_VAR 0 6
63849: PPUSH
63850: LD_VAR 0 2
63854: PPUSH
63855: CALL_OW 309
63859: IFFALSE 63870
// ComStop ( unit ) ;
63861: LD_VAR 0 1
63865: PPUSH
63866: CALL_OW 141
// end ;
63870: LD_VAR 0 4
63874: RET
// export function Abs ( value ) ; begin
63875: LD_INT 0
63877: PPUSH
// result := value ;
63878: LD_ADDR_VAR 0 2
63882: PUSH
63883: LD_VAR 0 1
63887: ST_TO_ADDR
// if value < 0 then
63888: LD_VAR 0 1
63892: PUSH
63893: LD_INT 0
63895: LESS
63896: IFFALSE 63913
// result := value * - 1 ;
63898: LD_ADDR_VAR 0 2
63902: PUSH
63903: LD_VAR 0 1
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: MUL
63912: ST_TO_ADDR
// end ;
63913: LD_VAR 0 2
63917: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63918: LD_INT 0
63920: PPUSH
63921: PPUSH
63922: PPUSH
63923: PPUSH
63924: PPUSH
63925: PPUSH
63926: PPUSH
63927: PPUSH
// if not unit or not building then
63928: LD_VAR 0 1
63932: NOT
63933: PUSH
63934: LD_VAR 0 2
63938: NOT
63939: OR
63940: IFFALSE 63944
// exit ;
63942: GO 64170
// x := GetX ( building ) ;
63944: LD_ADDR_VAR 0 4
63948: PUSH
63949: LD_VAR 0 2
63953: PPUSH
63954: CALL_OW 250
63958: ST_TO_ADDR
// y := GetY ( building ) ;
63959: LD_ADDR_VAR 0 6
63963: PUSH
63964: LD_VAR 0 2
63968: PPUSH
63969: CALL_OW 251
63973: ST_TO_ADDR
// d := GetDir ( building ) ;
63974: LD_ADDR_VAR 0 8
63978: PUSH
63979: LD_VAR 0 2
63983: PPUSH
63984: CALL_OW 254
63988: ST_TO_ADDR
// r := 4 ;
63989: LD_ADDR_VAR 0 9
63993: PUSH
63994: LD_INT 4
63996: ST_TO_ADDR
// for i := 1 to 5 do
63997: LD_ADDR_VAR 0 10
64001: PUSH
64002: DOUBLE
64003: LD_INT 1
64005: DEC
64006: ST_TO_ADDR
64007: LD_INT 5
64009: PUSH
64010: FOR_TO
64011: IFFALSE 64168
// begin _x := ShiftX ( x , d , r + i ) ;
64013: LD_ADDR_VAR 0 5
64017: PUSH
64018: LD_VAR 0 4
64022: PPUSH
64023: LD_VAR 0 8
64027: PPUSH
64028: LD_VAR 0 9
64032: PUSH
64033: LD_VAR 0 10
64037: PLUS
64038: PPUSH
64039: CALL_OW 272
64043: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64044: LD_ADDR_VAR 0 7
64048: PUSH
64049: LD_VAR 0 6
64053: PPUSH
64054: LD_VAR 0 8
64058: PPUSH
64059: LD_VAR 0 9
64063: PUSH
64064: LD_VAR 0 10
64068: PLUS
64069: PPUSH
64070: CALL_OW 273
64074: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64075: LD_VAR 0 5
64079: PPUSH
64080: LD_VAR 0 7
64084: PPUSH
64085: CALL_OW 488
64089: PUSH
64090: LD_VAR 0 5
64094: PPUSH
64095: LD_VAR 0 7
64099: PPUSH
64100: CALL_OW 428
64104: PPUSH
64105: CALL_OW 247
64109: PUSH
64110: LD_INT 3
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: IN
64120: NOT
64121: AND
64122: IFFALSE 64166
// begin ComMoveXY ( unit , _x , _y ) ;
64124: LD_VAR 0 1
64128: PPUSH
64129: LD_VAR 0 5
64133: PPUSH
64134: LD_VAR 0 7
64138: PPUSH
64139: CALL_OW 111
// result := [ _x , _y ] ;
64143: LD_ADDR_VAR 0 3
64147: PUSH
64148: LD_VAR 0 5
64152: PUSH
64153: LD_VAR 0 7
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: ST_TO_ADDR
// exit ;
64162: POP
64163: POP
64164: GO 64170
// end ; end ;
64166: GO 64010
64168: POP
64169: POP
// end ;
64170: LD_VAR 0 3
64174: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64175: LD_INT 0
64177: PPUSH
64178: PPUSH
64179: PPUSH
// result := 0 ;
64180: LD_ADDR_VAR 0 3
64184: PUSH
64185: LD_INT 0
64187: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64188: LD_VAR 0 1
64192: PUSH
64193: LD_INT 0
64195: LESS
64196: PUSH
64197: LD_VAR 0 1
64201: PUSH
64202: LD_INT 8
64204: GREATER
64205: OR
64206: PUSH
64207: LD_VAR 0 2
64211: PUSH
64212: LD_INT 0
64214: LESS
64215: OR
64216: PUSH
64217: LD_VAR 0 2
64221: PUSH
64222: LD_INT 8
64224: GREATER
64225: OR
64226: IFFALSE 64230
// exit ;
64228: GO 64305
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64230: LD_ADDR_VAR 0 4
64234: PUSH
64235: LD_INT 22
64237: PUSH
64238: LD_VAR 0 2
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PPUSH
64247: CALL_OW 69
64251: PUSH
64252: FOR_IN
64253: IFFALSE 64303
// begin un := UnitShoot ( i ) ;
64255: LD_ADDR_VAR 0 5
64259: PUSH
64260: LD_VAR 0 4
64264: PPUSH
64265: CALL_OW 504
64269: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64270: LD_VAR 0 5
64274: PPUSH
64275: CALL_OW 255
64279: PUSH
64280: LD_VAR 0 1
64284: EQUAL
64285: IFFALSE 64301
// begin result := un ;
64287: LD_ADDR_VAR 0 3
64291: PUSH
64292: LD_VAR 0 5
64296: ST_TO_ADDR
// exit ;
64297: POP
64298: POP
64299: GO 64305
// end ; end ;
64301: GO 64252
64303: POP
64304: POP
// end ;
64305: LD_VAR 0 3
64309: RET
// export function GetCargoBay ( units ) ; begin
64310: LD_INT 0
64312: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64313: LD_ADDR_VAR 0 2
64317: PUSH
64318: LD_VAR 0 1
64322: PPUSH
64323: LD_INT 2
64325: PUSH
64326: LD_INT 34
64328: PUSH
64329: LD_INT 12
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 34
64338: PUSH
64339: LD_INT 51
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 34
64348: PUSH
64349: LD_INT 32
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 34
64358: PUSH
64359: LD_INT 89
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: PPUSH
64373: CALL_OW 72
64377: ST_TO_ADDR
// end ;
64378: LD_VAR 0 2
64382: RET
// export function Negate ( value ) ; begin
64383: LD_INT 0
64385: PPUSH
// result := not value ;
64386: LD_ADDR_VAR 0 2
64390: PUSH
64391: LD_VAR 0 1
64395: NOT
64396: ST_TO_ADDR
// end ;
64397: LD_VAR 0 2
64401: RET
// export function Inc ( value ) ; begin
64402: LD_INT 0
64404: PPUSH
// result := value + 1 ;
64405: LD_ADDR_VAR 0 2
64409: PUSH
64410: LD_VAR 0 1
64414: PUSH
64415: LD_INT 1
64417: PLUS
64418: ST_TO_ADDR
// end ;
64419: LD_VAR 0 2
64423: RET
// export function Dec ( value ) ; begin
64424: LD_INT 0
64426: PPUSH
// result := value - 1 ;
64427: LD_ADDR_VAR 0 2
64431: PUSH
64432: LD_VAR 0 1
64436: PUSH
64437: LD_INT 1
64439: MINUS
64440: ST_TO_ADDR
// end ;
64441: LD_VAR 0 2
64445: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64446: LD_INT 0
64448: PPUSH
64449: PPUSH
64450: PPUSH
64451: PPUSH
64452: PPUSH
64453: PPUSH
64454: PPUSH
64455: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64456: LD_VAR 0 1
64460: PPUSH
64461: LD_VAR 0 2
64465: PPUSH
64466: CALL_OW 488
64470: NOT
64471: PUSH
64472: LD_VAR 0 3
64476: PPUSH
64477: LD_VAR 0 4
64481: PPUSH
64482: CALL_OW 488
64486: NOT
64487: OR
64488: IFFALSE 64501
// begin result := - 1 ;
64490: LD_ADDR_VAR 0 5
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: ST_TO_ADDR
// exit ;
64499: GO 64736
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64501: LD_ADDR_VAR 0 12
64505: PUSH
64506: LD_VAR 0 1
64510: PPUSH
64511: LD_VAR 0 2
64515: PPUSH
64516: LD_VAR 0 3
64520: PPUSH
64521: LD_VAR 0 4
64525: PPUSH
64526: CALL 63586 0 4
64530: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64531: LD_ADDR_VAR 0 11
64535: PUSH
64536: LD_VAR 0 1
64540: PPUSH
64541: LD_VAR 0 2
64545: PPUSH
64546: LD_VAR 0 12
64550: PUSH
64551: LD_INT 1
64553: ARRAY
64554: PPUSH
64555: LD_VAR 0 12
64559: PUSH
64560: LD_INT 2
64562: ARRAY
64563: PPUSH
64564: CALL_OW 298
64568: ST_TO_ADDR
// distance := 9999 ;
64569: LD_ADDR_VAR 0 10
64573: PUSH
64574: LD_INT 9999
64576: ST_TO_ADDR
// for i := 0 to 5 do
64577: LD_ADDR_VAR 0 6
64581: PUSH
64582: DOUBLE
64583: LD_INT 0
64585: DEC
64586: ST_TO_ADDR
64587: LD_INT 5
64589: PUSH
64590: FOR_TO
64591: IFFALSE 64734
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64593: LD_ADDR_VAR 0 7
64597: PUSH
64598: LD_VAR 0 1
64602: PPUSH
64603: LD_VAR 0 6
64607: PPUSH
64608: LD_VAR 0 11
64612: PPUSH
64613: CALL_OW 272
64617: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64618: LD_ADDR_VAR 0 8
64622: PUSH
64623: LD_VAR 0 2
64627: PPUSH
64628: LD_VAR 0 6
64632: PPUSH
64633: LD_VAR 0 11
64637: PPUSH
64638: CALL_OW 273
64642: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64643: LD_VAR 0 7
64647: PPUSH
64648: LD_VAR 0 8
64652: PPUSH
64653: CALL_OW 488
64657: NOT
64658: IFFALSE 64662
// continue ;
64660: GO 64590
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64662: LD_ADDR_VAR 0 9
64666: PUSH
64667: LD_VAR 0 12
64671: PUSH
64672: LD_INT 1
64674: ARRAY
64675: PPUSH
64676: LD_VAR 0 12
64680: PUSH
64681: LD_INT 2
64683: ARRAY
64684: PPUSH
64685: LD_VAR 0 7
64689: PPUSH
64690: LD_VAR 0 8
64694: PPUSH
64695: CALL_OW 298
64699: ST_TO_ADDR
// if tmp < distance then
64700: LD_VAR 0 9
64704: PUSH
64705: LD_VAR 0 10
64709: LESS
64710: IFFALSE 64732
// begin result := i ;
64712: LD_ADDR_VAR 0 5
64716: PUSH
64717: LD_VAR 0 6
64721: ST_TO_ADDR
// distance := tmp ;
64722: LD_ADDR_VAR 0 10
64726: PUSH
64727: LD_VAR 0 9
64731: ST_TO_ADDR
// end ; end ;
64732: GO 64590
64734: POP
64735: POP
// end ;
64736: LD_VAR 0 5
64740: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64741: LD_INT 0
64743: PPUSH
64744: PPUSH
// if not driver or not IsInUnit ( driver ) then
64745: LD_VAR 0 1
64749: NOT
64750: PUSH
64751: LD_VAR 0 1
64755: PPUSH
64756: CALL_OW 310
64760: NOT
64761: OR
64762: IFFALSE 64766
// exit ;
64764: GO 64856
// vehicle := IsInUnit ( driver ) ;
64766: LD_ADDR_VAR 0 3
64770: PUSH
64771: LD_VAR 0 1
64775: PPUSH
64776: CALL_OW 310
64780: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64781: LD_VAR 0 1
64785: PPUSH
64786: LD_STRING \
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: LD_INT 0
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: PUSH
64816: LD_STRING E
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_VAR 0 3
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PPUSH
64852: CALL_OW 446
// end ;
64856: LD_VAR 0 2
64860: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64861: LD_INT 0
64863: PPUSH
64864: PPUSH
// if not driver or not IsInUnit ( driver ) then
64865: LD_VAR 0 1
64869: NOT
64870: PUSH
64871: LD_VAR 0 1
64875: PPUSH
64876: CALL_OW 310
64880: NOT
64881: OR
64882: IFFALSE 64886
// exit ;
64884: GO 64976
// vehicle := IsInUnit ( driver ) ;
64886: LD_ADDR_VAR 0 3
64890: PUSH
64891: LD_VAR 0 1
64895: PPUSH
64896: CALL_OW 310
64900: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64901: LD_VAR 0 1
64905: PPUSH
64906: LD_STRING \
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: PUSH
64936: LD_STRING E
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: LD_VAR 0 3
64949: PUSH
64950: LD_INT 0
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PPUSH
64972: CALL_OW 447
// end ;
64976: LD_VAR 0 2
64980: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64981: LD_INT 0
64983: PPUSH
64984: PPUSH
64985: PPUSH
// tmp := [ ] ;
64986: LD_ADDR_VAR 0 5
64990: PUSH
64991: EMPTY
64992: ST_TO_ADDR
// for i in units do
64993: LD_ADDR_VAR 0 4
64997: PUSH
64998: LD_VAR 0 1
65002: PUSH
65003: FOR_IN
65004: IFFALSE 65042
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65006: LD_ADDR_VAR 0 5
65010: PUSH
65011: LD_VAR 0 5
65015: PPUSH
65016: LD_VAR 0 5
65020: PUSH
65021: LD_INT 1
65023: PLUS
65024: PPUSH
65025: LD_VAR 0 4
65029: PPUSH
65030: CALL_OW 256
65034: PPUSH
65035: CALL_OW 2
65039: ST_TO_ADDR
65040: GO 65003
65042: POP
65043: POP
// if not tmp then
65044: LD_VAR 0 5
65048: NOT
65049: IFFALSE 65053
// exit ;
65051: GO 65101
// if asc then
65053: LD_VAR 0 2
65057: IFFALSE 65081
// result := SortListByListAsc ( units , tmp ) else
65059: LD_ADDR_VAR 0 3
65063: PUSH
65064: LD_VAR 0 1
65068: PPUSH
65069: LD_VAR 0 5
65073: PPUSH
65074: CALL_OW 76
65078: ST_TO_ADDR
65079: GO 65101
// result := SortListByListDesc ( units , tmp ) ;
65081: LD_ADDR_VAR 0 3
65085: PUSH
65086: LD_VAR 0 1
65090: PPUSH
65091: LD_VAR 0 5
65095: PPUSH
65096: CALL_OW 77
65100: ST_TO_ADDR
// end ;
65101: LD_VAR 0 3
65105: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65106: LD_INT 0
65108: PPUSH
65109: PPUSH
// task := GetTaskList ( mech ) ;
65110: LD_ADDR_VAR 0 4
65114: PUSH
65115: LD_VAR 0 1
65119: PPUSH
65120: CALL_OW 437
65124: ST_TO_ADDR
// if not task then
65125: LD_VAR 0 4
65129: NOT
65130: IFFALSE 65134
// exit ;
65132: GO 65176
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65134: LD_ADDR_VAR 0 3
65138: PUSH
65139: LD_VAR 0 4
65143: PUSH
65144: LD_INT 1
65146: ARRAY
65147: PUSH
65148: LD_INT 1
65150: ARRAY
65151: PUSH
65152: LD_STRING r
65154: EQUAL
65155: PUSH
65156: LD_VAR 0 4
65160: PUSH
65161: LD_INT 1
65163: ARRAY
65164: PUSH
65165: LD_INT 4
65167: ARRAY
65168: PUSH
65169: LD_VAR 0 2
65173: EQUAL
65174: AND
65175: ST_TO_ADDR
// end ;
65176: LD_VAR 0 3
65180: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65181: LD_INT 0
65183: PPUSH
// SetDir ( unit , d ) ;
65184: LD_VAR 0 1
65188: PPUSH
65189: LD_VAR 0 4
65193: PPUSH
65194: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65198: LD_VAR 0 1
65202: PPUSH
65203: LD_VAR 0 2
65207: PPUSH
65208: LD_VAR 0 3
65212: PPUSH
65213: LD_VAR 0 5
65217: PPUSH
65218: CALL_OW 48
// end ;
65222: LD_VAR 0 6
65226: RET
// export function ToNaturalNumber ( number ) ; begin
65227: LD_INT 0
65229: PPUSH
// result := number div 1 ;
65230: LD_ADDR_VAR 0 2
65234: PUSH
65235: LD_VAR 0 1
65239: PUSH
65240: LD_INT 1
65242: DIV
65243: ST_TO_ADDR
// if number < 0 then
65244: LD_VAR 0 1
65248: PUSH
65249: LD_INT 0
65251: LESS
65252: IFFALSE 65262
// result := 0 ;
65254: LD_ADDR_VAR 0 2
65258: PUSH
65259: LD_INT 0
65261: ST_TO_ADDR
// end ;
65262: LD_VAR 0 2
65266: RET
// export function SortByClass ( units , class ) ; var un ; begin
65267: LD_INT 0
65269: PPUSH
65270: PPUSH
// if not units or not class then
65271: LD_VAR 0 1
65275: NOT
65276: PUSH
65277: LD_VAR 0 2
65281: NOT
65282: OR
65283: IFFALSE 65287
// exit ;
65285: GO 65382
// result := [ ] ;
65287: LD_ADDR_VAR 0 3
65291: PUSH
65292: EMPTY
65293: ST_TO_ADDR
// for un in units do
65294: LD_ADDR_VAR 0 4
65298: PUSH
65299: LD_VAR 0 1
65303: PUSH
65304: FOR_IN
65305: IFFALSE 65380
// if GetClass ( un ) = class then
65307: LD_VAR 0 4
65311: PPUSH
65312: CALL_OW 257
65316: PUSH
65317: LD_VAR 0 2
65321: EQUAL
65322: IFFALSE 65349
// result := Insert ( result , 1 , un ) else
65324: LD_ADDR_VAR 0 3
65328: PUSH
65329: LD_VAR 0 3
65333: PPUSH
65334: LD_INT 1
65336: PPUSH
65337: LD_VAR 0 4
65341: PPUSH
65342: CALL_OW 2
65346: ST_TO_ADDR
65347: GO 65378
// result := Replace ( result , result + 1 , un ) ;
65349: LD_ADDR_VAR 0 3
65353: PUSH
65354: LD_VAR 0 3
65358: PPUSH
65359: LD_VAR 0 3
65363: PUSH
65364: LD_INT 1
65366: PLUS
65367: PPUSH
65368: LD_VAR 0 4
65372: PPUSH
65373: CALL_OW 1
65377: ST_TO_ADDR
65378: GO 65304
65380: POP
65381: POP
// end ;
65382: LD_VAR 0 3
65386: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65387: LD_INT 0
65389: PPUSH
65390: PPUSH
65391: PPUSH
65392: PPUSH
65393: PPUSH
65394: PPUSH
65395: PPUSH
// result := [ ] ;
65396: LD_ADDR_VAR 0 4
65400: PUSH
65401: EMPTY
65402: ST_TO_ADDR
// if x - r < 0 then
65403: LD_VAR 0 1
65407: PUSH
65408: LD_VAR 0 3
65412: MINUS
65413: PUSH
65414: LD_INT 0
65416: LESS
65417: IFFALSE 65429
// min_x := 0 else
65419: LD_ADDR_VAR 0 8
65423: PUSH
65424: LD_INT 0
65426: ST_TO_ADDR
65427: GO 65445
// min_x := x - r ;
65429: LD_ADDR_VAR 0 8
65433: PUSH
65434: LD_VAR 0 1
65438: PUSH
65439: LD_VAR 0 3
65443: MINUS
65444: ST_TO_ADDR
// if y - r < 0 then
65445: LD_VAR 0 2
65449: PUSH
65450: LD_VAR 0 3
65454: MINUS
65455: PUSH
65456: LD_INT 0
65458: LESS
65459: IFFALSE 65471
// min_y := 0 else
65461: LD_ADDR_VAR 0 7
65465: PUSH
65466: LD_INT 0
65468: ST_TO_ADDR
65469: GO 65487
// min_y := y - r ;
65471: LD_ADDR_VAR 0 7
65475: PUSH
65476: LD_VAR 0 2
65480: PUSH
65481: LD_VAR 0 3
65485: MINUS
65486: ST_TO_ADDR
// max_x := x + r ;
65487: LD_ADDR_VAR 0 9
65491: PUSH
65492: LD_VAR 0 1
65496: PUSH
65497: LD_VAR 0 3
65501: PLUS
65502: ST_TO_ADDR
// max_y := y + r ;
65503: LD_ADDR_VAR 0 10
65507: PUSH
65508: LD_VAR 0 2
65512: PUSH
65513: LD_VAR 0 3
65517: PLUS
65518: ST_TO_ADDR
// for _x = min_x to max_x do
65519: LD_ADDR_VAR 0 5
65523: PUSH
65524: DOUBLE
65525: LD_VAR 0 8
65529: DEC
65530: ST_TO_ADDR
65531: LD_VAR 0 9
65535: PUSH
65536: FOR_TO
65537: IFFALSE 65638
// for _y = min_y to max_y do
65539: LD_ADDR_VAR 0 6
65543: PUSH
65544: DOUBLE
65545: LD_VAR 0 7
65549: DEC
65550: ST_TO_ADDR
65551: LD_VAR 0 10
65555: PUSH
65556: FOR_TO
65557: IFFALSE 65634
// begin if not ValidHex ( _x , _y ) then
65559: LD_VAR 0 5
65563: PPUSH
65564: LD_VAR 0 6
65568: PPUSH
65569: CALL_OW 488
65573: NOT
65574: IFFALSE 65578
// continue ;
65576: GO 65556
// if GetResourceTypeXY ( _x , _y ) then
65578: LD_VAR 0 5
65582: PPUSH
65583: LD_VAR 0 6
65587: PPUSH
65588: CALL_OW 283
65592: IFFALSE 65632
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65594: LD_ADDR_VAR 0 4
65598: PUSH
65599: LD_VAR 0 4
65603: PPUSH
65604: LD_VAR 0 4
65608: PUSH
65609: LD_INT 1
65611: PLUS
65612: PPUSH
65613: LD_VAR 0 5
65617: PUSH
65618: LD_VAR 0 6
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PPUSH
65627: CALL_OW 1
65631: ST_TO_ADDR
// end ;
65632: GO 65556
65634: POP
65635: POP
65636: GO 65536
65638: POP
65639: POP
// end ;
65640: LD_VAR 0 4
65644: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65645: LD_INT 0
65647: PPUSH
65648: PPUSH
65649: PPUSH
65650: PPUSH
65651: PPUSH
65652: PPUSH
65653: PPUSH
65654: PPUSH
// if not units then
65655: LD_VAR 0 1
65659: NOT
65660: IFFALSE 65664
// exit ;
65662: GO 66188
// result := UnitFilter ( units , [ f_ok ] ) ;
65664: LD_ADDR_VAR 0 3
65668: PUSH
65669: LD_VAR 0 1
65673: PPUSH
65674: LD_INT 50
65676: PUSH
65677: EMPTY
65678: LIST
65679: PPUSH
65680: CALL_OW 72
65684: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65685: LD_ADDR_VAR 0 8
65689: PUSH
65690: LD_VAR 0 1
65694: PUSH
65695: LD_INT 1
65697: ARRAY
65698: PPUSH
65699: CALL_OW 255
65703: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65704: LD_ADDR_VAR 0 10
65708: PUSH
65709: LD_INT 29
65711: PUSH
65712: LD_INT 91
65714: PUSH
65715: LD_INT 49
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: LIST
65722: ST_TO_ADDR
// if not result then
65723: LD_VAR 0 3
65727: NOT
65728: IFFALSE 65732
// exit ;
65730: GO 66188
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65732: LD_ADDR_VAR 0 5
65736: PUSH
65737: LD_INT 81
65739: PUSH
65740: LD_VAR 0 8
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PPUSH
65749: CALL_OW 69
65753: ST_TO_ADDR
// for i in result do
65754: LD_ADDR_VAR 0 4
65758: PUSH
65759: LD_VAR 0 3
65763: PUSH
65764: FOR_IN
65765: IFFALSE 66186
// begin tag := GetTag ( i ) + 1 ;
65767: LD_ADDR_VAR 0 9
65771: PUSH
65772: LD_VAR 0 4
65776: PPUSH
65777: CALL_OW 110
65781: PUSH
65782: LD_INT 1
65784: PLUS
65785: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65786: LD_ADDR_VAR 0 7
65790: PUSH
65791: LD_VAR 0 4
65795: PPUSH
65796: CALL_OW 250
65800: PPUSH
65801: LD_VAR 0 4
65805: PPUSH
65806: CALL_OW 251
65810: PPUSH
65811: LD_INT 6
65813: PPUSH
65814: CALL 65387 0 3
65818: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65819: LD_VAR 0 4
65823: PPUSH
65824: CALL_OW 247
65828: PUSH
65829: LD_INT 2
65831: EQUAL
65832: PUSH
65833: LD_VAR 0 7
65837: AND
65838: PUSH
65839: LD_VAR 0 4
65843: PPUSH
65844: CALL_OW 264
65848: PUSH
65849: LD_VAR 0 10
65853: IN
65854: NOT
65855: AND
65856: IFFALSE 65895
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65858: LD_VAR 0 4
65862: PPUSH
65863: LD_VAR 0 7
65867: PUSH
65868: LD_INT 1
65870: ARRAY
65871: PUSH
65872: LD_INT 1
65874: ARRAY
65875: PPUSH
65876: LD_VAR 0 7
65880: PUSH
65881: LD_INT 1
65883: ARRAY
65884: PUSH
65885: LD_INT 2
65887: ARRAY
65888: PPUSH
65889: CALL_OW 116
65893: GO 66184
// if path > tag then
65895: LD_VAR 0 2
65899: PUSH
65900: LD_VAR 0 9
65904: GREATER
65905: IFFALSE 66113
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65907: LD_ADDR_VAR 0 6
65911: PUSH
65912: LD_VAR 0 5
65916: PPUSH
65917: LD_INT 91
65919: PUSH
65920: LD_VAR 0 4
65924: PUSH
65925: LD_INT 8
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: LIST
65932: PPUSH
65933: CALL_OW 72
65937: ST_TO_ADDR
// if nearEnemy then
65938: LD_VAR 0 6
65942: IFFALSE 66011
// begin if GetWeapon ( i ) = ru_time_lapser then
65944: LD_VAR 0 4
65948: PPUSH
65949: CALL_OW 264
65953: PUSH
65954: LD_INT 49
65956: EQUAL
65957: IFFALSE 65985
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65959: LD_VAR 0 4
65963: PPUSH
65964: LD_VAR 0 6
65968: PPUSH
65969: LD_VAR 0 4
65973: PPUSH
65974: CALL_OW 74
65978: PPUSH
65979: CALL_OW 112
65983: GO 66009
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65985: LD_VAR 0 4
65989: PPUSH
65990: LD_VAR 0 6
65994: PPUSH
65995: LD_VAR 0 4
65999: PPUSH
66000: CALL_OW 74
66004: PPUSH
66005: CALL_OW 115
// end else
66009: GO 66111
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66011: LD_VAR 0 4
66015: PPUSH
66016: LD_VAR 0 2
66020: PUSH
66021: LD_VAR 0 9
66025: ARRAY
66026: PUSH
66027: LD_INT 1
66029: ARRAY
66030: PPUSH
66031: LD_VAR 0 2
66035: PUSH
66036: LD_VAR 0 9
66040: ARRAY
66041: PUSH
66042: LD_INT 2
66044: ARRAY
66045: PPUSH
66046: CALL_OW 297
66050: PUSH
66051: LD_INT 6
66053: GREATER
66054: IFFALSE 66097
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66056: LD_VAR 0 4
66060: PPUSH
66061: LD_VAR 0 2
66065: PUSH
66066: LD_VAR 0 9
66070: ARRAY
66071: PUSH
66072: LD_INT 1
66074: ARRAY
66075: PPUSH
66076: LD_VAR 0 2
66080: PUSH
66081: LD_VAR 0 9
66085: ARRAY
66086: PUSH
66087: LD_INT 2
66089: ARRAY
66090: PPUSH
66091: CALL_OW 114
66095: GO 66111
// SetTag ( i , tag ) ;
66097: LD_VAR 0 4
66101: PPUSH
66102: LD_VAR 0 9
66106: PPUSH
66107: CALL_OW 109
// end else
66111: GO 66184
// if enemy then
66113: LD_VAR 0 5
66117: IFFALSE 66184
// begin if GetWeapon ( i ) = ru_time_lapser then
66119: LD_VAR 0 4
66123: PPUSH
66124: CALL_OW 264
66128: PUSH
66129: LD_INT 49
66131: EQUAL
66132: IFFALSE 66160
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66134: LD_VAR 0 4
66138: PPUSH
66139: LD_VAR 0 5
66143: PPUSH
66144: LD_VAR 0 4
66148: PPUSH
66149: CALL_OW 74
66153: PPUSH
66154: CALL_OW 112
66158: GO 66184
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66160: LD_VAR 0 4
66164: PPUSH
66165: LD_VAR 0 5
66169: PPUSH
66170: LD_VAR 0 4
66174: PPUSH
66175: CALL_OW 74
66179: PPUSH
66180: CALL_OW 115
// end ; end ;
66184: GO 65764
66186: POP
66187: POP
// end ;
66188: LD_VAR 0 3
66192: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66193: LD_INT 0
66195: PPUSH
66196: PPUSH
66197: PPUSH
// if not unit or IsInUnit ( unit ) then
66198: LD_VAR 0 1
66202: NOT
66203: PUSH
66204: LD_VAR 0 1
66208: PPUSH
66209: CALL_OW 310
66213: OR
66214: IFFALSE 66218
// exit ;
66216: GO 66309
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66218: LD_ADDR_VAR 0 4
66222: PUSH
66223: LD_VAR 0 1
66227: PPUSH
66228: CALL_OW 250
66232: PPUSH
66233: LD_VAR 0 2
66237: PPUSH
66238: LD_INT 1
66240: PPUSH
66241: CALL_OW 272
66245: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66246: LD_ADDR_VAR 0 5
66250: PUSH
66251: LD_VAR 0 1
66255: PPUSH
66256: CALL_OW 251
66260: PPUSH
66261: LD_VAR 0 2
66265: PPUSH
66266: LD_INT 1
66268: PPUSH
66269: CALL_OW 273
66273: ST_TO_ADDR
// if ValidHex ( x , y ) then
66274: LD_VAR 0 4
66278: PPUSH
66279: LD_VAR 0 5
66283: PPUSH
66284: CALL_OW 488
66288: IFFALSE 66309
// ComTurnXY ( unit , x , y ) ;
66290: LD_VAR 0 1
66294: PPUSH
66295: LD_VAR 0 4
66299: PPUSH
66300: LD_VAR 0 5
66304: PPUSH
66305: CALL_OW 118
// end ;
66309: LD_VAR 0 3
66313: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66314: LD_INT 0
66316: PPUSH
66317: PPUSH
// result := false ;
66318: LD_ADDR_VAR 0 3
66322: PUSH
66323: LD_INT 0
66325: ST_TO_ADDR
// if not units then
66326: LD_VAR 0 2
66330: NOT
66331: IFFALSE 66335
// exit ;
66333: GO 66380
// for i in units do
66335: LD_ADDR_VAR 0 4
66339: PUSH
66340: LD_VAR 0 2
66344: PUSH
66345: FOR_IN
66346: IFFALSE 66378
// if See ( side , i ) then
66348: LD_VAR 0 1
66352: PPUSH
66353: LD_VAR 0 4
66357: PPUSH
66358: CALL_OW 292
66362: IFFALSE 66376
// begin result := true ;
66364: LD_ADDR_VAR 0 3
66368: PUSH
66369: LD_INT 1
66371: ST_TO_ADDR
// exit ;
66372: POP
66373: POP
66374: GO 66380
// end ;
66376: GO 66345
66378: POP
66379: POP
// end ;
66380: LD_VAR 0 3
66384: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66385: LD_INT 0
66387: PPUSH
66388: PPUSH
66389: PPUSH
66390: PPUSH
// if not unit or not points then
66391: LD_VAR 0 1
66395: NOT
66396: PUSH
66397: LD_VAR 0 2
66401: NOT
66402: OR
66403: IFFALSE 66407
// exit ;
66405: GO 66497
// dist := 99999 ;
66407: LD_ADDR_VAR 0 5
66411: PUSH
66412: LD_INT 99999
66414: ST_TO_ADDR
// for i in points do
66415: LD_ADDR_VAR 0 4
66419: PUSH
66420: LD_VAR 0 2
66424: PUSH
66425: FOR_IN
66426: IFFALSE 66495
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66428: LD_ADDR_VAR 0 6
66432: PUSH
66433: LD_VAR 0 1
66437: PPUSH
66438: LD_VAR 0 4
66442: PUSH
66443: LD_INT 1
66445: ARRAY
66446: PPUSH
66447: LD_VAR 0 4
66451: PUSH
66452: LD_INT 2
66454: ARRAY
66455: PPUSH
66456: CALL_OW 297
66460: ST_TO_ADDR
// if tmpDist < dist then
66461: LD_VAR 0 6
66465: PUSH
66466: LD_VAR 0 5
66470: LESS
66471: IFFALSE 66493
// begin result := i ;
66473: LD_ADDR_VAR 0 3
66477: PUSH
66478: LD_VAR 0 4
66482: ST_TO_ADDR
// dist := tmpDist ;
66483: LD_ADDR_VAR 0 5
66487: PUSH
66488: LD_VAR 0 6
66492: ST_TO_ADDR
// end ; end ;
66493: GO 66425
66495: POP
66496: POP
// end ;
66497: LD_VAR 0 3
66501: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66502: LD_INT 0
66504: PPUSH
// uc_side := side ;
66505: LD_ADDR_OWVAR 20
66509: PUSH
66510: LD_VAR 0 1
66514: ST_TO_ADDR
// uc_nation := 3 ;
66515: LD_ADDR_OWVAR 21
66519: PUSH
66520: LD_INT 3
66522: ST_TO_ADDR
// vc_chassis := 25 ;
66523: LD_ADDR_OWVAR 37
66527: PUSH
66528: LD_INT 25
66530: ST_TO_ADDR
// vc_engine := engine_siberite ;
66531: LD_ADDR_OWVAR 39
66535: PUSH
66536: LD_INT 3
66538: ST_TO_ADDR
// vc_control := control_computer ;
66539: LD_ADDR_OWVAR 38
66543: PUSH
66544: LD_INT 3
66546: ST_TO_ADDR
// vc_weapon := 59 ;
66547: LD_ADDR_OWVAR 40
66551: PUSH
66552: LD_INT 59
66554: ST_TO_ADDR
// result := CreateVehicle ;
66555: LD_ADDR_VAR 0 5
66559: PUSH
66560: CALL_OW 45
66564: ST_TO_ADDR
// SetDir ( result , d ) ;
66565: LD_VAR 0 5
66569: PPUSH
66570: LD_VAR 0 4
66574: PPUSH
66575: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66579: LD_VAR 0 5
66583: PPUSH
66584: LD_VAR 0 2
66588: PPUSH
66589: LD_VAR 0 3
66593: PPUSH
66594: LD_INT 0
66596: PPUSH
66597: CALL_OW 48
// end ;
66601: LD_VAR 0 5
66605: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66606: LD_INT 0
66608: PPUSH
66609: PPUSH
66610: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66611: LD_ADDR_VAR 0 2
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66634: LD_VAR 0 1
66638: NOT
66639: PUSH
66640: LD_VAR 0 1
66644: PPUSH
66645: CALL_OW 264
66649: PUSH
66650: LD_INT 12
66652: PUSH
66653: LD_INT 51
66655: PUSH
66656: LD_INT 32
66658: PUSH
66659: LD_INT 89
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: IN
66668: NOT
66669: OR
66670: IFFALSE 66674
// exit ;
66672: GO 66772
// for i := 1 to 3 do
66674: LD_ADDR_VAR 0 3
66678: PUSH
66679: DOUBLE
66680: LD_INT 1
66682: DEC
66683: ST_TO_ADDR
66684: LD_INT 3
66686: PUSH
66687: FOR_TO
66688: IFFALSE 66770
// begin tmp := GetCargo ( cargo , i ) ;
66690: LD_ADDR_VAR 0 4
66694: PUSH
66695: LD_VAR 0 1
66699: PPUSH
66700: LD_VAR 0 3
66704: PPUSH
66705: CALL_OW 289
66709: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66710: LD_ADDR_VAR 0 2
66714: PUSH
66715: LD_VAR 0 2
66719: PPUSH
66720: LD_VAR 0 3
66724: PPUSH
66725: LD_VAR 0 4
66729: PPUSH
66730: CALL_OW 1
66734: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66735: LD_ADDR_VAR 0 2
66739: PUSH
66740: LD_VAR 0 2
66744: PPUSH
66745: LD_INT 4
66747: PPUSH
66748: LD_VAR 0 2
66752: PUSH
66753: LD_INT 4
66755: ARRAY
66756: PUSH
66757: LD_VAR 0 4
66761: PLUS
66762: PPUSH
66763: CALL_OW 1
66767: ST_TO_ADDR
// end ;
66768: GO 66687
66770: POP
66771: POP
// end ;
66772: LD_VAR 0 2
66776: RET
// export function Length ( array ) ; begin
66777: LD_INT 0
66779: PPUSH
// result := array + 0 ;
66780: LD_ADDR_VAR 0 2
66784: PUSH
66785: LD_VAR 0 1
66789: PUSH
66790: LD_INT 0
66792: PLUS
66793: ST_TO_ADDR
// end ;
66794: LD_VAR 0 2
66798: RET
// export function PrepareArray ( array ) ; begin
66799: LD_INT 0
66801: PPUSH
// result := array diff 0 ;
66802: LD_ADDR_VAR 0 2
66806: PUSH
66807: LD_VAR 0 1
66811: PUSH
66812: LD_INT 0
66814: DIFF
66815: ST_TO_ADDR
// if not result [ 1 ] then
66816: LD_VAR 0 2
66820: PUSH
66821: LD_INT 1
66823: ARRAY
66824: NOT
66825: IFFALSE 66845
// result := Delete ( result , 1 ) ;
66827: LD_ADDR_VAR 0 2
66831: PUSH
66832: LD_VAR 0 2
66836: PPUSH
66837: LD_INT 1
66839: PPUSH
66840: CALL_OW 3
66844: ST_TO_ADDR
// end ;
66845: LD_VAR 0 2
66849: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66850: LD_INT 0
66852: PPUSH
66853: PPUSH
66854: PPUSH
66855: PPUSH
// sibRocketRange := 25 ;
66856: LD_ADDR_VAR 0 6
66860: PUSH
66861: LD_INT 25
66863: ST_TO_ADDR
// result := false ;
66864: LD_ADDR_VAR 0 4
66868: PUSH
66869: LD_INT 0
66871: ST_TO_ADDR
// for i := 0 to 5 do
66872: LD_ADDR_VAR 0 5
66876: PUSH
66877: DOUBLE
66878: LD_INT 0
66880: DEC
66881: ST_TO_ADDR
66882: LD_INT 5
66884: PUSH
66885: FOR_TO
66886: IFFALSE 66953
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66888: LD_VAR 0 1
66892: PPUSH
66893: LD_VAR 0 5
66897: PPUSH
66898: LD_VAR 0 6
66902: PPUSH
66903: CALL_OW 272
66907: PPUSH
66908: LD_VAR 0 2
66912: PPUSH
66913: LD_VAR 0 5
66917: PPUSH
66918: LD_VAR 0 6
66922: PPUSH
66923: CALL_OW 273
66927: PPUSH
66928: LD_VAR 0 3
66932: PPUSH
66933: CALL_OW 309
66937: IFFALSE 66951
// begin result := true ;
66939: LD_ADDR_VAR 0 4
66943: PUSH
66944: LD_INT 1
66946: ST_TO_ADDR
// exit ;
66947: POP
66948: POP
66949: GO 66955
// end ;
66951: GO 66885
66953: POP
66954: POP
// end ;
66955: LD_VAR 0 4
66959: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66960: LD_INT 0
66962: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66963: LD_VAR 0 1
66967: PPUSH
66968: LD_VAR 0 2
66972: PPUSH
66973: LD_INT 0
66975: PPUSH
66976: LD_INT 0
66978: PPUSH
66979: LD_INT 1
66981: PPUSH
66982: LD_INT 0
66984: PPUSH
66985: CALL_OW 587
// end ;
66989: LD_VAR 0 3
66993: RET
// export function CenterOnNow ( unit ) ; begin
66994: LD_INT 0
66996: PPUSH
// result := IsInUnit ( unit ) ;
66997: LD_ADDR_VAR 0 2
67001: PUSH
67002: LD_VAR 0 1
67006: PPUSH
67007: CALL_OW 310
67011: ST_TO_ADDR
// if not result then
67012: LD_VAR 0 2
67016: NOT
67017: IFFALSE 67029
// result := unit ;
67019: LD_ADDR_VAR 0 2
67023: PUSH
67024: LD_VAR 0 1
67028: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67029: LD_VAR 0 1
67033: PPUSH
67034: CALL_OW 87
// end ;
67038: LD_VAR 0 2
67042: RET
// export function ComMoveHex ( unit , hex ) ; begin
67043: LD_INT 0
67045: PPUSH
// if not hex then
67046: LD_VAR 0 2
67050: NOT
67051: IFFALSE 67055
// exit ;
67053: GO 67108
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67055: LD_VAR 0 2
67059: PUSH
67060: LD_INT 1
67062: ARRAY
67063: PPUSH
67064: LD_VAR 0 2
67068: PUSH
67069: LD_INT 2
67071: ARRAY
67072: PPUSH
67073: CALL_OW 428
67077: IFFALSE 67081
// exit ;
67079: GO 67108
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67081: LD_VAR 0 1
67085: PPUSH
67086: LD_VAR 0 2
67090: PUSH
67091: LD_INT 1
67093: ARRAY
67094: PPUSH
67095: LD_VAR 0 2
67099: PUSH
67100: LD_INT 2
67102: ARRAY
67103: PPUSH
67104: CALL_OW 111
// end ;
67108: LD_VAR 0 3
67112: RET
